id,pr_number,user,submitted_at,state,body,codebert_sentiment_label,codebert_confidence
35279792,2929,onurkaraman,2017-04-28T06:12:43Z,COMMENTED,did a quick pass through the controller changes and left some minor comments.,0,0.9789472818374634
40852251,2929,becketqin,2017-05-30T06:03:13Z,COMMENTED,thanks for the patch. it looks the patch is a little outdated. i took a quick glance at part of the patch and fee it would probably be easier to review after rebasing on trunk. could you do that?,1,0.9561977386474609
43331378,2929,becketqin,2017-06-12T03:26:38Z,COMMENTED,thanks for the patch. i made the first pass on the main code and left some comments. i haven't reviewed the tests yet. will do that later.,1,0.9392105937004089
46061417,2929,becketqin,2017-06-23T21:16:16Z,COMMENTED,"thanks for updating the patch. made another path and left some comments. there are some other files that are not included in the patch but may need some changes as well. 1. in `groupmetadatamanager.cleanupgroupmetadata()`, it seems we are not handling the storageexception from line 724. 2. if a disk exception occurs in a delayed write to the socket during a fetchrequest, it seems we are not handling that. not sure what is the best way to solve that though. what i did was just find all the callers for the disk related method in `filerecords`, e.g. `readinto()`, `read()`, `append()`, `flush()`. (note that `filerecords.read()` do not actually read disk, but the follow up actions typically will read the disks). i haven't look at other files we have on the disk yet. but i think the log file is probably the most important one.",0,0.7135009765625
46132455,2929,becketqin,2017-06-27T23:34:56Z,COMMENTED,"thanks for the patch. just made another path and left some comments. i am wondering if we want to add a few more unit test for the log dir failure case. 1. when log dir fails, there are correct error code in the response. 2. the producer is able to send messages with retries when a log dir failure occurs. the system test is good, but maybe less handy to run. so some basic unit tests would help.",1,0.9676083326339722
46999634,2929,junrao,2017-06-30T19:40:06Z,COMMENTED,: thanks for the patch. made a pass of non-testing files. the overall flow is pretty clear and well organized. left some comments below.,1,0.9743435382843018
48219128,2929,junrao,2017-07-06T01:52:22Z,COMMENTED,a few more comments.,0,0.959341287612915
48933406,2929,junrao,2017-07-13T16:57:14Z,COMMENTED,: thanks for the updated patch. made another pass of the non-testing files and left some comments.,1,0.8005508184432983
50391353,2929,junrao,2017-07-18T05:13:01Z,COMMENTED,: thanks for the new patch. a few more comments.,1,0.9111230373382568
51041045,2929,junrao,2017-07-20T16:15:34Z,COMMENTED,: thanks for the latest patch. it looks pretty good now. just some more minor comments.,1,0.9932445883750916
51521889,2929,junrao,2017-07-21T16:59:01Z,COMMENTED,: thanks for working on this patch diligently. lgtm. just a few minor comments. i will let becket make another pass. he can merge the patch if he is satisfied.,1,0.988184928894043
51548681,2929,becketqin,2017-07-22T05:09:32Z,COMMENTED,thanks for the patch. lgtm. i gave a final pass and left some minor comments. thanks a lot for the detailed review!,1,0.9902369379997253
51629344,2929,becketqin,2017-07-22T19:38:39Z,COMMENTED,"thanks for the patch. merged to trunk. i left a minor comment, we can address that in the follow up cleaning patch.",1,0.9636626243591309
445850773,9001,kowshik,2020-07-09T23:50:39Z,COMMENTED,first pass,0,0.9444324970245361
447492344,9001,abbccdda,2020-07-20T05:58:23Z,COMMENTED,"thanks for the awesome pr! i have done the first pass on non-testing part, will take another look at testing part later this week.",1,0.995669960975647
452086862,9001,kowshik,2020-07-21T10:08:59Z,COMMENTED,"thanks for the great review! i have addressed the comments in d0b6984bc0dca873e30964adb5e4cfe1262a39b9, and have provided my responses to your comments. please have a look.",1,0.9949970245361328
452959442,9001,abbccdda,2020-07-23T18:51:42Z,COMMENTED,thanks for the update. got a couple of more comments.,1,0.8973552584648132
455261235,9001,kowshik,2020-07-28T09:27:16Z,COMMENTED,"thanks for the review! i have addressed your comments in ee1a40b6e8264e0f0cc9f68c0c82b330fa0d724a, please have a look.",1,0.9888185858726501
456880892,9001,abbccdda,2020-07-30T03:59:34Z,COMMENTED,made another pass. would be good to have jun take a look as well.,0,0.9127130508422852
463650370,9001,junrao,2020-08-10T16:34:04Z,COMMENTED,: thanks for the pr. made a pass of non-testing files. a few comments below.,1,0.9803227186203003
497716516,9001,junrao,2020-09-29T01:41:01Z,COMMENTED,: thanks for the updated pr. made another pass of non-testing files. a few more comments below.,1,0.9745368957519531
498702686,9001,abbccdda,2020-09-29T17:37:07Z,COMMENTED,"just looked through the change for firstactiveversion, which makes sense. the only question i have is that if i'm doing a bold release by removing the deprecated code completely, such that previously i have version range [1, 6] and now the code only supports [4, 6] for a pair [min, max], would my deployment be successful automatically?",0,0.9683170318603516
499803222,9001,junrao,2020-10-01T00:16:31Z,COMMENTED,: thanks for the updated pr. a few followup comments below.,1,0.8905922770500183
501427255,9001,junrao,2020-10-02T20:27:19Z,COMMENTED,: thanks for the updated pr. a few more comments below.,1,0.9159396886825562
501428667,9001,junrao,2020-10-02T20:31:49Z,COMMENTED,"a couple of more comments. also, there are compilation errors for java 8. [error] /users/jun/intellij/kafka/core/src/main/scala/kafka/server/finalizedfeaturecache.scala:148: invalid literal number [error] /users/jun/intellij/kafka/core/src/main/scala/kafka/server/finalizedfeaturecache.scala:157: invalid literal number two errors found",0,0.9937984347343445
502245667,9001,junrao,2020-10-05T18:10:02Z,COMMENTED,: thanks for the updated pr. just a few more comments below.,1,0.9395200610160828
503126954,9001,junrao,2020-10-06T16:02:59Z,APPROVED,: thanks for the latest pr. lgtm. is the test failure in jdk 15 related to this pr?,1,0.9260504841804504
503435680,9001,abbccdda,2020-10-06T23:51:06Z,APPROVED,"lgtm, thanks for the great work!",1,0.9957544803619385
22856648,2476,becketqin,2017-02-21T02:41:41Z,COMMENTED,"thanks for the patch. left some comments. it looks the patch again has conflicts with trunk. to avoid frequent rebase, let's finish a few iteration of reviews before we rebase.",1,0.9611882567405701
23909758,2476,becketqin,2017-02-27T06:11:04Z,COMMENTED,sorry for the delayed reply. i made another pass and left some comments.,-1,0.9923458099365234
24464527,2476,ijuma,2017-03-01T13:26:08Z,COMMENTED,"thanks for the pr. i looked briefly and i left a few comments. in addition, i'm wondering about the naming of the method. is there a reason why we call it `purge` instead of `delete`? we use the latter in many other contexts. also, i noticed that the api is called `purge` where the command and method have `data` in the name. finally, the user-facing api has the `before` suffix. is the idea that we will eventually have other `purge` (or `delete`) methods? i should have raised these questions in the kip, so sorry about that. still, if we decide to change anything, better to do it before we merge the code.",1,0.9437531232833862
25687702,2476,junrao,2017-03-08T03:09:58Z,COMMENTED,: thanks for the patch. left some comments below.,1,0.8313326835632324
27451087,2476,becketqin,2017-03-17T02:18:45Z,COMMENTED,"thanks for the patch. i made another pass and left some comments. also, can we add a unit test for starting offset checkpoint?",1,0.9258119463920593
27761750,2476,junrao,2017-03-20T05:34:20Z,COMMENTED,: thanks for the patch. made another pass and the following are some comments.,1,0.8073219060897827
28569809,2476,junrao,2017-03-23T16:28:33Z,COMMENTED,: thanks for the updated patch. a few more quick comments below.,1,0.8914076089859009
29019860,2476,junrao,2017-03-24T22:10:54Z,COMMENTED,": thanks for the patch. looks good to me other than the following few more comments. sorry, but you have to rebase now.",1,0.9899436235427856
29100514,2476,junrao,2017-03-27T20:15:05Z,COMMENTED,": thanks for rebasing. made another pass. there are a few more minor comments. another thing that i was thinking is how logstartoffset is maintained with respect to log cleaning. during log cleaner, we could remove all messages in the first segment. however, there doesn't seem to be logic for advancing logstartoffset in log.replacesegments(), which the log cleaner calls.",1,0.8452393412590027
29350240,2476,becketqin,2017-03-28T05:02:46Z,COMMENTED,thanks for the patch. lgtm except a very rare corner case.,1,0.9785853624343872
24642608,2614,junrao,2017-03-06T19:09:27Z,COMMENTED,: thanks for the patch. looks good overall. made a pass of non-test files and added some comments.,1,0.9918931722640991
26262668,2614,ijuma,2017-03-10T13:04:27Z,COMMENTED,i left a few comments. i didn't review the message format changes themselves since you are about to do a bunch of renames and a trunk merge (i assume). probably best to review after that.,0,0.9519007205963135
26888981,2614,junrao,2017-03-15T05:00:11Z,COMMENTED,: thanks for the patch. a few more comments.,1,0.8908551931381226
27402407,2614,junrao,2017-03-16T18:24:10Z,COMMENTED,: just a few quick comments.,0,0.8054257035255432
27376662,2614,ijuma,2017-03-16T22:38:50Z,COMMENTED,"looking pretty good. i have left a few comments (still going through the more complex parts). one question: what's our plan regarding system tests? `upgrade_test.py` and `message_format_change_test.py` need to be updated to take into account that there are 3 message format versions now, for example.",1,0.8640368580818176
27499023,2614,junrao,2017-03-17T04:27:17Z,COMMENTED,: thanks for the patch. a few more comments.,1,0.8908551931381226
27834344,2614,ijuma,2017-03-20T14:51:29Z,COMMENTED,a few more comments. note that i'm ok with addressing the less important ones in subsequent prs if that's easier.,0,0.9445123672485352
27997048,2614,ijuma,2017-03-21T14:56:45Z,COMMENTED,next batch of comments. i think i'm close to the end now.,0,0.9342780709266663
28276005,2614,apurvam,2017-03-22T00:58:01Z,COMMENTED,"i compiled the perf numbers for this patch, results available here: [a link] there is no observable regression on produce or consume at varying message sizes, with different workloads, on different machines. we do see significant on disk savings at smaller message sizes. given the nature of the tests, i think the margin of error in throughput results is 10%. results which show a difference of more than 10% should be treated with a grain of salt: they generally don't reproduce across runs. we see consistent producer side performance improvements at small sizes, correlated with lower produce request size. we see general consume side improvements, but there is no pattern and we can't really explain the behavior. also there is variation across runs. so i think we should make no claims about any improvements on the consume side.",0,0.9759013652801514
28288520,2614,ijuma,2017-03-22T03:51:08Z,COMMENTED,"a few comments on `logvalidator`. important question: is it right that we don't call `batch.ensurevalid()`? oh, i see, we do it in `log.analyzeandvalidaterecords`. seems like that method should be in `logvalidator` too. a future clean-up. edit: i deleted most comments as i either figured out the answer or included it in my minor pr.",0,0.94940185546875
28365653,2614,ijuma,2017-03-22T15:28:47Z,APPROVED,"i finally have gone through the whole diff. :) lgtm to merge if the system tests pass. i have made a few notes of follow-up changes (most are not time sensitive although a couple are) and will file jiras in the next few days. while going through the changes, i put together some minor improvements and some additional tests: [a link] we can merge it to this pr or to trunk subsequently depending on your preference.",1,0.9948739409446716
28298772,2614,junrao,2017-03-22T17:07:13Z,COMMENTED,: thanks for the patch. lgtm. just a few minor comments.,1,0.9659988284111023
28761442,2614,ijuma,2017-03-23T20:20:26Z,COMMENTED,"thanks, fix looks good. some minor comments.",1,0.9926955699920654
28991991,2614,ijuma,2017-03-24T19:29:44Z,APPROVED,"thanks for running the system tests. latest updates lgtm too. will merge to trunk shortly. this is an impressive pr, well done. :) also, kudos to jun for his detailed review. i took notes of follow-up work and will file a few jiras in the next few days. , please update the kip page to include the updates that we did during the pr review.",1,0.9957510232925415
63472595,3874,junrao,2017-09-20T00:21:15Z,COMMENTED,: thanks for the patch. made a pass of all non-testing files. looks good overall. a few comments below.,1,0.9936261177062988
64082993,3874,junrao,2017-09-20T23:53:10Z,COMMENTED,: thanks for the updated patch. a few more comments.,1,0.8383483290672302
64425739,3874,junrao,2017-09-22T00:41:58Z,COMMENTED,: thanks for the updated patch. made a pass of all files and left some more comments.,1,0.8138525485992432
66600495,3874,junrao,2017-10-03T00:19:59Z,COMMENTED,": thanks for the updated patch. left a few more comments. also, sequencing wise, we probably want to fix your other pr 3820 before this one?",1,0.7505925297737122
66634580,3874,ijuma,2017-10-03T01:32:09Z,COMMENTED,i had a quick look at the `log` changes and left some comments.,0,0.9660211801528931
67496934,3874,junrao,2017-10-06T00:27:54Z,COMMENTED,: thanks for the new updates. a few more comments.,1,0.903150200843811
68450541,3874,junrao,2017-10-11T00:41:15Z,COMMENTED,: thanks for the latest patch. just a few more comments.,1,0.952075183391571
68779239,3874,junrao,2017-10-11T23:49:36Z,COMMENTED,": thanks for the latest patch. just a few more minor comments. also, kicked off a system test on the branch.",1,0.948293924331665
69316575,3874,junrao,2017-10-13T22:07:17Z,COMMENTED,: thanks for the patch. a few more minor comments. also kicked off another run of system test.,1,0.9073712229728699
232669403,5527,vvcephei,2019-05-01T20:01:07Z,COMMENTED,"hey! i've made a fractional pass, and ran out of time, so i'm sending my comments so far.",1,0.5536288619041443
234220695,5527,vvcephei,2019-05-10T14:47:22Z,COMMENTED,"hi , what's the status of this pr? it seems there was some hanging discussion... here's another very small batch of review comments:",0,0.7194958329200745
238581384,5527,bellemare,2019-05-16T19:13:19Z,COMMENTED,"i will go back through it and clean up the comments, the commented-out code, etc. as it stands currently though, it does have a few issues that i have highlighted that i would love to get some specific feedback on.",0,0.6532465219497681
252549428,5527,vvcephei,2019-06-20T22:21:57Z,COMMENTED,"hey , i'm really sorry that it took me so long to get you a real review. i haven't looked super hard at the ast graph wiring stuff or the tests. i just wanted to focus on the logic in the first pass. really nice work overall tackling a super complex piece of logic. i mentioned a range of concerns, some more important than others. i think the only one that would result in a large amount of work is that i found the logic around prefix scan to be a bit concerning. but i can also see how you might be ""trapped"". please let me know if you are out of ideas, and i can spend some time kicking it around to see if i get any inspiration. but please don't let my comments take away from the awesome job you've done.",-1,0.9550033211708069
281082113,5527,cpettitt-confluent,2019-08-28T22:52:45Z,COMMENTED,"initial pass. i'm relatively new to the topology stuff, so i hope you get a review from someone else there. also, my eyes started glazing over as i got to the tests. i would be happy to do a pass on them when we get the code in good shape, but don't want to hold up getting you some immediate feedback.",1,0.9263302683830261
284290098,5527,bbejeck,2019-09-10T19:24:11Z,COMMENTED,thanks for all the hard work on this! i've made a pass and overall looks good.,1,0.9953263998031616
290693564,5527,bbejeck,2019-09-19T16:32:26Z,COMMENTED,"thanks for the update , overall looks good, just one minor nit.",1,0.9905508756637573
296419483,5527,bbejeck,2019-10-02T17:56:49Z,APPROVED,lgtm,0,0.7242414951324463
296421178,5527,vvcephei,2019-10-02T17:59:40Z,APPROVED,"looks good! thanks, !",1,0.9956101775169373
413795889,8680,abbccdda,2020-05-18T20:35:03Z,COMMENTED,"thanks for the pr. some meta comments: 1. we could create sub tasks within jira 9755 to better track individual effort, like read path change, write path change, etc 2. could you perform some basic sanity checks for this pr? the usual command i tend to use is `./gradlew checkstylemain checkstyletest spotbugsmain spotbugstest spotbugsscoverage compiletestjava && ./gradlew unittest` to make sure we have no style violation or unit test failure haven't finished reviewing the core logic, but feel you could start addressing these suggestions in parallel, thanks!",1,0.9642874002456665
413928081,8680,abbccdda,2020-05-19T02:40:39Z,COMMENTED,some more comments.,0,0.9690834283828735
414092115,8680,kowshik,2020-05-20T10:06:11Z,COMMENTED,: thanks for the review! i have created a sub-task jira kafka-10027 to track this pr (the parent jira is still kafka-975). i'll also update this pr if i see any checkstyle or unit test failures based on the command you shared. this pr is now ready for another pass.,1,0.975898265838623
415423791,8680,abbccdda,2020-05-21T04:27:12Z,COMMENTED,"thanks for the update, get more comments.",1,0.5214439630508423
416042080,8680,kowshik,2020-05-22T09:30:35Z,COMMENTED,"thanks for the comments, ! i have addressed them, and, the pr is ready for further review now.",1,0.9752429723739624
417207312,8680,abbccdda,2020-05-23T04:01:33Z,COMMENTED,"thanks for the update, looks very promising now! get some more comments.",1,0.9941980838775635
417318799,8680,kowshik,2020-05-24T01:58:20Z,COMMENTED,thanks for the review! i have addressed all the comments in the latest commit: [a link] .,1,0.9905741810798645
421347491,8680,junrao,2020-06-01T19:51:43Z,COMMENTED,: thanks for the pr. made a pass of non-testing fiels. a few comments below.,1,0.9827216267585754
423261506,8680,kowshik,2020-06-03T10:13:44Z,COMMENTED,"thanks for the great review! i have addressed the comments in 08dd109d4071582f7395d7424d85f376ec56f4cc. below are the specific comments that i couldn't address, and need further discussion. i have provided my explanations: * [a link] * [a link] * [a link] * [a link] this pr is ready for review again!",1,0.9948416352272034
424821463,8680,junrao,2020-06-04T23:36:09Z,COMMENTED,": thanks for the updated pr. made a pass of all files. a few more comments below. also, for minor changes to the kip, we can just update the kip wiki and send an email to the vote thread with a summary of the changes to see if there is any objection.",1,0.9524348378181458
425960550,8680,kowshik,2020-06-08T10:41:12Z,COMMENTED,: thanks for the great review! i have addressed all the comments in [a link] i've made changes to the [a link] write up as suggested by you. [a link] is a link to the email that i sent to the voting thread explaining the changes to the kip.,1,0.9946601986885071
426675954,8680,junrao,2020-06-08T23:36:18Z,COMMENTED,: thanks for the updated pr. just a few more comments.,1,0.959556519985199
426771888,8680,kowshik,2020-06-09T04:06:50Z,COMMENTED,thanks for the review! i have addressed the comments in 0562f6d10dae3a19e9aac423c29db4633130bfb0.,1,0.9876592755317688
426792414,8680,abbccdda,2020-06-09T17:47:37Z,COMMENTED,"i'm pretty happy with what we are getting to right now, great job ! the only major question i have is the failure recovery path, which i would recommend we extend the pr summary to discuss various failure scenarios, such as incompatible feature update, zk version mismatch, or zk node deletion in extreme case and the recommended approach to recover. if they are already stated in the kip, feel free to just include a reference in the summary and confirm we have addressed all the error handling for the read path.",1,0.9947952628135681
427532005,8680,junrao,2020-06-09T20:46:00Z,APPROVED,: thanks for the latest update. lgtm. just wait for the tests to pass.,1,0.9412314891815186
427700099,8680,kowshik,2020-06-10T06:32:40Z,COMMENTED,thanks for the review! have addressed your comments in 74ff66f8988c5db5753f4d4afb2d401c9a6db6b2.,1,0.983472466468811
428300869,8680,abbccdda,2020-06-10T17:59:00Z,APPROVED,"discussed with offline and we decided to defer further discussion on the failure recovery after more implementation gets done: [a link] and lgtm for the latest patch, thanks for the great work, the code is well written and documented!",1,0.9932684302330017
1638375179,14406,junrao,2023-09-22T19:23:13Z,COMMENTED,: thanks for the pr. made a pass of non-testing files. left a few comments.,1,0.9809837937355042
1640649396,14406,junrao,2023-10-03T00:06:58Z,COMMENTED,: thanks for the updated pr. made another pass and left a few more comments.,1,0.9589481353759766
1658470449,14406,junrao,2023-10-06T18:53:55Z,COMMENTED,: thanks for the updated pr. made a pass of all files. a few more comments below.,1,0.9813439846038818
1662865665,14406,junrao,2023-10-09T20:57:04Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
1674795985,14406,junrao,2023-10-16T20:43:30Z,COMMENTED,: thanks for the updated pr. added a few more comments.,1,0.9405528903007507
1681098711,14406,junrao,2023-10-20T18:59:36Z,COMMENTED,": thanks for the updated pr. just a few more comments. also, could you rebase?",1,0.9775955080986023
1690949621,14406,junrao,2023-10-20T22:34:28Z,COMMENTED,: thanks for the updated pr. added a few more comments.,1,0.9405528903007507
1690979855,14406,junrao,2023-10-20T23:13:58Z,COMMENTED,: thanks for the updated pr. just a couple of minor comments.,1,0.9718575477600098
1691280899,14406,junrao,2023-10-21T15:52:00Z,COMMENTED,: thanks for the latest update. the pr lgtm now. are the 30 test failures related?,1,0.9600223302841187
1695781437,14406,junrao,2023-10-24T19:59:45Z,APPROVED,: thanks for explaining the test failures. the pr lgtm.,1,0.9305765628814697
814048517,11390,junrao,2021-12-04T01:46:00Z,COMMENTED,: thanks for the pr. made a pass of all non-testing files. a few comments below.,1,0.98195880651474
830783968,11390,junrao,2021-12-20T06:44:45Z,COMMENTED,: thanks for the updated pr. a few more comments below.,1,0.9159396886825562
844952599,11390,junrao,2022-01-06T01:00:54Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
857454422,11390,junrao,2022-01-21T04:46:42Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
879320924,11390,junrao,2022-02-11T01:26:08Z,COMMENTED,: thanks for the updated pr. made a pass of all non-testing files. a few more comments below.,1,0.9774676561355591
893494764,11390,kowshik,2022-02-25T11:05:00Z,COMMENTED,thanks for the updated pr! few comments below.,1,0.9729698300361633
1185412270,11390,showuon,2022-11-18T08:21:32Z,COMMENTED,thanks for the pr. reviewed to `brokerserver.scala` and left some comments. will keep reviewing.,1,0.9641251564025879
1185670454,11390,showuon,2022-11-18T09:28:49Z,COMMENTED,"reviewed to `remotelogmanagertest.scala`, left some comments. thanks.",1,0.97407066822052
1185811392,11390,showuon,2022-11-18T10:11:12Z,COMMENTED,", made a pass to all the changes, left some more comments. thanks.",1,0.9435514211654663
1207855441,11390,showuon,2022-12-07T07:25:31Z,APPROVED,lgtm! left some minor comments. thanks.,1,0.9947683811187744
1210993072,11390,junrao,2022-12-09T20:07:51Z,COMMENTED,": thanks for the updated pr. made a pass of all files. a few more comments below. also, it would be useful to add a test to validate the replica state after processing the offset_moved_to_tiered_storage error, especially for the transactional state. but that could be done in a separate pr.",1,0.8597735166549683
1219733476,11390,junrao,2022-12-15T19:18:23Z,COMMENTED,: thanks for the updated pr. just a few more minor comments.,1,0.9676989912986755
1221400391,11390,junrao,2022-12-16T20:07:22Z,COMMENTED,": thanks for the updated pr. just one more comment. also, there are quite a few test failures. are they related to this pr?",1,0.9053648114204407
1221831299,11390,junrao,2022-12-17T17:30:52Z,APPROVED,: thanks for the latest pr. lgtm,1,0.941677987575531
211492478,6363,kkonstantine,2019-03-06T21:56:25Z,COMMENTED,marked a set of files that belong to different prs and will be removed once those prs are merged. the prs are: [a link] [a link],0,0.993915855884552
218531252,6363,rhauch,2019-03-26T01:54:43Z,COMMENTED,"nice job, . took my first pass, and overall it looks good. with your review guidance above, i couldn't find any major issues, but i have quite a few comments/questions. found and logged some nits when i happened to notice them, but i wasn't looking for them. :-d btw, #6342 is now merged.",1,0.9947941899299622
222423384,6363,rayokota,2019-04-03T21:14:59Z,COMMENTED,looks great ! i am very excited for this feature! just a few comments and nits. thanks!,1,0.9954419136047363
222511189,6363,kkonstantine,2019-04-16T00:33:52Z,COMMENTED,thanks for your comments. i think i've replied to all your comments. i didn't get to all your comments yet. next i'll update the config and continue with the rest of the comments.,1,0.9430145025253296
225053534,6363,mumrah,2019-04-16T17:44:57Z,COMMENTED,looks great ! my only real concern is the complexity and length of the methods in incrementalcooperativeassignor. i kind of wonder if a pattern other than procedural is warranted? i think we should at least consider changing the private methods to package-private and adding some unit tests.,1,0.9931635856628418
229704718,6363,kkonstantine,2019-04-25T22:40:25Z,COMMENTED,"i've addressed almost all your comments with changes or replies. would you mind returning to these discussions to see if we can resolve them? there are a couple remaining items regarding javadocs and error handling during assignment, if i'm not mistaken, that i will definitely address before merging. thanks!",1,0.9909645318984985
231253602,6363,kkonstantine,2019-04-30T01:05:23Z,COMMENTED,thanks a lot for what i assume is your first round of comments! i fixed/replied to the majority of the comments. will return to the ones that need more work very soon in a second pass.,1,0.9917719960212708
232844912,6363,rhauch,2019-05-02T06:32:32Z,COMMENTED,"made another pass, and definitely making good progress. however, it seems like a number of comments still need to be addressed. i also think the lack of unit tests is a significant blocker, and something that i suspect will warrant some refactoring of the proposed changes in key areas to make those few super-long methods much more easily unit tested. it may also be useful to pull more switch-based logic into the protocol implementations, again for testability but also for better encapsulation.",0,0.9771595597267151
237534439,6363,rhauch,2019-05-15T00:28:43Z,COMMENTED,"partway through my latest review; will continue reviewing after dinner. note there are still a number of comments/questions that have not been addressed, either by comment or by changes.",0,0.9315475225448608
237583371,6363,rhauch,2019-05-15T03:30:22Z,COMMENTED,"finished my previous review. i really like the additional tests - have you looked at coverage of the classes in the `distributed` package before and after this pr? very interested to see. a few of the comments (mine and ewen's) may have been addressed with the most recent commit. would be great to at least respond to the outstanding comments/questions, even if the answer is ""will be done in a future pr"", etc.",1,0.9891568422317505
238708198,6363,rhauch,2019-05-17T01:48:16Z,APPROVED,"fantastic work, . i wish this weren't such a big pr, but i've been steadily tracking the progress of the latest commits as you've been running multiple tests. as you say, there are some minor things that could be cleaned up and improved, but given the size of the pr it'd be good to handle those separately in the coming days, since they shouldn't affect behavior or functionality but will be more about maintainability. i'm approving pending a green build and successful connect tests. most of the recent pr builds have been great, but i know you changed just a few test-related things (e.g., jenkinsfile to run the connect tests many times) that you've now reverted, and they theoretically shouldn't affect the build.",1,0.9738130569458008
159206034,5582,rajinisivaram,2018-09-26T22:41:58Z,COMMENTED,thanks for the pr. i had a quick look and left some comments. will do a more thorough review tomorrow (it was a much larger pr that i expected!),1,0.9863990545272827
160252389,5582,rajinisivaram,2018-10-01T12:40:21Z,COMMENTED,"thanks for the pr. i made one pass over it and left some comments, mostly minor. but there are some significant issues that need addressing too: 1. as mentioned in one of the comments, i think brokers need to be able to limit the number of re-authentications accepted from clients to avoid being over-loaded since this is not covered by quotas. 2. we need to ensure that clients cannot re-authenticate with a different principal. otherwise, if there is ever a vulnerability found in the re-authentication logic, the impact would be much worse. 3. we need to ensure that clients are only allowed to re-authenticate using the same sasl mechanism as the original authentication. i think we need more tests to cover these scenarios and also more around interoperability with the all the versions (pre-sasl_handshake, sasl_handshake v0 and v1, sasl_authenticate v0 and v1). may be easier to do with system tests, but we do need them all.",1,0.959960401058197
160905544,5582,rajinisivaram,2018-10-02T22:17:35Z,COMMENTED,"i have done one more round of review. one of my main concerns about committing this so close to the release is due to the way in which a lot of the re-authentication code is intertwined with existing authentication code. this makes it really hard to ensure that nothing is broken in the normal authentication path. while re-authentication itself can be documented as an experimental config in this release, we have to ensure that there are no paths where existing authentication has changed in any way. since we dont have tests that cover every possible scenario, i am not sure how we can verify that. i am also very concerned about the authenticationexception in the test. it could be test timing, but any test that throws an authentication exception whether re-authentication is turned on or whether connection termination is turned on without client re-authentication, is a cause for concern because of the way in which we handle authentication failures. we really can't commit this until we get to the bottom of that as you already agree. based on these, i am inclined not to commit this for 2.1.0 because it is too risky at this stage. let me know what you think. we can commit it to trunk later this week.",-1,0.8533963561058044
163262832,5582,rajinisivaram,2018-10-10T12:01:44Z,COMMENTED,"thanks for the updates, this is looking good. i have left some (mostly minor) comments. the pr also needs rebasing since there are conflicts.",1,0.9859527349472046
167133240,5582,rajinisivaram,2018-10-22T23:26:39Z,COMMENTED,"thanks for the updates, it is looking good. left some minor comments.",1,0.9905698299407959
167926716,5582,rajinisivaram,2018-10-24T14:05:40Z,COMMENTED,"thanks for the updates. responded to a few of the remaining comments (minor changes). i think i will merge once these are addressed and if there are any other changes, we can make them in follow-on prs. i think the test failures in the last build are unrelated. can you just confirm that?",1,0.9533765912055969
169016307,5582,rajinisivaram,2018-10-26T22:11:11Z,APPROVED,"thanks for the pr, lgtm! merging to trunk.",1,0.9847265481948853
416535665,8657,junrao,2020-05-26T23:32:10Z,COMMENTED,": thanks for the pr. sorry for the delay. made a pass of non-testing files. overall, i felt that this approach works. it adds its own complexity, but it's probably better than adding a separate thread pool. a few comments below.",-1,0.9828572273254395
429907905,8657,junrao,2020-06-14T23:41:44Z,COMMENTED,: thanks for the updated pr. made a pass of all files. a few more comments below.,1,0.9813439846038818
431077363,8657,junrao,2020-06-16T00:21:38Z,COMMENTED,": thanks for the updated pr. just one comment below. also, there are a few comments not addressed from the previous round. it will be helpful if you could preserve the commit history in future updates to the pr since that makes it easier to identify the delta changes.",1,0.9471428990364075
431933956,8657,junrao,2020-06-16T22:58:41Z,COMMENTED,: thanks for the updated pr. added a few more comments below.,1,0.9021112322807312
432791456,8657,junrao,2020-06-17T22:15:28Z,COMMENTED,: thanks for the updates pr. just a few more comments below.,1,0.9649470448493958
433422991,8657,junrao,2020-06-18T15:55:04Z,COMMENTED,: thanks for the updated pr. just one more comment below.,1,0.9420302510261536
433564609,8657,junrao,2020-06-18T19:00:14Z,APPROVED,: thanks for the latest pr. lgtm i triggered a system test on this pr. [a link] : do you want to take another look of the pr?,1,0.948259711265564
446135784,8657,ijuma,2020-07-10T05:53:41Z,COMMENTED,"thanks for the pr, this looks like a tough issue. is it me or have we blown our complexity budget? each time we find a locking issue affecting group coordinator, purgatory and log layer, we add a bit more logic. should we be rethinking this?",-1,0.9135586619377136
460218963,8657,junrao,2020-08-03T23:39:41Z,COMMENTED,: thanks for rebasing. made another pass and left a few minor comments below.,1,0.9299456477165222
460979692,8657,junrao,2020-08-04T16:32:53Z,COMMENTED,: thanks for the updated pr. it seems the changes in joinpurgatory could now lead to a new deadlock?,1,0.8868235945701599
476959130,8657,junrao,2020-08-27T18:13:41Z,COMMENTED,": thanks for the new pr. this looks very promising. a few comments below. also, could we get rid of the trylock logic in delayedoperation?",1,0.9943300485610962
477826045,8657,junrao,2020-08-28T15:58:10Z,COMMENTED,: thanks for the updated pr. just a few more minor comments.,1,0.9676989912986755
477939827,8657,junrao,2020-08-28T18:25:15Z,COMMENTED,: thanks for the updated pr. just one minor comment below. i also triggered a system test run.,1,0.9765992760658264
478136204,8657,junrao,2020-08-29T17:27:40Z,COMMENTED,": thanks for the updated pr. a few more comments below. 1. system tests passed with no failure. [a link] 2. we now have to check actionqueue for fetch requests, which we didn't need to do before. could you do some perf tests so that we know the performance of fetch requests doesn't change noticeably?",1,0.9436484575271606
478150656,8657,junrao,2020-08-29T19:56:21Z,COMMENTED,: thanks for the new update. a few more comments below.,1,0.8129056692123413
478163566,8657,junrao,2020-08-30T01:06:16Z,COMMENTED,: thanks for the changes. a few more comments below.,1,0.8414320349693298
478225823,8657,junrao,2020-08-30T18:53:22Z,COMMENTED,: thanks for the new updates. just a few minor comments.,1,0.9477370381355286
478742684,8657,junrao,2020-08-31T16:00:54Z,APPROVED,: thanks for the latest pr. lgtm just waiting for the jenkins tests to pass.,1,0.969610333442688
483157464,8657,junrao,2020-09-06T17:09:28Z,COMMENTED,: thanks for addressing the new issue. a few more comments below.,1,0.8965026140213013
483663498,8657,junrao,2020-09-07T17:15:28Z,COMMENTED,": thanks for the updated pr. a few more comments below. also, 1. do you plan to remove some of the unused methods in delayedoperations in partition? 2. currently, when calling checkandcomplete() for the produce/fetch/deleterecords purgatory, we still hold replicastatechangelock. this doesn't seem to cause any deadlock for now. in the future, we can potentially improve this by calling checkandcomplete() outside of the replicastatechangelock by passing leader epoch into those delayed operations and checking if leader epoch has changed in trycomplete().",1,0.5560532808303833
483745905,8657,junrao,2020-09-08T02:03:46Z,COMMENTED,: thanks for the updated pr. just a few more minor comments.,1,0.9676989912986755
483782135,8657,junrao,2020-09-08T04:41:20Z,COMMENTED,: thanks for the new update. a few more minor comments.,1,0.9393300414085388
484278647,8657,junrao,2020-09-08T16:10:05Z,COMMENTED,: thanks for the updated pr. a few more minor comments below.,1,0.9477237462997437
484595950,8657,junrao,2020-09-09T01:27:32Z,COMMENTED,": thanks for the latest changes. lgtm. latest system result has 1 failure. [a link] also, are the jenkins test failures related to this pr?",1,0.9300612211227417
15339919,2264,ijuma,2017-01-09T17:06:23Z,COMMENTED,"thanks for the pr. i have more comments that i will post in a bit, but in the meantime, i wanted to ask: are we handling the case where pre-kip-74 brokers return a recordtoolargeexception?",1,0.9728586673736572
15811008,2264,hachikuji,2017-01-09T23:13:56Z,COMMENTED,some comments in `networkclient`. logical flow makes sense overall.,0,0.9931701421737671
15751882,2264,ijuma,2017-01-09T23:14:58Z,COMMENTED,"a few more minor comments. still going through it, but sending these to reduce latency.",0,0.9568204879760742
15820695,2264,hachikuji,2017-01-10T00:41:28Z,COMMENTED,some comments in `fetcher`.,0,0.9915862083435059
15835703,2264,junrao,2017-01-10T01:45:38Z,COMMENTED,"thanks for the patch. left a couple of comments. also, would it be useful to log a warning when the client needs to issue an old version of the request since certain feature could be lost (e.g. timestamp)?",1,0.9025603532791138
15893054,2264,ijuma,2017-01-10T15:28:26Z,COMMENTED,"left a few more minor comments. about the builders, there are a couple of things that i am unsure about: 1. in some classes, we duplicate a bunch of fields between the builder and the request class. 2. we pass around these mutable builders across layers, which is not as nice as our previously immutable request classes. do we ever want to change anything besides version? one alternative would be something along the lines of: [code block] that would make the builders immutable and eliminate issue 2. for 1, we could introduce `params` classes where they made sense. because they're immutable, we don't necessarily need to do field by field copy. we'd have to check if this makes things better or worse though. i don't think we need to do the above in this pr, but raising it as an idea to collect feedback.",0,0.5590445399284363
15947930,2264,ijuma,2017-01-10T17:23:03Z,COMMENTED,a few more comments. the important one is regarding apiversions being required for brokers.,0,0.9462171792984009
16000293,2264,hachikuji,2017-01-10T22:35:05Z,COMMENTED,next round of comments.,0,0.9748916029930115
16216024,2264,ijuma,2017-01-11T19:30:51Z,APPROVED,"thanks for the changes, lgtm. we can address remaining issues in follow-ups. , please file a jira and link it from here when you can. for the record, we had a known transient system test failure (`zookeepersecurityupgradetest.test_zk_security_upgrade`), but it passed on rerun. i fixed some generic unchecked warnings before merging to trunk.",1,0.9407290816307068
1572581030,14182,jeffkbkim,2023-08-10T20:19:32Z,COMMENTED,thanks for the pr! took a brief look at optimizeduniformassignor. will continue reviewing,1,0.994860827922821
1577514119,14182,jeffkbkim,2023-08-15T00:43:54Z,COMMENTED,took a pass for `optimizeduniformassignmentbuilder.java`,0,0.9947463870048523
1603364219,14182,jeffkbkim,2023-08-30T22:02:13Z,COMMENTED,went through roughly half of the tests,0,0.9768626689910889
1607587541,14182,jeffkbkim,2023-09-01T19:48:53Z,COMMENTED,left some small nits,0,0.9115518927574158
1610420297,14182,dajac,2023-09-05T12:40:42Z,COMMENTED,-22 thanks for the pr. i just made a first pass on the non-test files to familiarize myself with the code. i left some initial comments while doing so.,1,0.9644361734390259
1617322879,14182,dajac,2023-09-08T12:46:09Z,COMMENTED,-22 thanks for the update. i left a few more comments.,1,0.9414370656013489
1626293257,14182,dajac,2023-09-14T09:08:22Z,COMMENTED,-22 thanks for addressing my comments. i have left a few more.,1,0.9516816139221191
1487994803,13870,dajac,2023-06-20T14:43:07Z,COMMENTED,thanks for the pr. i have started to read it. i left a few preliminary comments.,1,0.9796623587608337
1493119970,13870,dajac,2023-06-22T15:13:34Z,COMMENTED,i am still processing the pr. i left a few more comments in the meantime.,0,0.8214152455329895
1507105790,13870,dajac,2023-06-30T13:15:56Z,COMMENTED,i am still processing the pr. i left a few more comments.,0,0.8493255376815796
1516769055,13870,dajac,2023-07-07T14:19:43Z,COMMENTED,"thanks for the hard work on this one! i have compared the new implementation with the old implementation line by line. it looks pretty good. i left some comments, mainly nits. i will do a second pass on it on monday and start looking into the tests as well.",1,0.9945599436759949
1519036093,13870,dajac,2023-07-07T14:20:03Z,COMMENTED,"thanks for the hard work on this one! i have compared the new implementation with the old implementation line by line. it looks pretty good. i left some comments, mainly nits. i will do a second pass on it on monday and start looking into the tests as well.",1,0.9945599436759949
1522029268,13870,dajac,2023-07-10T13:47:53Z,COMMENTED,i just made a pass on the main files and left more comments/suggestions.,0,0.9821406602859497
1522158393,13870,dajac,2023-07-10T15:08:36Z,COMMENTED,i am half way through the tests. continuing...,-1,0.5473925471305847
1524319166,13870,dajac,2023-07-11T14:38:39Z,COMMENTED,i left a few more comments related to the remaining tests.,0,0.950244665145874
1529818776,13870,dajac,2023-07-14T08:45:16Z,COMMENTED,thanks for the update. i just made a full pass on it and i left some small comments (mainly nits). we should be good to merge it afterwards.,1,0.9584442377090454
1536408739,13870,dajac,2023-07-19T07:13:27Z,APPROVED,lgtm. thanks !,1,0.9944222569465637
578793845,9944,rajinisivaram,2021-01-30T01:41:04Z,COMMENTED,"thanks for the pr. i left a few comments on the implementation, but will need to go through it again to follow the whole logic. haven't reviewed tests yet.",1,0.9762066006660461
580765332,9944,junrao,2021-02-08T19:41:52Z,COMMENTED,": thanks for the pr. made a pass of all non-testing files. overall, the new logic seems to make sense. it does add additional complexity on the already complicated existing logic. so, it would be useful to spend a bit more time to make the additional logic easier to understand (e.g., naming more properly, adding comments where needed). a few detailed comments below. also, it seems that for more partitions, the performance with this pr is noticeably worse than trunk? [code block]",1,0.9005383253097534
609727507,9944,chia7712,2021-03-11T14:04:57Z,COMMENTED,"thanks for this patch. it seems there are a bunch of code which do rely on `topicpartition` so it make a big patch to use topic id. will give another look tomorrow. just curious. what is the benefit if we fetch data by topic id rather than topic name? for example, higher performance or data consistency?",1,0.9469690322875977
611588798,9944,chia7712,2021-03-13T11:31:33Z,COMMENTED,have you run both performance test and compatibility test?,0,0.9918393492698669
641598151,9944,junrao,2021-04-28T17:04:38Z,COMMENTED,": thanks for the updated pr. as i started reviewing it, i still feel that it's quite complicated and a bit hard to follow. a lot of the complexity is the additional logic for propagating unresolved partitions from fetchrequest to fetchsession and the maintenance of unresolved partitions within fetchsession. such logic is used for handling the rare and transient case when the topicid hasn't been propagated to the broker. i am wondering if we could take a different approach to handling this rare case. i am thinking of the following. when the broker receives a fetchrequest, it checks if there is any unresolved partition (due to topicid) in the request. if so, it simply sends a new top level error and rejects the whole request without going into the fetchsession. on receiving such a response, the client will just refresh the metadata and retry. the benefit of this approach is that it's much less intrusive to fetchsession and the handling of fetchresponse. it may delay the processing for certain resolved partitions unnecessarily. but this happens rarely (e.g. when a new topic is created). so, overall, this could be a good tradeoff to make. what do you think?",1,0.8570147752761841
650729950,9944,junrao,2021-05-06T01:32:07Z,COMMENTED,: thanks for the updated pr. made another pass of all non-testing files. the new approach seems simpler and easier to understand. a few more comments below.,1,0.972847044467926
681325209,9944,junrao,2021-06-14T22:25:42Z,COMMENTED,: thanks for the updated pr. made another pass of all non-testing files. a few more comments.,1,0.9813547730445862
683470393,9944,junrao,2021-06-15T16:19:32Z,COMMENTED,: thanks for the responses. added a few more replies.,1,0.8901505470275879
688677975,9944,junrao,2021-06-21T19:14:12Z,COMMENTED,: thanks for the updated pr. made a pass of all files. a few more comments below.,1,0.9813439846038818
694257707,9944,junrao,2021-06-28T19:09:57Z,COMMENTED,: thanks for the updated pr. just a few minor comments below.,1,0.9585006833076477
694503995,9944,junrao,2021-06-29T01:19:00Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
695254090,9944,junrao,2021-06-29T16:27:18Z,APPROVED,: thanks for the pr. lgtm could you do a run of all system tests on this pr and see if there is any regression?,1,0.7509190440177917
696491792,9944,junrao,2021-06-30T18:29:30Z,COMMENTED,: a couple of more minor comments.,0,0.930272102355957
701511778,9944,junrao,2021-07-07T23:00:15Z,APPROVED,: thanks for the updated pr. lgtm,1,0.8783431053161621
708961481,9944,chia7712,2021-07-17T18:47:13Z,COMMENTED,"sorry for making noise. i'm testing trunk branch with our application. the logs start to print error/warn after this pr. also, the `subscription` gets slower. i left two questions below. the response from author can help me to dig in it :)",-1,0.9920662641525269
1355546171,13443,jeffkbkim,2023-03-24T23:29:33Z,COMMENTED,thanks for the pr! left some comments.,1,0.9877927899360657
1355669619,13443,philipnee,2023-03-28T17:21:46Z,COMMENTED,"hey very nice pr, i haven't finished the review, but i'm submitting some existing comments.",1,0.9938801527023315
1376520329,13443,jeffkbkim,2023-04-07T22:05:13Z,COMMENTED,"i think it's confusing to use both ""member"" and ""consumer"" throughout the code. let's conform to ""member"" and remove all usages of ""consumer""",-1,0.7835272550582886
1397965914,13443,dajac,2023-04-24T13:26:34Z,COMMENTED,-22 thanks for the update. i made a pass on the main logic and left a few comments/questions.,1,0.8257697820663452
1401297731,13443,dajac,2023-04-26T08:59:40Z,COMMENTED,-22 thanks for the update. i just made a pass on the entire pr and left some comments. i think that we are almost there.,1,0.9417506456375122
1418086516,13443,dajac,2023-05-09T09:27:05Z,COMMENTED,-22 thanks for the update. i left a few more minor comments. we are almost there.,1,0.9782044887542725
1419905618,13443,dajac,2023-05-10T07:02:59Z,APPROVED,"lgtm, thanks for patch -22!",1,0.9655901789665222
241542550,6592,mjsax,2019-05-24T04:01:22Z,COMMENTED,some nits. i also replied to the kip discuss thread.,0,0.9545232653617859
253084612,6592,mjsax,2019-06-22T06:37:44Z,COMMENTED,some initial comments.,0,0.9764934778213501
266278283,6592,mjsax,2019-07-24T21:58:38Z,COMMENTED,some more comments. i think we also need tests for the new configuration parameters to make sure they work correctly.,0,0.9831069707870483
269163947,6592,mjsax,2019-07-31T17:36:10Z,COMMENTED,"seems you did not push an update yet. stopped reviewing when i realized it. the pr also need to be rebased to resolve conflict. can review again, after it's updated.",0,0.9840787649154663
270477636,6592,mjsax,2019-08-04T01:46:40Z,COMMENTED,"stopped reviewing at this point -- there is too much noise in this pr. avoid to change unrelated files -- it makes reviewing tedious. please revert all changes to unrelated files (feel free to do a separate cleanup pr if you wish, but don't piggy-back random cleanups)",-1,0.6254399418830872
294555655,6592,mjsax,2019-09-27T21:24:58Z,COMMENTED,"sorry for the delay in review. couple of comments about generics. i am not completely sure if we should introduce a list type generic (if we do, we would need to update the kip). even if we don't introduce list generic type `l`, we can tie up the types on many places.",-1,0.9907688498497009
308656137,6592,vvcephei,2019-10-29T17:59:26Z,CHANGES_REQUESTED,"hey , sorry for the delay in reviewing. i think this is really close, i just had a few comments. -john",-1,0.9936281442642212
311418205,6592,mjsax,2019-11-05T01:31:25Z,COMMENTED,"i think we should add tests, that instantiate `listserializer` and `listdeserializer` directly -- while playing with the code, this actually reveals an issue with the currently strict types. (more below) we also need tests for the config initialization, eg, create `new listserializer()`, `new listdeserializer()` and new `listserde()` without constructor arguments, and than call `configure()` to setup the object, and test is we can use them. last, i would appreciate on test using `topologytestdriver` that uses the list-serde to make sure the setup works correctly if those are use as default serdes in the config. **about type safety:** i played with the code a little bit, and it turns out that my latest request to enforce stricter types is actually a drawback in usability. in `listdeserializer` we enforce `class ` atm, that implies that the follow code won't compile: [code block] because `arraylist.class` is a raw-type and does not guarantee the required inner type `integer`. the only way to make it compile is to define a helper class: [code block] and do [code block] while this ensures strict typing, i am wondering if the loss in flexibility and required boilerplate code is too much of a burden for users and if we should sacrifice some type safety for easier usage? -- my comment in the code with regard to generic are subject for discussion -- no need to address them directly as long as we don't agree how to proceed. for the other comments, please address them, especially the missing test code. btw: this pr should also extend the docs ([a link] and [a link] sorry for the complicated review, but generics are especially tricky and we should try hard to get it right.",0,0.9632009863853455
344903389,6592,mjsax,2020-01-18T00:58:20Z,COMMENTED,"sorry for the long delay in reviewing this... i think we got the generic right now (couple of minor comments to improve the code a little bit). the `null` element question is a tricky one -- i left a detailed comment. for the tests, you need to add couple of `(""unchecked"")` annotations -- note that the build fails if there are warning -- best way to check locally is to run `./gradlew clean systemtestlibs``",-1,0.9901564121246338
349781966,6592,mjsax,2020-01-29T00:34:27Z,COMMENTED,"i think we got the generic right now... :) i added a couple of comments about better corner case handling and exception messages -- btw: i think we should add tests for all those (ie, configure a (de)serializer/serde via constructor/configs (maybe even mix-of-both?) and test that we get the exception we expect to get if something is wrong `assertthrows` is our friend -- we should also verify the error messages imho). about the `null`-item handling. i talked to and he is fine with the current proposal. hence, you can go ahead and implement it. we can update the kip and send a follow up email to the dev list later.",1,0.9929094314575195
636112308,6592,wcarlson5,2021-04-14T21:55:27Z,APPROVED,thanks for the pr! overall i don't really have anything that i complain about too much. the amount of unchecked casts worry me a bit but i don't see a good way around yet them yet. so they should work for now. can you give this a merge if you agree?,1,0.9771320223808289
636149693,6592,ableegoldman,2021-04-14T23:58:34Z,COMMENTED,"had a few high-level comments, mostly just some things that i found confusing after jumping in to this pr with no context. things look good for the most part but i think we can make this easier to understand, both for users as well as for future devs who might be reading this code",0,0.8844982385635376
656188543,6592,ableegoldman,2021-05-11T01:29:47Z,COMMENTED,"sorry for the long delay, but i think we're pretty much there. left a few suggestions for cleaning up the code, and some minor formatting issues here and there. it should be ready to merge after that :grinning_face_with_smiling_eyes:",-1,0.9901402592658997
657312968,6592,ableegoldman,2021-05-11T23:39:07Z,COMMENTED,can you also address this (from the comment you linked from matthias):,0,0.9928459525108337
658282725,6592,ableegoldman,2021-05-12T19:10:20Z,COMMENTED,"looking good, i think once you just move the upgrade guide docs to the 3.0 section then we can merge.",1,0.8310065269470215
658308808,6592,ableegoldman,2021-05-12T19:40:56Z,APPROVED,"lgtm. just give me a ping when the build completes with tests passing (your tests, at least -- there will almost certainly be some unrelated failures, as a handful of tests are super flaky at the moment)",0,0.85415118932724
149973239,5567,guozhangwang,2018-08-28T06:30:12Z,COMMENTED,"made a quick pass over the non-testing code, overall lgtm. left some after-thoughts on public apis (i understand it needs kip modifications, just throwing some other ideas here, but no hard feelings if you do not like them :) will make another pass on testing code.",1,0.9751653075218201
150131682,5567,bbejeck,2018-08-28T14:39:29Z,COMMENTED,thanks for the patch i did an initial pass overall looks good. i think we need to add an integration test or two to make sure we exercise all branches when `ktableimpl.suppress` is called.,1,0.9768459796905518
150663632,5567,vvcephei,2018-08-29T20:26:20Z,COMMENTED,", here's the latest batch of changes. i'll need to update the kip again with the api changes, but i'd like to get your reviews first.",0,0.9736801385879517
151192419,5567,vvcephei,2018-08-30T21:38:11Z,COMMENTED,", this is ready for another round of reviews.",0,0.9548722505569458
151555862,5567,bbejeck,2018-08-31T22:21:14Z,COMMENTED,i made another pass and overall looks good. i do think we need to have some integration testing for suppress as well,1,0.8355281352996826
152583391,5567,bbejeck,2018-09-05T17:32:56Z,COMMENTED,"thanks, made another pass and overall lgtm. given the importance of this new feature, i think we need to add tests for the different buffering strategies to the integration test. also, we'll probably want to add a system test so we can run with more realistic numbers for the buffering strategies but that could be in a follow-on pr i'm not sure it should hold up this pr.",1,0.7669109106063843
152991553,5567,bbejeck,2018-09-06T15:36:21Z,APPROVED,"one final nit, otherwise lgtm",0,0.9604079127311707
153154169,5567,mjsax,2018-09-07T00:51:42Z,COMMENTED,did one pass over it -- i guess i need to make another one later on to fully understand the pr. nice work!,1,0.9944778680801392
156581180,5567,bbejeck,2018-09-18T22:04:48Z,APPROVED,"just one minor nit, otherwise lgtm",0,0.9625675678253174
156602906,5567,mjsax,2018-09-19T00:19:44Z,COMMENTED,some follow up comments. did not look into the tests yet.,0,0.9704222083091736
156655383,5567,mjsax,2018-09-19T05:04:17Z,COMMENTED,some more brain dump... feel free to reject anything you think is stupid.,-1,0.9840812683105469
157542729,5567,mjsax,2018-09-21T05:15:32Z,COMMENTED,"some more follow ups on tests (did not review closely before). would be good to get a +1 for the actual api from , too. and maybe can have a second look, as some stuff changed. (want to make sure nothing slips because i want to avoid follow up kip if we might need a fix.)",0,0.9349904656410217
157952976,5567,mjsax,2018-09-23T21:44:38Z,APPROVED,lgtm.,0,0.9689368009567261
158269593,5567,bbejeck,2018-09-24T19:57:10Z,APPROVED,"took another pass, lgtm",0,0.9322537183761597
763177609,11331,dajac,2021-09-24T15:19:32Z,COMMENTED,i have left few high level comments/questions. i think that we are missing few things on the fetcher side as well (e.g. topic id errors must be handled differently).,0,0.9816608428955078
796345563,11331,dajac,2021-11-03T14:27:13Z,COMMENTED,"thanks for the pr. i made a pass over the non-test files and left some comments. overall, it looks pretty good to me. i will go over the test files soon.",1,0.993089497089386
797858452,11331,dajac,2021-11-04T16:19:04Z,COMMENTED,"i made a first pass over the test files and i left a few comments. i need to do through them a second time. at the moment, the test coverage of the new logic is not clear to me. i'll take a deeper look at this.",0,0.929312527179718
801096421,11331,dajac,2021-11-09T16:28:28Z,COMMENTED,thanks for the update. i left some comments.,1,0.7918283939361572
802361838,11331,dajac,2021-11-10T10:37:40Z,COMMENTED,thanks for the updates. left a few more comments.,1,0.8991358280181885
803934899,11331,dajac,2021-11-11T15:35:23Z,APPROVED,lgtm! thanks for your effort on this one. we can merge the pr once the system tests status is clarified.,1,0.9930105805397034
106572457,4756,guozhangwang,2018-03-23T18:11:21Z,COMMENTED,"thanks for the pr. could you rebase? also a meta question about the avro-dependent test `streamtotablejoinscalaintegrationtestimplicitserdeswithavro.scala`, do people think it's worth adding avro dependency for demonstrating this test?",1,0.9714792966842651
106778875,4756,mjsax,2018-03-26T18:31:55Z,COMMENTED,i am not a scala person -- so take my review with a grain of salt... did not look at the tests yet.,0,0.5529046654701233
107040111,4756,vvcephei,2018-03-26T20:13:07Z,COMMENTED,"hey , thanks so much for this pr. i've been super frustrated in the past with how awkward it is to use kstreams in scala vs. how awkward it should be. my favorite features here are: * serdes for scala types * dsl methods taking implicits for things that are easy to infer (like the serde implementation). my personal preference would be to avoid renaming imports and just using fully-qualified package names inline. it makes our code longer, but easier to understand. for a ""base-level"" library, i'd prefer to have less pretty but more comprehensible code in general. i'm also wondering if we really want to use the same class names as the java dsl, this seems like it would be confusing to use in an ide with code-completion. what do you think about using scalakstream, etc. instead? this would also get around the desire to rename imports. thanks again, -john",1,0.8806514143943787
109134025,4756,guozhangwang,2018-04-03T22:15:21Z,COMMENTED,"please update the `streams/upgrade-guide.html`, under the [code block] section, to talk about this addition to the public apis.",0,0.9914585947990417
110083009,4756,dguy,2018-04-06T14:23:25Z,COMMENTED,"thanks for the pr - do we need the integration tests? i.e., the scala api is just translating to the underlying java api, so we could write tests that ensure that the correct topology is built?",1,0.8582956194877625
112309399,4756,mjsax,2018-04-16T08:49:09Z,COMMENTED,couple of nits.,0,0.8241851925849915
112327329,4756,mjsax,2018-04-16T08:53:19Z,COMMENTED,couple of nits.,0,0.8241851925849915
112327549,4756,mjsax,2018-04-16T08:53:58Z,COMMENTED,couple of nits.,0,0.8241851925849915
112327937,4756,mjsax,2018-04-16T08:55:08Z,COMMENTED,couple of nits.,0,0.8241851925849915
112612156,4756,guozhangwang,2018-04-16T23:41:40Z,COMMENTED,left some more comments.,0,0.8806517720222473
113806795,4756,guozhangwang,2018-04-19T23:08:58Z,APPROVED,"thanks for the great effort . i do not have any further comments, will leave to if he has anything else.",1,0.994597315788269
12098097,1446,guozhangwang,2016-12-08T20:31:44Z,COMMENTED,"there are some naming conventions that we are trying to push for sensor and metrics names throughout the code repo. unfortunately we cannot programmably enforce that, so contributors need to manually follow those themselves. i suggest taking a look at the metrics classes in `sender.java` and `selector.java`, and `streamthread.java` to understand they naming conventions and how they can be leveraged by customizable `metricsreporter`.",0,0.9910864233970642
12335428,1446,guozhangwang,2016-12-10T00:47:50Z,COMMENTED,a couple more comments.,0,0.9686369299888611
12538046,1446,guozhangwang,2016-12-12T20:11:42Z,COMMENTED,a couple of more comments.,0,0.9603776931762695
13233095,1446,mjsax,2016-12-15T22:14:17Z,COMMENTED,some comments.,0,0.9574759602546692
13240489,1446,guozhangwang,2016-12-15T23:49:30Z,COMMENTED,"a few more comments. one meta-question is how should we expose the ""generic sensor registration"" apis. would love to hear your opinions .",1,0.9689847826957703
13752140,1446,ijuma,2016-12-20T13:01:08Z,COMMENTED,"sorry for the delay, i took another pass in the clients code.",-1,0.9938139915466309
13822745,1446,guozhangwang,2016-12-20T18:46:26Z,COMMENTED,a couple of more comments on the public interfaces. also could you rebase?,0,0.9805489182472229
124646152,5101,lindong28,2018-05-31T07:29:38Z,COMMENTED,"thanks for the patch. in addition to make sure that stale controller can not update zookeeper, would it be useful to have a way for controller to skip the non-controller-election related events if after it notices that it can not update zookeeper due to zkversion mismatch? this logic can probably be put in controllereventthread.",1,0.8988718390464783
127381621,5101,lindong28,2018-06-10T02:10:33Z,COMMENTED,thanks for the update! left some minor comments.,1,0.9648473858833313
139304777,5101,lindong28,2018-07-23T00:11:48Z,COMMENTED,thanks for the update. the patch looks much better. left some comments.,1,0.9747400283813477
148200384,5101,lindong28,2018-08-21T19:59:42Z,COMMENTED,"thanks for the update . left some more comments. also, since this is a medium sized patch which changes the behavior of controller, can we have some tests for this patch?",1,0.8821474313735962
148641141,5101,lindong28,2018-08-22T19:57:32Z,COMMENTED,thanks for the update . looks pretty good now. left some minor comments. it will be good to add tests before committing this patch.,1,0.9907516241073608
148713574,5101,junrao,2018-08-23T01:14:50Z,COMMENTED,": thanks for the patch. there are 2 cases where more than one broker may act as a controller at the same time. the first case is when a controller's zk session has expired. this is no longer an issue after kafka-5642 since the expired controller won't be able to write to zk in the old zk session. the second case is when the controller path in zk is explicitly removed (e.g. by admin to force a controller change). this patch will provide better fencing in the second case, which is useful. made a pass of non-testing files. looks good overall. left a few comments.",1,0.991926908493042
149785704,5101,lindong28,2018-08-27T20:03:58Z,COMMENTED,thanks for the update . left some comments.,1,0.8041555285453796
149866648,5101,junrao,2018-08-27T23:30:44Z,COMMENTED,: thanks for the updated patch. made another pass and added some comments below.,1,0.6865295171737671
151510599,5101,lindong28,2018-09-01T23:30:38Z,COMMENTED,thanks for the update. left some comments.,1,0.7083953619003296
152299237,5101,junrao,2018-09-05T01:33:29Z,COMMENTED,: thanks for the updated patch. added a few more comments below.,1,0.7090495228767395
152712043,5101,junrao,2018-09-05T22:46:42Z,COMMENTED,: thanks for the new update. still a few more comments below.,1,0.9231550097465515
153072479,5101,junrao,2018-09-06T19:01:11Z,COMMENTED,: thanks for the new updates. just a couple of more comments below.,1,0.9230082035064697
153118558,5101,junrao,2018-09-06T20:59:20Z,APPROVED,: thanks for the latest patch. lgtm. just a minor comment below. i will let dong make another pass of the latest patch before merging.,1,0.97186678647995
153204555,5101,lindong28,2018-09-07T05:54:15Z,COMMENTED,thanks for the update . looks pretty good now. i left some comments regarding corner cases.,1,0.9903417825698853
238042929,6295,viktorsomogyi,2019-05-15T21:51:43Z,COMMENTED,"i've reviewed it, mostly found nits and 1-2 smaller issue.",0,0.940313458442688
238092017,6295,viktorsomogyi,2019-05-15T21:57:21Z,COMMENTED,one more thing: i see that there are unit tests but i think it'd be nice to see an end-to-end test either among the systests or java based.,0,0.9036195874214172
238159871,6295,kamalcph,2019-05-16T03:17:58Z,COMMENTED,i've made a pass over the `mirror` module and have some minor comments.,0,0.9789472818374634
238317453,6295,arunmathew88,2019-05-16T10:51:29Z,COMMENTED,the topic config sync might have to deal with some tricky situations. like message.timestamp.type=logappendtime (this upon syncing downstream as is would overwrite message times at each replica cluster) min.insync.replicas>1 may cause warning/error if destination replication factor is 1 (though we are not allowing write on remote topics).,0,0.9792192578315735
238843422,6295,enothereska,2019-05-17T10:32:13Z,COMMENTED,"i had a go at running the dedicated mm cluster. most of my comments so far are around ease of use and improving on the initial experience: 1. i couldn't immediately run mm on 1-broker clusters since several of the topics (e.g., offset and status ones) require a minimum of 3 brokers. providing a simple mm2.config file for a simple 1-broker cluster would go a long way for quick tests. 2. got a couple of warnings like ""warn the configuration 'target.cluster.alias' was supplied but isn't a known config. (org.apache.kafka.clients.admin.adminclientconfig:287)"" .",0,0.9039266109466553
255267193,6295,vpernin,2019-07-01T13:03:20Z,COMMENTED,"that's indeed a good way to monitor the replication while the process is running ""nominally"". but if one the downstream clusters is down or suffers from whatever problems, this latency metric won't be up to date. i think a per cluster/topic/partition offset lag is needed, maybe in a second step ?",0,0.9731525182723999
270182404,6295,mimaison,2019-08-02T14:05:06Z,CHANGES_REQUESTED,thanks for the pr! i finally took time to give mirror maker 2 a spin and hit a couple of issues but these are trivial to fix. i'll keep testing with mm2 for the next few days trying out several scenarios and will let you know how it goes.,1,0.9909929633140564
273747601,6295,mimaison,2019-08-12T14:55:47Z,CHANGES_REQUESTED,"with the latest changes, i can replicate clusters. there still are small issues when syncing the topic configurations though.",0,0.9875484704971313
289112157,6295,mimaison,2019-09-17T08:55:10Z,APPROVED,i believe you've now fixed all the issues i found. thanks for all the updates.,1,0.9083666801452637
291153884,6295,kamalcph,2019-09-20T13:13:53Z,APPROVED,lgtm.,0,0.9689368009567261
294056523,6295,junrao,2019-09-26T23:58:34Z,COMMENTED,: thanks for the pr. made a pass of non-testing files. a few comments below.,1,0.9803227186203003
297184931,6295,junrao,2019-10-04T00:52:21Z,APPROVED,": thanks for the explanation. it all makes sense to me now. so, lgtm. a few of the limitations with mm2 that i saw (1) if mm2 starts with an existing compact topic with lots of holes, there could be more overhead for writing the offsetsync data. in the worse case, every record requires a checkpoint of offsetsync data. (2) if a consumer starts consuming from the beginning, the offsets won't be translated to the target cluster until the consumer catches up. (3) prefix acls are not propagated. these may not be common issues. however, it would be useful document that in the docs. also, we will need a few new message formatters to read the new internal topics. do you plan to add that before code freeze? and : once the minor issues are addressed, perhaps you could take another look and merge the pr?",1,0.866126298904419
297791929,6295,rhauch,2019-10-05T13:42:05Z,COMMENTED,"thanks for updating [a link] so that the framework only calls the newer `sourcetask.commitrecord(sourcerecord, recordmetadata)`. i have one request to improve the javadoc for the new method to make it easier for developers writing their own sourcetask to know whether to override those methods, without having to dive into the connect runtime to figure that out.",0,0.6361225843429565
533950499,9485,rajinisivaram,2020-11-19T00:06:23Z,COMMENTED,"thanks for the pr. there were build issues in the pr build, also left some comments.",1,0.9068484902381897
542016927,9485,rajinisivaram,2020-12-01T21:18:23Z,COMMENTED,"thanks for the updates, left some more comments.",1,0.6297225952148438
548546205,9485,rajinisivaram,2020-12-09T20:55:42Z,COMMENTED,"thanks for the updates, left some more comments. there seem to be a lot of changes that are not required (in tests, benchmarks etc.). can we revert all changes that are not strictly required for this pr? if a change doesn't relate to `authorizebyresourcetype`, we need to be able to explain why the change is required at all.",0,0.5037200450897217
551895349,9485,rajinisivaram,2020-12-14T23:03:15Z,COMMENTED,"thanks for the updates, left some more comments. the main one is about super.users. we have to support super users in all variations of the code since this is a very commonly used config , even though the config name itself is specific to the implementations.",1,0.962794840335846
553596574,9485,rajinisivaram,2020-12-16T12:11:17Z,COMMENTED,"thanks for the updates, it is looking good. just a few more comments left.",1,0.9913004040718079
554798588,9485,rajinisivaram,2020-12-17T21:34:34Z,COMMENTED,"thanks for the updates, looks good. i did another pass through the whole pr and left some more minor comments.",1,0.9865531325340271
555356520,9485,rajinisivaram,2020-12-18T10:08:01Z,APPROVED,"thanks for the updates, lgtm. i will push a commit with some minor changes and merge.",1,0.9305787086486816
1709172805,14690,kirktrue,2023-11-01T23:27:02Z,CHANGES_REQUESTED,"thanks for the pr, ! this is a hurculean effort! i leave a few questions and requests for changes.",1,0.9809236526489258
1712658549,14690,dajac,2023-11-03T15:23:53Z,COMMENTED,thanks for the pr. i have started to read it. i am not done but i already left some comments.,1,0.9729689955711365
1728469440,14690,kirktrue,2023-11-14T02:02:09Z,CHANGES_REQUESTED,"this is a really tricky one, :grinning_face_with_smiling_eyes: i didn't get as far as i would like. i keep circling around the main `reconcile()` method as my brain starts to melt within minutes. i really appreciate all your comments as it makes it much easier to follow, though!",1,0.9862250089645386
1731435291,14690,dajac,2023-11-15T10:50:03Z,COMMENTED,thanks for the pr and sorry for the delay. i just made a first pass on the non-test files and i left some comments for consideration.,-1,0.9860284924507141
1734349548,14690,dajac,2023-11-16T14:34:08Z,COMMENTED,thanks for the update. i reviewed everything and left some more comments. the tests looks pretty good but i will need to make another pass on them.,1,0.9831174612045288
1739483626,14690,dajac,2023-11-20T11:30:27Z,COMMENTED,"lgtm, thanks for the patch ! i left a few small comments and there are a few unresolved comments too. we can address those separately.",1,0.982227623462677
19195996,2466,mjsax,2017-01-30T22:37:04Z,CHANGES_REQUESTED,"thanks for the pr. looks quite promising. put a couple of comments. the comments about `kstreambuilder#stream()` also apply to `kstreambuilder#table()` (just did not want to put them twice). sorry for being picky with javadocs, but we just reworked them and need to keep them clean. (i am not picky about `topologybuilder` javadocs because those did not get reworked yet :))",1,0.9903246164321899
19423625,2466,mjsax,2017-01-31T21:43:28Z,CHANGES_REQUESTED,"thanks for the update. most comments are nitty javadoc stuff... ping for review. do you think we should add an integration test, too?",1,0.9749670624732971
19501828,2466,dguy,2017-02-01T09:28:59Z,CHANGES_REQUESTED,"- thanks for the pr. i think there are some tests missing, i.e, for the methods on `kstreambuilder` and `topologybuilder` that add `timestampextractor` i don't see any tests for them. we need tests for these in addition to the test added to `streamtasktest`",1,0.9309089779853821
19833572,2466,dguy,2017-02-02T16:58:18Z,COMMENTED,i'd still like to see some tests for `kstreambuilder#stream` etc where we are adding the timestamp extractors.,0,0.9705386161804199
20178014,2466,mjsax,2017-02-05T21:43:44Z,CHANGES_REQUESTED,test code needs some improvements. overall change looks quite good already.,1,0.9500318169593811
20230522,2466,dguy,2017-02-06T10:07:56Z,COMMENTED,has done a thorough review of this and i concur with his suggestions,0,0.9476335048675537
21278772,2466,dguy,2017-02-10T16:02:12Z,APPROVED,thanks lgtm,1,0.9280250668525696
24162206,2466,mjsax,2017-02-28T05:23:47Z,APPROVED,lgtm. please review and merge after vote on kip-123 passed.,0,0.992355227470398
28824890,2466,mjsax,2017-03-24T03:50:12Z,CHANGES_REQUESTED,thanks for rebasing. can you also update javadocs for `timestampextractor` interface to explain that an implementation must be stateless. thx.,1,0.9703443050384521
29239094,2466,mjsax,2017-03-27T16:51:57Z,APPROVED,lgtm,0,0.7242414951324463
34677192,2466,mjsax,2017-04-25T21:05:01Z,COMMENTED,"i did one more pass, and do have some further minor comments.",0,0.9689805507659912
34689879,2466,mjsax,2017-04-25T21:12:09Z,CHANGES_REQUESTED,thanks for rebasing! i did one more pass and have some more minor comments. overall very nice work!,1,0.9956610798835754
37397882,2466,guozhangwang,2017-05-10T19:10:14Z,COMMENTED,"thanks for the patch . lgtm overall, just a couple of comments. also could you please rebase so we can merge it before the feature freeze deadline?",1,0.9863378405570984
37972110,2466,guozhangwang,2017-05-13T04:39:56Z,APPROVED,merged to trunk. thanks for the big contribution!,1,0.9947178959846497
244572539,6694,mjsax,2019-06-01T04:48:02Z,COMMENTED,"thanks for the pr ! couple of comments -- might be worth to wait on input before you address them, as i am not 100% sure if the advise is correct. i never used the `offsetmetadata` myself yet, and hence, i am not 100% sure how to use it correctly.",1,0.9761213064193726
255916983,6694,abbccdda,2019-06-28T18:33:13Z,COMMENTED,thanks for the pr. could you resolve comments you already addressed?,1,0.9310441017150879
259215984,6694,mjsax,2019-07-09T00:46:38Z,COMMENTED,"sorry for the delay on reviewing. busy times again... btw: i think we should add an integration tests, too. input topic with single partitions. simple `stream.to()` program and a custom timestamp-extractor that returns ""max"" over the record-timestamp and partition-time. we write one record and check the output topic if the record was forwarded, and then stop kafkastreams. afterward, we restart kafkastreams and write a second record with _smaller_ timestamp than the first record. we again wait for the result record. this time we check that the record timestamp is the timestamp of the first record. does this make sense? not sure atm, if we need second integration test for an actual rebalance case, but atm i think one integration test should be sufficient?",-1,0.9926101565361023
269176581,6694,mjsax,2019-07-31T18:50:00Z,COMMENTED,thanks for the update! the integration test looks promising -- i think we can simplify it though (compare my comments).,1,0.9932615160942078
270365494,6694,abbccdda,2019-08-02T19:56:46Z,COMMENTED,thanks for the work! same minor comments.,1,0.9889468550682068
272737998,6694,mjsax,2019-08-09T00:09:48Z,COMMENTED,"some more minor comments. also, can we add tests to `partitiongrouptest` and `recordqueuetest` for the newly added methods to the corresponding classes.",0,0.9892023205757141
273272538,6694,mjsax,2019-08-09T18:19:44Z,COMMENTED,"thanks for the update. some follow ups. also, it seems you missed to add new test methods in `recordqueuetest`.",1,0.8912743926048279
274849969,6694,cadonna,2019-08-15T09:55:23Z,COMMENTED,thank you for the pr ! here my comments:,1,0.9855733513832092
283023534,6694,cadonna,2019-09-05T12:13:52Z,COMMENTED,sorry for the delay.,-1,0.9893976449966431
289620368,6694,cadonna,2019-09-18T00:53:43Z,APPROVED,"lgtm, thank you",1,0.9677740335464478
116045049,4931,rhauch,2018-04-27T19:02:17Z,COMMENTED,"great first start, ! i was a bit picky, simply because the bulk of the approach looks really good. we need to use the java service provider api, though. details below.",1,0.9949341416358948
116594302,4931,rhauch,2018-05-01T15:23:20Z,COMMENTED,"nice improvement, but i have a few more suggestions.",1,0.9309490919113159
116612497,4931,rhauch,2018-05-01T16:16:40Z,COMMENTED,more comments.,0,0.9175251126289368
116946770,4931,rhauch,2018-05-02T15:38:11Z,COMMENTED,"sorry, i thought there were more changes. perhaps don't collapse commits in the pr. still missing lots of javadoc and suggestions that were not yet addressed.",-1,0.9890095591545105
117373977,4931,wicknicks,2018-05-03T19:00:45Z,COMMENTED,"great work, ! made some comments below. thanks!",1,0.9956309795379639
117738123,4931,kkonstantine,2018-05-14T21:22:21Z,COMMENTED,"nice work ! i did a first pass, left a few comments (among which a few stylistic ones).",1,0.9945799112319946
120855906,4931,rhauch,2018-05-21T16:27:55Z,COMMENTED,"quite a few minor suggestions, and lots of javadoc missing. a few somewhat important questions below as well.",1,0.5252271890640259
122247905,4931,rhauch,2018-05-22T16:41:56Z,COMMENTED,"started another review before i realized you'd not addressed all of the comments. i'll stop here with some additional comments, some of which are quite nuanced due to the javadoc going into the public api.",0,0.8415258526802063
123451664,4931,rhauch,2018-05-25T20:35:29Z,COMMENTED,", this is looking really good, so in this pass i was _super_ critical about grammar and javadoc, especially for anything user-facing. didn't really find much w/r/t the code. keep up the great work!",1,0.9910293817520142
124191269,4931,kkonstantine,2018-05-29T22:11:21Z,APPROVED,"i confirm my previous comments have been addressed. thanks ! nice work. lgtm by me, i'll defer to the rest of the reviewers for the final approval of this pr.",1,0.9955666661262512
124201983,4931,rhauch,2018-05-29T23:36:31Z,COMMENTED,almost there. i found a number of nits that would be good to fix.,0,0.849303662776947
124229280,4931,rhauch,2018-05-30T02:03:16Z,APPROVED,"nice work, and thanks for the diligence, patience, and responsiveness with my reviews!",1,0.9933587908744812
124245308,4931,ewencp,2018-05-30T04:32:49Z,APPROVED,"since `connectrestextensioncontext` is in the public api and we're getting some mixed signals about mutability and how much we expose this publicly, we should probably follow up on the interaction between the two kips regarding this class and its behavior. not a blocker, but we should follow up. i'll merge this to trunk for 2.0.0 now since we've resolved all the issues on this particular patch.",0,0.9908457398414612
194960948,6177,stanislavkozlovski,2019-01-22T12:22:34Z,COMMENTED,gave some of the code a short skim. i'll check it again later. let me just say thanks for driving this change - this is a great improvement and obviously requires a lot of effort to implement and test.,1,0.9467192888259888
196096967,6177,stanislavkozlovski,2019-01-24T16:59:33Z,COMMENTED,i gave this pr a better pass now. i think this is sound functionality-wise. i left a couple of small comments about tests and style but otherwise lgtm! thanks a lot for the work on this ! the tests are very exhaustive :),1,0.9960792660713196
197351158,6177,Ishiihara,2019-01-29T04:16:55Z,COMMENTED,the high level logic looks good to me. i left some minor comments to clarify my understanding.,1,0.8753890991210938
208128272,6177,hachikuji,2019-02-26T19:12:00Z,COMMENTED,left a few initial comments. i'll try to look over the coordinator logic later this week.,0,0.9819839596748352
209786185,6177,hachikuji,2019-03-01T23:58:41Z,COMMENTED,"haven't finished reviewing, but i had one important question on fencing.",0,0.8779489994049072
220189821,6177,guozhangwang,2019-03-28T23:29:17Z,COMMENTED,"made a pass over the pr, here are some nit comments plus one meta comment.",0,0.9895846247673035
224589699,6177,hachikuji,2019-04-09T23:43:18Z,COMMENTED,"thanks, a few more comments.",1,0.8427373170852661
229299231,6177,guozhangwang,2019-04-23T00:44:49Z,COMMENTED,"made another pass on the code, there are still some comments left. also we should make sure client and streams system test does not fail on jenkins before merging this. regarding `consumerprops.put(consumerconfig.group_instance_id_config, null)`. i think 's point is that, if this object is defined with `null` as the default value already (e.g. as group.id, and also as this group.instance.id as we agreed before), then not specifying it on the props map is fine since when parsing the originals, it will still use the default value, `null` to put into the map. hence we only need to check if the loaded prop file has this key or not: if not we do not need to do anything and the default `null` value will be used directly.",0,0.9915407299995422
30182128,2772,michaelandrepearce,2017-03-31T07:34:02Z,COMMENTED,"review notes, to address small formatting changes, missed in cherry pick merge.",0,0.9925191402435303
31473117,2772,becketqin,2017-04-07T05:09:00Z,COMMENTED,thanks for the patch. i made a pass and left some comments.,1,0.907551646232605
34165155,2772,hachikuji,2017-04-22T20:50:32Z,COMMENTED,thanks for the patch! left a few minor comments. one thing that would be good to add is an integration test (maybe in `plaintextconsumertest`) which utilizes headers and the extended serdes.,1,0.984847366809845
34678907,2772,hachikuji,2017-04-25T20:34:18Z,APPROVED,"thanks for the patch. one minor comment, but otherwise lgtm.",1,0.9872772097587585
35255061,2772,ijuma,2017-04-28T01:08:04Z,COMMENTED,i had a quick look and left a few minor comments.,0,0.856438398361206
16050313,2330,ewencp,2017-01-11T04:50:57Z,COMMENTED,"-rosenblatt mostly looks good. a pile of comments, but they're mainly nits/questions. i figure given where these changes are happening a system test run would also help. have fired off a job, should show up at [a link] once jenkins gets past it's current queue and decides to start the job. (also, looks like something else got merged and this needs a rebase now.)",1,0.8595048785209656
16105458,2330,ijuma,2017-01-11T10:26:58Z,COMMENTED,"thanks for the pr, this is a nice improvement. i only had a chance to take a brief look and left a couple of comments.",1,0.9947383999824524
16141737,2330,rajinisivaram,2017-01-11T14:40:26Z,COMMENTED,"haven't gone through the whole code yet, have left a few comments.",0,0.9800019264221191
17451584,2330,rajinisivaram,2017-01-19T13:41:59Z,COMMENTED,-rosenblatt thank you for the updates. i have added a few more comments around the handling of ssl buffers. it will be really good to have a unit test for this scenario if possible.,1,0.9373232126235962
17885572,2330,rajinisivaram,2017-01-23T10:00:54Z,COMMENTED,"-rosenblatt the test is good, but i have added a comment about a timing failure i am seeing. also, the test validates `simplememorypool` in strict mode, while only the non-strict mode is actually used by the implementation. do we even want to have a strict mode? i ask because the strict mode is not handled well in selector. in the test scenario, where there is not enough memory for the request, selector would just constantly go in and out of oom, muting and unmuting, since muting is based on oom for a specific request while unmuting is based on any memory available in the pool. it only makes sense in the non-strict mode.",0,0.9309322237968445
18038451,2330,rajinisivaram,2017-01-23T22:29:17Z,APPROVED,"-rosenblatt just noted a minor typo in thread name, but apart from that both implementation and tests look good. i agree that the scenario that you described is a corner-case and the implementation is good enough as is. thank you for your patience. it is a +1 from me. perhaps or could take a look and commit?",1,0.984012246131897
18549680,2330,junrao,2017-01-27T03:04:10Z,COMMENTED,-rosenblatt : thanks for the patch. looks good overall. left a few comments.,1,0.9943122863769531
37182203,2330,junrao,2017-05-11T02:09:46Z,COMMENTED,-rosenblatt : thanks for rebasing. made another pass and left some comments.,1,0.9222914576530457
51368717,2330,junrao,2017-07-22T22:59:00Z,COMMENTED,"-rosenblatt : sorry for the delay. made another pass. it looks pretty good. just a few minor comments below. , do you want to take a look too?",-1,0.9802518486976624
52173432,2330,junrao,2017-07-25T19:59:23Z,COMMENTED,"-rosenblatt : thanks for the latest patch. a few more minor comments. also, if you preserve the commits, it will make the reviews easier.",1,0.9833461046218872
272092993,7170,mjsax,2019-08-07T18:34:36Z,COMMENTED,"thanks for the pr. made an initial pass. i still need to wrap my head around the optimization layer and how we merge repartition nodes. we need to add more test to `repartitionttopicnametest` and/or `streamsgraphtest` imho, to verify that the new `repartition()` operator works as intended. also, it seems you forgot to update `groupby()` and `groupbykey()`. finally, thinking about the kip once more: as we extend `groupby` to configure the internal repartition topic, i am wondering if we should extend the kip and also allow to do this for `join()` that may also create repartition topics? \cc",1,0.9419112801551819
278540572,7170,vvcephei,2019-08-22T17:43:12Z,COMMENTED,"hey , i finally got a chance to look at your pr. excited to see this going in! i left a few comments, but nothing huge. if you haven't done it already, can you run your tests with coverage and verify that you're happy with the actual coverage in the main code you've changed? we've had a few embarrassing bugs in new features when we had a test coverage gap... it'd be nice to make sure this works for everyone the first time around! thanks so much, -john",1,0.9940882921218872
284432806,7170,vvcephei,2019-09-05T17:46:53Z,APPROVED,"thanks for the updates, . this lgtm now.",1,0.8739385008811951
294613183,7170,mjsax,2019-09-28T02:05:40Z,COMMENTED,"i have one main concern atm, with regard to joins(). it seems that it might be possible that we change the number of user specified partitions within `streamspartitionassignor` what would not be correct imho. let's say, we have one input topic a with 1 partition and input topic b with 4 partitions. if we do [code block] i believe, we would not repartitions ""a"" with 2 partitions but with `4`. can we add a corresponding test? for the joins case, there might actually be other corner case in which we might want to raise an exception. for example: [code block] in this example, the user enforced 2 and 4 partitions but that is not valid because we need the same number of partitions for compute the join correctly. however, i believe, we would atm not throw an exception but increase the partition count of the one topic to 4, too.",0,0.9899736642837524
344962853,7170,mjsax,2020-01-18T22:27:14Z,COMMENTED,sorry for the delay in review -- we are swamped with work and it's hard to get around... (it's also a quite big pr and thus even harder to find time to review...),-1,0.9918406009674072
374744806,7170,vvcephei,2020-03-24T23:09:52Z,COMMENTED,"haha, well. i _did_ start the review, and made a fair amount of progress before getting sidetracked by a global catastrophe... it's still in my ""actively working on this"" bucket, and i'll commit to not starting new work until i finish my review. for now, i'll go ahead and ask this one question, which came up early in my review. i skimmed over the kip and discussion thread, but didn't see a specific discussion of the overload in question.",1,0.9545353055000305
385150011,7170,vvcephei,2020-03-31T22:37:08Z,APPROVED,"hey, , i _finally_ finished my review, and it looks good to me. i'm not sure if wants to make another pass.",1,0.9341330528259277
385257912,7170,mjsax,2020-04-01T05:39:08Z,COMMENTED,sorry for the delay in reviewing!! and thanks to to help pushing this through. overall lgtm. thanks for writing extensive tests!,-1,0.9896760582923889
341491620,7884,junrao,2020-01-14T00:35:27Z,COMMENTED,": thanks for the new patch. overall, the logic still seems a bit over-complicated to me. left a few more comments below.",1,0.9255623817443848
344249814,7884,junrao,2020-01-17T01:37:59Z,COMMENTED,: thanks for addressing the comments. a few more comments below.,1,0.9118492007255554
352685569,7884,junrao,2020-02-06T23:06:21Z,COMMENTED,: thanks for the updated pr. made another pass of the non-testing files. a few comments below.,1,0.9680305123329163
360781525,7884,junrao,2020-02-19T01:52:27Z,COMMENTED,": thanks for the update. a few more comments below on the organization of the code. sorry for keeping asking you to iterate on this. however, since the code is getting a bit more involved, i want to make it easier for future contributors to understand the logic.",1,0.8443030118942261
361446248,7884,junrao,2020-02-19T23:14:15Z,COMMENTED,: thanks for the updated pr. a few more comments below.,1,0.9159396886825562
362994397,7884,junrao,2020-02-25T02:13:01Z,COMMENTED,: thanks for the updated pr. the overall approach looks good to me now. a few more detailed comments below.,1,0.9909329414367676
365274957,7884,junrao,2020-02-26T23:57:22Z,COMMENTED,: thanks for the new patch. a few more comments on test files.,1,0.9579751491546631
366024592,7884,junrao,2020-02-27T23:31:15Z,COMMENTED,": thanks for the updated pr. a few more minor comments below. : could you make a pass of the log cleaner logic too, especially with respect to the txn markers? thanks.",1,0.9907061457633972
366583456,7884,junrao,2020-02-28T18:38:43Z,COMMENTED,": thanks for the updated pr. a few more comments. some of them are from the previous round, but not addressed.",1,0.9677076935768127
367655583,7884,junrao,2020-03-05T19:40:18Z,COMMENTED,: thanks for the updated pr. i made another pass of the tests. a few more comments below.,1,0.9684290289878845
372942510,7884,junrao,2020-03-11T16:49:36Z,APPROVED,: thanks for the latest pr. lgtm. waiting to see if has any more comments.,1,0.9176534414291382
373022703,7884,hachikuji,2020-03-11T20:01:47Z,COMMENTED,thanks for the patch. left some comments in the filtering logic. still need to look over the cleaner.,1,0.938279390335083
29031913,2735,hachikuji,2017-03-25T00:23:00Z,COMMENTED,a few minor comments (i've seen all of this before obviously).,0,0.9165207147598267
29610617,2735,junrao,2017-03-29T01:55:42Z,COMMENTED,: thanks for the patch. some comments on the server side.,1,0.7902764678001404
29781026,2735,junrao,2017-03-29T16:57:45Z,COMMENTED,a couple of initial comments on the producer side.,0,0.9864658713340759
30112104,2735,junrao,2017-03-30T21:18:13Z,COMMENTED,: thanks for the patch. lgtm. just a few more minor comments.,1,0.9701521992683411
30123770,2735,hachikuji,2017-03-30T23:10:25Z,COMMENTED,thanks for the pr. left a bunch of minor comments.,1,0.9783499240875244
30213820,2735,ijuma,2017-03-31T11:14:54Z,COMMENTED,a few minor comments.,0,0.9563339948654175
30427235,2735,junrao,2017-04-03T02:44:20Z,COMMENTED,a couple of minor comments. probably you can address them in a followup patch.,0,0.9832198023796082
54564800,3621,becketqin,2017-08-07T04:59:01Z,COMMENTED,thanks for the patch. i'll review it soon. i have one high level comment below regarding the scope of this patch. does that make sense?,1,0.8710370063781738
55426696,3621,becketqin,2017-08-13T05:52:46Z,COMMENTED,thanks for the patch. i haven't finished the review yet. will finish it tomorrow.,1,0.8312476277351379
55990989,3621,becketqin,2017-08-14T06:25:13Z,COMMENTED,thanks for the patch. i made a pass on all the none testing code and left some comments.,1,0.9107456803321838
57356327,3621,becketqin,2017-08-19T23:37:21Z,COMMENTED,thanks for the patch. looks good overall. left some minor comments. do you also have time to take a look? this patch is part 1 of kip-113 which added the wire protocols and allows users to specify log dir when a new replica is created on a broker (either through topic creation or partition reassignment). a follow up patch will implement the mechanism of replica movement within a broker.,1,0.9889737367630005
57901755,3621,junrao,2017-08-23T01:39:13Z,COMMENTED,: thanks for the patch. looks good overall. added a few comments below.,1,0.9902446269989014
58545656,3621,junrao,2017-08-25T01:49:48Z,COMMENTED,: thanks for the updated patch. a few more minor comments.,1,0.8900773525238037
59716978,3621,junrao,2017-08-30T22:53:29Z,COMMENTED,: thanks for the patch. lgtm. just a minor comment below. i will let jiangjie make the final pass of the patch.,1,0.9283914566040039
60269908,3621,becketqin,2017-09-02T21:16:38Z,COMMENTED,thanks for updating the patch. made another pass. just two comments regarding the inference of error on the client side. otherwise lgtm.,1,0.9433826804161072
384349548,7898,OneCricketeer,2020-03-31T02:03:42Z,COMMENTED,first pass,0,0.9444324970245361
851562910,7898,viktorsomogyi,2022-01-17T10:56:50Z,COMMENTED,"overall i think this is a thorough pr, thanks for doing it. had a few comments but otherwise it'd be a +1 from me. would be happy to see this merged.",1,0.99467933177948
870570014,7898,mimaison,2022-02-10T15:49:14Z,COMMENTED,thanks for the pr. i've made a first pass (did not look at ./streams or ./tests) and i think it looks pretty good. i left a few comments/questions.,1,0.9909369349479675
894460030,7898,showuon,2022-02-27T04:22:53Z,COMMENTED,had a 1st pass to the changes above `plaintextadminintegrationtest.scala`. will continue to review the remaining code changes. thanks.,1,0.9436329007148743
894470734,7898,showuon,2022-02-27T08:21:09Z,COMMENTED,had a 1st pass to the changes above `rocksdbtimestampedstoretest.java`. will continue to review the remaining code changes. thanks.,1,0.9552039504051208
894477032,7898,showuon,2022-02-27T09:01:44Z,COMMENTED,", i've had a first pass to all the files. thanks for the work! in addition to the comments left, some high level comments: 1. please rebase to the latest trunk to fix merge conflict 2. i think we should run a system test and trogdor test to make sure this change won't break existing tests. thank you.",1,0.9947465062141418
460417792,9039,mjsax,2020-08-04T01:31:09Z,COMMENTED,did a first pass. did not look into all details yet (especially the actual algorithm -- need more time to grog it),0,0.9447049498558044
461257792,9039,ableegoldman,2020-08-05T01:51:49Z,COMMENTED,"looking good! the actual algorithm code turned out surprisingly clean, nice job simplifying everything.",1,0.9955539107322693
464624060,9039,ableegoldman,2020-08-11T02:45:54Z,COMMENTED,"still going through the integration tests, leaving my partial review for now",0,0.9755325317382812
473887680,9039,ableegoldman,2020-08-24T22:15:17Z,APPROVED,"looking good! i ran the randomized input test 500 times locally to check, all green :thumbs_up:",1,0.9956310987472534
476853714,9039,vvcephei,2020-08-27T21:33:03Z,COMMENTED,"hey , thanks for the feature! this pr looks great to me overall, just a few comments. i also noticed one of sophie's comments (about a typo `supplies` -> `supplier`) still needs to be addressed. thanks, -john",1,0.995263934135437
479000860,9039,vvcephei,2020-08-31T22:19:32Z,APPROVED,"thanks, !",1,0.9601993560791016
2142339499,16456,apoorvmittal10,2024-06-26T16:38:23Z,CHANGES_REQUESTED,"thanks for the pr. took an initial look, will review again later. some comments though.",1,0.9725794792175293
2153743994,16456,apoorvmittal10,2024-07-02T14:47:25Z,CHANGES_REQUESTED,"did a partial review, will complete the review post addressing current comments.",0,0.9900486469268799
2156298186,16456,apoorvmittal10,2024-07-03T12:23:36Z,CHANGES_REQUESTED,"the pr has unintended changes i think, can we please clean them.",0,0.8000462651252747
2168812397,16456,apoorvmittal10,2024-07-10T11:34:41Z,COMMENTED,"thanks for updating the pr, it mostly looks good apart blocking calls and some suggestions.",1,0.9874512553215027
2197835817,16456,junrao,2024-07-26T22:00:19Z,COMMENTED,-wadhwa5 : thanks for the pr. made a pass of non-testing files. left a few comments.,1,0.9489240050315857
2204816887,16456,apoorvmittal10,2024-07-29T12:49:51Z,APPROVED,lgtm! some minor nit and adressing 's comments.,1,0.5170518755912781
2206351244,16456,junrao,2024-07-30T00:25:27Z,COMMENTED,-wadhwa5 : thanks for the updated pr. made a pass of all files. a few more comments.,1,0.9650347232818604
2213381947,16456,junrao,2024-08-01T19:00:32Z,COMMENTED,"-wadhwa5 : thanks for the updated pr. a few more comments. also, there seems to be a compilation error in the test.",1,0.8466646671295166
2216089659,16456,junrao,2024-08-02T18:03:50Z,COMMENTED,"-wadhwa5 : thanks for the updated pr. a few minor comments. also, there still seems to be compilation errors.",1,0.9073241949081421
2216520136,16456,junrao,2024-08-02T23:27:30Z,COMMENTED,-wadhwa5 : thanks for the updated pr. it seems there are still compilation errors.,1,0.8863800764083862
2219414506,16456,junrao,2024-08-05T16:21:40Z,COMMENTED,-wadhwa5 : thanks for the updated pr. do you know why there are many test failures?,1,0.8643335103988647
2219617244,16456,junrao,2024-08-05T18:27:41Z,COMMENTED,-wadhwa5 : thanks for the updated pr. just one more comment.,1,0.9313837289810181
2221556552,16456,junrao,2024-08-06T14:56:07Z,APPROVED,-wadhwa5 : thanks for the updated pr. lgtm,1,0.9099451899528503
1633518313,14364,dajac,2023-09-19T15:06:31Z,COMMENTED,thanks for the pr. i just made a first pass and left a few high level comments/questions.,1,0.9718772768974304
1636484217,14364,kirktrue,2023-09-20T21:14:06Z,CHANGES_REQUESTED,thanks for the pull request!,1,0.8458459377288818
1651058631,14364,dajac,2023-09-29T17:42:23Z,COMMENTED,thanks for the pr. i looked into the non-test files and left some comments for consideration.,1,0.9534873366355896
1652710243,14364,dajac,2023-10-02T13:24:23Z,COMMENTED,i just made another pass on the non-test files and i left a few more comments/questions.,0,0.9683564901351929
1657320395,14364,dajac,2023-10-04T12:20:21Z,COMMENTED,"thanks for the update, . i left a few more comments. we are getting there...",1,0.9903708100318909
1659896044,14364,dajac,2023-10-05T13:52:04Z,COMMENTED,thanks for the update. i just replied to existing comments and left a few nits.,1,0.8701465725898743
1661810574,14364,dajac,2023-10-06T12:59:37Z,COMMENTED,thanks for the update. i wanted to merge it to unblock the next prs but the code does not compile... so i left a small comment.,1,0.905112087726593
1664798711,14364,dajac,2023-10-09T15:33:12Z,APPROVED,"lgtm, thanks.",1,0.8991513252258301
2348722074,17373,mumrah,2024-10-04T17:53:31Z,COMMENTED,"thanks for tackling this . is it really necessary to rename the log4j config files? the kip mentions a system property that allows us to load log4j.properties files [a link] i could understand migrating our internal log4j configs for tests and such, but i think we should avoid forcing a change in our production configs. i also see that this page mentions a log4j to log4j2 bridge [a link] would that help us at all?",1,0.766249418258667
2384990466,17373,showuon,2024-10-22T12:25:20Z,COMMENTED,had a pass to `loggingresource.java`. will continue to review when available. thanks.,1,0.9638464450836182
2385239181,17373,frankvicky,2024-10-22T13:37:48Z,COMMENTED,"hi very appreciate your review. about zk stuff, i'm think about removing the zk configurations might be better handled as a follow-up pr. wdyt?",1,0.992368757724762
2387408736,17373,showuon,2024-10-23T07:24:52Z,COMMENTED,had a look for all the changes. left some comments.,0,0.9603611826896667
2437985830,17373,showuon,2024-11-15T08:42:19Z,APPROVED,"lgtm! left a minor comment, but we can address it in a separate pr. thanks for the effort!",1,0.9934760928153992
2438301792,17373,mimaison,2024-11-15T15:03:15Z,COMMENTED,"thanks for the updates, i made another pass and left a few comments and suggestions.",1,0.8469760417938232
2442212625,17373,mimaison,2024-11-18T10:38:00Z,COMMENTED,thanks for the updates! i tested the connect `/admin/loggers` endpoint and it looks good.,1,0.9873702526092529
2442563227,17373,chia7712,2024-11-18T13:57:56Z,COMMENTED,thanks for taking over this huge issue. i left some major comments for you.,1,0.9636720418930054
2444376755,17373,chia7712,2024-11-19T07:29:11Z,COMMENTED,thanks for this patch. a couple of comments remain. ptal,1,0.9844978451728821
2444669390,17373,chia7712,2024-11-19T08:22:36Z,COMMENTED,thanks for this patch. a couple of comments are left.,1,0.9581088423728943
2445984425,17373,chia7712,2024-11-19T16:23:50Z,COMMENTED,thanks for this patch. please check my latest comments to fix e2e,1,0.8877006769180298
2448721648,17373,chia7712,2024-11-20T14:06:53Z,COMMENTED,please double check the yaml format. i leave some comments about the incorrect format.,0,0.8967289328575134
2465343579,17373,mimaison,2024-11-27T15:26:46Z,COMMENTED,"thanks for the updates. the logging issues i had previously are fixed. i tested describing and altering broker levels with the admin api and it worked fine. however i ran into an issue when testing the connect rest api and there's definitively a bug in that logic, see my other comment. what's puzzling is that the ci passed, so it seems we are missing test coverage in that area. if you'd rather add the missing test in a separate pr, can you open a jira to track this issue? thanks",1,0.9841101169586182
2471037405,17373,chia7712,2024-11-30T19:47:54Z,COMMENTED,thanks for the updates. there are additional breaking changes that are causing the end-to-end tests to fail. i’ve left comments on the relevant code. please take a look.,1,0.5457810759544373
1385125558,13561,divijvaidya,2023-04-14T14:17:20Z,CHANGES_REQUESTED,"thank you for the pr satish :pray: i have some performance related comments such as, performing copying and cleaning in same thread pool. you can choose to create a jira for them and we can address them separately. other comments associated with correctness, such as, accounting for segments not in current epoch chain may be urgent enough to address in this pr.",1,0.9809523224830627
1440756712,13561,junrao,2023-05-24T00:21:50Z,COMMENTED,: thanks for the pr. made a pass of non testing files. a few comments below.,1,0.982595682144165
1440764440,13561,junrao,2023-05-24T00:21:50Z,COMMENTED,: thanks for the pr. made a pass of non testing files. a few comments below.,1,0.982595682144165
1440764461,13561,junrao,2023-05-24T00:21:53Z,COMMENTED,: thanks for the pr. made a pass of non testing files. a few comments below.,1,0.982595682144165
1468595834,13561,junrao,2023-06-08T17:20:43Z,COMMENTED,: thanks for the updated pr. made a pass of all files. left a few more comments.,1,0.9794609546661377
1558464951,13561,showuon,2023-08-02T08:33:32Z,COMMENTED,thanks for the update. left some comments.,1,0.7083953619003296
1558595236,13561,showuon,2023-08-02T09:51:48Z,COMMENTED,left some more comments. thanks.,1,0.9584953188896179
1568396581,13561,junrao,2023-08-09T17:11:49Z,COMMENTED,: thanks for the updated pr. made another pass of non-testing files. a few more comments.,1,0.9802025556564331
1574219899,13561,junrao,2023-08-11T19:17:27Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
1576230523,13561,showuon,2023-08-14T07:31:29Z,COMMENTED,"overall lgtm, except the potential issue raised by jun [a link]. thanks.",1,0.968522846698761
1576361638,13561,kamalcph,2023-08-14T08:58:43Z,COMMENTED,"overall lgtm, left minor comments to address.",0,0.9912797808647156
1577473290,13561,junrao,2023-08-14T19:03:25Z,COMMENTED,": thanks for the updated pr. a few more comments. also, do we have any test covering the newly introduced local retention logic?",1,0.960908055305481
1581103165,13561,junrao,2023-08-16T17:23:32Z,COMMENTED,: thanks for the updated pr. just one minor comment. do you know why there are 100+ test failures?,1,0.9740937352180481
1583212640,13561,junrao,2023-08-17T18:16:23Z,COMMENTED,: thanks for the updated pr. added one more comment.,1,0.959244430065155
1587898614,13561,divijvaidya,2023-08-21T21:18:06Z,APPROVED,"thank you for your patience throughout this pr satish! this was a big one. i am good with the changes made in this pr (assuming ci tests are sane). there are multiple follow-up jira tickets that we have opened as part of this pr, let's keep a track of those as we finalize 3.6. please wait for approval from jun and other active reviewers before merging this in.",1,0.9946495890617371
1588185187,13561,showuon,2023-08-22T02:40:03Z,APPROVED,lgtm!,1,0.9057464599609375
1589579004,13561,clolov,2023-08-22T14:23:50Z,APPROVED,"the current changes make sense to me, apologies for arriving late to this review",-1,0.7740044593811035
1593125881,13561,jeqo,2023-08-24T09:03:25Z,APPROVED,thanks for driving this! changes lgtm as well.,1,0.9695034027099609
1594048686,13561,junrao,2023-08-24T16:47:50Z,APPROVED,: thanks for the explanation. lgtm,1,0.6873975396156311
128020211,5201,bbejeck,2018-06-12T15:49:27Z,COMMENTED,some comments about the updates here,0,0.9735167622566223
132187743,5201,vvcephei,2018-06-26T21:27:15Z,COMMENTED,"looks good overall to me. i did not go through and prove the correctness of each node, but i can if desired. i asked a couple of questions.",1,0.7844623923301697
132201662,5201,mjsax,2018-06-26T22:44:31Z,COMMENTED,one initial pass -- did not look at the tests yet.,0,0.9585370421409607
141796054,5201,guozhangwang,2018-07-31T06:04:48Z,COMMENTED,made a pass over the pr.,0,0.9888501763343811
142001771,5201,vvcephei,2018-07-31T16:52:28Z,COMMENTED,"mostly nits. lgtm overall, modulo some of guozhang's comments.",0,0.8173746466636658
1417634010,13639,jeffkbkim,2023-05-09T01:16:48Z,COMMENTED,the logs may be misleading if clients join/leave via heartbeat requests but the coordinator fails to append records right?,0,0.9644882678985596
1442304227,13639,jeffkbkim,2023-05-24T18:02:59Z,COMMENTED,took a look at consumergroup and consumergrouptest,0,0.9882835149765015
1444737187,13639,jeffkbkim,2023-05-25T23:01:08Z,COMMENTED,"left minor comments, i think the rest look good. the comments really help with understanding the code. thanks!",1,0.9952947497367859
1444756495,13639,jeffkbkim,2023-05-25T23:01:13Z,COMMENTED,"left minor comments, i think the rest look good. the comments really help with understanding the code. thanks!",1,0.9952947497367859
1451304497,13639,jeffkbkim,2023-05-30T16:00:02Z,APPROVED,lgtm!,1,0.9057464599609375
1451433227,13639,jolshan,2023-05-30T17:10:54Z,APPROVED,thanks david :),1,0.9803937673568726
109138439,4812,guozhangwang,2018-04-03T22:34:54Z,COMMENTED,"i have not seen the `skippedrecordssensor` to be recorded for other reasons yet, but i think from `processorcontext` it should be able to include the record metadata on all such occurrences.",0,0.9899507164955139
109859370,4812,guozhangwang,2018-04-05T20:39:28Z,COMMENTED,"a few meta comments: 1. we should update the docs/upgrade-guide section, emphasizing that users who monitor based on the old metrics will be impacted (it is not compatible), and what they should start monitoring instead in the new version. also, we need to mention the new apis added to `topologytestdriver`. 2. we did not include any other places to record `skippedrecordssensor` yet. however, the added unit test still passed, i'm not sure why it is the case (`skippedrecordssensor` was not recorded when it happened yet)?",0,0.9932957291603088
109909654,4812,guozhangwang,2018-04-05T23:38:54Z,COMMENTED,"made a pass over this commit only. i think it is a good idea to encapsulate the sensors into the metrics so we do not pass individual sensors around. one concern i had though, is that by moving `streamsmetricsthreadimpl` to `streamsmetricsimpl`, we are effectively wrapping the thread-level metrics into the `internalstreamsmetrics` since the exposed apis like `taskcreatedsensor ` should be thread-level only (that makes thinking, should `internalstreamsmetrics` just be `threadmetrics`)? but for other layers, the awkward thing is that, for example, in `taskmetrics` it has a reference of the total thread-level metrics which it does not really need: all it needs is the functionality to register more sensors into the underlying `metrics registry`. so i'm wondering instead of make `internalstreamsmetrics extends streamsmetrics`. could we: 1. make `internalstreamsmetrics` an independent interface with those thread-level metrics (we can rename it to `threadmetrics` to clarify). 2. let `streamsmetricsthreadimpl` implement `threadmetrics`, while holding a reference to the `streamsmetrics` register the sensors. 3. similarly for `taskmetrics`, `cachemetrics` and `processornodemetrics`, we do the same: each exposing its sensors as an api, while the corresponding impl class to get a reference of the `streammetrics` to call its `addxxsensor` etc functions. wdyt?",0,0.9662855267524719
110080377,4812,bbejeck,2018-04-06T15:03:09Z,COMMENTED,i've left just a couple of minor comments. overall i'm in favor of the change since this avoids the need to pass sensors around and returning values for metrics that can be captured where the event occurs. but i agree with on naming and structure suggested for the metrics refactoring proposed here.,0,0.9007697105407715
110149602,4812,mjsax,2018-04-06T18:21:19Z,COMMENTED,overall looks good. couple of nits and questions.,1,0.9275836944580078
110268499,4812,mjsax,2018-04-07T22:35:47Z,COMMENTED,some more comments.,0,0.9690834283828735
110532697,4812,bbejeck,2018-04-09T17:17:35Z,APPROVED,"overall looks good, just a couple of additional minor comments.",1,0.9230304956436157
110625874,4812,guozhangwang,2018-04-09T21:46:03Z,COMMENTED,"thanks for the pr. overall it looks reasonable to me. i have only minor detailed comments, plus the meta comment about follow-up refactoring and the docs changes: 1) we should update `upgrade-guide` to warn users their monitoring needs to be updated, 2) in `monitoring` we'd better update the skipped records to list possible reasons it will be recorded.",1,0.980354368686676
110629640,4812,guozhangwang,2018-04-09T21:49:16Z,COMMENTED,"another meta comment: in `kstreamaggregate`, `kstreamreduce`, when either the key or value is null, we also skipped the record, should we record this as well since in many places it is not an expected event?",0,0.9940395355224609
111021059,4812,guozhangwang,2018-04-10T21:52:47Z,COMMENTED,i left some comments on the high-level approach. will dig into details after we have agreed on the proposal itself.,0,0.9808273315429688
111364617,4812,bbejeck,2018-04-11T20:00:42Z,COMMENTED,"overall lgtm, just left some additional comments.",0,0.9800297617912292
111832721,4812,guozhangwang,2018-04-12T23:50:20Z,COMMENTED,left a few more meta comments.,0,0.9525853991508484
113037758,4812,guozhangwang,2018-04-18T00:20:46Z,COMMENTED,made one more pass over the pr.,0,0.9858161211013794
113814217,4812,guozhangwang,2018-04-20T00:17:29Z,COMMENTED,lgtm except an comment regarding [code block],0,0.9896299242973328
114057222,4812,bbejeck,2018-04-20T20:53:03Z,COMMENTED,"overall looks good, just have a few comments.",1,0.8954839706420898
295980437,7378,vvcephei,2019-10-02T02:20:11Z,COMMENTED,"hey , i finally made a pass over this. it honestly looks great! super clean; just a few notes. thanks, -john",1,0.9958378076553345
296352613,7378,vvcephei,2019-10-02T16:03:41Z,APPROVED,"thanks for the high quality kip and pr, complete with tests and docs, ! this looks good to me.",1,0.9957656860351562
296936783,7378,bbejeck,2019-10-03T16:36:55Z,APPROVED,"thanks for the hard work in this , just minor comments otherwise lgtm pending rebase for conflicts.",1,0.9814323782920837
297267664,7378,mjsax,2019-10-04T07:28:29Z,COMMENTED,"overall lgtm. i put many nit comments, especially to improve javadocs, what seems important for public apis. you can also do a follow up pr to address the javadoc comments so we can meet the deadline tomorrow. for code comments, it would be great if we could resolve them beforehand.",0,0.9123488664627075
159900242,5709,vvcephei,2018-09-28T16:49:46Z,CHANGES_REQUESTED,"thanks for the pr, ! the majority of my comments are nits...",1,0.9894696474075317
160084220,5709,vvcephei,2018-09-29T15:33:36Z,APPROVED,"this lgtm now. thanks, !",1,0.993051290512085
160125897,5709,guozhangwang,2018-09-30T20:14:40Z,COMMENTED,"one major comment around `createrepartitionedsource`, others are minor.",0,0.9914321899414062
2383097188,17539,apoorvmittal10,2024-10-21T19:17:36Z,COMMENTED,"lgtm, left some comments.",0,0.9513875842094421
2383497969,17539,junrao,2024-10-21T23:55:16Z,COMMENTED,: thanks for the pr. left a comment.,1,0.9656598567962646
2388250314,17539,apoorvmittal10,2024-10-23T11:25:14Z,CHANGES_REQUESTED,thanks for the updated pr. left some comments.,1,0.9117461442947388
2388835452,17539,AndrewJSchofield,2024-10-23T14:11:42Z,CHANGES_REQUESTED,thanks for the pr. apoorv's comment about the exception handling is definitely important.,1,0.9748386144638062
2390596874,17539,junrao,2024-10-23T21:31:49Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
2393399821,17539,junrao,2024-10-24T18:58:59Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
2399942069,17539,junrao,2024-10-28T20:03:38Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
2408665389,17539,junrao,2024-10-31T18:18:49Z,COMMENTED,": thanks for the updated pr. a few more comments. also, it seems the previous comments on sharepartition haven't been addressed?",1,0.9477524161338806
2410657569,17539,junrao,2024-11-01T19:12:18Z,COMMENTED,: thanks for the updated pr. left a few more comments.,1,0.9647477269172668
2413798480,17539,junrao,2024-11-04T20:15:26Z,COMMENTED,: thanks for the updated pr. made a pass of all files. a few more comments.,1,0.9845346212387085
2414346629,17539,apoorvmittal10,2024-11-05T00:48:50Z,CHANGES_REQUESTED,"thanks for updated pr, some comments.",1,0.8569676876068115
2416969009,17539,junrao,2024-11-06T01:24:55Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
2419456942,17539,junrao,2024-11-06T21:47:21Z,COMMENTED,: thanks for the updated pr. just a few minor comments.,1,0.9680233001708984
2419688517,17539,apoorvmittal10,2024-11-07T00:12:45Z,APPROVED,though i would have preferred [a link] but not something which is really important to me. and 1 major thing we need to fix is [a link] in subsequent prs. lgtm otherwise.,0,0.9125884771347046
2421378687,17539,junrao,2024-11-07T15:55:28Z,APPROVED,": thanks for the updated pr. lgtm left a few minor comments. since the pr has been iterated for some time, let's address them in the followup pr.",1,0.9462791085243225
32771597,2849,junrao,2017-04-14T04:34:06Z,COMMENTED,: thanks for the patch. a few quick comments so far.,1,0.923694372177124
32916057,2849,junrao,2017-04-17T22:06:45Z,COMMENTED,: thanks for the patch. made a pass of all non-testing code and left some comments.,1,0.8601012825965881
34401433,2849,junrao,2017-04-25T01:33:38Z,COMMENTED,": thanks for the updated patch. made another pass of the non-test files and added some more comments. some of the issues can potentially be addressed in a followup patch, as long as we mark that clearly. also, it seems that we don't have the code to (1) abort a long transaction; (2) expire a transactional id not being actively used some time?",1,0.5775108337402344
34708999,2849,guozhangwang,2017-04-26T02:34:48Z,COMMENTED,"made a pass over the added non-test code beyond my commits, also places that i got pinged.",0,0.9759305119514465
36212973,2964,hachikuji,2017-05-04T10:24:12Z,COMMENTED,left a few comments. i'm still working my way through the whole thing (been out of the tc code for too long).,0,0.755718469619751
36418258,2964,junrao,2017-05-08T02:11:37Z,COMMENTED,: thanks for the patch. left a few comments.,1,0.9525304436683655
36847133,2964,hachikuji,2017-05-08T18:54:49Z,COMMENTED,a few comments in `transactioncoordinator`.,0,0.9925334453582764
37886047,2964,hachikuji,2017-05-12T16:33:29Z,APPROVED,"thanks , lgtm.",1,0.8723828196525574
37931050,2964,junrao,2017-05-13T00:18:18Z,COMMENTED,: thanks for the patch. left a few more comments.,1,0.9619178771972656
1288512,1884,dguy,2016-09-23T09:10:42Z,COMMENTED,"looking good. some minor comments. on the `internaltopicconfig.toproperties` change suggested - i'm happy if we do the tidy up, i.e., change to using a `map` in another pr - i'll leave it up to you. thanks",1,0.9939473867416382
1376803,1884,dguy,2016-09-23T18:04:30Z,COMMENTED,"one minor comment, otherwise lgtm. thanks",1,0.99208003282547
1998443,1884,guozhangwang,2016-09-28T19:23:41Z,COMMENTED,also fyi to who's working on kip-4 that includes adding an `adminclient` as we hope these clients (probably part of the blocking behavior in `consumernetworkclient`) can be condensed into a single class.,0,0.9909418225288391
5160896,1884,guozhangwang,2016-10-20T21:28:37Z,COMMENTED,could you complete the loop with error code checking?,0,0.9911174774169922
15583751,1884,guozhangwang,2017-01-06T23:24:35Z,COMMENTED,left some comments.,0,0.8636953830718994
139658225,5379,rajinisivaram,2018-07-23T21:55:22Z,COMMENTED,"thanks for the pr. i haven't gone through the tests yet, but the implementation looks good overall. i have left some minor comments.",1,0.9937187433242798
139688830,5379,rondagostino,2018-07-24T00:05:53Z,COMMENTED,almost there!,1,0.8523185849189758
139707212,5379,rondagostino,2018-07-24T02:09:41Z,COMMENTED,looked more closely at unit tests.,0,0.9857607483863831
139792331,5379,rajinisivaram,2018-07-24T09:13:38Z,COMMENTED,"thanks for the updates, added a few more comments.",1,0.6965846419334412
140075700,5379,rondagostino,2018-07-25T14:16:59Z,COMMENTED,hi stanislav. i think we're just about there. mostly unit test comments again. ron,1,0.7519169449806213
140420701,5379,rondagostino,2018-07-25T17:39:55Z,COMMENTED,"last changes from my point of view, i think. assume it lgtm if i don't send additional review comments. thanks for working through everything.",1,0.9554855227470398
143501301,5379,rajinisivaram,2018-08-06T10:20:50Z,COMMENTED,thanks for all the updates. it is looking good. left some more minor comments.,1,0.9941720366477966
143533648,5379,rajinisivaram,2018-08-06T10:25:22Z,COMMENTED,checkstyle failures,0,0.9436303973197937
143662242,5379,rajinisivaram,2018-08-06T16:12:12Z,APPROVED,"thanks for the updates, lgtm",1,0.5888751745223999
586818389,10070,rondagostino,2021-02-09T18:52:15Z,COMMENTED,"just got through a little bit, figured i would provide incremental feedback.",0,0.9563652873039246
587133697,10070,junrao,2021-02-11T23:33:51Z,COMMENTED,: thanks for the pr. partially through the pr. a few comments below.,1,0.9485979080200195
589716082,10070,junrao,2021-02-12T22:36:31Z,COMMENTED,a few more comments.,0,0.959341287612915
591635806,10070,rondagostino,2021-02-16T21:28:36Z,COMMENTED,commented in a couple of places where i think we need to deal with the case where the partition's isr list has just a single member.,0,0.9886089563369751
592688242,10070,junrao,2021-02-18T02:25:29Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
593465309,10070,junrao,2021-02-18T20:43:42Z,COMMENTED,: thanks for the updated pr. just a few more comments.,1,0.959556519985199
593803505,10070,junrao,2021-02-19T02:20:59Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
594470538,10070,junrao,2021-02-19T19:23:17Z,COMMENTED,: thanks for the new updates. a few more comments below.,1,0.8251023888587952
594648852,10070,junrao,2021-02-19T23:39:11Z,COMMENTED,: thanks for the updated pr. just one more comment.,1,0.9687156677246094
594667179,10070,junrao,2021-02-20T00:37:20Z,COMMENTED,: still one more comment.,0,0.5480169057846069
594683742,10070,junrao,2021-02-20T01:23:36Z,APPROVED,": thanks for the latest pr. lgtm. the last comment is no longer an issue after regenerating the code. overall, the new controller code is quite elegant and much easier to follow than the old controller code.",1,0.984413206577301
60240596,3765,junrao,2017-09-04T23:53:19Z,COMMENTED,: thanks for the patch. made a pass and left a few comments.,1,0.8623057007789612
61976794,3765,junrao,2017-09-13T01:27:50Z,COMMENTED,: thanks for the updated patch. a few more comments.,1,0.8383483290672302
63183921,3765,junrao,2017-09-16T00:52:27Z,COMMENTED,": thanks for the new changes. a few more comments below,",1,0.8901980519294739
64462793,3765,junrao,2017-10-06T16:39:27Z,COMMENTED,: thanks for the big patch. we are getting pretty close. a few quick comments.,1,0.993961751461029
67754587,3765,junrao,2017-10-07T00:59:26Z,COMMENTED,a few more comments.,0,0.959341287612915
68132567,3765,junrao,2017-10-10T02:02:02Z,COMMENTED,": thanks for the patch. made another pass. left a few more comments, most of which are minor. also, kicked off a system test. the results should show up at [a link] before committing this patch, it would be useful to have some performance numbers on controlled shutdown and controller failover time with a large number of partitions.",1,0.8682939410209656
68673653,3765,junrao,2017-10-11T23:02:22Z,COMMENTED,: thanks for the latest patch. just a few more minor comments.,1,0.9590221643447876
69363339,3765,junrao,2017-10-13T23:29:12Z,COMMENTED,: thanks for the patch. a few more comments on the most recent change.,1,0.891076922416687
69743787,3765,junrao,2017-10-17T18:04:42Z,COMMENTED,": thanks for the patch and the performance numbers. just a few more minor comments. could you address those comments and also rebase? after that, i can kick off another run of system tests.",1,0.9598348140716553
1307528234,13240,dajac,2023-02-21T15:28:09Z,COMMENTED,thanks for the update. i left a few more comments for consideration.,1,0.8971395492553711
1328914968,13240,dajac,2023-03-07T16:30:19Z,COMMENTED,thanks for the update. i started to review it but i haven't finished yet. i have already left a bunch of comments for consideration.,1,0.9498465657234192
1387620802,13240,dajac,2023-04-17T10:18:37Z,COMMENTED,"hey . i just got back to this pr. i made a pass over the files in `core` and i left some comments. as a general ask, it would be great if we could keep avoid large refactoring in tests in this pr as they are very distracting. i am not against refactoring but i would do them in separate prs.",0,0.5040302872657776
1388024550,13240,dajac,2023-04-17T14:38:29Z,COMMENTED,i made a pass on the `clients` files and i left a few more comments.,0,0.9861510396003723
1474840476,13240,dajac,2023-06-12T13:34:47Z,COMMENTED,i am back one this one. i looked at the files in `clients` package and left a few minor comments.,0,0.964277982711792
8840529,2140,ijuma,2016-11-16T15:48:56Z,COMMENTED,just noticed a couple of things when i scanned the pr. will do a proper review later.,0,0.977543294429779
9972082,2140,junrao,2016-11-30T01:56:52Z,COMMENTED,: thanks for the patch. made a pass on this. some of the issues that i pointed out seem to be existing. we can decide whether to address them here or in followup jiras.,1,0.8867968916893005
11320300,2140,guozhangwang,2016-12-06T02:17:07Z,COMMENTED,"made a pass over the pr, thanks for this large contribution !",1,0.9534969925880432
12339739,2140,junrao,2016-12-10T02:26:49Z,COMMENTED,thanks for the new patch. a few more comments.,1,0.9084475040435791
12582254,2140,junrao,2016-12-13T00:33:12Z,COMMENTED,": thanks for the latest patch. just a few minor comments. also, could you post the latest performance results? assuming there is no degradation, the patch lgtm.",1,0.9755724668502808
12728487,2140,junrao,2016-12-13T17:28:24Z,COMMENTED,": thanks for the patch. lgtm. just a couple of minor comments. about the performance. we used to optimize the path for recompression on the broker side by implementing a chained bytebuffer list to avoid copying during buffer overflow for writes. with the patch, we lose such optimization and simply recopies data to a bigger buffer during overflow. this will affect the performance of recompression when the estimated after-compression size is lower. recompression can happen when (1) producer is old, and (2) the broker compression codec is different from the producer's, both should be uncommon. so, we can probably commit the patch as it is. if the recompression performance is a problem, we can always optimize the code for expanding the buffer in bytebufferoutputstream later.",1,0.9531353712081909
110258261,4830,lindong28,2018-04-07T16:57:12Z,COMMENTED,"thanks for the patch! i left some comments. also, can you rebase (not merge branch) your commits onto the latest trunk such that they don't interleave with other commits due to `merge branch 'trunk' of [a link] into trunk`?",1,0.9895491600036621
114058460,4830,lindong28,2018-04-20T20:06:45Z,COMMENTED,lgtm overall. still have some concern with the new code style due to removing callback in handleproducerequest and handlefetchrequest. maybe the second reviewer can comment on that.,0,0.9730175137519836
115007483,4830,lindong28,2018-04-25T00:52:11Z,COMMENTED,thanks for the updater. the non-test code looks good to main. just left some minor comments for the test code.,1,0.9923160076141357
115342795,4830,rajinisivaram,2018-04-25T20:53:20Z,COMMENTED,thanks for the pr. i did a quick review and left some comments. the pr needs rebasing to resolve conflicts.,1,0.9718194007873535
117860408,4830,lindong28,2018-05-07T02:19:08Z,COMMENTED,thanks for the update and all the work . i went over the patch again and left some comments. the biggest concern is the way in which we handle fetchrequest in this patch.,1,0.9750139713287354
119783299,4830,rajinisivaram,2018-05-14T12:10:19Z,COMMENTED,"thanks for the updates. looks good overall, left a few comments.",1,0.9885918498039246
121627242,4830,lindong28,2018-05-20T03:23:32Z,COMMENTED,thanks for the update ! left some minor comments. can you also update upgrade.html to include kip-219 in the `upgrade_200_new_protocols`?,1,0.9601498246192932
121651243,4830,rajinisivaram,2018-05-20T18:27:28Z,COMMENTED,i have started a system test run for this branch: [a link],0,0.9582516551017761
121730418,4830,rajinisivaram,2018-05-21T09:12:10Z,COMMENTED,"there were 9 failures in the system tests, seven of which were quota tests. can you take a look at the quota test failures before committing this pr? the results are here: [a link]",0,0.9916205406188965
459807863,9103,dajac,2020-08-03T09:23:31Z,COMMENTED,"thanks for the pr. i have made a pass over it to understand how the kip works. meanwhile, i have left couple of questions and comments.",1,0.9794653058052063
494594170,9103,rajinisivaram,2020-09-23T12:21:00Z,COMMENTED,"thanks for the pr, reviewed the ssl reload part and left some comments/question.",1,0.8594577312469482
514037726,9103,hachikuji,2020-10-21T18:40:14Z,COMMENTED,left a few more comments. i think we're on the right track.,0,0.9388881325721741
518891546,9103,hachikuji,2020-10-28T18:15:44Z,COMMENTED,thanks for the updates. left some more comments.,1,0.7672580480575562
522114613,9103,hachikuji,2020-11-03T05:35:55Z,COMMENTED,a few more comments. i submitted [a link] with many of these changes to try and speed this up.,0,0.9644357562065125
522845958,9103,hachikuji,2020-11-03T20:47:05Z,COMMENTED,thanks for the updates. hopefully these are the last comments and we can merge.,1,0.8777191042900085
523669575,9103,hachikuji,2020-11-04T19:26:38Z,APPROVED,lgtm once the build is stable. thanks for the patch!,1,0.9709209203720093
158781361,5693,mjsax,2018-09-25T23:33:37Z,COMMENTED,thanks for the pr. some comments/questions.,1,0.9054924845695496
159139153,5693,bbejeck,2018-09-26T19:56:56Z,COMMENTED,"i made a pass, i'll probably need to make another one to make sure i fully understand the pr. with some of the questions raised over performance, i'm thinking we'll need some system tests, but those should probably go on a follow on pr.",0,0.9686791300773621
159483795,5693,bbejeck,2018-09-27T14:50:13Z,COMMENTED,"i took another pass, and it looks good to me. i have a couple of comments regarding test coverage.",1,0.9334930777549744
159582838,5693,bbejeck,2018-09-27T18:53:30Z,COMMENTED,"thanks for the updates, this looks good to me. i have just one minor comment.",1,0.990500807762146
159611838,5693,bbejeck,2018-09-27T19:47:03Z,APPROVED,"thanks , lgtm pending tests passing.",1,0.9352707266807556
159978872,5693,guozhangwang,2018-09-28T20:55:05Z,COMMENTED,made a pass over the code (good job on the added unit tests!) one meta comment is around reusing a couple of classes to avoid duplicated code if possible. the rest of them are mostly minor.,1,0.7867385745048523
160151744,5693,mjsax,2018-10-01T05:40:59Z,COMMENTED,did not review the tests yet...,0,0.9644894003868103
160531208,5693,mjsax,2018-10-02T00:47:19Z,COMMENTED,some more comments. will move to the tests now.,0,0.9878647923469543
160557720,5693,mjsax,2018-10-02T03:34:58Z,APPROVED,lgtm.,0,0.9689368009567261
172229267,5821,lindong28,2018-11-07T00:59:51Z,COMMENTED,thanks for the patch! left some comments below.,1,0.9538769125938416
173688078,5821,lindong28,2018-11-11T10:39:09Z,COMMENTED,thanks for the update! left some more comments below.,1,0.9562848210334778
173776758,5821,lindong28,2018-11-12T08:17:12Z,COMMENTED,thanks for the update. looks good overall. left a few more minor comments. can you rebase the patch onto trunk?,1,0.9933526515960693
174630169,5821,junrao,2018-11-16T02:33:25Z,COMMENTED,: thanks for the patch. left a few comments below.,1,0.8797298073768616
180079885,5821,junrao,2018-11-30T02:25:13Z,COMMENTED,: thanks for the update patch. just a few more minor comments below.,1,0.9128538966178894
180464308,5821,junrao,2018-11-30T22:05:05Z,APPROVED,: thanks for the rebase. lgtm. just a couple of minor comments below.,1,0.9874366521835327
180622044,5821,junrao,2018-12-03T05:57:55Z,APPROVED,: thanks for the latest patch. lgtm. also note that broker epoch can potentially be used to improve kafka-6029 as well.,1,0.9702758193016052
144075119,5428,bbejeck,2018-08-07T19:32:16Z,COMMENTED,"i made a pass over the pr, mostly just minor comments.",0,0.9615613222122192
145283902,5428,vvcephei,2018-08-10T18:18:14Z,COMMENTED,"hey , this looks really good. i had a few questions and comments.",1,0.9848700761795044
146905851,5428,bbejeck,2018-08-16T18:31:11Z,COMMENTED,just a couple of nit and one minor question otherwise looks good to me,1,0.9864107966423035
148681869,5428,mjsax,2018-08-22T23:01:19Z,COMMENTED,"i did not go over the tests yet... but with regard to my comments, i am wondering if we should add more tests to check the behavior we want in a tighter fashion?",0,0.9239482283592224
151488843,5428,bbejeck,2018-08-31T17:39:10Z,APPROVED,"i took another pass and lgtm. i do have one meta-comment that is may be out of scope for this pr but i wanted to get my thoughts out. in `maybecommitperuserrequested` we only execute a user requested commit if, in fact, it's time to commit. so to me, the window for doing a user requested commit is very small. i realize in the docs we state that calling `commit()` is more of a suggestion (to me this is analogous to calling `runtime.gc()` in a java program, it's just a hint no guarantee it will get executed). i think in most cases the timing difference will be negligible and will go unnoticed by most users. but i think it's possible to have a situation where a user sets a long commit interval but thinks that she can call `commit()` intermittently between scheduled commits. should we update the docs to be more explicit on how we handle user requested commits?",0,0.8657286763191223
153048413,5428,mjsax,2018-09-06T19:02:46Z,COMMENTED,"some more comments. (did not review the test again, yet).",0,0.9760230779647827
153880759,5428,vvcephei,2018-09-10T17:28:16Z,APPROVED,"this lgtm now (aside from the test results), thanks .",1,0.7569624781608582
154054784,5428,mjsax,2018-09-11T05:51:52Z,APPROVED,some clarification question. overall lgtm. feel free to merge after addressed.,1,0.593623161315918
29342778,2743,junrao,2017-03-28T03:49:31Z,COMMENTED,: thanks for the patch. some quick comments.,1,0.9607819318771362
30307975,2743,junrao,2017-04-01T01:02:59Z,COMMENTED,: make a pass of the non-test files. the following are the comments.,0,0.9914531707763672
30406567,2743,junrao,2017-04-02T22:31:57Z,COMMENTED,: thanks for the patch. some more comments (mostly on tests).,1,0.8348946571350098
30657555,2743,junrao,2017-04-03T23:30:48Z,COMMENTED,: thanks for the updated patch. made another pass and left some more comments (mostly minor).,1,0.7604018449783325
2512345700,18240,jsancio,2024-12-18T16:53:03Z,COMMENTED,thank . here is a partial review.,1,0.9353429079055786
2522173728,18240,jsancio,2024-12-24T21:07:03Z,COMMENTED,thanks for the changes . quick review of the changes to `**/src/main`.,1,0.8769617080688477
2525645488,18240,jsancio,2024-12-30T17:20:36Z,COMMENTED,review to reply to your comments.,0,0.9705946445465088
2525962559,18240,jsancio,2025-01-01T21:09:54Z,COMMENTED,reviewed the changes to `src/main`.,0,0.9929759502410889
2527697037,18240,jsancio,2025-01-02T17:33:33Z,COMMENTED,quick feedback.,1,0.8340792059898376
2553185476,18240,jsancio,2025-01-15T19:55:37Z,COMMENTED,thanks . i reviewed all of `src/test` except for `quorumstatetest`.,1,0.97163987159729
2554454865,18240,jsancio,2025-01-16T01:07:57Z,COMMENTED,some minor suggestions.,0,0.9757689833641052
2556443601,18240,jsancio,2025-01-16T16:40:32Z,COMMENTED,thanks for the improvements to the quorum state tests!,1,0.9619790315628052
2559157339,18240,jsancio,2025-01-17T14:26:56Z,APPROVED,lgtm. the test failures seem unrelated.,0,0.6051751971244812
13025476,2244,mjsax,2016-12-15T00:16:09Z,COMMENTED,this is a partial review -- it's a huge pr. will continue tomorrow.,-1,0.8795005679130554
13233828,2244,mjsax,2016-12-16T00:00:19Z,COMMENTED,some more comments... still not completed.,0,0.7281010746955872
15180182,2244,mjsax,2017-01-05T01:02:10Z,COMMENTED,i have some doubts about the implemented join semantics -- i think we should compute results differently. see inline comments for more details. we can also discuss in person if required -- hard to explain what i mean in pr comments.,0,0.5743597745895386
15836925,2244,guozhangwang,2017-01-10T02:10:02Z,COMMENTED,left a couple comments mainly on code hierarchies.,0,0.9653319120407104
12974731,2074,hachikuji,2016-12-14T19:05:46Z,COMMENTED,thanks for the patch. left a few comments.,1,0.9350433945655823
16283627,2074,hachikuji,2017-01-12T04:24:04Z,COMMENTED,left mostly minor comments. one thing i'm not too sure about is the `getpartitions` api on `groupcoordinator`. would be nice if we didn't need it.,0,0.9010037779808044
16509782,2074,hachikuji,2017-01-13T06:22:54Z,COMMENTED,"this is getting close, but i think there's still a problem with the handler logic in `kafkaapis`.",0,0.7247374057769775
16680784,2074,hachikuji,2017-01-14T00:56:29Z,APPROVED,lgtm. thanks for being so responsive throughout the review iterations!,1,0.9853253960609436
62529366,3849,becketqin,2017-09-14T03:59:35Z,COMMENTED,thanks for the patch. left some comments.,1,0.8521996140480042
63861611,3849,becketqin,2017-09-20T05:08:45Z,COMMENTED,thanks for updating the patch. made a pass on the non-test file and left some comments. will review the tests tomorrow. we may need to have some quick turnaround to get this into 1.0.0.,1,0.7129614353179932
64162004,3849,becketqin,2017-09-21T02:21:08Z,COMMENTED,"thanks for updating the batch. a few comments: 1. for a batch that is got expired prematurely, we should not reqenqueu the batch. (as noticed) and we should not double deallocate the memory. 2. there are a few review comments before that are not addressed yet. (such as unused local variables) 3. we may want to revisit some of the tests and see if they still make sense. 4. it would be good to add more unit tests to the patch. more specifically, we may want to have the following tests: * test a batch is correctly inserted into the in.flight.batches if needed. and not inserted if not needed. * test the callback of an expired batch is fired in time when it is in-flight/not in-flight * test when expire an in-flight batch, we still wait for the request to finish before sending the next batch. * test we are not going to retry an already expired batch. * test when batch is expired prematurely, the buffer pool is only deallocated after the response is returned. (because we are still holding the batch until the response is returned)",0,0.5524025559425354
64432679,3849,hachikuji,2017-09-21T22:46:52Z,COMMENTED,thanks for the patch. left a few comments/questions.,1,0.9291055798530579
64694224,3849,hachikuji,2017-09-22T22:31:36Z,COMMENTED,a few more comments. note that there are some failing test cases as well.,0,0.9798215627670288
64731171,3849,becketqin,2017-09-23T05:47:06Z,COMMENTED,thanks for the update. made another pass and left some comments.,1,0.8172896504402161
65017323,3849,becketqin,2017-09-25T22:54:04Z,COMMENTED,thanks for updating the patch. i think it is closed to be merged. just a few more comments.,1,0.9362490773200989
77303727,3849,becketqin,2017-11-17T00:19:02Z,COMMENTED,talked to and we agreed that had a point that we can just use the same way we track accumulated batches. that seems make the code cleaner. will wait for sumant to update patch to implement that.,0,0.9824700355529785
86559586,3849,becketqin,2018-01-04T08:55:22Z,COMMENTED,thanks for updating the patch. left some comments.,1,0.718798041343689
4731607,1336,hachikuji,2016-10-18T19:48:20Z,COMMENTED,sorry for leaving this hanging for so long. did another pass and have some mostly minor suggestions.,-1,0.9931672215461731
5133669,1336,hachikuji,2016-10-20T20:14:33Z,COMMENTED,few more nitpicks. i think it's getting close.,-1,0.5501520037651062
5312212,1336,hachikuji,2016-10-21T20:17:12Z,COMMENTED,thanks for all the effort and patience! one final question and a tiny nitpick and i think this is looking good.,1,0.994839608669281
29883718,2744,junrao,2017-03-30T01:50:08Z,COMMENTED,: thanks for the patch. made a pass and left some comments below.,1,0.7634732127189636
30124150,2744,junrao,2017-03-30T22:08:33Z,COMMENTED,: thanks for the updated patch. a few more comments.,1,0.8383483290672302
31341422,2744,ijuma,2017-04-06T15:21:35Z,COMMENTED,thanks for the pr. i left a few questions and comments.,1,0.9619600176811218
33922268,2744,junrao,2017-04-21T03:59:50Z,COMMENTED,": thanks for the patch. left a few more comments. could you rebase? also, [a link] seems to indicate that nanotime is a scalability bottleneck. could you run the perf test with multiple producer/consumer instances?",1,0.8200223445892334
34140325,2744,junrao,2017-04-21T23:23:19Z,COMMENTED,: thanks for the new patch. made another pass and left some more comments.,1,0.8634525537490845
34323451,2744,junrao,2017-04-24T15:03:16Z,COMMENTED,": thanks for the updated patch. a few more followup comments. also, (1) could you run perf test with a really high request throttling value and see if there is no degradation? (2) could you run our system tests?",1,0.8287532329559326
34997419,2744,junrao,2017-04-27T16:04:53Z,COMMENTED,": thanks for the updated patch. left a few more more comments. also, could you rebase?",1,0.9014582633972168
517237723,9487,wcarlson5,2020-10-26T23:12:39Z,COMMENTED,"this is ready for review , , can you take a look at it?",0,0.851420521736145
522911183,9487,vvcephei,2020-11-03T23:25:16Z,COMMENTED,"thanks for the pr, ! i made a first pass.",1,0.9831421375274658
523533044,9487,cadonna,2020-11-05T13:21:19Z,COMMENTED,"thank you for the pr, ! here my feedback!",1,0.9918140172958374
529686471,9487,ableegoldman,2020-11-13T05:18:23Z,COMMENTED,sorry it took me so long to get through the entire pr! had a few high-level questions but mostly minor stuff,-1,0.9932947754859924
530163463,9487,cadonna,2020-11-13T16:01:18Z,COMMENTED,i haven't finish my review but i wanted to share my comments so far before the weekend.,0,0.7586654424667358
530218086,9487,wcarlson5,2020-11-13T23:52:09Z,COMMENTED,"thanks for the comments and . i think i got to all of them, though i left some clarification questions as well",1,0.9685806632041931
531540984,9487,vvcephei,2020-11-16T18:21:30Z,COMMENTED,thanks . just a few more comments to pile onto the conversation ;),1,0.994147539138794
533094235,9487,ableegoldman,2020-11-18T04:22:28Z,APPROVED,"alright this is looking good, just waiting on the pr build to merge at last. thanks for the pr! i think once we fix up the fsm things will be in good shape.",1,0.9934684038162231
706073770,10851,cadonna,2021-07-14T10:54:59Z,COMMENTED,thank you for the pr! i did a first pass. here is my feedback.,1,0.9908372163772583
707150891,10851,cadonna,2021-07-15T10:26:59Z,COMMENTED,thank you for the updates! here my next round of feedback!,1,0.9799213409423828
726158331,10851,cadonna,2021-08-10T10:12:55Z,COMMENTED,hi ! thank you for your patience! here my feedback.,1,0.9928733110427856
738194160,10851,cadonna,2021-08-25T12:12:13Z,COMMENTED,thanks for the updates ! i did a pass over `clienttagawarestandbytaskassignor`. here my feedback so far.,1,0.9762488007545471
744766745,10851,cadonna,2021-09-02T09:35:05Z,COMMENTED,thank you for the update! i did again a pass over the tag-aware standby assignor. here is my feedback!,1,0.9874774217605591
768890074,10851,cadonna,2021-10-01T13:29:01Z,COMMENTED,thank you for your patience! i reviewed the standby task assignor and had the following feedback.,1,0.9842875003814697
827852256,10851,cadonna,2021-12-09T19:49:44Z,COMMENTED,"hi , sorry for the delay. i looked at the assignment algorithm and found an improvement and an issues.",-1,0.9925963878631592
880852081,10851,showuon,2022-02-12T12:42:11Z,COMMENTED,", i'll keep reviewing it tomorrow. left some comments after my 1st review. thanks.",1,0.9849327206611633
880887385,10851,cadonna,2022-02-12T20:56:37Z,COMMENTED,thank you for the updates! i reviewed the assignment algorithm. next i will start with the unit tests.,1,0.9855402112007141
881249420,10851,showuon,2022-02-14T09:47:15Z,COMMENTED,", i made 2nd pass to the non-testing codes, left some comments. thanks.",1,0.9774882793426514
886962780,10851,showuon,2022-02-18T09:04:09Z,COMMENTED,", thanks for the update. i checked again the `clienttagawarestandbytaskassignor`, and it looks better. left some comments. i'll keep reviewing the rest of the codes in the following days. thanks.",1,0.9916734099388123
887239384,10851,showuon,2022-02-18T13:31:51Z,COMMENTED,left more comments. thanks.,1,0.9727881550788879
887901947,10851,showuon,2022-02-19T12:31:23Z,COMMENTED,", thanks for the update. left some comments. thanks.",1,0.9881032109260559
889253999,10851,showuon,2022-02-22T04:00:29Z,COMMENTED,", thanks for the update. overall lgtm! only one question for partial rack awareness assignment. thanks.",1,0.9947558641433716
890569361,10851,showuon,2022-02-23T03:11:49Z,COMMENTED,thanks for the update in partial rack awareness assignment. lgtm! left some minor comments. thanks.,1,0.9944697618484497
891071369,10851,showuon,2022-02-23T13:32:24Z,COMMENTED,thanks for the update. i'll check the test code tomorrow.,0,0.5621660947799683
892039294,10851,showuon,2022-02-24T06:48:46Z,APPROVED,lgtm! thanks for the improvement!,1,0.994329035282135
897487830,10851,cadonna,2022-03-02T13:14:11Z,APPROVED,"thanks a lot for this pr! sorry for all the delay! lgtm! i had just some minor comments that can be addressed in a follow-up pr. as i pointed out in one of my comments, i am not a big fan of `// visible for testing` because that often indicates some deficiencies in the modularization. but this is nothing that cannot be addressed in a follow-up pr. so i am fine with merging it.",-1,0.9453195929527283
34614409,2910,ijuma,2017-04-25T16:33:07Z,COMMENTED,a few random comments from a quick look. :),1,0.9959554672241211
35252298,2910,junrao,2017-04-29T01:26:30Z,COMMENTED,: thanks for the patch. made a pass on the server side files and left some comments.,1,0.7041929364204407
35920320,2910,junrao,2017-05-04T01:40:41Z,COMMENTED,: thanks for the updated patch. looks good overall. a few more comments. the big remaining items are (1) fencing writetxnmarker based on coordinator epoch; (2) we need to make a decision on whether to use a batch level attribute bit to represent txnendmarker instead of special sequence number.,1,0.9923559427261353
36405657,2910,junrao,2017-05-04T23:45:57Z,COMMENTED,a couple of more comments.,0,0.9603776931762695
36583457,2910,junrao,2017-05-05T20:45:40Z,COMMENTED,: thanks for updating the patch. a few more comments on the latest fix.,1,0.846497654914856
669565212,10579,junrao,2021-05-28T01:23:54Z,COMMENTED,: thanks for the pr. made a pass of non-testing files. a few comments below.,1,0.9803227186203003
673833347,10579,kowshik,2021-06-02T08:15:15Z,COMMENTED,thanks for the pr. i've made a pass on non-test code. some comments below.,1,0.9848037958145142
695283387,10579,junrao,2021-06-30T18:10:05Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
700367031,10579,junrao,2021-07-06T22:33:01Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
707813984,10579,junrao,2021-07-15T21:49:42Z,COMMENTED,: thanks for the updated pr. just a few more comments.,1,0.959556519985199
708562144,10579,junrao,2021-07-16T16:30:28Z,COMMENTED,: thanks for the updated pr. a couple of more comments.,1,0.9588996767997742
708737322,10579,junrao,2021-07-16T20:46:37Z,COMMENTED,: thanks for the reply. one more comment below.,1,0.8075608611106873
709727489,10579,junrao,2021-07-19T16:03:51Z,APPROVED,: thanks for the updated pr. lgtm,1,0.8783431053161621
47368747,3325,dguy,2017-06-30T13:41:36Z,COMMENTED,thanks i've made a first pass. i think we probably need some tests added to `storechangelogreadertest` to make sure the listeners get called etc. also we need some tests for the `compositerestorelistener`,1,0.7376810312271118
50895250,3325,dguy,2017-07-19T14:10:28Z,COMMENTED,"thanks . i've left a few minor comments. would be good to get a review from someone else, too",1,0.9902614951133728
51343272,3325,guozhangwang,2017-07-20T23:36:35Z,CHANGES_REQUESTED,"thanks for the patch. made a pass over the non-test code and browse through the tests. i have two meta comments besides the detailed comments below: 1. moving forward could we try to avoid large prs with over 1000 loc but instead submit multiple smaller prs with each one trying to be no more than a few hundreds? it will help reviewing to be easier, and help the pr submitter to think about the implementation in a step-wise manner that better layered the architecture. 2) there are a few additional classes seem to be for concentrating some computing logic together for the ease of read, but i felt some of them a bit ""overkill"" plus for each set classes we need a separate unit test class.",1,0.9759572148323059
51517235,3325,mjsax,2017-07-21T16:22:10Z,COMMENTED,did just a high level pass for now as there are already many comments.,0,0.986501157283783
52398187,3325,mjsax,2017-07-26T16:35:52Z,COMMENTED,some more comments...,0,0.9193235635757446
52791382,3325,guozhangwang,2017-07-27T21:42:39Z,COMMENTED,some more minor comments about code styles.,0,0.9207137227058411
606850474,10218,junrao,2021-03-09T04:49:26Z,COMMENTED,: thanks for the pr. a couple of quick comments.,1,0.9908249974250793
608040593,10218,junrao,2021-03-10T04:44:11Z,COMMENTED,: thanks for the pr. a few more comments below.,1,0.9666810631752014
609209732,10218,kowshik,2021-03-11T02:40:33Z,COMMENTED,thanks for the pr! few comments below.,1,0.9874535799026489
612423634,10218,junrao,2021-03-15T18:24:56Z,COMMENTED,: thanks for the updated pr. a few more comments below.,1,0.9159396886825562
613662374,10218,kowshik,2021-03-16T20:22:13Z,COMMENTED,thanks for the updated pr! few more comments below.,1,0.9831889867782593
617842236,10218,kowshik,2021-03-22T19:54:10Z,COMMENTED,"thanks for the updates! few more comments below, this time i made a pass on some of the test code as well.",1,0.9832163453102112
627143872,10218,junrao,2021-04-05T18:43:27Z,COMMENTED,: thanks for the updated pr. a few more comments below.,1,0.9159396886825562
629119208,10218,kowshik,2021-04-06T16:59:15Z,COMMENTED,thanks for the update pr. just few minor comments in this pass.,1,0.9814454913139343
630611812,10218,junrao,2021-04-07T22:24:43Z,COMMENTED,: thanks for the updated pr. a few more comments below.,1,0.9159396886825562
631605408,10218,junrao,2021-04-08T16:46:12Z,COMMENTED,: thanks for the updated pr. a few more comments.,1,0.9513056874275208
631981864,10218,kowshik,2021-04-09T02:53:33Z,COMMENTED,thanks for the updated pr! few more comments.,1,0.9859543442726135
632660970,10218,junrao,2021-04-09T17:54:28Z,COMMENTED,: thanks for the updated pr. just a minor comment below.,1,0.9572418332099915
633035863,10218,junrao,2021-04-11T17:23:55Z,APPROVED,: thanks for the updated pr. lgtm. i will see if kowshik has any further comments.,1,0.8625247478485107
633070529,10218,kowshik,2021-04-12T00:45:53Z,APPROVED,: thanks for the updated pr. just a minor comment below. let us wait for ci to pass before merge.,1,0.9656635522842407
1643082915,14432,dajac,2023-09-25T22:42:58Z,COMMENTED,"thanks for the pr. i had a quick look at it and i have a few high level comments: * i don't mind doing a few small prs at all. * the title of the pr is a bit confusing because the member does not send a leavegroup request. * i think that we need to keep the -2 epoch. i think that it could be useful in the future if we want to extend the consumer to have the ability to chose whether it wants to leave forever or temporarily. * ignoring the ""leave request"" is not enough. if you look at the other side, we need to know whether the member has released the instance id or not. we could perhaps capture this by updating the member epoch to -2 or something like that.",1,0.9506221413612366
1647077548,14432,kirktrue,2023-09-27T16:10:11Z,CHANGES_REQUESTED,"thanks for the pr, ! just a couple of minor changes, mostly around error and log messages.",1,0.9930003881454468
1661817899,14432,dajac,2023-10-06T15:43:35Z,COMMENTED,"thanks for pr! i just made a first pass on it and i left some comments. i don't have a clear picture of the end state yet so i need a bit more time to think about it. however, my first comments are still valid, i think.",1,0.9882735013961792
1682342687,14432,dajac,2023-10-17T14:25:09Z,COMMENTED,thanks for the update. i left a few more comments.,1,0.9137150645256042
1706255086,14432,dajac,2023-10-31T13:54:18Z,COMMENTED,thanks for the last update. i just made a pass on it and left a few more comments. i think that we are almost there!,1,0.9913036823272705
1736519315,14432,dajac,2023-11-17T14:20:49Z,COMMENTED,"thanks for the update and your patience on this one! we're almost there, i think. i left some more comments for consideration.",1,0.9880654811859131
1747458594,14432,dajac,2023-11-24T10:09:09Z,COMMENTED,thanks for the update! i reviewed the entire pr and it looks pretty good. i think that i have one major questions around the `targetassignmentbuilder` changes where i think that it is not quite right. all the other are small comments/nits.,1,0.994367778301239
1749926783,14432,dajac,2023-11-27T08:55:10Z,APPROVED,"lgtm, thanks !",1,0.9912070631980896
1634860112,14408,dajac,2023-09-20T07:42:01Z,COMMENTED,thanks for the pr! i just skimmed through it without looking at all the details and i left a few high level comments for consideration.,1,0.9918495416641235
1637158891,14408,dajac,2023-09-21T08:42:15Z,COMMENTED,thanks for the update. i reviewed all the non-test files and i left some comments for consideration.,1,0.9276627898216248
1638630339,14408,jeffkbkim,2023-09-21T21:31:24Z,COMMENTED,thanks for the pr! left some comments.,1,0.9877927899360657
1642924094,14408,jeffkbkim,2023-09-25T23:10:11Z,COMMENTED,took a look at the tests,0,0.9678829908370972
1649780129,14408,dajac,2023-09-28T23:53:48Z,COMMENTED,thanks for the update. i left some comments for consideration.,1,0.7958623766899109
1652604842,14408,dajac,2023-10-02T12:53:04Z,COMMENTED,thanks for the update. i left a few more comments.,1,0.9137150645256042
1655325413,14408,dajac,2023-10-03T14:21:27Z,COMMENTED,thanks for the update. i left a few more comments.,1,0.9137150645256042
1657082412,14408,dajac,2023-10-04T09:27:26Z,APPROVED,"lgtm, thanks.",1,0.8991513252258301
466061843,9100,hachikuji,2020-08-12T17:35:18Z,COMMENTED,thanks. left a few comments. i haven't looked closely at the controller logic yet.,1,0.9864218235015869
492864509,9100,hachikuji,2020-09-21T18:13:07Z,COMMENTED,"one additional thought occurred to me. after the controller receives an alterisr request and updates the partition state, i think we need to call `onpartitionreassignment` to see if there is a pending reassignment which can be completed.",0,0.9869995713233948
496010380,9100,hachikuji,2020-09-24T23:23:24Z,APPROVED,lgtm. i left a few more nits which can be saved for a follow-up.,0,0.9603962302207947
33632832,2472,ijuma,2017-04-19T22:35:43Z,COMMENTED,thanks for the pr. some initial comments. more to follow.,1,0.9837692379951477
33759137,2472,ijuma,2017-04-20T13:34:18Z,COMMENTED,a few more comments. more to come.,0,0.9266915917396545
33986549,2472,ijuma,2017-04-28T16:08:57Z,COMMENTED,"thanks for the updates, a few more comments. also, it would be good to rebase against trunk as it's been a while.",1,0.9685691595077515
35670433,2472,ijuma,2017-05-01T23:14:58Z,APPROVED,"lgtm, merging to trunk.",0,0.9904311299324036
369222057,8218,guozhangwang,2020-03-05T00:30:01Z,COMMENTED,"i'm still in the middle of reviewing this pr, just left a meta question here: previously the commit ordering is 1) flush store, flush producer 2) commit offset 3) write checkpoint file now it becomes 1/3/2. it means if we have a crash between 2 and 3, in the past we would likely read from an old checkpointed offset and replay the changelogs, which is fine with or without eos (with eos we would just read committed data still so it is safe). but now if we crash between 3 and 2, it means the checkpoint file has been written, but the offsets are not committed yet, which means we could potentially lose some data. right?",0,0.9805871248245239
369184653,8218,abbccdda,2020-03-05T01:26:29Z,CHANGES_REQUESTED,"thanks for the pr, left some comments",1,0.9460494518280029
373798405,8218,guozhangwang,2020-03-12T19:43:03Z,COMMENTED,"this is also a meta comment: i'm trying to think of a way where we do not need to mess the hierarchy of task / task-manager classes which are just cleaned. one wild thought following my previous comment, with the goal to avoid all of those `prepare` `post` ordering etc, is to abstract this logic away from the task / task-manager and handle inside the record-collector. in other words, the task still follow the same pattern as in today's trunk, e.g. in `commitstate`, calling `recordcollector.commit(consumedoffsetsandmetadata);`. however, the recordcollector does not call the corresponding committxn immediately but wait until all expected `commit` calls as been triggered and then call the function with the aggregated offset map. more specifically: 1. we let the txn-manager to keep a reference to the shared record-collector. 2. we add a ""pre-commit"" function inside record-collector which passed in the set of expected tasks (or partitions?) to be committed; and then when `commit` is called, if there is no set of expected tasks set, record-collector would trigger immediately, otherwise, wait until all the expected elements have been passed in, and then trigger. 3. in these scenarios: 3.a) suspend: although we may only suspend a subset of tasks, we'd still have to commit all tasks under eos-beta, so we just call `record-collector.precommit` with all the tasks, and then forloop task.suspend. 3.b) commit: we would have to commit all tasks, so we just call `record-collector.precommit` with all the tasks, and then forloop task.commit. 3.c) closeclean: no matter what task(s) we are closing, we need to committing for all, so the same as above. 3.d) closedirty: we do not need to commit at all, so we do not need to call `record-collector.precommit` since we know its `commit` function would not be triggered. i admit it is not ideal since we are sort of poking a hole inside record-collector to be tasks-aware, but it saves all the code changes we'd have to introduce in task and most of the task-manager messiness. sorry for going back and forth on the high-level code design here, i know changing 1000+ loc is not a easy job... but i just want to make sure we introduce as less tech complexity in our code base as possible to achieve the same thing.",0,0.9857745170593262
374035666,8218,guozhangwang,2020-03-13T04:30:56Z,COMMENTED,"i made another look at the pr, and here's another proposal for reducing the added task apis: 1) we still make all the state-transition functions plus the commit call to be state-dependent, and not leak to the task-manager. more specifically: 1.a) preparecommit: should include `statemgr.flush()` as long as state is not created / suspended; should include `recordcollector.flush()` if state is running. the function should return the map of offsets that should be committed. if pre-commit is a no-op based on the state, then it returns an empty map. 1.b) postcommit: if state is running then we should `statemgr.checkpoint(checkpointableoffsets())` if `eosdisabled`; if it is restoring or created or we always blindly `statemgr.checkpoint(emptymap())`; in other states we do nothing. 1.c) commit: take the aggregated map from the pre-commit on tasks, make the call on consumer or producer, and capture the exceptions and handle accordingly (see below). 2. we extract the decision of whether we should commit (including pre and post) during suspend / close out of the task, into task-manager. in fact, we always try to commit all tasks when suspending / closing any tasks. 2.a) for suspending, inside task-manager we first trigger “suspend” for those tasks taht are decided for suspension. the function would close topology / clear partition-group depending on the state of the task. and then we trigger the commit procedure for all tasks. according to 1) above, for those already-suspended / created tasks, pre-commit would be no-op and return nothing, and hence effectively they would not be included for committing; if everyone returns empty in pre-commit, i.e. the aggregated map is also empty, we can skip the committing call, but we do not skip the post-commit since even if we do not commit offsets, we may still want to write checkpoint files. if commit fails, we would skip the `post-commit` call and the thrown exception would be handled at the thread-level (either handleable task-migrated, or fatal streams exception). with that we can save pre-suspend. 2.b) for closing, it is the most tricky one, as we need to depend on the “clean” flag. the key point is that, post-447 if one task is being closed dirty then we’d have to abort the whole txn of the shared thread-producer to make sure the downstream would not read any records of this dirty-closed task (that’s the guaranteed pre-447, which we need to maintain). this is a tradeoff we have to make in 447 but hopefully the close-dirty case is rare and when we close-dirty, we always close-dirty everyone anyways: * when the thread shutdown-dirty due to exception causing it to die * when we handlelostall and: * when close-clean throws, instead of capturing it and immediately close-dirty, post-447 we should just let it to be thrown all the way to thread and let thread shutdown all tasks as dirty, since when it happens, none of the records sent by this producer should be committed. * when handlecorruption, which is only triggered during restoration, we actually do not need to call close-dirty (we originally call it only to trigger the wipe-store function), instead we just hard-code the close-wipe-and-revive logic inside the task manager itself. as a result, when we close dirty, we always close dirty all tasks anyways. so in this case we do not need to commit (including the pre-commit which flushes state stores and record collectors) and just trigger `close(dirty)` on each task which would, depending on the state, call `closetopology`, `closestatemanager` (which would flush the stores while closing), `recordcollector.close`, `partitiongroup.close`, `closesensor.record`, `wipestore-if-eos` respectively and swallow any exceptions thrown. then if it is eos-beta we let the producer to abort the txn; if it is eos-alpha only the corresponding task-producers would abort txn and close. on the other hand, if we are going to close-clean any task(s), then we still need to commit all tasks. we would trigger a `suspend` first which would, depending on the state, call `closetopology` or do nothing, and then we proceed with the commit procedure -- and if it throws, we skip the rest and just let the thread handles it by closing dirty -- and finally we call `close(clean)` and if it throws then we still let thread handles it. with that we can save pre-close. 2.c) when committing, again we always commit all tasks, and we just follow the pre/commit/post procedure here, which would execute correspondingly based on the states (for some tasks it would be no-op, again). 2.d) resuming is a dummy transition so nothing changes.",0,0.9875046610832214
375356110,8218,abbccdda,2020-03-16T17:38:37Z,COMMENTED,"thanks for the update, just a couple of minor comments. overall i think we are good",1,0.991122841835022
375610780,8218,guozhangwang,2020-03-16T21:59:23Z,COMMENTED,"mentioned some of the system test failures are consistent in trunk, just fyi.",0,0.9824113249778748
375614304,8218,guozhangwang,2020-03-17T00:52:25Z,COMMENTED,i've made a thorough pass over the non-testing code now. there are a couple of places regarding the committing which maybe the reason that system tests fails / unit tests flaky.,0,0.9477472901344299
376323985,8218,guozhangwang,2020-03-17T19:25:53Z,COMMENTED,made a pass on the testing part.,0,0.9850622415542603
310628374,7629,JimGalasyn,2019-11-01T18:38:26Z,APPROVED,"lgtm, with some copy edits.",0,0.9865801930427551
310603917,7629,mjsax,2019-11-01T19:00:39Z,COMMENTED,thanks for the pr -- this closes an important open gap in the docs!,1,0.9646755456924438
312024258,7629,ableegoldman,2019-11-05T23:46:10Z,COMMENTED,"thanks bill! it's looking good, just a few more minor things (all the inlined suggestions are ""required"" level comments, mostly grammar or typo fixes)",1,0.9958413243293762
314510688,7629,ableegoldman,2019-11-08T23:42:24Z,APPROVED,"left a few suggestions for that one sentence i'm finding confusing, but i'll leave it up to you how to deal with it -- otherwise lgtm",-1,0.6313700079917908
314592264,7629,mjsax,2019-11-10T06:37:42Z,APPROVED,did you setup a local webserver to render the docs? seems there is some missing html markup to the the desired rendering? please address the comments about wording. feel free to merge afterwards.,0,0.9863428473472595
403647643,8589,abbccdda,2020-05-05T19:13:37Z,COMMENTED,"thanks for the pr, left some initial comments.",1,0.9290205836296082
410618562,8589,abbccdda,2020-05-13T15:30:48Z,COMMENTED,"thanks for the update. i could see we are still having a couple of places with style violation, did you properly configure and run checkstyle locally?",0,0.5568410754203796
416273746,8589,abbccdda,2020-05-21T16:42:08Z,COMMENTED,"thanks for the update ! got some more comments, but i think we are getting there :)",1,0.9955008625984192
417019855,8589,abbccdda,2020-05-22T16:21:47Z,COMMENTED,thanks for the update! just a couple of minor comments,1,0.9865021109580994
417251384,8589,abbccdda,2020-05-23T05:11:29Z,COMMENTED,"`[ant:checkstyle] [error] /users/boyang.chen/code/kafka/clients/src/test/java/org/apache/kafka/clients/admin/kafkaadminclienttest.java:184:1: ncss for this class is 1,503 (max allowed is 1,500). [javancss]` check style failed.",0,0.9942954182624817
417286373,8589,abbccdda,2020-05-23T15:19:17Z,APPROVED,"thanks for the update, lgtm!",1,0.9742986559867859
418832123,8589,mjsax,2020-05-27T03:25:58Z,COMMENTED,"overall, lgtm. couple of comments/questions.",0,0.9823966026306152
134149305,5322,vvcephei,2018-07-03T20:27:41Z,COMMENTED,"hi , thanks for the pr! overall, it looks great to me. i just left a few remarks/ideas. -john",1,0.9955654740333557
136392468,5322,guozhangwang,2018-07-11T20:22:08Z,COMMENTED,"this is a meta comment: we should add an integration test for the scenario where we have two instance (one of them will be leader doing the assignment) source topics are not ready, and validate that both instances shutdown gracefully.",0,0.9926809668540955
138048174,5322,mjsax,2018-07-17T23:02:46Z,COMMENTED,did an initial pass,0,0.9672529101371765
138454704,5322,mjsax,2018-07-18T22:52:10Z,COMMENTED,more comments.,0,0.9175251126289368
138772785,5322,mjsax,2018-07-19T20:08:48Z,COMMENTED,i think we still need to fix the `equals()` and `hashcode` methods for `assignmentinfo`,0,0.9902933835983276
1351528029,13391,junrao,2023-03-22T18:56:29Z,COMMENTED,: thanks for the pr. made a pass of non testing files. a few comments below.,1,0.982595682144165
1377849285,13391,junrao,2023-04-10T19:27:25Z,COMMENTED,: thanks for the updated pr. made another pass of non-testing files. a few more comments.,1,0.9802025556564331
1380021933,13391,junrao,2023-04-11T21:10:22Z,COMMENTED,: thanks for the updated pr. just a few minor comments.,1,0.9680233001708984
1380249708,13391,junrao,2023-04-12T00:24:20Z,COMMENTED,": thanks for the reply. just one more comment. also, have you pushed the changes mentioned in the reply?",1,0.8684371709823608
1381714888,13391,junrao,2023-04-12T16:46:03Z,COMMENTED,: thanks for the updated pr. left one comment. but the pr lgtm. just waiting for the tests to pass.,1,0.959886908531189
1382298774,13391,junrao,2023-04-13T00:02:56Z,APPROVED,: thanks for the updated pr. lgtm,1,0.8783431053161621
11712918,1251,cmccabe,2016-12-07T00:34:03Z,CHANGES_REQUESTED,"hi ashish, thanks for working on this!",1,0.9900155663490295
12517029,1251,hachikuji,2016-12-12T22:10:18Z,COMMENTED,thanks for the patch. left a few comments. it seems we should also add support for kafka connect. i think the class you want is `workergroupmember` and it uses the same apis as the consumer aside from the fetch request and the offset apis.,1,0.9720091223716736
12584005,1251,ijuma,2016-12-13T12:18:50Z,COMMENTED,"thanks for the pr once again and sorry for the delay. i left a few comments to complement 's. , it would be good to understand if you are available to address the comments or if we should try to help out.",-1,0.905097246170044
13032819,1251,ijuma,2016-12-14T23:58:59Z,COMMENTED,"thanks for the changes, left a few more comments. i think we are close. we probably want to run the system tests after the comments have been addressed. if everything goes well, we should be able to merge this very soon (maybe tomorrow).",1,0.9636105895042419
36140614,2967,ijuma,2017-05-03T21:14:24Z,COMMENTED,"thanks for the pr, great results! why not include the benchmarks in the jmh-benchmarks module?",1,0.9951645135879517
36224664,2967,ijuma,2017-05-04T10:57:11Z,COMMENTED,i did a first pass and left a few comments.,0,0.9753422737121582
40797196,2967,ijuma,2017-05-29T18:47:12Z,COMMENTED,"sorry for the delay, i finally had a chance to complete my review. i left 4 comments questions in this pr and submitted a separate pr with an alternative to the thread local buffers: [a link] i would normally do the pr with your branch as the target, but because i rebased my branch on trunk (and fixed the merge conflicts), this would not have the desired effect. please take a look at the other pr and we can decide what we should pull into this pr.",-1,0.9890908598899841
36648931,2967,hachikuji,2017-05-30T17:21:30Z,COMMENTED,"thanks for the patch. i didn't look deeply at the changes in `kafkalz4blockinputstream`, but i left a few comments in `abstractlegacyrecordbatch`.",1,0.9516546130180359
41113956,2967,ijuma,2017-05-31T01:17:10Z,APPROVED,"thanks for the pr, this is a huge performance improvement. :)",1,0.9956984519958496
28369642,2719,dguy,2017-03-22T12:40:11Z,COMMENTED,thanks just left a couple of questions,1,0.8946253657341003
30490944,2719,dguy,2017-04-03T11:24:15Z,APPROVED,"thanks , lgtm",1,0.8489435315132141
30623293,2719,mjsax,2017-04-03T20:25:34Z,APPROVED,lgtm,0,0.7242414951324463
685385770,10822,rhauch,2021-06-16T17:21:11Z,COMMENTED,"very nice work, . thanks for this thorough contribution. some comments inline.",1,0.9959482550621033
686469520,10822,rhauch,2021-06-17T16:00:15Z,COMMENTED,"thanks for the updates, . i have a few more comments below.",1,0.9339585900306702
688805399,10822,rhauch,2021-06-21T20:41:37Z,COMMENTED,"thanks for the updates, . looks really good, and almost there. i do have a few more questions/suggestions.",1,0.9934104084968567
688949564,10822,rhauch,2021-06-22T00:04:48Z,COMMENTED,a few more comments. otherwise looks good.,1,0.9275425672531128
686641402,10822,kkonstantine,2021-06-22T06:19:35Z,COMMENTED,"thanks for the clean implementation half way to the end of the review myself, i'm posting in the meantime the first round of comments (stylistic and minor mostly) while i'm focusing on the functional changes and the tests too.",1,0.963279664516449
690678772,10822,rhauch,2021-06-23T13:56:04Z,APPROVED,"lgtm. thanks, , for the extra effort on this feature. i couldn't comment directly on [a link], but i'm fine with using `shouldrestarttasks()` if thinks it's more consistent.",1,0.9725170135498047
694582981,10822,kkonstantine,2021-06-29T06:41:50Z,COMMENTED,thanks for addressing the comments i also like that you included system tests as well as its. i think we are close. will check the its a bit more but i think these are the comments i have mostly.,1,0.9789218902587891
696790998,10822,kkonstantine,2021-07-01T04:06:20Z,APPROVED,nice work . thanks for the extensive test coverage. lgtm,1,0.9952972531318665
2022090350,15640,cadonna,2024-04-25T11:47:52Z,COMMENTED,thanks for the pr ! i made a first pass. here is my feedback.,1,0.9911379218101501
2024632959,15640,cadonna,2024-04-26T11:36:00Z,COMMENTED,"thanks for the updates and the explanations, ! i made a second pass and had some comments. could you have a look at this pr since you are more familiar withe the code than me. i want to ensure that i did not miss anything important. here i have a comment, i could not put at the right location in the code: on line 1362, in `commitsync()` the consumer waits on the `commitfuture` with a timer. i think, it should not wait on a timer there since we already wait on a timer in the background thread.",1,0.962529718875885
2031976848,15640,philipnee,2024-04-30T21:36:25Z,COMMENTED,hi - i left some minor comments.,0,0.9096102118492126
2035910325,15640,cadonna,2024-05-02T15:38:37Z,COMMENTED,thanks for the updates ! here my feedback on the production code. next i will look at the test code.,1,0.970127284526825
2037790307,15640,cadonna,2024-05-03T11:20:01Z,COMMENTED,"thanks for the updates, ! i finally was able to go over the test code.",1,0.9741787910461426
2057631572,15640,cadonna,2024-05-15T11:12:36Z,COMMENTED,"thanks for the updates, ! here my comments!",1,0.9814320802688599
2068146827,15640,cadonna,2024-05-21T10:10:20Z,APPROVED,"thanks for the updates, ! as far as i understand from the discussion, and you have a plan for the follow-up prs. so this pr can be merged. i just have two minor questions about the tests. you know best if you want to consider my comments.",1,0.9907297492027283
2070245473,15640,cadonna,2024-05-22T06:33:52Z,APPROVED,"thanks for the updates, ! once approves, i will merge the pr,",1,0.9921911358833313
2071697386,15640,lianetm,2024-05-22T15:57:36Z,APPROVED,"thanks for your patience and great effort here , lgtm to merge and move on with the follow ups. just to recap, this is what i see should be address next related to timeout enforcement: 1. [a link] 2. [a link] 3. [a link] also please let's have a jira to address [a link] comment to remove the test we agreed brings no value. thanks again! cc.",1,0.994802713394165
