id,pr_number,user,created_at,body
1065964439,11695,zuiderkwast,2023-01-10T16:01:18Z,Add a short documentation comment for each of these added functions (and possibly for the group of functions for iterating over dicts in a db). It makes reviewing easier too.
1065970620,11695,zuiderkwast,2023-01-10T16:06:57Z,"For dbRandomKey (used by RANDOMKEY and RM_RandomKey), I think it's important to try to return a more fair random key. That's why dictGetFairRandomKey was used in the first place. It samples 15 buckets to compensate for the different sizes of the buckets. Perhaps we can do something similar, e.g. sample 15 slots and select a weighted random slot of these based on the number of keys in each of them?

```C
/* This is like dictGetRandomKey() from the POV of the API, but will do more
 * work to ensure a better distribution of the returned element.
 *
 * This function improves the distribution because the dictGetRandomKey()
 * problem is that it selects a random bucket, then it selects a random
 * element from the chain in the bucket. However elements being in different
 * chain lengths will have different probabilities of being reported. With
 * this function instead what we do is to consider a ""linear"" range of the table
 * that may be constituted of N buckets with chains of different lengths
 * appearing one after the other. Then we report a random element in the range.
 * In this way we smooth away the problem of different chain lengths. */
#define GETFAIR_NUM_ENTRIES 15
dictEntry *dictGetFairRandomKey(dict *d) {
```"
1065975522,11695,zuiderkwast,2023-01-10T16:11:21Z,"Is this more efficient, or why this change?"
1065981207,11695,zuiderkwast,2023-01-10T16:16:24Z,Isn't this prototype is in server.h and therefore already available here?
1066003182,11695,zuiderkwast,2023-01-10T16:32:48Z,"This creates an array of *dict pointers*. Why not create an array of *dicts* in a single allocation? Then we can avoid one extra memory hop when accessing a dict and the pointer in redisDb struct can remain a `dict *` instead of changing it to `dict **`. Each dict is then accessed as `&db->dict[slot]` (or just `db->dict` for slot 0).

```C
    dict *d = zmalloc(sizeof(dict) * count);
    for (int i = 0; i < count; i++) {
        _dictInit(&d[i], type);
    }
```"
1066009746,11695,zuiderkwast,2023-01-10T16:37:34Z,"Add this prototype to server.h instead? (if it's not already added there, I didn't check)"
1066021504,11695,zuiderkwast,2023-01-10T16:46:17Z,"Is 48 bits guaranteed to be enough for a single dict cursor? Is there any hard limit in redis for the number of keys?

Not that it matters that much but I believe we get huge cursors with this scheme and that we get smaller cursors if we use the 14 LSB for the slot and shift the dict cursor by 14 bits. IIRC, the dict cursor is always small for small dicts."
1066153736,11695,vitarb,2023-01-10T18:28:34Z,"I've initially done it as an array, but after discussion with @madolson we've decided that dict** is cleaner as it provides better static error checking. With dict*, there is a chance you could accidentally pass an array where specific dict is expected and dict[0] will be used instead of the slot specific dict. In fact I've done this error couple times myself and corrected it only after changing the type to dict**."
1066159989,11695,vitarb,2023-01-10T18:33:27Z,"I think 48 bits should be enough, it's 2^16 times more than advertised max number of keys that Redis can hold. I like your suggestion of using LSB for slot instead of the cursor, it should indeed result in smaller nominal cursor values as bits will be shifted by 14 instead of 48 and cursor values are usually not that big."
1066162849,11695,vitarb,2023-01-10T18:35:50Z,"You are right, this must be some junk left during refactoring. Removed."
1066164553,11695,vitarb,2023-01-10T18:37:14Z,"Yes, this actually gives 1ms of time, while older implementation was giving a fraction of the ms (time left to the next clock ms)."
1066169793,11695,vitarb,2023-01-10T18:41:36Z,"Yeah, I wanted to get a second opinion before going to deep into this as it's going to be a heuristic anyways. I agree we can make it more fair with respect to slot sizes. Perhaps we can modify the algorithm such that it keeps track of the average slot size seen so far while it's iterating through slots and adjusts probability based on that value and the size of the given slot."
1066172690,11695,vitarb,2023-01-10T18:43:54Z,"Already there, cleaned up redundant declaration."
1066233433,11695,zuiderkwast,2023-01-10T19:37:10Z,"Ah, that's true; pros and cons. It's unfortunate if performance suffers due to this though. Another way to prevent that kind of errors could be to make redisDb opaque and only access the fields using accessor functions. Let's see if other reviewers have any opinions about it.

[Edit] ... or create an opaque type in dict `dictArray` (which is just a flat array, but with better type safety) with an accessor function `dict *dictArrayGet(dictArray *dicts, int index);`"
1066237318,11695,zuiderkwast,2023-01-10T19:40:44Z,"OK, good."
1066363233,11695,vitarb,2023-01-10T21:26:43Z,Will do.
1066368870,11695,vitarb,2023-01-10T21:34:47Z,"I don't think there is a performance hit, given that array size is relatively large it wouldn't be pre-fetched, so we'll probably end up with extra memory reads anyways. From brief benchmarking that I've done, CRC hash sum calculation (from `getDict`) was the only clear place where we've introduced some slowdown. Once we eliminate that, I'm going to run more thorough benchmarks, and we can discuss results and see if anything else is an issue. Do you agree with this plan?"
1066406350,11695,zuiderkwast,2023-01-10T22:25:50Z,"Good plan. Measuring is what matters.

Theoretically though (and since thinking about it is more fun than actually measuring) I believe accessing some field in the dict, let's say rehashidx, in `dict_pointers[slot]->rehashidx` it is two reads (one to fetch the pointer and one to follow it and fetch the dict struct) while in `dict_array[slot].rehashidx` it is only one read."
1066426933,11695,molian6,2023-01-10T23:00:06Z,"Would it worth to run some benchmarks? With this change, key lookup and mutations would need to do a CRC16 calculation in order to find which slot it is in. For write, I understand it is the same because there's logic to add the key to the linked list before this change, but for read, we introduced an additional CRC16 calculation.

I'm not saying it would be blocking. I really like this change and the benefits/future benefits come with it, but I think understand the performance impact would be helpful."
1066451242,11695,molian6,2023-01-10T23:48:54Z,"+1 that 48 bits should be good enough, the public doc suggested max number of keys is 2^32 (though I didn't find this hard limit in the code, I guess it is the limit in a 32 bit system)

I'm curious where the other 2 bits goes. We should have 64 bits in the unsigned long long, if cursor takes 48 bits and slot takes 14 bits, that adds up to 62 bits."
1066458888,11695,molian6,2023-01-11T00:06:18Z,"I believe the intention of `slot > 0` is for checking whether we are in cluster modes. Can we check that directly or use db->dict_count to do the check? 
We may hit a corner case by the current impl. Imagine we are scanning slot 0 in cluster mode, and we finished slot 0. Cursor would be 0 and slot was also 0, we quit. However, we shouldn't end here, we should continue with next slot."
1066460349,11695,molian6,2023-01-11T00:09:47Z,"nit: can we use db->dict_count > 1?
I know current impl also works but I think using `db->dict_count` could be a better indicator."
1066481111,11695,molian6,2023-01-11T00:57:26Z,Apologize that I didn't read the PR description. Great to hear there's no perf downgrade.
1066646831,11695,vitarb,2023-01-11T07:20:55Z,"This check essentially tells you that there are more unvisited slots. Special case that you've described at slot 0 should work fine, as at the end of slot 0 iteration we'll find next non-empty slot, if there is one. There is also special case for the last slot, where -1 is returned, which stops the loop. This is why we have a check for `slot>0` in `addSlotIdToCursor`, to not include slot id into cursor when iteration has finished. I can make it slightly more readable, but that would require a separate variable for holding ""has more unvisited slots"" status and would take couple more LoC. Would you prefer that, or does my explanation make sense?"
1066647872,11695,vitarb,2023-01-11T07:22:27Z,Explained motivation in the comment above.
1066648905,11695,vitarb,2023-01-11T07:24:04Z,"I'm working on finding a way to get rid of extra hash calculations. There is no clear solution just yet, but I plan on addressing it either as part of this PR or short after, depending on the mechanism that we choose and whether or not it requires larger refactoring."
1067398831,11695,molian6,2023-01-11T19:52:05Z,"Thanks for the explanation, it makes total sense now. I missed the fact that dbGetNextUnvisitedSlot() will update the slots. It's okay I don't think we need the refactor."
1067400474,11695,molian6,2023-01-11T19:54:07Z,Can we add a comment indicating that slot could be -1 if we have no slot left? That would help people to understand the `slot > 1` condition check
1067532741,11695,molian6,2023-01-11T22:46:13Z,"Not very familiar about this source file but from the code logic should this section go outside of the while loop?

```
if (rioWrite(aof, selectcmd, sizeof(selectcmd) - 1) == 0) goto werr;
if (rioWriteBulkLongLong(aof, j) == 0) goto werr;

dict *d;
dbIterator *dbit = dbGetIterator(db);

while ((d = dbNextDict(dbit))) {
...
}
```

If for some reason it needs to be here, then the `werr` section also need to release `dbit`"
1067533312,11695,molian6,2023-01-11T22:47:02Z,nit: replace DB with dict
1067597072,11695,madolson,2023-01-12T00:44:42Z,"Although we ""advertise"" 2^32, we did make the needed changes to support 2^64 in several cases. We had some clusters in AWS with more than 2^32 keys. I think we should consider bumping that number to 2^48."
1067737553,11695,vitarb,2023-01-12T06:12:30Z,Perhaps I should also add a comment to make it more clear when reading the code.
1067737827,11695,vitarb,2023-01-12T06:13:04Z,Absolutely.
1067778005,11695,vitarb,2023-01-12T07:20:58Z,"@zuiderkwast @madolson @molian6 
I think I might have found a way to avoid redundant CRC hash calculations, for that we could add a separate field into redisDb that would hold a reference to the current slot specific dictionary. We could populate it in the same place where we determine current command's slot. https://github.com/redis/redis/blob/unstable/src/server.c#L3876
It should work as long as entire command operates only on one slot, which is a case currently.
This would save us from doing a lot of plumbing, and pushing slot ID around through db.c APIs. WDYT?
"
1069544389,11695,zuiderkwast,2023-01-13T14:45:43Z,Is `c->db` always the same before and after executing the command? Do we need to consider temb DBs and do something there? (swapMainDbWithTempDb) Hopefully not but I'm not sure...
1069554625,11695,zuiderkwast,2023-01-13T14:55:02Z,"The relation between CLUSTER SLOTS and SLOT_MASK_SHIFT is...

    CLUSTER_SLOTS == 1 << SLOT_MASK_SHIFT

Perhaps we could use that in the defines or a static assert? Not sure if it's worth it though."
1072891188,11695,vitarb,2023-01-17T22:26:29Z,"How about this instead:
```
#define CLUSTER_SLOT_MASK_BITS 14 /* Number of bits used for slot id.*/
#define CLUSTER_SLOTS (1<<CLUSTER_SLOT_MASK_BITS) /* Total number of slots in cluster mode. */
#define CLUSTER_SLOT_MASK ((unsigned long long)(CLUSTER_SLOTS - 1)) /* Bit mask for slot id stored in LSB. */
```"
1073323680,11695,zuiderkwast,2023-01-18T09:58:10Z,LGTM. Good to put these together and use the CLUSTER prefix. Only drawback is if some tries to grep for 16384. :)
1073347135,11695,zuiderkwast,2023-01-18T10:19:09Z,#11465 moved the struct definition to dict.c and kept only `typedef struct dictEntry dictEntry; /* opaque */` here. Putting it back here is a merge-conflict mistake.
1080830204,11695,vitarb,2023-01-19T05:46:03Z,"Will revert. Was it done mostly for encapsulation, to ensure that entry fields aren't used directly?"
1080830679,11695,vitarb,2023-01-19T05:47:00Z,"Haha, right? I can put that in comments to make it easier to find."
1080965143,11695,zuiderkwast,2023-01-19T08:53:38Z,Exactly. Then we can do refactoring and optimization within dict.c without affecting anything else.
1082120456,11695,vitarb,2023-01-20T05:24:42Z,Added.
1082122728,11695,vitarb,2023-01-20T05:30:32Z,"I think it's still accurate, except we've now added one more layer in this iteration."
1082123990,11695,vitarb,2023-01-20T05:33:26Z,"I'm not aware of any scenario when it would be an issue, main processing loop is single threaded and next command is not starting until previous one completes. If you know any use case when this might be an issue, please let me know."
1082130851,11695,vitarb,2023-01-20T05:49:59Z,Done
1082287913,11695,zuiderkwast,2023-01-20T09:36:41Z,"You're probably right. There's no way for the client to change db either (SELECT not possible in cluster mode).

It just looks risky somehow. If the db changes, the old db may stick around somewhere with a current_dict set. Can we add some assert to check that db hasn't changed? E.g.

    if (c->slot >= 0) serverAssert(c->db->current_dict == c->db->dict[c->slot];

Possibly check that it's NULL before we set it too?

Not sure if this makes sense. Perhaps I'm paranoid."
1082295103,11695,zuiderkwast,2023-01-20T09:44:05Z,"Nice!

Though in Redis, these documentation comments are normally in the `.c` files."
1082302700,11695,zuiderkwast,2023-01-20T09:52:02Z,"It looks like it would be possible to put the dbIterator on the stack to save one zmalloc/zfree. The get functions would need to be replaced by init functions like so:

```suggestion
        dbIterator dbit;
        dbInitIterator(&dbit, db);
```"
1083203785,11695,vitarb,2023-01-21T01:07:02Z,"Okay, will move."
1084403642,11695,vitarb,2023-01-23T18:28:11Z,Good idea. Done.
1086257507,11695,vitarb,2023-01-25T06:50:08Z,"I've added this check, and also to make it nicer, I've cached slot id, instead of dict, this way we can simply compare integers in the assert. I've found a couple of interesting things related to scripts though:
* It's possible that some keys were not declared by the script, in which case slot is set in the client during script execution, hence cached slot id will be -1, but actual slot will be different (see `scriptVerifyClusterState` function). To avoid this we can add a simple check before the assert to only perform assertion when the slot was cached.
* Scripts allow multi slot commands, when appropriate flags are set, which means that caching single slot id is inappropriate. I think best we can do is to identify this situation during script execution and clear cached slot id so that fallback logic that calculates key hash is used in the `getDict` function."
1086262969,11695,vitarb,2023-01-25T07:00:11Z,"Yeah, you are right, we should move it out."
1088633422,11695,vitarb,2023-01-27T06:49:27Z,"I made a pretty straightforward implementation that is fair for slots of different size, it takes a target random key index [0..keyCount), and finds a dictionary that contains that key. The only inefficiency is that it needs to use `dbSize`, which is O(slot count) operation, but we can make it O(1) by storing key counter at the `redisDb` level."
1096045935,11695,madolson,2023-02-03T17:09:05Z,"There are a couple of places where need to iterate every key, do we want to come up with a ""multiDBIterator"" that will return every key from every database. Partially to preserve the git history of this file. Will also make it much easier to review."
1096051515,11695,madolson,2023-02-03T17:15:20Z,"A benefit of the pointer approach is we don't need to initialize the dictionaries for unused slots. It saves at least 250KB on a 2 shard system, since each dict is 40 bytes * 8192. It seems like a big enough chunk of memory to care."
1096166881,11695,madolson,2023-02-03T19:00:17Z,I wouldn't change this signature.
1096168213,11695,madolson,2023-02-03T19:01:28Z,"We already have a slot at the client level which is being tracked, we could just use server.current_client->slot. I don't really want to support multiple places we stuff the slot."
1096433726,11695,madolson,2023-02-04T01:10:48Z,Don't we have a 64bit random in mt199937-64? I believe that is as fast as rand. 
1096436428,11695,madolson,2023-02-04T01:16:28Z,"Yes, but remember not all pointers are created equal. The multiple pointer bit is important for normal keys and values because they probably aren't in any of the CPU caches, so you have to pay a full DRAM miss, whereas there is a *good* chance that some of these dictionaries will be in cache. Still worth doing performance checking though."
1096436669,11695,madolson,2023-02-04T01:17:00Z,"If you can @vitarb, it would probably be a good time to go through and remove all of these unnecessary touch points. "
1096438411,11695,madolson,2023-02-04T01:20:33Z,"I might be missing something, but I don't see why this is exposed."
1096552034,11695,zuiderkwast,2023-02-04T15:48:57Z,"If they can be NULL, we need to check for NULL in a lot of places. Perhaps it's worth it."
1097850773,11695,vitarb,2023-02-06T19:50:54Z,"Yes Viktor, also it would complicate situations like slot migration and temp DB swap. I felt like extra complexity is not worth it (at least as part of this PR), and be better left for future optimizations. Madelyn, do you feel strongly about this one?"
1097886971,11695,madolson,2023-02-06T20:31:27Z,"Practically speaking, future optimizations don't happen. I would like to decide if we want it or not now. If we decide later is useful, we can create an issue for later."
1098737518,11695,oranagra,2023-02-07T14:29:55Z,maybe we better store the dict size of each dict in the rdb and use that instead of the total count when available?
1098748902,11695,oranagra,2023-02-07T14:38:40Z,"i think we're taking a hit in the fairness here.
severely, since evictionPoolPopulate can populate multiple keys (now they all come from the same slot)"
1098751500,11695,oranagra,2023-02-07T14:40:26Z,"we're taking some fairness hit here as well, but it's a silly eviction policy, maybe we don't care."
1098756684,11695,oranagra,2023-02-07T14:44:13Z,"the fact we now have another mechanism serving cluster slots, doesn't necessarily means we want to remove this metadata feature."
1098763065,11695,oranagra,2023-02-07T14:49:02Z,"maybe it doesn't matter on cluster mode (if we have an array of dicts or array of pointers, since the array is big), but note that in non-cluster mode, this adds another indirection."
1099281696,11695,vitarb,2023-02-07T21:37:49Z,"Will clean it up. It was used in one of the previous revisions, left out during refactoring."
1099283435,11695,vitarb,2023-02-07T21:39:15Z,"It would be nice, let me check that."
1099295425,11695,vitarb,2023-02-07T21:49:30Z,Can you please clarify what you mean exactly?
1099299470,11695,vitarb,2023-02-07T21:53:01Z,Ok
1099831221,11695,zuiderkwast,2023-02-08T08:55:39Z,Whitespace changes on otherwise untouched lines.
1100527133,11695,vitarb,2023-02-08T18:27:43Z,"Of course, my IDE seem to be overly eager at removing unnecessary spaces at the EOL."
1100527671,11695,vitarb,2023-02-08T18:28:14Z,Done
1100529581,11695,vitarb,2023-02-08T18:30:11Z,"My line of thinking was that it's very unlikely that static price of couple hundred KB per deployment wouldn't matter to anyone who is running Redis in cluster mode, and that it's not worth extra complexity to go ahead and try to eliminate this. Let me know if there are any use cases when that actually matters."
1100752472,11695,vitarb,2023-02-08T22:35:52Z,"changed to randomULong, I think that should be sufficient."
1101220706,11695,oranagra,2023-02-09T09:56:37Z,"we can pass the dict as an argument to this function, no need to recompute it"
1101221987,11695,oranagra,2023-02-09T09:57:40Z,"maybe defragLater can be per-dict and not per-db, and we'll avoid this lookup"
1101241147,11695,oranagra,2023-02-09T10:13:52Z,stale comment?
1101244201,11695,oranagra,2023-02-09T10:16:20Z,"same as database cron iterates on the databases, trying a different one in each cron, i don't think we should have a loop here on all slots, and instead incrementally scan them"
1101251947,11695,oranagra,2023-02-09T10:23:00Z,"these changes in multi.c have a mitigation in cluster mode?
i.e. the optimization of assuming it's the same slot again and again kicks in here, right?
and in non-cluster mode this extra call is very quick, correct?"
1101353470,11695,oranagra,2023-02-09T11:49:57Z,"maybe this would be nicer if we add a multi-dict scan function in dict.c or db.c?
so this code (and others that do the same) will just remain as it was and start to use an `mdictScan()` (taking a dict array pointer and count), or `dbScan()` (doesn't need to take any additional input)."
1101362662,11695,oranagra,2023-02-09T11:59:22Z,why did you drop allvolatile?
1101365466,11695,oranagra,2023-02-09T12:02:19Z,"i'm probably missing something.
it looks to me as if the first function shifts the cursor only in cluster mode, and leave it low in non-cluster mode.
but in the other function it looks like we always shift.

if it's not already like it, i suggest that for non-cluster scan, we'll leave the cursor unaffected."
1101372614,11695,oranagra,2023-02-09T12:09:52Z,"note that since each dict goes to the next power of two, they're all getting a little bit over allocated.
it's likely that this PR has higher dict related memory overheads compared to before.
it may still be worthwhile since on average we could be wasting about 1/2 - 1 pointer pointer per key (e.g. 8 bytes), and we save 16 bytes."
1102394803,11695,vitarb,2023-02-10T07:50:52Z,One of my goals with this change is to unblock https://github.com/redis/redis/issues/10802 which would likely require different metadata format. I was thinking about removing existing metadata and then adding new appropriate format that will allow other memory efficiency improvements. I'm open for a discussion here though.
1102395896,11695,vitarb,2023-02-10T07:52:11Z,Correct
1102396913,11695,vitarb,2023-02-10T07:53:27Z,must be a merge issue
1102399548,11695,vitarb,2023-02-10T07:56:30Z,"Cursor in non-cluster mode should not be affected at all. As you said, first function will never touch it, and the second one will always return 0 when cluster mode is disabled.  We can add defensive code that would check for `cluster_enabled` status explicitly, but I think it would be an overkill."
1102404602,11695,vitarb,2023-02-10T08:02:58Z,"Number of free hash slots in dictionaries should be same before and after this change, statistically speaking. Can you explain how you've come up with 1/2 - 1 pointer estimate, cause I don't see this?"
1102407174,11695,vitarb,2023-02-10T08:06:28Z,"We can certainly do that, if there is enough appetite to change RDB format. Wouldn't it be backward incompatible change though? (e.g. new RDB would not be readable by an older version of redis) Or are new fields not an issue?
"
1102448267,11695,zuiderkwast,2023-02-10T08:48:37Z,I agree with @vitarb here. Let's get rid of that metadata feature.
1102516980,11695,sundb,2023-02-10T09:38:50Z,"How about deferring the increment of dbit->index, maybe one day we need to traverse backwards.
```suggestion
    while (dbit->index < dbit->db->dict_count) {
        dict *d = dbit->db->dict[dbit->index++];
        /* There is a single dictionary in non cluster mode,
         * in cluster mode return first non-empty sub-dictionary. */
        if (!server.cluster_enabled || dictSize(d) > 0) return d;
    }
    return NULL;
}

void dbInitIteratorAt(dbIterator *dbit, redisDb *db, int slot) {
    serverAssert(slot == 0 || server.cluster_enabled);
    dbit->db = db;
    dbit->index = slot; /* Start one slot ahead, as dbNextDict increments index right away. */
```"
1102976529,11695,madolson,2023-02-10T16:32:23Z,"+1, unless we explicitly need it. Maybe we can do this revert it a second commit though so it's easy to revert if we need it?"
1103263136,11695,zuiderkwast,2023-02-10T21:25:36Z,"To be clear, in non-cluster mode, the cursor is shifted by 14 bits too and slot is encoded in the cursor, but slot is always 0.

(During scan, dbGetNextUnvisitedSlot returns the next dict and slot, which is never more than 0 in non-cluster mode since it uses `db->dict_count`. Btw, it's not necessary to store `dict_count` in the db struct. It is always `server.cluster_enabled ? CLUSTER_SLOTS : 1` and `cluster_enabled` cannot be changed at runtime.)"
1103753954,11695,oranagra,2023-02-12T08:06:56Z,"new rdb versions are always unreadable by older versions.
p.s. in 7.0 we already have a few other rdb format changes anyway.

anyway, this is just a suggestion, could be handy if the db is unevenly distributed."
1103755888,11695,oranagra,2023-02-12T08:21:59Z,"ok. i was thinking that this mechanism can be useful for something else in the future, but if it stands in the way of something else, we can drop it.
however, since these two mechanisms don't touch the same areas in the code, it would be easier to review the changes in this one, if we leave this revert for later."
1103756699,11695,oranagra,2023-02-12T08:27:59Z,"aren't you contradicting each other?
anyway, i didn't bother to look too deeply as to when `int slot` would be negative, but the first one seems to only shift the cursor when slot is non-negative, and the second one always shifts it.
so either something is wrong here, or maybe some comments can clear it up.
in any case, i think that we should aim for the non-cluster mode to have unshifted cursors."
1103759451,11695,oranagra,2023-02-12T08:47:13Z,"maybe i'm wrong. let's take a few examples to see.
1. small db DB with 1000 keys, would have used a LUT of 1024 (wasting 24 pointers), will now have 16384 dbs, each of 4 entries (the minimum), so we have 65536 entries (wasting 64,513 pointers).
2. big db with 1m keys, perfectly evenly distributed, would have used 1048576 (wasting 48,576 pointers), would now have 16384 dbs, each of 64 entries  (wasting 48,576 pointers, exactly the same).
3. let's imagine a database that's not evenly distributed, for simplicity let's assume there are only 2 cluster slots.
so if before we had 1m keys in one dict (wasting 64,513 pointers), and let's assume they're split 1/3 + 2/3, so 524288 slots in one, and 1048576 slots in the other (wasting a sum of 572,864 pointers).

so it's clear that we have a problem with small databases, not sure what we wanna do about it if any.

as for the uneven distribution, maybe we wanna ignore it, and maybe on average it won't happen, and as i said in the previous message, maybe it's still worthwhile considering the savings in this PR."
1103884757,11695,zuiderkwast,2023-02-12T22:12:14Z,"Yes, I'm contradicting. :D I shouldn't have said ""to be clear"", but sometging else. I understand it differently but @vitarb please correct me if I'm wrong.

Slot is -1 when scan is finished. I believe cursor is always zero in this case. I think we should add an assert here.

Btw, I think dbGetNextUnvisitedSlot could set slot to 0 instead of -1 when there are no more slots. I don't see why we need the -1 value."
1104699723,11695,madolson,2023-02-13T16:13:56Z,I like this idea since I think we should stick slot information into the RDB as part of: https://github.com/redis/redis/pull/10517
1104724947,11695,zuiderkwast,2023-02-13T16:30:04Z,"> each of 4 entries (the minimum)

An empty dict has no allocated hashtable. It's only the dict struct itself (7 words).

In a small db with 1000 keys in 1000 different slots, the other 15384 dicts are empty."
1105416959,11695,oranagra,2023-02-14T07:49:35Z,"ohh, right, so just the ones with a key will have 4 entries, so this makes it:
1. small db DB with 1000 keys, would have used a LUT of 1024 (wasting 24 pointers), will now have 1024 dbs (the rest will be empty), each of 4 entries (the minimum), so we have 4096 entries (wasting 3,072 pointers).
"
1105433805,11695,zuiderkwast,2023-02-14T08:06:53Z,"Worst case 1000 non-empty dicts, 3000 wasted pointers. Best case 1 non-empty dict of capacity 1024, wasting 24 pointers.

Dict entry metadata was 2 pointers per key. For 1000 keys we save 2000 pointers."
1105752484,11695,oranagra,2023-02-14T12:29:23Z,"ok, there's also the other case i described above of uneven distribution, which in the past would't have matter, and now each slot has it's own power of two overhead.."
1105818250,11695,zuiderkwast,2023-02-14T13:23:28Z,"Yes, but instead of one big power-of-two, there are multiple small power-of-two overheads, but they sum up to roughly the same number (assuming there are no dicts with only 1-2 keys).

|                                        | unstable | this PR |
|----------------------------------------|----------|---------|
| Three slots with 1000 keys in each     | 4096 = 4*1024 | 3*1024 |
| Three slots with 1000, 2000, 3000 keys | 8192 = 8*1024 | 1024+2048+4096 = 7*1024 |"
1107555986,11695,vitarb,2023-02-15T18:42:35Z,"Exactly, power of 2 will be much smaller, proportional to the number of dictionaries. Besides small (<1Mb) static overhead for dict structures themselves, there should be no overhead really. And when cluster mode is disabled it should be same as before this change as we allocate only one dict."
1107561055,11695,vitarb,2023-02-15T18:46:12Z,I see there is some confusion. Let me take another look at this code and try to make it a bit more readable and easy to understand.
1113679249,11695,vitarb,2023-02-21T23:40:00Z,"It's a good point, current implementation will be very inefficient (and possibly broken) when maxmemory is low (when there are few keys per slot). I think we'll need to include more dictionaries into the sample until we reach desired number of keys to sample from. Let me use test-lru util that we have to measure LRU performance on this branch comparing to unstable branch, and update implementation to make sure we don't degrade quality of the eviction pool."
1116629319,11695,vitarb,2023-02-24T08:00:54Z,"Updated implementation:
* Improved eviction pool population for small DBs.
* Added faster version of random dictionary selection.
* Fixed a bug with cached command slot being used during eviction.
With that in place, measured both performance (using bench) and fairness (using lru util). I no longer see any regressions there.
"
1117390612,11695,vitarb,2023-02-24T17:48:00Z,"I don't see any measurable performance degradation from this, my assumption is that because in non-cluster mode there is only one pointer per DB, it can stay in CPU cache."
1117764323,11695,madolson,2023-02-24T22:40:14Z,"One downside of this is that on large clusters. (~1000 nodes), most nodes are only assigned 16 slots. So they will on average scan through 999 empty slots before finding any slot with keys in it. What's worse, if the cluster is correctly configured and has continuous ranges, they might have to consistently scan 16k empty slots (for example if the node has slots 16358 - 16383). I have to imagine this will take some amount of time. 

I still think we might want to maintain a vector of the dictionaries *owned* by this node we can iterate through. This list will not change often."
1117776912,11695,madolson,2023-02-24T22:51:30Z,"Practically speaking, won't this invalidate most of the L1 cache as we are bringing in on average 8k value to do the size check. If most commands are evicting items out of the LRU, this seems really inefficient."
1119220889,11695,vitarb,2023-02-27T19:34:30Z,"I think that's a good idea, it would help us speed up iteration and random dict selection at a relatively small cost of <128kb."
1119554930,11695,zuiderkwast,2023-02-28T04:10:10Z,Can we use the bitmap `myself->slots` for this?
1119638724,11695,zuiderkwast,2023-02-28T06:52:40Z,"There is a difference between non-empty and owned.

If we're interested in owned slots, we should instead check e.g. `clusterNodeGetSlotBit(myself, slot)` in cluster.c."
1119647918,11695,vitarb,2023-02-28T07:06:14Z,"It's a smart idea, slot bitmap could speed up iteration, as we can isolate all non zero bits from each byte in the mask quite easily. There are two issues with it though:
1. Similarly to the previous approach, you'd have to skip a bunch of 0s in the bitmap if node owns few slots (although it will be 8 times faster as bitmask array's size is `CLUSTER_SLOTS/8`, making it a worthwhile improvement, but not as good as having slots in a vector)
2. It won't be possible to get random non-empty slot in `O(1)` time using this approach.

So, unfortunately, I don't think it's quite as good as having non empty slots in a vector."
1119650042,11695,zuiderkwast,2023-02-28T07:09:20Z,"The comment mentions ""iteration across all owned slots"" but it actually includes non-owned slots (e.g. importing slots not yet owned). What do we want here, owned non-empty or all non-empty?"
1119652585,11695,zuiderkwast,2023-02-28T07:13:02Z,"A cache line is 64 bytes, so we have 512 bits (slots) in one cold memory read."
1119658761,11695,vitarb,2023-02-28T07:21:36Z,"I think we want owned AND non-empty, however I believe that existing implementation of SCAN API in the unstable branch doesn't check for owned vs not owned either (this is why I've ignored check here). We should fix that perhaps."
1119662436,11695,vitarb,2023-02-28T07:26:27Z,"I remember there was some use case related to replication, when data was imported before slots were assigned. I'll need to look into it again and see where we can enforce ownership check and where we'll have to ignore it."
1119669057,11695,vitarb,2023-02-28T07:34:58Z,"* Iterating those 512 bits will require some CPU cycles, even if there isn't much random memory access. 
* You may still need multiple reads from memory in order to find a slot if very few slots are owned.
* No way to skip empty slots.

That being said, it can be good enough for iteration use case, but it doesn't provide ability to find a random non empty slot in O(1) time (important for eviction use case).

On the other hand one benefit of using this approach would be that we wouldn't need to add any code on the hot path (db add/remove).

I can prototype and benchmark it to see what actual performance would be if I manage to find a solution to finding random slot quickly."
1124087725,11695,vitarb,2023-03-03T06:59:03Z,"I've reworked eviction logic slightly, please take a look at the most recent version and let me know if you have any concerns."
1124167364,11695,vitarb,2023-03-03T08:42:21Z,"It's true that the number of tables increased, but total amount of work needed to resize the dictionary remains the same. The only overhead should be iterating through slots, but it shouldn't take much time to become a concern for cron."
1124177339,11695,vitarb,2023-03-03T08:52:39Z,"Correct, in non cluster mode getting slot is trivial, as we always need dictionary 0.
In cluster mode, there should be no cached slot for commands like FLUSHDB, which is what we want as we'll need to calculate crc hash for each key in order to find correct slot where it is located."
1125614453,11695,oranagra,2023-03-05T07:45:13Z,"i don't understand what work do you refer to.
all the ""work"" of htNeedsResize, dictResize, and dictExpand is repeated for each slot rather than just being done once.
the only thing that remains roughly the same volume is of zcalloc (many small callocs rather than one that's bigger), so it's true that the amount of memory being zeroed may not change much, but the overhead per allocation call is likely to be large."
1125616361,11695,oranagra,2023-03-05T07:59:40Z,"for the record, i still don't get it.
getAndClearSlotIdFromCursor always shifts the cursor by 14 bits, even in non-cluster mode."
1125616605,11695,oranagra,2023-03-05T08:01:32Z,"let's try to stick to the common styling, `{` in the same line of a single line function declaration of `if`"
1125622762,11695,oranagra,2023-03-05T08:44:37Z,"it's a little odd that the code above uses db->key_count directly, and the code below it calls dbSize().
also, after caching it on the stack, it calls it again..."
1125623721,11695,oranagra,2023-03-05T08:51:51Z,"it's not just clusters with a lot of nodes skipping a lot of slots in this long loop, it could also be a cluster with just a few nodes, will also have a long loop.
i suppose maintaining some grouping could help to skip roughly the right place.
it doesn't have to be a bitmap, we can just maintain sums of total keys of each group of 64 slots."
1125646038,11695,oranagra,2023-03-05T11:21:32Z,"the eviction is (usually?) running when current_client is NULL, so if feels a bit odd to see it here.
what code below users the current_client? i fail to see it.
if we have some assertion, maybe a better solution is to nullify current_client?"
1125650580,11695,oranagra,2023-03-05T11:49:39Z,"I still think there's a fairness issue here.
each call to to evictionPoolPopulate will populate the entire pull (if it finds keys).
the existing mechanism for multi-db deployments are unfair as well (always starting from db 0), we may not care because not many are using the combination of eviction and multi-db. but for cluster and per-slot dict i think we want each key in the pool to come from a random dict."
1125650756,11695,oranagra,2023-03-05T11:50:32Z,temporary change that should be reverted?
1125655103,11695,oranagra,2023-03-05T12:16:38Z,maybe the comment goes to to the different terms (just fix the variable name from `owned_slots` to `non_empty_dicts`
1125655666,11695,oranagra,2023-03-05T12:19:57Z,i think we should not allocate and populate that data structure (intset) in case we only have one dict (non-cluster mode)
1129046167,11695,oranagra,2023-03-08T07:11:23Z,"if we read an old RDB, it may still be beneficial not to ignore this opcode and assume even distribution."
1129086529,11695,vitarb,2023-03-08T08:05:46Z,"Done. One challenge was how to avoid resizing DB if slot info was present (since db size OPCODE comes before slot info, but it should be no-op if slot info has more specific instructions). To achieve this, I moved DB resizing after OPCODE loading phase."
1129910948,11695,vitarb,2023-03-08T19:05:40Z,"Yeah, I was testing LRU fairness, will revert it back."
1129916258,11695,vitarb,2023-03-08T19:11:34Z,"In the average case, when keys are randomly distributed across slots, it shouldn't matter if we pick multiple keys from one slot or different slots for sampling. The fact that keys have same CRC hash should not matter for LRU algorithm efficiency. I think current implementation makes a good tradeoff between general case performance and edge case efficiency. Do you have any ideas on how to improve fairness at a reasonable cost?
"
1129922409,11695,vitarb,2023-03-08T19:18:17Z,"There are cases when current client is not NULL, when we hit max memory in `processCommand`, in that case we need to temporary null out the slot (or client) for the duration of eviction. Would you prefer to nullify the client temporarily instead of juggling with the slot?"
1129925493,11695,vitarb,2023-03-08T19:21:42Z,"I believe this is outdated, can't find this code anymore."
1129928462,11695,vitarb,2023-03-08T19:24:52Z,This function no longer exists.
1129937469,11695,vitarb,2023-03-08T19:34:54Z,"I would love to use this bit mask and not have to add/maintain another data structure. However, I fail to see how we can get a random non empty dictionary in O(1) time without additional information of some sort. As Oran said, if node owns few slots (say 1% for example), there will be a lot of guess work involved, unless we have some type of indexed data structure that contains owned slots."
1130234744,11695,vitarb,2023-03-09T00:35:32Z,"Ok, I'll change it. The reason why I did it this way, was to avoid custom logic (for cluster mode disabled) in the iterator, but it's quite easy to do it either way."
1131987157,11695,vitarb,2023-03-10T06:16:45Z,Done
1131988496,11695,vitarb,2023-03-10T06:19:22Z,We should use cached slot id here as key is same as from the client's request. So there is no need to recompute hashes.
1132001291,11695,vitarb,2023-03-10T06:42:23Z,"You are correct, there is certainly some overhead from the slot iteration, by ""work"" I meant useful work e.g. actual resizing of dictionaries, as you said, amount of memory that should be allocated, zeroed out should be roughly the same. 

I've added a timer around this loop and it takes less than 0.5ms on average to run this loop on the node with 16k slots, I think you right, this might be a bit too much. I've added an upper limit of 1024 dictionaries per cron iteration and it went down to 30-40 micro seconds under load. How does that sound?"
1132023295,11695,vitarb,2023-03-10T07:17:17Z,"To be honest, I don't think this would add much value or convenience as there is not much logic to hide there. Let me know if you feel strongly about this."
1132705128,11695,vitarb,2023-03-10T18:05:23Z,I've added specific checks to keep behavior of cluster mode cursor unaffected.
1132707465,11695,vitarb,2023-03-10T18:07:15Z,"This function has changed since the comment was posted, I think it should no longer be a concern."
1132709895,11695,vitarb,2023-03-10T18:09:03Z,Random dict code has been refactored and this should no longer be an issue.
1132710214,11695,vitarb,2023-03-10T18:09:19Z,Done
1134669565,11695,madolson,2023-03-13T22:14:52Z,Why isn't this in cluster.h?
1134675226,11695,madolson,2023-03-13T22:21:22Z,"```suggestion
    } else if (intsetGet(dbit->db->non_empty_dicts, dbit->index++, &slot)) {
        dbit->cur_slot = (int) slot;
```"
1134683110,11695,madolson,2023-03-13T22:32:20Z,"We might have issues nulling out the client, since we rely on that for some logic related to client side tracking evictions. I suppose this is what we get for using globals too often. I think we probably don't want to rely on the server.current_client optimization here though, since we're sampling random slots, we should have the slot we want to operate on though and can use it directly. This will mean we need getRandomDict(db) to maybe instead return the slot ID."
1134697310,11695,madolson,2023-03-13T22:55:47Z,"```suggestion
dict *dbGetNextNonEmptySlot(redisDb *db, int *slot) {
```"
1134697861,11695,madolson,2023-03-13T22:56:46Z,Is there a reason we don't use the intSet here to get the next slot?
1135008640,11695,vitarb,2023-03-14T05:53:59Z,Moved to cluster.h
1135011118,11695,vitarb,2023-03-14T05:56:47Z,Changed
1135051542,11695,vitarb,2023-03-14T06:41:13Z,"The reason I was thinking about originally doesn't apply anymore, let me just change it."
1135061726,11695,vitarb,2023-03-14T06:49:13Z,Removed
1136643746,11695,oranagra,2023-03-15T07:43:11Z,"well, truth be told, even before that, dictGetSomeKeys would keep getting more and more keys from the same dict bucket, and then move to the next one (without calling random again).
but in case it hits a stride of empty buckets, it'll then re-random for a different bucket.

so first, maybe with the new approach, we should have it exit and re-random for another slot?

secondly, to my original point, you're right that for LRU related efficiency it doesn't matter much, but it could cause some full slots to be emptied (finding the best LRU just from within these slots), and then after eviction, keys will not be evenly distributed across the slots. i suppose this is mainly a concern on small databases, with not many keys per slot.
maybe considering that we take only 5 keys from each slot and then re-random, it's not that bad on a common case."
1136653329,11695,oranagra,2023-03-15T07:51:25Z,"we still only maintain this intset when cluster is disabled, so:
1. let's avoid allocating it (set it to NULL), so if there's any code path that reaches it, it'll segfault and we'll fix it.
2. let's add a comment on that var in the header file."
1137851877,11695,vitarb,2023-03-15T22:52:23Z,Sounds good.
1142226169,11695,madolson,2023-03-20T14:41:15Z,"```suggestion
    if (listLength(server.db[0].rehashing) > CLUSTER_SLOTS) return;
```
This is actually what we are checking against right?"
1142226950,11695,madolson,2023-03-20T14:41:46Z,"```suggestion
                    ""the same slot"");
```"
1142229463,11695,madolson,2023-03-20T14:43:26Z,"```suggestion
```"
1142253805,11695,madolson,2023-03-20T14:59:09Z,Does this actually work? Won't it stick all the keys in the wrong DB since it will use the key slot optimization?
1142271855,11695,vitarb,2023-03-20T15:11:45Z,Note. We've decided to not do this.
1142327784,11695,madolson,2023-03-20T15:42:35Z,"I think we could easily modify this so that the iterator can iterate both the keys and the dictionaries together, so there is one interface that can grab both."
1143791798,11695,vitarb,2023-03-21T17:49:24Z,"Yes, I think that the number of slots is an optimal value here. I still like having a separate constant for this as technically we might want to tweak this in the future. Would you prefer to make it simpler and just use CLUSTER_SLOTS instead?"
1143794707,11695,vitarb,2023-03-21T17:52:01Z,"It's fine, perhaps `keys` is a confusing name, in fact it's just a key count, this function call doesn't add anything to the dictionary, and instead just resizes the DB. As to populate command itself, it will work fine because as a not key command it doesn't populate slot id, so keys will go to correct dictionaries."
1143803729,11695,vitarb,2023-03-21T17:59:02Z,"I didn't touch this line, besides current form is how IDE prefers to format it, perhaps we should reformat other strings instead, but we should probably do that as a separate commit."
1143915912,11695,vitarb,2023-03-21T19:46:00Z,Removed
1143943552,11695,vitarb,2023-03-21T20:15:52Z,"Okay, added `dictIterator` field to `dbIterator`, and introduced ability to iterate entries using new `dbIteratorNext` function."
1144001211,11695,zuiderkwast,2023-03-21T21:21:24Z,"Some duplicated code. Idea:

```Suggestion
    dictEntry *de = dbit->di.d ? dictNext(&dbit->di) : NULL;
    if (!de) { /* No current dict or reached the end of the dictionary. */
        dict *d = dbIteratorNextDict(dbit);
        if (!d) return NULL;
        dictInitSafeIterator(&dbit->di, d);
        return dictNext(&dbit->di);
    }
```"
1144045489,11695,vitarb,2023-03-21T22:19:15Z,"Made it use CLUSTER_SLOTS, we can always add a new constant later if we want to."
1144082037,11695,vitarb,2023-03-21T23:23:19Z,"I like it, looks nicer this way. Thanks."
1156514208,11695,madolson,2023-04-03T22:36:04Z,"```suggestion
    cumulativeKeyCountAdd(db, slot, 1);
```
This check is already in cumulativeKeyCountAdd"
1156519314,11695,madolson,2023-04-03T22:46:08Z,"```suggestion
        for (int j = 0; j < tempDb[i].dict_count; j++) {
```"
1156520031,11695,madolson,2023-04-03T22:47:31Z,"```suggestion
    unsigned long long *slot_size_index_tree;  /* Binary indexed tree (BIT) that describes cumulative key frequencies up until given slot. */
```
Too verbose? I know we talked about this, but the name doesn't actually indicate what it is. "
1156521560,11695,madolson,2023-04-03T22:50:28Z,These changes aren't needed anymore.
1156521614,11695,madolson,2023-04-03T22:50:36Z,Ditto about this.
1157873723,11695,vitarb,2023-04-04T23:57:15Z,True
1159276201,11695,vitarb,2023-04-06T04:43:41Z,"Let's call it `slot_size_index`, and if anyone is interested in what kind of index, then they can go and read the comment."
1159278282,11695,vitarb,2023-04-06T04:48:12Z,"Why? Line above doesn't have spaces. I suggest we keep it as is, we should probably commit to a common code style and reformat entire codebase some day."
1159281464,11695,vitarb,2023-04-06T04:55:24Z,"True, it's not necessary, I was hoping to avoid extra function call when cluster mode is disabled, but the cost must be negligible."
1159324210,11695,vitarb,2023-04-06T06:12:05Z,"Addressed this by introducing a separate function `calculateKeySlot`, which unlike `getKeySlot` would never use cached value. We should use this function everywhere where we may need to operate on random keys that don't belong to the same slot as client's command (e.g. eviction, defrag, etc)"
1159325706,11695,vitarb,2023-04-06T06:13:44Z,Please look at the most recent version where fairness issues were addressed. This comment explains approach that I took https://github.com/redis/redis/pull/11695#issuecomment-1480454348
1167284488,11695,QuChen88,2023-04-14T21:24:19Z,"Are you planning to also make the `expire` dictionary to be per slot? 

It is pretty much a mirror image of the main dictionary. If you want per slot then you should also do the same for `expire` dictionary"
1167302754,11695,zuiderkwast,2023-04-14T22:02:20Z,"To get all the keys in a slot, we don't need one expire dict per slot."
1176044220,11695,vitarb,2023-04-25T06:08:33Z,There is no benefit in splitting expiry dictionary per slot as it doesn't have any memory overhead in cluster mode.
1181115647,11695,QuChen88,2023-04-29T18:56:43Z,OK makes sense. 
1226137086,11695,soloestoy,2023-06-12T06:13:53Z,we can just perform a right shift without an extra bitwise AND operation?
1226163452,11695,soloestoy,2023-06-12T06:48:44Z,"I thinks we should also split the expire dictionary, one slot should be a atomic unit including the expire data. And it's useful to implement something like `FLUSHSLOT [slot] ASYNC`"
1226197315,11695,soloestoy,2023-06-12T07:23:46Z,"using a list holding the dict pointer is very dangerous I think, it's easy to forget clear the pointer in queue when releasing the dict.

the way in `tryResizeHashTables` can be used to rehash safely."
1242873837,11695,madolson,2023-06-26T22:21:01Z,"I believe we originally wanted to avoid this since it would make the `volatile *` eviction policies much more difficult. I think that was before we came up with the idea with the fenwick trees, so this might be a lot simpler to implement now."
1268950693,11695,vitarb,2023-07-20T05:29:09Z,"I agree, it's potentially error prone, this code was developed before efficient db iteration was introduced, so I haven't tried it yet. Let me check performance numbers and update it if it works well."
1292756226,11695,oranagra,2023-08-13T11:03:08Z,there's a tab in that line.
1292757596,11695,oranagra,2023-08-13T11:08:16Z,"is this a badly resolved merge conflict?
i.e. IIRC recently we changed this code to use **Try**Expand, and added an error reply."
1292758269,11695,oranagra,2023-08-13T11:10:03Z,"maybe we can create a new `dbFind` to be used instead of `dictFind`?
this way, instead of adding the extra call to getKeySlot in each of these lines (referring to the key name in argv twice), we'll just replace the name of the function we're calling.

this pattern is used a lot. in contrast to dictAdd and dictDelete and other places that call getKeySlot.
"
1292765850,11695,oranagra,2023-08-13T11:38:08Z,"i'm not sure if we have test coverage for defrag in cluster-enabled mode.
let's add one."
1292789825,11695,oranagra,2023-08-13T13:27:30Z,"can you confirm (and maybe mention it in the comment), that is guaranteed not to return a dict that's empty (unless the entire db is empty).
if that's not the case, i think we have bugs in evict.c"
1292790375,11695,oranagra,2023-08-13T13:30:20Z,"before this change, we would get 5 samples from each db.
now for cluster enabled, we'll get 5 samples the first db, and can get less from other dbs.
that's ok since in cluster enabled there's only one db..

we do plan to support multi-db un-sharded clusters some day, but i suppose that when we do, these will also have just one dict, and this condition will be changed.

maybe it's a good idea to introduce `server.sharding_enabled` in parallel to `cluster_enabled` at this point in time?
@madolson WDYT?"
1292794495,11695,oranagra,2023-08-13T13:52:16Z,"we've expanded (copy paste) dictMemUsage here.
which means that if it'll some day change, this code can remain outdated.
maybe we can improve? maybe a form of dictMemUsage that takes counters as input?"
1292796228,11695,oranagra,2023-08-13T14:02:21Z,"i see we have a few usages of `long long int`, any reason not to drop the `int` part? (more common to omit it)"
1292796905,11695,oranagra,2023-08-13T14:06:05Z,we have to increment RDB_VERSION to 12
1292797474,11695,oranagra,2023-08-13T14:09:07Z,"in order to ignore gracefully you must skip the data!!!
i.e. call rdbLoadLen twice.
move this condition to below the reading lines..."
1292797856,11695,oranagra,2023-08-13T14:10:52Z,"this is a bug (we must read / skip the data).
in fact, there's no need for this line at all since we're not doing anything with this info."
1292798033,11695,oranagra,2023-08-13T14:12:00Z,"the indentation was off before, but it seems off after too.
or maybe i'm missing something, and there are hidden tabs here?
in any case, there's no need to modify this line or file in this PR, please revert."
1292798495,11695,oranagra,2023-08-13T14:15:03Z,why did you have to remove this assertion (and the other one below)?
1292800999,11695,oranagra,2023-08-13T14:28:10Z,how could this happen? maybe an assertion is appropriate?
1292804127,11695,oranagra,2023-08-13T14:43:34Z,"```suggestion
```"
1292807716,11695,oranagra,2023-08-13T15:04:45Z,"i don't think CME and CMD are therms we use in the code base.
maybe it's fine to use them in a conversation / discussion to be prompt, assuming the context is set, but let's avoid using them in official code / docs."
1292811014,11695,oranagra,2023-08-13T15:23:09Z,"Let's optimize mass insertion (MSET), and increment once instead of per-key?

We can certainly optimize RDB loading, in the cases were we know the source RDB is already sorted by slot (new format)!

Maybe we can also do that with MULTI-EXEC, and scripts which is guaranteed to be in the same slot by somehow summing the new keys and updating the count when execCommand / evalCommand returns?
This way we'll still be able to tell people to use scripts and pipeline (with transaction :disappointed:) instead of suggesting to add fancy multi-key commands (e.g. think of a multi INCR).

i know that's a bit problematic since the MULTI-EXEC can contain commands that require that data (e.g. RANDOMKEY), so we'll need some late invalidation mechanism (to apply the pending changes before needing them)
if we go that direction, we can maybe handle dbGenericDelete in the same way.

"
1292812019,11695,oranagra,2023-08-13T15:30:05Z,"shouldn't this line be placed inside the above block (i.e. only when switching db)?
i'm probably missing something. please have a look at it."
1292813029,11695,oranagra,2023-08-13T15:35:29Z,"lets add a comment that it's 1 based.
or even say that the range is `[1 .. dbsize+1]`

also, let's mention the complexity formula."
1292826277,11695,oranagra,2023-08-13T17:02:39Z,why not just memset to 0?
1292828415,11695,oranagra,2023-08-13T17:17:47Z,"why `strtouq`? isn't `strtoull` more appropriate?
and actually, maybe we should use our own `string2ull` which is suppose to be faster."
1292831083,11695,oranagra,2023-08-13T17:38:53Z,can't we use the Updates binary index tree for this for a slightly faster calculation?
1292833958,11695,oranagra,2023-08-13T18:03:33Z,"styling: i think i'd rather add a line break here, and maybe even curly brackets."
1294236533,11695,oranagra,2023-08-15T06:24:35Z,"i think there's a problem here with scripts that declared SCRIPT_ALLOW_CROSS_SLOT.

this also brings me to a realization, that i'm not sure we have any way to detect bugs in this mechanism.
i.e. we don't have tests that can detect keys being placed in the wrong dict.
and we don't have any assertions when the binary index tree is decremented below 0."
1301445632,11695,cjx-zar,2023-08-22T10:35:37Z,"It seems like we could utilize the binary lifting strategy instead of binary search, which has the potential to optimize the complexity to log(n). [FYI](https://oi-wiki.org/ds/fenwick/#单点修改查询全局第-k-小)."
1312218315,11695,zuiderkwast,2023-08-31T20:54:09Z,"It struck me that this code applies runs not only to SCAN but also on HSCAN, SSCAN, etc. as long as it's implemented as a dict. We should check `o == NULL` to make sure it applies only to SCAN.

```suggestion
    int slot = (o == NULL) ? getAndClearSlotIdFromCursor(&cursor) : 0;
```"
1312220073,11695,zuiderkwast,2023-08-31T20:55:57Z,"We should probably only encode the slot in the cursor if we're scanning the keyspace, i.e. SCAN, not HSCAN, SSCAN, etc.

```suggestion
        if (o == NULL)
            addSlotIdToCursor(slot, &cursor);
```"
1314145234,11695,oranagra,2023-09-03T06:39:20Z,let's list this in the top comment (together with any other user visible changes)
1316755514,11695,oranagra,2023-09-06T05:37:51Z,"```suggestion
        } else {
```"
1316761037,11695,oranagra,2023-09-06T05:41:57Z,"i'm not sure this graceful error handling is needed.
we do that when loading individual keys, in order to fail gracefully on a corrupt or malicious RESTORE command.
but i'm not sure that's needed on RDB loading / full-sync.
was there any discussion about that that i missed?

p.s. if we do that, we should also do it for the expires dict and the per-slot dicts."
1316767478,11695,oranagra,2023-09-06T05:51:54Z,"is this related to https://github.com/redis/redis/pull/11695#discussion_r1292757596?

p.s. i think the log message is insufficient, we don't know which dict we failed to allocate and what was it's size.
i suggest to either improve the log message, or pass a boolean argument to expandDB to cause it to use zcalloc instead of ztrycalloc in which case it'll panic with full stack trace and the requested size."
1317514507,11695,hpatro,2023-09-06T16:01:31Z,"I did try to increment RDB_VERSION. However, one of the test `unit/expire` fails due to encoded value comparison. 

```
*** [err]: All time-to-live(TTL) in commands are propagated as absolute timestamp in milliseconds in AOF in tests/unit/expire.tcl
Expected 'restore foo17 1694015989710 bar\f-È\} Lc^ ABSTTL' to match 'restore foo17 * {*} ABSTTL' (context: type source line 944 file /workplace/harkrisp/redis/tests/support/util.tcl cmd {assert_match [lindex $patterns $j] $data} proc ::assert_aof_content level 1)
```

Our validation is to do a `string match `on the following `{restore foo17 * {*} ABSTTL}`

RDB_VERSION - 11

```
restore foo17 1694014381977 {bar
                                aôù} ABSTTL
```

RDB_VERSION - 12

```
restore foo17 1694015989710 bar\f-È\} Lc^ ABSTTL
```

I don't understand tcl well. @oranagra are the curly bracket is a literal match or to compare list of string within it ?

Note: RDB version bump on unstable also leads to failure of this test. "
1317516764,11695,hpatro,2023-09-06T16:03:19Z,"Yeah, I was trying to address that particular comment. "
1318148081,11695,oranagra,2023-09-07T06:39:07Z,"i don't know Tcl that well either.
what seems to happen is that a list in Tcl is usually represented as a chain of words in `{}`, and so is a sub-list.
in this case, either the dump payload no longer contains spaces so it doesn't need to be wrapped in `{}`, or because it contains s `}` char that gets escaped, it decided to escape more symbols and dropped the `{}` wrapping.
in any case, the solution (i tested it), is to change `{*}` with just `*`. i.e. `{restore foo6 * * ABSTTL}`"
1319028481,11695,zuiderkwast,2023-09-07T19:19:35Z,"I can confirm this seems right! `read_from_aof` uses `lappend` to build its result. When `lappend` appends a string that contains spaces, it wraps it in `{}` but now it doesn't seem to contain spaces anymore.

```TCL
$ tclsh
% set res {}
% lappend res {foo}
foo
% lappend res {bar}
foo bar
% lappend res {foo bar}
foo bar {foo bar}
```

and yes because it contains a `}` which maybe can't be written inside `{}`, because if it's escaped, the backslash is added to the string too... Look:

```tcl
% lappend y ""bar }""
bar\ \}
% lappend y ""foo foo""
bar\ \} {foo foo}
% lappend y {quux\}}
bar\ \} {foo foo} {quux\}}
% lappend y baz\\}
bar\ \} {foo foo} {quux\}} {baz\}}
% lappend y }       
bar\ \} {foo foo} {quux\}} {baz\}} \}
```

"
1319081805,11695,hpatro,2023-09-07T20:20:19Z,Thanks both of you @oranagra / @zuiderkwast. I think both `{restore foo6 * * ABSTTL}` and `{restore foo6 * ABSTTL}` have the same meaning. I will stick to what Oran proposed for better readability in the test. 
1320140467,11695,oranagra,2023-09-08T17:14:57Z,"let's give them a common prefix, and maybe add a comment in the int / unsigned variables / arguments below that they use this type.
alternatively, we can better use an enum type."
1320151536,11695,oranagra,2023-09-08T17:26:53Z,"it's not ""by type"", it's ""from iterator"".
rename?"
1320154078,11695,oranagra,2023-09-08T17:29:39Z,"what's ""Mid""?
it's out of context here, let's rename, and add a comment describing the function"
1320167467,11695,oranagra,2023-09-08T17:43:57Z,"in theory, we already have a slot here (we get here from a dict iterator, so we know which dict (slot) we're working on).
see if you can improve."
1320169131,11695,oranagra,2023-09-08T17:45:18Z,"FIXME?
p.s. i suppose we don't have any test with cluster mode and expire that does defrag.
i think we must add one for code coverage, otherwise it could explode in production running untested code due to some silly typo."
1320171941,11695,oranagra,2023-09-08T17:48:17Z,the dictFind -> dbFind wrapper i suggested in a comment of a previous review would fit here too
1320182770,11695,oranagra,2023-09-08T17:59:52Z,"```suggestion

```"
1320187490,11695,oranagra,2023-09-08T18:05:02Z,"it's a little hard for me to follow the code here (probably due to using small monitor with GH, and being too lazy to clone the code).

i have a feeling something is odd here, why is this code not needed in cluster mode?
can we somehow avoid duplicating this logic and big comment?"
1320188809,11695,oranagra,2023-09-08T18:06:38Z,"maybe we can create a dbScan() interface, instead of messing with the cursor here?
imagine we'll need such scan in another place (or a few others) in the future, i don't like to keep cloning that logic.
IIRC we do that in module.c too already."
1320191138,11695,oranagra,2023-09-08T18:08:36Z,isn't that `continue` wrong? we skip the `mh->num_dbs++`
1320192570,11695,oranagra,2023-09-08T18:09:54Z,"i think i already commented on that in a previous review.
this code assumes things on the dict internals. we need to move that part of logic to dict.c"
1320195409,11695,oranagra,2023-09-08T18:12:39Z,"i think it's wrong not to save the RDB_OPCODE_RESIZEDB opcode when cluster mode is enabled.
the RDB should still contain this opcode, even if it's unlikely for the reader to use it."
1320197214,11695,oranagra,2023-09-08T18:14:50Z,"again, same bug as before (which was just resolved the other day and now reintroduced.
you can't skip the reading part.
in order to ignore gracefully, you need to read the data and then not use it."
1320704529,11695,madolson,2023-09-10T06:40:14Z,"> maybe it's a good idea to introduce server.sharding_enabled in parallel to cluster_enabled at this point in time?

I don't think it makes sense in this PR, since it's not a complete implementation. It probably makes sense to have one holistic PR that will add the sharding enabled. "
1320717009,11695,madolson,2023-09-10T08:06:30Z,"If we can, I think we should be across the board abstracting away the notion that the main dict and the key/value dict are two separate dictionaries. Why wouldn't we just have a single, ""expandDict(db, keys, expires"". "
1320718335,11695,madolson,2023-09-10T08:14:40Z,"I also don't really like this. It's tightly coupling the assumption that expires and keys must be two separate dictionaries. I would rather have APIs that are more semantically useful (getExpireCount, getKeyCount) then have the same APIs. The DICT_TYPE_MAX seems to only be used 2 real places for iteration, even though there are a lot of other places we could probably iterate over it as well if we want to keep it.

If we really want to keep this, is should also be an enum. "
1320720028,11695,madolson,2023-09-10T08:16:10Z,"```suggestion
    dict **expires;             /* Timeout of keys with a timeout set */
```"
1320720703,11695,madolson,2023-09-10T08:19:59Z,"```suggestion
    dbState sub_dict[DICT_TYPE_MAX];  /* Metadata for main and expires dictionaries */
```
db_type implies this is the type of db. This is more like a subordinate dictionary. Don't really like the name though, and am open to alternatives."
1320720791,11695,madolson,2023-09-10T08:20:29Z,This name no longer makes sense since it's on a dictionary and not the database.
1320721542,11695,madolson,2023-09-10T08:25:53Z,Is this for handling the non cluster mode case? I don't know what other case any of the dictionaries wouldn't be populated. Maybe we should do something like just check that right away to be clearer.
1327579747,11695,madolson,2023-09-15T17:10:45Z,"We're still leaving a bunch of unnecessary code touches, we should clean these up."
1327590732,11695,madolson,2023-09-15T17:22:29Z,"I suppose this comment is no longer quite accurate, as this code is now more complex."
1327592446,11695,madolson,2023-09-15T17:24:19Z,"This seems high, do we need to be so aggressively looking for hash tables to resize?"
1327594164,11695,madolson,2023-09-15T17:26:20Z,"I don't understand why these are breaks and not continues. If the database has no expires, we will check one dict per cron, which doesn't seem like the intended behavior."
1327596070,11695,madolson,2023-09-15T17:28:41Z,"These are not db iterator specific functions, but they are under the heading."
1327597017,11695,madolson,2023-09-15T17:29:44Z,"If we can, let's make this opaque and have APIs for accessors.

I also think this is the one usage of dictType that I think makes sense. I would prefer it be flags on the iterator type though, and not dictType."
1331933629,11695,roshkhatri,2023-09-20T16:54:55Z,I have added the prefix as `DICT_MAIN` and `DICT_EXPIRES` and defined an enum for for this.  I tried separate APIs and think its resulting in a lot of repetitive code. I am looking over to optimize in more places by using `DICT_TYPE_MAX`.
1331939477,11695,roshkhatri,2023-09-20T17:00:27Z,"Yes, to make it more clear, changed it to `dictSizebySlot`"
1333632643,11695,roshkhatri,2023-09-21T21:45:24Z,"This is changed to `getFairRandomSlot` and it guarantees that it returns a slot whose dict is not empty unless the db is empty.
adding the comment."
1336288520,11695,roshkhatri,2023-09-25T19:08:54Z,"Here, we are calculating the slots in the dictionary. Binary index tree cannot be utilized here."
1337729812,11695,hpatro,2023-09-26T20:14:55Z,It's still valid at an individual HT level though(dictionary per slot). 
1337731015,11695,hpatro,2023-09-26T20:15:33Z,I think we can piggyback on the CRON_DBS_PER_CALL value and no need to introduce a new constant. WDYT ?
1337760630,11695,madolson,2023-09-26T20:44:14Z,"I think there is two things. 
1. We are now overloading the term slot to mean two different things. We should probably update it to be bucket.
2. I think it's still worth mentioning this is now incremental. A single HT might be full but it will take some time to reclaim it."
1338176842,11695,oranagra,2023-09-27T07:38:56Z,"ohh, i was mixing `slots` with `keys`"
1338191872,11695,zuiderkwast,2023-09-27T07:50:44Z,Maybe we should rename dictSlots to dictBuckets to avoid the confusion? dictSlots is only used in a handful of places within the repo. Or create an alias. It's a macro anyway.
1338441289,11695,oranagra,2023-09-27T11:07:35Z,"i don't think that's what caused my confusion, but i support the above suggestion (avoiding using the term ""slots"" there)"
1340693875,11695,madolson,2023-09-28T21:41:34Z,"Just +1, we talked about this offline and it's buried somewhere in one of my comments."
1342092275,11695,oranagra,2023-10-01T07:42:46Z,i don't see this used in dict.h or dict.c? maybe it doesn't belong here?
1342092399,11695,oranagra,2023-10-01T07:43:44Z,maybe we can remember this from outside? we know which dict we're scanning..
1342095786,11695,oranagra,2023-10-01T08:05:04Z,"```suggestion
        if (keyscount==0) continue;
```"
1342096590,11695,oranagra,2023-10-01T08:10:40Z,"i think the prefix should be DB, not DICT.
how about this?
```suggestion
typedef enum dbDictType {
    DB_DICT_MAIN,
    DB_DICT_EXPIRES
} dbKeyType;
```"
1342101817,11695,oranagra,2023-10-01T08:51:47Z,"i still think the slots*sizeof(dictEntry*) part belongs in dict.c
and maybe the sizeof(dict) too.
maybe instead of calling a plain `dictEntryMemUsage()` we should call
`size_t dictMemoryUsage(int dicts, long long slots, long long keys)` or alike?"
1342102598,11695,oranagra,2023-10-01T08:57:50Z,"```suggestion
                if (dictTryExpand(d, (db_size / server.cluster->myself->numslots)) != DICT_OK) {
```"
1342104795,11695,oranagra,2023-10-01T09:14:27Z,"i'll state again that i think this method should get an argument weather to use dictExpand or dictTryExpand.
in case it was called from rdb.c, i think it should panic in zmalloc and not fail gracefully."
1342106028,11695,oranagra,2023-10-01T09:24:37Z,"shouldn't we move to the next slot when the `valid()` return ERR?
otherwise, the loop in expire.c will just keep looping, instead of maybe breaking out?
am i missing something?
p.s. i suppose we should make sure this is covered by tests."
1342106466,11695,oranagra,2023-10-01T09:28:09Z,"that's a bit awkward, this tip was created for a different reason, and the assumption that only in this flow we have to calculate the slot rather than use the cached one seems odd and dangerous.
at the very least, there should be a big comment here, but i'd rather find another solution.
let's discuss."
1342965673,11695,hpatro,2023-10-02T17:28:27Z,The other solution which I thought about was we could provide the slot information which is already available in the eviction code flow but would require us to introduce another method or alter the parameters in this API and affect all other callers.
1342965999,11695,hpatro,2023-10-02T17:28:47Z,Damn I missed this case. Let me handle it.
1342966342,11695,hpatro,2023-10-02T17:29:12Z,Sure.
1343033256,11695,hpatro,2023-10-02T18:44:35Z,I think `dict.h` API(s) should be at a dictionary unit level and shouldn't be providing results for multiple of it. The above logic seems well abstracted under `db.c` which is now using multiple dictionaries to store the data.
1343225850,11695,hpatro,2023-10-02T22:32:51Z,"It's slightly difficult to pause the scanning for a slot while it is in progress and undergoes a large data cleanup to have 99% buckets empty. 

I've added a test case to verify the skip logic is handled and the slot iteration continues."
1343226831,11695,hpatro,2023-10-02T22:34:36Z,made it inline.
1343233941,11695,hpatro,2023-10-02T22:47:32Z,"@madolson any thoughts. She liked `dbKeyType` as it signifies if the key would be actual data or expire data. Could we discuss here and finalize ? 

I don't have a strong preference here tbh."
1343260873,11695,madolson,2023-10-02T23:42:56Z,"```suggestion
```"
1343261645,11695,madolson,2023-10-02T23:44:37Z,"```suggestion
    uint16_t pport;      /* Secondary port number: if primary port is TCP port, this is 
```"
1343262257,11695,madolson,2023-10-02T23:46:06Z,"```suggestion
    if (dict_can_resize == DICT_RESIZE_AVOID && 
```"
1343262529,11695,madolson,2023-10-02T23:46:43Z,"```suggestion
dictStats *dictGetStatsHt(dict *d, int htidx, int full) {
```"
1343263402,11695,madolson,2023-10-02T23:48:41Z,"```suggestion
    buf[bufsize-1] = '\0';
```"
1343265742,11695,madolson,2023-10-02T23:53:57Z,"```suggestion
        
```"
1343267483,11695,madolson,2023-10-02T23:57:45Z,"I agree with the highest level comment, it should be DB and not dict, since it's on the DB and not the dict.

```suggestion
typedef enum dbKeyType {
    DB_MAIN,
    DB_EXPIRES
} dbKeyType;
```

The other point is I don't want to be exposing that there are two underlying dictionaries for the two types of accesses into the main DB. You are either accessing the main keys or volatile keys."
1343268057,11695,madolson,2023-10-02T23:59:16Z,"```suggestion
 * used to reset when client to bucket allocation is not required when 
```"
1343273458,11695,madolson,2023-10-03T00:11:38Z,"```suggestion
```"
1343273767,11695,madolson,2023-10-03T00:12:22Z,"```suggestion
        mixDigest(final,&aux,sizeof(aux));
```"
1343278420,11695,madolson,2023-10-03T00:23:50Z,"```suggestion
    if (!de) de = dbFind(d, key->ptr, DICT_MAIN);
```"
1343282560,11695,madolson,2023-10-03T00:32:49Z,setExpire is called unconditionally in various places on the expiry. This increment should depend on whether or not the object existed had an expire.
1343283388,11695,madolson,2023-10-03T00:35:02Z,"```suggestion
    ""string"", 
    ""list"", 
    ""set"", 
    ""zset"", 
    ""hash"", 
```"
1343283470,11695,madolson,2023-10-03T00:35:15Z,"```suggestion
    else 
```"
1343283512,11695,madolson,2023-10-03T00:35:20Z,"```suggestion
        else 
```"
1343283637,11695,madolson,2023-10-03T00:35:31Z,"```suggestion
        if (o->type != target) 
```"
1343307173,11695,madolson,2023-10-03T01:05:13Z,"Even if we don't implement this, let's follow up. I'm not sure I followed the link, but I do intuitively believe that finding a slot by index should ~O(Log(N))"
1343322839,11695,madolson,2023-10-03T01:21:37Z,"Maybe inside of calculateKeySlot() we should be evaluating whether or not we're in the main command execution part (i.e., inside the call, I think the flag is `CLIENT_EXECUTING_COMMAND`). The slot is only valid during the command execution, not during other side effects."
1343326099,11695,madolson,2023-10-03T01:25:27Z,How does this disable resizing?
1343328854,11695,madolson,2023-10-03T01:28:41Z,"This shouldn't be included here, since there is no dependencies in rdb.h for cluster stuff. Probably needs to be in some other file, probably rdb.c"
1343390833,11695,hpatro,2023-10-03T02:39:39Z,never ending bgsave forbids dict expansion/contraction.
1343441561,11695,hpatro,2023-10-03T03:48:17Z,Removed.
1343446553,11695,hpatro,2023-10-03T03:53:47Z,"Good catch, done."
1343447340,11695,hpatro,2023-10-03T03:54:29Z,Done. Need to retrieve the dict slightly lower down in the code.
1343552314,11695,oranagra,2023-10-03T06:15:48Z,"i thought of that too, but i was also afraid that some side effect mechanism will attempt to access other keys from within call as well, like eviction does.
i suppose we don't have these in redis (e.g. no eviction in EXEC or EVAL, and i can't think of anything else like that).
we do have both scripts and modules accessing random keys inside commands, and these should be handled separately (please ack).
so bottom line, i support your suggestion, please also add some comments around that."
1343580380,11695,oranagra,2023-10-03T06:45:08Z,"```suggestion
static inline unsigned long dictSizebySlot(redisDb *db, int slot, dbKeyType keyType) {
```"
1343629986,11695,oranagra,2023-10-03T07:31:23Z,please add some volatile keys to the defrag test.
1343641047,11695,oranagra,2023-10-03T07:40:20Z,this one is still not resolved.
1343644700,11695,oranagra,2023-10-03T07:43:08Z,"ok, but the `sizeof(dictEntry*)` and maybe `sizeof(dict)` shouldn't be here.
i.e. the knowledge that the lookup table has a pointer per bucket, better go to dict.c IMO."
1343654295,11695,oranagra,2023-10-03T07:51:05Z,"why ""skipped""?
if it's a try_expand and it failed, we handled it above.
if it was a !try_expand and it failed, then it panicked and killed the process.
so here we know we succeeded."
1343656272,11695,oranagra,2023-10-03T07:52:12Z,"ohh, now it is."
1344382453,11695,hpatro,2023-10-03T16:16:05Z,"Updated to print only on `DICT_ERR`

`dictExpand` can return `DICT_ERR` if no expansion happens due to certain conditions. It is not equivalent to the panic/OOM kill."
1344479284,11695,madolson,2023-10-03T17:29:28Z,"```suggestion
    if (server.current_client && server.current_client->slot >= 0 && server.current_client->flags & CLIENT_EXECUTING_COMMAND) {
        return server.current_client->slot;
    }
```

From https://github.com/redis/redis/pull/11695#discussion_r1342106466, let's only use this optimization when we are executing a command."
1344532289,11695,madolson,2023-10-03T18:14:57Z,"I don't see any response on this, so will add my two-cents.

This seems like optimizing before understanding the bottleneck. I'm not too worried about the performance, since we expect most of the binary tree to remain in memory so subsequent updates should be fast. 

I'm also weirdly uncomfortable with having the index tree be slightly out of date when doing multi-execs. Implementing logic to invalidate it is adding a lot more complexity that we try to generally avoid. "
1344641560,11695,hpatro,2023-10-03T19:40:52Z,Done
1344754786,11695,hpatro,2023-10-03T21:19:40Z,Done
1344857519,11695,hpatro,2023-10-03T23:10:09Z,"I would like to stick with this. Let me know if you have a strong objection, we can revisit. "
1345229316,11695,oranagra,2023-10-04T05:50:04Z,"this could maybe cause issues for the fragmentation thresholds of this test.
any reason not to greatly reduce the number of keys?
i.e. as soon as we have some volatile keys (e.g. 1), that code path is covered (even if we don't re-locate them).
alternatively, if we wanna check that when we relocate a key name, the other dict is updated, i think we should set some TTLS to a few keys in the `asdf1` group (the one that suffers from eviction)
i.e.
```
r expire asdf11 1000
r expire asdf1799999 1000
```
or maybe a loop to set it to the first 100 and last 100 keys in each range?
i don't want more since i'm afraid it'll de-stabilize the fragmentation thresholds of the test.
WDYT?"
1345232985,11695,oranagra,2023-10-04T05:55:11Z,"by ""remain in memory"" you mean the CPU cache, right? that's still an O(logN) operation, which we can completely avoid if we unify them.
maybe we can conduct a simple benchmark with MSET of 10 keys, and compare the performance?"
1345235416,11695,oranagra,2023-10-04T05:58:15Z,"@hpatro this one is now resolved with the change you did in `tests/unit/cluster/scripting.tcl`, right?
please add a comment in these checks you added there describing their purpose."
1345238957,11695,oranagra,2023-10-04T06:02:51Z,no strong objection.
1346231633,11695,hpatro,2023-10-04T17:31:01Z,"I played around with some numbers ranging [10000,100000] and `10000` looked pretty safe in terms of frag ratio and time took for defrag to complete. 

Your suggestion seems to cover more cases though, will try to incorporate it. "
1346304565,11695,hpatro,2023-10-04T18:37:02Z,Added very small set of volatile keys to the existing keys `asdf1*` and `asdf2*`. It should ideally undergo some eviction code flow as well as scan through expire dictionary during defrag.
1346834224,11695,oranagra,2023-10-05T06:07:41Z,"i mean, if we do a ""defrag later"" step after each dict, rather than after each db, we'll maintain a shorter list of defrag later keys, and we won't need to do the calculateKeySlot overhead."
1347988746,11695,hpatro,2023-10-05T21:14:15Z,Made the code change to handle defragLaterStep to be processed after each scan of slot.
1348251328,11695,hpatro,2023-10-06T05:14:01Z,~~There is some issue with the current implementation causing a crash. Investigating.~~ Fixed.
1348322380,11695,hpatro,2023-10-06T07:02:31Z,@oranagra please have a look at the implementation and let me know what you think about it.
1349678539,11695,oranagra,2023-10-08T11:06:17Z,"```suggestion
                ctx.slot = slot;
```"
1349679408,11695,oranagra,2023-10-08T11:13:19Z,"defragLaterStep returns true if more work is needed.
so why do we need this?

taking a closer look, i think the code before this change already handled the defragLater after each dict.
am i missing something?"
1349860511,11695,madolson,2023-10-09T04:55:43Z,"```suggestion
            for (int k=0; k < dbarray[j].dict_count; k++) {
```"
1352854349,11695,hpatro,2023-10-10T16:11:49Z,"In the earlier logic, the next slot discovery used to happen as soon as the main/expires dict scan was completed. And the defrag_later list would be non-empty at that point. Like we discussed above, we wanted to reuse the slot information in the defragLaterStep and avoid the recomputation. This change avoids the next slot discovery until the defrag_later list becomes empty. 

"
1353420103,11695,hpatro,2023-10-10T21:04:42Z,"Added comment to the test.

As well as added a assertion on the BIT decrement operation to not go below zero."
1354804628,11695,oranagra,2023-10-11T11:27:44Z,"i don't see that in the code. one of us is missing something, so let's add more details.
i see two `do` loops, and the first thing that happens in both is a `defragLaterStep` and a `break` if it returns true.
the only thing we need to worry about is that we don't switch slot when that list isn't empty, and for that purpose, we just need to make sure that the code that changes `ctx.slot` isn't reachable when the list isn't empty.
or in other words, the `continue` you added seems enough and there's no need for that variable and if-else you also added.

what am i missing?"
1355326488,11695,hpatro,2023-10-11T16:14:23Z,"If we don't have the `if (!defrag_later_item_in_progress) {` condition it would scan the same slot again after completion of the `defragLaterStep` as `cursor` and `expires_cursor` would be set to `0`, which we want to avoid. "
1356381760,11695,oranagra,2023-10-12T07:23:26Z,"ohh, you're right. thanks."
1359695939,11695,madolson,2023-10-15T01:19:30Z,"We're getting a valgrind error because `mh->db[mh->num_dbs].overhead_ht_expires` isn't being set when there are no expires. Is there a reason we aren't unconditionally setting this?

```suggestion
        mem = dbMemUsage(db, DB_EXPIRES);
        mh->db[mh->num_dbs].overhead_ht_expires = mem;
        mem_total+=mem;
```"
750395364,9788,oranagra,2021-11-16T15:33:07Z,"```suggestion
# The base name of the append only file
```"
750401799,9788,oranagra,2021-11-16T15:39:14Z,"I don't think we must document the history here (unless there are backwards compatibility concerns that should be in the foot notes)
```suggestion
# Redis can persist the data to a set of append-only files, they are divided
# into two types, one is the the base type, it represents an initial (RDB
# serialized) snapshot of the data present when the AOF is rewritten. The others
# are incremental type, they contain the incremental commands since the last AOF
# rewrite.
```"
750404230,9788,oranagra,2021-11-16T15:41:29Z,"being a base file name, i wanna see just name here, and i wanna add the suffix (file type) at runtime.
i don't mind trimming the `.aof` suffix we get from the user (in case he didn't update his config file), and i also don't mind keeping it and adding another suffix after it.
but for new users / deployments, i want to have something that's cleaner, so i suggest:
```suggestion
appendfilename ""appendonly""
```"
750412827,9788,oranagra,2021-11-16T15:49:39Z,"let's stick to one terminology, either ""meta"" or ""manifest""
```suggestion
# In order to manage these AOF files, Redis uses a manifest file to track them.
```"
750421819,9788,oranagra,2021-11-16T15:58:13Z,"```suggestion
# These files mentioned above have a certain naming rule. The appendfilename
# config will be used as the base part of the file name, which will be added
# suffixes to denote role and sequence number.
# 
# For example: 
# The base could be: appendonly.12.rdb.
# The incremental ones: appendonly.25.aof, appendonly.26.aof.
# META FILE: appendonly.manifest
```

btw, it looks like your editor is inserting some non-ASCII characters, e.g. `、` instead of `,` and ` `"
750425302,9788,oranagra,2021-11-16T16:01:37Z,"these new config interfaces need to be documented in redis.conf, and also listed in the top comment of the PR under some ""interface changes section""
note that we use the PR top comment as a squash-merge commit comment as also for the purpose of release notes."
750426388,9788,oranagra,2021-11-16T16:02:42Z,"`INT_MIN` doesn't seem right.
This one is just for testing, but worth mentioning in the top comment anyway.
Thing is that some reviewers (mainly the core team), may not bother to read the entire source code, and will approve this PR based on the detailed top comment. "
750431612,9788,oranagra,2021-11-16T16:08:05Z,"i haven't yet got to read the code behind it, but i wonder why this needs to be in cron, and not just when AOFRW succeeds or an AOF is being loaded after a crash?"
750433406,9788,oranagra,2021-11-16T16:09:55Z,"i wonder if we want to keep this field and just transmit 0 (backwards compatibility concerns)?
let's discuss...
p.s. if we don't (or even if we do), let's list this in the top comment's ""interface changes section""."
750441418,9788,oranagra,2021-11-16T16:18:05Z,"in the past, we attempted to avoid using PRId64 and instead just used `long long` (or `long long` casting).

p.s. why is this in server.h? i presume that aof.c is the only one that needs to be aware of these details (including some of the defines above)."
750782283,9788,chenyang8094,2021-11-17T00:05:39Z,"If the user configures the name as `appendonly.xxxxx` or `appendonly.xxx.yyy` (not the default `appendonly.aof`), should we also trim it to appendonly?"
750803078,9788,chenyang8094,2021-11-17T00:59:46Z,"I think you provide the name `appendonly.12.rdb, appendonly.25.aof, appendonly.26.aof` does look more intuitive, I decided to use your rules."
750804192,9788,chenyang8094,2021-11-17T01:02:47Z,"Yes, I actually thought about it. The `delHistoryAofFilesCron` function will use bio to delete all history files and update the manifest file on the disk simultaneously. In theory, it is not a very heavy operation, so let's move it to backgroundRewriteDoneHandler?"
750805412,9788,chenyang8094,2021-11-17T01:06:09Z,"Indeed, maybe some users' monitoring systems rely on this info field, so I keep it and force it to 0."
750832655,9788,chenyang8094,2021-11-17T02:23:15Z,"There may be this possibility: the user exited the process before cleaning up the history (redis was killed), and the history files will be kept until the next rewrite success."
750901819,9788,oranagra,2021-11-17T05:55:10Z,"i don't think so. as i said, i'm also willing to keep this suffix, but since it's a common config i figured we can make a minimal effort to clean it. i.e. if the string has at least 5 chars, and ends with that 4 chars suffix, trim the last 4 chars.

but now it occurs to me that maybe if some piece of external software will try to take the value of that config and search for the files based on this base name, this trimming can cause some confusion.
on the other hand, it is likely that this ""server management software"" is coupled with the deployment scripts and the server configuration, so i don't think it's a real issue.

let's seek additional feedback. @yossigo @soloestoy ?"
750902557,9788,oranagra,2021-11-17T05:56:55Z,this is why i suggested to call that on startup too.
750902834,9788,oranagra,2021-11-17T05:57:31Z,@yossigo WDYT?
750915534,9788,chenyang8094,2021-11-17T06:28:37Z,"Modified, `delHistoryAofFiles` will be called in three places:
1. When the redis server starts
2. When AOFRW successfully finish
3. When `config set aof-enable-auto-gc yes`"
750978292,9788,oranagra,2021-11-17T08:03:46Z,"```suggestion
# Automatic deletion of old AOF files can be disabled, in which case some other
# process will need to move them away.
# aof-enable-auto-gc yes
```"
750979190,9788,oranagra,2021-11-17T08:05:13Z,maybe it will be better to negate this? and call it `aof-disable-auto-gc` (have it 0 by default)?
751040730,9788,oranagra,2021-11-17T09:14:52Z,"```suggestion
 *       AOFs will become HISTORY. they will be cleaned regularly unless GC is disabled. 
```"
751042612,9788,oranagra,2021-11-17T09:17:07Z,"```suggestion
 * INCR: There may be more than one (during AOFRW, and after AOFRW failure), and 
 *       together they represent all the incremental commands executed by redis
 *        after the last successful AOFRW.
```"
751043835,9788,oranagra,2021-11-17T09:18:29Z,"```suggestion
#define MANIFEST_TEMP_NAME_PREFIX ""temp_""      
```
is this just for the manifest? don't we have temp files elsewhere? what about the double-write files?
p.s. i think we can just use a hard coded `.tmp` suffix for all of these, not necessarily define it per use."
751047406,9788,oranagra,2021-11-17T09:22:30Z,"i think this the ""file"" prefix and camel-case may be redundant
```suggestion
#define AOF_MANIFEST_KEY_FILE_NAME   ""file""
#define AOF_MANIFEST_KEY_FILE_SEQ    ""seq""
#define AOF_MANIFEST_KEY_FILE_TYPE   ""type""
```"
751198657,9788,oranagra,2021-11-17T12:36:34Z,"```suggestion
    return aofInfoDup(item);
```

p.s. i think we can give up this thin wrapper, and just copy the dup code here (we don't use it elsewhere)"
751206580,9788,oranagra,2021-11-17T12:47:14Z,"this one returns an sds (should be freed with sdsfree), let's change the return type.
same goes for the one below, and maybe others."
751208470,9788,oranagra,2021-11-17T12:49:39Z,"i'd rather add spaces between arguments in function calls.
i know redis is inconsistent in that (each file and function has its own style), but i think that's where we should aim for in new code.
```suggestion
                AOF_MANIFEST_KEY_FILE_NAME, info->file_name,     \
                AOF_MANIFEST_KEY_FILE_SEQ, info->file_seq,       \
                AOF_MANIFEST_KEY_FILE_TYPE, info->file_type)     \
```"
751209049,9788,oranagra,2021-11-17T12:50:24Z,"```suggestion
    return sdscatprintf(sdsempty(), ""%s%s%s"", MANIFEST_TEM_NAME_PREFIX, server.aof_filename, MANIFEST_NAME_SUFFIX);
```"
751258142,9788,oranagra,2021-11-17T13:50:03Z,"i think it looks a bit odd that this macro returns `buf` but doesn't take it as an argument (like sdscat does).
it looks like a memory leak overriding `buf`.
let's either pass `buf` as an argument in addition to `info` (which i prefer), or have the macro do the part of writing to `buf` too (and have no return)."
751261882,9788,oranagra,2021-11-17T13:54:20Z,"```suggestion
 *  when the redis server starts.
```"
751268189,9788,oranagra,2021-11-17T14:01:16Z,"i know config.c does the same, but what's the advantage of first reading the lines one by one using `fgets` and concatenating them to a big string, only to split it in a second loop?"
751270387,9788,oranagra,2021-11-17T14:03:42Z,i guess it would be a good idea to use `pathIsBaseName` to validate that there's no abuse here.
751303363,9788,oranagra,2021-11-17T14:36:56Z,"we're running from tail to head, don't we want to push to head? (not that it really matters)"
751311400,9788,oranagra,2021-11-17T14:45:11Z,"styling. i suggest to indent by 4 rather than align to some position (certainly no the offset of the second argument, but also not the first).
this way, if the log function we call (in this case serverLog) is renamed, we don't need to re-align the arguments.
i also don't see why in this case we wanna designate a separate line per argument (certainly not if we didn't for LL_WARNING)
Feel free to apply to others calls (the reason i commented on this one is because it attracted my eye due to an excessive space on the last line)
```suggestion
        serverLog(LL_WARNING,""Fail to fsync the temp AOF file %s: %s."", 
            temp_amname, strerror(errno));
```"
751312637,9788,oranagra,2021-11-17T14:46:24Z,"we get here on `open` failures too
```suggestion
    if (fd != -1) close(fd);
```"
751316500,9788,oranagra,2021-11-17T14:50:20Z,"do we really need to designate a special function for that?
i think it should always come together with a call to `getAofManifestAsString` anyway, so i think we should collapse this one into persistAofManifest"
751320314,9788,oranagra,2021-11-17T14:53:57Z,"let's attempt to have the first word in ""API"" functions (specifically the non-static ones that are declared in server.h and used in many files), represent the module they belong to.
i.e. these should all start with `aof`, i.e. `aofDelHistoryFiles`.
there is some attempt to do that in redis, and although inconsistent, i think we should try to follow it in new code."
751324399,9788,oranagra,2021-11-17T14:58:00Z,"i think this log message shouldn't be LL_DEBUG. i guess `LL_NOTICE` is good, and even LL_WARNING may be ok (there are not a lot of these)."
751325416,9788,oranagra,2021-11-17T14:59:05Z,"so if redis crashes after we wrote that file, we'll be left with garbage on the disk.
this garbage isn't affecting us, so i suppose we're ok with that, but why don't we use the `bg_unlink` mechanism?
i.e. logically delete now, and pay the deletion price in the thread...

it still wouldn't guarantee there's no garbage since we don't sync the directory structure, but the difference is that we'll leave garbage only on power / system failures (not if the process crashes or is killed)"
751331192,9788,oranagra,2021-11-17T15:04:49Z,"besides the documentation / phrasing, i'd like to start a discussion as to why we need that feature at all?
what are the use cases for that?"
751408662,9788,oranagra,2021-11-17T16:22:35Z,"it could be that this is the first time a user tries to enable AOF at runtime, in which case i think a disk error should not be fatal. but i see that `openNewIncrAofForAppend` does `exit(1)` (unlike `openLastOrCreateIncrAofForAppend`).
lets see if we can figure out a solution, maybe it should do the `openNewIncrAofForAppend` before the fork?"
751418070,9788,oranagra,2021-11-17T16:32:38Z,"we're soon gonna completely remove the code that generates RESP code from inside a fork, i.e. AOFRW will always create an RDB file.
This means that the feature of calling BGREWRITEAOF when AOF is not enabled, should no longer be supported (it's the same as calling BGSAVE).

We can clean up this code in a later PR, but since i see this scenario is causing issues in this one, maybe we can remove that now.
i.e. don't remove yet all the AOF text generation, but do change this command to return an error if `server.aof_state != AOF_ON` and then you can delete the `createnew` argument..
or we can do that later.

p.s. if we do that now, let's mention it in a behavior changes section in the top comment."
751420552,9788,oranagra,2021-11-17T16:35:15Z,let's be sure to have a test case for this flow.
751430918,9788,oranagra,2021-11-17T16:46:19Z,"so is `aof_current_size` the size of all incremental (non history) parts? or also including the base?
let's make the comment clearer.
also maybe rename `aof_newfile_size` to `aof_last_incr_size`? (""new"" may be ambiguous)"
751435086,9788,oranagra,2021-11-17T16:50:50Z,"styling. `if` with multiple lines should move the `{` to the next line (less confusing indentation).
```suggestion
    if (server.aof_state == AOF_ON ||
        (server.aof_state == AOF_WAIT_REWRITE && server.child_pid != -1))
    {
```"
751436032,9788,oranagra,2021-11-17T16:51:54Z,"so i understand this PR doesn't have the double write code....
indeed it probably makes the code cleaner, but we need to discuss it to make sure we all agree if this is ok."
751601176,9788,oranagra,2021-11-17T20:13:48Z,"when loading an RDB, i think we may want to set `rdbFileBeingLoaded` (which `startLoadingFile` sets) in some way,
this controls behavior when corruption is detected.
and it would also be a good idea to pass the file size.
on the other hand, i don't think we wanna do a separate startLoading / stopLoading per file, and instead use just one pair like before.
so we need to find a way to determine the file size ahead of time, and update the file name when needed.
let's look into it and see what we can come up with."
751777540,9788,chenyang8094,2021-11-17T23:58:53Z,"At present, I only use `aof-enable-auto-gc` in the test to assert that expected history AOF will be generated in AOFRW.

However, I am wondering whether there is such a scenario: the user has a backup system that will continuously upload all incremental AOFs, because our AOFs have timestamp annotations, so we can even recovery the data to each previous point in time. Therefore, after each AOFRW, we cannot delete the history AOF immediately, unless the user has actually uploaded these AOFs . This is just a guess of mine. I don't mind that it is only used for testing purposes like `aof-child-rewrite-delay` and not exposed in `redis.conf`.
"
751784435,9788,chenyang8094,2021-11-18T00:16:35Z,"Yes, `aof_newfile_size` only means the last ""that is, newly created "" INCR AOF,  Its main purpose is to provide the correct position when ftruncate this AOF  file.

I think `aof_last_incr_size` is indeed clearer, modified."
751806860,9788,chenyang8094,2021-11-18T01:12:23Z,"Yes,  double writing will make the code look more complicated (I implemented it in #9539 ).  

 In addition, although redis may create infinite number of files on the disk if AOFRW is repeatedly failing. But this is almost impossible or very rare in reality, because AOFRW will bring fork overhead every time, and users will not let AOFRW fail like this."
751965265,9788,chenyang8094,2021-11-18T07:24:46Z,"@oranagra  About this test i wanna modify and improve it, please review the tests part later, thank you."
752003270,9788,oranagra,2021-11-18T08:26:03Z,"ok, i have a feeling that such an external mechanism will require more assistance from redis.
at the very least it be able to trigger GC manually, or clean the manifest in some way (before/after deleting the files).

I guess we should leave this feature out of the scope for now until we design it properly.
so in that case, let's mark this flag as a testing one (comment), and remove the documentation from redis.conf.

i also think it's still a good idea to negate it.

p.s. we do plan to soon add some config.c flag on all test testing configs see https://github.com/redis/redis/issues/9684
i.e. it'll probably be the ones that are not documented in redis.conf."
752006248,9788,oranagra,2021-11-18T08:29:59Z,"can you estimate how much more overhead this feature adds?
i guess the double writing code on it's own is not more than 5 lines.
but the file tracking / renaming may be a bit more...

I do think repeated failures will be common... user can find out he has insufficient memory after a week of repeated failures and maybe thousands of files on the disk."
752077704,9788,chenyang8094,2021-11-18T09:56:36Z,Also used in `aofManifestDup` to dup base_aof_info
752179441,9788,chenyang8094,2021-11-18T12:08:15Z,Here I want to ensure the order they were before.
752184958,9788,oranagra,2021-11-18T12:16:16Z,"yes, i'm arguing that you're reversing the order.
maybe i'm missing something... 
since you're iterating the old list from tail to head, if you're inserting to the tail of the new list, it'll reverse the order."
752188129,9788,chenyang8094,2021-11-18T12:20:48Z,Changed to LL_NOTICE.
752220571,9788,chenyang8094,2021-11-18T13:04:34Z,Changed to `bg_unlink` and deleted the code added in bio
753647386,9788,chenyang8094,2021-11-20T07:42:42Z,It means to verify whether this file ends with .rdb?
753649606,9788,chenyang8094,2021-11-20T08:12:12Z,"Okay, I have made aof open before redis-fork so that we can find disk errors in advance."
753675790,9788,chenyang8094,2021-11-20T13:34:01Z,"I don’t think there will be a lot of work. The key is that we are sure that it is necessary to do this. I think this will cause two problems:
1. Code understanding may bring some burdens
2. When double writing files (obviously we can't get around the atomicity problem), when one  successfully and another file fails written, should we directly exit?

Of course,  double writing can indeed solve the possibility of hundreds of INCR AOFs.

Therefore, we can make a decision as soon as possible, I can proceed to implement it."
753676307,9788,chenyang8094,2021-11-20T13:39:37Z,@oranagra Here I pass size as a parameter to startLoadingFile. I think the original parameter `fp` is too restrictive for caller (must be a file opened in advance).
753676533,9788,chenyang8094,2021-11-20T13:42:24Z,@oranagra   Do you mean that all INCR AOF loads only use a pair of `startload/stopload`? Then use an function like `updateLoadSize` to update the file size in the middle?
753845148,9788,oranagra,2021-11-21T19:42:30Z,"no, it verifies that it's a file name without folder names or absolute files (locks redis inside it's `dir` config)"
753845948,9788,oranagra,2021-11-21T19:49:52Z,"```suggestion

```"
753848583,9788,oranagra,2021-11-21T20:13:48Z,"yes, just one pair of startLoad / stopLoad, ideally we should know the total size of all when we start loading, and fix the relevant places not to reset the read counters when we switch files.
thing is that the arguments for this startLoading function are used for two things:
1. the file name is used in order to know what to report on failures, and be able to distinguish between diskless and dis-based replication (see `rdbReportError`)
2. the size argument is used for progress reporting, see `INFO persistence`, i.e. `loading_total_bytes`, `loading_loaded_bytes`, `loading_loaded_perc`.

we need to somehow make them work correctly. "
753848961,9788,oranagra,2021-11-21T20:17:26Z,"```suggestion
    /* server.aof_fd != -1 means that AOF is open, then we must
     * skip the last AOF, because this one is our currently writing. */
```"
753850079,9788,oranagra,2021-11-21T20:27:43Z,"i see that now `startAppendonly` creates a new file, but it doesn't write to `server.aof_fd` until after `rewriteAppendOnlyFileBackground` (same as it is in unstable), however, rewriteAppendOnlyFileBackground does this:
```c
if (server.aof_fd != -1) openNewIncrAofForAppend();
```
so i think openNewIncrAofForAppend still has a chance to `exit`.
and in any case, it'll open the file again, writing to `server.aof_fd`, and we probably have an FD leak."
753876014,9788,chenyang8094,2021-11-22T00:02:07Z,"Ok, modified."
754214398,9788,chenyang8094,2021-11-22T12:14:36Z,"@oranagra I added a `startLoadingIncrAofFiles` function to set the size of the entire INCR AOFs, and then in the `loadSingleAppendOnlyFile` function, `loadingIncrAofProgress` will be used to update the progress of the loading. Unlike `loadingRdbProgress` (originally `loadingProgress`), `loadingIncrAofProgress` receives a relative size (not a Absolute file offset).  Please review the code here if there is any problem, thank you."
754227580,9788,chenyang8094,2021-11-22T12:30:39Z,"@oranagra Do you have any ideas here? I wonder if we still have a solution, that is, once we find that our INCR AOF number reaches a threshold (for example 32, this means AOFRW have  consecutive failed 32 times), we stop the automatic retry AOFRW and print a log and set a global status. I think the current unlimited AOFRW is not very reasonable(If AOFRW keeps failing so many times, it means there must be some serious problem, such as insufficient memory, some modules have bugs when implementing AOF rewrite, etc., I think it is meaningless to automatically retry AOFRW in this case.), AOFRW also will bring fork overhead every time. what do you think?

I think we can forcibly set `server.aof_rewrite_base_size` or clear `server.aof_rewrite_scheduled` to delay or close automatic AOFRW."
754893676,9788,oranagra,2021-11-23T08:37:35Z,"I discussed it with the core team today.
we concluded that we rather not invest in double write for now, and we can always add that later if we get feedback about problems with infinite number of files.

The suggestion of some AOFRW throttling also came up.
i'm not certain how to do it (don't like to change a config), we can try thinking of it, but that's also something that can be added in the future."
754903329,9788,chenyang8094,2021-11-23T08:50:51Z,"@oranagra  Well, I don't think this requires a configuration. We can simulate the tcp retransmission algorithm (Binary Exponential Back off). When AOFRW fails, we have at least twice the time (or size) to retry AOFRW again (Don't try again immediately like now). If it fails again, it will double. We only need to determine a maximum internally.

This is just my simple idea, maybe we have a better way."
754907586,9788,oranagra,2021-11-23T08:56:36Z,"ohh, sorry, i was confusing `server.aof_rewrite_base_size` with `server.aof_rewrite_perc` (didn't want the backoff be visible in `CONFIG GET`)."
754928722,9788,oranagra,2021-11-23T09:23:22Z,"maybe move that to be next to loadingProgress / startLoadingFile, and rename to just `loadingIncrProgress`.
i.e. a generic progress report that reports the delta rather than absolute."
754929451,9788,oranagra,2021-11-23T09:24:15Z,"is `base_size` better named `last_progress_report_size`?
i think ""base"" is not a good word here (since it keeps changing)."
754930412,9788,oranagra,2021-11-23T09:25:20Z,maybe this better be after the loop rather than inside the condition that breaks?
754931203,9788,oranagra,2021-11-23T09:26:16Z,"nit pick. i prefer just one line, it's not long enough to justify ugly line break IMHO"
754933223,9788,oranagra,2021-11-23T09:28:37Z,"I meant just one startLoading for the whole thing (not one for the base and one for all incr files)

regarding the new functions that's ok, just that maybe the function naming should be neutral and just state the fact of what they do (relative or absolute instead of RDB or AOF) "
754937734,9788,oranagra,2021-11-23T09:33:54Z,maybe that's another metadata to keep in the manifest?
755077262,9788,chenyang8094,2021-11-23T12:31:03Z,OK
755077920,9788,chenyang8094,2021-11-23T12:31:52Z,modified
755083385,9788,chenyang8094,2021-11-23T12:39:11Z,"I understand what you mean. If we add `size` in manifest, do we need to check whether the size is the same as the actual size of the file when we load it?

There are still some questions about the manifest, that is, now we only have “name/type/seq” meta in manifest, do we need other meta, such as the timestamp of file creation, or other information (maybe we will use it in the future), because Once the manifest format is publish, it will not be modified later."
755095375,9788,oranagra,2021-11-23T12:54:35Z,"yes, i'm not certain about my suggestion either.
i don't think we need do validate the size (as long as it's just used for progress report)
but anyway, it was just an idea, we can drop it."
755096863,9788,oranagra,2021-11-23T12:56:27Z,"maybe it would be cleaner if `progress_size` will be a local variable declared when setting it?
and / or call it `progress_delta`?"
755160701,9788,chenyang8094,2021-11-23T14:11:12Z,done
755164011,9788,chenyang8094,2021-11-23T14:14:35Z,Modified
755165000,9788,chenyang8094,2021-11-23T14:15:38Z,Modified
755176188,9788,chenyang8094,2021-11-23T14:26:45Z,"Sorry I didn't understand what you mean. When we  calls `rewriteAppendOnlyFileBackground` in `startAppendonly` function, `server.aof_fd` must be -1, so 
 `rewriteAppendOnlyFileBackground` will not be opened new aof file. I don’t understand under what circumstances the FD leak you mentioned happened。"
755177820,9788,chenyang8094,2021-11-23T14:28:18Z,I have restored the declaration of the `rewriteAppendOnlyFileBackground` function.
755184172,9788,chenyang8094,2021-11-23T14:34:31Z,Modified
755184546,9788,chenyang8094,2021-11-23T14:34:52Z,Modified
755205320,9788,chenyang8094,2021-11-23T14:55:02Z,"Yes you are right, i am wrong. fixed ：)"
755222621,9788,chenyang8094,2021-11-23T15:09:24Z,Test added.
755226738,9788,chenyang8094,2021-11-23T15:12:38Z,@oranagra  Please review this part again，thanks.
755721167,9788,chenyang8094,2021-11-24T05:55:35Z,"I have optimized a version, please review it."
755992070,9788,chenyang8094,2021-11-24T12:02:07Z,"@oranagra I implemented this function according to the previous description, because I think we should need it now, because in actual applications AOFRW is often happens (such as  the child OOM), and redis  automatically retry AOFRW is so fast ( default 10HZ), so it is easy to create a bunch of small INCR AOF files.

I am just solving it by increasing the delay linearly (of course there may be other non-linear better algorithms), I think it can solve our problem, if AOFRW has failed 10 times (maybe we need to reduce this value ), then the subsequent AOFRW will become slower and slower."
755993022,9788,chenyang8094,2021-11-24T12:03:20Z,"@oranagra  PLZ review this part again, thanks."
756127541,9788,oranagra,2021-11-24T14:26:23Z,"ohh, i now see i got the condition in rewriteAppendOnlyFileBackground wrong (the one in step 4 below)

1. startAppendOnly does `newfd = open()`
2. startAppendOnly calls rewriteAppendOnlyFileBackground
3. rewriteAppendOnlyFileBackground does `if (server.aof_fd != -1) openNewIncrAofForAppend();`
4. openNewIncrAofForAppend does `server.aof_fd = open()`
5. startAppendOnly does `server.aof_fd = newfd;` (after rewriteAppendOnlyFileBackground returns with success)

i'd still argue that this is a bit confusing, and that maybe it would have been better to open the new file just in one place.
i understand that the `open()` in `startAppendOnly` is the one i asked for (for graceful failure). and that we'll need one for reoccurring rewrite (which can be in rewriteAppendOnlyFileBackground).

maybe we can solve it in a cleaner way if we move the opening of the new file in rewriteAppendOnlyFileBackground to before `fork()` is called (it doesn't really matters if it is done in the parent before or after fork), and then maybe it's nicer to have just one call to `open`, or even two in some if-else chain, and it'll be less confusing as to which function is responsible of opening the new file and which one is responsible of setting `server.aof_fd` (they'll all be in just one place)."
756132458,9788,oranagra,2021-11-24T14:31:25Z,"do we have no other complications in this PR due to the fact BGREWRITEAOF can be called when AOF is not enabled?
if we do, let's return an error here in that case, and simplify the code.
if we don't then this case will be deleted anyway in a few weeks by another PR."
756150206,9788,oranagra,2021-11-24T14:50:15Z,"i think this should not be a config, but rather a DEBUG sub-command (completely unreachable for normal users).
see `SET-ACTIVE-EXPIRE` and alike.
p.s. i haven't looked at the tests yet, but maybe there's a different way to induce a failure without the need of such a config.
maybe by using `rdb-key-save-delay`, and then killing the child from the test (with `kill`)"
756159044,9788,oranagra,2021-11-24T14:59:37Z,"the simple mechanism seems ok, or we can maybe improve (i don't mind too much).
maybe just make it clear in the top comment what's the return value of this function (true to prevent rewrite)

maybe a slightly better one would be to start with a 1 minute delay and then double the delay time on each failure up to a limit of one day?
WDYT?"
756161240,9788,oranagra,2021-11-24T15:01:57Z,"```suggestion

```"
756163048,9788,oranagra,2021-11-24T15:04:01Z,"> 16 times (maybe we need to reduce this value

16 seem too high to me too, maybe 8 or even 4 would work?
just remember it can't be lower since we don't count failures, we're counting files, so the base is 3"
756165717,9788,oranagra,2021-11-24T15:07:03Z,"```suggestion
```"
756166997,9788,oranagra,2021-11-24T15:08:33Z,LGTM
756246041,9788,chenyang8094,2021-11-24T16:29:11Z,"Calling BGREWRITEAOF when AOF is disable is no problem. The only difference is that we will not open a new INCR AOF (similar to not write aof rewrite buf). But we will still update and generate the correct BASE file (it can be AOF or RDB, depending on whether we will enable `aof-use-rdb-preamble`). These have corresponding TCL tests.

I think our ultimate goal is to create BASE file as RDB file (such as `aof-use-rdb-preamble` is enabled by default). But I don't quite understand why `bgrewriteaofCommand` must return err (when AOF is off) or be deleted.



"
756489946,9788,chenyang8094,2021-11-25T00:06:30Z,"@oranagra  I refactored the `openNewIncrAofForAppend` function to achieve consistency guarantee without exit when an error occurs, and I move it before redis-fork. PLZ  review this part again, thanks."
756523137,9788,chenyang8094,2021-11-25T02:07:09Z,"`AOF_REWRITE_LIMITE_THRESHOLD` has been changed to 3, which means that AOFRW may have failed 2 or 3 times continuously. 

`AOF_REWRITE_LIMITE_NAX_DELAY` has been modified to 1440 minutes (1 day). Although I think it may be a bit long and 1440 is not an exponent of 2, but it is fine."
756540862,9788,chenyang8094,2021-11-25T03:06:28Z,"That is what I did before this commit, but I encountered a problem when writing the AOFRW limit test, because I wanted to simulate a scenario where the auto rewrite failed. But after we changed `AOF_REWRITE_LIMITE_THRESHOLD` to 3, it is easy to achieve the goal using kill. So I rolled back the configuration now."
756606530,9788,chenyang8094,2021-11-25T06:39:24Z,"@oranagra I understand what you mean, we let BASE directly become rdb, delete `rewriteAppendOnlyFileRio` and related code. But I'm not sure if this will cause any problems, such as use for analysis or parsing relying on the AOF format, and now it must face both the RDB format (base) and the AOF format (incr). Do we still keep `aof-use-rdb-preamble` to let users make choices?"
756632679,9788,chenyang8094,2021-11-25T07:35:48Z,"@oranagra  Do we have any conclusions about this? 

Can we directly use the original name (after all, it is configured by the user or default),  and then we use `base` or `incr` to indicate the type of this file,  such as `appendonly.aof.1.base`, `appendonly.aof.1.incr`, `appendonly.aof.2.incr`。

The current solution  does not seem to be very good: `appendonly.aof.2.rdb`, `appendonly.aof.3.aof`, it is difficult to understand that a name contains both `rdb` and `aof`. WDYT ?"
756753619,9788,oranagra,2021-11-25T10:18:48Z,"> The only difference is that we will not open a new INCR AOF (similar to not write aof rewrite buf). But we will still update and generate the correct BASE file 

examples of issues: will it create a meta file? what happens if we then restart redis with aof enabled? will it load that AOF file?

Deleting the `aof-use-rdb-preamble` config and the code behind `rewriteAppendOnlyFileRio` is a topic for the next PR.
I do think we wanna delete them, that's a lot of code that is hard to maintain, and i know it gives module authors a hard time.
But anyway, for the purpose of this PR, i just say that if the option of calling bgrewriteaofCommand when AOF is disabled is causing any complications, i think we can delete it right now, since sooner or later we don't want to support that option (it'll be identical to bgsaveCommand)"
756759019,9788,oranagra,2021-11-25T10:25:29Z,"maybe you're right (that a day is too long).
if it fails consistently, then i don't care to delay it for one day, the only problem i see with it is that if the admin fixes the problem (adds more disk / ram space), it'll want to trigger a retry manually ASAP rather than wait for the next interval, and waiting one day may be too long.
so either we add some mechanism to override that (like `BGREWRITEAOF FORCE`), or reduce back to one hour, which may be an acceptable time to wait.
WDYT?

either way, let's be sure to document this in the top comment for the purpose of release notes and other reviewers (which will only look at the description, not the code)"
756762336,9788,oranagra,2021-11-25T10:29:40Z,FYI: just note i wrote `rdb-key-save-delay` (not `aof-child-rewrite-delay`).
756822672,9788,chenyang8094,2021-11-25T11:52:14Z,"Yes, manifest file will be created, because we will generate a BASE AOF/RDB, as long as there is a change in the AOF file, we have to track it.

If redis restarts and AOF is enabled, of course we have to load it. This logic is the same as the original redis。

AOF enable and disable do not affect the creation of the manifest, it only affects whether we write AOF files and whether a new INCR AOF will be generated during AOFRW.

If we are sure to delete the `aof-use-rdb-preamble` configuration and the `rewriteAppendOnlyFileRio` related code, I think I can do it in this PR because they have more or less impact on the current PR. I am happy to do this."
756827028,9788,oranagra,2021-11-25T11:58:22Z,"for now, let's keep the simple approach you have (just use it as base, and possibly generate odd file names).
we can focus on other aspects of this PR and leave that one for last.
then i guess we need to map a few cases and what would be the outcome of each to decide.
i.e. users who upgrade from an old system who use the default config, vs users who upgrade from an old system who have explicitly overwritten it, and how will redis behave on upgrade (should load the old data in either one of the cases)"
756831765,9788,oranagra,2021-11-25T12:05:19Z,"> Yes, manifest file will be created .... This logic is the same as the original redis

ok good.

so it does seem like these (rewrite that generates an AOF format, and the possibility to call BGREWRITEAOF when aof is disabled) aren't complicating this PR too much, and in that case it is better to do that change in a different PR.
it'll make the discussion on these easier (to discuss them separately), and will not block the merging of this PR."
756834907,9788,chenyang8094,2021-11-25T12:09:55Z,"I think 1 hour and 1 day are fine, because we can still use the 'bgrewriteaof' command to execute AOFRW immediately during the limit period.

So we reduce back to one hour, just like: 1, 2, 4, 8, 16, 32, 60 "
756839810,9788,chenyang8094,2021-11-25T12:17:06Z,I have removed the `aof-child-rewrite-delay` configuration and used the `rdb-key-save-delay` instead.
756846275,9788,chenyang8094,2021-11-25T12:26:34Z,"Okay, IAWY."
756879986,9788,chenyang8094,2021-11-25T13:14:59Z,OK
756884444,9788,chenyang8094,2021-11-25T13:20:58Z,@oranagra @yossigo Do you have any suggestions here?
756884617,9788,oranagra,2021-11-25T13:21:11Z,"i see you changed the suffix (saw your last commit), i meant to just use what ever is in the config as base file name and apply the suffixes on it (i.e. that there's no need for now to strip the "".aof"" suffix that the user may have provided).
i.e that i'm ok with ""appendonly.aof.0.rdb""
maybe i don't mind the base/incr suffix, but i think it is redundant (it's also indicated by the meta file).
what the suffix came to denote in my ""design"" is the format inside the file (i.e. considering we'll deprecate the possibility for AOFRW to generate AOF command content, the base file is an RDB format)."
757163072,9788,chenyang8094,2021-11-26T00:03:11Z,"Well, I understand what you mean. One reason for changing `.rdb` to `.base` is because in the current pr, the BASE file may be in AOF or RDB format (depending on the `server.aof_use_rdb_preamble` is yes or no), if BASE is in AOF format but we still end with `.rdb` may be confusing (the user will try this features of this pr when merged, but the next pr hasn't merged yet ). Note that what I said is only in this pr. If we remove `server.aof_use_rdb_preamble` and `rewriteAppendOnlyFileRio` in the next pr, we can say that our BASE is rdb and INCR is aof. So  `appendonly.aof.1.rdb` and  `appendonly.aof.2.aof`  will be certain (reflecting their internal format).

This may be my concern. After all our next PR (remove `server.aof_use_rdb_preamble` and `rewriteAppendOnlyFileRio`) should be merged soon (The workload is not much, but we have to think clearly about the impact it brings). So if we don’t mind this short-term confusing, I am willing to roll back the suffix to the previous version.

@oranagra WDYT？
"
757320913,9788,oranagra,2021-11-26T08:47:33Z,"Theoretically, if we want this PR to be really clean on it's own (and not count on the next change), maybe we can either add a `.aof` or `.rdb` suffix for the rewrite depending on `server.aof_use_rdb_preamble` (to indicate the format).
and if additionally we also want some notation if it's a base or incr, we can keep these too.
then maybe in the next pr we can remove this complication.

on the other hand, i don't mind letting it be one way or the other in the short term, and i'm quite sure we're gonna trim the AOF generation code very soon, i'm just worried that we won't forget it and keep only the ""base"" notation and no indication on the format. so maybe it's better to just add both (not a big overhead in coding)"
757332106,9788,chenyang8094,2021-11-26T09:04:23Z,"Currently `base` and `incr` use separate seq, they can be incremented separately. If `base` also uses the aof suffix(`server.aof_use_rdb_preamble` is no), there may be a file name conflict between `base` and `incr`. If `base` and `incr` share a seq, then seq is not continuously increasing. @oranagra  Which do you think is better?

"
757337039,9788,oranagra,2021-11-26T09:11:58Z,"i guess we can invest a few extra lines of code (which we may clean in the future), and add both ""base"" / ""incr"" notation in the file name, as well as "".aof"" or "".rdb"" to denote the format.
shouldn't be too complicated, and we may consider changing that in a few weeks."
757364347,9788,chenyang8094,2021-11-26T09:51:02Z,"@oranagra WDYT about this?

```
appendonly.aof_1.base.rdb
appendonly.aof_1.base.aof

appendonly.aof_1.incr.aof
appendonly.aof_2.incr.aof
```

In addition, do we necessary to reflect its internal encoding format on the file name (or whether the user really cares about this). we divided the AOF into one BASE file and multiple INCR files (That is Multi Part). We add the `.rdb` suffix just to tell the user that the BASE file is an RDB, but I think it can be explained in the document and release notes(That is, Multi Part = one BASE RDB + many INCR AOFs). This can simplify our naming rules： ` basename_seq.type`

for example:
```
appendonly.aof_1.base
appendonly.aof_1.incr
appendonly.aof_2.incr
appendonly.aof_3.incr
```
or

```
anyname_1.base
anyname_1.incr
anyname_2.incr
anyname_3.incr
```

"
757881784,9788,oranagra,2021-11-28T11:24:26Z,"for some reason i prefer the suffix to denote the format, maybe i'm looking too much into it, but what complications does it add? is it more than some 4 lines of code?"
757893037,9788,chenyang8094,2021-11-28T12:56:18Z,"I have modified the PR according to the rules mentioned above.

```
appendonly.aof_1.base.rdb
appendonly.aof_1.base.aof

appendonly.aof_1.incr.aof
appendonly.aof_2.incr.aof
```"
757902946,9788,yossigo,2021-11-28T14:13:32Z,"```suggestion
    sdscatprintf((buf), ""%s %s %s %lld %s %c\n"",                \
                 AOF_MANIFEST_KEY_FILE_NAME, (info)->file_name, \
                 AOF_MANIFEST_KEY_FILE_SEQ, (info)->file_seq,   \
                 AOF_MANIFEST_KEY_FILE_TYPE, (info)->file_type)
```

Safer use of macro arguments. BTW do we really need a macro here?"
757903567,9788,yossigo,2021-11-28T14:18:35Z,Consider handling of lines longer than buf - maybe even treat it as an error?
757903725,9788,yossigo,2021-11-28T14:19:40Z,Consider forward compatibility and just ignore extra args?
758099526,9788,chenyang8094,2021-11-29T07:39:36Z,"@oranagra PLZ review this part again and see if there are any more problems? thanks.

I will remove `base` and `incr` suffix in the next PR (remove `server.aof_use_rdb_preamble` and `rewriteAppendOnlyFileRio` related code), so as to use the following rules:

```
appendonly.aof_1.rdb
appendonly.aof_1.aof
appendonly.aof_2.aof
```
"
758177201,9788,yossigo,2021-11-29T09:33:14Z,"```suggestion
/* Replay an append log file. On success AOF_OK is returned,
```"
758178138,9788,yossigo,2021-11-29T09:34:30Z,"```suggestion
            serverLog(LL_WARNING,""Failed to open the append log file %s: %s"",filename,strerror(errno));
```

The error message was incorrect, it may exist but fail to open for other reasons."
758214708,9788,oranagra,2021-11-29T10:13:11Z,LGTM
758328557,9788,yossigo,2021-11-29T12:46:24Z,"Consider some decoupling, such as
* Populate an arbitrary `aofManifest` rather than directly access `struct server`
* Returns an error and let the caller decide on how to handle it"
758330348,9788,yossigo,2021-11-29T12:48:46Z,"Why is this necessary? If we want to distinguish a non-existing file from other errors, we can just consult `errno` no?"
758332334,9788,yossigo,2021-11-29T12:51:27Z,"What is the purpose of the additional `redis_stat`? If all we need is to distinguish an error from a non-existing file, we could just look at `errno` no?"
758334632,9788,yossigo,2021-11-29T12:54:36Z,Is there any specific reasoning behind both using a key/value line structure *and* insisting on the order of keys per line?
758338142,9788,yossigo,2021-11-29T12:59:21Z,"Probably safe to simply assert here, AFAIR it should only fail if `zmalloc()` fails - which should end up in an earlier panic anyway."
758343160,9788,yossigo,2021-11-29T13:06:31Z,We probably want to keep it dirty if write failed.
758343374,9788,yossigo,2021-11-29T13:06:53Z,"```suggestion
/* When AOFRW success, the previous BASE and INCR AOFs will 
```"
758344850,9788,yossigo,2021-11-29T13:08:55Z,"```suggestion
    /* Dup a temp aof_manifest to modify. */
```"
758348200,9788,yossigo,2021-11-29T13:13:10Z,"Perhaps we should consider a smaller max delay. Even if we use 5 minutes, that's max 288 files per day which is still not a HUGE number of files (assuming someone is monitoring the system at reasonable interval)."
758386138,9788,yossigo,2021-11-29T13:59:45Z,"Consider logging ""file [x/n]"" to help troubleshooting and give better visibility into the loading process?"
758440240,9788,oranagra,2021-11-29T14:55:43Z,"LOL.. i was arguing for a day.
i think there are cases where something can fail for weeks and no one will notice.
as discussed in another thread, if the admin solves the problem he can run BGREWRITEAOF instead of waiting for the next interval, so why make it that short?"
758825536,9788,chenyang8094,2021-11-29T23:55:40Z,"I think it is necessary. Although there is only one `sdscatprintf` function in the macro, the definition of the format is repeated. Imagine that we need to change the format of the manifest in the future (for example, add new fields in the back), then we only need to change the macro. "
758828351,9788,chenyang8094,2021-11-30T00:02:28Z,"have removed 'argc != 6' and add 'argc < 6',  this will allow we to add new fields in the future."
758856226,9788,chenyang8094,2021-11-30T01:15:16Z,Added
758857987,9788,chenyang8094,2021-11-30T01:20:16Z,"The situation you mentioned has been handled in the if branch, and definitely doesn't exist error in the else branch (this code is currently redis used, I did not modify it)"
758863343,9788,chenyang8094,2021-11-30T01:34:33Z,"1. I think there is no need to pass the aofManifest parameter here. As you can see, in all the functions I implemented, some passed the aofManifest parameter and some did not. The principle is that if it is a public API, such as being used in server.c, then it is the top-level API, and then it can directly access `server.aof_manifest`. Other functions with aofManifest parameters , They are mainly used internally (aof.c), and may handle two cases of `server.aof_manifest` and `temp_manifest`, so they need a variable parameter.

There are similar top-level APIs (declared in server.h):
```
void aofLoadManifestFromDisk(void);
void aofOpenIfNeededOnServerStart(void);
int aofDelHistoryFiles(void);
int aofRewriteLimited(void);
```
As you can see, if I pass all server.xxxx parameters in the main function of server.c, it will seem meaningless and the style is not uniform.
```
moduleInitModulesSystemLast();
moduleLoadFromQueue();
ACLLoadUsersAtStartup();
InitServerLast();
aofLoadManifestFromDisk();
loadDataFromDisk();
aofOpenIfNeededOnServerStart();
aofDelHistoryFiles();
```

2. I don't think a return value is needed here. The reason is that manifest is a very important file (even more important than `redis.conf`), so once an error occurs, it is safest to exit directly and print the error message.

The following is the function declaration for loading redis.conf:
```
void loadServerConfig(char *filename, char config_from_stdin, char *options);
```"
758866266,9788,chenyang8094,2021-11-30T01:42:42Z,Modified
758866789,9788,chenyang8094,2021-11-30T01:44:04Z,Modified
758866972,9788,chenyang8094,2021-11-30T01:44:36Z,Fixed
758867162,9788,chenyang8094,2021-11-30T01:45:01Z,Fixed
758868972,9788,chenyang8094,2021-11-30T01:49:59Z,"Yes, I discussed with @oranagra . It was originally one day. I changed it to 1 hour later. In any case, once the user finds and solves the related problem, he can use BGREWRITEAOF to execute AOFRW immediately without waiting for the limit. So I think there is no need to change here. @yossigo WDYT?"
758870727,9788,chenyang8094,2021-11-30T01:55:05Z,"I may not understand your question too well, but I think the manifest is a meta file of AOF, which requires a strict format restriction. And the manifest is different from `redis.conf`. `redis.conf` allows users to modify and customize by themselves, but in theory the manifest file can only be generated and modified by redis, so the manifest does not need flexibility, it needs a definite format. I don't know if my answer can solve your question, and I look forward to your feedback."
758876763,9788,chenyang8094,2021-11-30T02:12:25Z,"First of all, I wrote this code with reference to the existing redis code (similar writing in many places). In addition, I have researched it myself. I think it is not a safe practice to use errno directly.
I give you a ref link:
https://stackoverflow.com/questions/52178334/will-errno-enoent-be-a-sufficient-check-to-check-if-file-exists-in-c"
758884107,9788,chenyang8094,2021-11-30T02:33:06Z,"Do we really need this? Currently, we can get the progress of loading through `server.loading_loaded_bytes` and `server.loading_loaded_perc` (print in redis info). In addition, if there is an error in the intermediate loading, we will also print out the file name with the error. I think the information we printed is enough now, @oranagra @yossigo WDYT?"
759319537,9788,oranagra,2021-11-30T14:15:37Z,"I think Yossi meant that if the manifest lines look like: 
```
file <filename> seq <sequence> type <type> 
```
it implies that they're pairs of key and value, and can be ordered differently, in which case the parser can iterate on the pairs in an if-else chain inside a while loop and don't care about the order.

if it is mandatory that the order is fixed, then we may not need the ""key names"", and just do
```
<file> <sequence> <type>
```

i.e. regardless of the fact users aren't expected to edit it. the fact we chose this flexible format, means we better also have a flexible parser."
759332980,9788,chenyang8094,2021-11-30T14:29:23Z,"Yes, the manifest format is fixed, I think we do not allow the following situations:
```
file appendonly.aof_1.incr.aof seq 1 type i
seq 2 type i file appendonly.aof_2.incr.aof
type i file appendonly.aof_3.incr.aof seq 3
```
The reason why it is displayed in the form of key-value (not just value) is because the user may often look at this file (after all, it is plain text and readable), and the key can clearly tell user the meaning of value. Imagine that when we add other information to the manifest in the future, having a strict key identification can make it easier for us to do format verification. And, in the manifest file, i think we should not lose readability by skimping on a few bytes."
759342340,9788,oranagra,2021-11-30T14:38:47Z,"the code we're looking at, prints a message when the file is present and was loaded successfully,
and obviously when there's some parsing error, it prints a log message to (inside the function).
besides that i see the function also has a specific print when the file is missing, and when it's empty.
so i think that log-wise we're covered.

i do see that we fail the loading when the file is present and empty, and maybe that's not good?
the old code used to succeed when a file was either missing or empty.
for the new code, we don't expect it to be missing (if we added it to the manifest, it should be there), but it could be empty (if there's no traffic after rewrite started).

maybe the base file must never be empty, since that's either an RDB, or an AOF with at least a SELECT statement?
but what if the server just started (a new deployment with no pre-existing data or persistence files), and then it is restarted after it created the AOF file and didn't yet process any write command?

i suppose the same could also be with upgrades (no manifest file).
and i guess this concern will be resolved once we implement #9794 and always generate an RDB as base (even when starting empty)."
759397549,9788,oranagra,2021-11-30T15:32:31Z,"i agree, but changing the parsing code to use a while with if-else chain will not complicate the parser much, and will make it flexible."
759789250,9788,chenyang8094,2021-12-01T01:36:52Z,"@oranagra I think you may have misunderstood it. The current implementation is: Only when AOF does not exist will load error, when it is empty, we will directly load the next one, The following is my handling of the return value:
```
 /* If an AOF exists in the manifest but not on the disk, we consider 
 * this to be a fatal error. */
if (ret == AOF_NOT_EXIST) ret = AOF_FAILED;

if (ret != AOF_OK && ret != AOF_EMPTY) {
    goto cleanup;
}
```"
759824288,9788,chenyang8094,2021-12-01T03:19:46Z,"I have modified it to use for loop, Plz review this part  again, thanks."
759932120,9788,oranagra,2021-12-01T07:54:30Z,"yes, you're right, i misinterpreted that code.
so we skip empty files, and fail on non existing ones, and either of the 4 states (missing, empty, error, success) there is a log print.
i think we're good, but maybe i'm missing Yossi's intention in the original comment."
759933974,9788,oranagra,2021-12-01T07:57:25Z,"LGTM.
maybe add a comment next to the last `else` and the `<6` to note that it was done for forward compatibility."
770526837,9788,oranagra,2021-12-16T13:13:50Z,"depending on how often this will be used, maybe we should pre-allocate the `sdsnew` to be reasonably big, so we don't re-allocate it twice in sdscat.
i.e. maybe do `sdsnewlen(SDS_NOINIT)`.

same can be done in dirRemove"
770893232,9788,oranagra,2021-12-16T20:18:32Z,"I think the temp dir must be based on the server.aof_filename pattern, and not a constant one.
otherwise, if there are two servers in the same dir, their temp upgrade dir clash."
770895001,9788,oranagra,2021-12-16T20:21:40Z,"does that cause a restart of the upgrade? looks like we're exiting with an error?
maybe i'm missing something (looking at the diff of this commit in GH rather than the full source tree)"
772143017,9788,oranagra,2021-12-20T07:50:38Z,"ohh, looking at this again, i realize the error is not related to the comment above it (the upgrade restarts only if we successfully remove the dir, but if we can't then we fail and exit.
i suppose this is not expected to ever happen."
772173860,9788,sundb,2021-12-20T08:43:43Z,"Here will crash in sentinel mode, it does not call `aofLoadManifestFromDisk`."
772742569,9788,chenyang8094,2021-12-21T00:08:14Z,"fixed, thx."
773676185,9788,oranagra,2021-12-22T08:05:04Z,why not `.`?
773680879,9788,oranagra,2021-12-22T08:13:19Z,"```suggestion
     * 2. If the 'server.aof_dirname' directory exists but the manifest file is missing
```"
773682145,9788,oranagra,2021-12-22T08:15:34Z,"indentation and line break
```suggestion
             !strcmp(am->base_aof_info->file_name, server.aof_filename) && !aofFileExist(server.aof_filename)))
        {
```"
773684494,9788,oranagra,2021-12-22T08:19:44Z,"maybe it's a better idea actually rename it to the normal format and add a `base` suffix etc, and not just move it to the folder?

we probably can't afford to put a suffix on it (we don't know the content), though, we maybe that's not a good idea, unless we conclude to remove the suffix from our file name template anyway.

note that if we do that, we need to relax the upgrade failure recovery conditions in `strcmp(am->base_aof_info->file_name, server.aof_filename)`, but i'm not sure that's a problem."
773741198,9788,chenyang8094,2021-12-22T09:36:34Z,"Because I want to make them more unified:
```
appendonly.aof_1.base.aof 
appendonly.aof_1.incr.aof 
appendonly.aof_manifest
```"
773761166,9788,oranagra,2021-12-22T10:03:51Z,"ok, in my eyes it's a table:
```
base-prefix      idx   role   format
appendonly.aof   1     base   aof 
appendonly.aof   1     incr   aof 
appendonly.aof                manifest
```
maybe if we change the `_` to `.`, or change the first `.` to `_` it'll make more sense?
i.e. either:
`appendonly.aof.1.base.aof`
or
`appendonly.aof_1_base.aof`"
773795695,9788,chenyang8094,2021-12-22T10:54:45Z,"No, we cannot add a suffix when rename here,  because this is the only way to identify the interrupted upgrade.

`am->base_aof_info->file_name` is same with `server.aof_filename` only appears when upgrading.

Otherwise, if a file with a suffix appears in the manifest but does not exist in the AOF dir, we consider this to be a serious error and the process exits directly."
773799466,9788,chenyang8094,2021-12-22T11:00:28Z,"I don't like to have too many `.` ,  it can easily lead to misunderstandings because it contains the `.aof` `.1` `.base` `.aof` suffix"
773799785,9788,chenyang8094,2021-12-22T11:00:59Z,Fixed.
773803755,9788,chenyang8094,2021-12-22T11:07:33Z,"I think it is not a strong requirement to include the encoding format in file name. We can add the format field in the manifest, if anyone is interested in this. 

aof dir:
```
 appendonly.aof_1.base 
 appendonly.aof_1.incr  
 appendonly.aof_2.incr  
 appendonly.aof_manifest
```

the content of manifest:
```
file appendonly.aof_1.base seq 1 type b format rdb
file appendonly.aof_1.incr seq 1 type i format aof
file appendonly.aof_2.incr seq 2 type i format aof
```"
773837992,9788,oranagra,2021-12-22T12:06:52Z,"It's not the ""only way"" we identify it. it's at the very least a combination of a file in the manifest that's missing on the disk, and the presence of the old (legacy location) file on the disk. but i do agree that this make our interrupted upgrade detection better, so i'll drop it.

p.s. if we wanted we could have also added an indication in the manifest that this is the upgrade file."
773838756,9788,oranagra,2021-12-22T12:08:20Z,i think the indentation change is in some way missing (because of the parenthesis)
773852970,9788,oranagra,2021-12-22T12:32:42Z,"i don't see the problem with multiple `.` in the file name.. it's not uncommon, and it's a well established pattern to only look past the last `.` for the file format, so in that respect, in my eyes the manifest is the format and should use `.`
also, there are already two `.` in your other file patterns, so i'm not sure what's bothering you about it.
if the other `_` bother us, we can change it to `.` as well.

as for the format suffix, i don't think it should be part of the manifest, i think it should be in the file name, and what's bothering us is that we have two mentions of the ""format"" in the file name (`.aof` can appear twice)"
773858136,9788,chenyang8094,2021-12-22T12:41:34Z,"I think it is necessary for us to vote for this rule. Let me summarize that we now have blow options (@oranagra Maybe you have other plans to add):

**Note**: we have concluded that the original `appendfilename` (default `appendonly.aof`) will be used as the `basename` of the new file name, and we **cannot do any trim**  operations on `appendfilename`, so we are discussing how to combine the suffix part of the new name.

1.  Use  `. ` to combine `basename` and `suffix`
```
 appendonly.aof.1.base.aof 
 appendonly.aof.1.incr.aof 
 appendonly.aof.2.incr.aof 
 appendonly.aof.manifest
```

2. Use  `_` to combine `basename` and `suffix`
```
 appendonly.aof_1.base.aof 
 appendonly.aof_1.incr.aof 
 appendonly.aof_2.incr.aof 
 appendonly.aof_manifest
```

3. Use  `_` to combine `basename` and `suffix` and remove format `suffix`
```
 appendonly.aof_1.base 
 appendonly.aof_1.incr
 appendonly.aof_2.incr
 appendonly.aof_manifest
```

4. Use  `_` to combine `basename` and `suffix`  and remove format `suffix`, and add format field  to manifest file.
```
 appendonly.aof_1.base 
 appendonly.aof_1.incr  
 appendonly.aof_2.incr  
 appendonly.aof_manifest
```
and the content of manifest (add format field ):
```
file appendonly.aof_1.base seq 1 type b format rdb
file appendonly.aof_1.incr seq 1 type i format aof
file appendonly.aof_2.incr seq 2 type i format aof
```

5. Use  `. ` to combine `basename` and `suffix`, remove format `suffix`, and remove one more  `.` to simplify naming
```
 appendonly.aof.base1
 appendonly.aof.incr1
 appendonly.aof.incr2
 appendonly.aof.manifest
```
and the content of manifest (add format field ):
```
file appendonly.aof.base1 seq 1 type b format rdb
file appendonly.aof.incr1 seq 1 type i format aof
file appendonly.aof.incr2 seq 2 type i format aof
```

@oranagra @yossigo @soloestoy @madolson Please vote which one of the above are more satisfactory to you, or if you have a better suggestion, thank you."
773873218,9788,oranagra,2021-12-22T13:07:19Z,"i had a discussion about this (the annoying presence of "".aof"" in file names derived from `appendfilename`) with @yoav-steinberg to try to see if we can come up with something.

one idea that came up is this:
1. when creating the manifest on upgrade, use `server.aof_filename`, but without any "".aof"" suffix if present
2. when creating the base file entry for the upgrade in the manifest, do the same (remove the "".aof"" suffix)
3. after when moving the existing AOF file into the folder, do the same.
4. after the upgrade is done (rename is completed), and on normal startup if there was no upgrade, we actually trim the "".aof"" suffix from `server.aof_filename` (modify the variable)

so now, if someone does `CONFIG GET appendfilename` or `CONFIG REWRITE`, the value of the config no longer has the `.aof` suffix.

so if i had a concern that that someone will write a bash script doing
```
cp `config get appenddirname`/`config get appendfilename` <some destination>
```
this would still work.

notes:
* i don't particularly like this idea (yet)
* I must note that we have other configs for which the CONFIG GET value is mutated. e.g. `CONFIG SET maxmemory 1g` will translate to a different value in CONFIG GET.
* it would still look ugly for anyone looking at the redis.conf file that's shipped with redis (mentioning `appendonly.aof`, in case there are no config rewrites), but what we can do is delete that line from the default config, and only rely on the default value hard-coded in redis.
* we can update the comment in redis.conf to just mention `# appendfilename appendonly` (without the suffix)
* this means that the only way a user of a new deployment to observe that the hard coded default value is with `.aof` is by looking at the code, since at startup we change it right after handling the upgrade procedure, that default is not observable in any way.
* unlike the `maxmemory` config, this one is immutable, so you can't observe that you do CONFIG SET, and get a different value in CONFIG GET."
773895207,9788,chenyang8094,2021-12-22T13:41:27Z,"I don’t think it’s a good idea to modify the user’s configuration without authorization. `appendfilename` and `maxmemory` are different. If we trim `appendfilename`, we won’t be able to distinguish between these two configurations: `appendfilename appendonly `and `appendfilename appendonly.aof`."
773897506,9788,oranagra,2021-12-22T13:45:00Z,"i agree..
i don't see any other good way to get rid of "".aof"" we have in the middle of the file names we create.

I vote for 1"
774487221,9788,oranagra,2021-12-23T10:51:06Z,"commenting here, for a discussion about another block in the config that i can't comment on (no changes).

```
# When rewriting the AOF file, Redis is able to use an RDB preamble in the
# AOF file for faster rewrites and recoveries. When this option is turned
# on the rewritten AOF file is composed of two different stanzas:
#
#   [RDB file][AOF tail]
#
# When loading, Redis recognizes that the AOF file starts with the ""REDIS""
# string and loads the prefixed RDB file, then continues loading the AOF
# tail.
aof-use-rdb-preamble yes
```

first, the term ""preamble"" is no longer applicable, since they're now in different files.
but obviously we can't rename the config.
what we can do, is update the documentation, which should state that this config determines if the REWRITE will generate an RDB format, or an AOF (RESP) format."
774494703,9788,yossigo,2021-12-23T11:04:13Z,"I'm also in favor of 1.

I don't see the `.aof` as such a big problem as it only affects users who transition from an older version and don't bother updating the configuration file. It's important not to do something terribly wrong in this case, but having less-than-ideal file naming seems reasonable to me."
774542121,9788,yangbodong22011,2021-12-23T12:35:42Z,"I voted for 5, just from my personal aesthetic point of view."
774545399,9788,soloestoy,2021-12-23T12:41:49Z,"First of all, I still don't like the method that using `appendfilename` as prefix, it makes the new files' name ugly and hard to understand. I prefer using file lock (i.e. a unified `LOCK` file in folder), if user start some redis instances in the same folder, just log and exit.

But if you insist on handling some strange Schrodinger's scenarios and want suffix, I vote for 2.

Because use `.` to combine may lead to a problem, if someone like me don't like the prefix, he or she may set the prefix `appendfilename` to empty, file start with `.` is invisible."
774560029,9788,oranagra,2021-12-23T13:09:10Z,"i don't see why anyone would set the prefix to empty.
you'd better set it to just ""appendonly"", or ""my_redis"", or ""redis-1"".

anyway, i don't mind to use `_` in between the different parts of the template, but i think the last part should be the file format (obviously using `.`).

so maybe this could be a plan:
```
 appendonly.aof_1_base.aof 
 appendonly.aof_1_incr.aof 
 appendonly.aof_2_incr.aof 
 appendonly.aof_manifest.csv
```

note that the manifest is now a CSV instead of being space separated.
and maybe that brings another concern: whatever we choose ad a separator, we must make sure the user doesn't include in his file names `appendfliename` since it'll mess up our parsing (i.e. if he uses space or comma)"
774824722,9788,madolson,2021-12-24T00:52:18Z,"Coming in late, I would also prefer option 1, but don't feel strongly between option 1 and 2."
774905688,9788,chenyang8094,2021-12-24T07:15:32Z,"```
# The BASE AOF encode type.
# 
# When rewriting the AOF file, Redis will generate a new INCR file and a 
# BASE file. INCR file is always AOF (RESP) encoded , but BASE file can be 
# in AOF format and RDB format. When this option is turned on, the BASE file
# use RDB format (the file name uses .rdb as the suffix), otherwise use AOF 
# format (the file name uses .aof as the suffix).
# 
# When loading, Redis recognizes that the BASE AOF file starts with the ""REDIS""
# string and loads the BASE RDB file, then continues loading the INCR AOF
# file.
aof-use-rdb-preamble yes
```"
774949981,9788,oranagra,2021-12-24T09:34:19Z,"I don't think the documentation should refer to ""BASE"" and ""INCR"" as terms or format, but rather use plain English (""base"" and ""incremental"")
```suggestion
# into two types, one is the the base type, it represents an initial (RDB
# or AOF format) snapshot of the data present when the AOF is rewritten. The 
# others are incremental type, they contain the incremental commands since the last 
# AOF rewrite.
```"
774951964,9788,oranagra,2021-12-24T09:40:02Z,"There was too much detail here IMHO.
users and admins don't need to understand what RESP is (that's for client library developers). and don't care about the file format header bytes.
```suggestion
# The base AOF rewrite encodeing type.
# 
# When rewriting the AOF file, Redis will generate a new incremental file and a 
# new base file. The base file can be in AOF (commands) format or RDB
# (serialized) format. When this option is turned on, the base file uses RDB
# format, otherwise it uses AOF format.

```"
775012377,9788,chenyang8094,2021-12-24T13:18:08Z,Fix
775012414,9788,chenyang8094,2021-12-24T13:18:15Z,Fix
775051173,9788,oranagra,2021-12-24T16:27:58Z,"you missed one 8-)
```suggestion
# into two types, one is the the base type, it represents an initial (RDB
```"
775208493,9788,oranagra,2021-12-26T08:01:26Z,i concluded that it's ok to just strip down this info field.
775208776,9788,oranagra,2021-12-26T08:04:42Z,"ohh, i now see that since i wrote down this comment we've re-introduced that field and it's always set to 0 (and the top comment already indicates that).
did we decide that in some other comment?
@yossigo WDYT? keep a dead info field always set to 0, or trim it? (i'm leaning towards trimming it)"
775212338,9788,oranagra,2021-12-26T08:42:49Z,"```suggestion
             !strcmp(am->base_aof_info->file_name, server.aof_filename) && !aofFileExist(server.aof_filename))) 
```"
775213392,9788,oranagra,2021-12-26T08:54:03Z,"doesn't this mean the max limit will be 32?
i suppose we should remove the condition for `limit_deley_minutes < AOF_REWRITE_LIMITE_NAX_MINUTES` and always do the ` <<= `.

p.s. since we're aiming to multiply by 2, and not do some bit manipulation, i think the code will be clearer if we use ` *= 2`. (performance is all the same anyway)"
775214574,9788,oranagra,2021-12-26T09:06:06Z,this division always gave me the shivers. maybe it's time to change that constant to 1024?
775215030,9788,oranagra,2021-12-26T09:10:24Z,"i think we must reflect that truncation in the return value, and let the caller handle it.
if this was not the last AOF file in the list, we can't afford to continue to handle the next one.
we can choose between:
1. skip any remaining AOF files.
2. fail with an error since we only expect truncation in the last file

i think i prefer 2.
maybe we should reflect this decision in the PR top comment, for other reviewers to see."
775218990,9788,oranagra,2021-12-26T09:46:43Z,why is this reorder needed? the database is empty during this rewrite anyway.
775219093,9788,oranagra,2021-12-26T09:47:50Z,"isn't that the default? why do we provide file name and dir name here?
just to be explicit since the test refers to them?
maybe instead we should make the test use CONFIG GET?"
775219356,9788,oranagra,2021-12-26T09:50:21Z,"maybe we should put this in utils.tclor in aofmanifest.tcl? (using CONFIG GET)
i imagine there would be other tests that want to access the last aof file."
775219491,9788,oranagra,2021-12-26T09:51:55Z,"why was that sleep needed?
if there's some timing issue, i'd rather add some `wait_for` and finish sooner rather than add another 1 second delay here.
also, if it is really needed, let's add a comment why."
775224918,9788,oranagra,2021-12-26T10:43:27Z,another case where i'm not clear as to why we need to override default configs with the same value
775224952,9788,oranagra,2021-12-26T10:43:50Z,why are all of these needed here? AFAICT they're unused. am i missing anything?
775225503,9788,oranagra,2021-12-26T10:49:27Z,same question about default configs (here and in the test below)
775225604,9788,oranagra,2021-12-26T10:50:29Z,"that's the same pattern we used in expire.tcl which i suggested to extract to a utility function, right?
same for the test just below, and another one further down."
775225928,9788,oranagra,2021-12-26T10:54:03Z,"maybe we should have `create_aof` implicitly create the folder when needed?
maybe we could pass it an optional argument to of a string to put in the manifest? or maybe just an optional boolean, in case the manifest content is the same in all the tests that do this?"
775225958,9788,oranagra,2021-12-26T10:54:24Z,same question about default configs.. why do we need to override them?
775227953,9788,oranagra,2021-12-26T11:13:26Z,"why did you choose to print to stderr here and not to the log file.
note that if redis was started daemonized, then these prints go nowhere.
at the time this code is executed (in loadDataFromDisk), the old code in redis used to print failures to the log file."
775230416,9788,yoav-steinberg,2021-12-26T11:38:22Z,"Try to avoid using the term ""rewrite"" before explaining it.
```suggestion
# or AOF format) snapshot of the data present when the AOF is initially created (or rewritten). The 
```"
775232044,9788,oranagra,2021-12-26T11:54:28Z,"i see many of the tests below are missing some assertion to check that we successfully hit the scenario we aimed for.
i.e. match some log message of the expected failure."
775232825,9788,oranagra,2021-12-26T12:01:53Z,"maybe it'll be better if each of these tests is in a test scope.
like so:
```tcl
test {name / description} {
    create_aof_dir ...
    create_aof_manifest ....

    start_server_aof [list dir $server_path] {
        wait_for_condition 100 50 {
            ! [is_alive $srv]
        } else {
            fail ""AOF loading didn't fail""
        }
        assert_something ...
    }

    clean_aof_persistence $aof_dirpath
}
```
i.e. the server is started inside the test and not vice versa.
p.s. this way if the test has some skip tag, the server setup and creation is skipped too"
775233218,9788,oranagra,2021-12-26T12:04:57Z,"do we also have a test that attempts to load an old preamble-rdb file?
i.e. put one in the assets folder and attempt to upgrade from that."
775233394,9788,oranagra,2021-12-26T12:06:36Z,can't we use `set client [redis_client]`?
775233637,9788,oranagra,2021-12-26T12:09:04Z,"that's a long sleep.
maybe this was copied from somewhere, so i'd like to use this opportunity to promote this into a utility function.
it can use shorter sleeps (10ms), and do the verbose puts only in one of 100 iterations"
775234037,9788,oranagra,2021-12-26T12:11:27Z,"let's add some comment that we synthetically create a layout of an interrupted upgrade (interrupted before the rename).
and even describe that it's a folder containing manifest pointing to a missing file, where e file is still outside the folder."
775234483,9788,oranagra,2021-12-26T12:16:11Z,let's add an assertion for some log message here too (all tests that expects the server to fail starting)
775234957,9788,oranagra,2021-12-26T12:20:15Z,"i think it would be better if the two servers are nested (running at the same time).
```tcl
test {name} {
    setup code....
    start_server 1 {
        start_server 2 {
            all the checks referring to [r -1 command] and [r 0 command]
        }
    }
}
```"
775236162,9788,oranagra,2021-12-26T12:30:47Z,"that's a lot of time, let's increase the check interval (`wait_for_condition 1000 10` should be ok, right?)"
775236426,9788,oranagra,2021-12-26T12:32:36Z,"maybe use this opportunity to check that the temp files are deleted?
(by counting the number of files in the folder)"
775236875,9788,oranagra,2021-12-26T12:36:46Z,"```suggestion
        test ""AOF rewrite doesn't open new aof when AOF turn off"" {
```"
775237242,9788,oranagra,2021-12-26T12:40:13Z,"```suggestion
        test ""AOF can produce consecutive sequence number after reload"" {
```"
775237627,9788,oranagra,2021-12-26T12:43:41Z,"1. let's make sure that all of the above steps got to complete while the `rdb_bgsave_in_progress` is still 1.
2. setting the key-save-delay will not cause the fork to detect it, and we'll still have to wait for it to complete. i guess we have to kill it to proceed."
775237762,9788,oranagra,2021-12-26T12:45:26Z,"let's change the constant sleep with a wait_for_condition.
we can look at the `aof_rewrite_scheduled` INFO field (i.e. assert that it's 1 before, and then wait for it to go to 0 before doing `waitForBgrewriteaof`"
775238110,9788,oranagra,2021-12-26T12:48:28Z,"i'd like to increase the interval (10ms).
the rewrite check in serverCron happens every tick."
775238701,9788,oranagra,2021-12-26T12:54:06Z,"the lowest throttle is 1 minute, right?
and in the absence of a throttle, redis would have started a new rewrite every 10 ms, right?
so maybe we can have a shorter sleep?"
775238900,9788,oranagra,2021-12-26T12:55:35Z,maybe we can also assert to check that there's no `aof_rewrite_in_progress`?
775238976,9788,oranagra,2021-12-26T12:56:29Z,"maybe assert here that aof_rewrite_in_progress is 0 too?
i.e. just to make it clear that the next bgrewriteaof is gonna be the one that succeeds."
775239610,9788,oranagra,2021-12-26T13:02:42Z,"@yoav-steinberg i'm not sure which version did you review?
IIUC we eliminated the references to uppercase BASE and INCR in the docs.
maybe your phrasing comments are still applicable, but maybe you should dismiss them and make new suggestions base on the latest?"
775244034,9788,chenyang8094,2021-12-26T13:42:49Z,OK
775244132,9788,chenyang8094,2021-12-26T13:44:16Z,Changed to 100ms
775244336,9788,chenyang8094,2021-12-26T13:45:59Z,OK
775245004,9788,chenyang8094,2021-12-26T13:52:19Z,Fixed
775248408,9788,yoav-steinberg,2021-12-26T14:22:03Z,"```suggestion
# base AOF file was created.
```"
775248527,9788,yoav-steinberg,2021-12-26T14:23:04Z,"```suggestion
# The base AOF encodeing type.
```"
775248667,9788,yoav-steinberg,2021-12-26T14:24:24Z,"```suggestion
# When creating the initial AOF file (or rewriting it), Redis will generate a new incremental file and a 
```"
775297024,9788,chenyang8094,2021-12-27T00:01:57Z,OK
775297422,9788,chenyang8094,2021-12-27T00:08:08Z,OK
775297490,9788,chenyang8094,2021-12-27T00:08:40Z,OK
775297652,9788,chenyang8094,2021-12-27T00:10:35Z,OK
775298021,9788,chenyang8094,2021-12-27T00:15:28Z,OK
775302156,9788,chenyang8094,2021-12-27T00:58:56Z,OK
775403304,9788,yossigo,2021-12-27T09:01:09Z,"I think we can trim it. `INFO` is already free to omit fields depending on settings, so I guess clients should be used to not finding specific fields in some cases."
775452024,9788,chenyang8094,2021-12-27T11:15:47Z,"Yes, under normal circumstances, only the last AOF will have abnormal MULTI/EXEC, i prefer 2 too."
775455266,9788,oranagra,2021-12-27T11:26:16Z,"ok.. in this case it's a field that's unlikely to be used by clients (apps), just monitoring software.
@chenyang8094 please trim it (again), and update the top comment."
775472174,9788,chenyang8094,2021-12-27T12:07:02Z,"Yes, rollback it."
775472980,9788,chenyang8094,2021-12-27T12:09:35Z,Here I refer to the previous style. Maybe when someone will change the default value in the future?
775474545,9788,chenyang8094,2021-12-27T12:14:40Z,"Removed ,maybe added when i debug."
775475504,9788,chenyang8094,2021-12-27T12:17:37Z,Removed.
775704537,9788,chenyang8094,2021-12-28T02:59:18Z,OK
775707375,9788,chenyang8094,2021-12-28T03:16:10Z,Added
775707658,9788,chenyang8094,2021-12-28T03:17:51Z,"No, will report err:
```
Executing test client: key ""host"" not known in dictionary.
key ""host"" not known in dictionary
    while executing
""dict get $srv $property""
```"
775722964,9788,chenyang8094,2021-12-28T04:48:35Z,Changed to waitForBgrewriteaof
775723305,9788,chenyang8094,2021-12-28T04:50:20Z,OK
775723545,9788,chenyang8094,2021-12-28T04:51:54Z,OK
775723703,9788,chenyang8094,2021-12-28T04:52:38Z,OK
775726471,9788,chenyang8094,2021-12-28T05:06:37Z,Added
775727759,9788,chenyang8094,2021-12-28T05:12:39Z,OK
775731527,9788,chenyang8094,2021-12-28T05:31:23Z,Added
775731686,9788,chenyang8094,2021-12-28T05:31:56Z,Added
775735126,9788,chenyang8094,2021-12-28T05:47:55Z,OK
775737327,9788,chenyang8094,2021-12-28T05:57:10Z,Added
775738505,9788,chenyang8094,2021-12-28T06:02:13Z,Just imitate the previous style` {appendonly {yes} appendfilename {appendonly.aof}` 
775738661,9788,chenyang8094,2021-12-28T06:02:53Z,Just imitate the previous style {appendonly {yes} appendfilename {appendonly.aof}
775738687,9788,chenyang8094,2021-12-28T06:02:58Z,Just imitate the previous style {appendonly {yes} appendfilename {appendonly.aof}
775744059,9788,chenyang8094,2021-12-28T06:24:20Z,Added
775745544,9788,chenyang8094,2021-12-28T06:29:44Z,"When we initialize (for example, when redis is started), we will open INCR AOF instead of creating a new BASE, so I think the original comments is fine."
775745694,9788,chenyang8094,2021-12-28T06:30:17Z,"i think they mean the same thing, right?"
775749312,9788,chenyang8094,2021-12-28T06:43:47Z,OK
775751807,9788,chenyang8094,2021-12-28T06:52:47Z,the AOF initialization don't create base AOF. 
775754571,9788,chenyang8094,2021-12-28T07:01:57Z,OK
775757692,9788,chenyang8094,2021-12-28T07:12:35Z,OK
775790602,9788,oranagra,2021-12-28T08:41:55Z,"i think we better drop both, it's long to read and maybe slightly confusing.
also since the defaults are never gonna change, even if we refer to these in the code, i'm not sure we should bother to define them."
775792769,9788,chenyang8094,2021-12-28T08:47:18Z,Need to remove all the default value override in the existing test?
775796248,9788,chenyang8094,2021-12-28T08:55:43Z,Removed.
775796301,9788,chenyang8094,2021-12-28T08:55:49Z,Removed
775796356,9788,chenyang8094,2021-12-28T08:55:57Z,Removed
775796439,9788,chenyang8094,2021-12-28T08:56:08Z,Removed
775797507,9788,oranagra,2021-12-28T08:58:36Z,"we're gonna change this soon (will always create a base file even in that case), see #9794 
but maybe we can find a way to say that without mentioning neither ""initial"", nor ""rewrite"" which is also not in line with the above mentioned plan.

I see this section is below all the text that defines the folder and base / incremental.
so maybe we can just refer to the ""base""?"
775798234,9788,oranagra,2021-12-28T09:00:17Z,i think base is better.. rewrite is just one way to create a base file (see plans in #9794 )
775799341,9788,chenyang8094,2021-12-28T09:02:53Z,"Can you explain in more detail ""always generate base rdb (even when starting empty)"""
775799963,9788,oranagra,2021-12-28T09:04:26Z,"it will soon (see #9794).
but also, considering the state of this PR, isn't it better to tag the first AOF file we create as ""base""?
i.e. when loading an aof manifest, the first file we load must always be a ""base"" file.
i.e. it would be wrong to start from an ""incremental"" file since it implies we're starting from the middle with no view of the history, so in that sense i think that on empty startup, we should change the code and tag the first file as ""base"""
775832657,9788,oranagra,2021-12-28T10:18:43Z,"when rdb-preamble is enabled (or maybe even if it isn't), and redis starts up empty configured to persist to AOF, i want it to do an rdbSaveRio and generate an empty base file.

this may be required for some modules that want to persist their configuration into rdb aux fields, so that when we recover from persistence, they know with which config that persistence was created."
775845823,9788,chenyang8094,2021-12-28T10:51:00Z,OK
775845869,9788,chenyang8094,2021-12-28T10:51:08Z,OK
775853586,9788,chenyang8094,2021-12-28T11:10:52Z,Maybe we'll change that text in the next PR.
775864818,9788,oranagra,2021-12-28T11:37:11Z,"this looks odd to me, as it could override other valid statuses so it looks dangerous (like failure or different types of success).
in practice, as far as i can tell, we init it to OK at the top, and after that the only way to get here with a non-OK status is the TRUNCATED status. so i think this line should be removed."
775874649,9788,oranagra,2021-12-28T12:02:46Z,"i think it's odd to hide (override) the TRUNCATED status, let's propagate it to the caller when it's valid.
and override it with FAILED when it's not in the last file.
we'll need to update the two callers of that function to handle that value correctly.
debug.c isn't expecting it, so it can consider it as failure (maybe revert your change there?)
and server.c can consider it as success (which it already does AFAICT)."
775886149,9788,oranagra,2021-12-28T12:32:00Z,maybe now you can let go of the numbering (can get out of sync in with future edits) and even most titles (i.e. when the test name has the exact same info)
775889432,9788,oranagra,2021-12-28T12:40:41Z,why is this at the end of the previous test and not the beginning of the next one?
775896369,9788,oranagra,2021-12-28T12:58:48Z,"in case it's very fast, we won't get to see it turn to `1`.
i think it's ok to:
1. see the scheduled flag turn off.
2. waitForBgrewriteaof

if for some reason that's not enough, we can wait for `[s total_forks]` to get incremented."
775896501,9788,oranagra,2021-12-28T12:59:11Z,please mention what are we waiting for to happen.
775896800,9788,oranagra,2021-12-28T12:59:52Z,"the wait_for_condition will fail, there's no need for the assertion"
775897321,9788,oranagra,2021-12-28T13:01:15Z,"i didn't bother to download and look at the binary file, so i don't know what's in it.
i assume some of these keys are part of the rdb header, and some are part of the AOF tail?
is that true? maybe add a comment here."
775898403,9788,chenyang8094,2021-12-28T13:04:05Z,right.
775899188,9788,chenyang8094,2021-12-28T13:06:07Z,OK
775902002,9788,chenyang8094,2021-12-28T13:13:01Z,Oh my mistake
775904698,9788,chenyang8094,2021-12-28T13:19:38Z,I think this can be removed.
775905163,9788,chenyang8094,2021-12-28T13:20:43Z,all k1 k2 and k3 in rdb header， do we need rdb header and aof tail?
775905794,9788,chenyang8094,2021-12-28T13:22:22Z,OK
775907084,9788,chenyang8094,2021-12-28T13:25:17Z,"OK, do  [s total_forks]"
775907253,9788,chenyang8094,2021-12-28T13:25:42Z,OK
775907588,9788,oranagra,2021-12-28T13:26:31Z,"yes, i wanna make sure we can still handle such files (since we no longer generate them)"
775907949,9788,chenyang8094,2021-12-28T13:27:19Z,OK
775909556,9788,oranagra,2021-12-28T13:31:14Z,"need to add TRUNCATED here, or maybe just change it to an `else` for the above?"
775909751,9788,oranagra,2021-12-28T13:31:42Z,same here?
775914671,9788,chenyang8094,2021-12-28T13:43:29Z,Changed to `if (ret == AOF_OPEN_ERR || ret == AOF_FAILED) `
775914804,9788,chenyang8094,2021-12-28T13:43:53Z,Changed to `if (ret == AOF_OPEN_ERR || ret == AOF_FAILED)`
775916165,9788,oranagra,2021-12-28T13:47:21Z,is any of the other states valid in this case? like NOT_EXIST and OPEN_ERR?
775917548,9788,chenyang8094,2021-12-28T13:50:13Z,"#define AOF_OK 0     -> OK
#define AOF_NOT_EXIST 1  -> AOF_FAILED -> goto cleanup
#define AOF_EMPTY 2  -> OK
#define AOF_OPEN_ERR 3 -> goto cleanup
#define AOF_FAILED 4 -> goto cleanup
#define AOF_TRUNCATED 5 -> AOF_FAILED (if not last file) -> goto cleanup"
775917797,9788,chenyang8094,2021-12-28T13:50:53Z,I think I covered all the status
775937228,9788,oranagra,2021-12-28T14:36:31Z,"ok, i think you're right. wanted to double check."
776828275,9788,yossigo,2021-12-30T18:23:32Z,"```suggestion
 * BASE: Every time AOFRW succeeds, a BASE file will be generated, which represents 
```"
776832493,9788,yossigo,2021-12-30T18:40:17Z,"```suggestion
    serverLog(LL_NOTICE, ""Successfully migrated an old-style AOF file (%s) into the AOF directory (%s)."", server.aof_filename, server.aof_dirname);
```

Updated the log message to be more clear to users."
776832871,9788,yossigo,2021-12-30T18:41:38Z,"```suggestion
        serverLog(LL_WARNING, ""Can't open or create append-only dir %s: %s"", 
            server.aof_dirname, strerror(errno));
```"
776833132,9788,yossigo,2021-12-30T18:42:47Z,"```suggestion
        serverLog(LL_NOTICE, ""Removing the history file %s in the background."", ai->file_name);
```"
776833643,9788,yossigo,2021-12-30T18:44:52Z,"```suggestion
        serverLog(LL_WARNING, ""Can't open or create append-only dir %s: %s"", 
            server.aof_dirname, strerror(errno));
```"
776834519,9788,yossigo,2021-12-30T18:48:23Z,"```suggestion
                ""Background AOF rewrite has repeatedly failed %ld times and triggered the limit, will retry in %d minutes"", 
                incr_aof_num, limit_deley_minutes);
```"
776835168,9788,yossigo,2021-12-30T18:51:06Z,"```suggestion
            serverLog(LL_WARNING,""Failed to access the append log file %s: %s"", filename, strerror(errno));
```

Updating the log message because the error may not necessarily be due to a non-existing file."
776835314,9788,yossigo,2021-12-30T18:51:43Z,"```suggestion
        rio rdb;

```"
776836020,9788,yossigo,2021-12-30T18:54:21Z,"```suggestion
        serverLog(LL_WARNING, ""Can't open or create append-only dir %s: %s"", 
            server.aof_dirname, strerror(errno));
```"
776838066,9788,yossigo,2021-12-30T19:02:12Z,"Suggest to move this check out of this function, as it seems like a generic create-if-not-exists utility function."
776838560,9788,yossigo,2021-12-30T19:04:29Z,"```suggestion
            errno = ENOTDIR;
            return -1;
```"
776892639,9788,chenyang8094,2021-12-30T23:43:46Z,OK
776893358,9788,chenyang8094,2021-12-30T23:49:16Z,OK
776893374,9788,chenyang8094,2021-12-30T23:49:28Z,OK
776893418,9788,chenyang8094,2021-12-30T23:49:52Z,OK
776893763,9788,chenyang8094,2021-12-30T23:52:38Z,"No, the file must not exist here, because we ruled out this possibility in the if branch."
776893912,9788,chenyang8094,2021-12-30T23:53:58Z,OK
776894141,9788,chenyang8094,2021-12-30T23:55:38Z,OK
776894274,9788,chenyang8094,2021-12-30T23:56:39Z,ok
776894325,9788,chenyang8094,2021-12-30T23:57:11Z,ok
776894415,9788,chenyang8094,2021-12-30T23:57:52Z,ok
776894558,9788,chenyang8094,2021-12-30T23:59:38Z,OK
776894648,9788,chenyang8094,2021-12-31T00:00:28Z,and note we will return AOF_NOT_EXIST error code.
777004480,9788,oranagra,2021-12-31T13:24:15Z,"what we know here is that both `fopen` and `fstat` failed.
i guess you could change
```diff
-if (redis_stat(aof_filepath, &sb) == 0) {
+if (redis_stat(aof_filepath, &sb) == 0 || errno!=ENOENT) {
```
then when you get here, you know for sure it doesn't exist."
777019408,9788,oranagra,2021-12-31T15:01:49Z,"Yes, but does it mean that when it returns -1 the file must not exist? 
It could be a range of other errors. "
777024434,9788,chenyang8094,2021-12-31T15:39:16Z,OK
815555837,9788,yangbodong22011,2022-02-28T03:21:16Z,"should be `appendonly.aof*` instead of `appendonly.aof.*`  
now, `appendonly.aof` will not be ignored."
815592564,9788,chenyang8094,2022-02-28T05:40:19Z,"Maybe you're right, but the current implementation doesn't create a file named `appendonly.aof` unless you manually copy an old-style AOF for upgrade testing. So I think we just need to ignore the file we're going to create. @oranagra WDYT? 

"
815608833,9788,oranagra,2022-02-28T06:27:00Z,"i think it's a good idea to ignore both.
i.e. both the ones we create, and the ones we created in the past, that are still left in the folder."
815617083,9788,yangbodong22011,2022-02-28T06:48:34Z,"Only developers pay attention to `.gitignore`, and when I updated the `unstable brance` code, `appendonly.aof` caught my attention, so I started this discussion."
815625209,9788,chenyang8094,2022-02-28T07:07:54Z,"@oranagra @yangbodong22011  Sounds reasonable, I'll make a PR to add it, thanks."
984633230,11012,madolson,2022-09-30T14:05:10Z,"We don't typically add licensing information in headers. Also, You aren't Redis Labs. "
984634960,11012,madolson,2022-09-30T14:06:56Z,Should this just be a `ListNode listnode` so we don't have a double layer of indirection? 
984637261,11012,madolson,2022-09-30T14:09:22Z,"Wonder if it's time to make this an enum? If it's too intrusive it's okay to skip it, but I'm going it'll be a small change."
984638049,11012,madolson,2022-09-30T14:10:07Z,"```suggestion
#define BLOCKED_NUM 8    /* Number of blocked states. */
```

More reason to make it an enum."
984646790,11012,madolson,2022-09-30T14:18:58Z,"As far as I can tell BLOCKED_LIST and BLOCKED_ZSET aren't handled separately, and they could be generalized to `BLOCKED_NO_KEY`. There is the ongoing BEVAL conversation, https://github.com/redis/redis/issues/9925, which we could trivially add support for with this."
984684026,11012,madolson,2022-09-30T14:57:38Z,"I don't think we want to recursively call this API. For LMOVE, you could have a chain of calls that goes deeper into the stack. Instead, we can probably just loop until all of the unblocked keys have been satisfied. Which I think is handled properly in handleClientsBlockedOnKey, we just need to make sure we don't enter that function recursively. "
985236406,11012,oranagra,2022-10-02T13:01:53Z,"```suggestion
 * Internal function for unblockClient(). */
```

i was wondering who's ""You""?"
985236975,11012,oranagra,2022-10-02T13:05:50Z,isn't that a second lookup? why can't we use `de`?
985238113,11012,oranagra,2022-10-02T13:14:13Z,"let's decide if we add a space between function arguments or not.
redis has some areas with it ans some without.
i personally prefer with, but in any case let's not have both types in this function."
985238760,11012,oranagra,2022-10-02T13:19:21Z,"i don't think i understand this one.
there are cases of commands blocked on multiple keys, but they all get released as soon as one key is signaled.
why do we have a check on blocked type here?

p.s. please avoid line comments."
985240545,11012,oranagra,2022-10-02T13:32:44Z,"cool. so all of these got dropped:
* target, bblockpos, xread_*
and are now retrieved from argv again.
any disadvantage in that?"
985240761,11012,oranagra,2022-10-02T13:34:20Z,"why do we need a separate header for this?
i see all the forward declarations of functions remained in server.h
i'd argue that this move just creates a bigger diff that's harder to review, destructs the blame long with no reason."
985241581,11012,oranagra,2022-10-02T13:40:40Z,"let's rename this to ""init"" instead of ""reset""
it is only used on creation, and it looks as if it leaks the old dict."
985242146,11012,oranagra,2022-10-02T13:44:40Z,"not sure i'm in favor of relocating this function (specifically without changing it).
note is is modified in #11310"
985243184,11012,oranagra,2022-10-02T13:52:57Z,"this comment is misplaced now, belongs in a loop.
maybe no longer needed by the new design.
but maybe we should bother to write a test case for this scenario?"
985245129,11012,oranagra,2022-10-02T14:08:43Z,"i think it could be a good idea to also do NOTOUCH and NOEXPIRE.
the key will be touched when we run the command on it.
and i think i'd rather not do lazy expiry from this code path."
985245623,11012,oranagra,2022-10-02T14:12:08Z,"we won't need that if we use NOEXPIRE. i think it's safer.
if we do drop that, i suppose we can drop the lines that backup and restore core_propagates.
@guybe7 FYI."
985248246,11012,oranagra,2022-10-02T14:32:19Z,"i think i'd rather do that just before deciding to block (calling blockForKeys), and not in the loop that processes arguments (we don't yet know what the command is gonna do).
both in terms of efficiency (generating that string is time consuming), and also due to possible sideeffects.
p.s. i think we have to use `rewriteClientCommandArgument`"
985250141,11012,oranagra,2022-10-02T14:45:36Z,"did we change an error code in any of these?
i.e. did the error code in all 6 cases modified in this file remain as it was (either `NOGROUP` or `WRONGTYPE`)?
i think that if we did change the error code, we must find a way to fix it.

but even if it's just the text, maybe it could be a little bit confusing.
i.e. before, it was clear that the error was from the unblocking process...
on the other hand, the command could have just as well arrive from the original command (depending on the order of execution).
@guybe7 @itamarhaber WDYT?"
985254292,11012,ranshid,2022-10-02T15:18:09Z,"This is somewhat problematic. Let me explain why.
Currently we do not process command unless it was realy unblocked by the currently executed command.
when we try to unblock clients on the ready key we first match the blocked clients blocking type to the type of the key
``
if ((o != NULL && (receiver->bstate.btype == getBlockedTypeByType(o->type)))
``
so in case a client is blocked on mylist key for example it should not be reprocessed in case some other client will do ``ZADD mylist 1 1``

 I guess we can think of improvement here which will also require us to maintain the blocking timeout differently."
985254368,11012,ranshid,2022-10-02T15:18:38Z,not funny :( 
985254982,11012,ranshid,2022-10-02T15:23:26Z,I am not sure I understand. removing the call here is basically a breaking change. we currently depend on the logic which execute a blocked command as SOON as the key is ready...
985255487,11012,ranshid,2022-10-02T15:26:28Z,"> i don't think i understand this one. there are cases of commands blocked on multiple keys, but they all get released as soon as one key is signaled. why do we have a check on blocked type here?
> 
this is more of a preparation for future use cases (we might want to block on several keys until they are all available)
It is not 100% needed at this point but I found it harmless to support.

> p.s. please avoid line comments.
sure will fix that
"
985255855,11012,ranshid,2022-10-02T15:28:57Z,Currently non - the only thing is the argv change in order to support XREAD
985256071,11012,ranshid,2022-10-02T15:30:49Z,We thought this way the code will be more modular. In a perfect universe you might think that redis sub parts are better moduled rather than declared in a giant header file. 
985260358,11012,ranshid,2022-10-02T16:02:51Z,"@oranagra not changed yet :) - we probably have a PR race here.
I think we will have to make sure to merge these 2 correctly."
985264889,11012,ranshid,2022-10-02T16:38:56Z,"NOTE to self: fix this ""ugly"" xreadgroup part to consider rename of the command "
985283302,11012,ranshid,2022-10-02T19:15:37Z,@oranagra I think the error code was changed in case of streamgroup blocking operation which was unblocked due to stream deletion (we used to return -UNBLOCKED) I can try and fix that (maybe by looking at the UNBLOCKED flag in the stream process command) in order to prevent this from being breaking change. 
985410156,11012,ranshid,2022-10-03T06:20:45Z,@oranagra although what you suggest make sense it will probably break some tests which are dependent on the replication backlog
985417349,11012,oranagra,2022-10-03T06:34:38Z,i think it is confusing. let's add that when it'll be needed (and tested)
985418339,11012,oranagra,2022-10-03T06:36:29Z,"in some subsystems i agree. in this one i feel it isn't needed, and just makes the diff harder to review."
985429517,11012,oranagra,2022-10-03T06:54:54Z,"right.. need to decide if to merge the smaller one and then update the bigger one, or let the smaller one wait (longer).
anyway, i think this function suites db.c as well, so i'd rather not move it."
985431841,11012,oranagra,2022-10-03T06:58:34Z,"ohh, that propagation is not just because of the expire, but also because of what the unblocked command does?
but aren't we going through `call` again? (which handles it already)
please run a quick test to be sure, and consider updating the comment."
985441802,11012,ranshid,2022-10-03T07:11:59Z,"> ohh, that propagation is not just because of the expire, but also because of what the unblocked command does? 

yes, I better fix the comment as well if indeed this should stay

>but aren't we going through `call` again? (which handles it already) please run a quick test to be sure, and consider updating the comment.

You can check (for example) the test ``MULTI + LPUSH + EXPIRE + DEBUG SLEEP on blocked client, key already expired``
it verify the del was received on the replication stream when we turn off the active expire 

"
985445984,11012,ranshid,2022-10-03T07:18:08Z,"@oranagra I think that your suggestion is correct, I only think that some tests will require fix OR I missed some cases where this is still needed... @guybe7 what do you think?"
986421185,11012,ranshid,2022-10-04T04:24:43Z,"@oranagra / @madolson / @guybe7   - 
Basically I can align the errors of a deleted/change type stream (either by multi/exec, flushall, swapdb or stream delete)
Currently the implementation is to issue 
``
UNBLOCKED the stream key no longer exists
``
in the following cases:
1. the stream key has been deleted (ie. calling DEL)
2. the stream and group existed but the key type was changed by overriding it (ie. with set command)
3. The key not longer exists after we swapdb with a db which does not contains this key
4. after swapdb when the new db has this key but with different type.

Now I would only like to ask at this point what do you find a better option:
1. we align to the current behavior (always error with -UNBLOCKED)
while this makes sense that a different error is used (otherwise why this command blocked and not exit with error in first place) this will prevent the user from understanding exactly what happened to the stream key... was it overridden with different type or was it deleted...) - I can keep the error type and use different error massages in this case, but I wonder if applications will match error massages.
one thing to note is that it is basically non-deterministic error reporting since (for example) a blocking command might have been racing with a key deletion/override 
2. We can keep my current implementation that will not issue -UNBLOCKED but will use the same error type as today
which will be more useful for a user to distinguish the 2 cases, but is less ""ideal"" in terms of the rational to ""why did this blocked on the first case""
     
     wanted to catch your thoughts on that.
"
986809251,11012,oranagra,2022-10-04T12:34:54Z,"i think we can use dictAddRaw and later conditionally update the dictEntry, instead of doing double lookup (find and add)"
987597632,11012,guybe7,2022-10-05T07:10:23Z,"i can't find any reference to NOEXPIRE, but yes, the `propagatePendingCommands` is here to handle lazy-expiry only (all other replication handling happens in `afterCommand`)"
987664102,11012,guybe7,2022-10-05T08:28:41Z,"@ranshid sorry for the XREADGROUP special case, it was a bad idea

anyway, it seems like we're going in the direction of trying to unblock clients even if the key doesn't exist anymore (see https://github.com/redis/redis/pull/11310)

perhaps we want to keep this info inside the `bstate`? i.e. that we want to try to unlock if the key doesn't exist anymore (will be true for modules and XREADGROUP)
maybe we can even extend this idea and allow module to explicitly state if they want to be unblocked when the key doesn't exist? we can add a special ctx flag that the caller has to set before calling `RM_BlockClientOnKeys`
all that i mentioned above is an optimization, trying to aoid redundant calls to `unblockClientOnKey`/`moduleUnblockClientOnKey`"
987669485,11012,guybe7,2022-10-05T08:34:19Z,"then we can replace
```
|| ((receiver->bstate.btype == BLOCKED_STREAM) && strcasecmp(receiver->lastcmd->fullname, ""xreadgroup"") == 0)
```
with
```
|| (o == NULL && receiver->bstate.no_key_unblocks)
```"
987674258,11012,guybe7,2022-10-05T08:39:22Z,can you please reinstate these moved functions to the same location they were (perhaps at the price of a forward declaration)? it's hard to review
987684586,11012,guybe7,2022-10-05T08:49:57Z,"i prefer (2)

this idea of this PR is to re-process blocked clients, which means it can fail in exactly the same way as the non-blocking variant. 
when a user executes a blocking command it has to expect and handle errors that may arise in case the command didn't block in the first place, so i don't see this as a breaking change"
987687340,11012,guybe7,2022-10-05T08:52:55Z,@oranagra thoughts?
987913122,11012,oranagra,2022-10-05T13:18:28Z,"So @guybe7 do you see any problem with adding NOEXPIRE and fox the tests? 
P.s. The NOEXPIRE flag is new, didn't exist when these tests were written"
987930569,11012,oranagra,2022-10-05T13:34:37Z,"I agree. Seems better that the command that initiated the blocking will tell us what's the trigger for unblocking, rather than have the blocking framework full of special code to be familiar with the different commands.. "
987950390,11012,guybe7,2022-10-05T13:52:42Z,"sure, we can do that (just out of curiosity, is it just to save these 2 code lines the call `propagatePendingCommands`?)"
987951754,11012,guybe7,2022-10-05T13:53:54Z,"not that it's not a good reason, the less `propagatePendingCommands` in the code, the better"
988058813,11012,oranagra,2022-10-05T15:25:31Z,"Yes, trying to eliminate side effects of things that are done outside command execution (like testing for non local cluster keys in processCommand) "
988106691,11012,itamarhaber,2022-10-05T16:13:26Z,"I also favor the 2nd option as it is more informative, and am similarly of the opinion that error type changes do not fall into the breaking catergory."
988616154,11012,oranagra,2022-10-06T06:56:00Z,"although part of me wants to resist interface changes due to refactoring, i tend to agree that we should take the second option, for the same reason described about (race).
i hope we're not missing anything, and some odd reason why a user should distinguish between these two cases (being blocked and released, or not blocked in the first place).

@ranshid please make sure this is clearly described in the top comment."
993585364,11012,ranshid,2022-10-12T15:04:22Z,I reverted back the blocked.h file since I noticed there is a consensus around that
993585817,11012,ranshid,2022-10-12T15:04:44Z,done
993588401,11012,ranshid,2022-10-12T15:06:59Z,"@oranagra @guybe7 I made the change. 
I also changed the following tests in list.tcl:
""SWAPDB wants to wake blocked client, but the key already expired"" &&
""MULTI + LPUSH + EXPIRE + DEBUG SLEEP on blocked client, key already expired""
to be more aligned to the new logic. There might still be other tests that might fail (I believe a daily run will be needed before we merge this) "
993589997,11012,ranshid,2022-10-12T15:08:26Z,"@guybe7 - made the change (even though I hate adding more parameters to the API blockForKeys :) )
I think in the future we might want to keep this per key and it might be the ""return of the bki"" but for now this is simple."
993590207,11012,ranshid,2022-10-12T15:08:37Z,done
993590752,11012,ranshid,2022-10-12T15:09:04Z,@guybe7 I made some effort to make the diff cleaner. tell me what you think
993599676,11012,guybe7,2022-10-12T15:16:56Z,"seems like my work in https://github.com/redis/redis/pull/11310 (signal deleted keys only if needed) and the work here (process the client on a deleted key only if needed) complete each other :)

Q: why didn't you check `o == NULL`?"
993607766,11012,ranshid,2022-10-12T15:24:04Z,@oranagra I extended the previous comment about that in the top comment.
993626875,11012,ranshid,2022-10-12T15:41:04Z,"> seems like my work in #11310 (signal deleted keys only if needed) and the work here (process the client on a deleted key only if needed) complete each other :)

Yes will be ""fun"" to merge these

> Q: why didn't you check `o == NULL`?

well, since this call will be triggered by both cases (type change and removed key) I need to attend both
"
993736326,11012,guybe7,2022-10-12T17:36:39Z,ok good point (is there a test that hits that? IIRC i wrote one)
994356451,11012,oranagra,2022-10-13T08:55:54Z,too much indentation?
994361865,11012,oranagra,2022-10-13T09:00:47Z,"to make things more explicit, let's add some commands after swapdb and watch their propagation here.
i.e. we can do `set somekey someval` and then `get k` so we can see lazy expiry happens after swapdb.
let's do the same in the test below.

and let's mention this change (notouch+noexpire) in the top comment (to make it clear why the tests had to be changed).
mention that one of the reasons is to reduce the changes to the key space that are done outside of normal command execution (same as getNodeByQuery)"
994365397,11012,oranagra,2022-10-13T09:04:04Z,"ohh, i see your next commit relies on`set-active-expire`. i'd rather my approach (one block of assert_replication_stream)
also, the one with active expire seems like it has a race condition."
994699641,11012,ranshid,2022-10-13T14:11:58Z,fixed
994700284,11012,ranshid,2022-10-13T14:12:29Z,@oranagra check my last commit (new one) Is that what you meant?
994842985,11012,oranagra,2022-10-13T16:00:20Z,"@ranshid i suggested to set another key before the EXISTS, so that we can distinguish that expiration from a case in which it was expired by SWAPDB."
995125642,11012,madolson,2022-10-13T21:10:01Z,I'm not sure this actually changes the behavior. Instead of recursing to do the unblocking we would loop over them in a while loop. It's like a tail recursion optimization. I think we generally want to avoid recursion inside Redis commands.
995126516,11012,madolson,2022-10-13T21:11:18Z,"I will say I never really liked this optimization to begin with, since it's very broad and assumes there is only one type of operations being done on the dataset. I'm ok forgoing it, but maybe we can make a note to find more optimizations. I don't think this part of the codebase has been optimized much for performance."
995291611,11012,ranshid,2022-10-14T02:54:09Z,"The way I see it is that the current behavior require us to make sure no other client will be able to successfully run a blocking command before an already blocked client has processed it, so this recursion (which is not new) was left as it is.
I also thought of this while writing the refactor, and IMO the solution is that a client will also check on each key of a blocking command, if that key has pending blocked clients (in which case it should also be blocked). 
I agree that this recursion is not preferred, but I would like to leave some optimizations to the next phase, as this is becoming  hard to approve since the code change is large."
995295882,11012,ranshid,2022-10-14T03:05:02Z,"I agree that a better infrastructure would not need to be aware of a specific blocking-on-keys type, but rather  a general ""blocked-on-keys"", I also agree we would like to have more blocking types in the future.
However this will require much deeper changes since the blocking timeout should also be refactored, In case we will allow reprocessing a command in order to evaluate if it is still blocked. Not a huge change but it will probably complicate some cases. "
1004417603,11012,ranshid,2022-10-25T12:23:07Z,@oranagra please check [78c0d4d](https://github.com/redis/redis/pull/11012/commits/78c0d4d97c0a7ee9772ba0f11939c9096f5866c4)
1005271161,11012,oranagra,2022-10-26T06:30:36Z,"don't we also need to make sure the flag is set to 0 otherwise?
or is the one in unblock and at startup enough?"
1005276302,11012,oranagra,2022-10-26T06:38:10Z,"i notice this `return` skips restoring the `server.current_client`, so that was a bug in an old version of this PR.
but i see in 7.0, we had a `continue` with a similar problem.
can one of you look into it?"
1005384630,11012,oranagra,2022-10-26T08:36:29Z,"i'm not sure i like the introduction of `dictIncrUnsignedIntegerVal`.
i think the fact dict provides a get and set convince macros is enough, and you can do get, incr, and set yourself.
this becomes even clearer when this code increments by -1, and even more so when you end up doing another get afterwards (which wasn't necessary if the dict only provided only get and set.

if you do keep it, then maybe the macro can return the new value, and you can drop that extra get, but i think i rather drop the incr."
1005387574,11012,oranagra,2022-10-26T08:39:09Z,"i think that this should go outside the loop (or just drop the stack variables, operate directly on the arguments, which will be made non-optional."
1005389291,11012,oranagra,2022-10-26T08:40:40Z,"note that you used the signed version here, and the unsigned version in the other places."
1005409066,11012,oranagra,2022-10-26T08:57:38Z,i think we better also do `$rd read` and match the response.
1005412904,11012,oranagra,2022-10-26T09:01:13Z,"FYI, you can do `$rd deferred 0` and `$rd deferred 1` to change a connection between deferring more and normal mode.
maybe the majority of this test will become simpler (calling it `r2` and using deferring mode just for the short period we do the brpop)"
1005455923,11012,ranshid,2022-10-26T09:41:37Z,basically it is enough as it is now. but I can also take it out of the loop to keep it safer 
1005459720,11012,ranshid,2022-10-26T09:45:15Z,Thank you - indeed I already fixed it but did not commit yet.
1005467611,11012,ranshid,2022-10-26T09:52:51Z,"IMO the incr version keeps the code cleaner. If you have a strong opinion I should drop it I will (BTW regarding the incr by -1, I can also add decr flavor, I just thought this would be too much)"
1005474030,11012,ranshid,2022-10-26T09:59:06Z,probably sleepless night result :( 
1005493749,11012,guybe7,2022-10-26T10:17:56Z,i agree with Oran
1005736272,11012,ranshid,2022-10-26T14:09:46Z,Let me try that
1005899803,11012,ranshid,2022-10-26T16:22:13Z,"@oranagra I am not sure there is a bug now and in the old version. I think that in the old case when the code (before the change made in #11310) there was an assumption that no change to the current client, while now, after the change presented in  we will still reset the server.current_client to be the same as was before the call to moduleTryServeClientBlockedOnKey. So IMO there is not bug here - but maybe I am missing something."
1006615933,11012,oranagra,2022-10-27T09:17:31Z,"i'm not following you...
doesn't that continue in 7.0 mean that in some cases we'll not restore `server.current_client` to its previous value?"
1006618310,11012,oranagra,2022-10-27T09:19:39Z,"i think it's odd that we have an ""in-pace"" increment but then we do a get operation on the result.
personally i think that dict.h doesn't need to offer that mechanism, and the caller needs to handle it.

but if you insist to keep it, at least make it return a value so that you don't need the extra getter.
and also make sure you don't mix the signed and unsigned versions."
1006673571,11012,ranshid,2022-10-27T10:07:02Z,@oranagra I agree and I did that on the last commit. I think the code is cleaner this way 
1006677916,11012,ranshid,2022-10-27T10:11:44Z,"I did not really change any logic in this function. my original PR change was to add the:
``
 if (c->flags & CLIENT_PENDING_COMMAND)
            c->flags &= ~CLIENT_PENDING_COMMAND;
``
the change of always calling afterCommand and reset server.current_client was part of   https://github.com/redis/redis/pull/11310, and I think that new behavior is kept in this PR. "
1006693431,11012,oranagra,2022-10-27T10:28:19Z,indentation
1006708045,11012,oranagra,2022-10-27T10:44:33Z,"i'm not talking about this PR, i'm talking about the code in 7.0.
that `continue` means we don't restore `server.current_client`
https://github.com/redis/redis/blob/1571907ea02020a829fca63806780c6f3ecf65a0/src/blocked.c#L544-L553"
1007047595,11012,ranshid,2022-10-27T15:24:37Z,I think that we had it for a while so probably modules usually do not fail to process blocked clients (or they fail before replacing the current client) @guybe7 do you see that differently? 
1027266029,11012,ranshid,2022-11-20T10:43:34Z,fixed in [c5104f2](https://github.com/redis/redis/pull/11012/commits/c5104f248e80ecb7f926f384317cf0ea18d28b4e)
1027841056,11012,oranagra,2022-11-21T10:34:46Z,let's mention the interface changes in the top comment.
1027856280,11012,oranagra,2022-11-21T10:48:35Z,"let's mention this behavior change in the top comment, and the use of LOOKUP_NOEXPIRE"
1027890276,11012,oranagra,2022-11-21T11:21:22Z,"```suggestion
```"
1027897882,11012,oranagra,2022-11-21T11:29:27Z,"maybe we don't have to move this big block?
it's was never accessed anywhere outside blocked.c even before,
but there's a server struct variable holding this struct and it still has a comment referring to it."
1027900433,11012,oranagra,2022-11-21T11:32:14Z,"```suggestion
        }
```"
1027932704,11012,ranshid,2022-11-21T12:07:54Z,done
1027933208,11012,ranshid,2022-11-21T12:08:27Z,done
1027935865,11012,ranshid,2022-11-21T12:11:18Z,I am afraid I do not understand. the bkinfo is gone (for now) do you mean the comment itself? 
1028010421,11012,oranagra,2022-11-21T13:02:28Z,"sorry, either i commented on the wrong block, or somehow GH quoted the wrong thing.
i meant for the `readyList` struct and its comment."
1028019433,11012,ranshid,2022-11-21T13:10:47Z,done
1029469385,11012,madolson,2022-11-22T15:20:05Z,"```suggestion
            ""total_blocking_keys:%lu\r\n""
            ""total_blocking_keys_on_nokey:%lu\r\n"",
```
For consistency with other usages of ""total"""
1030057552,11012,oranagra,2022-11-23T06:04:18Z,"maybe also replace `on_nokey` with another term? maybe `on_del`?
or `_removed`?"
1030117231,11012,soloestoy,2022-11-23T07:51:32Z,"should avoid `server.stat_numcommands++` too?

https://github.com/redis/redis/pull/11012/files#diff-1abc5651133d108c0c420d9411925373c711133e7748d9e4f4c97d5fb543fdd9L3513"
1030126333,11012,soloestoy,2022-11-23T08:04:13Z,"now we only count the command reprocessed slowlog and latency, but lost the command ""processed"" time, the last `c->duration`, do we need add the last duration to the current duration?"
1030144253,11012,soloestoy,2022-11-23T08:26:51Z,change to `unblock_on_key_changed` or `unblock_on_nokey_or_wrongtype`? since `xreadgroup` unblocked not only on key removed but also on key type changed.
1030155212,11012,soloestoy,2022-11-23T08:39:49Z,use `dictFind` directly here? then we can avoid add other flags in the future.
1030246212,11012,ranshid,2022-11-23T10:08:13Z,Thats a valid point. I guess we can accumulate the time we processed the command until we reached the decision to block.
1030249920,11012,oranagra,2022-11-23T10:11:53Z,"i also don't like the `nokey`, but there's already a thread about it, let's discuss it there:
https://github.com/redis/redis/pull/11012#discussion_r1030057552"
1030251723,11012,oranagra,2022-11-23T10:13:36Z,"soloestoy [suggested](https://github.com/redis/redis/pull/11012#discussion_r1030144253) 
> `unblock_on_key_changed` or `unblock_on_nokey_or_wrongtype`?

i'd argue that when a key is overwritten with another key / type, we can view it as ""removal"" (and re-insertion)."
1030256106,11012,ranshid,2022-11-23T10:17:38Z,"I think lookupKeyReadWithFlags also cover some checks (i.e expiry checking) but maybe it would have been a good idea to present a new type of enu(LOOKUP_TRANSPARENT) which we will always maintain to do nothing with the key
like 
#define LOOKUP_TRANSPARENT (LOOKUP_NONOTIFY | LOOKUP_NOSTATS | LOOKUP_NOTOUCH | LOOKUP_NOEXPIRE)"
1030257037,11012,oranagra,2022-11-23T10:18:31Z,"i don't think we should use dictFind. we do want to know if the key is logically there (e.g. we do want an expiration test, just not to delete the key if it is expired).
it's essentially a lookup key with 0 side effects.
maybe want to add a LOOKUP_NO_SIDEEFFECTS (macro that includes all other flags) and use it here, this way other flags added in the future are less likely to be overlooked."
1030260996,11012,ranshid,2022-11-23T10:22:18Z,I guess so :) 
1030265536,11012,ranshid,2022-11-23T10:26:35Z,"@oranagra unblock on nokey can also happen in cases the key type was changed. so I just followed the same semantics presented in #11310 - I can take the advice from @soloestoy:
total_blocking_keys_on_nokey_or_wrongtype (great simple name :)) "
1030267943,11012,ranshid,2022-11-23T10:28:53Z,I can agree on that one(unblock_on_nokey_or_wrongtype) but it would require aligning all the places which were presented as part of #11310 . since this is not a complete mistake (depends how you look at nokey) I suggest we avoid changing this as this is not customer facing.
1030350947,11012,oranagra,2022-11-23T11:53:11Z,"then i guess we can stick with `nokey`, it's enough that it's documented what it means, and it's easy to grep for it (i.e. we define a short term, and document what it means).

IMO, just change `tot` to `total`"
1030354379,11012,soloestoy,2022-11-23T11:57:00Z,"or add a new flag to make the unblocked client call `call()` directly, `processCommand()` contains too many checks"
1030368695,11012,oranagra,2022-11-23T12:12:32Z,"@soloestoy not sure i understand the context.
is this meant to be related to this discussion:
https://github.com/redis/redis/pull/11012#discussion_r984684026

@ranshid isn't that discussion resolved?
i don't know what was in the code when the comment was placed, but it looks to me as if there's no risk of recursion now."
1030387130,11012,ranshid,2022-11-23T12:32:56Z,"I think that in case of pause we do want to call processCommandAndResetClient. I guess we could handle the 2 cases differently, but it will return some of the things we would like to eliminate (such as updateStatsOnUnblock)"
1030392383,11012,ranshid,2022-11-23T12:38:52Z,"Actually, the current implementation only incorrectly handles the latency histogram and slowlog.
IMO before this change the pre-attempt duration was calculated twice for blocking commands since both incremented the `c->lastcmd->microseconds` (am I right?) but I guess I should better align this in this PR."
1030575850,11012,ranshid,2022-11-23T15:22:29Z,"@oranagra until now I did not understand @madolson, but I think that indeed there is an issue here:
lets say I have 3 clients (a,b,c) each blocked on lists (l1,l2,l3) respectively and in that order.
now I have client H calling `MULTI; LPUSH l1 1; LPUSH l2 2 ; EXEC`
So client H will  also call handleClientsBlockedOnKeys which will take the current list of ready_keys aside and iterate over it.
the first key it will go over is l1 for which the only blocked client in the list will be client 'a' which will be unblocked and will call processCommandAndResetClient.
But lets say client 'a' is doing a `BLPOPRPUSH l1 l3 0` which will signal l3 as ready?
So it would have called handleClientsBlockedOnKeys (recursive call), which will signal l3 as ready and then it would process client c before processing client b, which was blocked first.

I am not sure how big of a problem this is (it cannot happen in case l2 == l3) but this gives me motivation to follow @soloestoy suggestion  "
1030609549,11012,oranagra,2022-11-23T15:51:34Z,"ohh, now i see what i was missing, handleClientsBlockedOnKeys is not called only from beforeSleep, but also from processCommand.

i'm not sure it matters that it'll process client c before client b, but i do fear the recursion.
maybe we can test some flag so that processCommand doesn't do that, and then the loop in handleClientsBlockedOnKeys will take care of the rest?"
1030711077,11012,ranshid,2022-11-23T17:20:34Z,"Actually I do think there is an issue with that:
For example what if client 'c' was unblocked first and running `BLMPOP l2 l3` - so it would get precedence over client 'b' on popping from list l2... which is a BUG IMO. "
1031358300,11012,oranagra,2022-11-24T10:40:07Z,"i don't think that's a bug.. or maybe i'm missing something.
are you saying that because you know the order in which the commands arrived to redis?
from the client's perspective they might have arrived in the order [a,c,b] and letting c pop something that was pushed by a as well as something that was pushed by whoever released a from blocking."
1031362024,11012,ranshid,2022-11-24T10:43:49Z,"I agree that in case the 2 clients weere blocked together the user might not notic.
But our documentation clearly states:
```
If multiple clients are blocked for the same key, the first client to be served is the one that was waiting for more time (the first that blocked for the key). 
```
and it can be that client 'c' was blocked way longer after client 'b'

removing the recursion will help avoid that. But I am also looking to understand if I can somehow avoid the porcessCommand overhead and potential ACL/OOM calls (it does makes no sense that a client which already successfully issued some blocking command and now waiting long time would later fail on it once we modify the ACL rules), although I agree application would probably have to write defensive code either way."
1031383714,11012,oranagra,2022-11-24T11:05:49Z,"ok, you're right. it does violate that statement (and fairness).
we can add a test for it...

so in theory, we have the server.ready_keys list that should keep the order, but because handleClientsBlockedOnKeys messes with this list (replaces it), and because of the recursion, we can run into that situation, right?

i do think we wanna eliminate the recursion anyway.
so maybe setting a flag so that processCommand doesn't call handleClientsBlockedOnKeys in that flow?"
1031456642,11012,ranshid,2022-11-24T12:28:33Z,Yes - I will eliminate the recursion 
1034515381,11012,ranshid,2022-11-29T09:42:27Z,@oranagra I have introduced a flag to prevent the recursion. I could use the new CLIENT_REPROCESSING_COMMAND flag. but I did not want to hard link the logic of reprocessing with the fact that we are doing handleClientsBlockedOnKeys 
1034540568,11012,ranshid,2022-11-29T10:02:45Z,"@soloestoy - I have made some fixes to statistics. I personally do not like to log the blocking command duration to the command stats before it was unblocked (with the duration) but I did not want to change the existing behavior.
Take a look and tell me what you think. "
1034540885,11012,ranshid,2022-11-29T10:02:57Z,done
1034561971,11012,oranagra,2022-11-29T10:20:11Z,"```suggestion
     * we need to re process the command again */
```"
1034567105,11012,oranagra,2022-11-29T10:24:57Z,"there's a chance the client was freed, and `c` is an invalid pointer. see evictClients.
the way to test it is to detect that `server.current_client` was nullfied."
1034568013,11012,oranagra,2022-11-29T10:25:50Z,"if we don't need this elsewhere, maybe use a static variable instead of server globals member?
you won't have to touch 2 other files for that."
1034574461,11012,oranagra,2022-11-29T10:31:24Z,"maybe a nicer way to do that is to make sure to zero `duration` in after calling `lookupCommand` (in `processCommand` and elsewhere)
and also, make sure to skip that whole block (the `lookupCommand` and zeroing of `duration`) on blocked clients (true also for BLOCKED_POSTPONE, it's just wasteful).

if we do that, we can always use `+=` in `call()`."
1034577120,11012,oranagra,2022-11-29T10:33:59Z,"```suggestion
    /* Log the command into the Slow log if needed and record the latency this command
```"
1034581051,11012,oranagra,2022-11-29T10:37:48Z,"why did you move the latency monitor sample into the slowlog `if(!BLOCKED)`?
i think latency monitor can always sample.. although it's unlikely that a blocked command took a long time in it's initial processing, but if it did there's no reason to hide it."
1034585409,11012,oranagra,2022-11-29T10:41:59Z,"why did you change that?
shouldn't it be the other way around?
i.e. the old code avoids logging the command when it got blocked, and the new code avoids logging the command when it got released from the block.
the logical time where it got executed (and performed its action) is when it got released."
1034587614,11012,oranagra,2022-11-29T10:44:16Z,"what's the difference? (between CLIENT_UNBLOCKED and CLIENT_REPROCESSING_COMMAND)
aren't they both set at the same time (from the perspective of `call()`)?"
1034593160,11012,oranagra,2022-11-29T10:49:38Z,"maybe we can move this outside and unify updateStatsOnUnblock into here?
could also maybe make the while `c->duration` thing a bit nicer (all in one place)"
1034603775,11012,oranagra,2022-11-29T10:59:44Z,"let's make the test quicker
```suggestion
        $rd BLPOP mylist 0.01
```"
1034730410,11012,ranshid,2022-11-29T13:07:48Z,"CLIENT_UNBLOCKED will also be set for posponed client which will not reprocess the command. Personally I so not understand why we even want to report commands which did not complete (eg timedout) we could maybe add a function to accumulate them to the statistics when a client is timedout (like the ""updateStatsOnUnblock"" we can have an updateStatsOnTimeout. But I wanted to keep the current behavior similar to what it is today. "
1034732082,11012,ranshid,2022-11-29T13:09:20Z,"that is one option - personally I think that a better is to completely eliminate updateStatsOnUnblock. 
IMO a blocked client shuld not update stats and mostly act as if the command was never issued (aside for the monitor which is probably needed) "
1034784451,11012,ranshid,2022-11-29T13:55:42Z,"AFAIK the old code (before this PR) would log to monitors as soon as the command was executed - even if it was blocked.
This makes sense as we would like to report the first time we are handling the command.
Unlike the slowlog which IMO had a ""theoretical"" bug in which it might have reported the command twice"
1034787149,11012,ranshid,2022-11-29T13:57:55Z,"haha. I originally did that and thought it would be better to keep aligned with the existing way we handle such cases.
Can you say then why do we usually keep things in server? (I thought it was some kind of way to potentially have multiple servers...) "
1034793667,11012,ranshid,2022-11-29T14:03:13Z,done
1034800090,11012,ranshid,2022-11-29T14:08:35Z,"why should the latency monitor, monitor an incomplete command? I have no problem reverting it, but it just does not makes sense to me. "
1034805440,11012,ranshid,2022-11-29T14:12:36Z,done
1034987183,11012,ranshid,2022-11-29T16:33:06Z,done
1034987260,11012,oranagra,2022-11-29T16:33:10Z,"i have no clue...
there are also a ton of places that use plain global variables in the top of C files (e.g. acl.c).
but in this case it can also be a static var in a function.
i guess the question is if we think it'll be useful for others or not."
1034988923,11012,oranagra,2022-11-29T16:34:35Z,"latency monitor doesn't monitor commands, it monitors the main thread latency doing various tasks.
e.g. it measures how long it takes to `fork()`, or how long the eviction loop takes."
1034992651,11012,oranagra,2022-11-29T16:37:47Z,"i think it was wrong, we should log it when it was logically executed.
@madolson WDYT?"
1035005270,11012,oranagra,2022-11-29T16:47:39Z,"postponed clients **do** re-process the command, it'll get to `processPendingCommandAndInputBuffer` and call `processCommand` again for the postponed command.

maybe for perspective, think of module blocked clients.. they can do some work on the original execution, then do some incremental work from time to time, and then another bulk of code when being unblocked.
the same could be argued to apply for stream blocked commands and others.

i do think we wanna increment the fact the command was called (as soon as it got to `call()`), and measure all the fragments of time it took."
1035006842,11012,ranshid,2022-11-29T16:48:54Z,nothing would make me happier than to avoid register it when blocked :) 
1035020029,11012,ranshid,2022-11-29T16:57:44Z,"@oranagra correct me if I am wrong. postpone client would start processing the command but will quit one it gets into the check of: blockPostponeClient - which is before it got into the call(). so it would not have been recorded anywhere.
If I used the CLIENT_UNBLOCKED  here instead of CLIENT_REPROCESSING_COMMAND   the postpone client would NOT account once it will reprocess the command, which is why I added this flag (otherwise I would not need it )
IMO I would prefer what I suggested earlier which is to not account anything (including maybe even the monitor) for blocked commands and only account them once the command is executed.
"
1035034300,11012,ranshid,2022-11-29T17:09:33Z,"So according to what you say a blocked command should be recorded twice? so for a ""fast-command"" which took longer we should get 2 events?"
1035036397,11012,ranshid,2022-11-29T17:11:24Z,"I guess there is some kind of rational in this, since the monitor will let us understand WHEN the issue happened. It is just strange that we can potentially see more occurrences on the  latency monitor then the actual number of commands we processed. but I can say the same regarding the slowlog...
"
1035146853,11012,ranshid,2022-11-29T18:45:22Z,done
1035148561,11012,ranshid,2022-11-29T18:46:41Z,"done - please check if that was your intention. BTW - I can do the same for ACL check, but you mentioned that you prefer it this way."
1035148781,11012,ranshid,2022-11-29T18:46:52Z,done
1035812103,11012,oranagra,2022-11-30T10:46:02Z,"ohh, ok. postponed commands are ""reprocessed"" from the perspective of `processCommand()`, but not from the perspective of `call()`. so you're right, we must not skip them.
i think that when i gave that comment, i looked at a diff from a previous commit (of this PR) and i wondered why you changed the flag, but now i see that entire check is new (added in this PR).

i think i do prefer to keep counting commands that got to `call` even if eventually timed out, but i suppose i'm open to compromise on that if it conflicts with many things and makes things much simpler."
1035815118,11012,oranagra,2022-11-30T10:48:59Z,"even if we keep the current behavior, won't it be cleaner to embed `updateStatsOnUnblock` in `call()`?
ohh, actually it may be an issue with modules and CLIENT UNBLOCK.."
1035820149,11012,oranagra,2022-11-30T10:53:54Z,"maybe we're missing resetting it in places that call `call()` not via `processCommand()`.
i.e. there are a few other places that do `lookupCommand()`.

or maybe the better way is to reset it in `createClient` and `freeClientArgv()` (where we reset `c->cmd`)"
1035822033,11012,oranagra,2022-11-30T10:55:39Z,let's apply that on postponed commands too.
1035848839,11012,ranshid,2022-11-30T11:23:08Z,Again - this will not work since postpone commands did not reach that part yet. 
1035875495,11012,ranshid,2022-11-30T11:52:35Z,Yeh - I will move it to resetClient
1035912527,11012,oranagra,2022-11-30T12:32:54Z,this is an early stage of `processCommand`. postponed commands did reach it before being postponed
1036159419,11012,oranagra,2022-11-30T16:02:33Z,"as you pointed out, there are two blocks doing postpone. the one i was referring to, is done after looking up the command and knowing it's flags.
the postpone just above this block is one that doesn't depend on the command flags, and is done ASAP (without making any effort to respond or reject the command, not even an arity check).
maybe we can move that postpone to after the lookup, or maybe we should add some flag to be able to distinguish between them."
1040080595,11012,ranshid,2022-12-05T20:48:30Z,done
1040083505,11012,ranshid,2022-12-05T20:52:11Z,"@oranagra we had some offline discussions about that.
As much as I tried, merging the logic of blocked commands and postpone clients is harder than I thought.
I think the main difference is that postpone clients are not really calling the command, but rather being postpone ""on the way"" to call the command as apposed to other blocked commands which decide to be blocked somewhere during the command execution. I do not think this is the last word on the subject and I plan to do farther refactor (modules etc...)
Maybe I can document our thoughts on the top commit and we leave it to the next steps in order to push this long going PR?"
1040083921,11012,ranshid,2022-12-05T20:52:44Z,I think the last refactor answered that 
1040084778,11012,ranshid,2022-12-05T20:53:41Z,done
1040627227,11012,oranagra,2022-12-06T08:13:45Z,"good idea to put it here, however, i think there's a problem with scripts.
luaRedisGenericCommand only calls freeClientArgv.
maybe we should change luaRedisGenericCommand to call resetClient, which also does a few excess steps, or maybe this reset of c->duration belongs in freeClientArgv? the function name doesn't seem like a match, but it's actions (also resetting c->cmd) could be an ok fit.
i'm leaning towards freeClientArgv.

either way, let's try to add a test that can detect this problem."
1041741899,11012,madolson,2022-12-07T04:24:17Z,I agree about logging the command when it was logically executed. 
1041995391,11012,oranagra,2022-12-07T09:57:06Z,"i notice there's a race condition in these tests (common for many tests in this file).
they issue a command to be blocked, but don't call wait_for_blocked_client, so we can't really know if the XREADGROUP got to redis before or after the SET.

in the past, that race would have resulted in the test failing due to the difference in the error code, but now the race will still let the test pass.

i'd like to add wait_for_blocked_client to all the tests in this file in which it's missing.
not sure if as part of this PR, or another one in unstable (so that we know this PR doesn't silently breaks or fixes some existing issue)?"
1042116300,11012,ranshid,2022-12-07T11:57:21Z,yes you are right. I think it is reasonable making this fix. I will make the effort
1043043262,11012,ranshid,2022-12-08T08:08:54Z,"@oranagra  I understand your point regarding LUA scripts. However I do not think placing it in freeClientArgv is the correct solution.
The reason is that IMO It is logically wrong to assume this is were we finish/start processing new command.
For example I think blocking zpop, when reprocessed might call rewriteClientCommandVector which will free the argv.
So in this case in my implementation we will loose the duration of the first  processing try.

IMO since LUA is already doing a ""proprietary"" handling of preparing the client for the next command , probably since it cannot really call resetClient as it will also reset some other things which might be needed during the LUA execution (ASKING flag, pointer to cur_script etc..) , It should explicitly zero the duration.
"
1043311598,11012,oranagra,2022-12-08T12:43:16Z,"good point, but then, maybe we should split the role of resetClient into two, or pass some boolean argument?
i.d rather put the logic in one place and have script_lua.c call it than clone individual lines (increases the chance something else will be overlooked one day)"
1045205607,11012,ranshid,2022-12-11T10:08:50Z,done
1045205647,11012,ranshid,2022-12-11T10:09:21Z,done
1045207696,11012,ranshid,2022-12-11T10:22:29Z,"@oranagra, @madolson. After your comment about the monitor command, I **DID** apply the following logic:
When a client is blocked during processing of some command it will **NOT** update any statistic and will not report to the monitor. that will help keep all blocking flows  with about the same logic.
This also implies that when we have many clients blocked on blocking command we will have no way to get that from the command stats (user can still get the information from the client list for example). 
I want to have this first approved by you and then I will update the top comment."
1045207719,11012,ranshid,2022-12-11T10:22:41Z,done
1045207940,11012,ranshid,2022-12-11T10:24:16Z,I think we can close this sub thread
1045238243,11012,oranagra,2022-12-11T13:53:55Z,"```suggestion
 * The err_str will be used to reply to the blocked client */
```"
1045238893,11012,oranagra,2022-12-11T13:58:09Z,would probably be nicer to unify these two calls into one and use a ternary operator or whatever on the duration arg
1045241062,11012,oranagra,2022-12-11T14:12:35Z,"we're no longer honoring the original caller's call flags (`CMD_CALL_STATS` and `CMD_CALL_SLOWLOG`).
maybe we no longer need them? as far as i can tell, the only place were they are used (actually absent) is AOF loading, and there are some hacks to ""respect"" that from scripts and MULTI (by looking at `server.loading` and `CLIENT_ID_AOF`)

i think that we should either kill these two flags and add explicit conditions for AOF, or cache them as the original call intent in the client struct.
btw, aof has an assertion that commands it run never get blocked, so there's no bug here, just confusing code.

let's e careful here and make the right choice, it'll soon get more complicated with #11568 and maybe one day with #9925

i'm leaning towards killing these flags, WDYT?
@MeirShpilraien FYI."
1045241449,11012,oranagra,2022-12-11T14:15:18Z,"it seemed a bit confusing to me at first, consider adding a comment..
i.e. we incrementally accumulate any re-try of the call into c->duration, and we accumulate that into the command stats only when the command finishes.
is that right?"
1045245877,11012,oranagra,2022-12-11T14:45:32Z,"moving that block means that when a module asked not to process any clients, we'll still return bad command and arity errors.

IIRC the reason you moved it was because the check for `CLIENT_REPROCESSING_COMMAND` meant that `c->cmd` was NULL.
maybe instead of moving it, we can change the condition to check `c->cmd` rather than `CLIENT_REPROCESSING_COMMAND`?

then maybe we can eliminate that flag? would no longer be in use.
in any case, i don't like the way it's currently set (setting a client struct flag as if we pass an additional argument to processCommand).

instead, if we keep that flag, i think it should be an indication that we did call `cmd->proc` and we now gonna call it again (distinguish between a command that's really re-executed, and one that got postponed by processCommand and was never actually called).
i'm not sure what we'll do with that distinction, but it seems like something useful."
1045265563,11012,ranshid,2022-12-11T16:58:21Z,That is right. I will add a comment to clarify 
1045266074,11012,ranshid,2022-12-11T17:02:08Z,"I think it was broken event before my change. for example the failed_calls was incremented without checking the  CMD_CALL_STATS. I agree regarding removing these flags, as I could not find any use for them aside what you mentioned. "
1045266146,11012,ranshid,2022-12-11T17:02:50Z,will do
1045268039,11012,ranshid,2022-12-11T17:16:18Z,"I also had the same thought, but I thought it is too implicit assumption that can cause some issues in future implementations or bugs. I also feel we should aim to have as little difference between client calling processCommand and actually calling cmd->proc. the postpone introduced in https://github.com/redis/redis/pull/11193/ is basically a different type of blocking which indeed prevents ""command processing"" as apposed to the cases handled inside processCommand. I think it is O.K to have modules postpone commands after verifying arity, it is probably what the user would prefer anyway (why should we postpone  something that will never be able to run?)  
I can consider using the CLIENT_PENDING_COMMAND which IMO is a nice candidate to decide on ""reprocessing""  "
1045433522,11012,ranshid,2022-12-12T06:08:56Z,done
1045433644,11012,ranshid,2022-12-12T06:09:13Z,done
1045921061,11012,ranshid,2022-12-12T14:47:14Z,"@oranagra In the end I tried to use the cmd->proc as it seemed like the easiest way to solve the issue. I am not 100% comfortable with it as I have no good way to verify we indeed reprocessing (other then to use the REPROCESSING flag :) ) 
I did run the tests with a combination of the check for cmd->proc and asserting in case we are trying to process a command when this flag is not present and did not get any assert.
Please take a look and share your thoughts"
1045923699,11012,ranshid,2022-12-12T14:49:06Z,"@oranagra @MeirShpilraien I think it is not crucial to decide now if we want to eliminate the fields or not, we are basically risking some unknown module flow to have wrong statistics. 
If you both feel that we can drop these flags I will, but I do not see it as a showstopper  "
1046286754,11012,oranagra,2022-12-12T19:24:11Z,"the changes LGTM.
i still think it would be nice to be able to know in `call()` that it's not the first time we get there on behalf of the current command. it can be a flag, or maybe even a counter that we can show in CLIENT LIST.
not sure what it would be useful yet, so we can put it aside for now.
maybe @guybe7 has an idea?"
1046321874,11012,oranagra,2022-12-12T19:49:12Z,"you're arguing that nothing changed in this PR with that regards, so we can lave it as is.
we did add monitor to that flow, but these call flags were only about stats and slowlog (monitors are not connected yet when loading AOF file).

the only way this problematic flow will happen, is probably when a module decides to propagate it's blocking command to the AOF file, and then on startup we'll load the AOF and these will appear in the command stats.

i wanna argue that this PR is about sorting out the mess of the blocking framework, so this thing falls under that umbrella.
so still, i think we either want to keep these flags in the client struct for the re-execution, or drop these flags entirely and instead handle AOF, EVAL, and MULTI concerns explicitly.

maybe if we implement a test first (involving a module, together with MULTI, EVAL, and AOF), it'll be easier to get a feel of what we wanna do.

@guybe7 feel free to join this party."
1046356666,11012,ranshid,2022-12-12T20:26:43Z,"@oranagra I think that indeed this is a refactor meant to place some order to the blocking mess. But it is still not complete. Modules blocking should also have some refactor IMO which might be a good point to address these concerns.
For now I suggest I will explicitly check for the AOF cases (I think it is (CLIENT_MULTI + CLIENT_ID_AOF) OR (server.loading + CLIENT_SCRIPT) right?"
1046646325,11012,madolson,2022-12-13T04:23:13Z,I don't think command stats should have the information about blocking. We should likely have a separate field indicating the number of blocked clients along with client list which indicates clients are blocked.
1046695271,11012,ranshid,2022-12-13T06:10:51Z,@madolson I think my last commits does exactly that. we already have info fields for the number of blocked clients and the number of blocked keys. We also have an indication for blocked clients on the client list.
1047254466,11012,ranshid,2022-12-13T14:47:33Z,@oranagra I did something  :) take a look if that is what you meant
1047351217,11012,oranagra,2022-12-13T15:53:12Z,"i looked at the change, it bothered me that the documentation of the function says what it does (lists the fields it zeros), but not what it's purpose.
i'm wondering again why we can't change luaRedisGenericCommand to simply call resetClient?"
1047388967,11012,ranshid,2022-12-13T16:18:20Z,"It bothered me 2 as I told you I have hard time trying to understand what we encapsulate. I think there might be issues reseting client during lua script. for example do we want to clear the ASKING flag (this is possible to run LUA after ASKING right?) also the current slot is zeroed and the request type which are some examples of things we might not to reset IMO.
Maybe I am wrong but LUA solves it by clearing some fields itself.
I can maybe suggest that we can create a separate function to resetClient during LUA? "
1047435809,11012,oranagra,2022-12-13T16:51:16Z,"in lua scripts, the client which we reset is the lua (internal) client, not the real client that called the script."
1048134930,11012,ranshid,2022-12-14T08:12:59Z,"Oh. So you say it will be O.K to reset the semi client. 
I added the resetClient instead. lets see if it fails any tests"
1057765703,11012,ranshid,2022-12-27T16:10:48Z,@oranagra I committed a potential change which deprecates the STATS and SLOWLOG command flags. take a look and tell me what you think. 
1058178955,11012,oranagra,2022-12-28T09:06:07Z,please be sure to mention that module bug in the top comment
1058182909,11012,oranagra,2022-12-28T09:12:34Z,"i think we need a two step thing.
1. find the real client, i.e. if this is a script use the server.script_caller, if this is a module, get the real caller too.
2. then check if the real caller is an AOF client.

this practice is done in a few places already, although it looks like not for modules.
it should be impossible to call a script during loading (unless it comes from the AOF), but for modules i think it is possible.
i.e. mark the module command to be allowed during loading, and then use RM_Call.

if it gets complicated (affecting more places), maybe we'll leave that for another PR."
1058406690,11012,ranshid,2022-12-28T15:03:50Z,"I also thought about that. I think however this is a bit complicated to navigate and locate the original client throughout all the module and function/script flows. Maybe it would be simpler to maintain a pointer to the original client in each client struct?  
Thinking about it - would just checking the server.current_client be enough? "
1058415446,11012,ranshid,2022-12-28T15:17:39Z,done
1058492061,11012,oranagra,2022-12-28T17:23:34Z,"ok, so taking modules out of the equation (they're not currently handled by the code), let's also remove them from the comment above this block (or turn it into a TODO).

regarding the current check (using `server.loading`), i think a better one is
`if (c->id == CLIENT_ID_AOF || (c->flags & CLIENT_SCRIPT && server.script_caller->id == CLIENT_ID_AOF))`
or get the `caller` like we do for `CLIENT_TRACKING` below this code.

for some reason i thought that `server.current_client` is set by modules, but now i see it isn't.
so how about doing:
```
client *caller = (c->flags & CLIENT_SCRIPT && server.script_caller) ? server.script_caller : c;
if (caller->id == CLIENT_ID_AOF || server.current_client->id == CLIENT_ID_AOF))
```
we don't propagate scripts to AOF, and we don't allow them during loading, so the only way `c` would be a script is if it is called form a module command, and then current_client should reflect either the network caller or the AOF client."
1058516914,11012,ranshid,2022-12-28T18:10:14Z,"As we discussed offline. I see that the server.current_client is preserved during AOF loading, so I changed the check to reflect that."
1058538323,11012,oranagra,2022-12-28T19:02:09Z,LGTM
1058826984,11012,oranagra,2022-12-29T09:02:39Z,"> This also implies that when we have many clients blocked on blocking command we will have no way to get that from the command stats (user can still get the information from the client list for example).
I want to have this first approved by you and then I will update the top comment.

approved, please mention it in the top comment and resolve this discussion."
1058840671,11012,ranshid,2022-12-29T09:30:03Z,done.
1058857817,11012,oranagra,2022-12-29T10:03:58Z,"let's comment that this method is only used on timeout, error and modules, and not on most unblocked cases.
and in that light, i wonder if we wanna add them to the monitor (i.e. the timeout cases)?"
1058860488,11012,oranagra,2022-12-29T10:09:15Z,do we really need to take extra care not to use background_duration on blocked keys? it'll be 0 anyway. am i missing something?
1058863697,11012,oranagra,2022-12-29T10:15:43Z,don't we want to skip monitor too when !update_command_stats (AOF loading)
1058865733,11012,oranagra,2022-12-29T10:19:10Z,i'd like to make sure we have some tests around this area.
1058901413,11012,ranshid,2022-12-29T11:35:00Z,working on it
1058902044,11012,ranshid,2022-12-29T11:36:26Z,I guess we can add it to the check. even though AFAIK the monitors are not connected during AOF loading so this probably  was never a problem
1058910222,11012,oranagra,2022-12-29T11:55:27Z,"ohh, right.
so i'm not sure which will be more confusing.. to make it explicit so i wouldn't have made that comment, or if we make it explicit someone would make a PR to suggest to remove it."
1058998673,11012,ranshid,2022-12-29T14:58:00Z,Since this is currently not only a case of timeout (modules run this command as well) I do not think we can avoid reporting it to monitors. 
1059002588,11012,ranshid,2022-12-29T15:05:24Z,"to tell the truth, IDK. I only tried to keep this aligned with existing logic. @guybe7 do you know if we always take the background duration? (I think it is only updated by specific call to RM_BlockedClientMeasureTimeEnd) "
1059054947,11012,ranshid,2022-12-29T16:48:22Z,done
1059055184,11012,ranshid,2022-12-29T16:48:54Z,"added the AOF check to the ""if"" statement "
1059056909,11012,ranshid,2022-12-29T16:52:52Z,"```suggestion
        # unblock the client on timeout
```"
1059130825,11012,oranagra,2022-12-29T20:08:06Z,i meant that we can add an argument or something so we can make a distinction between timeout / error and modules.
1059132289,11012,oranagra,2022-12-29T20:12:34Z,"Guy is currently away.
what i meant was that since it's only updated in RM_BlockedClientMeasureTimeEnd, it should be otherwise set to 0, and then we can avoid the condition here and always sum it.
i.e. even if we call RM_BlockClientOnKeys we set it to 0.."
1059139839,11012,oranagra,2022-12-29T20:36:41Z,we can also call the module command from the script
1059140250,11012,oranagra,2022-12-29T20:38:08Z,i now realize that we can use `rm_call_flags` with `!` flag instead of adding this one.
1059255275,11012,ranshid,2022-12-30T06:10:40Z,So you are O.K with totaly not reporting timedout commands?
1059255417,11012,ranshid,2022-12-30T06:11:14Z,O.K - I basically agree. will do
1059255628,11012,ranshid,2022-12-30T06:12:17Z,"That will not work IMO. the '!' flag will only replicate the ""called"" command and not the module command itself."
1059274473,11012,oranagra,2022-12-30T07:34:26Z,"if we log MONITOR when a command was actually executed, and the command never did, i think it makes sense not to log it.
it's the same as a command that got rejected by OOM or other error.
maybe we need another pair of eyes on this.
@itamarhaber @madolson ?"
1059274795,11012,oranagra,2022-12-30T07:35:37Z,"ohh, right. :facepalm: "
1059281764,11012,ranshid,2022-12-30T08:01:46Z,"Just to place my personal opinion:
I feel that the monitor should log every command once it is being handled. even in case a command was timedout, it does not mean it was not handled. I can find some reason to monitor both commands which are blocked and also monitor again the fact that they are reprocessed (maybe add some indication in the monitor output) 
But I feel it can be confusing not monitor blocked commands which were timedout."
1059303188,11012,oranagra,2022-12-30T09:11:15Z,"some day, MONITOR will also be able to track commands that failed (e.g. on OOM) and so on.
we have great plans for MONITOR in the far future, see https://github.com/redis/redis/issues/6321#issuecomment-1175062204
in the meanwhile, with the current monitor, i don't think it should log things that didn't take place.
i.e. if you'll see a BLPOP in the monitor, you'll think an element was popped, when in fact the command failed.
i.e. it failed in a similar manner as an OOM, etc.

it's true that it it would have failed on WRONGTYPE we would have logged it anyway, but in my eyes, that's just because the current infra is limited.

edit: if someone re-plays the commands in MONITOR, the WRONGTYPE one will consistently fail again with no harm, but for timeouts it can be a more complicated problem."
1059370169,11012,itamarhaber,2022-12-30T12:30:20Z,"I strongly agree with Ran - in principle, MONITOR should log every command as it is handled.

Errors and timeouts aren't the same things IMO, although both may be triggered by circumstances/topology and the dataset.

Because timeouts are asynchronous by definition, the only consistent way to treat the potential ones (i.e. all blocking commands) that I see is to log them as they are first processed (which appears to be the current behavior).

Because MONITOR is less-than-ideal for replay purposes, if that's needed, I feel a new TRACE command, or perhaps some variation on AOF, is better.


"
1059478816,11012,oranagra,2022-12-30T17:54:33Z,"It may be the wine speaking, but I don't understand any of this.
Isn't monotor used to track which commands were actually executed, like a live AOF stream that also includes read commands? it does not include commands that were rejected (OOM). how is it useful for the user to log timed out commands ?"
1059592503,11012,ranshid,2022-12-31T05:57:15Z,"You raise a good point. I guess that it should be clear if the monitor command should report commands which were ""intercepted"" or actually ""processed"".
Currently our documentation indeed states the later, however the current implementation indicates the first. My point was that ""timedout"" commands are a different case than ""rejected"" commands. Currently we do not report commands which failed authorization (and OOM), but a timedout command is actually being processed and the fact that it was timedout does not mean it was not handled (it does mean it did not fully cause the requested effect). For example let's say a command to read from a stream with non existing group was received, we will report it on the monitor even though it ended with error. I think of timeout as an error to complete processing the command, unlike the case of a command which was rejected. "
1059712642,11012,oranagra,2023-01-01T06:49:10Z,"the example you gave about stream with non existing group is similar to the one i gave earlier about WRONGTYPE.
i think these cause less damage to the MONITOR user than reporting a command that failed on timeout.
I think some use cases for monitor will try to feed the command stream back to redis, in the case of WRONGTYPE, the command will consistently fail again immediately, but in the case of timeout, i could either hang, or worse, succeed for some reason.
i'll try to grab @yossigo to comment here as well."
1059729011,11012,oranagra,2023-01-01T09:43:33Z,"i discussed it with Yossi, and he convinced me to flip this around.
the arguments were:
1. we were trying to conclude if MONITOR is about the database (which command modified the data), or about clients (which client executed a command). for the first, there are already ways to ""monitor"" the database, which are keyspace notification, AOF, and attaching a replica, but for the later, there's nothing so many monitor should serve this purpose (monitor client commands and not database changes).
2. we have some future plans for monitor (https://github.com/redis/redis/issues/6321#issuecomment-1175062204) so some day it'll be able to also log rejected command, and maybe also both the being blocked time and the being released time, as well as the release reason (timeout or not), so maybe for now, the right thing to do is to keep it was it was and avoid any logical change (other than clear bug fixes), so we don't end up incrementally changing it and breaking some use case multiple times.

so the bottom line of that discussion is that in contrast to my previous opinion (to make a change to avoid logging on timeouts), i'd like to revert an earlier change we made, and keep logging blocked clients in the initial `call()`, when being blocked."
1059758541,11012,ranshid,2023-01-01T14:22:12Z,"@oranagra I implemented according to the decision to keep monitors current behavior. 
I placed a flag which indicates a client is currently executing a command which is cleared once the cmd->proc is completed and the client is no longer blocked.
The main issue with this is that it will not work well in case of nested calls (LUA, multi etc...) but since currently we do not allow blocking in nested calls (I am still not 100% sure regarding modules) this should be fine."
1059758874,11012,ranshid,2023-01-01T14:25:33Z,"```suggestion
    /* We want to be aware of a client which is making a first time attempt to execute this command
```"
1059758921,11012,ranshid,2023-01-01T14:25:56Z,"```suggestion
     * called. For example this is required for avoiding double logging to monitors.*/
```"
1059758937,11012,ranshid,2023-01-01T14:26:08Z,"```suggestion
    /* Update cache time, and indicate we are starting command execution.
```"
1059769779,11012,oranagra,2023-01-01T16:03:56Z,"maybe it's better to match the `lpush`, and then add another trivial command (e.g. `incr`) and match that.
so we know we didn't log the pop between the push and incr."
1059790473,11012,ranshid,2023-01-01T20:05:54Z,done
689111570,9357,oranagra,2021-08-15T16:14:55Z,"* maybe use `memtol` instead of `atoi`?
* i think we should error if it is set to a value larger than 4gb (only allow reducing it)
* i don't like the fact we write to a plain global, let's either add it to the server struct, or add an accessor function in quicklist.c (and the global will be static)
* also, this subcommand isn't included in the help
```suggestion
    } else if (!strcasecmp(c->argv[1]->ptr,""quicklist_packed_threshold"") && c->argc == 3)
```"
689111966,9357,oranagra,2021-08-15T16:17:54Z,"not sure what the comment was for, probably a leftover?
```suggestion
        addReply(c,shared.ok);
```"
689112653,9357,oranagra,2021-08-15T16:24:05Z,"on 64 bit system, this change increases the size of the struct by 8 bytes (padding), from 32 bytes, to 40.
i don't see any other option though, and i suppose that normally it doesn't make much difference.
the only case it will make a big difference is if you have a lot of lists that are very short (just one node with a small ziplist).

if we want, maybe we can use one of the `extra` bits to make a distinction between two types of node structs, one for small list nodes and one for larger ones."
689112739,9357,oranagra,2021-08-15T16:24:59Z,the comment needs a update (no longer 4+N)
689113239,9357,oranagra,2021-08-15T16:29:36Z,"we need to increment the rdb version (rdb.h) and declare a new encoding type for list (rdb.h),
and then the loading code need to handle both correctly (let's add a test that loads an old rdb file with quicklist)"
689123060,9357,oranagra,2021-08-15T17:59:32Z,"we need to re-arrange these tests in some way.
the ones that use the `debug packed_threshold` trick don't need the `config set proto-max-bulk-len` etc, and don't need to use all the `r write` and `write_big_bulk`, so they can be made a lot shorter and cleaner.

we do also want other group of tests that don't use that DEBUG trick, and do use the proto-max-bulk-len and all the `r write` mess, and these need to have the `large-memory` tag.

in theory i could say that we can run the same batch of tests twice, with the same code, once with small strings and the DEBUG trick, and a second time on large strings.
this way we avoid code duplication.
but on the other hand, the code that uses small strings can be made much much shorter and more readable so i think i rather have that duplication."
689131912,9357,oranagra,2021-08-15T19:20:19Z,"why all these separator lines?
i see that ziplistRepr is attempting to generate some json like string (although that seems broken),
maybe should do something that fits that.
it may also be nice to add a flag to that function (controllable from the debug command) that controls if this function prints the actual content of the node, or just their metadata (i.e. it won't call ziplistRepr, and it wont print the actual string for sds, but rather just the length).

p.s. it seems this function is missing proper handling of compressed nodes."
689132310,9357,oranagra,2021-08-15T19:22:52Z,i suppose this should be `>=` rather than `>`
689132500,9357,oranagra,2021-08-15T19:24:52Z,"you're matching `container` (enum) with threshold?
i suppose you meant that if either of the nodes (a or b) are NONE, you return NULL (not using the threshold)"
689132975,9357,oranagra,2021-08-15T19:28:20Z,"the comment seems wrong (we don't insert a ziplist), i guess a copy paste thing,
is there any reason why rdb.c won't just use quicklistPushTail for these?"
689133444,9357,oranagra,2021-08-15T19:32:55Z,"redis doesn't use `bool` and `true` and `false`.
please convert to `int`, `1` and `0`.

i think the method can refer to a ""Plain Node"" or a ""non-containerized node""
not sure i can find a better term.
maybe adding the word ""plain"" next to the declaration of `QUICKLIST_NODE_CONTAINER_NONE` will help?
```suggestion
/* Insert a non-containerized plain node into the quicklist.
 * A node with single large entry rather than a ziplist. */
static void __quicklistInsertPlainNode(quicklist *quicklist, quicklistNode *old_node,
                                       void *value, size_t sz, int after)  {
```"
689133640,9357,oranagra,2021-08-15T19:34:48Z,i think all of these should be using `>=` rather than a `>`
689133895,9357,oranagra,2021-08-15T19:36:42Z,"i saw you added a union alias, let's use it or drop it.
```suggestion
    new_node->entry = sz;
```"
689134172,9357,oranagra,2021-08-15T19:39:09Z,"ohh, maybe we wanna keep this function in order to avoid the extra malloc and memcpy.

well, it needs renaming, and an improved comment (see my comment on __quicklistInsertEntryNode).
it would also be nice to document both here, and in the ziplist one that's used by rdb.c, that it takes ownership of the buffer passed to it."
689139047,9357,oranagra,2021-08-15T20:26:28Z,"that handles a case in which the old node was plain (non containerized),
but what about the case where you're replacing an entry in a ziplist with one that's too big for it?
you need to split the ziplist into up to 3 nodes.

also there's' the case where you're placing a small entry instead of a big one, you can probably create a ziplist, and even merge it with the ones on either or both sides."
689262682,9357,oranagra,2021-08-16T06:15:50Z,"i think it would be slightly nicer to put that `if` first in the function, or nested inside the `!node` one."
689269237,9357,oranagra,2021-08-16T06:31:16Z,"this code was recently change, and you need to rebase (merge form unstable).

let's try to re-think the last two `if`s in that if-else chain.
* the one before the last, says that if the current node is full, and we need to append to it's very end, instead maybe we can append to the beginning of the next node instead.
* the last `if` in this chain, says that there's no other resort than splitting the current node in the middle.

i don't think we wanna add any code to these two blocks, instead just add more condition to the `if`s and add new blocks before or after them.

so in that case, considering that the two new actions you added in these blocks are both when `sz > threshold`, it would be enough to just add a first `if` to handle this case, so that the last two `if`s will not be reachable.

i.e.
1. `else if (sz >= threshold)` (inside that, check if we have to do splitting or not)
2. `else if` .. all the conditions about next node being full `|| node->container == NONE`
3. `else` . split a ziplist.

does this sounds right? @sundb @yoav-steinberg please have a look"
689270868,9357,oranagra,2021-08-16T06:35:00Z,"don't we have a method that does this that can be used instead of repeating these lines (and the increments below)?
if not, maybe create one.

i.e. this can either be one that does all of this (including the malloc and memcpy.
or we can do the malloc and memcpy here, and just at least call a common to handle the creation and modification of the node members and counters."
689272632,9357,oranagra,2021-08-16T06:39:02Z,"you're not allowed to use `strlen` in redis (nearly ever!!)
strings are not assumed to have null terminator at the end.. they may have many null chars in the middle.
we call them ""binary safe strings"" they always come with `len`.
besides that, you didn't match the `entry` node length, so you could have reached beyond it's bounds.

the if should be something like `return (len==len2 && memcmp(p, p2))`"
689273978,9357,oranagra,2021-08-16T06:41:57Z,"i have a feeling that we're overlooking compressed nodes.
i want quicklist to still be able to compress ""plain"" nodes, not just ziplists.
let's figure out a way to test this heavily."
689275712,9357,oranagra,2021-08-16T06:45:50Z,"it's a bad idea to cast pointers like that.
let's assume that size_t is 64 bit and int is 32 (that's actually the common case).
so you have a 64 bit variable and you pass a function a pointer to a 32bit variable.
it'll only write to 32bits, and the other half of that variable will remain unchanged.
what's worse, in a bigendian system, it'l write to the wrong half of the variable, and even if the other half is zero, your result will be completely messed up.

instead, you need to declare a temporary stack variable at the right size, pass a pointer to it, and then copy the value when the function returns."
689278346,9357,oranagra,2021-08-16T06:50:50Z,"same comment about pointer casting...
please go over the code and verify you don't do these anywhere else"
689279136,9357,oranagra,2021-08-16T06:52:24Z,"styling..
```suggestion
    if(unlikely(quicklist->tail->container == QUICKLIST_NODE_CONTAINER_NONE)) {
```"
689287794,9357,oranagra,2021-08-16T07:10:06Z,"i just wanna confirm..
we wanna remove one entry from the tail and put it at the head.
the case you handled above is where the tail is ""plain"", so you just need to move a full node.

but there's another case, where the tail is a ziplist, and you wanna move an entry to the head, but the head is ""plain"" (not a ziplist). is that case ok because quicklistPushHead handles that?"
689292329,9357,oranagra,2021-08-16T07:19:21Z,let's use `%zu` instead of casting to `int`
689292524,9357,oranagra,2021-08-16T07:19:43Z,let's use `%zu` instead of casting to `int`
689293284,9357,oranagra,2021-08-16T07:21:01Z,"```suggestion
                                        ""nodes: %lu; size: %zu)"",
```"
689293544,9357,oranagra,2021-08-16T07:21:31Z,use `%zu` instead of casting to `int`
690248424,9357,perryitay,2021-08-17T10:41:10Z,"not sure I understand the union is union {unsigned char *zl; unsigned char *entry;}; 
the size is common for both entry and zl. do you think I should add also a union for the size ? "
690256580,9357,perryitay,2021-08-17T10:52:44Z,yes it is handled by quicklistPushHead 
690269264,9357,perryitay,2021-08-17T11:12:20Z,can you give an example ? or point to something similar ? 
690273098,9357,perryitay,2021-08-17T11:18:10Z,"1) do you mean that len1 = entry->sz in case of plain node ? 
2) there is a comment here - /* Passthrough to ziplistCompare() */ should I remove it completely or change it ?  "
690279922,9357,perryitay,2021-08-17T11:28:35Z,"do you mean replacing QUICKLIST_NODE_CONTAINER_NONE with QUICKLIST_NODE_CONTAINER_NONE_PLAIN 
or adding a new enum QUICKLIST_NODE_PLAIN ? "
690286331,9357,perryitay,2021-08-17T11:37:57Z,can you please elaborate on your suggestion ? not sure I understand. 
690290291,9357,sundb,2021-08-17T11:43:59Z,"```
unsigned char *zl;
unsigned int type: 1; /* ZIPLSIT=0 or BIGELE=1 */
```
I guess that's what @oranagra should mean.
Then subtract 1 from extra."
690328531,9357,sundb,2021-08-17T12:38:13Z,"@oranagra Why not add at the start of `_quicklistInsert`.
```
if (sz >= packed_threshold || node->container == none) { 
    create new node 
}
```"
690340756,9357,sundb,2021-08-17T12:53:43Z,"Would it be better to move tail node to head, without having to copy and free memory?"
690356440,9357,sundb,2021-08-17T13:12:44Z,"Because the caller executing quicklistNext will use the data in entry directly, if you do not decompress, the data in entry will be compressed.
And we need to compress the current entry before moving to the next one."
690466323,9357,oranagra,2021-08-17T15:09:43Z,"sorry. seems that i thought you're writing int `zl` in this line.
ignore.."
690467494,9357,oranagra,2021-08-17T15:10:59Z,let's make sure there's a unit-test that covers it.
690472804,9357,oranagra,2021-08-17T15:16:54Z,"the comment is no longer relevant, in the past it meant that there's no reason to describe what this function does, since it's just a wrapper. but that's no longer true, so a proper comment is probably needed.

regarding the memcmp, yes, there's no point in doing memcmp if the buffers are not the same size (i.e. we know the buffers are not equal). and obviously ignoring the size of one of them and doing memcmp with the size of the other, could cause a segmentation fault."
690475858,9357,oranagra,2021-08-17T15:20:23Z,"i think we can't use `QUICKLIST_NODE_PLAIN` since this is an enum that describes the `->container` field. so the prefix of this enum is needed to be common.
i think that `NONE` and `PLAIN` are in some way synonymous, and if we use the term `PLAIN` and we can more easily refer to is and search for it (unlike ""NONE"").
so i think `QUICKLIST_NODE_CONTAINER_PLAIN` is the right term.
@sundb WDYT?"
690481822,9357,oranagra,2021-08-17T15:26:51Z,"we currently have:
```
    unsigned int extra : 10; /* more bits to steal for future usage */
```
so instead it could be:
```
    unsigned int has_sz_high: 1; /* denotes that we have zs_high as the high 32bits of 'sz' */
    unsigned int extra : 9; /* more bits to steal for future usage */
    int sz_high[];
```

@yoav-steinberg @yossigo do you think we should do it? i tend to think we should skip it."
690485120,9357,oranagra,2021-08-17T15:30:27Z,"i.e. then when we allocate ""plain"" nodes, we allocate them with extra 4 bytes, and look at `(node->sz | (size_t)node->sz_high[0])` rather than plain `node->sz` (obviously we can wrap that in a macro)"
690515378,9357,oranagra,2021-08-17T16:05:22Z,"@sundb there are cases where the string is small and can fit into the beginning of the next node instead of the tail of the current one, and alike. your suggestion will prevent that, right?"
691023541,9357,perryitay,2021-08-18T08:34:05Z,"""prints the actual content of the node, or just their metadata (i.e. it won't call ziplistRepr, and it wont print the actual string for sds, but rather just the length)."" 
what do you mean by just the length ? for a ""plain"" node I will print the value and for ziplist node I will only print number of entries ? "
691048120,9357,sundb,2021-08-18T09:05:25Z,Would this threshold be more appropriate to change to a configuration?
691054144,9357,perryitay,2021-08-18T09:13:27Z,"""it would also be nice to document both here, and in the ziplist one that's used by rdb.c, that it takes ownership of the buffer passed to it."" not sure I fully understand this part... "
691063192,9357,oranagra,2021-08-18T09:25:04Z,"i mean that if that flag is off, you only print all the metadata you have on the node, without calling ziplistRepr or printing the value of the plain string.
this can be the number of records, the size (of the string or ziplist), the container type, and compression.
if the flag is on, you print all the above, but also print the data (ziplistRepr or print the actual string/buffer)"
691064479,9357,oranagra,2021-08-18T09:26:48Z,"i don't think we want another configuration for this. we already have a configurable threshold of how much to put into each ziplist.
i think of this threshold as a debug hack to test all the mechanics of quicklist, without consuming huge amounts of memory."
691067238,9357,oranagra,2021-08-18T09:30:17Z,"the caller passes a pointer and the function takes ownership of that memory (i.e. the caller doesn't need to release it, and should actually never access it again).
something like: `zl - the data to add (pointer becomes the responsibility of quicklist)`"
692022623,9357,oranagra,2021-08-19T11:25:27Z,"In the recent past i suggested to change `QUICKLIST_NODE_CONTAINER_NONE` to `QUICKLIST_NODE_CONTAINER_PLAIN`, so that whenever we want to refer to a non-ziplist (or soon to be non-listpack) node we can just say something like this in comments: ""for **plain** nodes, we do....""
i.e. we can't say ""for **none** nodes..."", maybe we can say ""for **non-ziplist** nodes"", but that's awkward.

now i wanna suggest something else: maybe we'll call them packed and unpacked?
i.e. we won't use the term ziplist or listpack, but use a general term of ""packed""
```suggestion
    unsigned int encoding : 2;   /* RAW==1 or LZF==2 */
    unsigned int container : 2;  /* UNPACKED==1 or PACKED==2 */
```

in theory we can also change the above constant from 1 and 2, to 0 and 1, and then use these fields as booleans.
i.e. if we rename `int container` to `int packed`
```c
if (!node->packed)
```
but i'm not sure we wanna go that way.
@sundb what do you think?"
692081321,9357,sundb,2021-08-19T12:52:57Z,"I think it works, and I can't think of a situation where we need to support multiple containers."
692115890,9357,oranagra,2021-08-19T13:34:48Z,"LOL.. i wanna remind you #8880 
https://github.com/sundb/redis/blob/adfcc66787550e131878dc67442dbe3b969ae036/src/quicklist.h#L53

on a second though I think i'd rather avoid drastic changes that we may some day wanna revert.
so i stand behind my suggestion above keeping the field names, and just renaming the enums to PACKED and UNPACKED.
this way when listpacks arrive to town, we won't need to rename the ZIPLIST (PACKED can refer to either ziplist or listpack).
and also considering that the `zl` field now has a union alias named `entry` that can also play along, i.e. instead of renaming the `zl` field to `lp`, we can just delete it and use `entry`.

p.s. i'm not sure which one of these PRs will be merged first.
possibly the listpack one will be easier since it just replaces one packing format with another one, and they already have similar capabilities.
whereas this PR still needs to figure out the lzf compression complications (which don't pose any concern for the other PR).

so whichever PR is merged first, they should both use the same variable and enum names (i.e. `entry` and `CONTAINER_PACKED`)

agreed?"
692676143,9357,sundb,2021-08-20T05:29:33Z,"Agree. It doesn't matter which PR will be merged first,
I will not be modified from #8880, it will be completely new, #8880 is no longer applicable."
693497893,9357,oranagra,2021-08-22T12:51:32Z,"i think you forgot to initialize it here.  (i think `1<<30` is good, with a comment saying it's 1gb)
i think it should probably be at the very top of the file (that's where globals are usually placed.

i would suggest to put the function that modifies it right next to it, so that some comment explaining what it does (threshold for PLAIN nodes), where's the real limit (4gb), can serve both the variable and the function."
693498145,9357,oranagra,2021-08-22T12:53:34Z,"i think the limit of not allowing it to be set to values larger than 4gb (clamping) should be here in this file, so that the code in debug.c doesn't need to know anything about it (i.e. the variable is static, and the default threshold or limits, are all bound to quicklist.c)

p.s. i saw a bunch of junk code in debug.c, i guess temporary."
693517704,9357,oranagra,2021-08-22T15:23:25Z,aren't you ignoring the `after` variable here?
693520415,9357,oranagra,2021-08-22T15:44:00Z,"i don't think this method should be declared in the header file, i think it can be a static one in the c file, or maybe even a macro or not needed at all.
the other one is needed here only because of the debug command (hack)"
694084254,9357,enjoy-binbin,2021-08-23T15:36:06Z,"SET-ACTIVE-EXPIRE
SET-SKIP-CHECKSUM-VALIDATION
QUICKLIST_PACKED_THRESHOLD
should we use `-` here?"
696224354,9357,sundb,2021-08-26T01:40:31Z,"When the new encoding replaces the old one, the old one will no longer be used, it will only appear during the rdb loading process and will be converted to the new encoding."
696225539,9357,sundb,2021-08-26T01:43:43Z,"```suggestion
#define isLargeElement(size) ((size) >= packed_threshold)
```"
696229824,9357,sundb,2021-08-26T01:56:11Z,Why make this judgment? Aren't we trying to get it to support more than 4g?
696230053,9357,sundb,2021-08-26T01:56:43Z,"```suggestion
        long long sz = memtoll(c->argv[2]->ptr, &memerr);
```"
696235145,9357,sundb,2021-08-26T02:11:20Z,Using `_UNPACK` feels a bit odd.
696297665,9357,oranagra,2021-08-26T05:18:03Z,"in fact, there's no need for `OBJ_ENCODING_QUICKLIST_UNPACK` to be defined at all!
we only need to tell the difference in the rdb loading (`RDB_TYPE_LIST_QUICKLIST_UNPACKED`)

p.s. `RDB_TYPE_LIST_QUICKLIST_UNPACKED` is not a good name (it is always used, regardless of whether or not there are unpacked nodes. 
it could just be `RDB_TYPE_LIST_QUICKLIST_2` like `RDB_TYPE_ZSET_2`"
696300310,9357,oranagra,2021-08-26T05:25:18Z,"looks like a typo. meant to use `<` instead of `>`.
```suggestion
    /* Don't allow threshold to be set above or even slightly below 4GB */
    if (sz > (1ull<<32) - 1<<20) {
```"
696303850,9357,oranagra,2021-08-26T05:34:29Z,there's absolutely no need for this define.. in RAM we have only one quicklist encoding type.
696331139,9357,oranagra,2021-08-26T06:33:29Z,"took a second look, i was wrong, there's no typo and `>` is ok.
the threshold must be below 4gb (the technical limit), so we error if it's greater.
updated my suggested patch above."
696340043,9357,sundb,2021-08-26T06:49:37Z,"Ohh, I did get confused."
696394396,9357,oranagra,2021-08-26T08:08:13Z,@perryitay please take the comment i suggested too
702518529,9357,sundb,2021-09-06T02:02:01Z,"```suggestion
#define RDB_TYPE_LIST_QUICKLIST_2   17
```
Uniform format with `RDB_TYPE_ZSET_2`."
702520495,9357,sundb,2021-09-06T02:10:34Z,"```suggestion
    __quicklistInsertPlainNode(quicklist, quicklist->tail, zl, sz, 1);
```
It looks like it could just be replaced with `__quicklistInsertPlainNode`."
702520876,9357,sundb,2021-09-06T02:12:13Z,"```suggestion
        int isCurrentPlain = (entry.node->container == QUICKLIST_NODE_CONTAINER_NONE);
```"
702521712,9357,sundb,2021-09-06T02:15:34Z,Would it be better to use `realloc`?
702524376,9357,sundb,2021-09-06T02:26:42Z,"Large strings can be created like this:
```
r lpush list1 [string repeat a 1558]
r lpush list1 [string repeat b 1558]
```
"
702524913,9357,sundb,2021-09-06T02:28:52Z,"```suggestion
start_server [list overrides [list ""dir"" $server_path ""dbfilename"" ""list-quicklist-2.rdb""]] {
```
`old_ver.rdb` can't express it is quicklsit, we can change filename to `list-quicklist-2.rdb`."
702607966,9357,sundb,2021-09-06T06:04:45Z,"I think you misunderstood what the `quicklistRotate` method does.
top comment: `/* Rotate quicklist by moving the tail element to the head.*/`
It only moves the last element to the top, not the head to the tail.
Look at the code you have also moved the head to the tail."
702608968,9357,sundb,2021-09-06T06:06:53Z,I think we should add a big element related test to REDIS_TEST.
702621682,9357,sundb,2021-09-06T06:33:58Z,"I assume you want to validate the old `RDB_TYPE_LIST_QUICKLIST` to the new `RDB_TYPE_LIST_QUICKLIST2`?
You can refer to the `convert-zipmap-hash-on-load` test."
702808223,9357,sundb,2021-09-06T10:54:25Z,"If `quicklist->head` is `QUICKLIST_NODE_CONTAINER_NONE`, we also need to insert the plain node directly.
The same applies to `quicklistPushTail`."
702833871,9357,sundb,2021-09-06T11:39:04Z,"Not sure if I'm understanding this correctly, is this the way it should be?
```c
        new_head->next = quicklist->head;
        new_head->prev = NULL;
        quicklist->head->prev = new_head;
        quicklist->head = new_head;
        quicklist->tail = new_tail;
```"
702857928,9357,perryitay,2021-09-06T12:20:02Z,"not sure the scenario you are referring to... if 
(new node == plain) && (head == plain || head ==small) we get to first if
(new node == small) && (head == plain) second if fails and we get to the else
(new node == small) && (head == small) we will probably get to if (or else if ziplist is full)
"
702858662,9357,perryitay,2021-09-06T12:21:17Z,I committed by mistake... I will commit it now with the test...  
702858980,9357,perryitay,2021-09-06T12:21:48Z,is my test not checking it correctly ? 
702882878,9357,perryitay,2021-09-06T12:59:19Z,"I was trying to find a specific scenario for testing but couldn't find one. @sundb , will you be able to give a specific example so I can take it and fix the code accordingly ? "
702883385,9357,perryitay,2021-09-06T12:59:58Z,so what is the bottom line here ? do we want to do it ? 
702884444,9357,perryitay,2021-09-06T13:01:29Z,"so bottom line is that I only change in naming is : 
unsigned int container : 2;  /* NONE==1 or ZIPLIST==2 */ ==== > 
    unsigned int container : 2;  /* UNPACKED==1 or PACKED==2 */ ? "
702890146,9357,sundb,2021-09-06T13:10:14Z,"Yeah, I misunderstood."
702893688,9357,sundb,2021-09-06T13:15:45Z,"My mistake, the rdb name should be list-quicklist.rdb (the old rdb type).
I was actually wondering how to validate the old list-quicklist to list-quicklist-2 validation, since the encoding of the quicklist has not changed, do you have another way? All I can think of right now is to go through the quicklistRepr to get the relevant information."
702895404,9357,sundb,2021-09-06T13:18:08Z,"As I understand it, it should be `unsigned int packed : 2; / UNPACKED==1 or PACKED==2 */ ? `.
Because using `node->container` is weird, it doesn't mean it's packed ."
706825282,9357,oranagra,2021-09-12T11:49:35Z,"i may be missing some context, but if we don't need the data, free+malloc is better than realloc (saves the need for memcpy)"
706827074,9357,perryitay,2021-09-12T12:03:13Z,@oranagra do you agree with that ? 
706830180,9357,oranagra,2021-09-12T12:27:04Z,"i was thinking we're gonna use the term `PLAIN` (not `UNPACKED`)?
i don't have any objection to the term `container` (listpack, and ziplist are containers, and plain means there's no container),

since `NONE` was completely unused till now, there's no reason not to rename it.
however, since we're going to rename `ZIPLIST` soon to `LISTPACK`, then i don't mind renaming it already to `PACKED`.

the only reason not to rename things that are not completely off, is to keep changes to the blame log low, and avoid conflicts, but since we'll have to rename `ZIPLIST`, and since `NONE` ins unused, then i suppose we're going to change all the lines that refer to `container`, right?

if that's right, and we're going to change all lines anyway, then i don't mind to change `container` too, but if we rename it to `packed` then we should indeed use `UNPACKED` rather than `PLAIN`.

so both options are viable to me:
1. `unsigned int container : 2; / PLAIN==1 or PACKED==2 */`
2. `unsigned int packed : 2; / UNPACKED==1 or PACKED==2 */`

my previous aim was to take this:
3. `unsigned int container : 2; / PLAIN==1 or ZIPLIST==2 */`
i.e. in this case we don't modify the variable name or the constant that's currently used.
and then when @sundb makes the PR that changes ziplist to listpack, he can change ZIPLIST into either LISTPACK or PACKED.

i think i actually prefer 3, since it'll reduce the LOC change in this PR. it doesn't touch the ziplists, so why rename the define or variable?

bottom line, i vote for taking option 3 in this PR, and then change it option 2 in a future PR."
707053787,9357,oranagra,2021-09-13T06:58:01Z,"@perryitay i think it's as simple as enabling compression `list-compress-depth=1`, adding a plain nodes and and triggering this code.
maybe you can even modify `tests/asserts/default.conf` and run the test suite."
707055442,9357,oranagra,2021-09-13T07:01:04Z,"i don't want to do that (yet), but let's leave this comment unresolved to get more feedback."
707072543,9357,oranagra,2021-09-13T07:29:14Z,the new optional argument needs to be documented in the HELP message.
707074095,9357,oranagra,2021-09-13T07:31:31Z,"being a debug command, we don't need to be too strict about the syntax and errors.
i'd just go with something similar to `server.active_expire_enabled = atoi(c->argv[2]->ptr);`
also, the name `enabled` is wrong. should be `deep` or `light` or such."
707076275,9357,oranagra,2021-09-13T07:34:54Z,"a simple `addReplyError` is better.
both less code, and also better since it sends an error rather than a plain bulk string."
707077743,9357,sundb,2021-09-13T07:37:10Z,"Should we add a macro `NODE_IS_PLAIN`, instead of the existing `node->container == QUICKLIST_NODE_CONTAINER_NONE`."
707079411,9357,oranagra,2021-09-13T07:39:29Z,i think it's better to add a `light` or `deep` argument to `quicklistRepr` and a few if-else rather than add two functions is some code duplication.
707081355,9357,oranagra,2021-09-13T07:42:18Z,"let's also print the compression flag, and the size in the light mode.
and let's convert the `container` to string, i.e.
```suggestion
        printf(""{container : %s, encoding: %s, size: %zu}\n"", node->container==PLAIN? ""PLAIN"": ""PACKED"", node->encoding==RAW? ""RAW"": ""LZF"", node->sz);
```"
707082806,9357,oranagra,2021-09-13T07:44:25Z,"```suggestion
 * data - the data to add (pointer becomes the responsibility of quicklist) */
void quicklistAppendPlainNode(quicklist *quicklist, unsigned char *data, size_t sz) {
    __quicklistInsertPlainNode(quicklist, quicklist->tail, data, sz, 1);
```"
707083849,9357,oranagra,2021-09-13T07:45:57Z,let's change back to free+malloc
707101815,9357,sundb,2021-09-13T08:11:13Z,"Sorry I didn't see this comment (it was hidden).
I tried adding the following unit test, which triggers this code.
```c
    quicklistisSetPackedThreshold(1);
    quicklist *ql = quicklistNew(-2, 1);
    for (int i = 0; i < 500; i++)
        /* Set to 256 to allow the node to be triggered to compress,
         * if it is less than 48(nocompress), the test will be successful. */
        quicklistPushHead(ql, genstr(""hello"", i), 256);
                             
    quicklistIter *iter = quicklistGetIterator(ql, AL_START_TAIL);
    quicklistEntry entry;
    int i = 0;
    while (quicklistNext(iter, &entry)) {
        char *h = genstr(""hello"", i);
        if (strcmp((char *)entry.value, h))
            ERR(""value [%s] didn't match [%s] at position %d"",
                entry.value, h, i);
        i++;
    }
    quicklistReleaseIterator(iter);
    quicklistRelease(ql);
```"
707123803,9357,oranagra,2021-09-13T08:40:14Z,"i'm not sure what printf does on negative size of `%.*s`. maybe we should add some truncation in case of an overflow? please check.

maybe the truncation should not be just on overflow, but in any case `entry.sz > (1<<20))` or so?"
707129089,9357,oranagra,2021-09-13T08:47:02Z,"```suggestion
void quicklistAppendPlainNode(quicklist *quicklist, unsigned char *data, size_t sz);
```"
707129367,9357,oranagra,2021-09-13T08:47:24Z,"```suggestion
void quicklistRepr(unsigned char *ql);
void quicklistReprLight(unsigned char *ql);
```"
707132815,9357,oranagra,2021-09-13T08:51:44Z,"let's add a check that the value is one of the two we support and if not abort the loading gracefully.
e.g. see calls to `rdbReportCorruptRDB` below and return NULL after releasing what we need to release."
707137222,9357,oranagra,2021-09-13T08:57:13Z,"unrelated to this PR:
i see that we save compressed nodes as compressed strings, i.e. the same format as we would save non-compressed nodes when `server.rdb_compression` is enabled.
this means we decompress them on load time, right? which is why we don't bother to save the compression flag. (on reload it'll get lost).

i see room for improvement to save this flag and then avoid decompression on load time.
since we're changing the rdb format now and save the `container` field, maybe we should use this opportunity to save the `encoding` field too?"
707151210,9357,oranagra,2021-09-13T09:15:40Z,"don't you also need to set `list-max-ziplist-size` so that each entry is in it's own node?
maybe add some comments explaining what you aim to test in each of these tests and how."
707155677,9357,oranagra,2021-09-13T09:21:13Z,"this should be some 5gb, right?
see more details in https://github.com/redis/redis/pull/9357#discussion_r689123060"
707156882,9357,yoav-steinberg,2021-09-13T09:22:39Z,"The complete bit-field here is:
```c
    unsigned int count : 16;     /* count of items in ziplist */
    unsigned int encoding : 2;   /* RAW==1 or LZF==2 */
    unsigned int container : 2;  /* NONE==1 or ZIPLIST==2 */
    unsigned int recompress : 1; /* was this node previous compressed? */
    unsigned int attempted_compress : 1; /* node can't compress; too small */
    unsigned int extra : 10; /* more bits to steal for future usage */
```
We already have `sz` which is 32 bits. We don't need the `count` field and we don't need the `extra` field. This is another 26 bits. Together with `sz` it's 58 bits (or 67 million times more than 4GB). Why not just use this?"
707160466,9357,oranagra,2021-09-13T09:27:12Z,"why don't we need the `count` field? do you suggest to rely on the ziplist header?
not sure i'd like that.. and also, it may be LZF compressed."
708904577,9357,perryitay,2021-09-15T07:15:07Z,"@oranagra, I am closing this thread because I split the tests to small / big / compression. and we have more threads regarding other issues with the tests. "
708961648,9357,perryitay,2021-09-15T08:30:21Z,yes... its temporary so I can run the test on a regular machine and not an extra big one. 
710953256,9357,yoav-steinberg,2021-09-17T10:49:13Z,"I thought `count` is the number of items in the ziplist but in case of NONE container we don't have a zip list but rather just an sds, which is single entry (count always == 1). I guess I'm mixed up."
710968909,9357,oranagra,2021-09-17T11:16:29Z,"ohh, ok. re-purpose these bits just in case of a PLAIN (non-packed) node.
well, it'll be a little bit complex.. so the question again is if it wort it.
i.e. with all that complexity we might as well just add a few more bytes to the node when it's a PLAIN node and allocate a different struct (the extra bytes are not a high price to pay for a node holding a string that's huge anyway).

but the main question is if the extra 8 bytes do any significant damage on ziplist nodes.
i.e. the extreme case is lots of lists with one small members, but that's not a realistic case, right? "
710988936,9357,yoav-steinberg,2021-09-17T11:51:15Z,"I think it's not a big deal to add the extra 8 bytes, but I'm leaning towards the idea of having some union that'll include the ""container specific"" data (like `extra_len_bits` for NONE and `count` for ZIPLIST). This will make the code clearer I think.
Anyway that's all I have to day, either option is good.
"
711718204,9357,oranagra,2021-09-19T09:59:24Z,"ok, just remember that doing so doesn't really test what you intend to test.
i.e. it does test that the test code is correct, but it doesn't prove that there aren't any bugs in the C code (like using `int` instead of `long` or `size_t`)."
719427150,9357,oranagra,2021-09-30T13:49:35Z,"maybe the term ""light"" needs more words to be explained?
let's change the code below so that 0 is light (shallow) and 1 is deep (full), or we can consider it an LOD integer
```suggestion
""QUICKLIST <key> [<0|1>]"",
""    Show low level info about the quicklist encoding of <key>.""
""    The optional argument (0 by default) sets the level of detail"",
```"
720689745,9357,sundb,2021-10-02T15:03:16Z,Is this line redundant?
720690081,9357,sundb,2021-10-02T15:06:40Z,"```suggestion
        if (!light) {
```"
720791949,9357,oranagra,2021-10-03T08:28:54Z,"i think this block should be moved into the one below, so that the same comment (and debug print) covers them both."
720793335,9357,oranagra,2021-10-03T08:39:42Z,"why do we check `if (full)` here?
we wanna split it even if non-full since we can't fit the new item into it.
also, it's clear by locking at the flow, that there's no ultimate `else`, so if we reach there, we didn't insert the new data.
however, considering the checks in `_quicklistNodeAllowInsert`, full will always be set. so IMHO this condition is just confusing, should be plain `else`

p.s. i see there's still one handling of `isLargeElement` in the code below.
it's dead now, let's delete it."
720794385,9357,oranagra,2021-10-03T08:48:40Z,"technically ""max"" would be 2 (3 would be ""next"" or so).
but also, since you're using this to validate the rdb input, and it's not 0 based, you also need ""first"".

i'd suggest to either add a `quicklistIsValidContainer(int)` function / macro, or just change these to be 0 based, and then have MAX set to 1."
720794789,9357,oranagra,2021-10-03T08:51:41Z,"in some cases `rdbReportCorruptRDB` calls `exit()` so the code after it is unreachable, but in some cases it doesn't (e.g.  on RETORE command).
so you'll need to `return NULL` here too, and also make sure there's no memory leak (i.e. do `decrRefCount(o);` see below).

also, i now notice that the other `return NULL` you added above is also leaking memory."
720795700,9357,oranagra,2021-10-03T08:59:18Z,"styling: either we use one line, or if we break the `if` into two lines, we need to indent the conditions and braces differently
```suggestion
    } else if (!strcasecmp(c->argv[1]->ptr,""quicklist-packed-threshold"") && c->argc == 3) {
```"
720796024,9357,oranagra,2021-10-03T09:02:18Z,"yeah, returning two replies on one command would make a huge mess."
723908577,9357,perryitay,2021-10-07T07:16:23Z,@oranagra so what is decided here ? 
723909040,9357,perryitay,2021-10-07T07:17:08Z,now this test is passing. @oranagra @sundb any other issues you see with compression ? 
723909474,9357,perryitay,2021-10-07T07:17:53Z,"@oranagra , you want to change this in this pr ? "
723910253,9357,perryitay,2021-10-07T07:19:00Z,@oranagra I've added a temporary comment and will be changed when ready to submit. 
724031089,9357,oranagra,2021-10-07T09:56:11Z,"why delay that? is it too big for your computer? or for the PR CI?
we already have the `large-memory` guarding a test that allocated 512mb, and it's enabled by default and only skipped on some platforms.
these tests will allocate 5gb, right? and will be protected by the same flag.
if that's too much, maybe we need to make the tests disable that flag by default..
i.e. whatever we wanna do later, we should do now and see that it works, or conclude that we some improvement..

please check how much memory and how much time do these tests take when you change them, and see if they succeed running in the GH actions CI."
724053850,9357,yoav-steinberg,2021-10-07T10:29:11Z,"Discussed with @oranagra and he agrees that:
If we accept the current code of changing `sz` to `size_t` then in practice a single item list will grow from 136 to 144 bytes (verified with `MEMORY USAGE`). So the worst case scenario is we increase memory usage by less than 10%. I think that for this specific scenario (which is a very inefficient usage of lists) the overhead is tolerable."
724074875,9357,oranagra,2021-10-07T11:02:11Z,"i thought about it together with Yoav, and concluded that there's no need to do anything now.

Saving the compression flag is not needed, since the loader knows how many nodes there are in the quicklist it loads and knows the current configuration of the node compression (which is possibly different than the one used to save the file), so it can decide on it's own which nodes to keep compressed.

p.s. even if we'll decide we wanna keep the compression instead of decompress and re-compress, we'll at least need to de-compress in order to do ziplist sanitization."
724637515,9357,sundb,2021-10-08T01:26:00Z,"```suggestion
            full = atoi(c->argv[3]->ptr);
```
Btw, If there is only one line in the if, we don't need `{}`."
724638068,9357,sundb,2021-10-08T01:27:51Z,"```suggestion
    } else if (!strcasecmp(c->argv[1]->ptr,""quicklist-packed-threshold"") &&
               c->argc == 3)
```"
724639503,9357,sundb,2021-10-08T01:32:26Z,"```suggestion
#define QL_NODE_IS_PLAIN(node) ((node)->container ==  QUICKLIST_NODE_CONTAINER_PLAIN)
```"
724642856,9357,sundb,2021-10-08T01:43:34Z,"```suggestion
            if (container == QUICKLIST_NODE_CONTAINER_PLAIN) {
```"
724937532,9357,sundb,2021-10-08T11:41:06Z,"Should this method be moved to the end, as it's defined at the end of quicklist.h."
724956969,9357,sundb,2021-10-08T12:13:16Z,"```suggestion
            quicklistInsertAfter(quicklist, &entry, data, sz);
```"
724959680,9357,sundb,2021-10-08T12:17:41Z,Missing compression?
724960103,9357,sundb,2021-10-08T12:18:23Z,Compression is also missing here.
725440219,9357,sundb,2021-10-09T06:06:43Z,Forget to call `quicklist->count--`.
726029769,9357,sundb,2021-10-11T11:26:16Z,Should this comment line be deleted?
726034074,9357,sundb,2021-10-11T11:32:29Z,It looks like a wrong conflict was resolved.
726084328,9357,sundb,2021-10-11T12:44:57Z,"Forget to change here.
`#define rdbIsObjectType(t) ((t >= 0 && t <= 7) || (t >= 9 && t <= 18))`"
726357565,9357,perryitay,2021-10-11T16:58:15Z,"node count is 1 
inside __quicklistDelNode quicklist->count=-node count"
726841414,9357,oranagra,2021-10-12T07:36:25Z,what's wrong with that comment? (other than the reference to `zl` which we renamed?
726847520,9357,oranagra,2021-10-12T07:44:53Z,"you should now remove these asserts in this file, and a bunch of checks in t_list.c
added them in redis 6.2 and they got cherry picked to unstable, but in your branch that's handled
please go over the change in c5e6a6204c4cf57f85e7c83a9b4e99f1a7204fd2 and undo the ones that are no longer needed."
726859339,9357,oranagra,2021-10-12T07:59:32Z,"@perryitay now the conflict is properly resolved (diff-wise), but i think there's a bug.
there's a reason these few lines got extracted from `quicklistReplaceAtIndex` to `quicklistReplaceEntry`.
since now `quicklistReplaceEntry` is an API of it's own (used in t_list.c), all your plain node handling code needs to move to the inner method.
"
726861742,9357,sundb,2021-10-12T08:02:26Z,"@oranagra This comment has been changed to ` * When quicklistNode->entry is compressed, node->entry points to a quicklistLZF */` and old has not been deleted."
726866348,9357,sundb,2021-10-12T08:08:06Z,In #9589 the maximum element limit in the list can also be removed (`LIST_MAX_ITEM_SIZE`).
726869120,9357,oranagra,2021-10-12T08:11:22Z,"ohh, the same line appeared twice.
i was only looking at the small diff that's part of that comment, didn't see context."
727646473,9357,sundb,2021-10-13T02:18:03Z,We can use `quicklistDelIndex` instead of `quicklistDelRange` to avoid excess traversal.
728607846,9357,sundb,2021-10-14T03:29:27Z,"This is just to avoid call `quicklsitCompress` twice?
If that's the case I think we can move `zipstlistReplace` to above ifs(add else)."
728645721,9357,sundb,2021-10-14T05:29:11Z,"```suggestion
            entry->node->entry = ziplistDelete(entry->node->entry, &entry->zi);
            quicklistNodeUpdateSz(entry->node);
```"
728712945,9357,oranagra,2021-10-14T07:34:57Z,"i think `full` and `avail_next` are guaranteed to be 1 and 0 since `_quicklistNodeAllowInsert` has this check:
```c
    if(unlikely(QL_NODE_IS_PLAIN(node) || isLargeElement(sz)))
        return 0;
```
am i missing anything?"
728713541,9357,oranagra,2021-10-14T07:35:48Z,let's also delete the `LIST_MAX_ITEM_SIZE` define (no longer needed)
728714507,9357,oranagra,2021-10-14T07:37:07Z,"we'll need to move this code into the ""test"" block and tag it with `needs:debug` (and the recovery code).
otherwise it'll fail when executed on external servers which block DEBUG."
728716067,9357,oranagra,2021-10-14T07:39:10Z,"maybe add a few comments as to what exactly you aim to test, either here at the top, or next to each block."
728750808,9357,sundb,2021-10-14T08:24:27Z,"@oranagra Indeed. We should delete `full`, `!avail_next` and `!avail_prev`."
730360200,9357,oranagra,2021-10-17T06:08:45Z,i'm curious. why do you flush at the end of each test? maybe it's better to flush in the beginning of the next one (if needed)
730360608,9357,oranagra,2021-10-17T06:12:19Z,"i didn't understand what ""combinations"" means, now the comment above explains it, but maybe a better name could be:
`Test LSET with packed / plain, old / new combinations`?
i'm also willing to leave it as is, but either way, better keep the comment above and if needed update other tests / comments that refer to this one.."
730361071,9357,oranagra,2021-10-17T06:16:38Z,"we have here 3 nearly identical tests that are repeated twice.
maybe we can run them inside a foreach loop?
and maybe have it just skip the DEBUG command, or one of the loop iterations if unsupported (checking the tags)?
maybe if it's just these 3 tests, it's not a big deal, but if there are others with similar considerations it may be worth it
i.e. to avoid duplicate code and risk one copy being updated and the other one forgotten.


maybe a similar thing can be done for this:
```
    set str_length 5000000000

    # repeating all the plain nodes basic checks with 5gb values
```"
730668983,9357,perryitay,2021-10-18T08:10:00Z,"before this merge i was using different names for the lists. In order o use same name and since some of the tests are not clearing the list, I have just flush the db. is that a problem ? "
730694939,9357,oranagra,2021-10-18T08:39:19Z,"no, but i think it's nicer that each test starts with a flush (takes care of it self) rather than end with one (still relies on other tests to exit cleanly)"
732709877,9357,oranagra,2021-10-20T12:12:09Z,"tags are by default executed (unless `--tags -<tagname>` is added, or `--tags <tagname>` is added.
i.e. one means run everything except a certain tag, the other means run only a certain tag.

but now we need that tag to be skipped by default.
so i think we need some explicit mechanism rather than rely on the tags.

I think the mechanism we should follow is the `cluster:skip` tag.
see this code in server.tcl:
```
     if {$::cluster_mode && [lsearch $tags ""cluster:skip""] >= 0} {
        set err ""Not supported in cluster mode""
        return 0
    }
```

i.e. i think the tag here in list.tcl is ok (it tags a test as needing large memory), no need to change this line.
but we need to do these too:
1. add an optional argument to test_helper.tcl (like `--cluster-mode`)
2. add skipping code in server.tcl (`tags_acceptable`) like the one i pasted above)
3. add a note about it in `tests/README.md` (like the one who mentions `--cluster-mode`)
"
732714919,9357,oranagra,2021-10-20T12:17:51Z,"in the README, we can say that any test that requires over 100mb will be by default skipped.

i suppose this `--large-memory` flag should be described in the top comment (instead of the TODO it has now)

also, let's describe:
1. the new DEBUG sub-commands
2. rdb format change
3. any other major change that may be interesting for reviewers who don't wanna bother reading the code."
732963042,9357,oranagra,2021-10-20T16:42:33Z,"```suggestion
| `--large-mem`        | Enables tests that consume more than 100mb |
```"
732964220,9357,oranagra,2021-10-20T16:44:01Z,"```suggestion
| `largemem:skip`           | Test that requires more than 100mb |
```"
732965413,9357,oranagra,2021-10-20T16:45:32Z,"If you rename the tag you need to modify bitops.tcl too. 
But actually, I think the is name was better. It indicates the test requires large memory. 
Otherwise, if you refer CLI option, it should be `no-largemem:skip`. 
I think the should have been negated (hence my other comments). 
So bottom line, I suggest applying my comments, and then rename all the references to tag back to the old name. "
732965878,9357,oranagra,2021-10-20T16:46:09Z,"```suggestion
        set ::large_mem 1
```"
732966155,9357,oranagra,2021-10-20T16:46:31Z,"```suggestion
set ::large_mem 0
```"
732966673,9357,oranagra,2021-10-20T16:47:18Z,"```suggestion
    if {!$::large_mem && [lsearch $tags ""largemem:skip""] >= 0} {
```"
733579779,9357,sundb,2021-10-21T11:27:04Z,"I prefer the older ones, which are over 80, but not too long."
733584331,9357,sundb,2021-10-21T11:33:41Z,This change can be reverted.
733584503,9357,sundb,2021-10-21T11:33:57Z,This change can be reverted also.
733585780,9357,sundb,2021-10-21T11:35:28Z,This line should not be needed.
733589002,9357,perryitay,2021-10-21T11:40:04Z,"im not sure why github shows ""} else if (!strcasecmp(c->argv[1]->ptr,""set-skip-checksum-validation"") &&"" as line that changed... it is same line. I rather not change lines that is not relevant for the pr"
733590148,9357,sundb,2021-10-21T11:41:40Z,`If` needs to be followed by a space.
733592609,9357,sundb,2021-10-21T11:45:17Z,"I've looked at the code, and it has been modified by https://github.com/redis/redis/pull/9357/commits/672827b85ca4b13174afc17ddf8be9abefab9123.
BTW, If the condition in if is multi-line, `{` will be on the next line."
733593791,9357,perryitay,2021-10-21T11:46:58Z,I'll change the location of { ... thanks
733595162,9357,sundb,2021-10-21T11:48:59Z,"This is a compile warning with `REDIS_TEST`.
```
quicklist.c: In function ‘quicklistTest’:
quicklist.c:2053:28: error: ‘data’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
 2053 |                 assert(data[5] != i);
```

```suggestion
            unsigned char *data = NULL;
```"
733605879,9357,sundb,2021-10-21T12:04:06Z,Forget to add `quicklist-v2` to https://github.com/redis/redis/blob/cf860df59921efcc74be410bdf165abd784df502/src/redis-check-rdb.c#L95
733610528,9357,perryitay,2021-10-21T12:10:48Z,should I change  also quicklist to quicklist-v1 ? 
733619106,9357,sundb,2021-10-21T12:22:12Z,"It doesn't seem to be necessary, because `rdb_type_string` was added with both `zset-v1` and `zset-v2` (https://github.com/redis/redis/commit/df3c69e89eeea31245d2d4759589be216ad0b65f), I don't think we should change the old one. "
733632406,9357,sundb,2021-10-21T12:38:47Z,@perryitay You left this out.
733639286,9357,sundb,2021-10-21T12:47:19Z,"This will be fail under 32bit, the max value of `proto-max-bulk-len` and `client-query-buffer-limit` is 2147483647(2GB) under 32bit."
735084329,9357,oranagra,2021-10-24T08:33:14Z,"for the record, i don't care about the 80 line limit.. people have large monitors these days and i think it's silly to stick to very short lines.
I also don't think we need to have any strict line length limit, we should try to keep lines from being too long, but if in some cases we the code looks better with longer lines, that ok with me.
for multi-line `if` we do want to move the `{` to the next line, and in the case of this specific block `set-skip-checksum-validation`, i see no reason to change it (the form in unstable is ok)

"
735085628,9357,oranagra,2021-10-24T08:43:50Z,"good point, so these tests should be completely skipped in 32bit builds (even if user passes `--large-memory`).
i.e. since we've set the threshold of what we call ""large memory"" at 100mb, people may wanna use it in 32bit builds, but we must skip these tests in some way.

one way would be to try and detect how redis was built (using `[s arch_bits] == 64`)
the other way could be to try and set these configs inside a catch, and then do a `config get` to see if they succeeded.

i think the second way could be nicer since it can also implicitly work against external servers that block or clamp this config.

either way, this would let us easily avoid repeating these two configs per test."
735086626,9357,oranagra,2021-10-24T08:52:11Z,"```suggestion
""    Sets the threshold for elements to be inserted as plain vs packed nodes"",
""    Default value is 1GB, allows values up to 4GB"",
```"
735087760,9357,oranagra,2021-10-24T09:01:47Z,"```suggestion
        set err ""large memory flag not provided""
```"
735103505,9357,yossigo,2021-10-24T11:22:17Z,"```suggestion
            addReplyError(c, ""argument must be a memory value bigger then 1 and smaller than 4gb"");
```"
735189013,9357,madolson,2021-10-24T23:47:17Z,"```suggestion
                if (container != QUICKLIST_NODE_CONTAINER_ZIPLIST && container != QUICKLIST_NODE_CONTAINER_PLAIN) {
```"
735226154,9357,sundb,2021-10-25T02:56:49Z,"```suggestion
        (node)->sz = ziplistBlobLen((node)->entry);                            \
```
Not aligned `\`."
735228247,9357,sundb,2021-10-25T03:05:11Z,"```suggestion
        return ((entry->sz == p2_len) && (memcmp(entry->value ,p2, p2_len) == 0));
```"
735425723,9357,sundb,2021-10-25T09:35:42Z,"This line is not needed, because `quicklistCompress` is already called in `__quicklistDelNode`."
735432624,9357,sundb,2021-10-25T09:44:05Z,"As above, it should be moved to the `else`."
736097771,9357,sundb,2021-10-26T02:38:06Z,"```suggestion
    memcpy(new_node->entry, value, sz);
```"
736170015,9357,sundb,2021-10-26T05:44:31Z,"```suggestion
#define QL_NODE_IS_PLAIN(node) ((node)->container == QUICKLIST_NODE_CONTAINER_PLAIN)
```"
736209511,9357,sundb,2021-10-26T07:01:10Z,"Wrong is here, `size*` to `unsigned int*` will be truncated."
736240125,9357,sundb,2021-10-26T07:43:31Z,"```suggestion
                quicklistPop(ql, QUICKLIST_HEAD, &data, &sz, &lv);
                assert(data[5] != i);
                zfree(data);
```"
736247490,9357,sundb,2021-10-26T07:52:09Z,"Should change it to `unsigned int sz`, it looks like the temp variable `size` is not needed."
736312589,9357,sundb,2021-10-26T09:01:45Z,"It looks like what you want is this:
```suggestion
                assert(data[5] == ('0' + i)) {
                zfree(data);
```"
736393582,9357,perryitay,2021-10-26T10:39:59Z,not sure i understand what you did here...
736416011,9357,sundb,2021-10-26T11:10:44Z,"Because `data[5]` is a char, it must be false when compared with `i`.
And `assert(1)` will be no effect."
737069971,9357,sundb,2021-10-27T03:15:24Z,"```suggestion
        return ((entry->sz == p2_len) && (memcmp(entry->value, p2, p2_len) == 0));
```"
737075309,9357,sundb,2021-10-27T03:33:04Z,"The second and fourth arguments to `lzf_compress` are `unsigned int`, which will truncate if `node->sz` is larger than 4GB.
`lzf_decompress` is the same."
737084739,9357,sundb,2021-10-27T03:50:38Z,"It seems to be a tricky problem, if we can't let lzf support 64-bit we won't be able to compress data larger than 4GB.
ping @oranagra "
737715664,9357,oranagra,2021-10-27T17:57:47Z,"Interesting, good catch! 
I haven't looked at the code yet, but I suppose there's nothing that technically prevents lzf from supporting larger values, and we can modify the code to fix it. 
In any case, this would also cause issues for rdb.c when it attempts to store simple strings that are huge, and that's much worse since it's the default config (unlike quicklist compression). 
Maybe we should ignore that for now and leave that for a followup PR? "
737991525,9357,sundb,2021-10-28T03:21:12Z,"```suggestion
void quicklistRepr(quicklist *quicklist, int full) {
    int i = 0;
```"
737996005,9357,sundb,2021-10-28T03:36:25Z,"By lcov it seems that we are missing the test of the code.
Maybe we can use `debug reload` to coverage it."
738001715,9357,sundb,2021-10-28T03:56:11Z,"```suggestion
                                       void *value, size_t sz, int after) {
```"
738050562,9357,sundb,2021-10-28T06:14:51Z,"```suggestion
            unsigned char *p = ziplistIndex(entry->node->entry, -1);
```"
738169204,9357,sundb,2021-10-28T08:40:57Z,"`entry_node` only used here, and the definition can be moved here.
```suggestion
            quicklistNode *entry_node = __quicklistCreatePlainNode(value, sz);
```"
738206356,9357,sundb,2021-10-28T09:25:04Z,"```suggestion
    if (likely(!QL_NODE_IS_PLAIN(entry->node) && !isLargeElement(sz))) {
```
It seems that the result is the same for both ways of writing.
https://godbolt.org/z/zh9WdoPqK"
738347037,9357,sundb,2021-10-28T12:38:50Z,"```suggestion
int quicklistCompare(quicklistEntry *entry, unsigned char *p2, const size_t p2_len);
```"
738351383,9357,sundb,2021-10-28T12:44:17Z,"This should be moved to before of `if (!ziplistValidateIntegrity(data, encoded_len, deep_integrity_validation, NULL, NULL))`, 
When the container is `QUICKLIST_NODE_CONTAINER_PLAIN`, it is not necessary to incr."
738362378,9357,sundb,2021-10-28T12:57:37Z,"```suggestion
When not using `--large-memory`, filtering using the `largemem:skip` tag is done
```"
738906040,9357,sundb,2021-10-29T03:17:35Z,"When encountering corrupt data, `encoded_len` maybe 0, in which case we use `quicklistAppendPlainNode` to insert a data of length 0.
I feel that it should be skipped, otherwise, it will be followed by `zmalloc(0)` to create a `quicklistNode->entry`.
The existing code doesn't crash or write illegally to memory, but I think it is dangerous.

corrupt data restore command:
```
restore list 0 ""\x12\x01\x01\x00\n\x00\x8f\xc6\xc0W\x1c\n\xb3<"" replace
```"
739079269,9357,sundb,2021-10-29T09:27:47Z,It seems that we can revert to the old code and only modify `quicklist->tail->zl` to reduce the changes.
739110501,9357,sundb,2021-10-29T10:13:49Z,"This implementation feels wrong, when getting the value of the current iterator, we should not set current to the next node.
For example, the following code:
```
quicklistIter *iter = quicklistGetIterator(ql, AL_START_TAIL);
quicklistNext(iter, &entry);  <- first node is decompressed, current will be the second node.
quicklistReleaseIterator(iter); <- will compress current(the second node, actually need to compress the first node)
```"
739793902,9357,oranagra,2021-10-31T11:05:43Z,good catch. @perryitay please fix and add a test to the corrupt-dump.tcl unit.
739795521,9357,oranagra,2021-10-31T11:20:08Z,"@sundb i see the very bottom of this function does move `iter->current` to the next node if the ziplist is drained.
but indeed it does do that after re-compressing the one we just finished with...
so aren't we just missing a call to quicklistCompress before setting current?

either way, let's make sure this is tested."
739930374,9357,sundb,2021-11-01T03:01:46Z,"@oranagra When the current ziplist is drained, it needs to move to the next quicklistNode, which immediately performs another quicklistNext.
So after each execution of quicklistNext, the current is pointing to the current quicklistNode that needs to be fetched, not the next one.

I think we should unify the implementation of plain and packed.
```c
if (!iter->zi) {
    quicklistDecompressNodeForUse(iter->current);
    if (plain) {
        iter->zi = iter->current->entry;
    } else {
        iter->zi = ziplistIndex(iter->current->entry, iter->offset);
    }
} else {
    if (plain) {
        iter->zi = NULL;
    } else {
        ... old ziplist code
    }
}

entry->zi = iter->zi;
entry->offset = iter->offset;

if (iter->zi) {
    if (plain) {
        ... get item data from plain node
    } else {
        ... get item data from ziplsit node
    }

    return 1;
} else {
    quicklistCompress(iter->quicklist, iter->current);
    ... old code
    return quicklistNext(iter, entry);
}
```"
740163070,9357,sundb,2021-11-01T12:09:01Z,Redundant blank line.
740199276,9357,sundb,2021-11-01T13:12:00Z,Forget to free `data` when `encoded_len`  is 0.
740248797,9357,oranagra,2021-11-01T14:20:54Z,"debug reload has an implicit save in it.
```suggestion
```"
740249743,9357,oranagra,2021-11-01T14:22:02Z,please also add the test to the corrupt-dump.tcl for this case
740252292,9357,oranagra,2021-11-01T14:25:15Z,"i think testing just one call to `Next` in this test is a miss.
let's do a full iteration to cover the entire list (and even verify the last `Next` returns 0.
maybe it would also be a good idea to mix plain and non plain nodes?
i.e. set the threshold to 3, and add:
```
hello1
hello2
h3
h4
hello5
```"
740253604,9357,oranagra,2021-11-01T14:27:02Z,i guess it's nice to add `unlikely` in these `if`s
740979022,9357,perryitay,2021-11-02T11:48:16Z,"@oranagra  what kind of test in corrupt-dump.tcl  do you want ? I see that in the existing test ""corrupt payload: fuzzer findings - valgrind negative malloc"" I get to the new if   :         
if (data == NULL || (encoded_len == 0)) {
                if (encoded_len == 0)
                    zfree(data);
                decrRefCount(o);
                return NULL;
            }"
741001367,9357,sundb,2021-11-02T12:20:23Z,"```suggestion
                zfree(data);
                continue;
```
https://github.com/redis/redis/pull/9357#discussion_r740979022
The memory leak you describe is caused by this.
"
741003914,9357,sundb,2021-11-02T12:23:55Z,"@oranagra means to add `restore list 0 ""\x12\x01\x01\x00\n\x00\x8f\xc6\xc0W\x1c\n\xb3<"" replace` to the corrupt-dump.tcl test.
This test will not fail until you add `(encoded_len == 0)`, after that it will return `*Bad data format*` error."
741010222,9357,perryitay,2021-11-02T12:32:43Z,which test in corrupt-dump.tcl should I add it to ? 
741015579,9357,sundb,2021-11-02T12:40:14Z,"Add a test like this:
```tcl
test {corrupt payload: quicklist encoded_len is 0} {
    start_server [list overrides [list loglevel verbose use-exit-on-panic yes crash-memcheck-enabled no] ] {
        catch { r restore _list 0 ""\x12\x01\x01\x00\n\x00\x8f\xc6\xc0W\x1c\n\xb3<"" replace } err
        assert_match ""*Bad data format*"" $err
        r ping
    }
}
```"
741049327,9357,oranagra,2021-11-02T13:22:10Z,"nit pick: in theory a more correct check would be `if (data) zfree(data);`
the check on `encoded_len` is just because we know there are two entry conditions to the above if.
but also, since it's valid to zfree a NULL pointer, we can just `zfree(data);` without any condition."
741826687,9357,oranagra,2021-11-03T10:58:54Z,opened an issue: https://github.com/redis/redis/issues/9732
805323684,10285,oranagra,2022-02-13T11:56:59Z,"let's give a full example of the declaration here (not `...`).
and also document the full list of callback types (i.e. the header file is not used when generating the reference documentation, so all defines and typedefs should be mentioned in the C file comments."
805324050,10285,oranagra,2022-02-13T12:00:13Z,"make sure to document the expectations from the `err` argument.
should it always be a static string? (i don't think it's a good choice), if not, then who's releasing it?"
805324335,10285,oranagra,2022-02-13T12:02:15Z,i think this flag should be renamed to DEFAULT
805324806,10285,oranagra,2022-02-13T12:06:42Z,"this API is a little bit more complicated than others, maybe it should come with an example, and certainly a few more doc words."
805331108,10285,oranagra,2022-02-13T12:55:24Z,"If i understand the concept correctly (didn't dig too deep in the code), all that redis does with the enum_values is to check that users didn't provide any invalid input, but that's something the module can easily do on it's own (it has to compare the string to the enum values again anyway, right?), so effectively this gives the same features as RM_RegisterStringConfig, just more complicated to use.

alternatively, with a similar registration interface, we could have provided an integer value to the set / get callback, but then it means the enum always starting form 0 and are consecutive (in redis they allow more flexibility, like defining several aliases to the same integer value, or using power of two / bits).

i think we want to have the set / get callbacks get integers, and change the registration function to take an array of integers in addition to the strings."
805331337,10285,oranagra,2022-02-13T12:57:17Z,"> Should ARGS be required on LOADEX? It seems weird to make it required, but I didn't feel strongly either way.

args are optional in MODULE LOAD, i don't think we should make them mandatory here."
805332847,10285,oranagra,2022-02-13T13:09:58Z,"> There was an ask for double, my suggestion is that you should store a double as just a string and do conversation within the module. You get into weird cases like precision with floating points that vary between systems.

I do think we should support double configs (it's an important primitive type, just like integer and string).
i think the concerns around precision are no different than Redis's doubles in values (e.g. HINCRBYFLOAT etc).
maybe it's a good opportunity to also extend the redis internal configs to support that (we'll have use for it one day) "
805334355,10285,oranagra,2022-02-13T13:21:16Z,"> If you reject a set command, you are expected to free the RedisModule String you are given for strings and enums. This perhaps should be changed.

I didn't see this documented (or tested).
i'm not sure i like it. i assume that on success you expect the module to RM_Retain the string? and the caller to decrement it's refcount? why shouldn't that work correctly for failures too?"
805335026,10285,oranagra,2022-02-13T13:26:40Z,"> Alternatives to the ApplyConfigs() API is to call the setCallback immediately after the config is registered, this was rejected because you might have dependencies between config values, and it might be useful to load them all together first.

i'm not sure RedisModule_ApplyConfigs API is needed.

we certainly don't want to call the callback from withing it's registration call, but we can call all the setters when the module's OnLoad exits, or even after all modules are loaded (when we process all configs that where not recognized at startup and got queued for after modules are loaded).

the advantage for RedisModule_ApplyConfigs is that after all configs are set, the module gets a chance to validate their sanity and exit if there's a mismatch may also be required for CONFIG SET at runtime. i.e. in the spirit of #9748 to separate between the value setter callback, and the apply callback, and get just one apply callback for several configs.

So maybe instead of RedisModule_ApplyConfigs, the module should give an additional (optional) apply callback?
i.e. we'll call it after applying the configs for either startup and runtime (CONFIG SET) cases.

p.s. i didn't look at the code or tests yet, but for the purpose of variadic CONFIG SET, we need to be sure we handle rollbacks correctly."
805335289,10285,oranagra,2022-02-13T13:28:58Z,"> A config rewrite will rewrite all module configurations to the .conf file. Presently, there is no way to make assumptions about default values, so they are ALWAYS written on a config rewrite

Any reason not to let the module also set the default value, just for the purpose of REWRITE not to put them in the config file? that's the only way to later change defaults, and distinguish between explicit and implicit settings."
805337709,10285,oranagra,2022-02-13T13:47:18Z,"> We impose the restriction that any configuration name that contains a '.' is a module configuration. We also impose a restriction that a module configuration always starts with the module name. 

i'm not certain about imposing that any config with a `.` must be a module's config.
i'm ok with forcing all module configs to have the prefix of `<modulename>.`.
If i understand the code correctly, when we load a config, if it's not recognized (and starts with `.`) we can queue it to be processed after modules are loaded, and then fail if not matching module is found.
but i don't think it means that all configs with `.` must be a module ones."
805390599,10285,yossigo,2022-02-13T17:28:48Z,"@oranagra Not sure about this, with one arguable exception (`latency-tracking-info-percentiles`) there was never a case for a floating point config."
805394026,10285,yossigo,2022-02-13T18:00:17Z,"I am in favor of a single mechanism that enables delivering multiple configuration parameters in a single shot, which can be used at load time or when a multi-parameter set is performed.

Maybe it'd be easier to have a single `RedisModuleConfigSetFunc` that takes a single struct or array of structs expressing the desired config change to support that, instead of a single call per parameter.

This could also make it easier for a module to perform a `RedisModuleLoadConfigs` at load time, and receive the same array of structs that would be processed by the set callback, making it possible to abort the load if the configuration is invalid."
805394114,10285,yossigo,2022-02-13T18:01:02Z,"If we don't do that, how do we guarantee there are no name conflicts?"
805395923,10285,oranagra,2022-02-13T18:17:14Z,"i think such a mechanism will be more complicated to use on the module's side.
i.e. on simple / single configs, the module can just implement a set of callbacks, and doesn't need to worry about anything else.
the apply function and config grouping is something more advanced and rare. "
805451667,10285,madolson,2022-02-14T01:30:20Z,"This was something I realized while passing through the code late on friday. I don't agree with the implementation, but found it better to just document it then try to fix it. In either case we should add a test for it."
805454192,10285,madolson,2022-02-14T01:41:52Z,"One other use case is being able to do initialization based on configs. Internally we have example where we have a datastructure that isn't feasible to change at runtime, so we want initialize it at startup. It has a default size, but this default can be overridden by a config. We need this overridden value available during onLoad(), since ideally we initialize there. We would need some type of deferred loading otherwise. 

The intention of the Apply was just to make it coherent when the configs were now available."
805454892,10285,madolson,2022-02-14T01:45:14Z,"The code doesn't require the '.', it was just a mechanism to help prevent conflicts. It does prevent us from adding configs with .s in the future, but I'm not sure why we would ever do that."
805556265,10285,oranagra,2022-02-14T07:13:51Z,"looking at the code i don't see why it prevents us to add such configs in the future. we go look for module configs only after we're done trying to match the built in ones.
i think this can remain as is.
i.e. module configs have to have `.`, but it doesn't mean that they're the only ones.
i don't see any problem with conflicts this way."
805625529,10285,yossigo,2022-02-14T09:00:24Z,"@oranagra I'm not bought on that specific option, but I do think the following is a must:

* Have a single mechanism that covers both simple and more advanced use cases.
* Make all configs available at `OnLoad` time, before it returns, so it's possible to abort loading and handle initialization.
* Support atomic multi-parameter set."
806239466,10285,nichchun,2022-02-14T21:07:24Z,"That message is in regards to the requirement that a loadex command contains an ARGS keyword in it. LOADEX <path> ARGS is currently valid while LOADEX <PATH> is not. In reflection, not sure why this has value. Going to remove the restriction"
806403938,10285,sundb,2022-02-15T02:49:52Z,"```suggestion
void addModuleConfig(const char *module_name, const char *name, int flags, void *privdata);
```"
808862837,10285,sundb,2022-02-17T09:53:43Z,"```suggestion
    memmove(configs + index, configs + index + 1, sizeof(standardConfig) * (num_configs - index - 1));
```"
808875099,10285,sundb,2022-02-17T10:04:52Z,"```suggestion
void addModuleConfig(const char *module_name, const char *name, int flags, void *privdata) {
```"
808876903,10285,sundb,2022-02-17T10:06:34Z,"```suggestion
    sds config_name = sdscatfmt(""%s.%s"", module_name, name);
```"
808899608,10285,yoav-steinberg,2022-02-17T10:31:06Z,If this is currently only used for modules why not just make this a `RedisModule` pointer. This will make things much clearer and if we ever need private data for other commands then we can change it later. This will also eliminate the requirement for the `MODULE_CONFIG` flag (non NULL meaning it's a module config).
808918269,10285,oranagra,2022-02-17T10:50:54Z,"there are a few configs in which we decided to take percentage, arguably, in some it was a result of not having a floating point config support.
p.s. while we are on the subject, the numeric configs have support for `%` notation, similar to the `mb`/`gb` notation, see `PERCENT_CONFIG`, maybe we should expose this to modules too (although it's internal structure is hackey, i.e. negative values)."
809044019,10285,yoav-steinberg,2022-02-17T13:24:09Z,I'm not sure I like this limitation. It can just as well be a convention and not part of the code. I think we can guarantee there are no conflicts during the config registration phase when loading the module the same way we guarantee there are no command conflicts when loading the module leaving the `modulename.cmdname` a mere convention for command names.
809047745,10285,yoav-steinberg,2022-02-17T13:28:17Z,I'd like us to reconsider making the `configs` table a hash. I was also considering this when I implemented the multi config get/set realizing there's an O(N^2) complexity matching the config args to the table.
809060688,10285,yoav-steinberg,2022-02-17T13:42:33Z,why? I think what we currently do in case of an unrecognized config in the config file is simply ignore it. It'll remain in the rewritten file as is. Shouldn't this be the case here too?
809085316,10285,yoav-steinberg,2022-02-17T14:08:03Z,"I'm not too sure we really need the `set_ctx`. For the regular configs we tried to avoid distinguishing the context in the setter functions to make them simpler.
This seems like the only place someone actually reads the `set_ctx` and it appears just for the sake of performing some assertion in case of a software bug. I think we can remove this and just return the error with 0. The caller can detect the error return value and assert (or propagate it). "
809090758,10285,yoav-steinberg,2022-02-17T14:13:18Z,not critical but should probably be `LONG_STR_SIZE`.
809647621,10285,sundb,2022-02-18T03:29:42Z,"Sorry, my suggestion is missing `sdsempty()`.
Should be `sds config_name = sdscatfmt(sdsempty(), ""%s.%s"", module_name, name);`"
810238660,10285,nichchun,2022-02-18T18:17:00Z,"yeah, caught this when running with asan. no problem"
810458821,10285,sundb,2022-02-19T07:17:35Z,"```suggestion
    if (RedisModule_RegisterBoolConfig(ctx, ""mutable_bool"", 1, REDISMODULE_CONFIG_DEFAULT, getBoolConfigCommand, setBoolConfigCommand, boolApplyFunc, mutable_bool_val) == REDISMODULE_ERR) {
```"
810458938,10285,sundb,2022-02-19T07:19:03Z,"```suggestion
    /* We don't have to do any verification here, the core makes sure its in the range of enum_vals we provide */
```"
810593469,10285,oranagra,2022-02-20T09:12:46Z,"@yossigo @gkorland do you think that's acceptable to get a static error string (modules can't format runtime content into it).
how would that work with modules written with languages other than C (Java / Rust)?"
810593879,10285,oranagra,2022-02-20T09:16:29Z,"So the actual enum (int) values always starting form 0 and are consecutive (in redis they allow more flexibility, like defining several aliases to the same integer value, or using power of two / bits).

I think we want to allow modules similar flexibility and change the registration function to take an array of integers in addition to the strings."
810595255,10285,oranagra,2022-02-20T09:26:52Z,"i think we need to decrRefCount both on either success or failure.
the module should ""Retain"" the string if it chooses to keep it (or clone it)"
810596520,10285,oranagra,2022-02-20T09:37:52Z,"i'm not certain we wanna expose `CONFIG_HIDDEN` to modules, but maybe we do wanna expose `PERCENT_CONFIG` and `OCTAL_CONFIG` ?"
810599423,10285,oranagra,2022-02-20T09:59:41Z,"personally, i don't see any advantage in doing
`if (isModuleStandardConfig(config))`
vs
`if (config->flags & MODULE_CONFIG)`"
810599647,10285,oranagra,2022-02-20T10:01:25Z,"to me, it's confusing to see this comment next to the `standardConfigGet` function when it speaks about other functions.
personally, i'd either split it to fragments, separate it from the function (maybe with `/*-------*/` header, or just drop it (doesn't seem that useful)"
810600648,10285,oranagra,2022-02-20T10:08:54Z,"do we assume here that all configs with `.` are modules?
why do we need the `strchr` search? won't it work just the same by just calling `isConfigNameRegistered`?"
810601391,10285,oranagra,2022-02-20T10:14:37Z,"since this search is a little bit wasteful (full iteration on all configs and string compare), and considering we already have a similar search done by the caller (haven't seen it yet, but otherwise we could not afford an assertion), maybe we should drop this one.
or alternatively, change this function to return an error on an existing config, and drop the other check."
810601652,10285,oranagra,2022-02-20T10:16:32Z,"this call to realloc per config could be very wasteful.
let's add a mechanism to remember the size of allocation and number of unused entries, and do a realloc only once in 32 or so."
810601869,10285,oranagra,2022-02-20T10:18:12Z,"if we do the above, we need to avoid shrinking here.. but seeing this memmove (which could be called repeatadly), i'm starting to lean towards using a dict..

on the other hand, it would not be bad if there's only one or two modules registering just a few configs.
and even if a module registers a hundred configs, MODULE UNLOAD is a very rare event.
so maybe we shouldn't worry about it after all.

WDYT?"
810602314,10285,oranagra,2022-02-20T10:21:47Z,"on the other hand, seeing the loop in removeConfig, and realizing that even that one is called inside a loop, gives me the shivers."
810603513,10285,oranagra,2022-02-20T10:30:45Z,"not sure why createModuleStandardConfig is needed.
it's impolite to pass structs on the stack. ;-)"
810608432,10285,oranagra,2022-02-20T11:09:04Z,"i'm usually in favor of doing `argv+i` instead of `&argv[i]` or alike, but in this case, why not just `argv[i]`?
p.s. i think the code below will be nicer if the increments for for `i` will be the last act, and all the other logic will refer to the unmodified position."
810614514,10285,oranagra,2022-02-20T12:00:15Z,"i think we can afford to use `server.module_configs_queue` for the LOADEX command too, rather than add this context member.
we don't really need it in any other context, and it'll actually simplify RM_LoadConfigs, and a few other places.
when we're done with server startup we have a check that verifies that list is empty, and we don't have nested calls to LOADEX.
we'll have to add one or two comments that explain that it's used in two different cases, but i think it'll clean more than two lines."
810614939,10285,oranagra,2022-02-20T12:03:36Z,"i don't like the concatenation here, (just in order to split it later in `loadModuleConfigs`), but since it's done to be uniform with the case of loading lines from the config file, i suppose we don't have a better way."
810615614,10285,oranagra,2022-02-20T12:08:48Z,"BTW, we also don't support MULTI_ARG_CONFIG, i suppose the only impact on that is that the module will have to split the string on it's own, right?
@yoav-steinberg ^^"
810616131,10285,oranagra,2022-02-20T12:11:54Z,aren't we missing `dlclose`?
810617131,10285,oranagra,2022-02-20T12:20:02Z,"in the context of CONFIG SET command, we do one search to find the relevant config in config.c, but that only brings us to the right module, and now we do another search.
maybe instead of storing the module pointer in the config.c struct we'll save a ModuleConfig pointer, and add a module pointer to ModuleConfig?
this way we don't need the second search."
810617453,10285,oranagra,2022-02-20T12:23:11Z,"this will be easier to follow if we check them incrementally.
i.e. first check that we didn't get any unsupported flag, and then check that the MEMORY flag is not applied without NUMERIC"
810618920,10285,oranagra,2022-02-20T12:33:53Z,note to self. check that this can't skip the init time default setting.
810619184,10285,oranagra,2022-02-20T12:35:57Z,"note to self. this is duplicating quite a lot of logic from config.c
maybe we can somehow embed it differently into the config.c structs so that our callback is called just instead of setting the referenced variable, and we can avoid duplicating that logic."
810621124,10285,oranagra,2022-02-20T12:49:50Z,"something seem fishy here to me, and i can't put my finger on it.
why do you need to call the function pointer with `*`?
it should be just `config->get_fn.get_string(...)`
i see this builds successfully, and i don't see that this is a **reference** to a function pointer **variable**, but rather just a function pointer."
810624374,10285,oranagra,2022-02-20T13:15:12Z,"i don't like much of the core around the error message handling in this function.
i see it is modeled after `loadbuf` in config.c, which i don't like much either.
but let's at least avoid allocating an object on the heap in case there's no error.

i suppose we'll have to run the loop twice, but the code will probably be cleaner, and performance wise two loops in this case is probably better than two excessive malloc calls."
810624470,10285,oranagra,2022-02-20T13:15:42Z,"i don't like much of the core around the error message handling in this function.
i see it is modeled after `loadbuf` in config.c, which i don't like much either.
but let's at least avoid allocating an object on the heap in case there's no error.

i suppose we'll have to run the loop twice, but the code will probably be cleaner, and performance wise two loops in this case is probably better than two excessive malloc calls."
810624491,10285,oranagra,2022-02-20T13:15:46Z,"i don't like much of the core around the error message handling in this function.
i see it is modeled after `loadbuf` in config.c, which i don't like much either.
but let's at least avoid allocating an object on the heap in case there's no error.

i suppose we'll have to run the loop twice, but the code will probably be cleaner, and performance wise two loops in this case is probably better than two excessive malloc calls."
810624497,10285,oranagra,2022-02-20T13:15:46Z,"i don't like much of the core around the error message handling in this function.
i see it is modeled after `loadbuf` in config.c, which i don't like much either.
but let's at least avoid allocating an object on the heap in case there's no error.

i suppose we'll have to run the loop twice, but the code will probably be cleaner, and performance wise two loops in this case is probably better than two excessive malloc calls."
810625455,10285,oranagra,2022-02-20T13:23:27Z,"how is this at all possible to get that error (config not found?)
i suppose that if we take my suggestion of keeping a reference to `ModuleConfig` as `privdata`, it'll be clearer that this is unreachable.
let me know if i'm missing anything."
810626340,10285,oranagra,2022-02-20T13:30:22Z,"for instance looking at `SET_NUMERIC_TYPE` and `GET_NUMERIC_TYPE`.
if we just add another numeric type `NUMERIC_TYPE_CALLBACK`
then all the code handling numerics in config.c could serve modules too. (of course i'm referring to all types, not just numeric)

it might make module.c and config.c more coupled with each other.
but we'll reduce code duplication, and update / fixes will implicitly be applicable to both.

maybe make a POC in a side branch to decide."
810626975,10285,oranagra,2022-02-20T13:35:00Z,"even if we go with letting the module provide explicit values for each enum, we always run the risk that it's getter callback returns a value for which there's no registered string.
maybe `ll2string` would be better than ""unknown""
e.g. in case of some bug or corruption, it'll provide some additional info. "
810628334,10285,oranagra,2022-02-20T13:44:57Z,"```suggestion
/* This function takes a module and a list of configs stored as sds NAME VALUE pairs.
```"
810629810,10285,oranagra,2022-02-20T13:55:42Z,"actually, even when parsing the config file, we already have it split.
i.e. we could maybe use the `argv` we already have split, instead of `lines` here:
`listAddNodeTail(server.module_configs_queue, sdsnew(lines[i]))`"
810632444,10285,oranagra,2022-02-20T14:14:36Z,"i may be missing something, but as far as i can tell the apply_fn is only called from the context of RM_LoadConfigs, and it should be also called from CONFIG SET command (each unique callback called only once after all setters have been called).

actually, it should **only** be called in the context of CONFIG SET (same as with the config.c infrastructure, which doesn't call these on startup).
on startup the module is getting all the setter callbacks before it's initialization stage, so it doesn't need the apply callbacks."
810634199,10285,oranagra,2022-02-20T14:27:33Z,"ohh, i found what i was missing:
`RM_RegisterStringConfig` passes the apply function pointer directly to `addModuleConfig`
this means that config.c calls the module callback (without any dispatcher or module context).
on one hand this is the only way to have the code in `configSetCommand` de-duplicate the apply function callbacks (not call the same one twice).
i.e. if it would go though some generic module.c dispatcher that de-duplication would break.

but on the other hand, binding the module callback signature to the config.c one is probably wrong, we'll end up paying for that someday.
i think we should add context pointer argument to that callback, which will force us to find a way to decouple these callback signatures and and find another solution for the de-duplication.

maybe the generic config.c infrastructure should have an optional ""privdata"" pointer for each apply function, and it'll de-duplicate only if both the apply function pointer and the privdata are identical.

then module.c will heap allocate some structure with the module pointer, and provide that together with some dispatcher function as callback. then that dispatcher can create a `RedisModuleCtx` when calling the module apply callback?"
810636960,10285,oranagra,2022-02-20T14:47:51Z,"```suggestion
 * * REDISMODULE_CONFIG_IMMUTABLE: This config can only be provided loading time.
```"
810637084,10285,oranagra,2022-02-20T14:48:53Z,"```suggestion
 * * REDISMODULE_CONFIG_DENY_LOADING: This config is not modifiable while the server is loading data.
```"
810637291,10285,oranagra,2022-02-20T14:50:03Z,"```suggestion
 * * REDISMODULE_CONFIG_MEMORY: For numeric configs, this config will convert data unit notations into their byte equivalent.
```"
810637483,10285,oranagra,2022-02-20T14:51:44Z,"our strings have refcount, i don't think this is needed.
we can pass the strings to the module, and then release them if not retained or copied."
810637609,10285,oranagra,2022-02-20T14:52:43Z,maybe extend this example with something that checks the input and returns an error string.
810641215,10285,oranagra,2022-02-20T15:17:57Z,"i can't find code that does that.
we must make sure the default value used for the CONFIG REWRITE is the same one used as default for startup.
and the only way to do that, is to use that default on startup (when the config didn't provide an explicit one)"
811352385,10285,nichchun,2022-02-21T18:14:06Z,"I didn't necessarily want to traverse the entire configs array on every single config present in the .conf file. In this particular case, where its only module configs that can be removed, I considered it a runtime improvement. If we want this logic generalized, however, it makes sense to switch it to just isConfigNameRegistered."
811353812,10285,nichchun,2022-02-21T18:17:02Z,"I considered this as well, and tend to agree. It's awkward to have it as part of ctx as well."
811357043,10285,nichchun,2022-02-21T18:23:15Z,"The situation that this accounts for is 1. A module load with configs. 2. a rewrite. 3. a module unload, and then 4. another config rewrite. This causes the server to not start-up from the .conf file because the module configurations are still in the .conf file."
811359399,10285,nichchun,2022-02-21T18:28:04Z,"I completely agree, but I found this to be somewhat out of scope. I think it makes more sense to make that part of a separate pull request"
811369518,10285,madolson,2022-02-21T18:49:59Z,"I thought CONFIG_HIDDEN was useful for the same reason we expose it, just to provide some functionality for testing but it should show up if you do `CONFIG GET <module_name>.*`. "
811372104,10285,madolson,2022-02-21T18:55:56Z,"My personal opinion is that we should move all the configs to a dictionary, it optimizes a lot of the cases. I didn't necessarily want to do all that work here, so I was inclined to either do that as a follow up. Maybe someone can do that in parallel."
811375589,10285,madolson,2022-02-21T19:03:53Z,"That's good to know, there are several other places in the code that use 128 as a magic number for the max serialized size of a long."
811378537,10285,madolson,2022-02-21T19:10:27Z,"If we have apply. I agree I think we could probably remove the set_ctx, which servers a similar role."
811632308,10285,madolson,2022-02-22T07:07:50Z,"I prototyped it a bit here, https://github.com/redis/redis/pull/10323, I didn't notice that much perf changes. GET, as implemented, will require a bit more work though."
811642504,10285,madolson,2022-02-22T07:25:27Z,"```suggestion
        ""arity"": -3,
```
Only `MODULE LOADEX <path>` is required now."
811718564,10285,yoav-steinberg,2022-02-22T09:05:18Z,"The server will fail startup after stage **2** in the above description (in case it doesn't start with the module). Just the fact that we write module confs into the config file has the potential to cause a startup issue. But we still want to do so.
So my suggestion is either
1.  Allow this, and in case of a startup issue the user will need to fix their config file.
2. **Any** unrecognized config will be excluded during the rewrite (no matter if it's a module or not). Or even better commented out during the rewrite.
3. Extend module unload command to optionally rewrite the config during unload if we've performed a rewrite since the load. In this rewrite we explicitly skip this module's configs.

(I'm for 2 with the ""comment"" extension)"
812323838,10285,nichchun,2022-02-22T20:19:06Z,"I'm not sure I love how this is being handled now, but we do no longer just remove configs from an old file instead we comment out the offending lines."
817306290,10285,sundb,2022-03-02T02:53:32Z,Use `define` for 32 and add some comments?
817307218,10285,nichchun,2022-03-02T02:56:03Z,At the moment this is a place holder until i merge in [the hashmap version of configs](https://github.com/redis/redis/pull/10323)
825251519,10285,madolson,2022-03-12T05:37:54Z,This function name doesn't make that much sense being exposed publically. Maybe we should write a wrapper for getConfigFromName + performInterfaceSet
825251628,10285,madolson,2022-03-12T05:38:46Z,"You can check for the interface type == ENUM here, and then you don't need to keep track of the is_enum. "
825251760,10285,madolson,2022-03-12T05:40:15Z,"This needs to fail if the module config is doing extra validation on the set value, since it can reject it."
825252090,10285,madolson,2022-03-12T05:44:57Z,"```suggestion
    RedisModuleString *new = createStringObject(strval, sdslen(strval));
```"
825252204,10285,madolson,2022-03-12T05:46:01Z,"```suggestion
/* This is a series of set functions for each type that, for the most part, emulate the ones
```"
825252211,10285,madolson,2022-03-12T05:46:07Z,"```suggestion
/* This is a series of get functions for each type that, for the most part, emulate the ones
```"
825252334,10285,madolson,2022-03-12T05:46:59Z,"```suggestion
    return val ? sdsdup(val->ptr) : NULL;
```"
825252774,10285,madolson,2022-03-12T05:52:42Z,"I'm not sure we need these anymore, since we are going to use the type from config.c"
825253015,10285,madolson,2022-03-12T05:55:24Z,"It doesn't look like we need this any more, since the module_config always stores a pointer to the module. The list can just store a list of the module_configs."
825253239,10285,madolson,2022-03-12T05:58:11Z,"Probably more readable in this context.
```suggestion
    for (int i = 0; i < num_enum_vals; i++) {
        enum_vals[i]->name = zstrdup(enum_vaues[i]);
        enum_vals[i]->val = int_values[i];
    }
```"
825253356,10285,madolson,2022-03-12T05:59:59Z,Unused
825253365,10285,madolson,2022-03-12T06:00:11Z,I'm not sure many of these are used outside of config.c
825253510,10285,madolson,2022-03-12T06:01:39Z,"```suggestion
        removeConfig(full_name);
```"
825253958,10285,madolson,2022-03-12T06:07:42Z,"We should parse these parameters ""before"" starting to do any loading. Failing here for syntax errors just makes life more complex."
825254186,10285,madolson,2022-03-12T06:10:00Z,This code is unused now.
825254436,10285,madolson,2022-03-12T06:13:03Z,"This is likely not binary data safe, since sdssplitargs will split on spaces. If the value has a space it will break, we probably need to store this as something other than an sds pair. (Like a tuple)"
825254448,10285,madolson,2022-03-12T06:13:20Z,"```suggestion
/* This function takes a module and a list of configs stored as sds NAME VALUE pairs.
 * It attempts to call set on each of these configs. */
```"
825255060,10285,madolson,2022-03-12T06:21:12Z,"This being a macro is a bit weird and unexpected, I would also expect this to actually return a type.
```suggestion
// The types on this aren't right, but I think you get the idea
ModuleConfig *createModuleConfig(config_name, config_type, apply, config_privdata, module) {
    ModuleConfig *new_config = zmalloc(sizeof(ModuleConfig);
    new_config->name = config_name;
    new_config->type = config_type;
    new_config->privdata = privdata;
    new_config->apply_fn = apply;
    new_config->module = module;
    return new_config;
}

#define addDefaultAndCallbacksToConfig(config, getfn, setfn, type) \
    config->get_fn.get_##type = getfn; \
    config->set_fn.set_##type = setfn;

void addModuleConfigtoList(RedisModule *module, ModuleConfig *new_config) {
    module->module_configs = listAddNodeTail(module->module_configs, new_config);
}
```"
825255231,10285,madolson,2022-03-12T06:23:38Z,"It should work okay with rust, you can specify a static lifetime string. "
825255439,10285,madolson,2022-03-12T06:25:45Z,"If you take my earlier suggestion to update `createModuleConfig`
```suggestion
    ModuleConfig *newStringConfig = createModuleConfig(sdsnew(name), REDISMODULE_CONFIG_STRING, applyfn, privdata, module);
    addDefaultAndCallbacksToConfig(newStringConfig, getfn, setfn, string);
    addModuleConfigtoList(module, newStringConfig);
    flags = maskModuleConfigFlags(flags);
    addModuleStringConfig(module->name, name, flags, newStringConfig, default_val ? default_val->ptr : NULL);
```"
825255474,10285,madolson,2022-03-12T06:26:18Z,"Maybe use new_config instead of newEnumConfig? It's also the only place you use camelCase for variable names in this PR, not sure if that was intentional."
825255888,10285,madolson,2022-03-12T06:31:42Z,"listEmpty() should do the same thing here, and is a little bit clearer."
825256072,10285,madolson,2022-03-12T06:33:15Z,"ModuleConfig is in server.h
```suggestion
void addModuleApply(list *module_configs_tuples, ModuleConfig *module_config) {
```"
825256520,10285,madolson,2022-03-12T06:39:17Z,Don't we also need to free the default sds string value?
825257155,10285,madolson,2022-03-12T06:40:44Z,"Also, we should duplicate the default value and decrRefCount on the RedisModule string, we only need to keep around the sds value. "
825257634,10285,madolson,2022-03-12T06:47:01Z,"```suggestion
 * * REDISMODULE_CONFIG_DEFAULT: The default flags for a config. This creates a config that can be modified after startup. 
```"
827729762,10285,oranagra,2022-03-16T08:14:40Z,"if only now we apply module configs, then there's no need to provide the `module_configs_apply` to the above call to `restoreBackupConfig`"
827731328,10285,oranagra,2022-03-16T08:16:37Z,"this is a response to the discussion about not writing unknown configs?
in that case:
1. please add a clear comment above this code block describing that it does / why.
2. please make sure this change is described in the PR top comment."
827900309,10285,oranagra,2022-03-16T11:24:13Z,"trying to make this long line slightly shorter (removing excessive casting).
```suggestion
        if (config->flags & MODULE_CONFIG) return setModuleNumericConfig(config->privdata, val, err);
```"
827903717,10285,oranagra,2022-03-16T11:28:27Z,"@madolson do you remember why this was a define and not a function? i'm guessing it's a leftover from repeated refactoring we did.
it doesn't look like it does any type checks these days (the value passed in is always a `long long`)"
827907273,10285,oranagra,2022-03-16T11:32:52Z,"actually, since it also does `return`, i'd rather have that in a separate line.
i.e. i don't mind putting the action of an `if` in the same line, but if that action changes the execution flow (break, continue, return, goto), i'd rather have it in a separate line.
the exception is repeated error handling, where adding a check and a goto or return after each line, will bloat up the number of lines considerably, and make the actual code less readable
```suggestion
        if (config->flags & MODULE_CONFIG)
            return setModuleNumericConfig(config->privdata, val, err);
```"
827914385,10285,oranagra,2022-03-16T11:42:03Z,"we end up keeping a pointer to that dummy value (which is on the stack).
let's make sure to nullify it on the next line.
the other alternative is to nullify it in embedCommonConfig (when MODULE_CONFIG is set), but that's before it is actually set, so we'll have to re-order things so that it'll be effective. "
827943629,10285,oranagra,2022-03-16T12:18:23Z,"what's the point of this check?
preparing for additional flags in the future?
at the moment it looks silly.

IMHO we should either drop it, or declare some mask next to REDISMODULE_CONFIG_MEMORY and check the mask here.
(and change `numeric_flag` to `numeric_flags`)
i'd vote to drop it, we can always extend it in the future."
827947806,10285,oranagra,2022-03-16T12:23:27Z,"why do we need to get the prev value and release it?
it this leftover from something? or does the module relies on us releasing it? (which i think is wrong!)"
827950570,10285,oranagra,2022-03-16T12:26:37Z,"or maybe escape them with sdscarrepr when we create that list?
either way, let's add a test."
827971412,10285,oranagra,2022-03-16T12:50:29Z,we're leaking the ctx in this return.
827976697,10285,oranagra,2022-03-16T12:56:06Z,"why bother storing the return value back to `module->module_configs`?
this list API will never re-allocate the list (the return value is only a dead-code error handling, with potential for some chaining).
p.s. if we remove this, maybe there's no need for the `addModuleConfigtoList` function, and we can just embed this code into the caller."
827983846,10285,oranagra,2022-03-16T13:03:26Z,"i'd rather avoid string concatenation macros (`##`), makes it hard to grep the code.
i think it'll be ok to expand this macro and add these two lines in each place.
also, the name suggests that it deals with the default value, but it doesn't"
827997069,10285,oranagra,2022-03-16T13:16:49Z,"> The GET callback transforms the config into a value for module

shouldn't that say `retrieves the value from the module` or something like that?

> The optional APPLY callback is called after a SET command to verify value(s).

The APPLY function's roles is not to `verify`, the SET callback can do verification too (unlike the native redis configs which are just backed by a variable pointer, and an extra `is_valid` callback), for modules the SET callback is the one that does the validation.

p.s. i'm not sure if we should use uppercase `SET` / `GET` / `APPLY` in these docs (these can be used to refer to commands or sub-commands, but that's not what we do here).
i think we better use `setfn` instead, and possibly quote it with ` for markdown docs.

regarding the apply callback, instead of stating that it's for validation, we should state that:
1. it is only called by CONFIG SET command (not on startup).
2. it can be used to apply a config after it (and several others) were changed atomically.
3. when CONFIG SET changes a bunch of configs together, it is called only once (de-duplicated if the same callback pointer and privdata was used for several configs), 

we should probably mention that `setfn` is called on startup with either the default value or the one provided by the user, but the `applyfn` is not called on startup."
828017272,10285,oranagra,2022-03-16T13:35:45Z,outdated
828018569,10285,oranagra,2022-03-16T13:36:58Z,i think we need to explicitly refer to `enable-protected-configs`
828019647,10285,oranagra,2022-03-16T13:37:59Z,"not sure i understand that line, or that i agree it's the right approach.
i think the module needs to manage it's memory, and redis needs to increment refcount only if it keeps the pointer given by the module."
828023088,10285,oranagra,2022-03-16T13:41:09Z,"i don't understand the ""memory management"" of this sample code.
i think we should only retain when we use the new value, in which case, we should free the previous one."
828027131,10285,oranagra,2022-03-16T13:44:59Z,"why do we need to `decrRefCount(default_val)`? so that users can forget about it and don't worry about releasing it?
i don't think that's good, if we would have decided to keep a reference we should have incremented it, but since we copied it, i think we should't mess with the refcount."
828029598,10285,oranagra,2022-03-16T13:47:14Z,"looking at the other sample code we have (e.g. `RM_Call`). we use `*` in the beginning of each line in the examples too.
i'm not sure what the markdown formatter does, i'd rather stick to the same practice.
p.s. do that for other examples too"
828030991,10285,oranagra,2022-03-16T13:48:33Z,missing a newline.
828032997,10285,oranagra,2022-03-16T13:50:18Z,let's mentioned it should be called in `RM_OnLoad`
828034779,10285,oranagra,2022-03-16T13:51:55Z,"nit pick, we're inconsistent about adding spaces, but let's at least be consistent within the line 8-)
```suggestion
        if (moduleLoad(c->argv[2]->ptr, (void **)argv, argc, 1) == C_OK)
```"
828039944,10285,oranagra,2022-03-16T13:56:31Z,"this will abort the process if a user provided a config in the config file, and we didn't find any module that claimed it, right?

i think we should also abort if the module registered configs and didn't call the Load API.
i.e. catch that programmer error even if the user didn't pass any config at loading time.
WDYT?"
828044664,10285,oranagra,2022-03-16T14:00:43Z,"this will fail if the user provided configs to LOADEX and they where either not recognized by the module, or it forgot to call the Load API, right?

maybe we should also cover the case that the module registered configs and forgot to call the Load API?
i.e. even if the user didn't pass configs, or used just MODULE LOAD and not MODULE LOADEX?
WDYT?"
828047795,10285,oranagra,2022-03-16T14:03:43Z,"i think this is the place where we're also suppose to apply the default values to the module.
i.e. call the `setfn` callback with either the value provided by the user, or the default value.
if we don't call the setter with the default value on load time, we can get a case where there's a mismatch between the default value for execution, and the default value for rewrite.

to do that, i suppose we need to change the loop to iterate over the registered configs, rather than the ones provided by the user (module_configs_queue)."
828251186,10285,madolson,2022-03-16T17:02:42Z,"My recollection was that it was needed at some point since we had a places where val was either unsigned or signed, it looks like that isn't required any more."
828513541,10285,madolson,2022-03-16T22:51:47Z,"Probably add some documentation for this, since it's hard to follow without context."
828554752,10285,nichchun,2022-03-17T00:23:09Z,"This is currently how it works, ill add a test to clarify that."
828634656,10285,madolson,2022-03-17T01:43:47Z,"Server panic here instead, this isn't valid."
828638071,10285,madolson,2022-03-17T01:46:17Z,"Maybe we should have an error label at the end of the function, so that we don't have duplicate places where we fail loading."
828641501,10285,madolson,2022-03-17T01:48:46Z,"PIN: We should document that get() does not consume the string, so if the client is doing any type of transformation it knows its still valid afterwards."
828645837,10285,madolson,2022-03-17T01:52:09Z,"```suggestion
        pending_apply = listNodeValue(ln);
```
I know it's not widely done it redis, but we should try to respect APIs. "
828656277,10285,madolson,2022-03-17T01:59:38Z,I'm going to recant what I said earlier and still think we should do sdscatrepr here for the variable name. Otherwise we might fail to parse it later. It's a simpler invariant to maintain that this is always properly formed.
828656713,10285,madolson,2022-03-17T01:59:56Z,"```suggestion
/* We parse argv to add sds ""NAME VALUE"" pairs to the ctx list of configs. We also increment the module_argv 
```"
828662431,10285,madolson,2022-03-17T02:04:16Z,"I still believe this logic can be in the moduleCommand() function. It's then possible to have the parseLoadexArguments actually reply with a useful human message. Generally the best practice is to do validation of input parameters before any actual work.

(I think on failure this leaks the open handle too)"
828669007,10285,madolson,2022-03-17T02:09:23Z,"```suggestion
int setNumericType(standardConfig *config, long long val, const char **err) {
```"
828674839,10285,madolson,2022-03-17T02:13:37Z,"```suggestion
    standardConfig module_config = createBoolConfig(config_name, NULL, flags | MODULE_CONFIG, config_dummy_address, default_val, NULL, NULL);
```
|= I guess also works? Seems not right though."
828679380,10285,madolson,2022-03-17T02:16:55Z,"We call this an integer, but everything else is called numeric. Let's make it consistent."
828680931,10285,madolson,2022-03-17T02:18:00Z,"```suggestion
 * callbacks, as well as several flags that modify the behavior of the config. The
 * name must only contain alphanumeric characters or dashes. The supported flags are:
```"
828682444,10285,madolson,2022-03-17T02:19:10Z,"```suggestion
 * Default values are used on startup to set the value is not provided via the command 
 * line or conf file. Default values are also used explicitly to compare to on a config rewrite 
```"
828683538,10285,madolson,2022-03-17T02:19:51Z,We need an errno for invalid name I suppose?
828690956,10285,madolson,2022-03-17T02:25:13Z,"Made a related comment, but I think we should make sure this is can't happen so we can serverPanic here instead."
828693507,10285,madolson,2022-03-17T02:26:59Z,Might to severAssert() that config is not NULL.
828696535,10285,madolson,2022-03-17T02:29:11Z,"Let's test string as well, since we know there are some memory issues handling constraints."
828697337,10285,madolson,2022-03-17T02:29:45Z,"Maybe also add a test for configs that don't exist, and/or owned by different modules."
828698322,10285,madolson,2022-03-17T02:30:32Z,"Going to be slightly paranoid and say let's remove ""log4j"" so nobody asks why we have log4j in our repo."
828801206,10285,oranagra,2022-03-17T06:49:26Z,"what do you mean? it already aborts the process when the module didn't call the Load API, even if the user didn't actually provide any configs?
can you show me what i'm missing?"
829301590,10285,nichchun,2022-03-17T17:16:26Z,"Oh, sorry bout that, I misread the question, we should abort if configs are registered and no loadconfigs is called. I'll add this functionality."
832896015,10285,sundb,2022-03-23T06:36:55Z,"@nichchun There is CI fail in the fully CI of this PR: https://github.com/sundb/redis/runs/5655135034?check_suite_focus=true

```sentinel down-after-milliseconds setmaster 20000```
At this time, only using `argv[0]` cannot determine whether the configuration already exists.

```
Testing unit: 00-base.tcl
05:09:46> (start-init) Flush config and compare rewrite config file lines: FAILED: Expected 0 (context: type eval line 9 cmd {assert [string equal $line1 $line2]} proc ::foreach_instance_id)
(Jumping to next unit after error)
FAILED: caught an error in the test 
assertion:Expected 0 (context: type eval line 9 cmd {assert [string equal $line1 $line2]} proc ::foreach_instance_id)
    while executing
""foreach_sentinel_id id {
        assert_match ""OK"" [S $id SENTINEL FLUSHCONFIG]
        set file1 ../tests/includes/sentinel.conf
        set file2 [f...""
    (""uplevel"" body line 2)
    invoked from within
""uplevel 1 $code""
Testing unit: 01-conf-update.tcl
```

"
833101511,10285,oranagra,2022-03-23T10:32:36Z,"debug prints?
don't forget to remove..."
833194243,10285,oranagra,2022-03-23T12:21:55Z,"if the same config is provided twice, this break would mean we used the first one rather than the last one.
maybe considering the unpleasant nested loop, we rather store module_configs_queue in a dict?
this will eliminate both the nested loop and the issue with duplicate configs.

p.s. let's add a test for that."
833197224,10285,oranagra,2022-03-23T12:24:33Z,why bother resetting this variable? (initialized when the next iteration starts...
833199571,10285,oranagra,2022-03-23T12:26:22Z,"maybe we want to print a log message with something about the contents of the list? e.g. at least one entry.
p.s. considering we do that only for LOADEX, maybe it's a hint to indicate that this shouldn't be here..
i.e. for the case of server startup, we do that after done loading all modules, and for the case of LOADEX we do that in the LOADEX command?
this will also mean that this function doesn't need to take the `is_loadex` argument (which is a win IMHO)"
833216113,10285,oranagra,2022-03-23T12:41:45Z,"i see you renamed it, but it still uses string concatenation `##`
but also, i see it's no longer used, so i guess you just forgot to delete it?"
833217460,10285,oranagra,2022-03-23T12:43:10Z,"leaking `config_name`
(applies to other similar APIs as well)"
833221919,10285,oranagra,2022-03-23T12:48:00Z,"since RM_RegisterStringConfig holds the documentation for the rest of them, i think it's better to put it first (in case someone reads the docs top-to-bottom."
833236799,10285,oranagra,2022-03-23T13:03:43Z,"```suggestion
    if (loadModuleConfigs(module, ctx->is_loadex)) return REDISMODULE_ERR;
```
all of that won't actually be needed since i think loadModuleConfigs doesn't need to take that argument, and instead the validation that there are no configs unhandled should be in the LOADEX command itself.
actually it also means that we can remove `is_loadex` from the module context (triple win).

now if only we can find a way to also find a way to get rid of the excess `load_configs_called` member (present in all contexts, even ones not used for the module loading), that would be great."
833260764,10285,oranagra,2022-03-23T13:23:05Z,can't we use the `module_configs` list for that instead of this boolean?
833316060,10285,gkorland,2022-03-23T14:11:14Z,Better to return a RedisModuleString so there won't be an ownership issue 
833537356,10285,nichchun,2022-03-23T17:25:48Z,"Should absolutely have a log message, this is included only for loadex due to the situation where multiple modules with configs are loaded from a .conf file. The reason its currently located here is for a rather esoteric edge case where a string config is initialized, and theres a bad argument to loadex. If we do the length check after onLoad is completed, the module author never gets the chance to free the string."
833569512,10285,oranagra,2022-03-23T17:58:14Z,"you mean that we can return an error to RM_LoadConfigs in that case?
i'm not sure that's right.. arguably the module did everything right, and it's just that the user passed an invalid argument to LOADEX, so LOADEX could return an error, and possibly unload the module.
or if we can't / don't wan to unload the module, maybe it's ok to return an error that indicates the module was loaded but the configuration failed...
also, i suppose logging a message to the log file with the name of the invalid config is not enough.. maybe we better have that as part of the reply?"
834019556,10285,sundb,2022-03-24T08:04:17Z,"```suggestion
        sdsfree(config_name);
        return REDISMODULE_ERR;
```"
834040171,10285,sundb,2022-03-24T08:28:45Z,Should be `addModuleConfigApply`?
834515398,10285,nichchun,2022-03-24T16:42:24Z,I believe we no longer need to sdscatrepr here due to the conversion from list->dict. Not entirely sure I'm not missing anything here.
834634335,10285,oranagra,2022-03-24T19:02:02Z,"maybe we can check `server.sentinel_mode` instead of that string compare?
i.e. disable that feature in sentinel mode completely?"
834636362,10285,oranagra,2022-03-24T19:04:47Z,"i suppose you're right (no longer need sdscatrepr), since we also no longer join and split strings (glad to see that gone, it bothered me a lot).
but please be sure to include a test with a config set to a value that contains spaces, and even null chars."
834638357,10285,oranagra,2022-03-24T19:07:38Z,please add a top comment describing what the function does and what it's used for.
834639464,10285,oranagra,2022-03-24T19:09:13Z,"correct me if i'm wrong, this loop will never run more than one iteration, right?
i.e. we can tell by the first config if it was initialized or not.
so we traded a single boolean in a module context (many instances of these), to a boolean per config (many instances of these too).
not sure which one i like less..."
834639975,10285,oranagra,2022-03-24T19:09:58Z,"btw, the one thing that is almost consistent in redis, is that we avoid line comments (`//`).
(the other is that the opening curly brace is in the same line of the `if`, unless it's a multi-line condition)"
834648861,10285,oranagra,2022-03-24T19:20:24Z,"maybe the `performModuleConfigInitFromName` function should have the word ""Default"" or even ""DefaultValue"" in it?"
834680483,10285,nichchun,2022-03-24T20:04:51Z,WDYT about a single boolean in the module struct itself?
834682447,10285,oranagra,2022-03-24T20:07:45Z,"i'm shocked i didn't think of that option 8-).

i guess i was hung on thinking it should be put in a struct that's transient and not long-lived, but that's not a real concern.
if we need just one boolean per loaded modules, that's obviously it's place."
834918199,10285,sundb,2022-03-25T03:04:16Z,"Here 1 is failure, but in `moduleConfigApplyConfig`, 0 is failure, I think we should avoid this confusion.

```suggestion
        return REDISMODULE_ERR;
```"
835853623,10285,oranagra,2022-03-27T05:26:25Z,"p.s. why did we move this function? 
can we bring it back above `moduleUnload` to make for a smaller diff and less blame log damage?"
835856864,10285,oranagra,2022-03-27T06:10:21Z,"reviving this topic in a new thread, since the previous one is lost far above.
maybe we want a `RedisModuleString *err` so that modules can format the string and not have to rely on a static one."
835857448,10285,oranagra,2022-03-27T06:17:26Z,"we must nullify this otherwise we'll attempt to free an uninitialized pointer, or can't distinguished between old one that should be freed and NULL.
```suggestion
RedisModuleString *strval = NULL;
```"
835857625,10285,oranagra,2022-03-27T06:20:01Z,"i don't understand this comment, but it smells like it's covering a bug.
the code looks valid, i.e. if we get a value that we wanna reject, we return an error, and keep (avoid freeing) the old pointer.
so maybe the comment about the leak is outdated?

p.s. let's return some error string in `*err` to test that infra."
835857926,10285,oranagra,2022-03-27T06:23:54Z,"in theory, it would been much easier if the default value for strings would have been a plain `char*`, so modules would have been able to use a static string and avoid all the mess around heap allocations.
however, doing that would mean that default values can't contain NULL chars. maybe that's acceptable?"
835858577,10285,oranagra,2022-03-27T06:31:10Z,"maybe make that RedisModule_LoadConfigs call conditional (depending on an `argv` argument), this way we can add code to test the case that it's not called."
835858746,10285,oranagra,2022-03-27T06:32:32Z,"if we free `strval` before unload, don't we also need to nullify the pointer? otherwise we'll free it twice."
835859293,10285,oranagra,2022-03-27T06:38:41Z,"so this part tests loading modules and configs, from the config file, right?
mabe add a comment, since whoever misses it may think this is completely uncovered."
835859728,10285,oranagra,2022-03-27T06:42:44Z,"actually, this way we have no way to test what happens when loading a module with configuration error from config file.
let's add a test that loads a module from config file.
hints:
1. `testrdb.tcl` does it, you can copy some code from there.
2. the test infra doesn't support passing the same config to `start_server` twice, so don't try to test two modules from a config file.

please also add tests for rejected configs, and missing LoadConfig calls for this path."
835910935,10285,yoav-steinberg,2022-03-27T13:51:45Z,This seems good. Originally I suggested commenting out these lines instead of completely removing them. WDYT?
836005236,10285,sundb,2022-03-28T01:56:23Z,"```suggestion
 * `CONFIG SET`, `CONFIG GET`, and `CONFIG REWRITE` commands.
```"
836709259,10285,nichchun,2022-03-28T18:07:33Z,"I don't necessarily feel particularly strongly either way. It is also a larger question for the future I think, as there may be future use cases where configs only exist for a certain period of runtime. To me it feels somewhat more intuitive that they would be removed because they're part of the module, and modules that are unloaded get their load directives removed on a rewrite (if present), but again I don't feel all that strongly."
836901930,10285,madolson,2022-03-28T22:26:53Z,"The contract can be that on our side is that we don't mutate or retain a pointer to it, just copy the value out. The caller is then free to pass back a reference it retains so that it can be freed or modified later. The reason configs use char *err instead of sds is because the vast majority of cases don't need special allocation or handling. I think the proposed approach would just introduce a lot more creating of strings."
836902092,10285,madolson,2022-03-28T22:27:03Z,I think the current implementation makes more sense of passing in a String. I would somewhat prefer that we call decrRefcount though within RedisModule_RegisterStringConfig so that you don't have to worry about freeing it otherwise.
836905477,10285,madolson,2022-03-28T22:32:13Z,"```suggestion
 * `applyfn` callbacks that are provided to Redis in order to access or manipulate the
```"
836906743,10285,madolson,2022-03-28T22:34:36Z,"```suggestion
 * Default values are used on startup to set the value if it is not provided via the config file
 * or command line. Default values are also used to compare to on a config rewrite.
```"
836913082,10285,madolson,2022-03-28T22:45:47Z,"```suggestion
    standardConfig module_config = createSDSConfig(config_name, NULL, flags | MODULE_CONFIG, 0, config_dummy_address, default_val, NULL, NULL);
```

I still don't think we should be converting empty strings to NULL. It seems more straight forward to give the module the empty string and it can decide what to do with it."
836913502,10285,madolson,2022-03-28T22:46:40Z,"```suggestion
                serverLog(LL_NOTICE, ""CONFIG specified without name value pair"");
```"
836915222,10285,madolson,2022-03-28T22:50:30Z,"```suggestion
 * Create an integer config that server clients can interact with via the 
 * `CONFIG SET`, `CONFIG GET`, and `CONFIG REWRITE` commands. See 
```"
836917660,10285,madolson,2022-03-28T22:55:50Z,"```suggestion
 * Create an enum config that server clients can interact with via the 
 * `CONFIG SET`, `CONFIG GET`, and `CONFIG REWRITE` commands. 
 * Enum configs are a set of string tokens to corresponding integer values, where 
 * the string value is exposed to Redis clients but the value passed Redis and the
 * module is the integer value. These values are defined in enum_values, an array
 * of null-terminated c strings, and int_vals, an array of enum values who has an
 * index partner in enum_values.
```"
837074849,10285,oranagra,2022-03-29T05:43:40Z,"ok, you suggest that it'll remain a `char*`, and then the module can either use a static string, or some global pointer to a heap allocated one, which it releases next time / later.

@gkorland would that work for the non-C modules too?"
837075743,10285,yoav-steinberg,2022-03-29T05:45:35Z,"I guess even changing this in the future won't be a breaking change, and we do want to avoid a situation where the re-written config keeps growing because we're inserting comment lines. So I'm fine with leaving this as is."
837075759,10285,oranagra,2022-03-29T05:45:36Z,"i understand that for the majority of the cases that would be easier to use, but the interface seems odd to me.
@yossigo @MeirShpilraien WDYT?"
837078778,10285,oranagra,2022-03-29T05:52:31Z,"i gave it some thought and here are a few points i have:
[1] this is probably not a common issue (doing CONFIG REWRITE, then MODULE UNLOAD and CONFIG REWRITE again).

[2] removing a line with a config could mean that it leaves behind some comment documenting that line.
i think this is bad.
e.g.
```
# we disable this config because bla bla....
some_config no
```

so i think we should comment these lines, but it can be maybe done in a followup PR, not a mandatory task for this one."
837168329,10285,oranagra,2022-03-29T07:56:48Z,let's match against the actual error message (`Cannot set string to 'rejectisfreed'`)
837191882,10285,MeirShpilraien,2022-03-29T08:22:03Z,@oranagra I think that for configuration it makes sense to pass `const char*` and its acceptable that it can not contains NULL chars.
837218031,10285,yossigo,2022-03-29T08:45:45Z,"I actually like the original idea of passing a newly allocated RedisModuleString that Redis frees. It's simple, flexible and I don't see why it should be incompatible with non-C modules."
837235109,10285,yossigo,2022-03-29T09:02:33Z,"Agree with @MeirShpilraien, I don't see why a `const char *` wouldn't be enough.
But if we do have a good reason to use a RedisModuleString, I agree with @madolson we should transfer ownership so the caller doesn't need to free it."
837242748,10285,oranagra,2022-03-29T09:10:39Z,"i think both options are a bit odd, but i suppose it's unlikely that a module will want a default value for a config to contain null chars, and i suppose ones that do, can find an ugly way around it.
so maybe a plain `char*` would be most convenient."
837246746,10285,oranagra,2022-03-29T09:14:54Z,"allocating RedisModuleString is surely compatible with everything.
the question was if using a plain `char*` (without passing ownership) is acceptable.
at least for C modules, it's much more convenient since usually the errors are static string.
and as madolson suggested, modules can even use a global buffer, and format a message into it (as long as redis grantees to copy it right away)"
839304991,10285,sundb,2022-03-31T08:09:54Z,"I reproduced the fail test on alpine, when I comment out this line test is OK.
But I didn't find out the real reason why, no stack on alpine is too painful."
839306594,10285,sundb,2022-03-31T08:11:40Z,"This line should be wrong, it should be `RedisModule_FreeString`, but it's not the cause of the test failure."
839398149,10285,oranagra,2022-03-31T09:47:20Z,"it's interesting that valgrind doesn't report that leak (leaking the actual string).
i suppose the tcl test code doesn't set the string twice (replacing a previous one).

it's also odd that the alpine code crash on some corruption, but valgrind doesn't report anything."
839409440,10285,oranagra,2022-03-31T09:59:39Z,"actually i see we do have a test that does it.
so i don't know why valgrind doesn't report the leak.
```
        r config set moduleconfigs.string wafflewednesdays
        assert_equal [r config get moduleconfigs.string] ""moduleconfigs.string wafflewednesdays""
        r config set moduleconfigs.string \x73\x75\x70\x65\x72\x20\x00\x73\x65\x63\x72\x65\x74\x20\x70\x61\x73\x73\x77\x6f\x72\x64
        assert_equal [r config get moduleconfigs.string] ""moduleconfigs.string {super \0secret password}""
```"
839421725,10285,oranagra,2022-03-31T10:12:21Z,"Yoav helped me figure this out. 
It must be an embedded string, so being short the robj pointer holds the sds in the same allocattion. 
"
839423885,10285,oranagra,2022-03-31T10:14:28Z,"The only thing I can think of is that on alpine the dynamic library loader doesn't properly inits the global (maybe when the module is unloaded and reloaded). 
@sundb can you try to init that global to null from the `onload` function and see if it helps? "
839441323,10285,sundb,2022-03-31T10:29:45Z,"@oranagra  You guessed it right. strval needs to be reset to NULL after free.
Change code to following will be OK:

```
    if (strval) {
        RedisModule_FreeString(ctx, strval);
        strval = NULL;
    }
```"
839468641,10285,oranagra,2022-03-31T10:55:08Z,Please make a PR to fix both issues. 
840734025,10285,madolson,2022-04-01T16:12:24Z,"I did test and confirm this was the case, I specifically asked for the case to make sure we weren't mismanaging the allocation, forgetting about embedded strings."
1181196681,12109,oranagra,2023-04-30T09:21:09Z,"if this is an anonymous map (not a file), why use mmap and not just malloc?
is it in order to gradually grow that buffer?
what about gradually shrinking it (dismissing the parts we processed an no longer need)?
i think it's better to use a linked list of constant size buffers like we do in `replBacklog`"
1181198598,12109,oranagra,2023-04-30T09:35:55Z,"i wouldn't want to add a config for that thing. redis should just do the right thing by default (considering it doesn't have any drawbacks), and if a capabilities negotiation is needed.

we could work around that disk-based issue (by adding some delay like repl-diskless-delay to disk-based).

another possible issue could have been cloning the COB when a new replica joins an existing fork, maybe that can now be mitigated by the shared replication buffers and backlog up to a point (the backlog size).

anyway i don't think disk-based is a critical issue to solve since diskless is the default nowadays and it doesn't have any significant disadvantages."
1181209314,12109,oranagra,2023-04-30T10:55:46Z,"this config isn't documented, but i wonder if we need / want it anyway, and if not, what should be the default value.
considering any default other than unlimited would be wrong, setting it too low can cause nearly every user to be forced to adjust it, setting it too high, is similar to setting it to unlimited, it'll not do enough to protect the system, and if users don't experience issues, they might not tune it.

today, replication buffers are excluded from eviction and OOM (because eviction can cause a feedback loop when issuing DELs), that's not the case with this buffer, however, replicas can't do eviction or OOM.

on the other hand, `client-output-buffer-limit` (for replicas) is by default set to 256MB, after which the client is disconnected.
maybe we can inherit the value from that config, which could already be tuned, instead of forcing people to set this one on upgrades?"
1181217300,12109,naglera,2023-04-30T11:49:34Z,"There are several advantages to using mmap for allocating memory:
1. Anonymous mappings can reduce fragmentation
2. Unampping actually gives the memory back to the OS.
3. A single pointer is easier to use (compared to a linked list, we get a contiguous virtual memory), easier means less maintenance overhead.
4. MAP_HUGETLB can be used.

When mmap is used with exponential growth factor, less reallocations are required than when linear growth is used for linked lists.
For example, for linked list with 1024*16 as block size it will take around 6000 allocations to reach size of 1mb, comparing to ~30 using exponential grows factor.

Right now we free the buffer when we are done streaming it. We can consider shrinking it gradually, however the replica local streaming part is blocking so I am not sure freeing space is necessary. 

@xbasel
"
1181219973,12109,naglera,2023-04-30T12:07:31Z,"Once the feature will be stable, the feature flag can stay on. I prefer removing the feature flag at a later stage.

A delay before starting disk based sync will work. There is a downside of longer syncs, but it is a good workaround.

Regarding issue upon cloning the COB when a new replica joins an existing fork. Do you mean while using disk based sync? And at which step this new replica joins?


"
1181220886,12109,oranagra,2023-04-30T12:13:46Z,"i'm not sure these advantages are really right or justified.
1. that argument about reducing fragmentation can be said about anything else in redis. i.e. if each buffering subsystem will manage it's own memory directly to OS, and return it in the right order, rather than the allocator, it'll avoid fragmentation. on the other hand, the allocator let's you share things, so by not using the allocator, you're also NOT plugging fragmentation holes created by other subsystems. i don't think that's a reason to use mmap. besides, working with buffer chunks bigger than a page, isn't susceptible to fragmentation.
2. arguing that unmapping immediately gives the memory to the OS immediately, can be seen as a disadvantage, there's a reason why allocators don't immediately do it, it improves performance. if you think you can do better than jemalloc maybe starts a competing allcator :stuck_out_tongue: 
3. that's certainly true if you don't bother to dismiss its head :smile: 
4. i'd argue that this is a premature optimization. without showing any benchmarks or explicit reasoning, i'd go with the typical / simple approach.
5. not sure i understand the exponential growth thing. i suppose you can do the same with a greedy growth mechanism (allocating bigger blocks), and i suppose it can be counted as an advantage or a disadvantage.
6. the replica applies that buffer (calls processInputBuffer) in a blocking manner, but this loop consumes memory (processing commands that could be growing to the database), so releasing memory during that loop is desired.
7. the one advantage of a contiguous buffer that i can see, is that it would have been interesting to reduce the need of copying that data form that buffer to the query buffer, but i'm not sure it would be worth the complexity.

"
1181225187,12109,naglera,2023-04-30T12:42:39Z,"I agree with the above concerns, 
I don't like using `client-output-buffer-limit` because in most cases until the sync is done, this replica is worthless.
We may use `client-output-buffer-limit` in cases when the replica is currently serving clients."
1181227094,12109,oranagra,2023-04-30T12:55:47Z,"see copyReplicaOutputBuffer.
i.e. in a disk-based master, a replica that joins an existing fork inherits the COB from another one waiting for the same fork.
this should be impossible now, but we can keep the fork's repl offset in some server var, and check if it happens to still exist in the backlog.

anyway, diskless is the future, so i'm not certain we'd wanna invest here."
1181246181,12109,naglera,2023-04-30T15:05:37Z,"
I agree that not sharing memory and filling holes has its drawbacks. Also not releasing memory during the loop can be harmful. Identifying which method is the most effective will be challenging. 
I will move to linked list 👍 
"
1181596277,12109,siddharth-69,2023-05-01T14:08:00Z,"```suggestion
    if (nread == -1) {
        if (connGetState(conn) != CONN_STATE_CONNECTED) {
            serverLog(LL_VERBOSE, ""Reading from primary: %s"", connGetLastError(c->conn));
            abortRdbConnectionSync(1);
        }
        return;
    }
  
    if (nread == 0) {
        if (server.verbosity <= LL_VERBOSE) {
            sds info = catClientInfoString(sdsempty(), c);
            serverLog(LL_VERBOSE, ""Client closed connection %s"", info);
            sdsfree(info);
        }
        abortRdbConnectionSync(1);
        return;
    }
```
If we return inside an IF Block, there is no need to use Else if. We can simply use If statement."
1182379470,12109,naglera,2023-05-02T10:38:28Z,Thanks 👍 
1201502395,12109,madolson,2023-05-23T04:29:19Z,"```suggestion
    while ((cur = listFirst(server.pending_repl_data.blocks))) {
        /* Read and process repl data block */
        replDataBufBlock *o = listNodeValue(cur);
        c->querybuf = sdscatlen(c->querybuf, o->buf, o->used);
        c->read_reploff += o->used;
        processInputBuffer(c);
        offset += o->used;
        replStreamProgressCallback(offset, o->used);
        listDelNode(server.pending_repl_data.blocks, cur);
    } 
```
I'm not really sure we need this new API, I think this pattern is much more common and easier to follow"
1201503775,12109,madolson,2023-05-23T04:32:02Z,"```suggestion
client *replicationCreateMasterClient(connection *conn, int dbid) {
```"
1201504705,12109,madolson,2023-05-23T04:34:07Z,"```suggestion
            isReplicaRdbChannel(replica))
        {
            sendCurentOffsetToReplica(replica);            
```"
1201505777,12109,madolson,2023-05-23T04:36:41Z,Shouldn't this be like a sync write? It seems possible this might be a partial write. 
1201507226,12109,madolson,2023-05-23T04:39:16Z,"```suggestion
            /* REPLCONF connected is used by rdb-channel-sync replica, to announce that the replica is done loading the rdb */
```"
1201508492,12109,madolson,2023-05-23T04:41:56Z,"Do we need this step? My understanding is that the replica will start sending ""REPLCONF ACK"" once it is only, why do we need a new mechanism to indicate we are online?"
1201508604,12109,madolson,2023-05-23T04:42:13Z,Do we know why this is causing a merge conflict?
1201510528,12109,madolson,2023-05-23T04:45:01Z,"These are no longer accurate, need to bumpt hem up. "
1201512890,12109,madolson,2023-05-23T04:47:43Z,"I don't think we should artificially change the state to transfer to avoid the server assert in the function. Also, this functions documentation is ""Don't call this function directly"", so it seems like we should honor that."
1201809909,12109,naglera,2023-05-23T08:38:21Z,"thanks, fixed"
1201838656,12109,naglera,2023-05-23T08:51:59Z,"I agree regarding the artificial change, I will fix that.
In regards to calling replicationAbortSyncTransfer directly, the documentation also states ""...use cancelReplicationHandshake() instead."". By calling replicationAbortSyncTransfer from within cancelReplicationHandshake, I feel like I honor the request 😄
I will refactor it now that I understand there is no real difference between aborting normal sync and aborting RDB channel sync"
1201843118,12109,naglera,2023-05-23T08:54:31Z,"Yes, we can use replconf ack instead of replconf connect. I missed that."
1201867888,12109,naglera,2023-05-23T09:08:00Z,"This should be corrected, thanks"
1201902139,12109,naglera,2023-05-23T09:27:24Z,I somehow replaced all the tabs with spaces. fixing now
1243397394,12109,soloestoy,2023-06-27T09:06:56Z,"return without flag the client ""CLIENT_SLAVE"", then the normal client may be killed if users set timeout."
1243420699,12109,soloestoy,2023-06-27T09:25:11Z,"should use ""CLIENT_TYPE_SLAVE"" here "
1249355753,12109,naglera,2023-07-02T08:36:46Z,"This is the main connection of the replica, not a normal client. Replication data will be transmitted via this channel, we don't want to treat this replica as a normal client"
1249359774,12109,naglera,2023-07-02T08:45:02Z,"This buffer is on the replica side, so it's a bit misleading. During the full sync, the replica received online replication data through the main channel and buffered it. 
This is all replica flow, so the client type slave is out of context."
1261243474,12109,oranagra,2023-07-12T14:11:48Z,"we should probably use the same mechanism we have in the other reply lists.
i.e. a `buf[];` which takes responsibility of the real malloc_usable_size (internal fragmentation)"
1261246322,12109,oranagra,2023-07-12T14:13:47Z,"the list keeps track of the len, so what's `len` for?
is it the total size of used memory or data? comment is needed."
1261248795,12109,oranagra,2023-07-12T14:15:35Z,"this one doesn't need to be atomic, right?"
1261251618,12109,oranagra,2023-07-12T14:17:40Z,"too long. but also the term we use for now is ""master"", let's avoid causing further confusion and mix terms.
```suggestion
    int master_supports_rdb_channel; /* Track whether the master is able to sync using rdb channel */
```"
1261253557,12109,oranagra,2023-07-12T14:19:05Z,"if we have this here, why we need the replDataBuf struct declared above?
comment is needed to indicate what `len` tracks."
1261284864,12109,oranagra,2023-07-12T14:41:18Z,"i think we should have just one place that matches `slave_req` and changes `replstate`.
i.e. finds the replicas that are waiting and match our fork matches their requirements, then activates them (changes `replstate`)
all other places should just check the `replstate`, and avoid looking at `slave_req`.
we do that in rdbSaveToSlavesSockets, and we can do that in rdbSaveBackground too if needed.

p.s. there's an indentation issue."
1261308724,12109,oranagra,2023-07-12T14:55:10Z,"should this be done with connSyncWrite? or like rdbSaveRioWithEOFMark using rioWrite?
does it need to belong in replication.c or rdb.c?

if it's part of the replica 2nd channel negotiation, it should be in replication.c
if we consider it the rdb payload header, then it should be in rdb.c and use rioWrite."
1261314104,12109,oranagra,2023-07-12T14:58:21Z,"btw, don't we need to revive rioInitWithFdset, or a similar one writing to multiple conns (mix of rioInitWithFdset and rioInitWithConn)?
i.e. from what i can tell this PR still uses the pipe, am i missing anything?"
1261316747,12109,oranagra,2023-07-12T15:00:16Z,"p.s., we do still need to keep the pipe mechanism in case the replica doesn't support 2nd channel."
1261327047,12109,oranagra,2023-07-12T15:08:09Z,why are these in server.c and not replication.c?
1261331847,12109,oranagra,2023-07-12T15:11:46Z,p.s. i think #11125 is a prerequisite for this PR.
1261349119,12109,oranagra,2023-07-12T15:24:43Z,"how is that ""partial sync"" state?
```suggestion
        return ""bg_transfer"";
```
maybe `SLAVE_STATE_BACKGROUND_RDB_LOAD` should be `SLAVE_STATE_BG_TRANSFER`?
or maybe i'm misreading something..."
1261350586,12109,oranagra,2023-07-12T15:25:54Z,"should that have a `mem_` prefix? or do we want to put it in the ""replication"" section?"
1261378484,12109,oranagra,2023-07-12T15:47:11Z,"maybe we should sort out some terms.
i.d rather avoid using ""2nd channel"" since it's not clear which one is the first and which one is the second.
i think ""rdb channel"" is ok, but ""psync channel"" doesn't sound right to me (psync stands for partial sync).
it could be ""commands channel"", but maybe it should be ""main channel"" since in some cases this socket carries everything.

so how about ""rdb channel"" and ""main channel""?"
1261380098,12109,oranagra,2023-07-12T15:48:15Z,why did you wrap that in a function?
1261381806,12109,oranagra,2023-07-12T15:49:22Z,"btw, what exactly is it good for?"
1262349121,12109,oranagra,2023-07-13T10:18:34Z,let's increase the buffer size (`buf[NET_HOST_PORT_STR_LEN]` is too small)
1262383881,12109,oranagra,2023-07-13T10:50:02Z,"looking at the above comment, this code is very odd, we need to improve the comment.
i.e. in this case it's not a successful partial sync, it's a fake partial sync with the offset belonging to the ongoing rdb channel."
1262402657,12109,oranagra,2023-07-13T11:07:47Z,"the point was that if you return here, without setting CLIENT_SLAVE and adding the client to the `server.slaves` list, then it's a normal client (until it sends another PSYNC, after establishing the rdb channel).

i think this is ok.
we have a similar case when replica wannabe's are sending REPLCONF to set various flags, until they send a PSYNC that's not rejected, they are normal clients."
1262402907,12109,oranagra,2023-07-13T11:08:01Z,"```suggestion
        } else if (!strcasecmp(c->argv[j]->ptr,""ack"")) {
```"
1262418954,12109,oranagra,2023-07-13T11:23:16Z,"this comment can be confused with `REPLCONF rdb-only`.
let's avoid the ""RDB only"" part, and say it's a full-sync that uses second channel for the RDB snapshot."
1262427751,12109,oranagra,2023-07-13T11:32:06Z,"""end-offset"" is a bit vague. maybe `needs-repl-offset`?
also, the code below doesn't only imply the payload must include the ""end-offset"", it also implies that the connection is an RDBCHAN and should be handled by the fork child process, so maybe this option should be called `full-sync-rdb-2nd-chan` (we can come up with a shorter name, i'm just trying to convey the point that this command means more than just requesting an ""end-offset""."
1262436292,12109,oranagra,2023-07-13T11:40:48Z,"how about ""no-fullsync"" instead?
PSYNC is the command (capable of both partial and full), i think `no-fullsync` would be clearer."
1262436371,12109,oranagra,2023-07-13T11:40:53Z,"maybe i'm confused, but i don't think we should tie the rdb-channel, diskless or PSYNC2 capability with `psync-only` or `no-fullsync`.

the desire to try partial sync and abort if not possible (without triggering a fork), is a common request (same as one that just asks for the live command stream, without the snapshot).

the ability to handle PSYNC2 responses, or handle rdb-channel should be a completely separate flag.
let's split this one into `no-fullsync` and `full-sync-cmd-chan` (to match my above suggestion for `full-sync-rdb-2nd-chan`)"
1264612674,12109,oranagra,2023-07-16T05:55:54Z,"let's try to be more consistent in terminology.
let's use `REPL_2ND_CHAN` instead of `REPL_SEC_CONN`
and `CLIENT_2ND_CHAN_` instead of `CLIENT_RDB_CHANNEL_`
or maybe you have a better proposal?"
1264613234,12109,oranagra,2023-07-16T06:01:30Z,"i'm confused. `>=_SEND_PSYNC && <= RECEIVE_PSYNC_REPLY`
is very short state, just one command's round trip.
how does it apply to ""InTransferState""?
or maybe i'm missing something?"
1264613810,12109,oranagra,2023-07-16T06:07:17Z,"let's rename this function.
i'm paranoid about changing the role of a function and keeping it's prototype (return value doesn't count).
if some fork or an old branch / PR is using it elsewhere, it'll compile and take a long time before the bug is found.
how about `replicaCreateMasterClient`?"
1264614167,12109,oranagra,2023-07-16T06:09:52Z,"```suggestion
    return server.rdb_channel_enabled && server.primary_can_sync_using_rdb_channel;
```
was there a reason for the `== 1` part?
it's generally better to do `!=0` rather than `==1`"
1264614848,12109,oranagra,2023-07-16T06:13:47Z,"maybe this is more consistent and also clear?
```suggestion
#define SLAVE_STATE_HAS_ACTIVE_2ND_CHAN 11 /* Main connection of a replica which uses rdb-channel-sync. */
```"
1264615417,12109,oranagra,2023-07-16T06:15:14Z,"maybe this term is better?
```suggestion
    connection *repl_2nd_chan_s;    /* Master FULL SYNC connection (RDB download) */
```"
1264615604,12109,oranagra,2023-07-16T06:16:40Z,"is this term better? that's a sister variable for `master`, right? maybe move it above `cached_master`?
```suggestion
    client *master_2nd_chan; /* Client used for psync during rdb load */
```"
1264615756,12109,oranagra,2023-07-16T06:18:22Z,"```suggestion
        server.repl_transfer_fd = -1;
```"
1264618010,12109,oranagra,2023-07-16T06:31:37Z,"not sure this function is needed, but i suppose it can help improve readability a bit.
in which case, let's drop the `sync` part (it's not about the operation mode, it's about what this `conn` is used for)
WDYT?
```suggestion
int isSecondChannelConnection(connection *conn) {
```"
1264620621,12109,oranagra,2023-07-16T06:47:03Z,"let's avoid ""fsync"" as an alias for full-sync (i.e. it refers to fsync for files).
```suggestion
        /* In case of full-sync using rdb channel, the master client was already created for psync purposes
```"
1264621491,12109,oranagra,2023-07-16T06:54:16Z,"```suggestion
/* There are two scenarios in which this method can be called during rdb-channel-sync:
 * 1. Main connection successfully established psync with master.
 * 2. Rdb connection done loading rdb. 
 *
 * The 'conn' argument is either server.repl_transfer_s or server.repl_full_sync_s.
 * Each time this method is invoked, we check whether the other connection has completed
 * its part and act accordingly. */
```
don't forget to update the variable names if renamed."
1264621763,12109,oranagra,2023-07-16T06:56:22Z,"```suggestion
sync_success:
```"
1264634499,12109,oranagra,2023-07-16T07:59:22Z,"p.s. i feel the function name doesn't accurately describe what it does or when it's called or what purpose it fills (the comment does).
maybe repConnectionDone? or something that indicates it's the final state of one of the connections...
do you have a better idea?"
1264637559,12109,oranagra,2023-07-16T08:19:38Z,"actually, now that i see other bits of code (how updateReplicationStateActive is called from readSyncBulkPayload), i wonder if this should really be a client, or just a connection?
the `master` client is only created (retroactively) when an outbound connection (used to send commands and get responses) becomes an inbound one (used to receive commands).
so should this second channel connection have a client struct assigned to it?
can you explain it to me?"
1264648090,12109,oranagra,2023-07-16T09:27:25Z,"where do we do these in case this `if` is skipped?
looks like this will be missing after a full-sync in case the race condition ends up skipping them here.
we should probably put this in a function to be called from .... ?
i'm actually not sure. please help me understand that flow."
1264650099,12109,oranagra,2023-07-16T09:41:10Z,"maybe moving this into the above if-else (the one that checks `isRdbConnectionSync`) would be nicer..
p.s. maybe we don't have to keep the condition on `usemark`? (we don't have it in `updateReplicationStateActive`)
i mean: it's not necessary in disk-based, but doesn't do any harm either."
1264651366,12109,oranagra,2023-07-16T09:50:55Z,"function name is too generic.
```suggestion
void freePendingReplDataBuf(void) {
```"
1264652426,12109,oranagra,2023-07-16T09:59:21Z,"another place that requires consistent terminology.
`RdbConnection` -> `2ndChannel`?"
1264652976,12109,oranagra,2023-07-16T10:02:58Z,"i'm not very happy with this approach of switching between them on random errors (or maybe i'm missing something?)
i think that instead of this global variable being set to 1 on any master host update and 0 on any (many?) failures, we need some smarter negotiation mechanism.
e.g. connect, send a REPLCONF command, and depending on the response decide how to proceed."
1264656858,12109,oranagra,2023-07-16T10:29:12Z,"it feels a little bit odd to use printf to generate scanf format.
if it's just to avoid hard-coding `40` (CONFIG_RUN_ID_SIZE) into the string, we can use a constant string and a static_assert to make sure the the constant is right.
but on the other hand, this constant is part of the protocol, it is never going to change."
1264700691,12109,oranagra,2023-07-16T15:16:25Z,"here's another reason to drop the config now, rather than keep it temporarily and drop it later.
if we don't intend to keep it, we don't want to refer to it in comments, and also IIRC there are some pieces of code that can be simplified (drop a wrapper function). it'll be harder to locate and clean these things later.

i'd argue that if we need to keep it only for testing the previous behavior, we can do one of two things:
1. check out an older branch (that's actually safer too, if we wanna be sure none of our changes caused any side effect).
2. comment out some line in replconfCommand to cause the connecting side to think the server doesn't support the new protocol and fall back to the previous one."
1264708203,12109,oranagra,2023-07-16T16:07:37Z,"i think we'll need to split these into separate commands (with pipeline), so we can use the response to know what the other server supports."
1264709921,12109,oranagra,2023-07-16T16:19:17Z,"actually, as i think i stated earlier, assuming i understand the current implementation, i think the code / state machine needs to change.
i think maybe we can merge these two state machines together in a different way.

if i understand the current code, we do a PSYNC (attempting a partial sync), then if it results in full-sync we abort it, and start over with a 2 channel sync even if the server doesn't support 2 channel sync.
is that right?

instead i think we should start by some capability discovery, then depending on the capabilities, try a partial sync and fall back into a 2 channel full-sync, or (if the remote is not capable) proceed with the old full sync (without aborting the psync) as we used to do."
1264710577,12109,oranagra,2023-07-16T16:24:58Z,"i'm confused, if the state is RECEIVE_PSYNC_REPLY, how come we're sending and not receiving anything?."
1264711230,12109,oranagra,2023-07-16T16:31:01Z,"that's actually not parsing the ENDOFF reply (there's no such command).
it parses the second-channel SYNC response (`$ENDOFF:<end-offset> <primary-repl-id> <current-db-id>`).
let's make it clear..

maybe extracting the code of processEndOffsetResponse into this block will make it clearer.
i.e. that function can't be re-used anywhere else anyway, and it'll make this state machine code more self contained, using other functions only in order to perform actions (i.e. reInitReplicaMainConnection and prepareRdbConnectionForRdbLoad, but not for the purpose of the replication protocol state machine, it's printf and scanf)"
1264712888,12109,oranagra,2023-07-16T16:44:48Z,"once again, current terminology is ""master"". ""primary"" is just causing confusion at this point IMHO"
1264716738,12109,oranagra,2023-07-16T17:12:55Z,"should this be a DEBUG level or NOTICE level print?
i don't see that we dropped the connection, and i also don't see that we paused the read handler.
does that mean we'll keep hitting this callback again and again until the buffer accumulates on the master's side and it drops the connection?
we should certainly improve here, and also make sure there's a test for it (if there isn't already one)"
1264717041,12109,oranagra,2023-07-16T17:15:37Z,"i don't know how yet, but i think we should find a way to avoid that copying from the buffered list to the query buffer."
1264717240,12109,oranagra,2023-07-16T17:17:16Z,"since the buffer is local, i think processing events every x bytes may be too frequent.
maybe we need to add some time based threshold based on hz."
1264724321,12109,oranagra,2023-07-16T18:16:29Z,just noting that we need to make sure that we have tests that reliably hit the two branches of this race condition.
1264725844,12109,oranagra,2023-07-16T18:27:54Z,"i see we're using it to store the replication offset to be used in slaveTryPartialResynchronization.
i guess we can add a dedicated variable for that."
1264726444,12109,oranagra,2023-07-16T18:32:03Z,"```suggestion
            } else if (strcmp(new, server.cached_master->replid)) {
```"
1264726807,12109,oranagra,2023-07-16T18:35:12Z,the empty multi-bulk thing is odd. why not use some error code `-FULLSYNCNEEDED`? 
1264727011,12109,oranagra,2023-07-16T18:37:12Z,"not sure why we must change this line, if we do, maybe just unify it with the previous one?
or leave it as it was...."
1264921448,12109,oranagra,2023-07-17T06:25:55Z,"not sure if i already commented on that or not.
i realize that there's nothing holding the end-offset in ram in the time gap between the creation of the fork and the PSYNC request that follows. i.e. if the backlog is very small, and there's high traffic rate, it could already be rotated and lost.
i think that instead we should somehow link the two connections (one of them will associate itself with the other one, maybe by ID), and we'll start accumulating slave buffers without waiting for that PSYNC.
let's discuss that or any other alternatives to cover that issue."
1266882333,12109,naglera,2023-07-18T14:42:33Z,"I agree, ""rdb channel"" and ""main channel"" are better names. I thought I removed all references to 2nd channel, will do another scan"
1266885162,12109,naglera,2023-07-18T14:44:25Z,"We do need to revive rioInitWithFdset, This PR does not yet include direct communication between child process to replica. I want to split that to another PR as this one is already heavy."
1266901484,12109,naglera,2023-07-18T14:55:56Z,"We agreed on calling it rdb-channel, I will rename the states accordingly "
1266905766,12109,naglera,2023-07-18T14:59:04Z,I think it is a mistake. It should be an handshake state
1267652209,12109,oranagra,2023-07-19T07:23:48Z,"i think i'd rather see the full picture (and benchmarks) before committing to this.
this PR is indeed big, but i don't think adding that makes a huge difference."
1267668969,12109,sundb,2023-07-19T07:40:02Z,"```suggestion
int sendCurrentOffsetToReplica(client* replica);
```"
1440535369,12109,naglera,2024-01-03T14:45:20Z,"total size of used memory, I'll add comment"
1440620901,12109,naglera,2024-01-03T16:02:16Z,We use it to track replica streaming progress. We can actually get raid of it and instead decrement `pending_repl_data.len` in real time. 
1441452384,12109,oranagra,2024-01-04T08:12:02Z,"i think it makes more sense (to decrement).
it's odd to have a list of buffers and a var representing it's size, and have it outdated.
p.s. if we do need them both, then one should probably say ""peak"" and / or the other ""remaining"".
and it should probably not be a `stat_` variable and don't need atomic access."
1441584462,12109,naglera,2024-01-04T10:30:23Z,"Ack, it would be helpful to know the replica's buffer peak since `pending_repl_data.len` is changing rapidly. 
I'll fix it."
1441591937,12109,naglera,2024-01-04T10:38:21Z,This is a mistake. Removing.
1441770531,12109,naglera,2024-01-04T13:51:04Z,"On second thought, I don't think we should support rdb-channel sync when the master uses disk. I may be wrong, but disk-based sync at the master side main advantage is that the background process is not dependent on the replica's responsiveness. This is useful for cases where replicas are slow and we want to avoid bgsave process COW (in exchange to larger COB). When used in such cases, rdb-channel sync will:
1. Use child process to write snapshot to disk.
2. **Use child process again** to write snapshot from disk to replicas sockets. 

RDB-channel will therefore degrade the performance of master disk base syncs. It is only used for that sync type, so I would like to remove this method entirely."
1441847125,12109,oranagra,2024-01-04T14:47:35Z,"there could be two other reasons to use disk-based master:
1. if you want to know the size of the rdb payload before you start reading it (accurate progress)
2. if you have an old slave (Or something else that acts as a slave), and don't support the new EOF format (don't declare the replconf capa for it).

anyway, i agree, we don't have to support disk-based master and rdb-channel.

i don't currently remember the context of my comment and too lazy to care. it might still be applicable, or might not."
1444590736,12109,naglera,2024-01-08T12:59:29Z,"My preference is to keep RDB clean from rdb-channel stuff, so I'll move it to replication.c. "
1444934092,12109,naglera,2024-01-08T16:14:41Z,yes replication section would be a better choice
1445014293,12109,naglera,2024-01-08T17:01:41Z,"Im not sure, I'll unwrap it"
1452128555,12109,naglera,2024-01-15T09:36:09Z,"In my opinion, there are two options for addressing this issue. We can either link the two connections or use a weaker approach, which will only link them to a specific offset. 
Using the first approach, master will generate a random magic string when bgsave begins and give it to the replica along with the `ENDOFFSET` response. It will keep a pointer to that end offset until the replica's main connection requests psync (using that magic string). 
The second approach involves master holding a struct containing offset and count. As soon as bgsave starts, master will insert the end offset into the struct and increment the count. This offset counter will be decremented when some replica requests psync with that offset.

The second approach might fail if some random replica asks for the exact offset, so I think the first approach is a bit more complex but generally better.

Edit: the first approach can also work with the ip-address and listening-port reported be the replica."
1452350693,12109,naglera,2024-01-15T13:01:53Z,"changing ""end-offset"" to ""rdb-conn"""
1453254495,12109,naglera,2024-01-16T10:49:07Z,changing to `repl_rdb_transfer_s`
1453271020,12109,naglera,2024-01-16T11:03:15Z,"`master_2nd_chan` or `master_rdb_chan` may sound like this variable is used by the rdb channel, when it actually the main connection. I suggest `repl_provisional_master` / `repl_tmp_master` / `repl_in_progress_master`"
1453434654,12109,naglera,2024-01-16T13:33:33Z,"I agree it isn't about operational mode, renaming to `isRdbConnection`"
1453477406,12109,naglera,2024-01-16T14:07:37Z,"function does need to be renamed, I think `completeTaskRDBChannelSync` may be a good fit. "
1457200069,12109,naglera,2024-01-18T09:57:21Z,"I see, so until steady state is achieved, I will use a dedicated structure for the psync_master. "
1457287391,12109,oranagra,2024-01-18T11:08:52Z,"i'm not sure i have the right context in my head right now, but if i get it correctly, with the second approach these are more issues with misbehaving clients. i feel i rather link them by communicating the client id, but maybe ip and port pair can work too.
please try to solve it (starting to collect slave buffers right away instead of relying on the backlog), and when the time comes i'll review the solution you chose and comment if necessary."
1457296859,12109,oranagra,2024-01-18T11:16:11Z,"btw, maybe we can create the two `client` structs together, one of them without a `conn` and reserve it for later (somewhat similar to what we do with cached_master).
not sure which one is cleaner."
1457811475,12109,naglera,2024-01-18T18:04:36Z,"Ack, so I will continue with the first approach - peering replica's connection according to address & port tuples.

In the context of establishing two clients simultaneously, my understanding is that there might be a scenario where the master node ends up with three clients associated with a single replica. This arises because, during the initiation of the RDB connection by a replica, the master can only confirm that it is the same instance once the replica transmits its address. Consequently, upon accepting the new connection, the master may generate an additional, unused client before being able to identify and manage the connection correctly."
1461680481,12109,naglera,2024-01-22T10:46:22Z,"I agree, we can send Ack whenever it isn't rdb-connection sync. I will move it to the upper if."
1461681167,12109,naglera,2024-01-22T10:46:55Z,"I did some refactoring, I think that after that the flow now will be clearer. 
After refactor, in the race condition case (RDB is loaded before psync established), main connection will call 

-> `slaveTryPartialResynchronization`
-> `completeTaskRDBChannelSync` 
-> `replicationResurrectProvisionalMaster` 
  there it will initialize `server.master` with the relevant fields.
  * note that some of the method has been renamed "
1461783699,12109,naglera,2024-01-22T12:22:13Z,"In general, I agree with the concept of local variables, but in the context of the syncWithMaster read handler, I am not sure if it is a viable option. At the handshake phase, the replica will send ""REPLCONF no-fullsync"", receive +OK or -ERR, and update local variable, `master_supports_rdb_channel`, accordingly. When the replica needs to choose a sync method (after REPL_STATE_RECEIVE_PSYNC_REPLY) `master_supports_rdb_channel` will already be out of scope.

Aside from the locality of the variable, I agree with the comment. I'll make sure we don't choose sync approach at random. "
1461877658,12109,naglera,2024-01-22T13:40:37Z,"Though we probably won't change CONFIG_RUN_ID_SIZE, asserting that it is 40 seems more confusing than snprintf. My preference is to keep this line general, and to add documentation."
1461921860,12109,naglera,2024-01-22T14:13:43Z,"If the two options above are considered better rollback options, I will remove the configuration. "
1461963701,12109,naglera,2024-01-22T14:43:01Z,"> if i understand the current code, we do a PSYNC (attempting a partial sync), then if it results in full-sync we abort it, and start over with a 2 channel sync even if the server doesn't support 2 channel sync.

Correct, however we have already verified remote capability in some way. When we try to psync the first time, we call `REPLCONF no-fullsync`, so at this point we already know that master supports rdb-channel. This command can't fail because of old master version. 

Perhaps we should remove the verification from REPL_RDB_CONN_RECEIVE_REPLCONF_REPLY (15 lines below). I believe that, although this scenario is impossible, it keeps the implementation complete. "
1462219414,12109,naglera,2024-01-22T17:58:59Z,"It is confusing. This is overuse of the last normal replication state before we move to rdb-channel sync. I think we can add another state in between REPL_STATE_RECEIVE_PSYNC_REPLY to REPL_SEC_CONN_RECEIVE_REPLCONF_REPLY in order to make it clearer. 
"
1464709379,12109,naglera,2024-01-24T10:38:40Z,"I agree. Upon reaching the limit, we will set the read handler to null. 
*also this log should be at the NOTICE level.


"
1464717029,12109,naglera,2024-01-24T10:44:35Z,"Setting buffer limits poses another problem. Due to the fact that the replica is unaware of the total size of the snapshot, it may read too much repl-data and never be able to load the snapshot. In order to determine the buffer limits, it would be useful to share the expected snapshot size with the replica."
1464931917,12109,naglera,2024-01-24T13:42:30Z,"Ack, I'll add time based threshold"
1466443497,12109,oranagra,2024-01-25T14:18:15Z,"we don't know the expected snapshot size.
i think a notice level print, and a suspension of the read handler should be enough.
then the buffer will accumulate on the master's side, and eventually lead to disconnection due to slave buffer limit?
p.s. we'll have to have a test that covers these paths."
1469196508,12109,naglera,2024-01-29T07:57:01Z,"As a snapshot size assessment, we can look at the master's `used_memory_dataset`"
1469244894,12109,oranagra,2024-01-29T08:42:23Z,"this is very inaccurate. it can easily be 2 time higher or lower (or even 10 times in pathological cases).
i'm not sure i understand what exactly you wanna do with that info. maybe that'll still be valid in some way.
"
1469267737,12109,naglera,2024-01-29T09:02:07Z," Ideally, I would like to prevent a case in which the replica side buffer accumulates too much data, and the replica is unable to load the RDB. When that happens, I would like the master's COB to take a part or to fail the sync operation. I don't want the sync to continue if it has no chance of succeeding."
1469464143,12109,oranagra,2024-01-29T11:37:15Z,"if the sync won't continue, all we can do is drop the connection and retry (hoping the conditions change, e.g. more memory will be available later).

you can't afford false negatives (unnecessary dropping of the connection if it could succeed), and if there are also false positives (not detecting correctly that it's hopeless), then i wonder if we should bother to implement anything based on the estimated rdb file size.
let's keep it simple, read as much as we can, let the rest be accumulated in the master, until it disconnects us."
1477302771,12109,oranagra,2024-02-04T12:23:25Z,"you can also use a STRINGIFY macro and let the compiler concatenate adjacent strings..
but again, this constant is part of the protocol, it will never change, it can't change.

it's like remaining flexible in case TCP will some day no longer be IP protocol number 6. "
1477309967,12109,oranagra,2024-02-04T13:08:31Z,let's move it up to be part of the group flags.
1477311001,12109,oranagra,2024-02-04T13:15:33Z,HIDDEN configs (meant to be used by the testing framework) shouldn't be documented.
1477311510,12109,oranagra,2024-02-04T13:18:31Z,"not that it really matters, but i think `seconds` is an odd unit for sleep.
would be ok if we take that argument as a floating-point and convert it, but maybe it'll better to take milliseconds"
1477318976,12109,oranagra,2024-02-04T14:03:48Z,"this looks a bit odd.
the function isn't just a wrapper for rdbSave, it performs child process setup (like proc title and closing of pipes).
i'd really rather these be kept in the same function that in the same function that created the fork and the pipe.

let's try to search for another solution.
why did you extract these to here?
"
1477319262,12109,oranagra,2024-02-04T14:05:29Z,"since you crated a function for setupBidirectionalCommunication, maybe we should have DestroyBidirectionalCommunication(pant / child).
either two functions, or one that takes an argument.

you can still wrap the RIO related part in a function, but the proc-title and cpu-affinity should be moved back to the one that called fork, and the pipe thing to some method about the bidirectional communication."
1477324596,12109,oranagra,2024-02-04T14:16:06Z,"we have far too many confusing functions in replication.c already, and with this split of rdbSaveToSlavesSockets, we also have some in rdb.c, we must sort it out.
we need to make sure it's clear, which one runs in the master, and which one runs in replicas.
we need to make it clear which ones run in the fork child, and which ones run in the parent process.
This can be done with some common prefix, and / or with a clear comment above the function (when it is called and what it does)"
1477330636,12109,oranagra,2024-02-04T14:19:37Z,"""pipeline"" -> ""pipe?

```suggestion
/* Spawn a fork child to save an RDB and stream it to replica / sockets using a pipe between the child process and the parent process. Using this 
 * method the owner of the replicas connection is the parent process. */
int rdbSaveToSlavesSocketsWithPipe(int req, rdbSaveInfo *rsi) {
```"
1477331226,12109,oranagra,2024-02-04T14:23:17Z,"the function name is a bit too generic. since the code isn't a generic ""bidirectional communication"", i.e. it writes to server.rdb_pipe_*, let's name it better"
1477332598,12109,oranagra,2024-02-04T14:31:59Z,"an alternative approach to all the comments above, is to revert all these changes, and just unify these two methods (WithPipe and Direct) into one, and pass some argument to choose between the two behaviors.
it may be more readable to read all that logic once, and know which parts are conditional, rather than read it twice and wonder what are the different parts.

also, it reduces the risk of a bug fix applied to one and not to the other."
1477333521,12109,oranagra,2024-02-04T14:38:30Z,"now that i'm done reading the modifications to rdb.c, i support my last comment.
it could be one method, which either takes the decision from outside as a boolean, or creates a boolean on the stack with the decided mode of operation, and then all the code in one log function without duplication.

if there are certain aspects that are complicated (like creating bidirectional communication) that can be extracted to a well isolated and properly named functions. that can be done, but then the ""interface"" of this set of functions should be clear (create / destroy, parent / child, etc).
and still, i'd argue that the whole flow of fork-till-exit in these two flows should be in one function."
1477340306,12109,oranagra,2024-02-04T15:05:34Z,let's be sure to document all the interface changes in the top comment.
1477340410,12109,oranagra,2024-02-04T15:06:26Z,same goes for the new info fields (replicas_repl_buffer_*)
1477340682,12109,oranagra,2024-02-04T15:08:13Z,"why use a separate printf?
let's unify these 3 calls to sdscatprintf"
1477344173,12109,oranagra,2024-02-04T15:29:41Z,static string? why do we need a separate buffer and a sprintf?
1477346175,12109,oranagra,2024-02-04T15:42:09Z,"i think i commented on this in the past.
i think `no-fullsync` is a good feature to have, and should be completely separate from rdb-channel or main-channel.
if the main-channel needs to enable no-fullsync, it can do that in addition to marking itself as main-channel.
or if (since) no-full-sync is mandatory for main-channel, then we can implicitly enable it.

i.e. i think we can have 3 REPLCONF arguments:
* no-fullsync - in some cases, replicas, or tools that look like replicas, may wanna try to re-connect but if a partial-sync isn't possible, they don't want a full one automatically as fallback
* rdb-chan (or rdb-chan-rdb-conn) - identify the connection as such
* main-chan (rdb-chan-cmd-conn) - identify the connection as such

the last one can implicitly or explicitly set no-fullsync as well, but the implementation behind these flags should be separate IMHO.

p.s. had you only created the two `chan` arguments (`main-chan` and `rdb-cnan`), and give each the functionality and behavior it needs, i wouldn't have commented asking for `no-fullsync`.
this discussion is a result of you naming them `end-offset` and `psync-only` which are misleading IMHO."
1477373349,12109,oranagra,2024-02-04T17:00:09Z,"from the interface name, i don't understand what's the difference between this and isReplicaRdbChannel.
is it that this one is on the replica side and the other one on the master side?
maybe rename to `isReplicaRdbConn`?
i wish we had a way of making it clear (the ""used by replica"") wasn't immediately clear to me, since it's all about t replica (connection), i didn't immediately understand it means that it runs on the replica side..

i wish we could have split that code to differnt files, or give functions different prefix, but i don't have any idea of a good prefix.
lets start by adding s clear line in the comment.
like 
```
/* Replication: Replica side.
 * Returns true if the...
 */
```
or
```
/* Replication: Master side.
 * Checks if the replica is...
 */
```"
1477383162,12109,oranagra,2024-02-04T17:14:51Z,"in the context of the above. this one was clear (better than the 3 functions before it)
but let's standardize it to a separate line and use it everywhere, or at least in new code."
1477413230,12109,oranagra,2024-02-04T17:51:19Z,"what does that line do? :confused: 
take a pointer to a stack variable, and write it to a local variable that we no longer use?
p.s. maybe document the arguments in the function doc comment."
1477413773,12109,oranagra,2024-02-04T17:55:30Z,maybe refer the reader to feedReplicationBuffer to learn the details there
1477416525,12109,oranagra,2024-02-04T18:16:40Z,"commenting on this discussion after briefly reviewing the last push.
i'm not sure i understand the flow after your recent changes, and i'd rather read about in some doc comment instead of understanding it from the doc.
IIRC the previous revision used to disconnect and re-connect in order to try different approaches (old and new), and i remember commenting about it that instead we should have some capability exchange at early stage (sending some command and seeing if it responds with an error), so that we can get it connected in one go (also in old master new replica or vice versa).
if this was implemented, can you please describe this fallback mechanism in some big comment in the code (and maybe also in the top comment of the PR).
come to think of it, even the non-fallback mechanism should be documented somewhere in the code (like it is documented in the top comment of the PR), so please make sure both (new mechanism, and it's fallback) are described, and then it'll be easier to review the code (or the procedure)."
1477417552,12109,oranagra,2024-02-04T18:25:02Z,"re-opening this discussion (maybe for a different purpose, or maybe that was your aim all a long..
first i'll state again that the user should never worry about (or be able to) control which mechanism we use for replication.
and if you need some config in order to benchmark things you better just use the old version, or put some ifdef in the code.
however, we do want to write tests that check fallback, surely for a new replica to connect to an old master (required), but maybe also for an old replica to connect to a new master (because we have some 3rd party components acting as fake replicas).
it's best that we write Tcl tests to cover that, and for that we need be able to cause either party to react as if it doesn't understand the new protocol. it's best to do that in a single point (not spread these checks all over), so we should do that at protocol negotiation
for that we can create a config to control it, but then, it should be a HIDDEN config, and it should not be documented in the conf file (just add a single short line in config.c to define it's purpose)"
1477731120,12109,naglera,2024-02-05T06:45:44Z,"Ack, I'll replace it with the actual value next revision"
1477828023,12109,naglera,2024-02-05T08:39:20Z,"OK, good point. I thought we will only need old master to new replica. I will make the config hidden and add some tests. 
Essentially, if we aim to verify the configuration solely in one location (during the handshake), then in all other instances, we must check `master_supports_rdb_channel` instead to determine which functionality should be applied.



"
1478614926,12109,naglera,2024-02-05T17:26:30Z,"The fallback mechanism is implemented in this revision. 
It happens when the replica receives `REPLCONF PSYNC-ONLY` response (will change it to replconf main-channel).

I will make it clearer by verifying the default value of the master response (`+OK`) in this way you can't miss it :)."
1479851949,12109,naglera,2024-02-06T13:58:45Z,Both comments are irrelevant as we are merging rdbSaveToSlavesSocketsWithPipeline with rdbSaveToSlavesSocketsDirect to one method (Correct me if I'm wrong). 
1479865845,12109,naglera,2024-02-06T14:05:14Z,"> let's be sure to document all the interface changes in the top comment.

Do you mean one general comment which explains the flow and states of rdb-channel session (like Replication buffer blocks)? Or specifically this new state?"
1479894998,12109,naglera,2024-02-06T14:18:47Z,We don't need it. Will remove the buffer
1479986708,12109,naglera,2024-02-06T15:03:24Z,"Initially, I thought the issue was enabling PSYNC2 in case the replica asked for an end offset. Although I agree that we almost have `no-fullsync` or `psync-only` for free, I think that implementing such behavior will require more than simply adding REPLCONF options. With proper design and testing, I will be happy to add this feature later on. In the meantime, I'll  rename `no-fullsync` to `main-channel`. "
1480012694,12109,naglera,2024-02-06T15:17:06Z,I agree that master and replica used methods are mixed in the file which makes it unclear to the reader in many ways. I have a task in my backlog for that.
1480052025,12109,naglera,2024-02-06T15:38:19Z,"Oh I missed that, my bad"
1481018118,12109,oranagra,2024-02-07T07:47:09Z,"yes, if you apply my other suggestion, then this becomes irrelevant "
1481025047,12109,oranagra,2024-02-07T07:53:53Z,"still, please invest some time in editing the top comment to describe both the design and mechanics of the new mechanism, as well as the fallback.
it'll be easier to make sense of the code after reading the description."
1481029199,12109,oranagra,2024-02-07T07:57:57Z,"i mean a bullet list of all the interface changes (configs, commands, command arguments and command replies).
in this case:
* the `state` sub-field in the `slave%d` info field (`INFO REPLICATION`), has a new `bg_transfer` state. (in addition to `wait_bgsave`, `send_bulk`, `online`)"
1483115938,12109,oranagra,2024-02-08T14:59:19Z,we're not using `bool` and `true`/`false` in redis.
1483123345,12109,oranagra,2024-02-08T15:02:48Z,now we should rename that var too
1483129691,12109,oranagra,2024-02-08T15:06:55Z,"if there's one thing that redis source code is consistent about is that for some reason it avoids using line comments.
in nearly anything else, it's inconsistent."
1499199049,12109,oranagra,2024-02-22T12:54:09Z,"the chart in the top comment now handles it, right? so we can dismiss this thread?
however, the image you posted there is a bit hard to read (due to scaling), and when i click on it to get the larger version, i get error 404.

on the other hand, we don't want the code base (and future generations) to rely looking at that image in the PR, we need to convert that diagram to ASCII art and also include it in the code (unless you already did)."
1499363043,12109,oranagra,2024-02-22T14:45:25Z,maybe we better omit this field (or give it a 3rd state) when the full-sync is over and this is just an normal slave?
1499375087,12109,oranagra,2024-02-22T14:52:42Z,shouldn't this be part of freeClient instead of being here?
1499449544,12109,oranagra,2024-02-22T15:39:22Z,"the word ""pending"" is a bit odd to me, maybe we can find a nicer solution.
are the rdb-connection slaves being kept in some collection other than `server.clients`?
maybe we can find a solution where this dict points to the rdb connection clients, and they're the ones holding that repl-buffer reference temporarily?

i wanna use this opportunity though to discuss the `peering`, `peer` and `unpeer` terms that i see you're using with this collection.
personally i find that confusing, specifically when the name of the list is `pending`, and not `peered`?
maybe `peer` and `unpeer` should be just `add` and `remove`, and maybe `pending` should be something else? (or we need to say what are they're pending for).
So maybe it'll be easier to follow if we keep a dict of rdb clients (it'll be easy to understand what we keep there and when we add / remove one)?

p.s. could it be that the main connection is created after the rdb connection is already done and disconnected? i suppose we can't afford that anyway, since then what's our trigger to clean garbage from this pending_slaves dict if the main connection is never established?

other notes:
* by `replDataBlock` you mean `replBufBlock`, right?
* if we keep it in the current form, i think we should state more clearly that in what state / duration they're listed here (i.e. that they're removed when the main connection is created)"
1499466671,12109,oranagra,2024-02-22T15:50:03Z,"```suggestion
 * Turn the provisional master into the current master.
```"
1499520717,12109,naglera,2024-02-22T16:21:59Z,"I fixed the diagram. Regarding top comment for high level overview, I wanted to put this explanation somewhere in the code (not sure yet where does it belong). I think it is easier to understand the new interface as part of the sync flow, tell me if you think bullet list will be clearer. 
```
/* 
 * RDB-Channel sync high level interface design:
 * RDB-Channel sync begins when the replica sends a REPLCONF MAINCONN to the master during initial 
 * handshake. This allows the replica to verify whether the master supports rdb-channel sync and, if 
 * so, state that this is the replica's main connection, which is not used for snapshot transfer. 
 * When replica lacks sufficient data for PSYNC, the master will send -FULLSYNCNEEDED response instead 
 * of RDB data. As a next step, the replica creates a new connection (rdb-channel) and configures it against 
 * the master with the appropriate capabilities and requirements. The replica then requests a sync 
 * using the RDB connection. Prior to forking, the master sends the replica the snapshot's end repl-offset, 
 * and attaches the replica to the replication backlog to keep repl data until the replica requests 
 * psync. The replica uses the main connection to request a PSYNC starting at the snapshot end offset. 
 * The master main threads sends incremental changes via the main connection, while the bgsave process 
 * sends the RDB directly to the replica via the rdb-connection. As for the replica, the incremental 
 * changes are stored on a local buffer, while the RDB is loaded into memory. Once the replica 
 * completes loading the rdb, it drops the rdb-connection and streams the accumulated incremental 
 * changes into memory. Repl steady state continues normally.
 */

```
Its a good idea to add the diagram as well but it isn't enough to cover all interface changes. 

"
1501765201,12109,oranagra,2024-02-25T07:52:52Z,"yes (i did some minor edit to the above).
i think it could be placed in the PR top comment (which is maybe also missing some other details from the issue, and a quick summary of measurements for the benefits it mentions).

and we should put that somewhere in replication.c (maybe as part of the comment above slaveTryPartialResynchronization?).

it could be nice if we can also fit an ASCII art diagram (of the one you placed at the top comment), but maybe we can live without it, if we just mention the skipped steps (i.e. in the enum in server.h, we can maybe comment on the places that jump from a state and skips the ones that are immediately after it, where they skip to and in what case)."
1501782244,12109,oranagra,2024-02-25T09:37:32Z,"```suggestion
 * if there's an existing buffer block at the fork time, the replica is attached
 * to the tail, if there is no tail, the replica will be attached when a new
 * buffer block is created (see the Retrospect function below).
  * Replica listening IP and port is used as a unique key
```"
1501783130,12109,oranagra,2024-02-25T09:42:04Z,"logically, we need to skip slaves that already have a node.
maybe this state doesn't occur, but i think we better handle it."
1501792013,12109,oranagra,2024-02-25T10:36:09Z,"i don't think i'm happy with the fact we're pairing them based on the IP+Port.
what happens if two replicas connect to the same master simultaneously but not at the exact same time?
i.e. they'll have the same ip and port, but different offset, and they deserve different repl buff nodes.
maybe the PSYNC request should carry the client ID of the other connection? (then we can easily find the buffer pointer by looking up the client)
or maybe we should have the dict key be IP+Port+repf_offset?

note that we need to handle both the case of same IP+Port with different offset, and the case of IP+Port with the same offset. so if we don't tie them to client ID, we need some refcount to avoid removing one from this dict too early.

p.s. we need to make sure we have tests covering all these cases."
1501857995,12109,naglera,2024-02-25T16:52:21Z,"Right, currently we keep it as replica main connection for the rest of the time. I agree it might be confusing. will fix that"
1501860888,12109,naglera,2024-02-25T17:09:59Z,"Yes, I will fix that"
1501865938,12109,naglera,2024-02-25T17:42:54Z,"- Currently the dictionary values are the replica's rdb-client. Regarding if the rdb load is done before replica established psync connection, we can keep the rdb client up until the psync conn establishes successfully or until some timeout is reached. However it is a rare case so it sounds a bit like an over kill to me. I think we should allow sync to fail in such cases, as the RDB is probably very small anyway. 

- Lets use Add and Remove instead of Peer and Unpeer, and instead of pending_replicas we can use `slave_waiting_psync`. 

> by replDataBlock you mean replBufBlock, right?

Yep, will fix that

> if we keep it in the current form, i think we should state more clearly that in what state / duration they're listed here (i.e. that they're removed when the main connection is created)

Right I will clarify that

"
1501867825,12109,naglera,2024-02-25T17:54:39Z,"Right, it can't happen as we forbid two parallel forks, but it makes more sense to check that. "
1501872539,12109,naglera,2024-02-25T18:25:41Z,"I agree that IP:Port isn't a good dictionary key. IMO adding offset wont help as well because if two replicas are syncing with the same offset, then we will have issues if one of the rdb connections got closed while the other hasn't asked for psync yet (if this client is used as the value of the dictionary then refcount wont help).
Overall breaking client id is harder, but I still have to figure how will the replica main conn send the rdb-client id. I think we will have to add an extra call to replconf, and a new replication state. "
1502371169,12109,oranagra,2024-02-26T10:28:24Z,"> Currently the dictionary values are the replica's rdb-client.

ohh, right (`dictAdd(server.pending_slaves, slave_name, slave);`), so it means this statement is wrong: `Dict[Slave IP] = replDataBlock`

> Regarding if the rdb load is done before replica established psync connection, we can keep the rdb client up until the psync conn establishes successfully or until some timeout is reached. However it is a rare case so it sounds a bit like an over kill to me. I think we should allow sync to fail in such cases, as the RDB is probably very small anyway.

what's rare? the case when the rdb part will complete before the second connection is established? i don't think it's rare.
and what do you mean by allowing it to fail? if it'll be failing psync and resorting to a full one it could be an ok solution, but just failing full sync is wrong IMHO.
in any case, i rather solve all race conditions. either we change the design in a way that there's no race (we wait with the final part of the fork), or we make sure that both cases are handled correctly (and add a test)."
1502566800,12109,naglera,2024-02-26T12:52:12Z,"Right I will fix that comment. 

And I agree, in this case we should let full sync finish successfully, decrement refcount, and then if psync offset is outdated, the replica should resync. I have already wrote some tests that cover those scenarios  (Take a look at `Test rdb-channel psync established after rdb load`). Now that we have the full picture I will cover the above cases as well. "
1502767317,12109,naglera,2024-02-26T15:08:27Z,"I have added a short summary with the main benefits, as well as a replica machine state diagram. Located above syncWithMaster."
1502815517,12109,naglera,2024-02-26T15:33:36Z,"Before resolving this comment, does [Fix comments and add high level design top comment and diagram](https://github.com/redis/redis/pull/12109/commits/79eae09b1f76fd4567b870e424b9c450392a90f3) enough? Or should I go into more details like you mentioned? "
1521201799,12109,oranagra,2024-03-12T10:16:06Z,please improve indentation and word wrapping.
1521210772,12109,oranagra,2024-03-12T10:22:44Z,"first, how come an **int** hash function uses `nocase`? that's probably a bug.

secondly, why do we need siphash in order to hash an integer? why not just return the integer as the hash index? (and then apply a mask on it)
in which case this can be handled in server.c, no need to modify dict.c to support it."
1521216729,12109,oranagra,2024-03-12T10:27:05Z,maybe change that dict into a rax and follow the footsteps of lookupClientByID?
1521266285,12109,oranagra,2024-03-12T11:02:25Z,"i'm not certain we actually need it.
the range of `long long` is high enough so that we can assume we'll never wrap around and get to negative numbers.
i'd rather drop these, but if we keep them they should probably use `unsigned long long` and not `uint64_t`"
1521270517,12109,oranagra,2024-03-12T11:05:48Z,"AFAIK the key to the dict can be the integer itself, no need for heap allocation for it."
1521275652,12109,oranagra,2024-03-12T11:09:59Z,"i think the term ""identify"" it too broad.
how about `REPLCONF set-rdb-conn-id <id>`?
also, please update the diagrams (ascii and image) with this step.

p.s. maybe we use `REPLCONF main-conn <id>` (instead sending two commands, one of them carrying a boolean)?
i.e. we'll need to postpone the `main-conn` till we know the id?
not sure if this could work, haven't looked into the details."
1521391869,12109,naglera,2024-03-12T12:38:36Z,"Yep, `nocase` is a bug. 
If we don't need siphash, then why masking? "
1521402143,12109,naglera,2024-03-12T12:45:23Z,"Mostly, this dictionary will hold very few clients. My preference is to keep it as simple as possible.
Aside from efficiency, what are the advantages of using radix tree here? "
1521419675,12109,naglera,2024-03-12T12:57:42Z,"Right, long long is enough. I will remove that "
1521437022,12109,naglera,2024-03-12T13:09:13Z,"True, I just think it a bit odd to fool the dictionary that cid is a pointer while it is actually the key itself. It might cause confusion, as well as threaten memory access. "
1521449407,12109,oranagra,2024-03-12T13:17:08Z,i mean that the hash function can just return the integer as is.. and the dict will apply the mask to know which bucket it falls in... no need for siphash
1521450564,12109,oranagra,2024-03-12T13:17:55Z,"IDK.. just that we're repeating an existing pattern, so it looks simpler."
1521454896,12109,naglera,2024-03-12T13:20:40Z,"I agree, I'll rename the subcommand and will update the diagrams today. 
`REPLCONF main-conn` should be called before the first PSYNC request (before the replica even knows it has to get the entire snapshot). Otherwise after PSYNC fails, the master will start to send the RDB using the main connection immediately.  
"
1521466284,12109,oranagra,2024-03-12T13:27:23Z,"actually, looking at an older version of redis, we had this:
```c
/* Thomas Wang's 32 bit Mix Function */
unsigned int dictIntHashFunction(unsigned int key)
{
    key += ~(key << 15);
    key ^=  (key >> 10);
    key +=  (key << 3);
    key ^=  (key >> 6);
    key += ~(key << 11);
    key ^=  (key >> 16);
    return key;
}
```"
1521471750,12109,oranagra,2024-03-12T13:30:54Z,"i don't see the problem. the dictType can have keyCompare, keyDup, and keyDestructor set to NULL.
and the keys are always plain integers (casted to void*).
the hashFunction can either just return the integer, or use the more sophisticated dictIntHashFunction mentioned above (not sure about it's benefits)"
1521604325,12109,naglera,2024-03-12T14:47:26Z,"Ack, sounds good. So dict key will be plain integers and if we don't have a reason to use mask then the hash will be the identity function."
1521760890,12109,naglera,2024-03-12T16:16:14Z,"Discussed in this thread https://github.com/redis/redis/pull/12109#discussion_r1521270517
We will use identity function for hashing integers "
1521772261,12109,naglera,2024-03-12T16:23:01Z,"I was not aware of this use case, very nice. In general, I believe that rax is a good option, but I'm not sure if it's worth changing the existing implementation because it's pretty simple as it is. "
1522704556,12109,oranagra,2024-03-13T08:01:14Z,"it's not simple if you have to create infrastructure (hash function and other generics) in order to support it, or it does something no one else does.
and if there is another place that already doing something similar and you can add another similar instance without duplicating their infra.

the bottom line here is that if we don't have any specific reason to prefer one over the other, we should take the one that adds fewer lines of code, or is easier to understand (repeating a pattern used elsewhere helps here)."
1522712858,12109,sundb,2024-03-13T08:07:35Z,"```suggestion
void removeFromServerClientList(client *c) {
```"
1523010387,12109,oranagra,2024-03-13T11:01:22Z,"let's mention the units, and i think 5 seconds is too short.
maybe 60s makes more sense?"
1523011789,12109,oranagra,2024-03-13T11:02:16Z,"why ""first""? it's the time it was freed, and repeated free attempts should just be ignored (already scheduled for freeing)
i'd suggest `rdb_client_free_time`, or maybe `rdb_client_disconnect_time`"
1523378778,12109,oranagra,2024-03-13T14:36:34Z,"i think this patter would be nicer
```c
        if (c->flags & CLIENT_PROTECTED && (c->flags & CLIENT_REPL_RDB_CHANNEL)) {
...
        }
        if (c->flags & CLIENT_PROTECTED) continue;
```
this way that whole block is just about RDB CHANNEL

to be honest, i'm not sure we should re-use the PROTECTED flag, maybe we should rely on a new flag, or maybe the RDB_CHANNEL one is sufficient.
it's true that this flag does almost exactly what we need, but on the other hand, other users of this flag set it together with removing read and write handlers, and we're not, so it could cause some confusion or issues some day.

i don't mind keeping what you did, just saying i feel a little bit uncomfortable "
1523380785,12109,oranagra,2024-03-13T14:37:38Z,here it looks clear that `first_free_time` should be renamed to include the words RDB_CLIENT
1523382054,12109,oranagra,2024-03-13T14:38:20Z,why do we need to clear the flag here?
1523490966,12109,sundb,2024-03-13T15:32:22Z,"wrong order?
```suggestion
        callHandler(conn, NULL);    /* trigger close/free if necessary */
        connDecrRefs(conn);
```"
1523507308,12109,sundb,2024-03-13T15:42:13Z,what about 32bit?
1523509739,12109,sundb,2024-03-13T15:43:44Z,"```suggestion
    REPL_RDB_CONN_STATE_NONE = 0,            /* No active replication */
    REPL_RDB_CONN_SEND_CAPA,                 /* Send replica cob-channel capabilities */
```"
1523545789,12109,sundb,2024-03-13T16:06:13Z,"https://github.com/redis/redis/pull/12109#discussion_r1523507308
this is also one reason why rax would be a better choice."
1523562368,12109,naglera,2024-03-13T16:17:52Z,"We can increase it to 60, but then I would like it to be configurable so I won't have to wait a full minute just to test it."
1523567503,12109,naglera,2024-03-13T16:20:56Z,"Currently the client stays in `clients_to_close` list, and the server tries to close it every time. But I will have to fix it anyway so `rdb_client_disconnect_time` is better fit"
1523612467,12109,naglera,2024-03-13T16:51:22Z,"While I was writing it, I thought COB overruns would be handled here during the grace period. I now believe that we won't be able to reach this point under such circumstances. 
For now, I will remove it, and then determine the COB overrun case once I have covered it with tcl tests."
1523614051,12109,naglera,2024-03-13T16:52:32Z,The RDB flag is sufficient however we use it for logs and other stuff so turning off the flag will cause confusion. I agree that using `CLIENT_PROTECTED` may cause wired bugs in the future. I will use dedicated flag.
1523621777,12109,naglera,2024-03-13T16:57:57Z,"Thanks, I will rename all occurrences "
1523634024,12109,naglera,2024-03-13T17:07:21Z,"Firstly, we must decrease connection refs. If conn->refs does not equal zero when we get into callHandler, then the connection will not be freed.
```
    if (conn->flags & CONN_FLAG_CLOSE_SCHEDULED) {
        if (!connHasRefs(conn)) connClose(conn);
        return 0;
    }
```"
1523646599,12109,naglera,2024-03-13T17:17:09Z,It will raise a bug on 32bit machine! As @oranagra suggested we should use rax instead of the dictionary as it is already implemented in this context. Thanks! 
1523668535,12109,naglera,2024-03-13T17:34:35Z,ACK. Will use rax instead ok dictionary
1524103505,12109,sundb,2024-03-14T01:47:13Z,you're right.
1524261320,12109,oranagra,2024-03-14T05:31:33Z,"We also don't wanna wait 5 seconds to test it, so setting it longer is good..
We can add a debug command to tune it for testing"
1525036213,12109,sundb,2024-03-14T15:00:54Z,"`raxFind()` had changed, perhaps you could merge unstable."
1527448821,12109,oranagra,2024-03-17T08:59:02Z,"i personally think these two lines are simple enough to just be cloned rather than create a method for that.
same goes for removeClientFromRaxGeneric, and lookupClientByIDGeneric"
1527451789,12109,oranagra,2024-03-17T09:16:24Z,"i.e. these two mechanisms, each needs primitive functions for adding, removing, and lookup (so that the caller is simple), but i don't think they have to share code."
1528873331,12109,naglera,2024-03-18T16:23:11Z,Done
1529007631,12109,oranagra,2024-03-18T17:50:45Z,"not sure how this is related.
i meant the top comment of the PR (which will later become the commit comment when squash-merging).

i.e. that comment should describe the motivation, benefits, design, interface changes, any regressions or additional unrelated changes, etc. so that someone can read that comment and know all the important bits without reading the code"
683689833,9323,madolson,2021-08-05T18:23:18Z,Can we leave this in cluster.h and import it where we need it?
684999246,9323,oranagra,2021-08-09T08:22:03Z,"i think it may be a cleaner approach to turn on both `server.loading` and `server.async_loading` in our scenario.
this way, all the existing code that checks the `loading` flag will not need a change, and we'll only need to add a few exceptions like `server.loading && !server.async_loading`.

"
685044438,9323,oranagra,2021-08-09T09:32:07Z,"unlike before, now we're not copying the other db members (e.g. blocking_keys, watched_keys).
we should at least set them all to NULL (calloc or memset)."
685124417,9323,oranagra,2021-08-09T11:48:36Z,"we may have a few issues with modules (the more complicated ones, which have out of keyspace global data).

first, till now the modules were aware of a concept of backup and restore, and who knows what they actually do with it, and now instead they may need to be aware of a concept of temp db.

secondly, they may rely on the fact that during that loading time no commands are received.

thirdly, some may even themselves call RM_Call commands on the data during loading.

@MeirShpilraien please share your thoughts.

p.s. i think it may be ok to avoid using this mode when modules are involved, or maybe decide to make a breaking change in the module API around that area, i think not many modules started using it, and not many people use this SWAPDB feature."
685410493,9323,oranagra,2021-08-09T18:05:03Z,"I think this method belongs in db.c, maybe we want a thin wrapper for it here, or maybe we wanna give up all the thin wrappers (their main purpose was their doc comments i think)
```suggestion
/* Logically, this discards (flush) the old main database, and apply the newly loaded
 * database (temp) as the main (active) database, the actual freeing of old database
  * (which will now be placed in the temp one) is done later. */
void swapMainDbWithTempDb(tempDb* tempDb) {
```"
685422022,9323,oranagra,2021-08-09T18:22:44Z,"you mean the call to emptyDb? i think that's exactly what you intended.
i.e. you're at this point rdb.c won't touch the main active db, will only load data into the temp one, and only when you swap them eventually you're logically flushing the old one.
for WATCHed keys, etc, we'll handle everything then, and for modules, there's no good way to tell what can happen, we'll discuss that in the different comment.

or am i missing your point in that TODO?

"
685426895,9323,oranagra,2021-08-09T18:30:23Z,"i mentioned in one of my first comments that internally, `server.loading` should be also set when async_loading is active, i'm not sure yet if we wanna apply that on the INFO loading flag too.
i.e. if we do, then existing code that looks at that flag will notice redis is loading (even though commands don't fail with `-LOADING`)."
685436033,9323,oranagra,2021-08-09T18:45:03Z,i'm not sure this rename is beneficial.
685446527,9323,oranagra,2021-08-09T19:01:19Z,"this function is not as generic as it seems (by it's name), the implementation and behavior are quite specific for placing the newly loaded temp db at the main active one, and the old active one in the temp.
logically, that's where we change the main one....
so i think we need a better name for it, and we certainly need a beefier doc comment."
685463726,9323,eduardobr,2021-08-09T19:29:53Z,"The TODO was more questioning what is mentioned in the original comment:
/* OLD COMMENT: We call to emptyDb even in case of REPL_DISKLESS_LOAD_SWAPDB
        * (Where disklessLoadMakeBackup left server.db empty) because we
        * want to execute all the auxiliary logic of emptyDb (Namely,
        * fire module events) */
        
Mainly about modules, so touching this again after discussion on how to handle them."
685472943,9323,eduardobr,2021-08-09T19:45:38Z,"That's what I was afraid. Could be that some tool (for example a load balancer) is checking for the ""loading"" from INFO instead of sending another kind of command.
But at the same time, it's not a breaking change to show INFO loading: 1 without responding commands with `-LOADING`. Won't change behavior for those that simply upgrade redis, it's just that it will require tweaking to take advantage of this implementation IF they rely on INFO. So wouldn’t this option be on the table?

I'd be glad to change it to not have the INFO async_loading as well, but we have plenty of INFO loading_* properties during loading that can be useful, even to monitor the state of the server during this period of degraded performance or in case something goes wrong.
This information without any loading or async_loading to tell that these status properties are present there sounds inconsistent.

Personally I’d like to see either one or both in INFO during async_loading, but my familiarity on its usage out there is limited and in practice, for our individual use cases it’s not relevant because we use PING for probes. Just thinking more on the general public of course."
685474219,9323,eduardobr,2021-08-09T19:47:45Z,Reverting this part
685478530,9323,eduardobr,2021-08-09T19:54:41Z,"Thanks, will do"
685484844,9323,eduardobr,2021-08-09T20:05:09Z,"Thanks for the review and feedback @oranagra 
Sounds good with applying the behavior only when replica was previously in sync with a master. Could the check rely on master_link_status == up?
And what about the cases where we're running standalone and replica started from an unavailable master but managed to load it's own RDB from disk (so it's a master temporarily), then master comes up shortly and starts full sync?"
685941509,9323,oranagra,2021-08-10T11:46:16Z,"@eduardobr i gave it a lot of thought, here's what i think.

Here's a list of scenarios:
1. a replica gets disconnected a gets a full-sync when it reconnects
2. a replica was connected to one master and got redirected to a new master (of the same replication chain) and got a full sync for some reason.
3. redis was restarted from rdb file (after a graceful shutdown), and has replicaof config, attempted a partial sync with the replid it got from the rdb file, but gets a full sync.
4. the replica was a master till now and got some data from that era, then gets a REPLICAOF command and does a full-sync
5. the replica started empty and is attempting it's it's first sync ever.
6. the replica was replicating from a certain master, and is now full-syncing from another master that's completely unrelated to the previous one (i.e. imagine a sharded db with two shards, and two replicas, m1, m2, r1, r2, and now r2 that has the data of m2 is made a replica of r1, so it gonna get the data from m1. we don't want it to serve the data it has from the past).

i think the first 3 scenarios want so allow clients to read the data, but on the last 3 we don't!
i think that the rule here is that if the current dataset in the db represent a valid point in time of of the master're were full-syncing from, then we wanna allow reads, but if it doesn't represent a certain point in time of that master (possibly represents data of another master, or replication chain), then we don't want to serve reads.

I think the only way to tell that is if in `slaveTryPartialResynchronization` we get a full-sync with the same replid that we asked for (different offset since the offset we asked for doesn't exist in the backlog anymore).

the disadvantage is that there's one case that it'll miss: if the master at the head of the replication chain changed, and we switched the replid, then we reconnect and instead of getting successful partial-sync, we happen to get a full one. in this case we have no way to tell that in fact the old replid is actually an valid point in time of the new one.

this explanation is a bit long and messy, i hope i managed to convey the idea."
686703222,9323,eduardobr,2021-08-11T10:28:44Z,"Trying understand better (sorry the lack of C skills)
`blocking_keys, watched_keys, ready_keys` are all dictionaries the same way as dict and expires, but only `dict` and `expires` are swapped in the end.
Does it make sense to init `dict` and `expires` with NULL and then `blocking_keys, watched_keys, ready_keys` with `dictCreate`?"
686714639,9323,oranagra,2021-08-11T10:46:51Z,"you can either just replace the `tempDb->dbarray = zmalloc()` with `calloc` (zeros the memory it allocates).
or, inside your loop over `server.dbnum`, you can `memset(&tempDb->dbarray[i], 0, sizeof(redisDb));`.

in theory, we should have created an array that only holds the `dict` and `expires` members, but since we pass that `redisDb*` to functions that work with that type, we can't.
so i'm just trying to make sure we have NULL pointers there, and not random (uninitialized) ones."
686786804,9323,MeirShpilraien,2021-08-11T12:34:42Z,"@oranagra I am not aware of a module that performance RM_Call during load. But modules definitely assume there will be no traffic during load. with this PR we will have to change this assumption. I believe, in order not to break existing modules, we will need to disable this new feature if a module does not state that it supports it (just like with short-read error during rdb load). WDYT?"
686799116,9323,eduardobr,2021-08-11T12:50:43Z,This is now swapMainDbWithTempDb
686799366,9323,eduardobr,2021-08-11T12:51:01Z,"Added your method comment, renamed to swapMainDbWithTempDb, moved to db.c (merging with dbSwapAllDatabases), removed thin wrapper from replication.c."
686826035,9323,eduardobr,2021-08-11T13:22:49Z,"Thinking about the case that is hard to deal with:

> ""if the master at the head of the replication chain changed, and we switched the replid, then we reconnect and instead of getting successful partial-sync, we happen to get a full one.""

I assume this is case 6.
When could that happen (that a replica will follow a master of another shard)? Is that only if some REPLICAOF command was raised?

Could we track if any REPLICAOF was executed since last successful replication? Then if there was any, we simply don't serve reads during replication. Sounds like a simple bit value that we set 1 when REPLICAOF is executed and reset to 0 when successful replication finishes."
687475169,9323,oranagra,2021-08-12T07:53:09Z,"the case i was describing last, which is not part of 1..6 is this:

* imagine a replication chain A <- B <- C (i.e. A is the master at the head of the chain)
* now normally, if B is promoted to be the new master, and A becomes a replica of B or C, what will happen is that B generates a new replid, and disconnects C. C then re-connects and succeeds a partial sync and acquires the new replid
* but if instead C takes too long to reconnect and the PSYNC fails and results in a full-sync, then it'll see that the replid it got is different than the one it asked for, and in our case (if we choose to take my suggestion in this comment), will avoid doing a swapdb based replication (or at least avoid serving traffic during the loading).

Lets call this case 7. it is different than 6 since in 6 we were talking of two different masters, not holding different points in time of the same data.

I think this compromise is ok, and i don't think case 7 is very likely, so i still think we can continue with the suggestion i gave in my comment.

@soloestoy @madolson @guybe7 @yossigo feel free to suggest a better idea.
the context is, how to decide in which cases to use swapdb based diskless repl and still serve clients during loading, and in which cases to avoid that (read my suggestion [here](https://github.com/redis/redis/pull/9323#discussion_r685941509))"
687498993,9323,eduardobr,2021-08-12T08:27:38Z,"Applying this logic, when you have a setup with cluster disabled containing 1 master and some replicas and the master restarts, then we still won't serve reads during full sync because master will come up with a new replication id, but if it's not cluster and we know that no REPLICAOF was issued, isn't always the case it's safe to continue serving reads?"
687633866,9323,oranagra,2021-08-12T11:42:39Z,"@eduardobr you're right, but that's actually another bug. when the master restarts the replica shouldn't do full-sync: #8015
I think that counting REPLICAOF commands, or keeping track of whether or not the REPLICAOF command was with the same ip+port pair or different ones, is the wrong thing to do.
also note that it would also mean that when you switch to replicate from one source replica to another (in a replica chain), this will fail (we'll think we got connected to a new master), whereas my replid design will succeed.
in fact we have that replid mechanism for exactly that reason (to know which master/timeline we're part of).

We can even solve the case that i said is problematic (case 7), if we improve the protocol. i.e. some future PSYNC can use multiple replid+offset pairs when asking for sync, or and the PSYNC reply can carry multiple pairs back, and even carry part of the backlog. but we should lave that out of the scope now, since it requires protocol changes."
687673837,9323,eduardobr,2021-08-12T12:41:31Z,"Thanks for clarifying @oranagra 

> also note that it would also mean that when you switch to replicate from one source replica to another (in a replica chain), this will fail (we'll think we got connected to a new master), whereas my replid design will succeed

That suggestion about checking for an issued REPLICAOF would be only when replid is different in the handshake (and only for cluster disabled if that helps). But I see the point to make a proper fix in the protocol.
Also, the PR mentioned relies on master loaded from RDB (I guess masters using RDB as primary persistence are not common anymore because that has high data loss potential and AOF is just available to be used, or I’m wrong?)

In summary, I’ll be glad to move on, but the original issue I thought to be solving wouldn’t be solved, even though there are still other improvements.

Drifting a bit, the scenario I’m trying to cover is to make redis more reliable when used as a primary database and not only as cache. I’m using a standalone setup to achieve virtually no data loss (having fsync=always in master for example). But it’s impossible to restart master in this scenario without putting down all replicas afaik (unless there’s some manual job to disconnect them and reconnect one by one). But in Kubernetes everything could happen.
"
687998750,9323,oranagra,2021-08-12T18:46:43Z,"@eduardobr you're referring to graceful restart, right? (Not a crash recovery) 
See the comment I posted in https://github.com/redis/redis/pull/8015#issuecomment-897876142 I think maybe that can solve both of your problems, and also get you faster startup time. 

I don't like the idea of matching REPLICAOF commands and looking at their args. 
I do like to solve this problem for graceful restarts, even when AOF is configured. 
P. S. There is some [discussion](https://github.com/redis/redis/discussions/9282) about annotating AOF, but I still think it's not much good for graceful restarts, only crash recovery. "
691922936,9323,oranagra,2021-08-19T08:59:10Z,"I had a lengthy discussion about this with @yossigo.
we think the current plan is good.
i.e.
* If there's a PSYNC, there's no problem.
* If there's a FULL sync with the same replid, and the user uses repl-diskless-load=swapdb, we'll keep serving reads.
* If there's both a FULL sync and a replid change (either because of replication topology change or a master restart), we won't serve reads during sync.
* however, since we're gonna implement #8015, we don't expect FULL syncs after a graceful master restart.

we can proceed to implement this mechanism then."
691928309,9323,oranagra,2021-08-19T09:06:30Z,"This change is gonna break modules that use the `RedisModuleEvent_ReplBackup` mechanism anyway, so i suggest the following:

1. We deprecate `RedisModuleEvent_ReplBackup`. i.e. starting redis 7.0, we never fire that event. we do that since in the new ""swapdb"" mechanism there's no concept of backup and restore, instead there's a concept of temporary db.
2. We create a new API named `RedisModuleEvent_ReplAsync`, holding 3 sub-events; STARTED, COMPLETEED, ABORTED.
3. We add another module flag for `RedisModule_SetModuleOptions` with which the module can declare it supports this mechanism, i.e. REDISMODULE_OPTIONS_HANDLE_REPL_ASYNC.
4. in replication.c, If there are modules loaded which registered a data type, and didn't declare they're supporting this, we fall back to the alternative (either the `on-empty-db` diskless replication, or disk-based replication)."
694827528,9323,eduardobr,2021-08-24T13:01:26Z,@oranagra I believe the last commit settles this strategy then. Added an extra test as well.
695163347,9323,oranagra,2021-08-24T20:03:31Z,"```suggestion
        if (server.repl_diskless_load == REPL_DISKLESS_LOAD_SWAPDB) {
            /* Async loading means we continue serving read commands during full resync, and
             * ""swap"" the new db with the old db only when loading is done.
             * It is enabled only on SWAPDB diskless replication when master replication ID hasn't changed.
             * because in that state the old content of the db represents a different point in time of the same
             * data set we're currently receiving from the master. */
            if (memcmp(server.replid, server.master_replid, CONFIG_RUN_ID_SIZE) == 0) {
```"
695163690,9323,oranagra,2021-08-24T20:04:07Z,"some styling issues.. i can also fix later, when we're near complete...
```suggestion
        } else {
```"
695956417,9323,eduardobr,2021-08-25T17:20:08Z,"@oranagra Changes for module events done in last commit.
Ajusting the current tests soon, but I would like to hear how much of the deprecated events we need to keep first."
698016644,9323,oranagra,2021-08-29T13:31:14Z,"@MeirShpilraien it occurred to me for a moment that maybe the ""data type"" part should be dropped, since modules with aux data can also be affected.
then i realized that we are lucky that these aux fields are only possible when data type being registered.

so i just wanna check with you that you don't see any problem with other modules, i.e. ones that use RM_Call or RM_OpenKey"
698016919,9323,oranagra,2021-08-29T13:32:56Z,"```suggestion
#define REDISMODULE_EVENT_REPL_BACKUP 12 /* Deprecated since Redis 7.0, not used anymore. */
```"
698016984,9323,oranagra,2021-08-29T13:33:21Z,"```suggestion
#define REDISMODULE_EVENT_REPL_ASYNC_LOAD 14
```"
698017048,9323,oranagra,2021-08-29T13:33:56Z,"```suggestion
    /* Deprecatedsince Redis 7.0, not used anymore */
```"
698017112,9323,oranagra,2021-08-29T13:34:25Z,"```suggestion
    RedisModuleEvent_ReplAsyncLoad = {
        REDISMODULE_EVENT_REPL_ASYNC_LOAD,
```"
698017364,9323,oranagra,2021-08-29T13:35:58Z,"```suggestion
 * * RedisModuleEvent_ReplAsyncLoad
```"
698017782,9323,oranagra,2021-08-29T13:38:14Z,"@yossigo if we deprecate `RedisModuleEvent_ReplAsync`, we surely still wanna keep it in the header file, so old modules can still handle it (although their code that handles it is now dead code) when used on new redis.
but what about the documentation? do we wanna drop the old API from the documentation, or keep it here with a deprecation notice?"
698017992,9323,oranagra,2021-08-29T13:39:51Z,"```suggestion
 *     * `REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_STARTED`
 *     * `REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_ABORTED`
 *     * `REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_COMPLETED`
```"
698018022,9323,oranagra,2021-08-29T13:40:03Z,"```suggestion
    case REDISMODULE_EVENT_REPL_ASYNC_LOAD:
        return subevent < _REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_NEXT;
```"
698018096,9323,oranagra,2021-08-29T13:40:25Z,"```suggestion
    if (module->options & REDISMODULE_OPTIONS_HANDLE_REPL_ASYNC_LOAD)
        output = sdscat(output,""handle-repl-async-load|"");
```"
698018164,9323,oranagra,2021-08-29T13:40:53Z,"```suggestion
#define REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_STARTED 0
#define REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_ABORTED 1
#define REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_COMPLETED 2
#define _REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_NEXT 3
```"
698018532,9323,oranagra,2021-08-29T13:43:08Z,"```suggestion
 * REDISMODULE_OPTIONS_HANDLE_REPL_ASYNC_LOAD, in which case diskless async loading should be avoided
 * because module doesn't know there can be traffic during database full resynchronization. */
int moduleAllDatatypesHandleReplAsyncLoad() {
```"
698019132,9323,oranagra,2021-08-29T13:47:29Z,"i think that maybe we better fire the event before discarding the db.
maybe modules will find that more useful.
i.e. they're gonna get a bunch of `free` callbacks and they'll wanna know if these callback are for actual data or temp data.
@MeirShpilraien do you think we need to have a post discard event too?"
698019351,9323,oranagra,2021-08-29T13:48:51Z,"maybe we better call this event before the call for `swapMainDbWithTempDb`.
@MeirShpilraien WDYT?"
705205344,9323,MeirShpilraien,2021-09-09T10:37:05Z,"Yes, I believe pre and post could be useful."
705207943,9323,MeirShpilraien,2021-09-09T10:40:54Z,"I believe yes when the main DB (which is now the temp DB) will be deleted, a module will get the free function called, right? I believe a module would like to know that those free happen on the main DB after it was swapped."
705208341,9323,MeirShpilraien,2021-09-09T10:41:30Z,And maybe also a done notifcation? Or do we get any other notification that will indicate done?
705235206,9323,oranagra,2021-09-09T11:23:12Z,"Yes, I think we better have both"
706833966,9323,eduardobr,2021-09-12T12:56:08Z,"Should it then be:
1. REDISMODULE_SUBEVENT_REPL_ASYNC_ABORTING
2. REDISMODULE_SUBEVENT_REPL_ASYNC_ABORTED
?"
706833986,9323,eduardobr,2021-09-12T12:56:12Z,"Should it then be:
1. REDISMODULE_SUBEVENT_REPL_ASYNC_SWAPPING_DB
2. REDISMODULE_SUBEVENT_REPL_ASYNC_COMPLETED
?"
706960428,9323,ShooterIT,2021-09-13T02:13:13Z,"I think your change for #9398 is right, since, before `swap db`, all data is not changed. Maybe you could remove the same comments and add some new comments for explaining current `swapdb` mode special behaviors.

BTW, for redis multi line annotation, the format is
```
/*
 *
 */
instead of
/*
*
*/

'*' should be aligned 
```
"
707285843,9323,oranagra,2021-09-13T12:28:30Z,"i'm ok with what you suggested, but maybe a better alternative could be something like:
1. REDISMODULE_SUBEVENT_REPL_ASYNC_DISCARD_START
2. REDISMODULE_SUBEVENT_REPL_ASYNC_DISCARD_DONE

(or ABORT_START / ABORT_DONE).
the advantage is that it's a common prefix for a start and end of the same operation (rather than two similar words with ING and ED suffix)"
707291761,9323,oranagra,2021-09-13T12:36:27Z,"ohh, i just realized the discard is (always) async. so the module can't use these START / DONE notifications to know know if a free callback is part of the discarded database or the other one...
i suppose that can be a real issue for some modules, and they'll have no choice but avoid declaring this capability.
for the other ones, i suppose firing the event before we start discarding is slightly better.
@MeirShpilraien what do you think?"
707293000,9323,oranagra,2021-09-13T12:38:04Z,"same as the other discussion: https://github.com/redis/redis/pull/9323#discussion_r698019132
there's probably no value in both START and END events, and if we have just one, better have it before the action IMHO."
707308254,9323,MeirShpilraien,2021-09-13T12:57:33Z,"@oranagra I actually believe that we should not check if a module created a datatype here, a module might need to be aware of this feature even if it does not have a datatype. For example, a module that collects stats about the keyspace. Such module will probably register on keyspace events, it will collect stats and it will want to be aware of possible swap db to know how to handle loaded events correctly. I agree that without loaded events, only modules with datatypes need to be aware of this feature, but the loaded event breaks this assumption."
707310256,9323,oranagra,2021-09-13T12:59:56Z,"ok. thanks.
so let's remove the `listLength(module->types)` part"
707310559,9323,MeirShpilraien,2021-09-13T13:00:20Z,"@oranagra agree, do not see other choose ..."
707329882,9323,oranagra,2021-09-13T13:23:40Z,"re-posting an old comment that got lost:
i think it may be a cleaner approach to turn on both `server.loading` and `server.async_loading` in our scenario.
this way, all the existing code that checks the `loading` flag will not need a change, and we'll only need to add a few exceptions like `server.loading && !server.async_loading`."
707579653,9323,eduardobr,2021-09-13T18:25:55Z,"@oranagra @MeirShpilraien, maybe a small confusion, but what we have added is REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_ABORTED, for the case we started loading on tempDb then discarded due to failure.
There's also the discard that happens after successful load. In this case we fire a REDISMODULE_SUBEVENT_REPL_ASYNC_LOAD_COMPLETED

Should the ABORT really become DISCARD (from your comment here) and be fired only on the failure scenario?"
707580073,9323,oranagra,2021-09-13T18:26:38Z,"did you copy that from somewhere?
it look logical, but maybe missing from the old code, even in a non-swapdb-based diskless loading.."
707581188,9323,oranagra,2021-09-13T18:28:15Z,"why is that done here? (there's another copy of the same logic below)

maybe a merge conflict resolution issue.."
707585261,9323,oranagra,2021-09-13T18:34:11Z,"```suggestion
#define REDISMODULE_OPTIONS_HANDLE_REPL_ASYNC_LOAD    (1<<1)
```"
707589752,9323,oranagra,2021-09-13T18:40:54Z,"some of your multi-line block comments have indentation issues .
in this case it's not even a new comment, so i suppose maybe your editor is doing this?
please go over them.
```suggestion
     * handler, otherwise it will get called recursively since
     * rdbLoad() will call the event loop to process events from time to
     * time for non blocking loading. */
```"
707593878,9323,oranagra,2021-09-13T18:47:20Z,"i now realize (or maybe i managed to forget it), that there's a case in which we'll do a swapdb diskless loading, but without async loading, i.e. we don't allow reads during loading.

in that scenario, maybe we still wanna support the old module api (the one about backups)? and still do swapdb?
current code will just fall back to disk-based loading.

i must say i don't like my suggestion above (too complicated), but wanted to raise it anyway."
707597482,9323,oranagra,2021-09-13T18:52:46Z,"@eduardobr i agree with your earlier suggestion to extract this code (that's now exists in two different places) to a function.
i think a proper name can be:
```c
/* Called on a replica when it gets attached to a new master */
void replicationAttachToNewMaster() {
```"
707599734,9323,oranagra,2021-09-13T18:56:18Z,"as suggested earlier, i think the `loading` flag should always be set, even when `async_loading` is also set.
this will let you revert many lines where you did `loading || async_loading` or `!loading && !async_loading`."
707600625,9323,oranagra,2021-09-13T18:57:38Z,"as you suggested, unlike the code inside redis, which will always set the two flags, i agree that the `loading` flag in INFO should be off while doing an async loading.
so you'll need this change:
```suggestion
            (int)(server.loading && !server.async_loading),
            (int)server.async_loading,
```"
707602428,9323,oranagra,2021-09-13T19:00:24Z,"you'll also need to modify `processCommand`:
```c
    if (server.loading && !server.async_loading && is_denyloading_command) {
```"
707606945,9323,oranagra,2021-09-13T19:07:53Z,"this wait is now ineffective.
we need another way to check.
maybe look at `master_sync_in_progress` or set `replicaof no one` and look at `role`?"
707611364,9323,oranagra,2021-09-13T19:14:59Z,"where there any changes in the new tests since my last review (before you rebased)?
i rather review the diff and not re-read the whole thing, but i can't find the old commit in GH."
707613641,9323,oranagra,2021-09-13T19:18:38Z,"@eduardobr please disregard our recent comments about the before and after.
i.e. all the ABORTING / ABORTED and DISCARD_START / DISCARD_DONE.
they where all about a way for the module to be able to distinguish between `free` callbacks of the main db, and the temp db, but since the freeing is always done in the background, the before and after notifications are no good.

the only think that's left to change IMHO is that we prefer that the ABORTED and COMPLETED events be fired before the freeing starts rather than after it."
707628286,9323,eduardobr,2021-09-13T19:41:20Z,No changes in the tests. The big rewrite is just a rebase + integrating with the 2 conflicting PRs
707630418,9323,eduardobr,2021-09-13T19:44:39Z,"Done then ;)
Thanks"
707632310,9323,eduardobr,2021-09-13T19:47:36Z,"So I guess method name becomes `moduleHandleReplAsync`? (see change)
"
707633508,9323,eduardobr,2021-09-13T19:49:27Z,"Done, extra change here is that this routine is now only executed for swapdb in case it's not asyncLoading."
707637731,9323,eduardobr,2021-09-13T19:55:58Z,"Seems to be really some merge issue, but also interesting, why it's not the first statement? Seems cheaper than the getExpire thing to return 0 (to be done in some other PR if that's the case, I'm reverting). "
707641047,9323,oranagra,2021-09-13T20:01:12Z,maybe module**s**HandleReplAsync?
707641443,9323,oranagra,2021-09-13T20:01:53Z,"actually, `module` is the prefix for all methods.
so maybe `moduleAllModulesHandleReplAsync`?"
707643554,9323,oranagra,2021-09-13T20:05:21Z,"styling: now that the `if` is a one liner, the curly brackets go in that same line."
707646689,9323,oranagra,2021-09-13T20:10:25Z,"i don't think that's right (to put that `if`).
you mean that if `asyncLoading` is true, it means we're still connected to the same master, and thus there's no need to discard the replication backlog and disconnect replicas?
i don't think that's right..
if we are forced to do a full sync (even if that's the same master), we have no way to know what changed, and we can't afford future partial syncs.

anything i'm missing?"
707651132,9323,eduardobr,2021-09-13T20:17:40Z,"Oh I see! Reverted, thank you"
707665181,9323,eduardobr,2021-09-13T20:40:08Z,I have raised this question to @zuiderkwast here: https://github.com/redis/redis/pull/9323#issuecomment-918484591
707669496,9323,eduardobr,2021-09-13T20:47:14Z,"_""current code will just fall back to disk-based loading.""_

Maybe it's the late time of the day =D, but I can't see this. It should still do the diskless load, but returning LOADING status, right?"
707679631,9323,eduardobr,2021-09-13T21:03:46Z,"What happens?
Because this test still runs under and test swapdb on sync loading mode"
707698235,9323,zuiderkwast,2021-09-13T21:32:49Z,"It's right, but it's better if the implentation of slot-to-key can be hidden in cluster.c. slotToKeyCopyToBackup and slotToKeyRestoreBackup did this.

I have an idea about this. I'll comment more tomorrow."
708041030,9323,oranagra,2021-09-14T08:32:47Z,@eduardobr i was asking about the `dirty++`
708043072,9323,oranagra,2021-09-14T08:35:07Z,"```c
        else if (server.repl_diskless_load == REPL_DISKLESS_LOAD_SWAPDB && !moduleAllModulesHandleReplAsyncLoad()) {
            serverLog(LL_WARNING,
                ""Skipping diskless-load because there are modules that are not aware of async replication."");
            enabled = 0;
        }
```
turning off `enabled` in `useDisklessLoad` means it'll be disk-based."
708055981,9323,oranagra,2021-09-14T08:50:23Z,"ohh, right, no async loading because replid changed.
i saw you removed this code, and concluded it's an async loading:
```tcl
            # waiting slave to do flushdb (key count drop)
            wait_for_condition 50 100 {
                2000 != [scan [regexp -inline {keys\=([\d]*)} [$slave info keyspace]] keys=%d]
```

so a recap, we now have:
1. either disk-based or disk-less that's not `swapdb`, in which case the loading flag is set, and INFO KEYSPACE will be emptied.
2. diskless swapdb when replid changed or modules with issues are present, in which case loading flag is set, and keyspace is NOT emptied.
3. diskless swapdb when replid didn't change and no modules with issues, in which case loading flat is off, and keyspace is NOT emptied.

i.e. before this change we had case 1 (which was also the case when swapdb was used), and no such distinction between the loading flag and the keyspace.

bottom line, the change you made in the test was only needed for the keyspace, not the loading flag. so the test is fine."
708100762,9323,zuiderkwast,2021-09-14T09:44:47Z,"To keep the encapsulation of slot-to-key in cluster.c, we can make clusterSlotsToKeysData an opaque type. It means that it can only be accessed as a pointer. Functions in cluster.c need to be called to do anything with it.

Here in server.h, just declare it as a struct without declaring the fields.

```C
typedef struct clusterSlotsToKeysData clusterSlotsToKeysData; // <--- size of struct unknown here

typedef struct tempDb {
    redisDb *dbarray;
    clusterSlotsToKeysData *slots_to_keys; // <---- pointer
} tempDb;
```

The rest can be in cluster.c and cluster.h. (Actually encapsulation is not that great in Redis. We have too much stuff in the header files. Things like CLUSTER_SLOTS could actually be defined in cluster.c instead since it's only used there, but let's not solve that problem in this PR.)

```C
// cluster.h
#define CLUSTER_SLOTS 16384

void slotToKeySwapData(clusterSlotsToKeysData **slots_to_keys);

// cluster.c
typedef struct clusterSlotToKeys {
    uint64_t count;             /* Number of keys in the slot. */
    dictEntry *head;            /* The first key-value entry in the slot. */
} clusterSlotToKeys;

struct clusterSlotsToKeysData {
    clusterSlotToKeys by_slot[CLUSTER_SLOTS];
}

void slotToKeySwapData(clusterSlotsToKeysData **slots_to_keys) {
    clusterSlotsToKeysData *tmp = server.cluster.slots_to_keys;
    server.cluster.slots_to_keys = *slots_to_keys;
    *slots_to_keys = tmp;
}
```

I think `server.cluster.slots_to_keys` can also be a pointer to an allocated structure. It makes it possible to just swap the pointers without using memcpy.

Does this make sense?"
708206435,9323,eduardobr,2021-09-14T12:15:30Z,"Oh, yes. I saw this in many places where db is touched and felt uncomfortable in not having it here as well."
708215386,9323,eduardobr,2021-09-14T12:26:53Z,"Ok, so it's about the modules. That sounds a bit hard to solve.
Falling to disk-based load creates a requirement on disk space that was not there before, I see.

Is your suggestion to do a non-async swapdb, and fire the old events for backwards compatibility, or actually bring the whole mechanism of backups back?"
708303396,9323,oranagra,2021-09-14T14:02:56Z,"i was thinking for a moment that this should actually be incremented by the number of keys in the db, and that this should certainly be done in any diskless replication rather than just on swapdb mode.

i.e. in disk-based replication, the rdb we got from the master serves for persistence too, so server.dirty can be set to 0, but in diskless, it should be incremented for each key we load.
(somewhat related to https://github.com/redis/redis/pull/6217)

however, i see that on disk-based we don't reset it to 0, so i'm not certain if we should touch it in diskless at all.
@yossigo @soloestoy @madolson please let me know if there's anything i'm missing."
708332098,9323,oranagra,2021-09-14T14:30:58Z,"i don't want to bring back the old backup/restore code (too complicated to maintain both).

I was thinking that maybe in this mode (no traffic during loading), we can support the old module API without bringing back the old backups mechanism, and maybe the modules will be ok with it.
i.e. if the modules don't do RM_OpenKey or any other odd things during loading, they won't be able the tell the difference between the old backup/restore/discard approach, and the new temp/apply/discard approach?

@MeirShpilraien you can probably tell me i'm wrong."
708333325,9323,oranagra,2021-09-14T14:32:12Z,"regarding the fact it falls back to disk-based, which it didn't before, i don't think that's a major issue.
i don't think swapdb is very commonly used anyway, and so are modules, so their combination is not a high concern."
709087671,9323,yossigo,2021-09-15T11:20:05Z,"I think we need to keep the documentation and mention it is deprecated, as well as use `__attribute__((deprecated))` to produce a compile time warning."
709091202,9323,yossigo,2021-09-15T11:25:35Z,"@oranagra The save policy refers to ""write operations"", not sure if loading an entire rdb should be considered as N operations depending on number of keys or just a single operation. I lean towards leaving it as is."
709248488,9323,oranagra,2021-09-15T14:31:23Z,"ok. @eduardobr, please revive the doc comment and add the deprecation notice and attribute"
709250331,9323,oranagra,2021-09-15T14:33:17Z,"ok, by ""as is"" i assume you mean to increment the counter only once.
i.e. before this PR it wasn't incremented at all.
and if we do that, we should increment it also in any of the other diskless loading modes (not just swapdb / async).
@eduardobr please make it happen, and also mention this ""bugfix"" in the top comment of the PR (will be used for release notes and commit comment when squash-merging)"
709567812,9323,eduardobr,2021-09-15T20:58:02Z,"Made the change, but need to confirm the places where it should be `(server.loading && !server.async_loading)`

From my search, this is what needs to be analyzed:
module.c
```
int RM_GetContextFlags(...)
    ...
    if (server.loading)
        flags |= REDISMODULE_CTX_FLAGS_LOADING;
```

multi.c
```
void execCommand(...)
    ...
    call(c,server.loading ? CMD_CALL_NONE : CMD_CALL_FULL);
```

rdb.c
```
void rdbReportError(...)
    ...
    if (!server.loading) {
        /* If we're in the context of a RESTORE command, just propagate the error. */
        /* log in VERBOSE, and return (don't exit). */
        serverLog(LL_VERBOSE, ""%s"", msg);
        return;
    }

...
serverLog(server.loading? LL_WARNING: LL_VERBOSE, ""rdbLoadLzfStringObject failed allocating %llu bytes"", (unsigned long long)clen);
...
serverLog(server.loading? LL_WARNING: LL_VERBOSE, ""rdbLoadLzfStringObject failed allocating %llu bytes"", (unsigned long long)len);
...
serverLog(server.loading? LL_WARNING: LL_VERBOSE, ""rdbGenericLoadStringObject failed allocating %llu bytes"", len);
...
serverLog(server.loading? LL_WARNING: LL_VERBOSE, ""rdbGenericLoadStringObject failed allocating %llu bytes"", len);
```

scripting.c
```
    /* Write commands are forbidden against read-only slaves, or if a
     * command marked as non-deterministic was already called in the context
     * of this script. */
    if (cmd->flags & CMD_WRITE) {
        int deny_write_type = writeCommandsDeniedByDiskError();
        if (server.lua_random_dirty && !server.lua_replicate_commands) {
            luaPushError(lua,
                ""Write commands not allowed after non deterministic commands. Call redis.replicate_commands() at the start of your script in order to switch to single commands replication mode."");
            goto cleanup;
        } else if (server.masterhost && server.repl_slave_ro &&
                   !server.loading &&
                   !(server.lua_caller->flags & CLIENT_MASTER))
        {
            luaPushError(lua, shared.roslaveerr->ptr);
            goto cleanup;
        }
...

    /* If we reached the memory limit configured via maxmemory, commands that
     * could enlarge the memory usage are not allowed, but only if this is the
     * first write in the context of this script, otherwise we can't stop
     * in the middle. */
    if (server.maxmemory &&             /* Maxmemory is actually enabled. */
        !server.loading &&              /* Don't care about mem if loading. */
        !server.masterhost &&           /* Slave must execute the script. */
        server.lua_write_dirty == 0 &&  /* Script had no side effects so far. */
        server.lua_oom &&               /* Detected OOM when script start. */
        (cmd->flags & CMD_DENYOOM))
    {
        luaPushError(lua, shared.oomerr->ptr);
        goto cleanup;
    }
...
    /* If this is a Redis Cluster node, we need to make sure Lua is not
     * trying to access non-local keys, with the exception of commands
     * received from our master or when loading the AOF back in memory. */
    if (server.cluster_enabled && !server.loading &&
        !(server.lua_caller->flags & CLIENT_MASTER))
    {
        int error_code;
        /* Duplicate relevant flags in the lua client. */
```"
709594664,9323,eduardobr,2021-09-15T21:39:57Z,Done and PR description updated
709599816,9323,eduardobr,2021-09-15T21:49:46Z,"Thanks a lot for the tips @zuiderkwast
Do you mind adding a commit with your suggestion? (Or maybe a separated PR focused on organizing these types after this is merged as this is probably happening soon?)"
709608986,9323,zuiderkwast,2021-09-15T22:08:15Z,I can maybe make the opaque type preparations before this PR is merged. I prefer that code isn't moved back and forth too much in unstable.
709892891,9323,oranagra,2021-09-16T08:17:49Z,"* module.c - i think we can keep the current code that depends only on `loading` so the module will know we're in loading state.
* multi.c - this is complicated, that code decides if `call` should put things in slowlog / stats and propagate to the AOF / replicas. so this may depend if the EXEC was received from the AOF file or another client, in either case, we don't want to propagate (and it'll also not allow any write commands), but for the slowlog and stats we wanna make that distinction.
* rdb.c - this may be similar to the above, i.e. a RESTORE command can fail differently when called from AOF vs a client. but actually, we don't expect a RESTORE command during loading on a read-only replica, so i think the code can stay as is (use `server.loading)
* scripting.c:
  * write commands - i don't currently understand how we could have got an EVAL command on a replica during loading before this PR. maybe that means a replica that's restarting from AOF? in that case, we wanna make a distinction again depending on the source of the command. commands that arrived from AOF should never fail, and ones that arrive from clients should.
  * oom - similar to the above. before this PR, EVAL commands from clients would be blocked during loading, and the check here was in order to never fail EVALs from AOF. we need to make a distinction depending on the client that triggered it.
  * cluster - same as the above.

bottom line, the main complication here is to detect the client while loading.
we could check `c->id == CLIENT_ID_AOF` instead of `server.loading`
or in the case of scripting.c check `server.lua_caller`.

@guybe7 @soloestoy i would love if you can validate these."
709916298,9323,soloestoy,2021-09-16T08:48:12Z,"I checked the codes about `server.dirty`, sadly its usages and definitions are ambiguous(I can't figure it out it means how many keys changed or event happened), and expiration and eviction doesn't increment it neither, I will open a new issue to discuss it."
710193408,9323,zuiderkwast,2021-09-16T14:48:30Z,"Here I made clusterSlotToKeyMapping opaque. I also made tempDb opaque (implementation fully in db.c). It's based on your branch with one commit added. https://github.com/zuiderkwast/redis/tree/feature/draft-use-tempdb-swapdb/opaque-types

`./runtest-cluster` fails, but it fails also with your branch for me. Did you run it?"
710244303,9323,guybe7,2021-09-16T15:45:32Z,"in all the cases above (apart from module.c) we should check the client instead of server.loading

in module.c I suggest adding REDISMODULE_CTX_FLAGS_ASYNC_LOADING"
710276214,9323,oranagra,2021-09-16T16:24:44Z,"Ok about module.c we can add that. 
And indeed most other cases actually meant to check if the client is the aof client rather than look at the loading flag. 
However for rdb.c it's a bit more complicated, since the loading could be either RESTORE command (coming from the master client, an AOF or a normal client), but could also be an RDB file (not a command). 
So fat the loading flag check meant to distinguish between a restore command and an RDB file loading... 
So now we'll need two checks, first see if this is a command or an RDB file, and then check which client issued it. 
However, since we don't expect RESTORE commands during async loading, we can decide to keep the current code too..

On a second thought, I'd vote for the complicated one (being more explicit) "
710449596,9323,eduardobr,2021-09-16T20:25:30Z,"Oh, I always thought these were succeeded on PR build.
I just debugged and found a few things:
It crashes on this block of initTempDb():
```
    /* Init cluster slots to keys map if enable cluster. */
    if (server.cluster_enabled) {
        memset(&tempDb->slots_to_keys, 0, sizeof(tempDb->slots_to_keys)); // <- crashing line
    }
```
Removing it and, as it should be, adjusting the test to watch for async_loading instead of loading will make it pass.
And of course, the test needs to be renamed to fit the changes made.

Considering it's an area you have previous experience, any suggestion?
This block is inspired on your:
```
/* Empty the slots-keys map of Redis Cluster. */
void slotToKeyFlush(void) {
    memset(&server.cluster->slots_to_keys, 0,
           sizeof(server.cluster->slots_to_keys));
}
```
But I added to ensure a clean tempDb->slots_to_keys on the when we initialize it prior to loading data on it."
710494856,9323,zuiderkwast,2021-09-16T21:18:14Z,"The slot-to-key data is supposed to match what's in server.db[0]. If the db is cleared the slot-to-key data should also be cleared. There is nothing complicated about it.

If you fixed it, then I guess you can add my commit (cherry-pick) and fix it the same way?"
710497773,9323,eduardobr,2021-09-16T21:21:51Z,"A bit of confusion here, I haven't fixed ;)
I mentioned it works when the line is removed, but not necessarily that's the correct to do.
I don't understand why the current code to init this tempDb->slots_to_keys simply fails.
It's something on other side of the application that blows up when I run this memset."
710504944,9323,zuiderkwast,2021-09-16T21:30:56Z,I don't know either. I'm not familiar with async load. :)
710505976,9323,zuiderkwast,2021-09-16T21:32:15Z,It's late here. I will look tomorrow.
710540326,9323,eduardobr,2021-09-16T22:27:46Z,"@oranagra @zuiderkwast 
See last commit ""Fix slots to keys handling on swapdb""
Correct me if I'm wrong but I don't think we actually needed to store it in the tempDb.
Previously it was flushed during backup, now I flush right before swapDb.
It the replication fails, it's still intact.
The cluster test also won't crash with this change anymore (crash unrelated to async_loading fix)."
710788812,9323,zuiderkwast,2021-09-17T06:35:09Z,"Wait a second.

When we do async load, do we load the dump into tempDb and then swap? Is this how it works? Doesn't it mean that we need one slot-to-key mapping for the tempDB and another one for the main DB?

We can only clear the slot-to-key mapping when we clear the database. If we swap with a non-empty database, we need a matching slot-to-key mapping. If we clear the slot-to-key mapping when the database is not empty, it is easy to create a test case which crashes: Delete all keys. There is an assert in slotToKeyDelEntry which will fail."
710827011,9323,eduardobr,2021-09-17T07:41:25Z,"Having a bad feeling about the complexity of this whole change now =)
So while doing the replication, the calls to slotToKeyAddEntry should apply to a tempDb slots_to_keys, not to server.cluster->slots_to_keys as it has been in this PR so far? If that's the case, we need to send a pointer to the methods that change server.cluster->slots_to_keys to work on either the temp or server.cluster according to the situation.
Makes sense @oranagra?"
710998129,9323,oranagra,2021-09-17T12:04:29Z,"yes. sorry, i didn't closely follow the discussion about slots_to_keys.
as long as we keep serving from server.db we need the server.cluster->slots_to_keys to remain the old one.
during async loading, we also need dbAdd to update the new temporary slots_to_keys.
then if we discard the temp db, we discard the temp slots_to_keys, and if we swap the db to be the primary db, we need to copy the tmp slots_to_keys over the primary one."
711002743,9323,oranagra,2021-09-17T12:12:08Z,"the last committed changes don't look correct yet.

p.s. i don't mind the fact that CLUSTER_SLOTS is moved to server.h, and maybe slots_to_keys being moved to be part of the database.
it should only be allocated when cluster is enabled, but i think trying to isolate that part in cluster.c/h and make redis unaware of how many hash slots there are is not worth it.
if @zuiderkwast has another idea i don't mind trying (didn't follow that part of the discussion).

p.p.s the cluster tests are indeed not executed on the PR CI (they're too slow), and also the only existing test for that may need some improvement to properly catch errors around this change, please look into that."
711229394,9323,eduardobr,2021-09-17T17:23:32Z,"Now hopefully that's what we need, please check again.
And thanks for the patience."
711250886,9323,oranagra,2021-09-17T17:59:09Z,"I think that the change in your last commit is technically correct, but I must say I don't like it too much. 
I think it would be better to move this structure to the redisDb struct (to be allocated only when cluster is enabled). 
This way dbAdd would handle it correctly, and the tempDB we allocate during replication would be enough (no need for an extra member in the cluster struct). 
I think it's OK for server.h to be aware of the slots count, it doesn't have to be abstracted in cluster.h. 
@madolson WDYT?

@eduardobr btw, maybe we better block async loading of someone enabled a writable replica? 
I don't usually care for writable replica, enabling it is an invitation but bugs and inconsistencies.
But looking at the current code (""forChanging""), it'll obviously do the wrong thing.. "
711267696,9323,eduardobr,2021-09-17T18:28:16Z,"I started with that solution, but then felt forced to have it in a public place in order to not flood methods with tempDb argument. But also agree it would be more self-contained.

About writable replicas, they are more for caching calculated results, like those commands with STORE flag and things like that, right? I'm indifferent, your call ;)
BTW, now that we just need minor changes, please feel free to make commits. Unfortunately I'll be short on time during next week, then I'm more available from the 26th.

As I see, we have:
- This possible refactoring for the placing temporary slots_to_keys in different location https://github.com/redis/redis/pull/9323#discussion_r711726175
- Adjust some async_loading conditionals as mentioned here https://github.com/redis/redis/pull/9323#discussion_r709567812
- Maybe better support deprecated module api https://github.com/redis/redis/pull/9323#discussion_r708332098, which maybe is just about doing this: https://github.com/redis/redis/pull/9323#discussion_r709087671
"
711315541,9323,zuiderkwast,2021-09-17T19:54:46Z,"The commit I made above makes slot-to-key mapping an opaque type. The isolation is good IMO. It's better in cluster.c because the slot hashing and everything else for cluster is there and does not need to be visible outside it.

It's easy to extend those functions to pass a SlotToKeyMapping* to slotToKeyAddEntry() and the other functions, as you said @eduardobr. Let's do that! :) That's all we need AFACT."
711726175,9323,oranagra,2021-09-19T11:03:22Z,"@zuiderkwast as i said, i don't mind to expose this part of the cluster code in server.h (it's not as complicated as the cluster bus gossip or anything like that), it it's just a trivial listing of keys per slot,
i also don't have an objection to the opaque mechanism you created, which seems nice.
but the problem is still that unlike the handling of `dbArray` argument to `rdbLoadRio` and `db` argument to `dbAddRDBLoad`, which is able to make sure we add data into the temp db, while commands are serving from another (the one in the `server` struct), this mechanism isn't handling that yet. right?

I think that in theory, an opaque `slots_to_keys` pointer should be stored inside the redisDb struct, and if we do that, it solved the above problem (since the `db` pointer is passed around).
till now the cluster code got away from that problem because unlike non-clustered redis, redis-cluster only supports one database. but now, we actually have two.

p.s. we do have some future plan we have, to drop support for Sentinel, by allowing non-sharded clusters with multiple databases and voting replicas. in that case cluster will support multiple databases, but will actually not need the slot-to-key mapping."
711991355,9323,zuiderkwast,2021-09-20T09:04:23Z,"I like the idea of putting the slot-to-key mapping (pointer) inside the redisDb struct. Then, a temp db can just be a redisDb and we don't need a specific tempDb struct.

The slot-to-key mapping can still be opaque and delegated from db to cluster if we like, independently of that."
716195028,9323,eduardobr,2021-09-26T12:13:09Z,"Change made, but I couldn't identify based on current code how to precisely apply the deprecated attribute in some cases. For example, before or after the elements?"
716195617,9323,oranagra,2021-09-26T12:17:36Z,"i'm not sure myself. i suggest you try to revive the test code that uses them and see that you get the warning.
i guess at least one warning is ok too (if we can't get them all to work)."
716974729,9323,eduardobr,2021-09-27T19:17:46Z,"In current state, it will generate this warning on ./runtest-moduleapi
![image](https://user-images.githubusercontent.com/3770445/134970494-e6c49ec6-559f-4081-bddf-8824fa391041.png)
Using the attribute on REDISMODULE_SUBEVENT_REPL_BACKUP_* variables wouldn't work.
Please let me know if that's the desired outcome of the deprecation overall"
718208183,9323,oranagra,2021-09-29T06:59:11Z,"i think one warning is enough.
and i think we should convert the test in `tests/modules/testrdb.c` to use the new API.
no sense in keeping the dead code anyway (apart from getting the annoying deprecation warning)."
720669329,9323,eduardobr,2021-10-02T11:48:50Z,"Just one thing before I commit. Is the goal of testrdb.c:replBackupCallback to check if the order of events is correct?
We could use some comments to understand this file a bit better."
720852157,9323,eduardobr,2021-10-03T16:23:38Z,"@oranagra I don't quite get the c->id == CLIENT_ID_AOF check as solution. I'm missing something.
Let's take multi.c
```
if (c->id == CLIENT_ID_AOF)
    call(c,CMD_CALL_NONE);
else
    call(c,CMD_CALL_FULL);
```
For all situations:
- No SYNC or ASYNC loading: we're fine with this code, always call FULL.
- ASYNC loading, command is not from RDB or AOF: ok, will call FULL
- ASYNC loading, command from AOF: ok, will call NONE
- ASYNC loading, command from RDB (replication, for example): ?
- SYNC loading: what if it's loading from RDB, CLIENT_ID_AOF won't cover it and we will end up calling FULL, right?"
720866974,9323,oranagra,2021-10-03T18:19:45Z,"I think that what you're missing is that RDB file doesn't contain commands, just raw data. So the only ways for `call` to be called during loading is that it's either from the AOF fake client or real client connection. "
720868215,9323,oranagra,2021-10-03T18:30:13Z,"i think it was attempting to use the callback for the purpose for which they were added, and see that they work correctly.
i.e. it's a module with global data, that's stored into the aux fields of the rdb, and it was using the callbacks to create a backup and restore / discard it.

similarly i guess the new test should use the new apis, and check that during rdb loading the old data is still accessible, and that if loading fails the temp data (that's already been loaded) is freed correctly, and that it the loading succeeds, the new data is accessible and the old one is released."
720876004,9323,eduardobr,2021-10-03T19:32:56Z,"Changes done, but the complicated way for rdb.c would get quite complicated as we don't have the client there.
Do you believe it worth passing around for the explicitness?"
720888834,9323,oranagra,2021-10-03T20:38:05Z,"In rdb.c we can use `server.current_client`
If it's NULL then we're processing an RDB file (or a preamble AOF). 
If it's non-null we can check the ID to see if it's the AOF client. 
If it non null and not the aof client, then it's a restore command.
Like other places, no need to look at the `loading` flag at all. 
Let's wrap that in some macro at the top and document that. "
721166601,9323,oranagra,2021-10-04T08:55:07Z,"```suggestion
        server.lua_caller->id != CLIENT_ID_AOF &&  /* Don't care about mem if loading from AOF. */
```"
725479740,9323,eduardobr,2021-10-09T12:09:44Z,"@oranagra I've been learning the last few days about the module API by looking documentation and code but couldn't understand the reasoning behind the replBackupCallback in testrdb.c. Also, I couldn't find what actually uses it or tests it (runtest-moduleapi tests pass if we just remove the callback in current unstable branch).

Probably we need good documentation about the aux_save and aux_load and how it plays with replication and SWAPDB (independent of previous implementation or upcoming with this PR).
Currently:
```
aux_save: A callback function pointer that saves out of keyspace data to RDB files. 'when' argument is either REDISMODULE_AUX_BEFORE_RDB or REDISMODULE_AUX_AFTER_RDB.

aux_load: A callback function pointer that loads out of keyspace data from RDB files. Similar to aux_save, returns REDISMODULE_OK on success, and ERR otherwise.
```

We could use some description on what REDISMODULE_AUX_BEFORE_RDB and REDISMODULE_AUX_AFTER_RDB are. Is it before/after saving/loading it? Is it where the aux variables are stored phisically in the RDB stream (before it or after it)? I've learned that the last is the case by reading the code, but ""when"" could be renamed to ""where"" to be explicit it's not a moment in time but a position in the stream.

As I understand now, what we'll need to do for the new test - to demonstrate what a real module would need to do - is:
- Change aux_load to start loading the global vars from stream into equivalent temp vars (if server.async_loading or if some flag set by STARTED tells the async load is in progress (not sure what is better)).
- On ReplAsync COMPLETED event, set the aux to the temp aux and clear the temp aux.
- On ReplAsync ABORTED event, clear temp aux.

Makes sense or I missed some part?

Thanks"
725602971,9323,oranagra,2021-10-10T08:44:48Z,"the `when` means it is called before and after the callbacks to save / load the keys.
for example, the module has an opportunity to store the total count of keys before the actual keys (so on loading an array can be pre-allocated) or store any other info that he'll need when loading individual keys, or compute some some checksum on their values during serialization and then store that at the end of the rdb.
maybe the documentation is not clear enough and needs improvements.

you're right that the current code passes even if the callback is completely skipped. i assume it still had some value detecting issues from when it **is** called (like bugs and leaks)

your plan seems right, maybe in order to verify this is really working, we need to add some assertions in the tcl code.
like make sure to modify these ""runtime"" values during / before async loading, and see that we get the correct value during loading, and also the correct value in case the loading was aborted or succeeded."
725636565,9323,oranagra,2021-10-10T13:04:56Z,"i think it looks odd that we have that method.
the code is identical to the other one, and the `tempDb` argument is not necessarily temp (could be the real db)...
i suggest to have just one method doing memset, which takes a db.
if we wanna avoid modifying the few calls to slotToKeyFlush, then we need to make it a wrapper method (that take no arguments and calls the other one)"
725637355,9323,oranagra,2021-10-10T13:10:35Z,"i think the indentation changes you added are unwanted, it causes the diff to look as if you changed all these lines, when in fact you just added one (harder to review and also trace back history of things in git log).
considering that anyway, one line has a unique indentation to it, i think we can revert the others.

maybe the middle ground is to move the `expires_cursor` line to be one before the last, and then the first bulk of lines will have the old (short) indentation, and the last two will have the same long one?

or, i'm also ok with leaving all the existing lines as is.
i.e. the short ones have extra indentation, and the two long ones have their own way..."
725642377,9323,eduardobr,2021-10-10T13:48:39Z,Amended last commit reverting this indentation and consolidating the 2 slotToKeyTempDbFlush method
725661403,9323,zuiderkwast,2021-10-10T16:07:33Z,"If we make `clusterSlotsToKeysData` opaque (like I didn't in a code example posted earlier in another comment), we don't need to move these structs and CLUSTER_SLOTS to server.h. We only need a typedef and an incomplete struct."
725662202,9323,zuiderkwast,2021-10-10T16:13:14Z,"The slot-to-key array needs to be free'd somewhere before the tempDb is free'd. Flush just memsets it to zero.

Maybe we can replace slotToKeyFlush with two functions: slotToKeyInit (allocates it) and slotToKeyDestroy (frees it)?"
725663704,9323,zuiderkwast,2021-10-10T16:24:49Z,"This code doesn't swap them. It just copies one to the other. Don't we want to swap them like we do for dict, expires, avg_ttl and expires_cursor below?

Also, we don't need memcpy here. We can just swap the pointers, like this:

If we want to swap them, don't we want to do something like this?

```Suggestion
        clusterSlotsToKeysData *tmp = server.db->slots_to_keys;
        server.db->slots_to_keys = tempDb->slots_to_keys;
        tempDb->slots_to_keys = tmp;
```

... or simpler, we can do this for all db numbers in the for loop below. It will be NULL for all DBs except 0, but it does matter IMO."
730433161,9323,oranagra,2021-10-17T15:28:56Z,"```suggestion
        } else {
```"
730433260,9323,oranagra,2021-10-17T15:29:31Z,"```suggestion
        } else {
```"
730433290,9323,oranagra,2021-10-17T15:29:47Z,"```suggestion

```"
730433722,9323,oranagra,2021-10-17T15:32:37Z,"i see you added `external:skip`, but maybe we should also add the `repl` tag like other tests (they kinda cover the same thing, but who knows what will someone try to skip...)"
730434100,9323,oranagra,2021-10-17T15:35:02Z,"this will need to be adjusted once #9323 is merged (not sure which one will be merged first)
@ShooterIT FYI"
730434352,9323,oranagra,2021-10-17T15:36:43Z,this can take a long time (5-10 seconds). maybe we rather rely on another test (one with no delay) rather than let this one complete loading.
730434656,9323,oranagra,2021-10-17T15:38:59Z,"these two (or maybe soon to be 3) tests have a lot on common.
maybe we can run them in a `foreach` loop that executes the same code 3 times is a few `if`s to do the variations between them?
will also make it easier to realize what's different and make future adjustments."
730447575,9323,eduardobr,2021-10-17T17:14:52Z,Thank you for the suggestions @zuiderkwast. Commited changes for swapping pointers instead of memcpy and splitting slotToKeyFlush into 2 functions
730448249,9323,eduardobr,2021-10-17T17:20:21Z,"These 2 new tests are under `tags {repl} {`, isn't already tagged with that?"
730451438,9323,oranagra,2021-10-17T17:45:37Z,"ohh, right. sorry"
730451581,9323,oranagra,2021-10-17T17:47:20Z,"isn't that change adding a leak? it used to do only memset, and now it also does malloc."
730460855,9323,eduardobr,2021-10-17T19:02:08Z,"Before, slots_to_keys was a variable declared in clusterState struct, now it became just a pointer in redisDb struct.
If it wasn't a pointer, we would have automatically wasted memory the size of CLUSTER_SLOTS for each db in the array.
We just need it to be allocated for db[0]. We actually refer to it without providing the array index all the time.
About leak, aren't the calls to `slotToKeyDestroy` enough?"
730461673,9323,oranagra,2021-10-17T19:08:33Z,"which call to slotToKeyDestroy? where is it called in the context of emptyDB?
note that `emptyDB` is called every time user runs FLUSHDB. and also on normal disk-based full sync."
730473927,9323,eduardobr,2021-10-17T20:42:43Z,"Hah, right. Implemented slots to keys as opaque type in last commit. This fix included."
735156282,9323,eduardobr,2021-10-24T18:49:18Z,@zuiderkwast Thanks for all the suggestions. Closing as this was implemented.
736493978,9323,eduardobr,2021-10-26T12:40:42Z,Same thing as https://github.com/redis/redis/pull/9323/commits/fb7b46cbb175b46d50c1aac76e328bdaca5e3d94?
736540978,9323,oranagra,2021-10-26T13:29:01Z,"ohh, sorry, i meant to mention #9166 (not 9323), but yes. i see you copied the modified code to trigger exhaustion of the backlog.
resolving this comment.. "
736896849,9323,oranagra,2021-10-26T20:33:06Z,"@eduardobr do you wanna try to handle this comment (and the one below)?
do you understand my suggestion?
a for loop running the same code 3 times with small variations,
one uses delay so we can test the state during loading.
one that succeeds (which doesn't have the delay so it's fast),
and one that gets aborted and we can check recovery. "
738031943,9323,oranagra,2021-10-28T05:29:53Z,"making the test faster (2.5 seconds instead of 8), risks timing issues (especially in valgrind runs).
we can't afford to use the same test for both reading from the replica while it's loading and also checking what happens when it succeeds.
we must split it to two tests (or two iterations of the same test), one with a delay and one without."
738033393,9323,oranagra,2021-10-28T05:33:40Z,"why did you remove this?
i think the replica can reconnect before we realize it stopped loading and then we'll end up waiting for it to finish"
738035299,9323,oranagra,2021-10-28T05:38:33Z,"again, for a successful test, i don't think we can accord to attempt to make it slow but not too slow.
the test will be unstable and fail from time to time.
i think we wanna run the same code twice, once with a delay and once without, and in each run test a different aspect."
738036585,9323,oranagra,2021-10-28T05:41:53Z,"in this case we don't need to do any funny things, so there's no real need to look at log lines.
we can just `wait_for_condition` on `master_link_status` to be `up`"
738037379,9323,oranagra,2021-10-28T05:43:53Z,"in this case we don't need to do any funny things, so there's no real need to look at log lines.
we can just `wait_for_condition` on `master_link_status` to be `up`"
738039085,9323,oranagra,2021-10-28T05:48:12Z,"i think there's a good chance that this line will miss the train.
we didn't set any `repl-diskless-sync-delay`, and there's a chance the replica will re-connect and start bgsave before this config is applied.
maybe we can just move it to before we disconnect the replica, or we need `repl-diskless-sync-delay` to delay the full sync a bit."
738040628,9323,oranagra,2021-10-28T05:52:04Z,"this line doesn't affect a fork that's already in progress (the fork child doesn't see this config change).
in the test that checks for completion, we should just avoid setting this config in the first place.
again, i think we need 3 tests.
1. checks the status during sync (needs a delay)
2. checks that status after failure (maybe it can be in the same run as the one above.
3. check for successful run (without any delays)"
738807301,9323,eduardobr,2021-10-28T22:06:51Z,"Replying here for all your test comments:
- I was definitely underestimating the possible timing issues ;)
- Made another version following your idea to always achieve fast executions and makes total sense
- Followed the other suggestions in general
- Asserts now printed as individual test descriptions

I know it will be tempting to say we can make variations for loading and async_loading on same test instead of splitting like I did, but I felt it would get quite bloated and hard to read. Still, in this version we cover more things than before with just 2 main tests in replication.tcl. Test time always under 1s each here."
739791128,9323,oranagra,2021-10-31T10:38:58Z,"sorry to bother you again, but maybe we don't need this ""delayed"" test? i.e. these assertions can be added into the ""aborted"" one before we abort it.
so this means we only have two tests ""aborted"" and ""succeeds"".

also, let's rename ""fast"" since the speed is just an internal concern of the test (not to take forever), but what it tests is what happens when it succeeds and fails replication.."
739791660,9323,oranagra,2021-10-31T10:44:12Z,"same here..
i.e. on one hand, we wanna test 3 things:
1. state during loading
2. after it is aborted
3. and when it succeeds

so it is nice to see 3 tests with 3 titles.
but on the other hand, we can combine the the first two and save some time.
"
739792540,9323,oranagra,2021-10-31T10:52:25Z,"same here... we can run that same check (the value of `testrdb.get.before`), both before we abort and after.

one more interesting complication, maybe we can find a way to make sure we abort only after the module got the callback and loaded a new value into it's temp variable?
i.e. without that check, there's a race, and maybe in some cases we abort even before...
maybe we'll add a command like `testrdb.async_loading.get.before` and do a `wait_for_condition` on it?
i know it means that module is no longer a naive module that uses the new api to get things done, but it does improve the test...

WDYT?"
740486983,9323,eduardobr,2021-11-01T19:53:03Z,"Good point about the race. Suggestions applied.
Thanks"
740848018,9323,oranagra,2021-11-02T09:13:00Z,"i meant to return the value of `before_str_temp`, so we don't just wait for the notification that async loading started, but also make sure the REDISMODULE_AUX_BEFORE_RDB was called."
740849329,9323,oranagra,2021-11-02T09:14:32Z,let's also update the comment so state that we wanna abort only after the temp db was populated by REDISMODULE_AUX_BEFORE_RDB 
740849978,9323,oranagra,2021-11-02T09:15:21Z,"let's also put some comment above the function to mention it's a testing hack to control the timing of the test, and not something a valid module would do."
741396588,9323,eduardobr,2021-11-02T19:20:40Z,"Sure thing, done"
741478239,9323,oranagra,2021-11-02T21:34:41Z,"i'm not sure why we needed that, since we did have this:
```
                    # Speed up shutdown
                    $master config set rdb-key-save-delay 0
```
we had it only in the aborted path, but that's also the only one that set it to anything other than 0 in the first place.
can you share some time measurements of before and after?
in any case, these lines (which i just quoted) are now no longer needed.

one more thing, i didn't bother to verify that the new numbers (delay and number of keys) you use are safe to avoid failures due to race conditions and slowness.
please make sure they're causing the replication to be long enough so that we're sure we'll be able to interrupt it in the middle (i.e some 5 or 10 seconds should be ok)"
741482601,9323,eduardobr,2021-11-02T21:42:39Z,"The new numbers make replication longer. Master has twice the keys (from 500 to 1000).
The only impact I can see from the number of keys in replica is rdb flushing time to disk (only on valgrind test or when I use absurd amount of keys in my machine).

About not needing:
`$master config set save """"`

Aren't the 1000 keys in master going to be flushed to disk when we terminate master server after Aborted path?

Edit: tbh, even in real life I see the server being blocked and slow to terminate when RDB is enabled (delays are after ""Saving the final RDB snapshot before exiting."") so rdb-key-save-delay 0 doesn't save us from this, especially on valgrind test where delays are more noticeable"
741490368,9323,eduardobr,2021-11-02T21:57:43Z,"Can you run that valgrind again so we can see if the ""Waiting for process nnn to exit"" disappeared from all these tests after the `set save """"` was added?

> can you share some time measurements of before and after?

Changing the replica keys to 20_000_000 changed total running time of runtest-moduleapi from 10s to 30s here, and started showing `Waiting for process n to exit` about 5 times.
But with these same 20 million keys and `set save """"` it's back to the 10 to 11s and there's no `Waiting for process`

Same applies to master, achieved `Waiting for process` by increasing to 100000 keys of 10000, but I get fast shutdown in this config when `set save """"`
"
741497215,9323,oranagra,2021-11-02T22:11:12Z,"i meant that we no longer need this, didn't suggest to remove `config set save """"`
```tcl
                    # Speed up shutdown
                    $master config set rdb-key-save-delay 0
```

i've re-triggered the tests (same links).

ideally we should tune it so that the ""successful"" test takes about a second or two,
and the ""aborted"" test sets delays that would take at least 5 (or better yet 20) seconds, but since we abort it rather early, it also takes a second or two."
741502877,9323,eduardobr,2021-11-02T22:22:39Z,"Successful replication here takes about 1.1s.
Aborted (if not interrupted) about 11s, and interrupted as it is 1.2s"
741509349,9323,oranagra,2021-11-02T22:36:42Z,"great! that's what we wanted.
thank you!"
742627255,9323,oranagra,2021-11-04T08:37:06Z,"@madolson looks like for some reason you where looking at an outdated version, or maybe when you posted your approval, GH also posted an old comment you composed in the past.
either way, in the last version the definition of CLUSTER_SLOTS didn't move (it's still in cluster.h)"
744605630,9323,oranagra,2021-11-08T10:47:55Z,"@MeirShpilraien noticed that the failure here can happen after we already announced ASYNC_LOAD_COMPLETED, swapped the databases and discarded the backup.
@eduardobr can you please look into it and issue a fix?"
753635512,9323,enjoy-binbin,2021-11-20T05:10:25Z,"somehow i think it should not be added `!server.async_loading` here? (a bit confused?)
btw,  i think `async_loading` should also require a document, maybe missing,  i added it in https://github.com/redis/redis-doc/pull/1686"
753655567,9323,oranagra,2021-11-20T09:28:21Z,"It is indeed a bit confusing that in Redis both flags are set in this mode, but in info, it's either one or the other. 
But we concluded that for each one (users or developers) it makes sense to look at it this way. "
708582744,9166,oranagra,2021-09-14T19:49:52Z,"AFAIK the reason the replica buffers and aof buffers are not counted for eviction was because it can cause feedback-loop when we push DELs into them.
in that sense, since the backlog is now dynamically growing, it should be deducted as well.

this means the code will be a lot simpler, right? just use `server.repl_buffer_size`?"
708585533,9166,oranagra,2021-09-14T19:54:05Z,let's sum them and do one atomicIncr
710030167,9166,oranagra,2021-09-16T11:31:22Z,"not sure i understand this one, maybe the name / doc should be improved.
```suggestion
/* The default number of replication backlog blocks to trim per call. */
#define REPL_BACKLOG_TRIM_BLOCKS_PER_CALL 64
```"
710032897,9166,oranagra,2021-09-16T11:35:33Z,"the commit comment and PR can refer to the history.
the code itself should usually document the current state (unless there are backwards compatibility issues, or any other reason to refer to the history)
```suggestion
/* Replication backlog is not separate memory, it just is one consumer of
 * the global replication buffer. This structure records the reference of
 * replication buffers. Since the replication buffer blocks may be very long,
 * it would cost too much to search replication offset on partial resync,
 * so we use one list to rerord one node every 1000 nodes to make
 * searching offset from replication buffer blocks list faster. */
```"
710036980,9166,oranagra,2021-09-16T11:41:18Z,"i think these variables need a `repl_` prefix (they're only used on replica clients).
despite the comments, it's hard for me to understand each of these.
let's add some block comment above them to describe this group, and maybe improve the comment next to each of them."
710037503,9166,oranagra,2021-09-16T11:42:06Z,"```suggestion
    size_t ref_block_pos;            /* Access position of referenced buffer block. (next offset to send) */
```"
710038008,9166,oranagra,2021-09-16T11:42:50Z,"why reference just one node?
let's make sure this is explained, and refer to that explanation from here"
710038554,9166,oranagra,2021-09-16T11:43:46Z,"since this is **counting** blocks, i guess it should be `long`.
btw, do we really need it? can't we easily count them (`id` delta) on the spot when we need it?"
710039315,9166,oranagra,2021-09-16T11:44:56Z,"```suggestion
    size_t repl_buffer_size;        /* The size of replication buffer. */
    list *repl_buffer_blocks;       /* Replication buffers blocks list (serving replica clients and repl backlog) */
```"
710064668,9166,oranagra,2021-09-16T12:22:18Z,"maybe split this into several `mem+=` lines each with a comment.
i understand the last two compute the rax,
the second one the linked list (shared with replicas, right?).
and the first one computes the actual bytes.
and since the histlen counts the used portion, we need to explicitly add the unused portion.."
710070840,9166,oranagra,2021-09-16T12:30:51Z,"maybe here's where we wanna use a similar trick to what you did in freeMemoryGetNotCountedMemory?
isn't that similar (without adding a loop)?

note that there used to be a loop on slaves in `freeMemoryGetNotCountedMemory` (executed per command), so adding one in INFO is not that bad, but still may be better..

the result of the other approach (what's now in freeMemoryGetNotCountedMemory) is smaller, right?
i.e. if the buffers have 100mb (because one replica is slow), and 50% of that is also part of the backlog.
the current approach in this function will return 100mb, and the other approach will return 50mb.

on the other hand, in case there's no slow replica, and the backlog uses 50mb, and the unsent portion of the replica buffers is just 1mb, then the current approach will show 1mb, and the other approach will show 0, right?

so if we define that info field (`mem_clients_slaves`) as memory overhead that's beyond what's in the backlog. the approach that's now in freeMemoryGetNotCountedMemory is good.

i think it's better than counting overlapping memory.
i.e. `mem_replication_backlog` and `mem_clients_slaves` better not overlap and we should decide that one of them takes precedence, and the other takes the rest.

if you agree, then let's also document that somewhere (initially in the code, and later also in redis.io)"
710077874,9166,oranagra,2021-09-16T12:40:20Z,"```suggestion
/* Logically copy 'src' slave replication buffers info to 'dst' slave.
 * Basically increase referenced buffer block node reference count. */
```"
710093692,9166,oranagra,2021-09-16T13:00:04Z,"I think this top comment should be made shorter (just mention it's similar for client output buffers, and that it is used for shared buffers between replica clients).
the actual explanation of each field should be next to the field."
710095772,9166,oranagra,2021-09-16T13:02:38Z,"maybe this is the opportunity to replace the terminology of ""slave buffers"" in the code to ""replica buffers""
or ""replica client buffers"".
in any case, since you renamed the function, we should probably avoid introducing one with the word ""slave"""
710174346,9166,oranagra,2021-09-16T14:28:15Z,"please be sure to explain the refcount scheme (maybe with a diagram), so that it's clear how the refcount works.
i.e the fact that each replica increments only the refcount of only the first node it points to."
710356134,9166,oranagra,2021-09-16T18:04:32Z,"did you extract that to a separate function in order to re-use it somewhere? or because the origin was too long?
i agree it's more readable and safer, but let's distinctly define the function's role.
in other words: let's add a top comment (also explaining the return value/s).."
710361814,9166,oranagra,2021-09-16T18:12:54Z,"although this is technically correct, one will always be empty, maybe it's clearer to add an `if` and handle replicas and normal clients separately?"
710375366,9166,oranagra,2021-09-16T18:32:44Z,"this releases the entire replication buffer, right? not just the backlog.
we do that since the only case were we free the backlog is when there are no replicas too, right?
let's add a comment explaining both these points.

let's also add an empty line between the different steps (backlog and buffers)."
711016653,9166,oranagra,2021-09-17T12:33:57Z,"i wonder why git decided these are changed lines?
probably because the re-order..
maybe if we move it together with prepareReplicasToWrite to be lower that'll be resolved and the order of functions will still make sense.
small win to blame log and possible conflicts.,"
711018153,9166,oranagra,2021-09-17T12:36:11Z,"let's revert that small styling fix, will make the diff nicer."
711020529,9166,oranagra,2021-09-17T12:39:49Z,"```suggestion
/* Generally, we only have one replication buffer block to trim when replication backlog
 * size exceeds our setting and no replica reference it. But if replica clients
 * disconnect, we need to free many replication buffer blocks that are referenced.
 * It would cost much time if there are a lots blocks to free, that will
 * freeze server, so we trim replication backlog incrementally. */
```"
711025566,9166,oranagra,2021-09-17T12:47:06Z,"```suggestion
           trimmed_blocks < max_blocks)
       {
```"
711026195,9166,oranagra,2021-09-17T12:47:59Z,"```suggestion
        /* We never trim backlog to less than one block. */
```"
711031757,9166,oranagra,2021-09-17T12:55:50Z,"```suggestion
        /* Replicas increment the refcount of the first replication buffer block
         * they refer to, in that case, we don't trim the backlog even if
         * backlog_histlen exceeds backlog_size. This implicitly makes backlog
         * bigger than our setting, but makes the master accept partial resync as
         * much as possible. So that backlog must be the last reference of
         * replication buffer blocks. */
```"
711040952,9166,oranagra,2021-09-17T13:08:48Z,"maybe this name is better?
it may be worth to move this define to redis.h next to the backlog struct declaration, just for the sake of documentation.
```suggestion
/* In order to quickly find the requested offset for PSYNC requests,
 * we index some nodes in the replication buffer linked list into a rax. */
#define REPL_BACKLOG_INDEX_PER_BLOCKS 64

```"
711043778,9166,oranagra,2021-09-17T13:12:47Z,"```suggestion
/* Append bytes into the global replication buffer list, replication backlog and
 * all replica clients use replication buffers collectively, this function replace
 * 'addReply*', 'feedReplicationBacklog' for replicas and replication backlog,
 * First we add buffer into global replication buffer block list, and then
 * update replica / replication-backlog referenced node and block position. */
```"
711175410,9166,oranagra,2021-09-17T15:58:10Z,"shouldn't that be
```c
        tail->repl_offset = server.master_repl_offset - len + 1;
```
i.e. we already incremented server.master_repl_offset with the full len, and we may have already written part of it to the previous node (or not) and updated len.
so now the repl offset of the beginning of that node is `server.master_repl_offset - len`"
711177192,9166,oranagra,2021-09-17T16:00:49Z,"i'm not yet clear what we do with these block ids. maybe i'll find out soon, but i suppose that should be documented in the header"
711178254,9166,oranagra,2021-09-17T16:02:07Z,"maybe rename `repl_buffer_size` to `repl_buffer_mem`, i.e. it doesn't hold the size of the data in the buffers, but rather the memory they consume.
either way, it should be documented there too."
711179678,9166,oranagra,2021-09-17T16:04:02Z,let's add some short comment that documents what these vars are used for.
711181616,9166,oranagra,2021-09-17T16:07:13Z,@yoav-steinberg i suppose it's a good idea that you'll review this PR in the context of client eviction.
711182564,9166,oranagra,2021-09-17T16:08:40Z,"maybe the term ""indexed"" is more appropriate than ""recorded""?"
711183546,9166,oranagra,2021-09-17T16:10:09Z,"let's try to avoid the S word when adding new code.
```suggestion
void freeReplicaReferencedReplBuffer(client *replica) {
```"
711187542,9166,oranagra,2021-09-17T16:16:12Z,"Wanted to remove the word ""slave"" but actually, I don't think the rest of the text is needed here.
instead of talking about slaves and backlog, we can say this function manages the replication stream (a term that was already used here).
```suggestion
/* Propagate write commands to replication stream.
```
Actually, this line can be completely removed, i think the rest of the comment stands for itself."
711188772,9166,oranagra,2021-09-17T16:17:58Z,"```suggestion
 * This function is used if the instance is a master: we use the commands
 * received by our clients in order to create the replication stream.
 * Instead if the instance is a replica and has sub-replicas attached, we use
 * replicationFeedSlavesFromMasterStream() */
```"
711199583,9166,oranagra,2021-09-17T16:34:39Z,"maybe we should rename both functions to refer to ""replication stream"" rather than ""slaves"""
711205008,9166,oranagra,2021-09-17T16:43:16Z,"let's remove the argument (and rename the function to ""replicationFeedStreamFromMasterStream"" or such)"
711208386,9166,oranagra,2021-09-17T16:48:54Z,shouldn't that be `raxPrev`?
711213444,9166,oranagra,2021-09-17T16:57:07Z,"ok, now i see why we have IDs. so it's just in order to estimate the memory usage?"
711254515,9166,oranagra,2021-09-17T18:05:39Z,"`c` is the master client (not a replica), what am i missing?"
711256501,9166,oranagra,2021-09-17T18:08:56Z,"```suggestion
    /* Sanity check replication buffer, the first block of replication buffer blocks
     * must be referenced by someone, since it will be freed when not referenced,
     * otherwise, server will OOM. also, its refcount must not be more than
     * replicas number + 1(replication backlog). */
```"
711259061,9166,oranagra,2021-09-17T18:13:22Z,@yoav-steinberg maybe we need to consider that before client (or key) eviction?
711261401,9166,oranagra,2021-09-17T18:17:19Z,"first, i think we should call them ""buffers"" (not ""buffer"").
first because it's a linked list of allocations (same as we call the other ones ""client output buffers""), but secondly, because they serve multiple purposes (multiple replicas, and also the backlog)

secondly, maybe we should use the word ""total""? i.e. in the past the `mem_clients_slaves` and `mem_replication_backlog` were each representing a portion of the memory, and you had to sum them to get the total.
now they represent overlapping memory, and this metric is the actual used total.
```suggestion
            ""mem_total_replication_buffers:%zu\r\n""
```

what do you think?"
711262640,9166,oranagra,2021-09-17T18:19:24Z,"i think we should name that var `repl_buffers_mem` (not about the number of bytes in the buffers, but about the memory they consume, right)?"
711263411,9166,oranagra,2021-09-17T18:20:41Z,"let's add a comment in `dismissClientMemory` as to why we don't need to dismiss that ""second"" output buffer there."
711523600,9166,oranagra,2021-09-18T07:05:10Z,"why did you comment that?
it means we don't know that the commands completed before proceeding to the rest of the test"
711524105,9166,oranagra,2021-09-18T07:09:04Z,i think refcount and id can be made `int`
711526217,9166,oranagra,2021-09-18T07:26:55Z,"what do you mean by ""bother""?
also that line changes the backlog not output buffer."
711526254,9166,oranagra,2021-09-18T07:27:15Z,"lets try to avoid using the term ""slave"" (please go over this file)"
711526325,9166,oranagra,2021-09-18T07:27:51Z,"```suggestion
    # Generating RDB will take some 10 seconds
```"
711526875,9166,oranagra,2021-09-18T07:31:31Z,"there's a lot of prep code before the test starts, let's add a short comment about about this test group"
711528470,9166,oranagra,2021-09-18T07:38:00Z,"we're expecting about 1mb drop, let's validate that (one byte of diff can happen by chance)"
711528796,9166,oranagra,2021-09-18T07:38:39Z,"again, let's add a short comment about this group of tests."
711529493,9166,oranagra,2021-09-18T07:40:12Z,"```suggestion
         # Generating RDB will take 1000 seconds
```
maybe we want to reduce the `delay` to something more realistic."
711531504,9166,oranagra,2021-09-18T07:43:50Z,"```suggestion
    test {Replication backlog size can outgrow the backlog limit config} {
```"
711533768,9166,oranagra,2021-09-18T07:48:20Z,"```suggestion
    test {Replica could use replication buffer (beyond backlog config) for partial re-synchronization} {
```"
711534953,9166,oranagra,2021-09-18T07:50:25Z,"```suggestion
        # memory may take time to be reclaimed.
```"
711540885,9166,oranagra,2021-09-18T08:01:42Z,"please add a section in the top comment to mention the effect of this PR on interfaces.
i.e. the main effect is an optimization that users won't really notice (it'll just work).
but some info fields changed their purpose, were in the past accumulative and now overlapping.
also mention the new info field."
713499259,9166,ny0312,2021-09-22T00:04:22Z,`s/Slave/Replica`?
713505812,9166,ny0312,2021-09-22T00:23:43Z,"If we are introducing a `repl_backlog` struct, why not also put all of `repl_backlog_size/repl_backlog_histlen/repl_backlog_off` into it?  Logically they belong together.

And of course, if we do that, then the type of this struct needs to be something more generic than `replBacklogRefReplBuf`. 

```
typedef struct replBacklog {
    replBufRef repl_buf_ref;
    size_t repl_buf_unrecorded_blocks_count;       /* Unrecorded block count currently. */
    rax *repl_buf_blocks_index;             /* The index of reocrded blocks of replication
                                    * buffer for quickly searching replication offset
                                    * on partial resync. */
    long long repl_backlog_size;    /* Backlog circular buffer size */
    long long repl_backlog_histlen; /* Backlog actual data length */
    long long repl_backlog_off;     /* Replication ""master offset"" of first
                                       byte in the replication backlog buffer.*/                                
} replBacklog;
```"
713785512,9166,oranagra,2021-09-22T09:58:42Z,"sorry, my bad (hard to control indentation in suggestions)
```suggestion
    {
```"
713804578,9166,ShooterIT,2021-09-22T10:25:22Z,"I am making code fine, and apply your suggestions, l will update"
713805848,9166,ShooterIT,2021-09-22T10:27:11Z,"here, I think raxNext and raxPre is the same, but it seems raxPre is better"
713812011,9166,ShooterIT,2021-09-22T10:36:24Z,"OK, initially, i want to do this, but to make getClientOutputBufferMemoryUsage uniform, i add this variable. Now i change getClientOutputBufferMemoryUsage for different client type, i also remove this, also remove the following `used_size_of_repl_buf`."
713813288,9166,ShooterIT,2021-09-22T10:38:15Z,just because the origin `writeToClient` function is too long. let me add a top comment
713818443,9166,ShooterIT,2021-09-22T10:46:23Z,"yes, the entire replication buffer is released. let me add comments for it"
713821255,9166,ShooterIT,2021-09-22T10:50:34Z,"Yes, but `tail->used` just is the `len` which is update since of last written part."
713846644,9166,ShooterIT,2021-09-22T11:29:24Z,">AFAIK the reason the replica buffers and aof buffers are not counted for eviction was because it can cause feedback-loop when we push DELs into them.

Yes, but i think we actually want to count all memory into maxmemory limit.

Although the backlog is now dynamically growing, i think we still want to count the size of replication backlog  into `maxmemory` limit. So here i only don't count the memory beyond the replication backlog into maxmemory limit."
713869916,9166,ShooterIT,2021-09-22T12:02:58Z,"yes, it is unnecessary. i remove it"
713873063,9166,ShooterIT,2021-09-22T12:07:39Z,"""second"" output buffer? do you mean replica's output buffer?"
714002880,9166,oranagra,2021-09-22T14:29:04Z,"maybe that would be ok, but only if we don't run into an endless feedback loop on mass eviction, which causes over-eviction and data loss.

so i'd like to imagine 3 cases.
let's say we have a server with maxmemory=1gb, and the backlog limit set to 100mb.
1. if the backlog is full and the replicas are not lagging, eviction deletes keys and the backlog normally remains 100mb, so other than a small spike because a new repl-buffer node is created it shouldn't cause an infinite feedback loop.
2. if there's a lagging replica that causes the repl buffers to grow to 500mb, each eviction would cause the buffer to grow, and had we counted that we could get into a feedback loop. but since we ignore the part above the first 100mb, we're ok.
3. if there are no replicas connected for a long time, so also no backlog, and the db is full constantly doing evictions. then a replica connects and the backlog and repl buffers start to grow, the eviction causes it to grow even faster, and it's now consuming 10mb. each (small) key being deleted inflates the memory further and the eviction loop keeps running until the backlog reaches 100mb, and which point the feedback loop stops and eviction eventually completes.

let's analyse case 3.
- since we now have incremental eviction, we don't have the risk of staying in an infinite loop, we'll re-sample the memory state when we re-enter the performEvictions function.
- since (unlike the old slave buffers), the backlog will keep consuming that memory even after the eviction loop stops and the replicas consume their buffers, we won't go into a resonance effect. 

the benefit of keeping the current proposal that doesn't ignore the backlog part (first 100mb in our case), is that on upgrades from previous versions, users won't suddenly be able to push another 100mb before reaching eviction.

so bottom line, i'm changing my mind and i'm ok with this.
still, i'd like to turn the attention of others to this discussion.
let's mention it in the top comment and hope they'll read it when the time comes."
714018269,9166,oranagra,2021-09-22T14:43:45Z,"```suggestion

    /* Replication buffer blocks are completely released when we free the
     * backlog, since the backlog is released only when there are no replicas
     * and the backlog keeps the last reference of all blocks. */
    freeReplicationBacklogRefMemAsync(server.repl_buffer_blocks,
                            server.repl_backlog->blocks_index);
```"
714024626,9166,oranagra,2021-09-22T14:50:12Z,indentation
714043623,9166,oranagra,2021-09-22T15:09:08Z,"i had a discussion about this with @yoav-steinberg and although we don't agree, i'd list the options here.

background:
previously we had these in INFO MEMORY: `mem_clients_slaves` and `mem_replication_backlog`, people had to sum them if they wanted, or alternatively looking at each (specifically the slaves one), would immediately indicate where the majority of the memory is used.

now we have several options:
1. keep each of these two represent how much memory used for that purpose, so summing them would mean part of the memory was accounted twice, and that's what the new `mem_total_replication_buffers` field is for.
2. delete these old fields since they're coupled with an old internal design. users can easily conclude that if the new `mem_total_replication_buffers` is bigger than the `repl_backlog_size` config, then that's an indication that replicas are causing trouble.
3. we can aim for 2, but meanwhile keep doing 1 for some backwards compatibility.
4. do what i'm gonna describe below:

my suggestion:
```
if (server.repl_buffer_mem > server.repl_backlog_histlen) {
    mem_clients_slaves = server.repl_buffer_mem - server.repl_backlog_histlen;
    mem_replication_backlog =  server.repl_backlog_histlen;
} else {
    mem_clients_slaves = 0;
    mem_replication_backlog =  server.repl_backlog_histlen;
}
```
- so in case the replicas are not lagging, they'll show 0, and even if they do consume something, then we can argue that the new mechanism is utilizing the backlog so it doesn't cause any excess memory usage.
- in case the replicas are lagging, the backlog will show the maximum, and the replicas will show the excess.
- this is backwards compatible with what we had till now (people can sum these fields)
- a quick look at these two metrics, and it's easy to realize where the memory is wasted and who's to blame"
714076735,9166,ny0312,2021-09-22T15:44:23Z,"I want to propose abstracting `ref_repl_buf_block` and `ref_block_pos` into a single reference-like type, so we don't have to redundantly define them in all consumers of the global replication buffer list.

(Type name is up for debate)

```
// Uniquely identifies a position in the global replication buffer.
typedef struct replBufRef {
    listNode *ref_repl_buf_block; /* Referenced replication buffer block. */
    size_t ref_repl_block_pos; /* Referenced position inside the referenced replication buffer block. */
};
```

Then we can have:
```
typedef struct client {
...
   replBufRef repl_buf_ref;
...
};

typedef struct replBacklogRefReplBuf {
...
   replBufRef repl_buf_ref;
...
}
```"
714084897,9166,ny0312,2021-09-22T15:53:22Z,"Is there a reason why this can't be squeezed into `replicationCron`? That seems to be a more fitting place?

If there is a reason that this has to be done here in `beforeSleep`, please document so future developers don't introduce regression."
714115453,9166,ny0312,2021-09-22T16:29:19Z,"We could always calculate this on-demand when we need it, no? Why maintain it as a variable? Maintaining it means we need to update it whenever the global replication buffer list is touched, which happens in multiple places."
714120412,9166,ny0312,2021-09-22T16:35:29Z,"Suggest to encapsulate these into a `resetReplBufferBlocks` function, since they are also used in `initServer(void)`"
714133362,9166,ny0312,2021-09-22T16:52:09Z,"`since the backlog is released only when there are no replicas and the backlog keeps the last reference of all blocks.`

This is a major assumption we are making here. I would suggest we assert that this is actually true to gain confidence in our implementation of this assumption, at least for the first version of this feature. It will hurt performance a little bit, but given this is a rare operation, I think the pro outweighs the con. Once we are confident that this assumption is always true, we can remove such assertions to get some performance back.

Something along the lines of:
```
void sanityCheckReplBufBlocksCanBeFreed() {
    listNode *ln;
    listIter li;
    listRewind(server.repl_buffer_blocks, &li);
    while ((ln = listNext(&li)) != NULL) {
        replBufBlock *block = listNodeValue(ln);
        serverAssert(block->refcount == 0); /* No reference. Safe to free */
    }
}
```"
714155733,9166,ny0312,2021-09-22T17:21:37Z,"subjective nitpick. might be more readable this way.
```suggestion
        size_t copy = (len <= avail) ? len : avail;
```"
714158812,9166,ny0312,2021-09-22T17:25:44Z,"nitpick. whitespaces.
```suggestion
        size_t size = (len < PROTO_REPLY_CHUNK_BYTES) ? PROTO_REPLY_CHUNK_BYTES : len;
```"
714164080,9166,ny0312,2021-09-22T17:32:42Z,"You are both right. At this point `len` and `tail->used` are exactly the same. Since `tail->repl_offset` is the first offset of this particular node, I find the existing code (e.g. `tail->repl_offset = server.master_repl_offset - tail->used + 1;`) more intuitive to me, because `tail->repl_offset = server.master_repl_offset - len + 1;` look like we are subtracting the full input `len`."
714165351,9166,ny0312,2021-09-22T17:34:29Z,Should we move `prepareReplicasToWrite();` to here so it's closer to other replica related logic?
714169478,9166,ny0312,2021-09-22T17:39:34Z,"Isn't one of the major benefits of this PR that replicas don't consume memory to maintain their own output buffers? 
If replicas don't have ""client output buffer"" anymore, why do we still close replicas based on ""client output buffer""?

I might be missing something, could you please explain(and document the reasoning as code comments)?"
714172626,9166,ny0312,2021-09-22T17:43:43Z,"This function doesn't decrement any refcount of any node, so it doesn't create any new opportunities to trim. I find it counter-intuitive that we call `trim` here. 

If we are calling it just to do some leftover work from previous trimming effort, I would suggest we leave that responsibility to the cron job.

"
714179721,9166,ny0312,2021-09-22T17:53:20Z,"Seems to me that our assumption is the following, so we should assert for it:
```suggestion
    if (server.repl_backlog == NULL) {
        serverAssert(listLength(server.repl_buffer_blocks) == 0);
        return;
    }
```"
714181828,9166,ny0312,2021-09-22T17:56:09Z,I might be missing something obvious but why we are dumping from the last block to the first? Wouldn't that give us a reversed and wrong replication stream content?
714182538,9166,ny0312,2021-09-22T17:57:04Z,We don't need `if (server.repl_backlog)`.
714188577,9166,ny0312,2021-09-22T18:04:59Z,"The monitor clients can be modeled as another consumer of the global replication buffer list, right?"
714193102,9166,ny0312,2021-09-22T18:11:31Z,"Explicitly assert that our assumption is always true.
```suggestion
        if (o->repl_offset + (long long)o->used >= offset) {
            serverAssert(o->repl_offset <= offset);
            break;
        }
```"
714194777,9166,ny0312,2021-09-22T18:13:49Z,Should we put this function in `replication.c` instead?
714195267,9166,ny0312,2021-09-22T18:14:32Z,"Suggest add comment saying replicas don't have their own dedicated ""client output buffer"" anymore."
714199824,9166,ny0312,2021-09-22T18:20:47Z,"Subjective nitpick.
```suggestion
        listNode *ln = listLast(server.repl_buffer_blocks);
        serverAssert(ln != NULL); /* We are looking at a connected replica, so there is at least one replication buffer block*/
        replBufBlock *tail = listNodeValue(ln);
```"
714205881,9166,ny0312,2021-09-22T18:29:24Z,"Should we check `if (c->ref_repl_buf_node == NULL) return C_OK;` first? Or do we assume it's guaranteed that when `_writeToClient` is invoked on a replica, the replica always has a valid `ref_repl_buf_node` already. If that is the assumption, we should assert."
714270436,9166,ny0312,2021-09-22T20:05:06Z,"Should we split this function into two now? Since they are now counting two entirely different things:
`getClientOutputBufferMemoryUsage` for regular clients, and `getReplicaReferencedReplBufferMemoryUsage` for replica clients."
714320085,9166,ny0312,2021-09-22T21:21:10Z,"1. 
```
AFAIK the reason the replica buffers and aof buffers are not counted for eviction was because it can cause feedback-loop when we push DELs into them.
```
I think this is tribal knowledge that is not documented anywhere in the code. This is the first time I'm learning this. Could we please document it?

2. I agree with the current logic."
714535922,9166,oranagra,2021-09-23T07:28:44Z,"i feel that replicationCron could be too slow / late, and maybe introduce excessive eviction or client disconnection in that time, and that can be also said on serverCron. doing smaller steps in beforeSleep sounds better to me.

but maybe we should do some benchmark or analyze the worse case, instead of judge by feelings?"
714536452,9166,oranagra,2021-09-23T07:29:30Z,"calculating it means to run on the long list, this cause cause latency in INFO and others."
714539694,9166,oranagra,2021-09-23T07:34:27Z,"we can do that once and run test tests, but i don't think we can keep it.
alternatively we can assert that there are no replicas.
and we can also add some global counter of all refcounts (i.e. every time we increment a certain buffer's refcount, we also increment the global refcount), and then assert here that the global refcount is 0."
714545656,9166,oranagra,2021-09-23T07:43:29Z,"ohh, i guess i was missing the fact we just did `tail->used = len;` a few lines up, and for some reason i thought that `tail` is the previous node (the one into which we've written the first part).
anyway, i don't recall what i was thinking, but my suggestion and the current code are the same.
sorry."
714551831,9166,oranagra,2021-09-23T07:52:29Z,"they share memory, but that memory can still lead to issues and if a slow replica falls behind for too long, we wanna disconnect it and release the memory.
in that sense if there are two that fall behind, and both crossed the threshold, we'll still disconnect both and reclaim the memory.

also note (and maybe we can document that):
setting a replica output buffer limit that's lower than the backlog size is pointless since:
1. disconnecting the replica will not release any memory, but also:
2. even in the previous versions, such a setting would mean that if a replica managed to use that backlog for PSYNC, it'll immediately get disconnected.

so that was an always an invalid configuration, and we should document that.
@yoav-steinberg FYI (what we discussed yesterday).

so after we put that invalid configuration aside, we can look at this PR as a simple optimization.
i.e. semantically, when a replica uses less memory than the backlog limit config, we can argue that it uses the backlog and no memory of it's own.
and when replicas consume more memory than the backlog, they share memory, and also the backlog benefits from that as an extra size.

if we go with the above semantics, then my proposal for info fields makes sense, see https://github.com/redis/redis/pull/9166#discussion_r714043623"
714552608,9166,yoav-steinberg,2021-09-23T07:53:34Z,"Looking at the code it seems that `repl_buffer_blocks` and `repl_backlog->ref_repl_buf_node` are redundant. We have two pointer essentially pointing to the same list head. In some places we check one in some the other in some both(!) and the code also always needs to take care to update one when changing the other. 

I understand the attempt to separate two concepts here: ""The replication buffer"" and the ""Backlog buffer"" but in reality they are exactly one and the same, and this reality actually shows at that they are also the same in practice.

I suggest removing `repl_buffer_blocks` and instead just keeping the backlog structure."
714553605,9166,oranagra,2021-09-23T07:55:05Z,"it amended to the backlog, so now it may be too big, and we can trim the first node.
i.e. IIUC that's the place where we'll usually trim one node (if there are no slow replicas).
i suppose the comment should be improved."
714556271,9166,oranagra,2021-09-23T07:58:42Z,"the code is a bit awkward, it does `sds tmp = sdscatsds(head, dump);`, i.e. inserts into the head.
we're only printing the last 250 bytes (and only when bugs are found), so performance of stepping backwards and then forward again is not an issue.
i suppose clean short code is what we should aim for, if we wanna improve it."
714557576,9166,oranagra,2021-09-23T08:00:23Z,"we have some plans for monitors with filters (per user or key), and also monitors that can have additional data being logged (like the responses or errors and such).
i think we better leave them out of this."
714559534,9166,oranagra,2021-09-23T08:03:13Z,"i think it's nice that this detail of where the memory is stored and how is abstracted.
i.e. the caller (in this case CLIENT LIST) doesn't care, it just wants to know how much data the client has pending to be written, or how much memory it consumes."
714561135,9166,oranagra,2021-09-23T08:05:37Z,"yes, let's document that, and also big chunk of my previous comment, i.e. describe why not counting the backlog size would not cause a feedback loop concern."
714611157,9166,yoav-steinberg,2021-09-23T09:12:15Z,I'm for option 2 above. It's the most straight forward: simply how much memory is being used by the repl buffers (for backlog or replication). Avoid confusing the user with multiple stats which derive from a single mechanism.
714618854,9166,yoav-steinberg,2021-09-23T09:22:22Z,"As I mentioned in `getMemoryOverheadData` I think there's no real point in a separate stat for `getSlavesOutputBufferMemoryUsage` because what we really care about is the total backlog size. So from my perspective we can delete this function.

```"
714657369,9166,oranagra,2021-09-23T10:16:49Z,"we may need a tie breaker (or a 5th option).
@yossigo please weigh in (or call me for quick summary)."
714692281,9166,ShooterIT,2021-09-23T11:11:52Z,we already assert there is no replica.
714729507,9166,ShooterIT,2021-09-23T12:07:49Z,we already call clientHasPendingReplies before calling _writeToClient
714734119,9166,ShooterIT,2021-09-23T12:14:14Z,"in replicationCron, it is too slow. Initially i put it in replicationCron, it costed dozens of seconds for trimming replication backlog in my tcl tests. we free 1M buffer blocks per call, in beforeSleep, we free 10M"
714736690,9166,ShooterIT,2021-09-23T12:17:54Z,"Actually, i tried to did that, but i gave up. first, replication backlog don't need `ref_block_pos`, and this way make the variable very long. such as, we access `ref_repl_buf_node`, maybe `server.repl_backlog->repl_buf_ref->ref_repl_buf_block`

@oranagra  WDYT？"
714738739,9166,ShooterIT,2021-09-23T12:20:35Z,"This way breaks too many unnecessary places.
@oranagra  WDYT？"
714739793,9166,ShooterIT,2021-09-23T12:21:58Z,"i think we should keep it, we only have two places to modify `repl_buffer_mem`, but it makes getting replication buffer memory easy."
714741091,9166,ShooterIT,2021-09-23T12:23:49Z,"no, see the comments of `prepareReplicasToWrite`"
714742952,9166,ShooterIT,2021-09-23T12:26:21Z,"we must call it here, as oranagra said."
714748280,9166,ShooterIT,2021-09-23T12:33:13Z,"If we don't read, could we make sure that all data is completely sent?"
714756942,9166,ShooterIT,2021-09-23T12:42:52Z,">I understand the attempt to separate two concepts here: ""The replication buffer"" and the ""Backlog buffer"" but in reality they are exactly one and the same

Yes. Now I make replication backlog  always as the last reference of  `the replication buffer`. But i am not sure we could accept, maybe we want to keep replication backlog the same size with our setting.
"
714788707,9166,oranagra,2021-09-23T13:19:08Z,"i see 11 usages of one, and 18 usages of the other (which is not that many),
but more importantly, it looks like nearly any place that uses or sets them is also dealing with `server.repl_backlog_idx` (which we did change, so we'll be changing a block that we had to change anyway).

i think the only places that only care about these two and not the others are `masterTryPartialResynchronization` and `genRedisInfoString`, i.e. they care about the range, but not about the data.
so i'm willing to consider this suggestion as if it only affects two functions, so if we feel it makes the code cleaner, let's go for it.

i.e. the two things to avoid in such renames are blame log damage causing untraceable history (we modify many of these blocks anyway), and merge conflicts (with the two exceptions above, any fix touching these areas will have hard time being backported or merged to some odd fork anyway)"
714794767,9166,oranagra,2021-09-23T13:25:43Z,"since we don't have generic code that can act on that struct (common to both backlog and replica), i don't think this is a good idea.
even if we could extract a 2 line function that's common, i think doing that (both the extraction of the function, and the extraction of the struct members), would cause more confusion.

i combine this with Yoav's [suggestion](https://github.com/redis/redis/pull/9166#discussion_r714552608) to completely eliminate either the backlog reference or the head link to the buffer chain (a suggestion that i personally don't really like), makes me feel that this suggestion to unify the structs is probably not a good idea."
714800465,9166,oranagra,2021-09-23T13:31:37Z,@ShooterIT please add a comment that explains it.
714802826,9166,oranagra,2021-09-23T13:34:13Z,"we can run `$rd flush` to make sure it was sent, but not that it was received.
we could look at `INFO commandstats` to know it was received, but please explain why did you remove it?"
714825524,9166,oranagra,2021-09-23T13:57:57Z,"why did you add that?
is it because you wanna revert the creation of the backlog if rdb load fails or rdb file is missing?
i'm afraid that `access` and `open` will give different results.
or actually, we do have a plan to one day allow a module to provide an alternative to file system access.
i'll feel better if we can solve this differently, like destroy the backlog if no loading happened, or create it using some hook"
714839416,9166,ShooterIT,2021-09-23T14:12:53Z,"Because it makes maxmemory tests failed, current solution for replication backlog(blocks list) makes its exceed our setting.
And i think this change makes sense. if there is no rdb, we don't need to create backlog.
if rdb load fails, redis will exits. we allow redis run only if there is no rdb, of course, we can free replication backlog if errno is ENOENT later."
714844005,9166,oranagra,2021-09-23T14:17:26Z,"so i'd rather free it laster than use a different method to check if it exists ahead of time.

however, i didn't understand which test failed and why.. can you elaborate?"
714858756,9166,ShooterIT,2021-09-23T14:32:05Z,"```
/* We don't try trim backlog if backlog valid size will be lessen than
 * setting backlog size once we release the first repl buffer block. */
if (server.repl_backlog_histlen - (long long)fo->size <=
    server.repl_backlog_size) break;
```
so replication backlog may be about 32k even if we set 16k by default."
714865061,9166,oranagra,2021-09-23T14:38:21Z,and which test did it break? which assertion?
714865331,9166,ShooterIT,2021-09-23T14:38:36Z,"Here, i don't judge `listLength(server.slaves)`
only `if ((long long)server.repl_buffer_mem > server.repl_backlog_size) `
i.e. i still regard the part of exceeding backlog size as the consumption of replica because we don't trim replication backlog in time, to avoid eviction.

@oranagra do you think it make sense?"
714870520,9166,oranagra,2021-09-23T14:43:49Z,"yes, it makes sense to me..
specifically because the only reason there would be a very long list of excess nodes is when a replica dropped.
so had we counted the memory that's actually being used by replicas, as long as they're connected we'd ignore that memory, and as soon as they drop we run into a massive eviction loop.
let's document that too (i.e. that because the deletion is in the background, and has a delayed effect after a replica disconnects, we have to ignore it even if there are no replicas)"
714959851,9166,ny0312,2021-09-23T16:22:29Z,"It depends on how do we envision this global replication buffer list will be consumed in the long term. Are replica clients gonna be the only consumers of it? Or do we see this global list as a generic ""change data capture stream"" that will potentially have more use cases/consumers? If we do, then the redundancy will only grow. E.g. more ""consumer"" structs will need to define their own `ref_repl_buf_node` and `ref_block_pos` and potentially more metadata that ""describes"" a pointer/reference into the global list.

Just a thought.

re: `replication backlog don't need ref_block_pos`

Yes, replication backlog's `ref_block_pos` is virtually always `0`, but it can still have it. Doesn't hurt, and may allow us to control replication backlog size in finer granularity(not important though).

"
714961009,9166,ny0312,2021-09-23T16:24:01Z,I see. Thanks for explaining. I don't feel strongly either way as long as we document the reason why we put it here (e.g. for speed).
714976921,9166,ny0312,2021-09-23T16:45:05Z,This comment is marked as resolved without an response or code change.
714977230,9166,ny0312,2021-09-23T16:45:27Z,This comment is marked as resolved without an response or code change.
714977465,9166,ny0312,2021-09-23T16:45:44Z,This comment is marked as resolved without an response or code change.
714985445,9166,ny0312,2021-09-23T16:56:11Z,"`prepareReplicasToWrite` decides whether to install write handler for a replica based on if there is data on the replication buffer to send to it. 

Sorry probably a stupid question: Wouldn't it make more sense if we first add some data to the replication buffer then call `prepareReplicasToWrite`, to give ourselves a better chance to send the newly added data to replicas right away? Why we must call `prepareReplicasToWrite` before we add new data to the replication buffer?"
714987558,9166,ny0312,2021-09-23T16:58:55Z,"Makes sense. Thanks for the explanation.

re: `setting a replica output buffer limit that's lower than the backlog size is pointless`. Should we enforce this in the code(e.g. in `config.c`, verify this invariant is held whenever these two configs are changed)?"
714990081,9166,ny0312,2021-09-23T17:02:19Z,This comment is resolved without a response or code change.
714994958,9166,ny0312,2021-09-23T17:09:17Z, This comment is resolved without a response or code change.
714995365,9166,ny0312,2021-09-23T17:09:48Z, This comment is resolved without a response or code change.
714996809,9166,ny0312,2021-09-23T17:11:47Z, This comment is resolved without a response or code change.
715336486,9166,ShooterIT,2021-09-24T05:57:52Z,"@oranagra i make a mistakes, ignore my analysis above
we will get OOM error in this line  https://github.com/redis/redis/blob/unstable/tests/unit/maxmemory.tcl#L189 
i add `puts ""db9 [s db9] [s evicted_keys] [s mem_replication_backlog]""` before this line, i got this result
```
b9 keys=84,expires=84,avg_ttl=9999950 591 101524
db9 keys=85,expires=85,avg_ttl=9999950 591 101524
db9 keys=84,expires=84,avg_ttl=9999950 593 101524
db9  678 118444
```
in this test, we want to write about 96k data, but now replication backlog grows incrementally, i guess we only write 48k, and replication backlog also about 48k, and then we want to write the same number keys,  before we set maxmemory to `used_memory+100k`, so eviction would happen, replication backlog will be bigger, replication backlog is 1M by default, i don't count it inot `NotCountedMemory`, so server evicts all keys."
715357098,9166,ShooterIT,2021-09-24T06:46:11Z,"i just want to make sure that all data is received by server.

And i don't it is a good idea to keep this comment line, doesn't it have meaning?"
715377774,9166,ShooterIT,2021-09-24T07:25:07Z,"i think we needn't always add comments around all this assert. you could see this PR has more than one hundred conversation,  it is not easy to track more useful problem.
please forgive i couldn't follow your code style, i prefer to follow redis original style, every one has his code style, even i also don't like some original styles, maybe before style is not good, but i like to follow. I don't want to put energy in this things unless core team ask me to change, for style problems, i would like to respect the decision of core team just because they always are responsible for this project."
715378767,9166,ShooterIT,2021-09-24T07:26:44Z,"I have no idea, we need to fix it?"
715380376,9166,ShooterIT,2021-09-24T07:29:22Z,see the comments of prepareReplicasToWrite and prepareClientToWrite
715402249,9166,ShooterIT,2021-09-24T08:03:47Z,"> even in the previous versions, such a setting would mean that if a replica managed to use that backlog for PSYNC, it'll immediately get disconnected.

Yes, we always has this problem.

The season why I think we should keep `replication_backlog_size` and `client_output_buffer_limit for replicas` instead of only use `replication buffer` is that users could set them arbitrary, the network between master and replicas is generally fine,  so replicas output buffer is not always big. 

> after we put that invalid configuration aside, we can look at this PR as a simple optimization.

it seems an easy and effective way."
715408357,9166,ShooterIT,2021-09-24T08:13:04Z,"it seems that `repl_backlog_size` shouldn't be in it, since it is a configuration.
i don't reject idea, actually, according to OO, we should do that. i didn't it before since redis likes put them separately..."
715415229,9166,oranagra,2021-09-24T08:22:40Z,"ok. one could argue that this test is over sensitive. if the test was using a replicated pair of servers, we would have had to change the test.
but since the test isn't using replication, and isn't loading an RDB (like many others), let's try to make the memory usage more predictable for them.
i.e. in the past (before Soloestoy's recent change), there was on replication backlog in these tests.
then the backlog was added, but its memory consumption was constant, so this test didn't notice.
now its memory consumption gradually grows, and that breaks the test.
let's make sure to avoid creating the backlog in that case, or create it and then destroy it if not needed.

but i don't like the current solution.
the better one IMHO is that if we didn't set `server.master_repl_offset` from `rsi.repl_offset` (or didn't load an rdb file at all), then we should destroy the backlog."
715418806,9166,oranagra,2021-09-24T08:28:01Z,"ohh, i'm reading it backwards. you didn't comment this line, you uncommented it.
why was it commented???
looks like it was commented in the original commit that added that test: bf680b6f8c
i have no clue why. probably a mistake."
715421114,9166,oranagra,2021-09-24T08:31:17Z,"i always prefer smaller diffs and less damage to the blame log.
try the re-order i suggested above, and compare to the merge-base, see if that re-order makes a smaller diff (don't change unchanged lines).
if it works, keep it, if not, let's forget about it."
715426725,9166,oranagra,2021-09-24T08:39:28Z,"p.s. we can't enforce one config to be greater than the other at config.c, because we don't know at which order they'll be changed.
what we can / should do, as Yoav suggested in another comment is that when we consider the replica-buffer limit, we `max()` it with the backlog size, so that setting it to a lower value will be meaningless.
plus a big comment in the code explaining why it's invalid (psync will succeed and then drop the replica), and maybe a mention of that fact in redis.conf."
715445088,9166,ShooterIT,2021-09-24T09:05:34Z,"I updated commits, but it seems i forget to handle invalid `rsi.repl_offset`"
716158995,9166,oranagra,2021-09-26T07:37:42Z,"```suggestion
     *
     * Note that although the backlog is also initially incrementally grown
     * (pushing DELs consumes memory), It'll eventually stop growing and
     * remain constant in size, so even if its creation will cause some
     * eviction, it's capped, and also here to stay (no resonance effect)
     *
```"
716160190,9166,oranagra,2021-09-26T07:47:28Z,"```suggestion
     * our setting when we add replication stream. Note that it is important to
     * try to trim at least one node since in the common case this is where one
     * new backlog node is added and one should be removed. see also
     * freeMemoryGetNotCountedMemory. */
```
"
716160869,9166,oranagra,2021-09-26T07:53:02Z,"```suggestion
# This test group aims to test that all replicas share one global replication buffer,
# two replicas don't make replication buffer size double, and when there is no replica,
# replica buffer will shrink.
```"
716160981,9166,oranagra,2021-09-26T07:53:45Z,"```suggestion
# This test group aims to test replication backlog size can outgrow the backlog
# limit config if there is a slow replica which keep massive replication buffers,
# and replicas could use this replication buffer (beyond backlog config) for
# partial re-synchronization. Of course, replication backlog memory also can
# become smaller if slow replicas disconnect.
```"
716161886,9166,oranagra,2021-09-26T08:00:58Z,"what do you mean?
p.s. an alternative approach to what you took, is that instead of integrating the release of the backlog in the if-else chains of the loading, you can just add an `if (server.master_repl_offset == 0)` at the very end."
716562112,9166,yoav-steinberg,2021-09-27T10:27:51Z,"Note that client-eviction is only on ""normal"" clients (not replicas) so there probably isn't any issue here."
716566620,9166,yoav-steinberg,2021-09-27T10:34:44Z,"Looking at the code I see this is called **before** client eviction takes place, so I think we're good."
718542981,9166,yossigo,2021-09-29T13:57:20Z,"My take on this is it really depends if the user is trying to figure out how memory is utilized, or figure out how replication is doing. @oranagra pointed out that it's expected that `INFO memory` would focus on memory usage because more detailed replica information can be accessed by `INFO replication` or `CLIENT LIST`. If we follow this reasoning then [4] makes sense.

The main arguments I see against option [4] are:
* It's usually best to expose raw metrics and not computed ones
* Changing the meaning of an existing metric is bad practice.

Perhaps a 5th option is [4] but using a different field name to indicate we're exposing the extra memory that does not overlap the backlog."
718553697,9166,oranagra,2021-09-29T14:08:07Z,"@yossigo so in 5, your not suggesting to rename them (would break backwards compatibility), you're suggesting to add an additional field that states that these are computed ones.
we do already add a new field (the total size of all replication buffers), from the presence of this field one can conclude that the other two are computed."
724811933,9166,oranagra,2021-10-08T08:33:32Z,"So @yossigo considering that there is a new field for the new total memory of all replication buffers, can I conclude that your 5 is the same as my 4?"
725586960,9166,yossigo,2021-10-10T06:34:15Z,"@oranagra no, I was suggesting that if we do use a computed value we should rename the field to avoid a situation where the same metric describes different things in different versions."
725591971,9166,oranagra,2021-10-10T07:18:51Z,"@yossigo but that defeats the purpose of computing them (in a way that will in some way retain backwards compatibility).
i.e. the whole purpose was that if we compute them this way, existing code will (probably) be able to use them the same.
but if we rename them, there's no point in doing that.

since the old values are impossible to get, i think this is the only way to achieve backwards compatibility.
if we're gonna rename them, we might as well leave them raw and break any existing monitoring software that depended on the old ones."
726105265,9166,yossigo,2021-10-11T13:12:06Z,"@oranagra this makes sense - so I support option [4]. Normally I'd say we'd better off NOT to compute fields or change what they mean, but given that `INFO memory` is probably used to analyze how memory is used rather than observe replication behavior I think that makes sense."
727795364,9166,ShooterIT,2021-10-13T07:54:08Z,"@oranagra i think you may want to compare `server.repl_buffer_mem` and `server.repl_backlog_size` instead of `server.repl_backlog_histlen`, since now `server.repl_backlog_histlen` is always near `server.repl_buffer_mem`"
727959849,9166,oranagra,2021-10-13T11:23:06Z,"maybe we still want to use the old way of computing the total memory (rax, nodes and all), and then apply the if-else logic on the result?"
727985136,9166,ShooterIT,2021-10-13T11:58:56Z,"now the replication backlog memory size always is more than `repl_buffer_mem` by this way.

you want to consider the nodes, rax node size of the backlog part which is not more than setting?"
728029363,9166,oranagra,2021-10-13T12:53:03Z,"i want all the memory to be accounted one way or the other.
maybe add the portions of these that are not currently accounted, after the `if-else` into one of the two?
i.e. add the rax and block list to the backlog memory?"
728585586,9166,ShooterIT,2021-10-14T02:37:01Z,"in current code, we consider block list into `mem_clients_slaves`, so we add the rax  into backlog memory."
728692657,9166,oranagra,2021-10-14T07:05:44Z,yes
728693967,9166,oranagra,2021-10-14T07:08:01Z,@ShooterIT IMHO this one still needs to be done.
728695371,9166,oranagra,2021-10-14T07:10:18Z,@ShooterIT can you implement the `max()` design suggested above?
728695905,9166,oranagra,2021-10-14T07:11:11Z,and maybe also add some documentation about the reason (both code and maybe redis.conf if you find a place for it)
728776833,9166,ShooterIT,2021-10-14T08:56:02Z,"oh, but i think `repl_` prefix also is not clear, from you comments, how about `replica_` prefix, a little long.

are current comments clear?  i already changed some comments "
728781248,9166,oranagra,2021-10-14T09:01:28Z,"looking at the last version i guess that's clear enough (also less variables so maybe no need for a block comment above the group).
maybe just add `repl_` to `ref_block_pos`?
anyway, do what feels right to you.. not a critical thing.."
728801201,9166,ShooterIT,2021-10-14T09:26:26Z,"oh, i ever thought you want us to implement it in other PR. Let me do it."
728819948,9166,oranagra,2021-10-14T09:49:54Z,"other PR is ok with me too.. but i'm afraid to forget, and this one seems to be a good opportunity to handle it.
just be sure to also document it and it's reasoning (code, redis.conf, and top comment)"
729942386,9166,ShooterIT,2021-10-15T15:56:02Z,"i want to keep `ref_` prefix which is the same with `ref_repl_buf_node` prefix
"
730383405,9166,oranagra,2021-10-17T09:22:54Z,"I think this is too detailed, IMHO it should be enough to say:

```suggestion
# Note that it doesn't make sense to set the replica clients output buffer
# limit lower than the repl-backlog-size config (partial sync will succeed
# and then replica will get disconnected).
# Such a configuration is ignored (the size of repl-backlog-size will be used).
# This doesn't have memory consumption implications since the replica client
# will share the backlog buffers memory.
```
"
730384078,9166,oranagra,2021-10-17T09:28:34Z,"i thought we'll do this: (i think it's also cleaner)
```c
size_t hard_limit_bytes = server.client_obuf_limits[class].hard_limit_bytes;
if (class == CLIENT_TYPE_SLAVE && hard_limit_bytes < server.repl_backlog_size)
    hard_limit_bytes = server.repl_backlog_size;
```
then just use hard_limit_bytes instead of `server.client_obuf_limits[class].hard_limit_bytes`

WDYT?"
730384772,9166,oranagra,2021-10-17T09:34:00Z,"i think it's just enough to mention why we skip part of the check
```suggestion
    /* Note that c->reply_bytes is irrelevant for replica clients (they use the global repl buffers). */
```"
730385059,9166,oranagra,2021-10-17T09:36:02Z,why did you remove the reference to the eviction code? i think it may be useful
730428252,9166,ShooterIT,2021-10-17T14:53:48Z,"yes, it is clearer"
730431658,9166,ShooterIT,2021-10-17T15:18:06Z,"when i reviewed code, i thought it is not much related with `freeMemoryGetNotCountedMemory `, i forgot why i added it, you think they are related?"
730432561,9166,oranagra,2021-10-17T15:24:39Z,"I think i was trying to say that this is related to the feedback loop concern when DEL commands are added to the backlog during eviction.
i was probably trying refer to the big comments we added there.

maybe it should be even be: `see comments in freeMemoryGetNotCountedMemory for details`
i.e. not to refer to the function, but rather to the comments there explaining what would happen when the backlog grows."
735112560,9166,yossigo,2021-10-24T12:34:40Z,"```suggestion
void lazyFreeReplicationBacklogRefMem(void *args[]) {
```"
735112741,9166,yossigo,2021-10-24T12:36:15Z,"```suggestion
     * (pushing DELs consumes memory), it'll eventually stop growing and
```"
735112810,9166,yossigo,2021-10-24T12:36:50Z,"```suggestion
     * backlog size may exceed our setting if slow replicas that reference
```"
735114007,9166,yossigo,2021-10-24T12:46:28Z,"```suggestion
        bioCreateLazyFreeJob(lazyFreeReplicationBacklogRefMem,2,blocks,index);
```"
888266903,10517,madolson,2022-06-02T18:28:49Z,BLOCKED_WAIT_RERUN seems like BLOCKED_POSTPONE with a timeout. So perhaps we should investigate if it makes sense to merge those too. I would prefer to have fewer assumptions to maintain.
1101071638,10517,oranagra,2023-02-09T07:32:42Z,"i think this change steps on the toes of #11012 and must be rebased and re-evaluated after.
see the now existing `client_reprocessing_command`.
@ranshid FYI"
1101074238,10517,oranagra,2023-02-09T07:36:18Z,"i'm not sure it was necessary to extract these to a function, in #11012 we decided not to move it out and not to indent them all (just re-run some validations that may not be necessary).
but also, maybe some of these are wrong to skip, like the check about busy_module_yield_flags.

p.s. if we keep this change, ""validate"" may not be right, maybe ""prepare"" is better see e.g. moduleCallCommandFilters, and also, maybe the top comment still belongs to processCommand.

but anyway, i think after rebase we need to see if this change is still needed."
1101076176,10517,oranagra,2023-02-09T07:38:46Z,"maybe i don't understand the purpose of this function though.
i thought it's about command lookup, arity checks and other basic things that don't need to be re-evaluated when executing it the second time, but i now see that ACL checks are here too."
1101080041,10517,oranagra,2023-02-09T07:43:26Z,"i see you've reset it in `rejectCommand`, and here, but shouldn't it be cleared after every command we've executed (successfully)?
actually, rejections (e.g. OOM). and MOVED, just mean that we actually processed the command (replied to it).
so it's actually the job of `commandProcessed` or `resetClient`.

but then again, maybe this whole change isn't needed now (since this can be handled the same way as #11012)"
1101081741,10517,oranagra,2023-02-09T07:45:35Z,let's avoid the mass of unnecessary white space changes.
1102076169,10517,madolson,2023-02-09T22:12:32Z,Is this much difference between this and CLIENT_PENDING_COMMAND?
1102079162,10517,madolson,2023-02-09T22:15:05Z,Is this actually stabilized with your changes?
1102083242,10517,madolson,2023-02-09T22:19:34Z,"I missed the discussion about having a separate function that validates the high level construction of the command. I think it make sense to split out a validation function, that doesn't include module command filters. "
1102084873,10517,madolson,2023-02-09T22:22:02Z,"I would bump this to notice, we did this at AWS and never contributed it. It's not strictly a warning, but it definitely should get logged by default. I think we should all remove the all caps `WARNING`. "
1102085454,10517,madolson,2023-02-09T22:22:47Z,"n->slaveof should imply nodeIsSlave(n)
```suggestion
    return n->slaveof ? n->slaveof->configEpoch : n->configEpoch;
```"
1102087551,10517,madolson,2023-02-09T22:25:43Z,"```suggestion
            argv[2] = createStringObjectFromLongLongForValue(slot);
```"
1102089207,10517,madolson,2023-02-09T22:28:12Z,"Not sure I fully get why we would replicate the slots here as opposed to in the RDB so the replica comes up knowing the slots. I also presume there are implications here related to the replication buffer now having information that diverges between nodes. Some specific concerns about this:
1. The replica is already technically online and serving data at this point, so it won't have correct state.
2. I'm not sure we've fully thought through all the ways the clusterbus can propagate data at different rate than the replication stream, and how that might play with failovers."
1102090931,10517,madolson,2023-02-09T22:30:55Z,Odd spacing here. Also is this a bug fix?
1102095511,10517,madolson,2023-02-09T22:38:06Z,"They do this today, but there is no enforcement or test asserting this behavior. Do we need to take a dependency on this assumption and/or can we add some validation here?"
1102099355,10517,madolson,2023-02-09T22:44:08Z,"```suggestion
        /* When all our slots are lost to the sender and the sender belongs to
         * a different shard, this is likely due to a client triggered slot
         * migration. Don't reconfigure this node to migrate to the new shard
         * in this case. */
```"
1102100923,10517,madolson,2023-02-09T22:46:40Z,"Why is this a warning? This seems like a fairly minor event, this node is just acknowledging another failover."
1102104596,10517,madolson,2023-02-09T22:52:38Z,"Isn't this logic already in clusterUpdateSlotsConfigWith ? EDIT: looks like victor wrote that after you did, oops."
1102121723,10517,madolson,2023-02-09T23:18:03Z,"I'm not entirely clear why this can't just be a `WAIT` command issued by the client for now. I feel like there is some interesting ideas here about having having deep support in Redis for commands that wait for replicas to process them before acknowledging and applying them locally, but I'm not sure we need that here."
1102527985,10517,zuiderkwast,2023-02-10T09:48:48Z,"With the changes in this PR, it looks like 1 only happens if myself is a replica, so maybe mention that too? A master left without slots doesn't jump to another chard."
1102529201,10517,zuiderkwast,2023-02-10T09:50:03Z,"We'll need to update the documentation with this new behaviour. At least redis.conf mentions this

```
# Turning off this option allows to use less automatic cluster configuration.
# It both disables migration to orphaned masters and migration from masters
# that became empty.
#
# Default is 'yes' (allow automatic migrations).
#
# cluster-allow-replica-migration yes
```"
1102535801,10517,zuiderkwast,2023-02-10T09:56:27Z,"I never understood why a master who lost its last slot does this, but I didn't dare changing it.

In the use case of scaling down the number of shards, you migrate the slots away from a shard and then take down the nodes. Then, when you think the node is empty, it starts replicating another master just when you want to take it down. Very weird. It's good we're dropping that behaviour. (In this scenario, you'd not want the replicas to migrate either, but to stay in the empty shard... A workaround is to disable replica migration on the nodes in the shard before emptying the shard.)"
1102562324,10517,zuiderkwast,2023-02-10T10:17:40Z,"Hehe, I don't know who wrote it first. I wrote something in April and something more in September. Here it seems that this check is just moved around within the file. Ping's detailed scenario explanation is new though."
1102566131,10517,zuiderkwast,2023-02-10T10:21:12Z,"Trailing space within the warning.

```suggestion
                                    ""assigned to another node."", j);
```"
1102977434,10517,madolson,2023-02-10T16:33:10Z,"Yeah, I like the explanation, we should definitely keep that around."
1102979123,10517,madolson,2023-02-10T16:34:49Z,"I guess this also isn't strictly necessary, but it seems like we copy this around all over the place."
1105062792,10517,madolson,2023-02-13T22:01:20Z,"Are we sure people haven't built tooling around this state management anyways? My understanding is that the redis-cli doesn't handle these failure modes todays, so it's unclear why we're trying to preserve them on the server side."
1105064766,10517,madolson,2023-02-13T22:03:54Z,Should we clear the data out if we aren't going to import it? Otherwise we just have random stale data.
1105069170,10517,madolson,2023-02-13T22:09:38Z,"An alternative is we could have some threshold after which if a node is importing data, and no other node in the cluster owns that data, we just take ownership of the slot. This removes the need for complex state handling with the replica."
1105074883,10517,madolson,2023-02-13T22:17:20Z,"Made related comment elsewhere. I'm not convinced we need this blocking code, but if we do we should try to align the various blocking approaches more."
1105075287,10517,madolson,2023-02-13T22:17:53Z,Going to poke again to put stuff in the tests/unit/cluster so they run as part of the CI.
1105076132,10517,madolson,2023-02-13T22:19:01Z,Seems like some extra code.
1105076439,10517,madolson,2023-02-13T22:19:27Z,More extra code.
1105077352,10517,madolson,2023-02-13T22:20:45Z,Usage of namespaces isn't very clear since you just reference them as if they were just normal variables.
1105078602,10517,madolson,2023-02-13T22:22:34Z,"Maybe use ""get_cluster_nodes"" so that it's formatted into a dict instead of an array."
1105084141,10517,madolson,2023-02-13T22:30:08Z,This also makes me think more that the replicas should have their own perceived state about on going slot migrations that is driven through the replication stream and not here. 
1105085336,10517,madolson,2023-02-13T22:31:32Z,"Stylistically we normally do this for readability:

```suggestion
        areInSameShard(sender, myself))
    {
        newmaster = sender;
```
If the conditional is long and multi-line. "
1105087676,10517,madolson,2023-02-13T22:34:51Z,This is also misindented.
1105336835,10517,PingXie,2023-02-14T06:14:15Z,yep that is the idea behind single-sourcing. suggestion incorporated.
1105336913,10517,PingXie,2023-02-14T06:14:25Z,"It is not a clear cut to me whether this should be `WARNING` or `NOTICE`. I can see both sides of the argument. Since you mentioned one side, I will add the counter argument here which is ""any consensus-less based epoch bump risks data loss"" and it is in this sense that I think `WARNING` sends the right signal to the admins. That said, I am also fine with `NOTICE` so I lowered the log level to `NOTICE`. Curious to hear the community's thoughts. "
1105349593,10517,PingXie,2023-02-14T06:34:59Z,"I think we have enough information here to make the right call and keep the cluster as consistent as possible. Tooling implies human operators, which brings in human errors and delays so IMO last resort."
1105361211,10517,PingXie,2023-02-14T06:52:13Z,"Is your suggestion to wait for the replication to restart and then fix the migrating target? If so, there will be an availability issue for the keys caught in the middle as they will be redirected to the wrong node until the migrating state is fixed, which is one of the problems this PR is trying to address."
1105362569,10517,PingXie,2023-02-14T06:53:41Z,Sorry I keep forgetting about the multi-line style.
1105369381,10517,PingXie,2023-02-14T07:00:29Z,done
1105379430,10517,PingXie,2023-02-14T07:07:57Z,updated. Actually I think I missed the is_replica check on `myself` - added the check now.
1105388433,10517,PingXie,2023-02-14T07:14:53Z,"Are you referring to case 2? I don't think it is a new behavior. It is a more reliable/predictable implementation of an existing behavior IMO. More specifically, we had 2.1 before but it was based on slot count (lost_count == found_count). 2.2 manifested in a chained primary/replica relationship that we'd resolve later on. "
1105396751,10517,PingXie,2023-02-14T07:25:01Z,"Yeah, an even worse situation could happen IMO if somehow a failover, either manual (due to bugs/human errors) or automatic, races ahead of your attempt to take it down and now we have an application whose Redis connections/requests get dropped. It is a rare case but when we are talking about the Redis user base, small probability events can happen."
1105430286,10517,PingXie,2023-02-14T08:02:42Z,"When I added these new trace statements, I was thinking that all topology change events are important and worth extra attention because they are not expected on a steady cluster (modulo rolling upgrades and slot migrations, of course). Now mulling over this some more, I think what I really wanted is a way to easily filter out all topology change events; whether or not these events are `WARNING` or `NOTICE` is actually less important to me. Would it work if I use a prefix for all these messages, say `TOPOLOGY:`? "
1105432516,10517,PingXie,2023-02-14T08:05:20Z,The folding logic is written by Victor. I moved it around with some explanation. 
1105432974,10517,PingXie,2023-02-14T08:05:51Z,done
1105433200,10517,PingXie,2023-02-14T08:06:09Z,Sorry bad merge
1105451562,10517,PingXie,2023-02-14T08:24:23Z,I ran the entire cluster test suite including the new tests in a loop over 20 times without issues for last Nov's [commit](https://github.com/redis/redis/pull/10517/commits/9191e45016bf1a26664c79e0aa8e4ddbfea612cc). 
1105508260,10517,zuiderkwast,2023-02-14T09:15:45Z,"This log notice looks like a reference to the changes in this PR. Perhaps we should log something that's more useful for the admin? And I think we should say who ""the sender"" is using `sender->name` (%.40s) like in other log entries.

Perhaps something like *""My last slot was migrated to %.40s. I am now an empty master.""* ?

The term ""empty master"" can be useful since it's used under https://redis.io/docs/management/scaling/#remove-a-node."
1106158564,10517,madolson,2023-02-14T17:48:13Z,I think this was our updated guidance we haven't merged yet: https://github.com/redis/redis/pull/10715
1106165349,10517,madolson,2023-02-14T17:54:39Z,"I tried to deep dive into this behavior, and the best thing I can really come up with was that Salvatore originally envisioned the cluster as just a collection of nodes that are either, ""participating"" in the cluster or ""staged"" to enter the cluster. Moving between these states is always an operator action. So it makes sense that a master would continue to participate by becoming a replica of something.

Either that or we never thought about it that much :) I'm also fine with the new behavior."
1106189305,10517,madolson,2023-02-14T18:15:45Z,"Tooling doesn't mean human operators. When resharding is happening, I am assuming people are using tooling to assist with the reshard since it's hard to orchestrate on your own. I want to understand how that behaves with all of these states. More so because we should fix bugs there. 

Since we aren't self-recovering from these errors, just trying to move everything into a more consistent state, I care more about a human coming in and recovering. If they had a procedure which now no longer works, I would like us to understand that. Hopefully this just makes all the recovery easier."
1106686498,10517,PingXie,2023-02-15T06:06:00Z,">Hopefully this just makes all the recovery easier.

Right this is the goal with this PR. With this PR, the server can always park in an intermediate-yet-consistent state as if the re-sharding has paused gracefully despite primary failures. I believe the recovery is made much easier with this PR. Even better, admins are no longer under the pressure to fix a broken cluster immediately because the cluster will continue to function properly, though at a reduced capacity (due to extra hops)."
1106711801,10517,PingXie,2023-02-15T06:42:25Z,"The two flags are indeed close but there are some properties I couldn't get from `CLIENT_PENDING_COMMAND`. For instance, I need to determine whether the `CLUSTER SETSLOT <SLOT> NODE <NODE ID>` command is being executed for the first time (prior to replication) or for the second time (after replication is complete). That said, I also don't like the significant overlap between the two. I have reworked the code to converge on `CLIENT_PENDING_COMMAND`."
1106758138,10517,PingXie,2023-02-15T07:46:20Z,"Yep - I can see that the `CLIENT_RERUN_COMMAND` flag unnecessarily couples several unrelated tasks, which was not intended. I have removed this flag and converged on `CLIENT_PENDING_COMMAND`, as suggested by Madelyn as well."
1106858544,10517,PingXie,2023-02-15T09:18:01Z,"I renamed the new block state to `BLOCK_WAIT_FOR_REPL`. Conceptually speaking, I think the new block state is more like a combo of `BLOCK_WAIT` and `BLOCK_POSTPONE`. More specifically, a command is blocked behind this replication so we will need to control what to reply (actually none) when the replication is completed. "
1106860961,10517,PingXie,2023-02-15T09:20:11Z,"Madelyn, I think you are referring to the new *CLIENT* flag as opposed to the blocking code. I have removed this client flag but I think we will need a new blocking code that allows us to express the new contract of *resume the pending command after the command is replicated*."
1106868410,10517,PingXie,2023-02-15T09:26:25Z,"The functionality in question is similar to that of the WAIT command, but there is a crucial difference. The WAIT command is intended for use by real clients, so when it completes, the replication status must be returned to the client that issued the original WAIT command. In contrast, in this case, the server must consume the replication status and continue executing the pending command. Initially, I considered building the new WAIT* functionality on top of the existing WAIT command handling logic, but I ultimately concluded that it would be cleaner to introduce a new WAIT* contract instead."
1107706371,10517,PingXie,2023-02-15T20:48:21Z,Okay I think I know where my confusion is coming from. The config name didn't tell the whole story that it also allows an empty primary to become replicas of the primary that takes away its last slot. The new behavior is IMO more intuitive and better aligned with the config name. I will update the text next.
1107792547,10517,madolson,2023-02-15T22:22:23Z,Adding topology is fine. We probably should add some standard about labeling of log messages anyways.
1107799631,10517,madolson,2023-02-15T22:31:00Z,"I want to make sure we've exhausted the solution space before starting to go down this path, I really don't want a pseudo synchronous mechanism hanging out in the engine given the complexity. My understanding is that we are doing this so that we handle cases where neither A or A' own the slot anymore but B died, but my understanding is we can reconcile those states without this replication mechanism by just having B take ownership after some threshold. That seems more inline with the general reconciliatory nature of Redis cluster. I also think it will be better handled in the cluster V2 world, since the TD will issue the updated state.

I believe this was discussed here: https://github.com/redis/redis/issues/6339#issuecomment-1088211873."
1107802991,10517,madolson,2023-02-15T22:35:23Z,"> Right this is the goal with this PR.

Are there any such states where automation might take incorrect actions that were previously acceptable. Such as if a migration failed part way through it might have just finalized the states? Or are we assuming that all automation probably wasn't handling these modes."
1108122176,10517,zuiderkwast,2023-02-16T07:53:47Z,"There is an `assert_no_match` function to use for checks like this.

Btw, this code only checks that it's not a replica of the $owner node. Not ""any other nodes"" as said in the comment. We could check ROLE on the new node instead."
1108189647,10517,oranagra,2023-02-16T09:01:29Z,"can't we either use BLOCKED_WAIT for this purpose, or even abandon the implicit blocking and instruct the client (redis-cli) to issue a WAIT command?"
1108201118,10517,oranagra,2023-02-16T09:12:09Z,"now that we're rebased, why do we need this change?"
1108204397,10517,oranagra,2023-02-16T09:15:04Z,removing this will also revert all the complications you added around CLIENT_PENDING_COMMAND in replication.c and blocked.c (will actually leave these two files unmodified)
1109358372,10517,PingXie,2023-02-17T06:41:02Z,`redis-cli` worked in my previous tests but I can double check. Is there any other automation tool that you would recommend validating as well?
1109368702,10517,PingXie,2023-02-17T06:59:12Z,"What do you think if we add a `COMPONENT` parameter to `serverLog` with predefined `COMPONENT` integer values that map to strings such as `CLUSTER`, `SERVER`, `MISC` (for catch-all), etc? I can create a bug to take care of this ""componentized"" logging improvement if this sounds interesting. This way, admin can easily zoom in a particular area of the server. For now, I will drop the logging level to `NOTICE` and not add any one-off prefixes or suffixes.  

"
1109375925,10517,PingXie,2023-02-17T07:11:19Z,">no other node in the cluster owns that data

This is the tricky part to get right reliably.

1. This is talking about a non-consensus based decision. what if the cluster was partitioned around the same time and the original owner was out of touch temporarily? 
2. How does the importing node know definitely within a deterministic time window that no one else owns the slot?
3. Until the ownership is fixed, the slot in question is unavailable.

While this PR may add some complexity, I believe it's justified since it solves the problem at its core and provides the necessary determinism. "
1109380387,10517,PingXie,2023-02-17T07:18:13Z,I assume your comments refer to the 1s timeout - I was looking at this from the failure side. I think it is OK for the request to timeout and fail as long as we don't leave the cluster in a consistent state. I don't consider that the timeout must never happen. I can rephrase the timeout callout and clarify if that is what you are concerned about.
1109387839,10517,PingXie,2023-02-17T07:29:24Z,">I really don't want a pseudo synchronous mechanism hanging out in the engine given the complexity

Wanted to clarify that the synchronous behavior materializes on the client who issued the request in the first place. It is not so much different than the case where the client issues `WAIT`.

>My understanding is that we are doing this so that we handle cases where neither A or A' own the slot anymore but B died, but my understanding is we can reconcile those states without this replication mechanism by just having B take ownership after some threshold. 

I think this is the same question raised in this [comment](https://github.com/redis/redis/pull/10517/files#r1105069170). I have provided my response there. Please take a look.

>I also think it will be better handled in the cluster V2 world, since the TD will issue the updated state.

If the community is willing to wait for cluster V2, I agree it is a fair proposal to consider won't-fixing this SPOF issue in cluster V1."
1110165801,10517,PingXie,2023-02-17T18:08:25Z,">Not sure I fully get why we would replicate the slots here as opposed to in the RDB so the replica comes up knowing the slots.

IIUC, we don't save the migration states in the RDB file, correct?

>1. The replica is already technically online and serving data at this point, so it won't have correct state.

We can look at this state from the other angle - what could happen if there exist a window when the two nodes (primary and replica) don't agree on the migration states? First of all, we are currently in a perpetual inconsistent state; second, the inconsistent window will be small with this PR; third, if the primary crashes before the migration state has been replicated, it is either the same situation as before this PR or if there is already other replica in the shard, we have a chance to replicate the migration state again. Overall, it is not a more incorrect than what we have now and I would say it improves a lot. 

>I'm not sure we've fully thought through all the ways the clusterbus can propagate data at different rate than the replication stream, and how that might play with failovers.

FWIW, we are not dealing with a cluster wide consensus on this path. This is merely replicating states among nodes in the same shard, which is not much different than data replication, conceptually speaking. I am not sure if I understand your concern about the potential interference with clusterbus/failover? Can you elaborate a bit more? "
1110169236,10517,PingXie,2023-02-17T18:11:42Z,I think this is the same question @madolson raised in this [comment](https://github.com/redis/redis/pull/10517/files#r1102121723). I have provided a response [here](https://github.com/redis/redis/pull/10517/files#r1106868410). Please take a look.
1110171440,10517,PingXie,2023-02-17T18:14:00Z,done
1110182316,10517,PingXie,2023-02-17T18:24:34Z,done
1110493352,10517,PingXie,2023-02-18T02:03:04Z,"Yes this change is no longer needed after rebasing. That said, I'd vote for keeping the validateCommand function (separation of concerns) but I am fine reverting this change if there is a consensus. "
1110493922,10517,PingXie,2023-02-18T02:03:41Z,Will do after closing the high level discussions
1110517842,10517,PingXie,2023-02-18T02:30:57Z,downgraded to `NOTICE` (and in other similar places)
1110518937,10517,PingXie,2023-02-18T02:32:15Z,"comments updated to clarify that ""1000ms"" is not a dependency for correctness."
1110539782,10517,PingXie,2023-02-18T03:13:46Z,Agreed. This does sound like a logical thing to do. Updated.
1110540721,10517,PingXie,2023-02-18T03:15:41Z,Good point - `role` check added.
1110603295,10517,PingXie,2023-02-18T05:01:27Z,resolving since the other [thread](https://github.com/redis/redis/pull/10517/files#r1102121723) has more context. Let's continue the discussion there.
1111265562,10517,oranagra,2023-02-19T15:49:44Z,"so you need that because you want a command to be executed half way (propagating something, or initiating replication), then get blocked on a replication offset, and then when the repl_offset matches, the second half of the command is getting executed?
it seems a bit against the concept of ""command"" in redis (being atomic), maybe we should somehow split that into two commands and issue a WAIT in between (sending them in pipeline)?

i didn't dig into the changes in cluster.c, so correct me if i'm wrong.
if we somehow give that up, we can revert nearly / all changes to blocked.c, replication.c, server.h, and server.c."
1112673525,10517,PingXie,2023-02-21T07:48:46Z,">so you need that because you want a command to be executed half way (propagating something, or initiating replication), then get blocked on a replication offset, and then when the repl_offset matches, the second half of the command is getting executed?

Not really. What I need is essentially ""synchronous replication"" such that the command is first executed on the replicas and only upon successful replication gets executed on the primary. 

>it seems a bit against the concept of ""command"" in redis (being atomic), maybe we should somehow split that into two commands and issue a WAIT in between (sending them in pipeline)?

The command is still executed as an atomic unit so atomicity is upheld. The new thing is the ""synchronous replication"", which has not been done before.

The command in question here is `cluster set <slot> <node>`. The idea is to maintain backward compatibility with the existing slot migration protocol which always sends the command to the primaries. An alternative would be to have the admin finalize the slot ownership on the replicas explicitly. This is unconventional IMO and places more burden on the admin side. 

I am not sure how to break the command apart into two parts. It is the execution order (primary after replicas) that this PR is trying to address.

>i didn't dig into the changes in cluster.c, so correct me if i'm wrong.

No worries. There are two SPOFs this PR is trying to solve. One happens during the slot migration and the other happens during the slot ownership finalization. The first one is mitigated by replicating the migration states to replicas either at the slot migration staring time and whenever a new replica comes up online. The second one is the one that requires the ownership to be finalized on the target replicas (if any) first, then on the target primary, and finally on the source shard, where the execution order between source primary and source replicas isn't material. This is the only order that would prevent a SPOF caused by a target primary crashing shortly after broadcasting its ownership to the cluster but target replicas getting stuck in the `IMPORTING` state.  This [link](https://github.com/redis/redis/issues/6339#issuecomment-1088211873) has the details for the second SPOF.
"
1112704441,10517,oranagra,2023-02-21T08:18:22Z,"i rather revert it.
first to avoid unnecessary merge conflicts between branches and forks.
secondly, i think some of the code in this function in your current for is misplaced, like module command filters, or other things that may need to be re-processed.
lastly, if / when we do have to do some similar change due to some future project, the fine details of what needs to be in this function vs the outer one and it's name and role may be slightly different, so we'll have to modify things anyway, so why do it twice..."
1113313101,10517,madolson,2023-02-21T16:37:27Z,"I think per component logging is a good idea. Probably out of scope for this PR, just so we don't forget it I created the issue: https://github.com/redis/redis/issues/11825. "
1113482156,10517,madolson,2023-02-21T19:25:05Z,"> what if the cluster was partitioned around the same time and the original owner was out of touch temporarily?

This is only a problem for availability, since it should still know about the ownership in the other slots. If as far as the node knows, it doesn't own the slots so it won't take anything over.

> How does the importing node know definitely within a deterministic time window that no one else owns the slot?

We don't know anything definitely, we have no strong forms of consistency without cluster v2.

> Until the ownership is fixed, the slot in question is unavailable.

This is true.

> I believe it's justified since it solves the problem at its core and provides the necessary determinism.

I know I've stated this before, but I don't believe this is really the core problem. The core of the problem is we have no consistent store of cluster state, everyone has their own local opinion of the state. There are also plenty of other availability drawbacks here:
1. If a replica is not currently responsive this will fail, whereas it could have completed successfully before. This is a different type of availability. My understanding is that the redis-cli finalizes the slot on all nodes together.
2. We can still lose the state. We aren't durably storing state, so we can end up with no one serving the slot. We can also end up with the state finalized on one of multiple replicas. That replica could win the election, and then subsequently fail, and the replica without the finalized state taking over. 

> This is the tricky part to get right reliably.

I'm happy as long as we converge.

@ushachar I would like you to take a look at this section. "
1113489642,10517,madolson,2023-02-21T19:33:24Z,"This is being discussed in other issues, so going to resolve this."
1113528087,10517,PingXie,2023-02-21T20:19:45Z,">I know I've stated this before, but I don't believe this is really the core problem. The core of the problem is we have no consistent store of cluster state, everyone has their own local opinion of the state. 

Fully agreed that strong consistency for (cluster) metadata is much more desired. I have an implicit assumption that we will need to continue working with cluster V1 in the foreseeable future even after cluster V2 materializes hence my definition of ""core"" problems came with that constraint. These are real pain points for the cluster V1 customers. "
1113528420,10517,PingXie,2023-02-21T20:20:10Z,SGTM
1113529707,10517,PingXie,2023-02-21T20:21:53Z,Lowered to `NOTICE`
1118634867,10517,oranagra,2023-02-27T11:48:52Z,"incomplete revert.
```suggestion
    /* If cluster is enabled perform the cluster redirection here.
```"
1167929414,10517,oranagra,2023-04-16T13:54:23Z,"i don't understand this change.
we're gonna unblock the client without sending a reply?"
1170423721,10517,PingXie,2023-04-18T18:24:13Z,"Good catch @oranagra. This change is no longer needed and should be removed, now that the wait is done outside of the engine and this check will always return true so a reply is guaranteed. Previously, CLIENT_PENDING_COMMND can happen on this path if the engine itself decides to hold off the slot finalization on the primary until it is replicated."
1170428076,10517,PingXie,2023-04-18T18:28:50Z,change reverted
1175065644,10517,zuiderkwast,2023-04-24T10:04:10Z,"This scenario comment needs to be updated to match the implementation, i.e. using SETSLOT ... REPLICAONLY."
1175067361,10517,zuiderkwast,2023-04-24T10:05:48Z,"I think we need a comment like ""This command was added to mitigate the following scenario"" here. Possibly also describe what this command does, before explaining the problem scenario."
1175127632,10517,zuiderkwast,2023-04-24T11:04:36Z,This comment could mention what this new SETSLOT variant is.
1175132723,10517,zuiderkwast,2023-04-24T11:10:14Z,"This function `clusterManagerSetSlot` used to sent only one CLUSTER SETSLOT command. Are you sure we should ""inject"" the new command here and send two commands? Why not add the new command at the caller site? There are some calls to clusterManagerSetSlot with status=""node"" where we might not want to inject the new command, such as the calls from `clusterManagerFixSlotsCoverage()` and `clusterManagerFixOpenSlot()`.

Btw, `status` is always ""node"" here, so no need for %s."
1175144765,10517,zuiderkwast,2023-04-24T11:23:11Z,"Is this right? I though SETSLOT REPLICAONLY causes repliction only and has no effect on the node itself. Or what do you mean by ""only on success will we handle the command""?

Another question: In the command SETSLOT ... NODE (without REPLICAONLY), is the command replicated or not? If not (and if an old redis-cli is used which doesn't send the new REPLICAONLY command) do we rely on the cluster bus propagating the information to replicas instead?"
1175160807,10517,zuiderkwast,2023-04-24T11:38:28Z,"Isn't this still (semi-)synchronous replication?

I thought the idea was to make SETSLOT REPLICAONLY replicate without blocking and just return the number of replicas. Next, the client sends a WAIT. In this way, we don't need to introduce another WAIT-like command that blocks for replication. I think that's what the core team suggested. Are there any issues with this approach?"
1176013848,10517,PingXie,2023-04-25T05:14:40Z,Done
1176013904,10517,PingXie,2023-04-25T05:14:49Z,Done
1176015827,10517,PingXie,2023-04-25T05:18:52Z,You are right. This change is too broad. We only need to perform the replication when finalizing slots in the target shard. Fixed.
1176016370,10517,PingXie,2023-04-25T05:19:32Z,Done
1176017361,10517,PingXie,2023-04-25T05:21:34Z,"Thanks @zuiderkwast! Yeah I think I missed that ""full async"" part - I have updated the logic now to go full async. The wait is now initiated by the client now."
1176017837,10517,PingXie,2023-04-25T05:22:28Z,This section is now re-written. Can you please review again?
1176172058,10517,zuiderkwast,2023-04-25T08:19:33Z,"Nit

```suggestion
             * With the help of this command, we finalize the slots
```"
1176174489,10517,zuiderkwast,2023-04-25T08:21:39Z,"Explaining what A and B are before the sequence instead of afterwards makes it easier to follow the sequence IMO.

```suggestion
             * sequence, where A is the source primary and B is the target
             * primary:
```"
1176619778,10517,zuiderkwast,2023-04-25T14:39:18Z,"Why exactly 1? We don't know the number of replicas, do we? What if there are no replicas at all?

What if the primary crashes when one replica has replicated and the other replicas haven't, is it likely that this replica will be promoted because it has a better replica rank than the others?

That's what I can think of. What's your reasoning?"
1176628617,10517,zuiderkwast,2023-04-25T14:45:39Z,Looks good now.
1176831031,10517,PingXie,2023-04-25T17:33:49Z,">Why exactly 1? We don't know the number of replicas, do we? 

We do know the number of replicas though I was thinking that having one replica acknowledging is sufficient since we would need to lose both the primary and the replica in question to hit the original SPOF issue. On a second thought though, I am now convinced that we should wait for all replicas since the intent is ""best effort only"" anyways. Will send in an update next.

>What if there are no replicas at all?

I have modified the engine to return a new error string ""Target node has no replica"".

>What if the primary crashes when one replica has replicated and the other replicas haven't, is it likely that this replica will be promoted because it has a better replica rank than the others?

Yes, intuitively the replica who ack'd the replication would rank higher compared to the ones who didn't. That said, will wait for all replicas next."
1177094156,10517,zuiderkwast,2023-04-25T21:45:34Z,"Why not do proper indentation? The only reason it's not always done in the tests (afaik) is to avoid touching the git history of a lot of old code, but this is a new file."
1177104677,10517,PingXie,2023-04-25T21:57:37Z,"I thought that is the best formatting :). Jokes aside, happy to make any formatting change if someone can point me to the right template. "
1177111465,10517,zuiderkwast,2023-04-25T22:04:55Z,"Well, I thought indent the body of { ... } is the normal, as is done in all the other { ... }. Not that it matters much though, if you prefer to avoid it."
1177206246,10517,PingXie,2023-04-26T01:04:26Z,reformatted the test code so start_server is not longer multi-lines and fix some indentation issues. I think it looks like the majority of the test code but please let me know if there are still things missed.
1177460956,10517,zuiderkwast,2023-04-26T07:32:12Z,"OK, fine. The only point I was thinking about is indenting the body of `start_cluster`. I know it's not indented in other test suites, which is odd but it's fine."
1178690752,10517,PingXie,2023-04-27T06:42:23Z,I see. I've fixed the indentation now. Also added a new test.
1240507666,10517,madolson,2023-06-23T23:40:31Z,"```suggestion
        # Check that the now empty primary node doesn't turn itself into
```"
1240507808,10517,madolson,2023-06-23T23:41:05Z,"```suggestion
            addReplyLongLong(c, numreplicas);
```"
1240512940,10517,madolson,2023-06-23T23:45:15Z,"> IIUC, we don't save the migration states in the RDB file, correct?

Yes, we don't today. I'm wondering if we should. Would it simplify everything for correctness if slot ownership is transferred through the replication stream (almost exclusively). The current solution will also introduce some odd behavior since we different replicas will disagree on the offset, since some of them will have this new offset data. I think it makes more sense to have it as a new RDB aux field which can be ignored."
1240525126,10517,madolson,2023-06-23T23:53:58Z,"This comment block is weirdly not indented that much, and just feels cramped."
1240525525,10517,madolson,2023-06-23T23:55:01Z,What is this for?
1240525923,10517,madolson,2023-06-23T23:56:27Z,"```suggestion
            rewriteClientCommandVector(c, 5, c->argv[0], c->arv[1], c->argv[2], c->argv[3], c->argv[4]);
```
Kind of surprised there isn't a better API for this, but would like to go through one of the defined rewrite mechanisms."
1240528841,10517,madolson,2023-06-24T00:05:42Z,I think this an artifact from the earlier revision?
1240532372,10517,madolson,2023-06-24T00:09:05Z,"```suggestion
        [get_cluster_role $srv_idx] eq $role
    } else {
        fail ""R $srv_idx didn't assume the cluster $role in time""
```"
1240537434,10517,madolson,2023-06-24T00:20:58Z,"I'm pretty sure this isn't doing what you expect, but I think it works OK. replicationFeedSlaves adds the request to the shared buffer, which all replicas get. So we are broadcasting this to all nodes. These are all idempotent so I think it's OK."
1240545806,10517,madolson,2023-06-24T00:37:23Z,"```suggestion
                serverLog(LL_WARNING, ""I am importing keys from node %.40s (%s) to slot %d, ""
                                      ""but the slot is now owned by node %.40s (%s). Deleting keys in the slot"",
                                      server.cluster->importing_slots_from[j]->name, server.cluster->importing_slots_from[j]-> human_nodename
                                      j,
                                      server.cluster->slots[j]->name, server.cluster->slots[j]->human_nodename);
```
Human nodenames were added in the interim, which is supposed to give better log visibility by reporting a logical identifier instead of just the GUID for the node. If you can, please add it wherever it would be useful to have more information."
1243074257,10517,PingXie,2023-06-27T02:41:28Z,Agreed that this is not needed. Removing
1243077846,10517,PingXie,2023-06-27T02:48:45Z,Good catch. Removed
1244864637,10517,soloestoy,2023-06-28T08:22:42Z,"this will break the CLIENT PAUSE WRITE status, since it doesn't check `server.paused_actions`"
1405612888,10517,PingXie,2023-11-27T04:46:45Z,This is the replica online path so I don't see how clients could be paused for write?
1533472447,13157,mochaaP,2024-03-21T09:05:54Z,"You shall **NOT** remove the BSD license header, since there are third-party contributions to those files (without signing a CLA), which were licensed under BSD-3-Clause. The same also applies to other files in `src/*`."
698383459,9320,yossigo,2021-08-30T10:44:58Z,"nit: this is a repeating pattern, a `clusterGetConnType()` helper function might be nicer."
698385138,9320,yossigo,2021-08-30T10:47:58Z,We should probably identify the case where TLS support was not loaded and report it clearly.
698386817,9320,yossigo,2021-08-30T10:51:00Z,I think we should avoid a linked list here and just hold an array for the sake of efficiency.
698388893,9320,yossigo,2021-08-30T10:54:53Z,"This is not currently used and I'm not sure how useful and practical it's going to be to ever support it (we'd need refcounts on connection types, and see that we can really evict all listening connections etc.).

I suggest to drop it, at least initially and avoid dead code."
698390191,9320,yossigo,2021-08-30T10:57:20Z,"I'd consider even turning these into assertions, I'm not sure we should accept an attempt to operate on a non-existing connection type as user / configuration error but rather a plain bug."
698391354,9320,yossigo,2021-08-30T10:59:31Z,"This should probably be an arbitrary string, as a field in the `ConnectionType` struct.
"
895154316,9320,oranagra,2022-06-12T10:58:44Z,"which file is lower in the abstraction hierarchy now? anet.c or connection.c?
anet.c is just some convenience wrappers on system calls, so connection.c / socket.c is using them when needed.
but now we have code in anet.c that depends on a constant defined in connection.h.

maybe to solve it we need another set of defines with an ANET prefix.
other alternatives is to either take a boolean, or split into many separate methods."
895158418,9320,oranagra,2022-06-12T11:26:51Z,todo?
895158700,9320,oranagra,2022-06-12T11:28:29Z,let's document that interface (and return value) somewhere. maybe here is the right place? or inside the struct..
895160203,9320,oranagra,2022-06-12T11:38:53Z,"let's document `force`
"
895168977,9320,oranagra,2022-06-12T12:44:18Z,"considering the types are constant and not dynamic, maybe we should add a lookup table with their names rather than indexes.
i.e. the code can be dynamically loaded and more types can be added without changes in redis, but the list of types is hard coded."
895169589,9320,oranagra,2022-06-12T12:48:49Z,"i don't think this should depend on `server.tls_replication`.
instead, we probably need to clean up all types (a loop) here before `execve`
note, this was added in #8589"
895170486,9320,oranagra,2022-06-12T12:55:19Z,"in the past we did `tlsInit()` just a bit after `initServerConfig()` (long before `initServer()`)
this change could have some implications, and maybe we'll have to split registration from init.
e.g. now we do the init after deemonization (which actually sounds better), and in the past we did it before)"
895170962,9320,oranagra,2022-06-12T12:58:26Z,"maybe `force_refresh`, or `reconfigure` is better?
i.e. when false, we configure only if not already configured."
895171000,9320,oranagra,2022-06-12T12:58:51Z,nitpick: extra space
895176689,9320,oranagra,2022-06-12T13:39:20Z,"i noticed a few places that you moved big chunks of code to the top (adding static), so they can be referred to from the table.
maybe it'll be better to add a forward declaration rather than move a chunk of code (better for code review and blame log).

It seems that (unlike most PR), we'll probably merge this one with a merge commit or a rebase merge (not a squash-merge).
so if you do such additional changes we have two options:
1. add an additional commit with a title like `sqush into <sha>`, so we can review that commit and do the squashing before mergin the PR.
2. just amend the relevant commit and force-push (this will make it easy to see that the diff of that commit got smaller), bit om that case i'll ask for separate force-push per topic, so it'll be easy to click on the word `force` in github and see what was changed)"
895177312,9320,oranagra,2022-06-12T13:43:25Z,"let's add some doc comment for these (specifically the `priv` arg).
also, missing blank line above the previous function."
895178445,9320,oranagra,2022-06-12T13:51:46Z,"don't we need to also abstract all the listen and accept code?
i.e. this way we can replace the OpenSSL based TLS dynamically with another implementation, but what happens when we add another medium?
i guess to judge this change we need to experiment with a branch that adds RDMA on top of this, and see if indeed the only change needed in redis is initializing another entry in the connection type array.
did you try this? (the commit comments suggest that maybe you did)
p.s. maybe to be really flexible we'll also have to break apart ae.c"
895736581,9320,pizhenwei,2022-06-13T13:46:32Z,"Because RDMA also needs to get local/remote info, but it's not an `ANET_PEER_NAME`, so I renamed this into `ADDR_PEER_NAME`. And yes, using `ADDR_PEER_NAME`(defined in connection.h) in anet.c is not good enough.

As you suggested, what about `bool remote`?"
895736686,9320,pizhenwei,2022-06-13T13:46:38Z,"Originally, it was `char ip[INET6_ADDRSTRLEN];` and `NET_IP_STR_LEN` is defined as 46. It's fine for both IPv4 and IPv6. I leave this as TODO for RDMA infiniband protocol. And `INET6_ADDRSTRLEN` is an ANET style definition. What about `#define CONN_ADDR_STR_LEN 46`, and change this when RDMA infiniband gets supported?
"
895736775,9320,pizhenwei,2022-06-13T13:46:43Z,OK. I'll fix this in the next version.
895736836,9320,pizhenwei,2022-06-13T13:46:46Z,OK
895749195,9320,pizhenwei,2022-06-13T13:57:34Z,"I realized that this chunk of change is a hard work to review, so I decided to split this into 3 steps:
- In this version, the TLS still works statically, and registering types into an array.
- registering connection types into a lookup table with their names(string) and making TLS dynamically loadable.
- implementing RDMA connection type.

I'm OK to change plan, using a lookup table in this series is good to me too. Please let me know your decision.  :D"
895758935,9320,pizhenwei,2022-06-13T14:05:44Z,OK.
895765794,9320,pizhenwei,2022-06-13T14:11:04Z,"Sure, I'll change this into `reconfigure` in the next version."
895769478,9320,pizhenwei,2022-06-13T14:13:45Z,OK.
895774249,9320,pizhenwei,2022-06-13T14:17:51Z,OK.
895866235,9320,oranagra,2022-06-13T15:35:59Z,bool (int) sounds like a good compromise.
895869423,9320,oranagra,2022-06-13T15:39:09Z,"ok, how about:
```
#define CONN_ADDR_STR_LEN 128 /* Similar to INET6_ADDRSTRLEN, hoping to handle other protocols. */"
895886110,9320,oranagra,2022-06-13T15:55:43Z,"i took this note early in the review, before looking at the plan and commits in the other branch.
i agree with your approach of doing it gradually, and i don't mind to keep printing an integer for now.
i suppose we can even panic in this specific case.

p.s. when we'll go dynamic, we can still use an array (with max of 8 entries), each type will be able to report it's name with a method returning it.
i think we may be able to avoid any direct / hard-coded indexing into that array, except for maybe TLS for which we can just reserve index 1.
other extensions can be added in a way that redis doesn't need to explicitly refer to them (they'll register their own configs, etc), and the only one that will be hard-wired into redis it TLS (in order to be backwards compatible with the old configs)."
906761118,9320,oranagra,2022-06-26T06:05:45Z,"I think we can afford to move these from networking.c to the other files (did i argue the other way around in the past?).
i generally try to avoid moving files and disrupting the blame log, but this project is a refactory project, it can come with some cleanup and blame log destruction.

i wouldn't want to move acceptCommonHandler, since that one has some logic to reply to clients, and update stats, so it seems more like networking **logic** than platform handling."
906761922,9320,oranagra,2022-06-26T06:14:43Z,"I think you may have missed my point, or maybe i didn't explain it well enough.
i meant that instead of having hard coded indexes like `#define CONN_TYPE_TLS 2`, we'll allocate them dynamically, by doing string searching only at startup, and cache the index in a variable.
so the indexes are not hard coded, but it's still O(1) to look up an item.

I'd like to see just one or two interfaces here that work with strings, so it's easy to make sure they're only used at startup. the majority of the changes in this commit (`Use connection name of string`), should probably be reverted."
906763478,9320,oranagra,2022-06-26T06:31:28Z,nit: missing space before parenthesis
906765173,9320,oranagra,2022-06-26T06:47:33Z,"let's add some comment what this does.
i.e. it works for both TCP and TLS, and handles both port and bind address, right?
maybe even find a better name for the function to reflect that.."
906765503,9320,oranagra,2022-06-26T06:50:32Z,"i see that in the past, we had a call to `closeSocketListeners` when `listenToPort` failed (in `changeBindAddr`).
please look into that and confirm it's not needed, or add it."
906766001,9320,oranagra,2022-06-26T06:55:14Z,"i'm afraid that moving these prints to be done earlier (in `initServer`, before loading the persistence data), could have some side effects (if someone's monitoring the log file to know when to connect).
i'd rather move that back here."
906768616,9320,oranagra,2022-06-26T07:16:08Z,"maybe it's better to have two separate defines instead of `USE_OPENSSL`.
i.e. `PREPARE_FOR_TLS_SUPPORT` vs `INCLUDE_TLS_SUPPORT`?
if not, then maybe just use 1 and 2 instead of 89 and 69, since comments are needed anyway next to each use.

@yossigo please review the makefile changes."
906769292,9320,oranagra,2022-06-26T07:22:47Z,let's add a check to make sure it is marked as executable (same as is done in `moduleLoad`
906769536,9320,oranagra,2022-06-26T07:24:28Z,"i think the logging verbosity is too low.
let's at least use LL_NOTICE (like we do when loading a module)."
906770535,9320,oranagra,2022-06-26T07:32:58Z,"i'm not sure i like this approach.
the one i had in mind is just a `:` separated list of paths, and then let them register configs at runtime, with some mechanism of delayed config applying same as we did in https://github.com/redis/redis/pull/10285.

the other approach could be like we do in the `loadmodule` config directive, which takes an argv array.
i.e. each module in one config line, and these can be repeated.
if we do that, then CONFIG REWRITE mechanism becomes complicated, but the bright side is that it's following the footsteps of an existing mechanism (unlike the one currently implemented).

@yossigo WDYT?"
906773444,9320,oranagra,2022-06-26T07:56:42Z,"i hope this move is safe...
IIUC nowadays the code in the config file parsing doesn't touch the runtime state, just the config globals (and the apply functions are just being used by CONFIG SET command, not the config file parsing).
so this change seems ok.."
906782338,9320,oranagra,2022-06-26T09:10:33Z,"it's a nice proof of concept, but why would we want to load the Unix socket as an extension, or exclude it completely?
unlike the TLS thing, it doesn't require any heavy dependencies or overheads..
i think i'd like to drop that commit."
906901085,9320,pizhenwei,2022-06-27T01:04:46Z,"From the point of my view, the Unix socket is necessary only when we start Redis with unixsocket config, we have a chance to implement `load extension on use`, so I did this change.
And you are right, Unix socket has no dependence, always building into Redis is also OK to me. I'll remove this change in the next version."
906901603,9320,pizhenwei,2022-06-27T01:07:12Z,"OK, I'll move `acceptTcpHandler`/`acceptTLSHandler`/`acceptUnixHandler` to socket.c/tls.c/unix.c."
906901653,9320,pizhenwei,2022-06-27T01:07:26Z,OK.
906901703,9320,pizhenwei,2022-06-27T01:07:43Z,OK.
906905234,9320,pizhenwei,2022-06-27T01:22:33Z,"In the past, Redis changed address for the TCP/TLS together in `changeBindAddr`, if one failed, close them all:
```
    /* Bind to the new port */
    if ((server.port != 0 && listenToPort(server.port, &server.ipfd) != C_OK) ||
        (server.tls_port != 0 && listenToPort(server.tls_port, &server.tlsfd) != C_OK)) {
        serverLog(LL_WARNING, ""Failed to bind"");
    
        closeSocketListeners(&server.ipfd);
        closeSocketListeners(&server.tlsfd);
        return C_ERR;
    }
```

But now, `changeListener` changes the bind listener for a single one, so we don't have to call `closeSocketListeners`. On the other hand, I did not close TCP listener if TLS listener bind fails.
```
/* applyBind affects both TCP and TLS(if enabled) */
static int applyBind(const char **err) {
    if (changeListener(CONN_TYPE_SOCKET) == C_ERR) {
        *err = ""Failed to bind to specified addresses."";
        return 0;
    }    

    if (server.tls_port != 0)
        if (changeListener(CONN_TYPE_TLS) == C_ERR) {
            *err = ""Failed to bind to specified addresses."";
            return 0;
        }    

    return 1;
}
```

Should we close TCP listener if TLS bind fails?"
906905383,9320,pizhenwei,2022-06-27T01:23:05Z,OK.
906907010,9320,pizhenwei,2022-06-27T01:29:07Z,OK.
906907049,9320,pizhenwei,2022-06-27T01:29:16Z,OK.
906911227,9320,pizhenwei,2022-06-27T01:44:36Z,"I have an idea to reuse `struct standardConfig`, but I need export this struct and the related functions.
For example, the TLS extension registers config:
```
tls:bind xxxx
tls:port yyyy
```
In the future, the RDMA extension registers config:
```
rdma:bind xxxx
rdma:port yyyy
```

`CONFIG SET xxx:bind yyyy` changes the listener address, and `CONFIG GET xxx:bind` returns the listen address. The legacy `bind port tls-port` is still supported.

I have a concern that RDMA can not listen address during startup, it has to wait command `CONFIG SET rdma:bind yyyy`. So I also implement this to allow an extension to listen from command line/config file.

And searching connection type by string is necessary here."
906913653,9320,pizhenwei,2022-06-27T01:52:43Z,"Let me explain why I use `USE_OPENSSL` with different value instead of new flags:
The server side and client side share the same compiling flags, `USE_OPENSSL` affects both server and client. I realized this and still used `USE_OPENSSL` with different value. Using 1 and 2 instead of 89 and 69 is fine to me."
906931541,9320,pizhenwei,2022-06-27T02:53:04Z,"Searching connection type by string (or index) is unlikely code path, it's used only:
- create listener at startup, change listener by command
- connBlockingConnect/connConnect in cluster and replication
- TLS/Unix reuse some method from TCP

It affects performance very little. But searching by string can be used a little widely, for example, `CONFIG SET rdma:bind yyyy`, even `CONFIG SET tcp:bind yyyy` gets supported in the future."
907009835,9320,oranagra,2022-06-27T06:15:17Z,"I don't think a generic ""*:bind"" and ""*:port"" that's searching for the right extension with a common config property (e.g. port, and bind) is the way to go.
i imagine that some extensions will have a few extension specific properties (like TLS has for certificates and other features), and i think we better off just expose a way for extensions to register their own configs, same as we do for modules.

Then, the question remains if we should allow extensions to also take startup arguments that are non-configs from the same line that specifies the dynamic library path.
if we do that, then i think we better have one line per extension, and allow the user to specify multiple lines (like we do for `loadmodule`).
And then, i also think we should just pass an argv array to the extension (not a key-value pair list), it's arguably more flexible, and also similar to the existing mechanism we have for modules (i don't want too many different approaches coexisting in redis).

again, the other alternative is to just take a plain `:` list of paths, forget about load time arguments, and only rely on the config infrastructure that we'll introduce in the next PR."
907014110,9320,oranagra,2022-06-27T06:23:33Z,"I don't think i follow you.
TLS is added in two steps: one is to decide if TLS support is at all included in the build (when disabled we don't even need the headers installed on the system), and the other one decides if redis-server has it build in, or as a loadable extension.
it can be one define with 3 states (0,1,2 / undefined,1,2), or it can be two defines that are either both undefined, both defined, or just one defined.
i think the second approach is less confusing since it doesn't rely on the value of the define, and we have clear names.
the client side (redis-cli and redis-benchmark) will only be using the first define (which dictates that TLS support is at all enabled for the build).

maybe elaborate on what you meant by client, in case i'm missing something."
907021243,9320,oranagra,2022-06-27T06:35:09Z,"responding to the list above.
* doing string search on startup or on config change is probably ok.
* I'm not sure it's very nice to do that on connConnect (possibly each time a connection drops and has to be re-established)
* the generic bind and port configs approach you suggestion is not desired IMHO as i stated in the other comment (Unix has path and no port, LTS has many other configs, i think we better rely on a separate list of configs for each extension and not try to come up with a generic one).
* for TLS and Unix to re-use socket functions using string search is probably wrong as can be seen here:

```c
static int connUnixSetReadHandler(connection *conn, ConnectionCallbackFunc func) {
    return connectionByType(CONN_TYPE_SOCKET)->set_read_handler(conn, func);
}
```

all in all, seeing so many interfaces that take string, scares me, even if we make sure they're all used in reasonable places now, i think it'll be too easy to misuse in the future.
i'd rather limit the string search to just one function (maybe with the name ""Find"" in it), and have the rest of them take indexes and keep some global variable with a cached index. or better yet, a global variable with a pointer to the object, so in the few places that redis explicitly needs a certain connection class, it uses that variable, and even indexing isn't needed."
907037310,9320,oranagra,2022-06-27T06:58:51Z,"ok, i see (indeed no need to call closeSocketListeners on the same connListen that failed (listenToPort already does that when it fails).

but yes, i do think we need applyBind to clean after it in case it failed on a late stage (close the socket listener when the TLS listener failed).

IIRC, this mechanism was was set in place for the later rollback that's attempted.
i.e. if you change the port or bind at runtime and the listen fails, it attempts to roll back the actions, and re-bind to the old address / port.

p.s. i now notice that when createSocketAcceptHandler (in changeListener), in the past we used to fail gracefully, and now we panic. any reason for that?
"
907127592,9320,pizhenwei,2022-06-27T08:41:06Z,"When createSocketAcceptHandler (in changeListener), we should fail gracefully instead of panic. I'll correct this."
907157016,9320,pizhenwei,2022-06-27T09:09:55Z,OK
907180452,9320,pizhenwei,2022-06-27T09:33:32Z,OK
909575616,9320,oranagra,2022-06-29T12:35:46Z,"i'm not sure we need this.
as long as we don't allow extensions to be added or removed at runtime, i think it's enough that we added it the list where `rename-command` and others were mentioned, and it'll mean that the original line isn't deleted from the config file."
909681303,9320,oranagra,2022-06-29T14:06:42Z,"i still feel that there are still way too many interfaces that take a string as a connection type, and i think that all of these should take a `ConnectionType*` or index as input.
i feel that there should be only two interfaces that take that string, one is the registration (connCreate) and the other is a lookup (connectionByType) that should be **only** used at startup to cache direct pointers to some types (or by using a singleton method like you did with  connectionTypeTcp)"
910517524,9320,pizhenwei,2022-06-30T00:54:36Z,OK. I'll remove this in the next version.
910520288,9320,pizhenwei,2022-06-30T01:02:58Z,"OK!
By the way, `void connTypeCleanup(const char *typename);` is unused now, it's supposed to clean up a single listener, but we clean up all the listeners by `void connTypeCleanupAll()`. So I'll remove this function in the next version.
Also introduce connectionTypeTls() to get TLS connection type fastly."
912444307,9320,oranagra,2022-07-03T07:34:05Z,"i still see interfaces that i think i'd like to change / delete.
* connCreateAccepted (should take a connection type)
* connTypeOfCluster (should return a connection type)
* connCreate (should take a connection type)
* connTypeOfReplication (should return a connection type)
* connTestType - delete, if someone needs to use it, it may be an indication that they're doing the wrong thing?
* connAcceptHandler - same?"
912445302,9320,oranagra,2022-07-03T07:43:47Z,"i'm trying to understand how generic these are and if they indeed need to be part of the interface.
i.e. if they can ever serve any other connection type, or just for extensions re-implementing the TLS one.
same about connTypeConfigure, and obviously connGetPeerCert.

one other alternative is to explicitly call a TLS specific function. i.e. the code that uses all of these is TLS specific code, doing something like `connTypeGetClientCtx(connectionTypeTls());` or `connTypeConfigure(connectionTypeTls(), &server.tls_ctx_config, 1)`.

@yossigo i'd like your feedback here."
912589556,9320,pizhenwei,2022-07-04T02:48:09Z,"What about add a new API like `connCtrl()` style, and wrapper TLS specified function into this?"
912884790,9320,yossigo,2022-07-04T10:55:08Z,"@oranagra @pizhenwei I don't think exposing the OpenSSL context should be part of the interface, because we have no guarantee that any TLS implementation is going to have OpenSSL. If we believe it is required for certain operations, we should probably define a more abstract interface for those.

A generic `connGetPeerCert` is reasonable. We could insist on differentiating generic from TLS connection interfaces and only supporting it in the latter, but I'm not sure if it's worth the trouble - it can remain part of the basic interface and just be left out if not applicable."
913422718,9320,oranagra,2022-07-05T06:19:18Z,"we probably need to document the arguments for each of these somewhere.
maybe here is a good place (where we define the interfaces)?"
917351911,9320,oranagra,2022-07-10T07:21:39Z,"i realized that we probably need to list extensions in the INFO output, one important reason is that we want them to be present in the crash log.
if it were a normal config, we could have used DEBUG_CONFIG.
so maybe we should have explicitly add it to the crash log, like we do for DEBUG_CONFIG, but since we don't have a CONFIG GET support for that, it's probably better to list them in INFO, like we do for modules.

for modules, we also list them in HELLO command, and we have a special INFO section, but for extensions, it's probably enough to just add a single line comma separated field in the ""server"" section of info."
922986597,9320,oranagra,2022-07-18T05:45:35Z,"I was thinking of something like this (to show the list of loaded extensions):
```
extensions:tls,rdma
```

i can see how what you did can be useful too, so i'm not sure which one we prefer, or maybe both?
but if we do keep it, i think the info field name should be prefixed (i don't think we want the info name to be the plain extension name), e.g:
```
listener_tcp:type=builtin,bind=127.0.0.1,port=6380
listener_unix:type=builtin,bind=/run/redis.sock
listener_tls:type=extension,bind=127.0.0.1,port=6379
```
@yossigo WDYT?"
923000521,9320,pizhenwei,2022-07-18T06:20:09Z,"Hi, @oranagra 
I also noticed `tcp_port:6379` in the `INFO SERVER` command. And the code `server.port ? server.port : server.tls_port` means `TCP` has higher priority than `TLS`. If we can ignore the backwards capability in this output, this field can be removed too. Originally, I was thinking of `extensions:tls,rdma` too, and I found the limitation of `tcp_port:6379`, so I did this version."
924277081,9320,pizhenwei,2022-07-19T09:31:24Z,"Hi, @oranagra 
Is it OK to remove `tcp_port:6379` if adding 
```
listener_tcp:type=builtin,bind=127.0.0.1,port=6380
listener_unix:type=builtin,bind=/run/redis.sock
listener_tls:type=extension,bind=127.0.0.1,port=6379
```"
924422125,9320,oranagra,2022-07-19T12:16:05Z,"no, i think we need to maintain backwards compatibility.
p.s. i did discus this topic with Yossi today.
he suggested that the info keyword will be index based, could be easier for clients to enumerate on them (like we list slaves and databases).
i.e.
```
listener0:name=tcp,type=builtin,bind=127.0.0.1,port=6380
listener1:name=unix,type=builtin,bind=/run/redis.sock
listener2:name=tls,type=extension,bind=127.0.0.1,port=6379
```
i'm also not sure we need the `type=` part, since i do think we need another place that lists extensions, so i suggest to drop it.
i.e. in the future we'll have extensions for compression algorithms, or persistence volume access, not just listeners, so extensions should be listed separately, not as part of the listeners list.

Yossi suggested that the extensions be listed in a section of their own like modules, one extension per line, rather than a single info comma separated field i suggested.

But it looks like we didn't come to an agreement yet about whether extensions are a type of module or not, Yossi argues that they should be just another type of modules), and in that case we don't need to list them them at all, they'll be listed in the modules section.

so i'll ask that you'll wait a few more days until we decide that, but meanwhile you can fix the `listener` info lines as i described above."
933250585,9320,oranagra,2022-07-29T13:14:50Z,"maybe instead we can let the module detect it's being loaded later than bootup, and it can just abort it's loading (rather than what we have now were we let it complete initialization and then try to destroy it)?

I imagine we can easily find a simple way to detect it (without even adding a new API).
i can't think of one right now, so the next best thing is to add an RM_GetContextFlags that looks if server.loadmodule_queue isn't empty.

maybe the same can be said about unload, it can simply return some error from the unload callback?
it seems that this is already supported."
933286602,9320,oranagra,2022-07-29T13:45:32Z,"i don't like the fact clusterInit is called form within initListeners.
can we move it to be called immediately after?"
934071437,9320,pizhenwei,2022-08-01T01:10:22Z,"Hi, @oranagra 
`module:name=helloworld,ver=1,api=1,filters=0,usedby=[],using=[],options=[bootup-only|deny-unload]` is quite explicit and clear, we can easily know the attribute of the specific module.
Returning error in `RedisModule_OnUnload` also works fine to refuse to unload a module, but we lose this information.

I'm a little confused about testing server.loadmodule_queue, can we distinguish bootup stage from running stage without any module?"
934146430,9320,oranagra,2022-08-01T05:21:37Z,"> `module:name=helloworld,ver=1,api=1,filters=0,usedby=[],using=[],options=[bootup-only|deny-unload]`

that would be wrong.
these flags or capabilities should come from the module code, not be provided by the user who loads it.

> Returning error in RedisModule_OnUnload also works fine to refuse to unload a module, but we lose this information

i don't understand what we lose?

> I'm a little confused about testing server.loadmodule_queue, can we distinguish bootup stage from running stage without any module?

i meant, for example. to add a flag in RM_GetContextFlags, something like REDISMODULE_CTX_FLAGS_DENY_LOADING_ON_STARTUP, which RM_GetContextFlags will set when server.loadmodule_queue is non empty.
then the module (tls in this case), will be able to test this flag in it's `RedisModule_OnLoad`, and return an error if it's not set."
936408783,9320,oranagra,2022-08-03T08:52:46Z,"the module API [documentation](https://redis.io/docs/reference/modules/modules-api-ref/) is generated from the comments in this file, so the new field should be documented in the comment above.

also, i don't think i like the name. i this is should be negated and mention what it stands for, and not what it's used for.
i'd call it BEFORE_SERVER_STARTUP, or SERVER_STARTUP_PENDING or alike.

while we're here, and now that sentinel can load modules, i think we need a flag for that too.
so that modules that don't wanna be loaded into sentinel can refuse to be loaded.
i.e. add REDISMODULE_CTX_FLAGS_SENTINEL similar to REDISMODULE_CTX_FLAGS_CLUSTER.

p.s. these are interface changes that need to be mentioned in the PR top comment for the purpose of review / approval and release notes."
936470950,9320,oranagra,2022-08-03T09:55:10Z,"i think the flag name is negated from what it does (and the comment).
i would keep the name and update the comment to say ""didn't finish starting"" or ""performing startup"".
and change the code to check a non-empty `loadmodule_queue` (change `== 0` to `> 0`)
"
942655264,9320,madolson,2022-08-10T16:18:09Z,"```suggestion
    UNUSED(conn);
```"
942741358,9320,madolson,2022-08-10T17:55:14Z,"```suggestion
int redisRegisterConnectionTypeTLS() {
```"
942741492,9320,madolson,2022-08-10T17:55:24Z,"```suggestion
int redisRegisterConnectionTypeTLS() {
```"
942743502,9320,madolson,2022-08-10T17:57:44Z,"This feels awkward. Why not have a separate TLS type here instead of a generic poorly typed control method. These still have to be called from Redis. something like:
```
tlsControl = {
    .get_certificate = whatever
    .get_peer = whatever
}

.tls_control = tlsControl
```"
942745977,9320,madolson,2022-08-10T18:00:42Z,"I don't think @ is used anywhere in Redis for describing arugments. 
```suggestion
 * priv is connection type specified argument */
```

There is a couple of other places this is set as well, I didn't call them all out though."
942746484,9320,madolson,2022-08-10T18:01:17Z,"```suggestion
/* Get Listeners information, note that caller should free the non-empty string */
```"
942748285,9320,madolson,2022-08-10T18:03:25Z,"```suggestion
static inline int formatAddr(char *buf, size_t buf_len, char *ip, int port) {
    return snprintf(buf, buf_len, strchr(ip,':') ?
           ""[%s]:%d"" : ""%s:%d"", ip, port);
```"
942764017,9320,madolson,2022-08-10T18:20:41Z,"why was this moved from anet? Seems like the right place, this doesn't seem strictly related to connections."
942764790,9320,madolson,2022-08-10T18:21:40Z,"```suggestion
/* Create an accepted connection of specified type.
```"
942765047,9320,madolson,2022-08-10T18:22:01Z,"```suggestion
/* Walk all the connection types and cleanup them all if possible */
```"
943029035,9320,pizhenwei,2022-08-11T01:06:31Z,"> why was this moved from anet? Seems like the right place, this doesn't seem strictly related to connections.

Hi, 
Formating IP and port into a string, this is quite common. This can be also used by RDMA in the next step. RDMA supports RoCEv2, the address is similar to the IPv4 style."
943039547,9320,pizhenwei,2022-08-11T01:42:38Z,"> This feels awkward. Why not have a separate TLS type here instead of a generic poorly typed control method. These still have to be called from Redis. something like:
> 
> ```
> tlsControl = {
>     .get_certificate = whatever
>     .get_peer = whatever
> }
> 
> .tls_control = tlsControl
> ```

From this design, we need define something in connection.h:
```
struct tlsControl = {
    sds (*get_peer_cert)(struct connection *conn);
    void* (*get_ctx)(void);
    void* (*get_client_ctx)(void);
    int (*configure)(void *priv, int reconfigure);
};

struct ConnectionType {
     ...
     struct tlsControl *tlsctrl;
};

static inline void *connTypeGetClientCtx(ConnectionType *ct) {
    return ct->tlsctrl->get_client_ctx();
}
...
```

My concern is:
* **struct ConnectionType** is a common/base class of every connection type, it should contain the common methods only.
* if we need introduce any other connection specific method, we need modify **struct ConnectionType**. (Ex, struct fooControl *fooctrl)."
945287609,9320,oranagra,2022-08-14T13:06:51Z,"it was discussed here https://github.com/redis/redis/pull/9320#discussion_r912445302
and IIRC we concluded a generic `control` is better than polluting the interface with TLS specific concerns."
945714782,9320,yossigo,2022-08-15T13:11:48Z,"Any reason not to simply return an error here, and panic only if we fail trying to register the built-in types?"
945733823,9320,yossigo,2022-08-15T13:26:44Z,"I think this can be somewhat misleading: it seems as if Sentinel actually supports TLS modules, but that's not the case - it only supports the OpenSSL based TLS module, because it uses `hiredis` for its client side work.

I propose these changes:
* Drop `CTRL_TLS_GET_CTX` and `CTRL_TLS_GET_CLIENT_CTX`, because they won't be useful with generic modules anyway.
* Make Sentinel support TLS only if compiled, not as a module, and then directly access these contexts.

I realize TLS+Sentinel came up before, I should have thought about this bit before..."
945738339,9320,yossigo,2022-08-15T13:30:32Z,Is this change from returning an error to panic really required?
945742786,9320,yossigo,2022-08-15T13:34:34Z,"I think this is a bit confusing, why not use `--tls` to enable TLS tests and `--tls-mod` (or `--tls-module` so it's more obvious) to both enable TLS and load the module?"
945747224,9320,yossigo,2022-08-15T13:37:59Z,I suggest to use `TLS_MODULE` and `BUILD_TLS=module` to make it more obvious what `mod` means.
945812367,9320,oranagra,2022-08-15T14:35:48Z,"so Sentinel will support other connection modules, but not TLS?
it's a bit odd."
945841802,9320,yossigo,2022-08-15T14:59:47Z,"It will support inbound modules on incoming connections only, anyway. So yes, very partial support."
945869078,9320,oranagra,2022-08-15T15:22:45Z,"Ok, just to make things more generic, can't we use that hack of accessing these contexts directly even if TLS is loaded as a module? 

Do we need to note somewhere that (other than tls) the connection modules for sentinel only work on incoming connections? or can we skip it? (considering that there are not official connections anyway, and we only need to document tls) "
946245346,9320,pizhenwei,2022-08-16T00:41:18Z,"> Any reason not to simply return an error here, and panic only if we fail trying to register the built-in types?

Connection type is allowed to be loaded during Redis startup only, at this stage, reporting unexpected connection types seems obvious.
For example, `./src/redis-server --loadmodule src/redis-tls.so  --loadmodule src/redis-foo.so` tries to load 2 modules, unfortunately they have the same connection name `TLS`, if we don't panic here, we don't know which one is in use."
946255739,9320,pizhenwei,2022-08-16T01:12:53Z,"> Is this change from returning an error to panic really required?

I followed the original logic:
```
int changeBindAddr(void) {
    ...
    /* Create TCP and TLS event handlers */
    if (createSocketAcceptHandler(&server.ipfd, acceptTcpHandler) != C_OK) {
        serverPanic(""Unrecoverable error creating TCP socket accept handler."");
    }    
    if (createSocketAcceptHandler(&server.tlsfd, acceptTLSHandler) != C_OK) {
        serverPanic(""Unrecoverable error creating TLS socket accept handler."");
    }
    ...
```

Sorry, I'm not familiar enough with the detailed historical reason, I'd leave this to you to decide ..."
946339856,9320,oranagra,2022-08-16T05:04:57Z,"I think Yossi meant that the panic (or rather `exit`), is handled outside.
i.e. we'll return an error here, it'll cause the module to fail loading, and then moduleLoadFromQueue will fail.
it would mean the user doesn't know the reason was a conflicting name, unless we add a log print either here, or in the module when that call returns with an error."
946390559,9320,oranagra,2022-08-16T06:42:22Z,"so `changeBindAddr` (called by `applyBind` from config.c) would have panicked.
but `changeListenPort` (called by `updatePort` in config.c) would have just returned an error.

generally, on bind failures, i'm guessing the right thing to do is error, and let the config system do a rollback.
unlike what we do on startup, in which we should fail and exit (i prefer `exit` rather than `panic`)

however, in this case, calling createSocketAcceptHandler is not expected to fail (all it does is call aeCreateFileEvent).
p.s. we do have tests for both configs (testing a failed listen at runtime and making sure the server reverts), and these both still pass.

i'm not sure what's the best way forward.
i'm not certain if such an error would be recoverable, so maybe a panic is right."
946405567,9320,pizhenwei,2022-08-16T07:02:46Z,"Currently, we hide all the symbols as static in tls.c, and uplayer calls TLS specific APIs by connection layer only, should we break this rule?

And I think we can rename `enum connControlType` to `enum connControlTLS`, and define `enum connControlFoo` in the future. what do you think about this?"
946437032,9320,yossigo,2022-08-16T07:40:55Z,"@pizhenwei I guess we can break this rule for Sentinel, when linking statically."
946443541,9320,oranagra,2022-08-16T07:47:49Z,"so sentinel will support connection modules, but not tls? (so it'll be untested).
can't we break that rule for non-static linked TLS module as well?"
946487676,9320,pizhenwei,2022-08-16T08:33:19Z,"The TLS specific APIs is not general enough, but the global variable symbol is also not general. Currently we can call wrapper APIs to get variables instead of linking the variable symbol across source files. should we revert this part?"
948350333,9320,oranagra,2022-08-17T19:49:47Z,"maybe we can make a hack that works in reverse and it'll still mean TLS can be a module, even for sentinel.
it looks odd to me that sentinel supports connection modules, but not TLS.

what if we declare these globals in redis, by default set to NULL, and have the TLS module write into them?

if it does work (and i think it should), many of the changes of this commit can be dropped (and the remaining ones squashed into the right place)"
948620348,9320,madolson,2022-08-18T03:37:47Z,"I don't really agree with the concern of ""polluting the interface"". The connection implementation is still tightly coupled to the core, since we explicitly call the TLS functions with specific arguments. If the interface changes, I presume that calling sites would rather have a type mismatch to know something has changed instead of silently ignoring or mishandling it."
948625935,9320,pizhenwei,2022-08-18T03:53:27Z,"> 
Hi @madolson 

Connection module is allowed only when the building version matches with Redis server.
This is quite similar to Linux kernel&modules."
948627005,9320,madolson,2022-08-18T03:56:28Z,"> Connection module is allowed only when the building version matches with Redis server.
This is quite similar to Linux kernel&modules.

Right. So it seems like the added benefit of having verifying type is a good thing?"
948693867,9320,pizhenwei,2022-08-18T06:17:38Z,"> maybe we can make a hack that works in reverse and it'll still mean TLS can be a module, even for sentinel. it looks odd to me that sentinel supports connection modules, but not TLS.
> 
> what if we declare these globals in redis, by default set to NULL, and have the TLS module write into them?
> 
> if it does work (and i think it should), many of the changes of this commit can be dropped (and the remaining ones squashed into the right place)

Hi @yossigo 
Could you please give me any hint about this?"
948981832,9320,yossigo,2022-08-18T10:50:14Z,"As it's an internal interface, I'm OK with both ways."
948984957,9320,yossigo,2022-08-18T10:53:59Z,"@oranagra The point is that Sentinel uses hiredis, hiredis uses OpenSSL. Unless we completely change that so Sentinel will use the connection infrastructure, Sentinel+TLS will still need to be compiled and linked against OpenSSL."
948992669,9320,oranagra,2022-08-18T11:03:17Z,"yes, so it must link against TLS anyway, but listening to TLS can come from a module.
it means it supports the module, but it doesn't remove the dependency of openssl.
i still think it's more streamline (we use the module approach everywhere).
you think it's misleading? or impossible?"
950720192,9320,madolson,2022-08-20T17:31:08Z,"I'll also make a point since this is an internal interface, it's an easily reversible decision. The use case I'm imagining is that we wan to change the interface, but only update one of many calling sites. Since the compiler isn't validating the interface, we don't see an error and it fails at runtime. "
950834142,9320,oranagra,2022-08-21T11:59:23Z,"ok, let's go back on this and re-add the specific (type safe) interfaces.
IIRC it's just 2 interfaces now since the other 2 were converted to a hack using global externs (outside of this interface)"
950840601,9320,oranagra,2022-08-21T12:46:24Z,"i synced with Yossi about this, and here's the summary:
* Even if sentinel will take TLS (for inbound connections) from a module, and keep using hiredis for outbound connections, it'll mean that the TLS module has to be an OpenSSL one. i.e. it'll not be able to support an s2n TLS module since hiredis would be incompatible with it.
* For distros to compile and ship redis with TLS as a module (rather than static), won't be beneficial, as long as sentinel is still hard-linked with OpenSSL.
* We argue that Sentinel can't support connection modules at all (not just TLS), since (for now), these only control the inbound connections, but not the outbound (that's currently handled by hiredis).

This leaves with two options:
1. when compiling redis with TLS as a module, just avoid building sentinel at all (leave sentinel completely unsupported in that build).
2. when compiling redis with TLS as a module, build sentinel with only basic TCP support and no TLS capability.

we choose option [2], which i think is what currently implemented in this PR, with two possible required changes:
1. i see you removed the execution of the sentinel test suite in this mode, but i think we should still execute it, just do that without TLS.
2. maybe we should revert some of the changes we did in server.c with regards to allowing sentinel to load modules (that applies to any modules, not just connection modules)."
951289503,9320,oranagra,2022-08-22T10:48:48Z,i noticed this got reverted
951296028,9320,oranagra,2022-08-22T10:56:05Z,"@pizhenwei i see you added a piece of code to prevent the TLS module to be loaded into sentinel, but i was under the impression we agreed that we won't support any module (connection or other modules) in sentinel mode.
i.e. revert REDISMODULE_CTX_FLAGS_SENTINEL and maybe some other changes we made in server.c initialization order.

the reason is that currently, any connection module loaded into sentinel will only affect the incoming connections into sentinel, and not the outgoing ones (unlike what we have for cluster and replication), so i think it makes little sense to allow sentinel to load connection modules.
do you disagree?"
951326252,9320,pizhenwei,2022-08-22T11:29:41Z,"IIRC, you mentioned that  other subsystems may be built as module too(maybe rio?)...
If I misunderstand anything, please correct me, I'll fix this in the next version."
951336241,9320,oranagra,2022-08-22T11:41:23Z,"i did say that, didn't think of sentinel at the time, in fact AFAIK it doesn't use rio (doesn't save RDB files)
maybe some day we'll want to allow sentinel to load modules (that can add commands etc), but for the moment, the main reason we did that was to allow adding connection modules, and we just realized that's not really gonna work (i.e. it only works on incoming connections, not on outgoing ones).
so i think we should revert that change."
952256594,9320,oranagra,2022-08-23T07:38:29Z,"i did this change in order to solve the startup race (because we not init the listeners after printing the PID message), but it got broken when you moved the init back to before the ""Server initialized"" print.
i'll sort it out (move the listeners init back to before the print), and push soon"
768056785,9934,moticless,2021-12-13T19:29:07Z,"build will fail, if you compile with `BUILD_TLS=yes`. Need to modify CT_TLS as well."
768057743,9934,moticless,2021-12-13T19:30:37Z,"IMO, the function become too big to follow."
768067079,9934,moticless,2021-12-13T19:42:51Z,"IMO, usually it is not a good practice to use the same variable to specify size of array and then use it as iterator.
Moreover, I think we can simplify the logic around the maximum of iterations  and discard one condition  (regarding `IOV_MAX`)."
768071736,9934,moticless,2021-12-13T19:49:48Z,"Originally, after each reply to client, the caller function, `writeToClient()`, verified whether to send the next reply. Now, multiple replies will be sent to client before the caller will have the chance to verify its breaking condition in its`while(clientHasPendingReplies(c))`. I think we should find a way to preserve original breaking condition, at least for this PR."
768076250,9934,moticless,2021-12-13T19:55:38Z,"i think you can discard this condition, for the first iteration, by having a variable that will be initialized before the loop with value of `sentlen = c->sentlen`. And by the end of first loop it will be set to zero. And simply have unconditionally: `iov_base = o->buf + sentlen;`"
768303853,9934,panjf2000,2021-12-14T04:15:59Z,done.
768308597,9934,panjf2000,2021-12-14T04:31:17Z,done.
768320331,9934,panjf2000,2021-12-14T05:07:56Z,done.
768322728,9934,sundb,2021-12-14T05:14:51Z,"It seems that this line is redundant, `iovcnt` will be reset to 0 below."
768324295,9934,sundb,2021-12-14T05:19:29Z,This piece of code can be moved into `if (sent_bytes >= 0)` so that the `sent_bytes = 0;` in the above else can also be removed.
768324775,9934,sundb,2021-12-14T05:20:55Z,"```suggestion
                next = listNext(&iter);
                serverAssert(next);
```"
768325537,9934,sundb,2021-12-14T05:23:09Z,"```suggestion
        if (listLength(c->reply) > 1) {
```"
768326692,9934,sundb,2021-12-14T05:26:15Z,"This line can be moved before `while ((next = listNext(&iter))) {`.
While we don't restrict variable definitions to the top of the list, it's cleaner to keep them all together.
BTW, `listRewind` and `while ((next = listNext(&iter)))` are better placed together."
768327343,9934,panjf2000,2021-12-14T05:28:01Z,done.
768327387,9934,panjf2000,2021-12-14T05:28:09Z,done.
768327447,9934,panjf2000,2021-12-14T05:28:21Z,done.
768327522,9934,panjf2000,2021-12-14T05:28:36Z,done.
768329014,9934,panjf2000,2021-12-14T05:32:51Z,done.
768339374,9934,panjf2000,2021-12-14T06:00:33Z,done.
768343348,9934,panjf2000,2021-12-14T06:10:29Z,"Actually, I don't think this is necessary cuz there will be always a non-NULL node when sent_bytes is not zero."
768714601,9934,sundb,2021-12-14T14:23:13Z,"It seems these codes can be removed.
The following `while (remaining)` contains this condition."
768719516,9934,sundb,2021-12-14T14:28:18Z,"Yeah, However, if `sent_bytes` is miscalculated due to a bug, it may cause `listNext` to return NULL, adding `serverAssert` is just to make the bug better exposed."
768721734,9934,panjf2000,2021-12-14T14:30:33Z,It's for `remaining == 0`.
768726403,9934,sundb,2021-12-14T14:35:25Z,"This looks a bit odd, as it recopies all the memory to a new buf."
768728921,9934,panjf2000,2021-12-14T14:38:01Z,"Yep..., this is more like an implementation of compatibility for TLS cuz there is no such a system call of `SSL_writev()`."
768778596,9934,moticless,2021-12-14T15:26:39Z,"please write unconditionally instead:
```
++iovcnt;
offset=0;
```"
768780734,9934,moticless,2021-12-14T15:28:50Z,i think we should fine tune this condition. please see my opinion above
768853835,9934,panjf2000,2021-12-14T16:45:01Z,"This is the code before I open this PR, why should we change it?"
768957821,9934,moticless,2021-12-14T18:57:34Z,Talking about `if (listLength(c->reply) > 1) {`. I think we should apply this enhancement only if first two buffers are no bigger than NET_MAX_WRITES_PER_EVENT. Please see my explanation below.
769172318,9934,panjf2000,2021-12-15T01:23:55Z,done.
769190740,9934,sundb,2021-12-15T02:15:58Z,"If this is done, the performance of tls may be affected, we may need more benchmarking to verify it."
769192699,9934,panjf2000,2021-12-15T02:21:12Z,"The current implementation for TLS increases memory copies but reduces system calls, so I think it's still an uncertain impact, we can have some benchmarks later to check it out."
769196394,9934,panjf2000,2021-12-15T02:31:56Z,"There is a constraint below, in the `while` loop, which makes sure that we don't gather more than `MAX_IOV_SIZE_PER_EVENT` == 8 `clientReplyBlock`s whose maximum size is 16KB, thus the amount of bytes being sent is in the range of [0, 8*16=128KB], I think it's done? or you want to reduce `MAX_IOV_SIZE_PER_EVENT`, like to 4?"
769759240,9934,sundb,2021-12-15T15:54:07Z,"@panjf2000 I've tried to optimize this code, and it feels like it works.
No need for `if else` anymore.
```c
            size_t remaining = *nwritten;
            listRewind(c->reply, &iter);
            while (remaining) {
                next = listNext(&iter);
                o = listNodeValue(next);
                if (remaining < (ssize_t)(o->used - c->sentlen)) {
                    c->sentlen += remaining;
                    break;
                }
                remaining -= (ssize_t)(o->used - c->sentlen);
                c->sentlen = 0;
                c->reply_bytes -= o->size;
                listDelNode(c->reply, next);
            }
```"
769781139,9934,panjf2000,2021-12-15T16:18:45Z,"@sundb 
Good job! thank you~"
769999328,9934,moticless,2021-12-15T20:00:42Z,"in the client list  `c->reply` i don't see any limitation over the size of objects . Where do you this 16KB limitation? 

The big profit of this feature is for aggregating small objects. As for the large objects, we need to be careful and preserve previous behaviour.

Regarding MAX_IOV_SIZE_PER_EVENT, I think the opposite, this value is too small and should be bigger, around 256. there are few commands that send multiple small replies that can be aggressively aggregated.  For example run COMMAND command and hunderds of tiny replies from the server that all can be aggregated into a single write/packet.
"
770003044,9934,moticless,2021-12-15T20:06:21Z,"We must distinct this feature to small packets, otherwise we risk with  stack-overflow here and multiple redundant copies of big chunks such that each time a small portion will be actually sent. 
If you still not convinced, please set-and-get a key of size 1MB and enter follow the code to get better sense."
770154878,9934,panjf2000,2021-12-16T01:17:18Z,"https://github.com/redis/redis/blob/867816003ec214840c18754be9840f1ddf4192d1/src/networking.c#L319-L353

I get the amount of 16KB from `PROTO_REPLY_CHUNK_BYTES`, it's the minimum size of a node of reply list, there could be some nodes whose sizes are greater than 16KB, but I still can't find the ""small objects"" you were talking about, I thought you have to fill a node with 16KB before moving to the next one? please inform me if I'm missing something, thanks~

@moticless "
770160601,9934,panjf2000,2021-12-16T01:33:32Z,https://github.com/redis/redis/pull/9934/commits/47aedb0cc222d1ea5ddddefe0c3cbe18194959cc
770174089,9934,sundb,2021-12-16T02:13:35Z,"@panjf2000 I actually don't like the MAX_IOV_SIZE_PER_EVENT limit, because we already have the NET_MAX_WRITES_PER_EVENT limit externally, and doing the same in `_writeToClient` looks too weird."
770266972,9934,moticless,2021-12-16T06:56:04Z,"@panjf2000 
If I get the code right, the reply `'len` can be only few bytes but it will be copied to allocated chunk of memory, no smaller than `PROTO_REPLY_CHUNK_BYTES`. But this chunk size is irrelevant to our flow - The written length in the reply buffer is still only `len` (in code: `tail->used = len; `)

@sundb 
I agree with you that having another length limitation at `_writeToClient` looks weird. But this way or another we need to limit this feature to aggregating only small replies and avoid try optimizing big ones. i hope you agree with me about this point. "
770468156,9934,sundb,2021-12-16T11:48:36Z,"@moticless Indeed, and I'm also speculating whether overly large aggregated packets might affect other connections, leading to an overall performance drop.
I ran a test, there is a very significant drop in performance.

command:
```sh
./src/redis-benchmark -n 1000000 info
```

unstable:
```
  throughput summary: 43448.04 requests per second
  latency summary (msec):
          avg       min       p50       p95       p99       max
        1.045     0.168     1.031     1.351     1.743     3.999
```

with this pr:
```
  throughput summary: 42423.21 requests per second
  latency summary (msec):
          avg       min       p50       p95       p99       max
        1.073     0.168     1.063     1.351     1.719     3.311
```"
770505491,9934,panjf2000,2021-12-16T12:43:20Z,"I also ran a benchmark test but got an exactly opposite result (Linux with 8 cores (single-threaded mode) and 32 GB mem)：

unstable:

```
Summary:
  throughput summary: 44505.77 requests per second
  latency summary (msec):
          avg       min       p50       p95       p99       max
        1.088     0.136     1.223     1.415     1.503     2.919
```

use-writev:

```
Summary:
  throughput summary: 46000.27 requests per second
  latency summary (msec):
          avg       min       p50       p95       p99       max
        1.054     0.136     1.199     1.335     1.391     2.959
```"
770512220,9934,sundb,2021-12-16T12:53:04Z,"@panjf2000 Do you use macOS? M1?
I also test on macOS, same as you.
`writev` on `macOS` will bring more performance gains than on linux.
The above test results are in ubuntu vm."
770516620,9934,panjf2000,2021-12-16T12:59:22Z,"No, I ran the benchmark test on my Linux server with 8 cores (single-threaded mode) and 32 GB mem."
770518202,9934,sundb,2021-12-16T13:01:36Z,"Ohh, Looks like it's time for me to ditch vm, every time my test results are different from everyone else's.
@moticless Can you also conduct a test?"
770629327,9934,panjf2000,2021-12-16T15:12:54Z,"This is the benchmark results from my another linux server(2 cores and 4GB mem):

```shell
redis-benchmark -n 1000000 info
```

unstable:

```
Summary:
  throughput summary: 29266.29 requests per second
  latency summary (msec):
          avg       min       p50       p95       p99       max
        1.563     0.304     1.535     2.199     2.879    19.103
```

use-writev:

```
Summary:
  throughput summary: 29857.88 requests per second
  latency summary (msec):
          avg       min       p50       p95       p99       max
        1.530     0.288     1.511     2.079     2.735    11.799
```

It should be pointed out that the benchmark results don't seem to be so stabilized each time."
770887106,9934,moticless,2021-12-16T20:07:51Z,"Hi,
I am running inside container, so don't expect shiny numbers :)

In the following scenario the unstable branch gives little better numbers: 
```
P=PR, L=LATEST (unstable)
> redis-benchmark -n 1000000 info
     avg       min       p50       p95       p99       max
P  2.777     1.248     2.719     3.799     4.655    14.527
P  2.755     0.848     2.703     3.751     4.615     9.519
L  2.698     0.952     2.639     3.735     4.471     7.039
L  2.706     0.720     2.639     3.775     4.511     9.143
```

Since I know that command COMMAND is not optimized and reply with many small writes/packets - I expected to see here dramatic improvement:
```
> ./redis-benchmark -n 10000 COMMAND
     avg       min       p50       p95       p99       max
P  26.045     2.344    24.687    45.023    57.215    72.191
L 290.851    13.680   302.847   398.079   419.327   449.279
```

In case of big packets, the numbers are more or less the same:
```
> ./redis-benchmark -n 10000 -d 1000000 -t set,get
     avg       min       p50       p95       p99       max
P   2.242     0.328     2.167     2.543     3.215    29.391
P   2.205     0.872     2.151     2.647     3.247    20.047
L   2.223     0.136     2.191     2.567     3.223    21.183
L   2.270     0.840     2.183     2.599     3.143    36.959
```
Please note that performance will be even worse against the PR in case of TLS, as we are making there additional copy. We need to fine tune the scenario of small packets while all the rest should preserve original flow.



"
770924177,9934,moticless,2021-12-16T21:12:55Z,"... Following review our reply infrastructure, I have an idea that might simplify the solution
- Can be common to TLS and non-TLS 
- and avoid from using writev() (and mocking it for TLS). 

It goes as follows:
- (As we want to optimize only for small packets) Each allocated clientReplyBlock (CRB) is usually of `size` much bigger than actually being `used`. 
- if there is more than 1 reply in the list  and there is enough free space in the first object  `(header.size-header.used)`  to include `next.used`, then
```
- totalLen = header.used
- do 
  - memcpy(next.buf, header.buf + totalLen, next.used)
  - totalLen += next.used
  - Advance next
  - until (next == NULL) or (next.used > header.size - totalLen)
- Write (header.buf, totalLen)
- Update c->reply accordingly
```
WDYT?"
771060614,9934,panjf2000,2021-12-17T02:34:55Z,"`memcpy(next.buf, header.buf + totalLen, next.used)` --> `memcpy(header.buf + totalLen, next.buf, next.used)`"
771061395,9934,panjf2000,2021-12-17T02:37:40Z,"I fail to see how this new approach is going to work better than `writev()`, after all, it does more memory copies."
771062836,9934,panjf2000,2021-12-17T02:42:13Z,"any chance that we use `writev()` only when there is a scenario with small packets and as for other cases like big packets and TLS, we just fall back to the approach it used to be?"
771085897,9934,sundb,2021-12-17T03:46:12Z,"> * (As we want to optimize only for small packets) Each allocated clientReplyBlock (CRB) is usually of `size` much bigger than actually being `used`.
> * if there is more than 1 reply in the list  and there is enough free space in the first object  `(header.size-header.used)`  to include `next.used`, then

    @moticless I don't fully understand this, if the length of replies is greater than 1,
    then the first clientReplyBlock will definitely be filled up to clientReplyBlock->size,
    it won't have any free space."
771100125,9934,panjf2000,2021-12-17T04:42:07Z,"> Please note that performance will be even worse against the PR in case of TLS, as we are making there additional copy. We need to fine tune the scenario of small packets while all the rest should preserve original flow.

cmd: `memtier_benchmark --hide-histogram --tls --cert=./tests/tls/redis.crt --key=./tests/tls/redis.key --cacert=./tests/tls/ca.crt -n 1000000 -t 1 -c 1`

I ran a benchmark on Linux and the result seemed to have a different opinion:

unstate:

```
RUN #1] Preparing benchmark client...
[RUN #1] Launching threads now...
[RUN #1 100%,  40 secs]  0 threads:     1000000 ops,   25219 (avg:   24549) ops/sec, 1.05MB/sec (avg: 1.02MB/sec),  0.04 (avg:  0.04) msec latencycycy

1         Threads
1         Connections per thread
1000000   Requests per client


ALL STATS
============================================================================================================================
Type         Ops/sec     Hits/sec   Misses/sec    Avg. Latency     p50 Latency     p99 Latency    p100 Latency       KB/sec
----------------------------------------------------------------------------------------------------------------------------
Sets         2231.78          ---          ---         0.04679         0.04700         0.07100         0.08700       171.93
Gets        22317.52       102.76     22214.75         0.03881         0.03900         0.06300         0.07900       872.77
Waits           0.00          ---          ---             ---             ---             ---             ---          ---
Totals      24549.29       102.76     22214.75         0.03953         0.03900         0.06300         0.07900      1044.70
```

use-writev:

```
[RUN #1] Preparing benchmark client...
[RUN #1] Launching threads now...
[RUN #1 100%,  40 secs]  0 threads:     1000000 ops,   25346 (avg:   24892) ops/sec, 1.06MB/sec (avg: 1.04MB/sec),  0.04 (avg:  0.04) msec latencycy

1         Threads
1         Connections per thread
1000000   Requests per client


ALL STATS
============================================================================================================================
Type         Ops/sec     Hits/sec   Misses/sec    Avg. Latency     p50 Latency     p99 Latency    p100 Latency       KB/sec
----------------------------------------------------------------------------------------------------------------------------
Sets         2263.02          ---          ---         0.04630         0.04700         0.07100         0.08700       174.34
Gets        22629.91       205.34     22424.57         0.03838         0.03900         0.05500         0.07100       888.34
Waits           0.00          ---          ---             ---             ---             ---             ---          ---
Totals      24892.93       205.34     22424.57         0.03910         0.03900         0.06300         0.07900      1062.68
```

Actually, I now tend to think that the fluctuation of bench results between unstable and use-writev is intermittent other than `COMMAND`."
771129193,9934,sundb,2021-12-17T06:17:26Z,"@panjf2000 I use `memtier` to test `COMMAND`,  and the results were the opposite of @moticless, which is weird.
unstable
```
===================================================================================================
Type          Ops/sec    Avg. Latency     p50 Latency     p99 Latency   p99.9 Latency       KB/sec 
---------------------------------------------------------------------------------------------------
Commands       128.82      1046.52800      1048.57500      1048.57500      1048.57500     29112.66 
Totals         128.82      1046.52800      1048.57500      1048.57500      1048.57500     29112.66
```

use-writev
```
===================================================================================================
Type          Ops/sec    Avg. Latency     p50 Latency     p99 Latency   p99.9 Latency       KB/sec 
---------------------------------------------------------------------------------------------------
Commands       504.70       397.42897       397.31100       528.38300       544.76700    114060.39 
Totals         504.70       397.42897       397.31100       528.38300       544.76700    114060.39
```"
771136846,9934,panjf2000,2021-12-17T06:40:24Z,"@sundb 
I think you misread his data, actually, your result is consistent with his, `use-writev` is way faster than `unstable` with `COMMAND`, the main disagreement here is a concern that `writev()` may have a negative impact on the performance of other redis commands, but according to my experiences, running benchmark test between `unstable` and `use-writev` didn't always get the stable results: sometimes `use-writev` is better, sometimes `unstable` is better..., therefore I tend to think that's due to other factors and `writev()` is ok to go."
771325969,9934,sundb,2021-12-17T11:31:36Z,"@panjf2000 @moticless I ran a test with `COMMAND` and `GET` and `SET` together, and it seems that even with both big and small packets, the small packet gives a performance improvement, after all, `COMMAND` shows a 3x performance improvement.

unstable

```
============================================================================================================================
Type         Ops/sec     Hits/sec   Misses/sec    Avg. Latency     p50 Latency     p99 Latency   p99.9 Latency       KB/sec 
----------------------------------------------------------------------------------------------------------------------------
Sets           38.38          ---          ---       477.96215       524.28700       770.04700       937.98300         2.95 
Gets          383.38         0.00       383.38       475.89085       522.23900       745.47100       937.98300        14.94 
Waits           0.00          ---          ---             ---             ---             ---             ---          --- 
Totals        421.76         0.00       383.38       476.07737       522.23900       745.47100       937.98300        17.90 
```

pr
```
============================================================================================================================
Type         Ops/sec     Hits/sec   Misses/sec    Avg. Latency     p50 Latency     p99 Latency   p99.9 Latency       KB/sec 
----------------------------------------------------------------------------------------------------------------------------
Sets          101.35          ---          ---       176.92865       161.79100       378.87900       436.22300         7.80 
Gets         1012.35         0.00      1012.35       179.69712       159.74300       387.07100       794.62300        39.46 
Waits           0.00          ---          ---             ---             ---             ---             ---          --- 
Totals       1113.70         0.00      1012.35       179.44513       159.74300       387.07100       794.62300        47.25
```"
771476246,9934,panjf2000,2021-12-17T15:20:28Z,Did you get this benchmark results from Linux or macOS？With or without TLS？
771483327,9934,sundb,2021-12-17T15:27:24Z,@panjf2000 I have only tested ubuntu without TLS.
771488733,9934,sundb,2021-12-17T15:34:18Z,"I think we need a more comprehensive test.

* Different packet sizes
  1. small packet
  2. large packet
  3. small packet and large packet mix

* Enable or disable io-threads
* With or without TLS."
771493726,9934,panjf2000,2021-12-17T15:40:56Z,"Yes, there is still a lot to do back there, I will try to accomplish more benchmarks during the weekend, thank you guys for all the efforts here, I really appreciate it.
@sundb @moticless"
771905323,9934,moticless,2021-12-19T06:48:53Z,"@panjf2000 , following reviewing the code, we can further optimize the code by involve the most often used buffer in writev as well, which is client's static buffer. (i.e. , the client has a static buffer that being reused, before attempting to malloc new buffers)

One note about performance, since time measurements might be rather inconclusive when it reaches big buffers or optimized commands, alternative approach can simply to count system-calls with `strace`.  Attaching PID and trace write() sys-call: `strace -e trace=write -p 1234`.  Or get statistics per syscall type ` strace -c -p 1234`."
771934134,9934,panjf2000,2021-12-19T11:16:56Z,"> following reviewing the code, we can further optimize the code by involve the most often used buffer in writev as well, which is client's static buffer. (i.e. , the client has a static buffer that being reused, before attempting to malloc new buffers)

You mean add `client->buf` into iovec for `writev()`?"
771935475,9934,moticless,2021-12-19T11:28:45Z,"Yes. 

I still think that this feature is effective only for small buffers alone. In case of big buffers there are much more considerations that we need to take into account."
771963626,9934,panjf2000,2021-12-19T15:18:24Z,"Please check out the latest commit which includes static buffer in the buffer queue of `writev()`, and we may want to do some new benchmark tests.
@sundb @moticless "
771971530,9934,moticless,2021-12-19T16:22:16Z,"- I don't think we need `nbuf`. we can use `IOV_MAX` (it is only 1024 entries and allocated on stack).
- If you agree with previous claim, then we can replace the two conditions with single `if(c->bufpos > 0)`
- Since the static buffer is rather small ~16KB, kernel has no problem write it in one sys-call, and much more (I tested multiple 1MBs and all written in one sys-call). Note that current implementation won't attach it to a big reply buffer that follows.
- Regarding TLS, since it is not optimized, I think we better avoid writev()
- Based on last two arguments, maybe we can writev something like that:
```
    if ((listLength(c->reply) > 0) && (connGetType(c->conn) == CONN_TYPE_SOCKET)) {
        return writeMultiBufToSocket(c, nwritten);
    }
```
Thank you"
771976340,9934,panjf2000,2021-12-19T17:06:16Z,"We can use `IOV_MAX` as the length of `iov`, but I don't think we can simply rely on `if (c->bufpos > 0)` to decide whether to use `writev()` cuz the reply list may still have multiple nodes even if the static buffer is empty."
771983255,9934,moticless,2021-12-19T18:12:41Z,"I wrote it above implicitly... since the static buffer is rather small, in the common case it will be written entirely, together with the reply buffer that follows. That is, I tried to simplified the condition, assuming that this optimization has little effect over big buffers. 
"
772315945,9934,sundb,2021-12-20T12:13:44Z,">     if ((listLength(c->reply) > 0) && (connGetType(c->conn) == CONN_TYPE_SOCKET)) {
>         return writeMultiBufToSocket(c, nwritten);
>     }

    @panjf2000 I think this judgment is right.
    The only possible edge condition is bufpos==0, and reply length is 1,
    which is actually enough to use `write`, but it feels like it makes the code more complicated.
    BTW, @moticless I actually don't like `== CONN_TYPE_SOCKET`, but I feel like we can avoid it."
772371956,9934,panjf2000,2021-12-20T13:40:18Z,So we should move the current implementation to a new function called `writeMultiBufToSocket()` and restore the old code of `_writeToClient()`?
772378026,9934,sundb,2021-12-20T13:48:38Z,"@panjf2000 Perhaps we can verify that TLS also delivers performance gains before deciding whether to revert to the old code.
I'm inclined to add the `writeMultiBufToSocket` method, the code is getting too big now."
772399923,9934,moticless,2021-12-20T14:17:40Z,"For a start, hope you agree with me that current implementation of `CT_TLS::writev()` is not adequate for big buffers and we must avoid memcpy.

One way to achieve common interface, is to modify `CT_TLS::writev()` to decide whether to use `writev()` or multiple `write()`s based on some threshold.

IMO,
If we have 16kb static buffer and 1MB reply buffer
- For `CT_Socket`, will be a single sys-call of `writev()` for both buffers (currently imp of `_writeToClient()` won't do it) . 
- For `CT_TLS`, will have two write()s (rather than memcpy and single sys-call writev().)

If we have two buffers of size 1MB, then 
- For `CT_Socket`, I think we better see two distinct `write()` - preserve previous behavior , unless we goanna put an effort to test performance (I don't think it is an interesting case to challenge and put an effort.)
- For `CT_TLS`,  will have two write()s 

"
772833521,9934,sundb,2021-12-21T05:13:34Z,"@panjf2000 I benchmarked again in the morning, and I agree with @moticless that writev's merging of large packets does not result in a significant performance gain(Or it won't bring as significant a performance gain as merging smaller packets).

My test steps.
1. create a string key of 1m
2. use `redis-benchmark -P 100 -n 10000 get key` to test so that each clientReplyBlock ~1M, and c->reply length is 100"
772902919,9934,panjf2000,2021-12-21T07:56:33Z,"Well, I guess I can set up a new function and move the new code into it, then restore the _writeToClient(), but I am concerned that there'll be duplicate code."
797644998,9934,oranagra,2022-02-02T14:11:58Z,"do we have some upper bound of the size for this allocation?
what if the user have 500mb key?

i suggest to either drop this optimization completely for TLS, and just make a look that calls connTLSWrite, or have a fallback mechanism, in which we try to count the total length and abort the count if we find more than 32k or so.

so if there are many small items, we copy them to the stack and use one connTLSWrite call.
but if there are big objects, we stop the count (avoid a long extra loop), and just callback to multiple connTLSWrite calls."
797712106,9934,oranagra,2022-02-02T15:14:24Z,"```suggestion
            /* If the static reply buffer is not empty, 
```"
797713467,9934,oranagra,2022-02-02T15:15:42Z,please add a line or two of comments in each `if` and `else` block to describe it's role and actions.
797727122,9934,oranagra,2022-02-02T15:28:42Z,"i'm not sure we need this `else`.
i understand that maybe in the case that all we have is the static buffer, we prefer to use `write` and not `writev` (it's maybe a very common case of people sending simple SET/GET commands without pipeline).
but as soon as we have a reply list, i don't think i mind always using `writev`, even if the reply list is just one node."
797741999,9934,oranagra,2022-02-02T15:42:51Z,"if we hit an empty node, i suppose we need to be sure to zero `offset` before skipping to the next.
this is probbly not a realistic scenario, but still feels right."
797744501,9934,oranagra,2022-02-02T15:45:14Z,"i don't know where you saw that buffer being refereed as ""successive"", IIRC it is called ""static reply buffer""
```suggestion
            if (c->bufpos > 0) { /* deal with static response buffer first. */
```"
797749442,9934,oranagra,2022-02-02T15:49:37Z,"i think it'll be cleaner to re-compute the data we had in that buffer, rather than rely on `iov[0]`"
797764918,9934,oranagra,2022-02-02T16:01:56Z,"when we've written more than the contents of just one buffer, we're now over incrementing `sentlen` (i.e. `remaining` represents data from several buffers).
i rather fix that, and then the `if` below doesn't need to use `>=`, just `==`.
or am i missing anything?"
797769435,9934,oranagra,2022-02-02T16:05:25Z,"if we didn't write the full buffer, don't we need to break out?
isn't doing `remaining -=` on the entire size of `iov[0].iov_len` too much?"
798187545,9934,panjf2000,2022-02-03T03:34:37Z,"There is a limitation in `_writeToClient`, it makes sure that the total amount of bytes to send won't be greater than `NET_MAX_WRITES_PER_EVENT`== 64KB."
798198990,9934,panjf2000,2022-02-03T04:14:59Z,Done.
798201539,9934,panjf2000,2022-02-03T04:24:21Z,"> isn't doing remaining -= on the entire size of iov[0].iov_len too much?

Yes, then `remaining` is less than 0, and it will skip the below `while (remaining > 0)`, which is the same effect as breaking out."
798202839,9934,panjf2000,2022-02-03T04:28:33Z,Done.
798204500,9934,panjf2000,2022-02-03T04:34:12Z,Done.
798232792,9934,panjf2000,2022-02-03T05:58:23Z,Removed.
798233599,9934,panjf2000,2022-02-03T06:00:49Z,@oranagra I think you might want to take a look here.
798274635,9934,oranagra,2022-02-03T07:09:13Z,"ok, but the limitation and the allocation are in two different functions.
or worse, this is a generic infrastructure, it can't assume anything about how it'll be used.
i.d like to implement the fallback mechanism i described, you can set the threshold to 64k so that it'll never actually run, but then it could mean we have a bunch of untested code.

p.s. looking at _writeToClient, it doesn't actually grantee anything about the size, since what it does is stop adding more nodes when you passed the 64kb limit, but it does that only after we passed it. so if we have two linked list nodes, one of 1kb, and the other of 20mb, it'l queue both.
or am i missing something?"
798281853,9934,oranagra,2022-02-03T07:23:47Z,"```suggestion
            if (remaining >= buf_len) {
```"
798291698,9934,oranagra,2022-02-03T07:41:51Z,aren't we now missing the update of `c->sentlen` in case we didn't send the full thing (an `else` for the above `if`?)
798317745,9934,oranagra,2022-02-03T08:23:29Z,"i'm not certain what to look at here.
please try to sum up the pending things.
i see two things in that discussion.
1. discussion around the maximum size that can be written using writev.
2. benchmark results, which may no longer be relevant, since i understand the static buffer wasn't part of writev when these benchmarks were run.

regarding the maximum size, is the discussion around fairness or performance?

from fairness point of view, i think the old code wasn't really fair anyway, it attempted to avoid writing more buffers into the socket if it passed NET_MAX_WRITES_PER_EVENT, but if a single buffer contained 500mb, it didn't avoid trying to write as much as the socket could take.

regarding performance, i'm not sure what there is to lose here, i didn't look into the kernels' implementation of writev, but if i assume it is as efficient, and avoids copying data, then all we need to do is:
1. avoid copying data on our side, i don't see any copy on our side apart from the code in TLS, which i think could be improved to only do that for a successive list of very short buffers.
2. if there are are series of large buffers, maybe we can avoid using writev, but i'm not sure it matters.
3. for the common case of only static buffer, after my review, we keep using the old code, that's a very common case.

please let me know which parts of this long discussion are still pending and what would you like me to respond to."
798322991,9934,panjf2000,2022-02-03T08:29:30Z,"Delete it in the latest commit by accident, added back."
798328283,9934,panjf2000,2022-02-03T08:36:54Z,"make sense, I will make a new approach based on your idea."
798407513,9934,oranagra,2022-02-03T10:11:58Z,"please add some comments before each block of code.
what it does, and in this case, also why.."
798514115,9934,panjf2000,2022-02-03T12:28:59Z,Done.
798656824,9934,sundb,2022-02-03T15:04:17Z,"Perhaps can add an assert.
```suggestion
    serverAssert(offset == cum);
    return connTLSWrite(conn_, buf, cum);
```"
801313526,9934,panjf2000,2022-02-08T06:53:23Z,"Is it necessary? From my point of view, `offset` will always be equal to cum cuz they are both the accumulation of iov lengths."
801547037,9934,yossigo,2022-02-08T11:48:07Z,"We're currently using the `SSL_MODE_ENABLE_PARTIAL_WRITE` and `SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER` flags with OpenSSL to preserve `write()` compatibility, so I'm not sure there's real value in doing any kind of aggregation that OpenSSL would do itself."
802302265,9934,oranagra,2022-02-09T06:26:10Z,"@yossigo so you suggest to chuck everything after that `if`, and let `connTLSWritev` just do repeated calls to `connTLSWrite`?

do you think there's a point to try to benchmark this?"
802334990,9934,yossigo,2022-02-09T07:31:36Z,"@oranagra Yes, I don't think we should add this mechanism without benchmarking and proving that there's real benefit in doing that. In theory it could be even counter productive, and it's possible that we'd get better results by tuning OpenSSL or using in it a different way (e.g. avoid those two mentioned flags when we have unmovable buffers and don't need `write()` compatibility)."
806625329,9934,oranagra,2022-02-15T09:30:20Z,"@yossigo looks like the current code is able to give 10% improvement for in TLS (for command that heavily depends on deferred replies)
https://github.com/redis/redis/pull/9934#issuecomment-1040043226"
806672716,9934,moticless,2022-02-15T10:19:47Z,Sorry to nag about it again :) but to me the function become too big to follow. Please move the code in this if to another static function.
806674407,9934,moticless,2022-02-15T10:21:49Z,"```suggestion
        size_t iovec_len = 0;
```"
806676281,9934,moticless,2022-02-15T10:23:57Z,Please add a comment above the function
806680301,9934,moticless,2022-02-15T10:28:15Z,"```suggestion
    size_t iovec_len = 0;
```"
806683511,9934,moticless,2022-02-15T10:31:58Z,"```suggestion
        int cum = 0;
```"
806904682,9934,panjf2000,2022-02-15T14:42:10Z,"`iovc_len` is more like the length of the iovec instead of the length of bytes, don't you think?"
806904984,9934,panjf2000,2022-02-15T14:42:25Z,ditto
806912715,9934,panjf2000,2022-02-15T14:49:09Z,Done.
806921315,9934,moticless,2022-02-15T14:56:26Z,You are right. Maybe `iov_len_sum`?
806927063,9934,panjf2000,2022-02-15T15:01:04Z,"What I have in mind is `iov_bytes_len`, is that good to you?"
806930045,9934,moticless,2022-02-15T15:03:37Z,sound good. Thanks.
806934159,9934,moticless,2022-02-15T15:07:25Z,"Please note that from hereafter the variable play a different role. To make it more readable, better to allocate new one (optimized by compiler)."
806940949,9934,panjf2000,2022-02-15T15:13:32Z,Done.
806941235,9934,panjf2000,2022-02-15T15:13:46Z,Done.
806980210,9934,panjf2000,2022-02-15T15:42:26Z,Done.
807592443,9934,moticless,2022-02-16T06:34:21Z,"Sorry if i wasn't clear enough. 

`iov_bytes_len` represent the total amount of data referenced in iov[]. In this block section we would like to use a distinct variable than `iov_bytes_len` which represents the the total amount of data that actually sent. Please use another name, maybe `iov_bytes_sent` or alike."
807597724,9934,moticless,2022-02-16T06:43:48Z,"Please mark function as static (... I know that several functions in this file could have use `static`, and yet.)"
807618122,9934,panjf2000,2022-02-16T07:23:09Z,Done.
807618202,9934,panjf2000,2022-02-16T07:23:17Z,Done.
665354516,9202,oranagra,2021-07-07T13:09:39Z,"typo?
```suggestion
    sds original_proto; /* available only for root reply */
```"
665357809,9202,oranagra,2021-07-07T13:13:34Z,"```suggestion
static void callReplyParseCollection(ReplyParser* parser, CallReply* rep, size_t len, const char* proto, size_t elements_per_entry) {
```"
665366349,9202,oranagra,2021-07-07T13:23:21Z,"I also think like Viktor, i think the docs need to move to the C file."
665396600,9202,oranagra,2021-07-07T13:56:40Z,"maybe you wanna add `bignum` and `verbatim`, i.e. `(` and `=`
and maybe `attributes` and `push` some day."
665398657,9202,oranagra,2021-07-07T13:58:46Z,"at some point, get rid of line comments `//`"
665400256,9202,oranagra,2021-07-07T14:00:23Z,"i think that's called a ""null"" response, not an ""empty bulk"""
665417429,9202,oranagra,2021-07-07T14:18:34Z,"i think that one was called ""null array"" (empty is when len == 0)"
665442527,9202,oranagra,2021-07-07T14:45:08Z,"maybe `3` should stand for RESP3? like `!` it's easier to notice it's not related to the format of the arguments.
i wish `A` and `R` would not be letters either.."
665455089,9202,oranagra,2021-07-07T14:58:36Z,"you're adding new module APIs, let's list them in the top comment."
665458871,9202,oranagra,2021-07-07T15:02:47Z,"if we add the other types (bignum, verbatim), we'll want to add them to the module API too.."
665464735,9202,oranagra,2021-07-07T15:09:32Z,"in resp2 mode, the old code would have kept representing sets and maps as arrays.
1. where is this handled in the new code?
2. do we have test coverage for this, if not, let's add."
666060794,9202,MeirShpilraien,2021-07-08T10:14:47Z,"This is a good point, but I do not think this is even possible, if resp2 is set on the client then the reply will be written as resp2 from the first place. Am I missing something?"
666061805,9202,MeirShpilraien,2021-07-08T10:16:11Z,We still need to distinguish between this and resp3 NULL ('_'). How about null_bulk?
666062132,9202,MeirShpilraien,2021-07-08T10:16:41Z,"Yep, will change it "
666063691,9202,MeirShpilraien,2021-07-08T10:19:08Z,"Good point, it was not supported by the current Lua parser."
666079847,9202,oranagra,2021-07-08T10:43:24Z,"maybe you're missing `redis.setresp()`? i.e the lua script is the one who controls the response it gets from the lua_client, not the real client that executed Lua."
666080613,9202,oranagra,2021-07-08T10:44:35Z,"sure, `null_bulk` is ok. just didn't think that ""empty"" is good because it can be confused with an array of size 0"
666087178,9202,zuiderkwast,2021-07-08T10:55:10Z,"I prefer ""array"" and ""string"" instead of ""bulk"" and ""multi bulk"", but maybe it's just my personal preference. Consistency is more important anyway.

The page https://redis.io/topics/protocol calls them ""bulk string"" and ""array"" and the null variants are ""null bulk string"" and ""null array"".

(Multi bulk is even misleading, since it's an array of any element type, not only of bulk strings.)"
666124318,9202,MeirShpilraien,2021-07-08T11:55:59Z,"Conclusion of discussion with @oranagra 

`redis.setresp` is setting the protocol on the Lua client (`server.lua_client->resp`). This means that if the user performs `redis.setresp(2)` (or uses it by default), when a command will be executed using `redis.call` it will be written to the Lua client buffer as resp2. This means that checking the protocol number of the client when parsing is redundant."
667453762,9202,MeirShpilraien,2021-07-11T09:47:49Z,Fixed
667453783,9202,MeirShpilraien,2021-07-11T09:47:55Z,Fixed
667453802,9202,MeirShpilraien,2021-07-11T09:48:04Z,Fixed
667454266,9202,MeirShpilraien,2021-07-11T09:51:32Z,"I added `verbatim` and `bignum`, do you want me to add also `attributes` on this PR?
Regarding `push` not sure it's relevant for Lua and Modules but I agree the parser needs to handle it, should I add it to the parser on this PR?"
667454278,9202,MeirShpilraien,2021-07-11T09:51:47Z,Fixed
667454416,9202,MeirShpilraien,2021-07-11T09:52:46Z,"Ended up with:
1. null_bulk_string
2. null_array
Let me know if you think its OK"
667454427,9202,MeirShpilraien,2021-07-11T09:52:58Z,See comment above
667454446,9202,MeirShpilraien,2021-07-11T09:53:05Z,Fixed
667454486,9202,MeirShpilraien,2021-07-11T09:53:25Z,Will do once I will update the top comment
667454504,9202,MeirShpilraien,2021-07-11T09:53:36Z,Done
667468048,9202,oranagra,2021-07-11T11:41:02Z,"bignum and attributes are currently totally missing from redis, so adding them is maybe not a must. although maybe the first to use them will be modules (who may have more rapid development schedule or cutting edge), so it's good to have them.

regarding push, that one is already in use in redis, it is currently quite complicated to find a way for modules to generate them (they need to write into other client's output buffer at the right time, not just reply to the current one).
but the parsing part is quite simple, so yet, let's handle it in this PR (and list in the top comment)."
667959480,9202,oranagra,2021-07-12T14:03:15Z,"considering attributes are inherently a map, maybe it's sufficient to document that, and let the caller use the map API?
same goes for the CallReply interface."
667960385,9202,oranagra,2021-07-12T14:04:20Z,can we improve the test so that the script actually looks at the attributes?
667965748,9202,MeirShpilraien,2021-07-12T14:11:03Z,What if one day we will want to change implementation for attributes?
667967102,9202,MeirShpilraien,2021-07-12T14:12:36Z,"As mentioned on top comments, attributes are not expose to the script and I leave it to another PR after we decide how to expose them. This is just check the parser handles them and scripting.c jusy ignores then..."
667969836,9202,oranagra,2021-07-12T14:15:43Z,"the spec documents that they're a map so that's not gonna change.
i suppose we'll still be able to add some flag in the reply object to denote that it's an attribute map, and we'll still be able to write different logic to handle them inside the same API.

this is just an idea, i suppose unifying them can even confuse people (until the notice the documentation that explains it).
if you don't feel it's good, we can drop it."
667971030,9202,oranagra,2021-07-12T14:17:05Z,"ohh, right..
well, i suppose it's a good idea to also leave a comment in the code (maybe both in the test and in the implementation)"
667983381,9202,oranagra,2021-07-12T14:30:50Z,"```suggestion
```"
667985000,9202,oranagra,2021-07-12T14:32:39Z,"```suggestion
```"
667987000,9202,oranagra,2021-07-12T14:34:58Z,"we can call `addReplyProto` and save the extra mallc,free,memcpy
```suggestion
    addReplyProto(c,proto, proto_len);
```"
667989839,9202,oranagra,2021-07-12T14:38:08Z,"i'd rather not waste so many lines on that nonsense.
```suggestion
    if (!len) len = &private_len;
```"
667991422,9202,oranagra,2021-07-12T14:39:56Z,this needs to be documented in the top comment of `RM_Call` too
667991924,9202,oranagra,2021-07-12T14:40:30Z,"let's change the code in DEBUG PROTOCOL to use it.
and let's extend redis-cli too"
667993496,9202,oranagra,2021-07-12T14:42:17Z,"i hate lines 8-)
i see this file has too many spacing.
some with double space, and some with excessive single space.
IMHO space is needed so that you separate two groups each consisting of multiple lines.
please go over this file and consider removing some...
```suggestion

```"
667997365,9202,oranagra,2021-07-12T14:46:36Z,"maybe we need a way to propagate some error in case strtod fails, or the string is too long?"
668000766,9202,oranagra,2021-07-12T14:50:18Z,"maybe we should have just one API, that returns the verbatim string as return value and the format in an output argument?

same maybe applies for map and attributes key+value.
i.e one API with two return values.

WDYT?"
668003443,9202,oranagra,2021-07-12T14:53:22Z,"maybe we wanna repeat some of these tests in resp2 mode, so that we have coverage of that translation?
same goes for the module RESP tests.."
668019438,9202,MeirShpilraien,2021-07-12T15:11:47Z,I think I added it
668021389,9202,MeirShpilraien,2021-07-12T15:14:10Z,"The idea in this parser is that it does not need to handle replies error as it parse replies generated by Redis, this allowes it to be faster. You think we should handle errors anyway? (We will probably lose performance)"
668023462,9202,MeirShpilraien,2021-07-12T15:16:42Z,"I actually think that split them is better, but I will not insist, let me know if you want me to join them..."
668035556,9202,MeirShpilraien,2021-07-12T15:31:21Z,"I did not, added it to `moduleCreateArgvFromUserFormat`, will add it to RM_Call as well ..."
668107595,9202,MeirShpilraien,2021-07-12T17:07:20Z,"@oranagra , it requires updating the hiredis, seems like our current version do not have it: https://github.com/redis/redis/blob/ac8b1df8850cc80fbf9ce8c2fbde0c1d3a1b4e91/deps/hiredis/read.c#L528
While on hiredis master it exists:
https://github.com/redis/hiredis/blob/f5f31ff9b92b6bdf628716449d0d0782ceb7704a/read.c#L614

Do you want to do it on this PR or on another PR?"
668110030,9202,MeirShpilraien,2021-07-12T17:11:02Z,Fixed
668110109,9202,MeirShpilraien,2021-07-12T17:11:10Z,Fixed
668110291,9202,MeirShpilraien,2021-07-12T17:11:23Z,Fixed
668110418,9202,MeirShpilraien,2021-07-12T17:11:32Z,Fixed
668111194,9202,MeirShpilraien,2021-07-12T17:12:32Z,Will add another commit which will remove empty lines
668117421,9202,MeirShpilraien,2021-07-12T17:22:00Z,Done
668127279,9202,oranagra,2021-07-12T17:36:37Z,Only RM_ functions get their docs exported by the script... 
668129629,9202,oranagra,2021-07-12T17:40:11Z,"Let's do it in another PR. 
Need to look at the last PR that updated hiredis and see the methodology (git subtree) and also chose the right hiredis version"
668130512,9202,oranagra,2021-07-12T17:41:32Z,"I'm not sure. If the previous ones didn't handle it, and it's an api that's internal to redis (we are free to change it when we like), then we can skip that now"
668132985,9202,MeirShpilraien,2021-07-12T17:45:24Z,"The previous ones didn't handle it, and its also clearly stated on the Lua parser today: https://github.com/redis/redis/blob/ac8b1df8850cc80fbf9ce8c2fbde0c1d3a1b4e91/src/scripting.c#L124"
668171197,9202,oranagra,2021-07-12T18:45:28Z,"came here to change `give` to `given`, but ended up changing the wording. you can choose otherwise.
```suggestion
 * format, or NULL if not needed.
```"
668171894,9202,oranagra,2021-07-12T18:46:37Z,"```suggestion
 * The key and val are both output params which can be NULL (in this case they are not needed).
```"
668172131,9202,oranagra,2021-07-12T18:47:00Z,"```suggestion
 * The key and val are both output params which can be NULL (in this case they are not needed).
```"
668173568,9202,oranagra,2021-07-12T18:49:15Z,"```suggestion
 * and REDISMODULE_ERR if idx out of range or if the reply type is wrong.
 * `key` and `val` are output parameters (can be NULL if note needed) */
```"
668173735,9202,oranagra,2021-07-12T18:49:32Z,"```suggestion
 * and REDISMODULE_ERR if idx out of range or if the reply type is wrong.
  * `key` and `val` are output parameters (can be NULL if note needed) */
```"
668176248,9202,oranagra,2021-07-12T18:53:25Z,"```suggestion
 *     * `3` -- Return the reply in RESP3. This will change the command reply.
 *              e.g. HGETALL returns a map instead of flat array, 
```"
668177387,9202,oranagra,2021-07-12T18:55:09Z,"i see you added a loop for the Lua tests, can we easily add something for the module tests?
e.g. it'll test that attributes are skipped for RESP2"
668199551,9202,MeirShpilraien,2021-07-12T19:31:50Z,"@oranagra rethinking about it, I am not sure what we are testing here. We say that if resp2 is used then the reply does not even contain resp3 (map, set, double, ...). So do we want to test resp2 parsing (arrays, strings, numbers, ...), I believe this is pretty cover already no?"
668653774,9202,oranagra,2021-07-13T10:56:16Z,you now have two replies in these functions. that's bad...
668656737,9202,MeirShpilraien,2021-07-13T11:01:00Z,But the first one verifies that it returns an error and sends nothing... if it succeed the test will fail
668658801,9202,oranagra,2021-07-13T11:04:30Z,"are verbatim formats always null terminated strings? or we need to pass length with that char pointer?

i see that in the spec they don't have a specified length (like bulks), and we find them by looking for : separator.
i guess that means that they're expected to be text, and not binary data, and in that case they're not expected to have NULL in the middle.
do you agree?"
668663133,9202,MeirShpilraien,2021-07-13T11:11:28Z,"The string itself does get a len output argument. regarding the format, the spec specifies that it's always 3 chars so I thought it's not needed to give a length.

> Moreover the first three bytes provide information about the format of the following string, which can be txt for plain text, or mkd for markdown. The fourth byte is always :.

https://github.com/antirez/RESP3/blob/master/spec.md"
668726838,9202,oranagra,2021-07-13T12:44:52Z,"somewhere, salvatore had a long post about RESP3 being upper case and not a version thing (not RESP v3)
```suggestion
 * * REDISMODULE_ERR if the given reply is in RESP3 format but the client expects RESP2
 *   In case of error, it's the module writer responsibility to translate the reply
 *   to RESP2 (or maybe handle it differently by returning an error). Notice that for
 *   module writer convinient, it is possible to pass `0` as a parameter to the fmt
 *   argument of `RM_Call` so that the RedisModuleCallReply will return in the same
 *   format (RESP2 or RESP3) as the current client expects it.
```"
668728278,9202,oranagra,2021-07-13T12:46:52Z,missing documentation in the C file
668729388,9202,oranagra,2021-07-13T12:48:09Z,"```suggestion
        r hello 3
```"
669135035,9202,madolson,2021-07-13T21:51:49Z,"Should this return C_ERR otherwise? I would expect that to be corruption. I just saw Yossi's comment, you can fix it later."
669563982,9202,yossigo,2021-07-14T12:22:36Z,"```suggestion
#ifndef __CALL_REPLY_H
#define __CALL_REPLY_H
```"
669564165,9202,yossigo,2021-07-14T12:22:50Z,"```suggestion
#endif /* __CALL_REPLY_H */
```"
669564476,9202,yossigo,2021-07-14T12:23:16Z,"Please try to follow Redis code style, i.e. `CallReply *callReply` etc."
669565785,9202,yossigo,2021-07-14T12:24:56Z,Any reason not to just reply `OK` here? Many `DEBUG` commands are dangerous as it is and returning such status replies is not such a common practice.
669568377,9202,yossigo,2021-07-14T12:28:16Z,"nit: This comment block needs indentation and at least another round of review for spelling/grammar/etc. Also, please avoid tab characters."
669570625,9202,yossigo,2021-07-14T12:31:16Z,Need to handle `p==NULL`?
669571333,9202,yossigo,2021-07-14T12:32:09Z,Need to handle invalid length?
669571812,9202,yossigo,2021-07-14T12:32:49Z,Handle `p==NULL` here as well? This repeats itself.
669573392,9202,yossigo,2021-07-14T12:34:57Z,"This kind of assumptions back fire over time, I think we need a really good reason (backed by data) to create a fragile parser."
669573786,9202,yossigo,2021-07-14T12:35:29Z,Same as above.
669574272,9202,yossigo,2021-07-14T12:36:07Z,"```suggestion
    /* Called when the parser reaches an empty mbulk ('*-1') */
```"
669574319,9202,yossigo,2021-07-14T12:36:12Z,"```suggestion
    /* The current location on the reply buffer, need to set to the beginning of the reply */
```"
669574440,9202,yossigo,2021-07-14T12:36:23Z,"```suggestion
    /* Called when the parser reaches an empty bulk ('$-1') (bulk len is -1) */
```"
669574541,9202,yossigo,2021-07-14T12:36:32Z,"```suggestion
    /* Called when the parser reaches a bulk ('$'), given the bulk payload and size */
```"
669574732,9202,yossigo,2021-07-14T12:36:48Z,"```suggestion
    /* Called when the parser reaches an error ('-'), given the error message and len */
```

Repeats a few times below."
669575323,9202,yossigo,2021-07-14T12:37:34Z,"```suggestion
    /* Called when the parser reach a big number (','), the double value is given as an argument */
```"
669575808,9202,yossigo,2021-07-14T12:38:15Z,"```suggestion
    /* Called when the parser reaches a string, the value is given as an argument */
```"
669941514,9202,MeirShpilraien,2021-07-14T20:46:01Z,"Discussion summary:
we will leave error handling for another PR (because the old parser did not check for protocol correctness as well, so we are not changing the behavior). On the other PR we should add error handling code and make sure we do not see any performance regression. I guess this covers the other comments about error checking above, @yossigo please confirm."
670424062,9202,itamarhaber,2021-07-15T12:41:11Z,"Nitpick: I'd rather have everything in the non-expanded form here, i.e. `callReplyGetString`.

Also, `callReplyGetBoolean` and `callReplyGetArrayElement`."
670425262,9202,itamarhaber,2021-07-15T12:42:43Z,"```suggestion
#define REDISMODULE_REPLY_BOOLEAN 7
```"
670427763,9202,itamarhaber,2021-07-15T12:46:01Z,"```suggestion
 * A RESP parser for parsing replies returned by RM_Call or Lua's 'redis.call()'.
 * The parser introduces callbacks that need to be set by the user. Each callback
 * represents a different reply type. Each callback gets a p_ctx that was given
 * to the parseReply function. The callbacks also give the protocol (underlying blob)
 * of the current reply and the size.
 *
 * 3 special callbacks also get the parser object itself (array_callback, set_callback,
 * map_callback). This is because it's their responsibility to continue the parsing by
 * calling parseReply. When the user continues parsing he can give a different p_ctx
 * (this is used by CallReply to give the nested reply as the p_ctx). Also, notice that
 * those 3 callbacks do not get the proto len. This is because when calling those
 * callbacks the proto len is still unknown. the user can calculate the len after finish
 * parsing the entire collection.
 * ---------------------------------------------------------------------------------------- */
```

Also, ""blob"" -> ""buffer""?"
670428530,9202,itamarhaber,2021-07-15T12:47:05Z,"```suggestion
    /* The current location in the reply buffer, need to be set to the beginning of the reply */
```"
670429008,9202,itamarhaber,2021-07-15T12:47:44Z,"```suggestion
    /* Called when the parser reach a bool ('#'), the Boolean value is given as an argument*/
```"
670429431,9202,itamarhaber,2021-07-15T12:48:16Z,"```suggestion
    /* Called when the parser reaches an attribute ('|'), the attribute map size is given as an argument*/
```"
670429637,9202,itamarhaber,2021-07-15T12:48:32Z,"```suggestion
    /* Called when the parser reaches a null ('_') */
```"
670430214,9202,itamarhaber,2021-07-15T12:49:22Z,"```suggestion
    int lua_disable_deny_script; /* Allow running commands that marked with no-script flags
```"
670431182,9202,itamarhaber,2021-07-15T12:50:39Z,Missing copyright
670432074,9202,itamarhaber,2021-07-15T12:51:49Z,"```suggestion
 * analyze replies that are returned from RM_Call.
```"
670433670,9202,itamarhaber,2021-07-15T12:53:49Z,"```suggestion
    sds original_proto; /* Available only for root reply. */
```"
670433852,9202,itamarhaber,2021-07-15T12:54:03Z,"```suggestion
    int flags;      /* REPLY_FLAG... */
```"
670434463,9202,itamarhaber,2021-07-15T12:54:50Z,"```suggestion
    size_t len;     /* Length of a string, or the number elements in an array. */
```"
670435277,9202,itamarhaber,2021-07-15T12:55:52Z,"```suggestion
        const char *str; /* String pointer for string and error replies. This
                          * does not need to be freed, always points inside
                          * a reply->proto buffer of the reply object or, in
                          * case of array elements, of parent reply objects. */
```"
670435790,9202,itamarhaber,2021-07-15T12:56:30Z,"```suggestion
        } verbatim_str;  /* Reply value for verbatim string */
```"
670436588,9202,itamarhaber,2021-07-15T12:57:32Z,"```suggestion
/* Recursivally free the current call reply and its sub-replies. */
```"
670437715,9202,itamarhaber,2021-07-15T12:58:57Z,"```suggestion
/* Free the given call reply and its children (in case of nested reply) recursively.
 * If private data was set when the CallReply was created it will not be freed, it's
 * the user's responsibility to free it before freeing the CallReply. */
```"
670438419,9202,itamarhaber,2021-07-15T12:59:56Z,"```suggestion
/* Parsing the buffer located on rep->original_proto as CallReply
 * using ReplyParser. */
```"
670438724,9202,itamarhaber,2021-07-15T13:00:24Z,"```suggestion
/* Return the call reply type (REDISMODULE_REPLY_...). */
```"
670722013,9202,itamarhaber,2021-07-15T18:47:09Z,"```suggestion
/* Return reply as string and len. Applicabale to:
 * - REDISMODULE_REPLY_STRING
 * - REDISMODULE_REPLY_ERROR
 *
 * The returned value is only borrowed and its lifetime is
 * as long as the given CallReply's.
 * The returned value is not NULL-terminated and it's mandatory to
 * give the len argument. */
```"
670722737,9202,itamarhaber,2021-07-15T18:48:16Z,"```suggestion
/* Return long long value of the reply. Applicable to:
 * - REDISMODULE_REPLY_INTEGER
 */
```"
670723129,9202,itamarhaber,2021-07-15T18:48:52Z,"```suggestion
/* Return double value of the reply. Applicable to:
 * - REDISMODULE_REPLY_DOUBLE
 */
```"
670723631,9202,itamarhaber,2021-07-15T18:49:41Z,"```suggestion
/* Return Boolean value of the reply. Applicable to:
 * - REDISMODULE_REPLY_BOOL
 */
```"
670724157,9202,itamarhaber,2021-07-15T18:50:30Z,"```suggestion
/* Return reply length. Applicabale to:
 * - REDISMODULE_REPLY_STRING
 * - REDISMODULE_REPLY_ERROR
 * - REDISMODULE_REPLY_ARRAY
 * - REDISMODULE_REPLY_SET
 * - REDISMODULE_REPLY_MAP
 * - REDISMODULE_REPLY_ATTRIBUTE
 */
```"
670725038,9202,itamarhaber,2021-07-15T18:51:55Z,"```suggestion
/* Return array reply element at a given index. Applicable to:
 * - REDISMODULE_REPLY_ARRAY
 *
 * The returned value is only borrowed and its lifetime is
 * as long as the given CallReply's. In addition, there's no need
 * to manually free the returned CallReply, it will be freed when
 * the root CallReplied is freed. */
```"
670725767,9202,itamarhaber,2021-07-15T18:53:09Z,"```suggestion
/* Return set reply element at a given index. Applicable to:
 * - REDISMODULE_REPLY_SET
 *
 * The returned value is only borrowed and its lifetime is
 * as long as the given CallReply's. In addition, there's no need
 * to manually free the returned CallReply, it will be freed when
 * the root CallReplied is freed. */
```"
670728027,9202,itamarhaber,2021-07-15T18:55:29Z,"```suggestion
/* Retrieve map reply key and value at a given index. Applicable to:
 * - REDISMODULE_REPLY_MAP
 *
 * Both key and val are output params that can be NULL (in case they are not needed).
 * Returns C_OK on success, or C_ERR if reply type is wrong or if idx is out of range.
 *
 * The returned values are only borrowed and their lifetime is
 * as long as the given CallReply's. In addition, there's no need
 * to manually free the returned CallReplies, it will be freed when
 * the root CallReplied is freed. */
```"
670729356,9202,itamarhaber,2021-07-15T18:56:49Z,"```suggestion
/* Return reply attribute if exists or NULL. Applicable to all reply types.
 *
 * The returned value is only borrowed and its lifetime is
 * as long as the given CallReply's. In addition, there's no need
 * to manually free the returned CallReply, it will be freed when
 * the root CallReplied is freed. */
```"
670730792,9202,itamarhaber,2021-07-15T18:58:49Z,"```suggestion
/* Retrieve attribute reply key and value at a given index. Applicable to:
 * - REDISMODULE_REPLY_ATTRIBUTE
 *
 * Both key and val are output params that can be NULL (in case they are not needed).
 * Returns C_OK on success, or C_ERR if reply type is wrong or if the idx is out of range.
 *
 * The returned values are only borrowed and their lifetime is
 * as long as the given CallReply's. In addition, ther's no need
 * to manually free the returned CallReplies, it will be freed when
 * the root CallReplied is freed.
 */
```"
670731464,9202,itamarhaber,2021-07-15T18:59:57Z,"```suggestion
/* Return big number reply value. Applicable to:
 * - REDISMODULE_REPLY_BIG_NUMBER
 *
 * The returned value is only borrowed and its lifetime is
 * as long as the given CallReply.
 * The returned value is promised to be a big number as described
 * in the RESP3 specification.
 * The returned value is not NULL-terminated and it's mandatory to
 * give the len argument. */
```"
670732473,9202,itamarhaber,2021-07-15T19:01:35Z,"```suggestion
/* Return verbatim string reply value. Applicable to:
 * - REDISMODULE_REPLY_VERBATIM_STRING
 *
 * The optional output argument can be given to get a verbatim reply
 * format, or can be set NULL if not needed.
 *
 * The returned value is only borrowed and its lifetime is
 * as long as the given CallReply's.
 * The returned value is not NULL-terminated and it's mandatory to
 * give the len argument. */
```"
670732975,9202,itamarhaber,2021-07-15T19:02:22Z,"```suggestion
/* Return the current reply blob. The return value is borrowed
 * and can only be used as long as the CallReply isn't freed.
 *
 * The returned value is only borrowed and its lifetime is
 * as long as the given CallReply's. */
```"
670733299,9202,itamarhaber,2021-07-15T19:02:55Z,"```suggestion
/* Return CallReply private data as it was given when the reply was
 * created using callReplyCreate. */
```"
670733495,9202,itamarhaber,2021-07-15T19:03:17Z,"```suggestion
/* Return true if the reply or one of its children format is RESP3. */
```"
670734207,9202,itamarhaber,2021-07-15T19:04:26Z,"```suggestion
/* Create a new CallReply struct from the give reply blob.
 * The function takes ownership over the reply blob, which means
 * that it should not be used after calling this function.
 * The reply blob will be freed when the returned CallReply
 * object is freed using freeCallReply.
 *
 * The given private_data can be retrieved from the
 * returned CallReply object or any of its children (in case
 * of a nested reply) using callReplyGetPrivateData. */
```"
670735333,9202,itamarhaber,2021-07-15T19:06:23Z,"```suggestion
 * - REDISMODULE_OK on success.
```"
670736946,9202,itamarhaber,2021-07-15T19:08:55Z,"```suggestion
 * - REDISMODULE_ERR if the given reply is in RESP3 format but the client expects RESP2.
 *   In case of an error, it's the module writer responsibility to translate the reply
 *   to RESP2 (or handle it differently by returning an error). Notice that for
 *   module writer convenience, it is possible to pass `0` as a parameter to the fmt
 *   argument of `RM_Call` so that the RedisModuleCallReply will return in the same
 *   protocol (RESP2 or RESP3) as set in the current client's context. */
```"
670737540,9202,itamarhaber,2021-07-15T19:09:54Z,"```suggestion
        /* The reply is in RESP3 format and the client is RESP2,
         * so it isn't possible to send this reply to the client. */
```"
670737904,9202,itamarhaber,2021-07-15T19:10:29Z,"```suggestion
 * An optional output argument can be given to get verbatim reply format. */
```"
670738113,9202,itamarhaber,2021-07-15T19:10:49Z,"```suggestion
/* Return the Boolean value of a Boolean reply. */
```"
670738649,9202,itamarhaber,2021-07-15T19:11:44Z,"```suggestion
 * `key` and `val` are output parameters (can be set to NULL if not needed). */
```"
670738879,9202,itamarhaber,2021-07-15T19:12:07Z,"```suggestion
  * `key` and `val` are output parameters (can be set to NULL if note needed). */
```"
670739241,9202,itamarhaber,2021-07-15T19:12:44Z,"```suggestion
 *              e.g. HGETALL returns a map instead of a flat array.
```"
670739599,9202,itamarhaber,2021-07-15T19:13:19Z,"```suggestion
 *     * `0` -- Return the reply in auto mode, i.e. the reply format will be the
 *              same as the client attached to the given RedisModuleCtx. This will
 *              probably used when you want to pass the reply directly to the client.
```"
670739750,9202,itamarhaber,2021-07-15T19:13:36Z,"```suggestion
        /* Auto mode means to take the same protocol as the ctx client. */
```"
670741492,9202,itamarhaber,2021-07-15T19:16:28Z,"```suggestion
    /* Parse the attribute reply.
     * Currently, we do not expose the attribute to the Lua script so
     * we just need to continue parsing and ignore it (the NULL ensures that the
     * reply will be ignored). */
```"
670741647,9202,itamarhaber,2021-07-15T19:16:44Z,"```suggestion
    /* Parse the reply itself. */
```"
670795476,9202,zuiderkwast,2021-07-15T20:49:18Z,"@itamarhaber I think you mean expanded, non-abbreviated?"
670818224,9202,madolson,2021-07-15T21:30:23Z,Why not call this resp_parser? That is what it is right?
671882172,9202,MeirShpilraien,2021-07-18T18:48:05Z,Will be changed on another PR because it requires renaming
671882497,9202,MeirShpilraien,2021-07-18T18:50:46Z,"Good point, I agree it makes more sense on the API (although we never reach here..)."
672026261,9202,oranagra,2021-07-19T06:43:37Z,what's wrong with BOOL?
672032820,9202,oranagra,2021-07-19T06:55:46Z,"@itamarhaber can you tell me why you suggested these changes?
personally i do prefer less boilerplate lines. but the code is already full of these, so i'm interested to know if there's a good reason to switch the others, or keep using both..

admittedly, i see now that a prefix of `/**` only exists in the APIs @MeirShpilraien added in the past.
but closing the `*/` in a separate line (which i also dislike, specifically on short comments), exists everywhere."
672284662,9202,sundb,2021-07-19T13:12:55Z,"```suggestion
```
Redundant blank line."
672288811,9202,sundb,2021-07-19T13:18:14Z,"```suggestion
} ReplyParserCallbacks;
```"
672297960,9202,MeirShpilraien,2021-07-19T13:29:35Z,Thanks
672776495,9202,sundb,2021-07-20T03:17:17Z,"```suggestion
    for (size_t i = 0; i < len * elements_per_entry; i += elements_per_entry) {
```"
672785656,9202,sundb,2021-07-20T03:50:22Z,"This is confusing, because `rep->val.ll` is allowed to be `LLONG_MIN`, or whether it should be `assert`."
672821450,9202,MeirShpilraien,2021-07-20T05:43:11Z,"@sundb this is how it is today, I did not change that : https://github.com/redis/redis/blob/1895e134a77efd789b1a6daee76a6ba5ec90e516/src/module.c#L3950"
672830270,9202,sundb,2021-07-20T06:04:46Z,"if `rep->type` is `REDISMODULE_REPLY_STRING`, `callReplyGetLongLong(rep)` will return `LLONG_MIN`.
so how does the caller determine that it returned a error? `if(callReplyGetLongLong(rep) == LLONG_MIN)`?

"
672840298,9202,sundb,2021-07-20T06:27:06Z,"```suggestion
    const char *proto = callReplyGetProto(reply, &proto_len);
```"
672841092,9202,sundb,2021-07-20T06:28:44Z,"```suggestion
    addReplyProto(c, proto, proto_len);
```"
673052871,9202,MeirShpilraien,2021-07-20T11:53:03Z,"I understand what you are saying, I just mentioned that it is already like this today (and it's not like this PR breaks it). Also, the user can check the reply type to understand if it's long and not count on the result of `callReplyGetLongLong`."
674792176,9202,yossigo,2021-07-22T13:24:45Z,"@MeirShpilraien I think this should be ""Redis Labs Ltd.""."
674796762,9202,oranagra,2021-07-22T13:30:20Z,"he copied that from defrag.c
but looking at the [link](https://redislabs.com/wp-content/uploads/2020/08/privacy-policy.pdf) at the very bottom of redislabs.com website i see `Redis Labs, Inc.` at the top."
674981840,9202,oranagra,2021-07-22T16:47:56Z,"```suggestion
/* The current client uses RESP3 protocol */
```"
675003318,9202,oranagra,2021-07-22T17:19:46Z,don't we need to document all these types in RM_CallReplyType?
675004513,9202,oranagra,2021-07-22T17:21:39Z,"reminder, please document this in the top comment of the function"
680506229,9202,MeirShpilraien,2021-08-01T12:45:02Z,"Summarizing:
1. On Lua this is a dead code because Lua will never call this function when the reply is not an integer
2. Modules can do whatever they want but if the module reaches this code then it must be a bug in the module, the module has a way to check the reply type before calling this function.

I believe the correct way was to assert that the type is REDISMODULE_REPLY_INTEGER, it will hold for Lua but it might crash modules that misuse the API it might be considered a breaking change. There is no good way to return an error to the module (with the current API),  so probably the best thing to do is to keep the behavior as it is today."
680506663,9202,MeirShpilraien,2021-08-01T12:48:20Z,"Summarizing:
We decided to added resp2 and resp3 tests. Was added here: https://github.com/redis/redis/pull/9202/commits/c4fa95984b769f5b694924557891ffb247cf0907"
680506895,9202,MeirShpilraien,2021-08-01T12:49:56Z,"Cover here: https://github.com/redis/redis/pull/9202/commits/2b6cfd87189b0ef94b2280e220618140b6824818
Thanks @yossigo "
680507005,9202,MeirShpilraien,2021-08-01T12:50:51Z,Error handling summary: https://github.com/redis/redis/pull/9202#discussion_r669941514
680507051,9202,MeirShpilraien,2021-08-01T12:51:11Z,Error handling summary: https://github.com/redis/redis/pull/9202#discussion_r669941514
680517673,9202,zuiderkwast,2021-08-01T14:14:51Z,IIRC you need a blank line before the bullet list for markdown to be rendered correctly.
680531617,9202,oranagra,2021-08-01T16:03:53Z,"yes, indeed.. it screwed me up recently, here's the fixup commit as evidence: https://github.com/redis/redis-doc/commit/9877b67407317581b4381d82bd3572a095639936"
680700689,9202,MeirShpilraien,2021-08-02T06:58:21Z,"Thanks, fixed."
681325767,9202,madolson,2021-08-02T23:16:18Z,"On another thread, https://github.com/redis/redis/issues/9236, I talked with some OSS lawyers and they suggested just putting `Copyright Redis Contributors.` for new files. The copyright years are not required for the most part. Feel free to to include Redis Labs Ltd. if you feel it's important."
681326348,9202,madolson,2021-08-02T23:18:11Z,no-script*
681772712,9202,yossigo,2021-08-03T13:44:01Z,"We're also checking this issue, let's stick with what we've done so far until we have an agreement on anything new."
773936370,9974,oranagra,2021-12-22T14:38:53Z,"did you mean this?
```suggestion
/* Structure used for handling key pattern with different key
```"
773939012,9974,oranagra,2021-12-22T14:42:26Z,@guybe7 FYI 8-)
774545686,9974,oranagra,2021-12-23T12:42:23Z,maybe we can keep the search and just remember to also return that indication at the end?
774547951,9974,oranagra,2021-12-23T12:46:38Z,"```suggestion
            int end_index = spec->bs.keyword.startfrom > 0 ? argc-1: 1;
```
i suppose we don't need to look for the keyword in the command name.
and as already coded, we don't look for it in the very last arg (since the keys are expected to follow).."
774549102,9974,oranagra,2021-12-23T12:48:38Z,"if `i` can be `> argc`, can it also be `< 1`?
e.g. if `startfrom` is bigger (absolute) than `argc`"
774560924,9974,oranagra,2021-12-23T13:10:54Z,"the fact that we didn't find anything using one spec, doesn't mean we should return, we should continue to the next spec."
774563665,9974,oranagra,2021-12-23T13:16:07Z,"```suggestion
        } else { /* KSPEC_FK_KEYNUM */
```"
774563952,9974,oranagra,2021-12-23T13:16:38Z,i'd rather `continue`
774567726,9974,oranagra,2021-12-23T13:23:22Z,"maybe we want to have some clamping based on argc?
i.e. i see `last` is computed like `last = first + (int)numkeys-1;`
it could be out of range, or huge in a few other places."
774568696,9974,oranagra,2021-12-23T13:25:01Z,"actually maybe we better clamp last and first too according to `argc` (not just `count`).
otherwise this loop can be long."
774570011,9974,oranagra,2021-12-23T13:27:19Z,"again, i think we should `continue` to the next spec."
774570852,9974,oranagra,2021-12-23T13:28:46Z,"could `step` be negative?
if so, we need to check `i < 1`"
774573995,9974,oranagra,2021-12-23T13:34:10Z,"in the normal `getKeysFromCommand`, the `getkeys_proc` takes priority over the metadata in the command table.
why did we decide here to try the spec before the proc?

or alternatively, if we check the keyspecs first, why bother add read and write flags to the procs?"
774575123,9974,oranagra,2021-12-23T13:36:08Z,i didn't understand the question
774575762,9974,oranagra,2021-12-23T13:37:21Z,"i'm not certain if all the users of this method use these keys for just READ.
maybe some that don't pass `storeKeyOfs`, use the others for write too?
since this is a ""generic"" function, maybe the flags should be passed from outside?"
774608882,9974,oranagra,2021-12-23T14:35:12Z,"since SORT can read from various ""random"" keys, we have to add explicit ACL code in sortCommand, like we do in scriptVerifyACL and execCommand"
774608913,9974,oranagra,2021-12-23T14:35:15Z,"@guybe7 i just noticed that the json file for SORT_RO doesn't mention INCOMPLETE.
in SORT the write key does mention it, but we can actually also read from more keys"
774690949,9974,oranagra,2021-12-23T17:04:50Z,my monitor is wide and narrow 8-). i'd like to be able to fit two more lines in.
774691537,9974,oranagra,2021-12-23T17:06:05Z,"come to think of it, we can reduce both width and height by using early return and continue, instead of nested `if`s.
:smile: "
774696669,9974,oranagra,2021-12-23T17:16:40Z,"let's add a short top comment. and also maybe refer to what ""op"" means (""operation"", may not be immediately clear).
maybe add that to the doc of the function below.

it may be especially confusing since both these functions take `op` and `oplen` but they contain different things.
i.e. IIUC one is a single op and it's string len, and the other is a list of space delimited ops (and the string len of that)

i also see that we assume the input in this one is wrapped by parenthesis, which we strip? let's mention that too."
774708527,9974,oranagra,2021-12-23T17:44:12Z,"change to what? it's an invalid syntax, what other options we have?"
774712499,9974,oranagra,2021-12-23T17:53:49Z,"also maybe we should block repeated uses or `R` and `W` and error on them?
p.s. maybe we should be case-insensitive?"
774714859,9974,oranagra,2021-12-23T17:59:19Z,please update redis.conf docs
774720051,9974,oranagra,2021-12-23T18:12:26Z,"i'm a little confused why we have both this function and the one above it (ACLCheckKey).
seems like we wanna expose just one that has a loop and checks both the default, and a loop on all selectors.
seems like exposing ACLCheckKey (as non static) is dangerous (someone may call it, and it'll look like it's working but will be incomplete)"
774721731,9974,oranagra,2021-12-23T18:16:41Z,leftover from debugging?
774722339,9974,oranagra,2021-12-23T18:18:11Z,"are pubsub using just the default selector?
do we have anything that's validating the users don't attempt to provide pubsub rules in non-default selectors?"
774741914,9974,oranagra,2021-12-23T19:12:10Z,"adding a review comment so we don't forget this, and can resolve it when done."
774742585,9974,oranagra,2021-12-23T19:14:17Z,"please add a comment above the block to describe what it does (compose the `upcoming` list).
.. easier to read and skip when big chunks of code have a title."
774742805,9974,oranagra,2021-12-23T19:14:54Z,don't forget to clean these prints up when done (few more below)
774743142,9974,oranagra,2021-12-23T19:15:55Z,i'd rather avoid these two line breaks (since we're changing these lines anyway due to indentation)
774744029,9974,oranagra,2021-12-23T19:18:24Z,"shouldn't it be the other way around?
i.e. exit with OK as soon as we found a match, and exit with error if the loop gets exhausted. "
774745332,9974,oranagra,2021-12-23T19:22:20Z,"""closest"" means ""most detailed""?
maybe add some comment explaining what we aim for...
p.s. don't we also need to keep the correct `idxptr` of the error we choose to propagate upwards?
(i suppose the same command can't do both keys and channels, so i guess it's just a theoretical problem, but it stands out when looking at the coed)"
774747131,9974,oranagra,2021-12-23T19:27:20Z,"please add a top comment.

p.s. maybe a more appropriate name would be aclAddReplySelectorDescription?
the ""Get"" in the title made me think this method returns something to the caller."
774748692,9974,oranagra,2021-12-23T19:31:48Z,"it's odd (and dangerous) that the map len is set here, but some of the fields are actually part of aclGetUserAddSelectorReply.
i would suggest to use differed reply and have aclGetUserAddSelectorReply return the count, but i know it comes with a performance overhead (many small packets and `write` system calls).
so maybe a comment can resolve that..."
774751933,9974,oranagra,2021-12-23T19:41:23Z,"i'm not sure i understand it, and if i do, i'm not sure it's necessary or desired to support that.
maybe after i read the test code i'll understand better."
774752984,9974,oranagra,2021-12-23T19:44:43Z,please describe the interface change to GETUSER and any others in the top comment of the PR (easier review and release notes)
774753734,9974,oranagra,2021-12-23T19:46:50Z,what's the purpose of these? maybe you wanna use `assert_error` (to verify you're getting the right error)
774755109,9974,oranagra,2021-12-23T19:50:59Z,"would be better to convert the response to dict, and fetch the intended fields, rather than rely on hard coded indexes."
776108485,9974,madolson,2021-12-29T00:05:14Z,"A more descriptive error, I was indecisive at the time. "
776108558,9974,madolson,2021-12-29T00:05:36Z,Both makes sense to me.
776108612,9974,madolson,2021-12-29T00:06:02Z,Yup
776111892,9974,madolson,2021-12-29T00:27:47Z,"I don't think this function needs to be high performance, I'm happy doing the deferring."
776112682,9974,madolson,2021-12-29T00:33:20Z,"In my defense, I just copied it verbatim from guy, so we can blame him :)"
776695420,9974,yossigo,2021-12-30T11:58:10Z,"```suggestion
    /* The bit in allowed_commands is set if this selector grants the right to
     * execute this command.
```"
780872813,9974,madolson,2022-01-10T03:01:13Z,"I couldn't find any existing cases where step is negative, perhaps @guybe7 wants to weigh in."
780873222,9974,madolson,2022-01-10T03:03:47Z,"Now that I understand this better, I believe we want to trust the specs over the procs here. I will omit adding the flags."
780873450,9974,madolson,2022-01-10T03:05:21Z,😖 
780873599,9974,madolson,2022-01-10T03:06:20Z,"Now that I understand better, it's really just the incomplete flag we need to handle. So I will make sure sort and migrate implement flags."
780874128,9974,madolson,2022-01-10T03:09:21Z,This seems like an independent bug that maybe we can pull out of this PR.
781139994,9974,oranagra,2022-01-10T12:14:48Z,i think i was wrong... it's `lastkey` and `limit` that can be negative with some special meaning.
781142299,9974,oranagra,2022-01-10T12:18:35Z,"there are some cases where the specs are limited (can't find all keys).
specifically MIGRATE, when the the AUTH password is ""KEYS"".
since this is for ACL, maybe we can't afford to make any compromises here?
maybe we wanna use the `incomplete` flag, to decide between these approaches?
i.e. always prefer the key-specs, unless the `incomplete` flag is present, in which case we make the `getkeys_proc` mandatory.
@guybe7 WDYT?"
781143127,9974,oranagra,2022-01-10T12:19:58Z,ohh great... reading it after i posted a similar comment here: https://github.com/redis/redis/pull/9974#discussion_r781142299
781144681,9974,oranagra,2022-01-10T12:22:23Z,"if this wasn't about a security topic, i would mind leaving it behind... but since it is, i think we must handle it.
we can leave it out of this PR, and handle in a followup PR after this one is merged.
in which case, please add a ToDo checkbox in the top comment, to open a separate PR / issue for it."
781162246,9974,oranagra,2022-01-10T12:48:00Z,"so we're gonna add `incomplete` flag on the read key-spec on both SORT and SORT_RO, as part of **this** PR, right?"
783221334,9974,guybe7,2022-01-12T16:07:25Z,"yes, prefer key-specs, unless one of them has ""incomplete"""
783556894,9974,madolson,2022-01-13T01:10:10Z,Sure.
783557813,9974,madolson,2022-01-13T01:12:46Z,"In either case, I defined the logic to be the first ""key/channel"" that was not matched by any selector. That should also handle the case if modules want to define a command that touches both."
783557913,9974,madolson,2022-01-13T01:13:02Z,I'll add a top comment for this.
783656255,9974,madolson,2022-01-13T06:13:45Z,"Based on other communication, I think if there is an incomplete flag we want to abort and go to the authority which is the function call."
783656935,9974,madolson,2022-01-13T06:15:29Z,"I think they were in the draft, they should loop over selectors now."
783657493,9974,madolson,2022-01-13T06:16:51Z,The logic was rewritten to hopefully be clearer now. 
783659788,9974,madolson,2022-01-13T06:22:51Z,"I added some more docs here and took the suggestion to make them static. I also moved selectors internal to acl.c, since they shouldn't be exposed outside of the acl code. They're basically an implementation detail."
783666347,9974,oranagra,2022-01-13T06:39:31Z,"i'm thinking of this function in a more generic term.
it's purpose is to find all the keys and return an indication of the flags, and it can someday be used elsewhere.
so i'd prefer to conclude the search and find all the keys that could be found.
if we want an early abort optimization, maybe that could be an input flag?
if not, let's at least make sure the function's top comment mentions that the search is aborted early as soon as this flag is found."
783972974,9974,oranagra,2022-01-13T13:48:51Z,"i think the term ""root"" may be misleading here, please elaborate a bit on what ""root"" means."
783978148,9974,oranagra,2022-01-13T13:54:39Z,"```suggestion
/* ACL selectors are private and not exposed outside of acl.c. */
```"
784054703,9974,oranagra,2022-01-13T15:15:47Z,"i'd like to find a better name for this operator.
at first, i didn't like the `no-` prefix, since it's actually an operation (like 'reset'), but then i realize `nopass`, which i guessed this is modeled after, but this is actually more similar to `resetoass` than `nopass`.

besides but two differences:
1. it uses `-` while `nopass` / `resetpass` is one word.
2. it's too damn long.

so how about `resetselectors`, `clearselectors`, or `resetsel`, where the documentation will say it only resets the secondary selectors?
or alternatively, we can add both `resetsel`, and `reset2ndsel`"
784056135,9974,oranagra,2022-01-13T15:17:18Z,"p.s. here (unlike in redis.conf), maybe the term ""root"" user permissions is ok. but still maybe it's better being more verbose and explain it (copy paste from redis.conf)"
784071693,9974,oranagra,2022-01-13T15:33:05Z,"```suggestion
                    ""%s:%d: Unmatched parenthesis in selector definition."",
```"
784091097,9974,oranagra,2022-01-13T15:53:24Z,debugging print?
784111043,9974,oranagra,2022-01-13T16:14:54Z,"i'm trying to understand this change, maybe need some help.
in the past, there was a `continue` in the `argc` loop, now there's a `break`.
then, the outer `lines` loop has a `continue` that wasn't there before.
what's the gist of that change?"
784132726,9974,oranagra,2022-01-13T16:39:22Z,"i see you're using the non-verbose mode for the root selector, and the verbose mode for the non-root selectors.
i understand that's for backwards compatibility, but isn't that problematic?
i.e. if someone uses special read/write root selectors in the root it'll hide information form the user?

maybe it's better to use the non-verbose mode automatically when the selector is R+W? (would be backwards compatible as long as people don't use the new features).

or am i missing something and the root selector doesn't support explicit R/W modifiers?"
784149610,9974,oranagra,2022-01-13T16:58:45Z,"did you mean this?
```suggestion
 *  This command declares incomplete keys, so the flags are correctly set for this function */
```"
784150606,9974,oranagra,2022-01-13T16:59:52Z,"did you mean this?
```suggestion
/* This command declares incomplete keys, so the flags are correctly set for this function */
```"
784153053,9974,oranagra,2022-01-13T17:02:44Z,maybe add a top comment for `georadiusGetKeys` about the fact it doesn't maintain flags and why
784153287,9974,oranagra,2022-01-13T17:02:59Z,maybe add a top comment for `xreadGetKeys` about the fact it doesn't maintain flags and why
784157576,9974,oranagra,2022-01-13T17:08:18Z,"i didn't see fixes to the bugs i found in getKeysUsingKeySpecs, or changes in the logic of when getKeysFromCommand uses key-specs, vs when it uses the getkeys_proc.
i guess that's still pending?
p.s. when you edit that, take extra care when thinking about modules."
785358973,9974,madolson,2022-01-15T22:42:16Z,"I wasn't planning on updating getKeysFromCommand for this PR, did we want to do that?"
785359089,9974,madolson,2022-01-15T22:43:57Z,Sure.
785359961,9974,madolson,2022-01-15T22:57:06Z,"I don't hate clearselectors. I dislike the term reset, although used elsewhere, has confused our customers at least. I think it external documentation we can call these ""selectors"", main user has ""root permissions""."
785360224,9974,madolson,2022-01-15T23:01:41Z,@yossigo Thoughts on naming?
785360920,9974,madolson,2022-01-15T23:13:06Z,"Two things:
1) I don't know why I added error variable, that looks like a bug.
2) The previous version printed out a string that is the filename + linenumber + errmsg for each error, which can be confusing since it's not helpful. Let me pull this change out into a separate PR, since for some definition it is a backwards incompatible change."
785361045,9974,madolson,2022-01-15T23:15:33Z,"Although this may be an esoteric case, it just becomes difficult to differentiate someone having all permissions on ""%R~*"" versus someone who has read permissions on ""*"". I don't know if that's a likely outcome, but it seemed worth guarding against. The alternative I was considering was just omitting all of the keys that weren't all permissions from the root permissions. "
785361068,9974,madolson,2022-01-15T23:15:50Z,Added some new wording.
785395055,9974,madolson,2022-01-16T06:05:04Z,"I don't see the need to build pre-optimization for that case, since you should call the other function to fetch the keys."
785395195,9974,madolson,2022-01-16T06:07:32Z,"Yeah, probably."
785396473,9974,madolson,2022-01-16T06:27:07Z,"Ok, next revision is clamping to argc for last, and just continuing if first > argc."
785406056,9974,oranagra,2022-01-16T08:22:31Z,"i guess not.. if we're using `getKeysFromCommandWithSpecs` directly in ACL.
maybe we need to come up with some plan though to test that both of these are returning the same set of keys.
IIRC, Guy wrote some temp code in processCommand to try calling both and assert that they return the same (the run the full test suite and see it doesn't crash).
maybe it's a good idea to repeat that test, but also it would be nice to think of some test that can be added to the test suite."
785406489,9974,oranagra,2022-01-16T08:26:32Z,"```suggestion
#                           which are the permissions directly applied onto the
#                           user (outside the parentheses).
```"
785408524,9974,oranagra,2022-01-16T08:46:00Z,"sorry.. i didn't understand your response.
1. isn't `%R~*` and `read permissions on ""*""` the same?
2. can people use the `%R~*` notation on the root selector?
3. are you saying that in the root segment, you rather fold `%RW~` into just `~` (for backwards compatibility), and the non-root selectors you rather be explicit (i.e. user who provided `~` will get back `%RW~`)?"
785409966,9974,oranagra,2022-01-16T08:58:49Z,"by unneeded pre-optimization you mean to about the search early as soon as the incomplete flag is found (optimization)?
or keep searching to return a list as full as possible?
i.e. which one of these is unneeded?

i consider this a reference implementation of how to extract keys from key-specs, i don't know how it'll be used in the future (inside redis), and would even rather think that people will copy that code from redis to use in other projects.
thus, i'd rather let it keep the search, and not abort here."
785411138,9974,oranagra,2022-01-16T09:08:56Z,"wow, i don't recall what i meant to say here. do you?
i suppose i suggested that we need to also break when `i` is negative (when walking backwards)?
so we don't segfault in `argv[i]->ptr` below."
785411695,9974,oranagra,2022-01-16T09:13:51Z,"off by one? (last is an actual position, and argc is a count)
```suggestion
        if (last >= argc || last < first) last = argc-1;
```"
785412099,9974,oranagra,2022-01-16T09:17:23Z,"```suggestion
 *                         which are the permissions directly applied onto the
 *                         user (outside the parentheses).
```"
785413367,9974,oranagra,2022-01-16T09:27:52Z,"```suggestion
 * This function has a fully defined keyspec, so returning flags isn't needed. */
```"
785413527,9974,oranagra,2022-01-16T09:29:38Z,"```suggestion
 * This function has a fully defined keyspec, so returning flags isn't needed. */
```"
785413544,9974,oranagra,2022-01-16T09:29:53Z,"```suggestion
 * This function has a fully defined keyspec, so returning flags isn't needed. */
```"
785479496,9974,yossigo,2022-01-16T18:36:20Z,"""resetselectors"" is confusing but consistent, ""clearselectors"" also works for me."
785600007,9974,madolson,2022-01-17T02:29:43Z,"If we want this function be a complete reference implementation for fetching keys, we may want to call the get_keys_proc() here instead of aborting. "
785601773,9974,madolson,2022-01-17T02:36:52Z,"I'm not sure I originally followed what you said, but I agreed to something but didn't make a change. Doing a negative check here makes sense though."
785771522,9974,oranagra,2022-01-17T09:22:23Z,"you mean that client will replace that with a call to COMMAND GETKEYS?
i don't think i like it this way. most clients are ok with getting one key (for cluster support), and don't care if it's incomplete.
i prefer to return all what we can return, and an indication that it's incomplete."
785774259,9974,oranagra,2022-01-17T09:25:11Z,"i see you used `<0`, i think we can safely abort on `<1` (no sense in searching in the command name)"
786342898,9974,madolson,2022-01-18T00:24:08Z,Then let's provide clients with an implementation that get's one key for cluster mode support. I don't think this code should be a model for an unknown number of client implementations. This code could be much simpler if it's just searching for a single key.
786446348,9974,oranagra,2022-01-18T06:28:19Z,"i rather not maintain two implementations.
i think that with minimal changes to this one, it can serve all purposes.
i.e. add some input flags like:
1. exit ASAP as soon as an INCOMPLETE is found.
2. exit ASAP as soon as one key is found.

actually, for the first purpose, we don't even need to scan the arguments, we can just add a short 3 line function that runs on the key-specs and returns an & mask of all flags.

and we can even ignore the second purpose, users can easily edit the code and add a return as soon as one key is found.

so what i'd prefer is:
1. add a new function to extract all key-spec flags and avoid calling this one at all on commands that have INCOMPLETE.
2. remove the handling of the INCOMPLETE flag in this function, and leave the code able to extract all possible key names it can."
786924073,9974,oranagra,2022-01-18T16:19:51Z,are we sure we don't wanna just use the current user?
786973168,9974,madolson,2022-01-18T17:04:20Z,My thought was that it's slightly safer to run this since you can test on a user that is disabled and has no passwords. It makes the command a little more verbose though.
786986375,9974,oranagra,2022-01-18T17:18:53Z,"ok.. maybe it's indeed better, considering the user which we wana test may not have access to the ACL command.
and it's likely that the admin who defines the ACLs is the one which wants to test it."
786988613,9974,madolson,2022-01-18T17:21:43Z,"Fair enough, I'll update this. It's not something I care that much about."
787227237,9974,madolson,2022-01-18T23:18:29Z,"@oranagra I didn't understand this change from your other PR, this isn't the part that is incomplete, it's the next section that is."
787227623,9974,madolson,2022-01-18T23:19:21Z,I also didn't understand this change. Channels are not the same as shard channels.
787227761,9974,madolson,2022-01-18T23:19:42Z,"Also, we should make these all the same case"
787291887,9974,madolson,2022-01-19T02:01:42Z,"@oranagra I didn't quite implement your suggestion, but I did something similar. Let me know what you think:

This function has two optional search flags: GET_KEYSPEC_IGNORE_CHANNELS and GET_KEYSPEC_RETURN_PARTIAL. Channels is straightforward, but partial is used both to check for incomplete flags as well as allows for syntax checking. On syntax errors, the default behavior is now to return nothing, back like in the earlier revisions, but when GET_KEYSPEC_RETURN_PARTIAL is passed in it will still return all of the valid keys found.

Also note that in an earlier revision there was clamping, and I decided that potentially return false keys was not a good behavior. (If a client was trying to route for cluster mode, it might route to the wrong instance). So now it just continues. "
787341308,9974,madolson,2022-01-19T04:30:40Z,"Codewise this feels over-engineered, but it will make it easy to add more types of permissions in the future if we go down that route."
787380661,9974,sundb,2022-01-19T06:22:11Z,"```suggestion
    keyPattern *new = (keyPattern *) zmalloc(sizeof(keyPattern));
```"
787408357,9974,oranagra,2022-01-19T07:22:09Z,"I think SORT has two issues (each one deserves an INCOMPLETE flag due to a different reason).
it has an input keys key-spec, that's only able to find the key to sort, but is not able to find the keys behind the BY and GET patterns.
and it has an output keys key-spec (which is missing in SORT_RO), that has an INCOMPLETE flag on it's own right (maybe i'm wrong? @guybe7)

either way, i think the first INCOMPLETE, belongs to the input keys key-spec.
the other alternative is to add a 3rd spec for these BY and GET keys.
WDYT?"
787411708,9974,oranagra,2022-01-19T07:28:27Z,"my thought was that in the context of key-spec, saying these are pubsub channels is enough, and it is enough to say that they're ""channels"". i.e. normal PUBLISH channels don't have key-spec, the only reason these have, is because they're sharded.

the main reason i did that was because i wanted all key-spec flags to be short, and one word. i guess that's not a real important concern.
let me know if you feel strongly that this is a mistake, in which case we'll revert it ASAP."
787412207,9974,oranagra,2022-01-19T07:29:18Z,"yes, i see i used upper-case letters for `RW`, `RO`, and also for `INSERT`, `UPDATE`, but not for channel and incomplete.
unlike COMMAND INFO, in which case they're all lower-case, except `RW`, `RO` which are initials for two words.
i suppose we should consolidate that (COMMAND INFO and module API should be the same), which way do you prefer? "
787447243,9974,chenyang8094,2022-01-19T08:13:20Z,"I see that some places have spaces between the parameters and some are not. Whether we need to unify, I tend to have space."
787518772,9974,oranagra,2022-01-19T09:16:22Z,"i'll review it soon. but first 2 questions:
1. so it means that redis uses the PARTIAL flag (to abort on the first sign of INCOMPLETE), and if cluster clients will copy that code, they'll use partial too in order to get just one key? doesn't it mean they may get 0 keys (in case for SORT the first key-spec has the INCOMPLETE flag)?
2. don't you think that for redis, for the purpose of deciding if we wanna use the getkeys_proc or the key-specs, it's easier and faster to just add a 3 line function that iterates on all key-specs and returns a mask of all flags? (without caring about the args)"
787541122,9974,oranagra,2022-01-19T09:34:41Z,"@itamarhaber i'd like your feedback here too.
see discussion in https://github.com/redis/redis/pull/9974#issuecomment-1015318619 and https://github.com/redis/redis/pull/9974#issuecomment-1015660610

i see in the ACL GETUSER [docs](https://redis.io/commands/acl-getuser) that it says the `Note that command rules are returned as a string in the same format used with the ACL SETUSER command`, while the `keys` field is a plain list of key patterns (without the `~` DSL prefix),
so we can't use it now, and we need to choose between keeping this field (a list of all key that can be possibly accessed), or deleting / deprecating that field.

and in addition to that, we need to decide between adding a new field which has the `key-permissions` as DSL, or as currently implemented, a nested list of different permissions, each containing a list of patterns.

WDYT?"
787559769,9974,oranagra,2022-01-19T09:52:34Z,i don't think it's just the OW / UPDATE spec that's incomplete. the RO / ACCESS is also incomplete (each for a different reason)
787576982,9974,oranagra,2022-01-19T10:09:06Z,"i think we can waive on this `unknown` key-spec, and just add the INCOMPLETE flag to the other spec.
@guybe7 WDYT?

for SORT and SORT_RO, is it better to add a 3rd `unknown` key-spec (in which case maybe it doesn't have to have the incomplete flag), or just add the incomplete flag to the first spec (about the input keys).

p.s. do you remember why the output-key spec is INCOMPLETE? that stands for itself, right?"
787580172,9974,oranagra,2022-01-19T10:12:17Z,"i think this contradicts the top comment that says: `but returns the keys found in other keyspecs`.
i'd rather move this block to a different function that just returns the mask of all specs, so that we know to rely only on getkeys_proc for the ones that have any incomplete spec."
787600872,9974,oranagra,2022-01-19T10:31:09Z,"i also think the comment about the return is wrong.
should say that it returns the number of keys found.
with current code, if the PARTIAL flag is not provided, it doesn't return 0 on incomplete.
i think the incomplete flag should have nothing to do with this function."
787614753,9974,oranagra,2022-01-19T10:43:53Z,"since the moduleGetCommandKeysViaAPI api doesn't support flags, and modules can soon declare key-specs, i think we may wanna move this for last priority (only if there are no key-specs or something).
i suppose we can leave this topic for a future PR (maybe also add a variant for `RedisModule_KeyAtPos` that adds a flag).
let's open another issue for this (before we mark this comment as resolved)"
787622130,9974,oranagra,2022-01-19T10:49:43Z,"```suggestion
* The second argument of SORT is always a key, however an arbitrary number of
 * keys may be accessed while doing the sort (the BY and GET args), so the
 * key-spec declares incomplete keys which is why we have to provide a concrete
 * implementation to fetch the keys.
```"
787635133,9974,oranagra,2022-01-19T11:03:59Z,"maybe i'm missing something. these are key-spec flags, right?
why are the non-sharded pubsub listed here?"
787678053,9974,oranagra,2022-01-19T12:03:16Z,"opened an issue: https://github.com/redis/redis/issues/10144 , we can resolve this comment if you don't have any quick reply for it."
787689012,9974,oranagra,2022-01-19T12:19:28Z,"spoke to Guy, indeed the reason the key-spec for STORE is both `unknown` and `INCOMPLETE` is that during the search for the STORE keyword, we we could find the BY and GET pattern (which could be the word ""store"") and then we'll return the wrong result .
i.e. for that reason i'ts not just marked as INCOMPLETE like other specs, it avoids even attempting to find that key (hence the `unknown`.

what Guy recommended was to add a 3rd spec of `unknown` type, with `INCOMPLETE` for the GET and BY args, rather than add the INCOMPLETE flag to the first key-spec (for the key we're sorting)"
787689613,9974,oranagra,2022-01-19T12:20:16Z,"p.s. pity we can't add comments in the json files, maybe we need to add a description or comment field per keyspec"
787700163,9974,yossigo,2022-01-19T12:32:38Z,"Given that it's a new major release and this command is mostly user-facing, I say we can probably break compatibility and for every key return a tuple of (permissions, key pattern). Clients should be able to deal with both cases easily (depending on the type of every key element returned)."
787755508,9974,guybe7,2022-01-19T13:42:11Z,"SORT:
1. inpput key: regular ""range"" spec
2. BY/GET: ""incomplete"" and ""unknown""
3. STORE: ""incomplete"" and ""unknown""

SORT_RO: same as SORT, except the last one"
787797399,9974,oranagra,2022-01-19T14:26:31Z,"i now noticed this is case-insensitive compare. but still fixed it to be similar to COMMAND command, and only use capital letters for the initials"
787799961,9974,oranagra,2022-01-19T14:29:00Z,"i see that `addReplyFlagsForKeyArgs` exposes `CMD_KEY_CHANNEL` and not `CMD_KEY_SHARD_CHANNEL`, and `commandKeySpecsFlagsFromString` is the other way around.
i'm still not certain about their different roles"
787870628,9974,itamarhaber,2022-01-19T15:31:52Z,"I second the breakage - we can deprecate and replace the existing in favor of the extended.

I think that in most cases the pattern->permissions mapping is more straightforward - it seems easier for a human to understand and simpler to implement in a theoretical client."
787929458,9974,oranagra,2022-01-19T16:30:16Z,"@madolson i have some concern about the currently implemented approach.
the one we have now is that we generate 3 nested entries in the `key-permissions` map elements.
one for `read`, one for `write`, one for `all`.
but what if we add more combinations in the future (insert, delete, etc)
instead of 3 options (mask of 2 bits), we may get 7 combinations.
i'm leaning towards making the `key-permissions` field a DSL like `commands`
WDYT?"
788127412,9974,madolson,2022-01-19T20:53:02Z,"I thought they were useful to add. Shard channels aren't keys either, but we thought they were useful to be treated as keys."
788133777,9974,oranagra,2022-01-19T21:03:06Z,"But we didn't define key-specs for these commands, so they're not used.. 

Also, the reason we thought it's useful to define shard channels as keys, was to assist cluster clients, and also parts in Redis, to do their thing.. It's not needed for normal pubsub"
788136608,9974,madolson,2022-01-19T21:07:45Z,"@oranagra Do mean a single string like commands (e.g. `~foo ~bar` as a single argument) or still split into an array of individual DSL arguments? I prefer the second, which would look like:
```
 7) ""keys""
 8) 1) ""~foo""
    2) ""~bar""
```"
788200363,9974,madolson,2022-01-19T22:30:36Z,"I decided to revert this, so let's discuss later."
788200769,9974,oranagra,2022-01-19T22:31:22Z,"Let's try to imitate the `commands` field.
 
I must say I don't understand why he chose to do the keys this way.. 
Also, considering that GETUSER is the opposite of SETUSER, maybe it should have been one long dsl string, and not resp. 

But take my advice with a grain of salt, I didn't play much with the ACL commands. "
788238183,9974,chenyang8094,2022-01-19T23:47:59Z,"```suggestion
            ret = ACLSelectorCheckPubsubArguments(selector,argv, 1 , 1, 0, keyidxptr);
```"
788244998,9974,chenyang8094,2022-01-20T00:02:36Z,"```suggestion
return (cmd->proc == publishCommand ||
    cmd->proc == subscribeCommand ||
    cmd->proc == psubscribeCommand ||
    cmd->proc == spublishCommand ||
    cmd->proc == ssubscribeCommand);
```"
788297269,9974,madolson,2022-01-20T02:20:13Z,I prefer putting the boolean operator on the newline so it's clearer what operation is being done. I see it inconsistently done in Redis.
788297522,9974,madolson,2022-01-20T02:20:59Z,"I like spaces, Salvatore didn't really like spaces but I don't think he forced it, so we're in a place where it's pretty divergent."
788297559,9974,madolson,2022-01-20T02:21:07Z,Ty!
788302106,9974,madolson,2022-01-20T02:34:38Z,"Reverting this code, punting it until later."
788332888,9974,madolson,2022-01-20T03:59:28Z,Sounds good enough. Let's just make it all look the same. 
788605825,9974,hpatro,2022-01-20T10:09:33Z,Should we start mentioning `[S]PUBLISH` ?
788613643,9974,hpatro,2022-01-20T10:17:35Z,I guess it's much easier to read if we introduce a `ACL_ALL_PERMISSION`. And also has a defined value for the constant. 
788620862,9974,hpatro,2022-01-20T10:25:08Z,Why is this required? If we are already creating the selector above with the same flag ?
788625270,9974,hpatro,2022-01-20T10:29:26Z,Don't we need to privately free each selector first via `ACLFreeSelector` ?
788629358,9974,hpatro,2022-01-20T10:33:18Z,Nit: Do we want to name the variable as `selector` to be consistent across the code?
788632104,9974,hpatro,2022-01-20T10:36:38Z,Why do we need to the flag check if at the end there is only one bit operation ?
788641922,9974,hpatro,2022-01-20T10:48:45Z,Feels like a magic number. Should we define something for default flag ?
788703101,9974,hpatro,2022-01-20T12:11:21Z,Do we split at 80 chars per line ?
788958237,9974,madolson,2022-01-20T16:50:57Z,"No, listRelease will call the FreeMethod automatically, which is ACLFreeSelector."
788958443,9974,madolson,2022-01-20T16:51:10Z,"I don't split, and I've seen others not explicitly try to split it as well, when it doesn't really help readability to split. "
788959613,9974,madolson,2022-01-20T16:52:24Z,"To prevent having something like '%~WWWWWWWW' be accepted, it's just tighter input validation."
788961140,9974,madolson,2022-01-20T16:54:01Z,Don't really want to touch that here.
788963078,9974,oranagra,2022-01-20T16:56:08Z,"i think it damages readability.
- splitting at arbitrary position (offset, rather than a logical one).
- adds more lines so we get less lines fit in our screen.
- these days people have very wide monitors (and vertical screen space is needed, and there's an abundance of unused horizontal space)"
788971932,9974,madolson,2022-01-20T17:05:57Z,"@oranagra This grabs `SUNSUBSCRIBE` as well, which we don't want. I'm going to add an explicit check for that if that works. I'm also going to test this."
788986722,9974,madolson,2022-01-20T17:23:01Z,"Actually, this is missing other support for modules + channels that was also removed. We can add it back, but the functionality isn't here right now. "
789009661,9974,oranagra,2022-01-20T17:51:17Z,"I'd still argue this function belongs in db.c next to the other one. 
Also, even if modules can't yet use it (so my commit comment was false), I think conceptually it's nicer to count on key spec flags (or any other flags), rather than explicitly list function names. 
I.e. The transition we're making in other places like processCommand, to stop maintaining lists of functions, and instead define their behavior in flags. "
802922663,10273,guybe7,2022-02-09T17:34:07Z,"here we assume that if there's only one item, it must be the schema to validate each item, and we do not support an array of items with size==1.

i.e. we can't tell the difference between
```
{
      ""type"": ""array"",
      ""items"": {
          ""type"":""string""
      }
 }
 ```
 
 and
 ```
 {
      ""type"": ""array"",
      ""items"": [
            {
                ""type"":""string""
            }
      ]
 }
 ```
 
 one might argue that the latter has no use in Redis (it means that the first item in the array is a string, and we don't care about the rest. if additionalItems=false is also provided, it means the array must have exactly one element, and it's a string. both cases seem to be not useful for Redis)
"
844403626,10273,oranagra,2022-04-06T20:39:53Z,what's that?
844404496,10273,oranagra,2022-04-06T20:41:04Z,maybe we wanna include `since` field here?
855086324,10273,guybe7,2022-04-21T11:30:28Z,"it describes an object (i.e. map/dict/hash) whose values are strings (in JSON, and luckily also in Redis, the keys are always strings)"
855087390,10273,guybe7,2022-04-21T11:31:46Z,"i feel like the reply-schema should not deal with the history of the reply (that's why we have the history section of the command)
maybe @itamarhaber or @yossigo would like to chime in"
1061616673,10273,oranagra,2023-01-04T15:41:40Z,"let's add some comments, either for each, or at least for the block.
also, i think i'd like an `ifdef` for controlling this feature, i don't think it should exist in a production compilation."
1061624993,10273,oranagra,2023-01-04T15:49:21Z,"i'm not certain i understand what this value field is used for. but maybe this should be `long` or `long long`?
p.s. i've seen some commands using a type of `integer` and others use `number`."
1061634847,10273,oranagra,2023-01-04T15:57:59Z,"what are we using redisCommandRESP2Type and redisCommandRESP3Type for?
i see the schema files have references to `const`, which i don't see in either of these."
1061636163,10273,oranagra,2023-01-04T15:59:10Z,"i see the schemas never seem to provide any value, so aren't these `value.string` and `value.boolean` empty / uninitialized?
aren't we suppose to reply with the type (translate `cur->type` to text) instead?"
1061638425,10273,oranagra,2023-01-04T16:01:12Z,"i think this config should be marked as HIDDEN_CONFIG, and the other one put under `ifdef` (or maybe both should)"
1061643071,10273,oranagra,2023-01-04T16:05:45Z,"for comments that start a section, let's add some line with hyphens
```
/*----------------*/
```

or actually, maybe we should move this to a new c file?
to make it clear that it's not part of the production runtime code?"
1061652096,10273,oranagra,2023-01-04T16:14:41Z,let's use LONG_STR_SIZE?
1061657392,10273,oranagra,2023-01-04T16:19:54Z,"please go over your code and add some comments for functions and big chunks of code.
i.e. in this one you can say these are commands without a response, or change the client state to one that's excluded from this mechanism."
1061658785,10273,oranagra,2023-01-04T16:21:16Z,"let's document this file format and this separator somewhere.
maybe at the top of the dedicated file we create for it."
1061660742,10273,oranagra,2023-01-04T16:23:11Z,"why do we bother to create an iovec if we don't use writev?
instead just write them in the first loop instead of having two loops..."
1061664222,10273,oranagra,2023-01-04T16:26:43Z,"i don't think we can rely on `c->sentlen`.
seems that we need our own variable to distinguish between what we already processed and what we didn't."
1061665169,10273,oranagra,2023-01-04T16:27:36Z,"maybe comments in this function are outdated due to being copied and modified.
i think this entire function needs a rewrite."
1061666022,10273,oranagra,2023-01-04T16:28:31Z,"again outdated comments, and we probably don't need both of these functions, just one."
1061684110,10273,oranagra,2023-01-04T16:47:16Z,please add comments
1061688775,10273,oranagra,2023-01-04T16:52:01Z,"maybe we should move the implementation of the hooks (we're gonna add more of them, right?) and implicit response translators (which we're gonna add) to another file?
so it'll be easier to realize that this isn't part of the normal test suite infrastructure?
this redis.tcl is already very hard to understand, so by taking a big chunk of code out of it, we can let the reader focus on the other half."
1061690007,10273,oranagra,2023-01-04T16:53:17Z,"can we really return? don't we just wanna force the HELLO to use resp3 and let the command run?
isn't the caller expecting a response?
also, it could be that this HELLO is meant to do something else (like setting the client name)"
1061690906,10273,oranagra,2023-01-04T16:54:15Z,why did you do that change? other flows in this if-else chain just let the function return normally (with output of the last statement)
1061696377,10273,oranagra,2023-01-04T16:59:54Z,"can you explain (to me) why we need both?
if we access a global here, why do we need a per-connection variable and vice versa?

p.s. maybe it'll be nice if such functions (specifically if we'll have many of them) do something like this:
```
    if (!testing)
        return normal_response;

    # in testing mode we do... since resp3 is ... 
    something
    more
    complicated
    return
````
maybe it'll be easier to focus on the normal part separately than the special thing."
1061699672,10273,oranagra,2023-01-04T17:03:46Z,"missing some comment about what it does and for which commands.
i.e. flattern output of HRANDFIELD"
1061700849,10273,oranagra,2023-01-04T17:05:01Z,"maybe with the recent improvements you don't need these and can let the RESP2 tests run as well?
same for zset.tcl"
1061701020,10273,oranagra,2023-01-04T17:05:13Z,why did you delete this?
1061702213,10273,oranagra,2023-01-04T17:06:30Z,"lets do what we said on the call, and add a mechanism for implicit translators in redis.tcl (or another file next to it), so that we don't have to wrap each new call to XREAD that's added."
1061702626,10273,oranagra,2023-01-04T17:07:02Z,why did you have to change quote type?
1061703359,10273,oranagra,2023-01-04T17:07:53Z,let's try to resolve that with the implicit translators mechanism.
1061706672,10273,oranagra,2023-01-04T17:11:37Z,"let's add some big comment explaining*
* what it does
* for what purpose
* how to use it"
1061710317,10273,oranagra,2023-01-04T17:15:59Z,"let's add somewhere a list of validations that we do, and also include the planned ones that are yet to be implemented.
i.e.
* warn about the commands that are missing schema
* warn about about schemas that are uncovered by the tests output
* warn about replies that don't match the schema."
1066837878,10273,guybe7,2023-01-11T10:40:54Z,note: change both to debug command (also with ifdef)
1066844493,10273,guybe7,2023-01-11T10:47:39Z,"first, log the client static buffer, and then c->reply. look at redis 6.2"
1066861248,10273,guybe7,2023-01-11T11:04:39Z,"before logging argv, save the size of the reply list (list length + size of last) and the static reply buffer - these leftovers from previous commands that were not written to socket.
when logging the response, we need to start logging from offset we saved above"
1066869935,10273,guybe7,2023-01-11T11:14:12Z,"comment: key and val are the key and val of a json. in this case the json we are parsing happens to be a json schema, which also has similar key words such as type, boolean, integer, etc."
1066872484,10273,guybe7,2023-01-11T11:17:08Z,"check, remove if not used"
1066874915,10273,guybe7,2023-01-11T11:19:51Z,"1. change to long long
2. rename stuff to clarify that this structs just represent an arbitrary json file"
1066877066,10273,guybe7,2023-01-11T11:22:24Z,move all response translators to a different (new) file
1066880673,10273,guybe7,2023-01-11T11:26:43Z,"1. log current command in __dispatch__raw__ (connection var, like $::redis::response_interpreters)
2. $::redis::response_interpreters will no longer be a connection var, but rather a table mapping command name to its interpreter
3. here in this function we will find our interpreter by using the command name and said table"
1066881457,10273,guybe7,2023-01-11T11:27:37Z,will revert
1066886330,10273,guybe7,2023-01-11T11:33:19Z,"turn `!$::force_resp3 || $::redis::testing_resp3($id) == 1` into a function ""should_fake_resp2"" and comment: when forcing resp3 some tests that rely on resp2 can fail, so we have to translate the resp3 response to resp2"
1066893898,10273,guybe7,2023-01-11T11:41:51Z,"some tests use rawread to verify the line protocol, in these cases we do not intervene and just skip what's needed if force_resp3 (only the ones that test resp2)"
1066895380,10273,guybe7,2023-01-11T11:43:36Z,different PR
1066895860,10273,guybe7,2023-01-11T11:44:10Z,and tag person from blamelog
1066897150,10273,guybe7,2023-01-11T11:45:42Z,different PR
1066900981,10273,guybe7,2023-01-11T11:50:20Z,"set nullres <resp2 null>
set nullres_withscores <resp2 other null>
if not test_expects_resp3:
   // rewrite these vars"
1067094685,10273,guybe7,2023-01-11T14:57:24Z,"so far all HELLOs were just in order to change the RESP, without expecting a response
but i guess we should run anyway, and change argv[1] to be ""3"" if it's ""2"" (in the case of force_resp3)

i assume there's a test somewhere that actually verifies the response of HELLO when changing protocol, perhaps we will skip it if force_resp3"
1097262748,10273,tezc,2023-02-06T11:31:04Z,"Should this be `oneOf` ?. Otherwise, if reply is `POOOONG`, it will match the second schema. "
1097282565,10273,guybe7,2023-02-06T11:52:54Z,`POOOONG` is a legal reply for PING
1097287875,10273,tezc,2023-02-06T11:58:40Z,"oh, I didn't know that"
1104885191,10273,guybe7,2023-02-13T18:43:18Z,remove
1104885363,10273,guybe7,2023-02-13T18:43:30Z,remove
1104885524,10273,guybe7,2023-02-13T18:43:41Z,remove
1104885860,10273,guybe7,2023-02-13T18:44:04Z,remove `.tcl`
1104888323,10273,guybe7,2023-02-13T18:46:46Z,"1 and 3 are covered, added the 2nd point to the TODO in the top comment"
1105467889,10273,guybe7,2023-02-14T08:40:15Z,pinging @itamarhaber 
1105559422,10273,guybe7,2023-02-14T09:57:45Z,https://github.com/redis/redis/pull/9373/files#r1105474215
1105559668,10273,guybe7,2023-02-14T09:57:59Z,https://github.com/redis/redis/pull/11803/files
1105714643,10273,oranagra,2023-02-14T12:01:24Z,"We decided that for now, we'll avoid adding any interface changes.
we'll use the tests to validate the schema, but keep it internal to be exposed in some future date.
so this needs an `#ifdef`"
1107059405,10273,oranagra,2023-02-15T12:25:57Z,"```suggestion
 * on by the req-res-logfile config.
```"
1107060710,10273,oranagra,2023-02-15T12:27:20Z,"let's avoid ""sentinel"", to avoid confusing with the redis sentienel.
```suggestion
 * The request is everything up until the __argv_end__ marker.
```"
1107146057,10273,oranagra,2023-02-15T13:46:41Z,we don't need the zeroing since we have the memset.
1107147515,10273,oranagra,2023-02-15T13:47:43Z,"let's document this mechanism (offset saving, what it does and why).
maybe it's a good idea to add some doc comment above other (simpler) function as well."
1107153728,10273,oranagra,2023-02-15T13:52:54Z,"if we care about performance, we can use adlist bookmakrs to avoid looping though to find the first item.
but maybe we don't wanna bother since this is testing infra."
1107163108,10273,oranagra,2023-02-15T14:00:06Z,"i don't understand this.
why is the `else` needed?
is the comment about writeToClient outdated?"
1107163889,10273,oranagra,2023-02-15T14:00:46Z,why do we need fflush? we're closing it anyway...
1107169022,10273,oranagra,2023-02-15T14:05:07Z,"maybe we need a comment here.
i assume the comment where the function is implemented will describe the mechanism, but here is an odd call.
i.e. i assume should be called in `processCommand` after parsing the command and emitting the command name to the file, so why do we need it before any reply?
if it's needed here, let's explain it.
same for the call in addReplyDeferredLen"
1107171780,10273,oranagra,2023-02-15T14:07:34Z,"i don't see you added such comment where you changed the order (in replication.c), so why add one here?
if it's not important enough, let's not add anything here, and if it is, we need to add in the other places, specifically where we had to do changes."
1107190186,10273,oranagra,2023-02-15T14:22:24Z,"FYI, in most of our `switch` statement, the `case` isn't indented.
not sure i care much though."
1107191236,10273,oranagra,2023-02-15T14:23:13Z,"please `ifdef` that one, no need to waste memory on something that's not being used."
1107192149,10273,oranagra,2023-02-15T14:23:55Z,"let's add some comment before that struct, maybe with a reference to logreqres.c"
1107198789,10273,oranagra,2023-02-15T14:28:58Z,"so this part will actually be populated even when redis is compiled without the reqres debug feature, and without the code that uses it in COMMAND DOCS, right?
i might not mind another stale pointer per command, but if it is populate it could be unnecessary overhead.

we can let the python code that generates commands.c add ifdefs into the generated code.
maybe the downside could be that our CI can't catch some mistakes when PRs are made, but i'm not sure what it can catch with the current state, and if we want to catch things maybe we should address it separately, i.e. by a CI job that enables something, but without any implications for production builds."
1107211217,10273,oranagra,2023-02-15T14:38:38Z,"maybe we can move these to redis.tcl to avoid repeating them in each root file?
could have been the right thing for tlsdir as well?"
1107214147,10273,oranagra,2023-02-15T14:40:42Z,"maybe redis.tcl can include response_transformers.tcl?
the reason i wanted that in a separate file was so that it'll be easier to read, and won't clutter redis.tcl.
but for users of redis.tcl, there should be no need to include an additional file."
1107227604,10273,oranagra,2023-02-15T14:50:41Z,let's add some comment above each big block of code (for quicker reading)
1107233428,10273,oranagra,2023-02-15T14:54:53Z,"since it's a non-common path, and we don't have a lot of them, i think it would be nice to add a comment next to each place we do the transform (specifically in redis.tcl, not in response_transformers.tcl)"
1107234820,10273,oranagra,2023-02-15T14:55:54Z,"let's add a big comment at the top explaining this file.
why it is needed, what it does, and how it works."
1107238173,10273,oranagra,2023-02-15T14:58:24Z,"p.s. looking at the final outcome, i think it's quite neat (especially considering the initial approach)"
1107245159,10273,oranagra,2023-02-15T15:03:42Z,"let's consider adding an `if` in each of these units, rather than a list here.
the upside is that if one of them is cloned, it keeps the if rather than remembering to add it here.
another advantage is that the unit can include some tests and skip others.

the disadvantage would be to add many lines, and also the closing bracket (since i think we can't just early `exit` at the top.
another way could be to filter them in the tags filtering mechanism (server.tcl), and add a tag in them that they're incompatible with this mechanism.

maybe another advantage for your approach is that here there's one comment and we don't need t clone it.
not sure if any of these is better than what you did...
"
1107279725,10273,oranagra,2023-02-15T15:29:54Z,"i don't understand this, can you please explain?
maybe even better add a comment stating why it's different."
1107280589,10273,oranagra,2023-02-15T15:30:34Z,maybe we can handle that in redis.tcl like we handled doubles?
1107282401,10273,oranagra,2023-02-15T15:31:56Z,"or maybe not because it's the other way around.
i.e. RESP3 reduced the variation of replies.
so maybe we can handle that with a command specific translator?"
1107292495,10273,oranagra,2023-02-15T15:39:32Z,let's mention in the top comment that one benefit of this PR is that some tests that were only been implemented using one RESP are no doing both (even when not executing the special test mode the PR added).
1107294424,10273,oranagra,2023-02-15T15:41:01Z,"can you explain why there is a difference?
maybe better do it in a comment, for future readers.."
1107321710,10273,oranagra,2023-02-15T16:01:09Z,"whatever we decide, it goes for the change in zset.tcl as well."
1107489245,10273,oranagra,2023-02-15T17:51:30Z,"let's list all the validations this tool currently does in some comment in the code, and also add a list of additional validations we're considering in the future (i know they are in a todo bullet in the PR, but let's list them here as well)"
1107490389,10273,oranagra,2023-02-15T17:52:23Z,"please add some comments above big blocks of code in this file (classes, functions) to describe their role. e.g. in this case it's a request parser for the reqres file, right?"
1107493051,10273,oranagra,2023-02-15T17:54:21Z,let's also mention what it technically does (spins up a redis-server and uses redis-cli to get the COMMAND DOCS)
1108054238,10273,oranagra,2023-02-16T06:14:39Z,"it doesn't run the tests so what does this validator do?
if it just validates the schema is valid, we can probably keep it in ci.yml, but we'll also want one job that runs the tests and validates the replies, that one can initially be put in ci.yml, but will later need to be moved to daily or weekly."
1108206195,10273,guybe7,2023-02-16T09:16:30Z,"yes, it's here just in order to validate the schemas
before merging we will move it to daily"
1108208828,10273,oranagra,2023-02-16T09:18:50Z,"if it just validates the schema, and is quick, maybe we can keep it in ci.yml"
1108242903,10273,guybe7,2023-02-16T09:47:54Z,it's not quick (±12 minutes)
1108293680,10273,oranagra,2023-02-16T10:33:46Z,but this job doesn't run any redis tests. what's taking so long?
1108335810,10273,tezc,2023-02-16T11:14:44Z,"```suggestion
            ""description"": ""list of keys matching pattern"",
```"
1108342355,10273,tezc,2023-02-16T11:21:37Z,@oranagra see the line 89. It calls `./runtest ...`. 
1108448698,10273,oranagra,2023-02-16T13:06:12Z,"ohh, i'm blind! i was looking for it, and couldn't find it."
1108454650,10273,guybe7,2023-02-16T13:11:54Z,i think we want to keep it simple
1108495875,10273,guybe7,2023-02-16T13:45:14Z,"the memory overhead is per-command and thus constant by nature, i don't think we should be concerned about it"
1108762943,10273,guybe7,2023-02-16T16:55:59Z,"i'm not sure but i think it has too do with the fact that in RESP3 CONFIG GET returns a dict instead of a list and redis-cli emits it in a single line:

RESP2:
```
ninja@ubuntu:~/work/oss/redis$ ./src/redis-cli config get loglevel
1) ""loglevel""
2) ""notice""
```

RESP3:
```
ninja@ubuntu:~/work/oss/redis$ ./src/redis-cli config get loglevel
1# ""loglevel"" => ""notice""
```"
1108765558,10273,guybe7,2023-02-16T16:57:45Z,we decided that we don't mess with `readraw`
1111183554,10273,oranagra,2023-02-19T07:28:34Z,"it's still a lot of memory that's wasted without any reason.
imagine hundred of thousands of redis instances running a certain version, all have this overhead that's not used.
what's the downside of removing it? a few ifdefs in the python code that generates commands.c?"
1113268884,10273,guybe7,2023-02-21T16:02:05Z,"so far, the script will fail only if one of the replies doesn't comply with its schema. 
we would also like the script to fail if:
1. one of the commands in COMMANDS DOCS doesn't have the reply_schema field (can't do that for now, we want CI to pass even if some schemas are missing, because we want ti to verify the schemas we do have)
2. the testsuite didn't execute all of the commands (but that includes cluster commands, which are covered in runtest-cluster, we will need to run them both before running the validator)
3. one or more of the branches of the reply schema (e.g. oneOf, anyOf) was not hit. not sure how to do that, we will need to think of something.

let's keep that GH comment unresolved, and handle it when we are near the end (i.e. all commands have a reply_schema + we can run and validate runtest-cluster)"
1113282299,10273,oranagra,2023-02-21T16:12:54Z,"note that i think the comment can list the both current and future validations (and an indication of what's implement).
also, some validations can result in a warning print (without failing the execution), we can change from warning to error later on."
1113316705,10273,guybe7,2023-02-21T16:40:27Z,additionalProperties: false
1114288567,10273,guybe7,2023-02-22T12:59:02Z,@sjpotter why not `oneOf`?
1114294411,10273,guybe7,2023-02-22T13:04:39Z,btw I think there's a bug here... prefixItems talks about all the items (i.e. it only works just because one of the `items` happens to be a `string`)
1114364113,10273,guybe7,2023-02-22T13:59:35Z,when does this happen? STORE? STOREDIST? let's mention it
1114365742,10273,guybe7,2023-02-22T14:00:56Z,"TBH i feel that this looks better:
```
{
    ""anyOf"": [
         {
            ""description"": ""If no WITH* option is specified, array of matched members names"",
            ""type"": ""array"",
            ""items"": {
                ""description"": ""member"",
                ""type"": ""string""
            }
        },
        {
            ""description"": ""If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius"",
            ""type"": ""array"",
            ""items"": [
                {
                    ""description"": ""member"",
                    ""type"": ""string""
                },
                {
                    ""description"": ""distance"",
                    ""type"": ""number""
                }
            ]
        },
        {
            ""description"": ""If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude)"",
            ""type"": ""array"",
            ""items"": [
                {
                    ""description"": ""member"",
                    ""type"": ""string""
                },
                {
                    ""type"": ""array"",
                    ""items"": [
                        {
                            ""description"": ""latitude (x)"",
                            ""type"": ""number""
                        },
                        {
                            ""description"": ""longitude (y)"",
                            ""type"": ""number""
                        }
                    ]
                }
            ]
        },
        {
            ""description"": ""If WITHHASH option is specified, the geohash integer"",
            ""type"": ""array"",
            ""items"": [
                {
                    ""description"": ""member"",
                    ""type"": ""string""
                },
                {
                    ""description"": ""geohash"",
                    ""type"": ""string""
                }
            ]
        }
    ]
}
```

even if it's longer"
1114366841,10273,guybe7,2023-02-22T14:01:54Z,i think it may be easier for client writers as well (i.e. try to use oneOf and anyOf as far up the tree as we can)
1114521538,10273,oranagra,2023-02-22T15:37:40Z,"""ass""?"
1114539963,10273,oranagra,2023-02-22T15:49:44Z,"why did the response transformers come back to redis.tcl?
i think i suggested to include / import that file into redis.tcl (i rather not have that code actually sit in that already cluttered file)"
1114543887,10273,oranagra,2023-02-22T15:52:05Z,`onbtaoin` typo.
1114551863,10273,oranagra,2023-02-22T15:57:30Z,it's a bit odd that the error only happens if you asked for verbose.
1114630537,10273,guybe7,2023-02-22T16:38:46Z,"how comethe spell checker didn't find it?
maybe it'snot scanning .py files?
"
1114630935,10273,guybe7,2023-02-22T16:39:01Z,"yeah that's not on purpose
i'll fix"
1114632712,10273,guybe7,2023-02-22T16:40:08Z,"yes, but then there was a problem with cluster/run.tcl including redis.tcl"
1114633511,10273,guybe7,2023-02-22T16:40:38Z,i think it was because the paths are relative
1114634021,10273,guybe7,2023-02-22T16:40:57Z,"probably ""as"""
1114634528,10273,guybe7,2023-02-22T16:41:16Z,@sjpotter 
1115363883,10273,guybe7,2023-02-23T08:32:03Z,"don't forget to change to ""daily"" and add `--verbose --fail-commands-not-all-hit` to the validator args"
1115373191,10273,oranagra,2023-02-23T08:41:38Z,https://stackoverflow.com/questions/6508453/a-question-about-source-in-tcl
1115373806,10273,oranagra,2023-02-23T08:42:21Z,"the spell checker only has a black list of common spelling mistakes, it doesn't complain about anything that's not a real word."
1115767460,10273,tezc,2023-02-23T14:23:55Z,"```suggestion
```
Seems duplicate"
1115770332,10273,tezc,2023-02-23T14:26:01Z,"```suggestion
                    ""description"": ""In case the `bit` argument is 1 and the string is empty or composed of just zero bytes"",
```"
1115771589,10273,tezc,2023-02-23T14:26:58Z,"```suggestion
            ""description"": ""if the client was successfully put into or taken out of tracking mode"",
```"
1115775544,10273,tezc,2023-02-23T14:29:58Z,"```suggestion
            ""description"": ""list of keys matching pattern"",
```"
1115779527,10273,tezc,2023-02-23T14:32:59Z,"```suggestion
                    ""description"": ""A map of key-value elements when each element composed of key name and the entries reported for that key"",
```"
1115793752,10273,tezc,2023-02-23T14:42:50Z,Reminder: investigate why does this test fail?
1118027848,10273,oranagra,2023-02-26T06:32:58Z,"```suggestion
    # Obtain all the files to processes
```"
1118380557,10273,guybe7,2023-02-27T07:46:13Z,also `exit(1)` if any command from COMMAND DOCS is missing a schema (can be done even before processing the reqres files)
1125642401,10273,oranagra,2023-03-05T10:57:30Z,can't we just skip both the declaration and initialization?
1125643730,10273,oranagra,2023-03-05T11:06:36Z,"maybe we wanna run this linter, or another validation in ci.yml (i.e. after moving the full test thing to daily.yaml)"
1126617257,10273,oranagra,2023-03-06T15:36:19Z,i think this one should be dropped. i don't wanna restrict which fields are in this map
1126623968,10273,oranagra,2023-03-06T15:39:41Z,"i think that MEMORY STATS shouldn't document which fields it has, and leave it free for new ones to be added."
1126629293,10273,oranagra,2023-03-06T15:42:27Z,"i'm not sure we wanna list (document) the fields of this command.
and if we don't, i'd like to put a comment here that we omitted that on purpose, so someone won't try to add them."
1128062940,10273,guybe7,2023-03-07T15:34:33Z,"@fadidahanna last thing to do: fix GH workflows (conditional linter in CI, full validation in daily)"
1128197025,10273,tezc,2023-03-07T16:45:21Z,"```suggestion
# This unit has the potential to create huge .reqres files, causing log-req-res-validator.py to run for a very long time...
```"
1128207425,10273,tezc,2023-03-07T16:51:05Z,"```suggestion
                # We don't care about the attributes, read the real response
```"
1128407557,10273,oranagra,2023-03-07T18:57:20Z,let's list any non-schema changes in the top comment
1128416608,10273,oranagra,2023-03-07T19:03:27Z,@madolson @hpatro this one was missing from test_helper. please ack that it should be added.
1128418499,10273,oranagra,2023-03-07T19:04:28Z,"was this uncovered?
same question for ASKING and LASTSAVE?"
1128421427,10273,oranagra,2023-03-07T19:06:43Z,"i see we have quite a few new tests for coverage, and i guess they're just for various replies not that the command was completely uncovered.
maybe we don't have to list each of these in the top comment, but let's at least make sure there's a bullet that mentions we improved test coverage and explain roughly what we did and how"
1128423906,10273,oranagra,2023-03-07T19:08:34Z,"aren't these covered by tracking.tcl?
or at least maybe they should be moved there?"
1128427348,10273,oranagra,2023-03-07T19:11:08Z,"if we execute each of these commands without doing anything, let's at least also validate the response in the tcl test.
and maybe make sure the test title explains what we do (although maybe the word ""coverage"" is enough, specifically if it's repeated in other similar tests.."
1128432815,10273,oranagra,2023-03-07T19:15:04Z,"let's add the word ""coverage"" here.
please go over all the changes in the tests and make sure it's consistent.
i.e. i want the reader of that test to understand why it's here (considering the fact it doesn't really test anything)"
1128434963,10273,oranagra,2023-03-07T19:16:31Z,did we write a better test and decided to drop it?
1128436176,10273,oranagra,2023-03-07T19:17:24Z,why did we clone that test?
1128437267,10273,oranagra,2023-03-07T19:18:10Z,"i'm curious, why was this added?"
1128530491,10273,guybe7,2023-03-07T20:12:46Z,"yes, they are, but we skip tracking.tcl when running with --log-req-res (can't remember why but there must be a good reason)"
1128534840,10273,guybe7,2023-03-07T20:16:15Z,"this test does a bit more than coverage and was flaky (I've seen it fail on ""Memory is not reclaimed by MEMORY PURGE"")

since this PR is big enough already, i don't want to add tests with ""meat""

"
1128535372,10273,guybe7,2023-03-07T20:16:49Z,"(it's a new test introduced in one of the commits of this PR, it doesn't exist in unstable)"
1128535751,10273,guybe7,2023-03-07T20:17:09Z,covergae for EVALSH_RO
1128536226,10273,guybe7,2023-03-07T20:17:35Z,there isn't a single (deterministic) test that executes DECR
1128594561,10273,oranagra,2023-03-07T21:11:39Z,"so maybe move them to tracking.tcl, but without the ""tracking"" tag, and add a comment as to why...?"
1128599751,10273,oranagra,2023-03-07T21:15:58Z,"there is one in acl.tcl.
but i see i was wrong, it's not a dup of the above test (eval vs evalsha)"
1130656515,10273,enjoy-binbin,2023-03-09T08:42:10Z,"we can drop it, the LATENCY GRAPH valgrind failure was handled in #11892
```suggestion
```"
1130757341,10273,oranagra,2023-03-09T10:06:32Z,other PR merged to unstable
1131633614,10273,madolson,2023-03-09T21:33:54Z,"Yes, that looks like a miss."
693677012,9406,oranagra,2021-08-23T05:49:25Z,"I think REMOVED is a better term, ""UNLINK"" can be related to the UNLINK command
```suggestion
#define REDISMODULE_NOTIFY_REMOVED (1<<14)     /* module only key space notification, indicate a key is being removed from the db */
```"
693680332,9406,oranagra,2021-08-23T05:57:36Z,"i think it's better to move this call to the top of the function, before any action is taken.
also, please update the comment. ""when a module key is deleted"", the word ""module"" needs to be removed.
```suggestion
    moduleNotifyKeyspaceEvent(NOTIFY_REMOVED,""removed"",key,dbid);
```"
693682541,9406,oranagra,2021-08-23T06:03:18Z,"```suggestion
 *  - REDISMODULE_NOTIFY_REMOVED: A special notification available only for modules,
 *                                indicates that the key is removed from the keyspace.
```"
693682772,9406,oranagra,2021-08-23T06:04:00Z,"```suggestion
#define NOTIFY_REMOVED (1<<14)     /* module only key space notification, indicate a key removed from the db */
```"
693684220,9406,oranagra,2021-08-23T06:07:43Z,"if you agree with the ""removed"" term, please update all the remaining references."
698374700,9406,oranagra,2021-08-30T10:30:09Z,"you can do this, and then there's no need for the `if` below:
```suggestion
        prevHe = &d->ht_table[table][idx];
        he = *prevHe;
```"
698377459,9406,oranagra,2021-08-30T10:34:04Z,"i think we need to increment `d->pauserehash` here, and decrement it on the other method.
and maybe add assertions in dictAdd / dictDelete etc to make sure no one modifies the dict between these two calls."
698379604,9406,oranagra,2021-08-30T10:37:59Z,"we wanna move the call for `moduleNotifyKeyUnlink` to be before the dictDelete from the expires dict.
one way to do that is  to move both `moduleNotifyKeyUnlink` and `dictFindWithPlink` to the top of the function, but maybe it's easier and actually better to move the deletion from the expires dict into the `if (de)` block below."
698380518,9406,oranagra,2021-08-30T10:39:39Z,"```suggestion
 *                                indicates that the key is about to be removed from the keyspace.
```
alternatively, maybe we can say `is being removed`, but i guess it's better to be explicit and state that it's not yet removed."
698381229,9406,oranagra,2021-08-30T10:41:01Z,"ohh, i see you handled dict rehashing here... well, maybe it's better / safer for dict.c to do that implicitly?"
698382578,9406,oranagra,2021-08-30T10:43:27Z,"maybe improve the test by actually keeping the value of the key, and validating it in the tcl code?"
698484848,9406,huangzhw,2021-08-30T13:24:32Z,"I think we still need `if`, do I miss something?"
698485124,9406,huangzhw,2021-08-30T13:24:53Z,"There are two `if`, I think we should merge them"
698486584,9406,huangzhw,2021-08-30T13:26:49Z,"At first I think we may use `dictFindWithPlink` but not use `dictFreePlinkEntry`.
Or we should always use them  in pairs"
698499548,9406,guybe7,2021-08-30T13:43:04Z,can - > can't?
700858855,9406,oranagra,2021-09-02T08:18:45Z,"i meant we won't need the `if (prevHe)` and it's `else`.
i.e. the `prevHe` will **always** contain the address of the pointer that leads to `he`.
in theory we can even drop the `he` variable, and just use `prevHe` or rename it to `heRef`"
700862919,9406,oranagra,2021-09-02T08:23:54Z,"looking at name (`dictFindWithPlink`) it indeed doesn't imply that you must call the second method.
but do we see any reason anyone will ever wanna use one and not the other?
if we don't, maybe we can rename it (to `dictTwoPhaseUnlinkFind` and `dictTwoPhaseUnlinkFree`).
if we do, then maybe just add some bold comment about caller needing to call `dictPauseRehashing` and avoid any modifications to the dict between these calls)"
701498752,9406,huangzhw,2021-09-03T00:05:08Z,"If the first node, `plink` points to `prevHe`, other nodes `plink` points to `&prevHe->next`. I think we can't distinguish between them."
702393249,9406,oranagra,2021-09-05T09:11:16Z,"i pushed a commit showing what i meant, feel free to revert if you disagree."
702507623,9406,huangzhw,2021-09-06T01:11:42Z,Do we need check all types or just string. It is trivial.
702600284,9406,oranagra,2021-09-06T05:45:52Z,I think just string is enough
702601449,9406,oranagra,2021-09-06T05:48:46Z,"I think you have to delete from the expires dictionary before releasing the main dict entry, since they share the key name pointer, and only the main dict does the freeing part. "
702602065,9406,oranagra,2021-09-06T05:50:06Z,"We need a similar change here (like what we have in the lazy freeing), remove from expires dict only after calling the module callback"
703118597,9406,huangzhw,2021-09-07T01:31:29Z,"After move this, I found a bug. In the callback `RM_OpenKey` calls `lookupKeyReadWithFlags` which triggers another expire."
703418694,9406,oranagra,2021-09-07T11:17:40Z,"Interesting, let's make sure there's a consistent test for both removal of a volatile key that's not yet expired, and one that is (being expired). 

As a solution, maybe the only way to go is prevent lazy expiry from within this callback? (not only on that one key). 
I. E. We said we don't allow modifications from within that callback, so that includes lazy expiry. 
We can set a global flag and use it in expireIfNeeded to rerun 1 and abort before deleting. "
704298178,9406,huangzhw,2021-09-08T10:41:41Z,I think maybe we should return 0 because we can access expired key.
704636189,9406,oranagra,2021-09-08T17:37:26Z,"Yes, sorry. We should indeed return 0, since we want the module to be able to access it, and we'll delete it when the notification callback returns. "
706724563,9406,huangzhw,2021-09-12T01:13:40Z,"I found `dbUnshareStringValue` calls `dbOverwrite`. So when I use `RedisModule_StringDMA`, it will call `moduleNotifyKeyUnlink` last. I really afraid of this to cause more bugs."
706767734,9406,oranagra,2021-09-12T06:05:07Z,"i think that in the case of of `dbUnshareStringValue`, it may have been wrong to call `dbOverwrite` with all it's side effects.
i.e. other places that call `dbOverwrite` and `setKey` are really logically replacing the existing key with a new one, but this call doesn't intend to do that.

i.e. `dbUnshareStringValue` should not call any module hooks, keyspace notifications, and so on (currently does call `moduleNotifyKeyUnlink`).

it currently does do `moduleNotifyKeyspaceEvent(NOTIFY_REMOVED)`, and possibly calls `mt->unlink`, but since this call is only done in case:
```
    serverAssert(o->type == OBJ_STRING);
    if (o->refcount != 1 || o->encoding != OBJ_ENCODING_RAW) {
```
then the `mt->unlink` call is unreachable, and i think the `NOTIFY_REMOVED` is wrong.

@guybe7 @MeirShpilraien WDYT?

i think instead of calling `dbOverwrite`, `dbUnshareStringValue` should manually do a small sub-set of it's tasks."
706771530,9406,MeirShpilraien,2021-09-12T06:41:21Z,"@oranagra I agree, it does not really override the data nor deleting anything, it's an internal implementation detail."
708367747,9406,oranagra,2021-09-14T15:06:39Z,"maybe use `suspend` instead of `stop`?
or maybe it should be placed next to `active_expire_enabled` and named similarly (`lazy_expire_disabled`)?"
708388064,9406,oranagra,2021-09-14T15:27:39Z,we better use some wait_for_condition here on dbsize or expired_keys rather than assume 100ms is enough.
715970191,9406,huangzhw,2021-09-25T01:23:25Z,The last thing is how should we do with this. I'm not sure.
716009085,9406,oranagra,2021-09-25T08:05:37Z,"What do yo mean? 
Isn't that what I mentioned here: https://github.com/redis/redis/pull/9406#discussion_r698377459
Plus the rename I mentioned above. "
716012479,9406,huangzhw,2021-09-25T08:39:19Z,"> looking at name (`dictFindWithPlink`) it indeed doesn't imply that you must call the second method.
> but do we see any reason anyone will ever wanna use one and not the other?
> if we don't, maybe we can rename it (to `dictTwoPhaseUnlinkFind` and `dictTwoPhaseUnlinkFree`).
> if we do, then maybe just add some bold comment about caller needing to call `dictPauseRehashing` and avoid any modifications to the dict between these calls)

I mean this."
716016957,9406,oranagra,2021-09-25T09:25:43Z,"I may be missing something. It's just a rename. 
I. E. 
1. Rename these two functions so that it's clear both must be called. 
2. Increment and decrement d->pauserehash in there. 
3. Remove the calls to dictPauseRehashing
4. Maybe improve or revise the doc comment "
716145218,9406,oranagra,2021-09-26T05:40:11Z,changes LGTM
979358937,9406,oranagra,2022-09-25T05:55:06Z,"shall we make an effort to add EXPIRED and EVICTED?
if we do, we'll have them only in the master (they'll be DEL in the replica until we create new commands to covey that intention)
@MeirShpilraien WDYT?"
979359175,9406,oranagra,2022-09-25T05:57:31Z,"first, key name cannot be a plain char pointer (it could contain binary data and NULL chars).
it must be an sds or robj.
secondly, we certainly need dbid here."
979359382,9406,oranagra,2022-09-25T06:01:22Z,"i think i was expecting this code block to remain here, and just send a module event instead of a keyspace notification.
i.e. we still wanna catch all the execution flows we did before, and rely on our dictTwoPhaseUnlinkFind.
it's just that we decided this signal is an event rather than keyspace-notification."
979359804,9406,oranagra,2022-09-25T06:06:02Z,"i think we want to retain that detailed test.. just move it out from ""keyspace"" unit.
or actually, i don't even mind to keep it in the keyspace unit (it's an event about keys)."
979909005,9406,huangzhw,2022-09-26T11:51:37Z,How to import `sds` or `robj`?
979920006,9406,guybe7,2022-09-26T11:58:57Z,should be a RedisModuleString* (a.k.a robj)
979923913,9406,guybe7,2022-09-26T12:01:32Z,"what about dbOverwrite?
should this event be fired in the same places `moduleNotifyKeyUnlink` is called?"
979939660,9406,huangzhw,2022-09-26T12:12:16Z,But we can't use it here.
979948817,9406,guybe7,2022-09-26T12:16:48Z,"```

/* Incomplete structures needed by both the core and modules. */
typedef struct RedisModuleString RedisModuleString;
typedef struct RedisModuleIO RedisModuleIO;
typedef struct RedisModuleDigest RedisModuleDigest;
typedef struct RedisModuleInfoCtx RedisModuleInfoCtx;
typedef struct RedisModuleDefragCtx RedisModuleDefragCtx;

/* Function pointers needed by both the core and modules, these needs to be
 * exposed since you can't cast a function pointer to (void *). */
typedef void (*RedisModuleInfoFunc)(RedisModuleInfoCtx *ctx, int for_crash_report);
typedef void (*RedisModuleDefragFunc)(RedisModuleDefragCtx *ctx);
typedef void (*RedisModuleUserChangedFunc) (uint64_t client_id, void *privdata);

/* ------------------------- End of common defines ------------------------ */

#if defined REDISMODULE_CORE
/* Things only defined for the modules core (server), not exported to modules
 * that include this file. */

#define RedisModuleString robj

#endif /* defined REDISMODULE_CORE */
```

maybe we need to move this block up a bit"
980053977,9406,huangzhw,2022-09-26T13:42:36Z,"Maybe something in `dbOverwrite` is wrong. e.g. in `spopWithCountCommand`, this is really not unlink + add."
980085460,9406,guybe7,2022-09-26T14:10:00Z,"yes
dbOverwrite in spopWithCountCommand (and maybe others) should not fire the event
dbOverwite in setKey (and maybe others) should fire the event "
980381481,9406,oranagra,2022-09-26T18:40:15Z,"yes, as i commented here https://github.com/redis/redis/pull/9406#discussion_r979359382
i think we should keep the same approach we had when this was a KSN, and call it from moduleNotifyKeyUnlink.
the only difference is that we took the hook out of KSN, but it's still something that needs to be done every time a key is removed from the database.
the only thing extra i think it would be nice to add a distinction between DELETE, OVERWRITE, EXPIRED, and EVICTED."
981853879,9406,huangzhw,2022-09-28T01:18:27Z,"@oranagra Can you confirm whether I get your point with the lastest commit (without tests and expired evicted).
If do, I will continue."
982179081,9406,oranagra,2022-09-28T09:36:47Z,"yes, i think that's what i meant.
it's actually like your original PR, just shifting from KSN to the event infra.
p.s. you should pass `key` to the event struct, not `key-ptr`."
985190609,9406,oranagra,2022-10-02T07:03:58Z,let's add a comment to mention why we use StringDMA here
985190743,9406,oranagra,2022-10-02T07:04:46Z,i guess we wanna assert that the RM_OpenKey succeeded instead of ignore it?
985190944,9406,oranagra,2022-10-02T07:06:47Z,"i don't think i understand the purpose of `nokey` (maybe because this is a superficial review), please add a comment to explain it."
985190988,9406,oranagra,2022-10-02T07:07:29Z,"do we wanna handle other types as well? i.e. read the data? i'm not sure it matters.
but i do think we wanted to make sure we can read the expiry information!"
985191255,9406,oranagra,2022-10-02T07:09:58Z,let's test eviction as well
985191481,9406,oranagra,2022-10-02T07:11:35Z,"we need to add one integer encoded string, to test the DMA thing"
985397721,9406,huangzhw,2022-10-03T05:52:11Z,"For other types, it is empty when we receive event like `LPOP`."
985405799,9406,huangzhw,2022-10-03T06:11:55Z,I removed `nokey` and use `RedisModule_DictReplaceC`.
985406382,9406,huangzhw,2022-10-03T06:13:15Z,"If `kp` is NULL, the test will fail. So we maybe needn't to assert it?"
985694324,9406,oranagra,2022-10-03T11:50:40Z,"so maybe drop the `if`, and just let it crash?
i think it looks confusing to see the `else` isn't handled. so even if assert isn't needed, maybe it makes things clearer."
985842450,9406,oranagra,2022-10-03T14:20:36Z,"i think it may be pointless (and hard) to test querying the TTL when the key expires.
but it should be easy to query it on normal DEL and eviction."
985846134,9406,oranagra,2022-10-03T14:23:12Z,"i still don't understand the `nokey` here.
is it always 1? maybe at least document the output of the comment?"
985863122,9406,huangzhw,2022-10-03T14:34:24Z,"We may call `hooks.is_key_removed` with a key not in `removed_event_log`, so the `nokey` is 0."
985873939,9406,oranagra,2022-10-03T14:41:20Z,so why not RM_ReplyWithError when there's no entry in the dict?
986343234,9406,huangzhw,2022-10-04T00:45:35Z,I just copy it from `keyspace_event`. We can use `RM_ReplyWithError` too.
986559522,9406,oranagra,2022-10-04T08:11:10Z,"let's clean it up (in both places), i think it's confusing"
987584613,9406,guybe7,2022-10-05T06:50:04Z,why do we turn off lazy expire here but not before triggering a module KSN callback? what's the difference? 
987585356,9406,guybe7,2022-10-05T06:51:21Z,the module is not allowed to change the dataset (cause propagation) within this event right? should we document it somewhere?
987586460,9406,guybe7,2022-10-05T06:53:20Z,or even before calling unlink/unlink2 just a few lines below?
987587741,9406,guybe7,2022-10-05T06:55:22Z,should we document that now the module writer can access the key from within unlink/unlink2? 
990558135,9406,huangzhw,2022-10-08T00:09:28Z,"It's same with triggering a module KSN callback as this event is KSN callback.
But I think we should turn on lazy expire after unlink/unlink2?"
996409189,9406,oranagra,2022-10-16T08:31:44Z,"i'm not certain i understand the discussion here.
are we talking about other KSNs?
the reason we disabled it for this one is that we expect modules to do RM_OpenKey.
in unlink/unlik2 we don't expect or promote it (also, there's no need for it since you have the value)"
996409272,9406,oranagra,2022-10-16T08:32:28Z,you're referring to RM_OpenKey? i don't think we wanna promote it.
996433548,9406,MeirShpilraien,2022-10-16T12:02:17Z,"I think the module can know that after right (when it will get the expired/evicted key space notification)? So, it can be a nice addition, but not a must."
1006786936,9406,oranagra,2022-10-27T12:08:16Z,"I'd like to suggest to rename the function and the argument
```suggestion
 *
 * The 'overwrite' flag is an indication whether this is done as part of a
 * complete replacement of they key, which can be thought of a deletion and
 * replacement. om which case we need to emit deletion signals, or just an
 * update of a value of an existing key (when false).
 *
 * The program is aborted if the key was not already present. */
static void dbSetValue(redisDb *db, robj *key, robj *val, int overwrite) {
```"
1006804891,9406,oranagra,2022-10-27T12:26:17Z,any reason we can't just use `EXPIRE` instead of EXPIREAT (which would make this a lot simpler)?
1006947376,9406,huangzhw,2022-10-27T14:25:02Z,"We just want to test
`assert_equal $expireat [r hooks.pexpireat not-expire]`"
1008675820,9406,oranagra,2022-10-29T10:24:00Z,"Ohh, sorry, for some reason I thought this calls the EXPIREAT command"
1008813830,9406,oranagra,2022-10-30T08:40:54Z,"this test fails in 32bit builds. please look into it
https://github.com/redis/redis/actions/runs/3354247979/jobs/5557668206#step:7:939"
1008828173,9406,huangzhw,2022-10-30T10:25:08Z,fixed
1008838759,9406,oranagra,2022-10-30T11:40:14Z,"@MeirShpilraien do you think we should set that flag for all KSN, and also move the decrement to after calling the unlink CB below?
maybe we should.. 
even if we don't document that users can do RM_Open, maybe it's better making this safe (also affects read-only RM_Call in case someone does it in KSN)"
1009089865,9406,MeirShpilraien,2022-10-31T07:10:46Z,I think that if we decide to do it here we should also do it for all KSN. We should just consider if it can be a breaking change (I believe not).
1009090505,9406,MeirShpilraien,2022-10-31T07:11:37Z,Maybe we can give the old value here on the event info? I see we already have it here?
1009134073,9406,oranagra,2022-10-31T08:15:43Z,"i don't see why this should be a breaking change, RM_OpenKey and RM_Call will still return the right response, just that the key isn't deleted.
the only breaking possibility i can see is if someone is doing any write action from the KSN, in which case lookupKey will return NULL, the caller will think there's no key and try to create one, and that can crash since the key already exists.
but people should not do write operations from KSN, so i think this is safe.

@huangzhw can you please extend the effect of this flag to also cover the `unlink`/`unlink2` callback and keyspace notification callback, and mention this change in the top comment."
1009141881,9406,oranagra,2022-10-31T08:25:47Z,"you mean so that modules will not have to do RM_OpenKey (improves performance by reducing the need for lookupKey and a memory allocation).

it's interesting, that much of the complexity of what we did (the two phase unlinking), was done so that RM_OpenKey can still succeed from within that callback, so now we make part of that unnecessary. although some parts (like moving the unlinking from the expires dict are anyway necessary).

i guess that if we add a RedisModuleKey member to the struct, we can remove the keyname and dbid ones (we have RM_GetKeyNameFromModuleKey and RM_GetDbIdFromModuleKey)"
1009972923,9406,huangzhw,2022-11-01T00:22:07Z,done.
1028833965,9406,madolson,2022-11-22T05:09:25Z,"```suggestion
 *     * `REDISMODULE_SUBEVENT_KEY_OVERWRITTEN`
```
Let's keep all the tenses consistent. Generally we always use past tense."
1028836257,9406,madolson,2022-11-22T05:14:21Z,"I would also slightly prefer to give an opened key to the module as opposed to a DB id + key name. As mentioned, it solves the complexity that was introduced later to the two phase unlinking. From an API perspective, I think it also makes it clearer that you aren't supposed to use it with RM_Call. Was there some conversation about why this was left unresolved?"
1028838622,9406,madolson,2022-11-22T05:19:19Z,"```suggestion
                serverAssert(ki->dbnum != -1);
                selectDb(ctx.client, ki->dbnum);
```
Is ki->dbnum ever not set in this flow? I would rather assert since I assume it's always set."
1028840075,9406,madolson,2022-11-22T05:22:35Z,"```suggestion
dictEntry *dictTwoPhaseUnlinkFind(dict *d, const void *key, dictEntry ***plink, int *table_index) {
```"
1028842926,9406,madolson,2022-11-22T05:28:41Z,What does plink mean in this context stand for? It's a pointer to some link?
1028844378,9406,madolson,2022-11-22T05:30:03Z,Are we doing this two phase unlink as an optimization just for performance? It would be good to document that somewhere. 
1028891280,9406,madolson,2022-11-22T05:50:18Z,"```suggestion
void dictTwoPhaseUnlinkFree(dict *d, dictEntry *he, dictEntry **plink, int table_index) {
```"
1028892039,9406,madolson,2022-11-22T05:51:36Z,"It's a little odd we introduced flags, but async is not included in the flags."
1028893171,9406,sundb,2022-11-22T05:53:48Z,"```suggestion
 * complete replacement of their key, which can be thought as a deletion and
```"
1028893620,9406,sundb,2022-11-22T05:54:40Z,"```suggestion
        /* Although the key is not really deleted from the database, we regard
         * overwrite as two steps of unlink+add, so we still need to call the unlink
         * callback of the module. */
```"
1028962561,9406,oranagra,2022-11-22T07:35:15Z,"ok, let's give an opened key, users can then get the key name and dbid from that if they want.
i don't think we wanna say that you aren't suppose to do RM_Call, there are many things for which we don't have a direct API for, and the only way to do them is to run a command.
we did do all the work (two phase unlink), in order to make it possible.

we should document that write operations are forbidden from the callback though, but i think we already did."
1028964094,9406,oranagra,2022-11-22T07:37:19Z,"plink is the reference to the pointer that points to the entry to be removed.
it doesn't really matter for the caller, it's just a variable they need to pass to the other function.
what's missing here in your mind? just an explanation of what `plink` means?"
1028965832,9406,oranagra,2022-11-22T07:39:36Z,"it was an optimization to avoid dictFind followed by dictDelete. i.e. the first API is a find, and it gives some info to the second one to avoid repeating the lookup.
@huangzhw please document the purpose."
1028968767,9406,oranagra,2022-11-22T07:43:29Z,"i see we mentioned users are not allowed to modify the key, but maybe instead we should mention that all write operations are forbidden.

p.s. we did add `lazy_expire_disabled` so that read-only access to keys won't introduce deletions."
1028984028,9406,oranagra,2022-11-22T08:01:38Z,"the problems are:
1. dbGenericDelete used to take an `int`, and if we change it's purpose, i'm afraid that some backports of commits from branch to branch or other forks will cause an issue without a compilation failure or a conflict.
2. callers of this function have a boolean flag variable `server.lazyfree_lazy_expire`, if we require that they'll translate it to a flag, it'll take a ternary operator and a bit longer code."
1032875383,9406,oranagra,2022-11-27T06:37:04Z,"@huangzhw can you make that change too?
i think that's the last thing remaining to merge this (over 1 year old) PR"
1032876343,9406,huangzhw,2022-11-27T06:47:09Z,We just use `RM_OpenKey` and `RM_CloseKey`?  So need create a `ctx`?
1032877356,9406,oranagra,2022-11-27T06:57:31Z,"not sure i understand the question.
i think RedisModuleKeyInfoV1 should contain a `RedisModuleKey *key` instead of the current `dbnum` and `key`.
then the user can use RM_GetKeyNameFromModuleKey and RM_GetDbIdFromModuleKey to get them.
you obtain that by calling `moduleInitKey()`"
1032906641,9406,huangzhw,2022-11-27T10:38:50Z,"We need to create `ctx`, we need a `client` object."
1032917424,9406,oranagra,2022-11-27T11:55:03Z,"yeah, `moduleFireServerEvent` does that for other events as well"
1034800917,9406,oranagra,2022-11-29T14:09:17Z,"i understand we need that intermediate struct since we can't open the RedisModuleKey in moduleNotifyKeyUnlink.
i.e. we must do it per module, after we have a context, and that in turn means that we can't create the RedisModuleKeyInfoV1 in moduleNotifyKeyUnlink and just pass it forward in moduleFireServerEvent like we do for REDISMODULE_EVENT_FLUSHDB.

but then, since we fill the actual struct we communicate to the module in moduleFireServerEvent then i think it should be the one to fill the version fields (not moduleNotifyKeyUnlink)."
1034803435,9406,oranagra,2022-11-29T14:11:05Z,"i think it's a bit off to place this struct declaration on the stack inside the `if` and use that memory outside.
i know it works, but still, let's move it to the top of the function"
1034809917,9406,oranagra,2022-11-29T14:16:28Z,"maybe we should still keep some test doing RM_OpenKey, or RM_Call so that we can demonstrate that the key was not yet removed from the database and that doing dictFind won't mess things up..
i.e. we went through so much in order to support it, let's keep it covered by a test (in addition to using the key that's provided by the callback)"
1034847300,9406,huangzhw,2022-11-29T14:43:26Z,In fact it is wrong. I just fix it.
1187481978,9406,oranagra,2023-05-08T13:57:53Z,anyone understands / remembers why we used REDISMODULE_WRITE here?
1187547164,9406,guybe7,2023-05-08T14:54:45Z,seems like it should be READ since the module should not try to modify the key in the CB of this event
1238962032,9406,madolson,2023-06-22T19:47:38Z,"Yeah, I think I was just confused reading it. "
703096543,9462,madolson,2021-09-06T23:45:24Z,"We stick pointers with the variable
```suggestion
void updateCommandLatencyHistogram(struct hdr_histogram **latency_histogram, int64_t duration_hist){
```"
703096695,9462,madolson,2021-09-06T23:46:11Z,"```suggestion
    if (unlikely(duration_hist < LATENCY_HISTOGRAM_MIN_VALUE))
```
Spaces go around the conditional."
703097023,9462,madolson,2021-09-06T23:47:53Z,"My understanding is that blocked commands will get double counted, since it's here and in the unblocking code. It should probably just show up once?"
703097295,9462,madolson,2021-09-06T23:49:18Z,"```suggestion
    while (hdr_iter_next(&iter)) {
```
{ goes on the previous line. The exception to this is if the if/while statement is multi-line
"
703097746,9462,madolson,2021-09-06T23:52:03Z,"Would also prefer to drop unlikely unless we can observe the performance. Generally compilers either do it right and CPUs have branch prediction anyways, but you may know better than me about performance :)"
703098042,9462,madolson,2021-09-06T23:53:39Z,"Would prefer just to retain just `!c->latency_histogram`, since that is the real conditional. I suppose this might also be used to hide the histogram after calling reset stats, but would prefer to reset the state completely."
703098122,9462,madolson,2021-09-06T23:54:09Z,"We basically never add information after the headname. 
```suggestion
        info = sdscatprintf(info, ""# Latencystats\r\n"");
```"
703098301,9462,madolson,2021-09-06T23:55:09Z,"Missing `if (sections++) info = sdscat(info,""\r\n"");` here"
703098374,9462,madolson,2021-09-06T23:55:33Z,"```suggestion
            info = fillCumulativeDistributionLatencies(info, getSafeInfoString(c->name, strlen(c->name), &tmpsafe), c->latency_histogram);
```"
703098852,9462,madolson,2021-09-06T23:58:08Z,"There was a bug in redis-py at somepoint because it was doing string parsing based on `:`, since it was using that to split the key/value, but instead it was truncating most of the value. Would prefer to use some other keyword here."
703099245,9462,madolson,2021-09-07T00:00:46Z,"I have a minor preference for resetCommand resetting the state back to the launch state, so should we instead free this and set it to NULL? Then there is an online way to reduce the memory cost."
766844610,9462,filipecosta90,2021-12-10T17:10:04Z,"@madolson will try out both variations on the OSS benchmark automation. If we see no real improvement on the unlikely usage, lets remote it :) "
766846371,9462,filipecosta90,2021-12-10T17:12:36Z,👍 agree. doing the change on the next commit
772989626,9462,filipecosta90,2021-12-21T09:55:28Z,"agree, and fixed in latest push :)"
775631792,9462,filipecosta90,2021-12-27T20:06:24Z,@madolson your 100% correct. Addressed it in the latest commit and added a test case for it.
775659807,9462,oranagra,2021-12-27T22:18:01Z,"info section names are not sub-commands, and are usually not shown in uppercase"
775659983,9462,oranagra,2021-12-27T22:18:58Z,"""nodes"" means ""cluster nodes""? let's state that"
775660425,9462,oranagra,2021-12-27T22:21:44Z,"we usually have a blank line between configs.
```suggestion

```"
775660652,9462,oranagra,2021-12-27T22:23:01Z,maybe name it `latency-tracking`?
775661168,9462,oranagra,2021-12-27T22:25:59Z,comment outdated.. (but now i know where you copied it from :smile: )
775661640,9462,oranagra,2021-12-27T22:28:47Z,"i think this mechanism of `reset` and `append` is only relevant for `save` since due to backwards compatibility, it was able to handle multiple config file lines doing append each time.

what i mean is that you can init some variable on the stack here, or apply it to the server struct directly"
775661946,9462,oranagra,2021-12-27T22:30:46Z,"why do we need to allow an empty config to avoid the defaults being used?
we have a boolean config for that.
maybe we wanna abandon the boolean config?

anyway, if there's a need for this empty config, we may wanna document it in the conf file, if not let's disallow it."
775662742,9462,oranagra,2021-12-27T22:35:08Z,"we can move that into the loop, and then there's no need for the conditional one at it's end"
775663090,9462,oranagra,2021-12-27T22:37:24Z,"as i mentioned in config.c, there's no need for this, it can be embedded in the parser, and in that case we won't need an incremental realloc."
775663514,9462,oranagra,2021-12-27T22:39:45Z,"indentation is broken.
considering it's a multi-line, and not inside some struct, maybe move it to before the line, in which case you'll have longer lines."
775663939,9462,oranagra,2021-12-27T22:42:06Z,"space missing between the `if` and the `(`
same in the other line above.."
775664135,9462,oranagra,2021-12-27T22:43:16Z,"```suggestion
sds fillCumulativeDistributionLatencies(sds info, const char* histogram_name, struct hdr_histogram* histogram) {
```"
775664321,9462,oranagra,2021-12-27T22:44:25Z,"```suggestion
        if (cumulative_count > previous_count) {
```"
775665368,9462,oranagra,2021-12-27T22:50:51Z,"i think the comment (and maybe the function name) is missing the indication that this is part of the INFO command.
the comment should mention it, and maybe the function name should have some similarities to `genRedisInfoString`"
775665484,9462,oranagra,2021-12-27T22:51:46Z,"similar comment as the above function with regards to it's name and comment being related to `genRedisInfoString`
```suggestion
/* Fill percentile distribution of latencies. */
sds fillPercentileDistributionLatencies(sds info, const char* histogram_name, struct hdr_histogram* histogram) {
```"
775666296,9462,oranagra,2021-12-27T22:56:55Z,"considering INFO will some day be RESP, and we don't wanna limit our options,
maybe the histogram should be a separate line?
i.e. instead of `latency_hist_usec_<name>:calls=%d, histogram=[(%d:%d),(%d:%d)]`
```
latency_<name>:calls=%lld
latency_hist_usec_<name>:%d=%d, %d=%d
```
it doesn't bind related fields together, but it does keep a consistent format with other info fields."
775667106,9462,oranagra,2021-12-27T23:02:39Z,"this is a new concept (one section filter name, producing two sections.
is there any reason not to include all the info in one section? (which has identical, one word name, which is exactly the same as it's filter string)"
775667312,9462,oranagra,2021-12-27T23:03:59Z,"remind me how much memory this consumes?
maybe we should free it when the config is disabled?"
775667518,9462,oranagra,2021-12-27T23:05:24Z,"let's give this one the same prefix of the config it controls (with a `_len` suffix).
i vote for `latency_tracking_percentiles_len`.

p.s. maybe the comment should state that this is a config."
775667926,9462,oranagra,2021-12-27T23:08:08Z,maybe we can somehow add one test that actually measures latency? compare a PING and a DEBUG SLEEP
775668500,9462,oranagra,2021-12-27T23:11:30Z,"ohh, i see the top comment describes memory usage..  
"
775969712,9462,ranshid,2021-12-28T15:50:58Z,"I know that we currently do not account the blocked_us , but maybe we should explicitly set the sample to be c->duration+reply_us?"
775971343,9462,ranshid,2021-12-28T15:54:53Z,Maybe we can test the stats for modules 2?
775994968,9462,madolson,2021-12-28T16:51:52Z,"I prefer keeping this together on a single line. When we move it to RESP, I imagine we will still want to group the histogram as a map (or list since it's ordered) under the top level command name. We could still flatten it though, so that is parsed naturally by clients.
```
latency_name:calls=%lld, %d=%d, %d=%d
```

You just have to know the first argument is the calls, and the remaining are the histogram classes."
776102872,9462,madolson,2021-12-28T23:29:01Z,"I feel like this is self explanatory information about configs, not sure it's needed. "
776103123,9462,madolson,2021-12-28T23:30:28Z,"```suggestion
                if (cmd->latency_histogram) {
```"
776103453,9462,madolson,2021-12-28T23:32:24Z,"I feel like we would save a lot of trouble by just having this be a string config that was comma separated instead of space separated. We could keep the string stored in the server struct for rewrite and get, it's not that many bytes, and on set and load we could parse the string and set it."
776103748,9462,madolson,2021-12-28T23:34:09Z,"We might instead omit this additional boolean flag entirely and just use`latency-track-percentile`. If latency-track-percentile is set to an empty string, it disables latency tracking. "
776103922,9462,madolson,2021-12-28T23:35:21Z,We should validate all the percentiles before starting to apply them. We don't want them half applied.
776104505,9462,madolson,2021-12-28T23:38:57Z,"This is still here, I feel like the solution of trying to flatten the structure would be a better resolution though. "
776104583,9462,madolson,2021-12-28T23:39:38Z,"This is weirdly indented.

```suggestion
        info = sdscatprintf(info,""p%f=%.3f"", server.latency_track_percentiles[j],
            ((double)hdr_value_at_percentile(histogram,server.latency_track_percentiles[j]))/1000.0f);
        if (j != server.latency_percentiles_len-1)
            info = sdscatlen(info,"","",1);
        }
```"
776104711,9462,madolson,2021-12-28T23:40:20Z,"```suggestion
    if (allsections || !strcasecmp(section,""latencystats"")) {
```"
776104926,9462,madolson,2021-12-28T23:41:38Z,This is still here. 
776105931,9462,madolson,2021-12-28T23:47:39Z,What was the result of this?
776106703,9462,madolson,2021-12-28T23:52:43Z,"Or perhaps just a simpler format would suffice?
```
latency_name:calls=%lld,histogram=[%d=%d,%d=%d]
```
Then when we move to resp it would look like
```
1) Latency_name
2) 1) calls
    2) %d
    3) histogram
    4) 1) %d
       2) %d
       3) %d
       4) %d
```"
776317292,9462,oranagra,2021-12-29T13:07:09Z,"isn't that what we already have?
well, i guess that's ok.. we'll have to remember going forward that `[]` is the way to add nesting into INFO lines."
776318578,9462,oranagra,2021-12-29T13:10:12Z,"we already have other mechanisms we should follow, like `client-output-buffer-limit`, `save`, and `oom-score-adj-values`. i think we should mimic these (all use `MULTI_ARG_CONFIG`)"
776318830,9462,oranagra,2021-12-29T13:10:49Z,that's what i was arguing too.. similar to `save` config.
776319388,9462,oranagra,2021-12-29T13:12:05Z,"it might be a good idea, but IIRC, the config infra handles rollback now. @yoav-steinberg correct me if i'm wrong."
776320102,9462,oranagra,2021-12-29T13:13:54Z,"@filipecosta90 you removed one, and kept the other, please remove the other header print completely (including `sections++` etc)"
776326041,9462,filipecosta90,2021-12-29T13:28:22Z,"> is there any reason not to include all the info in one section?

No. addressed it in the latest commit"
776331484,9462,filipecosta90,2021-12-29T13:41:00Z,eheh. Fixed it on the new commit
776332168,9462,filipecosta90,2021-12-29T13:42:41Z,agree. renamed it on latest commit
776332502,9462,filipecosta90,2021-12-29T13:43:25Z,fixed in latest commit
776332609,9462,filipecosta90,2021-12-29T13:43:41Z,addressed in latest commit
776337411,9462,oranagra,2021-12-29T13:54:31Z,"ohh, i see what Madelyn meant. i.e. the format inside the `[]` is the same one as outside of them.
i.e. `,` separated pairs using `=`.
well, i guess that's a better option.

p.s. another option is to completely exclude all of that from the INFO command, and put it in the LATENCY command.
if this data is mainly meant to be processed by humans and / or specific code designed to parse that data, then a new sub-command in LATENCY command is preferred.

If on the other hand we intend for generic monitoring systems to capture that data (like someone feeding all of redis's info fields into Prometheus), then INFO is the right place (e.g. that's one place that the MEMORY STATS command got wrong IMHO).

but considering that generic monitoring systems won't be able to handle that anyway (since it's a compound field), then maybe INFO is the wrong place for it.
@madolson @filipecosta90 @yossigo WDYT?"
776338712,9462,filipecosta90,2021-12-29T13:57:28Z,"@oranagra and @madolson there might be users that are not interested in the percentiles but want to keep track of latency for the histograms exporting and merging. 
Meaning they don't want ""latency by percentile distribution""  but only the ""cumulative distribution of latencies"". Can we keep the config to enable disable this latency tracking and the config for percentiles? Do you agree?"
776340299,9462,filipecosta90,2021-12-29T14:01:02Z,The total size per histogram should sit around 40 KiB. We only allocate those 40KiB when a command was called for the first time.
776353617,9462,madolson,2021-12-29T14:30:58Z,@oranagra what is the argument though? They are more annoying to orchestrate around since they have to be applied specially. We don't have to stick with a bad convention.
776365095,9462,oranagra,2021-12-29T14:54:50Z,"it's no longer annoying.. it's is now supported by the infrastructure (it can split space separated strings from the config file).
it would be ugly that we have several ways to set configs that require multiple arguments (one using a generic infrastructure we created, and one that bypasses it).
i would even consider the one that bypasses the infra, an ugly hack.

storing a string in the server struct and parsing it at runtime is not an option IMHO.
and storing both the string and the parsed array in the server struct is redundant.
i rather re-compose the string from the array when needed, than keep two copies of the same data."
776368105,9462,oranagra,2021-12-29T15:01:38Z,"so should we bother to free it if the config is disabled?
assume a normal user uses some 20-40 commands (that could be some 1.5mb).
i guess not a big price to pay (user will set the config and get that memory back on the next restart).
@madolson WDYT?"
776377658,9462,madolson,2021-12-29T15:23:35Z,"I meant it's annoying for users, every other parameter is a key/value pair except the couple of multi-arg ones. Some clients don't support it, and there is an ugly hack in our system to handle them since the rest of the system is a key/value. I expect other systems have ugly hacks as well.

I'm pretty sure the amount of code would be less if we kept around the string representation, since we don't have to do all the work to reconstruct the values and special printing. I'm not sure duplicate value is all that important, we're already spending a lot of memory on this feature.

There is also another case of this in bio_cpulist, which does basically what I'm suggesting."
776380510,9462,oranagra,2021-12-29T15:30:14Z,"`bio_cpulist` is an ugly hack.. 
config file parsing won't even detect a syntax error there. (probably crash on assertion or exit later on).
which is arguably ok since it's an immutable config.

clients should not have any problem with multi-arg configs, since we take a single string and split it.
so from their perspective, both the options we're debating are the same (except for the separator char maybe)"
776381212,9462,filipecosta90,2021-12-29T15:31:48Z,"agree with @oranagra about splitting this information into two places:

- INFO will hold the per-command percentile data that is easily parsed and integrated into monitoring tools. The `latency-tracking-info-percentiles` configuration changes the default INFO exposed percentiles.
- LATENCY will hold the histograms and will also enable to quickly compute a set of quantiles on the fly for investigation purposes. 
  - LATENCY HISTOGRAM [commandname] : if no commandname is passed then all then we reply all histograms to the client
  - LATENCY PERCENTILE commandname percentile ... will enable to calculate on the fly any percentile for a specific command
 
 agree?
"
776384438,9462,madolson,2021-12-29T15:39:16Z,"The separator character is the only difference, and it's important because the start up arguments are parsed with the same delimiter.

Sure, bio_cpulist should probably have validation, but I don't think that explicitly makes it a hack. "
776384901,9462,madolson,2021-12-29T15:40:06Z,I'm good with that.
776388159,9462,oranagra,2021-12-29T15:47:45Z,"a bit more reasoning behind the above conclusion (form a talk i had with Filipe).

* the histogram is too verbose for INFO, and may be required only in hands-on investigation
* is it unlikely that a monitoring tool (that's only capable of working with INFO) will handle these histograms anyway (since the structure is nested)
* so moving these histograms to a separate commands let's us output that data in RESP, or maybe also add a human-readable variant (maybe LATENCY HISTOGRAM-DOCTOR :smile: )

about the percentile:
* it is calculated on report-time, that's why the config that controls it was added an `info` tag to it's name
* it is much less verbose, and more useful for a quick glance
* it's not a compound format, so any monitoring tool that's able to handle `info keyspace` and `info commandstats` can extract that data.
* since we can report other percentiles at runtime at will, we can add a command to output that, and the config only controls what's in INFO. 

so few suggestion for changes in Filipe's last post:
* `LATENCY HISTOGRAM [command <name>]`
* `LATENCY HISTOGRAM-REPORT [command <name>]` (the human readable version)
* `LATENCY PERCENTILE [command <name>] [percentile <pct>] ...`"
776390408,9462,oranagra,2021-12-29T15:53:14Z,"not sure i understand your argument about startup args delimiter.. maybe give an example.

the trick in bio_cpulist is much less severe because that's an immutable argument.

anyway, i feel strongly that we have an infrastructure, and several configs that use it, and that's what we should aim for...
IIRC the cpulist feature was a PR by an ""outsider"" that was merged without much of a review.

if we still disagree, i guess we need a tie breaker. @yossigo @yoav-steinberg ?"
776396373,9462,filipecosta90,2021-12-29T16:07:13Z,">  i vote for latency_tracking_percentiles_len.

moved to `latency_tracking_info_percentiles` and `latency_tracking_info_percentiles_len` given the discussion about the info topic.  "
776412056,9462,filipecosta90,2021-12-29T16:46:04Z,@oranagra I've added a specifc test to verify that indeed the config is rolled back it's in `latencystats: bad configure percentiles`.
776425721,9462,filipecosta90,2021-12-29T17:22:46Z,"@oranagra added ""latencystats: measure latency"" test, and also included the percentile check on the module's ""blocked clients time tracking..."" test."
776426293,9462,filipecosta90,2021-12-29T17:24:27Z,@ranshid on the latest commit I've added the latency percentiles check to one of the modules test. This should do it: https://github.com/redis/redis/pull/9462/files#diff-682a213e9ff5ac20de6dd50890bf1cbeec8fe812acfd1a92d0e868c072472055R34
776470685,9462,filipecosta90,2021-12-29T19:41:34Z,resolving giving the discussion on https://github.com/redis/redis/pull/9462#discussion_r776388159
776566511,9462,madolson,2021-12-30T04:44:46Z,"Sure, for start up args you need to pass in the start up arguments as individual values like `redis-server --tracking-percentiles 1 2 3` compared to the config set which takes it as a single space delimited string `config set ""1 2 3""`. We had special code that assumed that all configs were key/value pairs, which works for the config set case but breaks since if you try to do `redis-server --tracking ""1 2 3""` it will break.

So let me just clarify my two points:
1. I don't like multi-arg configs, I think they are hacky and the infrastructure around them was more for getting all the code to be generic more so than they intrinsically make sense. I think all configs should be key/value pairs. I dislike space as a delimiter since that is also what is used for the config file to split the name of the config.
2. I think just keeping a copy around of the string representation of a config you serialize into another form isn't that big of a deal. It simplifies the get/rewrite code path as you don't have to deserialize the value, and fits in with the ""apply function"" that is implemented. Requirepass is an example of another config that does something similar, we transform it into a hash when we set it, but we keep it around the plaintext version in the server struct to easily do rewrite/get.

I don't really feel strongly about it, so if you still disagree feel free to keep it as is. I still don't understand your point of view though."
776587626,9462,oranagra,2021-12-30T06:35:11Z,"Deferred reply has overheads (small packets, and lots of write syscalls).
is it possible to predict the size of the array easily? or even make a quick counting?

"
776587688,9462,oranagra,2021-12-30T06:35:24Z,"shouldn't this be a map?

"
776587790,9462,oranagra,2021-12-30T06:35:47Z,"this is the outer loop, so the damage of deferring reply is low (one syscall per command)

"
776587912,9462,oranagra,2021-12-30T06:36:18Z,"shouldn't that one be a map (command name is the field, and the array of histogram entries the value)?
in that case, we should do the same on the other variant (the one that takes command names as input).

p.s. i think we can make these two share more code in some way.
i.e. they're both doing exactly the same, with the exception of the loop.
i don't have a concrete suggestion. just the desire to find something.

"
776587981,9462,oranagra,2021-12-30T06:36:38Z,"maybe rename this to have the word ""Single"" (where the other one had ""all).

"
776588037,9462,oranagra,2021-12-30T06:36:50Z,"maybe these should have a ""Human"" suffix to make it clearer what's the difference.

"
776592440,9462,oranagra,2021-12-30T06:57:01Z,"ohh. startup arguments by CLI... i didn't think of that..
i think it should be the right approach to have `redis-server --tracking ""1 2 3""`, and not `redis-server --tracking 1 2 3`.
and i was guessing that this would implicitly work (with the new infrastructure).

my only concern is that if currently `redis-server --save ""3601 1 301 101""` is not working while `redis-server --save 3601 1 301 101` is working, then i wouldn't want to make a breaking change.

but testing Redis 5.0, 6.0, and 6.2 shows that neither of the methods is working.
while on unstable, the later (without `""`) is working, and the first (with `""` is not working.
i think we should fix that, and considering it wasn't working at all in any of the released versions, that won't be a breaking change.

@yoav-steinberg please confirm"
776614963,9462,yoav-steinberg,2021-12-30T08:17:38Z,"Looking at the current implementation it seems like it'll work without merging the config's parameters into a single arg (without adding `""`). I can change this if we want, but maybe there's no need to. WDYT?"
776648674,9462,oranagra,2021-12-30T09:47:45Z,"then how can it process the next config? by looking for `--`? what if some config has `--` as part of its value?

first let's confirm that this was never working in any of the released versions (i.e. not a regression of 6.2 or 6.0).
then i think that it'll make sense to use `""` as that's a single argument as a single config.
i.e. same as CONFIG SET takes one bulk argument as value, and not multiple bulks"
776650521,9462,yoav-steinberg,2021-12-30T09:53:04Z,"> then how can it process the next config? by looking for --? what if some config has -- as part of its value?

The current code looks for an arguments that starts with `--` and then assumes it's a config name. Then all arguments after it (that don't start with `--`) are parameters to that config. If a parameter to a config starts with `--` then we're screwed.

I'll check the old versions.
"
776666266,9462,yoav-steinberg,2021-12-30T10:32:08Z,In both 6.0 and 6.2 the logic is the same as today a CLI config argument receives it's parameters as multiple command line arguments as long as it doesn't encounter a `--`. So I think we can't break the existing logic.
776682728,9462,oranagra,2021-12-30T11:19:54Z,"two questions:
1. what if the first argument is using `--`? e.g. `redis-server --dbfilename --mydb.rdb --rdbcompression no`
2. maybe for MULTI_ARG configs, we can still break a single argument into several if we find spaces (seems consistent with CONFIG command).

assuming 1 is ok, then we can let users work around that limitation of searching for `--`, by breaking with spaces.
e.g. `redis-server --dbfilename ""--odd folder name--"" --loglevel verbose` will work (as it does today), but also, if there was a similar multi-arg config that could expect `--` in input it'll work `redis-server --replicaof ""--no-- --one--"" --loglevel verbose`
i.e. `replicaof` is a multi-arg config, and it'll be able to take arguments that it can't today.

if we do that, both `redis-server --save 20 1 --loglevel verbose` and `redis-server --save ""20 1"" --loglevel verbose` will work."
776802520,9462,filipecosta90,2021-12-30T16:54:14Z,@oranagra renamed it to `latencySpecificCommandsFillCDFHuman` given it accepts 1 or more commands.
776806434,9462,filipecosta90,2021-12-30T17:06:25Z,"> shouldn't that one be a map (command name is the field, and the array of histogram entries the value)?

yes indeed. Made the change on the latest commit. New look:

```
$ ./src/redis-cli -3 latency histogram set get
1# ""set"" => 1# ""calls"" => (integer) 1000
   2# ""histogram_usec"" => 1# (integer) 1 => (integer) 996
      2# (integer) 2 => (integer) 998
      3# (integer) 4 => (integer) 999
      4# (integer) 8 => (integer) 1000
2# ""get"" => 1# ""calls"" => (integer) 1000
   2# ""histogram_usec"" => 1# (integer) 1 => (integer) 990
      2# (integer) 2 => (integer) 993
      3# (integer) 4 => (integer) 996
      4# (integer) 8 => (integer) 998
      5# (integer) 16 => (integer) 999
      6# (integer) 33 => (integer) 1000
$ ./src/redis-cli -3 latency histogram-report set get
latency_hist_usec_set:calls=1000,histogram=[1=996,2=998,4=999,8=1000]
latency_hist_usec_get:calls=1000,histogram=[1=990,2=993,4=996,8=998,16=999,33=1000]
```"
776806715,9462,filipecosta90,2021-12-30T17:07:19Z,Indeed. addressed in the latest commit
776809155,9462,filipecosta90,2021-12-30T17:15:13Z,@oranagra to predict the array/map len we would need to go through the histogram iterator twice given we don't output the empty buckets. at max we will have 30 buckets. do you think we should do it?
776812063,9462,oranagra,2021-12-30T17:25:33Z,"Actually, redis-cli shows the resp one pretty readable. 
Maybe we can drop the human subcommand? 
The only disadvantage is that there are multiple lines per command, but it is actually more readable that the one liner... 
Maybe there's an advantage to have one that outputs CSV? I guess that's the responsibility of redis-cli to convert (we have the new `--json`). 

I'm leaning towards dropping the human format. "
776813950,9462,oranagra,2021-12-30T17:32:02Z,"The alternative is that each command has its own write system call and it's own packet.. 
Unless #9934 will help. 
We can keep the simple form, and maybe optimize in the future.. 
Is suppose that this command doesn't require high efficient anyway, so shorter code is preferred. "
776824421,9462,filipecosta90,2021-12-30T18:09:22Z,"Based on: 

>  Is suppose that this command doesn't require high efficient anyway, so shorter code is preferred.

and 

>  We can keep the simple form, and maybe optimize in the future..

I'll add a note on the PR description. Agree that for now the simpler the better
"
776828106,9462,filipecosta90,2021-12-30T18:22:49Z,"> I'm leaning towards dropping the human format.

the less code the better IMHO. Lets drop it :) "
777252138,9462,oranagra,2022-01-02T20:44:15Z,"Blank line between configs
```suggestion

# By default the exported latency percentiles via the INFO latencystats command
```"
777252476,9462,oranagra,2022-01-02T20:47:41Z,"IIRC Maddy also commented that she thinks mentioning the config command here is excessive. 
I think you can delete these 3 lies here, and two in the next config"
777252847,9462,oranagra,2022-01-02T20:52:28Z,"Since we no longer have the human variant, we should drop the reference for Resp I the function names and comments. "
777253396,9462,oranagra,2022-01-02T20:59:37Z,"I'm not sure there's a point to add an error reply inside the array (we almost never do that, (except in EXEC) 
We could add Nils or 0 arrays, to fill the spots in the outer/ordered array, but what I now notice is that this function replies with an array where the other function replies with a map. 
I think we must converge them to use the same format. Which you'd be a map, and we can just skip adding entries to the ones we can't find data for, or no such command. "
777253579,9462,oranagra,2022-01-02T21:01:14Z,No longer needed
777254056,9462,filipecosta90,2022-01-02T21:07:34Z,@ranshid we're tracking `c->duration + blocked_us + reply_us` on this one. So all account for. 
777259607,9462,filipecosta90,2022-01-02T22:22:50Z,@oranagra I've moved to replying an empty map for commands that don't exist. agree?
777262246,9462,filipecosta90,2022-01-02T23:02:00Z,"@madolson I've tested without the unlikely and indeed no noticeable change. removed it.
numbers without `unlikely`:
```
taskset -c 1,2 redis-benchmark -c 50 --threads 2 -d 1024 -r 1000000 -n 10000000 --csv -t ping,set,get
""test"",""rps"",""avg_latency_ms"",""min_latency_ms"",""p50_latency_ms"",""p95_latency_ms"",""p99_latency_ms"",""max_latency_ms""
""PING_INLINE"",""212634.77"",""0.221"",""0.040"",""0.223"",""0.279"",""0.295"",""28.127""
""PING_MBULK"",""220833.42"",""0.214"",""0.040"",""0.215"",""0.263"",""0.287"",""28.223""
""SET"",""174425.70"",""0.269"",""0.040"",""0.263"",""0.367"",""0.391"",""24.223""
""GET"",""178192.77"",""0.263"",""0.040"",""0.263"",""0.351"",""0.375"",""24.271""

```"
777311498,9462,oranagra,2022-01-03T06:45:29Z,"i'm still uncomfortable with this (returning an entry in the map with an unknown command).
i went looking for what's done in COMMAND INFO.
there, the reply is an array (of the requested size), that holds Null entry for unknown commands, and a nested array entry for known ones, in which the first entry is the command name.

here we traded the outer array for a map (which despite what the RESP3 spec says, should be considered unordered since that's how clients are gonna use it).

regardless of the ordering, unlike the solution in COMMAND INFO, here we actually reply the invalid command name to the user, which is odd. i think we should just skip these and not include them in the reply at all."
777311626,9462,oranagra,2022-01-03T06:46:00Z,line comment (change to `/*`)
777312167,9462,oranagra,2022-01-03T06:48:37Z,"i'm guessing we should skip these too.
the only reason i can think of for replying with an empty map is to distinguish these from unknown commands, but with your current code they're the same, so i guess that's not the concern, but the ordering of the reply.

another possible concern is that clients will be able to more easily parse this the same as non-empty ones, but for that we need to create the nested map, with the `calls` field set to 0."
777312828,9462,oranagra,2022-01-03T06:51:51Z,leftover
777313597,9462,oranagra,2022-01-03T06:53:41Z,"```suggestion
```"
777313825,9462,oranagra,2022-01-03T06:54:38Z,"i still think i'd rather eliminate `resetServerLatencyPercentileParams` and `appendServerLatencyPercentileParams`, and just embed their code here.
i think it'll make the code clearer. (no need for an incremental realloc)
I suppose the reason it's here is because it was copied from ""save"" which had other concerns in the past."
777330449,9462,oranagra,2022-01-03T07:56:20Z,"@yoav-steinberg what did we conclude here?
This is unrelated to the current PR, but i see an opportunity to improve redis 7.
in past redis versions, you could only do `src/redis-server --save 1 1 --save 2 2`
now you can also do `src/redis-server --save 1 1 2 2`
but you still can't do `src/redis-server --save ""1 1 2 2""` (although config set does take a single arg like `""1 1 2 2""`).
and you can't also do `src/redis-server --dbfilename --myfilename.rdb`
i think these are two things that would be nice to fix in 7.0"
777331461,9462,filipecosta90,2022-01-03T07:59:30Z,"> another possible concern is that clients will be able to more easily parse this the same as non-empty ones, but for that we need to create the nested map, with the calls field set to 0.

@oranagra I've changed it to reply with the same ""schema"" but the calls set to 0 and with an empty histogram map. "
777332801,9462,oranagra,2022-01-03T08:03:36Z,"i think we can just skip them.. why bother to add so much details (two levels of nesting) for en empty response?
it's unordered anyway, and we skip empty ones in the ""all"" variant."
777335271,9462,filipecosta90,2022-01-03T08:11:15Z,">  i think we should just skip these and not include them in the reply at all.

addressed it in the latest commit"
777340652,9462,filipecosta90,2022-01-03T08:26:33Z,addressed in the latest commit oran 
777345763,9462,oranagra,2022-01-03T08:39:47Z,"```suggestion
    zfree(server.latency_tracking_info_percentiles);
    server.latency_tracking_info_percentiles = NULL;
```"
777347970,9462,oranagra,2022-01-03T08:45:12Z,"i don't like this, the outer function is aware of the response layout of the inner one.
if we must have that reply, we should call `fillCommandCDF` and let it handle that internally.

however, i think it's excessive to add so much data for the reply, and i think that instead we should let the client realize the request came empty handed.
since we don't rely on the ordering anyway, i think that's perfectly valid approach."
777348029,9462,oranagra,2022-01-03T08:45:21Z,"```suggestion
        fillCommandCDF(c, cmd->latency_histogram);
```"
777348871,9462,oranagra,2022-01-03T08:47:28Z,"case sensitive comparison is really excessive for this.
```suggestion
    if (argc == 1 && sdslen(argv[0]) == 0)
```"
777349812,9462,oranagra,2022-01-03T08:49:41Z,"the `+1` was excessive, right?
i think we can make the code shorter (easier to read).
```suggestion
        server.latency_tracking_info_percentiles = zmalloc(sizeof(double)*argc);

    for (int j = 0; j < argc; j++) {
```"
777352595,9462,filipecosta90,2022-01-03T08:56:03Z,"> however, i think it's excessive to add so much data for the reply, and i think that instead we should let the client realize the request came empty handed.

addressed in latest commit :+1: 
"
777385561,9462,oranagra,2022-01-03T10:07:12Z,"made a PR to try that: https://github.com/redis/redis/pull/10042
we can continue the discussion there.

but either way, i'm confident that the new config here (`latency-track-percentiles`) should behave the same as other configs we have (e.g. `save`)"
777888135,9462,yoav-steinberg,2022-01-04T08:06:00Z,"```suggestion
# The Redis extended latency monitoring tracks the per command latencies and enables
```"
777893761,9462,yoav-steinberg,2022-01-04T08:17:23Z,"Seem to me that if we're in the case of the special case where we want an empty percentile configuration we need to fix the loop to run over the actual number of percentiles and to over `argc`.
```suggestion
    for (int j = 0; j < server.latency_tracking_info_percentiles_len; j++) {
```"
777899788,9462,yoav-steinberg,2022-01-04T08:28:30Z,"```suggestion
            line = sdscatprintf(line,"" %f"",
                server.latency_tracking_info_percentiles[j]);
```"
777900796,9462,yoav-steinberg,2022-01-04T08:30:16Z,"I think we're missing a space in this case.
```suggestion
        line = sdscat(line,"" \""\"""");
```"
777902404,9462,yoav-steinberg,2022-01-04T08:33:04Z,"```suggestion
/* latencyCommand() helper to produce a map of time buckets,
```"
777903690,9462,yoav-steinberg,2022-01-04T08:35:28Z,"```suggestion
""    Return a cumulative distribution of latencies in the format of a histogram for the specified command names."",
```"
777904371,9462,yoav-steinberg,2022-01-04T08:36:43Z,Why the `+1`?
777906807,9462,yoav-steinberg,2022-01-04T08:41:00Z,If in practice we only support μsecs then why did you write the whole things with nsecs as the base unit?
777922932,9462,filipecosta90,2022-01-04T09:08:06Z,"@yoav-steinberg it is to get more precision on the start of the histogram. otherwise, given we have operations that take below 1 micro they would not properly show up. "
777926272,9462,filipecosta90,2022-01-04T09:13:28Z,"> Why the +1?

error of mine. addressed"
778570177,9462,oranagra,2022-01-05T06:17:58Z,"i see hdr_histogram uses indentation of 4 spaces (like redis), let's use it's style."
778570951,9462,oranagra,2022-01-05T06:20:13Z,why is this one a one liner?
778572360,9462,oranagra,2022-01-05T06:24:36Z,maybe put an overflow check here too?
778573397,9462,oranagra,2022-01-05T06:27:52Z,"i suppose we only need this header in server.c?

p.s. thinking of your PR to the upstream hrd_histogram, i'm not sure if they'll like it that you've taken a project of one C file and added a second one for this purpose.
maybe they'll prefer to add another 30 lines to the other 1100 lines C file."
778573475,9462,oranagra,2022-01-05T06:28:09Z,"```suggestion
```"
778574597,9462,oranagra,2022-01-05T06:31:33Z,"maybe it would be safer to use macros?
i.e. `#define malloc hdr_malloc`

what i'm thinking of is the chance we'll merge an upgrade from upstream, and miss one use of malloc of free, so it'll pass to a different allocator (which in most cases would be the same allocator, just without the zmalloc counting).
this could be VERY dangerous since there's a big chance we won't notice it."
778611495,9462,yoav-steinberg,2022-01-05T07:58:51Z,`calloc` semantics require checking for an overflow and returning `NULL` in such cases. I think we need to assume `callocFn` does this for us and not try to do its work for it. Also note the current check might cause a division-by-zero error.
778617183,9462,oranagra,2022-01-05T08:10:26Z,"i agree, i think this check needs to go to `zcalloc_num` (where we do a multiplication that could overflow)."
778668077,9462,filipecosta90,2022-01-05T09:30:11Z,"I used clang-format on it, and even with the 4 spaces indentation it one-lines it. I've changed it back to multiple lines definition"
778668592,9462,filipecosta90,2022-01-05T09:30:58Z,":+1: addressed in the new commit
To achieve this I've used clang-format with the following defs:
```
IndentWidth: 4
AccessModifierOffset: -4
```"
778670829,9462,filipecosta90,2022-01-05T09:34:14Z,addressed on the new commit
778671581,9462,filipecosta90,2022-01-05T09:35:21Z,"being discussed in
https://github.com/redis/redis/pull/9462/files/90523e04ddb46b7a35776c5376ddd73d5dcea6a2..2b66f5249f4ad3623bde77def23de6b9f79706ed#r778617183"
778674715,9462,filipecosta90,2022-01-05T09:39:44Z,"@oranagra and @yoav-steinberg please confirm that the check for that the arguments to zcalloc(), when multiplied do not wrap is enough. Given we want to handle the OOM scenarios, I was required to change zmalloc_oom_handler to also log the num_items trying to allocate alongside the item size."
778705286,9462,oranagra,2022-01-05T10:22:44Z,why UINTMAX_MAX and not SIZE_MAX?
778706286,9462,oranagra,2022-01-05T10:24:14Z,"i don't like that change to `zmalloc_oom_handler`. i'm uncomfortable that this small overflow check causes so many changes.
maybe we'll just log one of the operands? or instead log SIZE_MAX?"
778710683,9462,yoav-steinberg,2022-01-05T10:30:40Z,"Not sure we need to call `zmalloc_oom_handler`, according to the `calloc` docs passing an overflowing or 0 value should simply return `NULL`.
Also I don't see value in adding the extra `num` and `size` to the logging."
778717801,9462,filipecosta90,2022-01-05T10:41:33Z,no reason. it's even counterproductive given uintmax maps to `(__UINT64_C(18446744073709551615))` and sizemax does not enforce the type. changing it. 
778725288,9462,filipecosta90,2022-01-05T10:52:57Z,"> Not sure we need to call zmalloc_oom_handler, according to the calloc docs passing an overflowing or 0 value should simply return NULL.

@yoav-steinberg I believe we must call oom_handler within the redis context even tough it's not required by the calloc definition. @antirez addressed issue https://github.com/redis/redis/issues/509 specifically with the oom_handler so that we can log with further details and exit when we cannot allocate the required memory:
Quoting him:
> The result was that in the case of an actual out of memory in Redis
where malloc returned NULL (In Linux this actually happens under
specific overcommit policy settings and/or with no or little swap
configured) the error was not properly logged in the Redis log.

With that in mind, IMO, we should call the handler and return NULL. In that manner, we have a configurable way of deciding wether to abort on log or just expect the caller of zcalloc to handle it. agree?


With regards to:
>  Also I don't see value in adding the extra num and size to the logging.

I'm reverting and logging `SIZE_MAX` on the scenario of overflow as suggested by @oranagra . "
778725744,9462,filipecosta90,2022-01-05T10:53:39Z,"> instead log SIZE_MAX?

addressed it :+1: "
778727059,9462,oranagra,2022-01-05T10:55:38Z,you're right. thanks.
778736327,9462,oranagra,2022-01-05T11:10:51Z,i still see a spare line
778736558,9462,oranagra,2022-01-05T11:11:17Z,i suppose this is no longer needed
778738546,9462,oranagra,2022-01-05T11:14:41Z,add `wait_for_blocked_client` after all `blpop`s
778739322,9462,oranagra,2022-01-05T11:15:53Z,this test can be tagged with `needs:debug`. not specifically required at the moment because of `external:skip`
709066853,9504,oranagra,2021-09-15T10:47:54Z,"it's worth mentioning the different approach you took for config command (splitting it to different functions) vs other commands (one entry point that's still looking at argv[0]), in the top comment."
709067723,9504,oranagra,2021-09-15T10:49:05Z,"if you'll move these two new functions to below the help function, maybe the diff will be smaller, or at least easier to review."
709069031,9504,oranagra,2021-09-15T10:50:59Z,"i suppose memoryGetKeys isn't needed now because when USAGE is a command of it's own, it can just use a range spec.
maybe that's worth mentioning in the notes too (not immediately clear)"
709073018,9504,oranagra,2021-09-15T10:57:17Z,worth mentioning in the top comment
709074219,9504,oranagra,2021-09-15T10:59:04Z,mention in the top comment the few missing subcommands in help messages.
709075444,9504,oranagra,2021-09-15T11:01:02Z,"in the top comment bullet that mentions unifying the command table, maybe ad a note about redirection of the few that have different implementation and similar command name. (list them)"
709077843,9504,oranagra,2021-09-15T11:04:59Z,it's worth mentioning the effects this commit has on the command stats in the top comment (release notes)
709080657,9504,oranagra,2021-09-15T11:09:23Z,"so you made LCS a sub-command?
let's list it in the top comment.
maybe add a bulleted list of all ""containers"", and also a note about why SENTINEL and DEBUG are not promoted."
709084917,9504,oranagra,2021-09-15T11:16:05Z,"this is a bit hard to review.
so i understand that this means that you've removed the specs you recently added from the old COMMAND command.
and instead added them to the new COMMANDS command.
right?
let's make it clear in the top comment too."
709086102,9504,oranagra,2021-09-15T11:17:48Z,"this means the the command itself (no arguments) is invalid, right?
let's state that in the comment."
709088938,9504,oranagra,2021-09-15T11:21:56Z,"let's list the ""sentinel"" and ""sentinel-only"" flags here.
this is where we make the difference between these two clear.
i wanted to document that in the constant in server.h, but concluded that instead, it should be documented here.
i.e. to say that ""sentinel"" means that the command exists in both Redis and Sentinel "
709091803,9504,oranagra,2021-09-15T11:26:34Z,"i think `ok-stale` should be added here. or actually to all config sub-commands.
so, this would mean that there's no real change here compared to the past. right?
i.e. the old code had `admin ok-loading ok-stale no-script`, but then blocked loading in all except for GET.
(for HELP we don't care)"
709119881,9504,oranagra,2021-09-15T12:08:39Z,"if we add a return above, we can reduce the indentation of this code.
less indentation is better, but also it means it won't change the blame log."
709121061,9504,oranagra,2021-09-15T12:10:11Z,"it was a multiline `if`, the old style was better (and also no need to change these lines (blame log))"
709124302,9504,oranagra,2021-09-15T12:14:36Z,"i think this is an array, not a set.
each entry is a map"
709125626,9504,oranagra,2021-09-15T12:16:22Z,looks like you should revert this line (you didn't add sub-command to the legacy)
709129469,9504,oranagra,2021-09-15T12:21:25Z,have a clue why did git decide all these lines are new / changed?
709131152,9504,oranagra,2021-09-15T12:23:37Z,"so one can do `COMMAND INFO CONFIG|GET`
maybe explain this feature, and also list all the places that this syntax works in the top comment?"
709132753,9504,oranagra,2021-09-15T12:25:42Z,"i think we discussed this, but i have second thought..
it's a bit odd that `COMMAND INFO` returns an array with all commands.
and also `COMMAND INFO CONFIG PING` returns an array of just 2.
maybe we should consider adding a `COMMAND ALL` subcommand instead?
or can you remind me the reasons we did that?"
709133719,9504,oranagra,2021-09-15T12:27:00Z,maybe this can be a set rather than an array
709134848,9504,oranagra,2021-09-15T12:28:32Z,"since GETKEYS is complex and common to both COMMAND and COMMANDS, maybe we should extract this code to a common function?"
709140367,9504,oranagra,2021-09-15T12:35:22Z,"maybe it's worth explicitly mentioning in the release notes (top comment) that side effect.
if in the past a call to `CONFIG SET` would appear in cmdstat_config, it will no longer appear there.
so some application that's looking for it there (rather than human eyes) will not find it."
709140793,9504,oranagra,2021-09-15T12:35:56Z,"i think it is better to pass an input sds and accumulate to it, rather than generate an empty one and then copy it."
709155363,9504,oranagra,2021-09-15T12:53:02Z,"can you remind me why we have `random` flag, and why only on CONSUMERS and not on GROUPS and STREAM?"
709165013,9504,oranagra,2021-09-15T13:04:06Z,"maybe we should actually compose a full list the ones which have different flags in sub-commands (for release notes).
i.e. we used to have use-memory (affects OOM error) for the entire XGROUP command (including DESTROY and DELCONSUMER), now we only have it for CREATE and CREATECONSUMER.
"
709166731,9504,oranagra,2021-09-15T13:06:15Z,i don't think PURGE needs `random`
709168610,9504,oranagra,2021-09-15T13:08:30Z,"remind me how you handled the removal of memoryGetKeys?
i.e. i don't see an old range spec here, and IIRC the code in redis doesn't use the key-specs."
709169327,9504,oranagra,2021-09-15T13:09:21Z,do we wanna remove the `admin` from WHOAMI?
709175232,9504,oranagra,2021-09-15T13:15:58Z,"technically LEN is also `random`.
executing it on the replica will result in a different value.

```c
 * random:      Random command. Command is not deterministic, that is, the same
 *              command with the same arguments, with the same key space, may
 *              have different results. For instance SPOP and RANDOMKEY are
 *              two random commands.
```"
709176326,9504,oranagra,2021-09-15T13:17:08Z,i think FREQ is also `random`
709176832,9504,guybe7,2021-09-15T13:17:43Z,"i did promote SENTINEL, just not DEBUG"
709179123,9504,oranagra,2021-09-15T13:20:12Z,i think GETNAME and SETNAME should not be `admin` and also not `random`.
709179414,9504,oranagra,2021-09-15T13:20:28Z,actually the `random` should be removed from most of these (only left for INFO and LIST)
709179774,9504,oranagra,2021-09-15T13:20:52Z,REPLY is not `admin`.
709184228,9504,oranagra,2021-09-15T13:25:45Z,"if we remove `admin` from SETNAME, how does it affect the ACL categories?
will users that are set to be blocked on the admin category be able to execute this sub-command?
i guess not (yet), but i think we should look into it."
709238560,9504,oranagra,2021-09-15T14:21:46Z,shouldn't this just have the `container` flag?
709239953,9504,guybe7,2021-09-15T14:23:04Z,yes
709242838,9504,guybe7,2021-09-15T14:25:56Z,"we usually drop a line if the `if` is more than one line

either we leave it like this or I will have the `if` condition in one line (anyway it will change the blame log)

unless you insist"
709243894,9504,guybe7,2021-09-15T14:26:58Z,why array? elements are unique and there's no order
709245571,9504,guybe7,2021-09-15T14:28:38Z,"yes, because COMMANDS is directly after COMMAND and they have the same start and end

do you want me to move it?"
709250237,9504,guybe7,2021-09-15T14:33:11Z,"I don't know, this feels more right to me... maybe @yossigo can share his thoughts?"
709251837,9504,guybe7,2021-09-15T14:34:47Z,"i may feel better with `COMMANDS INFO all`
WDYT?
"
709258803,9504,guybe7,2021-09-15T14:41:58Z,because CONSUMERS shows the idle time (depend on mstime())
709260891,9504,guybe7,2021-09-15T14:44:10Z,"why?

i think it should be fine to call XGROUP DESTROY while OOM, no? otherwise, why is DEL allowed?"
709261846,9504,guybe7,2021-09-15T14:45:11Z,"it does - if there are only ""range"" specs it glues them together to create the legacy spec"
709265002,9504,guybe7,2021-09-15T14:48:23Z,ok
709265558,9504,guybe7,2021-09-15T14:48:52Z,not necessarily (COMMAND is the only one the violates that) 
709266108,9504,oranagra,2021-09-15T14:49:23Z,"but there is more than one line in the `if` condition. and i don't see you changed anything in that line, so why would it change?"
709269842,9504,oranagra,2021-09-15T14:53:07Z,"it's right that each element is unique (it's a big dictionary with lots of fields, and there are no duplicate records), but i think a set is a set of simple objects like strings.
we could have made it a map (if we moved the name outside the dict).
i.e. a map where each entry has a command name (the map's field), and a value that's an array (or map) of metadata.
but the way it is now, where each entry is a map, doesn't make sense to me as a set.
if you disagree, let's seek a 3rd opinion."
709271345,9504,oranagra,2021-09-15T14:54:41Z,"ohh
it's odd to see the old code being marked as new, and the new code being marked as old.
maybe if we extract the GETKEYS implementation it'll change all that."
709272904,9504,oranagra,2021-09-15T14:56:17Z,"i like that even less.. i.e an argument that could either be a command name or an constant ""all"" string"
709276376,9504,oranagra,2021-09-15T14:59:43Z,"i didn't say your code is wrong. i agree with it.
i'm saying that for the release notes, we should include a list of the ""side effects"" of this PR.
i.e. in the past the entire XGROUP had `use-memory` and now only two sub-commands have it (other sub-commands are allowed while OOM).

so i think we need to compose a list of all the commands that now have different flags for each sub-command, and mention that list in the top comment."
709277521,9504,guybe7,2021-09-15T15:00:57Z,"good thing you asked, i had a bug (used KSPEC_BS_KEYWORD instead of KSPEC_BS_INDEX)"
709278272,9504,oranagra,2021-09-15T15:01:44Z,"ok, so we can theoretically drop the legacy spec from the command table now, and rely on that instead?
maybe we should at least add a test for MEMORY USAGE (maybe using ACL)"
709292569,9504,guybe7,2021-09-15T15:17:11Z,"we have the same in INFO... ""all"" is not a section"
709293210,9504,guybe7,2021-09-15T15:17:57Z,ok
709302382,9504,oranagra,2021-09-15T15:28:02Z,"the sections in INFO are not sub-commands or command arguments. it's a single argument that in theory can one day include regex or whatever.
i.e. we document that as `INFO [<section>]`
but here we'll document it as `COMMANDS INFO <cmd-name> ...`
i don't think ""all"" applies here."
709317256,9504,guybe7,2021-09-15T15:44:32Z,"ok, I'm starting to lean towards `COMMANDS ALL`, let's see what Yossi thinks"
709354990,9504,guybe7,2021-09-15T16:30:24Z,@oranagra should i resolve this comment?
709355857,9504,guybe7,2021-09-15T16:31:27Z,"because i saw this violation of the Redis coding standard, so I fixed it..."
709361812,9504,guybe7,2021-09-15T16:38:55Z,"i don't mind... @yossigo WDYT? the output of COMMANDS INFO should be a set, list, or hash (key is command name, value is its data)"
709364836,9504,oranagra,2021-09-15T16:43:04Z,"If that flag doesn't indicate that the command itself is meaningless without a sub-command, then why do we need it? 
we can populate that flag automatically by looking at the subcommand list provided in the commands table, or better yet, we don't need the flag at all (we can just look at the subcommands dict"
709366039,9504,oranagra,2021-09-15T16:44:45Z,"Ohh, sorry, I think I looked at it in the wrong direction, I need the new one is the right one. "
709372550,9504,guybe7,2021-09-15T16:53:11Z,"ok, changed it to hash (map) - LMK if you wish me to revert"
709374554,9504,guybe7,2021-09-15T16:55:53Z,"that's a good question... i'll drop it and see what happens :)
but I guess you're right, we don't really need it"
709375997,9504,guybe7,2021-09-15T16:57:46Z,indeed it's unused...
710217954,9504,guybe7,2021-09-16T15:15:16Z,check: what happens if we give every subcommand its own ACL id? does it break anything?
710224062,9504,guybe7,2021-09-16T15:22:20Z,"recent update: we decided to keep the current impl, `COMMANDS INFO` with no args  returns the info about all commands

@yossigo please ack"
710227432,9504,oranagra,2021-09-16T15:26:24Z,just to make sure you didn't miss it. please add a test for it using ACL
710232677,9504,oranagra,2021-09-16T15:32:02Z,"ACK, and also note: https://github.com/redis/redis/pull/3211#issuecomment-920970979
so:
`COMMANDS INFO [<cmdname> ...]` always returns a `map` with key being the command name, and value being a map (of the command metadata fields), by default returns all commands.
this one is either users by a person from redis-cli (wanting to see one or two commands), or a software that'll want all commands.
and:
`COMMANDS LIST [FILTERBY (MODULE <module-name>|ACLCAT <cat>|GROUP <group>|PATTERN <pattern>)]`
always returns a set of command names, by default all."
710248221,9504,guybe7,2021-09-16T15:49:57Z,"i already added a test that uses COMMAND(S) GETKEYS memory usage

that should be enough, no?"
710268290,9504,oranagra,2021-09-16T16:14:54Z,"I suppose.. I don't remember what I had in mind. 
Maybe I wanted to check that redis internals are using the legacy key spec properly rather than the COMMAND command Metadata. 
But actually GETKEYS does that too (uses the same internal mechanism) . 
So I suppose that's ok"
710590775,9504,madolson,2021-09-17T00:00:37Z,Is this used?
710595721,9504,madolson,2021-09-17T00:09:29Z,"Is there a reason xgroup help is @stream but command is not a @connection ? I guess these are also going to be used for ACLs later, so unclear why they wouldn't all be consistent. Also, shouldn't all the helps be allowed during loading?"
710605650,9504,madolson,2021-09-17T00:26:56Z,I feel like we should be opinionated and pick either having a single command and checking the argument vs having the individual sub commands have their own functions. I would prefer having the individual functions for each sub commands.
710606163,9504,madolson,2021-09-17T00:27:47Z,I don't see the point of promoting this command to be a subcommand. I don't think we'll ever touch this again. It seems excessive to add a help here. This was one of salvatores pet projects. 
710608798,9504,madolson,2021-09-17T00:32:00Z,"I think introducing command vs commands is just going to be confusing, since it's going to be easy to forget which is the ""new one"" and which is the ""old one"" until we deprecate the old one. I would rather introduce new sub-arguments that introduce the new behavior. "
710972693,9504,oranagra,2021-09-17T11:23:03Z,"i think we're aiming to eventually go that way (so config is an example of how it'll look), but we don't want to refactor tons of code in this PR (easy review and less damage to blame log), so the old way is still supported."
710974948,9504,oranagra,2021-09-17T11:26:58Z,"i wish he didn't wrap LCS inside an STRALGO at all (and i also wish he would split it to two commands, one works on strings and one on keys).
At this point, splitting LCS into a sub-command may help a bit (to bring it closer to being a standalone command)

you're absolutely right that it's not really a sub-command like others (CLIENT, ACL, etc).
but in some way it's a bit similar to XGROUP and XINFO.

i don't have any conclusive opinion here.. it stinks either way."
710976230,9504,oranagra,2021-09-17T11:29:10Z,"the problem with the old COMMAND is that it also works with no arguments (we have no other command with sub-command that does that). so i really wanna keep it entirely unchanged (for backwards compatibility) and encourage people to use the new one.

you're right that COMMAND vs COMMANDS is slightly confusing. maybe we can come up with a different name?"
711201001,9504,madolson,2021-09-17T16:36:50Z,"If we agree to eventually trend there I'm okay with that, I just don't like there is code hanging around to support both. "
711203854,9504,madolson,2021-09-17T16:41:26Z,"I get your point. It also is not that important, so I don't feel strongly either way. I would still prefer to just leave it as this weird command that has a weird required second argument (and maybe even update the docs to indicate as much). "
711210135,9504,madolson,2021-09-17T16:51:35Z,"Can we not leave the regular `COMMAND` command in place for the old way of listing commands, and introduce the new `COMMAND LIST` sub-command as the new mechanism with the new structure. It seems reasonable to then say that the root command will be deprecated in 7 and clients should start using the new mechanism.

We also might want to think about building a versioning scheme for the Redis command set that clients can set on connect/hello. If they connect with version 1 they can issue COMMAND, but in version 2 it will throw an error since it will be deprecated."
711229750,9504,oranagra,2021-09-17T17:24:10Z,"So in your suggestion drop that support in 7, old client libraries won't work with 7, and users that want to upgrade redis (to enjoy an optimization or a new feature) won't necessarily be able to do so. 

The other major issue to keep in mind is that client libraries won't be able to just stop using the old COMMAND anytime soon, since they still need to support old redis versions.
 
I discussed this with Guy and we concluded that it's OK to ask them to first issue the new COMMANDS and only if it fails issue the old one. It means an additional round trip on connection. 

I don't like to have redis explicitly support multiple versions old protocols and command sets.. Currently we support all (never remove a command or a protocol), but even if we someday remove something, we can remove them one by one separately, no sense to bind them IMHO. And I don't see a reason to refuse something that's still actually supported if the client is using another new feature. 

Maybe we need to discuss this in more detail in another forum? "
711304540,9504,madolson,2021-09-17T19:35:01Z,"I'm not saying to drop support in 7, just to deprecate it so that we can remove it in some future version. I don't see why we can't have `COMMAND` and `COMMAND LIST` live together and have a different output?"
711560770,9504,guybe7,2021-09-18T08:54:25Z,"@madolson the main problem is `COMMAND INFO` - we broke its structure, mostly in order to remove the old first,last,step scheme (we were under the impression that as long as the ""legacy"" scheme exists, people won't put the effort in parsing the new key specs) - @oranagra CMIIW

I don't mind dropping COMMANDS if we can get COMMAND to:
1. output a list of all commands (just a list of strings), with the ability to filter them (for example, get only commands that belong to some module, by regex, etc.)
2. output detailed information about all commands (each such information is not backward compatible with COMMAND INFO, so we can't just add stuff to COMMAND INFO's output). it should also be able to emit information about specific commands.

the most ""ugly"" thing is that, no matter what, if we choose to use COMMAND, there will be two subcommands that retrieve detailed information about commands: INFO (the old struct) and INFO2/DETAILS/LIST/whatever that use the new struct, with key specs and subcommands
"
711573893,9504,oranagra,2021-09-18T10:51:51Z,"In theory, there's no problem to add key specs to COMMAND INFO (same as we have in unstable today), also also add the sub-commands and additional Metadata to that array (old clients will ignore the additional entries in the response). 

So in that sense we can simply add COMMAND LIST (to just list command names) and extend COMMAND INFO, and do nothing else. 

But there are so many issues with the old COMMAND that I rather just leave it unchanged and add all the new features to a new command. 

The issues that bother me:
1. The fact that the command have sub-commands, but also functions as a command with no arguments too. This causes complications to the command and sub-commands listing. We may need to re-introduce the `container` flag to distinguish between and command with optional sub-commands, and one that's just a container for sub-commands. 
2. The fact the response for the command Metadata is array with specific indexes rather than a map with field names. (I don't like to add the `since`, `returns` or other fields we plan in #9359 to just sit in some specific index without a title) 
3. Some old fields that I wish to remove (firstkey etc) "
712096877,9504,guybe7,2021-09-20T11:53:49Z,yes - it is used to populate `subcommands_dict` (much like `sflags` is used to populate `flags`)
712098937,9504,guybe7,2021-09-20T11:57:13Z,"i think that all ""help"" subcommands should be ""ok-stale ok-loading"" without any ACL categories (i.e. I'll remove @stream from XINFO/XGROUP)

sounds right?"
712099269,9504,guybe7,2021-09-20T11:57:41Z,"yes, we will ""convert"" all eventually

resolving convo "
712099855,9504,guybe7,2021-09-20T11:58:36Z,@madolson it's still that weird command but now it has two weird second arguments :)
712127043,9504,oranagra,2021-09-20T12:39:20Z, Don't think we need to actively convert them.. But rather intend to phase them out gradually. 
712132078,9504,oranagra,2021-09-20T12:46:13Z,"I'm not sure about the `@stream`
I agree that there's no need to restrict access them them (e.g on stale or loading states), but if someone decided to block all stream commands then HELP should be included. 
What's more important, is that if someone decided to **allow** all stream commands, HELP should be included. 
Bottom line, I think the redis flags can change, but the ACL category flags should should be retained. "
713002673,9504,oranagra,2021-09-21T12:45:33Z,"You do know that `setuser` is not incremental, right? this second line overrides the previous one"
713004197,9504,oranagra,2021-09-21T12:47:24Z,"Ohh I see a previous test here uses the same pattern, maybe I'm wrong? "
713006773,9504,oranagra,2021-09-21T12:50:17Z,"I'd like to add an acl subcommand test for non-subcommand (like `SELECT 1`  allowed and `SELECT 2` not allowed). 
I know people are using it, so wanna make sure we don't break it. 
Maybe similar thing for DEBUG"
713009128,9504,oranagra,2021-09-21T12:53:02Z,"That's a new feature that was not possible in the past, right? 
So in that sense this is a breaking change? 
Either way, we should explicitly document that in the top comment"
713034855,9504,oranagra,2021-09-21T13:22:25Z,"I think that comment is misplaced.. Already included (kept) in the caller where it makes more sense. 
Am I right? "
713037538,9504,oranagra,2021-09-21T13:25:26Z,"@madolson can you please take a closer look at this one? 
Maybe requires more testing or test code"
713048028,9504,oranagra,2021-09-21T13:36:29Z,"I don't think we wanna mention it's an abuse.. The original design (in Redis) wasn't very good and it allowed that. 
Also, since we didn't promote DEBUG to a container command, that's a perfect excuse for supporting this (""first argument"" filtering) "
713132034,9504,guybe7,2021-09-21T15:00:53Z,"```
127.0.0.1:6379> ACL setuser newuser +acl
OK
127.0.0.1:6379> ACL setuser newuser +xinfo
OK
127.0.0.1:6379> acl list
1) ""user default on nopass ~* &* +@all""
2) ""user newuser off &* -@all +acl +xinfo""
```"
713139687,9504,guybe7,2021-09-21T15:08:52Z,"it's not a breaking change - in the past, it would have just failed
I'll document in the top commet"
713145222,9504,guybe7,2021-09-21T15:14:35Z,"yes, it was copied by mistake (appeared twice in the code)"
713358879,9504,madolson,2021-09-21T19:34:45Z,"All of the issues seem to be leveled at disliking the current `COMMAND` command, and your solution is to make a new command that is slightly different in many dimensions but named way to similarly. I strongly dislike ""deprecation"" for the sake of it, which is how I view removing fields and changing a list to a map. 

The only valid argument I'm seeing is we have new functionality, and we need to expose it, which seems like the job of `COMMAND LIST` or something."
713366186,9504,madolson,2021-09-21T19:45:46Z,"```suggestion
void ACLCountCategoryBitsForCommands(dict *commands, user *u, unsigned long *on, unsigned long *off, uint64_t cflag) {
```"
713385553,9504,madolson,2021-09-21T20:15:09Z,"This function could use some documentation, I didn't really follow what it did until looking at in the context of other places it's called."
713388041,9504,madolson,2021-09-21T20:18:55Z,"More testing yeah, I think it looks correct."
713715812,9504,oranagra,2021-09-22T08:32:48Z,"ohh, sorry, i was confusing context of #9330 (different behavior of config file parsing, vs ACL command)"
713718278,9504,oranagra,2021-09-22T08:35:56Z,"@guybe7 please add some tests for ACL GETUSER with sub-commands, and commands / sub-commands with firstarg"
713762105,9504,guybe7,2021-09-22T09:28:50Z,"@madolson there are two new functionalities:
1. `COMMANDS LIST` - returns a set of command names - has some filtering capabilities
2. `COMMANDS INFO` - returns detailed information about commands (like `COMMAND INFO`, but returns a map instead of a list, removes the first,last,step fields, and adds key_specs, and sub-command list fields) - can return details about all commands or a list of requested ones.

IIUC you suggest the following alternatives (which will add the features described above as new sub-commands of the existing COMMAND):
1. `COMMAND LIST`
2. `COMMAND INFO2/DETAILS/whatever`

(CMIIW)

@yossigo @soloestoy any thoughts?
"
713808254,9504,oranagra,2021-09-22T10:30:55Z,"I edited Guy's post with a few clarifications.
the 3rd options is:

3 . add the new `COMMANDS INFO` features we wanted to add to the existing `COMMAND` (all commands) and `COMMAND INFO <cmd>` (one command) as new fields, without modifying the content of old ones.

what i don't like about that is:
- we still support COMMAND with no argument
- we still use an array of fields in specific indexes (e.g. the sub-commands will be in [9] but will not have any title to it, and people will have to just be aware that [9] is the subcommand list (and [8] is the key-specs

the upside is that client libraries will still be able to make a single COMMAND call on startup and decide how to parse it by the number of fields they see, instead of issuing two commands.
but i actually rather make it more explicit (i think that a completely different command will make that statement)

my preference is for a completely new command (a admit that COMMANDS is a confusing name).
my second choice would be option 2 from the list in the previous post."
714808305,9504,oranagra,2021-09-23T13:40:04Z,new `CLIENT NO-EVICT` was added in #8687 (merged)
718568085,9504,yossigo,2021-09-29T14:22:02Z,"To me, making this accessible and practical to clients beats the other arguments. In theory we could piggy back on top of `HELLO` so clients can negotiate this, but I think this would be somewhat over-engineered.

So assuming there's a fair number of clients that actually execute `COMMAND` when initializing a connection, I'd prefer to stick to `COMMAND` and add a 9th element. We can try (again) to validate this assumption with client authors."
719167338,9504,oranagra,2021-09-30T08:14:53Z,"@guybe7 we discussed this with the core team, we concluded that for now we're gonna just append more elements to the old COMMAND response, so a client can just keep issuing the old COMMAND and get both old and new metadata depending on the redis version.

maybe when we'll handle the next step (commands.json), we'll decide to either add a new command or a new sub-command that has that same information in a map with field names rather than array with predefined indexes.
i.e. the information will be included in the old format, and maybe **also** in a new one, and that'll be decided later.

i suppose we can keep the new COMMAND LIST feature with the same design we planned for COMMANDS LIST"
728053809,9504,oranagra,2021-10-13T13:18:57Z,let's add some short top comment explaining what it does and the return value
728054860,9504,oranagra,2021-10-13T13:20:05Z,"maybe we need to put some union in commandListFilter and fetch the command or translate ACL just once in some way?
maybe some lazy caching that will not force us to expose modules to the other c files.
i.e. the struct will contain a union of a void* and a long, plus a boolean to indicate if already cached."
728056500,9504,oranagra,2021-10-13T13:21:40Z,spare line
728061365,9504,oranagra,2021-10-13T13:26:34Z,"let's see if we can find something less fragile (that we won't need to repeatedly update).
maybe the `@hyperloglog` cat and a `pf*` prefix?"
728122405,9504,oranagra,2021-10-13T14:26:33Z,"this sorting thing causes the output to be very misleading.
i.e. if `-@all` is last, it'll block everything.
this also means the test is weak (won't find real bugs).
we must find a way around it."
728126564,9504,oranagra,2021-10-13T14:30:37Z,"i think it's a good idea to also try to test what's accessible and what's not.
i.e. not only rely on GETUSER."
728127898,9504,oranagra,2021-10-13T14:31:44Z,"i think ""container"" is too broad. maybe ""subcommands"""
728142388,9504,oranagra,2021-10-13T14:45:53Z,maybe `parent_name` should be first?
728151676,9504,oranagra,2021-10-13T14:53:11Z,"now we don't validate the order between `-client` and `+client|id`.
maybe we can do `+@all * -client * +client|id`
and another `+@all * -client * +client|setname`"
728153252,9504,oranagra,2021-10-13T14:54:14Z,"didn't you mean to remove this line?
also, please drop the `lsort` in all the places you used it.
i.e. some don't need it, and others i think you forgot and you still need to add pattern matching."
728159376,9504,oranagra,2021-10-13T14:59:31Z,i think we're missing some doc comment that mentions how to use `RM_AddCommandKeySpec` on sub-commands (i.e. the `|` thing)
728164346,9504,oranagra,2021-10-13T15:04:18Z,let's also call the sub-command (or did you do that and i missed it?)
728327508,9504,oranagra,2021-10-13T18:08:40Z,"i'm not sure we wanna mention it's a relic (now that we gave it a proper name).
we can however say that it can be applied on a first arg of a sub-command, i.e. it could be argv[2]"
728343144,9504,oranagra,2021-10-13T18:30:44Z,"i think you should re-order the commands and put this below RM_CreateCommand.
you'll need to add a forward declaration, but ti'll prevent a blame log change of so many lines..."
728348051,9504,oranagra,2021-10-13T18:37:50Z,i don't think we wanna expose these flags to users.
728354507,9504,oranagra,2021-10-13T18:47:17Z,this needs to be updated in redis.conf too
728356199,9504,oranagra,2021-10-13T18:49:37Z,"do we have a test for COMMAND GETKEYS for a command with sub-commands (other than MEMORY USAGE)?
maybe test some basics like GET and and advance one like XGROUP"
728720867,9504,oranagra,2021-10-14T07:45:43Z,"there is a possibility you'll get the same string pointer pointing to a different string (malloc returning the same pointer)
but also, with this solution you don't cache the repeated call to `ACLGetCommandCategoryFlagByName`.
i think you should add some caching capabilities to the commandListFilter struct in some way."
730358193,9504,oranagra,2021-10-17T05:48:18Z,"I didn't have anything specific against the word ""relic"". i meant that i don't think we should document the history and how it was named, and that ""We had to keep allowed_firstargs (previously called allowed_subcommands)"".
just document what it does and that it can be either `argv[1]` or `argv[2]` (when applied on a sumbommand)"
730410997,9504,itamarhaber,2021-10-17T12:53:31Z,"```suggestion
     ""no-script ok-loading ok-stale @connection""},
```"
730411244,9504,itamarhaber,2021-10-17T12:55:25Z,"```suggestion
     ""no-script ok-loading ok-stale @connection""},
```"
730411294,9504,itamarhaber,2021-10-17T12:55:38Z,"```suggestion
     ""no-script ok-loading ok-stale @connection""},
```"
730411418,9504,itamarhaber,2021-10-17T12:56:45Z,"```suggestion
     ""no-script random ok-loading ok-stale @connection""},
```"
730411622,9504,itamarhaber,2021-10-17T12:58:17Z,"I'm not sure that this is an `admin` command, but perhaps better safe than worry."
730426350,9504,itamarhaber,2021-10-17T14:41:41Z,"Cluster-aware clients need some of these just for handshaking, so I think we should remove `admin` from: `countkeysinslots`, `getkeysinslot`, `info`, `nodes`, `keyslot`, `myid` & `slots`."
730426958,9504,itamarhaber,2021-10-17T14:45:20Z,"```suggestion
     ""no-script ok-loading ok-stale sentinel""},
```"
730458603,9504,oranagra,2021-10-17T18:44:24Z,"note that the main INFO command is not `admin` but it is `@dangerous`, i guess due to latency concerns?"
730458672,9504,oranagra,2021-10-17T18:44:50Z,make sure to update the top comment when you merge these.
730458815,9504,oranagra,2021-10-17T18:46:10Z,"i agree, let's keep it with `admin`"
730469318,9504,itamarhaber,2021-10-17T20:08:21Z,"I think it was marked dangerous because of the information it may reveal, latency was supposed to be greatly improved in a previous version. In any case, a cluster-aware client may require access `CLUSTER INFO` just to bootstrap and/or follow up with topology changes."
730562472,9504,madolson,2021-10-18T04:31:38Z,"I thought info was marked dangerous because it was slow as well, in either cause `CLUSTER INFO` is fast."
730582252,9504,oranagra,2021-10-18T05:35:22Z,"@madolson any other feedback on the above list Itamar stated? do you agree that they should all be non-admin?
do you see anything in these that should be considered dangerous or admin?"
730602110,9504,madolson,2021-10-18T06:25:42Z,"```suggestion
     ""no-script ok-loading ok-stale @connection""},
```"
730603985,9504,madolson,2021-10-18T06:29:33Z,"This also doesn't really need admin, since it doesn't change anything."
731745468,9504,yossigo,2021-10-19T11:01:10Z,I think you forgot to free `copy` in a couple of places.
732502546,9504,guybe7,2021-10-20T07:49:41Z,"@oranagra @madolson i dropped ""admin"" as Itamar requested, please reopen this convo if you think otherwise"
763128669,9504,enjoy-binbin,2021-12-06T15:45:51Z,"somehow i think it should be changed like this
```c
    {""set"",sentinelCommand,-5,     // -3 -> -5
     ""admin only-sentinel""},

    {""simulate-failure"",sentinelCommand,-3,     // 3 -> -3
     ""admin only-sentinel""},
```

in the past, we can use `sentinel SIMULATE-FAILURE CRASH-AFTER-ELECTION CRASH-AFTER-PROMOTION`, although it is only used for testing, the code supports such use
```
/* SENTINEL SET <mastername> [<option> <value> ...] */
/* SENTINEL SIMULATE-FAILURE <flag> <flag> ... <flag> */
```
and we introduced the sub-command table, so in some sub-commands
we can not check the number of parameters
in sentinel sub-commands, we can do cleanup like this: https://github.com/enjoy-binbin/redis/commit/0b30a386f7842fd9647fcb7f89fb82532a556b0b
it can remove a `numargserr` label, i think it's worth it...
As for the other sub-commands, i think we can leave them as they are

Of course, we don’t need to make any changes. 
There is no problem with the original inspection."
763718887,9504,guybe7,2021-12-07T07:53:03Z,"@enjoy-binbin thanks!

i agree with changes in the SENTINEL command table, can you please PR?

regarding the improvements in sentinelCommand : the plan is actually to split it completely into smaller functions, so that each function is the `proc` of a subcommand (same as we did in configCommand). you're welcome to PR that too if you wish."
763729120,9504,enjoy-binbin,2021-12-07T08:09:08Z,"oh i get it, sure i can take care of the SENTINEL command table one, we can hold on the other one"
763834762,9504,oranagra,2021-12-07T10:07:06Z,"just note, we don't wanna split the `sentinelCommand` just yet, it'll mess up the blame log unnecessarily.
we can however do that for `sentinelSetCommand` since it's already split.
but i think it'll look odd that some sub-commands have their own procs, and others don't."
784472597,9504,enjoy-binbin,2022-01-14T02:47:57Z,"can we just set the `subcommand->name = fullname`? (or add a fullname field....)
it seems to me now that the subcommand name are generally unusable, we must get the fullname to use it.
so i suppose if we can just set the name = fullname, when we need it, we can just use it...

like here, it looks like the subcommand won't get the full name (unfamiliar with modules)
https://github.com/redis/redis/blob/56a802057e90ea482702dbd5191bc397caf0f596/src/module.c#L10198-L10204"
784744322,9504,oranagra,2022-01-14T10:48:22Z,"interesting..
in theory changing that (past 7.0) could be a breaking change.
but currently (before 7.0 is released), modules can't register sub-commands.

@enjoy-binbin did you conduct some search to see who's still using the simple `cmd->name` (on something that could be a sub-command) to find that one?
if that's the only one, i tend to agree we wanna make `name` the full name by default and drop all the complication of `getFullCommandName`"
785276139,9504,enjoy-binbin,2022-01-15T06:06:09Z,"> did you conduct some search to see who's still using the simple cmd->name (on something that could be a sub-command) to find that one?

actually no, i happen to see it (reviewing / studying some module codes.)

i also tend to use the full name by default, so that we don't have to deal with `getFullCommandName`.
i do some search, here are what i found: 


1. latencyAllCommandsFillCDF, #10103

2. afterErrorReply (we need to take care of it, it could be a subcommand i think):
```
const char *cmdname = c->lastcmd ? c->lastcmd->name : ""<unknown>"";
serverLog(LL_WARNING,""== CRITICAL == This %s is sending an error ""
                     ""to its %s: '%.*s' after processing the command ""
                     ""'%s'"", from, to, (int)len, s, cmdname);
```

3. ACL CAT? maybe we need to also print the subcommand in future? (for now, it only works on parentcommand)

4. COMMAND LIST? same as above, only print the parent command, but others one, like command docs config|get, can work on subcommand"
785404957,9504,oranagra,2022-01-16T08:10:34Z,"@guybe7 considering sub-commands are now first class citizens, i suppose we should list them in ACL CAT and COMMAND LIST, WDYT?

and IIRC from @enjoy-binbin findings, we might be better off just deleting `getFullCommandName` and put the full command name in `cmd->name`, which will also fix:
* RM_GetCurrentCommandName module API
* the `CRITICAL` log warning in `afterErrorReply`
* replies in `COMMAND LIST` and `ACL CAT` once we change them to include sub-commands."
785730225,9504,oranagra,2022-01-17T08:27:11Z,"@enjoy-binbin Guy didn't respond yet, but i'm paranoid about forgetting this (discussion in a closed PR), and i think we must do that in 7.0 for completeness. wanna make a PR and we can continue the discussion there if needed?"
785734544,9504,enjoy-binbin,2022-01-17T08:33:32Z,"sure, i can handle `getFullCommandName` first (i will keep in mind :) "
785794245,9504,guybe7,2022-01-17T09:48:19Z,"@oranagra @enjoy-binbin I agree. we should always store the fullname, and eliminate all uses `getFullCommandName`, except for the initial assignment of the name.
we should rename `redisCommand.name` to something like `tmp_cmdname` so that the compiler will make sure we didn't miss anything. after that, we can call it `name` again. another option is to change it to `fullname` permanently in order to cause conflicts in open PRs such as https://github.com/redis/redis/pull/10103"
785813095,9504,enjoy-binbin,2022-01-17T10:10:56Z,"i 'd like go the `fullname` option.
at the same time we should also care about `subcommands_dict`, now the key is the subcommand short name.
we can treat name as the short name(or rename it in some function arg name), fullname as the full name"
785830956,9504,guybe7,2022-01-17T10:32:31Z,"i think that the command name is *always* the full name (also in the ubcommand_dict)
to clarify, the word ""rewrite"" from `CONFIG REWRITE` should **never** appear anywhere by itself, it should always be saved as ""config|rewrite"""
785834462,9504,guybe7,2022-01-17T10:37:04Z,suggestion: we need to make sure that all callers to `commandAddSubcommand` already pass the subcommand with the fullname
785843516,9504,oranagra,2022-01-17T10:48:17Z,"@enjoy-binbin maybe while you're working on it, you can also handle #10124 and see if we missed anything."
627538983,8887,oranagra,2021-05-06T15:45:11Z,"i think the BlobLen should be a `size_t` type, and the Len a `long`.
i think that's their true type, if the encoded size is smaller, it can be cast upwards, but at least in one case we can count records, which is in theory unlimited."
627540395,8887,oranagra,2021-05-06T15:47:04Z,"i think the interface should work with size_t, not unit32_t, it's not encoded yet, and IIRC listpack can even encode longer strings in theory."
627548626,8887,oranagra,2021-05-06T15:54:36Z,"i'd imagine we're gonna see this ternary operator a lot, maybe it would be nice to make a macro like.
(trying a terminology change the same time in this example)
```c
#define PACKED_CLASS(o) ((o)->encoding == OBJ_ENCODING_ZIPLIST ? &listContainerZiplist : &listContainerListpack)
```

then to use it i'll just be:
```c
packedClass *packed = PACKED_CLASS(o);
```"
627561930,8887,oranagra,2021-05-06T16:07:03Z,"i'm trying to understand why you chose to add these adapters here, and the _lpGet in listcontainer.c.
arguably they should have the same fate.
maybe it would be cleaner to promote the declaration of the list container interface to a header of it's own (not in server.h), and then include that header in both ziplist.c and listpack.c and have them create the types (removing the need for listcontainer.c)"
627571141,8887,oranagra,2021-05-06T16:15:44Z,"why did you have to add the LP_EOF check?
if anything you need to break the loop after calling lpValidateNext and before calling the callback.
since lpValidateNext may set `p` to NULL"
627589895,8887,oranagra,2021-05-06T16:32:08Z,we need to conduct some benchmark to make sure we're not suffering a performance hit from that additional indirection
627593024,8887,oranagra,2021-05-06T16:36:45Z,"maybe create some IS_PACKED macro for that in server.h?
in combination with the PACKED_CLASS macro suggestion, much of the code that works with that doesn't need to ever mention listpack or ziplist, and will remain the same if we ever add a 3rd packed encoding type.

same goes for some portions of code that only need to save work with the pointer or blob, like rdb.c or defrag.c"
627599159,8887,oranagra,2021-05-06T16:45:30Z,"if we run the entire test suite in two modes, we can have a utility proc named `assert_packed_encoding` which can verify it's the expected type (i.e. it won't take an encoding name argument)"
627857844,8887,sundb,2021-05-07T01:04:51Z,Great!!! this is exactly the problem I've been struggling with for days (ziplistEntity in ziplist) .
627865728,8887,sundb,2021-05-07T01:32:34Z,"If the next element is LP_EOF, lpValidateNext does not set the next element to NULL, resulting in 1 more count, this code is dead code, so there is no bug.
I tried to set *pp to NULL in lpValidateNext if the next entry is LP_EOF, but that would cause stream validate to fail, because stream valiadte would call lpGetIntegerIfValid, resulting in assert."
627866169,8887,sundb,2021-05-07T01:34:08Z,Moving the EOF check to lpValidateNext is a better approach.
627866315,8887,sundb,2021-05-07T01:34:38Z,I will do it.
627866866,8887,sundb,2021-05-07T01:36:28Z,good job!
627867115,8887,sundb,2021-05-07T01:37:23Z,"Yes, I will add these tests later, before not adding is to avoid the amount of code too much impact review."
628836700,8887,oranagra,2021-05-09T05:34:13Z,"copy paste error, you should write your name and fix the date."
628836809,8887,oranagra,2021-05-09T05:35:15Z,"let's add some 1-2 line comment explaining what this file is for...
i.e. a uniform interface for ziplist and listpack"
628837091,8887,oranagra,2021-05-09T05:39:09Z,"while this is good for redis users, we need to try to think if maybe it hurts the corrupt-dump tests and the fuzzer. in which case maybe we'll need a DEBUG trick to disable it."
628837387,8887,oranagra,2021-05-09T05:41:59Z,"we need to think about this.
On one hand, we want to eventually get rid of all ziplists. and if the user didn't wanna pay that price during upgrade (slowing it down considerably), we wanna do it gradually, but on the other hand, a full conversion of the entire ziplist here can cause significant latency.

the alternative of doing it even more gradually, means to hold both a ziplist and a listpack side by side and gradually move entries from one to the other. this sounds like code complexity that we certainly don't wanna pay.

@yossigo WDYT?
p.s if we do in some way make this optional, we need to let the corrupt-dump tests a way to skip it."
628838258,8887,oranagra,2021-05-09T05:51:11Z,"i don't like these changes in the test infra. i would prefer to have something generic like the `--config` (e.g. see how it is used by daily.yml).
maybe this means that want to promote this debug command into a config.
we do have other configs that are used only for debugging and are undocumented (like the `key-load-delay`).
unlike `SET-SKIP-CHECKSUM-VALIDATION`, i suppose this one can't be abused, so maybe it's ok to make it an undocumented config.

another alternative is to maybe add a generic mechanism that allows the test suite to execute an arbitrary command (or a list of commands) on each server right at startup. i.e. similar to `--config` but will get effective only after rdb loading.
so we can do something like `./runtest --run-on-startup ""debug set-default-packed-encoding ziplist""`
each `--run-on-startup` will append to a list, and when we start a server, we'll iterate on that list after it's online and before proceeding to the tests."
628838760,8887,oranagra,2021-05-09T05:56:15Z,"my thought was that instead of spreading many of these, we can have a special proc named `assert_packed_encoding`
unlike `assert_encoding`, it'll get just the key name, and it can match the encoding to be correct by sampling `CONFIG GET`, or by assuming that both `ziplist` and `listpack` are valid (just confirms that it is encoded).
in places were we have a test that's specific to the ziplist to listpack migration, we can keep using `assert_encoding`, since we know which one we expect. but in many other tests, where the old code used to do `assert_encoding` with ""ziplist"", we can now use that new `assert_packed_encoding` and drop the expected encoding argument so that this proc can do it on it's own."
628844481,8887,oranagra,2021-05-09T06:52:50Z,"i would like to re-consider these type changes i suggested. i didn't expect them to have such a cascading effect on so many lines. or maybe it's due to my other comment about the type of `slen` below.

i see the original signatures of these are:
```c
uint32_t lpLength(unsigned char *lp);
uint32_t lpBytes(unsigned char *lp);
unsigned int ziplistLen(unsigned char *zl);
size_t ziplistBlobLen(unsigned char *zl);
```
and we do need to consolidate them.
I suppose the ziplist ones are the right ones, or at least closer to reality. i.e. the memory allocation is size_t, and the count is an integer (i think `unsigned long` is better).
the listpack ones seem misguided, i don't see why they should be pinned to a 32bit encoding, specifically the `lpLength` one since it doesn't just do decoding, it can also count!.

so maybe we should start by reverting my next comment, and then re-consider this one."
628844482,8887,oranagra,2021-05-09T06:52:53Z,"i now see neither listpack nor ziplist can encode 64bit length strings, so my suggestion about changing `slen` to size_t may have been wrong. i didn't expect this request to have a cascading effect on so many lines.

i see that previously ziplist was taking `unsigned int slen` and listpack took `uint32_t size`.
so in reality, in both 32-bit and 64-bit builds, they're both 32-bit unsigned vars, and considering the encoding format can only hold up to 32bit length strings, even in 64-bit builds, i suppose that's ok (although size_t would have also be good).
i suppose that they way to consolidate that to a uniform interface with minimal line change is to pick one of them. maybe `unsigned int` would be better."
628844811,8887,oranagra,2021-05-09T06:55:57Z,"sorry for the zigzag, better late than later.
i think these macros should be prefixed by `OBJ_` considering they're taking an `robj`.
previously the code referred to `->encoding` and matched it to `OBJ_ENCODING_xxx`, but now it looks a bit vague."
628845659,8887,oranagra,2021-05-09T07:03:30Z,"i'm still not sure about this change.
certainly your previous version who called the entry_cb after progressing to the `Next` element was wrong, and i do still think that the increment of `count++` should be last like before (not that it really makes any difference).

but regardless, i'm not sure about the added check of LP_EOF in the `while` loop.
in contrast to what you wrote, lpValidateNext does check for LP_EOF and sets the output var to NULL. but indeed that would not cause the loop to break, since it returns `1`. setting the output to NULL will cause the next iteration to break, but the `count` will still be incremented.
i think you're right that it should not be incremented, but then how come this check was passing (or how come your change didn't affect it)?
```c
    if (numele != LP_HDR_NUMELE_UNKNOWN && numele != count)
        return 0;
```"
628997060,8887,sundb,2021-05-10T01:06:29Z,"I think it is reasonable that ```slen``` is ```unsignd int```, the maximum string that listpack can store is 32 bits."
629000499,8887,sundb,2021-05-10T01:23:37Z,"Before this, ```deep``` of ```lpValidateIntegrity``` would never be set to 1, because this piece of code was dead, so the bug was never found.
Originally I wanted to test when next is ```LP_EOF```, set p to ```NULL```, it will cause changes of ```t_stream```, so i give up and then forgot to restore ```count++```. 
I will move ```count++``` to last."
629398456,8887,oranagra,2021-05-10T14:17:11Z,"i think that when i wrote that comment i wanted to let the fuzzer (and existing consistent tests in corrupt-dump.tcl) to be able to run commands on a database full with ziplists. so that if we have some issue in for instance HRANDMEMBER that works on a corrupt ziplist, it'll still be able to find it.

but now that i think of it, these issues can still be uncovered when the deep mode is disabled, in which case we won't run the listpack conversion, so the tests can still get to test ziplists."
629420884,8887,sundb,2021-05-10T14:43:37Z,"Using ```--run-on-startup``` causes test fail when require auth, so I changed ```set-default-packed-encoding``` to config, do you think this is appropriate?
Or should I only run ```--run-on-startup``` if not need to require auth?"
629443633,8887,oranagra,2021-05-10T15:10:05Z,"i suppose we can make that `--run-on-startup` a best effort thing. if we get AUTH error, we ignore it.
for our use case, we add it so that we can run the entire test suite with some modification (on encoding), so it's not that bad if some test (specifically ones that test ACL) will not use it (won't affect our data type / encoding tests).

Another benefit of the `--run-on-startup`, is that it can be used together with `--host` on a preexisting server (where we don't control the config).

bottom line, i think i still prefer it because:
1. we don't promote something we wanted as a debug command into a config.
2. we create a generic mechanism that can be used for other things.

the downside is that this way we don't control creation of keys when loading rdb / aof file.
but the upside is that it is clear this isn't a feature of redis (it's a debug command, rather than an undocumented config), we won't have any concerns about breaking backwards compatibility if we ever delete it."
630257363,8887,sundb,2021-05-11T15:00:54Z,"I have added ```--run-on-startup```, and added a task in ci for testing."
630260749,8887,sundb,2021-05-11T15:04:44Z,"I tried adding ``config get default-packed-encoding``, but found that this change would cause the introspection test to fail, it would first ``config get *``, then ``config set``, but ``default-packed-encoding`` would not have  ``` config set ``` .
So I'm asserting_packed_encoding to determine if it's listpack or ziplist."
631069999,8887,oranagra,2021-05-12T14:01:23Z,any reason you didn't use an createEnumConfig?
631077216,8887,oranagra,2021-05-12T14:09:41Z,"interesting.. i thought it's gonna be a list of redis commands (without the `r`) to run on startup, not a list of scripts.. but i guess your approach is more flexible."
631079710,8887,oranagra,2021-05-12T14:12:24Z,"i think we need to try to ""compact"" it when the loop is over.
i.e. a realloc that may end up being a NOP (considering it is likely to fall into the same allocator bin)"
631122798,8887,oranagra,2021-05-12T15:00:11Z,"considering your optimized lpFind, i think it would be nice to add a benchmark that searches for something numeric too.
"
631128539,8887,oranagra,2021-05-12T15:06:43Z,"please make sure these new tests don't take too long (they're running in the Daily CI, with valgrind too)"
631136272,8887,oranagra,2021-05-12T15:15:30Z,"it would be a good idea to run the corrupt-dump-fuzzer with `--accurate` (or even edit the test and change the limits to run for a several hours).
and then repeat that with valgrind.
maybe we can do that later, after converting more data types to listpack."
631142725,8887,sundb,2021-05-12T15:22:46Z,"I missread it, on my phone. 
I will do it.
"
631144856,8887,sundb,2021-05-12T15:25:14Z,Indeed，I missing it.
631147224,8887,sundb,2021-05-12T15:28:03Z,"stress will be a little slower, but stress is not very necessary to leave, I just carry from ziplist.
I will run valgrind to check tomorrow."
631148404,8887,sundb,2021-05-12T15:29:23Z,I wull do it tomorrow.
631153486,8887,sundb,2021-05-12T15:34:42Z,"I seem to remember saying that this config should be hidden and should not be used normally, and that it was only for testing ziplist, but I can't find that reply, strange."
631170298,8887,oranagra,2021-05-12T15:52:44Z,"i think you misunderstood me.
i meant that it should be undocumented (like the `key-load-delay`).
anyway, water under the bridge.. we took the DEBUG command approach."
631688122,8887,sundb,2021-05-13T09:35:32Z,"```compact``` felling is not necessary.
The memory is already shrunk in ```lpInsert```, and since we allocate a sufficient amount of memory at the beginning, ```realloc``` does not change the listpack memory address until the realloced memory is larger than ziplsit size."
631698388,8887,oranagra,2021-05-13T09:55:50Z,"i'm not sure i follow you.
if lpInsert would compact, then making an initial big allocation is not helpful, since the first insertion will shrink it back. and if it doesn't then in case the original allocation was too big, we're left with that excess at the end of filling."
631702296,8887,sundb,2021-05-13T10:03:13Z,"Yes, the first insertion will shrink it back, when the next insert, there is still a large chunk of memory behind this chunk of memory that is not used, so when it is inserted again, only the memory size of the ```listpack``` is changed, and no memory copy is made, which is a performance improvement."
631703242,8887,sundb,2021-05-13T10:05:04Z,"I'll write a test on this code(to see if the memory address changes), to see if it works in both malloc and jemalloc."
631719187,8887,huangzhw,2021-05-13T10:36:37Z,"Maybe write some underlying code not using `malloc` will be quicker.
But the code will be ugly"
632197317,8887,sundb,2021-05-14T01:06:22Z,"```
    for (int i = 0; i < 10000000; i++) {
            lp = lpNew(100);
            new_lp = lpPushHead(lp, (unsigned char*)""abcdef"", 6);
            new_lp = lpPushHead(lp, (unsigned char*)""abcdef"", 6);
            new_lp = lpPushHead(lp, (unsigned char*)""abcdef"", 6);
            new_lp = lpPushHead(lp, (unsigned char*)""abcdef"", 6);
            new_lp = lpPushHead(lp, (unsigned char*)""abcdef"", 6);
            new_lp = lpPushHead(lp, (unsigned char*)""abcdef"", 6);
            new_lp = lpPushHead(lp, (unsigned char*)""abcdef"", 6);
            assert(lp == new_lp);
    }
```

@oranagra The above test is fine, the pre-allocated space, shrink and then expand, the address will not change.
#6281 This modification will also have the same problem, lpAppendInteger will also shrink.
I don't think it makes sense to shrink in lpInsert, if ```listpack``` is not pre-allocated, shrink is nop, if memory is pre-allocated, user should execute lpShrinkToFit manually.
@huangzhw Now that memory realloc no longer causes performance problems, removing the ```lpInsert``` shrink code will improve performance by 2 seconds (1,000,000 keys), mainly because this code is ambiguous."
632227515,8887,sundb,2021-05-14T02:10:21Z,"I changed it to ```createEnumConfig```, because it can use config get to verify that the encoding is correct."
632542825,8887,sundb,2021-05-14T13:52:01Z,Stress test is fast under valgrind.
635873045,8887,oranagra,2021-05-20T08:09:50Z,"@sundb one of us is missing something.
In #6281 there's a change in `lpInsert` to call realloc only if we need to increase the allocation size (see the call to lp_malloc_size), but not when it wants to shrink it.
In the test you conducted above, it looks like you're adding about 60 bytes, on a pre-allocation of 100, so i think the realloc will be skipped. either that, or maybe you're not using jemalloc (libc malloc can return the same pointer even if it changes the allocation size).

in that case, if we made an allocation of 100 bytes, and used only 60, we do need a realloc to shrink it (which in jemalloc will certainly allocate a new address and do a memcpy).

If i'm missing something, and lpInsert does call realloc to shrink, then (at least with jemalloc) it'll allocate a new block and move the memory to a different pointer, eliminating the optimization of pre-allocation."
635903761,8887,sundb,2021-05-20T08:50:53Z,"Sorry for my lack of seriousness.
The listpack shrinks only when elements are removed from the listpack, or when the length becomes smaller after replacing the element."
635912338,8887,oranagra,2021-05-20T09:01:50Z,"ok. so in this code (converting from ziplist to listpack) we only add new elements, so we never shrink, right?
in that case we do need to call `lpShrinkToFit` at the end."
635915422,8887,sundb,2021-05-20T09:05:51Z,Yes.
635950385,8887,oranagra,2021-05-20T09:52:14Z,"side note: now we can just use `--config` instead of `--run-on-startup`.
i do like to keep that feature in the test suite though. so maybe it's not a bad idea to keep using it here."
655710988,8887,madolson,2021-06-21T21:18:20Z,Should we rename this to packedEntry?
655823605,8887,sundb,2021-06-22T02:08:25Z,"Yes. It will eventually be modified to ```packedEntry```.
Since it causes a lot of diffs, I'll leave it alone for now."
657911236,8887,oranagra,2021-06-24T12:43:26Z,"don't you need to handle OBJ_ENCODING_LISTPACK here too?
seems like a merge conflict that wasn't resolved properly..."
658396394,8887,sundb,2021-06-25T01:20:01Z,"Ohh, my mistake."
667430244,8887,oranagra,2021-07-11T06:29:30Z,"the function's top comment is outdated (stating 0 is returned on wrong encoding).
i don't recall the history of this function, is it just an optimized combination of `lpCurrentEncodedSizeUnsafe + lpEncodeBacklen`?

anyway, IMHO if we keep the assertion, there's no need to mention bad encoding in the top comment."
667430617,8887,oranagra,2021-07-11T06:33:05Z,"maybe we wanna stick to the listpack terminology, i.e. `append`, and maybe `prepend` instead of PushHead and PushTail?"
667440397,8887,oranagra,2021-07-11T07:59:10Z,"maybe this can be an if-else, to avoid the chance of double conversion?
it means maintaining another block of conversion code, but it's just a short loop, right, not many lines..."
667598650,8887,sundb,2021-07-12T03:18:24Z,"Yes, it's just an optimized combination of ```lpCurrentEncodedSizeUnsafe + lpEncodeBacklen```.
It can bring very significant performance gains."
668361763,8887,sundb,2021-07-13T01:28:57Z,Done it.
668362159,8887,sundb,2021-07-13T01:30:00Z,"Done it. But I always feel that the ```prepend``` interface is not quite clear, I don't know if it's because I think it's not easy to type out."
668408089,8887,sundb,2021-07-13T03:56:50Z,"I removed this method, and after testing it, I found that the improvement it brings is only due to the reduction of function call overhead, which is not needed since ```inline``` is already added."
673793558,8887,oranagra,2021-07-21T09:01:38Z,"i understand you followed that advise recently?
i.e. change `min_duration` or `min_cycles` to very long, and run with a long `--timeout` for several hours?"
673817534,8887,oranagra,2021-07-21T09:34:49Z,"shouldn't this be: ?
```c
        if (size) *size = 1 + *count + lpEncodeBacklen(NULL, *count + 1);
```
or alternatively if we know that encoding 6bit +2 is certainly just one byte, can we make such assumptions on 12 and 32bit strings?

additionally isn't the current code vulnerable to abuse (someone storing a small string (e.g. length of one char) in a large encoding type (e.g. a 32BIT_STR)?"
673824819,8887,oranagra,2021-07-21T09:45:02Z,"we need to document the meaning of `size`.
i.e. since there are so many different meanings for it, like the size of the entry data and size of the encoded len, or the total including backlen.. etc.
the value here is similar to what's currently returned from `lpCurrentEncodedSizeUnsafe` plus the backlen, right?
so it includes ""the encoding byte, length bytes, the element data itself, and the backlen"""
673835457,8887,sundb,2021-07-21T10:00:09Z,"This reply was collapsed, so no wonder I couldn't see it.
I did that, and ran it for two days and found a problem(https://github.com/redis/redis/pull/8887/commits/64c497a8e060d588aa10410b60a8f39d756140ff), but now it's reverted, because of a change of https://github.com/redis/redis/pull/8887/commits/598aea895cbcc9d307db7f835dd009cae8e45130.
I'll run it again."
673887637,8887,oranagra,2021-07-21T11:24:27Z,"ziplistRandomPair does have a detailed top comment, please copy that too (and adjust).
same goes for lpRandomPairs, and lpRandomPairsUnique"
673909264,8887,oranagra,2021-07-21T12:00:36Z,"i hate loosing too many lines on nonsense, harder to focus on the important parts..
one option is to do something like this:
```suggestion
        if ((key = lpGet(p, &ele_len, NULL))) klen = ele_len; else klval = ele_len;
```
another, maybe better option is to modify `lpSaveValue`, it was created as a helper for exactly one use case, so we can change it to take two inputs rather than 3, and have that if-else inside.

whatever we choose, need to repeat that on the value block below, and also on the two blocks in the next function."
673909606,8887,oranagra,2021-07-21T12:01:12Z,"```suggestion
        assert((p = lpNext(lp, p)));
```
if we take it, we can do the same on the two assertions in the next function too"
673948779,8887,oranagra,2021-07-21T12:59:17Z,"since we now do an O(n) iteration anyway, maybe we wanna validate integrity in deep mode unconditionally (like we do for zipmaps).
but maybe unlike zipmap (which we don't really expect to see), in this case we wanna make the code more efficient by doing the integrity check as part of the conversion and not in two separate loops?
@yossigo WDYT?"
674517314,8887,oranagra,2021-07-22T05:54:17Z,"same pattern as the one i've commented in the random generators in listpack.c, right?
maybe we need a macro or an lpGet wrapper for that if it's very common.
maybe not... but at least i would vote for changing this into one, two or three lines instead of 6.
maybe it's just my twisted brain though.."
674518254,8887,oranagra,2021-07-22T05:56:35Z,another one of these.. although that one doesn't feel so bad (not a crowded function)
674519444,8887,oranagra,2021-07-22T05:59:52Z,why `32` and not `LONG_STR_SIZE`?
674522368,8887,sundb,2021-07-22T06:07:52Z,"@oranagra It's been running for 20 hours, no problems were found."
674522432,8887,oranagra,2021-07-22T06:07:56Z,"there is some silly overhead here converting a long to string (due to the interface of `lpAppend`), so that most likely `lpAppend` will convert it back to a long.
maybe we should consider improving that, not necessarily now.."
674525792,8887,oranagra,2021-07-22T06:16:30Z,"the code (comment) was changed (fixed) after you copied it.
see bf92000e2dc33d484c73eaaa0af5cc47acf81b82
maybe you should check for other recent changes especially in ziplist.c and t_hash.c
```suggestion
    /* Even records are field names, add to dict and check that's not a dup */
```

"
674531818,8887,oranagra,2021-07-22T06:30:30Z,"few issues here:
first, the obvious one is that we ignore the error returned from `catch` and the test doesn't really cares if the RESTORE failed or succeeded.
this would have been ok, if we had an assertion after it that makes sure the server died on assertion.
i.e.
```
        assert_equal [count_log_message 0 ""crashed by signal""] 0
        assert_equal [count_log_message 0 ""ASSERTION FAILED""] 1
```
but instead we have some (outdated?) verification that makes sure there was no ziplist assertion.

secondly, as i suggested in my review of rdb.c, maybe we wanna make the deep validation of ziplists unconditional, since we're anyway doing an O(n) iteration on the members, so O(2n) is not that bad.
if we do that, we would be expecting a `assert_match ""*Bad data format*"" $err` response from RESTORE."
674533222,8887,oranagra,2021-07-22T06:33:32Z,"let's keep the convention of a 1/1 test/server ratio in this file.
i.e. each test comes with it's own server, and each server with it's own test.
i did this since we're tasting assertions and crashes..

p.s. again here, with deep sanitization, we don't expect a RESTORE command to crash, we'd expect it to fail gracefully."
674535319,8887,oranagra,2021-07-22T06:38:08Z,is that a listpack that you generated manually with dup records?
674551034,8887,sundb,2021-07-22T07:12:05Z,"I use `corrupt payload: valid zipped hash header, dup records` test data to create the listpack."
674634753,8887,sundb,2021-07-22T09:21:50Z,"I should indeed use LONG_STR_SIZE, it looks like I copied it from quicklist."
674639247,8887,sundb,2021-07-22T09:28:24Z,"This problem is also present in t_stream(`lpAppendInteger`), which I will optimize after this pr."
674640688,8887,sundb,2021-07-22T09:30:29Z,"This is a great idea, I already felt bad when I changed this."
674642039,8887,sundb,2021-07-22T09:32:30Z,Good.
674670845,8887,sundb,2021-07-22T10:16:57Z,"1) It should be `if (size) *size = 1 + *count + lpEncodeBacklen(NULL, *count + 1);`, It brings no significant improvement.
2) The `backlen` of 12bit and 32bit string are dynamic lengths, so we can't assume their entry length.
3) There is no way for listpack to store a small string in a large encoding type, even if `replace` operation, it will become `6BIT_STR` when replacing `32BIT_STRING` to a small string.
"
675376192,8887,sundb,2021-07-23T08:01:09Z,"@oranagra Sorry for my mistake, I found the issue from corrupt-dump-fuzzer in the process of making changes.
I don't know why it didn't come out the last time I ran it, silly me.
I will carry out one more."
677168615,8887,oranagra,2021-07-27T06:53:46Z,"i meant for a case that someone produces a specially crafted RESTORE payload, then stores a small item in a large encoding type.
then maybe there's a mismatch between the encoded len and the actual prevlen bytes.
i.e. the listpack can still be iterated correctly from head to tail and tail to head, and the integrity validation passes.
but some piece of code that assumes it knows the prevlen bytes fails...
but i guess even for forward iteration, must know the size of the prevlen bytes.. that's part of the design of the listpack..."
677172042,8887,oranagra,2021-07-27T06:59:37Z,"why did you add the integrity assertion here?
the idea was that all these functions assume the input they get is already validated, and they just validate their output (e.g. in the context of lpNext).
i think i documented it somewhere.

since lpFirst doesn't really do any iteration or decoding, (and the header is validated even in the shallow integrity scan), i don't think we need that assertion."
677172792,8887,oranagra,2021-07-27T07:00:48Z,"```suggestion
 * When the function returns NULL, it populates the integer value by reference in 'lval'.
```"
677175138,8887,oranagra,2021-07-27T07:04:55Z,"1. why have this and not use the `ASSERT_INTEGRITY` macro? the macro is in theory better since it is sure to get inlined (the `inline` is just a recommendation that the compiler can ignore).
2. why use `lpValidateNext` (also moves to the next element, i.e. returns a new `p` which we don't use)"
677176363,8887,oranagra,2021-07-27T07:06:57Z,"these can also be replaced with the new lpGetValue, as well as the ones in lpRandomPairsUnique.
or "
677181591,8887,oranagra,2021-07-27T07:15:29Z,"If the main purpose of this call now is the conversion, let's rename it.
maybe `hashZiplistConvertAndValidate` or `hashZiplistConvertToListpack` and place a comment that:
1. it's safe to call on non-validated ziplists.
2. it returns false when encounter an integrity validation issue.

also, we now lost the ability to convert directly from ziplist to dict, maybe that's not that bad, it shouldn't normally happen."
677194790,8887,oranagra,2021-07-27T07:35:08Z,"for values (when `data->count` is even), it is wasteful to create the sds (at least in the case of strings).
i.e. these sds strings are only needed for the dup search dict on field names.

we can either make some attempt to do this sds creation only for numeric values, and avoid it for string values, or better yet, create an lpAppend variant that takes a long long, and avoid creating sds strings for the values altogether.
i know we discussed this in the past in the context of numerics. but here we also do excessive work on strings."
677196233,8887,oranagra,2021-07-27T07:37:10Z,"i see you did update the comment, but we also need to update the function name, and mention what it expects of the `lp` argument.

i think i would call it `hashZiplistConvertAndValidateIntegrity`"
677199794,8887,oranagra,2021-07-27T07:42:13Z,the comment above the test became outdated.
677206850,8887,sundb,2021-07-27T07:51:57Z,"`ASSERT_INTEGRITY` does not apply, because when entry_size exceeds, `ASSERT_INTEGRITY` does not trigger the assertion, see my new `corrupt payload: fuzzer findings - hash listpack too long entry len` test , which passes the verification in the old code."
677209269,8887,sundb,2021-07-27T07:55:21Z,"I recall why I added this in the first place, because I found it when I was running `fuzzer`, and I can't believe I didn't add it to the test."
677261981,8887,oranagra,2021-07-27T09:04:41Z,"you mean that it's because it doesn't validate the prevlen part?
out of the 3 places that use it, that's probably only relevant for `lpPrev`, and even there, arguably it is done too late.
if that's the case, i'd suggest to revert the other places and improve `lpPrev` to assert on the result of lpDecodeBacklen or the range it leads to.
but maybe the existing call to `ASSERT_INTEGRITY` after adjusting `p` already covers that.

maybe i'm missing something, or maybe i just need to run that new test you added and debug it.. let me know."
677268153,8887,sundb,2021-07-27T09:12:51Z,"The stack of `corrupt payload: fuzzer findings - hash listpack too long entry len`.

```
3083373:M 27 Jul 2021 02:07:55.101 # Redis 255.255.255 crashed by signal: 11, si_code: 1
3083373:M 27 Jul 2021 02:07:55.101 # Accessing address: 0xfdfe45ec
3083373:M 27 Jul 2021 02:07:55.101 # Crashed running the instruction at: 0xf7de6509

src/redis-server 127.0.0.1:21159(_addReplyProtoToList+0xd3)[0x5663c8a3]
src/redis-server 127.0.0.1:21159(+0x538ff)[0x5663c8ff]
src/redis-server 127.0.0.1:21159(addReplyBulkCBuffer+0x39)[0x5663e709]
src/redis-server 127.0.0.1:21159(+0x8885c)[0x5667185c]
src/redis-server 127.0.0.1:21159(genericHgetallCommand+0x11b)[0x5667335b]
src/redis-server 127.0.0.1:21159(hvalsCommand+0x12)[0x56673412]
```

Because this command copies data while iterating, if the entry_size is very large, `lpGet` will return an illegal address."
677271815,8887,sundb,2021-07-27T09:17:52Z,"I use `lpValidateNext` simply because it verifies that the entry_size is not out of bounds.
But I don't want it to move to the next entry."
677321973,8887,oranagra,2021-07-27T10:28:49Z,"so the violation in this case was because of lpGet (after lpNext)?
maybe we need to add a call to ASSERT_INTEGRITY_LEN in lpGet?

> I use lpValidateNext simply because it verifies that the entry_size is not out of bounds.

maybe add a comment explaining it."
677325862,8887,sundb,2021-07-27T10:34:42Z,">  so the violation in this case was because of lpGet (after lpNext)?

Yes.

> maybe we need to add a call to ASSERT_INTEGRITY_LEN in lpGet?

I thought about it, but `lpGet` doesn't have `lp` variable, so `ASSERT_INTEGRITY_LEN` can't be used in `lpGet`."
677340209,8887,oranagra,2021-07-27T10:57:23Z,"actually, i wanna go back on that.. the contract i was trying to make is that when some function returns a `p`, it should validate that `p`, and when a function takes a `p` as input, it can assume it is safe to use."
677350484,8887,sundb,2021-07-27T11:13:56Z,That's it!
678283954,8887,sundb,2021-07-28T13:09:01Z,fixed.
678284068,8887,sundb,2021-07-28T13:09:09Z,Fixed.
678286046,8887,sundb,2021-07-28T13:11:47Z,I've added support for inserting integer directly into listpack.
678286114,8887,sundb,2021-07-28T13:11:54Z,Fixed
678286219,8887,sundb,2021-07-28T13:12:00Z,Fixed
680807576,8887,oranagra,2021-08-02T09:14:40Z,"we assert that there's no ""integrity check failed""?
let's assert on what we do have ""dup records"" print?
i see you have a few other `verify_log_message 0 ""*integrity check failed*"" 0` checks.
i think they should all be replaced with what you're expecting to find, rather than what you're not expecting to find.

p.s. the only exception for that are when we wanna make sure we didn't crash by signal (i.e. matching `crashed by signal` to 0), and if we wanna make sure we didn't crash at all (for that we usually just do `r ping`, with a comment)"
680812868,8887,oranagra,2021-08-02T09:22:15Z,"This function now needs to be renamed too (and comment updated).
it's not only a validation helper function, but also a conversion helper function."
680819636,8887,oranagra,2021-08-02T09:31:53Z,"i think maybe we can do without the `enctype` argument
```suggestion
 * If both 'elestr' and `eleint` are NULL and the function removes the element pointed by 'p'
 *                   instead of inserting one.
 * If `eleint` is non-NULL, the function insert or replace with a 64 bit integer,
 *                   which is stored in the 'eleint' buffer.
 * If 'elestr` is non-NULL, the function insert or replace with a string,
 *                   which is stored in the 'elestr' buffer.
 * 
```

internally the function can maybe still use enctype like it used to use.. just the interface may be a bit cleaner>

WDYT?

p.s. we're also missing some documentation of `enclen`, right?

obviously if we take that, we need to update the other references to `ele` in the code and comments."
680825532,8887,oranagra,2021-08-02T09:40:17Z,"maybe mention that it can used to replace and delete too, and refer to lpInsert for details."
680827063,8887,oranagra,2021-08-02T09:42:27Z,"shall we also add lpPrependInteger, and lpReplaceInteger right away, or wait for someone that needs it?

actually i see there's already one in t_stream.c, let's delete it from there and both of these additional interfaces here."
680872452,8887,sundb,2021-08-02T10:54:02Z,"ohh, I originally wanted to design it as ```lpInsert(unsigned char *lp, unsigned char *ele, uint32_t size, uint64_t lval, ...)```,
But I found it impossible to tell if it is deletion.
The way you said it is the right way."
681405461,8887,sundb,2021-08-03T03:23:47Z,"I feel like you forgot to `verify_log_message`, it means there's an ""integrity check failed"".
I wll add `r ping`."
681666151,8887,sundb,2021-08-03T11:19:34Z,`lpPrependInteger` and `lpReplaceInteger` have been added.
681666438,8887,sundb,2021-08-03T11:20:02Z,`lpInsertString` has been removed.
681666566,8887,sundb,2021-08-03T11:20:12Z,Fixed.
681666836,8887,sundb,2021-08-03T11:20:39Z,Fixed.
683759014,8887,oranagra,2021-08-05T20:17:34Z,"ohh, my bad. i confused it with `count_log_message`. and thought the last `0` means we're verifying that the message was **not** found in the logs."
683767415,8887,oranagra,2021-08-05T20:32:30Z,"why did you change lpReplace to take a double pointer (`**`) `p`?
I suppose just for symmetry with lpReplaceInteger?
let's at least document what it does with it (copy the text from lpReplaceInteger?)."
683769802,8887,oranagra,2021-08-05T20:36:27Z,"```suggestion
/* callback for hashZiplistConvertAndValidateIntegrity.
 * Check that the ziplist doesn't have duplicate hash field names.
 * The ziplist element pointed by 'p' will be converted and stored into listpack. */
static int _hashZiplistEntryValidateAndConvert(unsigned char *p, void *userdata) {
```"
683886760,8887,sundb,2021-08-06T01:36:22Z,"Yes, just symmetry with `lpReplaceInteger`."
684723837,8887,oranagra,2021-08-08T06:34:21Z,"i see there were some issues with merge conflicts of this file.
i see this test existed twice, once with deep sanitization and once without.
i see that a later commit added back, but only with sanitization.
is that intended?"
684723925,8887,oranagra,2021-08-08T06:35:02Z,"i see this test was deleted in the merge, was this intended?"
684724912,8887,oranagra,2021-08-08T06:44:12Z,"you mean that this was forgotten (or actually a bug introduced) in #9321? (doesn't seem related to #9297)

anyway, since these other PRs may (or may not) be backported to 6.2, maybe we better get that fix to a PR of it's own (so it can easily get backported too)."
684725446,8887,oranagra,2021-08-08T06:48:57Z,"ohh, on a second look, this line wasn't introduced by 9321, it always existed, but indeed it prevents 9297 from doing it's job.
i guess it also indicates that 9297 was missing some test to cover that case...
how did you discover it now?

in any way, i still prefer to take this to an independent PR.
if you're aware of other unrelated fixes in this PR that should be taken to another PR please let me know.
(only important for fixes that actually have an impact, not ones in dead code)."
684869635,8887,sundb,2021-08-09T02:11:09Z,"@oranagra  I deliberately removed `hash listpack too long entry len` and `hash listpack first element too long entry len - without sanitize`, because these two tests were fixed in #9321, and this code only fixed `hash listpack first element too long entry len - without sanitize`, so I just kept it and rename it."
684870119,8887,sundb,2021-08-09T02:13:52Z,"Yes, due to a mistake on my part, they were to be processed in #9297.
I'll handle them in new pr."
1030154017,8887,enjoy-binbin,2022-11-23T08:38:30Z,"i see in here, we didn't check `deep_integrity_validation`
and `hashZiplistConvertAndValidateIntegrity` now rename to `ziplistPairsConvertAndValidateIntegrity`
it always pass `deep = 1` to `ziplistValidateIntegrity`

Is this intentional or is it an overlook?
we should check `deep_integrity_validation` or need a `stat_dump_payload_sanitizations++`?

"
1030164692,8887,sundb,2022-11-23T08:49:46Z,"Yes, because ziplist is converted to listpack, so we have to do a deep sanitization, otherwise it will be wrong in subsequent operations as well."
1030246185,8887,oranagra,2022-11-23T10:08:12Z,"it's a decision we previously took. if anyway we're gonna do O(N) operation on conversion, we might as well do O(2N), and avoid complicated code."
977457959,11303,zuiderkwast,2022-09-22T10:03:43Z,"I don't think this `if` encoding check is needed. The body of the `if` here just uses generic listTypeIterator functions and doesn't depend on encoding.
"
977469122,11303,zuiderkwast,2022-09-22T10:16:06Z,I suggest adding a comment about what it returns and how.
977551408,11303,zuiderkwast,2022-09-22T11:42:41Z,"> Check the length and size of a number of objects to see if we need to convert a listpack to a quicklist

Are these objects that are assumed to be added to the list later, to check if we need to convert before we add them? I think this could be clarified. At first, I thought this function checks some elements inside the list itself."
977553586,11303,zuiderkwast,2022-09-22T11:45:21Z,"```suggestion
    /* A quicklist can be converted to listpack only if it
```"
977563700,11303,zuiderkwast,2022-09-22T11:57:01Z,"Even simpler?

```suggestion
        p = (where == LIST_HEAD) ? lpFirst(subject->ptr) : lpLast(subject->ptr);
```"
977583740,11303,zuiderkwast,2022-09-22T12:18:01Z,"A `void` function doesn't really return anything. :smile:

I suggest wording like ""Populates vstr"" or ""Points vstr to ..."".

It doesn't hurt also explaining what it means that `*vstr == NULL`, etc."
977586275,11303,zuiderkwast,2022-09-22T12:20:48Z,A short comment explaining this function wouldn't hurt.
977606528,11303,zuiderkwast,2022-09-22T12:41:34Z,This `if` is unnecessary. The body of this uses generic listType functions that don't depend on encoding.
977608533,11303,zuiderkwast,2022-09-22T12:43:35Z,"```suggestion
        # of 0.5 (QUICKLIST_CONVERT_THRESHOLD), it will be converted to listpack.
```"
977610527,11303,zuiderkwast,2022-09-22T12:45:35Z,"```suggestion
        10000 lpush quicklist ""Big quicklist""
```

Some distinction between the different cases can be good. The title appears in the name of test cases which is printed out when running the tests."
977614810,11303,zuiderkwast,2022-09-22T12:49:42Z,Indentation?
977616924,11303,zuiderkwast,2022-09-22T12:51:48Z,"If indentation isn't really correct, it can be good to add a comment about what each brace is matching.

    } ; # foreach type"
978743994,11303,sundb,2022-09-23T14:35:56Z,Done
978744161,11303,sundb,2022-09-23T14:36:07Z,Done
978746623,11303,sundb,2022-09-23T14:38:34Z,"I was going to change it to`p = lpSeek(subject->ptr,(where == LIST_HEAD) ? 0 : -1);`, and finally found that you are right, it will be more efficient."
978747457,11303,sundb,2022-09-23T14:39:22Z,"Great, I perfer it too."
978748270,11303,sundb,2022-09-23T14:40:15Z,"My bad, `listTypeCurrentObject` is dup with `listTypeGetValue`, i removed it."
978748414,11303,sundb,2022-09-23T14:40:22Z,Done
978748531,11303,sundb,2022-09-23T14:40:29Z,Done
978748631,11303,sundb,2022-09-23T14:40:35Z,Done
978749752,11303,sundb,2022-09-23T14:41:44Z,"I did it on purpose, I didn't want the indentation to cause more changes."
978749839,11303,sundb,2022-09-23T14:41:49Z,Done
978762546,11303,sundb,2022-09-23T14:53:20Z,"Please see again, no sure it's enough."
978762662,11303,sundb,2022-09-23T14:53:26Z,Done
978762986,11303,zuiderkwast,2022-09-23T14:53:47Z,Also mention what it means if the function returns NULL?
978784468,11303,sundb,2022-09-23T15:08:21Z,Done
978898468,11303,zuiderkwast,2022-09-23T17:21:42Z,It is also easier to read. 8-)
978945464,11303,zuiderkwast,2022-09-23T18:03:01Z,Perfect.
978946182,11303,zuiderkwast,2022-09-23T18:04:07Z,OK
990977601,11303,zuiderkwast,2022-10-10T07:27:49Z,"So far, the module implementation only used the high level abstraction of the list type. I think the abstraction is better if it doesn't need to know about the internals, such as encodings.

Is it possible to let listTypeInsert handle conversion from listpack to quicklist?"
990978408,11303,zuiderkwast,2022-10-10T07:29:02Z,"Is it possible to let listTypeDelete handle the conversion from quicklist to listpack?

It can be a better abstraction."
990985282,11303,sundb,2022-10-10T07:37:31Z,"It's dangerous to convert list in iterator.
Both `listTypeInsert` and `listTypeDelete` have `listTypeEntry` param which is obtained from iteraor.
for example
```c
    iter = listTypeInitIterator(subject,0,LIST_TAIL);
    while (listTypeNext(iter,&entry)) {
        if (listTypeEqual(&entry,c->argv[3])) {
            listTypeInsert(&entry,c->argv[4],where);  <- if we convert list here, will cause
                                                       iter to point to an invalid address,
                                                       It will end up operating incorrectly 
                                                       in the listTypeReleaseIterator
            inserted = 1;
            break;
        }
    }
    listTypeReleaseIterator(iter);
```"
990998252,11303,zuiderkwast,2022-10-10T07:50:40Z,"Ah, it's dangerous....

What if we just name the functions so it doesn't expose the internals such as encoding, but rather the purpose from the caller's perspecive? For example, instead of `listTypeTryConvertListpack` it can be called `listTypeMakeSpaceForValues` or something like that?

Similarily, converting from quicklist to listpack can be called something like `listTypeShrink`. WDYT?"
991107148,11303,sundb,2022-10-10T09:51:38Z,"@zuiderkwast Good idea.
I prefer `listTypeTryConversion` and `listTypeTryConverionForValues` more, which more clearly indicate that the encoding will be converted."
991166826,11303,zuiderkwast,2022-10-10T11:07:16Z,Sounds good (although I think indicating that the encoding will be converted can be something internal to the list type that the caller doesn't need to know). 
992059822,11303,oranagra,2022-10-11T09:12:16Z,"moduleCreateEmptyKey calls createQuicklistObject, so listTypeTryConvertListpack will always NOP.

i guess you meant to modify moduleCreateEmptyKey to create a listpack (makes sense since it's empty), and then this conversion (using the size of `ele` makes sense).

maybe we can be more efficient and make a decision beforehand (pass a hint to the creation function), not sure it worth the complexity here though... (considering the conversion is inexpensive anyway)"
992098885,11303,oranagra,2022-10-11T09:48:58Z,"it's a little bit odd to see this in quicklist.c and not t_list.c, but maybe we don't have a choice if we wanna keep using the existing (odd) `list-max-listpack-size`.

an alternative would have been to re-introduce `list-max-ziplist-entries` (i think a count based limit is enough, and there's no reason for a size based limit too. specifically since there's no real conversion work between the two encodings).

i suppose what's implemented is the right thing to do, just wanted to raise a discussion to be sure."
992126986,11303,oranagra,2022-10-11T10:11:59Z,"if we do this, we need to also bump `RDB_VERSION`, but i think we better just fake a one node quicklist.
p.s. if we do that, don't forget to revert the change below, and the one in redis-rdb-check"
992130326,11303,oranagra,2022-10-11T10:15:42Z,"we actually know how many listpack nodes we have, so we can avoid this conversion.
but it'll cause complications with plain nodes, and considering the conversion is very cheap, i guess we shouldn't bother.

remind me when do we re-compress the quicklist nodes after loading?"
992141142,11303,oranagra,2022-10-11T10:27:17Z,"```suggestion
        /* We can't predict the size and encoding of the stored list, we
         * assume it's a large list and then convert it at the end if needed. */
```"
992161180,11303,oranagra,2022-10-11T10:49:30Z,i'd rather avoid the floating-point conversion and comparison and just use `/2` below (next to the comment that explains why it's needed).
992206744,11303,sundb,2022-10-11T11:38:09Z,"In the end I chose `listTypeTryConversion` and `listTypeTryConverionForValues`, at least they are more consistent with other conversion function like `zset` or `hash`."
992211064,11303,oranagra,2022-10-11T11:42:02Z,"how about `lpEntry` (and `lpIter` for the one in listTypeIterator)?

p.s. in theory these could have been unions, but i suppose we are trying to avoid a rename that's gonna cause many changes."
992212652,11303,oranagra,2022-10-11T11:43:51Z,i'm puzzled as to why quicklistSetDirection doesn't need to do that lpNext / lpPrev trick internally (on iter->entry)?
992215668,11303,oranagra,2022-10-11T11:47:05Z,"btw. we can reduce the LOC changes in many cases by adding the LISTPACK case as an `else if` after the QUICKLIST `if` and before the panic's `else`.
if you do that, please handle it in a separate commit so we don't need to review all these moved code blocks.

maybe it's confusing if some if-else chains are ordered in one way and others in the other way, so maybe skip that unless we can convert them all.
obviously there are places where we do something with listpack and then we have an early exit return, that seems ok IMHO."
992243736,11303,oranagra,2022-10-11T12:10:48Z,is that reachable? let's make sure all flows in this function have test coverage.
992274467,11303,oranagra,2022-10-11T12:40:42Z,"this could be an override, replacing a big item with a small one and vice versa.
maybe we can somehow take this into account for the conversion..

or maybe call it again at the end (like in LREM)"
992343409,11303,zuiderkwast,2022-10-11T13:41:22Z,"@oranagra if the sister PR #11290 is merged and released at the same time, I guess we'll have to bump the RDB_VERSION anyway."
992921246,11303,sundb,2022-10-12T02:22:06Z,"Because the quicklistIterator move does not depend on iter->entry, it depends on offset (the offset of the current entry in the node->lp), so it is enough to change the direction.
As I mentioned in the top comment, the list listpack iterator always points to the next entry, but the list quicklist iterator points to the current entry."
992926287,11303,sundb,2022-10-12T02:34:18Z,"ah, agree with you, but I feel like we have to do it, and it actually has to do with the fact that the list listpack iterator points to the next entry.
When the direction is reversed, and the last node is deleted, after call lpDelete(...,&p), p will be NULL, so we can only use lpLast to get the penultimate node."
992933668,11303,sundb,2022-10-12T02:52:41Z,"Yes, I really don't like this implementation (it pollutes the quicklist).
The reason why I don't introduct `list-max-listpack-entries` is that I'm worried that if the user configures `list-max-listpack-entries` and `list-max-listpack-size` incorrectly, it might cause frequent converting between quicklist and listpack.

Like following example
```sh
CONFIG SET list-max-listpack-entries 1
CONFIG SET list-max-listpack-size 10
LPUSH lst x
1) LPUSH lst y
2) LPOP lst
repeat 1 and 2
```
"
992942205,11303,sundb,2022-10-12T03:00:22Z,"> remind me when do we re-compress the quicklist nodes after loading?
    
the quicklist has been compressed in `quicklistAppendListpack`.
"
993048091,11303,sundb,2022-10-12T06:33:40Z,"Done with [`db8a2e2` (#11303)](https://github.com/redis/redis/pull/11303/commits/db8a2e2976224c54325dc6f840b57535e4203754).
And fix a missing list listpack encoding check."
993067983,11303,oranagra,2022-10-12T07:00:56Z,"i know... planning to review it too soon.
but still i think there's no reason to change the format for lists, and we can easily fake a one node quicklist instead."
993072646,11303,oranagra,2022-10-12T07:07:07Z,"ok (before the call to the conversion function), but that's still ok, since list-compress-depth doesn't allow compressing the edge nodes, and a list with one node will never get compressed."
993104718,11303,sundb,2022-10-12T07:43:50Z,"Yeah, it sounds OK."
998044540,11303,sundb,2022-10-18T10:52:08Z,What about `lpe` and `lpi` that they seem to make the code more clear.
998045109,11303,sundb,2022-10-18T10:52:44Z,"This is my mistake, Fixed."
998052165,11303,sundb,2022-10-18T11:00:14Z,"I removed the code related to QUICKLIST_CONVERT_THRESHOLD, mainly for 2 reasons:
1. because of the threshold, if we save the listpack as a fake quicklist, we will not be able to determine the encoding before it is saved when rdb loading.
This would go against the fact that we should keep a key in the same encoding when reloading.
2. After a simple benchmarking, I found that the conversion overhead between listpack <-> quicklist is negligible."
998076223,11303,oranagra,2022-10-18T11:23:56Z,"@sundb i noticed you removed the define (due to this comment?), but looks like you didn't add `/2`"
998077411,11303,oranagra,2022-10-18T11:25:13Z,"ok. mainly wanted to avoid a one character member (and associate with a ""listpack"")"
998081057,11303,oranagra,2022-10-18T11:29:03Z,"ohh, i see the comment here: https://github.com/redis/redis/pull/11303#discussion_r998052165
i'm slightly concerned, even if the conversion is cheap, i'm afraid of a resonance effect.
i'm not sure the concern about encoding after rdb loading is that important.
let's keep thinking of it."
998131972,11303,zuiderkwast,2022-10-18T12:19:58Z,"I'm concerned too. What about a pipeline like PUSH, POP, PUSH, POP, PUSH, POP, ... where each command causes a conversion, is the overhead negligible even in this case?"
1004596522,11303,sundb,2022-10-25T14:52:45Z,"@zuiderkwast You are right, there is significant performance degradation when testing as you say, so let me revert this commit for now."
1005614081,11303,oranagra,2022-10-26T12:29:49Z,"i agree with the re-introduction of the convert threshold, but i'm not certain we wanna keep the explicit rdb format.
i think we can implicitly save the old format of one node quicklist, and i think that when we load it back, we can recognize that it's just one node, and if it confirms with the other thresholds, load it as a listpack instead of quicklist.

> because of the threshold, if we save the listpack as a fake quicklist, we will not be able to determine the encoding before it is saved when rdb loading.
This would go against the fact that we should keep a key in the same encoding when reloading.

@sundb can you explain this? maybe i'm overlooking something."
1005668974,11303,sundb,2022-10-26T13:20:04Z,"This is because quicklist will only be converted to listpack if there is only one node and size is below the threshold.
If a listpack that size exceeds the threshold, we save it as a fake quicklist, and when reload it, we have no way to know that it's a listpack, we can only treat it as a quicklist that has shrunk to only one node and hasn't reached the threshold."
1005733938,11303,oranagra,2022-10-26T14:07:56Z,"can't we check the size of the listpack on load time, and decide how to handle it?
also, i don't understand the concern of `we should keep a key in the same encoding when reloading`.
our rdb loader changes decides on encoding in load time in many places.
e.g. here (if the config on the instance which saved it is different than the one that loads it)
```c
                if (intsetLen(o->ptr) > server.set_max_intset_entries)
                    setTypeConvert(o,OBJ_ENCODING_HT);
``` "
1005763393,11303,sundb,2022-10-26T14:31:26Z,"> also, i don't understand the concern of `we should keep a key in the same encoding when reloading`. 

just like these tests.
https://github.com/redis/redis/blob/e9d4ed4e0fda81aefa0cebf2559dc233d472c902/tests/unit/type/list.tcl#L1441-L1443
https://github.com/redis/redis/blob/e9d4ed4e0fda81aefa0cebf2559dc233d472c902/tests/unit/type/set.tcl#L99-L114
They both assume that after `debug reload`, the encoding of the keys will always be the same as before.
I'm also not sure if there is such a principle.
Without it, I should go on the way as you said."
1005830390,11303,oranagra,2022-10-26T15:20:48Z,"i don't understand that concern, and i see these assertions are VERY old, i think we can show flexibility here, either of these solutions is arguably ok:
1. change OBJECT ENCODING to always say ""quicklist"", in that case what we say that a single listpack is an optimization of a quicklist (i.e. imagine you would have done your work inside quicklist.c an a special 0 footprint quicklist)
2. change the test to accept both ""quicklist"" and ""listpack""
3. change the test in a way that somehow it doesn't hit this problem (tune something so that size is always either big enough or small enough so that the encoding gets consistent)

from a quick look, i think for both set and list tests you mentioned above, the 3rd option is the right one."
1007679576,11303,sundb,2022-10-28T06:15:25Z,"Choice the third way, please see commit [`7510886` (#11303)](https://github.com/redis/redis/pull/11303/commits/75108861d9755237647bec04a827156changing050d02ba5).
Another minor change to this commit is changing the limit length of listpack, use `list-max-listpack-size` instead of the original `list-max-listpack-size - 1`.
Because since we treat it as a quicklist node, we should allow it to reach the length of list-max-listpack-size."
1008849511,11303,oranagra,2022-10-30T12:54:22Z,"i can't find that commit.
that's 0d5b7ca5b10ab58459ff32615873d46dc32425f3, right?
you didn't change the tests to avoid that case, but instead added an ""intent"" to the convert, so that you only consider converting to quicklist when growing or converting to listpack when shrinking.
i.e. you'll never consider converting to listpack when growing."
1008850642,11303,oranagra,2022-10-30T13:01:50Z,"comment should now say ""from listpack"", not ""to quicklist"", right?
same for the other function below.."
1008851099,11303,oranagra,2022-10-30T13:04:23Z,"let's document that `enc` is the target encoding, and that do do that to avoid resonance.
btw, maybe instead it should be ""growing"" / ""shrinking"" boolean input?
that's how we use it, right?"
1008851482,11303,oranagra,2022-10-30T13:07:21Z,maybe add a comment that the above call to `listTypeTryConversionForValues` handled the other case?
1009080231,11303,sundb,2022-10-31T06:55:31Z,"while writing unit tests, I found that the conversion in the LSET command may not work well.
The main reason is that `quicklistReplaceEntry` does not merge nodes after replacement, which means it does not satisfy the need to convert to a listpack (only one node).
The only case where this works is when the quicklist has only one node and has not yet reached the threshold when the `LSET` command is used to replace it after reaching the threshold.
One alternative would be to merge after the quicklist replacement, but I'm not sure if that would cause a performance decrement."
1009196990,11303,sundb,2022-10-31T09:24:30Z,"At the end i change `listTypeTryConversionForValues` to `listTypeTryConversionForGrowing` and change `listTypeTryConversion` to `listTypeTryConversionForShrinking`.
@zuiderkwast :-) you're right."
1009198264,11303,sundb,2022-10-31T09:25:52Z,Fixed in [`4ac67aa` (#11303)](https://github.com/redis/redis/pull/11303/commits/4ac67aa0866e9ab9a1c4c588f5da9a2e660972c4)
1009202491,11303,zuiderkwast,2022-10-31T09:30:16Z,"This failed with CROSSSLOT error in cluster mode (CI test-external-cluster).

Use a tag to make sure the the source and dest keys belong to the same slot, e.g.

            r LMOVE lsrc{t} ldes{t} right right"
1009205968,11303,sundb,2022-10-31T09:33:15Z,"Sorry for that.
Yes, I think the conversion to listpack when growing is mostly useless unless we dynamically modify `list-max-listpack-size`."
1009253128,11303,sundb,2022-10-31T10:23:34Z,Thx
1009592957,11303,oranagra,2022-10-31T16:02:00Z,"i don't like the fact we have 3 interfaces, and not just 2 (one for either direction), or two (one with the argv argument and one without)..
i also don't like the mention of ""Quicklist"" in the interface (not clear if it's the source or the target).

btw, i'm not sure if my ""shrinking"" / ""growing"" suggestion was what you implemented, i meant to only consider going from LP to QL when adding elements, and only consider going from QL to LP when removing elements. i didn't consider using different thresholds, but maybe i don't understand the problem well enough.

anyway, if we keep the current approach, and assuming i understand it correctly (it took me very long):
i understand we actually have a trinary.
1. when we know we added an item and we only consider going LP->QL. that's listTypeTryConversionForGrowing (this one also has an extra set of arguments so you can call it before the item was added)
2. when we know we removed an item and we only consider going QL->LP. that's listTypeTryConversionForShrinking (internally it calls listTypeTryConvertQuicklist with shrinking=1)
3. when we don't know what happened (e.g. item was replaced) and we wanna let the system decide what to do. in this case we call listTypeTryConvertQuicklist directly with shrinking=1.

as i said, it took me quite a bit to realize that, so i suggest changing it.
one option is to only have one interface, that takes a trinary `tip` (-1, 0, 1), or an enum (growing, shrinking, unknown)
besides that we can have a fork of that api without the argv if we want.
i'd rather not mention ""quicklist"" or ""listpack"" in the interface.

does that sound ok?"
1009615042,11303,oranagra,2022-10-31T16:23:10Z,"let's comment that we created it as a quicklist, so now we attempt to shrink it to listpack if it doesn't have a lot of data.
aren't we suppose to call listTypeTryConvertQuicklist(shrinking=0) here? like we do on rdb.c when we're done blindly populating a quicklist? i.e. created a quicklist without knowing it if'll be required."
1009621999,11303,oranagra,2022-10-31T16:29:55Z,"missing comment.
i.e. this one is about considering conversion from quicklist to listpack.
the opposite of listTypeTryConversionForGrowing."
1009668492,11303,sundb,2022-10-31T17:15:52Z,"> btw, i'm not sure if my ""shrinking"" / ""growing"" suggestion was what you implemented, i meant to only consider going from LP to QL when adding elements, and only consider going from QL to LP when removing elements. i didn't consider using different thresholds, but maybe i don't understand the problem well enough.

I guess that you misunderstand `int threshold = shrinking ? 2 : 1;`, it's not using a different threshold, just to reuse the conversion code so that the threshold can be ignored when RDB loading."
1009673168,11303,sundb,2022-10-31T17:20:53Z,"@oranagra Yes, these interfaces have troubled me for a long time.
If there is only one interface, it may take 7 parameters. I don't like so many parameters.
But first let me try the way you said."
1009674629,11303,sundb,2022-10-31T17:22:27Z,"Yes, it's same as RDB loading."
1010418592,11303,sundb,2022-11-01T13:21:44Z,"@oranagra Only one interface was retained, please see the commit [`6f1b697` (#11303)](https://github.com/redis/redis/pull/11303/commits/6f1b69710b4471f9441ed99f5211f311f0d770b1)"
1010418955,11303,sundb,2022-11-01T13:22:10Z,Also fixed in [`6f1b697` (#11303)](https://github.com/redis/redis/pull/11303/commits/6f1b69710b4471f9441ed99f5211f311f0d770b1)
1010421940,11303,sundb,2022-11-01T13:25:24Z,Already removed.
1011200897,11303,sundb,2022-11-02T05:09:50Z,"I feel that `unknown` doesn't seem relevant, what about `on-demand`?"
1011289382,11303,oranagra,2022-11-02T07:07:05Z,"let's also document the argv thing.
btw, i don't mind adding an alias for this function without these argument, it'll still be clear.
i.e. calling it with data that's going to be appended."
1011290237,11303,oranagra,2022-11-02T07:08:22Z,"it doesn't look like this function needs that `growing` argument, it can just check that argv is non-null"
1011302040,11303,oranagra,2022-11-02T07:24:29Z,"that's not really true (the ""only consider"" part), we do call both conversion functions regardless of this argument.
one uses it just instead of checking argv!=NULL, so it doesn't need that argument at all.
the other uses it to decide on the threshold (to avoid resonance).

i think we should remove the `growing` argument from the first one, and that we should document this enum something like:
* UNKNOWN - used after we built a new list, and we want to let the function decide on the best encoding for that list.
* GROWING - used before or right after adding elements to the list, in which case we are likely to only consider converting from listpack to quicklist.
* SHRINKING - used after removing an element from the list, in which case we wanna consider conversion from quicklist to listpack. When we know we're shrinking, we use a lower (more strict) threshold in order to avoid repeated conversions on every list change.
"
1011330706,11303,zuiderkwast,2022-11-02T07:54:51Z,"On-demand describes *when* something happens (when needed, when required), not how or why.

Maybe `auto`?

Or if it is about growing and shringing, maybe `both`? or a bitwise-or `GROWING | SHRINKING`..."
1011749053,11303,oranagra,2022-11-02T13:16:48Z,"by UNKNOWN, i mean that the caller doesn't know if we're shrinking or growing.
but AUTO is ok with me too (as long as the comment is good enough to mention when to use it and what it does)"
1012842290,11303,sundb,2022-11-03T12:37:15Z,"Done, I add a new interface `listTypeTryConversionWithArgv`, not sure if it's good enought."
1012842371,11303,sundb,2022-11-03T12:37:20Z,Done
1012842690,11303,sundb,2022-11-03T12:37:39Z,Done.
1012843128,11303,sundb,2022-11-03T12:38:05Z,I like `auto` more.
1013098125,11303,oranagra,2022-11-03T15:56:27Z,"```suggestion
         * already handled the growing case in listTypeTryConversionWithArgv()
```"
1013116376,11303,oranagra,2022-11-03T16:09:56Z,please make sure that code is reachable in the test suite and comment / resolve this comment.
1013116685,11303,oranagra,2022-11-03T16:10:12Z,please make sure that code is reachable in the test suite and comment / resolve this comment.
1013124196,11303,oranagra,2022-11-03T16:16:13Z,0 is the limit on the number of elements? should it be 1?
1013139187,11303,oranagra,2022-11-03T16:28:11Z,"if we bothered to add an assert_encoding, let's add it on the copy as well"
1013160497,11303,oranagra,2022-11-03T16:44:41Z,can't we use the `enc` as the expected encoding rather than use check_sort_store_encoding?
1013173173,11303,oranagra,2022-11-03T16:54:48Z,don't we want to do the assert_encoding after the pushes?
1013183991,11303,oranagra,2022-11-03T17:02:36Z,"we use `create_$type` but then assert that it's always a `listpack`?
why is that? because the rpoplpush doesn't move the `$large` item? maybe add another one to the list?"
1013186599,11303,oranagra,2022-11-03T17:04:36Z,"that `largevalue` doesn't seem like it's still suitable.
it was born at a time where lists were either a ziplist or a linked-list, so large items were not packed at all.
but now we always use listpack (or plain nodes but that's another story). 

i suppose we're counting on the fact that even if we pass the size of `list-max-listpack-size`, we'll still create listpack based quicklists (with one entry per listpack.
if we keep this `largevalue` approach, let's add a comment that explains why it still does what we want."
1013766432,11303,sundb,2022-11-04T08:59:46Z,"When `list_max_listpack_size` is 0, list listpack encoding will be disabled (count in quicklistSizeAndCountLimit will be 0), I will add comments in redis.conf"
1013767794,11303,sundb,2022-11-04T09:01:14Z,But `enc `may also be `intset` or `hashtable`.
1013773642,11303,sundb,2022-11-04T09:07:41Z,Maybe we can modify these tests by using the feature of forcing quicklist encoding when `list_max_listpack_size` is 0.
1013775597,11303,sundb,2022-11-04T09:09:59Z,"> please make sure that code is reachable in the test suite and comment / resolve this comment.

I've seen it fully covered in gcov before, but let's add a more precise test to cover it."
1014001743,11303,oranagra,2022-11-04T13:08:23Z,"ok, so `list_max_listpack_size` of `0` means a single element per quicklist node (same as `1`), but also implies it'll always be quicklist?
it seems odd to me (should be an invalid config, but since we didn't block that config in the past, we can't start now.
but i think it's effects should be the same as setting it to 1.

IIUC the difference from the current code is that it'll still use listpack if there's a single element in the list.
any downside in that?"
1014006855,11303,oranagra,2022-11-04T13:13:44Z,"you mean instead of trying to control the encoding by using different item sizes, we'll control the encoding by changing the config.
i think that's cleaner approach (although i'd rather set it to `1`, not `0`).

i can also live with the current approach (of creating items big enough so that all listpacks end up with only one item and then as soon as there are two items in the list, it must be quicklist encoded, but if we keep that approach, i think a big comment is needed to explain that hack.

maybe we can leave this change for last, and first finish with all other comments, then you can try this, and if it ends up too messy, we can easily revert it (and be sure we didn't revert any other cleanup or fix)."
1014010045,11303,oranagra,2022-11-04T13:17:09Z,"ohh sorry, i was out of context."
1014827766,11303,sundb,2022-11-06T13:12:33Z,Done.
1014827944,11303,sundb,2022-11-06T13:13:59Z,"> please make sure that code is reachable in the test suite and comment / resolve this comment.

That code has been converted by `LREM starting from tail with negative count (2)` test."
1014828476,11303,sundb,2022-11-06T13:17:38Z,"~~Please see commit [`6dfb7bf` (#11303)](https://github.com/redis/redis/pull/11303/commits/6dfb7bf9349e9b8282c096e902f41978a5ce9c0b)~~

~~Set `fill` to 1 when `fill` is 0, also optimize the original code that limits the quicklist.~~
~~Now when list-max-listpack-size is 0, we will also create listpack with only one element, instead of the old forced-quicklist.~~

Please ignore this commit, it is wrong.
This is because `sizeMeetsSafetyLimit` prevents the quicklist node from exceeding the maximum value even fill is very large.
I also found that in the cases `0`, `1` and `< -5`, the quickist node will always have only one entry.
```c
    if (likely(_quicklistNodeSizeMeetsOptimizationRequirement(new_sz, fill)))  <- always return 0
        return 1;
    else if (!sizeMeetsSafetyLimit(new_sz))  <- always return 0
        return 0;
    else if ((int)node->count < fill)  <- always return 0
        return 1;
    else
        return 0;        <- will return from here.
```
"
1014828777,11303,sundb,2022-11-06T13:19:43Z,Done with [`196e101` (#11303)](https://github.com/redis/redis/pull/11303/commits/196e101dd6b8ae1340ee3feaaec46adb6c200144)
1014828839,11303,sundb,2022-11-06T13:20:03Z,Done with [`196e101` (#11303)](https://github.com/redis/redis/pull/11303/commits/196e101dd6b8ae1340ee3feaaec46adb6c200144).
1014828945,11303,sundb,2022-11-06T13:21:08Z,"Yes, added another one to the list. (https://github.com/redis/redis/pull/11303/commits/196e101dd6b8ae1340ee3feaaec46adb6c200144)"
1014841136,11303,oranagra,2022-11-06T14:40:52Z,"i fail to see where we address this concern now.
i.e. `fill` is positive, and we want to avoid creating listpacks of more than 8kb.

IIRC this mess is here for two reasons:
1. if the user have set a limit of 128 entries (seems normal), but for some reason some entries are huge (could be 500mb each), then for efficiency, we still want to limit the size.
2. we want to absolutely avoid a case were we reach more than 64k records since then the listpack has O(n) code to get their count."
1014846099,11303,sundb,2022-11-06T15:13:22Z,"I don't think it's appropriate to use `1`, because in this case the quicklist will become a list with only one entry per quicklist node, which will result in a lot of boundary conditions we won't be able to cover."
1014846193,11303,oranagra,2022-11-06T15:14:01Z,"p.s. that division bothered me for quite a while and i avoided commended since it's probably just my OCD.
but i imagine that the compiler uses division here, and if instead we'll do `if (shrinking) count_limit/=2, szlimit/=2;`, it'll just be two shifts.
feel free to ignore."
1014846537,11303,oranagra,2022-11-06T15:16:11Z,why did you give that up?
1014847786,11303,sundb,2022-11-06T15:24:56Z,"Since the list length in list-quicklist.rdb is 1, it will be a listpack anyway."
1014848450,11303,sundb,2022-11-06T15:29:09Z,"I feel like I posted  https://github.com/redis/redis/pull/11303#discussion_r1014828476 while you review 
"
1014848523,11303,oranagra,2022-11-06T15:29:43Z,"ohh, right."
1014848660,11303,oranagra,2022-11-06T15:30:34Z,"yes, i reviewed the one you ended up reverting."
1014852665,11303,oranagra,2022-11-06T15:51:00Z,"i still don't like the odd case of 0 (should be an invalid config, and if it isn't, then it should be the same as it was before (synonym for 1).

maybe we should accept the fact that a list with a single element of one byte will always be a listpack, and it's ok that we have no control over it...
maybe for the vast majority of the tests that runs on the two variants it doesn't have an impact?"
1014853680,11303,sundb,2022-11-06T15:56:40Z,"Yes, Indeed, I'm trying to modify it in a new way."
1016284357,11303,sundb,2022-11-08T08:31:13Z,Done
1016294156,11303,sundb,2022-11-08T08:39:19Z,"I unified the limit method(`quicklistNodeMeetLimit`) of quicklist node and listpack.
It means that now quicklist has add two new interfaces to the outside.

There are two main modifications to `list-listpack-max-size`
1. When 0, it works the same as 1
2. When < -5, it works the same as -5, if we dont do that, < -5 means disable list listpack."
1016539523,11303,oranagra,2022-11-08T12:07:59Z,"i'm not certain we wanna make this official (by documenting it),
people should just use documented values."
1016582022,11303,oranagra,2022-11-08T12:39:52Z,"* should that function now be named ""exceeds"" instead of ""meets""? i.e. it seems you negated it and it returns 1 when we cant append to the node.
* i think we can drop the `else` since each `if` also returns.
* since we know (and even assume) that the size and count limits are mutually exclusive (exactly one of them isn't set to MAX), we can just check which of them is different than MAX, and then do `return new_sz <= sz_limit`
* the check about SafetyLimit is only needed if the limit is count based, and we're below the count (i.e. only if we have a chance to allow the insertion).
* bottom line, i think this function can be rewritten to be more readable (and renamed)
"
1016583396,11303,oranagra,2022-11-08T12:41:18Z,"see we lost some `likely` statements, maybe we can re-add them (we're likely not to reach any limit)"
1016587739,11303,oranagra,2022-11-08T12:45:54Z,"so we no longer need the `lpSafeToAdd` (listpack concern), because the quicklist concerns are covering this anyway?"
1016597577,11303,oranagra,2022-11-08T12:55:36Z,"> When < -5, it works the same as -5, if we dont do that, < -5 means disable list listpack

i'm not sure i understand, is that different than what we had before?"
1016618052,11303,sundb,2022-11-08T13:14:20Z,"Yes, it is safe no matter the length (max size 8k) or size (4k~64k)."
1017522353,11303,sundb,2022-11-09T07:28:42Z,"Added, `unlikely` not `likely`."
1017522425,11303,sundb,2022-11-09T07:28:46Z,Done
1017522573,11303,sundb,2022-11-09T07:28:54Z,Removed
590582640,8621,madolson,2021-03-09T17:40:29Z,I would just add local as an input variable.
590587222,8621,madolson,2021-03-09T17:46:49Z,Spacing
590587621,8621,madolson,2021-03-09T17:47:16Z,"These don't really have ""Keys"", I think we have to do the node level check within the command itself like publish does for ACLs."
590589258,8621,madolson,2021-03-09T17:49:21Z,channelList()
590590995,8621,madolson,2021-03-09T17:51:50Z,localb?
590599756,8621,madolson,2021-03-09T18:04:05Z,"Since this is ""local"", should we be propagating it? Some thoughts here:
1. Always require it on a primary and then replicate it normally.
2. Don't replicate it and require consistent behavior from the clients about where you are connecting."
590602942,8621,madolson,2021-03-09T18:08:42Z,"I don't think you should be able to subscribe to multiple different slots, and I think that needs to be within the function."
612560657,8621,zuiderkwast,2021-04-13T15:36:54Z,Isn't this information intended (among other things) for cluster clients to select node by key slot using COMMAND and COMMAND GETKEYS? I think we get stuff for free here if we regard the channels as keys.
612673641,8621,madolson,2021-04-13T18:12:31Z,"It's also used for client tracking among other things. I agree with would be a shortcut to getting some support, but I think we shouldn't consider them as keys. "
642381589,8621,hpatro,2021-05-31T10:16:53Z,"I believe we should replicate it within the (master, replica) set. Otherwise, I believe we are restricting the data to a single instance.

I don't see any advantage to always publish the data on master. We should allow the client to publish data irrespective of a master or a replica."
642383306,8621,hpatro,2021-05-31T10:19:53Z,"As per our discussion, I've moved it to a static creation."
642413719,8621,hpatro,2021-05-31T11:18:30Z,"It was already getting handled with `CROSSSLOT Keys` error, I've put an additional check and message `-CROSSSLOT Channels in request don't hash to the same slot`"
642526564,8621,hpatro,2021-05-31T14:25:01Z,"Thanks for the heads up, I've handled the scenario(s). Still using the path used for keys for local channels slot mapping."
642759731,8621,madolson,2021-06-01T03:37:05Z,"I really don't like this notion that these are ""fake"" keys. I think we should be modeling this as a separate namespace which is also hashed. I really don't like having all of these if/else sprinkled int he code looking for the CMD_PUBSUB flag, it seems really fragile. Also, unless I'm mistaken, it's mostly just a change to ""getNodeByQuery"" which seems not that hard to generalize and is much clearer."
642767759,8621,madolson,2021-06-01T04:08:26Z,"In cluster mode, you can issue publish commands to replicas and they get propagated to primaries through the clusterbus. Pubsub local doesn't do that, it expects it to go to the primary to be replicated. This seems like weird behavior to break. This is especially odd since we don't make publish consistent (at least I think) and don't redirect it to primaries by default."
643647856,8621,madolson,2021-06-02T04:43:25Z,I think we've used the terms type and spec elsewhere in Redis to describe this type of structure.
643649003,8621,madolson,2021-06-02T04:47:09Z,Is this related?
643649139,8621,madolson,2021-06-02T04:47:39Z,UNSUBSCRIBELOCAL [channel ...] ?
643649882,8621,madolson,2021-06-02T04:50:06Z,Can we move this comment down to where this logic actually is?
643651998,8621,madolson,2021-06-02T04:56:51Z,Prefer to not touch this unless you have to.
643653230,8621,madolson,2021-06-02T05:00:49Z,"Unlike getKeysInSlot, it doesn't like like we ever strictly return string objects (which is why this function returns string objects). We could just call rax recursiveFree with the callback that disconnects all the clients."
643654194,8621,madolson,2021-06-02T05:03:56Z,"Do we need to maintain this separate structure for the count? It seems only to ever be used as an optimization in one place, it seems easier to just loop over the rax in that instance."
643656633,8621,madolson,2021-06-02T05:11:32Z,pubsubLocalbUnsubscribeAllClients
643657243,8621,madolson,2021-06-02T05:13:17Z,I'm not sure clients know what to do about this. I would have expected we disconnect them and they can reconnect to the right client.
643657626,8621,madolson,2021-06-02T05:14:29Z,Why does this have a notify argument?
643658489,8621,madolson,2021-06-02T05:16:58Z,"Would be good to document why? I would also do:
```
if (meta.local) {
    /* Local pubsub ignores patterns */
    return receivers;
}
```
to reduce indentation and make the flow clearer."
643661474,8621,madolson,2021-06-02T05:25:46Z,"@zuiderkwast I still don't think we should be treating them as keys. pubsub local will have to be implement specifically for clients, since it doesn't operate on keys like other commands. I may be over hesitant here to conflate the two."
655017641,8621,hpatro,2021-06-21T01:04:57Z,Not required. 
655017769,8621,hpatro,2021-06-21T01:05:53Z,Shouldn't we send at least a notification that the client is getting disconnected from this channel ?
655020242,8621,hpatro,2021-06-21T01:19:01Z,Missed the slotToChannelFlush method call here. 
655020727,8621,hpatro,2021-06-21T01:21:23Z,"yeah saw `type` in few places, Proceeding with `type`."
655021096,8621,hpatro,2021-06-21T01:23:13Z,Thanks for clarifying this. I've fixed the implementation to support pubsub local commands to work on the master/replica and data broadcast to happen through clusterbus within a slot. 
655021643,8621,hpatro,2021-06-21T01:26:14Z,"Makes sense. I was following this https://redis.io/commands/unsubscribe. Should we update these (unsubscribe, punsubscribe) as well? "
655023568,8621,hpatro,2021-06-21T01:35:01Z,"Yeah, seems like a unnecessary optimization. Just traversing the rax suffices."
655024902,8621,hpatro,2021-06-21T01:41:06Z,That's true. I was planning to add a command like `CLUSTER GETCHANNELSINSLOT` later on. Do you think it will be meaningful information for the user? Like before slot migration verifying if there are any slots with active channels.
655025134,8621,hpatro,2021-06-21T01:42:09Z,slotToChannelFlush is no longer required as per the other comment. Resolving.
655030084,8621,hpatro,2021-06-21T02:03:09Z,Makes sense. Will address this refactoring at the end. 
663418640,8621,madolson,2021-07-03T22:55:25Z,If they're getting disconnected I'm not sure it matters.
713463813,8621,madolson,2021-09-21T22:30:28Z,?
714149306,8621,madolson,2021-09-22T17:13:00Z,This isn't needed any more right?
714153382,8621,madolson,2021-09-22T17:18:37Z,"```suggestion
        if (dictSize(server.pubsublocal_channels)) {
```"
714154638,8621,madolson,2021-09-22T17:20:17Z,"redis generally doesn't use camel case for variable names, either nodesforslot or nodes_for_slot is more common. "
714165585,8621,madolson,2021-09-22T17:34:49Z,"""The command has no key or local channel arguments"" ? Might be clearer then adding the large addendum to this comment."
714170224,8621,madolson,2021-09-22T17:40:29Z,"If we can, let's merge this into the normal slot migration tests."
714175709,8621,madolson,2021-09-22T17:47:59Z,We can probably simplify these tests a bit by setting up a cluster and migrating the same slot back and forth. There is a lot of code that is re-iterated over and over again between these tests.
714176567,8621,madolson,2021-09-22T17:49:09Z,Maybe contentious to put that phrase.
714176941,8621,madolson,2021-09-22T17:49:41Z,Seems like this should get merged into the previous test since it is small.
714178149,8621,madolson,2021-09-22T17:51:12Z,Is this still needed?
714179594,8621,madolson,2021-09-22T17:53:10Z,"I don't think all of these functions that don't take arguments need to be functions, we can just include a pointer to the object in the type and reference the pointer instead of calling a function."
715296799,8621,madolson,2021-09-24T03:45:11Z,"A completely separate conversation that was had is that slots_to_keys is now no longer a a radix tree, but a linked list. This intuitively makes more sense as a radix tree here though, since we expect the total number to be smaller. "
715297111,8621,madolson,2021-09-24T03:46:25Z,"This can't be the current node right, since it's being removed from the cluster? I'm not clear why we need to remove the channels in the slot."
715298378,8621,madolson,2021-09-24T03:51:15Z,"This intuitively makes more sense to me.
```suggestion
/* Get all the nodes serving my slos. */
list *clusterGetNodesServingMySlots(clusterNode *node) {
    list *nodesForSlot = listCreate();
    clusterNode *my_primary = nodeIsMaster(myself) ? myself : myself->slaveof;
    listAddNodeTail(nodesForSlot, my_primary);
    for (int i=0; i < my_primary->numslaves; i++) {
        listAddNodeTail(nodesForSlot, my_primary->slaves[i]);
    }
    return nodesForSlot;
}
```"
715298781,8621,madolson,2021-09-24T03:52:56Z,"Didn't quite follow this, we remove the slot universally later."
715299556,8621,madolson,2021-09-24T03:55:46Z,"Maybe we should steal bytes for a flag instead of making a net new message. We have 8 bytes, I find it much more likely we will make this more configurable as opposed to trying to trying to put a new value there. https://github.com/redis/redis/blob/unstable/src/cluster.h#L224

That should hopefully simplify a lot of this code. "
715300149,8621,madolson,2021-09-24T03:57:48Z,"purely stylistic, but I think it's usually easier to follow code that is written where validation happens and returns if it fails instead of having if/else blocks. 
```suggestion
    unsigned int channelcount = countChannelsInSlot(slot);
    if (channelcount == 0) return;
    
    robj **channels = zmalloc(sizeof(robj*)*channelcount);
    getChannelsInSlot(slot,channels);
    pubsubUnsubscribeLocalChannels(channels,channelcount);
    zfree(channels);
```"
715300397,8621,madolson,2021-09-24T03:58:46Z,"I'd still throw -CROSSSLOT, clients understand this error message already."
715300888,8621,madolson,2021-09-24T04:00:41Z,My understanding is that today we still serve publish/subscribe even when the cluster is no ok? Not sure it really makes sense to change that behavior here?
715301214,8621,madolson,2021-09-24T04:01:55Z,General preference is to not touch code you aren't changing to make git history easier to follow.
715302446,8621,madolson,2021-09-24T04:06:51Z,"if might be easier to follow this code changing the if/else chain to be:
```
if (firstkey == NULL) {
    ... Handle first key
} else if (!is_pubsub_local) {
    ... Check it's really the same key
} else {
    ... Check same node, since pubsublocal
}
```
It's a little duplication, but I think it'll help with readability."
715303900,8621,madolson,2021-09-24T04:11:49Z,I'm not clear why you pass in argv if you don't use it. I also think removing it makes the previous line fit into 80 characters :)
715304258,8621,madolson,2021-09-24T04:13:14Z,I don't think so? There is no way to list all of the channels today right? I don't see a compelling reason to ever need to do that.
715305507,8621,madolson,2021-09-24T04:18:18Z,"Let's put this in pubsub.c, since it's not needed by the rest of Redis."
715307120,8621,madolson,2021-09-24T04:24:29Z,pattern?
715307600,8621,madolson,2021-09-24T04:26:20Z,Looks like some debugging code.
715308779,8621,madolson,2021-09-24T04:30:26Z,I don't understand this test. Both of these tests are sending the publish to the primary and reading on the replica. 
730181804,8621,hpatro,2021-10-16T00:24:58Z,Would this cause confusion as it is CROSSSLOT but across different nodes ?
730182139,8621,hpatro,2021-10-16T00:27:12Z,I thought we wanted to introduce a flag to let the user decide the behaviour.
730184701,8621,hpatro,2021-10-16T00:43:34Z,Sure. Updated.
730184735,8621,hpatro,2021-10-16T00:43:43Z,Looks cleaner to me.
730184757,8621,hpatro,2021-10-16T00:43:55Z,"Did try that, it's not possible to reference as it is not a compile-time constant.
```
pubsub.c:75:29: error: initializer element is not a compile-time constant
    .subscribe_msg = shared.subscribebulk,
  ```"
730195528,8621,hpatro,2021-10-16T02:11:28Z,"Yeah my bad, removed the reverse replication."
730295109,8621,hpatro,2021-10-16T18:11:54Z,"My bad, removed."
741274322,8621,madolson,2021-11-02T16:36:25Z,What do you mean by across different nodes?
741278530,8621,madolson,2021-11-02T16:41:14Z,This doesn't seem to be addressed.
742484796,8621,hpatro,2021-11-04T02:22:12Z,"Discussed: In a given call, only channels of a single slot will be accepted. "
742485007,8621,hpatro,2021-11-04T02:23:00Z,memcpy is done at the first byte of placeholder data array. Unable to use it. 
742507058,8621,madolson,2021-11-04T03:11:13Z,I think we should at least describe the implications of setting this as yes or no.
742507578,8621,madolson,2021-11-04T03:12:52Z,"I still think we can optimize this a bit, since the code between these two sections is basically the same. It looks like just the pubsub publish command that is called is different."
742508121,8621,madolson,2021-11-04T03:14:38Z,"I know we talked about this, but it looks like this is called generally anytime a slot is deleted, even if it's not one we own."
742508901,8621,madolson,2021-11-04T03:17:10Z,So do we still need CLUSTER_REDIR_CROSS_NODE_CHANNEL ?
742509836,8621,madolson,2021-11-04T03:20:31Z,Should probably clarify this is local pubsub
742512693,8621,madolson,2021-11-04T03:30:37Z,"Still not clear why this can't just be a pointer to an robj, and instead has to be a function that returns an robj."
742513232,8621,madolson,2021-11-04T03:32:47Z,I don't understand how this test is working. Publishing to a replica in cluster mode disabled shouldn't allow it to be read on the master.
742514946,8621,madolson,2021-11-04T03:39:24Z,"Let's also verify the position of the unsubscribelocal, which is when the migration happens, not when it's set to importing."
742515112,8621,madolson,2021-11-04T03:40:03Z,Is there a reason you set the subscribe client to deferrered twice?
742515416,8621,madolson,2021-11-04T03:41:11Z,"```suggestion
    set slot [R 0 cluster keyslot $channelname]
```
Which is true in several places, unless you are explicitly trying to setup a new connection."
742515888,8621,madolson,2021-11-04T03:43:03Z,yes
742956233,8621,hpatro,2021-11-04T15:34:35Z,"As discussed, making it inplace to avoid exposing it unless required."
742958050,8621,hpatro,2021-11-04T15:36:32Z,Local variable was useful to not handle the unsubscribe flow in certain cases. Made the cluster variable initialization global and handled the state correctly in methods.
744330594,8621,hpatro,2021-11-07T23:01:21Z,"You're right, it's incorrect. Strangely the test is succeeding and the test behaviour is also same for pubsub global semantics. Manually tested for CMD, publish to replica doesn't propagate to master.

 I've removed it, will try to figure out later why it's succeeding."
744330654,8621,hpatro,2021-11-07T23:01:43Z,Changed the naming to pubsublocal.
744330853,8621,hpatro,2021-11-07T23:03:17Z,"If I were to use the variables from `shared`, then there is compile time error. If we want to use an robj, I can create a new object for the struct `pubsubtype`. "
744532563,8621,hpatro,2021-11-08T09:18:06Z,Added a condition to verify if the node is the owner of the slot and then cleanup.
744915466,8621,hpatro,2021-11-08T16:54:29Z,I've merged the two conditional block into one. 
744915853,8621,hpatro,2021-11-08T16:54:53Z,Added some info. 
745126148,8621,hpatro,2021-11-08T22:00:51Z,"I misunderstood your comment, updated the code. Thanks for the suggestion."
745172465,8621,hpatro,2021-11-08T23:31:12Z,"As per your suggestion, added some publish/subscribe to verify if the client is still receiving messages."
747898096,8621,madolson,2021-11-12T00:18:11Z,"Thought about it some more, I could only think of the following case when you would want this to be set to yes. 
```suggestion
# This is useful if the application would like to use the pubsub feature even when
# the cluster global stable state is not OK. If the application wants to make sure only
# one shard is serving a given channel, this feature should be kept as yes.
```"
747899111,8621,madolson,2021-11-12T00:21:33Z,"Slightly weird you added a function for non-local channels, but didn't add one for local channels. Would suggest making it consistent. "
747908423,8621,madolson,2021-11-12T00:51:34Z,"```suggestion
/* Get all the nodes serving the same slots as myself */
```"
748631020,8621,hpatro,2021-11-12T22:59:31Z,I had actually but then removed it :|
767257545,8621,oranagra,2021-12-12T11:00:15Z,"do we wanna add key-specs here? and maybe also `firstkey`, lastkey`, etc? so some clients can automatically forward these commands to the right node?

also, don't we wanna use the `getkeys_proc` here (`getChannelsFromCommand`)?
need to see how this'll affect:
* Module API
* COMMAND GETKEYS
* ACL

Note that this may make some of the other modifications unnecessary (like the one in processCommand)"
767257892,8621,oranagra,2021-12-12T11:02:55Z,"Nit pick, i'd rather declare these above `select`, so we don't have to modify the `bulkhdr` line."
767257965,8621,oranagra,2021-12-12T11:03:33Z,"indentation.
```suggestion
    int cluster_allow_pubsublocal_when_down; /* Is pubsublocal allowed when the cluster
                                                is down, doesn't affect pubsub global. */
```"
767369062,8621,madolson,2021-12-13T01:55:51Z,"An earlier version had something similar to what you suggested, before keyspecs were merged though.

I was against adding keyspecs primarily since they aren't keys and only have a single point of overlap which is verifying the query is sent to the right node. Other use cases like client side tracking, ACLs, and Modules required adding code to exempt them.

It does give a hint to clients about about publishlocal, but subscribelocal and unsubscribelocal will still require explicit handling since they change flow of code. It's also worth noting that subscribelocal and publish have different behavior from regular key based commands, in that they don't be default re-direct to the primary. That's why I didn't want to expose them like other keys, which doesn't stop us from exposing them in a different field.

Thoughts?"
767463478,8621,oranagra,2021-12-13T07:22:17Z,"> It does give a hint to clients about about publishlocal

did you mean the current code? or a theoretical case in which we'll add key-specs?

> but subscribelocal and unsubscribelocal will still require explicit handling since they change flow of code

can you explain that?

So anyway, you're saying that although there's some overlap with keys, since it's not a complete overlap, and because there are some behavior differences, we should not use the key name mechanisms (keys-specs, COMMAND GETKEYS, etc), and instead since this is just one special type of command (unlike commands that work on keys, in which new ones are added every release), clients will just have to learn how to explicitly handle these commands, and will not rely on any of the automatic mechanisms we created for keys?"
768312009,8621,hpatro,2021-12-14T04:42:41Z,"> did you mean the current code? or a theoretical case in which we'll add key-specs?

Yes, the current code does provide hint to the client in case of `publishlocal`. It follows the same mechanism and error response like in case of treating keys.

> So anyway, you're saying that although there's some overlap with keys, since it's not a complete overlap, and because there are some behavior differences, we should not use the key name mechanisms (keys-specs, COMMAND GETKEYS, etc), and instead since this is just one special type of command (unlike commands that work on keys, in which new ones are added every release), clients will just have to learn how to explicitly handle these commands, and will not rely on any of the automatic mechanisms we created for keys?

`subscribelocal` and `unsubscribelocal` are bit more nuanced as we wanted to allow these commands on the replicas hence the client(s) need to be smart. Yeah, as this is a special type of command, we believe we could keep the two separate in terms of parsing the `keys`/`channels` out."
768538894,8621,oranagra,2021-12-14T10:44:23Z,"> Yes, the current code does provide hint to the client in case of publishlocal. It follows the same mechanism and error response like in case of treating keys.

you mean it'll respond with a MOVED error, but that requires another round trip.
Some clients get data from COMMAND command on startup, so they know which node to use without a trial-and-error ping-pong, others implement some hard coded logic for a certain set of commands, and use COMMAND GETKEYS fallback for other commands."
769809617,8621,madolson,2021-12-15T16:51:25Z,"Maybe we should add a new key flag for ""publish"" and ""subscribe"" keyspecs, so that clients can discover where they should route these requests. I'm not sure of how many clients really use get keys, we could print them here for compatibility, I don't think that is the right behavior. I see most people rely on the ""MOVED"" messages as opposed to the `COMMAND GETKEYS` command. Redis-py-cluster for example already implements this logic as well, and just assumes they are going to act like keys."
770441424,8621,oranagra,2021-12-16T11:09:14Z,"i didn't look a lot info client library code, but i do remember some libraries that use the output of COMMAND command (using `firstkey`, etc), implementing special logic for EVAL, and falling back to GETKEYS for anything else.
maybe it was the go client.. 
anyway, i don't want to rely on a round-trip (neither MOVED, nor GETKEYS).

so it's either we assume these 3 commands will get special handling by clients, or we support some way for discovery via COMMAND command.

how about making them behave as keys (like supporting COMMAND GETKEYS, and key-specs), but adding another flag (to the command or the key-spec) that specifies these are not really keys?"
771900967,8621,madolson,2021-12-19T05:51:49Z,"I like the idea of adding them as a keyspec with a special flag. 

@hpatro Can you update the code so that we use the new keyspec functionality to define them with a special flag? "
773667483,8621,oranagra,2021-12-22T07:49:49Z,"i don't think we wanna do that.
the whole point was that an innocent client, who doesn't know anything about the command, will be able to forward it to the right cluster node.
so it is likely that such an innocent (old) client, is using the lagacy spec)"
773668802,8621,oranagra,2021-12-22T07:52:17Z,the container and function seem wrong.
773669343,8621,oranagra,2021-12-22T07:53:17Z,the container and function seem wrong.
773669694,8621,oranagra,2021-12-22T07:53:53Z,"i suppose SENTINEL can be removed, right? (same for the other commands)"
773671102,8621,oranagra,2021-12-22T07:56:17Z,"can this be reverted now? (together with the variable)

maybe a few other things can be reverted as well?"
773671282,8621,oranagra,2021-12-22T07:56:34Z,indentation
773671781,8621,oranagra,2021-12-22T07:57:26Z,"if we're changing all these lines anyway, let's improve the indentation of the comments."
773834286,8621,hpatro,2021-12-22T12:00:20Z,I'm slightly confused regarding the keyspecs interaction with shard channel. Let me sync up with @madolson again and update here.
773835164,8621,hpatro,2021-12-22T12:01:51Z,"I have introduced two subcommands under `PUBSUB` so I believe the function and container are correct. The subcommand has the history, since `7.0.0`."
773850037,8621,hpatro,2021-12-22T12:27:41Z,Damn. method rename by the IDE caused it. :|
773888327,8621,oranagra,2021-12-22T13:30:34Z,ohh sorry. my bad.
774675009,8621,madolson,2021-12-23T16:31:38Z,"No, that was not the point. Innocent clients can continue to be inefficient and do multi-hops. If a client wanted to be smart, they can use the newer keyspecs to understand the topology. The legacy ranges already have gaps that clients have to work around. 

Most cluster clients don't use this information, and just hack around it: https://github.com/redis/redis-rb/blob/543beb26a98f16b898b8ff9730b756e1c6b87e56/lib/redis/cluster/command.rb#L50. "
774677260,8621,oranagra,2021-12-23T16:36:10Z,"ok, so here's a counter example: https://github.com/go-redis/redis/blob/e9a8bb4f86553aeab7fa13302f3487bb0eaf9e03/command.go#L62 (one that uses the legacy firstkey)"
774680422,8621,madolson,2021-12-23T16:42:55Z,"Reverting this would also require us to go back and introduce a bunch of changes in places like ACLs and Tracking to flag the keys returned here as ""not really keys""."
774681323,8621,oranagra,2021-12-23T16:44:42Z,"and another one: https://github.com/redis/redis-py/blob/04b8d34e212723974b9b1f484fe7cd9e93f0e315/redis/commands/parser.py#L68

so by exposing this info in the legacy firstkey, we may be getting implicit support by old clients"
774682841,8621,oranagra,2021-12-23T16:48:01Z,"i admit i didn't review the code deeply, so i'm not sure what you mean.
i imagined that when we make these look like keys (even though they're not), the amount of special checks will be lower, not higher.
i.e. in most cases the check of what to do with the command and it's arguments will benefit by making these look like keys. and we'll need to add special checks in just one or two places.

e.g. maybe this one can be reverted: https://github.com/redis/redis/pull/8621#discussion_r773671102"
774688711,8621,madolson,2021-12-23T17:00:09Z,"Amusingly the redis-py case won't actually work, since it'll find the pubsub flags and decide that it has ""no-keys"" since it is not one of the hard coded list of commands associated with pubsub."
774692990,8621,madolson,2021-12-23T17:09:00Z,"Yeah, it's a tradeoff between a touchpoint here: #8621 (comment) and in getNodesForQuery() (where it's looking for keys for cluster stuff) and touch points in modules, ACL, and tracking (where it's looking for keys for key related stuff). With more code refactoring I think all of these can be simplified though by relying on the full keyspecs instead of the legacy one, so I don't want to use that as a sticking point for which decision we pick."
774714305,8621,madolson,2021-12-23T17:58:00Z,"@oranagra Hari and I talked it over, and we decided to go with your suggestion. I believe the other touch points should eventually be resolved when we move more completely to key specs and can read the flags. We'll also update the documentation to make it clear that for compatibility reasons sharded-channels are considered keys for `COMMAND INFO`, `COMMAND`, and `COMMAND GETKEYS`."
774736329,8621,oranagra,2021-12-23T18:56:45Z,"ok.. please try, and feel free to revert if you feel it's doing more damage than good...
another alternative is to somehow exclude them in the legacy spec inside redis, but reflect them anyway in the output of COMMAND command, for the benefit of clients (excluding the ones that did explicit code to skip it, like reids-py did in the current version).
i feel that it's likely that in my approach there are more places that will implicitly work, and less that need explicit handling than the alternative.. but try it and see what you end up with."
774850194,8621,madolson,2021-12-24T02:58:08Z,"```suggestion
    ""complexity"": ""O(N) where N is the number of clients subscribed to the receiving shard channel."",
```"
774850563,8621,madolson,2021-12-24T02:59:57Z,"```suggestion
    ""complexity"": ""O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short channels)"",
```"
780309993,8621,YeonCheolGit,2022-01-07T14:47:43Z,`while the the cluster` maybe typo?
780316384,8621,YeonCheolGit,2022-01-07T14:56:21Z,"`pubsubPublishMessageShard(channel, message)` parameters have space but `pubsubPublishMessage(channel,message);` don't have space. 

what about this? `pubsubPublishMessage(channel, message);` "
737615512,9656,guybe7,2021-10-27T15:53:02Z,need to add VALUE_ARG_ABSET and edit the script
737618303,9656,guybe7,2021-10-27T15:56:04Z,"correction: make command->group and arg->type to enums. then we don't need it (to know which of the value union It is, check type==oneof or type==block

make sure to have TYPE_ABSENT"
740033025,9656,oranagra,2021-11-01T08:27:23Z,"re-thinking that huge doc-comment again, if we keep it here in this form, we'll have it twice in our repo.
i suppose there's no sense in having it next to the generated code, and there's probably no sense having it in the generator script.
the best place to have it would be next to the ""code"" we keep editing (like we had in the past, where it was next to the command table), so now that would be the individual json files, where we obviously don't want it.
so let's figure out where we would look for the doc when we edit the json files.
it's probably not commands.c or the generator script..
maybe move to server.h next to the redisCommand struct?"
740038302,9656,oranagra,2021-11-01T08:37:31Z,"this looks much better.
i wonder what would be the doc for something like ZPOP
it differs between RESP2 and RESP3 by both the fact the reply is a nested array, but also by the fact the the score is double rather than a string.
i guess this would still be a single entry in the ""returns"" array, right?
i suppose that for human readers that's enough, but maybe clients would want to further parse it and understand the nested types?

maybe not, i remind myself that the whole purpose of RESP3 is that clients don't need to understand the command in order to process the reply."
740039190,9656,oranagra,2021-11-01T08:39:11Z,"@guybe7 @itamarhaber i wouldn't sort things in the json file alphabetically at all.
i think the short one liners should be at the top, and the long ones at the bottom.
summary should probably always be the first one, then the other one liners (since, group, function, arity, etc), then the big ones by this order: [history, keyspecs, returns, arguments].
i think this will be most convenient to edit."
751160767,9656,guybe7,2021-11-17T11:43:15Z,"i think we need to describe just the immediate return-type, and not dive into specifics.. but I'll add it as a question"
758381548,9656,guybe7,2021-11-29T13:54:35Z,out dated
758382039,9656,guybe7,2021-11-29T13:55:09Z,will be handled in https://github.com/redis/redis/issues/9845
758467968,9656,oranagra,2021-11-29T15:24:11Z,"it's not possible to add a `,` after the last element in an array in JSON, right?
it sucks since adding another element will change two lines.
p.s. maybe we should add a newline at the end of file, some tools give an annoying silly warning for that."
758470424,9656,oranagra,2021-11-29T15:26:32Z,"just to be on the safe side, did you validate that the COMMAND command output before and after this PR is the same (i.e. no copy paste errors or other bug in the pipeline of the processing of keyspecs and such)?"
758471017,9656,oranagra,2021-11-29T15:27:06Z,didn't we want to add some mapping to refer from a key argument to the keyspec index?
758472089,9656,oranagra,2021-11-29T15:28:12Z,"so ""history"" is an array of pairs?
i.e. allows multiple changes per version.."
758474525,9656,oranagra,2021-11-29T15:30:29Z,"`stale` and `loading` are misleading, these used to be `ok-stale` or `allow-stale`"
758476736,9656,oranagra,2021-11-29T15:32:34Z,"maybe we do want to keep some of the acl categories implicit (i.e. automatically added by the command flags)?
it may be a bit confusing, but at least there's no redundant info and a chance for a conflict."
758478442,9656,oranagra,2021-11-29T15:34:20Z,"in theory the command itself doesn't block redis's main thread for long, so it's O(1).
but also, maybe it's ok to skip this field or leave it empty for some commands?"
758489139,9656,oranagra,2021-11-29T15:45:13Z,this is gonna change soon in #9748 (not sure which one is gonna get merged first)
758581880,9656,guybe7,2021-11-29T17:26:08Z,"yes, it sucks.

i'll ask Itamar to add newlines"
758582197,9656,guybe7,2021-11-29T17:26:32Z,will do
758582672,9656,guybe7,2021-11-29T17:27:08Z,"yes, is that ok with you?"
758582802,9656,guybe7,2021-11-29T17:27:18Z,"i'll add it to ""open issues"""
758584753,9656,guybe7,2021-11-29T17:29:39Z,"we discussed this and reached the conclusion that it's better if the input flags (in the json files) are the same as the output flags (in COMMAND)

do you wish to re-open that discussion?"
758586340,9656,guybe7,2021-11-29T17:31:38Z,"it was generated from COMMAND's reply, i guess we can reverse-engineer it and omit acl categories that were implicitly added

sounds good?"
758587299,9656,guybe7,2021-11-29T17:32:54Z,i will make it optional
758588415,9656,guybe7,2021-11-29T17:34:19Z,probably 9748 - let's try to remember to update this json when the other PR is merged
758671107,9656,guybe7,2021-11-29T19:28:21Z,actually this PR changes the current command table so once one of the PRs is merged the other will get conflicts
759049806,9656,guybe7,2021-11-30T08:47:16Z,ran it and indeed there was a bug in the generation script. fixed.
759051027,9656,guybe7,2021-11-30T08:48:48Z,done
759147724,9656,oranagra,2021-11-30T10:39:36Z,"i suppose.. it can't be a map.
the alternative is that each version holds an array of changes.
i don't mind that much."
759148714,9656,oranagra,2021-11-30T10:40:42Z,"ohh, i remember.
so the flags in COMMAND are already part of redis API, and we want to align with them.."
759149529,9656,oranagra,2021-11-30T10:41:42Z,"so now in some sense the JSON files are different than what COMMAND command generates, right?"
759157051,9656,oranagra,2021-11-30T10:50:33Z,"needs a doc comment. (mention the limitations in which it'll error)

p.s. let's list all interface changes in the top comment, including the new module API."
759157812,9656,oranagra,2021-11-30T10:51:37Z,"the doc comment is outdated.

p.s. let's note in the top comment that you're changing existing (unreleased) APIs (and why)"
759160571,9656,oranagra,2021-11-30T10:54:59Z,"all of these need to be documented,
and maybe explained that their only impact is the output of COMMAND command?"
759162086,9656,oranagra,2021-11-30T10:56:51Z,"the API must be documented (purpose and input (space separated))

also, we didn't add hints yet to any of the redis commands or documented their purpose.
i guess we need to either keep this API out and introduce it later, or add some note here about the purpose and a reference to some non-existing redis.io page (and a todo item or an issue to complete that)

either way, make sure it's listed in the top comment."
759167455,9656,oranagra,2021-11-30T11:03:43Z,did we change the type? how did this work till now?
759169735,9656,oranagra,2021-11-30T11:05:57Z,these will need to be documented in module.c
759171218,9656,oranagra,2021-11-30T11:08:02Z,mention this fix in the top comment.
759172411,9656,oranagra,2021-11-30T11:09:31Z,"let's put a comment on the other end too.
same for the other enums below."
759175871,9656,oranagra,2021-11-30T11:14:09Z,"let's mention this fact in the top comment where we describe the interface changes (i.e. the mix of array of fixed indexes, and a map).

p.s. we'll need a big redis-doc PR to describe all of that, and in theory maybe we wanna avoid merging this PR until the doc is ready.
not doing so can lead to two things:
1. we'll forget or run out of time, and release this undocumented.
2. we'll get some new realizations when documenting it about the usefulness or clarity of something and it may be too late to fix.
3. it may be easier for other reviewers to review the docs rather than the code.

please add a todo bullet in the top comment for docs."
759191652,9656,oranagra,2021-11-30T11:35:50Z,"did we agree that this refers to the module version or the redis version? (needs to be clearly documented, and maybe the example should reflect it).

maybe this is another thing to mention in the top comment. not sure how useful it is for clients..."
759192167,9656,oranagra,2021-11-30T11:36:37Z,leftover?
759195180,9656,oranagra,2021-11-30T11:41:02Z,"i'm not sure i understand what each of the old 3 tests attempted to test, and why the new one has two?
one tries to create a dup sub-command, and the other tries to create a sub-sub-command?
the 3rd one attempted to create a sub-command on a non-existing command? (the equivalent of passing NULL and crashing in the new code).

maybe a one line comment next to each can help."
759196203,9656,oranagra,2021-11-30T11:42:26Z,"when i saw the module code, i imagined that maybe you're matching the response against the non-module XADD response. maybe that's not a bad idea?
(on the other hand my suggestions about versions would kill that idea, not sure which one is better)."
759197978,9656,oranagra,2021-11-30T11:44:36Z,"maybe just `lindex` or `dict get` the relevant entry, instead of matching the whole reply?"
759201927,9656,oranagra,2021-11-30T11:50:10Z,leftover?
759203293,9656,oranagra,2021-11-30T11:52:09Z,"example of what we emit? that's nice but:
1. maybe we want to include the words ""output example:"" so it'll be clearer.
2. why do we have it just in one function and not others?"
759203666,9656,oranagra,2021-11-30T11:52:37Z,leftover?
759522122,9656,guybe7,2021-11-30T17:48:10Z,it used to be `char *` and now it's `const char *`
759543184,9656,guybe7,2021-11-30T18:16:06Z,we agreed it's the module version.. i'll add a comment in the test module
759557763,9656,oranagra,2021-11-30T18:35:36Z,"But is it an sds? if not then this casting is invalid. 
If yes, then maybe it should be typed correctly. "
759587330,9656,guybe7,2021-11-30T19:17:28Z,"it's sds only for module commands, const char * fo native commands"
759903020,9656,oranagra,2021-12-01T07:00:13Z,"ok, a little bit awkward. i hope it doesn't bite us some day."
759975895,9656,guybe7,2021-12-01T08:58:05Z,"for now we use the module version and not Redis

I will compare the result against XADD's

I also made a comment in the test module that we use the redis version just for testing, and it should actually be the module version

I added this issue under ""open issues"""
759976946,9656,guybe7,2021-12-01T08:59:31Z,"yep, added comments (indeed the third test in not applicable anymore)"
759978745,9656,guybe7,2021-12-01T09:01:50Z,"ok

please note that currently both redisCommandRESP2Type and redisCommandRESP3Type are unused

should we keep them (it'll be helpful for https://github.com/redis/redis/issues/9845"
759990192,9656,guybe7,2021-12-01T09:16:29Z,"addACLLogEntry calls sdsnew not matter what, i think we should change it to take `const char*`

WDYT?"
759992385,9656,oranagra,2021-12-01T09:19:06Z,"i guess we should trim them and add them in the later PR.
but i'm also ok with adding them now and use later."
759993997,9656,oranagra,2021-12-01T09:21:04Z,"or, considering the function takes an sds, it should have used `sdsdup` (faster)"
760056401,9656,guybe7,2021-12-01T10:36:31Z,"yes, but that would cause a crash now

either we make sure it gets a real a sds or we decide it gets a const char*

your call"
760088966,9656,oranagra,2021-12-01T11:18:55Z,"if it takes an sds, and someone passes a non-sds, should crash, and we need to either change the arg type or fix the caller.
but why would it crash?
the code we're looking at already has an sds, is the same object (command) used elsewhere as a char*?
anyway, please try to fix it, if you can make it a real sds and use sdsdup with minimal changes, let's do it.
but if in many cases we have to create an sds, just in order to dup it, let's use char*
so please try to sort it up and decide which one is better."
760114154,9656,guybe7,2021-12-01T11:54:43Z,right
760114608,9656,guybe7,2021-12-01T11:55:20Z,so i'll keep them
760154027,9656,oranagra,2021-12-01T12:51:12Z,"so maybe we should make them even more different, to make sure no one uses them by mistake instead of getting them from redis.
first, we can change `loading` back to `ok-loading`, but maybe we can do something even more drastic to guarantee no one uses them?"
760824576,9656,oranagra,2021-12-02T07:33:47Z,"is this a bugfix?
let's list it in the top comment."
760827897,9656,oranagra,2021-12-02T07:39:52Z,"so now module commands can get arity check before being executed (instead of doing their own checks and do `RedisModule_WrongArity`?

maybe we should specify that in the top comment. (IIRC we did say that all of these are just for COMMAND command output)"
760832815,9656,oranagra,2021-12-02T07:48:29Z,let's refer here to the placeholder md file in redis.io
760845539,9656,oranagra,2021-12-02T08:09:02Z,"```suggestion
 *            token value should be NULL
```"
760846805,9656,oranagra,2021-12-02T08:10:58Z,REDISMODULE_ARG_TYPE_ONEOF is repeated twice.
760847564,9656,oranagra,2021-12-02T08:12:08Z,"not specifically related to this block:
please run the script that generate an md from this doc and open it in some md viewer to see that the syntax is displayed correctly."
760853898,9656,oranagra,2021-12-02T08:21:22Z,"didn't you say that for modules the command name is an sds (hence the casting before this change)?
maybe i'm missing something (superficial review)"
760854167,9656,oranagra,2021-12-02T08:21:45Z,please be sure to run valgrind on this branch.
760856130,9656,oranagra,2021-12-02T08:24:24Z,just making sure you also updated the example in the docs with these changes
760856881,9656,oranagra,2021-12-02T08:25:23Z,please add a short comment before this huge block explaining what it does.
760858030,9656,oranagra,2021-12-02T08:26:56Z,please add a short comment before this huge block explaining what it does.
760858121,9656,oranagra,2021-12-02T08:27:03Z,please add a short comment before this huge block explaining what it does.
760858228,9656,oranagra,2021-12-02T08:27:09Z,please add a short comment before this huge block explaining what it does.
760859602,9656,oranagra,2021-12-02T08:28:53Z,please add a short comment before this huge block explaining what it does.
761202997,9656,yoav-steinberg,2021-12-02T15:26:19Z,"```suggestion
        ""summary"": ""Set configuration parameters to the given values"",
```"
761985045,9656,guybe7,2021-12-03T14:31:57Z,"not really a bug fix, but we kinda decided that constant literals should be uppercase (that's how they are going to appear in the command syntax)

I'll mention it in the top comment"
761988482,9656,guybe7,2021-12-03T14:35:24Z,"i did

```
RM_SetCommandArity - set the command arity. this one also allows the server to filter commands before they reach the module code
```"
761990630,9656,guybe7,2021-12-03T14:38:01Z,"the sentence is correct, it is the ""value"" that should be NULL (if it's a pure-token there's no value/placeholder/content or whatever we decide to call it)"
761991371,9656,guybe7,2021-12-03T14:38:54Z,how do i do that?
761992987,9656,guybe7,2021-12-03T14:40:59Z,"you are correct but here c->cmd is most likely not a module command (we are in RM_Call)

I could check the CMD_MODULE flag and call sdsnew or sdsdup accordingly... "
761994890,9656,guybe7,2021-12-03T14:43:20Z,"actually i didn't but it doesn't really matter (I adjusted the code itself just to fit XADD's json, but it's just names of things...)"
761995498,9656,guybe7,2021-12-03T14:44:05Z,i did add the `-1` where needed cause otherwise it wouldn't compile
762002830,9656,guybe7,2021-12-03T14:53:00Z,@yoav-steinberg i think we should first merge your doc PR and then we will re-generate the jsons so that config-set.json will include that fix
762542104,9656,oranagra,2021-12-05T10:34:45Z,"`ruby modules/gendoc.rb` to generate the md file.

you can maybe post it in GH gist editor or something, but the truth is that redis-io renders md files a bit differently, so try to follow this:
```
# prerequisits
sudo apt-get install ruby-rack ruby-dev
sudo gem install dep
sudo dep install
run a plain redis-server (no password, default port)
# then
inside redis-io repo you run:
REDIS_DOC=/home/oran/work/redis-doc rackup 
```

you can probably ask Yoav / Itamar / Viktor for help"
762542252,9656,oranagra,2021-12-05T10:36:44Z,"ok, so the reason this casting was working till now is because internally the ACL code didn't use the sds header..
so now it's cleaner, and there's no decrease of efficiency...
thanks."
762575097,9656,oranagra,2021-12-05T15:08:13Z,"why do we need that?
maybe an indication that something should be moved to server.h?"
762576028,9656,yoav-steinberg,2021-12-05T15:15:27Z,@guybe7 Just merged with updated _commands.json_
764826803,9656,yoav-steinberg,2021-12-08T12:36:17Z,"Note the following doc pr: https://github.com/redis/redis-doc/pull/1705
And sister code pr: #9914
Once merged this should be updated."
767603439,9656,yossigo,2021-12-13T10:41:27Z,"Why do we refer to this as a ""proxy""? I think it's a confusing term, and we could just call this a `RedisModuleCommand`."
767610259,9656,yossigo,2021-12-13T10:47:57Z,"Consider specifying all possible errors, and the fact this is intended for and restricted for current module's commands only.
"
767613912,9656,yossigo,2021-12-13T10:50:58Z,"What's our future proofing approach to new commands flags? As it is, future modules using new flags on older versions will simply fail and have no idea why."
767614542,9656,yossigo,2021-12-13T10:51:27Z,Describe in what conditions this can fail?
767616544,9656,yossigo,2021-12-13T10:53:02Z,Need to validate there's no user implementation for the parent command?
767618907,9656,yossigo,2021-12-13T10:54:53Z,Consider freeing in case this gets called twice?
767619979,9656,yossigo,2021-12-13T10:55:39Z,Same as above - consider freeing.
767635488,9656,yossigo,2021-12-13T11:07:34Z,"@guybe7 I'm thinking about how a module with many commands and arguments going to look like, and I wonder if we've considered also the option of making this completely declarative, i.e. the module makes a single call and provides a complex nested structure with everything.

This is of course not mutually exclusive and modules may even take that approach internally and still call these commands, but I'm asking myself if that's even possible and if it is - what would be a better API design.

Another thing that came up in different places is how we're going to handle backwards compatibility as we move on, i.e. handling of unsupported keyspecs / argument types / flags / etc. when provided by future modules compatible with future versions of Redis."
767719988,9656,oranagra,2021-12-13T12:37:47Z,"isn't it the same as `RM_CreateCommand`?
so modules will have to detect the redis version and avoid passing flags that it doesn't support (otherwise it'll error)"
767725891,9656,oranagra,2021-12-13T12:46:15Z,"the sub-commands will obviously need to be called separately if the module wants to provide a separate function pointer for each.
but i suppose that all the metadata about the command can be provided with some json string.
this would still be ""ABI"" compatible, but we'll have to:
1. add some json parser in redis core.
2. handle parts of the errors in parsing that json internally (backwards / future compatible), instead of just error one API call and let the module decide how to proceed.

other notes:
* i might be narrow minded, and just wishing to stick to what's been working so far.
* i do understand the module code is gonna look ugly, and that in any case they don't have a high incentive to use this new API.
* i don't like adding a json parser to redis core at the moment.
"
769432597,9656,guybe7,2021-12-15T09:31:58Z,@yossigo anything to add?
769439572,9656,guybe7,2021-12-15T09:39:50Z,"@yossigo @oranagra it depends if we want to let users create ugly stuff like COMMAND which has subcommand but is also valid with argc=0

I guess we don't."
769486148,9656,oranagra,2021-12-15T10:26:08Z,make sure to document this (top comment and future docs)
769615226,9656,oranagra,2021-12-15T13:16:11Z,"i think we still need this method to run at runtime and apply the implicit flags.
i.e. we removed the string compare, but we still need some runtime processing.
we could also do that in the python script, but i think it's better here."
769615355,9656,oranagra,2021-12-15T13:16:21Z,same
769615559,9656,oranagra,2021-12-15T13:16:33Z,same
769615877,9656,oranagra,2021-12-15T13:16:58Z,same
769622286,9656,guybe7,2021-12-15T13:25:26Z,this is no longer required
769625401,9656,oranagra,2021-12-15T13:29:14Z,"how come? how do you distinguish between ones that are ""also in sentinel"" and ones that are ""only in sentinel""?"
769628148,9656,oranagra,2021-12-15T13:32:31Z,"ohh, i see you just listed both in the json file.
isn't it cleaner to just list the SENTINEL_ONLY in the json file, and have the other one implicit?"
769662981,9656,guybe7,2021-12-15T14:13:04Z,"i think i prefer the only implicit thing here is ACL categories and not command flags... we can revisit that in the future

specifically for SENTINEL I doubt there would be other ""only_sentinel"" commands

ok?"
769683579,9656,oranagra,2021-12-15T14:35:11Z,"for a moment i thought that maybe should avoid renaming these to protect the blame log,
but since we also created a new variable for them `acl_categories`, i suppose renaming is better, otherwise we risk them being check against the wrong flag somewhere (other branches)."
769685868,9656,oranagra,2021-12-15T14:37:35Z,"if we move these to be above the categories, maybe they won't show in the blame log?"
769697647,9656,oranagra,2021-12-15T14:49:41Z,"it was decided to take the module api out of this PR, and handle in another one."
769699982,9656,yossigo,2021-12-15T14:52:05Z,"@guybe7 not in this scope, in a broader scope I think this is a not optimal and we should probably improve that - maybe add a way to indicate some flags are optional and may silently fail."
769732454,9656,guybe7,2021-12-15T15:25:00Z,not sure... is it important? i changed in-line comments so the blame log would change anyway
769775310,9656,oranagra,2021-12-15T16:12:02Z,"is this the number of config parameters in redis? or the config parameters requested?
i think N*M"
769776923,9656,oranagra,2021-12-15T16:13:58Z,"i suppose that since N is the number of total configs in redis, and it's constant and low, it's ok to list it as O(1).
so that's applicable on my comment above too, which makes N the number of requested configs?
i'm not an expert on that matter.. @itamarhaber ?"
769777241,9656,oranagra,2021-12-15T16:14:21Z,"```suggestion
        ""complexity"": ""O(N) when N is the number of configuration parameters provided"",
```"
769778121,9656,oranagra,2021-12-15T16:15:20Z,"i think the complexity is O(N), when N is the number of queued commands."
769779460,9656,oranagra,2021-12-15T16:16:50Z,"is ""NA"" now part of the ""protocol""? maybe we better leave empty?
@itamarhaber WDYT?

p.s. isn't it an O(1) command?"
769781312,9656,oranagra,2021-12-15T16:18:57Z,"isn't that O(N) where N is the number of latency events recorded?
maybe GRAPH is too?"
769782017,9656,oranagra,2021-12-15T16:19:41Z,"again, i think this is O(1)"
769782246,9656,oranagra,2021-12-15T16:19:56Z,"same question about ""NA"" vs empty string."
769782752,9656,oranagra,2021-12-15T16:20:32Z,it could be slow... but we really can't tell anything.
769782871,9656,oranagra,2021-12-15T16:20:41Z,could be slow.
769784883,9656,oranagra,2021-12-15T16:22:56Z,BGREWRITEAOF was O(1)
769825997,9656,guybe7,2021-12-15T17:10:33Z,"N and M being..?

if any of them is the number of configurations in redis, remember it's constant"
769827308,9656,guybe7,2021-12-15T17:12:03Z,"oh ok just saw this comment

IIRC Itamar and I discussed it and since the number of configurations is indeed constant it shouldn't count in the big O notation"
769828443,9656,guybe7,2021-12-15T17:13:29Z,@itamarhaber  said that the number of events is capped by some constant 
769829421,9656,guybe7,2021-12-15T17:14:41Z,"""complexity"" is just free text, doesn't have to comply with any rules

we left ""NA"" so that it'll be easy to grep all the places that are missing this information "
769829833,9656,guybe7,2021-12-15T17:15:13Z,yes but this is foreground
769832758,9656,oranagra,2021-12-15T17:18:57Z,"yes, realized that later, so i suggest
```suggestion
        ""complexity"": ""O(N) when N is the number of configuration parameters provided"",
```"
769835960,9656,oranagra,2021-12-15T17:23:11Z,`#define LATENCY_TS_LEN 160`
769836806,9656,oranagra,2021-12-15T17:24:17Z,"well, ok. but what's the difference between `NA`, a missing field, or one set to `""""`?"
769837220,9656,oranagra,2021-12-15T17:24:46Z,"it should at least be uniform, i feel that a missing field is better if we don't have anything to say"
769837767,9656,oranagra,2021-12-15T17:25:23Z,"ohh, so it's the same as FLUSHALL.
what did we write there?"
769844391,9656,oranagra,2021-12-15T17:33:52Z,"since it's free text, let's mention that it could be slow, and depends among others, on how much memory is allocated."
769867694,9656,guybe7,2021-12-15T18:04:55Z,"```
O(N) where N is the total number of keys in all databases
```

not so accurate but ok"
776037233,9656,zuiderkwast,2021-12-28T19:02:11Z,"This will not be rendered as a list, because there is no blank line before the bullet list.

(Sorry I didn't see this before. You sneaked in this new API in the huge PR.)"
776037752,9656,zuiderkwast,2021-12-28T19:04:06Z,"This will not be rendered as a list, because there is no blank line before the bullet list."
776171478,9656,oranagra,2021-12-29T06:31:48Z,@zuiderkwast can you please make a PR?
795037812,9656,enjoy-binbin,2022-01-29T10:34:33Z,"```
                    {
                        ""name"": ""unix-time"",
                        ""type"": ""integer"",
                        ""token"": ""EXAT""
                    },
                    {
                        ""name"": ""unix-time"",
                        ""type"": ""integer"",
                        ""token"": ""PXAT""
                    },
```
should we change it to?
```
                    {
                        ""name"": ""timestamp"",
                        ""type"": ""unix-time"",
                        ""token"": ""EXAT""
                    },
                    {
                        ""name"": ""milliseconds-timestamp"",
                        ""type"": ""unix-time"",
                        ""token"": ""PXAT""
                    },
```

i see in set.json
```
                    {
                        ""name"": ""unix-time-seconds"",
                        ""type"": ""unix-time"",
                        ""token"": ""EXAT"",
                        ""since"": ""6.2.0""
                    },
                    {
                        ""name"": ""unix-time-milliseconds"",
                        ""type"": ""unix-time"",
                        ""token"": ""PXAT"",
                        ""since"": ""6.2.0""
                    },
```

in pexpireat.json or expireat.json
```
            {
                ""name"": ""milliseconds-timestamp"",
                ""type"": ""unix-time""
            },

            {
                ""name"": ""timestamp"",
                ""type"": ""unix-time""
            },
```

make a demo commit: https://github.com/redis/redis/commit/6d1b5099ce5549b86df001244d71c206b427e3f2"
795046559,9656,oranagra,2022-01-29T12:19:38Z,"@enjoy-binbin if you find a problem or an inconsistency on an already merged PR, please just post a PR (rather than a comment in the closed one).

p.s. i'm not sure if milliseconds timestamp could be technically considered a ""unix-time"" but i see it already is in some fields, so let's at least be consistent."
857114574,9656,yangbodong22011,2022-04-24T11:53:01Z,"```suggestion
                ""key_spec_index"": 0
```
@guybe7  Please confirm it should be 0 here?"
857115770,9656,oranagra,2022-04-24T12:02:57Z,"@yangbodong22011 you're right. there's only one key-spec, so it can't be at index 1.
please make a PR.

p.s. how did you find that? maybe we can benefit from some mechanism that validates there."
857134054,9656,yangbodong22011,2022-04-24T14:20:58Z,"@oranagra Just found out while looking at the code, I haven't checked the rest of the commands."
857134359,9656,yangbodong22011,2022-04-24T14:23:59Z,"> please make a PR.

We might have to think of other ways to make sure other commands don't go wrong, rather than fixing one by one."
857427741,9656,guybe7,2022-04-25T09:24:14Z,"thanks, @yangbodong22011 will you create a PR, or should I?

and yes, we need to figure out a better way to spot these issues... got any ideas?"
857431563,9656,zuiderkwast,2022-04-25T09:28:23Z,Idea: One of the python scripts for handling the JSON files could do some validation.
857432461,9656,yangbodong22011,2022-04-25T09:29:27Z," Is it possible to check whether the index is valid in generate-command-code.py and whether the key_spec contains an unused index.

`rename` and `renamenx` also has problem. (have 2 index, but just use key_spec_index: 0)"
881218394,9656,enjoy-binbin,2022-05-25T05:00:53Z,"> Is it possible to check whether the index is valid in generate-command-code.py and whether the key_spec contains an unused index.

i write a small ugly test script, and find out these, you guys can check on it, in case you guys forget this one

- LCS: key2 key_spec_index error
- RENAME: have unused key_spec
- RENAMENX: have unused key_spec

- WATCH: key_specs missing flags?
- SUNSUBSCRIBE / SPUBLISH / SSUBSCRIBE are NOT_KEY, i suppose they are ok
- RESTORE-ASKING: missing arguments, should it be like RESTORE?
- PFDEBUG: missing arguments, this is a debug command, so i suppose it is ok"
881266512,9656,zuiderkwast,2022-05-25T06:32:11Z,"@enjoy-binbin How ""ugly"" is your script? I think we need it in a test case or a separate CI job."
882381469,9656,oranagra,2022-05-26T07:08:39Z,"@enjoy-binbin thank you for reminding us.. looks like we forgot it.
so first thing's first, let's fix them, please make a PR.

if your test script is tcl based, let's put it in the test suite.
alternatively, we could set some assertions in the C code.
or put another test in the utils folder and somehow run it in some CI or manually from time to time (not preferred)"
882395665,9656,enjoy-binbin,2022-05-26T07:29:48Z,"i just write some logic in generate-command-code and the check spec_key logic base on my understanding
i just wanted to see if we have any other commands that have the same problem first (we can fix it first and then try to find a way to check it)
ok, i can summery it and then let's discuss it in other thread.

can see it in #10779"
1058521543,11659,madolson,2022-12-28T18:22:05Z,"Repost: I don't like this approach since it's cumbersome for adding more arguments. I think I suggested something else in the internal PR, but I'm going to suggest something else this time:

We can completely reprocess the command, going back through the normal code path after the unblock, based on the work being done in https://github.com/redis/redis/pull/11012/files/3adc264280e1bf098d5b8cb4eb9809f7dcb31af3..e1269abfa6a51ac7a290605b97334a1c018cd90f. This will be slightly less performant, given all of the code it's executing, but it is only once per connection so I think we can pay that cost and it should simplify the implementation a bit. We still need some simple state to track where we are in the auth chain, but other than that it should work fine.
"
1058522234,11659,madolson,2022-12-28T18:23:57Z,"A general naming question for others. I don't think the word ""Custom"" is adding much here, and would prefer just having this feature be called RedisModuleAuth. "
1058524784,11659,madolson,2022-12-28T18:28:44Z,"I'm not convinced this API is needed. Other functionality such as configs lack this mirror API, since you have a strategy which is to just unload and reload the module. Happy to hear other thoughts."
1058525889,11659,madolson,2022-12-28T18:31:10Z,"```suggestion
/* Returns 1 if the module has any custom auth callbacks registered. If `should_unregister` is  non zero,
```"
1058537018,11659,madolson,2022-12-28T18:59:20Z,"More typical style.
```suggestion
    } else {
```"
1058537323,11659,madolson,2022-12-28T19:00:18Z,"This flag ""implies"" it's blocked. I wonder if instead of this we can just check if it's blocked and has the custom handler set."
1058537946,11659,madolson,2022-12-28T19:01:06Z,"
```suggestion
    int skipped_prev_callbacks = prev_auth_ctx == NULL;
```"
1058539078,11659,madolson,2022-12-28T19:03:54Z,"Repost: I also don't know if we need both of these return codes, I might combine them into one. Whether or not auth succeeded should depend on whether or not the user was authenticated. Thinking more, maybe we should combine SUCCEEDED, DENIED, and BLOCKED together. The behavior being moduled by the APIs that were called. "
1058540189,11659,madolson,2022-12-28T19:06:53Z,"If we take an earlier suggestion of just reprocessing the command repeatedly, I think this code also becomes unneeded. "
1058540460,11659,madolson,2022-12-28T19:07:45Z,"Repost: I'm not convinced we need to build two modules, and I'm also not convinced these need to be separate from the auth.c file."
1058541297,11659,madolson,2022-12-28T19:10:05Z,"I'm not sure we should silently return NULL on input validation. I would almost rather assert fail, since this means we're calling in an invalid context."
1058543019,11659,madolson,2022-12-28T19:13:25Z,"This seems like a highly coupled function, I would have just left this in the calling function site. You also left a comment at the calling site describing the functionality of this function, which isn't great."
1058558220,11659,KarthikSubbarao,2022-12-28T19:53:18Z,">  Other functionality such as configs lack this mirror API, since you have a strategy which is to just unload and reload the module

This makes sense - I agree that module unload can be used instead."
1060929943,11659,KarthikSubbarao,2023-01-03T20:26:15Z,Resolved in https://github.com/redis/redis/pull/11659/commits/a2cfa54fd955cdd84935377679b4abb55e917501
1060946144,11659,KarthikSubbarao,2023-01-03T20:52:22Z,"If we reduce the 4 codes into 2 codes, we can have: `REDISMODULE_AUTH_HANDLED` and `REDISMODULE_AUTH_NOT_HANDLED`.

To authenticate, the module can use the `RM_Authenticate*` APIs and return `REDISMODULE_AUTH_HANDLED`.
To block a client on module based Auth, the module can use the `RedisModule_BlockClientOnAuth` API and return `REDISMODULE_AUTH_HANDLED`.
To deny authentication, the module will need to return `REDISMODULE_AUTH_HANDLED` without successfully using either of the APIs above.
To indicate that the Module does not want to take any action related to AUTH, the module can return `REDISMODULE_AUTH_NOT_HANDLED`. 


This works fine - although denying authentication from the module is not very explicit since we don't have a specific return code or an API to deny auth.

I can make the update to reduce the 4 codes to 2 (`REDISMODULE_AUTH_HANDLED` and `REDISMODULE_AUTH_NOT_HANDLED`) if this sounds good"
1061039120,11659,madolson,2023-01-03T23:45:27Z,Reposting an internal comment. Perhaps we could use startup arguments so we can load the same module twice but have it register slightly different values.
1061041240,11659,madolson,2023-01-03T23:51:22Z,"> This works fine - although denying authentication from the module is not very explicit since we don't have a specific return code or an API to deny auth.

That's true. They can be explicit by calling the DenyAuth api if they want, but if they call handled but don't do anything. I think this behavior, if you aren't authenticated you then throw an error is OK. However, one nuance is if you are using `HELLO` or `AUTH` on an *already* authenticated user, we won't be able to detect anything. Perhaps we do need REDISMODULE_AUTH_DENIED then."
1061057804,11659,KarthikSubbarao,2023-01-04T00:39:52Z,"> However, one nuance is if you are using HELLO or AUTH on an already authenticated user, we won't be able to detect anything.

We are able to differentiate using the client flag. The `CLIENT_CUSTOM_AUTH_RESULT` flag will be momentarily (only within the command handling context/duration) added to the client flags when the module uses the `RM_Auth*` APIs & is removed right before replying to the client.

If this flag is missing, we will know that the Module did not successfully authenticate the client with custom auth and in this case, we can reply to the client with an ERR message if the module returned `REDISMODULE_AUTH_HANDLED`.

So, the 2 code approach (if you aren't authenticated through the ongoing AUTH/HELLO, you then throw an error) seems possible - but it is not the cleanest solution.


"
1066440796,11659,hpatro,2023-01-10T23:26:42Z,"Having multiple modules loaded adds a bit more test coverage as we have some marker concept to iterate over all the modules processed. 

If we can load the same module twice with different names, that should also work."
1066442829,11659,hpatro,2023-01-10T23:30:43Z,It does seem redundant. I also incline with the above.
1066444477,11659,hpatro,2023-01-10T23:34:12Z,"I did suggest the same during the internal discussion. 

This also removes the cyclic call between acl.c -> module.c -> acl.c."
1068749259,11659,KarthikSubbarao,2023-01-12T22:56:19Z,Removed this API in - https://github.com/redis/redis/pull/11659/commits/5a234b6dc3afbdea1cb3c801bff113669aaf400c
1068752122,11659,KarthikSubbarao,2023-01-12T23:01:09Z,"We will continue to have the second module for testing until there is an API / mechanism to properly support loading the same module (.so file) twice. Right now we can load the module twice, however, we do not have a way to allocate internal data and access it later on through the RMContext. If we try storing info in a pointer in the context of Module 1, the pointer gets overwritten by module  2. If we have a mechanism to hold info for a Module in the engine through the RMContext and access it later, this option can be used and the second testing module can be removed."
1070166484,11659,KarthikSubbarao,2023-01-13T23:50:21Z,I have switched to using 2 codes in this commit: https://github.com/redis/redis/pull/11659/commits/b21ad243127fddee6889652e579a2d15fa725aed
1070166707,11659,KarthikSubbarao,2023-01-13T23:51:09Z,This function is removed in https://github.com/redis/redis/pull/11659/commits/b21ad243127fddee6889652e579a2d15fa725aed
1070167658,11659,KarthikSubbarao,2023-01-13T23:54:23Z,This code is used to check if the client was authenticated through custom authentication (via the RM_Authenticate* APis)
1070169178,11659,KarthikSubbarao,2023-01-13T23:59:48Z,"No, this flag does not imply that the client is blocked, it just means that the client is attempting custom authentication. This flag is used in multiple places - (1) to check if any custom auth is ongoing in any client and to return ERR during module unloads if so  (2) to allow auth chains to exist by avoiding resetting the client args between blocking auth callbacks (3) to queue the client for reprocessing if custom auth has not concluded after one cycle of a blocking auth callback (in this case the next cb will be attempted) (4) to assert that the RM_BlockClientOnAuth can be used because the client is in the context of custom auth

There are other cases where this is needed as well"
1070169744,11659,KarthikSubbarao,2023-01-14T00:01:49Z,"I am looking into re-processing the client in the case where a client is unblocked and yet, still in the middle of custom authentication. Here, we can reprocess the client to attempt the next auth callback.

I will try out this approach to see if it is possible. 

(1) To maintain the state of what custom auth callback was previously attempted, we will store a custom auth context inside the client struct as a void pointer (2) To avoid updating stats an additional time, we need to have some control flow to see that this is a reprocessed command"
1070446432,11659,KarthikSubbarao,2023-01-14T23:03:23Z,Added reprocessing logic here - https://github.com/redis/redis/pull/11659/commits/7e1a36b41ea68941bff04acabb0c4bd473dd9696
1080557976,11659,hpatro,2023-01-18T21:09:35Z,"With this new introduction, if `prev_custom_auth_ctx` is not null and client-eviction/client-kill logic picks this client to be evicted, do we need to handle any logic in `freeClient` ?

Should we add tests for client-eviction/client-kill while client is blocked on auth ?"
1080797172,11659,KarthikSubbarao,2023-01-19T04:36:24Z,I added a test for the scenario where a client is killed in the middle of blocking custom auth here - https://github.com/redis/redis/pull/11659/commits/13594b6835c7ca2b5562bb15e3f41690aa20ad7f
1097900638,11659,madolson,2023-02-06T20:46:02Z,"I don't think you fully got my previous point about reprocessing the command. The idea was that if the auth and hello commands were fully re-entrant, we would be able to keep calling them over and over again until they succeeded without all this back code. Let me know if my comment still isn't clear."
1097901320,11659,madolson,2023-02-06T20:46:41Z,"I don't think you fully got my other comment, so AFAIK my comment is still true. In my suggestion there aren't auth results that are sticky outside of the call stack, as we immediately respond to the client. "
1097902037,11659,madolson,2023-02-06T20:47:36Z,"I think the confusion is that clients only retain some authentication state when they are blocked, in all other cases all the state is retired. Just do go through your points:

1) This can only happen in the context of blocking, since in all other cases the client will immediately give up the state.
2) That is for blocking commands right? So my point seems appropriate here?
3) This is also in the context of blocking.
4) This is also in the context of blocking.

Generally speaking I don't want flags when there is other state that directly reflects the functionality we are modulating, which I think in this case is blocking context."
1098032751,11659,madolson,2023-02-06T23:46:09Z,"```suggestion
            serverLog(LL_WARNING, ""Error unloading module %s: %s"", (char *)c->argv[2]->ptr, errmsg);
```"
1098035082,11659,madolson,2023-02-06T23:50:44Z,"I don't know I fully understand this choice, why would we automatically reply with an authentication error in a timeout scenario?"
1098038530,11659,madolson,2023-02-06T23:57:18Z,"The second point was that most of this should just be in auth.c is still valid, let's not just add more modules for very specific functionality."
1100632025,11659,KarthikSubbarao,2023-02-08T20:13:27Z,"This callback times out a blocking operation. It does not close the client. So, because the blocking operation is in the context of a command, we will need to reply to the client. This is just handling the case where the other blocking APIs are used in the context of a custom authentication.

However, invoking a timeout callback is not possible from a blocking custom auth operation. So, instead of handling it, we can server assert here ."
1101011225,11659,ranshid,2023-02-09T05:56:28Z,why not just check if client is blocked? (c->flags & CLIENT_BLOCKED)
1101023102,11659,ranshid,2023-02-09T06:19:01Z,again can we expect client to be blocked because something else? or that is was previously blocked? I think not and we should avoid peeking inside blocking state.
1101088375,11659,ranshid,2023-02-09T07:54:00Z,wondering why we can't set the CLIENT_PENDING_COMMAND on an auth blocked client. this is basically indicating that we still have a pending command to reprocess and then handle it again on reprocess 
1101104568,11659,ranshid,2023-02-09T08:11:42Z,"I understand the motivation here, but I am not sure why we can't just keep reprocessing the client and again block on auth? is this an issue with statistics?"
1102107619,11659,KarthikSubbarao,2023-02-09T22:57:28Z,We can use `(c->flags & CLIENT_BLOCKED)` instead. I will make the update
1102107716,11659,KarthikSubbarao,2023-02-09T22:57:35Z,We can use `(c->flags & CLIENT_BLOCKED)` instead. I will make the update
1103307578,11659,madolson,2023-02-10T22:18:28Z,"These return codes don't seem to be set or used. Maybe we should delete them, since they aren't set for moduleAuthentication here."
1103411353,11659,KarthikSubbarao,2023-02-11T00:06:33Z,"```
module.c:12542:68: warning: format specifies type 'char *' but the argument has type 'void *' [-Wformat]
            serverLog(LL_WARNING, ""Error unloading module %s: %s"", c->argv[2]->ptr, errmsg);
                                                          ~~       ^~~~~~~~~~~~~~~
./server.h:3646:27: note: expanded from macro 'serverLog'
        _serverLog(level, __VA_ARGS__);\
```

I attempted this change and saw that it raises this warning"
1103437714,11659,KarthikSubbarao,2023-02-11T00:30:58Z,Addressed here: https://github.com/redis/redis/pull/11659/commits/767344e7bc16a1828b6570abeee240054feaf05d
1103437818,11659,KarthikSubbarao,2023-02-11T00:31:11Z,Addressed here: https://github.com/redis/redis/pull/11659/commits/767344e7bc16a1828b6570abeee240054feaf05d
1103548540,11659,KarthikSubbarao,2023-02-11T06:55:02Z,I replaced the `CLIENT_CUSTOM_AUTH` client flag with the `isClientModuleAuthInProgress` Macro here - https://github.com/redis/redis/pull/11659/commits/e0500097e976305e654fb1fac53e03251c9da288
1103549790,11659,KarthikSubbarao,2023-02-11T07:01:25Z,I replaced the `CLIENT_CUSTOM_AUTH` client flag with the `isClientModuleAuthInProgress` Macro in this commit - https://github.com/redis/redis/pull/11659/commits/e0500097e976305e654fb1fac53e03251c9da288
1103680508,11659,KarthikSubbarao,2023-02-11T18:56:00Z,"We have two options:

1) Prevent the Module from using other Module Blocking APIs (`RM_BlockClient`, `RM_BlockClientOnKeys`, `RM_BlockClientOnKeyFlags`) by adding a `serverAssert` in these functions to ensure custom module authentication is not in progress.

2) Add `serverAssert` in the `moduleBlockedClientTimedOut` to make sure timeouts do not exist in the case of this module blocked client (since the 3 other blocking APIs should not have been used in module based blocking authentication).

@madolson Which one of the 2 options seems better?

Adding one line of server in each of the other 3 blocking API functions seems like a better approach since it prevents any other incorrect behavior."
1103694766,11659,KarthikSubbarao,2023-02-11T20:42:25Z,Thanks - I am looking into using `CLIENT_PENDING_COMMAND`
1103991779,11659,KarthikSubbarao,2023-02-13T04:42:14Z,"I updated the client flags to have the `CLIENT_PENDING_COMMAND` flag when it is in the middle of blocking custom auth in this commit - https://github.com/redis/redis/pull/11659/commits/e2b9107fba700dec8a09eafc06df39e87b33ea26
With this new commit, the change you highlighted is removed. Thanks.

Regarding reprocessing the client as part of the `moduleHandleBlockedClients` routine, there are a few changes needed to support multiple module based blocking operations in a single command call - It is possible, but will require some changes in this function and the `client` structure to hold the ModuleBlockedClient as this is needed for reply callbacks and free private data callbacks, blocked client counters etc. I will summarize this in a comment below.


"
1103991836,11659,KarthikSubbarao,2023-02-13T04:42:21Z,"I updated the client flags to have the `CLIENT_PENDING_COMMAND` flag when it is in the middle of blocking custom auth in this commit - https://github.com/redis/redis/pull/11659/commits/e2b9107fba700dec8a09eafc06df39e87b33ea26
With this new commit, the change you highlighted is removed. Thanks"
1106417068,11659,madolson,2023-02-14T21:49:42Z,I would prefer the first one. 
1106463208,11659,madolson,2023-02-14T22:54:39Z,"I'm not going to format this, but think about it.
```suggestion
This API registers a callback to execute in addition to normal password based authentication. 
Multiple callbacks can be registered across different modules.
The callbacks are attempted, in the order they were registered, when the AUTH/HELLO (with AUTH field is provided) commands are called. 
The callbacks will be called with a module context along with a username and a password, and are expected to take one of the following actions:
(1) Authenticate - Use the RM_Authenticate* API and return REDISMODULE_AUTH_HANDLED.
This will immediately end the auth chain as successful and add the OK reply.
(2) Deny Authentication - Return REDISMODULE_AUTH_HANDLED without authenticating or blocking the client. 
Optionally, `err` can be set to a custom error message.
This will immediately end the auth chain as unsuccessful and add the ERR reply.
(3) Block a client on authentication - Use the RM_BlockClientOnAuth API and return REDISMODULE_AUTH_HANDLED. 
Here, the client will be blocked until the RM_UnblockClient API is used which will trigger the auth reply callback (provided through the RM_BlockClientOnAuth).
In this reply callback, the Module should authenticate, deny or skip handling authentication.
(4) Skip handling Authentication - Return REDISMODULE_AUTH_NOT_HANDLED without blocking the
client. This will allow the engine to attempt the next custom auth callback.
If none of the callbacks authenticate or deny auth, then password based auth is attempted and will authenticate or add failure logs and reply to the clients accordingly.

Note: If a client is disconnected while it was in the middle of blocking custom auth, that
occurrence of the AUTH or HELLO command will not be tracked in the INFO command stats. */
```

I also think we should include a blocking example."
1106475471,11659,madolson,2023-02-14T23:15:44Z,"We probably want a better error message than this? Since it's not actually a blocking module command, it's blocking auth."
1110401445,11659,KarthikSubbarao,2023-02-17T21:53:29Z,"In this commit (https://github.com/redis/redis/pull/11659/commits/83d7d3c95fb9d2caaab946b82040f310eebcb23f) - we are now preventing Modules from using other Module Blocking APIs (RM_BlockClient, RM_BlockClientOnKeys, RM_BlockClientOnKeyFlags) when custom auth is ongoing by replying with an `ERR` and setting the `module_blocked_handle` to NULL. Modules can then use RM_UnblockClient to clean up.

The highlighted code is removed now"
1113607932,11659,madolson,2023-02-21T21:54:36Z,I'm trying to remember the issue. I thought that on some systems it was still throwing the warning because sds isn't a valid string. I think (char *) is the most consistent.
1113608530,11659,madolson,2023-02-21T21:55:26Z,These error codes are now not set.
1113609874,11659,madolson,2023-02-21T21:57:10Z,"```suggestion
                                               void (*free_privdata)(RedisModuleCtx*,void*)) {
```"
1113613698,11659,madolson,2023-02-21T22:01:58Z,"We should consider making this a robj, so that the module can dynamically generate a response instead of just having to reply with a static object."
1113616505,11659,madolson,2023-02-21T22:05:49Z,"```suggestion
/* Helper function to handle a reprocessed unblocked auth client.
```

I still think generally the documentation is confusing because of the reference to ""ongoing custom auth"". I'm not clear why we aren't saying ""blocked on auth"" in all those cases."
1113617668,11659,madolson,2023-02-21T22:07:26Z,"```suggestion
    int result = attemptBlockedAuthReplyCallback(c, username, password, err);
    if (result != REDISMODULE_AUTH_HANDLED) {
        result = attemptNextCustomAuthCb(c, username, password, err);
    }
    
```"
1113619044,11659,madolson,2023-02-21T22:09:13Z,"My understanding is that this is being pushed back through the normal command flow, won't this be removed at the end anyways?"
1113621164,11659,madolson,2023-02-21T22:11:59Z,"Document what this state means. either that, or make checkModuleAuthentication a ternary return code that includes this case.

Alternatively, maybe rename this state c->flags & CLIENT_BLOCKED_ON_MODULE_AUTH, which is very clear what the state is."
1113653561,11659,madolson,2023-02-21T22:54:09Z,"I think this should probably return an enum with the different possible states (AUTH_OK, AUTH_ERR, AUTH_NOT_HANDLED, AUTH_BLOCKED), instead of having the calling sites have to infer everything. This documentation block is not immediately super clear, I think the return codes would make it a lot more readable."
1113654801,11659,madolson,2023-02-21T22:56:09Z,"```suggestion
    zfree(c->module_blocked_client);
```
zfree() internally does a null check. "
1113672075,11659,KarthikSubbarao,2023-02-21T23:26:04Z,"Yes, thanks. I removed it here: https://github.com/redis/redis/pull/11659/commits/dd9b126d877ba6a4e57861381b1b993b11cd58ec"
1113675451,11659,KarthikSubbarao,2023-02-21T23:32:29Z,Thanks - I removed the null check here: https://github.com/redis/redis/pull/11659/commits/2e5c117eafed8fcf20ddad649fbaf3bbdfd3edbc
1113676913,11659,KarthikSubbarao,2023-02-21T23:35:22Z,I committed the suggestion above
1113683811,11659,KarthikSubbarao,2023-02-21T23:48:35Z,I refactored this in this commit: https://github.com/redis/redis/pull/11659/commits/e0bce717e3b0682499a334696e2e8d742950944a
1113693175,11659,madolson,2023-02-22T00:06:48Z,Need to clarify this is potentially a breaking command.
1113694701,11659,madolson,2023-02-22T00:09:15Z,"Not required, but you can make a lot of these one shots.
```suggestion
        assert_error {*WRONGPASS*} {r AUTH foo pwd}
```"
1113695024,11659,KarthikSubbarao,2023-02-22T00:09:50Z,"This error message is automatically added from the engine from existing code in the `moduleBlockClient` function if we try blocking a client (in the middle of LUA or MULTI) from a Module.
```
    if (islua || ismulti) {
        c->bstate.module_blocked_handle = NULL;
        addReplyError(c, islua ?
            ""Blocking module command called from Lua script"" :
            ""Blocking module command called from transaction"");
    }
```

I could add conditional logic here to say something like,  ""Blocking auth command invoked from a transaction"" - if the client is in the middle of module authentication. 

But, I don't think we should be expecting clients to see this error message because the Modules should avoid calling `RM_BlockClient*` APIs since they have the ability to detect if the client is in the middle of LUA or MULTI. Because of this, I thought we can just reuse the same / existing error message"
1113707791,11659,madolson,2023-02-22T00:35:38Z,"Thinking about this more, should we allow this? If a module fails to load, it will also fail to unload since it's registered auth callbacks which can fail unload. Maybe we should just think this through more."
1113709681,11659,madolson,2023-02-22T00:39:47Z,"It might be easier to add the top of this function do:
```
r acl setuser nopwd on ~* &* +@all
r acl setuser pwd >defaultpwd on ~* &* +@all
r acl setuser off off ~* &* +@all
```

Since users are retained in between tests. Makes tests a bit easier to read"
1113710116,11659,KarthikSubbarao,2023-02-22T00:40:30Z,"ERRNO codes are set through inner function calls in `ACLCheckUserCredentials`.
``` 
moduleAuthentication  -> passwordBasedAuth -> ACLCheckUserCredentials
```

But because this is not directly done inside this (`ACLAuthenticationUser`), I removed it as suggested.
https://github.com/redis/redis/pull/11659/commits/92115fcc1fae2927656885c0e9b0c39ae9b61943"
1113716720,11659,KarthikSubbarao,2023-02-22T00:54:37Z,"From what I see this is needed for a proper clean up.

The `CLIENT_PENDING_COMMAND ` flag is added in `RM_BlockClientOnAuth`, but there are cases where blocking does not go through successfully. 
The one case that I know of is if the API was used in the middle of MULTI/LUA. It is needed for any other case like this where the client does not actually go through the normal blocking / unblocking flow.

It can be avoided by only adding the flag in `RM_BlockClientOnAuth` if the client was successfully blocked.
```
RedisModuleBlockedClient *RM_BlockClientOnAuth(RedisModuleCtx *ctx, RedisModuleCustomAuthCallback reply_callback,
                                               void (*free_privdata)(RedisModuleCtx*,void*)) {
    if (!clientHasModuleAuthInProgress(ctx->client)) {
        addReplyError(ctx->client, ""Module blocking client on auth when not currently undergoing module authentication"");
        return NULL;
    }
    RedisModuleBlockedClient *bc = moduleBlockClient(ctx,NULL,reply_callback,NULL,free_privdata,0, NULL,0,NULL,0);
    if (ctx->client->flags & CLIENT_BLOCKED) {
        ctx->client->flags |= CLIENT_PENDING_COMMAND;
    }
    return bc;
}
```

"
1113721969,11659,KarthikSubbarao,2023-02-22T01:05:25Z,"I made this change here: https://github.com/redis/redis/pull/11659/commits/b7d12ca4ab0138c69c80d6b59e16ab2e66902816
"
1113728101,11659,KarthikSubbarao,2023-02-22T01:18:12Z,"I committed this suggestion, formatted it, and added an example of non blocking module based auth here. https://github.com/redis/redis/pull/11659/commits/541e9cf4f8c9101854d8f18978f8dc357101592a

Keeping the comment open to check whether we should add a blocking example."
1113777668,11659,KarthikSubbarao,2023-02-22T03:01:41Z,I renamed this CLIENT_CUSTOM_AUTH_HAS_RESULT to and also updated the documentation here: https://github.com/redis/redis/pull/11659/commits/19af9e7f4ef3f78d6e83dc433b119a830984ba5a
1113779582,11659,KarthikSubbarao,2023-02-22T03:06:22Z,"All tests use the same RedisUser (it is hardcoded in the Module to check that the user is `foo`) so doing this is tricky. Some tests need to switch to have the same foo user on a different mode (with defaultpwd, no password, disabled etc) - so it is easier to configure this on the individual tests"
1114760979,11659,KarthikSubbarao,2023-02-22T18:16:29Z,I made the change here: https://github.com/redis/redis/pull/11659/commits/cc67b007613e46727ac8533834387e0ce806e543
1115033035,11659,KarthikSubbarao,2023-02-22T22:24:08Z,"I made this change here: https://github.com/redis/redis/pull/11659/commits/594a966ec74bde81c1ea3122a719cf427f589c4b

However the Module should not free the `RedisModuleString` since it is freed by the engine. I specified this in the documentation for the `RM_RegisterCustomAuthCallback` fn"
1115171764,11659,KarthikSubbarao,2023-02-23T01:52:07Z,I made this change here: https://github.com/redis/redis/pull/11659/commits/ea7008becacd6535cb4f70ae4e461786fc1f8b99
1115287855,11659,KarthikSubbarao,2023-02-23T06:42:31Z,"Yes, that is a good point. We can prevent both module load and module unload operations while module based authentication is going on on any client to prevent this from happening."
1115889765,11659,madolson,2023-02-23T15:45:58Z,I was expecting a corresponding change in the module so it actually used the username instead of just continuing to hardcode the username.
1115962406,11659,madolson,2023-02-23T16:38:11Z,"This will not work since the string might get freed in decrRefCount, which will make it unavailable. In the error reply."
1115967214,11659,madolson,2023-02-23T16:41:18Z,"```suggestion
int checkPasswordBasedAuth(client *c, robj *username, robj *password) {
```
"
1115993463,11659,KarthikSubbarao,2023-02-23T17:01:49Z,Fixed here: https://github.com/redis/redis/pull/11659/commits/2ba46195793be3c21c4b365708ec58ee4fb9b113
1116069498,11659,KarthikSubbarao,2023-02-23T18:13:43Z,Fixed here: https://github.com/redis/redis/pull/11659/commits/bb6c2a0dfeec4a3a5b162a046e6533659538939f
1121107469,11659,KarthikSubbarao,2023-03-01T03:54:29Z,"Addressed here: https://github.com/redis/redis/pull/11659/commits/41043bbc94a0fc254a33faf27ee13f2300fb2818

Instead of preventing loading during custom auth, we are just unregistering the custom auth callbacks before calling `moduleUnload`"
1122127056,11659,yossigo,2023-03-01T18:02:32Z,Is there a specific rationale for FIFO and not LIFO ordering? This is somewhat more consistent with how we treat Redis itself - a more recently loaded module has the ability to override those that were loaded earlier.
1122155102,11659,yossigo,2023-03-01T18:32:01Z,"I'm not sure this is going to work in the real world, where there's potentially a never-ending flux of new connections and new clients authenticating.

One solution is to unregister the auth callback immediately or flag it disabled, so clients will drain and iterating module unload will eventually succeed."
1122171535,11659,yossigo,2023-03-01T18:48:19Z,"Did you consider making it possible to pass `privdata` here as well?

The original `RM_BlockClient` also doesn't provide a way to do that until the client is unblocked, but this is suboptimal and has proved to be a limitation in the past."
1122625672,11659,KarthikSubbarao,2023-03-02T05:53:06Z,"From the examples I considered, the only use case of private data is when we unblock the client from a background thread and have some data (like a Auth Result) and want it to be accessed from the context of a reply callback.

I could not think of a situation where the Module provides data on blocking the client (`RM_BlockClient`) and wants to access this later.

Is there an example you had in mind where a Module wants to provide data while when using `RM_BlockClient `? / Is there an example of how this would work?"
1122804189,11659,oranagra,2023-03-02T09:21:23Z,"maybe we can move the string to be returned as output argument by validateClientName, so that we don't need to repeat it?"
1122807067,11659,oranagra,2023-03-02T09:23:38Z,maybe fix the comment to also cover the AUTH_ERR case.
1122847058,11659,oranagra,2023-03-02T09:54:50Z,styling nit pick. no newline between `}` and `else`
1122872630,11659,oranagra,2023-03-02T10:15:52Z,"that look is capable of being huge (possibly 30k clients).
if we need that capability, we'll have to add a list of clients that are mid auth."
1122877119,11659,oranagra,2023-03-02T10:20:04Z,"maybe we can just prevent modules with such a callback registered from being unloaded (like we do for modules with data types).
also, note that currently it is unsafe to even load a module that just registered commands (no data types of callbacks / hooks), see #10177. so module unloading is not really properly supported, and i think we can just give up that effort and forbid it.

p.s. styling thing about `} else`"
1122887341,11659,oranagra,2023-03-02T10:29:16Z,"this variable name seems negated to me.
maybe a better name would be `handle_next_callback`?"
1122890191,11659,oranagra,2023-03-02T10:31:59Z,"btw, i think the code would be nicer with an early `if` and `continue` instead indentation for the main part of the work, and the handling of the skipping at the bottom of the function."
1122899620,11659,oranagra,2023-03-02T10:40:34Z,"how about a case were the module initiated some request to a remote provider and wants to keep the request ID, or the connection on which it issued it?"
1122908163,11659,oranagra,2023-03-02T10:48:19Z,"styling nit pick, no newline between `{` and `else`.
i guess in this case the comment should go into the `else` block."
1122911830,11659,oranagra,2023-03-02T10:51:44Z,"i guess we need to document this change / feature.
first, so that people know they can pass NULL, and secondly, so people who use it will understand it's incompatible with old versions."
1123600782,11659,madolson,2023-03-02T19:21:09Z,"This still doesn't make much sense to me. What exactly are we attaching the private data to? Who is reading it? If we sent it to a remote provider, that background job needs the information. I think it would make more sense if Redis was tracking the request and unblocking it, so it could re-add the private data. "
1123604422,11659,madolson,2023-03-02T19:25:09Z,"I'm generally okay with module unloading being more of a ""testing thing"", and not something we really expect people to use much in production. IIRC, the original motivation of unload was to make it easier to rapidly test functionality, not that is was being used much in production."
1123758972,11659,KarthikSubbarao,2023-03-02T21:52:45Z,Addressed here: https://github.com/redis/redis/pull/11659/commits/457f36047e7817312bac9fc09a8d8ad74547a3f2
1123759383,11659,KarthikSubbarao,2023-03-02T21:53:11Z,I addressed both comments here: https://github.com/redis/redis/pull/11659/commits/426bfb53b0ee4d0b5cc7788158a00726091125ab
1123763824,11659,KarthikSubbarao,2023-03-02T21:56:28Z,I made the change here to switch to LIFO: https://github.com/redis/redis/pull/11659/commits/76e299977091bc734d85d75344323338518e2f64
1123765359,11659,KarthikSubbarao,2023-03-02T21:57:09Z,"Addressed here: https://github.com/redis/redis/pull/11659#:~:text=426bfb5-,Update%20if%20else%20style,-93e594a"
1123855046,11659,KarthikSubbarao,2023-03-02T23:24:22Z,Addressed here: https://github.com/redis/redis/pull/11659/commits/267d260a2a2fd4439286db0c0b0e5c97b08ab5df
1123855628,11659,KarthikSubbarao,2023-03-02T23:25:10Z,Addressed here: https://github.com/redis/redis/pull/11659/commits/3f2c6ba13095dc6c7b0b37fda52023d3b009bf05
1123993530,11659,KarthikSubbarao,2023-03-03T03:33:46Z,I updated the documentation here: https://github.com/redis/redis/pull/11659/commits/e9b0de469ca57b0c10b381c9734d5d6a6c8be0a2
1125084544,11659,KarthikSubbarao,2023-03-03T22:34:36Z,"We talked internally and realized we do not need any special handling of Module Unload for custom module authentication. So, we are removing all new conditional logic added to Module Unload. It will behave exactly the same as it does currently.

If there is any client that is blocked on a Module X (`module->blocked_clients`), then Module unload is prevented for Module X.

This logic exists today in the moduleUnload fn
```
    } else if (module->blocked_clients) {
        *errmsg = ""the module has blocked clients. ""
                  ""Please wait for them to be unblocked and try again"";
        return C_ERR;
    } 
```
If a Module does not have any blocked clients associated with it, we will just unregister all the custom auth contexts belonging to the Module. This should not impact other ongoing clients in the middle of custom authentication.

We can think of this Module auth chain.

Module1.Callback->Module2.Callback->Module3.Callback

If a client is still blocked on Module1.Callback, it is fine is unload Module2 and Module3.
If a client is blocked on Module2.Callback, we cannot unload Module 2, but we can unload Module1 and Module 3

"
1125087562,11659,KarthikSubbarao,2023-03-03T22:36:37Z,"With this (https://github.com/redis/redis/pull/11659#discussion_r1125084544), this loop will be removed"
1125132183,11659,KarthikSubbarao,2023-03-03T23:29:09Z,This is removed in this commit: https://github.com/redis/redis/pull/11659/commits/9f073e1bee09307ae03cac564ee11e5742a3472d
1125132401,11659,KarthikSubbarao,2023-03-03T23:29:32Z,I made the change for the above comment here: https://github.com/redis/redis/pull/11659/commits/9f073e1bee09307ae03cac564ee11e5742a3472d
1125609067,11659,oranagra,2023-03-05T07:02:20Z,"i think we need to document the version from which we started doing that, so module authors know that if they rely on that, their module isn't compatible with older versions.
@yossigo @madolson WDYT?"
1125610465,11659,oranagra,2023-03-05T07:12:29Z,"not sure i understand the question, shouldn't the private data be attached to the blocked connection?
my thinking is that the module needs to associate each request to the remote provide with a specific client connection.
i suppose it'll be possible to track the client ID, but the module may need to create some dictionary mapping client ID to each remote provider ID, so letting it store that in the client can make it easier."
1125613006,11659,KarthikSubbarao,2023-03-05T07:33:26Z,"If we want to attach information to a client from a Module, it seems we could benefit from a more generic solution (Because this is not just related to the Blocking Client on Authentication Module API). 

Each time a Module wants to store information on the Client Context, it can attach it through a separate API and fetch it through another API by Client ID. This can help avoid having a dictionary mapping inside the Module for client ID -> private data. 

This would be useful for both blocking and non blocking scenarios"
1125644488,11659,oranagra,2023-03-05T11:11:07Z,"it could be nice, but if the module needs that for multiple purposes (one for auth, and another for something else), it'll need t manage some struct with all the info it may need for various tasks.
instead, letting the module store an additional data when registering a callback (each call back), seems like a standard thing to do, and could be easier for the module to handle (and quicker to figure out how)"
1127308119,11659,madolson,2023-03-07T03:39:28Z,"I guess I still think I would rather the module be fully explicit here and pass in an object. It seems like that might be more useful for then authentication failure on HELLO, when it really failed on some module callback."
1127308727,11659,madolson,2023-03-07T03:40:48Z,"If we feel strongly about it, I would rather have a mechanism that applies to both module blocking mechanisms like using an API like karthik suggested. I'm still not really convinced in the use case, it's not that hard to store a separate map with a usedID -> requestID mapping. "
1128645130,11659,KarthikSubbarao,2023-03-07T21:59:39Z,I reverted changes to this API here - https://github.com/redis/redis/pull/11659/commits/35e0e6714d93b2dbcc876eb7289a228d15bb133a
1133122633,11659,madolson,2023-03-11T17:19:52Z,"```suggestion
/* Attempt authenticating the user - first through module based custom authentication,
```"
1133124275,11659,madolson,2023-03-11T17:28:33Z,"```suggestion
 * (with AUTH field provided) commands are called.
```"
1133124535,11659,madolson,2023-03-11T17:30:48Z,"```suggestion
 *           const char *user = RedisModule_StringPtrLen(username, NULL);
 *           const char *pwd = RedisModule_StringPtrLen(password, NULL);
```"
1133124634,11659,madolson,2023-03-11T17:31:19Z,"```suggestion
 *       int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {
```
To streamline a bit."
1133125831,11659,madolson,2023-03-11T17:41:31Z,"This is clunky, and kind of awkward since end modules might actually want to log failures for users that don't exist. I'm not sure if we want to add a new API just for ACL errors, that doesn't actually require the user to exist, similar to how we do it internally. Thoughts?"
1133125881,11659,madolson,2023-03-11T17:42:09Z,This reminds me that we should probably have an API for static lifetime strings so we're not constantly creating them for little stuff like this. Maybe I'll go add it to the backlog.
1133134350,11659,KarthikSubbarao,2023-03-11T19:00:30Z,Fixed here: https://github.com/redis/redis/pull/11659/commits/9802cee910eb578834cfb806977f99cadff570d9
1133134374,11659,KarthikSubbarao,2023-03-11T19:00:42Z,Fixed here: https://github.com/redis/redis/pull/11659/commits/9802cee910eb578834cfb806977f99cadff570d9
1133134400,11659,KarthikSubbarao,2023-03-11T19:00:51Z,Fixed here: https://github.com/redis/redis/pull/11659/commits/9802cee910eb578834cfb806977f99cadff570d9
1133134431,11659,KarthikSubbarao,2023-03-11T19:01:04Z,Fixed here: https://github.com/redis/redis/pull/11659/commits/9802cee910eb578834cfb806977f99cadff570d9
1133167738,11659,KarthikSubbarao,2023-03-12T00:51:27Z,"Yes. Right now, during custom auth, if a Module checks the credentials and finds them to be invalid, it still has to create a RedisModuleUser just so that it can use the `RedisModule_ACLAddLogEntry ` API to add a ACL error log entry.

This API requires the RedisModuleUser to be provided, but internally, it only uses this to obtain the username. Instead it could accept the username as a RedisModuleString function parameter.
```
int RM_ACLAddLogEntry(RedisModuleCtx *ctx, RedisModuleUser *user, RedisModuleString *object, RedisModuleACLLogEntryReason reason) {
    int acl_reason;
    switch (reason) {
        case REDISMODULE_ACL_LOG_AUTH: acl_reason = ACL_DENIED_AUTH; break;
        case REDISMODULE_ACL_LOG_KEY: acl_reason = ACL_DENIED_KEY; break;
        case REDISMODULE_ACL_LOG_CHANNEL: acl_reason = ACL_DENIED_CHANNEL; break;
        case REDISMODULE_ACL_LOG_CMD: acl_reason = ACL_DENIED_CMD; break;
        default: return REDISMODULE_ERR;
    }

    addACLLogEntry(ctx->client, acl_reason, ACL_LOG_CTX_MODULE, -1, user->user->name, sdsdup(object->ptr));
    return REDISMODULE_OK;
}
```

But changing this API will be another breaking change. We could update this API (independently from the custom auth change), to make its Module usage easier"
1133196351,11659,oranagra,2023-03-12T06:44:58Z,"we can't break the API, but i suppose we need to add another one.
if we do that, we can consider allowing a NULL `object`."
1133196503,11659,oranagra,2023-03-12T06:46:10Z,"that's a problem since it'll require allocating them on the stack, which would mean that they can't be opaque."
1133330537,11659,madolson,2023-03-12T22:06:36Z,"I'm not sure we're talking about exactly the same thing. I was also just thinking about a way to expose RedisStrings that have a ""shared"" refcount, so they could be allocated at init and used repeatedly without memory allocations. You can technically do the same thing by repeatedly retaining, as well."
1133331207,11659,madolson,2023-03-12T22:10:55Z,"I'm inclined to just leave it as is, it's a bit clunky, but it's not really that much extra inefficiency."
1133332268,11659,madolson,2023-03-12T22:18:53Z,"```suggestion
typedef int (*RedisModuleAuthCallback)(RedisModuleCtx *ctx, RedisModuleString *username, RedisModuleString *password, RedisModuleString **err);
```

Still going to suggest this naming. @oranagra Do you have any thoughts on this, adding ""custom"" to modules seems redundant."
1133549428,11659,oranagra,2023-03-13T07:53:39Z,"i'm not sure i'm an authority on that subject.
to me it feels ok, it's not that the module is custom, here, it's that it's a ""custom auth"", i.e. the module is intervening in another mechanism.
usually modules register commands, and data types, and configs, all of which only affect the module mechanisms (and the module's commands).

so maybe when the module affects redis, auth, file system, compression, network, we can call these custom?

i also don't have a problem with your suggestion to drop the ""custom"" part, i don't think it'll cause any confusion if we remove it."
1135648824,11659,oranagra,2023-03-14T14:32:38Z,note that an API for adding private data for any blocked client is being added in #11568
1136533140,11659,KarthikSubbarao,2023-03-15T04:55:59Z,Added the new API here: https://github.com/redis/redis/pull/11659/commits/4a6c0b0344cea370b3b468a708975162efaaead6
1136576226,11659,KarthikSubbarao,2023-03-15T06:12:32Z,I made the renaming change here: https://github.com/redis/redis/pull/11659/commits/4d576c51b7f531b2a4367590e137133e30589022
1226050284,11659,enjoy-binbin,2023-06-12T03:34:44Z,"i see a crash in the daily test, maybe someone have the clue to fix it:
https://github.com/enjoy-binbin/redis/actions/runs/5237093743/jobs/9455052489
```
2023-06-11T21:50:08.1436060Z *** [err]: Module unload during blocking module auth in tests/unit/moduleapi/moduleauth.tcl
2023-06-11T21:50:08.1437440Z Expected 'I/O error reading reply' to match '*WRONGPASS*' (context: type source line 89 file /Users/runner/work/redis/redis/tests/support/test.tcl cmd {assert_match $pattern $error $detail} proc ::assert_error level 1) 

2023-06-11T21:49:56.3423960Z ### Starting test Module unload during blocking module auth in tests/unit/moduleapi/moduleauth.tcl
2023-06-11T21:49:56.3424530Z 16727:M 11 Jun 2023 21:49:54.696 * Module 'misc' loaded from /Users/runner/work/redis/redis/tests/modules/misc.so
2023-06-11T21:49:56.3424940Z 16727:M 11 Jun 2023 21:49:54.699 - Accepted 127.0.0.1:55367
2023-06-11T21:49:56.3425310Z 16727:M 11 Jun 2023 21:49:54.715 # Error unloading module testacl: the module has blocked clients. Please wait for them to be unblocked and try again
2023-06-11T21:49:56.3425660Z 16727:M 11 Jun 2023 21:49:54.717 * Module moduleauthtwo unloaded
2023-06-11T21:49:56.3426150Z 16727:M 11 Jun 2023 21:49:54.717 * Module misc unloaded
2023-06-11T21:49:56.3426350Z 
2023-06-11T21:49:56.3426370Z 
2023-06-11T21:49:56.3426520Z === REDIS BUG REPORT START: Cut & paste starting from here ===
2023-06-11T21:49:56.3426820Z 16727:M 11 Jun 2023 21:49:55.738 * Module testacl unloaded
2023-06-11T21:49:56.3427110Z 16727:M 11 Jun 2023 21:49:55.738 # Redis 255.255.255 crashed by signal: 11, si_code: 1
2023-06-11T21:49:56.3427390Z 16727:M 11 Jun 2023 21:49:55.738 # Accessing address: 0x800930778
2023-06-11T21:49:56.3427680Z 16727:M 11 Jun 2023 21:49:55.738 # Crashed running the instruction at: 0x800930778
2023-06-11T21:49:56.3427890Z 
2023-06-11T21:49:56.3428160Z ------ STACK TRACE ------
2023-06-11T21:49:56.3428360Z EIP:
2023-06-11T21:49:56.3428540Z 0x800930778 <_fini+0x800558970> at ???
2023-06-11T21:49:56.3428680Z 
2023-06-11T21:49:56.3428750Z Backtrace:
2023-06-11T21:49:56.3428980Z 0x80047158e <pthread_sigmask+0x54e> at /lib/libthr.so.3
2023-06-11T21:49:56.3429270Z 0x800470b3f <pthread_setschedparam+0x82f> at /lib/libthr.so.3
2023-06-11T21:49:56.3429440Z 
2023-06-11T21:49:56.3429620Z ------ REGISTERS ------
2023-06-11T21:49:56.3429830Z 16727:M 11 Jun 2023 21:49:55.740 # 
2023-06-11T21:49:56.3430040Z RAX:0000000000000000 RBX:0000000802400008
2023-06-11T21:49:56.3430260Z RCX:0000000000000000 RDX:0000000000000000
2023-06-11T21:49:56.3430470Z RDI:00000008008ca288 RSI:0000000000000000
2023-06-11T21:49:56.3430700Z RBP:00007fffd97ccfc0 RSP:00007fffd97ccf90
2023-06-11T21:49:56.3430920Z R8 :0000000000000000 R9 :0000000000000000
2023-06-11T21:49:56.3431110Z R10:0000000000000000 R11:0000000000000246
2023-06-11T21:49:56.3431310Z R12:0000000802401160 R13:0000000000000002
2023-06-11T21:49:56.3431500Z R14:0000000800c4e460 R15:0000000800dce913
2023-06-11T21:49:56.3431700Z RIP:0000000800930778 EFL:0000000000010246
2023-06-11T21:49:56.3431900Z CSGSFS:0000000000000043
2023-06-11T21:49:56.3432110Z ===== End of server log (pid 16727) =====
```"
719774353,9572,zuiderkwast,2021-09-30T21:15:49Z,"Do we want to add an assert here?

```suggestion
int expireIfNeeded(redisDb *db, robj *key, int expire_on_replica) {
    assert(!expire_on_replica || server.masterhost == NULL || !server.repl_slave_ro);
```"
724160692,9572,yoav-steinberg,2021-10-07T13:06:05Z,"```suggestion
 * read commands executed on the replica will be able to behave as if
```"
724172800,9572,yoav-steinberg,2021-10-07T13:20:06Z,If this is all `lookupKeyReadWithFlags()` does then why not chuck it and just call `lookupKey()` instead?
724176138,9572,yoav-steinberg,2021-10-07T13:23:49Z,"Is this for preserving the original logic? Are we sure we don't want to fix the code so we do notify and account stats in all cases regardless of if this is a read/write command? Maybe I need some background here.

Also perhaps just
```suggestion
    sortval = lookupKeyReadWithFlags(c->db, c->argv[1], storekey ? LOOKUP_NOSTATS | LOOKUP_NONOTIFY : LOOKUP_NONE);
```
"
724177765,9572,yoav-steinberg,2021-10-07T13:25:39Z,See below comment.
724195215,9572,zuiderkwast,2021-10-07T13:44:31Z,"This is why:

```C
/* Low level key lookup API, not actually called directly from commands
 * implementations that should instead rely on lookupKeyRead(),
 * lookupKeyWrite() and lookupKeyReadWithFlags(). */
robj *lookupKey(redisDb *db, robj *key, int flags)
```"
724198161,9572,zuiderkwast,2021-10-07T13:47:44Z,"Yes, it's for preserving the old logic.

I used the `readflags` variable to make the code more readable (give the flags a name) and to keep the lines shorter. With your change, it's a very long line."
725597141,9572,yoav-steinberg,2021-10-10T08:01:19Z,"> Yes, it's for preserving the old logic.
> 
Can you provide some background explaining the old logic? When do we use `lookupKeyRead` vs `lookupKeyWrite` in the current approach? When should the different flags be used? Or point me to where this has been previously discussed?
"
725638885,9572,oranagra,2021-10-10T13:21:55Z,"maybe we should prepend it with `_`, add `Internal` suffix, or remove that note about low level (i don't mind anyone calling it directly).
however, i don't want to chuck `lookupKeyRead[WithFlags]`, since i don't wanna modify all the lines that call these.
let's keep them as wrapper / convenience method."
725639124,9572,oranagra,2021-10-10T13:23:36Z,LOOKUP_WRITE is not listed.
725639389,9572,oranagra,2021-10-10T13:26:09Z,"i think that the `NOSTATS` and `NONOTIFY` where both innocent bugs.
people added code to lookupKeyReadWithFlags and forgot to update lookupKeyWrite..
i think we should drop these flags, and modify the top comment of the PR (to state the behavior change).

The stats are certainly not a breaking change (just stats).
the key-miss notification change should just be reflected in the release notes."
725639700,9572,oranagra,2021-10-10T13:28:10Z,"again, i think the flags are a bug due to an innocent mistake"
725640823,9572,oranagra,2021-10-10T13:36:37Z,"so this assertion will fire if someone calls lookupKeyWrite in a read command when that command runs on a read-only replica, right?
i'd like to catch these cases, but since we don't have much tests running on a writable replica, i don't think it'll catch them.
instead how about just asserting that `c->cmd->flags` has `CMD_WRITE`? (with a proper comment)
this will crash a lot sooner if we have such a bug."
725641211,9572,oranagra,2021-10-10T13:39:49Z,again i think this was a bug due to an innocent mistake and that we should fix the behavior in all these calls and mention it in the release notes.
725658404,9572,zuiderkwast,2021-10-10T15:43:42Z,"If we want to make it internal, we can just remove the prototype from server.h. In general, think it's good to expose as little as possible to other modules."
725658622,9572,zuiderkwast,2021-10-10T15:45:42Z,"@oranagra So exactly which flags should it be here? LOOKUP_NOSTATS, LOOKUP_NONOTIFY or none?"
725659556,9572,zuiderkwast,2021-10-10T15:52:38Z,"For a cache, you wouldn't want writes to count as cache misses nor hits. I think we'll get complaints if we change this.

The typical use case for a cache is

1. Lookup for read (`GET key`)
2.
    * If it's a hit, use the value
    * otherwise, compute the value and store it (e.g. `SET key value EX 3600`), and use it

If we count cache misses for SET, we'd get two misses in this scenario."
725691266,9572,oranagra,2021-10-10T20:08:48Z,"thing is that we do expose the flags anyway, so i think the other wrappers are just there for either convenience or in order to avoid messing up existing lines.
i don't mind too much either way... "
725691525,9572,oranagra,2021-10-10T20:10:46Z,"i think none, i think it could be a plain lookupKeyRead.
i.e. in the past it was lookupKeyWrite because of that mess we clean up (or something that we're still missing).
but i'm quite sure the part about stats and key-miss was unintended, so if we fix both we're left with a plain LookupKeyRead."
725692175,9572,oranagra,2021-10-10T20:15:58Z,"ok, that's a good point, but:
first, in that case the source key of SUNIONSTORE we do want to count it as a miss, right?
I'd argue that for INCR we want that too.

you have a good point about SET, but then i'd say: great, so let's add separate stats, and even notification about write-misses.
if we do that, we can simplify things and consider INCR a write-miss."
725927072,9572,zuiderkwast,2021-10-11T09:03:07Z,"For SUNIONSTORE and friends, sure, let's make those plain lookupKeyReads. I'll go ahead and do that.

So, just to be clear, do we re-purpose our current hits/misses to be read stats, so we don't break legacy too much, and then we can add write hits/misses later? Is that the plan?

Out of curiosity I looked up Memcached (the main inspiration for Redis as a cache?). They have separate stats for each command. There's only a handful commands, but still: `delete_hits`, `delete_misses`, `incr_hits`, `incr_misses`, ... (I couldn't find it in the docs but here are the test cases: https://github.com/memcached/memcached/blob/master/t/stats.t#L70)"
725964657,9572,zuiderkwast,2021-10-11T09:50:46Z,"Well, I don't think lookupKeyRead should be used with the WRITE flag... I'll move all this to the lookupKey top comment."
725982889,9572,oranagra,2021-10-11T10:15:52Z,"yes, let's have separate read and write hit/misses.
i'm on the fence about renaming the old `keyspace_hits` info field to `keyspace_hits_reads` or keep it as is.
let's start with the backwards compatible approach and see what feedback we get from the rest of the team.

regarding the per-command hits, i'm not sure what it would be used for, i don't think we should get into that in this PR anyway."
726221249,9572,zuiderkwast,2021-10-11T15:30:39Z,"I tried adding an assert and it catches some stuff already:

* Current command can be EXEC, DEBUG LOADAOF, EVAL or EVALSHA, which don't have the CMD_WRITE flag. It works if we check for these too (four more lines), or we just check for the CMD_READONLY flag instead. I did the latter.

* lookupKeyWrite is called from handleClientsBlockedOnKeys. Here, we don't know if the key is blocked by a read or a write command. XREAD is readonly for example, so if that's called on a replica, we have a problem. I'm changing this to lookupKeyRead.

* PFCOUNT does lookupKeyWrite, but it's a readonly command. I'm changing it to lookupKeyRead."
726238666,9572,zuiderkwast,2021-10-11T15:44:46Z,I've added TODO comments for write stats in lookupKey.
726278607,9572,zuiderkwast,2021-10-11T16:15:13Z,"Considering I had to fix some test modules which marked themselves as ""readonly"" when they were not, we may break some other modules with this PR. Something to highlight for the release notes."
726280610,9572,oranagra,2021-10-11T16:16:15Z,"> Current command can be EXEC, DEBUG LOADAOF, EVAL or EVALSHA, which don't have the CMD_WRITE flag. It works if we check for these too (four more lines), or we just check for the CMD_READONLY flag instead. I did the latter.

did you use `c->cmd` or `c->last_cmd`?
i don't mind using the READONLY flag, but in theory commands that access the keyspace, should have one or the other, not both or none.
the commands that'll have none are the ones that you mentioned, as well as PING / CLIENT etc, i.e. not touching the keyspace, so i think we better resolve this than switch to the other flag. 

> lookupKeyWrite is called from handleClientsBlockedOnKeys. Here, we don't know if the key is blocked by a read or a write command. XREAD is readonly for example, so if that's called on a replica, we have a problem. I'm changing this to lookupKeyRead.

I'd like to resolve this too (i.e. i want XREAD to use read, and BLPOP to use write).
maybe we can somehow check which clients are waiting for that key, and look at `c->last_cmd` and decide which lookup to use according to the right flag? i.e. if at least one is a write, we'll use write?

> PFCOUNT does lookupKeyWrite, but it's a readonly command. I'm changing it to lookupKeyRead.

PFCOUNT is an odd command, it's marked as read-only but it does modify the key and replicates itself.
i'm not yet sure what to do, but let's think of the consequences and not dismiss that just yet."
726292672,9572,zuiderkwast,2021-10-11T16:22:26Z,"I used `c->cmd`. What's the difference?

For the blocking commands, we can use lookupKeyRead with nostats flags to check if the key exists check its type, and delegate to the handler per type. Then, there can be another lookupKey depending on command. OK?"
726330263,9572,oranagra,2021-10-11T16:41:21Z,"> Considering I had to fix some test modules which marked themselves as ""readonly"" when they were not, we may break some other modules with this PR. Something to highlight for the release notes.

that may mean that we can't afford to add that assertion. we need to be ABI compatible with old modules. maybe exclude module commands from that assertion?"
726345898,9572,oranagra,2021-10-11T16:49:47Z,"> I used c->cmd. What's the difference?

IIRC `c->cmd` will change inside EXEC to point to the actual command that's running, and `last_cmd` will remain pointing to EXEC.
`realcmd` (in `call`) will be like `c->cmd` but is not modified when the command gets re-written (like GEOADD being redirected to ZADD).

i think `c->cmd` should have worked correctly for you, please check again.

> For the blocking commands, we can use lookupKeyRead with nostats flags to check if the key exists check its type, and delegate to the handler per type. Then, there can be another lookupKey depending on command. OK?

i don't like to do double lookup (efficiency).. maybe we should add another method for just adding stats and call it in these blocked commands processing?"
726603534,9572,zuiderkwast,2021-10-11T22:12:57Z,"OK, thx. So, I can confirm that during exec, `server.current_client->cmd` is the queued command, but when handleClientsBlockedOnKeys is called afterwards, `server.current_client->cmd` is exec.

Although the command function (e.g. blockingGenericZpopCommand) is passed a client, lookupKey and expireIfNeeded aren't. They only have access to `server.current_client`, which is not the same client in this case. A test case which crashes is `""MULTI/EXEC is isolated from the point of view of $pop""` in unit/zset.tcl.

For eval, the situation is very similar to exec: The current client's cmd is set to eval while the unblocked client is running the BLPOP command (or similar).

One idea is to set `server.current_client` to the client which is being served (running ZPOPMIN, BLMOVE, etc.) so that the assert in expireIfNeeded works, and change it back to the old current_client (the one which triggered the unblocking using exec or eval) afterwards. It feels like a hack though.

For debug loadaof, similarily, maybe it's possible to temporarily set `server.current_client` to the fake client which executes commands from the AOF file.

Setting `current_client` seem like a hack, right? Passing the client around to lookupKey and expireIfNeeded might be a better idea but it's a lot of work to do it everywhere. Another option is to just scrap the assert..."
726797070,9572,yoav-steinberg,2021-10-12T06:25:46Z,Maybe we should assert here that `LOOKUP_WRITE` is off?
726800402,9572,oranagra,2021-10-12T06:32:02Z,"> OK, thx. So, I can confirm that during exec, server.current_client->cmd is the queued command, but when handleClientsBlockedOnKeys is called afterwards, server.current_client->cmd is exec.

ok, i didn't realize that we're discussing blocked clients here too... but then i don't understand how this is related to exec (blocking commands aren't working in a transaction.

> Although the command function (e.g. blockingGenericZpopCommand) is passed a client, lookupKey and expireIfNeeded aren't. They only have access to server.current_client, which is not the same client in this case. A test case which crashes is ""MULTI/EXEC is isolated from the point of view of $pop"" in unit/zset.tcl.

correct me if i'm wrong, but it's not just the fact the current_client is not set, and the client is not passed to lookupKey. the problem is that the lookupKey is done before looping on the list of clients that are blocked on that key (so it's one lookup possibly for serving many clients and many different commands). in that case the only way out IMHO is to tell lookupKey not to record stats, and instead have the individual blocked command handlers update the stats later.

> One idea is to set server.current_client to the client which is being served (running ZPOPMIN, BLMOVE, etc.) so that the assert in expireIfNeeded works, and change it back to the old current_client (the one which triggered the unblocking using exec or eval) afterwards. It feels like a hack though.

please note that in unstable this is already handled (#9422), i think you should update your branch.

> For debug loadaof, similarily, maybe it's possible to temporarily set server.current_client to the fake client which executes commands from the AOF file.

seems right, please go ahead.

> Setting current_client seem like a hack, right? Passing the client around to lookupKey and expireIfNeeded might be a better idea but it's a lot of work to do it everywhere. Another option is to just scrap the assert...

yes, the use of globals in redis may be a problem some day, but let's not deal with it now.
i think this assert may be very useful, if we write any code that relies on these flags, this assert will give us an indication that we're not introducing bugs."
726818963,9572,oranagra,2021-10-12T07:03:30Z,"let's start a separate discussion on this one, and the implications of doing lookupKeyRead.
First, the main difference here is how it behaves when used in a replica on an expired key, right?
in the past it would have meant that a user could access an expired key successfully.

now after our change, that difference between lookupKeyRead and lookupKeyWrite is gone (both do expiration check), and the main difference is stats and notifications.

The above is true for all the other places we changed between these functions (e.g. SUNIONSTORE), but what's special about this command is that it's a READONLY command, but it **does** modify the value (and can cause some inconsistency between the master and the replica).

But that fact mentioned above is not changed by our PR.
So the question is if anyone sees any other special concern about this command in this PR?"
728303346,9572,zuiderkwast,2021-10-13T17:35:46Z,"I looked up how PFCOUNT works. It is using and updating a cache which is stored in the key, which is also accessible as a string using GET and SET. I can see ~~two~~ three alternatives:

1. If the cache is invalid, compute the pfcount from the HLL but don't update the cache if it's read-only replica (or if writes are forbidden for any other reason, like what?). This might make the HLL a bit slow until the master has propagated an updated pfcount cache to the replica.
2. Remove the readonly flag from PFCOUNT and mark it as a write command instead.
3. Update the cache on read-only replicas anyway. PFCOUNT is not changing the *existence* of a key, which is probably the most important point regarding replication, isn't it?

Is (1) acceptable?"
728306227,9572,zuiderkwast,2021-10-13T17:39:43Z,"If you want, but I don't think anyone will pass that by mistake."
728372793,9572,oranagra,2021-10-13T19:12:20Z,"I don't like [1] since it impacts performance and in a transparent way. i could say that i don't care much about writable replicas, but it'll actually impact the read-only ones (the common case).

I don't like [2] for the same reason, it'll block this command on read-only replicas, and also some ACL use cases.

[3] is what we had till now (the command would have modified the db even on read-only replicas or read-only ACL user on master), so i think we can accept that.

AFAICT the only thing that changes now is it's behavior around volatile keys on replicas (both read-only and writable replicas), and the hits / misses stats / notifications.

with regards to hits / misses, i think it's ok that it'll behave like read-only command (we can say that we're actually fixing a b bug now)

with regards to volatile keys on replica: in the past since it used lookupKeyWrite (and was allowed on read-only replicas), it would have been able to access expired keys on replicas.
and now because of our changes (both using lookupKeyRead and our changes in lookupKey), it'll not be able to access volatile keys.

am i right?

so considering that, i think we can keep your current change, and we need to document the bugfix in the top comment.
i.e. other than fixing the fact that writable replicas were able to access expired keys, for PFCOUNT this applies also for read-only replicas."
728474754,9572,zuiderkwast,2021-10-13T21:54:02Z,"> but then i don't understand how this is related to exec (blocking commands aren't working in a transaction.

The blocked client (e.g. BLPOP) is not in a transaction. It's another client which unblocks the blocked client by e.g. RPUSH in a transaction (exec) or Lua (eval).

> in unstable this [setting server.current_client] is already handled

Nice! I didn't see that. I will update and then do the same for debug loadaof.

(I was just starting to implement a lookupKeyForClient with an extra client parameter, only for use when the client is not the current client. The old lookup functions would remain and use server.current_client as a default. But I didn't get that far.)"
728477741,9572,zuiderkwast,2021-10-13T21:59:34Z,"OK, sounds good. We'll stick with (3) and I'll see if I can come up with a test case for the bugfix. :-)"
729015050,9572,zuiderkwast,2021-10-14T14:01:31Z,"Done. See updated top comment and commit messages. The assertion now looks like this:

```C
    if (expire_on_replica) {
        client *c = server.in_eval ? server.lua_client : server.current_client;
        serverAssert(!c || !c->cmd || (c->cmd->flags & CMD_WRITE));
    }
```

Now I can see two risks:

1. Modules will break (module write commands without the write flag)
2. This scenario:
    * (client 1) `blpop k`
    * (client 2) `eval 'multi; rpush k 42; exec'` -> when blpop is unblocked, `server.in_eval` is 1 and the lua_client's current command is exec, so the assertion might fail. (I'll need a test case to be sure.)

(2) can be mitigated by just modifying the assert a little, but (1) is intentional. I think (1) needs to be in the release notes. I had to update many test modules and it may very well happen to real modules out there."
729019757,9572,zuiderkwast,2021-10-14T14:06:36Z,"I've added a test case. I've also confirmed that it fails without this fix, so you are right, it was using the value of an expired key."
730375749,9572,oranagra,2021-10-17T08:22:35Z,"I think we have to exempt modules from that assertion.
the new redis release needs to be compatible with old modules, we need to consider the implications of modules using the wrong lookup.

The main difference in REDISMODULE_WRITE, is that RM_OpenKey returns a non-null RedisModuleKey even if the key is not found in redis, in which case `kp->value` will be NULL.
And modules that do that, expect that and could still use RM_ModuleTypeSetValue and RM_ModuleTypeReplaceValue, and unlike redis (e.g. incrDecrCommand) don't attempt to access the robj directly without checks.

So let's try to consider the implications of our change (assuming the assertion is skipped).
We moved the expiration attempt from lookupKeyRead to lookupKey, so it now affects REDISMODULE_WRITE too.
And the difference is only when used on a replica (readonly or writable, since modules could use that on RO commands), when a command is executed from the non-master client.
And the implication would be that both before and after our fix, RM_OpenKey succeeds, however after our fix, any attempt to access the value RM_HashGet will fail (only if the key already expired), and in the past it would have succeeded.
Either way, with or without our fix, RM_ModuleTypeSetValue and RM_ModuleTypeReplaceValue will succeed and do the same thing.

anything i'm missing?

regarding BLPOP, can you please describe the flow in the code itself?
AFAICT `handleClientsBlockedOnKeys` is only called by `processCommand` so would only be called when EVAL returns."
730378392,9572,oranagra,2021-10-17T08:43:33Z,"maybe the comment needs some representation next to where we do lookupKeyRead?
(we do have some comment in the command table explaining the flags).

in any case, i'd like to extend it to state the considerations and implications that we now discussed.
i.e. the command is flagged as read-only, and uses lookupKeyRead (which will not let it access an already expired value), but it does mark things to be propagated (as explained in the current comment)."
730378779,9572,oranagra,2021-10-17T08:46:48Z,don't you need to do that on the master?
730378928,9572,oranagra,2021-10-17T08:48:05Z,"same about the writes, don't we need to do them on the master (and then `wait_for_ofs_sync` or something)"
730703813,9572,zuiderkwast,2021-10-18T08:49:52Z,"For the purpose of this test case, I think it doesn't matter, but if you want a less contrived example, I can change it to what you're saying."
730706131,9572,zuiderkwast,2021-10-18T08:52:36Z,"Depends on what you mean by ""need"". I think it works like this (but maybe active expire doesn't run on replicas anyway so this does nothing), but a more realistic scenario is to write on the master, sure."
731028203,9572,oranagra,2021-10-18T15:07:30Z,"yes, replicas normally don't do active expire anyway, but indeed there's that odd mechanism for `slaveKeysWithExpire`. i don't care to test that crap.

i rather test a more realistic scenario.

let's move the writes to the master, disable the active expire there, and wait for sync."
733962758,9572,zuiderkwast,2021-10-21T18:54:09Z,Done. Please have a look.
733963140,9572,zuiderkwast,2021-10-21T18:54:45Z,Done.
733963461,9572,zuiderkwast,2021-10-21T18:55:15Z,Done.
733969229,9572,zuiderkwast,2021-10-21T19:03:24Z,"Makes sense. I've added CMD_MODULE to the assert, meaning that all module commands can use lookupKeyWrite. Technically, we don't need the commit adding the write flag to all the test modules ""Fixup: Modules test commands marked as readonly"" 068e7a1 and ""Add WRITE flag to all test module write commands"" 32a7045. Should I revert them?

> regarding BLPOP, can you please describe the flow in the code itself?

I was wrong here. Multi and exec can't be used from within Lua scripts, so this can't happen.

Btw, I'm sorry for the rebase and force-push. It was sort of automatic from my side, since many other projects forbid merge commits. It does make sense if you always make squash commits though. I'll do merge from now on."
735127169,9572,oranagra,2021-10-24T14:30:51Z,"i suppose we should enhance the comment explaining why we exclude modules (so that we don't break old modules).

p.s. for some reason i can't respond to the comment in https://github.com/redis/redis/pull/9572#discussion_r730375749 (please resolve it if all the concerns were addressed).
i don't think you should revert these commit. this is the proper way to use the API, and in some cases people may take code from the tests as an example, so it's a good idea to make it ""correct"".
maybe add a note on the top comment explaining why you did these changes (at least to make it clear that it's just a cleanup, and not directly needed for the changes in the PR)"
735128149,9572,oranagra,2021-10-24T14:37:49Z,"we wanna wait for the key to be logically expired. and both servers are on the same clock, why wouldn't `after 10` be enough?

if we have to wait longer than 10ms, and we understand why we do, i'd suggest to have some `wait_for_condition` loop (which will usually be faster), rather than a constant sleep.
e.g.  we can loop until EXISTS return 0"
735552167,9572,zuiderkwast,2021-10-25T12:32:31Z,"Yeah, I don't know why it failed with `after 10` (clock out of sync?), but I'm adding an `exists` check to the `wait_for_condition` just above."
735577696,9572,zuiderkwast,2021-10-25T13:04:07Z,Done.
735616317,9572,yossigo,2021-10-25T13:46:28Z,"While at it, maybe `LOOKUP_WRITE` should have a more obvious name?"
735643776,9572,zuiderkwast,2021-10-25T14:14:36Z,Any obvious suggestion?
735648504,9572,zuiderkwast,2021-10-25T14:19:12Z,"Maybe LOOKUP_DELETE_EXPIRED_EVEN_IN_REPLICAS?

The idea behind the name LOOKUP_WRITE is to indicates the *purpose* of the lookup, that it's a lookup for writing. The *effect* of it (to delete expired keys even in replicas) is to make sure that replicas stay consistent with master as long as they don't do writes, but it could potentially involve other things and the caller doesn't necessarily need to care about that."
735649988,9572,zuiderkwast,2021-10-25T14:20:10Z,@yossigo Thanks for reviewing btw!
735662563,9572,yossigo,2021-10-25T14:32:12Z,"@zuiderkwast Yes I realize that now, after seeing how it's used everywhere. Makes sense!
Oh, and I should say - thank you for sorting the mess! 😄 "
736339929,9572,oranagra,2021-10-26T09:33:09Z,"maybe just to make the condition above clear, the failure message should be ""keys didn't replicate or didn't expire"" or alike."
736399046,9572,zuiderkwast,2021-10-26T10:47:27Z,Done
741749489,9572,soloestoy,2021-11-03T09:36:53Z,"here the flag with `LOOKUP_WRITE` would cause delete the expired key on replica, but that may lead data inconsistency if the replication delayed, for example:

we have a key (e.g. `hash`) with ttl 10, and apply a `hset` command on master, and then before ttl 10 we apply `persist` command on it. but replica receives the `hset` and `persist` after ttl 10, the `lookupKeyWrite` would delete the key."
741753516,9572,soloestoy,2021-11-03T09:42:11Z,"i don't like the `LOOKUP_WRITE` and `LOOKUP_NOEXPIRE` flag,

the `LOOKUP_NOEXPIRE` flag is only used in `swapdb`, but I think `scanDatabaseForReadyLists` has no reason don't delete expired keys in this case.

the  `LOOKUP_WRITE` is designed for writable-replica which is a mess that doesn't deserve any forward development"
741768375,9572,oranagra,2021-11-03T09:56:36Z,"one of the purposes of this PR is to solve problems in writable replicas, they're an odd configuration but i think for now we need to keep supporting them (unlike slaveKeysWithExpire which i care even less for).

i.e. the other purpose of this PR is a cleanup for code that makes more sense.

note that LOOKUP_WRITE may have other purposes soon, like updating write hit / miss statistics maybe.

I don't recall why we use LOOKUP_NOEXPIRE in SWAPDB, maybe it's just to prevent unintended changes of the refactoring? @zuiderkwast do you recall?
but anyway, i can think of one reason not to expire in this case: it can cause a flood of expiration that will freeze the server and cause replicas to drop."
741775180,9572,oranagra,2021-11-03T10:04:41Z,"it was not supposed to do that. either you found an unintended bug, or we're missing something.

LOOKUP_WRITE was only supposed to prevent expiration on a replica when the command did not originate from the master client. i.e. since it must be a write command, it's only about writable-replicas.

but indeed when looking at the current code i fail to find the place where we make that decision (i.e. look at `server.current_client == server.master` or check the `CLIENT_MASTER` flag.

@zuiderkwast are we missing something? if we don't, then i wonder how come the tests didn't find that bug (i'm quite sure we have a test for it)"
741778216,9572,zuiderkwast,2021-11-03T10:07:16Z,"That's right, NOEXPIRE is just to keep the exact same behaviour as before when refactoring. (It's used in a function that calls lookupKey directly, which didn't do expire before. Expire was done in lookupKeyRead and lookupKeyWrite only.)

I'm trying now to delete the NOEXPIRE flag and run the tests locally. It seems to pass, but I'll run the cluster and module tests too. If it works, we can get rid of this flag."
741836948,9572,zuiderkwast,2021-11-03T11:13:18Z,"Do you mean when lookupKeyWrite is called in during replication? I didn't think about this scenario. I don't know if we have tests for it. I guess it's a race condition which is hard to catch(?).

I think what has changed is this line in expireIfNeeded:

```diff
-    if (server.masterhost != NULL) return 1;
+    if (server.masterhost != NULL && !expire_on_replica) return 1;
```

Before, replicas never deleted the expired key here and now they do. Indeed I think we need to add a check for `server.current_client == server.master` or check the `CLIENT_MASTER` flag."
741858361,9572,zuiderkwast,2021-11-03T11:46:22Z,"I have deleted NOEXPIRE.

The WRITE flag is for writable replicas, it's true. I also don't like them, but if we can't deprecate them, it's better to make them a little more consistent. Also, maybe you can accept oran's explanation:

> note that LOOKUP_WRITE may have other purposes soon, like updating write hit / miss statistics maybe."
741872266,9572,oranagra,2021-11-03T12:07:07Z,"> Do you mean when lookupKeyWrite is called in during replication?

It's a trivial case of INCR being executed on a volatile key on the master, and how the replica will handle that command when is propagated to it.

the old code had this check `server.current_client != server.master` which prevented the key from being evicted and let the lookup succeed despite being already expired. i didn't notice we lost it, but we must re-add it.

The test for it is not too complicated:
1. disable active expire on the master
2. create a volatile key with the value of 1 and expiration of 1 second
3. suspend the replica using SIGSTOP
4. run INCR on the master.
5. wait 1 second.
6. unpause the replica
7. wait for replication offset to sync
8. use DEBUG OBJECT to check that the key exists, and maybe extend it so we can also make sure it's still volatile.
9. or, instead, promote the replica and use TTL and GET to see that it was incremented (value is 2) and volatile."
741902422,9572,oranagra,2021-11-03T12:48:34Z,"i have some concern about this change, i'm not certain this behavior of not doing expiration on SWAPDB wasn't on purpose.
In theory, if we would have scanned a lot of keys, we can cause a freeze to the server and blow up the replication buffers with DELs.. expiration efforts must be gradual and not all in one go.
In practice we only scan keys that some clients are being blocked on, so maybe it's not that many keys.
also possibly when we return from the SWAPDB command, we'll lookup these keys again and expire them anyway, is that right?
@zuiderkwast can you look into that, and maybe also into the blame log and history of SWAPDB and scanDatabaseForReadyLists?"
741902783,9572,oranagra,2021-11-03T12:49:03Z,"@zuiderkwast i see you fixed it, but please add that test too (and make sure it fails on the buggy version).
thanks."
742008457,9572,zuiderkwast,2021-11-03T14:39:33Z,"Yes, a useless lookup of the expire dict is the potentially costly part here.

We can preserve the old behaviour here if we just lookup the dict manually, without calling lookupKey. With all those flags, the only thing we actually want to do here is look up the dict anyway. I can do that.

Btw, my plan is to update the 'hasexpire' PR when this one is merged."
742034088,9572,oranagra,2021-11-03T15:02:59Z,"> Yes, a useless lookup of the expire dict is the potentially costly part here.

you mean that if the key already expired, then this event loop cycle will release it (possibly slow operation for a complex key), and propagate DEL anyway.. i.e. it'll happen in scanDatabaseForReadyLists instead of handleClientsBlockedOnKeys, right?

let's add a test for that if there isn't already one.
i.e. make sure we have a test for `SWAPDB that awakes a blocked client`, and also write one for `SWAPDB that awakes blocked client, but the key already expired`.

> We can preserve the old behaviour here if we just lookup the dict manually, without calling lookupKey. With all those flags, the only thing we actually want to do here is look up the dict anyway. I can do that.

i suppose that's a good option if we anyway try to avoid all the checks and side-effects of lookupKey.
i.e. Technically this function isn't done on behalf of a command, it's not really looking up the key but rather checks what's in the dict. so i vote for it.

> Btw, my plan is to update the 'hasexpire' PR when this one is merged.

sure, that's the next step (it's the one that has awaken this PR)"
742741306,9572,zuiderkwast,2021-11-04T11:15:50Z,Test added as suggested. I have confirmed that it fails when I comment out the line `if (server.current_client == server.master) return 0;` in expireIfNeeded.
742742969,9572,zuiderkwast,2021-11-04T11:18:27Z,SWAPDB tests added. Using dictFind instead of lookupKey in scanDatabaseForReadyLists. I think it's ready to merge unless there is anything else.
742877436,9572,oranagra,2021-11-04T14:15:47Z,we now have wait_for_ofs_sync
742880188,9572,oranagra,2021-11-04T14:18:38Z,let's add a comment here stating that this makes sure the INCR arrives to the replica after the key is logically expired
742881365,9572,oranagra,2021-11-04T14:19:52Z,"i would be nice to add another `wait_for_ofs_sync` after this SET.
in the past we propagated EXPIRE rather than EXPIREAT, and in that case the test should have failed to achieve it's purpose."
742884338,9572,oranagra,2021-11-04T14:22:42Z,"i think the propagation of INCR (with the bug) would still mean the key exists.
i.e. it would be deleted as expired, and it would create a new non-volatile key with the value of 1.
so what i think we should do to verify is disable active expiry on the replica too.
then promote it, and use TTL and GET to check the value. "
742887766,9572,oranagra,2021-11-04T14:26:03Z,"that select is excessive (for this test), and needed to just to restore the client state for the next state, let's move it to the end and add a comment?

also, maybe it'll be nice to explicitly select 9 on the rd"
742890321,9572,oranagra,2021-11-04T14:28:35Z,"we're relying on the timeout.. i don't like it that much.
maybe instead add an assertion to confirm the client is still blocked and then CLIENT UNBLOCK it?"
742938127,9572,zuiderkwast,2021-11-04T15:16:03Z,"The line above checks that `exists k` returns 0, which means that the key is expired (which implies that it is (or was) volatile). Without the fix in expireIfNeeded, exists returns 1 here."
742939026,9572,zuiderkwast,2021-11-04T15:16:55Z,Good point. I'll use that instead.
742949269,9572,oranagra,2021-11-04T15:27:28Z,"why would it..
i think the sequence looks like this:
1. the key has a value of 1, and is volatile
2. INCR arrives, it detects the key is expired and deletes it.
3. then INCR creates a new (non-volatile) key with a value of 1
4. at the end we have a non-volatile key with 1, rather than a volatile key with 2."
743007415,9572,zuiderkwast,2021-11-04T16:28:33Z,"... because if we have a non-volatile key at the end, the line `assert_equal 0 [$slave exists k]` would fail."
743010207,9572,zuiderkwast,2021-11-04T16:31:36Z,"Without the check `server.current_client == server.master` in expireIfNeeded, the sequence is like you described and but then the assert fails because `exists k` returns `1`."
743010923,9572,zuiderkwast,2021-11-04T16:32:27Z,Done
743082940,9572,oranagra,2021-11-04T18:00:37Z,"Ohh, OK, not because the key is volatile vs non-volatile, but because we know that if it's volatile, it's also already logically expired. 
And because active expiry is disabled and there are no other activity on the master so it shouldn't send a DEL, so we can trust that. "
743165806,9572,zuiderkwast,2021-11-04T20:06:31Z,"Exactly. Focus on ""expired"", not on ""volatile"". I avoided the word ""exists"" in the comments because logically it doesn't exist. But it's still there, in the dict in the replica."
754045250,9572,soloestoy,2021-11-22T08:34:55Z,"only one suggestion: remove the `expire_on_replica` argument, just check if this is a writable-replica in `expireIfNeeded` by itself, do not let the writable-replica issue pollute the `lookupKeyRead/Write` function."
754068088,9572,zuiderkwast,2021-11-22T09:06:16Z,"I have tried, but if we remove this parameter, we instead need an `is_write` parameter. Otherwise we can't easily fulfil the request to keep the expired key on lookup for read."
756096913,9572,oranagra,2021-11-24T13:53:24Z,"i think this looks better.
i also dislike indenting to a specific offset since it'll need to get adjusted if any other argument is added or the function renamed. so if i had to indent it, i would just indent it by 4
```suggestion
            robj *o = lookupKeyReadWithFlags(rl->db, rl->key, (LOOKUP_NONOTIFY | LOOKUP_NOSTATS));
```"
756102012,9572,oranagra,2021-11-24T13:59:15Z,"I also feel a bit uncomfortable with the name of this flag.
It doesn't really indicate when it is set (for that it should be called `from_write_command`).
And it doesn't really indicate what it should trigger (for that maybe we need to call it `delete_key`, and maybe move the checks about the server being a replica of the client being a master to the caller).

maybe a better name could be `force_deletion`, or `skip_replica_client_check` to indicate better what it does.
what do you think about these suggestions?"
756148389,9572,zuiderkwast,2021-11-24T14:48:22Z,"Sure. I like when lines are not more than 80 so they fit in a half-screen wide editor window on laptop, but sure. Without parentheses even better. (I added them just to make automatic indentation work.)"
756173122,9572,oranagra,2021-11-24T15:14:53Z,"i guess it depends on your laptop 8-).
what about screen split to 3? or a 10"" laptop?

anyway, jokes aside we don't have a strict limit, each piece should be formatted so that it (and the code surrounding it) is readable.

in this case i think the line wrap just make is less readable, but i won't insist on it."
756187277,9572,zuiderkwast,2021-11-24T15:29:49Z,"I'll rename it to `force_delete_expired` and move the assert to `lookupKey()`. I agree, the meaning of the parameter is more clear that way."
756198695,9572,oranagra,2021-11-24T15:40:00Z,"i think parts of that comment you delete are still wanted (good description of the scenario of a DEL that didn't yet arrive).
maybe you can revive that whole block and add the part describing force_delete_expired just below it?"
756212541,9572,zuiderkwast,2021-11-24T15:52:25Z,"In this case, a line wrap makes it less readable, except if you get a soft line wrap in a different place because of your old school terminal width. ;-)

I know there's no strict limit, but I was mislead by how it looks for me.

80x24 is a very old standard for terminals, because it is the same size as two punch cards (80x12). It's the most common according to [this report from 1975](http://bitsavers.org/pdf/ventureDevelCorp/Alphanumeric_and_Graphic_CRT_Terminals_1975-1980_Nov1975.pdf).

![image](https://user-images.githubusercontent.com/273886/143270895-c1142cd8-a63a-4f9a-9233-85630664bd8b.png)"
756222798,9572,zuiderkwast,2021-11-24T16:02:26Z,Done.
756617082,9572,oranagra,2021-11-25T07:04:22Z,"LOL that's old.

maybe the difference between us is that i don't use word wrapping. if a line is too long (in case i'm using a side by side diff on a small computer), i just let it go out of view, and scroll left if i really need to.
the majority of times, when reading the code i need to understand what the code does (which functions it calls), and usually don't care much about the details near the end of the line, so i rather get more lines in my view, and better looking indentation (no word wrapping), than see the entire line.

plus, i usually use very large monitors (40"" when docked, and 17"" when not)
although i also do much of my work on my ""Cosmo Communicator"" android phone (6"")"
756627014,9572,zuiderkwast,2021-11-25T07:25:17Z,"Yes, turning off line wrapping also works, but it's annoying when you type if it scrolls automatically, it's visually not so nice. In some projects it's just not possible to use a small editor window, but with Redis it works well because most of the code is carefully wrapped at 80.

If you're interested, Nowdays, I use a 15"" monitor (never docked) and Emacs with fairly large font size. I rarely read code on the phone. (In a previous project I needed two large monitors for remote desktop environments, test frameworks which opened up 10 small terminals to visualize stuff, large diagrams, etc. But not now.)

Can you merge this one now so we can forget about writable replicas? :-)"
765473296,9572,enjoy-binbin,2021-12-09T06:47:39Z,"https://github.com/enjoy-binbin/redis/runs/4440834343?check_suite_focus=true#step:4:5814

the test failed once on my CI (FreeBSD), looks like was a timing issue. 
I took a look, here are my thoughts: 
- the key expired before `INCR` was executed, because the execution time of `wait_for_ofs_sync` exceeded one second. (or maybe related the KILL).

I didn't think of a good way:
1. maybe we can use $slave debug sleep ? (But there are also such problems)
2. add a retry

> Check that k is locigally expired but is present in the replica.

also there was a typo (locigally)"
765654044,9572,zuiderkwast,2021-12-09T10:28:40Z,"Good catch! Thanks for looking into it.

I don't understand how debug sleep can help...?

Add a retry, yes I guess it can work. We can double the expire time at every retry, so starting with 1 second, then 2, 4, 8 etc. We can add a check before the first `wait_for_ofs_sync` that k didn't expire and if it did, we retry. WDYT?"
765675891,9572,enjoy-binbin,2021-12-09T10:55:42Z,"oh i mean that maybe we can use debug sleep to replace the kill

as for retry. The double is a good idea. Maybe we can start from Ms, reduce the running time. 

edit: #11548"
800179373,9572,AviAvni,2022-02-06T13:21:28Z,"this assert assume that opening a key for write can’t be called from a redis command
but in RedisGraph when a SAVE command end we delete the temporary keys we created during the save process
we need to be able to workaround this assertion
this crashes redis in our tests
stack trace example:

```
------ STACK TRACE ------                                                                  
                                                                                           
Backtrace:                                                                                 
0   redis-server                        0x000000010cad474a lookupKey.cold.1 + 26           
1   redis-server                        0x000000010c9f1902 lookupKey + 402                 
2   redis-server                        0x000000010ca6b704 RM_OpenKey + 68                 
3   redisgraph.so                       0x000000010d3391f2 _DeleteGraphMetaKeys + 194      
4   redisgraph.so                       0x000000010d339392 _ClearKeySpaceMetaKeys + 88     
5   redisgraph.so                       0x000000010d339597 _PersistenceEventHandler + 202  
6   redis-server                        0x000000010ca74b93 moduleFireServerEvent + 195     
7   redis-server                        0x000000010ca03fd1 rdbSave + 641                   
8   redis-server                        0x000000010ca08eaa saveCommand + 218               
9   redis-server                        0x000000010c9cddd6 call + 278                      
10  redis-server                        0x000000010c9cef08 processCommand + 2904   
```"
800180150,9572,oranagra,2022-02-06T13:28:24Z,"@zuiderkwast we didn't want to break modules, and assumed that `c->cmd` will be a module command, but with notifications and events, that could be done from other random contexts.

IIRC this assertion was just there in order to help us find native redis commands that are not flagged correctly.
it could have been sufficient to test that we're not on a writable-replica, but we thought that coverage for such a test will be low, and preferred to check our assumption on masters too.

As far as i can tell, our options now are:
1. remove that assert completely (as was argued before, right?)
2. make it run only on writable replicas
2. find another way to exclude modules

please share your thoughts, and remind me what i forgot."
800237704,9572,zuiderkwast,2022-02-06T21:51:30Z,"Just to be sure I understand what's happening: Is the `RM_OpenKey` triggered by something other than a module command, e.g. a keyspace notification or event, which is fired after some real command (SAVE) has executed? or before?

If that's the case, can we set `c->cmd` to NULL before the firing the event? If we do, then this code will not appear to be part of any command, which I think is better than appearing as being run as part of some read-only command.

Another question: Can this ever happen on a readonly replica? If yes, then perhaps we should set `force_delete_expired` to false here if we're on a read-only replica to keep it consistent with its primary, rather than only bypassing the assert.

If we do, then I guess we can drop the assert entirely."
800364704,9572,oranagra,2022-02-07T07:09:13Z,"From what i know of RedisGraph, when this code happens on a replica, should always be in a fork child, but it could still be from within a command.
i.e. when a SYNC command is received and triggers an immediate fork, the fork child process will have `c->cmd` still set on the stack.

What i don't like about nullifying `c->cmd` in the various event dispatches in module.c is that it's very far from the assertion.
i.e. we'll have to backup, nullify, and restore `c->cmd` and add some comments explaining that it's done to avoid an assertion on the other side of town."
800380919,9572,zuiderkwast,2022-02-07T07:41:26Z,"Agree. This assert looks at things far away too...

I think we can remove the assertion and never set `force_delete_expired` on a writable replica:

```C
int force_delete_expired = flags & LOOKUP_WRITE && !(server.masterhost && server.repl_slave_ro);
```"
800383768,9572,oranagra,2022-02-07T07:46:17Z,@zuiderkwast please make a PR.
1921617777,13740,MeirShpilraien,2025-01-19T19:26:54Z,Not sure what SENTINEL flag means but I am pretty sure we do not need it here.
1921618059,13740,MeirShpilraien,2025-01-19T19:29:12Z,"Wonder why we did not do the same trick with `no-monitor` and `no-slowlog`. I believe we should at least be consistent. I you ask me, it is better to check for the internal flag where we check the `CMD_NOSCRIPT` other then explicitly add flags to the command. It should not be a lot of places."
1921618214,13740,MeirShpilraien,2025-01-19T19:30:33Z,Maybe this comment should go to the `C` flag section?
1921618423,13740,MeirShpilraien,2025-01-19T19:32:08Z,No need to free `msg`?
1921618844,13740,MeirShpilraien,2025-01-19T19:34:49Z,"I would say that the user must provide `len`, otherwise how would he know the size of the secret (we do not promise it is a C string right)?
If so maybe we should assert `len != NULL`"
1921619061,13740,MeirShpilraien,2025-01-19T19:36:16Z,Lets make sure this has the exact same format as the unknown command message above.
1921619394,13740,MeirShpilraien,2025-01-19T19:38:40Z,Lets add a comment here as well that module should not expose the internal secret and that this is for testing purposes only.
1921619576,13740,MeirShpilraien,2025-01-19T19:39:47Z,"This function and the one above are almost the same, should we unified them?"
1921619626,13740,MeirShpilraien,2025-01-19T19:40:03Z,Lets use ThreadSafeContext
1921619763,13740,MeirShpilraien,2025-01-19T19:40:32Z,"Same comment as above, lets unified."
1921818286,13740,raz-mon,2025-01-20T05:31:28Z,"It means that the command exists in sentinel mode. Not sure we need it, but took inspiration from the `auth.json` command definition."
1921820504,13740,raz-mon,2025-01-20T05:34:58Z,"We decided to start off with statistics being reported for internal commands, e.g., monitor and slow-log.
Yes it's not a lot of places, I can modify the conditions explicitly, although I think this is cleaner."
1921834109,13740,raz-mon,2025-01-20T05:55:57Z,"No, it is free'd automatically later (registered via `autoMemoryAdd()` in `cleanup`)."
1921843917,13740,raz-mon,2025-01-20T06:11:02Z,"Agree, I'll add an assertion "
1921847504,13740,raz-mon,2025-01-20T06:16:20Z,"It indeed is, verified locally as well."
1921848760,13740,raz-mon,2025-01-20T06:17:59Z,"<img width=""640"" alt=""image"" src=""https://github.com/user-attachments/assets/99696e1d-f16e-4525-8aa2-4ac6b9529ed7"" />
"
1921872557,13740,raz-mon,2025-01-20T06:48:39Z,"Without blocking the client, isn't it the same (even should use detached)?"
1922354008,13740,MeirShpilraien,2025-01-20T12:47:54Z,No need for this command on sentinel.
1922354768,13740,MeirShpilraien,2025-01-20T12:48:30Z,I think that it should not be hard to support slow-log and monitor.
1922356546,13740,MeirShpilraien,2025-01-20T12:49:45Z,"So where are the `with args beginning with:`?
Not sure it is that critical, but still. "
1922358053,13740,MeirShpilraien,2025-01-20T12:50:48Z,Detached context should only be created at the module initialization. Even if it is the same it might break in the future so lets use it correctly.
1922362245,13740,MeirShpilraien,2025-01-20T12:54:10Z,Lets user `RedisModule_StringToLongLong`
1922365574,13740,MeirShpilraien,2025-01-20T12:56:47Z,"Maybe we should name those modes to make it more readable. Or alternatively, keep the 3 different commands and use the mode internally to call the shared code?"
1922418323,13740,raz-mon,2025-01-20T13:37:45Z,What do you mean support? Remove the internal commands from there?
1922468424,13740,raz-mon,2025-01-20T14:14:30Z,Didn't think it was critical as well. Added.
1922479058,13740,raz-mon,2025-01-20T14:22:16Z,Yeah I can keep the three commands and route internally
1923164112,13740,raz-mon,2025-01-21T06:59:48Z,"A static temporary secret, to be changed to the actual secret once it is added to the cluster (before merging of course)."
1925718055,13740,MeirShpilraien,2025-01-22T17:37:57Z,Yes
1929677123,13740,ShooterIT,2025-01-26T07:00:26Z,"is it feasible to only gossip the mini secret? here we just want to reach an agreement on the secret, every node just learn the mini secret and set the secret as its own, even just gossip its own secret, this way may converge quickly and reduce ping message size. do i miss something?"
1929968675,13740,ShooterIT,2025-01-27T04:12:32Z,is it necessary? i saw you define arity 2 in internalauth command json
1929969292,13740,ShooterIT,2025-01-27T04:14:42Z,"please use redis comment style, `/**/` instead of `//` and bellow"
1929972660,13740,ShooterIT,2025-01-27T04:24:22Z,"for the file name, the command name is `internalauth`, so the file name should be internalauth.json instead of internal-auth.json, we use `-` to concatenate the command and subcommand"
1929980535,13740,ShooterIT,2025-01-27T04:43:48Z,PROMOTE-INTERNAL-CONN? is it more clear?
1930057534,13740,ShooterIT,2025-01-27T07:01:26Z,"how about shouldReplyInternalCommand? i think you want to judge if the internal command can be replied, right?"
1930083860,13740,sundb,2025-01-27T07:35:45Z,what aboult `Command only available on cluster instances`?
1930116540,13740,ShooterIT,2025-01-27T08:10:27Z,"```suggestion
        for (int i = 1; i < c->argc && sdslen(args) < 128; i++)
```
Maybe more blank space will be better

"
1930155201,13740,MeirShpilraien,2025-01-27T08:45:17Z,"I think that what you are suggesting has a potential of never converge. If, for example, node 1 secret x then get secret y from node 2 and embrace it. In this time node 2 gets secret x from node 1 and embrace it. They can continue exchanging secrets this way forever.
Maybe I misunderstood your suggestion but I believe that if eventually everyone sees everyone internal secrets then it is promised that eventually everyone will chose the same secret (the minimal one)."
1930191199,13740,ShooterIT,2025-01-27T09:13:14Z,"the node will only embrace the secrets smaller than yourself
for example, node 1 has 000xxx001, node2 has 000xxx002, node3 has 000xxx003.

when node 3 gets the secret from node2, it will update its secret to 000xxx002. If node 1 gets the secret from node2, it will reject since the secret is bigger than its. But node 2 gets the secret from node1,  it will update its secret to 000xxx001, finally, they will have the same secret, right? that is, each node will only gossip the secret it considers the smallest. 

And when calling `clusterGetSecret`, just read its own secret instead of comparing all nodes'"
1930255241,13740,MeirShpilraien,2025-01-27T09:57:38Z,The only downside I see with this approach it that it might take longer to converge because anyone just tell about himself and not telling what he knows about the others. Notice that not all the nodes talks to all the nodes all the time.
1930261281,13740,MeirShpilraien,2025-01-27T10:01:42Z,Lets continue the discussion here: https://github.com/redis/redis/pull/13763/files#r1930260848
1930604195,13740,raz-mon,2025-01-27T14:18:31Z,"No, you're right, fixed."
1930763657,13740,raz-mon,2025-01-27T15:55:26Z,"Fixed, thanks."
1930765185,13740,raz-mon,2025-01-27T15:56:22Z,"NP, modified."
1930771567,13740,raz-mon,2025-01-27T16:00:09Z,"I guess it's a bit clearer, how about `PROMOTE-CONN-INTERNAL`?"
1930795308,13740,raz-mon,2025-01-27T16:15:46Z,"The thing is, that this command is not necessarily internal, so I was aiming for something like ""Do I want to reply the command, internal-wise"".
I'll fix the comment above to `Returns true if the command is not internal, or the connection is internal.`."
1930808675,13740,raz-mon,2025-01-27T16:21:07Z,"I actually prefer the negative way a bit.
Will look for other such errors that we can take inspiration from, and maintain consistency."
1931136402,13740,raz-mon,2025-01-27T20:18:45Z,"Since I am now using this for monitor filtering, I changed it to `commandAccessibleForClient`, how does that sound?"
1933343026,13740,oranagra,2025-01-29T06:48:16Z,let's avoid unnecessary changes to files this PR doesn't change
1933344088,13740,oranagra,2025-01-29T06:49:28Z,"we agreed not to add any new command.
instead use `AUTH ""internal connection"" <secret>`
since ACL users aren't allowed to use spaces, this won't collide with anything"""
1933345401,13740,oranagra,2025-01-29T06:50:48Z,redis uses block comments (not `//`)
1933346449,13740,oranagra,2025-01-29T06:52:07Z,"use block comment.
and in other places below."
1933348161,13740,oranagra,2025-01-29T06:54:01Z,i didn't see this flag being documented (in the module API docs)
1933349310,13740,oranagra,2025-01-29T06:55:10Z,"you mean:
```
/* Check if the command is an internal command (we already know the client isn't an internal connection) */"
1933354590,13740,oranagra,2025-01-29T07:01:39Z,revert the changes to this file when changing to use AUTH
1933355031,13740,oranagra,2025-01-29T07:02:10Z,let's beef up this documentation to explain this feature a little bit more
1933356502,13740,oranagra,2025-01-29T07:03:59Z,"maybe ""Visible"" or ""Exposed"" instead of ""Accessible""?
we're using this in COMMAND and MONITOR, right?"
1933386942,13740,oranagra,2025-01-29T07:38:07Z,we need to patch commandCountCommand too
1933390616,13740,oranagra,2025-01-29T07:41:36Z,"maybe it's a better idea to do this:
1. move the check for internal connections to right after the call to lookupCommand, and just nullify the command if it isn't exposed to the connectoin.
2. patch ACLCheckAllUserCommandPerm to return without a check for internal connections

i think this can simplify both RM_Call and processCommand"
1933391872,13740,oranagra,2025-01-29T07:42:51Z,maybe we want to add a flag in CLIENT LIST?
1933480091,13740,raz-mon,2025-01-29T08:49:36Z,"OK, returned"
1933561832,13740,raz-mon,2025-01-29T09:47:22Z,Adopted
1933607944,13740,raz-mon,2025-01-29T10:16:20Z,"That makes sense, but we wanted the internal command validation to be conducted only when the `C` flag is used, and to succeed otherwise.
Do you think the validation should always take place, regardless of the `C` flag?"
1933610992,13740,raz-mon,2025-01-29T10:18:15Z,"OK if this is agreed upon, I will make the changes."
1933632163,13740,raz-mon,2025-01-29T10:33:22Z,"Added documentation here below (line 1239), was that your meaning or is there somewhere else?"
1933755408,13740,raz-mon,2025-01-29T11:59:47Z,"Regarding the usage - Yes.
Bought ""Visible"" 👍 "
1933759399,13740,raz-mon,2025-01-29T12:02:56Z,"OK, will modify it to loop over the commands and count internal ones for internal connections only as well."
1933784128,13740,oranagra,2025-01-29T12:21:53Z,"i don't see it.
it should be above `RM_CreateCommand` (where `allow-busy` is documented)"
1933785633,13740,oranagra,2025-01-29T12:23:10Z,"note that in RL's fork there's a refactoring around this (for COMMAND, COMMAND COUNT, and COMMAND INFO).
maybe copy that refactoring here now. (will reduce future conflicts)"
1933800215,13740,ShooterIT,2025-01-29T12:34:06Z,looks good
1933808099,13740,ShooterIT,2025-01-29T12:40:04Z,"i see what you discussed with oran, new name sounds good"
1933848821,13740,raz-mon,2025-01-29T13:08:06Z,"Yup, added there"
1934065062,13740,raz-mon,2025-01-29T15:07:21Z,"For `processCommand` I need to keep it separate, to address the case of `client_reprocessing_command`"
1934118538,13740,oranagra,2025-01-29T15:37:34Z,"are you sure? if it failed the internal connection test, it won't get to re-process the command"
1934135040,13740,raz-mon,2025-01-29T15:47:04Z,The command lookup occurs in the `!client_reprocessing_command` bracket. We would need to have two conditions if we want to put it there
1934201850,13740,raz-mon,2025-01-29T16:25:17Z,Reverted
1934241176,13740,raz-mon,2025-01-29T16:46:38Z,Added the unified version from RL
1934286614,13740,raz-mon,2025-01-29T17:16:25Z,"Good idea, added thanks"
1934436913,13740,oranagra,2025-01-29T19:09:19Z,"```suggestion
         * allowed), thus no conflicts with ACL possible. */
```"
1934442577,13740,oranagra,2025-01-29T19:14:10Z,"i think we need to use time_independent_strcmp.
to protect from brute force attacks "
1934445663,13740,oranagra,2025-01-29T19:16:06Z,"in OSS these redis instances are called nodes
```suggestion
 * Should be used to authenticate as an internal connection to a node in the
```"
1934447372,13740,oranagra,2025-01-29T19:16:44Z,"```suggestion
 * cluster, and by that gain the permissions to execute internal commands.
```"
1934453437,13740,oranagra,2025-01-29T19:21:52Z,"maybe ""promote"" is not the right term.
it's true that internal connection has more capabilities than normal connections, but maybe i'll some day have other capabilities, like being hidden from CLIENT LIST.
let's call it ""MARK-INTERNAL-CLIENT"""
1934454113,13740,oranagra,2025-01-29T19:22:25Z,maybe it can also take an integer and be able to remove the flag?
1934454913,13740,oranagra,2025-01-29T19:23:07Z,"```suggestion
        else if (!strcasecmp(t, ""internal"")) flags |= (CMD_INTERNAL|CMD_NOSCRIPT); /* We also disallow internal commands in scripts. */
```"
1934457615,13740,oranagra,2025-01-29T19:24:48Z,"```suggestion
 * * **""internal""**: Internal command, one that should not be exposed to the user connections.
 *                   For example, module commands that are called by the modules,
 *                   commands that do not perform ACL validations (relying on earlier checks)
```"
1934459665,13740,oranagra,2025-01-29T19:26:29Z,"```suggestion
    /* Internal connections should not be restricted by the user */
```"
1934460660,13740,oranagra,2025-01-29T19:27:19Z,"```suggestion
        /* At this point, we already know that the client is not an internal connection. */
```"
1934462263,13740,oranagra,2025-01-29T19:28:40Z,"```suggestion
                /* Non-internal connections cannot execute internal commands. */
```"
1934465572,13740,oranagra,2025-01-29T19:31:12Z,"reverting unnecessary leftover change
```suggestion
    if (!strcasecmp(argv[0],""auth"")) {
```"
1934468306,13740,oranagra,2025-01-29T19:33:36Z,"multi-line ifs have brackets in a separate line
```suggestion
        commandVisibleForClient(c, real_cmd))
    {
```"
1934469227,13740,oranagra,2025-01-29T19:34:28Z,let's add a comment above this block
1934470759,13740,oranagra,2025-01-29T19:35:49Z,aren't we colliding with the flag above? i.e. this needs to be 52
1935111094,13740,raz-mon,2025-01-30T07:14:58Z,"We are 😞 
Fixed thanks."
1935132052,13740,raz-mon,2025-01-30T07:27:59Z,"Good idea, how about an optional argument ""unmark""?"
1935149842,13740,raz-mon,2025-01-30T07:47:00Z,"Great, thanks."
1935209542,13740,oranagra,2025-01-30T08:36:41Z,"in DEBUG command we don't have to keep to any standards, and we can even change things and it won't be considered a breaking change, so you can do whatever you want.
i think the easiest is to follow the convention of `SET-ACTIVE-EXPIRE` and just take an integer."
1935304154,13740,oranagra,2025-01-30T09:43:33Z,"i don't think anyone needs it, but i suppose it won't hurt."
1935305685,13740,oranagra,2025-01-30T09:44:34Z,"```suggestion
""MARK-INTERNAL-CLIENT [UNMARK]"",
```"
1935309124,13740,oranagra,2025-01-30T09:46:47Z,"you described the condition, but let's describe the action.
i.e. nullify the command so that it'll be rejected like an unknown command will."
1935310711,13740,oranagra,2025-01-30T09:47:49Z,why did you do that? i think all he callers of that function expect to get CLIENT_TYPE_NORMAL
1935312907,13740,oranagra,2025-01-30T09:49:17Z,"again, why do we need it?"
1935317797,13740,raz-mon,2025-01-30T09:52:42Z,Sorry these changes were supposed to be removed.
1935317998,13740,raz-mon,2025-01-30T09:52:49Z,Same as above.
1935355382,13740,oranagra,2025-01-30T10:18:20Z,"redis doesn't use stdbool, please remove."
1935360786,13740,raz-mon,2025-01-30T10:22:04Z,Also don't need it anymore..
1939050410,13740,MeirShpilraien,2025-02-03T09:24:53Z,"Test are not really testing what it should, it fails on running `internalauth.internal_rmcall_detachedcontext` because it is, by itself, internal"
1939051961,13740,MeirShpilraien,2025-02-03T09:25:59Z,Also add a test and none internal command that runs RM_Call with internal command succeed (if used without the `C` flag).
1939054336,13740,MeirShpilraien,2025-02-03T09:27:37Z,Not sure what you are testing here? That the eval command are shown in the monitor?
1939066443,13740,MeirShpilraien,2025-02-03T09:35:31Z,I do not think you need redis cluster  for this test right?
1939069956,13740,raz-mon,2025-02-03T09:37:57Z,Will remove
1939070473,13740,MeirShpilraien,2025-02-03T09:38:19Z,Let authenticate as internal connection and make sure that the internal command are not shown even when the command succeed.
1939079541,13740,MeirShpilraien,2025-02-03T09:44:32Z,I am missing your you create the monitor connection internal? Also not sure how come this test passes and the first test (`Internal commands are not reported in the monitor output for non-internal connections`) also pass.
1939087450,13740,MeirShpilraien,2025-02-03T09:49:32Z,"We should probably do it now via an internal connection, we are still internal client from the test above this."
1939089644,13740,MeirShpilraien,2025-02-03T09:50:57Z,"Lets also not do it from internal connection, just to make sure."
1939090135,13740,MeirShpilraien,2025-02-03T09:51:18Z,I believe you do not need cluster deployment for those tests.
1939091035,13740,MeirShpilraien,2025-02-03T09:51:52Z,I believe we do not need cluster for this test.
1940038795,13740,raz-mon,2025-02-03T21:21:04Z,"I need the internal connection, can also be reached via a debug command but the regular flow is in cluster mode"
1940041086,13740,raz-mon,2025-02-03T21:23:25Z,"Mainly for the regular internal connection authentication flow, otherwise can be reached via the non-standard debug command.
Any reason not to use a cluster and the regular flow?"
1940045068,13740,raz-mon,2025-02-03T21:27:14Z,"Right, this is a bug. Thanks"
1940052592,13740,raz-mon,2025-02-03T21:34:49Z,"Not sure I follow your meaning of doing it now via an internal connection.
I can switch to a non-internal connection so that we make sure we get this there as well"
1940053384,13740,raz-mon,2025-02-03T21:35:35Z,Sure
1940057122,13740,raz-mon,2025-02-03T21:39:20Z,This is actually a duplicate of a test above - removing.
1940696713,13740,MeirShpilraien,2025-02-04T08:14:06Z,This is not actually replicating no? It is not using `!`.
1940701852,13740,MeirShpilraien,2025-02-04T08:17:58Z,Why you need cluster here?
1940702279,13740,raz-mon,2025-02-04T08:18:18Z,"Yeah I call `RedisModule_ReplicateVerbatim` later on. I can switch that with the `!` in the RM_Call, makes more sense."
1940704186,13740,MeirShpilraien,2025-02-04T08:19:46Z,"It will be faster to deploy, I believe we better use this and just promote the connection with debug command. Also simplify the test."
1940705608,13740,MeirShpilraien,2025-02-04T08:20:45Z,So the command still fails here no?
1940707999,13740,MeirShpilraien,2025-02-04T08:22:32Z,Ohh ok it is down bellow :+1: 
1940711653,13740,MeirShpilraien,2025-02-04T08:25:06Z,"> I can switch to a non-internal connection so that we make sure we get this there as well

Yes this is what I meant."
1940712923,13740,raz-mon,2025-02-04T08:25:59Z,I don't. Changed to standalone.
1940714095,13740,MeirShpilraien,2025-02-04T08:26:47Z,"OK, lets keep it so we also check the `auth` command flow."
1940716329,13740,raz-mon,2025-02-04T08:28:29Z,"OK, I can change to use a standalone server"
1943885772,13740,sundb,2025-02-06T01:04:14Z,"@raz-mon the size of `flags` is 17, now `p` might be out of this range.
This one was discovered by coverity."
1944165138,13740,raz-mon,2025-02-06T06:23:23Z,"@sundb This was known in development time, @oranagra preferred we don't update the size of the flags, as some of them do not coexist."
760958693,9872,bjosv,2021-12-02T10:29:47Z,"Should we update this comment?
With default configs (i.e server.shutdown_timeout=10) three CTRL+C is now needed to quit ASAP without waiting for disk writings (unless I have missed something..)
It looks like the second CTRL+C will now trigger a call to finishShutdown() which does AOF and RDB file writings."
761036972,9872,zuiderkwast,2021-12-02T12:15:56Z,"You're right. It's good that you highlight this. I don't know if we need this or if it's enough to just exit(1) on the second CTRL+C. The downside is that if we're waiting for replicas and exit, we don't even try to write the rdb file, but if you press CTRL+C twice, I guess you can live with data loss either way. Any strong opinions?"
763972458,9872,oranagra,2021-12-07T13:05:03Z,"thinking out loud here, maybe it's better to reply OK, and let that client (and others) monitor the shudown, instead of blocking it?

i.e. i imagine we better add some INFO field that they can monitor, or even decide to respond to PING with some SHUTTINGDOWN message?

on the other hand, doing this would be somewhat of a breaking change, since the docs mention this command never replies when it succeeds.."
763972481,9872,oranagra,2021-12-07T13:05:05Z,"maybe we want to add a `NOW` flag to allow bypassing this instead of requiring a CONFIG before SHUTDOWN?

it reminds me of the case shutdown is refused because we're generating the initial AOF, where there are cases (in the test suite) in which we have to do `config set appendonly no` before terminating an instance to guarantee compliance "
763975607,9872,oranagra,2021-12-07T13:09:17Z,i think we may want to indicate these in INFO
764666452,9872,oranagra,2021-12-08T09:00:14Z,"why should we pause clients with a timeout (the pause has timeout)?
when the shutdown timer expires, we'll exit.
so in what case do we want to let clients write again after shutdown was initiated?"
764753223,9872,oranagra,2021-12-08T10:49:33Z,"i'm guessing we don't care.
i.e. if the timeout is long enough (or even with the default of 10 seconds),
maybe a replica that just connected, will succeed in getting a full sync in time.
we can let it try and abort if it doesn't make it."
764757518,9872,oranagra,2021-12-08T10:55:15Z,"can't you use a slow ""initial"" AOFRW for your test?"
764759030,9872,oranagra,2021-12-08T10:57:07Z,"in the past, we didn't reset this, and would have kept trying to shutdown endlessly (or until success), right?
maybe we don't wanna change that behavior?"
764760554,9872,oranagra,2021-12-08T10:58:56Z,i think i rather not modify all these lines
764762454,9872,oranagra,2021-12-08T11:01:32Z,why not 0?
764763653,9872,oranagra,2021-12-08T11:03:04Z,"you probably want to set this config before calling REPLICAOF, but actually, why do we want this test to insist on diskless replication?
let's let it use the default. (same for the master)"
764765055,9872,oranagra,2021-12-08T11:04:53Z,"i'd rather not have an inherent delay of 1 second.
maybe instead we can check the master is still responding (GET command and INFO command)
maybe in addition to that, set the cron hz to a high number, and have an `after` of 2 cron intervals?"
764766911,9872,oranagra,2021-12-08T11:07:32Z,"let's see if we can make this test faster.
we already know (from the previous test) that the master waits for the replica (or at least that it still runs the event loop and responds to clients)"
764768322,9872,oranagra,2021-12-08T11:09:31Z,"maybe instead of this const delay, we can wait for the master to be done (PID or log file check)"
764768650,9872,oranagra,2021-12-08T11:09:57Z,maybe check that the INCR didn't get to the replica?
764796567,9872,zuiderkwast,2021-12-08T11:51:26Z,"Yeah, it's worth considering. I went for blocking since it's backwards compatible. I imagine there are scripts using `redis-cli shutdown` in a synchronous way (like [this one](https://src.fedoraproject.org/rpms/redis/blob/main/f/redis-shutdown) that was mentioned in issue #9355 recently)."
764798497,9872,zuiderkwast,2021-12-08T11:54:27Z,"It looked like it needs a timeout, but I didn't dive deep enough. I guess something like 0 or -1 is used for no timeout... I'll find out and use that instead."
764800074,9872,zuiderkwast,2021-12-08T11:56:48Z,Do we also want to bypass the refusal to shutdown when writing the AOF or RDB files fail? Maybe FORCE or KILL is a more descriptive flag name then? Or do you want to separate these cases with different flags?
764801782,9872,zuiderkwast,2021-12-08T11:59:16Z,don't know :-) I guess I though it might have some special meaning... I'll use 0.
764802832,9872,zuiderkwast,2021-12-08T12:00:52Z,"OK, I can use the default, but with RDB replication, I need to write much more keys to fill up the socket buffers so that it fails without this PR. The RDB file is more compact."
764803800,9872,zuiderkwast,2021-12-08T12:02:18Z,The data loss problem is more serious in diskless setups. (We're using diskless so it's more relevant to us. I'm biased.)
764815130,9872,zuiderkwast,2021-12-08T12:19:03Z,@oranagra Do we want this line? Ideally we'd want a replica wait for sub-replicas to catch up. There might be more things to check for this case though. WDYT?
764817699,9872,zuiderkwast,2021-12-08T12:22:58Z,"I don't know how to do that. Is it reliable?

Another way would be to add an undocumented SHUTDOWN flag (SHUTDOWN DEBUG-FAIL)."
764818593,9872,zuiderkwast,2021-12-08T12:24:19Z,"No, shutdown_asap = 0 was in the cron function. I just moved it here. The behaviour isn't changed."
764830368,9872,zuiderkwast,2021-12-08T12:41:30Z,"I'll use LLONG_MAX for the timeout (seen in other places) and I'll add unpauseClients() under the error label. If shutdown fails (for whatever reason), I think we want to allow writes again."
764839307,9872,zuiderkwast,2021-12-08T12:54:23Z,"It only works if we fill the buffers with junk, like in the first test case. Otherwise, the replica will still receive the INCR even after master has shut down, due to flushSlavesOutputBuffers() in finishShutdown. Filling up with junk makes the test very slow in some builds so I was hoping we only need to do that in one of the test cases.

```C
    /* Best effort flush of slave output buffers, so that we hopefully
     * send them pending writes. */
    flushSlavesOutputBuffers();
```"
764844285,9872,zuiderkwast,2021-12-08T13:01:14Z,"I can set it to `1` second, OK? It's the lowest possible value to still allow a second client to call SHUTDOWN."
764892495,9872,zuiderkwast,2021-12-08T14:01:44Z,In the `# Server` section? Always present or only during shutdown? Any specific ideas regarding names of fields and values?
764925657,9872,oranagra,2021-12-08T14:40:00Z,"ok, let's keep the blocking, but maybe add an INFO field?

thinking out loud again maybe we can also reject write commands?
in normal PAUSE_WRITES we don't wanna reject the commands since we can get un-paused and run them.
if shutdown is terminal, we can refuse them right away.
if we do that, maybe we should also have some new PING response too?

however, IIUC our shutdown is not always terminal (we can abort it), and also, it's expected to be rather quick (just a few seconds), so let's only add the INFO field."
764929573,9872,oranagra,2021-12-08T14:44:10Z,"my first thought is that we should have different flags.
if the user is also gonna run the risk of losing his AOF file (enabled but not yet created), it's a different than giving up on replicas, (since the configured timeout might anyway not get to do what it aims)

but i think to document that difference is too complicated, so maybe just one FORCE flag to bypass both.
let's document that detail in the top comment, and then see what others think."
764931663,9872,oranagra,2021-12-08T14:46:17Z,"i suppose that they're such a niche, that maybe we should only have them during shutdown.
but let's document that and seek feedback."
764933156,9872,oranagra,2021-12-08T14:47:47Z,"i don't want to add debug flags to other commands, i rather use the DEBUG command over that.
but i do think that we can use the initial AOFRW to reliably trigger that.
it'll add some 10 lines of test code, but maybe it's better than adding 5 lines of redis code."
764936322,9872,oranagra,2021-12-08T14:51:15Z,"i don't understand what difference you're talking about with regards to the socket buffers.
we're not using key-load-delay here, and rely on catching the replica while it's loading the rdb.
we're letting it get a full sync completely, then pause it and add some writes to the master.
we don't care how it does the initial full sync..
am i missing anything?"
764936801,9872,oranagra,2021-12-08T14:51:47Z,i guess we don't have any other choice.. ok
764940133,9872,oranagra,2021-12-08T14:55:16Z,"you mean we need to write enough data that will not fit into the OS socket buffers?
i guess that's the realistic test we need to write in order to cover the actual problem we're dealing with.
i think we can very quickly fill 10mb and it won't cause any issues.
or even better, keep feeling until introspection shows that there's unwritten data still pending (so it'll work even on a system with huge socket buffers)
let's try."
764941377,9872,oranagra,2021-12-08T14:56:28Z,"i think you're right, sub-replicas should also wait.
by more things to check you mean write another 100 line test?"
764980794,9872,zuiderkwast,2021-12-08T15:38:40Z,"I'm not sure how it works, but when I designed the test case before I started implementing anything and I expected it to fail but it didn't. I turns out that (in unstable) if master shuts down, it flushes the replication buffer and exits. Then, even a few seconds later, the replica can still receive this data. Data loss only occurs if we have more replication data than what fits in the buffer. That's why I added the junk to the replication buffer before the INCR.

Without the diskless config, I needed much more junk before the INCR to make it fail. I don't know why (just guessing).

If we instead just test that the master is reachable (GET or INFO) and check the INFO output as you wrote in another comment, we don't really need the junk and the test case can be faster and more reliable on slow machines, but then we don't really test the same thing. I guess this is enough though."
764987239,9872,zuiderkwast,2021-12-08T15:45:50Z,"To check that it responds to INFO and GET isn't the same thing as checking that it actually waits for the replica offset, but it's a pretty good indication. If we instead rely on the new INFO shutdown lines that I'll add, then we don't need this delay."
764992050,9872,zuiderkwast,2021-12-08T15:50:59Z,Exactly. Interesting idea. I don't know how to introspect the pending unwritten data though. Is it in INFO?
764995923,9872,zuiderkwast,2021-12-08T15:55:10Z,"No, I meant that if the master has exited, there is no way that the replica can catch up with the master and then it's no point letting it wait for sub-replicas to catch up because it will never happen.

    master -> replica -> sub-replica

So, maybe we want to stop waiting if we lost connection with the master? or something like that

    if (server.master_host != NULL && server.master == NULL) return 1; /* I'm a replica and I lost my master */"
765024064,9872,oranagra,2021-12-08T16:26:17Z,"there must be something we're missing, i don't see why diskless should affect that.
the only thing i can think of is that diskless has a re-sync delay (`repl-diskless-sync-delay`), so maybe it dropped and wasn't able to re-sync, in contrast to disk-base that could.

other than that i don't see any reason why the socket buffers will behave differently, but i do think we need to write more than they could swallow.
this shouldn't be slow if you use big keys or pipeline (deferring client), maybe you can use the `proc populate` util."
765027288,9872,oranagra,2021-12-08T16:29:53Z,"i think that if we know that the shutdown thing is attempted at cron, and we set the hz to be fast and wait for a few cron triggers, it's enough.
when you think of it, that 1 second delay isn't a guarantee of anything either... why 1 and not 5?"
765031943,9872,oranagra,2021-12-08T16:35:21Z,"i suppose setting a small `repl-backlog-size`, and watching `mem_total_replication_buffers` is one way.
the other way is do `CLIENT LIST` and look at the `tot-mem` of the replica client."
765034694,9872,oranagra,2021-12-08T16:38:40Z,"for the point of that discussion i don't care about the master.
i think as a middle replica (one that has a sub-replica), when we shut down, we only care about data we have, which we didn't yet pass to our sub-replica."
765089798,9872,zuiderkwast,2021-12-08T17:47:33Z,OK. I'll just delete this line then.
765091503,9872,zuiderkwast,2021-12-08T17:49:53Z,"In a middle-replica, I suppose `server.master_repl_offset` is the middle-replicas offset, not the actual master's offset. (The middle-replica acts as master towards the sub-prelica. Thus my slight confusion.)"
766226428,9872,zuiderkwast,2021-12-09T23:15:04Z,"I'll append these to the Server section only during shutdown:

* `shutdown_in_milliseconds:NNNN` (remaining time to wait for repl, calculated)
* `shutdown_flags:snw` (value is a string where s = save, n = nosave, w = waiting for repl.)"
766594345,9872,zuiderkwast,2021-12-10T11:10:15Z,I made a helper function to fill up the OS socket buffers. Please check the assumptions make sense. I'm resolving this for now.
766595542,9872,zuiderkwast,2021-12-10T11:12:02Z,I write junk until `mem_total_replication_buffers` > 1M. Please check if it makes sense.
766598333,9872,zuiderkwast,2021-12-10T11:16:37Z,"While implemented, I realized the two flags are very different, so I made separate flags: NOW and FORCE. I also removed SHUTDOWN_WAIT_REPL and made that the default, which is disabled by NOW.

I don't think it'll be hard to document it."
766742967,9872,zuiderkwast,2021-12-10T14:55:54Z,"@oranagra The last CI test run failed on this (but the sanitizer test run passed). I don't know how to reliably fill the OS socket send buffer. Do you?

From within Redis it'd be possible to call setsockopt() and getsockopt() with `SO_SNDBUF`. From the test case, perhaps it's possible to use `ss` to inspect the sockets as in [this post](https://stackoverflow.com/a/56279407/975856).

WDYT?"
767277507,9872,oranagra,2021-12-12T13:50:25Z,"ok, the usability of these is a bit limited, but i guess that for someone that really needs to monitor the shutdown it's enough.
let be sure to document them (and their elusive pretense) in the top comment and later on in redis.io"
767278204,9872,oranagra,2021-12-12T13:55:40Z,you have a comment saying `upp` in a few places.
767278461,9872,oranagra,2021-12-12T13:57:52Z,"let's explain `idx` in the doc comment.
the alternative is to move it to first optional argument like in `proc s` and such.
i suppose that considering `num` is always positive, we can do that, but i don't like that too much."
767280667,9872,oranagra,2021-12-12T14:15:28Z,"this thing became too complicated.
we do have a plan to soon promote this list of commands to command flags, which will be ok for SCRIPT KILL since it's a sub-command, but will not be ok for SHUTDOWN.
i suppose the only way out is to permit the shutdown command, and add some explicit check inside `shutdownCommand` to fail with a similar error as the one processCommand uses."
767281374,9872,oranagra,2021-12-12T14:21:01Z,"LGTM.
i guess we need to run it on daily CI (freebsd, valgrind, etc).
i remember the client eviction PR had some similar issues and in some cases it didn't behave as initially expected.
(maybe we can copy some logic from there, so suffice by running the above tests)"
767281548,9872,oranagra,2021-12-12T14:22:34Z,"i'd rather not.
@yoav-steinberg please take a look at this, you faced similar problems in the client eviction PR."
767281617,9872,oranagra,2021-12-12T14:23:12Z,LGTM
767306436,9872,zuiderkwast,2021-12-12T17:48:04Z,"I believe it's not possible to reliably saturate a socket. There is no guarantee that only the send and receive buffers can store data in transit. In a network, data can also sit in routers. Even within the same machine, there kernel might have other internal buffers between the send and receive sockets.

Thus, I suggest that we send a large amount, e.g. 10MB, in the first test cases (the test case where the master waits for the replica). Only 100k is enough on my machine to make it fail without this PR, so 10M is a bit extra. If the feature is broken, this test will fail on at least some machines.

For the negative test case where shutdown times out, I suggest we simply don't try to saturate the socket. We just check the logs on master.

@yoav-steinberg, @oranagra does this make sense?"
767308309,9872,oranagra,2021-12-12T18:05:45Z,"> I believe it's not possible to reliably saturate a socket. 

I don't have any concrete objection to your suggestion, but I don't agree with the reason. 
At some point we'll saturate all the buffers there are, we just need to write code that's robust enough, and doesn't assume anything, eventually the socket will be blocked, and every byte you add will be kept in the client output buffers. 
On some machine 100k will be enough, on others it'll take 10mb, if we add proper exit condition to the loop, we'll be able to trigger what we came to test. 

I'd like to try to avoid constants (times and sizes), and instead add loops that break out when it's right. 

Maybe the filling loops should have a short sleep, and keep writing until it observes that everything it wrote in the last cycle is sitting in the client buffers."
767320202,9872,zuiderkwast,2021-12-12T19:59:51Z,"Sure, I'll document it. Do you have a better idea for fields and values?"
767321220,9872,oranagra,2021-12-12T20:09:55Z,"Not really. But I can share some random thoughts.. 

I'm not sure if the flags are needed. 
I saw you use them in the tests but didn't look closely if that was really necessary. 

The other thought I had was that other places in the past that showed ETA, or bytes left, we later realized that it wasn't enough in order to calculate progress (I.e. The total was also needed). But I'm not sure if it's applicable in this case. 
It's probably enough to have a boolean, and if instead we have a countdown, that's probably sufficient. "
767385550,9872,zuiderkwast,2021-12-13T03:05:09Z,"Good, I'll skip the flags and keep `shutdown_in_milliseconds` only. We can always add more fields later."
767621816,9872,zuiderkwast,2021-12-13T10:56:57Z,"Thx. (""upp"" means ""up"" in Swedish, so guess my fingers subconsciously auto-corrected.) "
767756824,9872,oranagra,2021-12-13T13:29:13Z,"i'm not sure FORCE should be here, in that case if user passes FORCE|SAVE, we may save data breaking the atomicity of the script.
maybe you meant `(SHUTDOWN_NOSAVE|SHUTDOWN_FORCE) != (flags & (SHUTDOWN_NOSAVE|SHUTDOWN_FORCE))`? but i don't think that's necessary NOSAVE should be enough to allow this guard to be bypassed."
767757403,9872,oranagra,2021-12-13T13:29:54Z,let's add a comment on that line saying that the command itself has more checks around this.
767783499,9872,oranagra,2021-12-13T14:01:39Z,let's mention this change in the top comment
767784359,9872,oranagra,2021-12-13T14:02:45Z,let's mention this change in the top comment. (killing an BGREWRITEAOF child in case AOF is off)
767800232,9872,zuiderkwast,2021-12-13T14:21:23Z,"OK, I understand. We'll require NOSAVE. (I assumed it's OK to break anything if FORCE is given.)"
767801250,9872,zuiderkwast,2021-12-13T14:22:33Z,"I'm reverting this cleanup, because there are some failing test cases that I'd love to avoid spending hours debugging... See the commit message with the revert."
767823189,9872,zuiderkwast,2021-12-13T14:46:03Z,TBH I don't know what an initial AOFRW is. I don't know much about AOF.
767825212,9872,zuiderkwast,2021-12-13T14:48:06Z,"Writing 1M at a time, with 10ms sleep between each round, until mem_total_replication_buffers > 2M seems to work."
767826680,9872,zuiderkwast,2021-12-13T14:49:39Z,Done. Top comment is up to date with current implementation.
767845638,9872,yoav-steinberg,2021-12-13T15:09:49Z,@zuiderkwast I never found a reliable way to saturate the kernel output buffers by assuming a fixed size will work and playing around with linux/socket tweakables. I ended up just writing a loop and waiting until the client's output buff (or total client memory) reached the size I was aiming for (via `client list`). 
767851051,9872,zuiderkwast,2021-12-13T15:15:33Z,"OK, that's what I tried, using `client list` and `INFO`, but I didn't quite get it right until now. When writing 1M, the repl buffer grows to 1M even when it succeeds writing all of it to the socket. However, it only reaches 2M when the socket is full. Thus, my last attempt seems to work. I hope it's a safe assumption."
768500874,9872,oranagra,2021-12-14T10:06:34Z,"ok, i don't understand why it fails, and it's only one test, so probably easy to solve, but we can circle back to it some other time.
p.s. looking at the reverted commit again, it seems you didn't set the NOSAVE flag in that flow."
768507276,9872,oranagra,2021-12-14T10:12:19Z,"I'll explain then (for your benefit).
normally if redis starts configured to persist to AOF, it either loads one, or creates one when redis is empty.
in these cases, every write that is executed is appended to the file, and the user can shutdown redis whenever it likes.

I assume you know what an AOFRW means, but i'll just mention that if the files grows by more and more appends, eventually we start a fork to generate a new one based on the data we have in ram (some form of compaction)

there is an odd situation which happens when redis starts without AOF enabled, and then AOF is enabled at runtime (after redis already has data).
In that case, redis starts an AOFRW process, and responds to the CONFIG SET command with OK (agreeing to a new persistence contract), but the data is not yet ""safe"", it'll only be safe when the rewrite is completed, and this is why it refuses to terminate in that scenario."
768533771,9872,zuiderkwast,2021-12-14T10:38:09Z,Thanks for explaining! So it's basically just to set a config value to yes? But I don't see how we can reliably do this just when the replica catches with the master (just before we send SIGCONT to the replica?) and how we can rely on that this AOFRW takes enough time so that finishShutdown is called exactly during this time. Replicas report their offset only once per second.
768537187,9872,zuiderkwast,2021-12-14T10:42:14Z,SHUTDOWN_NOSAVE is set in prepareForShutdown if `server.loading`. This is already in unstable.
768545243,9872,oranagra,2021-12-14T10:52:08Z,"can't `rdb-key-save-delay` do that? i.e. we'll make the master do an AOFRW that takes forever, then unfreeze the replica and issue a SHUTDOWN, the replica will be done before the AOFRW.
maybe i forgot (or didn't understand) what we wanted to test though."
768622212,9872,zuiderkwast,2021-12-14T12:36:12Z,A hidden config trick! Makes sense; I'll try it.
768707030,9872,oranagra,2021-12-14T14:15:36Z,"i now realized that serverCron doesn't run during loading.
we send SIGTERM to the replica to ask that it'll die, but it ignores it and keep on reading the rdb file.

i think the solution is that the signal handler should call `prepareForShutdown(FORCE|NOW|NOSAVE) && exit(0)` instead of just `exit(0)`"
768785852,9872,zuiderkwast,2021-12-14T15:33:56Z,"For reference: In a chat, we decided to postpone this to another PR.

The signal handler should only touch variables declared `volatile sig_atomic_t` or similar, like `shutdown_asap`.

Another option is to call prepareForShutdown from whileBlockedCron, but the test cases still fail, possibly because they don't write enough data to trigger whileBlockedCron. Maybe it's enough to tweak the test cases a bit."
769298687,9872,oranagra,2021-12-15T06:49:35Z,"maybe we should use this opportunity to add a REPLCONF GETACK to the slave buffers, so that when they get it, they'll send an ACK right away, instead of waiting for the periodic one (i.e. what we wait for in isReadyToShutdown).
i.e. extract the code from `beforeSleep` which uses `shared.getack` into a function and use it here."
769301401,9872,oranagra,2021-12-15T06:52:48Z,"let's log the replstate too, and maybe other things logged in INFO replication (like last ack time / lag)?"
769303552,9872,oranagra,2021-12-15T06:54:49Z,maybe we need to also delete the temp file here?
769307106,9872,oranagra,2021-12-15T07:00:07Z,"technically speaking, in current code, i guess we can change this to `server.aof_state == AOF_ON`, since in WAIT_REWRITE there's no ""current"" file to flush  to.

however, soon, in #9788 this is gonna change, and in case the state is WAIT_REWRITE, we'll want to delete the new part.

@chenyang8094 please confirm what i state above, and let's change that code in this PR to be:
1. safe / correct in current unstable 
2. make sure it'll cause a merge conflict in your PR so that you'll handle that case there too."
769425870,9872,zuiderkwast,2021-12-15T09:24:06Z,"Good idea! It could speed up the completion. @yesbox promised bonus points for this in the issue. (Oran, we can share the points 50/50.)"
769465508,9872,zuiderkwast,2021-12-15T10:02:38Z,FYI: I can't simply set the flag `get_ack_from_slaves` because beforeSleep won't be sent if clients are paused.
769478085,9872,oranagra,2021-12-15T10:17:51Z,"right, as i suggested, you must do that manually before calling `pauseClients`"
769661157,9872,zuiderkwast,2021-12-15T14:10:57Z,killAppendOnlyChild is called a few lines below. It deletes the temp file.
769788369,9872,oranagra,2021-12-15T16:26:38Z,shoudln't the GETACK be eabove the pause?
769801272,9872,zuiderkwast,2021-12-15T16:41:39Z,"Does it matter? pauseClients only prevents incoming write commands, right?"
769803458,9872,zuiderkwast,2021-12-15T16:44:15Z,"@oranagra do you want me to change to `server.aof_state == AOF_ON` in this PR?

I don't think #9788 affects this."
769804914,9872,oranagra,2021-12-15T16:46:03Z,"not really, it also prevents expiration, eviction, replica PINGs, and even hints modules that they must not do anything that results in replication.
maybe it doesn't affect a direct call to replicationFeedSlaves, but there might be an assert there some day, so i think it's a good idea to swap them.

come to think of it, what if we where already in a PAUSE?
maybe in that case we should avoid asking for ACK, but also what if the earlier PAUSE is removed earlier?
i suppose all it'll do is that the shutdown will be completed when we reach our timeout?
please look into this."
769807229,9872,oranagra,2021-12-15T16:48:46Z,"why did you need to change this?
it already changed `repl-ping-replica-period` to high value?

please explain what was the problem.
i'm not sure if comparing to a static pre-sampled offset is right, and if we do that maybe we need to use `>=` (which i think can hide bugs)"
769812002,9872,zuiderkwast,2021-12-15T16:54:12Z,"OK, I'll skip GETACK if clients are already paused.

If clients are already paused, we still call `pauseClients(LLONG_MAX, CLIENT_PAUSE_WRITE)` here and unpause if and when shutdown fails, so if they were already paused before, the pause mode and timeout will be lost. I think we can accept this."
769819380,9872,zuiderkwast,2021-12-15T17:02:37Z,"I changed this because REPLCONF GETACK affects the offset and this broke the asserts later in the test case. It seems that the offset is incremented by exactly 37 when REPLCONF GETACK is sent.

If the purpose of the test case has anything to do with the master not knowing that the replica is up to date (because it is; it's checked in this `wait_for_condition` loop), then we can't do this, but OTOH with this PR the master will send GETACK during shutdown and wait for the replicas anyway, so the high value of `repl-ping-replica-period` isn't effective anyway.

My though was that `>=` would hide bugs, so I didn't want to do that.

What if we use `shutdown now` to restart the master? or equivalently `debug restart`. That prevents the REPLCONF GETACK..."
770410308,9872,zuiderkwast,2021-12-16T10:28:51Z,Added replstate and lag as in INFO.
770413062,9872,zuiderkwast,2021-12-16T10:32:19Z,"I did the latter and used `$master debug restart` instead of `restart_server 0 true false`. It uses SHUTDOWN_NOW, preserving the old behaviour of the test case."
770477516,9872,oranagra,2021-12-16T12:02:40Z,"I think it's the right thing to do (change that condition), specifically if this PR is the last one, and then we publish a release.
but considering that we're going to change things again soon, and considering that this PR didn't break anything (the condition was wrong to before, and it has no actual implications.
let's keep the current code in this PR."
770481933,9872,oranagra,2021-12-16T12:09:09Z,"so assuming we don't bother to re-pause or send a GETACK if already paused, two possible things can go wrong:
1. the other pause will expire before ours expires, which will mean:
    1. more traffic is forwarded to the replicas
    2. we don't have a chance to shutdown in reasonable time and wait till the timeout
    3. when the timeout is reached, we shudown and induce partial data loss

2. our shutdown timeout will expire first
    1. if we end up shutting down, that's fine
    2. if the shutdown fails, and we unpause, we could cause some damage to the original pause intent.

`2.ii` is solvable if we don't unpause what we didn't pause.
`1.i` can be maybe solved if pause has a reference count, so the clients will only be unpaused if bother pausers ask to unpause (i don't like it)

WDTY?"
770492684,9872,oranagra,2021-12-16T12:25:01Z,"these tests used to use DEBUG RESTART in the past.
it upsets valgrind and causes other test suite issues, which is why i introduced restart_server and used it everywhere.
let's add an argument to restart_server to specify how it should be shut down."
770498757,9872,oranagra,2021-12-16T12:33:41Z,"after thinking a bit more about it, it occurred to me that maybe this exposes a bigger problem.
maybe that extra GETACK feature can cause real issues of a repl offset mismatch between the RDB file and the replicas.
specifically if the timeout is short.

but looking again ad your change (which you now reverted), i understand that at least in that test, this extra GETACK feature didn't cause any replication issues (PSYNC still succeeded). all it did is fail an assertion in the test, right?

so considering that, maybe i'm ok with that change (which you reverted).
but also, maybe we do want to run this test on both modes (SIGTERM, and SHUTDOWN NOW).
maybe we should modify one test to use one approach, and the other to use the other approach (just in order to avoid running 4 tests instead of 2)"
770541436,9872,zuiderkwast,2021-12-16T13:33:38Z,"It's not good to let pause timeout happen during shutdown (1.3). I don't think we should let that happen. Better set pause timeout to LONG_MAX so it can't timeout during shutdown.

If shutdown fails and we unpause clients that should otherwise remain paused (2.2), I don't think we need to bother. If shutdown fails, we have a serious problem anyway.

What if clients are paused in mode ALL and we change it to WRITE? It will allow some requests during shutdown which would otherwise have been blocked. Perhaps it's better to keep ALL in that case and only set the timeout...?

What if clients are unpaused explicitly, for example if CLIENT UNPAUSE is called or CLUSTER FAILOVER is completed while shutdown is ongoing, which triggers unpauseClients, how bad is that? I think it's acceptable. If you think it's not acceptable, we can tweak unpauseClients so that it checks if shutdown is ongoing and refuse to unpause clients."
770882192,9872,oranagra,2021-12-16T19:59:34Z,"ohh, i now notice that my previous message wasn't properly formatted, so it showed numbers from 1 to 7, instead of creating 2 levels like i meant to (edited).
but looking at your response, it looks like somehow you figured out what i meant?

anyway, this is becoming a little bit messy.
another way out (which i don't like either), is to introduce a separate pause flag or variable for each purpose, so that they don't override each other, and the pause is effective as long as either of them is set.

if we don't go that way, i think we need to make some compromises, and just decide which one is better..
obviously as you said, when we start out pause, we must not cause the pre-existing pause be less effective (like demoting an ALL, to WRITE).

but i'm a bit paranoid about cases that one of them will expire first and cause damage to the other.
maybe that shouldn't really happen, since it's unlikely that FAILOVER and SHUTDOWN will be triggered at the same time (user who does that might be misguided).

please propose a solution and analyze it and it's edge cases, and we'll see if we can agree on it."
771738879,9872,zuiderkwast,2021-12-17T23:15:41Z,"clientPause never demotes ALL to WRITE and never decreases a pre-existing timeout. It only extends them (ALL > WRITE > OFF).

```C
void pauseClients(mstime_t end, pause_type type) {
    if (type > server.client_pause_type) {
        server.client_pause_type = type;
    }

    if (end > server.client_pause_end_time) {
        server.client_pause_end_time = end;
    }
    ...
```

(1) We can preserve the original pause timestamp if we pause with an `end` timestamp matching the shutdown-timeout (instead of LONG_MAX) and don't explicitly unpause after a shutdown failure. Then, if clients were already paused for some other reason, they will remain paused after a shutdown failure. (This is what I had done originally and reverted in c941a29a2131267568b69221163c6bc54d13ae95.)

The downside of this is that if shutdown-timeout is high and replicas catch up fast, clients will remain paused until the original shutdown timeout is reached. It can be a long time depending on the shutdown-timeout config.

----

(2) The other very simple alternative is what we currently have in this PR: unpause explicitly on a failed shutdown.

I did a grep for unpauseClients. It's called after a failover, both cluster failover and standalone, both after a successful and after a failed failover. Given this, I think it's totally fine to do the same after failed shutdown.

Note that we don't demote ALL to WRITE in any case.

----

(3) Any complex logic where we keep more than one timestamp, I don't think is worth the complexy.

I prefer option 2."
771753240,9872,zuiderkwast,2021-12-18T00:18:56Z,"That's right, all it did was fail an assertion in the tests. The assertion checked that the offset reported by the replica matches the offset reported by the master, but it didn't check that the master had received the offset (ACK) from the replica. If it hadn't received the ACK, it would wait for replicas and send GETACK to speed up the ACK.

So, I agree, I don't think the GETACK can cause any serious issues. If the replicas are already up to date, it will not be sent. If they're not, the GETACK will speed up the shutdown.

Now, I solved the test cases by sending SHUTDOWN NOW using a deferred client just before calling the `restart_server` proc. The `restart_server` and `kill_server` don't care if the server is already dead, so this works perfectly. I hope you agree. :)"
771753548,9872,zuiderkwast,2021-12-18T00:20:40Z,"I don't think we need to run these test cases in both modes (both signal and shutdown now) because, again, all it affects is that assert."
771802880,9872,oranagra,2021-12-18T09:04:59Z,"I'm paranoid that in some cases we send the GETACK and immediately exit (saving an RDB), imagine a case where the shutdown timeout is very short. 
In that case, that GETACK might be the thing that destroys the ability to PSYNC later. 

I know that we think currently there's no risk since e skip sending that GETACK when there's no need for it. But I still like to have these tests check both shutdown with and without timeout (I.e. NOW an and sigabrt) "
771803541,9872,oranagra,2021-12-18T09:13:01Z,"```suggestion
        ""complexity"": ""When saving: O(N) where N is the total number of keys in all databases"",
```"
771803651,9872,oranagra,2021-12-18T09:15:03Z,I would rather this be a feature of the re restart_server proc
771857394,9872,itamarhaber,2021-12-18T19:28:44Z,"```suggestion
# During shut down, a grace period allows any lagging replicas to catch up with
# the latest replication offset before the master exists. This period can
# prevent data loss, especially for deployments without configured disk backups.
#
# The 'shutdown-timeout' value is the grace period's duration in seconds. It is
# only applicable when the instance has replicas. The maximal value is 3600
# (one hour). To disable the feature, set the value to 0.
```"
771857406,9872,itamarhaber,2021-12-18T19:28:58Z,"Or maybe

```suggestion
        ""complexity"": ""O(1) when not saving the data, otherwise O(N) where N is the total number of keys in all databases"",
```"
771908706,9872,oranagra,2021-12-19T07:28:43Z,"""in minutes""? you mean seconds."
771908735,9872,oranagra,2021-12-19T07:29:17Z,edited the suggestion above.
771981731,9872,zuiderkwast,2021-12-19T17:58:02Z,"I think I'll prefer something like ""O(N) when saving, O(1) otherwise""."
771983824,9872,zuiderkwast,2021-12-19T18:18:58Z,"OK, I can do that, but first I want to show another possible approach: taking the offset when shutdown is ongoing and GETACK has been sent. In this way, we get the final offset before the master exits without using NOW.

```Tcl
        set rd [redis_deferring_client]
        $rd shutdown
        set offset [status $master master_repl_offset]
        catch {
            restart_server 0 true false
            set master [srv 0 client]
            
        }
```

:+1: or :-1: ?"
771989808,9872,oranagra,2021-12-19T19:19:23Z,"i feel it's awkward that the test does both SHUTDOWN and restart_server.
i.e. we rely on the fact restart_server will be ok with it.
i'd rather restart_server will take an optional argument indicating how to shutdown.

the other thing that bothers me the risk of the extra GETACK somehow messing up the ability of the replica to PSYNC.
i know that today we avoid sending the GETACK if the replica is already in sync, so all of that won't matter, but i still think it's a good idea to use one shutdown approach in one test and the other approach in the other test (since we have two of them anyway)"
771989879,9872,oranagra,2021-12-19T19:20:01Z,"I think we should mention what's ""N"" when we specify O(N)."
771992875,9872,zuiderkwast,2021-12-19T19:50:24Z,"yes, I said ""something like"", not exactly this. I'll add a commit tomorrow."
771993608,9872,oranagra,2021-12-19T19:57:38Z,I asked @perryitay to take a look at it (he's doing something else in that area)
771993761,9872,oranagra,2021-12-19T19:59:28Z,"ok. i completely forgot that clientPause already has a mechanism for ""conflict resolution"".
so in that case it would have been best to just hand it with the request and let it solve it.
we do that with the pause_type, but not with the timeout, instead we try to keep manual control over it, and that can fail.

it's interesting that the FAILOVER command doing exactly the same (manual unpause), but maybe it's not as severe when there's just one player that does that, and it becomes more severe when there are two doing that trick.

We need to realize that the result of such a clash is partial data loss (doing an unpause, and then either shutting down or failing over, and losing writes)

Since we can't seem to find a good solution, maybe we need more input.
Please sum up the details and concerns of this issue as an open question in the top comment, and we'll call the core-team to review and respond.

one last note, i see FAILOVER uses LLONG_MAX, since mstime_t is long long, and we're using LONG_MAX, they're the same on 64bit, and i don't like to take any risk of different behavior in edge cases on 32 bit, so lets converge."
772002069,9872,oranagra,2021-12-19T21:18:06Z,"```suggestion
    if {$shutdown ne {sigterm}} {
        catch {[dict get $srv ""client""] shutdown $shutdown}
```"
772002368,9872,oranagra,2021-12-19T21:21:14Z,"```suggestion
            # Unlike the test above, here we use sigterm, this is just to
            # increase coverage, and let each test use a different shutdown approach
            restart_server 0 true false
```"
772229851,9872,zuiderkwast,2021-12-20T10:00:50Z,"I added a similar comment in the last test too, so all 3 tests in this suite have a comment at restart_server.

Don't worry about the force-push. I added a file by mistake only in the last commit and amended it a few seconds later."
772642731,9872,yossigo,2021-12-20T20:15:58Z,"@zuiderkwast Are you sure about having an arbitrary max value limit? In cases where this feature may come in handy, might it make sense to simply wait forever (or until the replica drops, or someone force kills the server)?"
772688692,9872,zuiderkwast,2021-12-20T21:48:16Z,"Good question. I don't have a strong opinion about it. Also, I don't have a use case to wait forever. :-)

One reason to set the maximum relatively low is that it's always possible to increase it in the future, but it won't be possible to decrease it without breaking backward compatibility.

What do you suggest? UINT_MAX? Or should we use a magic value such as -1 to wait forever?"
772886125,9872,madolson,2021-12-21T07:24:46Z,"In the past I've advocated for supporting a list of independent timeout events with their own pause level. Since we don't expect many of these timeouts, we can be inefficient in our storage and make the code simple. This code has caused a good bit of confusion, so even making it clearer would be a win."
772916333,9872,oranagra,2021-12-21T08:16:23Z,"@zuiderkwast we discussed this in a core-team meeting, we would like to proceed by adding a separate pause flag per purpose so that pause is effective until the last one is cleared.
please look into that and see what you come up with."
776408427,9872,zuiderkwast,2021-12-29T16:36:42Z,"Per purpose... I can identify 3 purposes: SHUTDOWN, FAILOVER (cluster or standalone) and CLIENT PAUSE. Or do you have a different idea of purpose?

Currently, I think CLIENT UNPAUSE works when clients are paused during FAILOVER. We'll break that, so it's a breaking change. OK?

If CLIENT PAUSE is called twice with different timeouts and modes, the last one overwrites the previous ones, because it's the same purpose. OK?"
776467396,9872,oranagra,2021-12-29T19:30:59Z,"i think for CLIENT PAUSE we should keep the current logic of taking the longer pause and the stronger pause ""level"".
and since we have an explicit FAILOVER ABORT, i do think CLIENT UNPAUSE should not affect it (yes it's a breaking change).
And i guess we might wanna add SHUTDOWN ABORT."
776470595,9872,oranagra,2021-12-29T19:41:15Z,"let's use INT_MAX (just avoid any possible issues with overflow...
alternatively, we can define ""infinite"" as one week maybe? (an hour may be too short for some insane users, but a week should do it?)"
776516026,9872,zuiderkwast,2021-12-29T22:44:26Z,"I added a commit ""separate client pause/unpause per purpose"" to this PR now. I hope it's acceptable. :grimacing: 

SHUTDOWN ABORT we do in a later PR?"
776665999,9872,oranagra,2021-12-30T10:31:26Z,"```suggestion

    /* Find the furthest end time among the pause purposes of the most restrictive type */
    for (int i = 0; i < NUM_PAUSE_PURPOSES; i++) {
```"
776666381,9872,oranagra,2021-12-30T10:32:34Z,"```suggestion
     * so they are reprocessed (may get re-paused). */
```"
776677379,9872,oranagra,2021-12-30T11:03:44Z,"at least for CLIENT PAUSE command, we wanted to take the max end time and most restrictive mode if called twice.
it's a bit odd that CLIENT UNPAUSE cancels both, but i think acceptable.

IIRC FAILOVER is rejected if one is already in progress.
and SHUTDOWN can just silently join the existing shutdown (or we can merge the timeouts, max or min, i don't care)"
776698013,9872,zuiderkwast,2021-12-30T12:06:31Z,":facepalm: you're right. I wanted (but forgot...) to set them to max(old, new) for all purposes, although it only matters for CLIENT PAUSE."
776728607,9872,zuiderkwast,2021-12-30T13:36:07Z,"SHUTDOWN ABORT added in this PR, with tests."
776731565,9872,oranagra,2021-12-30T13:44:07Z,maybe wait for the log message here?
850257911,10536,zuiderkwast,2022-04-14T09:23:50Z,Why does this need a null-terminator when `name` doesn't need it?
850639032,10536,PingXie,2022-04-14T17:03:37Z,"The node description string is created with sdscatfmt, which doesn't support `width` but now that you mentioned it, the null terminator does look out of place. I can switch to sdscatprintf and drop the null terminator. I don't think `clusterGenNodeDescription` is used on any performance critical path so the argument of sdscatfmt being more performant is probably moot. Readability is more important. "
889414071,10536,madolson,2022-06-03T23:40:36Z,"More recently we've tried to name dictTypes by the type of information they have, not by the feature they implement."
889414758,10536,madolson,2022-06-03T23:43:33Z,I would prefer to avoid most of the whitespace changes to preserve githistory.
889415884,10536,madolson,2022-06-03T23:48:24Z,"I think shards are more likely to be artificially imposed than node IDs. I think we should have some mechanism to preserve a shard on all nodes failing. In this flow, you might remove all nodes and then add a new one which will get a new shard ID. 

My thought is either we should allow a config to specify a nodes shard_id. If a node becomes a node and has to generate a shard_id, it should use the provided one, otherwise it should generate its own."
889416342,10536,madolson,2022-06-03T23:50:23Z,"Maybe we should update this to `clusterGetNodesInMyShard`. The weird wording was because ""shard"" wasn't a concept yet."
889416621,10536,madolson,2022-06-03T23:51:29Z,Not sure this assert is necessary.
889417887,10536,madolson,2022-06-03T23:57:32Z,Do we want to change this structure to loop over the shards instead of hunting down the primaries?
889418061,10536,madolson,2022-06-03T23:58:25Z,The node might just be failed though on its own. Maybe instead we should rely on the shard ID to see if there is another node serving the slots?
889419200,10536,madolson,2022-06-04T00:04:17Z,"This should be necessarily, zfree works on NULL and we're just zeroing information."
889419640,10536,madolson,2022-06-04T00:06:33Z,"```suggestion
    return getAlignedPingExtSize(sdslen(myself->hostname) + 1);
```"
889421307,10536,madolson,2022-06-04T00:15:34Z,What does ep stand for? The name doesn't really make any sense to me.
889421623,10536,madolson,2022-06-04T00:17:15Z,I would throw an error if the value is not CLUSTER_NAMELEN and not load something random.
889422133,10536,madolson,2022-06-04T00:20:32Z,"Shouldn't we do some validation that our master has the same shard ID as us here? Which one do we override if they disagree. Based on my previous understanding, we want nodes to be connected to shards and not to specific masters anymore."
889422507,10536,madolson,2022-06-04T00:23:23Z,"```suggestion
    dictEmpty(server.cluster->shards);
```"
889423781,10536,madolson,2022-06-04T00:31:20Z,We can just extract the pointer and pass it to updateShardId(). Doing a copy here is just extra work since we're going to copy it again later anyways.
893067884,10536,PingXie,2022-06-09T04:52:33Z,This dictionary tracks shard membership so would `clusterShardMemberDictType`  be a better name?
893068696,10536,PingXie,2022-06-09T04:54:22Z,endpoint - since this is the endpoint column that is being parsed. Would `endpoint_argc` work better?
893069287,10536,PingXie,2022-06-09T04:55:47Z,Good point. will bail to `fmterr`
893071373,10536,PingXie,2022-06-09T05:00:33Z,Agreed. I think I will bail to `fmterr` if the two don't agree on the shard id.
893071459,10536,PingXie,2022-06-09T05:00:45Z,Ack
893071826,10536,PingXie,2022-06-09T05:01:42Z,Thanks.
893072115,10536,PingXie,2022-06-09T05:02:24Z,+1
893072734,10536,PingXie,2022-06-09T05:03:51Z,Agreed.
893076525,10536,PingXie,2022-06-09T05:12:37Z,"I agree with you that there is value in allowing admin to control the shard id. The implementation should be straightforward. I am not sure though about the mechanism or interface that you have in mind. Are you suggesting a new cluster command like SETSHARDID or something else? FWIW, there is an odd way to reuse/customize the shard_id for a new node, which is through a manually crafted nodes.conf. 
"
893076684,10536,PingXie,2022-06-09T05:12:58Z,+1
893077073,10536,PingXie,2022-06-09T05:13:47Z,+1
893077618,10536,PingXie,2022-06-09T05:15:08Z,Got it. Old habit.
893078144,10536,PingXie,2022-06-09T05:16:14Z,+1
893081060,10536,PingXie,2022-06-09T05:22:53Z,"If the node just failed and no new primary has been elected, its slot count should be non-zero (assuming non-empty shard) so it will get picked up.

I like your suggestion of refactoring this loop to go over the shards dictionary instead so this non-so-intuitive check can be removed I believe"
893155763,10536,zuiderkwast,2022-06-09T07:20:28Z,"I think she meant the *dict type* can potentially be used for other dicts, so we shouldn't name it after the dict it's used for. Something like sdsToListDictType I suppose."
893742443,10536,PingXie,2022-06-09T16:50:31Z,Got it. Is there still a preference for the `cluster` prefix? `clusterSdsToListDictType`?
893819748,10536,PingXie,2022-06-09T18:09:47Z,went with `clusterSdsToListDictType`
902029903,10536,madolson,2022-06-20T22:30:15Z,Yes please :)
902039276,10536,madolson,2022-06-20T22:56:32Z," So I see two options:
1. Set a config like, 'shard_id'. Primaries who aren't attached to other nodes would automatically start with the given shard_id. For replicas, they would use this shard-id to join a specific shard of a cluster, implying replication. 
2. Use an API like `SETSHARDID`, to allow configuring a node to a specific shard. This couldn't be configured at startup, but could be sent after a node has joined the cluster.

Initially I thought option 1 be a better approach since it better allows configuration at ""startup"". However, realistically you will have nodes join the cluster with arbitrary shard IDs, then you would call meet to coral them into a specific shard. So option 2 sounds more sane?"
902043246,10536,madolson,2022-06-20T23:10:25Z,"Since we moved this to a dictionary, we can set the length up front instead of using a deferred length.
```suggestion
    void *shard_replylen = addReplyArrayLen(c, dictSize(server.cluster->shards));
```"
902045742,10536,madolson,2022-06-20T23:19:42Z,"Although not consistent, this is the preferred multi-line bracket placement.
```suggestion
            } else if (clusterGetNodesInMyShard(master) != NULL &&
                       memcmp(master->shard_id, n->shard_id, CLUSTER_NAMELEN) != 0)
            {
```"
902046603,10536,madolson,2022-06-20T23:23:01Z,I suppose all the numbering is not correct anymore.
902085169,10536,PingXie,2022-06-21T01:26:32Z,"How about a `JOINSHARD` primitive? I think it makes more sense to expose a high level construct around shards, as opposed to letting admins manipulate the shard-id directly. Specifically, I propose the below:

A node `N` can explicitly join a shard `S` as identified by its `<shard-id>` via `CLUSTER JOINSHARD <shard-id>` 
* If shard `S` is not empty, `N` will try locating its primary `P` and initiate replication, as long as it sees one live node in `S`
* otherwise, if all nodes in `S` are permanently down, `N` should attempt a manual failover
* otherwise, there is no node in `S` and this means that the cluster is not aware of this shard at all. I'd propose we fail the `JOINSHARD` request.

For completeness, the following two have been implemented in this PR:
1. A new node `N` always starts out in its own shard with an auto-generated shard-id
2. A node `N` implicitly joins an existing shard via `CLUSTER REPLICATE <primary-node-id>`


 "
902086594,10536,PingXie,2022-06-21T01:30:51Z,Good catch. Will update the numbering.
902142196,10536,madolson,2022-06-21T04:04:29Z,Sounds good to me! It generally follows the paradigm of cluster v2 as well.
905608415,10536,PingXie,2022-06-24T00:17:00Z,@madolson what do you think about the logistics here? Do you prefer to having `JOINSHARD` implemented as part of this PR or you are open to a follow up PR?
913073903,10536,madolson,2022-07-04T14:48:16Z,Followup is fine.
913249031,10536,PingXie,2022-07-04T20:01:25Z,created #10935 to track the work on `JOINSHARD`
963214878,10536,PingXie,2022-09-06T03:10:27Z,@madolson which version should I use for `since`?
963354344,10536,zuiderkwast,2022-09-06T07:32:29Z,"```suggestion
    char shard_id[CLUSTER_NAMELEN]; /* shard id, hex string, sha1-size */
```"
963354539,10536,zuiderkwast,2022-09-06T07:32:40Z,"```suggestion
    if {[R $id role] eq ""master""} {
```"
963360877,10536,zuiderkwast,2022-09-06T07:39:12Z,This is identical to `clusterNodesDictType`. Can we use the same for both?
963368880,10536,zuiderkwast,2022-09-06T07:47:19Z,"It seems that aux fields can only be present if hostname is present. What if hostname is missing and shardid is present? Do we have two commas like this: `1.2.3.4:1234@11234,,shardid=abcdef1234567890abcdef1234567890abcdef12`?

If that's the case, the syntax is instead `ip:port[@cport][,hostname[,aux=val]*]`."
963396770,10536,zuiderkwast,2022-09-06T08:15:04Z,"Just noticing this comment. We could store plaintext port in an aux field too, in a future PR. Should we?"
963480134,10536,zuiderkwast,2022-09-06T09:28:32Z,I think the next minor version is 7.2.0
964353875,10536,PingXie,2022-09-07T03:45:07Z,Good catch! Yeah hostname is optional. Will update the comment.
964354462,10536,PingXie,2022-09-07T03:46:48Z,"Not exactly the same as there is a value destructor here.

```
dictType clusterNodesDictType = {
        dictSdsHash,                /* hash function */
        NULL,                       /* key dup */
        NULL,                       /* val dup */
        dictSdsKeyCompare,          /* key compare */
        dictSdsDestructor,          /* key destructor */
        NULL,                       /* val destructor */
        NULL                        /* allow to expand */
};
```"
964354579,10536,PingXie,2022-09-07T03:47:08Z,Will do
964354789,10536,PingXie,2022-09-07T03:47:37Z,Will do.
964362520,10536,PingXie,2022-09-07T04:07:57Z,"My understanding is that the plaintext port comes from the server config. If we persist it here again, then we will have to deal with any potential conflicts. Curios to know what value does it bring us if we were to persist it in nodes.conf as well?"
964362620,10536,PingXie,2022-09-07T04:08:13Z,Will do
964516191,10536,zuiderkwast,2022-09-07T08:01:50Z,"Ah, ok."
964519144,10536,zuiderkwast,2022-09-07T08:04:49Z,"The pport is a server config so the server which has it configured will know it, but if other nodes persist it too, they are able to report it in e.g. CLUSTER SLOTS after a restart, before they get a gossip message from the node with pport configured."
966322285,10536,madolson,2022-09-08T19:00:02Z,"Yeah, I think given that it's a rather large change we need to do it in 7.2"
966652128,10536,PingXie,2022-09-09T05:59:22Z,This sounds like a useful thing if nodes in the same cluster are configured with different ports. Is this also related to the deployment that uses NAT or port forwarding? 
967716947,10536,madolson,2022-09-10T23:55:19Z,"Naming convention wise, probably either NUM_ELEMENTS or numElements(). It looks like min and max are just using camel case, so I suppose numElements."
967717194,10536,madolson,2022-09-10T23:58:44Z,"`cluster-myid` is marked as deterministic, so unclear why this is."
967717240,10536,madolson,2022-09-10T23:59:32Z,"```suggestion
""    Return the node's shard id."",
```"
967717490,10536,madolson,2022-09-11T00:03:01Z,"```suggestion
    dictEntry *de = dictFind(server.cluster->shards, s);
```"
967717494,10536,madolson,2022-09-11T00:03:07Z,"```suggestion
            dictDelete(server.cluster->shards, s);
```"
967717698,10536,madolson,2022-09-11T00:05:55Z,"A node should never exist outside of a shard, so I think it makes more sense to server assert here. EDIT: I see there are some places where the shard map isn't consistent with the individual nodes, so maybe we shouldn't hold this as an invariant, but it would be a nice invariant to have."
967717789,10536,madolson,2022-09-11T00:07:43Z,"```suggestion
             * from pre-7.2 releases */
```"
967718119,10536,madolson,2022-09-11T00:10:13Z,I would also like to see us store the plaintext port. I think I mentioned it in the original port meta data PR that on restart we will not show the correct port for a bit. It would be a good improvement.
967718487,10536,madolson,2022-09-11T00:15:46Z,This comment is inconsistent with the list of allowed characters earlier. 
967718897,10536,madolson,2022-09-11T00:21:30Z,"In all cases, don't we expect `node->shard_id = shard_id`? So wouldn't the signature of `clusterRemoveNodeFromShard(clusterNode *node);` make more sense?"
967719856,10536,madolson,2022-09-11T00:33:35Z,"This doesn't seem quite right. The master's shard id might have been automatically generated, up on line 433, and will have a random shard_id. The replica will be assigned the random shard_id, but the master may have its ID actually set later.

Generally it seems like we should resolve these shard_ids after we're done loading all of the nodes and we can also do the validation then."
967719955,10536,madolson,2022-09-11T00:35:53Z,"Would probably be good to add a comment block here, or earlier, defining what the aux fields are."
967720401,10536,madolson,2022-09-11T00:42:21Z,"This is weird, if the role is master we issue `CLUSTER FAILOVER` to it? Shouldn't this this be if the role is slave"
967833531,10536,zuiderkwast,2022-09-11T13:58:47Z,"Oops. This was originally `if { [regexp ""master"" [R $id role]] == 0 } {` which I suggesting changing to `eq` because it's simpler, but it should of course have been `ne`."
969168465,10536,PingXie,2022-09-13T05:36:09Z,Sounds good to me. Logged #11260 to track the proposal.
969174657,10536,PingXie,2022-09-13T05:47:48Z,"It doesn't look like there is a consistent style for macros with parameters in the Redis codebase but as far as server.h is concerned, the majority seems to be camel cased. `run_with_period` and `STRINGIFY` seem to be the only exceptions. Will change to `numElements` next."
969182307,10536,PingXie,2022-09-13T06:01:03Z,"This is because a node's shard_id can change over time. For instance, when a node is first introduced to the cluster via `CLUSTER MEET`, a random shard_id is generated and assigned to it. Later on, an admin might decide to make it a replica of another node and as a result this node will pick up the new primary's shard_id. "
969207452,10536,PingXie,2022-09-13T06:38:51Z,"Right, there is only one place where this invariant doesn't hold and this is on the nodes.conf loading path when a primary node is ""referenced before defined"". I have added serverAsserts in all other places. The alternative is to make `clusterGetNodesInMyShard` aware of the loading state. It doesn't look very clean to me so I gave it up. Let me know if you have a strong preference or other ideas. "
969210695,10536,PingXie,2022-09-13T06:43:15Z,"Good catch. Make sense. The mental model is that we always remove a member node and if a node is a member of a shard, its shard_id should be equal to the shard's id."
969218867,10536,PingXie,2022-09-13T06:53:48Z,">The master's shard id might have been automatically generated, up on line 433, and will have a random shard_id. 

Correct.

>The replica will be assigned the random shard_id, but the master may have its ID actually set later.

No. The replica will be inheriting the primary's randomly generated shard_id on line 440 even when the loading logic hasn't encountered the definition for the primary node on line 291 and 456. Later on, the loading logic will first hit line 291 where it will find out a `clusterNode` has been created already (by line 433). It then sees ""-"" and takes the branch on line 451 to add itself to the shard created by one of its replicas. The primary will not reset its shard_id."
969230651,10536,PingXie,2022-09-13T07:08:31Z,Will do.
969231646,10536,PingXie,2022-09-13T07:09:51Z,Duh!
970184442,10536,madolson,2022-09-14T00:16:05Z,"I don't have a strong preference, we can leave the code."
973797393,10536,PingXie,2022-09-18T23:40:24Z,It turns out that `ROLE` prints out more information than just the role so I  had to revert back to the regex logic. Not sure though why the tests passed all the time in the CI/CD pipeline.
975704797,10536,PingXie,2022-09-20T18:47:10Z,"@madolson any suggestion on the return value from the setter callback? would C_OK/C_ERR be more preferable? I am essentially using ""boolean"" here. "
975725028,10536,zuiderkwast,2022-09-20T19:11:39Z,"IMHO boolean is good if the name of the function hints that it's a boolean, such as `isValidAuxChar`, whilst for a setter I think OK/ERR is better (or void if it can't fail)."
975735285,10536,PingXie,2022-09-20T19:24:58Z,make sense. yeah this setter can definitely fail (for malformed values). 
977966587,10536,madolson,2022-09-22T18:28:18Z,"From Yossi's comment, we should drop the shard ID from here."
1318051439,10536,enjoy-binbin,2023-09-07T03:46:47Z,"i see we used to use `addReplyLongLong` and now it is `addReplyBulkLongLong`.
and i did not see we mentioned it in the top comment, is this expected?
if so, we should update the docs (in the doc its response is integer). https://redis.io/commands/cluster-shards/"
1318920454,10536,madolson,2023-09-07T17:26:51Z,"No, I think we should revert it back the previous behavior. It was probably unintended."
1319437627,10536,enjoy-binbin,2023-09-08T06:46:03Z,#12561
657080434,9127,guybe7,2021-06-23T13:10:01Z,"end_id is unused.. bug?

also, what happens if the stream has entries 1 thru 10, when 3 and 7 have been XDELeted
and i call this function with start=1, end=6? it'll return 1 even though the range isn't continuous "
657081918,9127,guybe7,2021-06-23T13:11:17Z,"minor: there's already an `streamGetEdgeID` (which does the same, but includes tombstone entries)
maybe somehow unite them and add `int include_tombstones`?"
657085387,9127,guybe7,2021-06-23T13:14:08Z,not sure i got that part..
657162977,9127,itamarhaber,2021-06-23T14:32:53Z,"That's definitely good idea - initially I used it but the tombs were problematic. OTOH, maybe just keep a ""first_id"" at the stream level?"
657172459,9127,itamarhaber,2021-06-23T14:42:18Z,"Assume a stream with at least one entry, then delete all entries with XDEL so length ==  0. The offset of the last ID will be smaller than the next (and first in the stream) XADD, so it can be used for any ID that is LEQ than the last ID."
657828996,9127,itamarhaber,2021-06-24T10:33:39Z,"You're very correct, end_id is unused - fixed.

After the fix the ""what happens"" will not happen."
657829721,9127,itamarhaber,2021-06-24T10:34:56Z,"Rethinking about streamGetEdgeID, that would mean bringing into it most of the logic streamIteratorGetID, so maybe I'll just stick with that for now."
659747020,9127,oranagra,2021-06-28T12:36:31Z,"i'm not certain we need / want to create a new encoding type.
maybe it is easier / better to just keep using `RDB_TYPE_STREAM_LISTPACKS` and look at the rdb version as a judgement if these fields should be read or not (pass rdbver to rdbLoadObject, like we do for rdbLoadMillisecondTime).

this is essentially the same encoding format (listpacks and metadata) as before, with a small twist.

to the best of my knowledge, all the other tools i know that parse rdb file will refuse loading an rdb file if the version is unknown (rather than ignoring the version and hoping the rdb file will not contain any unknown opcode / type)"
659756324,9127,oranagra,2021-06-28T12:49:52Z,"we need to move that reading code to above the rioGetReadError check (it checks the error of several reads before making use of the data we read)

also, the `cg_offset` variable needs to be a 64 bit type."
659838869,9127,oranagra,2021-06-28T14:29:26Z,i see you documented the `tombstone` argument but didn't add it yet.
659843754,9127,oranagra,2021-06-28T14:34:52Z,"the interface and purpose of these two is similar, but the implementation is so much different that i think they can remain separate.
on the other hand, having two separate API for a similar purpose, increases the chances someone will use the wrong one by mistake (not noticing the difference, and what's worse, it's likely they won't even notice the bug), so maybe we should unite these into one even if it hosts two different implementations, just so that we force people to notice the flag?"
659862464,9127,oranagra,2021-06-28T14:55:37Z,"it looks as if you're missing an `end` argument. but actually in this method the end is the last record in the stream, right? or the doc comment needs an update (and a better explanation of what it does and how it works)."
659866223,9127,oranagra,2021-06-28T14:59:49Z,"nitpick, i'd rather see here `>0` and `<0`, not `==1` or `==-1`
same applies for other cases, i'd rather see `<=0` rather than `<1`.
i.e. i'm looking for positive, negative or equal, in relation to 0, not to 1 or -1"
660309455,9127,oranagra,2021-06-29T06:14:10Z,"maybe extend that comment to explain why the next entry must exist (because some of the previous checks validated that we're not looking for something in the far future or the past?), and add an assertion?"
660310264,9127,oranagra,2021-06-29T06:15:52Z,"why do we return the logical start offset here?

i'm looking at all the return values in this function, they're all either `0`, `s->offset`, `s->offset - s->length`, or off by one from the above. i.e. they're all handling special cases.
i can't find the one that can actually return a ""random"" offset that's not the head or tail."
660313799,9127,oranagra,2021-06-29T06:23:21Z,"maybe you should update the 1,2,3 list of additional tasks this method does in the top comment."
660314946,9127,oranagra,2021-06-29T06:25:51Z,"please add a comment that explains what we do here.
also, this call includes an iteration (raxSeek), are we sure we can afford the extra work / complexity here? isn't that a nested loop?"
660316389,9127,oranagra,2021-06-29T06:28:40Z,"i don't think you want the `++` to be part of the condition, i'd rather have +1 here and put the increment inside.
in the current form (since OFFSET is the last one in the if-else chain) it doesn't cause any harm, but if more options will be added, it can mess up the parsing).

nitpick: i vote against line wrapping."
661405741,9127,itamarhaber,2021-06-30T12:17:25Z,"So yeah, the only reason for the new type was to avoid passing rdbver around. I changed that per your suggestion."
661406256,9127,itamarhaber,2021-06-30T12:18:10Z,Added another call to rioGetReadError so the error message is accurate. Fixed the 64b type.
661406550,9127,itamarhaber,2021-06-30T12:18:34Z,Resolved by removing the comment.
661406977,9127,itamarhaber,2021-06-30T12:19:09Z,Doc comment fixed and improved.
661407406,9127,itamarhaber,2021-06-30T12:19:48Z,I love nitpicks and have adopted your suggestion here and going forward.
661407644,9127,itamarhaber,2021-06-30T12:20:07Z,"Comment improved, assertion added."
661408105,9127,itamarhaber,2021-06-30T12:20:39Z,Added a comment to explain - please lmk if it makes sense now.
661408279,9127,itamarhaber,2021-06-30T12:20:52Z,"Added 4 to 1,2,3."
661409783,9127,itamarhaber,2021-06-30T12:22:54Z,"Added a comment.

WRT to extra work, although the iterator is used in the worst-case, it is still a valid concern. I'm not sure how to respond short of trying to benchmark a little. On the other hand, this looks like an argument in favor of keeping 'first_id' as part of the stream struct."
661410336,9127,itamarhaber,2021-06-30T12:23:26Z,"Understood and agreed.

(also unwrapped line(s))."
662191894,9127,oranagra,2021-07-01T11:02:20Z,"i think these line wraps only make the code harder to read.
is your screen too narrow? or does your editor forces that on you automatically?"
662611368,9127,itamarhaber,2021-07-01T21:48:24Z,"> is your screen too narrow

Lol - actually considering to move to the MPB 16""

> r does your editor forces that on you automatically?

No, but due to legacy considerations, I have a ruler at the 80-character column. Will try looking only at the 100 ruler form now on."
662721694,9127,oranagra,2021-07-02T04:04:32Z,"FYI, I noticed a few other places in the diff you had these. 
IMHO it just makes the code harder to read.. "
663358941,9127,itamarhaber,2021-07-03T12:19:59Z,"FYIs, regardless of the interface/s question, this also adds a 'first_id' field to the stream struct."
663857303,9127,itamarhaber,2021-07-05T11:28:43Z,The two were merged with a boolean flag.
663857851,9127,itamarhaber,2021-07-05T11:29:33Z,Changed the naming to something that will tell that the IDs can only be tips
663871606,9127,oranagra,2021-07-05T11:53:01Z,"p.s. i think you should explain in the top comment / commit comment the reasons why we chose to refactor this function.
i.e. it'll also make it clear to the reviewer, that it doesn't change it's outcome (isn't intended to fix a bug)."
663872632,9127,oranagra,2021-07-05T11:54:45Z,"don't we need to use the streamIteratorStart anyway? 
i.e. 
```suggestion
    if (!empty) {
```"
663874720,9127,oranagra,2021-07-05T11:58:20Z,"i think the check for skip_tombstones to be true is excessive
```suggestion
                    (!si->skip_tombstones || !(flags & STREAM_ITEM_FLAG_DELETED)))
```"
664070694,9127,itamarhaber,2021-07-05T17:48:21Z,Added to top.
664072280,9127,itamarhaber,2021-07-05T17:53:26Z,"I don't think so - if we don't want tombstones included, and the stream's length is 0 then we don't need to iterate and can jump to min/max response."
664072899,9127,itamarhaber,2021-07-05T17:55:17Z,:facepalm: fixed
664269377,9127,oranagra,2021-07-06T06:28:44Z,"Ohh, ok. i think this form is easier to understand, but also let's add a comment (both to explain what that block does, and also the condition)
```suggestion
    /* If the stream isn't empty, locate the edge ID (the stream may appear
     * empty, but may still have tombstones). */
    if (!empty || !skip_tombstones) {
```"
716251444,9127,oranagra,2021-09-26T19:44:19Z,Are you sure argc shouldn't be 6?
716627463,9127,itamarhaber,2021-09-27T12:07:17Z,"Thanks, you're of course right."
728753695,9127,oranagra,2021-10-14T08:28:11Z,"let's mention that in the top comment for reviewers that won't bother to read the code?
i.e the fact that we decided to keep using the old `RDB_TYPE_STREAM_LISTPACKS=15` and conclude if it includes the new metadata by looking at the rdb version.
this can possibly cause some issues to other parsing libraries?"
728760809,9127,oranagra,2021-10-14T08:36:52Z,"this would also set the first_id if the stream has only tombstones, right?
that's desired, right?"
728775347,9127,oranagra,2021-10-14T08:54:15Z,"should this limitation be more clearly noted in the top comment?
if not, then at least in the redis.io documentation of this feature, right?"
728782639,9127,oranagra,2021-10-14T09:02:46Z,the top comment of the PR doesn't list these command argument changes.
728786382,9127,oranagra,2021-10-14T09:07:43Z,"please mention the new argument for XSETID in the top comment, and also mention it is used in propagation (AOF / replicas)"
728788777,9127,oranagra,2021-10-14T09:10:40Z,mention in the top comment that XINFO was extended.
728790793,9127,oranagra,2021-10-14T09:13:18Z,"is that the only way to get the lag? is it only an introspection feature?
maybe we want to add some XLAG command?"
728816124,9127,oranagra,2021-10-14T09:44:56Z,"why did you have to change these indexes? is it because the reply is a map and the test ignores it and is coupled with a specific indexes?
lets see of we can improve."
744757752,9127,itamarhaber,2021-11-08T14:09:08Z,"Touched the top, but I don't about other parsing libs... maybe this should be changed to a new encoding?"
744762716,9127,oranagra,2021-11-08T14:14:29Z,"i guess it'll be the safe thing to do..
we probably won't regret changing the encoding, but there is a chance we'll regret not doing that..."
744764551,9127,itamarhaber,2021-11-08T14:16:35Z,"Yes, if the stream had only tombstones before the new entry is appended, this will fire and is desired."
744777334,9127,itamarhaber,2021-11-08T14:29:38Z,"Agreed, both should happen. Adding to the top."
744796568,9127,itamarhaber,2021-11-08T14:49:15Z,Addressed.
744797059,9127,itamarhaber,2021-11-08T14:49:46Z,Done.
744800103,9127,itamarhaber,2021-11-08T14:52:45Z,"Yep, that's the only way to get it. Yep, it's only for introspection/monitoring (potentially triggering a client-side scaling event).

An XLAG command would be sugar-syntax for `XINFO`, so I'm not sure the functionality deserves the API bloat."
744801870,9127,itamarhaber,2021-11-08T14:54:33Z,"Are you talking about RESP3 tests? :)

Sure, that was the hardest part of this PR (aligning the indices)... Oh TCL wizard, please provide guidance for improvement."
744985895,9127,itamarhaber,2021-11-08T18:25:57Z,"Ok, I'll go with a new encoding.

Should I also revert, in this case, the changes I made to carry rdbver into rdbLoad? IIRC this was the only reason to do so."
745715438,9127,oranagra,2021-11-09T15:14:39Z,"sorry for the late response.
these `rdbver` changes don't cause harm and may be useful in the future, but i suppose it's better to revert rather than introduce something we don't actually need."
745736778,9127,oranagra,2021-11-09T15:35:26Z,"yes, we can do one of two things (which i think we must apply to all these tests that mess with XINFO output and hard coded indexes).
1. use `HELLO 3` and then we can process a map. the downside is that we may want to change protocol before and after each XINFO call, so that the rest of the test is in RESP2 (although i don't think it's a must).
2. pass the return value of XINFO though some zipping function that will translate it to a dict

2 is basically this:
```tcl
set l {a 1 b 2 c 3}
set d [dict create {*}$l]
assert_equal [dict get $d b] 2
```"
757790589,9127,itamarhaber,2021-11-27T15:13:29Z,Sure - resolved via 6ea72d188
757934586,9127,itamarhaber,2021-11-28T18:37:28Z,"Resolved via 72a101513, without having to convert the list as TCL allows it :)"
759798945,9127,sundb,2021-12-01T02:05:52Z,"```suggestion
    if (c->argc != 3 && c->argc != 5) {
```"
759803216,9127,sundb,2021-12-01T02:18:09Z,It seems that `xsetid` is forgotten in redis-doc.
759833512,9127,sundb,2021-12-01T03:49:09Z,"This eliminates the need to create `min_id` and `max_id`.
```suggestion
        streamIteratorStart(&si,s,NULL,NULL,!first);
```"
759864397,9127,sundb,2021-12-01T05:28:38Z,Whether the following `else` also need to determine `!si->skip_tombstones`.
760329721,9127,guybe7,2021-12-01T16:02:26Z,rdbver is unused
760337997,9127,guybe7,2021-12-01T16:11:26Z,@itamarhaber ^
760342415,9127,guybe7,2021-12-01T16:16:00Z,can you please add `serverAssert(cg->offset == 0);` ?
760342700,9127,guybe7,2021-12-01T16:16:19Z,typo pffset -> offset
760434930,9127,guybe7,2021-12-01T17:48:01Z,"maybe rename to `streamEstimateDistanceFromFirstEverEntry`

and please document the 4 return option (0, offset, s->offset - s->length, s->offset - s->length +1) and in which cases each is returned"
760438847,9127,guybe7,2021-12-01T17:53:07Z,i think we can revert the change in verifyDumpPayload
760439896,9127,guybe7,2021-12-01T17:54:29Z,"maybe rename to `entries_added`
and the one in CG to `entries_consumed`

if yo do, also the OFFSET token in XGROUP SETID"
760446810,9127,guybe7,2021-12-01T18:03:51Z,redundant 
760928761,9127,sundb,2021-12-02T09:54:28Z,"I feel that `streamIsContiguousRange` does not reflect the true usefulness of this method, perhaps `streamIsContainTombstoneRange` is more appropriate, 8-)."
760943737,9127,sundb,2021-12-02T10:11:42Z,"Should it be better?

```suggestion
    } else {
```"
760987970,9127,sundb,2021-12-02T11:06:59Z,"@guybe7 `XGROUP SETID mystream mygroup 0 1` will cause `last_id` to be zero, and `offset` is 1.
@itamarhaber I'm confused about the `offset` param in `xgroup setid`, how do users know what the `offset` of `last_id`."
762572603,9127,itamarhaber,2021-12-05T14:48:22Z,"Yep. This is ""by the original design"" as the command is only supposed to be used internally for replication. That said. I'm not sure it shouldn't have a man page with a proper warning saying don't use it :)"
762574803,9127,oranagra,2021-12-05T15:05:57Z,"i think we wanna document it (same as other commands invented for the purpose of AOF).

side note: we're gonna delete rewriteAppendOnlyFileRio and friends soon, which should make it unneeded, but i do think there are other tools that will want to use such commands.
e.g. a tool that parses an RDB file and translates it to a stream of commands."
762589026,9127,itamarhaber,2021-12-05T16:59:02Z,"`entries_added` could make sense in place of offset, but `entries_consumed` is misleading. It does count the number of xreads, but it is initialized to the `offset/entries_added` opportunistically. WDUT?"
762590224,9127,itamarhaber,2021-12-05T17:10:07Z,Thanks - resolved via 5165321a4
762590266,9127,itamarhaber,2021-12-05T17:10:23Z,"Agreed, resolved via 5165321a4"
762590331,9127,itamarhaber,2021-12-05T17:10:47Z,"@itamarhaber 🤦
@sundb 🙇‍♂️🙇‍♂️🙇‍♂️
Resolved via 5165321a4"
762590375,9127,itamarhaber,2021-12-05T17:11:02Z,"Yep, forgot that leftover. Resolved via 5165321a4"
762590387,9127,itamarhaber,2021-12-05T17:11:14Z,Resolved via 5165321a4
762590414,9127,itamarhaber,2021-12-05T17:11:28Z,Please see the attempt to resolve via 5165321a4
762590428,9127,itamarhaber,2021-12-05T17:11:38Z,Resolved via 5165321a4
762590473,9127,itamarhaber,2021-12-05T17:11:49Z,I tried improving upon your suggestion :) See 5165321a4
762590492,9127,itamarhaber,2021-12-05T17:11:56Z,Definitely less verbose - resolved via 5165321a4
762718705,9127,sundb,2021-12-06T05:51:15Z,Comments should also be reverted.
762752104,9127,sundb,2021-12-06T07:20:49Z,"```suggestion
        streamIteratorStop(&si);
```"
762858661,9127,sundb,2021-12-06T10:01:43Z,"Should the return value be:
0: no tombstone.
1: contains tombstone.

Now it's opposite."
804737283,9127,itamarhaber,2022-02-11T15:07:14Z,Resolved in redis-doc
804738800,9127,itamarhaber,2022-02-11T15:08:45Z,"Resolved.

@sundb they don't have to know - they can put any positive integer there, and the logic sanitizes it (i.e. it must be the before first, first or last IDs)."
804739597,9127,itamarhaber,2022-02-11T15:09:34Z,"Changed to entries_added and entries_read.

Note: entries_read is only correct, name-wise, in a perfect world."
804740173,9127,itamarhaber,2022-02-11T15:10:12Z,"Resolved, thanks."
804740468,9127,itamarhaber,2022-02-11T15:10:32Z,"Changed the name again, rather than the return."
804745927,9127,itamarhaber,2022-02-11T15:16:16Z,"```suggestion
 * instance and that the checksum is ok.
```"
808099614,9127,guybe7,2022-02-16T15:12:54Z,tyop enries
808166448,9127,guybe7,2022-02-16T16:03:38Z,"what about simply:
```
streamIteratorStart(&si,s,NULL,NULL,!first);
si.skip_tombstones = skip_tombstones;
found = streamIteratorGetID(&si,edge_id,&numfields);
if (!found) {
    *edge_id = first ? max_id : min_id;
}
```"
808170724,9127,guybe7,2022-02-16T16:07:15Z,"maybe move this block before `Copy start ID, if given, or default to 0-0`?"
808173833,9127,guybe7,2022-02-16T16:09:35Z,"1. it makes more sense to check if stream range **has** tombstones, rather than if it doesn't (I know it used to be like that, what changed?)
2. for a clean API please add `streamID *end` (which will always be passed as NULL for now)"
808175702,9127,guybe7,2022-02-16T16:11:04Z,"please start with `valid = 0` (i know it's gonna take more lines, but it's gonna be clearer "
808191595,9127,guybe7,2022-02-16T16:23:10Z,"why do you check `cg->entries_read` here? seems like `if (streamRangeDoesNotContainTombstone(s,&cg->last_id))` is enough, no?"
808196861,9127,guybe7,2022-02-16T16:27:12Z,"maybe it's to ensure that cg->last_id is not 0-0..?

in which case maybe it's better to:
```
if (!s->entries_added) {
    /* The lag of a newly-initialized stream is 0. */
    lag = 0;
} else if (streamIDEqZero(&cg->last_id)) {
    serverAssert(cg->entries_read == 0);
    if (streamRangeDoesNotContainTombstone(s,NULL)) {
        /* The group is at 0-0 of a non-fragmented stream. */
        lag = s->length;
    } else {
        valid = 0;
    }
} else if (streamRangeDoesNotContainTombstone(s,&cg->last_id)) {
   serverAssert(cg->entries_read != 0);
   /* No fragmentation ahead means that the group's logical reads counter
     * is valid for performing the lag calculation. */
    lag = s->entries_added - cg->entries_read;
} else {
/* Attempt to retrieve the group's last ID logical read counter. */
    uint64_t entries_read = streamEstimateDistanceFromFirstEverEntry(s,&cg->last_id);
    if (entries_read) {
        /* A valid counter was obtained. */
        lag = s->entries_added - entries_read;
    } else {
        valid = 0;
    }
}"
808200391,9127,guybe7,2022-02-16T16:29:53Z,"so after our discussion, an ""invalid"" group->entries_read is UINT64_MAX rather than 0, right?"
808203377,9127,guybe7,2022-02-16T16:32:10Z,"i feel that we SHOULD add the ENTRIESADDED modifier in all commands that can take it (same with max_deleted_entry_id, i.e. add MAXDELETEDENTRYID)"
811703210,9127,oranagra,2022-02-22T08:47:49Z,"RESP3 says:
```
Number: an integer in the signed 64 bit range
```"
811705841,9127,oranagra,2022-02-22T08:50:46Z,why was this removed?
811709494,9127,oranagra,2022-02-22T08:54:56Z,"the var type is still signed. but maybe our decision to use unsigned was wrong.
maybe instead we should use LLONG_MIN as the special value?"
812702134,9127,guybe7,2022-02-23T09:32:18Z,"i think that it should be ok to always use `long long` (i.e. the member `entries_read` of the CG struct should be `long long` rather than `uint64_t`) and have `-1` denote that the value is invalid. LLONG_MAX is 9223372036854775807 which is way more than enough.
so we need to revert all related changes in networking.c"
812702691,9127,guybe7,2022-02-23T09:33:00Z,what was wrong with the previous version of the block?
812703049,9127,guybe7,2022-02-23T09:33:22Z,same here
812703881,9127,guybe7,2022-02-23T09:34:23Z,maybe also `#define STREAM_CGROUP_INVALID_ENTRIES_READ -1`
812705449,9127,guybe7,2022-02-23T09:36:11Z,"is this the first-ever ID? or the current first? i.e. if I add 100-0 and 100-1 and then XDEL 100-0 what will be s->first_id?

if it's 100-1 i think it should just be called ""first-id"" and not ""recorded-first-entry-id"""
812708527,9127,guybe7,2022-02-23T09:39:44Z,"@oranagra does that mean that RESP3 does not support anything bigger than LLONG_MAX as a ""number""?"
812710660,9127,guybe7,2022-02-23T09:42:22Z,"but maybe with this nitpick:
```
if (getLongLongFromObjectOrReply(c,c->argv[i+1],&entries_read,NULL) != C_OK) {
  return;
if (entries_read < 0) {
  addReplyError(c,""entries_read must be positive"");
    return;
}
```"
812800319,9127,oranagra,2022-02-23T11:33:29Z,"yes, that's how it looks like in the spec.
of course since that's just a string, you can put bigger values, but not sure what the client will do with that."
812883018,9127,itamarhaber,2022-02-23T13:20:15Z,Sure :)
812920649,9127,sundb,2022-02-23T14:01:16Z,"```suggestion
        addReplyUnsignedLongLong(c,lag);
```"
812922044,9127,itamarhaber,2022-02-23T14:02:46Z,"1. I honestly don't remember... last time I added the ""not"" instead of switching the reply's type
"
812923320,9127,itamarhaber,2022-02-23T14:04:07Z,"It would be 100-1, and it should be call ""first-id"" in the info but we already have another ""first-id"" there (the two are supposed to be identical)."
812923592,9127,sundb,2022-02-23T14:04:24Z,"```suggestion
 * 1. The provided ID, if it even exists, is somewhere between the stream's
```"
812924816,9127,itamarhaber,2022-02-23T14:05:41Z,I realized it was redundant given s->first_id.
812925932,9127,itamarhaber,2022-02-23T14:06:47Z,Yep.
1436902615,9127,enjoy-binbin,2023-12-27T10:08:55Z,"entries_read can be `SCG_INVALID_ENTRIES_READ`, which is -1.
and here `rdbSaveLen` take a `uint64_t` input, so what is actually written here is another value, such as 18446744073709551615

and then when we load this `entries_read` back, we will convert it from `uint64_t` to `long long`, it just happened to be -1 again, so everything was fine. Do we need to make changes here?"
1436941638,9127,oranagra,2023-12-27T10:39:30Z,"@guybe7 recently pointed out to me that RM_SaveSigned has a similar problem (and that RDB_MODULE_OPCODE_SINT is unused).
the implication is that unlike rdbEncodeInteger (used for values of keys), these are less efficient in their file size consumption.

fixing these would mean a new rdb format, and for new versions to be able to properly handle the old one.
since unstable already has an rdb version bump, we can try tackling these two issues if we want.
not a real priority IMHO."
1436987900,9127,enjoy-binbin,2023-12-27T11:44:31Z,"> since unstable already has an rdb version bump

The most recent one was in #11099, released in 7.2. yes, it is not a real priority, i have some spare time these day, just ping me if you want me to fix it"
1436990615,9127,oranagra,2023-12-27T11:49:10Z,"the main benefit for that would be disk space reduction for modules that heavily use RM_SaveSigned.
if you have time you can try to see if this gets complicated (including tests for backwards compatibility)."
783855121,10108,zuiderkwast,2022-01-13T11:05:13Z,I suggest we allow `key_spec_index` to be 0 (and still interpret it as -1 when type isn't KEY). This will allow it to be left out in compound literals such as this one. All the other fields are zero or NULL by default so it's fine to leave them out already. Only this one needs to be set to -1 in a lot of places.
783857530,10108,zuiderkwast,2022-01-13T11:08:37Z,"A single key at a fixed position seems to be very common. Perhaps we can allow `find_keys_type` to be left out in this case and let it default to RANGE {0,1,0}?"
783971585,10108,zuiderkwast,2022-01-13T13:47:15Z,"Following my own suggestion, I added commit ""Allow .key_spec_index = -1 to be omitted"". I'll revert it if it's not acceptable."
783990765,10108,zuiderkwast,2022-01-13T14:09:12Z,I see no benefit whatsoever with this approach. The macros and types all disappear at compile time anyway. I suggest removing the V1 indirection. @guybe7 Did I miss anything?
784000097,10108,zuiderkwast,2022-01-13T14:19:36Z,An alternative to listing all the flags here is to `#define _REDISMODULE_CMD_KEY_NEXT (1<<5)` and then use `_REDISMODULE_CMD_KEY_NEXT - 1` as the set of all flags. What's the reviewer's preference?
784163108,10108,guybe7,2022-01-13T17:14:59Z,how can we maintain backward compatibility if we don't version the struct in redismodule.h
784163939,10108,guybe7,2022-01-13T17:15:58Z,there should be a `version` field at the beginning of each struct
784168308,10108,guybe7,2022-01-13T17:21:35Z,"maybe we really don't need that #define (it's useful only if the writer is agnostic to the version and just passes the struct to the core. see `test_clientinfo`: if we didn't have that #define, the module would have to update the code in case it compiled with a newer redismodule.h, which has V2)"
784169668,10108,guybe7,2022-01-13T17:23:13Z,"in our case we fill the structs, so we have to be aware of the version we're using (if we want to work with a newer redismodule.h we would have to update the module code + make sure we work with a new-enough server)"
784169956,10108,guybe7,2022-01-13T17:23:36Z,"but anyway, we must provide the version of each struct we pass to redis"
784184416,10108,zuiderkwast,2022-01-13T17:41:58Z,"When we add V2, we can rename the structs to xxxV1 and add that `#define RedisModuleCommandInfo RedisModuleCommandInfoV1`, can't we?"
784187983,10108,zuiderkwast,2022-01-13T17:46:39Z,"If the same API should be able to accept both InfoV1 and InfoV2 structs, we need something inside the struct to tell the version, e.g. something like this: (don't we?)

```C
struct Info {
    int version;
    union {
        InfoV1 v1;
        InfoV2 v2;
    } versioned_info;
}
```"
784190107,10108,guybe7,2022-01-13T17:48:26Z,either that or the API will take `void*` and assume the first 8 bytes are the `version`
784190153,10108,zuiderkwast,2022-01-13T17:48:27Z,"... like the Event structures which have a `1` inside them:

```C
static const RedisModuleEvent
    RedisModuleEvent_ReplicationRoleChanged = {
        REDISMODULE_EVENT_REPLICATION_ROLE_CHANGED,
        1
    },
```"
784198055,10108,zuiderkwast,2022-01-13T17:53:28Z,"If we add a version tag inside the struct, I think we only need it for the top-level struct RedisModuleInfo. Everything inside it can be assumed to be V1, don't you think?

Another thing: Do we still want to support V1 in the future, so V2 is opt-in? If yes, then we can let RedisModuleInfo always be V1 and use the new name RedisModuleInfoV2 for the new one...?"
785564116,10108,zuiderkwast,2022-01-17T00:06:54Z,"The version tag makes it a bit awkward to write info literals, especially if we need a version tag in every struct in a nested struct literal.

An alternative is to add another API when we need to add more info (e.g. `RM_SetCommandMoreInfo`). It's slightly ugly but it's very clear in terms of backward compatibility and of what's availability in each Redis version."
785766304,10108,oranagra,2022-01-17T09:15:28Z,"I do agree that any struct we take from the user should have a version field as a first field, and that in this case it should only be present in the top level struct we take as pointer, and probably not in any of the nested structs.

as for the define, the only reason to use a define is if we want modules to by default use a struct name without version, so then when they compile with a newer version of the header, they'll implicitly use the new struct and won't need to manually edit their code to use the new one (change ""v1"" suffix to ""v2"" suffix).
in that case, they're also expected to populate the version field with some ""dynamic"" define (e.g. `REDISMODULE_TYPE_METHOD_VERSION`).

the downside of this is that as soon as the module compiles with the new header, it is automatically bound to the new struct and looses backwards compatibility with old redis versions.
if we don't go with that `define` approach, then a module will only move to `v2` when there's a field it wants to use, that didn't exist in v1.

i think in this case we should model this after other input structs we get (i.e. `RedisModuleTypeMethods`, not `RedisModuleClientInfo`)

WDYT?"
785845296,10108,zuiderkwast,2022-01-17T10:50:36Z,"> I do agree that any struct we take from the user should have a version field as a first field, and that in this case it should only be present in the top level struct we take as pointer, and probably not in any of the nested structs.

@oranagra Fair enough. It's a good compromise.

Observations about RedisModuleTypeMethods:

* RedisModuleTypeMethods has a version field.
* RedisModuleTypeMethods has no version in it's name (defined nor typedeffed).
* The struct pointer parameter has type `void *` (in `RM_CreateDataType`).
* The version macro is changed ""synchronistically"" when Redis is updated.

    <details>
    <summary>""syncronistically""</summary>

    ```C
    /* Version of the RedisModuleTypeMethods structure. Once the RedisModuleTypeMethods 
     * structure is changed, this version number needs to be changed synchronistically. */
    #define REDISMODULE_TYPE_METHOD_VERSION 4
    ```
    </details>

* `RM_CreateDataType` is backward compatible with modules compiled with older versions of this struct, because the size of the struct doesn't matter. The version field is checked before fields added in version X are accessed.
* `RM_CreateDataType` is forward compatible. Future (unknown) versions are accepted and their fields simply have no effect on older Redis. Version checks use `>=` and allow the version to be any number > 0.

The forward/backward compatibilty relies on the fact that there may be unused/unknown fields in the end of the struct. This doesn't work for arrays of structs such as RedisModuleCommandKeySpec (which are packed side-by-side in memory) but it works for the top-level RedisModuleCommandInfo, which is what matters.

I think we shall adopt the this approach, apart from the type `void *` which I don't see the point of."
785854504,10108,oranagra,2022-01-17T10:58:40Z,"ok. so the top level struct will be backwards compatible like the DataType struct, and any nested structs in it can probably be handled using the version field of the top level one.
if / when we made changes to any of these structs, i guess we can always decide to keep the old struct definitions if we want new modules, that use the new header, keep using the old API. or we can force them to use the new one.
either way, redis has a way to be ABI compatible with old ones.

i didn't invest enough time thinking about this.. hope i'm not wrong.
maybe we can make an experiment later (inventing some additional field and see what it leads to)"
785856351,10108,guybe7,2022-01-17T11:00:26Z,should be renamed  to `tips`
786084252,10108,zuiderkwast,2022-01-17T14:59:33Z,"Yes, when your tips PR is merged, I'll update this."
786855411,10108,zuiderkwast,2022-01-18T15:11:17Z,Done. Should and I'll revert.
786856678,10108,zuiderkwast,2022-01-18T15:12:35Z,"Done: Version field added, defines for struct names removed."
789010605,10108,guybe7,2022-01-20T17:52:29Z,"just to make sure we are on the same page:
1. in a year from now we decide that we need some `newmember` in `keyword` in  `RedisModuleCommandKeySpec`
2. we need to define another struct `RedisModuleCommandKeySpec2` with `newmember`
3. we need to add `RedisModuleCommandKeySpec *key_specs2` to `RedisModuleCommandInfo` (Q1: we decided that `RedisModuleCommandInfo` can only expand, we can't change the already-existing content right?)
4. now let's imagine two situations:
   - module that compiled with old redismodule.h runs with new server: the server takes the struct from user (where the last accessible member is `args`), sees the version is `1` and never tries to access `key_specs2`
   - module that compiled with new redismodule.h runs with old server: the module passes a struct with `key_specs2` and version `2` but the server is only aware of version `1` so it's not aware that there's anything after `args`
   
questions/thoughts that require your reply:
1. Q1 above ^
2. is the scenario above describes our design?
3. maybe we should document it in the code? to never modify `RedisModuleCommandInfo`, just add stuff if needed"
789014138,10108,guybe7,2022-01-20T17:57:03Z,"maybe in order to encourage people to stop using the legacy range spec we should fail this API if RM_CreateCommand was called with anything other than `0,0,0` for the range spec?

it will also simplify this code block ^"
789014288,10108,guybe7,2022-01-20T17:57:13Z,@oranagra WDYT?
789014993,10108,guybe7,2022-01-20T17:58:08Z,redundant empty line
789017981,10108,guybe7,2022-01-20T18:01:58Z,PR merged
789018465,10108,guybe7,2022-01-20T18:02:32Z,"we also have more flags now
https://github.com/redis/redis/pull/10122"
789018958,10108,guybe7,2022-01-20T18:03:03Z,thanks
789022434,10108,guybe7,2022-01-20T18:05:45Z,what's the purpose of that `0`?
789023010,10108,guybe7,2022-01-20T18:06:11Z,debug print?
789024675,10108,guybe7,2022-01-20T18:07:28Z,"actually now XADD has a real tip: NONDETERMINISTIC_OUTPUT
so we don't have to fake them anymore"
789074780,10108,zuiderkwast,2022-01-20T19:11:07Z,"If keyspecs are provided in the info struct, I think it makes sense to require legacy (0,0,0). Otherwise, info doesn't touch keyspecs and then I don't think we should fail."
789078482,10108,zuiderkwast,2022-01-20T19:16:36Z,"Oh, I added it intentionally. I think the following comment and code are better separated from the start of the function... But I can delete it the empty line if you prefer."
789079941,10108,zuiderkwast,2022-01-20T19:18:31Z,"Yes, I'm handling them in my merge conflict right now.... :confounded: "
789082683,10108,zuiderkwast,2022-01-20T19:22:26Z,"It's zeroed keyspec marking the end of the keyspec array. This style is used for other arrays too. I though you introduced this style(!?!?)!

[Edit] Oh *that* 0 on line 52.. It's to say that all other fields are zeroed out, I think. There was some GCC warning without this 0, IIRC."
789092745,10108,guybe7,2022-01-20T19:37:16Z,"maybe i misunderstood that `if`

so what's you're saying is that we will fail if:
1. user used the legacy range in RM_CreateCommand (i.e. not 0,0,0); and
2. user gave key specs in RM_SetCommandInfo

is that true? if so, do we already have that check in the code?

other than that I guess you're right... if user used the legacy range and just wants to set the summary or something, we should not fail it"
789093960,10108,guybe7,2022-01-20T19:39:03Z,interesting... i always thought the default behavior of a partial struct initialization is to zero out everything else
789140689,10108,oranagra,2022-01-20T20:51:08Z,"i'm not sure i understand everything (short in time), but i'd like to raise this concern (which we did discuss in the past).

a new module is compiled with a new redismodule.h, but that module wants to still be ABI compatible with old redis versions.
so it registers its commands with the old API, and then calls the new one only if it's non-NULL.
this module will still wanna pass the legacy key-spec to the initial command registration."
789154911,10108,oranagra,2022-01-20T21:14:04Z,"the compiler does zero all the uninitialized fields.
and it does also issue a warning. but our makefile disables it `-Wno-missing-field-initializers`"
789186438,10108,zuiderkwast,2022-01-20T22:06:06Z,"@oranagra That's what the PR does now. (The if statement here just checks that setcommandinfo hasn't been called before for the same command, mainly to avoid freeing the old allocated info.)

@guybe7 agree? If yes, resolve?"
789187707,10108,zuiderkwast,2022-01-20T22:08:29Z,"Yes, good catch ;)"
789457734,10108,guybe7,2022-01-21T08:41:19Z,"ok, resolved (for some reason the ""resolve"" button disappeared.. i can only comment)"
789458127,10108,guybe7,2022-01-21T08:41:53Z,maybe we want to add that -W to the modules' Makefile?
789527720,10108,zuiderkwast,2022-01-21T10:12:20Z,"It's pretty hard to debug why a CommandInfo is invalid, so some form of debug log would be helpful for module developers.

Is calling `serverLog(LL_DEBUG, ""description of what's invalid"")` from validateCommandInfo a good idea?"
789712822,10108,zuiderkwast,2022-01-21T14:40:15Z,Debug logging added as described.
790145453,10108,oranagra,2022-01-22T14:00:42Z,"what's that? i don't see any reference to it in docs or code.
actually i also don't see any reference to BS_INVALID.
are you just trying to avoid a value of 0 being used by mistake?"
790145728,10108,oranagra,2022-01-22T14:03:49Z,"since all this text doesn't go to the documentation anyway, maybe we should avoid duplicating it (could easily get outdated), and instead just add a comment that refers to server.h?

or do we thing it's very valuable for someone who copied this header file into his module?"
790146443,10108,oranagra,2022-01-22T14:11:57Z,"so pretty soon, we'll add the reply schema (https://github.com/redis/redis/issues/9845), increment the version and add one more field at the end f the struct?
similarly, we can also add fields in any other struct, like RedisModuleCommandArg "
790146677,10108,oranagra,2022-01-22T14:15:23Z,let's mention all these details in the PR top comment.
790147009,10108,oranagra,2022-01-22T14:19:34Z,"maybe mention that this can replace the replace the arity check inside the module call.
and that 0 means no checks"
790147509,10108,oranagra,2022-01-22T14:24:35Z,"isn't it much easier for the module to ""decleratively"" provide one space separated string?
also a bit more consistent with the command flags for RM_CreateCommand"
790147693,10108,oranagra,2022-01-22T14:26:29Z,"we need to document how this is related to RM_IsKeysPositionRequest and the `getkeys-api` flag.
AFAICT the key-specs are now used for COMMAND INFO (i.e. clients), and ACL.
anything else (e.g. cluster, and COMMAND GETKEYS) is using the old way.

maybe at this point we rather not document that (which one uses what), but make sure to tell modules they need to support both."
790147806,10108,oranagra,2022-01-22T14:27:57Z,"i think the ""may be NULL"" is confusing (when comes after the memset zero).
maybe instead start the sentence by saying it's optional?"
790147888,10108,oranagra,2022-01-22T14:29:14Z,"we need to tell the module what this is used for.
i.e. this field is only used to generate COMMAND DOCS (not used by redis).
let's do that for each of the fields of the RedisModuleCommandInfo struct."
790148188,10108,oranagra,2022-01-22T14:31:59Z,this block is outdated. delete it?
790148289,10108,oranagra,2022-01-22T14:33:10Z,let's do the TODOs
790148433,10108,oranagra,2022-01-22T14:34:44Z,"do we need to document that redis doesn't keep pointers to any of the input to this function?
the module is free to release them...

alternatively, considering that most modules will have these declared statically, we're just wasting memory..
maybe instead of duplicating all these strings we should document that the module should keep them available?"
790148713,10108,oranagra,2022-01-22T14:37:38Z,"the use of calloc here seems excessive (we're gonna override all the fields except the first).
if this pattern is all over the place, i'd rather use malloc and set the last one to NULL."
790148975,10108,oranagra,2022-01-22T14:40:24Z,"let's comment that the assertion is ok because we validate that in moduleValidateCommandInfo
same in the other assertion below."
790149242,10108,oranagra,2022-01-22T14:43:47Z,"value flags are not mutually exclusive.
only 3 for write are."
790149563,10108,oranagra,2022-01-22T14:47:14Z,"i didn't see that `BS_UNKNOWN` and `FK_UNKNOWN` are documented.
i suppose we wanna state they mean that there's no way to find the keys of the command other than using the `getkeys-api` mechanism."
790149894,10108,oranagra,2022-01-22T14:50:51Z,"considering these logs are the only way a module developer can realize what he did wrong.
i think that:
1. let's document that.
2. let's make them LL_WARNING"
790157243,10108,oranagra,2022-01-22T16:12:59Z,"ohh, now i understand `REDISMODULE_KSPEC_FK_OMITTED`).
would have been better to use it here. (and in the other `case 0:`).
and comment in the declaration of `FK_OMITTED` that it has to be 0 for that reason.

i now realize that you want the module to rely on the struct initialization to 0, rather than explicitly use `FK_OMITTED` in it's code

i suppose that for many modules that need just one key in a constant position, that shorthand is saving a few chars.
but also, for these, there's actually no need to define the key spec, right?
the legacy keyspec set by RM_CreateCommand, so i'm not sure there's a lot of value in that trick."
790158431,10108,oranagra,2022-01-22T16:25:14Z,"i don't understand how we test here the legacy range gluing if the command is registered with 0,0,0 (no keys)?

correct me if i'm wrong, but the idea is that simple 1 key commands don't need to declare key-specs at all (unless they wanna provide flags).

i suppose we need to test these:
1. module that's only using the basic RM_CreateCommand. we wanna test that COMMAND INFO does show one spec (without flags).
2. module that's using RM_CreateCommand to register the spec (to be backwards compatible with old redis versions), and later provides the same spec using RM_SetCommandInfo to add the flags.
3. module that declares one spec using RM_CreateCommand and adds another using RM_CreateCommand (i.e. gluing, this is what `createKspecComplex1` below seems to test)

i suppose we also wanna document this (provide recommendation on how it should be used).
@guybe7 @yossigo please provide feedback.

p.s. when combining this with the `getkeys-api` flag and the `RM_KeyAtPos`, this topic is a complete mess."
790160371,10108,oranagra,2022-01-22T16:47:11Z,"```suggestion
        set redis_reply [dict create {*}[lindex [r command docs xadd] 1]]
        set module_reply [dict create {*}[lindex [r command docs cmdintrospection.xadd] 1]]
        # Compare the map. We need to pop ""group"" first
```"
790174759,10108,zuiderkwast,2022-01-22T19:02:52Z,"> are you just trying to avoid a value of 0 being used by mistake?

Exactly. Sensible behaviour when the field is omitted."
790174940,10108,zuiderkwast,2022-01-22T19:05:24Z,Good point. I'll remove most of it.
790175413,10108,zuiderkwast,2022-01-22T19:10:14Z,"Adding a field to the top-level struct is fine, but adding a field to the arg struct is problematic. Args is an array so the size matters. Key specs too."
790175936,10108,zuiderkwast,2022-01-22T19:16:19Z,"Sure, I can change it. Key spec flags could also be a space-separated string. Change that too?"
790176079,10108,zuiderkwast,2022-01-22T19:17:37Z,"Sure, or I just delete ""may be null"". Before the list it' already stated that all fields are optional except version."
790176199,10108,zuiderkwast,2022-01-22T19:19:31Z,I'm thinking that examples should be on a separare page in the documentation. Maybe the module intro page.
790176456,10108,oranagra,2022-01-22T19:23:03Z,"Ohh, right. Well, making these an array of pointers will defeat the purpose of ease of use. 
I guess we'll have to find another way to provide the extra data when the day comes. 
The other alternative I see is add another spare / reserved pointer in each. 
For key-specs, I'm starting to consider a per-spec description soon.. 
E.G. On SORT we have 3 specs, and it's hard even for us to keep track of what each of them means and why it's there. 
So maybe add 2 reserved pointer in each? (args, and specs) "
790176876,10108,oranagra,2022-01-22T19:27:39Z,"These are not really examples, they just refer to an equivalent argument in a standard redis command, so it's easier to understand the flag. 
It's just enough to say something like `like the XXX arg in YYY`"
790177074,10108,oranagra,2022-01-22T19:30:45Z,"@guybe7 wdyt?
I'm thinking that it's both easier (shorter) and more consistent with other API. 
But the downside is that there's no compile time validation. (but that's not covering the mutually exclusive concern which is anyway runtime only) "
790177802,10108,zuiderkwast,2022-01-22T19:39:15Z,"TBH i didn't know exactly what they mean, only that they exist. I suppose what you suppose. I'll doc like that."
790190140,10108,zuiderkwast,2022-01-22T22:12:21Z,"The legacy triple is updated when keyspecs is set and a default key-spec is creates from the old triple, so why do they need to set both?

Brw, isn't it high prio to make cluster and getkeys use the new key-specs?"
790190480,10108,zuiderkwast,2022-01-22T22:17:12Z,So in practice we can require that all `const char *` are literals (or at least static) but we'll copy everything else? That's good because ATM we nees to cast the strings to `char *` to free them.
790190891,10108,zuiderkwast,2022-01-22T22:23:07Z,"If we want to be able to add fields to these struct arrays, we can instead use pointer arrays. It would allow us to add fields, but AFAIK it kills the possibility to write the whole info in one big nested literal.

Or do you have another solution to this?"
790191643,10108,zuiderkwast,2022-01-22T22:33:44Z,@guybe7 you wrote these tests originally? Maybe you know what the idea was? I merely converted them to the declarative style.
790192966,10108,zuiderkwast,2022-01-22T22:52:44Z,Keyspecs are only needed to set flags in that case.  Don't we want modules to provide flags?
790234832,10108,oranagra,2022-01-23T06:48:08Z,"as i said:
> making these an array of pointers will defeat the purpose of ease of use

so no, i think we should keep it as is, but let's add two spare pointers in each of these structs"
790235301,10108,oranagra,2022-01-23T06:54:12Z,"by both, i didn't mean the initial triple, and key specs.
although that too might be true.
i.e. that modules need to use the initial triple if they want to be compatible with old redis versions (and still show something in COMMAND command).

what i meant about both is both key-specs (i consider the initial triple to be part of the key-spsc), and the `getkeys-api` mechanism.
i.e. some mechanisms in redis user only the later, and some only the first.
and also need to keep in mind the fact that some complicated commands may not be possible to define with key-specs, in which case they need to use the invalid spec and implement the `getkeys-api`.

so we somehow need to document all of that.
maybe we don't want to document which mechanism in redis uses which, but we do want to mention that both need to be handled (i.e. both specs, and getkeys-api)"
790235478,10108,oranagra,2022-01-23T06:56:02Z,"i think that'll be a good approach (don't dup these strings).
@yossigo @MeirShpilraien @guybe7?"
790235676,10108,oranagra,2022-01-23T06:58:55Z,"yes, we do... we must: https://github.com/redis/redis/issues/10144
i suppose i'm ok with this OMITTED thing. just needs some additional comments."
790235777,10108,oranagra,2022-01-23T07:00:39Z,"i think the idea was to make sure specs are merged (i remember discussing case 3 with him), but looking at the test i think it's missing part of the point.
please extend the tests to cover all these cases."
790256130,10108,yossigo,2022-01-23T10:25:52Z,@oranagra I think I actually prefer copying. Memory is probably going to be insignificant and it provide a more decoupled interface.
790260018,10108,yossigo,2022-01-23T11:00:43Z,"@oranagra Is there a real use case for [3]?
Regarding `getkeys-api`, maybe it's time to deprecate it? Possibly produce a warning if command info is attached to a command that has it enabled? I realize some commands may not be keyspecs-compatible but in the long term we do want module developers to align with keyspecs."
790269659,10108,oranagra,2022-01-23T12:28:37Z,"let me try to analyze two separate concerns:

1. what modules had to do for redis 6.0.
  For 6.0, modules had to use both the initial triplet (for cluster aware clients), and also the getkeys-api (for everything else, inside redis, and COMMAND GETKEYS)
2. what we expect modules to do for 7.0.
  for 7.0, we can maybe rely only on key-specs, but the fact is that they're a lot more work to declare, so maybe for simple modules, that require only one key, we can let them keep using the initial triplet (in theory, that can serve them for anything, including ACL, except for cases where ACL is used with explicit read or write permissions).

Note however that this is not yet the case. current code in unstable still replies on getkeys-api for anything other than ACL (and COMMAND command).
i.e. it uses that for COMMAND GETKEYS, client side tracking, cluster decisions, and RM_GetCommandKeys.

Modules that want to support two versions of redis, will be able to implement both methods, i.e. use the old API, and also the new API when it's available.
so the use case for [3] is that a module which was written for redis 6, has to declare the initial triplet (for cluster aware clients), but also use the `getkeys-api` in for the sake of well, anything else. and declare key-specs for 7.0 ACL.
I don't see any way around this since ACL (at least per key read and write permissions) must rely on key-specs, and in order to support redis 6.0, the module must provide both getkeys-api and the initial triplet."
790318394,10108,yossigo,2022-01-23T19:12:36Z,@oranagra This makes sense. But what about option [3] above? Why would a module provide an incomplete triplet and later pass that using command info?
790324958,10108,oranagra,2022-01-23T20:09:32Z,"@yossigo it'll pass the first triplet to be compatible with redis 6.0 and cluster aware clients.
it can later pass the same triplet again in key-specs in order to provide flags.
and it can pass additional specs (e.g. a STORE argument) which it couldn't expose before.

I don't recall what the ""gluing"" term was about (in the original key-specs PR).
it could have meant to glue two adjacent range specs into one. "
790519630,10108,guybe7,2022-01-24T08:47:44Z,"key-specs flags are given in the form of OR-ed bit masks and I don't think we should be dealing with strings... command tips, on the other hand, are always strings... so for tips I guess it's ok if we use a space-separated string"
790561837,10108,guybe7,2022-01-24T09:39:56Z,i also don't like that we cast `const` stuff just to release it but I think we should still copy due to Yossi's points
790562646,10108,guybe7,2022-01-24T09:40:48Z,maybe use serverPanic instead of serverAssert?
790712720,10108,yossigo,2022-01-24T12:52:18Z,"Discussed this with @oranagra, and another option is for the module to populate the `sizeof` of each array type (possibly hidden behind some macro). On the Redis side, this will allow us to do pointer arithmetic and be able to properly handle the array even if the module's `sizeof` has increased (because it's a newer version)."
790895184,10108,zuiderkwast,2022-01-24T16:07:07Z,@yossigo any idea how this would look like?
791005373,10108,zuiderkwast,2022-01-24T17:45:03Z,"Yes, this is a mess. It's too much to require both from a module.

When documenting this, I'd like to at least mention when/why the getkeys-api is needed, but we shouldn't mention too much because we want to change it...

Ideally, the getkeys-api is only needed for UNKNOWN keyspecs and movable keys without keyspec. Can we improve this in a separate PR?"
791089502,10108,oranagra,2022-01-24T19:35:24Z,"i think i'd rather finish this discussion in this PR, so we can look at the outcome and decide if we're happy with it.
p.s. we did decide that we're surely not including this in RC1.. don't wanna make any rush decisions.. we need time to process this and be sure we have a solid API."
791091910,10108,oranagra,2022-01-24T19:38:43Z,"btw, i spoke with Guy about that test and the ""gluing"" part.
the test attempted to test that two separate range key-specs that are defined with the new API (e.g. each one with different flags), are shown in the legacy part of COMMAND command output as one range.

i.e. the gluing is not about gluing key-specs together, or gluing them with what's defined in RM_CreateCommand.
it's about the output of the legacy part of COMMAND command."
791093355,10108,zuiderkwast,2022-01-24T19:40:36Z,OK. Conclusion? Should I add some comments?
791094083,10108,zuiderkwast,2022-01-24T19:41:39Z,tips changed to space-separated. key-specs flags not changed.
791097369,10108,zuiderkwast,2022-01-24T19:46:14Z,"Idea: `RedisModule_SetCommandInfo` can be defined as a `static inline` function (or a macro) in `redismodule.h`, which sets the version and size fields and then calls the real (but undocumented) API function."
791098817,10108,zuiderkwast,2022-01-24T19:48:24Z,Keeping dup for now. Resolved?
791099463,10108,oranagra,2022-01-24T19:49:20Z,"i think
1. add comments about the gluing and what this test verifies (the legacy response of COMMAND), please verify that the test really does that.
2. add comments in the gluing code that specifies that too (that it's for the output of COMMAND command)
3. we don't need the registration of key-specs to amend what's given in the first triplet. but we do need it to be able to  override it (to add flags), please add a test for it.
4. we do need to document that both key-specs and getkeys-api are needed.
5. we do need to document that the triplet for RM_CreateCommand is needed if you wanna also support old versions of redis."
791107988,10108,oranagra,2022-01-24T20:01:35Z,yes. resolving.
795782774,10108,oranagra,2022-01-31T15:29:33Z,"```suggestion
 *   good idea to supply both key-specs and a implement the getkeys-api.
```"
795796754,10108,oranagra,2022-01-31T15:40:36Z,"HSET is a bad example IMHO (it's non variadic form has them mandatory, so they only reason it's a BLOCK is because it's an HMSET).
let's search for some optional group that's not for the purpose of being variadic.
maybe the optional LIMIT block of ZRANGE?"
795800008,10108,oranagra,2022-01-31T15:43:57Z,"let's check if this trick works well enough for other languages (Rast / Java?)
i assume they'll need to call `RM_SetCommandInfo_` and populate the version and size fields manually?
@yoav-steinberg @MeirShpilraien ?"
795804520,10108,oranagra,2022-01-31T15:48:31Z,"i must say i don't like this pattern.
both the multi-line `for`, but more importantly a loop with no body.
if we're wasting so many lines, it might as well be a simple `while` that increments the `count` in the body."
795818689,10108,oranagra,2022-01-31T16:02:24Z,"we probably need to expose VARIABLE_FLAGS too.
which means that the flags provided by the key-spec may be different than the ones provided by the getkeys-api (more specific to the exact args passed)"
795819720,10108,oranagra,2022-01-31T16:03:28Z,wanna add a variant of `RM_KeyAtPos` that takes flags as part of this PR? or the next one?
795821742,10108,oranagra,2022-01-31T16:05:38Z,key-specs now have a new notes field. let's expose it.
795822897,10108,oranagra,2022-01-31T16:06:50Z,"```suggestion
/* This is the real definition of RM_SetCommandInfo. It sets the version fields to
```"
795859766,10108,zuiderkwast,2022-01-31T16:44:01Z,"OK, I'll change to

```C
size_t count = 0;
while (moduleCmdKeySpecAt(version, info->key_specs, count)->begin_search_type) count++;
```"
795863180,10108,zuiderkwast,2022-01-31T16:47:27Z,This is the problem with keeping PRs for a long time. This PR was ready before VARIABLE_FLAGS and keyspec notes existed. :-) So I think we can postpone to the next PR adding the KeyAtPosWithFlags and making the keypos-api smarter by infering positions from keyspecs when possible.
795890772,10108,oranagra,2022-01-31T17:17:00Z,"I understand the general problem and principle, not sure it's applicable in this case. 
I don't mind postponing this, but for the sake of arguing... 
The reason this PR was postponed was because its priority was demoted, and the reason the variable flags PR was promoted is because it became urgent. We had to resolve certain things before the release and it was OK to leave other out. 

I wouldn't want to add content to this PR if it was controversial and deciding on it or implementing it could have delayed the rest of this PR. 
But this api is kinda trivia. And i think certain things are better be judged together (so we can make sure we understand the final picture before merging) 
(unlike we what we had with the commands and functions projects that  kept changing again and again with each PR) "
795911906,10108,oranagra,2022-01-31T17:40:53Z,"On a second thought, it should be judged together with another change (ACL, and tests), so let's leave it out. "
796178379,10108,zuiderkwast,2022-02-01T00:30:18Z,VARIABLE_FLAGS added.
796580981,10108,zuiderkwast,2022-02-01T13:11:27Z,"> i think
> 
> 1. add comments about the gluing and what this test verifies (the legacy response of COMMAND), please verify that the test really does that.

Done.

> 2. add comments in the gluing code that specifies that too (that it's for the output of COMMAND command)

There is already a very detailed comment at the definition of `populateCommandLegacyRangeSpec` in server.c. It's used by non-module commands too. It starts like this: *The purpose of this function is to try to ""glue"" consecutive range key specs in order to build the legacy (first,last,step) spec used by the COMMAND command. (...)*

I added a brief comment at the call to this function in module.c too, to explain what it does.

> 3. we don't need the registration of key-specs to amend what's given in the first triplet. but we do need it to be able to  override it (to add flags), please add a test for it.

If you by ""amend"" mean combine information from the triplet with keyspecs, then I'm with you. The legacy triple is simply overridden by `populateCommandLegacyRangeSpec`, which is called if any key specs are provided. 

This test is verifying that, isn't it? If not, I don't see what test you're asking for here. Updating the legacy triple is done in the same way for module commands as for builtin commands.

> 4. we do need to document that both key-specs and getkeys-api are needed.

Adding this in the RM_SetCommandInfo docs: ""Note that key-specs don't fully replace the ""getkeys-api"" (see RM_CreateCommand, RM_IsKeysPositionRequest and RM_KeyAtPos) so it may be a good idea to supply both key-specs and a implement the getkeys-api.""

> 5. we do need to document that the triplet for RM_CreateCommand is needed if you wanna also support old versions of redis.

Adding this in the RM_SetCommandInfo docs: ""Key-specs cause the triplet (firstkey, lastkey, keystep) given in RM_CreateCommand to be recomputed, but it is still useful to provide these three parameters in RM_CreateCommand, to better support old Redis versions where RM_SetCommandInfo is not available."""
796612975,10108,oranagra,2022-02-01T13:49:10Z,"> If you by ""amend"" mean combine information from the triplet with keyspecs, then I'm with you.

by ""amend"" i meant glue specs that seem consecutive into one.

> The legacy triple is simply overridden by populateCommandLegacyRangeSpec, which is called if any key specs are provided.

too lazy / busy to check.. is it overridden just in case they're matching (range spec with the same first/last/step)?
or does any spec added by key-specs overrides what's defined in command creation?
i prefer to override only if they're matching.

> This test is verifying that, isn't it? If not, I don't see what test you're asking for here. Updating the legacy triple is done in the same way for module commands as for builtin commands.

haven't looked at the test yet.
i think we should verify:
1. a key-spec that's added which is the same as the one used in command creation (being overwritten).
2. a key-spec that's added in addition to the one in command creation.
3. in both cases we need to check the key-specs in COMMAND output (and their flags), but also the legacy output of COMMAND command."
796649790,10108,zuiderkwast,2022-02-01T14:27:41Z,"I'm reluctant to treating module commands differently than native commands. This is the function in server.c that populates the (first,last,step) triple for all native Redis commands. (It's called by populateCommandTable which infers everything that isn't specified in in the command JSON data).

TL;DR: It glues consecutive keyspec ranges into one triple when it's strait-forward to do so. If it isn't possible, the function leaves the legacy triple unchanged. Thus, it's always safe to call it, regardles of whether an explicit legacy triple has been set or not.

```C
/* The purpose of this function is to try to ""glue"" consecutive range
 * key specs in order to build the legacy (first,last,step) spec
 * used by the COMMAND command.
 * By far the most common case is just one range spec (e.g. SET)
 * but some commands' ranges were split into two or more ranges
 * in order to have different flags for different keys (e.g. SMOVE,
 * first key is ""read write"", second key is ""write"").
 *
 * This functions uses very basic heuristics and is ""best effort"":
 * 1. Only commands which have only ""range"" specs are considered.
 * 2. Only range specs with keystep of 1 are considered.
 * 3. The order of the range specs must be ascending (i.e.
 *    lastkey of spec[i] == firstkey-1 of spec[i+1]).
 *
 * This function will succeed on all native Redis commands and may
 * fail on module commands, even if it only has ""range"" specs that
 * could actually be ""glued"", in the following cases:
 * 1. The order of ""range"" specs is not ascending (e.g. the spec for
 *    the key at index 2 was added before the spec of the key at
 *    index 1).
 * 2. The ""range"" specs have keystep >1.
 *
 * If this functions fails it means that the legacy (first,last,step)
 * spec used by COMMAND will show 0,0,0. This is not a dire situation
 * because anyway the legacy (first,last,step) spec is to be deprecated
 * and one should use the new key specs scheme.
 */
void populateCommandLegacyRangeSpec(struct redisCommand *c) {
```

Only one thing above is incorrect: it doesn't set the triple to (0,0,0) on failure. It simply leaves the triple unchanged on failure. (It matters only if it had any value before this function was called)."
796663792,10108,oranagra,2022-02-01T14:41:12Z,"@zuiderkwast the difference between modules and native redis commands, is that native command don't declare this triple, they only declare key-specs, and this code populates that triple for the benefit of the output of COMMAND command.
An example is LMOVE which has two key-specs, that are glued together for a single range triple in COMMAND output.

for module commands, they do provide the triple, so only here we're facing the dilemma of overwriting or gluing.
since we do want modules (e.g. ones with a single key argument) to use both (one for compatibility with old redis versions, and the other for the key-spec flags), we need to handle an overwrite case.

i.e two examples and how i think they should be handled:
1. a command with a single key argument. will use the initial triple for old version compat, and a key-spec for new redis versions (with flags), in this case we certainly wanna override.
2. a module with a command like LMOVE, may be using a 2 key triple in the command registration, and then define two key-specs. i suppose the first spec can override the initial triple, and then the second spec be glued (for a 2 key output in the legacy triple of COMMAND command)"
796713979,10108,zuiderkwast,2022-02-01T15:29:40Z,"@oranagra It's seems that you disagree (for the sake of arguing? :grin:) but in the last example we actually seem to agree.

> 2. a module with a command like LMOVE, may be using a 2 key triple in the command registration, and then define two key-specs. i suppose the first spec can override the initial triple, and then the second spec be glued (for a 2 key output in the legacy triple of COMMAND command)

This can also be seen as both specs together override the triple. Isn't this gluing (range-concatenation) and amending the same thing?"
796767704,10108,oranagra,2022-02-01T16:21:28Z,"not for the sake of arguing. trying to break it down and figure out what's right.

i the beginning of this discussion i thought key-specs are glued (as key-specs), or that the initial triple can be glued with key-spec. but now i understand that gluing is only needed for the purpose of the backwards compatible output of COMMAND command.
and that the module API for command registration is just for compatibility with old modules, and should be overwritten by key-specs completely (if defined).

however, when key-specs are defined, several specs could be glued into one triple of COMMAND output, that's the same as with redis native commands.
but not glued into the one defined by the command creation triple.

not sure which gaps we still have, but i suppose seeing either the implementation of the tests, we can spot them."
798011596,10108,oranagra,2022-02-02T21:05:15Z,"i've reviewed the code and tests again (finally bothered to look at the fact and not just talk about them).
first, in contrast to what it was in the past, key-specs are not defined incrementally, they're declared in one go.
when that happens, if there are any range specs, they completely override the legacy spec that's defined in the command creation (and if there's an opportunity to glue several specs into one legacy spec we do that).
if there are no range specs, then whatever was defined at command creation remains in the legacy spec.
the tests cover these cases (the overwrite).

what i think the tests don't cover is:
1. a case where a module doesn't declare key-specs at all. the test can verify that there are no key-specs, but the triple in COMMAND info exists.
2. a case where the module declares only non-range specs, so the legacy range in command creation survived? (i'm not certain if that's the right behavior, we could have also wiped it, but i'm not sure why a module would do such a thing).

p.s. in one of my previous comments i said: ""a key-spec that's added in addition to the one in command creation."", i guess that's wrong. we never create key-specs from the initial triple, and when key-specs are defined we should always override that triple if possible, not amend to it."
798292729,10108,MeirShpilraien,2022-02-03T07:43:47Z,"@oranagra I believe this should work just fine (for sure in Rust, in java there will be probably another wrapper that will be able to call `RedisModule_SetCommandInfo`)."
798304940,10108,oranagra,2022-02-03T08:04:04Z,@gkorland maybe you wanna take a look here too (comment if you see any problem with this trick)
798437486,10108,zuiderkwast,2022-02-03T10:47:44Z,"Yes, obviously all key-specs come in one go, in an array. (I though it's so obvious I didn't even explain it, thus confusion.)

I've added the two tests mentioned, without changing any implementation for now. In the second case (only non-range specs), the legacy triple is wiped.  I guess the comment in server.c is right actually, and it can be seen from the first line in the function (memset):

```C
/* (...)
 * If this functions fails it means that the legacy (first,last,step)
 * spec used by COMMAND will show 0,0,0. This is not a dire situation
 * because anyway the legacy (first,last,step) spec is to be deprecated
 * and one should use the new key specs scheme.
 */
void populateCommandLegacyRangeSpec(struct redisCommand *c) {
    memset(&c->legacy_range_key_spec, 0, sizeof(c->legacy_range_key_spec));
```

WDYT? Should we avoid clearing the triple for module commands?"
798476383,10108,oranagra,2022-02-03T11:37:54Z,"thanks.
i'm actually ok with that behavior too (as noted in my previous post), maybe i was reading some doc comment that caused me realize it would work otherwise (or maybe it's just that i missed that memset when reading the code).
so from my perspective, it's good that this is defined and tested... "
798477177,10108,oranagra,2022-02-03T11:38:58Z,so that comment is invalid..
798589295,10108,zuiderkwast,2022-02-03T13:58:37Z,"This is not relevant anymore. For reference: We'll use a regular API function and add version field in the info struct. Version is a struct pointer, typically to a static const defined in redismodule.h."
798695752,10108,zuiderkwast,2022-02-03T15:40:58Z,"The gendoc.rb script is confused about the linebreak on this line.

I'll fix it."
1037499519,11568,oranagra,2022-12-01T19:43:27Z,please be aware of #11012 @ranshid FYI
1037505390,11568,oranagra,2022-12-01T19:50:47Z,"there are some grammar issues here, but regardless, as i noted earlier, i'm not sure i like this approach, starting a thread here to discuss the alternative."
1045192696,11568,MeirShpilraien,2022-12-11T08:32:47Z,@yossigo @guybe7 ?
1045273272,11568,ranshid,2022-12-11T17:56:33Z,"Maybe we should also check that we are not still blocked?
In #11012 we will be reprocessing the command when unblocked, but that could theoretically mean that the client was re-blocked due to another reason (like write postpone).  "
1111213254,11568,MeirShpilraien,2023-02-19T10:54:49Z,@oranagra I have updated the code and the top comment with the API changes we discussed (RM_Call returns a promise object that allow to set the unblock handler). Let me know what you think.
1111214050,11568,MeirShpilraien,2023-02-19T11:00:42Z,"@ranshid added this check, any advice how to test it?"
1111214849,11568,oranagra,2023-02-19T11:06:06Z,"in theory, this should be some abstraction interface (not the module interface), and module.c should do the conversion.
but i suppose changing this will just complicate things (more code that's harder to follow), and we can always change it when we'll want."
1111215261,11568,oranagra,2023-02-19T11:09:00Z,"please avoid line comments.
also, i don't think the comment is clear enough."
1111217967,11568,oranagra,2023-02-19T11:27:51Z,"maybe the name of this function should include ""command"" or ""call"" or ""reply""?
i.e. unblocked from what operation?"
1111218098,11568,oranagra,2023-02-19T11:29:08Z,maybe use just one method to return this trio (with output arguments)?
1111218213,11568,oranagra,2023-02-19T11:29:54Z,let's avoid line comments (and excessive brackets IMHO too)
1111218457,11568,oranagra,2023-02-19T11:31:41Z,"i don't think we wanna call an RM_ api here (and i don't see we're doing that on other places).
let's just do selectDb (and remove the forward declaration you added)"
1111219557,11568,oranagra,2023-02-19T11:39:37Z,"i wonder if this API should take a context (from which we can take a module)?
maybe this should be the place where we set the module pointer in the reply object (rather than when it was created)
or maybe we should match here the module used by the caller with the one in the reply object?"
1111220024,11568,oranagra,2023-02-19T11:43:11Z,"p.s. i'm not sure about the name of this API either.
@yossigo please advise."
1111220247,11568,oranagra,2023-02-19T11:44:48Z,"```suggestion
 *     * 'K' -- Allow running blocking commands. If enabled and the command gets blocked, a
 *              special REDISMODULE_REPLY_PROMISE will be returned. This reply type
 *              indicates that the command was blocked and the reply will be given asynchronously.
 *              The module can use this reply object to set a handler which will be called when
 *              the command gets unblocked using RedisModule_CallReplyPromiseSetUnblockHandler.
 *              The handler must be set immediately after the command invocation (without releasing
 *              the Redis lock in between). The module should not keep the promise call reply after
 *              the Redis lock has been released. The module should not free the promise call reply.
```"
1111224833,11568,oranagra,2023-02-19T12:13:53Z,maybe we can assert that someone doesn't try to free this reply object before the blocked command finishes?
1111231542,11568,oranagra,2023-02-19T12:55:58Z,"let me make sure i understand.
this complication (thread safe context, and calling UnblockClient), is because we also blocked the caller that triggered our RM_Call.
if somehow this RM_Call would not be a result of a real client which we had to block, then it would be simpler, right?"
1111232471,11568,oranagra,2023-02-19T13:01:41Z,"so if we are invoked in a context in which we can't block, we create a thread safe context for the call?
maybe we can do that only in case we got blocked? and don't bother if our RM_Call doesn't get blocked?
maybe mention that capability and complication in the comments?"
1111241705,11568,oranagra,2023-02-19T13:57:02Z,"what happens if the module sets the `K` flag and forgets to call this handler? seems like it could be a common mistake.
maybe we wanna add a test for it?"
1111246926,11568,oranagra,2023-02-19T14:24:19Z,you have tabs (indentation) in this file
1111247651,11568,oranagra,2023-02-19T14:28:23Z,"please add `wait_for_blocked_client` here, and anywhere else where you create a client that should get blocked before proceeding."
1111620579,11568,MeirShpilraien,2023-02-20T08:30:18Z,"I do not see why this API should get a context, all the other call reply are not getting a context, and we have the module from the ctx used to initiate the RM_Call."
1111625607,11568,MeirShpilraien,2023-02-20T08:35:52Z,"Yes, the blocked client are just to unblock the initiator of the command. If a module just want to call some blocking command regardless of a client, there is no need to handle any blocked clients."
1111628390,11568,MeirShpilraien,2023-02-20T08:38:46Z,"@oranagra maybe I will just return an error if blocking is not allowed, indicating that we can not run this command in this case.."
1111632228,11568,oranagra,2023-02-20T08:42:36Z,i thought you did all of that because you wanted to test some flow that would otherwise be untested.
1111633916,11568,MeirShpilraien,2023-02-20T08:44:15Z,"Taking it back, my test is testing it when block is not allowed. I will rearrange the code then .."
1111640222,11568,MeirShpilraien,2023-02-20T08:50:22Z,"Then its a fire and forget, you run the command and you do not care about the response.
I will update the docs and add a test."
1111676504,11568,ranshid,2023-02-20T09:22:57Z,"I was mainly pointing out that this code might better be placed inside the following check together with processPendingCommandAndInputBuffer (wrapped in if (c->flags & CLIENT_MODULE) ), also any reason not to call beforeNextClient?"
1111981703,11568,ranshid,2023-02-20T13:47:26Z,"```suggestion
        set buf """"
        append buf ""do_rm_call_async blpop l 0\r\n""
        append buf ""ping\r\n""
        $rd write $buf
        $rd flush
```"
1111982049,11568,ranshid,2023-02-20T13:47:46Z,"```suggestion
```"
1111982234,11568,ranshid,2023-02-20T13:47:59Z,"```suggestion
```"
1111993000,11568,MeirShpilraien,2023-02-20T13:58:14Z,Shouldn't we write here a resp protocol?
1111999003,11568,ranshid,2023-02-20T14:04:11Z,I don't think so. we also do that in other pipeline tests (https://github.com/redis/redis/blob/unstable/tests/unit/type/list.tcl#L2202-L2206)
1112139442,11568,yossigo,2023-02-20T16:14:38Z,"@oranagra If we already have a module, do you see other reasons for a context?"
1112168081,11568,oranagra,2023-02-20T16:41:14Z,"no, it just feels odd to me that we provide a callback pointer in one place, and the module pointer in another."
1112179064,11568,oranagra,2023-02-20T16:53:29Z,"i agree that with the initial test code Meir wrote, it could be that redis will execute the LPUSH before the PING reached redis, we can use `$rd flush` but that's not necessarily sufficient, so it's best to just write them in one `$rd write`.
we don't have to use RESP, inline protocol is enough."
1112186222,11568,ranshid,2023-02-20T17:02:20Z,"@oranagra I think that is what I offered, no?"
1112186678,11568,oranagra,2023-02-20T17:02:54Z,"```suggestion
    /* Mark the reply as parsed so there will be not attempt to parse
```"
1112188509,11568,oranagra,2023-02-20T17:05:18Z,"1. let's add a comment for easier reading, i.e. that it just a getter for 3 parameters.
2. let's change one of them to use the return value, so it's possible to make a distinction between a successful return and an early return."
1112190790,11568,oranagra,2023-02-20T17:08:30Z,where does this sds.h come from? we can't use redis internals.
1112193421,11568,oranagra,2023-02-20T17:12:02Z,you can do the same thing (of not creating the blocked client in advance) in the other function as well.
1112629720,11568,MeirShpilraien,2023-02-21T07:03:36Z,"The runtime linker links us to the sds in Redis. But you are right, will change to avoid using sds."
1114364442,11568,oranagra,2023-02-22T13:59:51Z,"we'll need to reset these flags later.
probably in `resetClient` (called from `moduleReleaseTempClient`)"
1114365219,11568,oranagra,2023-02-22T14:00:31Z,maybe it's time to change resetClient to reset everything and preserve just select flags..
1114481969,11568,oranagra,2023-02-22T15:10:01Z,"in other test units (IIRC misc.c) we abandoned this approach of matching the function name, and instead passed the flags and first argument to the function (before the arguments it passes on to RM_Call's argv).
this makes the tests more flexible in the sense that you control everything from the tcl file and don't need to add features to the c file every time.
on the other hand, we can argue it's less readable, unless you consider these RM_Call flags a well known thing, and everyone know what `!` and `K` does.

so let's consider converting the several usage of this approach in this file, let me know what you think,"
1114496819,11568,MeirShpilraien,2023-02-22T15:20:01Z,"@oranagra , on `moduleReleaseTempClient` we are reseting the client flags and only keep `CLIENT_MODULE`:
```
c->flags = CLIENT_MODULE;
```
https://github.com/redis/redis/blob/cd58af4d7fe4b506899591b2846cfba61335c958/src/module.c#L618"
1114498421,11568,MeirShpilraien,2023-02-22T15:21:11Z,"Sure, I can match to this approach but notice that then the `tcl` tests will have those flags pass on each call so not sure it will be cleaner.."
1114502635,11568,MeirShpilraien,2023-02-22T15:24:07Z,"What I do not notice now is that maybe we want to have a MAX capacity to `moduleTempClients` today we do not have it. I guess its because we assume it can not grow to much (only on nested RM_Call), but now with blocking RM_Call it has a potential to grow? WDYT?"
1115310569,11568,oranagra,2023-02-23T07:23:40Z,"i don't think we want to limit it...  we do have a mechanism to limit the cache size or actually to release it gradually when unused, i think that's sufficient, and if module or app will abuse it, we better let the resource utilization grow (assuming there are resources on the machine), rather than block something that could succeed."
1115312566,11568,oranagra,2023-02-23T07:26:45Z,"we can pass only the explicit ones, and keep some implicit.
also, we can make the `!` implicit, unless `?` is added, but that's a little bit confusing.
what we have now is also ok, but it means we need to add code to the C file every time we need a new flag.
i'm looking for something that's easiest for the reader..
the key point is not to force the reader of the tcl code to go look at the C code when reading each individual TCL test, so that's already covered.
if we can clean the C code without compromising that, let's do it, otherwise, we can skip"
1118058043,11568,MeirShpilraien,2023-02-26T10:22:57Z,"@ranshid I am not follow why you think it should be there, we do not really need to call this function in case of a fake module client. There is nothing else that need to be processes on this fake client. Maybe I am missing something?"
1118071162,11568,ranshid,2023-02-26T11:54:45Z,"@MeirShpilraien I agree there is not much point in doing so for the current items in beforeNextClient and yhis is not urgent to make this flow go through beforeNextClient - But I do feel that taking a different code route could present issues in the future in case some new logic will be placed inside the beforeNextClient and we will miss it in case of fake client. We can wait for such future case and fix it then, or we can try to make this new flow to follow as much steps as the regular code flow. "
1118305319,11568,oranagra,2023-02-27T05:43:49Z,"it could be that some day the code that's executed in beforeNextClient will be also needed for these modules, but it could also be that some future code in beforeNextClient will have to be avoided for them, and if we'll call it we'll have to remember to add a exception (we are likely to forget).

maybe the safest thing we can do now is either to call it, and add some `if (c->flags & CLIENT_MODULE) return;`
or instead write there a comment about this case and mention `processUnblockedClients`"
1121268206,11568,yossigo,2023-03-01T07:29:29Z,"@MeirShpilraien We need to document here what is allowed and not allowed in the context of the unblock handler. Because we took the permissive approach to the API and provided a RedisModuleCtx, we need to provide this guidance at the documentation level."
1127368015,11568,MeirShpilraien,2023-03-07T05:45:01Z,"> also, we can make the ! implicit, unless ? is added, but that's a little bit confusing.

Yes I think it will really be confusing. I can make the command get the flags a the first argument, but then we will have to pass it on all the tests. Or we can stay with the current version. Let me know what you prefer. "
1127386421,11568,MeirShpilraien,2023-03-07T06:19:31Z,I added a comment.
1127388509,11568,MeirShpilraien,2023-03-07T06:23:00Z,"@yossigo thanks, I updated the docs. I did not specify each and every API that can or can not be used. Wrote that in general you can call more Redis command using RM_Call and replicate data to replica and aof. Also mentioned that any API that involve a real client interaction (such as RM_Reply* API's) is disallow.
Let me know what you think."
1127402846,11568,oranagra,2023-03-07T06:44:55Z,let's keep the current one. i suppose in this case it's more explicit and easier to read.
1127412191,11568,oranagra,2023-03-07T06:59:17Z,allow -> allowed
1127412407,11568,oranagra,2023-03-07T06:59:35Z,more -> additional
1127413183,11568,oranagra,2023-03-07T07:00:47Z,shouldn't these be indented more?
1127416732,11568,MeirShpilraien,2023-03-07T07:05:11Z,"I do not know know, how can I check that?"
1127445010,11568,oranagra,2023-03-07T07:13:08Z,"ohh, my bad. for some reason i thought it's a sub-section of the bullet above.
i now see it's a separate list, so i think we need a blank line in between the end of the previous list and the header of the next one."
1127463119,11568,MeirShpilraien,2023-03-07T07:34:50Z,Done
1135326303,11568,oranagra,2023-03-14T10:27:36Z,"i'm always paranoid about changing the role or actions of a widely used function, that in some fork or branch, we have another call to it that will be forgotten and it'll cause bugs without any compilation errors or merge conflicts.

i see that there are two calls left to the plain unblockClient (in areas this PR modifies anyway).
maybe we can rename that function, or maybe instead of creating a new one, we can introduce a flag, e.g. `void unblockClient(int quque_for_reprocessing);`

WDYT?"
1135338726,11568,oranagra,2023-03-14T10:37:01Z,"i think either-or should be one sentence.
```suggestion
     * Either releasing the client or RM_CallReplyPromiseAbort would have removed it. */
```"
1135348394,11568,oranagra,2023-03-14T10:44:58Z,"```suggestion
/* Abort the execution of a given promise RedisModuleCallReply.
```"
1135350418,11568,oranagra,2023-03-14T10:46:41Z,"```suggestion
    /* Client is still blocked, remove it from any blocking state and release it. */
```"
1135352591,11568,oranagra,2023-03-14T10:48:31Z,"```suggestion
 *              details). Unlike other call replies, promise call reply **must** be freed while the Redis GIL is locked.
```"
1135355080,11568,oranagra,2023-03-14T10:50:49Z,why is the initial refcount 2? let's document that...
1135357174,11568,oranagra,2023-03-14T10:52:36Z,"can you explain this change (i'm not to clear on the details, and rather not spend time figuring it out)"
1135361291,11568,oranagra,2023-03-14T10:56:09Z,"maybe we better pass an argument to enterExecutionUnit if it should update the cached time.?
will be easier to add other things in the future, and code will look slightly cleaner (still keeping the comment but it'll be shorter)"
1135363842,11568,oranagra,2023-03-14T10:58:26Z,"i think i preferred an explicit flag in the first place (now we only depend on the check in `processCommand`, which propagates to `call()`, than having two different ways to discover that).

@ranshid please take a look at some changes in this PR.
note the change below in which we always set the CLIENT_EXECUTING_COMMAND flag (even on nested fake clients).
maybe we should assert that it's not already set? (if it is, then it would be wrong to clear it when this function exits)"
1135369810,11568,oranagra,2023-03-14T11:02:30Z,"so now `call_timer` may be outdated.
the previous code made sure to always call `ustime()` and get a fresh `call_timer`, and yet, avoid getting the system time twice, by passing that time to `updateCachedTimeWithUs`.
i think we must sort things out to get that functionality back."
1135384190,11568,oranagra,2023-03-14T11:14:18Z,let's get the client id and kill just the desired client.
1135385319,11568,oranagra,2023-03-14T11:15:25Z,"maybe add an assert that we have 0 blocked clients?
or actually wait for the blocked clients to drop to 0 (`wait_for_blocked_clients_count`)"
1135425212,11568,ranshid,2023-03-14T11:52:21Z,I am not sure there is an issue with that but just in case we can  save the flag value before setting it and just restoring it back once we return not blocked 
1135439766,11568,ranshid,2023-03-14T12:05:16Z,any reason we explicitly do all the current_client+ after_command and nesting arithmetic? AFAIK this is already done in processCommandAndResetClient
1135480565,11568,MeirShpilraien,2023-03-14T12:40:08Z,"Sure, will revert it and add a flag"
1135481850,11568,MeirShpilraien,2023-03-14T12:41:10Z,"It is hold by the client and by the promise reply, Will document it."
1135483039,11568,MeirShpilraien,2023-03-14T12:42:07Z,"Seems like today we can not hold the call reply object for longer time then the context, in case there is no auto memory set I do not see a reason why not to allow it?"
1135486148,11568,MeirShpilraien,2023-03-14T12:44:53Z,"Ohh you are right, this is used to check the time it took to run the command. I will fix it."
1135517655,11568,oranagra,2023-03-14T13:09:53Z,so let's mention this in the top comment.
1135519991,11568,oranagra,2023-03-14T13:11:40Z,"if this state should be impossible, let's assert rather than backup and restore the flag."
1135577115,11568,MeirShpilraien,2023-03-14T13:49:59Z,Mentioned
1135601073,11568,MeirShpilraien,2023-03-14T14:03:39Z,"@oranagra @ranshid this can happened on blocking commands, we leave this flag on until we reprocesses the command."
1135602862,11568,MeirShpilraien,2023-03-14T14:04:53Z,And its also wrong to cache it and return the cache value because in this case we really want to turn off the flag even if it was on before.
1135680913,11568,MeirShpilraien,2023-03-14T14:51:47Z,@ranshid I believe my comment bellow answer that. We want the reprocessing of the command and the command handler to be atomic.
1135687769,11568,oranagra,2023-03-14T14:56:11Z,"ok, i suppose we are covered by tests.
maybe we should add a comment so that someone else will not wonder about it in the future."
1135785340,11568,ranshid,2023-03-14T15:56:26Z,Question - can this be that a module called a command which was postponded? (in which case we will not execute it)
1135785553,11568,ranshid,2023-03-14T15:56:34Z,"Ohh you mean you want the module handler to be in the same execution unit as the command processing... I failed do understand that for the comment : 
``We must set the current client here so it will be available
* when we will try to send the the client side caching notification
* of 'afterCommand'. */``
Maybe we should state that it is meant for the module handler?

"
1135817304,11568,oranagra,2023-03-14T16:15:46Z,"```suggestion
/* Performing required operations in order to enter an execution unit.
```"
1136479773,11568,madolson,2023-03-15T02:55:41Z,"```suggestion
 * update_cached_time - if 0, will not update the cached time even if require.
 * us - if not zero, use this time for cache time, otherwise get current time. */
void enterExecutionUnit(int update_cached_time, long long us) {
    if (server.execution_nesting++ == 0 && update_cached_time) {
```"
1136480004,11568,madolson,2023-03-15T02:56:07Z,"```suggestion
 * update_cached_times - if 0, will not update the cached time even if required.
 * us - if not zero, use this time for cached time, otherwise get current time. */
```"
1136482406,11568,madolson,2023-03-15T03:01:15Z,"I don't get this comment, we can't use enterExecutionUnit and then we immediately call it?"
1136580756,11568,oranagra,2023-03-15T06:19:35Z,"comment is outdated :smile: we fixed the problem that prevented the use of this function (by passing an argument), and forgot to update or delete the comment."
1136581335,11568,oranagra,2023-03-15T06:20:32Z,"i actually wanted to suggest the same, and decided to leave it.
Meir, remember to update the header file as well."
1136696846,11568,MeirShpilraien,2023-03-15T08:34:56Z,"I will try to clarify that in the comment, thanks."
1136698441,11568,MeirShpilraien,2023-03-15T08:36:34Z,"Good catch, will update."
1136717762,11568,MeirShpilraien,2023-03-15T08:52:15Z,Let me know if its better now.
1136718189,11568,MeirShpilraien,2023-03-15T08:52:37Z,Updated
1136719662,11568,MeirShpilraien,2023-03-15T08:53:50Z,"Not following the question, do you mean that the unblock handler will call more blocking commands?"
1136776633,11568,oranagra,2023-03-15T09:38:43Z,please update the argument name in server.h as well
1136779215,11568,sundb,2023-03-15T09:40:40Z,"```suggestion
CallReply *callReplyCreatePromise(void *private_data);
```
There are other two places in CallReply.c and module.c"
1136976084,11568,oranagra,2023-03-15T12:25:45Z,"i suppose postponed is in case it's a write command called during CLIENT PAUSE WRITE.
but these can't be MODULE type clients, right?"
1137620728,11568,oranagra,2023-03-15T19:08:23Z,"just to make sure, this code path is new, right?
i.e. before this PR, module (fake) clients didn't get blocked, so that increment didn't affect them regardless of this condition."
1137681059,11568,MeirShpilraien,2023-03-15T19:36:18Z,"Yes right, before this PR we could not get to this code with module client."
1138212667,11568,ranshid,2023-03-16T07:12:22Z,That was basically my question. In case a module will call a command which will be postponed (either by having writes paused or by another busy module operation) Will in that case the module client will just terminate? or do we want it to be reprocessed?   
1138213838,11568,ranshid,2023-03-16T07:14:01Z,"Yes. Thank you!
"
1138239525,11568,oranagra,2023-03-16T07:42:44Z,"if the module's command is a write command it wouldn't have been executed, after it started, if an RM_Call gets blocked, it'll not get postponed (module fake client don't participate in that postpone game).
maybe that's an issue (module blocked clients violating write pause), but the reverse is impossible (a postponed (module) client that will then get blocked)"
1138240941,11568,oranagra,2023-03-16T07:44:32Z,"the issue of violating write pause probably exists whenever a module blocks the calling client (and does something in the background), regardless of RM_Call"
1138328288,11568,ranshid,2023-03-16T09:05:07Z,"@oranagra, I understand that postpone module fake clients will probably get paused by the original client executing the module command, but isn't it possible that module client be issued from a keyspace or other kind of event which is not write context (like key miss)? Maybe I am mixing and messing things up :) but I think that looking forward it is possible we would like to support more blocking cases which we would like to apply to module client, and I wanted to verify this will not hold us back. For example maybe we can introduce a processPendingCommand function that will process a command in case the pending flag is on and also call the the moduleCallCommandUnblockedHandler?"
1138353799,11568,oranagra,2023-03-16T09:24:06Z,"I discussed this at length with Meir (he's adding a commit with a doc comment).
normally when an RM_Call gets blocked the module will block the original client as well, no writes will happen during failover pause, and the blocked client will remain blocked, and then the failover completed the demotion will abort the root client which the module should catch and abort the blocked fake client.
so other than documentation, i think the current code is good.

i'm not sure i understand your processPendingCommand suggestion above, maybe you can describe an example scenario you aim to handle, or suggest the exact code change you're proposing (maybe you did?)"
1138377074,11568,oranagra,2023-03-16T09:41:53Z,"```suggestion
 *              details). It is also the module's responsibility to abort the execution on role change, either by using
 *              server event (to get notified when the instance becomes a replica) or relying on the disconnect
 *              callback of the original client. Failing to do so can result in a write operation on a replica.
```

do we wanna mention something about the fire-and-forget thing?"
1138428117,11568,ranshid,2023-03-16T10:22:05Z,"What I meant is that we can create the following function:
```
int processPendingCommand(client *c) {
    if (!(c->flags & CLIENT_PENDING_COMMAND || (c->flags & CLIENT_MODULE))
        return C_OK;
    client *old_client = server.current_client;
    server.current_client = c;
    enterExecutionUnit(1, 0);
    if (c->flags & CLIENT_PENDING_COMMAND) {
        c->flags &= ~CLIENT_PENDING_COMMAND;
        if (processCommandAndResetClient(c) == C_ERR) {
            return C_ERR;
        }
    }
    if (c->flags & CLIENT_MODULE) 
            moduleCallCommandUnblockedHandler(c);
    
    exitExecutionUnit();
    afterCommand(c);
    server.current_client = old_client;
}
```

So that we can use it in the context of unblockClientOnKey and processPendingCommandAndInputBuffer called from processUnblockedClients"
1138435476,11568,ranshid,2023-03-16T10:27:53Z,"in any case according to what you explained, I do not recognize a bug with the current implementation, so we can also decide to refactor later on..."
1138443936,11568,MeirShpilraien,2023-03-16T10:34:41Z,Mentioned 
1147229156,11963,sundb,2023-03-24T07:58:57Z,wraped with `do while(0)`?
1147229344,11963,sundb,2023-03-24T07:59:10Z,"There are many more places below.
```suggestion
void durationAddSample(const char *event, ustime_t duration, int add_to_latency);
```"
1147232607,11963,sundb,2023-03-24T08:02:48Z,"It seems that they can't be negative.
```suggestion
    unsigned long long cnt;
```"
1147234286,11963,sundb,2023-03-24T08:04:56Z,"```suggestion
        ds = zcalloc(sizeof(*ds));
```"
1147236768,11963,sundb,2023-03-24T08:08:15Z,Forget to remove?
1147291113,11963,CharlesChen888,2023-03-24T09:06:25Z,"Above this line, `durationStartMonitor` assigned its value in microseconds, but below this line, `latencyAddSampleIfNeeded` takes value in milliseconds."
1147295853,11963,CharlesChen888,2023-03-24T09:10:47Z,This does make it safer but is not necessary. This should always be used in an independent line.
1147318453,11963,sundb,2023-03-24T09:31:16Z,"Indeed, We can only ensure that it has no side effects as much as possible.
On the other hand, `durationStartMonitor(..);` will be expanded as
```
    if (monotonicGetType() == MONOTONIC_CLOCK_HW) { \
        var = getMonotonicUs();                     \
    } else {                                        \
        var = ustime();                             \
    };  <- `;` is necessary, then the caller is adding or not adding `;`.
```


"
1147789811,11963,madolson,2023-03-24T16:07:37Z,I still believe this should be a histogram and not an arbitrary max value that decays.
1147793467,11963,madolson,2023-03-24T16:11:10Z,"This isn't a real representation of the IO READ, since on Linux the epoll will also execute part of the TCP stack to see if there is data available to read. "
1147909354,11963,madolson,2023-03-24T18:02:44Z,"I believe this double counts multi-commands, since it will count the outer and inner time,"
1148577855,11963,oranagra,2023-03-26T15:19:45Z,"the monotonic clock itself already has a fallback to clock_gettime (which IIRC is a system call similar if not faster than gettimeofday), why do we need the ustime fallback?"
1148578887,11963,oranagra,2023-03-26T15:22:08Z,"unlike the latency monitor, which is an infrastructure that has a ton of sample points and a generic command to extract them, here we have some 6 different metrics, hard wired to the INFO command.
i'm not sure we want to have the overhead of dict lookup, it would be faster to just directly access dedicated server struct variables."
1148835935,11963,CharlesChen888,2023-03-27T06:26:49Z,"Yes, but can we measure the time consumed in epoll? This may be inaccurate but at least it can provide a clear message when IO read is heavy, right?"
1149080749,11963,uvletter,2023-03-27T10:00:18Z,"+1. The users usually care more about P99 or P999 latency than average latency, so just exposing sum and count may be not enough, we need more fine grained metrics. Instantaneous metrics somehow mitigates it. Another way is recording all latency at the cost of more memory assumption."
1149174335,11963,oranagra,2023-03-27T11:28:58Z,let's move this to to be the last item in the enum rather than explicitly defined.
1149175618,11963,oranagra,2023-03-27T11:30:17Z,i'm not sure we need the macros.. it seems simple enough if the code would just explicitly call getMonotonicUs
1149178145,11963,oranagra,2023-03-27T11:32:48Z,"that could be interesting (to use `hdr_histogram`), but then what will we want to expose?
i don't think we'll want to expose 6 different metrics for each of our measurement in INFO.
so if we go that way, we'll want to expose just 2 in INFO and have a dedicated command to get the rest?"
1149985692,11963,CharlesChen888,2023-03-28T03:26:59Z,"OK, a histogram does make more sense.."
1149987337,11963,vitarb,2023-03-28T03:31:02Z,"I agree with Madlyn, that histograms would be a lot more useful. If INFO output size is a concern, should we just add a separate section to the INFO that will not be printed by default and use something like `INFO eventloop` to print this data?"
1156538447,11963,madolson,2023-04-03T23:18:17Z,I don't know of a way to measure the epoll time.
1157265748,11963,oranagra,2023-04-04T13:33:40Z,"i think we should leave this out of scope.
we're trying to give some visibility on command latency by showing where the event loop spends time (before sending replies), and what portion of the event loop is consumed by each chore.
what Linux does inside epoll should be out of scope IMO."
1157282803,11963,oranagra,2023-04-04T13:46:09Z,"I think it's odd that this is zeroed in both resetServerStats and latencyMonitorInit.
i would say that this feature is part of server stats, not the ""latency monitor"", parts of it are implemented in latency.c, but not part of the ""monitor"" framework.
let's remove the init from `latencyMonitorInit()`, and instead zero `server.el_start` in `initServer()`"
1157296846,11963,oranagra,2023-04-04T13:55:22Z,"@CharlesChen888 if you don't have time to look into the histogram part yet, and we all agree that the count and sum part should be in INFO (for easy stats collection by a monitoring software), and the histogram in a different command (like we did in #9462)..
maybe for now we should remove the `max` info field and leave the histogram for later.. this will a least give us some visibility on what the event loop is doing.

see https://github.com/redis/redis/pull/11963#issuecomment-1488285062"
1161223464,11963,oranagra,2023-04-09T06:20:59Z,"it's a little odd to see this zeroing moved but the memset of server.duration_stats wasn't.
the fact is that globals are all zeroed anyway, so this is all unnecessary anyway."
1161227516,11963,oranagra,2023-04-09T06:41:02Z,"let's improve the comment here, it's quite confusing.
first, let's mention that cron duration includes beforeSleep chores (let's add that comment in the header variable declaration too).
secondly, maybe it'll look nicer if we create a dedicates stack variable for the beforeSleep measurement, and add it to server.el_cron_duration at the end (it'll appear less confusing than deducting and accumulating time directly to the server variable)"
1161228440,11963,oranagra,2023-04-09T06:45:47Z,"let's comment here (and below) that we exclude IO (AOF) from the cron duration measurement.
again, i think the code will also look cleaner if we add another stack based variable to track the AOF part, and deduct it from the other stack based variable at the end."
1161228580,11963,oranagra,2023-04-09T06:46:26Z,"btw, maybe we can use this variable to track the AOF duration instead of the changes you made in flushAppendOnlyFile"
1161234001,11963,oranagra,2023-04-09T07:13:36Z,"please add some comment explaining what this function does and how.
maybe by explaining the differences from the other one above."
1161236621,11963,oranagra,2023-04-09T07:26:01Z,maybe we can move the `mstime()` call to outside? (it's silly that it is called inside a loop)
1161238064,11963,oranagra,2023-04-09T07:33:04Z,"it is silly that this `mstime()` is called inside the loop (can be sampled once before it), but also, i don't feel comfortable with `STATS_METRIC_RATE_COUNT` (it's declaration seems odd, there are two constants with the value of `6`), and the coupling between how it's initialized and how it is used, is risky.
i'd rather all the initialization be the same, and also the extraction (getInstantaneousMetric) the same, and the only difference is if trackInstantaneousAvgMetric or trackInstantaneousRateMetric is called.

in that case, how about setting the initial last_sample_time to be 0 in both cases, and just make sure to skip the first time trackInstantaneousRateMetric is called (only do the init and exit right after)

what do you think?"
1161406549,11963,CharlesChen888,2023-04-10T03:31:08Z,good idea
1161406784,11963,CharlesChen888,2023-04-10T03:31:53Z,"We already have a time measurement in `flushAppendOnlyFile` used by latency monitor, let's just use that instead of making another measurement."
1161479047,11963,oranagra,2023-04-10T06:42:48Z,"yes, but we also in any case also now have a time measurement before and after the AOF portion in beforeSleep.
so considering we're gonna keep both anyway, i think it's nicer to have all the event loop stats updated in server.c (beforeSleep, serverCron, etc), and not mix them up with the code in aof.c (could also some day be called not as part of the event loop).
also, it'll mean the code in aof.c is unmodified."
1161480345,11963,oranagra,2023-04-10T06:45:23Z,"please remove the `max`, we'll add a histogram later"
1161541643,11963,oranagra,2023-04-10T08:30:33Z,"ohh, i see what i was missing.
i was aiming to completely drop `duration_before_aof` and `duration_after_write`, and instead measure in one variable the entire duration of beforeSleep, and in another the entire duration of the AOF part and then deduct one from the other. (would not have required to add any additional time sampling call).

but i missed the fact we also need to skip counting handleClientsWithPendingWritesUsingThreads as cron.

well, looking at that, since handleClientsWithPendingWritesUsingThreads is only called from one place (here), i think we can move it's measurement from inside the function to outside of it (and avoid the complication of a separate measurement when that function early exits due to no threaded IO).
that would mean we're also counting a few other minor things as if they are IO, i.e. spinning up threads, and doing memory accounting, but i think that's acceptable.

in that case we'll have beforeSlep measure it's total time (one measurement at at the beginning and one at the end.
and we'll have an additional 3 calls to time sampling (before the AOF part, between the AOF and writes, and after writes), computing two additional variables (AOF duration and write duration) to be deducted from the total time at the end.

WDYT?"
1161563738,11963,CharlesChen888,2023-04-10T09:03:36Z,"It is a little bit asymmetric taking samples of IO reading inside of `handleClientsWithPendingReadsUsingThreads`(I don't think we should move it outside as this function also processes commands), but take samples of IO writing outside of `handleClientsWithPendingReadsUsingThreads`.

...but I guess it is OK, since I already moved the sampling of AOF into `beforeSleep`."
1161599859,11963,oranagra,2023-04-10T10:01:41Z,"ohh, right. i now notice it calls processPendingCommandAndInputBuffer, we can't count that as either IO or cron chores.
i think we need both the counting inside that function as IO, and also the counting outside it to deduct the whole thing from cron chores.
i.e. your current code.

i also notice that it processPendingCommandAndInputBuffer is called from a few other places (i missed that earlier, must have been looking at a different branch."
1161609825,11963,oranagra,2023-04-10T10:17:45Z,"took another look at beforeSleep, i see we currently include the calls in processUnblockedClients, handleClientsBlockedOnKeys in the measurement, i think we must skip them.
i don't feel comfortable re-ordering that function, but i also don't like a ton of measurements (hard to maintain).
need to think what to do here.. maybe change the plan..."
1161793327,11963,oranagra,2023-04-10T14:56:24Z,"maybe it should be exclusive rather than inclusive, we do want:
* clusterBeforeSleep
* activeExpireCycle
* moduleFireServerEvent

optional:
* moduleHandleBlockedClients - can be considered a server side thing (doesn't represent commands or IO)
* evictClients - i'm assuming it's usually not very intensive (unlike IO, or something like commands that can have unexpected complexity)
* trackingBroadcastInvalidationMessages - same
* freeClientsInAsyncFreeQueue - same
* handleBlockedClientsTimeout - same

exclude (IO and commands):
* flushAppendOnlyFile
* handleClientsBlockedOnKeys
* handleClientsWithPendingReadsUsingThreads
* handleClientsWithPendingWritesUsingThreads

so either we measure everything and exclude 4 blocks (the last list above).
or we include just 3 specific blocks (the first list above).

@madolson please advise."
1162236662,11963,madolson,2023-04-11T02:24:19Z,"I was expecting we would check for recursive commands here, doesn't EVAL and modules that issue RM_CALL() also double count now?"
1162240132,11963,madolson,2023-04-11T02:32:28Z,"> i think we should leave this out of scope.

I very strongly disagree. I think we're scope creeping by adding this. If the data is not that reliable, I don't think we should be adding it.

> we're trying to give some visibility on command latency by showing where the event loop spends time (before sending replies), and what portion of the event loop is consumed by each chore.

We actually don't need to care for command latency. The real proxy of command latency is EL time and time from EL wakeup until command being written out to client."
1162242078,11963,madolson,2023-04-11T02:37:16Z,"Not sure about the ask. I think we should measure everything and exclude the four blocks to have an ""other"" category, I wouldn't call it a cron."
1162266557,11963,CharlesChen888,2023-04-11T03:37:25Z,"Yes, and FCALL."
1162425568,11963,oranagra,2023-04-11T07:46:18Z,"ok, so you suggest that beforeSleep takes some 5 samples of the time in order to deduct the ones we wanna exclude from the ""other"".
meaning we'll have:
* eventloop_duration_sum - the total
breakdown (changing the names):
* eventloop_duration_cmd_sum
* eventloop_duration_io_read_sum
* eventloop_duration_io_write_sum/
* eventloop_duration_aof_sum
* eventloop_duration_other_sum

how about a slightly different naming pattern:
* `eventloop_duration_sum`   (or `eventloop_duration_sum_total`) 
* `eventloop_duration_sum_cmd`
* `eventloop_duration_sum_read`
* `eventloop_duration_sum_write`
* `eventloop_duration_sum_aof`
* `eventloop_duration_sum_other`
"
1162433522,11963,oranagra,2023-04-11T07:53:38Z,"ohh, now i see your other comment below.
so you just wanna keep the `total` (from beforeSleep to afterSleep), and `cmd`.
and drop all the IO and cron chores?

i think it is important to know what's slowing things down besides commands, and if it's IO or other things.
we do have LATENCY HISTORY measurement for AOF, expire and defrag, but not for others.
why do you think it's half baked? maybe the ""other"" is, but not the rest...

maybe we can drop ""other"" and keep the IO / AOF? in theory users (or even the server) can deduct the IO and AOF from the total and conclude how much the rest takes, but i was concerned that there might be other things so i wanted to measure beforeSleep and serverCron so it'll be possible to find out that there's something else that we don't measure."
1162448430,11963,oranagra,2023-04-11T08:07:16Z,"again, i'm ashamed i have missed it.
so checking `server.execution_nesting==1` should fix both EXEC and EVAL, we well as RM_Call from within a module command.
It would also avoid measuring RM_Call from a thread or a timer event (since it'll be incremented when a module context is created and again in `call()`), which i suppose is good (i.e. module actions are in anyway ""internal"" and not ""commands"" from the perspective of the event loop."
1162453790,11963,oranagra,2023-04-11T08:12:14Z,"maybe i'm missing your point. you're arguing that since during the time redis's user space is sleeping on epoll, the kernel runs system space code (on our process time) that handles IO (TCP), and we should include that in our IO measurement?

i'm trying to add a breakdown of the composition of the event loop. i.e. we know how much time it took from wakeup to sleep, and i wanna know what where the components of that.. i.e. commands, IO, or other ""cron"" chores."
1163194669,11963,JimB123,2023-04-11T18:39:49Z,Put a comment on this line indicating that it must remain the last entry in the enum.
1163201582,11963,JimB123,2023-04-11T18:47:41Z,"Why are all of these prefixed with `EL_`?  The enum type is `DurationType`.  Try to make the prefix match the type name.

I really think the whole ""event loop"" slant on this is incorrect.  These are not metrics from the event loop.  This is quite clear, given that `ae.c`/`ae.h` are not being touched.  I'm not sure what else to call it though.  

These enumerations each need commenting.  Please document the intent for each.  What period of time/what operation is being measured.  Without specific documentation, it's unclear how to maintain these metrics.

Are each of these cumulative durations?

"
1163206247,11963,JimB123,2023-04-11T18:52:42Z,"I generally dislike `unsigned`.  But for a cumulative, always increasing, value - I tend to use unsigned.  If there's any reason to decrement, avoid unsigned.

Why is one variable unsigned, and the other isn't?"
1163208025,11963,JimB123,2023-04-11T18:54:43Z,"I generally find indexing notation to be easier to read here.
```
durationStats* ds = &server.duration_stats[type];
```"
1163210906,11963,JimB123,2023-04-11T18:57:51Z,"I think a pattern that's a little clearer is this:
```
monotime durationStart;     // this is a monotime as it's a specific point in time
elapsedStart(&durationStart);
...
ustime_t duration = elapsedUs(durationStart);   // this is a duration, so it shouldn't be monotime
```"
1163215506,11963,JimB123,2023-04-11T19:02:20Z,"Trying to reuse the `duration` variable is a bit confusing here.  This is assigning a timestamp, not a duration."
1163219190,11963,JimB123,2023-04-11T19:06:04Z,"You can see how this continues to be confusing...  It almost looks like we are trying to accumulate a duration, but why would be subtract a ""duration"" from a timestamp?

There's no sin to creating an additional, well-named, variable.  The compiler will optimize it out anyway.  It just improves readability."
1163220449,11963,JimB123,2023-04-11T19:07:40Z,`= 0` unnecessary
1163223547,11963,JimB123,2023-04-11T19:11:22Z,"I'm always bothered by the word ""instantaneous"" being applied with the word ""rate"".  ""rate"" is some activity over time.  You can't measure a rate without time.  So implying that a rate is instantaneous - occurring over 0 time - is false.

What is `current_time`?  I hope this is a time from the monotonic clock.  It would be much clearer to use `monotime` if that is the case.  I have no idea what `long long` represents with respect to time."
1163227059,11963,JimB123,2023-04-11T19:15:42Z,"Looks like this is now a duration.  Let's name it ""duration"" rather than ""t"".  Is this us? ms?"
1163230837,11963,JimB123,2023-04-11T19:20:16Z,"If `t` (duration) is very small, `ops_sec` may suffer from extreme extrapolation.

Here, it's looking like `current_time` is somehow represented in milliseconds.  Wouldn't it be clearer and more consistent to use `monotime` all the way through?"
1163234386,11963,JimB123,2023-04-11T19:24:29Z,"`getMonotonicUs` returns a timestamp, not a duration.  Either the variable is mis-named, or we're trying to reuse the variable for 2 different purposes....

Looking below, I see that we're temporarily overwriting the `el_cron_duration` with the start time.  I'd recommend defining a local variable instead (`monotime el_cron_start`).  If not for clarity, consider that global variables might (in theory) be read across threads.  Changing the duration to a timestamp - and then back to a duration - could cause problems."
1163235643,11963,JimB123,2023-04-11T19:25:48Z,Why not use the monotonic clock here?
1163237465,11963,JimB123,2023-04-11T19:28:06Z,"If another variable was used above, this could be written like
```
server.el_cron_duration_us = elapsedUs(el_cron_start);
```
Note the rename of `el_cron_duration` to `el_cron_duration_us` - it's helpful to tag units to time duration variables."
1163238060,11963,JimB123,2023-04-11T19:28:53Z,"Again, very confusing as this is not a ""duration"" (at this point)."
1163244356,11963,JimB123,2023-04-11T19:36:16Z,"let's not use the word ""instantanous"" and let's properly define the time units.  Can we call this ""current_eventloop_cycles_per_sec""?"
1163244979,11963,JimB123,2023-04-11T19:37:04Z,"This makes no sense to me.  What the heck is an ""instantaneous average""???"
1163546013,11963,CharlesChen888,2023-04-12T03:27:51Z,"These metrics are taken in serverCron, beforeSleep, and some file events, which I believe are all part of eventloop. 

Yes they are all cumulative."
1163562317,11963,CharlesChen888,2023-04-12T03:46:13Z,"`server. el_cron_duration` is used to measure time duration of `severCron` and a part of `beforeSleep`, so we need a global variable to record the value."
1163568298,11963,CharlesChen888,2023-04-12T03:57:14Z,"Well, words like ""instantaneous"" and ""t"" are just old history code that I didn't bother to rename, and I just followed it to avoid too much change in code. As for naming and readability, maybe I am just used to the ""code style"" in Redis, I think some of your suggestions are unnecessary. However they do make sense, so if you insist, we can improve the code."
1163874033,11963,oranagra,2023-04-12T09:32:04Z,"I also dislike the term ""instantaneous"", used in redis for short term metrics (representing the last second or so), but that ship has sailed, we can't change it now..."
1163884592,11963,oranagra,2023-04-12T09:41:00Z,"The word ""instantaneous"" in INFO means recent or short-term.
I.e. in contrast to other metrics that are ever increasing counters.
I don't want to start using a new term (""current"") for this"
1163958081,11963,oranagra,2023-04-12T10:47:06Z,"I agree many of Jim's suggestions are not strictly necessary, but they do improve the code, so specifically in new code or places that are changed anyway, I think we should implement them (more variables that their name matches their usage, and the better matching type).

 Regarding ""instantaneous"" I think we must keep it and maybe find another way to make it slightly less awkward.
I see other metrics in this group all have units in their name (""per_sec"" and ""kbps"")
So maybe we can drop the ""average"" part and make it:
`Instantaneous_eventloop_duration_usec` or `Instantaneous_eventloop_usec`.
And `Instantaneous_eventloop_cycles_per_sec`"
1164274302,11963,JimB123,2023-04-12T15:06:49Z,"I understand.  But here, you're not recording a duration.  You're temporarily storing the start-time for the duration.  You shouldn't store the start time in the global variable.  Use a local variable to record the start time, and then later, update the duration."
1164837799,11963,CharlesChen888,2023-04-13T01:29:56Z,"I see. It does make sense. When we finally decide what to measure, I will improve it."
1164857804,11963,CharlesChen888,2023-04-13T01:44:43Z,So do we have a conclusion here? 
1168121264,11963,madolson,2023-04-17T03:25:14Z,">maybe i'm missing your point. you're arguing that since during the time redis's user space is sleeping on epoll, the kernel runs system space code (on our process time) that handles IO (TCP), and we should include that in our IO measurement?

I'm saying I don't care about this data, and don't believe in exposing useless metrics simply because we can compute them. I don't think the IO is particularly useful in aggregate. I think the one useful metric being exposed here is the one about total event loop time, which gives a nice proxy for command execution time."
1168123309,11963,madolson,2023-04-17T03:31:26Z,"I agree about sticking with instantaneous for consistency, +1 about the per_sec though, all the other instantaneous metrics do include the units. Another problem I see with ""current"" is it is used extensively to refer to some ""current ongoing process"", like ""current_active_defrag_time"". So, ""instantaneous_eventloop_cycles_per_sec""."
1168125464,11963,madolson,2023-04-17T03:37:31Z,"I suppose ""usecs per seconds"" is a rate. I almost feel like this should be `instantaneous_eventloop_usec_per_second`, which is the rate (or ratio) of time spend in the event loop per second."
1168129903,11963,madolson,2023-04-17T03:51:15Z,"> why do you think it's half baked? maybe the ""other"" is, but not the rest...

@oranagra I don't think we're working back from end users and what problems they will be solving with this information. The original issue was about command latency. In the thread we identified that event loop time was an easy an accessible metric that basically gave this information. As EL time increased, latency would likely go up proportional to it.  So, `eventloop_duration` metrics seems useful. 

Command information also seems useful. End users have the detailed breakdown of all the commands, they can go and see what commands are taking a lot of time and make some decisions based off of that. We also already have this information being calculated, so it seems useful to have it aggregated. 

I'm not sure what the other metrics are really adding. If they see high write IO, what are users going to do about it. I want to keep as much code off the hot path as possible and I want Redis to be as simple as possible."
1168308562,11963,oranagra,2023-04-17T07:46:46Z,"@madolson you're right that some of these are not useful for users, but in some cases metrics in INFO are for us (developers) not users. i.e. if someone submits an issue, we ask for INFO output and try to figure out what's wrong in their deployment and how we can either improve redis, or advise them what's their problem (even if they can't make sense of these metrics).

i'm not saying i'm certain which way to go here, just saying i'd like to have more detail next time i'm looking at such issues and be able to know where the time is spent.
maybe we should add a section for `experimental` or `dev` / `debug` info fields?

p.s. i think that in anyway, our backwards compatibility contract for info fields is a little bit more flexible than commands, and we can drop / change some (ones we think are unlikely to be used by an application / script)"
1168928776,11963,JimB123,2023-04-17T15:44:56Z,"I'll throw in my $0.02 and agree with @madolson.  In my experience, the one metric here that is useful is the event-loop cycle time.  Under heavy load, once Redis caps out on throughput, the event loop cycle time increases.  In extreme cases, with slow & pipelined commands being executed, I have observed scenarios where the event loop cycle time reaches several MINUTES in length.

It's important to consider this edge case.  How will this ""instantaneous"" metric function if the event loop takes 5 minutes to cycle?

IMO, 2 metrics would be useful:
* A rolling average of event loop cycle time over roughly a minute
* An ""instantaneous"" cycle time (over roughly a second)

And we need to understand how both of these will perform when the cycle time is insanely large (like 5 minutes).

Also, I agree that adding metrics just because we can is a dangerous strategy.  Our metrics are not clearly documented.  End-users don't know how to interpret some of the values.  Each metric increases the real-time requirements for INFO ALL.  And (probably most importantly) each metric adds a backwards compatibility burden.  An ill-conceived metric must be maintained for backward compatibility purposes.

@oranagra, I agree that maybe an ""experimental"" section might be a solution.  If so, it should be explicitly stated that items in that section will change without notice and will not be considered a backward-compatibility concern.  I'd suggest that:
* The experimental sections should not appear for INFO ALL
* The experimental sections should be clearly documented that they may change without notice
* We should consider adding this documentation to the live output...  something like:
```
# EventLoop (EXPERIMENTAL)
experimental: this section may change without notice
<metric>: <value>
...
```
* We could add a parameter on the INFO command like `INFO EXPERIMENTAL <section>`




"
1169126930,11963,madolson,2023-04-17T18:30:25Z,">p.s. i think that in anyway, our backwards compatibility contract for info fields is a little bit more flexible than commands, and we can drop / change some (ones we think are unlikely to be used by an application / script)

I don't think this is true. AFAIK we've never broken these outside of major versions, and we should call these out as breaking changes. I agree that we should be more okay removing these, but I don't think the contract is weaker. 

> i'm not saying i'm certain which way to go here, just saying i'd like to have more detail next time i'm looking at such issues and be able to know where the time is spent.
maybe we should add a section for experimental or dev / debug info fields?

Redis is missing a good way to ""introspect"" into what is going on and allow sophisticated users or tools to debug what is going on. I think if we want to target this use case, we should think holistically about the feature. "
1169679373,11963,yossigo,2023-04-18T08:27:02Z,"The IO read metrics should not be interesting until they unexpectedly are if the connection layer is unexpectedly slow. And since it's now extensible, I think the chances of that happening are not zero."
1169716978,11963,yossigo,2023-04-18T08:53:47Z,"> It's important to consider this edge case. How will this ""instantaneous"" metric function if the event loop takes 5 minutes to cycle?

How about simply exposing an event loop counter?"
1174512012,11963,oranagra,2023-04-23T05:40:37Z,"```suggestion
        if (server.execution_nesting == 0)
            durationAddSample(EL_DURATION_TYPE_CMD, duration);
```
i now realize that here we're already after `exitExecutionUnit()`."
1174512582,11963,oranagra,2023-04-23T05:46:59Z,let's change last_sample_time and current_time (now current_time_us) from long long to monotime.
1174512899,11963,oranagra,2023-04-23T05:50:25Z,"that's an indication that we don't have a test for it.
please see if you add some trivial test."
1174513519,11963,oranagra,2023-04-23T05:56:49Z,"re-posting this as a code comment text so for easier discussion (thread that can be resolved:

another interesting metric could be the number of commands per event loop cycle, specifically the max.
considering that we now intend to introduce an experimental section, maybe we can add `eventloop_cmd_per_cycle_max` and maybe re-add `eventloop_duration_max` to have them temporarily until histograms are present?
@madolson WDYT? is the non-`default` (and non-`all`) ""Debug"" section hidden enough to add these temporarily, or you still rather avoid them for now?"
1174537076,11963,CharlesChen888,2023-04-23T08:39:30Z,I wonder how we can test this... We can send `MULTI` `DEBUG SLEEP 1` `EXEC` and then check how much time is added to the metric. But I don't feel it is necessary...
1174541466,11963,oranagra,2023-04-23T09:07:44Z,"with the bug above, nothing will get logged when a plain command is executed, so that's easy to test (just check that we have some value in that metric).
i don't have a strong objection to that DEBUG SLEEP test, but i'm also ok with just having a trivial test that checks the metric isn't empty."
1174542540,11963,oranagra,2023-04-23T09:14:29Z,"this isn't really a monotime (timestamp), it's a duration.
we can maybe add a union, but maybe that's excessive.
at least the monotime tells us what are the units.
maybe some comment can improve things a bit.
e.g. `current_time_sum is a the total duration of that metric in microseconds`"
1174542619,11963,oranagra,2023-04-23T09:15:01Z,the comment needs an update of units
1174561381,11963,oranagra,2023-04-23T11:23:38Z,why not use `[s eventloop_duration_cmd_sum]`?
1174569934,11963,CharlesChen888,2023-04-23T12:14:10Z,I am not so familiar with this TCL test framework... I forgot about this proc.
1182322814,11963,yossigo,2023-05-02T09:37:52Z,@oranagra I think an explicit section that's not default or all is good enough.
1185805368,11963,CharlesChen888,2023-05-05T08:01:31Z,"@oranagra I don't think we need to put temporary metrics for an unstable version, since eventually we will have histograms."
1186040300,11963,soloestoy,2023-05-05T12:35:32Z,"IMHO, the rate and avg are both average, the only difference is the dividend and divisor, the arguments `current_reading` and `current_time` here are unclear, I prefer rename them and reuse the original `trackInstantaneousMetric` like:

```diff
--- a/src/server.h
+++ b/src/server.h
@@ -1695,8 +1695,8 @@ struct redisServer {
     /* The following two are used to track instantaneous metrics, like
      * number of operations per second, network traffic. */
     struct {
-        long long last_sample_time; /* Timestamp of last sample in ms */
-        long long last_sample_count;/* Count in last sample */
+        long long last_sample_base;  /* The divisor of last sample window */
+        long long last_sample_value; /* The dividend of last sample window */
         long long samples[STATS_METRIC_SAMPLES];
         int idx;
     } inst_metric[STATS_METRIC_COUNT];
```

```diff
--- a/src/server.c
+++ b/src/server.c
@@ -695,21 +695,16 @@ int allPersistenceDisabled(void) {
 /* ======================= Cron: called every 100 ms ======================== */

 /* Add a sample to the operations per second array of samples. */
-void trackInstantaneousMetric(int metric, long long current_reading) {
-    long long now = mstime();
-    long long t = now - server.inst_metric[metric].last_sample_time;
-    long long ops = current_reading -
-                    server.inst_metric[metric].last_sample_count;
-    long long ops_sec;
+void trackInstantaneousMetric(int metric, long long current_value, long long current_base, long long factor
+    long long base = current_base - server.inst_metric[metric].last_sample_base;
+    long long value = current_value - server.inst_metric[metric].last_sample_value;
+    long long avg = base > 0 ? (value*factor/base) : 0;

-    ops_sec = t > 0 ? (ops*1000/t) : 0;
-
-    server.inst_metric[metric].samples[server.inst_metric[metric].idx] =
-        ops_sec;
+    server.inst_metric[metric].samples[server.inst_metric[metric].idx] = avg;
     server.inst_metric[metric].idx++;
     server.inst_metric[metric].idx %= STATS_METRIC_SAMPLES;
-    server.inst_metric[metric].last_sample_time = now;
-    server.inst_metric[metric].last_sample_count = current_reading;
+    server.inst_metric[metric].last_sample_base = current_base;
+    server.inst_metric[metric].last_sample_value = current_value;
 }

 /* Return the mean of all the samples. */
@@ -1294,15 +1289,21 @@ int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {
         atomicGet(server.stat_net_repl_input_bytes, stat_net_repl_input_bytes);
         atomicGet(server.stat_net_repl_output_bytes, stat_net_repl_output_bytes);

-        trackInstantaneousMetric(STATS_METRIC_COMMAND,server.stat_numcommands);
+        monotime current_time = getMonotonicUs();
+        long long factor = 1000000; // us
+        trackInstantaneousMetric(STATS_METRIC_COMMAND,server.stat_numcommands,current_time,factor);
         trackInstantaneousMetric(STATS_METRIC_NET_INPUT,
-                stat_net_input_bytes + stat_net_repl_input_bytes);
+                stat_net_input_bytes + stat_net_repl_input_bytes,current_time,factor);
         trackInstantaneousMetric(STATS_METRIC_NET_OUTPUT,
-                stat_net_output_bytes + stat_net_repl_output_bytes);
+                stat_net_output_bytes + stat_net_repl_output_bytes,current_time,factor);
         trackInstantaneousMetric(STATS_METRIC_NET_INPUT_REPLICATION,
-                                 stat_net_repl_input_bytes);
+                                 stat_net_repl_input_bytes,current_time,factor);
         trackInstantaneousMetric(STATS_METRIC_NET_OUTPUT_REPLICATION,
-                                 stat_net_repl_output_bytes);
+                                 stat_net_repl_output_bytes,current_time,factor);
+        trackInstantaneousMetric(STATS_METRIC_EL_CYCLE, server.duration_stats[EL_DURATION_TYPE_EL].cnt,
+                                     current_time,factor);
+        trackInstantaneousMetric(STATS_METRIC_EL_DURATION, server.duration_stats[EL_DURATION_TYPE_EL].sum,
+                                    server.duration_stats[EL_DURATION_TYPE_EL].cnt,1);
     }
```"
1186763658,11963,madolson,2023-05-07T00:34:40Z,"> @madolson WDYT? is the non-default (and non-all) ""Debug"" section hidden enough to add these temporarily, or you still rather avoid them for now?

I'm okay with this."
1186792525,11963,oranagra,2023-05-07T06:40:24Z,sounds like a good idea.
1189381784,11963,oranagra,2023-05-10T05:41:20Z,"shouldn't this be `1` instead of `factor`?

i.e. in the other metric we count rate per second, so the factor scales up the delta time to a full second.
but here we measure an average duration per cycle so `sum` is the duration and `cnt` is the cycle count.
`sum` is in microseconds, and we want the result to remain in microseconds, so `factor` should be 1, right?"
1189386150,11963,CharlesChen888,2023-05-10T05:49:06Z,……I was being careless
1190660124,11963,oranagra,2023-05-11T05:44:41Z,"isn't it simpler to use `server.stat_numcommands` instead of `server.duration_stats[EL_DURATION_TYPE_CMD].cnt`
and then in beforeSleep as well."
1190660545,11963,oranagra,2023-05-11T05:45:24Z,"actually, what you're summing is the max event loop command **duration**, and i meant to measure the command count.
maybe there's a reason to keep both?"
1190663853,11963,oranagra,2023-05-11T05:50:58Z,"let's allow some tolerance, and also make sure a failure prints the bad value
```suggestion
            assert_morethan $value 0
            assert_lessthan $value  15 ;# default hz is 10
```"
1190666637,11963,oranagra,2023-05-11T05:54:43Z,"maybe we can add a resetstat, and then we can put some boundaries on the values?
i.e. we know we have roughly 2 commands, 3 cycles, and duration is probably very low (in any case below 100)

it'll mean we can't use the `foreach`, but that's also a benefit, since we'll have just one `after 110` for all 3 metrics, instead of having 3 sleeps."
1190667367,11963,oranagra,2023-05-11T05:55:45Z,"let's add a comment next to each `after` explaining what we're waiting for.
e.g.
```suggestion
                after 110 ;# hz is 10, wait for a cron tick.
```"
1190671655,11963,oranagra,2023-05-11T06:02:07Z,"let's add a test that makes sure these are not included in the default INFO, and INFO ALL"
1190672796,11963,oranagra,2023-05-11T06:03:48Z,"AOF is disabled, it's ok to keep it like so, but maybe add a comment?
let's also test the other two new metrics."
1190717254,11963,CharlesChen888,2023-05-11T06:58:57Z,"Actually this `cnt` is the command count (represents how many samples are already taken). Command duration is stored in `sum`.
```
void durationAddSample(int type, monotime duration) {
    // ...
    ds->cnt++;
    ds->sum += duration;
    // ...
}
```
When we measure command duration, we take `EXEC` and every command in the transaction as one command, as we take samples only when `server.execution_nesting == 0`. But  `server.stat_numcommands` counts every `call()`. So perhaps we should use `server.duration_stats[EL_DURATION_TYPE_CMD].cnt` here."
1190792867,11963,oranagra,2023-05-11T08:10:34Z,"ohh you're right.
but actually, i think i'd rather count the elements inside multi-exec too for this metric, so knowing that, i think i'd rater start_numcommands.

either way, specifically if we keep what you wrote, i'd rather add a comment clarifying that concern."
1190801629,11963,CharlesChen888,2023-05-11T08:17:48Z,"""Allowing some tolerance"" reminds me that, such tests including time measurement may fail due to performance jittering, and we may end up with allowing a huge tolerance. I don't feel like to do so... "
1191361342,11963,oranagra,2023-05-11T15:33:26Z,"even a huge tolerance (100 times what we expect) can catch some bugs, in comparison, the `>=` seems a little bit useless.
but anyway, i'm also ok keeping what we have now.

i'll try to find some time for manual testing, and then i'll merge it.
or if you can acknowledge that you did that already (monitor these metrics on a server under traffic, and on an idle one), i'll skip it and merge sooner. 

thank you."
1191841365,11963,CharlesChen888,2023-05-12T02:12:23Z,I already did manual testing and the results looks OK. Also added some upper boundaries in the test.
1225672385,11963,madolson,2023-06-11T01:18:47Z,"@CharlesChen888 @oranagra I think we forget to document this on the info documentation page. Unrelated, reply_buffer_expands is also not documented, I wonder if there are others not documented as well."
1226040760,11963,CharlesChen888,2023-06-12T03:06:55Z,Just raised a PR: redis/redis-doc#2439
773885602,9822,sundb,2021-12-22T13:26:28Z,"This looks a little odd, `buf_peak` will never be exactly equal to `buf_usable_size`, and `buf` does not seem to be shrunk normally."
773896378,9822,ranshid,2021-12-22T13:43:16Z,"@sundb we usually try to write as much as possible to the client reply buffer and if filled completely (c->bufpos == c->buf_usable_size) we continue to reply list allocations.
Regarding the shrinking - I am not sure I follow the problem...
maybe you can elaborate?"
774280975,9822,sundb,2021-12-23T02:37:09Z,"@ranshid Because in the normal case, in the old code, unless the reply we send to the client exceeds `buf_usable_size`, `bufpos` is not equal `buf_usable_size`, so `buf_peak` is not necessarily equal to `buf_usable_size`."
774341393,9822,ranshid,2021-12-23T06:18:40Z,@sundb - correct! that is exactly what this change is aiming to. we want the client buffer to be extended only when  the buffer was filled.
797451401,9822,oranagra,2022-02-02T10:12:48Z,"these are stats, right?
let's add a stat_ prefix and put together with other stats."
797523305,9822,oranagra,2022-02-02T11:44:48Z,this allocation should now be counted in getClientOutputBufferMemoryUsage or at least in  getClientMemoryUsage
797552352,9822,oranagra,2022-02-02T12:24:42Z,"```suggestion
 * in case the last observed peak size of the buffer is less than half the buffer size - we shrink by half.
```"
797554973,9822,oranagra,2022-02-02T12:28:11Z,"redis has a mechanism that attempts to scan through all clients once a second, but it also handles at least 10 in each cron, so if there are not a lot of clients, they can be scanned faster.
this means that resetting the peak value on each cron, can behave differently when there are a lot of clients vs just a few.
i think it makes sense to add a mechanism to avoid doing this job (and reset the peak) too often."
797556522,9822,oranagra,2022-02-02T12:30:15Z,"styling.. multi-line `if` gets the brace in a separate line.
```suggestion
        c->buf_peak < c->buf_usable_size/2 )
    {
```"
797556908,9822,oranagra,2022-02-02T12:30:46Z,"styling.. if-else chain, the brace is with the else
```suggestion
    } else if(c->buf_usable_size < PROTO_REPLY_CHUNK_BYTES &&
```"
797558357,9822,oranagra,2022-02-02T12:32:34Z,"aren't we a `min` with PROTO_REPLY_MIN_BYTES here?
is that the minimum threshold for resize, or the minimum size?"
797560254,9822,oranagra,2022-02-02T12:35:10Z,"i think Ran is right.. these days we try to fill it to the last byte (it wasn't like that in the past).
however, i'm afraid that the *2 and /2 thing can somehow cause a resonance effect, especially considering that we don't get the size we asked for (we can get up to 30% more due to internal frag).
maybe we should go with *2 and /4 ?"
797597841,9822,ranshid,2022-02-02T13:18:34Z,ACK - I will move that to the stats section and add the prefix.
797599950,9822,ranshid,2022-02-02T13:21:14Z,ACK - good catch - I will add the buf_usable_size to the sum.
797631662,9822,ranshid,2022-02-02T13:57:27Z,"@oranagra the limit is on the minimum size. 
I can change it to check
`c->buf_usable_size/2 >= PROTO_REPLY_MIN_BYTES `"
797634253,9822,oranagra,2022-02-02T14:00:10Z,"that's also a possibility.. then it becomes the minimum resize threshold, not min size.."
797640177,9822,ranshid,2022-02-02T14:06:45Z,"@oranagra 
we will toggle these sizes [1024,2048,4096,8Kib,16Kib] which matches the jemalloc size classes
I agree that in case these values will change in the future the code would be potentially 25%-30% extra size (like the jump from 8Kib size class to 10Kib)  but we will still make use of the extra size in our attempt to shrink and expend the buffer.
I just feel 4 times shrinkage might be too aggressive. 
Also I thought a lot about the 1Kib min limit which is basically 2 times larger than my plan. since our analysis of customer data sizes shows most cases value sizes are up to 512 bytes."
797644776,9822,ranshid,2022-02-02T14:11:43Z,"I think it is possible to throttle the total buffer reallocations, or we can try to avoid re-sizing the same client too often by skipping it in case it did not pass enough cron cycles. But I wonder if that will not get back to us with dynamic list allocations?
"
797648811,9822,oranagra,2022-02-02T14:15:52Z,ok.. i don't think the current code can actually cause a resonance effect. it's just a paranoia i have of two thresholds being too close to each other. but i suppose in this case it's ok
797650357,9822,oranagra,2022-02-02T14:17:20Z,"i'm sorry, i suppose it wasn't clear what i commented on (i selected one line, but the context in GH shows more).
i was specifically referring to:
```
in any case we will reset the peak value each cron run
```"
797814951,9822,ranshid,2022-02-02T16:50:26Z,"@oranagra I agree that we can soften the peek value reset in some way.
I thought that keeping a new per-client indicator for how many cron iterations visited that client can help in more future cases and can help avoid reseting the peek too often in this case..
alternatively I can just keep the last servertime visiting this client in cron...
what do you think? would that answer your raised concerns?"
797879341,9822,oranagra,2022-02-02T18:02:53Z,"not sure i understand how counting cron iterations will help.
i think we need to remember the peak reset time, and avoid checking these thresholds (and resetting the peak) too soon.
maybe it could be some generic clientsCron mechanism that can serve other per-client cron tasks later.
i.e some clients cron are better be done as soon as possible, but others should not be done too soon.
so there could be a block in clientsCron that's executed just once a second, saving the last time it run in the clients struct."
798389093,9822,ranshid,2022-02-03T09:50:45Z,"@oranagra what I meant is that keeping a per-client track of how many times it was handled by the clients cron can be used in different scenarios to make operations based on estimated time without having to keep a dedicated variables for each.
For example in this case I can reset the peak every (client_cron_ticks % (100/server_hz))
But I think we can currently keep it simple and just make sure we reset the peak value each 5 seconds.
Does that sound better?"
798404213,9822,oranagra,2022-02-03T10:08:15Z,"@ranshid since in certain cases a client can be hit every cron tick, and in others just once a second, i don't think incrementing a counter every time we hit that client is good.
i.e. i assume you mean some mechanism like run_with_period, but that can work only if you know you're incrementing as a roughly constant pace.
maybe i'm misunderstanding you, so writing some pseudo code, or just posting the implementation could help.

we could instead save the value of `server.cronloops` on the last time we hit that client, but i don't even see how this would help to serve multiple purposes, since we have to reset that variable when we perform the action, so if we have multiple actions with different timing requirements, we'll need multiple variables.

my suggestion is able to serve multiple purposes with one variable, just because it defines that all these purposes need a one second intervals.
i.e. the clientsCron is divided into two groups, one runs on every call, and the other is throttled to once a second."
798515532,9822,ranshid,2022-02-03T12:30:47Z,"@oranagra I agree with all you are saying. correct me if I am wrong but the current clients cron is exactly an attempt to operate each client every second. I believe that most of these operations do not really need to be operated exactly once every second but rather as an estimation to prevent keeping the server busy. My main point was trying to make peak resets happen less often which is why I suggested to keep track of cron ticks and perform the operation once every x ticks. I understand that this will cause some difference between scenarios of few and many clients but I am not sure that is a problem. in case of few clients the peak will be checked more often but also the transmit operations, so in case the client is taking on more work I would also expect the peak to reflect the correct reply buffer usage.  In order to reduce the risk I currently set the peak reset period to be once every 5 seconds which is fine as we are mainly worried about un needed shrinks. I just do not want this to become a very complicated solution and keep the clients cron simple and fast. "
798540131,9822,oranagra,2022-02-03T13:02:05Z,"> I believe that most of these operations do not really need to be operated exactly once every second but rather as an estimation to prevent keeping the server busy

that's right, but the mechanism is to make sure they're handled **at least** once a second, and it could be much faster.

> in case of few clients the peak will be checked more often but also the transmit operations

not sure why you say that, i don't see the correlation between client count and the amount of work / data they induce."
798724334,9822,ranshid,2022-02-03T16:08:20Z,"@oranagra I understand. actually I meant exactly something like run_with_period (just was not familiar with it)
in any case my last update makes each client reset the peak every 5 seconds, so it should resolve the few clients issue.
Unless I missed something :) "
800575488,9822,oranagra,2022-02-07T11:46:45Z,outdated comment
800575700,9822,oranagra,2022-02-07T11:47:01Z,spare blank lines
800579980,9822,oranagra,2022-02-07T11:52:46Z,"i think this check could mean that in some cases, we'll never manage to shrink the buffer, since there's a chance it'll always have data.

this brings me to two other realizations:
1. when bufpos is 0, there's no need for a realloc (it might be faster to free and malloc (no need to memmove).
2. i see we update buf_peak in _writeToClient. this means that when we append to the buffer, it's used size (`bufpos`) can be larger than the peak. so when we remove this check (`bugpos != 0`), we better move the updates of the peak to `_addReplyToBuffer`"
800581884,9822,oranagra,2022-02-07T11:55:25Z,"please list all the interface changes in the PR's top comment (the ones for INFO and for CLIENT LIST)
i.e. add a section about interface changes."
800744217,9822,yoav-steinberg,2022-02-07T15:01:11Z,I don't like that these are upper case. They are variables and should be lower case.
800750992,9822,yoav-steinberg,2022-02-07T15:07:41Z,"I also don't understand this check. `bufpos` isn't relevant to us. Only the peak is relevant. We might want to add an assert that `bufpos` <=  `buf_peak`.
We might also want to add an assert that `buf_preak` <= `buf_usable_size`.

Regarding `realloc` I think it'll be always faster to `zmalloc`, `memcpy` `bufpos` bytes and then `free` than to use `realloc`."
800751790,9822,yoav-steinberg,2022-02-07T15:08:23Z,"```suggestion
        c->buf_peak < BUFFER_TARGET_SHRINK_SIZE ) {
```"
800753330,9822,yoav-steinberg,2022-02-07T15:09:50Z,"```suggestion
    } else if (BUFFER_TARGET_EXPEND_SIZE <= PROTO_REPLY_CHUNK_BYTES &&
               c->buf_peak == c->buf_usable_size) {
```"
800758024,9822,yoav-steinberg,2022-02-07T15:14:18Z,Are these reset in `resetServerStats()`? If not please add them.
800820372,9822,ranshid,2022-02-07T16:13:44Z,"@oranagra I agree. this was initially panic check and I agree it can be removed.
regarding moving the peak handling into _addReplyToBuffer I will do that. "
800820821,9822,ranshid,2022-02-07T16:14:11Z,Sure - will be done once I push the next changes
800821108,9822,ranshid,2022-02-07T16:14:29Z,@yoav-steinberg O.K I will make this change
800822114,9822,ranshid,2022-02-07T16:15:31Z,@yoav-steinberg you are totally correct. I missed that one. will be fixed ASAP
800850462,9822,ranshid,2022-02-07T16:44:31Z,@yoav-steinberg I agree that since we are switching size classes the realloc would probably not operate in-place. however since realloc follows the same logic as allocate->copy->free I prefer using an existing API rather than implementing about the same logic. Do you feel that it brings noticeable performance cost?    
801056420,9822,oranagra,2022-02-07T21:03:59Z,"@yoav-steinberg multi-line `if` statements have the `{` in a separate line (less confusing).
@ranshid you meant to reply to Yoav's followup on my [comment](https://github.com/redis/redis/pull/9822#discussion_r800579980).
i'll respond there"
801057292,9822,oranagra,2022-02-07T21:05:19Z,"@yoav-steinberg i suggested to use free+malloc, in case `bufpos` is 0, instead of realloc.
not to use malloc+memcpy+free."
801560916,9822,ranshid,2022-02-08T12:06:13Z,@oranagra I edited the PR comment. take a look when you have the time and tell me if it is well explained.
801563250,9822,ranshid,2022-02-08T12:09:16Z,done
801563819,9822,ranshid,2022-02-08T12:10:04Z,fixed
801564532,9822,ranshid,2022-02-08T12:10:57Z,I have implemented the suggestion. If that looks reasonable to you I will resolve that case issue. 
801574648,9822,ranshid,2022-02-08T12:23:56Z,what @yoav-steinberg requested seems more intuitive to me and it provides a simpler rules for other developers as for a single line if we request the '{' on the same line. But i would go with whatever is the current convention in our code I looked at this example https://github.com/redis/redis/blob/unstable/src/networking.c#L1152 which is like what @oranagra suggested at first. So I will change it back
801577457,9822,oranagra,2022-02-08T12:27:21Z,"we must avoid lowering the peak to below the used size, it could later cause us to shrink to that size and lose data.
```suggestion
        c->buf_peak = c->bufpos;
```"
801580149,9822,oranagra,2022-02-08T12:30:40Z,"since you saved one call by using zrealloc_usable, we can do that here too.
```suggestion
            c->buf = zmalloc_usable(new_buffer_size, c->buf_usable_size);
```"
801586480,9822,oranagra,2022-02-08T12:38:35Z,"styling: `if` condition with multiple lines, should have the open `{` in a separate line.
otherwise, it's hard to distinguish between the condition and the actions.

p.s. the alignment of the additional condition lines should probably either be indented by 4 compared to outer scope, or indented to after the `if` opening `(`.
see the indentation of the `else-if` below.

p.p.s that `else-if` is also missing a space before the `(`"
801591699,9822,oranagra,2022-02-08T12:45:05Z,"for growing, it makes sense to grow incrementally, i.e. each time the peak==usable it means we reached the max we could reach, and we can grow to *2.
but for shrinking, if a client suddenly became silent, or started issuing small commands, there's no need to incrementally shrink it by half each time.
maybe we can do better, like shrink it to the size of the peak? or maybe to double the size of the recent peak?"
801605817,9822,ranshid,2022-02-08T13:01:32Z,I agree @oranagra 
801662772,9822,ranshid,2022-02-08T14:02:17Z,@oranagra I agree. that sound reasonable. I can change it to shrink to last peak size + 1 
801726855,9822,oranagra,2022-02-08T14:59:52Z,"for a moment i preferred last peak * 2, but actually, malloc is likely to give you some 30% extra, so +1 is good."
801730104,9822,ranshid,2022-02-08T15:02:47Z,"Great - @oranagra can you please help me in running the tests again?
I cannot trigger them myself and I think the results are outdated "
807225755,9822,oranagra,2022-02-15T19:15:11Z,"the code is synchronous, why use async `after`?
i.e. why not just:
```
after 5000
assert_equal [get_reply_buffer_size test_client] 1024
```"
807227554,9822,oranagra,2022-02-15T19:16:54Z,"if we have this here, why do we need the other test?"
807229900,9822,oranagra,2022-02-15T19:20:00Z,"even with this one, i think we better re-write it without the async `after`, might be easier to understand with a simple loop that runs 500 times and sleeps 100..


p.s. since all of this could be running on a slow machine and redis might be starved of CPU, we need longer timeouts.
or alternatively, just wait for the effect we aim for, and then assert for how long it took"
807230715,9822,oranagra,2022-02-15T19:21:02Z,"since all these tests are very slow, i'd rather add an `if {$::accurate)` which will prevent them from running in the normal execution of `./runtest`.

alternatively, maybe the 5 seconds interval we chose for the peak adjustment is too high? setting it to 1 second could have meant that this test will be over in 3 rather than 15."
807770454,9822,yoav-steinberg,2022-02-16T10:25:56Z,If we're shrinking and `c->buf` == 1 then the realloc here might do an implicit memove of `new_buffer_size` instead of just 1. Because we're shrinking to half the size (or less) then it's almost certain the realloc wll perform a new allocation and won't keep the original one. So I think it's better to to a `zmalloc_usable` regardless of `bufpos`. And then do a memcpy from the old pointer to the new of `bufpos` size (0 being a nop).
807846405,9822,yoav-steinberg,2022-02-16T11:41:39Z,"```suggestion
    size_t buf_peak; /* Peak used size of buffer in last 5 sec interval. */
```"
807847221,9822,yoav-steinberg,2022-02-16T11:42:28Z,"```suggestion
    long long stat_reply_buffer_shrinks; /* Total number of output buffer shrinks */
```"
807849272,9822,yoav-steinberg,2022-02-16T11:44:36Z,I feel that making the tests fast shouldn't drive setting constant values. So I'm for keeping it at 5. Of course this can be a hidden config which we'll set in the tests to make them quicker.
807863062,9822,yoav-steinberg,2022-02-16T11:57:56Z,I think the test can be independent from the 5 sec constant by using a `wait_for_condition` call. We need to verify the buffer starts large (missing in the current test) and then goes down to 1k.
807866883,9822,yoav-steinberg,2022-02-16T12:01:50Z,Might be good to show that the size doesn't go over 16k even if we read a variable larger than 16k. And also might be worth checking that we grow to intermediate values like 4k (although less critical).
808136383,9822,ranshid,2022-02-16T15:40:50Z,@yoav-steinberg I also agree. I suggested at some point that maybe we can allow tuning this feature in the DEBUG command?
808142488,9822,ranshid,2022-02-16T15:45:28Z,@yoav-steinberg - good suggestion - I will add this
808145523,9822,ranshid,2022-02-16T15:47:47Z,"@yoav-steinberg I initially started to check intermediate values. but I wanted to first introduce the basic cases.
the main problem is that the malloc tests will fail since it will not be aligned to the same size classes IMO. "
808710574,9822,yoav-steinberg,2022-02-17T06:25:43Z,"Yes, look at the implementation of `""key-load-delay""` config variable. This is probably where something like this should be (assuming @oranagra agrees)."
808712687,9822,yoav-steinberg,2022-02-17T06:30:19Z,"> the main problem is that the malloc tests will fail since it will not be aligned to the same size classes IMO.

I think just checking that the buffer's under 16k but over 1k is enough to verify ""intermediates"". Doesn't need to be exact or assume specific size classes.
"
808717551,9822,oranagra,2022-02-17T06:40:42Z,"i'm not certain that this mechanism justifies a hidden config. (loading delay is heavily used by many tests).
I agree that generally, it would be wrong to change the threshold of the code just because we want the test to be fast, but in this case i'm not sure why we chose the 5 seconds threshold.
i remember arguing that we can't rely on the rate of the clientsCron since it could sometimes be much faster, but that doesn't mean we can't limit it to 1 second.
on the other hand, since this test it not that important, i don't mind running it only when `--accurate` is given (daily CI and before release)"
808732586,9822,yoav-steinberg,2022-02-17T07:09:49Z,+1 for `--accurate`.
810587256,9822,oranagra,2022-02-20T08:17:41Z,"so we'll wait an additional 5 seconds per client?
that's unacceptable.
even waiting 5 seconds after the loop for all clients to be resized (one 5 seconds delay in contrast to one per client) would be too much.
we should either find some trick to avoid the buffer being resized (keep a high peak),
or we add a hidden config for this this shrinking and set to very high value."
810589422,9822,ranshid,2022-02-20T08:38:26Z,"@oranagra the clients are no expected to wait 5 seconds. I mainly did that in order to provide some upper limit.
the clients are starting idle, so I only want to make sure the cron will shrink their buffers (does not require 5 seconds peak reset)
However I am supportive for some feature disablement mechanism. I offered to support a debug sub command to disable this feature but a config is also possible."
810590524,9822,oranagra,2022-02-20T08:48:12Z,"ohh, i now realize that setting `buf_peak_last_reset_time` to 0 at client creations means that it's gonna get resized for the first time very quickly, possibly before it manages to send anything.
maybe that's not wise?
maybe we should either set `buf_peak_last_reset_time` to ""now"" on client creation, or if we set it to 0, we should probably set the startup `c->buf` to `PROTO_REPLY_MIN_BYTES` instead of `PROTO_REPLY_CHUNK_BYTES`.

setting it to MIN_BYTES (and setting `reset_time` to 0) could cause a bigger performance regression, so from performance standpoint, we better keep the big allocation, and use ""now"".
on the other hand, using MIN_BYTES will make our tests easier... but as noted earlier, test shouldn't influence production decisions.

so please use ""now"" and add a DEBUG control for this threshold (i think it's slightly better than a hidden config for this purpose)."
810645085,9822,oranagra,2022-02-20T15:46:44Z,"not a real concern, but let's use the same approach used elsewhere in this file, and call getLongFromObjectOrReply"
810645743,9822,oranagra,2022-02-20T15:51:51Z,"while we're at that. let's change the resolution here to milliseconds.
currently use're using either 0, 5 or infinite. but maybe we'll find use for fractions of a second soon.

also, it makes much more sense, that a client that connected just one millisecond before the `unixtime` changed, will get handled a full second earlier, than a client that connected 1 millisecond after the `unixtime` changed."
810646587,9822,oranagra,2022-02-20T15:57:08Z,"this test now needs to be tagged with `needs:debug`.
and also maybe we should vert that setting at the end, for the case the test runs against an external server, so it's the same server used for other units later.

p.s. is that the only test that was flaky? "
810646778,9822,oranagra,2022-02-20T15:58:27Z,"we can now drop the accurate, and maybe use 100ms peak-reset-time to still validate that things aren't reset too soon or too late?

p.s. the comment below about 5 seconds, is outdated.

and also, let's reset the peak-reset-time back at the end, for a case the test is run against an external server.
also same comment about `needs:debug` tag"
810650845,9822,ranshid,2022-02-20T16:28:00Z,Yes that was the only test that failed.
810659418,9822,ranshid,2022-02-20T17:35:44Z,"@oranagra made this change. I also migrated to use the clientscron taken ""current time"" to be more accurate "
810847312,9822,oranagra,2022-02-21T07:42:34Z,"i think i meant to use `server.mstime` instead of `server.unixtime`
i'm not sure why clientsCron samples `mstime()` on it's own.. but well, don't care either way."
810847866,9822,oranagra,2022-02-21T07:43:28Z,"FYI, when m said ""reset"" i thought that the test suite will just set it back to 5.. but this way is ok too."
810848507,9822,oranagra,2022-02-21T07:44:31Z,"```suggestion
        now_ms - c->buf_peak_last_reset_time >= server.reply_buffer_peak_reset_time)
```"
810853771,9822,oranagra,2022-02-21T07:52:59Z,"i see my report indicated a few other tests failed:
https://github.com/redis/redis/pull/9822#issuecomment-1040675854
please look into this and let me know when done."
810871993,9822,ranshid,2022-02-21T08:20:33Z,I initially did use the server mstime. but felt now_ms would be even more precise :) 
810872820,9822,ranshid,2022-02-21T08:21:39Z,I think it is better to keep defaults located at a single place so that in case we will decide to change it in the future will not have to cover many places...
810880615,9822,ranshid,2022-02-21T08:31:14Z,"> i see my report indicated a few other tests failed: [#9822 (comment)](https://github.com/redis/redis/pull/9822#issuecomment-1040675854) please look into this and let me know when done.

1. The error in ""evict clients in right order"" was fixed. the issue was related to the fact that the last clients was not freed due to the memory optimization (it was reducing memory under 128K)

2. the error in replybufsize test was as a result of using libc malloc and not jmalloc. I made several fixes there and is should not fail.

3. the third error (Use takeover to bring slaves back: FAILED: caught an error in the test ERR You should send CLUSTER FAILOVER to a replica
ERR You should send CLUSTER FAILOVER to a replica) 
I was unable to reproduce again when I run the daily on a private branch. but In case the upcoming daily will fail I can look into it...
"
810925561,9822,oranagra,2022-02-21T09:24:15Z,what changes did you make for the `replybufsize.tcl` failures?
810928212,9822,ranshid,2022-02-21T09:27:01Z,mainly checking that the value is between 1kib to 2kib after shrinkage
811220514,9822,yossigo,2022-02-21T15:09:53Z,"```suggestion
/* The client output buffer can be adjusted to better fit the memory requirements.
```"
811222817,9822,yossigo,2022-02-21T15:12:29Z,"```suggestion
            ""reply_buffer_expands:%lld\r\n"",
```"
811222994,9822,yossigo,2022-02-21T15:12:42Z,"```suggestion
            server.stat_reply_buffer_expands);
```"
811223965,9822,yossigo,2022-02-21T15:13:53Z,"```suggestion
    long long stat_reply_buffer_expands; /* Total number of output buffer expands */
```"
811224706,9822,yossigo,2022-02-21T15:14:48Z,"```suggestion
    const size_t buffer_target_expand_size = c->buf_usable_size*2;
```"
811224885,9822,yossigo,2022-02-21T15:15:01Z,"```suggestion
    } else if (buffer_target_expand_size < PROTO_REPLY_CHUNK_BYTES*2 &&
```"
811225064,9822,yossigo,2022-02-21T15:15:13Z,"```suggestion
        new_buffer_size = min(PROTO_REPLY_CHUNK_BYTES,buffer_target_expand_size);
        server.stat_reply_buffer_expands++;
```"
811225274,9822,yossigo,2022-02-21T15:15:29Z,"```suggestion
    server.stat_reply_buffer_expands = 0;
```"
1417307871,12822,oranagra,2023-12-06T13:33:07Z,i think we wanna keep calling it `expires`
1417337995,12822,oranagra,2023-12-06T13:41:14Z,"i think we should still have dbFind, that's a wrapper over daFind, and implicilty finds the slot (dict index)."
1417345174,12822,oranagra,2023-12-06T13:45:15Z,"i wonder if the term ""slots"" is right in that context?
maybe it should be dicts, and dictIndex?
i.e. the hashing and slot indexing is still calculated from outside (db.c), right?
so the dict-array is just a generic array of dictionaries, nothing specific to hash-slots?
and the dbXxxx interfaces are the ones that do the slot magic?"
1418261513,12822,guybe7,2023-12-07T03:19:14Z,should i wrap all `da*` APIs that take a slot with a `db*` function that calls `getKeySlot`?
1418262356,12822,guybe7,2023-12-07T03:21:12Z,"yes, i guess i can just call it `length` and `length_bits`?"
1418882476,12822,oranagra,2023-12-07T12:22:03Z,"not sure about all, but certainly the common ones. (find, and maybe add and remove)"
1418886207,12822,oranagra,2023-12-07T12:25:09Z,"we need to consider all the other references to ""slot"" and ""slots"" in this file.
it could be ""length"" / ""count"" and ""index"". or ""num_dicts"" and ""dict_idx"".
i suppose the right way to find out is to try and rename them all and see what feels right."
1419477763,12822,madolson,2023-12-07T18:59:20Z,"I don't like introducing acronyms for brevity unless they are common, since it just increases the time it takes for folks to understand something. DB is a very common one and I have no other association outside of Database, DA to me is a District attorney (It's also yes in russian). "
1419491140,12822,madolson,2023-12-07T19:11:56Z,"Yeah, we discussed this in the per-slot dictionary PR, but it didn't really fit there.  I agree, we should just rename stuff and see what sticks."
1431028182,12822,oranagra,2023-12-19T07:43:18Z,"i rather avoid adding members to the `dict` struct.
maybe this can still be part of `dictType`?"
1431570770,12822,oranagra,2023-12-19T15:25:43Z,"i wonder why we had that dictSize call? is it completely excessive? or was there some hidden reason?
can you check the blame log?"
1432234677,12822,guybe7,2023-12-20T04:31:14Z,"i'm open to suggestions but i don't think ""db"" is a good choice because it should be an abstract DS (in addition, it doesn't necessarily represent a database, because also we use it to hold all volatile keys, which are just a subset of the whole database)"
1432235222,12822,guybe7,2023-12-20T04:32:24Z,"i'm keeping this comment open for now because i think ""volatile_keys"" is a better name... let's see what others think"
1432240913,12822,guybe7,2023-12-20T04:44:26Z,"it dates back to before 2010, a lot of code movements in these early years, I gave up after 5-6 such commits

my guess is that it was just an attempt to save some CPU cycles for hashing the keyname in case there are no volatile keys? perhaps in case a user doesn't even work with volatile keys at all?

should i revive that check? or better yes, early-exit inside dictDelete if the dict is empty?"
1432370917,12822,oranagra,2023-12-20T07:55:12Z,"maybe `dictArr` or `darr`?
i.e. we don't want to invent a new a 2 letter abbreviation, but we're ok to create a new term / class name as long as it's easily distinguishable / grep-able, right?
  
we said we're gonna use `didx` instead of `slot`, right?
and then `count` or `dcount` instead of `slot_conut`?

i'd vote for:
* `dictArr` for function prefix
* `didx` instead of `slot`
* `dcount` for length"
1432371103,12822,guybe7,2023-12-20T07:55:23Z,"we need to make sure that `_cursor` doesn't use more than `64-num_dicts_bits` bits, otherwise `addDictIndexToCursor` will mess up"
1432373086,12822,oranagra,2023-12-20T07:57:24Z,"i think we should add some code to detect this case, and then fail SCAN with some error.
since it's a runtime error, and not a logical error in the code, i don't think killing the process with an assert is right.
@madolson WDYT?"
1432526610,12822,guybe7,2023-12-20T10:20:17Z,"ok, but i prefer `darr` as function prefix

objections?"
1432528100,12822,guybe7,2023-12-20T10:21:01Z,"for the record, this problem exists in unstable today"
1432540086,12822,oranagra,2023-12-20T10:32:00Z,"i'm ok with it (4 letters is better than 2).
let's wait for Madelyn's input."
1432543340,12822,oranagra,2023-12-20T10:35:07Z,"dictFind has an early abort if the dict is empty. anyway, fine. let's dismiss it."
1432548944,12822,guybe7,2023-12-20T10:40:25Z,"ok, so i'm leaving the code as-is and resolving this comment"
1433097057,12822,madolson,2023-12-20T19:21:35Z,"Yeah, we are relying on some assumption that we can only support 2^48 items in a dictionary, which is far beyond what we could practically support. (The dictionary would be at least 1PB in size alone) We could consider adding a static assert here to bound the size of the number of dicts, just so it's clearer. "
1433964880,12822,oranagra,2023-12-21T11:46:38Z,makes sense (to add a an assert on the number of dicts).. i didn't bother to do the math.
1433966080,12822,oranagra,2023-12-21T11:47:50Z,"@madolson please comment on the above terminology, and maybe generally what you feel about merging this PR."
1440981737,12822,madolson,2024-01-03T21:37:41Z,"My impression is that after we do this refactoring, completely rewriting the internal storage of how we store KV in Redis should have ""zero"" impact outside of db.c. I think this command should stay as dbScan, modules shouldn't care what the underlying implementation of the DB is and shouldn't need deep knowledge into what is below the interface."
1440983204,12822,madolson,2024-01-03T21:39:21Z,This seems like it's exposing a lower abstraction than should be visible.
1440991343,12822,madolson,2024-01-03T21:47:59Z,"So, my three main thoughts on naming are:
1. I don't think the dictArray should be so widely visible inside of Redis. I think we want to abstract away the actual in-memory storage of key/values inside of db.c as much as possible with clear APIs. If this PR reflected that abstraction, I think the naming of dictarray is fine, as it is the current datastructure we are using. However, the current PR exposes it in server.h and calls the APIs from all over the place.
2. Do we want to be naming it based on the physical implementation or the role that it fills. It is physically an array of dictionaries, but we could also just call it `redisKV` and basically get the same result. It would have a more fixed API over.
3. I don't really like dictarray, as my first guess would be a merging of a dict + array. (Like an associative array backed dictionary that is has very fast scanning I guess). I remember soloestoy had some suggestion like dicts or multidict which I think better captures the structure. (This is not something I would fight very hard about)

You also mentioned using something like darr as an abbreviation, we can spend the couple of bytes to use `dictArray` can't we?"
1440992747,12822,madolson,2024-01-03T21:49:31Z,"We don't normally add copy right information in the header files, it's normally the actual code files."
1440994821,12822,madolson,2024-01-03T21:51:47Z,"I don't know what dict extension means, I assumed this was going to be growing the dicts which seems related to the rehashing but there is also a debug command here."
1441001069,12822,madolson,2024-01-03T21:58:24Z,"I mean. I think volatile_keys is a better name, but I'm not convinced changing it for the sake of change is a great idea."
1444290977,12822,oranagra,2024-01-08T08:39:49Z,"ok, we can place wrappers for dbScan and dbSize in db.c, like we have for dbFind.
i wonder if this is the only dependency of module.c with the db dicts, if not, maybe we should leave it for the day we actually need to decouple them."
1444294665,12822,oranagra,2024-01-08T08:44:10Z,"i'm in favor of just keeping the same variable name we had in 7.2.
i.e. this PR will make the diff between 8.0 and 7.2 slightly simpler (compared to what's in unstable now)"
1444297445,12822,oranagra,2024-01-08T08:47:18Z,"i was ok with `dictArray`, but i actually like the suggestion of `redisKV`.
how about `kvstore` instead? (not to mention redis in the name)"
1444501508,12822,guybe7,2024-01-08T11:52:30Z,so all the `db*` wrappers will not take the actual struct as a parameter (work on `keys` implicitly)
1444504535,12822,oranagra,2024-01-08T11:55:48Z,"i think in this case (the MEMORY SATATS command) it should be low level.
i.e. this function is conceptually part of db.c (found itself in object.c by coincidence)"
1445840679,12822,guybe7,2024-01-09T09:31:22Z,"@oranagra @madolson changed to `kvstore`
can i resolve this comment?"
1445873948,12822,guybe7,2024-01-09T09:59:10Z,"added `dbScan` which takes a `redisDb*`
can i resolve this comment?"
1457608969,12822,oranagra,2024-01-18T15:28:57Z,looks like you forgot to remove it from the server struct
1457692428,12822,oranagra,2024-01-18T16:23:38Z,couldn't it still be NULL?
1457693957,12822,oranagra,2024-01-18T16:24:48Z,"WTF!!!!
and also !!
that's why i never trust mass search and replace, i do them manually one by one."
1457707776,12822,oranagra,2024-01-18T16:35:11Z,"don't we have dbFind again now?
or did you do that to avoid calling getKeySlot twice (it should have internal cache)"
1457734561,12822,oranagra,2024-01-18T16:56:03Z,just want to comment that i wasn't happy with these loops (and enum itself). happy to see them go away.
1457740163,12822,oranagra,2024-01-18T17:00:41Z,"let's document the input argument.
that's log2 of the size (and 0 indicating one dict)"
1457752305,12822,oranagra,2024-01-18T17:10:57Z,"the comment is outdated.
also, please double check that a call to dbFindExpires returns ASAP if it's completely empty"
1457774669,12822,oranagra,2024-01-18T17:29:50Z,missing some doc comment
1457789267,12822,oranagra,2024-01-18T17:43:12Z,"i noticed we lost all the warning and debug logging from this method
not sure they were absolutely necessary though."
1457805017,12822,oranagra,2024-01-18T17:58:06Z,let's add some header explaining what this class does / why / how.
1457807441,12822,oranagra,2024-01-18T18:00:19Z,let's document why we do these assertions
1457810463,12822,oranagra,2024-01-18T18:03:34Z,we're missing the size of the kvstore struct itself.
1457819705,12822,oranagra,2024-01-18T18:13:15Z,again. i'm happy.. this is so much better (all the logic about creating and destroying the data structure isn't duplicated 8 times)
1457826522,12822,oranagra,2024-01-18T18:19:59Z,"so you folded htNeedsShrink (from server.c) into dictShrinkToFit (and renamed it)?
let's mention that in the top comment (it took me a moment to figure this out)"
1457834139,12822,oranagra,2024-01-18T18:27:51Z,note to self: re-review all the rehashing changes in server.c and kvstore.c after the next rebase (skipped them now)
1457836643,12822,oranagra,2024-01-18T18:30:21Z,does that comment require an update?
1457839748,12822,oranagra,2024-01-18T18:33:17Z,"so we have another 8 bytes of memory usage per dict, that's 16384*2*8 (~200k).
but maybe with internal frag it's more?"
1457869763,12822,oranagra,2024-01-18T19:04:35Z,"that would be a regression, right?
kvstore does'nt destroy the dict when it becomes empty, right?"
1457870782,12822,oranagra,2024-01-18T19:05:41Z,"with regards to the above comment, if we fix this, we need to revive this condition"
1457871405,12822,oranagra,2024-01-18T19:06:27Z,same here.
1457889881,12822,oranagra,2024-01-18T19:25:40Z,"the references to ""cluster"" should be changed."
1457890651,12822,oranagra,2024-01-18T19:26:31Z,"why did you move from serverAssert to assert?
i think we can afford to include redisassert.h"
1457956830,12822,oranagra,2024-01-18T20:41:48Z,some leftovers using the `da` prefix?
1457963295,12822,oranagra,2024-01-18T20:49:35Z,"please mention in the top comment, that you changed pubsub_channels to kvstore and why.

please also mention the reason in the code (e.g. here, and maybe somewhere in pubsub.c)"
1461641708,12822,guybe7,2024-01-22T10:21:40Z,"no, kvstore's dicts always exist"
1461644663,12822,guybe7,2024-01-22T10:23:26Z,oopsie
1461648255,12822,guybe7,2024-01-22T10:25:38Z,"i wanted to avoid getKeySlot

the caching only works if `server.current_client->slot` is valid, if it's not, two calls to getKeySlot will actually calculate the hash twice"
1461648489,12822,guybe7,2024-01-22T10:25:47Z,me too
1461656072,12822,guybe7,2024-01-22T10:30:24Z,"why is the comment outdated?

and yes, it does"
1461713484,12822,guybe7,2024-01-22T11:15:55Z,"yes, it didn't feel right calling `serverLog` from `kvstore.c`

WDYT?"
1461728896,12822,guybe7,2024-01-22T11:30:25Z,"there is no `serverAssert` in all other core DS (dict.c, listpack.c, etc.)"
1461741482,12822,guybe7,2024-01-22T11:42:46Z,"it's technically correct, but i think it's redundant (it's obvious the metadata affects the total overhead)"
1462696215,12822,guybe7,2024-01-23T03:57:36Z,correct
1462696857,12822,guybe7,2024-01-23T03:59:13Z,"not sure what you mean by ""regression"" in this case

correct, kvstore's dicts always exist, even if empty"
1462702884,12822,guybe7,2024-01-23T04:12:32Z,"done, but couldn't find an appropriate place to mention it in pubsub.c"
1462846582,12822,oranagra,2024-01-23T07:50:41Z,"the comment was for code that did `dictSize` before doing `dictFind`.
now that you call `dbFindExpires` without any checks, it's no longer relevant."
1462850819,12822,oranagra,2024-01-23T07:55:03Z,"i agree, but i'm not sure how much we need them, and if we wanna still make some effort to show them, e.g. special return value from kvstoreExpand.
i.e. these are cases where the expansion failed (skipped) because of insufficient memory."
1462852370,12822,oranagra,2024-01-23T07:56:28Z,"for our knowledge, can you calculate the diff when taking internal frag into account?
@madolson WDYT?"
1462854344,12822,oranagra,2024-01-23T07:58:30Z,"i mean that the previous code dismissed the unused dicts, and now they always exist.
maybe we should modify kvstore to be able to dismiss empty dicts?
maybe we don't want that in the main db keys, but we do want that in pubsub?
@madolson WDYT?"
1462855577,12822,oranagra,2024-01-23T07:59:48Z,"ohh, right. it uses `#include ""redisassert.h""`, and this one does too."
1462953757,12822,oranagra,2024-01-23T09:13:43Z,"let's take this opportunity to attribute some of this code to Vitaly / hpatro / AWS who invested a lot of effort in dict.c and didn't that line there.
@madolson please advise."
1464113250,12822,madolson,2024-01-23T23:26:12Z,"I'm against adding this type of copyright for a specific person/company since it's almost always not accurate, since other people contribute. I think we should just say,
```suggestion
 * Copyright (c) Redis contributors.
 * All rights reserved.
```
This is also not legally binding based on what I've been told, so it doesn't matter what we put here, so I would rather us just be inclusive and generic to avoid people trying to update it."
1464122576,12822,madolson,2024-01-23T23:41:04Z,I don't really want to pay an extra 200kb just because? What is the material value of adding this as opposed to the previous implementation.
1464123509,12822,madolson,2024-01-23T23:42:43Z,"Yeah, we did that for the pubsub dictionaries to avoid the unnecessary overhead when it wasn't being used (since we expect many users wouldn't use it at all)."
1464128014,12822,madolson,2024-01-23T23:50:25Z,"```suggestion
#include ""fmacros.h""
```"
1464128934,12822,madolson,2024-01-23T23:52:13Z,"```suggestion
static void dictRehashingCompleted(dict *d) {
```
I don't know why people started putting underscores in method names, we use static to indicate it's private most places."
1464132396,12822,madolson,2024-01-23T23:58:44Z,"I don't get the abstraction if you can:
1. Get the underlying dict to directly manipulate it. (kvstoreGetDict)
2. Have high level APIs to set data in the underlying store. (kvstoreDictSetKey)

There is a bunch actions where you can do the same thing two ways, and I would rather us be opinionated. Either you should always call kvstoreDictFind() and then operate on it or always call the higher level apis (What I would prefer). "
1464132944,12822,madolson,2024-01-23T23:59:45Z,"Might have missed something, but I don't see this used anywhere."
1464134482,12822,madolson,2024-01-24T00:02:43Z,"```suggestion
""0dO"", ""2Ql"", ""6jB"", ""aU1"", ""45E"", ""6Dn"", ""iQ"", ""88"", ""0GS"", ""da"", ""acL"", ""48u"", ""4RQ"", ""4G0"", ""JM"", ""94N"", ""12W"", ""EL"", ""4H1"", ""5Mq"", 
```"
1464135138,12822,madolson,2024-01-24T00:04:06Z,"While we're here, why is this in acl.c? Should we push this over to pubsub.c?"
1464140517,12822,madolson,2024-01-24T00:13:38Z,"Does this need to be a separate struct? It seems to just add a lot of ""->state."" everywhere, which doesn't seem that useful."
1464140871,12822,madolson,2024-01-24T00:14:13Z,"Can we make this an opaque pointer, i.e. only define it inside the .c file, so external users go through the APIs and don't try to access anything. Same with the iterator I suppose."
1464363604,12822,guybe7,2024-01-24T06:30:47Z,"yeah i can do that i guess
@madolson thoughts?

but @oranagra how often does it happen that we run out of memory while expanding a dict? i mean, if we're that close to OOM, why shouldn't we just panic while expanding instead of the next time someone inserts one key too much?"
1464366158,12822,guybe7,2024-01-24T06:34:23Z,"in the previous implementation Redis itself managed the `rehashing` list of rehashing dicts, and thus it could trigger the rehashing-related functions in the correct `kvstore` (either main or volatiles)

we want all `kvstore`'s logic to be self-contained, so we need each dict to have a reference to its `kvstore` instance

having said that, i'm open to suggestions, maybe there's a way to keep everything contained to kvstore.c without the 200k additional overhead"
1464368775,12822,guybe7,2024-01-24T06:37:35Z,"so what's the verdict? do we want `kvstore` to deallocate empty dicts?

if so, why shouldn't we do it in the main `kvstore`? i'm assuming that if clustering mode is used, there's probably more than one shard, and assuming fair distribution, maybe it's safe to assume that >0/5 of the hash slots are unused in every shard."
1464373978,12822,oranagra,2024-01-24T06:43:25Z,"it's actually not about being close to OOM, it's about someone requesting more memory than the total memory the system has (i.e. asking got 80GB on a 64GB machine), if it comes from RDB parser, we panic, and if it comes from DEBUG RELOAD, we gracefully skip it.

come to think of it then, i'm ok dropping these prints then."
1464376087,12822,oranagra,2024-01-24T06:46:26Z,"maybe the rehashing list should be global?
i.e. declared in the kvstore struct as static?
that would solve it, right?"
1464378705,12822,oranagra,2024-01-24T06:49:36Z,"yes and no. there are few concerns:
1. if sharded pubsub is completely unused, let's not allocate all these dicts.
2. for the sharded keyspace, indeed we'd rather not allocate dicts for slots that aren't assigned to the current node.
3. but on the other hand, we'd rather not de-allocate a dict every time it becomes empty, and re-allocate it when a key is added again.

maybe the easiest way forward is to add a per-kvstore flag, so that pubsub can behave differently than the keyspace ones?"
1464382096,12822,guybe7,2024-01-24T06:53:31Z,"i did it because `dictMetadataSize` was already defined as a macro in dict.h

i'll add the `kvstore` prefix instead of an underscores"
1464387260,12822,guybe7,2024-01-24T07:00:33Z,"please see the top comment

i'm all in favor of dropping `kvstoreGetDict` and wrap every dict-specific action with a `kvstoreDict*` function

@oranagra ?"
1464418634,12822,oranagra,2024-01-24T07:16:25Z,"i think some low level operations may still need to access the dict directly.
maybe like in db.c, and defrag.c. which is why i wanted to wrap most common APIs, but avoid wrapping the rarely used complex / low level ones.
@guybe7 can you sum the gaps here (a quick list of places that use dict directly and which function)?"
1464457845,12822,guybe7,2024-01-24T07:42:06Z,"```
dictSize - rdb.c, evict.c. cluster.c,  cluster_legacy.c
dictGetIterator - pubsub.c, cluster.c
dictGetSafeIterator - db.c, pubsub.c, cluster_legacy.c
dictGetRandomKey - evict.c
dictGetFairRandomKey - db.c
dictFindEntryByPtrAndHash - defrag.c
dictGetSomeKeys - evict.c
dictExpand - rdb.c
dictScanDefrag - defrag.c
dictGetHash (not dict-specific, we could use any dict, so it doesn;t need to take dict-index) - defrag.c
dictFetchValue - pubsub.c
```"
1464533527,12822,guybe7,2024-01-24T08:49:35Z,"good idea, i'll add it in a seperate commit"
1464535704,12822,oranagra,2024-01-24T08:51:04Z,"i'd try to argue that the ones in rdb.c, evict.c, defrag.c, and db.c are ok to use low level dict access.
and that maybe the pubsub and cluster ones should be resolved.
this means adding kvstoreSizeAtIndex(), kvstoreGet[Safe]IteratorAtIndex(), and kvStoreFetchValue().
is that right?
let's wait for Madelyn's response before acting."
1464550992,12822,guybe7,2024-01-24T09:03:07Z,"i'd love that, but it won't make sense to have everything opaques and still give direct dict access

relates to https://github.com/redis/redis/pull/12822#discussion_r1464132396"
1464554573,12822,guybe7,2024-01-24T09:05:42Z,"it's not only the rehshing list, it also needs to update `bucket_count` whenever a dict is done rehashing"
1464610352,12822,guybe7,2024-01-24T09:30:06Z,do we want to trouble ourselves with constant memory overheads? same goes for that other 200k overhead
1464614560,12822,guybe7,2024-01-24T09:32:49Z,IMHO it's all or nothing - i want to get rid of `kvstoreGetDict` and turn `kvstore` opaque
1464782119,12822,oranagra,2024-01-24T11:33:52Z,"ohh, before that we had different callback for each, and the callback knew which counter to increment.
well, maybe we can do that here too somehow.
(not suggesting to generate code on the heap this time :stuck_out_tongue: )
the easiest way would be to add a callback user_data, and add it to the dictType struct.
this way, each kvstore instance, will have a different cloned dictType struct (actually it already does), and the user_data pointer in that struct will be a pointer to the kvstore instance.
so instead of 8 extra bytes per dict, we have 8 extra bytes per kvstore."
1465723506,12822,madolson,2024-01-25T00:59:50Z,I'm in agreement with @guybe7 personally. We want to make it more of a modular interface to better abstract the code. 
1465885159,12822,oranagra,2024-01-25T06:11:55Z,"i fear it'll not really be opaque or abstracted. some mechanisms could require intimate knowledge of the dict. so we'll just end up wrapping a lot of very low level functions.
anyway, i don't care too much either way. for all i care we can leave it for later, or we can do that and re-consider and break later."
1465892783,12822,oranagra,2024-01-25T06:19:59Z,"i was wondering why it was like that.
i suppose it was an attempt to release a dictEntry value, without assuming anything about which destructor this value uses.
i see it was added in c84248b5d2 in place of `dictFreeVal(db->dict, &auxentry)`
i suppose it's not that bad for db.c to assume it knows how values are destructed, but wanted to raise that for discussion.
@zuiderkwast FYI."
1465898284,12822,oranagra,2024-01-25T06:28:13Z,"this is 1mb, not 200k, i.e. in case sharded pubsub isn't used at all.
and it's another ~2mb on shards that don't have a lot of slots (for keys and expires).
i do think we should make an effort to reduce there. i can imagine some cases with many small shards in which it'll cause a significant impact.
i don't think this PR should bother to make a distinction between slots that are unassigned, and ones that are simply empty. but it is quite easy to avoid regression compared to what's before this PR, and avoid keeping empty pubsub dicts (1mb), and avoid the extra per-dict kvstore pointer in https://github.com/redis/redis/pull/12822#discussion_r1457839748, so let's do that."
1467002679,12822,zuiderkwast,2024-01-25T21:54:20Z,I think I wrote it for some reason of abstraction. Don't remember why. Calling decrRefCound directly is totally fine.
1468258009,12822,madolson,2024-01-27T00:27:31Z,"> some mechanisms could require intimate knowledge of the dict.

This was the core of my original objection to this PR. If someone needs to know what is behind it, then I don't want this abstraction. The idea right now is that structure is index + key -> value, it shouldn't strictly matter what is behind it as long as we are upholding that abstraction."
1470889858,12822,oranagra,2024-01-30T09:49:35Z,"i think this comment is outdated
also, maybe part of it now belongs in kvstoreTryResizeDicts?"
1472557170,12822,guybe7,2024-01-31T09:43:19Z,"use of ""da"""
1472565820,12822,github-advanced-security[bot],2024-01-31T09:49:38Z,"## Use of a broken or risky cryptographic algorithm

This file makes use of a broken or weak cryptographic algorithm (specified by [call to kvstoreDictGetSomeKeys](1)).

[Show more details](https://github.com/redis/redis/security/code-scanning/40)"
1472565822,12822,github-advanced-security[bot],2024-01-31T09:49:38Z,"## Use of a broken or risky cryptographic algorithm

This file makes use of a broken or weak cryptographic algorithm (specified by [call to dictGetSomeKeys](1)).

[Show more details](https://github.com/redis/redis/security/code-scanning/41)"
1473841772,12822,oranagra,2024-02-01T06:16:09Z,"@madolson please comment if you think we should drop this flag.
it means that a cluster node will only allocate a dict when the slot is assigned to it and populated, but on the other hand, when the slot is unassigned, the dict will remain allocated.
till now all 16k dicts were always allocated.
i'm worried that someone will find it odd.

p.s. maybe we can add a kvstore interface to explicitly release a specific empty dict, and call it when a slot is unassigned?"
1478426990,12822,oranagra,2024-02-05T15:21:48Z,@zuiderkwast maybe you wanna look into that?
1479151459,12822,enjoy-binbin,2024-02-06T02:31:08Z,"There seems to be something missing here: `kvs->resize_cursor = (didx + 1) % kvs->num_dicts;`

Otherwise, there is no way to proceed with resize_cursor, i will test it
#13031"
1479325744,12822,oranagra,2024-02-06T07:30:07Z,"we keep falling on that test in daily because it is skipped in the CI cycle.
in retrospect, i should have run daily on such a big PR before merging it."
1479398743,12822,enjoy-binbin,2024-02-06T08:38:43Z,"There seems to be something wrong here. kvstoreDictDelete will release the dict if the dict become empty, and in the next loop, we will call dictNext.

On my local machine, 25-pubsubshard-slot-migration.tcl will fail:
```
=== REDIS BUG REPORT START: Cut & paste starting from here ===
84050:M 06 Feb 2024 16:38:05.284 # Redis 255.255.255 crashed by signal: 11, si_code: 1
84050:M 06 Feb 2024 16:38:05.284 # Accessing address: 0x0
84050:M 06 Feb 2024 16:38:05.284 # Crashed running the instruction at: 0x1078c2c2d

------ STACK TRACE ------
EIP:
0   redis-server                        0x00000001078c2c2d dictNext + 189

Backtrace:
0   libsystem_platform.dylib            0x00007ff8180235ed _sigtramp + 29
1   libsystem_c.dylib                   0x00007ff817ecd7ce _vsnprintf + 256
2   redis-server                        0x00000001079607eb pubsubShardUnsubscribeAllChannelsInSlot + 187
3   redis-server                        0x000000010797d18a clusterDelSlot + 74
4   redis-server                        0x0000000107982d98 clusterCommandSpecial + 6424
5   redis-server                        0x0000000107970cd4 clusterCommand + 4916
6   redis-server                        0x00000001078d40da call + 474
7   redis-server                        0x00000001078d6226 processCommand + 3942
8   redis-server                        0x00000001078f1d26 processInputBuffer + 2646
9   redis-server                        0x00000001078f0bb6 readQueryFromClient + 2070
10  redis-server                        0x0000000107a048af connSocketEventHandler + 191
11  redis-server                        0x00000001078c0073 aeProcessEvents + 771
12  redis-server                        0x00000001078e675d main + 24365
13  dyld                                0x00007ff817c9c41f start + 1903

```

I currently add this to avoid errors:
```
        kvstoreDictDelete(server.pubsubshard_channels, slot, channel);
        if (!kvstoreDictSize(server.pubsubshard_channels, slot))
            break;
```

#13033"
1479527849,12822,oranagra,2024-02-06T10:15:15Z,"the fix looks good. can you make a PR, and also search for other similar issues with pubsubshard_channels? (which is the only one currently deleting dicts that become empty)"
1491811791,12822,madolson,2024-02-16T00:08:29Z,"It's not that annoying. It's a bit weird that for static configurations there won't be the extra overhead, but there will be if you scale out and add move slots to other nodes. I don't think it's likely a big issue, and now that there is an interface we can improve it later."
1492307888,12822,oranagra,2024-02-16T11:04:11Z,"i'm bothered by two things:
1. after resharding there's wasted memory which we can reclaim.
2. the memory usage depends on the history and not just current state.

isn't it really simple to solve? some 10 trivial lines of code?"
1495412092,12822,enjoy-binbin,2024-02-20T08:26:21Z,i see madolson also reacted with a thumbs up emoji. i try to add it in #13072
722914454,9564,madolson,2021-10-06T06:11:41Z,Is there a reason you are putting it first? It seems like the code we way shorter if was just added as an optional field at the end.
722914674,9564,madolson,2021-10-06T06:12:09Z,"This file is autogenerated, so let's not touch this."
757925962,9564,madolson,2021-11-28T17:15:45Z,"During upgrades new nodes won't be able to exchange messages with old nodes, since the layout of data has changed. Take a look at this PR, https://github.com/redis/redis/pull/9530, which adds a way to add extensions (it's not merged but hopefull will be soon). I also don't think we need to gossip the hostname, as nodes will eventually learn the hostname through regular ping/pong messages. "
757926086,9564,madolson,2021-11-28T17:16:33Z,"My guess is this makes more sense as a config, since you'll want to set it at startup. "
757926372,9564,madolson,2021-11-28T17:19:15Z,"I think we should maybe do something like, ""Pining node <whatever> (<human readable name if present>)"", or something to indicate it's the name and not sure the word after. "
757926527,9564,madolson,2021-11-28T17:20:22Z,"You tried to fix this, but there is actually a tab here which is causing the incorrect spacing. "
757926594,9564,madolson,2021-11-28T17:21:26Z,"If a human readable name is not set, this looks like it will break. We still need to be backwards compatible. I don't really have answer to this since the cluster nodes format doesn't allow additional fields since slots is variadic. We could add more optional fields at the end. "
798161459,9564,madolson,2022-02-03T02:10:56Z,"Now I regret not spending the effort to try to make this structure more extensible. I don't feel strongly against how it's currently implemented, but if you want to spend some time trying to make it extensible, I think that would be useful. My thinking was we could add a format like ""aux:<name> <value> "" which can be placed before the slot ranges but after the required arguments."
798161841,9564,madolson,2022-02-03T02:12:03Z,"```suggestion
            clusterMsgPingExtNodename *nodename_ext = (clusterMsgPingExtNodename *) &(ext->ext[0].nodename);
```"
798162059,9564,madolson,2022-02-03T02:12:52Z,Also would need a corresponding redis.conf change.
798162297,9564,madolson,2022-02-03T02:13:41Z,"I wasn't thinking of this as a different endpoint type, just a way to identify a node in a cluster logically. The use case I had in mind was being able to assign an EC2 ID to a node to be able to look it up separately."
798162529,9564,madolson,2022-02-03T02:14:21Z,"Someone else made the fair comment that hostname should have been an sds, since we frequently call strlen. Probably should update this to sds."
798162740,9564,madolson,2022-02-03T02:14:56Z,"If we're going to do this, we should probably just call sdscatfmt multiple times, incrementally adding on the data. "
798163131,9564,madolson,2022-02-03T02:16:01Z,This is the main use case I was thinking about for node name. You can print it out here so that the logs have information that is useful to humans. 
798163570,9564,madolson,2022-02-03T02:17:29Z,Looks like all of this is removed now.
815973657,9564,hwware,2022-02-28T15:08:21Z,I add a new item in redis.conf for cluster-announce-nodename
815975195,9564,hwware,2022-02-28T15:09:55Z,"update it to sds as the ""hostname"""
815997051,9564,hwware,2022-02-28T15:32:51Z,"Yeah what you're saying makes sense. So we don't need the CLUSTER_ENDPOINT_TYPE_NODENAME then?
I have removed the relevant code to this. Let me know if you think that is fine. Thanks"
847781581,9564,madolson,2022-04-11T22:17:08Z,Were you going to add the name here?
847787316,9564,madolson,2022-04-11T22:21:42Z,"```suggestion
    int totlen = sizeof(clusterMsgPingExt) + EIGHT_BYTE_ALIGN(sdslen(myself->nodename) + 1);
```"
847791338,9564,madolson,2022-04-11T22:28:46Z,"```suggestion
                serverLog(LL_DEBUG,""PONG contains mismatching sender ID. About node %.40s (%s) added %d ms ago, having flags %d"",
```
Maybe something like this so it's clear that there is an empty name there? Otherwise it'll look like there is an awkward 2 spaces there. Not a strong opinion here."
850454805,9564,hwware,2022-04-14T13:38:40Z,"Yes I agree that would be a better formatting, I have changed to this now. Thanks you"
902281851,9564,PingXie,2022-06-21T07:59:11Z,@hwware I have a similar extension in review (#10536) and then @zuiderkwast has another (#10869) in the pipeline. I think comma separated strings are general enough and can continue to work in the foreseeable future (until we settle on a new format). Can you please review [my implementation](https://github.com/redis/redis/pull/10536/files#diff-55c2de0fa49d05f6ed8f0c13cacedc85fba5d5739c8360567743f9f740df3179R255)? Please expand cluster.c and check out line 255 in the new version). I have also refactored the extension building logic so that it is relatively easier to add new extensions.  
902561575,9564,zuiderkwast,2022-06-21T12:33:57Z,"AFAICT my PR ""gossip forgotten nodes"" doesn't touch this address information. It uses the node name only.

Regarding the format, I suggested an URI query string form for optional key-value pairs: `ip:port@cport?hostname=example.com&nodename=asdfasdfasdf&shardid=1234652347653`"
902695057,9564,hwware,2022-06-21T14:28:45Z,"> @hwware I have a similar extension in review (#10536) and then @zuiderkwast has another (#10869) in the pipeline. I think comma separated strings are general enough and can continue to work in the foreseeable future (until we settle on a new format). Can you please review [my implementation](https://github.com/redis/redis/pull/10536/files#diff-55c2de0fa49d05f6ed8f0c13cacedc85fba5d5739c8360567743f9f740df3179R255)? Please expand cluster.c and check out line 255 in the new version). I have also refactored the extension building logic so that it is relatively easier to add new extensions.

Sure, Thanks I will review it. "
903327896,9564,PingXie,2022-06-22T06:25:59Z,">Regarding the format, I suggested an URI query string form for optional key-value pairs: ip:port@cport?hostname=example.com&nodename=asdfasdfasdf&shardid=1234652347653

@zuiderkwast that is a clever hack! It is just that the hostname extension is already out now. We would have to think about whether/how to upgrade the clusters that enable hostname. Also the string here is part of the `CLUSTER NODE` output - would a URI query string format cause more confusion to the existing clients than a comma-separated-string? "
903329843,9564,zuiderkwast,2022-06-22T06:28:50Z,"Since hostname is already there, we can just start with optional stuff after hostname: `ip:port@cport,example.com?nodename=asdfasdfasdf&shardid=1234652347653`.

> would a URI query string format cause more confusion to the existing clients than a comma-separated-string?

I don't think so. Why would it?"
905611565,9564,PingXie,2022-06-24T00:26:01Z,">I don't think so.

It is just a hunch - the hostname introduced the `,` separator and it feels safer (don't know how to quantify that) if we continue with that pattern. URI queries seem like a new game for all kinds of parser out there. 

So there seem to be 3 proposals
1. the URI query string (but keep the hostname as is)
2. the continuation of `,`
3. the `-`

Vote? @madolson can you please chime in when you get a chance too?

For me, it will be 2, 1 and 3 from high to low, preference-wise
"
908019512,9564,madolson,2022-06-28T04:32:32Z,"We have the benefit that we restrict what is allowed in a hostname, alphanumberic dashes and dots, so we should be able to use ? as a delimiter. 

I would prefer not to use the URI just because of parsing. I will still re-advocate my proposal, which is that we can add fields at the end as long as they don't start with numbers. Some format like `field:value` as long as they don't have spaces. Besides that, I would agree with @PingXie's ranking."
908019607,9564,madolson,2022-06-28T04:32:45Z,Yeah.
908020355,9564,madolson,2022-06-28T04:34:39Z,"So, sort of a last thing? Thoughts about calling this either:
1. cluster-announce-human-node-name
2. cluster-announce-human-node-id

Nodename might be a bit confusing, since it's overloading the more normal ""nodename"" associated in FQDNs and the nodeid. Injecting in human or human readable seem like it would be good."
908320034,9564,zuiderkwast,2022-06-28T10:33:38Z,"... so 3 (dash) is out because hostnames can contain dashes.

@madolson It sounds like you're suggesting `?field1:value1?field2:value2`. It is very similar to `?field1=value1&field2=value2`. I suppose the complexity of the URI parsing you're referring to is the percent encoding. How about we just skip that? We don't have any characters that would need to be percent-encoded anyway (yet) and we can avoid adding fields with such values. Parsing is simple, but in languages with a URI query parser in the standard library, they can use that too."
908826413,9564,PingXie,2022-06-28T18:45:43Z,"right old 3) (`-`) is out. so the new list

1) aux (like this?)

`823ca5eb86404530a2cd1f6beee7ed9c00e786fb 127.0.0.1:30001@40001,host-name master aux1:val1 aux2:val2 aux3:val3 ... - 0 1656441238093 1 connected 0-5460`

2) URI query strings

`823ca5eb86404530a2cd1f6beee7ed9c00e786fb 127.0.0.1:30001@40001,host-name?field1=val1&field2=val2&field3=val3... master - 0 1656441238093 1 connected 0-5460`

3) the "","" separator

`823ca5eb86404530a2cd1f6beee7ed9c00e786fb 127.0.0.1:30001@40001,host-name,val1,val2,val3,... master - 0 1656441238093 1 connected 0-5460`
"
913071869,9564,madolson,2022-07-04T14:45:41Z,"@zuiderkwast The example that pingXie outlined in 1 is what I'm suggesting.  I was actually suggesting putting it after the slot ranges, but it can go any place."
943694666,9564,madolson,2022-08-11T16:41:55Z,I suppose people were maybe looking to me to make a decision here. I'm ultimately indifferent between option 1 and 3 outlined here. @hwware do you have any preference.
944532773,9564,hwware,2022-08-12T14:38:10Z,"I prefer the option1, becuase the option3 is a little bit wired (or we call it is not traditional) for admin side. Thanks"
952128072,9564,madolson,2022-08-23T04:00:53Z,"Ok, @hwware will you have a chance to implement that here, otherwise @PingXie can implement it on his PR."
952320923,9564,zuiderkwast,2022-08-23T08:37:13Z,"If a client splits each line by spaces and assume that each element (column) has a fixed position, these clients will break when we introduces more elements separated by spaces.

That was my concern, but I haven't found any such client (though I haven't searched thoroughly either). For cluster routing, most clients seem to use CLUSTER SLOTS nowdays and they should probably switch to CLUSTER SHARDS in the future."
952332309,9564,zuiderkwast,2022-08-23T08:47:36Z,I found one client that assumes the slot ranges start at column 8: https://github.com/Nordix/hiredis-cluster/blob/master/hircluster.c#L1052
953230753,9564,madolson,2022-08-24T01:13:26Z,"You aren't supposed to be using `CLUSTER NODES` for topology discovery. I know some clients do use it though, we should probably be encouraging them to move to `CLUSTER SHARDS`."
953388035,9564,PingXie,2022-08-24T06:14:27Z,"@madolson agreed that we should move folks off of `CLUSTER NODES`. I think as part of this exercise, we can codify it at https://redis.io/commands/cluster-nodes/ when the dust settles.

What do you guys think about a hybrid of option 1 and 3?

`
823ca5eb86404530a2cd1f6beee7ed9c00e786fb 127.0.0.1:30001@40001,host-name,aux1=val1,aux2=val2,aux3=val3,... master - 0 1656441238093 1 connected 0-5460
`

Both aux names and values can be of alphnum only. The order of these new aux fields is insignificant. Not the most intuitive format but seems to have the lowest appcompat risk while being more explicit and easier to work with than the original option 3 (comma-separated).   

Thoughts?"
953436394,9564,zuiderkwast,2022-08-24T07:17:16Z,"> You aren't supposed to be using `CLUSTER NODES` for topology discovery. I know some clients do use it though, we should probably be encouraging them to move to `CLUSTER SHARDS`.

Agree, but old clients which do this will stop working with new Redis. Also, clients are very often designed to work with multiple versions of Redis, so they need to use CLUSTER SLOTS or CLUSTER NODES at least as a fallback. As you know, CLUSTER NODES is more efficient than CLUSTER SLOTS for fragmented slot intervals.

Splitting by space and assuming things about the positions might also be exploited by other tools and scripts. I  think we can avoid this breaking change if we can. I like Ping's last suggestion."
956177431,9564,madolson,2022-08-26T15:44:39Z,"@PingXie I like your suggestion, let's do that. Any parsing that's already broken by the hostname stuff will just be further broken, so that seems like a good trade-off for readability."
956502204,9564,PingXie,2022-08-26T23:52:08Z,Sounds good! Should I add it to my PR next?
957880930,9564,madolson,2022-08-29T23:48:50Z,"@PingXie Sure, we can merge that one first, and then rebase and merge this one."
959771438,9564,hwware,2022-08-31T16:07:53Z,"Sorry, just notice this comment. I will update this part and rebase this PR"
959907879,9564,hwware,2022-08-31T18:44:21Z,"@PingXie could you please add this on the top desceiption of your PR? 
823ca5eb86404530a2cd1f6beee7ed9c00e786fb 127.0.0.1:30001@40001,host-name,aux1=val1,aux2=val2,aux3=val3,... master - 0 1656441238093 1 connected 0-5460
Then we could know much clearer for the final format for cluster infomation,"
959908269,9564,hwware,2022-08-31T18:44:51Z,"> @PingXie Sure, we can merge that one first, and then rebase and merge this one.

Please let me know when you finish your part, thanks"
960243499,9564,PingXie,2022-09-01T05:53:00Z,Will do. I have been swapped by some other issues on my end recently but hopefully I can get to it next week.
1133118822,9564,madolson,2023-03-11T16:45:59Z,"```suggestion
         * ip:port[@cport][,hostname][,aux=val]*] */
```
Is there a reason that nodename can't be an aux field? The idea was that aux fields would be generic and we could add more later, it should remove some of this parsing code ideally."
1133119347,9564,madolson,2023-03-11T16:50:56Z,"```suggestion
    char *cluster_announce_hostname;  /* hostname to announce on cluster bus. */
```

Hostnames don't need to be IP addresses, they can be FQDN as well."
1133119403,9564,madolson,2023-03-11T16:51:36Z,Should this almost implement the nodename as well?
1133120132,9564,madolson,2023-03-11T16:57:31Z,"I don't think we have such a strong requirement for naming here, so i think we can use isValidAuxString() in cluster.c for this."
1133120238,9564,madolson,2023-03-11T16:59:00Z,"We had a previously conversation about this, but I still don't think we should have this be an endpoint type. The main use case for me is for administrators to assign useful names to nodes for debugging. A client would need a lot of custom logic to support this, so unless you feel strongly I would drop all of this."
1133120306,9564,madolson,2023-03-11T16:59:50Z,"This seems like it's left over from the PR that moved a bunch of changes to notices, I think this should still be a notice."
1133121504,9564,madolson,2023-03-11T17:09:33Z,The other use case for the human node name is that in these messages you could print out the human readable node name. I thought in a previous iteration of this PR we had done that.
1140556271,9564,hwware,2023-03-17T18:07:50Z,Addressed
1140556447,9564,hwware,2023-03-17T18:07:59Z,Addressed
1140557658,9564,hwware,2023-03-17T18:09:06Z,Addressed
1140557800,9564,hwware,2023-03-17T18:09:14Z,Addressed
1140558673,9564,hwware,2023-03-17T18:10:01Z,"We are not using this procedure to read nodename or hostname, here I made this change to make sure we read the shard-id correctly from CLUSTER NODES command output because in aux field now we have nodename and shard-id and nodename is optional parameter."
1159995489,9564,madolson,2023-04-06T16:03:41Z,"This spacing is trippy
```suggestion
    } else {
        return C_ERR;
    }
    return C_OK;
```"
1159998081,9564,madolson,2023-04-06T16:06:32Z,"```suggestion
    if (n && !strncmp(value, n->human_nodename, length)) {
```
We know these are null terminated strings, but people like to report that we aren't using ""safe"" functions."
1160000889,9564,madolson,2023-04-06T16:09:19Z,"```suggestion
        n->human_nodename = sdscpylen(n->human_nodename, value, length);
```"
1160001395,9564,madolson,2023-04-06T16:09:49Z,"```suggestion
         * ip:port[@cport][,hostname][,aux=val]*] */
```"
1160001968,9564,madolson,2023-04-06T16:10:23Z,"```suggestion

```"
1160010892,9564,madolson,2023-04-06T16:18:13Z,"Let's update the function in cluster.c to accept char * + length so this can become:
```suggestion
static int isValidAuxString(char *val,const char **err) 
    if (isValidAuxString(val, strlen(val)) {
        *err = ""Human announced Nodename may only contain alphanumeric characters, ""
                ""hyphens, dots or underscore"";
        return 0;
    }
    return 1;
}
```"
1160013722,9564,madolson,2023-04-06T16:21:22Z,"This spacing was done in other tests to just keep git history. I probably should have documented that, but we can do normal spacing here."
1160015050,9564,madolson,2023-04-06T16:22:44Z,"```suggestion
start_cluster 3 0 {tags {external:skip cluster} overrides {cluster-replica-no-failover yes}} {
```
The test this was copied from probably doesn't need replicas either"
1160032084,9564,madolson,2023-04-06T16:41:12Z,Do we still need this test?
1160039900,9564,madolson,2023-04-06T16:49:49Z,Let's move these into cluster_util.tcl so we can deduplicate them with the other test.
1160047691,9564,madolson,2023-04-06T16:58:49Z,"```suggestion
             sdsnewlen(node->name,CLUSTER_NAMELEN), node);
```"
1160049756,9564,madolson,2023-04-06T17:01:00Z,I'm going to stick behind we probably don't want this in the SHARDS output. There was another discussion where we should probably have an admin variant of shards: https://github.com/redis/redis/issues/11354. I think this would be appropriate there.
1163242486,9564,hwware,2023-04-11T19:34:04Z,"Sure  , I have removed the nodename from shards output."
1163244021,9564,hwware,2023-04-11T19:35:51Z,"sure, Removed the unnecessary spacings. "
1163245064,9564,hwware,2023-04-11T19:37:10Z,I have replaced strcmp with strncmp as suggested.
1163245363,9564,hwware,2023-04-11T19:37:32Z,I have replaced sdscpy with sdscpylen as suggested.
1163246809,9564,hwware,2023-04-11T19:39:05Z,Yes we don't need replicas for this test . I have updated the test.
1163247815,9564,hwware,2023-04-11T19:40:09Z,"No , we don't need this test. I might have missed to remove the test case while removing the nodename from SHARD output. I have removed it now."
1163248981,9564,hwware,2023-04-11T19:41:16Z,"I have moved the procedures to cluster_util.tcl, and removed it from both hostname and humand_announced_nodename test files."
1163249999,9564,hwware,2023-04-11T19:42:26Z,"I have updated isValidAuxString function in cluster.c, so that it can be used in config.c"
1163336284,9564,hwware,2023-04-11T21:08:45Z,corrected the code indendation
1167251194,9564,madolson,2023-04-14T20:29:50Z,"```suggestion
                    /* Invalid aux field format */
```"
1167251352,9564,madolson,2023-04-14T20:30:05Z,"```suggestion
            sdsnewlen(node->name,CLUSTER_NAMELEN), node);
```"
1167251531,9564,madolson,2023-04-14T20:30:21Z,"```suggestion
    {
```"
1167251784,9564,madolson,2023-04-14T20:30:44Z,"```suggestion
                            ""Node %.40s (%s) reported node %.40s (%s) as not reachable."",
```"
1167252319,9564,madolson,2023-04-14T20:31:25Z,"```suggestion
    if (!(isValidAuxString(val,sdslen(val)))) {
```"
1167252425,9564,madolson,2023-04-14T20:31:36Z,"```suggestion
        *err = ""Human announced nodename may only contain alphanumeric characters, ""
```"
1167252534,9564,madolson,2023-04-14T20:31:46Z,"```suggestion
            ""hyphens, dots or underscores"";
```"
1167252883,9564,madolson,2023-04-14T20:32:19Z,"```suggestion
```
Now that the test is gone, this is no longer necessary."
1167254426,9564,madolson,2023-04-14T20:34:48Z,"```suggestion
    af_shard_id = af_start,
    af_human_nodename,
    af_count,
```
I think the intention is we would add these incrementally. I don't think this actually matters, but for future aux fields I assume we'll want this PR to set a good precedent for how to add more."
1167254586,9564,madolson,2023-04-14T20:35:05Z,"```suggestion
    {""shard-id"", auxShardIdSetter, auxShardIdGetter, auxShardIdPresent},
    {""nodename"", auxHumanNodenameSetter, auxHumanNodenameGetter, auxHumanNodenamePresent},
```"
1167274022,9564,hwware,2023-04-14T21:05:37Z,"Hello @madolson I believe we don't need the af_start as well. as we are only using it for, for loop initialization and no where else. If It is okay, I would like to remove it.  "
1167281898,9564,madolson,2023-04-14T21:19:47Z,Sounds OK to me.
1167309763,9564,hwware,2023-04-14T22:19:25Z,"Great, I have updated all the changes related to enum !"
1167755949,9564,oranagra,2023-04-16T07:49:21Z,"so that's a ""soft"" (backwards compatible) protocol change?"
1167764410,9564,oranagra,2023-04-16T07:58:59Z,"so we have two configs, one for ""hostname"" (explicitly handled above)
and one for ""human nodename"" (handled implicitly in this aux fields loop).
the user can config either or both and they'll both be displayed if set?
i.e. it's not that one can replace the other."
1168655213,9564,hwware,2023-04-17T12:59:45Z,"Hello @oranagra , hostname is not the aux field and it is handled separately , and yes, both will be displayed based on the configuration, they cannot replace each other. 
Below are the three cases and how they are being displayed.
1. both hostname and nodename is not configured
2. Nodename is configured ,but hostname is not
3. Hostname is configured , but nodename is not.

![image](https://user-images.githubusercontent.com/51993843/232491217-1ddaf043-a66e-4e3a-a8db-367dfe2add75.png)
"
1170204392,9564,hwware,2023-04-18T15:23:15Z,"yes, it is not only backwards compatible, and it provides more scalability so that CLUSTER NODES could display more items in the future. The previous code is hard code."
1230388030,9564,madolson,2023-06-15T03:45:07Z,"```suggestion
    test ""Set cluster human announced nodename and verify they are excluded from cluster node"" {
        for {set j 0} {$j < [llength $::servers]} {incr j} {
            R $j config set cluster-announce-human-nodename ""nodename-$j.com""
        }
        wait_for_condition 50 100 {
            [are_nodenames_propagated ""nodename-*.com""] eq 0
        } else {
            fail ""cluster human announced nodename were propagated""
        }

        # Now that everything is propagated, assert everyone agrees
        wait_for_cluster_propagation
    }

    test ""Update human announced nodename and make sure they are excluded from cluster node"" {
        for {set j 0} {$j < [llength $::servers]} {incr j} {
            R $j config set cluster-announce-human-nodename ""nodename-updated-$j.com""
        }
        wait_for_condition 50 100 {
            [are_nodenames_propagated ""nodename-updated-*.com""] eq 0
        } else {
            fail ""cluster human announced nodename were propagated""
        }

        # Now that everything is propagated, assert everyone agrees
        wait_for_cluster_propagation
    }
```"
1230388645,9564,madolson,2023-06-15T03:46:27Z,"```suggestion
# Exclude aux fields from ""cluster nodes"" We may decide to re-introduce them in some form or another in the 
# future, but not in v7.2
```"
1230388961,9564,madolson,2023-06-15T03:46:51Z,"```suggestion
                return 0
```"
1230390421,9564,madolson,2023-06-15T03:49:57Z,"```suggestion
int isValidAuxString(char* s, unsigned int length) {
```"
880478330,10515,oranagra,2022-05-24T13:05:01Z,"temp change?
i suppose this prevents `help zadd` from showing the command syntax (i.e. needed for the help part that's not suggestions)."
880583642,10515,oranagra,2022-05-24T14:26:34Z,"`ignorematches` the ""ignore"" part confuses me.
maybe `unfiltered`? or `emit_all`?"
880681244,10515,oranagra,2022-05-24T15:46:14Z,"for ""any order"", don't we want one that does `ZRANGE k 1 2 REV` and see that it suggest `[BYSCORE|BYLEX]`?"
884298704,10515,jhelbaum,2022-05-29T16:56:26Z,"Yes, the flag name is confusing, but so is its semantics (IMO). I'm not satisfied with this function in general. It's overcomplicated and confusing, and I'm hoping to find a way to improve it. "
884299061,10515,jhelbaum,2022-05-29T17:00:34Z,"Yes. I'll add some test cases here.
"
884299369,10515,jhelbaum,2022-05-29T17:03:29Z,"Yes, this was not meant to be committed. I didn't mean to break `HELP`. Will fix."
895125881,10515,oranagra,2022-06-12T07:38:45Z,"what's the problem here?
this is the test that proves `ANY` isn't hinted anymore, and it seems to work on your last version"
895171873,10515,jhelbaum,2022-06-12T13:05:08Z,"Simple - the problem is that I forgot to uncomment the test case... Yes, it works."
901077121,10515,jhelbaum,2022-06-19T09:39:57Z,"> the one thing i noticed and not sure about is that when redis-cli works with an old server, we still have the old matching logic.
> i suppose that in order to improve that, we'll have to bundle something other than the plain old help.h.
> not sure we wanna proceed in that direction

The way I see it, there are a few options:

1. With an old server, fall back to the old matching logic (this is what the code currently does)
2. With an old server, disable arg matching entirely; just give an initial hint with the entire help string and then stop hinting.
3. With an old server. use some heuristics to translate the static syntax strings into a guessed arg spec structure, and use that to support the new matching logic. This might not be too bad, though it wouldn't be that great either.
4. Somehow use the command spec tables in `commands.c` as a fallback source for CLI hinting. Currently that's not practical since `commands.c` includes the `server.h` header file, and we don't want the CLI to do that. But maybe we could solve that somehow. We could even use the `since` fields to avoid hinting unsupported commands/args. This wouldn't give hinting for module commands, though.

Thoughts?

@oranagra "
901082067,10515,oranagra,2022-06-19T10:21:43Z,"a variant of 4 would be to embed a cached copy of commands.json inside the cli (instead of the help.h we have now).
then when COMMAND DOCS fails, we issue an INFO SERVER instead and use the `since` fields in our cached json to do filtering.
maybe in some way it would be easier to store the RESP response of COMMAND DOCS in some way, instead of parsing a json.

anyway, it looks like a big investment, so we have to consider the pros and cons, since arguably we can maybe drop the hinting entirely (2).

what i don't like about the current approach (1) is that it looks like a bug, and also that there's probably quite a lot of code to back it up (including help.h).

so arguably, if we invest some effort in either parsing a json, or compiling commands.c into the cli, we'll still be deleting a lot more code that we're adding (since the majority of the code is shared with the case COMMAND DOCS does exits)."
901113896,10515,jhelbaum,2022-06-19T14:19:08Z,"The CLI currently has code to parse the RESP response into an internal structure. It would be annoying to have to add parallel code to do the same for JSON. If we could store the RESP, all that would be missing would be the version filtering. (Plus, of course, we still wouldn't have filtering for module commands.)"
901144830,10515,oranagra,2022-06-19T18:55:07Z,"It parses RESP by using hiredis, it's not the same as handing it a blob of bytes. "
901149193,10515,jhelbaum,2022-06-19T19:40:38Z,"What I meant is that there is code to read the redis reply structure into the command args table. A similar chunk of code would be needed to consume JSON instead (actually, in addition).

But yeah, we'd also need the RESP parser.
"
901150748,10515,jhelbaum,2022-06-19T19:56:41Z,"Looking some more at commands.c, I'm not that happy about compiling it into the cli. The command table currently combines the command arg specs and docs with pointers to the actual implementation functions for the commands. It's both a syntax table and a dispatch table, and probably some other things too. Integrating it into the cli code exposes the client to stuff that rightfully should stay server-side.

If we want to go that route (of precompiling the arg specs table) I think the ""right"" way to do it is to autogenerate a separate command table for the CLI. Basically, a replacement for help.h that would fill in the whole `commandDocs` table, including all the arg specs. It would not be necessary to parse anything at runtime, or to have access to the JSON or RESP specs. But it's a lot of data to keep around just for backwards-compatibility - commands.c is 7,400 lines long, and it would presumably be similar. help.h is just 1,850.
"
901150908,10515,jhelbaum,2022-06-19T19:57:48Z,"(The *.json files are 18,000 lines!)
"
904714578,10515,jhelbaum,2022-06-23T08:14:01Z,"Okay, I've spent some more time on the issue of legacy servers.

A workable solution involves the following:
1. Generating a new `cli-commands.c` file containing C structs with only the client-side part of the argument specs. This comes to about 4500 lines of generated code, plus 250 lines of Python to generate it.
2. Adding code to populate the help tables from that data if `COMMAND DOCS` is not available, filtering by `since`. That adds about 50 lines of code to redis-cli.c, I think.

This would give us full hinting support for legacy servers, except for module commands. Is it worth it? Should I finish the implementation?

@oranagra "
905197464,10515,oranagra,2022-06-23T15:50:58Z,"if only we could rely on having python available at compile time, then we wouldn't have to maintain these 4500 lines in the repo.
maybe we can change the existing python script to add some preprocessor macros to commands.c so that when included from redis-cli.c it'll not include the parts we don't want?

this would mean that the current commands.c will be slightly bigger, but we won't have another 4500+250 extra lines sitting in the repo."
905249722,10515,jhelbaum,2022-06-23T16:43:48Z,"Bear in mind that this would replace `help.h` (1860 lines) and `generate-command-help.rb` (150 lines), so at least there's that.

I don't think macros would solve this cleanly, since there are a lot of struct fields in commands.c we don't need/want, in particular the function pointers. Maybe if we `#define` the function names to NULL... it starts to get very ugly.

"
905296116,10515,oranagra,2022-06-23T17:36:34Z,"that seems easy to resolve.
instead of generating lines like this:
```c
{""bitcount"",""Count set bits in a string"",""O(N)"",""2.6.0"",CMD_DOC_NONE,NULL,NULL,COMMAND_GROUP_BITMAP,BITCOUNT_History,BITCOUNT_tips,bitcountCommand,-2,CMD_READONLY,ACL_CATEGORY_BITMAP,{{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}},.args=BITCOUNT_Args},
```

it can wrap the reference to the command proc with `CMD_PROC()` macro.
```c
{""bitcount"",""Count set bits in a string"",""O(N)"",""2.6.0"",CMD_DOC_NONE,NULL,NULL,COMMAND_GROUP_BITMAP,BITCOUNT_History,BITCOUNT_tips,CMD_PROC(bitcountCommand),-2,CMD_READONLY,ACL_CATEGORY_BITMAP,{{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}},.args=BITCOUNT_Args},
```

then, it can do this on the top:
```c
#ifndef CMD_PROC
#define CMD_PROC(proc) proc
#endif
```
all that's left is for redis-cli.c to declare `#define CMD_PROC(proc) NULL` before including commands.c."
905300098,10515,jhelbaum,2022-06-23T17:41:33Z,"Hmm... that could work... I'll take another look. (Though again, there's a lot more ""stuff"" on that line not relevant to the cli. Preprocessing it all away won't be pretty. I'm not sure it's better than maintaining two parallel generated files that each contain only what they're supposed to have.)"
905316687,10515,oranagra,2022-06-23T18:01:54Z,"similar thing can be done with other pieces of information that we don't want. like extracting the key-specs to an external object, like we do for args."
906848860,10515,jhelbaum,2022-06-26T17:22:58Z,"Okay, I tried extracting key-specs to external tables, and everything compiles and the tests pass... and hinting works for legacy servers.

**Except** it seems to have broken the module API. (See latest tests.) I don't know the module code well enough to understand how I broke it. All I did was change `key_specs_static` from an embedded array in the command struct to a pointer to an external array."
906880094,10515,jhelbaum,2022-06-26T22:38:13Z,Never mind - I fixed it. Expecting all tests to pass now.
907055199,10515,oranagra,2022-06-27T07:22:42Z,"@guybe7 PTAL.
IIRC this static thing was an optimization to achieve two things:
1. be able to initialize the command table in a declarative way.
2. avoid heap allocations and reallocs, specifically in module.c

i suppose there was never any intention to have it a single block of memory (we don't avoid the deference since we don't use it at runtime), and we don't really care about cache efficiency.

maybe it is no longer needed, and we can just create it at the right size?"
907059941,10515,oranagra,2022-06-27T07:28:15Z,"i don't understand, we generate another commands.c file (cli_commands.c)?
i don't see it added to the repo, and it looks like redis-cli.c does include the normal commands.c
is this a leftover?"
907060965,10515,oranagra,2022-06-27T07:29:28Z,"i don't like to repeat all of these, let's extract them from server.c into commands.h
same for the args struct and docs. any reason we can't share the same ones?
regarding the macros, since they affect commands.c, i think it's nicer to declare them right before including commands.c, this can either be done directly from redis-cli.c (if there's not much content left in this header), or we can move the include of commands.c here."
907072759,10515,oranagra,2022-06-27T07:43:04Z,"where were these till now?
@guybe7 please review the changes in this file."
907073666,10515,oranagra,2022-06-27T07:44:09Z,"i think we can use the same struct, and just omit some fields as NULLs to avoid link errors."
907075299,10515,oranagra,2022-06-27T07:46:04Z,leftover? let's delete
907078239,10515,oranagra,2022-06-27T07:49:21Z,where was this till now? i must be missing something.
907079939,10515,oranagra,2022-06-27T07:51:20Z,"what's new with that `len`? was that suppose to be a runtime calculate field (to support the declarative approach)?
i.e. since we went with a generated approach and not a declarative one (commands.c shouldn't be readable or editable), maybe we can change our original intention.
@guybe7 ?"
907081221,10515,oranagra,2022-06-27T07:52:44Z,"maybe we should have a more purpose specific define?
e.g. COMMAND_HEADER_TO_INCLUDE, and if missing we'll include server.h?"
907116145,10515,oranagra,2022-06-27T08:29:40Z,"let's note that in the PR top comment.
i.e. that now redis-cli sends an INFO SERVER at startup (in addition to COMMAND, COMMAND DOCS, and possibly HELLO / AUTH, right?)"
907118621,10515,oranagra,2022-06-27T08:32:05Z,"does this assumes the `redis_version` is the first field?
i don't think that's good. i rather search the lines until the expected field is found.
p.s. maybe we can skip this in case we used HELLO (extract the version from there).
i.e. in the most common case, we save one round trip."
907157456,10515,jhelbaum,2022-06-27T09:10:22Z,Leftover - deleted it.
907165617,10515,jhelbaum,2022-06-27T09:18:34Z,"This enum could be extracted to a header file without a problem.

The args struct we could find a way to share, but there are fields used by client and not the server (the arg matching fields), and vice versa (key spec, deprecated, summary). 

The redis command struct cannot realistically be shared by both. The `redisCommand` struct is massive, and it pulls in many other data types, including the command function pointer, histogram, key specs, get key function pointer, the module command data, etc. Separating it from server.h is possible but very difficult and not likely to be clean."
907166396,10515,jhelbaum,2022-06-27T09:19:19Z,I don't have a strong opinion regarding where to define the macros.
907169702,10515,jhelbaum,2022-06-27T09:22:48Z,"The existing command arg structure stores a single binary flag field with the multiple flags OR'd together. I think it's cleaner to have separate boolean fields, which is what I did for the client code. So the script now writes out both the OR'd flags and the individual flags, and each macro selects which one to use. But I suppose it's better to standardize on one or the other approach.

The number of subargs is not currently used in the struct; it's a null-terminated list and the length is counted at runtime. I don't see why the length can't be available at compile time, so I added it. "
907170074,10515,jhelbaum,2022-06-27T09:23:10Z,Yes. Sorry.
907174084,10515,jhelbaum,2022-06-27T09:26:58Z,"There is the group name (""generic"") and a group enum value (COMMAND_GROUP_GENERIC). The existing command struct stores the enum value; the CLI code stores the string, so I added the string output here. Probably better to standardize the code on the same approach. Will fix.
"
907174939,10515,jhelbaum,2022-06-27T09:27:49Z,"Yes, commands.c contains null-terminated arrays and the length is computed at runtime. But we know the length at compile time and it seems simpler to output it."
907175372,10515,jhelbaum,2022-06-27T09:28:13Z,Maybe. I don't have a strong preference.
907175789,10515,jhelbaum,2022-06-27T09:28:39Z,It will only send INFO SERVER if COMMAND DOCS is not supported.
907176199,10515,jhelbaum,2022-06-27T09:29:05Z,"No, it will find the first appearance of `redis_version` regardless of which line it's on."
907178439,10515,jhelbaum,2022-06-27T09:31:21Z,HELLO does look like a more efficient way to get the version number. What do you recommend?
907297442,10515,oranagra,2022-06-27T11:51:05Z,"i must be missing something, but i don't understand how there are fields that are used by the cli and not by the server. after all, till now, anyone who used any info from the json files did it by taking it from COMMAND command (possibly converted into json).

i imagine that it could be that one day we'll have other tools in our repo that want to include this commands.c file, and they might need other bits of info.

it easy to filter out the proc and getkeys proc from the data (replacing it with NULL).
regarding the other excessive fields on redisCommand struct, which we don't want to pull into the header file, i suppose we should take this opportunity to split this struct into two parts, anything below the `Runtime populated data` comment should move into another struct, and then one struct should point to the other.
i.e. either the runtime struct will have a pointer to the static struct, or the static struct will have a `void*` member that's set to a heap allocated runtime struct (i prefer the first approach, will make a cleaner code).
another advantage of that would be smaller executable size, since we don't reserve the histogram and other fields in the data segment."
907298935,10515,oranagra,2022-06-27T11:52:52Z,"i didn't look into the code, but i think redundancy is bad, and i think that bit flags is better than extra boolean fields."
907301491,10515,oranagra,2022-06-27T11:55:51Z,"i prefer it..  as i said in another comment, i can see that other tools in our repo might wanna use this too...
i think we could include commands.h, and additionally include server.h (by default), or another file if specified by the caller (we can have redis-cli instruct it to include commands.h again)"
907302554,10515,oranagra,2022-06-27T11:57:11Z,"ok, let's not it in the top comment, it's an important detail IMHO.
also, in case we used HELLO as an auth, we can take the version from there and skip the call to INFO."
907304746,10515,oranagra,2022-06-27T11:59:46Z,"ohh, i missed it.
HELLO is only supported starting redis 6.0, and redis-cli only uses it `--user` or `-3` was used.
i don't think we can rely on it, but we can use it as an optimization."
907361743,10515,jhelbaum,2022-06-27T13:00:00Z,"The argument matching code in the CLI adds runtime fields to the arg struct to mark which parts have been matched. Those fields are not needed by the server. I could use a different mechanism to associate those fields with the args, such as a dict for example."
907362942,10515,jhelbaum,2022-06-27T13:01:15Z,Or we could leave a void* field for use as a runtime scratchpad by users of the arg struct.
907391932,10515,jhelbaum,2022-06-27T13:29:32Z,"Turns out this is harder than I expected. The problem is `const char *COMMAND_GROUP_STR[]`, a constant array defined in server.c. To make the cli command struct consistent, the CLI would also need access to that array to retrieve the group name from the enum code. But it's currently only used in server.c and it's linked internally there. C doesn't let you forward declare a constant array, since the size is unknown. 

In short, it's much simpler to populate the group name as a string in the generated code than to propagate the enum to both. I guess the array of strings could be defined in commands.c and access to it wrapped in a function..."
907394550,10515,jhelbaum,2022-06-27T13:32:05Z,"I still think splitting the redisCommand struct - as much as I agree that it needs to happen - is a much bigger job than you realize. It drags with it several other nontrivial structs and typedefs, some of which are themselves also used elsewhere. And all the code that accesses those fields will need to be modified, along with the code that populates them.

This will end up being a significant refactoring to tack on to this PR."
907432041,10515,oranagra,2022-06-27T14:07:19Z,"i agree it's gonna add some additional dereferecing and touch many lines. but i have a feeling it's the right thing to do (separate the static part from the runtime part, reduce binary size, allow flexibility for other tools to use it).

maybe a 3rd option i can think of is to have redis copy the data from the static struct to a runtime one, if it's mainly pointers to static data and not copying the data itself, then it won't increase heap size by mucy.."
907453639,10515,jhelbaum,2022-06-27T14:27:03Z,"If you want to do this, I'd suggest implementing the refactoring in a separate PR which does only that: move the command-related headers from `server.h` to `commands.h` and split `redisCommand` into two structs. The this PR can be rebased onto that."
907708577,10515,oranagra,2022-06-27T19:04:04Z,"Ok, but neither of them is gonna be merged soon (we decided that considering such a big change, the feature isn't justifying the risk of breaking something in a patch level release). 
So I rather not wait, and keep progressing here. 
We can make another PR, and merge the same commits here. Or add the commits here, and later before merging, extract them to another PR. "
907714517,10515,oranagra,2022-06-27T19:12:03Z,"We can add the array in commands.c , 
but also I think the strings values of the COMMAND command don't have to be the same, so arguably it's OK for redis-cli to define its own array too (as long as there's some static assertion to make sure it's the same size as the enum). 

But commands.c is probably better.. "
943340276,10515,jhelbaum,2022-08-11T10:39:48Z,"So for now I won't be splitting `redisCommand` - that's too big a change.

I haven't changed the args struct either - for now the server and cli have different structs due to the runtime data. If you still think it's important I'll take another look at that."
943340438,10515,jhelbaum,2022-08-11T10:40:03Z,Changed back to bit flags.
943340977,10515,jhelbaum,2022-08-11T10:40:46Z,"Okay, I moved the array to `commands.c` with a wrapper function exposed in `commands.h`.
"
943341536,10515,jhelbaum,2022-08-11T10:41:25Z,I changed this - I hope I understood your intention. I had to add defines to disable the subtables not needed by the CLI.
943341907,10515,jhelbaum,2022-08-11T10:41:55Z,"Updated the top comment, and added code to read the version from HELLO if it's called."
943342150,10515,jhelbaum,2022-08-11T10:42:15Z,"Okay, added a clarifying comment."
943350284,10515,oranagra,2022-08-11T10:53:16Z,"i agree, let's cut our losses and keep separate structs."
943368809,10515,guybe7,2022-08-11T11:18:36Z,"sounds good to me

don't we have other places like that? we have some C code for counting arguments too, IIRC"
943369987,10515,guybe7,2022-08-11T11:20:07Z,"i didn't read the whole PR, but how can we keep it declarative if it isn't static?"
943427777,10515,oranagra,2022-08-11T12:30:47Z,comment can be removed
943439219,10515,oranagra,2022-08-11T12:42:36Z,"i think what we have now is already a proof that it doesn't need to be static.
i think the way it works is that we declare them in one place and then use the pointer in the command struct, much like what we do with args.
i think the reason we had to have static in order for it to be declarative is when we attempted to declare the key-specs from the same block that declares the command (before we really went into the code-generation approach).

@jhelbaum please try to delete this member. i.e. both `key_specs_static` and the `STATIC_KEY_SPECS_NUM` and see if you succeed.
or, if you don't feel comfortable, maybe Guy or myself can make a POC branch to try that out and show you what we did."
943517124,10515,guybe7,2022-08-11T13:56:25Z,i assume we can compute these at compile-time too no?
943547243,10515,jhelbaum,2022-08-11T14:22:33Z,"I assume. Probably should too.
"
943548187,10515,jhelbaum,2022-08-11T14:23:25Z,"BTW, is key_specs_max even used anywhere? I can only find where it's set."
943560255,10515,guybe7,2022-08-11T14:32:16Z,"yes, it seems it's obsolete (even before this PR)
IIRC the purpose was to contain the capacity of key_specs (in case we didn't use key_specs_static and had to allocate an array, we might have allocated more than we needed to prevent calls to realloc)
anyway, at some point it probably became irrelevant, so i guess we can delete it now"
943785934,10515,jhelbaum,2022-08-11T18:09:02Z,Yes. Done.
943787145,10515,jhelbaum,2022-08-11T18:09:37Z,Done.
943788664,10515,jhelbaum,2022-08-11T18:11:20Z,Yes. I removed that too.
945292044,10515,oranagra,2022-08-14T13:40:06Z,let's drop that comment.
945292340,10515,oranagra,2022-08-14T13:41:58Z,i think that's your leak? you need to release the old pointer
945293126,10515,oranagra,2022-08-14T13:47:53Z,"now that we emit these 3 lens, we no longer need the arrays to be null-entry-terminated.
note, it may expose some use case that still used to search for that entry, and now needs to use the length."
945333139,10515,jhelbaum,2022-08-14T19:31:54Z,Looks like it. Thanks.
945333143,10515,jhelbaum,2022-08-14T19:31:57Z,Done.
945333168,10515,jhelbaum,2022-08-14T19:32:20Z,Done. Didn't seem to cause any problems.
1131064621,10515,zuiderkwast,2023-03-09T13:55:38Z,"Including a .c file in another .c file? That file has a macro that controls which file to include instead of ""server.h"", in this case redefined to ""cli_commands.h"" that defines some stuff required in commands.c... It looks a little too much like spaghetti to me.

Can't this be structured in a slightly nicer way?

I have an idea:

1. The code generated from JSON can be in a file that doens't end in `.c`, for example `commands.def`. This file shoudn't have boilerplace C code such as `#include ""server.h""`. It only has the actual command definitions.
2. `commands.c` is a small file that defines the macros to commands structs used by `redis-server`, includes `server.h` and then includes `commands.def`. This file is compiled to `commands.o` and linked with redis-server.
3. `cli_commands.c` is another small file that defines what's needed for the cli hints, includes `cli_commands.h` and then includes `commands.def`. This file is compiled to its own .o file and linked with redis-cli.
"
1131097360,10515,zuiderkwast,2023-03-09T14:21:43Z,Why isn't testHint() enough? I.e. can't the tests in TCL call `redis-cli --test_hint` for each of the hints to be tested? Would that be too slow?
1131102002,10515,zuiderkwast,2023-03-09T14:25:12Z,This hint helper code is so large that it could be considered to place it in a separate .c file. `redis-cli` is close to 10k lines.
1132319309,10515,oranagra,2023-03-10T12:38:51Z,"That was my design. I love preprocessor made pasta..
I suppose your suggestion is okay as well. Or maybe I had some reason why i didn't wanna move commands.c. don't recall."
1132438077,10515,zuiderkwast,2023-03-10T14:18:18Z,"My suggested change isn't huge if github is able to detect that a file is renamed with a few changes. Well, I've shared my thought. Now it's up to you to decide what you want to merge. :)"
1132439463,10515,jhelbaum,2023-03-10T14:19:34Z,"I don't have a strong preference for how this should be done. The main point is that both the client and server code should get the parts of the command specs they need, without making the client dependent on `server.h`."
1132440843,10515,jhelbaum,2023-03-10T14:20:50Z,"I honestly didn't try it that way. It was just convenient for me to have all the tests in one file. Again, whatever works is fine."
1132442166,10515,jhelbaum,2023-03-10T14:22:04Z,"I agree, in principle. In practice, when I tried separating out the hint code it turned out to be more complicated than I expected, due to some interdependencies (I don't remember specifically which). "
1132489174,10515,zuiderkwast,2023-03-10T15:01:01Z,"Yeah I get that and sure this works. But I think maintainability and readability are important too.

What I don't like very much is the part of `utils/generate-command-code.py` that generates C code like this:

```C
#ifdef COMMAND_HEADER_TO_INCLUDE
#include COMMAND_HEADER_TO_INCLUDE
#else
#include \""server.h\""
#endif

// ...

#ifndef COMMAND_STRUCT
#define COMMAND_STRUCT redisCommand
#endif
#ifndef COMMAND_ARG
#define COMMAND_ARG redisCommandArg
#endif
```

It's not a very clean interface. If we forget to define some of these macros, it will get a default that is intended for server.h and error messages about redisCommandArg not being defined.

Better IMO to describe what macros are required by the generated code and force the user of the generated code to define them before including the generated code. For example like this:

```C
/* commands.c, used by redis-server */
#include ""server.h""
#define COMMAND_STRUCT redisCommand
#define COMMAND_ARG redisCommandArg
#include ""commands.def""
```

```C
/* cli_commands.c, used by redis-cli */
#include ""cli_commands.h""
#define COMMAND_STRUCT ...
#define COMMAND_ARG ...
#include ""commands.def""
```"
1133306491,10515,zuiderkwast,2023-03-12T18:56:33Z,"Yes, the test suite txt file is really nice. I was just thinking maybe the test orchestration should be in a test script or so, but it's no big deal. Or perhaps wrapped in an `#ifdef REDIS_TEST` or so. We do that in some other tests within c files, e.g. dict."
1133306680,10515,zuiderkwast,2023-03-12T18:57:57Z,"OK, the globals are messy in this file. Leave it then. :+1:"
1151633559,10515,oranagra,2023-03-29T09:15:47Z,"i tried following this design and run into some problem.
the base of them is the recent reply schema validator (#10273) and the Makefile changes in it.
the trick there was that when we build redis with the reply schema mode, we use a different commands.c (with different contents), and in order to avoid committing it by mistake, we generate a different file name and link with a different `.o` file name.

if we make the same trick here (generating `commands_with_reply_schema.def`), we'll need to keep just one commands.c and commands.o (since they do have some boilerplate code that's not generated).
this way we still avoid the risk of committing `commands_with_reply_schema.def` by mistake, but maybe we have a risk of using a wrong command.o during a build.

please take a look at https://github.com/redis/redis/pull/11913/commits/7f18011c2564385c467d4d55c95ae15a2a3d6f86
@guybe7 please comment as well.

if we don't like that commit, i'll revert it, and we'll keep generating a c file and including it from another c file..."
1151653645,10515,zuiderkwast,2023-03-29T09:31:57Z,"@oranagra Thanks for doing this. I like it!

I too realized that it changed with the reply schema version of commands.c and I didn't quite get the time to fix it."
1151677470,10515,zuiderkwast,2023-03-29T09:49:36Z,"Regarding the build dependencies in your last commit:

```Makefile
commands.c: $(COMMANDS_DEF_FILENAME).def

cli_commands.c: commands.def
```

The `.c` files are not generated anymore. Only the `.o` files depend on the `.c` files and the `.def` files. Shouldn't we have rules like `commands.o: commands.c commands.def` instead, or am I missing something?

> if we make the same trick here (generating `commands_with_reply_schema.def`), we'll need to keep just one commands.c and commands.o (since they do have some boilerplate code that's not generated).

One possibility is to put that boilerplate (`#define MAKE_CMD ...`) in yet another file to include. `commands_boilerplate_glue.h` or whatever...

> this way we still avoid the risk of committing `commands_with_reply_schema.def` by mistake, but maybe we have a risk of using a wrong command.o during a build.

Possibly, to avoid using the wrong `commands.o` by mistake:

```Makefile
commands.o: commands.def
commands_with_reply_schema.o: commands_with_reply_schema.def
cli_commands.o: commands.def
```
"
930055960,10966,fadidahanna,2022-07-26T14:43:18Z,"```suggestion
#include ""redismodule.h""
```"
930090247,10966,fadidahanna,2022-07-26T15:11:42Z,"```suggestion
    sds error = addACLsToUser(user->user, user->name, argv, argc);
```"
930092041,10966,fadidahanna,2022-07-26T15:13:15Z,I'm not sure it is required to propagate the error... 
930095556,10966,fadidahanna,2022-07-26T15:16:18Z,"This method should be part of the acl api, as `ACLSetUser()`"
930705425,10966,sjpotter,2022-07-27T07:19:48Z,"I'm not sure about this.  as name is for when we create the user via this mechanism, unsure thats valid from an rm function"
930706857,10966,sjpotter,2022-07-27T07:21:30Z,"if we fail to parse the string, isn't it import to know why?  the other option would be for it not to be a return value but for the fucn to take a RedisModule ** and return it that way."
933980381,10966,fadidahanna,2022-07-31T12:35:40Z,"```suggestion
    u->acl_string_dirty = true;
    if (dst->acl_string) sdsfree(dst->acl_string);
    dst->acl_string = NULL;
```"
933981331,10966,fadidahanna,2022-07-31T12:42:38Z,are we sure we want to set the use in case it was taken from `moduleTempClients` ?
933982265,10966,fadidahanna,2022-07-31T12:49:12Z,I think we should enforce `rm_user` for this API call. No user scenario should use `RM_Call()` explicity. 
933984202,10966,fadidahanna,2022-07-31T13:02:45Z,is `user->user == NULL` is valid? if yes - what are your expectations in this case? 
934330100,10966,fadidahanna,2022-08-01T09:32:17Z,style
934331185,10966,sjpotter,2022-08-01T09:33:27Z,actually just get rid of dirty and just free the string.
934408860,10966,sjpotter,2022-08-01T11:08:20Z,"I don't see how user->user can be NULL.  if user isn't null, user->user should be a redis internal user."
934462450,10966,sjpotter,2022-08-01T12:17:36Z,"so this is a question, should this be an error.  if you pass in a NULL rm_user should it be an error, or should it be treated as NULL (i.e. root user in redis internal usagE)"
935493671,10966,sjpotter,2022-08-02T12:04:15Z,"all moduleTempClients reset to NULL at the end, so should be ok."
935493983,10966,sjpotter,2022-08-02T12:04:32Z,see comment I made below noting this Q
946538163,10966,sundb,2022-08-16T09:23:50Z,"`reply` has been added to auto memory which will result in double free.
https://github.com/redis/redis/blob/ac1cc5a6e15bd73bbb7ee9eff950850fdc69a31a/src/module.c#L6035"
946538604,10966,sundb,2022-08-16T09:24:19Z,"```suggestion
    const char *str = RedisModule_CallReplyStringPtr(reply, &str_len);
```"
946868708,10966,oranagra,2022-08-16T14:42:01Z,this change is somewhat in the direction of one of the changes i was planning for https://github.com/redis/redis/issues/11083
946872267,10966,oranagra,2022-08-16T14:44:54Z,"i'd like to see how we can arrange the code in a way that won't cause git to think all these lines were deleted and re-added.
it's hard to review, and may cause unnecessary conflicts."
946878914,10966,oranagra,2022-08-16T14:50:32Z,"i guess this API isn't really necessary, right?
it can be done with a combination of RM_GetCurrentUserName, RM_GetModuleUserFromUserName, and RM_ACLCheckCommandPermissions.
despite being cumbersome, i think there's an advantage with working with smaller building blocks that can achieve more rather than an API for each specific purpose."
946879737,10966,oranagra,2022-08-16T14:51:15Z,so this API comes in place of https://github.com/redis/redis/pull/10369 ?
946882671,10966,oranagra,2022-08-16T14:53:39Z,"maybe it would be more flexible to expose an RM_SetCurrentUser (to mess with ctx->client, and then revert is when the context is destroyed), and then use a plain RM_Call?
if we expose this capability, there's no need for a new API, and it also enables other APIs that count on the current user to be affected by this."
947009133,10966,sjpotter,2022-08-16T16:36:26Z,is this true?  I thought one an still free things with automemory?  i.e. I thought you can manually free strings even when you create a RedisModuleString with a ctx?
947012425,10966,sjpotter,2022-08-16T16:39:34Z,"ok, so that would probably mean, renaming RM_Call to the internal name, so only  change that line, and then create a new RM_Call elsewhere?"
947014149,10966,sjpotter,2022-08-16T16:41:03Z,"yes, except a comment we had that this was a lot of allocations for each call when in practice we didn't need to to do any of them and that was ""bad"".  @tezc want to chime in?"
947024316,10966,sjpotter,2022-08-16T16:50:11Z,"so, its possible, we do get ACLs out of that already.  In the future we might think we might need a greater ability, what I call CallWithClient.  i.e. the ability of modules to manage the lifcycle of clients themselves.  this would be for watch/multi/exec to work correctly for us to be able to have consistent ""client session"" mapping across all nodes in the cluster.

i.e. a client issues a watch, it needs to be marked dirty and have exec fail consistently across all nodes.  as redis already does that at the client object level, this seems to be the best way to do it, but that's future work."
947134614,10966,oranagra,2022-08-16T18:51:10Z,"maybe.. you'll probably need some forward declarations.
maybe there's a way to break the code into functions and lay the lines of the code as close as how they were.
keep in mind that the comment needs to be right next to RM_Call in order to make it in the generated docs.
anyway, it doesn't have to be perfect, but let's at least try to get something better."
947139806,10966,oranagra,2022-08-16T18:55:08Z,"even then, we could maybe change the client that's used by the context too (same as we can change the user).
and there's no need for a specific RM_Call variant (and possibly other APIs) for these."
947468945,10966,tezc,2022-08-17T05:35:52Z,"Yes, it was just to avoid 2 unnecessary allocations + a lookup. Let's have a benchmark, see if we really need this. Maybe we can consider something in the middle, introducing a bit more generic `RM_GetCurrentUser()` (single allocation) and then calling `RM_ACLCheckCommandPermissions()`. "
947488045,10966,sundb,2022-08-17T06:10:28Z,"Ohh, my bad, missed the ctx in `RedisModule_FreeCallReply`."
947669050,10966,sundb,2022-08-17T09:24:24Z,"If error starts with `-`, `callReplyCreateError` will not add `\r\n` at tail.
```suggestion
                                        ""the '%s' command\r\n"", c->cmd->fullname);
```"
952380365,10966,sjpotter,2022-08-23T09:31:09Z,"ok, based on discussion below, removed / revert all the WithUser changes and now have a RM_SetContextModuleUser that if set will cause RM_Call to run the client as that.

The issue we have is how this will work if the underlying user is freed on you somewhere else (i.e. users aren't referenced counted, maybe they should be?).  A thought to solve this, would be that the expectation is that you do a 

RM_SetContextModuleUser() and then an immediate RM_Call() each time and the user is then invalidated after used by the RM_Call, so if you did

RM_SetContextModuleUser()
RM_Call()
RM_Call()

this second call would run as the root/null user.  therefore don't really have lifetime management issues."
952380934,10966,sjpotter,2022-08-23T09:31:40Z,"removed this code for now.  can put it back if needed, less needed if we have dry run (and made more efficient)"
952381909,10966,sjpotter,2022-08-23T09:32:35Z,"so I sort of did this, no messing with ctx->client, messing with ctx and using that to pass to the 'temp client' that is allocated in rm_call"
952382890,10966,sjpotter,2022-08-23T09:33:34Z,so this code was reverted for now.  
952517043,10966,oranagra,2022-08-23T11:57:41Z,"i don't think we should revert it after RM_Call, i think we should revert it when the context is destroyed.
maybe on long lived contexts we have an issue, but then don't we have that issue anyway?

p.s. shouldn't it be RM_SetModuleContextUser (i.e. ModuleContext instead of ContextModule)?"
952608777,10966,fadidahanna,2022-08-23T13:11:19Z,please remove
952617283,10966,fadidahanna,2022-08-23T13:18:40Z,"```suggestion
RedisModuleString *RM_SetModuleUserACLString(RedisModuleCtx *ctx, RedisModuleUser *user, const char *acl) {
```"
952651325,10966,sjpotter,2022-08-23T13:46:51Z,"going backwards:

I was thinking of it as Set the Context's ModuleUser (as it's called a RedisModuleUser struct).

In general we don't have ""free floating"" user objects like this.  i.e. it be attached to a client (and then it invalidate/disconnect the client when we fee the object).  In this case, I dont think its safe to keep it valid long term.

With that said, the same argument can be made I guess if this done in an external thread, then any use of RedisModuleUser is probably just as problematic as can be freed on main thread without one's knowledge in thread."
952671871,10966,fadidahanna,2022-08-23T14:03:37Z,"no need this check again, `u->acl_string` is NULL for sure, since it was validated at the beginning of this method."
952692871,10966,fadidahanna,2022-08-23T14:20:37Z,"@sjpotter, so can we #10369? "
953481050,10966,sjpotter,2022-08-24T08:04:05Z,"so, what I think the answer is here, is to pass in a RedisModuleString ** to the function.  If it's not null, we generate a string, otherwise we don't. and then return value is just REDISMOULE_OK/ERR and if caller wants a string with the error, they'll get it."
953488449,10966,sjpotter,2022-08-24T08:11:28Z,just to note renamed to ACLStringSetUser
953489514,10966,sjpotter,2022-08-24T08:12:32Z,closed it.
953490342,10966,sjpotter,2022-08-24T08:13:22Z,"not resolving this yet, as unsure if what I did was what you want"
953524590,10966,sjpotter,2022-08-24T08:46:35Z,cleaned up.
953526534,10966,sjpotter,2022-08-24T08:48:26Z,"or decrement, it will never exist here."
953871151,10966,oranagra,2022-08-24T14:23:57Z,"i see the code before was using a plain `%s`, why did you choose to add `%.` and `sdslen`?
also, the code before went though `addReplyErrorFormatInternal`, which strips off any newlines, we need to check if it's critical here or not (maybe applicable to the other error below)."
953881488,10966,oranagra,2022-08-24T14:32:40Z,"is this suppose to be used by modules? (i don't see it documented in the doc comments in module.c)

also, i don't think it a good idea to add another link time symbol?
we basically currently have none (RedisModule_GetApi is passed as an argument to RedisModule_Init, and from there it all gets resolved via a dictionary).

to be honest, i still don't quite understand why we need that, please describe in more detail."
953894993,10966,oranagra,2022-08-24T14:44:02Z,"This API needs to be heavily documented here.
We should note that by default RM_Call uses a ""super user"" that's unrestricted.
and that by using this API, it means the command are actually executed by this user (not only affecting the ACL validations RM_Call does, but also ones done by the command redis executes)"
953896594,10966,oranagra,2022-08-24T14:45:20Z,"we should improve the documentation of ARGV_CHECK_ACL to mention that by default it uses the user who executed the calling module command, but it can be changed by using the new API"
953897436,10966,oranagra,2022-08-24T14:46:00Z,"needs doc comment.
explain the difference from RM_SetModuleUserACL"
953898771,10966,oranagra,2022-08-24T14:47:04Z,"IIRC, a blank line between the comment and the API, means the script won't recognize the doc."
953902208,10966,oranagra,2022-08-24T14:49:53Z,"maybe we better take a RedisModuleString input?
but anyway, sdssplitargs takes a plain char*, why clone the string here?"
953911164,10966,oranagra,2022-08-24T14:57:14Z,"i'm not sure if the ""with"" and ""without"" (both here, and in the module implementation), refer to the ACL check performed by RM_Call (the ""C"" flag), or the fact we set a user via RM_SetContextModuleUser.
i think it could be nice to test combinations of the above.
maybe the RM_Call flags could be controlled by the caller like we do in misc.c, this will make the code in the module's C file smaller, and the reader of the tcl code will not need to go look at the module as much to understand what the test does."
954974079,10966,sjpotter,2022-08-25T13:32:43Z,"don't know, think I was conflating multiple different things (thinking its an sds so have to use len, but then I should have just used S).  changed it to how it was."
954979719,10966,sjpotter,2022-08-25T13:37:38Z,"my understanding is that Redis has a concept of a NULL user which is treated as the ""root"" user.  (i.e. until now how RM_Call primarily issued commands.).

So the Q is, if we call `RM_SetContextModuleUser(ctx, NULL)`, we are really just unsetting the user, not setting the user the ""Null"" user.

What's the problem?  if we call `RM_Call()` with the `C` check acl flag, we will then be using the user that is part of the context's client (if it exists), not the ""NULL/Root"" user.  This is a way to use `C` with the that null/root user, even  if the ctx itself has a user. 

The counter argument is, if you want this to execute as the ""Null/root"" user, just don't use the 'C' flag and `RM_SetContextModuleUser(ctx, NULL)` befoe you issue the `RM_Call`."
956685196,10966,sjpotter,2022-08-28T07:53:36Z,added a comment
956685665,10966,sjpotter,2022-08-28T07:56:53Z,"dont see any doc comments that discuss this check, just a bit inside the code.  where do you think it should go?"
956686149,10966,sjpotter,2022-08-28T08:00:55Z,added something
956686390,10966,sjpotter,2022-08-28T08:02:41Z,removed
956687881,10966,oranagra,2022-08-28T08:14:51Z,"this one:
```c
 *     * `C` -- Check if command can be executed according to ACL rules.
```"
956689264,10966,sjpotter,2022-08-28T08:25:50Z,"how about

call_without_user (regular rm_call)
call_with_user (set user, regular rm_call)
call_with_user_and_acl (set user and rm_call with 'C' flag)"
956708898,10966,sjpotter,2022-08-28T11:02:30Z,I think I addressed this in latest push
956709261,10966,sjpotter,2022-08-28T11:05:15Z,ok added something.
956731054,10966,oranagra,2022-08-28T13:41:31Z,"ok, i see it now, so the caller needs to choose between
1. setting the user explicitly
2. using the root / super user
3. using the user assigned to the calling client.

So NULL can either mean [2] or [3], but as you mentioned, if the caller aims for [2] (root), then there's no need to use `C`.
they'll use `C` only when they want validations, and then with NULL it'll mean [3], and non-NULL is a specific user.

The next thing to consider is the actual user that executes the command, and here i'd argue that the default of NULL is a root user, and if the caller wants to select the user of the calling client, they need to explicitly extract it and set it (becomes a non-NULL).

I agree it's a bit odd, that NULL means option [3] in one case, and option [2] in the other, but maybe it's not that bad? (part of it is mandatory to keep backwards compatibility). "
956949741,10966,oranagra,2022-08-29T06:47:19Z,"i'm still afraid of protocol violation here.
in case someone executes an ACL command with newline as part of one of the args, it'll respond with a text that includes that arg, and since it doesn't go now though the newline trimming of `addReplyErrorFormatInternal`, it can mess up the protocol.
maybe we need to create a new addReplyErrorSdsSafe, and use it instead of addReplyErrorSds"
956952167,10966,oranagra,2022-08-29T06:50:47Z,"""toexecute"".
p.s. i don't think we're using double spaces after periods elsewhere."
956954597,10966,oranagra,2022-08-29T06:54:15Z,"I see you added documentation for `NullUser` in module.c, but i don't think the documentation generator will catch that.
so instead the documentation about it should be in `RM_SetContextModuleUser`.

but anyway, due to the points above i still think we should completely dismiss it.
* it create a new link time ABI requirements that we didn't have so far (no globals)
* i think it's unnecessary, the plain NULL / default is probably enough, if documented properly."
956957663,10966,oranagra,2022-08-29T06:58:21Z,"i think i meant do document that where the `C` flag is documented.
note that there's s script in the utils folder that extracts the documentation above each RM_* function and generates the reference in https://redis.io/docs/reference/modules/modules-api-ref/

so any doc we want to be visible to it, must be in these comments."
956958271,10966,oranagra,2022-08-29T06:59:14Z,"```suggestion
 * would use on the redis ACL SETUSER command line API. This differs from
```"
956966947,10966,oranagra,2022-08-29T07:10:56Z,"i still think that considering that call_with_user and call_with_user_and_acl are identical except the flag
we better just let the tcl code pass the flags, and then it can also use other flags.
so we'll have just two commands, one uses a user and one that doesn't.

p.s. where you say ""with acl"", i think it should say ""with acl checks"", to make a difference between setting up ACL user, and asking RM_Call to do the checks."
956984110,10966,sjpotter,2022-08-29T07:31:52Z,"ok, removing it."
957179752,10966,sjpotter,2022-08-29T11:00:44Z,"ok, added/moved"
957193061,10966,sjpotter,2022-08-29T11:17:21Z,"took out the the comment here and replaced it in a much simpler manner.

/* Modifies the user that RM_Call will ACL check commands as */"
957260497,10966,sjpotter,2022-08-29T12:25:20Z,"I'm unconvinced that they are equivalent.

call_with_user doesn't check ACL, just sets the user on the context, while ACL actually calls it with ACL checking.

i.e. we have 3 ways to do the call

1) base rm_call (should be effectively same as before)
2) with user - but as not specifying ACL, nothing should change (should behave the same as regular rm_call)
3) with acl - now, this is where the difference is."
958179357,10966,fadidahanna,2022-08-30T08:34:43Z,"```suggestion
 *              Uses the user specified by RM_SetContextModuleUser, if set, otherwise
 *              if the context has an attached client, will use the user associated
 *              with the client. If neither are available, will return an error.
 *              In addition, when defined, will enforce ACL checking within scripts
 *              as well.
```"
958191563,10966,fadidahanna,2022-08-30T08:45:20Z,"```suggestion
/* Sets the permission of a user with a complete ACL string, such as one
 * would use on the redis ACL SETUSER command line API.  This differs from
 * RM_SetModuleUserACL, which only takes single ACL operations at a time.
 *
 * Returns REDISMODULE_OK on success and REDISMODULE_ERR on failure
 * if a RedisModuleString is provided in error, a string describing the error
 * will be returned */
int RM_SetModuleUserACLString(RedisModuleCtx *ctx, RedisModuleUser *user, const char *acl, RedisModuleString **error) {
```"
958202060,10966,fadidahanna,2022-08-30T08:55:10Z,"@sjpotter, as @oranagra pointed out in his comment - setting the user will affect not only the ACL validation."
958204383,10966,fadidahanna,2022-08-30T08:57:15Z,"I think that in case `RM_SetContextModuleUser` was called, and the module sets a module user, we should use it, no matter which flags we have. But I wonder, when do we reset this behavior? should the module set the user to NULL after there is no use in the context? "
958205939,10966,fadidahanna,2022-08-30T08:58:37Z,"so @sjpotter, do we need both comments? "
958207623,10966,fadidahanna,2022-08-30T09:00:13Z,"@sjpotter, it's still here - please remove"
958208653,10966,fadidahanna,2022-08-30T09:01:13Z,"Not sure this include is needed, please check. "
958216963,10966,fadidahanna,2022-08-30T09:09:02Z,@sjpotter ^^^
958232440,10966,sjpotter,2022-08-30T09:22:19Z,"we ""are"" using it, but I argue its more consistent to say we only really use it if the ""C"" argument is given.  Basically I view this set function now as an override for whatever it would think it would be (either not set or something else).

Basically, if you want ACL checking, you need to use ""C"", if you dont want acl checking you don't use ""C""."
958233108,10966,sjpotter,2022-08-30T09:22:56Z,"ah, the extern yes.  missed that"
958234388,10966,sjpotter,2022-08-30T09:24:17Z,removed both and the printf for debugging
958253509,10966,fadidahanna,2022-08-30T09:39:41Z,Is `user` used only for ACL checking? I'm not sure... 
958372960,10966,sjpotter,2022-08-30T11:44:21Z,"ok, would returning the errors like this be better

```
        sds err = sdsnew(""Unmatched parenthesis in acl selector starting at "");
        return sdscatrepr(err, argv[invalid_idx], sdslen(argv[invalid_idx]));
```"
959653424,10966,oranagra,2022-08-31T14:24:17Z,"my point was that the two functions are identical except for the flags that are passed, so if we pass them from outside we have:
1. more flexibility to the caller (can add other flags)
2. all the context about the test is in one place. i.e. the reader needs to read less C (not that many functions with a ton of code in each), and when he gets to read the TCL code, he can still remember what each C command does.

when i read these module tests code, i often have a problem where i need to run back and forth between the tcl code and the c code on each line of tcl code that i'm reading.
if the C code is simple, and i can clearly understand what each module command does, then it's sufficient to read just the TCL code (assuming i know the RM_Call feature and meaning of the flags, since if i don't know that, i need to also switch between a TCL file and 2 C files).

maybe if we take if further, we can even have just one rm_call wrapper command, and control the selected user using a specific command that does just that.

anyway, i won't insist on that.. just a suggestion for something that can maybe make the tests more readable."
959665130,10966,sjpotter,2022-08-31T14:33:40Z,"ok, so if I understand correctly, it would be a call_with_user and call_with_user_flags like in misc.c, where right now it just be used with the acl flag of 'C'"
959668708,10966,oranagra,2022-08-31T14:36:42Z,"indeed it depends if the user is only used for ACL.
i can see the day where users will have other feature, like rate limiting or whatever.. probably done by a module with some hooks and user awareness.
so it seems logical to me that we always apply the user if it is set.

however, then we run into an odd problem that some ACL checks depend on the ""C"" flag, and others do not (i.e. if a command does it's own ACL checking, like scripts do, SORT does, and like PUBLISH used to do at some point), these engage even if you didn't pass the ""C"" flag.
and we can't expect the caller to keep track of our internal implementation..

i'm a bit on the fence here, considering that that built in features of users are just ACL, but it may be extended in the future, and also already be done by modules.

i think i'm leaning towards setting the user regardless of the ""C"" flag."
959671182,10966,oranagra,2022-08-31T14:38:46Z,"i don't like this solution (with no explanation what it's for...
i think it should be inside an addReplySdsSafe function.

i suppose we only have this concern when returning replies to clients, not when errors to a module API."
959676320,10966,oranagra,2022-08-31T14:43:04Z,"```suggestion
/* Modifies the user that RM_Call will use (e.g. for ACL checks) */
```"
959681043,10966,oranagra,2022-08-31T14:46:55Z,"```suggestion
 *          The ACL validation works either on the context's client's user (if it's defined)
```"
959834675,10966,sjpotter,2022-08-31T17:15:53Z,"would we want another flag then?  'U'?  i.e. run as user (where user is either, ctx->client->user or ctx->user (preference being ctx->user).

i.e. could use 'U' without SetContextModuleUser and 'C' and would run scripts not as unrestricted user, but as the appropriate user.  might still be unrestricted."
959834932,10966,sjpotter,2022-08-31T17:16:12Z,"ok, will look into that."
959851529,10966,sjpotter,2022-08-31T17:36:00Z,think I did this added a addReplyErrorSdsSafe and use it in acl return to user.
959861797,10966,sjpotter,2022-08-31T17:48:12Z,"so I thought about this some more.  ""C"" as I'm arguing to redefine is effectively setting the user for everything.  yeah, it might make sense to not be ""C"" and be ""U"" and set user and acl check, but I don't see any case where it makes senes to do one and not do the other.  i.e. if assigning a user to the client, I'd argue you should be acl checking throughout, and as demonstrated for scripts if acl checking at rm_call really should be assigning it to client to impacts script execution"
961084767,10966,sjpotter,2022-09-01T20:44:16Z,I believe I now handle it better - addReplyErrorSdsSafe() that does the mapping on reply.
961092535,10966,sjpotter,2022-09-01T20:55:16Z,"ok, rewrote this."
961104028,10966,sjpotter,2022-09-01T21:09:13Z,"so in the commit I just pushed, no ""U"", ""C"" is just renamed from ACL_CHECK to RUN_AS_USER.  this does change script semantics that are run via RM_Call so needs to be noted.  ACL checking is just a side effect of ""Running as User""."
962291251,10966,oranagra,2022-09-04T10:44:02Z,don't think we need that comment (it doesn't even say what was validated)
962310985,10966,oranagra,2022-09-04T13:04:03Z,"so now `call_with_user` is identical to `call_without_user`?
delete one?"
962315016,10966,oranagra,2022-09-04T13:32:00Z,"I was leaning towards using the user set via RM_SetContextModuleUser even without ""C"", but now that you've re-purposed ""C"", it actually makes sense that way too.

However, this is a behavior change causing scripts that used to work to stop working when redis is upgraded.
but since it only happens with ""C"", and its purpose was to check ACL, which scripts actually bypassed, i think we can consider that a bugfix.
@MeirShpilraien @yossigo please ack.

@sjpotter please make sure to reflect that in the PR's top comment.
also, i see you opened #11231, i'm not sure why (it covers the same purpose that you fixed here, right)?
shall we set it to be closed when this one is merged?

p.s. how is that in terms of symmetry with our intents in #11161 (a flag that tells RM_Call to affect commands in scripts the same way it affect normal commands)"
962371159,10966,sjpotter,2022-09-04T21:23:18Z,ok
962371344,10966,sjpotter,2022-09-04T21:25:21Z,"I dont think they are quite the same (but perhaps close enough).

call_without_user is normal RM_Call.

call_with_user is calling RM_SetContextModuleUser before RM_Call, but without any flags, so in practice similar, but more a test to ensure semantics dont change in future.

call_with_user_flags is calling RM_SetContextModuleUser and then whatever flag we use (presumably 'C') to make use of that call.

if you dont think its neccessary, can remove, but that was my logic."
962371904,10966,sjpotter,2022-09-04T21:31:22Z,"yes, I opened #11231 to make this a discussion of this being a bugfix or not.  i.e. that if we needed 'C' semantics to stay the way they are, perhaps we deprecate 'C' (i.e. we still support it, but note that it doesn't do what one might expect for scripts) and add a 'U' that is much more clear of what happens in this case.  (as I describe in the comment)

I can imagine it also possibly being useful for other modules (not sure how they would use, but my imagination says it might be possible), as a way to ""sandbox"" modules.  i.e. a module could restrict itself by always running as a more restricted user.  Unsure this is really necessary, but perhaps others could take it and run with it."
962562093,10966,sjpotter,2022-09-05T07:18:31Z,removed
962755196,10966,oranagra,2022-09-05T10:32:34Z,"look again.
in the last version you posted call_with_user doesn't call RM_SetContextModuleUser, so it's identical to call_without_user.
also, if you want to test a case of using RM_SetContextModuleUser without the C flag, you can still do that with call_with_user_flags."
973894050,10966,oranagra,2022-09-19T06:20:08Z,FYI `{}` will generate an empty string.
977343908,10966,oranagra,2022-09-22T08:18:08Z,"I still have trouble with this API name.
both the words ""context"" and ""module"" seem a bit excessive.

looking at another API that does a similar thing: `RM_AuthenticateClientWithUser`
so the difference is that one works on the client and the other on the context, and that one is more permanent than the other.

I think we can drop the word ""Module"", i think it is implied.
if we'll ever have a similar API that takes a non-module user, we'll call it SetContextUserName.
same as we have RM_GetCurrentUserName vs RM_GetModuleUserFromUser**Name**, and the similar RM_AuthenticateClientWith**ACL**User vs RM_AuthenticateClientWithUser"
977362794,10966,fadidahanna,2022-09-22T08:34:05Z,Don't think we have a strong objection for renaming it to `RM_SetContextUser()` - will do it. 🙏 
453270379,6929,oranagra,2020-07-12T05:36:45Z,"this file is auto generated, please revert these and instead make a PR to https://github.com/redis/redis-doc/blob/master/commands.json instead."
453270507,6929,oranagra,2020-07-12T05:38:45Z,"i feel maintaining that list is not wise.
maybe we just need to leave it as it was, or instead give 3 commands as an example?
@yossigo please provide additional input."
453270772,6929,oranagra,2020-07-12T05:41:41Z,let's rename to `getPopPushCmdName`
453270804,6929,oranagra,2020-07-12T05:42:03Z,let's rename to `getPopPushCmdProc`
453271265,6929,oranagra,2020-07-12T05:47:55Z,"i think the space between the comment and the command function needs to be trimmed (like it used to be, and like other commands.
also, too many spaces above the comment.

then, for the command functions below, maybe add a short one line comment referring to rpoplpushCommand."
453271978,6929,oranagra,2020-07-12T05:57:07Z,"how about we add one element to the target list before the operation, so that we can use LPOP here and see that it got pushed into the right place?
consider that change on all 4 tests in that group?"
453272430,6929,oranagra,2020-07-12T06:02:28Z,"for these 4 tests, i'd replace the `after 1000` with a `wait_for_condition` for `[s blocked_clients] == 1`
that would make all 4 run after than the original 1 too.
then i'd also suggest to put something in the target list before the operation, and then check that by using the right kind of pop, we get the right item.
this (together with the above/previous non-blocking test), makes sure that both code paths, push to the right place."
453272560,6929,oranagra,2020-07-12T06:04:32Z,"for these 4 tests, again, let's take this opportunity to replace the `after 1000` with a `wait_for_condition` for `[s blocked_clients] == 2`"
453272690,6929,oranagra,2020-07-12T06:05:42Z,"there's really no value in adding these 3 tests.
although they don't take time, let's trim them."
453272882,6929,oranagra,2020-07-12T06:07:57Z,"for these 3 i also don't see any value in repeating.
i think we can trim them (and replace the `after 1000` in the original one)."
453272928,6929,oranagra,2020-07-12T06:08:38Z,"i think we can trim these 3 tests, they don't add value."
453273006,6929,oranagra,2020-07-12T06:09:32Z,"i think we can trim these 3, don't add real value"
453273302,6929,oranagra,2020-07-12T06:12:43Z,"in order to gain more value in these, let's add some pre-existing value in list3, so that we can check the element got pushed to the right place?
or alternatively, if we think we got that covered already, and this test is just to check that a series of linked operations work, let's trim the additional 3 tests. (and maybe use two different types of BxPOPxPUSH in the original one test)."
453273344,6929,oranagra,2020-07-12T06:13:25Z,"i think these 3 don't add value, let's trim them."
453273372,6929,oranagra,2020-07-12T06:13:48Z,"i think these 3 don't add value, let's trim them."
453273411,6929,oranagra,2020-07-12T06:14:23Z,"these 3 don't add real value, let's trim them."
453273428,6929,oranagra,2020-07-12T06:14:50Z,"these 3 don't add real value, let's trim them."
453273456,6929,oranagra,2020-07-12T06:15:00Z,"these 3 don't add real value, let's trim them."
453273952,6929,oranagra,2020-07-12T06:20:23Z,"these 3 don't add real value, let's trim them.

p.s. we can improve the original test, which is quite silly (removing the `after` will make no difference).
something like:
```
    $rd brpoplpush foo_list bar_list 1
    after 100
    assert_equal [s blocked_clients] 1
    wait_for_condition 500 100 {
        [s blocked_clients] 1
    } else {
        fail ""client wasn't unblocked""
    }
    $rd read
```
if you feel like improving the one, and trimming the 3 dups, that would be great."
453274107,6929,oranagra,2020-07-12T06:22:26Z,"no value in these 3, let's trim"
453274138,6929,oranagra,2020-07-12T06:22:42Z,"no value in these 3, let's trim"
453274171,6929,oranagra,2020-07-12T06:23:14Z,"no value in these 3, let's trim"
453274195,6929,oranagra,2020-07-12T06:23:39Z,"no value in these 3, let's trim"
453342055,6929,felipou,2020-07-12T17:24:07Z,Done: https://github.com/redis/redis-doc/pull/1347
453342111,6929,felipou,2020-07-12T17:24:39Z,"Ok, I reverted changes to this file."
453342115,6929,felipou,2020-07-12T17:24:45Z,Done.
453342120,6929,felipou,2020-07-12T17:24:52Z,Done.
453342121,6929,felipou,2020-07-12T17:24:58Z,Done.
453342196,6929,felipou,2020-07-12T17:25:26Z,Done.
453342328,6929,felipou,2020-07-12T17:26:35Z,"Done. Instead of checking the result with a pop, I just modified the assert adding the existing element in the right place."
453342341,6929,felipou,2020-07-12T17:26:52Z,Done.
453342362,6929,felipou,2020-07-12T17:27:10Z,Done.
453342366,6929,felipou,2020-07-12T17:27:16Z,Done.
453342385,6929,felipou,2020-07-12T17:27:23Z,Done.
453342390,6929,felipou,2020-07-12T17:27:29Z,Done.
453342579,6929,felipou,2020-07-12T17:29:27Z,Done.
453342585,6929,felipou,2020-07-12T17:29:34Z,Done.
453342599,6929,felipou,2020-07-12T17:29:39Z,Done.
453342611,6929,felipou,2020-07-12T17:29:45Z,Done.
453342616,6929,felipou,2020-07-12T17:29:50Z,Done.
453342940,6929,felipou,2020-07-12T17:32:49Z,I removed the additional tests and used a different poppush as you suggested.
453343404,6929,felipou,2020-07-12T17:37:49Z,"Removed the dups and improved the existing one as suggested. I used two wait_for_condition calls, I believe it improves it according to what you expected."
453343409,6929,felipou,2020-07-12T17:37:56Z,Done.
453343418,6929,felipou,2020-07-12T17:38:01Z,Done.
453343440,6929,felipou,2020-07-12T17:38:07Z,Done.
453343459,6929,felipou,2020-07-12T17:38:15Z,Done.
458066527,6929,soloestoy,2020-07-21T12:44:28Z,I think rename as `isBlockPopPushCommand` is more suitable @oranagra @madolson 
460048532,6929,felipou,2020-07-24T13:22:29Z,Done!
499210953,6929,oranagra,2020-10-04T06:24:58Z,"i'm not sure about rewriting the command and calling the other command proc.

I see that all the other places that use `rewriteClientCommandVector` do it just for the sake of propagating a different command to the AOF / replicas.

Maybe it is better to call some `lmoveGenericCommand` that takes RIGHT and LEFT arguments, and avoid changing the command vector?

One advantage is that if the user uses the old RPOPLPUSH command (didn't start using new commands), we'll keep propagating the old command too, so that the AOF file is still compatible with old versions (although we don't intend to guarantee that).

however if we wanna do that properly, we must also handle it in serveClientBlockedOnList and that would be ugly.

@yossigo what do you think?"
499215123,6929,oranagra,2020-10-04T07:26:17Z,"I don't like the fact that we use `0` which is the same as `LIST_HEAD`
it is ignored since `target` is NULL, but maybe we want to change `LIST_HEAD` etc to start from 1, and/or used some `LIST_NONE` constant.

Also, maybe we want to pass some struct? so that other places can just pass a single NULL? not sure about that."
499215924,6929,oranagra,2020-10-04T07:36:55Z,"i don't like too much the fact that one command simply calls another command's entry point.
although this situation existed in t_list.c before your changes.
i rather have some lmoveGeneric function, this will also reduce the need to call `getListPositionFromObjectOrReply` again after it was already called."
499232677,6929,yossigo,2020-10-04T10:50:31Z,"@oranagra I agree with that, I think it's useful to think of `LMOVE` as a new command and thus avoid breaking compatibility in cases where we don't have to. Slight code smell but better user experience."
499298444,6929,felipou,2020-10-04T23:07:42Z,"I thought about passing -1 since it's a signed int, maybe we could define LIST_NONE as -1?

The struct seems like a good option too, I'll experiment with that."
499298851,6929,felipou,2020-10-04T23:12:47Z,Since I'll be adding a lmoveGenericCommand already (to stop using rewriteClientCommandVector) we can just use that.
499298860,6929,felipou,2020-10-04T23:12:59Z,Ok!
499361506,6929,oranagra,2020-10-05T06:05:42Z,i suppose -1 is ok too
499978248,6929,felipou,2020-10-06T02:56:22Z,Done!
500770754,6929,oranagra,2020-10-07T06:40:34Z,"`r` (the last server spawned) is the master, we want to look into the command stats of the replica.
```suggestion
            $A config resetstat
```"
500771308,6929,oranagra,2020-10-07T06:41:51Z,"```suggestion
            assert_match {*calls=1,*} [cmdrstat brpoplpush $A]
            assert_match {} [cmdrstat blmove $A]
```"
500771419,6929,oranagra,2020-10-07T06:42:06Z,"```suggestion
            $A config resetstat
```"
500771540,6929,oranagra,2020-10-07T06:42:21Z,"```suggestion
            assert_match {*calls=1,*} [cmdrstat brpoplpush $A]
            assert_match {} [cmdrstat blmove $A]
```"
500773355,6929,oranagra,2020-10-07T06:46:23Z,"```suggestion
                    $A config resetstat
```"
500773466,6929,oranagra,2020-10-07T06:46:40Z,"```suggestion
                    assert_match {*calls=1,*} [cmdrstat blmove $A]
                    assert_match {} [cmdrstat brpoplpush $A]
```"
500773629,6929,oranagra,2020-10-07T06:47:05Z,"```suggestion
                    $A config resetstat
```"
500773727,6929,oranagra,2020-10-07T06:47:19Z,"```suggestion
                    assert_match {*calls=1,*} [cmdrstat blmove $A]
                    assert_match {} [cmdrstat brpoplpush $A]
```"
618199600,8687,oranagra,2021-04-22T08:38:58Z,"we can. the performance implication is negligible, but maybe it'll make the code clearer."
618211385,8687,oranagra,2021-04-22T08:54:18Z,"looks like i added it in https://github.com/oranagra/redis/commit/009bd41f310e4a09080393be5768e0093f8e61f4
probably because i saw that code calls `processPendingCommandsAndResetClient`
it can be removed."
618370993,8687,sundb,2021-04-22T12:50:37Z,"Should the minimum value be set to a larger value, too small a value may cause the user to be disconnected as soon as connected."
618514694,8687,yoav-steinberg,2021-04-22T15:38:14Z,"Currently a value of 0 means no limit. It makes sense to have a lower bound (something like 1MB), but then how will we handle the special case of no-limit?"
618888521,8687,sundb,2021-04-23T02:02:49Z,"Or add a policy? like```maxmemory-policy```.
```client_max_querybuf_len``` Will it also be deprecated? 
Maybe user only wants to limit query, not output, I can set the policy to ```volatile-client-query```."
619830066,8687,oranagra,2021-04-25T15:04:56Z,"this function is missing some top comment to describe the buckets mechanism.
maybe just something short with a reference to the doc in server.h"
619831596,8687,oranagra,2021-04-25T15:14:51Z,"let's mention that we do that **before** key eviction, per-command (after the previous client or command consumed client buffers)"
619831709,8687,oranagra,2021-04-25T15:15:19Z,are we sure we really need this in cron too?
619832078,8687,oranagra,2021-04-25T15:17:24Z,"we can't afford a loop on all clients in INFO.
but this can be either moved in some way to CLIENT LIST, or a new CLIENT subcommand."
619833195,8687,oranagra,2021-04-25T15:25:29Z,"we should certainly improve. skipping the wasted first 14 buckets is a must. 
i think something simple, elegant and easy to understand is preferable."
619833397,8687,oranagra,2021-04-25T15:26:52Z,"+1 (IIRC my suggestion), let's do that."
620899628,8687,yoav-steinberg,2021-04-27T06:22:20Z,"This was a debugging tool I added, note that `mem_usage_sum` is calculated per bucket just for debugging. The first question is do we even need this (after we're done debugging). If not I'll just delete the whole thing. If we do want it then I'll think where best to put it. WDYT?"
620900483,8687,yoav-steinberg,2021-04-27T06:24:03Z,"> +1 (IIRC my suggestion), let's do that.

yes, It was your suggestion."
620918982,8687,yoav-steinberg,2021-04-27T06:58:40Z,"We need it in the cron in order to make sure the other (non client eviction) stats are also updated.
There are also edge cases where a normal client has large buffers but is marked as `CLIENT_NO_EVICT` and has no activity on it anymore. Then the user turns off this flag but no new commands are executed and the write event never happens. In this case we need the cron in order to put the client into some bucket."
620939936,8687,yoav-steinberg,2021-04-27T07:31:44Z,done.
620940049,8687,yoav-steinberg,2021-04-27T07:31:56Z,removed.
620940267,8687,yoav-steinberg,2021-04-27T07:32:13Z,done.
620940371,8687,yoav-steinberg,2021-04-27T07:32:24Z,done.
621125234,8687,yoav-steinberg,2021-04-27T11:38:39Z,"Added skipping of first 14bits and added new high buckets (2GB,4GB,+8GB). This seems good enough for me.
There's a still a comment in the code about the 2 layer bucketing idea, I'll archive it in this PR and remove it from the code once we feel ok with the current implementation."
621190278,8687,oranagra,2021-04-27T13:07:32Z,"maybe drop a hint in the comment about this for future reference..
i.e. you already did, but i think it may be better to improve it."
621191907,8687,oranagra,2021-04-27T13:09:30Z,"i suppose we don't need it.
if we do, then a DEBUG sub-commend is the right place.
the other alternatives of a new CLIENT sub-command, or an additional field in CLIENT LIST, are not desired IMHO since this is detail about internal implementation that may change some day."
621226588,8687,yoav-steinberg,2021-04-27T13:48:50Z,Done.
621331825,8687,yoav-steinberg,2021-04-27T15:36:13Z,"done, please review it."
621876558,8687,oranagra,2021-04-28T07:10:22Z,"i'd rather use assert_equal and assert_range in separate lines.
the difference is that when they fail, we see the value (the assert proc gets it as an argument, and not just a boolean).
also, it could be nice to add an `if {$::verbose}` that will print these, so that we know how close we usually get to the threshold, and see if we need to tune it."
621878043,8687,oranagra,2021-04-28T07:12:38Z,"all `puts` must be inside a `$::verbose` condition.
normally, when the tests run in parallel by multiple runners, you don't want them to print anything to stdout on their own (instead they send messages to the parent to print on their behalf)."
623046565,8687,yoav-steinberg,2021-04-29T13:22:12Z,"my bad, forgot to remove it."
623046709,8687,yoav-steinberg,2021-04-29T13:22:22Z,done.
625866829,8687,yoav-steinberg,2021-05-04T15:10:00Z,moved to `debug client-eviction` and removed the iteration over all clients.
631176817,8687,oranagra,2021-05-12T15:58:03Z,i suppose you left this debug print by mistake? or temporary to be trimmed later?
631600014,8687,yoav-steinberg,2021-05-13T06:37:57Z,"Yes, my mistake. Fixed it."
631911131,8687,madolson,2021-05-13T15:46:59Z,"https://github.com/redis/redis/blob/unstable/src/networking.c#L1684, can we name this better. I don't want to have two separate things be referred to as ""protecting clients"""
631912628,8687,madolson,2021-05-13T15:49:07Z,evictClients() ?
650515207,8687,oranagra,2021-06-13T12:00:27Z,"maybe `evict-disable`? or `evict-protect`?
```
a special value of -17 (OOM_DISABLE) to disable oom killing entirely for that task
```"
651730783,8687,yoav-steinberg,2021-06-15T12:15:34Z,I'll change to `no-evict`. Sounds reasonable?
651732350,8687,yoav-steinberg,2021-06-15T12:17:50Z,:+1: 
652748100,8687,oranagra,2021-06-16T14:29:48Z,"one of the benefits (or side effects) of this flag, was that we skip searching the list.
maybe add a listNode pointer in the client so we don't need an O(n) search?"
652750430,8687,oranagra,2021-06-16T14:32:13Z,"i'm not sure if this is not already documented somewhere (i don't read docs), but if not, then maybe the fan-out / fan-in design should be documented here?"
652758091,8687,oranagra,2021-06-16T14:40:23Z,"I think you need to also declare these variables as `redisAtomic`.

we need some comment somewhere explaining how this works with io threads, and all the eventual consistent idea.
if this is gonna be at the head of the next function, maybe you need some cross references (one here)"
652765527,8687,oranagra,2021-06-16T14:47:55Z,"```suggestion
    /* Update client mem usage bucket only when we're not in the context of an IO thread */
```"
652771358,8687,oranagra,2021-06-16T14:54:02Z,i suppose we need to collapse the rest of the flags (rather than leave 29 empty.
653310728,8687,yoav-steinberg,2021-06-17T07:43:18Z,Right. Note that the previous code was also inefficient because we still search in the pending reads list. I decided to remove this for now and do O(n) just to make sure we can safely know if we're in an IO thread context without relying on flags. I'll improve this later. Good point.
653341874,8687,yoav-steinberg,2021-06-17T08:24:50Z,"This will cause ""blame"" mess. I think it's better not to collapse but rather re-use the space next time we need a flag. Note that using an enum would have solved this issue."
653366962,8687,oranagra,2021-06-17T08:56:01Z,"ok, so let's put some placeholder line here to make it visible that 29 is free.
this line should somehow stand out (maybe by being shorter, or have no comment)"
654905272,8687,oranagra,2021-06-20T09:21:41Z,"```suggestion
     * the strings themselves are not counted because they aren't stored per client */
```"
655906907,8687,yoav-steinberg,2021-06-22T06:16:10Z,"Thanks for finding the typo, committed a fix. "
687837047,8687,yoav-steinberg,2021-08-12T15:24:16Z,done.
687857527,8687,yoav-steinberg,2021-08-12T15:43:33Z,done
688190277,8687,sundb,2021-08-13T01:47:50Z,Forget release bucket_info.
690094853,8687,yoav-steinberg,2021-08-17T07:09:17Z,"Thanks.
Fixed."
692185298,8687,oranagra,2021-08-19T14:51:13Z,"maybe we can resolve it at runtime with some formula, i.e. when we come to use it, and it's !=0, we clamp values lower than 1m to 1m"
692185414,8687,oranagra,2021-08-19T14:51:19Z,p.s. This config is currently undocumented in redis.conf.
692186535,8687,oranagra,2021-08-19T14:52:32Z,"```suggestion
    } else if(!strcasecmp(c->argv[1]->ptr,""client-eviction"") && c->argc == 2) {
```"
692253561,8687,oranagra,2021-08-19T15:46:13Z,"did you do? any reason not to do now?
if we don't do, let's at least convert it to a block comment 8-)"
692272428,8687,oranagra,2021-08-19T16:08:01Z,i think you're missing a similar call in tracking.c (see `client_tracking_redirection`)
692281705,8687,oranagra,2021-08-19T16:15:52Z,did you do?
692287070,8687,oranagra,2021-08-19T16:19:52Z,"we call this (beforeNextClient) function again there, right?
so if someone adds more jobs in this this (beforeNextClient) function, it'll automatically be covered?

```suggestion
    /* Skip the client processing if we're in an IO thread, in that case we'll perform
       this operation later (this function is called again) in the fan-in stage of the threading mechanism */
    if (io_threads_op != IO_THREADS_OP_IDLE)
        return C_OK;
```"
692295472,8687,oranagra,2021-08-19T16:26:18Z,"did we discuss these?
in theory, argv_len_sum is about string sizes, not memory (due to a limitation, or actually a performance constraint. see the comment you moved to getClientMemoryUsage).

in the past i see i added `zmalloc_size(c->argv)` explicitly, if you wanna avoid calling zmalloc_size, maybe just add `argc*sizeof(robj*)` in the place where we use it, instead of storing it to the argv_len_sum?

if we chose not to do that, maybe at least update the doc comment about that field (both server.h and the detailed one in getClientMemoryUsage)."
692309145,8687,oranagra,2021-08-19T16:41:24Z,"@guybe7 FYI, new sub-command"
692310217,8687,oranagra,2021-08-19T16:42:57Z,"```suggestion
    size_t list_item_size = sizeof(listNode) + sizeof(clientReplyBlock);
```"
692313120,8687,oranagra,2021-08-19T16:47:13Z,"i suppose you need to revert this and the related changes, otherwise you may get it a second time when you rebase."
692314036,8687,oranagra,2021-08-19T16:48:30Z,did you mean to add `unit/client-eviction` to the list of tests in test_helper.tcl and forgot?
692328747,8687,oranagra,2021-08-19T17:09:21Z,better add a short top comment on these explaining what they do (for faster reading)
692412354,8687,oranagra,2021-08-19T19:14:17Z,first assert is a leftover?
692413608,8687,oranagra,2021-08-19T19:16:22Z,this is not a very realistic test (mget of one huge key). i assume it was the other way around and was changed in order the make the test predictable?
693488529,8687,yoav-steinberg,2021-08-22T11:40:15Z,"Did it but didn't have any tests yet.
Added tests now."
693566965,8687,yoav-steinberg,2021-08-22T22:34:50Z,Right done. Added test.
694559770,8687,yoav-steinberg,2021-08-24T07:04:12Z,I already rebased. If I'll need to rebase again before the final merge then I'll handle it during the rebase.
694560988,8687,yoav-steinberg,2021-08-24T07:06:16Z,"You mean `all_tests`? Thought it scanned the dir, apparently not. I'll add it to the list."
694622129,8687,yoav-steinberg,2021-08-24T08:23:16Z,"right, thanks."
694630104,8687,yoav-steinberg,2021-08-24T08:28:55Z,"I think this could have been a `GET` command and doesn't need to be `MGET`. The idea is to have many clients with big output buffers. 
What do you mean ""not a very realistic tests""?"
694677847,8687,yoav-steinberg,2021-08-24T09:25:09Z,Fixed: added `argc*sizeof(robj*)` where needed (please review).
694681237,8687,yoav-steinberg,2021-08-24T09:29:31Z,"> we call this (beforeNextClient) function again there, right?
so if someone adds more jobs in this this (beforeNextClient) function, it'll automatically be covered?

correct"
694691253,8687,yoav-steinberg,2021-08-24T09:42:50Z,Checked and updated comment accordingly. We still need `freeClientsInAsyncFreeQueue()`.
695514717,8687,oranagra,2021-08-25T08:16:31Z,"the typical case of `KEYS *` like scenario that cases mass eviction is a burst of MGETs filling the output buffer.
i think this is typically a lot of MGET calls on many key by many clients.
so i just commented that IIRC when this test was initially created (added the tests before the code to fix them), it was a more typical case, and it was change to be something that's easier to test (considering we know the actual problem can be triggered by one command on a single key too).

just a random comment, we can dismiss it."
696550803,8687,yoav-steinberg,2021-08-26T11:45:19Z,"Ok, I understand. What's important to me here is the ""lots of clients"" and less the ""lots of keys"". I agree that this can be a bit closer to the typical case but for now I'm leaving it as is."
696553620,8687,yoav-steinberg,2021-08-26T11:49:35Z,"> maybe we can resolve it at runtime with some formula, i.e. when we come to use it, and it's !=0, we clamp values lower than 1m to 1m

This is fine, but before implementing I'd like to propose another idea of using a negative value as a percentage of `maxmemory`. This way we can have some default of 5% for example?"
696571261,8687,oranagra,2021-08-26T12:15:53Z,"we have that mechanism in https://github.com/redis/redis/pull/7911, but i'm not sure we wanna have it here too.
i.e. there it's just doing some push back, and here it'll cause disconnection of clients.
so maybe for nicer backwards compatibility, this new feature should be off by default?"
697539914,8687,yoav-steinberg,2021-08-27T15:40:25Z,"@oranagra See last commit:
* Cap to a minimum
* Add `maxmemory` percentage option (+test)
* `redis.conf` doc"
698272612,8687,oranagra,2021-08-30T07:53:20Z,"you'll need to rebase and find a way to resolve this, the memory config infrastructure is now unsigned.
maybe we'll need to add a flag MEMORY_PERC, and actually support a notation like `10%` rather than rely on negative number and document that?"
698273856,8687,oranagra,2021-08-30T07:55:16Z,no need to warn IMHO.
699298472,8687,yoav-steinberg,2021-08-31T12:59:58Z,"The problem with that is that our config system performs its parsing and validation upon update and then stores the value in some global var under the `server` struct. So once the data is stored we don't have any more metadata (like the `%` notation or flag) to know how to use it.
The only other possible option instead of using a negative value is having two config variables `maxmemory_clients` and `maxmemory_clients_p`? Probably sounds familiar from somewhere...

So three options (my preferred is bold):
* Have `maxmemory-clients` and `maxmemory-clients-p`
* **Use a negative value and a custom numericConfigSet for percentages**
* Skip the idea of using percentage for `maxmemory-clients`"
699856322,8687,sundb,2021-09-01T05:32:54Z,"Truncation may occur in 32 bits, max of `maxmemory` is `ULLONG_MAX`.
"
700089567,8687,sundb,2021-09-01T10:34:42Z,"I run test on MacOS, keys evict will be triggered after execution here, causing the test to fail when `client_eviction` is `true`.
On macOS the max memory will be 10574672 bytes, while in ubuntu it is 9676648 bytes.

MacOS:
```
# keys eviction was triggered twice.
mem_used: 10574672
evict: 1
stat memory: 3080256
mem_used: 10541872
evict: 2

# First trigger of client eviction
15569:M 01 Sep 2021 18:23:24.331 * Evicting client: id=6 addr=127.0.0.1:55904 laddr=127.0.0.1:21111 fd=14 name= age=0 idle=0 flags=N db=9 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=16890 argv-mem=0 multi-mem=0 obl=16752 oll=5 omem=491640 tot-mem=525944 events=r cmd=mget user=default redir=-1
```
"
700213611,8687,sundb,2021-09-01T13:29:10Z,"I think calc  `maxmemory_clients_actual` can be a separate method, and if it returns 0, we can eliminate the need for the while loop in `evictClients`."
700815889,8687,yoav-steinberg,2021-09-02T07:22:25Z,I see. But why is `maxmemory` an `unsigned long long`? Shouldn't it be a `size_t`. How can I have more than 4g mem on 32bit?
700817102,8687,sundb,2021-09-02T07:24:11Z,"Yes, I don't understand why `maxmemory` is `unsigned long long` either."
700824034,8687,oranagra,2021-09-02T07:33:05Z,"i don't know.. maybe historical reasons, but i think it's safer to keep it this way."
700845768,8687,yoav-steinberg,2021-09-02T08:01:13Z,Added range check. I think we should change to `size_t` in the near future as part of 7.0.
700922491,8687,yoav-steinberg,2021-09-02T09:41:19Z,:+1: 
700975584,8687,yoav-steinberg,2021-09-02T10:59:21Z,"This might be an edge case. Can you run the same tests but with the following patch applied?
```diff
diff --git a/tests/unit/maxmemory.tcl b/tests/unit/maxmemory.tcl
index 7d55998fb..0bc0e4b6d 100644
--- a/tests/unit/maxmemory.tcl
+++ b/tests/unit/maxmemory.tcl
@@ -1,5 +1,5 @@
 start_server {tags {""maxmemory"" ""external:skip""}} {
-    r config set maxmemory 10mb
+    r config set maxmemory 11mb
     r config set maxmemory-policy allkeys-lru
     set server_pid [s process_id]
``` 
"
701542751,8687,sundb,2021-09-03T02:31:55Z,Tested fine after changing to 11m.
701737094,8687,yoav-steinberg,2021-09-03T09:17:07Z,thanks. fixing.
701769709,8687,yoav-steinberg,2021-09-03T10:06:12Z,"I rebased and added a flag enabling config values to optionally be a percent and store the value as a negative so we know to treat it as such. I'm not sure this is such a great idea, but it seems to be ok. Please review.
"
701863885,8687,sundb,2021-09-03T12:48:22Z,"Another `error writing ""sock11"": protocol wrong type for socket` error caused the test to fail under MacOS, ubuntu does not appear."
702248321,8687,sundb,2021-09-04T07:10:16Z,"```suggestion
        error ""no client named $name found with field $f""
```
`thow` is supported after `tcl8.6`, whereas we require `tcl8.5`."
702248449,8687,sundb,2021-09-04T07:11:19Z,Here's another one.
702374876,8687,oranagra,2021-09-05T06:33:02Z,"i suggest to keep INTEGER_CONFIG and MEMORY_CONFIG (don't rename them),
so you don't end up modifying all the numeric config lines (unnecessary conflicts with other PRs)"
702908854,8687,yoav-steinberg,2021-09-06T13:37:35Z,"thanks, fixed."
702909054,8687,yoav-steinberg,2021-09-06T13:37:53Z,:+1: 
702923390,8687,yoav-steinberg,2021-09-06T14:00:54Z,"Very weird. Looks like a MacOS kernel bug: http://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/
I'll adopt the regex accordingly."
702952747,8687,yoav-steinberg,2021-09-06T14:48:10Z,":+1: 
Fixed."
703131216,8687,sundb,2021-09-07T02:18:33Z,"I run test: `./runtest --single unit/client-eviction --stop --loop --only ""client evicted due to percentage of maxmemory""`
This test fails easily(whether it's macos or ubuntu), I print out `$e` which is empty, then when I try to add more small strings of wirte and flush operations after it, the test doesn't fail.
```suggestion
        catch { 
            $rr write [join [list ""*1\r\n\$$maxmemory_clients_actual\r\n"" [string repeat v $maxmemory_clients_actual]] """"]
            $rr flush
            
            for {set j 0} {$j < 100} {incr j} {
                after 1
                $rr write [join [list ""*1\r\n\$1\r\n"" ""v""] """"]
                $rr flush
            }
        } e
        assert {[write_err_exception $e]}
```"
703484436,8687,oranagra,2021-09-07T12:55:03Z,"I don't think we have to have an alias, maybe just move these to the top instead of the other ones. 
It's true that they don't have a proper prefix, but what's the point of having a badly named alias and a proper name that's not really used? 
If we don't move them, maybe add a comment here explaining why they're here. "
704292017,8687,yoav-steinberg,2021-09-08T10:32:09Z,"Thanks, I see the issue. 
I wonder why it fails, the `flush` should verify the write completed and the write does fail, I see it evicted the client in the logs. I'll investigate a bit since I don't want to add the extra writes without understanding this..."
704650130,8687,oranagra,2021-09-08T17:56:57Z,"First, your change seems to affect all groups (including binary), please fix.. 

Secondly, for alpha, are you sure we want that? 
I'm not sure what did Salvatore choose to add many other (printable) chars, I assume some of them can expose issues, that why I only filtered one char in tat range recently. 
Which char gave you trouble, and why? 
Maybe for your purpose we wanna create a new group, rather than modify the old one? 
"
704997887,8687,yoav-steinberg,2021-09-09T06:14:54Z,"> First, your change seems to affect all groups (including binary), please fix..

Thanks, fixed.
> 
> Secondly, for alpha, are you sure we want that?
> I'm not sure what did Salvatore choose to add many other (printable) chars, I assume some of them can expose issues, that why I only filtered one char in tat range recently.
> Which char gave you trouble, and why?

I wanted to generate client names and not fuck up my `CLIENT LIST` parsing code. I saw there's a function for only alpha(+digits) random str but its implementation didn't make sense.

> Maybe for your purpose we wanna create a new group, rather than modify the old one?

That makes sense, but then I'll modify the old one and create a new group called `printable` which is what the old group should have been called. And fix the code accordingly. Do you want me to do this cleanup?"
705096730,8687,oranagra,2021-09-09T08:15:41Z,"Seems OK, unless there are tons of places using `alpha`, in which case maybe we should find another name rather than rename the current one"
705117753,8687,yoav-steinberg,2021-09-09T08:41:54Z,turns out there are over 20 places...So I'm not sure it's great to do this rename. Don't have a good name for my new one. I'll try `simplealpha`.
705129453,8687,yoav-steinberg,2021-09-09T08:56:45Z,"Wanted to have good names, but you suggested blame noise, so tried to compromise. Anyway I'll use the original naming."
705242299,8687,yoav-steinberg,2021-09-09T11:33:25Z,"I changed most of the tests to just verify the client was evicted as expected instead of detecting a socket error. This is more robust as I saw in the logs that everything actually works fine it's just that the `write` somehow succeeds without throwing an error even though the server does the eviction.
Anyway it's much more stable now. 
If you find anything else let me know.."
706774636,8687,oranagra,2021-09-12T07:10:03Z,"this needs to be updated with the percentage config.
also, maybe mention it in the top comment."
707026638,8687,yoav-steinberg,2021-09-13T06:00:41Z,"thanks, done."
714038432,8687,yossigo,2021-09-22T15:03:51Z,nit: missing `void`.
728647778,6891,oranagra,2021-10-14T05:34:36Z,"these days we also have the ""everything"" group"
728648189,6891,oranagra,2021-10-14T05:35:40Z,"so if someone does `INFO default commandstats`, he'll get just default, and no commandstats?"
728648881,6891,oranagra,2021-10-14T05:37:16Z,"if someone asks for `INFO memory memroy` he'll get it twice.
which i suppose is no big deal."
753852427,6891,oranagra,2021-11-21T20:49:07Z,"you can't modify a module API (has to be backwards API / ABI compatible).
modules will still need to call this function multiple times (unless we add a new API)"
753853055,6891,oranagra,2021-11-21T20:55:36Z,"```suggestion
    char* defSections[] = {""server"", ""clients"", ""memory"", ""persistence"", ""stats"", ""replication"", ""cpu"", ""modules"", ""errorstats"", ""cluster"", ""keyspace""};
```"
753853148,6891,oranagra,2021-11-21T20:56:21Z,"```suggestion
        for (int i = 0; i < sizeof(defSections)/sizeof(*defSections); i++){
```"
753853247,6891,oranagra,2021-11-21T20:57:02Z,"```suggestion
            for (int i = 0; i < sizeof(defSections)/sizeof(*defSections); i++){
```"
753853519,6891,oranagra,2021-11-21T20:59:56Z,"these excessive allocations and frees are an overhead.
maybe we can use a dict that works on plain char*?"
753854179,6891,oranagra,2021-11-21T21:06:04Z,"i don't like to repeat that list, or the logic. maybe we can find a better way?

disclaimer: i don't know that sentinel info command that well.
what does it do?
just forwards the call to redis's INFO and adds a `sentinel` section?
what's special of the 4 sections mentioned here (server, clients, cpu, stats)?
are these the only sections supported by SENTINEL info?

if i understand it correctly, i wanna propose this:
1. extract the code that generates the new dict and two booleans in server.c to a new function, one that will be used by both infoCommand and sentinelInfoCommand.
2. in sentinel, after calling it, purge any unknowns section names.
3. if the `all` or `everything` flags are set, just add the 4 default sections (server, clients, cpu, stats)
4. call genInfoString and avoid passing the 2 booleans.

will that do the trick?"
762214476,6891,hwware,2021-12-03T20:10:33Z,"Hey oran, your understanding is right. I have extracted the code that generates the two dicts from server and sentinel and moved it to genInfoString, it should be a cleaner code now. Please take a look. Thank you"
762214835,6891,hwware,2021-12-03T20:11:15Z,Changed the dictionary so now we don't need a sds variable to find in the dictionary.
762558245,6891,oranagra,2021-12-05T12:53:42Z,"I think you misunderstood me, or maybe i wasn't clear or my instructions were not valid.

I didn't mean that the logic that creates the dict should be moved from `infoCommand` into `genRedisInfoString`, and everyone just calls it.
what i meant was to extract that code to a new function, one that returns a dict.
then `infoCommand` calls that new function and passes it to `genRedisInfoString` and `sentinelInfoCommand` calls that new function to, then sanitizes it's output before calling `genRedisInfoString`,

i think `genRedisInfoString` should still take a dict and two booleans.
this will avoid the code duplication you had in your previous commit (parsing user request), and still keep the logic of parsing the user request and generating the output string separate.

is there anything wrong it that approach which lead you to what you did?
"
763123508,6891,hwware,2021-12-06T15:40:34Z,"I understand what you're saying, I think what you're saying is good. I'll change it to that. The reason for adding the logic to `genRedisInfoString` was that with that approach the default sections array then would not be needed and just default could've been added to the dictionary.
Also for the if statement at the end of `genRedisInfoString` which generates the info for the modules sections, should we assume that there was only one argument for the infocommand for example ""info mudulesection"" or do we want it for multiple sections too?"
763128498,6891,oranagra,2021-12-06T15:45:44Z,"i think we want it to support multiple sections.
so `RedisModuleInfoCtx` will contain that dict rather than just one string, and `RM_InfoAddSection` will search that dict instead of doing string compare."
767484583,6891,oranagra,2021-12-13T08:02:20Z,"why don't we use ""all"" here?"
767487825,6891,oranagra,2021-12-13T08:08:22Z,"this solution won't take ""sentinel"" in any other argv position (or detect that ""all"" / ""default"" was used).
once again, why not take my advise of having the function that populates a dict and returns too booleans, and then this method will trim all elements from that dict except for the few it allows??"
767490659,6891,oranagra,2021-12-13T08:12:54Z,"again, why not extract this code to a separate function that returns a dict and two booleans?
then genRedisInfoString will take this input, but it means in between them the sentinel can modify it."
767492689,6891,oranagra,2021-12-13T08:16:13Z,we need to pass the entire dict to `modulesCollectInfo` not just argv[1]
775255878,6891,oranagra,2021-12-26T15:31:19Z,"some styling fix, and a better function name.
```suggestion
dict *genInfoSectionDict(client *c, const char *source, int *all_sections, int *everything) {
```
please also add a comment describing what this function does, and its input and outputs (especially important when you have output arguments, and it's not clear who's responsible of releasing things)."
775256289,6891,oranagra,2021-12-26T15:34:45Z,"IIRC, this is not what we agreed.
we agreed that sentinel will get the dict this method returns and trim undesired sections from it.
i.e. even if we used `server.sentinel_mode` here to define a different set of default sections, we still need to trim undesired sections that the user explicitly defined (sentinel only support a very specific set of sections).

not sure what you attempted to do with the string compare with ""sentinel"" maybe i'm missing something."
775256329,6891,oranagra,2021-12-26T15:35:20Z,"styling, the `*` is next to the variable name.
```suggestion
    dict *section_dict = dictCreate(&stringSetDictType); /* Set to add the subsections to print */
```"
775256362,6891,oranagra,2021-12-26T15:35:49Z,"styling (fix in other places too)
```suggestion
    } else {
```"
775256539,6891,oranagra,2021-12-26T15:37:31Z,"i don't think we should pass `c`.
maybe pass `argv+1` and `argc-1` (so that it's possible to pass `NULL, 0` in debug.c"
775256709,6891,oranagra,2021-12-26T15:38:55Z,indented too much
775256914,6891,oranagra,2021-12-26T15:40:24Z,"i don't understand these string matching.
to the best of my understanding from the design we discussed, the only string matching that should have been here is for `all`, `default` and `everything` (to set the output flags)."
775257401,6891,oranagra,2021-12-26T15:45:33Z,"why are we aborting when current_client is NULL?
we do still wanna log the server info..."
775257475,6891,oranagra,2021-12-26T15:46:01Z,why not just pass the two booleans forward?
775258617,6891,oranagra,2021-12-26T15:57:36Z,"don't we need to lowercase the module name too?
or use case insensitive dict (like #9984)"
775258750,6891,oranagra,2021-12-26T15:59:14Z,i think we need `&& !everything`
776465946,6891,hwware,2021-12-29T19:25:53Z,Addressed the style.
776467241,6891,hwware,2021-12-29T19:30:27Z,Addressed the style.
776467893,6891,hwware,2021-12-29T19:32:23Z,Addressed the style.
776999907,6891,oranagra,2021-12-31T12:53:24Z,"didn't we say that passing some empty dict is better here?
i.e. the code is not a time critical code, so there's no down side of another allocation or extra call to `genInfoSectionDict`.
on the other hand if this leads to some code path that's not normally executed (not covered by the test suite), who doesn't have a check for a null dict (e.g maybe module.c) it'll blow up"
777000000,6891,oranagra,2021-12-31T12:54:07Z,shouldn't this be `&section`?
777000399,6891,oranagra,2021-12-31T12:56:36Z,"how come this is the only change n that function?
the code below still refers to `c`?
i now realize you pushed a partial commit that doesn't work.
i'll stop the review. let me know when ready."
779814744,6891,hwware,2022-01-06T19:39:13Z,"Hi Oran, Yes, we agreed with here to use an empty dict. But when I do coding practice, I found creating an empty dict makes thing complex. 
Because the second parameter is 1 which means ""all"", then in our code genRedisInfoString function (server.c), it has the short circuit statement:  **if (all_sections || (dictFind(section_dict,""server"") != NULL))**
. It means even we only pass a NULL as parameter in the **genRedisInfoString(NULL,1,0)**; it does not have harmful to this function.  
This is why I change mind to pass NULL instead of passing an empty dict, Do you agree with this idea? Thanks.
"
779817022,6891,hwware,2022-01-06T19:42:55Z,"Sorry, Oran, I do not get your point here. I think keeping the current condition is fine. And I test here, we could pass any parameter here, including everything. Thus, sorry I have no idea why we need && !everything. Thanks"
779822087,6891,hwware,2022-01-06T19:51:52Z,"Here, I use sdstolower(full_name) lower module name."
779839928,6891,hwware,2022-01-06T20:19:02Z,"Hi Oran, I want to explain why I add a fake part ""input-modules"" here. 
Below are the output results when user inputs 5 different cases.
![image](https://user-images.githubusercontent.com/51993843/148446007-13eb5585-44b8-4152-b012-c43a01b89041.png)

You can find if user inputs are ""info"", ""info default"", ""info modules"", the variable out_all = 0 and out_everything = 0.  
We have no way to difference between ""info"" and ""info modules"". Thus I add a fake ""input-modules"" as an indicator.
Otherwise, we need to change the genInfoSectionDict input parameter to add another int* out_default.   
Current solution is based on the discussion result between us a few days ago. Thanks
"
779843382,6891,hwware,2022-01-06T20:25:23Z,@oranagra  Now codes are changed based on our discussion a few days ago. And CI is passed. Please take sometime to take a look.  Thanks
780758945,6891,oranagra,2022-01-09T09:57:55Z,"i'm afraid we'll miss some check in some `if` and that this code will not be covered by the test suite.
since this is a crash report code, i don't think performance matters, and i'll feel better passing an empty dict."
780759921,6891,oranagra,2022-01-09T10:05:44Z,"maybe i'm wrong.
i.e. this code is already only reachable if someone asked for `everything || modules`, or a specific section that was not found, so i guess the current code is ok.

i.e. if user passed `everything` or `modules`, then we'll get here with an empty section list and skip the section name based filter. and if the user passed a specific section, we do the filter by it's name."
780760315,6891,oranagra,2022-01-09T10:09:32Z,"yes, but you only lowered the `full_name` (module + section).
the other part of the `if` is on `ctx->module->name` which should also be lowered.

unless we'll use a case-insensitive dict hash + compare (e.g. dictGenCaseHashFunction)"
780761758,6891,oranagra,2022-01-09T10:22:06Z,"i see the problem.
we actually have two sections for `modules`.
one is for the module list, printed by the genRedisInfoString and included by default, and the other is the module generated sections (not included by default, but is added by either `everything`, or `modules` args).

i think it will be clearer (and maybe also less code), if we change the default section list to include `module_list` instead of `modules`.
then the code in genRedisInfoString that generates the module list will depend on this section name (it'll still emit `# Modules` to be backwards compatible.
but when the user asks for ""modules"" we'll treat this as a request for the module generated sections."
780784045,6891,oranagra,2022-01-09T13:48:29Z,"```suggestion
```"
780784123,6891,oranagra,2022-01-09T13:49:27Z,"```suggestion
```"
780792058,6891,oranagra,2022-01-09T14:58:34Z,"no need for malloc, just keep it on the stack"
780792419,6891,oranagra,2022-01-09T15:01:20Z,"```suggestion
/* Dict hash function for null terminated string. */
uint64_t dictCStrHash(const void *key) {
```"
780792548,6891,oranagra,2022-01-09T15:01:55Z,"```suggestion
/* Dict compare function for null terminated string. */
int dictCStrKeyCompare(dict *d, const void *key1, const void *key2) {
```"
780792888,6891,oranagra,2022-01-09T15:04:48Z,"```suggestion
Dict for null terminated C strings
dictType stringSetDictType = {
```"
780793128,6891,oranagra,2022-01-09T15:06:51Z,"```suggestion
static void addInfoSectionsToDict(dict *section_dict, char **sections, int len) {
```"
780793265,6891,oranagra,2022-01-09T15:08:04Z,"```suggestion
/* Create a dictionary according to the user input or call function 
 * The input parameter **argv indicate the 2D array which could includes multiply string,
 * and argc indicates the 2D array length
 *
 * Another two parameter *out_all and *out)everything will be set value in this function based 
 * on the argv parameter.
 *
 * The return value will be the dictionary for genRedisInfoString function
 */
```"
780793702,6891,oranagra,2022-01-09T15:11:12Z,"once again, i think sentinel must sanitize the returning dict (i.e. remove any unknown section from the dict before calling `genRedisInfoString`), and not induce any changes on this function.
in any case, if the user types `INFO replication`, you need to delete that entry from the dict, right? so why bother changing the default?"
780793871,6891,oranagra,2022-01-09T15:12:37Z,"what's ""info""? do we have an `INFO info`?
i don't see any reason to handle `argc == 1` differently than the loop on all arguments."
780794225,6891,oranagra,2022-01-09T15:15:28Z,"according to my proposal, this would be:
```suggestion
    if (!server.sentinel_mode && (all_sections || (dictFind(section_dict,""modules_list"") != NULL))) {
```
and `modules_list` will be added to the default sections."
780794594,6891,oranagra,2022-01-09T15:18:24Z,"if you follow my advise, and remove have sentinel sanitize the section list before calling this function, you will not need the sentinel check here, and in any other sections in this function.
(of course it should avoid passing the all or everything flag, and instead just set a static list of sections in the dict)
```suggestion
    if (all_sections || (dictFind(section_dict,""memory"") != NULL)) {
```"
780794970,6891,oranagra,2022-01-09T15:21:55Z,"i think we should go here on `INFO everything`, `INFO modules`, and any case where a requested section was not found (i.e. the number of emitted sections is lower than the number of requested sections)
```suggestion
    if (everything || dictFind(section_dict,""modules"") != NULL || sections < dictSize(sections_dict)) {
```"
780795002,6891,oranagra,2022-01-09T15:22:08Z,"```suggestion
```"
780795085,6891,oranagra,2022-01-09T15:22:44Z,"```suggestion
                                  everything || dictFind(section_dict,""modules"") != NULL ? NULL: section_dict,
```"
780795106,6891,oranagra,2022-01-09T15:22:52Z,"```suggestion
```"
780795149,6891,oranagra,2022-01-09T15:23:06Z,"```suggestion
```"
781468300,6891,hwware,2022-01-10T18:58:50Z,Addressed
781469423,6891,hwware,2022-01-10T19:00:31Z,Addressed
781469766,6891,hwware,2022-01-10T19:01:06Z,Addressed
781471479,6891,hwware,2022-01-10T19:03:42Z,Addressed
781472545,6891,hwware,2022-01-10T19:05:27Z,Addressed
781488472,6891,hwware,2022-01-10T19:30:15Z,Addressed
781576817,6891,hwware,2022-01-10T21:43:18Z,Addressed
782271960,6891,hwware,2022-01-11T15:42:19Z,"Address, I update the code to robj *argv[1]; "
782403784,6891,hwware,2022-01-11T18:02:31Z,Update codes: add module_list in default section list 
782404207,6891,hwware,2022-01-11T18:03:07Z,Addressed
782404257,6891,hwware,2022-01-11T18:03:12Z,Addressed
782405640,6891,hwware,2022-01-11T18:05:09Z,"Sorry, Oran. Here I am a little bit confused why you think ctx->module->name should be lowered as well. 
When I do test, I do not find the reason and I am not familiar with the Module part. Could you please give me one example on this. Thanks."
782406454,6891,hwware,2022-01-11T18:06:22Z,I add a dict instead of using a NULL in the genRedisInfoString function according to your comments
782539471,6891,oranagra,2022-01-11T21:30:03Z,"RM_CreateDataType says
```
 * * **name**: A 9 characters data type name that MUST be unique in the Redis
 *   Modules ecosystem. Be creative... and there will be no collisions. Use
 *   the charset A-Z a-z 9-0, plus the two ""-_"" characters. A good
 *   idea is to use, for example `<typename>-<vendor>`. For example
 *   ""tree-AntZ"" may mean ""Tree data structure by @antirez"". To use both
 *   lower case and upper case letters helps in order to prevent collisions.
```
so a module name could have upper case characters, and in INFO we wanna do case-insensitive matching for the section names, so the module section (in case the module didn't explicitly define a section name) could be uppercase."
782540908,6891,oranagra,2022-01-11T21:32:14Z,"```suggestion
    decrRefcount(argv[0]);
```"
782541110,6891,oranagra,2022-01-11T21:32:38Z,"```suggestion
    decrRefcount(argv[0]);
```"
782542646,6891,oranagra,2022-01-11T21:35:22Z,"now that i think of it, maybe we wanna return this also if the `modules` section was requested.
i.e. this `if` will check both `modules` and `module_list`"
786123832,6891,daniel-house,2022-01-17T15:46:23Z,"Since the module name is case sensitive, there appears to be a risk that a case-insensitive search on the module name could generate false matches.  Is that acceptable behavior?"
786150160,6891,oranagra,2022-01-17T16:21:29Z,"you're right. but since info sections are case-insensitive, i think i'd rather return two sections in case there are two modules with similar name, rather than not return a section because the INFO command was used with non-exact case."
797409290,6891,oranagra,2022-02-02T09:23:06Z,"these 4 segments are nearly identical, let's run them in a for loop, each time using a different input, with the same validations."
797409956,6891,oranagra,2022-02-02T09:23:56Z,"i think it's enough to test just one section (we're testing the infrastructure, not the actual per section implementation)"
797411298,6891,oranagra,2022-02-02T09:25:25Z,"same here, it's enough to test just one pair of sections, and an additional one test of a combination of `all` and a section.
i.e. two segments of tests instead of 4."
797412755,6891,oranagra,2022-02-02T09:27:12Z,"it's enough to test just a few fields.
i.e. version, memory, sentinel, and cmdstats."
797414491,6891,oranagra,2022-02-02T09:29:20Z,"same here, this could be shorter, similar to the above, just expecting a different outcome for cmdstat"
797414680,6891,oranagra,2022-02-02T09:29:33Z,"let's combine this into the same test that passes no arguments in a for loop

"
797415007,6891,oranagra,2022-02-02T09:29:57Z,this can be unified with the one that takes `all` in a for loop
797416113,6891,oranagra,2022-02-02T09:31:14Z,"i'd drop these two last segments.
enough to test `cpu`, sentinel` (not supported), and maybe `commandstats` (not in default)"
797418415,6891,oranagra,2022-02-02T09:34:04Z,"test that we didn't get some stat twice.
i.e. we can check that this fails: `*used_cpu_user*used_cpu_user*"
797422833,6891,oranagra,2022-02-02T09:39:19Z,"lets make this shorter, it is enough for each of these tests to include just one non-module info field or section name"
800073705,6891,yossigo,2022-02-05T16:25:20Z,"How about doing the default sections dict static and re-use it, instead of re-generating it every time?"
800075143,6891,oranagra,2022-02-05T16:39:00Z,"you mean only in the case of info with no args, right? 
Since when the user provided any inputs, we could modify the dict. 
Also, we'll need to make sure to skip this optimization from sentinel since it modifies that dict. 
And we'll need to add some trick to avoid releasing it when done. 

Do you think these complications are worth it? "
800079066,6891,yossigo,2022-02-05T17:13:24Z,"@oranagra Yes, I was only referring to the default list. It's probably a good idea this doesn't introduce a regression, because some clients use `INFO` quite extensively."
800096777,6891,oranagra,2022-02-05T20:26:06Z,@yossigo please have a look at my last commit.
801071954,6891,madolson,2022-02-07T21:26:50Z,"```suggestion
static dict *cached_default_info_sections = NULL;
```"
801072197,6891,madolson,2022-02-07T21:27:09Z,"```suggestion
    distCStrKeyCompare,        /* key compare */
```"
801091850,6891,madolson,2022-02-07T21:56:47Z,"This uses sdsFree so it's not just for CStrings, also you only store SDS in this dictionary anyways. So it's not very clear why this isn't just an SDSSetDictType. 

You could also further use the existing case insensitive compare functionality to avoid the sdstolower() called later."
801406920,6891,oranagra,2022-02-08T09:09:13Z,"the entries in that dict are sds, but the lookup (hash / compare) callbacks work with C string.
let's document that better...

regarding case-insensitive compare, it came up before, i don't recall why we didn't go there.
let's try again (using `dictGenCaseHashFunction`, and `strcasecmp`)

@hwware can you look into it?"
801509008,6891,oranagra,2022-02-08T11:00:40Z,"never mind.. had a few spare minutes and took care of it, don't understand / recall why it wasn't done before."
557455789,8242,oranagra,2021-01-14T14:57:26Z,"i would like to avoid creating a new file for that one function.
i think it roughly fits into anet.c. the majority of the fds we need to modify are sockets, and i don't think it's a big violation to put there a generic function and use it on other file descriptors.
come to think of it, we already do that using `anetSetBlock` on pipes."
557456684,8242,oranagra,2021-01-14T14:58:32Z,"i suppose this change isn't needed, right? (although it doesn't cause any harm either)"
557458146,8242,oranagra,2021-01-14T15:00:23Z,looks like you added a trailing white space here.
557479954,8242,panjf2000,2021-01-14T15:28:31Z,Done.
557480910,8242,panjf2000,2021-01-14T15:29:42Z,"This file might be opened in redis server as well as sentinel, so it's reasonable to enable this flag here."
557481086,8242,panjf2000,2021-01-14T15:29:52Z,Fixed.
557484529,8242,oranagra,2021-01-14T15:34:37Z,"`sentinel` and `cluster` are two different things.
when redis runs in sentinel mode it'll never reach this code.

one can argue (being right), that it's better to have this flag (may come in hand one day in the future), but currently it's not needed.
i don't feel strongly either way. just making a point."
557494308,8242,panjf2000,2021-01-14T15:47:30Z,"I see your point now, but let's keep this flag here just in case, and it has no harm for that."
559169659,8242,oranagra,2021-01-17T11:47:45Z,"Styling.. As far as i can tell, redis always has braces in loops.
```suggestion
    do {
        r = fcntl(fd, F_GETFD);
    } while (r == -1 && errno == EINTR);

    if (r == -1 || (r & FD_CLOEXEC))
        return r;

    flags |= FD_CLOEXEC;

    do {
        r = fcntl(fd, F_SETFD, flags);
    } while (r == -1 && errno == EINTR);
```"
559170387,8242,oranagra,2021-01-17T11:54:24Z,"@panjf2000 there are never any modules in Sentinel.
maybe we can consider to make the call to `moduleInitModulesSystem` from `main` conditional (can be moved to the `else` of `initSentinel`.
however, if we do that, we may need to at least zero some of the globals it initializes.

I suppose there's no harm in keeping this change though. maybe it'll come in useful in the future."
559171321,8242,oranagra,2021-01-17T12:01:17Z,"i think it would be nicer to check for `instances == NULL`, and document that that's how to use this recursion.
if we can't then maybe split this method so that the wrapper is exposed in the header (with no arguments), and the main body here is only used by the wrapper internally.
@hwware please review too"
559172515,8242,oranagra,2021-01-17T12:11:45Z,"This function (`prepareForShutdown`) is only called before `exit`, so there's no leak possible.
The comment says that the only reason we close the listening socket, so for faster restarts (not sure why).
other than that, redis counts on the OS to clean up after it, so i think we should remove that new block of code (it's comments are certainly false)"
559172803,8242,oranagra,2021-01-17T12:14:25Z,i would like to move that file into the `tests/sentinel/tmp/` folder.
559173285,8242,oranagra,2021-01-17T12:18:04Z,"lets `cat` that file into the stdout, this way we know the output on github actions and such environment (where we only have the standard output).
something like `exec cat $filename` would do"
559174642,8242,oranagra,2021-01-17T12:29:29Z,"did you mean `ls -l` each fd in a separate line?
what's `3`? do you mean the access to `/proc/<pid>/fd` itself? it won't always be in 3.
seems to me that this would hide a leak of fd `10`, and even `17` and `71`?
"
559175144,8242,panjf2000,2021-01-17T12:34:53Z,Why should we change it from `flags = r | FD_CLOEXEC` to `flags |= FD_CLOEXEC`?
559175442,8242,oranagra,2021-01-17T12:37:10Z,"ohh, sorry. my bad."
559176087,8242,panjf2000,2021-01-17T12:42:15Z,"In that case, the code of `sentinelReleaseInstanceConnections` function should also be erased?"
559176262,8242,panjf2000,2021-01-17T12:44:04Z,"Actually, this file would be created in that path by the current code:
WARNING: sentinel test(s) failed, there are leaked fds in sentinel,
        see output file: /data/c/redis/tests/sentinel/tmp/sentinel_fd_leaks for more details."
559177721,8242,panjf2000,2021-01-17T12:56:06Z,Done.
559179752,8242,panjf2000,2021-01-17T13:12:41Z,"'^[0|1|2|3]$' will fix the leftover fds, as for the `/proc/<pid>/fd`, any concise way to exclude it?"
559181104,8242,panjf2000,2021-01-17T13:24:02Z,Then let's keep this function for future uses.
559182072,8242,panjf2000,2021-01-17T13:31:16Z,"I was worried about creating an endless loop if the `ri->slaves` or `ri->sentinels` is `NULL`, so change the condition from `instances == NULL` to `master == 1`."
559184708,8242,panjf2000,2021-01-17T13:53:21Z,"After a second thought, I think it would be better to split this function, and expose no arguments to server.c, after all that the server.c doesn't need to know about the `sentinel.masters`."
559185380,8242,panjf2000,2021-01-17T13:57:54Z,"If closing sockets makes the restart faster, isn't it (sentinelReleaseInstanceConnections) supposed to achieve the same effect on a restart of sentinel?"
559187376,8242,oranagra,2021-01-17T14:13:45Z,"i think that only applies for listening sockets.
the commit that added it isn't very specific 80e87a461a7d2ee54430127bdb6ac014778c54c5 but i suppose it means that then new process that comes up is able to bind successfully immediately.
i don't think it applies for other (non listen) sockets"
559187444,8242,oranagra,2021-01-17T14:14:19Z,"so, yeah, if that's the only use for the new `sentinelReleaseInstanceConnections` let's drop that function too."
559188253,8242,panjf2000,2021-01-17T14:19:25Z,Done.
559188508,8242,oranagra,2021-01-17T14:21:17Z,"only way i can think of is to use `ls -l` and match that `*/proc/*/fd` pattern.
so either that (and improve the regex), or we can maybe keep the current code and add some comment.

```
# fd 3 is meant to catch the actual access to /proc/pid/fd, in case there's an fd leak by sentinel,
# it can take 3, but then the access to /proc will take another fd, and we'll catch that
```"
559188692,8242,oranagra,2021-01-17T14:23:03Z,"so now that we removed the call in prepareForShutdown, we can remove this function "
559188843,8242,oranagra,2021-01-17T14:24:25Z,i suppose we no longer need to print the file name if we print it's content
559189143,8242,panjf2000,2021-01-17T14:26:43Z,I would prefer to keep the current code because the `notify.sh` is an extremely simple shell script where the fd 3 is typical for this kind of shell script to open for its `/proc/self/fd` and there's only a very small probability that it will open another fd for it.
559189906,8242,panjf2000,2021-01-17T14:32:23Z,This output file could be for users to persist the fd leaks result in their local environment in case they miss the std output (by any chance)?
559190171,8242,oranagra,2021-01-17T14:35:02Z,"but then they'll miss the WARNING message above, and this message which states the path to the file anyway."
559190540,8242,panjf2000,2021-01-17T14:37:52Z,I was talking about the case that it's not their first run for this test suite and already know where this file will locate.
559190848,8242,panjf2000,2021-01-17T14:40:11Z,I thought we are gonna keep this function for future uses?
559191136,8242,panjf2000,2021-01-17T14:42:46Z,"By the way, just being curious, isn't really there anywhere in the project where you need to close these pipes in the current redis server? It just keeps these pipes alive during the whole server runtime?"
559193358,8242,oranagra,2021-01-17T15:00:05Z,"considering we don't expect this test to ever fail, unless some regression happens, no one will know about the existence of that file, until the CI will fail the day after the offensive PR is merged.
and then we'll get the full stdout in the output."
559193629,8242,panjf2000,2021-01-17T15:02:24Z,So we just comment out these code lines in the present?
559193672,8242,oranagra,2021-01-17T15:02:50Z,"AFAIU what we wanted to keep for future use is the close on exec flag even for parts of redis that never do exec. (cluster and modules).
specifically because it doesn't add much code (one flag in an existing call, or one new line)
but i don't see a reason to keep dead code for future use (specifically because it's so easy to write).

and yes, redis never closes these pipes."
559193925,8242,oranagra,2021-01-17T15:05:14Z,"maybe we have a misunderstanding.. for some reason github shows as if i commented on the entire block.
i mean to just remove the last line (the one that prints the file name).
the WARNING and `cat` should be kept, and i think that's sufficient."
559194458,8242,panjf2000,2021-01-17T15:08:40Z,I meant to only comment out the lines that prints the file path and switch it on when we need it.
559194506,8242,panjf2000,2021-01-17T15:08:52Z,See the latest commit.
559194910,8242,panjf2000,2021-01-17T15:12:10Z,"Never mind, it doesn't indeed seem to have much value, removed it."
559195071,8242,panjf2000,2021-01-17T15:13:43Z,Understood.
560403676,8242,oranagra,2021-01-19T18:46:10Z,"Sorry. My bad for completely forgetting there are other OSes. 

We have quite a few places that use `uname` in the TCL code to skip tests. 
So we can skip registering that bash script. (instead of the change in the bash file).
 
I don't have an objection for that change in the bash script, but I rather an early exit than the indentation you added. 
And I don't think the `echo` is useful, I rather drop it. 

I'll look into the CI issue.. "
560566820,8242,panjf2000,2021-01-19T23:23:24Z,"It did seem to make a little more sense to do this in TCL rather than bash.

Since this PR is already merged in, then I just open a new PR for it?"
560590507,8242,panjf2000,2021-01-20T00:25:48Z,Done in #8364
722187208,9601,tezc,2021-10-05T12:25:53Z,Overflow/underflow causes UB (integer overflow is undefined behavior)
722187893,9601,tezc,2021-10-05T12:26:42Z,"If value is negative, it's UB. (Negative integer shift)"
722188850,9601,tezc,2021-10-05T12:27:55Z,Unaligned load. Bitshift version is good enough. Compilers recognize pattern and generate single MOV instruction(if CPU is ok with unaligned load). 
722190811,9601,tezc,2021-10-05T12:30:21Z,"Left shift of unsigned char promotes variable to ""int"". Variable can become negative in that case(UB), further shift is UB etc."
722191454,9601,tezc,2021-10-05T12:31:12Z,"Left shift of unsigned char promotes variable to ""int"". Variable can become negative in that case(UB), further shift is UB etc."
722192080,9601,tezc,2021-10-05T12:31:57Z,Unaligned load is UB. Bit shift version generates same instructions with GCC or Clang.
722192579,9601,tezc,2021-10-05T12:32:36Z,buf is used after it goes out of scope.
722194104,9601,tezc,2021-10-05T12:34:27Z,"Unaligned load. Fix is to copy variables to a temporary aligned array, execute operation and store back variables to the destination. Makes code a bit uglier though. "
722195241,9601,tezc,2021-10-05T12:35:52Z,hash(signed variable) is shifted beyond its size(UB) or becomes negative and shifted again (UB)
722195769,9601,tezc,2021-10-05T12:36:31Z,`when * 1000` and `when += basetime` can overflow (integer overflow is UB). 
722196604,9601,tezc,2021-10-05T12:37:32Z,I'm a bit confused here. Bit shift version looks same to me with pointer load or mempcy even for little endian architectures. 
722197949,9601,tezc,2021-10-05T12:39:14Z,There is memmove() call later. Looks like we call this function with s=NULL and len=0. memmove() is not supposed to be called with a NULL buffer even with len=0. 
722198906,9601,tezc,2021-10-05T12:40:28Z,Address sanitizer complains about leaks in sentinel. Added this function to call in prepareForShutdown().
722199525,9601,tezc,2021-10-05T12:41:12Z,"Small leak, address sanitizer complains"
722200650,9601,tezc,2021-10-05T12:42:34Z,Random write is an UB. 
722217118,9601,bjosv,2021-10-05T13:01:39Z,"Adding `-fno-omit-frame-pointer` normally helps to get better stack traces in the results, anything you have tried?"
722260959,9601,zuiderkwast,2021-10-05T13:48:55Z,"You're right, the bit shift version works for any endianness. It decodes little-endian `data` to local representation. The code you deleted is some handmade optimization only for little-endian machines that reads all bits together, but the bit shift version will compile to the same assembler AFAIK."
722916162,9601,tezc,2021-10-06T06:15:17Z,"Actually, I get pretty accurate stacktraces but maybe that's related to compiler version/arch I tried. I added that flag anyway, it might be helpful in another setup. "
722921490,9601,tezc,2021-10-06T06:25:51Z,"Yeah, bit shift version generates single MOV (for x86 at least) since ~ GCC 5. https://godbolt.org/z/GPT85Kc6E"
723145870,9601,oranagra,2021-10-06T11:26:12Z,"that's exactly the point i wanted to argue, we can write simpler code (or in this case actually more complex), and assume (or even verify that) a modern compiler will do the right thing, but i rather not assume these (at least not in places where it really matters, i.e. performance intense loops).
i would rather keep redis efficient (and correct) even if compiled on an odd / old compiler."
723182465,9601,oranagra,2021-10-06T12:17:39Z,"i think we need to improve `dump_server_log` in `tests/support/server.tcl` to also print the `stderr` file, otherwise we won't see the reports.

it's probably also a good idea to use something similar when `--dump-logs` isn't specified.
i.e. where `crashlog_from_file` is used."
723240017,9601,tezc,2021-10-06T13:09:20Z,"I don't know if performance matters here but some old/odd compilers will get a hit anyway. e.g They are falling into pointer load version before the fix and they won't able to emit single load after the fix. Just specific to this one, we may keep mempcy() version for little endian systems if you want. Looks like it's easier to optimize for compilers compared to bit shift one. (Trying it from goldbolt.org). Other option, not to fix at all :) "
723250091,9601,oranagra,2021-10-06T13:16:52Z,"could you explain what you did here (and in the other `if` below), i'm having hard time to follow.."
723258451,9601,oranagra,2021-10-06T13:22:22Z,"i think the first part of the comment you removed is still applicable (i.e. the part about Fast path vs vanilla algorithm), let's revive it."
723280535,9601,oranagra,2021-10-06T13:37:29Z,"this comment is outdated: (commenting on another line due to GH limitations)
```c
            /* Note: sds pointer is always aligned to 8 byte boundary. */
```
it was written in d866803818fb47a851e5730ccff634f993ce6f68 before f15df8ba5d and before the `USE_ALIGNED_ACCESS` check was added.
lets use this opportunity to drop it."
723284609,9601,oranagra,2021-10-06T13:40:18Z,"so Salvatore wrote an optimized path and made it run only on x86, and used an unoptimal one for ARM, and we're now making that optimized path a bit less optimized, but make it work for arm too.... right?

Salvatore bothered to make sure that code only runs on platforms in which it's safe, but the sanitizer warning is bothering us (with no real good reason)... maybe we can also just silence that warning specifically for that code block?

i don't mind keeping your change either, since doesn't seem your change would hurt performance.
i.e. we know most compilers will convert that memcpy to either a single load instruction on x86, or multiple ones on arm, and i suppose the later code in the loop will probably be using registers and not really accessing that temp variable...

anyway, my point is that if we wanna make that change i wanna make sure we prove it doesn't hurt performance at all.. did you do that?"
723305353,9601,oranagra,2021-10-06T13:58:31Z,"considering the address sanitizer is so much faster than valgrind, maybe we wanna run it in the CI workload (per PR), and hopefully stop leaks before they reach the daily workflow?
@yossigo WDYT?"
723308358,9601,zuiderkwast,2021-10-06T14:01:25Z,"Keep the memcpy then, since it's not unaligned. If we use unaligned access, it should be only within some ifdefs for archs that support it. I see that we have a macro which forbids it for certain archs known not to support it which is a bit backwards:

```C
#if defined(__sparc__) || defined(__arm__)
#define USE_ALIGNED_ACCESS
#endif
```
"
723317683,9601,zuiderkwast,2021-10-06T14:10:30Z,"... and if we want to run santitizers in builds, we should silence the warnings where we know it's safe. Is there any pragma or so to do that?"
723317877,9601,oranagra,2021-10-06T14:10:43Z,"in some way, this DEBUG SEGFAULT is attempting to mimic a real segmentation fault, and calling `raise` may behave slightly different (e.g. signal sender is the user space program and not the kernel).
would changing it to write to NULL (address 0 instead of -1) resolve the warning?
if not, maybe we can silence this warning somehow?

i'm probably just paranoid, and it's probably not a real problem to replace it with raise, but this is an example of a UB that's on purpose and we may wanna silence it instead of ""fixing it"".

@yossigo WDYT?"
723339745,9601,oranagra,2021-10-06T14:31:43Z,"just for the sake of discussion...

integer overflow is UB? this is BS!
can someone enlighten me on a single arch in which this would not work?

AFAIK multiplication, accumulation, and subtraction are always compiled to the same instruction (regardless of the signness of the variable).
ie. the sign only matters for comparison and division (and sign extension: r-shift, casting, etc)

and the claim is that signed integer overflow is UB, while unsigned integer overflow is not UB, right?"
723343246,9601,oranagra,2021-10-06T14:35:14Z,"i think the comment is still useful (explains which validation we do and which validation we can't do), let's bring it back."
723349381,9601,oranagra,2021-10-06T14:41:02Z,"again, a case were we're dismissing an optimization (which had a check to run only when it's safe) because modern compilers do that anyway, but i don't like to think redis is only targeted to these."
723379212,9601,oranagra,2021-10-06T15:10:08Z,"what a horrible bug.
i see (tested) that on x86 it behaves as ""expected"".
returned the correct result and even compiled to the same assembly as the fixed version (in both old and new compilers (which generated completely different assembly).
it also generates the same assembly as the fixed version on ARM.

do we know of any system on which it really produced a bug?
if it did, then this backported to older releases and mentioned in release notes (in which case we better move this fix to a separate PR)"
723386797,9601,oranagra,2021-10-06T15:18:06Z,"what did it complain on?

we don't bother to release memory on shutdown in redis (this slows down termination).
and valgrind searches for referenced memory, not unreleased.. 
so i'm curious to know what was the issue (and too lazy to reproduce and check)"
723388488,9601,oranagra,2021-10-06T15:19:57Z,@yossigo @hwware can you please assess the effects of this bug?
723389749,9601,oranagra,2021-10-06T15:21:16Z,let's discuss this after we conclude the discussion in rdbLoadIntegerObject
723391002,9601,oranagra,2021-10-06T15:22:29Z,let's discuss after we conclude the discussion in bitops.c and HLL
723397242,9601,oranagra,2021-10-06T15:29:04Z,"really? now any shift on a signed integer is UB?
this is BS, left shift doesn't care of the signness of the variable, or the content of the bits.
it could overflow and become positive or negative according to the contents of the bits, but what's undefined about that?

anyway, considering i know how this code is compiled to assembly, i don't see how this could have caused bugs.
i.e. it would move the bits to the upper part of the integer, possibly flip the bytes in BE, and then copy them.
let me know if you think i'm wrong."
723937672,9601,yoav-steinberg,2021-10-07T07:57:20Z,"My notes regarding UB for signed overflows:
- I'd like to propose defining Redis as ""only works on CPUs with 2's compliment"". If I understand [this](https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.70/autoconf.html#Integer-Overflow-Basics) correctly then this assumption is valid. This means we'll pass the `-fwrapv` argument to the compiler (both clang and gcc support this) and we'll rid ourselves of this pesky issue. I think any compiler optimizations based on signed integer overflow UB (like optimizing out `if (i + 1 > i)`) are only valid in cases the code is exceptionally badly written.
-  There might be some cases currently detected by the sanitizer where we should have used an unsigned value. I'm not sure there are such. For example the case above we know `value` might be negative but in that case it's safe to assume its top 40 bits are 1s since it's in the 24 bit range. So left shifting by 8 doesn't change the sign and doesn't produce an overflow. Passing `-fwrapv` would simply guarantee it does what we originally wanted it to do.
- There are cases in our existing code (like #8910) where we avoid signed overflow UB by creating extra checks which make the code ugly and less efficient. Having `-fwrapv` will avoid this, and we should fix those places in the code."
723957806,9601,tezc,2021-10-07T08:23:49Z,"```
__attribute__((no_sanitize(""undefined"")))
int calc( int a )
{
    return INT_MAX + 10000;
}
```


Looks like gcc and clang accept attributes for functions to surpress it."
723968410,9601,zuiderkwast,2021-10-07T08:36:59Z,"`__attribute__((no_sanitize(""undefined"")))`"
723980100,9601,zuiderkwast,2021-10-07T08:51:25Z,"Good idea @yoav-steinberg. The santitizer complains because the C standard doesn't assume anything about the representation. In ancient history, there were alternatives: ""one's complement"" and ""sign & magnitude"". In practice, it's BS though. Wikipedia on Two's complement:

> The first minicomputer, the PDP-8 introduced in 1965, uses two's complement arithmetic as do the 1969 Data General Nova, the 1970 PDP-11, and almost all subsequent minicomputers and microcomputers. "
724005075,9601,tezc,2021-10-07T09:22:13Z,"If -fwrapv used, I think no need to say whether Redis works with 2's compliment or not, compiler will generate correct code for any CPU if I'm not mistaken. AFAIK Linux uses -fwrapv and works everywhere :) 
"
724006380,9601,oranagra,2021-10-07T09:23:56Z,"unlike the unaligned pointer access, the majority of the changes in this PR for integer overflows seem to me that are ok to be merged (they don't introduce any ugly code or efficiency issues), and the main point of the lengthy discussion for was to rant about it being BS (because it's fun to discuss).

I do like the idea of getting rid of the ugly code in #8910 and the few other places that do that.
however, i don't like to depend on specific compiler flags that may be missing in some odd/old compilers (unless we use these flags only to silence the sanitizer in it's CI build).
So the question is if we drop these changes and add a compilation flag just for one compiler, if we're not taking a risk that the other compilers will decide to mess up the perfectly good code, just because in theory it relies on UB.

am i right? if i am, then we can't do that."
724011526,9601,oranagra,2021-10-07T09:30:26Z,"nice, so we can keep using the (theoretically more efficient on some old compilers) unaligned access code on x86, and just silence the sanitizer warning.

however, in bitops.c, this PR currently changes the implementation on ARM to be more efficient (not fall back to the loop that processes just one byte at a time), i'd like to try to keep that."
724014592,9601,zuiderkwast,2021-10-07T09:34:22Z,It's also possible to disable certain kinds of UB warnings by adding `-fno-sanitize=shift` after `-fsanitize=undefined` to disable this warning.
724032575,9601,yoav-steinberg,2021-10-07T09:57:54Z,">  So the question is if we drop these changes and add a compilation flag just for one compiler, if we're not taking a risk that the other compilers will decide to mess up the perfectly good code, just because in theory it relies on UB.
> 
> am i right? if i am, then we can't do that.

I think you are right, but I'm still for defining Redis as ""requires two's complement implementation of signess"" and therefor any compiler that doesn't assume that (and assumes UB  or something else instead) is not compatible with Redis. This, of course, is purely theoretical as there are no such (relevant) compilers. And if Redis ever crashes or doesn't pass tests or sensitization on such a setup, we'll know why.
"
724051660,9601,tezc,2021-10-07T10:25:50Z,"Sanitizer will complain with attempts to write out of process' address space. So, 0, NULL or -1 fails as well. We can surpress with this attribute @zuiderkwast mentioned."
724097766,9601,tezc,2021-10-07T11:39:32Z,"I don't know if it can cause any problem for relevant systems. Looks like it generates same code for all major compilers/systems.

 Just as an example this one would be a bug, a system where int is 2 bytes, result would be wrong(even if it wraps). Also, usual suspects like Ardunio, AVR generates different code (https://godbolt.org/z/63Gao8sY5) but they are microchips. "
733168943,9601,tezc,2021-10-20T21:44:47Z,"I added these but I have no prior tcl experience, could you review tcl file changes? "
733171584,9601,tezc,2021-10-20T21:49:36Z,"Actually, I'm confused with existing if checks. I believe conditions inside the if checks overlap with each other. So, I did it in a non-overlapping way but let's revert the change, it's hard to understand already and I don't want to cause a regression. 

Current change, just does a uint64_t cast, this should behave same way before this PR and prevent integer overflow."
733174860,9601,tezc,2021-10-20T21:55:33Z,Added back
733344909,9601,yoav-steinberg,2021-10-21T06:05:39Z,"This seems weird to me. Why not raise a segfault explicitly? Writing to address -1 wouldn't necessarily do this, or am I wrong?"
733346203,9601,yoav-steinberg,2021-10-21T06:08:31Z,see https://github.com/redis/redis/pull/9601/commits/2cd2bd33ae2b020fde06d10aaa41d53985ba928d#r733344909
733366692,9601,tezc,2021-10-21T06:48:23Z,"Yes, I agree with you. Compiler can even delete this line as this is clearly an UB (Checked a few compilers and they don't do though).

Related discussion : 
https://github.com/redis/redis/pull/9601#discussion_r722200650"
735132322,9601,oranagra,2021-10-24T15:09:10Z,"@yoav-steinberg i was concerned that using `raise` could in some way be different than a plain access violation, and since the purpose of this sub-command is to test the crash log by simulating an access violation, i think the best thing we can do is to actually do just that.

if we're absolutely sure there's no difference between the two (from the perspective of the signal handler, on any / all platforms), i don't mind switching.

on the other hand, if for some reason the compiler decides to delete that code, there's no real harm to redis (and the tests will fail), so as long as we silence the warning i guess we're good."
735133180,9601,oranagra,2021-10-24T15:15:53Z,"do these sometimes exists in stdout and other times exist in stderr?
if not, i think it's a better idea to split it into two functions, i.e. `crashlog_from_file` and `sanitizer_warnings_from_file` or alike."
735133653,9601,oranagra,2021-10-24T15:20:15Z,"maybe we need to update the comment? either just delete it, or mention the casting is needed to solve the UB?"
735136049,9601,oranagra,2021-10-24T15:42:18Z,"@tezc i see you reverted this, do you have any feedback as to what was the trigger for that change?"
735149044,9601,tezc,2021-10-24T17:41:32Z,"I ran same tests with Valgrind, it was clean. Also, when we clean memory on exit, sanitizer was okay, didn't show a leak. So, it proves that those memory allocations were still ""reachable"". I considered this a false positive. (Address sanitizer is supposed to show ""unreachable"" memory only).

I've realized that sanitizer doesn't complain about this issue with ""libc"", so I've changed sanitizer builds to use ""libc"" to avoid these kind of false positives. "
735161945,9601,tezc,2021-10-24T19:45:28Z,The comment is still accurate. Added a line for the cast.
735162210,9601,tezc,2021-10-24T19:48:37Z,Prints to stderr only. Splitted functions.
735297253,9601,yoav-steinberg,2021-10-25T06:42:40Z,"@oranagra I agree. If that's the purpose better do a real access violation and let our tests verify it's actually working. Looking at https://stackoverflow.com/questions/45124728/how-do-i-force-my-code-to-universally-seg-fault it seems accessing address 0 might be the best option, but if we have a test for this which passes on all relevant OSs/compilers with -1 then that's good too."
735370006,9601,oranagra,2021-10-25T08:28:06Z,"actually, on a second look, we don't have that test (yet).
the test i remembered is one located in `tests/integration/logging.tcl`.
i see it tests the watchdog-period, and an explicit SIGABRT, but not DEBUG SEGFAULT.
and even that is skipped on all platforms except Linux and MacOs.
the reason is that not on all platforms we can generate a stack trace (i.e. not that not on all platforms we can generate a crash log, sometimes without a stack trace)
do we wanna take this opportunity to add another test there?"
735374359,9601,yossigo,2021-10-25T08:33:23Z,"Worth noting that at least on gcc 11.2 this also yields a warning:

```
debug.c: In function ‘debugCommand’:
debug.c:480:22: warning: writing 1 byte into a region of size 0 [-Wstringop-overflow=]
  480 |         *((char*)-1) = 'x';
      |         ~~~~~~~~~~~~~^~~~~
```"
735379436,9601,oranagra,2021-10-25T08:39:36Z,"@yossigo what do you suggest? is there a way to suppress that warning properly (on all compilers)? or do you think we should rely on `raise` (less effective for what we actually want to test)?

another alternative is to write some code that will confuse the compiler so it won't really know what address we write into at compile time (and silence it in the sanitizer)"
735389362,9601,yossigo,2021-10-25T08:51:20Z,"There is a way to suppress this on gcc with a `#pragma` but then clang will complain about it. I think we can just change this to a null pointer which will also suppress the warning and while technically still a UB, we could probably assume it does what is expected."
735393892,9601,tezc,2021-10-25T08:56:46Z,"I've seen compilers deleting writes to NULL addr. Btw, gcc should give same warning even it's NULL addr?"
735395475,9601,tezc,2021-10-25T08:58:40Z,"Changed it to NULL, gcc 10.2 gives a warning : 

```
Indirection of non-volatile null pointer will be deleted, not trap consider using __builtin_trap() or qualifying pointer with 'volatile'
```

Option 1:  __builtin_trap(). Looks like clang supports that as well. 
Option 2:  `*((volatile char*)-1) = 'x';` "
735401855,9601,yoav-steinberg,2021-10-25T09:06:38Z,How about making it `volatile` as suggested?
735403011,9601,oranagra,2021-10-25T09:08:06Z,"i think that if we're considering `__builtin_trap` we might as well use `raise`, that'll at least generate a SIGSEGV and not SIGILL."
735407225,9601,tezc,2021-10-25T09:13:06Z,`*((volatile char*)-1) = 'x';` suppresses warning for GCC. 
736245000,9601,tezc,2021-10-26T07:49:58Z,"GCC(trunk) gives another warning even for volatile solution  : https://godbolt.org/z/GxqYbe1vd

```
source>:10:4: warning: array subscript 0 is outside array bounds of 'volatile char[0]' [-Warray-bounds]
   10 |    *((volatile char*)-1) = 'x';
```

Another option : 

```
    char* p = mmap(NULL, 4096, PROT_READ, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    *p = 'x';
```

This one follows language rules, avoids compiler warnings and behaves equivalent to `*(char*)-1) ='x'; `
Hopefully :) "
736363959,9601,oranagra,2021-10-26T10:01:38Z,"wow.. that's a very long way to go trigger a signal 8-(
for a moment i was afraid it'll cause issues for `memtest_test_linux_anonymous_maps`, but that one is checking the `rw` flags.

i suppose we're looking too much into this.
i see that we have no chance to suppress the warnings, so i think i'd go with the `mmap` approach for debug.c, and with the `raise` approach for redisassert.c (the mmap approach looks too complicated to be put there).

but if anyone thinks otherwise, i'm also willing to stick to `raise` in both and forget about this concern."
736590314,9601,oranagra,2021-10-26T14:14:49Z,@tezc how long does such a run takes compared to a plain execution of `./runtest`?
736643355,9601,tezc,2021-10-26T15:04:59Z,"As nobody else has made a comment, I've made those changes.

 Just a single concern about mmap solution is portability. Hopefully, all operating systems implement mmap and flag combination we use. (I checked popular libraries how do they use mmap and I did in a similar way to provide max portability). "
736652454,9601,oranagra,2021-10-26T15:13:29Z,"seems safe to me

but we can also add the test i suggested [here](https://github.com/redis/redis/pull/9601#discussion_r735370006)
i.e. add a test that uses DEBUG SEGFAULT, and test that we got a SIGSEGV crash (and either only validate the stack trace part on linux/mac or not at all)"
737467592,9601,tezc,2021-10-27T13:29:08Z,"@oranagra Sorry, I missed this. No change in execution time. They can be added to PR CI as well if you want. UB sanitizer catches some of the leaks/use-after-free issues as well, so I suggest adding both."
737468195,9601,tezc,2021-10-27T13:29:44Z,Added a test for it
737706680,9601,oranagra,2021-10-27T17:45:20Z,"Ok, if there's nothing to lose, let's do that.. 
It'll catch leaks before they are merged, and there's a smaller chance valgrind will panic the next day"
741668979,9601,tezc,2021-11-03T07:30:59Z,"@oranagra I added sanitizers to PR CI (With same configs with regular PR CI : ./runtest --verbose --tags -slow).

I also realized we don't check exit code of Redis when we kill it. So, we were missing some sanitizer warnings that is printed on exit. I had to fix them and added checks to search log on exit for sanitizer errors, similar to valgrind build. Please take a look at last couple of commits."
741882591,9601,oranagra,2021-11-03T12:21:37Z,"these are kinda rare, i think we can keep relying on the daily CI for them."
741883568,9601,oranagra,2021-11-03T12:22:53Z,"is there any reason to keep the other `test-ubuntu-latest` job?
i was thinking we can just re-purpose the one ""per PR"" test job we have to do both testing and address (leak) sanitization.
is there any downside in that?"
741885408,9601,oranagra,2021-11-03T12:25:20Z,why do we need this optional? why not have that always?
741888913,9601,oranagra,2021-11-03T12:30:06Z,why not have that by default (when the build supports it)?
741890142,9601,oranagra,2021-11-03T12:31:43Z,"i think maybe we can just apply this change on the default execution (the last `else` in this chain),
but if not, please be aware that instances.tcl (cluster and sentinel tests) spawns severs on it's own (not using this code), see `exec_instance`"
741922400,9601,tezc,2021-11-03T13:13:14Z,"It's up to you. Sanitizers instrument code and may hide some bugs due to slower execution, different code generation etc. Ofcourse you can rely on daily CI for that, we still have default build and tests there. "
741925753,9601,tezc,2021-11-03T13:17:15Z,"Made it similar to valgrind setting, it checks logs for sanitizer errors when built with sanitizer only. Otherwise, it'll search logs unnecessarily. I can make it default if you are okay with that."
741931612,9601,tezc,2021-11-03T13:23:35Z,"What do you mean by ""when the build supports it"". If we enable it by default, it'll search sanitizer errors in the log even Redis is built without sanitizer instrumentation. I'm not sure if this is a problem though.(Just searchs stderr which is often empty I believe, so I expect it just adds slight performance cost). We can make it default."
741933227,9601,tezc,2021-11-03T13:25:17Z,"This is only required for corrupt_dump tests, so I added here only. Anyway, I'll set it by default."
741937792,9601,oranagra,2021-11-03T13:30:07Z,"the `--valgrind` argument is mainly to control the execution (`exec valgrind`), and in some places also skip tests that are too slow.
here we run a normal redis binary (which was built differently), i don't think we need that flag.
the stderr file is normally empty, i think the search in it is no overhead. so i prefer to remove the flag.

i may be a bit unhappy about the extra environment variable you add, but i suppose it doesn't do any harm, so all we need is a comment stating what it's for..."
741938840,9601,oranagra,2021-11-03T13:31:14Z,"ok, make it by default and add a comment stating what it's for..."
741940148,9601,oranagra,2021-11-03T13:32:38Z,"ok, we can keep both and maybe drop one later... 
i guess i'm just trying to save Microsoft some cache on CPU time (or care about global warming)"
741955366,9601,tezc,2021-11-03T13:48:07Z,"@oranagra Just to be clear, do you want `./runtest-moduleapi` here or not? "
741972586,9601,tezc,2021-11-03T14:04:52Z,done
741974132,9601,tezc,2021-11-03T14:06:28Z,"ok, got rid of the argument and made it look for sanitizer errors by default"
742042430,9601,oranagra,2021-11-03T15:11:18Z,"sorry i wasn't clear.
i meant that i don't think the undefined sanitizer should be executed in the PR CI.
I wanted the address sanitizer since it can find memory leaks before they cause failures in the daily CI.
but i think the UB sanitizer issues are rarer and we can skip that and rely on the daily CI.

regarding module tests, (in the address sanitizer) i do want them. and ideally i would have wanted cluster testss too, but they're just too slow."
742072710,9601,tezc,2021-11-03T15:40:05Z,"Okay. Removed ubsan from the CI.

Just fyi, `runtest --tags -slow` takes ~7 minutes. Cluster tests are ~13 minutes and sentinel tests are ~2 minutes : https://github.com/tezc/redis/runs/4079444886. 

Cluster tests can be added as another instance and it would extend CI time by ~6 minutes, just fyi. (Don't know if worth it)
"
742083226,9601,oranagra,2021-11-03T15:50:17Z,"i see [here](https://github.com/redis/redis/runs/4094541432?check_suite_focus=true) that the runtest part takes 5 minutes (with and without sanitizer takes the same time and they run in parallel).
if we'll add runtest-cluster and runtest-sentinel, we'll add them on the same build (sequentially), so the CI would take 20 minutes instead of 5.

the problem with these cluster and sentinel tests is that they run each of the units sequentially rather than in parallel to each one.. one day someone will have the time to fix that, but for now, i rather leave the CI fast (5 minutes)"
742091710,9601,tezc,2021-11-03T15:58:35Z,gotcha
742168628,9601,hwware,2021-11-03T17:18:48Z,"Hey @oranagra, this is a potential bug when the value of sentinel_election_timeout is larger than 2147483647. mstime_t is long long https://github.com/redis/redis/blob/f11a2d4dd764c996b2d0c0cb5abde13f2445b40c/src/server.h#L58.
When the value is sentinel_election_timeout is larger than 2147483647 election_timeout is set to sentinel_election_timeout then election_timeout value will be negative. So setting election_timeout to mstime_t makes sense to avoid the potential bug and to be consistent.
But I am not sure in what case the value of sentinel_election_timeout will be set to a value larger than 2147483647."
742376966,9601,hwware,2021-11-03T22:05:01Z,"This bug will cause the failover fail and keep getting delayed indefinitely. If sentinel_election_timeout is larger than 2147483647 then election_timeout will be negative.
Then the following condition will be true and the failover will be aborted.
https://github.com/redis/redis/blob/f27083a4a8a6682e391a533724c904c69852c0a0/src/sentinel.c#L4923"
742624450,9601,oranagra,2021-11-04T08:32:37Z,"According to Yossi it'll only happen when the user input is broken, and in that case it'll be immediately visible.
so not something to fuss about."
1565150106,13209,tezc,2024-04-15T03:47:15Z,"Sun: not sure if just using lpInsertInteger(.., HASH_LP_NO_TTL, ...) on the old lp would be faster."
1565150478,13209,tezc,2024-04-15T03:48:20Z,"sun: here could be a bottleneck, maybe we can add lpForEach with a callback method and use lpSkip to traverse lp internally, it will be much faster than three lpNext()."
1565150964,13209,tezc,2024-04-15T03:49:31Z,@sundb please take a look at these changes. 
1565152288,13209,tezc,2024-04-15T03:53:22Z,Github got confused and shows a huge diff for my commit here. Maybe looking it on git might help. It is better there. 
1568280230,13209,sundb,2024-04-17T06:15:46Z,forget to initialize hi->expire_time to EB_EXPIRE_TIME_INVALID  when hash is hashtable?
1568302097,13209,tezc,2024-04-17T06:39:30Z,ht does not use this field but probably it is better to match behaviors. Maybe we should delete `expire_time` variable in the iterator and read value from `hi->tpr` in `hashTypeCurrentFromListpack()` similar to what is happening in `hashTypeCurrentFromHashTable()`. 
1573085106,13209,tezc,2024-04-20T00:35:05Z,"added a comment, hope it is clear"
1574287348,13209,moticless,2024-04-22T07:49:56Z,"I think should follow similar naming convention between `listpack` and `HT`.
Maybe you can use `listpcakEx` instead. WDYT? 
We can leave this decision to the end of this PR."
1574287929,13209,moticless,2024-04-22T07:50:22Z,"It is expensive. You can respect `info->maxToExpire` and provide `nextExpireTime` in the same `while` loop. Something like:
```
    while (ptr != NULL) {
        ....
        if ((val != HASH_LP_NO_TTL) && ((uint64_t) val < info->now) && (info->itemsExpired < info->maxToExpire)) {
            server.stat_expired_hash_fields++;
            lpt->lp = lpDeleteRangeWithEntry(lpt->lp, &field, 3);
            ptr = field;
            info->itemsExpired++;
        } else {
            if (val != HASH_LP_NO_TTL && val < min)
                min = val;
            ptr = lpNext(lpt->lp, ptr);
        }
    }
    info->nextExpireTime = (min == LLONG_MAX) ? 0 : min;
```"
1576795893,13209,moticless,2024-04-23T19:32:22Z,"```suggestion
/* Returns 1 if expired.
 * Precondition: 'expireAt' was acquired from the listpackTTL structure. */
int hashTypeListpackIsExpired(uint64_t expireAt) {
    return expireAt != HASH_LP_NO_TTL && (mstime_t) expireAt < commandTimeSnapshot();
}

/* Returns listpack pointer of the object. */
unsigned char *hashTypeListpackGetLp(robj *o) {
    if (o->encoding == OBJ_ENCODING_LISTPACK)
        return o->ptr;
    else if (o->encoding == OBJ_ENCODING_LISTPACK_TTL)
        return ((listpackTTL*)o->ptr)->lp;

    serverPanic(""Unknown encoding: %d"", o->encoding);
}

/*-----------------------------------------------------------------------------
 * Hash type API
 *----------------------------------------------------------------------------*/

```"
1576887274,13209,moticless,2024-04-23T21:00:31Z,Why do we need `tptr` in the iterator? I think it is confusing and not being used.  `expire_time` is enough.
1577055923,13209,tezc,2024-04-24T00:33:55Z,"done, it is faster, for most cases"
1577536899,13209,moticless,2024-04-24T08:54:09Z,No need to have function freeHashObject(). We can call directly to hashTypeFree()
1577553539,13209,moticless,2024-04-24T09:05:51Z,"Note that most of this logic around upding `db->hexpires` was removed by [PR](https://github.com/redis/redis/pull/13230) (Please review it):
```
    /* Don't have to update global HFE DS. It's unnecessary. Implementing this
     * would introduce significant complexity and overhead for an operation that
     * isn't critical. In the worst case scenario, the hash will be efficiently
     * updated later by an active-expire operation, or it will be removed by the
     * hash's dbGenericDelete() function. */
```"
1577834509,13209,moticless,2024-04-24T12:54:12Z,"Why not merge both cases? The block of `(o->type == OBJ_ZSET && o->encoding == OBJ_ENCODING_LISTPACK)`
is included in the block of `(o->type == OBJ_HASH &&(o->encoding == OBJ_ENCODING_LISTPACK || o->encoding == OBJ_ENCODING_LISTPACK_TTL))`"
1577845649,13209,moticless,2024-04-24T13:01:50Z,Consider use Tuple instead of Pair. 
1577855220,13209,moticless,2024-04-24T13:08:08Z,maybe add big values no more than 2^48-1 to mimic TTL 
1578155260,13209,tezc,2024-04-24T16:05:09Z,"`tptr` points to last element. So, on `hashTypeNext()`, we do `fptr = lpNext(tptr)`. I'll check if I can make it more obvious. "
1578159133,13209,tezc,2024-04-24T16:07:21Z,"Just to be inline with others, I think we can keep it as it is. Other types have like `freeListObject, freeSetObject, freeModuleObject, freeStreamObject` etc.. "
1578161132,13209,tezc,2024-04-24T16:08:28Z,sounds okay to me. Are you suggesting it to both `OBJ_ENCODING_LISTPACK_EX` and `struct listpackEx` ?
1578168920,13209,tezc,2024-04-24T16:12:25Z,"These APIs have become a bit awkward. It is returning key, value pairs out of tuples. I feel like calling it lpRandomTuple() might be more confusing as it is actually returning pairs. "
1578195221,13209,moticless,2024-04-24T16:29:24Z,"If i recall correctly, it might be sufficient to use  `tptr` only as local var. "
1578196356,13209,moticless,2024-04-24T16:30:22Z,then maybe make it static function only for object.c
1580728051,13209,tezc,2024-04-26T09:10:44Z,"I find confusing to mix both zset and hash after introducing expiry. 
e.g. seeing ttl checks or `expired` variable in OBJ_ZSET's case. "
1580734143,13209,tezc,2024-04-26T09:16:03Z,"`struct listpackTTL` lives in t_hash.c (not exposed). To make `hashTypeFree()` static in object.c, we have to expose `struct listpackTTL`. 
I don't have strong opinion on anything anyway. Let me know if you prefer one over other. "
1582066145,13209,sundb,2024-04-28T09:05:41Z,"what about just adding new `o->type == OBJ_HASH && o->encoding == OBJ_ENCODING_LISTPACK_TTL` and keep the code about hash listpack with zset?
"
1582067340,13209,sundb,2024-04-28T09:09:56Z,"```suggestion
                serverAssert(!lpGetValue(p, NULL, &expireAt));
```"
1582070074,13209,sundb,2024-04-28T09:28:27Z,"we use snake style in redis.
```suggestion
        long long expire_at;
```"
1582072414,13209,sundb,2024-04-28T09:43:07Z,LGTM
1582075939,13209,sundb,2024-04-28T10:01:46Z,"it's better to add `b->hexpires` reference to it, otherwise when defragging the listpack, we can't know which db or db->expires the listpack is belong to. "
1582362228,13209,tezc,2024-04-28T19:55:03Z,"I copied it but it makes me doubt as well. I see there are bunch of mixed style examples in the unstable branch as well. If the most common is snake case, let's change our code for it. @moticless please ack so we can have consistent style for hfe code. 
"
1582363645,13209,tezc,2024-04-28T19:58:16Z,okay sure. How do you know it in case of dict? 
1582363806,13209,tezc,2024-04-28T20:00:02Z,I'm fine with it as long as we don't mix ZSET and TTL. I don't have a strong opinion though. 
1582458558,13209,sundb,2024-04-29T00:52:06Z,get it from the metadata of dict.
1582630581,13209,sundb,2024-04-29T07:19:01Z,"sorry, i misunderstood, the hfe ebuckets of the dict is for dict fields, so listpackTTL doesn't need it."
1585938026,13209,tezc,2024-05-01T06:33:47Z,"I added OBJ_ENCODING_LISTPACK_TTL case separately, let me know if you have some other preference."
1587056272,13209,moticless,2024-05-02T04:47:57Z,Most of the lines in this file is no more than 80 chars. Please try to avoid exceeding 100 characters in length.
1587059610,13209,moticless,2024-05-02T04:54:44Z,Line too long
1587104097,13209,moticless,2024-05-02T06:03:48Z,Internal hash data. I think we can hide this struct in t_hash.c. 
1587105727,13209,moticless,2024-05-02T06:06:12Z,If only used in t_hash.c then let's avoid exposing them.
1587110529,13209,moticless,2024-05-02T06:11:19Z,"We can make this function more generic `hashTypeIsExpired(uint64_t expireTime)`
Such that if it is not 0 and not `EB_EXPIRE_TIME_INVALID` then check the condition."
1587125914,13209,moticless,2024-05-02T06:28:20Z,We already have `min` value in our hands in the loop. Let's avoid from calling `hashTypeGetNextTimeToExpire`.
1587145720,13209,moticless,2024-05-02T06:48:54Z,"This part is common, applied inside and outside the loop. Maybe we can refactor the code such that it will be applied once at the end of the loop."
1587150753,13209,moticless,2024-05-02T06:53:49Z,"This part is common, applied inside and outside the loop. Maybe we can refactor the code such that it will be applied once at the end of the loop."
1587659370,13209,moticless,2024-05-02T13:42:32Z,I understand that you are going to change APIs. I will review it afterward.
1589929201,13209,moticless,2024-05-04T08:27:07Z,This code was copied from function `hashTypeSetExDone()`. Please refactor instead and let `hashTypeSetExDone()` call this function as well.
1589933995,13209,moticless,2024-05-04T08:47:54Z,"Please also add a description how expiry metadata will be attached OBJ_ENCODING_LISTPACK_TTL.
"
1589961015,13209,moticless,2024-05-04T10:52:37Z,You have function hsetfCheckTTLCondition(). See if you can refactor it for this condition.
1589961171,13209,moticless,2024-05-04T10:53:36Z,Make it static function and add braces for if-then-else.
1589961415,13209,moticless,2024-05-04T10:55:01Z,From here and below. Please arrange the commands such that the static/local functions at start and the commands are grouped at the end.
1589961525,13209,moticless,2024-05-04T10:55:35Z,Please make it static.
1589973640,13209,moticless,2024-05-04T12:01:58Z,"Is it agreed to return old value even if not override or created it? Even if was requested to get new value? If that is the case, then please clarify I with a proper comment. "
1589982139,13209,moticless,2024-05-04T12:58:40Z,"Please write a description to this function.
"
1589982979,13209,moticless,2024-05-04T13:01:27Z,Please write a description to this function.
1590484877,13209,sundb,2024-05-06T02:29:19Z,what about passing ebuckets(db->hexpires) instead of `db`?
1590485675,13209,sundb,2024-05-06T02:32:15Z,"@tezc can you move this struct into server.h in this PR, i saw that #13243 also added some interfaces for the access of this struct."
1590554111,13209,tezc,2024-05-06T05:28:48Z,it is already in server.h
1590562258,13209,sundb,2024-05-06T05:44:15Z,"sorry, i'm blind."
1590693389,13209,tezc,2024-05-06T08:26:23Z,"there are minor differences, maybe we should just leave as it is"
1590694360,13209,tezc,2024-05-06T08:27:26Z,I changed it silently :roll_eyes: 
1590820959,13209,tezc,2024-05-06T10:33:23Z,"yes, we return whatever exists in the field even if we decide not to override. Added the comment"
1590821569,13209,tezc,2024-05-06T10:34:06Z,this is needed for defrag
1590834506,13209,tezc,2024-05-06T10:48:44Z,I'll address this in a later PR
1590834589,13209,tezc,2024-05-06T10:48:51Z,I'll address this in a later PR
1590897518,13209,sundb,2024-05-06T11:36:19Z,"the schema is incorrect, please have a look #13238."
1590898073,13209,sundb,2024-05-06T11:37:00Z,i saw you fixed.
1590906493,13209,tezc,2024-05-06T11:46:22Z,I'll address this later with some other perf improvements. 
1590936853,13209,moticless,2024-05-06T12:17:37Z,"I am fine (I try to align to the file I am within. If it is a new file, I prefer camel-case.)"
1591729250,13209,sundb,2024-05-07T02:11:39Z,"this test failed in https://github.com/sundb/redis/actions/runs/8897338398/job/24635771987.
1. we can't guarantee `myhash` doesn't expire between `r hpexpire myhash 200 NX 1 field1` and `r hpexpire myhash 1000 XX 1 field1`.
2. we can't guarantedd `after 15` will not pass more than 100ms."
1591864282,13209,sundb,2024-05-07T06:13:53Z,might overflow.
1591865365,13209,sundb,2024-05-07T06:15:19Z,"please ignore, missed the range check above."
1591867329,13209,sundb,2024-05-07T06:17:35Z,Use getRangeLongFromObjectOrReply()?
1591878616,13209,sundb,2024-05-07T06:30:21Z,maybe we can use `memmove` to move these three entries in the future improvement.
1591904249,13209,tezc,2024-05-07T06:55:24Z,I was thinking about lpBatchInsert() which can be used appending to the tail as well but probably moving is good enough. 
1592429786,13209,moticless,2024-05-07T12:51:22Z,I think this comment is not very helpfull. The code speaks for itself.
1592439506,13209,moticless,2024-05-07T12:58:12Z,"Maybe when comment of a func becomes too long i think we should give general title to the function and destinct it with empty line from the rest of the description. Something like:
```
/* Randomly select count of key value pairs
 * 
 * Store result into 'keys' and 'vals' args. The order of the picked entries is 
 * random, and the selections are non-unique (repetitions are possible).
 * 'vals' arg can be NULL in which case we skip these.
 * 'tuple_len' indicates entry count of a single logical item. It should be 2
 * if listpack was saved as key-value pair or more for key-value-...(n_entries). */
```"
1592448597,13209,moticless,2024-05-07T13:04:51Z,"@tezc, you resolved it but i think that the logic hasn't changed."
1592461257,13209,moticless,2024-05-07T13:13:25Z,Forgot that now items are ordered.
1592487343,13209,moticless,2024-05-07T13:29:58Z,Lines are too long
1592884097,13209,moticless,2024-05-07T18:11:50Z,"You need to add here also a case for OBJ_ENCODING_LISTPACK_EX to release it as expected. Note, in case OBJ_ENCODING_HT it handles hash-fields with optional TTL inherently by callbacks of mstrHashDictType which knows how to release items from hash's private `ebuckets`."
1593013086,13209,moticless,2024-05-07T20:11:24Z,this is common code. Refactor it to be before if-then-else.
1593015190,13209,moticless,2024-05-07T20:12:55Z,nice
1593082011,13209,moticless,2024-05-07T20:52:59Z,If there are short if-then-elif-else conditions and one long then better get rid of the short ones at start and apply the long one out of if block.
1593253503,13209,tezc,2024-05-08T00:58:47Z,added
1593260862,13209,sundb,2024-05-08T01:14:35Z,"88 columns is not too long.
```suggestion
    if (o->encoding != OBJ_ENCODING_LISTPACK && o->encoding != OBJ_ENCODING_LISTPACK_EX)
```"
1593261347,13209,sundb,2024-05-08T01:15:18Z,what about moving this into object.c?
1593262170,13209,sundb,2024-05-08T01:16:51Z,what about changing to assertion and move into `else`?
1593340631,13209,sundb,2024-05-08T03:34:42Z,"we should make sure that hsetfSetFieldAndReply() takes with a reply, but not here.
if it doesn't enter, i think it can be changed to the following.
```suggestion
    redis_unreachable();
```"
1593364373,13209,sundb,2024-05-08T04:19:19Z,"if updated is 0, we should check if hashObj is empty and delete it to avoid create a empty hash."
1593385850,13209,moticless,2024-05-08T04:59:49Z,"What I missed here is that there are flows that might release a hash-fields with TTLs not in the path of `dbGenericDelete()` and in turn an invalid item will be leftover dangling in global HFE DS. The following sequenece of commands is such example that release a hash and avoid calling `dbGenericDelete()`:
* HSET mykey f v
* HEXPIRE mykey 1 1 f
* SET mykey f 

I tried to avoid adding `dbid` into listpackEx or dictExpireMetadata and placed a hook in `dbGenericDelete()` instead. But looks like we cannot escape it.

We can fix it on a distinct ticket for hash and listpack, add `dbid` to metadata and add the logic here.
"
1593598176,13209,tezc,2024-05-08T08:11:56Z,Moving this above needs a new check as well. Let's keep it this way. Just a few lines of code duplication. 
1593601982,13209,tezc,2024-05-08T08:13:35Z,"Not sure I understand. For listpack, there is no private ebuckets. 
Is this related about deleting object without deleting it from global ebuckets? "
1593618853,13209,moticless,2024-05-08T08:21:00Z,"I know that. I just try to say that you don't see here any footprint of HFE is because it is hidden in the call dictRelease(). 
You do need to release object OBJ_ENCODING_LISTPACK_EX."
1593635833,13209,tezc,2024-05-08T08:29:26Z,"I'll wrap it for now but I think this is something we can not / should not do in the long run. We don't have a rule, so impossible to say whether a line is too long or not. "
1593638992,13209,tezc,2024-05-08T08:31:50Z,I try to do it that way for the new ones.
1593641598,13209,moticless,2024-05-08T08:33:53Z,"Just a suggestion (again, try to align to the file convention...)"
1593641649,13209,tezc,2024-05-08T08:33:56Z,"In general yes, I agree but here, I kept it similar to hashTypeConvertListpack(). Easier to compare with it. "
1593706797,13209,tezc,2024-05-08T09:12:56Z,but hashTypeFree() releases OBJ_ENCODING_LISTPACK_EX as well.
1593710130,13209,tezc,2024-05-08T09:15:30Z,Good catch. Looks like we don't have a test case doing something similar. 
1593710543,13209,moticless,2024-05-08T09:15:51Z,My mistake. I was looking on obsolete code.
1593712366,13209,moticless,2024-05-08T09:17:18Z,As part of the fix we can add the test as well.
1593719928,13209,tezc,2024-05-08T09:23:22Z,"Added assert to verify type. Also, changed where we return.  Hope it is clear."
1593746354,13209,tezc,2024-05-08T09:41:55Z,"So the question is how do we handle it:
- We create the object as DC (Don't create) flag is not provided.
- hsetf does not set any field
- We delete the empty object

In this case, we'll be sending notifications for empty object. "
1593785412,13209,sundb,2024-05-08T10:12:02Z,"ping @oranagra, in this case, we will send two notifications(new, del), do you have any advices?"
1593829304,13209,tezc,2024-05-08T10:46:45Z,let's handle that in a follow up pr 
1593909159,13209,tezc,2024-05-08T11:56:08Z,"```
if (!hashObj) {
    ......
        /* If object does not exist and DCF flag is given, no need to create
         * the object as we won't create any field. */
        if (flags & HFE_CMD_DCF) {
            addReplyArrayLen(c, numFields);
            for (int i = 0; i < numFields ; i++) {
                if (flags & (HFE_CMD_GETOLD | HFE_CMD_GETNEW))
                    addReplyNull(c);
                else
                    addReplyLongLong(c, HSETF_FAIL);
            }
            return;
        }
```

Added this early check to avoid creation of the object. A bit ugly but no way around it. "
1593926804,13209,sundb,2024-05-08T12:10:48Z,"@tezc i would prefer to send 2 notifications, which is pretty rare, unless someone intentionally sends error command."
1593997046,13209,tezc,2024-05-08T13:03:54Z,"I don't have a strong opinion but pinged Oran and he also asked if we can do an early check to avoid it. Well, maybe this early check is not worth it. Not sure. "
1594056765,13209,sundb,2024-05-08T13:42:06Z,"not sure the following sulution is avaliable, since we might need to update the fields ebuckets and db->hexpires.
btw: should we update db->hexpires ebuckets after dbDelete()?
```c
if (!hashObj) {
    created = 1;
    createHashObject();
}

...

if (updated == 0) {
    if (created && hashTypeLength(hashObj, 0) == 0)
            decrRefCount(hashObj);
} else {
    dbAdd();
}
```"
1594088834,13209,tezc,2024-05-08T14:02:48Z,"To do this, we also need to do `attachHfeMeta()` lazily. Inside of it, we use the key reference in dict. It becomes more complicated imho. Also, it will be different than other commands, it feel like it might be confusing. 

> btw: should we update db->hexpires ebuckets after dbDelete()?

Hope I understand this question correctly, if `hashTypeLength(hashObj, 0) == 0` then, object is not part of db->hexpires. So, dbDelete() should be safe."
1594150160,13209,tezc,2024-05-08T14:34:17Z,"Alternatively, we can add DCF check next to DC and return null rather than replying to all fields. 

```
        /* Don't create object if command has DC argument */
        if (flags & HFE_CMD_DC || flags & HFE_CMD_DCF) {
            addReplyOrErrorObject(c, shared.null[c->resp]);
            return;
        }
```

Edit: Interpreting description again
> - If key does not exist and was not created (DC or DCF was specified): nil

I think this is what we should do. See the last commit please. Would you consider it better than the previous one? "
1594221280,13209,sundb,2024-05-08T15:20:15Z,"yeah, i like it."
1602569422,13209,sundb,2024-05-16T03:47:08Z,"ref https://github.com/redis/redis/pull/13243#discussion_r1602571987

this assertiong will never be triggered.
you passed NULL to the second parameter of `lpGetValue()`, if the field is string, it will crash in `*slen = ele_len;`.
```c
    vstr = lpGet(p, &ele_len, NULL);
    if (vstr) {
        *slen = ele_len;          <- here
    } else {
        *lval = ele_len;
    }
```

crash log:
```
=== REDIS BUG REPORT START: Cut & paste starting from here ===
64716:M 16 May 2024 11:55:33.528 # Redis 255.255.255 crashed by signal: 11, si_code: 1
64716:M 16 May 2024 11:55:33.528 # Accessing address: (nil)
64716:M 16 May 2024 11:55:33.528 # Crashed running the instruction at: 0x55c8922a2fa9

------ STACK TRACE ------
EIP:
./src/redis-server *:6379(lpGetValue+0x54)[0x55c8922a2fa9]

64716 redis-server *
/lib/x86_64-linux-gnu/libc.so.6(+0x45320)[0x701fc8a45320]
./src/redis-server *:6379(lpGetValue+0x54)[0x55c8922a2fa9]
./src/redis-server *:6379(+0x11140f)[0x55c89220b40f]
./src/redis-server *:6379(hgetfCommand+0x1a3)[0x55c89220b987]
./src/redis-server *:6379(call+0x143)[0x55c89219cb67]
./src/redis-server *:6379(processCommand+0xea1)[0x55c89219e6e1]
./src/redis-server *:6379(processCommandAndResetClient+0x39)[0x55c8921bbcc9]
./src/redis-server *:6379(processInputBuffer+0x1a0)[0x55c8921bbf4e]
./src/redis-server *:6379(readQueryFromClient+0x4b5)[0x55c8921bc516]
./src/redis-server *:6379(+0x1b836f)[0x55c8922b236f]
./src/redis-server *:6379(+0x1b8a98)[0x55c8922b2a98]
./src/redis-server *:6379(aeProcessEvents+0x24d)[0x55c892186438]
./src/redis-server *:6379(aeMain+0x2e)[0x55c892186676]
./src/redis-server *:6379(main+0xd5a)[0x55c8921a7ebe]
/lib/x86_64-linux-gnu/libc.so.6(+0x2a1ca)[0x701fc8a2a1ca]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x8b)[0x701fc8a2a28b]
./src/redis-server *:6379(_start+0x25)[0x55c892180155]
```
what about adding a new method like `int lpGetInteger(unsigned char *lp, long long *lval)`, return 1 if it's a integer."
1602684226,13209,tezc,2024-05-16T06:24:04Z,"how did you trigger this crash? 
Edit: Ok, I see with corrupt restore, it is possible.

`lpGetInteger()` sounds good."
1602751912,13209,sundb,2024-05-16T07:22:01Z,"https://github.com/sundb/redis/commit/17b544f3530b0ce81c7e4180b6e0c4c9df29e85f
it's easy to reproduce the corrupt by using the patch.
then run `./runtest --single integration/corrupt-dump-fuzzer --accurate`
@tezc"
1204213214,12209,oranagra,2023-05-24T14:06:09Z,"there's a reason all the filtering (pattern matching, expiry, etc), is done after fetching all the keys.
with this change, the loop that's suppose to stop at `count` can take very long time if it doesn't find anything.
it'll possibly return better results to the caller, but at a latency cost.
if we wanna move the filtering to the scan callback, we must also increment some counter so that we can stop the loop after the right amount of keys found, not ones collected.
"
1204220483,12209,oranagra,2023-05-24T14:10:10Z,"note that another side effect of this change is that we don't attempt to expire keys that didn't match the type (or pattern).
i.e. both lookupKeyReadWithFlags and expireIfNeeded below will do that.
but we don't want to do that from within the scan callback.
some people use SCAN in order to force expiration on keys, but i suppose they won't use any filters, so that's probably ok."
1204225164,12209,oranagra,2023-05-24T14:12:20Z,"ohh, i see you added a test (to validate that the matched ones do get expired).
we'll, we'll also need to document the behaviour change about the non-matched ones, in the PR top comment, so that we mention that in the release notes."
1204230218,12209,oranagra,2023-05-24T14:14:11Z,"and if we do that, let's move the pattern matching too."
1209006159,12209,judeng,2023-05-29T07:25:41Z,"sorry, I don't get your concerns, please correct me if i'm wrong. The loop will stop at 'maxiterations' no matter the count of  keys collected, so it will not hang a long time.
https://github.com/redis/redis/blob/32f45215c33e8b8d801c4c339e18504918082936/src/db.c#L952-L956
Or do you mean that as the number of filter conditions increases, the probability of reaching maxiterations will increase, resulting in a longer time-consuming execution of a single command? When scan command specify the  type or match string, we can reduce the value of maxiterations, for example maxiterations = count * 5, but I doubt it's really worth it.

"
1209282841,12209,judeng,2023-05-29T12:45:20Z,"yes, it will have the side effect.  I think it would be better to expire the keys only when matched, whether it is match pettern or match type. And the current strategy is very confusing: if pattern not mached, the key will not attempt to expire, while when type not mached, the key still attempt to expire."
1209284545,12209,judeng,2023-05-29T12:47:25Z,"> and if we do that, let's move the pattern matching too.

Agree and I will try it."
1209323793,12209,oranagra,2023-05-29T13:36:09Z,"the `maxiteration` limit is there in case we're working on an empty dict, one with a lot of empty buckets.
e.g. users sometimes use SCAN+DEL, and then when they re-start scan from 0, all the initial buckets are empty.

but COUNT currently means to stop after that number of keys have been found (not necessarily matched), and if this PR is an efficiency optimization, i don't think we should affect that (i.e. and increase the likelihood we'll hit the `maxiterations` limit.
instead, i think we need to add an `unsigned long sampled` member to `scanData`, increment it inside the scan callback, and then check that the loop instead of checking `listLength(keys)`"
1209327896,12209,oranagra,2023-05-29T13:41:08Z,i agree. just saying we must clearly document the behavior change in the top comment and release notes.
1209955767,12209,judeng,2023-05-30T08:54:00Z,"oh, forgive my stupidity, I finally got what you mean through performance testing...The slowlog shows that when all keys cannot be matched, the scan command of this pr is 5 times slower than the unstable. Thank you very much for your review, which is very very useful!"
1210046909,12209,judeng,2023-05-30T10:06:24Z,"on the ather hand, it scanned ten times the number of keys, while only taking 5 times slower, the performance has been improved by 100% :-)"
1217896633,12209,sundb,2023-06-05T10:54:06Z,"Not sure the assert is right.
Now it is true if one of them is not NULL, but as the comment,
it should be `serverAssert(!o || data->typename)`"
1217897293,12209,sundb,2023-06-05T10:54:44Z,"```suggestion
    list *keys;   /* elements that collect from dict */
    robj *o;      /* o must be a hash/set/zset object, NULL means current db */
```"
1218041864,12209,judeng,2023-06-05T13:00:13Z,"sorry, my comment did not explain clearly what I really want to express: o and typename cannot have meaningful values at the same time"
1218042675,12209,judeng,2023-06-05T13:00:59Z,thank you
1218795418,12209,sundb,2023-06-06T02:36:26Z,"If so, it should be `serverAssert(!(o && data->typename))`."
1218979558,12209,sundb,2023-06-06T06:19:13Z,"
```suggestion
    /* typename is only meaningful when o is NULL. */
```"
1218989531,12209,sundb,2023-06-06T06:28:19Z,"
```suggestion
    } else if (o->type == OBJ_SET) {
        /* Do nothing. */
```"
1221457906,12209,judeng,2023-06-07T11:57:07Z,"I think `!data->typename || !o` and `!(o && data->typename)` are the same statement，does I miss something？But the `!(o && data->typename)` is easier to understand, I prefer to use your sentence."
1222398270,12209,sundb,2023-06-08T03:05:32Z,"Ohh, yes, they are the same."
1223979632,12209,judeng,2023-06-09T08:01:44Z,I have copied your code， thank you
1225832099,12209,oranagra,2023-06-11T14:34:58Z,"i suppose it's much better to translate the type to an integer and then match the time, rather than do string compare per key.
anything i'm missing?

p.s. if that's right, let's match the time before the patter (possibly saving some effort)"
1225832961,12209,oranagra,2023-06-11T14:38:55Z,"let's change this list to contain sds, rather than robj.
in the distant past (IIRC before v3.2), we used to add robj to the output buffer list, so it'll reference these, but these days we just copy the bytes from the sds to the output buffer, and dispose it.
i.e. there's no advantage in creating that robj, just an extra allocation."
1226177300,12209,judeng,2023-06-12T07:03:38Z,"Agree, I will try it and retest the improvement result"
1233370729,12209,oranagra,2023-06-18T20:11:48Z,why is this one still creating a string object?
1233371609,12209,oranagra,2023-06-18T20:18:16Z,"are we sure this will never return values in the range of 0 to 7, or LLONG_MAX?
that's a 54 bit number, so negating it seems safe, just making sure.."
1233373496,12209,oranagra,2023-06-18T20:33:47Z,"let's add another key of a different type, so that the filtering is effective.
also, please check if the TYPE command has a test already, and if not, maybe add an assertion below."
1233373737,12209,oranagra,2023-06-18T20:36:33Z,"any reason to handle this error separately from the one below?
i see this one isn't tested or documented in the top comment, but can't we just drop it?"
1233374332,12209,oranagra,2023-06-18T20:41:00Z,"is that for the expireIfNeeded call?
if so, how about this:
```diff
--- a/src/db.c
+++ b/src/db.c
@@ -1705,6 +1705,7 @@ int keyIsExpired(redisDb *db, robj *key) {
  * The return value of the function is 0 if the key is still valid,
  * otherwise the function returns 1 if the key is expired. */
 int expireIfNeeded(redisDb *db, robj *key, int flags) {
+    int static_key = key->refcount == OBJ_STATIC_REFCOUNT;
     if (server.lazy_expire_disabled) return 0;
     if (!keyIsExpired(db,key)) return 0;
 
@@ -1736,8 +1737,12 @@ int expireIfNeeded(redisDb *db, robj *key, int flags) {
      * will have failed over and the new primary will send us the expire. */
     if (isPausedActionsWithUpdate(PAUSE_ACTION_EXPIRE)) return 1;
 
+    /* create a heap robj if we only have static one */
+    if (static_key) key = createStringObject(key->ptr, sdslen(key->ptr));
+
     /* Delete the key */
     deleteExpiredKeyAndPropagate(db,key);
+    if (static_key) decrRefCount(key);
     return 1;
 }
```"
1233451083,12209,sundb,2023-06-19T02:18:15Z,"```suggestion
        return ""unknown"";
```"
1233472778,12209,judeng,2023-06-19T02:55:41Z,"So, it means that if the key have been expired, we need copy the key string twice. But considering that the percentage of stale keys is usually  small, I think this is a good compromise. Thanks for your wonderful comment!"
1233481227,12209,judeng,2023-06-19T03:19:00Z,"yes, although long long type size is platform-dependent, but guaranteed by the C standard (ISO C99) to be at least 64 bits, so we don't need to worry about it"
1233491469,12209,sundb,2023-06-19T03:49:55Z,"it will return 5 if `name` is '\0' or `\0xxxx`.
Perhaps `obj_type_name` can be changed to
```c
    ""hash"", 
    NULL, /* module type is special */
    ""stream""
```"
1233546039,12209,oranagra,2023-06-19T05:33:32Z,"seems that i commented on the wrong thread.
this was meant for https://github.com/redis/redis/pull/12209#discussion_r1233370729
i.e. the reason we create a string object was for expiry test, so we have a better solution.

while on that subject, maybe we can even avoid sdsdup?
it would be harder for the other key types (HSCAN, SSCAN, ZSCAN), but at least for normal keyspace SCAN we can easily avoid copying the string.
it'll be a little bit ugly, but i think the performance boost is worth it, if we add a few comments to clear that up.

anyway, back to the original purpose of this thread:
> any reason to handle this error separately from the one below?
i see this one isn't tested or documented in the top comment, but can't we just drop it?"
1233791202,12209,sundb,2023-06-19T09:36:09Z,"```suggestion
    if (o->type < 0 || o->type >= OBJ_TYPE_MAX) {
```
on the other hand, `default: type = ""unknown""; break;` is dead code in the origin code, maybe we can change it to `assert` instead."
1233926920,12209,judeng,2023-06-19T11:30:24Z,"> any reason to handle this error separately from the one below?

Because I use a special empty string in the `obj_type_name` array to represent the module type to prevent the wrong type from matching with the module. This is indeed a bit ugly, I will move the judgment to the getObjectTypeByName function, return the empty string as an unknown type (LLONG_MAX), WDYT
"
1233937694,12209,judeng,2023-06-19T11:41:04Z,"but null pointer can not be used in strcasecmp funtion. I think your question is same with oranagra's https://github.com/redis/redis/pull/12209#discussion_r1233373737 , I prefer to compare strings ahead of time if they are empty in `getObjectTypeByName` 

```c
long long getObjectTypeByName(char *name) {
    if(strlen(name)==0) return LLONG_MAX; <------------------ new add

    for (long long i = 0; i < OBJ_TYPE_MAX; i++) {
        if (!strcasecmp(name, obj_type_name[i])) {
            return i;
        }
    }
```"
1233941513,12209,judeng,2023-06-19T11:45:08Z,"Agree, it does look like dead code."
1234035535,12209,oranagra,2023-06-19T13:04:13Z,sounds good. then we'll just get the plain `unknown type name` error.
1234046267,12209,oranagra,2023-06-19T13:12:11Z,"don't forget about the suggestion to avoid sdsdup which i mistakenly posted in the wrong thread:
https://github.com/redis/redis/pull/12209#discussion_r1233546039"
1234058357,12209,judeng,2023-06-19T13:21:10Z,"Yes, I think hash/set type with the HT encoding also could easily avoid sdsdup easily, I'm trying"
1234687097,12209,sundb,2023-06-20T03:16:51Z,"```suggestion
    if (strlen(name) == 0) return LLONG_MAX;
```"
1234687237,12209,sundb,2023-06-20T03:17:09Z,"```suggestion
    serverAssert(o->type >= 0 && o->type < OBJ_TYPE_MAX);
```"
1234688120,12209,sundb,2023-06-20T03:19:15Z,"```suggestion
    if (o && (!ht || o->type == OBJ_ZSET)) {
```"
1234801628,12209,oranagra,2023-06-20T06:37:29Z,"maybe instead of duping this one, we can have zset release only the values, and not the keys?
not sure if it's worth the trouble, have a look and decide."
1234825724,12209,sundb,2023-06-20T07:03:35Z,"```suggestion
    if (static_key) {
```"
1234825832,12209,sundb,2023-06-20T07:03:41Z,"```suggestion
    if (static_key) {
```"
1234830417,12209,oranagra,2023-06-20T07:08:34Z,looks like i'm blind for white space issues recently :smile: 
1235024532,12209,soloestoy,2023-06-20T09:50:50Z,"`moduleTypeLookupModuleByName` is using `memcmp`, so moduletype's name is case-sensitive.

But currently `strcasecmp` is used for comparing typename, which may cause a breaking change. In theory, this should be considered a bugfix because different case means a different moduletype, and this situation is also very rare, so it is not a breaking change in practical."
1235060152,12209,oranagra,2023-06-20T10:23:34Z,"good catch!
considering the other type filters are case insensitive, i think we should have this one case insensitive too. for consistency.
besides, it's easier for users to use (having two modules with similar names is probably just a theoretic case).
and also, let's avoid a breaking change if we didn't mean for it and we can avoid it.

bottom line, let's add a boolean argument for moduleTypeLookupModuleByName to be case insensitive."
1235189883,12209,oranagra,2023-06-20T12:25:34Z,"i think both of these cases are handled now since we use `strlen` (not `sdslen`), which means that even `\0xxxx` will exit this function early.
@sundb do you still see a problem?

p.s. maybe it's a good idea to use `NULL` as you suggested too, and add explicit code to avoid using it when NULL (before calling `strcasecmp`)."
1235273896,12209,sundb,2023-06-20T13:31:06Z,"it's ok now.
i prefer using NULL too."
1235386263,12209,judeng,2023-06-20T14:49:02Z,"@soloestoy Cool! 👍 
@oranagra Agree. It's better to be consistent for users, and having two modules with similar name is rarer than input case insensitivity when scanning module type. 
But this is still a breaking change for docs , that means we definitely not support case sensitive scan for module type, and the same needs to be stated in the module's documentation. Should we be more careful to make decision?"
1235388049,12209,judeng,2023-06-20T14:49:54Z,it's seems that my clang-format break down again :-(
1235401468,12209,judeng,2023-06-20T14:58:54Z,"ooh, I get you point. NULL is indeed better than a weird empty string. I'll do it tomorrow. thank you, I like the advice, guys."
1235405338,12209,judeng,2023-06-20T15:01:39Z,I could try it out but it feels a bit hard and code might get a bit ugly.
1235588322,12209,oranagra,2023-06-20T17:26:32Z,"@judeng not sure what you mean.
do we agree that we should avoid the breaking change? and you argue that in addition to that we should document that it ignores case for modules?
i'd rather not document that, and have the opportunity to break it on the next major release so it's consistent with other types."
1236247377,12209,judeng,2023-06-21T03:44:05Z,"Your understanding is completely correct, I will follow your point."
1241082846,12209,judeng,2023-06-25T08:02:43Z,"@oranagra In order to ensure that static robj is supported in lookupKey, I added the NONOTIFY flag here to avoid modifying the notifyKeyspaceEvent function.  I think the `keymiss` notification generated by the scan command is completely unnecessary. But I am not sure whether it will also be a breaking change. "
1241097856,12209,oranagra,2023-06-25T08:55:43Z,"i agree.. in theory this should have been a `LOOKUP_NOEFFECTS`, or actually just a plain dictFind, but currently we do want the expiration side effect.
regarding the `keymiss` notification, if SCAN would ever send them, that would be a bug (badly affecting whoever is using relies on this notification), and in such case i would document that in the release notes as a bug fix.
but in fact, these should always be hits (never misses), so i don't think that bug exists.
what you did is ok, and it's a good idea to keep NONOTIFY just to be on the safe side."
1241098787,12209,oranagra,2023-06-25T08:57:37Z,"we haven't solved the case-insensitive compare issue yet, right?"
1241099338,12209,oranagra,2023-06-25T08:58:42Z,"```suggestion
};

```"
1241099692,12209,oranagra,2023-06-25T09:00:14Z,"maybe we should even clearly mark these with
```c
/* TODO: uncomment in redis 8.0 */
```
and
```c
/* TODO: delete in redis 8.0 */
```
"
1241100614,12209,oranagra,2023-06-25T09:03:53Z,that var is no longer needed again.
1241101428,12209,oranagra,2023-06-25T09:05:09Z,"maybe we can add a `continue`, instead of `else`, so that when this code is removed we don't need to de-indent the call to `expireIfNeeded`"
1241101892,12209,oranagra,2023-06-25T09:05:47Z,let's add a `TODO: remove this in 8.0`
1241102506,12209,oranagra,2023-06-25T09:06:25Z,"let's add
```tcl
# TODO: uncomment in 8.0"
1241777565,12209,sundb,2023-06-26T07:55:17Z,what about `ignore_case`?
1241777685,12209,sundb,2023-06-26T07:55:25Z,"```suggestion
                || (case_flag && !strcasecmp(name, mt->name)))
            {
```"
1241841875,12209,judeng,2023-06-26T08:48:03Z,"hi, I just added a space and didn't put brace to the new line, not sure if my coding style is right."
1241843667,12209,judeng,2023-06-26T08:49:20Z,"yes, I  just updated"
1241849619,12209,sundb,2023-06-26T08:54:16Z,"because there are multiple lines in the `if`, redis style recommends to put the brace on a single line."
1241866407,12209,judeng,2023-06-26T09:08:15Z,"I think it is still needed, because we must use it as a flag that if there is a type filter  in redis7.2. And I deleted the local repeated `typename`  just now, so we also no need to delete this line in  redis 8.
"
1241871431,12209,judeng,2023-06-26T09:11:55Z,"Thank you for your detailed answer, I will follow the style"
1241957482,12209,oranagra,2023-06-26T10:16:26Z,"i might be missing something, but i don't see this new function being used anywhere.
don't you need to use it in getObjectTypeByName? or maybe better, let scanGenericCommand pass an `ignore_case` argument to it, and make it more explicit.

let's add a simple test for this (would have uncovered this oversight which we almost missed twice, and protect future changes from breaking it)."
1241965760,12209,oranagra,2023-06-26T10:22:26Z,can't we use `type != LLONG_MAX` like we planed to use for 8.0 (and move that var to the inner scope)?
1242012286,12209,judeng,2023-06-26T11:05:09Z,"please correct me if i'm wrong, if specificated type filter is unkown in redis7.2, which means `type`  is equal LLONG_MAX, we still need continue to scan the full key space and execute `lookupKey` for these keys. But in redis8.0, we will will reply a error immediately for the unkown type filter, `type != LLONG_MAX` is just means there is no type filter in scan command."
1242033271,12209,judeng,2023-06-26T11:17:47Z,"Sorry, I was distracted and caused this careless question. I found it difficult to avoid string comparisons in redis7.2, using numeric comparisons still cause a breaking change. Such as tow module types,""A12345678"" and ""a12345678"", in the past server would return all keys belonging both ""A12345678"" and ""a12345678"", but now if we use interger compareison, the server only return the keys belonging either ""A12345678"" or ""a12345678""."
1242077745,12209,oranagra,2023-06-26T11:54:38Z,"ohh, right.
please add a test to cover that."
1242082958,12209,oranagra,2023-06-26T11:59:32Z,"you mean if there are two modules with the same name (and only character case difference)?
i think we can overlook this (i don't think there's such a case in reality).
what's important IMO is that if a module is named ""Abcd12345"" we can find it with ""abcd12345"" and ""ABCD12345"" too.
so i think we can keep the integer compare, as long as we look it up with ignore_case."
1242086643,12209,oranagra,2023-06-26T12:03:05Z,"i'm also confused by your last comment. if you wanted to cover that case that i'm willing to give up, you should have kept the string compare, but looking at the code i see you still do integer compare...
so either way, let's add a test to cover this (without one module and several searches, not with two modules with similar name).

side note: i'm also willing to bring back the string compare for 7.2 and replace it in 8.0, but it seems to me that with small effort we can keep the integer compare too."
1242113381,12209,oranagra,2023-06-26T12:25:18Z,"i don't think we'll want to remove it.
it breaks backwards compatibility and we don't gain anything.
let's drop the comment."
1242114855,12209,oranagra,2023-06-26T12:26:38Z,and also the comments in the test.
1242115379,12209,judeng,2023-06-26T12:27:05Z,"I add a test case using a case insensitive scan for the module type, not sure if it is what you wanted"
1242116341,12209,oranagra,2023-06-26T12:27:57Z,"```suggestion
    }

```"
1242118228,12209,oranagra,2023-06-26T12:29:30Z,"when reading this test, i don't recall the case with which the module registers the type.
i originally thought that we'll search both ""TEST___DT"" and ""test___dt"" and match the results.
but maybe using an odd ""tEsT___dT"" will prove the point and be clearer?"
1242280811,12209,judeng,2023-06-26T14:19:59Z,"I added a test case in `SCAN unknown type` for current version, and coverd the impact on expired keys"
1243487825,12209,sundb,2023-06-27T10:05:57Z,"```suggestion
     * The exception to the above is ZSET, where we do allocate temporary
```"
1243523115,12209,judeng,2023-06-27T10:34:26Z,"For this remaining problem, I have a preliminary idea, hoping to add an addReplyBulkDouble to directly output double‘s strings, avoiding malloc/free,  and I hope the function can  be used in other places, not sure if it is feasible. "
1243731934,12209,judeng,2023-06-27T13:22:03Z,"I find we have had a `addReplyDouble` function in networking.c. while it maybe use the RESP3 format to output, I think it can be used here."
761911531,9890,guybe7,2021-12-03T12:56:56Z,this block is irrelevant because we never propagate anything before EXEC is completely done
762581587,9890,oranagra,2021-12-05T15:58:25Z,can you describe in which case we reach here with -1?
762582972,9890,oranagra,2021-12-05T16:08:57Z,"how many calls to the old `propagate` remain in the code?
maybe we should rename it, so that if there's an old PR, or some fork with extra calls, it'll not compile."
762583787,9890,oranagra,2021-12-05T16:15:48Z,"we now have `afterCommand` that's called in both `call` and also (nearly) each of the above `if-else` cases.
maybe the better approach is to do that there.
Note, that i suppose that it's logically **incorrect** to pack this whole loop in a single MULI-EXEC, am i right?

we may need to also introduce a `beforeCommand`, or maybe alternatively change the default value of `server.core_propagates`, and have the module sybsystem do that hacky part of changing the state?"
762584196,9890,oranagra,2021-12-05T16:19:13Z,"we're not in cron here (we may be in a timer, or inside processCommand).
am i missing anything?"
762585230,9890,oranagra,2021-12-05T16:26:31Z,"not sure i understand that comment.
""take care of their own propagation"" is true anyway, since they don't mess with `server.dirty`.
but here you're discussing the flushing of the pending commands, right? so let's rephrase.

anyway, you're saying that modules will flush their own pending commands if if that's happening from a timer, even even when coming from `call`?
why not let `call` do the flushing when we come from there too? seems cleaner and more intuitive.
i.e. let `call` and ""execCommand"" do what they always do, and let the modules take care only of the odd cases."
762585459,9890,oranagra,2021-12-05T16:28:59Z,"if we wanna rely on this method, maybe eliminate REDISMODULE_CTX_INIT, so it won't be used by mistake?

also, there's performance regression in this change, maybe pass the context pointer as an argument rather than return a huge struct?"
762588099,9890,oranagra,2021-12-05T16:51:07Z,"so whatever we added to the propagation queue as a master is discarded, right?
do we have a test for it?"
762603278,9890,oranagra,2021-12-05T19:15:13Z,let's just leave an UNUSED placeholder instead of messing the blamelog
762604139,9890,oranagra,2021-12-05T19:23:43Z,"i'll hijack this block to start an unrelated discussion

This PR could in theory have some performance implications.
in the past, propagate would just write directly into the client output buffers,
but now it is appended to a list and then copied to the output buffer.

in practice, since propagate always took an argv array, and the output buffers are always (in recent years) plain byte buffers, i suppose there's no effect.
i.e. either the robj items in the argv array are just a reference to the argv from networking.c, or they where created just for the call to propagate, they where copied anyway.
and this doesn't really change with this PR, right?"
762604742,9890,oranagra,2021-12-05T19:29:39Z,"as i noted elsewhere, i feel there's a better way, to let modules commands that are just executed from networking to be propagated here too.
maybe i'm missing something."
762606013,9890,oranagra,2021-12-05T19:42:05Z,"maybe more important to test a timer that runs two commands, and gets wrapped in multi-exec.
i.e. it's not that bad if a single command will be wrapped in mult-exec, but it is quite bad if multiple commands are not."
762606619,9890,oranagra,2021-12-05T19:48:12Z,"i don't think we need the `wait_for_ofs_sync` here.. we're using a fake replica, that we don't check anyway."
762606910,9890,oranagra,2021-12-05T19:51:13Z,"isn't it a bit wrong for the SELECT to be inside the MULTI?
that multi is probably always executed, so it may not matter much, but still feels wrong."
762606946,9890,oranagra,2021-12-05T19:51:54Z,what are these two notifications? i expected only one.. what am i missing?
762607216,9890,oranagra,2021-12-05T19:54:38Z,maybe the module should notice it is running in a replica and avoid that propagation?
762607443,9890,oranagra,2021-12-05T19:56:16Z,"i think these ""known limitation"" bugs should be explicitly described in the top comment (to emphasize the effect of the change).

p.s. if we don't solve the SELECT/MULTI re-order it should also be clearly mentioned there."
762611403,9890,oranagra,2021-12-05T20:30:46Z,don't you need to delete that note?
762611974,9890,oranagra,2021-12-05T20:34:22Z,"here we don't validate that there no exec that messes things up
maybe add another command after the multi-exec and see that it's visible after the `set foo bar`"
763080657,9890,guybe7,2021-12-06T14:54:26Z,"yep, i suppose you're right.. i'll drop the `!(c->cmd->flags & CMD_MODULE)` when `call` needs to determine if core propagates or not"
763084073,9890,guybe7,2021-12-06T14:57:55Z,"we have them

module propagates nested ctx case1
module propagates nested ctx case2"
763084559,9890,guybe7,2021-12-06T14:58:28Z,will do
763085709,9890,guybe7,2021-12-06T14:59:40Z,i think it's there so we don't check the replication stream prematurely...
763090081,9890,guybe7,2021-12-06T15:04:28Z,"yes, it is a bit weird but it simplifies the code tremendously.

otherwise, i would have to make propagatePendingCommands take a dbid (which i don't have, except in `call`), only to pass on to execCommandPropagateMulti which anyway does not mess with keys, so why would they need to SELECT anything?"
763091030,9890,guybe7,2021-12-06T15:05:30Z,"i added a comment above this block:
```
# Note whenever there's double notification: for for ""set"" and one for ""expire""
```

SET with PX issues two separate notifications"
763094824,9890,guybe7,2021-12-06T15:09:35Z,"the ""problem"" is that the module running on master is calling RM_Replicate of INCR commands, without actually performing them, which is very bad practice...

TBH RM_Replicate may wreak havoc in master-slave consistency if not used right... the natural way of propagating to slave should by either RM_Call with `!` or RM_ReplicateVerbatim (in which case all RM_Calls should not have `!`)

but it seems like RM_Replicate was specifically built for causing consistency issues: it basically means the user wants the slave to run a command which the master didn't"
763102930,9890,guybe7,2021-12-06T15:17:59Z,"yep, updated the comment"
763187918,9890,guybe7,2021-12-06T16:51:04Z,don't we need an `afterCommand` also after active-expiry/eviction? they too can invalidate cache
763341262,9890,oranagra,2021-12-06T19:59:56Z,"afterCommand was born to awake blocked clients, and update command stats, so it doesn't fit these."
763345303,9890,oranagra,2021-12-06T20:04:19Z,"it waits for the slave to read the data the master sent it.
assuming we don't use deferring connection, as soon as we got the reply of the `set`, it means `beforeSleep` was done, and that means the data was also written to our fake replica (unless it's huge).
i don't understand why we have it.. maybe copied form somewhere which really needed it, or outdated."
763350692,9890,oranagra,2021-12-06T20:10:19Z,"maybe somehow just emit the initial select in a different way?
i.e. if later someone does:
```
select 2
multi
set x x
exec
```
i'll be willing to accept that the select went into the MULTI.. but the initial one just looks very odd.
but anyway, aren't you injecting the MULTI retroactively? maybe just check that the first command is a SELECT and swap their order?
since anyway, the commands are serialized to the replication stream, which is used on the target as one client, the client state can't mix with anything so the atomicity of select doesn't matter.

unless if for some reason the transaction is aborted on the dest, in which case maybe it's a little bit better to take the select out?"
764678323,9890,guybe7,2021-12-08T09:16:03Z,"right

we didn't, i just added one
"
764727490,9890,guybe7,2021-12-08T10:16:10Z,"1. add to afterPropagte
2. add a flag to avoid MULTI/EXEC for non-call() stuff"
764729072,9890,guybe7,2021-12-08T10:18:12Z,right
764739850,9890,guybe7,2021-12-08T10:31:56Z,"steal the dbid of MULTI from first command, EXEC from last"
764784511,9890,guybe7,2021-12-08T11:33:11Z,-1 will be illegal
764784619,9890,guybe7,2021-12-08T11:33:19Z,done
765185085,9890,oranagra,2021-12-08T19:31:34Z,Maybe updateStatsOnUnblock should be move to be together with unblockClient and afterCommand
765186125,9890,oranagra,2021-12-08T19:33:07Z,"I think the var name should include the word ""multi"" "
765188667,9890,oranagra,2021-12-08T19:36:56Z,"Doesn't this cause each of the blocked commands to avoid adding multi in case one of them propagates two commands? 
Since now each of them flushes the queue on its own, what's the problem of not setting this flag? "
765191659,9890,oranagra,2021-12-08T19:41:25Z,"Maybe we can assert for that? 
Maybe by passing the flags? 
I see the the caller passes NULL, then sets the module pointer on its own.. "
765269449,9890,oranagra,2021-12-08T21:46:28Z,Why did you move this? 
765296027,9890,oranagra,2021-12-08T22:32:16Z,Where did this come from and why did you have to add it? 
765299341,9890,oranagra,2021-12-08T22:39:06Z,"Why did you turn it from an op array to an op pointer array? 
So that the realloc is smaller (less memcpy)? "
765470676,9890,oranagra,2021-12-09T06:41:06Z,please add a comment explaining that test (what was queued is discarded)
765473319,9890,oranagra,2021-12-09T06:47:44Z,"i just realized that this call in `afterCommand` is gonna propagate the evicted DELs too, right?
which will add them to a MULTI with the command itself, or on their own if the command was a read-only command.
i think that's wrong, and that we should flush the queue after eviction.
maybe, we need to skip that though, if we're in a nested call (which is only `RM_Call, right?).
please add tests (if possible for both cases)."
765474426,9890,oranagra,2021-12-09T06:50:09Z,"aren't we missing a similar call in the eviction (tenacity) timer path?

i don't recall if there's a test that triggers this path in a master/replica configuration.
maybe it's a good idea to add one (or extend an existing one)."
765494949,9890,guybe7,2021-12-09T07:33:50Z,"before this commit, we didn't have MULTI/EXEC and I was under the impression that we want to avoid unnecessary transactions.

if we do want to inject a redundant MULTI/EXEC I think it should be around all the commands propagated by handleClientsBlockedOnKeys, I don't see any reason to group the MULTI/EXECs by type (list,zset,stream,module)"
765498340,9890,guybe7,2021-12-09T07:40:08Z,"do you mean we should pass RedisModule* which could be NULL + the creation flags (REDISMODULE_CTX_*)?
and then moduleCreateContext always assigns the module (which may be NULL) and, if it's not REDISMODULE_CTX_THREAD_SAFE we bump up ctx_nesting?"
765498457,9890,guybe7,2021-12-09T07:40:21Z,see the comment above this `if`
765499987,9890,guybe7,2021-12-09T07:43:10Z,"it came from `replicationFeedSlaves` and it's here (along with the AOF condition above) in order to prevent pushing stuff to also_propagate in case we don't have any aspect of replication (CPU + memory optimization)

do you think this condition should be in a function that replicationFeedSlaves uses? IMHO it's basic-enough to appear in those two places"
765500071,9890,guybe7,2021-12-09T07:43:19Z,yes
765501514,9890,guybe7,2021-12-09T07:45:49Z,"afterCommand isn't called after eviction
We flush the propagation queue in performEvictions
Which is called either from the timer or process Command
I even assert that the queue is empty before eviction/expiry
so that before eviction/expiry the queue is empty, we DELete keys, and we flush the queue so now it's empty again

or maybe I misunderstood your comment"
765502308,9890,guybe7,2021-12-09T07:47:19Z,we have the same call in performEvictions which is called either from the timer or processCommand
765536270,9890,oranagra,2021-12-09T08:23:35Z,"It's not by type, it'd by command. 
Ie. BLMOVE or some other blocked command can propagate two commands, and these should be in transaction. But the entire event of processing all unblocked clients as a transaction is wrong (they're unrelated operations) "
765566287,9890,oranagra,2021-12-09T09:02:44Z,"i'm not sure it's a win (doing more calls to malloc). unless the array is expected to be huge, which i doubt.
i.e. you could have added the greedy growth mechanism, and keep it a flat array."
765568020,9890,oranagra,2021-12-09T09:04:54Z,"sorry, for some reason i looked at the code and it seemed as if you didn't modify evict.c (some glitch)"
765569391,9890,oranagra,2021-12-09T09:06:37Z,"sorry.. somehow i missed it.
but maybe add a test for eviction and propagation anyway? (in case we don't have one)?"
765638437,9890,oranagra,2021-12-09T10:09:26Z,"i mean i saw the callers pass NULL as context, and then do `ctx->module = module` right after.
so it's odd to use this argument as an indication to bump the nesting.
i think we need another argument, and let the caller always pass the module as argument.
we can take this opportunity to take more arguments that are commonly set to the newly created context (like flags), and then we can use the THREAD_SAFE flag for the nesting need."
766553978,9890,guybe7,2021-12-10T10:20:28Z,"when running `LATENCY of expire events are correctly collected` with address-sanitizer it made a huge difference.
this test uses a lua to add 1M elements to a set. which means the also_propagate array reaches 1M*sizeof(redisOp), which is 64MB, instead of just 8MB when we store pointers.

maybe the whole scenario is a bit extreme (address sanitizer + creating a 1M member set in a lua)

your call"
766676129,9890,oranagra,2021-12-10T13:26:36Z,"This huge difference is between the version with and without the extra pointer? or from before you added the greedy allocation? 
I don't understand why address sanitizer will be slow to realloc more memory. If anything the extra indirection has an extra cost. "
766755175,9890,guybe7,2021-12-10T15:10:56Z,"i re-checked and you're right, the greedy allocation was the game changer... I'll keep only the greedy allocation"
767286846,9890,oranagra,2021-12-12T15:05:39Z,"please help me follow this.
did we ever propagated CONFIG SET to replicas? or is this a new concern added by this PR?"
767287568,9890,oranagra,2021-12-12T15:11:16Z,@MeirShpilraien please put a third set of eyes on this to make sure we're not overlooking anything.
767287943,9890,oranagra,2021-12-12T15:14:09Z,maybe preserve that comment in the other occurrence of this case (to be on the safe side)
767288381,9890,oranagra,2021-12-12T15:17:41Z,"why do we need a replica?
`attach_to_replication_stream` will work without one.

also, why `after 1000`? (did you copy it from somewhere?)
p.s. don't we need to set the ping period to a very high value to make sure one won't make it's way into our stream and fail the test?"
767290014,9890,oranagra,2021-12-12T15:31:28Z,"side note, i think i would be willing to leave this case as something that no sane module should be doing.
i.e. calling CONFIG SET maxmemory from a timer."
767329636,9890,guybe7,2021-12-12T21:23:01Z,"yes, we did
form top comment:
```
CONFIG SET can create evictions, sending notifications which can cause to dirty++ with modules.
we need to prevent it from propagating to AOF/replicas
```
"
767444233,9890,oranagra,2021-12-13T06:36:27Z,"ok, so that bug (propagating CONFIG SET) is not new (probably exists in previous releases), but only happens when modules listen to the ""evicted"" notification, and do some RM_Call or other propagation from within that callback. right?
So i guess this doesn't mean we wanna backport such a fix, but we may still wanna mention it in the top comment."
767588380,9890,guybe7,2021-12-13T10:21:53Z,"do you want me to explicitly block it? or just assume no module would even do it?

if we want to block it, should it be in call() or in RM_Call?"
767591140,9890,guybe7,2021-12-13T10:25:18Z,right
767593119,9890,guybe7,2021-12-13T10:27:48Z,"right about both, deleted the replica"
767600181,9890,guybe7,2021-12-13T10:37:16Z,the only other occurrence is RM_GetThreadSafeContext and even then sometimes we have a module and sometimes we don't.. i don't see a value of having the comment there too
767714638,9890,guybe7,2021-12-13T12:29:59Z,"add test:
MULTI
INCR x
config set maxmemory 1
INCR x
exec

x should be 2"
767775572,9890,oranagra,2021-12-13T13:52:21Z,"for the record. we realized that it's not only modules, but also MULTI, and that the solution is probably to allow the CONFIG SET, but skip the eviction because we can't afford to propagate."
768018994,9890,guybe7,2021-12-13T18:33:42Z,yes
768081316,9890,oranagra,2021-12-13T20:03:16Z,"good catch!!!
i see we already had a test for that? so how come we didn't get the assertion before?

p.s. another way to test it could be:
MULTI + LPUSH + EXPIRE + DEBUG SLEEP"
768088041,9890,oranagra,2021-12-13T20:14:15Z,"can you help me understand this change?
all i see that changed in the test code itself (and the module), is not sending the CONFIG SET maxmemory (which means the test name is now outdated?)
but i don't understand how it impacted the verification code in such a way.

p.s. is the reason you removed the CONFIG SET, just because you realized that MULTI-EXEC demonstrates a similar problem, so there's no need for the module notification case?"
768424493,9890,guybe7,2021-12-14T08:37:12Z,"3 commits ago i added the assertion `serverAssert(server.also_propagate.numops == 0);` in `handleClientsBlockedOnKeys` and then the external-server tests failed on that SWAPDB test

the reason it failed is that `SWAPDB` called `handleClientsBlockedOnKeys` which added the expire-delete to also_propagate (and never actually propagated) and then `handleClientsBlockedOnKeys` was called again from `beforeSleep`, triggering the assertion.

the reason It happened only with the external server is probably that at some point the external server loaded an RDB, causing it to create a backlog and thus `shouldPropagate` returned 1 (in non-external tests the server come up fresh, and if there's no AOF or replicas, `alsoPropagate` doesn't do anything)"
768431471,9890,guybe7,2021-12-14T08:46:16Z,"in the past it used to do
Call(INCR) // and replicate
Call(CONFIG SET maxmemory 1)
Replicate(INCR) // so ti's done only on replica
Call(CONFIG SET maxmemory 0)
Call(INCR) //and replicate

after the last commit, setting maxmemory to 1 and then 0 in the same atomic operation would not result in eviction (because numops > 0). i wanted to get some evictions, so I removed the `CONFIG SET maxmemory 0` form the module code (note that it still does `CONFIG SET maxmemory 1` so the test name is correct)

another change is that I changed the names of the keys we INCR via RM_Call and made them volatile so that they can be evicted when I set the eviction to volatile-based (I don't use allkeys because we have the special key ""notifications"" that always comes back to life, and then it gets evicted a random amount of times, and I can't assert anything about the replication stream)

this test is indeed similar to the one in maxmemory.tcl but I wanted to test the module case too (also, the test already existed, would be a shame to delete it). "
768432520,9890,guybe7,2021-12-14T08:47:32Z,"now, we can see that keys are evicted only after the module executes and replicates everything in the callback"
768536520,9890,guybe7,2021-12-14T10:41:30Z,"comment from @MeirShpilraien 
ctx_nesting should be global, not per module
imagine ""module1.foo"" calling ""module2.foo"". if the nesting level is not global module2.foo will propagate everything by itself, while module1.foo should do it (the issue here is the order of propagation)"
768540063,9890,guybe7,2021-12-14T10:45:48Z,"comment from @MeirShpilraien 
bug: calling RM_Call of a native redis command with `!` inside a thread safe ctx will not propagate.
redis core won't propagate because it's an RM_Call + we may never free the thread-safe ctx so there's no chance to propagate.

solution:
in GIL-lock we need to incr ctx_nesting (in order to prevent any internal RM_Calls from propagating stuff on their own). assert: ctx_nesting must be 0 before the incr.
in Gil-unlock. assert ctx_nesting is 1. we decr it and call propagatePendingCommands"
768609970,9890,oranagra,2021-12-14T12:19:48Z,so maybe it's wise to use this opportunity to add an explicit test for it (MULTI + LPUSH + EXPIRE + DEBUG SLEEP)?
768642766,9890,guybe7,2021-12-14T13:02:55Z,"i actually edited to original test to check the replication stream, so now even if it's not in standalone mode, the server still replicates... i checked and indeed it failed without the fix in non-standalone mode

do you still want me to add the MULTI + LPUSH + EXPIRE + DEBUG SLEEP case?"
768645625,9890,oranagra,2021-12-14T13:06:44Z,"this area of redis seems fragile, so i think more tests to detect future regressions are better.
but if it takes too long to compose that test, i'm willing to let go."
768649218,9890,guybe7,2021-12-14T13:11:30Z,"i'll add the test, should be easy enough"
771990893,9890,oranagra,2021-12-19T19:30:59Z,"```suggestion
    } {OK} {singledb:skip needs:debug}
```"
775114399,9890,enjoy-binbin,2021-12-25T06:53:44Z,"```
# https://github.com/redis/redis/runs/4630759823?check_suite_focus=true#step:6:400
[err]: module propagation with timer and CONFIG SET maxmemory in tests/unit/moduleapi/propagate.tcl
Expected '' to match 'incr notifications' (context: type source line 822 file /home/runner/work/redis/redis/tests/test_helper.tcl cmd {assert_match [lindex $patterns $j] [read_from_replication_stream $s]} proc ::assert_replication_stream level 1)
```

The test failed once

and again
```
https://github.com/enjoy-binbin/redis/runs/4635559314?check_suite_focus=true#step:4:6630
```"
775353455,9890,oranagra,2021-12-27T06:17:32Z,happened again: https://github.com/redis/redis/runs/4638323673?check_suite_focus=true
775433453,9890,guybe7,2021-12-27T10:21:35Z,https://github.com/redis/redis/pull/10012
805410083,10293,PingXie,2022-02-13T20:20:50Z,"This exact slot enumeration logic has already been used twice in cluster.c. I wonder if it helps to single source it with a callback pattern that takes two parameters: the start index and the length. More specifically, I am thinking that the code block between line 5080 and 5094, inclusive, can be moved into a callback function while the rest of the for loop can be extracted into a generic enumeration function."
805410348,10293,PingXie,2022-02-13T20:23:31Z,I'd suggest using a non-sds version of the key_compare function to help cut down on the memory allocations.  The key_compare function can even take advantage of the fact that it is dealing with a fixed length key.
805425169,10293,zuiderkwast,2022-02-13T22:31:22Z,"I've thought about how to deduplicate this slot range enumeration logic too. My idea is create an iterator function which returns each slot range of a node:

```c
int start = 0, end = 0;
while (nextSlotRange(node, &start, &end)) {
   // do something for each range
}
```

I have an implementation. I can post it tomorrow."
805430433,10293,PingXie,2022-02-13T23:14:42Z,"another idea is to just use the clusterNode pointer itself as the key, which reduces the key size from 40 bytes to 8 bytes on 64bit platforms. "
805445282,10293,madolson,2022-02-14T00:57:35Z,"Worth mentioning we have two types of iterations:
1. We do a straight iteration through all of the slots and group them by slot ranges (see `CLUSTER SLOTS`)
2. We want a result which is the ordered list of nodes and then we want to iterate through those node's slots (see `CLUSTER NODES`. 

Need to make sure the iterator supports both, or still makes 2 easily attainable."
805446087,10293,madolson,2022-02-14T01:01:51Z,"I think this documentation is all that helpful, since it's pretty easy to scan through and see this all."
805446202,10293,madolson,2022-02-14T01:02:24Z,"I think we want to have TCP and TLS port here if available. We need to do some computation.

FYI @zuiderkwast "
805446290,10293,madolson,2022-02-14T01:03:00Z,"I think empty string is valid for endpoint, it means ""unknown endpoint""."
805446915,10293,madolson,2022-02-14T01:06:17Z,"Hm, we may need to take a call on this. Although it's used sporadically in documentation, ""primary"" is not really used as a role delimiter. We probably have to keep using master here for the time being for consistency."
805548391,10293,zuiderkwast,2022-02-14T06:56:55Z,What's the point of unknown endpoint? Shouldn't we omit it from the map in that case?
805674414,10293,zuiderkwast,2022-02-14T09:57:11Z,"@madolson Good point. The version posted below only iterates over a single node (i.e. it covers 2 but not 1) but I guess it can be adapted, or possibly 1 is different enough to have a separate iteration function for that.

<details>
<summary>int nextSlotRange(clusterNode *node, int *begin, int *end);</summary>

```C
/* Iterate over the slot ranges of a node. Use like this:
 *
 *     int start = 0, end = 0;
 *     while (nextSlotRange(node, &start, &end) {
 *         // This node has range start..end.
 *     }
 */
int nextSlotRange(clusterNode *node, int *begin, int *end) {
    int j;
    int start = -1;
    for (j = (*end == 0) ? 0 : *end + 1; j < CLUSTER_SLOTS; j++) {
        int bit = clusterNodeGetSlotBit(node, j);
        if (bit && start == -1) start = j;
        if (start != -1 && (!bit || j == CLUSTER_SLOTS-1)) {
            if (bit && j == CLUSTER_SLOTS-1) j++;
            *begin = start;
            *end = j - 1;
            return 1;
        }
    }
    return 0;
}
```
</details>"
805678079,10293,zuiderkwast,2022-02-14T10:01:23Z,"One possibility: We don't need ""role"" if we just decide that the first node is the master and the following nodes are replicas."
805715299,10293,zuiderkwast,2022-02-14T10:44:32Z,"Yes, I agree. Probably something like this:

```C
    int port = server.cluster_announce_port ?
        server.cluster_announce_port : server.port;
    int tls_port = server.cluster_announce_tls_port ?
        server.cluster_announce_tls_port : server.tls_port;
```

and omitting any port if it's zero."
805744848,10293,hpatro,2022-02-14T11:22:03Z,I used the above while writing the below code 😄 
805944883,10293,hpatro,2022-02-14T15:14:12Z,"@zuiderkwast  I have added a conditional check if the node provided is null, we move on to the next slot. WDYT ?

```
int nextSlotRange(clusterNode *node, int *begin, int *end) {
    int j;
    int start = -1;
    if (node == NULL) {
        *begin = *begin + 1;
        *end = *begin;
        if (*end == CLUSTER_SLOTS) {
            return 0;
        } else {
            return 1;
        }
    }
    for (j = (*end == 0) ? 0 : *end + 1; j < CLUSTER_SLOTS; j++) {
        int bit = clusterNodeGetSlotBit(node, j);
        if (bit && start == -1) start = j;
        if (start != -1 && (!bit || j == CLUSTER_SLOTS - 1)) {
            if (bit && j == CLUSTER_SLOTS - 1) j++;
            *begin = start;
            *end = j - 1;
            return 1;
        }
    }
    return 0;
}
```

```
    int start = 0, end = 0;
    clusterNode *n = server.cluster->slots[start];
    while (nextSlotRange(n, &start, &end)) {
        if (n != NULL) {
            sds name = sdsnewlen(n->name, CLUSTER_NAMELEN);
            dictEntry *de = dictFind(nodeToSlotPair, name);
            sdsfree(name);
            list *slotPair;
            if (de == NULL) {
                slotPair = listCreate();
                dictAdd(nodeToSlotPair, sdsnewlen(n->name, CLUSTER_NAMELEN), slotPair);
            } else {
                slotPair = dictGetVal(de);
            }
            if (start != end) {
                listAddNodeTail(slotPair, sdscatfmt(sdsempty(), ""%i-%i"", start, end));
            } else {
                listAddNodeTail(slotPair, sdscatfmt(sdsempty(), ""%i"", start));
            }
        }
        if ((end + 1) != CLUSTER_SLOTS) {
            n = server.cluster->slots[end + 1];
        }
    }
```"
805949107,10293,hpatro,2022-02-14T15:18:06Z,"I think keeping the role is safe, don't want to leave it to assumption. I'm moving it to `master` for now."
806043486,10293,zuiderkwast,2022-02-14T16:50:41Z,"Creating a temporary dict seems unnecessary. Maybe we can avoid it?

I think it's cheaper to iterate over the structures and add replies directly without allocating any extra structures, even if we might need to iterate over the nodes one extra time e.g. once just to count the shards to `addReplyArrayLen(c, numshards);`.

If we need to create a structure like this one, then perhaps it can be stored permanently or maybe we can change the existing structures to be more optimized for CLUSTER SHARDS (if possible)."
806115474,10293,zuiderkwast,2022-02-14T18:13:31Z,"@hpatro if n == NULL, the function returns a range with a single slot for no node? I think it is strange. It relies on the caller to make sure that `begin + 1` has no node. Maybe you meant `*begin = *end + 1`? I think the next range starts where the previous range ends. Or did you change this?

Anyway, this function cannot check this slot has no node, so I think it is strange. Better check if n == NULL and find node with a slot before calling the iterator function.

Maybe we need another function `nextSlotRangeAndNode(*begin, *end, *node)` which also returns the node of the next range...? This logic is different and it is less complex to make them separate functions IMO.

```C
    int start = 0, end = 0;
    clusterNode *n;
    while (nextSlotRangeAndNode(&start, &end, &n)) {
        if (n == NULL) continue;
        // use node and range
    }
```

Implementation (untested):

```C
/* Finds the next slot range and its node, starting at end + 1. The returned node
 * is NULL if the slot range is unassigned. */
int nextSlotRangeAndNode(int *begin, int *end, clusterNode **node) {
    int start = (*end == 0) ? 0 : *end + 1;
    if (start >= CLUSTER_SLOTS)
        return 0;
    clusterNode *n = server.cluster->slots[start];
    int j = start;
    while (j < CLUSTER_SLOTS && server.cluster->slots[j] == n)
        j++;
    *begin = start;
    *end = j - 1;
    *node = n;
    return 1;
}
```

----

One question: Why do we need to return the slots in ascending order? Can't we just use the order of the master nodes?"
806394778,10293,madolson,2022-02-15T02:24:38Z,"It means that clients should reach out to the same endpoint connected to. Omitting feels weird to me, but I suppose that could be defined behavior. "
806397112,10293,madolson,2022-02-15T02:31:04Z,I think we could re-use the iterator logic for `CLUSTER NODES` that loops through all the slots an caches the response on each node. We can then re-iterate through the cached nodes to add the output.
806588636,10293,zuiderkwast,2022-02-15T08:51:13Z,"Right, so empty string means use same as current. Omitted could mean that there is no endpoint at all, or that it's completely unknown. The word ""unknown"" is perhaps not the best term to use here..."
808358984,10293,hpatro,2022-02-16T19:01:11Z,"For now, I'm not picking this up. I have shared the code between `CLUSTER NODES` and `CLUSTER SHARDS`. May be we can come back later to improve the redundancy for `CLUSTER SLOTS`"
808359288,10293,hpatro,2022-02-16T19:01:35Z,Removed this part of code.
810566529,10293,madolson,2022-02-20T04:04:18Z,"""unknown endpoint' is what we defined here, https://redis.io/commands/cluster-slots. If you have a better term we can update it, but I couldn't think of a better one. "
810567930,10293,madolson,2022-02-20T04:25:42Z,None of this seems to be used anymore
810568208,10293,madolson,2022-02-20T04:29:40Z,"```suggestion
    addReplyBulkCString(c, getPreferredEndpoint(node));
```"
810568216,10293,madolson,2022-02-20T04:29:58Z,tls_port ?
810568583,10293,madolson,2022-02-20T04:35:26Z,"```suggestion
    listIter li;
    listNode *ln;
    listRewind(slot_info_pair, &li);
    
    while(ln = listNext(&li)) {
        unsigned long start = (unsigned long)ln->value;
        ln = listNext(&li);
        /* List should have even number of elements */
        serverAssert(ln != NULL);
        unsigned long end = (unsigned long)ln->value;
        if (start == end) {
            ci = sdscatfmt(ci, "" %i"", start);
        } else {
            ci = sdscatfmt(ci, "" %i-%i"", start, end);
        }
    }
```"
810568708,10293,madolson,2022-02-20T04:37:09Z,"Let's add some documentation here, and probably for the rest of the functions."
810568759,10293,madolson,2022-02-20T04:38:08Z,"Not sure exactly why we return here, should we compute the result then?"
810569303,10293,madolson,2022-02-20T04:44:38Z,"I assume that the assumption is that when n->slot_info_pair is NULL, the node owns no slots? If so, let's document that.
```suggestion
        addNodeReplyForClusterShard(c, n, n->slot_info_pair);
        if (n->slot_info_pair) {
            listRelease(n->slot_info_pair);
            n->slot_info_pair = NULL;
        }
```"
810569451,10293,madolson,2022-02-20T04:46:28Z,This can never be 0 right? At the very least the node passed in is serving these slots. 
810569824,10293,madolson,2022-02-20T04:52:20Z,"```suggestion
        /* If no slot info pair is provided, the node owns no slots */
        addReplyArrayLen(c, 0);
```"
810569992,10293,madolson,2022-02-20T04:54:37Z,"Let's just embed this all in ""create a 4 node cluster with custom slots"""
810570087,10293,madolson,2022-02-20T04:55:43Z,"You should just be able to call this, the previous call was for testing hostnames."
810570107,10293,madolson,2022-02-20T04:55:54Z,What does this mean?
810570173,10293,madolson,2022-02-20T04:56:32Z,"Would be ideal to set this at the beginning, and use it to assign slots."
810570301,10293,madolson,2022-02-20T04:58:17Z,Let's replace this with a wait_for
810570447,10293,madolson,2022-02-20T05:00:52Z,Why are there two writable tests?
810701929,10293,hpatro,2022-02-20T23:27:18Z,"For the invocation from `clusterGenNodeDescription` for  `CLUSTER NODES` output, the result is computed if `slot_info_pair` is NULL. For safety, I added it, removing it."
811243772,10293,hpatro,2022-02-21T15:37:06Z,"After failover, I've added this to verify if the cluster is writable. Is it unnecessary ?"
811629632,10293,madolson,2022-02-22T07:02:29Z,Why wouldn't the cluster be writable? We normally don't test this after each failover
815368229,10293,PingXie,2022-02-26T23:58:43Z,"nit: 

1. lower case 'c' for cluster in ""the total number of Cluster nodes""
2. missing an ""an"" between ""Get"" and ""array"" in ""Get array of cluster slots to node mappings"""
815368592,10293,PingXie,2022-02-27T00:02:30Z,"nit: associated ""with"" it"
815372394,10293,PingXie,2022-02-27T00:50:39Z,"nit: rename ""node"" to ""master"" to improve readability? "
815373010,10293,PingXie,2022-02-27T00:59:39Z,would PFAIL be a state worth exposing?
815373352,10293,PingXie,2022-02-27T01:03:52Z,"I think adding `addReplyArrayLen(c,0)` for empty shards as well would make the parsing easier."
815384251,10293,madolson,2022-02-27T03:53:56Z,"I think our tenets here should be that the state is actionable for clients. So I think PFAIL (aka timedout) isn't that useful, since it's not committed yet."
815386541,10293,PingXie,2022-02-27T04:27:00Z,"It could be actionable I think especially in the read-replica use case. Not saying I know of a client actually doing it, I can imagine though a latency-sensitive client skips PFAIL replicas for read traffic because otherwise there is a nontrivial amount of likelihood that a PFAIL replica is actually down permanently so knowing PFAIL would be useful if the client would like to reduce latency as much as possible, either when the cluster is in a steady state or going through some node failures. Since PFAIL is a well-known and well-defined state and exposing it is neither complicated nor costly, I would like to err on the side of exposing it and let the client get creative. My suggestion for including epoch follows the same philosophy. "
815611962,10293,madolson,2022-02-28T06:35:29Z,"Empty shards can not exist, since if they were they really empty there would be node to call addShardReplyForClusterShard() on."
815613216,10293,madolson,2022-02-28T06:38:42Z,"I don't agree we should err on the side of ""as much of possible"". I honestly think we should do the opposite, release as little as possible. My mentality is if we the maintainers of redis built our version of a perfect client, would we include this information, I would guess not. Transient failures does not imply we should avoid that node, I would rather wait for the consensus of the cluster to say the node is down."
815623483,10293,madolson,2022-02-28T07:03:28Z,"I changed it to addShardReplyForclusterShards. I'm not sure that is much better, but I didn't think addMaster really made that much sense either. Thoughts?"
815630350,10293,PingXie,2022-02-28T07:19:15Z,"> I don't agree we should err on the side of ""as much of possible"". 

I too believe in the [KISS](https://en.wikipedia.org/wiki/KISS_principle) principle so to clarify a bit, I am not trying to push a big and bloated command. My concern is that exposing this state would require changing the public interface in the future, which carries backcompat risk (probably more so with epoch); given that it is such a trivial thing to add it now, that is why I'd like to bring this discussion up now.

>I would rather wait for the consensus of the cluster to say the node is down.

From a quick search, it seems like #10195 could benefit from this information. 

"
815634595,10293,madolson,2022-02-28T07:27:46Z,">  My concern is that exposing this state would require changing the public interface in the future, which carries backcompat risk (probably more so with epoch); given that it is such a trivial thing to add it now, that is why I'd like to bring this discussion up now.

This is one of the reasons we wanted to move to a dict, so that we can add more fields and clients can opt in to them. 

I pinged the tencent guy to weigh in. I would like to understand their use case a little bit more, but am more inclined to add it now. I'll add it to the top level comment as a consideration."
815635023,10293,madolson,2022-02-28T07:28:44Z,"Probably fine, @zuiderkwast maybe make an issue for improvement?"
815635275,10293,PingXie,2022-02-28T07:29:19Z,"Strictly speaking, ""empty shards can't exist"" is not part of the contract of `addNodeReplyForClusterShard` but a state inferred from the only caller of `addNodeReplyForClusterShard` right now so if this function is ever used outside of this ""boundary"" in the future, there is a chance an empty shard could be introduced. So how about adding a serverAssert on the list length of `nodes_for_slot` not being 0?"
815658291,10293,PingXie,2022-02-28T08:11:43Z,SGTM. Thanks @madolson 
815662203,10293,PingXie,2022-02-28T08:18:18Z,LGTM
815686565,10293,zuiderkwast,2022-02-28T08:54:37Z,"I think a plural is good naming style for a list.

```suggestion
    node->slot_info_pairs = NULL;
```"
815697032,10293,zuiderkwast,2022-02-28T09:08:36Z,"```suggestion
        set key ""{ch3}$j""
```"
815723422,10293,hpatro,2022-02-28T09:42:33Z,Agreed.
816445859,10293,madolson,2022-03-01T04:46:45Z,I'm usually good with asserts :)
827669805,10293,enjoy-binbin,2022-03-16T06:36:10Z,"This fails in my GH cluster test 
https://github.com/enjoy-binbin/redis/runs/5563545978?check_suite_focus=true#step:9:681
```
02:18:22> Kill a node and tell the replica to immediately takeover: FAILED: caught an error in the test Port 30000 does not return available after killing instance.
Port 30000 does not return available after killing instance.
```"
828228419,10293,madolson,2022-03-16T16:40:07Z,Will take a look here.
828245535,10293,madolson,2022-03-16T16:56:53Z,"Bane of my existence, for some reason this test only fails when you run the entire suite but passes individually. I'm committing to deprecating this test suite now."
828700223,10293,enjoy-binbin,2022-03-17T02:31:50Z,"please take a look here (tls_port and the above port in tls mode)
the cluster-shards test failed in tls. (https://github.com/redis/redis/runs/5578694306?check_suite_focus=true#step:9:682)

with this patch, the test pass, but I'm not very familiar with tls mode
```
    int port = server.cluster_announce_port ? server.cluster_announce_port : server.port;
    int tls_port = server.cluster_announce_tls_port ? server.cluster_announce_tls_port : server.tls_port;
    if (port) {
        addReplyBulkCString(c, ""port"");
        if (tls_port)
            addReplyLongLong(c, node->pport);
        else
            addReplyLongLong(c, node->port);
        reply_count++;
    }

    if (tls_port) {
        addReplyBulkCString(c, ""tls-port"");
        addReplyLongLong(c, node->port);
        reply_count++;
    }
```

in case anyone will fix it, i would like to mention:
1. since we deprecated cluster-slots, maybe we need to add a doc_flags in cluster-slots.json like others
2. i notice cluster-shards.json, it's indented by two spaces, we use four spaces elsewhere
3. and the three `wait_for_condition 50 100` in 28-cluster-shards.tcl, there may be a timing issue, at least I've encountered it locally (centos7), so maybe change it to 500 100"
828718974,10293,madolson,2022-03-17T03:15:11Z,"For 1, we marked it as deprecated. Was there something else that you meant?"
828720465,10293,enjoy-binbin,2022-03-17T03:19:27Z,"i mean the doc_flags, like other commands?
```
        ""deprecated_since"": ""6.2.0"",
        ""replaced_by"": ""`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` argument"",
        ""doc_flags"": [
            ""DEPRECATED""
        ],
```"
828726645,10293,madolson,2022-03-17T03:37:17Z,"Oh, I guess I didn't realize that was a thing."
828740288,10293,madolson,2022-03-17T04:16:34Z,@hpatro Do you have time to address this? Otherwise I can take a look tomorrow. 
828894809,10293,zuiderkwast,2022-03-17T09:05:14Z,"@enjoy-binbin Regarding the `port` and `tls-port` logic: `server.tls_port` is always a TLS port and `server.port` is always a plaintext (AKA cleartext) port if specified. For the cluster bus, it depends on the `server.tls_cluster` variable:

```C
if (server.tls_cluster) {
    // node->port is TLS port (always set)
    // node->pport is plaintext port, optional (if non-zero)
} else {
    // node->port is plaintext port (always set)
    // There is no TLS port
}
```"
865990198,10293,enjoy-binbin,2022-05-05T14:45:28Z,"the slots here is not integers, see #10680
> inconsistent with top comment or CLUSTER SHARDS docs
```
127.0.0.1:5001> cluster shards
1) 1) ""slots""
   2) 1) ""0""
      2) ""16383""
```"
1590318231,13243,sundb,2024-05-05T13:47:32Z,"it shouldn't be `Estimate`, maybe like `lpEntrySizeInteger(long long)`."
1590326786,13243,sundb,2024-05-05T14:20:37Z,"```suggestion
        if ((o->encoding == OBJ_ENCODING_LISTPACK) ||
            (o->encoding == OBJ_ENCODING_LISTPACK_EX)) 
        {
            unsigned char *lp = hashTypeListpackGetLp(o);
            size_t l = lpBytes(lp);
```"
1590326835,13243,sundb,2024-05-05T14:21:04Z,"```suggestion
            int with_ttl = 0; /* whether there is at least one field with a valid TTL */
```"
1590329271,13243,sundb,2024-05-05T14:34:39Z,what about using `tuple_len` like `lpRandomPair`.
1590333765,13243,sundb,2024-05-05T14:49:32Z,"i don't like using hashAddCtx as this way, did you just for updating the ebuckets in the hashTypeSetExDone()?
if so, i think we can extract these code to separate method."
1590482286,13243,sundb,2024-05-06T02:19:13Z,"in fact, i've been confused about this, traditionally we return 1 for success and 0 for fail.
If we want 0 to indicate success, we should have failure return a negative number instead of 1.
@moticless please correct me if i'm wrong."
1590482697,13243,sundb,2024-05-06T02:20:42Z,uncessary change?
1590485836,13243,sundb,2024-05-06T02:32:54Z,"```suggestion
robj *rdbLoadObject(int rdbtype, rio *rdb, sds key, redisDb *db, int dbid, int *error);
```"
1590503389,13243,sundb,2024-05-06T03:31:56Z,"why create the hash object in advance?
i saw that you removed `zfree(encoded);` and `o->ptr = NULL;`, which will cause memory leak(encoded) and crash due to ptr(OBJ_STRING) and type(OBJ_HASH) don't correspond to."
1590585815,13243,sundb,2024-05-06T06:25:44Z,"this allows listpackExExpire() to be more independent.
```suggestion
        listpackExExpire(hashObj, &info);
        server.stat_expired_hash_fields += info.itemsExpired;
```"
1590586545,13243,sundb,2024-05-06T06:26:35Z,"since listpackEx can be accessed outside server.h, i think we can discard these methods, and listpackExCreateFromListpack() is only used in rdb.c, it's not a good deal to add a separate for it."
1590631988,13243,ronen-kalish,2024-05-06T07:23:35Z,These are the returned values. I only corrected the comment so that it'll correctly reflect what is being returned. Suggestions on the values themselves should probably be addressed by @moticless.
1590633340,13243,ronen-kalish,2024-05-06T07:25:05Z,"Reverted that, although AFAIK this isn't necessary. But it's probably better addressed at a different commit."
1590661195,13243,sundb,2024-05-06T07:54:02Z,"yes, but I've seen other developers reference listpack.h/.c directly into their code."
1590813237,13243,ronen-kalish,2024-05-06T10:24:28Z,"I agree with the comment, but just to verify: `listpackExExpire` was increasing `stat_expired_hash_fields` internally before this change. So after my fix it will not increase ANY stat value internally, instead its callers will increase whichever stat value is right after calling `listpackExExpire`, based on the value returned in `info.itemsExpired`. Is this what you mean?"
1590822025,13243,moticless,2024-05-06T10:34:36Z,"I agree. it should return 1 on success. @ronen-kalish , if you already touching there, maybe you can fix it. Thanks."
1590944368,13243,ronen-kalish,2024-05-06T12:25:14Z,"@moticless, sure. Will do."
1590952443,13243,sundb,2024-05-06T12:32:58Z,"yes, this decouples listpackExExpire() from the statistics."
1590954195,13243,ronen-kalish,2024-05-06T12:34:32Z,"This is the (short version) of the new API opened by @moticless in t_hash to add fields to a hash object, plus setting their expiration time.
Not commenting on the specific implementation, I think it is better (in terms of encapsulation, at least) to have the logic of adding / deleting / setting expiry (of) fields in t_hash.c instead of rdb.c.
Is there any other specific suggestion?"
1591017165,13243,ronen-kalish,2024-05-06T13:29:14Z,"Changed that to return C_OK and C_ERR. Note that this requires including server.h, which also requires removing other include statements to avoid build errors."
1591020657,13243,moticless,2024-05-06T13:31:56Z,I really want to avoid include server.h as much as I can. The file server.h is a huge mess to include.
1591066952,13243,ronen-kalish,2024-05-06T14:06:38Z,"Not sure I understand. `o` is created before this point as string (line 2493) for all the ziplist / listpack encoded types. I need to convert it here to hash_litspack / hash_listapck_ex encoding. Would appreciate other suggestions.
I removed the `zfree(encoded)` and `o->ptr = NULL` bits as memory free will happen as part of `decrefcount(o)` (at least after setting its correct type and encoding) and returning NULL will block any accesses to `o->ptr` as far as I can see.
"
1591097177,13243,sundb,2024-05-06T14:28:17Z,"yeah, you're right. "
1591122527,13243,ronen-kalish,2024-05-06T14:45:51Z,"OK, changed it back to 0 on success and -1 on error (which are identical to C_OK and C_ERR, respectively)
"
1591135672,13243,sundb,2024-05-06T14:54:52Z,"i'm fine with either ways, but i hope that it's better for all ebuckets interfaces to have the same way."
1591147501,13243,ronen-kalish,2024-05-06T15:03:32Z,"OK, removed.
I created these in the first place because `listpackEx` (which was `listpackTTL` back then) was defined in `t_hash.c` and thus not accessible from `rdb.c`"
1592039147,13243,sundb,2024-05-07T08:37:24Z,"it can be complicated, i think we can leave it as now, and improve it in the future."
1594450544,13243,moticless,2024-05-08T18:12:51Z,No need to pass `dbid`. It can be extracted from `db` (`db->id`)
1594542286,13243,moticless,2024-05-08T19:40:31Z,"Better to align terminology with t_hash.c. Maybe something like:
```
#define RDB_TYPE_HASH_EX 22
#define RDB_TYPE_HASH_LISTPACK_EX 23
```
""EX"" can be interpret as ""Expiry"" and if evolve further as ""Extended""."
1594980427,13243,moticless,2024-05-09T05:25:54Z,"I think we need here better clarification. We can also merge the logic below into the same line to better grasp the idea. Something like:
```
            /* Determine the hash layout to use based on the presence of at least 
             * one field with a valid TTL. If such a field exists, employ the 
             * RDB_TYPE_HASH_METADATA layout, including tuples of [field][value][ttl].
             * Otherwise, use the standard RDB_TYPE_HASH layout containing only 
             * the tuples [field][value]. */            
            int with_ttl = (hashTypeGetMinExpire(o) != EB_EXPIRE_TIME_INVALID);

```"
1594986367,13243,moticless,2024-05-09T05:35:25Z,"To simplify the code, these lines can be merged into the condition with `with_ttl` below."
1594987501,13243,moticless,2024-05-09T05:37:21Z,"We can merge the condition above into this line to simplify the code. Something like:
```
                if (with_ttl) {
                    uint64_t ttl = hfieldGetExpireTime(field);
                    if ((n = rdbSaveLen(rdb, (ttl != EB_EXPIRE_TIME_INVALID) ? ttl : 0)) == -1) {
                        dictReleaseIterator(di);
                        return -1;
                    }
                    nwritten += n;
                }
```
We save a condtion, and all the logic sits in one place."
1595005592,13243,moticless,2024-05-09T06:04:25Z,"```suggestion
 *
 * Whether tuple is of size 1 (set), 2 or 3 (field-value[-ttl]),
 * first element in the tuple must be unique */
```"
1595033368,13243,moticless,2024-05-09T06:42:12Z,`ttl` is not accurate. it is absolute time. Consider using `expire` or `expireAt` instead .
1595106114,13243,sundb,2024-05-09T07:57:57Z,"```suggestion
            assert_equal [lsort [r hgetall key]] ""1 2 3 a b c""
```"
1595199285,13243,moticless,2024-05-09T09:21:40Z,"There is a diff in the logic vs. handling EXPIRE which also taking into account `RDBFLAGS_AOF_PREAMBLE`.

Please follow EXPIRE logic regarding AOF preamble. Might need also `!(rdbflags&RDBFLAGS_AOF_PREAMBLE) &&`"
1595207993,13243,moticless,2024-05-09T09:30:23Z,No need to check length of integer value against `hash_max_listpack_value` which aimed for strings only. Simpler.
1595225894,13243,moticless,2024-05-09T09:45:24Z,Not sure i understand your TODO comment. The number of tuples of the loaded hash is bigger than initial size of and so we try to expand the table.
1595229632,13243,moticless,2024-05-09T09:49:07Z,This assert is redundant. We don't have any break condition in the loop and stop condition is `len==0`
1595242369,13243,moticless,2024-05-09T10:01:51Z,"```suggestion
        /* check for empty key (if all fields were expired) */
        if (hashTypeLength(o, 0) == 0) {
            zfree(hashAddCtx);
            decrRefCount(o);
            goto emptykey;
        }
        
        if (hashAddCtx != NULL) {
           /* Call it after verified hash not empty. Otherwise it might dbDelete() */
            hashTypeSetExDone(hashAddCtx);
            zfree(hashAddCtx);
        }
```"
1595244986,13243,moticless,2024-05-09T10:04:35Z,Use constant `EB_EXPIRE_TIME_INVALID` instead of `UINT64_MAX`. Note that also this way it will politely ignores invalid TTLs equal or bigger than it (Can consider failing if value >= EB_EXPIRE_TIME_INVALID)
1595340117,13243,moticless,2024-05-09T11:44:27Z,"@ronen-kalish , I sent you a patch that suppose to simplify all the usage of HashTypeGroupSet* into one simple function without any malloc(). Please review it."
1595348788,13243,moticless,2024-05-09T11:54:23Z,"```suggestion
                if (rdbtype == RDB_TYPE_HASH_LISTPACK_TTL) {
                    listpackEx *lpt = zcalloc(sizeof(*lpt));
                    lpt->lp = encoded;
                    lpt->meta.trash = 1;
                    lpt->key = NULL;
                    o->ptr = lpt;
                    o->encoding = OBJ_ENCODING_LISTPACK_EX;
                    o->type = OBJ_HASH;
                } else {
                    o->type = OBJ_HASH;
                    o->encoding = OBJ_ENCODING_LISTPACK;
                }
```"
1595543685,13243,moticless,2024-05-09T14:39:13Z,"I think you forgot to init `lpt->key`. If that so, please add appropriate test.
We should have a test that makes lazy/active-expiry after rdb load of dict/listpack."
1595547524,13243,moticless,2024-05-09T14:41:47Z,No need to pass `dbid`. Included in `db`
1595558529,13243,moticless,2024-05-09T14:50:17Z,"We need a finer resolution of expiry after restart, whether the item was expired:
1.  During RDB load
2.  Shortly after by active-expiration 
3. Later by lazy expiration.

And apply this test for listpack and dict."
1595570271,13243,ronen-kalish,2024-05-09T14:59:26Z,"Right, only that db might be NULL (in RDB verification scenario)."
1595578747,13243,ronen-kalish,2024-05-09T15:06:21Z,"This is anyway problematic considering how tests are written.
When you ""hget"" or ""hgetall"", active expiry spring into action, doesn't it? So it's not really checking expiry on load...
Is there a way to disable it?"
1595618622,13243,ronen-kalish,2024-05-09T15:35:07Z,"Same as above, db can sometimes be NULL"
1595640174,13243,ronen-kalish,2024-05-09T15:47:45Z,"Merged, but remove the internal condition outside (this condition is not avoided regardless of its location, but it's simpler to understand when it's not used as a function param IMHO).
The original location was actually to allow saving the ""options"" filed (whether value and/or TTL exists) but since this was deleted, it was indeed wrongly placed."
1595668290,13243,ronen-kalish,2024-05-09T16:10:29Z,Reviewed and merged.
1595668568,13243,ronen-kalish,2024-05-09T16:10:45Z,fixed as part of the patch
1597601335,13243,ronen-kalish,2024-05-12T09:51:27Z,"Fixed by removing dbid, as it was only used for module loading and in that case, the code using it would return before using it if it was in rdb check mode. Added a validation db is not NULL before using it.
However, there was some accommodation to do in order to adjust to the option of NULL db when loading HFE, since db is used to connect all fields with expiry."
1597614913,13243,ronen-kalish,2024-05-12T11:13:36Z,"I fixed the key. Also moved setting `o->encoding` into the if.
Actually current tests caught that and crashed, so it's sort of covered, but I'll add testa for actual active expiry shortly after loading for both dict and listpack, as agreed."
1597617073,13243,ronen-kalish,2024-05-12T11:26:15Z,"My TODO is about len being decreased every iteration, so the expansion is done only for the reaming size.
After looking at the expansion code, I think this might be a real bug.
@moticless, would appreciate your opinion about that.
"
1601374803,13243,sundb,2024-05-15T10:26:22Z,"```suggestion
        ((obj = rdbLoadObject(type,&payload,key->ptr,c->db,NULL,0)) == NULL))
```"
1601400240,13243,sundb,2024-05-15T10:44:32Z,let output parameter `error` at the endo of parameter list? 
1601446610,13243,sundb,2024-05-15T11:20:09Z,"```suggestion
void initDictExpireMetadata(sds key, robj *o) {
```"
1601498381,13243,tezc,2024-05-15T11:54:22Z,"If I'm not mistaken, these functions declarations are letfovers. "
1601504981,13243,sundb,2024-05-15T11:58:53Z,"these two are new added, i guess you keep them when deal with conflict."
1601513301,13243,tezc,2024-05-15T12:05:51Z,Probably I'm missing something but where do we call this function with keyInDB = 0 ?
1601516477,13243,sundb,2024-05-15T12:07:13Z,"```suggestion
```suggestion
    foreach {type lp_max_entries} {listpackex 512 hashtable 0} {
        test ""hash field expiration save and load rdb one expired field, ($type)"" {
            r config set hash-max-listpack-entries $lp_max_entries
            r FLUSHALL

            r HMSET key a 1 b 2 c 3 d 4
            r HEXPIREAT key 2524600800 2 a b
            r HPEXPIRE key 100 1 d
            assert_encoding $type key 
```"
1601516699,13243,ronen-kalish,2024-05-15T12:07:18Z,"This is a leftover from a previous version, I'll remove it. Thanks for noticing!"
1601519354,13243,tezc,2024-05-15T12:08:23Z,"yes, I had these in my PR. Then, I removed them. So, leftover declarations from the previous rebase. "
1601525369,13243,sundb,2024-05-15T12:11:28Z,"@tezc i saw you as Ronen.
didn't you find your avatars are the same except the color."
1601543740,13243,tezc,2024-05-15T12:23:06Z,I'd be useful to print log on error. Please consider if other error paths need logging as well.
1601545065,13243,tezc,2024-05-15T12:24:04Z,Maybe we can export `listpackExAddNew()` and `listpackExCreate()` and use it in this file. 
1601567353,13243,tezc,2024-05-15T12:37:24Z,@sundb lol wish there is a way to change the avatar :D 
1601571437,13243,sundb,2024-05-15T12:39:53Z,"what about let md at the end, like `hash-hashtable-md`, if we add new ones in the future we won't continue these styles."
1601585318,13243,ronen-kalish,2024-05-15T12:49:21Z,"Using `listpackExAddNew` would be, IMHO, not very efficient as it is assumed the hash was already sorted before saving, so each entry read will be added at the end and, so (possibly) the entire listpack has to be traversed for each item. Possibly, a ""hint"" parameter can be added to it to so that it will be notified the new field should be added as the last entry, and it will only verify this.
WDYT?
(I'll try to use `listpackExCreate` reagrdless)"
1601608194,13243,tezc,2024-05-15T13:04:32Z,"Please correct me if I'm wrong, currently we don't read fields ordered by TTL. So, even without `listpackExAddNew()`, we have to fix the current code here as we don't have items ordered? 

Do we have any other option than calling `listpackExAddNew()`?. If field does not have TTL, it will just append the field without traversing it. Otherwise, we have to walk over the list as we have to find the correct spot, no? 
"
1601621708,13243,ronen-kalish,2024-05-15T13:12:38Z,"I guess you're right, order is indeed not guaranteed when reading an object saved as dict, I'll use `listpackExAddNew` instead."
1601653864,13243,tezc,2024-05-15T13:29:41Z,"btw a test case for it would be nice. 
e.g. add listpack 100 volatile and 100 non-volatile elements. Verify volatile ones expired after some time. If items are not ordered, active expiry will fail to expire some of the volatile fields. "
1601663322,13243,moticless,2024-05-15T13:35:36Z,"Indeed, `len` not truly represent number of tuples. But there is no bug, only inefficiency.  
Should be a distinction between `nTuples` and `nTuplesLeft`. 
Please consider either having it as part of this PR if you don't see any risk. 
Otherwise, let's have it on a distinct PR."
1601757358,13243,moticless,2024-05-15T14:29:06Z,"Following this change, it won't convert any more to HT in case of `db` is NULL. 

Instead I think we should modify `hashTypeConvert()` to accept pointer of `redisDb` instead of `ebuckets hexpires` and let it handle with NULL. It will simplifes conditions at rdb.c as well."
1601768547,13243,ronen-kalish,2024-05-15T14:35:58Z,"Not sure I follow - what does this change have to do with conversion to dict? Any why should we care about conversion to dict when db is NULL? In this case, the requirement (AFAIK) is to check RDB validity, the resulting object should be discarded (at least in this repo). What am I missing?"
1601779529,13243,moticless,2024-05-15T14:40:59Z,I think we should remove this debug 
1601781550,13243,ronen-kalish,2024-05-15T14:42:04Z,"Oops...
"
1601782766,13243,moticless,2024-05-15T14:42:49Z,"```suggestion
/* NOTE: hexpires can be NULL (Won't attept to register in global HFE DS) */
```"
1601786735,13243,moticless,2024-05-15T14:45:24Z,Please write a comment that explains the diff
1601788680,13243,moticless,2024-05-15T14:46:36Z,Please give short explanation
1601789416,13243,tezc,2024-05-15T14:47:03Z,This comment has become a stale one right?
1601792221,13243,moticless,2024-05-15T14:48:54Z,Give 101 instead of 100 to be clear.
1601795401,13243,tezc,2024-05-15T14:50:51Z,We may add a test for dump/restore commands. (I couldn't see one but please ignore if it already exists)
1601796832,13243,tezc,2024-05-15T14:51:43Z,"seems like you are doing this validation above, no? "
1601798184,13243,moticless,2024-05-15T14:52:39Z,"@tezc, we have a distinct task for dump restore."
1601812077,13243,ronen-kalish,2024-05-15T15:01:24Z,"right, removed"
1601812531,13243,ronen-kalish,2024-05-15T15:01:45Z,@sundb is supposed to be working on this
1601814110,13243,tezc,2024-05-15T15:02:48Z,"Please trigger a daily build for your branch. Tests that rely on timing might fail on slow environments. 

To wait something, better approach is using `wait_for_condition`. Please consider if it is possible to use in these tests. "
1601816012,13243,moticless,2024-05-15T15:04:06Z,"You don't miss anything. Just saw a change in the logic which i tend to avoid if not necessary at large changes. And in addition to the fact that passing `redisDb` to `hashTypeConvert()` it will relax the condtions at `rdb.c`, made me to write my thought."
1601818351,13243,ronen-kalish,2024-05-15T15:05:40Z,"Not sure to which validation you are referring: to the comment in the TODO, to `db != NULL` or to `hashTypeLength(o, 0) > server.hash_max_listpack_entries`, and where exactly is this happening above?"
1601822215,13243,tezc,2024-05-15T15:08:26Z,"I was referring to TODO: comment. (Sorry, while reviewing, I thought comment was on another line)"
1601833309,13243,ronen-kalish,2024-05-15T15:15:36Z,How do I trigger a daily build?
1601854849,13243,tezc,2024-05-15T15:28:25Z,"You should be able do it on your fork here: https://github.com/ronen-kalish/redis/actions/workflows/daily.yml
Daily -> run workflow -> Run workflow.  (See the descriptions for `jobs to skip`, `tests to skip` sections, write sth dummy to these boxes)

For your pr, I triggered one on my fork: https://github.com/tezc/redis/actions/runs/9098441743
It takes a few hours, fyi. "
1602506612,13243,sundb,2024-05-16T02:23:35Z,"deep_integrity_validation is 1 means that we will not trigger any assertion after loading this datatype.
so we should validate the ttl field is a valid integer, otherwise, we should trigger the assertion in listpackExExpireDryRun().
```
        s = lpGetValue(fptr, NULL, &val);
        serverAssert(!s);
```
am i missing something?"
1602571987,13243,sundb,2024-05-16T03:52:40Z,"restore with a corrupt data, and there is a string TTL inside it.
when enabling `sanitize-dump-payload`, the restore command shouldn't success.
```
config set sanitize-dump-payload yes
restore h 0 ""\x17--\x00\x00\x00\t\x00\x81a\x02\x01\x01\xf4\xa6\x96\x18\xb8\x8f\x01\x00\x00\t\x82f1\x03\x82v1\x03\x83foo\x04\x82f2\x03\x82v2\x03\x00\x01\xff\x0c\x00\xde@\xe57Q\x1c\x12V"" replace
hgetf h fields 2 f1 f2
```
"
1603334749,13243,sundb,2024-05-16T13:22:08Z,"after discuss with @ronen-kalish , let's deal with this together in restore/dump."
1603408929,13243,sundb,2024-05-16T13:59:18Z,please add a simply comment for this.
1603425721,13243,tezc,2024-05-16T14:08:57Z,"```suggestion
             * RDB_TYPE_HASH_METADATA layout, including tuples of [ttl][field][value].
```
seems like you save ttl first. "
1603440255,13243,ronen-kalish,2024-05-16T14:17:39Z,"You're right, it was recently changed, I forgot to update the comment."
1603483508,13243,sundb,2024-05-16T14:26:49Z,"maybe we can create hashtable or listpackex directly, instead of creating a listpack then converting to hashtable or listpackex.
may a TODO comment for future optimize."
1603486161,13243,sundb,2024-05-16T14:28:15Z,"if we exit here and o->encoding is hashtable, does it mean that db->hexpires still retain the robj?
but this is also has to do with a corrupt data, we can leave it to another restore/dump PR to do it."
1603519888,13243,ronen-kalish,2024-05-16T14:48:37Z,"Presumably no, the new object is only added to `db->hexpires` in the following `if` statement, so if the function returns here it was not yet added (and therefore should not be removed, obviously)"
718368776,9530,yossigo,2021-09-29T10:21:46Z,What about the null terminator? Consider just zstrdup().
718372811,9530,yossigo,2021-09-29T10:27:38Z,"Consider hardware archs that require alignment, I think this might break."
719075557,9530,madolson,2021-09-30T05:45:09Z,"Ack, my current plan is to make every 8 byte aligned. "
719079583,9530,madolson,2021-09-30T05:54:55Z,"None of this code will exist in the next revision, but I do forget about zstrdup a lot."
723837408,9530,madolson,2021-10-07T04:19:50Z,"After thinking about this more, I don't like it. I'll put the hostname in a separate field. It's probably good to have named values here."
723837917,9530,madolson,2021-10-07T04:21:39Z,"I'm going to also constrain the allowed characters here, to make sure it can be correctly parsed by cluster nodes. (Also noticed an extra space)"
736053569,9530,madolson,2021-10-26T00:18:02Z,"I didn't end up implementing this because their are arbitrary number of slots, so I kept the original proposal. "
746405266,9530,yossigo,2021-11-10T09:30:43Z,"Probably safer to free `n->hostname` here, the node is not guaranteed to be freshly created (not sure under what conditions though)."
746921786,9530,yossigo,2021-11-10T19:28:26Z,"Do we really need `cluster-prefer-hostname`?

An alternative is to treat `cluster-announce-hostname` like the other `cluster-announce-` parameters and simply use the hostname instead of the IP whenever it's available.

This is not mutually exclusive to the idea of extending `CLUSTER SLOTS` with additional meta-data."
746923794,9530,yossigo,2021-11-10T19:31:27Z,"Looks like `uint16_t` is wrong here, `length` is `uint32_t`. Given the flood of int overflows we've encountered I think we should try to stick to `size_t` internally."
746927344,9530,yossigo,2021-11-10T19:36:44Z,"Not thrilled about relying on `hdr->totlen` to determine that we've reached the last ping ext, it leaves very little room to future changes.

Maybe `clusterMsgData.ping` could explicitly state the number of extensions included, or specify a `ping_totlen` for that specific payload?"
746929297,9530,yossigo,2021-11-10T19:39:36Z,Should we be more defensive and not assume the target is already zero-filled?
746930244,9530,yossigo,2021-11-10T19:40:57Z,Potential overflow?
746931950,9530,yossigo,2021-11-10T19:43:35Z,Not sure if it's worth doing this estimate vs. always allocating a worst case: it's a short lived buffer so shouldn't impact memory but might actually help reduce fragmentation.
746932671,9530,yossigo,2021-11-10T19:44:44Z,"```suggestion
#define EIGHT_BYTE_ALIGN(size) ((((size) + 7) / 8) * 8)
```

Currently rounding up when already aligned, I assume it's a mistake and not intentional?"
747889211,9530,madolson,2021-11-11T23:50:11Z,"(: I did have an earlier check for the number of extensions and you asked if was needed. I can add it back, I think it was a better sanity check."
748818280,9530,yossigo,2021-11-14T08:12:34Z,"Shame on me :)
On the first review, I had a misconception of the cluster bus extension mechanism when and considered it to be completely decoupled from specific message types."
754744975,9530,madolson,2021-11-23T01:13:22Z,"We do a zcalloc earlier, so I think it's safe to assume it's zero filled. "
754752625,9530,madolson,2021-11-23T01:39:53Z,"I'm not sure it's purely analogous to to the announce IPs, this is declaring an alternative way to find the node. My original thought for this argument is that in the TLS case, you may still want to connect to the node's IP, and if the hostname is available you can use that for hostname validation. You may not want to take a dependency on DNS or some other host discovery service."
754755255,9530,madolson,2021-11-23T01:48:30Z,True story.
754755748,9530,madolson,2021-11-23T01:50:15Z,"My argument against this is that it adds another two functions which need to stay in sync. It shouldn't really affect fragmentation too much, since the hostname won't really change sizes."
754800111,9530,madolson,2021-11-23T04:41:53Z,"Ok, back to having the total number of extensions. We still validate it based off the length as well, but we could obviously change that implementation in the future."
755966694,9530,yossigo,2021-11-24T11:27:23Z,It just makes this code a bit more fragile in case it ends up in different code paths in the future.
755969726,9530,yossigo,2021-11-24T11:31:27Z,"This is a valid point, but in practice I think these two usually go hand in hand. That is, if you're providing an IP instead of a hostname, you'd probably turn off certificate validation rather than say ""hey, here's the real hostname I expect but did not use for the connect"".

I'm OK either way."
762737047,9530,madolson,2021-12-06T06:43:28Z,"I'm okay either way as well. The original thought here was that AWS we've seen some annoyances with DNS caching, so some users only went to have the hostname for SNI but not for anything else. This flag mostly covers that case."
774806825,9530,zuiderkwast,2021-12-23T23:07:05Z,"So the 4th element ""additional networking information"" is a map with info-type as the keys? A map can't have duplicate keys, or can it? For multiple IP addresses, duplicate keys are needed."
774807304,9530,zuiderkwast,2021-12-23T23:09:36Z,"The type is ""ip"" for ipv4 and ipv6? I think it can be useful to distinguish them as ""ipv4"" etc."
774844782,9530,madolson,2021-12-24T02:33:31Z,"I'm still of the opinion that we don't want to support multiple endpoints of the same type, so I think a map is fine."
774845497,9530,madolson,2021-12-24T02:36:43Z,"We don't really differentiate the different IP types today, I don't want to optimize earlier for that case. We can always extend the map to be ipv4 and ipv6 later."
775014104,9530,zuiderkwast,2021-12-24T13:25:40Z,"We can add ""ipv4"" and ""ipv6"" later but then we'll need to keep ""ip"" too for backward compat...?"
775048553,9530,madolson,2021-12-24T16:10:07Z,"I think having that is ""okay"". We already show just an ""ip"" in multiple places and don't try to distinguish it between versions. We just give them an IP address they can talk to."
775252616,9530,yossigo,2021-12-26T15:00:10Z,"@madolson we do have a conflict here:
* No multiple endpoints of the same type - I agree in principle, we'll just get clients confused.
* No specific ipv6/ipv4 types - I agree with that as well, it's not something we currently do.
But if I'm forced to choose, I'd give up the first to support IPv4 and IPv6 concurrently, simply because I don't see the real downside of the response format allowing that. Not feeling too strong about it though."
775277161,9530,zuiderkwast,2021-12-26T19:26:48Z,"We could also re-evaluate the possibility of not tagging them with a type and let the client figure out what they are. Then, we IP versions and multiple of the same type become non-issues."
775277263,9530,zuiderkwast,2021-12-26T19:27:30Z,"Okay then, but we could also skip tagging them altogether. It's pretty easy for a client to tell a host name and an IP address apart."
776000775,9530,madolson,2021-12-28T17:07:36Z,"I don't want to push clients to know how to ""parse"" stuff, it's much easier to just do extra_networking['hostname'] as opposed to parsing all of them looking for a hostname."
776010782,9530,madolson,2021-12-28T17:37:02Z,"@yossigo I don't think the resolution to supporting both ipv4 and ipv6 is to show both of them with the same name and have the clients check all the entries and figure out what they want to do. We only gossip a single IP address on the clusterbus today (which can be IPv6). If we want to introduce more, we would need to a way to name them/announce them, so I think however we resolve that naming would give us a new name to add to this map.

I also will probably advocate that if we go down the path of supporting dual stack IPv4 + IPv6 configurations, we just determine which the cluster responds with the same way we do with TLS. If a client connects over IPv4, we respond with IPv4, and the same with IPv6. "
776050011,9530,zuiderkwast,2021-12-28T19:45:01Z,"Fine, I got that. (Though they may need to parse the primary endpoint which isn't tagged...) The only point I wanted to make is that clients may still need to auto-detect if an IP is IPv4 or IPv6 and now we had a change to tag that information too, but if we don't differentiate between them in other places, then it's fine here too. I don't really prefer anything, just that the available options have been considered, and now they have.

I think the map for additional stuff is a very clean and nice format. It's probably future-proof too."
776052272,9530,madolson,2021-12-28T19:52:55Z,That is a fair point. Statically typed languages will have to deal with it. Most dynamic languages usually just allow passing in either and it will figure it out. Most of the reason we're doing the new map instead of new fixed position fields is because many clients will pickup the hostname without any changes that way.
776057617,9530,zuiderkwast,2021-12-28T20:12:02Z,"Exactly, in C for example, you use `inet_pton()` with the `AF_INET` or the `AF_INET6` flag. Here's from Redis itself:

```C
int clusterStartHandshake(char *ip, int port, int cport) {
    clusterNode *n;
    char norm_ip[NET_IP_STR_LEN];
    struct sockaddr_storage sa;

    /* IP sanity check */
    if (inet_pton(AF_INET,ip,
            &(((struct sockaddr_in *)&sa)->sin_addr)))
    {
        sa.ss_family = AF_INET;
    } else if (inet_pton(AF_INET6,ip,
            &(((struct sockaddr_in6 *)&sa)->sin6_addr)))
    {
        sa.ss_family = AF_INET6;
    } else {
        errno = EINVAL;
        return 0;
    }
```"
776664306,9530,yossigo,2021-12-30T10:26:33Z,"@madolson I just want to point out that as the interface design here involves clients, it is likely to outlive many of the current server-side implementation details. You're basically saying any future extension will need its own new and unique identifier. I'm OK with that."
794994327,9530,PingXie,2022-01-29T03:54:36Z,@madolson the math doesn't look right.  notused1 should be 30 bytes long as opposed to 16 because uint16_t is 2 bytes (16 bits). This will break cluster rolling upgrades. 
795034954,9530,zuiderkwast,2022-01-29T09:58:41Z,It'd be good to have interoperability tests with different versions.
795036962,9530,zuiderkwast,2022-01-29T10:23:15Z,@PingXie do you want to prepare a PR so we can fix it before 7.0.0-rc1?
795089778,9530,PingXie,2022-01-29T20:14:02Z,Yep I will work on a fix next. I will also add static asserts to make sure that we catch issues like this at compile time in the future. A proper interop test suit would be even better but I feel that it is better dealt with separately. 
795098077,9530,PingXie,2022-01-29T22:04:55Z,PR is [here](https://github.com/redis/redis/pull/10206)
795141268,9530,PingXie,2022-01-30T07:44:41Z,Any particular reason to not use sds for hostname? It would've eliminated the strlen calls when computing the message size.
795141592,9530,PingXie,2022-01-30T07:48:01Z,"Divisions and multiplications are much more expensive than bit operations. Can you consider the following instead? 7 is the mask for 8 (2^3 - 1)

#define EIGHT_BYTE_ALIGN(size) ((((size) + 7) & (~7))"
795142121,9530,PingXie,2022-01-30T07:53:50Z,"If we could institute a universal requirement of 8-byte alignments for all extensions, we could use 16 bits to represent a max of 64K 8-byte blocks, which is 512KB in total size, then the clusterMsgPingExt could be shrunk by 4 bytes (uint16_t length and unused removed). "
795144548,9530,PingXie,2022-01-30T08:11:54Z,"The max hostname length is not a trivial number, i.e., 256 bytes. The non-stop broadcasting of a node's host name in a large cluster increases the overhead on both network and CPUs when the cluster is in a steady state. This impact can also grow with more extensions added in the future, It will be great if a generic mechanism could be devised such that the broadcasting of these extensions can be optional and only activated when a change is detected in the cluster (for instance, hostname updates or new node arrivals). "
795191130,9530,zuiderkwast,2022-01-30T14:36:20Z,Division by constant 8 is optimized into bit operations anyways so it doesn't matter here.
795191415,9530,zuiderkwast,2022-01-30T14:38:25Z,Please open a new issue or PR. Comments on closed PRs are not often read by people.
795308322,9530,PingXie,2022-01-31T02:37:20Z,"You are right. Thanks @zuiderkwast 

```
 298181    d41f7: e8 f4 13 f9 ff        call   655f0 <strlen@plt>                                                           
 298182    d41fc: 48 83 c4 08           add    $0x8,%rsp                                                                    
 298183    d4200: 83 c0 08              add    $0x8,%eax                                                                    
 298184    d4203: 83 e0 f8              and    $0xfffffff8,%eax                                                             
 298185    d4206: 83 c0 08              add    $0x8,%eax    
```"
795326313,9530,madolson,2022-01-31T03:50:05Z,"Yeah, generally trust the compiler to do these types of optimizations for you. Doing bit shifts is easy to get wrong."
795326500,9530,madolson,2022-01-31T03:51:16Z,I read them :D
795331615,9530,madolson,2022-01-31T04:05:11Z,Seems like a reasonable change. 
795332256,9530,madolson,2022-01-31T04:08:18Z,"The idea was that we wanted the start of the extension data to still be 8 byte aligned, which means we don't get any benefit by shrinking this since we still need to pad before the start of the data. The data needs to be 8 byte aligned since we want the start of a future extension to also be 8 byte aligned."
795335243,9530,madolson,2022-01-31T04:23:04Z,"Yeah, I apparently did the math wrong. I did check interoperability on an earlier revision, but I didn't check it after making this change. I created a separate issue to add interoperability tests, https://github.com/redis/redis/issues/10214."
796360959,9530,PingXie,2022-02-01T08:29:48Z,"Understand the alignment requirement. 

I was trying to see if we could save a few more bytes here but if the new ""hostname"" extension can be made optional then this optimization is moot. I think this is good. Feel free to resolve/close this comment."
907189733,9530,uvletter,2022-06-27T09:43:11Z,"here seems `sizeof(clusterMsgPingExt)` is needless since `getHostnamePingExtSize` has counted `sizeof(clusterMsgPingExt)` in, but it doesn't affect the integrity as `estlen` is just a hint for allocation, larger is fine."
907198143,9530,zuiderkwast,2022-06-27T09:51:48Z,"Are you sure? The `clusterMsgPingExt` struct ends with a [flexible array member](https://en.wikipedia.org/wiki/Flexible_array_member), which is not counted by sizeof.

```C
    union {
        clusterMsgPingExtHostname hostname;
    } ext[];
```"
907258450,9530,uvletter,2022-06-27T11:02:57Z,"```
int getHostnamePingExtSize() {
    /* If hostname is not set, we don't send this extension */
    if (!myself->hostname) return 0;

    int totlen = sizeof(clusterMsgPingExt) + EIGHT_BYTE_ALIGN(strlen(myself->hostname) + 1);
    return totlen;
}
```
So the L2903 is equivalent to `estlen += sizeof(clusterMsgPingExt) + sizeof(clusterMsgPingExt) + EIGHT_BYTE_ALIGN(strlen(myself->hostname) + 1)`, but actually there's only one `clusterMsgPingExt` header and following a `clusterMsgPingExtHostname` body"
907272649,9530,zuiderkwast,2022-06-27T11:20:48Z,"Ah, I see, it is counted twice."
1287105271,12453,oranagra,2023-08-08T13:17:02Z,"```suggestion
 * atomicFlagTestSet(var,testres_var) -- Set on the flag and put the previous state in testres_var
```
just to conform to the style of other lines in that block."
1287106734,12453,oranagra,2023-08-08T13:18:15Z,"i wonder why this is a ""flag"" and not just a generic ""test and set"" (to work on any integer) to set it, and a plain atomicSet to clear it?

in which case we won't need to declare the `redisAtomicFlag` type."
1287111586,12453,oranagra,2023-08-08T13:21:35Z,"__atomic_add_fetch seems to be a GCC builtin, while the other primitives we use in this group (e.g. atomic_fetch_add_explicit are C11.
i suppose we must not mix them."
1287112830,12453,oranagra,2023-08-08T13:22:28Z,same goes for the use of __atomic_test_and_set and __atomic_clear below
1287114991,12453,oranagra,2023-08-08T13:24:08Z,"do we really have to have this one? people can easily get that outcome by using atomicGetIncr and incrementing the result.
a bit convoluted to use, maybe we can do that with a wrapper instead of adding primitives?"
1287119424,12453,oranagra,2023-08-08T13:27:28Z,"we cannot make intel specific assumptions here.
at least not without making this code use an alternative sync primitive, or at the very least break the compilation when that's not the case."
1287120947,12453,oranagra,2023-08-08T13:28:38Z,this whole test can be replaced by simply sending using DEBUG SEGFAULT and watching the stack trace of other threads (like bio.c)
1287124060,12453,oranagra,2023-08-08T13:30:59Z,"a ""get threads stacktrace"" feature is a nice thing to have in redis (not for testing, but for runtime troubleshooting).
but, if we can, we better not have it as a command, since redis might be unresponsive, which is the reason why we want to extract a stack trace.

i think we should re-use the SIGALRM mechanism used by `watchdog-period`, and just enable it on startup regadless of the config.
then whenever we want a stacktrace, we just send the signal from command line."
1287128397,12453,oranagra,2023-08-08T13:32:59Z,"we can't use `bool` and `false`, we need to keep being compatible with c99."
1287134215,12453,oranagra,2023-08-08T13:36:58Z,don't we need `redisAtomic` prefix (for C11 `_Atomic`)?
1287216980,12453,meiravgri,2023-08-08T14:33:13Z,"according to [6.54 Legacy __sync Built-in Functions for Atomic Memory Access](https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html)

> The following built-in functions are intended to be compatible with those described in the Intel Itanium Processor-specific Application Binary Interface, section 7.4
"
1287219265,12453,meiravgri,2023-08-08T14:34:56Z,"Boolean was introduced in c99 
https://en.cppreference.com/w/c/types/boolean#:~:text=The%20C%20programming%20language%2C%20as,Boolean%20type%20in%20any%20combination."
1287221513,12453,meiravgri,2023-08-08T14:36:31Z,this is a pre-declaration for the local copy
1287230643,12453,meiravgri,2023-08-08T14:43:05Z,"stdatomic.h has its own API for test and set
atomicSet can be used to clear the flag but atomicFlagClear makes the API more robust."
1287985401,12453,oranagra,2023-08-09T05:58:12Z,"i think it makes it less robust.
i.e. an integer API can be used for various purposes as well as handling a boolean, and not the other way around."
1287986728,12453,meiravgri,2023-08-09T06:00:20Z,"added this to the following issue 
https://redislabs.atlassian.net/browse/MOD-5536?atlOrigin=eyJpIjoiYjcwZTRiODA3M2MwNDJlZWFkNTdjNTc2YTczZjNjZmMiLCJwIjoiaiJ9"
1287989583,12453,oranagra,2023-08-09T06:04:36Z,"ok, maybe i misunderstood.
this comment applies for the entire block that uses the `_sync` intrinsics, not just the ones you added?
i.e. these intrinsics will be supported by the compiler only when using a supported platform, and if not, we'll either choose a different atomic option, or fail to build.

so your comment is just meant to improve the description in the code, and it doesn't mean that the changes you made could perform wrongly when not used on Intel?"
1287991179,12453,oranagra,2023-08-09T06:07:02Z,"ok, so there must be another reason why we don't use `bool` in redis, but let's stay consistent with the rest of the code, and drop the use of `stdbool.h`"
1287992401,12453,oranagra,2023-08-09T06:08:46Z,"ohh, i'm sorry. i mixed it with g_thread_ids"
1288093740,12453,meiravgri,2023-08-09T07:53:13Z,"@ShooterIT 
Hey :)
Can you please explain what's the purpose of this section and in what scenario it will be activated?

According to [GCC](https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html)
> Note that the ‘__atomic’ builtins assume that programs will conform to the C++11 memory model.

I do see that your intention ([#7707](https://github.com/redis/redis/pull/7707)) was to support earlier versions of GCC, where `stdatomic.h` is missing, and we can't use `_Atomic` types. In this case, we compile with std99 in which, as far as I understand, __atomic* functions family are also not included, so we anyway need to choose the __sync* family. 
"
1288132689,12453,meiravgri,2023-08-09T08:25:17Z,"I can replace test and set with exchange 
But note that atomic_flag is [guaranteed to be lock free](https://en.cppreference.com/w/c/atomic/atomic_flag) "
1288148911,12453,meiravgri,2023-08-09T08:38:51Z,"> this comment applies for the entire block that uses the _sync intrinsics, not just the ones you added?

It is actually, but I added this comment since there was a misalignment between the GCC doc and the intel guide regarding the return type of `__sync_bool_compare_and_swap` (bool in GCC, int in intel)
Also, intel describes which types of operands the function expects (int, long, long long, unsigned int, unsigned long, unsigned long long)

> so your comment is just meant to improve the description in the code, and it doesn't mean that the changes you made could perform wrongly when not used on Intel?

So yes, only to explain. "
1288150596,12453,meiravgri,2023-08-09T08:40:14Z,but if deop the bool i must use exchange...
1295579258,12453,ShooterIT,2023-08-16T08:46:07Z,"@meiravgri sorry for delayed reply
AFAIK, before gcc11, we just use `_atomic*` functions, it works well when compiling with std99. and when we use old gcc or old redis (before 6.0), i ever found `atomicvar_api:atomic-builtin` in `info` command output. so this section makes sense"
1302745918,12453,oranagra,2023-08-23T09:29:22Z,"printing stack traces is debug.c responsibility, maybe we can move it back there? (and then we don't need that other forward deceleration)"
1303840633,12453,meiravgri,2023-08-24T06:02:41Z,We will still need a forward declaration to call a setup function upon the server startup (something like `setupSigAlrmHandler`. But I do agree that the registration to the signal belongs to debug.c
1304087149,12453,oranagra,2023-08-24T09:52:44Z,"maybe we should call just one `setupDebugSigHandlers` instead of both of these?
i.e. some init function for debug.c to do whatever it needs.."
1304089774,12453,oranagra,2023-08-24T09:55:02Z,"did you move this so that it's not under the `======== Software Watchdog =======` title?
i think i'd rather avoid moving big blocks, and add forward declarations if needed.
i think it's arguably still ok to b considered part of the ""Software Watchdog"" code, and the fact it also serves another mechanism is ok."
1304116662,12453,meiravgri,2023-08-24T10:20:02Z,yes and also I wanted to group all the signal setups together
1304127220,12453,meiravgri,2023-08-24T10:28:19Z,"We can have `setupDebugSigHandlers` that wraps `setupSigSegvHandler` and `setupSigAlrmHandler`
setupSigSegvHandler still has to be exposed since it is used by `updateSighandlerEnabled`"
1304312135,12453,oranagra,2023-08-24T13:20:17Z,"ohh, i missed that. well, in that case, let's keep what you have now"
1304312510,12453,oranagra,2023-08-24T13:20:35Z,"ohh, i see you changed it.. well, that's ok too."
1304317331,12453,oranagra,2023-08-24T13:22:36Z,i think now it's better.. also easier to see what's actually changed (the info->si_pid part)
1304426785,12453,meiravgri,2023-08-24T14:28:43Z,I am also doing my best to write detailed commits descriptions to make the review process easier :)
1311199589,12453,oranagra,2023-08-31T07:19:18Z,"we usually put the doc comment next to the implementation, not the forward declaration."
1311243400,12453,oranagra,2023-08-31T07:57:48Z,do we assume these two lines are sequential? not sure that's right..
1314560140,12453,meiravgri,2023-09-04T07:48:27Z,"It is not explicitly guaranteed in the Linux documentation, but this is the example format, and in addition, they are grouped together 
https://man7.org/linux/man-pages/man5/proc.5.html
![Untitled](https://github.com/redis/redis/assets/109056284/f3f12d57-d269-4e76-865f-8bb63f332da7)
![image](https://github.com/redis/redis/assets/109056284/7f5d0379-d80f-45d3-b3fd-5be9a8ba0600)
Anyway, it is safer to not rely on the file order. I'll change it.
Also I'll add a warning msg in case one of the fields is not found and the test will check that this warning doesn't appear."
1315004810,12453,oranagra,2023-09-04T14:21:18Z,"i find this logic of this function a bit odd (even though it's probably efficient).
maybe it'll be nicer to extract each of these two fields into a variable, and put the logic that looks at the values of these variables after.

maybe without a dedicated struct and a dedicated function.
like we do argument parsing of a command, e.g. look at `geoaddCommand`.
we can break out as soon as we have values for both, or even as soon as we have value for either.

WDYT?"
1315036839,12453,meiravgri,2023-09-04T14:55:11Z,"My intention was to to discard one `strncmp` after finding one of the fields (unlike `geoaddCommand`)
and to make it easier to generalize `is_thread_ready_to_signal` in the future if we decide we want to extract more fields from the file. 
i can do
```
    size_t requested_fields = 2;
    while ((line = fgets(buff, MAX_BUFF_LENGTH, thread_status_file)) && requested_fields) {
        /* iterate the file until we reach SigBlk or SigIgn field line*/
        if (!strncmp(buff, ""SigBlk:"", field_name_len) ||  !strncmp(buff, ""SigIgn:"", field_name_len)) {
            /* check if the signal exist in the mask */
            unsigned long sig_mask = strtoul(buff + field_name_len, NULL, 16);
            if(sig_mask & sig_num) { /* if the signal is blocked/ignored return 0*/
                ret = 0;
                break;
            }

            --requested_fields;
        }
    }
```
This is probably cleaner and considering the fact that SigBlk and SigIgn are probably sequential, it won't affect the performance. But less general"
1315061658,12453,oranagra,2023-09-04T15:24:50Z,"i'd rather that version, doesn't attempt to create some common infrastructure for something that's very specific "
1315417903,12453,sundb,2023-09-05T06:21:07Z,"```suggestion
    stacktrace_data *trace_data = zcalloc(sizeof(stacktrace_data));
```
if `prctl(PR_GET_NAME, trace_data->thread_name);` fail, `trace_data->thread_name` will be uninitialized."
1315419513,12453,sundb,2023-09-05T06:21:48Z,"```suggestion
    size_t len_tids = 0;
```"
1315421075,12453,sundb,2023-09-05T06:22:40Z,"```suggestion
    /* SIGALRM can be sent explicitly to the process calling kill() to get the stacktraces,
       or every watchdog_period interval. In the last case, si_pid is not set */
```"
1315433860,12453,meiravgri,2023-09-05T06:37:40Z,"possible failures of `prctl` in this case are:

> EFAULT
arg2 is an invalid address.
EINVAL
The value of option is not recognized.
EINVAL
arg2 is not valid value for this option.

so if it fails, an uninitialized string is our last concern."
1315443207,12453,sundb,2023-09-05T06:47:59Z,"```suggestion
static void writeStacktraces(int fd, int uplevel) {
```"
1315444061,12453,sundb,2023-09-05T06:48:50Z,"```suggestion
static void writeStacktraces(int fd, int uplevel) {
```"
1315450430,12453,oranagra,2023-09-05T06:55:33Z,"```suggestion
    /* get the thread name */
```"
1315460760,12453,oranagra,2023-09-05T07:06:06Z,"you have a few more of these, please go over them."
1315462338,12453,oranagra,2023-09-05T07:07:45Z,"that string feels a bit long to me. it could be just `*` or `cur`.
WDYT?"
1315468531,12453,oranagra,2023-09-05T07:13:28Z,"did you get to this conclusion empirically? or by some docs?
i remember i made a similar assumption about SIGSEGV, and eventually concluded it was wrong and used `si_code`"
1315470460,12453,oranagra,2023-09-05T07:15:19Z,"maybe we should have an `else` that prints some other title explaining why there's a stacktrace on the log (i.e. even some ""SIGALRM received"".
also, maybe print `si_code`, `si_pid` etc, like we do on SIGSEGV?"
1315491511,12453,oranagra,2023-09-05T07:34:05Z,"maybe we want to print something on timeout?, and maybe also list the threads that didn't respond?"
1315494394,12453,oranagra,2023-09-05T07:36:41Z,"maybe we can add some additional check to see a stack trace coming from one of the other threads? e.g. we know the BIO one is for sure sleeping, right?"
1315496843,12453,sundb,2023-09-05T07:38:50Z,"```suggestion
    for (size_t i = 0; i < len_tids; i++) {
```"
1315496982,12453,sundb,2023-09-05T07:38:56Z,"```suggestion
    if (!stackraces_data) return;
```"
1315497143,12453,sundb,2023-09-05T07:39:05Z,"```suggestion
        if (!curr_stacktrace_data) continue;
```"
1315497277,12453,sundb,2023-09-05T07:39:14Z,"```suggestion
        if (curr_stacktrace_data->tid == calling_tid) {
```"
1315497874,12453,sundb,2023-09-05T07:39:44Z,"```suggestion
        tids[tids_count - 1] = calling_tid;
```"
1315608507,12453,sundb,2023-09-05T09:08:54Z,"a nit pick. 😀
```suggestion
                /* increase tids capacity if needed */
                if(tids_count >= tids_cap) {
                    tids_cap *= 2;
                    tids = zrealloc(tids, sizeof(pid_t) * tids_cap);
                }

                /* save the thread id*/
                tids[tids_count++] = tid;
```"
1316739299,12453,meiravgri,2023-09-06T05:17:51Z,"At first, I tried to use `si_code`. On macOS, both cases got the same code so I **tried** using `si_pid` and got the behavior described. 
https://man7.org/linux/man-pages/man2/sigaction.2.html
Here it is described in what cases `si_pid` is populated. It is not explicitly guaranteed that it is not populated if the signal is sent by `setitimer()`.
I'll add a test to ensure this is the behavior on all systems/if they decide to change something in the future."
1316765627,12453,meiravgri,2023-09-06T05:49:03Z,"I added ""Received SIGALR"" to avoid using unsafe formated string functions

>  /* We actually use this only for signals that are not fatal from the point
 of view of Redis. Signals that are going to kill the server anyway and
 where we need printf-alike features are served by serverLog(). */
void serverLogFromHandler(int level, const char *msg) {"
1316771711,12453,meiravgri,2023-09-06T05:58:10Z,I don't think that there is a simple way to get such a list. we can print the requested tids list and if needed manually compare to the output tids.
1316785855,12453,meiravgri,2023-09-06T06:16:47Z,"I'm not familiar wit redis BG threads jobs
i can add a check that `bioProcessBackgroundJobs` is printed 3 times (is it always 3?)"
1316814507,12453,oranagra,2023-09-06T06:50:06Z,"i remember that it seemed to work at first and then i started noticing in random places that it doesn't.
looked like it was just left uninitialized in some cases.
i don't think a test will help for ""if they decide to change something in the future"", our old versions will have bugs.
we can dig into the kernel code (at least in Linux), but i'd rather rely on docs and avoid that speculation.

did you say that si_code worked for you too? "
1316816696,12453,oranagra,2023-09-06T06:52:29Z,so at least print that we bailed on timeout
1316818710,12453,oranagra,2023-09-06T06:54:33Z,"currently we have 3 (always), i'd be ok if we check that we check that we have at least one (that way we can see that we extract a trace not only from the main thread).
i guess there's no harm to match it to 3 though.. if we'll ever change the number, the test will fail and we can update it."
1316828167,12453,meiravgri,2023-09-06T07:04:02Z,`*` is ok
1316843824,12453,oranagra,2023-09-06T07:18:48Z,"maybe we can add more systems here? i see in config.h we do support more systems, specifically BSD which we have in our CI."
1316857772,12453,meiravgri,2023-09-06T07:31:30Z,"on macOS I got the same `si_code` for both sending `kill SIGALRM` and timer expiration. 

btw,:
https://linux.die.net/man/2/setitimer
> POSIX.1-2001, SVr4, 4.4BSD (this call first appeared in 4.2BSD). POSIX.1-2008 marks getitimer() and **setitimer() obsolete**, recommending the use of the POSIX timers API ([timer_gettime](https://linux.die.net/man/2/timer_gettime)(2), [timer_settime](https://linux.die.net/man/2/timer_settime)(2), etc.) instead.

The si_code generated using the recommended function ([timer_create](https://linux.die.net/man/2/timer_create)) is well-defined

> The si_code field of the siginfo_t structure will be set to **SI_TIMER**
"
1317122194,12453,oranagra,2023-09-06T11:11:45Z,"so you're saying that in current code that uses `settimer()` we can't rely on si_code (empirically, it doesn't work), and `si_pid` does seem to work.
but by shifting to POSIX.1-2001, we can resolve that and we can rely on si_code that's explicitly documented.
is that right?

@yossigo WDYT?"
1317161282,12453,meiravgri,2023-09-06T11:48:25Z,correct
1317197921,12453,meiravgri,2023-09-06T12:22:32Z,All the threads manager logic is protected by a `#ifdef __linux__` macro
1317227226,12453,oranagra,2023-09-06T12:45:52Z,"yes, the multi-thread stack trace will only be on linux, but the single thread stack trace can be tested on more platforms (reassure us that we didn't break anything)"
1317415781,12453,oranagra,2023-09-06T14:53:40Z,aren't all these lines done too early? shouldn't they be run after the `wait_for_log_messages`?
1317427441,12453,meiravgri,2023-09-06T15:01:18Z,"After the `r debug sleep 1` returns, we know we have a log file, no?"
1317489535,12453,oranagra,2023-09-06T15:41:49Z,"no.. maybe the system is super slow, and redis is starved of CPU time.
the code below uses wait_for to wait for the watchdog to kick in and print.
so all the other validations should be after"
1318177480,12453,meiravgri,2023-09-07T07:09:46Z,"Ok, but if we get one of these error messages, we will fail to find the stacktraces and not for having the errors, and the test doesn't indicate the actual problem.

I changed the test to get a full report by failing the server and after we checked we got to the end of the log report, we can start checking that the backtraces prints succeeded.
```
catch {r debug segfault}
wait_for_log_messages 0 {""*REDIS BUG REPORT END*""} 0 100 100
```

I could replace 
`assert_equal [count_log_message 0 ""failed to open /proc/""] 0` with
`catch {wait_for_log_messages 0 {""failed to open /proc/""} 0 100 100}` 
but in the typical case, where we fail and retry to find a line that doesn't exist because there was no error, the test is very slow."
1335159585,12453,yossigo,2023-09-24T10:36:58Z,@meiravgri How can we make sure it's safe to allocate memory in a signal handler on all platforms? See the `signal-safety(7)` man page. I think this is also true specifically for jemalloc.
1335159599,12453,yossigo,2023-09-24T10:37:16Z,Why not call `gettid` directly?
1335159815,12453,yossigo,2023-09-24T10:39:15Z,Same comment as above.
1335160215,12453,yossigo,2023-09-24T10:42:26Z,"Also `snprintf()` is not thread safe, which is why `serverLogFromHandler()` avoids using it."
1335160477,12453,yossigo,2023-09-24T10:44:39Z,Probably better to use `PATH_MAX` here.
1335160598,12453,yossigo,2023-09-24T10:45:40Z,Also `fopen()` and the other bufferred I/O functions are not signal safe.
1335160845,12453,yossigo,2023-09-24T10:47:37Z,"The documentation indicates that while `sem_post` is async thread safe, `sem_init` and `sem_destroy` aren't."
1335227684,12453,tezc,2023-09-24T18:28:56Z,`gettid` is not signal safe btw :upside_down_face: 
1335227776,12453,tezc,2023-09-24T18:30:13Z,"opendir, readdir and closedir are not signal safe as well. "
1338201865,12453,yossigo,2023-09-27T07:59:07Z,@oranagra Seems like a good change - remove an obsolete call and get better/predictable results that are aligned with the documentation.
1338444409,12453,oranagra,2023-09-27T11:10:11Z,"i just wonder if POSIX.1-2001 is old enough to rely on, or if we already depend on it.
i don't want to introduce compatibility issues with exotic or old systems."
1338461223,12453,yossigo,2023-09-27T11:27:12Z,@oranagra I think it's reasonable to rely on it. 
1351712161,12453,meiravgri,2023-10-10T07:25:08Z,"from the PR description:

> compatibility notes
The threads mngr API is only supported in linux.
We use syscall(SYS_gettid) and syscall(SYS_tgkill...) because their dedicated alternatives (gettid() and tgkill) were added in glibc 2.3."
1382888773,12453,meiravgri,2023-11-06T07:50:48Z,"@yossigo @oranagra 
Update on this one:
It works fine on Linux but for some reason, and although it is supposed to conform to POSIX std, posix timers API is not supported on Mac (I tried it on my local machine)

see SO thread here
https://stackoverflow.com/questions/27473964/is-mac-os-x-posix-incompliant-timer-settime

I guess we'll stay with the original timer"
1383317041,12453,oranagra,2023-11-06T13:17:32Z,"i'm ok with keeping the current code (since empirically, it works).
or we can (if the code looks clean enough) use timer_create on Linux, and fall back to setitimer on other platforms (or only on macos)"
1383374721,12453,meiravgri,2023-11-06T14:00:10Z,"You can take a look here at the linux implementation:
https://github.com/redis/redis/pull/12658/commits/c7562ee13546e504977372fdf40d33c3f86775a5
as it includes initialization of a global timer and a different timer struct type, it requires checking the platforms in several locations in the code. not very clean IMO 
Also, as the documentation is misleading, I don't really know on which platforms other than Linux it is supported"
1383938813,12453,oranagra,2023-11-06T20:22:30Z,"ok, indeed it looks like it'll cause too much mess to support both.
if we did, i din't mind explicitly using linux for one, or explicitly excluding macos from the other.
but since the current one seems working, let's drop it for now.
we can always pick it up again in the future"
978296386,11290,sundb,2022-09-23T06:18:12Z,What about `createListpackSetObject` or `createSetListpackObject`?
978298755,11290,sundb,2022-09-23T06:23:22Z,"```suggestion
                           sdslen(sdsele) <= server.set_max_listpack_value &&
```"
978437394,11290,sundb,2022-09-23T09:21:57Z,"I don't think we should remove this assertion, maybe we should change it to `(setobj->encoding == OBJ_ENCODING_INTSET || setobj->encoding == OBJ_ENCODING_LISTPACK) && setobj->encoding ! = enc`"
978442004,11290,sundb,2022-09-23T09:27:16Z,"```suggestion
                objele = createStringObjectFromLongLong(llele);
```"
978453978,11290,sundb,2022-09-23T09:41:33Z,"Is it necessary to extract this code, because line 716 has the same code.
btw, I found that the lookup operation in `setTypeRemove` is actually wasteful, because `setTypeRandomElement` actually already knows the position of the lookedup element, but it looks it up again, maybe in the future we can get the iterator based on the index, and then delete by this iteraotr, so as to avoid these lookups."
978542592,11290,zuiderkwast,2022-09-23T11:35:50Z,"You're right, that's more in line with the other function names."
978548248,11290,zuiderkwast,2022-09-23T11:43:54Z,"Since the code in this function now doesn't depend on setobj->encoding anymore, i.e. it uses only generic setType functions, I don't think it makes sense to assert on encoding. It just adds unnecessary logic.

Perhaps we can assert `(enc != setobj->encoding)`?"
978550221,11290,zuiderkwast,2022-09-23T11:46:48Z,"`createStringObjectFromLongLong` returns a OBJ_ENCODING_INT with `shared.integers[llele]`, which is what caused some problems in the fuzz testing you helped me resolve. :-)"
978620081,11290,zuiderkwast,2022-09-23T13:00:32Z,"> Is it necessary to extract this code, because line 716 has the same code.

Yes, possibly. Something like `void setTypeEmitAndRemove(set, str, len, llele)`?

> btw, I found that the lookup operation in `setTypeRemove` is actually wasteful, because `setTypeRandomElement` actually already knows the position of the lookedup element, but it looks it up again, maybe in the future we can get the iterator based on the index, and then delete by this iterator, so as to avoid these lookups.

That would be good. Perhaps it's material for another PR though?"
979532027,11290,sundb,2022-09-26T03:26:30Z,`(enc != setobj->encoding)` sounds good.
984599365,11290,madolson,2022-09-30T13:34:25Z,"Before we introduce this. I wonder if we should have the conversation if these are A) tuned anywhere near correctly and B) should we introduce some type of more ""generic"" nob for this that is abstracted from the underlying implementation. We did something similar for expiration, having expiration tenacity instead of low level values.

"
993613511,11290,oranagra,2022-10-12T15:29:06Z,"maybe we can re-use `_lpPairsEntryValidation` and `lpPairsValidateIntegrityAndDups` by passing an argument.
i.e. rename, move the `pairs` part to an argument that skips the `((data->count) & 1` check.
"
993619737,11290,oranagra,2022-10-12T15:34:46Z,"the NULL part here might not be right.
we're about to convert the whole existing set, not just add a new entry.
we can sum the size of all the elements we push to `intsetAdd` so we have something close enough.
it doesn't have to be 100% accurate since LISTPACK_MAX_SAFETY_SIZE is set to 2^30 and not 2^31.
probably not a realistic concern, but i think it's better to address it.

come to think of it, we may be violating set_max_listpack_value too.
not with it's default value of 64, but imagine a case where it's set to `3`.
so we need to keep track of both max and sum in the loop, so we can use them here."
993622907,11290,oranagra,2022-10-12T15:37:29Z,"personally, i think this word wrap that took two extra lines is uncalled for.
i don't really mind, but just curious:
do you really have a monitor that's that narrow, or is your editor misleading you?"
993624526,11290,oranagra,2022-10-12T15:38:52Z,need to bump the RDB version
993643256,11290,oranagra,2022-10-12T15:54:21Z,"considering that `hash-max-listpack-entries` is `512` doesn't the default of `set-max-listpack-entries` needs to be 1024?
i.e. in hash it matches the field count (list pack length / 2), but in sets we don't have values, so maybe we can afford a longer linear search?

why did you set it to 128?"
993810232,11290,oranagra,2022-10-12T19:10:29Z,"another case where NULL is not right, but i'm not sure how to solve that one.
maybe some estimation based on the size of the intset and it's maximal value?

i.e. we can match the top value in the intset (the number of digits it has) to set_max_listpack_value, and also multiply that with the number of entries, to get some idea of the possible size of the resulting listpack (pass that to lpSafeToAdd)

again, probably not a realistic concern, especially considering that lpSafeToAdd is set on 2^30 not 2^31, but still nicer to handle it correctly."
994152448,11290,oranagra,2022-10-13T05:20:00Z,"this is a little wasteful.
i.e. we already found an item in the set, and we search for it again in order to delete it.
i know it was already like that, but arguably searching for an item in a sorted intset, or in a dict is faster than searching in an unsorted listpack.

let's try to consider changing that and actually pop items, or somehow keep track of their index for later deletion.

[this comment is also applicable for case 3 of spopWithCountCommand, which doesn't use setTypeEmitRemoveAndReturnObject, but does setTypeRemove on the result of setTypeRandomElement]"
994172405,11290,oranagra,2022-10-13T05:47:52Z,"calling setTypeRandomElement repeatedly when it is listpack encoded is very inefficient.
it means that we're iterating to each of the positions in the listpack from scratch, every time.
in other types we use lpRandomPairs which returns a list of random picks, but iterates on the listpack only once.
i think we must create a similar mechanism for spopWithCountCommand and srandmemberWithCountCommand"
994180872,11290,oranagra,2022-10-13T06:01:25Z,"maybe we can improve.
in case the other set is listpack, there shouldn't be a problem searching with char* and size_t.
that part seems easy to improve here.

in case the other set is a dict, in theory maybe we can create a dict type that supports non-sds lookup.
i'm not sure that part is worth it, but i do hate to see sds creation just for dictFind.
let's think about it."
994184942,11290,oranagra,2022-10-13T06:08:35Z,"let's consider improving the insertion efficiency by improving the above call to createIntsetObject.
we know the cardinality of the dest set in this case.
we can do dictExpand on dict encoded sets, and even keep a track of the total size of elements for pre-setting the capacity of lpNew. "
994185087,11290,oranagra,2022-10-13T06:08:48Z,"maybe we can avoid the extra copy and free if we add a setTypeAdd variant that takes char* and size_t.
i.e. specifically for listpack insertion it's a waste."
994211154,11290,zuiderkwast,2022-10-13T06:30:48Z,"I'll unwrap this.

Because you're asking: Yes, I use large font and a half-laptop wide editor and in other projects I like to keep the limit at 80.

![Screenshot from 2022-10-13 08-29-04](https://user-images.githubusercontent.com/273886/195519037-123b63b1-8d5d-4b6a-a4e9-34e181571f0f.png)
"
994264006,11290,zuiderkwast,2022-10-13T07:32:44Z,"I picked the same value as for `zset-max-listpack-entries`. Didn't really analyze it but you're right, we should at least double that.

I'll make it 1024 if you think it's the best value. What speaks for a lower value is efficiency, unless those points are solved."
994341386,11290,oranagra,2022-10-13T08:42:59Z,"interesting, it's odd that hash max entries is 4 times bigger than zset.
maybe it's because the zset's listpacks are sorted, unlike the hash ones?

i would argue that here was can use double of that, but then question is double of what?
double of zset or double of hash?
for now, let's take the middle ground, and use 512 (double of zset and same as hash).
any further decision will probably need to be based on the typical type of operations done on sets, and some benchmarks."
996425086,11290,zuiderkwast,2022-10-16T10:46:34Z,"Good idea. I'll use this upper bound and write the condition something like this:

```C
            uint32_t maxelelen = max(sdigits10(intsetMax(subject->ptr)),
                                     sdigits10(intsetMin(subject->ptr)));
            if (intsetLen((const intset*)subject->ptr) < server.set_max_listpack_entries &&
                sdslen(value) <= server.set_max_listpack_value &&
                maxelelen <= server.set_max_listpack_value &&
                lpSafeToAdd(NULL, maxelelen * intsetLen(subject->ptr) + sdslen(value))))
            {
```"
996428917,11290,zuiderkwast,2022-10-16T11:20:49Z,"Good idea. I'll unify the callback function and also the validation functions for pairs and non-pairs, i.e. change `lpPairsValidateIntegrityAndDups` to

```C
int lpValidateIntegrityAndDups(unsigned char *lp, size_t size, int deep, int pairs);
```"
996428961,11290,zuiderkwast,2022-10-16T11:21:19Z,Done.
996429494,11290,github-advanced-security[bot],2022-10-16T11:26:02Z,"## Multiplication result converted to larger type

Multiplication result may overflow 'unsigned int' before it is converted to 'unsigned long'.

[Show more details](https://github.com/redis/redis/security/code-scanning/33)"
996656049,11290,sundb,2022-10-17T06:30:25Z,Maybe we can add a assert `intsetLen(subject->ptr) != 0`?
996763214,11290,zuiderkwast,2022-10-17T08:31:26Z,"Yes, I believe this is where the [test-sanitizer-address](https://github.com/redis/redis/actions/runs/3259275606/jobs/5351984018#logs) build failed.

If there can be an empty intset here, I think we need maxelelen = 0 instead of an assert."
999514232,11290,zuiderkwast,2022-10-19T14:10:42Z,"Done, and a variant for adding ints.

Variants of `setTypeIsMember()` and `setTypeRemove()` would also allow skipping some temporary sds values (but I'll handle the other CR comments first)."
999529436,11290,zuiderkwast,2022-10-19T14:22:31Z,How do you mean? We don't know the cardinality of dstset until we have computed the intersection. What am I missing?
999704185,11290,oranagra,2022-10-19T16:38:35Z,"don't recall, maybe i was wrong.
maybe we can benefit from setting it to be initially large (according to the size of the first set (which is the smallest), and then scale it down at the end?
i.e. trade repeated rehashing and realloc for one?"
999796399,11290,oranagra,2022-10-19T18:16:15Z,"theoretically subelelen should go instead of NULL, and maxelelen as the second argument, but that's not possible (the function takes a listpack pointer.
however, since lpSafeToAdd only cares about the sum, that doesn't make any difference

maybe we should put a comment to avoid any future confusion?"
999799003,11290,oranagra,2022-10-19T18:19:07Z,lets add a comment that we're estimating a worse cause (overshoot)
999814200,11290,oranagra,2022-10-19T18:37:06Z,maybe use LONG_STR_SIZE from util.h?
1001975753,11290,zuiderkwast,2022-10-21T16:22:16Z,I'm replacing this function with a function `setTypePop` with a specialized case for listpacks. It's a much better abstraction. Thx
1001978975,11290,zuiderkwast,2022-10-21T16:26:04Z,"I'm replacing all usages of repeated `setTypeRandomElement()` for listpacks with new listpack functions `lpNextRandom()` (for unique sampling as a kind of iteration, a refactoring of lpRandomPairsUnique) or `lpRandomElements()` (non-unique sampling) that I've added in the last commits."
1002668572,11290,oranagra,2022-10-23T08:47:45Z,"let's use lp_malloc, lp_free (things changed recently on unstable)"
1002669658,11290,oranagra,2022-10-23T08:54:37Z,maybe it'll be nicer for the interface to return listpackEntry like the other similar methods? 
1002670459,11290,oranagra,2022-10-23T09:00:18Z,"now the comment above about ""the probability we pick it is the quotient of the count"" isn't needed here. IMHO"
1002670787,11290,oranagra,2022-10-23T09:02:34Z,"let's drop ""dict""?"
1002676292,11290,oranagra,2022-10-23T09:31:48Z,maybe `setTypePopRandom` or `setTypeRandomPop` is slightly better name?
1002677065,11290,oranagra,2022-10-23T09:37:21Z,"in some cases, these deletions can cause repeated re-allocation and memmove.
maybe we can some day make it more efficient some day, by marking tomstones, and them do one set of memmoves to the final positions at the end of all deletions.

let's leave if for last, or some future PR..."
1002677983,11290,oranagra,2022-10-23T09:42:53Z,maybe use `setTypeAddInt` instead of creating an sds here?
1002679056,11290,oranagra,2022-10-23T09:49:56Z,"let's make sure that the tests we have for randomness, cover all encodings."
1002679443,11290,oranagra,2022-10-23T09:53:06Z,"```suggestion
    /* CASE 2.5 listpack only. Sampling unique elements, with non-random order. 
     * Listpack encoded sets are meant to be relatively small, so SRANDMEMBER_SUB_STRATEGY_MUL, isn't necessary
     * and we rather not make copies of the entries, and instead directly emit them to the output buffer. */
```"
1002765889,11290,zuiderkwast,2022-10-23T20:19:26Z,"Yes, I'm not done with this refactoring. I want to replace setTypeAddInt and setTypeAddBuf with a setTypeAddAux(set, str, len, llval, str_is_sds) which better matches the interface of setTypeNext where str == NULL means use llval instead. And similar for is-member and remove. It'll be simpler and nicer, I promise."
1002766467,11290,zuiderkwast,2022-10-23T20:23:55Z,"Yes but a listpackEntry is three words instead of one, so I thought it's wasteful. Perhaps refactor the listpackEntry functions towards element pointer instead?"
1002895756,11290,oranagra,2022-10-24T05:37:04Z,"the difference is that it saves you the effort to later call lpGet.
are you worried from memory efficiency? listpacks are meant to be small, i don't think this matters.
what could matter is if in some cases you either in some cases you don't need to decode all entries you got (just some of them), so the lpGet is excessive, or if you need the actual pointer in order to delete records and such."
1002971028,11290,zuiderkwast,2022-10-24T07:44:52Z,"Fine, I'll use listpackEntry for this."
1003972098,11290,sundb,2022-10-25T03:56:25Z,"When remaining > lpLength(lp), p will be NULL.
Perhaps we should add `if (!p) break;` or assert? and add some unittest for this in REDIS_TEST.
I see that some places have assert, but others don't. Is it missing?"
1004076557,11290,zuiderkwast,2022-10-25T06:57:46Z,"I omitted error handling in the loop to make the example simpler.

I can add `assert(remaining <= lpLength(lp))` in the beginning of the example as a precondition. It will prevent all of these problems.

I should probably add a REDIS_TEST for this too. Good idea."
1004077206,11290,zuiderkwast,2022-10-25T06:58:38Z,"Btw, @sundb if you think I should add more asserts in the implementation, please mark them. I didn't think very much about this."
1004080779,11290,sundb,2022-10-25T07:03:09Z,Like here
1004084139,11290,sundb,2022-10-25T07:07:11Z,"Does it also need to be like other places `serverAssert(p = lpNextRandom(lp, p, &index, count--, 0))`?"
1004134498,11290,zuiderkwast,2022-10-25T07:59:59Z,"We already know that count < size and count > 0 here, so it can't return NULL here. Perhaps `assert(count < size)` before the loop?

Assert after every call to listpack functions seems excessive. The we should also assert p != NULL after lpDelete, lpNext, etc. There are already some asserts inside lpNext, etc."
1004372207,11290,oranagra,2022-10-25T11:33:40Z,listpack can hold native integers as well (without converting them to string)
1004380237,11290,zuiderkwast,2022-10-25T11:42:46Z,"Tombstones in listpack would be a different PR. :-)

We can use some of the unused bit patterns:

    1111|0101 to 1111|1110 are currently not used.

We can fill the unused space with one of these bytes repeated.

Another option is to create a tombstone element which can be skipped by it's size, e.g.

    <11111101, tombstone-size, unused-space, element-total-length>"
1004416424,11290,sundb,2022-10-25T12:21:56Z,"Another alternative is that we can save the offset of p(p - lp) that needs to be deleted, and then eventually delete them from right to left, which also avoids having to traverse the listpack again when cleaning up."
1004465741,11290,oranagra,2022-10-25T13:08:25Z,"in theory, lpFind can be adjusted to search by integer, and then we can avoid converting the integer here to string, and then back to integer inside lpFind.
let's leave that idea out for now, and consider it last.

same applies for setTypeIsMemberAux"
1004467755,11290,oranagra,2022-10-25T13:10:12Z,"missing a top comment.
also, the new ""aux"" functions you added don't document the return value."
1004764676,11290,zuiderkwast,2022-10-25T17:30:20Z,"Right, there is already `lpAppendInteger`. I'll use it."
1004766445,11290,zuiderkwast,2022-10-25T17:32:20Z,"There are already lpAppendInteger, lpPrependInteger, lpInsertInteger, lpReplaceInteger. Following this convention, I guess it makes sense to create the functions lpFindInteger and lpDeleteInteger."
1004820498,11290,zuiderkwast,2022-10-25T18:10:14Z,We need lpFindInteger before using lpAppendInteger. I'll leave this out for now.
1004850100,11290,zuiderkwast,2022-10-25T18:45:42Z,"I did a ""minioptimization"", using lpAppendInteger instead of lpAppend if str == tmpbuf (which means we had an integer originally but converted it to string for lpFind)."
1005620508,11290,oranagra,2022-10-26T12:36:03Z,this can be done in the other `lpAppend` above too.
1005627267,11290,oranagra,2022-10-26T12:42:28Z,"lpDelete takes `p`, so as soon as we have `lpFindInteger` that's enough.
then we can use it in setTypeRemoveAux, setTypeIsMemberAux, and improve the partial optimization in setTypeAddAux.

again, we can leave this for last or future effort."
1005814511,11290,zuiderkwast,2022-10-26T15:07:44Z,"Ah, right"
1006697366,11290,zuiderkwast,2022-10-27T10:32:34Z,Missing tests for 'hashtable' added in the last commit.
1012903843,11290,oranagra,2022-11-03T13:31:35Z,"i'm dismissing the comment for now (the part about creating a dict type in which we can search with char* and size_t).
we have others like this in redis, if we some day pick this up we'll be able to find that one too.
ok?"
1012908756,11290,oranagra,2022-11-03T13:35:38Z,"yes, i didn't mean adding tombstones feature to listpack, just that we somehow keep track of what we want to delete, and then delete it in one go.
i.e. add an lpBatchDelete that takes an array, and avoid unnecessary memmove (avoid moving the same byte several times), and does only one realloc."
1013114272,11290,zuiderkwast,2022-11-03T16:08:10Z,"You mean we leave it for later? Then I agree. There are plenty of places where an sds string is created just for a dict lookup. It deserves a PR of its own, perhaps in combination with other changes to dict which are discussed in various places."
1013154354,11290,zuiderkwast,2022-11-03T16:39:48Z,"OK, I get it. There will be only one realloc but we need an allocation for the temporary array of elements that we need to pass to lpBatchDelete.

This is about spopWithCountCommand where lpDelete is called in a loop in two places.

@oranagra I can attempt this now if you want..."
1013219808,11290,oranagra,2022-11-03T17:35:55Z,"yeah, please give it a try.."
1013422695,11290,zuiderkwast,2022-11-03T21:42:49Z,"The dstkey set is created as an intset because if the intersection contains only integers (even if the source sets don't), intset the right encoding for dstkey. We don't have any code for converting to intset from the other encodings.

If we create a listpack of the same capacity as the first set (if the first set is a listpack), then we will not be able to convert it down to intset later (unless we add code for converting listpack to intset)."
1013987446,11290,oranagra,2022-11-04T12:52:25Z,"forgot to free `ps` (also in ""case 3)"
1014009761,11290,zuiderkwast,2022-11-04T13:16:50Z,"I'll try this and add code for converting to intset. If the first set is a listpack, it means it has some non-integer member and it probably means the result is not only integers either, in most cases, so it can be a good heuristic."
1014019297,11290,oranagra,2022-11-04T13:26:19Z,"we need to keep in mind that insertion into intset can be expensive if done out of order (since its sorted it means insert rather than append), it would end up being beneficial if it remains an intset, but a waste if it is later converted.
on the other hand, if we start with a listpack, we can append out of order, and sort into an intset only if needed.

i'm starting to think that in order to make this efficient, we need quite a lot of heuristics, and code to handle it differently depending on the input sets sizes and encoding.
(so maybe it's better to give it up)"
1014491048,11290,zuiderkwast,2022-11-04T21:55:17Z,"Thx, yeah I found out from the failed CI."
1014492452,11290,zuiderkwast,2022-11-04T21:58:37Z,I've pushed a commit attempting some heuristic on this. Please have a look.
1017545315,11290,oranagra,2022-11-09T07:47:44Z,"we discussed this in a core-team meeting.
we decided that since we don't know how the existing defaults were tuned, and we don't know what to set for the new defaults, we'll take a conservative approach of using 128, so that the performance impact compared to the previous releases is lower (and also the memory benefits).

we decided that even if we some day want to add more ""generic"" controls on all of these, it should be in a separate PR were we handle all these tunables, so we leave it out for now."
1018617352,11290,enjoy-binbin,2022-11-10T03:26:14Z,"FYI. the two below tests both missing lpFree, fix it in #11492"
1018785674,11290,zuiderkwast,2022-11-10T08:29:58Z,:facepalm: Thanks for fixing it!
768574744,9938,oranagra,2021-12-14T11:31:44Z,"i think the more commonly used pattern is nicer and will also result in less changed lines.
i.e. all the code keeps using the stack based var, and we have an `if (rdbver_ptr) *rdbver_ptr = rdbver;` in one place."
768577251,9938,oranagra,2021-12-14T11:35:13Z,"i now realize that since functions are saved to the rdb, we need to do `server.dirty++` (to trigger a periodic save later).
so this comes in place of `forceCommandPropagation`, and probably applies in the other FUNCTION sub-commands.

I guess it doesn't come instead of `may-replicate`, since we may not want to mark this as a `write` command."
768581975,9938,oranagra,2021-12-14T11:41:53Z,"maybe there's a use case for merging functions from two sources, or failing when a function already exists?
in which case we need a `REPLACE` argument, and to return an error when there's a name collision (of a function name or library name)?"
768586487,9938,oranagra,2021-12-14T11:48:20Z,"@madolson can you review this code, and also maybe advice how to test it?
seems that the cluster tests don't use `redis-cli --cluster add-node`."
769362805,9938,sundb,2021-12-15T08:16:57Z,"If returns `C_ERR`, `dictReleaseIterator` will not be called."
769391005,9938,sundb,2021-12-15T08:50:09Z,"```suggestion
        functionInfo *fi = dictGetVal(entry);
```"
769392536,9938,sundb,2021-12-15T08:51:26Z,"```suggestion
    functionsCtx *f_ctx = functionsCtxCreate();
```"
769829378,9938,MeirShpilraien,2021-12-15T17:14:38Z,@oranagra maybe we should always do merge (and raise error on collision) and if the user wan REPLACE he can do `FUNCTION FLUSH` before sending the `FUNCTION RESTORE`?
769846321,9938,oranagra,2021-12-15T17:36:20Z,"REPLACE (overriding some functions), is not the same as FLUSH + RESTORE.
i.e. since RESTORE carries multiple functions"
769849911,9938,MeirShpilraien,2021-12-15T17:40:58Z,"OK so you want the user to use `FUNCTION FLUSH` anyway in case he wants a full replacement of the functions set. And also allow the user to specify REPLACE argument to replace  collides functions, so: `FUNCTION RESTORE [REPLACE] <blob>`? Looks good?"
770027474,9938,oranagra,2021-12-15T20:46:49Z,"Yes, I suppose we don't need a MERGE
Argument, since the user can use FLUSH in MULTI? 
Still maybe it's more convenient to have some atomic option for MERGE or FLUSH"
770209947,9938,madolson,2021-12-16T04:08:58Z,"```suggestion
void functionDumpCommand(client *c) {
```"
770210048,9938,madolson,2021-12-16T04:09:15Z,"```suggestion
void functionRestoreCommand(client *c) {
```"
770213160,9938,madolson,2021-12-16T04:18:54Z,"```suggestion
        // Send functions to the new node, if new node is a replica it will get the functions from its primary.
```"
770216581,9938,madolson,2021-12-16T04:30:09Z,Also missing the helpful documentation right above the function that indicates arguments :)
770217426,9938,madolson,2021-12-16T04:32:54Z,We are just checking the version here right?
770218161,9938,madolson,2021-12-16T04:35:15Z,These need to be updated too.
770219493,9938,madolson,2021-12-16T04:39:37Z,"We should probably check that there are no existing functions, like we do with data in clusterManagerNodeIsEmpty, or multi-exec the a flush along with this."
770220499,9938,madolson,2021-12-16T04:43:05Z,"Yeah, since all of the cluster tests rely a fixed 20 nodes, it's not surprising that it wasn't tested. It's probably easier to create a test in the old framework that starts up a small cluster, and adds in a new node."
770275074,9938,oranagra,2021-12-16T07:14:42Z,it should also verify the checksum.
770276933,9938,oranagra,2021-12-16T07:18:38Z,"since this dump contains multiple functions (or soon to be libraries), I wanna extend FUNCTION RESTORE with some argument like:
FLUSH - completely replace all existing functions
APPEND - add non-existing ones, and fail if there are conflicts
REPLACE - add non-existing ones, and override existing ones.

in this case, add-node can use FLUSH

@madolson @yossigo WDYT?"
770277565,9938,oranagra,2021-12-16T07:19:56Z,"by ""old"" you mean `tests/unit/cluster.tcl` that i recently created? or `tests/cluster/tests`?"
770476487,9938,yossigo,2021-12-16T12:01:14Z,@oranagra I think it makes sense.
771930520,9938,MeirShpilraien,2021-12-19T10:43:39Z,version + checksum
771968548,9938,oranagra,2021-12-19T15:57:09Z,"```suggestion
            dictEntry *new = dictAddRaw(functions_ctx->functions, fi->name, &existing);
```"
771968894,9938,MeirShpilraien,2021-12-19T16:00:49Z,@oranagra fixed accordingly and updated top comment.
771968909,9938,MeirShpilraien,2021-12-19T16:01:01Z,"Done, thanks."
771968948,9938,MeirShpilraien,2021-12-19T16:01:12Z,Fixed
771969096,9938,oranagra,2021-12-19T16:02:06Z,"let's add a comment saying that when it fails, error output is mandatory, and that releasing it is the responsibility of the caller.
another possibility is to avoid dynamic string, and just return static ones.
"
771969215,9938,oranagra,2021-12-19T16:03:03Z,why aren't we setting the error in this case?
771969495,9938,MeirShpilraien,2021-12-19T16:04:51Z,"Fixed, not resolving so you can review the documentation. "
771969511,9938,MeirShpilraien,2021-12-19T16:05:00Z,Fixed
771969524,9938,MeirShpilraien,2021-12-19T16:05:11Z,"Fixed, thanks."
771969544,9938,MeirShpilraien,2021-12-19T16:05:19Z,Fixed
771969591,9938,MeirShpilraien,2021-12-19T16:05:48Z,"Fixed, not resolving so you can review the changes."
771969635,9938,MeirShpilraien,2021-12-19T16:06:07Z,Fixed
771969662,9938,MeirShpilraien,2021-12-19T16:06:16Z,Fixed
771969857,9938,MeirShpilraien,2021-12-19T16:07:43Z,"@oranagra added FLUSH, APPEND, and REPLACE options according to this comment [here](https://github.com/redis/redis/pull/9938#discussion_r770276933)"
771969882,9938,oranagra,2021-12-19T16:07:59Z,"maybe make sure to nullify `err` on success?
maybe make `err` an optional argument?"
771970125,9938,oranagra,2021-12-19T16:09:32Z,"i don't like the fact that we rely on `err` to be set in order to know we failed.
it would be ok if it's all local to this function, but then we need to make sure to set it manually, if `rdbFunctionLoad` fails and doesn't set it."
771970244,9938,oranagra,2021-12-19T16:10:29Z,"```suggestion
        /* Send functions to the new node, if new node is a replica it will get the functions from its primary. */
```"
771970354,9938,MeirShpilraien,2021-12-19T16:11:14Z,"Not sure how to proceed here, should I add tests for adding node to the cluster? Maybe it should be a separate PR?"
771970643,9938,oranagra,2021-12-19T16:13:47Z,"is the APPEND/FLUSH/REPLACE an optional or mandatory arg?
if it's optional, it must be last, if it's mandatory, then just put 4 here"
771971883,9938,MeirShpilraien,2021-12-19T16:25:02Z,"@oranagra I saw that on redis-cli line comments are used all around, should I still change it?"
771972095,9938,MeirShpilraien,2021-12-19T16:26:54Z,"Its optional, but I prefer not to put it last so the blob could be used with `-x` argument on `redis-cli`. We have this pattern on `FUNCTION CREATE` where `REPLACE` is optional and comes before the code. If you do not like it here maybe you do not like it there either?"
771972361,9938,MeirShpilraien,2021-12-19T16:29:32Z,It is set by `functionsCreateWithFunctionCtx`
771972559,9938,MeirShpilraien,2021-12-19T16:31:16Z,"It can not be a static string because it might be set by the engine itself (telling the user where the code failed compilation for example), will document it."
771972869,9938,MeirShpilraien,2021-12-19T16:33:52Z,Thought to spare the extra argument but I can add another argument that indicate failure.
771973370,9938,oranagra,2021-12-19T16:38:43Z,"i suppose it has some line comments by mistake (too many different hands worked on it, and some maybe without aggressive review)
```
oran@Oran-laptop:~/work/redis$ grep -c ""/\*"" src/redis-cli.c
475
oran@Oran-laptop:~/work/redis$ grep -c ""//"" src/redis-cli.c
29
```"
771973443,9938,MeirShpilraien,2021-12-19T16:39:20Z,Will make sure to set an error message in case its not set.
771973557,9938,MeirShpilraien,2021-12-19T16:40:13Z,"OK, will make it optional."
771973790,9938,oranagra,2021-12-19T16:42:20Z,"or make sure that when rdbFunctionLoad returns an error without setting `err`, you're setting it yourself. (better not trust the implementation of another function)"
771974598,9938,oranagra,2021-12-19T16:49:42Z,"ohh, i see the code now.

so we're reserving the last argument to the code payload, and any extra arguments in between RESTORE and the payload could be modifiers (more can be added in the future).
kinda like https://redis.io/commands/brpop (last argument is always TIMEOUT, and any args in between are keys).
i think it's a bit awkward.
also, in normal RESTORE the payload is not necessarily the last argument.
maybe we don't absolutely have to have it last?
i.e. you wanted the user to be able to put the function code in a file and use `-x`, but maybe we're willing to waive that?"
771975557,9938,MeirShpilraien,2021-12-19T16:58:42Z,"I thought it make sense to build the commands such that we can use the `-x`, I believe `RESTORE` should have also built this way. Another option is to extend `redis-cli` with `--restore-functions` option (like we have for --eval)."
771975736,9938,MeirShpilraien,2021-12-19T17:00:49Z,Fixed
771975780,9938,MeirShpilraien,2021-12-19T17:01:00Z,Fixed
771976155,9938,oranagra,2021-12-19T17:04:21Z,"well, you know what.. i agree with you.
commands with huge binary payloads should be designed so that they have that as a last argument...

or maybe another alternative is to enhance the `-x` feature.
it could be `-x1` and `-x-1` (i.e. to denote injecting the argument at a certain offset from the start or the end).

or it could be `-x<PLACEHOLDER>`
like `redis-cli -xPAYLOAD function restore PAYLOAD << payload.dump`"
771976402,9938,oranagra,2021-12-19T17:07:26Z,"did you mean to test and set `err`?
or pass `error` to `functionsCreateWithFunctionCtx`?
something here seems odd, maybe we don't want to have both variables, or just one internally for the function, and handle the output arg only at the end."
771976956,9938,oranagra,2021-12-19T17:11:42Z,"thinking about this more, if it was possible to change RESTORE in a way that the payload is always the last argument, i'd go for it.

but since it's not possible, and actually that -x feature is just an odd feature of redis-cli, maybe we should indeed improve redis-cli to be able to inject stdin at any position like my placeholder idea above, and not worry about the position of that argument in the comment (we don't need to design command according to limitations of redis-cli)"
771976965,9938,MeirShpilraien,2021-12-19T17:11:51Z,"This is how it is done, `error` is the local variable that used everywhere and `err` is the output parameter that is set at the end with the value of `error` (if given). Did I missed something?"
771977160,9938,oranagra,2021-12-19T17:14:18Z,we're good.. it's just that i looked at an intermediate commit.
771977167,9938,MeirShpilraien,2021-12-19T17:14:22Z,"Convinced,  will change FLUSH|APPEND|REPLACE to be last argument."
771978459,9938,MeirShpilraien,2021-12-19T17:26:15Z,Fixed and updated top comment.
771988449,9938,oranagra,2021-12-19T19:05:46Z,"Are you sure FLUSH should be the default? 
Maybe APPEND is the safest. 
That's the only one that doesn't delete old data (it errors instead).. 

Either way, let's document that in the top comment and maybe HELP message "
771988539,9938,oranagra,2021-12-19T19:06:56Z,"I think ""old"" and ""new"" are mixed"
771989186,9938,oranagra,2021-12-19T19:12:49Z,the APPEND/REPLACE/FLUSH argument is missing
771992855,9938,MeirShpilraien,2021-12-19T19:50:10Z,Changed default to append.
771992874,9938,MeirShpilraien,2021-12-19T19:50:22Z,Fixed
771992895,9938,MeirShpilraien,2021-12-19T19:50:41Z,"Thanks, added."
772037735,9938,sundb,2021-12-20T01:50:14Z,"```suggestion
            dictReplace(functions_ctx->functions, fi->name, fi);
```"
772040257,9938,sundb,2021-12-20T02:02:18Z,"```suggestion
""DUMP"",
```"
772661245,9938,yossigo,2021-12-20T20:52:40Z,Consider describing how we construct the binary blob and why it requires an explicit CRC64 appended to it.
772662033,9938,yossigo,2021-12-20T20:54:17Z,"Wouldn't it make more sense to have the blob as the last argument? That will work better with `redis-cli -x` and may also be useful if we'll handle streaming of arguments in the future.

It should not be hard to disambiguate any of these keywords from an actual blob."
772662667,9938,yossigo,2021-12-20T20:55:25Z,I think it's a bit awkward to define a preprocessor macro in what *appears* to be a function context. Suggest to just define an enum.
772675267,9938,oranagra,2021-12-20T21:20:34Z,"having the blob as last argument means that either the modifier args are non-optional, or they're optional, and we know they're not the blob just because the blob is mandatory and there are more args.
kinda reminds me of BLPOP where the timeout is the last arg, and anything before it is keys. i think it's bad.

not sure we should define our commands by the limitations of redis-cli, which are in any case also limiting RESTORE (if the REPLACE argument is provided).
instead, we should improve redis-cli (will also help EVAL, RESTORE, etc)

@MeirShpilraien btw, in RESTORE it's called `serialized-value` in the docs, and `payload` in the code, maybe we should fallback to the same terminology."
772933170,9938,MeirShpilraien,2021-12-21T08:41:46Z,"> btw, in RESTORE it's called serialized-value in the docs, and payload in the code, maybe we should fallback to the same terminology.

Will change the terminology.

Regarding the payload as last argument, @oranagra I agree `redis-cli -x` should not come as a consideration but maybe streaming (in the future) should?"
773048874,9938,oranagra,2021-12-21T11:16:06Z,"Even in streaming, I. E. Handling that payload via some background operation without blocking the entire server, we need to apply thee change to redis only when the streaming ends. 
I. E. We can't flush the existing functions right away,, we must flush them only when we're done parsing the new ones, and we apply that command atomically. 
So I don't see any argument about that with regards to argument order. "
773103690,9938,oranagra,2021-12-21T12:42:11Z,"@MeirShpilraien we discussed this in the core-team meeting, and concluded that we'd like it tested as part of `tests/unit/cluster.tcl`"
773143071,9938,yossigo,2021-12-21T13:39:16Z,"@oranagra I agree with the final point. I don't think `redis-cli` should be a consideration either, so I'm OK with the current command structure."
773433113,9938,MeirShpilraien,2021-12-21T20:45:45Z,"Thanks @yossigo, updated the documentation."
773433415,9938,MeirShpilraien,2021-12-21T20:46:19Z,"> btw, in RESTORE it's called serialized-value in the docs, and payload in the code, maybe we should fallback to the same terminology.

@oranagra done"
773433556,9938,MeirShpilraien,2021-12-21T20:46:36Z,"thanks, fixed."
773900190,9938,MeirShpilraien,2021-12-22T13:49:06Z,"@oranagra added a test, let me know what you think."
773915590,9938,oranagra,2021-12-22T14:11:14Z,"```suggestion
# stop 5 servers
```"
773917730,9938,oranagra,2021-12-22T14:14:17Z,"```suggestion
# Test redis-cli -- cluster create, add-node, call.
# Test that functions are propagated on add-node
```"
774314000,9938,madolson,2021-12-23T04:47:55Z,"What's the logic to use `APPEND` here, the current node would then be inconsistent with the remaining nodes in the cluster. I would've expected `FLUSH`. "
774314984,9938,madolson,2021-12-23T04:52:04Z,Can't this just be a regular client?
774315707,9938,madolson,2021-12-23T04:54:47Z,None of these are used.
774316937,9938,madolson,2021-12-23T04:59:11Z,"This is very limited testing of this functionality, so it would probably be good to clarify this test is just verifying the function transfer behavior."
774349005,9938,MeirShpilraien,2021-12-23T06:26:22Z,@madolson so you suggest to use `FLUSH` and check before that there is not existing functions?
774351186,9938,MeirShpilraien,2021-12-23T06:32:48Z,Actually it will be enough to just verify that there is no functions in the new node...
774356722,9938,MeirShpilraien,2021-12-23T06:48:39Z,Fixed and update top comment.
774356799,9938,MeirShpilraien,2021-12-23T06:48:51Z,"Thanks @madolson, fixed."
774356857,9938,MeirShpilraien,2021-12-23T06:48:59Z,Fixed
774356912,9938,MeirShpilraien,2021-12-23T06:49:05Z,Fixed
774424332,9938,oranagra,2021-12-23T09:08:17Z,"i think adding another round trip to check if the node has functions may be excessive and more complicated.
but one thing's for sure, we do wanna either override the conflicting ones, or fail the add-node (which i think is better).
so the disadvantage here (when using APPEND, and failing if there are conflicts) is that there's a chance the new node will have some additional functions that don't exist in the other nodes.
but there's actually no guarantee that other nodes don't have such mismatches (if the user uploaded different functions to each).

so maybe the question is where this new node come from, and if it was wiped clean, and re-configured before being added.
@madolson is there some mechanism for that? or common practice?
if not, then maybe we do need FLUSH"
774425950,9938,oranagra,2021-12-23T09:10:58Z,"ohh, i see it was already implemented, and looks like not a lot of code.
so the only possible concern is that maybe we're overriding some data that the user didn't realize that he's gonna lose.
but that's also true about data in the keyspace, right? something in that process is calling FLUSHALL?"
774453849,9938,MeirShpilraien,2021-12-23T09:56:14Z,"@oranagra why we overriding data? If there is any function on the new node we failed the process, otherwise we add the node and the functions (we are not overriding because we know there are no functions on the new node)."
774463893,9938,oranagra,2021-12-23T10:12:46Z,right. sorry.. i guess i mixing the case using FLUSH without a check in my head.
775050275,9938,oranagra,2021-12-24T16:22:09Z,maybe we should be specific and advise a FUNCTION FLUSH?
775050282,9938,oranagra,2021-12-24T16:22:13Z,"this will now fail if any function already exists on the dest, right? even if there are no overlapping or an identical set of functions.

maybe we should modify the test.
p.s. maybe redis-cli needs to have some `--force` option to skip that check?"
776568500,9938,madolson,2021-12-30T04:57:57Z,"Sorry for being slow, doing the check outlined here seems like the safest approach, so LGTM."
551881422,8288,bjosv,2021-01-05T11:42:45Z,"maybe some clarification:
..this is where the assigned ID is `returned.`"
551887199,8288,bjosv,2021-01-05T11:55:57Z,"A comment depending on how much validations normally is done at this level:
Validating that argv contains an even amount of elements? (and possibly >= numfields*2 elems)
Probably good since it seems that `streamAppendItem()` expects values to exist: `value = argv[i*2+1]->ptr`"
551887521,8288,bjosv,2021-01-05T11:56:33Z,currently unused UNUSED
551930404,8288,zuiderkwast,2021-01-05T13:27:18Z,What do you mean? It's not possible to check the number of elements in argv.
551976473,8288,bjosv,2021-01-05T14:45:58Z,"Never mind, I see now that we only have pointers to work with and no container. It needs to be correct from caller and your updated function description is perfect."
552031460,8288,oranagra,2021-01-05T16:09:52Z,"technically, i think it's ok.. they're identical and will never change.
but i can't see any preexisting practice like that, and since it's just to field, copying them one by one is easy and clean (which is what you did), so i guess that's a better choice."
552032116,8288,oranagra,2021-01-05T16:10:58Z,"we might want to give the user some visibility on the error types.
RM_Call does it with `errno`, i'm not sure if we wanna keep that practice.
need to think this through"
552034724,8288,oranagra,2021-01-05T16:14:54Z,"i think your decisions of not doing signalKeyAsReady, signalKeyAsReady, etc implicitly are right.
module should do these manually when done amending the stream.
maybe it should be clearly stated in the documentation of the add API though."
552036112,8288,oranagra,2021-01-05T16:16:48Z,"These are not yet documented (documentation is generated from the comments in the C file.
i guess you're not using them, and just added them as a preparation for your next PR (in which case let's trim them from here), or are you planning to extend this PR with more stream APIs?"
552037149,8288,oranagra,2021-01-05T16:18:26Z,"styling: i see that (maybe wrongly) none of the other APIs are broken to multiple lines in this file (although some are 300 chars long).
for now i think we should be consistent with that.

p.s. i doubt we really want `int64_t` for numfields, `long` would be better (for 32 bit builds)"
552229422,8288,zuiderkwast,2021-01-05T22:11:16Z,"OK, good. However, `RedisModule_SignalKeyAsReady() calls the signalKeyAsReady() with OBJ_MODULE as the 3rd arg. I'm not sure it works or if needs to be OBJ_STREAM."
552230177,8288,zuiderkwast,2021-01-05T22:13:07Z,"That's right, they're not used yet. I can remove them and add them again in another PR where they're used. I think it's good to divide the stream API into multiple PRs.

Are the docs generated from the comments? I assumed they're just manually copied into the redis-docs repo. Please clarify so I can do it properly."
552232390,8288,zuiderkwast,2021-01-05T22:17:47Z,"Sure, I'll use `long`. (Maybe `size_t` would be semantically correct but it doesn't seem to be used much in Redis.)

I took `int64_t` from the numfields arg in `streamAppendItem` (t_stream.c)"
552714588,8288,oranagra,2021-01-06T15:27:43Z,"good catch. that seems like a flaw in the API.
it should have taken a `RedisModuleKey` argument rather than key name.
not sure what we can do now, other than add a new API and deprecate the old one.
@guybe7 WDYT?"
552717610,8288,oranagra,2021-01-06T15:31:09Z,the docs are generated by `src/modules/gendoc.rb` (parsing module.c and looking for comments above RM_ apis).
552718735,8288,oranagra,2021-01-06T15:32:59Z,"the code inside redis is more flexible to change. the API needs to be ABI compatible, so what we set now is there forever.
i think `long` is the right one here."
555902372,8288,zuiderkwast,2021-01-12T16:24:23Z,"Another idea is define more non-zero return values to use only in new API functions, e.g. `REDISMODULE_ERR_BADARG`, `REDISMODULE_ERR_BADTYPE`, etc. We can't add them to old functions though since users may have assumed that `result != REDISMODULE_ERR` means success.

But, given that it's is possible to prevent all the errors by properly opening the key for writing and checking the type of the key before calling StreamAdd with the right args, I think just returning ERR is OK.

If we return `REDISMODULE_ERR` for now, we can add errno later if you decide upon that?"
556571551,8288,guybe7,2021-01-13T14:45:04Z,maybe RM_CreateStringFromStreamID?
556575659,8288,guybe7,2021-01-13T14:50:27Z,"i vote for defining more non-zero errors
AFAIC i don't mind having specific errors for specific APIs as long as it's documented
Otherwise maybe we can find some general errors that are not API-specific"
556577633,8288,guybe7,2021-01-13T14:52:51Z,"maybe call them `start` and `end`?
it's a bit weird that in case of REDISMODULE_STREAM_REVERSE minid > maxid

also to avoid confusion with XTRIM MINID"
556584557,8288,zuiderkwast,2021-01-13T15:01:16Z,"Good idea. I wanted to start them all with `RM_Stream`, but this one is actually just like `RedisModule_CreateStringFrom(LongLong|Double|...type...)` so I like it.

Should I put it together with the other `CreateStringFrom*` functions so they show up together in the ref docs?"
556585043,8288,zuiderkwast,2021-01-13T15:01:52Z,"If REVERSE is specified, maxid is actually the start and minid is the end, so I thought minid and maxid are more clear than startid and endid. Maybe rename to upper and lower? Or I can change the semantics and require startid >= endid if REVERSE is specified. Or maybe just do reverse implicitly if startid > endid and we don't need a REVERSE flag...?

[Edit] I assume you mean we want startid >= endid when REVERSE is specified, so the order of args will be like XREVRANGE."
556594512,8288,guybe7,2021-01-13T15:14:21Z,"i think it's best to stick with the standard set by `streamIteratorStart` and use `start` and `end`
(and then REVERSE goes from `end` to `start` which kind makes sense..?)"
556594756,8288,guybe7,2021-01-13T15:14:38Z,yes please
556603995,8288,zuiderkwast,2021-01-13T15:26:16Z,"One more thing: If startid and endid are **not** pointers, REDISMODULE_STREAM_MIN and REDISMODULE_STREAM_MAX can be used directly. OK?"
556610448,8288,guybe7,2021-01-13T15:34:24Z,"why do you want to pass them by value? i think it's more intuitive to pass NULL the means ""i want the edge"""
556611559,8288,guybe7,2021-01-13T15:35:48Z,also please you called them REDISMODULE_STREAMID_MIN and not REDISMODULE_STREAM_MIN (maybe update comment)
556612176,8288,guybe7,2021-01-13T15:36:35Z,perhaps you want to use the MIN/MAX constants here
556616014,8288,zuiderkwast,2021-01-13T15:41:40Z,"Yes, the user can use it like
```C
    RedisModuleStreamID startid = REDISMODULE_STREAM_MIN;
    RedisModuleStreamID endid = REDISMODULE_STREAM_MAX;
    RedisModule_StreamIteratorStart(key, 0, &startid, &endid);
```

... but since they are pointers, they can also be NULL. With NULL we also use MIN and MAX.

In the other comment, I suggested we don't let it be pointers. Then they can't be null and we don't need this logic."
556618686,8288,guybe7,2021-01-13T15:45:14Z,generally speaking we prefer to pass structs by ref and not by value.. i think it's ok as-is
556629210,8288,zuiderkwast,2021-01-13T15:52:49Z,"Also renaming the parse function to `RM_StringToStreamID` (matching `StringToLongLong` and others), OK?
"
556630900,8288,guybe7,2021-01-13T15:53:56Z,yes please
556661907,8288,zuiderkwast,2021-01-13T16:32:00Z,"OK, so let's use pointers and NULL for the edges. Then, we don't really need MIN and MAX, so I'll delete them. Better just have one way of specifying it, right?

(I do think start and end are ambiguous. Start and end could mean (1) where you start and end the iteration vs (2) the start and end of the interval. But I'll stick with the start-end terminology and make it clear in the docs.)"
556941909,8288,zuiderkwast,2021-01-13T23:20:40Z,"<del>Trying to come up with generic `REDISMODULE_ERR_*` usable also for future APIs, here are some far-from-perfect ideas. I think errno is not very well suited in some cases, but I've tried to map them too.</del> **[Edit] `errno` column updated to match the current implemention in this PR.**

| Scenario | Functions | errno | <del>Return macro idea</del> |
|-|-|-|-|
| invalid flags | all which have flags | EINVAL | `REDISMODULE_ERR_INVAL` |
| mandatory pointer arg is NULL | all | EINVAL | `REDISMODULE_ERR_INVAL` |
| key is empty (type empty => wrong type) | Iterator*, Delete, Trim* | ENOTSUP | `REDISMODULE_ERR_NOTEXIST` |
| key not a stream (wrong type) | Add, Iterator*, Trim* | ENOTSUP | `REDISMODULE_ERR_WRONGTYPE` |
| key not open for writing | Add, Delete, IteratorDelete, Trim* | EBADF | `REDISMODULE_ERR_READONLY` |
| iterator not started | Iterator* (except IteratorStart) | EBADF | `REDISMODULE_ERR_NOTSTARTED` |
| requested ID is 0-0 | Add | EDOM | `REDISMODULE_ERR_TOOSMALL` |
| requested ID not greater than last stream ID | Add | EDOM | `REDISMODULE_ERR_TOOSMALL` |
| stream ID reached the last possible | Add | EFBIG | `REDISMODULE_ERR_FULL` |
| iterator reached end | IteratorNext* | ENOENT | `REDISMODULE_EOF` (not an error) |
| ID not found | Delete | ENOENT |  |
| string not a stream ID | StringToStreamID | (EDOM) | `REDISMODULE_ERR` (aligned with existing string functions) |

Most of the errors are programming errors. Maybe it could be possible to enable debug logging instead and get a readable error message printed somewhere, such as by putting a log function pointer in the context or so?

The only errors which aren't possible to detect in other ways are ""iterator reaches end of range"" (not an error) and ""stream ID not available for add"" (can be indicated by setting `id` to the next available ID while returning an error). Maybe we can have special return values for only these (and maybe a few more) and generic ERR for the rest?"
557732528,8288,oranagra,2021-01-14T22:13:41Z,"Indeed we can't change existing APIs, since some module can explicitly check for ERR return. 
And introducing new error types just for these APIs is bad for consistency. 
So I tends to lean towards using `errno`.
I'd like to hear what @yossigo thinks. "
557978920,8288,zuiderkwast,2021-01-15T07:55:48Z,"`signalKeyAsReady()` is called by `dbAdd()` (db.c) so it's done implicitly by `RM_ListPush()` and `RM_ZsetAdd()` (via `moduleCreateEmptyKey()`). These types (BLPOP, etc.) can only block if the key doesn't exists, because popping the last element deletes the key.

`signalKeyAsReady()` is also done implicitly when adding to a non-existing stream, also via `moduleCreateEmptyKey()`.

Thus I think it should be done implicitly also when adding to an existing stream. Stream is the only type where readers can be blocked even if the key exists (e.g. using XREAD with id `$`).

Makes sense?"
559197097,8288,oranagra,2021-01-17T15:29:38Z,"do we really need that `REDISMODULE_STREAM_NOMKSTREAM`?
it's a bit hard to resist, but i think we should try hard to escape from the desire to map the commands ""as is"" into functions.
and instead come up with a useful API.
in this case i think the module can check the type of the key it opened, and we don't want that flag.

i.e. the flag exists for a command for atomicity."
559198928,8288,oranagra,2021-01-17T15:44:47Z,"maybe a better API is to let the user interrogate the item at the iterator cursor rather than return it (or a portion of it) in the `next` call?
i.e. `RM_StreamIteratorNext` will return count, or just an ok / error, and you'll have another function to query the individual fields and values?
this way there's no need for a pre-allocated array, and the user can run on the result until he finds the records he's interested in (in case it's a specific one)."
559199334,8288,oranagra,2021-01-17T15:47:21Z,"i feel it's a bit odd that we're mixing flags of different functions together (most will never be used in combination with each other).
maybe of these can maybe just be turned into a boolean argument (although that means that we can't extend it in the future)"
559199612,8288,oranagra,2021-01-17T15:49:23Z,"maybe instead of the `EXCLUSIVE` flag we better just expose streamIncrID and streamDecrID as APIs?
it would be a bit harder to use, but can be more powerful.
i'm not sure.
@guybe7 @itamarhaber ?"
559201797,8288,yossigo,2021-01-17T16:06:50Z,"As much as I REALLY don't like the `errno` abuse, I think at this point in the API's life cycle we should probably stick to it rather than create a new error coding system. I think the cognitive load of remembering when to extended `REDISMODULE_ERR_*` and when to use `errno` will inevitably lead to unnecessary bugs."
559442089,8288,zuiderkwast,2021-01-18T09:55:22Z,Good point!
559445727,8288,zuiderkwast,2021-01-18T10:00:43Z,"Just like the internal streamIterator then. I like it. So how about:

```C
int RM_StreamIteratorNextID(RedisModuleKey *key, RedisModuleStreamID *id, long *numfields);
int RM_StreamIteratorNextField(RedisModuleKey *key, RedisModuleString *field, RedisModuleString *value);
```"
559448367,8288,zuiderkwast,2021-01-18T10:05:04Z,"Just in case we want to allow some functions to share some flags, I made them use distinct bits. You use the macros anyway, right?"
559450844,8288,zuiderkwast,2021-01-18T10:08:43Z,Give me a use case for incr and decr and I will be convinced. :-)
559453786,8288,zuiderkwast,2021-01-18T10:13:20Z,"Regarding boolean arguments vs flags: When reading code, which of the below is easier to understand?

```C
RedisModule_StreamIteratorStart(key, 1, start, end);
```

```C
RedisModule_StreamIteratorStart(key, REDISMODULE_STREAM_REVERSE, start, end);
```"
559459676,8288,oranagra,2021-01-18T10:23:07Z,"i agree it's makes it easier to read the code, and also opens the possibility for adding more flags in the future without modifying the API. 
but it's a bit odd that they share the same ""bit"" space.
i suppose i can live with it."
559810557,8288,zuiderkwast,2021-01-18T21:57:31Z,Related: #8356
560825568,8288,zuiderkwast,2021-01-20T09:50:16Z,"I don't mind having a different bit space for each API function if you prefer that. Then maybe the name prefixes should reflect that too, e.g. `REDISMODULE_STREAM_ITERATOR_REVERSE`, etc.

Currently, each command has a check that only supported stream flags are used, exploiting the fact that all flags are distinct. If we make e.g. REVERSE = AUTOID, it's not possible for a check to forbid iteration with the AUTOID flag."
560996001,8288,oranagra,2021-01-20T14:21:19Z,"yeah, if each of these flags applies only for one function, let's name them appropriately."
561055623,8288,guybe7,2021-01-20T15:30:41Z,@zuiderkwast i didn't read the entire correspondence - what's the decision here?
561103762,8288,oranagra,2021-01-20T16:27:42Z,i think we decided to go with `errno`. Yossi's last post sums it up nicely
561268690,8288,oranagra,2021-01-20T20:28:35Z,"I still don't think we should implicitly call signalKeyAsReady in RM_StreamAdd.
I think the module should do it explicitly when done adding.

for lists that may be ok to count on dbAdd (executed once per command), but streams you can add to an existing stream (many times inside one call), and also, the client can be blocked on a key that exists (unlike list that blocks on a key that's missing)

@guybe7 WDYT?

p.s. is the fact that RedisModule_SignalKeyAsReady still calls signalKeyAsReady() with OBJ_MODULE not causing any harm now? seems to me that it does and the only reason the test in #8356 passes is because it relies the automatic one in dbAdd.
i think we need to modify RedisModule_SignalKeyAsReady and signalKeyAsReady, so that when it is called it skips that new check."
561710770,8288,zuiderkwast,2021-01-21T09:10:45Z,"I think it's inconsistent if StreamAdd (and ListPush and ZsetAdd) to an empty key signals implicitly, but adding to an existing stream doesn't. If the worries are about performance, we can set a flag in the key struct and signal when the key is closed. How about that?

For comparison: Signal to WATCHed keys (`signalModifiedKey()`) is done implicitly when a key opened for writing is closed.

@guybe7 any ideas?

> p.s. is the fact that RedisModule_SignalKeyAsReady still calls signalKeyAsReady() with OBJ_MODULE not causing any harm now? seems to me that it does and the only reason the test in #8356 passes is because it relies the automatic one in dbAdd.

That's right. The test case relies on it being done implicitly, for the correct type."
561715618,8288,oranagra,2021-01-21T09:18:13Z,"i suppose your suggestion about caching a flag in the key and doing it implicitly in close is ok.

can you also make a PR to solve the problem with RedisModule_SignalKeyAsReady?"
561735985,8288,zuiderkwast,2021-01-21T09:47:36Z,"OK good. 😊 What's the problem in `RedisModule_SignalKeyAsReady()`? If all normal types are signaled implicitly, the only point of `RedisModule_SignalKeyAsReady()` is to signal for user-defined types...

[Edit] but documentation could be updated."
561737843,8288,oranagra,2021-01-21T09:50:19Z,"I've discussed it with Guy, at first we concluded that the code in `RedisModule_SignalKeyAsReady` is ok (no need to fix it).
since any modification on other types (list / streams) will always trigger an implicit SignalKeyAsReady, so the only reason to use that API is for a module that wants to release another client blocked on a module data type (which doesn't have an implicit SignalKeyAsReady).

But then we thought of another case, let's say there's a module that implements an LPOP, but one that's similarly to an XREAD can wait for new data even on a non-empty list (e.g. when a list has at least 5 elements).
This means that there's no implicit SignalKeyAsReady since a push to a non-empty list won't trigger it.
but on the other hand, if the only blocked client that's waiting for this case is a module, then calling RM_SignalKeyAsReady will release it (in that case, the argument to signalKeyAsReady is not about the type of the blocked key, but rather the identity of the entity that's blocked).

Maybe it would be nice to add a test like that a command like MODULE.LPOP 5 (that will unblock only when there are 5 elements to pop, and will block even if the list is not empty)."
561741610,8288,zuiderkwast,2021-01-21T09:56:03Z,"I'll go with `errno`. I think it's quite fine in all cases except when an iterator comes to its end. EOF is not an error. I've considered ENOENT for ""no more entries"" but you shouldn't need to check errno in a successful iteration, right?

How about returning OK (0), ERR (1) or EOF (-1) for IteratorNext?"
561750865,8288,oranagra,2021-01-21T10:09:35Z,"i don't like the -1 that much.
considering the user wants to abort the iterations on EOF, i guess it's not too bad to return ERR, with errno set to ENOENT"
561767306,8288,zuiderkwast,2021-01-21T10:33:30Z,"OK @oranagra, I don't like either of the two solutions actually. :-) I'd like to think about it a bit more to see if there are any other options. Any ideas are welcome.

I pushed two commits just now. If we decide to go with ENOENT, I'll revert the last one."
561772233,8288,zuiderkwast,2021-01-21T10:40:52Z,"`BLPOPN key 5` &ndash; It's so nice it deserves to be an official command :D

Jokes aside, that was a good discussion. Thanks for sharing. Adding a test case sounds like a good idea."
561807028,8288,oranagra,2021-01-21T11:35:42Z,"@yossigo what do you think? when an iterator is spent, return a REDISMODULE_ERR and errno=ENOENT, or add another REDISMODULE_EOF?"
561808232,8288,oranagra,2021-01-21T11:36:39Z,"@zuiderkwast FYI, in the commit that added the errno, you documented the ENOENT, but didn't actually use it.
so if you revert the last commit, you'll need to fix this."
561814394,8288,oranagra,2021-01-21T11:41:55Z,"i'm not comfortable with this undefined behavior.
i think we should check `si->lp_ele` (maybe add an `streamIteratorIsValidField`, or modify `streamIteratorGetField` to return an error), and handle that too (possibly setting errno to ENOENT)."
561827885,8288,zuiderkwast,2021-01-21T12:04:35Z,"I'll try this. I was planning to store a field counter of the current entry in the key struct and use it to return an error in NextField(), but if it can be done in streamIterator itself, it's better of course."
562006063,8288,zuiderkwast,2021-01-21T16:11:45Z,Solved. I followed my original idea and stored a counter in the key struct.
562085633,8288,oranagra,2021-01-21T17:58:29Z,"i'm curious, did you try the `si->lp_ele` idea and found some problem with it, or just didn't want to do any changes in t_stream.c ?"
562167500,8288,oranagra,2021-01-21T20:12:34Z,don't you mean `|=`?
562170088,8288,oranagra,2021-01-21T20:17:29Z,"commenting that now one ""Next"" API returns EOF value, and the other does `errno = ENOENT`
just so we don't forget this."
562232928,8288,zuiderkwast,2021-01-21T22:15:21Z,"The latter. I haven't spent enough time to understand the internals of t_stream.c and with the union in the key struct, it doesn't really cost anything extra to put it there... Do you prefer the `si->lp_ele` solution?"
562233701,8288,zuiderkwast,2021-01-21T22:16:50Z,Right... But not even that. The stream can also be empty and when adding one it will have length == 1. I'll have to rework this a little.
562234437,8288,zuiderkwast,2021-01-21T22:18:13Z,Good. Yes I know... I thought we're leaning towards ENOENT for both of them now...
562237521,8288,zuiderkwast,2021-01-21T22:24:59Z,There's a slight diffrerence though. For NextField() you can know the number of fields in advance and thus it can be considered an error to call it for more times than that number. For NextID() you don't know the number in advance.
562555977,8288,zuiderkwast,2021-01-22T11:02:58Z,"I've been thinking about ERR vs EOF for the IteratorNext() functions a bit more and I think you're right, ERR is cleaner for the user. Motivation: If StreamIteratorStart(key, ...) was successful, IteratorNextID(key, ...) can't fail if it's called with the same key, so in practice, users don't need to check errno for IteratorNextID().

I'll revert to ERR and add a note about this. If @yossigo or anyone else has other ideas, I'll be happy to change it again."
562584385,8288,zuiderkwast,2021-01-22T11:59:22Z,Done.
562584759,8288,zuiderkwast,2021-01-22T12:00:06Z,Changed to `if (!created) key->u.stream.signalready = 1;`
562644112,8288,zuiderkwast,2021-01-22T13:51:48Z,Here's the test discussed: #8382. A module blocks until a list has 5 elements.
563249899,8288,oranagra,2021-01-24T07:18:00Z,"i think it's a good idea to also zero the output arguments, not just rely on the return value."
563252313,8288,oranagra,2021-01-24T07:41:42Z,"i prefer it since it seems safer (won't cause NPD in case of a mismatch between the count and what's actually in the listpack, see #7807). 
I suppose such a change would also have such a side effect benefit for other pieces of in stream that use this function (even if they do run a loop that exit only on field count), but i suppose for modules this safety is of higher concern.

from a quick look i took now, in order to make it safe, `streamIteratorGetField` should exit when `si->lp_ele` is NULL.
maybe for extra safety, it would also be a nice idea to nullify it in two places in `streamIteratorGetID` when it returns 0 due to running out of range."
563264365,8288,yossigo,2021-01-24T09:33:15Z,"@zuiderkwast I agree with you, I think it's not perfect but it's more consistent. In addition to the usage you describe, I think introducing `REDISMODULE_EOF` globally and using it only here would be confusing."
563363878,8288,zuiderkwast,2021-01-24T21:36:10Z,"OK, I'll put this back again, tomorrow. (For reference: First I added this but then I removed it again because I thought it would be unexpected to touch the output args when ERR is returned.)

[Edit] I think it can be useful *not to zero* them actually. Let's say a module iterates over the stream, saves the last id and later continues iterating from there, like in this pseudo-code:

```C

int consume_stream() {
    static RedisModuleStreamID id = {0, 0};
    RedisModule_StreamIteratorStart(key, REDISMODULE_STREAM_EXCLUSIVE, &id, NULL);
    while(RedisModule_IteratorNextID(key, &id, &numfields) == REDISMODULE_OK) {
        ...
    }
    RedisModule_BlockClientOnKeys(..., consume_stream, ...);
}
```

In a way it's similar to `for (i = 0; i < n; i++) { ... }` -- you'd expect `i == n` afterwards and some code even relies on it.

Anyway, if we zero the args, I think it should at least be documented to avoid any confusion if anyone tries to do like in `consume_stream()` above."
565103053,8288,zuiderkwast,2021-01-27T08:11:03Z,"I'm looking at this.

* `streamIteratorGetField` returns `void`. It would need to return `int` to indicate if there was a field or not.
* I can't see the two places where you want to nullify `si->lp_ele`. lpNext() and lpPrev() already return NULL when running out of range. Maybe you can enlighten me?

I suppose this can also be changed as a separate improvement after merging this PR. I don't feel very confident about the listpack and rax structure."
565206151,8288,bjosv,2021-01-27T10:44:43Z,"Would the issue in `streamIteratorGetField()` be that if the first `lpNext()` returns NULL since it is running out of range, the second `lpNext()` will get NULL in its listpack pointer, which triggers an assert in `lpNext()`.
I guess `streamIteratorGetField()` needs to bail out after attempting to get the missing fieldptr, and then it might need to nullify the returned field and value ptrs before returning. This can later be checked in `RM_StreamIteratorNextField()` to make sure that more fields existed."
565263090,8288,oranagra,2021-01-27T12:18:17Z,"the two places i meant that i think `streamIteratorGetID` should nullify `si->lp_ele` are:
https://github.com/redis/redis/blob/9e56d3969a3d19ef73d7042f91ba34bef39ed189/src/t_stream.c#L1121
https://github.com/redis/redis/blob/9e56d3969a3d19ef73d7042f91ba34bef39ed189/src/t_stream.c#L1132

i think that if we do that, and change `streamIteratorGetField` to return an error when `si->lp_ele` is NULL on entry, should make all of this safe.

i'm ok leaving this issue for some future day, and also ok to change the PR to use that instead of counting the fields.
up to you if you wanna try it."
565319416,8288,zuiderkwast,2021-01-27T13:46:26Z,"OK, thanks. I tried it, but GetField() doens't reach `si->lp_ele == NULL` after the last field in an entry, so it just continues returning fields from the next stream entry. My guess that we need a numfieldsleft counter for this, either in the streamIterator or in the API...

Btw, this PR reached :100: comments. :)"
565321080,8288,oranagra,2021-01-27T13:48:42Z,"ohh, right. for some reason i thought the next entry is in the next rax node.
sorry."
1384820874,12658,oranagra,2023-11-07T12:12:52Z,"why change this one? it is only used from within a fatal crash.
also, i suppose the extra linefeed is to add an empty line after that header, why did you remove it?"
1384824258,12658,oranagra,2023-11-07T12:15:40Z,don't we need to cast size_t to a long here?
1384824924,12658,oranagra,2023-11-07T12:16:17Z,"again, is this change necessary according to our guidelines?
same for bugReportEnd.."
1384829531,12658,oranagra,2023-11-07T12:20:31Z,let's fix the indentation
1384831072,12658,oranagra,2023-11-07T12:22:02Z,i think this one and others should be put in util.c
1384847720,12658,oranagra,2023-11-07T12:37:22Z,let's comment that we do it this way because of signal safety
1384849538,12658,oranagra,2023-11-07T12:39:01Z,"```suggestion

```"
1384851789,12658,oranagra,2023-11-07T12:40:59Z,"maybe it could be called serverLogRawFromHandler (like serverLogRaw), and be made non-static?
i.e. they both take a pre-formatted message"
1384854374,12658,oranagra,2023-11-07T12:43:24Z,maybe part of the comment should be copied from the other function
1384863802,12658,oranagra,2023-11-07T12:51:30Z,"this lock was there to avoid writing to an already destroyed data structure.
now that we don't destroy it, that's not a concern, but if we repeatedly invoke this mechanism, then a thread that's late for the previous invocation, and corrupt the next one.
is that right?"
1384864354,12658,oranagra,2023-11-07T12:52:01Z,@yossigo please ack that this is right
1384872266,12658,oranagra,2023-11-07T12:58:32Z,"what does the ""safe"" prefix here stands for?
why does `fgets_async_signal_safe` state that and this one doesn't?
at the very least these should have a comment explaining them and when they should be used."
1384873266,12658,oranagra,2023-11-07T12:59:18Z,"`_` prefix usually denotes private / static.
if these are exposed, let's drop the prefix"
1386020714,12658,meiravgri,2023-11-08T05:40:45Z,"`serverLogRaw` and `serverLogFromHandler` with `LL_RAW` flag just print the text with no preceding header.
`serverLogFromHandler` adds a newline 
So we are keeping the current behavior but using a safe version"
1386025388,12658,meiravgri,2023-11-08T05:48:41Z,we also said we rather use safe functions in new contexts
1386121168,12658,tezc,2023-11-08T07:27:30Z,"Just a note, using `PATH_MAX` for a buffer implies that you are going to write a file path into it. If you are not using the buffer for this purpose, I would avoid doing that. "
1386124150,12658,tezc,2023-11-08T07:30:56Z,"```suggestion
    char path_buff[PATH_MAX];
```
Leftover? Seems not necessary anymore as it will be overridden on the next line"
1386126331,12658,tezc,2023-11-08T07:33:26Z,You can also check if read() returns negative. 
1386141741,12658,oranagra,2023-11-08T07:50:10Z,"i forgot to mention, that it's probably a good idea to add a `format printf` attribute to _safe_snprintf, see addReplyErrorFormat and others."
1386218270,12658,tezc,2023-11-08T08:52:03Z,"One thing I'm not sure is if this struct definition is portable. Same link I pointed before: [here](https://github.com/python/cpython/blob/b75186f69edcf54615910a5cd707996144163ef7/Modules/_posixsubprocess.c#L396), it defines `struct linux_dirent64` itself.

Also, there are some bits in **notes** section that implies we are supposed to define ourselves: [link](https://man7.org/linux/man-pages/man2/getdents.2.html)
Probaby, our best bet is defining `struct linux_dirent64` ourselves as in the above link. 

Btw, did you run daily for this branch? I assume our alpine build uses musl libc, it may not provide `struct dirent64`. 
"
1386226571,12658,oranagra,2023-11-08T08:58:30Z,"ok, i thought safe version isn't needed (this flow uses unsafe logging anyway)"
1386557625,12658,meiravgri,2023-11-08T12:44:42Z,"The fact that we define the struct won't protect us if `syscall(SYS_getdents64)` expects to fill another struct. 
Note that although the man page implies that, the struct mentioned is incorrect. (d_name comes before d_type) 
This is why I feel more comfortable using something defined in a standard header.

and yes
https://github.com/meiravgri/redis/actions/runs/6780556294"
1386575175,12658,meiravgri,2023-11-08T12:52:49Z,"but if we can use it it won't hurt, right?"
1386588639,12658,meiravgri,2023-11-08T13:03:32Z,"actually, i copied it as is from Twitter, but you are right and that it will be better to align all the new safe functions' names.
I'd go with <orig_name>_async_signal_safe"
1386687442,12658,tezc,2023-11-08T14:14:12Z,"> Note that although the man page implies that, the struct mentioned is incorrect. (d_name comes before d_type)

Beware, there are two structs: `struct linux_dirent` and `struct linux_dirent64`. Variable order is slightly different in these two (yes, it is confusing!). We are using `struct linux_dirent64` with `syscall(SYS_getdents64)`

The above [link](https://github.com/python/cpython/blob/b75186f69edcf54615910a5cd707996144163ef7/Modules/_posixsubprocess.c#L396) mentiones that this struct definition cannot change without breaking the linux API. So, that's why they defined themselves. Otherwise, we have to assume libc will provide it and libc provided struct will always match the required struct by this syscall. I'm not sure this assumption is better. Considering defining it in the code has worked for these guys, I'd do the same. 


"
1387512682,12658,meiravgri,2023-11-09T05:44:27Z,"to avoid copying the message if there is no format?
my intention was not to change all the existing calls to `serverLogFromHandler`"
1387517859,12658,meiravgri,2023-11-09T05:52:11Z,right. I increased the timeout to 10 s.
1387520331,12658,meiravgri,2023-11-09T05:56:16Z,please suggest an alternative macro
1387582094,12658,oranagra,2023-11-09T07:23:02Z,"they won't, but it could be confusing if some prints in this flow (or function) use one way, and others use the other way."
1387586110,12658,oranagra,2023-11-09T07:28:15Z,"and completely remove the one that takes `fmt, ...` and uses `_safe_vsnprintf`?
that may be ok, but i think we may want to use it some day, so having the two APIs in both modes, and naming them consistently seems better."
1387586396,12658,oranagra,2023-11-09T07:28:35Z,"if we keep it, let's add printf attribute here too"
1387597891,12658,tezc,2023-11-09T07:41:22Z,"If I'm building a path string, I use PATH_MAX but otherwise, if I'm building log lines as in here, I generally just use big enough one like `char buf[1024]` (ofcourse you can define something like MAX_BUFF_LENGTH if you want) 

Also, for snprintf, I generally pass local buffer size with sizeof() (whether buf size is a macro or not). The reasoning is that if I change buffer size later, no need to change in every snprintf invocation in the function. 

```c
char buf[1024];

snprintf(buf, sizeof(buf), ""error occured: %d"", errno); 
```

These are generally quite personal. So, please ignore if you disagree :) 

"
1387601436,12658,oranagra,2023-11-09T07:45:12Z,"i don't think that's a valid solution, first, that long timeout can cause issues when one thread hangs, but secondly, it doesn't really solve the problem.

let's see what's the worse that can happen.
in the past it could have cause memory corruption, and now it'll just mess up the next trace (only in case two are executed in close proximity).
is that right?

maybe we can attempt to reproduce that and see if there aren't other issues?
i.e. reduce the timeout, slow down the threads, and trigger many traces repeatedly."
1387771646,12658,meiravgri,2023-11-09T10:02:35Z,"The original version of `serverLogFromHandler` did not take `fmt, ...`, the varidaic args were added by me.
What I'm saying is that i didn't want to replace all the existing calls with `_serverLogFromHandler` (or whatever new name we'll choose), and since `...` also works for passing only a string literal, i moved the implementation to the static `_serverLogFromHandler`, and used  `serverLogFromHandler` as a wrapper."
1387807408,12658,meiravgri,2023-11-09T10:32:50Z,"there are some scenarios if some thread is hanging:
1. main thread reached timeout, nullified the callback pointer
one of the threads is **trying to invoke `g_callback()`, that's a segfault** (we can avoid nullifying the callback)
2. main thread reached timeout, we set all the ThreadsManager globals to 0 and returned from ThreadsManager_runOnThreads, we are done printing the stacktrace and returned from `writeStacktraces`
one of the threads has managed to call the callback, but then hanged for some reason, now it is writing the stacktrace to the an **array that doesn't exist anymore** (it was on `writeStacktraces` stack). also, it will increase`g_num_threads_done` in the threads mngr, and the next call will start from 1 (this is easy to fix by setting this variable to 0 at the beginning as well) 
3. main thread reached timeout, and we now print a stacktrace while a thread writes to this exact location in the array (not very likely but can happen). **we will get some corrupted print of this thread's** stack trace, or of the thread's name, depending on where `collect_stacktrace_data` and `writeStacktraces` were at this point.

All scenarios are very unlikely. why would a thread hang and then come back to life? and I think the only way to avoid them is to lock critical code sections unless you have a better idea."
1387829806,12658,meiravgri,2023-11-09T10:52:00Z,"I know they are not the same (btw SYS_getdents didn't work at all). And that's another thing to consider. I didn't find any documentation that explicitly defines the struct for `SYS_getdents64`. what I did find was glibc docs on 
[low-level directory access](https://www.gnu.org/software/libc/manual/html_node/Low_002dlevel-Directory-Access.html). However `getdents64` function has been supported since glibc 2.2, and some tests failed trying to use it (see https://github.com/redis/redis/pull/12658/commits/6e3fb9959d516100c43b10b6dafdec06794d296c), I believe that an official documentation of glibc is more reliable."
1387847985,12658,meiravgri,2023-11-09T11:07:47Z,"having said that a warning is raised if we define the printf attribute + call it with a buffer (and not a string literal), for example:
`serverLogFromHandler(LL_WARNING, msg);`
yields
server.c: In function ‘sigShutdownHandler’:
server.c:6399:5: warning: format not a string literal and no format arguments [-Wformat-security]
 6399 |     serverLogFromHandler(LL_WARNING, msg);
 
so I'll take your suggestion and expose `serverLogRawFromHandler`. Please don't complain there are too many diffs 😄 "
1387886348,12658,oranagra,2023-11-09T11:44:05Z,"1. let's keep nullifying the callback, and change the code to print some log warning and exit if it's null.
2. setting it to 0 on startup seems good. i suppose it can still fire after we set it to 0, but the only damage is that one one thread will be printed twice, or that another one would be missing. i think that's ok.
3. i suppose such corruption will only result in a messed up stack trace, but nothing fatal.

these are all unlikely, so i don't care much about the outcome, as long as it doesn't cause any crashes or memory corruptions."
1387933173,12658,meiravgri,2023-11-09T12:28:44Z,"1. One problem is that checking and invoking is not one atomic operation
2. we have two counters to consider: one is in the threads mngr, which counts how many threads are done with invoking the callback. if a thread returns from the callback after a timeout and increases this counter, nothing will happen in the next call to the thread manager (if we fix setting this counter to 0). but in what scenario do we want to print the stacktrace that often? The second counter is in debug.c and we use it to take a memory pool from the array allocated in `writeStacktraces` before calling the threads_mngr. if we already returned from `writeStacktraces` and the thread trying to get this memory or already holds one, it will access a memory that doesn't exist anymore. But again, why would a thread invoke the callback successfully and then get stuck for a long time and then suddenly continue?  
3. yes"
1387940634,12658,meiravgri,2023-11-09T12:35:43Z,regarding 2- writing to a stack memory that doesn't exist anymore will not cause a crash it won't affect the next calls to `writeStacktraces` (unless we call it again and the thread is still working on invoking the callback)
1388538394,12658,tezc,2023-11-09T20:16:46Z,"This snipped is from [here](https://man7.org/linux/man-pages/man2/getdents.2.html), see the notes section. 
```
HISTORY    
       SVr4.

       getdents64()
              glibc 2.30.
NOTES    
       glibc does not provide a wrapper for getdents(); call getdents()
       using syscall(2)  In that case you will need to define the
       linux_dirent or linux_dirent64 structure yourself.
```

Looks like they added getdents64() in a later version but we can't use it as you showed it already fails on some environments. 

Back to original question, can we rely on existence of `struct dirent64` from libc? I just don't see any guarantees for it. In all example codes ([link](https://linux.die.net/man/2/getdents64)), it defines the struct before caling `syscall()`. Just to be on the safe side, I'd declare it like [here](https://github.com/python/cpython/blob/b75186f69edcf54615910a5cd707996144163ef7/Modules/_posixsubprocess.c#L396).  "
1388539383,12658,tezc,2023-11-09T20:17:54Z,"Just realized now, should we close() directory fd before returning here? "
1390336183,12658,meiravgri,2023-11-12T05:44:52Z,yes
1390338071,12658,meiravgri,2023-11-12T06:03:04Z,ok
1390354613,12658,oranagra,2023-11-12T07:47:51Z,"1. we can fetch the pointer to the stack (most likely the compiler will store it in the register anyway), and then test it before calling.
2. why is not an interesting question, i don't want a long timeout (specifically when this doesn't come from a fatal crash), ideally it should all be very quick (<10ms), and i certainly don't wanna hold the process for more than a second when some thread misbehaves. now considering a short timeout, even if the threads don't misbehave, there could always be timing issues, and any scenario that's theoretically possible, will happen at some point, and we should at least make sure we don't crash or corrupt heap.

if we can't handle the above cases. another way out could be to just prevent the next stack trace collection, if the previous one didn't complete. this means that if one thread blocks forever, we'll only get one partial trace, and next ones will be skipped.
if a thread is just late, then it'll be excluded from the trace, but won't block the next trace.
WDYT?"
1390376021,12658,meiravgri,2023-11-12T10:06:06Z,"1. ok
2. Currently it's 10 to be on the safe side with VALGRIND.
Regarding you suggestion - How do you differentiate between a stuck thread and a late one?"
1390376437,12658,meiravgri,2023-11-12T10:09:06Z,"and we can't corrupt the heap cause we don't use any malloc's
all of the scenarios i mentioned above can lead to weird stacktrace prints, but not to a crash"
1390392821,12658,oranagra,2023-11-12T11:52:18Z,let's expose the raw one too. like we do for the other raw
1390392933,12658,oranagra,2023-11-12T11:53:11Z,the one in the `#else` block isn't needed.
1390399782,12658,meiravgri,2023-11-12T12:34:13Z,"this is the raw one
the one that takes format is 2 functions above"
1390400000,12658,meiravgri,2023-11-12T12:35:44Z,why?
1390400778,12658,oranagra,2023-11-12T12:40:11Z,"i didn't suggest to differentiate between a stack thread and a late one, i just said these are two cases we need to handle.
stack corruption can lead to heap corruption and vice versa.. anyway, so you say that the one leading to a segfault is now handled, and the other ones will just lead to bad stack trace in the log, but no effects on the other mechanisms in redis.
if that's the case then i'm fine with it. but if we're afraid of unexpected issues, i'm also ok in preventing any stack trace collection until the previous one ended (if the hangs indefinitely, then the whole thing will get disabled till redis is restarted)."
1390442896,12658,meiravgri,2023-11-12T16:34:41Z,"Following the discussion with @oranagra and @yossigo 
### **Background:** 
`writeStacktraces` allocates a buffer on **its stack** of size **sizeof(stacktrace_data) * len_tids**, where stacktrace_data =~ **800 b** and len_tids is the current number of threads willing to receive SIGUSR2 signal.
It saves the pointer in a global variable.
Then it calls the thread_mngr that sends SIGUSR2 to all `len_tids` threads, and each one invokes `collect_stacktrace_data`. In this callback, each thread gets its unique spot in the array allocated by `writeStacktraces` and writes its stacktrace into it.
When all the threads are done, or we reach timeout we return from thread mngr, print the stacktraces we were able to collect and the stack allocation is no longer available.

### **The problem**: 
one or more of the threads are late, we reach timeout, return from the thread mangr, exit `writeStacktraces`, and then the thread wakes up and starts writing to this address and corrupts other thread's stack.

### **Suggested solutions**
1. **One solution** that was suggested was to pre-allocate a global / static stacktrace_data array and save it to a global pointer that will live as long as the server is up. The of such array with our current limits (maximal threads number = 50 and max address per thread = 100) is ~40kb. Today an empty instance of Redis is ~800kb, and 40kb is pretty big (empty redis takes some 800kb).
We can shrink it if we decide to allow a smaller backtrace depth.

2. **Changing this allocation size dynamically** before the signal handler requires syncing and making sure there are no threads currently writing to it, and we don't need any additional struggles with sync mechanisms...

3. **writing directly to the log file** from each thread's signal handler (composing a buffer with all the data, and issue a single `write` call). this is problematic since backtrace_symbols (returns a malloc'd array of translated stacktrace address as strings) is obviously not async-signal-safe.
we could use `backtrace_symbols_fd` but we're unsure if it's safe, and we'll also have issues with the other per thread info we wanna print..

4. **dynamic allocation with mmap**, replace the current stack allocation (allocate exactly what we need, when we need it) with an mmap (since malloc is disallowed from a signal). we may need to use the system call directly (the libc one isn't specified as signal safe)"
1390653801,12658,oranagra,2023-11-13T06:04:24Z,"unless i'm missing something (again), this is just a forward declaration, but we already have a forward declaration below.
one of them can be removed."
1390656177,12658,meiravgri,2023-11-13T06:09:54Z,"the one above is with the printf attribute
I've just put `serverLogFromHandler` under the same if/else with the existing one of _serverLog
"
1390661050,12658,oranagra,2023-11-13T06:20:29Z,@tezc please have a look :point_up: 
1390911417,12658,tezc,2023-11-13T10:17:49Z,"I like option-3. 

Currently, we already call `backtrace()` which is listed as not async-safe (if this function call triggers loading libbacktrace.so to memory). We are already taking this risk. We can also call `backtrace_symbols_fd()` in threads. It's listed as ""AS-Safe"" here: [link](https://www.gnu.org/software/libc/manual/html_node/Backtraces.html)

> we'll also have issues with the other per thread info we wanna print..

@meiravgri What are these issues? Maybe we can find a workaround for it? WDYT?

---

Passing fd to threads to make them print their own stacktraces makes sense to me. Though, I assume this scenario can occur:

1- Main thread opens log fd.
2- One thread is late but main thread moves on, prints stacktraces to the log file and close fd.
3- Later, same fd number is assigned to something else in the process.
4- Slow thread writes to this fd. 

We need some sort of synchronization around fd. Maybe you can think of something better but first thing that comes to my mind, we can create a pipe() on process startup and let threads write to it. Then, main thread copies pipe content to the actual log file:

```c
int pipe_fds[2];
int init_on_process_startup()
{
       // Non-blocking pipe
       anetPipe(pipe_fds, O_CLOEXEC|O_NONBLOCK, O_CLOEXEC|O_NONBLOCK);
}

void writeStacktraces(int log_fd);
{
      // A ""slow thread"" can write something after main thread timeouts in the prev round. Just read the pipe to clear it.
      clearPipe(); 
      
      runOnThreads(...); // threads will always write stacktraces to the pipe_fds[1] by calling backtrace_symbols_fd();
      waitForThreads(....);
      readFromPipeAndWriteToLogFd();
}

``` "
1391102859,12658,oranagra,2023-11-13T13:16:20Z,my bad
1391117954,12658,oranagra,2023-11-13T13:30:12Z,"> > we'll also have issues with the other per thread info we wanna print..
> 
> @meiravgri What are these issues? Maybe we can find a workaround for it? WDYT?

the issue is that the other info we print could easily get out of order when many threads do several writes each to the same log file."
1391327639,12658,tezc,2023-11-13T16:07:22Z,"Oh, right... :fearful: 

Maybe threads can fill `struct stacktrace_data` and write it to the pipe fd. Main thread will read structs from the pipe and print it to the log file. Read/write smaller than `PIPE_BUF` is atomic. So, I assume we won't see partial struct in the pipe. "
1392247172,12658,meiravgri,2023-11-14T09:16:13Z,"write() fails when trying to write to a closed fd, so no need to sync.

>        EBADF  fd is not a valid file descriptor or is not open for writing"
1392403462,12658,tezc,2023-11-14T10:57:07Z,"I mean same fd number can be assigned to some other file or socket after closing the log file. Then, write() will not fail. 

Say fd=15 was log file, we close it and move on. Later, main thread opens another file/socket for some other purpose. OS can assign 15 to this fd (because 15 is available after close()). Then, late thread wakes up and write() to fd=15 successfully. (it will write to a socket or a file mistakenly). I assume this is a possible scenario."
1392792143,12658,oranagra,2023-11-14T15:33:12Z,"> Maybe threads can fill `struct stacktrace_data` and write it to the pipe fd

ok, so we'll only call `backtrace` (not `backtrace_symbols*`) from the thread, but instead of filling a global data structure, we'll pass the data to the caller via pipe, and rely on `write` being atomic?
sounds like a good idea.
then the caller can keep using a stack allocation, not a heap one.
in order to avoid that problem with a closed fd, we can keep that pipe forever instead of re-creating it each time.
WDYT?"
1392901904,12658,meiravgri,2023-11-14T16:40:21Z,"let me make sure i understood correctly:
with server startup:
create a global pipe

```
__attribute__ ((noinline)) static void collect_stacktrace_data(void) {
    /* allocate stacktrace_data struct */
    stacktrace_data trace_data = {0};

    /* Get the stack trace first! */
    trace_data.trace_size = backtrace(trace_data.trace, BACKTRACE_MAX_SIZE);

    /* get the thread name */
    prctl(PR_GET_NAME, trace_data.thread_name);

    /* get the thread id */
    trace_data.tid = syscall(SYS_gettid);

   writeToPipe(trace_data);


}


void writeStacktraces(int log_fd) {
      // A ""slow thread"" can write something after main thread timeouts in the prev round. Just read the pipe to clear it.
      clearPipe(); 
      
      runOnThreads(...); // threads will always write stacktraces to the pipe_fds[1] by calling backtrace();
      // we don't need to wait, runOnThreads does that
      readFromPipeAndWriteToLogFd(); // calls to backtrace_symbols_fd()
}
```"
1392976067,12658,tezc,2023-11-14T17:32:36Z,"@oranagra, @meiravgri yes, exactly like that. 

Then, caller can even read one by one: 

```c
void readFromPipe() 
{
    while (1) {
       struct stacktrace stacktrace;
       
       int r = read(pipe_fds[0], &stacktrace, sizeof(stacktrace));
       if (r == sizeof(stacktrace)) {
            write(fd, ""thread name, thread id ...""); // log metadata about thread
            backtrace_symbols_fd(stacktrace.trace, ..., fd);
            ...
       }
    }
}

```

This way we avoid any memory synchronization issues (hope we don't miss anything else). Downside is we have to keep a pipe open forever.


"
1393014460,12658,meiravgri,2023-11-14T17:54:04Z,"Just out of curiosity, What are the consequences other than 2 occupied fds? Does it have any impact on the memory consumption ? "
1393061201,12658,oranagra,2023-11-14T18:30:59Z,"The overheads are negligible. We have other piles, both for the entire duration of the execution, and temporary ones for a certain purpose."
1393139901,12658,tezc,2023-11-14T19:16:11Z,"pipe has a buffer for unread data internally, typically 64 kb. OS can do some optimizations though: allocate it on the first use or free it when all data read etc."
1395190257,12658,meiravgri,2023-11-16T06:10:09Z,"@tezc 
```
anetPipe(pipe_fds, O_CLOEXEC|O_NONBLOCK, O_CLOEXEC|O_NONBLOCK);
```
regarding the flags you suggested
**`O_CLOEXEC`** - what does it do? if i understood correctly, the pipe will be closes automatically **for the child process** upon `execve()` ?
I agree we need **`O_NONBLOCK`** - don't block (fail) if we:
1. read and the pipe is empty
2. we try to write and there is no space available

I suggest we use also
**`O_DIRECT`** (since Linux 3.4): Each write to the pipe is dealt with as a separate packet, and reads from the pipe will read one packet at a time."
1395251772,12658,tezc,2023-11-16T07:22:29Z,"`O_CLOEXEC`: Yes, it will automatically close `fds` after exec.. calls. AFAIK, it is a good practice to open with this flag by default, otherwise, after an execve() call, fds will be a leak for the new process (because signal handler won't be usable after an execve() call anyway). 

`O_NONBLOCK`: Yes, we can use it just to prevent blocking threads

`O_DIRECT`: As far as I understand, `O_DIRECT` is useful if you are writing variable length messages to the pipe. As we write and read same struct from the pipe, it shouldn't change anything for us. pipe() guarantees atomicity, so we should never see partial struct bytes in the pipe. write() calls should write struct fully or fail without writing a single byte if remaining space in pipe buffer is smaller than sizeof(stacktrace).

If this is not going to change anything for us, I think we should not use it so, our code can stay compatible with older linux distributions. Do you see any other issue? Maybe I miss something. "
1398358470,12658,meiravgri,2023-11-19T08:56:03Z,"no,i thought O_DIRECT guarantees atomicity, thanks for the clarification.

The pipe was a great idea IMO. well done
I've implemented it, please review @oranagra @tezc @yossigo 

daily tests:
https://github.com/meiravgri/redis/actions/runs/6919472058"
1398364372,12658,oranagra,2023-11-19T09:34:22Z,"i think this needs an update.
if `read` failed, then we'll still have the last record in the buffer."
1398364864,12658,oranagra,2023-11-19T09:37:51Z,"can't we put this inside setupDebugSigHandlers? 
it's part of the signal handler system (although it also serves assertions).

p.s. maybe we should copy some of the checks we do for watchdog (i.e. matching `bioProcessBackgroundJobs` part of the stack trace), into the assertion test?"
1398365483,12658,oranagra,2023-11-19T09:39:11Z,already fixed :smile: 
1398373912,12658,tezc,2023-11-19T10:32:56Z,Can we reuse `anetPipe()` here same as other pipes? Seems like it has some portability fixes in it: https://github.com/redis/redis/blob/3d9c427f8c017c62e3e62883c4dfe599f060f104/src/anet.c#L634
1399350907,12658,meiravgri,2023-11-20T15:15:18Z,We don't need the pipe on other systems than linux. 
1399476542,12658,meiravgri,2023-11-20T16:42:47Z,"yes

we can and should"
1399514676,12658,meiravgri,2023-11-20T17:15:23Z,@yossigo ping
1399554019,12658,oranagra,2023-11-20T17:54:24Z,"regardless of portability, we have a convenience wrapper, let's use it."
1399618064,12658,oranagra,2023-11-20T18:57:03Z,"```suggestion
/* Low level logging from signal handler. Should be used with pre-formatted strings. 
   See serverLogFromHandler. */
```"
1399621806,12658,oranagra,2023-11-20T19:01:31Z,"```suggestion
             curr_time.tv_sec <= timeout_time.tv_sec);
```"
1399630257,12658,oranagra,2023-11-20T19:11:04Z,maybe we should add a short sleep / yield here? just so that it's not an intense busy loop?
1400049942,12658,meiravgri,2023-11-21T05:38:01Z,but why initialize the pipe for systems where it will never be used?
1400059762,12658,meiravgri,2023-11-21T05:53:55Z,"i think that in most cases it will just increase this loop duration. I experimented with different timeouts and noticed that I need a super low timeout (in ns) to get even one of the threads to be late.
"
1400340533,12658,oranagra,2023-11-21T10:15:17Z,"still, on an overloaded system, not sure if the false system call (VDSO) will induce a context switch, rather than just eat CPU. i'd rather add a `usleep(10)`, or even 1, or alike."
1400352459,12658,tezc,2023-11-21T10:23:56Z,"I meant portability between linux versions. It tries pipe2() first then fallback to pipe(). Also, in future, if we want to introduce a fix to pipe2(), then we can do it in a single place if all places call a single wrapper function. "
1401242288,12658,tezc,2023-11-21T21:44:51Z,"I hate to say it but `usleep()` is not listed among signal-safe functions. 

Maybe we can use `select()`:

```c

struct timeval tv = {
    .tv_sec = 0,
    .tv_usec = 10
};

select(0, NULL, NULL, NULL, &tv);
```"
1401958079,12658,meiravgri,2023-11-22T12:15:25Z,ok
1402503527,12658,oranagra,2023-11-22T18:15:09Z,"```suggestion
        /* Sleep a bit to yield to other threads. */
        /* usleep isn't listed as signal safe, so we use select instead. */
```"
1402503712,12658,oranagra,2023-11-22T18:15:19Z,"the header is:
```
    msg = ""\n------ STACK TRACE ------\n"";
```
so it makes sense that the footer will have a similar format.
i.e. `-` instead of `=`, upper case.
maybe
```suggestion
    msg = ""\n------ STACK TRACE DONE ------\n"";
```"
1402947666,12658,oranagra,2023-11-23T06:09:43Z,"> but why initialize the pipe for systems where it will never be used?

it doesn't do that. it's just that when it does create a pipe, it does it with our wrapper, same one we use everywhere else.."
762518839,9812,oranagra,2021-12-05T06:49:33Z,why did you delete this part?
762519297,9812,oranagra,2021-12-05T06:55:12Z,"i think you can just delete that test.
same probably applies for others that are no longer relevant.
like ones that where created to test the script cache and it's invalidation."
762519415,9812,oranagra,2021-12-05T06:56:44Z,"i suppose it's possible that two calls to random will return the same value in rare cases.
i think we can just delete that test, or keep something basic (no assert?) just for coverage."
762519528,9812,oranagra,2021-12-05T06:58:17Z,"i think we should keep that test since old AOF files can still have EVAL in them.
we need to convert that test to use a hand crafted AOF file (see how `append_to_aof` is used in `integration/aof.tcl`)"
762519700,9812,oranagra,2021-12-05T07:01:23Z,maybe it would be easier to review and better for the blame log if you keep the old indentation..
762539625,9812,yoav-steinberg,2021-12-05T10:11:44Z,"I guess we need to add a ""dead"" options table to clean up this code."
762539962,9812,yoav-steinberg,2021-12-05T10:15:20Z,"Do we need to continue to support this as a ""dead"" option? I think it's not documented and only used in tests. I suggest just removing this."
762541110,9812,yoav-steinberg,2021-12-05T10:26:32Z,For the sake of the blame log we can avoid re-numbering the consts and just add an empty marker or comment where we have the whole.
762548083,9812,yoav-steinberg,2021-12-05T11:28:55Z,Do we also need to get rid of the `to-sort` flag and all related code? If we don't check `CMD_SORT_FOR_SCRIPT` anymore then we can delete it too and there's no need to have any commands marked with it.
762548429,9812,yoav-steinberg,2021-12-05T11:32:20Z,"```suggestion
    test {EVAL - Scripts can run non-deterministic commands} {
```"
762548978,9812,yoav-steinberg,2021-12-05T11:37:00Z,"Alternatively you can change it to a `wait_for_condition` with a 0 timeout and, lets say, 10k tries where you repeat the `eval` and wait for them to be not equal."
762555836,9812,oranagra,2021-12-05T12:32:44Z,"i thought i saw it get deleted, didn't look closely enough...

we do not need to maintain backwards compatibility for DEBUG sub-commands at all.
we can simply drop it."
762608709,9812,MeirShpilraien,2021-12-05T20:07:52Z,Why removing this? You still need to check that you are getting an argument no? 
762665342,9812,zhugezy,2021-12-06T02:28:51Z,mistake fixed
764608137,9812,zhugezy,2021-12-08T07:29:36Z,mistake  fixed:
764673964,9812,yoav-steinberg,2021-12-08T09:10:19Z,"This is good, but I wonder if we really need to store the argc info for deprecated configs. It might be enough just to know the deprecated config's name in order to ignore it since we don't really care what args are passed to it."
764698465,9812,yoav-steinberg,2021-12-08T09:40:43Z,Is there any better way create a delay in the script than a 1.5 million iteration loop? If we want to check a script timeout then perhaps create an infinite loop?
764700351,9812,yoav-steinberg,2021-12-08T09:43:02Z,Shouldn't we check that the read reply indicates a times out script?
764701003,9812,yoav-steinberg,2021-12-08T09:43:51Z,"If the script is timed out then I'd expect an error not ""y"""
764711908,9812,zhugezy,2021-12-08T09:56:37Z,"infinite loop: Maybe no, for we expect the script **finishes** but its running time greater than `lua-time-limit`? This case is modified from a test here https://github.com/redis/redis/pull/9812#discussion_r762519528 mentioned"
764718733,9812,zhugezy,2021-12-08T10:05:07Z,"`$rd read` is synchronous and would read an 'OK' returned by script, if I get its meaning correctly."
764719117,9812,zhugezy,2021-12-08T10:05:36Z,"'timeout' isn't equal to script kill. After `$rd read`, the script has finished its operations successfully."
764821576,9812,oranagra,2021-12-08T12:28:38Z,"I had some chats about this topic with @yossigo and realized that i think it's better to keep these flags for the sake of #9359 / #9876.
i.e. we wanna provide clients and anyone else, all there is to know about redis commands, and one of the things to know is when a command has a non-deterministic reply (random content or random order).
This also means two additional changes:
* RM_CreateCommand should be able to set that flag (same as it sets the `no-monitor` flag and others)
* maybe we wanna give a better name for that flag in COMMAND command (i.e. instead of `sort_for_script`), and maybe even move it to another flags field?
* HGETALL should be set with that flag (today it has the `random` flag because the Lua code was limited and wasn't able to sort it's output.

@guybe7 FYI / please comment.
I suppose some of that work can be done in another PR, but we need this one to at least avoid deleting the flag."
764835290,9812,guybe7,2021-12-08T12:48:40Z,"@oranagra i didn't read the full PR, please remind me why did we need to sort in the past, and now we don't anymore?

the comment says:
```
 * to-sort:     Sort command output array if called from script, so that the
 *              output is deterministic. When this flag is used (not always
 *              possible), then the ""random"" flag is not needed.
 ```
 but why does it matter if we're in a script or not? i would expect SUNION to behave the same as a script running SUNION and replying with its reply.
 
 anyway, my observations:
 1. SCRIPT_RANDOM_DIRTY is no longer needed
 2. ""to-sort"" flag is no longer needed (we will use ""random"" instead)
 3. ""random"" should be a doc-flag rather than a command flag"
764909200,9812,oranagra,2021-12-08T14:21:45Z,"i think this test is ok (timeout means redis responds to command during the script, it didn't fail).
specifically, it's the same test we had before, but because of our change the old test needed adjustments, to still cover cases of loading old AOF files.
the test itself may not be perfect, and although we can work on it to improve it, maybe we can also leave it imperfect."
764910862,9812,oranagra,2021-12-08T14:23:42Z,"i feel we're devoting too much code to this ""mechanism"", personally i'm also ok with the previous approach (as long as we don't have too many dead configs, e.g. more than 8)  "
764917507,9812,oranagra,2021-12-08T14:31:06Z,"@guybe7 it was needed since EVAL was propagated to the replica as is, and redis needed to make sure it'll behave there exactly the same. (e.g. if you do HVALS and only use the first 2).
it also used to forbid writes after using an random command (LIKE RANDOMKEY).

so now that redis doesn't need that anymore, we can delete it, but i think that instead of deleting it, it should be a client hint (#9876)
however, a few observations:
1. i think there's still a difference between an random command (like RANDOMKEY), and one that may just return the same results at a different order (HVALS).
2. HGETALL was incorrectly flagged because of limitations of the sorting mechanism.
3. SPOP was flagged as raondom, but i suppose it's too late (it's a write command of it's own).
4. the `sort_for_script` flag was already documented, but maybe we can ""break"" things and move + rename it.

bottom line, i want this PR to just delete all the logic about sorting and such, but keep the command flags, and i want #9876 to take these flags to the right place."
765066795,9812,guybe7,2021-12-08T17:17:12Z,"yes I agree... both ""random"" and ""sort_for_script"" (maybe ""random-order""..?) should be command hints, not flags

can't we drop ""random"" for HGATLL, SPOP, and possibly other discriminated commands? we remove it from flags, so we kinda break the output anyway..."
765609720,9812,zhugezy,2021-12-09T09:45:41Z,"observation:
`$ grep -rn ""CMD_RANDOM"" .`
`./src/server.h:193:#define CMD_RANDOM (1ULL<<7)           /* ""random"" flag */`
`./src/server.c:4533:            c->flags |= CMD_RANDOM;`
`./src/server.c:5781:    flagcount += addReplyCommandFlag(c,cmd->flags,CMD_RANDOM, ""random"");`
`./src/module.c:797:        else if (!strcasecmp(t,""random"")) flags |= CMD_RANDOM;`

I think we can re-define them: ""to-sort""(renaming it as ""random-order"" or ""random-output"") commands would produce random outputs, while ""random""(needs renaming too, maybe ""random-update""?) commands would lead to random operations to DB. In that ways these two flags are untied and can both exist on a single command.

> bottom line, i want this PR to just delete all the logic about sorting and such, but keep the command flags, and i want #9876 to take these flags to the right place.

I did an redo commit https://github.com/redis/redis/pull/9812/commits/818a8151b106a7d6e2f085a10bb774a0a6263e7f, these flags have been re-added to codebase, maybe you missed the commit out? @oranagra 

Anyway, these are little relevant to this PR and may be discussed in another issue/PR separately."
765664100,9812,oranagra,2021-12-09T10:41:00Z,"@zhugezy i didn't miss that commit.. just wanted to state i wanna keep it that way (since the previous instruction was to re-do that after Guy's PR is merged).

p.s. i think the `random` flag doesn't mean it makes random changes in the data set (e.g. RANDOMKEY), it means the reply is random (not just an ordering issue). SPOP is a special case of a command that's both `random` and `write`."
766129157,9812,sundb,2021-12-09T20:25:37Z,"```suggestion
    const char *name;
```"
766138298,9812,sundb,2021-12-09T20:40:27Z,"If `match` is 1 we skip this code, maybe we can add a `goto` to deal match."
767272115,9812,oranagra,2021-12-12T13:06:35Z,"one of the very few consistent styling guides in redis, is that it avoids using line comments.
```suggestion
        /* If there's no matching above, we try matching them with deprecated configs */
```"
767504190,9812,zhugezy,2021-12-13T08:33:39Z,"Re p.s.: @oranagra What I meant is not their definitions now, but that we can distinguish these commands with ""random-order""/""random-update""/... further, even if we are making some small changes on them I think. And that's the meaning of **re-define**."
768592154,9812,oranagra,2021-12-14T11:56:15Z,why do we need preventCommandPropagation? i think it's just enough to remove the call to forceCommandPropagation
768592579,9812,oranagra,2021-12-14T11:56:50Z,"also, we need to remove the `may-replicate` flag."
768597464,9812,oranagra,2021-12-14T12:03:44Z,"I don't think we wanna mention `debug loadaof` in the test.
the test comes to test aof loading on a replica, instead of doing it properly, it used the debug command (as a way to achieve something similar), but that's not the purpose of the test.

Actually, now that we generate the AOF on our own, we can just let the server start from it, and there's no need for DEBUG LOADAOF at all.

I also don't understand why you negated the name of the test (adding ""can't"") and why the assert is for """" and not ""102""?

maybe there's a bug to fix?

```suggestion
    test {EVAL processes writes from AOF in read-only replicas} {
```"
768599340,9812,oranagra,2021-12-14T12:06:30Z,"this assert may not get to fulfill its purpose.
let's add one additional command either inside the multi, or after it, and validate that (i.e that there's no SCRIPT LOAD before it."
768603171,9812,oranagra,2021-12-14T12:11:41Z,"ohh, i now see your other post, i suppose this is a bug we need to fix.
but either way, this test should now use plain AOF loading (start a server to be configured as a read-only replica, and set it to load an AOF file on startup)"
769202085,9812,zhugezy,2021-12-15T02:49:04Z,"> also, we need to remove the `may-replicate` flag.

Should we remove the propagation of `script flush` and its `may-replicate` flag too? I think we should."
769325745,9812,oranagra,2021-12-15T07:29:52Z,"yes, i agree.
this means the existence of the script (effects of EVAL, SCRIPT LOAD, SCRIPT FLUSH), are always local, and never propagate to replicas / AOF."
769449342,9812,oranagra,2021-12-15T09:49:20Z,"```suggestion
    test {EVAL can process writes from AOF in read-only replicas} {
```"
769450953,9812,oranagra,2021-12-15T09:50:20Z,"I don't how (of if), this test passed, but the whole point of it was to make sure we can load old AOF files that contains EVAL with write commands, even in read-only replicas.
so if it fails with my suggestions, we must debug it and see what's wrong.
if you can't figure it out, let me know, i'll clone this PR an help.
```suggestion
            assert_equal [r get foo] 102
```"
769452826,9812,oranagra,2021-12-15T09:51:51Z,"not sure if we really need the MULTI in this test.. enough to just show that FLUSH isn't propagated.
or did i forget part of our discussion?"
769460311,9812,oranagra,2021-12-15T09:57:36Z,"i would like to add a check to confirm that it propagates the right commands.
i.e. using `attach_to_replication_stream` and `assert_replication_stream`.
i think that's the purpose of this test.
and let's also add EXPIRE to that list of command (propagates as EXPIREAT)"
769471358,9812,oranagra,2021-12-15T10:09:46Z,"```suggestion
        start_server [list overrides [list dir $server_path appendonly yes replica-read-only yes replicaof ""127.0.0.1 0""]] {
```"
769501088,9812,zhugezy,2021-12-15T10:38:36Z,"I was setting it as """" instead of 102 to check if all tests run successfully to make sure that this is the only problem I'm going to deal with(and it fails with your suggestions, while passes with current commit). Currently I'm going to debug it to see what's going on on it."
769503859,9812,zhugezy,2021-12-15T10:42:04Z,"We didn't mention `script flush` command (or I forgot about it), so I added this test. Sure that we can drop the 'MULTI/EXEC' part and only test about `script flush`, but it does no harm adding the 'MULTI/EXEC', which can cover more cases, doesn't it?"
769505596,9812,zhugezy,2021-12-15T10:44:26Z,"Oops, looks like I forgot to clean the messes up"
769510627,9812,zhugezy,2021-12-15T10:50:44Z,agree
769530473,9812,zhugezy,2021-12-15T11:17:17Z,why delete `aof-use-rdb-preamble no`? Default it is `yes`.
769561986,9812,oranagra,2021-12-15T12:02:18Z,"now that it's a trivial command (no propagation), in theory there's no need to test it neither here no there (with / without MULTI).
back when SCRIPT LOAD had special (non trivial) handling for propagation, it made sense to test it both ways.
i don't mind keeping the MULTI (it just looks odd since i didn't understand why should we), but i also don't mind dropping this test completely, or just keep it simpler and remove the MULTI."
769562979,9812,oranagra,2021-12-15T12:03:52Z,"the config was only needed because we used BGREWRITEAOF to generate an AOF (after running EVAL commands).
but now that we generate the config manually, this config is meaningless (doesn't affect the test)."
769585814,9812,oranagra,2021-12-15T12:36:37Z,"closing this thread, moved the conclusions to #9876"
769705387,9812,oranagra,2021-12-15T14:57:20Z,":scream: i wonder how why the tests didn't catch it when we broke it.
do you happen to know?"
770256553,9812,zhugezy,2021-12-16T06:30:25Z,"No, maybe it just wasn't covered by the test `EVAL processes writes from AOF in read-only slaves` (It should be). I think maybe this test case was missed for changing when effects replication was introduced?"
770262397,9812,zhugezy,2021-12-16T06:44:59Z,"Actually if we decide not to change the behaviour of `script flush` any more, we could just drop this case. Otherwise we'd better keep this case? Maybe it looks weird but it's for robustness I think?"
770278991,9812,oranagra,2021-12-16T07:23:01Z,fine. let's keep it.
770289532,9812,zhugezy,2021-12-16T07:43:10Z,One question: Is there any special case when mget would get rewritten now? If no I'll drop it. Didn't find it anyway.
770395315,9812,oranagra,2021-12-16T10:09:35Z,"looks like it was covered by that test, and and indeed it disabled preamble-rdb, and, used DEBUG LOADAOF that empties the old db, **but it looks like the test forgot to disable `lua-replicate-commands`**, so since that feature was made the default, this test was ineffective.

luckily, now that we decided to completely drop support for disabling lua-replicate-commands, we realized that this test can no longer work by letting the EVAL commands generate the AOF, and we moved to generate it on our own, and found that bug.

and we're also lucky that the bug that checked the wrong variable is not yet released."
770434506,9812,oranagra,2021-12-16T10:59:53Z,"please add another SET or INCR command at the end, so we can be sure that it's not just timing that caused that MGET not to be replicated"
770436244,9812,oranagra,2021-12-16T11:02:13Z,"let's add another command here as well (after the last SPOP),
this empty MULTI-EXEC is gonna be gone soon (see #9890), so in order to be sure the SPOP is not propagated, we need some INCR here."
770437794,9812,oranagra,2021-12-16T11:04:18Z,"MGET was never re-written, i think this test is just to make sure read commands are not propagated.
for all i care you can unify these 3 tests back to one.
or if you keep them separated, you can rename this test."
770445724,9812,zhugezy,2021-12-16T11:15:20Z,"I think it's clearer separating them into different tests, or there would be too many operations in one test, which is complex and may no so easy to read."
770446151,9812,zhugezy,2021-12-16T11:15:55Z,done
1413009883,12826,github-advanced-security[bot],2023-12-03T06:14:49Z,"## Wrong type of arguments to formatting function

This argument should be of type 'int' but is of type 'unsigned long'.

[Show more details](https://github.com/redis/redis/security/code-scanning/35)"
1413009884,12826,github-advanced-security[bot],2023-12-03T06:14:49Z,"## Wrong type of arguments to formatting function

This argument should be of type 'int' but is of type 'signed long'.

[Show more details](https://github.com/redis/redis/security/code-scanning/36)"
1496859167,12826,enjoy-binbin,2024-02-21T03:45:11Z,"i see in the code, we allow n to be negitive (memkeys-samples <n> is the same)?"
1496859511,12826,enjoy-binbin,2024-02-21T03:45:55Z,I'm wondering if we need this check. I see that other hdr_record_value calls actually don't check the return value.
1496860254,12826,enjoy-binbin,2024-02-21T03:47:26Z,"sdscatrepr will append a `""""`, so i removed the ''

```
before:
Biggest stream found '""mystream""' has 1781 bytes

after:
Biggest stream found ""mystream"" has 1781 bytes
```"
1496931970,12826,yveslb,2024-02-21T05:30:01Z,"Good point. Even if `--memkeys_samples` could be -1 (not to use `SAMPLES`), the value entered by the user should not be negative.

I changed `unsigned memkeys_samples;` to be an `int` to solve https://github.com/redis/redis/pull/9735.

We could add something like for `--cursor` or `--top`:
```
if (isPositiveInteger(argv[i+1])) {
    config.keystats = 1;
    config.memkeys_samples = atoi(argv[++i]);
} else {
    fprintf(stderr, ""--keystats-samples cannot be followed by a negative number.\n"");
    exit(1);
}
```

And do the same for `--memkeys-samples`."
1500242248,12826,yveslb,2024-02-23T06:08:24Z,"The fact `--memkeys-samples` is using `atoi()` made me use an `int`.
If we want to be accurate, we should use a `long long`, like it is done in `memoryCommand()`, and check the value to be [0, LLONG_MAX]."
1519158977,12826,yveslb,2024-03-11T05:00:22Z,"`memkeys_samples` was changed to `long long` and the argument value in `--memkeys-samples` and `--keystats-samples` is being checked.
We now check for `strtoull()` parsing issues (`--cursor` and `--top`) and did the same for `strtoll()` (`--keystats-samples` and `--memkeys-samples`). I did not check for `ERANGE` as I thought it was overkill."
1519362128,12826,zuiderkwast,2024-03-11T09:11:30Z,"```suggestion
                /* We only show the original progress output when writing to a file */
```"
1553304606,12826,sundb,2024-04-05T09:57:48Z,"fefresh too fast looks a little flashy, refresh every 100 looks good."
1553437304,12826,sundb,2024-04-05T11:10:34Z,"```suggestion
    if ((top_sizes = listCreate()) == NULL) {
        fprintf(stderr, ""top_sizes list creation failed.\n"");
        exit(1);
```"
1553439208,12826,sundb,2024-04-05T11:11:44Z,"```suggestion
    if (hdr_init(1, INT64_C(1ULL*1024*1024*1024*1024), 4, &keysize_histogram)) {
        fprintf(stderr, ""Keystats hdr init error\n"");
        exit(1);
```"
1553444738,12826,sundb,2024-04-05T11:15:46Z,"```suggestion
    while ((node = listNext(iter)) != NULL) {
        key_info *key = (key_info*) listNodeValue(node);
        sdsfree(key->key_name);
    }
```"
1553476824,12826,sundb,2024-04-05T11:39:02Z,"`1ULL` and UINT64_C are the same.
```suggestion
    if (hdr_init(1, 1ULL*1024*1024*1024*1024, 4, &keysize_histogram)) {
```"
1553627784,12826,sundb,2024-04-05T13:22:49Z,"```suggestion
        type->biggest_key = sdsnewlen(element->str, element->len);
```"
1553657136,12826,sundb,2024-04-05T13:38:34Z,"check reaching the end in advance?
```suggestion
    for (int j=0; dist->size_dist[j].size && size > dist->size_dist[j].size;  j++);
```"
1553710215,12826,sundb,2024-04-05T13:58:29Z,"what about make the progress to 100% if it is 0(the scan was completed).

```suggestion
    displayKeyStats(it ? sampled : total_keys, total_keys, total_size, memkeys_types_dict, bigkeys_types_dict, top_sizes,
```"
1554519124,12826,yveslb,2024-04-06T04:06:22Z,"True, we could check we reached the end first.
Though, we need `int j;` outside the `for` as is it used to add to the count on the next line:
`dist->size_dist[j].count++;`."
1554519704,12826,yveslb,2024-04-06T04:12:10Z,Thanks for finding the mix of spaces and tab in the indentation. I will have to double check my IDE to make sure all tabulations are converted automatically to spaces.
1554520849,12826,sundb,2024-04-06T04:22:58Z,"is it much better? this make distribution more readable and there is no need to check `dist->size_dist[j].size`.
```diff
diff --git a/src/redis-cli.c b/src/redis-cli.c
index 032250fc7..58ed6988d 100644
--- a/src/redis-cli.c
+++ b/src/redis-cli.c
@@ -10444,7 +10444,7 @@ static void keyStats(long long memkeys_samples, unsigned long long cursor, unsig
         {16*1024*1024, 0},         /*  16 MB                                                  */
         {128*1024*1024, 0},        /* 128 MB                                                  */
         {512*1024*1024, 0},        /* 512 MB (max String size)                                */
-        {0, 0},                    /* Sizes above the last entry                              */
+        {UINT64_MAX, 0},           /* Sizes above the last entry                              */
     };
     sizeDistInit(&key_length_dist, distribution);
```"
1554521061,12826,yveslb,2024-04-06T04:25:04Z,"We could finish the scan with less than 100% if we use `--cursor` (we get the cursor position when we interrupt the scan with Ctrl-C).
When we start the scan at a specific cursor, it might be better to show the user that the information is not on 100% of the keys."
1554522224,12826,sundb,2024-04-06T04:34:36Z,i'm okay with both.
1554522448,12826,yveslb,2024-04-06T04:36:29Z,"Oh, indeed, more readable. And I missed listNodeValue(). Thanks!
I think I did the same for loop mistake in displayKeyStatsTopSizes(). I will change it there too."
1554523489,12826,yveslb,2024-04-06T04:45:46Z,"You are right about the ""flickering"". I agree that 10 is a bit too low. 100 is looking good on a local database, but when I tested over the network, I remember I waited a while before seeing the first progress information. I thought about a spinning cursor, or anything that gave a visual feedback to show the user we are not frozen. Let me do more test and see if 100 is ok most of the times."
1554527341,12826,yveslb,2024-04-06T05:23:45Z,"That might work.
We need to change the comment above `sizeDistInit()` to replace {0, 0}.
In addition, we need to change `displayKeyStatsLengthDist()` to use UINT64_MAX as `for (int i=0; dist->size_dist[i].size; i++)` does not work in that case.
Let me test it."
1554728675,12826,yveslb,2024-04-06T23:28:51Z,"I created a database in the Cloud to test how long it will take to see the first refresh.
With 10, the first data is showing around 6 seconds.
With 100, it took around 90 seconds (I was expecting 60 seconds...).
Even with 10 it is a long time.
Would it be acceptable to introduce a refresh display based on time and not scan_loops? For instance every 300ms?
If so, I can give it a try."
1554793780,12826,sundb,2024-04-07T01:38:58Z,"yeah, it is reasonable."
1555120406,12826,yveslb,2024-04-08T00:27:18Z,The latest commit is using UINT64_MAX.
1555121167,12826,yveslb,2024-04-08T00:29:54Z,"The refresh is now every 300ms (`findBigKeys()`, `keyStats()`, and `findHotKeys()`)."
1555282975,12826,sundb,2024-04-08T06:27:47Z,"```suggestion
                    if (sampled % 1000000 == 0) {
```"
1555285043,12826,sundb,2024-04-08T06:30:09Z,"```suggestion
            if (mstime() > refresh_time + REFRESH_INTERVAL &&
                (isatty(STDOUT_FILENO) || getenv(""FAKETTY"")))
            {
                int line_count = 0;
```"
1555307629,12826,sundb,2024-04-08T06:53:31Z,"whether i is out of bounds? i will be greater than the length of size_dist, and theoretically the loop could infinite, size will always be less than UINT64_MAX.
It seems that we still need to put a {0,0} at the end of the `distribution`, `otherwise we won't know its size."
1556814952,12826,sundb,2024-04-09T03:29:40Z,"```suggestion
       totlen, totlen ? (double)totlen/sampled : 0);
```"
1556833458,12826,sundb,2024-04-09T03:49:19Z,"```suggestion
            for (k = HOTKEYS_SAMPLE - 1; k >= 0; k--) {
```"
1556833713,12826,sundb,2024-04-09T03:49:41Z,same as above.
1556834296,12826,yveslb,2024-04-09T03:50:24Z,"The original version was 0 terminated, I think your suggestion to terminate with UINT64_MAX works too. We just have to make sure we enter the last element with UINT64_MAX or 0, depending of what we want to test for.
`size_dist_entry distribution[] = { {32, 0}, {256, 0}, {UINT64_MAX, 0} };`
or
`size_dist_entry distribution[] = { {32, 0}, {256, 0}, {0, 0} };`
When we add a value, we stop when the value is less or equal to the current element, it works because we cannot go above UINT64_MAX.
When we read the count per value, we stop when we reach UINT64_MAX. We read the entire array.
We could write the for loop this way too:
`for (int i=0; dist->size_dist[i].size != UINT64_MAX; i++)`
Maybe we could test with `dist->max_size` to stop earlier, but I am not sure it is going to make the code simpler.
We can pick 0 terminated or UINT64_MAX terminated, I think both can work. We should just pick what makes it easier to read.
Let me know if I missed something that will make the loop to go out of bound."
1556854086,12826,yveslb,2024-04-09T04:11:44Z,"Thanks, I will correct the same mistake I did in updateTopSizes(), keyStats(), and findHotKeys()."
1556877953,12826,yveslb,2024-04-09T04:39:26Z,"That is soloestoy code, but looks like it went under my name when zuiderkwast asked me to add the progress bar to memkeys, bigkeys, and hotkeys. Though, I think your suggestion is good."
1558870223,12826,yveslb,2024-04-10T05:36:41Z,"@sundb I tested and it crashed.
The reason is that `k` is an `unsigned int`. It works if `k` is an `int`.
Let me do more test with `k` as an `int` and I will push a commit later this week."
1560467247,12826,yveslb,2024-04-11T05:54:33Z,Last commit has the new `for` loop with `k` as an `int` to make it work.
1560467753,12826,yveslb,2024-04-11T05:55:16Z,Last commit is back to 0 terminated distribution.
1560477161,12826,yveslb,2024-04-11T06:08:22Z,Done as well.
1561930943,12826,sundb,2024-04-12T02:15:16Z,"```suggestion
    char_count = vsnprintf(buf, sizeof(buf), fmt, args);
```"
1561964784,12826,sundb,2024-04-12T03:14:27Z,what about adding a macro like IS_TTY_OR_FAKETTY() to avoid repeated so many times.
1561969070,12826,yveslb,2024-04-12T03:23:52Z,"You are right, even if it will not reduce the number of lines, it will probably help the readability. Let me give it a try."
1561992398,12826,yveslb,2024-04-12T04:15:41Z,"Done. Actually, as the macro is shorter, it reduced some `if` statements from 2 lines to 1 line."
1596706675,12826,sundb,2024-05-10T12:43:23Z,"what about eliminating `cleanPrintln()` which is only used by `cleanPrintfln()`.
```suggestion
/* Erase the lines before printing, and returns the number of lines printed */
int cleanPrintfln(char *fmt, ...) {
    va_list args;
    char buf[1024]; /* limitation */
    int char_count, line_count = 0;

    /* Clear the line if in TTY */
    if (IS_TTY_OR_FAKETTY()) {
        printf(""\033[2K\r"");
    }

    va_start(args, fmt);
    char_count = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);

    if (char_count >= (int)sizeof(buf)) {
        fprintf(stderr, ""Warning: String was trimmed in cleanPrintln\n"");
    }

    char *position, *string = buf;
    while ((position = strchr(string, '\n')) != NULL) {
        int line_length = (int)(position - string);
        printf(""%.*s\n"", line_length, string);
        string = position + 1;
        line_count++;
    }

    printf(""%s\n"", string);
    return line_count + 1;
}
```"
1597318180,12826,yveslb,2024-05-11T00:49:41Z,"Looks better and easier to read!
Without the recursion we can merge both functions."
1597405926,12826,sundb,2024-05-11T09:06:57Z,"```suggestion
            /* Update overall progress.
             * Only show the original progress output when writing to a file */
            if (sampled % 1000000 == 0 && !IS_TTY_OR_FAKETTY()) {
                printf(""[%05.2f%%] Sampled %llu keys so far\n"", pct, sampled);
            }
```"
1597406719,12826,sundb,2024-05-11T09:12:56Z,"```suggestion
char *bytesToHuman(char *s, size_t size, long long n) {
```"
1597406836,12826,sundb,2024-05-11T09:14:05Z,why make effort to touch these? just to fill the floating part? doesn't feel very necessary.
1597407239,12826,sundb,2024-05-11T09:16:55Z,"on the other hand, i'm a fan of this implement that returns the original s.
although it makes cleanPrintfln save two lines, it still seems werid."
1597407610,12826,sundb,2024-05-11T09:19:03Z,"```suggestion
    for (k = HOTKEYS_SAMPLE - 1; k >= 0; k--) {
```"
1597407646,12826,sundb,2024-05-11T09:19:27Z,"```suggestion
        for (k = 0; k <= HOTKEYS_SAMPLE; k++)
```"
1597407846,12826,sundb,2024-05-11T09:20:03Z,"```suggestion
            for (k = HOTKEYS_SAMPLE - 1; k >= 0; k--) {
```"
1597434293,12826,sundb,2024-05-11T11:41:11Z,why not showing this in the TTY?
1597504590,12826,yveslb,2024-05-11T20:39:13Z,"I used the return value of `bytesToHuman()` 7 times when calling `cleanPrintfln()`. I thought it will be convenient to return a `char*`. We have the choice to use the return value or not.
Let me know if you prefer to have:
```
    bytesToHuman(buf, sizeof(buf);
    line_count += cleanPrintfln(""Keys size:    %s"", buf, total_size));
```
instead of:
```
    line_count += cleanPrintfln(""Keys size:    %s"", bytesToHuman(buf, sizeof(buf), total_size));
```
I am ok with both."
1597505357,12826,sundb,2024-05-11T20:44:59Z,in that case it's better update the comment as well.
1597505961,12826,yveslb,2024-05-11T20:50:23Z,"As I added Terabyte (T) in `bytesToHuman()`, I wanted to show in the comment every possibilities. Moreover from the original comment we might think that we only convert to integer numbers, when in fact, even with the original version, we will display 100.00M."
1597506047,12826,yveslb,2024-05-11T20:52:02Z,"Good point, I will add in the comment that the return value is the original *s pointer."
1597507578,12826,yveslb,2024-05-11T21:05:08Z,"In the TTY, It is already displayed as part of the progress bar:
```
 16.62% ||||||||||--------------------------------------------------
Keys sampled: 8315
```
We preserved the old output when redirected to a file in case someone did an automation around that."
1612990032,12826,sundb,2024-05-24T07:26:43Z,"```suggestion
 * Returns the parameter `s` containing the converted number. */
```"
1612992983,12826,sundb,2024-05-24T07:29:14Z,what about adding some comments for these parameter?
1612995394,12826,sundb,2024-05-24T07:31:07Z,"```suggestion

    if (size > dist->max_size)
        dist->max_size = size;
```"
1612995756,12826,sundb,2024-05-24T07:31:21Z,"```suggestion
    for (int j=0; dist->size_dist[j].size && size > dist->size_dist[j].size; j++);
```"
1612996960,12826,sundb,2024-05-24T07:32:15Z,"```suggestion
     * Cap at 100% or the progressbar memset will overflow. */
```"
1613108915,12826,sundb,2024-05-24T08:47:03Z,is this comment outdated? or can be removed?
1613112327,12826,sundb,2024-05-24T08:49:38Z,please check if this TODO is done.
1613117561,12826,sundb,2024-05-24T08:53:00Z,"```suggestion
static int updateTopSizes(char *key_name, size_t key_name_len, unsigned long long key_size,
                          char *type_name, list *topkeys, unsigned long top_sizes_limit)
{
    listNode *node;
```"
1613117940,12826,sundb,2024-05-24T08:53:18Z,"```suggestion
                            int move_cursor_up)
{
    int line_count = 0;
```"
1613118766,12826,sundb,2024-05-24T08:53:55Z,"```suggestion
    new_node = createKeySizeInfo(key_name, key_name_len, type_name, key_size);
    if (node) {
```"
1613119432,12826,sundb,2024-05-24T08:54:22Z,"```suggestion
    key_info *key = zmalloc(sizeof(key_info));
```"
1613120592,12826,sundb,2024-05-24T08:55:06Z,"```suggestion
        if (iter.cumulative_count != last_displayed_cumulative_count) {
            if (iter.cumulative_count == iter.h->total_count) {
```"
1613134239,12826,sundb,2024-05-24T09:03:54Z,"```suggestion
static void displayKeyStats(unsigned long long sampled, unsigned long long total_keys,
                            unsigned long long total_size, dict *memkeys_types_dict,
                            dict *bigkeys_types_dict, list *top_key_sizes,
                            unsigned long top_sizes_limit, int move_cursor_up)
{
    int line_count = 0;
```"
1613137686,12826,sundb,2024-05-24T09:06:38Z,"```suggestion
        line_count += cleanPrintfln(""%3d %8s %-10s %s"", ++i, bytesToHuman(buffer, sizeof(buffer), key->size),
                                    key->type_name, key->key_name);
```"
1613142067,12826,sundb,2024-05-24T09:09:40Z,"```suggestion
            line_count += cleanPrintfln(""%-10s %11llu %6.2f%% %8s %8s %18s %11s"",
                memkey_type->name, memkey_type->count,
                sampled ? 100 * (double)memkey_type->count/sampled : 0,
                total_size, size_avg, total_length, length_avg);
```"
1613147113,12826,sundb,2024-05-24T09:11:52Z,"```suggestion
            line_count += cleanPrintfln(""%-10s %s is %s"",
                type->name, type->biggest_key,
                bytesToHuman(buf, sizeof(buf),type->biggest));
```"
1614196693,12826,yveslb,2024-05-25T00:38:22Z,"After checking, we cannot implement this TODO because we changed the output in `findBigKeys()`. I will remove the comment."
1614197997,12826,yveslb,2024-05-25T00:40:09Z,"The comment is not outdated, there are two ways to check if we interrupted the loop. As we are giving the cursor to the user, I think we should keep the test on `it`. I will remove the comment."
1614198774,12826,yveslb,2024-05-25T00:41:11Z,We have to keep `int j` outside the loop as we are using it after.
1614219527,12826,yveslb,2024-05-25T01:17:32Z,Done in the latest commit.
637365526,8974,oranagra,2021-05-22T06:56:17Z,"You need to align the pointer upwards (find set of complete pages inside this allocation). 
This is probably what corrupted your tests
```suggestion
    char *aligned_ptr = (char *)((size_t)(real_ptr + page_size_mask) & ~page_size_mask);
```
You need to align the pointer upwards, to find a complete set of pages that fall inside the allocation (P. S. Comment needed). 
This is what probably corrupted your tests.. "
637513191,8974,ShooterIT,2021-05-23T09:00:56Z,"truly thanks @oranagra I suddenly notice I should align the pointer upwards instead of downwards, because the memory address is increased upwards"
669867850,8974,oranagra,2021-07-14T18:48:48Z,"we do have HAVE_MALLOC_SIZE on glibc malloc too.
```suggestion
#if USE_JEMALLOC
```

btw, i think it's odd this method is placed in server.c, maybe we should move it to zmalloc.c (and find a way to init the page_size global just once)"
669868676,8974,oranagra,2021-07-14T18:50:00Z,we now have `server.in_fork_child` that can be used instead of these.
669871156,8974,oranagra,2021-07-14T18:53:49Z,"we realized that although peak is important, average and current are also important.
if we're gonna stick to using static variables in that function (not a temp code), let's print them too..

and also since by default only the final print is displayed in the log, the average sample count would be nice to have too (since this function can throttle itself)"
669874574,8974,oranagra,2021-07-14T18:58:58Z,"this function is called by the parent, you can't use a static var here.
i agree that now that the final COW and the peak COW are different, we want these stat fields to show the peak, but in order to do that we need to zero some initial server metric when we fork, and then update it here.

additionally if we have that variable, maybe we should also have an info field that reflects the peak (i.e. `current_cow_peak` in addition to `current_cow_size`)?"
669877060,8974,oranagra,2021-07-14T19:02:48Z,"I think the term ""unused"" isn't good here.
maybe some adverb like ""dismiss"" or ""dispose""?
or maybe ""dontneed"" to refer to our system level hack?

also, we need some big comment explaining this here, specifically why we don't bother to do that on some object types (small strings, etc)"
669879431,8974,oranagra,2021-07-14T19:06:45Z,"the members in a set (and fields in hash, or list) can be big (in some cases).
did we decide we're not gonna handle them?

if we're afraid of the extra iteration, maybe we wanna integrate that freeing logic into the saving code, i.e. release list nodes and hash fields one by one when iterating on them for saving.

considering today we have preamble AOF, and it's by default, i'm even willing to overlook the old AOFRW code and only do that for rdb saving."
669881198,8974,oranagra,2021-07-14T19:09:26Z,"my benchmarks showed that if there's no write traffic on the parent, the extra calls for madvise don't slow down the saving. but this loop might. sometimes the server may have many thousands of clients.
we need to re-think this."
672165143,8974,ShooterIT,2021-07-19T10:06:05Z,"yes, i am afraid of the extra iteration, i am not sure it is right way to integrate that freeing logic into the saving code, that may make code coupled.

I think it is usual that AOF only stores redis command, so i did that."
672165192,8974,ShooterIT,2021-07-19T10:06:08Z,"Yes, we should avoid too much loop, i am not sure, but clients' memory will be changed if there is much write traffic."
674460403,8974,sundb,2021-07-22T02:31:06Z,"```suggestion
        server.thp_enabled = THPIsEnabled() && !server.disable_thp;
```
`Thp` may be disabled."
674460671,8974,sundb,2021-07-22T02:32:14Z,"```suggestion
    if (cow > server.stat_current_cow_peak)
        server.stat_current_cow_peak = cow;
```
I still remember that it was you who reminded me."
674466027,8974,ShooterIT,2021-07-22T02:54:15Z,I remembered i said i prefer to keep them in one line if the length is short
674466604,8974,ShooterIT,2021-07-22T02:56:39Z,"before this line, if server.disable_THP, we will try to disable THP (and we may fail to do that), so here we only check again i think"
674469032,8974,sundb,2021-07-22T03:06:31Z,"T_T, I may have misremembered."
674472649,8974,ShooterIT,2021-07-22T03:18:43Z,"Actually, in redis, this style is not clear, i just make typesetting tidy. if it is not long, i prefer one line, otherwise, i prefer to use {}, of course, sometimes, i follow old style around modified code block."
674481370,8974,sundb,2021-07-22T03:45:20Z,"I have tested, if `THPIsEnabled()` is true, even if `prctl(PR_SET_THP_DISABLE, 1, 0, 0, 0)` is successful, `THPIsEnabled()` is still true.
Maybe this line can be moved to `linuxMemoryWarnings`."
674481570,8974,sundb,2021-07-22T03:46:15Z,I've gotten used to single lines without `{`.
674512962,8974,huangzhw,2021-07-22T05:40:02Z,"Some styles should have specification. I always curious about how to use. 
* `if` one line or two lines, with or without `{ }`;
* spaces between operators or not;
* spaces between function call params or not."
674514453,8974,sundb,2021-07-22T05:44:49Z,"@huangzhw Like @ShooterIT said, I also follow old style around modified code block."
674516166,8974,huangzhw,2021-07-22T05:50:37Z,This is only way we can follow.
674532036,8974,ShooterIT,2021-07-22T06:30:58Z,"Thanks @sundb , i had second look, i find `prctl` only take effect on calling thread instead of entire OS, so the result of `THPIsEnabled` still is not changed. 
And i find 

> The setting of the ""THP disable"" flag is inherited by a child created via fork(2) and is preserved across execve(2).

Let me fix, thanks"
674619326,8974,oranagra,2021-07-22T08:59:35Z,"my preference is for less lines, especially around trivial things or error handling, don't like to hide the important things by wasting a lot of lines on nonsense.
as you said, there are many styles in redis, so IMHO this specific topic isn't strict."
674621874,8974,oranagra,2021-07-22T09:03:11Z,"why did you remove that?
IIRC at some point i said that i'm ok to ignore AOFRW, if we wanna integrate the advises into the rdb serialization code of each type (so we don't need the dismiss function and the iterations and switch-cases it has).
but since we decided to keep it (second iteration after serialization), why not have it in AOFRW too?

is that because of the dump_size guess work? i suppose we use that for AOF too"
674622126,8974,oranagra,2021-07-22T09:03:35Z,i think we wanna report average too
674626229,8974,oranagra,2021-07-22T09:09:38Z,"what about streams? since they're listpack encoded, dismissing them could be similar to quicklist.
i.e. iterate on the rax, and release whole listpacks. and do that only if the average element size of the rax is big."
674648645,8974,ShooterIT,2021-07-22T09:42:45Z,"I misunderstood, let me add. Dump_size just is approximate, even the size in AOF may be more accurate"
674648780,8974,ShooterIT,2021-07-22T09:42:57Z,"OK, let me do that"
674715460,8974,ShooterIT,2021-07-22T11:33:40Z,"I only used rax tree, but not familiar with it, at first glance, i find rax iterator is not safe, we may still use listpacks  data when iterating rax. i may have a look at `raxRecursiveFree`, any advise?"
674786054,8974,oranagra,2021-07-22T13:17:17Z,you just need to use raxIterator.. have a look at `defragRadixTree`
674787913,8974,oranagra,2021-07-22T13:19:32Z,"actually that function has some complications that can mislead you.
basically something like that:
```c
    raxIterator ri;
    raxStart(&ri,rax);
    raxSeek(&ri,""^"",NULL,0);
    while (raxNext(&ri)) {
            madvise(ri.data);
    }
    raxStop(&ri);
```

and the judgement about iterating or not should use `raxSize` "
674833969,8974,ShooterIT,2021-07-22T14:12:29Z,"i am afraid we can't, we may access `ri.data` when calling `raxNext`"
674881138,8974,oranagra,2021-07-22T14:54:19Z,"are you saying that from code review, or did you test it and it crashed?

are you sure you're not confusing it with `it->node->data`?
each node has an encoded payload with pointers to the children and the fragments of the keys, as well as the pointer to the actual data of the leaf, but that's different than `it->data`, which is the pointer to the listpack.

there's absolutely no reason for the rax iterator to access the listpack itself."
675277136,8974,ShooterIT,2021-07-23T02:49:27Z,"Sorry, i misunderstood, `it->data` is the pointer to the listpack instead of `it->node->data`, please forgive me 😜"
675397175,8974,oranagra,2021-07-23T08:38:09Z,"we actually know the size of the bulk (example code below).
but maybe we don't wanna bother since it's usually big.

howeer, we can skip the loop if `c->reply_bytes` is small (in some cases there may be many nodes but all of them are small).

also, let's dismiss `c->querybuf`
and `c->argv[]` if `argv_len_sum` is big.

```suggestion
        if (bulk) dismissMemory(bulk, ((clientReplyBlock*)bulk)->size);
```

"
675397521,8974,oranagra,2021-07-23T08:38:44Z,we also know the size of the backlog.. but it is almost certainly huge..
675397690,8974,oranagra,2021-07-23T08:39:01Z,"```suggestion
void dismissMemory(void* ptr, size_t size_hint);
```"
675403790,8974,oranagra,2021-07-23T08:49:22Z,"maybe that's better?
```suggestion
/* Try to release pages back to the OS directly (bypassing the allocatior),
 * in an effort to decrease CoW during fork. For small allocations, we can't
 * release any full page, so in an effort to avoid getting the size of the
 * allocation from the allocator (malloc_size) when we already know it's small,
 * we check the size_hint. if the size is not already known, passing a size_hint
 * of 0 will lead the checking the real size of the allocation.
 * Also please note that the size may be not accurate, so in order to make this
 * solution effective, the judgement for releasing memory pages should not be
 * too strict. */
void dismissMemory(void* ptr, size_t size_hint) {
```"
675410135,8974,ShooterIT,2021-07-23T08:59:52Z,"cool, thanks"
675416617,8974,ShooterIT,2021-07-23T09:10:13Z,"yes, it is almost certainly huge, so i didn't, but to make unified, let me add"
675513667,8974,ShooterIT,2021-07-23T12:04:56Z,"You mean there may be some small nodes after `trimReplyUnusedTailSpace`, so it is necessary to specify size in  `dismissMemory`.
"
675516474,8974,ShooterIT,2021-07-23T12:10:08Z,"Hi @oranagra For the log, i think maybe users collect CoW info by this log, I break old format, WDYT? And currently I am not satisfied with current description, do you have advise?"
675791512,8974,oranagra,2021-07-23T18:53:23Z,"There may be small nodes due to deferred replies, or even null nodes. I don't mind passing 0, or the size (as shown in my diff), the nodes are usually big, so we only rarely have an excessive call to malloc_size.

But more important is the bottom of my comment above, about the possibility to skip the loop, and feeling other client buffers. "
676107378,8974,oranagra,2021-07-25T08:26:18Z,you must dismiss the argv itself after freeing the items in the array 8-)
676107849,8974,oranagra,2021-07-25T08:28:17Z,"```suggestion
    /* Release the reply array only if the average buffer size is bigger than a page. */
    if (c->reply_bytes / listLength(c->reply) >= server.page_size) {
```"
676108416,8974,oranagra,2021-07-25T08:32:54Z,"i don't think we need to retain backward compatibility with log messages.
maybe ins some special cases like redis fails to start up due to bind address being used and such, in case someone (like our tests) attempts to resolve that and retry.

But breaking this log message won't result in any actual problem, just missing metrics, and the right way to extract these metrics is from INFO (always has been)"
676108930,8974,oranagra,2021-07-25T08:36:24Z,"```suggestion
                      ""Fork CoW for %s: current %zu MB, peak %zu MB, average %llu MB"",
                      pname, cow<<20, peak_cow<<20, (sum_cow/update_count)<<20);
```"
676149590,8974,ShooterIT,2021-07-25T13:49:40Z,"oh, ashamed. Thanks"
676297196,8974,oranagra,2021-07-26T05:19:03Z,:scream:
676297495,8974,oranagra,2021-07-26T05:20:08Z,"I think the common style in redis is with spaces.
not very consistent though.."
676302098,8974,oranagra,2021-07-26T05:33:01Z,"we need `external:skip` due to AOFRW and DEBUG DIGEST.
I'd also suggest to move this to a file of it's own in the `integration` folder.
i regret not creating a specific file for defrag back then when i introduced it.

```suggestion
start_server {tags {""dismiss external:skip""}} {
```

also, please use gcov to improve this test till you see all the optimization `if`s we added are tested (e.g. add client output buffers, argv, etc)
big output buffers can be achieved by using a differing client that asks for something big, and doesn't read the response.
big argv array can be achieved by writing RESP directly to the socket and not providing the last argument.
e.g.
```tcl
    $rd write ""*2\r\n$8192\r\n""
    $rd write $bigstr
```"
676310777,8974,oranagra,2021-07-26T05:56:18Z,"FYI (not sure if you know), you can do `make gconv` and then follow similar steps to the `lcov` target."
676640104,8974,ShooterIT,2021-07-26T14:10:15Z,😀
677170513,8974,ShooterIT,2021-07-27T06:56:54Z,"I know, make sure to cover all new coed"
677170614,8974,ShooterIT,2021-07-27T06:57:06Z,"actually, i am a bit tangled, in this case, `&&` is the top operator, i prefer to not use spaces in sub judgement"
680675622,8974,yossigo,2021-08-02T06:03:27Z,"```suggestion
 * physical memory. In the child process, after serializing the key and value,
```"
680675896,8974,yossigo,2021-08-02T06:04:13Z,"```suggestion
 * Because of the cost of iterating all node/field/member/entry of complex data
```"
680676170,8974,yossigo,2021-08-02T06:04:55Z,"```suggestion
 * not going to release any memory. */
```"
680676794,8974,yossigo,2021-08-02T06:06:47Z,"```suggestion
             * OS and possibly avoid or decrease COW. We give the dismiss
```"
680678739,8974,yossigo,2021-08-02T06:11:46Z,"```suggestion
/* Try to release pages back to the OS directly (bypassing the allocator),
```"
680679690,8974,yossigo,2021-08-02T06:13:58Z,Maybe also skip this entirely if `thp_enabled` is true?
680680488,8974,yossigo,2021-08-02T06:15:59Z,"Is there a particular reason for moving these private headers first? Over time it tends to be trouble, so if it must be done I think we should have a single designated `config.h` for that."
680681531,8974,yossigo,2021-08-02T06:18:11Z,"```suggestion
/* Use 'MADV_DONTNEED' to release memory to operating system quickly.
```"
680709980,8974,oranagra,2021-08-02T07:16:30Z,"yeah, good idea, let's skip it in both entry points to this mechanism (`dismissMemoryInChild` and `dismissObject`).
if we do that, maybe we can choose to remove the check from `dismissMemory` "
680711991,8974,oranagra,2021-08-02T07:20:27Z,"we copied that block from `server.h` since we needed this part of `fmacros.h`
```c
#if defined(__linux__)
#define _GNU_SOURCE
#define _DEFAULT_SOURCE
#endif
```
without it `madvise` didn't wanna play ball...

in server.h this pile of compatibility headers are included first, so we thought we can copy that entire block here too.

@yossigo what do you suggest? moving `fmacros.h` and `solarisfixes.h` to be part of `config.h`?"
680932504,8974,ShooterIT,2021-08-02T12:34:34Z,"ok, let me do that"
681329679,8974,madolson,2021-08-02T23:28:39Z,structure*
681387360,8974,ShooterIT,2021-08-03T02:27:14Z,"Fixed, thanks"
750240580,9780,sundb,2021-11-16T12:50:40Z,"```suggestion
struct luaCtx {
```"
750240803,9780,sundb,2021-11-16T12:50:52Z,"```suggestion
    char *lua_cur_script; /* SHA1 of the script currently running, or NULL */
```"
754822885,9780,madolson,2021-11-23T06:05:29Z,You have a tab here.
754823193,9780,madolson,2021-11-23T06:06:32Z,"We have a known issue where a script can execute a delete first, and then continue to use memory and grow. It seems like we should fix that initially here."
754824714,9780,madolson,2021-11-23T06:11:24Z,"It looks like we do this today, but just because a command is a write, doesn't mean it dirties the dataset. I suppose this means we might send a multi-exec filled with commands that don't execute. Not a correctness problem I presume, just weird."
754825055,9780,madolson,2021-11-23T06:12:34Z,"Can we call r_ctx, ""run_ctx"", while reading this I keep thinking it must be a ""redis context"". "
754825312,9780,madolson,2021-11-23T06:13:22Z,You need to make up your mind about where the pointer *s go :)
754826475,9780,madolson,2021-11-23T06:17:11Z,"```suggestion
    if (!isScriptTimedOut()) {
```"
754827001,9780,madolson,2021-11-23T06:18:53Z,Should this be moved into script.(c|h)? Perhaps a better time for a little more modularity. We can pull the stuff out of server.h as well.
754829222,9780,madolson,2021-11-23T06:25:40Z,I generally dislike ambiguous acronyms (like DESC) can we just put DESCRIPTION ?
754832556,9780,madolson,2021-11-23T06:35:17Z,"We could also tell the user what script is being run because these have names, that seems useful?"
754833230,9780,madolson,2021-11-23T06:37:19Z,"Based on terminology, it's non-obvious why SCRIPT KILL wouldn't also apply to functions. You said a script is either an eval or function."
754834095,9780,madolson,2021-11-23T06:39:50Z,KILL?
754834540,9780,madolson,2021-11-23T06:40:59Z,Why aren't we also printing back the raw function code? Do we think it's too much memory to store?
754835702,9780,madolson,2021-11-23T06:44:09Z,"Why is cluster needed here? I didn't see anything cluster specific in this file, and conceptually it doesn't make sense to me."
754842418,9780,madolson,2021-11-23T07:02:39Z,More tabs.
755822090,9780,MeirShpilraien,2021-11-24T08:55:50Z,Yes we actually have an idea to handle this issue and will share on following PR's/issues. For this PR I wanted to keep the behaviour untouched.
755832097,9780,MeirShpilraien,2021-11-24T09:07:55Z,"At first I did everything like this one (pointer close to the type). But then I saw that the conversion in Redis is that the pointer is next to the variable name and I changed. Must a missed some. Will fix and re-scan the code, thanks."
755833645,9780,MeirShpilraien,2021-11-24T09:09:46Z,"Good point, will move it."
755835247,9780,MeirShpilraien,2021-11-24T09:11:43Z,"Actually, re-looking at this, it is looking at the server struct so maybe we should keep it here?"
755844376,9780,MeirShpilraien,2021-11-24T09:22:26Z,"Also had this discussion with @oranagra , the reason is that it might confuse the user because `SCRIPT LOAD` for example is not apply to function."
755848177,9780,MeirShpilraien,2021-11-24T09:27:01Z,"We actually do store the raw function code to be able to save it to RDB. I thought that returning it on info might be to much and also not sure we want to commit to always be able to return the raw function code (it also might be meaningless on other engines in the future, like web-assembly for example). WDYT?
"
755851812,9780,MeirShpilraien,2021-11-24T09:31:03Z,"Mistake, thanks."
755852204,9780,MeirShpilraien,2021-11-24T09:31:27Z,replace all tabs with spaces
755861987,9780,MeirShpilraien,2021-11-24T09:42:44Z,"Currently the run_ctx is shared between eval and functions and it is not aware about the functions which is currently running (his purpose is to interact with Redis from within a script). I can add optional metadata that can be added there and we can put the running function in this metadata. Then we will be able to reply with the function name, WDYT?"
756183874,9780,oranagra,2021-11-24T15:26:17Z,"yes, i also gave that comment, and after some discussions retracted it.
the old terminology was mixing [lua, eval, script], in some cases it suites us, in orders we had to rename or break.

in this one, we can choose to support SCRIPT KILL, and then drop the FUNCTION KILL command.
and then we can also use just one error message rather than two, or accept the current code which regards the SCRIPT command as an EVAL manager.

maybe another new idea to solve this is merge the entire FUNCTION command into the SCRIPT command.
so instead of FUNCTION CREATE, we'll have SCRIPT FCREATE (similar to the FCALL).
then when the entire SCRIPT command is about both functions and eval, the terminology problem is solved.
i.e. obviously some of the sub-commands will be only applicable to some cases, but it might not be that bad.

p.s. i'm not sure i like the idea i just suggested. maybe the current code is better."
756187946,9780,oranagra,2021-11-24T15:30:26Z,"maybe we want to add another sub-command for that, better leave it outside of INFO, to make it short.
i.e we can add FUNCTION GET and FUNCTION ALL and alike.

i don't think it'll be a problem for WASM, we'll just spit back the code we got from the user.
either way we'll need to persist them, so even if we only store it in the engine, we have to have a way to get it back."
756190856,9780,oranagra,2021-11-24T15:33:04Z,"we only recently added something like that for EVAL, we print the name to the log.
either way, i don't think it should be part of the error message.
maybe a different introspection command that is allowed to run during a busy script?"
756239232,9780,MeirShpilraien,2021-11-24T16:21:28Z,"@oranagra I think it will be irrelevant with WASM because the ""code"" we will get is a binary blob, nothing readable or meaningful. "
756688398,9780,oranagra,2021-11-25T08:58:01Z,"first, everything can be desassembled 8-)
but also, people can get it in order to load it into another redis (or another system).
i think it is ok if we spit out what we got as input."
756707016,9780,MeirShpilraien,2021-11-25T09:21:49Z,"Its actually on the following PR list:
> Get the source code of a function

So I will come with a proposal and implementation."
757688276,9780,madolson,2021-11-26T20:39:19Z,Maybe it shouldn't be in server struct at all then?
757688511,9780,madolson,2021-11-26T20:40:24Z,"I'm fine either way, I just think the user should have a way to know what ""Function"" is running."
757688638,9780,madolson,2021-11-26T20:40:54Z,"Sounds good, we should just make sure it's fixed before 7, since it seems like we'll need some type of breaking change."
757689633,9780,madolson,2021-11-26T20:45:45Z,I think having a separate subcommand with more info sounds like the right approach. 
757862791,9780,MeirShpilraien,2021-11-28T08:44:19Z,"I agree, added another PR and moved the entire timeout handling into `script.c`"
757862962,9780,MeirShpilraien,2021-11-28T08:45:52Z,"I am not sure what you mean here, do you refer to this issue: https://github.com/redis/redis/issues/8478?"
757863797,9780,MeirShpilraien,2021-11-28T08:53:36Z,"We discussed it on the issue (https://github.com/redis/redis/issues/8693#issuecomment-860160430), @oranagra mentioned that its not enough to know the function that is running because it might be change by the time we will send the `FUNCTION KILL`. Even if we will allow to kill only if the function name is equal to a given parameter, it still might have finished and restarted by the time we will send the command.
Regardless, we can add `FUNCTION RUNNING` that will return the current running function (as mentioned on the PR message), I am just not sure it will help the user kill the ""right"" function. Let me know what you think."
757863965,9780,MeirShpilraien,2021-11-28T08:54:53Z,Should we do it on this PR or open an issue with API definition and then handle it on following PR?
758128751,9780,oranagra,2021-11-29T08:30:02Z,"IMHO if you have time to kill, and it doesn't add another major approval barrier to this PR, you can go ahead and add it."
758132540,9780,oranagra,2021-11-29T08:35:53Z,"I agree, it should be some sort of introspection command, (not part of the error)
maybe instead of FUNCTION RUNNING, we can add some FUNCTION STATUS or STATS that will print some general info on all engines (unlike FUNCTION INFO which is on one function, right?).
i.e. something similar to MEMORY STATS and INFO.
there was can put all soft of general details, including the currently running function, it's args, and execution duration."
758165502,9780,sundb,2021-11-29T09:19:03Z,Should free `fi` after `engine->create` successfully?
758167559,9780,sundb,2021-11-29T09:21:45Z,"```suggestion
int functionsCreateWithFunctionCtx(sds function_name, sds engine_name, sds desc, sds code,
```"
758167590,9780,MeirShpilraien,2021-11-29T09:21:47Z,"No, we should only free it if it already exists and we replacing it."
758173354,9780,sundb,2021-11-29T09:28:37Z,"I mean that when we create a function that fails, we shouldn't delete the old one.

```sh
$ function create lua test replace 'return ""hello""'
$ function info
1) 1) ""name""
   2) ""test""
   3) ""engine""
   4) ""LUA""
   5) ""description""
   6) (nil)
$ function create lua test replace 'error'
(error) ERR Error compiling function: user_function:1: '=' expected near '<eof>'
$ function info
(empty array)
```

Expectation

```sh
$ function create lua test replace 'return ""hello""'
$ function info
1) 1) ""name""
   2) ""test""
   3) ""engine""
   4) ""LUA""
   5) ""description""
   6) (nil)
$ function create lua test replace 'error'
(error) ERR Error compiling function: user_function:1: '=' expected near '<eof>'
$ function info
1) 1) ""name""
   2) ""test""
   3) ""engine""
   4) ""LUA""
   5) ""description""
   6) (nil)
```"
758174134,9780,MeirShpilraien,2021-11-29T09:29:36Z,"Ohh, nice catch, thank you."
758198887,9780,MeirShpilraien,2021-11-29T09:58:36Z,Added a commit that fixes it.
758199002,9780,MeirShpilraien,2021-11-29T09:58:46Z,Fixed
758201787,9780,sundb,2021-11-29T10:02:06Z,Incorrect tab indent.
758202415,9780,sundb,2021-11-29T10:02:49Z,Another tab indent.
758204823,9780,MeirShpilraien,2021-11-29T10:05:10Z,"Yeah, just saw it, thanks."
758205059,9780,MeirShpilraien,2021-11-29T10:05:21Z,:+1: 
758266698,9780,sundb,2021-11-29T11:19:44Z,"```suggestion
    {""delete"",functionsDeleteCommand,3,
```"
758273766,9780,sundb,2021-11-29T11:29:41Z,"Although `functionsCreateWithFunctionCtx` has already deleted the key, I think it's safer to add an assertion.
```suggestion
    assert(dictAdd(functions->functions, fi->name, fi) == DICT_OK);
```"
758274567,9780,sundb,2021-11-29T11:30:49Z,"```suggestion
    functionsCtx *ret = zmalloc(sizeof(functionsCtx));
```"
758276040,9780,MeirShpilraien,2021-11-29T11:32:57Z,"I do not like putting code that should run inside an assert (in case we want to run without asserts someday), will save the return value and assert it."
758287522,9780,sundb,2021-11-29T11:49:17Z,"Yes, it saves a line of code when writing in assert if we don't need the return value."
758289322,9780,MeirShpilraien,2021-11-29T11:51:56Z,"I mean that I want to save the return value in a variable and then assert, this way if someone compiles without asserts it will still work:
```
int res = dictAdd(functions->functions, fi->name, fi);
assert(res == DICT_OK);
```"
758292684,9780,sundb,2021-11-29T11:56:29Z,"It seems that it could go here, which would eliminate the need to call it when deleted.
```suggestion
        engineFunctionDispose,              /* val destructor */
```"
758465090,9780,MeirShpilraien,2021-11-29T15:21:17Z,"Added FUNCTION STATS command, update the top comment with the relevant info."
758465909,9780,MeirShpilraien,2021-11-29T15:22:09Z,Added the option to specify function name on FUNCTION INFO command that also return the raw code. Updated the top comment accordingly.
758466656,9780,MeirShpilraien,2021-11-29T15:22:55Z,@sundb please let me know if you agree with the fix and if I can resolve this.
758875807,9780,sundb,2021-11-30T02:09:34Z,"Would it be better to keep the original style?
```suggestion
#define __FUNCTIONS_H_
```"
758877790,9780,sundb,2021-11-30T02:15:20Z,"```suggestion
            if (rdbSaveRawString(rdb, (unsigned char *) fi->desc, sdslen(fi->desc)) == -1) goto werr;
```"
758879355,9780,sundb,2021-11-30T02:19:45Z,"```suggestion
    serverAssert(run_ctx == curr_run_ctx);
```"
758879463,9780,sundb,2021-11-30T02:19:58Z,"```suggestion
    serverAssert(run_ctx == curr_run_ctx);
```"
758902986,9780,sundb,2021-11-30T03:26:21Z,One extra blank line.
759213147,9780,oranagra,2021-11-30T12:05:47Z,@yossigo maybe you can settle this?
759241151,9780,oranagra,2021-11-30T12:43:48Z,"does that mean that `FUNCTION INFO`, and `FUNCTION INFO <name>` return completely different result?
if it does, i don't like that."
759269348,9780,MeirShpilraien,2021-11-30T13:19:12Z,So you suggest a new sub-command? FUNCTION CODE?
759295897,9780,oranagra,2021-11-30T13:49:36Z,"i think we should have
* `FUNCTION STATS` - general info on the engine and some counters (no per function details)
* `FUNCTION LIST` - listing all function and some metadata on each (excluding the function code)
* `FUNCTION INFO <name> [WITHCODE]` - detailed info on the function, optionally including it's code. "
759335761,9780,yossigo,2021-11-30T14:32:07Z,"@oranagra I also don't like the last idea.

Generally I don't think scripts and functions should be confused, but `-BUSY` does imply a more general state, so it's a bit weird to require the user to determine what keeps Redis busy and then decide if `SCRIPT KILL` or `FUNCTION KILL` should be executed.

Maybe support both and let users use them interchangeably?"
759352894,9780,oranagra,2021-11-30T14:49:08Z,"@yossigo so what you mean is that you don't like to introduce the function management commands as sub-commands of SCRIPT? and you're ok with letting SCRIPT remain dedicated for the EVAL scripts (despite the fancy terminology we creates which states that a ""script"" can refer to both functions and eval)?

and you're suggesting to just tackle the KILL problem as a special case, in which we don't wanna force the user to be able to recognize them apart (it's the same error code), and instead we'll just have two KILL sub-commands, interchangeable (either one can kill both functions and eval)?

did i get your thought correctly?"
759574180,9780,madolson,2021-11-30T18:58:12Z,"No, if we send a write command we mark the script as dirty. We don't need to though, we only need to care if the write command actually does something to the dataset. I'll open an separate issue for this, it's not related but something I noticed. "
759796986,9780,sundb,2021-12-01T01:59:38Z,@MeirShpilraien It's OK.
759962383,9780,MeirShpilraien,2021-12-01T08:40:04Z,"Updated the code accordingly, also updated top comment."
759962722,9780,MeirShpilraien,2021-12-01T08:40:34Z,"I see, so I guess I can resolve this one?"
759964170,9780,sundb,2021-12-01T08:42:35Z,Should it be `Function doesn't exist`?
760608079,9780,MeirShpilraien,2021-12-01T22:08:26Z,After discussion with @oranagra and @yossigo the decision is to keep the API separate.
760879436,9780,oranagra,2021-12-02T08:54:39Z,"some more details about our discussion.

First, about considering moving the FUNCTION command logic to SCRIPT (since our new terminology dictates that both ""EVAL"" and ""Functions"" are ""scripts), we concluded that in this case it'll cause too much confusion (e.g. SCRIPT LOAD will obviously remain as is), and it's ok to leave the administrative parts of EVAL in SCRIPT, and the ones of FCALL in FUNCTION.

Secondly, regarding KILL, and BUSY:
We concluded that the BUSY response is more about telling the client that the server is busy and the command should be retried later, than about a way to KILL the blocker.
I even remember a discussion with Salvatore about EXEC returning BUSY without resetting the MULTI state so that it can be retried later (we abandoned that since it's dangerous, and it always fails with EXECABORT).
Moreover, we have a plan to soon let modules play that BUSY game too (see #9655), and they're obviously not gonna get killed by SCRIPT KILL.

p.s SCRIPT KILL is in many time a dead end anyway (responds with UNKILLABLE)"
760882512,9780,oranagra,2021-12-02T08:58:30Z,"yes, this is not related to here, let's add it to #8478 "
681924408,9309,madolson,2021-08-03T16:34:51Z,"Do you need to have such low level access to determine what the user does and does not have access to. I would expect it to be easier to maintain to just have an ACLCheckClientPermission(client, command arguments), so that it emulates the normal permission check that we do."
682070913,9309,oranagra,2021-08-03T20:15:34Z,"@madolson a module may want to check permission to a key before doing RM_OpenKey (so the low level CheckKey api is needed).
in other cases before executing a sequence of RM_Calls, the module will want to first make sure they're all allowed.

i haven't yet looked at the code, but while responding to this message i see the signature of the CheckCommand interface, and i think it's insufficient, we want to pass the full argv array, so keys will get checked too (in some cases the module may be a ""script engine"" and it's doesn't really understand what command it executes and which arguments refer to key names)."
682082573,9309,madolson,2021-08-03T20:34:34Z,"@oranagra Maybe my questions are dumb and this is obvious to you module developers, but I don't follow why having three individual commands is useful.

> a module may want to check permission to a key before doing RM_OpenKey (so the low level CheckKey api is needed).

I don't understand this use case, in what context would this be used instead of having the module declare what keys are needed by the command? A lot of code in Redis (cluster mode and server-side key tracking) assume this. It seems weird to have a separate backchannel for defining if the user has access. It also seems weird that this won't be published to the ACL log.

> in other cases before executing a sequence of RM_Calls, the module will want to first make sure they're all allowed.

Not sure I understand why you would want three separate API calls here instead of just one that answers the question, ""Can this user execute this command"". It's fragile to future changes where we add more ACL changes. "
682091593,9309,oranagra,2021-08-03T20:48:39Z,"As we know, by design, modules are exempt from ACL validations on the actions they do.
i.e. Antirez said that since they can write to arbitrary memory and execute arbitrary syscalls, when a user allowed a certain module command to run, it can do whatever it wants with no limitations from redis, and this includes doing any RM_Call they like.

So the first obvious thing is to add the flag to RM_Call that enables full checks inside it.
but as i stated, in some cases the module wants to verify that a sequence of commands can succeed before issuing the first one, so that's why we need the first new API.

As for the other ones, some modules access keys that are not explicitly referred to in the argument list.
i can provide few trivial cases:
1. a module that implements a domain specific query language that has some operators before each argument or isn't at all separated by spaces or distinct arguments
2. a module that for some reason adds prefixes to keys names it got from arguments, or some other funny shit (think of SORT BY).
3. a module that implements a scripting language, for instance one that exposes similar interface to what EVAL has today, so the user passes a script, and maybe also a list of key names to be verified before the module command is executed, but there's no guarantee that the script doesn't access other keys.

needless to say, some of the examples above are not compatible with cluster mode.

So i'm aiming to do two things:
1. provide something that's easy to use and hard to mis-use.
2. provide low level tools for advanced modules.

@yossigo @MeirShpilraien please chime in.
@YaacovHazan please update RM_ACLCheckCommandPerm to take a full argv list and validate all that's validated by processCommand"
682113721,9309,madolson,2021-08-03T21:26:21Z,"1. I suppose we should add a low level cluster mode command to check for cross slots then as well.
2. I think what you were expecting with RM_ACLCheckCommandPerm was the alternative I was asking about originally. Having a module check that does the EXACT permission check that Redis normally does seems easier to use and maintain. I'm fine to also have other APIs for power users to do shenanigans with."
683185655,9309,oranagra,2021-08-05T07:07:35Z,"i'm not certain what are the side effects of this.
maybe instead we should keep `c->user` set to NULL, and use a more explicit code below to call `ACLCheckAllUserCommandPerm` instead of `ACLCheckAllPerm`

@MeirShpilraien @guybe7 can you think of any undesired or desired side effects?"
683187127,9309,oranagra,2021-08-05T07:09:58Z,"we need to document `EACCES` at the top, or even provide detailed specific errors for the various ACL errors (i think i rather not)
alternatively, maybe we wanna return an error reply? (i don't think so). @MeirShpilraien @guybe7?"
683188044,9309,oranagra,2021-08-05T07:11:23Z,"we need to document the various errno in the top comment.
and maybe we need detailed errors for the various acl errors."
683188390,9309,oranagra,2021-08-05T07:11:57Z,i think the input here should be a RedisModuleString
683188926,9309,oranagra,2021-08-05T07:12:53Z,"I think the input should be a RedisModuleString, and we also need to document the `literal` flag."
683190214,9309,oranagra,2021-08-05T07:15:00Z,"i'm not sure i like the ""perm"" shorthand, since the prefix already has ""ACL"", and ""Check"", maybe we can drop it?
what do you think of these changes?
```suggestion
    REGISTER_API(ACLCheckCommand);
    REGISTER_API(ACLCheckKeyName);
    REGISTER_API(ACLCheckPubsubChannel);
```"
683192342,9309,oranagra,2021-08-05T07:18:20Z,let's add here also a case of a successful call to rm_call.aclcheck.
683192588,9309,oranagra,2021-08-05T07:18:44Z,lets add here also a case of a successful call to rm_call.aclcheck.cmd
683263341,9309,yossigo,2021-08-05T08:56:25Z,"```suggestion
 * the ACLs associated with the specified user.
```"
683267960,9309,yossigo,2021-08-05T09:02:21Z,Did you consider `const user *`? (applies below as well)
683268576,9309,yossigo,2021-08-05T09:03:09Z,"```suggestion
 * ACLs associated with the specified user.
```"
683269274,9309,yossigo,2021-08-05T09:04:07Z,"```suggestion
 * according to the ACLs channels associated with the specified user.
```"
683270832,9309,yossigo,2021-08-05T09:06:13Z,"I agree, even if there are no desired side effects now I can see how they pop up in the future."
683272047,9309,yossigo,2021-08-05T09:07:51Z,"Another point is what we do if the context has no associated user. If we want to be more secure by default, I'd say we may need to fail the operation."
683274624,9309,yossigo,2021-08-05T09:10:59Z,"Redis Module API tends to use longer names and avoid shorthand, consider `RM_ACLCheckCommandPermissions`.

Also, I am not sure about the coupling with `RedisModuleCtx` here. Doesn't it make more sense to take a `RedisModuleUser` here, and have a separate function that can extract `RedisModuleUser` from the context?"
684727255,9309,MeirShpilraien,2021-08-08T07:05:27Z,"What if it is used from a ThreadSafeCtx that does not attach to any block client? Will it crash here? Also, what will happen if it's a ThreadSafeCtx that was attached to this user but until it was created by the background thread the user was already dropped?"
684727385,9309,MeirShpilraien,2021-08-08T07:06:59Z,I guess this question is relevant also to the rest of this API
684728637,9309,oranagra,2021-08-08T07:17:23Z,"maybe we need to add a variant of the API that takes a user name as input rather than rely on the connection, and obviously and API to get the current user.
if the user is already disconnected or modified by the time the module tries to use it, i guess the module should fail (get denied)"
684729169,9309,MeirShpilraien,2021-08-08T07:21:57Z,I was thinking maybe it might be a good idea to introduce a credentials object. All those new functions can get a credentials object (instead of RedisModuleCtx*) and we can also add an API to get credentials object from RedisModuleCtx. The credentials object can leave even after the user has changed/deleted and can be used safely on another thread. 
684731274,9309,oranagra,2021-08-08T07:39:47Z,"i'm not sure this is the desired path (at least at this point in time).
seems simpler and more in-line with other things to let the module pass the user name around, and if it was modified or deleted, the validation should just get denied.
@yossigo WDYT?"
684732951,9309,MeirShpilraien,2021-08-08T07:54:16Z,"@oranagra I agree with you, passing the user name is better, this way if the user permission change it will still work correctly."
684739898,9309,YaacovHazan,2021-08-08T08:49:49Z,"@MeirShpilraien @oranagra IIUC this is what @yossigo already mentioned, no?
""Also, I am not sure about the coupling with RedisModuleCtx here. Doesn't it make more sense to take a RedisModuleUser here, and have a separate function that can extract RedisModuleUser from the context?""
"
684740985,9309,MeirShpilraien,2021-08-08T08:58:24Z,@YaacovHazan yep missed that ... but I do believe the username suggested by @oranagra is a good idea...
684753100,9309,yossigo,2021-08-08T10:36:39Z,@MeirShpilraien @oranagra Why pass usernames around when we can use `RedisModuleUser`?
684754190,9309,MeirShpilraien,2021-08-08T10:45:47Z,"@yossigo from my perspective the user name is an opaque struct that represents the user, so I think it's fine if it's `RedisModuleUser` as long as we handle permission changes/deletion and we make sure `RedisModuleUser` can continue living even after the actual user got deleted."
684754690,9309,MeirShpilraien,2021-08-08T10:49:42Z,"and of course, if the user was deleted and the module continues using its `RedisModuleUser` then we get permission deny on everything as @oranagra mentioned."
684758596,9309,oranagra,2021-08-08T11:20:16Z,"what's worse, if the module keeps a `RedisModuleUser` for later use, and the user is deleted, then the `->user` member here points to released memory!"
684759782,9309,yossigo,2021-08-08T11:28:51Z,"This makes sense, I'd still feel more comfortable having some opaque `RedisModuleUserId` and not commit to the fact that it's a string / the username."
685956688,9309,oranagra,2021-08-10T12:10:19Z,"```suggestion
/* Retrieve the user ID of the client connection behind the current context.
 * The user ID can be used later, in order to check if command, key or channel
 * can be executed or accessed according to the ACLs rules associated with that user.
 * The caller can later free the user ID using the function RM_FreeUserID
 *
 * On success a RedisModuleUserID object is returned, otherwise
 * NULL is returned. */
 RedisModuleUserID *RM_GetCurrentUserID(RedisModuleCtx *ctx) {
```"
685957018,9309,oranagra,2021-08-10T12:10:53Z,"i don't think we wanna mess with errno in most APIs, just when we have multiple failure reasons.
```suggestion
```"
685957234,9309,oranagra,2021-08-10T12:11:15Z,"```suggestion
void RM_FreeUserID(RedisModuleUserID *userid) {
```"
685958824,9309,oranagra,2021-08-10T12:13:41Z,"we need to decide if we wanna reflect the various ACL errors, or just one error for all.
@yossigo WDYT?"
685959299,9309,oranagra,2021-08-10T12:14:29Z,"```suggestion
/* Check if the pubsub channel can be accessed by the user, identified by the specified user ID,
```"
685960945,9309,oranagra,2021-08-10T12:16:59Z,outdated comment?
685962888,9309,oranagra,2021-08-10T12:19:55Z,"when did we delete the user?
did you intend to run some RM_Call to delete it here?"
686101599,9309,YaacovHazan,2021-08-10T14:57:09Z,RedisModule_FreeModuleUser
686130149,9309,oranagra,2021-08-10T16:12:47Z,"ohh, very confusing API name, looks as if it frees a resource of the current module, but in fat it deletes the user in redis.
i.e. equivalent to ACL DELUSER."
686215863,9309,YaacovHazan,2021-08-10T18:20:04Z,"@yossigo I agree that `RM_GetCurrentUserID` is a better name, but using the ""Create"" word implies that it is not just a reference for exiting object, but we created it, and the user should be responsible for freeing it, WDYT?"
687521566,9309,yossigo,2021-08-12T08:56:16Z,"@YaacovHazan C being a rather low level language, I think it's reasonable to assume you need to release something you've received as a result of a `get`. Some examples:

* `getaddrinfo()` -> `freeaddrinfo()`
* `getipnodebyname()` -> `freehostent()`

Also, the Redis Module API already has similar use cases - just to name a few:
* `RM_GetClientUserNameById`
* `RM_ServerInfoGetField`

"
687524757,9309,yossigo,2021-08-12T09:00:23Z,I think we can use `EACCES` for every ACL related failure.
693859539,9309,oranagra,2021-08-23T10:40:38Z,"let's rearrange this comment even further, have one line or a block per argument each specifying what it does, when it is used.

personally, i think this API is a mess, and don't like the fact that it decides what to take from c->argv on it's own rather than be fed the right object, but looking at how it's used, it seems it's hard to change that.

so i suppose what should be documented is that `object` (better put as last argument) is a manual override to be used instead of any of the automatic ones which depend on the `reason` arg)

same as `user` is now (after your change) a manual override for the automatic one (seems better than the previous logic)"
694095982,9309,oranagra,2021-08-23T15:49:53Z,are the two tests added for ACL LOG testing both of these? (cmd name and key name)?
694102328,9309,oranagra,2021-08-23T15:57:33Z,"we need to document what's `object`.
i see the ACL LOG doesn't really define that
https://redis.io/commands/acl-log
so maybe it's just sufficient to give a reference to there?

i see that there's also a `context` field that can be set to `toplevel`, `multi`, or `lua`, i suppose that in this case we either use a hard coded `module`, use the module name, or expose that as an argument in this function?
whatever we decide, this also applies for the logging we added in RM_Call.

i vote for a hard coded `module` @yossigo ?"
694103584,9309,oranagra,2021-08-23T15:59:09Z,i see this API isn't covered by the test.
694226529,9309,YaacovHazan,2021-08-23T18:52:34Z,"Currently, we are taking the context based on the flags of the ctx->client, so if a client is running some module command inside multi or lua script (if it's valid) you will see these contexts. if it doesn't gain anything I agree that we can use the 'module name' or just ""module"" context.

The API is covered in ""test module check acl for command perm"" (rm_call_aclcheck_cmd)"
694226823,9309,YaacovHazan,2021-08-23T18:53:00Z,"only one of them, i will add the other one as well"
694284743,9309,oranagra,2021-08-23T20:26:38Z,"i think seeing a module context is more valuable than seeing multi or Lua, but maybe we wanna change the context thing to flags rather than enum and show both."
702400966,9309,oranagra,2021-09-05T10:16:14Z,"```suggestion
 * The last 3 arguments are a manual override to be used, instead of any of the automatic
 * ones which depend on the client and reason arguments (use NULL and -1 for default).
```"
703100440,9309,madolson,2021-09-07T00:08:17Z,"The context is an enum value, can we just use a defined value instead of passing in -1, which is so cryptic?

Also, I'm not clear why we don't just pass the context in, since I assume we know it better from the calling site. This seems like an unnecessary level of abstraction."
703101183,9309,madolson,2021-09-07T00:12:30Z,"There is a random space here btw.
```suggestion
RedisModuleUserID *RM_GetCurrentUserID(RedisModuleCtx *ctx) {
```"
703101434,9309,madolson,2021-09-07T00:13:45Z,"I'm going to assume there is some long conversation about this somewhere, but why are we introducing a new resource called a UserID. In the other module API we just pass in the real username? "
703101732,9309,madolson,2021-09-07T00:15:31Z,"Module created users will fail here, since they are created outside of the regular ACL system. I believe you can still pull it out of the user successfully though, since the code in `RM_GetCurrentUserID` just grabs the name of the currently attached user. It doesn't look like there is any test validating this behavior."
703101829,9309,madolson,2021-09-07T00:16:10Z,Would be nice to document why this can error.
703155897,9309,sundb,2021-09-07T03:46:22Z,Is forget to add this test to `runtest-moduleapi`?
703165881,9309,sundb,2021-09-07T04:24:29Z,"```suggestion
        /* Add entry to ACL log */
        RedisModule_ACLAddLogEntry(ctx, userid, argv[1]);
        RedisModule_FreeUserID(userid);
```
Released too early."
703185143,9309,sundb,2021-09-07T05:25:30Z,"```suggestion
    RedisModuleUserID *userid = RedisModule_GetCurrentUserID(ctx);
```"
703185327,9309,sundb,2021-09-07T05:26:02Z,"```suggestion
    RedisModuleUserID *userid = RedisModule_GetCurrentUserID(ctx);
```"
703185375,9309,sundb,2021-09-07T05:26:11Z,"```suggestion
    RedisModuleUserID *userid = RedisModule_GetCurrentUserID(ctx);
```"
703185550,9309,sundb,2021-09-07T05:26:39Z,"```suggestion
    RedisModuleUserID *testuserid = RedisModule_GetCurrentUserID(ctx);
```"
703433198,9309,oranagra,2021-09-07T11:39:01Z,"We actually don't know the context in the caller (can't be hard coded there), and Salvatore designed all of these to be automatically populated by the server struct state. Maybe we can somehow do that for modules too? "
703435877,9309,oranagra,2021-09-07T11:43:28Z,"There was some discussion here: https://github.com/redis/redis/pull/9309#discussion_r685956688
I don't remember why it was decided to make an opaque type rather than use a string. @YaacovHazan @yossigo ?"
706791948,9309,YaacovHazan,2021-09-12T08:07:04Z,"We actually can, we call it from processCommand (top_context), execCommand (multi_context) and luaRedisGenericCommand (lua_context) "
706819599,9309,yossigo,2021-09-12T11:04:00Z,"I think it makes sense to take it out of `addACLLogEntry`. 

BTW I find the context pretty confusing - what should I expect if I have an `EVAL` calling a module command all wrapped in `MULTI/EXEC`?"
706820320,9309,yossigo,2021-09-12T11:09:22Z,"First version was passing clients around, we wanted to decouple that but did not want to hold references to RedisModuleUser. Passing a string was an option but an opaque type seemed like a cleaner API that is less prone to abuse and more future proof."
707826933,9309,madolson,2021-09-14T00:58:02Z,"So, my understanding is that this should apply to both RedisModuleUser (which are not owned by the ACL system) and users owned by the ACL system. I think the new resource makes sense if we encapsulate both of those two types of Redis ACLs.

Is there also an intention that modules can hold onto this new RedisModuleUserID resource and then pass it to a background thread for async processing? I assume that is why it's not actually holding on to the user, but that doesn't seem correct implementation wise. So I guess I'm not really clear why we don't just use the context."
711743383,9309,YaacovHazan,2021-09-19T13:14:47Z,thanks added
711744009,9309,oranagra,2021-09-19T13:19:16Z,"```suggestion
 * it can get the RedisModuleUser from this API, based on the user name retrieved by RM_GetCurrentUserName.
```"
711744146,9309,oranagra,2021-09-19T13:20:28Z,let's be sure to use uppercase ACL
711744240,9309,oranagra,2021-09-19T13:21:19Z,"```suggestion
 * The caller should later free the user using the function RM_FreeModuleUser().*/
```"
711747230,9309,oranagra,2021-09-19T13:43:17Z,"the convention is that the module name comes first.
i think these should be `aclcheck.xxxxx`"
711807610,9309,YaacovHazan,2021-09-19T21:45:20Z,RedisModuleUserID dropped
768423473,9940,tezc,2021-12-14T08:35:47Z,What else should we clear here? I assumed these clients are used for accumulating replies so clearing replies only. Is there any other use case for these temp clients? 
768633722,9940,oranagra,2021-12-14T12:51:07Z,"maybe we need to extract some code from `resetCommand` and re-use it here?
maybe `moduleFreeContextReusedClient` should also use it?"
768634038,9940,oranagra,2021-12-14T12:51:36Z,"styling.
```suggestion
client *moduleAllocTempClient() {
```"
768635845,9940,oranagra,2021-12-14T12:53:59Z,"i'm curious, was it necessary to change this code? maybe i'm missing something."
768656859,9940,MeirShpilraien,2021-12-14T13:21:26Z,Maybe I am missing something but wouldn't this will prevent you from reading from the pipe which will eventually cause the pipe to be full?
768663229,9940,tezc,2021-12-14T13:29:29Z,"Not necessary, just an optimization. We can skip unnecessary `read()` call if `moduleUnblockedClients` does not contain a client. We write byte to pipe when we are adding client to `moduleUnblockedClients`. If list is empty, pipe is empty. 

I can revert it if this is confusing, not that critical. Added this check just to skip one more syscall in the critical path. "
768668895,9940,tezc,2021-12-14T13:33:42Z,"If there is data in pipe, `listLength(moduleUnblockedClients)` should be greater than zero. I added if check here to just skip unnecessary `read()` call. If list is empty, pipe should be empty. "
768669513,9940,MeirShpilraien,2021-12-14T13:34:09Z,"Ohh sorry, you are reading if there is something in the list, so I believe you are good... :+1: "
768674622,9940,tezc,2021-12-14T13:39:55Z,"I'm more concerned with `write()` calls actually, I can revert the change here for `read()` if this is confusing. Just added this check to skip one syscall in the critical path. "
772089713,9940,sundb,2021-12-20T05:35:16Z,"Is it possible to define 1024 as a constant, so that there is no need to calculate its size in `moduleReleaseTempClient`?"
772115572,9940,tezc,2021-12-20T06:49:48Z,"Sure, I'll do. Actually, compilers calculate it on compile time as it's all about compile time constants. I relied on this but maybe it's better to be explicit. "
772570598,9940,yossigo,2021-12-20T18:05:47Z,"Looking at `freeClient`, it may involve quite a few different flows and may even give control back to modules. I think it should only be called with the mutex unlocked."
772899442,9940,tezc,2021-12-21T07:50:38Z,"Looks like clearClient() may also call back to modules. createClient() doesn't but it may in future. Changed code a bit, holding the lock just to add/remove to/from array. "
772904231,9940,sundb,2021-12-21T07:58:45Z,It seems that `clearClient` only needs when !full.
772964133,9940,tezc,2021-12-21T09:22:41Z,"Yes but we don't want to call clearClient/freeClient while holding the lock.(Please see Yossi's [comment](https://github.com/redis/redis/pull/9940#discussion_r772570598)). So, to detect if it's `full`, we have to acquire the lock. Then, we need to release the lock before calling `clearClient()`. After calling `clearClient()`, we need to acquire the lock again and place the client object into the cache if it has not become full while we are running `clearClient()`. 

So, It's a bit ugly but here we are being optimistic and calling `clearClient()` beforehand hoping the cache is not full. In this case, we lock once. If cache is full (unlikely), yes, we are calling clearClient() unnecessarily."
772965436,9940,sundb,2021-12-21T09:24:18Z,@tezc We can move it to the end of the method(`else`).
772969168,9940,sundb,2021-12-21T09:29:13Z,"@tezc Ohh, I missed something, you are right."
772970969,9940,tezc,2021-12-21T09:31:26Z,"@sundb  Could you please suggest as change? 

If you are suggesting this : 

```c
if (full) {
    freeClient(c);
} else {
    clearClient(c);
}
```

At this point, we've already placed client into the cache and unlocked the mutex. Some other thread can acquire the lock and pull the client before we call `clearClient()`."
772976358,9940,sundb,2021-12-21T09:38:38Z,"@tezc Yeah, I see it, thx."
774370904,9940,MeirShpilraien,2021-12-23T07:25:56Z,Why not continue using `server.module_client` here instead of using the cache (which require mutex locking)?
774386096,9940,tezc,2021-12-23T07:58:56Z,"It's just to handle temporary clients from a single place and clear code a bit. `moduleFreeContextReusedClient` change is same as well. Yes, there might be performance hit with these changes. Even without using cache here, clearClient() is doing more compared the previous partial clear operation. I'm not sure how sensitive modules are to these changes. 

Just to avoid the risk, I can revert these two back to using the same client instance at least. What do you think? "
775246309,9940,oranagra,2021-12-26T14:02:45Z,"```suggestion
    client *thread_safe_ctx_client; /* Fake client to be used for thread safe context so that no lock is required. */
```"
775248512,9940,oranagra,2021-12-26T14:22:49Z,"maybe add a comment here, explaining why for blocked clients we use `bc->thread_safe_ctx_client` (refer to the code below), and for other thread safe clients, we think we can afford to take the slow path."
775248554,9940,oranagra,2021-12-26T14:23:24Z,maybe refer to the comment we're adding in RM_GetThreadSafeContext
775248772,9940,oranagra,2021-12-26T14:25:15Z,"maybe 1024 is too high? (clients consume a lot of memory, and in this case after reaching the peak they'll never be released).
maybe 32 is a better constant?"
775249438,9940,oranagra,2021-12-26T14:31:25Z,"maybe it's a good idea to keep this function here (empty) for future use?
so that if it's needed later, someone doesn't introduce the call in the wrong place (like it did in the past)"
775250007,9940,oranagra,2021-12-26T14:36:21Z,"maybe i don't understand the responsibility of initClientVariables, but i think it should probably not reset `conn` and `id`"
775250434,9940,oranagra,2021-12-26T14:40:07Z,"this method is quite heavy.
ideally we could put all these fields together and reset them with a memset.
i can't think of a good way to do that though."
775251828,9940,oranagra,2021-12-26T14:53:17Z,"i'm not certain where we plan on using this method in the future.
currently it's only used in module.c where `conn` is NULL, so i'm not sure if this belongs here or not."
775252207,9940,oranagra,2021-12-26T14:55:55Z,"same here. not sure if this belongs here or not.
we need to define the role of this function better.
i.e. we never add clients with no `conn` to the client list, so no need to remove them from there, or unregister their event handlers."
775265061,9940,MeirShpilraien,2021-12-26T17:03:26Z,"Looking at this struct now, I wonder if we can just use the `reply_client`? Not sure though ..."
775265291,9940,MeirShpilraien,2021-12-26T17:05:47Z,I guess we can remove this variable from the server struct?
775265655,9940,MeirShpilraien,2021-12-26T17:09:55Z,Shouldn't this be initialise anyway (even if bc is NULL)?
775266030,9940,MeirShpilraien,2021-12-26T17:13:34Z,"```suggestion
#define MODULE_MAX_TEMP_CLIENT_COUNT 1024
static client *moduleTempClients[MODULE_MAX_TEMP_CLIENT_COUNT];
static size_t moduleTempClientCount = 0;
```
?"
775266219,9940,MeirShpilraien,2021-12-26T17:16:02Z,Isn't those two are `not` of each other?
775266661,9940,MeirShpilraien,2021-12-26T17:21:18Z,"Never mind, I see it uses the REDISMODULE_CTX_NEW_CLIENT flag"
775267146,9940,MeirShpilraien,2021-12-26T17:26:43Z,I see you removed it
775281379,9940,oranagra,2021-12-26T20:19:36Z,"no (i was wondering that myself), each of them states how a client should be freed when the context is destroyed.
when neither is set, the client shouldn't be automatically freed.
maybe a comment is due"
775382159,9940,tezc,2021-12-27T08:02:34Z,"@MeirShpilraien I'm not sure either. It looks okay to use `reply_client` if user doesn't do something surprising. It works for my case and tests pass as well but I'm not sure so I didn't reuse it here. I'd love to use it as it means one less `client` struct to clear, leads to better performance.  

I think question is, for a thread safe context, can someone call functions other than `RM_reply**` functions? If no, we can use `reply_client` here I believe. "
775385460,9940,tezc,2021-12-27T08:12:25Z,"`client` struct is around 17 kb, so 1024 of them will consume around 17 mb. 
We use 2 `client` objects per blocked client. So, I assumed that we can have ~ 512 blocked clients at a time. 
32 is too few, how about 256(4 mb) or 512(8 mb) ?"
775388855,9940,oranagra,2021-12-27T08:22:09Z,"where did you get the ~512 number from?
since the code will keep working even if we exceed the limit, the compromise we need to make is about
1. efficiency - if we take a number that's too low the optimization will not be sufficient
2. memory - if there's a burst of clients we have no mechanism to later reclaim that memory

i'm not comfortable with very high numbers even as high as 256.
if we wanna go that high, i think we need:
1. some introspection about this memory consumption in INFO and MEMORY commands.
2. maybe a ""cron"" mechanism to release them after some idle period.

@yossigo WDYT?"
775394962,9940,tezc,2021-12-27T08:38:39Z,"I just tried to create a generic function to clear clients. Clients can be with or without `conn`. So, I thought we want a single function to `clear()` client objects which can be real clients or fake clients. "
775395351,9940,tezc,2021-12-27T08:39:45Z,I just copied this from `freeClient()`. Just tried to create a generic `clearClient()` function to be used for all kind of clients either with `conn` or without. 
775396807,9940,tezc,2021-12-27T08:43:37Z,"`initClientVariables()` is called just after `malloc(sizeof(client)` or when we want to reuse client object, it that case, we clear it as if it is a brand new allocation. Maybe change `clearClient()` name, my intention was `clearClient()` will destroy and create new `client` object without deallocating its memory. After `clearClient()` is called on a client object, it's a brand new client object."
775397536,9940,tezc,2021-12-27T08:45:44Z,"I'll take a look. Probably, compiler is doing the same as most variables are initialized to zero. I expect it use vectorized instructions here. "
775400612,9940,oranagra,2021-12-27T08:54:12Z,"but what would we use such a function for?
resetCommand can't obviously use it (doesn't want to disconnect the client or remove it from the client list).
maybe if we wanted to recycle the client structs for normal clients (i.e. when they disconnect add them to a pool).
i'm actually not sure it'll be a big performance win, not sure why client struct creation takes so long, maybe it's registration part (in the different lists) is even heavier."
775400940,9940,tezc,2021-12-27T08:54:59Z,"512 is just an assumption mostly considering redisraft use case. I agree there is trade-off, can consume some memory after reaching the peak. 

Also, there is an opportunity to cut the number half, could you take look at here : 
https://github.com/redis/redis/pull/9940/files/3bbd7a36f7f3191c3c69054e81e58b29890b25dc#r775382159"
775403092,9940,oranagra,2021-12-27T09:00:38Z,"ok, so it assumes nothing there is being used (i.e. clientUnlink was called).
maybe rename to `initClientStruct`?
please try to define / describe / document these functions and their roles, maybe then it'll make more sense to me."
775403604,9940,oranagra,2021-12-27T09:01:55Z,"p.s. when we first suggested that module.c and resetCommand can share code, i imagined a much smaller change.
i.e. extracting some code from resetCommand into a function to be used by both.
maybe we got carried away?"
775404978,9940,tezc,2021-12-27T09:05:38Z,"Yes, there is no use case for real clients for now. You asked for a single function to clear clients previously in the comments, so I created one `clear` function that can clear all kind of clients. Looks like I misunderstood, you were talking about fake clients only? 

client create/free involves 8 malloc/free pairs including client's own malloc. That takes quite time. So, I tried to avoid freeing memory in clearClient() as much as possible.  "
775405777,9940,tezc,2021-12-27T09:07:43Z,"After discussion with @yossigo , I tried to create a generic function to clear clients no matter what kind of clients they are, maybe I misunderstood. So, it could be used different places later if needed etc. "
775421432,9940,oranagra,2021-12-27T09:49:12Z,i don't know enough about this.. so i'm paranoid.
775422002,9940,oranagra,2021-12-27T09:50:44Z,i think my comment about a single clear function was to share code with resetCommand.
775440773,9940,tezc,2021-12-27T10:43:03Z,Added a comment
775440864,9940,tezc,2021-12-27T10:43:23Z,ok put it back
775440909,9940,tezc,2021-12-27T10:43:32Z,added a comment
775440966,9940,tezc,2021-12-27T10:43:42Z,added a comment
775842893,9940,yossigo,2021-12-28T10:43:43Z,"I think not, it's deliberately a different client:
https://github.com/redis/redis/blob/266d95066da8082ab569207765bea674fa297404/src/module.c#L6625-L6628"
779422339,9940,oranagra,2022-01-06T09:46:43Z,"please add some comment here to describe that cache, it's purpose and behavior (shrinking).
maybe define the `32` minimum in some `#define` constant?
please also mention limit and cron mechanism in the top comment of the PR. (to be used as commit comment)"
779423413,9940,oranagra,2022-01-06T09:48:23Z,"you have a comment specifying the throttling, but i feel you're missing a line that specifies what that does (puts the throttling comment in some context)"
779423931,9940,oranagra,2022-01-06T09:49:13Z,"this is a very minor leak, but still for completion, i think we should mention it in the PR top comment."
781927076,9940,tezc,2022-01-11T09:10:23Z,"This is not a leak actually. It was using `moduleFreeContextReusedClient` previously. So, no need to call moduleFreeContext() previously.  

Now we allocate a temp client object from pool and return it to the pool. To do that, need to call moduleFreeContext(). "
782047132,9940,sundb,2022-01-11T11:15:19Z,"Personal opinion, I think this code is not easy to understand.
After `moduleCron` use `moduleTempClientMinCount` to record the count after the last shrink,
during the next 100ms, if `moduleTempClientCount` is reduced to smaller than `moduleTempClientMinCount`, then use the reduced count to scale in the next `modulesCron`, is this correct?"
782048088,9940,sundb,2022-01-11T11:16:37Z,"```suggestion
                                              context is destroyed */
```"
782068270,9940,oranagra,2022-01-11T11:45:22Z,"we may also want to realloc the `moduleTempClients` array.
AFAICT currently it only grows and grows."
782072317,9940,oranagra,2022-01-11T11:51:29Z,"the new mechanism of only releasing clients that where not used since the recent cron seems ok to me.
it's a little hard to follow, but i suppose ok.

p.s. why did you change the `iteration` limit from 10 to 500?
original one seemed too low, and this one seems too high.
i did suggest it could be proportional to the number of recently allocated or release clients, but that may be an overkill..
so just asking how you got to that number?

p.p.s. 16, 8, or 4 for `min_client` all seem fine to me..
maybe with a slight preference to the lower ones, so we could settle on 8."
782123473,9940,tezc,2022-01-11T13:02:57Z,Yes. That's correct. 
782123613,9940,tezc,2022-01-11T13:03:08Z,Fixed.
782124282,9940,tezc,2022-01-11T13:04:10Z,Added code to shrink it in cron
782148500,9940,tezc,2022-01-11T13:36:17Z,"Sorry, confused by numbers, 500 is a lot. Checking it again, on my local I see freeClient() takes around 800-900 nanoseconds. So,  we need upper limit here.  Changed it to 50, which will introduce 50 microseconds latency on this case. Should we go higher or lower? Can you suggest one?  

ps. Set `min_client` to 8."
782190133,9940,oranagra,2022-01-11T14:18:26Z,seems fine :shrug: 
782194738,9940,oranagra,2022-01-11T14:23:21Z,"i think this can have a resonance effect.
you multiply by 2, and then shrink to half.
maybe the shrinking should be only when there's 4 times waste?"
782247191,9940,tezc,2022-01-11T15:17:00Z,Done.
970241347,11248,pizhenwei,2022-09-14T02:15:03Z,"We really don't want to `invalidate` page cache, we want to `reclaim` page cache here, So I think `reclaimFilePageCache` seems better here."
970242160,11248,pizhenwei,2022-09-14T02:16:16Z,"what abouht `return posix_fadvise(fd, offset, length, POSIX_FADV_DONTNEED);`?"
970325660,11248,uvletter,2022-09-14T05:32:02Z,"Yes, the reason I wrap the ret is I want to normalize the ret to -1 or 0 just as other utility functions,  from man page `posix_fadvise` returns the error number. Or maybe whether -1 is return is not critical."
1048541056,11248,oranagra,2022-12-14T14:29:58Z,"we probably wanna do the same when we save in `finishShutdown`, since we're likely to be restarted from that rdb file soon."
1048580950,11248,oranagra,2022-12-14T15:01:17Z,isn't it far better to call this incrementally while writing? like we do with sync_file_range?
1048585547,11248,oranagra,2022-12-14T15:05:11Z,"neat!
but again, maybe we can incrementally release the pages?
i guess that in this case it doesn't matter much since we had to accumulate the whole rdb file in the page cache anyway (unlike a persistence save, in which we can avoid that buildup), so it might not matter if we release it incrementally or in one go?"
1048587484,11248,oranagra,2022-12-14T15:06:49Z,"in theory we can maybe also incrementally release when parsing the rdb, but that's probably more complicated and we better skip that."
1051580705,11248,oranagra,2022-12-18T11:22:33Z,"i don't like the fact that we're riding on this ""info"" struct.
and also, this change caused quite a lot of cascading changes.
i think that instead we only need to add an argument to rdbSave and rdbSaveBackground and we're done.
it will touch some 9 places that call them, but it'll still be a smaller diff than what you did.
maybe instead of a boolean argument it can be a flags argument, so in the future we can add more flags (will also make it slightly more readable than a boolean)"
1051582819,11248,oranagra,2022-12-18T11:29:53Z,"maybe it's better to use the same ranges we use in sync_file_range? do we have something to benefit from that?
the only reason we also have a fallback for redis_fsync is because sync_file_range isn't standard.

i think that the statement about POSIX_FADV_DONTNEED not affecting dirty pages is irrelevant.
the advise is a generic one, and each implementation can decide how to act on it. it can even change in some future kernel.

on the other hand, the advantage of using sync_file_range is not because it is range specific, but rather because we can start a sync on one range and wait on another.
so considering that the advise (regardless of being immediate action as it is now, or something else in the future), is applicable on the whole range that was written so far, maybe we don't have to use ranges?"
1051589528,11248,oranagra,2022-12-18T12:16:39Z,"posix_fadvise is POSIX, why do we need that `#ifdef`?
some platforms may not support it by ignoring it, or do different interpretations of the hint, but why shouldn't we give it?"
1051591001,11248,oranagra,2022-12-18T12:27:08Z,"it can also be used to disable, maybe this is slightly better. WDYT?
```suggestion
void rioSetAutoReclaimCache(rio *r, int enabled); 
```"
1051591265,11248,oranagra,2022-12-18T12:29:18Z,"i think we better explicitly set it to 0 in rioInitWithFile, otherwise, i'm not sure we can be certain what't the value."
1051592615,11248,oranagra,2022-12-18T12:38:11Z,"our variables are snake_case (for the most part).
but also, IIRC we now call it ""reclaim"", not ""invalidate"".
how about just calling it `int reclaim`?"
1051593242,11248,oranagra,2022-12-18T12:42:06Z,i think that's an LL_WARNING
1051593824,11248,oranagra,2022-12-18T12:44:58Z,"maybe considering my other advise of using it on all OSes, not just linux, we wanna silently ignore the error?"
1051593950,11248,oranagra,2022-12-18T12:45:58Z,"if we wanna silently ignore the error, we should drop that `goto`"
1052231134,11248,uvletter,2022-12-19T14:01:40Z,"Yes I didn't notice the other rdb functions has a rdbflags parameter, and I misunderstood the rdbSaveInfo plays the role of flags. I move the keep_cache to the rdbflags parameter."
1052243397,11248,uvletter,2022-12-19T14:13:47Z,"According to https://www.gnu.org/software/gnulib/manual/html_node/posix_005ffadvise.html posix_fadvise may not be supported in many platform :( , at least not supported on my MacBook. To suppress the compilation error and for simplicity, I think regard it as a linux-specific feature is fine at the moment. On the other hand, the direct reclaim and cache issue is also linux-specific :)"
1052246584,11248,uvletter,2022-12-19T14:16:22Z,"Sure, I'm always not good at naming things... I also expected this function could both turn on and turn off the option."
1052252530,11248,uvletter,2022-12-19T14:21:01Z,"As it's a mirror error information(as you clarify below, the error can be ignored safely), I think LL_NOTICE maybe is sufficient to let user know what happens without scare."
1052269158,11248,uvletter,2022-12-19T14:33:08Z,"My consideration is `sync_file_range` just issue a writeback request to os, but when posix_fadvise is called, the dirty page is still in flushing, so the posix_fadvise almost has no effect. Without the range the writeback-ed pages has another chances to be reclaimed.

> i think that the statement about POSIX_FADV_DONTNEED not affecting dirty pages is irrelevant.

What about add a statement that it's a Linux behave? though we're not supporting it at other os now..."
1052377800,11248,oranagra,2022-12-19T16:01:18Z,"now that we pass the same rdbflags (`RDBFLAGS_` prefix) to rdbSave, we should probably pass it forward to rdbSaveRio rather than use RDBFLAGS_NONE"
1052386329,11248,oranagra,2022-12-19T16:09:40Z,"ok, i agree about reclaiming the whole range (the alternative would be to only reclaim what we know we're done flushing (fsynced offset), and didn't yet reclaim, but i guess we don't need that complication.

we can mention (maybe here?) why we reclaim the whole range, and the fact that FADV_DONTNEED on linux only acts on clean pages, but i don't think we should explicitly support that only on Linux.
i think we should use the generic posix advise and maybe explicitly disable on systems where we see it causes damage."
1052389324,11248,oranagra,2022-12-19T16:12:44Z,"ohh, i imagined that not being supported means that you can call it and it does nothing.
IIRC (from many years ago) even Linux doesn't implement all the advises, or that for some the implementation was really naive, and not taking the full power of what it can do with the advise.

if it fails to compile, maybe there's a better way to detect where it's present, rather than explicitly rely on `__linux__`?"
1053390921,11248,uvletter,2022-12-20T14:40:55Z,"Yes, I try to leverage the compile-time detection just like what `C11_ATOMIC` dose, but I find a problem that I don't know how to express multi-line shell script embedded in makefile, something like:
```
HAVE_FADVISE := $(shell sh -c 'echo ""#include <fcntl.h> \
int main() { \
    posix_fadvise(0, 0, 0, POSIX_FADV_DONTNEED); \
} \
"" > foo.c; \
	$(CC) -std=c11 -c foo.c -o foo.o > /dev/null 2>&1; \
	if [ -f foo.o ]; then echo ""yes""; rm foo.o; fi; rm foo.c')
```
I know a workaround that put the contents into an individual shell script and let makefile execute the shell script, but if I do this should I also move the `C11_ATOMIC` detection out? Can you give me some suggestions Oran"
1053525199,11248,oranagra,2022-12-20T16:41:19Z,@yossigo PATL
1068319081,11248,uvletter,2023-01-12T16:11:13Z,"I found a less intrusive way to achieve this, and I found it works well in my mac and linux vm. I think it's ready to get reviewed."
1068959923,11248,uvletter,2023-01-13T05:57:29Z,"Maybe we'd better move the cache reclaim to `rdbLoad` just like what `rdbSave` does, but `rdbLoad` operate with `FILE` while `bioCreateCloseJob` operate with fd, I don't like open and close a file twice, maybe we could refactor `FILE` to fd and maintain the file buffer ourself in the future."
1083411412,11248,oranagra,2023-01-22T08:31:38Z,"you could use `fileno` to get the fd of that FILE, but i'm not certain we want to move it to rdbLoad.

readSyncBulkPayload is the one that writes that file, and also calls rdbLoad to read it, so at least the writing concern belongs here (also it's the one that orchestrates the load).

maybe the question should be if we want to reclaim the cache after loading an rdb file on startup.
remember we did RDBFLAGS_KEEP_CACHE in finishShutdown.
since unlike other cases, in both of these cases we don't incrementally reclaim, and instead we can allow the entire file to get cached, it could be that none of this really helps reducing the damage.
also, if we reclaim after loading at startup, we should make sure to do it only on successful load, since it could be that loading fails due to some bad configuration, and it's gonna be re-attempted.

IMHO we can keep it as it is now.
"
1083632693,11248,uvletter,2023-01-23T03:58:02Z,"> you could use fileno to get the fd of that FILE

In the bio we would fadvise and close the fd, outside the bio(i.e. in rdbLoad) we close the FILE, as there may have race condition in two different thread, so we'd better do all the file operations in bio, but I guess close fd is not equal to close a FILE(at least the memory refered by FILE pointer is not released), so passing the fileno of FILE to bioCreateCloseJob is not enough.

> since unlike other cases, in both of these cases we don't incrementally reclaim, and instead we can allow the entire file to get cached, it could be that none of this really helps reducing the damage.

Specifically in our use case, a high-capacity host carrying tens or hundreds of redis instances, as page cache in each redis instance grows, it assembles substantial page cache in the host(usually more than 50GB), and finally triggers direct reclaim. As the number of pages to be scanned and reclaimed is quite a lot, the stall time is not ignorable. To solve this specific case finally reclaiming the cache after load is ok. In low-capacity machine the OS needn't do many works to relcaim cache as the total pages is less, so this won't be a issue.

"
1084838899,11248,yossigo,2023-01-24T05:55:15Z,"@uvletter This more strict, autoconf-like approach to detect fadvise is good but less consistent with how Redis *generally* does it (with few exceptions). Do you see a problem just having a few `#ifdefs` based on platform to set `HAVE_FADVISE` in `config.h`?
"
1084843354,11248,yossigo,2023-01-24T06:05:40Z,"The reason to avoid logging here is to refrain from spamming the log with redundant messages, which could happen regardless of OS. We could add a counter instead, but given that it's very unlikely to hit an error here, a counter is probably not worth it."
1085571465,11248,uvletter,2023-01-24T16:22:52Z,"See the discussion https://github.com/redis/redis/pull/11248#discussion_r1051589528, at first I also detect it by platform, but @oranagra remind me that the support may not only depend on platform but also the kernel version, so I deside to seek for compile-time detection. I think this also helps on some novel syscall, e.g. iouring and so on."
1085592170,11248,uvletter,2023-01-24T16:37:55Z,"Normally reclaimFilePageCache won't throw a error, but I worry some odd kernel or fs may hit an error, and personally in my practice I prefer more observability in case some odd bug occurs. As the code here is only used on some file load operation, which is not much high frequent, I suppose it wouldn't produce many noise."
1086261514,11248,oranagra,2023-01-25T06:57:28Z,"i'm not certain i understand Yossi's original intent, but still i have a few comments about this:
1. we don't need a special job (or two) for this. it would be enough to add a step to an existing job (one on freebsd and one on linux).
2. maybe we don't need the freebsd one, and it's enough to know that on linux we detect it correctly, and see that other platforms don't fail to build/run.
3. maybe grepping the source code is not the right approach, and instead we can add a tcl test (that runs only on linux) which sets up some extreme scenario and then somehow measures the amount of page cache used by the process? i.e. validates that it achieves its purpose rather than just the fact we call fadvise."
1089706513,11248,uvletter,2023-01-28T10:05:57Z,">  and instead we can add a tcl test (that runs only on linux) which sets up some extreme scenario and then somehow measures the amount of page cache used by the process?

Sadly there're no metrics about  page cache used by the process, `/proc/meminfo` counts the total cache size, but this cannot be used directly in tcl test, since the test environment is not isolated, other test case or processes may also increase the cache. The tool `vmtouch` can observe the cache size of file, but it need another dependency installation, so I won't try it. The syscall `mincore` can also observe the cache backed by a file, but I don't know how to use it in tcl... So I only add unittest for it now, it would be nice if you have other ideas about how to measure the cache in integration test."
1089893214,11248,oranagra,2023-01-29T08:05:25Z,"maybe we should drop the HAVE_FADVISE condition?
this will server as an assertion that on linux we did detect that FADVISE is supported."
1089894486,11248,oranagra,2023-01-29T08:10:37Z,"ok, considering it's only when closing a file (not a high rate operation), i guess we can keep it."
1089895941,11248,oranagra,2023-01-29T08:13:49Z,"you're right.
so you wanna add a reclaim on startup when an RDB was successfully loaded?"
1089896305,11248,oranagra,2023-01-29T08:16:11Z,"@yossigo so can we keep the current code?
i do wanna support any OS that has it, not just linux.
or maybe you argue that we should empirically find the OSes we support that have it and use it only on these (leaving others out of scope)?"
1089897072,11248,oranagra,2023-01-29T08:21:16Z,"ok, so in the current approach we don't have any TCL tests that test our usage of fadvise (make sure we have no bugs).
but we do have a test (specific for linxu) that checks our detection and the fact fadvise works.

i agree we probably can't write a tcl test that verifies these, since we have no clue how these run and in parallel to what.
but maybe we can add a check in one of the GH action workflows?
i.e. in that case we do know we run on an isolated host.
e.g. spin up a job on linux, measure `/proc/meminfo` run `--single integration/replication` or alike, and re-measure meminfo?"
1089910278,11248,uvletter,2023-01-29T09:25:59Z,Make sense
1089916494,11248,uvletter,2023-01-29T09:48:56Z,"Yes, I think this would be more consistent with quit while keeping the RDB cache, though I don't know how to do it elegantly now(i.e. without extra open and close file operations)."
1089951259,11248,uvletter,2023-01-29T12:50:29Z,"I added a github action but I'm not sure it works as expected.  There're some other variables, like saving RDB while quitting, or log, that may increase the cache, so I doubt the limit 10KB is enough, and I don't know how to trigger a github action to verify it. I'll tune it according to the result."
1093008072,11248,oranagra,2023-02-01T10:04:45Z,i don't think an extra open (at startup) is an issue.
1098684543,11248,oranagra,2023-02-07T13:49:30Z,"maybe do that only if loading succeeded? if it didn't (e.g. failed on OOM issue), maybe it is likely to be retried?"
1098698245,11248,oranagra,2023-02-07T14:00:48Z,"if we do that, we should add a `reclaimcache` part to the `skipjobs` defaults at the top of the file.
but maybe we should make it more generic so that other similar tests can be added in the future.
we could make it more generic by naming it `specific`, so we can choose to skip or not to skip all specific tests (i.e. ones that don't just re-run the whole test suite on various combinations).

another alternative is to move it to a separate (new) yaml file (with a daily cron trigger), but then we won't be able to trigger it with our workflow dispatch on random branches and PRs.

i'm leaning towards just renaming it."
1098878802,11248,uvletter,2023-02-07T16:12:55Z,"I think it's right, on failure the user would retry or remove/rewrite the corrupt rdb finally"
1100073725,11248,yossigo,2023-02-08T12:39:26Z,"@oranagra Yes, I think we can white list the specific platforms on which we assume it exists and ignore it elsewhere. It's more aligned with how most other capabilities are handled."
1100196054,11248,oranagra,2023-02-08T14:13:39Z,"i think other things that we handle that way are non-standard (like `sync_file_range`), but `posix_fadvise` is standard (like `_Atomic`.
so using it on just a few platforms (e.g. just Linux and Mac), could theoretically be a wasteful miss on Solaris (just random examples, i didn't bother to check which one supports it).

on the other hand, we can say that since this is just an advise, and we're not sure what's the implementation behind each os, we don't wanna use it on ones on which we didn't test it..
although, we are never gonna test it on these, so if we'll enable it, we can get some report of issues from the community, but if we're wasteful on some of these oses because we didn't bother to enable it, no one will report that.

did i convince you? or do you insist on explicitly enabling it on specific list of OSes?"
1100428435,11248,uvletter,2023-02-08T17:01:02Z,"Personally I perfer autoconf-like detection since it's more robust and portable, and doesn't depend on the programer's good understanding to the environment as well as its history. I refer to some `make` project, like nginx, rocksdb, they detect the symbols with shell script, while other `cmake` project utilize the cmake mechanisms like `check_symbol_exists` and `check_cxx_source_compiles`. In redis's tradition these detection were done with macros, so it involves some break..."
1101317247,11248,oranagra,2023-02-09T11:14:03Z,"I discussed this with Yossi and decided to drop it in favor of ifdefs in config.h.
personally i'm not very happy about it, but willing to let go.
the arguments were that we don't do such a thing for many other system calls, and we don't want to transition into adding more of these in the current way. arguing that the _Atomic thing was an exception because the problem was rather widespread.

putting this in config.h we have two alternatives:
1. by default try to use it, and just add an explicit set of exception OSes on which it's missing.
2. by default don't use it, and add exceptions only for the OSes on which we know it exists and works as expected.

the disadvantage of [1] would be that compilation would break on some system, and then we'll get a PR to add an exception.
the disadvantage of [2] is that on some system were we could have performed better, we won't and it's likely no one will notice.
we decided to take option [2].

@uvletter i know you've invested quite a lot of time on this mechanism, i apologize for pushing in that direction and wasting your time."
1101784784,11248,uvletter,2023-02-09T17:13:35Z,"@oranagra  It's just a process of exploration, so no need for the apologize, and I think I learned a lot from the discussion : )

I'll update this part tomorrow. I also spent sometime updating the top comment, but since I'm a native speaker, I'm sure if I describe correctly. If there're some faults or other points I missed, plz help me refine it thanks!"
1103779268,11248,oranagra,2023-02-12T10:58:01Z,"i now notice that we create a job that does the reclaim, but doesn't do an fsync, so doesn't that mean that the fadvise may be ineffective.
we do that here (rdbLoad, and also in closeRepldbfd)"
1103779537,11248,oranagra,2023-02-12T11:00:18Z,"i realize that we're doing a reclaim on the AOF (only when closing a file, or doing a rewrite),
but we didn't do any reclaim in the incremental fsync (bioCreateFsyncJob).
it feels a bit odd, maybe we should be more decisive and either leave the AOF file out of this campaign, or fully include it.
WDYT?"
1103820535,11248,uvletter,2023-02-12T15:15:20Z,"I think we'd better address AOF the same  as RDB, since this PR just intend to solve a specific problem we encountered when we do massive upgrade to our cluster initially, so it only reclaim the cache of RDB. I'll submit another pr for it."
1103821349,11248,uvletter,2023-02-12T15:20:28Z,"fsync should coordinate with write to guarantee the safety of file, rdbLoad just read the file, I think it's based on a assumption that the file has been fsynced at the time write is performed."
1103823500,11248,oranagra,2023-02-12T15:34:03Z,"ok, indeed both rdbSave and readSyncBulkPayload do an fsync before leaving, so we're safe there.
but on the other hand, it means that adding another fsync would be harmless, so it may be ""safer"" or cleaner to always make sure we couple an fadvise with an fsync just before it.
we can do that by passing `1` as the need_fsync, or by modifying bio.c to always force an fsync before calling fadvise, even if need_sync is 0.
what do you think?"
1103932680,11248,uvletter,2023-02-13T02:06:53Z,"I still don't think it's a good idea. fsync belongs to the scope of write, but we do something related to write while reading a file, the couple of read and write looks a little odd.
Another problem is, while fadvise has no side effect to write, but fsync do. While a page is marked as writeback, the page can not be written util the writeback ends(more precisely the write would block util writeback is done), so fsync here may interfere a write at other place, which is unexpected."
1104028243,11248,oranagra,2023-02-13T06:03:32Z,"ok, let's leave it as is then."
1105230661,11248,enjoy-binbin,2023-02-14T02:39:15Z,"there is a failure in the Daily, can you take a look?
https://github.com/redis/redis/actions/runs/4169023701/jobs/7216495785"
1105231425,11248,enjoy-binbin,2023-02-14T02:40:47Z,"There is also an error here, which can be reproduced on my local valgrind env
https://github.com/redis/redis/actions/runs/4169023701/jobs/7216496035#step:7:1854
```
redis-server: util.c:1378: test_reclaimFilePageCache: Assertion `!cache_exist(fd)' failed.
```"
1105391083,11248,oranagra,2023-02-14T07:17:25Z,"i can also reproduce (Linux), it passes when running without valgrind, but fails when running with valgrind.
not sure how we can detect it and skip the test (never done that).

i see there's a RUNNING_ON_VALGRIND macro that requires valgrind.h.
i suppose that this being part of the unit test and not redis itself (something only developers use), it might be a valid solution.

maybe someone knows a better one?"
1105939629,11248,uvletter,2023-02-14T14:59:20Z,"1375580160 - 1375014912 = 565,248 byte, it's a litter over the limit 500KB I set. To track accurately  where the small cache is from is a little hard, I'll follow up"
1105960014,11248,uvletter,2023-02-14T15:14:14Z,"I suspect valgrind would do some black magic like mock the mmap syscall to track the memory allocation(as far as I know some allocator claim large trunk of memory form OS with `mmap`), though I'm not an expert on valgrind."
1106079820,11248,oranagra,2023-02-14T16:41:30Z,let's just skip it with the ugly ifdef
1106696590,11248,oranagra,2023-02-15T06:18:08Z,"to stop the CI failures, i made a PR for this change https://github.com/redis/redis/pull/11808
@uvletter please handle the other issues (test thresholds, and AOF)."
572462635,8474,madolson,2021-02-09T00:00:08Z,"Since we are no longer doing any introspection on cmds here, I think we can safely remove this from the function signature."
572463531,8474,madolson,2021-02-09T00:02:32Z,PXAT*
572463807,8474,madolson,2021-02-09T00:03:16Z,"spacing, two other offenders below.
```suggestion
        addReplyErrorFormat(c,""invalid expire time in %s"",c->cmd->name);
```"
572465308,8474,madolson,2021-02-09T00:07:20Z,Also slightly off spacing.
572468611,8474,madolson,2021-02-09T00:16:03Z,I think there was some discussion that expire could overflow during this multiplication. Might want to check it's still positive at the end.
572469705,8474,madolson,2021-02-09T00:18:52Z,"shared.px should be unused now, we could probably drop it from the shared table."
572472018,8474,madolson,2021-02-09T00:24:54Z,Since we're deleting all of the validation that the two values are the same (Just that we're replicating it as a PEXIREAT or SET PXAT). Can we also test that on the primary and replica executing TTL gives the same value?
572488776,8474,ny0312,2021-02-09T00:58:18Z,"Done.

I'm still keep the `cmd` argument in the upper layer `propagate()` signature, even though it is not used there anymore either:  
1. Too many invocations of `propagate()` to change/squeeze in this PR.
2. Might be useful later when we want to do things based on `cmd` that apply to both AOF and replication."
572489836,8474,ny0312,2021-02-09T01:01:05Z,Done
572490333,8474,ny0312,2021-02-09T01:02:36Z,Fixed.
572501578,8474,ny0312,2021-02-09T01:29:09Z,Good point. Done.
572501796,8474,ny0312,2021-02-09T01:29:43Z,Fixed
572503457,8474,ny0312,2021-02-09T01:34:38Z,Hmm something wrong with my formatter...Fixed.
572574240,8474,madolson,2021-02-09T03:51:12Z,I agree
573260156,8474,ny0312,2021-02-09T21:38:13Z,"Makes sense to not reduce the test coverage. Done.

Had to Introduce a new `[ABSOLUTE]` optional argument to `TTL` and `PTTL` commands to return absolute expiration timestamps of keys."
573371094,8474,madolson,2021-02-10T01:15:01Z,You really like your tabs.
573372473,8474,madolson,2021-02-10T01:18:27Z,What's this cool flag do?
573373177,8474,madolson,2021-02-10T01:20:34Z,"This is a syntax error, not a subcommand syntax error.
```suggestion
        addReplyErrorObject(c,shared.syntaxerr);
```"
573374364,8474,ny0312,2021-02-10T01:24:18Z,"lol this cool flag changed the meaning of the command so is cold-bloodedly discarded now.

Removed."
573374560,8474,ny0312,2021-02-10T01:24:57Z,Done
573374627,8474,ny0312,2021-02-10T01:25:08Z,lol my bad. fixed
580568035,8474,ny0312,2021-02-22T20:28:53Z,I ended up introducing a new `EXPIRETIME` command to query absolute timestamps of TTLs. 
593502348,8474,QuChen88,2021-03-12T23:17:21Z,"I prefer to keep `ttl` in the name as `milliseconds` is too generic and doesn't indicate this is the time to live. If you want to make it clear that the TTL is in terms of milliseconds, you can rename it to be something like `ttl_millis`. "
593509195,8474,QuChen88,2021-03-12T23:41:08Z,`ttl_milliseconds`? 
593509855,8474,QuChen88,2021-03-12T23:44:02Z,`millisecond_obj` for a more consistent naming schemes for local variables.
593513680,8474,QuChen88,2021-03-12T23:58:36Z,nitpick: don't need to move this method call down from where it was for better code locality :)
593519865,8474,QuChen88,2021-03-13T00:07:41Z,"Not sure if it is a good idea to expose this command as a new redis command. I think most redis users would prefer to see expire time as a relative value instead of the absolute epoch time value. 

If this command is used for testing purposes only, can you make it into a sub-command for `DEBUG` command? "
594499335,8474,ny0312,2021-03-15T16:39:01Z,"I dont feel strongly but existing code uses `milliseconds` already: https://github.com/redis/redis/blob/92bde124caaedef0e1572765854b2deb9aa22a35/src/t_string.c#L76
"
594513886,8474,ny0312,2021-03-15T16:56:28Z,"I'm introducing it for testing purposes. But I do think it has use cases outside testing. It allows users to understand the relative distance between the expiration deadlines of different keys. E.g. if two keys would be expired together. Today there is no way to do that. I think this family of use cases deserve a top level command, assuming we don't only introduce top level commands for super popular use cases.

I preferred introducing `EXPIRETIME` over a `DEBUG` sub-command also because I wanted to colocate the implementation of `expiretimeCommand` in `expire.c` next to `ttlCommand` so I can easily re-use `ttlGenericCommand`.  "
594516152,8474,ny0312,2021-03-15T16:58:55Z,"all other `notifyKeyspaceEvent(NOTIFY_GENERIC,""expire""` invocations in other command processing funtions happen after command rewriting. I was trying to unify that. Examples:
1. https://github.com/redis/redis/blob/92bde124caaedef0e1572765854b2deb9aa22a35/src/t_string.c#L387
2. https://github.com/redis/redis/blob/92bde124caaedef0e1572765854b2deb9aa22a35/src/expire.c#L543"
594519435,8474,QuChen88,2021-03-15T17:02:59Z,"Setting expiry with absolute timestamp is not a new feature. People can already do that today. I am not sure if this change justifies adding a new user facing command. 

I still prefer us to handle the expiry replication as an internal mechanism inside redis that is done transparently from the Redis user"
594524557,8474,madolson,2021-03-15T17:09:18Z,A downside to changing it is it confuses the git history. I don't really care.
594549648,8474,ny0312,2021-03-15T17:41:13Z,Change to REPLICAOF
594570650,8474,ny0312,2021-03-15T18:08:12Z,Yes people can set expiry with absolute timestamps today. But they can't query them. Do you agree that it can be useful to query absolute timestamps outside of testing? 
595537064,8474,ny0312,2021-03-16T21:00:42Z,This transformation is only needed if `!absttl`
595842428,8474,oranagra,2021-03-17T09:23:12Z,"i'd vote to keep `ttl`. another possibility is to read it into an `ll` var, and then copy it into an `mstime_t ttl`, but it later changes from relative to absolute.
i suppose we can reduce the git diff and make it easier on the git log, since this rename doesn't really improves this function (the ttl is always in milliseconds in this command)"
595848426,8474,oranagra,2021-03-17T09:30:46Z,"i agree, it'll be easier to read if we move the `!absttl` condition we have below to wrap this whole block and avoid messing with the propagation if `absttl` is true."
595862726,8474,oranagra,2021-03-17T09:49:45Z,"i think this rename is unnecessary too (we should keep `when`), and note that there's possibility a duration where the variable holds seconds."
595864290,8474,oranagra,2021-03-17T09:51:46Z,"```suggestion
/* Implements TTL, PTTL, and EXPIRETIME */
```"
595875472,8474,oranagra,2021-03-17T10:06:42Z,"i don't think we need the TIME/PTIME variants.. i think this command can always just return milliseconds.
note that if we remove them, then like TTL and PTTL this command may some day become variadic.

we can always later add PEXPIRETIME (more consistent with TTL, PTTL, EXPIREAT, PEXPIREAT)"
595884424,8474,oranagra,2021-03-17T10:18:22Z,"technically, EXPIREAT doesn't block negative expire times (times before 1/1/1970), so I don't think EXPIRETIME should do that either.
This could mean that the check for `output_abs` should be moved to be with `expire != -1`, so that we skip the truncation of negative values below.

however, then we have a problem with the semantics of the command, returning -2 on non-existing keys and -1 on non-volatile keys.
maybe wanna give this new command different semantics, like returning an error in those cases, and a raw unixtime on success which could in theory be negative?

p.s. in theory negative values are non-observable since lookupKey will return NULL, in theory there could be a case where a propagated script that is received from the master, is executed on the replica and lookupKey returns an expired key, but even that can't happen since this command is marked with the `random` flag.

i'm not entirely sure what's the right thing to do here yet... waiting to hear other opinions and suggestions."
595955320,8474,oranagra,2021-03-17T12:07:30Z,"i'm in favor of adding that command (not as debug command).
Someone wanting to use DUMP and RESTORE, may want to use it instead of PTTL (to provide ABSTTL to RESTORE)"
595961879,8474,oranagra,2021-03-17T12:17:35Z,can you explain why you did that change?
595962744,8474,oranagra,2021-03-17T12:18:58Z,"i think these are more suitable to util.tcl rather than test_helper.tcl
(one of the benefits is that they can be used in the cluster tests one day)"
595969248,8474,oranagra,2021-03-17T12:28:24Z,"this sleep was in order to let the time pass (not in order to flush the AOF file). 
in fact, as soon as you got the reply for the last command you executed, this contents is already in the AOF file (`appendfsync always` isn't needed, it's about power-loss and kernel panics)

i suggest to drop the comment, and move that sleep to be just before that `debug loadaof` below."
595970915,8474,oranagra,2021-03-17T12:30:56Z,there's some indentation issue.
595972742,8474,oranagra,2021-03-17T12:33:53Z,"let's use `assert_equal` rather than `assert`.
the benefit is that when the assertion fails, the message contains the values.
also, let's convert this big block to a loop using KEYS, rather than a line per key."
595980885,8474,oranagra,2021-03-17T12:45:37Z,"please use `assert_euqal` here and below instead of `assert`.
the benefit is that when it fails, we can see the values."
596416627,8474,ny0312,2021-03-17T22:09:09Z,"I didn't take git history into account.

I can revert my ttl variable naming changes in this PR.

I still think it's worthwhile to unify how TTL variables are named across different places.

If we think `ttl` is better/sufficient. Should we want to change places like this too?

https://github.com/redis/redis/blob/92bde124caaedef0e1572765854b2deb9aa22a35/src/t_string.c#L76"
596421092,8474,ny0312,2021-03-17T22:18:31Z,Reverted
596421540,8474,ny0312,2021-03-17T22:19:28Z,"Done.

To clarify, I copy-pasted this variable name from:
https://github.com/redis/redis/blob/92bde124caaedef0e1572765854b2deb9aa22a35/src/t_string.c#L125

I'm changing there too."
596422094,8474,ny0312,2021-03-17T22:20:44Z,Done
596428409,8474,ny0312,2021-03-17T22:34:57Z,"I'm not entirely understanding the problem here.

My assumption is that Redis never stores a negative absolute timestamp into the expire dictionary. If `EXPIREAT/PEXPIREAT` is executed with a negative Unix timestamp, it will [result in the key being deleted](https://github.com/redis/redis/blob/92bde124caaedef0e1572765854b2deb9aa22a35/src/expire.c#L524), therefore not stored into the expire dictionary.

And since `EXPIRETIME` just simply returns what is stored in the expire dictionary, there is no legitimate case where it would return a negative value. Therefore it's safe to reserve `-1` and `-2` for error responses.

What am I missing?"
596430435,8474,ny0312,2021-03-17T22:39:06Z,"I see.

I was under the impression that OSS Redis prefers to limit the number of new commands, meaning if two commands essentially perform the same functionality, then we prefer to combine them.

`EXPIRETIME` and `PEXPIRETIME` are two commands that would be performing very similar functionalities. Are we sure we want to have two separate commands?

Btw, I think you meant to say `EXPIRETIME` should just always return seconds, since that is the unit `TTL` and `EXPIREAT` deal with.

I don't feel strongly either way. If we decide to implement two separate commands. I don't see why not implement both now."
596437591,8474,ny0312,2021-03-17T22:55:32Z,"With this change, `EXPIREAT` should never appear in AOF files. So I think we should adapt this test to test what's possible."
596443221,8474,ny0312,2021-03-17T23:08:57Z,"I put them here because their replication stream counterpart `read_from_replication_stream` and `assert_replication_stream` are in this file.

Moved."
596447092,8474,ny0312,2021-03-17T23:19:09Z,"Thanks for the info. I didn't realize that. Changed.

I added a comment to say this sleep is to ""let time pass"", to warn other uninformed people like me."
596448272,8474,ny0312,2021-03-17T23:22:38Z,Thanks for the info. I didn't know the difference. Done.
596450834,8474,ny0312,2021-03-17T23:29:24Z,Fixed
596452811,8474,ny0312,2021-03-17T23:35:20Z,Done
596769610,8474,oranagra,2021-03-18T11:27:03Z,"yes. we do wanna keep the number of commands low, and have commands that do similar things unified into one.
the main reason for that is that if we have two variants with some boolean flag difference between them (e.g. SET and SETNX), when we add another mutation (SETGET) we can end up with 4 commands, and if we add another one (SETKEEPTTL) we have 8.

so in that spirit, maybe one option is to deprecate `PTTL`, and change `TTL` to have `ABS` and `MS` arguments.
that would mean that TTL can never be made variadic.
for some reason i think that in this case i rather add `PEXPIRETIME` (and possibly `EXPIRETIME`, not a must) which will take no arguments and can later be made variadic.

i'm still not certain what's best here.
@yossigo @madolson WDYT?"
596771333,8474,oranagra,2021-03-18T11:28:45Z,"i guess it's just me.. being obsessed with the fact that negative unix times are valid values.
in redis, we don't store arbitrary dates in the past, just the future, so a valid negative timestamp would only happen if the machine's wall-clock is set to before 1/1/1970, in which case the key won't deleted on the spot by `checkAlreadyExpired`.
i guess this is not a valid use case for redis.

Till now in the API (commands) we mainly abused the values -1 and -2 for relative times, so that's ok either way (even if your clock is before 1970).
We do have that issue in `getExpire` too, work works with absolute times, but this is internal and can in theory be fixed one day.

So we need to realize that the semantics of this new command carves that in stone (API).
@yossigo @madolson WDYT?"
596772194,8474,oranagra,2021-03-18T11:29:37Z,"ohh, that's a good reason.
maybe one day we should move read_from_replication_stream too.
for now, i guess that we can keep the old one misplaced and the new one in the right place."
597046502,8474,madolson,2021-03-18T16:29:55Z,"My first choice was to extend TTL to have ```ABS``` and ```MS``` arguments, and deprecate the PTTL command. They all logically fit together, and I do think they are more of debugging commands and less for production workloads. I don't think there is much value in making the TTL command variadic, I can't think of a very compelling case for it. This issue of variadic commands keeps coming up though, so we probably want to figure out the best syntax for having flags + multiple key names.

My second choice was the current implementation, EXPIRETIME TIME|PTIME. I really think similar commands should be logically grouped together."
597064319,8474,madolson,2021-03-18T16:51:11Z,"I'm okay with blocking negative expires in Redis, I can't see a world where we would want to store them and return them."
597073382,8474,ny0312,2021-03-18T17:01:55Z,"I will defer to you folks making this decision. But I will leave my 2 cents here: `TTL ABS` is a bad choice. It's contradictory within itself. 

`TTL` means time-to-live. It's inherently a relative-time-based concept. The first sentence of its [current API doc](https://redis.io/commands/ttl) says:
```
Returns the remaining time to live of a key that has a timeout.
```

Adding a `ABS` option simply invalidates that sentence, and complicates the core purpose of this API."
597075069,8474,ny0312,2021-03-18T17:04:05Z,+1 for disallowing setting negative Unix timestamps with `EXPIRE/EXPIREAT/PEXPIRE/PEXPIREAT` altogether. 
597102197,8474,oranagra,2021-03-18T17:38:47Z,"you're right. 
In theory we can resolve that by making the new all purpose command named EXPIRETIME (will take ABS/TTL/MS arguments).
 
But maybe the most straight forward thing to do is add just a PEXPIRETIME command with no arguments and skip EXPIRETIME. "
597163097,8474,yossigo,2021-03-18T19:06:16Z,"I agree `TTL ABS` is confusing. I think having both `PEXPIRETIME` and `EXPIRETIME` makes sense:

* It's only a single extra command, not a matrix like in other cases
* More consistent with existing expiration family of commands
* Can be variadic (although I agree the value is not terribly high)"
597848893,8474,oranagra,2021-03-19T17:16:34Z,"I don't think we wanna change the behavior of existing commands in that case (return an error), but as we concluded above, we can assume negative values will never find their way into the expires dict. 
So I think the current code in this PR is fine in that regard. "
597985821,8474,ny0312,2021-03-19T21:32:48Z,Implemented `PEXPIRETIME` and `EXPIRETIME`
598925483,8474,ny0312,2021-03-22T17:22:26Z,Waiting for `1000` makes this test sometimes flaky on my slower local machine. Change it to without a timeout to de-flake it.
611164370,8474,zuiderkwast,2021-04-11T10:13:26Z,"In general, we don't want to change small things like these, except if it really improves the code. If there is no risk of confusion (or only a very small risk), I suggest keeping the old variable names."
546544569,8217,oranagra,2020-12-21T07:16:59Z,"```suggestion
    if (c->cmd) {
```"
546545119,8217,oranagra,2020-12-21T07:18:41Z,"why isn't `AUTH` (the first error) prefixed with `-`?
```suggestion
    } else if (!strncmp(s, ""AUTH"", 4) ||
               !strncmp(s, ""-NOAUTH"", 7) ||
               !strncmp(s, ""-WRONGPASS"", 10))
    {
```"
546546320,8217,oranagra,2020-12-21T07:22:42Z,"i would like to try to find a way to avoid there changes (gonna cause conflicts for other PRs).

one way is to group `microseconds`, `calls`, `failed_calls`, and `id` into a separate struct for runtime info. then we can init that entire struct with one `{}`, and we don't need to edit the declarative statement whenever a runtime variable is added.

but the above idea still means we need to edit it once (today),
let's try to think of a way.."
546549080,8217,oranagra,2020-12-21T07:30:45Z,"i don't see why we need this static struct and a fancy dict population function.
at the end of which, we have the error name in both the dict key, and again embedded inside it's value.

one other way is to drop this static table, and just have a 3 line population function that adds the 3 errors (3 calls to dictAdd), later using dictGetUnsignedIntegerVal to increment.
or is we need a struct with more than one integer, we can calloc it when calling dictAdd.

The way i see it, the justification for the command table population way, is when you have a lot of metadata to add to each item on creation, and you want it shown in the code in a ""declarative"" form. but in this case we don't have a metadata (it's initialized with 0)

another alternative is to not use dict at all, just an array with some enum as index to it.
the fact is, that currently, you're not looking up for an error that was given to you by the caller (which justifies a runtime lookup), you're only actually looking up an error which you know (at compile time) which one it is, so you can just use an enum as an index to the array.
this will not hold if we'll try to detect other types of errors in the future, in which case we'll need `lookupError` to only match the error prefix, and not the entire string."
546550813,8217,oranagra,2020-12-21T07:35:58Z,"in the current form, these are not needed, the lookup dict (if at all we keep it), can use a char* search rather than an sds search, and the char* can be a static string, not a heap allocation."
546577828,8217,oranagra,2020-12-21T08:44:50Z,"```suggestion
    if (!strncmp(s, ""-NOPERM"", 7)) {
```"
546942834,8217,madolson,2020-12-21T21:39:07Z,"Can we also just move the pointer one character in, we know the first character must be ""-"""
546943744,8217,madolson,2020-12-21T21:41:37Z,Can this function just increment the error? Not sure why we need to fetch it then increment it. 
546998812,8217,madolson,2020-12-22T00:24:34Z,"Also, isn't this duplicative of the ACL log?"
547035499,8217,filipecosta90,2020-12-22T02:42:40Z,fixed in last commit
547035649,8217,filipecosta90,2020-12-22T02:43:19Z,agree @madolson . changed in the latest commit
547038515,8217,filipecosta90,2020-12-22T02:53:49Z,"> why isn't `AUTH` (the first error) prefixed with `-`?

@oranagra due to ""AUTH"" error string not starting with `-`. The `-` is added afterwards but non included in the error string, within addReplyErrorLength() line `if (!len || s[0] != '-') addReplyProto(c,""-ERR "",5);` .
Noneteless if we follow the new approach this is accounted for..."
547038644,8217,filipecosta90,2020-12-22T02:54:26Z,@oranagra followed your advice and using a rax with a much simpler and future proof aproach. can you check it?
547205411,8217,filipecosta90,2020-12-22T10:46:26Z,Agree :) Will do that change - since yesterday we already had two conflicts =) ) 
547340987,8217,oranagra,2020-12-22T15:27:53Z,"ok, this means that the text ""AUTH"" which we matched against, is not the error code, it's just a part of the error text which happens to be uppercase.
i think it means we need to move `afterErrorReply` to be called in the different place, since it takes an error message, but it's no the final error message."
547341834,8217,oranagra,2020-12-22T15:29:15Z,"we have a plan for the future, but i'm also hoping to find a plan for now (would very much like to avoid these modifications)"
547368301,8217,oranagra,2020-12-22T16:16:33Z,"we do not want to **optionally** remove the spurious dash, this is in fact an indication that this method (`afterErrorReply`) is called in the wrong place, and given the wrong input (incomplete error message).
if we do that, the dash will always be present (and we can remove it, and even assert that it's there)."
547372445,8217,oranagra,2020-12-22T16:24:21Z,"i think you just need to discard the rax and create a fresh one.
this way the INFO response won't even show 0 values for errors that no longer happen."
547373788,8217,oranagra,2020-12-22T16:26:40Z,"you don't need to store the name inside the rax ""value"".
when iterating on the rax you get the key from the iterator.
considering my previous comments, the error code will always be uppercase. no need to mess with the character casing."
547379048,8217,oranagra,2020-12-22T16:36:49Z,"I think we can just omit that change for now, and it'll all pass.
it means that the last `0` which was the command `id` will now be stored into the new `failed_calls` and the last member (the `id`) will be implicitly initialized to 0 (which is ok).

i remember in the past that some compiler generated a warning on structs that were partially initialized but not fully initialized, but i see in the CI for `#8210` passes and we do use `-Werror`.
ideally that means we can trim the last 3 `0`, and not just avoid adding a 4th, but i don't wanna do that.

i'm planning another huge PR soon which will completely rewrite that whole command table array, so that's when i'll trim these."
547512213,8217,filipecosta90,2020-12-22T21:19:13Z,"@oranagra given that we check on the `info errorstats` string building if the error is 0 and don't print it (`if(e->count)`) shouldn't we keep the rax to avoid uncessary destroy and construction?

Sample output validating the above:
```
127.0.0.1:6379> auth 1
(error) ERR AUTH <password> called without any password configured for the default user. Are you sure your configuration is correct?
127.0.0.1:6379> info errorstats
# Errorstats
errorstat_auth:count=1
127.0.0.1:6379> config resetstat
OK
127.0.0.1:6379> info errorstats
# Errorstats
```"
547532859,8217,oranagra,2020-12-22T22:14:45Z,"yeah, you're right about the output. sorry,
well, many places in redis just discard the rax or dict and create an empty one in similar situation, i suppose it avoids keeping a lot of elements that are relics past traffic (in this case errors might no longer be seen again).
but i suppose there are not that may error types, so i guess we can go either way."
547542445,8217,filipecosta90,2020-12-22T22:43:28Z,@oranagra followed the suggestion and removed this changes ( it makes the PR a lot cleaner ) 
547554598,8217,filipecosta90,2020-12-22T23:24:23Z,fixed in the last commit and squash
547556109,8217,filipecosta90,2020-12-22T23:29:15Z,agree. fixed in the latest commit and squash. please see my latest comment
547715559,8217,oranagra,2020-12-23T06:41:43Z,"as much as i hate wasting lines on braces, this seems to be the style in redis
```suggestion
    if (s[0] != '-') {
        incrementError(""ERR"", 3);
    } else {
```"
547716932,8217,oranagra,2020-12-23T06:43:26Z,"we need to limit this search to `len`, but maybe also lower?
like `MIN(len,32)`?"
547717910,8217,oranagra,2020-12-23T06:44:41Z,"i suppose we need to have an `else`, either an assertion, or falling back to add `ERR` type error.
i think I would have been ok with an assertion, but then if i think of modules, maybe that's not wise."
547718834,8217,oranagra,2020-12-23T06:45:46Z,"i think we never expect this to be NULL, let i rather drop the `if` and let it crash if we're wrong.
```suggestion
        err->count=0;
```"
547720275,8217,oranagra,2020-12-23T06:47:32Z,just noting that this section is not included by default. i guess that's good.
547724747,8217,oranagra,2020-12-23T06:53:42Z,"let's replace that with `if (!c->count) continue;` so that we don't have the extra indentation.

styling: both the `if` and `while` above are missing a space (please search the rest of your (new) code and fix these (maybe grepping the diff file).

other personal taste styling:
* i don't like a multi-line action in an `if` without braces.
* i don't like statements that change execution flow (break, continue, return, goto) being in the same line together with the `if`. unless this is an error handling code that is heavily repeated, in which case i rather not waste too many lines on it, reducing the amount of the related code that fits in the screen."
547726099,8217,oranagra,2020-12-23T06:55:13Z,"these are not needed / used
```suggestion
```"
547730533,8217,oranagra,2020-12-23T07:00:22Z,"let's add a test that checks `-NOGROUP` and `-WRONGTYPE`, and an invalid command like `catch {r asdfasdf}`.
both are different classes of errors than the ones you tested.
i.e. one will have both `calls` and `failed_calls` showing `1`. and the other will show an error with nothing in the command table.

This attempt will immediately expose two facts:
1. some commands fail with an error without being executed, and others fail inside the command. maybe we want to distinguish between `failed_calls` and `rejected_calls` in the command stats? (we can do that in `call()`)

2. the problem which was discussed before, which is that many commands use a plain `addReply` to reply with an error, and we can't log these today.
the only way out that i can think of is to grep for `addReply(*,shared.*err);` and modify each of these to use a new `addErrorReply` or `addReplyErrObject`.
and even that's not enough since i see some places do funny things like:
```c
    addReplySds(c,
        sdsnew(""-WRONGTYPE Key is not a valid ""
               ""HyperLogLog string value.\r\n""));
```
if we do this, let's do that in a separate commit, so a reviewer (now or in the future) on your new code won't have to scan changes in all other files. (i.e. we won't squash-merge it)"
548026042,8217,filipecosta90,2020-12-23T15:56:12Z,fixed in the last commit. thank you for the explanation Oran. 
548026317,8217,filipecosta90,2020-12-23T15:56:48Z,"@oranagra given this is so ""cheap"" to compute and potentially a very usefull info I've added it as default. wdyt?"
548026453,8217,filipecosta90,2020-12-23T15:57:05Z,agree. fixed in the last commit
548026679,8217,filipecosta90,2020-12-23T15:57:38Z,fixed in the last commit ( added description to ensure who's reading the code know the max error prefix length used is 32
548030302,8217,filipecosta90,2020-12-23T16:05:57Z,"@oranagra with regards to the tests I've added the requested ones and now we have:
The added tests are divided as follow:
- **failed** call authentication error
- **failed** call NOGROUP error
- **rejected** call due to wrong arity
- **rejected** call by OOM error
- **rejected** call by authorization error

With regards to 1) accounting for rejected vs failure I've added a new flag to the command when we call `rejectCommand` or `rejectCommandFormat`, meaning if we reject a command it wont increment the failed counter. 

With regards to 2) I believe @madolson has already kicked off that effort on https://github.com/redis/redis/pull/8226 so we should push 2) there correct?

I believe all comments have been addressed. Can you check if the added changes make sense? Thank you both for reviewing this and pushing this feature forward. "
548054303,8217,madolson,2020-12-23T17:00:10Z,"This is slightly weird user behavior, since reset doesn't actually reset the table back to what it looked like at the start. I would free the table and create a new one, and set the explicit expectation that if an element is missing, it's never been seen. "
548054998,8217,madolson,2020-12-23T17:01:55Z,Do we intend to extend this? Otherwise it would be easier to just store the count in the rax. 
548055633,8217,madolson,2020-12-23T17:03:35Z,where does CMD_ERR_REJECTED get reset?
548085765,8217,filipecosta90,2020-12-23T17:48:03Z,you're totally right @madolson. I've fixed it and added a test to confirm it's working as expected
548092339,8217,filipecosta90,2020-12-23T17:55:43Z,@madolson I thought of it as wrapper struct for future requirements. 
548307148,8217,oranagra,2020-12-23T22:51:41Z,"i see the only section that's currently not part of the default is the commandstats, i don't suppose it's a matter of being cheap to generate (other parts are possibly more demanding), i think it's also about the verbosity and usefulness.
i suppose that in practice we'll never see here more than some 4 errors, but i'm not sure i'd say it's more useful than the commands stats.

let's leave this question open for later discussion."
548314906,8217,oranagra,2020-12-23T23:14:34Z,"sorry, i'm not able to catch up on my notifications lately, so i wasn't aware of that other PR.
i didn't review all your changes yet, but i do wee you addressed this comment.
the only things in this comment that are not addressed are:
* WRONGTYPE, which you can't address yet, until the other PR is merged, but also that's the reason i suggested the NOGROUP error, since it's already in the state today that the WRONGTYPE will be after the other PR is merged. so i guess we can skip that (or after the other PR is merged, replace the uncommon NOGROUP test with a simpler common WRONGTYPE test)
*  the unknown (asdf) command (which will leave a trace in the error stats, and not in the command stats). i think we should add it."
548320526,8217,oranagra,2020-12-23T23:38:21Z,"i think this function should only update the error stats, and not the command stats.
in theory a single command can reply with an array of errors (more than one error per call).

i think the right place to update the command stats, is at the end of `call()` and in `rejectCommand()`, both are nontenured to be executed only once per command execution.

this means that the new `CMD_ERR_REJECTED` flag you added isn't needed.
and instead you do need to be able to tell in `call()` that the command failed.
the way to do that can be to try to match a global error counter (much like it looks at changes in `server.dirty`). this new global error counter can also be useful as a general metric (put next to `stat_unexpected_error_replies`)

the only problem with this is nested command (Lua, Multi-Exec, and Modules).
we can probably solve it by adding (yet another server struct global) which we reset to the last global error counter, every time we ""log"" the error into some command."
548321118,8217,madolson,2020-12-23T23:41:27Z,"Okay, as long as that is intended, it's okay."
548323210,8217,oranagra,2020-12-23T23:50:31Z,"```suggestion
        } else {
            /* Fallback to ERR if we can retrieve the error prefix */
```"
548324331,8217,filipecosta90,2020-12-23T23:56:35Z,@oranagra with regards to the unknown command test just added it in the latest commit. 
548331177,8217,oranagra,2020-12-24T00:32:54Z,let's add it to the INFO STATS section
548331823,8217,filipecosta90,2020-12-24T00:36:06Z,"@oranagra @madolson I've followed the review suggestion and removed the added flag CMD_ERR_REJECTED and moved all command error log to processCommand+rejectCommand. Oran I'm checking within processCommand and not call so that we can check the initial error count and then after call or queing the command we can see if any error reply occurred. Given that rejectCommand/rejectCommandFormat return prior than call this will simplifies stuff and allows to differentiate rejected from failed. 
what do you guys think of this approach?"
548332156,8217,oranagra,2020-12-24T00:37:34Z,"this may need to be in `call()` not `processCommand()`.
let's try to think this though together.
when someone does:
```
MULTI
SET foo bar
LPUSH foo bla
EXEC
```
do we want the failure to be logged in LPUSH, EXEC, or both?
I think we only want it in LPUSH, so i think we need to move this block to `call`, but also add another global variable that will ""consume"" this diff in some way, so that EXEC will not show that error.
similar thing will happen for Lua and Modules doing RM_Call."
548642839,8217,filipecosta90,2020-12-24T17:31:17Z,added in the last commit
548645611,8217,filipecosta90,2020-12-24T17:35:34Z,"@oranagra I've added two tests for multi and lua to showcase that with the latest push we're properly setting the error on the right command and not having it shown on exec/eval,etc... 
Tests: https://github.com/redis/redis/pull/8217/files#diff-595bcf8dbabe8679a083b9f9480389d8526888760af5de2a6941c715c2a00d82R23
I'm basically checking if we're within a multi context or lua or module client and if so I'm restoring the error back to the original previous value given the failed counter it has already been updated on the real command as follow:
```c
const long long prev_err_count = server.stat_total_error_replies;
    updateCachedTime(0);
    start = server.ustime;
    c->cmd->proc(c);
    duration = ustime()-start;
    dirty = server.dirty-dirty;
    if (dirty < 0) dirty = 0;

    /* Update failed command calls if required */
    if ((server.stat_total_error_replies - prev_err_count)>0) {
        real_cmd->failed_calls++;
        /* If we're within a MULTI context or LUA or RM_Call
         * we don't propagate the error uppwards */
        if ( c->flags & CLIENT_MULTI ||
             c->flags & CLIENT_LUA ||
             c->flags & CLIENT_MODULE ) {
            server.stat_total_error_replies=prev_err_count;
        }
    }
```
what do you guys think?  
"
548665539,8217,oranagra,2020-12-24T18:04:11Z,"@filipecosta90 i had something else in mind. 
Note that the way you implemented it, the errors inside the multi will not be shown in the global error counter. 

What I thought of doing is store another global variable (possibly a static inside the function), which recalls the last value of the global error counter which was used to increment the command error counter, so that one increment of the global error counter can't increment a command counter of more than once..

maybe it's even enough to make the stack variable you added in `call` a static one. Then, we update it in the entrance to `call`, and check again it at exit (before we update it again). 
This way we never set back the global error counter, but we also never log the same error twice in nested commands. "
549044042,8217,filipecosta90,2020-12-26T23:54:53Z,"@oranagra I've followed you recommendation with regards to the static variable within `call` and added an extra test (rejected call within multi/exec). 
Apart from that also checking the server stat total_error_replies value. 
Can you check it?"
549073099,8217,oranagra,2020-12-27T06:40:58Z,"there's a method called `s` which does this:
```
[s total_error_replies]
```"
549073206,8217,oranagra,2020-12-27T06:42:42Z,"i think we better add a comment somewhere explaining the use of the static variable.
i.e. that it is used so that nested calls to `call` don't log the same error twice.
here is probably a good place."
549151150,8217,filipecosta90,2020-12-27T18:47:32Z,"thank you @oranagra, addressed in the last commit"
549152286,8217,filipecosta90,2020-12-27T18:59:19Z,@oranagra added the details on why we're required the static variable. please revise
549544207,8217,madolson,2020-12-29T02:18:41Z,style: space between && and !c->rejected_calls
549544221,8217,madolson,2020-12-29T02:18:45Z,"When can error ever be NULL? I don't see how it's possible, and it would be nice if we could remove it. "
549544438,8217,madolson,2020-12-29T02:20:09Z,style: space around '>'
549544691,8217,madolson,2020-12-29T02:22:15Z,style: * typically sticks with the variable name in Redis.
549546077,8217,madolson,2020-12-29T02:31:09Z,"e->count is always at least 1 if it's present, so this check should be unnecessary. "
549781482,8217,filipecosta90,2020-12-29T17:10:52Z,renamed to `incrementErrorCount`
549798340,8217,filipecosta90,2020-12-29T18:06:26Z,@madolson now fixed :)
551302461,8217,sundb,2021-01-04T12:58:52Z,"I have a question, why reset prev_err_count here."
551319931,8217,oranagra,2021-01-04T13:35:45Z,"this is why this variable exists:
```c
    /* Update failed command calls if required.
     * We leverage a static variable (prev_err_count) to retain
     * the counter across nested function calls and avoid logging
     * the same error twice. */
```

maybe it would have been nicer to move that reset line to right next to the place it is used (incrementing `failed_calls`)"
780951809,10061,yoav-steinberg,2022-01-10T07:47:20Z,"Some formatting issues:
1. The use of `\` to break lines in the code leads to extra spaces in the output.
2. No point in specifying the executable path here (`./`) this is probably wrong anyway.
3. Specify `yes` is a configuration value by quoting it.
Here's what I suggest (also for next change below):
```diff
diff --git a/src/aof.c b/src/aof.c
index 30ba38415..734b7aee6 100644
--- a/src/aof.c
+++ b/src/aof.c
@@ -1487,15 +1487,16 @@ uxeof: /* Unexpected AOF end of file. */
             }
         }
     }
-    serverLog(LL_WARNING,""Unexpected end of file reading the append only file %s. You can: \
-        1) Make a backup of your AOF file, then use ./redis-check-aof --fix <filename>.    \
-        2) Alternatively you can set the 'aof-load-truncated' configuration option to yes and restart the server."", filename);
+    serverLog(LL_WARNING,""Unexpected end of file reading the append only file %s. You can: ""
+        ""1) Make a backup of your AOF file, then use: redis-check-aof --fix <filename.manifest>. ""
+        ""2) Alternatively you can set the 'aof-load-truncated' configuration option to 'yes' and restart the server."",
+        filename);
     ret = AOF_FAILED;
     goto cleanup;
 
 fmterr: /* Format error. */
-    serverLog(LL_WARNING,""Bad file format reading the append only file %s: \
-        make a backup of your AOF file, then use ./redis-check-aof --fix <filename>"", filename);
+    serverLog(LL_WARNING,""Bad file format reading the append only file %s: ""
+        ""make a backup of your AOF file, then use: redis-check-aof --fix <filename.manifest>"", filename);
     ret = AOF_FAILED;
     /* fall through to cleanup. */
```
"
780954995,10061,yoav-steinberg,2022-01-10T07:54:26Z,"```suggestion
        printf(""The AOF manifest file %s doesn't exist\n"", am_filepath);
```"
780955094,10061,yoav-steinberg,2022-01-10T07:54:38Z,"```suggestion
            ""file %s for reading: %s\n"", am_filepath, strerror(errno));
```"
780957950,10061,yoav-steinberg,2022-01-10T08:00:16Z,What if this is the last line and has no trailing `\n`? Do we handle this?
780958620,10061,yoav-steinberg,2022-01-10T08:01:38Z,Do we support lines with leading spaces before the `#`? Do we support lines with a `#` at their end?
780959548,10061,yoav-steinberg,2022-01-10T08:03:27Z,"```suggestion
            err = ""Invalid AOF manifest file format"";
```"
780961330,10061,yoav-steinberg,2022-01-10T08:07:13Z,Consider using `strtoll` instead of `atoll` to gain error checking.
780961977,10061,yoav-steinberg,2022-01-10T08:08:30Z,Is a zero `ai->file_seq` not valid?
780962338,10061,yoav-steinberg,2022-01-10T08:09:10Z,"```suggestion
            err = ""Invalid AOF manifest file format"";
```"
780964511,10061,yoav-steinberg,2022-01-10T08:13:28Z,Seems like in some cases we don't free `ai`. But in general I think we can assume `exit(1)` cleans up open files and allocations before terminating the process and avoid all these cleanups.
780965379,10061,yoav-steinberg,2022-01-10T08:15:09Z,"Can't we assume the sequence always grows by 1?
```suggestion
            if (ai->file_seq != maxseq+1) {
```"
780967342,10061,yoav-steinberg,2022-01-10T08:19:04Z,"```suggestion
            printf(""If you insist, please delete all files after this file according to the manifest ""
```"
780967630,10061,yoav-steinberg,2022-01-10T08:19:39Z,"```suggestion
            printf(""Failed to truncate AOF %s to timestamp %ld to offset %ld because it is not the last file.\n"",
```"
780967843,10061,yoav-steinberg,2022-01-10T08:20:02Z,"```suggestion
                ""file and delete the corresponding records in manifest file manually. Then re-run redis-check-aof.\n"");
```"
780969010,10061,yoav-steinberg,2022-01-10T08:22:11Z,Maybe add `strtol` error handling (via `endptr`)?
780974635,10061,yoav-steinberg,2022-01-10T08:31:51Z,"No need for all these `fclose()` cleanups since we're `exit()`ing right after. I'm not strictly against this, but then I suggest we'll be consistent and clean up all allocations too."
780975509,10061,yoav-steinberg,2022-01-10T08:33:21Z,"```suggestion
            printf(""RDB preamble of AOF file is invalid, aborting.\n"");
```"
780976386,10061,yoav-steinberg,2022-01-10T08:34:30Z,"```suggestion
            printf(""Failed to fseek in AOF %s: %s"", aof_filename, strerror(errno));
```"
780982944,10061,yoav-steinberg,2022-01-10T08:42:45Z,"Why `""r+""`? Don't we just want to read the file: `""r""`."
780983546,10061,yoav-steinberg,2022-01-10T08:43:18Z,"```suggestion
    FILE *fp = fopen(filepath, ""r"");
```"
780985470,10061,yoav-steinberg,2022-01-10T08:45:09Z,Error checking for `strtol`.
781010119,10061,chenyang8094,2022-01-10T09:22:09Z,OK
781014274,10061,chenyang8094,2022-01-10T09:27:09Z,"Each line of the manifest is generated by `redis`, and `redis` guarantees that each line ends with `\n`, so I think that no matter which line (including the last line) does not end with `\n` is a format error."
781015260,10061,chenyang8094,2022-01-10T09:28:39Z,"We only support like this:

```
# Some annotations
file appendonly.aof.1.base.rdb seq 1 type b
# Some annotations
file appendonly.aof.2.incr.aof seq 2 type i
# Some annotations
# Some annotations
```"
781018847,10061,yoav-steinberg,2022-01-10T09:33:54Z,I'm not totally convinced. Users may create/edit the manifest files manually and miss the last line feed. @oranagra WDYT?
781019188,10061,chenyang8094,2022-01-10T09:34:22Z,"Yes, `file_seq` start  with 1"
781020614,10061,yoav-steinberg,2022-01-10T09:36:29Z,"First, in the context of manifest files (not AOF files) these are more ""comments"" and not ""annotations"", right? Also I guess for now this is OK, perhaps we'd like to improve this in the future, but I guess as long an we'll be backwards compatible it'll be ok. Again, @oranagra WDYT?"
781023848,10061,chenyang8094,2022-01-10T09:40:51Z,OK
781025216,10061,chenyang8094,2022-01-10T09:42:36Z,OK
781029377,10061,chenyang8094,2022-01-10T09:48:18Z,"Yes, I think we need to leave room for manifest to expand, I think allowing `# `to appear is a method similar to using annotation in AOF.

BTW It would be fine if we used it as a comment, like explaining the meaning of the file below, although we don't currently do that."
781030460,10061,chenyang8094,2022-01-10T09:49:50Z,"This log is currently consistent with that in `aof.c`. I think that if we want to change it, we also need to modify` aof.c`. Are you sure we need to do this?"
781039856,10061,chenyang8094,2022-01-10T10:02:12Z,"I think this worry is superfluous. If we can't guarantee and establish an inherent file format, then I think a lot of our code needs to deal with this kind of case heavily, such as the user deletes the `\n` in a line in the middle. I think our current code is able to detect and handle this error."
781183313,10061,chenyang8094,2022-01-10T13:18:51Z,"I see what you mean, we do need to do this technically. However, what I want to say is that AOF, including manifest, is generated by `redis` (such as the timestamp here), and we don't want anyone to change these contents, otherwise he should be responsible for this behavior. I tried looking for `strtol` usage in existing `redis` code and I found almost no error checking anywhere, I don't know if this is intentional or not. Anyway, I added error checking here."
781187996,10061,chenyang8094,2022-01-10T13:25:13Z,"Agree, but what I  say is that i wanna say this code has been around for a long time."
781189413,10061,chenyang8094,2022-01-10T13:27:06Z,I add `zfree(ai)` here to  suppression sanitizer false positive. (tested in aof.c)
781190162,10061,yoav-steinberg,2022-01-10T13:28:05Z,All these logs are new to the multi-part-aof feature. It's just that the English isn't correct and sounds a bit weird. I'm for fixing it in all places. @oranagra?
781191833,10061,chenyang8094,2022-01-10T13:30:18Z,Removed fclose(fp);
781192506,10061,yoav-steinberg,2022-01-10T13:31:10Z,In _config.c_ we do such error checking. In other places we use `string2ll()` which has its own error checking. I suggest you look in _config.c_.
781198435,10061,chenyang8094,2022-01-10T13:39:06Z,"OK, thanks."
781224160,10061,chenyang8094,2022-01-10T14:11:30Z,"In theory you are right, but I don't want to add such a strong limit here, because we just load the corresponding files in order according to the instructions of the manifest, and the increasing order is guaranteed to ensure that we can get a maximum value. 
Too restrictive means less scalability later."
781663263,10061,chenyang8094,2022-01-10T23:59:05Z,modified.
781799963,10061,yoav-steinberg,2022-01-11T06:54:08Z,"```suggestion
        ""1) Make a backup of your AOF file, then use ./redis-check-aof --fix <filename.manifest>. ""
```"
781801479,10061,yoav-steinberg,2022-01-11T06:57:34Z,What about checking endptr?
781812895,10061,chenyang8094,2022-01-11T07:23:12Z,"Since the buf here is not a c string terminated with `'\0'`, I am not sure if we are going to use `*endptr != '\r' `to judge."
781814594,10061,chenyang8094,2022-01-11T07:26:25Z,Added
789100806,10061,oranagra,2022-01-20T19:49:04Z,"why do we need the 30 constant?
we're matching the string `file`, let's just make sure that we can read as much..
maybe better add a space, i.e. make sure the file has at least 5 chars, read them and make sure they match `file `"
789102415,10061,oranagra,2022-01-20T19:51:33Z,just want to ask and make sure this was tested? i.e. single file with rdb header and aof tail.
789104583,10061,oranagra,2022-01-20T19:54:39Z,"there could be a case of a multi-part (manifest) AOF, in which the base file is an old (after upgrade) file, with RDB header and AOF tail.
looks like you're not handling the AOF tail here.

please also make sure to test it."
789111562,10061,oranagra,2022-01-20T20:05:03Z,"let's denote that `multi` is an out variable.
either name `out_multi`, or add some top comment about the args and return value.

p.s. overall this file is / was in a bad shape, please add some comments on function and big code blocks explaining what they do"
789112326,10061,oranagra,2022-01-20T20:06:18Z,"btw, why did you have to refactor this function (and deal with the complexity of an output var for the `multi`?
isn't it easier to leave it as it was?"
789114397,10061,oranagra,2022-01-20T20:09:24Z,"please add a top comment explaining what it does.
what the return value means and in which cases it exists rather than return.
please do a similar thing to other functions"
789117156,10061,oranagra,2022-01-20T20:13:40Z,"why did you have to copy all that parsing logic here?
let's find a way to re-use the one in aof.c

it would be wrong for us to have two copies of this code.
e.g. a bug is fixed in one and left in the other.

we do already have such cases with redis-check-rdb and redis-check-aof.. let's at least avoid adding more of them.
"
789119546,10061,oranagra,2022-01-20T20:17:23Z,"unrelated to this line. let's be sure to extend the tests to test all the AOF variations that we could be facing.
i.e. just test the happy path of:
1. single preamble aof with rdb head and aof resp tail
2. single old style resp aof (no rdb header)
3. manifest file with resp aof base
4. manifest file with rdb aof base
5. manifest file after upgrade, with base that's an rdb with aof tail"
789123050,10061,oranagra,2022-01-20T20:22:51Z,"not sure i care much, and in any way i commented that i wanna see that entire function gone from here.
generally i'd agree with Yoav, if the file is a plain text file, we better assume people may edit it and correctly handle these edits (even if they are bad ones).

IIRC Yossi thought so too, when we changed the parsing logic to be a loop that can handle the `file`, `seq`, etc argument at any order, and not just at the order in which we emit them."
807567642,10061,chenyang8094,2022-02-16T06:03:21Z,OK，Maybe I'm being too cautious
807581180,10061,chenyang8094,2022-02-16T06:20:31Z,"Yes, tested.

```
Start checking Old-Style AOF
[offset 0] Checking RDB file /Users/chenyang/MyWork/alibaba/Redis/myredis2/appendonly.aof
[offset 27] AUX FIELD redis-ver = '6.0.15'
[offset 41] AUX FIELD redis-bits = '64'
[offset 53] AUX FIELD ctime = '1644992594'
[offset 68] AUX FIELD used-mem = '1064992'
[offset 84] AUX FIELD aof-preamble = '1'
[offset 86] Selecting DB ID 0
[offset 119] Checksum OK
[offset 119] \o/ RDB looks OK! \o/
[info] 3 keys read
[info] 0 expires
[info] 0 already expired
RDB preamble is OK, proceeding with AOF tail...
AOF analyzed: filename=/Users/chenyang/MyWork/alibaba/Redis/myredis2/appendonly.aof, size=200, ok_up_to=200, ok_up_to_line=20, diff=0
AOF /Users/chenyang/MyWork/alibaba/Redis/myredis2/appendonly.aof is valid
```"
807585788,10061,chenyang8094,2022-02-16T06:26:09Z,"Yes, you are right."
807595099,10061,chenyang8094,2022-02-16T06:38:03Z,OK
807601602,10061,chenyang8094,2022-02-16T06:51:38Z,OK，i will add this tests.
807606828,10061,chenyang8094,2022-02-16T07:02:10Z,"Indeed, I am also struggling with this issue. In `aof.c`, the `aofLoadManifestFromDisk` function has no parameters, and it will automatically construct the real path of the manifest according to `server.aof_dirname `and `server.aof_filename`. Then, in `redis-check-aof`, we will directly specify the path of the manifest file, which prevents me from directly reusing the `aofLoadManifestFromDisk` code.

two options:
1.Parse the incoming manifest path, and set the path part and the file name part to `server.aof_dirname` and `server.aof_filename`, which may be a pity, but I think it's a bit complicated.   
2.Refactor the `loadManifestFromFile` function in `aof.c` , split it into two functions `aofLoadManifest(void)` and `aofLoadManifestFromFile(char *filename)`, `aofLoadManifest` internally constructs the path based on `server.aof_dirname` and `server.aof_filename` and passes it to `aofLoadManifestFromFile`, so that the `aofLoadManifestFromFile` function can also be directly reused in `aof-check-aof.c`.

i prefer 2, @oranagra WDYT?
"
807608012,10061,chenyang8094,2022-02-16T07:04:24Z,OK
807650148,10061,chenyang8094,2022-02-16T08:10:20Z,Already updated PR as per 2
807658838,10061,chenyang8094,2022-02-16T08:22:21Z,"I think the previous implementation is unreasonable. What I can remember is that in the original code, the `readAnnotations` function will use the while loop to read the annotations continuously until it finds that the following is not an annotation, and then uses `fseek` to go back to the previous position.

A more reasonable approach is that the outer caller is responsible for judging the type of the AOF line and calling the corresponding processing function according to the type. If the line starts with `*`, use `processRESP`, if it starts with `#`, call `readAnnotations`. Maybe in the future we will have other annotation types so it will be very easy for us to add a `readXXXAnnotations`.

There are other reasons, I can't remember exactly, probably some kind of hurdle in supporting the truncation of multi part aof files."
808205946,10061,oranagra,2022-02-16T16:34:12Z,"i'd rather these have a uniform prefix
```suggestion
    AOF_RESP,
    AOF_RDB_PREAMBLE,
    AOF_MULTI_PART,
```"
808207896,10061,oranagra,2022-02-16T16:35:41Z,the part about MULTI causing increment is repeated twice.
808581870,10061,chenyang8094,2022-02-17T01:01:48Z,Fixed
808582276,10061,chenyang8094,2022-02-17T01:02:44Z,OK
786280331,10127,guybe7,2022-01-17T20:41:55Z,"i think a better API would be:
```
struct redisCommand *lookupSubcommand(struct redisCommand *container, const char *sub);
```"
786280524,10127,guybe7,2022-01-17T20:42:33Z,this is unused
786280885,10127,guybe7,2022-01-17T20:43:36Z,"i think we should have a function that just returns `sdscatfmt(sdsempty(), ""%s|%s"", parent_name, sub_name)`"
786281158,10127,guybe7,2022-01-17T20:44:26Z,"we can create the fullname and then give it to this function, instead of freeing the non-fullname later"
786391095,10127,enjoy-binbin,2022-01-18T03:25:46Z,"All done, the second commit:
- change function `moduleCreateCommandProxy` take `sds fullname`
- add `catSubCommandFullname` function do the `sdscatfmt(sdsempty(), ""%s|%s"", parent_name, sub_name)` thing
- some typos, `setImplictACLCategories` -> `setImplicitACLCategories`, `stracture` -> `structure`
- add `lookupSubcommandByFullname` / `lookupSubcommand` functions
- remove `getFullCommandName` dead function and `populateSingleCommand` dead code"
786623299,10127,guybe7,2022-01-18T10:41:36Z,maybe add a comment that this function takes ownership on `fullname`
786627896,10127,guybe7,2022-01-18T10:47:22Z,"we have an odd situation where non-subcommand have `const char *` and subcommand have `sds`
I suggest changing `fullname` to be `sds` (and call `sdsnew` in `populateCommandStructure`)

this will also help in removing some of the implicit casting done (mostly in module.c)
also, we can change some `sdsnew` to `sdsdup`
"
787406040,10127,sundb,2022-01-19T07:17:33Z,Why not use `addReplyBulkCBuffer`?
787409430,10127,enjoy-binbin,2022-01-19T07:24:09Z,"ohh.. right i forget this one, yes i can use it"
787765011,10127,guybe7,2022-01-19T13:52:22Z,why not addReplyBulkSdsNoFree?
787765605,10127,guybe7,2022-01-19T13:53:03Z,"generally speaking, i think i prefer if all places that iterate commands would use a recursive function instead of copying the logic... @oranagra WDYT?"
787765874,10127,guybe7,2022-01-19T13:53:20Z,also here
787776154,10127,oranagra,2022-01-19T14:04:24Z,"i think that if i'ts just a matter of calling one or two functions or some simple `if`, then there's no problem copying it.
if there's a lot of logic, then we should avoid repeating it, and instead add a function to do that, or use a recursion.
bottom line, each case for itself IMHO."
787784837,10127,sundb,2022-01-19T14:13:39Z,"Not sure it's worth making a copy of the same code for nofree sds, addreplyBulkCBuffer has been used extensively elsewhere in the code to avoid sds being freed."
787859197,10127,guybe7,2022-01-19T15:20:51Z,"1. maybe rename to `moduleFreeCommand`
2. i think a nicer API would it look something like:

```
void moduleFreeCommand(redisModule* module, struct redisCommand *cmd) {
    // return if we don't need to free this command, based on comparing stuff with the `module` arg
    // free stuff
    if (subcommands) {
        // for sub in subcommands: call moduleFreeCommand + delete from subcommands_dict
    } 
}
```

and the caller, which iterates` server.commands` will be in charge of deleting all the non-subcommand from  `server.command` and orig_commands"
787867340,10127,guybe7,2022-01-19T15:28:38Z,"i think we should have a `const char *declared_name` in the declarative part of `struct redisCommand` which comes from the structs in command.c and `sds fullname` in the run-time filled part

it's a bit dangerous that there's some amount of time when `fullname` is actually a `const char*`"
787871136,10127,guybe7,2022-01-19T15:32:21Z,"in order to save the redundant `sdsnew` and `sdsfree` maybe we should initialize the fullname outside of `populateCommandStructure`..? not sure about this, leaving it for you to decide"
787872470,10127,guybe7,2022-01-19T15:33:44Z,`fullname` here should be an `sds`
787873240,10127,guybe7,2022-01-19T15:34:30Z,good catch
788071171,10127,oranagra,2022-01-19T19:27:32Z,"ohh, now i see what you mean, it's not about extracting the code that handles one command, but rather extracting the loop that runs on a dict, and thus the dict iteration code can be shared.
well, i agree it'll make the code a bit cleaner (and mess up the blame log a bit).
i guess it's worthwhile."
788080819,10127,oranagra,2022-01-19T19:41:55Z,"i think it should be nice that we have a `declared_name`, so if we need just the sub-command name, we can get it without starting to split strings."
788086208,10127,oranagra,2022-01-19T19:49:55Z,"we now have some inherent waste here (both in memory, and speed).
i.e. we're hashing and matching the parent command name twice, once for the outer dict and once for the inner one.
maybe we rather go back on that?"
788088966,10127,oranagra,2022-01-19T19:53:52Z,"i'd rather just match a few of these than the entire list.
don't wanna update it every time a new command is added to the category."
788092009,10127,oranagra,2022-01-19T19:58:16Z,"not that it matters a lot, but it'll maybe be stronger to make sure we don't match zacl|helper.
i see in some cases we wrap the command name with `'`' and in others we don't (so ` `), so if we wanna do that, we need to either make them uniform, or match each error to the right form.
```suggestion
        assert_match ""*wrong number of arguments * acl|help"" $e
```"
788092646,10127,oranagra,2022-01-19T19:59:11Z,"again, let's match a few.
i don't wanna update the test every time a new one is added."
788093836,10127,oranagra,2022-01-19T20:00:57Z,this one could also easily break when we add some new command that start with `cl` and has a help
788096275,10127,oranagra,2022-01-19T20:04:49Z,"i don't recall the details here.
did you figure it out?"
788096889,10127,oranagra,2022-01-19T20:05:46Z,"very good you did that.
did valgrind pass?"
788541745,10127,enjoy-binbin,2022-01-20T09:09:04Z,"yes, so wanted to go back? that is, the **key** is the subcommand **declared_name**
i think now we can go back it with the new `declared_name` field and `fullname` field`.
@guybe7 please ack
```
i think that the command name is always the full name (also in the ubcommand_dict)
to clarify, the word ""rewrite"" from CONFIG REWRITE should never appear anywhere by itself, it should always be saved as ""config|rewrite""
```"
788550873,10127,enjoy-binbin,2022-01-20T09:17:30Z,"I'm continuing the Guy's style... in other thought, when a new command add, 
we can know that this part will fail, and can fix it, then prove that the test is working...
```
// introspection-2.tcl
    test ""COMMAND LIST FILTERBY PATTERN"" {
        set reply [r command list filterby pattern pf*]
        assert_equal [lsort $reply] {pfadd pfcount pfdebug pfmerge pfselftest}
    }
```

yes, i can change them both to do the  partial matches"
788552190,10127,enjoy-binbin,2022-01-20T09:18:48Z,"yes, it passed. i also wanted to do that in every module test. WDYT?"
788570343,10127,oranagra,2022-01-20T09:35:47Z,"it's less likely that new commands starting with `pf` will be added, so i'm fine with that one."
788571325,10127,oranagra,2022-01-20T09:36:34Z,"i guess it can't harm, if you have the energy.."
788572974,10127,enjoy-binbin,2022-01-20T09:37:54Z,"I want to unify them, which one would you prefer, with or without `'`
forgive it. i see many places may need to be changed, I choose `right form` way."
788577612,10127,oranagra,2022-01-20T09:42:28Z,"i guess all these places are already modified once we changed `name` to `fullname`...
i guess the one with `'` is preferred"
788768056,10127,guybe7,2022-01-20T13:34:37Z,"ack (let's have decalred_name which comes from commands.c. it will not be used, except to build `fullname`)"
788923213,10127,enjoy-binbin,2022-01-20T16:14:22Z,"It sometimes fails on my machine, sometimes it doesn't
I haven't had time to take a look yet, can remove it later"
788925250,10127,enjoy-binbin,2022-01-20T16:16:23Z,"I tried it, it seems like a lot of leak in sanitizer.... I can check it out tomorrow (no rush)"
788938882,10127,guybe7,2022-01-20T16:30:24Z,debug print
788945164,10127,guybe7,2022-01-20T16:36:58Z,"i think that module commands should have declared_name = NULL.
moduleCreateCommandProxy should take only `fullname`"
788946275,10127,guybe7,2022-01-20T16:38:09Z,"the subcommand dict should have the fullanme as keys, not the sub_name
(there's used to be `lookSubcommandByFullanme` - where is it?)"
788947451,10127,guybe7,2022-01-20T16:39:24Z,"lookupSubcommand can take a `const char *` (because it calls dictSdsKeyCaseCompare which uses `strcasecmp`. @oranagra is that on purpose or something we want to fix. on the one hand, it means we can lookup using a `char*` ut on the other hand the compare functions calculate the length at O(N))

so no need to create `sds sub_name`"
788950175,10127,guybe7,2022-01-20T16:42:17Z,"for example, here you use the fullname... lets' assert that dictDelete returns DICT_OK

also in `moduleUnregisterCommands`"
788952115,10127,guybe7,2022-01-20T16:44:23Z,"generally speaking, and maybe i'm wrong, but I think `declared_name` should be used only in `populateCommandTable` and `populateCommandTable`"
788955387,10127,guybe7,2022-01-20T16:47:48Z,"also this function can be a one-liner:
```
return dictFetchValue(container->subcommands_dict, sub_name);
```
but maybe it shouldn't even be a function? when we bring back `lookSubcommandByFullanme` the only place we need to search by sub_name is in `lookupCommandLogic` and then we don't even need a function..."
788958717,10127,guybe7,2022-01-20T16:51:26Z,"maybe it's time to have
```
addReplyErrorArity(client*);
addReplyErrorExpireTime(client*);
```"
788972907,10127,guybe7,2022-01-20T17:07:06Z,why? in the past we testes that COMMAND LIST returned exactly those 3 commands
789553041,10127,enjoy-binbin,2022-01-21T10:47:09Z,"i thought in here, we agree to use the `declared_name` as the subcommand dict key?
https://github.com/redis/redis/pull/10127#discussion_r788086208"
789719764,10127,guybe7,2022-01-21T14:48:30Z,this function should take `const char *sub_name` and not rely on `subcommand->declared_name`
789720938,10127,guybe7,2022-01-21T14:49:55Z,please go over all references to subcommands_dict and see that we always use sub_name
789721726,10127,guybe7,2022-01-21T14:50:52Z,"yes, I'm sorry, I misunderstood.

i've deleted/updated some of my comments"
789802355,10127,enjoy-binbin,2022-01-21T16:24:44Z,"The hash function `dictSdsCaseHash` use the `sdslen`. maybe we still need the `sds sub_name`?
```
dictEntry *dictFind(dict *d, const void *key)
{
    dictEntry *he;
    uint64_t h, idx, table;

    if (dictSize(d) == 0) return NULL; /* dict is empty */
    if (dictIsRehashing(d)) _dictRehashStep(d);
    h = dictHashKey(d, key);

uint64_t dictSdsCaseHash(const void *key) {
    return dictGenCaseHashFunction((unsigned char*)key, sdslen((char*)key));
}
```"
789811813,10127,enjoy-binbin,2022-01-21T16:33:02Z,"> i think that module commands should have declared_name = NULL.
> moduleCreateCommandProxy should take only fullname

what do you think if we have `declared_name` that store the `sds sub_command` in module command.
which mean `moduleCreateCommandProxy` will take another `sds sub_name`
then in `dictDelete(cmd->subcommands_dict, sub_name);`, we can use it. otherwise we need to split the fullname"
789813611,10127,guybe7,2022-01-21T16:34:38Z,"yes, you're right

so you can ignore this comment"
789819654,10127,guybe7,2022-01-21T16:40:33Z,"good idea!

so:
1.`sds fullanme` is always and sds and it contains the fullname
2. `const char *declared_name` is a `const char *` for native commands and `sds` for module commands. it contains the sub_name (which is just the full name for non-subcommands)

and the signature is:
```
// takes over declared_name and fullname
RedisModuleCommand *moduleCreateCommandProxy(struct RedisModule *module, sds declared_name, sds fullname, RedisModuleCmdFunc cmdfunc, int64_t flags, int firstkey, int lastkey, int keystep)
```
right?"
789822560,10127,enjoy-binbin,2022-01-21T16:43:42Z,yes. I have a local version that is written like this
789856323,10127,enjoy-binbin,2022-01-21T17:20:41Z,reverted it...
789859807,10127,enjoy-binbin,2022-01-21T17:25:05Z,"please check my last five commit.. hope there will be no other problems this time :)
btw, thanks for your patience and the all explanation and the reviews"
789860626,10127,enjoy-binbin,2022-01-21T17:26:13Z,i handle it in https://github.com/redis/redis/pull/10127/commits/74810de580798658d209ec7c204d61fb04fba869 and https://github.com/redis/redis/pull/10127/commits/ada89a1d6719c8ea2aa683e2d007d34d5dab6019
790136831,10127,oranagra,2022-01-22T12:16:52Z,"seeing 55 changed files in this PR makes me think maybe we went too far (specifically with uniform error message campaign, which isn't a real issue, so it may be an unnecessary blame log destruction).

in any case, first, let's revert this unnecessary newline change."
790138141,10127,oranagra,2022-01-22T12:34:18Z,"i see we sometimes iterate on the subcommands_dict and other times we iterate on `subcommand` until we see a null `fullname`.
i suppose the later is wrong (will probably be incompatible with modules)."
790138590,10127,oranagra,2022-01-22T12:37:22Z,"FYI, there's no need for a markdown compatible doc comment in this one since it's not an API, so not exported to the docs.."
790139281,10127,oranagra,2022-01-22T12:45:34Z,"it's not only the top/bottom and file that changed, it's also no loner hard coded.
how about:
```c
/* Populates the Redis Command Table dict from from the static table in commands.c
 * which is auto generated from the json files in the commands folder. */
```"
790140421,10127,oranagra,2022-01-22T12:58:56Z,"why did you add that? isn't it implicit?
same comment about few lines below.."
790140574,10127,oranagra,2022-01-22T13:01:04Z,"rather than string matching, i rather convert it to a list, and look up an element."
790140755,10127,oranagra,2022-01-22T13:02:51Z,"same here. let's convert to a list, and then look into it.
also, let's add one negative check to make sure it doesn't actually return all commands."
790140809,10127,oranagra,2022-01-22T13:03:35Z,"why do we need this test? isn't the test below sufficient?
i.e. we're testing the infrastructure, not all possible commands and categories."
790141100,10127,oranagra,2022-01-22T13:07:44Z,let's add one negative check (for a command that should not be here)
790141131,10127,oranagra,2022-01-22T13:08:04Z,let's add one negative check
790141242,10127,oranagra,2022-01-22T13:09:05Z,"if we would have emitted only the second one, the first one would still be hit.
let's convert this to a list and do a lookup into it."
790141530,10127,oranagra,2022-01-22T13:12:54Z,"same comments as elsewhere, let's use a list and a negative check"
790162683,10127,enjoy-binbin,2022-01-22T17:13:38Z,"Yes... I watch it get bigger day by day, mix too much cleanup..  reverted it"
790162875,10127,enjoy-binbin,2022-01-22T17:15:36Z,"yes, I noticed it too, but didn't think much about it, it's been updated."
790162995,10127,enjoy-binbin,2022-01-22T17:16:43Z,I thought module documentation needed to be written like this... already simplified it..
790163064,10127,enjoy-binbin,2022-01-22T17:17:22Z,took it!
790163301,10127,enjoy-binbin,2022-01-22T17:19:47Z,"i reverted it.. yes, it is implicit (embarrassing cleanup)"
790163337,10127,enjoy-binbin,2022-01-22T17:20:03Z,using lsearch
790166220,10127,oranagra,2022-01-22T17:41:43Z,"there's a file in `src/modules/gendoc.rb` that generates https://redis.io/topics/modules-api-ref
it takes the comments above RM_xxxx functions"
790170141,10127,oranagra,2022-01-22T18:20:44Z,"why do we need the `split`? it returns an array, which tcl converts to a list.
i see that in other tests below you didn't use it... why here?"
790217797,10127,enjoy-binbin,2022-01-23T03:57:13Z,"weird, last night, before the `split` or the `trim`, the `lsearch` can not lookup the element.
so i thought it is some kind of tcl things...(like that one i want to store the result in a var)
now it is ok. i must be not very awake before going to bed and do something wrong."
686960409,9356,madolson,2021-08-11T15:50:26Z,"It would be nice if created a little bit more structure for this data:
```
struct clusterEntryMetadata {
    dictEntry *prev;
    dictEntry *next;
}

size_t dictEntryMetadataSize(dict *d) {

    return server.cluster_enabled ? sizeof(clusterEntryMetadata) * 2 : 0;
}
```

Then when referencing it, `(((dictEntry **)dictMetadata(de))[0])` becomes `((clusterEntryMetadata *) dictMetadata(de))->prev`
"
686972382,9356,madolson,2021-08-11T16:04:31Z,All of these function names are now a bit wrong since you are passing in a dictEntry and not a key (Which is kind of key). I wonder if maybe we should make an alias like `keyHandle` that we can use instead of dictEntry to improve clarity?
686978289,9356,madolson,2021-08-11T16:12:01Z,"lazyfreeFreeSlotsMap(It's up at the top of this file) is dead code now, so please clean it up"
686993166,9356,JimB123,2021-08-11T16:30:54Z,"The original declaration was `char metadata[]` which signifies an arbitrary number of bytes.  The new declaration is essentially the same, except that it indicates an arbitrary number OF POINTERS.  

For this feature, you are using pointers, but in the general case, this metadata is arbitrary, and not necessarily pointers.  Pointers on a 64-bit machine are 8 bytes each, yet the metadata size is specified in bytes.  (However, we know that the heap allocator will round up the allocation to a multiple of 8 bytes.)

I think that maybe you were getting compiler errors which would be better resolved by changing the macro for accessing the metadata.  Like this:

```C
// OLD - this returns a ""char*"" which points to the address of the start of the metadata
#define dictMetadata(entry) (&(entry)->metadata)

// NEW - this returns a ""void*"" which points to the address of the start of the metadata
#define dictMetadata(entry) ((void*)&(entry)->metadata)
```
I think this is a better solution as `char metadata[]` better describes something that is counted in bytes.  Yet `dictMetadata` should be returning a pointer to some unknown data (not `char*`)."
687005461,9356,JimB123,2021-08-11T16:47:40Z,"This should be refactored into 2 separate functions.  Indications:
* Almost the entire code is different, based on a boolean flag.
* In every place where this is called, the boolean flag is hard-coded."
687006434,9356,madolson,2021-08-11T16:48:55Z,"Makes sense, they do have less in common then they used to."
687007680,9356,JimB123,2021-08-11T16:50:46Z,"Also, given that this is called from 1-line routines which are already separate, we already have the routines to refactor into.  This function should be removed, and code simply added to `slotToKeyAdd` and `slotToKeyDel`."
687015526,9356,zuiderkwast,2021-08-11T17:01:43Z,"Yes, and I'd prefer to keep the char array, and the NEW version is what you had in the original dictMetadata macro. The only reason I changed from `char metadata[]` to `void *metadata[]` is that I got a warning/error ""dereferencing type-punned pointer will break strict-aliasing rules"" on build-ubuntu-old (and another build, which I think is using some old GCC version) when casting the `char metadata[]` as `(dictEntry**)(void*)entry->metadata`. I get the same warning with and without the middle `void*` cast, so changing the macro from OLD to NEW doesn't make any difference here.

The GCC version seems to dislike casting char array to void pointer, but it seems any pointer can be cast to char array without problems (as we do when we call memset on the metadata after allocation). If you have another solution to this, I'm happy to change back to char array.

Note: Even if it's now a `void* metadata[]`, it's still possible to use it as an arbitrary number of bytes and cast it to `char*` when using it (even though it seems wrong)."
687016379,9356,zuiderkwast,2021-08-11T17:02:46Z,"Will do. It's only called in slotToKeyAdd and slotToKeyDel, so I'll put the implementation in each of these. Edit: There's some lag before I see your messages, apparently. :-)"
687020310,9356,zuiderkwast,2021-08-11T17:08:43Z,Good point. Aliasing the dictEntry as keyHandle (typedef?) can be confusing though. Maybe we can rename the function to slotToEntryAdd?
687022000,9356,zuiderkwast,2021-08-11T17:11:10Z,Will do.
687506493,9356,zuiderkwast,2021-08-12T08:36:23Z,"I have `char metadata[]` in another branch (one commit added: https://github.com/zuiderkwast/redis/commit/858f55fb3bb4250173a4c3f291625733751bdeff), so you can see what fails in this build: https://github.com/zuiderkwast/redis/runs/3309598271."
687946228,9356,JimB123,2021-08-12T17:28:27Z,"I think the compiler is warning that `char[]` is not inherently aligned (it's aligned to a multiple of 1).  When we cast to a pointer (even when trying to misdirect the compiler with `void*`) it knows that the `char[]` is not 8-byte aligned.

In our case, we know that it's aligned because the data is placed immediately after another pointer.  So the code should work safely, though the compiler warning is certainly annoying.

I've seen some suggestions to create a union.  The union would server to force alignment with the unioned type.  But I agree that this looks messy.

The cleanest option might be the one you proposed `void *metadata[]`.  By making it an array of pointers, the compiler knows that the array is aligned.  If this is the case, I think it deserves a comment.  Something like:
```
// an arbitrary number of characters, starting at a pointer-aligned address
```

One thing that I'm not sure about is if this warning would get generated for other types given an array of pointers.  For instance, if we define:
```
typedef struct clusterDictEntryMetadata {
    int32_t intval;    // a 4 byte int
    // (the compiler will insert 4 bytes of padding here)
    dictEntry *prev;            /* Prev entry with key in the same slot */
    dictEntry *next;            /* Next entry with key in the same slot */
} clusterDictEntryMetadata;
```
Does this now generate an error when we try to access `intval`?

"
688104111,9356,zuiderkwast,2021-08-12T21:41:16Z,"Thanks for digging into this @JimB123. It make sense that it's an alignment related problem and that newer GCC versions correctly finds that it's already pointer aligned. Another possibly is that type-punning is simply allowed on a `void*` by C99 so the compiler just has to accept it.

I tried to add an int32_t member as you said and there's no build warning. Here's the branch: https://github.com/zuiderkwast/redis/tree/try-non-pointer-sized-member-in-pointer-aligned-dict-entry-metadata

[Edit] ... and I'll add the comment on `void *metadata[]`"
688145341,9356,JimB123,2021-08-12T23:20:04Z,I'm ok with the change then.  A comment should clarify what's going on.  Your proposal seems like the simplest solution.
688232781,9356,madolson,2021-08-13T04:20:37Z,We can probably just get rid of async to this function since it doesn't matter.
688292763,9356,zuiderkwast,2021-08-13T07:07:24Z,Good. I tried `union { char bytes[]; void *pointers[] } metadata;` too but it's not allowed to have arrays without size in a union.
688428527,9356,oranagra,2021-08-13T11:00:36Z,"i'd expect somewhere to describe this (a bit hackish) solution in detail, but at the very least, let's add a comment here.
i.e. something like ""the head of a linked list dictEntries (of keys) in each hash slot""."
688432427,9356,oranagra,2021-08-13T11:08:24Z,"i think we should eliminate this function entirely, and just add the loop in the one place that calls it.
the current implementation is very wasteful since it copies the string to an `robj` and then copies it again to the output buffers (lost of excess malloc and memcpy calls).

note that in the distinct past the reply buffers where robj, so there was no excess memcpy, but IIRC starting with redis 4.0 (or maybe 3.2) we initially changed that to sds, and later to plain buffers."
688434424,9356,oranagra,2021-08-13T11:12:17Z,"maybe we could have used stack based string object (wrapping the existing sds)?
i suppose it can cause issues for modules that will get a notification with that stack based object (unless they already use the new RM_HoldString)
WDTY?"
688435806,9356,oranagra,2021-08-13T11:14:58Z,maybe a reference to to `clusterDictEntryMetadata` will help?
688436413,9356,oranagra,2021-08-13T11:16:09Z,"i see it is described in `dictEntryMetadataSize`, maybe a reference here to `clusterDictEntryMetadata` will help?"
688444519,9356,zuiderkwast,2021-08-13T11:32:25Z,"Maybe, but it seems to be some work to investigate it. I'll have a quick look. The old code also created an robj from an sds key, so this would be an orthogonal change, i.e. probably leave it for another PR."
688472067,9356,oranagra,2021-08-13T12:23:42Z,"yeah i noticed that was already the case, and as i noted, the change carries some implications.
i suppose we better leave that for another PR anyway (because of the implications)."
688474571,9356,zuiderkwast,2021-08-13T12:27:48Z,"I think the ""Slot to Key API"" section in db.c would be a good place to document it in detail. How about moving this section (including the function slotToEntryAdd, etc.) to cluster.c and the struct clusterDictEntryMetadata to cluster.h?"
688480494,9356,oranagra,2021-08-13T12:37:20Z," i'm ok with moving them.. we need to decide if that part is more about the database or about the cluster.
but note that `dbBackup` also has a similar reference.
maybe we can extract some interface and remove that coupling.
maybe we wanna try to remove the `include ""cluster.h"" in db.c and see where it takes us...
i'm not sure.."
688498753,9356,zuiderkwast,2021-08-13T13:06:20Z,"If I move these functions to cluster.c, we definitely need cluster.h in db.c..."
689908096,9356,zuiderkwast,2021-08-16T22:44:55Z,"I've moved the slot-to-key API to cluster.c and the dict metadata struct to cluster.h. In db.c, only calls the slot-to-key API are used. The dbBackup struct now contains a `clusterSlotsToKeysData` which is a struct defined in cluster.h, to decouple it a bit more."
689910937,9356,zuiderkwast,2021-08-16T22:51:03Z,Done.
956203745,11193,madolson,2022-08-26T16:17:44Z,"I presume the main functionality of this call is to unpause the clients if there is no traffic, but the comment indicates the opposite."
956210414,11193,madolson,2022-08-26T16:26:30Z,"My understanding is we want to avoid evictions if we have a background jobs running. If we are over max-memory here, we are still going to evict on `performEvictions()`. I was almost expecting this call to be in `performEvictions` so we could set the pause and bail."
956623778,11193,moticless,2022-08-27T21:08:26Z,The main functionality of this function is to throttle (pause-unpause) clients-write operation during OOM. Maybe It should be named `ThrottleClientWritePauseDuringOOM`. Maybe you have a better name?
956623811,11193,moticless,2022-08-27T21:08:36Z,"Function `ClientWritePauseDuringOOM()` calls to `pauseClients()` which already take care to the low level details of pausing evictions properly. That is, later on the flow, function `performEvictions()` calls at start to `isSafeToPerformEvictions()` which calls to `checkClientPauseTimeoutAndReturnIfPaused()` which returns 0 because earlier `pauseClients()` was called, That is not safe to perform evictions, and flow of function `performEvictions()` ends without doing any evictions."
959332472,11193,oranagra,2022-08-31T08:53:41Z,"pausing them in serverCron is probably insufficient.
beforeSleep may be better (sooner), but might not be sufficient either.
if we want to avoid excessive eviction or OOM errors, the pausing needs to be done per command, which i see you do handle, so i suppose this is just needed for unpause.
still maybe we need to do it in both beforeSleep (sooner) and serverCron (in case there's no traffic)

or maybe we need to revive the condition we just deleted from lazyfree.c and let it trigger the unpausing?"
959340212,11193,oranagra,2022-08-31T09:00:04Z,"ok, it's a little odd since it **is** safe to perform evictions.
i.e. the **safe** part is about not emitting anything to the replication stream.
but wording aside, i guess the outcome would be the correct one.
i.e. the eviction will get skipped, and this command (if it's a write command) will get paused instead of processed (handled later in processCommand)."
959342242,11193,oranagra,2022-08-31T09:02:05Z,"i'm not certain we want a config for that (even if enabled by default).
why would anyone ever want to turn it off?"
959347138,11193,oranagra,2022-08-31T09:07:09Z,"i don't think we wanna use redis-benchmark to populate the database for tests (unless we test redis-benchmark).
we have the TCL based `populate` function, and we can improve that if needed."
959361037,11193,oranagra,2022-08-31T09:20:47Z,"i'm paranoid about these tests being flaky.
maybe we can write a specific test using two clients and one command in each in some way?
e.g.using (`KILL -STOP`) and some other tricks.."
959425295,11193,moticless,2022-08-31T10:31:38Z,"Doing pause-unpause per command will block main thread to serve other clients. 
Maybe have it called from beforeSleep and serverCron?"
959430887,11193,moticless,2022-08-31T10:38:47Z,Maybe I change the function name to `isPerformEvictions()`
959431972,11193,moticless,2022-08-31T10:40:06Z,Because of a bug? Maybe hide it from the user?
959436208,11193,moticless,2022-08-31T10:45:28Z,I think the missing features and performance between redis-benchamark and populate is too big. 
959439567,11193,moticless,2022-08-31T10:49:43Z,"I let it run on two platforms for 1000 iterations. 
Let's give it a try and see if it holds."
960437650,11193,oranagra,2022-09-01T09:38:51Z,"i'm still afraid. when that test runs in parallel to other tests, it could happen that the one that was supposed to produce a lot of evictions didn't produce many, and the other one wasn't affected, but still had a race and produced a few, and the factor is less than 4x."
960581184,11193,moticless,2022-09-01T12:16:25Z,Added to beforeSleep()
960581557,11193,moticless,2022-09-01T12:16:51Z,removed client-pause-write-during-oom
960582095,11193,moticless,2022-09-01T12:17:25Z,simplified test. Please review again test.
1003248668,11193,oranagra,2022-10-24T12:21:55Z,getMaxmemoryState needs to be checked against C_OK / C_ERR (don't rely on the fact C_OK is 0)
1003251724,11193,oranagra,2022-10-24T12:25:22Z,"come to think of it, we can remove the serverCron one, since after a cron timer wakeup, we go through beforeSleep anyway."
1003257925,11193,oranagra,2022-10-24T12:32:22Z,"i rather revert that rename (the name you suggested seems like it has grammar problems).
but let's add a comment here that mentions:
1. if we initiated a pause then isSafeToPerformEvictions will prevent the eviction in the later call
2. if we initiated a pause, and this is a write command, it'll get postponed later in processCommand."
1003261024,11193,oranagra,2022-10-24T12:35:42Z,"i think it should be renamed to `PAUSE_OOM_THROTTLE`
1. we can't say we throttle without mentioning what's the throttle. e.g. imagine in the future we'll have multiple throttles, each one needs to controlled separately.
2. the fact we throttle writes is a different argument to the pause function (we have a purpose and an action)
"
1003272117,11193,oranagra,2022-10-24T12:47:18Z,"i think it's better to populate the db before setting the memory limit, then measure how much we consumed, and then set the memory limit accordingly.
this way, if redis some day becomes more (or less) memory efficient, it won't cause issues for this test."
1003273893,11193,oranagra,2022-10-24T12:49:10Z,let's also look at `[s errorstat_OOM]` counter.
1003275504,11193,oranagra,2022-10-24T12:50:48Z,"can you maybe record (in the PR top comment?), the metrics (evicted, OOM, and benchmark throughput) of this test with and without the feature?"
1016698915,11193,oranagra,2022-11-08T14:24:21Z,please add the `needs:config-maxmemory` and fix indentation to 4
1016823821,11193,madolson,2022-11-08T15:58:43Z,"```suggestion
static void clientWritePauseDuringOOM() {
```"
1017412414,11193,guybe7,2022-11-09T04:19:11Z,should be uncommented?
1017413607,11193,guybe7,2022-11-09T04:22:26Z,isn't the one in processCommand enough? why do we need one in beforeSleep?
1017488757,11193,moticless,2022-11-09T06:47:20Z,The commit-suggestion is identical. What do I miss?
1017491585,11193,moticless,2022-11-09T06:49:29Z,"Please read the comment:

>  In comment to avoid flakiness (left for manual testing)"
1017501069,11193,moticless,2022-11-09T07:00:01Z,"This logic is also related to `performEvictions()` logic. 
We want to have rather updated state before reaching eviction phase.
I could have remove it but I preferred to be on the safe side and add
another checkpoint.   "
1017556702,11193,oranagra,2022-11-09T07:56:09Z,lower case `c` in front.
1017557990,11193,oranagra,2022-11-09T07:56:51Z,it took me a whole minute to spot it too... we're both blind to that nuance 8-)
1020883346,11193,oranagra,2022-11-13T11:07:25Z,"if someone calls CONFIG RESETSTAT during the time this is active, it can cause this block to re-enter, but i think this would be still safe."
1020889972,11193,oranagra,2022-11-13T11:56:39Z,"i don't think i understand this extra `if` you added.
is it an optimization to avoid calling isPausedActions multiple times later?
please explain and maybe add a comment.

p.s. i think the core in relation to `is_may_replicate_command` is wrong.
the `is_may_replicate_command` should limit the `WRITE`.
and `is_denyoom_command` should limit the DENYOOM one. "
1020890115,11193,oranagra,2022-11-13T11:57:31Z,i think we wanna add the `current` variant too (not only the `total` one)
1020890503,11193,oranagra,2022-11-13T12:00:22Z,"let's make it `static inline`. or maybe even move it back to the C file, we don't have any inline functions in server.h at the moment."
1020919358,11193,moticless,2022-11-13T15:16:29Z,optimized common case. Added comment. thanks.
1020919528,11193,moticless,2022-11-13T15:17:33Z,Fixed `is_denyoom_command` condition. now it is checked without may_replicate.
1020919575,11193,moticless,2022-11-13T15:17:50Z,ok
1020919755,11193,moticless,2022-11-13T15:18:49Z,"Returned it back as regular function to networking.c, next to related functions."
1020926949,11193,oranagra,2022-11-13T16:08:29Z,"let's make the order consistent across lines.
```suggestion
             (isPausedActions(PAUSE_ACTION_CLIENT_WRITE) && is_may_replicate_command) ||
             (isPausedActions(PAUSE_ACTION_CLIENT_DENYOOM) && is_denyoom_command))) {
```"
1022389004,11193,oranagra,2022-11-15T07:06:00Z,"i'm not a fan of the new `init_flow`, and even if we proceed with it, i suppose we need to patch a few other stat variables.
correct me if i'm wrong, but it seems to me that this RESETSTAT didn't have a real negative impact on your code.
i.e. it would zero current_client_paused_oom_time, causing us to start a new measurement next time we get here, so it doesn't have any negative impact on the stats.

the unexpected impact is that we'll call `pauseActions` again (even though we're already paused), but that also doesn't have any negative impact, right?
ohh, the risk is that if right after RESETSTAT we realize we need to drop the pause, we won't call unpauseActions.
maybe the right solution is to separate between the decision on when we should call pauseActions and unpauseActions from any code related to the metrics?"
1022448643,11193,moticless,2022-11-15T07:55:50Z,"IMO, just because RESETSTAT can be  risky and can be called from two, very different flows, I feel it is the right thing to reflect it in its function declaration with `init_flow` flag rather than hide it and have ""clean and optimistic picture"" of it. Adding another argument might complicate a rather simple logic."
1022748323,11193,oranagra,2022-11-15T12:49:35Z,"i think resetServerStats is doing exactly what it should do (clear a bunch of variable).
i might not mind the extra argument, but i don't like the complicated logic inside that function.
the problem here is that we bind other logic (calling `unpauseActions`) to a stat variable.
i think that's the root of this issue."
1023942452,11193,oranagra,2022-11-16T12:39:56Z,"i'm sorry for trolling you, but i now realize that resetting stat_current_client_paused_oom_time in RESETSTAT would cause stat_total_client_paused_oom_time to later jump to a huge number.

i suppose these metrics need to be completely decoupled from the `if` that decides if we want to pause, and instead depend on the eventual state (like we do in evict.c and defrag.c).

p.s. we previously didn't have the is_pause_write_clients_oom variable, and relied on the quick exit in pauseActions / unpauseActions when the state doesn't change, maybe we can keep doing that?"
1024949596,11193,moticless,2022-11-17T09:32:01Z,Don't be sorry. You are doing holy job. I simplified evaluation stat_total_client_paused_oom_time. lmk if you still have any issues. Thanks.
1029125821,11193,oranagra,2022-11-22T10:09:01Z,did we switch from monotonic clock to wall clock?
1029128297,11193,oranagra,2022-11-22T10:11:14Z,"i don't think it's a good idea to sum milliseconds rather than microseconds.
it's ok to report in msec, but the summing should be in usec so we don't lose precision "
1030275361,11193,moticless,2022-11-23T10:36:14Z,"Since this value is being used  only for statistics, i prefered inaccuracy and save execution time.  
I feel uncomfortable to ""pollute"" top level of `struct redisServer`. I think we should think how to break it down. 
I will rollback my commit. 

I assume when you say ""separating the if that decides which action to take,  from the if..."" you mean follow the pattern identify the state and ""goto update_metrics;"" "
1030280197,11193,moticless,2022-11-23T10:41:02Z,in my mind was the issue that it is only being used for statistics at most. I will change it.
1030522464,11193,oranagra,2022-11-23T14:36:57Z,"yes, let's first decide on the action to take (start or stop pause).
and then, separately update the statistics, this is what we do in the other similar stats, and AFAICT it doesn't break on RESETSTAT."
1030627985,11193,oranagra,2022-11-23T16:08:13Z,"do we really need all that fancy enum and goto?

can't we just add something defrag.c does the bottom (instead of return):
```c
is_paused = getPauseActionsPurposeEndTime();
if (is_paused) {
    if (!stat_current_client_paused_oom_time)
        elapsedStart(&stat_current_client_paused_oom_time)
} else if (stat_current_client_paused_oom_time) {
    stat_total_client_paused_oom_time += elapsedUs(stat_current_client_paused_oom_time);
    server.stat_current_client_paused_oom_time = 0;
}
```

i think it's simpler since that piece of code is independent and doesn't rely on any hints from above.
i don't see any major issues with RESETSTAT (unlike your code, after reset, if pause is in effect, it'll start measuring immediately and not on next pause).
and the bonus is that it's similar to the other mechanisms, so it's behavior is less likely to surprise anyone."
1031135680,11193,moticless,2022-11-24T07:31:06Z,Cool. Please note that your code avoid early return in favor of updating statistics soon after RESETSTAT.
1036303980,11193,oranagra,2022-11-30T18:18:00Z,"this text is a bit complicated and has some grammar issues.. i can try to simplify later, adding a note so that we don't forget.

p.s. let's mention why we don't remove the read handler right away (syscall overhead)"
1036304340,11193,oranagra,2022-11-30T18:18:24Z,"styling, single line `if` has the `{` on the same line."
1036358838,11193,oranagra,2022-11-30T19:21:06Z,"doesn't that limit all clients, not just ones that have been paused?
i.e. we don't throttle read commands, so we shouldn't block them or remove their read handler.
the only clients which we want to remove read handler for are ones that we decided not to process."
1036361444,11193,oranagra,2022-11-30T19:23:28Z,"not sure what are the test suite changes that came with the last commit.
seems like WIP. but i guess that eventually, we want to add a test that challenges that (and explodes if we didn't remove the read handler)"
1036486182,11193,moticless,2022-11-30T22:04:59Z,i will try to rephrase it 
1036492943,11193,moticless,2022-11-30T22:12:45Z,"you are right... i wanted to talk with you about this change. In case there is query_buf that grows 
behind some threshold I think it is safer to block it early on, even before processing a complete
command (read or write). The alternative of letting query_buf grow without any limit (during OOM) 
might be too risky. Note that before this PR, in case of FLUSHALL SYNC, during OOM or not, no
client could have write to the server. "
1036883751,11193,moticless,2022-12-01T09:34:48Z,please review new commit. the explanation there might reflect my thought.
1037516035,11193,oranagra,2022-12-01T20:03:50Z,"please be aware of #11012, @ranshid FYI."
1037530290,11193,oranagra,2022-12-01T20:23:44Z,"reading your updated comment, still wonder.
so you say you remove the read handler for the `!BLOCKED`, because you wanna affect the ones that are gonna get blocked, earlier, before they manage to consume a big qbuf, but by that, you also affect reads, and PUBLISH, etc.

secondly IIRC, the reason why we wanted to remove the read handler was because we were afraid that in some cases the write command throttling can actually cause damage, e.g. a case where a pipeline of small SETs overwriting the same key again and again (not really consuming memory), will get blocked, and then the query buffer will grow (because of the combination of pipeline and our blocking).
i.e. we wanted that qbuf protection so that our throttling won't backfire on us.

lastly, IIRC you argued that in previously (before this PR), FLUSHALL would be completely blocking anyway, so this mechanism of throttling some reads, can't be considered a regression, i suppose that's right, but also it may not provide the full potential of this improvement.

Maybe we should focus on PUBLISH, since it's more likely to have a large query buffer than reads.
on the other hand, the real memory impact of PUBLISH, is actually not the query buffer, it's the output buffers it creates (which is amplified by the number of subscribers)."
771954261,9963,oranagra,2021-12-19T14:03:02Z,"please add a documentation comment above the API.
maybe rename it to `RM_SlowContextHeartbeat` (i.e. like the existing `RM_SendChildHeartbeat`)?
i.e. something more abstract.
@guybe7 @MeirShpilraien WDYT?"
771954331,9963,oranagra,2021-12-19T14:03:46Z,let's add some comment about these fields (what they are used for)
771954500,9963,oranagra,2021-12-19T14:05:02Z,"would be better to init this when the context is created rather than the first call.
let's merge it after #9890, it'll be easier.

i think we'll be able to do with just one variable (`next_event`), which will be set to `script_time_limit` when the context is created."
771954748,9963,oranagra,2021-12-19T14:07:13Z,"`blockingOperationStarts` should only be called once (on the first time we get here.
and then `blockingOperationEnds` should be called when the context is destroyed."
771954997,9963,oranagra,2021-12-19T14:08:49Z,"please get the latest from unstable, and add these flags to the json files instead."
771955186,9963,oranagra,2021-12-19T14:10:11Z,"i think you should revert these changes, and add a 3rd error message that's specific to modules."
771956499,9963,oranagra,2021-12-19T14:21:08Z,"First, this is very wrong (modifying the command flags, permanently), as soon as it is called with some argument.

but anyway, you'll soon be able to revert this change, since this is handled properly in #9872 (i.e. it allows the entire SHUTDOWN command, and the command itself does the rest of the filtering)"
771956725,9963,oranagra,2021-12-19T14:22:52Z,"since this is now specific to modules, let's call it `busy_module` (should be set as soon at the timeout is reached, and remain set until the context is destroyed)"
771957198,9963,oranagra,2021-12-19T14:26:28Z,"it's a little bit odd to see it in the ""list"" test module.
maybe putting it in the timer module is less awkward?"
771957414,9963,oranagra,2021-12-19T14:27:50Z,"let's set `script-time-limit` to a low number, so that this test will not take long"
771957600,9963,oranagra,2021-12-19T14:29:55Z,"maybe we can add some timing, to see that we didn't get here too soon?"
771957711,9963,oranagra,2021-12-19T14:30:50Z,i'd rather have a wait_for_condition to wait for a PONG rather than a constant sleep (which can also cause failure in case of timing issues).
774014660,9963,perryitay,2021-12-22T16:25:27Z,@oranagra  blockingOperationEnds should happen in moduleFreeContext ?
774018844,9963,oranagra,2021-12-22T16:31:39Z,"i think so.. but maybe it's more complicated than that when there are nested contexts?

i.e. the two typical cases i was thinking of are simple commands called by RedisModuleCommandDispatcher (will respond with -BUSY), and about contexts during the `rdb_load` callback (should respond with -LOADING.

but maybe there are also cases to think about with regards to other more complex scenarios.
i think you can use moduleFreeContext for now, and let's ask @guybe7 and @MeirShpilraien to have a look."
774056695,9963,perryitay,2021-12-22T17:31:51Z,"@oranagra  I'm not sure I understand, we want to see the busy error... 
what do you mean by timing ?  "
774157606,9963,oranagra,2021-12-22T20:21:43Z,"something like this, to measure time, and see that it's bigger than the script-time-limit we've set
```
set start [clock clicks -milliseconds]
set elapsed [expr [clock clicks -milliseconds]-$start]
```"
774195935,9963,guybe7,2021-12-22T21:47:41Z,"we need to remember that this function can be reentrant: a module command module.foo calls this API, while another module command module.bar is allow-busy and is waiting to be processed
when it is finally processed here, it also calls this module API"
775874174,9963,perryitay,2021-12-28T12:01:41Z,"@oranagra, wdyt ? "
775954388,9963,oranagra,2021-12-28T15:15:03Z,"i guess we should do the unblocking when in `moduleFreeContext` when `server.module_ctx_nesting` goes back to 0.

p.s. maybe we should forbid calling these APIs from threads (`REDISMODULE_CTX_THREAD_SAFE`)?
or maybe there's actually an advantage to let modules handle events in long blocking GIL locks from threads?
(i feel sick by just raising that idea).
@MeirShpilraien ?"
776028076,9963,MeirShpilraien,2021-12-28T18:31:34Z,@oranagra I think there is a bug advantage of allowing it from a `ThreadSafeCtx` maybe on `ThreadSafeCtx` we can call `blockingOperationStarts` and `blockingOperationEnd` from the lock and unlock functions? Also notice that `blockingOperationStarts` and `blockingOperationEnd` already handled nesting so maybe there is no need to check `server.module_ctx_nesting`
776030898,9963,oranagra,2021-12-28T18:40:54Z,"LOL ""bug advantage"". Exactly my thoughts. 

Anyway, just calling the starts / stops methods isn't gonna do anything. And we certainly don't wanna call the new (processEvents) API automatically (it'll start rejecting commands). 
And we can allow calling the new API in thread safe contexts, and after a while it'll start processing events."
780930635,9963,guybe7,2022-01-10T07:09:13Z,"""another module command"""
780931168,9963,guybe7,2022-01-10T07:10:42Z,please move to the end or beginning of the function (currently it's in the middle of lines that are logically related)
780931372,9963,oranagra,2022-01-10T07:11:14Z,"technically, it'll also permit these module commands to run while there's a blocked script.
am i wrong?"
780931533,9963,guybe7,2022-01-10T07:11:38Z,"""another module command or a script"""
780931916,9963,guybe7,2022-01-10T07:12:39Z,use underscores
780932247,9963,guybe7,2022-01-10T07:13:38Z,maybe add a comment explaining this behavior 
780932616,9963,guybe7,2022-01-10T07:14:40Z,please use one external `if (--server.module_ctx_nesting == 0)` and two internal `if`s
780933778,9963,guybe7,2022-01-10T07:17:46Z,"let's go with ""Permit the command while the server is blocked either by a script or by a slow module command""
I feel it's important to document the scenarios in which this flags matters "
781103136,9963,yossigo,2022-01-10T11:15:52Z,"Modules are not always user-controlled, unlike scripts, so I think it may not always make sense to the user to get this error message. Instead, I think it might be useful for a module to control the reply in this case."
781108621,9963,yossigo,2022-01-10T11:24:19Z,"I think some of the terms here are confusing - I propose to name this `RM_Yield`.

What exactly is a `SlowContext`? We didn't define this anywhere. And `Heartbeat` is usually used to describe a process where one tells another it's still alive - but this is not the case here (it's not *required* to call this function)."
781121426,9963,oranagra,2022-01-10T11:44:50Z,"ok, so it should be an argument to the RM_Yield API?
should it also control the error code? or just the textual message?
(note that currently the error code could be either LOADING or BUSY depending on the server state)"
781781457,9963,madolson,2022-01-11T06:06:36Z,"```suggestion
            if (!server.core_propagates)
```"
781783218,9963,madolson,2022-01-11T06:11:29Z,I also like the name RM_Yield()
781783466,9963,madolson,2022-01-11T06:12:06Z,"I don't understand the coupling with `script-time-limit`, can't the module decide how it's yielding to the main thread. It seems like there is a couple of different types, so maybe we can add some type of flags to the RM_Yield call."
781784026,9963,madolson,2022-01-11T06:13:50Z,"I might be missing something, but this only ever seems to be set, but never used."
784883754,9963,oranagra,2022-01-14T14:26:03Z,it is used in RM_Yield in order to decide when is the next time to call processEventsWhileBlocked
784886043,9963,oranagra,2022-01-14T14:28:51Z,"i rather not let the module decide that. and indeed the name of the config is a problem.
maybe we can add an alias for it.
or actually, it already has an alias (was `lua-time-limit` in the past, and now it's `script-time-limit`).
maybe we can find a better name that can cover both modules and scripts?
how about `busy_operation_threshold`?"
785947268,9963,yossigo,2022-01-17T12:24:51Z,@oranagra It makes sense. maybe `busy-reply-threshold`?
785950550,9963,yossigo,2022-01-17T12:27:45Z,"I don't like the fact that passing a null `busy_reply` will *sometimes* assert (only if we hit the code path to actually produce that reply).

I suggest to either use a default, assert here instead, or maybe just have `RM_Yield` return an error."
785963513,9963,yossigo,2022-01-17T12:38:08Z,This can be removed now I guess.
785963859,9963,yossigo,2022-01-17T12:38:24Z,"```suggestion
    *slowevalerr, *slowscripterr, *bgsaveerr,
```"
786129964,9963,oranagra,2022-01-17T15:54:23Z,"i'll use it as a default.. i was actually paranoid about somehow reaching that code that uses it when in_busy_module is still true, and somehow already out of the scope of RM_Yield."
786153734,9963,oranagra,2022-01-17T16:26:31Z,"i don't like it that much, but i think i like the alternatives even less.
updating the PR with a rename"
786459432,9963,soloestoy,2022-01-18T06:59:12Z,"I don't like the title, too many commands can block redis for a long time like `KEYS` `FLUSHALL` event `DEL` `HGETALL` on a big key. But the threshold only works for FUNCTION(lua script) and modules."
786481911,9963,madolson,2022-01-18T07:44:03Z,Non-deterministic blocking commands?
786491790,9963,soloestoy,2022-01-18T08:00:18Z,"Maybe adding new special configs is better, avoid breaking change since most users are using the old config `lua-time-limit`."
786516466,9963,oranagra,2022-01-18T08:35:01Z,"it's not a breaking change, since there's an alias.
but maybe in this case we want to still mention the old config in the documentation (so whoever sees it in some code can find it's docs).
i'll do that."
786575076,9963,sundb,2022-01-18T09:45:09Z,"```suggestion
```"
787054908,9963,yossigo,2022-01-18T18:50:29Z,"Does this imply we're OK with this being called from another thread? Sounds like a lot of potential trouble, now or in the future."
787056140,9963,yossigo,2022-01-18T18:52:11Z,"```suggestion
            /* start the blocking operation if not already started. */
```"
787138908,9963,oranagra,2022-01-18T20:50:22Z,"yes, we intend for this to also be called from a slow background operation that blocks the GIL for long.
there's even a test for it (not that it increases the confidence that it won't be abused or trigger problematic edge cases)"
787185135,9963,itamarhaber,2022-01-18T22:00:24Z,"```suggestion
# Maximum time in milliseconds for EVAL scripts, functions and in some cases
# nodules' commands before Redis can start processing or rejecting other clients.
```"
787298996,9963,madolson,2022-01-19T02:21:48Z,"```suggestion
    if (server.busy_module_yield_flags != BUSY_MODULE_YIELD_NONE &&
        !(server.busy_module_yield_flags & BUSY_MODULE_YIELD_CLIENTS))
```"
787300180,9963,madolson,2022-01-19T02:25:04Z,"```suggestion
/* Unblock all paused clients (ones that where blocked by BLOCKED_PAUSE (possibly in processCommand).
```"
787300590,9963,madolson,2022-01-19T02:26:16Z,"```suggestion
                server.busy_module_yield_flags = flags & REDISMODULE_YIELD_FLAG_CLIENTS ?
                    BUSY_MODULE_YIELD_CLIENTS : BUSY_MODULE_YIELD_EVENTS;
```"
787301391,9963,madolson,2022-01-19T02:28:33Z,"I agree about renaming this BLOCKED_POSTPONE. There are several places that explicitly make reference to the fact this is only called in a paused context, included the documentation for it. I don't see any specific issues as long as we believe calling the yield is an infrequent event."
787391405,9963,oranagra,2022-01-19T06:47:23Z,"calling the yield is not infrequent, but i do ""un pause"" them only when the outer most module context is done.
so the other thing we can do is we throttle (delay) the initial yielding.

assuming the module calls us very frequently, currently there are 3 modes of operation:
1. during loading, in which case we start processing events right away (in HZ intervals, so the first one is after some 100ms of blockage). in this mode we always process all clients (return -LOADING), so it won't postpone any
2. during other blocked contexts, when the user used YIELD_CLIENTS, we start processing event only after 5 seconds of blockage, and also we don't postpone any (return -BUSY to all).
3. during other blocked contexts, when the user used YIELD_EVENTS. discuss this below.

in this mode we could have ignored the `busy_reply_threshold` config, and start yielding right away (after 100ms hz delay), in which case we could do many blocking and unblocking of clients.
i didn't do that (we do wait the 5 seconds) because i was afraid of side effects such as this one on short blocking operations.

in theory, even if the user used YIELD_CLIENTS where we start yielding to clients only after the 5 seconds threshold, we could have stated yielding to other events sooner (i.e. right away after the hz delay).
again, decided not to do that since it seemed risky.

the meaning of that is that if there are any bugs, we're unlikely to see them. i.e they'll surface only when the module blocks for more than 5 seconds.. if we used the shorter throttling, maybe it would have exposed bugs sooner (during release candidate testing).

WDYT?"
787400255,9963,oranagra,2022-01-19T07:06:15Z,"added a commit with a comment to explain that, so we won't overlook this in the future."
788050883,9963,yossigo,2022-01-19T18:57:56Z,"I'm really not sure about suddenly having significant ""main thread"" code flow running from another thread. Even if things don't break, we'll still be running into weird jemalloc thread-local issues, and may regret that with any future work around threading.

Update: taking this back, most of that is already possible with `RM_Call()` on a thread safe context so at least from the POV of this PR there's no real difference."
788320967,9963,sundb,2022-01-20T03:29:44Z,"```suggestion
    /* Calculate the initial yield time for long blocked contexts.
```"
788321191,9963,sundb,2022-01-20T03:30:29Z,"```suggestion
     * sooner, and only delay the processing for clients till the busy_reply_threshold,
```"
788324334,9963,madolson,2022-01-20T03:33:27Z,I think the tradeoffs made are ok.
788329642,9963,sundb,2022-01-20T03:48:11Z,"When redis isn't in loading, Why don't need to rely on `busy_reply_threshold` to calculate `next_yield_time`?"
788360250,9963,oranagra,2022-01-20T05:25:56Z,"i don't understand the question.
the initial delay is set in moduleCreateContext (different for loading and non-loading).
after that, they both depend on hz.
am i missing anything?"
788364243,9963,sundb,2022-01-20T05:37:42Z,"If so, that's fine, but I don't understand why it's designed that way, it's not reflected in the comments."
788378002,9963,oranagra,2022-01-20T06:15:08Z,"isn't it logical? it's similar to what happens in scripts and in loading (when modules don't block).
i.e. loading processes events every 2mb.
and scripts start process events after 5 seconds.
and in either case, we wanna throttle the module Yield calls since they may come in a rate that's too high.
am i missing anything?
can you suggest where you think a comment is missing?"
788404548,9963,sundb,2022-01-20T06:47:47Z,"Silly me. I took `busy_reply_threshold` to be the fixed frequency of yield, as you have explained in your comment above.
```
     * Note that in theory we could have started processing BUSY_MODULE_YIELD_EVENTS
     * sooner, and only delay the processing for clients till the busy_reply_threshold,
     * but this carries some overheads of frequently marking clients with BLOCKED_POSTPONE
     * and releasing them, i.e. if modules only block for short periods. */
```"
1408705167,12817,sundb,2023-11-29T03:48:58Z,"start version: 7.0.0
introduced: #9963
reason: main thread reads this without getting the GIL.

```
WARNING: ThreadSanitizer: data race (pid=1969717)
  Write of size 4 at 0x558d01163de0 by thread T14 (mutexes: write M64):
    #0 processEventsWhileBlocked /data/redis_fork/src/networking.c:4116 (redis-server+0xe795d)
    #1 RM_Yield /data/redis_fork/src/module.c:2410 (redis-server+0x20f4c3)
    #2 RM_Yield /data/redis_fork/src/module.c:2381 (redis-server+0x20f4c3)
    #3 bg_call_worker /data/redis_fork/tests/modules/blockedclient.c:116 (blockedclient.so+0x9ade)

  Previous read of size 4 at 0x558d01163de0 by main thread (mutexes: write M86, write M82, write M84):
    #0 afterSleep /data/redis_fork/src/server.c:1867 (redis-server+0x9f4ab)
    #1 aeProcessEvents /data/redis_fork/src/ae.c:408 (redis-server+0x971dc)
    #2 aeMain /data/redis_fork/src/ae.c:496 (redis-server+0x971dc)
    #3 main /data/redis_fork/src/server.c:7212 (redis-server+0x846d5)
```"
1408706695,12817,sundb,2023-11-29T03:52:24Z,"start version: 6.2.0
introduced: #8141
reason: release client argv outside of GIL

```
WARNING: ThreadSanitizer: data race (pid=91603)
  Read of size 4 at 0x0001027f5534 by main thread (mutexes: write M0, write M1, write M2, write M3):
    #0 decrRefCount object.c:393 (redis-server:arm64+0x1000741f0)
    #1 freeClientArgv networking.c:1391 (redis-server:arm64+0x10005f504)
    #2 resetClient networking.c:2061 (redis-server:arm64+0x100061bfc)
    #3 unblockClient blocked.c:212 (redis-server:arm64+0x10016aa80)
    #4 moduleHandleBlockedClients module.c:8316 (redis-server:arm64+0x10019d4e4)
    #5 blockedBeforeSleep blocked.c:758 (redis-server:arm64+0x10016c5c4)
    #6 beforeSleep server.c:1745 (redis-server:arm64+0x100023a8c)
    #7 aeProcessEvents ae.c:379 (redis-server:arm64+0x10000ee58)
    #8 aeMain ae.c:496 (redis-server:arm64+0x100010148)
    #9 main server.c:7213 (redis-server:arm64+0x10003e538)

  Previous write of size 4 at 0x0001027f5534 by thread T7:
    #0 decrRefCount object.c:407 (redis-server:arm64+0x100074358)
    #1 RM_FreeString module.c:2696 (redis-server:arm64+0x100188f20)
    #2 bg_call_worker <null>:49743940 (usercall.so:arm64+0x30ec)
```"
1408707239,12817,sundb,2023-11-29T03:53:41Z,"start version: 7.2.0
introduced: #12326
reason: `RM_Reply*` is not thread-safe

```
WARNING: ThreadSanitizer: data race (pid=1969717)
  Write of size 8 at 0x558d01162be0 by main thread (mutexes: write M86, write M82, write M84, write M64):
    #0 processCommandAndResetClient /data/redis_fork/src/networking.c:2466 (redis-server+0xe1db4)
    #1 processInputBuffer /data/redis_fork/src/networking.c:2575 (redis-server+0xe1db4)
    #2 readQueryFromClient /data/redis_fork/src/networking.c:2715 (redis-server+0xe28da)
    #3 callHandler /data/redis_fork/src/connhelpers.h:79 (redis-server+0x2943f2)
    #4 connSocketEventHandler /data/redis_fork/src/socket.c:298 (redis-server+0x2943f2)
    #5 aeProcessEvents /data/redis_fork/src/ae.c:436 (redis-server+0x97245)
    #6 aeMain /data/redis_fork/src/ae.c:496 (redis-server+0x97245)
    #7 main /data/redis_fork/src/server.c:7212 (redis-server+0x846d5)

  Previous read of size 8 at 0x558d01162be0 by thread T14:
    #0 _addReplyToBufferOrList /data/redis_fork/src/networking.c:418 (redis-server+0xdc0d6)
    #1 addReplyProto /data/redis_fork/src/networking.c:474 (redis-server+0xdd0a7)
    #2 RM_ReplyWithCallReply /data/redis_fork/src/module.c:3424 (redis-server+0x212732)
    #3 bg_call_worker /data/redis_fork/tests/modules/blockedclient.c:145 (blockedclient.so+0x9c0d)
```"
1408708472,12817,sundb,2023-11-29T03:56:05Z,"start version: 7.0.0
introduced: #8687
reason: touch `server.stat_clients_type_memory` without GIL

```
WARNING: ThreadSanitizer: data race (pid=90167)
  Write of size 8 at 0x0001006f41e0 by main thread (mutexes: write M0, write M1, write M2, write M3):
    #0 updateClientMemoryUsage server.c:956 (redis-server:arm64+0x10001f760)
    #1 clientsCron server.c:1116 (redis-server:arm64+0x1000201fc)
    #2 serverCron server.c:1451 (redis-server:arm64+0x100021b10)
    #3 processTimeEvents ae.c:331 (redis-server:arm64+0x1000100b8)
    #4 aeProcessEvents ae.c:466 (redis-server:arm64+0x10000f614)
    #5 aeMain ae.c:496 (redis-server:arm64+0x1000103bc)
    #6 main server.c:7212 (redis-server:arm64+0x10003e76c)

  Previous write of size 8 at 0x0001006f41e0 by thread T7:
    #0 freeClient networking.c:1684 (redis-server:arm64+0x10005f30c)
    #1 moduleFreeContext module.c:834 (redis-server:arm64+0x1001821ac)
    #2 RM_FreeThreadSafeContext module.c:8494 (redis-server:arm64+0x10019dcf8)
    #3 worker <null>:17631300 (blockedclient.so:arm64+0x828)
```"
1414373952,12817,oranagra,2023-12-04T19:21:10Z,"is the problem with the call to UnblockClient , or also with the ReplyWith?
AFAIK it's ok to reply to the blocked clients without locking anything."
1414378465,12817,oranagra,2023-12-04T19:22:33Z,"is it because of auto-memory?
the stack trace here seems unrelated to the release of the argv array.
"
1414390068,12817,oranagra,2023-12-04T19:29:22Z,"regarding the updateStatsOnUnblock problem, i suppose that's a bug we introduced in #7491 (Redis 6.2).
we should solve it rather than add an API restriction.
WDYT?"
1415416599,12817,sundb,2023-12-05T11:28:22Z,"I update the stack trace.
"
1415449745,12817,sundb,2023-12-05T11:39:29Z,"https://github.com/redis/redis/pull/12817/commits/6e4de39a94bd782959d46da2e5bd665a68e97535
I've made the `moduleBlockedClientTimedOut()` distinguish between the main thread andmodule threads.
Since we have no way of knowing if `RM_UnblockClient()` was called in the thread, we have to make it always asynchronous to handle unblock status updates.
And we need to make the ctx with REDISMODULE_CTX_THREAD_SAFE flag, otherwise replying error in the `timeout_callback()` will not be thread-safe."
1418467835,12817,sundb,2023-12-07T06:51:19Z,"Another more serious race condition.
start version: 7.0.0
introduced: https://github.com/redis/redis/pull/9963

Main thread (A):
Module thread (B):
(A)beforesleep(release gil) -> (A)aeApiPoll -> (B)acquire gil -> (B)RM_Yield() -> (B)processEventsWhileBlocked() -> (B)aeApiPoll 

```
WARNING: ThreadSanitizer: data race (pid=2734015)
  Write of size 4 at 0x7f79092f3000 by thread T14 (mutexes: write M64):
    #0 aeApiPoll /data/redis_fork/src/ae_epoll.c:127 (redis-server+0x8c367)
    #1 aeProcessEvents /data/redis_fork/src/ae.c:399 (redis-server+0x8d8ab)
    #2 processEventsWhileBlocked /data/redis_fork/src/networking.c:4119 (redis-server+0xde74a)
    #3 RM_Yield /data/redis_fork/src/module.c:2410 (redis-server+0x1dc38a)
    #4 bg_call_worker /data/redis_fork/tests/modules/blockedclient.c:116 (blockedclient.so+0x9ade)

  Previous write of size 4 at 0x7f79092f3000 by main thread (mutexes: write M86, write M82, write M84):
    #0 aeApiPoll /data/redis_fork/src/ae_epoll.c:127 (redis-server+0x8c367)
    #1 aeProcessEvents /data/redis_fork/src/ae.c:399 (redis-server+0x8d8ab)
    #2 aeMain /data/redis_fork/src/ae.c:496 (redis-server+0x8ddf4)
    #3 main /data/redis_fork/src/server.c:7212 (redis-server+0xb7691)
```
"
1418910794,12817,oranagra,2023-12-07T12:45:35Z,"according to the spec, i don't think we can rely on 0 not being the real ID of some thread.
in practice, i suppose it's not a real concern."
1418925907,12817,oranagra,2023-12-07T12:57:32Z,"i think calling `moduleCount()` may be unsafe.
it currently resorts in the total size of two hash tables.
if they're in the process of re-hashing, it could in theory lie."
1418954302,12817,oranagra,2023-12-07T13:19:17Z,"so what do we conclude here?
that if a module retains the argv strings, it must release them before unblocking the client, or alternatively with the GIL locked?
@MeirShpilraien PTAL"
1418958202,12817,oranagra,2023-12-07T13:22:28Z,"actually the order doesn't matter, if they both decr at the same time it can mess up the refcount.
i suppose we must clone the stings before branching?"
1418969583,12817,oranagra,2023-12-07T13:31:01Z,"like https://github.com/redis/redis/pull/12817#discussion_r1418958202, this is not about the use of RM_AddReply, it's about using the argv strings (changing their refcount).
p.s. how did you conclude it's related to the above mentioned PR?"
1418970686,12817,oranagra,2023-12-07T13:31:56Z,"this one is resolved by modifying the freeClient code, right?"
1418988306,12817,oranagra,2023-12-07T13:45:19Z,"looking at your changes in moduleBlockedClientTimedOut, i'm not sure i understand why we don't need to call updateStatsOnUnblock when the code comes from RM_UnblockClient."
1419874603,12817,sundb,2023-12-08T02:50:06Z,"I think it would make more sense to free it with GIL, since it was no longer in use before unblockClient, and I can't think of a benefit to clone it."
1419878175,12817,sundb,2023-12-08T02:57:51Z,"Yes, and make `updateClientMemoryUsage()` and `clientEvictionAllowed()` no longer keep track of non-conn user memory and whether eviction.
However, this has the side effect that `server.stat_clients_type_memory[CLIENT_TYPE_NORMAL]` will be lower than it was before this fix was made."
1419882170,12817,sundb,2023-12-08T03:06:33Z,"they're not related.
this is because main thread many modify `server.current_client` when module thread read it.
however, `c->flags & CLIENT_PUSHING` is always false for module threads, so this is harmless."
1419883004,12817,sundb,2023-12-08T03:08:23Z,"following https://github.com/redis/redis/pull/12817#discussion_r1418988306
we call `updateStatsOnUnblock()` here when from RM_UnblockClient()."
1419883147,12817,sundb,2023-12-08T03:08:46Z,please see https://github.com/redis/redis/pull/12817#discussion_r1419883004
1421746714,12817,oranagra,2023-12-10T13:02:43Z,"does it mean that before this PR it was called twice?
maybe we should add a comment in moduleBlockedClientTimedOut, explaining the `if` statement by referring to this call.
"
1421747175,12817,oranagra,2023-12-10T13:05:23Z,"i suppose we better document this.
i.e. that anything we do with the retained arguments refcount) from a thread (using them for a reply, re-retaining, or freeing them) needs to be done with the GIL locked.
@MeirShpilraien @yossigo WDYT?"
1421747655,12817,oranagra,2023-12-10T13:08:47Z,"we can't / shouldn't evict them anyway.
if we tracked them, it was wrong to do that.
we can list this as a fix (not about thread race) in the top comment."
1421749431,12817,yossigo,2023-12-10T13:18:20Z,"@oranagra Technically we can document that, but does that make sense in terms of API usability?"
1421802052,12817,oranagra,2023-12-10T19:14:30Z,"what other options do we have? introduce a new API that deep copies the string to be used when retaining it for a thread? use atomic operations on all refcounts?
the only relief here is that modules that use threads to process argv are probably not too common. "
1422074571,12817,MeirShpilraien,2023-12-11T08:21:37Z,I think its OK to say that release a RedisModuleString can only be done when holding the GIL unless you know for sure that you are the only owner of the RedisModuleString.
1422569270,12817,sundb,2023-12-11T14:47:19Z,"Before this PR, `moduleHandleBlockedClients()` ignored updating the block status when the client was blocked on keys.

origin code:
```c
if (c && !clientHasModuleAuthInProgress(c) && !bc->blocked_on_keys) {
    updateStatsOnUnblock();
}
```"
1422595505,12817,sundb,2023-12-11T14:53:54Z,"I've never been able to remember how I reproduced it.
I remember using RM_Call to reproduce it, but I forget which command, not the following `client no-evict` command.

Config:
```
maxmemory-clients 1g
```

Command:
```c
RedisModule_Call(ctx,""client"",""cc"",""no-evict"",""off"");
```

Patch:
```c
int clientEvictionAllowed(client *c) {
    serverAssert(c->conn);
    if (server.maxmemory_clients == 0 || c->flags & CLIENT_NO_EVICT) {
        return 0;
    }
    int type = getClientType(c);
    return (type == CLIENT_TYPE_NORMAL || type == CLIENT_TYPE_PUBSUB);
}
```

`serverAssert(c->conn);` will be triggered."
1423907802,12817,sundb,2023-12-12T12:15:16Z,please als have a look at https://github.com/redis/redis/pull/12817#issuecomment-1851899163 and top comment(7).
1423913130,12817,oranagra,2023-12-12T12:20:12Z,"i don't think using RM_Call to call the CLIENT command is valid.
specifically the ones manipulating the current client, like enabling tracking, and so on.
the user may be wanting to operate on the calling client, not the fake client, but that's not currently supported, and i think we should just disallow or disregard this case."
1423927362,12817,sundb,2023-12-12T12:33:06Z,"@oranagra this is another place to record the memory usage of fake clients.
when unblocking a fake client that blocks on keys, it triggers.
```
=== REDIS BUG REPORT START: Cut & paste starting from here ===
21845:M 12 Dec 2023 13:25:36.347 # === ASSERTION FAILED ===
21845:M 12 Dec 2023 13:25:36.347 # ==> server.c:1023 'io_threads_op == IO_THREADS_OP_IDLE && c->conn' is not true

------ STACK TRACE ------

Backtrace:
0   redis-server                        0x0000000102d73374 updateClientMemUsageAndBucket.cold.1 + 32
1   redis-server                        0x0000000102c425dc updateClientMemUsageAndBucket + 412
2   redis-server                        0x0000000102c6b604 processCommandAndResetClient + 60
3   redis-server                        0x0000000102ceed08 handleClientsBlockedOnKeys + 792
4   redis-server                        0x0000000102c48f60 processCommand + 2816
5   redis-server                        0x0000000102c6b864 processInputBuffer + 312
6   redis-server                        0x0000000102c635d4 readQueryFromClient + 1364
7   redis-server                        0x0000000102d36380 connSocketEventHandler + 220
8   redis-server                        0x0000000102c3b720 aeProcessEvents + 1100
9   redis-server                        0x0000000102c3b840 aeMain + 32
10  redis-server                        0x0000000102c4f998 main + 2036
11  dyld                                0x00000001908a5058 start + 2224
```

failed test:
```
    test ""Blpop on async RM_Call fire and forget"" {
        assert_equal {Blocked} [r do_rm_call_fire_and_forget blpop l 0]
        r lpush l a
        assert_equal {0} [r llen l]
    }
```"
1423957264,12817,oranagra,2023-12-12T12:59:35Z,"i think that's a bug, they're not ""evictable"", and the user (application) doesn't control them (and their amount).
we don't show them in CLIENT LIST, and i think we should not count their memory in that mechanism (maybe we should count them elsewhere)"
1429096255,12817,oranagra,2023-12-17T09:27:39Z,let's add a comment as to why we need this variable and we're not using dictSize directly
1429097491,12817,oranagra,2023-12-17T09:30:21Z,i suppose we need to update that text.
1429103466,12817,oranagra,2023-12-17T09:43:18Z,"\i think that `lock_pool` and `el_poll_mutex` should be renamed. at this level (server.c), we don't know if it's `poll` or `select`, so we're just protecting `ae`."
1429106120,12817,oranagra,2023-12-17T09:49:30Z,"so we have one mutex protecting the times in which we do actual work (our GIL), and another mutex for protecting times when we go to sleep (not to use epoll in 2 threads at the same time)?

if we documented that using the RM_Yield API from a thread has to be done while locked, and it also attempts to lock the AE mutex, then it can only actually run in a very narrow time window. i wonder if that's the right approach.
maybe instead we can block the module thread, and wait for the main tread to perform an AE cycle?

i wonder why at all we allowed it to be run from a thread. i don't remember the use case.
@MeirShpilraien maybe you remember something?"
1430940105,12817,sundb,2023-12-19T05:46:20Z,changed to `el_mutex` and `lock_el`.
1430941067,12817,sundb,2023-12-19T05:48:08Z,done
1430941097,12817,sundb,2023-12-19T05:48:13Z,done
1433048835,12817,oranagra,2023-12-20T18:28:17Z,"i see we updated the tests, but we also need to document that.
question is where? should that be done in RM_RetainString, RM_BlockClient, RM_ThreadSafeContextLock?

@MeirShpilraien do you have a better idea?"
1436084241,12817,oranagra,2023-12-25T12:55:32Z,"i'm trying to figure out this change.
in the top comment i see this change (an addition of REDISMODULE_CTX_THREAD_SAFE) is listed together with the fact we don't call updateStatsOnUnblock (which is a different change in this function).
1. can you please help me understand why it was needed.
2. what are the other side effects of this change"
1436325659,12817,MeirShpilraien,2023-12-26T08:26:47Z,"I think we should mention it on `RM_FreeString`, `RM_RetainString`, and `RM_HoldString`. We should mentioned that those function are not thread safe and should only be called when the GIL is held. We should decide if we want to document the exception about the `RM_FreeString` in case you know you are the only owner."
1436337636,12817,oranagra,2023-12-26T08:49:35Z,"p.s. for some reason i thought that RM_ReplyWithString will also be an issue, but now i see it doesn't touch the refcount. (at least not in the current implementation)"
1436412422,12817,oranagra,2023-12-26T11:32:38Z,"@sundb this one is linked to number 4 at the top, which says:
> Harm Level: None
Trigger assertion

first of all, an assertion isn't ""None"" it terminates the process and can cause data loss. maybe change it to ""Low""?
secondly this can also mess up the refcount, or cause double free and other issues that can lead to memory corruption.
am i missing anything?"
1436412887,12817,oranagra,2023-12-26T11:33:59Z,"@sundb this one at the top comment (number 2), says:
> Harm Level: Low

but if that's just an access to a variable and then ignoring what we read from it, isn't that ""Harm Level: None""?"
1436427232,12817,oranagra,2023-12-26T12:11:35Z,"I discussed this with Meir.
Context: calling RM_Yield from a thread is meant to be done in case you locked the GIL for a long period of time, and don't intend to release it, and meanwhile, want to reply with -BUSY.
In this case, it is likely that that the main thread is already blocked trying to lock the GIL.
However, if server.hz is really low, and there are no clients with pending commands, we can imagine that the main thread's event loop is never gonna wake up, in which case RM_Yield will hang (despite wishing to use AE_DONT_WAIT).

The alternative solution we wanna propose is that instead of adding the new mutex to guard the AE mechanism, we'll change the code so that we process these events from the main thread, instead of the module thread.
1. the module sets server.busy_module_yield_flags and server.busy_module_yield_reply.
2. the module sends a character on the pipe to cause the main thread's event loop to wake up.
3. the module unlocks the GIL, waits for redis to reach the event loop once, and then re-locks the GIL.

p.s. if we agree on the direction, maybe we should extract this topic to another PR?"
1436433581,12817,sundb,2023-12-26T12:26:08Z,"You are right, it should be `None`."
1436441575,12817,sundb,2023-12-26T12:46:17Z,"This is because both of them are fixed to ensure that `moduleBlockedClientTimedOut()` is thread-safe.

The reason is:
```
When error reply is called in timeout_callback(), ctx is not thread-safe, eventually lead to race conditions in afterErrorReply.
```

If the ctx is not to be `REDISMODULE_CTX_THREAD_SAFE`, `afterErrorReply()` will be triggered if  replying an error.
If `REDISMODULE_CTX_THREAD_SAFE` is used, all replies will be deferred.

https://github.com/redis/redis/blob/27a8e3b04e645e0c614c597668355e9bc945c408/src/networking.c#L501-L508"
1436443612,12817,sundb,2023-12-26T12:51:55Z,"my intention was that it was only caused by the module's use of API, not by the internal implement, so I chose `None`.
let's change it to `LOW`."
1436473693,12817,oranagra,2023-12-26T14:05:29Z,"ohh, ok, maybe in addition to the ""Harm Level"", we can add some explicit ""Trigger"", to specify that it depends on some rare case, and people can easily rule it out and know they're safe.
or we can leave it as is, the scenario is there, it's just a little bit hard to understand if you're not keen on the details."
1436801600,12817,sundb,2023-12-27T07:16:14Z,"It seems to be working, I'll give it a shot."
1438180926,12817,sundb,2023-12-29T12:21:07Z,"@oranagra We're missing the fact that `RM_Yield()` can be called in the main thread, and if we want to proceed in that direction, we'll need to use old behavior in the main thread, and new direction in the module thread."
1438835975,12817,oranagra,2023-12-31T06:59:15Z,"ok, let's do that.
this brings back the detection of which thread we're running from, which is something we weren't happy with, but still i guess that's the right way forward."
1448379648,12817,sundb,2024-01-11T07:07:31Z,"now timeout and reply are all controlled by the thread, so we don't need these two callbacks and timeout."
1448546966,12817,oranagra,2024-01-11T09:24:27Z,"i think the point of that test was to interact with Redis's timeout mechanism.
"
1448555258,12817,sundb,2024-01-11T09:31:02Z,"Yes, that's exactly what I was trying to say, the main thread wants to reply to the user in the middle of sleep of module thread.
If we want to avoid the main thread triggering a timeout and let the module thread handle the time measure itself, we have to drop the timeout callback.
That's what I'm struggling with."
1450460276,12817,sundb,2024-01-12T13:32:30Z,"@oranagra To ensure the point of that test, I think we need to add lock to protect it.
First, we should clarify that RM_BlockedClientMeasureTime*() API are not thread-safe.
Since module developers know they will use these APIs in multiple threads, they should ensure these APIs are safe to use.
Frequently locking and unlocking the GIL is a bad idea, but using a local lock owned by the module might not be a bad idea."
1451694283,12817,oranagra,2024-01-14T09:36:47Z,"this is repeated 3 times, let's add a method"
1451694379,12817,oranagra,2024-01-14T09:37:23Z,"ok, i'm fine with that.
please add the comment in the API docs"
1451730736,12817,sundb,2024-01-14T13:09:18Z,done with [`393af9e` (#12817)](https://github.com/redis/redis/pull/12817/commits/393af9e0b5decd5d9a856ee17fcc7854b5fc604c)
1451731117,12817,sundb,2024-01-14T13:11:08Z,done with [`42de713` (#12817)](https://github.com/redis/redis/pull/12817/commits/42de713eb6cbd250b24903ab0caac93cdc86c41b)
1457563935,12817,oranagra,2024-01-18T14:56:56Z,"```suggestion
 * This API is not thread safe, access to these retained strings (if they originated
 *  from a client command arguments) must be done with GIL locked. */
```

if you agree, mirror to the other APIs with that comment."
1671639900,12817,guybe7,2024-07-10T05:28:41Z,@sundb why did you remove `&& !bc->blocked_on_keys`?
1671644342,12817,guybe7,2024-07-10T05:35:30Z,"ok i see you referred to my question in the previous post

the thing is that, if the client is blocked on keys, `moduleUnblockClientOnKey` is called, which calls `updateStatsOnUnblock`

so currently, `updateStatsOnUnblock` is called twice "
750250139,9748,oranagra,2021-11-16T13:01:25Z,how come these changes are here? and also not causing conflicts?
750260362,9748,oranagra,2021-11-16T13:14:51Z,"so this function is no longer responsible of backing up the old configuration and restoring it.
instead it relies on the caller to do that, by calling this function again.

and it is no longer responsible of copying the new config to the server struct variables.
instead it relies on the caller to do that before callng.

so why does it clear the server struct config on failure?
i think that should not be part of it's responsibility..."
750261558,9748,oranagra,2021-11-16T13:16:22Z,@yossigo i'd like you to have a look at the changes in this function in the context of the recovery flow.
750263273,9748,oranagra,2021-11-16T13:18:23Z,is this change here to fix a bug?
750271393,9748,oranagra,2021-11-16T13:27:51Z,"maybe we should add another test that tests a config with an apply function, and in some way actually test the restore worked? e.g. an `oom-score-adj-values` (test `/proc`, only on linux)?"
750280754,9748,oranagra,2021-11-16T13:38:38Z,"wouldn't it be easier to have a value of 2 represent no changes done? (i.e. non-zero representing a different kind of success)
in that case 0 would still indicate failure, and i suspect quite a few of your changes can be reverted."
750285969,9748,oranagra,2021-11-16T13:44:40Z,"not sure we want to reply the string back to the caller. i think some static form of invalid argument is enough.
can be server.syntaxerr, a static more specific reply, or if you insist, reply the argc back the at caller."
750287476,9748,oranagra,2021-11-16T13:46:21Z,AFAIK we never have non-sds encoded objects coming from networking.c
750289059,9748,oranagra,2021-11-16T13:48:03Z,"maybe in this one we do want to respond with a more specific error, if we can.
maybe even a more explicit one for non-mutable configs.
in which case, maybe we wanna `break` too?"
750291225,9748,oranagra,2021-11-16T13:50:24Z,we may wanna break from the two outer loops too (maybe check the `invalid_args` var in the loop exit condition?
750293729,9748,oranagra,2021-11-16T13:53:11Z,let's have the test check that the correct error returns (the one from the setter or apply function)
750300453,9748,oranagra,2021-11-16T14:00:19Z,"is it an ""invalid argument""? it could be any other type of (apply) failure?"
750310201,9748,oranagra,2021-11-16T14:10:50Z,are we sure it's completely valid for the new approach that the update function modifies the server struct value?
750326299,9748,oranagra,2021-11-16T14:26:57Z,do we know why the old code used to refuse a request to shrink the config? (save memory)
750329365,9748,oranagra,2021-11-16T14:30:00Z,actually i see we're still refusing to reduce the size of ae (silently ignoring the config)
750335017,9748,oranagra,2021-11-16T14:35:32Z,"i see the old code didn't call tlsConfigure if it was already called in the past and the port is changed.
please look at the downside of removing that condition."
750341997,9748,oranagra,2021-11-16T14:42:09Z,"```suggestion
        values[CONFIG_OOM_BGCHILD] < values[CONFIG_OOM_REPLICA])
    {
```"
750350410,9748,oranagra,2021-11-16T14:50:15Z,"i'd rather avoid these renames.
changes in this block have a high potential to cause unnecessary merge conflicts since each of these configs is just one line, so if an adjacent line is also changed it causes a useless conflict.

also, even if in some PR / branch / release / fork, there are some other change to this line (like flags or alias), there's no need to cause cause a conflict.

i think we can keep the terms ""update"" and ""apply"" mixed.

p.s. i'm ok to change the tls block (no need to create / define apply aliases),
i presume this block won't cause much conflicts"
750961496,9748,yoav-steinberg,2021-11-17T07:35:05Z,"I think i did this here originally in order to understand something and then cherry picked to a separate PR. There's no conflict because the change is identical.
What do you suggest I do?"
750974839,9748,oranagra,2021-11-17T07:58:01Z,"looking at the branch of this PR, i see this block only once, and since there's no conflict, i suppose that we might get this block twice when we merge it.
anyway, you have two options:
1. delete this code from your branch
2. rebase (merge unstable into your branch), and make sure the block only appears twice.
either way, just make sure the diff between your branch and the `git merge-base` sha, shows no changes to this file (you can use the diff tool to revert them)."
750983944,9748,yoav-steinberg,2021-11-17T08:11:09Z,"Just copied the original logic: 
https://github.com/redis/redis/blob/45144fc79fd72f4c54bf979f998dbf0896c92a94/src/config.c#L698-L699
I'll gladly remove this as I'm not sure why it's there. The original assertion here was added more than 11 years ago (a375b077cc1da6afee6497749e4e3512caa757c7)."
750987743,9748,yoav-steinberg,2021-11-17T08:14:27Z,"We **don't** want to break out of the loops, there's a comment above explaining why. If I'm missing something (or if you have a cleaner implementation than the ugly flag I put here) let me know."
750990786,9748,yoav-steinberg,2021-11-17T08:17:03Z,"No break here on purpose. See:
```c
/* Note: we don't abort the loop since we still want to handle redacting sensitive configs (above) */
```"
750994566,9748,yoav-steinberg,2021-11-17T08:20:22Z,"It's tricky having a mutable error message since we're returning a static string pointer. It's possible doing this with a static (global) buffer. I saw we do this in at least once other similar case. But I don't like that idea that much. I think ""unrecognized parameter"" is pretty informative. I'll consider adding another message for the immutable config case. "
751010089,9748,yoav-steinberg,2021-11-17T08:36:35Z,what do you mean?
751013519,9748,yoav-steinberg,2021-11-17T08:41:02Z,"The assumption is that if we failed it's because the input arguments to `CONFIG SET` were bad. So it's always a bad argument issue and there's the extra `errstr` to help here. For example if you try to `CONFIG SET dir /some_dir_that_doesnt_exist` then I can claim the path argument was invalid and I get this:
`ERR Invalid arguments - No such file or directory`. If you really think this is wrong I'll change it to something like `Config set failed - %s`. Let me know."
751016598,9748,yoav-steinberg,2021-11-17T08:44:51Z,Good question but as far as I can think of it's a valid approach. This is the only way to cap the value implicitly and not return an out of range error. 
751017770,9748,oranagra,2021-11-17T08:46:19Z,"yes, i know it's old and outdated, i think we should use this opportunity to clean it up."
751019823,9748,yoav-steinberg,2021-11-17T08:49:00Z,see comment below.
751020472,9748,yoav-steinberg,2021-11-17T08:49:50Z,I think this check is enough and the original approach of ignoring the new value is the same as ignoring the currently applied set size.
751021123,9748,oranagra,2021-11-17T08:50:38Z,"ok, missed that comment.
in theory, maybe we don't have to redact configs in invalid commands.
i.e. what if someone messes the order of `field / value` and puts the password as the config name, and the `masterauth` string as the value? we can't / won't handle that.

but i suppose minimal effort on valid syntax and common mistakes is ok. so let's keep your code."
751023296,9748,oranagra,2021-11-17T08:53:16Z,"i suppose the easy way out is:
1. only report the right error message on the first error you encounter (but still have a specific error message for that issue).
2. keep running the loop just for the sake of redaction, but don't override the error message if already set.

in any case, i do think we wanna have specific error message, to let user figure out the problem faster."
751023833,9748,yoav-steinberg,2021-11-17T08:53:55Z,"I thought about it, the down side is that we don't waste time re-configuring tls (and loading cert files etc) when changing a port. This makes sense because a port change isn't really related to TLS configuration. But now we have a mechanism in the `.set` interface to return 2 when there's no change. So if there's no port change we won't call the apply function anyway. 

The idea was that for any place we use to have a quick exit in the update function because of no change we now have a generic mechanism to handle this and there's no need for the `prev` val in the apply function (for this use case) anymore."
751026470,9748,oranagra,2021-11-17T08:56:58Z,"i mean that i'm worried that in some way, the speific error message from either the set function or the apply function will get somehow lost in the recovery code.
so i wanna add a test that verifies we got the right error message.
i.d like to have two tests, one in which there's a failure in the set function and one in which there's a failure in the apply function, and in both it'll be nice if it's the second config out of a set of 3 (so the recovery will have some loops)."
751027928,9748,oranagra,2021-11-17T08:58:48Z,"i think `Config set failed - %s` is better, since i think some failures are due to runtime problem (port already in use or such), so it's not really an invalid config, it's just that it failed."
751029941,9748,oranagra,2021-11-17T09:01:11Z,"for the record, i do have a plan to clamp many configs to more appropriate ranges, but i don't wanna introduce a breaking change (don't wanna error in case someone currently passes an insane value).
so some day soon, i'd like to introduce some automatic clamping flag to config.c.

till then, i just wanted to be sure these two lines don't violate anything of the new approach."
751032422,9748,oranagra,2021-11-17T09:04:23Z,"ok, i still wonder why we do that, but since we didn't change the logic much, we can dismiss that concern for another day..

so the old code used to completely ignore an ask to reduce the size (both the AE array and the FD limit).
and the new code just limits the AE array shrinkage?"
751034520,9748,oranagra,2021-11-17T09:07:08Z,"ok, but when changing the port we still do an unnecessary re-init of TLS, maybe this function should do some optimization on that? maybe not by checking the port, but by checking if we're already initialized?"
751036163,9748,yoav-steinberg,2021-11-17T09:09:16Z,"Yes. I think I needed to make sure that even if the port change fails on `listenToPort` or `createSocketAcceptHandler` or something else we still end up with the old socket closed. This way the automatic restore mechanism on failure can simply restore the previous port. The old implementation left the old port open on failure which might have been ok, but the new code can't assume that and has it's own restore mechanism that needs to assume the old port isn't open."
751037799,9748,oranagra,2021-11-17T09:11:19Z,"FYI, you have `assert_error`"
751047511,9748,yoav-steinberg,2021-11-17T09:22:37Z,":+1: 
I'll remind you that I had a specific talk with you about whether or not we should redact on invalid configs and we even checked to see in monitor what would be the effect of this. I also gave the example of cases where redact won't work, like switching the order of confg-value pairs. Finally you said, lets be on the safe side and keep the original logic."
752016837,9748,yoav-steinberg,2021-11-18T08:44:09Z,"In order to test the restore woks for failed applies we need somehow to provide a config value that will consistently pass the set() function and will fail the apply() function. This is, by definition, an unexpected scenario. For `oom-score-adj-values` the range and validity is checked in the set() function so I can't see how I'll get the apply to fail.
I'll try to do something for `port` which might be easier and portable to get to fail."
752042800,9748,yoav-steinberg,2021-11-18T09:16:25Z,@oranagra Added another test for apply errors using `port` please re-review.
752049805,9748,oranagra,2021-11-18T09:24:49Z,"i'd like to add another config before the port (like you did with maxmemory above), so we can test the first one was reverted too.
ideally, it would be one with an apply function, which we can test too (like oom-score-adj, but preferably not one that's platform specific)"
752050542,9748,oranagra,2021-11-18T09:25:39Z,"not sure the current connection has chance to get interrupted.
maybe open a new one for the check?"
752082124,9748,yoav-steinberg,2021-11-18T10:01:41Z,Fixed. Please re-review.
752113484,9748,yoav-steinberg,2021-11-18T10:39:38Z,":+1: done, please re-review."
752256998,9748,yoav-steinberg,2021-11-18T13:47:41Z,"Even if we add some auto clamping mechanism it'll just make this redundant, no need to worry about it now."
752263286,9748,yoav-steinberg,2021-11-18T13:54:53Z,"I couldn't find any other good apply function other than port (except tls, but then the test becomes tls specific). I did however add more configs before/after `port` so I think we can resolve this."
752266128,9748,yoav-steinberg,2021-11-18T13:57:54Z,I think it must have been disconnected since we close the listening socking in the server and re-open it in the restore phase. I think test suit's auto-reconnect kicked in. But just in case I'll change to an explicit new connection.
752304541,9748,yoav-steinberg,2021-11-18T14:38:24Z,Yes.
752389715,9748,yoav-steinberg,2021-11-18T16:01:37Z,"I'm not sure it's a big deal to re-init here but it definitely seems redundant in case we changed the port but TLS was already configured. I can easily fix this by adding a `int tlsIsConfigured()` function in _tls.c_ and do:
```c
if (!tlsIsConfigured() && tlsConfigure(&server.tls_ctx_config) == C_ERR) {
```
It seems that any other way will require accessing internal _tls.c_ stuff (or passing the `prev` argument). This seems nicer to me than assuming TLS is configured based on the old port setting. @yossigo does this make sense? Can I add this new API to _tls.c_?"
753806022,9748,yoav-steinberg,2021-11-21T14:11:52Z,ok - fixed.
753851760,9748,oranagra,2021-11-21T20:43:07Z,"what about `oom-score-adj-values`?
in order to properly validate that, the tcl code will need to have some linux specific portion, but maybe it's not that bad."
753985100,9748,yoav-steinberg,2021-11-22T06:37:47Z,"I can do this, but then the test will run only on linux and I don't like it that much. If you're sure it's better to have the linux specific test here than what's currently there then let me know. My default is not to change it."
754017083,9748,oranagra,2021-11-22T07:49:18Z,"i didn't mean that the test will run only on linux, just that the part of verifying the rollback was done correctly (looking into `/proc` will be linux specific.

p.s. i don't mind such a test being linux specific since:
1. linux is our main target platform.
2. if we test that logic on linux, there's no reason to assume it'll somehow get broken on another platform.

anyway, if you don't think it worth the effort you can drop it.
it's just that this rollback mechanism is complicated, and has multiple steps, so i feel it should be tested heavily."
754533698,9748,yossigo,2021-11-22T18:25:31Z,nit: use explicit function type to be consistent with the rest of the fields.
754538323,9748,yossigo,2021-11-22T18:32:28Z,"Not sure about panicing here.

This should of course never happen, and if it does - it's either
* A bug
* Some external state. For example, you overwrite a TLS cert file and use `CONFIG SET` to force a reload. File is corrupt so the reload fails, but so will the revert.

In both cases, terminating without providing any option to remediate seems a bit harsh and potentially very risky."
754540685,9748,yossigo,2021-11-22T18:36:06Z,"Not sure if it's still relevant, but is having a static non-mutable string here so important? Saves some boilerplate code, but returning an allocated string might give us more flexibility."
754546399,9748,yossigo,2021-11-22T18:44:31Z,@yoav-steinberg It makes sense. although I'm not sure we won't run into the need to supply `apply` with the `prev` config elsewhere.
754548908,9748,yossigo,2021-11-22T18:48:25Z,"LGTM, unless I'm missing something here - it's basically the same revert logic that gets applied globally now. "
754948702,9748,soloestoy,2021-11-23T09:46:57Z,should be `c->argc % 2` ?
755043875,9748,yoav-steinberg,2021-11-23T11:43:36Z,Did it and it indeed found some bugs. Fixed them. Please review.
755054084,9748,yoav-steinberg,2021-11-23T11:58:06Z,"The basic design is that during the _set_ phase  you can check the _prev_ value. The _apply_ phase is there just to apply the current setting. This simplifies the implementation but brings a bit less flexibility - like forcing the apply functions to be idempotent but I feel this is actually a simplification which is worth it.
Anyway added `tlsIsConfigured`."
755055189,9748,yoav-steinberg,2021-11-23T11:59:43Z,"@yossigo I agree, but somehow I didn't change it during development and now I think it's not that relevant. Perhaps the next time we need some fancy error string we'll change this entire mechanism and add the extra flexibility."
755065823,9748,yoav-steinberg,2021-11-23T12:15:07Z,Oops 🤦. Thanks. Fixed.
755069125,9748,yoav-steinberg,2021-11-23T12:19:44Z,"I agree. I wasn't sure about this either. My approach was to avoid staying in an undefined state, which seems to me the only sane way to handle this other than panicking.
So the other option would be to report an error and just ignore the failure. WDYT?

"
755071914,9748,yoav-steinberg,2021-11-23T12:23:36Z,It's just that I use this type for an array of (unique) function pointers to be applied after _set_ or during restore after failure. I wanted to avoid the risk of someone changing the function type in one place and not the other.
755438545,9748,yossigo,2021-11-23T19:21:03Z,I think this would be better.
755533475,9748,yoav-steinberg,2021-11-23T21:58:31Z,done.
760180949,9748,enjoy-binbin,2021-12-01T13:25:42Z,"It looks like this will cause CI to fail (in my daily CI)
mac: https://github.com/enjoy-binbin/redis/runs/4379281827?check_suite_focus=true#step:5:2246
freebsd: https://github.com/enjoy-binbin/redis/runs/4379282497?check_suite_focus=true#step:4:4682

```
#ifdef __linux__
#define HAVE_PROC_OOM_SCORE_ADJ 1
#endif
```
maybe we should readd `if (server.oom_score_adj == OOM_SCORE_ADJ_NO) return C_OK;` ?"
760216884,9748,oranagra,2021-12-01T14:08:14Z,"thanks for reporting.
the reason we removed it so that when this config is disabled (after being enabled), it'll remove the previously set adjustment.

i.e.
```
config set oom-score-adj-values 1 2 3
config set oom-score-adj yes
config set oom-score-adj no
```
i.e. the last line will undo the changes as if it was never enabled.

what i don't yet understand is why the `CONFIG sanity` fails on that.
IIRC what that test does it CONFIG GET, and then CONFIG SET with the value it got from GET.
and IIRC the config infra is suppose to catch these no-op things today and avoid calling the apply function.
can you please look into that?

regardless, i see another issue with that change.
let's say the user never enabled `oom-score-adj`, but as soon as he's setting `oom-score-adj-values` to a new value, we'll get here and try to apply the startup adjust (`oom_score_adj_base`)."
760352406,9748,enjoy-binbin,2021-12-01T16:26:24Z,"```
127.0.0.1:6379> config set oom-score-adj-values ""0 200 800""
(error) ERR Config set failed - Failed to set current oom_score_adj. Check server logs.
```

> and IIRC the config infra is suppose to catch these no-op things today and avoid calling the apply function.

It looks like this failed, `createSpecialConfig` does not catch no-op things, those `special` commands are not checked that part"
760371559,9748,oranagra,2021-12-01T16:47:08Z,"ohh, right. special configs don't do that.
ok, the easy way out is to add these oom-score* configs to the `skip_configs` list.
the only reason this test used to pass so far is because it feeds back to redis the same value it got from CONFIG GET, and thus the oom-score-adj was always disabled, so even when it ""modified"" oom-score-adj-values, it didn't do anything.
can you please make a PR right away, so the daily CI doesn't fail?

the next thing would be to add explicit tests around these two configs:
1. to make sure that when disabling oom-score-adj, it reverts what it did when it was enabled.
2. make sure that setting either of these two configs when oom-score-adj is disabled, it will not try to modify `/proc` and fail on non-Linux systems.
3. consider improving the ""special"" oom-score-adj-values config to detect no-op changes and skip them.

we can leave that task of 3 tests and config improvement for @yoav-steinberg to handle when he's back.

in theory, if we did all 3 of the above (or even somehow just do 2, without breaking 1), there was no need to add them to the `skip_configs` list, but if we'll add specific sanity tests for them anyway, i think it's safe to skip them.

p.s. that whole `CONFIG sanity` is kinda useless now that everything in the config goes from a config framework... in the past each config had special hand written code, and this test (which is also relatively new) exposed some inconsistencies."
760381899,9748,enjoy-binbin,2021-12-01T16:58:40Z,"So what I need to do now is to add `oom-score-adj` and `oom-score-adj-values` to skip_list?

I try it on my mac, the test also fails on `CONFIG SET rollback on apply error` ... i am working on it"
760829480,9748,enjoy-binbin,2021-12-02T07:42:36Z,"a quick fix, handled in #9881"
760923087,9748,yoav-steinberg,2021-12-02T09:47:55Z,So I'll find a solution for 2 above where the user can manipulated `/proc` on their own and even if we write to `oom-score-adj-values` they don't need to worry redis will overwrite `/proc` as long as `oom-score-adj` is `no`.
775282049,10004,oranagra,2021-12-26T20:28:42Z,aren't you leaking the library (dict value) this way?
775282114,10004,oranagra,2021-12-26T20:29:55Z,"if you'll move the memory accounting to the ""constructor"" and ""destructor"", you'll be able to replace all of that with dictClear or alike"
775282342,10004,oranagra,2021-12-26T20:32:14Z,"would be nice to nullify the `iter` here (and test for null at the botto), so in case we have other (later) `goto done`, they won't break.
"
775282530,10004,oranagra,2021-12-26T20:34:55Z,let's nullify `iter` here and in the other two places
775283071,10004,oranagra,2021-12-26T20:41:26Z,"this is a little bit inefficient (each linking searches for dup functions, and if later reverted will search for dups again)
maybe we can pass a flag to avoid that (since in these case we know there are no collisions)?
or maybe instead of making a ""backup"" library, we'll just make a backup list? (will avoid the excessive collision search on one way).
i.e. we mostly care for an optimized happy path."
775283316,10004,oranagra,2021-12-26T20:45:09Z,"in case we just passed through the `!replace` flow, then this loop is excessive (it won't find anything).
so we can make it an ""else if"" for the `!replace` loop.
or we can unify both loops into one, and just have a branch when there's a hit."
775283457,10004,oranagra,2021-12-26T20:46:54Z,why bother nullify `entry` before these dict iterations?
775284128,10004,oranagra,2021-12-26T20:56:06Z,"i think it should be
```suggestion
""    If no function is running, return nil"",
```"
775284248,10004,oranagra,2021-12-26T20:57:39Z,"maybe we should note that even in replace, there could still be collision in function names.
actually that's not that important here, but we need to remember that detail for the actual documentation."
775284469,10004,oranagra,2021-12-26T21:00:26Z,"```suggestion
        *err = sdsnew(""No functions registered"");
```"
775284551,10004,oranagra,2021-12-26T21:01:21Z,"if we do add a flag to skip the collision check, here's another place to use it."
775284583,10004,oranagra,2021-12-26T21:01:34Z,let's give it an better name. `oldLib`?
775284715,10004,oranagra,2021-12-26T21:02:49Z,let's add a comment saying what's it for and what it does.
775284819,10004,oranagra,2021-12-26T21:04:38Z,still missing the arguments description
775284902,10004,oranagra,2021-12-26T21:06:06Z,"deferring length comes with a price (system calls and packets).
maybe we can use it only in case a pattern is provided, and use pre-determined length when we can."
775285285,10004,oranagra,2021-12-26T21:10:32Z,"```suggestion
        .li = li,
        .start_time = getMonotonicUs(),
```"
775285532,10004,oranagra,2021-12-26T21:13:37Z,"who knows if we'll add more args in the future..
```suggestion
        luaPushError(lua, ""third argument to redis.register_function must be a string"");
```"
775286852,10004,oranagra,2021-12-26T21:32:22Z,"this code is not specific to functions, right?
so maybe in EVAL this `if` is not reachable, but it still looks a bit odd to refer to ""functions"" here."
775287023,10004,oranagra,2021-12-26T21:34:38Z,"maybe it would be more readable to have two calls for `lua_pcall`, each with a different set of arguments."
775287451,10004,oranagra,2021-12-26T21:40:20Z,"```suggestion
    test {LIBRARIES - redis.set_repl from function load} {
```"
775288156,10004,oranagra,2021-12-26T21:51:32Z,make sure to list that interface change
775760804,10004,MeirShpilraien,2021-12-28T07:21:49Z,"No, unlink does not free the libraryInfo, it just remove it from librariesCtx"
775761442,10004,MeirShpilraien,2021-12-28T07:23:47Z,@oranagra its not related to the distributor of libraryInfo. The libraryInfo has no knowledge about which librariesCtx it is located in.
775765180,10004,MeirShpilraien,2021-12-28T07:34:53Z,Listed on the top comment.
775798184,10004,MeirShpilraien,2021-12-28T09:00:11Z,Changed to backup list
775801310,10004,MeirShpilraien,2021-12-28T09:07:48Z,Do you think its that critical? It should not happened a lot and it can actually help spot bugs (the return value is asserted).
775814500,10004,MeirShpilraien,2021-12-28T09:38:12Z,Fixed
775814601,10004,MeirShpilraien,2021-12-28T09:38:23Z,Fixed
775819773,10004,MeirShpilraien,2021-12-28T09:49:03Z,Unified to a single loop
775819872,10004,MeirShpilraien,2021-12-28T09:49:16Z,"No reason, removed."
775820074,10004,MeirShpilraien,2021-12-28T09:49:41Z,"Added here also, will also make sure to mentioned it on documentation."
775820182,10004,MeirShpilraien,2021-12-28T09:49:52Z,Fixed
775820264,10004,MeirShpilraien,2021-12-28T09:50:03Z,Fixed
775820309,10004,MeirShpilraien,2021-12-28T09:50:10Z,Fixed
775820355,10004,MeirShpilraien,2021-12-28T09:50:16Z,Fixed
775820423,10004,MeirShpilraien,2021-12-28T09:50:27Z,Fixed
775820505,10004,MeirShpilraien,2021-12-28T09:50:40Z,Fixed
775923808,10004,oranagra,2021-12-28T14:05:23Z,i see you have a few more of these redundant lines.
775924909,10004,oranagra,2021-12-28T14:08:13Z,the var name is wrong (not a ctx)
775925535,10004,oranagra,2021-12-28T14:09:37Z,"```suggestion
""      libraries with the new libraries (notice that even on this option there is a chance of failure"",
```"
775926587,10004,oranagra,2021-12-28T14:11:58Z,let's add a comment explaining the difference between the two
775927821,10004,oranagra,2021-12-28T14:15:03Z,"now it only happens in the non-happy path, but still there could be many (hundreds of) functions.
so libraryLink has two loops on that entire list (one for re-insertion, which we can't avoid), and the other one for collision check.
i think that adding an argument and a single line `if` is a very low price to pay to avoid an excessive loop which could maybe be big."
775981767,10004,MeirShpilraien,2021-12-28T16:18:22Z,"This is the variable definition, you want to not initialised it either?"
775982352,10004,oranagra,2021-12-28T16:19:50Z,"ohh, sorry, i missed the fact it creates the variable here.
ignore me."
775995571,10004,MeirShpilraien,2021-12-28T16:53:25Z,"@oranagra because there was only one place that was actually needed this verification, I moved it outside of the `libraryLink` function. Let me know what you think."
776023641,10004,MeirShpilraien,2021-12-28T18:17:09Z,Fixed
776023702,10004,MeirShpilraien,2021-12-28T18:17:17Z,Fixed
776029111,10004,oranagra,2021-12-28T18:34:59Z,LGTM
777650254,10004,oranagra,2022-01-03T18:57:41Z,extra line
777650391,10004,oranagra,2022-01-03T18:58:04Z,please add comments that are a lot more verbose
777651521,10004,oranagra,2022-01-03T19:00:45Z,"let's extract this to a function, and improve the doc comments"
777654382,10004,oranagra,2022-01-03T19:07:14Z,"@yossigo maybe we should re-consider the API name.
it can still be a different object at each time, but it can have the same name so that the user won't know he's working on a different API object.
do you think the new name serves us to avoid exposing the wrong APIs, or also serves the user to understand he's working with a different set of APIs?"
777654798,10004,oranagra,2022-01-03T19:08:15Z,add a comment why we do that
777922865,10004,MeirShpilraien,2022-01-04T09:08:00Z,Fixed
777923246,10004,MeirShpilraien,2022-01-04T09:08:34Z,Added explanations and links for further reading.
777923321,10004,MeirShpilraien,2022-01-04T09:08:41Z,Done
777923415,10004,MeirShpilraien,2022-01-04T09:08:47Z,Done
778088679,10004,oranagra,2022-01-04T13:40:43Z,"```suggestion
     * initial run is finished and all functions are registered, add
```"
778088972,10004,oranagra,2022-01-04T13:41:09Z,"```suggestion
     * There are 2 ways to achieve the last part (add default
```"
778091184,10004,oranagra,2022-01-04T13:44:34Z,"maybe also refer to `luaEnableGlobalsProtection` and explain the differences?
in which case, maybe it should be below it?"
778092123,10004,oranagra,2022-01-04T13:45:57Z,"```suggestion
        # the 'library' API is not exposed inside a
```"
778092650,10004,oranagra,2022-01-04T13:46:43Z,"```suggestion
        # (as demonstrated in this test). This is why we
```"
779471630,10004,MeirShpilraien,2022-01-06T11:08:07Z,Done
779478739,10004,oranagra,2022-01-06T11:21:45Z,"```suggestion
 * On Legacy Lua (eval) we need to check 'w ~= \""main\""' otherwise we will not be able
 * to create the global 'function <sha> ()' variable. On Functions Lua engine we do not use
 * this trick so it's not needed. */
```"
959454858,11199,oranagra,2022-08-31T11:09:20Z,"i don't like that user config.
maybe it could be the module that sets it?
maybe it can be hard coded?
or maybe no config is needed at all, and a misbehaving module / combination would cause an infinite loop?"
959461191,11199,oranagra,2022-08-31T11:15:41Z,"```suggestion
 * runs is dangerous and discouraged. In order to react to key space events with
```"
959462416,11199,oranagra,2022-08-31T11:17:17Z,maybe this should become optional (free_pd can be NULL)
959462728,11199,oranagra,2022-08-31T11:17:43Z,"```suggestion
 * In general it is dangerous and highly discouraged to write inside key space notification callback.
```"
959463604,11199,oranagra,2022-08-31T11:18:55Z,"if we end up dropping the config, we need to drop this text."
959485239,11199,oranagra,2022-08-31T11:45:09Z,"maybe it'll be a good idea to document what this module logically does, so it'll be easier to read its code.
maybe instead of the big copyright and liability statement 8-)"
959492520,11199,oranagra,2022-08-31T11:53:59Z,"```suggestion
        } {OK} {needs:debug}
```"
959493148,11199,oranagra,2022-08-31T11:54:43Z,"```suggestion
        } {} {needs:config-maxmemory}
```"
963593878,11199,MeirShpilraien,2022-09-06T11:29:04Z,"Not only a module that misbehaving can cause an infinite loop, it might be a combination of two modules that running alone will behave just right but together will cause an infinite loop. This is why I thought to protect it on the Redis level and print a warning.
If we allow module to set it then what happened if multiple modules set it? We will take the highest value?"
963620962,11199,oranagra,2022-09-06T12:07:05Z,"yes, we can take the higher value, or the sum...
not sure about the details, but i'm pretty sure it shouldn't be a user config."
973934117,11199,MeirShpilraien,2022-09-19T07:23:45Z,@oranagra I removed the configuration value and created a module API to set it. Default is 1000. I also updated the top comment.
973974911,11199,guybe7,2022-09-19T08:15:18Z,add afterDatasetChange
973975664,11199,guybe7,2022-09-19T08:16:19Z,add some tests with two modules
973976013,11199,guybe7,2022-09-19T08:16:45Z,redundant
973980061,11199,guybe7,2022-09-19T08:21:53Z,check replication order of lazy-expire inside PostJob
973986835,11199,guybe7,2022-09-19T08:30:01Z,delete empty line
977316642,11199,MeirShpilraien,2022-09-22T07:51:34Z,"It is delete, do you mean to return it?"
977368796,11199,MeirShpilraien,2022-09-22T08:38:47Z,Test was added
977387060,11199,MeirShpilraien,2022-09-22T08:55:39Z,Test was added.
977863570,11199,guybe7,2022-09-22T16:26:11Z,"perhaps we can get rid of core_propagates and use
`if (server.in_nested_call == 0)` here and `if (server.module_ctx_nesting == 0)` in the other places it's used

i think it will achieve the same goal (prevent afterDatasetChange from doing stuff while not at the top-most level of command execution)"
977863787,11199,guybe7,2022-09-22T16:26:27Z,remove
977895438,11199,guybe7,2022-09-22T17:02:01Z,please document this bugfix in the top comment
977898582,11199,guybe7,2022-09-22T17:05:47Z,please add a warning about the infinite recursion that could occur
977899108,11199,guybe7,2022-09-22T17:06:26Z,please update
977912090,11199,MeirShpilraien,2022-09-22T17:21:34Z,Lets do it on another PR? I want to keep this PR easy to cherrypick.
977921620,11199,guybe7,2022-09-22T17:32:44Z,so in that case let's drop afterDatasetChange and call  firePostKeySpaceJobs from propagatePendingCommands
977922023,11199,guybe7,2022-09-22T17:33:11Z,yes
979378474,11199,oranagra,2022-09-25T09:06:04Z,"considering the rename, and also considering #9406 and #11310, i think we should drop the `if (server.also_propagate.numops > 0)`, we can move it inside the function if needed."
979379251,11199,oranagra,2022-09-25T09:12:29Z,"i agree, i think we need to modify these `if`s to look at nesting level and other variables, and not on anything specific to propagation.

@MeirShpilraien is your comment about cherry picking because this code is already different in 7.0? or because you want the change to be conservative (not have any side effects if the feature isn't used)?

let's put the time to map the side effects of such a change so that we feel comfortable with it."
979379434,11199,oranagra,2022-09-25T09:14:19Z,"this should be done with backticks
```suggestion
 * write actions, please refer to `RM_AddPostNotificationJob`.
```"
979379652,11199,oranagra,2022-09-25T09:16:30Z,"considering #9406, #11310, and maybe other campaigns, maybe we should rename this API to be more purpose generic (not only about keyspace notifications)"
979380208,11199,oranagra,2022-09-25T09:21:42Z,"i think part of this warning is already covered in RM_SubscribeToKeyspaceEvents.
i don't think we should repeat ourselves, and also i wanna make this API more ""general-purpose"".
let's make sure all the KSN specific concerns are placed in RM_SubscribeToKeyspaceEvents, and make this one more generic"
979380487,11199,oranagra,2022-09-25T09:24:24Z,need to document that new option in RM_SetModuleOptions
979380712,11199,oranagra,2022-09-25T09:26:33Z,"the warning needs to be in RM_SetModuleOptions.
the text here can also include some hint about the warning, but should probably be kept lean."
979380993,11199,oranagra,2022-09-25T09:29:16Z,"another case where i think it's wrong to condition afterDatasetChange on a propagation related variable.
maybe it can be moved to inside afterDatasetChange if needed."
979381473,11199,oranagra,2022-09-25T09:33:54Z,"maybe do some strncmp or alike, and add a comment that it's just to smoke out issues.?"
979387724,11199,MeirShpilraien,2022-09-25T10:27:53Z,"@oranagra I want it to be conservative so we will not be afraid to cherrypick it, I can apply all your suggestions to unstable on another PR."
979389759,11199,MeirShpilraien,2022-09-25T10:48:41Z,"@oranagra I see that on #9406 we chose to go with server event and not key space notification. Do you want this mechanism to be used there as well? I am not sure its right, for key space notifications we can generally instruct not to perform any writes inside them, but for server events we will need distnguish between events and state which events are safe to write and which require this new API? I wonder if we made the right move, maybe unlink should have been a key space notification?"
979391064,11199,MeirShpilraien,2022-09-25T11:00:48Z,@oranagra I prefer to do those changes on a follow up PR so this PR will be safer for cherrypick.
979391374,11199,MeirShpilraien,2022-09-25T11:03:25Z,"Removed and add reference to `RM_SubscribeToKeyspaceEvents`. Regarding generalise the API, other then unlink (which I wrote [here](https://github.com/redis/redis/pull/11199#discussion_r979389759) I believe we should reconsider the chose we made), what other places do you think this API can be used?"
979391466,11199,MeirShpilraien,2022-09-25T11:04:21Z,"As I wrote here: https://github.com/redis/redis/pull/11199#discussion_r979391064
I prefer to do it on separate PR if you agree."
979391533,11199,MeirShpilraien,2022-09-25T11:04:59Z,As discussed with @oranagra I will remove this fix from here and will do it on separate PR.
982255550,11199,oranagra,2022-09-28T10:57:27Z,"i'm not 100% certain if unlink should be a KSN or a server event. it could go either way.
but i think it doesn't matter for the purpose of this PR.
it should be ok to say that in some server events you are allowed to do modifications and in others you're not allowed.
and i think the API name in this PR should be generic enough so that people can use it in various places."
982260366,11199,oranagra,2022-09-28T11:02:38Z,"i'm ok being conservative for a while and do some cleanup later, but for this to be effective, we need to open a big time gap between the merging of the first PR and the second.

in any case, even if we want to be conservative (i.e. avoid risk of any bugs from this change when the new API isn't used), i think we still need the code to make sense. and it's odd to see a call to `afterDatasetChange` that's inside a condition on `core_propagates`. so maybe the middle ground is to call `afterDatasetChange` unconditionally, but pass a boolean argument specifying whether or not it should call `propagatePendingCommands`"
990744372,11199,MeirShpilraien,2022-10-09T06:55:03Z,"OK, I will generalise it."
990770677,11199,MeirShpilraien,2022-10-09T10:37:30Z,"As discussed, API will be generalised but currently will be documented that it can be used on key space notifications."
992337093,11199,MeirShpilraien,2022-10-11T13:36:06Z,returned `afterDatasetChange` and called it `postUnitOperations`. rearrange `server.core_propagates` conditions will be done on a followup PR to unstable only (as discussed).
992337783,11199,MeirShpilraien,2022-10-11T13:36:44Z,Dropped
992338178,11199,MeirShpilraien,2022-10-11T13:37:03Z,API was generalised 
993218619,11199,oranagra,2022-10-12T09:23:17Z,"some comments before the call, look like they're outdated, i.e. the comment in this one speaks about lazy expiry.
maybe if the call is renamed from ""Unit"" to ""Modification"" or ""Action"" it can still make sense, but if we stay with ""Unit"" i feel we need to improve some of the comments. (even if just saying ""the following call handles that"")."
993224355,11199,oranagra,2022-10-12T09:28:50Z,"not happy with this name.
we're adding a `job` that's a `post <something>`, but it doesn't say post of what.
maybe it should also be a ""post action job"" or ""post modification job"", or a ""post execution unit job"".
@yossigo maybe you have an advise
"
993231766,11199,oranagra,2022-10-12T09:36:06Z,"ohh, now i see where ""Unit"" comes from.
if we're coining the term ""Execution Unit"" for this thing, i think we may need to mention it in a few other places, not sure where.
but at the very least, let's rename the `postUnitOperations` to `postExecutionUnitOperations`.
The term ""unit"" can be applied to so many other things, and i think ""exec"" as short hand for ""execution"" isn't good since we have a command named EXEC."
994382973,11199,MeirShpilraien,2022-10-13T09:18:35Z,So I guess we should also rename `AddPostJob` to `AddPostExecutionUnitJob`
994414404,11199,MeirShpilraien,2022-10-13T09:42:33Z,"Updated, let me know if it makes more sense now."
997586963,11199,madolson,2022-10-17T23:24:52Z,"```suggestion
int RM_AddPostExecutionUnitJob(RedisModuleCtx *ctx, RedisModulePostExecUnitJobFunc callback, void *privdata, void (*free_privdata)(void*)) {
```

For consistency with other APIs. "
997591871,11199,madolson,2022-10-17T23:36:04Z,"Are logical units = execution units? It seems like this paragraph is describing one thing, so maybe just be consistent. Either that, or I'm not sure what the difference is. "
997592051,11199,madolson,2022-10-17T23:36:31Z,Is there a corresponding issue for refactoring all of the variables? I would rather have it there then buried into the code some place. 
1009438817,11199,yossigo,2022-10-31T13:46:57Z,"Not directly related to this PR, but I think we're missing a way for a module to determine if this option is supported or not, like `RM_Get**FlagsAll.`"
1009444233,11199,yossigo,2022-10-31T13:51:55Z,"I think the terminology is confusing here - both API and implementation wise. It appears as if `ExecUnitJob` is something generic, but what it really is a `DeferredKSNCallback` (or something similar, that is more self explanatory).

My suggestion:
* Agree on the right term for this mechanism and stick to it.
* Add a return code to this function and return `REDISMODULE_ERR` if not called from within a KSN callback."
1009451521,11199,yossigo,2022-10-31T13:58:32Z,"```suggestion
 * Declare that the module wants to get nested key-space notifications.
 * By default, Redis will not fire key-space notifications that happened inside
 * a key-space notification callback. This flag allows to change this behavior
 * and fire nested key-space notifications. Notice: if enabled, the module
 * should protected itself from infinte recursion. */
```

Fixed a typo and went on a bit...

"
1009568184,11199,oranagra,2022-10-31T15:40:03Z,"@yossigo we realized we're gonna use this mechanism for more than just KSN, and we ended up coining a new term (for redis, not just modules), called ""execution unit"".
does that solves the terminology comment? do you have a better idea?"
1015635716,11199,yossigo,2022-11-07T16:29:10Z,"@oranagra My comment is about the API design, not implementation (whose details should ideally not leak through the API), so I think it's still valid.

What are we going to use this mechanism for beyond KSN? Do we think we'll expose it through Module API for other use cases? Are they well covered in the API as it's defined now?

My suggestion is to keep the API narrow and well-defined. Even if we implement it using the more generic mechanism we're creating, we should still consider the immediate use case and design the API for it."
1015778998,11199,oranagra,2022-11-07T18:45:14Z,@yossigo one example could be the unlink event we're adding in #9406
1017596946,11199,oranagra,2022-11-09T08:25:27Z,"@MeirShpilraien we discussed this in a core-team meeting.
i'm not 100 on board with that, but the decision was to narrow the scope of this API (be only about KSN), so that maybe we can extend it int he future, rather than make it wide now (a generic ""execution unit""), and later regret it.
this applies just to the API. we can keep the internal concept of execution units, where we're free to keep adjusting it, just not expose it to users via API."
1031162741,11199,MeirShpilraien,2022-11-24T08:06:08Z,@oranagra I have updated the PR and the top comment accordingly. External API specify only key space notifications.
1031169944,11199,MeirShpilraien,2022-11-24T08:14:38Z,"Created one:
https://github.com/redis/redis/issues/11536"
1031170418,11199,MeirShpilraien,2022-11-24T08:15:09Z,Fixed to execution unit
1031173557,11199,MeirShpilraien,2022-11-24T08:18:49Z,https://github.com/redis/redis/issues/11537
1031323430,11199,oranagra,2022-11-24T10:06:44Z,"i'd argue that it is related to this PR since it adds a new option and a a compatibility issue.
it's real quick to add it, i don't see a need for another PR or issue."
1031524409,11199,MeirShpilraien,2022-11-24T13:40:29Z,@oranagra added to this PR and updated the top comment.
1031668524,11199,oranagra,2022-11-24T16:05:40Z,"the API is `RM_SetModuleOptions`, so this one should be `RM_GetModuleOptionsAll` IMHO"
1031690308,11199,MeirShpilraien,2022-11-24T16:30:52Z,"Ok, will change it."
1032794748,11199,sundb,2022-11-26T14:26:38Z,@MeirShpilraien isn't redundant?
1032807676,11199,oranagra,2022-11-26T16:32:38Z,"yes, certainly redundant, i wonder how it slipped in....
admittedly, i only did incremental reviews, and didn't do a top to bottom one before merging.
please make a PR to fix."
1032875979,11199,MeirShpilraien,2022-11-27T06:42:54Z,"Yes, totally redudent, bad merge from unstable on my side (funny, I believe I also did the PR that caused the conflict and I still missed it)
Will make a PR to remove it."
1032876291,11199,enjoy-binbin,2022-11-27T06:46:25Z,@MeirShpilraien i see sundb already made the PR: #11547
1032876511,11199,MeirShpilraien,2022-11-27T06:48:43Z,"Ohh right, greate, thanks."
556123809,8315,madolson,2021-01-12T22:00:47Z,"Can we squash these two blocks together, so we don't double up on the replication cron.

```suggestion
    /* Replication cron function -- used to reconnect to master,
     * detect transfer failures, start background RDB transfers and so forth. 
     * 
     * If Redis is trying to failover then run a job to check if failover can be
     * completed. Also run replicationCron in this faster loop so if this node
     * starts sync with a master the sync handshake progresses quickly. */
    if (server.failover_end_time) {
        run_with_period(20) {
            replicationCron();
            failoverCron();
        }
    } else {
        run_with_period(1000) replicationCron();
    }
```"
556126377,8315,madolson,2021-01-12T22:05:55Z,Shouldn't this be server.master instead of cached_master? We only want to accept a failover request if we are currently connected to the master.
556134744,8315,madolson,2021-01-12T22:21:34Z,"It would be nice to have an explicit check here about the status, so we aren't running through this code. I don't think it's possible to find a replica."
556135161,8315,madolson,2021-01-12T22:22:30Z,"A nitpick, I think a clearer implementation would be to identify the replica in the conditional block, and consolidate the replicationSetMastercode + comment after.

I think we also need to break here, the current code will setMaster if multiple replicas are caught up."
556152546,8315,allenfarris,2021-01-12T22:58:37Z,I don't 100% recall the reason for this. I think that the the issue is the initial primary disconnects all replicas before issuing a PSYNC command to the targeted replica. If the replica processes the primary disconnection before it receives the PSYNC command then server.master will be NULL and failover will fail. server.cached_master will still be valid in this case and allow the failover to complete.
556156362,8315,allenfarris,2021-01-12T23:07:29Z,added a check for this
556156473,8315,allenfarris,2021-01-12T23:07:50Z,"added a break, but the consolidation was a little tricky so i did not do that"
556553460,8315,guybe7,2021-01-13T14:20:27Z,i think we should have 2 replicas connected in all tests (and use one of them for replica_host etc.)
556560246,8315,guybe7,2021-01-13T14:29:53Z,"i think the ""extra time"" should be configurable"
559225227,8315,oranagra,2021-01-17T19:14:43Z,"why REPL_STATE_TRANSFER and not REPL_STATE_CONNECTED?
do we expect this will ever be possible to lead to full sync?"
559378723,8315,oranagra,2021-01-18T08:09:20Z,"the `server.mstime` cached time is updated, no reason not to use it"
559391008,8315,oranagra,2021-01-18T08:32:44Z,"or maybe we don't have to have that extra time at all?
i.e. user provided a timeout, we can just respect that timeout, and use that timeout as a total timeout for the whole operation.
and if we sense we're already too close to the timeout (less than a second remained?), abort instead of extending the timeout and proceeding."
559405303,8315,oranagra,2021-01-18T08:58:11Z,"maybe to reduce delays, we can move the trigger to that to the actual replconfCommand?
i.e. not wait for the next cron"
559407636,8315,oranagra,2021-01-18T09:01:46Z,"nitpick, something feels wrong about the indentation of `if`s you're breking to multiple lines.
this one stands out more than others.

in many of them i think we can avoid it and keep them in one one.
or if we do break them to multiple lines, i think the way other parts in redis indent the other lines to the opening `(` of the `if`, and then put the `{` in a line of it's own."
559411289,8315,oranagra,2021-01-18T09:08:15Z,"i suppose you meant to delete the other call above to 
```c
run_with_period(1000) replicationCron();
```"
559413683,8315,oranagra,2021-01-18T09:11:59Z,"considering the default hz (when there are not many clients) is 10, (a cron tick per 100ms), this `20` may be misleading, it'll not actually run that many times normally.
i would feel more comfortable seeing 100 here, and if we conclude that's not enough maybe we need to find another solution. (like immediate triggers, tapping into specific commands / replies and beforeSleep)

as i stated, some parts of that failverCron function can be immediately triggered when REPLCONF ACK is received."
559416709,8315,oranagra,2021-01-18T09:17:03Z,"i think it would make more sense to call this command `FAILOVER`.
FAILOVERTO suggests that we already have a FAILOVER command and this one is a variant of it.

how about:
```
FAILOVER [TO <host> <port>] [TIMEOUT <timeout>] [FORCE]
```
then we don't have to have the special `ANY ONE` thing.

p.s. the FORCE argument wasn't documented here."
559425705,8315,oranagra,2021-01-18T09:30:48Z,"considering that the failover has several states (as evident by the code in `failoverCron`), i think it would be nice to show the current state here, maybe similarly to how `master_link_status` is shown.

unless after reviewing my other comments we eliminate these stages, and have just one (waiting for the offsets to match)"
559429029,8315,oranagra,2021-01-18T09:35:30Z,do we have test coverage for this case?
559440657,8315,oranagra,2021-01-18T09:53:08Z,"calling `replicationSetMaster` at this point is equivalent to getting a REPLICAOF command.
why do we need to keep tracking the failover and extending the timeout?
at this point can't we just terminate the whole operation?
i.e. from this point forwards we're a replica, and we don't need the CLIENT PAUSE anymore.

the bonus is that we get rid of the extra FAILOVERTO_TIMEOUT.
if we don't do that, then maybe we should remember the original timeout and use it, rather than the fixed 5 seconds here."
559441017,8315,oranagra,2021-01-18T09:53:44Z,is this case covered by the test?
559492970,8315,oranagra,2021-01-18T11:16:41Z,"i was gonna comment that it would be a nice idea to have background traffic.
reading this comment and the CLIENT PAUSE i wonder if i'm missing anything?"
559497129,8315,oranagra,2021-01-18T11:23:49Z,"FYI, you have `wait_for_ofs_sync` in util.tcl"
559497932,8315,oranagra,2021-01-18T11:25:18Z,this will really slow down the tests by 5 seconds (think we wanna try hard to avoid such a thing). making that timeout configurable in some way would speed up the tests.
559509018,8315,oranagra,2021-01-18T11:45:27Z,"i think many of these tests can be improved to add some additional assertions.
like looking at the `sync_full`, `sync_partial_ok` counters.
or maybe also using `verify_log_message`  to make sure the intended flow really executed."
559527202,8315,oranagra,2021-01-18T12:18:33Z,"I think we need to cover a case were the replica doesn't support the new FAILOVER argument for PSYNC.
I think it would be good enough to just block the PSYNC command entirely with ACL (it would be similar to getting an arity error."
559538568,8315,oranagra,2021-01-18T12:39:17Z,I suppose we do. in which case i think we need to add a test to cover it.
559904183,8315,madolson,2021-01-19T04:18:03Z,If you want to force it yeah. Test can be added.
559955557,8315,madolson,2021-01-19T07:12:29Z,Nice
560546505,8315,madolson,2021-01-19T22:38:17Z,"Will remove second part of timeout, so this test is out."
560547757,8315,madolson,2021-01-19T22:40:41Z,"This is the regular failover timeout, so there is a test for this."
560548199,8315,madolson,2021-01-19T22:41:37Z,I think this is addressed.
560548429,8315,madolson,2021-01-19T22:42:10Z,"Yeah, this is the case where the second half of the handshake (waiting to move to state transfer) times out. Since this is getting dropped, this code should be clearer."
560674914,8315,madolson,2021-01-20T04:41:56Z,"I'll add the partial syncs. I generally dislike checking log messages, it feels too much like whitebox testing, would rather test to behavior is correct then the right logs showed up."
560675115,8315,madolson,2021-01-20T04:42:47Z,I'll add a test for background traffic.
560675312,8315,madolson,2021-01-20T04:43:35Z,I think the better fix is just to trigger the failoverCron (or replicationCron generally) from replconf. Will look into it.
560675391,8315,madolson,2021-01-20T04:43:54Z,"There is 3 states, so updated to show those 3 states."
560675849,8315,madolson,2021-01-20T04:45:41Z,"This code has been removed, since the failover doesn't rollback here."
561709320,8315,oranagra,2021-01-21T09:08:29Z,"maybe we wanna error here rather than proceed ignoring the ""failover"" argument?"
561762382,8315,oranagra,2021-01-21T10:26:26Z,"i think the TO argument can be optional, this way we don't need the ANY ONE trick.
```suggestion
 * FAILOVER [TO <HOST> <IP> [FORCE] ] [TIMEOUT <timeout>] 
```"
561769852,8315,oranagra,2021-01-21T10:37:14Z,"if we change TO to be optional, the arity needs to change"
561773479,8315,oranagra,2021-01-21T10:42:45Z,"let's match DEBUG DIGEST here.
probably wise to do this on all tests below."
561774927,8315,oranagra,2021-01-21T10:44:58Z,any specific reason you're using redis-benchmark and not the TCL `start_write_load` ?
561778608,8315,oranagra,2021-01-21T10:50:33Z,"did you mean to do this SIGCONT later?
seems like the forceful failover isn't taking place here (a normal failover happens).
or am i missing anything?
let's use `verify_log_message` to make sure a forceful failover happened.
and let's validate the old master managed to do a `sync_full`

i guess we can also test DEBUG DIGEST here (after the old master performs full sync).
but if not, let's at least validate neither of them go empty (DBSIZE)"
562064189,8315,madolson,2021-01-21T17:27:42Z,"I was trying to document it like it was one command with two subcommands. Otherwise it would look like this:
```
FAILOVER [TO <HOST> <IP> [FORCE]] [TIMEOUT <timeout>] [ABORT]
```
Which I find much harder to follow. "
562064719,8315,madolson,2021-01-21T17:28:22Z,"Sure, easy to do."
562068657,8315,madolson,2021-01-21T17:33:43Z,"There is still failover abort, which is just 2 arguments."
562087860,8315,oranagra,2021-01-21T18:01:45Z,"ok. got it.. but if it's a sub-command, i'm still not sure the `TO` is a good sub-command.
maybe the sub-command should be something like `START`, and `[TO <host> <port>]` would still be an optional argument."
562088568,8315,oranagra,2021-01-21T18:02:55Z,"i meant that if TO is optional, then the arity would be `-1`"
562166153,8315,madolson,2021-01-21T20:10:03Z,"Sorry, I now understand what you are getting at, ""FAILOVER"" by itself would pick a replica and failover. I still like the current wording, I'll address all the other comments and then ping the group about what the command will be named like."
562171605,8315,oranagra,2021-01-21T20:20:04Z,"yes.. the main ""advantage"" is that TO becomes optional and we don't need to use the ""ANY ONE"" trick"
562412676,8315,madolson,2021-01-22T06:23:56Z,"Yeah, this test can work as expected, but it's purely contingent on the fact the cron doesn't run that often. Made this test much more robust and added the additional needed tests."
562412781,8315,madolson,2021-01-22T06:24:17Z,"I did not know about start_write_load :) (If you haven't noticed, we don't use TCL at AWS)"
564236094,8315,oranagra,2021-01-26T05:52:07Z,"```suggestion
 * FAILOVER [TO <HOST> <IP> [FORCE] ] [ABORT] [TIMEOUT <timeout>]
```"
564240316,8315,oranagra,2021-01-26T05:56:08Z,"```suggestion
```"
565378539,8315,yossigo,2021-01-27T15:01:14Z,"```suggestion
        serverLog(LL_NOTICE,""FAILOVER requested to %s:%d."",host,port);
```"
565380752,8315,yossigo,2021-01-27T15:04:00Z,Maybe expose the rest of the failover state? Attaching to an instance stuck in failover that can be valuable debugging info I believe.
565385720,8315,yossigo,2021-01-27T15:09:48Z,Not in use anymore.
565391911,8315,yossigo,2021-01-27T15:17:00Z,"One issue here is `replicationSetMaster()` terminates all replicas (and blocked clients etc.) before establishing the connection to the master and beginning `PSYNC`.

I think it's a good start but maybe we should be leaving a message to our future self here to address that in future refactoring. Ideally, we could first set up the connection and do initial `PSYNC` negotiation, and only then drop everything."
565398880,8315,yossigo,2021-01-27T15:24:48Z,"```suggestion
    mstime_t failover_end_time; /* Deadline for failover command. */
```"
565402104,8315,yossigo,2021-01-27T15:28:36Z,Consider defining `node_N_pid` to make it more readable.
565414138,8315,yossigo,2021-01-27T15:43:02Z,"I'd consider another test case - `PSYNC` initiated but not completed, thus we remain in failover/paused state to avoid two masters."
565610419,8315,madolson,2021-01-27T20:26:08Z,"I agree, there is more optimizations to be done here. Would we prefer this being an issue or a comment in the code?"
565611996,8315,madolson,2021-01-27T20:28:54Z,"Port is currently read in as a long, I think this is just to be parity with replicaof which does the same validation."
565614321,8315,madolson,2021-01-27T20:33:07Z,"Since the force test already simulates this case, I added asserts there to make sure `failover-in-progress` state puts everyone to slaves."
565618862,8315,madolson,2021-01-27T20:41:08Z,I'm going to put a note at the top of the function about the side effects.
565623580,8315,madolson,2021-01-27T20:49:22Z,"I thought about this, so when we are in the failover state, our master/host values will be set and timeout isn't valid. That should be enough to debug what is going on. If we are in the sync state, the data is available through our offset and the slaves section, and I'm not sure if adding timeout is that useful.

We can add more data here, but I think there is enough to investigate right now."
565625303,8315,yossigo,2021-01-27T20:52:28Z,I think at this point it's more likely to be noted as a comment
565626542,8315,yossigo,2021-01-27T20:54:42Z,But `target_replica_port` is an int...
665854625,8315,enjoy-binbin,2021-07-08T04:06:47Z,"@oranagra I feel there is a missing return here?

I happen to use `psync runid offset failover` in redis-cli, the interactive behavior is a bit strange

oh.. maybe i am missing something. Don't bother..."
665895021,8315,oranagra,2021-07-08T06:07:18Z,"@enjoy-binbin i don't think there's a return missing, but feel free to show me where i'm wrong (i didn't debug it).

keep in mind two things:
1. PSYNC is not intended to be used from redis-cli, it's a command one redis server sends to another, not a user command.
2. PSYNC FAILOVER is a command sent by a master to one of its replicas, it does two things
    - promote the replica to be a master (few lines above this comment).
    - the old master (the one sent the PSYNC command) attempts to psync from that replica (which is why we need to keep running the bottom part of this function (the return will break it)"
543401685,8170,oranagra,2020-12-15T14:38:27Z,"i'm concerned about this loop (server with an immense number of client can choke on it).
i actually imagined we'll have a list of clients that got blocked, there's a chance that many didn't get blocked either because they're inactive, or because they didn't issue write commands.

if we have a list, we can fuse it into the other list without even iterating, and take care of the flags in processUnblockedClients.

while on that subject (of looping though clients), maybe we need to somehow throttle the unblocking in processUnblockedClients, in case many clients got unblocked at the same time, maybe we should defrost them gradually."
543423369,8170,oranagra,2020-12-15T15:03:41Z,"if we keep this var, i rather it'll move to the top (can be used for other checks some day)"
543432778,8170,oranagra,2020-12-15T15:14:50Z,"I don't think we wanna check for `CMD_READONLY`, i think we should check for `!CMD_WRITE`.
Seems to me that we do wanna allow non-keyspace commands like PING, INFO, CLIENT, SHUTDOWN, CONFIG etc.
And even basically any command that's not writing to the keyspace, like DBSIZE.
other examples off the to of my head (not already mentioned above): ACL, DEBUG, RESET, WATCH, DISCARD, SELECT, SYNC, SUBSCRIBE and MULTI / EXEC (both already handled in your code explicitly).

I suppose PUBLISH is ok too (doesn't propagate to replicas, so it's ok, right?)

The tricky part is EVAL (which we don't know it's content, and PFCOUNT (which is a ready-only, which **does** increment server.dirty).
i suppose we can explicitly block EVAL for now, and either add some code to PFCOUNT that will avoid the conversion and propagation, or block it too.
Modules already have the `RM_AvoidReplicaTraffic` (which i think you should fix to only look at the RO pause flag)"
543926422,8170,madolson,2020-12-16T04:22:09Z,Ack
543927637,8170,madolson,2020-12-16T04:23:52Z,"Yeah, I was hoping this might save some effort, but while talking it through internally !Write is probably the way to go."
543952895,8170,madolson,2020-12-16T04:58:03Z,"Ack about the second list, that's a reasonable optimization. 

I think we should probably serve the clients that have been blocked immediately? It doesn't seem right to slowly unblock them."
546961452,8170,madolson,2020-12-21T22:29:27Z,Looks like this further relates to the PR you just put up as well. 
547151871,8170,oranagra,2020-12-22T08:59:32Z,"LOL. this is the flag i was trying to avoid adding in #8216 (and eventually found a better way without it).
I suppose we do need to add that flag (the alternative being to explicitly check a specific list of commands).
do we want to expose it to clients in COMMAND command?"
547152839,8170,oranagra,2020-12-22T09:01:33Z,i wish we could make this an `enum`.
547154422,8170,oranagra,2020-12-22T09:04:56Z,maybe you better nullify paused_list_node after doing that.
547157461,8170,oranagra,2020-12-22T09:11:06Z,"we don't want to consider any exec a write command, only ones that contains a write command.
```suggestion
    int is_can_replicate_command = (c->cmd->flags & (CMD_WRITE | CMD_CAN_REPLICATE)) ||
                           (c->cmd->proc == execCommand && (c->mstate.cmd_flags & (CMD_WRITE | CMD_CAN_REPLICATE)));
```"
547176474,8170,oranagra,2020-12-22T09:48:34Z,"i guess that SCRIPT LOAD, and PUBLISH commands needs that too.
basically any command that calls forceCommandPropagation.
maybe we even want to add an assertion on c->cmd in forceCommandPropagation?"
547553205,8170,madolson,2020-12-22T23:19:29Z,"nice, I really think pfcount should not modify the underlying structure, so this flag is really just for scripts and modules that execute scripts they can't pre-validate.I'll update the Command Command."
547555263,8170,madolson,2020-12-22T23:26:19Z,"We could use a macro like getFlag(CMD_MODULE_GETKEYS), where CMD_MODULE_GETKEYS is just a regular enum. The macro would do the bit shifting, since it'll still all be known at compilation time, it should optimize it the same way.

It doesn't seem overly worth it to me."
547556114,8170,madolson,2020-12-22T23:29:16Z,Good point.
547559066,8170,madolson,2020-12-22T23:40:12Z,"So, the reason I originally didn't add this is you can multi-exec a client pause with a write, which is probably stupid. I added a log in propagate to identify that something bad happened."
547571780,8170,madolson,2020-12-23T00:30:36Z,Can you explain the point of the assertion in forceCommandPropagation that you proposed?
547579474,8170,madolson,2020-12-23T00:59:52Z,"Later comment showed there were some other commands as well, so I guess this makes sense."
547988635,8170,oranagra,2020-12-23T14:36:51Z,"to make sure that we don't add a some future command that uses forceCommandPropagation and isn't marked with either `write` or  `can-replicate`.
maybe we should also have such assertion in the call to `propagate()` in `call()`."
547989980,8170,oranagra,2020-12-23T14:39:51Z,"so you mean you're gonna apply my suggestion, right?"
548047994,8170,madolson,2020-12-23T16:45:17Z,"Oh, that assert seems reasonable. I thought about adding one in the propagate path, but there are ways you can get there like multi-exec'ing a client pause + a write. I throw a warning there now, which isn't great."
551900761,8170,oranagra,2021-01-05T12:26:22Z,"this one is missing a comma, right?
```suggestion
""    Stop the current client pause, resuming traffic."",
```"
551906495,8170,oranagra,2021-01-05T12:38:44Z,"i think the name `unpauseClients` is a bit misleading, can be improved.
i.e. it doesn't always unpause. maybe `unpauseClientsIfTimeout`?
not not.. if you agree try to find a better name, if not, leave it as is."
551907178,8170,oranagra,2021-01-05T12:40:14Z,"the name of this function was always bad (misleading, hides it's side-effects).. i see it is used in only 10 places, maybe we want to consider renaming it."
551908893,8170,oranagra,2021-01-05T12:44:00Z,"maybe add an uppercase ""WARNING"" to that message? would increase chance of it being noticed.
or maybe we want an assert here?"
551911516,8170,oranagra,2021-01-05T12:49:20Z,"```suggestion
        flagcount += addReplyCommandFlag(c,cmd,CMD_CAN_REPLICATE, ""can_replicate"");
```"
551912468,8170,oranagra,2021-01-05T12:51:13Z,"can't we use a wait_for_condition here?
we do want to fail if timeout was reached"
551915003,8170,oranagra,2021-01-05T12:56:17Z,"i don't particularly like the 1 second delay we're adding to the tests here.
we send the GETACK request in every cron, so normally it would unblock after 100ms.
maybe we want to reduce the timeout? or find another way?

for instance, we can use `attach_to_replication_stream` to see what's exactly going into the replication stream."
551919597,8170,oranagra,2021-01-05T13:05:50Z,"it just occurred to me that maybe it would be nice to also have a READ pause feature.
i.e. one that will still allow PING, INFO, CLIENT, SHUTDOWN, but will refuse GET, DBSIZE and any access to the keyspace.
what do you think? (should be very easy to implement now)"
552115585,8170,JimB123,2021-01-05T18:30:09Z,"A really awkward line and difficult to read.
* `clientsArePaused` seems like a boolean function.
* It's actually used as a boolean function in this update (`db.c`).
* However, here it's being compared against an enumerated/defined value which blows my expectations.
* The double-negative is hard to read.  ""OFF"" is negative and the `!` is negative.
* So I'm left wondering, why was this line changed?  Is this actually a boolean routine?  Or does it return some type of enumerated value?  If it does return an enumerated value, is the change in `db.c` correct (where this is being used as a boolean function)?"
552123304,8170,JimB123,2021-01-05T18:45:17Z,"I also commented on this above.  The function used to be boolean, but now that's no longer the case.

Looking at how it's used, I suggest that you retain the original boolean behavior
`return (server.client_pause_flags != CLIENT_PAUSE_OFF);`
There's no reason to complicate the usage by returning the specific flags.  If a caller is interested in the actual flags, they can always be retrieved globally."
552127828,8170,JimB123,2021-01-05T18:53:57Z,Would it be better to use the monotonic clock for these times?
552138618,8170,JimB123,2021-01-05T19:15:10Z,"2 things:
* Maybe use ""may-replicate"" or ""might-replicate"" - because ""may"" conveys that there is a *possibility* that the command might generate replication.  ""can"" doesn't generally imply ""possibility"".  (It implies permission or ability.)
* I don't like having the comment say ""only used for client pause"".  These flags provide information about the command.  We should be thinking about the meaning of the flag in relation to the command, not in relation to how we think that flag would be used.

So, instead say something like:
`might-replicate:  Command is not formally a ""write"" command, but may still produce replication.  This applies to non-keyspace commands like PUBLISH and also commands like EVAL which are not formally ""write"" commands, but may generate replicated writes.`"
552145101,8170,JimB123,2021-01-05T19:26:42Z,"(I can't leave the comment on the unmodified line above.)

Shouldn't EXEC be marked as ""can-replicate""?  It seems like maybe you've worked around this elsewhere in the code, but I think that EXEC should be marked.

I know that for your use case, you are using the accumulated flags from the commands in the EXEC.  You have logic something like:  `If can_replicate || (EXEC and m.flags==can_replicate)`

You could do:  `If can_replicate && !(EXEC && n.flags != can_replicate)`
I agree that this logic is more complicated to read, but it creates a more solid definition around the meaning/use of the new flag."
552149774,8170,JimB123,2021-01-05T19:35:32Z,"From the logic above, it seems that it's possible to have both CLIENT_PAUSE_WRITE and CLIENT_PAUSE_ALL active at the same time.

If so, and one of the pauses completes, all clients will be unblocked even though some might still need to be blocked.  For example, if CLIENT_PAUSE_WRITE completes, but CLIENT_PAUSE_ALL is still active, all clients will be unblocked (incorrectly).

Is this intentional, with the expectation that they will be reblocked when processed?  It seems that we should check each client before unblocking."
552157166,8170,JimB123,2021-01-05T19:50:09Z,"This is small, but I think it might be useful to break this code out into a separate function - and maybe this new function would fit better in `networking.c`.  I think this might be a common action whenever a client (with command) is taken out of the normal processing path and later re-activated.

Also, is there a reason why an unblocked client might not have CLIENT_PENDING_COMMAND?"
552161771,8170,JimB123,2021-01-05T19:58:54Z,"After a client is unblocked (put into the unblocked list), how can a client get reblocked before leaving the unblock queue? I'm thinking that this flag should always be clear here. Maybe add an assertion to ensure/document?

I'm thinking that once a client is unblocked, we would call `processCommandAndResetClient()` (always) and then check CLIENT_BLOCKED before calling `processInputBuffer()`.  (But as mentioned in the comment, `processInputBuffer` must check that anyway, so the additional check is not needed here.)

If this code is extracted and moved to `networking.c` it would reduce the logic bleed between modules."
552176858,8170,madolson,2021-01-05T20:30:01Z,"yup, C just happily concatenated them :)"
552186327,8170,madolson,2021-01-05T20:49:53Z,"I think the problem is that it has the side effect of unpausing clients. I tried decomposing it a little bit. It's a little more verbose, but hopefully more readable."
552186593,8170,madolson,2021-01-05T20:50:27Z,See previous comment.
552195230,8170,oranagra,2021-01-05T21:07:57Z,"Yes, it was worse before (looking as a gettter or checker function and now it's better) since it's clear it takes action, but it doesn't always take action, and that's still a bit misleading"
552198488,8170,oranagra,2021-01-05T21:14:42Z,"I wanted to comment about it too, but decided to skip it. 
The `!(a==b) ` is odd. 
I do think the function can keep returning a bit flag, but the check here should be `!=OFF` (or a simple `!!` we wanna count on Off being 0, and need to convert it to true boolean (less clean) "
552200747,8170,madolson,2021-01-05T21:19:21Z,"I can do that. I was torn about asserting specifically because people are using this to failover, it's probably one of the worst times to crash. "
552200829,8170,madolson,2021-01-05T21:19:33Z,yup
552207401,8170,oranagra,2021-01-05T21:27:52Z,"In theory, you're right. Since the flag is named ""might"", we can set it to EXEC and then write code to ignore it. 
But that logic can be applied to any other flag (if we try to put aside the ""might"" part). 
I. E. We can set the OOM flag and others. 

I'd like to offer a different way of thinking about EXEC: it's not a command, it's part of the redis client protocol. It would be wrong for anyone to look at its flags. Instead one must always looks the the flags of the commands inside it. 

Maybe it would have been better if it wasn't in the command table, but rather implemented like QUIT is. 

Anyway, I vote to keep the code s it is. "
552211067,8170,madolson,2021-01-05T21:31:57Z,wait_for_condition is much better
552212776,8170,madolson,2021-01-05T21:34:09Z,"We use server.mstime, so it's effectively free. We also don't need monotimes high precision."
552214229,8170,oranagra,2021-01-05T21:37:01Z,"I want some way to catch this in the test suite. 
We can maybe add some keyword that there tests search for in the logs. 

On the other hand, out philosophy so far was to crash when something unexpected happens.. We may cause someone some damage, but at least we'll learn about the problem, and fix it asap instead of keeping buggy code that can cause data corruption or inconsistencies. 

I'm not certain if this one falls under this philosophy, or we wanna be more careful here. But at the very least the warning should be bolder. "
552215860,8170,madolson,2021-01-05T21:40:37Z,"It behaves as you suggested, it just reprocesses everything."
552216281,8170,madolson,2021-01-05T21:41:36Z,IO threads can queue up clients with fully formed commands and uses this flag. I like the suggestion for the function. 
552216733,8170,madolson,2021-01-05T21:42:34Z,I don't really follow this comment.
552223208,8170,madolson,2021-01-05T21:56:52Z,"I'm pretty sure the meaning of can/may has degraded in the US language, but I like the sound of may more anyways. Might is also the future tense, so that doesn't feel right. 

I'm going to intentionally not conflate it with write commands, since this is any commands that replicate data over the replication stream. We've talked about pulling out a separate channel for non-writes, and at that time we might revisit this. "
552223513,8170,madolson,2021-01-05T21:57:34Z,"The original documentation of clientsArePaused, is just that it returns non-zero, so it's checking against zero. It seems like the wrong choice to keep that, so now it behaves like a bool as expected. "
552224087,8170,madolson,2021-01-05T21:58:56Z,"I'm not convinced it's useful. If there is a usecase you think makes sense, I agree it'll be straightforward to implement. "
552224530,8170,madolson,2021-01-05T21:59:54Z,"I was copying the pattern from above, mind if this get's punted to a separate PR? The wait tests currently take like 10 seconds.

"
552252042,8170,madolson,2021-01-05T23:06:50Z,I agree with Oran.
552252304,8170,madolson,2021-01-05T23:07:33Z,"I changed my mind, this code is complex, and just having one type will simplify everything."
552256780,8170,madolson,2021-01-05T23:20:07Z,"I'll update to add an assert. This will break backwards compatibility in one way, you will no longer be able to do:
```
MULTI
CLIENT PAUSE
SET FOO BAR
EXEC
```
Since that would violate this constraint."
552307965,8170,JimB123,2021-01-06T01:10:41Z,"The client was blocked.  It was then unblocked and put onto the unblocked list.  Now we are processing that list...

At this point, how can CLIENT_BLOCKED be set?  If it's set, we shouldn't have moved it to the unblocked list, right?

I agree that the client can be re-blocked AFTER calling `processCommandAndResetClient`, but I'm not sure how the client can be blocked at this line."
552316998,8170,madolson,2021-01-06T01:44:16Z,"Oh, I think the comment ""the code is conceptually more correct this way"" is the only reason this is there."
552317472,8170,madolson,2021-01-06T01:45:58Z,I found a semi-ok work around.
552393415,8170,oranagra,2021-01-06T06:28:09Z,"one usecase would have been during loading, and busy scripts.
instead of responding with error to all requests, we can just postpone them.
this can make the life of users much easier (kinda like the annoying EAGAIN retry that's needed just because the process got and handled a signal).
but i agree we can leave this for a later stage."
552393948,8170,oranagra,2021-01-06T06:30:09Z,"ok, we'll handle it some other day."
552398270,8170,oranagra,2021-01-06T06:45:12Z,"i'm not certain we have to support that. why would someone do that?
why wouldn't they do
```
MULTI
SET FOO BAR
CLIENT PAUSE
EXEC
```
seems more straight forward.

is there are real use case for that, or are we just concerned not to break something that users may already be using?"
552401269,8170,oranagra,2021-01-06T06:55:16Z,"this is a bit odd.
either re-instate the comment saying:
```
            # The values are equal when they're both logically	
            # expired.	
```
or just check that both come back empty? `[r get foo] == {} && [r get bar] == {}`"
552402035,8170,oranagra,2021-01-06T06:57:49Z,let's add `$rd close` at the end
552404290,8170,madolson,2021-01-06T07:05:59Z,"Doing the set before the CLIENT PAUSE is more sensible, but it will still trigger the assert as long as CLIENT PAUSE is sent in a MULTI-BLOCK that propagates something. Since it's within a MULTI-BLOCK, the final exec will always propagate at the end of the block. Since client pause will now be active, that will trigger a crash. 

I don't think it's a likely case, but it seems possible someone might trigger it. I think the assert is really useful as you mentioned, to make sure we're being correct here."
552405923,8170,oranagra,2021-01-06T07:12:04Z,"we normally don't add an explicit option which is the same as the default.
i.e. `CLIENT PAUSE` and `CLIENT PAUSE ALL` are the same.
i admit it has its pros, but i still wonder why you did that?"
552408450,8170,madolson,2021-01-06T07:20:04Z,"This was based on your comment we might add more types. They will all be mutually exclusive, so it's more that this an enum type. "
777429914,10043,oranagra,2022-01-03T11:46:38Z,"`utils/generate-command-help.rb` can be deleted.
and maybe update a comment in `tests/support/util.tcl` that refers to `help.h`"
777430497,10043,oranagra,2022-01-03T11:48:04Z,"i know redis-cli is a bit less consistent about that than redis, but i think we should avoid introducing new code with line comments."
777549561,10043,oranagra,2022-01-03T15:38:18Z,note to self. check if everything works with both RESP3 and RESP2
777550414,10043,oranagra,2022-01-03T15:39:43Z,"note to self, test how this works with old redis versions."
777550755,10043,oranagra,2022-01-03T15:40:13Z,FYI #10028 
777552432,10043,oranagra,2022-01-03T15:43:06Z,"styling in redis is usually that on multi-line `if` the opening bracket is on the next line, but on `if-else` it's on the same line.
e.g. 
```suggestion
        !strcmp(type, ""token""))
    {
        repeatPart = sdscat_orempty(repeatPart, name);
    } else if (!strcmp(type, ""oneof"")) {
        repeatPart = cliConcatArguments(repeatPart, arguments, ""|"");
    } else if (!strcmp(type, ""block"")) {
```"
777555381,10043,oranagra,2022-01-03T15:48:00Z,"what are these checks?
please add a comment, but also, i couldn't find that we used these, and maybe we should check others?"
777683268,10043,jhelbaum,2022-01-03T20:14:27Z,Oops - I haven't written much C lately. (I assume you're referring to the double-slash.)
777683690,10043,jhelbaum,2022-01-03T20:15:32Z,Is there any kind of style guide?
777684095,10043,jhelbaum,2022-01-03T20:16:28Z,These checks were in the original code. Apparently they're some kind of sanity check on the output of COMMAND? It's not clear to me why these specific checks appeared but not others.
777700359,10043,oranagra,2022-01-03T20:57:03Z,"no.. just looking at the code around you and try to mimic it's style.
but sadly, redis-cli is not very consistent with the rest of redis (which isn't very consistent with itself)"
777700783,10043,oranagra,2022-01-03T20:58:05Z,"since we're revamping this area, i think we should take this opportunity to change this, or document what exactly it's for.."
781360612,10043,jhelbaum,2022-01-10T16:40:47Z,So I'll put this on hold until that PR is finalised.
781370777,10043,jhelbaum,2022-01-10T16:52:22Z,"Okay, these checks were added in b6ab4d0: ""Fix redis-cli rare crash. This happens if the server (mysteriously) returns an unexpected response to the COMMAND command.""

Basically, the code checks that each of the fields it intends to read from the COMMAND reply array actually exists and has the correct expected type. If not, it returns early with no error message.

If we want to maintain the equivalent behaviour, these checks should be removed (except for `element[0]`), since the new code doesn't read the same fields, and the command parsing code in `cliInitCommandHelpEntry()` should check the validity of each field before reading it."
784436618,10043,jhelbaum,2022-01-14T01:03:30Z,Done.
784437060,10043,jhelbaum,2022-01-14T01:04:46Z,"No longer relevant - the code now only retrieves COMMAND DOCS, which doesn't exist on old versions."
784437233,10043,jhelbaum,2022-01-14T01:05:19Z,"I've replaced these checks with type assertions throughout the code, which also seems more consistent with the rest of the file."
784762883,10043,oranagra,2022-01-14T11:16:49Z,"still need to test how it works on old versions (should at the very lest not explode).
is there absolutely no benefit of using the old COMMAND command?"
785541313,10043,jhelbaum,2022-01-16T23:17:24Z,"Now that you mention it... The old (i.e., current) implementation uses the output of COMMAND to generate stub help entries for commands not in the help.h file, with parameters named ""key"" and ""arg"". I presume this was used for dynamically-loaded commands such as modules. 

If we want, we can use this as a fallback mechanism in case COMMAND DOCS is unavailable, presumably when connecting to a previous version of the server. If we want to do that, we could call COMMAND INFO if COMMAND DOCS doesn't exist.
"
785769108,10043,oranagra,2022-01-17T09:19:10Z,"the value of doing that seems low (showing ""arg"" and ""key""), so we can choose to do that only if the effort is low too.
but what about showing a list of commands or auto-complete / suggest command names?"
785817624,10043,jhelbaum,2022-01-17T10:16:29Z,"COMMAND DOCS contains all the command and subcommand names, so that should already be covered."
785819923,10043,oranagra,2022-01-17T10:19:10Z,i meant that this part of the CLI help can keep working on old redis versions if we fallback to COMMAND command.
785825923,10043,jhelbaum,2022-01-17T10:26:30Z,"Oh, right. Yes, that's an option. Ultimately, this is a product decision: what level of help support do we want to maintain for old server versions? And how much code is worth maintaining for that purpose?"
785827224,10043,oranagra,2022-01-17T10:28:14Z,"as i said, i don't see much value in the ""arg"" and ""key"" tips.
listing the commands is nice, but that's also low value, so only if the cost is low."
786143636,10043,jhelbaum,2022-01-17T16:12:27Z,"Okay, I added the command names from COMMAND as a fallback. I don't think it's too much code to support, but it also gives only limited benefit. It doesn't even have subcommand names."
792197891,10043,jhelbaum,2022-01-25T23:08:39Z,"FYI: Under RESP3, the ""arguments"" field appears to be returned as a SET. This seems odd, as command arguments are ordered."
792386036,10043,oranagra,2022-01-26T08:03:54Z,@guybe7 can you please make a PR to fix this?
792450895,10043,guybe7,2022-01-26T09:30:42Z,https://github.com/redis/redis/pull/10188
792657830,10043,oranagra,2022-01-26T13:52:26Z,"redis usually uses this style
```suggestion
        } else if (!strcmp(key, ""token"")) {
```"
792724588,10043,oranagra,2022-01-26T14:58:51Z,"do we really need these asserts?
what if the config.resp3 is outdated (we meant to use resp3, but fails, and didn't update the config).
i think we can just handle both types, no need for these asserts."
792749423,10043,oranagra,2022-01-26T15:21:02Z,"we're using this just to show the `since` when user types ""help"", right?
maybe we should do the same with the `history` entry?
or maybe drop both?
i.e. it was useful in the past in case you used a new redis-cli with an old redis-server (so you get indication of things you might not be able to use).
but now when you get the hints that are relevant for the same version you're using, why do we need it?"
792761323,10043,oranagra,2022-01-26T15:32:05Z,"ohh, does this mean that the other assertions down the line are not reachable?
still i think we shouldn't look at `config.resp3`, and instead just be able to handle both types silently."
792777598,10043,jhelbaum,2022-01-26T15:47:40Z,"Would you get rid of all the asserts? I just put them in for consistency. There are element type assertions elsewhere in the file. Or I could change this assert to accept either type. The actual handling code is the same either way.

If the reply data is wrong for some reason, the code will crash somewhere. If it doesn't crash on an assertion it will crash somewhere else. I don't have a strong attachment to the asserts, though. Whatever makes sense to you."
792779145,10043,jhelbaum,2022-01-26T15:49:09Z,"Makes sense. So just drop ""since"" from the help output? They can always look it up online if they're just curious about the history.
"
792781940,10043,jhelbaum,2022-01-26T15:51:46Z,"Basically, the effect of this `return` is that if the reply from `COMMAND DOCS` is insanely wrong, it will skip initializing the help data and run without help or hints. If it gets past this, then any failed assertion will crash the CLI."
792782804,10043,jhelbaum,2022-01-26T15:52:36Z,Maybe all the asserts in the help initialization should just silently abort loading the help data and return control to the command line?
792810857,10043,oranagra,2022-01-26T16:20:17Z,"i'm ok with the assert, i just don't think we should depend on `config.resp3` (in asserts or `if`s`, but rather just handle what we can, and fail on what we can't handle)"
792811209,10043,oranagra,2022-01-26T16:20:37Z,this pattern exists in several other functions you added.
792812593,10043,oranagra,2022-01-26T16:21:59Z,"i'm ok with both the asserts and `return`, just don't think we need to use `config.resp3`."
792828853,10043,jhelbaum,2022-01-26T16:37:44Z,Fixed.
792829042,10043,jhelbaum,2022-01-26T16:37:57Z,Done.
792864592,10043,oranagra,2022-01-26T17:15:00Z,"@jhelbaum this one is merged, so you can merge from unstable and fix the parsing code if needed."
792866068,10043,oranagra,2022-01-26T17:16:39Z,"missed a few..
```suggestion
        } else if (!strcmp(key, ""type"")) {
            assert(argMap->element[i + 1]->type == REDIS_REPLY_STRING);
            type = argMap->element[i + 1]->str;
        } else if (!strcmp(key, ""arguments"")) {
            arguments = argMap->element[i + 1];
        } else if (!strcmp(key, ""flags"")) {
```"
793573943,10043,oranagra,2022-01-27T12:52:04Z,"that dictAdd will usually fail, right? in which case we leak memory"
799338104,10043,oranagra,2022-02-04T10:21:50Z,we now wanna keep this file
799342847,10043,oranagra,2022-02-04T10:27:57Z,?
799393224,10043,jhelbaum,2022-02-04T11:41:54Z,"Oh, I thought the plan was to keep `help.h` constant. Will fix."
799403909,10043,jhelbaum,2022-02-04T11:58:22Z,"Oops - fixed.
"
800053937,10043,oranagra,2022-02-05T12:41:01Z,"```suggestion
    # TODO: extract these from COMMAND DOCS, and improve to include other types
```"
559096268,8324,oranagra,2021-01-17T08:23:54Z,"i think we need to improve the doc comment here and explain what's a ""range"".
maybe refer to the COMMAND command docs."
559097744,8324,oranagra,2021-01-17T08:37:08Z,looks like you added this line (RedisModule_IsModuleNameBusy) by mistake?
559099712,8324,oranagra,2021-01-17T08:54:17Z,can't we know the count in advance? I.e. there's no need for a deferred reply here.
559159701,8324,oranagra,2021-01-17T11:06:10Z,"@guybe7 we need to let modules add arbitrary flags that will be visible to the clients.
let's save the original string in the spec, and reflect that string in the output of COMMAND command.
(and also document it in the module API)

it would also be nice to do that for the command flags somehow, but maybe as a separate PR."
559332112,8324,sundb,2021-01-18T05:58:22Z,"```suggestion
#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))
```

Would this be more safe."
559426693,8324,sundb,2021-01-18T09:31:52Z,"Like the moduleCommand command, which is not initialized with keys_specs_static, could it cause unforeseen problems?"
559478538,8324,sundb,2021-01-18T10:52:51Z,"Is it `continue`? The current command definition will not have problems with break, but if there are other definitions before the KSPEC_RANGE definition, it may cause the legacy_range_key_spec data to be inconsistent with the old version.
Like this:
```c
    {""sort"",sortCommand,-2,
     ""write use-memory @list @set @sortedset @dangerous"",
     {{KSPEC_KEYWORD,""write"",.u.keyword={""STORE"",1,1}},
      {KSPEC_RANGE,""read"",.u.range={1,1,1}}},
     sortGetKeys},
```
I wrote a test, if I change the code above.
output:
```
127.0.0.1:6379> command info sort
1) 1) ""sort""
   2) (integer) -2
   3) 1) write
      2) denyoom
      3) movablekeys
   4) (integer) 0
   5) (integer) 0
   6) (integer) 0
```

The correct output should be:
```
127.0.0.1:6379> command info sort
1) 1) ""sort""
   2) (integer) -2
   3) 1) write
      2) denyoom
      3) movablekeys
   4) (integer) 1
   5) (integer) 1
   6) (integer) 1
```"
560808243,8324,guybe7,2021-01-20T09:26:04Z,"not sure i understand, moduleCommand is also handles in this function"
560878861,8324,sundb,2021-01-20T11:11:17Z,"Sorry, I feel that my understanding is wrong."
561026469,8324,yossigo,2021-01-20T14:59:05Z,"```suggestion
    const char *sflags;
```"
561065084,8324,yossigo,2021-01-20T15:42:25Z,"`cmdHasMovableKeys` gets called quite often, I think it will be a good idea to precompute this as a command flag."
561066852,8324,yossigo,2021-01-20T15:44:40Z,nit: add a default case with assertion.
561072014,8324,yossigo,2021-01-20T15:51:17Z,Is there a particular reason we keep using the custom getkeys_proc callbacks when keyspecs are available?
561072320,8324,yossigo,2021-01-20T15:51:43Z,"```suggestion
int64_t commandKeySpecsFlagsFromString(const char *s) {
```"
561080001,8324,yossigo,2021-01-20T16:01:15Z,"I guess they won't be totally arbitrary, still validated against a set of known flags right?"
561080301,8324,yossigo,2021-01-20T16:01:41Z,"```suggestion
    int64_t flags = specflags ? commandKeySpecsFlagsFromString(specflags) : 0;
```"
561082157,8324,yossigo,2021-01-20T16:03:40Z,"Don't like this, would be much happier with `RM_CreateCommandEx` or something but I acknowledge that modules will probably end up using both anyway which is ugly as well. Can't think of anything better, but please comment if you do!"
561097730,8324,guybe7,2021-01-20T16:19:41Z,"we plan to do it at some point, but we think the complexity of getting key indices in a generic way is complicated both to code and both in CPU
also there the ambiguity problem, for example if a user has a keyname called ""streams"" in XREAD"
561107665,8324,oranagra,2021-01-20T16:32:59Z,"`RM_CreateCommandEx` would mean it needs to get a pointer to an array of structs, and we'll have to declare an ABI stable strut.

but the bigger problem is that modules that want to work with both redis versions (old and new) need to call the old RM_CreateCommand, and then call the new RM_AddCommandKeySpec variants optionally (only if they exist).

i.e. if we have a new RM_CreateCommandEx, modules will need to have an if-else and bother to call both."
561162244,8324,yossigo,2021-01-20T17:55:42Z,Isn't this specific issue a limitation we should try to address with the keyspec?
561236050,8324,oranagra,2021-01-20T19:53:32Z,"It would be nice, but I don't have an idea. 
The only way I can think of is to add a full argument spec for the command (like the one in commands.json in redis.io), but that would be complicated for client libraries to work with. 
This simple approach is easy to use and will almost always work. 
Additionally we aim to gradually depreciate all these keyword argument commands. 

Meanwhile, since redis already has these getkeys procs, I think is should keep using them"
561239941,8324,yossigo,2021-01-20T19:59:43Z,"@oranagra yes, that's why I mentioned it's not necessarily better."
561241828,8324,yossigo,2021-01-20T20:02:56Z,I'm OK with leaving the Redis implementation as is but I have a concern about the keyspec. Basically this means we should not use `keyword` for `XREAD` because clients implementing it may parse the command the wrong way.
561244462,8324,oranagra,2021-01-20T20:07:32Z,"but what else can we do at this point in time?
GEORADIUS* XREAD* SORT*, STRALGO, MIGRATE and MEMORY are terrible in that manner (hard to find the key names)."
563176410,8324,oranagra,2021-01-23T17:17:50Z,"i actually meant totally arbitrary, but that's actually wasn't meant for the key-spec flags, but rather the command flags.
i wanted for modules to add flags such as ""all-shards"" and such (hinting proxies and clients with some things). but later realized two things:
1. it has nothing to do with this PR (since it's related to the command flags)
2. these flags must be documented in redis.io and in that case they can indeed by validated by redis.
i asked @gkorland and @MeirShpilraien to open another issue to discuss that"
563176983,8324,oranagra,2021-01-23T17:23:56Z,"@guybe7 i guess you forgot about this one.
let's just mention in the comment something like: `(to be used for COMMAND command output)`
this way people can go look the meaning of these flags in the docs.

the alternative is to document the meaning of `step`, `startfrom` etc, including the negative notations.
maybe it's not a bad idea. (i.e. do both, mention COMMAND command output, and the meaning of each arg)."
564964597,8324,madolson,2021-01-27T01:42:19Z,This makes more sense as an enum.
564973468,8324,madolson,2021-01-27T02:07:20Z,"Sometimes you use ""Keys Specs"" and sometimes its ""Key Specs"". It would be nice if they were all consistent, unless there is some meaning to differentiate the two. "
564985559,8324,madolson,2021-01-27T02:43:12Z,"So if something doesn't work with this ""Best effort"" algorithm, do we need to handle it specially when constructing the keyspec in the main server table? Otherwise I'm not clear what the implication is here."
564988741,8324,madolson,2021-01-27T02:52:16Z,"This function can return a value, but value error is never checked, should be asserting instead?"
564990220,8324,madolson,2021-01-27T02:56:54Z,"I think this structure should be documented explaining what the different keyspecs are. I didn't see a clear definition anywhere else, and it's probably useful to have somewhere. Although some of these are self explanatory, some are less clear. For example, I'm not sure what ""keycount"" is. Is it the number of keywords we expect, the position of the key from the keyword, the number of keys after the keyword. "
565066657,8324,oranagra,2021-01-27T06:52:36Z,"the best effort here is to come up with a legacy range that is as broad as possible.
the only use for that legacy range is the backwards compatible response of the COMMAND command.
i.e. clients that look only at indexes 4,5,6 need to still be able to find there what they're looking for.
so instead of maintaining these legacy ranges in the command table, we generate them at runtime by looking for consecutive ranges.

That comment was meant to tell that story, so if it wasn't clear enough, maybe you can suggest a phrase that will fill in the gap that caused the confusion?"
696046288,8324,oranagra,2021-08-25T19:21:11Z,"IIRC following this discussion we came up with the `limit` option for the search (although i don't see it in the PR top comment).
and we also came up with some definition for guarantees, which are that some specs can be marked as ""incomplete"", which means they may not find all keys, but the ones they do, are always right (assuming the command's syntax is correct).
@guybe7 i think the PR top comment is missing these, and also an example "
696049874,8324,oranagra,2021-08-25T19:26:47Z,a comment explaining what it does is needed.
696053036,8324,oranagra,2021-08-25T19:31:19Z,would be nice to add a comment of what BS and FK mean
696060986,8324,oranagra,2021-08-25T19:43:46Z,"the documentation is lacking.
obviously it should refer to somewhere that describes keyspaces and the various types there are (we don't have that yet).

but some other aspects of this API must be documented:
- the `spec_id` concept
- when it should be called (after command registration)
- what happens to the first,last,step that were added during command registration.

i also have some issue with the naming of these.
the ones that are about ""BeginSearch"" can be named ""Add"", but the other two should be named ""Set""?
maybe it's a better interface to have just one ""Add"" API, that returns an index.
and the other 4 methods, both for setting the BeginSearch and the FindKeys should be prefixed by ""Set"" rather than ""Add"""
696065554,8324,oranagra,2021-08-25T19:51:11Z,why the `read` flag?
696067570,8324,oranagra,2021-08-25T19:54:19Z,"ohh, because of the GET option. we may wanna add a comment (it's confusing)"
696069779,8324,oranagra,2021-08-25T19:57:43Z,"maybe we better give both `read` and `write` flags because we don't know?
i.e. for some client logic it might be better to have both set, rather than none?"
696315712,8324,oranagra,2021-08-26T06:02:11Z,"we can't use assert since this function fails a lot. what matters is the action it takes the bottom (storing the lagacy spec), so the caller doesn't really care about the return value.
we can change it to void, or keep ignoring it.
p.s. i do see that some of the early exists are C_OK (even ones that don't store a legacy spec), and others are C_ERR."
699931605,8324,guybe7,2021-09-01T07:05:31Z,"@oranagra I did mention `limit` and `incomplete` specs in the top comment, but I did miss the fact that some `incomplete` specs can be completely empty (i.e. UNKNOWN begin_search) which should tell the client that COMMAND GETKEYS must be used"
699994268,8324,oranagra,2021-09-01T08:25:30Z,"@guybe7 i meant a limit for the keyword search, not for the range spec"
700046076,8324,guybe7,2021-09-01T09:33:33Z,"i'm ok with this function returning `void` (because of what Oran said) but the assertions are necessary IMHO: they make sure the function works properly (i.e. if we have a bug and for some reason lastkey==0 we would like to know about it ASAP rather then fail silently)

for the record: C_OK means that the legacy range was populated correctly (also if we didn't do anything, if there aren't any specs at all)"
700051087,8324,guybe7,2021-09-01T09:40:05Z,"also, it can help a module writer catch bugs just on startup... For example, the module writer provided ""index"" BS of 0 (which is the command name). we would like to catch that ASAP"
700053180,8324,oranagra,2021-09-01T09:42:51Z,"> i do see that some of the early exists are C_OK (even ones that don't store a legacy spec), and others are C_ERR.

is that a bug then?"
700096614,8324,guybe7,2021-09-01T10:45:59Z,"no, that's how the function was supposed to behave
anyway, it's going to return `void` so it doesn't matter

what do you think about these assertions? if you're against i could make it return error if the user input doesn't make sense and c_ok otherwise. then the caller needs to fail OnLoad or something like that instead of crashing the server"
700104283,8324,oranagra,2021-09-01T10:57:40Z,"for redis, i suppose an assertion is ok. for a module, i think i'd rather return an error, unless we think it is likely that the module will not check for that error, and the whole thing can go overlooked, in which case i'm ok with an assert (since this is a new API, we'll fail modules during development).

maybe instead of an assertion we can disable module commands that failed that, so the module author will not be able to overlook it, but then it'll be hard for them to figure out why the command got disabled, so i guess an assertion is better."
700468959,8324,oranagra,2021-09-01T18:37:46Z,"considering modules (even new ones) may still wanna be compatible with old versions of redis, maybe we wanna encourage people to keep using these for simple ranges?

we did make the code handle this case properly, right?
a case where the first range is added in the command registration and the others added later?"
700476181,8324,oranagra,2021-09-01T18:48:22Z,"maybe if we name the command `kspec.smove` it'll be clearer?
i.e. give an example of a module that mimics a built in command with multiple specs.."
700510543,8324,oranagra,2021-09-01T19:29:00Z,i suppose we need to refer to COMMAND command here? or cluster aware clients?
700514483,8324,oranagra,2021-09-01T19:32:49Z,"all the nuances of the various arguments in these functions (negative values etc) are not documented in RM_AddCommandKeySpec, so they should either be documented here, or maybe have a reference to COMMAND command where they'll be documented soon. "
700885530,8324,guybe7,2021-09-02T08:53:10Z,"just summarizing, for the record:
XREAD is actually not an issue: assuming the syntax is correct, there are no arbitrary strings in argv up until streams (only command name, optional tokens, and numbers), so it's safe to use ""keyword""

the command we have issues with are MIGRATE, STRALGO, and SORT
for MIGRATE, because the token KEYS, if exist, must be the last token, we can search in reverse. it one of the keys is actually the string ""keys"" will return just a subset of the keys (hence, it's ""incomplete"")
for SORT and STRALGO we can use this heuristic (the keys can be anywhere in the command) and therefore we added a key spec that is both ""incomplete"" and of ""unknown type""

if a client encounters an ""incomplete"" spec it means that it must find a different way (either COMMAND GETKEYS or have its own parser) to retrieve the keys.
please note that all commands, apart from the three mentioned above, have ""complete"" key specs"
700914570,8324,oranagra,2021-09-02T09:30:12Z,"This is a good description, maybe it should be copied to the top comment, or to a redis-doc PR. 
For now I was thinking of not suggesting to make a redis-doc PR since we currently added this data to the COMMAND command, but we plan on moving it out of it soon and into the COMMANDS command. "
701043303,8324,guybe7,2021-09-02T12:41:39Z,"yes

i modified the test to cover that scenario (next commit)"
701145677,8324,oranagra,2021-09-02T14:35:04Z,"let's format this as a markdown list, see `RM_StreamTrimByLength` as an example"
701147640,8324,oranagra,2021-09-02T14:37:08Z,"actually in SMOVE the first key is also write.
```suggestion
 *  if (RedisModule_AddCommandKeySpec(ctx,""kspec.smove"",""read write"",&spec_id) == REDISMODULE_ERR)
```"
701312704,8324,oranagra,2021-09-02T18:06:50Z,don't we also wanna avoid the deprecation notice and explain that these serve a limited purpose and the more advance ones can be used if you have a complicated spec?
701673907,8324,guybe7,2021-09-03T07:46:13Z,"yes, next commit"
1465002211,12913,oranagra,2024-01-24T14:32:25Z,"i think that intead of `mem_db_bucket_overhead_ht0` and `mem_db_bucket_overhead_ht1`, which are low level details.
we should have `mem_db_hashtable_overhead_total` and `mem_db_hashtable_overhead_rehashing`
i.e. the `total` should be ht0+ht1, and the `rehashing` is just ht1."
1465005376,12913,oranagra,2024-01-24T14:34:31Z,"actually, looking at my https://github.com/redis/redis/pull/12913#pullrequestreview-1827646066.
the `rehashing` metric is not `ht1`, it's `ht0` of dicts that also have `ht1` allocated (dicts that are undergoing rehashing).
so the raw counters should be different than what you implemented."
1465106935,12913,CharlesChen888,2024-01-24T15:37:16Z,"I see ... so once `ht1` is allocated, it is considered as the ""main"" hash table, and `ht0` becomes rehashing overhead."
1465768010,12913,soloestoy,2024-01-25T02:26:49Z,"I can understand that the term ""hashtable"" refers to the array of `dictEntry` pointers stored in the dict, and its overhead refers to the size of this pointer array.

However, it's a bit unfortunate that the memory stats also include an item with ""hashtable"" and ""overhead"" in its name: `overhead.hashtable.main`. This item not only calculates the size of the pointer array but also includes the size of all `dictEntry`, `robj`, and metadata.

Do we need to consider renaming it to differentiate it more clearly? For example, `mem_db_dict_ht_total`, but it might seem too low-level."
1465942650,12913,oranagra,2024-01-25T07:28:16Z,"that's unfortunate, but i don't like to rename existing metrics. and at the same time i don't like to mention `ht0` and `ht1`.
so let's keep `overhead.hashtable.main`, `overhead.hashtable.expiers`, and maybe call the new ones `overhead.hashtable.lut` and `overhead.hashtable.lut.rehashing`.
i think we should add them to both `MEMORY STATS`, and `INFO MEMORY`

p.s. i'm willing to drop `overhead.hashtable.lut`, and only add `overhead.hashtable.rehashing`"
1465996713,12913,soloestoy,2024-01-25T08:21:06Z,"I wasn't suggesting renaming existing metrics `overhead.hashtable.main` or `overhead.hashtable.expires`. I mean we can give the newly added metric in this PR a more appropriate name to differentiate it from the existing metrics.

BTW, I'm thinking if we can modify the semantics of `overhead.hashtable.main` to only represent the size of the dictEntry pointer array. Then, we can add a new metric like `overhead.database.main` to represent the overall overhead size including the size of all dictEntry, robj, and metadata. Then the meaning of the new metric and the existing metric will be consistent. WDYT?"
1466089752,12913,oranagra,2024-01-25T09:34:46Z,"i think that in some sense, reducing the scope of the existing metric from counting a total to counting just a portion, and adding a new one for the total, would be a breaking change.
let's just keep it intact and add 2 new metrics (to both MEMORY STATS and INFO MEMORY).

we just need to choose a suitable name.
so it can be `overhead.hashtable.lut`, add `overhead.hashtable.rehashing`
or maybe someone can suggest something better?"
1466181649,12913,CharlesChen888,2024-01-25T10:45:17Z,"I'm fine with `overhead.hashtable.lut` and `overhead.hashtable.rehashing`, let's just go on with this."
1466260689,12913,oranagra,2024-01-25T11:54:35Z,"don't we also need to zero these when a dict is deleted or detached?
i.e. `emptyDbStructure()`, which will take care of FLUSHDB SYNC/ASYNC, and REPL_DISKLESS_LOAD_SWAPDB

or maybe it's a better idea to just call the `rehashingCompleted` callback from `_dictClear()`?
i.e. we're already have some leaks in the bucket counters?
@hpatro PTAL."
1466282638,12913,CharlesChen888,2024-01-25T12:12:56Z,"> don't we also need to zero these when a dict is deleted or detached?

Yes we need, and I do want to zero them in `_dictClear()`. It just took me some time to make sure all cases are covered."
1466293928,12913,CharlesChen888,2024-01-25T12:23:54Z,"Or, we may have a new callback in dictType that is called when dict is cleared/released?"
1466347550,12913,oranagra,2024-01-25T13:02:05Z,"maybe we can just call the existing callbacks.
i.e. if we're in the middle of rehashing, trigger `rehashingCompleted`.
and after that, call rehashingStarted and rehashingCompleted with destination size of 0?"
1467309252,12913,CharlesChen888,2024-01-26T07:38:11Z,"I edit the metrics in `emptyDbStructure()` bacause `_dictClear()` may involve too many other structures. Is there any other code clearing dict in DBs? I hope I didn't miss them.

And I prefer to modify the metric derectly instead of calling `rehashingStarted` and `rehashingCompleted`, because most of their job is already done in `emptyDbStructure()`."
1468365034,12913,oranagra,2024-01-27T06:46:08Z,"i see we already handle `server.rehashing` and `bucket_count` in emptyDbStructure, so i guess we're good to go.
in theory there's some room for messing up things when we deal with server struct globals, because in REPL_DISKLESS_LOAD_SWAPDB there are several dictionaries being handled, but it look like the code handles them correctly (by removing what's in the dict being released, rather than zeroing variables)"
1468366387,12913,oranagra,2024-01-27T06:50:12Z,"don't we need to deduct `exp[0]` from `_lut` too?
i.e. the `lut` metric counts both tables."
1469247889,12913,oranagra,2024-01-29T08:45:04Z,"we can move this out of the `if`, and eliminate the `else`"
1471460919,12913,madolson,2024-01-30T15:37:07Z,"I would prefer just to keep this one. This one seems very actionable to me, since it indicates the temporary overhead for me. The other two seem more tightly coupled to the current implementation, and they are much harder to explain to a typical user why they are important."
1471549541,12913,CharlesChen888,2024-01-30T16:24:41Z,"`mem_overhead_hashtable_lut` is an important part of memory usage, we may regard rehashing overhead as ""dynamic"" overhead, and this as the sum of both ""static"" and ""dynamic"" overhead. We may display them as two aspects of lut's overhead.

When the overhead of rehashing grows large, `databases_rehashing_dict_count` can tell us the keys increasing happens in a few slots or many slots, which helps monitoring data flow.

These two may be not so intuitive but displaying them gives a more complete description of DB's hash tables."
1471749110,12913,oranagra,2024-01-30T18:25:36Z,"so you consider dictEntry part of the key in that respect? or is it also part of the ""static"" overhead?"
1471894162,12913,CharlesChen888,2024-01-30T20:15:55Z,I don't mean any of these. I am just saying that both aspect of look up table's overhead should be displayed together.
1474004604,12913,soloestoy,2024-02-01T08:33:31Z,"I tend to keep both. The overhead mainly consists of two parts:

1. the metadata of each key, which includes `dictEntry` and `robj`. The size of these metadata items is directly proportional to the number of keys, and they do not cause memory spikes due to rehashing.
2. the other part is the hash table or lookup table, which is related to the number of buckets. However, the number of buckets does not have a one-to-one relationship with the number of keys, and rehashing can cause memory spikes. Therefore, it is difficult to infer the actual size.

Hence, keeping both can better assist users in observing the memory usage related to the second point."
1474216237,12913,oranagra,2024-02-01T10:37:34Z,"i personally don't mind keeping both, we have other low level metrics already anyway.

p.s. till recently we had a `overhead.hashtable.slot-to-keys` in MEMORY STATS, which we now dropped.
we could have kept it and measure the memory wasted by 16k * sizeof(dict)."
1487099042,12913,madolson,2024-02-13T03:06:27Z,"A lot of my perspective comes from the idea that I don't like showing information to users unless it's clear what it's useful for. I think we as engineers come from a world where more data is better, but most people are not as technically sophisticated as us and we are asking them to parse more information. I want to keep Redis simple.

> These two may be not so intuitive but displaying them gives a more complete description of DB's hash tables.

I don't want end users to have a complete description, I want them to have a useful description. If you have a reason this information is useful, I am all for adding it.

> p.s. till recently we had a overhead.hashtable.slot-to-keys in MEMORY STATS, which we now dropped.
we could have kept it and measure the memory wasted by 16k * sizeof(dict).

That's probably true, would make it ""less"" of a breaking change I suppose. I'm not sure that really matters though."
1487106598,12913,madolson,2024-02-13T03:16:00Z,I suppose I'll also clarify I'm OK with `MEMORY STATS` having more detailed breakdown as well. We don't need all the information posted everywhere all the time. 
1490576907,12913,oranagra,2024-02-15T08:13:17Z,"i don't like MEMORY STATS (i regret having it). many monitoring frameworks only collect data from INFO, so if a field is there, it can be easily collected, and if it's missing from INFO, it's not collected.
In my experience, that makes MEMORY STATS useful only for manual investigation with redis-cli.

p.s. we have another option (which i don't support) which is exposing it in INFO DEBUG (not officially part of the interface)."
1490577922,12913,oranagra,2024-02-15T08:14:21Z,"i think that if we can't agree on everything, let's reduce the scope and merge the part we agree on."
1491826684,12913,madolson,2024-02-16T00:34:19Z,"> In my experience, that makes MEMORY STATS useful only for manual investigation with redis-cli.

My understanding is that the two more detailed fields are basically **only** useful during manual investigations? From a monitoring perspective, you really just care that extra memory was being used during the rehashing."
1492319911,12913,oranagra,2024-02-16T11:14:02Z,"so `mem_overhead_hashtable_rehashing` for INFO, and the other two only in MEMORY?
let's do that."
1493516373,12913,CharlesChen888,2024-02-18T01:23:07Z,"> so mem_overhead_hashtable_rehashing for INFO, and the other two only in MEMORY?
let's do that.

I am OK with this, since we can't agree on everything."
1495185179,12913,soloestoy,2024-02-20T02:57:26Z,we do not need this now?
1495188191,12913,soloestoy,2024-02-20T03:03:35Z,I suggest directly multiplying by sizeof(dictEntry *) to calculate the memory here.
1495190294,12913,soloestoy,2024-02-20T03:08:18Z,It's better to also calculate the `overhead_hashtable_rehashing` and display it in the stats results.
1495195925,12913,soloestoy,2024-02-20T03:17:30Z,"I think it seems that each db should also have its own information about `overhead_ht_lut`, `overhead_ht_rehashing`, and `dict_rehashing_count`. 

@oranagra WDYT?"
1495198272,12913,soloestoy,2024-02-20T03:22:41Z,"```c
    for (j = 0; j < server.dbnum; j++) {
        redisDb *db = server.db+j;
        unsigned long long keyscount = kvstoreSize(db->keys);
        if (keyscount == 0) continue;
```

I think we should remove line 1250, even if `keyscount` is zero, overhead still exists, as we have discussed previously in the context of scan+del.

"
1495302082,12913,CharlesChen888,2024-02-20T06:28:37Z,Or do the calculation inside `kvstoreOverheadHashtableLut` and `kvstoreOverheadHashtableRehashing`? Seems more reasonable that these two functions return memory value.
1495306054,12913,CharlesChen888,2024-02-20T06:34:11Z,"So `overhead_hashtable_rehashing` in both `info memory` and `memory stats`, and the other two only in `memory stats`? Perhaps we need to convince @madolson about this ..."
1496774907,12913,soloestoy,2024-02-21T02:04:57Z,we can directly use `mh->db_overhead_hashtable_rehashing` right?
1497490903,12913,oranagra,2024-02-21T12:53:26Z,"i think i'd rather drop that early return entirely.
AFAIK it's here just because in non-cluster mode we don't need to maintain the bucket_count, but:
1. it looks odd, and can maybe lead to a bug someday if someone relies on that variable unconditionally.
2. before this change it'll at least also save the call to dictRehashingInfo, but now it no longer does.
"
1497502352,12913,oranagra,2024-02-21T13:00:28Z,"i think we can use `dict get` instead of this proc.
grep the tests to see how it's used elsewhere."
1497504550,12913,oranagra,2024-02-21T13:01:43Z,"this seem fragile
i'd rather use assert_range"
1497504988,12913,oranagra,2024-02-21T13:02:01Z,i'm not certain this is needed.
1497508897,12913,oranagra,2024-02-21T13:04:31Z,"i'm not sure it's a wise idea to test it this way, it could someday break.
we already have other tests that test rehashing, i think it's better to just hog one of these by adding some 3 lines that test these fields (i don't even think we have to test all of them."
1497511294,12913,oranagra,2024-02-21T13:06:03Z,"this is fragile. i.e. coupled with the current code.

i suggest matching what we know should be zero to zero, and relax the other tests with assert_range to about twice of what we measured."
1497513990,12913,oranagra,2024-02-21T13:07:46Z,"i think this could be going too far.
i think it's enough we know to attribute part of `used_memory` to these overheads, i don't think we need to tell the user in which db they are.
considering that most users use one db, it'll really be excessive (we'll see them twice)"
1498502479,12913,CharlesChen888,2024-02-22T01:23:17Z,"It is better to verify all the metrics added, right?"
1498513739,12913,CharlesChen888,2024-02-22T01:43:58Z,"I think to test the overhead, it is better to do it in a clean and undisturbed server so we can have more precise results. So I wrote the test this way: an independent test, and using transaction to make sure overhead is not changed by active rehashing."
1498842324,12913,oranagra,2024-02-22T08:26:31Z,"i have a feeling that we have too many ways to try to prevent resizing in tests, in most places we use a fork child, but recently we added a DEBUG command (#13043).
now we use MULTI.

considering that for testing these metrics, all you need is a test that can reliably run commands when a dict is in a rehashing state, then since we already have such a test, i thought it makes more sense to add some lines to validate the metrics to an existing test rather than create a new one.

you're argue that in your case it may be easier to predict the exact value of the metrics. it may be right, although i don't want to match their exact value anyway, only make sure they get back to zero when they should (no leak).

anyway, this test isn't too long, we can keep it, and if we have problems with it in the future, we can re-consider the other approach."
1500330180,12913,soloestoy,2024-02-23T08:19:12Z,"Adding a db prefix might be better, like `db.dict.rehashing.count`, to avoid any confusion among users that it represents all the dicts currently are rehashing.

"
1500339586,12913,soloestoy,2024-02-23T08:29:13Z,to `db.dict.rehashing.count`
1500391221,12913,soloestoy,2024-02-23T09:16:27Z,"We currently count and display all databases, but if a user has configured a large number of databases, like 1024, then even if only one db is in use, it would output 1024 results, which is overwhelming and not conducive to observation.

I think we should use a different condition to avoid displaying empty databases, such as skipping them if both the keys and expires have a `kvstoreMemUsage` of zero (also, `kvstoreMemUsage` should no longer include the `sizeof(*kvs)`, as this part is actually already accounted for in `server.initial_memory_usage`)."
1500408558,12913,CharlesChen888,2024-02-23T09:31:58Z,"It use to have a ""db"" prefix. 
see https://github.com/redis/redis/actions/runs/7986987719/job/21808517439
and since other metrics here don't have ""db"" prefix, I just dropped it."
1500421341,12913,CharlesChen888,2024-02-23T09:43:13Z,or `database.dict.rehashing.count`?
1500435881,12913,soloestoy,2024-02-23T09:56:03Z,"I think db is ok, since we already have the db.x section for the details of each database."
1500457796,12913,CharlesChen888,2024-02-23T10:15:09Z,"It turns out that ""db"" triggers the linter (see the link above), this is why I dropped it.
I have no idea why this exists.
```
Run node ./utils/reply_schema_linter.js
memory-stats.json : Error: strict mode: property db.dict.rehashing.count matches pattern ^db. (use allowMatchingProperties)
Error: Process completed with exit code 1.
```"
1501797123,12913,oranagra,2024-02-25T11:09:47Z,"that change seems wrong:
```diff
 size_t kvstoreMemUsage(kvstore *kvs) {
-    size_t mem = sizeof(*kvs);
+    size_t mem = 0;
```
i think we should revert it and the `continue` in `getMemoryOverheadData` should check how many dicts (or better yet, how many hash slots) we have in the kvstore to skip it.
i.e. `if (!kvstoreBuckets(db->keys)) continue;`"
1503747971,12913,soloestoy,2024-02-27T07:20:33Z,should reset `overhead_hashtable_lut` and `overhead_hashtable_rehashing` to 0 in `kvstoreEmpty()`
1503759378,12913,soloestoy,2024-02-27T07:32:22Z,"I'm feeling a bit conflicted now. Based on the current method of calculating `kvstoreMemUsage`, even if the dict is empty (`kvstoreBuckets` is 0), the memory occupied by `kvstore` itself would still be considered part of the overhead. Therefore, we should return the overhead details for all databases, which means there would be no need for a continue condition. It seems this would be more reasonable?"
1505497492,12913,oranagra,2024-02-28T07:48:38Z,"i think it's pointless to list the overhead for all empty databases (ones with no dict buckets at all).
i'd argue that i still rather count that memory in the global overhead metric, but listing these databases is plain noise IMHO."
1507087258,12913,soloestoy,2024-02-29T06:45:52Z,"I don't want to list all databases neither, as too many empty dbs would be meaningless.

But currently, we create kvstores with `KVSTORE_ALLOCATE_DICTS_ON_DEMAND`, but without `KVSTORE_FREE_EMPTY_DICTS`. Therefore, after deleting all data (with scan+del or flushdb sync), even if the bucket count is zero, the dict data structure still exists and occupies memory.

This means that a kvstore that has once had data inserted and then cleared will use more memory than a kvstore that has never been used, precisely sizeof(dict)*allocated_dicts more. I think it would be more reasonable to use `allocated_dicts` as a condition here."
1507106633,12913,oranagra,2024-02-29T07:09:56Z,"so listing all the options from low to high:
1. list dbs only if they have actual keys in them
2. list dbs only if they have allocated LUT buckets (what we have now)
3. list dbs only if they have dicts that are non-NULL
4. list dbs only if they use memory, basically listing all

~~i'm ok with 3. you prefer 4, i'm good with that too.~~
edit: i'm ok with 2. you prefer 3, i'm good with that too."
1507127376,12913,soloestoy,2024-02-29T07:33:17Z,"no no, I also prefer 3, just like that:

```diff
--- a/src/kvstore.c
+++ b/src/kvstore.c
@@ -532,6 +533,10 @@ int kvstoreNumNonEmptyDicts(kvstore *kvs) {
     return kvs->non_empty_dicts;
 }

+int kvstoreNumAllocatedDicts(kvstore *kvs) {
+    return kvs->allocated_dicts;
+}
+
 int kvstoreNumDicts(kvstore *kvs) {
     return kvs->num_dicts;
 }

--- a/src/kvstore.h
+++ b/src/kvstore.h
@@ -30,6 +30,7 @@ void kvstoreGetStats(kvstore *kvs, char *buf, size_t bufsize, int full);
 int kvstoreFindDictIndexByKeyIndex(kvstore *kvs, unsigned long target);
 int kvstoreGetNextNonEmptyDictIndex(kvstore *kvs, int didx);
 int kvstoreNumNonEmptyDicts(kvstore *kvs);
+int kvstoreNumAllocatedDicts(kvstore *kvs);
 int kvstoreNumDicts(kvstore *kvs);
 uint64_t kvstoreGetHash(kvstore *kvs, const void *key);

--- a/src/object.c
+++ b/src/object.c
@@ -1246,7 +1246,7 @@ struct redisMemOverhead *getMemoryOverheadData(void) {

     for (j = 0; j < server.dbnum; j++) {
         redisDb *db = server.db+j;
-        if (!kvstoreBuckets(db->keys)) continue;
+        if (!kvstoreNumAllocatedDicts(db->keys)) continue;

         unsigned long long keyscount = kvstoreSize(db->keys);
```"
1507147961,12913,oranagra,2024-02-29T07:52:18Z,"sorry, i messed up the counting. i  meant to say that i prefer 2 but i'm ok with 3.
anyway, @CharlesChen888 please make that change and let's move on."
1068936430,11708,madolson,2023-01-13T05:17:38Z,"```suggestion
    /* Recompute command bits for all users once the modules has been completely unloaded */
```"
1068936552,11708,madolson,2023-01-13T05:17:52Z,"```suggestion
/* This function is responsible for recomputing the command bits for all selectors of the existing users.
```"
1069673073,11708,roshkhatri,2023-01-13T16:38:07Z,Made the necessary changes.
1069673353,11708,roshkhatri,2023-01-13T16:38:21Z,Made the necessary changes.
1069845343,11708,madolson,2023-01-13T18:38:18Z,"```suggestion
    while(raxNext(&ri)) {
```"
1069845649,11708,madolson,2023-01-13T18:38:26Z,"```suggestion
        while((ln = listNext(&li))) {
```"
1069846042,11708,madolson,2023-01-13T18:38:38Z,"```suggestion
     * users to have access to these commands */  
```"
1081176611,11708,oranagra,2023-01-19T12:07:07Z,"why not just remove that line?
the code below will behave correctly when cmd->acl_categories is 0"
1081224717,11708,oranagra,2023-01-19T12:55:53Z,"let's add a comment for this block saying that it's done to clean the slate.
(assuming i'm right)"
1081227653,11708,oranagra,2023-01-19T12:58:07Z,"btw, why not use `selector->flags & SELECTOR_FLAG_ALLCOMMANDS` instead of ACLSelectorCanExecuteFutureCommands? or am i missing something?"
1081235316,11708,oranagra,2023-01-19T13:05:18Z,"why do we need / want that log?
maybe the log level should be reduced, or if we really want to have some warning present when modules use this feature, maybe a more official introspection feature is needed (in INFO or MODULE command)"
1081237213,11708,oranagra,2023-01-19T13:07:16Z,maybe resetting `acl_categories` to 0 should be the responsibility of this function and not the caller (being an output parameter).
1081249765,11708,oranagra,2023-01-19T13:20:01Z,"maybe doing this per registered command is a bit harsh.
i.e. module that registers 10 commands, will re-run though all users for each command.
considering a module is only supposed to register commands when loaded, maybe we can raise some flag, and do this when the loading completed and all commands were registered."
1081284334,11708,oranagra,2023-01-19T13:48:46Z,"maybe add a test that verifies that when loading module after user was created, it doesn't accidentally grant the user access that it shouldn't have had."
1081454240,11708,madolson,2023-01-19T15:40:06Z,"> btw, why not use selector->flags & SELECTOR_FLAG_ALLCOMMANDS instead of ACLSelectorCanExecuteFutureCommands? or am i missing something?

They do the same thing. I assume part of this is parity with ACLDescribeSelectorCommandRules which does the same thing as part of the ""sanity"" check code. We could probably simplify the code."
1081974950,11708,roshkhatri,2023-01-19T23:32:55Z,"Yes, that sounds good!"
1081980073,11708,roshkhatri,2023-01-19T23:43:20Z,"Do you mean, similar to the test next to this one, but where users are already present and modules are loaded later. will do that "
1081983026,11708,roshkhatri,2023-01-19T23:49:06Z,"> let's add a comment for this block saying that it's done to clean the slate. (assuming i'm right)

yes!

> > btw, why not use selector->flags & SELECTOR_FLAG_ALLCOMMANDS instead of ACLSelectorCanExecuteFutureCommands? or am i missing something?
> 
> They do the same thing. I assume part of this is parity with ACLDescribeSelectorCommandRules which does the same thing as part of the ""sanity"" check code. We could probably simplify the code.

I will look into it!"
1082392452,11708,oranagra,2023-01-20T11:32:31Z,Exactly
1083404479,11708,oranagra,2023-01-22T07:33:42Z,"@MeirShpilraien @madolson i suppose that technically, till now, we allowed modules to register commands even after the OnLoad. am i right? do you see any reason to keep this possibility?"
1083404662,11708,oranagra,2023-01-22T07:35:14Z,"this seems overly complicated (the check for `!module_contains_aclcategories_flag`), also, maybe it's nicer to do `++` instead of `= 1`"
1083404808,11708,oranagra,2023-01-22T07:36:30Z,i think it's nicer to unconditionally set it to 0 at the beginning of this function rather than re-set it to 0 when modified.
1083692875,11708,MeirShpilraien,2023-01-23T06:48:01Z,@oranagra I do not see why we should keep (none of our modules does it).
1083908382,11708,guybe7,2023-01-23T10:53:18Z,"`matchAclCategoriesFlags` returns REDISMODULE_OK/REDISMODULE_ERR so `!` should not be used here (the reason it worked is that OK is 0 and ERR isn't)
regardless, i find this code structure a bit confusing, why not:
```
else {
    if (matchAclCategoriesFlags(t, acl_categories) == REDISMODULE_ERR) {
        serverLog(LL_WARNING,""Unrecognized command flag %s on module load"", t);
        break;
   }
}
```"
1083910520,11708,guybe7,2023-01-23T10:55:27Z,"i think this should be inside `struct RedisModule` and represent the number of [sub]commands that have ACl categories (i.e. also rename it to ""num_commands_with_acl_categories"""
1084282317,11708,madolson,2023-01-23T16:33:43Z,@oranagra I'm also fine dropping that.
1084945928,11708,oranagra,2023-01-24T08:33:13Z,"so shall we add some check in RM_CreateCommand and maybe also RM_CreateDataType and RM_Register*Config, RM_LoadConfigs that verifies we're inside the OnLoad?"
1087422823,11708,madolson,2023-01-26T03:58:02Z,"Those makes sense. The only other one I would consider is RedisModule_RegisterCommandFilter, which I assume shouldn't really be messed with at runtime either but maybe there are some use cases. Also presumably RM_CreateSubCommand."
1087531512,11708,oranagra,2023-01-26T08:14:57Z,"for sure sub-commands goes together with commands.
i'm not sure about the filter, we don't really care do we?"
1090116291,11708,madolson,2023-01-30T02:03:47Z,"I'm fine with the new structure, but I don't really think matchAclCategoriesFlags should return REDISMODULE_ERR or REDISMODULE_OK now that I think about it, since those are more typically used to module error codes. Since this is an internal function, it should probably directly return 1 and 0."
1134877248,11708,madolson,2023-03-14T03:23:24Z,"```suggestion
 * * Creating a subcommand is called outside of RedisModule_OnLoad.
```"
1134878510,11708,madolson,2023-03-14T03:25:03Z,"```suggestion
 * If RedisModule_CreateDataType() is called outside of RedisModule_OnLoad() function,
 * there is already a module registering a type with the same name,
 * or if the module name or encver is invalid, NULL is returned.
```"
1134878969,11708,madolson,2023-03-14T03:25:39Z,"```suggestion
    if (ctx.module->num_commands_with_acl_categories) {
```"
1134879296,11708,madolson,2023-03-14T03:26:04Z,"```suggestion
 * This will return REDISMODULE_ERR if it is called outside RedisModule_OnLoad.
```"
1135111683,11708,oranagra,2023-03-14T07:42:24Z,"```suggestion
int matchAclCategoriesFlags(char *flag, int64_t *acl_categories) {
```"
1135112654,11708,oranagra,2023-03-14T07:43:35Z,"```suggestion
        else if (!strcasecmp(t,""allow-busy"")) flags |= CMD_ALLOW_BUSY;
        else if (!matchAclCategoriesFlags(t, acl_categories)) {
```"
1135115465,11708,oranagra,2023-03-14T07:46:13Z,maybe it'll be nicer to set `onload` in `moduleLoad` rather than here?
1135176611,11708,oranagra,2023-03-14T08:33:26Z,"i suppose we want to fail if either of them succeeds.
if i read the code correctly, the ""NOPERM"" which we expect, will happen if at least one of them fails.

p.s. i'm not sure we should go to that level of detail in the testing, i would be willing to test just one of them, or none (not all 8 APIs)"
1135178870,11708,oranagra,2023-03-14T08:35:35Z,"same issue here.
we probably want to count successes, not errors."
1135630494,11708,oranagra,2023-03-14T14:23:07Z,"please describe this change (blocked APIs after init) in the PR top comment.
as well as anything else worth noting for whoever won't read the code."
1142601592,11708,roshkhatri,2023-03-20T19:41:33Z,"Here we set the `onload` flag in `RM_InIt()` from `(*onload)(void *, void **, int)` in `moduleLoad` function, as far as I know the module APIs are called from this `onlaod` function."
1142690349,11708,madolson,2023-03-20T21:22:03Z,"```suggestion
        else if (!strcasecmp(t,""allow-busy"")) flags |= CMD_ALLOW_BUSY;
```"
1142693197,11708,madolson,2023-03-20T21:25:35Z,"```suggestion
            serverLog(LL_WARNING,""Unrecognized categories flag %s on module load"", t);
            break;
```"
1142705744,11708,madolson,2023-03-20T21:42:05Z,"```suggestion
int64_t categoryFlagsFromString(char *aclflags) {
```"
1142705809,11708,madolson,2023-03-20T21:42:11Z,"```suggestion
/* Helper for categoryFlagsFromString(). Turns a string representing command
```"
1142706074,11708,madolson,2023-03-20T21:42:37Z,"```suggestion
/* Helper for RM_SetCommandCategories(). Turns a string representing acl category
```"
1142706789,11708,madolson,2023-03-20T21:43:42Z,"```suggestion
 * Example, 'write slow' marks the command as part of the write and slow ACL categories. */
```"
1142707762,11708,madolson,2023-03-20T21:44:58Z,"> I will look into it!

Just going to say this is not a high priority, let's consider refactoring this later."
1142721625,11708,madolson,2023-03-20T22:05:36Z,"```suggestion
    int64_t categories_flags = aclflags ? categoryFlagsFromString((char*)aclflags) : 0;
```"
1142802079,11708,madolson,2023-03-21T00:45:55Z,"```suggestion
int matchAclCategoryFlag(char *flag, int64_t *acl_categories_flags) {
```"
1142802229,11708,madolson,2023-03-21T00:46:17Z,"```suggestion
        if (!matchAclCategoryFlag(t, &acl_categories_flags)) {
```"
1142802729,11708,madolson,2023-03-21T00:47:51Z,"```suggestion
/* Helper for categoryFlagsFromString(). Attempts to find an acl flag representing the provided flag string
 * and adds that flag to acl_categories_flags if a match is found.
```"
1142959976,11708,oranagra,2023-03-21T07:07:18Z,"it looks a bit suspicious that we return ""OK"" when things failed.
maybe a comment saying that it validates that it's not possible to register these after loading, thus return an error if they succeed."
1142962800,11708,oranagra,2023-03-21T07:11:55Z,"or we can flip it and return back to using `assert_error {NOPERM}`.
i.e. my complaint was that the `|=` tested that at least one failed, rather than at least one succeeded."
1142970377,11708,oranagra,2023-03-21T07:23:09Z,"I'm not sure about the name, i think it's missing a reference to the term ""ACL""
arguably `RedisModule_SetCommandAclCategories` isn't that much longer..."
1142972901,11708,oranagra,2023-03-21T07:26:52Z,"aren't we missing a check that validates this API can't be used after loading?
after all, that was the main reason to add all these checks."
1142973777,11708,oranagra,2023-03-21T07:28:02Z,we're missing a similar comment in the new API.
1143630867,11708,roshkhatri,2023-03-21T15:59:54Z,"yeah, I will add a test to check this as well."
1143632105,11708,madolson,2023-03-21T16:00:39Z,"Sure, however I made it RedisModule_SetCommandACLCategories to make it consistent casing with other places we use ACL in module names."
1143637729,11708,roshkhatri,2023-03-21T16:04:33Z,"yeah that makes sense, will change the name to `RedisModule_SetCommandAclCategories`"
1143701266,11708,roshkhatri,2023-03-21T16:42:29Z,"Yes, I will add a comment mentioning that and changing the error from `NOPERM` to `UNEXPECTEDOK` so it will make it more clear."
1198817653,12192,zuiderkwast,2023-05-19T10:37:27Z,"Is `replica-redirect` enough? It can be implicitly understood that it is only for read and write commands, just like for cluster redirects."
1199135404,12192,madolson,2023-05-19T16:09:20Z,"Presumably we need to also cover the ""announced"" port for K8s type distributions, where this port is not the same port the end user would see. I guess announced IP/hostnames are also problems.

EDIT: To add some more context here. We've seen a number of users try to use the masterhost and masterport info field for topology discovery, which doesn't work correctly. "
1199142650,12192,madolson,2023-05-19T16:17:41Z,"I actually am not sure it's clear enough! We've had folks ask if they could disable redirects for cluster mode (for mostly bad reasons), so they might think they could turn this off for cluster mode. "
1199243258,12192,zuiderkwast,2023-05-19T18:11:39Z,So you want to add something like 'standalone' to the name to make it clear it's not a cluster config?
1199494108,12192,madolson,2023-05-19T23:24:36Z,"I guess in my ideal world this config would also apply on cluster mode enabled as well, and it would be a cluster agnostic config. At that point maybe your naming would be sufficient, `replica-enable-redirects` maybe?"
1199636796,12192,zuiderkwast,2023-05-20T17:14:20Z,"This is already the behaviour in cluster mode. Would the config have different defaults in cluster vs standalone mode. Btw disabling it in cluster mode is ""for mostly bad reasons"" you said above so I thought you don't want to allow that..."
1199774648,12192,oranagra,2023-05-21T14:14:37Z,"i agree it would be nice to have it cluster agnostic, and that then we have a problem with default.
unless we wanna make it default to `yes` in standalone too.

another bad option is to make it an enum config with [yes,no,cluster-only], the last one being the default."
1199777572,12192,oranagra,2023-05-21T14:32:02Z,"good point. but for that we need a new config, right?"
1199984809,12192,soloestoy,2023-05-22T05:51:24Z,you mean `master-announce-ip` and `master-announce-port`?
1199986108,12192,soloestoy,2023-05-22T05:53:52Z,"if we want this, I prefer split into two configs, like `replica-enable-redirect` by default `no` and `cluster-replica-enable-redirect` by default `yes`."
1201098695,12192,madolson,2023-05-22T21:02:30Z,"Yeah, something like that. Not sure how I feel about adding two new configurations that I would like to deprecate though. Ideally we would re-use the `cluster-announce-*` type configs. This relates to how I want to make sure we are aligned long term."
1201208545,12192,zuiderkwast,2023-05-22T21:58:16Z,"For tls, we'd need `master-announce-tls-port` too then. Many new configs. Or maybe only these two: `redirect host:port` and `redirect-tls host:port`, i.e. redirect to any node, regardless of whether it's our master or not. Too flexible?"
1201488694,12192,soloestoy,2023-05-23T04:02:29Z,"I prefer @zuiderkwast 's idea, the `redirect` and `redirect-tls` has a clear scope, only affect redirect.

If we support `master-announce-*`, seems we need apply the announce ip:port to `info` `role` and other commands' reply. But this could cause some internal management services to become unavailable, since the internal services and user businesses possibly belong to different network, and the management may rely on the real ip:port not the announced ip:port in `info` and `role` etc."
1233882808,12192,oranagra,2023-06-19T10:49:53Z,"```suggestion
# When enabled, a replica instance will reply ""-MOVED -1 master-ip:port""
# for data access commands. Normally these are write or read commands, if
# you want to run read commands while replica-enable-redirect is enabled,
# use the READONLY command first.
```"
1236454067,12192,oranagra,2023-06-21T06:43:22Z,"```suggestion
# This config only takes effect in non-cluster mode.
```

i'll start a separate thread on terminology.
i've seen the discussion above suggesting that every collection of redis instances (master + set of replicas) is called a cluster, and i'm against that, but i'm also against using the term ""standalone"".

the best thing i can think of is ""cluster mode enabled"" / ""redis cluster"" (or in short ""cluster"" or CME"" which i think are already heavily used)
vs ""cluster mode disabled"", or ""non-cluster"" (i'm not a fun of ""cluster mode disabled"", and certainly not ""CMD"")"
1236688030,12192,zuiderkwast,2023-06-21T09:22:01Z,"Why not ""standalone mode""? It's used in `INFO` (`redis_mode:standalone` since 8246e58abe, 2012), `HELLO` (`""mode"" => ""standalone""`) and the splash screen.

The modes are ""sentinel"", ""cluster"" and ""standalone"". AFAICT that's the original terminology.

![spash](https://github.com/redis/redis/assets/273886/ba68623c-ab55-4fa4-b2ae-3b02332c0dc9)

(The splash screen was added in 996d503d1aab68bf0220951ab71a1ef9b8678b4a (2011) originally with the spelling ""stand alone"".)"
1236703042,12192,oranagra,2023-06-21T09:33:58Z,"ok, good point.
i don't like it, but let's stick with it."
1239127113,12192,madolson,2023-06-22T23:36:57Z,"I don't think we are beholden to a decision made 10 years ago by someone who no longer works on the project. The terminology is barely used in the codebase, and really doesn't make much sense. I'm going to continue to non-cluster mode or cluster mode disabled."
1239548417,12192,soloestoy,2023-06-23T08:48:45Z,"These words make me feel uncomfortable. You didn't give enough respect to antirez. As the creator of Redis, his contributions cannot be ignored. Moreover, in the future, each of us may leave this project, but the code and spirit will remain.

""Standalone"" is a conceptual description. The reason why it has not been applied to Redis code and client code is that Redis has been in standalone mode since its inception. The cluster mode was invented later and needed to be explicitly written in the code. This is not a difference between backwardness and advancement, but simply a difference in time. Because cluster mode appeared later, the word ""cluster"" needs to be used in Redis and clients code to indicate its difference from standalone mode."
1239596121,12192,oranagra,2023-06-23T09:28:59Z,"it's not about respect, a decision that was made long ago, and possibly without investing much thought into it, could have become outdated over time.
The fact is that both myself and Madelyn weren't even aware of the few places where ""standalone"" was mentioned (even though washing our eyes on these prints, and even source code lines many many times).
IMHO, the history of how we got here is irrelevant, what's relevant is that this term isn't very intuitive (vs ""non-cluster""), and although it is admittedly used in several places, it's not really widely used, so if we have a better one, we can afford to break it.

I'll give another example: till redis 7.0, the words ""script"", ""Lua"", and ""EVAL"" were all used interchangeably (for instance in INFO and CONFIG). now hat we had several different ""scripting"" commands, and even for the same command, we have several different programming languages, we had to clean this up.
The point is, that with time we sometime have to re-think past decisions and terminology, in some even if it causes interface changes, and it has nothing to do with respecting the history."
1239960309,12192,madolson,2023-06-23T15:30:44Z,"> ""Standalone"" is a conceptual description. The reason why it has not been applied to Redis code and client code is that Redis has been in standalone mode since its inception. The cluster mode was invented later and needed to be explicitly written in the code. This is not a difference between backwardness and advancement, but simply a difference in time. Because cluster mode appeared later, the word ""cluster"" needs to be used in Redis and clients code to indicate its difference from standalone mode.

This does get at why I like calling it ""non-cluster"". Originally there was no need to describe it since there was no distinction. Salvatore invented the terminology when he needed to contrast it with cluster mode. If you gloss through most of the documentation, ""standalone"" is probably the most common way to identify the original redis, but in many more cases it's just simply not described, instead making the difference when appropriate for cluster mode.

> The point is, that with time we sometime have to re-think past decisions and terminology, in some even if it causes interface changes, and it has nothing to do with respecting the history.

We can also respect the history while choosing to do something else. Not every decision made by Salvatore was correct."
1240037904,12192,soloestoy,2023-06-23T16:49:45Z,"I don't object to the terminology ""non-cluster"". What I want to emphasize is that standalone(non-cluster) and cluster are two very different modes. They are very different for Redis itself, its client, and especially for user business. When using cluster, users must plan their keyname settings so that multi-key operations can be performed, such as using hashtags. Therefore, for now, I don't want to mix standalone(non-cluster) and cluster, because we haven't solved many issues such as cross-slot, maintenance operations such as failover and building replication, and data storage."
1240470274,12192,madolson,2023-06-23T22:37:02Z,"> Therefore, for now, I don't want to mix standalone(non-cluster) and cluster, because we haven't solved many issues such as cross-slot, maintenance operations such as failover and building replication, and data storage.

Are we all not directionally aligned we want to do this though? I'm under the impression we want to move all configurations to a mode where the clusterbus (or cluster v2) is running and it supports operations like `CLUSTER FAILOVER`. I don't think this needs to necessarily solve the sharding problem, since you could have an unsharded database that still supports the cluster communication."
1240571567,12192,soloestoy,2023-06-24T02:01:36Z,"I think you misunderstood me. As of now, I am not inclined towards an unsharded-cluster. In my previous response, I was only pointing out its issues, not indicating that I support implementation it now."
1240586005,12192,madolson,2023-06-24T03:37:41Z,"> I think you misunderstood me. As of now, I am not inclined towards an unsharded-cluster. In my previous response, I was only pointing out its issues, not indicating that I support implementation it now.

I understand you aren't for it right now. I'm asking if you are inclined towards an unsharded-cluster eventually. My thinking was that we were going to target a lot of cluster improvements for Redis 8, including supporting unsharded-clusters. (I think you indicated some doubt in another comment, and that's probably warranted at this point. We haven't made much progress there). "
556972356,8327,madolson,2021-01-14T00:48:10Z,This should be addReplyErrorObject(). 
556983795,8327,nmvk,2021-01-14T01:23:14Z,Thanks! fixed.
559755630,8327,oranagra,2021-01-18T19:10:52Z,"the EXPIRE and EXPIREAT commands don't have `use-memory` and that's the only effect of this command that can cause slight memory utilization.
it can be considered a `fast` command since even when it deletes a key, it can only be a string type
```suggestion
     ""write fast @string"",
```"
559762624,8327,oranagra,2021-01-18T19:30:49Z,"the difference between this approach and the one deleted from feedAppendOnlyFile is that this one will also affect replicas (not only AOF).
that's actually undesirable, see https://github.com/redis/redis/pull/5171#issuecomment-409553266
so i don't mind rewriting as one command rather than two, and using the new arguments, but we should not change relative TTL to absolute TTL when propagating to replicas (only when propagating to AOF)"
559762902,8327,oranagra,2021-01-18T19:31:41Z,please add a top comment that explains the inputs and outputs.
559767268,8327,oranagra,2021-01-18T19:43:35Z,"i think it would be good idea to add a test for that, maybe as part of this PR.
IIRC there's already a test that checks that EXPIRE is turned into EXPIREAT in the AOF, but apparently there's no test that verifies that's not happening in the replication, and i can see that this mistake is gonna be repeated in the future.
so even if we're gonna revert this decision some day, it should not be by mistake.
such a test can either use the `cmdrstat`, or `attach_to_replication_stream` methods."
559768271,8327,oranagra,2021-01-18T19:46:25Z,"let's make this one a multi-line (as much as i hate lines)
```suggestion
/* SET key value [NX] [XX] [KEEPTTL] [GET] [EX <seconds>] [PX <milliseconds>]
 *     [EXAT <seconds-timestamp>][PXAT <milliseconds-timestamp>] */
```"
559769744,8327,oranagra,2021-01-18T19:50:36Z,"why do we want that option?
I think seeing that that option exists is just confusing.
on a SET command, where the default is to override the key, creating new one that's non-volatile, it makes sense.
here, i suppose that we still want a GETEX with no options to behave the same as GET, but we don't need an explicit argument that does nothing."
559771197,8327,oranagra,2021-01-18T19:55:04Z,"i personally don't think that we need to share code between the normal `GET` (which is also used by `GETSET` and `GET SET` with `GETEX`.
the first 3 mention above are so simple and straight forward (easy to read the code and quickly understand what it does), and the last one is complicated, possibly propagating effects and notifications.

please rename this one to be `getexGenericCommand` (or just put it into getexCommand), and restore the old simple getGenericCommand."
559773377,8327,oranagra,2021-01-18T20:01:04Z,"FYI, there's an advantage of using `assert_equal` and `assert_range`, in that when the assertion fails, you always get the offensive value (i.e. seeing `Expected '$value' to be between to '$min' and '$max'`)
if you do that, you don't need to store the value into an argument.
so it'll look like
`assert_range [r ttl foo] 5 10`"
559773862,8327,oranagra,2021-01-18T20:02:41Z,"i thought the docs next to the command said KEEPTTL is the default (which i think it should be, i.e. making it behave like GET by default).
i think the arity of the command should be changed and this test altered."
559782110,8327,nmvk,2021-01-18T20:27:59Z,"Thanks @oranagra for the feedback. Does the recommendation also apply if we get `PXAT/EXAT`, Do we want to convert absolute TTL to relative in this case? "
559783111,8327,oranagra,2021-01-18T20:30:49Z,"no, if we're asked for absolute time, we forward that intent to the replica as is.
AFAIK that's what the code does, and AFAIR from that conversation with Salvatore, that's what he intended."
559786210,8327,nmvk,2021-01-18T20:40:03Z,Thank you! @oranagra for the review. I will handle this and rest of the comments soon.
559788299,8327,oranagra,2021-01-18T20:46:38Z,"i'm trying to add a test for that for the existing commands (with a reference to the justification), so you can skip that for now, and just work on fixing the changes in this PR."
559789727,8327,nmvk,2021-01-18T20:50:26Z,ACK thanks! 
559808942,8327,oranagra,2021-01-18T21:52:04Z,https://github.com/redis/redis/pull/8357
559847904,8327,madolson,2021-01-19T00:32:53Z,"@oranagra Can we re-open that conversation? It seems wrong to have behavior that might change dramatically on failovers if the nodes have different clocks. I don't really buy salvatore's argument we should only care about the typical case. Large replication lag, full syncs, psyncs can all introduce a lot of lag between when an expire is set and when it's propagated to a replica. Clock skew is usually on the matter of seconds, but these modes could introduce error on the order of minutes/hours.

I see shootIT commented on your test PR as well."
559946318,8327,nmvk,2021-01-19T06:46:32Z,"Agreed removed this option, default behavior is now same as `GET`"
559946674,8327,nmvk,2021-01-19T06:47:34Z,Updated and added old `getGenericCommand` back and renamed new method to `getexGenericCommand`
559946934,8327,nmvk,2021-01-19T06:48:11Z,Thank you! this was helpful updated it in all of the test.
559947069,8327,nmvk,2021-01-19T06:48:35Z,Fixed and changed arity.
560059672,8327,oranagra,2021-01-19T10:09:03Z,"@madolson sure we can open that for conversation, i just want it to be intentional rather than overlooked.
i suggest to have that conversation separate from this PR.
It can be in my PR (before or after merging it), or in another issue.
"
560136033,8327,oranagra,2021-01-19T12:18:37Z,any reason you indented these by another 4 spaces?
560139431,8327,oranagra,2021-01-19T12:25:03Z,"just to be sure, we no longer need this block now since setGenericCommand will anyway call rewriteClientCommandVector in that case, so this will fall to the next block in this function, right?

let's rebase this PR after i merge #8357, and extend the two tests there to check these too:
`SETEX`, `PSETEX`, and `SET EXAT`, `SET PXAT`"
560143322,8327,oranagra,2021-01-19T12:31:44Z,"Ohh, i now realize that this function already had a top comment, it's just not glued to the top of the function.
the comment seems to be glued to the bottom of the previous function (missing blank line) rather than the next function.
i think it should be moved to after the defines below."
560145956,8327,oranagra,2021-01-19T12:36:29Z,"why did you do that change?
this block only removes the `GET` argument if present.
if it conflicts with the command vector rewrite inside setGenericCommand, i suppose we need to move this code to inside setGenericCommand and have it handle both concerns"
560159345,8327,oranagra,2021-01-19T13:00:19Z,"let's include the words ""absolute"" and ""relative"" in this comment in some way, i think it'll make it more clear (rather than ""PX"" and ""PXAT"".
also, i think this comment must mention that the command already re-written itself to always use milliseconds, so we don't need to worry about units here. "
560160842,8327,oranagra,2021-01-19T13:03:29Z,"this `if` heavily relies on the fact the order is known since the command vector is re-written in the command, and we know the index of `px`. i think that's bad.
if we keep it this way, i think a comment is needed here to explain that, and also comment in setGenericCommand next to the argument rewriting, to mention that we have code here that relies on the order."
560326320,8327,oranagra,2021-01-19T16:49:54Z,"i extended that PR to test SETEX and PSETEX, and merged it.
so after rebase you can extend these tests to test `SET EXAT` and `SET PXAT`.
or cover these in the area were you're gonna cover the GETEX propagation."
560771731,8327,nmvk,2021-01-20T08:44:33Z,Thank you this was helpful.
560776661,8327,nmvk,2021-01-20T08:47:54Z,"I added comment about the index, I tried to add the `for` loop but it had some issues when comparing the `millisecond` object with `strcasecmp`"
560916625,8327,oranagra,2021-01-20T12:17:58Z,"```suggestion
        /* When SET is used with EX/PX argument setGenericCommand propagates them with PX millisecond argument.
         * So since the command arguments are re-written there, we can rely here on the index of PS being 3. */
```"
560918839,8327,oranagra,2021-01-20T12:22:04Z,"```suggestion
         * exp argument being at index 3. (see feedAppendOnlyFile)
```"
560920202,8327,oranagra,2021-01-20T12:24:34Z,"```suggestion
    /* This command is never propagated as is. It is either propagated as EXPIRE[AT], DEL, or PERSIST.
    * This why it doesn't need special handling in feedAppendOnlyFile to convert relative expire time to absolute one. */
    if (flags & OBJ_DEL) {
```"
560922289,8327,oranagra,2021-01-20T12:27:58Z,"```suggestion
    /* Propagate without the GET argument (Isn't needed if we had expire since in that case we completely re-written the command argv) */
```"
560932260,8327,oranagra,2021-01-20T12:45:27Z,"```suggestion
       r getex foo PERSIST
       r getex foo
       r getex foo exat [expr [clock seconds]-100]
```"
560932553,8327,oranagra,2021-01-20T12:45:51Z,"```suggestion
           {persist foo}
           {del foo}
```"
560933624,8327,oranagra,2021-01-20T12:47:31Z,"```suggestion
    test {GETEX propagate as to replica as PERSIST, DEL, or nothing} {
```
i improved this test to cover DEL which wasn't covered by other tests, and to test no propagation,
maybe now the test you added in aof.tcl isn't needed anymore."
561131931,8327,nmvk,2021-01-20T17:08:15Z,Great catch I missed the `DEL` case thank you. I still retained the `aof.tcl` test as it validates there is no change in the file size.
561144234,8327,madolson,2021-01-20T17:27:28Z,Nit: why is this split on two lines? It's less than 80 characters on one line. 
561147498,8327,madolson,2021-01-20T17:32:33Z,Do we this abstraction? Seems unnecessary since there will probably only be one getex command. 
561158650,8327,nmvk,2021-01-20T17:49:51Z,Removed it
561158745,8327,nmvk,2021-01-20T17:50:00Z,Fixed.
561639641,8327,madolson,2021-01-21T06:55:16Z,I'll re-open an issue.
564176687,8327,madolson,2021-01-26T02:33:52Z,This maybe should be server.lazyfree_lazy_expire now? I have no idea if people ever set those differently.
564178188,8327,madolson,2021-01-26T02:38:42Z,"This can never fail right? We just got the item successfully, so we must be able to delete it then. I think a server assert on the delete and remove the if is cleaner. "
564179599,8327,madolson,2021-01-26T02:43:11Z,"Shouldn't this be an assert? I'm also not entirely sure this test is necessary, and the 2 second wait is not great. "
564220517,8327,madolson,2021-01-26T05:14:46Z,"I guess if we rewrite expire to unlink, we should also rewrite this to unlink?"
1042864993,11595,madolson,2022-12-08T02:38:08Z,Why is it no longer being deleted?
1043120027,11595,zuiderkwast,2022-12-08T09:29:41Z,"It is deleted in the lines below this using dictUnlink, sdsfree, dictFreeUnlinkedEntry. (This dict's type has no key destructor.) I tried things back and forth, but there's actually no change here. I'll delete this commented line."
1043631868,11595,madolson,2022-12-08T17:29:12Z,"It looked weird from the diff I had open, but just looking at it now yeah it seems like a random line. I would vote to remove it yeah."
1059858571,11595,oranagra,2023-01-02T07:00:53Z,"```suggestion
    dictDefragAllocFunction *defragAlloc = defragfns->defragAlloc;
```
it's a defrag fn, not an alloc fn. also more consistent with the other two."
1068121570,11595,oranagra,2023-01-12T13:28:14Z,"let's list this change in the top comment.
i.e. it's implications on 32 bit systems that don't have malloc_size
(and also why we did it)"
1068123543,11595,oranagra,2023-01-12T13:30:13Z,remember to remove that one.
1068133288,11595,oranagra,2023-01-12T13:39:50Z,"this looks too low level..
all we want is to add an element to the set, and we're forced to do hashing and insertion on our own.

i understand the reason is that we want to avoid excessive sdsdup and sdsfree if the element is already there, right?
and that in the past we were able to set the key of a dictEntry after the fact, and now it's no longer the case because there might not be any dictEntry...

maybe we need some new interface, like a dictEntryRef struct or dictIndex struct, which can hold both a dict entry and an index.
or maybe it's enough to return a a `dictEntry*` and if we see the LSB set, we realize that it's actually the hash table itself (and then dictSetKey can still update it)?

either way, i'd like to avoid doing dictHashKey and dictInsertAtIndex etc here, considering that we may need to do it in other places in the future..."
1068140793,11595,oranagra,2023-01-12T13:47:13Z,"```suggestion
/* Used as scan callback when all the work is done in the dictDefragFunctions
 * themselves, and there's no need to do anything other than increment a metric. */
```"
1068177531,11595,oranagra,2023-01-12T14:17:45Z,"is this comment outdated? (as well as the one above it).
i.e. it refers to the case that keys are always with LSB set, but we now have a way to control it to be the other way around.
i didn't read the rest of the code yet, but at least this part is wrong, right?:
> This function can also be used to check if a key pointer can be stored directly in a dict hashtable bucket without a dictEntry"
1068217679,11595,oranagra,2023-01-12T14:50:17Z,"ohh, reading the rest of the code i see that when `keys_are_odd` is off you just disable the optimization.
instead we can flip it:
either set the LSB of the key on in put and clear it on output, or instead use LSB of 1 to know that it's a dictEntry.

maybe we don't wanna do all that investment when we don't have a use case for it yet though?
(in which case we can we can add a todo comment, but that argument is also valid for the whole `keys_are_odd` feature, i.e. we can drop it and add a todo comment)."
1068236669,11595,oranagra,2023-01-12T15:05:35Z,"i think it's odd that we expose these interfaces.
we bothered to make dictEntry opaque so that we don't leak the dict internals to the caller, but exposing the index is similar.
let's consider removing these after trying to solve the setTypeAddAux case differently (see my comment there)"
1068237082,11595,oranagra,2023-01-12T15:05:54Z,"moving this has an implication that dictAddRaw that results in a NOP doesn't do incremental rehashing.
considering that dictFind does, i think it's odd.
let's consider reverting that after we decide what to do with the dictInsertAtIndex public interface."
1068350927,11595,zuiderkwast,2023-01-12T16:39:05Z,"> maybe we don't wanna do all that investment when we don't have a use case for it yet though?
> (in which case we can we can add a todo comment, 

Exactly. Sure, we can add a todo comment.

> but that argument is also valid for the whole keys_are_odd feature, i.e. we can drop it and add a todo comment).

What do you mean? Shall we drop the whole keys_are_odd feature?

Before I added this dictType field, there was a heuristic per key. In a dict with mixed odd and even keys, it was practically impossible to estimate the memory usage. Now at least we can assert that all added keys are odd if the key_are_odd flag is set."
1068371603,11595,zuiderkwast,2023-01-12T16:58:00Z,"> i understand the reason is that we want to avoid excessive sdsdup and sdsfree if the element is already there, right?

Exactly. A kind of ""two-phase add""...

Are you proposing we can essentially keep this dictKeyIndex + dictInsertAtIndex if we just hide hash (easy, just add a wrapper to dictKeyIndex that computes the hash internally) and hide that we're working with an index directly into the table? For example make the index an opaque type or returning a `dictEntry**` bucket-pointer instead of an index?

> or maybe it's enough to return a `dictEntry*` and if we see the LSB set, we realize that it's actually the hash table itself (and then dictSetKey can still update it)?

If we return a dictEntry-pointer which is a key, there is no way to replace it other than to hash the key again to find the bucket. That's why dictSetKey doesn't work well in this case."
1069266678,11595,oranagra,2023-01-13T11:15:12Z,"in the second option, i guess i meant a `dictEntry**` so that dictSetKey (or a variant of it), can just update either the dictEntry or if it's a pointer to a key (ref), it can update it..

for the first option, the `dictEntryRef` would be an opaque struct containing a hash, index, and whatever we need to replace the key. so that the caller isn't aware of any hash or index"
1069270765,11595,oranagra,2023-01-13T11:19:22Z,"we can document that if we use the no_value feature, keys must be odd, and a todo to fully implement the key_are_odd feature when that needs to change.

again, by fully implement i mean that for dicts with key_are_odd=0 we turn things around so that they're optimal as well."
1069504003,11595,zuiderkwast,2023-01-13T14:08:37Z,"The TODO I'd like to add is to also add a `keys_are_even` to enable key-as-entry for dicts where all keys are even.

But what about dicts where keys can be a mix of odd and even? (String literals or other unaligned strings, or numeric keys.) To disable key-as-entry but still use dictEntry_no_value for these is a reasonable compromise IMHO."
1069511415,11595,zuiderkwast,2023-01-13T14:15:44Z,"I've added a dictRehashStep call in dictKeyIndex to preserve this behaviour, so this isn't affected.

(I'll rename dictKeyIndex to dictFindBucketForInsert to not expose the index.)"
1070069734,11595,zuiderkwast,2023-01-13T21:18:07Z,Done.
1070080813,11595,zuiderkwast,2023-01-13T21:25:57Z,"I chose to use a bucket pointer (`dictEntry **`) instead of index. I replaced the functions with `dictFindBucketForInsert` and `dictInsertIntoBucket`. The key hashing and the index is hidden within the functions. 

(I didn't use an opaque struct `dictEntryRef` for the intermediate values, because the user can't allocate an opaque value on the stack, so it'd have to be allocated.)"
1070084704,11595,zuiderkwast,2023-01-13T21:29:01Z,Done as described. Please check if it's acceptable.
1070243187,11595,oranagra,2023-01-14T09:48:22Z,"i'm not sure we'll ever need to support a case of a dict where keys are neither always odd or always even.
which is why i thought that this single `key_are_odd` decides between always odd and always even.
instead i now realize it decides between always odd and mixed, and we don't support the always even mode.

in my previous post i supported either fully implement all of this and support both (or all 3) modes, or just dropping all the complications and supporting just the one we use.

but anyway, i'm also ok with supporting the two modes you chose to support, as long it's properly documented what it does, and what's left as todo to reach the end goal."
1070243588,11595,oranagra,2023-01-14T09:53:03Z,"do we ever expect the caller of `dictFindBucketForInsert` to call any `dictEntry*` function on the return value (i.e. passing `*bucket` to some API).
if not, maybe it should be a `void*`?

maybe the term ""bucket"" is wrong.
maybe ""spot"" or another term is better (more abstract)?"
1070287771,11595,sundb,2023-01-14T14:18:41Z,What about `dictNoValueEntry` or `dictEntryNoValue` ? snake case and camel case mix look odd.
1070447808,11595,zuiderkwast,2023-01-14T23:09:29Z,"You're right, it is very odd. :-) I'll change to camel case."
1070448303,11595,zuiderkwast,2023-01-14T23:12:34Z,You're right. It should be better abstracted.
1073780417,11595,zuiderkwast,2023-01-18T16:38:58Z,"I changed it to `void*` and renamed it to ""Position"".

* dictFindPositionForInsert
* dictInsertAtPosition"
20630692,2143,badboy,2014-11-20T07:19:42Z,"The compiler warns that this variable may be used unintialized. Of course it isn't, as `target` will always be either a or b, but we could surpress this warning by just initalizing `where` anyway.
"
20630710,2143,badboy,2014-11-20T07:20:27Z,"I don't know how critical this call is. We have `sdsll2str` in the code base, which should do effectively the same thing. Would be interesting to see if it has an impact to use it here instead.
"
20630787,2143,badboy,2014-11-20T07:23:04Z,"I think the comment here is not totally correct (the code is though).
Isn't it: negative -> backward, non-negative -> forward?
"
20630832,2143,badboy,2014-11-20T07:24:26Z,"Why negate here? For consistency (as I think it's easier to read and done further down anyway) I would swap the if/else conditions.

``` c
if (forward) { 
        index = idx;
        n = quicklist->head;
} else {
        index = (-idx) - 1;
        n = quicklist->tail;
}
```
"
20630858,2143,badboy,2014-11-20T07:25:36Z,"When compiled with `D` enabled, the compiler warns that `n` has the wrong type. For cosmetic reasons we could cast it to ""void*"" here.
"
20630865,2143,badboy,2014-11-20T07:25:51Z,"Same as above. `(void*)`
"
20630897,2143,badboy,2014-11-20T07:27:19Z,"Another smallish cosmetic thing here: Inserting a newline after `void *value` will keep the line under 80 chars just as the function above.
"
20660386,2143,mattsta,2014-11-20T17:00:55Z,"> The compiler

Which compiler/version?  It didn't complain under my menagerie of compilers yet.

> this variable

Maybe I don't know how to use GitHub, but I see a 26 line diff attached to this comment (and all the comments actually), so it's difficult to tell what ""this variable"" is.  :-\  (obviously next I see you mean `where`, but the github code reply doesn't make it clear. boo github.  Though, on second look, it seems the _last_ line in the diff is the comment target?  I'll assume that going forward.  still, boo github.)

> surpress this warning by just initalizing where anyway.

Good point!  I'll add it.
"
20660500,2143,mattsta,2014-11-20T17:02:36Z,"Good catch.  That has been on my list of things to replace, but I kept forgetting when sitting in front of a keyboard.  I'll get it added.
"
20661067,2143,mattsta,2014-11-20T17:10:38Z,"I think it was inspired by https://github.com/antirez/redis/blob/unstable/src/ziplist.c#L680-L681

For readability, showing the first special case of ""negate index, subtract one"" helps the reader more quickly see something strange is happening since it's the first case.
"
20661116,2143,mattsta,2014-11-20T17:11:09Z,"crazy gcc.  will fix.
"
20661232,2143,mattsta,2014-11-20T17:12:53Z,"It's actually _exactly_ 80 characters, so it's still okay.

The quicklist.{c,h} was was formatted with `clang-format -style=""{BasedOnStyle: llvm, IndentWidth: 4}""` which gives reasonable output except for a few small cases here and there (small functions end up on a single line, and in-place struct initializers get too many spaces added around them).
"
20661337,2143,badboy,2014-11-20T17:14:42Z,"I see. I just rechecked my config and it turns out for some reason it complained on column 79 instead of 80 -_-
"
20661482,2143,badboy,2014-11-20T17:16:20Z,"Ah yes. Comments are always made below the line I meant. GitHub could really show this better.
"
20661513,2143,badboy,2014-11-20T17:16:43Z,"[~]% gcc --version
gcc (GCC) 4.9.2
"
20661603,2143,mattsta,2014-11-20T17:18:07Z,"Ah, that's the difference.  My Linux testing box was 4.9.0.  I've got a 4.9.2 on OS X and I see your extra warnings now.  Fixing.
"
20714633,2143,sunheehnus,2014-11-21T13:35:50Z,"I tried to create the new operation with __ziplistCascadeUpdate().
It may be useful to rewrite this part. :)
[commit](https://github.com/antirez/redis/pull/2158)
"
20757598,2143,sunheehnus,2014-11-22T15:05:19Z,"If center and center->prev doesn't merge, center and center->next will definitely not merge?
"
20757776,2143,mattsta,2014-11-22T15:36:40Z,"Let's draw it!  The numbers at the top boxes are the `count` for that node.

``` haskell
  +------------+  +-----------+  +------------+  +-------------+  +------------+
  |     1      |  |     2     |  |      3     |  |      4      |  |     5      |
  |            |  |           |  |            |  |             |  |            |
  | prev->prev |  |  prev     |  |  center    |  | next        |  | next->next |
  |            |  |           |  |            |  |             |  |            |
  |            |  |           |  |            |  |             |  |            |
  +------------+  +-----------+  +------------+  +-------------+  +------------+

        +------------------+                          +--------------------+
        |                  |                          |                    |
        |                  |                          |                    |
        |                  |                          |                    |
        |(prev->prev)+prev |                          | next+(next->next)  |
        |                  |                          |                    |
        |    (1 + 2) = 3   |                          |     (4 + 5) = 9    |
        |                  |                          |                    |
        +------------------+                          +--------------------+
        (this is new 'prev')                           (this is new 'next')

                       +-------------------+
                       |                   |
                       |                   |
                       |    prev+center    |
                       |                   |
                       |    (3 + 3) = 6    |
                       |                   |
                       +-------------------+
                       (this now 'target',
                        since it potentially
                        invalidated 'center'
                        during the merge)

                                       +------------------------+
                                       |                        |
                                       |                        |
                                       |      target+next       |
                                       |                        |
                                       |    (6 + 9) = 15        |
                                       |                        |
                                       |                        |
                                       +------------------------+
                                       now all five original nodes
                                       are merged into one node of
                                       length 15
```

So, the case you noted is:

> If center and center->prev doesn't merge, center and center->next will definitely not merge?

That's a good point since _target_ is only created if prev is merged.  We need to set `target = center` _if_ the `(center+center->prev)` doesn't happen.  I'll add it.

Thanks!
"
20761484,2143,sunheehnus,2014-11-23T02:02:27Z,"Forget to free new_node :)
"
20761614,2143,sunheehnus,2014-11-23T02:40:10Z,"As _quicklistSplitNode puts it this way,

###### If after==1, then the returned node has elements [OFFSET, END].

###### Otherwise if after==0, then the new node has [0, OFFSET)

Suppose the former quicklistNode is [0, 1, 2, 3, 4, 5] & entry->offset is 3.
And it will split into two quicklistNode [0, 1, 2] [3, 4, 5]

###### If after==1, then the new_node is [3, 4, 5]

###### Otherwise if after==0, then the new_node is [0, 1, 2]

Then,

###### If after==1, we push the value at HEAD and the new_node is [value, 3, 4, 5]

###### Otherwise if after==0, we push the value at TAIL and the new_node is [0, 1, 2, value]

What's more it forget to deal with the NULL result _quicklistSplitNode returns.
"
20761635,2143,sunheehnus,2014-11-23T02:44:00Z,"Is it okay that we just judge `else if (full && (at_tail || at_head))`?
This will involve some cases next `else if` owns, and make the cases more clear. :)
"
20761677,2143,sunheehnus,2014-11-23T02:59:01Z,"I saw your trick to deal with this,
 `int orig_start = after ? offset + 1 : 0;`
 `int orig_extent = after ? -1 : offset;`
 `int new_start = after ? 0 : offset;`
 `int new_extent = after ? offset + 1 : -1;`
with offset + 1 :)
But in that way, the comment of _quicklistSplitNode is not accurate any more. :)
"
20761843,2143,mattsta,2014-11-23T03:46:24Z,"MORE DRAWINGS!

Let's say maximum fill is 6.  Nodes here can't have more than 6 entries.

If we want to insert when two neighboring nodes are full, we have:

``` haskell



         +-------------------+      +---------------------+
         |  Node A           |      |   Node B            |
         |                   |      |                     |
         |                   |      |                     |
         |  1,2,3,4,5,6      |      |   7,8,9,10,11,12    |
         |                   |      |                     |
         |                   |      |                     |
         |                   |      |                     |
         |                   |      |                     |
         +-------------------+      +---------------------+


                 Requested:
                 Insert new element before position 7


                    So, we want to insert:
                       - BEFORE 7
                       - so as of 7, we are AT HEAD for NODE B
                       - We are AT HEAD and Node B is full
                       - Also, Node A is full
                    Now we have: full && at_head && full_prev && !after

                    So, the only way forward is to allocate an entirely
                    new node and create a ziplist of 1 element.
```

Actually, as you (i think) noted, the next ""splitting node"" case _can_ match for this case too, _but_ splitting requires extra copies and math.

Right here we _know_ we can create an entirely new node, so it's quicker/easier/cleaner to just do it directly.

Also, seeing as we are already tracking the combinational state of like 25 things in that if/else tree, more explicit details everywhere make it more clear about what is happening and why (plus optional verbose debugging and comments).
"
20761928,2143,mattsta,2014-11-23T04:13:42Z,"> What's more it forget to deal with the NULL result _quicklistSplitNode returns.

Dealing with dead memory allocations here is tricky.  The Redis allocator actually just kills the entire process on OOM, so we don't _need_ extensive malloc checking (and there isn't anything sensible we can do if allocating a new node fails anyway).

> But in that way, the comment of _quicklistSplitNode is not accurate any more. :)

Oh, good point.  I'll update it and note the changes below.

The comment does have a reinforcing statement of `The input node keeps all elements not taken by the returned node` just in case any of the examples given were actually wrong.  :)
"
20762397,2143,sunheehnus,2014-11-23T06:00:57Z,"Yap, you make it more clear about what is happening and why.
The case you gave above matches `else if (full && (at_tail || at_head))` with above 4 conditions.
I just think a special case (nodeA [1, 2, 3, 4, 5, 6]) -> NULL
We append an element to nodeA, and it will split into two nodes(nodeA and an empty node).
Of course I didn't find any bug here, I just thought the special case should be operated by the 5th branch.

And the suggestion make no progress and mass up existing code. My bad. :)
"
20771521,2143,sunheehnus,2014-11-24T02:59:31Z,"Without `fill` limitation?
"
20771574,2143,sunheehnus,2014-11-24T03:03:46Z,"We can just skip to the head to avoid tail recursion. :)
"
20772539,2143,mattsta,2014-11-24T04:13:39Z,"> We can just skip to the head

How?

> to avoid tail recursion.

Why would we want to avoid?
"
20772688,2143,mattsta,2014-11-24T04:25:04Z,"That's a great observation!

We need to rename `quicklistPushTailZiplist(quicklist, ziplist)` to something like `quicklistAppendValuesFromZiplist(quicklist, fill, ziplist)`.

Then we just:
- iterate over the existing ziplist
  - insert each element from the ziplist into tail of the quicklist (`quicklistPushTail()`)
- then free the original ziplist

Adding each value from the old ziplist individually will create nodes with the proper fill for this instance.  (this is only used when users restore an old RDB with a native ziplist encoding. it'll help them rebuild their single (maybe large 512+) entry ziplist into a quicklist with a smaller fill factor.)

I'll add it to the todo list.
"
20772988,2143,sunheehnus,2014-11-24T04:47:03Z,"We should remove this, and correct the comment above.

##### \- iter->zi = entry->zi;

##### \- iter->offset++;

Because it may skip the next entry.

---

## TEST CODE

```
quicklist *ql = quicklistCreate();
char *words[] = { ""abc"", ""foo"", ""bar"",  ""foobar"", ""foobared"",
                           ""zap"", ""bar"", ""bar"", ""test"", ""foo"" };
for (int i = 0; i < 10; i++)
    quicklistPushTail(ql, 32, words[i], strlen(words[i]));

quicklistIter *iter = quicklistGetIterator(ql, AL_START_HEAD);
quicklistEntry entry;
while (quicklistNext(iter, &entry)) {
    if (entry.value){
        char str[128];
        memcpy(str, entry.value, entry.sz);
        str[entry.sz] = 0;
        printf(""%s   "", str);
    }
    else
        printf(""%lld   "", entry.longval);
}
quicklistReleaseIterator(iter);
printf(""\n"");

iter = quicklistGetIterator(ql, AL_START_HEAD);
while (quicklistNext(iter, &entry)) {
    if (quicklistCompare(entry.zi, (unsigned char *)""bar"", 3)) {
        quicklistDelEntry(iter, &entry);
    }
}
quicklistReleaseIterator(iter);

iter = quicklistGetIterator(ql, AL_START_HEAD);
while (quicklistNext(iter, &entry)) {
    if (entry.value)
    {
        char str[128];
        memcpy(str, entry.value, entry.sz);
        str[entry.sz] = 0;
        printf(""%s   "", str);
    }
    else
        printf(""%lld   "", entry.longval);
}
```

quicklistReleaseIterator(iter);

---

## Result Without Deletation

abc   foo   bar   foobar   foobared   zap   bar   bar   test   foo  
abc   foo   foobar   foobared   zap   bar   test   foo   

---

## Result With Deletation

abc   foo   bar   foobar   foobared   zap   bar   bar   test   foo  
abc   foo   foobar   foobared   zap   test   foo   
"
20773139,2143,sunheehnus,2014-11-24T05:00:06Z,"> How?

Add goto statement to the start of this quicklistNext function.

> Why would we want to avoid?

It is just a little trick, decrease the depth of system stack, save the time system
pushes parameters on stack and allocate stack space to run this function again.

This function can at most be called one more again, this little trick doesn't save
much space & time. Of course at the same time goto is harmful. 
I didn't think this special situation over. My bad. :)
"
20788337,2143,sunheehnus,2014-11-24T13:13:07Z,"We should limit extent within the rest of list.
And the 2nd if branch (line 601) `else if (entry.offset >= 0 && extent > node->count)`
should add '=' to match all the cases such as, `entry.offset == 2 ;  extent == node->count` 
should also run this branch.
See https://github.com/mattsta/redis/pull/5 :)
"
20789472,2143,sunheehnus,2014-11-24T13:36:43Z,"longval -_-
"
20789898,2143,sunheehnus,2014-11-24T13:45:07Z,"We should reset p.
Think about the special situation, first & last entry are in the same node and the node's size is less than fill.
Then the operation on Line 899 will reset the zl and p will be a wild pointer. :)

## TEST CODE

```
    quicklist *ql = quicklistCreate();
    quicklistPushHead(ql, F, ""123"", 3);
    quicklistPushHead(ql, F, ""321"", 3);

    quicklistRotate(ql, F);

    quicklistIter *iter = quicklistGetIterator(ql, AL_START_HEAD);
    quicklistEntry entry;
    while (quicklistNext(iter, &entry)) {
        if (entry.value){
                char str[128];
                memcpy(str, entry.value, entry.sz);
                str[entry.sz] = 0;
                printf(""%s   "", str);
            }
        else
            printf(""%lld   "", entry.longval);
    }
    quicklistReleaseIterator(iter);
    printf(""\n"");

    ql_verify(ql, 1, 2, 2, 2);
    quicklistRelease(ql);
```

---

## Result Without Reset

Segmentation fault (core dumped)

---

## Result With Reset

123   321  
    OK
"
20790376,2143,badboy,2014-11-24T13:54:07Z,"The `!value` case is never triggered by the below test cases. Maybe a test covering this should be added.
"
20811484,2143,mattsta,2014-11-24T18:40:35Z,"oops.  good catch.  Added to the next fixes.
"
20812342,2143,mattsta,2014-11-24T18:52:22Z,"Great point!

Added to next update with:

``` diff
+    /* If quicklist has only one node, the PushHead could have
+     * reallocated the head ziplist (which is also the head ziplist),
+     * rendering our prior 'p' unusable. */
+    if (quicklist->len == 1)
+        p = ziplistIndex(tail->zl, -1);
```

Also improved tests so they catch these edge cases (the new tests segfault _without_ these fixes, but pass _with_ these fixes).
"
20864426,2143,sunheehnus,2014-11-25T14:14:04Z,"Maybe the trick _quicklistSplitNode uses can make an improvement. :)
"
1265256278,12416,oranagra,2023-07-17T12:09:48Z,why not just rely on RM_ValueLength?
1265273654,12416,oranagra,2023-07-17T12:21:38Z,"maybe instead we should encourage using RM_ScanKey?
even if you iterate though all of them in one go, it could in theory be more efficient.

it IS less convenient for the caller, but maybe that forces them to write better code (in terms of scalability)."
1265280183,12416,oranagra,2023-07-17T12:25:42Z,"i wonder if we should use a similar interface as RM_HashSet, e.g. one that's able to take c-strings too?
i'm not particularly fond of that API, but we should also take consistency into considerations."
1266074012,12416,zh1029,2023-07-18T01:30:53Z,You are right. The idea was to map set command one by one. but since there is common API to get the same functionality. This function could be removed. I'll remove it.
1266080061,12416,zh1029,2023-07-18T01:38:17Z,Good idea. Let me figure out how to realize it like RM_HashSet way.
1266083399,12416,zh1029,2023-07-18T01:46:19Z,OK.  I got the point.
1267440299,12416,zh1029,2023-07-19T01:31:45Z,"Now, I changed using fmt (""vslc"") method."
1267469327,12416,sundb,2023-07-19T02:38:07Z,"@zh1029 Not sure I'm right, we shouldn't change the usage of `moduleCreateArgvFromUserFormat` which is just used for module APIs related to command argv(cmdname + argv)."
1267546621,12416,zh1029,2023-07-19T05:20:46Z,"Yes. I expended moduleCreateArgvFromUserFormat usage since reusing the fmt(""vslc"") to avoid code duplication. Let me think it over how to optimize it.
"
1267551496,12416,sundb,2023-07-19T05:30:03Z,"@zh1029 Agree with you, this change is better than duplication."
1267580592,12416,zh1029,2023-07-19T06:06:51Z,"I changed moduleCreateArgvFromUserFormat to moduleCreateArgvFromUserFormatAux.
then `robj **moduleCreateArgvFromUserFormat(const char *cmdname, const char *fmt, int *argcp, int *flags, va_list ap)` is used by RM_Call(), RM_Replicate()... which return flags
while `robj **moduleCreateSetArgvFromUserFormat(const char *fmt, int *argcp, va_list ap)` is used by RM_SetAdd(), RM_SetRem()... which doesn't return flags.

Both moduleCreateArgvFromUserFormat() and moduleCreateSetArgvFromUserFormat() invokes moduleCreateArgvFromUserFormatAux()

Maybe it is better now.
"
1267584848,12416,sundb,2023-07-19T06:13:17Z,@zh1029 Make sense to me.
1267629058,12416,oranagra,2023-07-19T07:06:55Z,"i think the comment that describes the flags belongs where it was, i.e. next to the code the handles them (now in the renamed moduleCreateArgvFromUserFormatAux).
this will also mean less changes to the diff"
1267637553,12416,oranagra,2023-07-19T07:12:09Z,"i'd rather not name it as specific for `Set`.
it's just a generic one that handles an array, in contrast to the other one that takes a command name.
ideally we would have renamed the other one to have `Cmd` in the function name.
another alternative (if we can't find a good name for this one) is to call moduleCreateArgvFromUserFormatAux directly (passing NULL).
not sure which one is better."
1267645953,12416,oranagra,2023-07-19T07:17:50Z,"i had two arguments in the past.
1. that maybe we want to let the caller pass plain C strings and so on.
2. that maybe we want to be consistent with the Hash API.

if i'm not missing anything, this solves the first issue, but instead of being consistent with the Hash API (e.g. `REDISMODULE_HASH_CFIELDS`), it is consistent with `RM_Replicate`.

@zuiderkwast @itamarhaber maybe you have a suggestion?"
1267646913,12416,oranagra,2023-07-19T07:18:50Z,"i suppose that if we let people avoid creating a RedisModuleString for adding and removing, we should support that for query was well."
1267705159,12416,zh1029,2023-07-19T08:07:17Z,The idea for the RedisModule_SetAdd and RedisModule_SetRem APIs are to write data locally. Replication could be done via RedisModule_Replicate() while implementing extend redis command which accessing set data by invoking RedisModule_SetAdd or RedisModule_SetRem
1267709741,12416,zh1029,2023-07-19T08:09:06Z,"You mean to use ""fmt"" method like RM_SetAdd does, right?"
1267711288,12416,zh1029,2023-07-19T08:09:39Z,Had same concern indeed. I'll change the name.
1267723566,12416,zh1029,2023-07-19T08:20:21Z,OK. I got your point. Will change.
1267736582,12416,oranagra,2023-07-19T08:30:58Z,"my argument wasn't that we need to replicate any of these actions from inside the API.
it was about the interface, if it takes format flags like RM_Replicate, or flags like RM_HashSet.
i think it makes more sense that this API will be consistent with RM_HashSet.

btw, while on that subject, for Hash we have just one API for both HSET and HDEL, maybe for Sets we can do the same, and also have it cover the GET (IsMember case).
i.e. takes a flag that tells it if it's a query, removal or addition. all 3 APIs take the same set of arguments.
i admit it's a bit ugly though."
1267788375,12416,sundb,2023-07-19T09:08:43Z,What about `moduleCreateArgvFromUserFormat` ?
1267790612,12416,zh1029,2023-07-19T09:10:08Z,OK. Let me try to optimize it.
1268037846,12416,zuiderkwast,2023-07-19T12:57:44Z,"A blank line added by mistake?

```suggestion
```"
1268039552,12416,zuiderkwast,2023-07-19T12:59:08Z,"The drawback of having this comment before an internal function like moduleCreateArgvFromUserFormat is that it is not visible in the generated documentation. I think it's better to put this in the documentation of RM_Call() and refer to RM_Call() in other commands that use it, such as RM_Replicate()'s documentation."
1268046742,12416,zuiderkwast,2023-07-19T13:05:13Z,"For RM_HashSet, it is different because there you set the field's *value* to the special `REDISMODULE_HASH_DELETE` to delete the field. We can't do the same with a set since an element is not a field-value pair.

I like the three functions RM_SetAdd and RM_SetRem RM_SetIsMember.

Regarding format flags, I think it's better to use an `int flags` (like RM_HashSet) because the string flags for RM_Call() are for multiple arguments. In RM_Call(), each argument has its own format specifier (like printf) but for these Set API functions, all elements are of the same type and we only want one type."
1268832212,12416,zh1029,2023-07-20T01:23:06Z,Mistake. Will fix it.
1268838386,12416,zh1029,2023-07-20T01:35:41Z,"So there will be three functions RM_SetAdd, RM_SetRem and RM_SetIsMember instead combined one. and `int flags` to determine the left arguments are RedisModuleString or  plain C strings.  Is it OK to you?"
1268975930,12416,zh1029,2023-07-20T06:10:40Z,"I realized I have no idea while writing the simulator to invoke the RM_SetAdd after changing the RM_SetAdd as RM_SetAdd(RedisModuleKey *key, int flags, ...) because the elements number to be added is variable. e.g.

int set_add(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {
    if (argc < 3) return RedisModule_WrongArity(ctx);
    RedisModule_AutoMemory(ctx);
    int keymode = REDISMODULE_READ | REDISMODULE_WRITE;
    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], keymode);
    RedisModule_ReplyWithLongLong(ctx, RedisModule_SetAdd(key, REDISMODULE_SET_NONE, **_??????_**);
    RedisModule_CloseKey(key);
    return REDISMODULE_OK;
}

But with fmt. it is easy to call. e.g.

int set_add(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {
    if (argc < 3) return RedisModule_WrongArity(ctx);
    RedisModule_AutoMemory(ctx);
    int keymode = REDISMODULE_READ | REDISMODULE_WRITE;
    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], keymode);
    RedisModule_ReplyWithLongLong(ctx, RedisModule_SetAdd(key, ""v"", &argv[2], argc-2));
    RedisModule_CloseKey(key);
    return REDISMODULE_OK;
}"
1269168149,12416,zuiderkwast,2023-07-20T09:03:40Z,"Have you seen how it is done in [`RM_HashSet`](https://redis.io/docs/reference/modules/modules-api-ref/#RedisModule_HashSet)? The argument list is NULL terminated.

For format string, if you add multiple elements, would you repeat the format for each element? Like `RedisModule_SetAdd(key, ""ssss"", s1, s2, s3, s4)`?"
1270148661,12416,zh1029,2023-07-21T01:40:04Z,"The problem is not at function implementation. it is at the caller which invokes the function. To be honest, RM_HashSet has limitation for caller with the number of arguments must be known while invoking the function if you look at the simulator. 
https://github.com/redis/redis/blob/2495b90a647f9f9987202efd29647f81f217b8ad/tests/modules/hash.c#L21

    if (argc < 5 || argc % 2 == 0 || argc > 11)
        return RedisModule_WrongArity(ctx);

       if (argc == 5) {
        result = RedisModule_HashSet(key, flags,
                                     argv[3], value_or_delete(argv[4]),
                                     NULL);
    } else if (argc == 7) {
        result = RedisModule_HashSet(key, flags,
                                     argv[3], value_or_delete(argv[4]),
                                     argv[5], value_or_delete(argv[6]),
                                     NULL);
    } else if (argc == 9) {
        result = RedisModule_HashSet(key, flags,
                                     argv[3], value_or_delete(argv[4]),
                                     argv[5], value_or_delete(argv[6]),
                                     argv[7], value_or_delete(argv[8]),
                                     NULL);
    } else if (argc == 11) {
        result = RedisModule_HashSet(key, flags,
                                     argv[3], value_or_delete(argv[4]),
                                     argv[5], value_or_delete(argv[6]),
                                     argv[7], value_or_delete(argv[8]),
                                     argv[9], value_or_delete(argv[10]),
                                     NULL);
    } else {
        return RedisModule_ReplyWithError(ctx, ""ERR too many fields"");
    }

It is not friendly. The number of elements to be added/removed to set at key shall not be limited if referring to SADD/SREM command.

For example the scenario while implementing one redis extend command:
1.  set multiple(unknown number) pairs of string type key/value data.
2.  add the keys to one set at key for sake of finding keys performance from the set at key instead of from whole redis.

You'd better not limit the number of pairs key/value from the extend command..

The benefit with fmt is the ""v"" can tell the the function next argument is RedisModuleString type vector with number of elements is in next argument following."
1270151077,12416,zh1029,2023-07-21T01:46:37Z,Cmd(with command) vs Gen(generic without command). Both call moduleCreateArgvFromUserFormatAux().
1270529640,12416,zuiderkwast,2023-07-21T10:37:58Z,"You are right, `RM_HashSet` is not perfect. :-) I was just saying what we need to do if we want the syntax to match `RM_HashSet`.

Personally, I think these functions don't need to be variadic at all. If we wouldn't already have variadic HashSet, I would prefer a simple API `RM_HashSet(key, flags, field, value)` and let the module loop over its data and call this functions many times. But now we already have a variadict HashSet so maybe we should have SetAdd variadic too.

But we can allow a in flag corresponding to ""v"" as well, so it is possible to do something like

```C
RedisModule_SetAdd(key, REDISMODULE_SET_ARGV_ARGC, argv, argc)
```

or possibly, if we want to allow a variadic number of vectors too, expect a NULL-terminated list of argv-argc pairs

```C
RedisModule_SetAdd(key, REDISMODULE_SET_ARGV_ARGC, argv1, argc1, argv2, argc2, NULL)
```

But maybe this would make the API too complex; too hard to understand for users. It is really just as efficient to call it many times and easy to understand and write code like this:

```C
for (i = 0; i < argc; i++) {
    num_added += RedisModule_SetAdd(key, REDISMODULE_SET_NONE, argv[i], NULL);
}
```

That's some possibilities. I think it's up to the core team (@oranagra) to make the final decisions."
1270539204,12416,zuiderkwast,2023-07-21T10:50:00Z,Ignore my previous comment.
1284162819,12416,sundb,2023-08-04T08:50:41Z,"This `else if` is always entered when op is `REDISMODULE_SET_REM` or `REDISMODULE_SET_ISMEMBER`, so why they appear in the second and thrid `else if`, and similary, `REDISMODULE_SET_ADD` shouldn't appear if the third `else if`."
1284163179,12416,sundb,2023-08-04T08:51:01Z,"```suggestion
        /* return 0 if key doesn't exist for remove and ismember operation. */
```"
1284163467,12416,sundb,2023-08-04T08:51:18Z,"```suggestion
        /* key should be set type. */
```"
1284170354,12416,sundb,2023-08-04T08:57:54Z,"```suggestion
        } else if (op == REDISMODULE_SET_ISMEMBER)
```"
1284175748,12416,sundb,2023-08-04T09:03:16Z,"```suggestion
    if (argc != 3) return RedisModule_WrongArity(ctx);
    RedisModule_AutoMemory(ctx);
    int keymode = REDISMODULE_READ;
    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], keymode);
    int count = RedisModule_SetOperate(key, REDISMODULE_SET_ISMEMBER, REDISMODULE_SET_NONE, argv[2], NULL);
```"
1285307052,12416,zh1029,2023-08-07T01:54:35Z,This `else if (op == REDISMODULE_SET_REM || op == REDISMODULE_SET_ISMEMBER)` is used to check the key shall not be empty for remove and ismember operation. Add operation can be empty for creating new key. This `else if (op == REDISMODULE_SET_REM || op == REDISMODULE_SET_ADD)` is used to check the key mode must be write mode. 
1285307453,12416,sundb,2023-08-07T01:55:52Z,"```suggestion
    } else if ((op == REDISMODULE_SET_REM || op == REDISMODULE_SET_ISMEMBER) &&
               !key->value)
    {
        /* return 0 if key doesn't exist for remove and ismember operation. */
```"
1285307464,12416,zh1029,2023-08-07T01:55:54Z,Fixed in new commitment.
1285307508,12416,zh1029,2023-08-07T01:56:04Z,Fixed in new commitment
1285307551,12416,sundb,2023-08-07T01:56:11Z,"```suggestion
    } else if ((op == REDISMODULE_SET_REM || op == REDISMODULE_SET_ADD) && 
               !(key->mode & REDISMODULE_WRITE))
    {
        /* return 0 if key is not write mode for remove and add operation. */
```"
1285307564,12416,zh1029,2023-08-07T01:56:14Z,Fixed in new commitment
1285308064,12416,sundb,2023-08-07T01:57:50Z,we should call `moduleDelKeyIfEmpty()` to avoid creating an empty set.
1285308372,12416,sundb,2023-08-07T01:58:43Z,"```suggestion
    for (int i = 2; i < argc; i++) {
```"
1285308427,12416,sundb,2023-08-07T01:58:55Z,"```suggestion
    for (int i = 2; i < argc; i++) {
```"
1285309783,12416,sundb,2023-08-07T02:03:38Z,Is it better to move it up after the datatype block? .e.g `REDISMODULE_GET_API(StreamTrimByID);`
1285327193,12416,sundb,2023-08-07T02:35:27Z,This null check is unnecessary as it is handled by `zmalloc_default_oom`.
1285576102,12416,zuiderkwast,2023-08-07T08:53:44Z,"```suggestion
 * See also RM_ValueLength(), which returns the cardinality of a set.
```"
1285588095,12416,zuiderkwast,2023-08-07T09:04:26Z,"I think SetOperate with an extra parameter to select the operation, and that the return value depends on the operation, is a weird API. I prefer RM_SetAdd, etc. It's possible to use SetOperate as a helper if it simplifies the implementation. The implementation in general looks good to me.

This is just my opinion. Better wait for @oranagra's comment before you change it again. He is probably busy with the release of redis 7.2 now. This PR will be in redis 8 so there is no hurry."
1286845373,12416,oranagra,2023-08-08T09:17:03Z,"I agree it looks odd (was my suggestion), i think the reason i suggested it was that for hash, we also have one API that performs two different operations, and that when the API becomes complicated (the flags), and the complication applies to all 3 operations, it means the code, but also the documentation is shared.

I don't have a strong opinion, so i'd like to get views from a few others on that subject.
@guybe7 @itamarhaber @yossigo @madolson?
do you prefer one RM_SetOperation that takes the type of operation as input (ADD, REM, GET), or 3 separate APIs?
considering that we have var-args and a flags input to choose between RM String and C string, sharing code and docs, vs duplicating them..."
1289535839,12416,madolson,2023-08-10T04:33:15Z,"If we were starting from scratch, I don't know I would have a strong opinion about the API. But we already have explicit APIs (HashGet and HashSet for e.g.) for all of the other types, so it would be weird that this one API have a different format (SetOperation). So I guess that leads me to have a slight preference for having 3 different APIs with common code underneath, even though the vargs makes it verbose (but you can have the helper take in vargs).

Also coming at it from someone that writes a lot of rust (which, maybe ignore), I prefer explicit signatures and documentation for functions. I don't think I mind duplicating the flags, especially since there is just one. EBADF also only makes sense for SADD and SREM, so can be cleaned up. If you were writing code in something like rust which requires complete error handling, you wouldn't need to handle EBADF for ISMEMBER operation, which leads me to think rust binds for these APIs would want distinct functions with custom return codes for each type (or at least the read and write split), which leads me to believe we probably should have separate functions."
1289536419,12416,madolson,2023-08-10T04:34:27Z,Why can't we return -1 on error? ENOENT is a weird error code for me.
1360420987,12416,sundb,2023-10-16T09:58:38Z,"```suggestion
        numdeleted += setTypeRemove(key->value,eles[i]->ptr);
        if (moduleDelKeyIfEmpty(key)) break;
```"
1363020180,12416,zuiderkwast,2023-10-18T02:12:49Z,Please also test deleting from an empty key.
1363044257,12416,zuiderkwast,2023-10-18T02:40:37Z,"Other APIs use ENOTSUP if the key doesn't exist or is of wrong type. (ENOENT is sometimes used if an *element or entry within a key* does not exist.)

Some APIs return -1 and set errno to ENOTSUP, for example [RedisModule_StreamTrimByID](https://redis.io/docs/reference/modules/modules-api-ref/#RedisModule_StreamTrimByID)."
1366807610,12416,zuiderkwast,2023-10-20T10:45:07Z,"What about setting errno in these is-member cases?

I suggest returning -1 on errors here, so users cab distinguish between zero (not a member) and error.

!key->value is not an error, but !key and wrong type are errors."
1368223280,12416,zh1029,2023-10-23T07:20:14Z,OK. Changed as !key for empty key if open key with reading mode. !key-value for empty key if open key with writing mode.
1368268789,12416,zuiderkwast,2023-10-23T07:59:56Z,"Yes, looks good now. :+1:"
1379789890,12416,sundb,2023-11-02T09:07:45Z,"```suggestion
```"
1379803054,12416,sundb,2023-11-02T09:18:48Z,"```suggestion
    } else {
```"
1379803590,12416,sundb,2023-11-02T09:19:11Z,"```suggestion
    } else {
```"
1399960191,12416,sundb,2023-11-21T02:35:11Z,"This comment isn't correct, if all the elements already exist in the set, `numadded` will be 0."
1399963889,12416,sundb,2023-11-21T02:42:54Z,There is a strong desire for me to move the implementation of this whole piece after `RedisModule_StreamTrimByID`. 😁
1400201923,12416,zh1029,2023-11-21T08:37:16Z,Thank you :-)
1400249816,12416,zh1029,2023-11-21T09:12:53Z,"A bit difficult to describe it more accurate. So changed it to ""_Returns REDISMODULE_OK if elements have been added successfully._"". Meaning no failure happened though zero element was added."
710740349,9511,zuiderkwast,2021-09-17T04:24:19Z,"These are added syscalls for non-linux if O_CLOEXEC is not set.

To avoid doing extra syscalls, do this only if the flag is set in read_flags and write_flags."
710741000,9511,zuiderkwast,2021-09-17T04:26:37Z,We always set this for linux because it does no harm and it's no extra cost? Maybe explain this in a comment.
710742169,9511,zuiderkwast,2021-09-17T04:30:13Z,Better be explicit and write O_CLOEXEC|O_NONBLOCK everywhere. It makes the code more clear IMO.
710745968,9511,zuiderkwast,2021-09-17T04:42:48Z,Better spell out the actual flags here. The code can say what the comment above says. It's more clear IMO.
710755931,9511,panjf2000,2021-09-17T05:12:40Z,"Yes, it is like a convention without extra side effects, I'll add a comment fot it."
710757922,9511,panjf2000,2021-09-17T05:18:54Z,Done.
710757939,9511,panjf2000,2021-09-17T05:19:00Z,Done.
710760953,9511,panjf2000,2021-09-17T05:27:43Z,Done.
710775786,9511,zuiderkwast,2021-09-17T06:05:56Z,"I'm not sure if util.c is the best file to put `createPipe()`. Maybe `anet.c` is a better place. So far, util is mostly string manipulation functions.

The commet in anet.c says ""Basic TCP socket stuff made a bit less boring"", but some functions like `anetNonBlock()` is for any file descriptor, also pipes, so I think createPipe() can also be in anet.

I will leave it for other reviewers to think about."
710777575,9511,panjf2000,2021-09-17T06:10:00Z,"I've thought about putting `createPipe()` into `anet.c` and then ceased for the same reason of you.
@oranagra any suggestions？"
710781018,9511,zuiderkwast,2021-09-17T06:18:09Z,"If we want to keep anet for only TCP, we can avoid using `anetNonBlock()` in `createPipe()`. It's actually nothing else than `fcntl(fd, F_SETFL, O_NONBLOCK)` so I think we can just call fcntl directly here and not include anet.h."
710784019,9511,panjf2000,2021-09-17T06:25:01Z,"Actually `anetNonBlock()` is also called on pipes way before this PR, so I don't think `createPipe()` using `anetNonBlock()` is our main problem here."
710794678,9511,zuiderkwast,2021-09-17T06:46:08Z,"No, the problem is that util now depends on anet. It is better if they are independent.

I just realized anetNonBlock does one fcntl to read the flags and then another to set the flags. anetCloexec also does two. If we set both flags (non-linux non-freebsd) we do 4 syscalls instead of 1 (fcntl with all flags combined) for one fd.

Actually, I think createPipe() can be much simpler if it's actually setting all flags directly (error handling omitted):

```C
#if defined(__linux__) || defined(__FreeBSD__)
    int flags = read_flags & write_flags;
    pipe2(fds, flags);
    if (read_flags != flags) fcntl(fds[0], F_SETFD, read_flags);
    if (write_flags != flags) fcntl(fds[1], F_SETFD, write_flags);
#else
    pipe(fds)
    fcntl(fds[0], F_SETFD, read_flags);
    fcntl(fds[1], F_SETFD, write_flags);
#endif
```"
710811576,9511,panjf2000,2021-09-17T07:16:50Z,"`createPipe()` would be concise if we just call `fcntl()` directly instead of `anetNonBlock()` and `anetCloexec()` like you said, what do you think about that?
@oranagra "
711254717,9511,panjf2000,2021-09-17T18:05:59Z,"> No, the problem is that util now depends on anet. It is better if they are independent.
> 
> I just realized anetNonBlock does one fcntl to read the flags and then another to set the flags. anetCloexec also does two. If we set both flags (non-linux non-freebsd) we do 4 syscalls instead of 1 (fcntl with all flags combined) for one fd.
> 
> Actually, I think createPipe() can be much simpler if it's actually setting all flags directly (error handling omitted):
> 
> ```c
> #if defined(__linux__) || defined(__FreeBSD__)
>     int flags = read_flags & write_flags;
>     pipe2(fds, flags);
>     if (read_flags != flags) fcntl(fds[0], F_SETFD, read_flags);
>     if (write_flags != flags) fcntl(fds[1], F_SETFD, write_flags);
> #else
>     pipe(fds)
>     fcntl(fds[0], F_SETFD, read_flags);
>     fcntl(fds[1], F_SETFD, write_flags);
> #endif
> ```

I just recall that we can't simply refine the `createPipe()` like that cuz we have to differentiate between `F_GETFL/F_SETFL` and `F_GETFD/F_SETFD`"
711559026,9511,zuiderkwast,2021-09-18T08:39:48Z,"Oh, good point. They're called ""file descriptor flags"" (FD) and ""file status flags"" (FL) in the fcntl map page.

I still think we should use fcntl directly instead of the anet functions. Why?

* We avoid the extra syscalls with F_GETFL and F_GETFD.
* anetNonBlock and anetCloexec are not abstracting anything anyway because we know we're working with file descriptors since we call pipe() and pipe2() and we use the constants defined in fcntl.h (O_CLOEXEC and O_NONBLOCK). It's a useless abstraction which only hides what's happening."
711639657,9511,zuiderkwast,2021-09-18T20:54:33Z,This fallback code for linux and freebsd is identical to the `#else` code (non-linux non-freebsd) below. We can avoid code duplication using goto.
711639822,9511,zuiderkwast,2021-09-18T20:56:24Z,"This shouldn't be done here if pipe2() has already set O_NONBLOCK. It's extra syscalls which you wanted to avoid using pipe2, right?

An idea how to combine/simplify the common code for pipe() and pipe2() is to set flags = 0 in the pipe() case. Then, here in the code which is common for both pipe() and pipe2(), if `flags & O_NONBLOCK` is true it means that the flag it has already been set in pipe2 above. It's probably even more clear to rename `flags` to `pipe_flags` too. Example:

```C
#if (linux or freebsd)
    pipe_flags = E_CLOEXEC | (read_flags & write_flags);
    if (pipe2(fds, pipe_flags)) {
        if (errno = E_NOSYS) goto pipe;
        return -1;
    }
    goto common;
#endif

pipe:
    pipe_flags = 0;
    pipe(fds);

common:
    if ((read_flags & O_NONBLOCK) && !(pipe_flags & NONBLOCK))
        if (fcntl(fds[0], F_SETFL, O_NONBLOCK))
            goto error;
    // and similar for write_flags
```

... and we can easily allow any other flags as well (all except CLOEXEC can be set using F_SETFL) just by changing the last part like this:

```C
    if (read_flags & ~pipe_flags & ~O_CLOEXEC)
        if (fcntl(fds[0], F_SETFL, read_flags & ~pipe_flags & ~O_CLOEXEC))
            goto error;
    // and similar for write_flags
```"
711643056,9511,zuiderkwast,2021-09-18T21:27:21Z,This include isn't needed in util.h now.
711672426,9511,panjf2000,2021-09-19T02:49:44Z,"> This shouldn't be done here if pipe2() has already set O_NONBLOCK. It's extra syscalls which you wanted to avoid using pipe2, right?

I think you missed the above code:
```c
    if (!ret && (flags & O_NONBLOCK))
        return 0;
```"
711672719,9511,panjf2000,2021-09-19T02:53:12Z,"This is for macOS build, `O_CLOEXEC` and `O_NONBLOCK` will be not defined without this include."
711673339,9511,panjf2000,2021-09-19T03:00:12Z,But I can try to simplify the code further.
711675549,9511,panjf2000,2021-09-19T03:25:29Z,"> ... and we can easily allow any other flags as well (all except CLOEXEC can be set using F_SETFL) just by changing the last part like this:

I don't think this is necessary, we should only focus on `O_NONBLOCK` and `O_CLOEXEC` which are currently used."
711677821,9511,panjf2000,2021-09-19T03:52:11Z,"![image](https://user-images.githubusercontent.com/7496278/133914793-d186723e-01b7-4cfd-acc2-7ea9cb6ea088.png)
We need to resolve the compilation error of ""unused labels"" in redis CI on Mac."
711712046,9511,zuiderkwast,2021-09-19T09:10:23Z,These macros are not used in this file. The include is needed in util.c though.
711712270,9511,zuiderkwast,2021-09-19T09:11:41Z,"Oh, just put the pipe label before `#endif`"
711712684,9511,zuiderkwast,2021-09-19T09:15:28Z,For 'common' I think it's not to hard to solve...
711713052,9511,panjf2000,2021-09-19T09:18:07Z,"what about label ""common""?"
711713189,9511,panjf2000,2021-09-19T09:18:51Z,"It seems to me that the label ""common"" will fail the build on mac anyway."
711716432,9511,panjf2000,2021-09-19T09:45:01Z,I was talking about https://github.com/redis/redis/runs/3629070443?check_suite_focus=true
711721259,9511,oranagra,2021-09-19T10:24:36Z,"i'm sorry, i'm not following this discussion closely (busy elsewhere).
regarding this specific thread (haven't read all of it), here's my view.
I think anet.c isn't currently specifically related to TCP, it's a file that contains some platform abstraction utilities (mainly revolved around sockets, and file descriptors), so this pipe related wrapper seems to be a good candidate to be placed there.
on the other hand, util.c is not about platform abstraction, but rather just some pure C code utilities for small chores."
711722010,9511,panjf2000,2021-09-19T10:30:27Z,"OK, I'm moving the `createPipe()` from `util.c` to `anet.c`."
711812221,9511,zuiderkwast,2021-09-19T22:24:07Z,"This is slightly hard to understand. Just an idea. After successful pipe2() do this:

```C
    /* Clear the flags which we have already set using pipe2. */
    read_flags &= ~pipe_flags;
    write_flags &= ~pipe_flags;
```

Then the code setting flags is more simple:

```C
    if (read_flags & O_CLOEXEC)
        if (fcntl(fds[0], F_SETFD, O_CLOEXEC))
            goto error;
    if (write_flags & O_CLOEXEC)
        if (fcntl(fds[1], F_SETFD, O_CLOEXEC))
            goto error;
```"
711845859,9511,panjf2000,2021-09-20T02:19:20Z,Done.
723030407,9511,oranagra,2021-10-06T08:57:34Z,"```suggestion
    /* Create a pipe for module threads to be able to wake up the redis main thread.
     * Make the pipe non blocking. This is just a best effort aware mechanism
```"
723033876,9511,oranagra,2021-10-06T09:01:38Z,"```suggestion
    /* When possible, try to leverage pipe2() to apply flags that are common to both ends.
     * There is no harm to set O_CLOEXEC to prevent fd leaks. */
```"
723035740,9511,oranagra,2021-10-06T09:03:49Z,"```suggestion
        /* Fail on real failures, and fallback to simple pipe if pipe2 is unsupported. */
        if (errno != ENOSYS && errno != EINVAL)
```"
723036676,9511,oranagra,2021-10-06T09:05:02Z,"```suggestion
        /* If the flags on both ends are identical, no need to do anything else. */
        if ((O_CLOEXEC | read_flags) == (O_CLOEXEC | write_flags))
```"
723040443,9511,oranagra,2021-10-06T09:09:32Z,"```suggestion
    /* When we reach here with pipe_flags of 0, it means pipe2 failed (or was not attempted),
     * so we try to use pipe. Otherwise we skip and proceed to set specific flags below. */
    if (pipe_flags == 0 && pipe(fds))
```"
723041321,9511,oranagra,2021-10-06T09:10:36Z,"```suggestion
     * Currently, only one such flag is supported: FD_CLOEXEC, the close-on-exec flag. */
```"
723051144,9511,oranagra,2021-10-06T09:22:30Z,"for a moment i thought that maybe we wanna backup and restore `errno` here.
but i guess there's no need (successful close will not not change it, and if for some reason `close` fails, i'm not sure we care too much which error was it).
let me know if you think otherwise."
723068214,9511,panjf2000,2021-10-06T09:43:11Z,"I don't think there is anything we can do when the `close(fd)` fails, and also, there is no need to worry too much about it cuz when this extremely unlikely failure happens to `close`, it could be a kernel defect which is not something redis can handle."
723068910,9511,panjf2000,2021-10-06T09:44:04Z,"So we should just follow the current strategy like:
https://github.com/redis/redis/blob/d4bca53cd9879e0296bfa0a7c17df79dd52496ae/src/childinfo.c#L57-L67"
723077851,9511,zuiderkwast,2021-10-06T09:55:11Z,"Actually also ""defined"". It's from the `fcntl` manpage:

![image](https://user-images.githubusercontent.com/273886/136181321-439f4914-aa51-4853-aa28-dce9c2fbe618.png)
"
723120545,9511,oranagra,2021-10-06T10:49:13Z,"thing brings me to another thought. are we sure we can mix these two flags in the same variable?
is there any guarantee that they don't collide? (considering they where intended to be used by different ""functions"")"
723121359,9511,oranagra,2021-10-06T10:50:19Z,"i wasn't concerned about exec failing, but rather about preserving the value of the original `errno`.
but i don't think that's a real concern.."
723125421,9511,zuiderkwast,2021-10-06T10:56:18Z,They don't collide. Pipe2 takes them in the same variable.
723126684,9511,panjf2000,2021-10-06T10:58:07Z,"> thing brings me to another thought. are we sure we can mix these two flags in the same variable? is there any guarantee that they don't collide? (considering they where intended to be used by different ""functions"")

Yes, there is such a guarantee because the only file descriptor flag: `FD_CLOEXEC/O_CLOEXEC` is now treated specially in the current `anetPipe()`, which makes sure this flag won't interfere with other file status flags like `O_NONBLOCK`."
723130059,9511,oranagra,2021-10-06T11:02:48Z,the argument about pipe2 taking them in the same variable applies only to Linux.. maybe in another system they can be overlapping?
723131938,9511,oranagra,2021-10-06T11:05:45Z,"ok, they're both used in `open` syscall in the same argument too."
723132640,9511,panjf2000,2021-10-06T11:06:49Z,"> the argument about pipe2 taking them in the same variable applies only to Linux.. maybe in another system they can be overlapping?

Actually `pipe2()` works the same way on freeBSD as it does on Linux: https://www.freebsd.org/cgi/man.cgi?query=pipe2&apropos=0&sektion=0&manpath=FreeBSD+13.0-RELEASE+and+Ports&arch=default&format=html"
723159593,9511,zuiderkwast,2021-10-06T11:46:05Z,"> the argument about pipe2 taking them in the same variable applies only to Linux.. maybe in another system they can be overlapping?

That's a valid point. The constants are in the same ""namespace"" though, as their names all start with same prefix, so it's hard to imagine that they will collide in any system. [Edit] Ahh, there are `O_CLOEXEC` and `FD_CLOEXEC`....."
723163239,9511,zuiderkwast,2021-10-06T11:51:16Z,"I guess we need to use `FD_CLOEXEC` when it's set with fcntl, e.g.

```diff
     if (read_flags & O_CLOEXEC)
-        if (fcntl(fds[0], F_SETFD, O_CLOEXEC))
+        if (fcntl(fds[0], F_SETFD, FD_CLOEXEC))
             goto error;
```"
723167402,9511,panjf2000,2021-10-06T11:57:11Z,"At least we can confirm that `O_CLOEXEC` and `FD_CLOEXEC` have the same value on Linux and FreeBSD, and I believe that's all we need to know here, so I don't think this is a concern in this PR."
723170512,9511,zuiderkwast,2021-10-06T12:01:14Z,"No, this code is used also in systems without pipe2."
723172777,9511,oranagra,2021-10-06T12:04:29Z,"> I guess we need to use FD_CLOEXEC when it's set with fcntl

good catch!. i had an itch but couldn't scratch it..
this is probably a bug that could have go unnoticed.

let's also make sure to clearly define which flags should be used (the `O_xxx` ones) in the top comment of this function."
723174462,9511,zuiderkwast,2021-10-06T12:06:54Z,"Theoretically, `O_CLOEXEC` (used by pipe2 and open) doesn't have to be equal to `FD_CLOEXEC` (used by fcntl), so I think we need this change.

In the manpage of `open` (man 2 open):

       By default, the new file descriptor is set to remain open across an ex‐
       ecve(2) (i.e., the FD_CLOEXEC file descriptor  flag  described  in  fc‐
       ntl(2) is initially disabled); the O_CLOEXEC flag, described below, can
       be used to change this default.  The file offset is set to  the  begin‐
       ning of the file (see lseek(2)).

```suggestion
    if (read_flags & O_CLOEXEC)
        if (fcntl(fds[0], F_SETFD, FD_CLOEXEC))
            goto error;
    if (write_flags & O_CLOEXEC)
        if (fcntl(fds[1], F_SETFD, FD_CLOEXEC))
            goto error;
```

I do think it's safe to assume that `O_CLOEXEC` macro does not collide with other `O_` macros though."
723176862,9511,zuiderkwast,2021-10-06T12:10:01Z,Resolved.
723177446,9511,oranagra,2021-10-06T12:10:53Z,"yeah, we can the `O_` macros are not colliding (not just because of the common prefix, but also because they can be used in `open`).

but since there are two flags with similar purpose, we must make it clear in a top comment above the function which ones should be used."
723180483,9511,zuiderkwast,2021-10-06T12:15:01Z,"```suggestion
/* Create a pipe buffer with given flags for read end and write end.
 * The supported flags are O_CLOEXEC and O_NONBLOCK. */
```"
723185941,9511,panjf2000,2021-10-06T12:22:04Z,I think that `anetPipe()` supports file descriptor flag `O_CLOEXEC` and all other file status flags in theory.
723191856,9511,zuiderkwast,2021-10-06T12:29:11Z,"There are some flags in `open` that make no sense for pipes, such as `O_DIRECTORY`. The ones supported by pipe2 are probably the only ones that make sense for pipes. We can add `O_DIRECT`."
723198544,9511,oranagra,2021-10-06T12:37:17Z,"We can say that it supports the flags supported by `pipe2()` and `fcntl(F_SETFL)`, and also explicitly give `O_CLOEXEC` and `O_NONBLOCK` as examples, this way we're covered by both telling the truth about the capabilities of this function, and also making sure users don't use `FD_CLOEXEC` by mistake."
723201962,9511,panjf2000,2021-10-06T12:41:33Z,"Yes, some file status flags might not be passed into `anetPipe()`, but the current comment is kind of misleading that `anetPipe()` only supports these flags function functionally while it actually supports all file status flags in theory, even though lots of flags is needless, how about change the comment to ""The supported flags are O_CLOEXEC and all other file status flags in theory, but O_CLOEXEC and O_NONBLOCK are adequate."""
723205525,9511,oranagra,2021-10-06T12:45:38Z,"i think ""status flags"" is a bit vague, i rather refer to `fcntl(F_SETFL)` like i did in my previous comment.
in any case, i want to give explicit examples `O_CLOEXEC` and `O_NONBLOCK`, the other details are concerning me less."
1336789539,12611,sundb,2023-09-26T07:57:37Z,"```suggestion
#if defined(__APPLE__)
  #if defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 1060
```
`__MAC_10_6` didn't exist before 10.6."
1336969649,12611,ygcaicn,2023-09-26T10:05:36Z,Thank you for your review. This is just too foolish.
1337044976,12611,sundb,2023-09-26T11:16:06Z,"```suggestion
#if defined(__APPLE__) && defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 1060
#define redis_fstat fstat64
#define redis_stat stat64
#else
#define redis_fstat fstat
#define redis_stat stat
#endif
```"
1337078524,12611,sundb,2023-09-26T11:43:19Z,seem to me that these indentations are unnecessary. 
1337097889,12611,oranagra,2023-09-26T12:00:00Z,"i don't like the pinning here for a specific version (which i assume is newer than macos-latest).
i suggest instead of keep using macos-latest here in daily.yaml.

and add a quick (maybe just compilation CI step, like we do in CI.yml) on both newer (13) and older (10?) MACOS.

@sundb WDYT?"
1337105062,12611,oranagra,2023-09-26T12:06:50Z,can you do me a favor and also explain the difference between these macros in the PR top comment and how it affects this check.
1337106999,12611,oranagra,2023-09-26T12:08:38Z,"maybe we can simplify the code (here and in other places) by creating some short-hand define?

e.g. MAC_OS_10_6_DETECTED ?"
1337132358,12611,sundb,2023-09-26T12:29:58Z,"I think using macos-latest is enough, waiting for github action to get him up to speed with 13, which was just to run a verification, and now we can revert it, @ygcaicn please do this.
The minimum supported version of macOS of github action is 11, so we don't need to do that either."
1337154882,12611,oranagra,2023-09-26T12:48:32Z,but what if we some day do some change that is incompatible with 11 and won't notice?
1337185168,12611,sundb,2023-09-26T13:11:20Z,do you mean 10.6 instead of 11?
1337236700,12611,oranagra,2023-09-26T13:43:47Z,"i mean that same as we discovered now, a compilation issue with a certain SDK or OS version, it could be some some future change we'll make will be incompatible with an older version (either pre 10.6, or 11.0), and then i'd like the CI to detect that before (or shortly after) merging."
1337349002,12611,ygcaicn,2023-09-26T14:53:39Z,The description explaining this behavior has already been updated in the top comments.
1337353695,12611,ygcaicn,2023-09-26T14:56:39Z,"MAC_OS_X_VERSION_10_6 is just the boundary point for these few code, perhaps there will be more boundary points in the future, I think it would be better to describe it directly."
1337370910,12611,sundb,2023-09-26T15:08:29Z,"daily.yml: https://github.com/sundb/redis/blob/5a3b7aaaf9b4f04705c26c1affc545fe768d5ee6/.github/workflows/daily.yml#L33-L60
run CI: https://github.com/sundb/redis/actions/runs/6314536381/job/17145038951

@oranagra That's what you're supposed to want.
But I still have my doubts, there's no way to predict when macos will come up with broken compatibility changes, and we could still end up with what we're experiencing now."
1338089463,12611,oranagra,2023-09-27T06:14:01Z,"what you did seems right.
of course we cant protect from their compatibility changes introduced by future versions.
but at least i want to protect from our changes breaking compatibility with an older version.
please make a PR"
1338094422,12611,oranagra,2023-09-27T06:20:46Z,"i mean, in the past we used to use fstat64 only when MAC_OS_X_VERSION_10_6 is NOT defined.
so i assume any version that's older than 10.6. (it was defined in all newer versions).

and now we're using __MAC_OS_X_VERSION_MIN_REQUIRED (if defined and set to lower than 1060).
so i assume older versions don't have that define, and in newer ones it is set to higher value?
shouldn't we use `>=` instead of `<`?"
1338095543,12611,oranagra,2023-09-27T06:22:12Z,"yeah, but it makes the condition complicated, so extracting it to a separate line will help, even if it's just for one condition.
also, the same one happens to be used in 3 conditions.
if we'll have more boundary points in the future, we can add more of these."
1339470333,12611,sundb,2023-09-28T03:20:37Z,"@oranagra I see that `__MAC_OS_X_VERSION_MIN_REQUIRED` already exists in macos sdk 10.1, so we can assume that it was always there.
A second thought, I feel like we're misusing `__MAC_OS_X_VERSION_MIN_REQUIRED`, which lets the developer tell the compiler that we want the program to be able to be executed at a certain minimum version, but in reality, we're forcing the use of `fstat64` up to 10.6, and `fstat` after that.
In that case i think #12601 would have been more appropriate , at least it wouldn't have been confusing.

btw, we can use the `make REDIS_CFLAGS='-mmacosx-version-min=10.1'` command to make this PR compile fail."
1339480151,12611,ygcaicn,2023-09-28T03:39:05Z,"`int fstat64(int, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_6, __IPHONE_NA, __IPHONE_NA);`

From the definition of fstat64, it can be seen that it was changed from 10.5 and deprecated from 10.6.  We can safely use fstat64 when the MAC_OS_X_VERSION_MAX_ALLOWED is less than 10.6, as it represents the highest available API version. The default definition of MAC_OS_X_VERSION_MAX_ALLOWED starts from 10.1, so we don't need to worry about it.

Using MAC_OS_X_VERSION_MIN_REQUIRED may seem less reasonable compared to this approach. For instance, if MAC_OS_X_VERSION_MIN_REQUIRED is set to a value lower than 1060 and MAC_OS_X_VERSION_MAX_ALLOWED is set to a value greater than 1060, we should use fstat.


```
/* Define redis_fstat to fstat or fstat64() */
#if defined(__APPLE__) && defined(MAC_OS_X_VERSION_MAX_ALLOWED) && MAC_OS_X_VERSION_MAX_ALLOWED < 1060
#define redis_fstat fstat64
#define redis_stat stat64
#else
#define redis_fstat fstat
#define redis_stat stat
#endif
```

Is this logic reasonable?"
1339576814,12611,oranagra,2023-09-28T06:08:35Z,"ok, i think i understand what i was missing so far.
the MIN_REQUIRED thing is a way for for the user to tell the build which versions are expected to run the binary we're producing, and in our case it is implicitly defined by the SDK rather than by us.

I personally don't care much for MacOS builds, i assume they're only used for development and testing, and that no one circulates binaries, and we can assume that the system that builds them is the one that runs them.
maybe i'm wrong. am i?

in that light, it doesn't matter if we use MIN_REQUIRED or MAX_ALLOWED, we can't support both versions in the same build anyway.

anyway, my attention is needed elsewhere.
@sundb i delegate the decision to you (if you're willing to take it), please just make sure it is explained in the code / commit message, and we have some CI coverage for what we can easily get."
1339640569,12611,sundb,2023-09-28T07:13:34Z,"@ygcaicn I tend to use `__MAC_OS_X_VERSION_MAX_ALLOWED`, which is the recommended way to determine version from the official documentation.
https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/cross_development/Using/using.html

```
#ifdef __MAC_OS_X_VERSION_MAX_ALLOWED
--
// code only compiled when targeting OS X and not iOS
// note use of 1050 instead of __MAC_10_5
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
if (CGColorCreateGenericCMYK != NULL) {
CGColorCreateGenericCMYK(0.1,0.5.0.0,1.0,0.1);
} else {
#endif
// code to create a color object with earlier technology
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
}
#endif
#endif
}

```"
1339677482,12611,ygcaicn,2023-09-28T07:44:56Z,"@sundb Okay, I agree."
1339800835,12611,sundb,2023-09-28T09:17:11Z,"I do agree with adding `MAC_OS_10_6_DETECTED`, I thought about it before, but I kept quiet."
1339844955,12611,ygcaicn,2023-09-28T09:49:40Z,Okay.
1339849033,12611,sundb,2023-09-28T09:52:41Z,Please add this to `fmacro.h`
1339864884,12611,ygcaicn,2023-09-28T10:04:40Z,"I just thought about it too, but `__MAC_OS_X_VERSION_MAX_ALLOWED` is defined after `#include <AvailabilityMacros.h>`."
1339875949,12611,sundb,2023-09-28T10:13:11Z,"Yes, you are right, let's keep it as now."
1339989515,12611,sundb,2023-09-28T11:38:31Z,"Please add some comments to this to explain why we are doing this, maybe refer to the official documentation."
1339991870,12611,sundb,2023-09-28T11:40:13Z,"please also apply [sundb/redis@5a3b7aa/.github/workflows/daily.yml#L33-L60](https://github.com/sundb/redis/blob/5a3b7aaaf9b4f04705c26c1affc545fe768d5ee6/.github/workflows/daily.yml#L33-L60) to this PR, and put it after `test-macos-latest-cluster` block."
1342043371,12611,sundb,2023-10-01T02:31:18Z,"@ygcaicn Looks good, please finish the rest before merging."
1342904526,12611,shahsb,2023-10-02T16:20:06Z,"May I know, What does `__MAC_OS_X_VERSION_MAX_ALLOWED` translates to?

Who is responsible for setting this MAX version value?

Is it Compiler?

Or Is it us? Do we define this via some Build file?"
1342905543,12611,shahsb,2023-10-02T16:21:11Z,"> Please add some comments to this to explain why we are doing this, maybe refer to the official documentation.

Please add a comment mentioning the detailed reasoning behind this."
1342908902,12611,shahsb,2023-10-02T16:24:42Z,"Could you please define `MAC_OS_10_7_DETECTED` at the start of this file, similar to `MAC_OS_10_6_DETECTED`.

Being consistent always helps, Thanks!

Please add a comment to, this will greatly help in future to tackle similar problems if observed."
1343432830,12611,sundb,2023-10-03T03:36:33Z,"`__MAC_OS_X_VERSION_MAX_ALLOWED` is to determine the highest macos version we want to run on.

it is determined by the SDK:
```c
#ifdef __MAC_OS_X_VERSION_MIN_REQUIRED
    /* make sure a default max version is set */
    #ifndef __MAC_OS_X_VERSION_MAX_ALLOWED
        #define __MAC_OS_X_VERSION_MAX_ALLOWED __MAC_13_3
    #endif
#endif /* __MAC_OS_X_VERSION_MIN_REQUIRED */
```

also refer to the document (Conditionally Compiling for Different SDKs): https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/cross_development/Using/using.html"
1343433921,12611,sundb,2023-10-03T03:38:01Z,"It's only used in one place, so it's not the same as MAC_OS_10_6_DETECTED which is used in more than three places."
1346224183,12611,shahsb,2023-10-04T17:25:07Z,"I'm okay, but remember it's not about one place or three places. It's about consistency and that always helps in the long run. Tomorrow the issue could arrive for another versions, and if we maintain all such things at a single place really helps. Ideally we should have a separate header file for maintaining such things. Thanks!"
1346227541,12611,shahsb,2023-10-04T17:27:23Z,Thanks!
1346232058,12611,shahsb,2023-10-04T17:31:23Z,??
1349608568,12611,sundb,2023-10-08T01:59:46Z,"@shahsb https://github.com/redis/redis/pull/12611#discussion_r1339849033
this is the reason why we don't put it in `fmacros.h`"
748790946,9774,madolson,2021-11-14T03:01:17Z,Why are we catching these exceptions? Also if the test fails midway through these changes will get lost.
753402050,9774,ny0312,2021-11-19T17:49:17Z,"Good question. I was copying what existing tests did. Looking at it now, it makes more sense to let the exceptions be raised and fail the test, instead of catching and dropping them.

Re: tests failing midway through. If one test case fail, does the test framework continue to run the remaining tests? If yes, this sounds like the generic issue, i.e. the lack of isolation between cluster tests. How do existing tests handle prevent ""leaks""?"
757686028,9774,madolson,2021-11-26T20:29:12Z,"Yeah, the testing framework is a little bit silly in that it doesn't do a full reset of the cluster nodes. "
757686583,9774,madolson,2021-11-26T20:31:55Z,This isn't accurate anymore.
757715820,9774,ny0312,2021-11-26T23:20:40Z,Fixed.
757885604,9774,oranagra,2021-11-28T11:55:37Z,"so this is similar to the client output buffer limit, right?
dropping connections when they consume too much memory.
which is suppose to be the case only when a cluster node hangs (or on a burst of local PUBLISH calls)?.

I see that there too the limit is enabled by default for some types.
specifically, the replica client are limited to 256mb, and the pubsub clients to 32mb.
i assume that considering that there are usually not a lot of replicas, this makes the cluster nodes more similar to pubsub clients, so maybe we should aim much lower with the default limit?

for clients, we now also have a limit for the sum memory of all of them (`maxmemory-clients`) but i suppose that for cluster nodes we don't need that (unlike clients, their number is bound and controlled by an admin)"
757885877,9774,oranagra,2021-11-28T11:58:10Z,"i suppose we better use differed reply, rather than run the loop twice."
757886375,9774,oranagra,2021-11-28T12:02:16Z,is it really needed to expose the fd to users?
757886449,9774,oranagra,2021-11-28T12:02:51Z,this is another interface change
757922941,9774,madolson,2021-11-28T16:50:07Z,"For some reason I thought we also exposed the FD in client list, but we don't. I would agree that I don't think we should emit it."
757923253,9774,madolson,2021-11-28T16:53:16Z,"I forgot where we came up with 1GB, but lowering seems reasonable. I think the limit is somewhere in between the two. We expect the other side to be consuming the data as fast as possible, like a replica, but it also has the high write amplification like pubsub. Since each individual link is small, I agree that 32mb sounds reasonable. "
758600388,9774,ny0312,2021-11-29T17:49:43Z,"This feature aims to protect against any case where a peer cannot drain cluster link send buffers as fast as Redis can fill them, e.g. hang peer, slow peer, etc.

I chose 1GB as the default limit based on the max possible size of a single PubSub command, which is 1GB by default (`client-query-buffer-limit`'s default value). I wanted cluster link buffer to be able to fit at least a single PubSub command by default.

Let me know what you think."
758601109,9774,ny0312,2021-11-29T17:50:35Z,Removed `fd` from the `cluster link` output.
758601418,9774,ny0312,2021-11-29T17:50:54Z,Changed. Didn't know Deferred Reply is a thing.
758608188,9774,ny0312,2021-11-29T17:59:23Z,"Yes. In general, IMO memory consumption on the cluster bus has been a blind spot. 

For example, before we had [this commit](https://github.com/redis/redis/commit/8647addf934c453e933bb5f26ab4950fd5924a04), cluster link buffers never shrunk and could grow unbounded, but we have no way to observe/monitor it while it was happening."
759228338,9774,oranagra,2021-11-30T12:26:39Z,"by ""interface change"" i meant it should be listed in the top comment, for the purpose of release notes and approval of reviewers that don't have time to read the code.

i.e. all interface changes are ""major decisions"" that must have lazy consensus by the core-team."
759231122,9774,oranagra,2021-11-30T12:30:17Z,"i suppose that effectively this means for many deployments as if the default is practically unlimited (will still cause mass eviction / OOM).
maybe that's a good thing, to consider that as if it's not a ""breaking change"", i.e. the new default has the same behavior as the old versions, but if we look at it like that, maybe just set it to 0 by default?

if we have any specific reasoning like the one you just mentioned, maybe we should document it in the redis.conf and also in the top comment."
759532841,9774,ny0312,2021-11-30T18:02:05Z,"I dont know if I agree that the default of 1GB is practically unlimited. 1GB is indeed a generous limit but it still offers some protection which is better than none, because slow peers due to network issues are real issues.

I believe the protection offered by this new limit should be turned on by default. I would even prefer lowering it to 32MB than `0`, but IMO 1GB makes sense because my reasoning in the previous post.

Added this reasoning to `redis.conf` and top comment."
759533212,9774,ny0312,2021-11-30T18:02:37Z,"I see. Good to know. Thanks for the info.

Added to the top comment."
759560021,9774,madolson,2021-11-30T18:38:33Z,I suppose we should add a log message here to explain what happened?
759561904,9774,madolson,2021-11-30T18:41:03Z,"I suppose one problem with 32MB is that pubsub messages might get constantly dropped and it would be very hard to notice. Unlike a regular pubsub client, which will get repeatedly disconnected if large messages are put in it, the cluster link will just get dropped and re-established, but the ""connected"" pubsub client won't notice anything. So I guess I'm back in the 1gb camp, and we'll use it more as a mechanism to make sure it doesn't grow unbounded."
759574142,9774,oranagra,2021-11-30T18:58:09Z,"I was arguing that for **some** deployments it's practically unlimited. I.e. Ones with not a lot of memory (either physical, or just the maxmemory config), or ones with a lot of cluster nodes. 

So considering that, i was arguing that maybe the default should be disabled, and thus not changing default behaviour on upgrades. 

P.s. Note that nearly all the memory limit setting in Redis are off by default (except for client buffers). This is because it's impossible to come up with a number that will be a good default for everyone. 

Anyway, considering what @madolson wrote, about getting disconnections and reconnection, resulting the silent loss of messages with no clear issue indicated anywhere, I'm not sure i like that feature at all.. "
759603869,9774,ny0312,2021-11-30T19:41:39Z,"I hear you about it's impossible to pick a default to make everyone happy.

I also agree that **silently** dropping cluster links and PubSub broadcast messages is bad.

Please allow me to re-visit why I wrote this PR in the first place. Before this PR, cluster link buffers can grow unbounded and:
1. It's impossible to observe if it is happening
2. It's impossible to isolate which link is using memory
3. It's impossible to mitigate it with minimal impact on the server (there is no easy way to free a specific cluster link that is over-using memory).

In this PR:
1. `mem_cluster_links` INFO field is introduced to address (1)
2. `CLUSTER LINKS` command is introduced to address (2)
3. `cluster-link-sendbuf-limit` config is introduced to address (3).

In this context, re: `enabling cluster-link-sendbuf-limit by default or not`. I was leaning toward enabling by default. Because I trust the default of 1GB will not produce ""false alarms"". That is, we never expect a cluster link to use >1GB by default. When a cluster link does, it means Redis is operating in an abnormal and degraded mode, which we want to get out of. Enabling by default just means Redis would auto-mitigate such an abnormal situation, which is a net positive. On smaller deployments where there is not a lot of memory, this auto-mitigation will never take effect unfortunately, so Redis regresses to its current behavior, but at least it doesn't make things worse.

Re: `Using 1GB as default`. I guess my reasonings can be summarized as:
1. In conjunction with `client-query-buffer-limit'`s default value of 1GB, a default 1GB of `cluster-link-sendbuf-limit` should/would not produce false alarms, which is important.
2. While it's impossible to pick a default everyone likes, sometimes we still have to pick a sensible number to give us some bottom line protection. E.g. `client-query-buffer-limit` default to 1GB is a good example. I tried to follow that.

Re: `silently dropping cluster links and PubSub messages`. I agree this is bad. This is a separate issue. It seems like whenever `cluster-link-sendbuf-limit` takes effect and frees a link, we also want to print a log and/or increment a metric count (e.g. a `cluster_links_freed_oom` INFO field, etc). So it's not ""silent"". I can add that in the next revision if we all agree to if we want a log, a metric, or both.

Thank you for your feedback. Please let me know your thoughts."
759682242,9774,madolson,2021-11-30T21:42:30Z,"I'm still in favor of setting 1gb, but only making this available in Redis 7. In some sense it is a backward breaking change, but it is bounding the problem moving forward."
763744109,9774,madolson,2021-12-07T08:28:35Z,Decision by core team was to set the default to 0.
768188965,9774,ny0312,2021-12-13T23:01:43Z,"Added a WARNING log message, considering this is not expected in normal operation."
768189064,9774,ny0312,2021-12-13T23:01:54Z,Done.
768196551,9774,madolson,2021-12-13T23:17:45Z,Let's move this into the `cluster info` command.
768213556,9774,ny0312,2021-12-13T23:56:46Z,Done
768354744,9774,oranagra,2021-12-14T06:37:40Z,"the documented default, and the default value in the conf file are outdated (the one in config.c is ok)"
768366668,9774,madolson,2021-12-14T07:03:00Z,While I'm here I guess I'll fix this.
1795364683,13592,github-advanced-security[bot],2024-10-10T12:51:07Z,"## Potentially overflowing call to snprintf

The [size argument](1) of this snprintf call is derived from its return value, which may exceed the size of the buffer and overflow.

[Show more details](https://github.com/redis/redis/security/code-scanning/48)"
1795451361,13592,github-advanced-security[bot],2024-10-10T13:37:54Z,"## Potentially overflowing call to snprintf

The [size argument](1) of this snprintf call is derived from its return value, which may exceed the size of the buffer and overflow.

[Show more details](https://github.com/redis/redis/security/code-scanning/49)"
1800655877,13592,sundb,2024-10-15T08:04:16Z,"we can save a variable and avoid to assign it if it's NULL; 
```suggestion
        if (stringGrowSize) *stringGrowSize = byte + 1;
```"
1800668359,13592,sundb,2024-10-15T08:12:43Z,"can we pass the `new` argument from the `lookupStringForBitCommand()` method?
this avoids `sdslen()` again and is more readable than this line."
1800671016,13592,sundb,2024-10-15T08:14:22Z,"```suggestion
void updateKeysizesHist(redisDb *db, int didx, uint32_t type, uint64_t oldLen, uint64_t newLen) {
```"
1800680423,13592,sundb,2024-10-15T08:20:30Z,"```suggestion
    kvstoreDictMetadata meta;
```"
1800681664,13592,sundb,2024-10-15T08:21:21Z,"```suggestion
    memset(&kvs->metadata, 0, sizeof(kvs->metadata));
```"
1800683715,13592,sundb,2024-10-15T08:22:46Z,we shouldn't change these lines.
1800713794,13592,sundb,2024-10-15T08:42:07Z,"this also means that server->expires, server->pubsub_channels will also allocate this memory, but nevert be used.
what about using dynamic meta allocation, like dict meta?"
1800715097,13592,sundb,2024-10-15T08:42:59Z,"```suggestion
    kvstoreDictMetadataEx *metadata = (kvstoreDictMetadataEx *)dictMetadata(d);
```"
1800717918,13592,sundb,2024-10-15T08:44:57Z,"```suggestion
#if UINTPTR_MAX == 0xffffffffffffffff
```"
1800721641,13592,sundb,2024-10-15T08:47:21Z,missing stream?
1801321757,13592,moticless,2024-10-15T14:42:17Z,"Tried to avoid nested conditions and opt branching. A matter of style. Lazily prefer to leave it as is, unless you have strong opinion about it."
1801322898,13592,moticless,2024-10-15T14:42:50Z,How does your suggestion avoid `sdslen()`?
1801328222,13592,moticless,2024-10-15T14:45:40Z,Thanks.
1801329615,13592,moticless,2024-10-15T14:46:28Z,Will be supported later on.
1802230449,13592,sundb,2024-10-16T02:04:21Z,at least we don't need to assign `byte + 1` or `sdslen(o->ptr) - oldlen` to `_stringGrowSize` if _stringGrowSize is NULL.
1802232252,13592,sundb,2024-10-16T02:07:33Z,"not sure it's right.
```
if (stringGrowSize && !new)
    updateKeysizesHist();
```"
1806082127,13592,ShooterIT,2024-10-18T08:16:15Z,"i don't think we need to rename this name, whatever we use it for internal or external, both are metadata.

And the top comments of this struct are needed to update"
1806145236,13592,sundb,2024-10-18T08:58:52Z,"```suggestion
        /* If this is not a new key, update the keysizes histogram. Otherwise,
         * the histogram already updated in lookupStringForBitCommand()
         * by calling dbAdd(). */
```"
1806149507,13592,ShooterIT,2024-10-18T09:01:39Z,"both `removeKeysizesHist` and `addKeysizesHist` need get the length of redis objects
maybe you should abstract a function like `size_t RM_ValueLength(RedisModuleKey *key)` to get the length of value, we don't even have such a function"
1806303826,13592,ShooterIT,2024-10-18T10:50:32Z,"```suggestion
        int oldBin = log2ceil(oldLen);
```
may you want to use oldBin?
maybe we can use underline naming method for variables more uniformly, just like most variables in redis."
1806311922,13592,ShooterIT,2024-10-18T10:57:46Z,"if we don't want to get the return value after `++/--`, maybe `a++/a--` looks more natural."
1806328410,13592,ShooterIT,2024-10-18T11:13:26Z,"Currently we don't implement it right? and include enum type `largekey_type` as above， so should we remove them?

I think many users(include me) want this feature, if you implement, for the command name, how about `bigkey` instead of `largekey` since in redis-cli we define bigkey concept, and bigkey widely used as i know"
1806368618,13592,ShooterIT,2024-10-18T11:50:38Z,"actually i don't think we need the new two structs, they should be attributes of corresponding structs.
and we provide some functions to update them, maybe some wrapper functions are added in `db.c`.
do i miss somethings?"
1809117681,13592,moticless,2024-10-21T16:17:35Z,"I think we still need to maintain some distinction. Since following my last commit we conditionally add the histogram to dict, only in kvstore case of ""keys""."
1809118347,13592,moticless,2024-10-21T16:18:04Z,It is too short and too specific to be bothered about. Please note that stream is not included in the party.
1809129337,13592,moticless,2024-10-21T16:24:24Z,"Originally that was the intention. Removed. No further plans, at least for now."
1809134726,13592,moticless,2024-10-21T16:28:28Z,"I wanted some clear declaration of this struct. 
One optionally attached to kvstore and another optionally per dict in kvstore.
I think the logic to update them is rather simple and clear. It  is being made via single function `updateKeysizesHist()`. 
So i didn't feel there is a need to further arrange this code.
lmk if you think otherwise."
1810705147,13592,sundb,2024-10-22T13:13:34Z,"```suggestion
    kvstoreDictMetaBase base; /* must be first in struct ! */
```"
1810708523,13592,sundb,2024-10-22T13:15:30Z,"```suggestion
#endif
```"
1810717158,13592,sundb,2024-10-22T13:20:25Z,"```suggestion
        r set x 1
```"
1810717377,13592,sundb,2024-10-22T13:20:32Z,"```suggestion
        # dict must have expanded. Verify it eventually shrinks back to its initial size.
```"
1810721327,13592,sundb,2024-10-22T13:22:49Z,"```suggestion
        notifyKeyspaceEvent(NOTIFY_GENERIC,""del"",key,c->db->id);
```"
1810721507,13592,sundb,2024-10-22T13:22:56Z,"```suggestion
            updateKeysizesHist(c->db, getKeySlot(key->ptr), OBJ_ZSET, len + deleted, len);
```"
1810721915,13592,sundb,2024-10-22T13:23:10Z,"```suggestion
    if (inserted) {
```"
1810731884,13592,sundb,2024-10-22T13:28:40Z,use assertion instead?
1810734319,13592,sundb,2024-10-22T13:30:03Z,"this may seem odd, we just want to avoid NULL meta, but it is never used."
1810735863,13592,sundb,2024-10-22T13:30:55Z,"```suggestion

```"
1810738270,13592,sundb,2024-10-22T13:32:18Z,forget to remove?
1810854243,13592,moticless,2024-10-22T14:34:43Z,ok
1810854580,13592,moticless,2024-10-22T14:34:54Z,"Please consider the comment:
```
    /* If following key deletion, If it is last one in slot's dict, then 
     * slot's dict might get released as well. Verify if metadata is available. */
```"
1811599572,13592,sundb,2024-10-23T00:35:02Z,it's not being used?
1818005344,13592,moticless,2024-10-27T07:59:04Z,Followed your recommendation. thanks!
1818073780,13592,sundb,2024-10-27T12:03:33Z,"maybe we shouldn't assume the size can't be larger than 2^48.
```suggestion
        int old_bin = log2ceil(oldLen);
        if (unlikely(old_bin >= MAX_KEYSIZES_BINS)) old_bin = MAX_KEYSIZES_BINS - 1;
```"
1818075103,13592,sundb,2024-10-27T12:10:35Z,"should we exit when the old bin is equal to new bin?
in most case, they shouldn't change bin frequently."
1818075440,13592,sundb,2024-10-27T12:11:51Z,"```suggestion
            [OBJ_STRING] = ""distrib_strings_sizes"",
            [OBJ_LIST] = ""distrib_lists_items"",
            [OBJ_SET] = ""distrib_sets_items"",
            [OBJ_ZSET] = ""distrib_zsets_items"",
            [OBJ_HASH] = ""distrib_hashes_items""
```"
1818075528,13592,sundb,2024-10-27T12:12:15Z,"```suggestion
            for (int type = 0; type < OBJ_TYPE_BASIC_MAX; type++) {
```"
1818077542,13592,sundb,2024-10-27T12:23:05Z,"it's more readable to convert it to `unsigned long long` and print.
another discussion here: https://github.com/redis/redis/pull/12786#discussion_r1410852022"
1818077706,13592,sundb,2024-10-27T12:24:02Z,"```suggestion

        /* get listpack length */
        listpackEx *lpt = ((listpackEx *) ex->hashObj->ptr);
        unsigned long length = lpLength(lpt->lp) / 3;
        updateKeysizesHist(ex->db, getKeySlot(ex->key->ptr), OBJ_HASH, length+1, length); 
```"
1818077796,13592,sundb,2024-10-27T12:24:31Z,"```suggestion
    unsigned long l = hashTypeLength(expCtx->hashObj, 0);
```"
1818078066,13592,sundb,2024-10-27T12:25:38Z,"```suggestion
    if (removed) {
```"
1818084187,13592,moticless,2024-10-27T12:55:02Z,it will be much harder to catch such issue later on. I was even hold myself from being more aggressive with `serverAssert`. WDYT?
1818084270,13592,moticless,2024-10-27T12:55:32Z,Most of the calls to `updateKeysizesHist` are being selectively applied following of a modification. I wouldn't be bothered to opt this scenario.
1818084366,13592,moticless,2024-10-27T12:55:59Z,Suggested change just the same. I need glasses :)
1818085217,13592,sundb,2024-10-27T12:59:55Z,"If a dict has a length of 8, it means that the following 7 inserts are NOP and are increasing and decreasing at the same bin.
am i missing something?"
1818085878,13592,sundb,2024-10-27T13:02:50Z,i have no opinion with either way.
1818086577,13592,moticless,2024-10-27T13:06:30Z,"You are not missing anything. Except that once we evaluate the bin, most of the ""computation"" is beyond us. So we can either add another condition to verify if they are equal or just let the flow make ++ and -- blindly."
1818086790,13592,moticless,2024-10-27T13:07:43Z,"Note also that i set MAX_KEYSIZES_BINS to be 48. i could have set it 64 and close my eyes. But i wanted that if we have a calculation issue, we better tackle it early on."
1818097019,13592,sundb,2024-10-27T13:17:00Z,i thought you just wanted to save some memory.
1818097507,13592,moticless,2024-10-27T13:17:24Z,also  :)
1818099671,13592,sundb,2024-10-27T13:28:22Z,"well, since there isn't any regression, we can leave it as it is."
1818261974,13592,sundb,2024-10-28T01:23:29Z,use `wait_for_ofs_sync` to wait for master/slave synchronization to complete?
1818921579,13592,moticless,2024-10-28T11:48:14Z,"either way, it makes busy wait till condition fullfils. I wouldn't bother to change (as it is already written and working..)"
1820199601,13592,sundb,2024-10-29T07:06:25Z,"now we have three same code, so i also prefer to add a new function to get the length of key.
although stream is not implemented, but it will be skipped in updateKeysizesHist(), which i think it's fine."
1820253353,13592,moticless,2024-10-29T07:32:57Z,The code looks better than i expected. Now removeKeysizesHist() and addKeysizesHist() become a trivial single line call to updateKeysizesHist + length. So we can discard those functions as well!
1820302287,13592,ShooterIT,2024-10-29T08:01:51Z,"Hi @moticless I still think we don't need to create a new struct and add here and `kvstoreDictMetadata` , as we know, `key_count`, `overhead_hashtable_lut ` also are just statistics, extra metadata makes it more complex.

ping @guybe7 you bring the `kvstore` struct, WDYT?"
1820362676,13592,guybe7,2024-10-29T08:47:06Z,i didn't read the PR - can't we use the dict metadata of each dict inside the kvstore? or is that unnecessary and will take too much memory?
1820418433,13592,moticless,2024-10-29T09:23:04Z,"The histogram is maintained at two levels. One per kvstore and one per slot. This gives future capability in clustering mode to quickly update kvstore/db level histogram when deleting a slot or have more granular report.

Whatever we decide in this thread. Please let's have implementation at a distinct PR. We need to cherry-pick this  commit ASAP into earlier version."
642047000,9003,oranagra,2021-05-30T09:21:36Z,i would rather use a separate `config set` line which will carry a comment explaining why we disable it.
642049894,9003,oranagra,2021-05-30T09:47:05Z,"what this check does (maybe a more explicit comment is needed) is trying to access the true size of the replica buffers (instead of counting `mem_clients_slaves`).
for that, takes the total used memory delta and deducts the client buffers (`mem_clients_normal`) from the delta.
i think we should do the same for the slave's query buffer rather than assume 40k.
i.e. find the replica in the CLIENT LIST, and extract the old and new size of the query buffer.

alternatively, if that buffer isn't expected to change, or is insignificant for the test, we can just forget about it.

the purpose of the `delta_max` variable (again maybe a better comment is needed) is to measure the accuracy of the ability of redis to calculate the size of the replica buffers (by matching the size redis measured for them, to the effect we see they have on the total allocated memory).
the threshold of `$cmd_count / 2` is that low because it says that even if there was off by as little as half a byte per command, we could have detect that.
i.e. in the past we didn't count the internal fragmentation (some 30%), which is why we added that test.

bottom line, if we deduct the query buffer memory from the measurement (both old and new), there's no need to mess with the threshold."
642051374,9003,oranagra,2021-05-30T10:00:02Z,"i'd like to find a way to avoid long sleeps.
if we keep adding long sleeps to the tests, eventually they'll take very long.
instead you should make some loop to wait for your desired effect (and maybe a comment explaining what you do).

what exactly are we waiting for here?
maybe we can skip this part of the test?"
642051479,9003,oranagra,2021-05-30T10:00:38Z,"this loop will normally run for 2 seconds, right? 8-("
642052808,9003,huangzhw,2021-05-30T10:11:33Z,Should use macro instead of literal constant?
642053145,9003,sundb,2021-05-30T10:14:32Z,"Since it can only be used here, I'm not sure if I need to add a macro for it."
642054663,9003,sundb,2021-05-30T10:28:05Z,"Not really, due to another bug, which was fixed in #5013
Calculating ```c->querybuf_peak``` is before ```connRead```, and in the absence of message stacking, it will always be 0.
https://github.com/redis/redis/blob/58a03eca6705378ae8d29ffcc9d59794132acb14/src/networking.c#L2156"
642054962,9003,sundb,2021-05-30T10:30:52Z,Good. Forget it exists.
642064955,9003,oranagra,2021-05-30T11:52:41Z,"let's put these tests inside a `$::accurate` check.
this way when we merge #5013, these new tests will not slow down the CI runs."
642065418,9003,sundb,2021-05-30T11:56:09Z,OK.
642065924,9003,sundb,2021-05-30T12:00:33Z,"Does this test also add ```$::accurate```?
This is a test for ```querybuf``` being resized abnormally, which will prevent the bug from occurring again in the future."
642069076,9003,oranagra,2021-05-30T12:26:06Z,"i think so.. maybe change the text in the doc help for `--accurate` to mention it includes ""slow time driven tests"" too.
this way we'll spot a regression, it's just that we'll spot it on the next day, and not when the PR that introduces it will be merged.

please also add some comments to both tests as to what you're waiting before each of these sleeps, and why.
and add some comment next to  the `::accurate` check to explain why it's there."
642085003,9003,oranagra,2021-05-30T14:31:52Z,"i think that because this constant is measured against other constants it may be better to declare all at the same place.
i.e. it would make no sense to make it lower than 2*PROTO_IOBUF_LEN.
e.g. even an unforeseen side effect of #5013 caused this line to misbehave."
642841847,9003,oranagra,2021-06-01T07:16:40Z,"i think you better convert the block that extracts the size of the query buffer to be a function so that you can run it twice.
we extract the memory usage details before and after the kill, and in this line we calculate the difference.
and we deduct the ""repl"" from both so that we only see the memory usage delta without the ""repl"".
but the thing is (what you discovered) is that we in addition to deducting the ""repl"" (i.e. `mem_not_counted_for_evict`),
we also need to deduct the slave query buffer (due to the ACKs inside it that are not in the control of that test).
so i think we need to deduct that size from both measurements (`killed_used_no_repl`, `used_no_repl`) rather than change the line you changed here.
and also add a comment as to why we're deducting it (due to the ACKs)."
642843251,9003,oranagra,2021-06-01T07:18:56Z,"i think this may be unreliable (won't work on slow VMs).
we can change that whole block to a wait_for_condition, and put the entire test in an `if`"
642844962,9003,oranagra,2021-06-01T07:21:38Z,"i know @yossigo is cooking some improvements to the `--tags` system, and mentioned that maybe a better approach would be to use the `slow` tag.
the disadvantage in my eyes is that it'll be opt-out rather than opt-in.
but i guess that's already the case with other slow test, like the ones in sort.tcl, expire.tcl etc (that are already tagged).

p.s. if we keep that `if` it should be outside the `test` declaration (not inside it)"
643004877,9003,sundb,2021-06-01T11:09:07Z,"I guess ```-tag`` is used to execute a certain series of tags, which should not be applicable to slow tests."
643005686,9003,sundb,2021-06-01T11:10:26Z,"Done it.
Use a new way to verify slave query buffer."
643189861,9003,oranagra,2021-06-01T15:02:05Z,"```suggestion
            set used_no_repl [expr {$new_used - $mem_not_counted_for_evict - [slave_query_buffer $master]}]
            # we need to exclude replies buffer and query buffer of replica from used memory.
            # removing the replica (output) buffers is done so that we are able to measure any other
            # changes to the used memory and see that they're insignificant (the test's purpose is to check that
            # the replica buffers are counted correctly, so the used memory growth after deducting them
            # should be nearly 0).
            # we remove the query buffers because on slow test platforms, they can accumulate many ACKs.
```"
643587247,9003,sundb,2021-06-02T01:24:51Z,Thank you so much! @oranagra 
644058055,9003,oranagra,2021-06-02T15:07:01Z,"sorry for dragging this further. i feel a bit uncomfortable.
before #7875, this code thought a newly born client's query buffer is small (32k), and didn't consider releasing it.
#7875 didn't actually increase memory consumption (used_memory or RSS, since we use SDS_NOINIT), but it caused this code to release the buffer quickly.

in this PR, we wanna introduce a change that will retain bigger allocation and avoid releasing them.
i.e. in redis 6.0 we should have released an allocation as soon if it's bigger than 32k, and now we'll avoid releasing it unless it's bigger than 64k.
maybe instead, we need to change the code that allocates the query buffer to avoid the greediness of sdsMakeRoomFor?

@yoav-steinberg @sundb WDYT?"
644069170,9003,oranagra,2021-06-02T15:18:49Z,"i'm still on the fence back and forth about this. waiting to see how #9033 evolves in order to avoid repeated changes.
@yossigo if you can, please post your thoughts.
i.e. i'd like to find a way to make these time-driven tests an opt-in.
maybe tag them as `slow`, but also have the `-slow` skip tag defined by default when someone just runs the `./runtest`, and implicitly removed when someone adds `--accurate`."
644095576,9003,sundb,2021-06-02T15:48:06Z,"I am waiting for #9033
I see that it supports ignore specified tags, which is exactly what is needed.
But I can't find the comment now."
644103928,9003,sundb,2021-06-02T15:57:49Z,"This should be the most appropriate, I wanted to do this at first, but sds cannot do this directly.
It needs to be something like the following, but I always find it a bit odd
```
if (sdsalloc(c->querybuf) == 0) {
    c->querybuf = sdsnewlen(c->querybuf, PROTO_IOBUF_LEN);
    sdssetlen(c->querybuf, 0);
} else {
    c->querybuf = sdsMakeRoomFor(c->querybuf, readlen);
}
```"
644110984,9003,sundb,2021-06-02T16:06:34Z,"Take back the above comment. Too sleepy.
I can't think of a way to allocate a fixed 32k size sds."
644529067,9003,oranagra,2021-06-03T06:46:54Z,"i attempted to add a non-greedy version of sdsMakeRoomFor in the past, it didn't eventually make it in since i found another solution to the problem i was dealing with. but maybe it's time to do that now.
i.e. to be used for the initial size, not for the later growing."
644553433,9003,sundb,2021-06-03T07:29:23Z,Curious to know how you achieved this.
644564996,9003,oranagra,2021-06-03T07:46:57Z,"maybe i'm missing something...

IIRC i renamed sdsMakeRoomFor to _sdsMakeRoomFor and made it take an `exact` argument.
then i wrapped it with two functions sdsMakeRoomFor that has the original signature, and sdsMakeRoomForExact (which has the same interface, but passes 1 to the `exact` argument.
then the _sdsMakeRoomFor function avoid adding the extra 1mb or *2 when the exact flag is on."
644565924,9003,oranagra,2021-06-03T07:48:20Z,"i wouldn't get the exact amount i asked for since the internal fragmentation is added (up to 30%), but at least i turn off the 200% extra that the greediness mechanism adds.."
644575078,9003,sundb,2021-06-03T08:01:26Z,"But there is a problem, like ```sdsMakeRoomFor(s, 16*1024, 1)```, although I want to allocate 32k, but because the hdr of sds is 1 byte more, so the final memory will be 40k, want to allocate 32k need  ```sdsMakeRoomFor(s, 16*1024 - 1, 1)```."
644578386,9003,sundb,2021-06-03T08:06:28Z,"You mean ignore the extra memory?
```
usable = usable-hdrlen-1;
if (usable > add_len)
    usable = add_len;
```"
644585058,9003,oranagra,2021-06-03T08:16:01Z,"no, i just mean the greediness of:
```c
    if (newlen < SDS_MAX_PREALLOC)
        newlen *= 2;
    else
        newlen += SDS_MAX_PREALLOC;
```

note that we actually really intended to allocate 16k (`PROTO_IOBUF_LEN`), but because of the greediness we attempt to allocate 32k, which then grows to 40k due to sds header and internal frag.
instead, if we'll really ask to allocate 16k, it'll grow to some 20k with sds header and internal frag.
this will let us bring back PROTO_RESIZE_THRESHOLD to 32k as it was in the past."
644588009,9003,sundb,2021-06-03T08:20:12Z," ohh, this is indeed a good idea, querybuf will be larger than 32k in the second expansion, let me make the change."
645321301,9003,sundb,2021-06-04T06:28:22Z,"https://github.com/redis/redis/blob/65851e4562b2ec3da86d0bdd9e5bd5306d28595a/src/networking.c#L1920
I did not modify this expansion, I think since it has been expanded to PROTO_MBULK_BIG_ARG(32k), then let it be bigger to avoid realloc next time."
646102557,9003,oranagra,2021-06-06T09:19:19Z,"is that technically right?
i don't think we'll always add `addlen * 2`. addlen can be 10mb, and we'll only add 1mb.
i suppose the comment can be vague, just saying we preallocate for future growth and avoid repeated re-allocations. 

```suggestion
 * This is useful to avoid repeated re-allocations when repeatedly appending to the sds. */
```"
646102804,9003,oranagra,2021-06-06T09:21:19Z,"i'm having second thoughts about the ""exact"" term i specified.
it was good to emphasize the design, but i'd like to suggest another term.
```suggestion
/* Unlike sdsMakeRoomFor(), this is just add the grow to the necessary size. */
sds sdsMakeRoomForNonGreedy(sds s, size_t addlen) {
```"
646102885,9003,oranagra,2021-06-06T09:21:59Z,let's change `exact` to `greedy` (negating it)
646103067,9003,oranagra,2021-06-06T09:23:28Z,"i still think we want a separate / explicit `PROTO_RESIZE_THRESHOLD` define in server.h
this mechanism has nothing to do with the `BIG_ARG` mechanism (that's used to avoid memcpy).
i just said i'd rather avoid increasing it from 32k to 64k, but still think the separate constant is good."
646103828,9003,oranagra,2021-06-06T09:30:15Z,"i discussed this in length with @yoav-steinberg last week.
we think that in some cases we still want to use the greedy version here.

there are some 3 states here:
1. we're allocating the query buffer for the first time, in order to read a small argument into it. in this case we wanna use the non-greedy mode.
2. we're accumulating again and again to the query buffer, in this case we wanna use the greedy mode.
3. we detected a BIG_ARG, and we're gonna allocate a dedicated query buffer for it (we should set a boolean flag in the `if` above), in which case we wanna use the non-greedy mode."
646106789,9003,oranagra,2021-06-06T09:54:41Z,"i think i spoke about that in this [comment](https://github.com/redis/redis/pull/9003#discussion_r646103828).
when we detect BIG_ARG, we're gonna copy (re-purpose) that sds to the argv array, and create a new query buffer.
we have no use for the extra space in there. i think that line should be modified to the non-greedy.
am i missing anything?"
646213277,9003,sundb,2021-06-07T00:48:48Z,"Thanks @oranagra, It's hard to come up with a good name and comment.
"
647391090,9003,sundb,2021-06-08T12:29:25Z,"@oranagra Here's where I'm stumped, I can't use ```sdsalloc(c->querybuf) == 0``` to determine the first expansion, because the ```sds``` type is ```SDS_TYPE_8``` when ```sdsempty```, resulting in sdsalloc is 4.
Or change the ```c->querybuf``` initialization code to ```c->querybuf = sdsRemoveFreeSpace(sdsempty());```, this way is not readable."
647427231,9003,yoav-steinberg,2021-06-08T13:13:33Z,"@sundb also note that in case `greedy` is 1 it means that we hope to read as much as possible from the socket. In that case, I think, we should pass `sdsavail` and not `readlen` to the socket read:
```suggestion
        c->querybuf = sdsMakeRoomFor(c->querybuf, readlen);
        readlen = sdsavail(c->querybuf);
```"
647438261,9003,sundb,2021-06-08T13:25:44Z,"@yoav-steinberg I'm not sure greed is about reading as much data as possible, the query buffer has already broken 20k (under jemalloc) and since it's already over 20k, let it be greedy.
@oranagra WDYT?"
649011334,9003,oranagra,2021-06-10T09:23:25Z,"i agree with Yoav.
we need to realize that we have two different things that we can be greedy or non-greedy about:
1. memory allocations to avoid repeated reallocs of gradual, incremental growth.
2. read system calls. we normally wanna ask to read for as much as we can (all the memory we allocated), so that in total we'll have less system calls (each one will just return what the OS already has, it's non-blocking anyway).

the case were we don't wanna be greedy (in **both** malloc and read aspects) is the case of the a BIG_ARG, which we later wanna copy (re-purpose) as is into argv, instead of doing a memcpy.

another place were we don't wanna be greedy, is the initial allocation of the default query buffer, we want to start the greediness only above a certain size, in order to avoid the conflict with the resizing cron."
649043776,9003,oranagra,2021-06-10T10:08:00Z,"```suggestion
 * If there's already sufficient free space, this function returns without any
 * action, if there isn't sufficient free space, it'll allocate what's missing,
 * and possibly more:
 * When greedy is 1, enlarge more than needed, to avoid need for future reallocs
 * on incremental growth.
 * When greedy is 0, enlarge just enough so that there's free space for 'addlen'.
```"
649044685,9003,oranagra,2021-06-10T10:09:18Z,"```suggestion
/* Unlike sdsMakeRoomFor(), this one just grows to the necessary size. */
```"
649648510,9003,sundb,2021-06-11T02:34:52Z,"I was thinking that if use sdsavalid to read, a connection expanded to 64k would handle a lot more commands than an unexpanded one, but the connection is not fair."
650478801,9003,oranagra,2021-06-13T06:44:53Z,"yeah, we're not trying to be fair anyway.. so we rather issue less system calls and overall process more commands per second."
651393418,9003,sundb,2021-06-15T02:00:33Z,"@oranagra @yoav-steinberg It's dangerous to use ```sdsavail``` to read.
32bit
1) Expand querybuf to over 2.1g.
2) returns of ```connRead``` will likely overflow. The return value of ```connRead``` should be ```ssize_t```, not the current ```int```."
651494735,9003,yoav-steinberg,2021-06-15T06:47:03Z,">     1. Expand querybuf to over 2.1g.
@sundb I can't see why this change has more of a potential of causing an issue on 32bit than the original code. In both cases we keep expanding the query buff by calling `sdsMakeRoomFor` so it might eventually overflow on a 32bit machine.
> 
>     2. returns of `connRead` will likely overflow. The return value of `connRead` should be `ssize_t`, not the current `int`.
This is a bug in any case. We should change fix connRead to return `ssize_t`.
"
651506243,9003,sundb,2021-06-15T07:06:04Z,"@yoav-steinberg Yes, sdsMakeRoomFor will overflow and trigger the assertion in case of constant expansion.
But before it overflows, ```connRead``` will cause truncation.
In any case, fix ```connRead``` to return ssize_t."
651550467,9003,oranagra,2021-06-15T08:06:49Z,"`connRead` can be fixed, but note that this is a theoretical issue that can never really happen.
this method reads from a socket or a pipe, it reads what's available in the OS buffers, it'll never be more than a few megs.
@sundb i think your last push should be reverted, i think readlen is better be size_t, and i do think we wanna use sdsavail"
651595976,9003,oranagra,2021-06-15T09:03:40Z,"SSL_write takes an int.. 
i suppose we better clamp the input rather than truncate it (possibly leading to negative value)"
651600867,9003,sundb,2021-06-15T09:09:45Z,"Then I'll revert this change first, as it doesn't cause a bug."
651612596,9003,sundb,2021-06-15T09:24:48Z,@oranagra I think ```SSL_read``` and ```SSL_write```  should be upgraded to ```SSL_read_ex``` and ```SSL_write_ex```
651624373,9003,oranagra,2021-06-15T09:40:27Z,"@sundb i'm arguing that we should lave the entire set of `conn` changes for another PR.
this PR is already too complicated to follow, and as i stated earlier, connRead will never actually return more than a few megabytes (that are already present in the OS socket buffers), so there's no real bug in the new code we introduce in networking.c"
651654695,9003,sundb,2021-06-15T10:21:09Z,"@oranagra Sorry for the misunderstanding, done it."
1137873870,11907,vitarb,2023-03-15T23:22:43Z,"We have a separate command for pattern subscription (PSUBSCRIBE vs SUBSCRIBE), should we be consistent and add a separate command (PSUBSCRIBERS vs SUBSCRIBERS) instead of adding nested parameters?"
1137876459,11907,vitarb,2023-03-15T23:27:41Z,"Should we do pattern matching on patterns or should we only search for an exact match? 
E.g. if there is a subscriber for `foo.news.*`, but the search is for `foo.*`  should it yield results?"
1152265842,11907,hpatro,2023-03-29T17:19:36Z,"Exact match over pattern is done in ACL pubsub validation as well, so thought of flowing the same behavior here. 

Doing a pattern matching, would add some cost. We could add another option to the API i.e. `MATCH [EXACT|GLOB]` to define the behavior and make it available for all the subscription type (GLOBAL|SHARD|PATTERN). WDYT ?

"
1152266551,11907,hpatro,2023-03-29T17:20:22Z,"Initially I thought about the same. With this option, we don't need to add subcommand for each subscription type (more boilerplate code). Also, by having an option in the API we could also introduce more options in the future if reqd.

Would like to stick with this option unless folks have a strong pushback."
1159330944,11907,vitarb,2023-04-06T06:21:26Z,"I'm okay either way, just wanted to call out that it's slightly inconsistent with existing commands."
1159333890,11907,vitarb,2023-04-06T06:25:46Z,"I think it's fine if we keep it exact, just need to call out it explicitly in the documentation."
1160147831,11907,madolson,2023-04-06T18:53:19Z,"I don't know what this means. `O(N) for the subscribers subcommand, where N is the number of clients subscribed to the questions channels or patterns.` ? "
1160148318,11907,madolson,2023-04-06T18:53:55Z,"```suggestion
```"
1160148901,11907,madolson,2023-04-06T18:54:35Z,Might be better as an enum value.
1160150015,11907,madolson,2023-04-06T18:56:02Z,"```suggestion
    if (!strcasecmp(type, ""global"")) {
```
I assume we aren't case sensitive here."
1160150265,11907,madolson,2023-04-06T18:56:22Z,This PR should stand on its own without modules.
1160979566,11907,madolson,2023-04-07T21:38:33Z,"Thoughts on this just being client info which what the ACL Log returns? At the very least I think we should also add IP, which is often more useful the name."
1160983986,11907,madolson,2023-04-07T21:51:05Z,"This response is pretty deep. I'm going to propose the following layout:
```
1) ""ch1""
2) 1) subscribed-clients
    2) 1) 1) client-id
          2) id
    3) subscribed-modules
    4) nil
```
"
1160987090,11907,madolson,2023-04-07T21:55:28Z,"I think this should be array length 0, not null. "
1160988038,11907,madolson,2023-04-07T21:57:00Z,"I would return the same map size consistently, name can be NULL."
1171641362,11907,hpatro,2023-04-19T17:19:36Z,"ACL Log has a lot of details about the client, some of them are also not that valuable in pubsub context. 

Client could always fall back to `CLIENT LIST ID <client-id>` to retrieve all the details. WDYT ?"
1174235033,11907,hpatro,2023-04-22T00:21:21Z,"Discussed with Madelyn offline, `addr` is used generally to figure out/debug the traffic source. Adding it."
1185458099,11907,madolson,2023-05-04T19:58:50Z,"Patterns are also global. The naming of ""channel"", ""pattern"", ""shard-channel"" make the most sense to me."
1185617605,11907,hpatro,2023-05-05T00:21:21Z,"Oran was also suggestion in another PR `global` word is something which isn't coined anywhere. I find the naming above fine, will update."
1186471569,11907,madolson,2023-05-05T20:20:12Z,Which other Pr uses global?
1186481742,11907,hpatro,2023-05-05T20:36:04Z,https://github.com/redis/redis/pull/8860#issuecomment-1501078129
1189465287,11907,sundb,2023-05-10T07:24:17Z,Use 4 spaces instead of tab?
1191358961,11907,madolson,2023-05-11T15:31:31Z,Let's just keep this with the argument parsing code. This isn't going to be re-used.
1191360728,11907,madolson,2023-05-11T15:32:58Z,Let's just return an empty string so the return type is consistent. Otherwise come clients will need to do Null/unwrapping of the response.
1191364013,11907,madolson,2023-05-11T15:35:30Z,"We should prevent duplicate match and count arguments. Count is less important, but someone might think `match foo match bar` is valid syntax, and it will be accepted and only return bar."
1191365305,11907,madolson,2023-05-11T15:36:31Z,"```suggestion
static int parseArgsPubSubSubscribersCmdOrReply(client *c, pubsubSubscribersCmdArgs *args) {
```
Is the more canonical form."
1191404652,11907,madolson,2023-05-11T16:05:47Z,"This still seems clunky and I'm trying to think through how modules well work. Having a separate section entirely for modules is weird. I was also thinking about how module APIs don't really map to the current id + addr format. So maybe instead of having a separate section for modules like we originally discussed, we just add different fields for modules in the client info section? The result would be changing this to a map between channel name and list of subscribed clients."
1191405435,11907,madolson,2023-05-11T16:06:32Z,You could just use the existence of pat as an indication to use_pattern. Then you can default it properly to NULL.
1191413143,11907,madolson,2023-05-11T16:13:16Z,"```suggestion
        cnt+=listLength(clients);
```
I would expect count to be number of subscriptions returned, not number of channels returned. I am okay returning more than 1000 subscriptions in order to return all the subscriptions from a client. If each channel has 10k clients, that is 10M responses, which seems like a high default."
1191415591,11907,madolson,2023-05-11T16:15:06Z,"A minor preference: I generally dislike parse functions and parsed argument structs unless they are re-used between multiple calls. I would rather the top level redis command do the parsing, and then call a subcommand with the arguments. "
1191482492,11907,hpatro,2023-05-11T17:18:41Z,Nice suggestion. This should keep the results more bounded but we could breach the count in some cases 👍 
1191485020,11907,hpatro,2023-05-11T17:21:21Z,"The size of the parsing code is around 40 lines. So, keeping it separate still keeps the top level redis command function compact. 

I'm moving the invocation of parsing the arguments though to the top level redis command."
1191720874,11907,hpatro,2023-05-11T21:47:04Z,"had a discussion offline.

Would revisit if the module subscription information would be requirement by clients. For now decided to remove a level of nesting to keep things simple."
1191787401,11907,madolson,2023-05-11T23:58:09Z,"```suggestion
    setDeferredMapLen(c, dl, channel_count);
```"
1191787493,11907,madolson,2023-05-11T23:58:23Z,"```suggestion
        subscription_cnt += listLength(clients);
```"
1191788300,11907,madolson,2023-05-12T00:00:39Z,"```suggestion
""SUBSCRIBERS GLOBAL|SHARD|PATTERN [MATCH <pattern>] [COUNT <count>]"",
```"
1191788965,11907,madolson,2023-05-12T00:02:18Z,"```suggestion
    long long channel_count = 0;
    long long subscription_count = 0;
```"
1191789031,11907,madolson,2023-05-12T00:02:27Z,"```suggestion
    while((de = dictNext(di)) != NULL && subscription_count < args.count) {
```"
1191789207,11907,madolson,2023-05-12T00:03:00Z,"```suggestion
        channel_count++;
```"
1191790086,11907,madolson,2023-05-12T00:05:27Z,"```suggestion
        assert {[llength [r pubsub subscribers channel]] == 10}
        $rd close
    }
```"
1191790171,11907,madolson,2023-05-12T00:05:44Z,"```suggestion
        assert_match {somechannel {{name {} id * addr 127.0.0.1*}}} $subscribers
        $rd1 close
    }
```"
1191790357,11907,madolson,2023-05-12T00:06:15Z,"```suggestion
        $rd1 close
    }
```"
1191791749,11907,madolson,2023-05-12T00:10:02Z,"```suggestion
        subscription_count += listLength(clients);
```"
1191792631,11907,madolson,2023-05-12T00:12:29Z,"Sure. Again, not a strong preference. I find the extra abstraction of having an args struct not worth trying to keep it to 40 lines, but I'm okay with it."
1200372259,11907,oranagra,2023-05-22T11:18:07Z,a little bit odd to pass the argument by value and not reference.
1200373642,11907,oranagra,2023-05-22T11:19:24Z,"isn't it odd that we stop the loop past the COUNT limit?
if we have one channel with a ton of clients (of a very low limit), we'll pass the limit by a lot."
1201104587,11907,madolson,2023-05-22T21:07:45Z,"The alternative is we don't give complete client results, which seems worse from a debugging API. I wouldn't expect a single client to be listening to millions of connections, but maybe there are use cases I am not aware of?"
1204818973,11907,hpatro,2023-05-24T22:30:47Z,changed to pass by reference.
1391817604,12742,madolson,2023-11-13T23:41:53Z,"I don't really want to lose the history of the cluster code with this refactor, and I realized we're losing it mostly because we want to call the ""api"" cluster.c, which I don't care that much about. Instead maybe we we leave this file cluster.c, put the api in `cluster_api.c`, and then name flotilla `flotilla.c`? (I still don't want to call it flotilla but we can punt that)"
1391819933,12742,madolson,2023-11-13T23:46:17Z,"Module thread! I still am questioning why we aren't using modules to load this information. We have introduced the concept of first party extensions/modules whatever with TLS, and it has the ability to add commands, so why not continue to use that logic here. @yossigo @oranagra FYI. I would rather us think about pluggability as a first class citizen of the future of Redis."
1391820196,12742,madolson,2023-11-13T23:46:48Z,"By convention Redis almost always uses /*, even for single line stuff."
1391820368,12742,madolson,2023-11-13T23:47:07Z,"```suggestion
const char **clusterCommandSpecialHelp(void);
```"
1391859681,12742,madolson,2023-11-14T00:59:38Z,Not using tabs
1391860347,12742,madolson,2023-11-14T01:01:04Z,"I believe the .PHONY is a more commonly used paradigm, is there a reason you are doing it this way?"
1391861802,12742,madolson,2023-11-14T01:03:47Z,I think we normally use _ for naming of the .h and .c files.
1392184422,12742,oranagra,2023-11-14T08:33:26Z,"if we do file renames in a separate commit from mass code rename, and copy-paste code moves, it shouldn't matter for git (it'll be able to understand where the code went to).
@jhershberg please ack you did that.

on the other hand, if the same commit splits one file into 3, then git won't be able to realize anything about the rename (and it doesn't matter which one will be named cluster.c)"
1392191501,12742,oranagra,2023-11-14T08:38:50Z,"maybe this should be a new sub-command in CLUSTER?
like we have with SENTINEL DEBUG?"
1392192406,12742,oranagra,2023-11-14T08:39:27Z,note that DEBUG HELP still refers to CLUSTERLINK KILL
1392194388,12742,oranagra,2023-11-14T08:40:49Z,should this be part of the repo? or a gitignore file?
1392199375,12742,oranagra,2023-11-14T08:43:56Z,"we already have a similar (different) mechanism for sentinel, see the SENTINEL and ONLY_SENTINEL command flags. i'd rather not introduce a new ""system"" (`feature_flags`) for that.

that is, if we don't take the first-party module approach discussed in the other comment."
1392391021,12742,oranagra,2023-11-14T10:49:12Z,"i agree it's a good idea, but let's take it in a follow up PR.
the purpose of this one is a for a quick shifting of code from one place to the other, with minimal or actually no change of behavior.
we need it to be merged quickly so that we don't accumulate conflicts, and we need it to be done carefully so that we keep as much history as possible.
logical changes can be applied later, just let's try to avoid renaming or moving the same thing twice."
1392397934,12742,oranagra,2023-11-14T10:53:01Z,"we can also use `ifdefs` like we did for cli_commands.c, maybe it plays more naturally with the current approach building one cluster or the other.
but either way, i'd like to avoid different content of commands.def depending on the build flags."
1392468043,12742,jhershberg,2023-11-14T11:49:44Z,Oran sez: remove this and put it into a different PR
1392504504,12742,jhershberg,2023-11-14T12:20:00Z,"I changed it so that first cluster.c is first renamed to cluster-legacy.c in the first commit. Now ""git blame"" on cluster-legacy.c shows full history."
1392506970,12742,jhershberg,2023-11-14T12:21:54Z,fixed
1392520659,12742,jhershberg,2023-11-14T12:33:15Z,fixed
1392602896,12742,jhershberg,2023-11-14T13:43:43Z,".PHONY is for when you need a target that will never exist and forces other targets to run since they are dependencies to the .PHONY. This is different. Here I have a generated file as the target but even if it exists, I want the target to run. If I call it .PHONY it creates a loop in the dependencies (I just tried it again)."
1392606513,12742,jhershberg,2023-11-14T13:46:41Z,fixed
1392732644,12742,jhershberg,2023-11-14T14:59:47Z,Will switch to a sentinel style solution tomorrow
1392920173,12742,madolson,2023-11-14T16:53:12Z,"If it's just a quick shift, let's remove all the code generation stuff and leave the commands as is. None of this is strictly needed for the shifting. We can restructure the commands when we have the extensions sorted."
1392925920,12742,madolson,2023-11-14T16:56:45Z,"nit: Spacing is weird here and not aligned.
```suggestion
            clusterNodeIsMaster(myself) && clusterNodeIsMaster(sender) &&
```"
1392927528,12742,madolson,2023-11-14T16:57:51Z,"nit: Weird indentation here
```suggestion
            clusterNodeIsMaster(myself) &&
```"
1392928538,12742,madolson,2023-11-14T16:58:37Z,"```suggestion
            clusterNodeIsMaster(myself) &&
```"
1392942097,12742,madolson,2023-11-14T17:09:13Z,"```suggestion
                           (char*)c->argv[2]->ptr, (char*)c->argv[3]->ptr);
```"
1392942755,12742,madolson,2023-11-14T17:09:46Z,Let's document the return code if this is changing.
1392956568,12742,madolson,2023-11-14T17:19:26Z,"There are a lot of cases where you are changing spacing (and I'm going to stop commenting on it), which will also remove git history. I don't want to go through them all, but the general practice has been don't touch lines to make white spacing changes)"
1393008960,12742,madolson,2023-11-14T17:50:22Z,"This isn't really ""confirmed"" reachable. This is just nodes that have been accepted into the cluster, like if a node is gossiped about this will return true even though we may never be able to reach it. So we might want to invert this to be like:

```suggestion
int clusterNodeIsPending(clusterNode *node) {
```

and just return the check? Like in flotilla this will never return, presumably, since nodes will never be added if they aren't confirmed."
1393010070,12742,jhershberg,2023-11-14T17:51:04Z,"Yes, that would be easiest!"
1393013227,12742,madolson,2023-11-14T17:53:06Z,"In the legacy cluster world, a node that is not a master might not necessarily be a slave, we might just not know. Which is why we have explicit checks for both. So I think this does need to check the salve flag."
1393977514,12742,jhershberg,2023-11-15T10:17:23Z,"done
"
1393986208,12742,jhershberg,2023-11-15T10:24:04Z,fixed
1393993574,12742,jhershberg,2023-11-15T10:29:31Z,fixed
1393994009,12742,jhershberg,2023-11-15T10:29:51Z,fixed
1393999133,12742,jhershberg,2023-11-15T10:34:04Z,fixed
1394046073,12742,jhershberg,2023-11-15T11:02:49Z,added documentation in cluster.h
1394059624,12742,jhershberg,2023-11-15T11:14:51Z,done
1394067215,12742,jhershberg,2023-11-15T11:22:03Z,done
1395690910,12742,jhershberg,2023-11-16T13:24:59Z,Fixed em all!
1395691316,12742,jhershberg,2023-11-16T13:25:18Z,done
1395717301,12742,jhershberg,2023-11-16T13:46:19Z,"@oranagra If we want to move this to a different command I propose that we do that in a separate PR, OK? I do not understand your second comment."
1395986173,12742,oranagra,2023-11-16T16:16:58Z,"Yes. Let's keep the interface changes for later.
The thing is that debug.c has the list if sub-commands in DEBUG HELP.
but each implementation of cluster.c implements it separately, and can support a different set of sub-commands.
Maybe we need to split the code in a way that the c files can only implement one specific sub-command. Or move the portion of the help message to a separate cluster function too"
1396059479,12742,jhershberg,2023-11-16T17:04:01Z,"OMG, I forgot to merge that. Will fix in a way similar to how I handled cluster command help. That was in the original PR and I forgot"
1396819053,12742,jhershberg,2023-11-17T07:47:43Z,"I thought about this some more and decided that moving forward, especially for flotilla, it makes sense to have a cluster subcommand ""debug"" that can do all kinds of stuff (we have all kinds of plans already). As such, I took a minimalist approach to this function and simply put an #ifndef around CLUSTERLINK KILL. @oranagra, OK if I mark this resolved? "
1397095740,12742,oranagra,2023-11-17T11:01:37Z,"It's still odd that the sub-command list is documented in one file, but the string matching for that sub-command is in another.
IMHO we have 3 options:
1. Make a dedicated function for node killing, have the string matching done in debug.c
2. Add a function that returns the help string of the cluster related sub-commands, so that each implementation can document and implement any sub-command list it wishes.
3. Introduce a sub-sub-command named DEBUG CLUSTER or a command named CLUSTER DEBUG. (the first option is preferable since it doesn't add a new command). Note that changes inside the DEBUG command are not considered breaking changes (only meant to be used by tests)

I prefer option 2.  WDYT?"
1398244748,12742,jhershberg,2023-11-18T17:42:00Z,"I am fine with option 2, that's what I originally had in a previous version. Will do that Monday AM first thing."
1398373649,12742,oranagra,2023-11-19T10:31:10Z,"since this is not part of this PR, i think we should drop this.
and any reference to ""Flotilla"" from the current PR.
instead, let's add REDIS_CLUSTER_LEGACY that can be turned off.

is it easy to also make the necessary changes so that redis can be compiled and run with `cluster_enabled`, even with the legacy cluster excluded?
i.e. i imagine that it would work with all the slot awareness and restrictions, but without any cluster commands and cluster bus.
if this is complicated, let's leave it for a future PR, but at least in this one, avoid the ""flotilla"" defines and referring to files that don't exist, and instead prepare the ground for being able to just exclude the legacy cluster in a later PR."
1399066707,12742,jhershberg,2023-11-20T11:34:19Z,done
1399281009,12742,jhershberg,2023-11-20T14:26:40Z,Done. No mention of flotilla in the code base at all
1399384044,12742,oranagra,2023-11-20T15:37:02Z,"i'm not sure i like it.
can we instead call both and let the cluster do any additional changes it requires?"
1399393142,12742,oranagra,2023-11-20T15:43:07Z,unnecessary indentation change (not sure it's right anyway)
1399393458,12742,oranagra,2023-11-20T15:43:19Z,"```suggestion
```"
1399524185,12742,madolson,2023-11-20T17:24:31Z,"```suggestion
    if (extended_help) {
```"
1399524669,12742,jhershberg,2023-11-20T17:25:01Z,@oranagra I do not understand your comment.
1399526151,12742,madolson,2023-11-20T17:26:27Z,"My suggestion was something like:
```
if (server.cluster_enabled) {
    clusterPromoteSelfToMaster();
} else {
    replicationUnsetMaster;
}
```

The legacy cluster should throw an error."
1399550939,12742,jhershberg,2023-11-20T17:51:34Z,"just spoke to @madolson about this. What we said was that we want to add an ""if cluster mode"" to this code to make it more self contained and more explicit (even though this code can never be reached when not in cluster mode)."
1399555610,12742,jhershberg,2023-11-20T17:55:49Z,"@madolson The legacy cluster should throw an error...if it is invoked somehow while in cluster mode? Like panic?
"
1399560938,12742,madolson,2023-11-20T18:00:52Z,We can't panic unfortunately because we don't want to allow some elevated admin user to cause crashes easily. Perhaps clusterPromoteSelfToMaster should allow throwing an error. 
1399578627,12742,jhershberg,2023-11-20T18:18:11Z,and then what is done with the error when it is caught? 
1399601339,12742,oranagra,2023-11-20T18:37:29Z,"i don't consider PSYNC FAILOVER a feature that's cluster specific, so this code is not cluster specific.
the suggestion to make it an `if-else` does improve the situation a bit, but i wonder if we can't just run both
i.e. do we see a case where in the cluster mode we won't need to promote the local instance?"
1400167195,12742,jhershberg,2023-11-21T08:09:02Z,"@oranagra, we'll talk but if I understand you correctly, in the current cluster implementation there is no cluster bus support for implementing PSYNC FAILOVER. This change makes it possible for *other* cluster implementations to support PSYNC FAILOVER. "
858452810,10636,oranagra,2022-04-26T08:47:08Z,"@yossigo are you ok with that?
50ms busy loop by default on any redis startup on linux?
there would be a config to supress the warning, which will also suppress the test, but still, i suppose that someone starting up many instance of redis by some script will be hit by that."
858455311,10636,oranagra,2022-04-26T08:49:39Z,@yoav-steinberg please publish some results you got when you tested it in the top comment.. so we know how far the threshold is from generating false positives and false negatives.
858457074,10636,oranagra,2022-04-26T08:51:06Z,"maybe we wanna make it easier on people (like we did for THP and others), and give them an example of the bash command they should run."
858458719,10636,oranagra,2022-04-26T08:52:46Z,debug logging? (remove)
858460268,10636,oranagra,2022-04-26T08:54:12Z,"won't it be faster to use `strchar`, and call it repeatedly till we find the last one?
considering this field is at the beginning, and parsing RSS is done frequently."
859528842,10636,yoav-steinberg,2022-04-27T08:32:14Z,"yes, oops."
859555882,10636,yoav-steinberg,2022-04-27T09:00:11Z,"In any case we'll need to scan the string to the end otherwise we don't know we found the last one.
I'll change this to `strrchr()` because currently using `strchr()` is a bug in case there are `)` in the file name."
859891174,10636,oranagra,2022-04-27T14:44:47Z,leaking `fp` when we return NULL here.
860551946,10636,yoav-steinberg,2022-04-28T07:04:46Z,"The problem is that we can't be sure running a specific command would result in the desired result. Even if the clocksource is changed it might be changed to a non-safe one, so I'm not sure.
This is the current message:
`WARNING slow system clocksource detected. This can result in degraded performance. Consider changing the system's clocksource. Current clocksource: %s. Available clocksources: %s.`
I can change it to:
`WARNING slow system clocksource detected. This can result in degraded performance. Consider changing the system's clocksource. Current clocksource: %s. Available clocksources: %s. For example: run the command 'echo tsc > /sys/devices/system/clocksource/clocksource0/current_clocksource' as root. To permanently change the system's clocksource you'll need to set the 'clocksource=' kernel command line argument.`
"
860559337,10636,oranagra,2022-04-28T07:14:46Z,"i think it's better.. the text still indicates that we're not confident this is the right thing.. but for the majority of the users seeing this, they'll be able to solve the problem without a round trip to google search. and arguably for many of them, they don't have the time or capacity to really understand the problem and risks anyway."
860785387,10636,yoav-steinberg,2022-04-28T11:38:54Z,"ok, update message."
862476884,10636,yossigo,2022-05-01T13:41:02Z,I have to set I don't like that - not the busy loop and not the heuristics we have to apply that may also lead to false positives.
862486165,10636,oranagra,2022-05-01T15:00:04Z,"I wouldn't define that as heuristics.. That's the real right way to test.. I.e. We don't care how it's configured. But rather the fact it uses ""system"" time. 
Note that the threshold for telling them apart is very clear.. I just wish there was a way to do that with just one call and not a loop"
862491425,10636,yossigo,2022-05-01T15:47:27Z,"@oranagra I think it is a heuristic, because we're comparing wall clock time with CPU stime."
862506263,10636,yoav-steinberg,2022-05-01T18:22:03Z,"The check is basically built out of 3 steps:
1. Read stime from proc fs.
2. Busy loop longer than a system tick calling `clock_gettime()`.
3. Read stime from proc again.

Steps 1 and 3 are by definition a system call. Step 2 is either a system call on an un-optimized system or a a vdso call or an optimized system.
The _theoretical_ logic of the test is simple and not heuristic: if this is an un-optimized system, the stime diff will be larger than 0. In _practice_ since steps 1 and 3 perform system calls to read from proc fs then there's the slight chance that the stime diff will be affected by the procfs reads. This is what's heuristic about the test, but there's a very safe margin here.

On the other hand it surprised me that the un-optimized xen implementation spent only ~30% of the time in the system call. So I'm not totally sure what's happening there. But I'm sure it's due to, at least partially, not going through vdso on all calls to `clock_gettime()` which is enough to degrade performance."
864482409,10636,oranagra,2022-05-04T06:10:14Z,"i just tested it on my machine, and it looks like getrusage is much more accurate than `/proc/self/stat`.
even a loop of system_hz / 10 results in accurate readings (not rounded to the next jiffy).
here are some measurements i got
|utime|stime|loops|
|---|---|---|
|669| 334|14065
|336| 671|11475
|1003| 0|12625
|669| 334|14053
|1006| 0|12578
|1003| 0|51488
|670| 335|13639

with the above i could be getting some false positives.
but with a loop for 1 jiffy:

|utime|stime|loops|
|---|---|---|
8570| 1433| 151897
10005| 0| 126577
9132| 494| 115087
9844| 0| 135356
9995| 0| 123566
8888| 1117| 126502
50004| 0| 1567099

i suppose using a minimum of 1 jiffy or 1000 calls (for slow systems to make sure we have many more clock_gettime readings vs getrusage calls), and setting the threshold to 50% rather than 10% could be good."
864547782,10636,yoav-steinberg,2022-05-04T07:57:06Z,"It still seems to me that the timing we get from `getrusage()` is very coarse and is probably jiffy bound. This is especially problematic for the `xen` clocksource because it's not really 100% kernel or 100% user.
I put some detailed test results here:
https://docs.google.com/spreadsheets/d/141db0CkAQQjMCr1Ivm5HWuZ1C96ly_jHRD6LJYxwMGY/edit#gid=0

Analyzing those results we see:
* `getrusage()`'s `stime` resolution is roughly 3,000 usec, which is less than the system tick of 10,000 usec but still very coarse. Having any sub-jiffy test time leads to inconclusive results.
* The `xen` clocksource has the largest disparity in results. Even with test time of a jiffy or longer we see time spent in both system call and user space is significant and varies between tests.
* Having said the above about `xen`, with long enough tests (50,000 usec or more) we can clearly see that the `xen` clocksouce does indeed spend significant and detectable time in the kernel: for the 50,000 usec tests, we see a rare minumum of 14% stime and a median of 27% stime.
    
So I recommend leaving the test as is. Anything under the 50,000 usec test risks not detecting the slowness of `xen` since we might get results under the 10% stime threshold on `xen`. "
867459747,10636,oranagra,2022-05-08T09:06:53Z,"I discussed it with Yossi, we still fear from the overheads of this check.

the proposed solution is:
1. add some `redis-server --check-system` mode (similar to `--test-memory`), which will do some system checks and report output in stdout and exit code.
2. in normal startup of redis, simply check the configured clock source in `/proc` and report a warning if we see `Xen`. (the warning should mention the `--check-system` feature, and can be disabled)"
867960871,10636,yoav-steinberg,2022-05-09T12:33:27Z,Done. Please re-review.
868315584,10636,oranagra,2022-05-09T18:41:44Z,"while we're doing some tech-debt cleanup, let's move all the THP related code from latency.c"
868317405,10636,oranagra,2022-05-09T18:43:39Z,i think we need to keep the camel case convention
868321034,10636,oranagra,2022-05-09T18:47:35Z,maybe it would be clearer if the `exit` is moved here (using the return value)?
868321646,10636,oranagra,2022-05-09T18:48:09Z,maybe `checkXenClockSource`?
868324417,10636,oranagra,2022-05-09T18:50:55Z,"why did you not move the linuxMadvFreeForkBugCheck to the new file, and change the way it returns errors to be printed? like others?
it should be part of the system check..."
868326249,10636,oranagra,2022-05-09T18:52:49Z,"come to think of it, maybe we should bring the check from https://github.com/redis/redis/pull/10467 in here.
@sundb @yossigo WDYT?"
868326703,10636,oranagra,2022-05-09T18:53:18Z,i think we wanna use the `checkIgnoreWarning` mechanism to allow disabling that warning
868327460,10636,oranagra,2022-05-09T18:54:08Z,"i suppose this should be `Redis Ltd`? (like in functions.c).
p.s. much of this code is copy paste, not sure what's the guideline in that case."
868330864,10636,oranagra,2022-05-09T18:57:34Z,"let's add a top comment for each of these functions with it's role and reason why it is needed.
plus some description of the interface (return values)."
868336169,10636,oranagra,2022-05-09T19:02:10Z,"do we need both `xen` and `clocksource` here?
maybe just `clocksource`?

p.s. i would rename one to `xen-clocksource` and the other to `slow-clock_gettime` or `slow-clock`"
868734793,10636,sundb,2022-05-10T01:55:30Z,I think it works.
868882425,10636,yoav-steinberg,2022-05-10T06:59:05Z,"I agree, but `version()` and `usage()` take the other approach while `memtest()` does the exit externally. So there's some inconsistency here. I'll change."
868882518,10636,yoav-steinberg,2022-05-10T06:59:12Z,:+1: 
868886252,10636,yoav-steinberg,2022-05-10T07:04:03Z,:+1: 
868887082,10636,yoav-steinberg,2022-05-10T07:05:06Z,"You sure? The check now has no disadvantages, and in all known cases we don't want `xen` clocksource. Lets add this only in the future if needed."
868887705,10636,yoav-steinberg,2022-05-10T07:05:56Z,":+1: oops, missed the ARM stuff."
868912238,10636,yoav-steinberg,2022-05-10T07:34:28Z,"I copied it from some file that was copiright `Redis Labs` with no ""Ltd"" and just removed the ""Labs"". Anyway I'll add the ""Ltd."". Re guidelines I have not idea, probably we need to have multiple copyright lines something like:
```
 * Copyright (c) 2014, Someone
 * Copyright (c) 2022, Someone else
```
Let me know...
"
868929874,10636,yoav-steinberg,2022-05-10T07:52:54Z,done.
868945876,10636,oranagra,2022-05-10T08:09:42Z,"i thought someone may be bothered by the warning print.
but on a second thought, we don't have any way to disable the THP or other warnings either..
so ok.. but @yossigo please ack."
868946921,10636,oranagra,2022-05-10T08:10:48Z,@yossigo we do you have an insight on that (moving code to a different file)?
869004198,10636,oranagra,2022-05-10T09:08:52Z,p.s. aren't we also missing checkTcpBacklogSettings?
869008973,10636,yoav-steinberg,2022-05-10T09:13:39Z,done.
869010724,10636,yossigo,2022-05-10T09:15:29Z,"I don't see a problem in not having a way to disable, but I do think we need to emit different warnings:
* When `xen` source is detected, indicate it *might* be an issue and suggest to run the check.
* When we actually measure a slow `clock_gettime()`, indicate there is a real issue and a possible solution if `xen` is used (but remember it could also be a totally different problem / platform)."
869011879,10636,yossigo,2022-05-10T09:16:34Z,"New file should carry old file's notice, and if it includes additional changes then the copyright line you suggested above can be added as well."
869013187,10636,yoav-steinberg,2022-05-10T09:18:01Z,This checks that the system can be configured according to the `tcp-backlog` configuration. So it's not a generic system check. What do you think?
869020235,10636,oranagra,2022-05-10T09:24:36Z,"ok.. so because it reacts to a config config, it is different.. (also must be run later in the startup sequence)."
869905412,10636,oranagra,2022-05-11T06:10:39Z,"well, i suppose we can do that in another PR later.."
869944399,10636,sundb,2022-05-11T07:08:56Z,"This line in REDIS_TEST is redefined.
https://github.com/redis/redis/blob/815a6f846a3836b87a4601e5ce6152d8d534dce1/src/zmalloc.c#L751
"
870002811,10636,sundb,2022-05-11T08:12:45Z,I wonder if we can move these check codes into syscheck.c altogether.
870018001,10636,oranagra,2022-05-11T08:28:25Z,@sundb what do you mean? (not sure of the context of your last message)
870021392,10636,sundb,2022-05-11T08:31:53Z,"@oranagra Now all the checking methods have been moved to syscheck.c, but there is still some checking code in server.c, I think it is more reasonable to put them all together."
870031645,10636,oranagra,2022-05-11T08:42:06Z,"ok, but we did that already (except for the tcp_backlog one that's tied to a config value).
and this comment of yours is in a thread about whether or not to add a `checkIgnoreWarning` to silence the print.
so i'm not certain about the context, maybe i'm missing your intention."
870036500,10636,yoav-steinberg,2022-05-11T08:46:41Z,thanks. fixed.
870065515,10636,yoav-steinberg,2022-05-11T09:15:49Z,"@sundb the logic is that `--check-system` is used to run **all** available system checks and set an appropriate exit code. This can be done by install scripts, etc. to verify the system is correctly configured. This means the checks can also be inefficient or even leave the process in a problematic state. On the other hand the checks which are executed on normal server startup have to be fast and not affect the process's state.

@yossigo I changed the warning messages based on your comment. 

I'm resolving this. Re-open if needed."
870066472,10636,yoav-steinberg,2022-05-11T09:16:39Z,"Now that each test prints a different warning message, having both of them provides the user with more details. I'm for keeping both.
Updated the test names."
870078016,10636,sundb,2022-05-11T09:27:39Z,"@yoav-steinberg Ohh, I missed it, I thought it was just optimization.
@oranagra If so, I don't think it seems appropriate to brink the #10467 check here, when building a docker image, this check will not fail, because it is not built under qemu, until the image is actually running in qemu, it will be will fail."
870081444,10636,yoav-steinberg,2022-05-11T09:31:02Z,Decided to put this test under the `--check-system` mode instead of on startup.
870082063,10636,yoav-steinberg,2022-05-11T09:31:36Z,done.
870164378,10636,oranagra,2022-05-11T11:00:43Z,"It may still be a thing that we can suggest to users to run. But I agree it'll not be valuable for plain docker users. And I suppose others are not expected to use QEMU.. Anyway, we can reconsider in the future. "
873106833,10636,madolson,2022-05-15T04:24:00Z,"```suggestion
 *   0 in case the check could not be completed (usually because of some unexpected failed system call).
```
?"
873107113,10636,madolson,2022-05-15T04:27:50Z,Split this line?
873107136,10636,madolson,2022-05-15T04:28:20Z,Split this line?
873107278,10636,madolson,2022-05-15T04:30:22Z,"```suggestion
/* Verify we're not using the `xen` clocksource. The xen hypervisor's default clocksource is slow and affects
 * Redis's performance. This has been measured on ec2 xen based instances. ec2 recommends using the non-default
 * tsc clock source for these instances. */
```"
873107501,10636,madolson,2022-05-15T04:33:04Z,"If someone is running a non-durable variant of Redis, THP can be a good thing since it reduce TLB misses. It seems like the warning message doesn't really address that situation very clearly."
874316915,10636,sundb,2022-05-17T02:58:51Z,"Maybe we can change `linuxMemoryWarnings()` to `int checkLinuxMemoryWarnings(sds *err_msg)`, so we don't need to repeat `serverLog(LL_WARNING, ...)` and `sdsfree(...)` multiple times.

```c
if (checkLinuxMemoryWarnings(&err_msg) < 0 ||
    checkXenClocksource(&err_msg) < 0)
{
    serverLog(LL_WARNING, ""WARNING %s"", err_msg);
    sdsfree(err_msg);
}
```"
874408993,10636,yoav-steinberg,2022-05-17T06:19:26Z,But we might want to print both warnings.
874424710,10636,sundb,2022-05-17T06:43:16Z,"Indeed, I was wrong.
BTW, When I try to add madv DONTNEED detection based on this pr and output warnings, I can only copy most of the warning ouput code similar to `checkLinuxMadvFreeForkBug`, which is not very comfortable."
874425139,10636,yoav-steinberg,2022-05-17T06:43:51Z,"I think there might be other instances where a fork might cause THP issues. Redis might fork for module processing (`CHILD_TYPE_MODULE`) or for disk based replication. I was under the impression that this should always be turned off. But you are right that there are other cases.
I have a feeling that too much detail here will become cumbersome. For the general use case we should recommend turning this off. 
It might be wise to add a link to the docs website for a detailed explanation, and perhaps do the same for all the other warnings. The downside being that we'll have to keep the link valid."
878870801,10636,oranagra,2022-05-22T14:06:30Z,"i don't think a link to the website is suitable, might get outdated.
i think we need to provide enough information so that people can google it, or find an answer in stack overflow.
i'd prefer to avoid providing incorrect or misleading information, so in this context maybe we should replace `This will create latency and memory usage issues with Redis` with `This may ...`.
But i'll leave that for another opportunity (this PR just relocates that text, it didn't introduce it)."
924143196,10969,guybe7,2022-07-19T07:16:38Z,why?
924143786,10969,guybe7,2022-07-19T07:17:23Z,i see now we propagate after each operation (which is generally better i guess) - i think we can completely delete `server.propagate_no_multi`
924148374,10969,guybe7,2022-07-19T07:22:40Z,"i think this function is unnecessary (only used in one place, we can just copy the two lines there)"
924149233,10969,guybe7,2022-07-19T07:23:35Z,what's the difference between `len` and `numops`?
924154684,10969,guybe7,2022-07-19T07:29:24Z,"i mean, i can see that `len` is the number of ""taken"" elements and `numops` is the number of taken elements that have a `target` (i.e not the ""placeholder"" ones) - but do we really need it?

the placeholder must be filled before calling `propagatePendingCommands` (we should assert that `target` exists) so maybe we can drop `len` and use only `numops`, which will be incremented, regardless of whether it's a placeholder or not"
924155223,10969,guybe7,2022-07-19T07:29:56Z,see comment https://github.com/redis/redis/pull/10969/files#r924154684
924155636,10969,guybe7,2022-07-19T07:30:23Z,let's assert `!op->target`
924155953,10969,guybe7,2022-07-19T07:30:43Z,how is that possible?
924156814,10969,guybe7,2022-07-19T07:31:40Z,what about `zfree(oa->ops)`?
924157758,10969,MeirShpilraien,2022-07-19T07:32:43Z,The placeholder is not necessarily be set in case the command did not cause any effects and does not need to be replicated.
924165740,10969,MeirShpilraien,2022-07-19T07:41:29Z,Also its possible that it will be left empty if the command called `preventCommandPropagation` and propagate the data by itself (like `spop`)
924166972,10969,MeirShpilraien,2022-07-19T07:42:46Z,We reuse the array so we will not have to allocated it each time.
924172537,10969,MeirShpilraien,2022-07-19T07:48:36Z,"Without mark that we are on nested call, the first `RM_Call` that will be invoke by the module will cause the data to be replicated. If the module perform more then one `RM_Call`, those will not be replicated in a single `Multi + Exec`."
924226571,10969,guybe7,2022-07-19T08:43:03Z,add comment: we add this in order to prevent any RM_Call that may exist in the notify CB to be propagagted immediatly.. we want them in multi/exec with the DEL command
924228898,10969,guybe7,2022-07-19T08:45:14Z,comment that we do not zfree on purpose
924234999,10969,guybe7,2022-07-19T08:51:06Z,"maybe do that just in case the command is ""write"" or ""may-replicate"""
924244097,10969,guybe7,2022-07-19T08:59:04Z,trim the last element of the ops array (it's either been replicated or it's a placeholder)
924248610,10969,guybe7,2022-07-19T09:03:27Z,add test: module does RM_Call(write-cmd) inside a key-miss notification. the read command that caused key-miss should not be replicated.
924249854,10969,guybe7,2022-07-19T09:04:47Z,"capacity, numops: stays the same
len -> used

please add comment in the struct"
924290032,10969,guybe7,2022-07-19T09:44:08Z,"please make propagateNow take dbid=-1, meaning it should not emit any SELECT (db-neutral command)"
929048738,10969,guybe7,2022-07-25T15:57:53Z,please document what dictid == -1 means (db-neutral command)
929050114,10969,guybe7,2022-07-25T15:59:21Z,"please make sure that -1 is passed explicitly (never pass `server.slaveseldb` as `dictid`)
update the comment above the assertion"
929052003,10969,guybe7,2022-07-25T16:01:15Z,/* Propagate the DEL command */
929052631,10969,guybe7,2022-07-25T16:01:52Z,i guess you over-replaced :)
929053489,10969,guybe7,2022-07-25T16:02:46Z,.. is an unused placeholder ..
929059981,10969,guybe7,2022-07-25T16:09:36Z,"maybe it should just return the index of the appended op, instead of the total number of ops?"
929061221,10969,guybe7,2022-07-25T16:10:42Z,let's add os->numops-- after the `continue`
929061677,10969,guybe7,2022-07-25T16:11:03Z,we can assert these (the loop should have zeroed them both)
929064543,10969,guybe7,2022-07-25T16:13:50Z,please use a better name (cmd_prop_index for exmaple)
929108637,10969,guybe7,2022-07-25T17:02:34Z,why?
929108851,10969,guybe7,2022-07-25T17:02:48Z,please trim empty lines
929155630,10969,MeirShpilraien,2022-07-25T17:59:39Z,"As mentioned on the top comment:

> key miss event:
On key miss event, if a module performed some write command on the event (using RM_Call), the dirty counter would have increase and the read command that cause the key miss event would have been replicated to the replication and aof. To avoid this, we perform the replication only on WRITE or MAY_REPLICATE commands. This will prevent replicating read commands even if the dirty counter was increased. Test was added to verify this scenario.

Added a comment on the code itself as well."
929177431,10969,guybe7,2022-07-25T18:27:25Z,but what about lazy-expire? how does that work? imagine a GET that causes the propagation of DEL... from what i can see from the code they would both propagate (which is not the best) but now after your change none of them would propagate (which is worse). please CMIIW and add a test if I'm not
929179663,10969,guybe7,2022-07-25T18:30:21Z,"mmm idk, i feel it's a bit confusing... maybe
```
int idx = os->used;
op = oa->ops[idx];
...
os->used++;
return idx;
```"
929185933,10969,MeirShpilraien,2022-07-25T18:38:28Z,"I believe only the `get` will not be propagated, let me write a test for it."
929203298,10969,MeirShpilraien,2022-07-25T19:00:29Z,Pushed another commit with the test.
929230371,10969,oranagra,2022-07-25T19:34:17Z,"we don't use the term ""primary"" at least not yet.
for now, mixing up different terminologies just causes confusion IMHO."
929230741,10969,oranagra,2022-07-25T19:34:53Z,it should be shorter to match it to a mark with two bits (`flags` mentioned only once)
929235631,10969,oranagra,2022-07-25T19:41:39Z,"```suggestion
    /* Try to trim the last element if it is not used (if it's still a placeholder). */
```"
929251301,10969,oranagra,2022-07-25T20:02:12Z,"```suggestion
    test {Redis should not propagate the read command on lazy expire} {
```"
929252914,10969,oranagra,2022-07-25T20:04:17Z,"in such tests, i always prefer to add another dummy command, e.g. SET so i can verify there are no other unexpected commands after DEL"
930713501,10969,guybe7,2022-07-27T07:28:54Z,remove epty line
930714119,10969,guybe7,2022-07-27T07:29:38Z,"""If we got here with cmd_prop_index == -1, the command ..."""
930996405,10969,MeirShpilraien,2022-07-27T12:24:26Z,Placeholder is not necessarily be used.
931036038,10969,oranagra,2022-07-27T13:03:13Z,"target of 0 means not to propagate anywhere? maybe a comment here can explain the scenario?
would be nice if we would add some comment next to `target`'s declaration too.
it would also be nice to explain the interface in the top comment of the function"
931057904,10969,oranagra,2022-07-27T13:23:15Z,"git diff gets confused between redisOpArraySet and redisOpArrayAppend.
maybe if we move redisOpArraySet to be above redisOpArrayAppend it'll look better (easier to review)
let's also add some comment that it's here to update a placeholder (explaining the assertion)?"
931063130,10969,oranagra,2022-07-27T13:27:48Z,"```suggestion
 * to replicate SELECT for this command (used for database neutral commands).
```"
931069813,10969,oranagra,2022-07-27T13:33:35Z,"are you sure this function is properly named?
for me, the name suggests that it is always used with a placeholder.
but actually, it's more an ""alsoPropagateRaw"" that's used as an ""append or replace"" thing.
i suggest to rename and add a comment."
931077857,10969,oranagra,2022-07-27T13:40:42Z,"```suggestion
        /* We use dbid=-1 to indicate we do not want to replicate SELECT.
         * It'll be inserted together with the next command (inside the MULTI) */
```"
931080015,10969,oranagra,2022-07-27T13:42:36Z,"```suggestion
         * Notice that we only do this if the command might cause replication (either it's a WRITE command or MAY_REPLICATE) */
```"
931093607,10969,oranagra,2022-07-27T13:54:23Z,"this is a temporary solution, right?
we will revert back to using rewriteClientCommandVector as soon as we can afford to move the keyspace notification to before the `dbDelete`.

so let's comment all of that in some TODO comment in the code (not just commit comment).
will also better explain this odd code (different from other similar commands) when someone looks at it."
931098179,10969,oranagra,2022-07-27T13:58:05Z,"i think i expected a documentation update (in module.c) to mention people shouldn't do that.
it's ok that the tests does it, so the code path is covered, but the tests should maybe have a comment that it's temporary (for coverage), until we can afford to add an assertion."
931112777,10969,oranagra,2022-07-27T14:10:02Z,"```suggestion
                    # The replica will get the notification with multi exec and we have a generic notification handler
```"
931115604,10969,oranagra,2022-07-27T14:12:21Z,"this is not gonna change, when we fix the code in t_set.c, right?
still maybe drop here a comment what makes this case special (explicitly stating that it's not gonna change)"
931117248,10969,oranagra,2022-07-27T14:13:42Z,"ohh, the comment i expected in the module's C code is here..
still maybe drop a comment on the other end too."
931844172,10969,MeirShpilraien,2022-07-28T06:52:49Z,"Actually I am not sure, I discussed with @guybe7 whether or not it is right to do `rewriteClientCommandVector` or a command that don't want to replicate itself should just do  `preventCommandPropagation` and propagate what it want. Currently we have a mix of 2 ways to achieve the same thing ... But we can discuss it on another PR/issue."
931844366,10969,MeirShpilraien,2022-07-28T06:53:03Z,Will add a todo anyway ...
931849444,10969,MeirShpilraien,2022-07-28T06:59:37Z,"This is going to change, notice that the `del` comes after `incr notifications` when we fix the key space notification ordering the `del` will come before. I will add a comment."
932207835,10969,oranagra,2022-07-28T13:18:49Z,"not sure that warning should be placed here.
i don't see any details about something ""special"" in the link provided here.
i guess the warning you added above is enough."
932209744,10969,oranagra,2022-07-28T13:20:38Z,"```suggestion
 * We assume the updated placeholder has no target set yet (otherwise its not a placeholder). */
```"
932215287,10969,oranagra,2022-07-28T13:25:11Z,"```suggestion
 * verification that it's not crashing). */
```
"
932238761,10969,MeirShpilraien,2022-07-28T13:45:14Z,"Ohh, I wanted to put it here but then decided that its better to put it above and forgot to delete it..."
885713414,10747,guybe7,2022-05-31T14:28:40Z,"you should use MKGROUP (we want the default behavior to be avoiding creating a group, to keep backward compatibility)"
885731169,10747,hwware,2022-05-31T14:43:45Z,"Thanks, I will update it."
990757333,10747,oranagra,2022-10-09T08:48:49Z,"@hwware you have indentation issues, your editor inserts tabs in some places.
please go over all the modified files and fix them."
990757420,10747,oranagra,2022-10-09T08:49:35Z,added white space at the end of line that doesn't have any changes otherwise
990757535,10747,oranagra,2022-10-09T08:50:28Z,"i don't think we need to mention all the supporting commands, just mention is't not supported for XREAD"
990757718,10747,oranagra,2022-10-09T08:52:00Z,white space
990757741,10747,oranagra,2022-10-09T08:52:08Z,whitespace
990757793,10747,oranagra,2022-10-09T08:52:25Z,whitespace
990758021,10747,oranagra,2022-10-09T08:54:16Z,"let's keep the old error code / behavior (NOGROUP), with a detailed message saying the key is missing..."
990758058,10747,oranagra,2022-10-09T08:54:50Z,indentation is wrong.
990758139,10747,oranagra,2022-10-09T08:55:22Z,indentation is wrong.
990758498,10747,oranagra,2022-10-09T08:57:38Z,"why would it ever fail? we already know the group doesn't exist.
please drop this."
990758845,10747,oranagra,2022-10-09T09:01:08Z,"indentation issues..

why do we set `mkgroup` when argc==4?
i don't like this assumption, it can break in the future.
i understand that the current command syntax forces us to count things in order to guess what's coming next, but at least let's actually match strings that we can."
990759057,10747,oranagra,2022-10-09T09:02:55Z,indentation
990759791,10747,oranagra,2022-10-09T09:08:24Z,i'd rather move the lookup (KSN) and type check to after processing the arguments and syntax errors.
990759960,10747,oranagra,2022-10-09T09:09:27Z,"again, error that can't actually happen. please drop (and fix indentation issues and tabs)
"
990760015,10747,oranagra,2022-10-09T09:10:09Z,let's keep the old error code.
990760330,10747,oranagra,2022-10-09T09:11:35Z,"i'd suggest to move the type check and all creations to after argument parsing.
i know it wasn't the case, but let's improve."
990760383,10747,oranagra,2022-10-09T09:12:04Z,drop error that can't happen.
990760515,10747,oranagra,2022-10-09T09:12:49Z,let's keep the error code
990760537,10747,oranagra,2022-10-09T09:13:04Z,drop impossible error
995910231,10747,hwware,2022-10-14T15:56:15Z,"I will update the codes following your comments, and rebase it as well.  Thanks Oran"
999861873,10747,hwware,2022-10-19T19:33:20Z,"Hi Oran, here I have one concern, but so far I have no better idea. Please comment it if you have better idea on it.
For the command xpending, it could be 
`XPENDING <key> <group> [<start> <stop> <count> [<consumer>]]`
or
`XPENDING <key> <group> [<start> <stop> <count> ] [MKGROUP]`

The last argument could be **consumer** or [MKGROUP], so the only way to distinguish is to use `strcasecmp(c->argv[j]->ptr, ""MKGROUP"")`.   If I move the MKGROUP augement to the front of the IDLE or `<start>`, it will break current change.
Thus, I choose my current code. 
If you have better arugment format or better coding logic, welcome to comment here.

"
1002706299,10747,oranagra,2022-10-23T12:55:56Z,"i see that in 6.2 we chose to extend this command by adding optional arguments (the IDLE) before the `<start>`.
so in this case, since MKGROUP isn't related to the range specification, i think it should come right after `<group>`"
1002706604,10747,oranagra,2022-10-23T12:57:54Z,"as i noted here https://github.com/redis/redis/pull/10747#discussion_r1002706299
i think it should come before the `filters` block."
1002706771,10747,oranagra,2022-10-23T12:59:23Z,indentation
1002707021,10747,oranagra,2022-10-23T13:01:05Z,white space
1002707064,10747,oranagra,2022-10-23T13:01:17Z,white space
1002707311,10747,oranagra,2022-10-23T13:03:13Z,"let's move the creation of the group to after argument parsing.
so that we know we're not making changes if the command is gonna fail on an error."
1002710587,10747,oranagra,2022-10-23T13:27:09Z,please make sure your code doesn't contain tabs.
1002710704,10747,oranagra,2022-10-23T13:27:42Z,"indentation by 4, not 2."
1017132120,10747,hwware,2022-11-08T21:30:34Z,"Address this comment, create the group if necessary after the argyment parsing part, Please take a look"
1017132750,10747,hwware,2022-11-08T21:31:23Z,Check all code styles and update them.  Thanks a lot
1032908167,10747,oranagra,2022-11-27T10:50:24Z,"didn't we already lookup the key and group?
we saved the group into `groups`, there's no need to re-lookup.
let's do the same thing for the keys and also avoid the other lookupKeyRead below.
"
1032914500,10747,oranagra,2022-11-27T11:34:41Z,isn't this outdated? let's match it to `j`
1032914549,10747,oranagra,2022-11-27T11:35:14Z,"please add a comment (""expecting at least start, end, count to follow"", right?)"
1032915512,10747,oranagra,2022-11-27T11:41:47Z,"optional arguments are interchangeable, you shouldn't search for it only at the last argument.
why not move it to the argument parsing? (where you already skip that arg anyway)"
1032915852,10747,oranagra,2022-11-27T11:44:18Z,"let's move all of that (and the lookupKey at the top of this function) to after the argument parsing.
no sense in looking up the key if we have a syntax error."
1032916219,10747,oranagra,2022-11-27T11:46:38Z,"the tests still has tabs in them, please change to spaces.."
1032916401,10747,oranagra,2022-11-27T11:47:53Z,why do we need all these sleeps?
1048536023,10747,hwware,2022-12-14T14:26:26Z,"I will address your comments in next a few days, sorry for that."
1063563264,10747,hwware,2023-01-06T16:03:06Z,"Hi Oran, I already update all code logic, the process will be first parse the argument, and then check the key, finally check the group. And also I fix all code styles, Please check the latest codes, Thanks for your hard working."
1411393863,10747,hwware,2023-11-30T23:04:15Z,Adressed this comment when I updated https://github.com/redis/redis/pull/10747#discussion_r1063563264
1411394199,10747,hwware,2023-11-30T23:04:45Z,"adressed this comment when i updated following comment https://github.com/redis/redis/pull/10747#discussion_r1063563264
"
1411394454,10747,hwware,2023-11-30T23:05:12Z,"added the comment when I updated https://github.com/redis/redis/pull/10747#discussion_r1063563264
"
1411394908,10747,hwware,2023-11-30T23:06:02Z,"updated this when I changes are made for https://github.com/redis/redis/pull/10747#discussion_r1063563264
"
1411395562,10747,hwware,2023-11-30T23:07:09Z,Correcetd all intendation in the file.
646093479,8999,oranagra,2021-06-06T08:03:30Z,"i don't think `callback_refactor` is a good name (seems to match the current state of mine, but isn't good for long term).
let's either call it `datatype2` (rename if we find a better name for the callbacks themselves too)"
646094361,8999,oranagra,2021-06-06T08:10:47Z,"let's not use the term ""refactored"". maybe ""enhanced""?
how about moving that whole block (casting to `moduleValue` and creating the `ctx` etc) to module.c?
i.e. create a function that's responsible for calling the right callback, and also providing the right value (1) if there's no callback defined?"
646095137,8999,oranagra,2021-06-06T08:16:52Z,"```suggestion
        /* We prefer to use the enhanced version. */
```"
646095462,8999,oranagra,2021-06-06T08:19:57Z,"i can't comment on a line with no change, but i see a call to `free_effort` a few lines above this one, i suppose it needs to be handled (call the alternative if defined)"
646095833,8999,oranagra,2021-06-06T08:22:40Z,"i'd vote to move this (casing to `moduleValue`, selection between the different callbacks and creation of the context to module.c).
i'd imagine it also means the new structs you probably defined in redis.h can move to modle.c too (make them a bit more opaque)."
646096616,8999,oranagra,2021-06-06T08:29:33Z,"i suppose that we'd rather remove the key-name arguments from this function completely, and let the user get all the metadata from the context?
that means the context should hold 2 database IDs (a ""from"" and a ""to"").
alternatively, if we don't wanna mess `RedisModuleKeyOptCtx` with two key names and two database IDs, we can let the new callback we define take only the ""from"" part (i.e. take `fromkey` and `fromdbid`), and let the user get the ""to"" part from the context.

if we wanna be more explicit, then the new callback should take all 4 of these (two keynames, and 2 dbids), and let the context hold the ""to"" but be unused (keep a context for some future extension)."
646096933,8999,oranagra,2021-06-06T08:31:46Z,what about `RedisModule_GetDbFromModuleKey`? let's add that one too
646097098,8999,oranagra,2021-06-06T08:33:28Z,"the documentation in the top of this function needs to be extended, to mentioned the ""extended"" callbacks."
646097506,8999,oranagra,2021-06-06T08:36:17Z,"do we need this? (`REDISMODULE_EXPERIMENTAL_API`), if not, let's drop it."
646097687,8999,oranagra,2021-06-06T08:37:47Z,"some people copy code from these tests, let's use RM_Assert"
646098274,8999,oranagra,2021-06-06T08:42:36Z,let's use RM_Assert instead (just to avoid people copying this code to their modules)
646098923,8999,oranagra,2021-06-06T08:48:38Z,"don't / shouldn't we handle the ""copy_to"" with the copy callback?
i.e. rely on keyspace notification only for MOVE and RENAME, but not for COPY."
646099225,8999,oranagra,2021-06-06T08:51:09Z,"maybe add a few more lines as to what exactly the module does (so it's easier to read the code).
i.e. your comment says what it comes to test, but if there was some comment that describes what the module mimics, or how it operates, it'll be easier to understand the code."
646099998,8999,oranagra,2021-06-06T08:57:33Z,"maybe if we actually use these in the global data the test would make more sense, and also will be more useful (i.e. it'll use these strings instead of just checking for NULL, and have a chance to detect more bugs).
i.e. each slot of your global db array hold a list of the keys we know it has (maybe use RM_CreateDict`)
on the other hand, i don't want to complicate the test code too much (both for readability and your coding effort).
so, please consider, but feel free to reject that idea."
646100176,8999,oranagra,2021-06-06T08:59:20Z,"let's use RM_Assert. i rather avoid people using `abort` in real modules, and want to prevent someone copying this to a real module."
646223172,8999,chenyang8094,2021-06-07T01:40:10Z,We do need it because the api `SubscribeToKeyspaceEvents` is currently in Experimental APIs.
646547807,8999,chenyang8094,2021-06-07T12:38:10Z,I am rewriting this test.
647091359,8999,soloestoy,2021-06-08T03:55:23Z,"a suggestion: change to `GetDbIdFromIO`, just like `GetKeyNameFromIO`"
647135932,8999,chenyang8094,2021-06-08T06:04:23Z,"Okay, modified ：）"
647526129,8999,oranagra,2021-06-08T14:56:54Z,"I think this text and / or diagram below can be improved to specify how this is related to keys in redis, and what is stored in global memory.
when i read this i didn't understand it, and had to read the code to follow up.

i.e. that there's an array of dictionaries in global memory, a dict per db id.
in each dict the key is the key name (key that's also registered in redis as a key).
it is clear from the diagram what the dict holds, but not entirely clear what's stored in the redis database.

maybe it is sufficient to give the columns below a title. i.e. ""db id"", ""key name"", etc.
and also state clearly what we store in the redis database per key."
647533042,8999,oranagra,2021-06-08T15:04:08Z,why did you add these tags (`enhanced` and `callbacks`)?
647685934,8999,oranagra,2021-06-08T18:14:14Z,"```suggestion
/* Returns the name of the target key currently being processed. 
 * Currently this is only used by the copy2 data type callback. */
```"
647686366,8999,oranagra,2021-06-08T18:14:56Z,"```suggestion
/* Returns the target dbid currently being processed. 
 * Currently this is only used by the copy2 data type callback. */
```"
647689259,8999,oranagra,2021-06-08T18:18:19Z,"```suggestion
 *             // Enhanced optional fields
 *             .mem_usage2 = myType_MemUsageCallBack2,
 *             .free_effort2 = myType_FreeEffortCallBack2,
 *             .unlink2 = myType_UnlinkCallBack2,
 *             .copy2 = myType_CopyCallback2,
```"
647690680,8999,oranagra,2021-06-08T18:20:23Z,"```suggestion
 * * **mem_usage2**: Similar to `mem_usage`, but provides the `RedisModuleKeyOptCtx` parameter 
 *   so that meta information such as key name and db id can be obtained.
 * * **free_effort2**: Similar to `free_effort`, but provides the `RedisModuleKeyOptCtx` parameter 
 *   so that meta information such as key name and db id can be obtained.
 * * **unlink2**: Similar to `unlink`, but provides the `RedisModuleKeyOptCtx` parameter 
 *   so that meta information such as key name and db id can be obtained.
  * * **copy2**: Similar to `copy`, but provides the `RedisModuleKeyOptCtx` parameter 
 *   so that meta information such as key names and db ids can be obtained.
```"
647691417,8999,oranagra,2021-06-08T18:21:38Z,"```suggestion
/* Returns the database id of the key currently being processed. */
```"
647691718,8999,oranagra,2021-06-08T18:22:04Z,"```suggestion
/* Returns a database id of the key from RedisModuleKey. */
```"
647692652,8999,oranagra,2021-06-08T18:23:29Z,"```suggestion
/* Returns the database id of the key currently being processed.
 * There is no guarantee that this info is always available, so this may return -1.
```"
647693187,8999,oranagra,2021-06-08T18:24:17Z,"```suggestion
/* Returns the database id of the key currently being processed.
 * There is no guarantee that this info is always available, so this may return -1.
```"
647695344,8999,oranagra,2021-06-08T18:27:38Z,"```suggestion
 * `free_effort` or `free_effort2`, and the default return value is 1.
  * value of 0 means very high effort (always asynchronous freeing). */
```"
647699115,8999,oranagra,2021-06-08T18:33:21Z,"```suggestion
```"
647699429,8999,oranagra,2021-06-08T18:33:47Z,"```suggestion
```"
647699499,8999,oranagra,2021-06-08T18:33:54Z,"```suggestion
```"
647899520,8999,chenyang8094,2021-06-09T01:24:28Z,"I have added several diagrams to illustrate the correspondence between **redis key** and **mem pool**。
In short, the value stored in the redis dict is **MemAllocObject**, which records the meta-information of the mem pool, that is, `size` indicates that a total of several mem blocks are allocated, `used` indicates the number of used mem blocks, and  `mask` indicates which mem block is occupied, is a bitmap."
648056445,8999,oranagra,2021-06-09T07:52:07Z,"```suggestion
/* This module is used to test a use case of a module that stores information
* about keys in global memory, and relies on the enhanced data type callbacks to
* get key name and dbid on various operations.
*
* It simulates a simple memory allocator. The smallest allocation unit of 
```"
648056999,8999,oranagra,2021-06-09T07:52:49Z,"
```suggestion
 * Global variables of the module:
```"
648057457,8999,oranagra,2021-06-09T07:53:21Z,"```suggestion
 * Keys in redis database:
```"
1608348367,13285,sundb,2024-05-21T13:35:08Z,"the reason why we don't rewrite it as single command(max AOF_REWRITE_ITEMS_PER_CMD item in one command) is that we don't support set the TTL for individual field now?
it seems werid that we will generate three command if there are three fields with TTL after aof rewrite."
1609656083,13285,sundb,2024-05-22T09:54:01Z,i think we should avoid this style of comment in parameter.
1609708521,13285,sundb,2024-05-22T10:26:06Z,using `lpGet()` which can get the buf at the same time? it will save the `ll2string()` below.
1609751646,13285,sundb,2024-05-22T11:01:44Z,why do we put these into executeUnit? 
1609885684,13285,moticless,2024-05-22T12:45:38Z,"The most problematic case is when all fields has different TTLs. 
We can try optimize adjacent fields with same TTL. - Yet, the iteration is not based on TTLs. 
"
1609897453,13285,moticless,2024-05-22T12:52:11Z,Bad copy paste of code (even though it makes no harm). Thanks!
1610868927,13285,sundb,2024-05-23T02:02:51Z,"```suggestion
        lpt->lp = lpDeleteRangeWithEntry(lpt->lp, &ptr, 3);
```"
1610902652,13285,sundb,2024-05-23T03:01:19Z,"```suggestion
proc getKeyFieldsExpiry {client} {
```"
1610903192,13285,sundb,2024-05-23T03:02:26Z,"```suggestion
        OnFieldExpireCtx onFieldExpireCtx = {
            .hashObj = hashObj,
            .db = activeExpireCtx->db
        };
```"
1610970606,13285,sundb,2024-05-23T04:50:44Z,"```suggestion
    robj *argv[] = {
        shared.hdel,
        createStringObject((char*) key, sdslen(key)),
        createStringObject(field, fieldLen)
    };
```"
1611040440,13285,sundb,2024-05-23T05:52:44Z,"can this be put into randpath?
i doubt why we need the `usehexpire` parameter?"
1611045005,13285,sundb,2024-05-23T05:58:26Z,is it unnecessary?
1611141142,13285,moticless,2024-05-23T07:24:36Z,blindly followed `useexpire`. Removed. thanks.
1611238808,13285,sundb,2024-05-23T08:26:03Z,"~~forget to *1000?~~
EDIT: missed the *1000 above."
1611348776,13285,sundb,2024-05-23T09:32:14Z,"is it more readable to move these code that is executed for replication info if?
like:
```c
    /* If in replica then return C_OK (discard hash-field expiry logic) */
    if (!(server.masterhost) || !(server.current_client && (server.current_client->flags & CLIENT_MASTER))) {
        /*  TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO
        * Once dbid will be embedded inside HASH, extract it from there and remove
        * this hack that is aligned with testing.
        *
        * Going to be my next commit.
        */
        redisDb *db = server.db+0;

        /* delete the field and propagate the deletion */
        serverAssert(hashTypeDelete(o, field, 1) == 1);
        propagateHashFieldDeletion(db, key, field, sdslen(field));

        if (hashTypeLength(o, 0) == 0) {

            /* create temporary robj with the key */
            robj *keyObj = createStringObject(key, sdslen(key));

            notifyKeyspaceEvent(NOTIFY_GENERIC, ""del"", keyObj, db->id);
            dbDelete(db,keyObj);
            decrRefCount(keyObj);
        }
        return C_ERR;
    }
```"
1611563217,13285,moticless,2024-05-23T11:54:34Z,Please consider my last commit
1612519229,13285,sundb,2024-05-24T00:46:12Z,"```suggestion
                *existsptr = hashTypeExists(key->db,key->value,field->ptr);
```"
1612519339,13285,sundb,2024-05-24T00:46:19Z,"```suggestion
                *valueptr = hashTypeGetValueObject(key->db,key->value,field->ptr);
```"
1612540521,13285,sundb,2024-05-24T01:12:37Z,"```suggestion
    if (hashTypeGetValue(db,o,field,&vstr,&vlen,&vll) == C_ERR) return NULL;
```"
1612612148,13285,sundb,2024-05-24T02:23:21Z,"if `o` was deleted from db in `hashTypeGetValue`, we will continue to use `o` after here.
i think we should consider whether the propagate and deletion should be put in the `hashTypeGetValue`, maybe it should be up to the caller."
1613005020,13285,tezc,2024-05-24T07:37:39Z,Yaacov says current decision is to delete HSETF and HGETF commands. We will hot have these commands. Need to do this some other way.
1613279596,13285,sundb,2024-05-24T10:48:18Z,"11 ms is too short, i get a test failure here.
the hpexpire* commands are all the same.

```
Command rewrite and expired hash fields are propagated to replica (ht) in tests/unit/type/hash-field-expire.tcl
Expected 'hdel h1 f1' to match 'hset h2 f1 v1 f2 v2 f3 v3 f4 v4' (context: type source line 971 file /home/sundb/data/redis_fork/tests/support/util.tcl cmd {assert_match [lindex $patterns $j] [read_from_aof $fp]} proc ::assert_aof_content level 1)
```"
1613338291,13285,tezc,2024-05-24T11:42:06Z,you may add a test for this case
1613968595,13285,tezc,2024-05-24T20:05:59Z,"The comment may not be necessary. Otherwise, please reword it, a bit hard to understand. "
1613977562,13285,tezc,2024-05-24T20:16:56Z,"Out of curiosity, why are we doing this? Is it needed somewhere?"
1615136257,13285,ronen-kalish,2024-05-26T08:58:34Z,"Perhaps this can be somehow optimized to include multiple expired fields in one key on a single `repl backlog` entry? Obviously not for now, but maybe open a ticket for that (or whatever)"
1615136332,13285,ronen-kalish,2024-05-26T08:59:16Z,nitpack: `listpac` -> `listpack`
1615142418,13285,moticless,2024-05-26T09:32:45Z,Nice catch. Only now i reach to make another iteration to refine the logic around it. i will fix it. thanks.
1615142760,13285,moticless,2024-05-26T09:34:36Z,ok. The alternative is to send two commands of HSET & HPEXPIRE.
1615145996,13285,tezc,2024-05-26T09:53:24Z,"Sure. 

As you are aware of these changes now, shall we merge this one: https://github.com/redis/redis/pull/13291
"
1615180515,13285,moticless,2024-05-26T12:25:50Z,"You mean, if all the fields got expired then we can discard the entire hash in a single command? If that so, then we need to iterate to the end of the hash and only then to decide whether to re-iterate and send multiple commands or a single command?"
1615181282,13285,ronen-kalish,2024-05-26T12:29:25Z,"That is one option, but perhaps `hdel` can support deleting multiple keys, even if not the entire hash?
But even so, maybe you can add `hdel` commands on the go and if you find out all the fields were expired, you can remove the hdel commands and add a `del` command for the key?"
1615225328,13285,moticless,2024-05-26T15:30:39Z,Ok. I will mark it as TODO.
1615408187,13285,sundb,2024-05-27T02:27:55Z,"hash length of 1 is not just due to expiry, it can also caused by some buggy commands or corrupted data, i think we should treat them differently."
1615408576,13285,sundb,2024-05-27T02:28:51Z,"```suggestion
                /* Convert listpack to hash table without registering in global HFE DS
```"
1615814843,13285,sundb,2024-05-27T09:53:53Z,"i realize that we forget to check if `hashTypeLength(o, 0)` returns 0, in this case, we should skip it and replicate to slave like `hashmd`."
1615952114,13285,moticless,2024-05-27T11:57:18Z,"@sundb , I reviewed it again. I think it is harmless. Please review it. "
1615952976,13285,moticless,2024-05-27T11:58:03Z,adapted. Thanks.
1615954867,13285,moticless,2024-05-27T11:59:42Z,"Already have one. Please see `test ""HPEXPIRE(AT) - Test 'LT' flag ($type)""`"
1615960831,13285,moticless,2024-05-27T12:05:22Z,"Consider the case of `hincrby` of an expired field. It might increase an obsolete value. Alternatively, the command can implement the logic of checking if the field is expired and make lazy-expiration before using it. In that case, it is better to have a common logic, similar to `lookupKey()` wrt. to keyspace. So this way `hashTypeGetValue()` ended up. Please lmk if you have any comments.
"
1615968967,13285,moticless,2024-05-27T12:11:49Z,fixed. thanks.
1616124833,13285,tezc,2024-05-27T14:25:42Z,"Maybe you just need to two versions of `hashTypeGetValue()`. One might expire, other one doesn't. Call it depending on the use case. 

I just have one concern, it increases corner cases a lot. For example, currently, in hmgetCommand():

```c
void hmgetCommand(client *c) {
....

    addReplyArrayLen(c, c->argc-2);
    for (i = 2; i < c->argc; i++) {
        addHashFieldToReply(c, o, c->argv[i]->ptr);
    }
}
```
`addHashFieldToReply()` will call `hashTypeGetValue()`. It might expire the key itself. Then `o` will be dangling pointer in the loop. I see there is a similar problem for `hsetnxCommand()` as well. 

Maybe we should selectively call `hashTypeGetValue()` version that expires key. So, you caller knows the danger. 
"
1616125836,13285,tezc,2024-05-27T14:26:32Z,"```suggestion
            if (hi->expire_time != EB_EXPIRE_TIME_INVALID) {
```"
1616140847,13285,moticless,2024-05-27T14:40:16Z,Maybe just to propagate the `GetFieldRes` by function `addHashFieldToReply()` as well.
1616141435,13285,tezc,2024-05-27T14:40:46Z,"Just a note to all of us, maybe we can implement this logic with lpFindCb() in future to avoid performance cost of lpNext() calls. "
1616496999,13285,sundb,2024-05-28T02:09:03Z,"i still worried about wether this code will cause some performance problems, if we don't handle it in this PR, please add a note in the top comment to avoid forgetting it."
1616515101,13285,sundb,2024-05-28T02:48:18Z,"if i use `hexpire` command to create a hash with TTL fields, then operate the hash with `RM_HashSet`, will thia assertion be triggered?"
1616516017,13285,sundb,2024-05-28T02:49:47Z,what aboult making them in single `if`?
1616517168,13285,sundb,2024-05-28T02:52:22Z,"```suggestion
    GetFieldRes res = hashTypeGetValue(c->db,o,c->argv[2]->ptr,&vstr,&vlen,&value);
```"
1616520612,13285,sundb,2024-05-28T02:59:02Z,"this will create a empty hash if enter the `if` below:
```
    if ((incr < 0 && oldvalue < 0 && incr < (LLONG_MIN-oldvalue)) ||
        (incr > 0 && oldvalue > 0 && incr > (LLONG_MAX-oldvalue))) {
        addReplyError(c,""increment or decrement would overflow"");
        return;
    }
```"
1616520896,13285,sundb,2024-05-28T02:59:33Z,here is the same.
1616528594,13285,sundb,2024-05-28T03:15:55Z,"```suggestion
    for (i = 2; i < c->argc; i++) {
        res = addHashFieldToReply(c, o, c->argv[i]->ptr);

        /* If hash got lazy expired since all fields are expired (o is invalid),
         * then fill the rest with trivial nulls and return */
        if (res == GETF_EXPIRED_HASH) { 
            while (++i < c->argc)
                addReplyNull(c);
            return;
```"
1616531896,13285,sundb,2024-05-28T03:22:58Z,"```suggestion
        if (hashTypeDelete(o,c->argv[j]->ptr,1)) {
```"
1616532979,13285,sundb,2024-05-28T03:25:15Z,"```suggestion
    addReply(c, hashTypeExists(c->db,o,c->argv[2]->ptr,&isHashDeleted) ? shared.cone : shared.czero);
```"
1616538023,13285,sundb,2024-05-28T03:36:35Z,"yes, it's harmless but it's also NOP, we only do the `alsoPropagate` here, and we don't notify any event to module or process any other commands.
please point out if i'm wrong."
1616606974,13285,tezc,2024-05-28T05:28:46Z,"I just seems like most of the time we don't need to expire fields. So, I thought it might be simpler to avoid it as much as possible. Just consider if this is the case. "
1616671783,13285,tezc,2024-05-28T06:37:11Z,"Can it return here if oldvalue is zero though? 
It seems like, this logic was same even before this PR. I agree it looks a bit obsecure."
1616694111,13285,sundb,2024-05-28T06:57:16Z,"@tezc ohh, you're right, it won't enter the overflow when oldvalue is 0.
~~but it's still a bug that's been around for a while.~~"
1616733212,13285,moticless,2024-05-28T07:28:52Z,It can be invoked either by the activeExpireCycle() cron job or through an actual query from the client.
1616755188,13285,sundb,2024-05-28T07:45:47Z,"i can't reproduce it yet, mark as resolved."
1616760443,13285,moticless,2024-05-28T07:49:25Z,I think we shouldn't swip it under the rug. There is an added value that everything is one place and it is reflected in the API. Maybe we can have wrapper functions that simplifies it. Similar to the approach of `lookupKey()` family
1616764140,13285,sundb,2024-05-28T07:52:14Z,"OK, let's leave it as now."
1616790297,13285,tezc,2024-05-28T08:11:28Z,"Note: Later, maybe we can add a check to avoid creating these objects if we are not going to propagate anything. "
1616800286,13285,sundb,2024-05-28T08:18:40Z,"actually i also have the feeling as Ozan, if `o` is implicitly deleted in `hashTypeGetValue`, the caller will need to know the detail implement of `hashTypeGetValue` or need to read the comment for it, otherwise, it's dangerous."
1616831010,13285,moticless,2024-05-28T08:39:28Z,"Regarding this matter, I am seeking input from those experienced with modules:
- We likely need to pass the mode/flags of the opened key and respond appropriately.
- Should we update the opened key if the key was deleted due to last field expiration?

@MeirShpilraien, perhaps you can assist. Thanks."
1616873862,13285,moticless,2024-05-28T09:08:17Z,In this file there are more spaces after comma. Therefore I think we should strive to push spaces.... until we shall have  code styling convetnion.
1616877352,13285,sundb,2024-05-28T09:10:41Z,"we have two styles, a comma followed by a space, and one without, but not mixing the two styles in a function call looks miserable."
1618709765,13285,sundb,2024-05-29T11:20:32Z,"```suggestion
```"
1153582811,11982,siddhesh,2023-03-30T17:37:38Z,"The safe thing to do here might be to also update `RM_Alloc`, `RM_Calloc`, etc. to do an `extend_to_usable` so that only the usable size is seen at all times.

However, AFAICT the RedisModule functions don't show themselves as allocators (i.e. no `alloc_size` attribute) so they're unlikely to trip over this."
1155318646,11982,oranagra,2023-04-02T14:08:26Z,let's add a big comment here describing the problem and how it's solved.
1155320794,11982,oranagra,2023-04-02T14:21:58Z,"correct me if i'm wrong, since this function only takes `ptr` as input, and the caller doesn't use any returning pointer, then the compiler won't care about anything we do with the pointer here.

@siddhesh regarding your comment about RM_Alloc, these functions use functions that do have the attribute down the line, so in theory the compiler could have still kept track of the allocation size.
so what's preventing that is the fact that it's used in a different module, right?
i.e. if redis would have used RM_Alloc internally it will be vulnerable.

i agree, let's fox RM_Alloc and RM_Realloc and add the attribute to them, so that if the module uses RM_MallocUsableSize it'll be protected."
1155329177,11982,oranagra,2023-04-02T15:10:23Z,"that comment was a little bit unclear to me at first, so let me start from the beginning.

we currently have two patterns in the code:
1. calling a plain `zmalloc` or `zrealloc` and then calling `zmalloc_usable_size` and using that memory.
2. calling `zmalloc_usable` and using the size it returns.

most of the places can be converted to use approach [2] as you did, and we need to avoid using [1] if we can.
it would have been nice to completely obliterate zmalloc_usable_size, but since we can't we need to document that anyone who uses it needs to also call extend_to_usable manually.

let's document that in zmalloc.h, and also as you did here (no `todo:` though, and no zmalloc_usable_size_safe which i suggest to drop, see other comment)"
1155329580,11982,oranagra,2023-04-02T15:12:59Z,"we already have too many allocation functions, and i'd like to avoid adding the `safe` option.
what i'd suggest to do instead is:
1. rename the current `z[try]malloc_usable` family to `z[try]malloc_internal` and don't expose them to users outside zmalloc.c
2. expose a new set of `zmalloc_usable` family that use `zmalloc_internal` and `extend_to_usable` implicitly.
3. go over all the users of `zmalloc_usable_size` and convert them to use the `zmalloc_usable` family if possible (as i think you did).
4. drop `zmalloc_usable_size_safe`, i don't like to pass a reference to a pointer, don't know if the caller kept the original somewhere, i'd rather have the `malloc` or `realloc` approach that returns it."
1155330372,11982,oranagra,2023-04-02T15:18:27Z,"@sundb IMHO this is what we should do:
1. eliminate zmalloc_usable_size_safe (it's odd, and doesn't really help here).
2. add the malloc_size attribute to RM_Alloc and RM_Realloc, RM_TryAlloc, RM_Calloc
3. since we can't change the semantics of RM_MallocUsableSize and document how it should be used (i.e. together with extend_to_usable, what we should do is make sure RM_Alloc family uses extend_to_usable or better yet zmalloc_usable internally before returning the pointer to the module (and add some comment explaining it)"
1155687498,11982,oranagra,2023-04-03T09:07:26Z,"let's add a comment inside the implementation (of just this function) to explain why it uses zmalloc_usable and not a plain zmalloc (i.e. so that it's surely safe for modules to use the memory RM_MallocUsableSize tells them they can use.
let's also add a comment in RM_MallocUsableSize referring to this comment."
1155689607,11982,oranagra,2023-04-03T09:09:15Z,"let's give the module control this attribute from outside (if it'll ever be needed), by following the footsteps of REDISMODULE_ATTR_PRINTF"
1155711598,11982,oranagra,2023-04-03T09:28:41Z,"there's no point in calling extend_to_usable here.
we don't return the pointer to the caller."
1155718683,11982,oranagra,2023-04-03T09:34:56Z,"```suggestion
/* derived from https://github.com/systemd/systemd/pull/25688
 * We use zmalloc_usable_size() everywhere to use memory blocks, but that is an abuse since the
 * malloc_usable_size() isn't meant for this kind of use, it is for diagnostics only. That is also why the
 * behavior is flaky when built with _FORTIFY_SOURCE, the compiler can sense that we reach outside
 * the allocated block and SIGABRT.
 * We use a dummy allocator function to tell the compiler that the new size of ptr is newsize.
 * The implementation returns the pointer as is; the only reason for its existence is as a conduit for the
 * alloc_size attribute. This cannot be a static inline because gcc then loses the attributes on the function.
 * See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96503 */
```"
1155784044,11982,oranagra,2023-04-03T10:33:42Z,"i see you reverted all changes in listpack. 
don't we need to use zmalloc_usable in listpack_malloc.h (and some comment explaining it)?
i.e. same as we did in module.c"
1155844688,11982,sundb,2023-04-03T11:39:10Z,"Yes, because I made `zmalloc_usable_size()` safe, and I think `lp_malloc_size()` will be called much less frequently than malloc/realloc in listpack.
Do you mean we should avoid approach  [2] ultimately? I'll modify it, I need to benchmark them."
1155895107,11982,oranagra,2023-04-03T12:28:46Z,"i don't think you made it safe, see my comment https://github.com/redis/redis/pull/11982/files#r1155711598
i'm not sure we can use approach [2] in listpack, it would mean that listpack needs to save the size somewhere.
so i think listpack can keep using approach [1], but it still needs to make sure to use zmalloc_usable (a wrapper of it), or any other way so that the pointer it works with is one that was returned by the dummy realloc."
1155942606,11982,sundb,2023-04-03T13:10:02Z,Done with adding REDISMODULE_ATTR_ALLOC in https://github.com/redis/redis/pull/11982/commits/5a7c0153a017bac23cfeaf17d0918bcd7c91edbf#diff-26821aebe5bf67b83e43e39c63ad877ff6caa7b023e88712d5ab28463974542a
1155943243,11982,sundb,2023-04-03T13:10:36Z,Done
1155947122,11982,sundb,2023-04-03T13:13:58Z,Done in https://github.com/redis/redis/pull/11982/commits/c3b4c6f763abe800680801eb55a68680d6519bf4
1155957379,11982,siddhesh,2023-04-03T13:22:33Z,"Sorry I probably don't understand this change fully, but it looks like it exposes the allocator interface in modules as being standard allocators using `alloc_size`, is that correct?  If yes, then this may end up exposing the extra space usage problem to users of modules too, i.e. user applications may request `X` bytes and `RedisModule_MallocUsableSize` may return `X+n` bytes available, thus resulting in the breakage externally."
1155978319,11982,siddhesh,2023-04-03T13:38:52Z,This basically prevents the compiler from seeing the allocations altogether.
1155990710,11982,oranagra,2023-04-03T13:48:26Z,"```suggestion
     * to recognize the additional memory size, which makes means modules can
     * use the memory reported by 'RM_MallocUsableSize()' safely. */
```"
1155992769,11982,oranagra,2023-04-03T13:49:59Z,move this comment to inside the function (should not be part of the docs)
1155995650,11982,oranagra,2023-04-03T13:52:11Z,please figure out how standard this attribute is. and if standard enough let's remove the `__GNUC__` check (just use the `ifndef` so that users can override it from outside.
1156001734,11982,oranagra,2023-04-03T13:56:49Z,"i was thinking of a macro or an inline function that adds `NULL` so that we don't need to change the lines who call this.

another thing i was wondering was maybe to completely eliminate this file (i.e. now that listpack is just a plain part of redis, and not an external library, it can directly use zmalloc).
but then, maybe we won't have a good place to put this comment in, so maybe keep this file, but use the macro i suggested above?"
1156015161,11982,oranagra,2023-04-03T14:07:08Z,"ohh, you're right. for some reason i thought that since we change the implementation to use the dummy realloc, we can expose the alloc_size tip to the compiler, but that's actually wrong. i.e. when the module is compiled, the compiler isn't aware of what we did inside redis, and all it sees is the requested size, allowing it to do fortification which would break.
@sundb please drop these attributes.

i think we can keep the other change to module.c though, and use malloc_usable.
it would mean that for modules that are statically linked with redis (e.g. our TLS module), using RM_MallocUsableSize will be safe.

[edit] actually, maybe that's irrelevant since modules use the module API via a set of global variable function pointers?"
1156017121,11982,oranagra,2023-04-03T14:08:35Z,"actually, following the discussion in https://github.com/redis/redis/pull/11982#discussion_r1156015161, we must drop these attributes."
1156074582,11982,sundb,2023-04-03T14:51:20Z,"@siddhesh But we use `zmalloc_usable_internal()` internally, which uses these attributes, and the compiler ends up seeing the size that contains the extra memory, is there a problem with that?"
1156094928,11982,oranagra,2023-04-03T15:07:01Z,"this set of APIs internally call extend_to_usable, which will tell the compiler what's the right size.
adding the attribute here would mean the compiler sees the requested size rather than the allocated one."
1156103266,11982,sundb,2023-04-03T15:13:39Z,Done
1156103432,11982,sundb,2023-04-03T15:13:46Z,Done
1156103641,11982,sundb,2023-04-03T15:13:56Z,Done
1156136263,11982,siddhesh,2023-04-03T15:40:33Z,"Basically the allocated size (and the allocation itself) never really escapes these interfaces unless the functions get inlined (e.g. with LTO). As a result, fortification may not happen at all for calls to these functions if LTO is not enabled.

So it might make sense to also test with LTO to be sure that everything is covered."
1156221622,11982,oranagra,2023-04-03T16:58:28Z,"We do test with LTO nowadays (enabled for all out builds in our dev branch and next release, but not in the previous one, in which the problem was uncovered), but I don't think we have any CI that uses the latest compiler (the one in which the problem was uncovered).
Maybe we can add a CI job for that.

Regarding the actual change (dropping the attribute from the zmalloc interface), what do you suggest? Keeping it while the fix that uses the dummy realloc internal to it, would make the fix ineffective (the complier will see the requested size). So the only other option is for the code that uses the allocation to directly use the dummy realloc..

I think we can keep the current code, and maybe add CI with bleeding edge compiler."
1156303208,11982,siddhesh,2023-04-03T18:21:28Z,"> Keeping it while the fix that uses the dummy realloc internal to it, would make the fix ineffective (the complier will see the requested size). So the only other option is for the code that uses the allocation to directly use the dummy realloc.

Right, that's the only other option, which I reckon will increase the number of calls to the dummy allocator. I hope to get rid of that overhead in a future gcc and hopefully clang will fix that too."
1161588906,11982,oranagra,2023-04-10T09:43:40Z,"maybe that attribute should move to the public interface?
or maybe not because it'll mean we have to add it to several of them?
if we do that (move it), it'll also assist fortification without LTO.

i have a feeling we already discussed it, but wanted to raise it again."
1161611453,11982,sundb,2023-04-10T10:20:33Z,"Do you mean to add it to `z[*]_usable`? If so `extend_to_usable()` will be useless, the compiler will only see the size passed by `z[*]_usable`."
1161622245,11982,oranagra,2023-04-10T10:39:30Z,"no, i mean to add it to all the other zmalloc functions (excluding the `_usable` one)
i suppose that's more or less what happens today due to LTO (the compiler will see the attribute to the inner function)"
1161678136,11982,sundb,2023-04-10T12:23:05Z,"@oranagra Your question led me to a bug, in any case, `ztrymalloc_usable_internal()` should not be inlined anyway, otherwise alloc_size attribute will not work.
So the attribute of ztrymalloc_usable_internal should be moved outside."
1161690598,11982,sundb,2023-04-10T12:43:52Z,fully CI: https://github.com/sundb/redis/actions/runs/4657570856
1161766724,11982,oranagra,2023-04-10T14:27:22Z,"ok, great.. and the fact it exposed an warning is an indication that it works better...
i suppose that if we want better fortification we can also mark them as `noinline`, but i suppose it's better to just leave it for the compiler (once https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96503 will be solved).
i.e. unlike the case of `extend_to_usable` in which we must work around that bug.
so i suppose this is ready to be merged once your CI passes.
meanwhile, you can prepare the other PR with the extra CI and the compilation fixes.."
1161773556,11982,sundb,2023-04-10T14:35:33Z,"i'm not sure if noinline will bring performance impact, i need benchmark.
i'll do other thing."
1161828898,11982,oranagra,2023-04-10T15:39:14Z,"i don't think it'll bring any impact, but i suppose we shouldn't take any action here and just let the compiler do it's thing.
if the compiler is currently limited, let it be..
i assume by ""other thing"" you mean the CI PR... not any change to the code in this one.."
1650293296,13359,sundb,2024-06-24T03:33:36Z,"why it can't support non-x86?
it seems that gcc and clang are all support __builtin_popcountll()."
1650295441,13359,hanhui365,2024-06-24T03:39:20Z,"I'm not sure whether it can make performance boost on ARM or RISC-V,  i add macro just for safety. Is it a little bit aggressive to instead all origin algorithm?"
1650298954,13359,sundb,2024-06-24T03:47:18Z,"yes, we need more benchmark on all the architectures, we can replace the origin algorithm if it make performance boost in all architectures."
1650301097,13359,collinfunk,2024-06-24T03:52:33Z,I would trust GCC to use the fastest method. If the compiler is new enough to use __builtin_popcountll then it will use an instruction if possible. If not then it will use some optimized algorithm.
1765976679,13359,sundb,2024-09-19T01:18:56Z,"we need to align p to 8 bytes here.

```suggestion
    /* Count initial bytes not aligned to 64 bit. */
    while((unsigned long)p & 7 && count) {
        bits += bitsinbyte[*p++];
        count--;
    }
```"
1765978635,13359,sundb,2024-09-19T01:21:54Z,"```suggestion

#define ITER { \
        bits += __builtin_popcountll(*(uint64_t*)(p + i)); \
        i += 8; \
    }

    long i = 0;
    while (i + 4*8 <= count) {
        ITER ITER ITER ITER
    }
#undef ITER
```"
1766203487,13359,sundb,2024-09-19T05:58:02Z,"what about expand them directly? 
```suggestion
    /* Count bits 32 bytes at a time */ */
    while (i + 4*8 <= count) {
        bits += __builtin_popcountll(*(uint64_t*)(p + i));
        bits += __builtin_popcountll(*(uint64_t*)(p + i + 8));
        bits += __builtin_popcountll(*(uint64_t*)(p + i + 16));
        bits += __builtin_popcountll(*(uint64_t*)(p + i + 24));
        i += 32;
    }
```"
1767781866,13359,sundb,2024-09-20T00:48:06Z,"```suggestion
    /* Count bits 32 bytes at a time */
```"
1767782654,13359,sundb,2024-09-20T00:49:38Z,"```suggestion
    long i = 0;
    while (i + 4*8 <= count) {
```"
1768040327,13359,sundb,2024-09-20T06:11:30Z,"what about replacing it by using `#if defined(__x86_64__)`?
or as did in #13558, then put it in the config.h
```
#if (defined(__GNUC__) && __GNUC__ >= 7) || (defined(__clang__) && __clang_major__ >= 7)
#if defined(__x86_64__)
#define HLL_ENABLE_AVX2
#endif
#endif
```"
1768051739,13359,hanhui365,2024-09-20T06:25:24Z,"sure,  #13558 is a more accurate way. i will change like that."
1768070597,13359,sundb,2024-09-20T06:43:35Z,"```suggestion
long long redisPopcount(void *s, long count) {
#if defined(__x86_64__)
    if (likely(__builtin_cpu_supports(""popcnt"")))
        return redisPopcountHw(s, count); /* use popcnt instruction */
    else
#endif
        return redisPopcountSw(s, count); /* generic implementation */
}
```"
1768070757,13359,sundb,2024-09-20T06:43:46Z,"```suggestion
#if defined(__x86_64__)
```"
1768070972,13359,sundb,2024-09-20T06:43:56Z,"```suggestion
    while ((unsigned long)p & 7 && count) {
```"
1769873395,13359,oranagra,2024-09-22T07:01:41Z,"that's the same lookup table as below, let's share it.
maybe instead of introducing two different functions, this single function can have two branches.
IIUC it's the same algorithm, and the only difference is less loops using a specific instruction.."
1769895230,13359,oranagra,2024-09-22T07:07:25Z,"i don't think we need this one, i think we can rely on `__builtin_cpu_supports` (which i assume will be optimized at compile time in case the compiler is sure about the outcome).
maybe someone can validate that?"
1770345849,13359,sundb,2024-09-22T09:35:12Z,"> that's the same lookup table as below, let's share it. 

do agree.

> maybe instead of introducing two different functions, this single function can have two branches. IIUC it's the same algorithm, and the only difference is less loops using a specific instruction..

we have to have two functions, because we need `__builtin_cpu_supports()` to decide which one to use."
1770425236,13359,oranagra,2024-09-22T10:10:20Z,"we can do it in one function as well.
the optimized part can be an early exist that's inside an `if` and maybe an `#if`.
but since it's the same algorithm, and the same LUT, i think it'll be cleaner."
1770522341,13359,sundb,2024-09-22T10:57:05Z,done with [`7d0afe1` (#13359)](https://github.com/redis/redis/pull/13359/commits/7d0afe1e49e533b07f6736f536b81256af98ff91).
1770524926,13359,sundb,2024-09-22T11:11:37Z,@hanhui365 please take a look.
1770538384,13359,oranagra,2024-09-22T12:10:15Z,"by using an early exit flow in the optimal path, we can avoid indentation and blamelog changes to the existing lines."
1770550661,13359,sundb,2024-09-22T13:05:52Z,done with [`63ea2a2` (#13359)](https://github.com/redis/redis/pull/13359/commits/63ea2a2a37c7dd1785f70c54b539cc54f0f5fff0)
1770578554,13359,oranagra,2024-09-22T15:26:33Z,"maybe you already discussed it, i don't see it being mentioned.
why do we process more than one __builtin_popcountll in the loop?
trying to hit a SIMD optimization?"
1770579349,13359,oranagra,2024-09-22T15:30:50Z,"i.e. in the original code, i suppose we handled 28 bytes, in less than 28 operations, and avoided overflows in with bitmasks and shifts. but here it just looks like loop unrolling, into different variables and summing at the end, so i assume there's some intention here, lets mention it in the comment."
1770721447,13359,sundb,2024-09-23T02:27:21Z,"answer is here: https://danluu.com/assembly-intrinsics/
the bottom line is to reduce the latency caused by bits accumulation (it takes two instructions to add and assign), and to use `cnt` to avoid dependencies between the four lines of code."
1770732427,13359,hanhui365,2024-09-23T03:02:39Z,@sundb @oranagra agree. this way seems concise.
1770776720,13359,oranagra,2024-09-23T05:09:25Z,so maybe explain it in a short comment?
1770848322,13359,sundb,2024-09-23T06:53:12Z,@hanhui365 do you want me to do it?
1774763020,13359,hanhui365,2024-09-25T08:06:46Z,"sure, thanks, a bit busy these days"
1774766647,13359,sundb,2024-09-25T08:08:49Z,"@hanhui365 no matter, i had done it, please see if you have anything to add."
530571538,8094,filipecosta90,2020-11-25T18:29:37Z,"@yangbodong22011 isn't latitude related to height and longitude to width, as per: 
![image](https://user-images.githubusercontent.com/5832149/100267388-4153dd80-2f4b-11eb-9e7a-9d8c7008740f.png)

-----
On a second comment:
WDYT about fixing ( if you agree on the lat/long discussion above ) and replacing:
```
bounds[0] = longitude - rad_deg(height/EARTH_RADIUS_IN_METERS/cos(deg_rad(latitude)));
bounds[2] = longitude + rad_deg(height/EARTH_RADIUS_IN_METERS/cos(deg_rad(latitude)));
bounds[1] = latitude - rad_deg(width/EARTH_RADIUS_IN_METERS);
bounds[3] = latitude + rad_deg(width/EARTH_RADIUS_IN_METERS);
```

by:
```
const double long_delta = rad_deg(width/EARTH_RADIUS_IN_METERS/cos(deg_rad(latitude)));
const double lat_delta = rad_deg(height/EARTH_RADIUS_IN_METERS);
bounds[0] = longitude - long_delta;
bounds[2] = longitude + long_delta;
bounds[1] = latitude - lat_delta;
bounds[3] = latitude + lat_delta;
```
It will cut the computation by half on that function. PS (as a bonus): can we also ensure constant correcteness of  longitude,latitude,height, and width."
530572930,8094,filipecosta90,2020-11-25T18:32:25Z,"given that `geohashEstimateStepsByRadius` will return an higher number of steps for small distances, isn't it enough to use as input for `RECTANGLE_TYPE` the minimum of width and height?"
530597235,8094,madolson,2020-11-25T19:24:20Z,You can union these two so that it saves a little bit of memory. It'll fit in a cache line then.
530598402,8094,madolson,2020-11-25T19:26:37Z,"Since we are already introducing a new command. Maybe the one above it should be geobboxstore and this one is just geobbox? It's a little different from georadius, but it fits better with ZUNIONSTORE type commands. It should also probably have the use-memory flag, since it uses memory. "
530718188,8094,yangbodong22011,2020-11-26T01:12:09Z,"@filipecosta90 I agree with you. This is my mistake, thank you."
530731907,8094,yangbodong22011,2020-11-26T02:03:29Z,"I think the longest radius in RECTANGLE (or other shapes) should be chosen.

For example, width=200km, height=1km, if steps are calculated according to height, the black area will miss the search.

![image](https://user-images.githubusercontent.com/13137470/100299404-908f2200-2fce-11eb-8ba6-a7c6bdf758d9.png)
"
530988324,8094,filipecosta90,2020-11-26T12:14:31Z,"@yangbodong22011 if we look at the `geohashEstimateStepsByRadius()` code we see that the smaller the difference the larger the steps ( meaning precision ). If i understood correctly this function is not changing ranges of search but only increasing/decreasing precision based on distance. If we agree on that, then using the smallest distance should be enough. wdyt? 
```
/* This function is used in order to estimate the step (bits precision)
 * of the 9 search area boxes during radius queries. */
uint8_t geohashEstimateStepsByRadius(double range_meters, double lat) {
    if (range_meters == 0) return 26;
    int step = 1;
    while (range_meters < MERCATOR_MAX) {
        range_meters *= 2;
        step++;
    }
```"
531006011,8094,yangbodong22011,2020-11-26T12:47:20Z,"@filipecosta90 Let's focused on a case:

After compiling with the current code, execute the following command, can find the result
```
127.0.0.1:6379> GEOADD Sicily 12.75 37.00 ""test""
(integer) 1
127.0.0.1:6379> GEOBBOX Sicily 15 37 1 200 km WITHDIST
1) 1) ""test""
   2) ""199.8611""
127.0.0.1:6379>
```


Next modify the code, compile and restart redis

```
diff --git a/src/geohash_helper.c b/src/geohash_helper.c
index 297b1e362..59e42a4f3 100644
--- a/src/geohash_helper.c
+++ b/src/geohash_helper.c
@@ -136,7 +136,7 @@ GeoHashRadius geohashGetAreasByRadius(GeoShape *shape) {
     double longitude = shape->xy[0];
     double latitude = shape->xy[1];
     double radius_meters = shape->conversion * (shape->type == CIRCULAR_TYPE? shape->radius:
- sqrt(shape->width * shape->width + shape->height * shape->height));
+ shape->width> shape->height? shape->height: shape->width);
 

```

Execute the same query again:

```
127.0.0.1:6379> GEOBBOX Sicily 15 37 1 200 km WITHDIST
(empty list or set)
127.0.0.1:6379>
```
Will not find test"
532522217,8094,itamarhaber,2020-11-30T11:18:08Z,Needs to be updated.
532523159,8094,itamarhaber,2020-11-30T11:19:54Z,"Given that this performs radius and box search, it should be called something else, e.g. geoAppendIfWithinShape"
532526567,8094,itamarhaber,2020-11-30T11:26:12Z,Please add inline comment descriptions
533070386,8094,yangbodong22011,2020-12-01T04:46:36Z,"Thanks, already updated."
533071819,8094,yangbodong22011,2020-12-01T04:51:56Z,"@madolson Thanks for your review.
The `use-memory` flag has been added, and I think `georadius` and `georadiusbymember` are also needed, so I added it by the way.

About command name, I think using `_RO` at the end can be consistent with georadius, which is more user-friendly.  (geo's user)
@itamarhaber WDYT?"
533186385,8094,itamarhaber,2020-12-01T09:06:25Z,"Yeah, the _RO is what I'm thinking too despite the lack of beauty in it."
533747052,8094,oranagra,2020-12-01T21:55:47Z,"these commands with an optional STORE argument are causing a lot of pain (it's hard to flag them as write or read commands, and it's hard to extract the key names from the arguments).

i much rather find an opportunity to deprecate the existing ones (and SORT) and create new ones that are similar to SUNION/SUNIONSTORE (i.e. there are specific variants that are always store or non-store).

so while at that subject (of deprecating things), i would like to suggest the following:
* `GEOFIND src_key ...`
* `GEOFINDSTORE dest_key src_key ... [STOREDIST]`
the rest of the arguments for both are:
`longitude latitude width height m|km|ft|mi BOX|ROUND [BYMEMBER member] [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC]`

meaning:
1. we only have two commands, one that always stores, and one that never stores. instead of the 4 commands we already have, and the 4 we were going to add.
2. the store variant can either store the results, or the dist (same as the original commands had both STORE and STOREDIST arguments), but the key name is in a fixed position and easy to extract from the command arguments.
3. the commands have a BYMEMBER optional argument (instead of the specific command variant for that)
4. both commands take center long/lat and width/height, and the width/height can either define a rectangle, or an ellipse (or a circle if width==height).

@itamarhaber @yangbodong22011 @filipecosta90 if we can agree on that, we can summon others for additional discussion / approval.

(haven't yet reviewed the code, but i imagine all these commands are sharing a lot of the code anyway, so splitting them into different commands or unifying them doesn't matter much to the implementation)"
533835116,8094,madolson,2020-12-02T01:28:31Z,"+1 to deprecation and new command. 

However, shouldn't by member use the member instead of a provided lat/long? I also think it's worth separating out the notion of a circle and doing by radius. The last nit is that I would do geosearch instead, to me find just means find 1. 
```
GEOSEARCH key [frommember member] [fromloc long lat] [byradius radius unit] [bybox width height unit] [WITHCORD] [WITHDIST] [WITHASH] [COUNT count] [ASC|DESC]
```"
533871107,8094,yangbodong22011,2020-12-02T03:24:31Z,"Thanks for your suggestion, I agree with `GEOSEARCH` and `GEOSEARCHSTORE`:

```
GEOSEARCH key [frommember member] [fromloc long lat] [byradius radius unit] [bybox width height unit] [WITHCORD] [WITHDIST] [WITHASH] [COUNT count] [ASC|DESC]

GEOSEARCHSTORE dest_key src_key [frommember member] [fromloc long lat] [byradius radius unit] [bybox width height unit] [WITHCORD] [WITHDIST] [WITHASH] [COUNT count] [ASC|DESC] [STOREDIST]
```
ps：
- `frommember` and` fromloc` cannot exist at the same time and one must exist
- `byradius` and `bybox` are the same as above.
-  although new syntax has been added, we need to be compatible and reuse the previous code as much as possible."
533931341,8094,oranagra,2020-12-02T06:45:41Z,"sounds good to me. so if we go that way we don't have to support ellipse (single radius).
i guess we can add both horizontal and vertical radius, but i don't think that's needed.
also, this syntax allows extending it in the future, like supporting non-axis-aligned bounding box too."
533935182,8094,oranagra,2020-12-02T06:56:18Z,feels odd to have this discussion inside a PR review comment. i'll move it to the [issue](https://github.com/redis/redis/issues/4417#issuecomment-737034286) (which has more watchers too): 
535915218,8094,yangbodong22011,2020-12-04T08:19:35Z,GEOSEARCH/GEOSEARCHSTORE has been added.
535915875,8094,yangbodong22011,2020-12-04T08:20:51Z,"@itamarhaber Thanks, has been updated in GEOSEARCH/GEOSEARCHSTORE, please review when you have time"
537034312,8094,oranagra,2020-12-06T13:01:32Z,"considering the order or arguments in geohashGetDistanceIfInRadius (radius is last), i guess we want to move the `bounds` to be last (and maybe rename it to `rectangle` so it's clear what needs to be inside what)"
537034776,8094,oranagra,2020-12-06T13:03:52Z,"is this what you meant?
```suggestion
    if (x2 < bounds[0] || x1 > bounds[2] || y2 < bounds[1] || y1 > bounds[3]) return 0;
```"
537035335,8094,oranagra,2020-12-06T13:06:52Z,"this function needs to be renamed (no longer specific for ""radius"").
don't forget to edit the top comment too"
537040036,8094,oranagra,2020-12-06T13:33:34Z,"1. don't we need to use w/2 and h/2 (instead of full width and height)?
2. let's move the multiplication with shape->conversion to be done after in a separate line (will make it more readable)."
537040327,8094,oranagra,2020-12-06T13:35:10Z,"if i'm not mistaken the definition of ""radius"" here seems to be different compared to the one in geohashGetDistanceIfInRectangle.
i.e. is the circle is bound by the box, or the box bound by the circle? (which one is inside the other).
is that on purpose? (i didn't think much into it yet)"
537040973,8094,oranagra,2020-12-06T13:38:54Z,comment needs an update
537042701,8094,oranagra,2020-12-06T13:48:27Z,"these should probably not be called ""width"" and ""height"". at least in the case of circular, their's w/2 and h/2. which also indicates that in case of box you have a bug here (adding full width to the right and full width to the left)"
537044731,8094,oranagra,2020-12-06T13:59:46Z,"considering that this function can convert a box into a box. we better add some comment (here or at the top) that explains the complication (i suppose converting from meters to long/lat, but maybe that's not the whole story)."
537045769,8094,oranagra,2020-12-06T14:05:44Z,"why do we have both width and height and also bounds?
maybe i'm missing something, in which case it would better be described in a comment."
537046251,8094,oranagra,2020-12-06T14:08:06Z,"i would rather return a syntax error if `STORE` present in when GEOSEARCH is set.

p.s. please avoid line comments (`//`)"
537048573,8094,oranagra,2020-12-06T14:21:23Z,"this isn't enough. you'll only get here if you one one extra argument left to parse.
i.e. GEOSEARCHSTORE...STOREDIST won't work if STOREDIST is the last argument.
and also, you have an excess `i++` here.
i think it would be better to have the original ""store"" and ""storedist"" arguments be excluded when GEOSEARCH is set, and have a separate ""storedist"" case for the GEOSEARCH case."
537049286,8094,oranagra,2020-12-06T14:25:07Z,this is a bit confusing. maybe we better split this block into two blocks (one for FROMxxx and one for BYxxx)?
537052262,8094,oranagra,2020-12-06T14:41:41Z,"i think i would have rather to leave the original `extractDistanceOrReply` intact instead of what you did which was copy the majority of the code out of it (and repeat it 3 times), i suppose so that you can re-use just the conversion part for the 4th place.

i.e. i vote to restore the original extractDistanceOrReply (to be used in 3 places), and add a similar extractBoxOrReply (to be used once, and clear out some of the clutter from the ""bybox"" portion."
537270346,8094,oranagra,2020-12-07T06:55:39Z,"ohh, maybe i'm wrong. i thought x1,y1,x2,y2 define a second box (to be matched against `bounds`).
but that indeed doesn't make sense.
from your comment i understand that x1,y1 define the center of the box (or circle in the radius counterpart).
and that x2,y2 define the point to be searched.
please rename these and / or add comments to make it clear (in both radius and rectangle variants)"
537323168,8094,oranagra,2020-12-07T08:41:55Z,"considering that `bounds` is a cache, we can either completely eliminate it (whoever needs it can re-compute it on the spot, so that the GeoShape struct only contains the needed data to specify the shape.
i.e. having a cache is a redundant (duplicate) info that is hard to tell if updated or not.

or alternatively at least move it to serve the radius too.
but also, i don't like the fact it's an array of 4 elements (hard to tell which ones is x and which ones are y), so more comments are needed to document its purpose and meaning."
537324952,8094,oranagra,2020-12-07T08:44:47Z,"clarification, the reason i gave this comment is because of the `sqrt` above.
which computes a radius of a box that bounds the shape's box.
but maybe that sqrt was just a bug."
537510896,8094,oranagra,2020-12-07T13:36:50Z,"so this method returns the ""distance to be used"", and also optionally returns the raw data (raw radius and raw conversion)?
top comment needs to be updated.
i see we no longer used the output parameter, except for checking the error.
maybe it should be just that (and `int` return for success / failure)"
537513469,8094,oranagra,2020-12-07T13:40:39Z,"so this method returns the raw conversion factor in both the return value and output parameter?
i guess one of them can be removed (let's make it return an `int` for success / failure)
and a top comment is needed."
537516041,8094,oranagra,2020-12-07T13:44:27Z,"comment is outdated
```suggestion
#define GEOSEARCH (1<<3)        /* GEOSEARCH command variant (different arguments supported) */
```"
537517678,8094,oranagra,2020-12-07T13:46:52Z,i think i'd rather have a dedicated flag rather than rely on `RADIUS_NOSTORE`
537521266,8094,oranagra,2020-12-07T13:52:05Z,i think this won't be needed if we'll use a separate flag for the GEOSEARCHSTORE variant
537528924,8094,oranagra,2020-12-07T14:02:43Z,"this method now has a side effect that it writes into the `shape->bounds`.
maybe it should now be called `geohashCalculateAreasByShape` (i.e. ""calculate"" instead of ""get""). and/or at the very least mention it in the top comment.

p.s. i'm still not certain we need the `bounds` member in the shape at. why isn't it enough that it's here on the stack like it used to be?"
537531591,8094,oranagra,2020-12-07T14:06:23Z,"i'm not certain this is the right thing to do.
maybe we need an ""geohashEstimateStepsBy**Box**"" instead of convert our box to a circle?
can you look into that?

p.s. if we keep this, i think it'll look nicer if the conversion will be done in a separate line after the ternary operator."
537543278,8094,oranagra,2020-12-07T14:21:05Z,"something still doesn't feel right here.

the `geohashGetDistanceIfInRadius` makes sense, you get two points ""1"" and ""2"" to measure the distance between them, and return it only if smaller than a ""radius"" distance.

here we get two points (""1"" and ""2""), and i would imagine that also a width/2 and height/2, to return the the distance between the two points only if smaller than width/2 horizontally, and height/2 vertically.
but instead we get ""bounds"" which is a 4 element long / lat thing.

also, looking at `geohashBoundingBox` i see that `bounds` already has shape->xy embedded in it, so these are not just w/2 and h/2.

lastly, i remind you that our `bounds` is bloated (using a fake radius that's generated by max(w/2,h/2), so checking here against `bounds` is probably a bug.

my advise: this function should probably get width and height as input instead of bounds."
537999194,8094,yangbodong22011,2020-12-08T03:07:18Z,"thanks, already updated."
538000495,8094,yangbodong22011,2020-12-08T03:11:09Z,"all coordinates (x, y, bounds) are in long/lat
all distances (width, height, radius) are in meters.
If we use width and height as parameters, we need to recalculate the latitude and longitude (meters to degrees), to avoid calculation, we pass bounds."
538001805,8094,yangbodong22011,2020-12-08T03:14:43Z,"We use radius to determine the steps, which is an approximate interval of geohash, because we will search for 8 nearby areas, so max(w/2,h/2) is correct."
538187880,8094,oranagra,2020-12-08T09:45:23Z,"in some cases, maybe if the box is very long and narrow, maybe we can do better (maybe find a totally different number of steps (not even a 3x3 set, maybe a 2x6 set, or 2x8).
but i'm ok to overlook this for now."
538205044,8094,oranagra,2020-12-08T10:08:54Z,i would have negated this flag (i.e. call it `GEOSEARCHSTORE`)
538238044,8094,yangbodong22011,2020-12-08T10:52:09Z,"> i would have negated this flag (i.e. call it GEOSEARCHSTORE)

I will update to `GEOSEARCHSTORE`

> did you duplicate some of the GEORADIUS tests and changed them to use GEOSEARCH?

Yes, some tcl tests are done like this

> search for points that are outside a circle but inside a big that has similar ""radius""

yes, see `test {GEOSEARCH vs GEORADIUS}`

> trying to create odd box shapes (non square ones)

Not yet, I will add some tests.
"
538532631,8094,yangbodong22011,2020-12-08T15:58:06Z,"The geohashcalculateareasbyshapewgs84 function finally excludes areas that do not need to be searched.

```
/* Exclude the search areas that are useless. */
    if (steps >= 2) {
        if (area.latitude.min < min_lat) {
            GZERO(neighbors.south);
            GZERO(neighbors.south_west);
            GZERO(neighbors.south_east);
        }
...
```"
538591930,8094,oranagra,2020-12-08T16:50:19Z,"it excludes areas not covered by the radius we generated, but this radius is not optimal, so in practice it may include areas that are outside our box.
also IIUC this trick with radius can cause us to use non-optimal resolution and be inaccurate.
![image](https://user-images.githubusercontent.com/7045099/101514246-bd0b4c80-3985-11eb-8fb9-ea42bbc7843f.png)
in the above image, we could have been searching only in the 6 small light gray boxes.
but instead, we'll be searching in the 9 larger boxes, and skip the 5 on the top and right raw (so end up searching in the 4 large boxes on the bottom left (the majority of that area is outside the ideal search area (the one painted in light gray)"
538596018,8094,oranagra,2020-12-08T16:53:52Z,"also, i now realize that the way we converted the box to a circle isn't right (a bug):
![image](https://user-images.githubusercontent.com/7045099/101514963-808c2080-3986-11eb-93f7-7262d3a5ac7f.png)
seems that we need to call Pythagoras back to the game!"
539035344,8094,yangbodong22011,2020-12-09T06:09:05Z,"> but instead, we'll be searching in the 9 larger boxes, and skip the 5 on the top and right raw (so end up searching in the 4 large boxes on the bottom left (the majority of that area is outside the ideal search area (the one painted in light gray)

no, for the above picture, we will only search two boxes, the middle one and the one below it.
Notice:  we use box (min_lon, min_lat, max_lon, max_lat) to exclude the useless search area, instead of using the circle calculated by radius, so the 2 boxes in the lower left corner will also be excluded.


> also, i now realize that the way we converted the box to a circle isn't right (a bug):
seems that we need to call Pythagoras back to the game!

Currently max(w/2, h/2) is used, and because we will search 9 nearby areas, the current code is no problem, because the 9 areas must completely include the box, even if some areas are excluded by the box later , It has no effect."
539069608,8094,oranagra,2020-12-09T07:30:16Z,"@yangbodong22011 thank you. you're right in both cases.

I'm still feel a bit worried that some of the logic with the ""steps"" calculation can go wrong in some edge case due to the fact the radius is smaller than it should be, but i don't have any evidence for that.

Maybe one day we can write a fuzz tester that tests random points around the box corners (inside and outside) of that box, and places a box with random dimensions, and random locations on the glove to verify that it doesn't have bugs. But let's keep that for a separate PR.

Regardless I also still feel that it can be made more efficient (searching the 6 smaller gray boxes in my example rather than two larger ones. but also, let's keep that for some future date.

I think a comment is needed next to where we calculate the inaccurate radius to explain why it's safe, please add that."
539214922,8094,yangbodong22011,2020-12-09T11:08:01Z,@oranagra thanks，already updated.
539829299,8094,madolson,2020-12-10T04:05:35Z,"nitpick: ""exactly one of FROMMEMBER or FROMLOC can be specified for %s"" is slightly more concise.

It would also be nice to throw this exception when you provide both, as opposed to the syntax error you currently throw. "
539864239,8094,yangbodong22011,2020-12-10T05:53:03Z,"I mean FROMMEMBER and FORMLOC, they cannot exist at the same time, but one of them must exist.

Your suggestion is clearer and I have updated it, thanks."
673660440,2795,oranagra,2021-07-21T04:56:58Z,"we don't use line comments `//` in redis.
was gonna change the comment style, but i think it isn't really needed, so eliminated a few lines.
```suggestion
    for (int j = 3; j < c->argc; j++) {
```"
673664388,2795,oranagra,2021-07-21T05:09:13Z,"let's reply with syntax error if there are conflicting flags.
we can do that during parsing (the same way it is done in `parseExtendedStringArgumentsOrReply`), but i think this form of argument parsing and also of checking for conflicting flags is harder to follow.
i would suggest to copy the boilerplate from `zaddGenericCommand` (both the parsing and conflict checking), and put it into a parseExtendedExpireArguments**OrReply**.

note that only LT/GT are mutually exclusive with NX, but not with XX."
673669027,2795,oranagra,2021-07-21T05:23:29Z,"the docs say that `0` is returned when the key doesn't exist.
i suppose it makes sense to at least let the caller distinguish between non-existing key and a skipped operation due to flag.
one option could have been to return `-1` in these cases, but considering that this is inconsistent with the `-1` and `-2` values returned by the TTL command, maybe that's not a wise idea.

maybe like the linked issue asks for, we better add a way to just return the TTL.
it's true that the user can pipeline a TTL command right after this one, but i suppose it'll be more convenient to let them use this in one go.

I suggest to add a `GET` flag, which will change the return value from 0/1 to the same return value TTL command group has (see `ttlGenericCommand`). i.e. it would be relative/absolute and ms/sec depending on the EXPIRE variant that was used, and we'll have to also return -2 and -1 in the appropriate places.

p.s. another wild idea is to also support an INCR flag (for the non-absolute expire variants, when `basetime` is not 0), in which case we increment the existing expiration time (similarly to the ZADD feature)."
673691396,2795,oranagra,2021-07-21T06:21:35Z,"trying to follow the logic (maybe a comment is needed)...
if the key doesn't have expire time, it's as is it has an infinite expire time (expires in the far far future), we consider that as if our new expire time is **not** grater than that infinite number.
right?

p.s. we do have a test that covers that, right?"
673703243,2795,oranagra,2021-07-21T06:45:48Z,"so here, like in the GT case, we wanna consider non-volatile keys as having infinite expire time, right? so any expiration time would be less than infinite, in that case we probably wanna add an ` && current_expire != -1`.

I suppose your reasoning for not adding it was that `when` is surely positive (unix time), so if `current_expire` is -1, there's no need to check (any positive `when` is grater than `-1`, and thus should be aborted since it's not less than infinite).
But IIRC, in theory `when` can be negative at this stage, so what would happen is that instead of proceeding and deleting the non-volatile key after the `checkAlreadyExpired` check, we'll abort here .

let's add a test for that case."
673706061,2795,oranagra,2021-07-21T06:51:02Z,"i think all these tests would benefit from adding a check on the result of the TTL to check if the expiration time was modified and if the key exists.
i.e. not just verify the return value of the EXPIRE command.
in that case we wanna use very distinctive expiration times so that we don't have timing issues comparing them.
the above test could be ok (100 and 200 seconds).
so we can assert that the TTL is >50 <= 100
```suggestion
    test {EXPIRE with NX option on a key with ttl} {
        r SET foo bar EX 100
        assert_equal [r EXPIRE foo 200 NX] 0
        assert_range [r TTL foo] 50 100
    }
```"
673706909,2795,oranagra,2021-07-21T06:52:29Z,"to avoid timing issues, when we work with milliseconds, let's use values such as 200,000 (200 seconds)."
673735551,2795,sundb,2021-07-21T07:41:06Z,Would it be better to change it to `EXPIRE_*`? Like `ZADD_NX`.
673942782,2795,yoav-steinberg,2021-07-21T12:51:13Z,`FLAG_NO_FLAGS` is never used. Do we need it?
674118170,2795,sunng87,2021-07-21T15:58:34Z,updated to use it as initial value of `flags` following `t_string.c`
674125165,2795,sunng87,2021-07-21T16:04:12Z,"Yes and there is a test for this case: https://github.com/redis/redis/pull/2795/files#diff-791d7b1ec2ea62ae57b4b424a8c50b02736afa4a75c0c2ae38939031ee92cd2eR675

"
674126154,2795,sunng87,2021-07-21T16:04:57Z,Good catch
674541519,2795,sunng87,2021-07-22T06:52:13Z,I think these options are not frequently used like `SETNX` so use them as options can be sufficient. 
674604486,2795,oranagra,2021-07-22T08:38:17Z,"i think you may be missing the point, or maybe it's me..
i think the ask was for a better prefix to the defines rather than a generic ""FLAG""."
674606486,2795,oranagra,2021-07-22T08:41:10Z,i think that the `break` here should actually be returning a syntax error response and fail the command.
674614145,2795,sundb,2021-07-22T08:52:21Z,"Sorry, what I mean is prefix."
674879785,2795,sunng87,2021-07-22T14:53:21Z,I see :joy: 
675029946,2795,oranagra,2021-07-22T17:45:15Z,"i think that's a bad name for that flag.
it designates that there are no flags, not that there is on expire.
got also, being 0, it's not really a flag, and i think we actually don't need it.
just use hard coded 0 instead (for an integer named ""flags"" it's logical to just init to 0)"
675036960,2795,oranagra,2021-07-22T17:50:52Z,"```suggestion
        /* When current_expire -1, we consider it as infinite TTL,
         * But 'when' can still be negative at this point, so if there is
         * an expiry on the key and it's not less than current, we fail the GT. */
        if (current_expire != -1 && when >= current_expire) {
```"
675039163,2795,oranagra,2021-07-22T17:52:39Z,"```suggestion
        /* When current_expire -1, we consider it as infinite TTL,
           so expire command with gt always fail the LT. */
```"
675607186,2795,sunng87,2021-07-23T14:27:07Z,test case added 
675613106,2795,sunng87,2021-07-23T14:34:44Z,the check here is for `LT`. Perhaps it's a typo with `we fail the GT`?  So does the `LT` below.
675971439,2795,sunng87,2021-07-24T08:52:16Z,"I still suggest not to use the return value of `EXPIRE` commands for TTL. It introduces additional complexity for various clients to distinguish *return code* and *value* for this write operation, that defined by an optional flag. 

And also I think returning `0` makes sense for this new scenario. We can extend its meaning along with these new features. The `0` means nothing changed with this write operation, it can be a key not exist or the operation is skipped.
"
676110255,2795,oranagra,2021-07-25T08:47:11Z,yes. typo.
676110981,2795,oranagra,2021-07-25T08:52:36Z,"ok. we can stop here. already a big step forward.
GET and INCR arguments can be added later if we wish (nothing here that prevents that)"
676112488,2795,oranagra,2021-07-25T09:04:18Z,"since XX and GT/LT can come together, we may be doing `getExpire` twice.
i wanna suggest a small refactoring (conceptually, not in LOC), and do something like this:
```c
    if (flag) {
        current_expire = getExpire(c->db, key);
        if (flag & EXPIRE_XX) {
...
        }
        if (flag & EXPIRE_NX) {
...
        }
        if (flag & EXPIRE_GT) {
...
        }
        if (flag & EXPIRE_LT) {
...
        }
    }"
676112841,2795,oranagra,2021-07-25T09:07:27Z,"i think it'll be slightly more readable if we convert the constants that are in seconds to values in the range of `100`, and only use 100,000 for the ones that are in milliseconds.
```suggestion
        r SET foo bar EX 100
        assert_equal [r EXPIRE foo 200 NX] 0
        assert_range [r TTL foo] 50 100
```
same for the rest of the tests below."
676113997,2795,oranagra,2021-07-25T09:16:22Z,"i'm actually not sure if there's high value to test the P variants at all (considering they use common code).
instead (or in addition to), i'd maybe we can add one test that uses NX/XX/GT/LT on a key that's totally missing?
also kinda pointless since this code is unreachable today when the key is missing, but maybe it'll expose an issue when the code is changed one day."
676114186,2795,oranagra,2021-07-25T09:17:52Z,"the previous test has the same name, let's rename one of them, or both.
i.e. the first one is `EXPIRE with GT on a key with low ttl`
the second one is `EXPIRE with GT on a key with high ttl`
and we do have a test below that's `EXPIRE with GT option on a key without ttl`"
676114325,2795,oranagra,2021-07-25T09:19:18Z,"let's add a check for the resulting TTL (i.e. check that it's still non-volatile).
and also add the inverse test, that uses XX and LT and succeeds."
676115121,2795,oranagra,2021-07-25T09:25:55Z,"again, let's rename both tests, one saying `low ttl` and the other saying `high ttl`"
676115484,2795,oranagra,2021-07-25T09:28:52Z,maybe add the same thin on a non-volatile key?
676154815,2795,oranagra,2021-07-25T14:29:16Z,"```suggestion
                  addReply(c,shared.czero);
                  return;
```"
676154826,2795,oranagra,2021-07-25T14:29:25Z,"```suggestion
                addReply(c,shared.czero);
                return;
```"
676566534,2795,yossigo,2021-07-26T12:41:00Z,"```suggestion
 * - XX: set expiry only when the key has an existing expiry
```"
676566994,2795,yossigo,2021-07-26T12:41:38Z,"```suggestion
    while (j < c->argc) {
```"
676567977,2795,yossigo,2021-07-26T12:43:01Z,"```suggestion
 * Additional flags are supported and parsed via parseExtendedExpireArguments. */
```"
676568803,2795,yossigo,2021-07-26T12:44:10Z,"```suggestion
```"
676569121,2795,yossigo,2021-07-26T12:44:38Z,"```suggestion
              /* reply 0 when the key has no expiry */
```"
676569341,2795,yossigo,2021-07-26T12:44:59Z,"```suggestion
              /* reply 0 when the new expiry is not greater than current */
```"
676569592,2795,yossigo,2021-07-26T12:45:21Z,"```suggestion
            /* When current_expire is -1, we consider it as infinite TTL,
```"
676570679,2795,yossigo,2021-07-26T12:46:59Z,"```suggestion
            /* When current_expire is -1, we consider it as infinite TTL,
             * but 'when' can still be negative at this point, so if there is
```"
676571371,2795,yossigo,2021-07-26T12:47:55Z,"```suggestion
    test {EXPIRE with conflicting options} {
```"
676571716,2795,yossigo,2021-07-26T12:48:22Z,"```suggestion
    test {EXPIRE with conflicting options} {
```"
676571941,2795,yossigo,2021-07-26T12:48:39Z,"```suggestion
    test {EXPIRE with conflicting options} {
```"
676572290,2795,yossigo,2021-07-26T12:48:57Z,Same comment repeats a few times below.
676590777,2795,sunng87,2021-07-26T13:13:09Z,Fixed by add conflicting commands name to comments
512229173,7953,madolson,2020-10-26T19:54:28Z,+use-memory
512236928,7953,madolson,2020-10-26T20:09:03Z,"I don't think we got strong conensus on this, but I think you should be able to copy in cluster mode, you just can't copy between DBs. "
512390580,7953,swamp0407,2020-10-27T03:10:11Z,"thanks @madolson ! I've fixed the flag in the command. I also fixed the copy command a bit.

But the code doesn't pass the test.
What do I need to do to make sure my code passes the test?

Also, should I combine my commits into one?"
512412914,7953,madolson,2020-10-27T04:41:30Z,"This isn't the same as the syntax as well. You should also be looking for the keyword DB, so ""COPY key key2 DB 5 or something. This allows us to be more future proof in adding more arguments here. "
512413698,7953,madolson,2020-10-27T04:44:50Z,It would be nice to add a test for all the different types. You can use debug digest to validate that the key/values are the same. 
512543866,7953,oranagra,2020-10-27T09:42:46Z,"i guess `fast` should be removed? considering some types may require O(N) loops?

also, not sure about `@keyspace`
the only hint in the docs is:
```
 * 7) The non obvious ""keyspace"" category includes the commands
 *    that interact with keys without having anything to do with
 *    specific data structures, such as: DEL, RENAME, MOVE, SELECT,
 *    TYPE, EXPIRE*, PEXPIRE*, TTL, PTTL, ...
```
so maybe i'd consider COPY similar to BRPOPLPUSH?
i guess not (we should keep `@keyspace`), but wanted to raise this concern to see if anyone has any feedback."
513104491,7953,madolson,2020-10-28T00:10:36Z,lookupKeyRead
513107118,7953,madolson,2020-10-28T00:19:53Z,"A quicklist is a linked list of ziplists, which are binary blobs. You should be able to copy each blob and string them together in a quicklist, it'll probably be much faster than this.
"
513107755,7953,madolson,2020-10-28T00:22:04Z,"Same comment as before, ziplists are binary blocks in an allocation, you can just copy the whole thing. "
513109492,7953,madolson,2020-10-28T00:28:04Z,Would prefer to error instead of silently ignoring bad arguments. 
513111796,7953,madolson,2020-10-28T00:35:49Z,This shouldn't be possible? Would prefer to assert here. 
513113971,7953,madolson,2020-10-28T00:43:45Z,"I was going to suggest building a helper method for this that just adds an sds array directly without converting them to robjs. That would be nice, but streamAppendItem() is a sprawling function. You could also see if you can do the same optimization and just copy the list packs. "
513114156,7953,madolson,2020-10-28T00:44:23Z,Still needed?
513114908,7953,madolson,2020-10-28T00:47:18Z,"Not sure how I feel about this specifically, but we maybe should retain the LRU information. We could also document the fact we just don't do that. "
513115006,7953,madolson,2020-10-28T00:47:39Z,"Looks like the stream digest doesn't include consumer group information, probably worth expanding on that. "
513115169,7953,madolson,2020-10-28T00:48:27Z,"```
if (s->cgroups == NUL) return sobj;
```

Keeps the indentation down. "
513115805,7953,madolson,2020-10-28T00:50:38Z,"@guybe7 Do you agree that it makes sense to copy all of the consumer group information when we copy the stream. It seems weird to me, but it is metadata on the stream but also isn't directly data about the stream. Do you have any thoughts?"
513229028,7953,guybe7,2020-10-28T07:30:49Z,"@madolson yes, i think CGs and consumers should be copied as well... as i see it, COPY should provide a perfect copy of the key, i.e. executing the same command on both keys should have identical result"
513241438,7953,oranagra,2020-10-28T07:57:45Z,"i agree, let's avoid going over the individual elements and just run over the rax and copy the listpacks."
513242144,7953,oranagra,2020-10-28T07:59:08Z,"good idea about indentation.
just a nit pick about the `if`, i prefer actions that change the execution flow (goto, break, return), to be on a line of their own (unless they come in an heavily repeated pattern)"
513243110,7953,oranagra,2020-10-28T08:00:54Z,"actually, for some unclear reason, redis uses lookupKeyWrite when reading keys on behalf of a write operation. looking at sunionstore, this intent is clear.
see https://github.com/redis/redis/issues/7475"
513251181,7953,oranagra,2020-10-28T08:16:33Z,"we recently made an effort to replace many of the dbDelete+dbAdd pairs with setKey (see SUNIONSTORE and alike).
The difference is that `setKey` retains the LRU of the destination key.

However, my above note is actually unrelated since we're talking of the LRU of the source key.
from what i can tell, both MOVE and RENAME, retain the LRU of the source key, so i'm guessing COPY should do the same?

Or if we consider that a new object (unlike MOVE and RENAME), we should behave similarly to RESTORE REPLACE (create a fresh new key)?
or maybe this is in some way similar to SUNIONSTORE being called with one input (clones a set and keeps the destination LRU)?

@redis/core-team @guybe7 please share your thoughts. (i'm leaning towards the RESTORE REPLACE behavior)"
513253714,7953,oranagra,2020-10-28T08:21:00Z,"i'm not certain we want digest to include it.
there are commands that modify these which consider them metadata.
IIRC they do perform `dirty++` and are propagated to replicas and RDB/AOF, and only avoid doing signalModifyKey (invalidating WATCH), so maybe that means that they should indeed be in the digest.
@guybe7 anything to add?"
513431252,7953,guybe7,2020-10-28T13:14:21Z,since CGs go in the AOF and RDB i think they should be included in the digest
513436315,7953,guybe7,2020-10-28T13:21:36Z,"i vote for:
src's LRU should remain unchanged (like MOVE)
dst's LRU should be changed (like RESTORE REPLACE)"
517539725,7953,madolson,2020-11-04T18:15:05Z,I think we should keep @keyspace
517547039,7953,madolson,2020-11-04T18:28:03Z,"Ok, point taken, it's weird behavior but good to know. "
517606533,7953,oranagra,2020-11-04T20:17:26Z,"i recently remembered that zslInsert (used by zsetAdd) is more efficient when iterating on the list backwards: 
https://github.com/redis/redis/blob/f6546eff452e9868569610c797765db8f56763e3/src/rdb.c#L855-L861

it may be a topic for another PR to improved zslInsert, but maybe in the meanwhile we wanna run backwards here too (and put a comment saying why)?"
519180025,7953,oranagra,2020-11-07T13:55:33Z,"i don't like this intimate code that messes with the intset internals being in object.c
i.e. `intrev32ifbe(is->length)`

so i would have argued that this block should be promoted to some `intsetDup` function that will be implemented in intset.c and called here.
but in fact, there's simply a better, easier way to do do.

just call `intsetBlobLen` then malloc and memcpy the entire thing without bothering to understand what's inside."
519180150,7953,oranagra,2020-11-07T13:57:00Z,"i see you did this for ziplist, why didn't you do that for intset?"
519180405,7953,oranagra,2020-11-07T14:00:17Z,"it's a good idea to call dictExpand here too, so that it'll be created with the right size and not go though rehashing.
same in the other paces that we create a dict which we know it's final size"
519181300,7953,oranagra,2020-11-07T14:09:59Z,"i don't think we want to invent a new ""NODB"" error code.
probably best to reply with the same ""invalid DB index"" that's used in SELECT""

"
519264242,7953,oranagra,2020-11-08T06:43:41Z,"use `dictSize(d)` instead of `d->ht[0].size`. it's both nicer not to access the internals of the dict, but also more ""correct"" since if the source dict is in the process of rehashing, it's records are split between ht[0] and ht[1]."
519264632,7953,oranagra,2020-11-08T06:47:28Z,we should better use `dictExpand` here too (see that rdb.c does it also).
519264785,7953,oranagra,2020-11-08T06:49:25Z,"speaking of rdb.c, i see that rdb.c does this:
```
            znode = zslInsert(zs->zsl,score,sdsele);
            dictAdd(zs->dict,sdsele,&znode->score);
```
and you used `zsetAdd` which seems to be a top level function (used mainly for the command implementation: `zaddGenericCommand`)

i think it's better to use zslInsert and dictAdd directly in this case."
519266271,7953,oranagra,2020-11-08T07:07:26Z,"IIUC what this code does it:
1. create a NACK
2. insert it to the group and the consumer
3. if the group insertion failed (since the group already has one):
	1. delete the newly created nack
	2. locate the the group nack
	3. remove the newly added consumer nack
	4. add the group nack into the consumer.

to me this seems like a complicated and wrong approach, the more trivial one IMHO is:
1. search the group, if it already has one:
	1. add it to the consumer
2. else:
	1. create a new nack
	3. add to both the group and consumer

advantage:
- more logical approach IMHO (and probably shorter too)
- not allocating a nack just in order to free it soon.
- involves 3 rax searches max (1 find and 2 insertions), existing approach has 5 (2 insertions, find, removal and insertion)"
519395397,7953,oranagra,2020-11-08T13:12:02Z,"looking at your recent change, i don't think that's good.
the PEL record in the consumer is expected to be the same pointer as the one in the consumer group PEL.
i see your recent code just calls `raxTryInsert` and `raxInsert`, so if the same record exists in two consumers, one will be shared with the group, and the other one will not (memory leak later).

however, i see that raxTryInsert and raxInsert can return the existing pointer if there's a clash.
so you can use that.
this will mean that you'll have just two searches (not 3 as in my previous proposal), but only other hand you'll have excessive calls to malloc / free, i suppose that's not so bad, and the code will be cleaner."
519508119,7953,swamp0407,2020-11-09T01:18:41Z,"thanks @oranagra
I'm sorry but, I didn't understand exactly how to fix it, so I took a look at rdb.c to fix it.
Would this fix be a problem?"
519577644,7953,oranagra,2020-11-09T06:34:08Z,"@swamp0407 new code looks good. (being the same approach that rdb loading takes, it can't be wrong)
also, it seems i got confused, one nack record can't exist in two consumers."
520168967,7953,madolson,2020-11-09T22:45:04Z,Not used
520169025,7953,madolson,2020-11-09T22:45:10Z,Not used
520228768,7953,swamp0407,2020-11-10T01:31:17Z,done
520228802,7953,swamp0407,2020-11-10T01:31:23Z,done
520793610,7953,itamarhaber,2020-11-10T18:50:09Z,"Ref: the `REPLACE` logic in `RESTORE`

```suggestion
    if (delete && dbDelete(dst,newkey)) {
        notifyKeyspaceEvent(NOTIFY_GENERIC,""del"",c->argv[2],dst->id);
    }
```"
521337238,7953,oranagra,2020-11-11T12:52:53Z,"@itamarhaber are you sure?
the ""del"" notification in restore is only in case the new key is expired, and restore deleted the old key.
it's something i recently copied from EXPIREAT (when ttl is in the past).

in the case restore succeeds it only does:
```
    notifyKeyspaceEvent(NOTIFY_GENERIC,""restore"",key,c->db->id);
```

taking another example, SINTERSTORE it does:
```
   notifyKeyspaceEvent(NOTIFY_SET,""sinterstore"", dstkey,c->db->id);
```
or (only in case a key was deleted, and the stored key is empty):
```
   notifyKeyspaceEvent(NOTIFY_GENERIC,""del"", dstkey,c->db->id);
```

so i think in this case we just want the ""copy_to"" notification, not the ""del"" one
"
521417669,7953,itamarhaber,2020-11-11T14:59:57Z,@oranagra You are of course correct - the `del` isn't needed here.
521596422,7953,oranagra,2020-11-11T19:43:21Z,"this trick of using `selectDb` to check if the dbid is in range is not very good.
if we exit with syntax error on the next argument, the selected db remains the dest db.
either re-select the original db right away, or just match the dbid range manually."
507125314,7912,yossigo,2020-10-18T12:24:06Z,"We'll require to bump the version number here to maintain ABI compatibility, as modules compiled with an older `redismodule.h` will have a smaller `RedisModuleTypeMethods` and may end up with a junk pointer."
507132056,7912,yossigo,2020-10-18T12:43:23Z,I think this test might be flaky working at a byte level. I would consider allocating more substantial amount of memory in the test module (e.g. 500KB per entry or so) so it the effect would be more observable and robust.
507372648,7912,chenyang8094,2020-10-19T02:31:16Z,"Ok, thank you for your review. I added a v3 version of API, which included free_effort."
507378516,7912,chenyang8094,2020-10-19T02:39:21Z,"Yes, I directly refer to'lazyfree.tcl' and change the memory allocation amount to 100000, which has far exceeded LAZYFREE_THRESHOLD. At the same time, because of the'lazyfreed_objects' information, I can be sure that the memory of this module is lazyfreed"
514304716,7912,oranagra,2020-10-29T14:31:57Z,"maybe we want to let the module have access to the `mt` (`val`) too?
some modules may want to look into some variable they have there, and be forced to do RM_OpenKey for that.

another alternative is maybe pass a `RedisModuleKey` and then they can get the key name via RM_GetKeyNameFromModuleKey, and value via RM_ModuleTypeGetValue

what do you guys thing?"
514307922,7912,oranagra,2020-10-29T14:35:58Z,"how about something in these lines:
```suggestion
 * Return the current redis-server runtime value of REDISMODULE_TYPE_METHOD_VERSION.
 * You can use that when calling RM_CreateDataType to know which fields of
 * RedisModuleTypeMethods are gonna be supported and which will be ignored.
```"
514308729,7912,oranagra,2020-10-29T14:36:56Z,why did you move that away from the struct?
514708209,7912,chenyang8094,2020-10-30T02:13:39Z,"Because `#define REDISMODULE_CORE 1` is in server.h, as originally designed, I can't access `REDISMODULE_TYPE_METHOD_VERSION` in module.c . So I just moved it outside of the `REDISMODULE_CORE` macro and put it in as easy to see as possible."
514709823,7912,chenyang8094,2020-10-30T02:15:27Z,"Yes, Let me add."
514712554,7912,chenyang8094,2020-10-30T02:18:25Z,"Well, If necessary, I'd prefer to just pass `val` over because it's already there."
515587178,7912,oranagra,2020-11-01T07:30:17Z,"@guybe7 @MeirShpilraien @yossigo what do you think?
i suppose a void* value is consistent with other APIs:
```c
typedef void (*RedisModuleTypeDigestFunc)(RedisModuleDigest *digest, void *value);
typedef void (*RedisModuleTypeUnlinkFunc)(RedisModuleString *key, const void *value);
```

i'm ok with this, but i want to give it a bit more thought so that we don't regret it in the future.

The alternative of providing a `RedisModuleKey*` will let the user get the key name, value and also other things (like LRU) from it."
515592073,7912,yossigo,2020-11-01T09:25:49Z,"@oranagra I lean towards just passing the value, I don't see any real need to manipulate the key (after all it's getting unlinked) and it's more consistent with the other calls."
515593441,7912,oranagra,2020-11-01T09:39:43Z,"this `if` isn't really needed, (the struct we allocated on the stack always support them (otherwise it wouldn't have compiled 8-) .)
the reason i asked to add that API, so the module would be able to know if redis is gonna ignore it or not..

i don't have anything to say against this test (adds coverage for this API), but if someone would use this as an example, it may be misleading.

maybe change this `if` into one that returns an error and exists? (module load fails)"
515594011,7912,oranagra,2020-11-01T09:45:25Z,"```suggestion
 * * **free_effort**: A callback function pointer that used to determine whether the module's 
 *   memory needs to be lazy reclaimed. The module should return the complexity involved by
 *   freeing the value. for example: how many pointers are gonna be freed.
 * * **unlink**: A callback function pointer that used to notifies the module that the key has 
 *   been removed from the DB by redis, and may soon be freed by a background thread.
 * 
```"
515594210,7912,oranagra,2020-11-01T09:47:26Z,"this is a long loop, that can take a while to execute.
if we need it that long, maybe convert it to use a deferring client (pipeline)"
516044656,7912,chenyang8094,2020-11-02T15:19:54Z,"Ok, changed to pipeline."
516044938,7912,chenyang8094,2020-11-02T15:20:15Z,Updated.
516047237,7912,chenyang8094,2020-11-02T15:23:32Z,"Okay, it has been changed: when the redis runtime version is lower than the module version, the loading will fail."
519400486,7912,oranagra,2020-11-08T13:34:20Z,"i now realize that we're missing a call to moduleNotifyKeyUnlink here (better be done before calling `dictSetVal`).

which makes me wonder what else are we missing?"
520197405,7912,madolson,2020-11-09T23:57:42Z,"I see this is a direct translation from OS, but I think the notion of free_effort is unnecessary and confusing from a module context. I feel like a better callback would be, can_free_async(), which can make it's own decision about whether or not this is worth freeing async. "
520327174,7912,oranagra,2020-11-10T06:44:22Z,"@madolson what do you mean by ""OS""?
we're trying to match the effort to:
```
#define LAZYFREE_THRESHOLD 64
```
i think a name like `can_free_async` is misleading (it's possible that it ""can"" but better not do that). if we're seeking a boolean return, maybe a better name would be `should_free_async`.
but then if we some day let users control this constant via command or config, the modules will need to be able to query it.
i think returning the complexity (how many pointers you have to free, or how many loops you'll need to run) makes sense as a return value.
i suppose we better document that 0 indicate not to be released by a thread."
520371087,7912,madolson,2020-11-10T08:22:15Z,"Open source? I didn't know what to call none module redis code, redis core maybe?

I still think should free async makes a more sense. The lazy free estimate is an approximation for ""should we free this async"". A module doesn't need to make the same decision we do.

I also think we should never expose the lazy free effort as a parameter, without some type of conversion in between. You could be more explicit and pass the effort to the module callback function and it can choose if it wants to ignore it. I just think we should have more thoughtful apis. From an outside user it's very hard to understand."
