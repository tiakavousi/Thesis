repository,file_type,id,pr_number,text,manual_label
redis/redis,comments,1381397812,11695,"**updated pr with following changes:** * now using lsb for slot in the scan cursor. * caching current dictionary in the redis db to avoid crc hash calculation. * rebased on top of `unstable` and resolved some conflicts. **benchmarks** i ran some benchmarks on gets and sets the result is that this implementation and `unstable` branch look almost identical (sets are on the left, gets are on the right, branch is mentioned in the terminal prompt): ![a link] **commands that were used:** sets: `src/redis-benchmark -r 1000000000 -t set -n 100000000 -p 10` gets: `src/redis-benchmark -r 1000000000 -t get -n 10000000 -p 10` next i'm going to run more benchmarks, for other potentially affected commands as well, and will make some flamegraphs, but this looks promising.",0
redis/redis,comments,2014840953,13157,congratulations on destroying your reputation,1
redis/redis,comments,2023386885,13157,"a quick google search will yield a lot for and against points for copyleft licenses. i am not an expert in lgpl, and don't have a lot of experience, but there are a few people above who showed examples where copyleft is problematic. also, i am not really anti gpl, i believe that in certain areas it is a fine license, like in linux kernel for example. the whole questions, is about whose freedom you are fighting for, since any restriction to maintain a certain group freedom, restrict other groups freedoms. in this specific example you are advocating for positive freedom of the free software community, but what about businesses, what about people who want to make a derivative work and monetize it in the way they see fit. i am not saying i agree with them, but why should we take their freedom away just because we disagree on something. the whole point of freedom, is that everyone has it, not just a specific group. that's why i like bsd-0 clause license, it's simple, and have pretty much no restrictions at all. since any restriction, restricts someone's freedom by the definition of the word. i was never involved with redis (other than as a user), and is not wright for me to participate in the specific decision makings of the fork, and it's community. the only reason i posted my opinions above, is that this trend as a whole worries me. where a permissive license project goes to source available, and then a fork goes completely other way to copyleft. and a broader discussion of this trend was already started above by some people.",0
redis/redis,comments,971492177,9572,"but if you're ok with fixing the two bugs (better internal consistency in reids), i'm fine with that (since the change will only add some 2 lines to the code, no real complications). seems you misunderstand me :grinning_face_with_sweat: , i always believe we need fix bug completely or do nothing, and i prefer do nothing in the writable-replica case, but i'm ok with fix it completely. and, i still believe we should remove the writable-replica feature finally, all the use cases are abuse from my pov, i think writable-replica is a bug, at the beginning of redis born, redis doesn't have any protection on slave, i don't know why salvatore didn't fix it, but instead he develop it as a feature.",0
redis/redis,comments,1466213727,10515,"defrost? :grin: only fix merge conflicts and possibly address my own review comments, right?",0
redis/redis,comments,937705880,9601,"wow, i'm not a compiler dev either, but imho that optimization shouldn't exist. (instead if c++ devs want speed, they should switch to c!). anyway, i do agree we wanna avoid using undefined behavior, and that we want to use the sanitizer to help catch them. i just think that if we can make sure to define the behavior, or only use it when we know it's defined (and fall back to less efficient implementation otherwise), that's better in some of these cases (the ones which [a link] the code or make it less [a link]. **but i don't want to rely on specific flags that exist only in some compilers, and now i'm also paranoid about the fact that a compiler will decide to erase all the files on my disk [see below]. so at this point i'm not sure what to do, it seems my two desires collide.** [below] i.e. because if we do something that's undefined, then erasing all the files on the disk is a possible outcome. (if on some theoretical platform that would be the behavior, why not apply it for all). i know that's not the reason in the above link, but who knows what other interpretations of undefined behaviors exist...",0
redis/redis,comments,899461061,9356,"## benchmarks cluster of 3 nodes, no replicas, running locally on laptop. ### latency `redis-benchmark -p 30001 --cluster -t set,get -n 1000000 --threads 8 -p 100 -q` result: no significant difference compared to `unstable`. **[edit] i forgot to use -r here, so only one key was created. :-/ see new benchmark below!** ### memory `debug populate 1000000` on one of the cluster nodes. then `info memory`. | result | `used_memory_human` | |------|-----| | unstable | 116.37m | | this pr | 93.51m | | difference | 22.86m (20% save) | the keys generated by `debug populate` are on the form `key:nnnnnn`. with a longer common key prefix (10 bytes), the memory saving is around 18%. for long keys without a shared prefix, the saving is expected to be even higher but i haven't written any script for generating such data.",0
redis/redis,comments,65842924,2143,"warning: big follow-up reply below! yeah, as far as i know, there aren't any other options we accept but ignore. we could just keep a list of options to ignore to loop over if we remove things in the future. that is possible, but for loading saved ziplists, they should be re-added element-by-element instead of just restored in-place. re-adding ziplists element-by-element cleans up any internal node fragmentation from users inserting/deleting elements in the middle of the quicklist and breaking the internal maximum fill levels. yeah, there are, but there are also zmalloc return value checks in other places in the redis code, so i just kept the pattern alive (e.g. adlist.c). it's written to be a generic data structure, so if people redefine zmalloc to just malloc, it should still do the right thing. at some point i'm going to make all the redis data structures a reusable external library. :) that's a new one to me. i'd prefer to leave some static signal because compilers can generate better code when they know certain functions don't leave the file, and it's made to be reusable-outside-of-redis. we could label functions as redis_static then define redis_static to nothing for redis builds. we get a lot of crash reports with no symbols anyway (packagers manually stripping the binary?). everything is made to be generic and reusable, even if redis doesn't need some of the operations. if there's a shortcut to make ltrim usage quicker, we should certainly add it. :) yeah, that's just a design decision. i left them there for redundant type checking, but we could remove them completely. difficult to say. i could see it happening either way. it probably depends on usage patterns (append-only workload with heavy reads? best memory usage). there are more optimizations we could make to reduce fragmentation (pre-allocating ziplists up to 4k or 8k), but they may not be useful for everybody. removing the number of items _is_ possible now, but for another reason. the number of _items_ is actually a really bad measurement for ziplist performance. if we set a fixed limit of 80 items and people are inserting 5 mb images into a list, that's _really_ bad. if people are inserting only integers, that's also bad because we could still store more integers in one ziplist without impacting performance. commit [a link] adds the option to use dynamic ziplist length based on total ziplist _size_ instead of a maximum length. using a maximum size gives us _optimal_ pointer overhead reduction while also giving us _optimal_ speed due to ziplist reallocations. (the slowdown in large ziplists is because of memory reallocation, so forcing ziplists to remain small gives us better bounds on ziplist performance. also see [a link] so, we could modify the option in three ways: completely remove the option and just set a global default of 4k or 8k ziplist sizes, change the option to only allow selecting 4k, 8k, or 16k ziplist sizes, or leave it as-is where we can select ziplist sizes or ziplist length. it just depends on if we think letting people tune their sizes has any benefit. (we should probably rename the option too?) setting ziplist limits based on size instead of length _also_ protects us from users inserting large elements into a ziplist and causing the ziplist to grow too big. now, if someone inserts a large element, that element gets its own ziplist assigned and no other elements will insert to that ziplist. we automatically get protected from bad performance due to big elements. very observant! the first post had no performance testing. insert/delete performance testing is at [a link] i haven't done performance testing of just reads yet, but those should be very close to the linked list version. that certainly works! [larger sidenote: we should probably end up using a slightly better workflow. we currently have `unstable -> stable`, but we really need a few more steps [[this can also help fix the ""too many redis point releases"" or ""major new features in minor version numbers"" problem if we push proper maintenance releases (2.8.18.1, 2.8.18.2, etc) versus others]]. git workflows for public projects are solved problems we don't have to re-invent. see things like [a link] â€” i have an entire local 'pu' branch (not public yet, but soon) that has about 40 commits from public prs waiting for official approval. we have too many proposed things that nobody gets around to testing/using, and since nobody tests or uses them, they never get approved, so it's a cycle. ""unstable"" is actually _too_ stable! :)] pluggable, key/value metadata rdb format, right? :) great to hear! it sure broke a lot while being written. most of the code tests run in a loop covering all the different edge cases for ziplist sizes too which helps a lot. yay! deleting in the middle of large lists is probably the biggest speed-up compared to linked list. oh, i hadn't even considered that. it'll help a lot with large lists in clusters during slot moving. good point. i'll look into adding it (the quicklist node count is just quicklist->len; we could also dump the individual ziplist info (byte size and element count) in debug output too). thanks for all the notes! so, what's remaining: - rdb format upgrade - save ql as series of zls - restore ql by appending zl elements (`quicklistappendvaluesfromziplist()`) - add ql-specific debug info - move existing list `list-max-ziplist-value` option to new ""ignore"" section of config parsing - maybe rename `list-max-ziplist-entries` (or remove it entirely and just set default ziplist size to 4k or 8k) - investigate if `quicklistdelrange()` can take a faster ltrim shortcut. - maybe rename static functions to redis_static and set redis_static="""" during build",1
redis/redis,comments,2362572563,13359,"yes, but this is all at compile phase, not runtime. `__has_builtin` is only used to check whether the compiler supports `__builtin_popcount`, and has nothing to do with the popcnt instruction. but we now enforce the popcnt target, telling the compiler to use `popcnt` anyway instead of the expensive builtin. :smiling_face_with_tear: at runtime, the cpu can no longer do the replacement operation, maybe we can test it by using `qemu`.",0
redis/redis,review_comments,687998750,9323,"you're referring to graceful restart, right? (not a crash recovery) see the comment i posted in [a link] i think maybe that can solve both of your problems, and also get you faster startup time. i don't like the idea of matching replicaof commands and looking at their args. i do like to solve this problem for graceful restarts, even when aof is configured. p. s. there is some [a link] about annotating aof, but i still think it's not much good for graceful restarts, only crash recovery.",-1
redis/redis,review_comments,756096913,9572,"i think this looks better. i also dislike indenting to a specific offset since it'll need to get adjusted if any other argument is added or the function renamed. so if i had to indent it, i would just indent it by 4 [code block]",0
redis/redis,review_comments,1133306680,10515,"ok, the globals are messy in this file. leave it then. :+1:",0
redis/redis,review_comments,993622907,11290,"personally, i think this word wrap that took two extra lines is uncalled for. i don't really mind, but just curious: do you really have a monitor that's that narrow, or is your editor misleading you?",0
redis/redis,review_comments,1048585547,11248,"neat! but again, maybe we can incrementally release the pages? i guess that in this case it doesn't matter much since we had to accumulate the whole rdb file in the page cache anyway (unlike a persistence save, in which we can avoid that buildup), so it might not matter if we release it incrementally or in one go?",0
redis/redis,review_comments,20661337,2143,i see. i just rechecked my config and it turns out for some reason it complained on column 79 instead of 80 -_-,0
redis/redis,review_comments,20761484,2143,forget to free new_node :),0
redis/redis,review_comments,1615952114,13285,", i reviewed it again. i think it is harmless. please review it.",0
redis/redis,reviews,1840137840,12822,"i feel like the refactoring has grown on me, i didn't like it originally but i kind of like it now.",0
redis/redis,reviews,1958449172,13169,lgtm solid stuff,1
apache/kafka,comments,331024201,3874,"sure. i am trying my best to address commands and add test. can you tell me the deadline for getting this patch committed and pass system tests if we were to include it in 1.0 release? btw, i am flying to shanghai and will be on vacation 9/21 - 10/16. my response maybe a bit delayed due to the flight and various errand. admittedly it makes it harder for me to focus on the patch and the test. i will do best effort.",0
apache/kafka,comments,482606869,5527,"hi all - i'm at a point where i need some feedback on a couple of things: 1) the organization of the code 2) the organization of the graph nodes in ktableimpl 3) insights into why i am getting nullpointerexception in ktablektableforeignkeyinnerjoinmultiintegrationtest (though not consistently). i believe this is a misunderstanding on my part as to how partitions are co-partitioned, but there may be more to it that i am missing. basically, it seems that depending on how the tasks and partitions are assigned, we either get a `java.lang.nullpointerexception: task was unexpectedly missing for partition table1-1` or it we don't. **this must be resolved if we wish to have flexible partition counts for joining, ie: fk join a topic with 3 partitions and a topic with 7 partitions** 4) anything else. feedback is very much appreciated, as this is the first pr i've put up against kafka and i'm sure i've violated a number of things.",1
apache/kafka,comments,416341868,5567,"note: both builds passed, but jenkins got rate-limited trying to report it to github. and i'm just now wondering... if jenkins failed to report the job status to github... why do we see the status here on github? o_o",0
apache/kafka,comments,261693933,2140,"wow, a 5000 line change... i'll take a look this weekend...",-1
apache/kafka,review_comments,139199834,3874,i assume this is not intentional :),0
apache/kafka,review_comments,1349343753,14406,you didn't see that i got fed up and changed the name of `defaultbackgroundthread` to `consumernetworkthread` :grinning_squinting_face:,0
apache/kafka,review_comments,284920787,6363,"not a bad idea. but at the moment, i'd suggest taking improvements on this code in a separate pr",-1
apache/kafka,review_comments,95488513,2264,"well, the `arraylist` array would expand to 10 elements the first time an aborted send is added. and then, it will probably never grow beyond that. linkedlist in java is just not a very good collection in general. each node has 3 references and there is a node instance per item. a funny tweet by joshua bloch: "" does anyone actually use linkedlist? i wrote it, and i never use it."" [a link]",0
apache/kafka,review_comments,651336157,9944,i think this inconsistency existed before i touched the code. :grinning_face_with_sweat:,0
apache/kafka,review_comments,1149655641,13443,oh! i wasn't sure if it was possible but i just designed the algorithm for all sorts of metadata changes. we could remove it and maybe if/when the removal of partitions is possible we can add it back. removed the code and the test case for now,0
apache/kafka,review_comments,631327191,6592,"well, it's not at the end of the file right? but if you'd prefer to keep it that's fine too, was just a ""super nit"" suggestion :slightly_smiling_face:",0
apache/kafka,review_comments,744906035,11331,i have a test where this happens. :grinning_face_with_sweat:,0
apache/kafka,review_comments,745864456,11331,unless you are referring to the sessiontopicnames line. :grinning_face_with_sweat:,0
apache/kafka,review_comments,746785542,11331,i copied this from the test above. :grinning_face_with_sweat: wasn't sure if we wanted consistency amongst the tests.,0
apache/kafka,review_comments,284900808,6295,"i think optional is supposed to be used only within the context of the java 8 streams api. it's not unusual to return nulls in java, nor in this code base. (though coming from scala this hurts a bit :grinning_face_with_smiling_eyes:)",0
apache/kafka,review_comments,284952693,6295,"this is just a convenience method, but i believe it is worthwhile. otherwise it is a bit cumbersome to recreate externally: [code block]",0
apache/kafka,review_comments,1380393617,14690,that's ok. i was just asking an innocent question. makes sense to me.,0
apache/kafka,review_comments,1392830639,14690,"those kinds of things tend to jump out in _other people's_ code, but i frequently miss them in my own :grinning_face_with_smiling_eyes:",0
apache/kafka,review_comments,329290382,7170,"while i agree that immutability is great, i am wondering about consistency. the other configuration classes are mutable. do we think that might be of any concern? should we just update all other configuration classes an make them immutable, too? (of course not in this pr...) \cc",0
apache/kafka,review_comments,463076565,9039,"updated above! changed to `prevrightwindowpossible` , lmk if that still seems confusing. i definitely kept getting them all mixed up so i think this will help",0
apache/kafka,review_comments,1330480862,14364,i've seen it in quite a few places so i thought we don't have a conventions :grinning_face_with_sweat:,0
apache/kafka,review_comments,1812137033,17373,"yes, exactly. `reconfigure()` provides a more convenient way to hot reload log4j configurations. :grinning_cat:",0
apache/kafka,review_comments,1204493167,13639,i slowly figured this out as i read the pr. :grinning_face_with_sweat: did we also say earlier we were changing the record names?,0
apache/kafka,review_comments,182916817,4812,"i guess my previous comment was a bit misleading :p actually i'm not against the `commonstreamsmetrics` and `threadmetricsconventions` classes, but i think we could have one such class for each different layer than having a `common` class, for the reason i mentioned before. but since you have removed it i'm also fine with passing along the sensors as well. we can consider which one is better in the near future and if we can do another code refactoring, but let's not block on this pr for too long.",0
apache/kafka,review_comments,95855842,2074,"haha, i'm not sure whether we're saying the same thing. my suggestion was to blindly treat the exception as a top-level error. in other words, take the error code from the exception and use it as the top-level error code for new versions, and as the partition-level error code for old versions.",0
apache/kafka,review_comments,670309425,10851,"as far as i can see, we would iterate only over the active tasks in both cases. the difference is that in case we have one loop and in the other we have two nested loops. in the nested loop case, the code in the innermost loop is executed the same number of times as in the one loop case. that is, as many times as the number of active tasks. in general, i would not change too much code for a performance improvement before we hit a performance issue. you know, as donald e. knuth stated ""premature optimization is the root of all evil"". :slightly_smiling_face:",0
apache/kafka,review_comments,1142787356,13391,i guess i was considering more than one send thread :grinning_face_with_sweat: i guess we don't have that now.,0
apache/kafka,review_comments,1164431328,13391,i asked to just assume one callback earlier but i was told we should just implement this now :grinning_face_with_sweat: (thread here [a link] i'm not sure i follow which scenario is inaccurate?,0
apache/kafka,review_comments,655749684,10822,"i kinda agree with you but i had seen this code in below two links and it had try/catch around both starttask and startconnector . i added try/catch around starttask so if one tasks fails we can see if others atleasst succeed. the try/catch around startconnector was because i saw the pattern. but i am torn on this, if you think we should remove the try/catch on connector, i am open to removing the try/catch given its already caught at the higher layer, but imho we can keep the starttask try/catch. wdyt? [a link] [a link]",0
apache/kafka,reviews,13025476,2244,this is a partial review -- it's a huge pr. will continue tomorrow.,0
elementary/terminal,comments,1696155777,737,i'll have another look tomorrow - i've been down enough rabbit holes and followed enough red herrings today :stuck_out_tongue_closed_eyes:,0
elementary/terminal,comments,536295621,386,i was aware of possible problems caused by scrolling/resizing but wanted to get a basic solution working first. i am beginning to think that the simplest solution to making terminal behave more like a text view is to have a hidden text view behind it and process all the text there!,0
elementary/terminal,comments,2182392701,760,"outstanding issue is a transparent gap between the tab bar and the header bar through which the desktop shows: ![a link] this occurs on x and on wayland, but does not occur in files and code which have very similar widgets. is this a styling issue or a difference in coding that i can't see?",0
elementary/terminal,comments,572061857,265,oh and on more thing (you guys might have already figured out) opening from a file does not open a duplicate tab but instead opens a tab at home: first tab opened at correct location: ![a link] second tab opened at home: ![a link],0
elementary/terminal,comments,852044412,590,"tbh i intentionally left that out because i haven't used async in vala before. it works a bit different than in python, js or rust, the languages i happen to know :d i am only in the community slack. i suppose there is another one, but i am not part of it. so i couldn't see you comment.",0
elementary/terminal,comments,516073150,391,"itâ€™s _almost_ like this is a draft pr to experiment with things! :winking_face_with_tongue: yes, there are a lot of implications and weâ€™ll need to decide what the scope is. iâ€™m just pushing this up here in a draft pr instead of keeping it to myself on my machine.",0
elementary/terminal,comments,564227531,432,shorter copy: ![a link],0
elementary/terminal,comments,727235003,547,"hm, gtk.eventcontrollerkey could be useful in other projects (e.g. files) as well i think :thinking:",0
elementary/terminal,reviews,2133409334,760,it looks like zoom controls are broken with this branch: ![a link],0
audacity/audacity,comments,833911364,835,"some users are going to be upset if you merge any form of telemetry whatsoever. personally, my respect for audacity would increase if you really take the feedback here to heart, put in the work to switch to a self-hosted server, and work with us to make the gui design very specific and clear so users can easily make informed decisions about their privacy. i think you will get more complete and useful data if users feel they can trust you with it. edit: my [a link].",0
audacity/audacity,comments,833983858,835,"i second this. it is a thing, but google is heavily involved with the project, but i am not sure if it's actually a google project: [a link] also: [a link]",0
audacity/audacity,comments,833984854,835,:bread: :dashing_away:,0
audacity/audacity,comments,833998003,835,"i think we do. if this is merged i don't know that i can trust the audacity team anymore. and i don't think anyone else should either. the privacy of their users and the backlash that this is getting should be strongly considered. if this is merged i will no longer be using audacity. i will no longer be installing it on my own machines or the machines of any company whose infra i manage, now and in the future. we have enough stuff that is watching us and listening to us already. i don't need my audio editor added to the list. privacy is a human right. involving google or yandex in the use of a piece of software like this is completely uncalled for. i was legitimately excited when i heard muse group was getting involved in audacity. i see my excitement was misplaced.",0
audacity/audacity,comments,834095687,835,yikes,0
audacity/audacity,comments,834222459,835,"that isn't software engineering. that isn't computer science. it's computer industry. your peers can enjoy it, but i'd hope you reasonably want no part of it, and certainly nor do the rest of us.",0
audacity/audacity,comments,834228086,835,"btw ardour is free open source, has no tracking, and still manages to fund its self. btw its also got 90% of the features of audacity, and is a viable exit strategy for many. * cough * [a link] * cough *",0
audacity/audacity,comments,834253599,835,"umpteenth user chiming in: the issue is not telemetry, it's the provider used. i am happy to provide telemetry data, so long as the telemetry infrastructure is open source and hosted by audacity. a black box is unacceptable in free and open-source software.",0
audacity/audacity,comments,834471986,835,waiting for a fork to come up :trollface:,0
audacity/audacity,comments,834728848,835,"... some people actually do care, and things can change. to think otherwise is feed into complacency. what people do and say matters. (if all this is for not, then what is the point of the pr -- or this dialog -- in the first place; just merge and be done with it). no, i'm calling it opt-out because it, in-fact, requires end users to ""opt out"" (the shinny blue default button in the mockup ;) , aside from the other comments about config defaulting) ... if the opt-out model sounds worse to you, that is inferred. would things change so much if users were required to check a box to **enable** telemetry; perhaps with the same catchy rationale above it? ... yes, it would, because most users will not read the message, and as a consequence, telemetry would not be collected. the whole point of defaulting **on** is to collect information from those uses who indifferent, not paying attention, or are uninformed. i think it is more appropriate, and in better taste, to produce software in an ethical manner and air on the side of caution for people who might not know any better, then it is to aggregate metrics. (... a different way of saying it, with using that other phrase ...)",0
audacity/audacity,comments,838826849,835,"there's lots of virtue signalling in the comments, unfortunately. this pr introduces a full network stack into an application that successfully managed without one for over 20 years. thus introducing one really should have a very good reason and given the expected overall quality of the collected information the data ain't the compelling reason in this matter. there are simply too many threads attached that negatively affect the quality of the collected data, thus there's much easier and worthwhile methods to produce even better statistics to base your decisions on. remains the part regarding crash reports: one of the few points that i agree. unfortunately even here you don't really need to introduce networking into the core application. to give one example: `htop` simply gives a backtrace, some basic information required for a bug report and instruction how to help to make the backtrace more informative (basically: how you call `objdump` - or its equivalent - on your platform so you can attach that file to the bug report). this gives the option for the user to opt-in sending the bug report and still manages to respect the freedom of the user to not being tracked by the application. if you want to make it more friendly for beginners you could even use a separate application that pops up just when the main application crashed (like firefox and several other tools do), but even then the main application does not need any linkage to any networking stack. and fwiw: the information that `htop` asks the user to provide usually helps to pin down the exact line of the crash within about 20 minutes, even when handling the `objdump` file by hand. could be more convenient to do, but the fact is, that the actual bug reporting can and should be fully offline.",0
audacity/audacity,comments,838860677,835,seriously please close this pr. i think most of the possible arguments against this have already been established and i hope all the team work in favor of the comunity,0
audacity/audacity,comments,1192457464,3176,"oh my, how did i overlook that? good point: if lib-components should only use wxbase, then the defaulteffectuivalidator subclass should also be moved somewhere else, into audacity. however, actually lib-components and effectuiclientinterface is still a somewhat confused and confusing piece of the legacy code. there used to be several other badly named interface classes with unclear purpose that i figured out how to eliminate in this release. effectuiclientinterface is still one of those unsatisfying ones i haven't figured out how to clean up just yet.",-1
audacity/audacity,comments,853029046,830,"-licameli rebased commit at recent upstream master branch. tbh, i'm not fully satisfied with cla. but i belive that commercial profit and support can boost imporvement on oss. so i signed at the cla anyway. i just wish audacity would remain free, open and be **much greater** than now. :grinning_face:",0
audacity/audacity,comments,861609491,830,"![a link] â†‘ in development screenshot, left: light theme, right: dark theme fortunately, it seems like the fix is not hard to implement. i'll push commit after some cleanup in couple of days. for now, i have to sleep:sleeping_face: to adjust color and transparency of clock overlay, we need to edit theme image. i won't do this. i think the clock should be gray, 50% transparent.",0
audacity/audacity,comments,1143722455,2941,oh i see what you mean now - i was looking at the dialog not the menu: ![a link],0
audacity/audacity,comments,1734999390,5239,"i see there's a shortcut to rename clips, i'm jealous `:p` could we get one for speed changes, too? not necessarily in this pr, although that'd be convenient for testing.",0
audacity/audacity,review_comments,1137441222,4414,that you for figuring out and reapplying the registry system. how would you rate your first experience? - [ ] :expressionless_face: - [ ] :face_with_rolling_eyes: - [ ] :yawning_face: - [ ] :exploding_head: - [ ] :star-struck: - [ ] :face_vomiting:,0
audacity/audacity,review_comments,1437605887,5791,that's an outdated comment - thanks.,1
audacity/audacity,review_comments,1299968117,5041,"right. i did not a good job with my interactive rebase for this part. i may mistakenly have attempted to re-order and squash the ""wavechannelview clean-up ..."" into ""make waveform display work again"", but actually it should have been squashed into ""spectrum display ..."" (and then squashing that into ""make waveform display work again"" as you suggested). i don't mind doing it, but is now a good time, since you've reviewed this already?",0
audacity/audacity,review_comments,1310475830,5041,"that's not the part that causes me the most headache. i find this model quite sensible, and was happy to be able to easily use consistent aliases, such as `channelgroupsampleview` and `channelsampleview`. remains `audiosegmentsampleview` that on the occasion i'd rename `channelsegmentsampleview`. (i wouldn't use `channelintervalsampleview`, because ""segment"" is now coined to either clip or silence segments. a `wavechannelinterval`, in practice, implies (the channel of) a clip under the hood.)",0
audacity/audacity,review_comments,1235329514,4746,"before ""mix and render"": ![a link] after: ![a link]",0
audacity/audacity,review_comments,1212088380,4701,should we return `true` here? if i remember correctly - this will force `settimeandpitch` to reboot anyway. chances are i am wrong :-),-1
audacity/audacity,review_comments,1514000156,5980,yes :grinning_face_with_sweat:,0
audacity/audacity,review_comments,1514658979,5980,:smiling_face_with_tear:,0
audacity/audacity,review_comments,1296129365,5027,a thing involved in implementing drags of clips but also of midi track data in other subclasses of the abstract base. also movement of labels. there are certain menu commands that you can bind to keystrokes for shifting track data left and right. cares a lot about maintaining this non graphical ui.,0
audacity/audacity,review_comments,1952563442,8211,yes :grinning_face_with_sweat:,0
audacity/audacity,reviews,1018381566,2224,a one very minor step left!,0
deluge-torrent/deluge,comments,1011424939,331,i have just fixed the plugin description issue [a link] so no longer need bd3502bb447 i have also fixed the `libintl` error that was reported by d2390cd24729 however that would only occur if dll was missing... :slightly_smiling_face:,0
deluge-torrent/deluge,comments,1011428856,331,"-- i just noticed, ill update this. things are looking pretty complete still need to do some cleanup. mostly being the plugin fix adding data hopefully can at least slim it down. and still waiting for that twisted issue to get fixed i really droped the ball there, but we can just use a fixed build of our own for now not a huge deal.",0
deluge-torrent/deluge,comments,1026022290,338,"that code was only a poc, and needs improvement... :grinning_face_with_sweat:",0
deluge-torrent/deluge,comments,1012608979,337,hmm seems the pr label condition did not work :thinking:,0
deluge-torrent/deluge,comments,430225581,204,like this? ![a link],0
deluge-torrent/deluge,comments,1030898094,364,"i'm :thumbs_up: on dropping 3.7 support. not sure when we'd want to fit that in in terms of versioning and releases. in terms of this pr, i'd say testing more than one version is an improvement, regardless of whether it hits every currently supported version. i'm also :thumbs_up: on adding in other versions up to 3.10",0
deluge-torrent/deluge,comments,1030859121,353,there are some odd decisions in old code :shrug: i agree though,0
deluge-torrent/deluge,comments,1019493443,342,"- i have no knowledge about `pyinstaller`, so you might be correct. i only commented about the code, which can be totally wrong :sweat_smile:",-1
deluge-torrent/deluge,comments,1575208396,427,don't know why i'm responding to each message when i can just write here - all changed as suggested :),0
deluge-torrent/deluge,review_comments,60045489,67,umm...after rebase on latest develop sigint gives new stacktrace. **edit: false alarm**. had some old files lurking around. still works good.,0
deluge-torrent/deluge,review_comments,277007801,234,"i installed `distro` on windows successfully, but all the functions return empty string to something like it. and i changed the line to the obscure way :wink:",0
deluge-torrent/deluge,review_comments,884167027,385,ah i totally missed that. iâ€™ll change it.,0
deluge-torrent/deluge,reviews,873254067,359,"i haven't used mypy a lot, but i think it could be a good idea to enable it. my only hesitation would be if we start having to add a lot of extra cruft to make mypy understand stuff. (by cruft, i mean stuff that is useless to a human reader, not just making things slightly more verbose, which could be useful to humans) i added a few notes on stuff i changed to get mypy to pass on core.py. my biggest concern is how it complains about twisted reactor. if there was some way we could solve that for the whole project at once it would be great.",-1
buildaworldnet/IrrlichtBAW,comments,463385587,213,"is this merge request ready? i've done a number of stability/bugfix commits to master, if you can merge with them first before i press the holy green button i'd be much obliged.",0
buildaworldnet/IrrlichtBAW,review_comments,451127216,497,todo!,0
buildaworldnet/IrrlichtBAW,review_comments,470775008,497,"eee i won't use it anymore, to delete!",0
buildaworldnet/IrrlichtBAW,review_comments,472542343,497,"my dear, i'm sure [a link] + [a link]",0
buildaworldnet/IrrlichtBAW,review_comments,410676459,468,"ugh, the whole point of taking a `core::smart_refctd_ptr` was to avoid the memcpy, just take over the ownership of the buffer and use it!",0
buildaworldnet/IrrlichtBAW,review_comments,395496909,437,bigger primes!,0
linuxmint/cinnamon,comments,239307206,4996,"there are associated prs against mint-y-theme and cinnamon-themes can you squash it all into one commit when you merge ? there appears to be a recent github facility to do that, from what i read. the gazillion contradictory tutorials on how to squash commits are doing my head in, as none of them seem to describe what to do with all the other people's commits i see, as i have brought it up to date with master to resolve conflicts a number of times. and i don't want to mess things up for you, of course. hope to find some time to do the squashing this weekend (13th). if i have problems i will try to merge --squash onto a new branch and will push that instead.",0
linuxmint/cinnamon,comments,12871493,1636,"i redid categories per a suggestion, just to see: ![a link]",0
linuxmint/cinnamon,comments,12871549,1636,"here's how it looks with breadcrumbs, navigating into a panel: ![a link]",0
linuxmint/cinnamon,comments,12925167,1636,changed hover tooltip to show up in the lower toolbar when the mouse is over an entry: ![a link],0
linuxmint/cinnamon,comments,17451442,1966,"oh ok, one final idea-make the year 2013, 1997 sounds too outdated :)",0
linuxmint/cinnamon,comments,22047214,1966,it now looks like this: ![a link],0
linuxmint/cinnamon,comments,15696803,1717,![a link] i have implemented a simple mini-expo workspace grid. my performance concerns seem to have been unfounded. i have worked around the multiple-monitor issue by displaying only the windows belonging to each monitor on each monitor.,0
linuxmint/cinnamon,comments,12738077,1598,"i don't find it confusing, tbh. the alt tab shouldn't be made too complicated - separators ought to be enough to distinguish between workspaces.",0
linuxmint/cinnamon,comments,37975917,2662,there's a default icon in the popup when no artwork is available. why not just use that? here it is a simple disk: ![a link],0
linuxmint/cinnamon,comments,256763025,5859,i created such a cursor for the dmz-white cursor theme. it looks like this: ![a link] here is the link to the file: [a link] isn't it possible to include this to the dmz-white cursor theme and use it in the menu-applet instead of the pointing hand cursor?,0
linuxmint/cinnamon,comments,13699989,1719,"your line is only effective if you only want to look at one item. if you look at multiple items one after another you will switch between app button and description, and then you'll notice how the description starts at a different position for every button if it is aligned right, making you search for the start of the text every time. the amount of free space is still the same. it's just put together differently. the big empty space is only there if your list on the right is not filled up. look at how it looks when your list is full: ![a link]",0
linuxmint/cinnamon,comments,16348899,1620,"your options are simple: - do it (we'll merge it quickly) - patch gjs (surely you didn't mean to say your users aren't as important as your policies or aversion to patches) - delay your gjs upgrade and wait for someone else to do the job i don't mean to be cheeky but you're telling us what you need ""asap"", and you don't offer any solution for it. we're all busy and we all want this to be done eventually. you look like you care about providing cinnamon to your users just as much as we care whether this happens right now or in 6 months time: not enough. if neither you or us are the driving force behind this and nobody steps up to fill your urgent need, it just won't happen. there's no need to wave the package removal scenario at us, ultimately we're talking about arch users losing out. surely that's more important than not patching gjs, or not making an effort to work on what's needed here.. the patches you mentioned. there's a lot of cinnamon devs out there and i'm sure you've plenty of resources as well. if somebody steps up to do the dirty work in time for that gjs upgrade you seem such in a hurry to apply, then great, i'll be responsive and merge it quickly. i've merged a lot of 3.8 pulls already, i'm ready to merge more if more contributions come in. this one isn't complete yet. i'm a little bit annoyed at the lack of compatibility coming from gnome 3.8 and everyone assuming it's our responsibility to be compatible with it the minute it comes out when we're not set to use it for another 6 months. just to be clear here. assuming someone forgot why they were paid for and prioritized this over their own agenda, you'd still be giving your users an unstable version of cinnamon. if today cinnamon 1.7.5 gets full 3.8 compatibility, you'll go ahead and provide 3.8 alongside with 1.7.5 instead of doing the right thing and waiting for 1.8 to provide both stable versions? the minute you upgrade gnome and gjs, the minute you lose compatibility with cinnamon 1.6.7. whether cinnamon ""git-latest"" has full 3.8 compatibility or not, if you care about your cinnamon users your upgrade path should be from 1.6 to 1.8. now you can tell me i'm wrong, that cinnamon doesn't really matter to you and that upgrading gnome asap is way more important, and we'll then know where we stand. that can be explained more clearly than with vague ""cinnamon is 1 year late"" statements (like in the case of cinnarch), so that when cinnamon is indeed pulled from the arch repository, arch users understand the reason why. that being: your commitment being on upgrading important packages such as gnome at the cost of delivering unstable snapshots or not delivering at all non-important packages such as cinnamon. there's a lack of commitment here, on both sides. thanks for your understanding and apologies for the tough talk. i hope you get what you want (full 3.8 compatibility in time for ""asap""). i've no idea who's going to step up and do it though (although i'll prioritize its merging when it happens).",1
linuxmint/cinnamon,comments,256126139,5829,could you check if my branch works for you [a link] i created a commit with your code in there [a link] just replace the hotcorner.js file in `/usr/share/cinnamon/js/ui` with the file from my branch. it looks like this on my machine: ![a link],0
linuxmint/cinnamon,comments,361102737,7187,"hi , (1) i have just solved the problem of size. (2) a new option in settings allows to don't use colors. (3) i prefer that there is a counter. i installed this applet on my daughter's computer (7 years old) and set the maximum volume at 70%. with a checkbox, this would no longer be possible. (4) at 153%, the sound becomes very painful. i prefer to leave this margin. if this feature was really required, it would be easy to modify the settings-schema.json file. the mark at 100% already exists in v1.2.0. the v1.3.0 with all these new features is coming soon.",0
linuxmint/cinnamon,comments,40171341,2765,mabey we can look into something like this for muffin: ![a link],0
linuxmint/cinnamon,review_comments,159561353,7149,"i was about to ask you why would you want to regenerate the pot file, but then i remembered how dumb `xgettext` can be sometimes (it doesn't remove obsolete strings and it doesn't update the line reference from a *msgid* whose source code has been moved). and i suddenly remembered why i remove the pot files when i'm doing pot updates in bulk. :thumbs_up:",0
qBittorrent/qBittorrent,comments,979358949,15769,or maybe something similar to this?? = ![a link],0
qBittorrent/qBittorrent,comments,981151639,15769,"for anyone interested, these are the icons being proposed as of now: ![a link] ____ these are some of the icons as shown in the main gui: ![a link] ![a link]",0
qBittorrent/qBittorrent,comments,983671716,15769,"i have an alternative proposal. changing stalling from download black icon to an icon that represent as stop. here is a mock-up. it means stop, and we don't need it to be black. thoughts? ![a link]",0
qBittorrent/qBittorrent,comments,991798176,15769,we also may need to swap out this icon for another: ![a link],0
qBittorrent/qBittorrent,comments,998827297,15769,"![a link] done. i think `seeding.svg` can stay, as it has different color. second part, done. done. i don't know if i got every `download`, as it is very common in this app. i replaced `task-attention.svg` already. forgot to delete the icon. kept `media-playback-pause.svg` and `media-playback-start.svg` for better discovery in the future. done. again, let's not go wild with colors. we have fixed red and orange color. possibly another orange variation `#ff9000` and grey colors. i will use them to make something.",0
qBittorrent/qBittorrent,comments,1022467963,15769,"fix is coming, how about replacing this: ![a link] with this: ![a link]",0
qBittorrent/qBittorrent,comments,1141796594,15769,":thumbs_up: i had no real issue 1st day either, we changed them to appease 1 person but they haven't given any feedback since...... only suggestion would be like i said before is to make the blue arcs width a little thicker - leave pointers alone. keep blue/red colors same as they are now `#1e90ff` / `#ff0000` maybe use `#32cd32` for green?!",0
qBittorrent/qBittorrent,comments,1151019155,15769,changes made. ![a link] i can assure you that won't happen. and i have painstakingly made sure of that.,0
qBittorrent/qBittorrent,comments,1152194970,15769,"it was discussed, the go-ahead was given as far as i'm concerned & has been delivered upon. to me it seems now people are trying to move the goal posts so to speak. in what way??.......a bit more context please. it can be lightened if really necessary (-im please! don't take me literally here & make changes/push any commits - there's **5** team members approval now)",0
qBittorrent/qBittorrent,comments,356611826,7610,", i'm here again! i had some free time so i decided to implement some more changes. please look at this again (hopefully for the last time in this pr). i finally implemented the api scope controllers and move appropriate logic from webapplication class to these controllers. i also changed (simplified) the action declaration logic (now without any tags, just any controller slot ended with ""action"" is action, public actions declared in webapplication explicitly). i also made some more structural changes. in fact, i need to make more of them, but i already ran out of time (i don't know when i'll be able to come back to this).",0
qBittorrent/qBittorrent,comments,687245210,12746,"those are the exact words that would come out from a dictator (or in another word, micromanagement): pointing fingers to others and micromanage their job. i really do hope you get the warning and keep your distance.",0
qBittorrent/qBittorrent,comments,189721064,3989,new ui: ![a link],0
qBittorrent/qBittorrent,comments,266461912,5877,now it look like that: ![a link],0
qBittorrent/qBittorrent,comments,737099035,13885,":thumbs_up: this is why we need to distribute actions between the menu and the dialog based on the frequency of use. as for all those people who complain about ""too many clicks"" for rarely used actions, i don't really respect them.",0
qBittorrent/qBittorrent,comments,1159583368,16840,i've been testing builds on the rc alongside for a few weeks :slightly_smiling_face: since i was losing tracker info every restart otherwise,0
qBittorrent/qBittorrent,comments,196036438,4681,i pushed an updated version. i implemented most of the stuff you talked about. start reviewing from commit `remove redundant variable.` onwards. pretty much all commits will be squashed before final merge. here is how the new options look: ![a link],0
qBittorrent/qBittorrent,comments,514034954,10527,hope you didn't found anything broken... i'm waiting for this pr as merging others will cause conflicts to it.,0
qBittorrent/qBittorrent,comments,919117760,15453,this is how my suggested icon for `speed graph` would look in the gui: ![a link],0
qBittorrent/qBittorrent,comments,431394406,9704,"c++14 is advertised as a little improvement to c++11, but with this pr and after porting over changes from 14 to 11 i realised that those little changes result in significantly different routes when writing code (auto typying in c++ 11 is defective). realising also that c++14 is imminent ether as 14 or 17 for the project, i don't want to waste time and efforts in rewriting code. , i want your decision on these matters, please.",0
qBittorrent/qBittorrent,comments,691478797,13348,"they're only wasted if you're not interested in them. and alerts are really cheap too, so i'm not too worried about it. or do you experience an alert using significant cpu? it's been a while since i looked at it, but libtorrent handles them [a link].",0
qBittorrent/qBittorrent,comments,441463883,9375,really hope we can get this in before 4.1.5 is cut,0
qBittorrent/qBittorrent,comments,423723822,9562,"well, so if we concerns performance side, i decided to make some test. i measured with `__rdtsc()` builtin how many clock ticks is spend on generating labels text in old code and new code and did not notice much difference. both variants gives approximately 50000 clock ticks (with very high dispersion). here comes histogram of captured samples in new code (old code looks the same) ![a link] readings are constantly jumping (i think because of multitasking) and i can not say which code is faster for sure. btw i am surprised, how many ticks consumes this seemingly simple operation. [code block]",0
qBittorrent/qBittorrent,comments,1046787820,16485,i've had time to give this pr a whirl...... #### test system: [code block] #### settings: [code block] ![a link] ### qbittorrent 4.4.1 x64 (qt5) test: #### task manager - performance/memory: ![a link] task manager - qbittorrent process details: ![a link] #### results/observations: all memory practically used! mouse lag drive slow down downloading/uploading slowing down or dropped basically a bad user experience. ____ ### qbittorrent 4.5.0alpha1 commit: 'a446d9d9da9eac95e5d0e7a9a653debe0338c0e7' test: #### task manager - performance/memory: ![a link] #### task manager - qbittorrent process details: ![a link] #### results/observations: not all memory used! no mouse lag no drive slow down no significant downloading/uploading slowing down much better user experience.,-1
qBittorrent/qBittorrent,comments,605654302,12169,![a link] :thumbs_up: but reannounce is inconsistent with the actions in the tracker tab ![a link] [a link] [a link],0
qBittorrent/qBittorrent,comments,275957307,6186,"i think it would be best to keep the smaller icons in this pr and then maybe you could create a separate pr for larger icons. this pr has already become much much larger than i originally envisaged (but otoh i think the result is also much better). i still need to reorder the pr (need to rebase your commit into it, etc) and i'm working my paid job right now so i might not get to it until the end of the day. so maybe best to wait until i have final versions for all the (small) icons to reduce churn? fwiw i prefer the look of the smaller icons, but i don't have a hi-dpi screen and it might be that when all the icons are larger i won't mind so much (the main thing is that they're out of balance with all the other icons). btw, to change the amount of whitespace you could do what i did in pr #6321 - change the viewport, but in the opposite direction i.e. whereas i made the viewport larger to increase the amount of whitespace there, you would decrease the viewport.",0
qBittorrent/qBittorrent,comments,278460840,6186,"let me say, that i didn't read any of this while it happened. so the discussion is pretty huge for me. i skimmed through it and i realize that it involves changes to font colors, icons(shape and color) and skins? so can you give me a summary on what is happening here?",0
qBittorrent/qBittorrent,comments,174049037,4253,ok guys were at 60% of the oxigen icons have a sneek peek here: ![a link],0
qBittorrent/qBittorrent,comments,177006712,4253,i think the various icons look smaller than the previous ones. especially those used in the menus and in the filelist+transferlist. screenshots follow for your comments: mainwindow: ![a link] preferences: ![a link] file menu: ![a link] edit menu: ![a link] view menu: ![a link] tools menu: ![a link] help menu: ![a link] context menu: ![a link],0
qBittorrent/qBittorrent,comments,864377396,14959,"_it seems that your problem is that you never doubt that you are right, and when your opinion is questioned, you do your best to find evidence that you are right. often it comes down not to formal proofs, but simply to searching for like-minded people and quoting them, etc. if i'm right, and this is true, then let's just end this discussion and everyone will have their own opinion. (because you don't care about mine, do you?) if the above is not valid, then let's try to continue._ **i'm really trying to find proof that this is a really useful thing** (although you may not believe me). that's how i understand it. to begin with, ""copying all dependencies to the build folder on each build"" instead of ""one-time setting of environment variables"" is inherently irrational. even the fact that the actual copying does not happen every time, but only after checking the files for changes, does not cancel its irrationality. after all, doing something (quite trivial for someone who decided to build an application) once looks much more rational than doing something with each build! of course, you will object that the user have to manually set the environment variables, _which is extremely difficult, etc._, and the copying is performed by the build system behind the scene and does not bother the user. but, as i mentioned in passing above, this should not be a problem for a user who decides to build an application on his own for the purpose of testing and debugging it, otherwise his mental abilities cause great doubt that he should do this at all. and besides, it does still bother the user, if we are talking specifically about the developer, as users of the build system, who can invoke the build quite often, so even a few extra seconds that it will spend each time checking/copying dependencies can greatly irritate him. (the above gives me enough reason to make this feature at least optional and disabled by default.) let's move on... well, maybe it has some other advantage that could offset its shortcomings? we'll see... could it be this? it does ""make installation trivial"" by simply moving the execution of all non-trivial actions from the installation step to the build step! this is obviously illogical, because the build step is performed much more often than the installation step, and most of the build cases do not imply further installation (if we are talking about developers workflow). in addition, it is not clear why it is impossible to still have this non-trivial logic where it is really required (in installation procedure)? sorry, i didn't find any proof why copying runtime dependencies to a single location **exactly at the build step** makes the installation process easier. this does not apply to this topic at all. no need to abuse it. i really like the idea of an automated build, so releasing the next version would just be adding a tag to the repository. what i don't like is the way that is suggested in this pr.",-1
qBittorrent/qBittorrent,comments,403529201,9007,"if feasible, i would choose to ready the mainwindow as early as possible (modern browsers startup time is impressive!) and let user know program is still initializing: could be some text in statusbar, or display the torrent jobs initially as ""not yet loaded"" and transition to other ready state (paused or downloading) when it is loaded. i've been thinking a lot about this problem lately. and i've come to the conclusion again that those disruptions to the natural sequence of initialization of the components with that you guys are trying to solve this problem can't lead to anything good. we will only get a lot of logical errors and unmaintainable code! the sequence should be in used-using order (as i said many times before). at global it should be as the following: 1. core components 2. ui and remote access components but is right too, the qbittorrent is ""interactive program"" (in gui mode) so it would be incorrect to leave the user without a response for a long time. however, this does not mean that we must break the right order. why should we display the main window immediately if it can't do any good at this time?.. i suggest another option (similar to other long-loaded programs): we just show the splash window (with some initialization related messages) until the application is fully loaded. tray icon can also be showed but it shouldn't provide any controls during application loading.",0
qBittorrent/qBittorrent,comments,96241063,2892,i tried: ![a link],0
qBittorrent/qBittorrent,comments,101349056,2892,i'll leave the singleton talk aside for the moment. i'll come back to it when everything else is ready. for now i have finished the review of [a link] too. commit [a link] is quite big. i am taking a break. i'll begin reading it later today.,0
qBittorrent/qBittorrent,comments,898964175,12574,here's an example: ![a link],0
qBittorrent/qBittorrent,comments,1856532952,20118,"except one string, forgot that one, added. :sweat_smile:",0
qBittorrent/qBittorrent,comments,718195287,13498,"i gave the actions build with `87a9710` a whirl..... took 56 secs to load fully from double click (cold) 2nd/3rd run 3 going in to 4th sec to load fully from double click one thing to note is that consistently the ""downloading"" in status pane ""always"" shows a different amount on each run.......it never shows the `10,0000` - amount goes up or down on each run...... see pic for example: ![a link]",0
qBittorrent/qBittorrent,comments,1480380567,18735,"this solution mostly affect/protect users whom are using the official webui and thus we should also advocate 3rd party webui implementations to do the same by mentioning it on the news section of our website. this sounds like a lot of intervention in the various code places to accommodate this behavior. imo, we should strive for the simplest possible solution (code-wise). i am just throwing ideas here. i would like this pr to be approved/merged as-is. my new idea for discussion: have an explicit cmd arg `--allow-remote-login-with-default-credentials`.",0
qBittorrent/qBittorrent,comments,1772220546,18735,this is not an alternative idea. it basically coincides with my intention. :thumbs_up: :thumbs_up: random password is meaningless in gui mode. just don't allow to enable webui w/o custom password is set. :thumbs_up: like we do currently for default credentials.,0
qBittorrent/qBittorrent,comments,122179570,2757,can make like this: ![a link] but in utorrent no difference between session tabs and torrent tabs ![a link] what do you think?,0
qBittorrent/qBittorrent,comments,642603770,12557,"disabled as soon as i hit the autodownloader button and the popup loads. i cant create any rules. unraid this docker: [a link] brave, tried edge aswel.",0
qBittorrent/qBittorrent,comments,804022830,14465,"well, it finally compiles successfully on windows using official qt 6.0.2 installation: ![a link] the first thing that catches your eye is the broken progress bars: ![a link] ![a link]",0
qBittorrent/qBittorrent,comments,567570712,11637,"i was talking about the **second** time **new** user start qbittorrent (**after** the first startup). you shouldn't underestimate the ""average user"" carelessness (i experience this often in my work :stuck_out_tongue:)",0
qBittorrent/qBittorrent,review_comments,123125249,6911,"once i did a clean build, i noticed that this change caused my icons to disappear. ![a link] this is with a stock linux mint 18.1. i am not sure why it is not using the 'fallback' icon if the tags icons are not there. but i decided to revert back to the original icons i was using to avoid any problems.",0
qBittorrent/qBittorrent,review_comments,300851077,10702,~~here too.~~ never mind.,0
qBittorrent/qBittorrent,review_comments,65124251,4936,but we did accept using it! let's be consistent in our actions. you agreed to this so easily? after you have fought for this opportunity? you surprise me (not to say otherwise).,0
qBittorrent/qBittorrent,review_comments,61573302,5196,what? what fun? why m_keyvalue as const?,0
qBittorrent/qBittorrent,review_comments,536148298,13885,"i forgot that's possible thanks. /off topic do ""fixup"" commits help reviewing or nah?",1
qBittorrent/qBittorrent,review_comments,56863659,4681,i don't know :s,0
qBittorrent/qBittorrent,review_comments,58292425,4994,fix coding style! method definitions aren't allowed in header files.,0
qBittorrent/qBittorrent,review_comments,706839219,15453,from this: ![a link] to this: ![a link],0
qBittorrent/qBittorrent,review_comments,395195302,12205,"~~todo shouldn't appear in man pages, unless this is only temporary.~~ never mind.",0
qBittorrent/qBittorrent,review_comments,815270036,16485,it is all about being consistent... there was similar problems in the past and iirc this was the least problematic way. i don't remember there was such complaint. i would just round them. users will just have to live with it. :face_with_tongue:,0
qBittorrent/qBittorrent,review_comments,183279316,8347,"seems is quite busy... i can fix this and mine comment and get this pr ready to merge, what do you say?",0
qBittorrent/qBittorrent,review_comments,360063329,11708,i don't know :s but doesn't the same logic apply for when we do `const` for non-pointers?,0
qBittorrent/qBittorrent,review_comments,491697958,13288,"now _you_ just showed your true self. your free time is not more valuable than that of others. straw man. no one said that, and that was never the implication. --- let's get this back on topic, for the sake of the project. the artifacts are useful for some contributors, even if they are not useful to you. the comment about the libtorrent abi issue should be mentioned in compile guides, but it is also very relevant where it is in the ci script. it quickly makes it clear that the issue is universal, not just a workaround for the ci environments.",0
qBittorrent/qBittorrent,review_comments,491709624,13288,"i'm merely telling a fact which might be something you didn't realize before. alright, but i'm noting that each reviewer has their own focus area and lax area and no one except the maintainer is except from this process, and this is how the current review process goes. i see no harm (little inconvenience at most) in adding this functionality a bit later, from my pov why not hold it for a while and see how it goes? from my pov taking resources but not putting it into use is wasteful. i think i already explained myself clear enough. each person has their own mind and thoughts, it is not always possible to see reasoning from others mind, even trying very hard. i faced similar situation numerous time when submitting prs, i believe all team members have. i've learned not to take it personal as it is merely subjective opinions on matters. i think my previous suggestions are concrete enough, i'll add here that imo it is taking too many lines that it is distracting when reading the ci script and it should be moved near to the affected actions as said before. i hope you also agree that reviewer comments (especially from team members) are not worthless. fyi, when i propose a pr, i find it useless to keep insisting my own reasoning when sufficient information is presented and the reviewer still thinks otherwise, in that case i can only trust the reviewer is knowing what he is doing. an accepted yet compromised pr is still better than a never-to-be-merged pr which contributes nothing to the project. also as you probably already know, the current employed merge process requires 2 out of 3 approvals from selected team members, i believe this is deliberately designed to collect opinions from multiple trusted minds and have tighter quality control on the pr, this also means making compromises are not unexpected and in fact, happens very often.",-1
qBittorrent/qBittorrent,review_comments,1746673960,21300,[a link] and [a link]. that's how libtorrent calls it. :woman_shrugging:,0
qBittorrent/qBittorrent,review_comments,357598794,11637,"i hope you're not really offended... i was referring to the top picture in the link. but seriously i don't see many people complain that on our issue tracker. seems reasonable. also if any low-end system run into problem, i think i'll simply redirect the complain to libtorrent to revise their formula.",0
qBittorrent/qBittorrent,reviews,391419688,12458,hopefully the last comment from me..,0
qBittorrent/qBittorrent,reviews,285622451,10948,it's really big pr so i will review it partially when i have time for it.,0
CivMC/Civ,comments,2452674428,397,"yup, the expectation is always on the other. they can ghost you for 7 months, but you not pushing a requested commit within a fortnight? closed. bye. try again.",0
CivMC/Civ,review_comments,1498392042,275,you should do the same with all of these components too :],0
CivMC/Civ,review_comments,1495167100,239,thanks and apologies. was probably an auto format.,1
aquasecurity/trivy,comments,728685766,542,", any heads up/updates regarding this? been a while :grinning_face_with_sweat:",0
aquasecurity/trivy,comments,1320862965,2490,"not the answer i was looking for after half a year :smiling_face_with_tear:, but here we go: [a link] the downside of the external version is that i can only use the docker container based approach in the first version it only uses the latest trivy image if you maybe want to merge this pr in the future, i would leave it open",0
aquasecurity/trivy,comments,1215039526,2607,"i had added a review comment, i suppose github did not send a notification. attached a screenshot in case it's not visible for some reason :grinning_face_with_sweat:",0
aquasecurity/trivy,comments,1060605591,1756,ahh you're right apologies i'd not pushed the extra `../` - i've pushed it now,0
aquasecurity/trivy,review_comments,1978119487,8177,"in the interest of not committing bike shedding... i'll vote for `--table-mode` flag with `=detailed,summary` as values. :grinning_squinting_face:",0
aquasecurity/trivy,review_comments,1036596592,3015,"yes you're correct. actually it's been too long for me to remember why i did this way as well :rolling_on_the_floor_laughing:. but yes i understand, it makes sense. i changed the behaviour as such here [a link]",0
aquasecurity/trivy,review_comments,1482849686,5999,"not that i can see in github dependency ui no, see screenshot below to see how it looks. ![a link]",0
aquasecurity/trivy,review_comments,908237932,1638,"yes, my mistake, thanks.",1
aquasecurity/trivy,review_comments,1603561683,6275,but people are writing a rego check and we referred to rego files as checks? what would be the difference then between the spec and the rego check? :thinking_face:,0
