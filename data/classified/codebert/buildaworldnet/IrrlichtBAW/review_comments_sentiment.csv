id,pr_number,user,created_at,body,codebert_sentiment_label,codebert_confidence
317199142,358,devshgraphicsprogramming,2019-08-23T16:01:15Z,"you can just suck in the include files from core, io and asset no need for forward declarations",-1,0.9007694125175476
317204001,358,devshgraphicsprogramming,2019-08-23T16:14:35Z,list of extensions? also where's your `igpushader` creation function?,0,0.9946367144584656
317204466,358,devshgraphicsprogramming,2019-08-23T16:15:45Z,why are you taking the entry point here? and stage?,0,0.9815165996551514
317204823,358,devshgraphicsprogramming,2019-08-23T16:16:42Z,"`m_code` could store both spir-v and glsl, using only `m_containsglsl` to switch between them",0,0.9952036142349243
317207295,358,Crisspl,2019-08-23T16:23:23Z,"the less unnecessary `#include`s in header files, the lesser chance for circular deps",0,0.9875693917274475
317207429,358,Crisspl,2019-08-23T16:23:46Z,theres no list of extensions yet,0,0.9827340245246887
317207820,358,Crisspl,2019-08-23T16:24:51Z,"hm, maybe i dont need to do this, i'll check",0,0.8261346817016602
317208019,358,Crisspl,2019-08-23T16:25:22Z,thats how it is ;),1,0.993575394153595
317210769,358,devshgraphicsprogramming,2019-08-23T16:33:02Z,"well the rule is that core,io and asset shall not include anything from video namespace `core::smart_refctd_ptr ` will break if t is forward declared but not defined.",0,0.9926337599754333
317210924,358,devshgraphicsprogramming,2019-08-23T16:33:28Z,ok just make a stub struct/class,0,0.988246738910675
317211093,358,devshgraphicsprogramming,2019-08-23T16:33:57Z,you're gonna have that stuff in ispecializationinfo/data anyway right?,0,0.9545746445655823
317211692,358,devshgraphicsprogramming,2019-08-23T16:35:40Z,"ok, so no need for an `std::stringc`, you can supply a utility function in `core::` to turn std::string&& into an `core::smart_refctd_ptr ` bonus points if you use our icpubuffer derived class with allocator, so you could actually steal std::string's data + allocator",0,0.9862416982650757
317223646,358,Crisspl,2019-08-23T17:09:08Z,yea,0,0.9144599437713623
317233950,358,devshgraphicsprogramming,2019-08-23T17:38:53Z,make override from io::ireadfile,0,0.9908395409584045
317233970,358,devshgraphicsprogramming,2019-08-23T17:38:59Z,make override from io::ireadfile,0,0.9908395409584045
317234639,358,devshgraphicsprogramming,2019-08-23T17:40:46Z,sure you want those public?,0,0.9896200299263
317235373,358,devshgraphicsprogramming,2019-08-23T17:42:42Z,why do you need the driver?,0,0.9719993472099304
317254295,358,Crisspl,2019-08-23T18:32:12Z,"actually just for glsl version.. so might as well get rid of that and put uint32_t parameter instead (plus gl calls, but those are statics in copenglextensionhandler so driver not really needed)",0,0.9928008317947388
317254438,358,Crisspl,2019-08-23T18:32:31Z,"well, yea",0,0.8146073222160339
317373024,358,devshgraphicsprogramming,2019-08-24T20:09:49Z,"kill this function, just let people set .pipeline directly on materials",-1,0.5548785924911499
317373047,358,devshgraphicsprogramming,2019-08-24T20:11:02Z,197+est_count*sizeof(const void*),0,0.9894765615463257
317373091,358,devshgraphicsprogramming,2019-08-24T20:12:17Z,the `imaterialrenderer` class can get nuked.,0,0.9527826309204102
317373109,358,devshgraphicsprogramming,2019-08-24T20:12:51Z,"don't comment out, use [code block] and #define new_shaders in irr compile config.",0,0.9939163327217102
317373126,358,devshgraphicsprogramming,2019-08-24T20:13:39Z,nuke igpuprogrammingservices,0,0.9747658967971802
317373166,358,devshgraphicsprogramming,2019-08-24T20:15:27Z,"nuke e_material_type, but add the old 4 default shader combos as igpumaterials to iassetmanager's cputogpu object cache and add associated icpu* objects for them",0,0.9936527013778687
317373205,358,devshgraphicsprogramming,2019-08-24T20:17:23Z,"nuke callbacks, add a 256-byte aligned (move around parts of smaterial as necessary to achieve 0 compiler padding + 256 byte alignment) uint8_t[128] array that will be then used for fetching push-constant data",0,0.9909372925758362
317373281,358,devshgraphicsprogramming,2019-08-24T20:20:10Z,i think it just called the appropriate call-back... see the definitions of `onunsetmaterial`,0,0.9872311949729919
317373294,358,devshgraphicsprogramming,2019-08-24T20:20:41Z,did this do anything else other than call the callback?,0,0.9868278503417969
317373322,358,devshgraphicsprogramming,2019-08-24T20:21:39Z,"would have been a check for matching pipelines, basically can't change shader in the middle of xform feedback",0,0.9877867102622986
317373383,358,devshgraphicsprogramming,2019-08-24T20:24:31Z,in the future: sort by pipeline pointer,0,0.9918427467346191
317373612,358,devshgraphicsprogramming,2019-08-24T20:36:10Z,ok but what do you need the version for?,0,0.9311701059341431
320399762,358,devshgraphicsprogramming,2019-09-03T17:50:34Z,dont you need a different directive for vulkan glsl ?,0,0.992734432220459
320400981,358,devshgraphicsprogramming,2019-09-03T17:53:11Z,how does shaderc compile this without descriptor sets?,0,0.9917275905609131
320401125,358,devshgraphicsprogramming,2019-09-03T17:53:33Z,"nice catch, is this also in my cleanup branch?",1,0.9422565698623657
320406453,358,Crisspl,2019-09-03T18:06:02Z,"nah, it's my fault from prev commit or something",-1,0.5277644395828247
320406683,358,Crisspl,2019-09-03T18:06:41Z,if set is not specified than set=0 if that's what u mean,0,0.9920629858970642
320406869,358,Crisspl,2019-09-03T18:07:11Z,hm?,0,0.9498917460441589
320954820,358,Crisspl,2019-09-04T20:17:40Z,i think this is quite useful because it sets pipeline on all meshbuffers of mesh scene node,0,0.5615324974060059
320955151,358,Crisspl,2019-09-04T20:18:28Z,what? i dont get it,-1,0.847715437412262
320955552,358,Crisspl,2019-09-04T20:19:29Z,so what should i do with transform feedback? i mean this `new_meshes` is not a solution,0,0.9818731546401978
320956189,358,Crisspl,2019-09-04T20:21:02Z,is transform feedback non-optionally used in irrbaw somewhere behind the scenes? i have no idea about transform feedback,0,0.8180238008499146
320956753,358,Crisspl,2019-09-04T20:22:22Z,"now after we decided to do pipelines etc, they should be 4x igpugraphicpipelines. right?",0,0.9889487028121948
320957363,358,Crisspl,2019-09-04T20:23:47Z,where should this uint8_t[128] live when we get rid of smaterial?,0,0.9934359788894653
320958097,358,Crisspl,2019-09-04T20:25:39Z,from copenglslmaterialrenderer: [code block],0,0.9915932416915894
323639400,358,devshgraphicsprogramming,2019-09-12T09:20:41Z,yes please,0,0.9627472162246704
323641639,358,devshgraphicsprogramming,2019-09-12T09:25:44Z,there needs to be a query for driver feature if input attachments are supported on the gpu backend (only some opengl cards have this),0,0.992228090763092
323641802,358,devshgraphicsprogramming,2019-09-12T09:26:07Z,we only support combined image samplers (with immutable samplers),0,0.9921790361404419
323642465,358,devshgraphicsprogramming,2019-09-12T09:27:39Z,"you have to provide the layouts at creation time with gpu objects, after that they're immutable",0,0.9911032915115356
323642589,358,devshgraphicsprogramming,2019-09-12T09:27:55Z,"only cpu object can have a setter, but do please add a getter to the parent class",0,0.9936813116073608
323643437,358,devshgraphicsprogramming,2019-09-12T09:29:42Z,here you can add setters and mutators,0,0.987459659576416
323643718,358,devshgraphicsprogramming,2019-09-12T09:30:19Z,need push constant ranges,0,0.98372483253479
323644432,358,devshgraphicsprogramming,2019-09-12T09:31:57Z,can `smart_refctd_dynamic_array` be null ?,0,0.9940698146820068
323644748,358,devshgraphicsprogramming,2019-09-12T09:32:38Z,remove line loop and any other types not supported.,0,0.9753377437591553
323644826,358,devshgraphicsprogramming,2019-09-12T09:32:45Z,add them,0,0.9656647443771362
323646720,358,devshgraphicsprogramming,2019-09-12T09:36:43Z,split this struct into [a link] and [a link] remove the `enabled` field,0,0.9944623112678528
323646817,358,devshgraphicsprogramming,2019-09-12T09:36:55Z,make sure `e_format` has a sizeof 4,0,0.9928434491157532
323647360,358,devshgraphicsprogramming,2019-09-12T09:38:13Z,only these are supported [a link],0,0.9898424744606018
323647463,358,devshgraphicsprogramming,2019-09-12T09:38:27Z,if enum could match that'd be awesome,1,0.9335774779319763
323647638,358,devshgraphicsprogramming,2019-09-12T09:38:54Z,move old enum to legacy baw-format namespace (will need when converting blobs),0,0.9919622540473938
323647715,358,devshgraphicsprogramming,2019-09-12T09:39:03Z,e_primitive_topology,0,0.9891114830970764
323650045,358,devshgraphicsprogramming,2019-09-12T09:44:38Z,you can keep the `enabled` field in a separate array outside the struct but inside the layout.,0,0.9945927262306213
323650450,358,devshgraphicsprogramming,2019-09-12T09:45:28Z,`perinstance` should match the flag from the vulkan struct in size and value.,0,0.9944671392440796
323651178,358,devshgraphicsprogramming,2019-09-12T09:47:14Z,watch out for the size of `bool`,0,0.9838238954544067
323653705,358,devshgraphicsprogramming,2019-09-12T09:53:00Z,duplicate struct see: [a link],0,0.9871296286582947
323653894,358,devshgraphicsprogramming,2019-09-12T09:53:28Z,duplicate struct see: [a link],0,0.9871296286582947
323661503,358,devshgraphicsprogramming,2019-09-12T10:11:59Z,"encode anisotropy as a power of 2, so 3 bits needed only",0,0.9858907461166382
323679796,358,Crisspl,2019-09-12T11:01:33Z,what about it?,0,0.9529531002044678
323682403,358,devshgraphicsprogramming,2019-09-12T11:09:25Z,provide a function to serialize and deserialize that bitfield struct... also check its size to be = 4 bytes,0,0.9927886128425598
323682788,358,devshgraphicsprogramming,2019-09-12T11:10:40Z,i would make this struct private and provide getters/setters (because we dont want direct manipulation of bitfields,0,0.9804322719573975
323682893,358,devshgraphicsprogramming,2019-09-12T11:10:58Z,also want type checking when setting bitfields,0,0.9903144240379333
323691191,358,devshgraphicsprogramming,2019-09-12T11:34:29Z,"i'd keep the `enabled` vertex input and binding paramter separate, also use `evai_count` instead of `16`",0,0.9952855706214905
323691813,358,devshgraphicsprogramming,2019-09-12T11:36:12Z,use enum count or something instead of just `5`,0,0.9948611855506897
323692028,358,devshgraphicsprogramming,2019-09-12T11:36:46Z,keep link to parent pipeline (if any),0,0.9819976687431335
323692237,358,devshgraphicsprogramming,2019-09-12T11:37:16Z,might have to do that in derived classes.,0,0.9885712265968323
323692568,358,devshgraphicsprogramming,2019-09-12T11:38:11Z,inherit from ipipeline for `mallowderivatives` and `mdisableoptimizations`,0,0.9947474598884583
323692940,358,devshgraphicsprogramming,2019-09-12T11:39:12Z,move these to the end,0,0.9872196912765503
323693181,358,devshgraphicsprogramming,2019-09-12T11:39:49Z,`static_assert` the size (for .baw serialization),0,0.9936715364456177
323693218,358,devshgraphicsprogramming,2019-09-12T11:39:55Z,`static_assert` the size (for .baw serialization),0,0.9936715364456177
323693454,358,devshgraphicsprogramming,2019-09-12T11:40:33Z,`static_assert` the size (for .baw serialization) and pack the struct,0,0.9945279955863953
323693567,358,devshgraphicsprogramming,2019-09-12T11:40:51Z,use typed/sized enums in declarations,0,0.9935241937637329
323693736,358,devshgraphicsprogramming,2019-09-12T11:41:21Z,change bools to bitfields?,0,0.9920756816864014
323694796,358,devshgraphicsprogramming,2019-09-12T11:44:30Z,or at least in order grouped similar to vulkan structs we'll copy these into,0,0.992155134677887
323695152,358,devshgraphicsprogramming,2019-09-12T11:45:30Z,setters/getters (type checking) + serialization/deserialization to uint32_t for .baw,0,0.9941051006317139
323695364,358,devshgraphicsprogramming,2019-09-12T11:46:10Z,replace the 8 with some meaningful constant name,0,0.9905898571014404
323695699,358,devshgraphicsprogramming,2019-09-12T11:47:07Z,are you sure there are not more blend ops?,0,0.9849842190742493
323696001,358,devshgraphicsprogramming,2019-09-12T11:47:54Z,could pack bool + enum into one uint32_t,0,0.9918724894523621
323696065,358,devshgraphicsprogramming,2019-09-12T11:48:05Z,`static_assert` the size (for .baw serialization),0,0.9936715364456177
323696980,358,devshgraphicsprogramming,2019-09-12T11:50:39Z,"samplers will be created on a private idriver cache (because of opengl we cant have true ""sampler"" objects that can be bound).",0,0.9917916059494019
323697812,358,devshgraphicsprogramming,2019-09-12T11:52:47Z,"i'd replace this with a `raw-pointer` + count, then rely on copying, not moving (to avoid malloc fragmentation)",0,0.9926446676254272
323698049,358,devshgraphicsprogramming,2019-09-12T11:53:17Z,plain begin and end iterator as input,0,0.9903753399848938
323701101,358,devshgraphicsprogramming,2019-09-12T12:01:00Z,"i'd split this into two arrays, one for `sbinding` and one for `ssamplerparams` that the items in `sbinding` will point to if needed (if type is a combined image sampler with immutable samplers) because it won't be an array possibly containing arrays, it will be easier and faster to serialize/deserialize for .baw",0,0.9899058938026428
323703046,358,devshgraphicsprogramming,2019-09-12T12:06:20Z,idriver needs following methods: - updatedescriptorset ivideodriver can host the following for the time being: - allocate descriptor sets - bind descriptor sets - free descriptor sets,0,0.9940605759620667
323705793,358,devshgraphicsprogramming,2019-09-12T12:14:04Z,i'm killing it,-1,0.9227877855300903
323707594,358,devshgraphicsprogramming,2019-09-12T12:18:54Z,`#ifndef` is a great solution ;) lets you know something is broken transform feedback is used for instancing + block stealing,1,0.9956947565078735
323707995,358,devshgraphicsprogramming,2019-09-12T12:19:58Z,"3x renderpassindependentgraphicspipelines, the emt_transparent_vertex_alpha can go die.",0,0.9568341374397278
323708120,358,devshgraphicsprogramming,2019-09-12T12:20:16Z,to the imeshbuffer,0,0.9875655770301819
323709071,358,devshgraphicsprogramming,2019-09-12T12:22:58Z,ok the igpurenderpassindependentpipeline will set this shit from now on.,-1,0.980494499206543
323710156,358,devshgraphicsprogramming,2019-09-12T12:25:48Z,"i legit thought you need an `#extension` directive to declare this is a vulkan shader, so you can use `gl_instanceindex` instead of `gl_instanceid`",0,0.9751706123352051
323710400,358,devshgraphicsprogramming,2019-09-12T12:26:30Z,do shaders with `set=` qualifiers so its clear to users,0,0.9943525791168213
323711816,358,devshgraphicsprogramming,2019-09-12T12:29:57Z,could add crtp `pipelinetype` for an `m_parentpipeline`,0,0.9955109357833862
323712059,358,devshgraphicsprogramming,2019-09-12T12:30:34Z,that comes from `evai_count` or did you remove `e_vertex_attribute_id` ?,0,0.9952989220619202
323714118,358,devshgraphicsprogramming,2019-09-12T12:35:28Z,"you need to use the `irr_inline_static_constexpr`macro, otherwise gcc freaks out",0,0.9906114935874939
323714246,358,devshgraphicsprogramming,2019-09-12T12:35:43Z,or not with crtp,0,0.981481671333313
323715130,358,devshgraphicsprogramming,2019-09-12T12:37:55Z,i'd like to have this struct be: 1. packed 2. take up a well defined amount of memory,0,0.9684699773788452
323715292,358,devshgraphicsprogramming,2019-09-12T12:38:18Z,"i'd still keep the enabled vertex input and binding paramter separate,",0,0.9890346527099609
323715881,358,devshgraphicsprogramming,2019-09-12T12:39:29Z,need mutators,0,0.9792434573173523
323727531,358,devshgraphicsprogramming,2019-09-12T13:04:45Z,"we need an actual `ibufferview` + `icpubufferview : public ibufferview, public iasset` and `igpubufferview : public ibufferview` in [a link] - nuke `ivirtualtexture` - move all of its functionality into `irenderablevirtualtexture` - rename the file but don't move it out of `./include` - replace every mention of `ivirtualtexture` in the engine with `irenderablevirtualtexture` nuke [a link] [a link] and replace them with - ibufferview - icpubufferview - igpubufferview - copenglbufferview those can go into appropriate `./include/irr` and `./src` folders",0,0.9938858151435852
323731624,358,devshgraphicsprogramming,2019-09-12T13:13:02Z,"i have a compact storage idea: 1. derive cpu and gpu textures, buffers and bufferviews from an empty base abstract class `idescriptor` 2. derive `sdescriptor*info` (and provide static_casting getters) from [code block] 3. only store one `core::smart_refctd_dynamic_array ` and static cast the `->data()` pointer as required depending on `descriptortype`",0,0.9796913266181946
323732020,358,devshgraphicsprogramming,2019-09-12T13:13:54Z,just delete the thing,0,0.8426761031150818
323732386,358,devshgraphicsprogramming,2019-09-12T13:14:37Z,nuke all this,0,0.7636505365371704
323732859,358,devshgraphicsprogramming,2019-09-12T13:15:37Z,smart pointer maybe?,0,0.9796964526176453
323733295,358,devshgraphicsprogramming,2019-09-12T13:16:33Z,nuke this whole file,0,0.9389764666557312
323733451,358,devshgraphicsprogramming,2019-09-12T13:16:50Z,nuke this whole file,0,0.9389764666557312
323733594,358,devshgraphicsprogramming,2019-09-12T13:17:08Z,nuke whole file,0,0.9283037185668945
323734727,358,devshgraphicsprogramming,2019-09-12T13:19:28Z,?,0,0.9557723999023438
323742028,358,Crisspl,2019-09-12T13:33:29Z,what actually m_parentpipeline is? i skipped it in current code for now,0,0.9903361797332764
323746448,358,Crisspl,2019-09-12T13:41:36Z,hm? how? i dont understand,-1,0.809550404548645
323747753,358,Crisspl,2019-09-12T13:43:57Z,a lot of extension-specific ones [a link],0,0.9871467351913452
323753680,358,Crisspl,2019-09-12T13:54:23Z,it's kinda weird because `offset` and `stride` are separated and `binding` is doubled..,-1,0.9928269982337952
323754582,358,Crisspl,2019-09-12T13:56:03Z,please elaborate on this,0,0.9612016677856445
323789399,358,Crisspl,2019-09-12T14:57:45Z,hm? which file?,0,0.9426385164260864
323814081,358,devshgraphicsprogramming,2019-09-12T15:42:35Z,"pointer to a pipeline that you can derive from, in vulkan it doesn't actually tie the things together, its just supposed to make the creation quicker. so think about validation, or shared shaders with same specialization, etc. its essentially using an already created object as cache. maybe its not even necessary to hold the pointer to parent after creation/construction.",0,0.9922105073928833
323814240,358,devshgraphicsprogramming,2019-09-12T15:42:51Z,ivirtualtexture,0,0.9658381938934326
323817636,358,devshgraphicsprogramming,2019-09-12T15:49:14Z,"in vulkan the layout contains information about the byte-ranges of push constant storage used (and by which shader) not the actual data to use nor backing storage for it, just an array of ranges (so the implementation can compute how much data needs to be reserved for a pipeline, and do some mappings, hopefully to registers). for opengl we don't specifically need to know about the ranges used (since we always provide only 128 bytes of storage), but for vulkan its mandatory. plus who knows? this sort of info may make the mapping between byte-offset to opengl non-ubo uniform easier!",0,0.9416317939758301
323820399,358,devshgraphicsprogramming,2019-09-12T15:54:38Z,"its not really duplicated. ok so you have attribute slot (vertex input id) <-> buffer binding (api buffer input id) <-> buffer this basically means that there's a switchboard for buffer connections. the duplication isnt really a duplication, first its a mapping of attribute input slot to binding, and then binding to buffer input. i.e. you can predeclare that uv, color, etc. attributes at inputs 1,2 come from buffer binding 1 with different offset and stride and position+normal attributes at inputs 0,3 come from buffer binding 0 with different offset and stride. this is also why there is a relative-offset field, so you can use the same buffer binding for different attributes. this allows for less api talk and faster switching (less validation). possibly even vertex cache improvements on shitty half-assed implemententations. instead of the current system where its 1 buffer binding per 1 attribute",0,0.9666981101036072
323821392,358,devshgraphicsprogramming,2019-09-12T15:56:30Z,you're missing `ebo_max` also reserve the correct amount of bits (in the raster struct) for all the extension-specific enums to come in the future.,0,0.9937738180160522
323859785,358,Crisspl,2019-09-12T17:26:22Z,spirv-cross needs it for downcompilation (it makes `#version` directive with it),0,0.9940475225448608
323926776,358,devshgraphicsprogramming,2019-09-12T20:08:38Z,can you just pass the version instead of the whole driver?,0,0.9935675263404846
324160301,358,Crisspl,2019-09-13T12:02:06Z,also maybe you could explain it to me because i can find the info.. whats going on about that there can be more than one immutable samplers in one binding? how are they used if there are more than one?,0,0.9793699383735657
324204192,358,Crisspl,2019-09-13T13:53:48Z,ah nvm xd i guess imm samples count must be equal to descriptor count (within binding),0,0.983167827129364
324205151,358,devshgraphicsprogramming,2019-09-13T13:55:47Z,yes exactly.,0,0.980278730392456
324208809,358,Crisspl,2019-09-13T14:03:57Z,hm do we want to have the same enum values as in vulkan's enum?,0,0.9861702919006348
324210325,358,devshgraphicsprogramming,2019-09-13T14:07:26Z,"nah, just enough bits to be able to store that amount of distinct enums",0,0.9759791493415833
324416115,358,devshgraphicsprogramming,2019-09-14T07:43:34Z,do we have a query for supported formats for tbo? also call it `addbufferview`,0,0.9943525791168213
324416130,358,devshgraphicsprogramming,2019-09-14T07:44:05Z,why did we need `idriver::remove*` functions in the first place and just not be able to `drop()` stuff?,0,0.9886981248855591
324419832,358,devshgraphicsprogramming,2019-09-14T10:13:13Z,"you don't need a refcounted array here, just let people set it to plain pointers. you won't be holding that array after the function returns. only use refcounted pointers if you will hold the pointee after function returns.",0,0.9877691864967346
324419867,358,devshgraphicsprogramming,2019-09-14T10:14:54Z,"you can already do the copy of attributes `type`,`count`,`stageflags` in this loop and compute the first half of the offset as well.",0,0.9908474683761597
324419910,358,devshgraphicsprogramming,2019-09-14T10:16:56Z,isn't the syntax `core::make_refctd_dynamic_array ` ? did i fuck up that function?,0,0.920045018196106
324421016,358,devshgraphicsprogramming,2019-09-14T11:03:11Z,"make sure sizeof is 4, or use typed uint32_t enums",0,0.994417667388916
324421081,358,devshgraphicsprogramming,2019-09-14T11:05:21Z,missing location and binding field (only one of tem can be implicit),0,0.9923229217529297
324421111,358,devshgraphicsprogramming,2019-09-14T11:06:18Z,"you dont have a `binding` field, that's necessary",0,0.9865887761116028
324421160,358,devshgraphicsprogramming,2019-09-14T11:07:54Z,"there's no need for a malloc'ed array, just store a `uint16_t enabledbindingflags;` next to `enabledattribflags` the max binding count is 16.",0,0.9953374862670898
324421183,358,devshgraphicsprogramming,2019-09-14T11:08:21Z,anonymouse struct and serialize/deserialize methods,0,0.9913076758384705
324421187,358,devshgraphicsprogramming,2019-09-14T11:08:36Z,you need more bits for the future blend ops,0,0.9890172481536865
324421369,358,devshgraphicsprogramming,2019-09-14T11:15:03Z,ok we cant support separable sample from image,0,0.6783756613731384
324421377,358,devshgraphicsprogramming,2019-09-14T11:15:25Z,cant support image/texture without smapler,0,0.9786304831504822
324421397,358,devshgraphicsprogramming,2019-09-14T11:16:04Z,we can support this in two ways: - descriptor set with immutable sampler - descriptor set with combined image+sampler,0,0.9921016097068787
324421573,358,devshgraphicsprogramming,2019-09-14T11:23:42Z,"don't set a max anymore, on anything",0,0.9172054529190063
324421576,358,devshgraphicsprogramming,2019-09-14T11:23:54Z,let us query,0,0.965039849281311
324421586,358,devshgraphicsprogramming,2019-09-14T11:24:21Z,"if you're gonna grab and drop things, use smart ptr",0,0.9237627983093262
324421647,358,devshgraphicsprogramming,2019-09-14T11:27:03Z,"`ivulkanprebaked`is not correct cause descriptor set is mutable after creation (just not after bind, and there are extensions that take this constraint away) also don't use virtual inheritance when not needed",0,0.9927476048469543
324421665,358,devshgraphicsprogramming,2019-09-14T11:27:57Z,same for the other objects. remember we want to use `ext_descriptor_indexing` in the future.,0,0.9940574169158936
324421684,358,devshgraphicsprogramming,2019-09-14T11:28:56Z,why havent we nuked this entire file yet?,0,0.9170437455177307
324421688,358,devshgraphicsprogramming,2019-09-14T11:29:01Z,why havent we nuked this entire file yet?,0,0.9170437455177307
324421694,358,devshgraphicsprogramming,2019-09-14T11:29:09Z,why havent we nuked this entire file yet?,0,0.9170437455177307
324421720,358,devshgraphicsprogramming,2019-09-14T11:29:45Z,`.get()` ?,0,0.9875583648681641
324421733,358,devshgraphicsprogramming,2019-09-14T11:30:21Z,evtt_buffer_object should disappear from the engine,0,0.9918205738067627
324421754,358,devshgraphicsprogramming,2019-09-14T11:31:26Z,"now that we have descriptor sets, this thing can be replaced in its entirety (remember about the layout compatibility rules from vulkan spec!)",0,0.9628549218177795
324421860,358,devshgraphicsprogramming,2019-09-14T11:36:05Z,"also, there needs to be two separate caches in `cnulldriver` one for compute and one for graphics pipeline (changing descriptors on one shouldn't influence the other), but copengldriver must make it play with the fact that there are no separate bind points for graphics and compute (changing the set changes both)",0,0.9913938641548157
324421931,358,devshgraphicsprogramming,2019-09-14T11:39:52Z,"this file/class shouldn't exist, there's no such thing as a ""storage image"" object in vulkan, its just a binding in the descriptor set. [a link] i know you need to create `imageview` opengl objects, but like vaos they are non shareable between contexts, so need a driver-wide cache for them :( with the key being `pair ` there is however a `imageview` (same as texture view in opengl) but thats my responsibility to implement.",-1,0.989654004573822
324422061,358,devshgraphicsprogramming,2019-09-14T11:45:07Z,no a buffer view is not a texture!,-1,0.4929978549480438
324422137,358,devshgraphicsprogramming,2019-09-14T11:48:13Z,"~rebindrevalidate used to recreate the binding between the tbo object and a buffer that's changed on the opengl side, now if you detect a change you should just remove the tbo object , recreate it with the changes and then update the descriptor set (the descriptor set layout must be created with allow update after bind).~ never mind, this is the driver not the skinned mesh. i would recommend nuking `sauxcontext::setactivetexture` and similar, then just introducing a `sauxcontext::setgraphicspipeline`, `sauxcontext::setcomputepipeline`, and `sauxcontext::setdescriptorset`.",0,0.9840296506881714
324422438,358,devshgraphicsprogramming,2019-09-14T12:00:45Z,(only in opengl and under the hood),0,0.9874069094657898
324430291,358,Crisspl,2019-09-14T16:51:17Z,"yea, it's temporary solution. but now i think that i can make only copenglbufferview inherit from irenderablevirtualtexture. it has to be be like this because of sauxcontext::setactivetexture()",0,0.8586168885231018
324430365,358,Crisspl,2019-09-14T16:53:50Z,this file shouldn't exist anyway,0,0.9742082357406616
324430517,358,Crisspl,2019-09-14T16:57:56Z,what about vertex attrib buffer bindings (described by params in pipeline) in meshbuffer? should there still be limit of 16 and relation binding_num=attrib_num?,0,0.9949000477790833
324430653,358,Crisspl,2019-09-14T17:02:16Z,so we still want to have max vertex attrib buffer bindings limit of 16?,0,0.9911959171295166
324430688,358,Crisspl,2019-09-14T17:03:33Z,binding field is redundant because index in the array is supposed to denote binding num,0,0.983900785446167
324430740,358,Crisspl,2019-09-14T17:04:59Z,"nah, it's not :c",1,0.6750400066375732
324430808,358,Crisspl,2019-09-14T17:07:01Z,"hm, right, thanks",1,0.904225766658783
324430848,358,Crisspl,2019-09-14T17:08:12Z,because they're cached in cnulldriver and remove*() removes the object from cache,0,0.9948647618293762
324430881,358,Crisspl,2019-09-14T17:08:55Z,"nah, but there should be such. i'll make later",0,0.9565564393997192
324440354,358,devshgraphicsprogramming,2019-09-14T22:48:22Z,nuke `sauxcontext::setactivetexture()`,0,0.9916309714317322
324440359,358,devshgraphicsprogramming,2019-09-14T22:48:39Z,+1,0,0.7702900171279907
324440386,358,devshgraphicsprogramming,2019-09-14T22:50:11Z,"as per our discord conversation, i do not believe there should ba a cache of already created objects... especially if they are actually shareable. there's probably no reason for this cache to exist. or other caches.",0,0.9732710123062134
324440392,358,devshgraphicsprogramming,2019-09-14T22:50:31Z,lemme know when changed.,0,0.9663188457489014
324440396,358,devshgraphicsprogramming,2019-09-14T22:50:48Z,so i fucked up ?,-1,0.9441721439361572
324440409,358,devshgraphicsprogramming,2019-09-14T22:51:27Z,"nope, the index in the array denotes the `location` not the binding (which buffer binding provides the attribute for the current location)",0,0.9934219717979431
324440421,358,devshgraphicsprogramming,2019-09-14T22:51:58Z,"theoretically they could be different (one lower, one higher) but they are usually not so.",0,0.982675313949585
324440442,358,devshgraphicsprogramming,2019-09-14T22:53:06Z,"yes, vertex attrib buffer bindings are not descriptors. neither are subpass inputs (really). other bindings with `ext_descriptor_indexing` you could have 512k textures bound at once.",0,0.9913871884346008
324440448,358,devshgraphicsprogramming,2019-09-14T22:53:23Z,idescriptorset ?,0,0.9907686114311218
324467401,358,Crisspl,2019-09-15T15:03:36Z,"yes, its not mine. mine is in include/irr/asset",0,0.9848142266273499
324467546,358,Crisspl,2019-09-15T15:06:40Z,so there still limit of 16 attrib buffer bindings? then why array index cannot denote binding num?,0,0.9738879203796387
324467676,358,Crisspl,2019-09-15T15:10:09Z,[a link] until now we had convention that binding_num=location (attrib num). so why would we drop this if nothing changes here?,0,0.992399275302887
324477803,358,devshgraphicsprogramming,2019-09-15T19:38:48Z,"sorry, it must be an abomination created by me",-1,0.9917609691619873
324477827,358,devshgraphicsprogramming,2019-09-15T19:39:17Z,this will no longer be our contention,0,0.9798561334609985
324477844,358,devshgraphicsprogramming,2019-09-15T19:39:36Z,"faster buffer rebinding, probably better hardware cache usage.",0,0.9758809208869934
324607370,358,Crisspl,2019-09-16T10:42:26Z,why actually?,0,0.8460415601730347
324615222,358,devshgraphicsprogramming,2019-09-16T11:04:02Z,"because you'll be setting the entire descriptor set at once, and the descriptors bound in previous bindings determine the gl-bindings of the textures you'll be setting as the result",0,0.9922109842300415
324617611,358,Crisspl,2019-09-16T11:11:11Z,"apparently, if you wanted it differently. see your code with usage of it: [a link]",0,0.9635536074638367
324621497,358,devshgraphicsprogramming,2019-09-16T11:21:58Z,i think i've fucked up slightly would have been more sane to use`core::make_refctd_dynamic_array ::gpuobjecttype> >` on that particular line and throughout the engine,-1,0.5176655054092407
324622278,358,devshgraphicsprogramming,2019-09-16T11:24:22Z,"actually no i didn't fuck up, had to have it like that so `make_refctd_dynamic_array` could be used to create both `smart_refctd_dynamic_array` and `refctd_dynamic_array`s",0,0.7606080174446106
324728435,358,devshgraphicsprogramming,2019-09-16T15:06:22Z,these could be uint8_t and some others,0,0.989994466304779
324728515,358,devshgraphicsprogramming,2019-09-16T15:06:32Z,any reason not to?,0,0.9662342667579651
324729606,358,devshgraphicsprogramming,2019-09-16T15:08:22Z,"actually will be 6, because bitfield can't straddle type boundaries",0,0.9706442952156067
324735490,358,devshgraphicsprogramming,2019-09-16T15:19:42Z,remember there is also a per-meshbuffer buffer binding offset to be implemented [a link],0,0.9939466118812561
324736048,358,devshgraphicsprogramming,2019-09-16T15:20:47Z,call this field `relativeoffset` also could fit this and `binding` in a `uint16_t` because there are limits for each value much lower than 64k,0,0.995032787322998
324744669,358,devshgraphicsprogramming,2019-09-16T15:37:16Z,need offsets as well,0,0.9847886562347412
324747401,358,devshgraphicsprogramming,2019-09-16T15:42:42Z,handle id > max,0,0.9738727807998657
324747453,358,devshgraphicsprogramming,2019-09-16T15:42:47Z,handle id > max,0,0.9738727807998657
324750913,358,devshgraphicsprogramming,2019-09-16T15:49:30Z,alignas to avx512,0,0.9890794157981873
324751323,358,devshgraphicsprogramming,2019-09-16T15:50:22Z,why the push constants only in igpumeshbuffer and not icpumeshbuffer ?,0,0.9882935285568237
324861734,358,Crisspl,2019-09-16T20:06:58Z,because they're dynamic thing (most likely changes very often) so i think exporting them (as asset to file) is rather pointless,0,0.7318453192710876
324889042,358,devshgraphicsprogramming,2019-09-16T21:14:48Z,keeping a cache with a key of raw-pointer will necessitate icpushaders letting know the `cshaderintrospector` that they're being destroyed... maybe a smart pointer would be better (but then you need methods to kill the cache entries),0,0.9710512757301331
324890213,358,devshgraphicsprogramming,2019-09-16T21:17:49Z,i don't want to see grab and drops in the engine anymore,0,0.557492733001709
324890240,358,devshgraphicsprogramming,2019-09-16T21:17:53Z,i don't want to see grab and drops in the engine anymore,0,0.557492733001709
324890812,358,devshgraphicsprogramming,2019-09-16T21:19:26Z,why isn't `dointrospection` returning a `core::smart_refctd_ptr ` right away?,0,0.9942342638969421
324893003,358,devshgraphicsprogramming,2019-09-16T21:25:06Z,`asset` namespace violation (cannot depend on `video`)... just analyse whether the spir-v had debug info and `assert` that it did. also doesn't the requirement that debug info is available make it impossible to use .spv pulled off the web?,0,0.9876570701599121
324893390,358,devshgraphicsprogramming,2019-09-16T21:26:09Z,pass the version instead of whole driver... also should the version be a static var of `copenglextensionhandler` ?,0,0.9953319430351257
324893921,358,devshgraphicsprogramming,2019-09-16T21:27:38Z,actually you need to introspect if the layout qualifier `row_major` applies to that particular push_constant,0,0.9931319355964661
324894203,358,devshgraphicsprogramming,2019-09-16T21:28:22Z,"`vector` is a malloc, use an `std::array` with an upper bound in size",0,0.9931065440177917
324894309,358,devshgraphicsprogramming,2019-09-16T21:28:38Z,or some stack scratch space,0,0.9713488817214966
324894445,358,devshgraphicsprogramming,2019-09-16T21:28:55Z,dont use vector,0,0.8435370326042175
324897190,358,devshgraphicsprogramming,2019-09-16T21:36:54Z,"remember that if `top.name` is the name of a variable thats an array you need to query for `top.name+""[0]""`",0,0.9934784173965454
324897866,358,devshgraphicsprogramming,2019-09-16T21:38:57Z,find out if the offsets into the push_constant range need to be somehow aligned for the types (on the glsl side) and put some assertions here,0,0.9939159750938416
324898078,358,devshgraphicsprogramming,2019-09-16T21:39:34Z,how are the uniforms sorted? by location or by offset in pc-range?,0,0.9937270879745483
324907070,358,devshgraphicsprogramming,2019-09-16T22:07:56Z,"there's probably no harm in being able serializing them... plus actually their use can be very very static (non-dynamic) because of a desire to re-use command buffers, and once recorded pcs can't change (have to record another cmd buffer), so i'd actually see them being used for super high-frequency (less overhead than dynamic ubo offset) but small and static (for the mesh) data, such as objectids, material ids, colors, booleans, and other switches.",0,0.9620489478111267
324934255,358,Crisspl,2019-09-17T00:05:03Z,"i would if someone could give me upper bound :p really, is there any expectable?",1,0.984643816947937
324934356,358,Crisspl,2019-09-17T00:05:35Z,"oh, right, thx",0,0.5246290564537048
324934699,358,Crisspl,2019-09-17T00:07:16Z,"_pcdata is supposed to be already offset'd range of those 128 bytes, but not sure if i understand u correctly",0,0.9306448101997375
324934986,358,Crisspl,2019-09-17T00:08:50Z,"i haven't tried to make them sorted anyhow, but seems like they are in order they appear in uniform block, so location",0,0.9640238881111145
324935434,358,Crisspl,2019-09-17T00:11:13Z,"yea, i thought about that, but left it for tomorrow. actually there are spv decorations for it, it's nice. i'll add to introspection data",1,0.9114075899124146
324935818,358,Crisspl,2019-09-17T00:13:21Z,k i don't like global vars so ill make a parameter for it anyway,-1,0.930372416973114
324936331,358,Crisspl,2019-09-17T00:15:51Z,"yes, i wrote it in the docs in iglslcompiler, but there's no other way to set push constants in opengl backend",0,0.9889541864395142
324936534,358,Crisspl,2019-09-17T00:16:48Z,because it doesn't need to.. no greater purpose really,0,0.8388775587081909
324937120,358,Crisspl,2019-09-17T00:20:07Z,"well, pointer is just an integer and introspector isn't trying to access pointed address. there's no need of knowing whether the icpushader actually exist",0,0.9893206357955933
325040305,358,devshgraphicsprogramming,2019-09-17T08:26:31Z,128 bytes?,0,0.983880341053009
325040874,358,devshgraphicsprogramming,2019-09-17T08:27:50Z,"im pretty sure that the `col` pointer needs to have ome sort of alignment before you pass it to setuniform, i.e. 4 bytes or something",0,0.9672935009002686
325040979,358,devshgraphicsprogramming,2019-09-17T08:28:02Z,i'd sort them,0,0.9843622446060181
325041219,358,devshgraphicsprogramming,2019-09-17T08:28:32Z,+1,0,0.7702900171279907
325041793,358,devshgraphicsprogramming,2019-09-17T08:29:52Z,"yes, you can just make the production of debug data default to true + assert or fail to produce the opengl gpu shader if introspection tells us there are push constants but no debug data to know their names.",0,0.9898849725723267
325042034,358,devshgraphicsprogramming,2019-09-17T08:30:27Z,preventing memleaks?,0,0.9648823738098145
325042669,358,devshgraphicsprogramming,2019-09-17T08:31:50Z,"you do realize that if i create,drop and recreate icpushader i may end up with the same pointer but different shader contents ?",0,0.9615928530693054
325173349,358,Crisspl,2019-09-17T13:42:34Z,so max size of 4x4 matrix array is 2? i dont get it,0,0.8139659762382507
325185538,358,Crisspl,2019-09-17T14:03:36Z,most of these are 32bits because i'm trying to make them look as close as possible to vulkan's structs,0,0.9571608901023865
325186306,358,Crisspl,2019-09-17T14:04:50Z,"hm, yea, so ill better make introspector hold them",0,0.7796252369880676
325215968,358,devshgraphicsprogramming,2019-09-17T14:54:10Z,"yes, if our max size of push constant data supported by the engine is 128, then you can have max 2 matrices.",0,0.9878523349761963
325216492,358,devshgraphicsprogramming,2019-09-17T14:55:02Z,then you also need functions to purge this cache (so creating icpushader does not create actual memory leaks),0,0.989774227142334
325216996,358,devshgraphicsprogramming,2019-09-17T14:55:52Z,we won't be able to `memcpy` this into a vulkan struct anyway cause `e_format` doesn't match `vkformat`,0,0.9885213375091553
325256303,358,Crisspl,2019-09-17T16:06:30Z,"i was thinking totally in abstraction of this.. ok, doable if we have some global constant with max push constants bytesize",-1,0.636314868927002
325263786,358,devshgraphicsprogramming,2019-09-17T16:21:34Z,"yeah best that way, so no alloc here, this is the hot loop",0,0.8427898287773132
325266560,358,devshgraphicsprogramming,2019-09-17T16:27:31Z,"can we precompute these name strings, don't want any alloc calls in `setuniformsimitatingpushconstants`",0,0.9916083216667175
325266699,358,devshgraphicsprogramming,2019-09-17T16:27:50Z,can we actually precompute as much as possible?,0,0.9881066083908081
325266799,358,devshgraphicsprogramming,2019-09-17T16:28:04Z,why is this happenning every time we want to set push constants?,0,0.9349396824836731
325280801,358,devshgraphicsprogramming,2019-09-17T16:59:11Z,alignas(64) and switch places with other members (so we're not wasting lot of space on padding),0,0.9868032336235046
325287109,358,Crisspl,2019-09-17T17:14:12Z,"it's not, it's in `builduniformlist()`",0,0.9937196969985962
325287555,358,Crisspl,2019-09-17T17:15:14Z,"they're precomputed, it's in `builduniformlist()`",0,0.9934565424919128
325300157,358,devshgraphicsprogramming,2019-09-17T17:43:25Z,ah ok github messed up,-1,0.9715078473091125
325421920,358,Crisspl,2019-09-17T23:03:12Z,tell me what d you think about this,0,0.8363290429115295
325421968,358,Crisspl,2019-09-17T23:03:26Z,and what do you think about this,0,0.9696939587593079
325539427,358,devshgraphicsprogramming,2019-09-18T08:14:51Z,why do you need this cache in the first place? make a `removefromcache(copenglspecializedshader)` and `clearcache()`,0,0.9938951134681702
325545068,358,devshgraphicsprogramming,2019-09-18T08:27:47Z,maybe make a `clone` method to create a new shader handle?,0,0.994283139705658
325551315,358,devshgraphicsprogramming,2019-09-18T08:41:59Z,?,0,0.9557723999023438
325551329,358,devshgraphicsprogramming,2019-09-18T08:42:01Z,?,0,0.9557723999023438
325568207,358,devshgraphicsprogramming,2019-09-18T09:17:30Z,"actually shader objects are special, they can be shared. so you can create and delete copies on different contexts than you're using, plus you can transfer the object from a dead context to a live context. so technically speaking you don't really need a cache, just a mapping from live context to a shader slot (or some uint in range from 0 to `screationparameters::axuglcontexts-1`) that will never change for a live context due to intialization and deinitialization of other contexts. i used to have (in previous revisions) an id assignment routine here to get this sort of mapping [a link]",0,0.9809353351593018
325571256,358,devshgraphicsprogramming,2019-09-18T09:24:09Z,"there might not be a need for such a cache after all, just an array of handles inside copenglspecializedshader, that ""hopefully"" get a deferred intialization (if not you can create all copies at once)",0,0.9867672324180603
325707974,358,Crisspl,2019-09-18T14:26:52Z,"ok, it makes stuff easier. however theres going to be similar problems with vaos, pipelines and fbos. also: for the ones aforementioned we have to make sure that once created gl object by thread a, gets deleted by thread a. so i think we might need per-thread/ctx refcounting inside some `copengl*` objects (pipeline, framebuffer). that way we could guarantee that gl object is being deleted in the same thread which created it as long as user makes proper amount of drops in relation to grabs. what troubles me is what if the last ref is held by cpu->gpu cache and most likely will be dropped in iassetmanager's destructor when app terminates..",0,0.8984593152999878
325708902,358,Crisspl,2019-09-18T14:28:28Z,"wait, when actually sauxcontext is being destroyed?",0,0.9825847744941711
325711309,358,Crisspl,2019-09-18T14:32:41Z,or rather: when sauxcontext::ctx is being destroyed?,0,0.9912140965461731
325711468,358,devshgraphicsprogramming,2019-09-18T14:32:58Z,when you call `copengldriver::deinitauxglcontexts` from the thread associated with `sauxcontexts`,0,0.9953244924545288
325715797,358,devshgraphicsprogramming,2019-09-18T14:40:19Z,"for all cases but per-context shader copies. this is why its best to cache ` ` not ` ` because: - you only care that the hash matches (multiple gpu objects can share the same opengl object) - you don't care about mutability concerns (object changes = hash changes, you don't give a fuck) - you don't care about lifetime of an object (object dies, caches object stays) you can then periodically clear this cache according to lru policy, you just set the max count of objects, if you get above that when retrieving an object, just delete the old ones + provide a function to clear these caches.",0,0.8775624632835388
325716500,358,devshgraphicsprogramming,2019-09-18T14:41:24Z,"make this a driver method, may use this for other stuff.",0,0.9898461699485779
325719732,358,devshgraphicsprogramming,2019-09-18T14:46:46Z,as in get the id i see it working like this [code block] otherwise i see this becoming a problem when contexts are created and destroyed. btw main context will always be id = 0 so first compilation (not from binary) can be stored there,0,0.9794154167175293
325720309,358,devshgraphicsprogramming,2019-09-18T14:47:33Z,this mutex can go to `copengldriver`... oh wait it already has one when you're trying to get the correct `sauxcontext`,0,0.9522947072982788
325721054,358,devshgraphicsprogramming,2019-09-18T14:48:32Z,a plain and length-immutable `gluint* mglnames` would be more appropriate,0,0.9942891597747803
325727423,358,Crisspl,2019-09-18T14:59:02Z,"yea, but i dont have to block whole `getthreadcontext()` just to get one gl name from one specific shader. it's shader-local for a reason",0,0.8716782927513123
325729633,358,Crisspl,2019-09-18T15:02:31Z,"it's shader-local for a reason, i cant make it driver method because it searches shader's member array",0,0.8439304828643799
325732056,358,devshgraphicsprogramming,2019-09-18T15:06:31Z,lets have a global id between 0 and the max context count-1 that is assinged to context,0,0.9913425445556641
326038144,358,devshgraphicsprogramming,2019-09-19T08:00:48Z,"this class shouldn't be making the opengl pipeline object... since its per-thread, just store/compute the hash and refcount the stages etc. hooked up to it",0,0.987362265586853
326169899,358,Crisspl,2019-09-19T13:21:21Z,"(it's not my file, all mine lives in include/irr/...) however.. there is vkimage [a link] and we need some class describing such binding (texture object + something `vkimagecreateinfo`-like) in order to bind ""storage images"" (glsl's `image2d` etc). otherwise we can't know miplevel and layer to bind.",0,0.9810516834259033
326430928,358,Crisspl,2019-09-20T00:18:04Z,"yea, thats comfy. i wonder if hash for pipelines could be just 5 bits (present/absent shader stage) and treat it similarly to like vaos are treated now (that is: 1) find vao with matching active attribs and divisors; 2) rebind index and vertex buffers (modify gl vao state) ) ? that would mean max of 32 possible hash values (actually even less) so no need for any lru cache",1,0.9138199687004089
326549334,358,devshgraphicsprogramming,2019-09-20T09:36:49Z,"ok so nuke this file, its probably one of my stubs. also you don't need a vkimagecreateinfo, just `vkdescriptorimageinfo` [a link]",0,0.9905645847320557
326553356,358,devshgraphicsprogramming,2019-09-20T09:46:56Z,"you can ignore imagelayout for now, but take a loot into this: - if descriptortype is vk_descriptor_type_combined_image_sampler, vk_descriptor_type_sampled_image, vk_descriptor_type_storage_image or vk_descriptor_type_input_attachment, the imageview and imagelayout members of any given element of pimageinfo must be a valid vkimageview and vkimagelayout, respectively - if descriptortype is vk_descriptor_type_storage_image or vk_descriptor_type_input_attachment, the imageview member of any given element of pimageinfo must have been created with the identity swizzle basically in vulkan, you cannot use a texture (vkimage) directly, only via imageviews (opengl texture views). this allows you to use arb_multibind for storage images because the mip level and layer is always 0 ;) create a stub `asset::imageview`,`asset::icpuimageview` and `video::igpuimageview` but only as a stub... i'll sort it out later in #148 and [a link]",0,0.9925359487533569
326553862,358,devshgraphicsprogramming,2019-09-20T09:48:17Z,"no, it cant be like that. because vao does not give a shit about which buffer is bound (cause they'll be rebound all the time). pipeline very much gives a shit about which shaders are bound (lots and lots of validation)",-1,0.9903913736343384
326555063,358,devshgraphicsprogramming,2019-09-20T09:51:19Z,"well it can help create, but nothing more",0,0.8713786602020264
326556113,358,devshgraphicsprogramming,2019-09-20T09:54:11Z,"wrong chain of inheritance, make a `class asset::ibuffer : public core::ibuffer, public asset::idescriptor {};`",0,0.9801227450370789
326556229,358,devshgraphicsprogramming,2019-09-20T09:54:32Z,"you probably have an uncomitted file, can't find it in the tree",0,0.9851976037025452
326556594,358,devshgraphicsprogramming,2019-09-20T09:55:27Z,"this is only temporary, i'll have to add an `iimageview` class",0,0.9831320643424988
326556799,358,devshgraphicsprogramming,2019-09-20T09:55:57Z,"yeah, about that chain of inheritance",0,0.9603719711303711
326556897,358,devshgraphicsprogramming,2019-09-20T09:56:15Z,also temporary,0,0.9643157720565796
326557321,358,devshgraphicsprogramming,2019-09-20T09:57:22Z,"nope, not all at once, do a `setactivedescriptorset(uint32_t index, const copengldescriptorset* descset)`",0,0.9917176961898804
326557597,358,devshgraphicsprogramming,2019-09-20T09:57:59Z,"can use multibind actually, as we'll force the usage of texture views",0,0.9929494857788086
326557789,358,devshgraphicsprogramming,2019-09-20T09:58:29Z,nuke set active texture,0,0.9459695219993591
326557890,358,devshgraphicsprogramming,2019-09-20T09:58:42Z,"sampler objects are actually shareable, so nuke.",0,0.9417076110839844
326561994,358,devshgraphicsprogramming,2019-09-20T10:09:56Z,union?,0,0.9850873947143555
326562404,358,devshgraphicsprogramming,2019-09-20T10:10:57Z,you can introduce sampler object (in opengl its shareable),0,0.9753275513648987
326562822,358,devshgraphicsprogramming,2019-09-20T10:12:01Z,"try not to ever use random integer literals, even if you know what they mean... constexpr is the shit.",-1,0.9902008175849915
326564884,358,devshgraphicsprogramming,2019-09-20T10:17:47Z,"there's a thing called dynamic ubo and ssbo in vulkan, you bind the buffers to descriptor sets (already baked in) but are able to change the offsets at runtime with very little overhead when you bind the sets to the commandbuffer / pipeline",0,0.992149829864502
326566259,358,devshgraphicsprogramming,2019-09-20T10:21:43Z,"its not, layer and levels can be 0 if you use a texture view. `layered` is always true for arb_multibind and the shader itself declares the access and format.",0,0.994508683681488
326566376,358,devshgraphicsprogramming,2019-09-20T10:22:00Z,can use same struct as `smultibindtextures`,0,0.9936692118644714
326568009,358,devshgraphicsprogramming,2019-09-20T10:27:04Z,need to support dynamic uniform and storage buffers in the whole engine!,0,0.9480374455451965
326568161,358,devshgraphicsprogramming,2019-09-20T10:27:31Z,missing storage image and storage texel buffer,0,0.9925984144210815
326720106,358,devshgraphicsprogramming,2019-09-20T17:01:41Z,you need a `virtual gettype` and a descriptor type enum,0,0.9938183426856995
326720330,358,devshgraphicsprogramming,2019-09-20T17:02:23Z,you need a common base class for `icputextureview` and `igputextureview` that will inherit from `idescriptor`,0,0.9948087930679321
326720773,358,devshgraphicsprogramming,2019-09-20T17:03:46Z,"yes, only from `copenglbufferview`",0,0.9928521513938904
326920717,358,Crisspl,2019-09-22T21:36:32Z,"not a good idea because resources can be bound to more than one descriptor types. especially buffers: ssbo, ubo, dynamic ssbo, dynamic ubo",0,0.8519503474235535
326920758,358,Crisspl,2019-09-22T21:37:42Z,now descriptor type is in idescriptorset::swritedescriptorset::descriptortype and it's sufficient for this,0,0.9917792677879333
326996142,358,devshgraphicsprogramming,2019-09-23T08:28:15Z,"maybe try to reorganise so scene comes last, buffer view and texture before descriptor layout, descriptor layout before pipeline layout, and descriptor set after pipeline layout, then the pipelines",0,0.9934996366500854
326996286,358,devshgraphicsprogramming,2019-09-23T08:28:37Z,`1ull`,0,0.9809845685958862
326996673,358,devshgraphicsprogramming,2019-09-23T08:29:30Z,still need those mutators so we can actually mutate the contents,0,0.9880698323249817
326997184,358,devshgraphicsprogramming,2019-09-23T08:30:50Z,need an `itextureview` at leat as a stub,0,0.9934385418891907
326997498,358,devshgraphicsprogramming,2019-09-23T08:31:42Z,"the size is only the creation parameters (mip range, layer range, format, and handle to actual texture to create view from, have i missed anything?)",0,0.9934808015823364
326998675,358,devshgraphicsprogramming,2019-09-23T08:35:01Z,"first check if `ds` is actually different to previously bound (just check by pointer), then you can proceed. then check for compatible layouts and the descriptor set preservation rules... unset higher indices if necessary. handle a `null` that is empty descriptor set case.",0,0.9944968819618225
326998749,358,devshgraphicsprogramming,2019-09-23T08:35:12Z,if null you need to unbind everything.,0,0.9518097043037415
327009887,358,devshgraphicsprogramming,2019-09-23T09:01:46Z,ok,0,0.8787186145782471
327012827,358,devshgraphicsprogramming,2019-09-23T09:09:17Z,"here's a way to do it #25 ideally you want to protect every opengl call that is likely to happen every frame (so almost all done by copengldriver) with `if (nextvalue!=currentvalue)` so that you're not pounding opengl calls pointlessly. when you want to change opengl state (current pipeline, rop params, vao, vao input buffers, etc. ), dont actually change it straight away, have a deferred change mechanism. obviously there are a few exceptions that cannot be done like this, most notably setting framebuffers and push constants (these need to be immediate, not deferred). sidenote, framebuffer change is a big call with big cost, so users will be careful not to call it recklessly. basically you want to avoid a performance penalty when user or implementation sets descriptor bindings to null, and then binds own descriptor sets. same for vao, and vao buffer bindings, etc. because what would happen, is first (probably multiple) `extglbind*(0)` calls before a bind call that actually binds an object. what you want to do, is to track some of the state (not all opengl state) that is relevant to things you're going to be deferring. so you have a current-state (last flushed) cache, and a next-state cache (values that you will set to if `flushstate` is called). then when your `setactivedescriptorset` and similar calls take place, you modify the ""next-state"" (which holds opengl values you will change to). this means that while your smart pointers to front irr api objects may change, etc. opengl will not be called until it is time. only when you call `flushstate` will you check if next opengl values are different from current opengl values and call the opengl functions if necessary, then update the current state values. **don't worry about opengl objects being deleted while having their handles on ""next-state"" thats a user error.** implement a `sauxcontext::flushstate(sauxcontext::gl_state_bits, copenglstate* optoutcurrentstate)` that will change the current state to next-state and fill out the copenglstate (already in the engine) class/struct with appropriate data (so it doesn't need to `glget` query it). expose an `idriver::flushallstate()` that will call `sauxcontext::flushstate(sauxcontext::gsb_all,nullptr)` under the hood. people won't usually have to call that, as push constants, {multi}dispatch{indirect} and {multi}draw{indirect} will do it under the hood for them. my proposal for the flags is (you should also flush/update the opengl state in the order of the flags, most costly to least) [code block] also a `sauxcontext::notifyofstate(const copenglstate& externallychangedstate)` could be useful for interop with middlewares (set the current state cache to that which is reported).",0,0.9650360941886902
327014646,358,devshgraphicsprogramming,2019-09-23T09:13:49Z,"no, no, no, no, no dynamic offset is not part of the descriptor set state you pass dynamic offsets in when you bind descriptor set in a command buffer (ivideodriver for now)",0,0.9935118556022644
327016798,358,devshgraphicsprogramming,2019-09-23T09:19:17Z,"you apply the extra offset when binding the descriptor set in `copengldriver` not here, because the dynamic offset is not part of the descriptor set state!",0,0.9938356280326843
327371976,358,devshgraphicsprogramming,2019-09-23T23:27:28Z,vulkan has no polygon offset? how are we going to do shadows?,0,0.9727613925933838
327372780,358,devshgraphicsprogramming,2019-09-23T23:31:09Z,"dont fuck around with this optimization, if i change every other buffer in a set of 32, you'll be calling multibind 16 times. if you really need to optimize then try and trim the front and the back of the range",-1,0.8924859166145325
327372892,358,devshgraphicsprogramming,2019-09-23T23:31:43Z,try and find one first and one count for one call,0,0.9869476556777954
327372920,358,devshgraphicsprogramming,2019-09-23T23:31:49Z,same comment as for the buffer multibind,0,0.9908304214477539
327372976,358,devshgraphicsprogramming,2019-09-23T23:32:03Z,same as for the buffer multibind,0,0.9831037521362305
327373094,358,devshgraphicsprogramming,2019-09-23T23:32:42Z,most of this is in my rather cumbersome `copenglstate` class,0,0.9424842000007629
327373300,358,devshgraphicsprogramming,2019-09-23T23:33:44Z,dont use constant literals for all the array sizes,0,0.9478631615638733
327373751,358,devshgraphicsprogramming,2019-09-23T23:35:44Z,"the number of available bind points on high-end cards for those is absolutely huge, don't store bound textures, just store descriptor set pointers.",0,0.7165027260780334
327373884,358,devshgraphicsprogramming,2019-09-23T23:36:29Z,"actually storing and shadowing all the bindpoints might be a huge overhead, just store descriptor set pointers and multibind everything if desc-set changes",0,0.9382985830307007
327374064,358,devshgraphicsprogramming,2019-09-23T23:37:22Z,introduce sampler objects (make descriptor set layout {immutable} and descriptor sets {combined image} take the object instead of ssamplerparams) and nuke this,0,0.9944316744804382
327378060,358,Crisspl,2019-09-23T23:55:50Z,"ofc it has, it's a todo because in opengl it's scattered on 3 glenable-s",0,0.9871076941490173
327378908,358,Crisspl,2019-09-24T00:00:26Z,"this one is a little tricky, that's why im creating extra `textagets` array here. for example: if previously in tex unit x was 2d texture and now we're going to bind 3d texture to tex unit x (or unbind anything - that is ""bind"" 0) i have to unbind texture 2d first and then bind the new one.",0,0.9191810488700867
327389923,358,Crisspl,2019-09-24T01:05:17Z,"yea, i was going to do it for quite some time. i wanted to do it today, but will be tomorrow",0,0.5820080041885376
327392368,358,Crisspl,2019-09-24T01:20:38Z,yea that's why i called it dirty,0,0.9437311291694641
327560167,358,devshgraphicsprogramming,2019-09-24T11:24:49Z,provide a `operator<` you are going to have so few elements in the cache that `unordered_map` will be slower than `map`,0,0.9879828691482544
327560671,358,devshgraphicsprogramming,2019-09-24T11:26:13Z,you can put this in `attribformatandcomponentcount` as special value `ecf_unknown`,0,0.9953545331954956
327561076,358,devshgraphicsprogramming,2019-09-24T11:27:19Z,we could experiment yes vs no,0,0.9886988997459412
327561163,358,devshgraphicsprogramming,2019-09-24T11:27:33Z,but my guess is to include,0,0.9578698873519897
328008471,358,devshgraphicsprogramming,2019-09-25T09:01:09Z,why do you even need these arrays?,0,0.9310385584831238
328009156,358,devshgraphicsprogramming,2019-09-25T09:02:38Z,"smart refcounted pointer, you dont want the system to go tits up because it was dropped because reference was not being held onto while its still set as current or next",0,0.9209066033363342
328009251,358,devshgraphicsprogramming,2019-09-25T09:02:50Z,wait why?,0,0.5909180045127869
328009416,358,devshgraphicsprogramming,2019-09-25T09:03:12Z,why is it s veector and not a map?,0,0.9802286028862
328011398,358,devshgraphicsprogramming,2019-09-25T09:07:56Z,todo,0,0.918040931224823
328011674,358,devshgraphicsprogramming,2019-09-25T09:08:36Z,todo,0,0.918040931224823
328011874,358,devshgraphicsprogramming,2019-09-25T09:09:08Z,nuked yet?,0,0.9776108860969543
328012094,358,devshgraphicsprogramming,2019-09-25T09:09:37Z,todo,0,0.918040931224823
328012789,358,devshgraphicsprogramming,2019-09-25T09:11:08Z,"could sort by pipeline shaders, then raster parameters, then descriptor set pointers",0,0.9935784339904785
328012902,358,devshgraphicsprogramming,2019-09-25T09:11:24Z,r.f.c.?,0,0.9702268838882446
328012997,358,devshgraphicsprogramming,2019-09-25T09:11:34Z,todo,0,0.918040931224823
328013363,358,devshgraphicsprogramming,2019-09-25T09:12:21Z,todo.,0,0.9295810461044312
328013414,358,devshgraphicsprogramming,2019-09-25T09:12:28Z,todo,0,0.918040931224823
328013468,358,devshgraphicsprogramming,2019-09-25T09:12:36Z,todo,0,0.918040931224823
328013886,358,devshgraphicsprogramming,2019-09-25T09:13:33Z,could pack this whole thing into a uint16_t,0,0.9915487766265869
328014002,358,devshgraphicsprogramming,2019-09-25T09:13:47Z,?,0,0.9557723999023438
328014112,358,devshgraphicsprogramming,2019-09-25T09:14:01Z,reorder.,0,0.9718227982521057
328014382,358,devshgraphicsprogramming,2019-09-25T09:14:36Z,"i'd use 1ull here, because no idea what happens if we do `uint64_t::operator>>=(uint32_t)`",0,0.9806801080703735
328014679,358,devshgraphicsprogramming,2019-09-25T09:15:14Z,how does this play now with the state cache?,0,0.9916521906852722
328014701,358,devshgraphicsprogramming,2019-09-25T09:15:17Z,how does this play now with the state cache?,0,0.9916521906852722
328014929,358,devshgraphicsprogramming,2019-09-25T09:15:48Z,`gsb_pipeline` and `gsb_raster_parameters` can be replaced by one `gsb_pipeline_and_raster_parameters`,0,0.9936178922653198
328015062,358,devshgraphicsprogramming,2019-09-25T09:16:06Z,!?,-1,0.8082060217857361
328015122,358,devshgraphicsprogramming,2019-09-25T09:16:16Z,!?,-1,0.8082060217857361
328015225,358,devshgraphicsprogramming,2019-09-25T09:16:28Z,lol,1,0.9600763916969299
328015332,358,devshgraphicsprogramming,2019-09-25T09:16:40Z,did you get around to doing it?,0,0.9864094853401184
328019139,358,Crisspl,2019-09-25T09:24:59Z,its how it was,0,0.9640241265296936
328019203,358,Crisspl,2019-09-25T09:25:07Z,its how it was,0,0.9640241265296936
328019708,358,Crisspl,2019-09-25T09:26:14Z,just read the code,0,0.9763991236686707
328045812,358,devshgraphicsprogramming,2019-09-25T10:27:56Z,arb_multi_bind no longer gives a shit about the target.,-1,0.9736062288284302
328047151,358,devshgraphicsprogramming,2019-09-25T10:31:31Z,only intel haswell on windows 8 and below doesn't have this extension. you can add it to the required extension list.,0,0.9891113638877869
328047506,358,devshgraphicsprogramming,2019-09-25T10:32:23Z,done?,0,0.9815027713775635
328047846,358,devshgraphicsprogramming,2019-09-25T10:33:22Z,we dont need this name array,0,0.9646477699279785
328047980,358,devshgraphicsprogramming,2019-09-25T10:33:40Z,can you reorder those bitfields so they make sense?,0,0.9927607774734497
328048118,358,Crisspl,2019-09-25T10:34:04Z,"nice, that simplifies stuff",1,0.9469970464706421
328048564,358,devshgraphicsprogramming,2019-09-25T10:35:23Z,add `sssamplerparams` inline inside `isampler` (could be `isampler::params`),0,0.9937332272529602
328048720,358,devshgraphicsprogramming,2019-09-25T10:35:53Z,ok now its a function to serialize and deserialize `asset::icpusampler`,0,0.988084614276886
328048926,358,devshgraphicsprogramming,2019-09-25T10:36:28Z,those enums should really be defined inside `isampler`,0,0.99411940574646
328049147,358,devshgraphicsprogramming,2019-09-25T10:37:02Z,i think these extensions are already core in opengl 4.3,0,0.9826980233192444
328049177,358,devshgraphicsprogramming,2019-09-25T10:37:06Z,i think these extensions are already core in opengl 4.3,0,0.9826980233192444
328093541,358,Crisspl,2019-09-25T12:31:50Z,"yea, but user doesn't bind descriptor sets. they're taken from 4 places in the engine (global,camera,scenenode,meshbuffer) and bound automatically. that's why i came up with an idea to have dynamic offsets in idescriptorset",0,0.9833610653877258
328100808,358,Crisspl,2019-09-25T12:47:27Z,"yea, im enabling/disabling all 3",0,0.9313570261001587
328101072,358,Crisspl,2019-09-25T12:48:01Z,"(in opengl theres 1 for each polygon mode: point, line, fill)",0,0.9893532991409302
328102484,358,Crisspl,2019-09-25T12:51:04Z,yea,0,0.9144599437713623
328102765,358,Crisspl,2019-09-25T12:51:39Z,currently including strides,0,0.9750044941902161
328103280,358,Crisspl,2019-09-25T12:52:42Z,"we dont need this whole file, going to be ""nuked""",0,0.9726646542549133
328105442,358,Crisspl,2019-09-25T12:57:16Z,since 4.4 (`gl_mirror_clamp_to_edge`),0,0.9944126009941101
328108038,358,Crisspl,2019-09-25T13:02:42Z,cant find any info about `gl_mirror_clamp_to_border_ext` support so probably never got to core,0,0.991395890712738
328170852,358,devshgraphicsprogramming,2019-09-25T14:53:17Z,ofc user can bind descirptor set `ivideodriver::binddescriptorsets()` would have to be indentical to command buffer op in vulkan [a link],0,0.9913946986198425
328171120,358,devshgraphicsprogramming,2019-09-25T14:53:43Z,you can actually kill the emulation code for that.,0,0.9697790145874023
328171595,358,devshgraphicsprogramming,2019-09-25T14:54:32Z,still explain?,0,0.9076446294784546
328171848,358,devshgraphicsprogramming,2019-09-25T14:54:59Z,lets not have these maximums anymore,0,0.9660719037055969
328172097,358,devshgraphicsprogramming,2019-09-25T14:55:22Z,this makes me happy,1,0.7107878923416138
328172184,358,devshgraphicsprogramming,2019-09-25T14:55:31Z,any reason not to improve on it?,0,0.938137948513031
328172372,358,devshgraphicsprogramming,2019-09-25T14:55:51Z,ok leave as is,0,0.9632357358932495
328173684,358,devshgraphicsprogramming,2019-09-25T14:58:05Z,remind me what's the true parameter?,0,0.9832679629325867
328187412,358,Crisspl,2019-09-25T15:21:59Z,ok now im confused about the design,-1,0.959047257900238
328188519,358,Crisspl,2019-09-25T15:24:04Z,so that i can call multibind call just once and instantly also unbind anything other than current descriptor sets' descriptors,0,0.9935933947563171
328190436,358,Crisspl,2019-09-25T15:27:19Z,`exitonfirstdelete` regarding lru cache,0,0.993787407875061
328192607,358,Crisspl,2019-09-25T15:31:21Z,dont you think vector is best here? (allocates much less often),0,0.982359766960144
328272506,358,devshgraphicsprogramming,2019-09-25T18:22:19Z,you no longer need to cache samplers,0,0.981867790222168
328272677,358,devshgraphicsprogramming,2019-09-25T18:22:39Z,if you don't have dsa use generate instead,0,0.9914543628692627
328272722,358,devshgraphicsprogramming,2019-09-25T18:22:46Z,you can delete this function,0,0.9831075668334961
328273256,358,devshgraphicsprogramming,2019-09-25T18:23:57Z,does igpudescriptorset hold onto the interface object refcounted pointers that provide these values?,0,0.9939256310462952
328281249,358,devshgraphicsprogramming,2019-09-25T18:41:45Z,"ah yes, nice",1,0.9889761209487915
328282420,358,devshgraphicsprogramming,2019-09-25T18:44:23Z,parameter buffer also needed (gl_parameter_buffer) and a driver feature query (some externsion or gl 4.6),0,0.9950161576271057
328283089,358,devshgraphicsprogramming,2019-09-25T18:45:58Z,is line 2031 your attempt at vulkan pipeline compatibility rules?,0,0.9917893409729004
328283500,358,devshgraphicsprogramming,2019-09-25T18:46:52Z,"why are you binding the full ranges!? only bind the range you need (at descriptor set granularity ofc), you've went from one extreme to the other.",0,0.7438315749168396
328284031,358,devshgraphicsprogramming,2019-09-25T18:48:06Z,"i'd rather pay for max 4 multibinds (1 per set), rather than have a dynamic allocation here every frame. these maximums will either be too small, or large enough to overflow a stack.",0,0.9733020663261414
328290070,358,devshgraphicsprogramming,2019-09-25T19:02:05Z,"the bottleneck is not cache population, but fast retrieval.",0,0.963981568813324
328291230,358,devshgraphicsprogramming,2019-09-25T19:04:57Z,"so its binary insertion sorted vector-based cache, vs map<> based cache if cache will be large enough not to lru evict any vaos in a frame on average scenes, then vector can stay. but other resources wil definitely need a map<>",0,0.9899807572364807
328295732,358,devshgraphicsprogramming,2019-09-25T19:16:41Z,and?,0,0.9768803119659424
328297124,358,devshgraphicsprogramming,2019-09-25T19:20:22Z,?,0,0.9557723999023438
328297160,358,devshgraphicsprogramming,2019-09-25T19:20:28Z,?,0,0.9557723999023438
328297233,358,devshgraphicsprogramming,2019-09-25T19:20:41Z,file nuked yet?,0,0.9888308644294739
328297429,358,devshgraphicsprogramming,2019-09-25T19:21:08Z,"this is file created by me, i think it needs to die there might be similar stubs around the `include` directory",0,0.9472765922546387
328297496,358,devshgraphicsprogramming,2019-09-25T19:21:21Z,?,0,0.9557723999023438
328297523,358,devshgraphicsprogramming,2019-09-25T19:21:24Z,?,0,0.9557723999023438
328297634,358,devshgraphicsprogramming,2019-09-25T19:21:40Z,?,0,0.9557723999023438
328297681,358,devshgraphicsprogramming,2019-09-25T19:21:46Z,?,0,0.9557723999023438
328298001,358,devshgraphicsprogramming,2019-09-25T19:22:32Z,?,0,0.9557723999023438
328298041,358,devshgraphicsprogramming,2019-09-25T19:22:38Z,?,0,0.9557723999023438
328298098,358,devshgraphicsprogramming,2019-09-25T19:22:44Z,?,0,0.9557723999023438
328298239,358,devshgraphicsprogramming,2019-09-25T19:23:01Z,?,0,0.9557723999023438
328298351,358,devshgraphicsprogramming,2019-09-25T19:23:17Z,?,0,0.9557723999023438
328298377,358,devshgraphicsprogramming,2019-09-25T19:23:20Z,?,0,0.9557723999023438
328298451,358,devshgraphicsprogramming,2019-09-25T19:23:29Z,?,0,0.9557723999023438
328298535,358,devshgraphicsprogramming,2019-09-25T19:23:40Z,?,0,0.9557723999023438
328298914,358,devshgraphicsprogramming,2019-09-25T19:24:35Z,?,0,0.9557723999023438
328299027,358,devshgraphicsprogramming,2019-09-25T19:24:55Z,?,0,0.9557723999023438
328299091,358,devshgraphicsprogramming,2019-09-25T19:25:05Z,done?,0,0.9815027713775635
328299148,358,devshgraphicsprogramming,2019-09-25T19:25:13Z,?,0,0.9557723999023438
328299300,358,devshgraphicsprogramming,2019-09-25T19:25:35Z,look at the vulkan command buffer operation,0,0.9875412583351135
328299508,358,devshgraphicsprogramming,2019-09-25T19:26:06Z,?,0,0.9557723999023438
328318607,358,Crisspl,2019-09-25T20:13:45Z,do i have to unbind previous bindings?,0,0.9884117245674133
328319832,358,Crisspl,2019-09-25T20:16:41Z,its done,0,0.9477436542510986
328322390,358,Crisspl,2019-09-25T20:23:01Z,"because ill do it later, why do you so much want to nuke files now at the moment? xd",0,0.9831364750862122
328327094,358,Crisspl,2019-09-25T20:34:07Z,whats the difference really,-1,0.524010419845581
328327385,358,Crisspl,2019-09-25T20:34:44Z,this grab is needed here,0,0.9857957363128662
328327744,358,Crisspl,2019-09-25T20:35:30Z,renamed long ago,0,0.9775986671447754
328327979,358,Crisspl,2019-09-25T20:36:03Z,this drop is needed here,0,0.9873074293136597
328328375,358,Crisspl,2019-09-25T20:36:58Z,i havent seen anywhere such requirement,0,0.9052399396896362
328328891,358,Crisspl,2019-09-25T20:38:07Z,this look completely different now,0,0.8288862109184265
328329011,358,Crisspl,2019-09-25T20:38:24Z,in upcoming commit,0,0.982671320438385
328329210,358,Crisspl,2019-09-25T20:38:52Z,ok,0,0.8787186145782471
328329575,358,Crisspl,2019-09-25T20:39:39Z,"no idea why, but will do some time",0,0.7043236494064331
328329742,358,Crisspl,2019-09-25T20:39:57Z,y,0,0.9237191677093506
328330025,358,Crisspl,2019-09-25T20:40:34Z,is it question? idk what i can say here,0,0.940358579158783
328368814,358,devshgraphicsprogramming,2019-09-25T22:35:53Z,why arent you dealing with smart pointers in the first place?,0,0.9565248489379883
328369421,358,devshgraphicsprogramming,2019-09-25T22:38:21Z,less code = make code review easier,0,0.9834794998168945
328369552,358,Crisspl,2019-09-25T22:38:48Z,read the code and u'll know why im doing this,0,0.9607792496681213
328369560,358,devshgraphicsprogramming,2019-09-25T22:38:50Z,space taken by enum in structs,0,0.9924808740615845
328370067,358,devshgraphicsprogramming,2019-09-25T22:40:46Z,id assume that an opengl function taking a type t will fuck up if pointer is not aligned to alingof(t) would be nice to at least have an assert,0,0.9506871700286865
328370224,358,devshgraphicsprogramming,2019-09-25T22:41:22Z,how doo you remove stuff from caches that are not vaos ?,0,0.9870992302894592
328370437,358,devshgraphicsprogramming,2019-09-25T22:42:14Z,same issue as here [a link],0,0.9898125529289246
328371246,358,Crisspl,2019-09-25T22:45:39Z,"copenglspecializedshader has its object-local cache for as we talked few days before, and theres no other than vao caches in copengldriver/sauxctx created by me. there will be cache for pipelines though ofc.. and deletion will look same as it lloks for vaos, so in `copengldriver::cleanupcontextbeforedelete()`",0,0.9844391942024231
328371583,358,devshgraphicsprogramming,2019-09-25T22:47:05Z,`ivideodriver::setdescriptorsets` needs to take a(n): - enum graphics vs compute - pipeline layout - first desc set ix - desc set count - up to 4 desc sets - dynamic offset count - dynamic offset array pointer excerpt from spec:,0,0.9950243830680847
328372535,358,devshgraphicsprogramming,2019-09-25T22:50:46Z,elaborate?,0,0.9892479777336121
328372548,358,Crisspl,2019-09-25T22:50:51Z,"yea, but now i dont see point of those descriptor sets in [global],camera,scenenode,meshbuf if user has api to bind them directly",0,0.9818652272224426
328373320,358,devshgraphicsprogramming,2019-09-25T22:54:06Z,the point of is to make the `scene` namespace usable `video` namespace must be independent of `scene` this is so we can have things like instanved scene nodes while having total access to the opengl 4.3-4.6 and vulkan api ( have our cake and eat it),0,0.9884859323501587
328374770,358,Crisspl,2019-09-25T23:00:44Z,"example: we have bound desc set which occupies ssbo binding points 0,1,2 another desc set is going to be bound at the same index which occupies just ssbo binding point 0. do i have to unbind ssbos from binding points 1 and 2?",0,0.9851824641227722
328375385,358,devshgraphicsprogramming,2019-09-25T23:03:19Z,best try and nuke it... afaik its irrlicht's poor counterpart to our state flush,-1,0.9348671436309814
328375630,358,devshgraphicsprogramming,2019-09-25T23:04:30Z,correct buffer clears on opengl wont take place if write masks are not enabled,0,0.9774006009101868
328375657,358,Crisspl,2019-09-25T23:04:37Z,"scene namespace requires video namespace, so it is usable without ""[global],camera,scenenode,meshbuf"" if there is api to bind descriptor sets. also: how engine decides which descriptor sets to bind? those from scenenode, meshbuffer, etc.. or the ones explicitly bound by user with api?",0,0.9954133629798889
328375699,358,devshgraphicsprogramming,2019-09-25T23:04:48Z,also necessar for color clears,0,0.9856005311012268
328375749,358,devshgraphicsprogramming,2019-09-25T23:05:02Z,its just a flush afaik,0,0.9847420454025269
328376086,358,devshgraphicsprogramming,2019-09-25T23:06:32Z,"just like `setmaterial` scenenode::render() sets the `setmaterial` by default, if user comes in and does their own `setmaterial` then we use that.",0,0.9944103360176086
328376468,358,devshgraphicsprogramming,2019-09-25T23:08:17Z,"""[global],camera,scenenode,meshbuf"" this stuff i only want to be considered at the `scene` namespace level. remember `smaterial` in meshbuffers? nothing in `video` set the material from meshbuffer for you! `setmaterial` had to be called before `draw`, `draw` did not automagically set the material for you from the meshbuffer, even though the meshbuffer had it!",0,0.9766343235969543
328376793,358,devshgraphicsprogramming,2019-09-25T23:09:52Z,why switch and not an array like above?,0,0.9848649501800537
328376890,358,devshgraphicsprogramming,2019-09-25T23:10:25Z,const static,0,0.977268397808075
328377673,358,devshgraphicsprogramming,2019-09-25T23:14:09Z,"i think resetrenderstates used to mean, flush state to default first chance you get basically resetrenderstates=true would be the equivalent of setting the next graphics pipeline state to its default values (although thats crazy inefficient and pointless most of the time)",-1,0.6456972360610962
328377728,358,devshgraphicsprogramming,2019-09-25T23:14:24Z,set next graphics state to default.,0,0.982964038848877
328381145,358,devshgraphicsprogramming,2019-09-25T23:30:06Z,"yes you do, but it still comes out at 5 multibinds top. this is why, descriptor sets n, n+1, ... will be disturbed by pipeline compatibility rules if the cumulative total of opengl bindpoint (ubo, ssbo) bindings will be different for descriptor set n . hence first a>=0 decriptor sets will be undisturbed, then b>=0 descriptor sets starting at index a will be disturbed (replaced by null descriptor set), then c>=0 descriptor sets starting at index a+b will be replaced, then d>=0 descriptor sets starting at index a+b+c will be disturbed. a particular set can only stay wholly bound or wholly disturbed. `a` needs to equal a *contiguous* subset starting at 0 of ""identically defined"" sets common in previous and current pipeline. so range a and b each must encompass whole descriptor sets in the current pipeline layout (not the old), c naturally encompasses whole descriptor sets by definition, whereas d encompasses the difference between the end of the old total binding range and new total binding range. note that d>0 if and only if current pipeline layout has more descriptors of a particular type than the old pipeline layout. is it clear? you just need the previous pipeline layout to figure out the indices and the ranges.",0,0.9859611988067627
328381469,358,devshgraphicsprogramming,2019-09-25T23:31:34Z,flush of a current state set to the default state was actually to implicitly enable depth and color masks as well as disable rasterizer discard ( a few things that would mess with framebuffer clearing and blitting),0,0.9844117760658264
328381569,358,devshgraphicsprogramming,2019-09-25T23:31:58Z,the optimize comment is about the fact that not everything really needed to be reset to default,0,0.992567777633667
328382478,358,Crisspl,2019-09-25T23:35:53Z,it comes down to this [a link],0,0.987307608127594
328383597,358,Crisspl,2019-09-25T23:41:34Z,"so its just setting a few blending parameters. is it even worth doing anything? especially hen we dont have `e_material_type` (`emt_*`) any more ? + you sure it means ""reset to default"" and not ""run some gl calls again no matter what""?",0,0.966574490070343
328449492,358,devshgraphicsprogramming,2019-09-26T06:17:33Z,"it means reset to default. its to avoid a nasty suprise when clearing the color and depth/stencil attachments. you can read glclearbuffer* and `glblit*` documentation and see that `glenable(gl_rasterizer_discard)` as well as depth,stenil,and color masks affect which channels get cleared if any (`glclearbuffer*` actually gets treated like a render call). the parameter here used to be ""reset everything to default"" but it as obviously overkill. alternatively instead of resetting this stuff here, you could reset it in the clear and blit functions (then reset back to the original in the next draw).",0,0.9517196416854858
328450032,358,devshgraphicsprogramming,2019-09-26T06:19:34Z,killed the `material_max_textures` variable?,0,0.9923473596572876
328451222,358,devshgraphicsprogramming,2019-09-26T06:23:09Z,will you also clear the pipeline cache same as vao when you get too much in cache? also what about framebuffer cache?,0,0.9863393306732178
328451668,358,devshgraphicsprogramming,2019-09-26T06:25:03Z,this would be unbind all descriptor sets,0,0.9923771619796753
328452065,358,devshgraphicsprogramming,2019-09-26T06:26:54Z,"frambuffersrgb is always true, and non debatable (shouldn't even be in the state)",0,0.9774495363235474
328452186,358,devshgraphicsprogramming,2019-09-26T06:27:16Z,"we should set this to always true, and non debatable (shouldn't even be in the state)",0,0.9628615975379944
328452268,358,devshgraphicsprogramming,2019-09-26T06:27:25Z,"is always true, and non debatable (shouldn't even be in the state)",0,0.9556933641433716
328452416,358,devshgraphicsprogramming,2019-09-26T06:27:57Z,"we use dsa style clears, so shouldn't track this",0,0.9794419407844543
328452568,358,devshgraphicsprogramming,2019-09-26T06:28:29Z,"if you do what you do in `clearzbuffer` in all other clear functions, then this is not needed anymore",0,0.99379563331604
328453222,358,devshgraphicsprogramming,2019-09-26T06:30:39Z,?,0,0.9557723999023438
328629700,358,Crisspl,2019-09-26T14:00:33Z,did you mean false? it was set to hardcoded false (`gldisable(gl_dither)`) when i saw it tomorrow,0,0.99407958984375
328630202,358,Crisspl,2019-09-26T14:01:28Z,yea,0,0.9144599437713623
329347605,358,devshgraphicsprogramming,2019-09-29T10:14:53Z,"yes, but i set it to false a long time ago before i understood the probable benefits.",0,0.9568163752555847
329348145,358,devshgraphicsprogramming,2019-09-29T10:27:23Z,you can nuke `e_4x3_transformation_state` and `e_projection_transformation_state` and just do a built-in include with the default definition of a per-camera and per-scene node descriptor set (ubos only really),0,0.995159924030304
329348189,358,devshgraphicsprogramming,2019-09-29T10:29:04Z,you can also kill all `draw2d*` functions,0,0.9930291771888733
329348401,358,devshgraphicsprogramming,2019-09-29T10:36:17Z,rasterparams is our pseudo-vulkan struct right?,0,0.9917739033699036
329348409,358,devshgraphicsprogramming,2019-09-29T10:36:37Z,`gl_parameter_buffer`,0,0.9881123900413513
329348441,358,devshgraphicsprogramming,2019-09-29T10:38:14Z,"when your function takes a smart refcounted pointer (especially in constructors) that you'll be keeping hold of, make functions that only take r-value references. this stops ontructor/desctructor being called, an atomic operation and freezing of the core.",0,0.9894201755523682
329348528,358,devshgraphicsprogramming,2019-09-29T10:39:24Z,why do you stil need this storage?,0,0.8408353924751282
329348548,358,devshgraphicsprogramming,2019-09-29T10:40:08Z,you can do bind new and unbind old at the same time.,0,0.9867027997970581
329348586,358,devshgraphicsprogramming,2019-09-29T10:41:45Z,why would it be necessary to unbind completely before setting new samplers and textures,0,0.9742533564567566
329348628,358,devshgraphicsprogramming,2019-09-29T10:43:20Z,[a link] [code block],0,0.9876729846000671
329587787,358,Crisspl,2019-09-30T13:51:05Z,"yea, but forces caller to drop ownership :/",-1,0.9866663813591003
329588197,358,Crisspl,2019-09-30T13:51:59Z,"nah, rasterparams is member of sopenglstate",0,0.9917049407958984
329918649,358,devshgraphicsprogramming,2019-10-01T07:46:26Z,"not really, it forces the programmer to do an explicit copy [code block] then when you see this in the code (especially when you actually write it) it will painfully stand out that there will be a `lock` instruction, and an atomic integer operation will be carried out (otherwise a programmer unfamiliar with the engine could be blissfully ignorant and pass smart pointers by copy ctor or copy assignment thinking they have little cost).",0,0.9560821056365967
329919368,358,devshgraphicsprogramming,2019-10-01T07:48:28Z,can you give me a list of things like `multisampleenable` that are in your `sopenglstate` and not in our pseudo-vulkan struct?,0,0.9942417144775391
330019506,358,Crisspl,2019-10-01T12:07:07Z,"everything from multisampleenable down to primitiverestartenable, just those few things",0,0.9601293802261353
332614547,358,devshgraphicsprogramming,2019-10-08T16:35:22Z,why are we still keeping this .cpp file around?,0,0.9569218754768372
332624669,358,Crisspl,2019-10-08T16:57:39Z,"yea, it should be deleted too",0,0.9750005006790161
332869226,358,devshgraphicsprogramming,2019-10-09T07:42:54Z,still a todo,0,0.948638379573822
332872340,358,devshgraphicsprogramming,2019-10-09T07:50:31Z,"maybe just instead of 1 pointer per each shader type, accept an array (or begin/end) of core::smart_refctd_ptr by r-value or something? then stages could be provided automatically, you'd just have to check if they are present. there will be more shader types in vulkan (mesh and raytracing)",0,0.9939749836921692
332873530,358,devshgraphicsprogramming,2019-10-09T07:53:58Z,"you can bank on reqtboalignment being a pot (assert if its not when retrieving it), so you can use one of the fast `isaligned` functions from core::",0,0.9913356304168701
332874945,358,devshgraphicsprogramming,2019-10-09T07:57:30Z,still a todo but maybe in another branch/pr,0,0.9744459986686707
332877493,358,devshgraphicsprogramming,2019-10-09T08:03:56Z,"we need a way to set individual descriptors on the `icpudescriptorset` (mutators), the layout can stay fixed/immutable.",0,0.9930804371833801
332878067,358,devshgraphicsprogramming,2019-10-09T08:05:26Z,something that hopefully takes `swritedescriptorset`,0,0.9941644072532654
332878486,358,devshgraphicsprogramming,2019-10-09T08:06:34Z,r-value array or iterator pair to move from would have been saner,0,0.9934014678001404
332878705,358,devshgraphicsprogramming,2019-10-09T08:07:10Z,you can remove that comment now xd,0,0.8844804167747498
332879056,358,devshgraphicsprogramming,2019-10-09T08:08:06Z,i'm not sure that we need the other _max_ down here on the next 10 lines,0,0.5486987829208374
332879816,358,devshgraphicsprogramming,2019-10-09T08:10:14Z,?,0,0.9557723999023438
332879910,358,devshgraphicsprogramming,2019-10-09T08:10:26Z,status?,0,0.9820219278335571
332879984,358,devshgraphicsprogramming,2019-10-09T08:10:41Z,progress?,0,0.9829741716384888
332880026,358,devshgraphicsprogramming,2019-10-09T08:10:48Z,?,0,0.9557723999023438
332880131,358,devshgraphicsprogramming,2019-10-09T08:11:04Z,still a todo.,0,0.9702584147453308
332880892,358,devshgraphicsprogramming,2019-10-09T08:12:48Z,"changing layout might actually be painful, but you should be able mutate which shaders are attached + params",-1,0.6637161374092102
332880971,358,devshgraphicsprogramming,2019-10-09T08:13:03Z,about that query?,0,0.9881410598754883
332881543,358,devshgraphicsprogramming,2019-10-09T08:14:24Z,ok actually we might not need those mutators for layout objects.,0,0.9666829705238342
332881622,358,devshgraphicsprogramming,2019-10-09T08:14:37Z,aaand?,0,0.9652407169342041
332881898,358,devshgraphicsprogramming,2019-10-09T08:15:22Z,shouldn't be using `bool` in things we want to dump to memory,0,0.9529750943183899
332882468,358,devshgraphicsprogramming,2019-10-09T08:16:49Z,status?,0,0.9820219278335571
332882811,358,devshgraphicsprogramming,2019-10-09T08:17:41Z,still no parent,0,0.897205650806427
332883021,358,devshgraphicsprogramming,2019-10-09T08:18:08Z,todo.,0,0.9295810461044312
332883072,358,devshgraphicsprogramming,2019-10-09T08:18:17Z,todo.,0,0.9295810461044312
332883153,358,devshgraphicsprogramming,2019-10-09T08:18:27Z,todo.,0,0.9295810461044312
332883198,358,devshgraphicsprogramming,2019-10-09T08:18:33Z,todo.,0,0.9295810461044312
332883222,358,devshgraphicsprogramming,2019-10-09T08:18:37Z,todo.,0,0.9295810461044312
332883251,358,devshgraphicsprogramming,2019-10-09T08:18:40Z,todo.,0,0.9295810461044312
332883349,358,devshgraphicsprogramming,2019-10-09T08:18:54Z,todo.,0,0.9295810461044312
332883482,358,devshgraphicsprogramming,2019-10-09T08:19:12Z,todo.,0,0.9295810461044312
332883510,358,devshgraphicsprogramming,2019-10-09T08:19:16Z,todo.,0,0.9295810461044312
332884402,358,devshgraphicsprogramming,2019-10-09T08:21:20Z,you should not make a full descriptor set (together with contents) via the constructor. on vulkan you have to `updatedescriptorset` after creating. the cpu object should also have mutators and those should be used instead of the constructor to fill the object.,0,0.993623673915863
332884484,358,devshgraphicsprogramming,2019-10-09T08:21:31Z,todo.,0,0.9295810461044312
332884587,358,devshgraphicsprogramming,2019-10-09T08:21:45Z,todo.,0,0.9295810461044312
332891762,358,devshgraphicsprogramming,2019-10-09T08:38:09Z,todo,0,0.918040931224823
332891860,358,devshgraphicsprogramming,2019-10-09T08:38:22Z,todo,0,0.918040931224823
332892682,358,devshgraphicsprogramming,2019-10-09T08:40:19Z,"only this enum can stay, the one above and below must go until transition to vulkan-only",0,0.9939178228378296
332897508,358,devshgraphicsprogramming,2019-10-09T08:51:12Z,todo.,0,0.9295810461044312
332897590,358,devshgraphicsprogramming,2019-10-09T08:51:22Z,todo.,0,0.9295810461044312
332898775,358,devshgraphicsprogramming,2019-10-09T08:54:05Z,change to `core::smart_refctd_ptr ` (smart pointer can be init to nullptr) it will still work the same way as all your grabs and drops,0,0.9942276477813721
333068781,358,devshgraphicsprogramming,2019-10-09T15:06:13Z,still need to nuke the transformation state stuff (just provide a built-in glsl include with a default descriptor set),0,0.9870674014091492
333077096,358,devshgraphicsprogramming,2019-10-09T15:20:31Z,"[a link] [a link] list of extensions you can check. you can add `virtual const std::string* getsupportedglslextensionsbegin() const = 0;` and `virtual const std::string* getsupportedglslextensionsend() const = 0;` methods to `ivideocapabilityreporter` that will give you the lists of `gl_` extensions supported (beware different on opengl and vulkan, also `spv_` extensions don't actually have a `spv_` prefix for glsl source being compiled, they are `gl_`) then `createspirvfromglsl` could take a pair of iterators for the extension strings to stick in as defines",0,0.9901513457298279
333088196,358,devshgraphicsprogramming,2019-10-09T15:40:28Z,status?,0,0.9820219278335571
333088427,358,devshgraphicsprogramming,2019-10-09T15:40:55Z,"see my latest comment on the latest commit,",0,0.9712640047073364
333089100,358,devshgraphicsprogramming,2019-10-09T15:42:13Z,"gonna mark this resolved, because its duplicate of the [a link] thread.",0,0.9770289063453674
333089689,358,devshgraphicsprogramming,2019-10-09T15:43:19Z,please do an alignment check.,0,0.9904914498329163
333089945,358,devshgraphicsprogramming,2019-10-09T15:43:43Z,status?,0,0.9820219278335571
333091447,358,devshgraphicsprogramming,2019-10-09T15:46:30Z,hows the move going?,0,0.9822714328765869
333091639,358,devshgraphicsprogramming,2019-10-09T15:46:52Z,todo.,0,0.9295810461044312
333091844,358,devshgraphicsprogramming,2019-10-09T15:47:15Z,todo.,0,0.9295810461044312
333095773,358,devshgraphicsprogramming,2019-10-09T15:54:27Z,"i wonder if we could template the common part ( count assets, create dynamic result array, eliminate duplicates and create redirects, get gpu objects from assets)",0,0.9867746829986572
333102870,358,devshgraphicsprogramming,2019-10-09T16:08:08Z,i'm not understanding the purpose of this loop,-1,0.8626626133918762
333103527,358,devshgraphicsprogramming,2019-10-09T16:09:36Z,but what if you have a combined image + sampler binding without an immutable sampler ?,0,0.9623186588287354
333104079,358,devshgraphicsprogramming,2019-10-09T16:10:46Z,what's so different about `igpudescriptorsetlayout::sbinding` from `icpudescriptorsetlayout::sbinding` ?,0,0.993533730506897
333104734,358,devshgraphicsprogramming,2019-10-09T16:12:10Z,request for comment.,0,0.9817350506782532
333105119,358,devshgraphicsprogramming,2019-10-09T16:12:59Z,our engine default is reverse z,0,0.9872283935546875
333105617,358,devshgraphicsprogramming,2019-10-09T16:14:04Z,engine default is vulkan default.,0,0.9887152314186096
333105752,358,devshgraphicsprogramming,2019-10-09T16:14:24Z,where is this function now?,0,0.9918060302734375
333106348,358,devshgraphicsprogramming,2019-10-09T16:15:46Z,todo.,0,0.9295810461044312
333106419,358,devshgraphicsprogramming,2019-10-09T16:15:56Z,todo.,0,0.9295810461044312
333106527,358,devshgraphicsprogramming,2019-10-09T16:16:10Z,todo.,0,0.9295810461044312
333106639,358,devshgraphicsprogramming,2019-10-09T16:16:25Z,?,0,0.9557723999023438
333106844,358,devshgraphicsprogramming,2019-10-09T16:16:51Z,status?,0,0.9820219278335571
333124807,358,Crisspl,2019-10-09T16:57:18Z,"its not engine default, its opengl default",0,0.9827262163162231
333125163,358,Crisspl,2019-10-09T16:58:06Z,gpusampler vs cpusampler,0,0.9843011498451233
333125805,358,Crisspl,2019-10-09T16:59:40Z,compute maxes of array sizes so i dont have to reallocate mem,0,0.949324369430542
333126466,358,Crisspl,2019-10-09T17:01:05Z,then theres no immutable sampler.. idk what you're asking really,0,0.7180710434913635
333166345,358,devshgraphicsprogramming,2019-10-09T18:29:19Z,where did the implementation of `binddescriptorsets` go?,0,0.9940094947814941
333166590,358,devshgraphicsprogramming,2019-10-09T18:29:50Z,unified the enum?,0,0.9922907948493958
333167641,358,devshgraphicsprogramming,2019-10-09T18:32:08Z,can we implement [a link] properly for the pipelines?,0,0.9935222268104553
333169527,358,devshgraphicsprogramming,2019-10-09T18:36:05Z,this little issue needs to be resolved asap its screwing with overall design,0,0.6172192692756653
333171354,358,devshgraphicsprogramming,2019-10-09T18:40:09Z,status on other resource caches?,0,0.9912516474723816
333171428,358,devshgraphicsprogramming,2019-10-09T18:40:18Z,todo.,0,0.9295810461044312
333172705,358,devshgraphicsprogramming,2019-10-09T18:42:48Z,todo.,0,0.9295810461044312
333177817,358,devshgraphicsprogramming,2019-10-09T18:53:45Z,doesn't skinned meshbuffer inherit from this?,0,0.9907270669937134
333178554,358,devshgraphicsprogramming,2019-10-09T18:55:15Z,ok but what about the immutable samper stuff?,0,0.9791572093963623
333179561,358,devshgraphicsprogramming,2019-10-09T18:57:28Z,so your code supports both immutable and mutable combined sampler (an image/texture + sampler pair) ?,0,0.9933224320411682
333179782,358,devshgraphicsprogramming,2019-10-09T18:57:59Z,so that whole expensive loop is just because the immutable cpu sampler needs to be swapped for a gpu sampler?,0,0.9826406836509705
333180086,358,devshgraphicsprogramming,2019-10-09T18:58:34Z,"ok, but where are you setting our defaults?",0,0.961974024772644
333180937,358,devshgraphicsprogramming,2019-10-09T19:00:23Z,just compare pointers,0,0.9813822507858276
333181175,358,devshgraphicsprogramming,2019-10-09T19:00:58Z,or does vulkan spec say otherwise? (pretty sure it really cares about object handles to immutalbe samplers being identical),0,0.9766663908958435
333188510,358,devshgraphicsprogramming,2019-10-09T19:18:34Z,you need to compare field by field.,0,0.9817517399787903
333189296,358,devshgraphicsprogramming,2019-10-09T19:20:31Z,still need the driver feature queries for these things,0,0.9705360531806946
333190383,358,devshgraphicsprogramming,2019-10-09T19:23:10Z,"wait what!? you got it wrong, vulkan counts from index 0 not backwards! loop should be `for (uint32_t i=0u; i<compatibilitylimit; i++)`",-1,0.9730972051620483
333191149,358,Crisspl,2019-10-09T19:25:04Z,well yea ofc but obviously mutable sampler is in descriptor set,0,0.8565770983695984
333192456,358,Crisspl,2019-10-09T19:28:11Z,"same place as it was before, copengldriver::initdriver() or something like this",0,0.9907029867172241
333192789,358,devshgraphicsprogramming,2019-10-09T19:29:03Z,"maybe make `uint32_t _dynoffsetcount, const uint32_t* _dynoffsets` into just a smart refctd array passed by r-value, then add a smart refcounted dynamic array member `dynamicoffsets[4]` to `nextstate` this shouldn't ever be a problem as if layout changes (is incompatible) then the dynamic offsets will be dropped, its 100% the case that if the dynamic offset arrays are different lengths the pipelines will be incompatible. you can still compare the contents of two identical length dynamic offset arrays, and decide whether to refresh the bindings or not. or you can just keep a copy of the offset array (base offset + dynamic) for multibind of buffers (you'll recompute every `binddescriptorsets`) but only ever fire off the multibind if something changes",0,0.992504358291626
333193442,358,devshgraphicsprogramming,2019-10-09T19:30:44Z,the use of `std::copy` and stack arrays is still pointless here.,0,0.5922572016716003
333193548,358,Crisspl,2019-10-09T19:31:01Z,"vulkan just says that descriptor sets has to be ""identically defined"" and not sure what this means. but you might be right that immutable samplers names has to be the same",0,0.9349860548973083
333204559,358,devshgraphicsprogramming,2019-10-09T19:58:10Z,"this is still an issue in the latest commit. to recap only the following are possible: # everything changes then you do 1 multibind per resource type x (ubo,ssbo,texture) with `count = previous pipeline layout total count of resource of type x across all descriptor sets`, since you're unbinding all array/pointer parameters to opengl multibind functions can be `nullptr` # n (>0) descriptor sets stay the same (after validation rules) there are two stages to this, bind new and unbind old. ## bind new nullptr (no descriptor) counts as a ""new"" descriptor binding. then you do 1 multibind per resource type x per new descriptor set bound, with `first = previous pipeline layout total count of resource of type x across descriptor sets in slots [0,n)` the pointer/array parameters shall be sourced **directly** from precomputed (if desc. set nullptr, then parameters are nullptr) arrays inside the new descriptor sets in slots [n, n + new descriptor set count] ## unbind old for every resource type x, you take the difference between `previous pipeline layout total count of resource of type x across all descriptor sets` and `new pipeline layout total count of resource of type x across all descriptor sets` if the difference is positive (previous layout had more bindings, then you do 1 multibind per resource type x (ubo,ssbo,texture) with `first = previous pipeline layout total count of resource of type x across all descriptor sets` and `count = the above mentioned difference`, since you're unbinding all array/pointer parameters to opengl multibind functions can be `nullptr`",0,0.9840058088302612
333205661,358,devshgraphicsprogramming,2019-10-09T20:01:02Z,all the other `copengldriver::clear*` need similar state setting,0,0.9934930205345154
333206042,358,devshgraphicsprogramming,2019-10-09T20:02:06Z,you also need to disable rasterizer discard state,0,0.986203670501709
333206262,358,devshgraphicsprogramming,2019-10-09T20:02:39Z,maybe best to reset in clear and blit functions (then reset back to the original in the next draw).,0,0.9936550855636597
333206391,358,devshgraphicsprogramming,2019-10-09T20:02:59Z,r.f.c.?,0,0.9702268838882446
333206504,358,devshgraphicsprogramming,2019-10-09T20:03:16Z,?,0,0.9557723999023438
333207234,358,devshgraphicsprogramming,2019-10-09T20:05:04Z,are we bothering with `removealltextures` and `removeallmultisampletextures` ?,0,0.9943130016326904
333207573,358,devshgraphicsprogramming,2019-10-09T20:05:57Z,please enable dither,0,0.988021731376648
333207974,358,devshgraphicsprogramming,2019-10-09T20:06:57Z,multisample enable is always true whenever the pipeline says its using more than 1 sample,0,0.9886004328727722
333210074,358,devshgraphicsprogramming,2019-10-09T20:12:09Z,"and vulkan dictates that the pipeline must declare the same number of samples as the framebuffer attachment it will draw to so yes, oit example will be broken (vulkan does not allow drawing to multisample target with multisample disabled to abuse it for oit) until we expose the user configurable sample locations extension: - [a link] - [a link] - [a link] - [a link] - [a link]",0,0.98431396484375
333210662,358,devshgraphicsprogramming,2019-10-09T20:13:30Z,why are you tracking `clipcontrol` ?,0,0.9924935102462769
333211148,358,devshgraphicsprogramming,2019-10-09T20:14:31Z,todo. [a link],0,0.9880064129829407
333211479,358,devshgraphicsprogramming,2019-10-09T20:15:18Z,why do you track `primitiverestartenable` and `depthrange` ?,0,0.9937263131141663
333211734,358,devshgraphicsprogramming,2019-10-09T20:15:54Z,see [a link],0,0.9869033098220825
333211796,358,devshgraphicsprogramming,2019-10-09T20:16:01Z,see [a link],0,0.9869033098220825
333211862,358,devshgraphicsprogramming,2019-10-09T20:16:10Z,see [a link],0,0.9869033098220825
333217960,358,devshgraphicsprogramming,2019-10-09T20:30:24Z,enable,0,0.9280634522438049
333218797,358,Crisspl,2019-10-09T20:32:24Z,you sure? as for now it's been disabled [a link],0,0.9835725426673889
333237449,358,devshgraphicsprogramming,2019-10-09T21:16:22Z,"yes i'm sure, this stuff could help with 6bit (g-sync) displays",0,0.9612768888473511
333238174,358,devshgraphicsprogramming,2019-10-09T21:18:25Z,resolved.,0,0.9865591526031494
333238326,358,devshgraphicsprogramming,2019-10-09T21:18:49Z,ok it just looked a bit like it was designed for immutable sampler only.,0,0.9640812873840332
333238520,358,devshgraphicsprogramming,2019-10-09T21:19:21Z,i think comparing handles is more strict so less likely to run into problems that way.,0,0.9420575499534607
333275271,358,Crisspl,2019-10-09T23:27:34Z,"well now when i think more about this, i think its completely fucked approach. `bindgraphicspipeline()` shouldnt touch descriptor sets at all, and `binddescriptorsets()` should get extra param `_pipelinelayout` (just like vulkan function has). however vulkan spec says i cant know which pipeline layout was used to bind descriptor set unless we have a requirement that before every call to `bindgraphicspipeline()` must go *maximum* of 1 call to `binddescriptorsets()` (then i know that all bound descriptor sets were bound with pipeline layout compatible with layout of currently bound pipeline) this seems far more tricky than i thought at first look.. and im not sure i understand it correctly",-1,0.9537149667739868
333283036,358,Crisspl,2019-10-10T00:04:41Z,"probably yes, i cant see other reason now",0,0.9432471394538879
333403665,358,devshgraphicsprogramming,2019-10-10T08:57:20Z,"as much as i would like that to be the case, its the behaviour under the vulkan spec. that is also a valid approach. well in my current proposal if `bindgraphicspipeline` call unbinds no longer compatible descriptor sets (but without flushing state) then by the time you come around with `binddescriptorsets` you are 100% sure that any non-null bound descriptor sets are compatible with the currently bound pipeline. its a similar situation to calling something akin to `binddescriptorsets(....,driver->getcurrentpipeline()->getlayout)` , vulkan only takes the pipeline layout parameter to bind descriptor sets to count the hardware binding indices properly for opengl es 3.2 class hardware.",0,0.961330235004425
333649741,358,Crisspl,2019-10-10T17:40:25Z,theres no gpu skinned meshbuffer,0,0.9606612920761108
333653191,358,Crisspl,2019-10-10T17:48:09Z,me too thats why i leaved them :p,1,0.9720668196678162
333655923,358,Crisspl,2019-10-10T17:54:11Z,you mean remove this enum val?,0,0.9913049936294556
333660421,358,Crisspl,2019-10-10T18:04:02Z,yes,0,0.9659429788589478
333665041,358,Crisspl,2019-10-10T18:14:13Z,"i dont understand your doubts really, shift by number greater than type's bit-length is ub anyway so it could be uint8_t just as well (since theres no such long type in c++)",-1,0.6822150945663452
333666345,358,Crisspl,2019-10-10T18:17:11Z,part of `flushstate()`,0,0.9923837780952454
333667677,358,Crisspl,2019-10-10T18:20:08Z,"will do that while making pipeline cache in copengldriver, in plans for tomorrow",0,0.9932918548583984
333668986,358,Crisspl,2019-10-10T18:22:51Z,"framebuffer cache totally not important right now since it just works, todo when things will be working not sure if it can be done the same if pipeline cache is going to be map (not vector)",0,0.9399374723434448
333672283,358,Crisspl,2019-10-10T18:30:08Z,i dont know which comment goes to which commit,-1,0.6111883521080017
333672539,358,Crisspl,2019-10-10T18:30:37Z,but i think i get which one u mean,0,0.7806975841522217
333672959,358,Crisspl,2019-10-10T18:31:35Z,done,0,0.8974218964576721
333676206,358,Crisspl,2019-10-10T18:39:01Z,"`primitiverestartenable` because it depends on pipeline `depthrange` - not sure, most likely it was in your state tracker or used somewhere.. idk",0,0.9815357327461243
333676667,358,Crisspl,2019-10-10T18:40:06Z,"i dont see how ""built-in glsl include with a default descriptor set"" and ""transformation state stuff"" are substitutes?",0,0.9892093539237976
333680372,358,devshgraphicsprogramming,2019-10-10T18:48:31Z,how does it depend on the pipeline? p.s. don't track and concern yourself with `depthrange`.,0,0.978425920009613
333681895,358,devshgraphicsprogramming,2019-10-10T18:52:20Z,you're correct.,0,0.8824017643928528
333682179,358,Crisspl,2019-10-10T18:52:57Z,what has to be enabled/disabled for stencil clears to work? and for color clears as well? something beside write masks?,0,0.9939378499984741
333682567,358,Crisspl,2019-10-10T18:53:48Z,i guess i should bring back state from before clear?,0,0.982135534286499
333682833,358,Crisspl,2019-10-10T18:54:24Z,not sure if needed,0,0.8528088927268982
333688709,358,Crisspl,2019-10-10T19:07:38Z,i dont know what u mean,-1,0.8431004285812378
333754318,358,Crisspl,2019-10-10T22:02:53Z,"sprimitiveassemblyparams::primitiverestartenable and sprimitiveassemblyparams is obviously member of irenderpassindependentpipeline, corresponds to `vkpipelineinputassemblystatecreateinfo::primitiverestartenable` which is member of `vkgraphicspipelinecreateinfo `",0,0.995040237903595
333882980,358,devshgraphicsprogramming,2019-10-11T08:32:27Z,disable: - rasterizer discard - scissor test enable: - color write mask (color clear) - depth write mask (depth clear) - stencil write mask both front and back (stencil clear),0,0.9924848675727844
333883275,358,devshgraphicsprogramming,2019-10-11T08:33:11Z,kill them,0,0.6583251357078552
333884610,358,devshgraphicsprogramming,2019-10-11T08:36:44Z,since textures and multisample textures are share-able there should be no reason for us to track them in the driver.,0,0.9896131157875061
333884936,358,devshgraphicsprogramming,2019-10-11T08:37:38Z,lets not track it then,0,0.9572821259498596
333887559,358,devshgraphicsprogramming,2019-10-11T08:44:33Z,setting and bringing back state is what the clear itself is supposed to do. i don't think there's any reason anymore for the `setrendertarget` to do anything.,0,0.9712977409362793
333900318,358,devshgraphicsprogramming,2019-10-11T09:17:00Z,"wait, what why?",-1,0.7487999200820923
333900897,358,devshgraphicsprogramming,2019-10-11T09:18:20Z,its wrong... again,-1,0.953181266784668
333905318,358,devshgraphicsprogramming,2019-10-11T09:29:13Z,remove `edt_sampler` and `edt_sampled_image`,0,0.9936770796775818
333914570,358,devshgraphicsprogramming,2019-10-11T09:52:09Z,"first replace everything with `matrix***simd` types, then # for people and parts of the engine only using the `video` namespace `whatever/path/we/have/for/builtins/defaultcameradata.glsl` [code block] `whatever/path/we/have/for/builtins/defaultscenenodedata.glsl` [code block] `whatever/path/we/have/for/builtins/defaultcameraubo/location/${loc}.glsl` [code block] `whatever/path/we/have/for/builtins/defaultscenenodeubo/location/${loc}.glsl` [code block] then people will need to know to push new data (via streaming update or upload everything up-front then rebind at different offset before every draw). # fixing the `scene` namespace will be piss-easy. we allow each scene node to hold a descriptor set + offsets, and also the scene manager (the global desc set). [code block] now the difference is that during the override of `iscenenode::render()` the camera scene node will bind its descriptor set to slot 1, but a regular scene node will bind to slot 2. any meshbufferscenenode will take the descriptor set + dynamic offsets attached to a meshbuffer and bind it to slot 3, as well as push the constants just before the draw. and obviously `iscenemanager::drawall()` shall begin by binding descriptor set to slot 0. ## how the data will be updated we will need a `scene::descriptorsetupdater` class and a default instantiation of it that will run after `iscenenode::onanimate()` is finished, think of it like an animation call-back. i see a method like `scene::descriptorsetupdater::update(scene::iscenenode*,video::igpudescriptorset*,core::smart_refctd_dynamic_array * offsets)` the default one for cameras will stream update the buffer in location 0 at offset assigned with the matrices as expected by the `defaultperviewubo`. the default one for mesh scene nodes will do the same for `defaultperscenenodeubo`. user can derive and make a different descriptor-set-updater. i plan to replace this prototype with something much faster when i come to do #96 and bucket-rendering.",0,0.9942930936813354
333914880,358,devshgraphicsprogramming,2019-10-11T09:52:59Z,"ok, cool then i can resolve.",1,0.7329387068748474
333915833,358,devshgraphicsprogramming,2019-10-11T09:55:40Z,"i can't see where in the code you're purging that cache, it just grows without bound.",0,0.9002804756164551
333916397,358,devshgraphicsprogramming,2019-10-11T09:57:12Z,"well the vector is sorted by hash, so the lru removal is unfortunately a linear search xd not sure you could do any worse with a map",0,0.7946725487709045
333918544,358,devshgraphicsprogramming,2019-10-11T10:02:55Z,marking as resolved because i want to move the discussion to an issue #376,0,0.9893252849578857
333918812,358,devshgraphicsprogramming,2019-10-11T10:03:53Z,"this is resolved, but useful to review for the two biggest unresolves in the whole pr. moving conversation to #376",0,0.9738906621932983
333919070,358,devshgraphicsprogramming,2019-10-11T10:04:41Z,"kinda resolved, but not quite, moving to #376",0,0.984776496887207
333919288,358,devshgraphicsprogramming,2019-10-11T10:05:18Z,see #376,0,0.978775143623352
333938872,358,Crisspl,2019-10-11T11:04:01Z,i meant key type is now smart_refctd_ptr,0,0.9861882328987122
333973151,358,Crisspl,2019-10-11T12:47:29Z,idk what i meant by this really. now i simplified it to what you wrote here [a link] but optimized a little (if prev and curr pipeline layouts are compatible for set n and `currstate.set[n]==nextstate.set[n]` then binding set n would be redundant),0,0.9569129347801208
334028646,358,devshgraphicsprogramming,2019-10-11T14:46:30Z,"had slight vulkan spec clarification, written down in #376",0,0.9875017404556274
334029290,358,devshgraphicsprogramming,2019-10-11T14:47:42Z,i think we agreed that we need `arb_multi_bind` from now on.,0,0.9724100232124329
334029752,358,devshgraphicsprogramming,2019-10-11T14:48:42Z,we need to talk this over in person (call) and come to some sort of a conclusion in #376,0,0.9825191497802734
334030129,358,devshgraphicsprogramming,2019-10-11T14:49:33Z,great but need to be able to purge the cache totally as well as have the engine purge it periodically.,1,0.7718506455421448
334066621,358,Crisspl,2019-10-11T16:07:48Z,cshaderintrospector isnt supposed to be one global object. it's not even refcounted. see how its used in copengldriver::creategpuspecializedshader(),0,0.888942301273346
334066809,358,Crisspl,2019-10-11T16:08:18Z,yea it's just not used,0,0.9520464539527893
334074158,358,devshgraphicsprogramming,2019-10-11T16:27:51Z,ok that clears it up for me,0,0.9783601760864258
334074346,358,devshgraphicsprogramming,2019-10-11T16:28:22Z,kill it,0,0.6252221465110779
334256075,358,devshgraphicsprogramming,2019-10-12T22:58:23Z,"yeah maybe we should make an exception (and allow for copy ctoring), otherwise this will be bugprone 101",0,0.7964410781860352
334256080,358,devshgraphicsprogramming,2019-10-12T22:58:54Z,i would put the generic tracking here.,0,0.9898248314857483
334416227,358,devshgraphicsprogramming,2019-10-14T10:27:02Z,seriously.,-1,0.94746994972229
334416723,358,devshgraphicsprogramming,2019-10-14T10:28:32Z,not quite (they are combined maxes across all pipeline stages) but they aren't obscene.,-1,0.9508804082870483
334418111,358,devshgraphicsprogramming,2019-10-14T10:32:34Z,i'd actually move that up to cnull driver.,0,0.9852107167243958
334420738,358,devshgraphicsprogramming,2019-10-14T10:40:49Z,just make sure we never gluseprogram and we'll be ok.,0,0.9779326915740967
334438041,358,devshgraphicsprogramming,2019-10-14T11:35:01Z,need setshader and other [raster] params (but layout is immutable),0,0.9929094314575195
334517945,358,Crisspl,2019-10-14T14:44:46Z,that would require dividing gl state tracking (which is per-context) into copengldriver and cnulldriver.. practically undoable,-1,0.8737452626228333
334519389,358,Crisspl,2019-10-14T14:47:40Z,resolved,0,0.964900553226471
334519715,358,Crisspl,2019-10-14T14:48:16Z,gluseprogram we'll be used for compute pipelines,0,0.9799597263336182
334520171,358,Crisspl,2019-10-14T14:49:08Z,resolved,0,0.964900553226471
334520302,358,Crisspl,2019-10-14T14:49:22Z,resolved,0,0.964900553226471
334520790,358,Crisspl,2019-10-14T14:50:20Z,resolved,0,0.964900553226471
334520880,358,Crisspl,2019-10-14T14:50:29Z,resolved,0,0.964900553226471
334520972,358,Crisspl,2019-10-14T14:50:40Z,resolved,0,0.964900553226471
334522504,358,Crisspl,2019-10-14T14:53:46Z,"resolved (it's gl default, not our default)",0,0.9912382960319519
334522787,358,Crisspl,2019-10-14T14:54:20Z,resolved,0,0.964900553226471
334522872,358,Crisspl,2019-10-14T14:54:31Z,resolved [a link],0,0.9833270907402039
334524145,358,Crisspl,2019-10-14T14:57:13Z,resolved,0,0.964900553226471
334524246,358,Crisspl,2019-10-14T14:57:25Z,resolved,0,0.964900553226471
334524595,358,devshgraphicsprogramming,2019-10-14T14:58:13Z,then only set to 0 if compute pipeline was used before after last flush.,0,0.9912654757499695
334525016,358,Crisspl,2019-10-14T14:59:04Z,resolved,0,0.964900553226471
334525064,358,devshgraphicsprogramming,2019-10-14T14:59:09Z,"ok, but can you put some of the code (as a static protected function) or in some sort of a base to the state tracking object into cnulldriver namespace?",0,0.9946426153182983
334525714,358,devshgraphicsprogramming,2019-10-14T15:00:27Z,"basically the code that decides whether to throw out a descriptor set is pretty generic and will be needed in vulkan, would be sad to have it buried deep in copengldriver",-1,0.9893699884414673
334525829,358,Crisspl,2019-10-14T15:00:39Z,resolved,0,0.964900553226471
334525967,358,Crisspl,2019-10-14T15:00:56Z,resolved,0,0.964900553226471
334526101,358,Crisspl,2019-10-14T15:01:11Z,resolved,0,0.964900553226471
334526375,358,Crisspl,2019-10-14T15:01:46Z,resolved,0,0.964900553226471
334526499,358,Crisspl,2019-10-14T15:02:01Z,resolved,0,0.964900553226471
334528427,358,Crisspl,2019-10-14T15:06:02Z,resolved,0,0.964900553226471
334528784,358,Crisspl,2019-10-14T15:06:39Z,resolved,0,0.964900553226471
334528899,358,Crisspl,2019-10-14T15:06:50Z,resolved,0,0.964900553226471
334528988,358,Crisspl,2019-10-14T15:07:00Z,resolved,0,0.964900553226471
334529622,358,Crisspl,2019-10-14T15:08:21Z,resolved,0,0.964900553226471
334534516,358,Crisspl,2019-10-14T15:18:44Z,resolved,0,0.964900553226471
334535540,358,Crisspl,2019-10-14T15:21:06Z,resolved,0,0.964900553226471
334536363,358,Crisspl,2019-10-14T15:23:00Z,"yes, resolved",0,0.9284188747406006
334536446,358,Crisspl,2019-10-14T15:23:10Z,resolved,0,0.964900553226471
334536521,358,Crisspl,2019-10-14T15:23:19Z,resolved,0,0.964900553226471
334536588,358,Crisspl,2019-10-14T15:23:29Z,resolved,0,0.964900553226471
334537148,358,Crisspl,2019-10-14T15:24:41Z,resolved,0,0.964900553226471
334537218,358,Crisspl,2019-10-14T15:24:50Z,resolved,0,0.964900553226471
334537577,358,Crisspl,2019-10-14T15:25:34Z,pipeline cache partially done,0,0.9898479580879211
334537706,358,Crisspl,2019-10-14T15:25:52Z,resolved,0,0.964900553226471
334537798,358,Crisspl,2019-10-14T15:26:03Z,resolved,0,0.964900553226471
334537858,358,Crisspl,2019-10-14T15:26:11Z,resolved,0,0.964900553226471
334537913,358,Crisspl,2019-10-14T15:26:20Z,resolved,0,0.964900553226471
334538163,358,Crisspl,2019-10-14T15:26:53Z,"decided to use vector, resolved",0,0.9919543862342834
334538253,358,Crisspl,2019-10-14T15:27:03Z,resolved,0,0.964900553226471
334538337,358,Crisspl,2019-10-14T15:27:12Z,resolved,0,0.964900553226471
334538529,358,Crisspl,2019-10-14T15:27:38Z,resolved,0,0.964900553226471
334538763,358,Crisspl,2019-10-14T15:28:09Z,resolved,0,0.964900553226471
334539504,358,Crisspl,2019-10-14T15:29:44Z,resolved,0,0.964900553226471
334539754,358,Crisspl,2019-10-14T15:30:16Z,to implement when it's actually getting done,0,0.9844087958335876
334540370,358,Crisspl,2019-10-14T15:31:37Z,resolved,0,0.964900553226471
334540533,358,Crisspl,2019-10-14T15:31:59Z,resolved,0,0.964900553226471
334540761,358,Crisspl,2019-10-14T15:32:32Z,resolved,0,0.964900553226471
334540800,358,Crisspl,2019-10-14T15:32:38Z,resolved,0,0.964900553226471
334540908,358,Crisspl,2019-10-14T15:32:50Z,resolved,0,0.964900553226471
334541002,358,Crisspl,2019-10-14T15:33:02Z,resolved,0,0.964900553226471
334541050,358,Crisspl,2019-10-14T15:33:09Z,resolved,0,0.964900553226471
334541083,358,Crisspl,2019-10-14T15:33:15Z,resolved,0,0.964900553226471
334541129,358,Crisspl,2019-10-14T15:33:21Z,resolved,0,0.964900553226471
334541241,358,Crisspl,2019-10-14T15:33:34Z,resolved,0,0.964900553226471
334541322,358,Crisspl,2019-10-14T15:33:44Z,resolved,0,0.964900553226471
334542083,358,Crisspl,2019-10-14T15:35:37Z,resolved,0,0.964900553226471
334542189,358,Crisspl,2019-10-14T15:35:50Z,resolved,0,0.964900553226471
334542333,358,Crisspl,2019-10-14T15:36:06Z,resolved,0,0.964900553226471
334542570,358,Crisspl,2019-10-14T15:36:40Z,using std::array,0,0.9862518906593323
334542726,358,Crisspl,2019-10-14T15:37:03Z,resolved,0,0.964900553226471
334542868,358,Crisspl,2019-10-14T15:37:21Z,resolved,0,0.964900553226471
334543190,358,Crisspl,2019-10-14T15:37:55Z,resolved,0,0.964900553226471
334543222,358,Crisspl,2019-10-14T15:38:01Z,resolved,0,0.964900553226471
334543322,358,Crisspl,2019-10-14T15:38:14Z,resolved,0,0.964900553226471
334543824,358,Crisspl,2019-10-14T15:39:21Z,"resolved however when i looked in spirv-cross code i couldnt see actually gathering this decoration from spv, needs testing",0,0.9895957112312317
334544377,358,Crisspl,2019-10-14T15:40:32Z,resolved,0,0.964900553226471
334544525,358,Crisspl,2019-10-14T15:40:51Z,resolved,0,0.964900553226471
334544723,358,Crisspl,2019-10-14T15:41:17Z,resolved,0,0.964900553226471
334544835,358,Crisspl,2019-10-14T15:41:35Z,resolved,0,0.964900553226471
334544969,358,Crisspl,2019-10-14T15:41:51Z,resolved,0,0.964900553226471
334545037,358,Crisspl,2019-10-14T15:42:03Z,resolved,0,0.964900553226471
334545075,358,Crisspl,2019-10-14T15:42:07Z,resolved,0,0.964900553226471
334545263,358,Crisspl,2019-10-14T15:42:30Z,resolved,0,0.964900553226471
334545606,358,Crisspl,2019-10-14T15:43:07Z,resolved,0,0.964900553226471
334545744,358,Crisspl,2019-10-14T15:43:27Z,resolved,0,0.964900553226471
334545904,358,Crisspl,2019-10-14T15:43:52Z,resolved,0,0.964900553226471
334546474,358,Crisspl,2019-10-14T15:45:09Z,resolved,0,0.964900553226471
334546761,358,Crisspl,2019-10-14T15:45:45Z,resolved,0,0.964900553226471
334546820,358,Crisspl,2019-10-14T15:45:54Z,nuked resolved,0,0.9706993103027344
334547011,358,Crisspl,2019-10-14T15:46:18Z,nuked resolved,0,0.9706993103027344
334547043,358,Crisspl,2019-10-14T15:46:24Z,nuked resolved,0,0.9706993103027344
334547077,358,Crisspl,2019-10-14T15:46:29Z,y resolved,0,0.8034355640411377
334547308,358,Crisspl,2019-10-14T15:47:02Z,resolved,0,0.964900553226471
334547400,358,Crisspl,2019-10-14T15:47:14Z,resolved,0,0.964900553226471
334547560,358,Crisspl,2019-10-14T15:47:39Z,resolved,0,0.964900553226471
334547609,358,Crisspl,2019-10-14T15:47:46Z,resolved,0,0.964900553226471
334547630,358,Crisspl,2019-10-14T15:47:49Z,resolved,0,0.964900553226471
334547703,358,Crisspl,2019-10-14T15:48:00Z,resolved,0,0.964900553226471
334547921,358,Crisspl,2019-10-14T15:48:31Z,will be done when doing baw format update,0,0.9909785985946655
334548274,358,Crisspl,2019-10-14T15:49:18Z,resolved,0,0.964900553226471
334548333,358,Crisspl,2019-10-14T15:49:25Z,resolved,0,0.964900553226471
334549243,358,Crisspl,2019-10-14T15:51:31Z,resolved,0,0.964900553226471
334549894,358,Crisspl,2019-10-14T15:53:01Z,resolved,0,0.964900553226471
334550052,358,Crisspl,2019-10-14T15:53:24Z,resolved,0,0.964900553226471
334550119,358,Crisspl,2019-10-14T15:53:34Z,resolved,0,0.964900553226471
334550144,358,Crisspl,2019-10-14T15:53:37Z,resolved,0,0.964900553226471
334550162,358,Crisspl,2019-10-14T15:53:40Z,resolved,0,0.964900553226471
334550207,358,Crisspl,2019-10-14T15:53:45Z,resolved,0,0.964900553226471
334550230,358,Crisspl,2019-10-14T15:53:49Z,resolved,0,0.964900553226471
334550282,358,Crisspl,2019-10-14T15:53:54Z,resolved,0,0.964900553226471
334550373,358,Crisspl,2019-10-14T15:54:08Z,resolved,0,0.964900553226471
334550548,358,Crisspl,2019-10-14T15:54:36Z,resolved,0,0.964900553226471
334550770,358,Crisspl,2019-10-14T15:55:10Z,resolved,0,0.964900553226471
334551198,358,Crisspl,2019-10-14T15:56:12Z,resolved,0,0.964900553226471
334551357,358,Crisspl,2019-10-14T15:56:33Z,removed e_vertex_attribute_id,0,0.9931435585021973
334552428,358,Crisspl,2019-10-14T15:59:14Z,resolved,0,0.964900553226471
334552610,358,Crisspl,2019-10-14T15:59:36Z,resolved,0,0.964900553226471
334553321,358,Crisspl,2019-10-14T16:01:20Z,resolved,0,0.964900553226471
334554246,358,Crisspl,2019-10-14T16:03:40Z,resolved used `pack_struct`,0,0.9917974472045898
334554402,358,Crisspl,2019-10-14T16:04:02Z,resolved,0,0.964900553226471
334554443,358,Crisspl,2019-10-14T16:04:09Z,resolved,0,0.964900553226471
334554529,358,Crisspl,2019-10-14T16:04:25Z,will be done when updating baw format,0,0.9919928312301636
334554623,358,Crisspl,2019-10-14T16:04:40Z,resolved,0,0.964900553226471
334554650,358,Crisspl,2019-10-14T16:04:46Z,resolved,0,0.964900553226471
334554780,358,Crisspl,2019-10-14T16:05:07Z,resolved,0,0.964900553226471
334554797,358,Crisspl,2019-10-14T16:05:11Z,resolved,0,0.964900553226471
334554912,358,Crisspl,2019-10-14T16:05:24Z,resolved (pack_struct),0,0.9695460200309753
334555175,358,Crisspl,2019-10-14T16:06:08Z,resolved,0,0.964900553226471
334555295,358,Crisspl,2019-10-14T16:06:23Z,resolved,0,0.964900553226471
334555806,358,Crisspl,2019-10-14T16:07:47Z,resolved,0,0.964900553226471
334556171,358,Crisspl,2019-10-14T16:08:47Z,resolved,0,0.964900553226471
334556764,358,Crisspl,2019-10-14T16:10:22Z,"thats what bitfields are for, i dont understand",-1,0.6718793511390686
334556934,358,Crisspl,2019-10-14T16:10:48Z,when baw format gets updated,0,0.9902433753013611
334557748,358,Crisspl,2019-10-14T16:12:56Z,"resolved, changed to uint8_t",0,0.9790834784507751
334557794,358,Crisspl,2019-10-14T16:13:05Z,resolved,0,0.964900553226471
334557819,358,Crisspl,2019-10-14T16:13:09Z,resolved,0,0.964900553226471
334557972,358,Crisspl,2019-10-14T16:13:35Z,when baw formats gets updated,0,0.9845340251922607
334559172,358,Crisspl,2019-10-14T16:16:51Z,"4 bits for binding, 8 bits for format, 12+ bits for reloffset, may pack into uint32_t but not sure about cross-platform max for reloffset",0,0.9930176734924316
334559288,358,Crisspl,2019-10-14T16:17:05Z,resolved,0,0.964900553226471
334559321,358,Crisspl,2019-10-14T16:17:11Z,resolved,0,0.964900553226471
334559389,358,Crisspl,2019-10-14T16:17:22Z,resolved,0,0.964900553226471
334559637,358,Crisspl,2019-10-14T16:17:58Z,resolved,0,0.964900553226471
334559690,358,Crisspl,2019-10-14T16:18:08Z,resolved,0,0.964900553226471
334560027,358,Crisspl,2019-10-14T16:19:06Z,resolved,0,0.964900553226471
334562283,358,Crisspl,2019-10-14T16:24:44Z,resolved,0,0.964900553226471
334562780,358,Crisspl,2019-10-14T16:26:03Z,not relevant since this example doesnt really exist in any offcial form,0,0.9207810163497925
334563353,358,Crisspl,2019-10-14T16:27:28Z,what #extension? i dont know whats going on,0,0.5705298185348511
334564068,358,Crisspl,2019-10-14T16:29:14Z,sort what? whats going on? theres no pipeline ptr in there anyway. seriously what,-1,0.9743232131004333
334564899,358,Crisspl,2019-10-14T16:31:29Z,"none of this exist yet, will be done as one of last things",0,0.9840559959411621
334564968,358,Crisspl,2019-10-14T16:31:41Z,y resoled,1,0.5599963068962097
334565348,358,Crisspl,2019-10-14T16:32:40Z,resolved nuked long ago,0,0.9720622897148132
334565455,358,Crisspl,2019-10-14T16:32:59Z,resolved,0,0.964900553226471
334717739,358,devshgraphicsprogramming,2019-10-15T01:12:54Z,reloffset max is 2047 on everything except for cad cards,0,0.9897245168685913
334717831,358,devshgraphicsprogramming,2019-10-15T01:13:35Z,"you'd be suprised how many times pack_struct fucked up for me under msvc, still need an assert.",0,0.5465046763420105
334717952,358,devshgraphicsprogramming,2019-10-15T01:14:18Z,"struct takes 1+1+4 bytes, but member requires 4 byte alignment (arm), make tesspatchvertcount a uint16_t",0,0.990844190120697
334718028,358,devshgraphicsprogramming,2019-10-15T01:14:51Z,this can have a pretty non-standard size. need that assert,-1,0.670785129070282
334718061,358,devshgraphicsprogramming,2019-10-15T01:15:04Z,same as [a link],0,0.9871845841407776
334718197,358,devshgraphicsprogramming,2019-10-15T01:15:46Z,we should remove the indexed functions,0,0.9912816286087036
334720188,358,devshgraphicsprogramming,2019-10-15T01:29:00Z,"instead of sorting on the material associated with the first meshbuffer in the node, sort by graphics pipeline of the first meshbuffer (most significant are bound shaders [geometry>tessellation>fragment>vertex], then raster params, then anything else).",0,0.9925664663314819
334720419,358,devshgraphicsprogramming,2019-10-15T01:30:36Z,"all right, but lets keep them very separate from all of the engine, maybe lets move `e_material_type` into `ivideodriver` and have a function `getbuiltinspecializedshader(e_shader_stage,e_material_type)`",0,0.9938676953315735
334721591,358,devshgraphicsprogramming,2019-10-15T01:37:44Z,`khr_vulkan_glsl` ?,0,0.9929412603378296
334721821,358,devshgraphicsprogramming,2019-10-15T01:39:23Z,!? we should really be explicitly specifying sets,-1,0.8041484951972961
334724256,358,devshgraphicsprogramming,2019-10-15T01:55:14Z,how so?,0,0.9704632759094238
334947273,358,devshgraphicsprogramming,2019-10-15T13:22:37Z,the order of those is upside down and all over the place,0,0.8720924258232117
334953592,358,devshgraphicsprogramming,2019-10-15T13:33:59Z,"this needs specifying a bit , finally the level is defined as number of -> chains between root (the one that shall be returned by `iassetmanager::getasset` to the user) and the currently loaded asset. stuff that comes together from a single resource (file) like a mesh->meshbuffer->graphicspipeline->shaders will only be cached at the highest level local to the file (the root relative to file) so in this case the `mesh`.",0,0.9932482242584229
334959271,358,Crisspl,2019-10-15T13:43:43Z,"yea, in todo for those issues we talked yesterday, will be done today",0,0.9683007001876831
334959763,358,Crisspl,2019-10-15T13:44:34Z,do you want me to add something to these docs because i'm not sure?,0,0.5229895114898682
335027875,358,devshgraphicsprogramming,2019-10-15T15:35:24Z,nope only.,0,0.9577452540397644
335060955,358,Crisspl,2019-10-15T16:39:29Z,resolved,0,0.964900553226471
335061632,358,Crisspl,2019-10-15T16:40:58Z,same thing as [a link],0,0.9904307723045349
335067917,358,Crisspl,2019-10-15T16:54:41Z,resolved,0,0.964900553226471
335072770,358,Crisspl,2019-10-15T17:06:04Z,i think it's already there `edf_multi_draw_indirect_count` [a link],0,0.98894202709198
335072850,358,devshgraphicsprogramming,2019-10-15T17:06:14Z,iterator pair?,0,0.9870321750640869
335072862,358,Crisspl,2019-10-15T17:06:16Z,resolved?,0,0.98816978931427
335073001,358,Crisspl,2019-10-15T17:06:33Z,look at docs,0,0.9584758877754211
335073143,358,devshgraphicsprogramming,2019-10-15T17:06:56Z,"dont assume you'll get 5 in order, in vulkan there are 14 shader types that come in different combos",0,0.9554190635681152
335077607,358,Crisspl,2019-10-15T17:17:09Z,resolved,0,0.964900553226471
335079370,358,devshgraphicsprogramming,2019-10-15T17:21:16Z,"i understand why its an array of 5, but thats not future proof.",0,0.6637712121009827
335080003,358,Crisspl,2019-10-15T17:22:42Z,resolved,0,0.964900553226471
335085355,358,Crisspl,2019-10-15T17:34:08Z,why not? all you have to do is to adjust value of shader_stage_count.,0,0.9654749035835266
335086400,358,Crisspl,2019-10-15T17:36:30Z,resolved,0,0.964900553226471
335098987,358,devshgraphicsprogramming,2019-10-15T18:04:38Z,"because its absolutely pointless to shove a full array of 14 elements down this pointer when you're only going to use 6 maximum, also its: a. unsized (when i look at code suggestions in the ide its not apparent how many elements this function needs) b. putting the shaders in wrong order will fuck everything up, despite the fact that `igpuspecializedshader` knows its own stage and entry point.",0,0.57081538438797
335100639,358,devshgraphicsprogramming,2019-10-15T18:08:20Z,ibuffer is staying in `core::`,0,0.9867802262306213
335100756,358,devshgraphicsprogramming,2019-10-15T18:08:38Z,undo this,0,0.8722230792045593
335100895,358,devshgraphicsprogramming,2019-10-15T18:09:01Z,"where it was, its a ibuffer only thing",0,0.9834100604057312
335101656,358,devshgraphicsprogramming,2019-10-15T18:10:46Z,core::ibuffer needs to stay in `core` its used for low level refcounted memory managment. icpu and igpu buffer need a common base on top of core::ibuffer not moving of ibuffer our of core.,0,0.9912152290344238
335103960,358,Crisspl,2019-10-15T18:15:42Z,but i had to change namespace of ibuffer from core to asset,0,0.9390710592269897
335104142,358,Crisspl,2019-10-15T18:16:03Z,i cant stay in core because it has to derive from asset::idescriptor,0,0.9552399516105652
335104816,358,devshgraphicsprogramming,2019-10-15T18:17:32Z,"either make an exception for ibuffer (needs to be in `core`) or create a intermediate class in the inheritance chain between `igpubuffer`,`icpubuffer` and `ibuffer`",0,0.995058536529541
335109822,358,Crisspl,2019-10-15T18:28:11Z,resolved,0,0.964900553226471
335115351,358,Crisspl,2019-10-15T18:40:23Z,resolved,0,0.964900553226471
335121080,358,Crisspl,2019-10-15T18:52:53Z,resolved,0,0.964900553226471
335123202,358,Crisspl,2019-10-15T18:57:59Z,what are they called in opengl? i cant find any info,0,0.7517940402030945
335148508,358,Crisspl,2019-10-15T20:00:22Z,resolved,0,0.964900553226471
335148558,358,Crisspl,2019-10-15T20:00:29Z,resolved,0,0.964900553226471
335148742,358,Crisspl,2019-10-15T20:00:54Z,todo `clearscreen()` see comments,0,0.9929234981536865
335223575,358,Crisspl,2019-10-15T23:41:29Z,resolved,0,0.964900553226471
335223710,358,Crisspl,2019-10-15T23:42:00Z,resolved again,0,0.9609126448631287
335555046,358,devshgraphicsprogramming,2019-10-16T15:39:51Z,and?,0,0.9768803119659424
335556611,358,devshgraphicsprogramming,2019-10-16T15:42:35Z,isnt this in specialization info already?,0,0.9923917651176453
335557194,358,devshgraphicsprogramming,2019-10-16T15:43:42Z,would you be so kind and update the docs?,0,0.9684063792228699
335558163,358,devshgraphicsprogramming,2019-10-16T15:45:22Z,these also need the mask state reset from above ^^,1,0.9757712483406067
335558239,358,devshgraphicsprogramming,2019-10-16T15:45:30Z,same,0,0.8844984173774719
335558439,358,devshgraphicsprogramming,2019-10-16T15:45:48Z,status?,0,0.9820219278335571
335558539,358,devshgraphicsprogramming,2019-10-16T15:45:57Z,?,0,0.9557723999023438
335562731,358,devshgraphicsprogramming,2019-10-16T15:53:33Z,"they're not called anything, they don't exist afaik there are some things under opengl [a link] [a link] and ext_shader_pixel_local_storage should have a number of `evdf_` extra enums (already some for tessellation shaders etc) for input attachments, subgroup operations, etc.",0,0.9918162226676941
335656513,358,Crisspl,2019-10-16T19:04:09Z,it is but gpu specialized shader doesnt hold its specialization data,0,0.977310061454773
335658488,358,Crisspl,2019-10-16T19:08:59Z,when copengl compute pipelines come,0,0.9885708689689636
335660717,358,Crisspl,2019-10-16T19:14:27Z,"nah, i dont think, it goes through shaderc first, not fed to gl directly at this form",0,0.9456945061683655
335661584,358,Crisspl,2019-10-16T19:16:34Z,"its not a working example, dont even look at this code",-1,0.7081727385520935
335662297,358,Crisspl,2019-10-16T19:18:08Z,"icpudescriptorset returns non-const ptr to its contents (descriptors/swritedescriptorset), so they're mutable",0,0.9917619228363037
335662908,358,Crisspl,2019-10-16T19:19:37Z,how can i have support query for something that doesnt exist xd also the 2nd link is not working,0,0.8574270009994507
335663820,358,Crisspl,2019-10-16T19:21:42Z,according to gl wiki it's 2048,0,0.9881446361541748
335666555,358,Crisspl,2019-10-16T19:28:13Z,resolved,0,0.964900553226471
335688609,358,Crisspl,2019-10-16T20:19:31Z,resolved,0,0.964900553226471
335688644,358,Crisspl,2019-10-16T20:19:35Z,resolved,0,0.964900553226471
335688689,358,Crisspl,2019-10-16T20:19:40Z,resolved,0,0.964900553226471
335695049,358,Crisspl,2019-10-16T20:33:55Z,"yea, but it's useless isn't it? i'd have to use `vector` instead of our `smart_refctd_dynamic_array` and/or create some weird `friend`ships between driver and descriptor set classes....",-1,0.9835547804832458
336068779,358,devshgraphicsprogramming,2019-10-17T15:17:35Z,"ok, i understand",0,0.9285048842430115
336071351,358,devshgraphicsprogramming,2019-10-17T15:21:52Z,explain?,0,0.9806632399559021
336076268,358,devshgraphicsprogramming,2019-10-17T15:30:24Z,"does not exist officially, but you can use the extensions to achieve the same effect with those extensions. [a link] contains the spec for ext_shader_framebuffer_fetch_non_coherent.",0,0.9945244789123535
336078203,358,devshgraphicsprogramming,2019-10-17T15:33:55Z,"why? you know up-front how many descriptors will be in a descriptorset. not really, just do [code block]",0,0.9373522400856018
336078690,358,devshgraphicsprogramming,2019-10-17T15:34:46Z,all right have it be 2048 so 13 bits,0,0.9512321352958679
336082133,358,devshgraphicsprogramming,2019-10-17T15:41:06Z,wait don't we know the `_descriptorcount` from `_layout`,0,0.9911336302757263
336086185,358,devshgraphicsprogramming,2019-10-17T15:48:34Z,for future reference.,0,0.9830523729324341
336086946,358,devshgraphicsprogramming,2019-10-17T15:50:02Z,for reference,0,0.9692250490188599
336088102,358,devshgraphicsprogramming,2019-10-17T15:52:09Z,hmmm would be useful to have identical function in icpudescriptorset and igpudescriptorset similar to [a link],0,0.9709239602088928
336088568,358,devshgraphicsprogramming,2019-10-17T15:53:04Z,done?,0,0.9815027713775635
336092311,358,devshgraphicsprogramming,2019-10-17T16:00:25Z,"actually scratch that, best thing would be a function common to igpu and icpu descriptorset, overriding `idescriptorset::updatedescriptorset`... yes in that case it would be exceptionally ok to keep a pointer to `idriver` or `copengldriver*` in the gpu object implementation. [a link]",0,0.9837815761566162
336130788,358,Crisspl,2019-10-17T17:24:24Z,yea long ago,0,0.9463869333267212
336131861,358,Crisspl,2019-10-17T17:26:46Z,but for what? for what driver would be used?,0,0.9131574034690857
336135628,358,Crisspl,2019-10-17T17:35:37Z,"yea, i dont understand concept of updating descriptor sets.. so first i allocate empty descriptor set and then fill it with descriptors? and i must update it only once because number of descriptors is known in the moment of allocation? and i cant update it any more? it's completely useless api then.",-1,0.9753004312515259
336136171,358,Crisspl,2019-10-17T17:36:51Z,"hm,right",0,0.9434319138526917
336182715,358,Crisspl,2019-10-17T19:19:06Z,read this commit's diff [a link] pipeline hash has to be removed from context's cache,0,0.993489146232605
336347327,358,devshgraphicsprogramming,2019-10-18T07:11:42Z,"ok but this necessitates that i remove the `igpurenderpassindependentpipeline` with the same thread that created the cache entry. this is unlike the old vao where i could create `igpumeshdataformatdesc` and remove it on any thread, the hard limit of total vao could (plus a global clear function) would take care of removal.",0,0.9910925030708313
336349501,358,Crisspl,2019-10-18T07:18:48Z,"yes, that's what docs say this is one i don't understand at all. why are you talking about mesh data format desc and what vao has to do with all this?",0,0.6487618684768677
336351052,358,devshgraphicsprogramming,2019-10-18T07:23:38Z,"mostly for the vulkan implementation since you need a `vkdevice` parameter to `vkupdatedescriptorsets`. you can fill it with descriptors 1 binding at a time (or several) see the struct [a link] or you can copy from other descriptor sets (or several) [a link] you can update at any binding if you look at the above structs nope you can update as many times as you like, see the structs above. order of update doesn't matter as long as the updates don't overlap/overwrite. the cpu version you can update as much as you like, the gpu version you can update until you bind it before a draw for the first time, or you create it with an extension that allows for ""update after bind"". but main logic here under vulkan is that you cannot update the descriptor set while its being used for drawing, before or after is fine.",0,0.982517421245575
336351500,358,Crisspl,2019-10-18T07:25:03Z,ah ok i got the english syntax now xd the point of removing calling this `remove` function is that pipeline's shaders gl names might be reused once shaders gets destroyed. so there is a possibility that some new pipeline would get the same hash while the old pipeline's hash still exist in the cache. this would end up in finding pipeline gl name consisting of not-anymore existing shaders (invalid gl names),0,0.9367967247962952
336351563,358,devshgraphicsprogramming,2019-10-18T07:25:13Z,because my old api didn't have this threading requirement and thats how i want the new one to be.,0,0.9566946029663086
336352018,358,devshgraphicsprogramming,2019-10-18T07:26:42Z,ah indeed.,0,0.943564236164093
336355667,358,Crisspl,2019-10-18T07:38:25Z,[a link] do you get it now?,0,0.9884341359138489
336358770,358,devshgraphicsprogramming,2019-10-18T07:47:34Z,but if you're using smart_refctd_ptr in the per-context pipeline cache the old shaders (and their gl names) will not be destroyed until you remove the pipeline (and drop the shaders) hence you won't be able to get the same gl handles as long as the pipeline is in the cache.,0,0.9881580471992493
336487668,358,Crisspl,2019-10-18T13:22:27Z,"going that way, hash for pipeline can be just `smart_refctd_ptr `",0,0.9933884143829346
336571131,358,devshgraphicsprogramming,2019-10-18T16:20:45Z,that will lead to pointless copious amounts of program pipeline and vao objects under opengl ?,-1,0.6281898021697998
336584935,358,devshgraphicsprogramming,2019-10-18T16:56:57Z,latest commit does this?,0,0.9842113852500916
336591021,358,Crisspl,2019-10-18T17:12:58Z,yea,0,0.9144599437713623
336628103,358,Crisspl,2019-10-18T18:44:03Z,hm nice extensions,1,0.9560310244560242
336686549,358,devshgraphicsprogramming,2019-10-18T21:42:48Z,very nice and sxy.,1,0.9938896894454956
336686719,358,devshgraphicsprogramming,2019-10-18T21:43:32Z,you need to check for all of them!,0,0.8513339757919312
336686813,358,devshgraphicsprogramming,2019-10-18T21:43:55Z,with an ||,0,0.9736807346343994
336687119,358,devshgraphicsprogramming,2019-10-18T21:44:45Z,what about framebuffer_fetch and the others i listed!?,0,0.9774485230445862
336687324,358,devshgraphicsprogramming,2019-10-18T21:45:34Z,"can you back these comments up somewhere, i'm scared i'll have to go over it again in the near future when you fix `irr::scene`",-1,0.8997909426689148
336687432,358,devshgraphicsprogramming,2019-10-18T21:46:02Z,todo.,0,0.9295810461044312
336687870,358,devshgraphicsprogramming,2019-10-18T21:47:33Z,todo and relevant to the question of how you're caching pipelines.,0,0.9737856388092041
336688303,358,devshgraphicsprogramming,2019-10-18T21:49:24Z,"can you back these comments up somewhere, i'm scared i'll have to go over it again in the near future when you fix `irr::scene` read this thread, relevaant to the loader refactor.",-1,0.8214487433433533
336688438,358,devshgraphicsprogramming,2019-10-18T21:50:02Z,todo.,0,0.9295810461044312
336688975,358,devshgraphicsprogramming,2019-10-18T21:52:24Z,want compute pipelines in this pr,0,0.981988251209259
336689022,358,devshgraphicsprogramming,2019-10-18T21:52:37Z,?,0,0.9557723999023438
336877131,358,devshgraphicsprogramming,2019-10-21T07:51:02Z,"i'd use a smart refctd array, this could crash badly if i kill the driver (close device)",0,0.6495382189750671
336878881,358,devshgraphicsprogramming,2019-10-21T07:55:40Z,"i don't think anyone needs the `lastvalidated` field anymore, since gfx pipeline is immutable now, so vertex formats, shaders, etc. can't change. unless you're trying to avoid vertex buffer binds (hard optimization)",0,0.9869335889816284
336879107,358,devshgraphicsprogramming,2019-10-21T07:56:17Z,"freeup before insert, you might save a realloc.",0,0.9855678081512451
336882388,358,devshgraphicsprogramming,2019-10-21T08:05:17Z,aren't you supposed to have a `!_pipeline` in the if statement?,0,0.9946327209472656
336893949,358,devshgraphicsprogramming,2019-10-21T08:34:30Z,the vao cache can drop to 512,0,0.9880809783935547
336900477,358,devshgraphicsprogramming,2019-10-21T08:49:24Z,or 1k,0,0.9597903490066528
336922927,358,devshgraphicsprogramming,2019-10-21T09:39:20Z,"i think those are only supported (relevant) if you have gl 4.6 and can feed spir-v directly to opengl you can query and record, but shouldn't be using `copenglextensionhandler::spir_vextensions` for anything right now.",0,0.9914228320121765
336963099,358,devshgraphicsprogramming,2019-10-21T11:22:34Z,still a todo,0,0.948638379573822
336967696,358,AnastaZIuk,2019-10-21T11:35:47Z,"i would for sure, i'm sorry i didn't see it then",-1,0.9888836741447449
337016069,358,AnastaZIuk,2019-10-21T13:26:48Z,done,0,0.8974218964576721
337053053,358,Crisspl,2019-10-21T14:33:54Z,yea fixed in commit yesterday,0,0.9873611927032471
337054373,358,Crisspl,2019-10-21T14:36:13Z,"actually it's ""last bound"" time-stamp or whatever reallocationcounter gives, need for lru-like thing",0,0.9924694895744324
337168733,358,devshgraphicsprogramming,2019-10-21T18:22:08Z,ah ok.,0,0.8067250847816467
337221657,358,Crisspl,2019-10-21T20:24:58Z,"just uncommented it now because im not touching scene nodes now, everything there is broken now so i could #ifndef new_shaders just as well",0,0.9858459830284119
337399840,358,devshgraphicsprogramming,2019-10-22T08:59:39Z,ok,0,0.8787186145782471
337869058,358,devshgraphicsprogramming,2019-10-23T06:31:27Z,"actually mesh->meshbuffer->pipeline->descriptorset->imageview would make it 4, 5 would be for `image_hierarchylevels_below`",0,0.9947842955589294
337871227,358,devshgraphicsprogramming,2019-10-23T06:40:05Z,todo in next pr,0,0.9871211647987366
385882121,424,devshgraphicsprogramming,2020-02-28T19:32:10Z,"the rules surrounding ieee754 support in gpus are a bit murky, it could wipe out your bit patterns on infs, nans, and denormallized numbers, so i'd store `uint` here and if needed do a `uintbitstofloat`",0,0.706143856048584
385883820,424,devshgraphicsprogramming,2020-02-28T19:36:06Z,"also i'd put the reflectance straight after bitfields, then alpha (so other materials can have less dummies)",0,0.99118971824646
385883906,424,devshgraphicsprogramming,2020-02-28T19:36:15Z,see [a link],0,0.9869033098220825
385884863,424,devshgraphicsprogramming,2020-02-28T19:38:11Z,"i know that mitsuba considers a non-pbr override (constant reflectance and transmittance) of the dielectric material the same bsdf, but we should dump that into a special case separate from an actual pbr dielectric",0,0.9924713373184204
385885355,424,devshgraphicsprogramming,2020-02-28T19:39:19Z,we could actually error out if reflectance or transmittance is being used... no reason to support non pbr bsdfs.,0,0.9738641977310181
385886128,424,devshgraphicsprogramming,2020-02-28T19:41:03Z,precompute a single value `eta`,0,0.9906486868858337
385887000,424,devshgraphicsprogramming,2020-02-28T19:42:59Z,same as [a link],0,0.9871845841407776
385888293,424,devshgraphicsprogramming,2020-02-28T19:46:02Z,"precompute a single `eta` value (factor out the external ior) you could store them in the yzw components instead of xyz, so then the first 4 bytes could be the `bitfields` (then put your `alpha` parameters last)",0,0.9939242005348206
385891125,424,devshgraphicsprogramming,2020-02-28T19:51:35Z,"actually discord convo supersedes all ""member layout suggestions""",0,0.8996773958206177
385892692,424,devshgraphicsprogramming,2020-02-28T19:53:39Z,"actually discord convo supersedes all ""member layout suggestions""",0,0.8996773958206177
385893189,424,devshgraphicsprogramming,2020-02-28T19:54:20Z,see my comment about sticking to pbr,0,0.9674647450447083
385893515,424,devshgraphicsprogramming,2020-02-28T19:55:06Z,pbr,0,0.8379414677619934
385893769,424,devshgraphicsprogramming,2020-02-28T19:55:39Z,i allow you to error out on phong,0,0.9194818139076233
385893891,424,devshgraphicsprogramming,2020-02-28T19:55:53Z,pbr,0,0.8379414677619934
385894521,424,devshgraphicsprogramming,2020-02-28T19:57:14Z,"make twosided a bit flag, instead of a separate bsdf",0,0.9897566437721252
385896228,424,devshgraphicsprogramming,2020-02-28T20:01:10Z,decompose a mixture bsdf into a chain of blend bsdfs with constant (non texture) weights,0,0.9921749234199524
385899939,424,devshgraphicsprogramming,2020-02-28T20:09:44Z,"upgrade the sblend bsdf to have a 3-channel weight (packed into rgb19e7 - our custom format for replacing vec3). then you can decompose the mask bsdf as a (textured) blend bsdf between the ""fully transparent bsdf"" (delta distribution centered around the transmission direction [negative of viewer direction], divided by absolute value of the cosine between the normal and outgoing direction) and the child of the original mask bsdf",0,0.9936261177062988
386046862,424,Crisspl,2020-02-29T18:38:23Z,not really because mask bsdf gives per-channel opacity (idk what that means but.. yea xd),0,0.9279130697250366
386246373,424,devshgraphicsprogramming,2020-03-02T08:17:09Z,"well, upgrade the ""blend"" bsdf to do a 3-channel blend ;)",1,0.8698132634162903
386246672,424,devshgraphicsprogramming,2020-03-02T08:18:06Z,"put this in core, where the rgb9e5, rg11b10f and half-float compressors are",0,0.9948952794075012
386249162,424,devshgraphicsprogramming,2020-03-02T08:24:57Z,"this is wrong, you need to get the highest exponent first, then adjust all the other mantissa values to be ""in that exponent"" see [a link]",0,0.9583311676979065
386249579,424,devshgraphicsprogramming,2020-03-02T08:25:59Z,"this is dangerous, nobody knows what's going to be in `_node->diffuse.alpha.value.type`",-1,0.9120880365371704
386250299,424,devshgraphicsprogramming,2020-03-02T08:27:47Z,dangerous if have wrong ndf.,-1,0.9245943427085876
386250338,424,devshgraphicsprogramming,2020-03-02T08:27:52Z,dangerous if have wrong ndf.,-1,0.9245943427085876
386253285,424,devshgraphicsprogramming,2020-03-02T08:34:44Z,that will backfire since vec2 (`reflectance`) cannot straddle a `vec4` boundary (put reflectance before roughness) p.s. i thought roughness could be a texture as well as a float?,0,0.9895073771476746
386254216,424,devshgraphicsprogramming,2020-03-02T08:36:57Z,"you need a single dummy, because `vec2` won't go on a 4byte offset, only 8 byte or 16 byte",0,0.9859569072723389
386255145,424,devshgraphicsprogramming,2020-03-02T08:39:10Z,to obtain a single `eta` value divide the internal ior by external ior,0,0.9909144639968872
386255316,424,devshgraphicsprogramming,2020-03-02T08:39:37Z,this applies to almost every single fallthrough in this switch,0,0.9856522083282471
386255922,424,devshgraphicsprogramming,2020-03-02T08:41:09Z,"add a `intbitstofloat`,`uintbitstofloat`, `floatbitstoint` and `floatbitstouint` to the `irr::core::` namespace as template functions in `glslfunctions.h` and `.tcc`",0,0.9940482378005981
386257234,424,devshgraphicsprogramming,2020-03-02T08:44:18Z,bitfield (but propagate down through children),0,0.9901494979858398
386257969,424,devshgraphicsprogramming,2020-03-02T08:45:56Z,"uint64_t and you need a dummy in front, these are `vec2`s",0,0.9935085773468018
386258368,424,devshgraphicsprogramming,2020-03-02T08:46:48Z,single eta,0,0.8105567097663879
386258761,424,devshgraphicsprogramming,2020-03-02T08:47:47Z,`vec2` would imply padding here,0,0.9922471046447754
386263063,424,Crisspl,2020-03-02T08:56:50Z,"i removed all the paddings because glsl representation will be a struct of a few uvec4s as you suggested. so that everything is packed as possible. i just thought wouldn't it be better if one member didn't lie in just one uvec4 (not in between since i need >1 fetches then). yes, single-floats are uint32[2] for my convenience to easier access lower 32 bits (where the float is stored)",0,0.9740220308303833
386296771,424,devshgraphicsprogramming,2020-03-02T10:02:30Z,"yeah, about this, for efficient computation it would make more sense to: 1) find unique trees (different roots) 2) for every tree, do post-order traversal on the cpu to figure out the order in which bsdf nodes would get evaluated for establishing the normal to use for shading: 3) error out if more than one (can be the same over and over) `bumpmap` bsdf node gets used in the tree (we don't want to be wasting time on that) 4) record normal tangent frames (max 2, and first one is the smooth non displaced one) to be used for shading and evaluate them at the start of the `bsdf_` functions (all the angles and cosines) 5) for every node in the bsdf tree tag which shading normal tangent frame its going to be using (only need 1 bit). for the `bsdf_sample` functions: 6) you don't need a stack, every single time you hit a blend bsdf node, you will pick the left or right child according to the `sample.x` and the proportion of the left to right child blend weight, then you will sample the child with `sample.x = (sample.x-pre_cdf)/chosen_pdf; sample.xy = sample.yx;` (rescaled random numbers) and bump the output value by `1.0/chosen_pdf` iteratively until you hit a leaf node. for the bsdf_eval function: 7) when popping the bsdf node from the post-order traversal stack in hte cpu offline preprocessing step, find out the max-stack-size (for all trees, so you can only define that value via specialization constant after you've constructed all the bsdf trees) for the ubershader (with assumption that a parent blend node moves the resultant value onto the stack replacing the leftmost child). 8) for every tree, record the nodes in the order they would have gotten **popped off the stack** and record the offset in the per-invocation-local-stack where they would have stored their result (for the blend node, do not store children indices, but stack-offsets to consume).",0,0.979423999786377
386297865,424,devshgraphicsprogramming,2020-03-02T10:04:47Z,good idea.,1,0.9718119502067566
386298862,424,devshgraphicsprogramming,2020-03-02T10:06:38Z,"i.e. if it was an actual `blendbsdf` then use a rrra swizzle on the sampler, if it was a `maskbsdf` then use a rgba swizzle",0,0.9949896931648254
386485318,424,Crisspl,2020-03-02T16:03:24Z,"ah, good point",1,0.9625219702720642
387492244,424,devshgraphicsprogramming,2020-03-04T07:39:46Z,"remind me again, why no different opcode for rough vs. non rough?",0,0.672789454460144
387492427,424,devshgraphicsprogramming,2020-03-04T07:40:18Z,mask we can turn into a bit-option just like twosided,0,0.9912023544311523
387713115,424,Crisspl,2020-03-04T14:47:11Z,"hm, yea, you reminded me that i need one more bit for specifying smooth/lambertian. so it could be another bsdf type just as well.. i'll make separate opcodes for rough variants",0,0.8961226940155029
387750424,424,Crisspl,2020-03-04T15:40:58Z,mask is getting translated into blend with fully transparent bsdf,0,0.9870844483375549
387855992,424,devshgraphicsprogramming,2020-03-04T18:35:17Z,i think it will be cheaper to just make it into a bitfield option and stick the rgb19e7 weight / bindless texture handle at the very end of the bsdf parameter table.,0,0.9903779029846191
387856237,424,devshgraphicsprogramming,2020-03-04T18:35:42Z,smooth vs. rough... lambertian is a whole different thing,-1,0.7812029719352722
387900570,424,devshgraphicsprogramming,2020-03-04T19:56:59Z,"wait, what's doing on here?",0,0.8734541535377502
387900688,424,devshgraphicsprogramming,2020-03-04T19:57:14Z,this is the bumpmap bsdf not coating?,0,0.988733172416687
387904126,424,devshgraphicsprogramming,2020-03-04T20:03:34Z,"ekhm bsdfs with no children will attempt to push their non-existent children, because of your weird `visited` design. you can use two stacks, its not a sin (at least all the bsdf table entries will be there first before you start emitting instructions) [a link]",0,0.6148833632469177
388034579,424,devshgraphicsprogramming,2020-03-05T01:40:21Z,you can use ordinary registers for normals (vec3 is a vec3 after all),0,0.9927680492401123
388035104,424,devshgraphicsprogramming,2020-03-05T01:42:15Z,"one more note, it would be ideal if the top level bsdf always wrote its result to register 0",0,0.9636144638061523
389303127,424,devshgraphicsprogramming,2020-03-07T18:42:46Z,"textures are not allowed to be > 32k either make x,y, into uint16_t, or pack the whole offset into `uint32_t` and then provide template functions (for different amount of bits allocated to x,y and layer coordinates)",0,0.9890469908714294
389305888,424,devshgraphicsprogramming,2020-03-07T19:26:01Z,"we have a file with these already i think... if not make an include in `irr/core` for 2d and 3d (in 8bit, 16bit and 32bit variants) morton code stuff (using `core::vectorsimdu`)",0,0.9798383712768555
389306281,424,devshgraphicsprogramming,2020-03-07T19:33:28Z,"no need for an `e_format` you'd just need an `e_format_class` (one enum for all binary compatible formats) you need to decide if `_szxy` means all the pixels used by the texture or just along one dimension, because the way you've passed it to `reserved_size` implies that its actually the whole texture. i'd rather specify arguments the user can't ""fuck up"", so `uint32_t pagecountbits=13u, uint32_t pagelayers=4, uint32_t pagesizebitsintexelblocks=8u` then page size in texel blocks : `1u<<pagesizebitsintexelblocks==256u` then total bytes under managment: `(asset::gettexetblocksize(_format_class)*pagelayers)<<(pagecountbits+pagesizebitsintexelblocks)` p.s. megatexture size does not need to be 16k, can be 8k, basically only needs to be as big as the singular biggest texture you're doing to put into it. layers are more useful in controlling the granularity of the memory pool, since it would otherwise grow exponentially.",0,0.989301860332489
389306353,424,devshgraphicsprogramming,2020-03-07T19:34:47Z,"i'd split the allocation logic from the texture packing logic into two different classes that later come together (we might want to re-use the packing logic for on-line gpu resource streaming, with no intermediate cpu objects). also we will re-use the packer for real virtual texturing (you need to pack the virtual addresses into one virtual texture) and the megaimg will never exist then.",0,0.9916260242462158
389306538,424,devshgraphicsprogramming,2020-03-07T19:37:43Z,you can make it sized [code block] then you have slightly more increments of megatexture size,0,0.9866624474525452
389306572,424,devshgraphicsprogramming,2020-03-07T19:38:08Z,you can allow for multiple layers,0,0.9806075096130371
389307875,424,devshgraphicsprogramming,2020-03-07T19:57:32Z,inheritance and specialization is also a solution,0,0.9805667400360107
389310046,424,devshgraphicsprogramming,2020-03-07T20:31:12Z,in an ideal world you'd only need to check that format class is compatible.,0,0.983735203742981
389310409,424,devshgraphicsprogramming,2020-03-07T20:36:35Z,this will get you better packing [code block],0,0.9672685861587524
389310437,424,devshgraphicsprogramming,2020-03-07T20:37:10Z,"don't assert, handle failure properly, you are likely to fail with such a fragmentation-prone allocator.",0,0.7678003311157227
389310577,424,devshgraphicsprogramming,2020-03-07T20:39:06Z,"split allocation of offsets from copying of texture data (so we can use the same packer for cpu packing, gpu packing, and vt)",0,0.9949575066566467
392337953,424,devshgraphicsprogramming,2020-03-13T16:31:33Z,"you need to inherit from generalpurpose, inheritance not composition. and you definitely don't want ot be using linear allocator (we want to use this and support adding and removing squares at runtime => in the far future).",0,0.9869099259376526
392338582,424,devshgraphicsprogramming,2020-03-13T16:32:39Z,and a 2d layer,0,0.9848875999450684
392355843,424,devshgraphicsprogramming,2020-03-13T17:01:04Z,"you want this to be given to the `ctexturepacker` constructor, since depending on the anisotropic filter you want to use the packed textures with, the padding can be between 0 and 9 (half of max anisotropy, +1 if using bilinear filter)",0,0.9930698275566101
392356548,424,devshgraphicsprogramming,2020-03-13T17:02:24Z,"if you want a shorthand for allocation make a utility function, but this will no longer be an address allocator if it doesn't conform to the function signatures address_allocator_trais expect.",0,0.9889740943908691
392357798,424,devshgraphicsprogramming,2020-03-13T17:04:42Z,page size does not need to be power-of-two,0,0.9815601110458374
392357906,424,devshgraphicsprogramming,2020-03-13T17:04:57Z,"also the x,y is counted in pages, not virtual pixels",0,0.9917268753051758
392358197,424,devshgraphicsprogramming,2020-03-13T17:05:29Z,page size can be any rectangle you like.,0,0.975480318069458
392359050,424,devshgraphicsprogramming,2020-03-13T17:07:08Z,"split out this part, let there be an `itexturepacker` and a `icputexturepacker` (`igputexturepacker` to come in the future)",0,0.995320737361908
392359965,424,devshgraphicsprogramming,2020-03-13T17:08:54Z,"quick question, is `imageextent` counting texels or texel blocks?",0,0.978912889957428
392361103,424,devshgraphicsprogramming,2020-03-13T17:11:06Z,"format class not format, generally speaking textures of the same texel block size are compatible with each other for use in imageviews",0,0.9920420050621033
392361849,424,devshgraphicsprogramming,2020-03-13T17:12:38Z,"pack an icpuimage subresource, the struct that icpuimageview uses for its creation (so we don't always have to pack the entire image)",0,0.993480920791626
392365180,424,devshgraphicsprogramming,2020-03-13T17:18:43Z,"nope, convert texture size to page extents while rounding up, then round up to power of two (but the page size) [code block]",0,0.9903103709220886
392365446,424,devshgraphicsprogramming,2020-03-13T17:19:11Z,that's allowed to happen (failed allocation) return an invalid texture offset.,0,0.9522031545639038
392365776,424,devshgraphicsprogramming,2020-03-13T17:19:45Z,"since it will be 64bit anyway, you can use the last 16bits to hold a valid allocation flag.",0,0.9906532764434814
392367084,424,devshgraphicsprogramming,2020-03-13T17:22:04Z,you also need the page table which shall be an image view of format ef_r32ui,0,0.9926338791847229
392367607,424,devshgraphicsprogramming,2020-03-13T17:23:03Z,i think has made a utility function for copying between layers specified as regions of two textures and uses it in gli loader/writer.,0,0.9850207567214966
392369455,424,devshgraphicsprogramming,2020-03-13T17:26:22Z,"at this point, you want to call a second allocator (the pool allocator which has bins of sizeof(uint32_t) and as many bins as you have tiles in the physicaladdresstexture) you `multi_alloc` as many tiles as the texture actually has (not the pot rounded up count), and you need to fill up the page table texels with the pool address allocated addresses.",0,0.9926556348800659
392370611,424,devshgraphicsprogramming,2020-03-13T17:28:30Z,individual tiles should be copied one-by-one into the physicaladdresstexture,0,0.9938925504684448
392370968,424,devshgraphicsprogramming,2020-03-13T17:29:09Z,i'd rather call it `physicaladdresstexture` since it won't be that big ;),1,0.8830240368843079
392600554,424,devshgraphicsprogramming,2020-03-14T16:27:53Z,"ok with latest ideas on how to handle mip-chains, the equation should be [code block]",0,0.9729150533676147
392600780,424,devshgraphicsprogramming,2020-03-14T16:31:08Z,take the max number of mip levels as a parameter (this will also determine the max texture size you can allocate/pack (`maxtexturesize=m_pgszxy<<(miplevels-1u)`),0,0.9936699271202087
392600893,424,devshgraphicsprogramming,2020-03-14T16:32:46Z,"only icputexturepacker needs to have the page table in cpu memory (gpu version will most likely work, by queuing up the allocations and deallocations in a dynamic `core::vector` and passing that as an ssbo toa compute shader that will update the pages on a gpu-resident-only page table texture)",0,0.9946532249450684
392601268,424,devshgraphicsprogramming,2020-03-14T16:37:45Z,"you're going to be returning just one offset, we can infer the rest via simple mipmapping equation.",0,0.9866068363189697
392601557,424,devshgraphicsprogramming,2020-03-14T16:40:26Z,"you only allocate the virtual address once (for the base mip-map level only) since the texture allocation will be pot, so all other mip-map layers can be inferred.",0,0.9944994449615479
392601789,424,devshgraphicsprogramming,2020-03-14T16:43:40Z,"also make the function virtual, cpu and gpu part will differ in how they handle page table uploads (or make the page table upload function pure virtual)",0,0.9912158250808716
392601818,424,devshgraphicsprogramming,2020-03-14T16:44:03Z,can't you get the offset and other stuff from your page table image's region spec?,0,0.9952257871627808
392602092,424,devshgraphicsprogramming,2020-03-14T16:48:39Z,maybe do one straight from `stexoffset`,0,0.9945865869522095
392603766,424,Crisspl,2020-03-14T17:12:45Z,wouldnt then at least half of allocated space be unused?,0,0.9823843836784363
392612385,424,devshgraphicsprogramming,2020-03-14T19:19:55Z,you want an `isvalid` function because alloc returns an `stexoffset`,0,0.99335116147995
392612655,424,devshgraphicsprogramming,2020-03-14T19:23:52Z,"maybe make the template `template ` so the ""range"" is independent of type (useful for having fast mortons for small quadtrees)",0,0.9910767078399658
392612670,424,devshgraphicsprogramming,2020-03-14T19:24:18Z,encode would be useful too,0,0.9827006459236145
392612697,424,devshgraphicsprogramming,2020-03-14T19:24:43Z,configurability?,0,0.985831081867218
392612717,424,devshgraphicsprogramming,2020-03-14T19:25:05Z,now it can't ;),1,0.9859479665756226
392612889,424,devshgraphicsprogramming,2020-03-14T19:27:12Z,"yeah now page size needs to be pot due to mip-tail issues, however `_tilesperdim` only need to be a multiple of 2^`(maxmiplevel-pagetilemiptailsize)` p.s. where `maxmiplevel=log2(maxallocatabletexturesize)`",0,0.9906629323959351
392612981,424,devshgraphicsprogramming,2020-03-14T19:28:40Z,still upholding my comment about format class,0,0.5992389917373657
392613005,424,devshgraphicsprogramming,2020-03-14T19:29:07Z,you need to be able to handle allocation failure,0,0.9847065806388855
392614167,424,devshgraphicsprogramming,2020-03-14T19:46:38Z,"well, no why? the page table is a regular texture. if you allocate a texture which is (16,16) pages, then due to morton code + alignment it can only have an offset that is a multiple of its size ;) hence possible offset you'd get allocated in the base mip would be (0/8/16/24/32/....,0/8/16/24/32/....) the remaining mip level offsets you can infer by dividing th base leve offset by `exp2(miplevel)` , because of magical alignment and the quadtree-like structure you will never suffer from integer truncation. obviously when you get to the 1x1 page tile level, you stop needing to worry about the remaining mip levels (we'll make sure the next 2 contiguous pages get allocated for a mip tail) just make sure you mark that page table entry with the `tail_bit` flag (which still leaves you with enough bits to address 2*1024*1024*1024 separate physical pages, which is insane - or 32k if you use 16bit physical table pointers which would still allow you to keep 512 megapixels resident in memory with a 128x128 page tile).",1,0.8458027243614197
392631203,424,Crisspl,2020-03-15T00:46:08Z,"ah, you're talking about page table. this code here is allocation of tiles into physical texture",0,0.9590615034103394
392654793,424,devshgraphicsprogramming,2020-03-15T09:08:10Z,square address allocator is for virtual address pooladdressallocator with no alignment at all is for physical pages and the only value being saves should be a uint16_t ;),0,0.6619425415992737
392656420,424,Crisspl,2020-03-15T09:31:48Z,"oh, allocation is done a lot different than you wanted it then xd actually now i see more sense to it. luckily it's no problem to change it",0,0.47610363364219666
392825456,424,devshgraphicsprogramming,2020-03-16T07:22:00Z,~just store it as `uint16_t[2]` to make life easier~,0,0.972364068031311
392825783,424,devshgraphicsprogramming,2020-03-16T07:23:08Z,waaait.... `stexoffset` is a offset into virtual uv space (page table).... you don't store the `uint16_t` offset pair here... that goes into the page table!,-1,0.793990969657898
392826080,424,devshgraphicsprogramming,2020-03-16T07:24:03Z,`stexoffset` is still supposed to be 32bit and use full precision here ;),1,0.8855665326118469
392826450,424,devshgraphicsprogramming,2020-03-16T07:25:13Z,"make the `x()`, `y()` and `layer()` functions of `stexoffset` be handled via the texture packer (so it can pass through the bit allocation)",0,0.9951070547103882
392846113,424,devshgraphicsprogramming,2020-03-16T08:17:09Z,only need to be multiple (different in each dimension) of max-allocatable texture size (which itself needs to be pot and square),0,0.9889621138572693
392872752,424,devshgraphicsprogramming,2020-03-16T09:11:12Z,"this will always happen, the texture will always have a mip-tail < pagesize unless its clipped, easy to figure out `any((_img->getmipsize(_subres.basemiplevel+_subres.levelcount-1u) < m_pgszxy_as_vectorsimdu) & mask1100)`",0,0.9900137186050415
392873520,424,devshgraphicsprogramming,2020-03-16T09:12:32Z,it doesn't get allocated in a different place in vt atlas,0,0.9837424755096436
392873910,424,devshgraphicsprogramming,2020-03-16T09:13:11Z,no need for `layer` in the name (since every layer will have the same size),0,0.993065357208252
392883219,424,devshgraphicsprogramming,2020-03-16T09:30:06Z,wrong the offsets into the padded physical texture are stored at the pixels of the page table,0,0.9840013980865479
392884987,424,devshgraphicsprogramming,2020-03-16T09:33:17Z,"the virtual address range can have a completely independent number of layers, and also there's no reason to have more than 1 (because even a 16kx16k texture will give you crazy virtual texcoord range)",0,0.9576466083526611
392889528,424,devshgraphicsprogramming,2020-03-16T09:41:16Z,"`core::findmsb(core::min(_tilesperdim,(core::rounduptopot(maxallocatabletexturesize)+m_pgszxy-1u)/m_pgszxy)))+1`",0,0.9906092882156372
392890259,424,devshgraphicsprogramming,2020-03-16T09:42:31Z,uze a proper sizeof() instead of an integer literal,0,0.9866932034492493
392890365,424,devshgraphicsprogramming,2020-03-16T09:42:41Z,again,0,0.9269572496414185
392941547,424,devshgraphicsprogramming,2020-03-16T11:07:02Z,"yeah this is screwed, cause `stexoffset` is not supposed to store that",-1,0.9862268567085266
392970622,424,Crisspl,2020-03-16T12:08:36Z,"now page table and physical addr texture both have the same number of pages (texels in case of page tab) and layers, so stexoffset can represent both things. however ofc u're right that numbers of pages in physical addr tex and in page table could be completely independent",0,0.9878799319267273
392971829,424,devshgraphicsprogramming,2020-03-16T12:10:54Z,arent you supposed to compute that while taking the padding into account? like in `physaddrtexlayersz` or `pagecoords` ?,0,0.9943081736564636
392973162,424,Crisspl,2020-03-16T12:13:45Z,"nah, it's `src_` (i.e. into image being packed) offset, there's no padding",0,0.9933704137802124
392975190,424,Crisspl,2020-03-16T12:17:44Z,so now i use stexoffset to represent page-wise address/offset into physical addr tex (what is stored in page table texels) and texel-wise offset into page table (then upper 16 bits are unused ofc),0,0.9935164451599121
392978554,424,Crisspl,2020-03-16T12:23:26Z,"well, i think it has to be pot for allocation of squares with morton codes to work fine",0,0.9264907240867615
392980223,424,devshgraphicsprogramming,2020-03-16T12:25:34Z,"yeah thats the wrong thing going into the page table, i think i'll stop reviewing the commit here.",-1,0.9038296341896057
392980874,424,devshgraphicsprogramming,2020-03-16T12:26:22Z,"again, `stexoffset` is not your page pointer (doesn't hold the mip-tail pointer in high bits).",0,0.9895977973937988
392984478,424,Crisspl,2020-03-16T12:30:48Z,thats why theres this `if ` :p,1,0.9296275973320007
392985026,424,Crisspl,2020-03-16T12:31:27Z,? i dont understand,-1,0.6892398595809937
392986032,424,Crisspl,2020-03-16T12:32:35Z,what does it have to do with this code?,0,0.9680355787277222
392990301,424,Crisspl,2020-03-16T12:37:36Z,"you probably shouldnt even review this commit, look at state of code from last commit",0,0.9419891238212585
392990986,424,Crisspl,2020-03-16T12:38:29Z,why are you telling me what my code is and what isnt xd,-1,0.6985335350036621
393032945,424,devshgraphicsprogramming,2020-03-16T13:46:16Z,you don't need this variable anymore it seems?,0,0.965994656085968
393033495,424,devshgraphicsprogramming,2020-03-16T13:47:10Z,"don't do that, its confusing. separate types.",-1,0.9528487920761108
393034286,424,Crisspl,2020-03-16T13:48:24Z,"yea, thx",0,0.9457147717475891
393040001,424,devshgraphicsprogramming,2020-03-16T13:56:54Z,"its useful to have a full 32bit virtual texture offset, because then youre megatexture can be `2^(31 + pagesizelog2*pagedimensions)` texels in size which becomes really fun once streaming is implemented (page size of 1024 could allow a 64m x 32m texture which would be enough to store the whole of the earth with resolution of 0.25m by 0.25m pixels)",1,0.783999502658844
393041946,424,devshgraphicsprogramming,2020-03-16T13:59:41Z,"ah shit you're kind of right for morton code it needs to be either `xdim(1<<tilesperdimlog2), ydim(1<<tilesperdimlog2)` or `xdim(1<<(tilesperdimlog2+1)), ydim(1<<tilesperdimlog2)`",-1,0.986120879650116
393042611,424,devshgraphicsprogramming,2020-03-16T14:00:43Z,i don't think that `levelcount` if and logic behind calculating it works out the same.,0,0.961759090423584
393043046,424,devshgraphicsprogramming,2020-03-16T14:01:26Z,the last page for the mip-tail it does not need a separate offset in the virtual address space,0,0.9930318593978882
393044535,424,devshgraphicsprogramming,2020-03-16T14:03:31Z,"the fact that you were using `stexoffset` as the input to this function and i'm under the impression that `stexoffset` is what you get back from the `alloc(icpuimage,subresource)` function when you ask the packer to place an image and its mipmap chain in the virtual address space",0,0.99177086353302
393044795,424,devshgraphicsprogramming,2020-03-16T14:03:54Z,"ah ok, didn't notice it was `src`",0,0.6918919086456299
393052614,424,Crisspl,2020-03-16T14:14:47Z,it's not even square,0,0.8488965630531311
393055082,424,Crisspl,2020-03-16T14:17:05Z,"ah, so it's just the confusion from me using stexoffset for both things",-1,0.5037401914596558
393074188,424,devshgraphicsprogramming,2020-03-16T14:38:53Z,still need one,0,0.9445973038673401
393076884,424,devshgraphicsprogramming,2020-03-16T14:42:34Z,yes morton codes work with textures that have an aspect ratio of 1:1 or 2:1,0,0.9798997044563293
393077538,424,devshgraphicsprogramming,2020-03-16T14:43:28Z,"because its z-order and the z covers the x first so its possible to have a 2:1 ratio domain. in 3d morton code works with 2:1:1, 2:2:1 and 1:1:1",0,0.9828186631202698
393077783,424,devshgraphicsprogramming,2020-03-16T14:43:47Z,looks like it,0,0.9596205949783325
393089903,424,devshgraphicsprogramming,2020-03-16T15:00:31Z,check for failed allocation,0,0.9749795198440552
393090543,424,devshgraphicsprogramming,2020-03-16T15:01:25Z,why use a loop to determine `levelcount` ?,0,0.9905779361724854
393094620,424,devshgraphicsprogramming,2020-03-16T15:07:03Z,"if `i+m_pgszxylog2+1>=_subres.levelcount` then allocate two pages instead of one (obviously make sure you quit the 3 loops as soon as possible, so you don't hit this multiple times)",0,0.9934768080711365
393099694,424,devshgraphicsprogramming,2020-03-16T15:14:32Z,"also its more efficient to allocate addresses from the pool up to 1000 thousand at a time (stack for temporary address storage and function input arguments) using `core::address_allocator_traits ::multi_alloc(m_pageallocator,...)`",0,0.9948878884315491
393100483,424,devshgraphicsprogramming,2020-03-16T15:15:39Z,why are you now returning a 128bit value instead of a 32bit?,0,0.9806671142578125
393101734,424,devshgraphicsprogramming,2020-03-16T15:17:29Z,dont call it `stexoffset` if this is your pointer to the physical storage page a name textureoffset is only allowed to name the offset into virtual address space,0,0.994839608669281
393102763,424,devshgraphicsprogramming,2020-03-16T15:18:56Z,"you can't use 0 to be the ""no mip tail value"" because the valid range of page addresses is [0,max) only values past the max are allowed to be used to denote ""invalid""",0,0.9916626214981079
393103104,424,devshgraphicsprogramming,2020-03-16T15:19:25Z,`(_offset.addr&(0xffffu<<16))!=invalid_addr`,0,0.9925661087036133
393133767,424,Crisspl,2020-03-16T16:02:02Z,"because why not, bitdepth doesnt matter as long as its sufficient for all values",0,0.8991591334342957
394636034,424,devshgraphicsprogramming,2020-03-18T20:59:03Z,something really inconsistent is going on with your use of `_subsquaresz` across alloc and free,0,0.8924059867858887
394636972,424,devshgraphicsprogramming,2020-03-18T21:00:50Z,if you're going down the virtual function route in `itexturepacker` then the type for `alloc` and `free` needs to be `iimage` not `icpuimage`,0,0.9953016042709351
394637700,424,devshgraphicsprogramming,2020-03-18T21:02:16Z,you can share all this between `icputexturepacker` and a future `igputexturepacker` by declaring it all in `itexturepacker`,0,0.9941756725311279
394639611,424,devshgraphicsprogramming,2020-03-18T21:06:11Z,lets not use constant literals unless they are blatantly obvious,0,0.7981635332107544
394640172,424,devshgraphicsprogramming,2020-03-18T21:07:26Z,i thought there as a simple equation for getting this without having to resort to a trial&error loop,0,0.9521045684814453
394640581,424,devshgraphicsprogramming,2020-03-18T21:08:15Z,this function is different for 2d and 3d i'd suppose,0,0.9517887234687805
394640883,424,devshgraphicsprogramming,2020-03-18T21:08:48Z,?,0,0.9557723999023438
394649773,424,devshgraphicsprogramming,2020-03-18T21:27:54Z,still relevant,0,0.9331474304199219
394649873,424,devshgraphicsprogramming,2020-03-18T21:28:05Z,still relevant,0,0.9331474304199219
394650261,424,devshgraphicsprogramming,2020-03-18T21:28:49Z,still relevant,0,0.9331474304199219
394650304,424,devshgraphicsprogramming,2020-03-18T21:28:54Z,still relevant,0,0.9331474304199219
394650787,424,devshgraphicsprogramming,2020-03-18T21:29:55Z,still relevant,0,0.9331474304199219
394650993,424,devshgraphicsprogramming,2020-03-18T21:30:25Z,"yeah, but when they get copied over make sure shaders use 64bit as input/storage",0,0.9726697206497192
394651338,424,devshgraphicsprogramming,2020-03-18T21:31:09Z,whats the status now?,0,0.989567220211029
394652299,424,devshgraphicsprogramming,2020-03-18T21:33:19Z,ok latest version looks good.,1,0.7691040635108948
394655105,424,devshgraphicsprogramming,2020-03-18T21:39:46Z,"nice stuff, really like the new api of this commit one suggestion... make the `width` and `height` store a unorm 16 unsigned ratio of `originaltexturesize/maxallocatabletexturesize` then we can easily work out the scaling factor for uvs in the virtual texture `pgtab_x` and y should be unorm offsets in virtual uv space, they will be 100% accurate as you require each dimension of virtual page table to be a power of two",1,0.99018794298172
394655949,424,devshgraphicsprogramming,2020-03-18T21:41:40Z,"debug break if, not assert",0,0.9345822930335999
394656261,424,devshgraphicsprogramming,2020-03-18T21:42:23Z,goes into the scontext!,0,0.9741962552070618
394691606,424,Crisspl,2020-03-18T23:14:20Z,"no, why?",0,0.8237459063529968
394691849,424,Crisspl,2020-03-18T23:15:05Z,"right, thx",0,0.9770968556404114
394692249,424,Crisspl,2020-03-18T23:16:29Z,"ofc, i have only 2d functions",0,0.9396867156028748
394692729,424,Crisspl,2020-03-18T23:17:53Z,i dont understand,-1,0.8725551962852478
394693356,424,Crisspl,2020-03-18T23:19:56Z,"ah, thats how u do multi_alloc",0,0.6403577327728271
394693666,424,Crisspl,2020-03-18T23:21:00Z,"it is, thats why `if constexpr`s are there",0,0.992002010345459
394860979,424,devshgraphicsprogramming,2020-03-19T08:31:52Z,one place uses the `_subsquaresz` as normal and `free` squares it instead? also see my comment about this class not being a proper address allocator because it doesn't conform to the api,0,0.9779353141784668
394866289,424,devshgraphicsprogramming,2020-03-19T08:42:37Z,"you're not getting me, you're assuming that if i do a 2d morton code with a return type `uint32_t` i want a 16bit x,y resolution but i could want a 32bit value, while only wanting a 4bit x,y resolution (morton code for values up to 255) - that stuff is useful for computing small neighbourhoods, etc. this is why the bit-depth of the morton code should not be inferred from the size of the return type.",0,0.9851481914520264
394866751,424,devshgraphicsprogramming,2020-03-19T08:43:25Z,"its convoluted and not pretty to work out the `levelcount`, unlike `any((_img->getmipsize(_subres.basemiplevel+_subres.levelcount-1u) < m_pgszxy_as_vectorsimdu) & mask1100)`",0,0.916451632976532
394905713,424,devshgraphicsprogramming,2020-03-19T09:52:34Z,"yes, you shouldn't be touching an `address_allocator` directly (just like std c++ lib doesn't touch allocators directly) but call all their methods via the `traits` wrapper xd",0,0.9888511300086975
394907553,424,devshgraphicsprogramming,2020-03-19T09:55:29Z,yeah just make it explicit in the name that this is a `2d` function,0,0.9885668754577637
394930664,424,Crisspl,2020-03-19T10:35:41Z,"i know it isnt, therefore i dont know why would i want to inherit from general purpose addr allocator instead of having it as member?",0,0.9121422171592712
394955025,424,devshgraphicsprogramming,2020-03-19T11:21:25Z,"i'm questioning two things: 1. are you sure that is not a bug? 2. why do you need a class that looks like an address allocator, has methods almost like one and then needlessly wraps an existing address allocator?",0,0.8639285564422607
394980211,424,Crisspl,2020-03-19T12:11:40Z,"1. both squares it, maybe u're looking at some old code 2. maybe u're right.. i'll try to rewrite it with inheritance",0,0.9835104942321777
394981674,424,Crisspl,2020-03-19T12:14:21Z,"ah, ok, now i get what u mean",0,0.659150242805481
394988317,424,devshgraphicsprogramming,2020-03-19T12:27:15Z,"i think there's probably no need to have it in the first place, since its a very thin intermediatory to `generalpurpose`",0,0.961972177028656
396372581,424,devshgraphicsprogramming,2020-03-23T11:10:22Z,`createmeshstub` its a stub cause it unusable without a pipeline,0,0.9933491349220276
396373006,424,devshgraphicsprogramming,2020-03-23T11:11:09Z,agreed,0,0.9622275233268738
396374004,424,devshgraphicsprogramming,2020-03-23T11:12:59Z,"probably not, not many people expect their vertex colours to be decoded from srgb encoding, and once you decode you either lose alpha or you need to expand to 64bits from 32bit.",0,0.9492608904838562
396374143,424,devshgraphicsprogramming,2020-03-23T11:13:11Z,could be a loader flag at some point,0,0.9865279793739319
396374450,424,devshgraphicsprogramming,2020-03-23T11:13:44Z,why at the last binding?,0,0.9736537337303162
399501275,424,devshgraphicsprogramming,2020-03-27T19:44:16Z,"put this together with the packer, you've now repeated yourself multiple times",0,0.9886347055435181
399501500,424,devshgraphicsprogramming,2020-03-27T19:44:45Z,but you're using `set=0` above?,0,0.9948280453681946
399502330,424,devshgraphicsprogramming,2020-03-27T19:46:38Z,"why override the whole bsdf, if you could only override the texture fetching functions?",0,0.9886199235916138
399502717,424,devshgraphicsprogramming,2020-03-27T19:47:27Z,"isnt `tile_padding` runtime configurable, why is it in caps?",0,0.9913444519042969
399503096,424,devshgraphicsprogramming,2020-03-27T19:48:14Z,"virtual texture size, not the page table size so `extent.width*pagesize`",0,0.9905709028244019
399503592,424,devshgraphicsprogramming,2020-03-27T19:49:13Z,really want the sample to be done with ubos and multidrawindirect,0,0.9726321697235107
399514785,424,devshgraphicsprogramming,2020-03-27T20:13:40Z,still an issue,0,0.9333031177520752
399514907,424,devshgraphicsprogramming,2020-03-27T20:13:57Z,still an issue,0,0.9333031177520752
399516088,424,devshgraphicsprogramming,2020-03-27T20:16:35Z,you probably want to return the smartpointer to the texture packers (virtual textures) used by the pipeline you could do it in the global metadata actually,0,0.9936009049415588
399516179,424,devshgraphicsprogramming,2020-03-27T20:16:49Z,still an issue,0,0.9333031177520752
399516386,424,devshgraphicsprogramming,2020-03-27T20:17:18Z,still an issue,0,0.9333031177520752
399516813,424,devshgraphicsprogramming,2020-03-27T20:18:20Z,still an issue,0,0.9333031177520752
399516896,424,devshgraphicsprogramming,2020-03-27T20:18:29Z,still an issue,0,0.9333031177520752
399517973,424,devshgraphicsprogramming,2020-03-27T20:20:47Z,this should 100% be part of the itexturepacker,0,0.9918198585510254
399528214,424,devshgraphicsprogramming,2020-03-27T20:43:57Z,why are you using `coating` here everywhere? i'm getting confused,-1,0.6537742614746094
399531488,424,devshgraphicsprogramming,2020-03-27T20:51:24Z,"put in some metadata, either global or pipeline, you'll want to return that with the asset",0,0.9913040399551392
399534336,424,devshgraphicsprogramming,2020-03-27T20:58:09Z,"i'd just take saner input parameters, such as log2 of the sizes (so then you don't need to assert for pot)",0,0.9859045147895813
399535856,424,devshgraphicsprogramming,2020-03-27T21:01:42Z,"well actually you could allow the `_tilesperdim` to be different in width,height and layercount (but still pot for the bit extraction) for some added flexibility in the packing of the tiles in the physical texture",0,0.9920997023582458
399536188,424,devshgraphicsprogramming,2020-03-27T21:02:26Z,unused and confusing variable,-1,0.8080741167068481
399541336,424,devshgraphicsprogramming,2020-03-27T21:14:56Z,"need sane default parameters for the `_pgtabszxy`, `_tilesperdim` could be in log2",0,0.9939893484115601
399543239,424,devshgraphicsprogramming,2020-03-27T21:19:42Z,"`_maxmiplevels` is the number of levels of the page table, not the max levels of the allocated texture.. will be confusing. because if we change the tile size then the max mip level will change also, i'd rather have it as the max texture mipmap level (and hence max size)",0,0.7715939283370972
399543822,424,devshgraphicsprogramming,2020-03-27T21:21:18Z,"physical texture can be any size as long as individual sides are pot (2x128 tiles is ok, so is 64x16)",0,0.9902874231338501
399543935,424,devshgraphicsprogramming,2020-03-27T21:21:40Z,copy from `params.extent` less chance for fuckups,0,0.8320892453193665
399544079,424,devshgraphicsprogramming,2020-03-27T21:21:58Z,do computation in terms of `params.extent` and `params.arraylayers`,0,0.9938762784004211
399548852,424,devshgraphicsprogramming,2020-03-27T21:34:40Z,because of ieee754 precision issues once you start having virtual uv coordinates for textures that are > 32k in size (256 pages) we should support layered page tables and uv offsets,0,0.9882060885429382
399550261,424,Crisspl,2020-03-27T21:38:44Z,"yea, i know, keeping it square just makes address encoding easier",0,0.9008188247680664
399560955,424,devshgraphicsprogramming,2020-03-27T22:10:02Z,the equation for this is [code block],0,0.9924214482307434
399564446,424,devshgraphicsprogramming,2020-03-27T22:21:45Z,"this needs to be a minimum, `core::min(_subres.levelcount,m_maxpagetablemiplevels+m_pgszxy_log2)`",0,0.9925199747085571
399565698,424,devshgraphicsprogramming,2020-03-27T22:26:13Z,"you know from the `computesquaresz` that you will need [code block] pages, and you can do the multi_alloc from the pool allocator here.",0,0.9934903383255005
399566204,424,devshgraphicsprogramming,2020-03-27T22:27:40Z,leaving the loop unreviewed for now.,0,0.9361032843589783
399566326,424,devshgraphicsprogramming,2020-03-27T22:27:59Z,"this code is `computesquaresz` again, but under a different form, keep dry",0,0.9826108813285828
399566416,424,devshgraphicsprogramming,2020-03-27T22:28:18Z,this code is `computesquaresz`,0,0.9944677352905273
399566939,424,devshgraphicsprogramming,2020-03-27T22:30:11Z,"`multi_free` can be expensive, better that you buffer up the addresses to be freed",0,0.990441083908081
399576156,424,devshgraphicsprogramming,2020-03-27T23:04:39Z,`sizeof()` not a random `4u`,0,0.9929229021072388
399576266,424,devshgraphicsprogramming,2020-03-27T23:05:07Z,moved to: [a link],0,0.9901926517486572
399576547,424,devshgraphicsprogramming,2020-03-27T23:06:23Z,actually best if it goes into the global metadata that will be returned after the assets load.,0,0.9798750281333923
399577358,424,Crisspl,2020-03-27T23:09:50Z,yea see the comment in top line. it disables set3 as an extra because they're not needed,0,0.9918878674507141
399577868,424,devshgraphicsprogramming,2020-03-27T23:12:01Z,ah ok,0,0.8416553735733032
399578004,424,devshgraphicsprogramming,2020-03-27T23:12:43Z,well you can still easily encode addresses if each dimension is pot but all are not the same,0,0.9871925115585327
399580175,424,Crisspl,2020-03-27T23:21:52Z,vt textures (both) are getting returned as ds0 through pipeline metadata attached to every pipeline,0,0.9919441938400269
399582051,424,Crisspl,2020-03-27T23:29:50Z,sometimes im accessing `bsdf` table through random union member (e.g. coating) because i'd to have lots of ifs just to access it through proper union member even though it's always same array (since it's a union and `bsdf` array is at the same offset in all bsdf structs). well.. this explanation is also kinda blurry xd maybe you'll want to ask on discord,-1,0.9436388611793518
399585204,424,devshgraphicsprogramming,2020-03-27T23:44:51Z,"can you add another union as an alias, and use that instead so we're not confused to high shit?",-1,0.8957136273384094
399585309,424,devshgraphicsprogramming,2020-03-27T23:45:24Z,"these are just the textures, and not the texture manager. also for multithreading the texture packer cannot be global and persistent between loading calls",0,0.9891665577888489
399655019,424,Crisspl,2020-03-28T12:07:16Z,"yea, i wanted to do it, but it would require dynamic allocation of arrays for params of `multi_alloc_addr` so i gave it up",0,0.9595510959625244
399660401,424,devshgraphicsprogramming,2020-03-28T13:06:07Z,hmm ok,0,0.8402149677276611
399661647,424,Crisspl,2020-03-28T13:18:18Z,"oh, i thought i put it into scontext. sure, thanks",1,0.8907610774040222
399661882,424,Crisspl,2020-03-28T13:20:28Z,"yea, but packer is useful as long as something is being packed",0,0.9359846711158752
399663456,424,Crisspl,2020-03-28T13:37:09Z,this code is not there any more and twosided already is a bitfield,0,0.9755586981773376
399664922,424,Crisspl,2020-03-28T13:52:33Z,done,0,0.8974218964576721
399665009,424,Crisspl,2020-03-28T13:53:27Z,will do once it's implemented correctly,0,0.9883975386619568
399670610,424,Crisspl,2020-03-28T14:51:14Z,fixed with your fun equation,1,0.5443158149719238
399671854,424,Crisspl,2020-03-28T15:02:19Z,leaving as is for now,0,0.9766666889190674
399672032,424,Crisspl,2020-03-28T15:03:50Z,"it's kinda dirty (not 100% safe but very unlikely to be unsafe), i'm assuming that binding 15 is not used by ply loader",-1,0.8519571423530579
399672983,424,Crisspl,2020-03-28T15:13:29Z,"right, thanks",1,0.8544116020202637
399673687,424,Crisspl,2020-03-28T15:20:02Z,because glsl's `texture()` and my `texturevt` differ too much. they have different number of parameters and different types of them. it's very hard/impossible to make a suitable abstraction for texture fetching,-1,0.8210564255714417
399677442,424,Crisspl,2020-03-28T15:55:57Z,done,0,0.8974218964576721
399705119,424,devshgraphicsprogramming,2020-03-28T20:19:02Z,"would be good to return it though in the metadata, it doesn't cost anything really.",0,0.9817584753036499
399705493,424,devshgraphicsprogramming,2020-03-28T20:23:20Z,"well the idea is not that you override the glsl `texture` call, but you override a the mtl shader's `loadkd`, `loadka` functions etc. but of course that would require the routines to be overloadable, not just plain `kd = texture` in the original shader",0,0.9939793348312378
399724726,424,Crisspl,2020-03-29T00:03:22Z,ok,0,0.8787186145782471
402559627,424,devshgraphicsprogramming,2020-04-02T19:29:04Z,what is this color buffer even being used for?,0,0.98553466796875
402656888,424,devshgraphicsprogramming,2020-04-02T23:39:10Z,pageid is without padding xd,0,0.9724993109703064
405338248,424,devshgraphicsprogramming,2020-04-08T08:12:32Z,"static inline `const`, not `constexpr`",0,0.9892920255661011
405447171,424,devshgraphicsprogramming,2020-04-08T11:16:10Z,"why 12, in 3d you'd have 26 border regions (3x3x3 minus the center)",0,0.9816470742225647
405447420,424,devshgraphicsprogramming,2020-04-08T11:16:42Z,there's now a `getregions(mipmaplevel)`,0,0.9946820139884949
405484624,424,Crisspl,2020-04-08T12:26:18Z,why?,0,0.8699262738227844
410732330,424,devshgraphicsprogramming,2020-04-18T18:22:35Z,"i've had a really bad time with performance and switches in my gpu raytracingwork... use if statements, also i gave you a glsl snippet on discord on how to implement the wrapping modes with the least divergence (reusing a few ops)",-1,0.9558449387550354
429988167,424,devshgraphicsprogramming,2020-05-25T15:22:16Z,status?,0,0.9820219278335571
429991939,424,devshgraphicsprogramming,2020-05-25T15:31:48Z,"because its a non trivial struct, i believe c++ standard states that only trivial pod can be constexpr",0,0.9490321278572083
430041721,424,Crisspl,2020-05-25T18:28:30Z,"fixed, made this union member [code block]",0,0.9925224184989929
430042446,424,Crisspl,2020-05-25T18:31:58Z,"any literal type can be constexpr. and literal type is any type with at least one constexpr constructor. but anyway this `default_region_functor` disappeared somewhere, idk what happened with it",0,0.968288004398346
430076725,424,devshgraphicsprogramming,2020-05-25T21:18:08Z,todo: opcode ordering,0,0.9892483353614807
431093829,424,devshgraphicsprogramming,2020-05-27T12:54:03Z,why? what's wrong with the implementation of `core::floatbitstouint` ?,0,0.9719770550727844
431096538,424,devshgraphicsprogramming,2020-05-27T12:58:14Z,"couple pointers: - start with implementing sampling for lambertian, then progress onto the delta distributions - `*cos_gen_sample` should take the viewsurfaceinteraction as an `in` parameter (we need to know view, normal, ndotv and possibly later the ray derivatives or ray covaraiance matrices) - do an overload for `*cos_gen_sample` that takes `vec2` and `uvec2` then we can implement, this is wo we can implement like this [code block]",0,0.9938879609107971
431141481,424,devshgraphicsprogramming,2020-05-27T13:43:51Z,"since `irr_glsl_viewsurfaceinteraction` does not contain normalized `v` nor `n` we should introduce a `irr_glsl_normalizedviewsurfaceinteraction` which contains a normalized `v`, `n` and replace a few functions (`bsdf_cos_sample`, `irr_glsl_calcbsdfisotropicparams` etc. as well as change the type inside the `irr_glsl_bsdfisotropicparams` struct) that take `irr_glsl_viewsurfaceinteraction` with ones that take `irr_glsl_normalizedviewsurfaceinteraction` instead.",0,0.9955976605415344
431220623,424,devshgraphicsprogramming,2020-05-27T15:15:16Z,make a note that [a link] + [a link] has a sampling according to visible microfacets which is much shorter and simpler its a bit disgusting for implementation in glsl,-1,0.9892956614494324
431221320,424,Crisspl,2020-05-27T15:16:12Z,not with `floatbitstouint` but as you were saying once it's better to keep all as uints because `-ffast-math` might change some bits while copying or something (if the bits happen to match ieee754 nan or inf bit pattern),0,0.9927331209182739
431223459,424,devshgraphicsprogramming,2020-05-27T15:19:11Z,hmm we could call `irr_glsl_normalizedviewsurfaceinteraction` as `irr_glsl_isotropicviewsurfaceinteraction` instead,0,0.9915930032730103
431232866,424,devshgraphicsprogramming,2020-05-27T15:29:12Z,"you need the frisvad tangent space creation function from example 22 (raytracedao, it might have been removed since then, but in one of the revisions it was there) this will allow you to transform out the half vector into whatever space `v` and `n` are i suggest adding a struct `irr_glsl_anisotropicviewsurfaceinteraction` to hold normalized `t`, `b`,`tdotv` and `bdotv` then this starts being relevant. we can have two overloads of `irr_glsl_calcanisotropicinteraction(in irr_glsl_isotropicviewsurfaceinteraction isotropic, args...)` : - one where `args` are `in vec3 t, in vec3 b` (user knows and cares about tangent space, require t and b be normalized inputs) - one where `args` is just `in vec3 t`, its the same as above but you construct bitangent from `cross(n,t)` - one where `args` are nothing and you use frisvad method to construct tangent space quickly then using t,b,n it will be really easy for you to bring the h vector to the space of `v`",0,0.9903458952903748
431244552,424,Crisspl,2020-05-27T15:44:53Z,"yeah, i've seen this code and thats exactly the reason why i wanted to look for some other source before i'm going to copy pbrt's code. i have heitz's paper about sampling ggx (ggx actually got 2nd paper with preetier and faster solution) and beckmann vndf and possibly there i'll find something better",0,0.9399780035018921
431246654,424,Crisspl,2020-05-27T15:47:30Z,"nice, thanks",1,0.9608837366104126
431261605,424,devshgraphicsprogramming,2020-05-27T16:04:40Z,"actually `(tdotv,bdotv,ndotv)` is the transformation of `v` into the local tangent space where `n=(0,0,1)` which means that reflection gets piss-easy [code block] p.s. `bsdfsample` should probably return `tdoth`,`bdoth`,`ndoth`,`hdotv` and the freebies alongside the existing probability and `l`. in all honesty there should always be two overloads, one for isotropic output and one for anisotropic.",0,0.9706629514694214
431270349,424,devshgraphicsprogramming,2020-05-27T16:16:50Z,"actually we need to separate out the probability (and not include `probability` in bsdf sample, just `contribution`) from the contribution [code block] we should probably have two overloads of this function, one that has an `out probability` and one that does not",0,0.9949226975440979
431271050,424,devshgraphicsprogramming,2020-05-27T16:17:52Z,and `contribution` should be a `spectrum`,0,0.9929170608520508
431271233,424,devshgraphicsprogramming,2020-05-27T16:18:09Z,"this should be `irr_glsl_beckmann_smith_height_correlated_cos_gen_sample`, i have no use for importance sampling just the ndf",0,0.9906434416770935
431273025,424,devshgraphicsprogramming,2020-05-27T16:20:46Z,"no use for just sampling the ndf, just give me an isotropic roughness importance sampling (with fresnel)",0,0.9704926013946533
431273718,424,devshgraphicsprogramming,2020-05-27T16:21:53Z,anisotropic as well,0,0.9801859855651855
431276556,424,devshgraphicsprogramming,2020-05-27T16:26:12Z,if ax==ay then ax*ay ==a2 now the problem is that i don't remember is anistropy is a ratio of ax/ay or ay/ax could we worked out from the `irr_glsl_ggx_burley_aniso` above,0,0.9925724267959595
431277005,424,devshgraphicsprogramming,2020-05-27T16:26:55Z,use frisvad function,0,0.9929152727127075
431279066,424,devshgraphicsprogramming,2020-05-27T16:30:03Z,"probably because stratified sampling preserves area, and area is proportional to radius squared so if you want to map a linear change in area to a change in radius you need to sqrt the area (first random number == sub-circle area)",0,0.9863852858543396
431285977,424,devshgraphicsprogramming,2020-05-27T16:39:04Z,"btw for lambert, etc. i want concentric mapping not radial [a link] also to be packaged off to a function `vec2 irr_glsl_concentricmapping(in vec2 sample)` in some header with stratified map and sample in the name",0,0.9922829270362854
431286751,424,devshgraphicsprogramming,2020-05-27T16:40:25Z,that `sincos` function would be useful here,0,0.9901753067970276
431288144,424,devshgraphicsprogramming,2020-05-27T16:42:47Z,"you need to use `vec3(tdotv,bdotv,ndotv)` instead of `v` this whole thing only works with a tangent space where n=(0,0,1)",0,0.9936254024505615
431289604,424,devshgraphicsprogramming,2020-05-27T16:45:04Z,hmm probably not in this case.,0,0.7736788392066956
431296284,424,devshgraphicsprogramming,2020-05-27T16:54:09Z,"also need to handle a special case when length of stretched vector is close to zero (smooth surface and grazing angle), or this whole thing will be full of `nan` (when `ndotv` is close to zero, we have a tendency of `a--->1.0`, etc.) meaning you can just skip the whole body and set `tdoth=0.0;bdoth=0.0;ndoth=1.0;`",0,0.992567777633667
431298583,424,devshgraphicsprogramming,2020-05-27T16:57:00Z,"there's no need for that `max`, sqrt from before guarantees non negativity, t2 is zero in z by construction, t1 and v should be positive also your `n` here is equivalent to `tdoth,bdoth,ndoth`",0,0.991193950176239
431300322,424,devshgraphicsprogramming,2020-05-27T16:59:32Z,"iee754 should guarantee that `p1` and `p2` computed above are always `<=1.0`, which in turn should guarantee that their squares are smaller.... not sure about whether the `- p1*p1 - p2*p2>-1.0`, but we should probably try it without the `max` clamp at some point when you're finished",0,0.9868423342704773
431302187,424,devshgraphicsprogramming,2020-05-27T17:02:37Z,"actually you should keep track of the sign of `ndotv` because you should use a temporary var equal to `abs(ndotv)`, then do the whole sampling",0,0.9937036633491516
431306168,424,devshgraphicsprogramming,2020-05-27T17:09:30Z,you could store the `u.y<a` [code block],0,0.9895910620689392
431315946,424,devshgraphicsprogramming,2020-05-27T17:26:07Z,making it more legible and performant [code block],0,0.9864397644996643
431316554,424,devshgraphicsprogramming,2020-05-27T17:27:11Z,pursuant to [a link] [code block],0,0.9921486377716064
431317461,424,devshgraphicsprogramming,2020-05-27T17:28:42Z,"actually the part onwards from when you establish `tdoth`,`bdoth` and `ndoth` could be a helper function shared amongst all specular sampling routines since the rest of the math is always the same",0,0.9935362339019775
431485665,424,devshgraphicsprogramming,2020-05-27T22:48:10Z,"afaik when preforming assignment/copy everything should be fine, its just performing any other operation with them might backfire",0,0.9833542704582214
431742195,424,Crisspl,2020-05-28T10:39:59Z,"hm, i need this tangent frame (or whatever it's called, [t,b,n]) regardless of whether it's isotrpic or anisotropic distribution (i need to put l into same space where n is defined) so im not sure irr_glsl_anisotropicviewsurfaceinteraction and irr_glsl_isotropicviewsurfaceinteraction is the right solution",0,0.9390377402305603
431755389,424,devshgraphicsprogramming,2020-05-28T11:05:59Z,"well yeah, because `irr_glsl_isotropicviewsurfaceinteraction` would indicate that the user does not know the tangent vector (has not provided one) and we can make one up using the frisvad function, and `irr_glsl_anisotropicviewsurfaceinteraction` represents a known tangent frame where user specified `t` (and even `b`) explicitly (you cannot rotate it for them).",0,0.9926521182060242
431757124,424,devshgraphicsprogramming,2020-05-28T11:09:29Z,"i'm not against requiring bsdf sampling functions take `irr_glsl_anisotropicviewsurfaceinteraction` as input always, i just want 3 or more different ways of turning a `irr_glsl_isotropicviewsurfaceinteraction` into the anisotropic struct.",0,0.9754670858383179
431813985,424,Crisspl,2020-05-28T12:57:29Z,"yea, because without sqrt samples much more dence near to centre of disk, same thing as uniform disk sampling described in pbrt (not the concentric one)",0,0.9876770377159119
432689714,424,devshgraphicsprogramming,2020-05-29T19:26:43Z,"optimize later, either a bit flag or `<`+`>=` compare, this 5 comparison thing is awful",-1,0.9715021252632141
432710828,424,devshgraphicsprogramming,2020-05-29T20:07:39Z,i thought we agreed to have the light and bsdf sampling instruction streams separate and with different opcodes?,0,0.9869824647903442
432712128,424,devshgraphicsprogramming,2020-05-29T20:10:42Z,"you should really put the `scale` into the same byte offset on these bsdf data structs, so that you may fetch outside the if statements",0,0.994599461555481
432712664,424,devshgraphicsprogramming,2020-05-29T20:11:57Z,also the multiplication of the `a` by `scale` should be carried out near the `return` outside the if statements,0,0.9952197670936584
432713080,424,devshgraphicsprogramming,2020-05-29T20:12:55Z,work out `instr_getalphautexpresence(instr)` before you enter the if (which could be changed to a switch with a `#define` or something so we can benchmark later),0,0.9951803684234619
432713500,424,devshgraphicsprogramming,2020-05-29T20:13:52Z,actually this whole line [code block] could be done outside the divergent flow control,0,0.9932328462600708
432724374,424,devshgraphicsprogramming,2020-05-29T20:40:07Z,actually i'll just go ahead and suggest the optimized version [code block] should be muuuch faster,0,0.9685237407684326
432726620,424,devshgraphicsprogramming,2020-05-29T20:45:21Z,"there's no diffuse in a dielectric, this is a delta distribution and its impossible to sample explicitly (this opcode should be gone anyway)",0,0.9757354855537415
432727066,424,devshgraphicsprogramming,2020-05-29T20:46:21Z,`instr_execute_coating` coating is a a diffuse modulated by fresnel (reflective component is 0 for expliit sample),0,0.9900858402252197
432727918,424,devshgraphicsprogramming,2020-05-29T20:48:24Z,"yep, and the denominator",0,0.9303147196769714
432728288,424,devshgraphicsprogramming,2020-05-29T20:49:22Z,maybe move the `a2` to the cpu side (run an image filter to square the roughness values),0,0.9929506778717041
432730615,424,devshgraphicsprogramming,2020-05-29T20:55:13Z,"if twosided and `ndotv<0.0` you can flip sign of `n` and any `ndot` var, plus anything to do with the bitangent so `b` and `bdot` oooor, you could take it into account when carrying out the `op_set_geom_normal` and have the twosided bit only be used for that instruction (and freeing up that bit for other instructions)... yes in this case if `twosided` changes you need to emit an extra `op_set_geom_normal`",0,0.9924289584159851
432730801,424,devshgraphicsprogramming,2020-05-29T20:55:40Z,speculatively compute `ndoth2` before you diverge,0,0.9780821800231934
432732756,424,devshgraphicsprogramming,2020-05-29T21:00:15Z,"you could make a `getfresnelclass(opcode)` that returns `0,1,2` for none, dielectric, and conductor to compute the fresnel factor before the divergence. it could be predivided by `(4.0 * currbsdfparams.isotropic.interaction.ndotv)` and then a `needsfresnelcorrection(opcode)` to tell us if the diffuse fresnel factors need to be computed as well",0,0.9951925277709961
432735221,424,devshgraphicsprogramming,2020-05-29T21:06:11Z,"i'd move this `if (currbsdfparams.isotropic.ndotl>flt_min)` outside the divergence and all the way to the `else` of `twosided` in the calling function, this way we can skip the entire intruction executing function for anything that is not roughdielectric or difftrans",0,0.9943540096282959
432735339,424,devshgraphicsprogramming,2020-05-29T21:06:29Z,"this would simplify your life, because for transmissive materials (pretty much only roughdielectric and difftrans) you need to account for `ndotv<0` and `ndotl<0`",0,0.9605217576026917
432737235,424,devshgraphicsprogramming,2020-05-29T21:10:57Z,"basically pair it with a `isbrdf` function (brdf cannot be lit or viewed from the back, unless ofc `twosided`, but then you can only light it from the side you can view it, a.k.a. ndotv and ndotl need to be `abs()`>flt_min have the same sign, plus `ndotv>flt_min || twosided`)",0,0.9930317401885986
432737836,424,devshgraphicsprogramming,2020-05-29T21:12:33Z,i also notice that most bsdf (brdf included) instructions need to fetch at least two textures (one roughness and other some parameter) and every texture has an associated scale... maybe we should fetch the textures without divergence?,0,0.988404393196106
432738218,424,devshgraphicsprogramming,2020-05-29T21:13:30Z,this needs to go to a special constants or numerics/limits header,0,0.9922573566436768
432741804,424,devshgraphicsprogramming,2020-05-29T21:23:18Z,"you can flat out call `normalize` but i would like two separate functions for `irr_glsl_calcfragmentshadersurfaceinteraction`, one that assumes that `n` is unit length (and does not attempt to normalize it) and one that does not. this is why instead of removing the `irr_glsl_viewsurfaceinteraction` struct and its methods, i'd rather introduce a new one.",0,0.9936111569404602
432742924,424,devshgraphicsprogramming,2020-05-29T21:26:22Z,"t can be extracted from your bump-mapping code (kind-of), and use the `irr_glsl_calcbsdfanisotropicparams` overload that computes `b` from a `cross` otherwise sampling will fall apart bigtime.",0,0.9948723912239075
432743379,424,devshgraphicsprogramming,2020-05-29T21:27:43Z,i don't think anybody needs these anymore,0,0.8333369493484497
432743648,424,devshgraphicsprogramming,2020-05-29T21:28:26Z,"same for `t,b` in `irr_glsl_bsdfanisotropicparams` (which also needs to use `irr_glsl_anisotropicviewsurfaceinteraction` btw)",0,0.9944881796836853
432758903,424,devshgraphicsprogramming,2020-05-29T22:01:34Z,"the theta computation kind-of looks like it has a bug, check it, test in all 8 octants",0,0.9260883927345276
432759271,424,devshgraphicsprogramming,2020-05-29T22:02:44Z,not sure the `max` is needed,0,0.9700013995170593
432760179,424,devshgraphicsprogramming,2020-05-29T22:05:41Z,"return more stuff in bsdfsample, stuff we can build evalutation parameters out of (ndotl, tdotl, tdotv etc.)",0,0.993637204170227
432760397,424,devshgraphicsprogramming,2020-05-29T22:06:27Z,also `vec2 sincos(in float theta)` would be a welcome addition,0,0.9695873260498047
432761323,424,devshgraphicsprogramming,2020-05-29T22:08:18Z,"for `irr_glsl_bsdfanisotropicparams irr_glsl_calcbsdfanisotropicparams`, just require an anisotropic surface interaction and `l` instead of what we have already also add overloads for both `irr_glsl_calcbsdfisotropicparams` and `irr_glsl_calcbsdfanisotropicparams` that take `bsdfsample` instead of `l`",0,0.9954984188079834
432761500,424,devshgraphicsprogramming,2020-05-29T22:08:53Z,"this needs a macro, because similar function will be declared over and over",0,0.9915151596069336
432761672,424,devshgraphicsprogramming,2020-05-29T22:09:29Z,you need `approx` in the name,0,0.9924613833427429
432763502,424,devshgraphicsprogramming,2020-05-29T22:16:07Z,explain?,0,0.9806632399559021
432763901,424,devshgraphicsprogramming,2020-05-29T22:17:35Z,this will be common to many `gen` functions for specular brdfs,0,0.9943276047706604
432764607,424,devshgraphicsprogramming,2020-05-29T22:19:53Z,erf is the indefinite integral of `e^(-x^2)` ![a link],0,0.9854872226715088
432765199,424,devshgraphicsprogramming,2020-05-29T22:22:06Z,bu juggling the denominator around and moving the 1.0 in the front into the square roots?,0,0.988379955291748
432765357,424,devshgraphicsprogramming,2020-05-29T22:22:35Z,these functions better go into some c++ std-like header,0,0.9918145537376404
432765649,424,devshgraphicsprogramming,2020-05-29T22:23:42Z,"wow, you do realize that you already have that.... its called `vec3(tdotv,bdotv,ndotv)` !",1,0.5210785865783691
432766075,424,devshgraphicsprogramming,2020-05-29T22:25:16Z,either you're looking straight down at the surface or you have a completely smooth surface?,0,0.9820146560668945
432766343,424,devshgraphicsprogramming,2020-05-29T22:26:10Z,common,0,0.9540656805038452
433166326,424,Crisspl,2020-06-01T10:50:17Z,"yea, this is pre-order traversal creation. post-order is somewhere else around. in pre-order i'm using 2nd dword for jump offset (in post-order 2nd dword is used for registers encoding) hm? how different?",0,0.9317145347595215
433194647,424,Crisspl,2020-06-01T12:03:11Z,"yea, but all parameters can come from texture or constant and i'm unable to check which are available and which ones of them should be fetched from texture without being dependent on opcode. i guess it is possible to find common things in all instructions (at least bsdf/brdf instructions), put `scale` always at the same byteoffset, put texture presence flag for 1st parameter always on bit n and this way i can always fetch at least this 1 parameter without divergence",0,0.9577240347862244
433201624,424,devshgraphicsprogramming,2020-06-01T12:20:45Z,sounds good,1,0.9683692455291748
433202507,424,Crisspl,2020-06-01T12:22:58Z,"because of weird api of `irr_glsl_ggx_burley_aniso`, this is to fix basically",0,0.6743102073669434
433207700,424,devshgraphicsprogramming,2020-06-01T12:35:01Z,let me know when fixed.,0,0.976475179195404
433405851,424,devshgraphicsprogramming,2020-06-01T18:17:33Z,"as we've discussed, having certain opcodes around for nee/lightsampling is pointless, such as the smooth bxdfs also smooth plastic needs a special code-path which basically boils down to specially modulated diffuse",0,0.9208310842514038
437169311,424,devshgraphicsprogramming,2020-06-09T06:37:26Z,i was thinking more [code block],0,0.9269772171974182
437173516,424,devshgraphicsprogramming,2020-06-09T06:47:40Z,"this now needs to be modulated by `irr_glsl_diffusefresnelcorrectionfactor(eta,eta2) * (vec3(1.0)-irr_glsl_fresnel_dielectric(eta, currbsdfparams.isotropic.interaction.ndotv)) * (vec3(1.0)-irr_glsl_fresnel_dielectric(eta, currbsdfparams.isotropic.ndotl))` just like `roughplastic` ideally you'd move this (and the reflectance texture fetch) outside of both or combine the two functions to reduce divergence",0,0.9942329525947571
437174804,424,devshgraphicsprogramming,2020-06-09T06:50:42Z,"do some reasonable checks if you need to fetch the texture (its okay to diverge fora texture fetch because it will skip the memory fetches, saving bandwidth, its not okay to diverge the [multiply] artihmetic )",0,0.9904369711875916
437175884,424,devshgraphicsprogramming,2020-06-09T06:53:14Z,"don't bother supporting phong, if the xml loader detects phong swap it out for ggx and issue a warning in the log",0,0.9792249798774719
437176177,424,devshgraphicsprogramming,2020-06-09T06:53:51Z,but its important to support askhim-shirley !,0,0.6365388631820679
437176805,424,devshgraphicsprogramming,2020-06-09T06:55:10Z,we can still move all the texture fetches outside this switch,0,0.9923521876335144
437177162,424,devshgraphicsprogramming,2020-06-09T06:55:56Z,whats the opacity texture?,0,0.9891617298126221
439972019,424,devshgraphicsprogramming,2020-06-15T07:13:04Z,"you actually don't need there classes anymore, just plop your shaders in the correct builtin path, and add to builtin cmakelists.txt",0,0.990587055683136
440681756,424,devshgraphicsprogramming,2020-06-16T08:36:26Z,do you mind changing the path prefix `irr/builtin/glsl/bsdf` to `irr/builtin/glsl/bxdf` ?,0,0.9940137267112732
443864575,424,devshgraphicsprogramming,2020-06-22T22:41:42Z,maybe make a utility function?,0,0.991333544254303
443865355,424,devshgraphicsprogramming,2020-06-22T22:44:21Z,sampling functions for brdfs are only possible for physically based distributions (ones that are normalized etc) so only provide for the pbr distribution,0,0.9942860007286072
443866722,424,devshgraphicsprogramming,2020-06-22T22:48:42Z,"i would like to draw your attention to the linearity of matrix multiplication what you have is: `n^t . tangentframe . vec3(p.x,p.y,z)` given that tangentframe=tbn is a column matrix, you can see that you can compute [code block]",0,0.9761491417884827
443868131,424,devshgraphicsprogramming,2020-06-22T22:53:17Z,i'm gonna need an explainer on this... btw are you sure that the sampling of visible distribution does not remove the `1.0/(4.0*ndotv)` factor from the remainder like the ggx does?,0,0.9178051948547363
443868581,424,devshgraphicsprogramming,2020-06-22T22:54:47Z,note that for diffuse bsdfs these will be exactly `ndoth==1.0` and `vdoth==vdotn`,0,0.992470383644104
443869059,424,devshgraphicsprogramming,2020-06-22T22:56:12Z,remainder is 1.0 upon transmission!,0,0.9048952460289001
443869146,424,devshgraphicsprogramming,2020-06-22T22:56:28Z,remainder is 1.0 upon reflection!,0,0.9620262384414673
443869424,424,devshgraphicsprogramming,2020-06-22T22:57:22Z,"this is actually not technically a `delta` its a `reflection` (because delta means the function is 0 everywhere except for one point, reflection+transmission are both deltas, but the way the delta point is fixed is different)",0,0.9789963960647583
443869676,424,devshgraphicsprogramming,2020-06-22T22:58:05Z,i'll fix it,0,0.9651115536689758
443870323,424,devshgraphicsprogramming,2020-06-22T23:00:11Z,"you should make a utility function that computes the rest of the `irr_glsl_bsdfsample` given a h in the local tbn frame (which is essentially `tdoth`, `bdoth` and `ndoth`) it would dry up your code.",0,0.9932574033737183
443870520,424,devshgraphicsprogramming,2020-06-22T23:00:46Z,"no, the api from saturday assumes that you already give the sample generated, not generate it inside the function.",0,0.9886959791183472
443871105,424,devshgraphicsprogramming,2020-06-22T23:02:49Z,"this is definitely wrong, it should be `fresnel*g2/g1` [a link]",0,0.7987533807754517
444309526,424,Crisspl,2020-06-23T15:23:23Z,hm? not sure what is this comment about,-1,0.8105389475822449
447426049,424,devshgraphicsprogramming,2020-06-30T05:53:01Z,typo ent = end,0,0.8963797092437744
447427516,424,devshgraphicsprogramming,2020-06-30T05:56:59Z,"if you want this to be performant and not completely kill the performance, then children need to be an offset+count (or multiple offsets) into a shared array of nodes for the whole ir having a dynamically allocated mini-array will eat loads of memory (because of minimum allocation sizes) and completely choke out the `malloc` (the more allocations you have, the more time the next `malloc/free` takes, simply because there are more memory blocks to traverse upon either `malloc` or `free`)",0,0.9604178071022034
447427957,424,devshgraphicsprogramming,2020-06-30T05:58:17Z,"its not a single tree, but a forest (we need this info for simd optimization in the backends) so you will have multiple roots",0,0.989750325679779
447966128,424,Crisspl,2020-06-30T20:41:56Z,"yea, i even wanted to put all nodes in one preallocated memory with placement new and linear addr allctr, but do it in dirty way first to not mess up",0,0.9148809313774109
447966319,424,Crisspl,2020-06-30T20:42:19Z,hm? how is this a forest?,0,0.8464969396591187
451592840,424,devshgraphicsprogramming,2020-07-08T14:33:31Z,what's this about?,0,0.9754487872123718
451593529,424,devshgraphicsprogramming,2020-07-08T14:34:30Z,useless variable name alert!,-1,0.9924390316009521
451594079,424,devshgraphicsprogramming,2020-07-08T14:35:10Z,useless variable name alert!,-1,0.9924390316009521
451595221,424,devshgraphicsprogramming,2020-07-08T14:36:39Z,so i guess w're clear now?,0,0.9840741157531738
451639456,424,devshgraphicsprogramming,2020-07-08T15:37:22Z,done?,0,0.9815027713775635
451656501,424,devshgraphicsprogramming,2020-07-08T16:02:35Z,done?,0,0.9815027713775635
451673265,424,devshgraphicsprogramming,2020-07-08T16:28:37Z,done?,0,0.9815027713775635
451674421,424,devshgraphicsprogramming,2020-07-08T16:29:46Z,just reminding you to use the macro in future code so we can compare between `if-else` vs. `switch` performance,0,0.9907450675964355
451675292,424,devshgraphicsprogramming,2020-07-08T16:30:46Z,would this be possible in the new architecture?,0,0.9935749173164368
451676480,424,devshgraphicsprogramming,2020-07-08T16:32:41Z,did you make the changes?,0,0.9862970113754272
451678752,424,devshgraphicsprogramming,2020-07-08T16:36:27Z,"basically oren-nayar with the pi factored out is not a pbr distribution, not using a pbr distribution for sample generation (which you only ever use for ibl or path tracing) doesn't make sense as per-our minegamedev presentation.",0,0.9824398756027222
451679171,424,devshgraphicsprogramming,2020-07-08T16:37:07Z,"todo, but i forgot where i was going with this",0,0.6689111590385437
453537695,424,Crisspl,2020-07-13T10:01:43Z,apparently it's not needed and spirv-cross didn work right with it. thats why local_size_x/y/y_id didnt work actually,0,0.6933051347732544
453537857,424,Crisspl,2020-07-13T10:01:58Z,yea,0,0.9144599437713623
453538215,424,Crisspl,2020-07-13T10:02:34Z,"outdated code, it's fixed",0,0.9178540706634521
455276604,424,devshgraphicsprogramming,2020-07-15T19:03:16Z,why not put this tag inside the node struct itself?,0,0.991532027721405
455277262,424,devshgraphicsprogramming,2020-07-15T19:04:28Z,why isnt this backend in the general engine ?,0,0.9858075380325317
455280854,424,devshgraphicsprogramming,2020-07-15T19:11:03Z,done?,0,0.9815027713775635
455281037,424,devshgraphicsprogramming,2020-07-15T19:11:24Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281154,424,devshgraphicsprogramming,2020-07-15T19:11:35Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281204,424,devshgraphicsprogramming,2020-07-15T19:11:40Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281257,424,devshgraphicsprogramming,2020-07-15T19:11:46Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281302,424,devshgraphicsprogramming,2020-07-15T19:11:52Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281355,424,devshgraphicsprogramming,2020-07-15T19:11:59Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281397,424,devshgraphicsprogramming,2020-07-15T19:12:04Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281465,424,devshgraphicsprogramming,2020-07-15T19:12:12Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281520,424,devshgraphicsprogramming,2020-07-15T19:12:17Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281598,424,devshgraphicsprogramming,2020-07-15T19:12:23Z,let me know if tackled in new implementation.,0,0.9877996444702148
455281672,424,devshgraphicsprogramming,2020-07-15T19:12:33Z,done?,0,0.9815027713775635
455281746,424,devshgraphicsprogramming,2020-07-15T19:12:40Z,done?,0,0.9815027713775635
455281818,424,devshgraphicsprogramming,2020-07-15T19:12:47Z,done?,0,0.9815027713775635
455282023,424,devshgraphicsprogramming,2020-07-15T19:13:07Z,done?,0,0.9815027713775635
455282121,424,devshgraphicsprogramming,2020-07-15T19:13:21Z,let me know if tackled in new implementation.,0,0.9877996444702148
455282176,424,devshgraphicsprogramming,2020-07-15T19:13:27Z,let me know if tackled in new implementation.,0,0.9877996444702148
455282245,424,devshgraphicsprogramming,2020-07-15T19:13:35Z,done?,0,0.9815027713775635
455282664,424,devshgraphicsprogramming,2020-07-15T19:14:22Z,are we clear?,0,0.9899893999099731
456556590,424,devshgraphicsprogramming,2020-07-17T16:46:59Z,"move to inside the backend class declaration, the streams will be different for each backend",0,0.9923895001411438
456679296,424,devshgraphicsprogramming,2020-07-17T21:19:42Z,you want to narrow these down when the bsdf forest doesnt include certain float views,0,0.9855650067329407
456679863,424,devshgraphicsprogramming,2020-07-17T21:21:20Z,"unify the registers together, use the same register space",0,0.977957546710968
456681017,424,devshgraphicsprogramming,2020-07-17T21:24:46Z,you want to conditionally optimize these out if you know that the bsdf forest nodes will always return the same values,0,0.9887353777885437
456681197,424,devshgraphicsprogramming,2020-07-17T21:25:15Z,you want to conditionally optimize these `if` statements when you know that the bsdf forest nodes will always return the same values,0,0.9913421273231506
456681458,424,devshgraphicsprogramming,2020-07-17T21:26:04Z,`if (currbsdfparams.isotropic.ndotl>flt_min)` shall be hoisted outside of the `instr_execute_`,0,0.9953592419624329
456681581,424,devshgraphicsprogramming,2020-07-17T21:26:27Z,for every function,0,0.8117298483848572
456681884,424,devshgraphicsprogramming,2020-07-17T21:27:35Z,use a `uint` as the transaction size for `reg_t`,0,0.9947817921638489
456682221,424,devshgraphicsprogramming,2020-07-17T21:28:40Z,also turn them into the ternary `?` operator which supposedly does not branch,0,0.9907330274581909
456682459,424,devshgraphicsprogramming,2020-07-17T21:29:30Z,also put the `registers[reg_dst(regs)` outside as well (by making the `instr_execute` return a value,0,0.9948450326919556
456955603,424,Crisspl,2020-07-19T21:05:25Z,"regarding it's no longer there regarding `sincos`: your impl of sincos only works with [-pi,+pi] and here we have [0,2pi]",0,0.9907715320587158
456955702,424,Crisspl,2020-07-19T21:06:32Z,"no longer there, it was replaced with more optimized version from heitz's next paper",0,0.9935265779495239
456955872,424,Crisspl,2020-07-19T21:08:44Z,just left a comment to try it without the max() later,0,0.9905276298522949
456957437,424,Crisspl,2020-07-19T21:24:53Z,"yes, texture/constant parameter is now 12byte 8byte vt id + 4 byte scale in case of texture float rgb in case of constant (gb lost in case of 1d constant)",0,0.9930388331413269
456960686,424,Crisspl,2020-07-19T22:01:10Z,"ofc, nothing really changes here, but it's just one multiplication. + often `a` (not squared) is needed so that would generate a need to do a sqrt",0,0.9672980308532715
456961184,424,Crisspl,2020-07-19T22:06:48Z,"yea, i separated them, t and b are in aniso interaction now",0,0.9512759447097778
456961604,424,Crisspl,2020-07-19T22:11:19Z,"nope, not yet",0,0.7437908053398132
456961617,424,Crisspl,2020-07-19T22:11:24Z,yea,0,0.9144599437713623
456961772,424,Crisspl,2020-07-19T22:13:15Z,"kinda, u did it yourself like [code block]",0,0.9340004324913025
456962047,424,Crisspl,2020-07-19T22:16:16Z,"no, but obviously will be done in final implementation",0,0.9857102632522583
456962267,424,Crisspl,2020-07-19T22:18:33Z,"i dont remember why i wanted to factor pi out, but i dont think i wanted to sample oren-nayar without pi",0,0.7770727872848511
459441932,424,Crisspl,2020-07-23T13:19:04Z,why would they be different??,0,0.889771580696106
473195535,424,devshgraphicsprogramming,2020-08-19T17:14:18Z,why are some `ifdef` and others `ifndef`,0,0.98759925365448
473196111,424,devshgraphicsprogramming,2020-08-19T17:15:16Z,what about aniso ggx and beckmann?,0,0.9912598729133606
473250209,424,devshgraphicsprogramming,2020-08-19T18:53:02Z,"that's not a problem, you had to remap `u` from [0,1] to [0,2pi] its just as easy to remap it to the symmetric domain.",0,0.9649429321289062
473250339,424,devshgraphicsprogramming,2020-08-19T18:53:18Z,?,0,0.9557723999023438
473250831,424,devshgraphicsprogramming,2020-08-19T18:54:16Z,what about the multiplication by the scale?,0,0.985918402671814
473251064,424,devshgraphicsprogramming,2020-08-19T18:54:42Z,?,0,0.9557723999023438
473251315,424,devshgraphicsprogramming,2020-08-19T18:55:10Z,"ah ok, the sqrt.. fine then",0,0.539086103439331
473251443,424,devshgraphicsprogramming,2020-08-19T18:55:25Z,?,0,0.9557723999023438
473251548,424,devshgraphicsprogramming,2020-08-19T18:55:38Z,how does it look in the new impl?,0,0.9912499189376831
473251609,424,devshgraphicsprogramming,2020-08-19T18:55:44Z,?,0,0.9557723999023438
473251705,424,devshgraphicsprogramming,2020-08-19T18:55:56Z,?,0,0.9557723999023438
473251920,424,devshgraphicsprogramming,2020-08-19T18:56:20Z,?,0,0.9557723999023438
473252218,424,devshgraphicsprogramming,2020-08-19T18:56:49Z,?,0,0.9557723999023438
473252827,424,devshgraphicsprogramming,2020-08-19T18:57:56Z,?,0,0.9557723999023438
473253115,424,devshgraphicsprogramming,2020-08-19T18:58:34Z,yep.,0,0.8970574736595154
473253822,424,devshgraphicsprogramming,2020-08-19T18:59:53Z,lets just not do it ;),1,0.9602007865905762
473254747,424,devshgraphicsprogramming,2020-08-19T19:01:35Z,"oh yeah i remember, what i meant is that you need not take dot products with `smpl.l` because `p.xyz` are already our dot products with the 3 basis vectors of the tangent space.",0,0.9689098000526428
473255914,424,devshgraphicsprogramming,2020-08-19T19:03:55Z,i need to fix it for 3 different cases: 1) thidielectric (no wavelength dependent stuff) 2) approximate dielectric (compute a single ior from the weighted iors) 3) pseudo-spectral dielectric,0,0.9698194861412048
473262461,424,devshgraphicsprogramming,2020-08-19T19:16:31Z,"because a different backend may choose not to implement the same sort of state machine... i.e. vk raytracing/optix uses a shader binding table and the software scheduler, so it might not be beneficial to use an instruction stream of the same granularity that we use for rasterized glsl to avoid divergence.",0,0.9704382419586182
474149169,424,Crisspl,2020-08-20T17:18:22Z,"right, i forgot backend doesnt just follow mitsuba only",0,0.7293168306350708
474149231,424,Crisspl,2020-08-20T17:18:29Z,"yea, fixed",0,0.7925935387611389
477517437,424,devshgraphicsprogramming,2020-08-26T18:55:35Z,spec constant maybe? or pass it in a ubo?,0,0.9943727254867554
477517444,424,devshgraphicsprogramming,2020-08-26T18:55:37Z,you can get a good approximation of intensity of an area light by doing the following: 1) compute light surface area (we have functions for that used in ex 21) 2) multiply by radiance and 2pi,0,0.9795109033584595
477518050,424,devshgraphicsprogramming,2020-08-26T18:56:34Z,huh?,-1,0.5414713621139526
491911312,424,devshgraphicsprogramming,2020-09-21T09:42:13Z,its an error,0,0.6585983633995056
498292743,424,devshgraphicsprogramming,2020-10-01T14:34:01Z,"dot product with cie xyz luma coeffs for y of the scrgb colorspace, it gives a nice weighted average.",0,0.9662449359893799
499185374,424,devshgraphicsprogramming,2020-10-03T22:01:53Z,?,0,0.9557723999023438
499185390,424,devshgraphicsprogramming,2020-10-03T22:02:06Z,waiting on the switches,0,0.9717484712600708
499185397,424,devshgraphicsprogramming,2020-10-03T22:02:21Z,done?,0,0.9815027713775635
499185479,424,devshgraphicsprogramming,2020-10-03T22:03:39Z,?,0,0.9557723999023438
499185491,424,devshgraphicsprogramming,2020-10-03T22:03:54Z,?,0,0.9557723999023438
499185497,424,devshgraphicsprogramming,2020-10-03T22:04:00Z,?,0,0.9557723999023438
499185580,424,devshgraphicsprogramming,2020-10-03T22:05:17Z,done?,0,0.9815027713775635
499185597,424,devshgraphicsprogramming,2020-10-03T22:05:27Z,done?,0,0.9815027713775635
499185612,424,devshgraphicsprogramming,2020-10-03T22:05:40Z,done?,0,0.9815027713775635
499185619,424,devshgraphicsprogramming,2020-10-03T22:05:54Z,done?,0,0.9815027713775635
499185632,424,devshgraphicsprogramming,2020-10-03T22:06:06Z,done?,0,0.9815027713775635
499185728,424,devshgraphicsprogramming,2020-10-03T22:06:53Z,done?,0,0.9815027713775635
499185735,424,devshgraphicsprogramming,2020-10-03T22:07:04Z,restore plz.,0,0.9833686947822571
502306254,424,devshgraphicsprogramming,2020-10-09T09:30:59Z,if roughdielectric then assert or error emit,0,0.9751921892166138
506774628,424,Crisspl,2020-10-17T00:54:46Z,"being done in texture fetching function, without any extra divergence",0,0.9889091849327087
506774862,424,Crisspl,2020-10-17T00:56:46Z,"yes, ofc",0,0.9328455328941345
506774984,424,Crisspl,2020-10-17T00:57:42Z,you mean use this wrapper everywhere where there are if/else statements currently?,0,0.993196964263916
506775079,424,Crisspl,2020-10-17T00:58:33Z,not relevant any more,0,0.9349408149719238
506775936,424,Crisspl,2020-10-17T01:05:37Z,"yes, irrelevant now pretty much",-1,0.69261234998703
506776242,424,Crisspl,2020-10-17T01:08:33Z,"irrelevant, all parameters are fetched without any divergence other than texture fetch or constant choice",0,0.8400073051452637
506776513,424,Crisspl,2020-10-17T01:10:44Z,todo,0,0.918040931224823
506776568,424,Crisspl,2020-10-17T01:11:25Z,todo,0,0.918040931224823
506776693,424,Crisspl,2020-10-17T01:12:31Z,todo,0,0.918040931224823
506776774,424,Crisspl,2020-10-17T01:13:11Z,todo,0,0.918040931224823
506776835,424,Crisspl,2020-10-17T01:13:51Z,todo,0,0.918040931224823
506777158,424,Crisspl,2020-10-17T01:16:52Z,"yes, it was always like that but still sometimes i have to use extra factors",0,0.9337894916534424
506777206,424,Crisspl,2020-10-17T01:17:35Z,actually only in ditt office scene it looked nice with factor of 1.0 so far,0,0.8943548798561096
506777241,424,Crisspl,2020-10-17T01:17:49Z,todo,0,0.918040931224823
507696253,424,devshgraphicsprogramming,2020-10-19T12:13:09Z,"only everywhere there is a something that could be a `switch` (i.e. different cases for a numerical parameter) this is because i'm not sure about the performance characteristics of `switch` vs. `if-else` chain, so its useful to have a fast switch.",0,0.9822920560836792
507696585,424,devshgraphicsprogramming,2020-10-19T12:13:40Z,done?,0,0.9815027713775635
507696871,424,devshgraphicsprogramming,2020-10-19T12:14:07Z,remind me what was going on here?,0,0.9740964770317078
507698310,424,devshgraphicsprogramming,2020-10-19T12:16:30Z,"ok, might need to slap the autoexposure extension on the example then",0,0.9903466105461121
507708347,424,Crisspl,2020-10-19T12:32:44Z,yea ive wanted to make use of autoexposure in mitsuba loader example but its just lowest priority,0,0.9787730574607849
507717959,424,Crisspl,2020-10-19T12:48:02Z,it already is in std [a link],0,0.991589367389679
507757803,424,devshgraphicsprogramming,2020-10-19T13:44:42Z,"typo, missing an `s`",0,0.9846381545066833
507765142,424,devshgraphicsprogramming,2020-10-19T13:54:26Z,`_uf` should not be `inout` the cache for a reflective ray is 100% correct always and wouldn't change if you have a `l` which is behind the `n` and surface is not twosided (you actually get into a non-thin dielectric ast node) then you need to compute the microfacet cache for a transmissive case.,0,0.9846523404121399
507823724,424,Crisspl,2020-10-19T14:59:44Z,it is `inout` only because of possible handling of twosided,0,0.9943155646324158
507824536,424,Crisspl,2020-10-19T15:00:37Z,microfacet cache computed for transmission doesnt get out of this function,0,0.9519862532615662
508005071,424,devshgraphicsprogramming,2020-10-19T19:21:08Z,what is `cosfactor` doing here?,0,0.9926113486289978
508006729,424,devshgraphicsprogramming,2020-10-19T19:24:09Z,why do you need the string?,0,0.9667874574661255
508009021,424,devshgraphicsprogramming,2020-10-19T19:28:19Z,i dont get how `normalmatrix`'s components are used... maybe a `union` would be useful?,0,0.9743109941482544
508011158,424,devshgraphicsprogramming,2020-10-19T19:32:10Z,"you can get these from the oetf and colorspace headers (just transpose the matrix first, so you can extract the [1] row)",0,0.9921899437904358
508012482,424,devshgraphicsprogramming,2020-10-19T19:34:41Z,what's the `name` used for?,0,0.9935844540596008
508015463,424,devshgraphicsprogramming,2020-10-19T19:39:42Z,is that log2 or ?,0,0.9934230446815491
508015584,424,devshgraphicsprogramming,2020-10-19T19:39:50Z,"`override` is a keyword, name it slightly differently",0,0.9915920495986938
508016025,424,devshgraphicsprogramming,2020-10-19T19:40:19Z,not sure how 16*128 == 4096 ?,0,0.8668853640556335
508018366,424,devshgraphicsprogramming,2020-10-19T19:44:45Z,what's with the name of this variable?,0,0.989781379699707
508026688,424,Crisspl,2020-10-19T19:59:59Z,"oh, you're right, it's already in the result. my bad",-1,0.9919050931930542
508026776,424,Crisspl,2020-10-19T20:00:06Z,for debug,0,0.966159999370575
508027791,424,Crisspl,2020-10-19T20:01:55Z,"things with _log2 are log2, not sure what you're asking",0,0.7967460751533508
508029165,424,Crisspl,2020-10-19T20:04:26Z,"not sure why its even there, it's not being used. no idea really..",-1,0.9437090158462524
508032019,424,Crisspl,2020-10-19T20:09:25Z,"nothing apparently, and it's not even initialized, this class is used only in [code block] i think it's arek's code",0,0.9813878536224365
508084269,424,Crisspl,2020-10-19T21:52:19Z,"it doesnt max allocatable tex size is `virtual_texture_size * physical_page_size`, not `physical_texture_size_in_pages * physical_page_size`",0,0.9917610883712769
508853846,424,devshgraphicsprogramming,2020-10-20T21:34:06Z,"ok so only 20 layers, is that always enough?",0,0.9718956351280212
508854577,424,devshgraphicsprogramming,2020-10-20T21:35:37Z,ok then get rid of the `name` arek's code is a fun way to extract camera transforms without loading entire scenes (for the denoiser),0,0.6758856177330017
508854763,424,devshgraphicsprogramming,2020-10-20T21:35:58Z,ok maybe only have that field in debug builds,0,0.9879705309867859
509192046,424,devshgraphicsprogramming,2020-10-21T11:13:31Z,?,0,0.9557723999023438
509192352,424,devshgraphicsprogramming,2020-10-21T11:14:08Z,"rough diffuse is not anisotropic, though?",0,0.9274229407310486
509194399,424,devshgraphicsprogramming,2020-10-21T11:17:48Z,"what happens if your bsdf ast is just one node? i.e. just diffuse? it looks to me like you will allocate another node, and add that as a child",0,0.9659014940261841
509196105,424,devshgraphicsprogramming,2020-10-21T11:20:48Z,"waiit, did we say that once we encounter `twosided` the whole ast is twosided?",-1,0.5138745307922363
509196585,424,devshgraphicsprogramming,2020-10-21T11:21:40Z,what's scattering mode?,0,0.985949695110321
509196848,424,devshgraphicsprogramming,2020-10-21T11:22:08Z,why are you allocating another node?,0,0.973879873752594
509197119,424,devshgraphicsprogramming,2020-10-21T11:22:37Z,is exteta always a real scalar?,0,0.9897311329841614
509198487,424,devshgraphicsprogramming,2020-10-21T11:25:05Z,"ok i see what's going on, why not do `static_cast (nextsym)->alpha_v =static_cast (nextsym)->alpha_u` instead of double `getfloat...` call",0,0.9895579218864441
509201585,424,devshgraphicsprogramming,2020-10-21T11:30:20Z,i noticed diffuse's `eta` doesn't get set,0,0.8932496905326843
509202832,424,devshgraphicsprogramming,2020-10-21T11:32:34Z,is it a todo or what?,0,0.9837289452552795
509204825,424,devshgraphicsprogramming,2020-10-21T11:36:15Z,"i dont get this, exaplin?",-1,0.6362492442131042
509205003,424,devshgraphicsprogramming,2020-10-21T11:36:35Z,i don't get this.,-1,0.6557784676551819
509205234,424,devshgraphicsprogramming,2020-10-21T11:36:58Z,why is the logic here so convoluted?,0,0.6842994093894958
509208294,424,devshgraphicsprogramming,2020-10-21T11:42:35Z,`thin` seems to have the same issue as `twosided`,0,0.9933558702468872
509209781,424,devshgraphicsprogramming,2020-10-21T11:45:11Z,"is the derivative map cached, or do you create a new one every single time?",0,0.9934282898902893
509212404,424,devshgraphicsprogramming,2020-10-21T11:49:51Z,explain the design decision behind having two separate nodes for what is essentially a single bsdf?,0,0.9890320897102356
509215977,424,devshgraphicsprogramming,2020-10-21T11:55:46Z,"i thought we could have these as 4 values, 1 offset and 3 counts ?",0,0.9884365797042847
509218821,424,devshgraphicsprogramming,2020-10-21T12:00:33Z,i'm a bit confused about needing a `uvec2` for the rest of the streams,-1,0.9228518605232239
509220325,424,devshgraphicsprogramming,2020-10-21T12:03:07Z,dont you want to keep this dry?,0,0.9521577954292297
509220924,424,devshgraphicsprogramming,2020-10-21T12:04:17Z,"name this better? (put ""vt"" in the name)",0,0.9921870231628418
509228658,424,devshgraphicsprogramming,2020-10-21T12:17:12Z,"we could use a single offset and keep the streams together in memory, then work out the other offsets from stream counts.",0,0.9929509162902832
509236731,424,devshgraphicsprogramming,2020-10-21T12:30:16Z,dont we already have the code for this somewhere else?,0,0.9926190972328186
509243222,424,devshgraphicsprogramming,2020-10-21T12:40:19Z,"we should probably do all the `alloc`s first, then shrink the vt and figure out the physical array size, then shrink the memory space before `commit`",0,0.9941313862800598
509257862,424,devshgraphicsprogramming,2020-10-21T13:01:58Z,is it fixed?,0,0.987420380115509
509261784,424,devshgraphicsprogramming,2020-10-21T13:07:44Z,only in debug?,0,0.9818832874298096
509263265,424,devshgraphicsprogramming,2020-10-21T13:09:26Z,definite todo,0,0.8848697543144226
509264258,424,devshgraphicsprogramming,2020-10-21T13:10:45Z,deriv map should never be 32bit float xd (16bit snorm is max),0,0.9858302474021912
509265363,424,devshgraphicsprogramming,2020-10-21T13:12:21Z,where's the definition of `sizeof_bsdf_data` ?,0,0.994355320930481
509295954,424,Crisspl,2020-10-21T13:44:59Z,"if image is null, it means it couldnt be loaded for some reason",0,0.9694017767906189
509299749,424,Crisspl,2020-10-21T13:48:00Z,what else would i do?,0,0.9607595801353455
509302953,424,Crisspl,2020-10-21T13:50:30Z,"reflect or transmit, stolen from nvidia mdl for example dielectric in ir is encoded as fresnel-weighted reflection/transmission",0,0.9925419092178345
509303703,424,Crisspl,2020-10-21T13:51:09Z,yes,0,0.9659429788589478
509306468,424,Crisspl,2020-10-21T13:53:24Z,"because mitsuba doesnt define ior for diffuse brdf node. so it's defaulted to eta=(1,1,1) and k=(0,0,0)",0,0.9880235195159912
509307410,424,Crisspl,2020-10-21T13:54:25Z,"no, an explanation",0,0.9694045186042786
509307627,424,Crisspl,2020-10-21T13:54:42Z,"changed to ""making""",0,0.9914631247520447
509309511,424,Crisspl,2020-10-21T13:56:54Z,"twosided is encoded in ir as presence of surfaces. front surface is always present. back surface is optional and if it is present, it means it's twosided (stolen from mdl as well)",0,0.9944926500320435
509313611,424,Crisspl,2020-10-21T14:01:46Z,"if there's geom modifier (i.e. bumpmap) at the top of ast, it becomes parent of surfaces in ir. actually i dont like this and wanted to change but i forgot and left as is",-1,0.7180173397064209
509314994,424,Crisspl,2020-10-21T14:03:24Z,"unfortunately i have to agree, it is. because i couldnt get it done in a prettier way",-1,0.9558466672897339
509318336,424,Crisspl,2020-10-21T14:07:27Z,"hm, seems like created every time. thanks for noticing... now i think maybe this unused map in frontend was meant to be derivative map cache, but never finished.. anyway this is a todo",1,0.9097311496734619
509321809,424,Crisspl,2020-10-21T14:11:39Z,"it's from before vulkan-like engine api. it was fixed, but it's not on this api/branch because we dont have mesh manipulator working",0,0.98160320520401
509322962,424,Crisspl,2020-10-21T14:13:07Z,did it for debug purposes when derivative kernel didnt work,0,0.9858086705207825
509324539,424,Crisspl,2020-10-21T14:14:54Z,generated dynamically in `cmaterialcompilerglslbackendcommon::genpreprocdefinitions()` so that glsl is always up to date with c++ constants without editing glsl by hand,0,0.994670569896698
509325326,424,Crisspl,2020-10-21T14:15:48Z,"possible, in some other loader",0,0.9821963310241699
509328019,424,devshgraphicsprogramming,2020-10-21T14:18:55Z,you need to first assert that `addr` is not invalid,0,0.987630307674408
509329170,424,devshgraphicsprogramming,2020-10-21T14:20:11Z,what do we use temporary nodes for?,0,0.9925581216812134
509329503,424,Crisspl,2020-10-21T14:20:33Z,"flexibility of ir, compatibility with mdl. i mean it could have dielectric node, but scattering mode is also useful (and needed to make it work with mdl) so since we have scattering mode i decided to have dielectric be encoded like this",0,0.9837676286697388
509330353,424,devshgraphicsprogramming,2020-10-21T14:21:27Z,make sure to leave a comment that we can have multiple root nodes ? (or do you have multiple ir for material?),0,0.9924057126045227
509331199,424,Crisspl,2020-10-21T14:22:28Z,"yes, never actually got to it though. a minor todo",0,0.8686428070068359
509332472,424,Crisspl,2020-10-21T14:23:56Z,same as [a link],0,0.9871845841407776
509332609,424,Crisspl,2020-10-21T14:24:07Z,same as [a link],0,0.9871845841407776
509332675,424,devshgraphicsprogramming,2020-10-21T14:24:11Z,maybe put these definitions inside `sparameter` ?,0,0.9951063394546509
509335218,424,devshgraphicsprogramming,2020-10-21T14:27:08Z,what's the difference between material and bsdf?,0,0.9889515042304993
509337483,424,devshgraphicsprogramming,2020-10-21T14:29:45Z,"you're breaking the ast if you allow this, so either: a) have separate roots for front and back surface b) have each bsdf/material node always contain an entry for front and back functions",0,0.9369764924049377
509342919,424,devshgraphicsprogramming,2020-10-21T14:36:02Z,leave a todo comment... we could implement the children array in the future as n nodes allocated just after this one (one would only need the child count)... but this would only be possible if the nodes were uniform bytesize. that way there would be no artificial limit on max children in our ir (backends will still have limits),0,0.9916356801986694
509343442,424,Crisspl,2020-10-21T14:36:38Z,material is always root for whole ir tree,0,0.9784030914306641
509344200,424,devshgraphicsprogramming,2020-10-21T14:37:31Z,then comment out the `source` if its still a todo for nvidia mdl,0,0.9934966564178467
509344638,424,devshgraphicsprogramming,2020-10-21T14:38:01Z,where's the color?,0,0.9869005084037781
509345314,424,Crisspl,2020-10-21T14:38:49Z,? i dont get this comment,-1,0.5342226028442383
509345555,424,devshgraphicsprogramming,2020-10-21T14:39:07Z,"yeah i got that, so there's a default constructor then.",0,0.9794034361839294
509347433,424,devshgraphicsprogramming,2020-10-21T14:41:19Z,we do have the mesh manipulator (normal recomputation) working iirc ...,0,0.834625244140625
509347703,424,devshgraphicsprogramming,2020-10-21T14:41:39Z,"you can throw it out now, i guess?",0,0.9882213473320007
509347895,424,devshgraphicsprogramming,2020-10-21T14:41:53Z,ah cool.,1,0.970609724521637
509348164,424,devshgraphicsprogramming,2020-10-21T14:42:11Z,"ah ok, makes sense.",0,0.7086138725280762
509350930,424,devshgraphicsprogramming,2020-10-21T14:45:21Z,ever seen anything similar in other places in our codebase?,0,0.9917488098144531
509351839,424,devshgraphicsprogramming,2020-10-21T14:46:27Z,so how do you see that you need to match front and back into one thing?,0,0.9624001383781433
509355120,424,devshgraphicsprogramming,2020-10-21T14:50:16Z,what do we use that one for?,0,0.988663375377655
509355865,424,devshgraphicsprogramming,2020-10-21T14:51:09Z,what's sheen?,0,0.9359676241874695
509356592,424,devshgraphicsprogramming,2020-10-21T14:52:02Z,why is the type even configurable?,0,0.9592083692550659
509357287,424,devshgraphicsprogramming,2020-10-21T14:52:52Z,oren-nayar is the only model we have... its isotropic iirc?,0,0.982624351978302
509358012,424,devshgraphicsprogramming,2020-10-21T14:53:44Z,how do you implement plastic?,0,0.9596851468086243
509358324,424,Crisspl,2020-10-21T14:54:07Z,fresnel - dielectric weight - blend,0,0.9706538319587708
509359051,424,Crisspl,2020-10-21T14:54:59Z,"not sure, something from mdl",0,0.750153660774231
509359477,424,Crisspl,2020-10-21T14:55:29Z,becase some other node type inherits from this iirc,0,0.9781237244606018
509359828,424,Crisspl,2020-10-21T14:55:55Z,but maybe we'll have aniso diffuse some day,0,0.991199791431427
509361223,424,Crisspl,2020-10-21T14:57:29Z,`cbsdfcombinernode` with `et_diffuse_and_specular` type (diffuse+specular),0,0.9935610294342041
509362384,424,Crisspl,2020-10-21T14:58:55Z,i think we'll have to go with b,0,0.9188671112060547
509363935,424,devshgraphicsprogramming,2020-10-21T15:00:49Z,maybe make everything `private` or `protected` except for the vt and then make the parent class a `friend`,0,0.9924473762512207
509364531,424,devshgraphicsprogramming,2020-10-21T15:01:30Z,"same as always, one offset 4 counts",0,0.9860856533050537
509366241,424,devshgraphicsprogramming,2020-10-21T15:03:40Z,does `opacity` override thickness+sigma beer's law thing?,0,0.9926907420158386
509368003,424,Crisspl,2020-10-21T15:05:55Z,"no idea, i dont know a thing how to implement coating",-1,0.9612762331962585
509371086,424,devshgraphicsprogramming,2020-10-21T15:09:40Z,"we need to take the `ir` as a `const` and make a copy, otherwise the temporary nodes created on a `compile` would eventually overrun the storage",0,0.9919712543487549
509376888,424,devshgraphicsprogramming,2020-10-21T15:16:54Z,a better variable name would be in order,0,0.9893933534622192
509378004,424,devshgraphicsprogramming,2020-10-21T15:18:13Z,`out_pdf` is not set!,0,0.9758273363113403
509381080,424,devshgraphicsprogramming,2020-10-21T15:22:06Z,why are you screwing around with the microfacet cache here?,0,0.776282012462616
509381340,424,devshgraphicsprogramming,2020-10-21T15:22:26Z,what are you doing with the microfacet cache here?,0,0.9917891025543213
509382890,424,devshgraphicsprogramming,2020-10-21T15:24:29Z,no idea why this function exists,0,0.8813409805297852
509383981,424,devshgraphicsprogramming,2020-10-21T15:25:47Z,ok i get it now.,0,0.9202795624732971
509384976,424,devshgraphicsprogramming,2020-10-21T15:27:01Z,why would zeros be a problem? also `tdoth` and `bdoth` should be equal to 0.0 ! you got everything the wrong way round xd,-1,0.66487717628479
509386704,424,devshgraphicsprogramming,2020-10-21T15:29:14Z,`ndoth = 1.0`,0,0.989654541015625
509391195,424,devshgraphicsprogramming,2020-10-21T15:35:05Z,why did you set pdf to 1.0 ? it should be infinite!,0,0.802104115486145
509391838,424,devshgraphicsprogramming,2020-10-21T15:35:55Z,you should use the special switch/if macro here,0,0.9908220767974854
509399401,424,devshgraphicsprogramming,2020-10-21T15:45:42Z,"this is wrong, the `remainder` shouldn't be multiplied by the weight. `pdf` can be multiplied by `weight` or you could not track weight at all and use `rcpchoiceprob` directly",0,0.9706026315689087
509399807,424,devshgraphicsprogramming,2020-10-21T15:46:15Z,you could initialize `out_pdf` to 1.0 instead and use `rcpchoiceprob` later on,0,0.9946354031562805
509400689,424,devshgraphicsprogramming,2020-10-21T15:47:24Z,"you could just divide `out_pdf` by `rcpchoiceprob` or multiply it here instead of `weight`, as long as `out_pdf` was initialized to 1.0",0,0.9946446418762207
509403590,424,devshgraphicsprogramming,2020-10-21T15:51:10Z,"i dont get this, this is confusing",-1,0.9805057644844055
509405190,424,devshgraphicsprogramming,2020-10-21T15:53:21Z,"by the right hand rule, only one of t or b will change directions if n changes directions (a flipping of both t and b would correspond to a 180 degree rotation, not a single mirror) right now you've changed them to left-handed",0,0.9925957322120667
509406502,424,devshgraphicsprogramming,2020-10-21T15:55:05Z,what's with the bumpmap?,0,0.9907614588737488
509407187,424,devshgraphicsprogramming,2020-10-21T15:55:58Z,"this is weird, it should just be [code block]",-1,0.9904910326004028
509408551,424,devshgraphicsprogramming,2020-10-21T15:57:47Z,you could just assign straight to `out_remainder` and `out_uf`,0,0.9947633147239685
509409062,424,Crisspl,2020-10-21T15:58:28Z,"eh, you're right. i was thinking that it could get be reflipped in next instruction, but... well yeah. obvs not possible",0,0.5370661616325378
509409297,424,devshgraphicsprogramming,2020-10-21T15:58:47Z,"what about two switches, one for `op` and another for `ndf`?",0,0.9914925694465637
509410329,424,Crisspl,2020-10-21T16:00:13Z,possible if second switch was inside default case of the first switch,0,0.9927984476089478
509411594,424,devshgraphicsprogramming,2020-10-21T16:01:55Z,divergence and code duplication,0,0.9554550647735596
509414106,424,devshgraphicsprogramming,2020-10-21T16:05:29Z,use `irr_glsl_partitionrandvariable` instead you need to just divide the `out_pdf` by the `rcpchoiceprob` and multiply the future `out_rem` by `rcpchoiceprob` **this is the only exception to not multiplying the `out_rem` by the pdf of generator choice (because the probability here will not match a `vec3` fresnel exactly)**,0,0.9945588707923889
509415378,424,devshgraphicsprogramming,2020-10-21T16:07:16Z,lets do it.,0,0.9836809635162354
509415708,424,devshgraphicsprogramming,2020-10-21T16:07:44Z,its the backend that should be propagating the twosided thing down the ast branches,0,0.9895803332328796
509415905,424,devshgraphicsprogramming,2020-10-21T16:08:02Z,what does mitsuba say?,0,0.9599411487579346
509416270,424,devshgraphicsprogramming,2020-10-21T16:08:34Z,ok,0,0.8787186145782471
509416356,424,devshgraphicsprogramming,2020-10-21T16:08:42Z,which node?,0,0.9672244191169739
509416472,424,devshgraphicsprogramming,2020-10-21T16:08:53Z,comment it out for now.,0,0.9604541063308716
509416831,424,devshgraphicsprogramming,2020-10-21T16:09:21Z,i dont get the explanation,-1,0.5139580965042114
509417049,424,devshgraphicsprogramming,2020-10-21T16:09:41Z,dont have an unused variable handing around,0,0.7444636821746826
509418175,424,devshgraphicsprogramming,2020-10-21T16:11:18Z,this whole function's existence doesnt make sense really,0,0.5922597050666809
509418925,424,devshgraphicsprogramming,2020-10-21T16:12:22Z,this function's existence probably doesn't make sense either,0,0.6631906032562256
509427322,424,devshgraphicsprogramming,2020-10-21T16:24:41Z,also you have a bug because `u.z` does not get paritioned/rescaled,0,0.8782671689987183
509435564,424,Crisspl,2020-10-21T16:36:48Z,mixture -> blends translation,0,0.9803226590156555
509445110,424,devshgraphicsprogramming,2020-10-21T16:51:08Z,"there's a far easier way to deal with the generator, it will be less divergent, less code and easier to read & understand. you should tear into the microfacet transmission generators to see how it all comes together. it's best if you intialized `out_rem` to 1.0 for non plastics and then multiplied factors onto it. ### first of all handle your reflective fresnel if your bsdf is not diffuse (diffuse or difftrans) then you will need to treat it somewhat like a blend node. the way you choose plastic vs. diffuse right now is 100% ok except for variable partition/rescale that is missing. you need an extra flag besides `out_generatorinstr` to discern which sub-generator was used. if you choose the diffuse generator, then you need to premultiply or initialize the `out_rem` to the fresnel diffuse correction factor **multiplied by `rcpchoiceprob`**, then proceed to the diffuse generator path. however for the specular generator, then you need to premultiply or initialize the `out_rem` to be the `rcpchoiceprob`, you'd then need to proceed as for a conductor, except that you **compute the fresnel like for a dielectric.** ## all non-diffuse bsdf generators generate a half vector h first so you should split your code for generating an `s` into two branches, diffuse vs. non-diffuse. ### diffuse path doesn't matter if its diff or difftrans, you need to generate a point on a hemisphere. if the material is difftrans then you use the `u.z` variable to flip the `l` direction with 50% probability pdf is trivial to compute. the microfacet cache, you should compute using our built-in function that takes an interaction and a light sample (specialized for the reflective case). ### the specular path use the correct generator to generate `h` given your ndf, it doesn't matter if the material is conductor or dielectric. if the material is smooth then simply set `h=n` (but this backend has no smooth materials, it just has ndfs with 0 roughness, so this point is moot). now for the `out_rem` compute the g2/g1 function (there might be some useful metadate that a generator overload might return). to compute the pdf you need to multiply it by ndf*g1 initially, there's one extra step in case of a dielectric material. compute the fresnel of `vdoth`, but dont use it yet. if the material cannot be refractive then set a `refraction` boolean to false. otherwise if the material could be refractive (dielectric) then choose between reflection and refraction based on the previously calculated fresnel's luma coefficients, divide the `out_rem` and multiply the pdf by the probability of your choice respectively. multiply `out_rem` by the correct frensel depending on `refraction` boolean (either `f` or `1-f`) now there's a handy function in our glsl library which can construct a microfacet cache given a view interaction, a microfacet `h` vector, a refraction boolean a few extra infos like the refractive index. use it. that's it, you're done!",0,0.842807412147522
509447295,424,devshgraphicsprogramming,2020-10-21T16:54:22Z,what's all this doing here?,0,0.8339816927909851
509447508,424,devshgraphicsprogramming,2020-10-21T16:54:40Z,i have these already?,0,0.9867429733276367
509448951,424,devshgraphicsprogramming,2020-10-21T16:56:36Z,same as [a link] but this time also about tdotl and bdotl,0,0.9927161335945129
509449534,424,devshgraphicsprogramming,2020-10-21T16:57:26Z,you could roll this into one if-statement,0,0.9919393658638
509449761,424,devshgraphicsprogramming,2020-10-21T16:57:43Z,this function shouldn't exist,0,0.9538109302520752
509450536,424,devshgraphicsprogramming,2020-10-21T16:58:49Z,"you also don't need the `ts_flag` to make sure you don't flip twice, because `currinteraction.isotropic.ndotv<0.0` ensures you won't p.s. this also means you dont need any special handling for the bumpmap case",0,0.9906821250915527
509456818,424,devshgraphicsprogramming,2020-10-21T17:08:40Z,"however because ""two sided"" was only supposed to be applied to some bsdf nodes, you need to keep track of whether the directions were flipped, so i propose this [code block] 100% guaranteed to work.",0,0.9727139472961426
509457769,424,devshgraphicsprogramming,2020-10-21T17:10:09Z,unused variable,0,0.983355700969696
509458301,424,devshgraphicsprogramming,2020-10-21T17:10:41Z,didn't we talk about more robust checks of this?,0,0.9853357076644897
509462180,424,devshgraphicsprogramming,2020-10-21T17:14:30Z,ok i get it now.,0,0.9202795624732971
509467455,424,devshgraphicsprogramming,2020-10-21T17:19:58Z,"if you put these in front of emissive, you could get rid of the padding, and have everything fit in 8 uvec4s",0,0.9932684302330017
509590630,424,devshgraphicsprogramming,2020-10-21T19:01:49Z,"ok, when i read this i didnt understand that root was a special node. i just dont understand why root couldn't be the diffuse node directly.",0,0.5331904292106628
509591006,424,devshgraphicsprogramming,2020-10-21T19:02:22Z,the place to use the loader override is not the compiler frontend but the mitsuba xml loader/parser,0,0.9902722239494324
509594263,424,devshgraphicsprogramming,2020-10-21T19:05:11Z,"i see, then you could use a stack address allocator (so you could actually reclaim the memory, would have to free the temp nodes in reverse order) or take a `const` ir (i prefer this) as input to the material compilers and create a copy of the ir",0,0.99321049451828
509595283,424,devshgraphicsprogramming,2020-10-21T19:06:11Z,lets go with b then... exactly how much flexibility does nvidia mdl allow with this front and backface stuff?,0,0.9573215842247009
509605906,424,devshgraphicsprogramming,2020-10-21T19:23:14Z,the phong stuff can move into the phong case,0,0.9923851490020752
509607070,424,devshgraphicsprogramming,2020-10-21T19:25:11Z,"you need to keep track of valid, a generator with a smaller eta will be able to generate refraction rays that would be ""invalid"" i.e. not possible to see with even the same bsdf that has a slightly larger eta",0,0.9753406047821045
509607670,424,devshgraphicsprogramming,2020-10-21T19:26:18Z,"basically initialize to `true` outside the if-statement, then wrap the rest of the function in the check that the path is valid",0,0.9940369129180908
509607903,424,devshgraphicsprogramming,2020-10-21T19:26:45Z,there's a library function for this conditional,0,0.988477349281311
509608234,424,devshgraphicsprogramming,2020-10-21T19:27:23Z,our switch statement would be welcome here,0,0.9224938154220581
509608730,424,devshgraphicsprogramming,2020-10-21T19:28:15Z,"you can unify these, use `wo_clamps_pi_factored_out` and then `/= is_bsdf ? (2.0*pi):pi;`",0,0.9946329593658447
509626472,424,devshgraphicsprogramming,2020-10-21T19:51:52Z,"we can do better than this, see here: [a link] this time you're not computing the remainder, so you can compute g1 and g2 expliclty. you only need to branch for the ndf*g2 and g2/g1 computation, see the implementation functions `wo_clamps` of the ggx, beckmann and phong functions. the `is_bsdf` check you can move to before and after the partial eval and pdf computation, the bsdf for dielectrics don't differ from the brdfs except for: 1) they use absolute dot products for ndf and geometry functions 2) they use different fresnel (conductor vs side-sensitive dielectric) 3) the fresnel is not part of the pdf 4) the differential factor is slightly different (i provide a function for adjusting it given a brdf factor)",0,0.9833793044090271
509628370,424,devshgraphicsprogramming,2020-10-21T19:53:15Z,"cos>0 has a point to its existence (i.e. transmission ray from a dielectric generator used to eval a conductor), but the `op_hasspecular` does not make sense, because it would make you never hit the diffuse cases literally 4 lines later!",0,0.9670457243919373
509630949,424,devshgraphicsprogramming,2020-10-21T19:55:20Z,this if statement stinks,0,0.9661897420883179
509632649,424,devshgraphicsprogramming,2020-10-21T19:57:18Z,this is horrible code duplication,-1,0.992141842842102
509633897,424,devshgraphicsprogramming,2020-10-21T19:59:11Z,"redo, plastic is coating",0,0.7313441634178162
509634969,424,devshgraphicsprogramming,2020-10-21T19:59:59Z,whyyy?,0,0.6654306054115295
509636797,424,devshgraphicsprogramming,2020-10-21T20:01:21Z,"just to double check, if fresnel does not come from a texture... how do you preload the source registers with the values?",0,0.9622794985771179
509639141,424,devshgraphicsprogramming,2020-10-21T20:03:17Z,precompute the `normalize(normal)` dont want this `rsqrt` going all the time.,0,0.9587001204490662
509639501,424,devshgraphicsprogramming,2020-10-21T20:03:42Z,do we have to do the `irr_glsl_decodergb19e7` in the hot loop?,0,0.9945452213287354
509643497,424,devshgraphicsprogramming,2020-10-21T20:08:03Z,the stuff that flows out of `campos` and `worldpos` should be precomputed.... i.e. the normalized `v`,0,0.9946781396865845
509644136,424,devshgraphicsprogramming,2020-10-21T20:08:28Z,you should have `initinteraction` and `updateinteraction` really...,0,0.9900040030479431
509649606,424,devshgraphicsprogramming,2020-10-21T20:12:12Z,"eval_and_pdf_t is just a vec4 right? why not just `mix(bxdf1,bdxf2,w)` ?",0,0.993198573589325
509651248,424,devshgraphicsprogramming,2020-10-21T20:13:12Z,"hmm, ok. actually not that bad.",-1,0.8043766021728516
509655160,424,devshgraphicsprogramming,2020-10-21T20:15:37Z,there's a builtin for that,0,0.9922257661819458
509667351,424,devshgraphicsprogramming,2020-10-21T20:26:56Z,"dont do early exit, wrap the rest of the code in the opposite condition",0,0.979158878326416
509668346,424,devshgraphicsprogramming,2020-10-21T20:28:25Z,"you need to keep track of `valid` and evaluate the bsdf to 0.0 if not valid, see my other comment on `common.glsl` and the eval_pdf function",0,0.993752658367157
509669832,424,devshgraphicsprogramming,2020-10-21T20:30:43Z,same comment as here [a link] [a link],0,0.9894081354141235
509670471,424,devshgraphicsprogramming,2020-10-21T20:31:53Z,this seems like duplicated effort: [a link] [a link],0,0.8601670265197754
509670639,424,devshgraphicsprogramming,2020-10-21T20:32:12Z,related [a link],0,0.9863789081573486
509671020,424,devshgraphicsprogramming,2020-10-21T20:32:51Z,"basically bad if statement, could de-diverge dielectric and conductor, etc.",-1,0.8837485909461975
509676720,424,devshgraphicsprogramming,2020-10-21T20:40:12Z,our switch would be useful here.,0,0.9791520237922668
509679866,424,devshgraphicsprogramming,2020-10-21T20:43:30Z,"this is messed up... it increases divergence in a clandestine way there's a loop of a variable number of prefetch instructions, each of which can have a variable number of texture fetches (0-4). why can't we preprocess this off-line and unroll the current prefetch instrction + bsdf_data texture handles into a simple texture prefetch stream where each instruction will prefetch only one texture/constant and write to only one set of registers? also doing this offline on cpu (preparing the list), would allow us to thin out the bsdf data (remove all textures and constants that would be prefetched)",-1,0.764972984790802
509680684,424,devshgraphicsprogramming,2020-10-21T20:44:28Z,a prefetch instruction would need to be a `uvec4` instead of a `uvec2`,0,0.9949356317520142
509685285,424,devshgraphicsprogramming,2020-10-21T20:50:11Z,i need an explained on those,0,0.8998149633407593
509685895,424,devshgraphicsprogramming,2020-10-21T20:50:50Z,you've defined `readreg4` in terms of `readreg3` then define `readreg3` in terms of `readreg2,0,0.9933858513832092
509704151,424,devshgraphicsprogramming,2020-10-21T21:15:47Z,same remarks as with read register,0,0.9897699356079102
509704797,424,devshgraphicsprogramming,2020-10-21T21:16:32Z,could we always store the real `eta` as a rgb19e7 ?,0,0.9945104122161865
509709925,424,devshgraphicsprogramming,2020-10-21T21:22:48Z,what's with the macros?,0,0.9882013201713562
509710957,424,devshgraphicsprogramming,2020-10-21T21:24:13Z,isnt opacity (mask) implemented as a blend bsdf between something and the transmission bsdf? where the weight texture is the opacity texture?,0,0.9946839213371277
509711879,424,devshgraphicsprogramming,2020-10-21T21:25:30Z,instead of `irr_glsl_mc_getcampos` we should require `irr_glsl_mc_getnormalizedworldspacev()`,0,0.9934378266334534
512161937,424,Crisspl,2020-10-26T17:59:18Z,"its not front and back, its reflection and transmission",0,0.9805918335914612
512162871,424,Crisspl,2020-10-26T18:00:43Z,"maybe, not sure, but we dont have converter into unique primitives working",0,0.8547273874282837
512164780,424,Crisspl,2020-10-26T18:04:06Z,coating,0,0.7964078783988953
512169502,424,devshgraphicsprogramming,2020-10-26T18:11:34Z,can you bring it back quickly?,0,0.9913684725761414
512170124,424,devshgraphicsprogramming,2020-10-26T18:12:41Z,"make this constructor protected, dont provide default arg, and make it plain as day that its only coating that overrides it",0,0.9881002902984619
512170617,424,Crisspl,2020-10-26T18:13:34Z,"i dont get how this is relevant to those comments, however... thats how it is basically. ir has twosided (2 or 1 surface) in root node and backend is propagating the flag while generating instructions for tree traversal",0,0.5400497913360596
512176031,424,devshgraphicsprogramming,2020-10-26T18:22:36Z,can you show me an example of an mdl definition of a material that would require this?,0,0.9933684468269348
512176955,424,devshgraphicsprogramming,2020-10-26T18:24:04Z,i also take issue with the fact that direct childre of this `fresnel` combiner node are `cmicrofacetspecularbsdfnode` which when used directly are supposed to handle their own fresnel?,0,0.9932532906532288
513400368,424,Crisspl,2020-10-28T12:24:32Z,"right, this comment is useless. it will wrok fine if user provides custom loader override. resolved",0,0.9022045731544495
513594751,424,Crisspl,2020-10-28T16:39:12Z,"anyway.. when dielectric gets its dedicated ir node, it will not be used by anything in mitsuba frontend. but it is present in mdl under the name `df::fresnel_layer`. see [a link] `et_weight_blend` is however used for encoding mitsuba's `blendbsdf`",0,0.993398904800415
513630828,424,Crisspl,2020-10-28T17:27:12Z,theres no builtins with struct parameters in our glsl lib,0,0.9923639297485352
513631065,424,Crisspl,2020-10-28T17:27:29Z,theres no builtins with struct parameters in our glsl lib,0,0.9923639297485352
513644074,424,Crisspl,2020-10-28T17:46:23Z,i dont understand the question. how could fresnel come from texture? or do you mean ior? it's always constant. preload what registers with what values?,-1,0.6217930912971497
513649698,424,Crisspl,2020-10-28T17:54:32Z,what exactly?,0,0.9268943667411804
513652249,424,Crisspl,2020-10-28T17:58:13Z,whats with them?,0,0.9851689338684082
513653453,424,Crisspl,2020-10-28T18:00:00Z,"no, we rejected that idea. long ago and dont remember why",-1,0.8404264450073242
513664670,424,devshgraphicsprogramming,2020-10-28T18:17:16Z,whats' their purpose?,0,0.9643437266349792
513664908,424,devshgraphicsprogramming,2020-10-28T18:17:41Z,but opacity has not been implemented at all ? also it seems the only way to implement opacity for me.,0,0.9798889756202698
513665515,424,devshgraphicsprogramming,2020-10-28T18:18:48Z,ah ok i get it somewhat now.,0,0.8696268200874329
513665731,424,devshgraphicsprogramming,2020-10-28T18:19:08Z,how does `instr_decoderegisters` work?,0,0.994347870349884
513666881,424,devshgraphicsprogramming,2020-10-28T18:20:52Z,does mitsuba not allow `eta` for any of the materials to come from a texture?,0,0.9914234280586243
513813630,424,Crisspl,2020-10-28T23:06:06Z,nah,0,0.9429860711097717
513840716,424,devshgraphicsprogramming,2020-10-29T00:32:22Z,"hmm we could support it in the backend though, so that the rgb19e7 call would be swapped for a ""real"" `vec3` and not do costly integer bit manipulation every time we evaluate, generate or compute rem+pdf",0,0.9887365698814392
514200542,424,Crisspl,2020-10-29T11:53:25Z,decodes 3x 8bit from 2nd dword,0,0.9871723055839539
514546673,424,devshgraphicsprogramming,2020-10-29T20:29:14Z,?,0,0.9557723999023438
514548020,424,devshgraphicsprogramming,2020-10-29T20:31:29Z,i think it should be dona via inserting the derivative map into the asset cache with the same name as the original texture + `?` + `deriv_map` (same for mtl),0,0.9950286746025085
514550307,424,devshgraphicsprogramming,2020-10-29T20:35:47Z,why cant the same node node encode all types of weighing/mixing? we just need to discern what the weights would be...,0,0.9469148516654968
514551555,424,devshgraphicsprogramming,2020-10-29T20:38:13Z,what happened to this?,0,0.9710234999656677
514552057,424,devshgraphicsprogramming,2020-10-29T20:39:10Z,actually because this function you execute when this brdf was not the generator... the pdf should be 0.0,0,0.969619631767273
514553596,424,devshgraphicsprogramming,2020-10-29T20:41:55Z,todo,0,0.918040931224823
514554809,424,devshgraphicsprogramming,2020-10-29T20:44:04Z,i think its related to this [a link] which is basically why do you need a special root node type anyway?,0,0.9855178594589233
514555129,424,devshgraphicsprogramming,2020-10-29T20:44:34Z,"which is only the rest of the branch from thin onwards should be thin, not the whole ast",0,0.9766591191291809
514558166,424,devshgraphicsprogramming,2020-10-29T20:50:26Z,"twosided in mitsuba means it has the same bsdf on both sides... just saying. also if you allow this then you need a ""fixed"" front&back separate root node (two separate asts), not at literally every single node on the way down makes for a cleaner implementation, two separate instruction streams and stuff for front and back (but could be identical as in the case of mitsuba) then in glsl or whatever you can do `instructionstream[gl_frontface ? frontoffset:backoffset]` instead of turning our ir into an abomination also get rid of dedicated root node type, i dont see a point of having it",0,0.9215613603591919
514558360,424,devshgraphicsprogramming,2020-10-29T20:50:42Z,"ok once all the issues are dealt with, we'll revisit",0,0.9509169459342957
514558879,424,devshgraphicsprogramming,2020-10-29T20:51:20Z,"note, we didn't only the branch of the ast onwards",0,0.9787625670433044
514561252,424,devshgraphicsprogramming,2020-10-29T20:56:01Z,"this concern the mtl loader too you need to check `_heightmap` is not dummy, if it is restore it, etc. also cache the derivative map in the general cache under a custom key... and so on",0,0.9939613938331604
514563460,424,devshgraphicsprogramming,2020-10-29T21:00:04Z,`union` for clarity,0,0.9879162311553955
514564186,424,devshgraphicsprogramming,2020-10-29T21:01:34Z,?,0,0.9557723999023438
514565651,424,devshgraphicsprogramming,2020-10-29T21:03:55Z,i also mean the `precomputedstuffssbo` name,0,0.9911909699440002
514565995,424,devshgraphicsprogramming,2020-10-29T21:04:21Z,did you do any changes?,0,0.9888392090797424
514570209,424,devshgraphicsprogramming,2020-10-29T21:11:11Z,"actually b would be a bad idea... because it introduces a binary choice at possibly every node in the ast but the thing which chooses between back and front face is only a single variable, so if you were to ""unroll"" the ast for different cases you'd only end up with two asts.",-1,0.9607590436935425
514570758,424,devshgraphicsprogramming,2020-10-29T21:12:17Z,why split into color and intensity? just use a single vec3!,0,0.9641437530517578
514570847,424,devshgraphicsprogramming,2020-10-29T21:12:29Z,or rgb19e7,0,0.9787984490394592
514571768,424,devshgraphicsprogramming,2020-10-29T21:14:24Z,done?,0,0.9815027713775635
514571883,424,devshgraphicsprogramming,2020-10-29T21:14:40Z,todo,0,0.918040931224823
514573737,424,devshgraphicsprogramming,2020-10-29T21:18:37Z,do you even use this overload now?,0,0.9907110333442688
514574537,424,devshgraphicsprogramming,2020-10-29T21:20:19Z,"`ndotv` should already be precomputed in your current interaction, and thats the one you should be using! look at the code listing: [a link]",0,0.9614731669425964
514574769,424,devshgraphicsprogramming,2020-10-29T21:20:47Z,todo,0,0.918040931224823
514575050,424,devshgraphicsprogramming,2020-10-29T21:21:20Z,you forgot to commit this file,0,0.9696280360221863
514575618,424,devshgraphicsprogramming,2020-10-29T21:22:32Z,where's the weight and correction?,0,0.9918678402900696
514575944,424,devshgraphicsprogramming,2020-10-29T21:23:15Z,we need to talk about this... probably,0,0.9582270383834839
514576842,424,Crisspl,2020-10-29T21:25:00Z,?? i cant read interaction to set interaction,-1,0.8062464594841003
514579219,424,devshgraphicsprogramming,2020-10-29T21:29:21Z,this is divergent... it should be [code block],0,0.5883826613426208
514579606,424,devshgraphicsprogramming,2020-10-29T21:30:05Z,why do you have like 4 functions for the same thing?,0,0.6180218458175659
514579799,424,devshgraphicsprogramming,2020-10-29T21:30:35Z,stop violating the right hand rule,0,0.9442318677902222
514580010,424,devshgraphicsprogramming,2020-10-29T21:31:04Z,also [a link],0,0.9829680323600769
514580478,424,devshgraphicsprogramming,2020-10-29T21:32:05Z,still todo,0,0.9734035730361938
514676484,424,Crisspl,2020-10-30T01:39:42Z,"right, makes more sense",0,0.9321192502975464
515022607,424,devshgraphicsprogramming,2020-10-30T11:11:55Z,yes you can read current interaction to flip it also the `view` should be cached.. see my comment about `irr_glsl_mc_getnormalizedv()`,0,0.9883602857589722
516697343,424,devshgraphicsprogramming,2020-11-03T14:16:09Z,still a todo,0,0.948638379573822
516697661,424,devshgraphicsprogramming,2020-11-03T14:16:40Z,watch the latest commits and learn for gltf,0,0.9789857864379883
516699193,424,devshgraphicsprogramming,2020-11-03T14:18:46Z,unused variable.,0,0.9747744798660278
516701765,424,devshgraphicsprogramming,2020-11-03T14:21:58Z,this is a mess it still doesnt do what its supposed to [a link] you shouldn't even have to pass the normal to this function.,-1,0.9697171449661255
516703768,424,devshgraphicsprogramming,2020-11-03T14:24:40Z,whats the status on this?,0,0.979160487651825
516713488,424,devshgraphicsprogramming,2020-11-03T14:36:48Z,still todo,0,0.9734035730361938
516713609,424,devshgraphicsprogramming,2020-11-03T14:36:57Z,todo,0,0.918040931224823
516713907,424,devshgraphicsprogramming,2020-11-03T14:37:17Z,still need that union,0,0.9878492951393127
516839786,424,Crisspl,2020-11-03T17:31:49Z,not needed any more since twosided bsdf is illegal anyway,0,0.978738009929657
516839944,424,Crisspl,2020-11-03T17:32:07Z,+ we wont even have twosided flag,0,0.9639184474945068
517280169,424,Crisspl,2020-11-04T11:33:12Z,done,0,0.8974218964576721
517302083,424,Crisspl,2020-11-04T12:16:33Z,"probably, not sure, will look into it after fixing smaller issues",0,0.9668741822242737
517351510,424,Crisspl,2020-11-04T13:43:51Z,"`weight` is a value resulting from traversing possible chain of blends (choosing left/right). im multiplying both `rem` and `pdf` by the `weight` so that in the end of `rungenerateandremainderstream()` i have `generator_rem` and `generator_pdf` properly weighted. i dont really understand why generator remainder shouldnt be weighted if op_blend is essentially `mix(vec4(rem1, pdf1), vec4(rem2, pdf2))` [code block]",0,0.99018794298172
517357764,424,Crisspl,2020-11-04T13:53:24Z,but can i read from `out` function parameter? i can change it to `inout` just as well but i could be misleading,0,0.9887680411338806
517390990,424,Crisspl,2020-11-04T14:39:07Z,yes,0,0.9659429788589478
517392146,424,Crisspl,2020-11-04T14:40:40Z,i think it would be good idea to just put this function into this loader base class is supposed to make,0,0.9568198323249817
517403288,424,Crisspl,2020-11-04T14:55:42Z,ignoring because twosided-ness is going to be reworked anyway,0,0.9877678751945496
517441039,424,Crisspl,2020-11-04T15:46:55Z,? what 4 functions?,0,0.9852102398872375
517444264,424,Crisspl,2020-11-04T15:51:19Z,"?? well, obviously i need to normal to set surface interaction",-1,0.6379979848861694
518678509,424,devshgraphicsprogramming,2020-11-06T11:01:07Z,"yes you can, but you need to write it yourself first, if you're reading from a `out` that you've never written to before... it needs to be an `inout`",0,0.9859303832054138
518679788,424,devshgraphicsprogramming,2020-11-06T11:03:19Z,what do you need worldspace position for?,0,0.9873591065406799
518705558,424,devshgraphicsprogramming,2020-11-06T11:56:40Z,make sure you don't trip up on padding that was inserted by alignment,0,0.9326441287994385
518705666,424,devshgraphicsprogramming,2020-11-06T11:56:53Z,update comment,0,0.9618536829948425
518709635,424,devshgraphicsprogramming,2020-11-06T12:05:31Z,there's no reason why you should be using `cos_eval_dg` because you can handle beckmann + ggx and anisotropy in a way that reduces divergence... at the very least you should be using `wo_clamps` functions,0,0.9913870692253113
518710388,424,devshgraphicsprogramming,2020-11-06T12:07:07Z,why is it a reflect now?,0,0.9699390530586243
518710575,424,devshgraphicsprogramming,2020-11-06T12:07:31Z,this needs to be the other way round if you're constructing the ir ast for the backface,0,0.9918248057365417
518712807,424,devshgraphicsprogramming,2020-11-06T12:12:23Z,lets talk about consistency. either we differentiate between rough and smooth (microfacet and delta) or we dont and allow 0 roughness materials. so either you have delta_specular + microfacet_specular delta_coating + microfacet_coating delta_dielectric + microfacet_dielectric delta_thin_dielectric + microfacet_thin_dielectric where a microfacet_thin_dielectric is a todo (backends assert that its not used) or just microfacet_specular microfacet_coating microfacet_dielectric microfacet_thin_dielectric where a rough thindielectric is a todo (backends assert that roughness is 0),0,0.9920822381973267
518713790,424,devshgraphicsprogramming,2020-11-06T12:14:34Z,"ah ok, its the world space pos of the frament... i misread and thought it was the camera.",0,0.8772701621055603
518715778,424,devshgraphicsprogramming,2020-11-06T12:18:55Z,i'm sure i already had a function like this... what are you trying to achieve or use this for?,0,0.9215682148933411
518716857,424,devshgraphicsprogramming,2020-11-06T12:21:03Z,proper way to do it (putting asside the do we put weight on pdf issue) [code block] always use the `rcpprob` from the partition function!,0,0.9814043641090393
518720558,424,devshgraphicsprogramming,2020-11-06T12:28:46Z,wtf?,-1,0.9876046180725098
518724498,424,Crisspl,2020-11-06T12:37:12Z,lol xd thx,1,0.9889383316040039
518727988,424,devshgraphicsprogramming,2020-11-06T12:44:26Z,decided,0,0.9630903005599976
518729126,424,devshgraphicsprogramming,2020-11-06T12:46:43Z,"oh, btw you need a `delta_transmission` (to implement opacity mask)",0,0.9890549182891846
518729807,424,devshgraphicsprogramming,2020-11-06T12:48:13Z,"the sample will always be valid for the generator, no need to check here... its only when you evaluate (or get remainder from non-generators)!",0,0.9421879053115845
518730267,424,devshgraphicsprogramming,2020-11-06T12:49:07Z,the generator will always generate valid samples for itself.,0,0.9868406057357788
518730806,424,devshgraphicsprogramming,2020-11-06T12:50:12Z,"nope... you're supposed to check if samples are valid inside `irr_bsdf_cos_generate` for each bsdf, separately",0,0.9866892695426941
518732885,424,devshgraphicsprogramming,2020-11-06T12:54:35Z,"pdf of a delta bsdf as a generator is infinite, as a evaluator its 0 (the probability density around the only value you can generate is infinite, but if the exact generator isnt used then its impossible to obtain the exact value).",0,0.95393967628479
518770648,424,devshgraphicsprogramming,2020-11-06T14:03:29Z,"this is an awful if statement anyway... will be deleted, resolved",-1,0.991789698600769
518796097,424,Crisspl,2020-11-06T14:44:49Z,"yep, im aware, just not the time yet",0,0.5442454814910889
518799597,424,devshgraphicsprogramming,2020-11-06T14:50:11Z,so.. what went down here?,0,0.966162919998169
518800410,424,devshgraphicsprogramming,2020-11-06T14:51:25Z,"should be unneeded if you use the same func to compute the microfacet case for diffuse, difftrans and thindielectric (only in the reflective case obvs)",0,0.9939443469047546
518822222,424,Crisspl,2020-11-06T15:23:31Z,"there's no r32g32_sfloat anymore, but vt obvs need extra features as we established (will be done in separate pr on my fork)",0,0.9920263886451721
518830191,424,devshgraphicsprogramming,2020-11-06T15:35:50Z,because the estimator (overall remainder) is `rem = sum{0...n}(w_i*f_i)/sum{0...n}(w_i*p_i);` you can split it w.r.t. the generator `g` `rem = (w_g*f_g+sum{i!=g}(w_i*f_i))/sum{0...n}(w_i*p_i);` divide both sides by `w_g*p_g` `rem = (w_g*f_g/(w_g*p_g)+sum{i!=g}(w_i*f_i)/(w_g*p_g))/(sum{i!=g}(w_i*p_i)/(w_g*p_g)+1.0);` and it just so happens that `w_g*f_g/(w_g*p_g)` is the unweighted remainder of the generator bxdf `f_g/p_g`,0,0.9910151362419128
518834572,424,devshgraphicsprogramming,2020-11-06T15:42:39Z,something went wrong during the merge,0,0.9630575776100159
518838529,424,Crisspl,2020-11-06T15:48:57Z,"i didnt merge your branch, just mine",0,0.8596802949905396
518844910,424,devshgraphicsprogramming,2020-11-06T15:58:56Z,actually you could change the name of `is_valid` to `can_eval` and here you could do `can_eval = cosfactor>flt_min;`,0,0.9942551255226135
518845428,424,devshgraphicsprogramming,2020-11-06T15:59:43Z,see [a link] you could use `can_eval` here,0,0.9929249286651611
518845789,424,devshgraphicsprogramming,2020-11-06T16:00:20Z,could merge this if/else with the previous,0,0.9919183850288391
518852724,424,devshgraphicsprogramming,2020-11-06T16:11:49Z,why recompute from scratch? if the view and light positions don't change then your half vector doesnt change and its dot product with v or l don't either,0,0.9822344183921814
518853630,424,devshgraphicsprogramming,2020-11-06T16:13:22Z,i fail to see any weighting of the eval and pdf?,0,0.9227783679962158
518859084,424,devshgraphicsprogramming,2020-11-06T16:22:26Z,btw there's two forms of getting the remainder `generator_rem/(1.0+restpdf/generator_pdf) + acc/pdf` and `(generator_rem+acc/generator_pdf)/(1.0+restpdf/generator_pdf)` where `generator_rem` is the unweighted remainder of the generator,0,0.9922847747802734
518921779,424,devshgraphicsprogramming,2020-11-06T18:13:39Z,remove comment.,0,0.9739028215408325
518923589,424,devshgraphicsprogramming,2020-11-06T18:17:01Z,you sure that's right?,0,0.9852803349494934
518926830,424,devshgraphicsprogramming,2020-11-06T18:23:15Z,what is this `w` and `out_weight` used for?,0,0.9942073822021484
518927721,424,devshgraphicsprogramming,2020-11-06T18:24:55Z,"ok its wrong, you cant use the actual weights as the pdf weights, because that works differently",-1,0.7721275091171265
518933305,424,Crisspl,2020-11-06T18:35:55Z,because it's done in instr_execute_eval_pdf_coating/blend if thats what you mean,0,0.9874003529548645
518933781,424,Crisspl,2020-11-06T18:36:55Z,best i could come up with without knowing h and l,0,0.9449772238731384
518934550,424,Crisspl,2020-11-06T18:38:17Z,out_weight goes to `instr_execute_cos_eval_pdf_coating` to not compute same thing twice,0,0.9929145574569702
518935068,424,devshgraphicsprogramming,2020-11-06T18:39:23Z,"because your generator chooses coat with probability `fresnel(ndotv)` the pdf should be `mix(coated_pdf,coat_pdf,fresnel(ndotv))`, so `out_weight=1.0-fresnel(ndotv)` (i'd rather have you swap l/r child nodes around with coat with coated so you don't need to do `1.0-` all the time)",0,0.993304431438446
518963227,424,devshgraphicsprogramming,2020-11-06T19:37:11Z,ok,0,0.8787186145782471
518963411,424,devshgraphicsprogramming,2020-11-06T19:37:38Z,"ah ok, merge mine at some point",0,0.8940693140029907
522309737,424,devshgraphicsprogramming,2020-11-12T18:05:30Z,so the base was made?,0,0.991944432258606
523135529,424,Crisspl,2020-11-13T18:12:48Z,im sure,0,0.821516215801239
523138030,424,Crisspl,2020-11-13T18:17:07Z,"i think i can get rid of this scattering mode actually `reflect` is set without a reason, it's ignored by glsl backend anyway",0,0.9819552302360535
523138567,424,Crisspl,2020-11-13T18:17:45Z,thats how it's done ;),1,0.9923905730247498
523141954,424,Crisspl,2020-11-13T18:21:23Z,"not used any more in material compiler, but i think it can be left in the glsl header as is?",0,0.9939826130867004
524263065,424,devshgraphicsprogramming,2020-11-16T13:22:31Z,"you no longer need to flip, if you're doing twosided as separate instruction streams, so this function needs not to exist",0,0.9807894825935364
526478109,424,devshgraphicsprogramming,2020-11-18T22:55:14Z,"my god... how could nvidia produce such a royal fuckup! weighing the coated bxdf by the top level bsdf's microfacet fresnel :person_facepalming: we should probably emit warnings in the future when encountering the use of `df::fresnel_layer` in blend materials telling people nvidia fucked up big time. we should not support that abomination... if something is getting weighted by fresnel, only the left bsdf gets weighted by microfacet fresnel, the right one will be weighted by the 2 fresnels we usually use for diffuse. we will correct it, if someone wants the broken behaviour (and consistency with other tools that loose energy) they can patch the engine.",-1,0.9924893379211426
526479703,424,devshgraphicsprogramming,2020-11-18T22:59:03Z,"also it looks like using a normal glossy bsdf (microfacet glass) in a ""coating"" mdl-fresnel-blend would result in double fresnel getting applied on the specular coating :person_facepalming: :person_facepalming: :person_facepalming: tl;dr dont worry about supporting mdl, just make our ir ""sane""",0,0.8907339572906494
526505187,424,devshgraphicsprogramming,2020-11-19T00:07:11Z,still not const pointer to ir,0,0.9814376831054688
526506376,424,devshgraphicsprogramming,2020-11-19T00:10:44Z,you wont need them [a link],0,0.9853503704071045
526506474,424,devshgraphicsprogramming,2020-11-19T00:11:00Z,you wont need them [a link],0,0.9853503704071045
527890416,424,devshgraphicsprogramming,2020-11-20T18:20:17Z,todo,0,0.918040931224823
527903613,424,devshgraphicsprogramming,2020-11-20T18:45:20Z,needs to be back,0,0.961376965045929
527903974,424,devshgraphicsprogramming,2020-11-20T18:46:00Z,leave the comment,0,0.9765090346336365
527906140,424,devshgraphicsprogramming,2020-11-20T18:50:25Z,rename `et_fresnel_blend` to `et_coat_blend` if you want something for supporting the broken way mdl layers materials with fresnel reserve the name `et_lol_mdl_sux_broken_fresnel_blend`,0,0.9955945611000061
527907388,424,devshgraphicsprogramming,2020-11-20T18:53:03Z,still todo,0,0.9734035730361938
527932235,424,Crisspl,2020-11-20T19:42:16Z,"i did this the other way (freeing mem for temp nodes after compilation), you've seen",0,0.982620894908905
528667586,424,Crisspl,2020-11-23T12:27:19Z,"i've created separate ir node for coating, so i can remove fresnel_blend just as well",0,0.9861485958099365
528815040,424,devshgraphicsprogramming,2020-11-23T16:02:12Z,i think `et_lol_mdl_sux_broken_fresnel_blend` is a much better idea xd,1,0.7296059727668762
528816097,424,devshgraphicsprogramming,2020-11-23T16:02:52Z,"eh ok, i still dont like it... but lets just compromise for the sake of the merge",-1,0.9433630704879761
528819802,424,devshgraphicsprogramming,2020-11-23T16:07:33Z,why do we no longer filter?,0,0.9731034636497498
528819923,424,devshgraphicsprogramming,2020-11-23T16:07:44Z,why do we no longer optimize?,0,0.9635159969329834
528826206,424,devshgraphicsprogramming,2020-11-23T16:16:35Z,just remove the macro shit,-1,0.9591608643531799
528832754,424,Crisspl,2020-11-23T16:25:28Z,ah forgot to turn it on,0,0.9026044607162476
362091450,410,devshgraphicsprogramming,2019-12-30T20:42:32Z,"just a unique string that we can use to do a comparison against, it would be useful if you also had a static function for this class that returns the same thing.",0,0.9841747879981995
362091537,410,devshgraphicsprogramming,2019-12-30T20:43:00Z,would be nice if we could roll this into a struct that would be ready to be copied into a `std140` ubo,0,0.9787304997444153
362091622,410,devshgraphicsprogramming,2019-12-30T20:43:21Z,same as above (i presume pbr and above are mutually exclusive),0,0.9898298382759094
362093639,410,devshgraphicsprogramming,2019-12-30T20:53:15Z,"its because we can't enum all the possible loaders, so need to identify by string",0,0.9724478125572205
362095128,410,devshgraphicsprogramming,2019-12-30T21:00:21Z,namespace mtlparser would be cool,1,0.7416095733642578
362095494,410,devshgraphicsprogramming,2019-12-30T21:02:21Z,"actually we should go the **ubershader** route here, which is one shader with all the material models, where you only switch between them using a uniform or a push constant (whichever one you like). the metadata returned will help the user build the ""expected"" descriptor set contents.",0,0.9912474751472473
362095859,410,devshgraphicsprogramming,2019-12-30T21:04:11Z,cool but you need to add one more binding for a per-material ubo (for materials parameters),0,0.7382803559303284
362096875,410,devshgraphicsprogramming,2019-12-30T21:09:09Z,"can you add these icpusamplers to the asset cache under the `builtin` path, i.e. something like `irr/builtin/samplers/xxxx` when the `iassetmanager` constructor/init begins this sort of stuff will allow us to reduce resource duplication in the future",0,0.993869423866272
362097127,410,devshgraphicsprogramming,2019-12-30T21:10:36Z,"set 3 is per mesh, set 2 is per material iirc 0 = global / per-frame 1 = per-view/camera 2 = material/shader 3 = object/mesh/draw",0,0.9909947514533997
362115919,410,Crisspl,2019-12-30T22:54:03Z,it's just inside this cpp file/translation unit anyway,0,0.9929513335227966
362121972,410,devshgraphicsprogramming,2019-12-30T23:42:09Z,"and another set 1 ubo for mvp matrix, and mv inverse transpose, etc. plus possibly push constant for the illumination model etc.",0,0.9914156794548035
362122344,410,devshgraphicsprogramming,2019-12-30T23:44:57Z,"yeah now a shader needs to be added, ~plus vertex and prim params~ (ah, i see what you're doing with the cloning later on). then best-fit blend and raster params",0,0.9636427164077759
362122948,410,devshgraphicsprogramming,2019-12-30T23:49:49Z,"the idea should be that your loader for mtl (and to be honest any other loader, except for .baw) adds big ubershaders to the asset manager in the constructor of the loader (when it gets added). then we only really compile once when loading the models of a particular format, and no have to deal with ""fake"" shader swaps on the api side. you should cache your pipeline layouts too, since you'll probably be returning the same one over and over again (unless you choose to differentiate for different texture set-ups).",0,0.9871834516525269
362123335,410,devshgraphicsprogramming,2019-12-30T23:53:17Z,"in reality the pipelines themselves could also be precomputed and during the load, cloned appropriately (they only need to be unique objects because the metadata changes, but internals will be identical) it will be important to implement a correct `operator==` for `core::unordered_set` for pipelines, shaders and layouts that can reduce duplicates in the default cpu to gpu object converter.",0,0.9943898320198059
362123589,410,devshgraphicsprogramming,2019-12-30T23:55:20Z,kill the usage of `core::vector3df` and `core::vector2df` while you're at it.,0,0.919301450252533
362123711,410,devshgraphicsprogramming,2019-12-30T23:56:31Z,why is this gone?,0,0.8901960849761963
362123747,410,devshgraphicsprogramming,2019-12-30T23:56:48Z,reason for deletion?,0,0.9759337306022644
362125278,410,devshgraphicsprogramming,2019-12-31T00:11:09Z,"from now on when using `findcachedasset` or similar functions in a loader that take a hierarchy level, abandon the constants. as hierarchy level use `_hierarchylevel+icpumeshbuffer::pipeline_hierarchylevels_below` obviously you need to define these magical `_hierarchylevels_below` constexpr constants for all the asset classes. [a link] p.s. this is actually a thing to refactor in all the mesh loaders",0,0.9488047957420349
362125492,410,devshgraphicsprogramming,2019-12-31T00:12:54Z,shouldn't you be using the variant where you can specify the hierarchy level ? you're loading from a dependent loader also: [a link],0,0.9928574562072754
362126421,410,devshgraphicsprogramming,2019-12-31T00:21:25Z,if mutually exclusive then the ubo struct could be a union.,0,0.9857804179191589
362127194,410,devshgraphicsprogramming,2019-12-31T00:28:52Z,patch our default cpu to gpu object converter so that it always extends the mipmap chain to the full max value and computes the missing mipmaps (you can hack it with a blit for now or a compute shader mip-mapping stub),0,0.9938095211982727
362127230,410,devshgraphicsprogramming,2019-12-31T00:29:19Z,obvs don't touch the loaders and cpu images ;),1,0.6707969307899475
362127275,410,devshgraphicsprogramming,2019-12-31T00:29:53Z,imageview cpu2gpu will also need the `levelcount` patch-up,0,0.9935336112976074
362128087,410,devshgraphicsprogramming,2019-12-31T00:38:20Z,"nope cache them, although i'd say you need ds 1 and 3 + pc 1 = vp and vp^t^-1 matrix, etc. 3 = textures and other material parameters, mvp and other per-draw/per-instance/meshbuffer matrices push constants = small material parameters i'd try and have the descriptor set reuse approach max, because otherwise we'll get ds swaps before every submesh draw. the eventual ubo i would have as a dynamic one, so the swap of desc set hits the fast path (offset change). obviously we acknowledge that the descriptor set 3 itself would be incomplete for rendering and rendering wont work, this is what the pipeline metadata is for, it has some nice required inputs list for the application to know where to place the camera matrices (which pc bytes, or ubo bytes in a binding+set)",0,0.9703478813171387
362128388,410,devshgraphicsprogramming,2019-12-31T00:40:50Z,"obj can spec faces which are quads or even polygons, we need triangulation if it used to work before.",0,0.9880820512771606
362128457,410,devshgraphicsprogramming,2019-12-31T00:41:44Z,we should probably use the utility function for this xd,0,0.9912475943565369
362128534,410,devshgraphicsprogramming,2019-12-31T00:42:30Z,use an `&` or `?` a multiply is confusing,-1,0.7113776206970215
362128703,410,devshgraphicsprogramming,2019-12-31T00:44:25Z,"`std::isnan` is broken on gcc `-ffast-math` we should replace all usages of `std::isnan`, `std::nan`, and `isinf`, etc. with our own `core::` implementations that do the bitmask checking magic themselves (`ffast-math` on gcc works by assuming you'll never get an inf, nan, or a denorm number, which is ok up until it starts breaking `std::` functions that should always work cause they check bits)",0,0.9924955368041992
362128858,410,devshgraphicsprogramming,2019-12-31T00:46:23Z,"again, hierarchy level and flags",0,0.9695990085601807
362128940,410,devshgraphicsprogramming,2019-12-31T00:47:03Z,at least assert it or something,0,0.9643147587776184
362128985,410,devshgraphicsprogramming,2019-12-31T00:47:38Z,"clever, i like it",1,0.7464996576309204
362567300,410,Crisspl,2020-01-02T17:57:13Z,reworked + previous version was bugged,0,0.7806079387664795
362568731,410,Crisspl,2020-01-02T18:01:21Z,"was never used (`if (ctx.usegroups)`, `usegroups` was always false anyway), vertices are divided into submeshes with usemtl tag (as it was before)",0,0.9939976930618286
362577454,410,Przemog1,2020-01-02T18:28:38Z,what exactly are you talking about?,0,0.9794122576713562
362598781,410,Crisspl,2020-01-02T19:30:35Z,"well, i think only `ambient` and `shininess` is of no use for pbr. fun fact: all of these summed up is exactly 128 bytes",0,0.8188978433609009
362604888,410,devshgraphicsprogramming,2020-01-02T19:47:14Z,"hmm ok, i trust what you're doing.",0,0.5575872659683228
362604946,410,devshgraphicsprogramming,2020-01-02T19:47:25Z,ok but that controls smoothing etc. afaik,0,0.9874382615089417
362607634,410,devshgraphicsprogramming,2020-01-02T19:55:12Z,"hmm.. i think i got confused, although i believe i could have been thinking about the need of the normals to be flipped for rh meshes (different winding order for front-face so different cross product sign needed)",-1,0.7659342288970947
362610072,410,Crisspl,2020-01-02T20:02:07Z,"there is some `s` aka smooth group thing in obj spec, but not used/supported in our loader",0,0.9903721809387207
362617097,410,Crisspl,2020-01-02T20:24:46Z,i see that `irr/builtin/samplers/default` has `anisotropicfilter = 4u`. should it also be like it in those?,0,0.9943556785583496
362651501,410,Crisspl,2020-01-02T22:19:00Z,"nah, it always assumed triangles. i dont why there was reserve(32) then so i changed it to 3",0,0.9722488522529602
362679560,410,Crisspl,2020-01-03T00:39:35Z,"i figured, loader only creates sets with descriptors provided by it. however i think putting layout for set=1 sounds like a good idea to me. anyway.. should the buffer (the one being the ubo asset in the set) be filled wih ny particular data?",0,0.8912253975868225
362749751,410,AnastaZIuk,2020-01-03T09:39:10Z,now we can use it from here [a link],0,0.9800467491149902
362900813,410,Crisspl,2020-01-03T17:52:18Z,"2 was for ""mesh scene node"", 3 for meshbuffer/draw. cpu/gpumeshbuffer holds ds that ought to be used as set=3",0,0.9933865666389465
362914843,410,Crisspl,2020-01-03T18:36:43Z,"there's no way to return ds1, one ds is attached to meshbuffer (as we established, it's 3), but there's no way to return another one",0,0.9868810176849365
362915229,410,Crisspl,2020-01-03T18:37:47Z,also: [a link],0,0.9822316765785217
362941221,410,Crisspl,2020-01-03T19:57:56Z,done in obj loader,0,0.9848580360412598
365220369,410,Crisspl,2020-01-10T12:54:07Z,"xdd obviously you were right, there was triangulation",0,0.5168471932411194
365513532,410,devshgraphicsprogramming,2020-01-11T10:34:54Z,"you can distustingly call glgeneratemipmaps (dsa version) for now, and leave a note pointing to the mipmapper issue.",0,0.9929648637771606
366370307,410,devshgraphicsprogramming,2020-01-14T14:31:47Z,how did you fix?,0,0.965293824672699
366373299,410,AnastaZIuk,2020-01-14T14:37:07Z,wasn't it like that at beginning?,0,0.977241039276123
366393982,410,devshgraphicsprogramming,2020-01-14T15:11:56Z,is this clear?,0,0.9891462326049805
366466162,410,devshgraphicsprogramming,2020-01-14T17:14:14Z,"bad packing, whole struct no alligned to 16 bytes. also i'd consider wrapping non-pbr (shininess, ambient) and pbr (ior, roughness, metallic, ...) in separate structs and using a `union` to not waste space (we aim to use the same data in shaders).",0,0.8522281050682068
366466800,410,devshgraphicsprogramming,2020-01-14T17:15:34Z,you need 18 bits for the maps (just update the comment),0,0.9901699423789978
366466946,410,devshgraphicsprogramming,2020-01-14T17:15:54Z,whats clamp?,0,0.9783072471618652
366469950,410,devshgraphicsprogramming,2020-01-14T17:22:12Z,"keep my default of `~0u` we want default not to ""leak memory""",0,0.9697034955024719
366470297,410,devshgraphicsprogramming,2020-01-14T17:22:55Z,doesn't ` _asset->converttodummyobject` do that `= true` thing already?,0,0.9944221377372742
366471572,410,devshgraphicsprogramming,2020-01-14T17:25:28Z,"you can put this in front of the `grab` + insert into the cpu2gpu cache, but we need to call `converttodummyobject` every single time (the function for the asset needs to handle multiple subsequent calls)",0,0.9945217370986938
366473316,410,devshgraphicsprogramming,2020-01-14T17:29:07Z,agreed,0,0.9622275233268738
366473766,410,devshgraphicsprogramming,2020-01-14T17:30:06Z,dont call it gpu mesh,0,0.9494932889938354
366487394,410,devshgraphicsprogramming,2020-01-14T17:58:39Z,"i commented this already in the other pr #411 , `drawmesh` is not for indirect draws.",0,0.9945676326751709
366489291,410,devshgraphicsprogramming,2020-01-14T18:02:48Z,all of this needs to be fixed same as #411,0,0.9792821407318115
366489875,410,devshgraphicsprogramming,2020-01-14T18:04:00Z,i think you lost `m_containsglsl` here...,0,0.9408806562423706
366490383,410,devshgraphicsprogramming,2020-01-14T18:05:17Z,maybe define these in terms of `icpumeshbuffer::pipeline_hierarchylevels_below+1u` etc. ?,0,0.9958670139312744
366491010,410,devshgraphicsprogramming,2020-01-14T18:06:41Z,copy the `isdummyobjectforcachealiasing` field or place an `assert(isdummyobjectforcachealiasing)`,0,0.9944802522659302
366491251,410,devshgraphicsprogramming,2020-01-14T18:07:16Z,explain why are we changing this?,0,0.9755404591560364
366492932,410,devshgraphicsprogramming,2020-01-14T18:10:56Z,make sure it won't throw (that you still have 8 characters in the string left).,0,0.9731189012527466
366493133,410,devshgraphicsprogramming,2020-01-14T18:11:19Z,same here about the throw,0,0.9610922336578369
366502167,410,devshgraphicsprogramming,2020-01-14T18:30:50Z,"ok, i remember [a link] is that the reason?",0,0.9903249740600586
366503019,410,devshgraphicsprogramming,2020-01-14T18:32:34Z,ok i see the new change now.,0,0.9562854766845703
366517802,410,devshgraphicsprogramming,2020-01-14T19:03:16Z,"well if the shader requires stuff that is ""constant"" (not world matrix) like stuff that you'd have to fill from the metadata to make the material ""work"", like illumination model, ambient and diffuse, etc. then you should sure create, attach and fill an ubo or fill a push constant with data.",0,0.9911432266235352
366532991,410,devshgraphicsprogramming,2020-01-14T19:35:25Z,use `descriptor_set` and `descriptor_set_layout` instead of `ds` and `ds_layout` in the paths (let it be verbose). and please for the love of god give it a different name than `default_ds1` !,0,0.555789053440094
366533643,410,devshgraphicsprogramming,2020-01-14T19:36:44Z,`basic_view_parameters` or something.,0,0.9925884008407593
366533877,410,devshgraphicsprogramming,2020-01-14T19:37:20Z,"actually make a struct with proper packing, padding and alignment that people could then use to fill out data for the shader, and take the `sizeof` that",0,0.9932541251182556
366534214,410,devshgraphicsprogramming,2020-01-14T19:38:00Z,alos mv/m and 3x3 normal matrices are 12 bytes (same as `core::matrix3x4simd`) not 16,0,0.9840341806411743
366535315,410,devshgraphicsprogramming,2020-01-14T19:40:19Z,"also because a `mat3` takes the space of a `mat4x3` you can stash the `vec3` camera position in the unused column of a `mat3/mat4x3` when in `row_major` layout (fun fact, you can get it directly in glsl without transpose because glsl works on columns)",0,0.9916108250617981
366535694,410,devshgraphicsprogramming,2020-01-14T19:41:06Z,"you're going to need this line a lot, make a lambda or something to fill icpubuffer with dead beef.",-1,0.7344852685928345
366538697,410,devshgraphicsprogramming,2020-01-14T19:47:34Z,"well 16x anisotropic filter (2^4) is the max on most economy-grade gpus, so yes.",0,0.9908860921859741
366538848,410,devshgraphicsprogramming,2020-01-14T19:47:57Z,unless you're making a `irr/builtin/samplers/nearest` xd,0,0.9941670894622803
366545289,410,devshgraphicsprogramming,2020-01-14T20:02:19Z,"i see the following pairing (not gospel, approximate) so i guess if you're not switching shaders when you're switching textures, it can do in set 3.",0,0.9197628498077393
366545607,410,devshgraphicsprogramming,2020-01-14T20:03:04Z,"it should be though, i think.",0,0.9874699711799622
366555685,410,devshgraphicsprogramming,2020-01-14T20:26:57Z,"this gets split in two, the ubo declaration, and the data struct. data struct goes to: - glsl a common include that's builtin - a matching c++ `struct` with correct alignment in some aptly named directory and header inside `irr/asset/` likewise for the ubo declaration",0,0.9940798282623291
366556043,410,devshgraphicsprogramming,2020-01-14T20:27:49Z,wrap this in a `#ifndef + #define` guard for `vertex_inputs`,0,0.9938952326774597
366556216,410,devshgraphicsprogramming,2020-01-14T20:28:13Z,like we talked on discord (there's a few examples with correct syntax),0,0.9724662899971008
366562837,410,devshgraphicsprogramming,2020-01-14T20:43:59Z,wrap this in a `#ifndef + #define` guard for `vertex_outputs`,0,0.9941153526306152
366562937,410,devshgraphicsprogramming,2020-01-14T20:44:14Z,wrap this in a `#ifndef + #define` guard as well,0,0.9924713373184204
366563297,410,devshgraphicsprogramming,2020-01-14T20:45:07Z,`normalize` goes around `vnormal` not the whole matrix thing,0,0.9921563863754272
366563650,410,devshgraphicsprogramming,2020-01-14T20:45:59Z,"`matrix*vec4(v,1.0)` needs its own function and header (`vertex_utils.glsl` or something)",0,0.9943990111351013
366565460,410,devshgraphicsprogramming,2020-01-14T20:50:27Z,the proper way to factor it out is `matrix[0]*v.x+matrix[1]*v.y+matrix[2]*v.z+matrix[3]`,0,0.9925454258918762
366566371,410,devshgraphicsprogramming,2020-01-14T20:52:33Z,wrap the main in a `#ifndef + #define` guard for `vertex_main`,0,0.9940029978752136
366567417,410,devshgraphicsprogramming,2020-01-14T20:54:57Z,furthermore the `camdata` built-in header should have a function that does the mvp and mv transformations on some input vector (and uses the `vertex_utils.glsl`),0,0.9951810240745544
366568211,410,devshgraphicsprogramming,2020-01-14T20:56:54Z,factor out into a struct and a built-in header (`irr/builtin/glsl/graphicspipeline/loaders/mtl/common.glsl`),0,0.994742751121521
366568356,410,devshgraphicsprogramming,2020-01-14T20:57:17Z,wrap this in a `#ifndef + #define` guard for `fragment_input_pushconstants`,0,0.9943148493766785
366568501,410,devshgraphicsprogramming,2020-01-14T20:57:40Z,wrap this in a `#ifndef + #define` guard for `fragment_inputs_stage`,0,0.9940100908279419
366568609,410,devshgraphicsprogramming,2020-01-14T20:57:58Z,wrap this in a `#ifndef + #define` guard for `fragment_output_framebuffer`,0,0.9942806959152222
366569093,410,devshgraphicsprogramming,2020-01-14T20:59:09Z,just handle everything in a `switch` gpu branching still costs a little bit.,0,0.9815254211425781
366569322,410,devshgraphicsprogramming,2020-01-14T20:59:43Z,wrap this in a `#ifndef + #define` guard for `fragment_main`,0,0.9934864044189453
366570408,410,devshgraphicsprogramming,2020-01-14T21:02:07Z,"different path is needed, `irr/builtin/shader/loaders/obj/...`",0,0.9943699240684509
366575003,410,devshgraphicsprogramming,2020-01-14T21:13:29Z,"all these shaders should be simple overrides of the uv version (or vice versa), thats why i want you to wrap every blok in `#ifndef + #define` guards with separated declarations and definitions so simple changes like this are possible without duplicate code.",0,0.9889137148857117
366575208,410,devshgraphicsprogramming,2020-01-14T21:13:59Z,actually make the non-uv version be the override of the uv version,0,0.9842244386672974
366894417,410,devshgraphicsprogramming,2020-01-15T14:10:20Z,"you don't return ds1, you leave space for it, the pipeline metadata (this is why i made a base shared class) shall instruct the user how to construct and fill the ubos used by ds1 + layout will tell how to make ds1",0,0.9879554510116577
366899061,410,devshgraphicsprogramming,2020-01-15T14:18:54Z,"can you factor this out to a common non-virtual inline function, otherwise the custom icpubuffers will still keep intact `size` and `isdummyobjectforcachealiasing`",0,0.9940963983535767
366899780,410,devshgraphicsprogramming,2020-01-15T14:20:08Z,very important,1,0.4971231520175934
366900700,410,devshgraphicsprogramming,2020-01-15T14:21:46Z,maybe we should refactor this extension and have an `init` function that adds this shader to the built-ins? (or just put this vertex shader in built-in engine core),0,0.9951932430267334
366911400,410,devshgraphicsprogramming,2020-01-15T14:40:42Z,this is all basically copied from the ex 13 brdf explorer? correct?,0,0.9903171062469482
366917408,410,devshgraphicsprogramming,2020-01-15T14:51:21Z,maybe fix it on your branch and pr,0,0.9915418028831482
366917965,410,devshgraphicsprogramming,2020-01-15T14:52:16Z,actually examples are here [a link],0,0.9910507202148438
366920698,410,devshgraphicsprogramming,2020-01-15T14:57:09Z,"needs to be refactored to be similar to: [code block] full post : [a link] also all brdfs/bsdfs should be using some functions and structs from a common brdf/bsdf include, i've given some basic code [a link]",0,0.9814676642417908
366921426,410,devshgraphicsprogramming,2020-01-15T14:58:24Z,you can skip the `_cos_gen_sample` and `_cos_sample_eval` implementations for now (just return all nans),0,0.9920925498008728
366925376,410,devshgraphicsprogramming,2020-01-15T15:05:19Z,"there should be a built-in for that and a header with utility functions, see [a link]",0,0.9913301467895508
366926256,410,devshgraphicsprogramming,2020-01-15T15:06:55Z,the specific brdfs should come from brdf includes (even the non pbr ones) [a link],0,0.9938657879829407
366926660,410,devshgraphicsprogramming,2020-01-15T15:07:41Z,this should come from common include,0,0.9874740839004517
366927222,410,devshgraphicsprogramming,2020-01-15T15:08:38Z,you should gather brdf inputs and then call specific whole `brdf_cos_eval` functions for given pbr brdf,0,0.9940580129623413
366928145,410,devshgraphicsprogramming,2020-01-15T15:10:13Z,derivative mapping and bump mapping functions should be in common include [a link] p.s. also support dot3 normal maps for objs,0,0.9914430975914001
366928537,410,devshgraphicsprogramming,2020-01-15T15:10:59Z,why fragment shader is not added to cache yet?,0,0.9883335828781128
366928936,410,devshgraphicsprogramming,2020-01-15T15:11:39Z,or will it be added by mtl loader?,0,0.9942532181739807
366929706,410,devshgraphicsprogramming,2020-01-15T15:12:57Z,"should be supported, the smooth groups, i mean",0,0.979866623878479
366939872,410,devshgraphicsprogramming,2020-01-15T15:29:26Z,you should be getting views from the asset cache (not create new ones every single time!)!,0,0.9136937856674194
366980824,410,devshgraphicsprogramming,2020-01-15T16:37:28Z,shouldn't the mtl loader load the textures and create the descriptor set?,0,0.9946866035461426
366981596,410,devshgraphicsprogramming,2020-01-15T16:38:53Z,anyway why not create the descriptor set in the mtl loader?,0,0.9934388995170593
366982156,410,devshgraphicsprogramming,2020-01-15T16:39:46Z,shouldn't this be in mtl loader?,0,0.9934878349304199
366982395,410,devshgraphicsprogramming,2020-01-15T16:40:14Z,at least the fragment shader thing,0,0.9839411377906799
366995161,410,Crisspl,2020-01-15T17:03:18Z,"by ""this class"" u mean mtl loader or mtl metadata?",0,0.9921826720237732
366996958,410,Crisspl,2020-01-15T17:06:48Z,i'll have to read more about what this actually is,0,0.7585946321487427
366997630,410,Crisspl,2020-01-15T17:08:09Z,"yea, i'll have to adjust cmtlassetmetadata more to what it's supposed to be according to your idea",0,0.9376162886619568
366998242,410,Crisspl,2020-01-15T17:09:20Z,"lambda? i need this in just this one place. if you mean ""a lot"" globally, then why lambda?",0,0.972599983215332
367025409,410,Crisspl,2020-01-15T18:05:03Z,because frag shaders are generated dynamically (see `getshaders()`) but i think it can be static (like vs) with the knowledge that bindings in desc sets doesnt have to be continuous,0,0.9927961230278015
367025896,410,Crisspl,2020-01-15T18:06:10Z,"i guess it could, i remember i made this decision for some reason but i cant remember..",0,0.7437272071838379
367033615,410,devshgraphicsprogramming,2020-01-15T18:22:49Z,metadata.,0,0.9840952754020691
367034207,410,devshgraphicsprogramming,2020-01-15T18:23:58Z,"i think its basically which faces/vertices get ""artificially"" put together for normal recomputation. this is the whole reason why i wanted the normal recompute function to take a lambda to determine if edge/triangles are connected",0,0.9808844327926636
367036900,410,devshgraphicsprogramming,2020-01-15T18:29:36Z,"lambda, or something... i can see it being used to fill many buffer with deadbeef",0,0.6643983721733093
367038635,410,devshgraphicsprogramming,2020-01-15T18:33:18Z,"yeah bindings don't have to be continuous, you could do one descset layout for all i care, but then you need to hook up a blank 1x1 texture into the empty slots, so you only need 2 fragment shaders.",0,0.9475261569023132
367038786,410,devshgraphicsprogramming,2020-01-15T18:33:37Z,views should definitely be cached.,0,0.9910358190536499
367040673,410,devshgraphicsprogramming,2020-01-15T18:37:38Z,views and textures should be handled by mtl loader,0,0.9923871755599976
367053520,410,devshgraphicsprogramming,2020-01-15T19:06:02Z,"insert at the very end, multithreaded work might fuck up completely with this mutable crap, assets shouldnt be put in cache until they're in their final form.",-1,0.7712075710296631
367059044,410,devshgraphicsprogramming,2020-01-15T19:18:06Z,"i wonder if there's any point in computing these rough normals, if we have the geometry manipulator function to smooth meshes.",0,0.9614355564117432
367064324,410,devshgraphicsprogramming,2020-01-15T19:29:23Z,you can slam that in the mtl,0,0.9921231865882874
367065189,410,devshgraphicsprogramming,2020-01-15T19:31:14Z,"in the mtl, don't need to check for uvs, but there's not only the opacity map, there's also the transmission map that you'd need to check for (different blend equation needed though, probably dual source blending or sth its like having a separate alpha for every rgb channel)",0,0.9890704154968262
367066299,410,devshgraphicsprogramming,2020-01-15T19:33:35Z,"even though you clone, you should cache it in the mtl loader (so the total number of clones is limited)",0,0.991734504699707
367066999,410,devshgraphicsprogramming,2020-01-15T19:35:04Z,"desc set 3 should be made in mtl loader, always",0,0.9886453151702881
367635290,410,Crisspl,2020-01-16T20:33:18Z,"nah, refl map takes 6 enum values but is just one map, that's why 13bits",0,0.9876551032066345
367636441,410,Crisspl,2020-01-16T20:35:34Z,"`-clamp` in mtl/obj spec. if map in .mtl has -clamp flag then it needs sampler with clamp to edge (you can read mtl spec about this, it's actually not clear to me but that's what i assumed)",0,0.9932274222373962
367637681,410,Crisspl,2020-01-16T20:38:11Z,"we might have to talk about it. generally it may result in assets converted to empty cache handles that arent actually cache handles and whats more you cannot make gpu objects from them any more because they've dropped needed resources. that's why i changed it to `0u`, i wasnt sure if it wasnt the cause of crashes during creation of gpu objects",0,0.792208194732666
367639000,410,Crisspl,2020-01-16T20:40:53Z,"some of them, actually it seems a little like we decided to put `=true` in iasset::converttodummyobject implementations but then forgot about it and now some of them have this and some dont",0,0.9566271305084229
367640098,410,Crisspl,2020-01-16T20:43:34Z,i dont understand. what does it mean to handle multiple subsequent calls in this context?,-1,0.9087428450584412
367640384,410,Crisspl,2020-01-16T20:44:19Z,"nah, see constructor",0,0.9840260744094849
367641931,410,Crisspl,2020-01-16T20:48:04Z,"no, it's fix so that it actually compare contents (contained assets) and not just array pointers",0,0.9898825287818909
367643550,410,Crisspl,2020-01-16T20:51:53Z,it checks sizes by itself,0,0.98366779088974
367686206,410,Crisspl,2020-01-16T22:37:18Z,"ah i know why, because theres no way to return it",-1,0.6656187176704407
367696793,410,Crisspl,2020-01-16T23:10:49Z,"ah, correction, i assumed it mean clamp to border with border color being `etbc_float_opaque_black`",0,0.9652066230773926
367925487,410,Crisspl,2020-01-17T13:05:34Z,"yea, thats why im not modifying indirect draw buffer and parameter buffer state. passing nullptr as 2 last args to this functions results in setting indirect draw and parameter buffer bindings to 0 for really no reason",0,0.7098680138587952
368035478,410,Crisspl,2020-01-17T16:51:41Z,"yes, exact copy-paste",0,0.9696491956710815
368036094,410,Crisspl,2020-01-17T16:53:02Z,i dont get it. builtin for normalizing and dot products?,-1,0.5786138772964478
368067154,410,Crisspl,2020-01-17T18:09:22Z,"i dont understand. how struct can be aligned to anything? it's just struct, not memory address",-1,0.7965909838676453
368070750,410,Crisspl,2020-01-17T18:18:12Z,? i dont understand,-1,0.6892398595809937
368071508,410,Crisspl,2020-01-17T18:20:06Z,i think i could use some simple example of what u have in mind,0,0.9562823176383972
368120385,410,devshgraphicsprogramming,2020-01-17T20:22:41Z,slam a (refcounted) pointer to it in the metadata ;),-1,0.5096854567527771
368120992,410,devshgraphicsprogramming,2020-01-17T20:24:05Z,"there's only a certain (given) max number of permutations of such a pipeline for all possible vertex inputs, blend states, and shaders attached... shouldn't be cloning a new one, if you've already made an identical one.",0,0.976166307926178
368121207,410,devshgraphicsprogramming,2020-01-17T20:24:29Z,discussed in discord.,0,0.9038832783699036
368122287,410,devshgraphicsprogramming,2020-01-17T20:26:59Z,"yes, cause there are tricks to get them faster, and user (all implementations and shaders) should rely on the function to get all the dot products and vectors (we make an improvement, every shader benefits, instead of non-dry code).",0,0.9769842028617859
368122723,410,devshgraphicsprogramming,2020-01-17T20:28:09Z,"ok in this case they need the `cos` factor inside them, and a cleanup of names (prefix mostly) and parameters (conform to above). as already mentioned you can leave `sample` functions as a todo.",0,0.9935969114303589
368245455,410,devshgraphicsprogramming,2020-01-18T19:58:01Z,"`alignas` is possible on structs and classes in c++11, it instructs the compiler that the `this` pointer will be aligned, but most importantly it will guarantee alignment on **stack** allocated objects, and within other structs... etc. its specified on vectorsimdf and matrices (by composition) ;)",1,0.7177886366844177
368245480,410,devshgraphicsprogramming,2020-01-18T19:58:13Z,i see.,0,0.95963454246521
368245545,410,devshgraphicsprogramming,2020-01-18T19:59:35Z,"so why is it extra metadata if the same thing can just be present in the descriptor set layout with the correct immutable sampler? (furthermore, why paths, if we can put entire descriptor set in metadata xd)",0,0.9933964014053345
368246860,410,devshgraphicsprogramming,2020-01-18T20:28:26Z,"goes into the mtl pipeline metadata, case closed.",0,0.993949294090271
368246994,410,devshgraphicsprogramming,2020-01-18T20:31:23Z,"hmm ok, my original algorithm assumed that no one would be so dumb as to add the same contents twice... but i guess making it more idiot-proof doesn't cost that much perf, so ok.",0,0.5025255680084229
368247091,410,devshgraphicsprogramming,2020-01-18T20:33:18Z,setting them to 0 in a `drawmesh` is the correct solution... otherwise you have state pollution! (which is exactly why we invented the whole state tracking system in the first place). imagine firing off a few indirect draws before a `drawmesh` and then getting random results from the `drawmesh` depending on which was the last indirect draw to go before it!,0,0.7491557002067566
368247988,410,devshgraphicsprogramming,2020-01-18T20:53:23Z,after i call `converttodummyobject` on any `iasset` i should be able to call `converttodummyobject` again without any side-effects.,0,0.9913934469223022
368248021,410,devshgraphicsprogramming,2020-01-18T20:54:07Z,basically i want this check inside the asset's `converttodummyobject` method as well.,0,0.9937093257904053
368248218,410,devshgraphicsprogramming,2020-01-18T20:59:16Z,"great but wrong file for all this stuff, iassetmanager or similar no idea why youre screwing around with this in the `video` namespace",1,0.48582369089126587
368248222,410,devshgraphicsprogramming,2020-01-18T20:59:30Z,make it rgba8,0,0.9850580096244812
368248276,410,devshgraphicsprogramming,2020-01-18T21:00:50Z,"default color should be ""oczojebny"" pink/magenta with alpha 255 hell, if you want to you can make it a 2x2 checkerboard of grey and magenta to be more obvious.",0,0.9353023767471313
368248290,410,devshgraphicsprogramming,2020-01-18T21:01:21Z,ok but the proper struct?,0,0.9686314463615417
368248342,410,devshgraphicsprogramming,2020-01-18T21:02:04Z,dword all caps,0,0.9678754806518555
368252268,410,devshgraphicsprogramming,2020-01-18T22:30:11Z,"std::array has a `back()` method, we should have one too in `dynamic_array`",0,0.993966281414032
368252390,410,devshgraphicsprogramming,2020-01-18T22:33:01Z,why do you get rid of my `const auto&` or `auto&` so often? we should be using it as often as possible to make sure accidental copy constructions don't happen.,0,0.9688666462898254
368252858,410,devshgraphicsprogramming,2020-01-18T22:44:57Z,this is all fucked,-1,0.9752475023269653
368252925,410,devshgraphicsprogramming,2020-01-18T22:46:18Z,+1 not +count,0,0.9744508862495422
368253028,410,devshgraphicsprogramming,2020-01-18T22:48:39Z,i should have called `prevbinding` `prevoffset` instead and it would be less misleading,0,0.9878348708152771
368253204,410,Crisspl,2020-01-18T22:54:00Z,because its just pair of pointers and `const auto&` just holds rvalue retuned from `getbindings` because of lifetime expansion which seemed weird to me,-1,0.6983885765075684
368253474,410,Crisspl,2020-01-18T23:01:38Z,it already has,0,0.9605575799942017
368253493,410,devshgraphicsprogramming,2020-01-18T23:02:24Z,"hmm ok, but most of the time we want to use `auto&` or `const auto&` because you can't see the type easily, i thought it was one of our containers.",0,0.959990382194519
368253509,410,devshgraphicsprogramming,2020-01-18T23:02:54Z,why not use it?,0,0.9564917683601379
368253580,410,devshgraphicsprogramming,2020-01-18T23:04:31Z,wait what!? why all attachments? you're only gonna write to the first one with this pipeline!,-1,0.9736774563789368
368253589,410,devshgraphicsprogramming,2020-01-18T23:05:14Z,doesn't mtl support like way more ways to make stuff blendable? or is it only the opacity map?,0,0.9672622680664062
368253637,410,Crisspl,2020-01-18T23:06:10Z,"idk, thats where all default assets are added and you started this :p",1,0.9823159575462341
368253685,410,devshgraphicsprogramming,2020-01-18T23:07:31Z,"still want all this crap in a struct, furthermore, the alignment of this will be all fucked up, vec3 is aligned like a vec4, i doubt the memory layout is the same in your c++ struct (better put one of the `float`s after each `vec3`)",-1,0.948785126209259
368253817,410,Crisspl,2020-01-18T23:11:00Z,`bindings` is `srange` and not `dynamic_array`,0,0.9942066669464111
368253978,410,devshgraphicsprogramming,2020-01-18T23:15:22Z,still need to use the a common brdf util header to get all the vectors (that common code i linked you).,0,0.9911248087882996
368254044,410,devshgraphicsprogramming,2020-01-18T23:17:20Z,still relevant?,0,0.9710260033607483
368254148,410,devshgraphicsprogramming,2020-01-18T23:20:09Z,that should definitely be inside the implementations!,0,0.9743355512619019
368254155,410,devshgraphicsprogramming,2020-01-18T23:20:23Z,as with discord you will change to ~0u,0,0.9825403094291687
368254235,410,devshgraphicsprogramming,2020-01-18T23:22:49Z,questions?,0,0.9716218709945679
368254366,410,devshgraphicsprogramming,2020-01-18T23:25:59Z,related [a link],0,0.9863789081573486
368255356,410,devshgraphicsprogramming,2020-01-18T23:55:08Z,"i don't think i started this, i'm not a great fan of lambdas. only thing i remember is a default up and down streaming buffer. ofc there was the 4 default materials/shaders that i've carried on from vanilla-irrlicht, but they started that (and you should nuke them, now! - replace with a default pipeline that does a textured, solid non opaque thing with no lighting). everything needs to move to iassetmanager or some more appropriate place within `irr::asset` maybe to reduce clutter we should make a `iassetmanager::createbuiltinsbeforeloaders` and `iassetmanager::createbuiltinsafterloaders` to call before and after the asset-loaders and registered and constructed.",-1,0.5868276953697205
368255515,410,devshgraphicsprogramming,2020-01-18T23:59:36Z,"yes, because there's hacks that speed it all up, and you dont want to keep code dry",0,0.8187744617462158
368255686,410,devshgraphicsprogramming,2020-01-19T00:04:31Z,still of the opinion textures (descriptor set) and fragment shader should be handled by mtl loader.,0,0.9921579360961914
368255752,410,devshgraphicsprogramming,2020-01-19T00:06:02Z,"please for the love of god don't use numerical literals as stand-ins for sizes, always `sizeof` and of the correct struct type!",1,0.9456914067268372
368255764,410,devshgraphicsprogramming,2020-01-19T00:06:25Z,same as [a link],0,0.9871845841407776
368255879,410,devshgraphicsprogramming,2020-01-19T00:08:32Z,"we should be doing this programmatically, not from **magical** convention knowledge that desc-set 1 is being used with this particular layout, and in that layout there is a ubo that requires that particular struct (still useful to have the struct in c++ for power-user). would be good to build it from standardised pipeline metadata.",0,0.9607755541801453
368255902,410,devshgraphicsprogramming,2020-01-19T00:09:24Z,"actually that's dangerous, shouldn't be touching parents in this chain",-1,0.970743715763092
368255957,410,devshgraphicsprogramming,2020-01-19T00:11:01Z,make it a dummy right away,0,0.9596216082572937
368255985,410,devshgraphicsprogramming,2020-01-19T00:11:35Z,hmm actually don't,0,0.5962575674057007
368256040,410,devshgraphicsprogramming,2020-01-19T00:13:01Z,"i don't think that struct and its methods belong in ""vertex"" utilities per-se (same could be used in fragment shaders, etc).",0,0.9865967631340027
368256149,410,devshgraphicsprogramming,2020-01-19T00:16:27Z,that said `ivideodriver` (or cpu to gpu asset converter) could benefit from a method called `convertallbuiltinstogpu` for memory reclaiming,0,0.9951163530349731
368305548,410,devshgraphicsprogramming,2020-01-19T16:20:43Z,still issue of why are you setting blending on all attachments!?,0,0.6176031231880188
368305991,410,devshgraphicsprogramming,2020-01-19T16:27:37Z,why always false?,0,0.9255858659744263
368306081,410,devshgraphicsprogramming,2020-01-19T16:29:25Z,why use numerical literals?,0,0.9773465991020203
368306133,410,devshgraphicsprogramming,2020-01-19T16:30:35Z,"you should be caching these, as there is only so many permutations you can generate (plus they will be cloned and patched for vertex inputs anyway).",0,0.9889399409294128
368306205,410,devshgraphicsprogramming,2020-01-19T16:31:42Z,you're not using the override?,0,0.9879176020622253
368306293,410,devshgraphicsprogramming,2020-01-19T16:33:33Z,still need that common builtin to get all the brdf parameters,0,0.9911670088768005
368306320,410,devshgraphicsprogramming,2020-01-19T16:33:58Z,wrap?,0,0.9824999570846558
368306386,410,devshgraphicsprogramming,2020-01-19T16:35:04Z,your fragment shader code is not dry,0,0.6267671585083008
368306710,410,devshgraphicsprogramming,2020-01-19T16:40:42Z,"you also need to override the vertex shader ouputs, you can't have a dangling uv out.",0,0.9263679385185242
368306787,410,devshgraphicsprogramming,2020-01-19T16:41:40Z,what about pbr shaders?,0,0.9907910823822021
368314418,410,Crisspl,2020-01-19T19:03:09Z,why?,0,0.8699262738227844
368314711,410,Crisspl,2020-01-19T19:07:35Z,"pbr shader exists for no reason and i can delete it just as well, its not used anywhere. all pbr params in mtl are non-standard (there's no `illum` in mtl that is using pbr params) and they are read and held in metadata just in case user wants to use them.",0,0.9924593567848206
368314828,410,Crisspl,2020-01-19T19:09:37Z,"no, why would i? for what?",0,0.7121759653091431
368314877,410,Crisspl,2020-01-19T19:10:34Z,i think u need to read the code again,0,0.9174363613128662
368315014,410,Crisspl,2020-01-19T19:12:25Z,"idk, fixed",0,0.9774247407913208
368315402,410,Crisspl,2020-01-19T19:19:43Z,"idk, seemed to me like a reasoneable default also for other attachments (i.e. blend params for all attachments are the same by default)",0,0.9741551876068115
368315491,410,Crisspl,2020-01-19T19:21:14Z,"yea, i didnt know where to put them. another builtin loader?",0,0.5381529927253723
368317760,410,Crisspl,2020-01-19T19:58:44Z,of course,0,0.9563178420066833
368318886,410,Crisspl,2020-01-19T20:15:32Z,"ofc it's not, it's glsl definition, i dont see a problem",0,0.7728726267814636
368318900,410,Crisspl,2020-01-19T20:15:45Z,"ofc it's not, it's glsl definition, i dont see a problem",0,0.7728726267814636
368319038,410,Crisspl,2020-01-19T20:17:30Z,"ofc, im not a c++ newbie, i care about copying",-1,0.8568139672279358
368319345,410,Crisspl,2020-01-19T20:20:50Z,so u want me to remove paths and clamp flags from metadata? now it's just because ds was created in obj loader before,0,0.9936390519142151
368319577,410,Crisspl,2020-01-19T20:23:35Z,ok but why this c++ struct should have a particularly aligned address?,0,0.97444087266922
368320928,410,Crisspl,2020-01-19T20:40:14Z,fixed in today commit (not commited/pushed yet while writing this),0,0.9932475090026855
368321048,410,Crisspl,2020-01-19T20:41:58Z,"i dont understand how indirect draw buffer binding affects direct draw calls, but ok i'll revert this",0,0.6498127579689026
368321182,410,Crisspl,2020-01-19T20:44:04Z,"see newest commits and `asset_utils.h` file, this is very outdated",-1,0.5554094910621643
368321205,410,Crisspl,2020-01-19T20:44:27Z,"see newest commits and `asset_utils.h` file, this is very outdated",-1,0.5554094910621643
368323084,410,Crisspl,2020-01-19T21:09:17Z,the c++ struct is in smtl in cmtlpipelinemetadata glsl builtin done in todays commit,0,0.994094967842102
368323238,410,Crisspl,2020-01-19T21:11:54Z,done in todays commit,0,0.9909428954124451
368323270,410,Crisspl,2020-01-19T21:12:48Z,what is `cos` factor?,0,0.992452085018158
368323546,410,Crisspl,2020-01-19T21:17:52Z,"theres also constant opacity parameter, actually i could also taken into account if constant opacity `!=1.0`",0,0.9929130673408508
368323648,410,Crisspl,2020-01-19T21:19:26Z,done,0,0.8974218964576721
368323747,410,Crisspl,2020-01-19T21:20:56Z,see `cmtlpipelinemetadata::smtl::std140packeddata`,0,0.9947353005409241
368323805,410,Crisspl,2020-01-19T21:21:38Z,will be until we fix reordering,0,0.93551105260849
368323881,410,Crisspl,2020-01-19T21:23:01Z,"or just different builtin include ""file""?",0,0.9915503263473511
368324073,410,Crisspl,2020-01-19T21:26:02Z,they're cached because they're retval of the loader. i can cache any more (more than preventing from `clone()` in obj loader) because each mtl file results in unique metadata,0,0.993162989616394
368457556,410,devshgraphicsprogramming,2020-01-20T09:57:27Z,"what about a thing called ""transmission"" or something like that which i saw in the structs/image map definitions?",0,0.992584764957428
368459745,410,devshgraphicsprogramming,2020-01-20T10:01:38Z,don't enable blends on attachments that you don't need to (don't confuse the driver).,0,0.9088423848152161
368460694,410,devshgraphicsprogramming,2020-01-20T10:03:30Z,"yeah, i guess something like `irr/builtin/glsl/`+`common/parameters/sbasicviewparameters`",0,0.9907113909721375
368461449,410,devshgraphicsprogramming,2020-01-20T10:05:02Z,"override always needs to be used (more accurately, passed through) when loaders call other loaders (don't call `interm_getassetinhierarchy` directly) so the user/developer can intervene in the loading of textures and dependent resources.",0,0.9942975640296936
368462421,410,devshgraphicsprogramming,2020-01-20T10:06:57Z,"ah right, unique metadata :(",-1,0.9926093220710754
368463035,410,devshgraphicsprogramming,2020-01-20T10:08:09Z,hmmm i was thinking pbr and non-pbr were duplicated.,0,0.7197588682174683
368464675,410,devshgraphicsprogramming,2020-01-20T10:11:33Z,"it would be a problem if one decided to move the definition from a push constant to an ubo (for example, when rendering multiple materials at once with a single mdi call) want to be protected against alignment issues when using the same struct as pc, ubo and ssbo, furthermore even when the struct is a one off or packed in an array. so ideally structs like this should pass both std140, std430 and be aligned to 16, as well as have their size be aligned to 16 (this protects against differences in layout when you have the struct nested in another as a simple member vs. an array member)",0,0.9934200644493103
368464985,410,devshgraphicsprogramming,2020-01-20T10:12:09Z,inline,0,0.9631757736206055
368465359,410,devshgraphicsprogramming,2020-01-20T10:12:52Z,also what's the convention on metadata upon conversion to dummy object?,0,0.9935895204544067
368465824,410,devshgraphicsprogramming,2020-01-20T10:13:39Z,what does `insert` return? (just remind me),0,0.976067841053009
368481626,410,devshgraphicsprogramming,2020-01-20T10:46:31Z,"because we need to assume that all the structs we ""share"" and make builtin; will be used to construct bigger things by extensions, other loaders and users. making this (and any other) struct aligned and of correct size (mult of 16), will prevent it from blowing up in our face when we decide to put it in different places, arrays, ubos, ssbos, pcs, etc. and the c++ won't match it byte for byte.",0,0.974450409412384
368481907,410,devshgraphicsprogramming,2020-01-20T10:47:05Z,"yes, well its redundant information at this point, if you already have the whole ds and ds layout.",0,0.9595062136650085
368482574,410,devshgraphicsprogramming,2020-01-20T10:48:29Z,"ah fuck, you were right (i forgot that non indirect does not get affected)... revert the revert",-1,0.979601263999939
368482744,410,devshgraphicsprogramming,2020-01-20T10:48:52Z,?,0,0.9557723999023438
368483037,410,devshgraphicsprogramming,2020-01-20T10:49:36Z,"yes, and then it throws according to c++ spec?",0,0.9925385117530823
368483976,410,devshgraphicsprogramming,2020-01-20T10:51:38Z,glsl code seemed to repeat itself (might be due to presence of pbr shader),0,0.9765363335609436
368484695,410,devshgraphicsprogramming,2020-01-20T10:53:21Z,nice but the mtl glsl built-in stuff (as a class) should be together with the mtl loader and added to the built-ins in the mtl loader's constructor. same for all future loaders.,0,0.890929102897644
368485229,410,devshgraphicsprogramming,2020-01-20T10:54:31Z,don't call pushconstants (can place in ubo or ssbo for large render systems) prefer materialparameters instead.,0,0.9920949339866638
368486433,410,devshgraphicsprogramming,2020-01-20T10:57:06Z,"yes, the uv frag and non-uv frag (both non-pbr) brdf code repeats itself.",0,0.9833558797836304
368487007,410,devshgraphicsprogramming,2020-01-20T10:58:22Z,especially that you've hardcoded the light to be at the camera position (something we want easily overridable),0,0.9856780171394348
368488120,410,devshgraphicsprogramming,2020-01-20T11:00:47Z,"you need to build the `brdf_cos_eval` out of normalized brdfs, so ones where `brdf*cos(theta)` integrated over a hemisphere sums up to 1.0",0,0.9932193160057068
368489555,410,devshgraphicsprogramming,2020-01-20T11:04:04Z,the `kd` needs to be divided by pi and two functions need to be added to our engine-global brdf headers - `lambertian_cos_eval_rec_pi_factored_out` - `lambertian_cos_eval` [code block],0,0.9941945672035217
368490992,410,devshgraphicsprogramming,2020-01-20T11:07:34Z,always put the fresnel in (is the titanfall fresnel renormalization factor applicable ? ),0,0.9944822788238525
368491694,410,devshgraphicsprogramming,2020-01-20T11:09:15Z,"+ do it as a proper mix, so the more fresnel weight on specular, the less diffuse (ambient is equally reflected by diffuse and specular, so fresnel won't affect it and it can be just ""added"" afterwards - don't make it part of diffuse)",0,0.9867954254150391
368492004,410,Crisspl,2020-01-20T11:10:03Z,nothing happens with metadata,0,0.9634885191917419
368492189,410,Crisspl,2020-01-20T11:10:32Z,true if it was successfully inserted,0,0.9675172567367554
368495546,410,devshgraphicsprogramming,2020-01-20T11:19:12Z,"proper normalization for blinn phong (and blinn-phong is the power of ndoth, no reflected light taken into account) is: [a link] (the thing in the middle of the inequality is the actual factor)",0,0.9897526502609253
368503786,410,devshgraphicsprogramming,2020-01-20T11:40:47Z,ndotl,0,0.8208264112472534
368505350,410,Crisspl,2020-01-20T11:44:24Z,why inside them?,0,0.8773581981658936
368510631,410,devshgraphicsprogramming,2020-01-20T11:57:52Z,optimization (blender cycles has it like that too).,0,0.9861463904380798
368510883,410,devshgraphicsprogramming,2020-01-20T11:58:33Z,"hmm ok, we might want to revist that in the far future.",0,0.9622927308082581
368510983,410,devshgraphicsprogramming,2020-01-20T11:58:49Z,thx.,0,0.9803762435913086
368521789,410,Crisspl,2020-01-20T12:26:46Z,"of course they are, they are different shaders",0,0.9438745975494385
368526449,410,Crisspl,2020-01-20T12:38:42Z,override was never used directly in loader to load assets. thats what `interm_getassetinhierarchy` is for. then loader override is used by `iassetmanager::getassetinhierarchy()`. however u're right i should be using overload of `interm_getassetinhierarchy` that let u pass loader override ptr (fixed in next commit),0,0.9928748607635498
368541193,410,devshgraphicsprogramming,2020-01-20T13:15:40Z,"you can make the non-uv version be an override of the uv version, you only need to redefine/override the main/lighting function to not gather the parameters from textures and the fragment_inputs section + delete (just `#define _irr_frag_set3_bindings_defined_` without anything extra) the descriptor set 3 inputs",0,0.9947579503059387
368542407,410,devshgraphicsprogramming,2020-01-20T13:18:24Z,yeah i mean use the function and pass `override` to it,0,0.9855742454528809
368548847,410,Crisspl,2020-01-20T13:32:47Z,thats exactly what it is for a few days now,0,0.971693217754364
368549093,410,Crisspl,2020-01-20T13:33:19Z,i dont know what repeats u're talking about then,-1,0.6035467386245728
368863867,410,devshgraphicsprogramming,2020-01-21T08:29:18Z,`dgdscreen` should be a `mat2x3`,0,0.9914901852607727
368957697,410,devshgraphicsprogramming,2020-01-21T11:52:45Z,"treat `dfdg` like a mat1x3, so `dfdg*dgdscreen` needs to change to a `vec2(dot(dfdg,dgdscreen[0]),dot(dfdg,dgdscreen[1]))`",0,0.9940634369850159
368963621,410,devshgraphicsprogramming,2020-01-21T12:07:40Z,thats why it doesnt compile cause that function is not defined (commented out) xd,0,0.9568841457366943
369049784,410,devshgraphicsprogramming,2020-01-21T14:57:39Z,"still, why the if and not the switch directly?",0,0.9811590909957886
369053850,410,devshgraphicsprogramming,2020-01-21T15:04:13Z,"ambient does not go into the brdf cos-eval function, its basically an extra light (and you assume the bsdf passes white furnace test )m so put it into light eval function",0,0.9847598671913147
369054562,410,devshgraphicsprogramming,2020-01-21T15:05:27Z,"don't you remember our pbr brdf explorer, everything gets done in terms of `vdoth` (or `ldoth` same thing) so its symmetrical! this is why i insisted on providing and using builtins so one can't fuck this up.",-1,0.6864132285118103
369054787,410,devshgraphicsprogramming,2020-01-21T15:05:51Z,diffuse get from a lambertian header (needs the 1/pi factor),0,0.9903102517127991
369055083,410,devshgraphicsprogramming,2020-01-21T15:06:19Z,you need a header with normalized phong and use it here.,0,0.9863277673721313
369055365,410,devshgraphicsprogramming,2020-01-21T15:06:45Z,same as [a link],0,0.9871845841407776
369055531,410,devshgraphicsprogramming,2020-01-21T15:07:01Z,"nromalize the specular, again.",0,0.8886990547180176
369056479,410,devshgraphicsprogramming,2020-01-21T15:08:41Z,"the ""ambient"" is not a extra light factor added to the current light with its own direction, ambient is an area light coming from all directions, hence ambient is unaffected by fresnel (if you assume fresnel passes white furnace, which it should).",0,0.9910448789596558
369057072,410,devshgraphicsprogramming,2020-01-21T15:09:41Z,why would it be computed twice?,0,0.9683276414871216
369057565,410,devshgraphicsprogramming,2020-01-21T15:10:30Z,shouldn't most of the scope of this if-statement come form a builtin?,0,0.9940243363380432
369057933,410,devshgraphicsprogramming,2020-01-21T15:11:03Z,`computelighting` is actually supposed to call the `irr_bsdf_cos_eval` function,0,0.9939776659011841
369058347,410,devshgraphicsprogramming,2020-01-21T15:11:43Z,"in the per-shader built-ins (which are not in built-in glsl headers) you gon't need to prefix the names with `irr_glsl_`, just `irr_` will do",0,0.9953550100326538
369064301,410,devshgraphicsprogramming,2020-01-21T15:21:28Z,"ugh, i made a mistake, guiding you this way. `mix` is inappropriate. actually diffuse should be symmetrical, so its two fresnels! (just like in brdf explorer from last summer) one with `ldoth` and another with `vdoth` and the correction factor. then the specular has its own fresnel factored in, and you add that to a diffuse modulated by fresnel diffuse factor (with correction). p.s. ambient shouldn't be there.",-1,0.8845082521438599
369065139,410,devshgraphicsprogramming,2020-01-21T15:22:47Z,"you shouldn't be evaluating the lighting (even the attentuation or intensity) inside the `main` function, all lights need to be wholly evaluated inside `irr_bsdf_cos_eval`.",0,0.9928627610206604
369075945,410,devshgraphicsprogramming,2020-01-21T15:40:00Z,"(facepalm) the alpha (opacity) is `fresnel(ni, ndotv)`, why on earth would the fresnel transmittance depend on your light position? its only the view position that determines how much you can see through. p.s. this means that your blending equation needs to be a premultiplied alpha one (different fresnel factors on reflected color than just simply `1-transmission`), so pipeline needs blend state equivalent to: [code block]",0,0.9894654750823975
369079752,410,devshgraphicsprogramming,2020-01-21T15:46:01Z,the brdf code now.,0,0.9846311211585999
369079873,410,devshgraphicsprogramming,2020-01-21T15:46:11Z,done?,0,0.9815027713775635
369157289,410,Crisspl,2020-01-21T18:04:40Z,"no, i meant this function doesnt compile. the shader compiles because it's commented out. it's not used anyway but shaderc still tries to compile it",0,0.8999451398849487
369175258,410,Crisspl,2020-01-21T18:41:16Z,"hm, then i'd say we shouldnt normalize `l` vector in `irr_glsl_calcbsdfisotropicparams()` because otherwise `irr_bsdf_cos_eval()` has no way to take distance from light",0,0.9874026775360107
369190488,410,Crisspl,2020-01-21T19:12:20Z,or better: normalize but add field `invlenl2` to structure,0,0.9947968125343323
369199885,410,Crisspl,2020-01-21T19:31:37Z,that actually would mean i can multiply just of those by 2 and get the same. did you mean `ndotl` and `ndotv`? (thats how we do in brdf explorer),0,0.9903467297554016
369215916,410,Crisspl,2020-01-21T20:04:55Z,"user might want to use parameters got from `irr_glsl_calcbsdfisotropicparams` (called in `computelighting`), just like in this case. so im making `out irr_glsl_bsdfisotropicparams params` parameter for `computelighting`, ok?",0,0.9953809976577759
369250871,410,devshgraphicsprogramming,2020-01-21T21:25:22Z,well you need to uncomment irr_glsl_applyscreenspacechainrule3d3 and define it and it will work.,0,0.9914860129356384
369251837,410,devshgraphicsprogramming,2020-01-21T21:27:33Z,but you know the `l` you've passed to irr_glsl_calcbsdfisotropicparams as input ;) thats not getting modified.,1,0.982094943523407
369269138,410,devshgraphicsprogramming,2020-01-21T22:07:15Z,"for what exactly? but irr_glsl_bsdfisotropicparams gives you brdf parameters for a particular light interaction, and `computelighting` will compute the interactions with many lights!",0,0.9607090950012207
369269492,410,devshgraphicsprogramming,2020-01-21T22:08:09Z,yeah both ndotl and ndotv for diffuse only hdotl for specular,0,0.9803006052970886
369290488,410,Crisspl,2020-01-21T23:01:47Z,"yes, but i dont know it inside `bsdf_cos_eval`. if u want attenuation factor in `irr_bsdf_cos_eval` then length of l must be known in there. as for now i made `invlenl2` field in the struct, will commit in up to 1h",0,0.993696391582489
369291462,410,Crisspl,2020-01-21T23:04:44Z,"now it's used to compute alpha (illum models 4,6,7,9) oh, right... any ideas?",0,0.9553402662277222
369292262,410,Crisspl,2020-01-21T23:07:09Z,you know what is `n`? i found original article u took the latex from and even the normalization factor derivation paper and nobody defines `n`!,0,0.8806614875793457
369292776,410,Crisspl,2020-01-21T23:08:48Z,"idk, i wouldnt even think about it xd sorry",-1,0.9920961856842041
369297174,410,devshgraphicsprogramming,2020-01-21T23:22:02Z,"attenuation of a light is not part of a brdf/bsdf, i thought that was clear?",0,0.9775781631469727
369297463,410,devshgraphicsprogramming,2020-01-21T23:22:55Z,"you can return the surface interaction, but not the brdf params ;)",1,0.8214474320411682
369297697,410,devshgraphicsprogramming,2020-01-21T23:23:36Z,"n is the specular power, iirc (`params.ns`)",0,0.9918270111083984
369301423,410,Crisspl,2020-01-21T23:36:14Z,"yea, i know, turns out i misunderstood your requirements",0,0.4933062195777893
369303252,410,devshgraphicsprogramming,2020-01-21T23:42:32Z,"`brdf_cos == brdf()*cos(theta)` brdf only has the material's probability of reflecting incoming photons in a given direction cos(theta)/lightdistance2 is the solidangle factor for a point light (how small it appears at a given angle and distance - its an oxymoron cause point light doesn't have a size, but for a small disk that's what it would be)",0,0.9887415766716003
369303453,410,devshgraphicsprogramming,2020-01-21T23:43:19Z,"area lights, line lights, environment maps, etc. they have different solidangle factors (albeit all include `cos(theta)` thats why we put it in `brdf_cos` functions)",0,0.9932490587234497
369456815,410,devshgraphicsprogramming,2020-01-22T09:44:27Z,use and provide a built-in/constant for `pi` and `reciprocal_pi` (`irr_glsl_` prefix required too),0,0.9947493672370911
369457324,410,devshgraphicsprogramming,2020-01-22T09:45:31Z,do `dpdscreen` as a `mat2x3` and `dhdscreen` as a `vec2`,0,0.9925058484077454
369457968,410,devshgraphicsprogramming,2020-01-22T09:46:46Z,"this is ambient, ambient does not go into brdf",0,0.978213906288147
369458461,410,devshgraphicsprogramming,2020-01-22T09:47:46Z,and provide from a bsdf/brdf built-in header as a cook-torrance-like function (so fresnel goes inside),0,0.9945251941680908
369458919,410,devshgraphicsprogramming,2020-01-22T09:48:39Z,light parameters are not part of brdf,0,0.9831732511520386
369459956,410,devshgraphicsprogramming,2020-01-22T09:50:40Z,"wrong, its a fresnel on `vdotn` (which is in the `interaction`)",0,0.9571484327316284
369461592,410,devshgraphicsprogramming,2020-01-22T09:53:48Z,if you use a non-fresnel alpha (comes from `params.d` or texture) then i'd modulate the ambient in the light eval and the diffuse in the `brdf_cos_eval` by it (even though that approach is not exactly pbr) in all the lighting models.,0,0.9930269122123718
369462754,410,devshgraphicsprogramming,2020-01-22T09:55:55Z,"maybe you wouldn't need two reimplementations of `irr_bsdf_cos_eval` if you created an `irr_fetch_material_parameters` and delegated the choice of fetching `ka,ks,ns` from texture or constants and normal/bump mapping to that function instead",0,0.9955847859382629
369472090,410,devshgraphicsprogramming,2020-01-22T10:13:11Z,built it more like [a link] i want the built-in brdf/bsdf functions to provide the `irr_glsl_*model_name*_cos_eval` function and 2 others (build more),0,0.980328381061554
370999560,410,devshgraphicsprogramming,2020-01-26T13:43:12Z,"wait, what's going on?",0,0.8717901706695557
371007135,410,Crisspl,2020-01-26T15:22:10Z,"nothing, just deleted code not used any more",0,0.8489298820495605
373099792,410,Crisspl,2020-01-30T17:51:29Z,solved with a simple `#ifndef _no_uv`,0,0.993822455406189
373123008,410,Crisspl,2020-01-30T18:39:17Z,"no, only in case of offset parameters, lengths are taken care of. [a link] variant (5)",0,0.9930799603462219
373180102,410,Crisspl,2020-01-30T20:36:06Z,"yea, i wrongly understood this ""transmission filter"" before (now it's not used anyway though). look at `8 real windshield` at [a link] . i don't really understand what does it mean that ""the material is not dissolved"" but ""filters of colorizes objects that are seen through it"" at the same time. should assume that the material is fully transparent as soon as `tf` is defined in mtl, but use some constant non-zero alpha for blending framebuffer color with `tf` (transmission filter) color?",0,0.8945949673652649
373187838,410,Crisspl,2020-01-30T20:53:48Z,"won't it be problematic when every function has ndotl inside? for example in case of cook-torrance-like thing, when both ndf and geometric term includes ndotl, then i'm getting specular factored by ndotl^2. sorry, i dont get your idea about cos factor inside, could u explain more?",-1,0.9727343320846558
373189673,410,Crisspl,2020-01-30T20:57:37Z,do you mean another function that looks like [code block] ?,0,0.9938342571258545
373198152,410,devshgraphicsprogramming,2020-01-30T21:17:25Z,why is it not working with const anymore?,0,0.9567418098449707
373198570,410,devshgraphicsprogramming,2020-01-30T21:18:24Z,include the normalization factor here.,0,0.9888455271720886
373199099,410,devshgraphicsprogramming,2020-01-30T21:19:36Z,why is the loader in the front-end includes?,0,0.9823790192604065
373200268,410,devshgraphicsprogramming,2020-01-30T21:22:13Z,?,0,0.9557723999023438
373205471,410,devshgraphicsprogramming,2020-01-30T21:34:26Z,this is debug rihgt?,0,0.9904831647872925
373205964,410,devshgraphicsprogramming,2020-01-30T21:35:42Z,pretty much.,0,0.9089773297309875
373211881,410,devshgraphicsprogramming,2020-01-30T21:49:22Z,"the lighting integral (for a point) is `integrate_over_hemisphere{incominglightdistribution(lightdirection)*brdf(observer,lightdirection,parameters)*cos(lightdirection),over all light directions}` the idea is that we split the integrand into two parts, one of which is the brdf and foreshortening term (ndotl), the other is the light distribution. we want to split that integral in 2 not 3 so `cos(theta)` has to go together with something, either the light distribution or the brdf. this is a good heuristic for multiple importance sampling, as we'll be sometimes sampling (picking directions) the points on area lights and sometimes the brdfs (directions with highest values). problem is that lights are well defined shapes which don't have nice contours on a hemisphere, and its hard to compute their areas (solid angles) as a function of (u,v) coordinates so its insanely hard to invert such a function to get uniform sampling. so just importance sampling an integrand close to 1 is near impossible for most shapes because of the contours of the integration domain, let alone when an integrand is cos(theta). so far triangles without the foreshortening (projection) are the only shape you can importance sample on a sphere under arbitrary transformations. furthermore squares, elliptical disks are only sampleable without a transform that includes shear. finally cylinders and spheres are only sampleable without a transform that includes shear or non-uniform scale. only one paper mentions sampling ""projected"" spherical caps (with the `cos` term). so overall it makes more sense to stick the `cos` together with the brdf, especially since for cook-torrance there is already a `4*ndotl*ndotv` in the denominator, so it will cancel out.",0,0.6249004006385803
373212325,410,devshgraphicsprogramming,2020-01-30T21:50:20Z,funny cause that same page says **exceptions** and notes that it will throw is `pos1` is out of range. so check and avoid a throw.,0,0.6889271140098572
373213537,410,devshgraphicsprogramming,2020-01-30T21:53:07Z,what's going on here?,0,0.9715924859046936
373214666,410,devshgraphicsprogramming,2020-01-30T21:55:32Z,?,0,0.9557723999023438
373215147,410,devshgraphicsprogramming,2020-01-30T21:56:36Z,?,0,0.9557723999023438
373217711,410,devshgraphicsprogramming,2020-01-30T22:02:30Z,"well that spec is so badly written i have no idea what it was supposed to stand for. my guess would be some sort of attenuation value per-unit-thickness-of-object. so you're bascailly looking at [code block] it would be possible to implement with ""dual source blending"", but obviously no idea what the resultant alpha should be. since its impossible to render in a raster pipeline and only using a ""sane"" 3 or 4 channel single attachment framebuffer, we shoudl issue a warning that this parameter and light model has been detected, fall-back to something useful, but still populate the descriptor set with the correct image/texture and provide as much data in the metadata as possible.",-1,0.6963568329811096
373269368,410,Crisspl,2020-01-31T00:46:46Z,"`pos1` is first param so it makes sense to check in case we assume there might be `_glsl` string with no '#' in it. if thats what u meant i just got confused by ""(that you still have 8 characters in the string left)""",0,0.9528760313987732
373279479,410,Crisspl,2020-01-31T01:29:24Z,just deleted some commented-out code i should have deleted a while ago,0,0.986483633518219
373279518,410,Crisspl,2020-01-31T01:29:30Z,yea xd,0,0.7047150731086731
373279958,410,Crisspl,2020-01-31T01:31:13Z,"i dont understand. u mean in `include/`? it's not, irrlicht target just have `src/` in include search dirs, it's nothing new",0,0.6707930564880371
373280333,410,Crisspl,2020-01-31T01:33:00Z,because there must be a way to `getglslcompiler()->getincludehandler()->addbuiltinincludeloader(...)`,0,0.9931252002716064
373666971,410,devshgraphicsprogramming,2020-01-31T20:16:25Z,"bascailly make sure that it does not throw no matter what `_glsl` string we pass to it, empty or shorter than 8 characters, etc.",-1,0.5084657073020935
373667153,410,devshgraphicsprogramming,2020-01-31T20:16:52Z,i see.,0,0.95963454246521
373667268,410,devshgraphicsprogramming,2020-01-31T20:17:11Z,i see.,0,0.95963454246521
373667681,410,devshgraphicsprogramming,2020-01-31T20:18:16Z,vec3 ior?,0,0.9813860058784485
373671510,410,devshgraphicsprogramming,2020-01-31T20:28:49Z,you can get that from isotropic paramters i think?,0,0.9920880198478699
373785288,410,Crisspl,2020-02-01T15:22:59Z,thats the whole point of it that i cant get isotropic parameters in main() [a link],0,0.9762484431266785
373785316,410,Crisspl,2020-02-01T15:23:44Z,fresnel_dielectric takes ior as a single value,0,0.9881162643432617
374051186,410,devshgraphicsprogramming,2020-02-03T11:27:08Z,maybe we should add `bytesize` to augment the `relbyteoffset` of the `shdrin.descriptorsection.uniformbufferobject` ? then you wouldn't need all the matrix size constants above.,0,0.9954946041107178
374051635,410,devshgraphicsprogramming,2020-02-03T11:28:19Z,"why are you even bothering with cpu objects here, just create gpu descriptor set nr. 1 directly.",0,0.9724903106689453
374054028,410,devshgraphicsprogramming,2020-02-03T11:34:18Z,"ok, but there's really no reaon for it to not support a per-rgb channel ior value (the fresnel function itself)",0,0.9030175805091858
374054579,410,devshgraphicsprogramming,2020-02-03T11:35:42Z,"yeah, you're right about the comment, although i should make a note to myself to optimize after i merge (`vdotn` could be stored in the surface interaction, since its the same for every light)",0,0.908488929271698
374060457,410,devshgraphicsprogramming,2020-02-03T11:50:33Z,there's no `core::matrix3x4simd::pointer()` ?,0,0.9936932325363159
374065813,410,devshgraphicsprogramming,2020-02-03T12:04:42Z,i think your condition is a typo here.,0,0.9364499449729919
374067243,410,devshgraphicsprogramming,2020-02-03T12:08:18Z,also why is a cubemap in descriptor set 3? should be at least 2 or 1.,0,0.9924458861351013
374067639,410,devshgraphicsprogramming,2020-02-03T12:09:16Z,"btw the already provided inputs (push constants, material textures) shouldn't be in this metadata.",0,0.9920353293418884
374068319,410,devshgraphicsprogramming,2020-02-03T12:11:01Z,is it clear?,0,0.9909580945968628
374069645,410,devshgraphicsprogramming,2020-02-03T12:14:25Z,this should be added onto the end return value of `irr_computelighting`,0,0.9942253232002258
374069677,410,devshgraphicsprogramming,2020-02-03T12:14:30Z,just multiply `color` by it here.,0,0.9824123978614807
374070270,410,devshgraphicsprogramming,2020-02-03T12:16:08Z,still a todo,0,0.948638379573822
374074573,410,devshgraphicsprogramming,2020-02-03T12:27:04Z,?,0,0.9557723999023438
374074854,410,devshgraphicsprogramming,2020-02-03T12:27:45Z,did you move this?,0,0.9877701997756958
374075444,410,devshgraphicsprogramming,2020-02-03T12:29:09Z,did you implement the warning and fallback?,0,0.9880168437957764
374075580,410,devshgraphicsprogramming,2020-02-03T12:29:32Z,make a mental note of this for next pr.,0,0.9750059247016907
374119974,410,Crisspl,2020-02-03T14:06:25Z,"yea, well im not sure why lagarde made it like this, i'm making it vec3",0,0.48623326420783997
374123909,410,Crisspl,2020-02-03T14:14:00Z,"no, it's ok. why? what why? oh, ok, fine",0,0.5165225863456726
374126152,410,Crisspl,2020-02-03T14:18:18Z,yea,0,0.9144599437713623
374132168,410,Crisspl,2020-02-03T14:28:52Z,"kinda, i guess, check out what i have now (blinn_phong, lambertian, oren_nayar cos_eval functions). i dont really know what is this incoming light distribution part. also i guess u'd like more `cos_eval` functions as builtins, i dont know which ones",0,0.8741552829742432
374152326,410,Crisspl,2020-02-03T15:03:20Z,so should i have path to refl map in metadata instead + ecsi_ entry?,0,0.9950900077819824
374165056,410,devshgraphicsprogramming,2020-02-03T15:24:42Z,because he optimized to extremes,0,0.9865226149559021
374166062,410,devshgraphicsprogramming,2020-02-03T15:26:15Z,oh its just a badly named enum does mtl provide the cubemap or does the user provide the cubemap?,-1,0.7704499363899231
374171328,410,Crisspl,2020-02-03T15:34:51Z,"mtl provides cubemap a little, `emp_refl_posx`, `emp_refl_negx`, etc.. are for loading images (see `cgraphicspipelineloadermtl::readtexture()`), then resulting cubemap image view goes to index `[emp_refl_posx]` of array resulting from `cgraphicspipelineloadermtl::loadimages()`",0,0.9941282272338867
374181343,410,devshgraphicsprogramming,2020-02-03T15:51:25Z,great then we don't need the cubemap in the pipeline metadata that standardised metadata is only for things we need to provide to make the shader work (not to change it a bit).,0,0.6393146514892578
374191556,410,Crisspl,2020-02-03T16:07:59Z,"well, if u want it to be in set 1 or 2 then sure we do",0,0.986368715763092
374194522,410,devshgraphicsprogramming,2020-02-03T16:13:02Z,"well since mtl provides the environment map, it can be in set 3",0,0.9821341633796692
374201989,410,Crisspl,2020-02-03T16:25:51Z,"yea, in upcoming commit",0,0.9822847843170166
374540497,410,devshgraphicsprogramming,2020-02-04T08:51:47Z,perfectly valid solution for default cpu to gpu asset converter,1,0.7427563667297363
374540777,410,devshgraphicsprogramming,2020-02-04T08:52:25Z,this can remain a float (all three channels are identical),0,0.9841001033782959
374575951,410,devshgraphicsprogramming,2020-02-04T10:02:41Z,maybe sizeof the matrix types?,0,0.991077184677124
374576073,410,devshgraphicsprogramming,2020-02-04T10:02:56Z,or sizeof the struct members?,0,0.9921063184738159
374579363,410,devshgraphicsprogramming,2020-02-04T10:09:19Z,i repeat the question,0,0.8777539134025574
374587295,410,devshgraphicsprogramming,2020-02-04T10:24:30Z,"its the shape all the lights make or an environment map (for ibl) basically brdf + cos functions i want: - lambertian - orren nayar - smooth specular (basically delta distribution given by `reflect` weighted by complex ior fresnel) - normalized phong with fresnel - ggx with correlated smith shadowing (same stuff as brdf explorer) - beckmann with the best geometry term you can find - ashkhim shirley anisortopic with the best geometry term you can find bsdf + cos functions (not in this pr): - smooth dielectric (basically two delta distributions with centers given by `reflect` and `refract`, mixed together by the fresnel) - thin dielectric (no refraction, but need to account for multiple fresnel and color shift) - rough dielectric with ggx - rough dielectric with beckmann - rough dielectric with ashkhin shirley p.s. for ahskmin shirley anisotropic use roughnesses (invert them like in brdf explorer), and for phong invert the roughness into the specular exponent.",0,0.9837489128112793
375436916,410,Crisspl,2020-02-05T18:41:54Z,"oh, ok then",0,0.9349813461303711
375463948,410,Crisspl,2020-02-05T19:33:18Z,"yea, i figured out how to use it and made use of `calculatesmoothnormals()`",0,0.9587222933769226
375770508,410,devshgraphicsprogramming,2020-02-06T11:02:17Z,?,0,0.9557723999023438
375771608,410,devshgraphicsprogramming,2020-02-06T11:05:09Z,so what's this lambda still doing here?,0,0.987511396408081
375773314,410,devshgraphicsprogramming,2020-02-06T11:09:04Z,?,0,0.9557723999023438
375952102,410,Crisspl,2020-02-06T16:45:25Z,what is delta distribution?,0,0.9904696941375732
375961665,410,Crisspl,2020-02-06T17:01:22Z,"sorry, didnt push yesterday",-1,0.9876503348350525
375962572,410,Crisspl,2020-02-06T17:02:52Z,imo would seem a little weird that shader is builtin in the cache and other components of retval are not,-1,0.9500094056129456
375962836,410,Crisspl,2020-02-06T17:03:18Z,"done, no more cpu ubo",0,0.8949740529060364
376037666,410,devshgraphicsprogramming,2020-02-06T19:31:26Z,"# was is das [a link] basically its 0 everywhere except at the center, at the center its undefined (you can return inf if argument==center). as a probability distribution it means there is 0 probability of getting any other random value than the center one, so your `sample` brdf function should always return the center coordinate with a probability weight of `max(cos(theta),0.0)` (original brdf / probability of sampling = delta/delta = 1, but then remember its `brdf_cos`). the most important part is the sampling property, you stick it as a product with another function inside any integral, the solution is the other function's value at the center of the dirac delta (without any gain or loss). this means that a mirror is a delta distribution centered around the reflected view-vector, so it basically tells you to sample the light distribution in only one place (the exact reflection). a smooth dielectric is two deltas, one at reflection vector, one at refraction vector, but they obviously have to be weighted together by the fresnel (not that it matters for the eval function). # more in depth about sampling multiple deltas however when sampling, you need to compute fresnel, and pick either to reflect or refract based on the input random value (use only one dimension). you can use the symmetry property of the bsdf and notice that it has to have the same values when you switch the observer and the light positions around, so it is possible to ""find"" the centers of the deltas given a viewer position. for a dielectric, there is the reflection where`ndoth` has to be 0, so h=n, and therefore l=-v the refraction you can also calculate in reverse (i'd do your own function instead of calling `refract`). [a link] due to symmetry, you can know the fresnel on a smooth dielectric by just knowing the viewer position (fresnel of `ndotv` will be the same as fresnel of `ndotl`, since v fixes reflective and refractive l vectors, and reflective fresnel fixes the transmittance). best choice is to pick to refract when `randomsample.x>fresnel` then the probability of picking the refracted ray is `1.0-fresnel` and reflected is `fresnel` which is exactly the same as their weights in the bsdf meaning that for the probability weight of the sampling function they cancel out and you return `abs(cos(theta),0.0)` (for bsdfs the foreshortening term is abs not max).",0,0.9894517064094543
376039288,410,devshgraphicsprogramming,2020-02-06T19:34:45Z,"ok lets leave it, fs triangles are dumb to use anyway (now that we have compute)",-1,0.863892138004303
376039725,410,devshgraphicsprogramming,2020-02-06T19:35:39Z,does smith height correlated that we use with ggx make sense with beckmann?,0,0.9931942224502563
376040015,410,devshgraphicsprogramming,2020-02-06T19:36:12Z,"when obj has smooth groups, are you even supposed to check for crease angle?",0,0.9907268285751343
376159941,410,Crisspl,2020-02-07T00:39:04Z,"hm good point, probably not",1,0.7707645893096924
376180490,410,Crisspl,2020-02-07T02:01:18Z,"erm no idea actually, how do i check?",-1,0.8457655310630798
376190809,410,devshgraphicsprogramming,2020-02-07T02:47:55Z,you just return 0.0 all the time,0,0.9771833419799805
376190856,410,devshgraphicsprogramming,2020-02-07T02:48:07Z,return 0.0 all the time,0,0.9811730980873108
376209649,410,devshgraphicsprogramming,2020-02-07T04:28:10Z,skip straight to section 6,0,0.9868011474609375
376210416,410,devshgraphicsprogramming,2020-02-07T04:32:37Z,where you can find height correlated: [a link] heitz weird shit: [a link],-1,0.986965537071228
376215567,410,devshgraphicsprogramming,2020-02-07T05:02:20Z,"basically smith height correlated function always has the same form `1/(1+\biglambda(\omega_o)+\biglambda(\omega_i))` its just that for a different ndf, the `\biglambda` is different (first paped pdf i linked quotes walter 2007 for a rational approximation of this function for beckmann) p.s. we might want to upgrade to height-direction-correlated masking and shadowing at some point",0,0.9882921576499939
376217783,410,devshgraphicsprogramming,2020-02-07T05:15:09Z,`a==ndotsomething*inversesqrt(1-ndotsomething*ndotsomething)/(alpha)` instead of `a==1/(alpha*tan(acos(ndotsomething))`,0,0.9904113411903381
376219214,410,devshgraphicsprogramming,2020-02-07T05:23:38Z,put the walter approximation into a symbolic manipulation package (whatever we used for the fresnel correction last time) and let it simplify it for an equation in terms of `alpha` and `ndotsomething`,0,0.9944539666175842
376614223,410,Crisspl,2020-02-07T21:24:20Z,what xd well thats fine,0,0.745795488357544
376642209,410,devshgraphicsprogramming,2020-02-07T22:44:34Z,yeah basically if you wanted to be anal about it you'd return `params.ndoth!=1.0 ? 0.0:flt_inf` but there's no point in doing that except to waste gpus time.,0,0.7797503471374512
376645786,410,devshgraphicsprogramming,2020-02-07T22:56:21Z,"we factored out the denominator from the denominator for ggx. just like you should do here (albeit not by hand, use sagemath to simplify `1.0/((1.0+l_v+l_l)*4.0*params.ndotv)` in terms of `ndotv` and `ndotl`, so we have a `irr_glsl_ggx_smith_height_correlated_wo_numerator`)",0,0.9931373596191406
376675414,410,Crisspl,2020-02-08T01:32:17Z,"well, i guess sage is bad at this xd for this [code block] i get [code block] [a link] might want to try with mathematica but it doesnt let me create an account/download trial. anyway i just wonder where i got other smiths from because im sure i didnt use any siplifying tool for it yet we have those expressions xd",-1,0.8917602896690369
376700911,410,devshgraphicsprogramming,2020-02-08T10:06:45Z,i simplified for you,0,0.8140284419059753
376726585,410,Crisspl,2020-02-08T18:45:13Z,"ok, their shadowing term is cumbersome because it requires precomputing integrals (if curious see section 4.2, especially `g(k)`, and section 5.2). however it's very general and apparently can be used with any ndf, so might get useful some day",0,0.9105643630027771
376727782,410,devshgraphicsprogramming,2020-02-08T19:08:21Z,"we don't care about ahikhmin-shirley enough to devote time to this, just slap on the anisotropic ggx shadowing and make a note that its wrong",-1,0.5414637923240662
413270255,474,devshgraphicsprogramming,2020-04-22T19:42:04Z,pretty path,0,0.8927273154258728
413282230,474,devshgraphicsprogramming,2020-04-22T19:55:37Z,this needs to go somewhere else and needs a definition for each of the `float` to `vec4` types,0,0.9943443536758423
414827984,474,devshgraphicsprogramming,2020-04-24T19:58:07Z,fragmentation,0,0.9509199857711792
416053604,474,devshgraphicsprogramming,2020-04-27T18:33:56Z,use environment variable `irr_override_device_extension_list` or something like that [a link],0,0.9942512512207031
416085678,474,devshgraphicsprogramming,2020-04-27T19:23:21Z,to override the extension list we get from opengl driver in `copengldriver` or `copenglextensionhandler`,0,0.9951751232147217
416154804,474,devshgraphicsprogramming,2020-04-27T21:16:49Z,btw overloads are safe now!,1,0.6029229164123535
416155047,474,devshgraphicsprogramming,2020-04-27T21:17:14Z,need more semantics about what the `/6/6/7/8/pagetable/physpgtex/getpgtabszlog2/getphyspgtexszrcp/getvtexszrcp/getphysicalidforlayer` mean...,0,0.99162757396698
416155186,474,devshgraphicsprogramming,2020-04-27T21:17:31Z,is the reason,0,0.9087170362472534
416939601,474,devshgraphicsprogramming,2020-04-28T21:38:17Z,i think `swap` is default behavior of move ctors,0,0.9862217307090759
416981344,474,devshgraphicsprogramming,2020-04-28T23:20:15Z,these functions need to move to a different header,0,0.9909443855285645
417355857,474,devshgraphicsprogramming,2020-04-29T14:24:04Z,i need you to fix this and read the extension list in `copengldriver` from env-var if such is set,0,0.9888547658920288
417360110,474,devshgraphicsprogramming,2020-04-29T14:29:17Z,still an issue,0,0.9333031177520752
417361717,474,devshgraphicsprogramming,2020-04-29T14:31:18Z,why are packing offsets a constant array!? they were supposed to be ssbo!,-1,0.5403953194618225
417367611,474,devshgraphicsprogramming,2020-04-29T14:38:44Z,why is the assignment of bits variable? shouldn't it be constant!?,0,0.9197134375572205
417368785,474,devshgraphicsprogramming,2020-04-29T14:40:07Z,didnt my final solution shader look differently here?,0,0.9837217926979065
417369463,474,devshgraphicsprogramming,2020-04-29T14:40:58Z,if they came from ssbo then you could collpase these lines [code block] into less,0,0.9926527738571167
417370735,474,devshgraphicsprogramming,2020-04-29T14:42:26Z,change the name of this define into something prefixed and indicating semantics clearly,0,0.9915659427642822
417373671,474,devshgraphicsprogramming,2020-04-29T14:46:10Z,i think you have redundant arguments here,0,0.6154912710189819
417376982,474,devshgraphicsprogramming,2020-04-29T14:50:26Z,where's the ssbo with the layer to format lut ? and ubo with [code block] ?,0,0.9942700862884521
417377505,474,devshgraphicsprogramming,2020-04-29T14:51:07Z,still!,0,0.4677163064479828
417377884,474,devshgraphicsprogramming,2020-04-29T14:51:33Z,you can remove that comment,0,0.9848122596740723
417379613,474,devshgraphicsprogramming,2020-04-29T14:53:44Z,none of the headers have header guards nothing is overridable,0,0.9740221500396729
417381673,474,devshgraphicsprogramming,2020-04-29T14:56:20Z,what is `irr_glsl_vt_layer2pid` ?,0,0.9940126538276672
417384209,474,devshgraphicsprogramming,2020-04-29T14:59:21Z,"page table does not have different sizes depending on formatid.. because page table is a 2d array and page size is fixed for all formats, also this value could comfortably come from ubo or ssbo",0,0.9868178367614746
417387500,474,devshgraphicsprogramming,2020-04-29T15:03:47Z,ok i see if could easily be a constant,0,0.9843848943710327
417388076,474,devshgraphicsprogramming,2020-04-29T15:04:36Z,"these shouldn't come from an include path, but it should be assumed that user has defined these functions/macros in advance before including",0,0.9933133721351624
417409108,474,devshgraphicsprogramming,2020-04-29T15:32:17Z,no need for the args on the path,0,0.9782424569129944
417409791,474,devshgraphicsprogramming,2020-04-29T15:33:11Z,"you could just provide sane defaults here, and let user override or if providing defaults don't really make sense, you could check if user has defined them and if not emit an `#error`",0,0.9936044812202454
417411754,474,devshgraphicsprogramming,2020-04-29T15:35:55Z,"why is it global?? you could have made your `irr_sample_*(coord)` functions as `irr_sample_*(coord,derivatives)`",0,0.9933241009712219
417413717,474,devshgraphicsprogramming,2020-04-29T15:38:27Z,"the lut is per layer of the page table, so either its open-ended or exactly the number of layers (`sizeof(layer2pid.lut)==texturesize(pagetable,0).z`)",0,0.9937019348144531
417415043,474,devshgraphicsprogramming,2020-04-29T15:40:14Z,"page size is constant, because page table is a 2d array that would mean that the virtual texture reciprocal size is identical always (constant/uniform not depending on formatid)",0,0.9894939064979553
417415600,474,devshgraphicsprogramming,2020-04-29T15:41:00Z,because the page table is a 2d array that would mean that its size's logarithm is identical always (constant/uniform not depending on formatid),0,0.9900246858596802
417418060,474,devshgraphicsprogramming,2020-04-29T15:44:18Z,"put the `vec2(tile_padding,tile_padding);` in the `packingoffsets` already!",0,0.994335949420929
417418974,474,devshgraphicsprogramming,2020-04-29T15:45:40Z,"this is nasty, get rid of it",-1,0.9908004403114319
417419204,474,devshgraphicsprogramming,2020-04-29T15:45:58Z,`pgtab_layers_per_format` shouldn't exist anymore,0,0.9931227564811707
417420088,474,devshgraphicsprogramming,2020-04-29T15:47:12Z,the virtualtexture class should compute this for you from the `pgtab_sz_log2` or is should compute the `pgtab_sz_log2` given `max_allocatable_tex_sz_log2 `,0,0.9955106973648071
417421578,474,devshgraphicsprogramming,2020-04-29T15:49:14Z,"this is a very sexy api, well dome.",1,0.9800381064414978
417423161,474,devshgraphicsprogramming,2020-04-29T15:51:24Z,the vt class should also make and give you the samplers that you need to use with the format views,0,0.9926040768623352
417425000,474,devshgraphicsprogramming,2020-04-29T15:54:01Z,this needs to become a `static` method of `icpuvirtualtexture`,0,0.9937740564346313
417426309,474,devshgraphicsprogramming,2020-04-29T15:55:48Z,`pgtab_sz_log2` is constant for all layers,0,0.9941340088844299
417426784,474,devshgraphicsprogramming,2020-04-29T15:56:26Z,"also mapping is layer->viewformat index (separate counting from 0 for int,uint,float/norm format meta-classes)",0,0.9928191304206848
417427430,474,devshgraphicsprogramming,2020-04-29T15:57:16Z,you should probably get rid of this cause its meaningless. you could however replace with `page_table_layers` or something similar,0,0.9802651405334473
417427688,474,devshgraphicsprogramming,2020-04-29T15:57:40Z,"because page size is constant for all formats, so is `vtex_sz_rcp`",0,0.9944398403167725
417432177,474,devshgraphicsprogramming,2020-04-29T16:03:57Z,you could of course store `phys_pg_tex_sz_rcp[3][max_format_views_of_format_meta_class]` but it would be a bit unwieldy because you'd need to do: [code block] for an easier solution you could put the array in an ssbo together with the lut and store `phys_pg_tex_sz_rcp[page_table_layers]` [code block],0,0.9919036030769348
417432245,474,devshgraphicsprogramming,2020-04-29T16:04:04Z,"this might need to change, see [a link]",0,0.9874433875083923
417436063,474,devshgraphicsprogramming,2020-04-29T16:09:39Z,this needs to be called `irr_glsl_vtexturegrad` and `irr_glsl_vtexturegrad` needs to become something else (maybe `irr_glsl_vtexturegrad_impl`),0,0.9948424696922302
417447883,474,devshgraphicsprogramming,2020-04-29T16:27:11Z,this should probably be renamed to `irr_glsl_vtexture_helper` because its useful for `texturelod` as well,0,0.9942063093185425
417452939,474,devshgraphicsprogramming,2020-04-29T16:34:59Z,"you need a `ivec4 irr_glsl_vtexturelod(in uvec2 _texdata, in vec2 uv, in lod)` and `uvec4 irr_glsl_vtexturelod(in uvec2 _texdata, in vec2 uv, in lod)` as well for integer formats here's my stab at it: [code block]",0,0.9855371117591858
417454581,474,devshgraphicsprogramming,2020-04-29T16:37:33Z,"this isn't really relevant to the overall vt api, but why not put everything to do with vt together in one descriptor set?",0,0.9620516300201416
417460434,474,devshgraphicsprogramming,2020-04-29T16:46:32Z,the `ivirtualtexture` should have a method to either hand you a const reference to a struct that matches 1:1 with this ssbo data or write the data to a `void*`,0,0.9944471120834351
417461183,474,devshgraphicsprogramming,2020-04-29T16:47:43Z,something tells me that returning a `const uint32_t*` + size would be a lot cleaner and less lines of code than this,0,0.9828104972839355
417465269,474,devshgraphicsprogramming,2020-04-29T16:53:39Z,"why is this a constexpr? we should support 128,256,512 and 1024 pages.. we shouldn't hardcode page size.",0,0.9392774701118469
417471967,474,devshgraphicsprogramming,2020-04-29T17:03:53Z,this should be a constexpr,0,0.986443042755127
417473664,474,devshgraphicsprogramming,2020-04-29T17:06:33Z,"the sampler is one and the same always (nearest sampling no mip mapping), make it for the user (in the class' constructor)",0,0.9920857548713684
417473865,474,Crisspl,2020-04-29T17:06:49Z,"the only reason it exist is to not create pagetable mip levels that will never be used, so the second option makes most sense",0,0.9906733632087708
417475078,474,Crisspl,2020-04-29T17:08:45Z,just because it's easier this way,0,0.9393479228019714
417480946,474,Crisspl,2020-04-29T17:18:09Z,"it's not page size, it's page size limit (limit log2 is 9 so max page size is 512). iirc our biggest supportable page size was supposed to be 512, dont remember why, i may remember badly",-1,0.5025695562362671
417484350,474,devshgraphicsprogramming,2020-04-29T17:23:44Z,"the samplers are not flexible, there's nothing you can change in them on the user side that would make sense with vt (can't change wrapping, can't change lod parameters, can't change anisotropic mode, can't change trilinear), so you should set them here",0,0.9757088422775269
417484879,474,devshgraphicsprogramming,2020-04-29T17:24:33Z,"[a link] plus integer textures can only use the exact same sampler as pagetable (no interpolation at all, and no mip biases)",0,0.9913620352745056
417485584,474,devshgraphicsprogramming,2020-04-29T17:25:42Z,"all stage flags, we're going to be using vt everywhere",0,0.988396942615509
417486906,474,devshgraphicsprogramming,2020-04-29T17:27:48Z,should be using immutable samplers ;),1,0.8981608748435974
417487623,474,devshgraphicsprogramming,2020-04-29T17:29:01Z,this shouldn't be in the path (really nothing except for page size and padding),0,0.9471147060394287
417487968,474,devshgraphicsprogramming,2020-04-29T17:29:37Z,these you should get from user defines that will be there before the `#include`,0,0.994238018989563
417489844,474,devshgraphicsprogramming,2020-04-29T17:32:28Z,"ok, then compute the pgtab_sz_log2 given max_allocatable_tex_sz_log2",0,0.992923378944397
417490109,474,devshgraphicsprogramming,2020-04-29T17:32:57Z,but if i wanted to do that i would be able to achieve that?,0,0.9863946437835693
417490289,474,devshgraphicsprogramming,2020-04-29T17:33:17Z,"ok, thats fine then.",0,0.8854628205299377
417491304,474,devshgraphicsprogramming,2020-04-29T17:34:52Z,maybe it would be just easier to return a constant reference to `m_layertoviewindexmapping` resetting this should be optional (may have to get/write multiple times),0,0.9943578839302063
417491708,474,devshgraphicsprogramming,2020-04-29T17:35:35Z,we could just remove this and turn `m_layertoviewindexmapping` into a struct,0,0.9949415326118469
417493507,474,devshgraphicsprogramming,2020-04-29T17:38:35Z,this should probably be [code block],0,0.9917340278625488
417501285,474,devshgraphicsprogramming,2020-04-29T17:51:02Z,"since there's a real bound on the number of layers in the page table (256), you could make this a normal `std::array<,maxpagetablelayers>`",0,0.9943867921829224
417503391,474,devshgraphicsprogramming,2020-04-29T17:54:13Z,make the default 7,0,0.9762435555458069
417504241,474,devshgraphicsprogramming,2020-04-29T17:55:30Z,"make the default less than 256 (more like 32), right now you're creating a crazy 64mb texture",-1,0.916759729385376
417514954,474,devshgraphicsprogramming,2020-04-29T18:13:30Z,"you can get the size from the `stexturedata` (original size is saved in there) so you don't need the `const iimage* _img, const iimage::ssubresourcerange& _subres`",0,0.9938961863517761
417515736,474,devshgraphicsprogramming,2020-04-29T18:14:45Z,this doesn't need to be publicly accessible,0,0.9738231301307678
417516129,474,devshgraphicsprogramming,2020-04-29T18:15:28Z,"const reference to a pointer makes no sense, just return the pointer",0,0.9761838912963867
417516549,474,devshgraphicsprogramming,2020-04-29T18:16:06Z,why on earth are you hooking it up like that?,-1,0.8531009554862976
417517877,474,devshgraphicsprogramming,2020-04-29T18:18:24Z,"this needs to go into `base_t::free`, the gpu vt will also do this",0,0.9937299489974976
417862110,474,devshgraphicsprogramming,2020-04-30T09:01:24Z,wait what?,0,0.6356511116027832
417863257,474,devshgraphicsprogramming,2020-04-30T09:03:26Z,these should be constexpr,0,0.980369508266449
417863607,474,devshgraphicsprogramming,2020-04-30T09:04:00Z,constexpr?,0,0.979630708694458
417863849,474,devshgraphicsprogramming,2020-04-30T09:04:23Z,what's going on here?,0,0.9715924859046936
417865565,474,devshgraphicsprogramming,2020-04-30T09:07:18Z,"this is the common part of both shaders, not the frag shader",0,0.9899190664291382
417866538,474,devshgraphicsprogramming,2020-04-30T09:09:01Z,won't that make you insert the shader specific before the common?,0,0.9903138279914856
417867730,474,devshgraphicsprogramming,2020-04-30T09:10:54Z,i really don't like that the bindings given by the `vt` don't use immutable samplers,-1,0.983407199382782
417874598,474,devshgraphicsprogramming,2020-04-30T09:22:41Z,"rename to `createpagetableimage`, cause that's the only capacity you're using it in",0,0.9942177534103394
417875791,474,devshgraphicsprogramming,2020-04-30T09:24:43Z,"this part is common between icpu and igpu classes, only depends on the template parameter, factor it out.",0,0.9919762015342712
417876361,474,devshgraphicsprogramming,2020-04-30T09:25:38Z,"this should not be a `create` but a `get` and the result should be cached, right now i'm forced to call this every single time i want access to the image view and a new one is being created every single time!",0,0.8515225052833557
417876633,474,devshgraphicsprogramming,2020-04-30T09:26:08Z,every single time i get the writes a new page table view is being created! see [a link],0,0.7691734433174133
417876917,474,devshgraphicsprogramming,2020-04-30T09:26:39Z,see [a link] and [a link],0,0.990635335445404
417904472,474,devshgraphicsprogramming,2020-04-30T10:15:39Z,"this is gonna be common to both igpu and icpu vt, the types will just be different, factor it out",0,0.988217294216156
417905535,474,devshgraphicsprogramming,2020-04-30T10:17:32Z,"only do the fill in `_irr_debug` its completely acceptable to have garbage in the page table entries that do not have an allocation (nobody is supposed to query those regions, at all!)",0,0.9903581738471985
417906132,474,devshgraphicsprogramming,2020-04-30T10:18:46Z,see [a link],0,0.9869033098220825
417908497,474,devshgraphicsprogramming,2020-04-30T10:23:13Z,"because you know the max allocatable texture size in the constructor, you also know the max amount of pages (lets' call it `m_maxallocationpagecount`) that could be allocated. so you could preallocate `smart_refctd_dynamic_array`s for the temporary `addrs` and `szs` (`szs` contents would be constant, all 1s) then loops like these would only fill out the `addrs` (if you fill `addrs` entry with the special invalid value, then allocator traits' multi_free will skip freeing it) and then only fire off one `multi_alloc_addr` or `multi_free_addr`",0,0.994103729724884
417909729,474,devshgraphicsprogramming,2020-04-30T10:25:27Z,this should be a `get` and should return a raw-pointer (cause the return value should be cached for all time) see my other comments,0,0.9913523197174072
417911984,474,devshgraphicsprogramming,2020-04-30T10:29:39Z,"since you already have `getlayertoviewindexmapping` this makes one of the functions redunant, instead i propose a single (with `m_layertoviewindexmapping` being an std::array or a struct) [code block]",0,0.9942551255226135
417912365,474,devshgraphicsprogramming,2020-04-30T10:30:22Z,see [a link],0,0.9869033098220825
417912508,474,Crisspl,2020-04-30T10:30:38Z,"right, idk, what i meant with `vt_count` here xd you mean you would like 3 arrays (for float/int/uint)? i think just one is sufficient, user has to know which kind of samplers he wants to use anyway",0,0.9865750670433044
417913790,474,devshgraphicsprogramming,2020-04-30T10:33:03Z,do this only in debug,0,0.9821082353591919
417914018,474,devshgraphicsprogramming,2020-04-30T10:33:28Z,"plus anyway, you're doing it twice... cause you've already done it here? [a link]",0,0.9576820135116577
417914051,474,devshgraphicsprogramming,2020-04-30T10:33:33Z,"plus anyway, you're doing it twice... cause you've already done it here? [a link]",0,0.9576820135116577
417916353,474,devshgraphicsprogramming,2020-04-30T10:37:59Z,"better defaults, see [a link] also `_maxallocatabletexsz_log2` you can work out from `0x1u<<(_pgtabszxy_log2+_pgszxy_log2)`",0,0.9925306439399719
417916606,474,devshgraphicsprogramming,2020-04-30T10:38:28Z,same thing as [a link],0,0.9904307723045349
417917304,474,devshgraphicsprogramming,2020-04-30T10:39:39Z,you can work out `_maxallocatabletexsz_log2` from other parameters,0,0.9942262768745422
417918546,474,devshgraphicsprogramming,2020-04-30T10:41:46Z,"ok i see, you're copying.... but that function shouldn't be public, make it protected in the `ivirtualtexture`",0,0.9811098575592041
417918876,474,devshgraphicsprogramming,2020-04-30T10:42:28Z,if it was a struct or a plain `std::array` it would be easier,0,0.9904178977012634
417922794,474,devshgraphicsprogramming,2020-04-30T10:49:54Z,even a value of 8 would be better because then the page table would fit very nicely in gpu l2 caches (512kb),0,0.9859141111373901
417924213,474,devshgraphicsprogramming,2020-04-30T10:52:44Z,unused function?,0,0.9390808343887329
417925100,474,devshgraphicsprogramming,2020-04-30T10:54:27Z,[a link] weren't you supposed to use this here?,0,0.9899083375930786
417929664,474,devshgraphicsprogramming,2020-04-30T11:03:22Z,why public?,0,0.9416879415512085
417937196,474,devshgraphicsprogramming,2020-04-30T11:19:30Z,use only a `max` assert that `lastfullmip (m_pagetable->getcreationparameters().miplevels)` because if `lastfullmip` is not within page table mipmap chain then you've tried to pack a texture larger than max allocatable size,0,0.9944812059402466
417937490,474,devshgraphicsprogramming,2020-04-30T11:20:07Z,some constexpr values would be nicer than literals,0,0.9811737537384033
417937679,474,devshgraphicsprogramming,2020-04-30T11:20:31Z,its a sum of log2 size of pagetable and page,0,0.9852625131607056
417938638,474,devshgraphicsprogramming,2020-04-30T11:22:29Z,only in debug mode,0,0.9796605706214905
417944241,474,devshgraphicsprogramming,2020-04-30T11:34:00Z,no i mean the complete opposite... one array for all 3 types ;),1,0.9676951766014099
417945507,474,devshgraphicsprogramming,2020-04-30T11:36:29Z,and where are we at with that?,0,0.9905461072921753
417946947,474,devshgraphicsprogramming,2020-04-30T11:39:17Z,won't this break the existing icpuvirtualtexture xd ? all this effort with copy ctors for pool allocators and you do this ;),1,0.961868166923523
417947568,474,devshgraphicsprogramming,2020-04-30T11:40:28Z,you most probably want to fire off a conversion without using asset manager cpu2gpu cache and converting the cpu vt's page table to a dummy object,0,0.9930480122566223
417947738,474,devshgraphicsprogramming,2020-04-30T11:40:50Z,same here as there? [a link],0,0.9902719855308533
417983870,474,Crisspl,2020-04-30T12:49:11Z,it's meant to be number of physical storages (size of `phys_pg_tex_sz_rcp` array),0,0.9928593635559082
418000469,474,devshgraphicsprogramming,2020-04-30T13:15:57Z,"~ these functions shouldn't be public, make the vt classes friends or something ~ ok i see whole class declaration is protected, so its fine",0,0.7523441314697266
418001409,474,devshgraphicsprogramming,2020-04-30T13:17:17Z,anyway there's not much point keeping the mapping of format class->layer here (or at all),0,0.9745152592658997
418002115,474,devshgraphicsprogramming,2020-04-30T13:18:26Z,"i'd assign viewformats (not format classes) to layers, not layers to format classes, this is going to backfire, each layer needs its separate format",0,0.9211375713348389
418002378,474,devshgraphicsprogramming,2020-04-30T13:18:47Z,see [a link],0,0.9869033098220825
418005015,474,devshgraphicsprogramming,2020-04-30T13:22:41Z,where are we on this?,0,0.9822074770927429
418005231,474,devshgraphicsprogramming,2020-04-30T13:23:01Z,these shifts should be contexpr,0,0.9883143901824951
418005976,474,devshgraphicsprogramming,2020-04-30T13:24:04Z,these should be methods of `sphyspgoffset` since the bit assignments should be constexpr,0,0.9942623972892761
418008205,474,devshgraphicsprogramming,2020-04-30T13:27:22Z,this could be a static method if you do [a link],0,0.9935503005981445
418013865,474,devshgraphicsprogramming,2020-04-30T13:35:32Z,"you should only be getting the format class not using the format directly, the image we're packing could have views that we intend to use which are completely different than the format",0,0.9793195128440857
418064940,474,devshgraphicsprogramming,2020-04-30T14:44:55Z,"because `ef_rgba_srgb` and `ef_rgba8_uint` are compatible with each other, i can pack a srgb image while intending to use a uint view. you cannot use the image's format to handle this, `pack` needs to take a list of `viewformats` that we're going to use the image data with (so we only allocate/make resident once, but we'll have multiple vt entries)",0,0.9929433465003967
418065295,474,devshgraphicsprogramming,2020-04-30T14:45:24Z,see [a link],0,0.9869033098220825
418068010,474,devshgraphicsprogramming,2020-04-30T14:48:54Z,"`pack` needs to take an array of view-formats that we'll be using the packed texture with and return a same sized array of `stexturedata` (through a pointer), return type should be void (you can check the success by looking at the array) also for sanity should assert that the output array has been preinitialized with `stexturedata::invalid` this means that `free` would also need to take an array of `stexturedata` and expect the contents to not be `invalid` also see [a link]",0,0.9941504597663879
418073924,474,devshgraphicsprogramming,2020-04-30T14:56:54Z,"basically multiple allocations in vt allocator, only one in physical storage and only one page data upload",0,0.9918111562728882
418074475,474,devshgraphicsprogramming,2020-04-30T14:57:42Z,the need for this is very evident because you'll need to decouple the page table update loop from the physical storage allocator `multi_free_addr`,0,0.9859942197799683
418075130,474,devshgraphicsprogramming,2020-04-30T14:58:32Z,"assert false this should never, ever happen",0,0.930682897567749
418077224,474,Crisspl,2020-04-30T15:01:19Z,"well, yes, functions in ivirtualtexture returns smart_refctd_dynamic_array with sbinding's for layout creation and swritedescriptorsets's for ds creation. then you can do with it whatever you want. now i think it would be easier to use if filled given structs array as output and returned element count though",0,0.981702983379364
418080322,474,devshgraphicsprogramming,2020-04-30T15:05:49Z,"the `core::address_allocator_traits ::multi_alloc_addr(storage->tilealctr` is also common code, you know how large the biggest texture will be so you can preallocate temporary arrays as members large enough to hold the output, size and alignment (for tiles size==alignment==1) ~~furthermore you can first try and allocate the physical tiles, then if you fail you only need to free them and return (else actually go to the physical layer choice step), unlike now when its quite hard and laborious to clean up in event of a failure (you avoid copying over image data if you've failed to allocate).~~",0,0.7239172458648682
418082093,474,devshgraphicsprogramming,2020-04-30T15:08:12Z,i think you meant `break`,0,0.8952438831329346
418093617,474,devshgraphicsprogramming,2020-04-30T15:24:31Z,"you only need the image's creation parameters, not the image itself for this",0,0.9894530773162842
418093879,474,devshgraphicsprogramming,2020-04-30T15:24:53Z,same as [a link],0,0.9871845841407776
418096196,474,Crisspl,2020-04-30T15:28:10Z,"struct is out of question because `phys_pg_tex_sz_rcp` array size is variable. i'm making a writing function, but i wonder how user could know layout of outputted data?",0,0.8939775824546814
418100360,474,Crisspl,2020-04-30T15:34:04Z,"meeeh, actually i think it would be best for ivirtualtexture to provide a template struct for user to fill by himself. or make ubo with precomputed data come in same ds as pagetable and views (having declaration in builtin descriptors.glsl, etc, etc), this is too scattered",-1,0.5722202658653259
418102603,474,devshgraphicsprogramming,2020-04-30T15:37:19Z,and a `!` in the `if`,0,0.9915436506271362
418103566,474,devshgraphicsprogramming,2020-04-30T15:38:46Z,"only if the image subresource size is too big, check that before you start doing anything at the start of the function if image can fit",0,0.9832133054733276
418103684,474,devshgraphicsprogramming,2020-04-30T15:38:56Z,then you can assert this,0,0.9805858731269836
418104653,474,devshgraphicsprogramming,2020-04-30T15:40:19Z,this is overkill,-1,0.944027841091156
418104905,474,devshgraphicsprogramming,2020-04-30T15:40:42Z,this is overkill just to fill one pixel,-1,0.9802969694137573
418105766,474,devshgraphicsprogramming,2020-04-30T15:41:56Z,i hate constant literals like `16`,-1,0.9910804629325867
418106721,474,devshgraphicsprogramming,2020-04-30T15:43:23Z,can you explain the logic of this line?,0,0.988828182220459
418108228,474,devshgraphicsprogramming,2020-04-30T15:45:24Z,"you can work out how many tiles you need to allocate outside the copy loop, and you also know the upper bound on tiles becase you know the upper bound on texture size that can be packed",0,0.9898102283477783
418109529,474,devshgraphicsprogramming,2020-04-30T15:47:23Z,"split the `pack` function into `alloc` and `commit` (for now keep the `alloc` and `commit` private, we need to figure out how to allow committing parts of textures in the future given multiple views) one that allocates 1 vt pagetable range per 1 view format, the other that takes the list of `stexturedata` and does the tile allocations from physical storage + padded copies",0,0.9947839379310608
418111161,474,devshgraphicsprogramming,2020-04-30T15:49:41Z,"let it fill the page table with the `physpgaddr` that is invalid, just skip the physical data copy",0,0.9879996180534363
418111403,474,devshgraphicsprogramming,2020-04-30T15:50:00Z,see [a link],0,0.9869033098220825
418112110,474,devshgraphicsprogramming,2020-04-30T15:51:01Z,"this you should only do once per view format class (even though you've allocated multiple vt ranges, 1 per format for a view)",0,0.9900934100151062
418113247,474,devshgraphicsprogramming,2020-04-30T15:52:38Z,also you'll ned to fill 1 pixel in multiple vt layers (1 per format view),0,0.9872685074806213
418120642,474,devshgraphicsprogramming,2020-04-30T16:03:26Z,see [a link] i'd introduce a `core::unordered_multimap m_viewformattolayer;` instead,0,0.9937461614608765
418121214,474,devshgraphicsprogramming,2020-04-30T16:04:18Z,we can actually get rid of `m_assignedpagetablelayers` and `m_freepagetablelayerids` see [a link],0,0.9926263689994812
418122140,474,devshgraphicsprogramming,2020-04-30T16:05:47Z,also define some constexpr insstead of using `~0u` as invalid,0,0.9907159805297852
418122434,474,devshgraphicsprogramming,2020-04-30T16:06:14Z,"we have the `m_layertoviewindexmapping` its better to `std:find_if(,~0u)` linear search from the front rather than use a stack for `m_freepagetablelayerids` because then we'll always get the lowest numbered layer as the new layer",0,0.9934319853782654
418123777,474,Crisspl,2020-04-30T16:08:14Z,because i dont really see other way,0,0.5056652426719666
418124506,474,devshgraphicsprogramming,2020-04-30T16:09:17Z,actually [a link],0,0.9874691963195801
418125508,474,Crisspl,2020-04-30T16:10:48Z,testing purposes,0,0.9447198510169983
418126563,474,devshgraphicsprogramming,2020-04-30T16:12:25Z,oh and `stexturedata` holds the original number of mimap levels in `_subres` when allocating),0,0.9758869409561157
418126722,474,devshgraphicsprogramming,2020-04-30T16:12:38Z,"you can deduce the format from the `stexturedata` and `m_layertoviewindexmapping` and [a link] `stexturedata` holds mipmap extent given `_subres.basemiplevel` so `neededpagecountforside(extent.width, _subres.basemiplevel+i)` cancels out (you can use `neededpagecountforside(stexturedata::getoriginalsize(),i)`)",0,0.9956758618354797
418126920,474,devshgraphicsprogramming,2020-04-30T16:12:57Z,you should only need to take `stexturedata` as parameter see [a link],0,0.990903913974762
418127641,474,Crisspl,2020-04-30T16:13:58Z,"those are things for decoding address from pool allocator into 3d (x,y,layer) address in order to encode it into what goes into page table (which indeed has constexpr masks/shifts: 4bits x, 4bits y, 8bits layer)",0,0.993992269039154
418131118,474,Crisspl,2020-04-30T16:19:31Z,"i dont think so, why?",-1,0.5361127257347107
418151772,474,devshgraphicsprogramming,2020-04-30T16:53:22Z,"actually instead of doing this array of `stexturedata` we could actually make a: - `smastertexturedata alloc(e_format primaryviewingformat, const iimage::screationparams& _imgparams, const iimage::ssubresourcerange& _subres)` allocates the master allocation (the one that is actually resposible for managing physical tiles) but only as a vt range - bool commit(const smastertexturedata& _addr, const image_t* _img, const iimage::ssubresourcerange& _subres, isampler::e_texture_clamp _wrapu, isampler::e_texture_clamp _wrapv, isampler::e_texture_border_color _bordercolor)` does the physical tile allocation and writing to master vt page table entry - `sviewaliastexturedata createalias(const smastertexturedata& _addr, e_format viewingformat, const iimage::ssubresourcerange& _subresrelativetomaster)` allocates another vt region and copies the pagetable pointers (master must be committed) - `bool destroyalias(const sviewaliastexturedata& _alias)` destroys the alias, doesn't decommit - `bool free(const smastertexturedata& _addr)` which deallocates the master allocation with a simple [code block]",0,0.9926512837409973
418153969,474,devshgraphicsprogramming,2020-04-30T16:57:08Z,constexpr?,0,0.979630708694458
418160486,474,devshgraphicsprogramming,2020-04-30T17:08:18Z,"this is wrong, example... texture with a sidelength of 1025, gets padded to 2048 (with some wrap modes) mip level 0: uses 1025 pixels out of 2048, with a page size of 128 it needs 9 pages mip level 1: uses 513 pixels out of 1024 (coordinate 1.0 will map to 512.5 , the mip is computed from padded+wrapped image), it needs 5 pages mip level 2: uses 257 pixels out of 512 (1.0-> 256.25), it needs 3 pages mip level 3: uses 129 pixels out of 256, it needs 2 pages mip level 4: uses 65 pixels out of 128, it needs 1 page rest needs 1 page your function comes out as, 9 pages, then 4,2,1,...... you should swap`std::max(_sideextent>>_level, 1u)` which rounds down to `((_sideextent+(0x1u<<_level)-1u)>>_level)` which rounds up and doesn't need a max",0,0.9271542429924011
418163674,474,devshgraphicsprogramming,2020-04-30T17:13:53Z,didn't we fix the number of bits on that as well?,0,0.9928521513938904
418164414,474,devshgraphicsprogramming,2020-04-30T17:14:59Z,you've inserted the `glsl_common_override` right after the first newline after `#version` then you do the same thing with `_shaderspecificoverride` which would insert the last before the first.,0,0.995230495929718
418230369,474,Crisspl,2020-04-30T19:11:26Z,"i dont understand how it could be fixed. if i have `tilesperdim`=4, then number of bits for x and y page-wise page coords is 2 (log2(tilesperdim) in general). if i had those bitlengths fixed, i'd just be reading/decoding wrong values. for example pool allocator gave me `0b00000101'11000011` address. so in case of `tilesperdim=4` i'm getting (`0b11`, `0b00`, `0b1011100`) 3d address and in case of `tilesperdim=8` i'm getting (`0b011`,`0b000`,`0b10111`). so it cant be fixed because decoding 1d->3d is directly dependent on tiles per dim",0,0.6763949990272522
418236549,474,Crisspl,2020-04-30T19:23:01Z,ehh... yea,0,0.509565532207489
418238238,474,Crisspl,2020-04-30T19:26:15Z,protected wont do because `ivirtualtexture` is a template and protected in `ivirtualtexture ` doesnt make it accessible in `igpuvirtualtexture` with base being `ivirtualtexture `,0,0.9946491122245789
418238913,474,Crisspl,2020-04-30T19:27:37Z,"this function returns const reference so it's safe, not the most beutiful thing in the world though",-1,0.5742598176002502
418307487,474,devshgraphicsprogramming,2020-04-30T21:46:13Z,so why is it a hardcoded constant?,0,0.973768413066864
418307861,474,devshgraphicsprogramming,2020-04-30T21:47:03Z,"put it together in one ssbo, you'll have less alignment issues (`phys_pg_tex_sz_rcp` has a stride of 16 bytes under ubo packing)",0,0.9939112663269043
418326293,474,devshgraphicsprogramming,2020-04-30T22:32:10Z,"i think it does, it just fucks up macro functions or something",0,0.7175094485282898
418326414,474,devshgraphicsprogramming,2020-04-30T22:32:32Z,also shouldn't you have a space before the backslash?,0,0.9902082681655884
418326729,474,devshgraphicsprogramming,2020-04-30T22:33:23Z,`_irr_approximate_texel_footprint_from_derivative_cacl_`,0,0.9929520487785339
418327397,474,devshgraphicsprogramming,2020-04-30T22:35:21Z,"why is github so fucking stupid, now i can't find what i was linking!",-1,0.9926556348800659
418330133,474,devshgraphicsprogramming,2020-04-30T22:43:18Z,weren't you supposed to map the lut change flag here?,0,0.9918317198753357
418331157,474,devshgraphicsprogramming,2020-04-30T22:46:19Z,no point just return a constant reference plus take an argument if should reset the flag,0,0.9858274459838867
418331941,474,devshgraphicsprogramming,2020-04-30T22:48:27Z,still a thing,0,0.8967262506484985
418332136,474,devshgraphicsprogramming,2020-04-30T22:49:00Z,still doesn't need to be public,0,0.9542147517204285
418345834,474,devshgraphicsprogramming,2020-04-30T23:31:09Z,"eh, a stack doesn't make sense anyway ;) just iterate the lut directly.",1,0.9689942002296448
418346157,474,devshgraphicsprogramming,2020-04-30T23:32:19Z,need that `std::getenv` in copengldriver/extentionhandler,0,0.9937289953231812
418347115,474,devshgraphicsprogramming,2020-04-30T23:35:32Z,"well not if you're gonna use the addresses directly (without a little translation) btw do you require that the physical texture be pot ? cause we could use morton ordering for the pool allocations as well (and the physical textures ""could"" look prettier in renderdoc)",0,0.9882060289382935
418349553,474,devshgraphicsprogramming,2020-04-30T23:44:07Z,basically its about the stack being redundant,0,0.9323758482933044
418350331,474,devshgraphicsprogramming,2020-04-30T23:46:41Z,256 ? seriously?,-1,0.9237891435623169
418350860,474,devshgraphicsprogramming,2020-04-30T23:48:36Z,could have been a plain assignment,0,0.9776291847229004
418351167,474,devshgraphicsprogramming,2020-04-30T23:49:27Z,"we don't need this function anymore, only a get by reference (ofc. with `_clearflag` not `_updateflag`)",0,0.9935930371284485
418351596,474,devshgraphicsprogramming,2020-04-30T23:50:59Z,the copy ctors?,0,0.9905666708946228
418351774,474,devshgraphicsprogramming,2020-04-30T23:51:32Z,you most definitely don't want to do that,-1,0.814267635345459
418351918,474,devshgraphicsprogramming,2020-04-30T23:51:55Z,youre going to kill the existing cpu objects,-1,0.5599442720413208
418352537,474,devshgraphicsprogramming,2020-04-30T23:54:13Z,"sane default is 15 views float, 0 in others",-1,0.9731306433677673
418352753,474,devshgraphicsprogramming,2020-04-30T23:54:56Z,"you want to check that value is >0 (not that they're defined, they always will be)",0,0.9882513880729675
418352984,474,Crisspl,2020-04-30T23:55:55Z,"it's `#if`, not `#ifdef`",0,0.9919067621231079
418355115,474,devshgraphicsprogramming,2020-05-01T00:03:39Z,still,0,0.9232051968574524
418355373,474,devshgraphicsprogramming,2020-05-01T00:04:33Z,also are you going this route?,0,0.9882408380508423
418355745,474,devshgraphicsprogramming,2020-05-01T00:06:02Z,"decent idea, lets not create spurious `dynamic_array`s",0,0.9434657692909241
418356125,474,devshgraphicsprogramming,2020-05-01T00:07:24Z,"well i thought of this: you know the uppper bound on layer amount, its 256, so you can have the `uint` format mapping and the `float` recriproval physical suze",0,0.9249813556671143
418356345,474,devshgraphicsprogramming,2020-05-01T00:08:19Z,"then you could return a combined struct of two 256 element arrays, one of uint and one of float as ""the lut""",0,0.9928320646286011
418356646,474,devshgraphicsprogramming,2020-05-01T00:09:19Z,"there's still only one logical choice of sampler, and it should be immutable",0,0.9875426292419434
418357141,474,devshgraphicsprogramming,2020-05-01T00:11:07Z,why do you need so many samplers?,0,0.9385414123535156
418357243,474,devshgraphicsprogramming,2020-05-01T00:11:31Z,"ah ok i see you did immutable samplers, but that comment should go...",0,0.865553617477417
418358716,474,devshgraphicsprogramming,2020-05-01T00:16:54Z,the `getresidentstorage()` ?,0,0.9924586415290833
418449676,474,Crisspl,2020-05-01T07:42:59Z,"no, im iterating through all layers assigned to this storage. if i cant allocate on `it` then trying next one",0,0.7137712240219116
418450230,474,Crisspl,2020-05-01T07:45:19Z,what does it mean to map a flag?,0,0.9872199296951294
418453197,474,Crisspl,2020-05-01T07:57:52Z,you wanted a standard way to edit images (filters lib) and thats why im using it. generalization is usually an overkill,0,0.7914335131645203
418454053,474,devshgraphicsprogramming,2020-05-01T08:01:16Z,"it makes sense fo padded copies, but not for this xd",0,0.9758070111274719
418454234,474,devshgraphicsprogramming,2020-05-01T08:01:56Z,mark... you update the lut but never set the update flag... you have an unused update function,0,0.9039264917373657
418454620,474,devshgraphicsprogramming,2020-05-01T08:03:46Z,ah ok,0,0.8416553735733032
418455588,474,devshgraphicsprogramming,2020-05-01T08:08:05Z,"and if you don't fail you try the next one anyway because its a `for (auto it = assignedlayers.first; it != assignedlayers.second; ++it)` loop also the logic is off, because layers are assigned to formats (views) not format classes (storage) this is why i essntially propose to get rid of both assigned layers in storage class, and the free layer stack, just use a `unordered_multimap ` plus the layer to format sampler view lut",0,0.9905750155448914
418462136,474,Crisspl,2020-05-01T08:34:09Z,for binding (as u can see),0,0.9828425049781799
418462544,474,Crisspl,2020-05-01T08:35:46Z,that would require direct access to cpuvt->m_layertoviewindexmapping,0,0.9928638339042664
418463129,474,Crisspl,2020-05-01T08:37:49Z,"lol xd yea, thx",1,0.9924733638763428
418466615,474,devshgraphicsprogramming,2020-05-01T08:50:01Z,"yeah, but you have one sampler per binding, whereas you probably need only 2 samplers, one for pagetable and integer textures and one for float textures you don't need a unique sampler per binding, right?",0,0.7962252497673035
418466849,474,devshgraphicsprogramming,2020-05-01T08:50:49Z,nope `m_layertoviewindexmapping = _cpuvt->getlayertoviewindexmapping(false);`,0,0.9939378499984741
418482249,474,Crisspl,2020-05-01T09:48:43Z,"i see, dont add ""still"" to every unresolved comment xd if it's unresolved yet, it means i'll get it resolved later",0,0.9868298172950745
418490551,474,Crisspl,2020-05-01T10:20:47Z,"yea, remember it",0,0.9000750780105591
418495264,474,Crisspl,2020-05-01T10:39:31Z,not possible to calculate such array because layer->sampler_index mapping doesnt give you info about which sampler array (float/int/uint) index it is. only user can know that,0,0.9741871953010559
418495619,474,Crisspl,2020-05-01T10:41:15Z,no longer there,0,0.9744905829429626
418495699,474,Crisspl,2020-05-01T10:41:37Z,done,0,0.8974218964576721
418497978,474,Crisspl,2020-05-01T10:50:48Z,i need to know format class of the image to find its physical storage and remove pagetable layer assignment from it. you're right i dont necesarilly need _subres though,0,0.9506208300590515
418500180,474,Crisspl,2020-05-01T11:00:23Z,"yes, tilesperdim is pot complicates physical page allocation a lot (i have to pad needed pages count to pot and after packing deallocate not used...) and ""prettyness"" depends on fragmentation. plus fragmentation becomes much bigger problem because of deallocating not-used pages resulting from pot-padding...",0,0.8433101177215576
418540343,474,Crisspl,2020-05-01T13:28:05Z,"i can't because i dont know whether it's float, int or uint format (i can deduce view/sampler index but still i wouldnt know which array's index it is)",0,0.877740740776062
418555003,474,Crisspl,2020-05-01T14:04:38Z,"miplevel `n` size of texture sized `s` in some dimension has size of `max(s / 2^n,1)` which is `max(s>>n,1)` so i think everything's fine (so miplevel 1 of texture sized 1025 has size of 512, not 513)",0,0.9845784306526184
418561720,474,devshgraphicsprogramming,2020-05-01T14:20:21Z,nope. because we pad the thing!,-1,0.5936298370361328
418563337,474,devshgraphicsprogramming,2020-05-01T14:24:15Z,then make a `m_layertoviewindexmapping` counterpart that records the `e_format` or view that the layer of `stexdata` points to,0,0.9944808483123779
418564845,474,devshgraphicsprogramming,2020-05-01T14:27:26Z,this array is `stexdata.vtlayer -> rcp size mapping` build the array in `ivirtualtexture`,0,0.9935042262077332
418565320,474,devshgraphicsprogramming,2020-05-01T14:28:26Z,"we should keep track of the `formatid` and `e_format` (or image view) assigned to the vt layer, would make the whole api a lot simpler",0,0.9928001165390015
418567438,474,Crisspl,2020-05-01T14:33:04Z,"there are 2 samplers objects, but i need array (of length = `binding.count` = view count) of samplers (array of samrt_refctd_ptr but all of them points to same sampler object) for views binding",0,0.9919834733009338
418591260,474,devshgraphicsprogramming,2020-05-01T15:26:33Z,"you actually don't need to align or pad anything, the tiles are not connected in any way whatsoever (its a pool allocator, there is no fragmentation). turning an address of a single tile into an xy coordinate is bit extraction, positioning them morton style would essentially introduce just a permutation on the bit pattern (just after `multi_alloc_addr` and `multi_free_addr` on the pool allocator) --------------------------- anyway this is going off on a tangent (whether to use morton or not is completely orthogonal to the below). we can fix the allocation of bits as a constant. using the following rationale. max physical texture size in hardware is 16k, but it would be best to limit the x,y dimensions to a minimum because of ieee754 precision issues near `vec2(1.0,1.0)` maximum number of 2d array layers is 256, which means that we can use 8 bits of layers, and then 4 each for for x and y (which gives us a reasonable 2k up to 8k 2d physical storage dimension depending on page size). all you need to do is just convert the pool allocator address to a fixed byte form [code block]",0,0.9857361912727356
418803704,474,Crisspl,2020-05-02T01:00:23Z,thats exactly what im doing,0,0.9165939092636108
418942248,474,devshgraphicsprogramming,2020-05-02T10:35:54Z,i don't think you should reset the update on the cpu vt here.,0,0.925350546836853
418942458,474,devshgraphicsprogramming,2020-05-02T10:38:51Z,you're still getting the wrong format xd,-1,0.9270061254501343
419440116,474,Crisspl,2020-05-04T13:35:14Z,"if couldnt allocate, assigns sphyspgoffset::invalid_address",0,0.9854877591133118
419456947,474,Crisspl,2020-05-04T13:58:46Z,(miptail page address is saved for future iterations packing mip levels which go into miptail page),0,0.9942544102668762
419963466,474,devshgraphicsprogramming,2020-05-05T09:03:03Z,ok i didn't see that there are only 2,0,0.9393332004547119
419965643,474,devshgraphicsprogramming,2020-05-05T09:07:03Z,"addr already holds `imgandorigsz.second` as well as ` _uwrap, _vwrap` right?",0,0.9952929615974426
419966986,474,devshgraphicsprogramming,2020-05-05T09:09:28Z,oh and you could inject a `irr_gl_irr_running_in_renderdoc` because the `copengldriver` can detect the renderdoc.dll,0,0.9914359450340271
419994504,474,devshgraphicsprogramming,2020-05-05T09:59:05Z,"because mip-map filter may have a bigger domain than [-0.5,0.5] it is also important to know the border color",0,0.9902763366699219
420254178,474,devshgraphicsprogramming,2020-05-05T16:46:19Z,"how do you protect against double free? only master should free the physical tiles, not the alias.",0,0.986322283744812
420282327,474,devshgraphicsprogramming,2020-05-05T17:27:48Z,inline static and public? or move to some utility in `irr/asset/format` ?,0,0.9951137900352478
420282786,474,devshgraphicsprogramming,2020-05-05T17:28:33Z,why is this constructor public for everyone to use?,0,0.9772714376449585
420465722,474,devshgraphicsprogramming,2020-05-05T23:24:47Z,this doesn't take into account that we round up the basemaxdim to pot (the rounding up of mip-levels) it would need to be `core::findmsb(basemaxdim-1u)+1` insead of `core::findmsb(basemaxdim`,0,0.989258348941803
420467335,474,devshgraphicsprogramming,2020-05-05T23:29:45Z,"given the constexpr limit on layer count, they couldn be a plain `std::array`",0,0.9943218231201172
420468545,474,devshgraphicsprogramming,2020-05-05T23:33:19Z,gcc will hate you for the `auto` deduction here.,-1,0.9869530200958252
420471497,474,devshgraphicsprogramming,2020-05-05T23:42:39Z,i don't get this `if` + `continue`,0,0.8706094622612
420474173,474,devshgraphicsprogramming,2020-05-05T23:51:28Z,to be able to assert that you need to check that `extent` does not exceed the max size (at the very start of the function),0,0.9932725429534912
420474839,474,devshgraphicsprogramming,2020-05-05T23:53:33Z,don't fill a single pixel with a filter,0,0.9486558437347412
420673848,474,devshgraphicsprogramming,2020-05-06T09:57:33Z,"that would be correct, a padded texture has one extra mip, example a 65 wide texture with mip-map rounding up 65,33,17,9,5,3,2,1 = 8 mips a 128 wide padded texture 128,64,32,16,8,4,2,1 = 8 mips",0,0.9873256683349609
420676902,474,devshgraphicsprogramming,2020-05-06T10:03:38Z,"`const vkextent3d& _mip0extent, const iimage::ssubresourcerange& _subres, isampler::e_texture_clamp _wrapu, isampler::e_texture_clamp _wrapv` are almost all in `smastertexturedata` (except for baselayer of `iimage::ssubresourcerange`)",0,0.9927769899368286
421358447,474,Crisspl,2020-05-07T09:14:10Z,trying next of layers assigned for this format if previously tried has too little free space to alloc,0,0.9903476238250732
421380663,474,Crisspl,2020-05-07T09:49:54Z,"almost, stexturedata holds `stexturedata::e_wrap_mode`: [code block] `isampler::e_texture_clamp` maps to `e_wrap_mode` like this: [code block] (clamp to edge and to border becomes one thing, and mirror and all mirror+clamp becomes one thing) ofc we can map back but it's lossy then. mapping back is needed for padded copy. it would mean that padded copy will never use clamp_to_border (clamp_to_edge instead) and will never use `mirror_clamp_*` as well (mirror instead)",0,0.9902693033218384
421470546,474,Crisspl,2020-05-07T12:38:39Z,"there's no base miplevel, base layer and miplevel count, so i'm leaving whole `_subres`",0,0.9855805039405823
421491468,474,Crisspl,2020-05-07T13:11:37Z,"hm, instead of this envvar?",0,0.9510118961334229
422023671,474,devshgraphicsprogramming,2020-05-08T08:44:25Z,could turn this into a thing like `_irr_aligned_malloc`,0,0.9947811961174011
422026118,474,devshgraphicsprogramming,2020-05-08T08:49:43Z,and where is the separate free/destroy for the aliases?,0,0.9932214021682739
422027360,474,devshgraphicsprogramming,2020-05-08T08:52:31Z,"no both, to be done regular opengl extensions can come from envvar or not we define extra extension on top of all that to let glsl know its running in renderdoc",0,0.9889899492263794
422030811,474,Crisspl,2020-05-08T09:00:11Z,in ivirtualtexture,0,0.9762864112854004
422031197,474,devshgraphicsprogramming,2020-05-08T09:01:01Z,there' actually a special overload for `reserved_size` which takes the old allocator reference + new buffer size (in-case you want to grow or shrink) example [a link],0,0.9950394034385681
422034247,474,devshgraphicsprogramming,2020-05-08T09:07:48Z,"ok this was kind of badly phrased [a link] what it actually means is that the underlying data buffer (memory, file, gpu buffer, image, whatever) whose ranges the address allocator allocates should be handled by the user. the move constructors actually copied the state in the reserved space properly, so there's no need for a `alloc_and_copy` just an alloc",0,0.948867678642273
422034852,474,devshgraphicsprogramming,2020-05-08T09:09:06Z,doesn't `reserved_size` take the argumetns the other way around?,0,0.9941442608833313
422036032,474,devshgraphicsprogramming,2020-05-08T09:11:41Z,you need to compute the cursor properly (copy it),0,0.9882280230522156
422037138,474,devshgraphicsprogramming,2020-05-08T09:14:16Z,"we should nuke this address allocator, it makes no sense in the modern world",0,0.9566861987113953
422037291,474,Crisspl,2020-05-08T09:14:37Z,"erm, thanks, seems like i copy-pasted and forgot about this",1,0.8407365083694458
422037801,474,Crisspl,2020-05-08T09:15:45Z,"nah, at least not in this allocator",0,0.9849045276641846
422040247,474,devshgraphicsprogramming,2020-05-08T09:21:19Z,did this move?,0,0.9894981384277344
422042142,474,devshgraphicsprogramming,2020-05-08T09:25:31Z,"this still doesn't make sense. if you fail to allocate (get invalid_address), then you go into the `if` and `continue` to do the multi allocation again on the next layer. if you succeed then you don't hit the `continue` but you go around the loop again anyway! the only thing that saves you from multiple allocations is that `multi_alloc_addr` doesn't allocate address outputs that were not initialized to `invalid_address` despite that, the behaviour still should be [code block]`",0,0.8742803335189819
422042988,474,devshgraphicsprogramming,2020-05-08T09:27:33Z,"ah yes, you're right, in that case we need to assert that the `_uwrap, _vwrap` are compatible with the wrapping modes of the `smastertexturedata`",0,0.9590407013893127
422135610,474,Crisspl,2020-05-08T13:14:45Z,i removed this (along with e_sampler_type) completely,0,0.990712583065033
422137378,474,Crisspl,2020-05-08T13:18:25Z,"lol, im stupid, yeah, thanks xd ...",1,0.7253776788711548
431190213,497,devshgraphicsprogramming,2020-05-27T14:40:54Z,"its going to be `8u` always, you will do the summation in `double` or `uint64_t`",0,0.9924989342689514
431190412,497,devshgraphicsprogramming,2020-05-27T14:41:11Z,you will use scratch memory for this,0,0.985101044178009
431190583,497,devshgraphicsprogramming,2020-05-27T14:41:27Z,do more validation,0,0.972732424736023
431190978,497,devshgraphicsprogramming,2020-05-27T14:42:00Z,you know that the matchedsizefilterbase's state has those already?,0,0.991976797580719
431191989,497,devshgraphicsprogramming,2020-05-27T14:43:19Z,inhertiv from other states here,0,0.9848184585571289
431192236,497,devshgraphicsprogramming,2020-05-27T14:43:39Z,you've just really complicated the inherticance of this class :(,-1,0.9870504140853882
431192624,497,devshgraphicsprogramming,2020-05-27T14:44:09Z,inhertit from matched extent filter,0,0.9917424917221069
431193215,497,devshgraphicsprogramming,2020-05-27T14:44:57Z,if `csummedareatableimagefilterbase ` inherited from matched extent base then you could call its validation and have all this already be taken care of,0,0.9942728877067566
431193525,497,devshgraphicsprogramming,2020-05-27T14:45:23Z,you ask for scratch memory so that you do not need to allocate!,0,0.972968339920044
431194200,497,devshgraphicsprogramming,2020-05-27T14:46:15Z,these are in the base i'm telling you to inherit from,0,0.9864371418952942
431194699,497,devshgraphicsprogramming,2020-05-27T14:46:58Z,the only lambda that you should be executing here should be one to decode the pixels into your temporary scratch memory store,0,0.992749035358429
431196033,497,devshgraphicsprogramming,2020-05-27T14:48:39Z,"first you want to clear your scratch memory to 0s (`memset(,0,)` or `std::fill`) then you want to decode the input image into scratch via the `executeperregion` then you want to peacefully do your own thing with the scratch (the sum) then you want to save the sum from scratch to output image via the `executeperregion`",0,0.9940027594566345
431196654,497,devshgraphicsprogramming,2020-05-27T14:49:29Z,"cache coherence, first sweep x, then sweep y",0,0.9891911745071411
431318484,497,AnastaZIuk,2020-05-27T17:30:20Z,"but it isn't an array of double that i use (actually will use) as scratch it's for caching purposes, for storing max values for the pixel sum likely, the sum will be changing but it's cache size will be always the sam - extent of y and x, so i use (will use) it for caching to speed up performing time and scratch memory that is allocated by the user to finally hold all the precomputed sum values",0,0.9892041087150574
431410099,497,devshgraphicsprogramming,2020-05-27T20:03:08Z,"all memory yyou need to use need to come from scratch memory,compute yourself some offsets and deal with everything via `reinterpret_cast`",0,0.9877517223358154
436248387,497,AnastaZIuk,2020-06-06T07:50:27Z,corrected in following commit,0,0.9914671182632446
436249518,497,AnastaZIuk,2020-06-06T08:08:57Z,corrected in following commit,0,0.9914671182632446
436249521,497,AnastaZIuk,2020-06-06T08:09:01Z,corrected in following commit,0,0.9914671182632446
436249526,497,AnastaZIuk,2020-06-06T08:09:07Z,corrected in following commit,0,0.9914671182632446
436249531,497,AnastaZIuk,2020-06-06T08:09:11Z,corrected in following commit,0,0.9914671182632446
436249544,497,AnastaZIuk,2020-06-06T08:09:27Z,corrected in following commit,0,0.9914671182632446
436272812,497,AnastaZIuk,2020-06-06T14:23:19Z,it doesn't matter anymore,0,0.9650290608406067
436272825,497,AnastaZIuk,2020-06-06T14:23:27Z,adjusted,0,0.8934942483901978
436272852,497,AnastaZIuk,2020-06-06T14:24:00Z,done,0,0.8974218964576721
436272854,497,AnastaZIuk,2020-06-06T14:24:07Z,adjusted,0,0.8934942483901978
438235383,497,AnastaZIuk,2020-06-10T15:59:16Z,to remove,0,0.9798083901405334
440124740,497,devshgraphicsprogramming,2020-06-15T11:59:16Z,"upheld, right now you have a huge problem that you do decode,sum,encode inside your per-region lambda... this will backfire for sparse images. first everything needs to be decoded from all regions, then summed.. once, then encoded to all regions",-1,0.6835786700248718
440211390,497,AnastaZIuk,2020-06-15T14:21:10Z,"what do you mean in more detail, could you explain? but if the user choose the mipmap and a layer, only one region will be ever executed (afaik), so why can't i do it in per region lambda?",0,0.9833753705024719
440213224,497,AnastaZIuk,2020-06-15T14:23:47Z,"scratch memory is independent, it will always hold one layer with no reference, so if i compute offset to fetch texels correctly from the region being executed, i can (probably, maybe i'm wrong) decode, sum and encode in the lambda as i think of it",0,0.9748803973197937
440255055,497,devshgraphicsprogramming,2020-06-15T15:21:26Z,what's this?,0,0.9127483367919922
441096015,497,devshgraphicsprogramming,2020-06-16T19:37:33Z,"you need to change format to something like rgba_32_sfloat because the input are values in the [0,1] range, so a sum of all these values will be in [0,imagewidth*imageheight] and you will also need the precision in the fractions, which makes uint or int formats unsuitable",0,0.9859749674797058
441096145,497,devshgraphicsprogramming,2020-06-16T19:37:45Z,naturally the cpu-buffer also can be bigger,0,0.984356701374054
441096195,497,devshgraphicsprogramming,2020-06-16T19:37:53Z,`const auto&`,0,0.9881293773651123
441096982,497,devshgraphicsprogramming,2020-06-16T19:39:24Z,"memory leak, `_irr_aligned_free` missing",0,0.9901208877563477
441116008,497,devshgraphicsprogramming,2020-06-16T20:16:48Z,"no get this from image, not a particular region",0,0.948634922504425
441116132,497,devshgraphicsprogramming,2020-06-16T20:17:04Z,save to exr,0,0.9793044328689575
441116781,497,devshgraphicsprogramming,2020-06-16T20:18:19Z,not sure why nwe need this and the enum?,0,0.912227988243103
441567680,497,Crisspl,2020-06-17T13:59:48Z,why srgb goes as uint64_t?,0,0.9851964712142944
441572631,497,Crisspl,2020-06-17T14:06:34Z,u could just `remove_pointer_t ` or even [code block],0,0.9946757555007935
441576008,497,Crisspl,2020-06-17T14:11:17Z,better make it `4u`,0,0.9916967153549194
442136802,497,AnastaZIuk,2020-06-18T10:45:55Z,"we wanted something like `divideeverythingby` where inputs are `imagetotal` (maxx, maxy) sum as far as i remember",0,0.9859400987625122
442137532,497,AnastaZIuk,2020-06-18T10:47:25Z,so should i remove template parameter and make it use always `double`?,0,0.9945437908172607
442137919,497,AnastaZIuk,2020-06-18T10:48:11Z,"okay, to remove",0,0.9625367522239685
442139838,497,AnastaZIuk,2020-06-18T10:52:07Z,corrected in following commit,0,0.9914671182632446
442144161,497,AnastaZIuk,2020-06-18T11:00:52Z,"not sure if done correctly, but changed in following commit",0,0.9794502854347229
442152035,497,AnastaZIuk,2020-06-18T11:17:14Z,corrected in following commit,0,0.9914671182632446
442726984,497,AnastaZIuk,2020-06-19T09:16:46Z,corrected in following commit,0,0.9914671182632446
442727494,497,AnastaZIuk,2020-06-19T09:17:54Z,"you're right, corrected!<3",1,0.9801969528198242
442762547,497,devshgraphicsprogramming,2020-06-19T10:30:10Z,ok will see when you push,0,0.9875230193138123
442762871,497,devshgraphicsprogramming,2020-06-19T10:30:53Z,"that needs to be an option (in the state), but then you also need to return that original max value to the user somehow (maybe via the state) the only reason for someone to use that is to use a `rgba16_unorm` or `rgba32_unorm` image for prevision and then scale it back up to get original result",0,0.9928359389305115
443118575,497,devshgraphicsprogramming,2020-06-20T10:00:28Z,"`sizeof(double)` makes it more readable, otherwise people are scratching their heads like ""why 8"" ?",0,0.5825638175010681
443123967,497,AnastaZIuk,2020-06-20T11:32:43Z,"you're right, to fix",0,0.8486677408218384
443124044,497,AnastaZIuk,2020-06-20T11:34:03Z,i will return it via state,0,0.9858947992324829
443142414,497,AnastaZIuk,2020-06-20T16:20:54Z,"okay, though i will return it via the filter",0,0.9747229218482971
443146104,497,AnastaZIuk,2020-06-20T17:20:00Z,fixed,0,0.9281549453735352
446412810,497,devshgraphicsprogramming,2020-06-26T21:13:43Z,"you're gonna do one layer at a time, and not sum across layers, so the number of layers shall not influence the scratch size.",0,0.9597892761230469
446412960,497,devshgraphicsprogramming,2020-06-26T21:14:07Z,what's this?,0,0.9127483367919922
446416071,497,devshgraphicsprogramming,2020-06-26T21:22:54Z,"no, you're not allowed to allocate extra data... you partition the reserved space and use that.",0,0.9313337802886963
446416356,497,devshgraphicsprogramming,2020-06-26T21:23:48Z,`>=` comparison is not safe... you'd actually need to use one of the functions that give the per-channel bit-depth and compare that the channel bit-depth is larger.,0,0.9847328066825867
446416465,497,devshgraphicsprogramming,2020-06-26T21:24:10Z,"nope, just check the size (i think the base class `validate` method already does this)",0,0.9850601553916931
446568865,497,AnastaZIuk,2020-06-27T21:25:35Z,"oh, right. logic mistake edit: written when about to sleep xd",-1,0.5923578143119812
446629202,497,AnastaZIuk,2020-06-28T09:59:08Z,"wait what? we wanted to decode the entire image with all the data first, then using offset perform the sum (going through the layers as well and summing the single one at a time, but having the entire decoded image due to overlapping that could appear)",0,0.9555684924125671
446629460,497,AnastaZIuk,2020-06-28T10:01:21Z,otherwise i will be forced to do what i did before - decoding in the lambda,0,0.9722084403038025
446629644,497,AnastaZIuk,2020-06-28T10:03:29Z,it contains max sum values for a single plane,0,0.9866451621055603
446629727,497,AnastaZIuk,2020-06-28T10:04:22Z,i will use scratch then,0,0.9806358218193054
446633124,497,AnastaZIuk,2020-06-28T10:36:16Z,"it's because i use the scratch to read from it decoded values and i have to have those layers in the scratch as well, cuz the basic filter sends the layer to the lambda too. however before i had an useless approach - decoding image and then decoding extraordinary an pixel i'm operating on (decoding 2 times) so i find my way good now",0,0.8836013078689575
446635871,497,AnastaZIuk,2020-06-28T11:01:43Z,"well, actually i use the extra cache for columns, but i need to know the width of an image that depends on the chosen mip map level. i can bypass it by allocating just the max possible width in the scratch, but i don't know if we want such an approach. what should i do? unless i will force the user to specify the mip map level in the scratch function specifing the size of the memory",0,0.8735541701316833
446639930,497,AnastaZIuk,2020-06-28T11:42:55Z,"we don't have such a function probably, i only see something returning max value for the channel",0,0.9155967831611633
446640480,497,AnastaZIuk,2020-06-28T11:48:41Z,i don't see that the base checks it,0,0.8030678033828735
446640682,497,AnastaZIuk,2020-06-28T11:50:16Z,now in following commit it returns the pointer to the scratch memory where the cache is placed in,0,0.9903104901313782
446640806,497,AnastaZIuk,2020-06-28T11:51:11Z,corrected,0,0.9229590892791748
446640908,497,AnastaZIuk,2020-06-28T11:52:11Z,corrected in following commit,0,0.9914671182632446
450453979,497,AnastaZIuk,2020-07-06T20:10:40Z,allocated in scratch,0,0.9868905544281006
451123511,497,AnastaZIuk,2020-07-07T20:27:19Z,adjusted (i think no more i added is needed),0,0.9620353579521179
451123734,497,AnastaZIuk,2020-07-07T20:27:49Z,solved,0,0.9605372548103333
451123795,497,AnastaZIuk,2020-07-07T20:27:55Z,solved,0,0.9605372548103333
451123896,497,AnastaZIuk,2020-07-07T20:28:06Z,solved,0,0.9605372548103333
451123948,497,AnastaZIuk,2020-07-07T20:28:13Z,solved,0,0.9605372548103333
451124020,497,AnastaZIuk,2020-07-07T20:28:21Z,solved,0,0.9605372548103333
451124121,497,AnastaZIuk,2020-07-07T20:28:34Z,solved,0,0.9605372548103333
451124766,497,AnastaZIuk,2020-07-07T20:29:51Z,the validation is needed here - solved,0,0.9799318909645081
451127216,497,AnastaZIuk,2020-07-07T20:34:46Z,todo!,-1,0.4799036979675293
451132055,497,AnastaZIuk,2020-07-07T20:44:27Z,we probably need to write such one,0,0.9878879189491272
451755212,497,devshgraphicsprogramming,2020-07-08T18:47:29Z,"you do realize that you can save on scratch memory by only processing ""one layer at a time"" because you do not sum across layers? plus there's no need for caches outside of your decode scratch space",0,0.9709178805351257
451755269,497,devshgraphicsprogramming,2020-07-08T18:47:35Z,there's no need for caches outside of your decode scratch space,0,0.984754204750061
451755668,497,devshgraphicsprogramming,2020-07-08T18:48:24Z,why no division if input is unorm?,0,0.8794991374015808
451755882,497,devshgraphicsprogramming,2020-07-08T18:48:49Z,unused variable,0,0.983355700969696
451758738,497,devshgraphicsprogramming,2020-07-08T18:54:19Z,"you can run the decode,sum,encode routines not once for all layers, but multiple times, one layer at a time. copy the state, set the layer count to 1, adjust the base layers for input and output when performing each loop",0,0.990691065788269
451799090,497,devshgraphicsprogramming,2020-07-08T20:13:30Z,this should be the total extent of your scratch except for the scratch used to return per-layer-max values,0,0.9919235110282898
451799630,497,devshgraphicsprogramming,2020-07-08T20:14:33Z,"memset eats perf, allow undefined behaviour if images have undefined data in the extent you've asked for, this is what vulkan does anyway",0,0.7031846642494202
451802608,497,devshgraphicsprogramming,2020-07-08T20:20:39Z,if you hoist this loop to before decode and have this [code block] then you need far less scratch,0,0.9808719158172607
451803174,497,devshgraphicsprogramming,2020-07-08T20:21:46Z,erm if its a normalized format you definitely want to normalize (overriding `normalizeimagebytotalsatvalues` to `true`),0,0.9910023808479309
451804683,497,devshgraphicsprogramming,2020-07-08T20:24:35Z,"typo ""overwrites""",0,0.9894596338272095
451804909,497,devshgraphicsprogramming,2020-07-08T20:25:03Z,what's this about?,0,0.9754487872123718
451806025,497,devshgraphicsprogramming,2020-07-08T20:27:17Z,"you do realize that `readblockpos` is a global coordinate in the texture, not local w.r.t. your output offset and hence your scratch memory?",0,0.9936069250106812
451806872,497,devshgraphicsprogramming,2020-07-08T20:28:57Z,the if statement in particular,0,0.9821271300315857
451809967,497,devshgraphicsprogramming,2020-07-08T20:35:10Z,"`readblockarrayoffset` is relative to the region's data pointer, but a new ""proxy region"" could have been created by the clip functor, and so the offset would need to be added to the offset into the buffer in this new ""proxy region"" and then to the icpubuffer pointer of the image (which iirc should be what `outdata` actually is) p.s. i think `outdata` might be uninitialized !? could be my fault.",-1,0.6514407992362976
451812132,497,devshgraphicsprogramming,2020-07-08T20:39:41Z,"hmm actually if we had an image with negative values, our sat could dip below 0, which would require us to actually normalize by knowing the max and min of the sat if normalizing to 0,1 range, we should have: `(val-min)/(max-min)` if normalizing to -1,1 range, we should have: `(2.0*val-max-min)/(max-min)`",0,0.9741250872612
451812985,497,devshgraphicsprogramming,2020-07-08T20:41:20Z,but leave it on for `irr_debug`,0,0.9939262270927429
451822733,497,devshgraphicsprogramming,2020-07-08T21:01:02Z,"this is the proper way to do it for a single channel (trivially extendable to 2,3,4), assuming you have z,y,x traversal order as you have right now [code block] where `pixel` is both your decode scratch and your sat scratch at once (the algorithm is ""in place"", i.e. doesn't require any extra memory than the input) plus its much faster. in the above snippet, the `pixel` you touch are actually sat pixels, because the traversal order guarantees that you've turned these value pixels into sat pixels in previous iterations",0,0.9473456144332886
452029647,497,AnastaZIuk,2020-07-09T07:50:31Z,oh xd,1,0.7580692172050476
452030670,497,AnastaZIuk,2020-07-09T07:52:21Z,"right, i will correct it",0,0.9835077524185181
452963472,497,AnastaZIuk,2020-07-10T17:00:00Z,"since scratch covers my full extent i can use it for sure because your common execute lambda will perform clipping to an particular extent with some offset if given, and knowing the scratch extent in advance i can specify `scratchinplaneoffset` to later user it to compute real byte offsets (knowing channel amount, the rest is on pointer arithmetic side(",0,0.986764132976532
452965356,497,AnastaZIuk,2020-07-10T17:03:53Z,and it's locaal [a link],0,0.9830097556114197
453198182,497,devshgraphicsprogramming,2020-07-11T14:02:48Z,you kinda need division always for unorm and snorm,0,0.9586563110351562
453198233,497,devshgraphicsprogramming,2020-07-11T14:03:33Z,scratch size should be independent of the number of layers,0,0.9899476170539856
453198533,497,devshgraphicsprogramming,2020-07-11T14:06:42Z,"nope its the second parameter of this lambda, and it gets fed with `localcoord+trueoffset`, so its global (relative to mip levels origin) in its mip level",0,0.9920808672904968
453352512,497,AnastaZIuk,2020-07-12T19:11:33Z,it isn't valid anymore because i will remove layers from scratch,0,0.871336042881012
453356370,497,AnastaZIuk,2020-07-12T19:51:43Z,corrected in following commit,0,0.9914671182632446
453356414,497,AnastaZIuk,2020-07-12T19:52:11Z,corrected in following commit,0,0.9914671182632446
453356526,497,AnastaZIuk,2020-07-12T19:53:53Z,"yeah yeah, got it. actually i didn't figure it out, my vision was different",0,0.671167254447937
453357111,497,AnastaZIuk,2020-07-12T19:59:43Z,corrected in following commit,0,0.9914671182632446
453357317,497,AnastaZIuk,2020-07-12T20:01:35Z,to fix,0,0.9448611736297607
463598032,497,devshgraphicsprogramming,2020-07-31T13:04:07Z,why why why are you still allocating scratch memory?,0,0.939752459526062
463598904,497,AnastaZIuk,2020-07-31T13:05:59Z,"`current += pixel(readblockpos-vec4(0,0,1,0));` it gives you -z at start and it will crash i'm wondering if my way of doing it would be good if i limit it to single layer at a time (+ without doing sum across layers, it seems to me the above does that and as far as i remember we weren't to do it)",0,0.8723162412643433
463604407,497,AnastaZIuk,2020-07-31T13:16:50Z,[a link] [code block],0,0.9876729846000671
463607008,497,AnastaZIuk,2020-07-31T13:22:01Z,"i don't get the pseudo code [a link] and i think that [a link] i don't get it how i can touch `w` otherwise, there must be 2 scratches at once holding a single layer then probably",0,0.8377404808998108
463682026,497,devshgraphicsprogramming,2020-07-31T15:34:44Z,"i noticed i made a typo in the offsets on the last 4 lines. everything is fine, but you need to guard the filter for the corner cases properly [code block]",0,0.9869332313537598
463689169,497,devshgraphicsprogramming,2020-07-31T15:47:51Z,again!,1,0.5427128076553345
463690033,497,devshgraphicsprogramming,2020-07-31T15:49:30Z,unused variable,0,0.983355700969696
463690314,497,devshgraphicsprogramming,2020-07-31T15:50:03Z,oeo fo you use it for the image min/max ?,0,0.9879735708236694
463690923,497,devshgraphicsprogramming,2020-07-31T15:51:07Z,do not reallocate memory and copy scratch scratch == memory to be used temporarily and contents to be thrown away (not preserved),0,0.9853941202163696
463692553,497,devshgraphicsprogramming,2020-07-31T15:54:05Z,update me when done.,0,0.9757014513015747
463770594,497,devshgraphicsprogramming,2020-07-31T18:39:22Z,this debug thing should probably move to the per-layer loop,0,0.9928696751594543
463772019,497,devshgraphicsprogramming,2020-07-31T18:42:43Z,"see my new code listing in the comments, i had the offsets wrong for the second part of the sum (the last 4 lines here) also there should be no addition/subtraction if the readblockpos coordinate is 0 in the component(s) that will get offset by `-1` [also mentioned in my revised listing]",0,0.9927557110786438
463772466,497,devshgraphicsprogramming,2020-07-31T18:43:45Z,what's this if statement about?,0,0.9895268678665161
463772640,497,devshgraphicsprogramming,2020-07-31T18:44:09Z,still,0,0.9232051968574524
463772728,497,devshgraphicsprogramming,2020-07-31T18:44:22Z,still,0,0.9232051968574524
463973877,497,AnastaZIuk,2020-08-01T15:42:01Z,that's what has confused me at all [a link] and that's why i typed i do not understand what about `w` and did weird things with copy scratch [a link] to fix!,-1,0.9765973687171936
463974040,497,AnastaZIuk,2020-08-01T15:43:57Z,"i know i know, i was waiting for review and [a link]",0,0.8972755074501038
464343910,497,AnastaZIuk,2020-08-03T11:03:10Z,i wanted it to be a cache for max (now i need also min),0,0.9844275116920471
464344202,497,AnastaZIuk,2020-08-03T11:03:50Z,corrected in following commit,0,0.9914671182632446
464344783,497,AnastaZIuk,2020-08-03T11:05:08Z,corrected in following commit,0,0.9914671182632446
465248773,497,AnastaZIuk,2020-08-04T18:31:56Z,corrected,0,0.9229590892791748
465249052,497,AnastaZIuk,2020-08-04T18:32:27Z,corrected,0,0.9229590892791748
465249138,497,AnastaZIuk,2020-08-04T18:32:36Z,corrected,0,0.9229590892791748
465620665,497,Crisspl,2020-08-05T10:13:36Z,make it `const decodetype&`,0,0.9922256469726562
465629912,497,Crisspl,2020-08-05T10:31:49Z,erm imo validation should return false and not let setting multiple regions defining same image pixels. why would it ever be correct/useful? ?,0,0.949169933795929
466975586,497,Crisspl,2020-08-07T11:12:20Z,"why `+=`? then in case when you have layers 0,1,2,3, `inbaselayer` gets values 0,1,3,6. to fix!",0,0.9678208827972412
466976053,497,Crisspl,2020-08-07T11:13:39Z,"`0, 0` not `1, 1`. actually it should be a loop over all texels encoded within the block",0,0.9919105172157288
466976777,497,Crisspl,2020-08-07T11:15:22Z,"thats wrong for sure, `readblockpos` is an absolute position in input image. what you want is position in processed sub-image (with extent defined by `state->extent`)",0,0.9654057025909424
466978101,497,Crisspl,2020-08-07T11:18:35Z,"why does it require scratch size to fit whole input image's texels? you need only just enough space to fit texels of processed sub-image (`state->extent`, not `inimage->extent`)",0,0.9919341802597046
466978635,497,Crisspl,2020-08-07T11:20:02Z,"doesnt make sense at all, you are adding offset taken from output region to `indata`",0,0.9872661828994751
466979740,497,Crisspl,2020-08-07T11:22:58Z,"ofc it's wrong, you're computing strides of output region with input image format info",0,0.8780773878097534
467036269,497,devshgraphicsprogramming,2020-08-07T13:22:02Z,because vulkan allows it and its well defined.,0,0.9810665845870972
467038059,497,devshgraphicsprogramming,2020-08-07T13:25:07Z,i think i've repeated it 5x times already,0,0.9631710052490234
467038390,497,devshgraphicsprogramming,2020-08-07T13:25:37Z,did you read my code and verify that `readblockpos` is relateive to mip-map's origin ?,0,0.9941895008087158
467045894,497,devshgraphicsprogramming,2020-08-07T13:38:35Z,ok,0,0.8787186145782471
467055475,497,Crisspl,2020-08-07T13:54:21Z,"yes, it's absolute position within mip-level",0,0.9907633662223816
467056695,497,Crisspl,2020-08-07T13:56:17Z,"but really, matt, this filter api needs docs, lots of it. i've been struggling with it as well while developing padded copy filter. and now while helping arek because i forgot some things",-1,0.9856966733932495
467071625,497,AnastaZIuk,2020-08-07T14:21:02Z,it should have been documented,0,0.9820364117622375
467087699,497,devshgraphicsprogramming,2020-08-07T14:47:04Z,"my suggestion is that, everytime you find something ""non obvious"" document it.",0,0.9040634036064148
467088203,497,devshgraphicsprogramming,2020-08-07T14:47:52Z,undo all this.,0,0.9089837074279785
467088765,497,devshgraphicsprogramming,2020-08-07T14:48:49Z,"leave as is, see the comment on line `140`",0,0.9932592511177063
467089024,497,devshgraphicsprogramming,2020-08-07T14:49:16Z,"no need to change types to `i32`, see the comment above.",0,0.99358069896698
470074884,497,AnastaZIuk,2020-08-13T16:26:40Z,corrected in following commit,0,0.9914671182632446
470074990,497,AnastaZIuk,2020-08-13T16:26:49Z,corrected in following commit,0,0.9914671182632446
470075081,497,AnastaZIuk,2020-08-13T16:26:58Z,corrected in following commit,0,0.9914671182632446
470075418,497,AnastaZIuk,2020-08-13T16:27:33Z,"the request for documentation has been pushed to our discord, todo!",0,0.514137327671051
470075549,497,AnastaZIuk,2020-08-13T16:27:42Z,corrected in following commit,0,0.9914671182632446
470075652,497,AnastaZIuk,2020-08-13T16:27:50Z,corrected in following commit,0,0.9914671182632446
470075708,497,AnastaZIuk,2020-08-13T16:27:57Z,corrected in following commit,0,0.9914671182632446
470076723,497,AnastaZIuk,2020-08-13T16:29:31Z,corrected in following commit,0,0.9914671182632446
470078086,497,AnastaZIuk,2020-08-13T16:31:39Z,corrected in following commit,0,0.9914671182632446
470079015,497,AnastaZIuk,2020-08-13T16:33:07Z,corrected in following commit,0,0.9914671182632446
470187251,497,AnastaZIuk,2020-08-13T19:13:08Z,"okay i see it as following: given a `newreadblockpos` as my position where my ""rectangle"" begins and `readblockpos` as my position relative to mipmap in a certain layer i can use it to fill my image todo: first way: - use `newreadblockpos` in equation to fill an output image with texels fetched from scratch accordingly - take into account mipmap buffer offset and layer offset as well since api doesn't let us using current handled region unless it's output region second one (**probably correct i think, for sure! check it out**) - figure out `clip_functor_t` and see how does it relate to array offset given in the decode/encode lambda and then use it",1,0.6841322779655457
470188999,497,AnastaZIuk,2020-08-13T19:15:58Z,todo: follow [a link],0,0.9884252548217773
470264943,497,Crisspl,2020-08-13T21:40:58Z,you cant just copy every time into same output address,0,0.9544499516487122
470265381,497,Crisspl,2020-08-13T21:41:53Z,it's ok iirc,0,0.4985629618167877
470265499,497,Crisspl,2020-08-13T21:42:10Z,its ok iirc,1,0.7020639181137085
470266840,497,Crisspl,2020-08-13T21:45:26Z,output format must always be not block-compressed (because we dont support `encodepixels` for block-compressed formats) so this is not needed,0,0.9900541305541992
470267309,497,Crisspl,2020-08-13T21:46:34Z,"ah, u have comment about it here. anyway if you keep the loop, then you have to adjust `entryscratchaddress` accordingly",0,0.6208605170249939
470268869,497,Crisspl,2020-08-13T21:50:23Z,dont use c-style casts,0,0.9399403929710388
470270077,497,Crisspl,2020-08-13T21:53:22Z,just use `readblockarrayoffset` the same way u do in `decode()`. nothing changes here. it's just named incorrectly,0,0.9922202229499817
470662133,497,AnastaZIuk,2020-08-14T14:35:44Z,corrected in following commit,0,0.9914671182632446
470679905,497,AnastaZIuk,2020-08-14T15:01:54Z,corrected in following commit,0,0.9914671182632446
470717777,497,devshgraphicsprogramming,2020-08-14T16:07:31Z,why is this a `static` !?,0,0.9279242753982544
470720777,497,devshgraphicsprogramming,2020-08-14T16:13:32Z,"common state (from which you inherit) has a union between `{extent,layercount}` and a `vectorsimdu32`",0,0.9953611493110657
470722311,497,devshgraphicsprogramming,2020-08-14T16:16:11Z,"this seems very off, should be `w<copylayercount;`",0,0.7303522229194641
470723705,497,devshgraphicsprogramming,2020-08-14T16:18:55Z,"you could have just used `readblockpos>core::vectorsimdi32(0,0,0,0)`",0,0.9922448992729187
470723819,497,devshgraphicsprogramming,2020-08-14T16:19:08Z,which gives a boolean vector.,0,0.9878051280975342
470764671,497,AnastaZIuk,2020-08-14T17:41:18Z,corrected in following commit,0,0.9914671182632446
470767906,497,AnastaZIuk,2020-08-14T17:48:16Z,"the loop is only needed for [code block] what if in/out base layers start with 3 and there are 7 array layers at all? then the final inbaselayer will be beyond the available layers in certain loop iteration, won't it?",0,0.9884478449821472
470774867,497,AnastaZIuk,2020-08-14T18:02:38Z,corrected,0,0.9229590892791748
470775008,497,AnastaZIuk,2020-08-14T18:02:56Z,"eee i won't use it anymore, to delete!",0,0.5385695695877075
470775059,497,AnastaZIuk,2020-08-14T18:03:03Z,corrected,0,0.9229590892791748
472113081,497,devshgraphicsprogramming,2020-08-18T11:40:03Z,"typo, below has one l",0,0.9727720022201538
472114037,497,devshgraphicsprogramming,2020-08-18T11:41:57Z,i'm pretty sure that `state->inoffset` is not counted in blocks. also are you sure that `readblockpos` is counted in blocks?,0,0.9879633188247681
472115636,497,devshgraphicsprogramming,2020-08-18T11:45:02Z,remove the block iteration for loop,0,0.978490948677063
472115867,497,devshgraphicsprogramming,2020-08-18T11:45:27Z,rename `read` to `write`,0,0.9902336597442627
472116183,497,devshgraphicsprogramming,2020-08-18T11:45:58Z,same as [a link],0,0.9871845841407776
472117806,497,devshgraphicsprogramming,2020-08-18T11:49:05Z,"your use of lambdas just made this function slow... if you just did it in-place with if statements if coult actually be optimized away also, `normalizeasusual` should be the same as `normalizeasunsigned`",0,0.8696101903915405
472118154,497,devshgraphicsprogramming,2020-08-18T11:49:41Z,no need for you to know block dimensions for the `outformat`,0,0.9920483231544495
472127903,497,devshgraphicsprogramming,2020-08-18T12:07:21Z,"what you have right no is correct for reading ""from image""",0,0.9796835780143738
472130136,497,devshgraphicsprogramming,2020-08-18T12:11:47Z,i'd propose loading to scratch as usual (without offsets) to get high perf and then applying offsets when doing the sum over scratch space,0,0.9879251718521118
472130243,497,devshgraphicsprogramming,2020-08-18T12:11:58Z,hoist declaration of array above the loop,0,0.988875150680542
472130519,497,devshgraphicsprogramming,2020-08-18T12:12:31Z,i think we're clear now?,0,0.9846805930137634
472136173,497,AnastaZIuk,2020-08-18T12:22:46Z,"we are doing sat in place where decode is, won't it destroy the final values being computed?",0,0.9789231419563293
472140274,497,devshgraphicsprogramming,2020-08-18T12:30:03Z,there's only one place where you need to add the offset if you do it while doing the sum,0,0.9895768165588379
472149520,497,devshgraphicsprogramming,2020-08-18T12:41:10Z,"yes it will, my bad",-1,0.9900479316711426
472177587,497,devshgraphicsprogramming,2020-08-18T13:10:04Z,if your layer count + offsets in the original state go out of bounds `validate` should have caught that.,0,0.9803820848464966
472178033,497,devshgraphicsprogramming,2020-08-18T13:10:30Z,your loop is definitely wrong,-1,0.9001865386962891
472178201,497,AnastaZIuk,2020-08-18T13:10:43Z,"i think yeah, it will be documented soon by the way:)",1,0.8296947479248047
472180497,497,AnastaZIuk,2020-08-18T13:13:04Z,"okay, i will check it and correct it",0,0.971855878829956
472181435,497,devshgraphicsprogramming,2020-08-18T13:14:01Z,"this should be done outside the decode loop (in a separate loop to clear the xy, xz, yz planes), this currently breaks loop unrolling and automatic simd and readability",0,0.9918738007545471
472540988,497,AnastaZIuk,2020-08-18T23:05:00Z,corrected in following commit,0,0.9914671182632446
472542343,497,AnastaZIuk,2020-08-18T23:09:11Z,"my dear, i'm sure [a link] + [a link]",-1,0.9743309020996094
472542551,497,AnastaZIuk,2020-08-18T23:09:49Z,to balance,0,0.9698941707611084
472543199,497,AnastaZIuk,2020-08-18T23:11:49Z,corrected in following commit,0,0.9914671182632446
472543840,497,AnastaZIuk,2020-08-18T23:14:02Z,corrected in following commit,0,0.9914671182632446
472544087,497,AnastaZIuk,2020-08-18T23:14:49Z,corrected in following commit,0,0.9914671182632446
472544384,497,AnastaZIuk,2020-08-18T23:15:37Z,corrected in following commit,0,0.9914671182632446
472545843,497,AnastaZIuk,2020-08-18T23:20:11Z,"okay, corrected in following commit",0,0.9481315612792969
472551659,497,AnastaZIuk,2020-08-18T23:37:51Z,corrected in following commit,0,0.9914671182632446
472563057,497,AnastaZIuk,2020-08-19T00:17:29Z,corrected,0,0.9229590892791748
472992792,497,devshgraphicsprogramming,2020-08-19T12:32:41Z,what happened here?,0,0.9823284149169922
472996066,497,devshgraphicsprogramming,2020-08-19T12:38:14Z,signed and normalized format,0,0.9857648015022278
473006445,497,AnastaZIuk,2020-08-19T12:55:15Z,"it was wrong, i have seen it recently while using the lambdas with those buffers",0,0.770587682723999
473008336,497,AnastaZIuk,2020-08-19T12:58:04Z,you wamted me to change usual lambda to this afaik but remember we have got a flag that may force normalizing regardless of format,0,0.9330001473426819
473025677,497,devshgraphicsprogramming,2020-08-19T13:23:47Z,"i'm concerned about sfloat always normalizing inot [1-,1] which is not very helpful.",-1,0.9540036916732788
410378702,468,devshgraphicsprogramming,2020-04-17T17:50:54Z,"what are you doing here, this is a dead variable!",-1,0.982896625995636
410378864,468,devshgraphicsprogramming,2020-04-17T17:51:10Z,its actually writeable cause gli supports writing it,0,0.9274592399597168
410383381,468,devshgraphicsprogramming,2020-04-17T17:59:40Z,too many `o`s,0,0.980544924736023
410388592,468,devshgraphicsprogramming,2020-04-17T18:09:40Z,"there's no conversion needed, maybe a flip at most",0,0.9830437302589417
410388810,468,devshgraphicsprogramming,2020-04-17T18:10:06Z,"there's no conversion needed, maybe a flip at most",0,0.9830437302589417
410388906,468,devshgraphicsprogramming,2020-04-17T18:10:13Z,"there's no conversion needed, maybe a flip at most",0,0.9830437302589417
410389701,468,devshgraphicsprogramming,2020-04-17T18:11:52Z,you got the formats for the `gettexelorblockbytesize` completely wrong here,0,0.8662233948707581
410390439,468,devshgraphicsprogramming,2020-04-17T18:13:18Z,you should not be firing off a conversion if `srcformat==destformat`,0,0.9833473563194275
410391068,468,devshgraphicsprogramming,2020-04-17T18:14:33Z,why are the old regions going in as a reference?,0,0.9743991494178772
410391155,468,devshgraphicsprogramming,2020-04-17T18:14:44Z,`regions` shadows `regions`,0,0.9916350841522217
410391818,468,devshgraphicsprogramming,2020-04-17T18:15:53Z,"there's no flipping going on here, just pointer arithmetic",0,0.9857041835784912
410392321,468,devshgraphicsprogramming,2020-04-17T18:16:54Z,you could have that be an `icpubuffer` already,0,0.9937136769294739
410393248,468,devshgraphicsprogramming,2020-04-17T18:18:50Z,"no `convertfilter` will already take care of this without any problems, you can just set the state to cover the whole image above",0,0.9906961917877197
410393907,468,devshgraphicsprogramming,2020-04-17T18:20:03Z,this is always in texels,0,0.9899635910987854
410394453,468,devshgraphicsprogramming,2020-04-17T18:21:04Z,"wait, what and why?",-1,0.7047418355941772
410394828,468,devshgraphicsprogramming,2020-04-17T18:21:48Z,"you could have already passed this in, instead of `rowdata`",0,0.9940419793128967
410396488,468,AnastaZIuk,2020-04-17T18:24:59Z,"i told u that i got some weird crashes, anyway now we need to fix the bug firstly",-1,0.8988119959831238
410396540,468,AnastaZIuk,2020-04-17T18:25:06Z,xd,0,0.9481887817382812
410396737,468,AnastaZIuk,2020-04-17T18:25:26Z,it flips it indeed,0,0.9249445796012878
410397943,468,AnastaZIuk,2020-04-17T18:27:43Z,okay,0,0.7269688844680786
410398079,468,devshgraphicsprogramming,2020-04-17T18:27:58Z,in texels not blocks :(,-1,0.9877929091453552
410399413,468,devshgraphicsprogramming,2020-04-17T18:30:40Z,"this is how i like my include paths, so i can see the 3rdparty lib they come from",0,0.7316092848777771
410400186,468,devshgraphicsprogramming,2020-04-17T18:32:10Z,"nice, i like it",1,0.9870188236236572
410400820,468,devshgraphicsprogramming,2020-04-17T18:33:28Z,here you want 0,0,0.9676892757415771
410400915,468,devshgraphicsprogramming,2020-04-17T18:33:39Z,also 0,0,0.9622345566749573
410401071,468,AnastaZIuk,2020-04-17T18:33:58Z,it does what it did before i think and seems it flips image,0,0.941748857498169
410401381,468,devshgraphicsprogramming,2020-04-17T18:34:36Z,"no you want to define a whole new region, full 2d extent (depth==1), miplevel 0, base array level 0 and array count 1",0,0.9902991056442261
410401907,468,devshgraphicsprogramming,2020-04-17T18:35:43Z,you have control over this,0,0.9418036937713623
410401967,468,devshgraphicsprogramming,2020-04-17T18:35:51Z,you have control over this,0,0.9418036937713623
410402235,468,AnastaZIuk,2020-04-17T18:36:26Z,"cause rendered is flipped in reference to written one, but actaully you are right probably",0,0.961406946182251
410402369,468,devshgraphicsprogramming,2020-04-17T18:36:43Z,explain what's going on here,0,0.9730286002159119
410436736,468,AnastaZIuk,2020-04-17T19:49:51Z,"nope, i can't remember but tga is sensitive to it as far as i remember it was previously commented it is required",0,0.6930471658706665
410436833,468,AnastaZIuk,2020-04-17T19:50:03Z,"nope, i can't remember but tga is sensitive to it as far as i remember it was previously commented it is required",0,0.6930471658706665
410438102,468,AnastaZIuk,2020-04-17T19:52:39Z,why? it calculates texels amount with pitch for `ef_a1r5g5b5_unorm_pack16` entry,0,0.990016758441925
410445073,468,AnastaZIuk,2020-04-17T20:08:31Z,mistake,-1,0.7587538361549377
410448389,468,AnastaZIuk,2020-04-17T20:16:01Z,you told me once i need to fly through regions to perform it per mipmaps,0,0.8961858749389648
410448551,468,AnastaZIuk,2020-04-17T20:16:22Z,when i asked you what about mipmaped layered images,0,0.9757459759712219
410449933,468,AnastaZIuk,2020-04-17T20:19:28Z,"there is no actually field such as ""mip level count"" in state, how can i do it?",0,0.9874322414398193
410450496,468,AnastaZIuk,2020-04-17T20:20:29Z,it's a single row image,0,0.9822794795036316
410450650,468,AnastaZIuk,2020-04-17T20:20:49Z,it will give it's x texel amount,0,0.9911342859268188
410450981,468,AnastaZIuk,2020-04-17T20:21:40Z,"okay, so i will exchange void* to icpubuffer",0,0.9799937009811401
410451224,468,AnastaZIuk,2020-04-17T20:22:07Z,em additionally it should be there [a link],0,0.9761465191841125
410452864,468,AnastaZIuk,2020-04-17T20:25:38Z,"for not bc format's it returns 1 rather, so it;s good i think",1,0.8670711517333984
410453867,468,AnastaZIuk,2020-04-17T20:27:58Z,"yeah it returns 1 for not bc, it's good",1,0.9269380569458008
410467774,468,AnastaZIuk,2020-04-17T21:01:18Z,the input is in texels as far as i know,0,0.9832702875137329
410467854,468,AnastaZIuk,2020-04-17T21:01:28Z,so computed value is in texels as well,0,0.9935441017150879
410468629,468,AnastaZIuk,2020-04-17T21:03:17Z,you mean?,0,0.9712957143783569
410468780,468,AnastaZIuk,2020-04-17T21:03:39Z,:),1,0.7730679512023926
410470145,468,AnastaZIuk,2020-04-17T21:06:56Z,haven't you seen it? [a link],0,0.9795169830322266
410470534,468,AnastaZIuk,2020-04-17T21:07:50Z,you mean?,0,0.9712957143783569
410470650,468,AnastaZIuk,2020-04-17T21:08:05Z,you mean?,0,0.9712957143783569
410473296,468,AnastaZIuk,2020-04-17T21:14:38Z,"those are variables and pointers which value depends on final format, but i left is simmilar as it was before actually it just copy to a row needed for jpg library (and png does the same) for writing process, but it will warn if by some miracle format at that point isn's ef_r8_srgb or ef_r8g8b8_srgb",0,0.95646071434021
410473335,468,AnastaZIuk,2020-04-17T21:14:45Z,it's good,1,0.9623252153396606
410485625,468,AnastaZIuk,2020-04-17T21:47:28Z,"if you mean i have got 2 same vectors - look at their types, they are different so i have to do that",0,0.7849938869476318
410485639,468,AnastaZIuk,2020-04-17T21:47:30Z,"if you mean i have got 2 same vectors - look at their types, they are different so i have to do that",0,0.7849938869476318
410485942,468,AnastaZIuk,2020-04-17T21:48:12Z,i did it because my project could not see those files,0,0.9728896617889404
410486517,468,AnastaZIuk,2020-04-17T21:49:22Z,maybe we should change it in cmake,0,0.9925196170806885
410486994,468,AnastaZIuk,2020-04-17T21:50:36Z,fixed and tested,0,0.9873011112213135
410487588,468,AnastaZIuk,2020-04-17T21:52:13Z,"that's why i asked you a few days ago how to get entire single layer, only one specified by the user",0,0.9530869126319885
410675871,468,devshgraphicsprogramming,2020-04-18T09:44:42Z,itsn't true color 32bit rgba8 ?,0,0.9789003133773804
410675987,468,devshgraphicsprogramming,2020-04-18T09:46:32Z,"you're iterating over alll regions, ever you should be iterating over mipmaps [code block] the filter itself will get the appropriate regions and do operations on them (and clip the areas properly by itself as well)",0,0.992002010345459
410676065,468,devshgraphicsprogramming,2020-04-18T09:47:43Z,"`./3rdparty` is an include path already, you should be seeing it",0,0.9903643727302551
410676173,468,devshgraphicsprogramming,2020-04-18T09:49:08Z,"you have control over the size of the image you're saving, you should know how many blocks it is anyway, not have to calculate it.",0,0.9821611642837524
410676178,468,devshgraphicsprogramming,2020-04-18T09:49:13Z,"you have control over the size of the image you're saving, you should know how many blocks it is anyway, not have to calculate it.",0,0.9821611642837524
410676179,468,devshgraphicsprogramming,2020-04-18T09:49:15Z,"you have control over the size of the image you're saving, you should know how many blocks it is anyway, not have to calculate it.",0,0.9821611642837524
410676241,468,devshgraphicsprogramming,2020-04-18T09:49:55Z,so why make this look like a generalpurpose function if its only intended to work with an image created with `iimageassethandlerbase::gettopimagedataforcommonwriting` ?,0,0.9945275187492371
410676343,468,devshgraphicsprogramming,2020-04-18T09:50:54Z,this is a gli loader! it loads bc1-7 images!,1,0.9116167426109314
410676381,468,devshgraphicsprogramming,2020-04-18T09:51:18Z,use smart pointers and move semantics,0,0.9848746657371521
410676459,468,devshgraphicsprogramming,2020-04-18T09:52:43Z,"ugh, the whole point of taking a `core::smart_refctd_ptr` was to avoid the memcpy, just take over the ownership of the buffer and use it!",0,0.9360785484313965
410676527,468,devshgraphicsprogramming,2020-04-18T09:53:22Z,what are you doing?,0,0.9787433743476868
410676758,468,devshgraphicsprogramming,2020-04-18T09:55:15Z,wait why on earth are you making a single row image?,-1,0.6453627347946167
410677037,468,devshgraphicsprogramming,2020-04-18T09:58:25Z,"its still dead, all 3 lines",-1,0.9441546201705933
410677129,468,devshgraphicsprogramming,2020-04-18T09:59:05Z,a ` ` conversion still costs!,0,0.9081368446350098
410677325,468,devshgraphicsprogramming,2020-04-18T10:01:33Z,"we have support for both rgb and bgr formats for textures, the loader must be reporting the format wrong (in the creation parameters) if it doesn't work without conversion",0,0.9348639249801636
410677361,468,devshgraphicsprogramming,2020-04-18T10:02:13Z,we support that texture format 100%,0,0.5327656269073486
410677582,468,devshgraphicsprogramming,2020-04-18T10:04:32Z,"if you're going to use `asset::iimageassethandlerbase::calcpitchinblock` as a value any time that a ""texel count value is required"" the least you could do is assert that the block size is 1x1x1",0,0.9944656491279602
410678519,468,AnastaZIuk,2020-04-18T10:15:23Z,"cause tga did it before, there is likely a row stream provided by tga and it used convertcolor. i had to remake it at least",0,0.971529483795166
410680121,468,AnastaZIuk,2020-04-18T10:32:27Z,ah you're right,0,0.7263306975364685
410680480,468,AnastaZIuk,2020-04-18T10:36:07Z,why?,0,0.8699262738227844
410680855,468,AnastaZIuk,2020-04-18T10:39:55Z,"tga loader and writer did it before, i know there there is and was a support for that, but not sure if i should change it. there were comments about it that tga requires it",0,0.9614508748054504
410680894,468,AnastaZIuk,2020-04-18T10:40:16Z,i know [a link],0,0.958286464214325
410682856,468,AnastaZIuk,2020-04-18T10:58:52Z,"actually it depends, but will just take `bytespertexel`",0,0.9732040166854858
410682903,468,AnastaZIuk,2020-04-18T10:59:09Z,it may be rgb8 and rgba8,0,0.9832594394683838
410684198,468,AnastaZIuk,2020-04-18T11:12:33Z,but it did not work for me,0,0.9138491749763489
410684593,468,AnastaZIuk,2020-04-18T11:15:56Z,"image at that point is translated to have only top data, the writer encapsulates it's implementation, i don't find it much wrong solution",-1,0.5062173008918762
410684658,468,AnastaZIuk,2020-04-18T11:16:42Z,but i don't undestand quite what you mean,-1,0.731420636177063
410684754,468,AnastaZIuk,2020-04-18T11:17:36Z,"okay, i will use custom buffer allocator craetion",0,0.9816972613334656
410687215,468,AnastaZIuk,2020-04-18T11:41:09Z,i'm putting there true texel amount,0,0.9636623859405518
410687449,468,AnastaZIuk,2020-04-18T11:43:40Z,"but it is in a loader, nobody will use it and we are sure it isn't bc",0,0.9817222952842712
410688009,468,AnastaZIuk,2020-04-18T11:50:52Z,okay,0,0.7269688844680786
410688970,468,AnastaZIuk,2020-04-18T12:02:14Z,it doesn't cost anything,0,0.7915798425674438
410689050,468,AnastaZIuk,2020-04-18T12:02:50Z,"there was a mistake, fixed",0,0.825548529624939
410690779,468,devshgraphicsprogramming,2020-04-18T12:20:25Z,great and then you do nothing with the copy buffer :facelpalm:,1,0.9930074214935303
410691340,468,devshgraphicsprogramming,2020-04-18T12:25:49Z,ah two memcpys,0,0.9076092839241028
410691350,468,devshgraphicsprogramming,2020-04-18T12:25:55Z,use `swap_ranges`,0,0.9922347068786621
410691473,468,devshgraphicsprogramming,2020-04-18T12:27:12Z,"just create an image in the native tga format, then `convert` at the end, dont do a weird 1d image per row",-1,0.5590548515319824
410691537,468,devshgraphicsprogramming,2020-04-18T12:27:50Z,this whole function's existence probably doesn't make sense at all,0,0.8566209673881531
410691689,468,devshgraphicsprogramming,2020-04-18T12:29:00Z,when building or intellisense?,0,0.9871534705162048
410691976,468,AnastaZIuk,2020-04-18T12:31:42Z,when building,0,0.9685471057891846
410692139,468,devshgraphicsprogramming,2020-04-18T12:33:17Z,dont call `converttexeltoblocks` its confusing as fuck and its a noop for a png image,-1,0.9887619614601135
410692149,468,devshgraphicsprogramming,2020-04-18T12:33:28Z,or make the blockinfo at all,0,0.9710964560508728
410692864,468,devshgraphicsprogramming,2020-04-18T12:39:41Z,"wondered if you could have done the `getpngconvertedoutput` straight from the input image view, and not call `gettopimagedataforcommonwriting`",0,0.9945878982543945
410694226,468,devshgraphicsprogramming,2020-04-18T12:51:16Z,converter should work from bc formats (not to) actually,0,0.9885193705558777
410694302,468,AnastaZIuk,2020-04-18T12:51:46Z,there is no memcpy,0,0.9714572429656982
410694395,468,devshgraphicsprogramming,2020-04-18T12:52:08Z,"you shouldn't run a conversion if the input and output formats match, then just run a flatten filter (much much faster)",0,0.9860462546348572
410694574,468,devshgraphicsprogramming,2020-04-18T12:53:00Z,ok lets move this to [a link],0,0.9857843518257141
410694935,468,devshgraphicsprogramming,2020-04-18T12:55:37Z,"just remove those conversions and test it without, i'm pretty sure it will work (if you fix everything along the way to report the format correctly)",0,0.935636043548584
410694978,468,devshgraphicsprogramming,2020-04-18T12:55:57Z,works for me and criss it seems on our branches,0,0.8872507214546204
410695241,468,AnastaZIuk,2020-04-18T12:58:04Z,"but i need a convert, so filters usage -> i needed create an image",0,0.9670758247375488
410696016,468,devshgraphicsprogramming,2020-04-18T13:04:11Z,yeah you probably don't need this,0,0.8453505635261536
410696136,468,AnastaZIuk,2020-04-18T13:05:11Z,i think we need such a function in various writers,0,0.9726903438568115
410696144,468,devshgraphicsprogramming,2020-04-18T13:05:15Z,this needs logical fixing,0,0.9646597504615784
410696150,468,AnastaZIuk,2020-04-18T13:05:20Z,there will be many code duplication otherwise,0,0.9465339779853821
410696289,468,AnastaZIuk,2020-04-18T13:06:56Z,width is in texels,0,0.9858028888702393
410696356,468,AnastaZIuk,2020-04-18T13:07:42Z,"since texelblockbytesize may be in texels or blocks, we need to make sure byte size will be in texels , input may be various",0,0.9905067086219788
410696451,468,AnastaZIuk,2020-04-18T13:08:16Z,to final calculate row pitch in texels,0,0.9911887645721436
410696540,468,devshgraphicsprogramming,2020-04-18T13:08:50Z,you should assert that block size == 1x1x1,0,0.9881269335746765
410697116,468,devshgraphicsprogramming,2020-04-18T13:14:36Z,"to be honest there's no reason for `iimageassethandlerbase::gettopimagedataforcommonwriting` to exist, if you have a function like this (it could just take an image view as an input instead of image)",0,0.9905063509941101
410697208,468,devshgraphicsprogramming,2020-04-18T13:15:12Z,"seems like png and jpg writer could use the same function. i have the exact same comment here: - don't convert if formats match, use flatten instead - take imageview as input - get rid of `gettopimagedataforcommonwriting` you could do this all in here",0,0.9880892634391785
410697383,468,devshgraphicsprogramming,2020-04-18T13:17:05Z,"also don't convert the entire, whole image, just the miplevel+arraylayer you're actually doing to write out ;)",1,0.7869499325752258
410697392,468,devshgraphicsprogramming,2020-04-18T13:17:12Z,icpuimageview,0,0.9687854051589966
410697613,468,devshgraphicsprogramming,2020-04-18T13:18:28Z,ok,0,0.8787186145782471
410697722,468,devshgraphicsprogramming,2020-04-18T13:19:06Z,"you can get rid of the switch, `convertedimage` will 100% be in only these two formats",0,0.9897051453590393
410702045,468,AnastaZIuk,2020-04-18T14:04:27Z,"it's correct, any input to any output except bc (it's png)",0,0.9866961240768433
410705120,468,devshgraphicsprogramming,2020-04-18T14:30:20Z,"you probably want to use a different function to get the screensize, this will give you the current size of whatever the current fbo bound is",0,0.9904852509498596
410705332,468,devshgraphicsprogramming,2020-04-18T14:32:39Z,"placing the fence does not stall the cpu, you need to wait on the fence with `idriverfence::waitcpu` before you acess the igpubuffer's new data with the cpu, for example, through a mapping",0,0.9903139472007751
410705591,468,AnastaZIuk,2020-04-18T14:34:17Z,blockinfo is better to me since final true extent take pitch into account cuz your functions deals with row buffer length afaik,0,0.9658826589584351
410705711,468,AnastaZIuk,2020-04-18T14:35:39Z,i wrote it in previous pr in fence header,0,0.9889519810676575
410708327,468,AnastaZIuk,2020-04-18T14:57:53Z,"why? it's png loader, the dim won't be different from 1x1x1",0,0.8333700299263
410708542,468,AnastaZIuk,2020-04-18T14:59:03Z,"i changed it a little bit, now it's wonderful",1,0.9928233623504639
410708574,468,AnastaZIuk,2020-04-18T14:59:19Z,"yeah, to fill in docs",0,0.976511538028717
410709086,468,AnastaZIuk,2020-04-18T15:03:37Z,"i think my code will be cleaner with my approach, but i will optimalize memcpy to get rid of it",0,0.9125936031341553
410709294,468,AnastaZIuk,2020-04-18T15:05:07Z,there is only 1 memcpy,0,0.9607591032981873
410713382,468,AnastaZIuk,2020-04-18T15:38:22Z,okay in next commit there will be no any memcpy,0,0.9807445406913757
410715037,468,AnastaZIuk,2020-04-18T15:52:39Z,to fix,0,0.9448611736297607
410762907,468,devshgraphicsprogramming,2020-04-18T22:40:19Z,"wrong, do it in texels",0,0.6259329915046692
410763515,468,devshgraphicsprogramming,2020-04-18T22:43:47Z,"if you dont plan on supporting downloading multi-mip level image views then assert that they only have one mipmap level.... or make more regions also you're not specifying the parameters correctly given the image view, the image view defines the subresource (layer offset, miplevel offset, and their counts), if i pass a really large (layers and mips) gpu image to this function i will end up having an icpuimage with just as many layers and mips, except that it will only be partially covered by one region",0,0.974042534828186
410763673,468,devshgraphicsprogramming,2020-04-18T22:44:41Z,this is the only fence you need,0,0.9850622415542603
410763869,468,devshgraphicsprogramming,2020-04-18T22:45:56Z,"you don't need the fence here, the only thing you want to wait on is accessing the `texelbuffer->getpointer()` pointer because you don't want to look at (read) that memory area before the gpu writes to it all the mapping, etc. can still be going on while gpu is working.",0,0.9832005500793457
410764264,468,devshgraphicsprogramming,2020-04-18T22:48:39Z,"unmapping memory makes the pointer go invalid, the `asset::ccustomallocatorcpubuffer getmappedpointer()==texelbuffer->getpointer()` holds as long as memory is mapped (and if its not `texelbuffer->getpointer()` now has a stale and garbage pointer) you should unmap after we're done using the `texelbuffer` which in this case is after you have called to `trytowrite`",0,0.9943537712097168
410764384,468,devshgraphicsprogramming,2020-04-18T22:49:23Z,i'd just make these match 100% with `image` and have the subresource encompass the whole `image` and be done with it.,0,0.9365719556808472
410969671,468,AnastaZIuk,2020-04-19T19:07:27Z,i specify image view params bellow,0,0.9830266833305359
410970606,468,AnastaZIuk,2020-04-19T19:12:20Z,"downloadmipmap level function performs `copyimagetobuffer`, doesn't it need a fence?",0,0.9936495423316956
410976716,468,AnastaZIuk,2020-04-19T19:44:29Z,"maybe add a note in docs, that it will handle 0 miplevel only?",0,0.9925553202629089
411197576,468,devshgraphicsprogramming,2020-04-20T08:38:44Z,yes and assert any assumptions you make about the input,0,0.9833829998970032
411212764,468,AnastaZIuk,2020-04-20T09:01:44Z,outdated,0,0.9308403730392456
411212881,468,AnastaZIuk,2020-04-20T09:01:56Z,it's done,0,0.9452638626098633
411212981,468,AnastaZIuk,2020-04-20T09:02:04Z,done,0,0.8974218964576721
411213086,468,AnastaZIuk,2020-04-20T09:02:17Z,it'f fixed,0,0.9341903328895569
411213495,468,AnastaZIuk,2020-04-20T09:02:57Z,it's done,0,0.9452638626098633
411213562,468,AnastaZIuk,2020-04-20T09:03:04Z,it's done,0,0.9452638626098633
411213819,468,devshgraphicsprogramming,2020-04-20T09:03:27Z,assert,0,0.9639637470245361
411214028,468,AnastaZIuk,2020-04-20T09:03:44Z,it's done,0,0.9452638626098633
411215695,468,AnastaZIuk,2020-04-20T09:06:17Z,"it's done, i use another strategy, but don't perform cost operations if formats are same",0,0.9735356569290161
411216689,468,devshgraphicsprogramming,2020-04-20T09:07:51Z,tbd... tga needs its own special review. this function is used only by tga right?,0,0.936384916305542
411217937,468,AnastaZIuk,2020-04-20T09:09:49Z,"the function is moved to tga loader, since it's specific to it",0,0.9937465190887451
411218478,468,devshgraphicsprogramming,2020-04-20T09:10:32Z,you should place the fence as soon as possible (line 149) but you wait as late as possible (line 178 just before trytowrite) also you have an unused variable/fence called `fence`,0,0.9935703277587891
411219413,468,devshgraphicsprogramming,2020-04-20T09:11:54Z,ok moved to tga,0,0.9821453094482422
411234565,468,AnastaZIuk,2020-04-20T09:34:34Z,outdated,0,0.9308403730392456
411265228,468,devshgraphicsprogramming,2020-04-20T10:23:23Z,"copyimagetobuffer is a gpu-side process, gpu doesn't need to sync with itself (at least not in opengl)",0,0.9920216202735901
412031868,468,devshgraphicsprogramming,2020-04-21T09:37:12Z,did you move them?,0,0.9898906946182251
412039764,468,devshgraphicsprogramming,2020-04-21T09:48:36Z,"`trueextent` and `blockinfo` make no sense, you have all the info in the `convertedregion`",0,0.9927478432655334
412041792,468,devshgraphicsprogramming,2020-04-21T09:51:29Z,"no point of this being here at all, you can get it all from the first region",0,0.988824188709259
412047032,468,devshgraphicsprogramming,2020-04-21T09:59:08Z,unused function,0,0.9496458172798157
412047354,468,devshgraphicsprogramming,2020-04-21T09:59:35Z,"same as with the png and jpg writers, the `convertedregion` has all this!",0,0.568305253982544
412048619,468,devshgraphicsprogramming,2020-04-21T10:01:28Z,actually jpg writer is the only place where you've done this right (no extra confusing variables),0,0.9600964784622192
412049969,468,devshgraphicsprogramming,2020-04-21T10:03:30Z,"this is plain wrong, `bufferrowlength` is supposed to equal `region->imageextent.width` rounded up to the multiple of block size (not bytesize, physical dimensions)",0,0.8727115988731384
412066539,468,devshgraphicsprogramming,2020-04-21T10:29:34Z,"this actually makes far more sense as a raw array of `struct{uint8_t}`, `struct{uint8_t[4]}`, or `struct{uint8_t[4]}` than an actual image",0,0.9902271032333374
412066836,468,devshgraphicsprogramming,2020-04-21T10:30:03Z,basically an `icpubuffer` instead of a whole image,0,0.9897692203521729
412068223,468,devshgraphicsprogramming,2020-04-21T10:32:13Z,"color mapped is an error, since you're not using `colormap` yet",0,0.9830149412155151
412072349,468,devshgraphicsprogramming,2020-04-21T10:38:53Z,"this function is overly complex, i'd just make a function that takes an input `icpubuffer` and the same input/output format template parameters, and create an output `icpubuffer` you can still iterate over memory and call [code block] on each texel the whole function will be 10 lines instead of 60",0,0.9495527148246765
412085684,468,devshgraphicsprogramming,2020-04-21T11:00:38Z,use r-value reference && for `texelbuffer`,0,0.9939875602722168
412102341,468,devshgraphicsprogramming,2020-04-21T11:28:25Z,"this will fuck up, you should probably use `blockbytesize*width` for the y block byte size, and then `blockbytesize*width*height` for z",-1,0.660390317440033
412116913,468,devshgraphicsprogramming,2020-04-21T11:52:13Z,you're using the old image fromat (which will be smaller) to determine the size of the backing buffer (`referencetrueextent`) for the new image (which will be larger),0,0.9930497407913208
412366918,468,AnastaZIuk,2020-04-21T17:51:09Z,it is as it was,0,0.981166422367096
412371843,468,AnastaZIuk,2020-04-21T17:58:06Z,"yep, in upcoming commit",0,0.97977614402771
412375311,468,AnastaZIuk,2020-04-21T18:02:51Z,fixed in upcoming commit,0,0.9871253371238708
412375387,468,AnastaZIuk,2020-04-21T18:02:57Z,fixed in upcoming commit,0,0.9871253371238708
412376865,468,AnastaZIuk,2020-04-21T18:05:06Z,fixed in upcoming commit,0,0.9871253371238708
412377164,468,AnastaZIuk,2020-04-21T18:05:30Z,i did for filters usage,0,0.9826169610023499
412379328,468,AnastaZIuk,2020-04-21T18:08:36Z,deleted in upcoming commit,0,0.9838013052940369
412389935,468,AnastaZIuk,2020-04-21T18:24:03Z,fixed in upcoming commit,0,0.9871253371238708
412390004,468,AnastaZIuk,2020-04-21T18:24:10Z,fixed in upcoming commit,0,0.9871253371238708
412391015,468,AnastaZIuk,2020-04-21T18:25:45Z,fixed in upcoming commit,0,0.9871253371238708
412391973,468,AnastaZIuk,2020-04-21T18:27:07Z,look at `newtexelorblockbytesize`,0,0.9945734143257141
412393691,468,AnastaZIuk,2020-04-21T18:29:39Z,"yyyh wait, logic in that case is wrong even though",-1,0.7852851748466492
412395164,468,AnastaZIuk,2020-04-21T18:31:49Z,fixed in upcoming commit,0,0.9871253371238708
412401295,468,AnastaZIuk,2020-04-21T18:41:13Z,"""fixed"" in upcoming commit",0,0.9926060438156128
412423533,468,AnastaZIuk,2020-04-21T19:15:05Z,done,0,0.8974218964576721
412733088,468,devshgraphicsprogramming,2020-04-22T07:19:49Z,doesn't `createimagedataforcommonwriting` create regions with non-null `bufferimageheight` ?,0,0.9938340187072754
412734821,468,AnastaZIuk,2020-04-22T07:22:28Z,uh it does [a link],0,0.9743427634239197
412735525,468,devshgraphicsprogramming,2020-04-22T07:23:22Z,same for tga writer,0,0.9872692823410034
412738046,468,devshgraphicsprogramming,2020-04-22T07:27:26Z,so use it instead of `convertedregion->imageextent.height`,0,0.9951689839363098
412741372,468,devshgraphicsprogramming,2020-04-22T07:32:28Z,the logic is still completely and utterly fucked,-1,0.9532695412635803
413157473,468,AnastaZIuk,2020-04-22T17:02:57Z,done,0,0.8974218964576721
413223472,468,AnastaZIuk,2020-04-22T18:34:54Z,"""done"" xd",1,0.7251379489898682
518968449,554,devshgraphicsprogramming,2020-11-06T19:48:49Z,"i hate duplicate code make sure that `float irr_glsl_projected_hemisphere_remainder_and_pdf(out float pdf, in float l_z)` uses `float irr_glsl_projected_hemisphere_pdf(in float l_z)`",-1,0.9703947901725769
518968591,554,devshgraphicsprogramming,2020-11-06T19:49:09Z,same thing as [a link],0,0.9904307723045349
518969949,554,devshgraphicsprogramming,2020-11-06T19:51:58Z,why do these functions exist?,0,0.9586958885192871
518970010,554,devshgraphicsprogramming,2020-11-06T19:52:05Z,why do these functions exist?,0,0.9586958885192871
518970369,554,devshgraphicsprogramming,2020-11-06T19:52:46Z,"pdf should be 0.0, because either the viewer or light is behind the surface and this is a brdf",0,0.9910791516304016
518970423,554,devshgraphicsprogramming,2020-11-06T19:52:53Z,"pdf should be 0.0, because either the viewer or light is behind the surface and this is a brdf",0,0.9910791516304016
518971207,554,devshgraphicsprogramming,2020-11-06T19:54:31Z,same comment as with beckmann header,0,0.9888702630996704
518971249,554,devshgraphicsprogramming,2020-11-06T19:54:37Z,same comment as with beckmann header,0,0.9888702630996704
518971287,554,devshgraphicsprogramming,2020-11-06T19:54:42Z,same comment as with beckmann header,0,0.9888702630996704
518971315,554,devshgraphicsprogramming,2020-11-06T19:54:46Z,same comment as with beckmann header,0,0.9888702630996704
519004193,554,devshgraphicsprogramming,2020-11-06T21:04:01Z,whats the messing around with alpha and reflectance?,0,0.5214039087295532
521646706,554,devshgraphicsprogramming,2020-11-11T21:23:31Z,why is the diffuse smooth when its a transmissive? and why is it not allowed an albedo?,0,0.898890495300293
521647152,554,devshgraphicsprogramming,2020-11-11T21:24:27Z,`1.0/generator_pdf` could be precomputed,0,0.9935017228126526
522479012,554,devshgraphicsprogramming,2020-11-12T22:43:09Z,this is doing duplicate computation,0,0.5666049122810364
522479107,554,devshgraphicsprogramming,2020-11-12T22:43:22Z,duplicate computation,0,0.8419468998908997
522480569,554,devshgraphicsprogramming,2020-11-12T22:46:50Z,why do you need this?,0,0.9312883615493774
522480755,554,devshgraphicsprogramming,2020-11-12T22:47:14Z,where is this used?,0,0.987393856048584
522482141,554,devshgraphicsprogramming,2020-11-12T22:49:48Z,what happened to this optimization?,0,0.9817562103271484
522482989,554,devshgraphicsprogramming,2020-11-12T22:50:52Z,is the proper twosided handling implemented yet? because with different instruction streams per face/side this function shouldn't exist yet,0,0.9928333759307861
522485052,554,devshgraphicsprogramming,2020-11-12T22:53:50Z,move this and the test for `if (cosfactor>flt_min)` to the very top,0,0.9938241243362427
522486182,554,devshgraphicsprogramming,2020-11-12T22:55:13Z,"will save you a lot of data fetches and logic if you have a brdf or a very ""on edge"" bsdf",0,0.9642539024353027
522490821,554,devshgraphicsprogramming,2020-11-12T23:03:45Z,"after you do twosided properly, there will be no more need to orient the etas",0,0.9808207750320435
522491246,554,devshgraphicsprogramming,2020-11-12T23:04:49Z,"still, whats with the reflectance and roughness modification?",0,0.9888687133789062
522492250,554,devshgraphicsprogramming,2020-11-12T23:07:28Z,"if transmission occurs, how will the `cos_eval_dg` functions play with the fact that one of `vdotn` or `ldotn` will be negative? especially the smith masking function? furthermore at least one of `vdoth` and `ldoth` will be negative too!",0,0.9920052886009216
522492959,554,devshgraphicsprogramming,2020-11-12T23:09:16Z,so coating is still not unified with blend?,0,0.9862420558929443
522494998,554,devshgraphicsprogramming,2020-11-12T23:14:46Z,wrong,-1,0.6957246661186218
522495146,554,devshgraphicsprogramming,2020-11-12T23:15:11Z,again,0,0.9269572496414185
522496231,554,devshgraphicsprogramming,2020-11-12T23:17:56Z,"this check should move up... a lot (if bsdf and not valid, you can skip all this)",0,0.989409327507019
522496378,554,devshgraphicsprogramming,2020-11-12T23:18:23Z,in `eval_and_pdf` cost factor check is needed to skip useless work,0,0.9905257225036621
522498334,554,devshgraphicsprogramming,2020-11-12T23:23:33Z,noooooooooooooooooooooooooooopppppppppppppeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee conductor only! othewise fresnel goes into the pdf!,-1,0.5028587579727173
522510249,554,Crisspl,2020-11-12T23:44:44Z,"this vec3(1.0) is wrong, changed it to transmittance. alpha2==0.0 in case of bsdf is because op_difftrans is always smooth (doesnt even have roughness parameter)",0,0.9886184930801392
522511239,554,Crisspl,2020-11-12T23:46:01Z,thats why i didnt even bother with proper twosided handling,0,0.783482015132904
522991302,554,Crisspl,2020-11-13T14:39:37Z,"it is blend-like, but has different opcode. honestly i cant see any point in unifying them further, in the end of the day they differ a lot (first of all blend takes weight from bsdf_data or texture and coating computes it). so there would be a need for flag determining how weights are obtained which already stands for divergence between most of the work done by the opcode",0,0.8493015766143799
524262127,554,devshgraphicsprogramming,2020-11-16T13:21:00Z,we could allow a rough difftrans (in the ir) at no extra cost (excution or complexity),0,0.9793781638145447
524265984,554,devshgraphicsprogramming,2020-11-16T13:27:23Z,reading and writing data to random registers might be expensive... so it would be nice not to diverge for that (which is why single opcode is nice),0,0.9466956853866577
524269469,554,devshgraphicsprogramming,2020-11-16T13:32:45Z,you forgot to clamp all the `dot` variables before using them... also a quick check for the **after clamp value** of `ndotl` coudl save you a lot of computation here (and data fetches),0,0.9903084635734558
524270666,554,devshgraphicsprogramming,2020-11-16T13:34:47Z,can support rough difftrans at no cost,0,0.9577797055244446
524272008,554,devshgraphicsprogramming,2020-11-16T13:37:07Z,use a proper branch... otherwise you're doing 2x the memory fetches also its not `ndotv` that you must use (interpolated shading normals can fuck this up) .... but take in a boolean `frontface` which in the rasterization shader would be `gl_frontfacing`,0,0.8670727610588074
526201400,554,Crisspl,2020-11-18T15:56:59Z,"now i dont, not used",-1,0.5425441861152649
526202266,554,Crisspl,2020-11-18T15:58:05Z,"nowhere, just a utility",0,0.946438193321228
526496333,554,devshgraphicsprogramming,2020-11-18T23:43:14Z,whats this still doing?,0,0.8195608258247375
526496485,554,devshgraphicsprogramming,2020-11-18T23:43:38Z,update comment,0,0.9618536829948425
526497269,554,devshgraphicsprogramming,2020-11-18T23:45:29Z,wait what? cie xyz both here and in the generator!,0,0.7311537861824036
526497585,554,devshgraphicsprogramming,2020-11-18T23:46:16Z,the `cosfactor` check!,0,0.9850618243217468
526500143,554,devshgraphicsprogramming,2020-11-18T23:53:26Z,why don't you just do `g2_over_g1` here and then mul the thing by `pdf` after you get it.. since the pdf is exactly the other part (`g1_over_2ndotv * ndf_val *0.5` for conductor and the other thing for dielectric refraction) ?,0,0.9922884106636047
526501255,554,devshgraphicsprogramming,2020-11-18T23:56:15Z,basically it should be [code block],0,0.9938493371009827
526501797,554,devshgraphicsprogramming,2020-11-18T23:57:42Z,listen to me... and only compute the remainder [a link] mul by pdf at the end!,0,0.5746651887893677
526502824,554,devshgraphicsprogramming,2020-11-19T00:00:31Z,conductor need to be a blend,0,0.9794254899024963
526503238,554,devshgraphicsprogramming,2020-11-19T00:01:45Z,instead of weight.. use `out_pdf` right away [a link],0,0.9920029640197754
526503583,554,devshgraphicsprogramming,2020-11-19T00:02:34Z,could have been `out_pdf *= pdf` also good to call it `localpdf` instead of `pdf`,0,0.9938376545906067
526504617,554,devshgraphicsprogramming,2020-11-19T00:05:31Z,dont use `cos_eval_dg` .. break them down just like you did the remainder functions in the remainder stream,0,0.9903860092163086
526504743,554,devshgraphicsprogramming,2020-11-19T00:05:59Z,if you heed my advice... you'll no longer need all these [a link],0,0.9531562328338623
526506911,554,devshgraphicsprogramming,2020-11-19T00:12:13Z,ekhm what is doing on?,0,0.9227880835533142
526506973,554,devshgraphicsprogramming,2020-11-19T00:12:25Z,and what is doing on here?,0,0.9850329756736755
526798448,554,Crisspl,2020-11-19T11:35:23Z,"this is bug actually, precomputed normals already have correct orientation (sign)",0,0.9486598372459412
526799111,554,Crisspl,2020-11-19T11:36:25Z,setting initial interaction with correctly oriented normal,0,0.9903175830841064
526885195,554,devshgraphicsprogramming,2020-11-19T13:32:52Z,"i told you that it should depent on an input boolean (which would usually be `gl_frontfacing` passed to this function) and not the dot product of the view vector with the normal, because the normal could have been a smooth interpolated normal!",0,0.9887593984603882
526929049,554,devshgraphicsprogramming,2020-11-19T14:28:30Z,delete it then,0,0.9674919247627258
526929110,554,devshgraphicsprogramming,2020-11-19T14:28:34Z,delete it them,0,0.9683969616889954
526931518,554,devshgraphicsprogramming,2020-11-19T14:31:49Z,applicable to brdf leafs only. only stuff that has nothing to do with the pdf computation (so all data except for roughness) and computation of fresnel and g2.,0,0.9866099953651428
526970294,554,devshgraphicsprogramming,2020-11-19T15:20:27Z,i messed up and gave bad advice,-1,0.9693958759307861
526971827,554,devshgraphicsprogramming,2020-11-19T15:22:22Z,"also skip if roughness is really small , but i guess do that inside `instr_eval_and_pdf_execute`",0,0.982826828956604
526973805,554,devshgraphicsprogramming,2020-11-19T15:24:45Z,pass the skip into `instr_eval_and_pdf_execute` you have divergence for doing the exact same thing (decoding registers and writing the result),0,0.9823414087295532
526974227,554,devshgraphicsprogramming,2020-11-19T15:25:16Z,and remember to init `pdf = skip ? 0.0:1.0;`,0,0.9925193786621094
526984873,554,devshgraphicsprogramming,2020-11-19T15:38:36Z,`gl_frontfacing` not the dot,0,0.983105480670929
526987129,554,devshgraphicsprogramming,2020-11-19T15:41:28Z,seems you dont need to `updatecurrinteraction` anymore...,0,0.983107328414917
526987296,554,devshgraphicsprogramming,2020-11-19T15:41:41Z,does function even need to exist?,0,0.9890841841697693
526999790,554,devshgraphicsprogramming,2020-11-19T15:57:10Z,move albedo fetching into the `if (is_valid)` also start off with `eta` and `rcp_eta` uninitialized.. only initialize them inside `if (is_bsdf & istransmissionpath)¬,0,0.9944210648536682
527001244,554,devshgraphicsprogramming,2020-11-19T15:59:04Z,add this to general engine headers (call it `irr_glsl_isvalidvndfmicrofacet`),0,0.9949760437011719
527004731,554,Crisspl,2020-11-19T16:03:28Z,?,0,0.9557723999023438
527005001,554,devshgraphicsprogramming,2020-11-19T16:03:48Z,i have no idea what i meant here.,-1,0.901548445224762
527013408,554,devshgraphicsprogramming,2020-11-19T16:14:47Z,hmm ok i'll allow a coat which is a different opcode to blend,0,0.9287240505218506
527032102,554,devshgraphicsprogramming,2020-11-19T16:39:48Z,"you should put the computation of `refractionprob`, the partitioning of the random variable and dciding refraction in the `else` clause above. just start with `refraction=false` and instead of screwing around with `rcpchoiceprob`, just put the subsequent `pdf /= rcpchoiceprob` in the `else` case as well",0,0.9950271248817444
527032330,554,devshgraphicsprogramming,2020-11-19T16:40:02Z,~ move this into the same `if` statement above ~,0,0.9913966059684753
527033238,554,devshgraphicsprogramming,2020-11-19T16:41:15Z,"start with them undefined, only compute is you decide on doing a `refraction` in the `else` case above",0,0.9913254380226135
527033765,554,devshgraphicsprogramming,2020-11-19T16:41:55Z,"actually its so cheap you dont need to if-statement around it, other than putting them in the `else` (benefit from an already existing branch)",0,0.9799031615257263
527034841,554,devshgraphicsprogramming,2020-11-19T16:43:25Z,"actually... it always needs to be performed (because pdf is not equal to fresnel, but monochrome of the fresnel, which are not the same thing) so no need for the if statement",0,0.9791309833526611
527036642,554,devshgraphicsprogramming,2020-11-19T16:45:41Z,see [a link],0,0.9869033098220825
527046925,554,devshgraphicsprogramming,2020-11-19T16:59:28Z,we expect that the coat has already computed the fresnel for itself (dont want double application of fresnel) so `ws` shouldnt exist and the computation at the end should be `coat+coated*wd`,0,0.9943080544471741
527049397,554,devshgraphicsprogramming,2020-11-19T17:02:35Z,ok i guess its fine,0,0.8661940693855286
527050714,554,devshgraphicsprogramming,2020-11-19T17:03:58Z,pretty sure this is wrong for a pure eval stream,-1,0.7654518485069275
527057600,554,devshgraphicsprogramming,2020-11-19T17:12:51Z,"this should move to the second if statement... because coating shouldn't need it (because it need not concern itself with the microfacet for specular reflection, i.e. the fresnel of the coating part)",0,0.9920768737792969
527063719,554,devshgraphicsprogramming,2020-11-19T17:21:41Z,"move the computation of clamped `ndotv` outside (initialize `is_valid` with `ndotv>flt_min`) the clamped `vdoth` can also be moved up and used in the valid microfacet check somewhat (but before clamp, to check that `vdoth>=0.0`)",0,0.9948030114173889
527064834,554,devshgraphicsprogramming,2020-11-19T17:23:24Z,"move this out to contain the `is_valid` check (or move the `is_valid` and `refraction` stuff into the `op_hasspecular` if case, depending which way you look at it)... because right now you're doing a specular refraction feasibility check on the difftrans material",0,0.9948086142539978
527663034,554,Crisspl,2020-11-20T12:36:01Z,"it's not fetching per se, fetching is `instr_getparameters()`. seems like parameter fetching is much less divergent than you think second thing: im confused, first you say to put `op_isdiffuse(op)` outside is_valid check, but you want albedo inside is_valid check",0,0.6304157376289368
527671438,554,Crisspl,2020-11-20T12:52:52Z,ok.... why? xd,0,0.5553904175758362
527887600,554,devshgraphicsprogramming,2020-11-20T18:14:55Z,"my bad.. `is_valid` is only for microfacet models, diffuse only need to check that clamped cosine is `>flt_min` then i guess albedo needs to stay outside as you've pointed out",-1,0.9838038086891174
527889361,554,devshgraphicsprogramming,2020-11-20T18:18:15Z,how do you handle `ndotv` being negative?,0,0.9892611503601074
527890123,554,devshgraphicsprogramming,2020-11-20T18:19:46Z,"no need to clamp `ndoth` by convention `h` must be in the positive hemisphere (otherwise `is_valid` will be false for bsdf and a brdf will not allow `l` and `v` outside of upper hemisphere, so half vector must also be in the hemisphere)",0,0.9940521121025085
527891822,554,devshgraphicsprogramming,2020-11-20T18:22:55Z,duplicate code,0,0.7500718235969543
527891885,554,devshgraphicsprogramming,2020-11-20T18:23:03Z,?,0,0.9557723999023438
527891920,554,devshgraphicsprogramming,2020-11-20T18:23:09Z,?,0,0.9557723999023438
527893462,554,devshgraphicsprogramming,2020-11-20T18:26:00Z,"my bad, if it actually gets past an `is_valid` check (the checks of microfacet orientation) for a brdf... then we need to compute the pdf. but dont branch and compute the same pdf functions in both branches! unify!",-1,0.992314875125885
527893512,554,devshgraphicsprogramming,2020-11-20T18:26:05Z,"my bad, if it actually gets past an `is_valid` check (the checks of microfacet orientation) for a brdf... then we need to compute the pdf. but dont branch and compute the same pdf functions in both branches! unify!",-1,0.992314875125885
527893800,554,devshgraphicsprogramming,2020-11-20T18:26:35Z,[a link] + [a link] they shouldn't exist as standalones,0,0.9898025393486023
527893861,554,devshgraphicsprogramming,2020-11-20T18:26:39Z,[a link] + [a link] they shouldn't exist as standalones,0,0.9898025393486023
527893988,554,devshgraphicsprogramming,2020-11-20T18:26:55Z,duplicate code,0,0.7500718235969543
527894082,554,devshgraphicsprogramming,2020-11-20T18:27:05Z,[a link] + [a link] they shouldn't exist as standalones,0,0.9898025393486023
527894107,554,devshgraphicsprogramming,2020-11-20T18:27:08Z,[a link] + [a link] they shouldn't exist as standalones,0,0.9898025393486023
527894210,554,devshgraphicsprogramming,2020-11-20T18:27:19Z,[a link] + [a link],0,0.9873155355453491
527894234,554,devshgraphicsprogramming,2020-11-20T18:27:21Z,[a link] + [a link],0,0.9873155355453491
527894758,554,devshgraphicsprogramming,2020-11-20T18:28:17Z,ah yeah bumpmaps,0,0.5589128136634827
527897183,554,devshgraphicsprogramming,2020-11-20T18:32:51Z,if we dont use something no point keeping it around (we have git history after all),0,0.9906544089317322
527901004,554,devshgraphicsprogramming,2020-11-20T18:40:12Z,"save us the torture of a big and complex wrapper around calling the `remainder_and_pdf` outselves at the target site i'd much rather see a function in the top level header like this: [code block] because its just 6 lines to maintain, as opposed to a separate `eval_and_pdf` boilerplate function for every bxdf in our library",0,0.7115235328674316
527918319,554,Crisspl,2020-11-20T19:13:59Z,ok so its good,1,0.8374516367912292
528661244,554,Crisspl,2020-11-23T12:15:45Z,abs or max obviously,0,0.9598760008811951
528829619,554,devshgraphicsprogramming,2020-11-23T16:21:05Z,?,0,0.9557723999023438
528836525,554,devshgraphicsprogramming,2020-11-23T16:30:36Z,still duplicate code,0,0.7276679277420044
528839674,554,devshgraphicsprogramming,2020-11-23T16:34:57Z,still duplicate code... i only want one place where the following code exists `l_z * irr_glsl_reciprocal_pi`,0,0.9069762825965881
528840238,554,devshgraphicsprogramming,2020-11-23T16:35:45Z,todo,0,0.918040931224823
528840287,554,devshgraphicsprogramming,2020-11-23T16:35:49Z,todo,0,0.918040931224823
528840342,554,devshgraphicsprogramming,2020-11-23T16:35:53Z,todo,0,0.918040931224823
528840378,554,devshgraphicsprogramming,2020-11-23T16:35:57Z,todo,0,0.918040931224823
528840535,554,devshgraphicsprogramming,2020-11-23T16:36:11Z,todo,0,0.918040931224823
528840597,554,devshgraphicsprogramming,2020-11-23T16:36:16Z,todo,0,0.918040931224823
528840725,554,devshgraphicsprogramming,2020-11-23T16:36:26Z,unify,0,0.9330956935882568
528840784,554,devshgraphicsprogramming,2020-11-23T16:36:30Z,unify,0,0.9330956935882568
528840983,554,devshgraphicsprogramming,2020-11-23T16:36:48Z,why do we still have it?,0,0.9428529739379883
528868517,554,devshgraphicsprogramming,2020-11-23T17:16:58Z,"i'd fold `positivecosfactor` into `run` and make an `ii` for `is_combiner` (so coat and blend fetch the params, ior and bsdf data)",0,0.9916394352912903
528869734,554,devshgraphicsprogramming,2020-11-23T17:18:48Z,can you just do the rest on `bxdf_eval` or just call `bxdf_eval` `result` right away?,0,0.9951104521751404
528879560,554,devshgraphicsprogramming,2020-11-23T17:34:08Z,can't you hoist these two and fold it into the `positivecosfactor` check?,0,0.9950377345085144
528880531,554,devshgraphicsprogramming,2020-11-23T17:35:42Z,"a function where you don't need to compute the pdf (such as rasterization's eval only), does not need this check (its redundant, the bsdf transmission case does it anyway, and brdf checks ndotv and ndotl)",0,0.9934065341949463
528883063,554,devshgraphicsprogramming,2020-11-23T17:39:48Z,"never mind the `vdoth` check, i forgot this is eval only",0,0.9259727001190186
528886851,554,devshgraphicsprogramming,2020-11-23T17:46:00Z,"why don't we precompute the squared microfacet and interaction stuff? (obvs just for this backend, not in the general engine-wide structs)",0,0.9927120208740234
528888124,554,devshgraphicsprogramming,2020-11-23T17:48:08Z,`vdoth` does not need to be clamped... `vdoth<flt_min` is simply an invalid microfacet normal (was checked by `is_valid` before anyway or guaranteed by constraints on ndotv and ndotl for brdfs),0,0.9950228929519653
528953861,554,Crisspl,2020-11-23T19:45:06Z,"if we dont in general, why would we here?",0,0.9606046676635742
528975615,554,devshgraphicsprogramming,2020-11-23T20:26:45Z,because here it would be useful i guess?,0,0.9701739549636841
528978653,554,devshgraphicsprogramming,2020-11-23T20:32:48Z,"just be careful because `positivecosfactor` is now folded into `run` and unless you're able to tell if your coat coats a difftrans or blend with at least one bsdf as a child, you need to fetch the data",0,0.9875879883766174
528996712,554,devshgraphicsprogramming,2020-11-23T21:09:06Z,use the `wo_clamps` variant,0,0.9930052161216736
528997756,554,devshgraphicsprogramming,2020-11-23T21:11:21Z,"you could hoist this above (the computation only) and put an extra `if (ndotl>flt_min)` inside the diffuse case (generator for a brdf cannot actually generate a light direction below hemisphere, so all good) this will also allow you to use the `wo_clamps` variant",0,0.9901611804962158
528997874,554,devshgraphicsprogramming,2020-11-23T21:11:35Z,tied up with this [a link],0,0.9917415380477905
528999925,554,devshgraphicsprogramming,2020-11-23T21:14:36Z,careful about `ndotv` being negative (interpolated normals),0,0.9016572833061218
529008574,554,devshgraphicsprogramming,2020-11-23T21:29:57Z,"ok looks good, checked it all",1,0.8060553669929504
529010053,554,devshgraphicsprogramming,2020-11-23T21:32:38Z,new implementation is nice,1,0.9799662232398987
529014314,554,devshgraphicsprogramming,2020-11-23T21:41:25Z,"a suggestion, to save on 3x rga mult and branches (also your current code seems to be wrong) [code block]",0,0.9845208525657654
529016459,554,devshgraphicsprogramming,2020-11-23T21:45:50Z,init with `skip ? 0.0:1.0` otherwise pdf always 0 [a link],0,0.9928417205810547
529018369,554,devshgraphicsprogramming,2020-11-23T21:49:35Z,"unused variable, delete",0,0.9796162843704224
529019954,554,devshgraphicsprogramming,2020-11-23T21:52:41Z,"this one you can hoist and add the condition `>flt_min` to `is_bxdf && run` because vndf sampling (vndf sampling can produce l samples that are shadowed, but cannot produce v samples that are masked)",0,0.9945828318595886
529020920,554,devshgraphicsprogramming,2020-11-23T21:54:39Z,ok missed the assignment,0,0.9722183346748352
529025362,554,devshgraphicsprogramming,2020-11-23T22:04:11Z,you probably want to convert `ior` to a scalar value (use `eta*eta` i guess?),0,0.9920642971992493
529025748,554,devshgraphicsprogramming,2020-11-23T22:05:01Z,if you do `[a link] then you can use any of the `reflectance` channels,0,0.9931898713111877
529029243,554,devshgraphicsprogramming,2020-11-23T22:12:09Z,and obvs initialize `is_valid=true` after the hoist,0,0.9945681095123291
529030145,554,devshgraphicsprogramming,2020-11-23T22:14:05Z,i wonder if you could push all this (and the rcp eta and eta computation) into the `else` case of `op_isdiffuse` obvs after `ndotv>flt_min` hoist ( [a link] ),0,0.9929042458534241
529031492,554,devshgraphicsprogramming,2020-11-23T22:16:51Z,same comment as [a link],0,0.9880831837654114
529036343,554,devshgraphicsprogramming,2020-11-23T22:27:13Z,unused variable,0,0.983355700969696
529037320,554,devshgraphicsprogramming,2020-11-23T22:29:27Z,"get rid of `invalid_microfacet`, a generator cannot generate such",0,0.9915859699249268
529037536,554,devshgraphicsprogramming,2020-11-23T22:29:50Z,its unused var anyway,0,0.8947452306747437
529041835,554,devshgraphicsprogramming,2020-11-23T22:39:14Z,"hoist this fetch, both blend and coating branch do it",0,0.9903082251548767
529042900,554,devshgraphicsprogramming,2020-11-23T22:41:32Z,"the coat and blend only diverge in how they compute the rgb weight after you get the weight, the rest of the operations are the same (rgb to monochrome, partitioning, pdf calc, jump calc)",0,0.9867784976959229
529044137,554,devshgraphicsprogramming,2020-11-23T22:44:28Z,"there's no point to computing this, since it will be a tranmission interaction, ergo the `out_microfacet` which is only for reflection wont be used at all",0,0.9888705611228943
529044908,554,devshgraphicsprogramming,2020-11-23T22:46:01Z,the top bit of code repeats this,0,0.8327767252922058
529046647,554,devshgraphicsprogramming,2020-11-23T22:49:59Z,"the most complicated form of the function actually cuts down on computation [a link] returns remainder metadata, which you can put into this [a link]",0,0.979685366153717
529048053,554,devshgraphicsprogramming,2020-11-23T22:53:09Z,careful of negative `currinteraction.isotropic.ndotv` clamp,0,0.9824923276901245
529049195,554,devshgraphicsprogramming,2020-11-23T22:55:38Z,every case after this (diffuse and microfacet) needs to check for `clampedorabsndotv>flt_min` and set remainder+pdf to 0.0 if it doesn't pass,0,0.9936005473136902
529049327,554,devshgraphicsprogramming,2020-11-23T22:55:56Z,hoist... [a link],0,0.9740963578224182
529049871,554,devshgraphicsprogramming,2020-11-23T22:57:11Z,similar comment to [a link],0,0.9854355454444885
529050542,554,devshgraphicsprogramming,2020-11-23T22:58:46Z,beware of negative `vdoth` `ndoth` can't be negative no matter brdf or bsdf but `vdoth` can be negative for a bsdf (even from generator),0,0.9854089617729187
529051069,554,devshgraphicsprogramming,2020-11-23T22:59:54Z,"its not only an optimization, its necessary",0,0.9692205786705017
529051201,554,devshgraphicsprogramming,2020-11-23T23:00:12Z,prevent negative `vdoth` for brdfs [a link],0,0.9945579767227173
529052187,554,devshgraphicsprogramming,2020-11-23T23:02:28Z,"also in order to benefit from skipping a mul by rgb fresnel followed by divide by monochrome fresnel of the remainder, the fresnel function used needs to be monochrome (not rgb)",0,0.9925491809844971
529052459,554,devshgraphicsprogramming,2020-11-23T23:03:09Z,basically use the `eta` and `rcpeta` you're computing just outside and after this branch ;),1,0.8395065665245056
529052801,554,devshgraphicsprogramming,2020-11-23T23:03:59Z,same comment as [a link],0,0.9880831837654114
529053873,554,devshgraphicsprogramming,2020-11-23T23:06:30Z,"the pdf looks suspicious, you're using the vndf to reflective differential factor transform here.... you should be using the one that can account for refraction [a link]",-1,0.8074857592582703
529054266,554,devshgraphicsprogramming,2020-11-23T23:07:27Z,obviously no point hoisting `ndotl` only hoist `ndotv`,0,0.987118124961853
529055663,554,devshgraphicsprogramming,2020-11-23T23:10:40Z,"i'm not suggesting adding fields to `irr_glsl_anisotropicviewsurfaceinteraction ` or `irr_glsl_anisotropicmicrofacetcache` just creating 1 struct each, for the usage of the material compiler glsl backend which declares a the above as a member, plus the extra fields (poor man's inheritance)",0,0.9447073340415955
529596660,554,Crisspl,2020-11-24T14:42:20Z,"no, why?",0,0.8237459063529968
530477617,554,devshgraphicsprogramming,2020-11-25T15:55:25Z,still a todo,0,0.948638379573822
530488943,554,devshgraphicsprogramming,2020-11-25T16:11:08Z,"use monochrome dielectric fresnel function, if you want to assume that fresnel in the remainder cancels out with the reflection/refraction probability in the pdf",0,0.9940428137779236
530491297,554,devshgraphicsprogramming,2020-11-25T16:14:34Z,"just initialize to 0.0, overwrite in the `if (positivendotv)` case/opcodes",0,0.9955582618713379
530491626,554,devshgraphicsprogramming,2020-11-25T16:15:02Z,then make a specialized `irr_glsl_smith_vndf_pdf_wo_clamps` that transforms a `fvndf` and does not take a `refraction` parameter ;),1,0.6486578583717346
530493652,554,devshgraphicsprogramming,2020-11-25T16:18:02Z,[code block] and then rewrite [a link] in terms of the new thing,0,0.9912915825843811
530495415,554,devshgraphicsprogramming,2020-11-25T16:20:32Z,swap out some of the `*=` for `=`,0,0.993455708026886
530504729,554,devshgraphicsprogramming,2020-11-25T16:34:26Z,put another if-statement inside to check for `ndotl >flt_min` [a link],0,0.9926181435585022
530506096,554,devshgraphicsprogramming,2020-11-25T16:36:36Z,this is why [a link],0,0.9906381368637085
530508136,554,devshgraphicsprogramming,2020-11-25T16:39:47Z,put the extra `ndotl>flt_min` check inside,0,0.9949343800544739
530510028,554,devshgraphicsprogramming,2020-11-25T16:42:28Z,"just use `abs(microfacet.inner.isotropic.vdoth)`, if you have a brdf the smith masking and shadowing function will kill the wrongly computed fresnel (which would compute to 100% anyway with vdoth clamped to 0)",0,0.987467348575592
530510289,554,devshgraphicsprogramming,2020-11-25T16:42:51Z,"monochrome fresnel, use `eta` and `rcpeta`",0,0.9914767146110535
530587387,554,Crisspl,2020-11-25T19:02:29Z,"i cant, keep getting nans then",-1,0.8847663998603821
530605336,554,devshgraphicsprogramming,2020-11-25T19:41:25Z,yes its not needed,0,0.970446765422821
530606621,554,devshgraphicsprogramming,2020-11-25T19:44:19Z,ouput: - meshbuffer id + 1bit for frontfacing vs. back facing - triangle id (dont use yet obvs) - encoded normal - uv coord (in full range of a sfloat) from meshbuffer/object id you shall be able to get access to all data about shading model (instruction streams) and light emittance,0,0.9828104972839355
530618986,554,devshgraphicsprogramming,2020-11-25T20:10:59Z,why are you not using the procmputed squared values from your interaction struct?,0,0.9935245513916016
530626441,554,Crisspl,2020-11-25T20:26:27Z,you're looking at old code,0,0.9547407627105713
530628380,554,devshgraphicsprogramming,2020-11-25T20:31:01Z,darn github,0,0.6449331641197205
530633992,554,devshgraphicsprogramming,2020-11-25T20:44:51Z,move intitialization of `is_valid` from here [a link] to here (and initialize to true) [a link] only use if you have `op_dielectric` defined (current usage confuses me and probably the compiler as well),0,0.9933542013168335
530634895,554,devshgraphicsprogramming,2020-11-25T20:47:03Z,this is only relevant is coat or blend are considered brdfs by you (`is_bsdf` used for clamping `ndotv` and `ndotl` could be false in these cases) that would actually prevent the loading of `bsdf_data` and `ior` under your current code when `ndotv` or `ndotl` are negative,0,0.9946304559707642
530636548,554,devshgraphicsprogramming,2020-11-25T20:51:23Z,also on line [a link] its safe to use the `wo_clamps` variant,0,0.9892889261245728
431752211,496,devshgraphicsprogramming,2020-05-28T10:59:45Z,"we hate one place in the engine where we have that struct, i think its in one of the driver headers, could be moved to mesh header",-1,0.989330530166626
431752349,496,devshgraphicsprogramming,2020-05-28T11:00:00Z,"use iterators begin and end, much more flexible than vector",0,0.9738943576812744
431752563,496,devshgraphicsprogramming,2020-05-28T11:00:22Z,pack meshbuffers not meshes,0,0.9822090268135071
431752928,496,devshgraphicsprogramming,2020-05-28T11:01:03Z,"you need to handle nullptr index buffer, (its a std::iota starting from base index)",0,0.9900385141372681
431757515,496,devshgraphicsprogramming,2020-05-28T11:10:14Z,geometry creator has functions to expand other triangle topologies to indexed triangle list,0,0.9928568601608276
431757660,496,devshgraphicsprogramming,2020-05-28T11:10:34Z,"dont error out processing everything, just skip the stuff you cant handle",-1,0.72162926197052
431758718,496,devshgraphicsprogramming,2020-05-28T11:12:43Z,"not exactly, you only need to: - run through all meshbuffers and collect the flags/bits of the enabled attributes, first mesh to have the attribute index enabled sets the reference - then for every meshbuffer check if attribute is either disabled or has exactly the same format as reference for that attribute index",0,0.990420401096344
431759453,496,devshgraphicsprogramming,2020-05-28T11:14:09Z,"pack meshbuffers not meshes. also split the business logic into `allocate` and `commit`. one figures out how much space will need to be reserved, reserves it etc., returns some useful metadata for a later `commit`etc. etc. `commit` actually does the heavy lifting.",0,0.9934641718864441
432456130,496,devshgraphicsprogramming,2020-05-29T12:41:49Z,"hmm, this could be done by preallocating a 128kb range at the start of your storage buffer that contains an std::iota of 0 to uint16_t_max!",0,0.975788414478302
432459200,496,devshgraphicsprogramming,2020-05-29T12:48:01Z,don't iterate over bindings bindings are offsets and strides that fetch your data attributes have the formats,0,0.9785764813423157
432463823,496,devshgraphicsprogramming,2020-05-29T12:56:35Z,there's an easier way to do this [code block],0,0.989388108253479
432463903,496,devshgraphicsprogramming,2020-05-29T12:56:44Z,you don't need this lambda,0,0.9344761967658997
432465165,496,devshgraphicsprogramming,2020-05-29T12:59:05Z,that my dear should be a full-on `assert`,-1,0.7014451622962952
432465358,496,devshgraphicsprogramming,2020-05-29T12:59:27Z,"nope, just use the `binding` for array access",0,0.9907770156860352
432468095,496,devshgraphicsprogramming,2020-05-29T13:04:14Z,"this is actually a very nasty and inaccurate estimate, i'd rather have you declare an `unordered_set` and actually iterate over the indices in the mesh (if mesh has no indices then pretend there is a `iota` filled unordered_set with as many elements as index count says).",-1,0.9374532103538513
432469988,496,devshgraphicsprogramming,2020-05-29T13:07:39Z,"nope this is not really a problem globally. its only an issue if the per-meshbuffer `unordered_set` of indices has more elements than 64k, you will re-pack meshe buffers' vertices and optimize them + the index lists for pre and post transform vertex cache coherency (plus filter invalid triangles as is complaining about that on mitsuba's scenes), so at some point you will have a `unordered_map` that will map the old indices to new indices (so any gaps in the range we will be able to remove, we just need to ensure there will be less than 64k unique indices).",0,0.9283666610717773
432471319,496,devshgraphicsprogramming,2020-05-29T13:10:05Z,"you want to separate `alloc` (virtual space for meshbuffers, its actually more of a reserve than allocate) from `commit` (actually copy over vertex and index data) in `alloc/reserve` you want to allocate from a generalpurposeaddressallocator c.f. virtual texturing",0,0.9945648908615112
432874248,496,devshgraphicsprogramming,2020-05-30T17:58:08Z,no,0,0.8846297860145569
432874293,496,devshgraphicsprogramming,2020-05-30T17:58:51Z,why do you start with any bindings defined at all?,0,0.95733243227005
433157856,496,Crisspl,2020-06-01T10:29:23Z,better make it `const core::vector &`,0,0.9791070222854614
439971250,496,devshgraphicsprogramming,2020-06-15T07:11:17Z,why are you even suggesting the use of a mutable container that dynamically allocates memory ? a `struct` with some pointers to ranges is much cleaner,0,0.9860615730285645
441486079,496,Crisspl,2020-06-17T11:50:13Z,better use ptr range instead of vector,0,0.9928760528564453
441486616,496,devshgraphicsprogramming,2020-06-17T11:51:10Z,"ssbo is kinda limited to 2gb, so 2gb makes a good default for the data heavy data streams (indices and vertices)",0,0.9489874839782715
441488644,496,devshgraphicsprogramming,2020-06-17T11:55:17Z,"if you have 2gb of `uint16_t` indices, then you have 341m triangles, if you split meshbuffers into batches of 32-1024 tris, then your max mdi count is 10.6m, given that each mdi struct is 20 bytes... works out to 214mb max",0,0.9866607189178467
441490331,496,devshgraphicsprogramming,2020-06-17T11:58:20Z,i think you got these two values the wrong way around,-1,0.5874873995780945
441490874,496,devshgraphicsprogramming,2020-06-17T11:59:24Z,"dont use `const`, make `private` instead... i have a feeling that these values will need to be mutable",0,0.8216983079910278
441491267,496,devshgraphicsprogramming,2020-06-17T12:00:08Z,use `uint32_t` or even better the `size_type` typedef from the `address_allocator_traits`,0,0.9951218962669373
441492500,496,devshgraphicsprogramming,2020-06-17T12:02:35Z,good default for `maxindexcountpermdidata` is ~1024 or 256~ 3072 or 768 (forgot we're counting in triangles),0,0.9875342845916748
441493127,496,devshgraphicsprogramming,2020-06-17T12:03:50Z,the mdi buffer you want in the cpu or gpu specialization of the `imeshpacker` (see the virtualtexturing class which stores actual data only in the specialized versions),0,0.9943532943725586
441494995,496,devshgraphicsprogramming,2020-06-17T12:07:28Z,"also count in mdi struct units, not bytes (makes pointer arithmetic easier)",0,0.992190420627594
441495055,496,devshgraphicsprogramming,2020-06-17T12:07:34Z,you don't need this struct,0,0.9530407190322876
441495853,496,devshgraphicsprogramming,2020-06-17T12:09:18Z,"don't use `std::optional` on frontend api, add an `isvalid` method to `packedmeshbufferdata`",0,0.9953408241271973
441498498,496,devshgraphicsprogramming,2020-06-17T12:14:21Z,"template on a const iterator pair (always preferable to a const vector reference), remove the virtualism and do iterator here then make a protected `virtual` `commit_impl` which actually does the divergent cpu/gpu specific codepaths.",0,0.9942545294761658
441499229,496,devshgraphicsprogramming,2020-06-17T12:15:42Z,isnt there a const safe version of `getindexbufferbinding()`?,0,0.9905791878700256
441508305,496,devshgraphicsprogramming,2020-06-17T12:32:01Z,"use `uint32_t` address spaces, the allocators will use less reserved space if they don't have to do arithmetic in 64bit",0,0.9939085245132446
441508472,496,devshgraphicsprogramming,2020-06-17T12:32:19Z,+1,0,0.7702900171279907
441511676,496,devshgraphicsprogramming,2020-06-17T12:37:52Z,"add a second template parameter to the list, `mdistructtype` and use this instead of `drawelementsindirectcommand_t` (but you can static_assert that `is_base_of `) this is to allow the user to add data onto the mdi parameter data stream, like this [code block]",0,0.9954935312271118
441512143,496,devshgraphicsprogramming,2020-06-17T12:38:40Z,make buffer in the cpu specialization and in the first `commit` call,0,0.9935733675956726
441513169,496,devshgraphicsprogramming,2020-06-17T12:40:20Z,btw a static method in the ccpumeshpacker to help the user figure out how many packers ( `vector predefinedlayout`) we need from a list (iterator pair) of icpumeshbuffers would be handy!,0,0.763735294342041
441513958,496,devshgraphicsprogramming,2020-06-17T12:41:43Z,"don't divide the address space by the minimum allocation size, just keep it in units of `uint32_t` (so divide by `sizeof(uint32_t)`)",0,0.9938515424728394
441514176,496,devshgraphicsprogramming,2020-06-17T12:42:05Z,this is perfect,1,0.7718662023544312
442694571,496,Przemog1,2020-06-19T08:03:20Z,why?,0,0.8699262738227844
442735326,496,devshgraphicsprogramming,2020-06-19T09:33:47Z,"it makes the code less-readable, wastes memory (add extra members) these heavy duty functions will be dealing with thousands of meshes, so we want the inputs and outputs to be simple structs which are pod (plain old data)",0,0.8955172300338745
443514681,496,devshgraphicsprogramming,2020-06-22T12:14:17Z,"if one mdi needs at least 64 triangles, and one triangle is 3 indices of 2 bytes each, and your index buffer can only be max 8gb (due to firstindex being a `uint32_t` in the mdi struct), this gives you a max of 20'000'000 mdi structs",0,0.9914636015892029
443515132,496,devshgraphicsprogramming,2020-06-22T12:15:09Z,"don't invent a new namespace, this is what a non-templated interface/base class is for",0,0.9608766436576843
443516228,496,devshgraphicsprogramming,2020-06-22T12:17:17Z,"your address spaces are in bytes, but your minimum allocation sizes are in units of `sizeof(typeof(data))` for the sake of consistency, maybe switch from `sizeinbytes` to `count` and divide all your defaults by `sizeof(uint32_t)` (everything else) and `sizeof(uint16_t)` (indices) where appropriate",0,0.9944255352020264
443517026,496,devshgraphicsprogramming,2020-06-22T12:18:51Z,urgent,-1,0.7982004880905151
443517486,496,devshgraphicsprogramming,2020-06-22T12:19:43Z,call it `offset` not `byteoffset` because you will be doing [code block] not [code block],0,0.9942806959152222
443518101,496,devshgraphicsprogramming,2020-06-22T12:20:46Z,i've mentioned that 2gb is too much here before,0,0.6861417293548584
443518921,496,devshgraphicsprogramming,2020-06-22T12:22:15Z,you need to compare `mdiparameterbyteoffset` against address allocator's `invalid_address` not `~0u` ;),1,0.7110726237297058
443521117,496,devshgraphicsprogramming,2020-06-22T12:26:24Z,"you need a begin and end range defined by two iterators or pointers, also templating on iterators is much more useful [code block]",0,0.9775317907333374
443521620,496,devshgraphicsprogramming,2020-06-22T12:27:15Z,you need to take the same arguments as `alloc` + the `packedmeshbufferdata` that `alloc` returned,0,0.9930509328842163
443522054,496,devshgraphicsprogramming,2020-06-22T12:28:02Z,you need a min and max,0,0.9845937490463257
443524254,496,devshgraphicsprogramming,2020-06-22T12:32:12Z,"create the buffers in a separate method which needs to be called before the first `commit` (you can check and assert on that) aside from that the cpu meshpacker should (or even the gpu in the future) posses a `shrink_to_fit` method that shrinks the address space (for now, assert and forbid shrinking if the cpu buffers have already been created)",0,0.9956610798835754
443525260,496,devshgraphicsprogramming,2020-06-22T12:34:08Z,+1,0,0.7702900171279907
443525567,496,devshgraphicsprogramming,2020-06-22T12:34:42Z,"still relevant, see new code listing for `alloc` templated on iterators",0,0.9923152923583984
443525836,496,devshgraphicsprogramming,2020-06-22T12:35:12Z,see latest comment on your default parameters,0,0.9891369342803955
443564376,496,devshgraphicsprogramming,2020-06-22T13:39:07Z,at least one per meshbuffer (but obvs you forgot that `alloc` was meant for a iterator range of meshbuffers),0,0.9891013503074646
443564836,496,devshgraphicsprogramming,2020-06-22T13:39:51Z,the overall logic seems fine. but remember when accepting multiple meshes into `alloc` you'll need to sum the index counts.,0,0.9820183515548706
443565841,496,devshgraphicsprogramming,2020-06-22T13:41:15Z,"`uint32_t firstindex;` is measured in index count, its not a byteoffset, so need for multiply by sizeof",0,0.991830050945282
443566129,496,devshgraphicsprogramming,2020-06-22T13:41:43Z,"when you allocate the addresses for vertices, you will need to feed the address here directly",0,0.9890840649604797
443566501,496,devshgraphicsprogramming,2020-06-22T13:42:18Z,"as i explained in previous comments, its best to work in units of struct type, not bytes, so get rid of the multiply by sizeof",0,0.9846311211585999
443567180,496,devshgraphicsprogramming,2020-06-22T13:43:20Z,"when you allocate the addresses for per-instance data, this will become the address offset to the instance data",0,0.9928261041641235
443737262,496,Przemog1,2020-06-22T18:06:23Z,why min?,0,0.9280730485916138
443812402,496,devshgraphicsprogramming,2020-06-22T20:38:46Z,"because eventually when you will do clustering of triangles you will need to split before you reach the max, but never split before you reach the minimum (gpus simd lanes are 32 or 64 invocations, you want to ensure they are full or close to full)",0,0.9858198165893555
443816721,496,devshgraphicsprogramming,2020-06-22T20:47:09Z,"actually divide by the minimum index count per patch, so you have room for the extra splits (we can shrink the mdi allocation during `commit`, if we want)",0,0.9935035109519958
443817441,496,devshgraphicsprogramming,2020-06-22T20:48:39Z,"this you want to do during commit, since any splitting, clustering, etc. will take place then. also moving this to `commit` will allow you defer the creation of mdi cpubuffer (or any buffer at all) until you got your `allocs` all figured out",0,0.9944830536842346
443818044,496,devshgraphicsprogramming,2020-06-22T20:49:52Z,"~ actually i'd take the `packedmeshbufferdata` as a reference (non `const` to allow for mutability, which would only be useful to free up some mdi space) ~ we'd actually need two separate structs, one for alloc and one for commit to return",0,0.9864910840988159
451759621,496,devshgraphicsprogramming,2020-07-08T18:55:56Z,still,0,0.9232051968574524
451759642,496,devshgraphicsprogramming,2020-07-08T18:55:58Z,still,0,0.9232051968574524
451759693,496,devshgraphicsprogramming,2020-07-08T18:56:06Z,still,0,0.9232051968574524
451759749,496,devshgraphicsprogramming,2020-07-08T18:56:12Z,still,0,0.9232051968574524
451761426,496,devshgraphicsprogramming,2020-07-08T18:59:20Z,no this method is nice ;),1,0.9948320388793945
451838654,496,devshgraphicsprogramming,2020-07-08T21:35:04Z,you still need `isvalid` for this struct as well,0,0.9901698231697083
451855658,496,devshgraphicsprogramming,2020-07-08T22:17:07Z,just `assert` this.,0,0.9757488965988159
451856544,496,devshgraphicsprogramming,2020-07-08T22:19:24Z,"move this to parent, and have it call a virtual `alloc_do_xxxxx` for every divergent (different for cpu or gpu mesh) thing you need to do",0,0.9938951134681702
451857283,496,devshgraphicsprogramming,2020-07-08T22:21:24Z,"arguments should be `(reservedallocationmeshbuffers& reserved, const iterator begin, const iterator end);` upon success (the return of a valid `packedmeshbufferdata`) the `reserved` passed into the function shall be put into an invalid state (so that you do not try to `free` using it)",0,0.9938859343528748
451859291,496,devshgraphicsprogramming,2020-07-08T22:26:56Z,"move this to the implementations, you can deduce if commit was called by checking if the buffers for the data are null (not created yet)",0,0.9948871731758118
451860829,496,devshgraphicsprogramming,2020-07-08T22:31:00Z,"if you don't count `allocparams.vertexbufferminallocsize` in bytes, but vertices then you don't need to divide, if you count in bytes, then you need to divide and the question is ""do you round up?""",0,0.9906362891197205
451860917,496,devshgraphicsprogramming,2020-07-08T22:31:16Z,just assert,0,0.935419499874115
451861124,496,devshgraphicsprogramming,2020-07-08T22:31:53Z,likewise for `perinstancevertexbufferminallocsize`,0,0.993842601776123
451861328,496,devshgraphicsprogramming,2020-07-08T22:32:23Z,"i would really not count the allocation parameters for the indices in bytes, makes little sense",-1,0.6924551725387573
451861734,496,devshgraphicsprogramming,2020-07-08T22:33:42Z,"a) `alignof(mdistructtype)` b) don't count mdi allocation parameters in bytes, it makes no sense.",0,0.9902148246765137
451862649,496,devshgraphicsprogramming,2020-07-08T22:36:29Z,change to `uint32_t` you will never overflow i would keep an array of [max_attribute_count] (the constexpr is called something else its in the ipipeline class) offsets within the vertex data address space that denote the start of the deinterleaved vertex attribute,0,0.9923366904258728
451863101,496,devshgraphicsprogramming,2020-07-08T22:37:43Z,"instead of 16, use the engine's constexpr",0,0.9939213991165161
451864584,496,devshgraphicsprogramming,2020-07-08T22:41:57Z,"hmm, actually you could defer it until `commit` since you will have an array of `sbufferbinding ` in the child just like an `imeshbuffer` has, and these offsets are implicit there however you could add a protected static method that helps the child set-up their `sbufferbinding ` for the vertices and indices, and some of the pipelines things partially",0,0.991561233997345
451865415,496,devshgraphicsprogramming,2020-07-08T22:44:26Z,"only exception is vertex data, since that doesn't really have a fixed sizeof",0,0.920250415802002
451866098,496,devshgraphicsprogramming,2020-07-08T22:46:25Z,a static method to help me figure out what my `predefinedlayout` need to be and how many of them i need and how to pair my meshes would be nice... but that's last on the todo list,0,0.8734267354011536
452201267,496,Przemog1,2020-07-09T13:04:28Z,i will change that,0,0.9641327857971191
452219316,496,Przemog1,2020-07-09T13:31:44Z,so you want program to terminate in this case? why?,0,0.9203720688819885
452285751,496,Przemog1,2020-07-09T15:03:05Z,"i want to focus on other things right now, is it ok if i take care of it later?",0,0.9744946956634521
452371671,496,devshgraphicsprogramming,2020-07-09T17:17:56Z,"sure, just dont forget",0,0.8491382598876953
452371984,496,devshgraphicsprogramming,2020-07-09T17:18:33Z,because its a gross logic error to feed a function a list of pointers that contains a null.,-1,0.9707984328269958
452383035,496,Przemog1,2020-07-09T17:38:09Z,it will be changed that in next commit,0,0.9897652864456177
453205559,496,devshgraphicsprogramming,2020-07-11T15:27:19Z,"you don't need to return the smart pointers to any buffers, just offsets inside them because the buffers are always the same for all `commit`s and will be kept by the class. `vertexinputparams` will be identical as well, so no need for a copy returned by every allocation. whatever is the same for all objects, you shall get from the factory that made them.",0,0.9919014573097229
453205668,496,devshgraphicsprogramming,2020-07-11T15:28:50Z,"`m_vtxsize==0` if you have no per-vertex attributes, so you'll never hit this assert ;)",1,0.9109651446342468
453205794,496,devshgraphicsprogramming,2020-07-11T15:30:07Z,nothing in this class depends on `meshbuffertype` so the template parameter is not necessary.,0,0.9909061193466187
453205923,496,devshgraphicsprogramming,2020-07-11T15:31:14Z,"`return_type` from geometry creator is overkill here, because you already know the different pipeline settings you will draw meshes with by the time you want to pack them. geometry creator returns all this extra data because it tells you how to do it, packer wont need that.",0,0.9789918065071106
453206230,496,devshgraphicsprogramming,2020-07-11T15:34:41Z,"also because you dont need to return buffers, you don't need to template, and this struct can go into the base packer class (or a base of the base that is not templated upon the mdi struct)",0,0.9914469718933105
453206437,496,devshgraphicsprogramming,2020-07-11T15:36:40Z,"retain `alloc`, `commit` and both planned `free` overrides in the base class [a link] [code block]",0,0.9937683343887329
453206523,496,devshgraphicsprogramming,2020-07-11T15:37:45Z,take the `reservedallocationmeshbuffers` as a reference because you'll need to put it in an invalid state.,0,0.9788382053375244
453206547,496,devshgraphicsprogramming,2020-07-11T15:38:03Z,make a different named struct for retuning the common data,0,0.9910851120948792
453206608,496,devshgraphicsprogramming,2020-07-11T15:39:08Z,rename to `instantiatedatastorage` also take a `shrink_address_space_size_target=~0u` argument,0,0.9949703812599182
453206709,496,devshgraphicsprogramming,2020-07-11T15:40:04Z,wtf?,-1,0.9876046180725098
453206844,496,devshgraphicsprogramming,2020-07-11T15:41:14Z,"you can use `address_allocator_traits` or the allocator itself and query the total size of its address space, then multiply that by the `sizeof` the units its working in and you'll get the buffer size you need.",0,0.9930744171142578
453207147,496,devshgraphicsprogramming,2020-07-11T15:45:06Z,then `assert` those conditions,0,0.986182689666748
453208127,496,devshgraphicsprogramming,2020-07-11T15:56:36Z,"no thats not the correct counting, correct is: [code block] p.s. also `roundup` does not perform the division",0,0.9821288585662842
453208326,496,devshgraphicsprogramming,2020-07-11T15:58:44Z,"note for the future: to count the vertices properly you'd need to iterate through all the indices and build yourself an `unordered_set` of ""vertices actually used""",0,0.9922913908958435
453208371,496,devshgraphicsprogramming,2020-07-11T15:59:13Z,"nope, you'd need to iterate through the meshbuffers and accumulate `getinstancecount`",0,0.9772367477416992
453208685,496,devshgraphicsprogramming,2020-07-11T16:01:57Z,"nope, just one, one `reservedallocationmeshbuffers` has the reservation for multiple meshbuffers already",0,0.9853665828704834
453208737,496,devshgraphicsprogramming,2020-07-11T16:02:45Z,"somewhat, yes",0,0.8471569418907166
453208793,496,devshgraphicsprogramming,2020-07-11T16:03:22Z,nvm makes no sense,0,0.8882771730422974
453208916,496,devshgraphicsprogramming,2020-07-11T16:04:57Z,"hoist this loop above the vertex attribute loop, respect data locality and your cpus caches. iterate/loop from most sparse data to most packed.. so meshbuffer > indices > vertex attributes and instance attributes",0,0.9906593561172485
453209103,496,devshgraphicsprogramming,2020-07-11T16:06:30Z,there's a method in `icpumeshbuffer` called `getattribute` and it lets you use the same value as what your index buffer stores to get your vertexbuffer,0,0.9938822984695435
453209175,496,devshgraphicsprogramming,2020-07-11T16:07:24Z,coach on geometry manipulation with our api,0,0.9689393639564514
453241573,496,Przemog1,2020-07-11T22:30:50Z,oops,-1,0.9215677976608276
455427926,496,Przemog1,2020-07-15T23:46:26Z,but it is possible to use valid mesh buffer with per instance attributes only..,0,0.9930102229118347
455557051,496,Przemog1,2020-07-16T07:09:48Z,its 320mb... i guess it's time to go to sleep xd,0,0.48412734270095825
455620550,496,devshgraphicsprogramming,2020-07-16T08:37:50Z,its usually 12b,0,0.9823406934738159
455621484,496,devshgraphicsprogramming,2020-07-16T08:39:20Z,but you check for presence of per-vertex attributes in the `if` statement just above,0,0.994147539138794
455635609,496,devshgraphicsprogramming,2020-07-16T09:02:12Z,also take a `shrink_address_space_size_target=~0u` argument,0,0.9949631690979004
455637371,496,devshgraphicsprogramming,2020-07-16T09:05:07Z,"you need to free the previously allocated mdi address, otherwise you'll leak",0,0.9727036356925964
455637611,496,devshgraphicsprogramming,2020-07-16T09:05:28Z,free mdi and index address,0,0.9866429567337036
455637934,496,devshgraphicsprogramming,2020-07-16T09:05:55Z,why are you multiplying by the vertex size!?,0,0.9503820538520813
455638408,496,devshgraphicsprogramming,2020-07-16T09:06:41Z,free mdi and index address plus the vertex address if allocated,0,0.9937537312507629
455639150,496,devshgraphicsprogramming,2020-07-16T09:07:55Z,"you can use address_allocator_traits or the allocator itself and query the total size of its address space, then multiply that by the sizeof the units its working in and you'll get the buffer size you need.",0,0.9918918609619141
455639605,496,devshgraphicsprogramming,2020-07-16T09:08:33Z,can't you assign this in constructor or something?,0,0.9928626418113708
455641888,496,devshgraphicsprogramming,2020-07-16T09:12:12Z,"you'll fail if you don't handle vertex and index buffers separately, you need two separate buffers that you partition separately",0,0.8799256086349487
455642785,496,devshgraphicsprogramming,2020-07-16T09:13:48Z,why do you think rounding is necessary?,0,0.9633929133415222
456188518,496,Przemog1,2020-07-17T02:48:29Z,"forgot to change that, it worked when `vtxsupportedsize` was in bytes",0,0.9916908740997314
460397836,496,devshgraphicsprogramming,2020-07-25T11:56:29Z,"you don't need to handle triangle_fan, triangle_strip inputs right now, but you need to handle null index buffers",0,0.9926193356513977
460401229,496,devshgraphicsprogramming,2020-07-25T12:39:43Z,done?,0,0.9815027713775635
466733093,496,Crisspl,2020-08-06T23:10:00Z,use `smart_refctd_ptr`s instead,0,0.9927117824554443
466734588,496,Crisspl,2020-08-06T23:14:25Z,arent you missing pipeline layout?,0,0.9855751991271973
466735467,496,Crisspl,2020-08-06T23:17:18Z,you can probably optimize those values knowing the disk meshes you are packing. what about this shrinking issue you had yesterday?,0,0.9896823763847351
466738109,496,Crisspl,2020-08-06T23:26:06Z,1. why packing of matrices happens every frame? do it once 2. make function for each packing test case of matrices that returns buffer with matrices + push constants (as a spushconstantrange and uint8_t[128] for example) with offsets compatible with what shader expects,0,0.992974042892456
467190143,496,devshgraphicsprogramming,2020-08-07T18:01:28Z,instead of `new` do `core::make_smart_refctd_ptr (constructor args...)`,0,0.9947463274002075
467194003,496,devshgraphicsprogramming,2020-08-07T18:09:38Z,"no need, he should shrink the buffers later anyway, even if he overallocates the memory it should not impact the benchmarks ;)",1,0.9060385823249817
467203893,496,devshgraphicsprogramming,2020-08-07T18:30:41Z,"it doesn't matter for debug if its done with cpu or gpu, but we need to see some updates to see that the shader gets the correct memory locations (so benchmark is not spoiled by cache). when actually benchmarking there should be no per-frame updates of matrices at all.",0,0.9854529500007629
467314562,496,devshgraphicsprogramming,2020-08-07T22:36:44Z,"no, this will skew benchmark results, its also horribly inefficient. the viewproj matrix should have been already concatenated with the bone's world matrix in the routine that updates bone matrices (be it a gpu compute shader or cpu).",-1,0.9728579521179199
467314779,496,devshgraphicsprogramming,2020-08-07T22:37:34Z,rows store rows not columns a `vec3` array is basically a `vec4` array but with useless padding.,0,0.9582734704017639
467319477,496,devshgraphicsprogramming,2020-08-07T22:56:54Z,so no need for the vp in the push constants,0,0.9924486875534058
467319612,496,devshgraphicsprogramming,2020-08-07T22:57:36Z,in non-debug mode (benchmarking) don't pass anything to fragment shader,0,0.9854133725166321
467319733,496,devshgraphicsprogramming,2020-08-07T22:58:13Z,"disable these inputs when benchmarking ( you can make the `pos = vec4(4,3,2,1)` a constant)",0,0.9929993152618408
467322683,496,devshgraphicsprogramming,2020-08-07T23:10:54Z,far more performant is to have [code block] there's nothing i hate more than nested vectors!,-1,0.9907218217849731
467323920,496,devshgraphicsprogramming,2020-08-07T23:16:41Z,how?,0,0.9472053647041321
467324077,496,devshgraphicsprogramming,2020-08-07T23:17:24Z,i'd still like to see you use the `icpumeshbuffer` static methods to advance and compute pointers if possible,0,0.9678672552108765
467324304,496,devshgraphicsprogramming,2020-08-07T23:18:34Z,move to `include/irr/asset/`,0,0.9933246970176697
467324400,496,devshgraphicsprogramming,2020-08-07T23:19:00Z,do you even need these anymore?,0,0.9892911314964294
467324711,496,devshgraphicsprogramming,2020-08-07T23:20:25Z,?,0,0.9557723999023438
467324835,496,devshgraphicsprogramming,2020-08-07T23:20:58Z,especially the static methods of `icpumeshbuffer`,0,0.9928115010261536
467325145,496,devshgraphicsprogramming,2020-08-07T23:22:26Z,definitely looks like you are,0,0.914645791053772
467628835,496,devshgraphicsprogramming,2020-08-09T21:06:05Z,do `mat3(matrices[boneid].normalmatrix)*normalize(normal)`,0,0.9938256740570068
467628981,496,devshgraphicsprogramming,2020-08-09T21:07:38Z,missing normal matrix?,0,0.985304057598114
467629013,496,devshgraphicsprogramming,2020-08-09T21:08:17Z,"for this benchmark to be sane, you need far more than 64 disks, i'm thinking upwards of 16 thousand.",0,0.893517255783081
467650710,496,Przemog1,2020-08-10T00:49:24Z,"no need, these mesh buffers are inputs to mesh packer",0,0.9872974157333374
468058670,496,devshgraphicsprogramming,2020-08-10T17:19:28Z,"might wanna move that to ""common""",0,0.9929982423782349
468058748,496,devshgraphicsprogramming,2020-08-10T17:19:39Z,disable in benchmark mode,0,0.9830341339111328
468059179,496,devshgraphicsprogramming,2020-08-10T17:20:26Z,do a hack `gl_position.xyz += mat3(matrices[boneid].normalmatrix) * normalize(normal)`,0,0.9890671372413635
468071674,496,devshgraphicsprogramming,2020-08-10T17:43:12Z,so you dont need to have an output `vnormal`,0,0.9865038394927979
468110681,496,devshgraphicsprogramming,2020-08-10T18:54:28Z,also a cool thing would be to ensure that `abs(gl_position.z) > abs(gl_position.w)` which will send the triangles outside the ndc bounds and ensure no pixels get rasterized. an idea would be to do this [code block],0,0.9776058197021484
468120934,496,devshgraphicsprogramming,2020-08-10T19:13:59Z,you can pass such defines via the iglslcompiler remind us how xd ?,0,0.9912593960762024
468123268,496,devshgraphicsprogramming,2020-08-10T19:18:32Z,`(device->run() && receiver.keepopen())` not in benchmark mode,0,0.9936845898628235
468123427,496,devshgraphicsprogramming,2020-08-10T19:18:50Z,"`device->run()` polls input, etc.",0,0.9914050102233887
468124382,496,devshgraphicsprogramming,2020-08-10T19:20:43Z,`glflush` afterwards or you risk an infinite wait.,0,0.9292669296264648
468125036,496,devshgraphicsprogramming,2020-08-10T19:21:58Z,"you need one `driver->beginscene` at the start and then set the correct fbo (depth only, really low resolution)",0,0.9891945123672485
468125339,496,devshgraphicsprogramming,2020-08-10T19:22:34Z,and clear the z-buffer to the near value (1.f),0,0.9921059608459473
468125435,496,devshgraphicsprogramming,2020-08-10T19:22:45Z,all that for the benchmark mode obviously.,0,0.9763058423995972
468128316,496,devshgraphicsprogramming,2020-08-10T19:25:31Z,two draws... what?,-1,0.5969052910804749
468136713,496,devshgraphicsprogramming,2020-08-10T19:37:28Z,i want thousands of disks,0,0.5782711505889893
468137429,496,devshgraphicsprogramming,2020-08-10T19:38:53Z,"less iterations, more disks and bones.",0,0.9627253413200378
468138864,496,devshgraphicsprogramming,2020-08-10T19:41:28Z,explain what's going on with `newinputparams`,0,0.9911681413650513
468139573,496,devshgraphicsprogramming,2020-08-10T19:42:52Z,"todo tweak all `newinputparams, blendparams, geometryobject.assemblyparams, rasterparams` to optimize for vertex only workloads in benchmark mode",0,0.9955189228057861
468141548,496,devshgraphicsprogramming,2020-08-10T19:46:53Z,also no fragment shader to be used in benchmark mode.,0,0.9902521371841431
468150956,496,Przemog1,2020-08-10T20:05:24Z,"i just extend vertices by by bone id attribute here, and it requires updated `svertexinputparams`",0,0.9916046261787415
468153179,496,devshgraphicsprogramming,2020-08-10T20:10:08Z,"ok, but the tweaks for benchmark stuff remain in place.",0,0.976554274559021
468156139,496,devshgraphicsprogramming,2020-08-10T20:13:51Z,"need more than one bone per mesh, need artificial duplication of bones, and need a few distinct bones (1-9) being used by different groups of vertices.",0,0.9699903130531311
468477460,496,devshgraphicsprogramming,2020-08-11T10:21:50Z,please set up your git or visual studio to not modify the line endings of files,0,0.9910191893577576
468490047,496,devshgraphicsprogramming,2020-08-11T10:46:26Z,"for benchmark mode you want to make a depth only fbo and render to that, not the screen.",0,0.989191472530365
468490291,496,devshgraphicsprogramming,2020-08-11T10:46:54Z,dont normalize the normal in benchmark mode,0,0.960452139377594
470653338,496,devshgraphicsprogramming,2020-08-14T14:20:44Z,"`+=` dont overwrite, otherwise compiler could optimize out fetching the first three rows for `bonematrix`.",0,0.9923073649406433
470653868,496,devshgraphicsprogramming,2020-08-14T14:21:39Z,same here,0,0.9628711938858032
470654629,496,devshgraphicsprogramming,2020-08-14T14:22:54Z,do something about not having to manually change this,0,0.9358166456222534
470655025,496,devshgraphicsprogramming,2020-08-14T14:23:35Z,64x64 please,0,0.9844308495521545
470656608,496,devshgraphicsprogramming,2020-08-14T14:26:15Z,"dont pass refcounted objects by reference, its ugly.",-1,0.9865698218345642
280065579,291,devshgraphicsprogramming,2019-05-01T13:04:01Z,"just make it a `max($env,8)` ;)",1,0.8811773061752319
280085708,291,manhnt9,2019-05-01T14:20:26Z,"thanks for suggestions, i will update",1,0.8359726071357727
280331306,291,manhnt9,2019-05-02T08:44:48Z,updated,0,0.968669593334198
281213133,291,devshgraphicsprogramming,2019-05-06T14:36:52Z,"remove this comment, also from other examples if you desire to do so",0,0.9899595975875854
281213364,291,devshgraphicsprogramming,2019-05-06T14:37:23Z,only if irrbaw is configured to be built with cegui,0,0.9931057095527649
281214138,291,devshgraphicsprogramming,2019-05-06T14:39:13Z,"if we're not gonna keep something around, don't make it a submodule... submodules are hard to get rid of later on",0,0.625186562538147
281214396,291,devshgraphicsprogramming,2019-05-06T14:39:41Z,fix please.,0,0.9598027467727661
281215192,291,devshgraphicsprogramming,2019-05-06T14:41:36Z,"the final deliverable (when we actually merge) needs those build on linux as well, or at the very least expat (since freetype is ubiquitous). if for some reason its not appropriate to build these ourselves, then they should at the very least be statically linked.",0,0.9922218918800354
281437078,291,manhnt9,2019-05-07T01:57:12Z,"tried removing other examples, my editor produces ^m as eol so there're more changes in a commit. i'm only committing for my example for now.",0,0.8712918758392334
281437272,291,manhnt9,2019-05-07T01:58:47Z,updated.,0,0.9856141209602356
281437361,291,manhnt9,2019-05-07T01:59:26Z,i can just remove msvc check and let all compilers build the deps. since the deps source is already portable.,0,0.9924290776252747
281437474,291,manhnt9,2019-05-07T02:00:17Z,submodule will introduce much less changes in your git history than directly put the code files here.,0,0.9857660531997681
281785414,291,Crisspl,2019-05-07T19:00:33Z,"irrlichtserver has to make its own pch because of different flags etc. however maybe it could be better to have in repo pch_server.h with just `#include ""pch.h""` instead of making cmake creating it",0,0.9935391545295715
282008738,291,devshgraphicsprogramming,2019-05-08T10:33:03Z,"dont use namespace `irr` outside the library source, ever",0,0.9853487610816956
282009227,291,devshgraphicsprogramming,2019-05-08T10:34:40Z,"rename the brdf prefix to brdf_explorer, i don't want it colliding with actual pure-brdf stuff later on or to be misunderstood",0,0.9178360104560852
282009604,291,devshgraphicsprogramming,2019-05-08T10:36:10Z,"because of the pure insane number of dependencies, `irr::ext::cegui` should be its own statically linked library",-1,0.73613440990448
282009862,291,devshgraphicsprogramming,2019-05-08T10:37:08Z,what is the `brdf` object going to be responsible for?,0,0.9918848276138306
282011225,291,devshgraphicsprogramming,2019-05-08T10:42:13Z,"ok you need to rename this object to `brdfexplorerapp` or something similar, simply calling it `brdf` is really confusing",-1,0.7393838167190552
282012245,291,devshgraphicsprogramming,2019-05-08T10:45:42Z,"`collectglstate` and `executegldiff` take a list of booleans about what state it should care about. cegui uses opengl 3 so things like ssbos, storage images, etc. shouldn't matter also if you care about current fbo, viewport, etc then it will change those, sometimes that is not what you want, this is why in the silverlining example i told it to not care about fbo, depth test, viewport etc. etc. because i wanted to render it into a currently texture with currently set viewport size and depth testing.",0,0.976484477519989
282012784,291,devshgraphicsprogramming,2019-05-08T10:47:29Z,"default constructor will make an `copenglstate` object that is as-if for a default opengl state that you get at startup, just pointing this out.. don't know if thats the state you want cegui to start out in",0,0.9445205330848694
282013137,291,devshgraphicsprogramming,2019-05-08T10:48:42Z,do we need to expose cegui in the public headers of your `irr::ext::cegui` ?,0,0.9952033758163452
282033831,291,manhnt9,2019-05-08T11:59:20Z,"yes, i had the same idea but was just testing it quickly before refactoring. i often work that way, usually i'll refactor things later.",0,0.9486805200576782
282735233,291,manhnt9,2019-05-10T03:24:40Z,"yes, because ext will only help you set up. in order to develop gui, you'll have to use cegui api too.",0,0.9835814237594604
283173772,291,manhnt9,2019-05-13T02:44:36Z,"all other examples have it, could you explain further?",0,0.9855616688728333
283174005,291,manhnt9,2019-05-13T02:46:59Z,"will compile ext as lib and link later, when things render on the screen.",0,0.9912473559379578
283174024,291,manhnt9,2019-05-13T02:47:12Z,updated.,0,0.9856141209602356
283174464,291,manhnt9,2019-05-13T02:51:42Z,refactored,0,0.9819386005401611
283174637,291,manhnt9,2019-05-13T02:53:24Z,added to task list in #279,0,0.9923999309539795
283174688,291,manhnt9,2019-05-13T02:53:52Z,refactored.,0,0.9826053380966187
283177286,291,manhnt9,2019-05-13T03:20:43Z,"added to task list, will review this when things render.",0,0.9888371229171753
283177306,291,manhnt9,2019-05-13T03:20:58Z,"added to task list, will review this when things render.",0,0.9888371229171753
283948532,291,devshgraphicsprogramming,2019-05-14T18:50:15Z,examples have `using namespace irr` they don't put random code in the namespace itself,0,0.9920268654823303
284068314,291,manhnt9,2019-05-15T02:38:25Z,"ok, like only put `using namespace` in example having consistent code context.",0,0.9908202290534973
284318059,291,devshgraphicsprogramming,2019-05-15T15:31:37Z,"remove this, this drags down performance... we should display the frame time in miliseconds as measured by an opengl timer query with freetype font by cegui",0,0.9709895849227905
284532002,291,manhnt9,2019-05-16T04:04:27Z,removed.,0,0.9782117605209351
284663514,291,devshgraphicsprogramming,2019-05-16T11:36:57Z,not quoting anymore?,0,0.9809356927871704
284663735,291,devshgraphicsprogramming,2019-05-16T11:37:40Z,is the ext called `irr::ext::gui` or `irr::ext::cegui` ?,0,0.9945461750030518
284663855,291,devshgraphicsprogramming,2019-05-16T11:38:07Z,what does this do?,0,0.944265604019165
284663966,291,devshgraphicsprogramming,2019-05-16T11:38:30Z,what does this do?,0,0.944265604019165
284666540,291,devshgraphicsprogramming,2019-05-16T11:46:33Z,"those are only enabled by a special irrbaw option when building the main library, because they inject into process and make it impossible to use renderdoc (the sanitizers in particular) maybe you could hijack the main irrlibrary compile options (they are separate and different for relaese and debug targets)",0,0.9930865168571472
284666922,291,devshgraphicsprogramming,2019-05-16T11:47:51Z,"wrong destination, need the install prefix as well",0,0.9581806659698486
284667313,291,devshgraphicsprogramming,2019-05-16T11:49:05Z,i'd call it irrextcegui to keep consistency with the namespace `irr::ext::cegui`,0,0.9950751662254333
284669584,291,devshgraphicsprogramming,2019-05-16T11:55:53Z,install prefix?,0,0.9894098043441772
285369143,291,devshgraphicsprogramming,2019-05-19T08:28:01Z,"eventually after hooking in irrbaw image loaders, this will disappear?",0,0.9943479895591736
285369797,291,devshgraphicsprogramming,2019-05-19T08:44:25Z,brdf explorer will be a lib?,0,0.9922125935554504
285413408,291,manhnt9,2019-05-20T02:20:13Z,"yes, not sure why it doesn't work before although i tried different formats including non-quotes and quotes. but right now windows and linux are working fine anyways.",0,0.8357957601547241
285415312,291,manhnt9,2019-05-20T02:39:19Z,irr::ext::gui means gui dependencies used by ext.,0,0.9928641319274902
285415378,291,manhnt9,2019-05-20T02:40:04Z,it copies cegui's libraries to installation folder for end users to link.,0,0.9932154417037964
285415580,291,manhnt9,2019-05-20T02:41:36Z,"on windows, end users need headers of cegui's dependencies to compile their app since cegui include those too.",0,0.9929473400115967
285415792,291,manhnt9,2019-05-20T02:43:58Z,"about the install prefix, i replied once before. maybe you missed the mail (please use mail filter to classify github mail). `install()` knows the folder. destination is also correct since this is for a library, the ${executable_name} is the one which causes misunderstanding, will refactor.",0,0.9911748170852661
285415967,291,manhnt9,2019-05-20T02:45:41Z,changed to irrextcegui.,0,0.9916372895240784
285417036,291,manhnt9,2019-05-20T02:57:38Z,"no, it needs to compile because the code must access to the image codec interface. unless i patched cegui to have a null image codec or embed irrbaw image loader code into cegui (not 100% certain if that will be accepted into original cegui repo).",0,0.9896159172058105
285417187,291,manhnt9,2019-05-20T02:59:03Z,brdf_explorer_lib variable stores the library list (which the app needs to link).,0,0.9933881759643555
285417836,291,manhnt9,2019-05-20T03:05:38Z,could you tell me the involved line numbers?,0,0.9913961291313171
285492369,291,devshgraphicsprogramming,2019-05-20T09:06:47Z,"[a link] a. there's no gui folder here. b. with different gui system out there, we cannot just use `gui` as a name",0,0.9945762157440186
285492673,291,devshgraphicsprogramming,2019-05-20T09:07:34Z,the only folders that should be in `./include` should match namespace names 100%,0,0.966463565826416
285492888,291,manhnt9,2019-05-20T09:08:01Z,"mis-typed, there's no namespace like irr::ext::gui, only a gui folder.",0,0.8778250217437744
285493100,291,devshgraphicsprogramming,2019-05-20T09:08:30Z,i.e. if there's a `./include/irr/ext/visibilitybuffer` then there is a `irr::ext::visiblitybuffer`,0,0.9948305487632751
285493843,291,manhnt9,2019-05-20T09:10:18Z,"understood, see my other comment to solve the actual problem about this.",0,0.9797480702400208
288690705,291,devshgraphicsprogramming,2019-05-29T17:46:27Z,see #308,0,0.9681600332260132
289562303,291,devshgraphicsprogramming,2019-05-31T21:55:36Z,we actually have these beautiful options [a link],1,0.990338146686554
289586221,291,devshgraphicsprogramming,2019-06-01T01:10:29Z,done in latest commit,0,0.9820603132247925
289586227,291,devshgraphicsprogramming,2019-06-01T01:10:39Z,done in latest commit,0,0.9820603132247925
354820720,403,devshgraphicsprogramming,2019-12-06T13:00:38Z,binary is always forced,0,0.9675765633583069
354820751,403,devshgraphicsprogramming,2019-12-06T13:00:42Z,binary,0,0.9550668597221375
354821045,403,devshgraphicsprogramming,2019-12-06T13:01:30Z,you might want to convert all `_irr_compile_with` into cmake options that then go to a configure file,0,0.9940330386161804
355553578,403,devshgraphicsprogramming,2019-12-09T16:36:31Z,"are you sure this works? to unset a thing i guess it would have to exist first, but you also need to set it before the subfolder is included. i usually just set the thing to false, right before the subfolder include.",0,0.9890672564506531
355554072,403,devshgraphicsprogramming,2019-12-09T16:37:22Z,what are `layouts` ?,0,0.9929996728897095
355554957,403,AnastaZIuk,2019-12-09T16:38:49Z,"i meant i need to support tiled files, deep imagesm multilayered images and all stuff i guess you would like it to support:)",0,0.6016616225242615
355555223,403,devshgraphicsprogramming,2019-12-09T16:39:17Z,would be cool to re-use this for checking if file can be loaded.,0,0.8944606781005859
355555659,403,AnastaZIuk,2019-12-09T16:40:03Z,"that will be checked by `magicnumber`, sure",0,0.992794930934906
355560708,403,AnastaZIuk,2019-12-09T16:48:23Z,"i'm not sure being honest. well, i will do as you wrote, but i've not known how to do it yet. to fix.",-1,0.9613656997680664
355568244,403,devshgraphicsprogramming,2019-12-09T17:01:46Z,never put `using namespace` in a header!,0,0.985709547996521
355568720,403,devshgraphicsprogramming,2019-12-09T17:02:36Z,"watch out, magic numbers are usually stored as `uint32_t` for the purpose of endianness check, see my spirv loader",0,0.9890401363372803
355622193,403,devshgraphicsprogramming,2019-12-09T18:52:46Z,put this in `3rdparty/cmakelists.txt`,0,0.9934189915657043
355622571,403,devshgraphicsprogramming,2019-12-09T18:53:40Z,"it only needs to load regular openexr images produced by mitsuba, and gimp, you can error out on the more exotic stuff.",0,0.960090160369873
356794141,403,AnastaZIuk,2019-12-11T19:35:59Z,"i wanted to add dependency as ilmbase or openexr, that was my mistake, there is no need to add it since the only one dependency that could be added is `zlib`, but it is already done earlier",0,0.987593948841095
356809668,403,devshgraphicsprogramming,2019-12-11T20:10:07Z,"here you must configure your lib, add all the options, build static, etc. just before",0,0.9878276586532593
356811434,403,devshgraphicsprogramming,2019-12-11T20:14:05Z,"they're adding their own zlib i guess. you need to add dependency ilmbase, etc. just as jpeg, png, shaderc are adde above then link libraries, then add include directories seems you'll need to add dependency and link ilmbase as well",0,0.9842143058776855
356817856,403,AnastaZIuk,2019-12-11T20:29:33Z,shouldn't i configure lib in source cmakelists?,0,0.9939606189727783
356825524,403,devshgraphicsprogramming,2019-12-11T20:47:47Z,"no, you must set up all the cmake options for the subfolder before you include it.",0,0.9935266971588135
356857515,403,devshgraphicsprogramming,2019-12-11T21:59:18Z,"i've looked through your log, you're getting compile errors before you're getting linking errors, hence you don't know if a library called `openexr` even exists (wont get messages about library not found) also your log jumps straight from documetnation target to irrlicht, there are no ilm or openexr targets being built, this tells me that irrlicht does not have the ilm targets in the dependency chain. *before* introduce `_irr_compile_with_openexr_loader_` and disable it. see if you can compile with the loader disabled, if you can't you've fucked up an exisitng and working build system. *first* try to add dependencies explicitly, so you see the ilm/openexr targets being built or checked for building in the log *second* fix your missing include issues (include dirs), but make sure to sort out dependencies above first, as the build process may be producing include files in the build dir that you need to find. *third* maybe limit the openexr includes to the .cpp file, so that the whole project doesnt get polluted by openexr declarations.",0,0.9615099430084229
357400363,403,AnastaZIuk,2019-12-12T22:19:27Z,"sure, i will deal with it after having openexr loader done",0,0.9819023609161377
357411249,403,AnastaZIuk,2019-12-12T22:49:58Z,"_status:_ - before - **done properly, projects build** - first - ... - second - ... - third - ...",0,0.9892275333404541
357721574,403,devshgraphicsprogramming,2019-12-13T16:16:45Z,what the progress on the first?,0,0.9505048990249634
357879870,403,devshgraphicsprogramming,2019-12-14T00:27:03Z,"i did it all for you , see pr to your repo",0,0.916579008102417
358140680,403,devshgraphicsprogramming,2019-12-16T09:57:26Z,"this function is being used in more than one image loader, maybe we should make it into a static method of something common?",0,0.989458441734314
358141441,403,devshgraphicsprogramming,2019-12-16T09:58:57Z,"you need to take alignment into account as well, given by calcpitchinblocks () think of it as a fake/padded width.",0,0.9917265176773071
358141919,403,AnastaZIuk,2019-12-16T09:59:53Z,"openexr uses it as well, it's a good idea i think",1,0.9708771705627441
358142035,403,devshgraphicsprogramming,2019-12-16T10:00:06Z,you could do `datatosend = texelbuffer->getpointer()` instead of wasting a copy.,0,0.9903567433357239
358145988,403,devshgraphicsprogramming,2019-12-16T10:08:00Z,"doesn't openexr have a function other than `readrgba` that will give you quantized `uint16_t/halffloat` directly instead of dequantizing into full floats? also your image format you declared as rgba half float above, your buffers are also same size as a half float image, and here you're reading full floats and then memcpying them to buffer. this will be a disaster.",0,0.8739186525344849
358147478,403,devshgraphicsprogramming,2019-12-16T10:10:58Z,"you need to know when file is `imfrgba` (half) and you need `ef_r16g16b16a16_sfloat` [a link] and when we have `rgba` (full float) and you need `ef_r32g32b32a32_sfloat` [a link] i don't know if openexr allows for mixed precision channels (r half, g full) if you find out that it does, then convert to highest one present (if one channel is 32bit, then all 32bit).",0,0.9916604161262512
358157835,403,AnastaZIuk,2019-12-16T10:32:00Z,"but it won't be a reference pointer, but simply pointer. won't it crash?",0,0.9448839426040649
359005538,403,devshgraphicsprogramming,2019-12-17T20:13:59Z,"as long as the icpubuffer lives (the smart pointer doesn't go out of scope), the pointer returned by `getpointer` is valid",0,0.9902437329292297
359012802,403,AnastaZIuk,2019-12-17T20:30:52Z,isn't it good? (outdated comment?),0,0.9749988317489624
359025064,403,devshgraphicsprogramming,2019-12-17T20:58:59Z,calcpitchinblocks doesn't take alignment into account,0,0.9743476510047913
359025495,403,AnastaZIuk,2019-12-17T21:00:03Z,as i can see they call rgba something that uses their `half`s being 16 bit precision floats,0,0.9914730787277222
359025946,403,devshgraphicsprogramming,2019-12-17T21:01:08Z,"see the struct declarations/definitions, there's one for full floats and one for half.",0,0.9902424216270447
359030066,403,AnastaZIuk,2019-12-17T21:11:09Z,"[a link] `ilmhalf` and `half` [a link] right? both seem to be 16 bit precision, but `ilmhalf` is unsigned shrot and `half` is a 16 bit float (maybe i missed something)",0,0.9922992587089539
359032005,403,devshgraphicsprogramming,2019-12-17T21:15:43Z,"they're all stored as uint16_t, its just that the bits have a different meaning than for an actual `uint16_t`",0,0.9893201589584351
359035379,403,AnastaZIuk,2019-12-17T21:23:11Z,"well, because of that they provide this though, it will be good for me [a link]",1,0.7918554544448853
359059478,403,devshgraphicsprogramming,2019-12-17T22:19:55Z,you dont' want to convert an array of ilmhalf is good to do a straight copy to a buffer for an ef_r16g16b16a16_sfloat texture,0,0.913174569606781
359528425,403,AnastaZIuk,2019-12-18T19:29:53Z,"well, i checked it and this is a copy of png loader `calcpitchinblocks` what did i miss?",0,0.9914405345916748
360249485,403,AnastaZIuk,2019-12-20T07:07:03Z,"well, you mean alpha channel right?",0,0.9861965775489807
360263804,403,devshgraphicsprogramming,2019-12-20T08:08:32Z,"pitchinblocks is a fake ""length"", as in while the image can be a 200x200 you can make the length 252. this only affects the buffer unpack to image when making a gl texture from a gl buffer. this means that the following equation to compute the output address is wrong [a link] this is why png loader uses `getpitch` or something like that instead of the image width, beause of the possible padding at the end of each row when storing image data in a buffer.",0,0.9850479364395142
360473760,403,devshgraphicsprogramming,2019-12-20T17:11:56Z,"if you dont support something here that would prevent loading a file, feel free to return false (like multi-part file)",0,0.9561785459518433
360474135,403,devshgraphicsprogramming,2019-12-20T17:13:10Z,there's also xyz formats (although thats in cie xyz colorspace),0,0.9898343086242676
360474934,403,devshgraphicsprogramming,2019-12-20T17:15:17Z,the alpha checks will cause a texture with a present but different alpha format to rgb to register as a non-alpha texture (should fail instead),0,0.9747620224952698
360477420,403,devshgraphicsprogramming,2019-12-20T17:23:02Z,why are you extracting rgba into 4 separate planes?,0,0.9797948598861694
360477540,403,devshgraphicsprogramming,2019-12-20T17:23:23Z,are you sure the strides are in pixels and not bytes?,0,0.992798924446106
360477736,403,devshgraphicsprogramming,2019-12-20T17:24:00Z,this is what i refer to in [a link],0,0.991405725479126
360644402,403,AnastaZIuk,2019-12-21T11:36:04Z,to fix,0,0.9448611736297607
360644412,403,AnastaZIuk,2019-12-21T11:36:31Z,"it was wronged, fixed without aligement",-1,0.5749004483222961
360644441,403,AnastaZIuk,2019-12-21T11:37:06Z,"everything is done well, i've read a few pages of their documentation",0,0.8978412747383118
360644515,403,AnastaZIuk,2019-12-21T11:38:46Z,"because they provide rgba class, but don't provide rgb. actually i find it better approach for data assignment and more clear, because we base on available channels",0,0.9782243371009827
360644527,403,AnastaZIuk,2019-12-21T11:39:16Z,"well, and in that way you can specify slice to make sure ilm reads type and handle it correctly",0,0.9889650344848633
360644578,403,AnastaZIuk,2019-12-21T11:40:05Z,"there are x y z channels, but do we want to support it?",0,0.9868864417076111
360644653,403,AnastaZIuk,2019-12-21T11:41:28Z,"sure, to fix!",0,0.48792120814323425
360650807,403,AnastaZIuk,2019-12-21T14:03:37Z,"so assume i'm handling 250th pixel, what should i fill it with if it's fake actually?",0,0.9716399908065796
360651065,403,AnastaZIuk,2019-12-21T14:10:31Z,i'm filling those fake values with 0,0,0.8966819047927856
360651582,403,devshgraphicsprogramming,2019-12-21T14:23:10Z,"dont fill fake with anything, it wont ever be used. you just need to change your array output addressing code, from `x+y*realwidth` to `x+y*bufferrowlength`",0,0.980933427810669
360651622,403,AnastaZIuk,2019-12-21T14:24:17Z,great,1,0.9416693449020386
361005200,403,devshgraphicsprogramming,2019-12-23T21:23:26Z,we should proabably make a macro out of this or a template utility function.,0,0.9924450516700745
361007414,403,devshgraphicsprogramming,2019-12-23T21:35:11Z,"you need an error out else, people might call it with stupid formats images (or low dynamic range images).",-1,0.8884950876235962
361007544,403,devshgraphicsprogramming,2019-12-23T21:35:50Z,"instead of using unintelligible costants such as 2,4 use `sizeof(uint16_t)`,`sizeof(float)`",0,0.9928620457649231
361007835,403,devshgraphicsprogramming,2019-12-23T21:37:28Z,"nope, bad stride, you need stride all pixels at once (so sizeof whole pixel)",-1,0.8816196918487549
361010706,403,devshgraphicsprogramming,2019-12-23T21:53:10Z,"you need a per component offset here, 0 for red, one unit for green, two units for blue, etc.",0,0.9914891719818115
361010773,403,devshgraphicsprogramming,2019-12-23T21:53:39Z,you could do the bufferrowlength*pixelsize,0,0.9931932091712952
361012028,403,devshgraphicsprogramming,2019-12-23T22:00:50Z,what do you mean by doesn't work? doesn't compile? the macro might not like the pointer type going in (is it a void* ?),0,0.7388222217559814
361012205,403,devshgraphicsprogramming,2019-12-23T22:01:51Z,"you're only writing 720 pixels of a 1280x720 image here, just saying.",0,0.9379293918609619
361012392,403,devshgraphicsprogramming,2019-12-23T22:02:56Z,"same bugs as before. i'd actually make a width x height ""framebuffer"" (just an array) and copy regions to it manually as necessary.",0,0.9603483080863953
361012620,403,devshgraphicsprogramming,2019-12-23T22:04:15Z,"this will be potentially different for every region, this is why you need to reserve the correct image sized buffer and copy pixels manually (construct the image from regions)",0,0.9896999597549438
361012824,403,devshgraphicsprogramming,2019-12-23T22:05:29Z,"wrong, you need to iterate through regions, and then `x,y` need to go from `offset` to `offset+extent` then obviously use all the other region struct parameters to get the pixels out of the buffer.",0,0.7923856973648071
361013214,403,devshgraphicsprogramming,2019-12-23T22:07:45Z,thx for this,0,0.9720479846000671
361013615,403,devshgraphicsprogramming,2019-12-23T22:10:12Z,why ?,0,0.8471168279647827
361045009,403,Crisspl,2019-12-24T02:12:31Z,ctor is inaccessible for make_smart...() func,0,0.9570323824882507
361109229,403,AnastaZIuk,2019-12-24T09:00:48Z,"because i insert a layout for one channel. it's the openexr library job to perform appropriate calculations and save it properly. just save a file, you will see it is correct",0,0.9826481938362122
361109632,403,AnastaZIuk,2019-12-24T09:02:27Z,and it's outdated,0,0.7212690114974976
361109647,403,AnastaZIuk,2019-12-24T09:02:31Z,outdated,0,0.9308403730392456
361109766,403,AnastaZIuk,2019-12-24T09:02:59Z,"it doesn't compile, and type is known by the template",0,0.9895309209823608
361110426,403,AnastaZIuk,2019-12-24T09:05:33Z,"it's good, the parameter of this specifies how many scan lines it should write if i were to put there 1, it would save 1280 x 1 image because above i describe the end layout, it saves it correctly",1,0.7493212819099426
361111091,403,AnastaZIuk,2019-12-24T09:08:18Z,it's done well that's what it is pixelsarrayilm keeps colors matched to single channel [a link],0,0.9547749757766724
361111290,403,AnastaZIuk,2019-12-24T09:09:08Z,there is only one region :d,1,0.9368945360183716
361113097,403,AnastaZIuk,2019-12-24T09:16:10Z,"and it actually saves a file properly, i've tested it",0,0.9535492062568665
361113812,403,AnastaZIuk,2019-12-24T09:19:25Z,"important is that i have to insert each channel separately because rgba class forces you to use half format that's why i pass to it such an array , to overpass it and insert channels that may have different types (half, full float and uint32_t) so it's correct",0,0.9859644174575806
361114420,403,AnastaZIuk,2019-12-24T09:21:52Z,and it isn't void*,0,0.9719764590263367
361114732,403,AnastaZIuk,2019-12-24T09:23:11Z,"well, so where should it be put in files?",0,0.9938846230506897
361128650,403,devshgraphicsprogramming,2019-12-24T10:20:44Z,errors from compiler?,0,0.9875442981719971
361128696,403,devshgraphicsprogramming,2019-12-24T10:20:59Z,ah ok. cool,1,0.9921066761016846
361130910,403,devshgraphicsprogramming,2019-12-24T10:30:18Z,"no goddamn it, i can give you an image with 50 regions in the spec and you need to be able to save it!",-1,0.6316316723823547
361130950,403,AnastaZIuk,2019-12-24T10:30:29Z,![a link],0,0.9432068467140198
361131039,403,devshgraphicsprogramming,2019-12-24T10:30:50Z,"ah ok, then use `create`",0,0.9494927525520325
361131367,403,devshgraphicsprogramming,2019-12-24T10:32:14Z,"yeah because the region encompasses the whole image, and you haven't been handed a difficult case yet.",0,0.8720837235450745
361132103,403,devshgraphicsprogramming,2019-12-24T10:35:07Z,"if you set up the offset (pointer), stride (penultimate parameter) and row length (last parameter) properly, you'll be able to basically `memcpy` entire rows.",0,0.98710697889328
361132745,403,devshgraphicsprogramming,2019-12-24T10:37:21Z,probably a template static function in `iasset`,0,0.9931424856185913
361133064,403,devshgraphicsprogramming,2019-12-24T10:38:37Z,call it `castdown`,0,0.991998016834259
361134723,403,devshgraphicsprogramming,2019-12-24T10:44:49Z,try making the pointer into a constant pointer and let me know (compiler might get confused).,0,0.9786675572395325
361137830,403,devshgraphicsprogramming,2019-12-24T10:59:39Z,"ok i might have fucked this one up in the following lines [a link] i use `std::remove_pointer` but i should also then wrap it in `std::remove_reference` first. the compiler is moaning about the fact that the type being passed into the templates is a reference to a type (after you put a pointer type into a `std::remove_pointer` you get a reference type, not the straight vanilla type). so feel free to correct my macros ;)",-1,0.9895443320274353
361164843,403,AnastaZIuk,2019-12-24T13:29:38Z,"macros fixed, but it still doesn't work, but it works with & and works if you create `ilmtype* poitner` and try to delete it",0,0.9814432263374329
361164945,403,AnastaZIuk,2019-12-24T13:30:06Z,to fix,0,0.9448611736297607
361166608,403,AnastaZIuk,2019-12-24T13:40:42Z,so actualy i only have to copy to pixelsarrayilm pixels correctly having regions taken into account,0,0.9572651982307434
361184212,403,AnastaZIuk,2019-12-24T15:12:47Z,for each loop works as well,0,0.9593563675880432
361531412,403,AnastaZIuk,2019-12-26T20:54:19Z,"curious is that if you perform for each loop when an element is a reference pointer while deallocating memory, it spreads out the same errors",0,0.6598222255706787
361677327,403,devshgraphicsprogramming,2019-12-27T14:38:17Z,"nope, you can get ths from image creation parameters",0,0.9914664030075073
361678247,403,devshgraphicsprogramming,2019-12-27T14:42:27Z,region also specifies a byte offset into the beginning of the buffer.,0,0.9920192360877991
361679551,403,AnastaZIuk,2019-12-27T14:49:05Z,but won't it affect then with another mipmap levels? unless image creation parameters hold extent for the buffer assuming 0 mipmap level as base level for each region,0,0.9923301339149475
361680021,403,AnastaZIuk,2019-12-27T14:51:36Z,"i know, but isn't it good? if not, how should i combine a byte offset into the beginning of the buffer with `ptrstyleendshifttoimagedatapixel`?",0,0.9841330051422119
361680983,403,AnastaZIuk,2019-12-27T14:56:47Z,do i need it if i specify a begginging of each pixel using `ptrstyleendshifttoimagedatapixel`?,0,0.9945034980773926
361836808,403,devshgraphicsprogramming,2019-12-29T09:13:41Z,image creation parameters must create an image big enough so all regions in the list are valid (i.e. can fit inside),0,0.992100179195404
361931247,403,devshgraphicsprogramming,2019-12-30T09:01:30Z,so its done or not?,0,0.9905632734298706
361931852,403,AnastaZIuk,2019-12-30T09:04:31Z,"it's done, above shows you the behaviour",0,0.9607473611831665
361935746,403,devshgraphicsprogramming,2019-12-30T09:21:55Z,wait what!?,-1,0.8989157676696777
361935782,403,devshgraphicsprogramming,2019-12-30T09:22:03Z,the f***?,-1,0.9693313241004944
361967942,403,devshgraphicsprogramming,2019-12-30T11:52:25Z,could still keep it const if you made a new constructor for icpushader,0,0.9940650463104248
361968199,403,devshgraphicsprogramming,2019-12-30T11:53:43Z,can you do this for all loaders (and obviously pick good defaults),0,0.9845057129859924
361968251,403,AnastaZIuk,2019-12-30T11:54:01Z,sure!,0,0.8522761464118958
361968344,403,AnastaZIuk,2019-12-30T11:54:32Z,"after pr merging of course, before i handle gli",0,0.9546359777450562
361968564,403,devshgraphicsprogramming,2019-12-30T11:55:45Z,why is this not factored out to a common static function for some base class like `iimageloader` and `iimagewriter`,0,0.9927690029144287
361968821,403,AnastaZIuk,2019-12-30T11:57:04Z,should i put it into `iimageloader`? i can handle it as well after merging,0,0.9889040589332581
361968837,403,devshgraphicsprogramming,2019-12-30T11:57:09Z,"do a pure virtual destructor, do the constructor as a default",0,0.9511570930480957
361968939,403,devshgraphicsprogramming,2019-12-30T11:57:42Z,no need for a cpp file for this,0,0.9859171509742737
361969023,403,AnastaZIuk,2019-12-30T11:58:11Z,it'll be deleted,0,0.9900280833244324
361969446,403,devshgraphicsprogramming,2019-12-30T12:00:35Z,its an asset writer! make a `iimagewriter` that inherits from `iassetwriter` please return `iassetwriter` to virtual inheritance from `ireferencecounted`,0,0.9711652398109436
361969574,403,devshgraphicsprogramming,2019-12-30T12:01:22Z,it was correct before.,0,0.9819697141647339
361972870,403,devshgraphicsprogramming,2019-12-30T12:19:58Z,"wrong, general equation is `((z*height+y)*width+x)*pixelorblocksize+byteoffset` height and width are not the image extent visual/gometrucal parameters, but buffer jumps: see [a link]",0,0.9801921844482422
361973104,403,devshgraphicsprogramming,2019-12-30T12:21:03Z,similar here w.r.t [a link],0,0.9925385117530823
361992380,403,AnastaZIuk,2019-12-30T13:58:20Z,"pure virtual destructor, why?",0,0.694887638092041
361993747,403,devshgraphicsprogramming,2019-12-30T14:04:08Z,"pure virtual destructor is for a class that we never ever intend to instantiate (abstract data type) and that is a pure interface (no members, etc.)",0,0.9804903864860535
362003913,403,devshgraphicsprogramming,2019-12-30T14:45:49Z,cie no cei,0,0.8569186329841614
362004038,403,devshgraphicsprogramming,2019-12-30T14:46:18Z,"we can support single r channel, rg channel combo and rgb channel combo",0,0.9919252991676331
362004127,403,devshgraphicsprogramming,2019-12-30T14:46:41Z,"but obvs no gb, g, b, rb etc.",0,0.9732552766799927
362013422,403,AnastaZIuk,2019-12-30T15:19:30Z,where did you get the general equation from? could you give me a reference?,0,0.9918911457061768
362014661,403,AnastaZIuk,2019-12-30T15:24:28Z,"if no channel, what value should i fill it with?",0,0.9868037104606628
362025523,403,AnastaZIuk,2019-12-30T16:03:53Z,"but i need to provide a definition of the destructor, where should i put it?",0,0.9896612167358398
362026880,403,AnastaZIuk,2019-12-30T16:08:33Z,now it doesn't work,0,0.6368099451065063
362037810,403,Crisspl,2019-12-30T16:49:14Z,"first of all: image texel format size varies, so you cannot iterate over `reinterpret_cast (data)`. iterate bytewise instead. now your `ptrstyleendshifttoimagedatapixel` includes `bufferoffset` and then used to increment ptr of type `ilmtype*`. so ptr is getting moved by `sizeof(ilmtype)*bufferoffset` bytes. idk why actually you are iterating over ilmtype array since (as i said) channel size varies (half=2bytes or float=4bytes) and ilmtype has constant size (cpp is statically typed), but anyway: to get ptr to texel you need to use equation matt gave you. if exr is always 2d image (i dont know), you can simplify it to `(y*width+x)*pixelorblocksize+byteoffset`. it's theoretically the same what you have now, but yours is weird because this iterating over `ilmtype*` thing. so in practice: [code block]",0,0.9853421449661255
362040542,403,Crisspl,2019-12-30T17:00:33Z,"ah, ilmtype is template param, ok. anyway everything above applies",0,0.650558590888977
362046710,403,AnastaZIuk,2019-12-30T17:25:33Z,thank you ! i have reorganized the code and now it works i should have perform calculations without using bytewise shifts,1,0.9909818768501282
362048233,403,AnastaZIuk,2019-12-30T17:31:34Z,i need to create for it cpp file however,0,0.973537802696228
362068327,403,Crisspl,2019-12-30T18:59:01Z,better call `gettexelorblockbytesize` once and save to some var. this call is quite big switch so maybe better no to call it in a loop,0,0.9199972748756409
362082120,403,AnastaZIuk,2019-12-30T19:58:41Z,"you're right, i saved it",0,0.5389748811721802
362084628,403,devshgraphicsprogramming,2019-12-30T20:10:19Z,"there are r16 and r32 formats as well as rg16 and rg32, rgb is special cause it would be not power of two (npot) so it doesnt exists and you use rgba instead",0,0.9910065531730652
362084834,403,devshgraphicsprogramming,2019-12-30T20:11:12Z,"no cpp file needed, you can inline the constructor",0,0.9895051121711731
362084844,403,devshgraphicsprogramming,2019-12-30T20:11:17Z,"no cpp file needed, you can inline the constructor",0,0.9895051121711731
362084858,403,devshgraphicsprogramming,2019-12-30T20:11:21Z,"no cpp file needed, you can inline the constructor",0,0.9895051121711731
362085759,403,devshgraphicsprogramming,2019-12-30T20:15:28Z,"`virtual ~iimageloader() =0;` thats a pure virtual destructor, makes the class abstract, the destructor never gets instantiated, so you never need the definition",0,0.9878873825073242
362085891,403,devshgraphicsprogramming,2019-12-30T20:16:04Z,`ireferencecounted` has one,0,0.9892488718032837
362090551,403,AnastaZIuk,2019-12-30T20:37:49Z,it is a destructor as rest,0,0.9887203574180603
362090957,403,devshgraphicsprogramming,2019-12-30T20:40:00Z,"just put `{}` witout the `;` after the function declaration in the header (in other words, make the definition inline) you wont need a source file",0,0.9931833148002625
362091107,403,AnastaZIuk,2019-12-30T20:40:47Z,"i know i know, actually it's default",0,0.8982008695602417
460457102,521,devshgraphicsprogramming,2020-07-25T23:32:17Z,"use `if constexpr` instead of a lambda, also clamp the pixels on output not input.",0,0.9925803542137146
460457185,521,devshgraphicsprogramming,2020-07-25T23:33:41Z,"is there a ""plane count query"" for `e_format` yet?",0,0.9953124523162842
460457353,521,devshgraphicsprogramming,2020-07-25T23:35:41Z,"you just want a `double pixelvals[4];` instead of the buffer. `decodepixels` takes an intrablock x,y coordinate to decode one pixel at a time.",0,0.9925635457038879
460457525,521,devshgraphicsprogramming,2020-07-25T23:38:04Z,"instead of having that weird lambda at the start, you want to break down the `convertcolor<>` functions into their implementation constituent `decodepixels` and `encodepixels` that use a `uint64_t[4]` (sometimes casted to a `double[4]`) buffer for temporary storage. then sometimes (when you have the template parameter) depending on a `if constexpr` you want to shove in a `clamp` between the decode and encode.",0,0.9882814288139343
460457714,521,devshgraphicsprogramming,2020-07-25T23:40:46Z,because you have the silly lambda you feel the need to allocate temporary storage for the block,-1,0.8562189340591431
460457844,521,devshgraphicsprogramming,2020-07-25T23:42:39Z,"you're making an ungodly mess of it by decoding from input_format ~~using the runtime function when we have compile time specializations which are used in `convertcolor`~~ (actually you havent provided compile-time clamping at all for the compile-time format conversion from the general specialization of this class on lines 144-160), clamping, then converting to output_format and saving to a buffer, then reinterpreting the saved data as input_format and having `convertcolor` do the conversion to output_format` again",-1,0.8821812868118286
460457949,521,devshgraphicsprogramming,2020-07-25T23:44:19Z,all my comments basically boil down to: - see how `convertcolor<>` works - decompose it into a separate decode+encode - put a clamp between the decode and the encode depending on the constexpr bool template parameter,0,0.9920085668563843
460458159,521,devshgraphicsprogramming,2020-07-25T23:47:20Z,"clamp to output's format minimum value in the range, and maximum value in the range not 0 and 1 p.s. also not all formats encode from `double`, so there's that to account for... see impl of `convertcolor`",0,0.9937376976013184
460458230,521,devshgraphicsprogramming,2020-07-25T23:48:25Z,"i'd do a loop from i=0 to output format channel count, if the output format is not `ef_undefined` (not runtime specified) from i=0 to 0 otherwise",0,0.9902852177619934
460458538,521,devshgraphicsprogramming,2020-07-25T23:52:47Z,"you've only implemented the clamping for runtime (or at least 1-format-runtime, because we dont bother specializing for half-compile-time cases) format conversion. i need an implementation for the both-formats-specified-compile-time case, which is the general class above, where `swizzle` lambda is defined between line 144 and 160",0,0.9933441877365112
460458742,521,devshgraphicsprogramming,2020-07-25T23:55:24Z,"for this class a `for (auto i=0; i > i want the for from 0 to output format's channel count (given by the template function, not runtime function)",0,0.9778990745544434
461842785,521,AnastaZIuk,2020-07-28T20:02:06Z,adjusted in following commit,0,0.990561306476593
461847553,521,AnastaZIuk,2020-07-28T20:11:14Z,there is not as i look around,0,0.9169723391532898
461851582,521,AnastaZIuk,2020-07-28T20:16:02Z,adjusted in following commit,0,0.990561306476593
461851734,521,AnastaZIuk,2020-07-28T20:16:12Z,adjusted in following commit,0,0.990561306476593
461869162,521,AnastaZIuk,2020-07-28T20:48:10Z,"adjusted for runtime in following commit, compile time left",0,0.9939284324645996
461896572,521,AnastaZIuk,2020-07-28T21:40:56Z,"i was testing something, but ure right, adjusted in following commit (runtime)",0,0.9639365673065186
461920803,521,AnastaZIuk,2020-07-28T22:12:00Z,it isn't valid anymore,0,0.9224559664726257
462395210,521,AnastaZIuk,2020-07-29T15:37:44Z,solved,0,0.9605372548103333
462547387,521,devshgraphicsprogramming,2020-07-29T19:50:03Z,"drop the alpha, use r8g8b8_srgb",0,0.9930629134178162
463795548,521,devshgraphicsprogramming,2020-07-31T19:36:15Z,make one ;),1,0.9685118198394775
463796753,521,devshgraphicsprogramming,2020-07-31T19:38:38Z,is there a compile time version ? like `asset:getformatchannelcount (void)` ?,0,0.9946116209030151
467513289,521,AnastaZIuk,2020-08-08T23:09:17Z,"as i think of it, shouldn't i move a pointer to be a `dstpix+= blocksize` each iteration in block loop?",0,0.9911085367202759
467514542,521,AnastaZIuk,2020-08-08T23:28:38Z,"okay, we do not support encoding to bc, it clears a little",0,0.7217236161231995
470703076,521,devshgraphicsprogramming,2020-08-14T15:39:38Z,should still advance the pointer though xd ;),1,0.9923561811447144
470932118,521,AnastaZIuk,2020-08-15T03:34:54Z,"yup, as well as i do it on sat now",0,0.6378354430198669
472069227,521,devshgraphicsprogramming,2020-08-18T10:12:35Z,?,0,0.9557723999023438
472091021,521,AnastaZIuk,2020-08-18T10:55:37Z,"oh sorry, no there isn't",-1,0.9925695061683655
472093792,521,devshgraphicsprogramming,2020-08-18T11:01:03Z,make one.,0,0.9777089357376099
472103293,521,AnastaZIuk,2020-08-18T11:20:57Z,roger that!,-1,0.919075608253479
472112717,521,AnastaZIuk,2020-08-18T11:39:20Z,corrected in following commit,0,0.9914671182632446
472112781,521,AnastaZIuk,2020-08-18T11:39:27Z,corrected in following commit,0,0.9914671182632446
472132260,521,AnastaZIuk,2020-08-18T12:15:47Z,added and in use!,1,0.6724098324775696
475792929,521,AnastaZIuk,2020-08-24T17:53:46Z,we should make a decision about it,0,0.9888128638267517
475793292,521,AnastaZIuk,2020-08-24T17:54:26Z,it relates to the above [a link] i will code further if we decide,0,0.9835501909255981
475799486,521,AnastaZIuk,2020-08-24T18:05:34Z,not sure if we use dds dithering images or whatever in future,0,0.9562751054763794
475800719,521,devshgraphicsprogramming,2020-08-24T18:07:57Z,"put a `return crtp::get` here, this way its clear we expect the derived class to implement (also make function a static)",0,0.9936599135398865
475801128,521,devshgraphicsprogramming,2020-08-24T18:08:43Z,"dont hold this here, remember `cdither` is a base class for many things like: - cwhitenoisedither - cbayermatrixdither - cprecomputeddither",0,0.9919978976249695
475801475,521,devshgraphicsprogramming,2020-08-24T18:09:20Z,"dont worry about this in the base class, only provide maximum extent that the dither must support.",0,0.9760111570358276
475801607,521,devshgraphicsprogramming,2020-08-24T18:09:36Z,you need a pointer to `istate` as another parameter,0,0.9926764965057373
476523336,521,AnastaZIuk,2020-08-25T15:07:42Z,an issue!,-1,0.8215863108634949
476524016,521,AnastaZIuk,2020-08-25T15:08:40Z,an issue! [a link],0,0.49408453702926636
476560037,521,devshgraphicsprogramming,2020-08-25T15:59:31Z,make the dither type a template parameter and keep a `dither*` pointer to the object in the state... then obvisously you create the dither before you call the filter ;),0,0.8907944560050964
476560477,521,devshgraphicsprogramming,2020-08-25T16:00:07Z,"add an `int32_t channel` parameter,",0,0.9929176568984985
476560918,521,devshgraphicsprogramming,2020-08-25T16:00:42Z,[code block] don't need it right now,0,0.9857548475265503
476561143,521,devshgraphicsprogramming,2020-08-25T16:00:59Z,white noise is hash dither.,0,0.7322261333465576
476561358,521,devshgraphicsprogramming,2020-08-25T16:01:14Z,only precomputed keeps image data,0,0.986045777797699
476561468,521,devshgraphicsprogramming,2020-08-25T16:01:24Z,can be public,0,0.950286328792572
476561641,521,devshgraphicsprogramming,2020-08-25T16:01:38Z,no need for this here.,0,0.9725009202957153
476561729,521,devshgraphicsprogramming,2020-08-25T16:01:45Z,goes to precomputed,0,0.9916372895240784
476562028,521,devshgraphicsprogramming,2020-08-25T16:02:15Z,add a `int32_t channel parameter`,0,0.993822455406189
476583141,521,AnastaZIuk,2020-08-25T16:33:53Z,corrected in following commit,0,0.9914671182632446
476583313,521,AnastaZIuk,2020-08-25T16:34:07Z,corrected in following commit,0,0.9914671182632446
476584783,521,AnastaZIuk,2020-08-25T16:36:33Z,corrected in following commit,0,0.9914671182632446
476585203,521,AnastaZIuk,2020-08-25T16:37:14Z,solved,0,0.9605372548103333
476586147,521,AnastaZIuk,2020-08-25T16:38:47Z,"okay, `istate` will only hold `texelrange` now (we fill add more in future if needed) `imagedata` will be moved to precomputed dither class and will contain only strides and the buffer",0,0.9883350133895874
476674385,521,AnastaZIuk,2020-08-25T19:05:57Z,corrected,0,0.9229590892791748
476674460,521,AnastaZIuk,2020-08-25T19:06:07Z,corrected,0,0.9229590892791748
476674791,521,AnastaZIuk,2020-08-25T19:06:45Z,"i did it wrong (compile time error), need to read probably more about crtp",0,0.8699432611465454
476675006,521,AnastaZIuk,2020-08-25T19:07:09Z,corrected,0,0.9229590892791748
476675105,521,AnastaZIuk,2020-08-25T19:07:21Z,corrected,0,0.9229590892791748
476680413,521,AnastaZIuk,2020-08-25T19:17:14Z,corrected,0,0.9229590892791748
476804544,521,devshgraphicsprogramming,2020-08-25T22:33:59Z,why should it have a member with texel range?,0,0.9838854074478149
476805053,521,devshgraphicsprogramming,2020-08-25T22:34:38Z,you can't just do `crtp::function` if `function` is not static if its not static you need to do `static_cast (this)->function`,0,0.9908073544502258
477245487,521,AnastaZIuk,2020-08-26T12:00:39Z,"because we wanted to have max extent the dither support, so likely texel range i think, i can limit it to only extent",0,0.9860736131668091
477302677,521,AnastaZIuk,2020-08-26T13:32:25Z,done,0,0.8974218964576721
477434924,521,AnastaZIuk,2020-08-26T16:34:29Z,not an issue now,0,0.8655165433883667
477513156,521,devshgraphicsprogramming,2020-08-26T18:47:51Z,assume always true ;),1,0.9687913060188293
477514015,521,devshgraphicsprogramming,2020-08-26T18:49:26Z,load dither from exr... you'll get better dither,0,0.9655360579490662
477514263,521,devshgraphicsprogramming,2020-08-26T18:49:56Z,`static_cast`,0,0.9861262440681458
477514535,521,devshgraphicsprogramming,2020-08-26T18:50:28Z,you don't need to keep it around after you construct the state.,0,0.9862369298934937
477533341,521,AnastaZIuk,2020-08-26T19:18:43Z,"look at how stare gets constructed, i think its okay",0,0.8391168713569641
477533465,521,AnastaZIuk,2020-08-26T19:18:58Z,state,0,0.9525800943374634
477586280,521,devshgraphicsprogramming,2020-08-26T21:00:37Z,"you dont want to keep the image around (regions, etc.) just its contents.",0,0.9399369955062866
478352316,521,AnastaZIuk,2020-08-27T11:40:32Z,corrected in following commit,0,0.9914671182632446
478353394,521,AnastaZIuk,2020-08-27T11:42:28Z,corrected in following commit,0,0.9914671182632446
478354461,521,AnastaZIuk,2020-08-27T11:44:29Z,corrected in following commit,0,0.9914671182632446
478475508,521,AnastaZIuk,2020-08-27T14:46:34Z,not an issue anymore - discussed on discord,0,0.9887554049491882
478513400,521,devshgraphicsprogramming,2020-08-27T15:37:56Z,"the swizzle type should be a template, because there are compile time swizzles and runtime polymorphic swizzles (see our other apis)",0,0.9922798871994019
478514113,521,devshgraphicsprogramming,2020-08-27T15:38:54Z,also you need an input swizzle and an output swizzle,0,0.9879699945449829
478514681,521,devshgraphicsprogramming,2020-08-27T15:39:48Z,"we don't need to memcpy, i think `decodepixels` has a variant that takes a swizzle.",0,0.985602855682373
478515375,521,devshgraphicsprogramming,2020-08-27T15:40:47Z,see how swizzle gets implemented?,0,0.9856218695640564
478515674,521,devshgraphicsprogramming,2020-08-27T15:41:13Z,what is texel range?,0,0.989161491394043
478516044,521,AnastaZIuk,2020-08-27T15:41:47Z,"i don't get, we do i need in swizzle and out swizzle if filter producent only one out image how shoould i process in?",0,0.8406086564064026
478516525,521,devshgraphicsprogramming,2020-08-27T15:42:30Z,you can't just take over a buffer of an image (even if you could you should have constructed a smartrefctd ptr) because the buffer might not be there or cover too small of an area. you need the copyimagetobuffer filter iirc.,0,0.9822037220001221
478516570,521,AnastaZIuk,2020-08-27T15:42:36Z,?,0,0.9557723999023438
478516820,521,devshgraphicsprogramming,2020-08-27T15:42:56Z,or create a proxy image with its own buffer and flatten the input image into that.,0,0.9914711117744446
478517015,521,devshgraphicsprogramming,2020-08-27T15:43:17Z,"nope, the values should have already been decoded.",0,0.9854545593261719
478517042,521,AnastaZIuk,2020-08-27T15:43:19Z,what?,0,0.9032567739486694
478517244,521,AnastaZIuk,2020-08-27T15:43:39Z,do we have such?,0,0.989676296710968
478518595,521,devshgraphicsprogramming,2020-08-27T15:45:38Z,"blit takes an input image and puts it in the output image, while applying convolution kernels (or other kernels) if you can swizzle, then you should be able to swizzle before and after (after decode and before encode) the kernel.",0,0.9916336536407471
478518795,521,devshgraphicsprogramming,2020-08-27T15:45:51Z,"this is the ""correct"" way to implement swizzle",0,0.988349437713623
478519200,521,AnastaZIuk,2020-08-27T15:46:29Z,?,0,0.9557723999023438
478519976,521,devshgraphicsprogramming,2020-08-27T15:47:36Z,[a link] should be a flatten & convert or you should just only accept images in the rgba unorm16 or unorm32 formats,0,0.9918507933616638
478520528,521,AnastaZIuk,2020-08-27T15:48:28Z,i will change it to extent maybe?,0,0.9905685782432556
478521519,521,AnastaZIuk,2020-08-27T15:49:59Z,you would not to force me to split what's inside decodepixels otherwise in convert swizzle filter then,0,0.9786037802696228
478522131,521,devshgraphicsprogramming,2020-08-27T15:50:54Z,there should be some sort of conditional (`enable_if`) declaration of these member variables basically if i'd set `dither=void` it means no dither decided at compile time.,0,0.9944736361503601
478522710,521,AnastaZIuk,2020-08-27T15:51:49Z,but i will check it,0,0.9671455025672913
478522803,521,devshgraphicsprogramming,2020-08-27T15:51:57Z,default dither `void` a.k.a. no dither.,0,0.9910278916358948
478523331,521,devshgraphicsprogramming,2020-08-27T15:52:46Z,see how there's a separate state member for `polymorphicswizzle` and there isn't when the swizzle is not polymorphic,0,0.9937989115715027
478524926,521,AnastaZIuk,2020-08-27T15:55:08Z,okay,0,0.7269688844680786
478587540,521,devshgraphicsprogramming,2020-08-27T17:39:36Z,oh ok so its a measure of dimension?,0,0.9454639554023743
478614957,521,AnastaZIuk,2020-08-27T18:29:25Z,it's extent + offset field,0,0.9906655550003052
478663212,521,devshgraphicsprogramming,2020-08-27T20:01:20Z,ah kwl,0,0.9337952733039856
478663478,521,devshgraphicsprogramming,2020-08-27T20:01:50Z,you only need extent to be honest... and also not sure what its doing in the cdither class,-1,0.5432964563369751
479228106,521,AnastaZIuk,2020-08-28T12:25:20Z,"`decodepixels` doesn't have such variant - `convertcolor` does, but we don't want it",0,0.9110249876976013
479270445,521,AnastaZIuk,2020-08-28T13:07:58Z,not an issue anymore,0,0.8609544634819031
479271127,521,AnastaZIuk,2020-08-28T13:08:45Z,done,0,0.8974218964576721
479641044,521,devshgraphicsprogramming,2020-08-29T11:40:04Z,"this should already be included in `irr/asset/asset.h""",0,0.9931245446205139
479653768,521,AnastaZIuk,2020-08-29T14:14:19Z,corrected,0,0.9229590892791748
479661992,521,devshgraphicsprogramming,2020-08-29T15:46:59Z,"nope, you dont want a random number generator to implement this... you want a hash function and feed it the `pixelcoord` and `channel` as input to permute into a single 32 bit value (that you then divide by ~0u to get a float in the correct range)",0,0.969475507736206
479790151,521,AnastaZIuk,2020-08-30T16:38:43Z,solved,0,0.9605372548103333
479797065,521,AnastaZIuk,2020-08-30T17:47:57Z,there is a identitydither class now according to dc conversation and it works fine (at compile time),0,0.9710010290145874
479797121,521,AnastaZIuk,2020-08-30T17:48:47Z,"done, but not sure if i should still force rgba unorm16 or unorm32 formats",0,0.8302432894706726
480315855,521,devshgraphicsprogramming,2020-08-31T18:39:16Z,compile time template parameter would be better,0,0.9883654117584229
480316630,521,AnastaZIuk,2020-08-31T18:40:39Z,everything is now templated,0,0.9823938608169556
480320081,521,AnastaZIuk,2020-08-31T18:47:01Z,oh u mean `normalize`,0,0.9476673007011414
480322483,521,AnastaZIuk,2020-08-31T18:51:37Z,so what kind of classes should i pass to `normalize`? or should it be only a bool in template param?,0,0.9944915771484375
480322756,521,AnastaZIuk,2020-08-31T18:52:10Z,and it would do the same sat's stuff,0,0.9856888055801392
480374741,521,devshgraphicsprogramming,2020-08-31T20:16:22Z,if the definition of `get` is `float` then your decode format is 32-bit float not 64bit ;),1,0.8024616241455078
480375374,521,devshgraphicsprogramming,2020-08-31T20:17:36Z,maybe take an `icpuimageview` then one has a choice (indirectly) of the mip-map and layer that could be used for the dither.,0,0.992480993270874
480376451,521,devshgraphicsprogramming,2020-08-31T20:19:46Z,"your wang hash is done in 32bit uint, your return type is `float`... there's no need for using `double`s",0,0.9852944612503052
480377534,521,devshgraphicsprogramming,2020-08-31T20:21:53Z,"dont use byte offsets, just compute a pixel index value `(((channel*extent.depth+z)*extent.height+y)*extent.width+x`",0,0.9891291856765747
480417325,521,devshgraphicsprogramming,2020-08-31T21:46:33Z,"sat, convertswizzle and blit do we have any more questions after discord chat?",0,0.9352527260780334
480473766,521,AnastaZIuk,2020-08-31T23:36:04Z,"no, there are not",0,0.9310261607170105
480879926,521,AnastaZIuk,2020-09-01T06:40:03Z,"okay, so i will devide by float and stop using those casts",0,0.9401153326034546
480881141,521,AnastaZIuk,2020-09-01T06:41:38Z,okay,0,0.7269688844680786
480881852,521,AnastaZIuk,2020-09-01T06:42:34Z,oh okay,0,0.5748661756515503
480926539,521,AnastaZIuk,2020-09-01T07:38:59Z,what about it [a link],0,0.9845241904258728
481283729,521,AnastaZIuk,2020-09-01T16:38:42Z,corrected in following commit,0,0.9914671182632446
481288074,521,AnastaZIuk,2020-09-01T16:45:55Z,corrected in following commit,0,0.9914671182632446
481452018,521,AnastaZIuk,2020-09-01T21:50:19Z,corrected,0,0.9229590892791748
481982485,521,devshgraphicsprogramming,2020-09-02T10:59:07Z,"you want a `struct` and then an ""anonymous union"" of the member variables",0,0.9922019243240356
481982869,521,devshgraphicsprogramming,2020-09-02T10:59:55Z,`static_assert` and `assert` that the format is not a pure-integer format,0,0.9877784848213196
481983153,521,devshgraphicsprogramming,2020-09-02T11:00:27Z,dont declare the members in this specialization,0,0.9823681712150574
481983605,521,devshgraphicsprogramming,2020-09-02T11:01:27Z,only assert `#ifdef _irr_debug`,0,0.9938754439353943
481983763,521,devshgraphicsprogramming,2020-09-02T11:01:46Z,also a non-static assert does not take a message argument afaik,0,0.9849556088447571
481984399,521,devshgraphicsprogramming,2020-09-02T11:03:06Z,you want to use `floats` instead of `double`s basically.,0,0.9900233149528503
482070327,521,AnastaZIuk,2020-09-02T13:31:15Z,"not an issue, discussed on the dc",0,0.988421618938446
482070452,521,AnastaZIuk,2020-09-02T13:31:26Z,"not an issue, discussed on the dc",0,0.988421618938446
482086082,521,AnastaZIuk,2020-09-02T13:52:43Z,corrected in following commit,0,0.9914671182632446
482088202,521,AnastaZIuk,2020-09-02T13:55:26Z,corrected in following commit,0,0.9914671182632446
482096366,521,AnastaZIuk,2020-09-02T14:06:20Z,corrected in following commit,0,0.9914671182632446
362612298,411,devshgraphicsprogramming,2020-01-02T20:09:13Z,"i wouldnt call ktx, dds and kmg ""compressed"" (even though they support dumping of bcn data) by compressed we mean something that requires extra cpu effort to get it in a format ready for gpu to use (like lzma or zlib decompression)",0,0.9895859360694885
362613322,411,devshgraphicsprogramming,2020-01-02T20:12:46Z,dont call it `sourcecode` it would make someone thing you're processing jit script or a shader.,0,0.9745666980743408
362614448,411,AnastaZIuk,2020-01-02T20:16:22Z,"right, it's old and i removed it",0,0.9571056365966797
362614992,411,AnastaZIuk,2020-01-02T20:18:19Z,sure,0,0.9137381911277771
366359365,411,devshgraphicsprogramming,2020-01-14T14:12:38Z,now the derivations with `vectorsimdf` as the type won't work,0,0.9917294383049011
366364016,411,devshgraphicsprogramming,2020-01-14T14:20:53Z,"this is the wrong way around, nan has all bits set, inf has 0s in the whole mantissa.",-1,0.5807933211326599
366364913,411,devshgraphicsprogramming,2020-01-14T14:22:21Z,this is not how it works at all !,-1,0.9408473372459412
366369447,411,devshgraphicsprogramming,2020-01-14T14:30:25Z,there's a whole host of bit patterns that corresponds to nan,0,0.8265106081962585
366373116,411,devshgraphicsprogramming,2020-01-14T14:36:46Z,"you can call glgeneratemipmaps here temporarily, for now.",0,0.9923646450042725
366402810,411,devshgraphicsprogramming,2020-01-14T15:26:44Z,"why the sudden change here? when we draw a meshbuffer we shall draw from non-indirect sources, when we want to draw indirect then we'll never use the meshbuffer concept.",0,0.9126280546188354
366406874,411,devshgraphicsprogramming,2020-01-14T15:33:53Z,formats which don't fit in power-of-two for a texel/block will never be allowed to be texture formats (only vertex formats),0,0.9867608547210693
366407338,411,devshgraphicsprogramming,2020-01-14T15:34:36Z,p.s. except for 24bit rgb basic formats.,0,0.9859043955802917
366407555,411,devshgraphicsprogramming,2020-01-14T15:34:59Z,formats which don't fit in power-of-two for a texel/block will never be allowed to be texture formats (only vertex formats),0,0.9867608547210693
366407812,411,devshgraphicsprogramming,2020-01-14T15:35:26Z,formats which don't fit in power-of-two for a texel/block will never be allowed to be texture formats (only vertex formats),0,0.9867608547210693
366407913,411,devshgraphicsprogramming,2020-01-14T15:35:33Z,formats which don't fit in power-of-two for a texel/block will never be allowed to be texture formats (only vertex formats),0,0.9867608547210693
366407978,411,devshgraphicsprogramming,2020-01-14T15:35:40Z,formats which don't fit in power-of-two for a texel/block will never be allowed to be texture formats (only vertex formats),0,0.9867608547210693
366408065,411,devshgraphicsprogramming,2020-01-14T15:35:49Z,formats which don't fit in power-of-two for a texel/block will never be allowed to be texture formats (only vertex formats),0,0.9867608547210693
366408106,411,devshgraphicsprogramming,2020-01-14T15:35:54Z,formats which don't fit in power-of-two for a texel/block will never be allowed to be texture formats (only vertex formats),0,0.9867608547210693
366408171,411,devshgraphicsprogramming,2020-01-14T15:36:01Z,formats which don't fit in power-of-two for a texel/block will never be allowed to be texture formats (only vertex formats),0,0.9867608547210693
366411515,411,devshgraphicsprogramming,2020-01-14T15:41:37Z,change this to inline and static and define it in the header,0,0.993035614490509
366413799,411,devshgraphicsprogramming,2020-01-14T15:45:21Z,bail out on a fail.,0,0.7496726512908936
366425234,411,devshgraphicsprogramming,2020-01-14T16:03:13Z,really? why?,0,0.5968977212905884
366428142,411,devshgraphicsprogramming,2020-01-14T16:08:22Z,"this is all wrong, you won't be able to handle (1d,2d) array textures cubemap behaves as-if its a 6 layer 2d array cubemap_array behaves as-if its a 6*n layer 2d array",-1,0.8441026210784912
366430560,411,devshgraphicsprogramming,2020-01-14T16:12:26Z,i have an idea.. why don't you use a switch and use the correct derived classes from this diagram? [a link] they will all assign to base `gli::texture` cause right now you're handling texture arrays all wrong and cubemaps.,0,0.9633575081825256
366430804,411,devshgraphicsprogramming,2020-01-14T16:12:50Z,that's absolutely not how regions work!,-1,0.9755417108535767
366431597,411,devshgraphicsprogramming,2020-01-14T16:14:10Z,also if you need the dimensions of a mip-level just use [a link],0,0.9943074584007263
366433050,411,devshgraphicsprogramming,2020-01-14T16:16:38Z,"ok actually its fine, i see what you're doing",0,0.6439929008483887
366433204,411,devshgraphicsprogramming,2020-01-14T16:16:51Z,"its a size of region, not the whole layer.",0,0.9815652966499329
366433915,411,devshgraphicsprogramming,2020-01-14T16:17:55Z,"does it save ktx, dds, etc. properly?",0,0.9941972494125366
366434651,411,devshgraphicsprogramming,2020-01-14T16:19:10Z,"a division by 6 is only applicable to cubemaps, all other array textures no division neeeded! (this is an error in reasoning present in all of your code here)",0,0.661775529384613
366435852,411,devshgraphicsprogramming,2020-01-14T16:21:09Z,"you're doing it all wrong, a region does not contain all the mip levels also layers are counted differently for non-cubemap textures. also you can't do it with a memcpy (well you can but at least one `memcpy` per image-row) because you need to honor the region's defined `bufferrowlength` and `bufferimageheight` to increment the source pointer properly.",0,0.9130263924598694
366447252,411,devshgraphicsprogramming,2020-01-14T16:39:51Z,why are you not solving for the correct format here (and below) ?,0,0.9399932622909546
366451047,411,devshgraphicsprogramming,2020-01-14T16:46:31Z,"if its a cubemap / cubemap array then this is ok. but overall for other texture types, its `arraylayers = texture.layers();`",0,0.9944024682044983
366452839,411,devshgraphicsprogramming,2020-01-14T16:49:42Z,does `gli::texture::size()` include all the mipmaps etc?,0,0.9937962293624878
366457011,411,devshgraphicsprogramming,2020-01-14T16:56:54Z,"check that stuff, otherwise the system will always proceed to load and fail files that are not of gli loadable type.",0,0.950293779373169
366458129,411,devshgraphicsprogramming,2020-01-14T16:58:56Z,"this won't work, you need to be able to read from virtual files... etc. so find a gli function or provide one that overrides `fwrite` or whatever its using internally. maybe there's already something that uses an `ostream` or `istream` ?",0,0.98537677526474
366459666,411,devshgraphicsprogramming,2020-01-14T17:01:34Z,"wrong equations for layers and faces, will fail on non cubemap textures.",0,0.5154485106468201
366460219,411,devshgraphicsprogramming,2020-01-14T17:02:37Z,"this won't work, you need to be able to write to virtual files... etc. so find a gli function or provide one that overrides `fwrite` or whatever its using internally. can't just go by filename and trust an external filesystem handler. maybe there's already something that uses an `ostream` or `istream` ?",0,0.9682549238204956
366463487,411,AnastaZIuk,2020-01-14T17:08:56Z,my single region contains all layers and faces on certain single mip level,0,0.9691992998123169
366870144,411,devshgraphicsprogramming,2020-01-15T13:19:33Z,fixed in 's latest obj branch,0,0.9871196746826172
366890182,411,devshgraphicsprogramming,2020-01-15T14:02:10Z,fixed in 's latest obj branch,0,0.9871196746826172
366890261,411,devshgraphicsprogramming,2020-01-15T14:02:18Z,fixed in 's latest obj branch,0,0.9871196746826172
366890330,411,devshgraphicsprogramming,2020-01-15T14:02:25Z,fixed in 's latest obj branch,0,0.9871196746826172
367015652,411,AnastaZIuk,2020-01-15T17:44:22Z,"it's good since if there is no cubemap, faces amount is 1",1,0.5657182931900024
367015937,411,AnastaZIuk,2020-01-15T17:44:56Z,"yes it does, it includes whole size",0,0.978316605091095
367016037,411,AnastaZIuk,2020-01-15T17:45:09Z,to do,0,0.9583839178085327
367016896,411,AnastaZIuk,2020-01-15T17:46:49Z,why? i think it will [a link],0,0.9589448571205139
367024819,411,AnastaZIuk,2020-01-15T18:03:39Z,we don't have it in `e_format` as far as i know :d or maybe it is called different in there,0,0.6257719397544861
367025581,411,AnastaZIuk,2020-01-15T18:05:31Z,"i loaded dds, saved and loaded and memory was fine, so ktx left to check",0,0.9434986710548401
367026638,411,AnastaZIuk,2020-01-15T18:07:51Z,so do we want to support however?,0,0.9864675998687744
367041681,411,devshgraphicsprogramming,2020-01-15T18:39:53Z,"because you're supposed to read from the `ireadfile` that is passed as argument, you do realize that it doesn't have to be a file in the filesystem, and could be a virtual file in an archive, or just a pile of data in ram that mimicks a file?",0,0.9937596917152405
367044582,411,devshgraphicsprogramming,2020-01-15T18:46:37Z,all of these formats are actually these ones [a link],0,0.9895051121711731
367044989,411,devshgraphicsprogramming,2020-01-15T18:47:31Z,"you're not saving to memory or loading from memory, you are passing the filename :man_facepalming:",0,0.983178973197937
367045159,411,devshgraphicsprogramming,2020-01-15T18:47:53Z,"obviously yes, thats why we had dds loader in the first place!",0,0.829024076461792
367047203,411,AnastaZIuk,2020-01-15T18:52:26Z,and passing a texture with all data needed to save an image it performs saving to file,0,0.9903456568717957
367049888,411,AnastaZIuk,2020-01-15T18:57:59Z,"i will use it in tga for sure, but it is enough to let it be as it is now i think",0,0.9673700928688049
367050686,411,AnastaZIuk,2020-01-15T18:59:39Z,you mean `iimageassethandlerbase`?,0,0.9930441975593567
367051458,411,AnastaZIuk,2020-01-15T19:01:19Z,"well i didn't know that, so i will adjust it",0,0.8839502930641174
367069646,411,devshgraphicsprogramming,2020-01-15T19:40:34Z,i want you to save to the `iwritefile` only way to do it is [code block] likewise for reading,0,0.9931458234786987
367071623,411,AnastaZIuk,2020-01-15T19:45:04Z,but not sure what about `bufferimageheight ` you mean in reference to my code,0,0.8924227356910706
367074145,411,AnastaZIuk,2020-01-15T19:50:44Z,"well, in that case it's easy, but i'm forced to use `vector ` [a link] (dds example)",0,0.9796360731124878
367091491,411,AnastaZIuk,2020-01-15T20:30:12Z,to do,0,0.9583839178085327
367091686,411,AnastaZIuk,2020-01-15T20:30:37Z,to do [a link],0,0.9916707277297974
367409008,411,devshgraphicsprogramming,2020-01-16T13:13:13Z,no in the gliwriter header.,0,0.9886441230773926
367410070,411,devshgraphicsprogramming,2020-01-16T13:15:44Z,"this will not work [code block] if your `bufferimageheight!=height` or `bufferimagewidth!=width`, you can't copy more than a row at once.",0,0.9904999136924744
367645120,411,AnastaZIuk,2020-01-16T20:55:49Z,"well, i have to add them on writer yet",0,0.9827621579170227
367645600,411,AnastaZIuk,2020-01-16T20:56:54Z,"fixed, but i will touch it yet a little tomorrow",0,0.9396799206733704
367900255,411,AnastaZIuk,2020-01-17T11:53:43Z,"okay, but i'm repeating myself in loader then",0,0.7555088400840759
367927963,411,AnastaZIuk,2020-01-17T13:12:01Z,"it and above are wrong for sure, but no idea what they are i couldn't find anything about those formats",-1,0.831313967704773
368125890,411,devshgraphicsprogramming,2020-01-17T20:37:16Z,still wrong,-1,0.7217018604278564
368131149,411,devshgraphicsprogramming,2020-01-17T20:51:42Z,"this also concerns #412 , if you could add a utility that expands a r8_srbg texture into a rgb8_srgb texture to imageloaderbase (or whatever that common class with hidden utilities is called) and use this in gli and tga loader whenever an r8_srgb format is encountered. the reasoning for this is that the r8 format with srgb encoding used to be available in compatibility (with 2.1) opengl profile, but got removed from 3.3 core profile only to be added back to opengl 4.6, so not many gpu's drivers can natively accept and display that... so we need a software conversion.",0,0.9911770820617676
368131264,411,devshgraphicsprogramming,2020-01-17T20:52:06Z,"this pretty much needs to happen on any loader that ""should"" produce a r8_srgb",0,0.9837895035743713
368131739,411,devshgraphicsprogramming,2020-01-17T20:53:16Z,this we dont support,-1,0.686485230922699
368132042,411,devshgraphicsprogramming,2020-01-17T20:54:03Z,rest are here [a link],0,0.98971027135849
368132536,411,devshgraphicsprogramming,2020-01-17T20:55:19Z,these can be expanded to rgb8_srgb and rgba8_srgb,0,0.9927434921264648
368229498,411,AnastaZIuk,2020-01-18T14:25:19Z,fixed,0,0.9281549453735352
368246188,411,devshgraphicsprogramming,2020-01-18T20:15:05Z,"correct order for such loops is z,y,x essentially most major memory stride to most minor. read about cache trashing on the internet.",0,0.9716149568557739
368246266,411,devshgraphicsprogramming,2020-01-18T20:16:35Z,maybe assert that the output image format is ef_r8g8b8_srgb ?,0,0.9949163198471069
368246392,411,devshgraphicsprogramming,2020-01-18T20:19:54Z,texelamount should be the full count of pixels to convert (basically imagesizewithpitch.x*imagesizewithpitch.y*imagesizewithpitch.z),0,0.9897374510765076
368246444,411,devshgraphicsprogramming,2020-01-18T20:21:06Z,"there's no need for any conversion here... r8_srgb is the same thing as r8g8b8_srgb, just less channels.",0,0.9886047840118408
368246495,411,devshgraphicsprogramming,2020-01-18T20:21:47Z,"this function will crash, you're not initializing `out` to anything",0,0.8130002617835999
368246587,411,devshgraphicsprogramming,2020-01-18T20:23:03Z,call it `pixelbytesize`,0,0.992800235748291
368246739,411,devshgraphicsprogramming,2020-01-18T20:26:10Z,"just count your offsets right in `redchanneldatalayer` and you'll be fine (watch out, you should take input pitches/strides as certain formats that rely on discrete cosine transform or block compression will pad rows out [height padding possible too in theory] ).",0,0.986149787902832
368253871,411,devshgraphicsprogramming,2020-01-18T23:12:23Z,these are all the same as [a link] except that you swap `unorm` for `srgb`,0,0.9923427700996399
368254835,411,devshgraphicsprogramming,2020-01-18T23:39:31Z,[a link] all alpha-containing ones are supported.,0,0.989337682723999
368254851,411,devshgraphicsprogramming,2020-01-18T23:40:08Z,"you can return a special error on those, vulkan doesn't distinguish between alpha and non alpha containing pvrtc",0,0.945286214351654
368254941,411,devshgraphicsprogramming,2020-01-18T23:42:25Z,"all here [a link] punchthrough means 1-bit alpha (on or off, like punching through a card)",0,0.992267906665802
368254999,411,devshgraphicsprogramming,2020-01-18T23:44:18Z,these look like vulkan's vertex formats (disallowed for textures) so log an appropriate error message.,0,0.9328101873397827
368255016,411,devshgraphicsprogramming,2020-01-18T23:45:25Z,same as [a link],0,0.9871845841407776
368255421,411,devshgraphicsprogramming,2020-01-18T23:57:06Z,resources by using back-word compatible format vk_format_etc2_r8g8b8_unorm_block found that in some vulkan case study on the web,0,0.994697093963623
368299143,411,AnastaZIuk,2020-01-19T14:42:03Z,"yeah i know, but i thought that it will be easy to expand the buffer in that way but i will just get the size and multiple through 3 including all you mentioned",0,0.9047343134880066
368299186,411,AnastaZIuk,2020-01-19T14:42:37Z,"logic error, i meant channels in texel, but it's wrong",0,0.7336783409118652
368299196,411,AnastaZIuk,2020-01-19T14:42:47Z,"i'm reading, to fix",0,0.6766744256019592
368303846,411,AnastaZIuk,2020-01-19T15:53:40Z,but what about `la4` then?,0,0.9928273558616638
368303933,411,AnastaZIuk,2020-01-19T15:55:22Z,there is no enough srgb `ef_format`s to cover it,0,0.9884690642356873
368304876,411,AnastaZIuk,2020-01-19T16:09:31Z,"actually i thought about it as i will get from `convertcolor` a ready to use pointer with appropriate size, you're right",0,0.835364818572998
368304975,411,AnastaZIuk,2020-01-19T16:11:25Z,have to read about `discrete cosine transform`,0,0.990062415599823
368305384,411,AnastaZIuk,2020-01-19T16:17:47Z,"but there is a dxt, and our prefix is bc(x). is it the same?",0,0.9937801957130432
368305391,411,devshgraphicsprogramming,2020-01-19T16:17:51Z,"well it doesnt matter what dct is, its just that some image formats will require physical images to be multiples of some sort of a size because of compression or encoding, so padding will be added for the ""unnatural"" image resolutions. example hevc or h.264 requires block sizes of 8x8 or something like that so you cant have a 400x300 video",0,0.97166508436203
368305579,411,AnastaZIuk,2020-01-19T16:21:08Z,"dxt3 and bc2? is it valid? i don't get it, what is the convention?",0,0.9258614778518677
368305630,411,devshgraphicsprogramming,2020-01-19T16:22:00Z,"la4 is 4 bits, just expand the format into 8bits per channel and pretend the format is rgba8_srgb.",0,0.9913812279701233
368305725,411,devshgraphicsprogramming,2020-01-19T16:23:06Z,which ones are wrong then?,0,0.9469341039657593
368305790,411,devshgraphicsprogramming,2020-01-19T16:24:03Z,"dxt1-5 and bc1-3 are different names for the same thing, dxt2 and dxt4 are not even formats in their own right.",0,0.970201313495636
368305797,411,devshgraphicsprogramming,2020-01-19T16:24:18Z,"dxt3 is bc2, google it",0,0.9897839426994324
368307913,411,AnastaZIuk,2020-01-19T17:01:52Z,got it,0,0.929606556892395
368309203,411,AnastaZIuk,2020-01-19T17:25:43Z,to fix in next commit in that case,0,0.993166983127594
368309240,411,AnastaZIuk,2020-01-19T17:26:21Z,i will study it,0,0.967772901058197
368642800,411,AnastaZIuk,2020-01-20T16:43:32Z,will `ef_r4g4b4a4_unorm_pack16` fit it?,0,0.9947362542152405
368664934,411,devshgraphicsprogramming,2020-01-20T17:37:37Z,"not really, because for every two la4 pixels you'd be getting one `ef_r4g4b4a4_unorm_pack16` pixel",0,0.9919628500938416
368664979,411,devshgraphicsprogramming,2020-01-20T17:37:44Z,so padding needed.,0,0.9790579676628113
368665043,411,devshgraphicsprogramming,2020-01-20T17:37:54Z,also srgb concerns,0,0.9858226180076599
368676969,411,devshgraphicsprogramming,2020-01-20T18:15:41Z,?,0,0.9557723999023438
376709488,411,devshgraphicsprogramming,2020-02-08T13:14:31Z,aaand its even more broken now!,-1,0.9767264127731323
376723181,411,devshgraphicsprogramming,2020-02-08T17:44:17Z,wtf are you doing?,-1,0.9735779762268066
376723198,411,devshgraphicsprogramming,2020-02-08T17:44:32Z,what?,0,0.9032567739486694
376723236,411,devshgraphicsprogramming,2020-02-08T17:45:34Z,these functions need to round up `(val+den-1u)/den`,0,0.991295337677002
376723363,411,devshgraphicsprogramming,2020-02-08T17:47:29Z,iterate over region layers!,0,0.9456034302711487
376723430,411,devshgraphicsprogramming,2020-02-08T17:48:32Z,you don't need this lambda,0,0.9344761967658997
376723473,411,devshgraphicsprogramming,2020-02-08T17:49:17Z,you shall not call boolean functions every loop iteration!,0,0.8607261776924133
376817716,411,devshgraphicsprogramming,2020-02-09T21:37:07Z,still wrong,-1,0.7217018604278564
287882394,307,devshgraphicsprogramming,2019-05-27T21:10:21Z,"flt_max, otherwise this won't work for boxes with max edge <(1,1) or min edge > (-1,-1)",0,0.9857755899429321
287882822,307,devshgraphicsprogramming,2019-05-27T21:14:35Z,"nope, bad api you only want [code block]",-1,0.9266650080680847
287882923,307,devshgraphicsprogramming,2019-05-27T21:15:28Z,rename to `aabb2dsimdf`,0,0.9926422238349915
287882994,307,devshgraphicsprogramming,2019-05-27T21:16:08Z,do it from two `core::vectorsimdf`s instead,0,0.9944775700569153
287883008,307,devshgraphicsprogramming,2019-05-27T21:16:21Z,y is negative min,0,0.7903676629066467
287883054,307,devshgraphicsprogramming,2019-05-27T21:16:46Z,`aabb3dsimdf`,0,0.9875320792198181
287883118,307,devshgraphicsprogramming,2019-05-27T21:17:15Z,you need to negate the minimums,0,0.9682660698890686
287883564,307,devshgraphicsprogramming,2019-05-27T21:21:28Z,"because `bounds` is private (rightfully so because it has a weird and packed encoding), you need public getter functions. [code block]",0,0.9086942076683044
289016802,307,devshgraphicsprogramming,2019-05-30T14:33:18Z,those need to be undefined at the end of the file to not pollute the preprocessor,0,0.989361584186554
289017137,307,devshgraphicsprogramming,2019-05-30T14:33:59Z,negative on everything! you're using `core::max_` to join boxes and points,-1,0.9657162427902222
289021415,307,devshgraphicsprogramming,2019-05-30T14:43:21Z,add the keyword `explicit` we don't want a conversion to happen by accident,0,0.9872910380363464
289021618,307,devshgraphicsprogramming,2019-05-30T14:43:48Z,make construction of a aabbox explicit here (construct the object),0,0.9926987290382385
289022200,307,devshgraphicsprogramming,2019-05-30T14:45:06Z,"there's no such function in the original., there shoudl be a separate `getminedge` and `getmaxedge`",0,0.9929361939430237
289022764,307,devshgraphicsprogramming,2019-05-30T14:46:19Z,reset from a `vectorsimdf` point,0,0.992256760597229
289023001,307,devshgraphicsprogramming,2019-05-30T14:46:49Z,"don't need this, just provide copy-assignment",0,0.9729189276695251
289023160,307,Przemog1,2019-05-30T14:47:07Z,should this function stay as an overload?,0,0.9928246736526489
289023781,307,devshgraphicsprogramming,2019-05-30T14:48:20Z,you could have just did the following [code block],0,0.9873926043510437
289025250,307,devshgraphicsprogramming,2019-05-30T14:51:10Z,i think its important to have zeros in the zw output coordinate so save to a temporary and call `makesafe2d` before returning,0,0.9835171699523926
289026438,307,devshgraphicsprogramming,2019-05-30T14:53:23Z,just [code block],0,0.9900645613670349
289027227,307,devshgraphicsprogramming,2019-05-30T14:54:51Z,"there's no abs there, update the comment",0,0.9851527214050293
289027544,307,devshgraphicsprogramming,2019-05-30T14:55:24Z,4 edges,0,0.9664425253868103
289027951,307,devshgraphicsprogramming,2019-05-30T14:56:10Z,extract the min and max point and turn them into solitary aabb2d then join the two together,0,0.9857978224754333
289028209,307,Przemog1,2019-05-30T14:56:42Z,"i know, its copy pasted from aabbox3d",0,0.9838740825653076
289028586,307,devshgraphicsprogramming,2019-05-30T14:57:28Z,provide an explanation as to why this function works,0,0.9844214916229248
289029267,307,devshgraphicsprogramming,2019-05-30T14:59:04Z,why do you need to check this as well?,0,0.9835143089294434
289029434,307,devshgraphicsprogramming,2019-05-30T14:59:28Z,i swear there has to be a faster check,0,0.5256444811820984
289029687,307,devshgraphicsprogramming,2019-05-30T15:00:00Z,there are no 2d line classes in the engine so you can nuke those,0,0.9912921786308289
289029747,307,devshgraphicsprogramming,2019-05-30T15:00:08Z,this needs a better name,0,0.9417677521705627
289030140,307,Przemog1,2019-05-30T15:00:59Z,suggestions?,0,0.9860381484031677
289030205,307,devshgraphicsprogramming,2019-05-30T15:01:08Z,"nope because if one wants to do float they can use implicit vectorsimdf constructor like this `somebox.reset({x,y});`",0,0.9923761487007141
289030867,307,devshgraphicsprogramming,2019-05-30T15:02:46Z,`internal_representation`,0,0.9904583692550659
289354071,307,devshgraphicsprogramming,2019-05-31T11:32:56Z,reinterpret_cast,0,0.9837925434112549
289354188,307,devshgraphicsprogramming,2019-05-31T11:33:26Z,just int_min instead,0,0.9851554036140442
289354414,307,devshgraphicsprogramming,2019-05-31T11:34:22Z,this could be templated,0,0.9896817803382874
289374574,307,devshgraphicsprogramming,2019-05-31T12:46:17Z,"`internalboxrepresentation = core::max_(internalboxrepresentation, _box.internalboxrepresentation);`",0,0.9943034648895264
289374904,307,devshgraphicsprogramming,2019-05-31T12:47:15Z,this needs to inherit from a alignedbase class to ensure alignment and `operator new`+`operator delete` overrides,0,0.993877112865448
289375027,307,devshgraphicsprogramming,2019-05-31T12:47:34Z,same for the other vector type,0,0.9900139570236206
289375880,307,devshgraphicsprogramming,2019-05-31T12:50:09Z,"this sort of thing could be provided by a base class with crtp (assuming the base class a crtp template argument which is a template class itself, see the allocator code for an example of a template on a template class) [code block]",0,0.9947131276130676
289376136,307,devshgraphicsprogramming,2019-05-31T12:50:51Z,"be consistent and don't use `getbounds()` internally, just use `internalboxrepresentation`",0,0.9920276999473572
289376290,307,devshgraphicsprogramming,2019-05-31T12:51:18Z,remove this method,0,0.9822184443473816
289377097,307,devshgraphicsprogramming,2019-05-31T12:53:48Z,we come back to this at the end,0,0.9880849719047546
289377739,307,devshgraphicsprogramming,2019-05-31T12:55:43Z,"another note, it would be good to use the `vector2df_simd` typedef for places where we input or return points, its more clear what the expected input and output is",0,0.9872774481773376
289378371,307,devshgraphicsprogramming,2019-05-31T12:57:38Z,this could actually be a template function of the base class [code block],0,0.9921265840530396
289379232,307,devshgraphicsprogramming,2019-05-31T13:00:02Z,could be a template of base [code block],0,0.991605281829834
289379414,307,devshgraphicsprogramming,2019-05-31T13:00:37Z,could also be templated,0,0.9899852275848389
289379738,307,devshgraphicsprogramming,2019-05-31T13:01:41Z,could also template,0,0.9781388640403748
289379840,307,devshgraphicsprogramming,2019-05-31T13:02:03Z,update comment,0,0.9618536829948425
289379957,307,devshgraphicsprogramming,2019-05-31T13:02:27Z,it should be possible to template and inline this i think,0,0.9880073070526123
289380949,307,devshgraphicsprogramming,2019-05-31T13:05:44Z,"actually because int_min is equal to -1-int_max, we cannot use the floating point hack :(",-1,0.9913038015365601
289382495,307,devshgraphicsprogramming,2019-05-31T13:10:22Z,could be templated,0,0.9878975749015808
289382729,307,devshgraphicsprogramming,2019-05-31T13:10:58Z,keep this one and kill the one above,0,0.9709070920944214
289580152,307,devshgraphicsprogramming,2019-05-31T23:48:46Z,why are you doing a compare against a vectorsimdf?,0,0.9814567565917969
289580424,307,devshgraphicsprogramming,2019-05-31T23:51:03Z,also this comparison op only works for signed ints you'd need to use crtp and make vectorsimd_32 a common base class (as `vectorsimd_32 >`) for actual `vectorsimdu32` and `vectorsimdi32` (instead of them being typedefs as they are now),0,0.9948421120643616
289580521,307,devshgraphicsprogramming,2019-05-31T23:51:57Z,shift right behaves differently on signed vs unsigned (whether it shifts in copies of the sign bit),0,0.9873344898223877
289600484,307,Przemog1,2019-06-01T10:31:57Z,oops,-1,0.9215677976608276
289602355,307,Przemog1,2019-06-01T11:53:55Z,"i'm going to use it only for aabbsimdu (unsigned int aabb) in getcenter() function, where i need to divide by 2.",0,0.9890645742416382
289602463,307,Przemog1,2019-06-01T11:56:45Z,i.e. [code block],0,0.9925467371940613
289603999,307,devshgraphicsprogramming,2019-06-01T12:59:03Z,that's fine(ish) but you've just added a >> operator to a class that provides both `vectorsimd32u` and `vectorsimd32i` so you've introduced a bug,0,0.9663750529289246
289604160,307,devshgraphicsprogramming,2019-06-01T13:05:06Z,actually this function is called `getedges` but its actually `getvertices` if you look at the definition in `aabbox3d<>` its for getting the corners (you can rename if you like),0,0.9934453964233398
289604362,307,devshgraphicsprogramming,2019-06-01T13:13:01Z,sign flip missing,0,0.9474534392356873
289608484,307,Przemog1,2019-06-01T15:07:40Z,_mm_srli_epi32 will do for unsigned int?,0,0.9944203495979309
289608735,307,devshgraphicsprogramming,2019-06-01T15:17:06Z,correct,0,0.8340582847595215
289615912,307,Przemog1,2019-06-01T19:20:18Z,this class will be moved to aabbsimdi.h ofc,0,0.9938503503799438
289616442,307,devshgraphicsprogramming,2019-06-01T19:41:09Z,you want to template on `core::vector2di32_simd`,0,0.9943698048591614
289616505,307,Przemog1,2019-06-01T19:45:08Z,right,0,0.8996442556381226
289617401,307,Przemog1,2019-06-01T20:23:51Z,"it can be shared between aabbsimdi and aabbsimdu only, aabbsimdf needs also sign flip operation",0,0.9944918155670166
289618564,307,devshgraphicsprogramming,2019-06-01T21:15:15Z,getminedge and getmaxedge you'll actually have to specialize,0,0.9484075903892517
289618583,307,devshgraphicsprogramming,2019-06-01T21:16:06Z,reset can be done as an move assignment (`operator=(&&)`) of a new box created from a point,0,0.9945396780967712
289618690,307,devshgraphicsprogramming,2019-06-01T21:21:40Z,the unpack lo and unpack hi comparison will work here too,0,0.9928666353225708
289618730,307,devshgraphicsprogramming,2019-06-01T21:23:27Z,"dont use the negative minimum convention for integers, due to range issues",0,0.9470168352127075
289618742,307,devshgraphicsprogramming,2019-06-01T21:24:16Z,you're missing `2d` from the name,0,0.9892479777336121
289618750,307,devshgraphicsprogramming,2019-06-01T21:24:33Z,you're missing `2d` from the name,0,0.9892479777336121
289620268,307,devshgraphicsprogramming,2019-06-01T22:34:35Z,lovely stuff,1,0.9583402276039124
289620301,307,Przemog1,2019-06-01T22:35:28Z,"i know, this class will be dumped anyway",0,0.9721368551254272
289640281,307,Przemog1,2019-06-02T12:25:45Z,why it doesn't compile?,0,0.8744722604751587
289643739,307,Przemog1,2019-06-02T13:58:19Z,only this function will vary between aabb2dsimdi and aabb2dsimdu i believe,0,0.9844034910202026
289644989,307,devshgraphicsprogramming,2019-06-02T14:30:59Z,you don't need a swizzle your constructors will work with random stuff in zw,0,0.9850375056266785
289644996,307,devshgraphicsprogramming,2019-06-02T14:31:11Z,now you need an `std::move`,0,0.9922357201576233
289645065,307,devshgraphicsprogramming,2019-06-02T14:32:50Z,still missing `2d` in the name,0,0.9915111660957336
289645089,307,devshgraphicsprogramming,2019-06-02T14:33:29Z,sneaky way of solving this ;),1,0.9448314905166626
289645124,307,devshgraphicsprogramming,2019-06-02T14:34:25Z,"you need `(int_max,int_max,int_min,int_min)` i told you that beacuse of the ranges you won't be able to use the same ""one sse op"" trick as for the `vectorsimdf` based solution",0,0.9915737509727478
289645140,307,devshgraphicsprogramming,2019-06-02T14:34:56Z,if you implement all the comparison operators in the vectorsimd32* types then yes.,0,0.9906274080276489
289645162,307,devshgraphicsprogramming,2019-06-02T14:35:27Z,"we don't quite support c++17, but we have out own workaround called `irr::static_if` if i remember correctly",0,0.9762494564056396
289645183,307,devshgraphicsprogramming,2019-06-02T14:35:51Z,"(uint_max,uint_max,0u,0u)",0,0.9805256724357605
289645198,307,devshgraphicsprogramming,2019-06-02T14:36:17Z,`explicit`,0,0.9890751242637634
289645256,307,devshgraphicsprogramming,2019-06-02T14:37:31Z,"great plan, remember to use `_mm_blend_*` from sse4.2 (the same can be used to implement `core::mix` compatibile with glsl that operates on a bvec)",1,0.886336624622345
289645382,307,Przemog1,2019-06-02T14:41:11Z,wtf i did xd,-1,0.9896408915519714
289645407,307,Przemog1,2019-06-02T14:41:45Z,whats the reason to not support c++17?,0,0.967825710773468
289645438,307,devshgraphicsprogramming,2019-06-02T14:42:30Z,actually if you did [code block] then you could get away just with `operator<`,0,0.9936664700508118
289645467,307,devshgraphicsprogramming,2019-06-02T14:43:15Z,"you have a typo (missing ""t"")?",0,0.9808405041694641
289645519,307,devshgraphicsprogramming,2019-06-02T14:44:30Z,?,0,0.9557723999023438
289645564,307,devshgraphicsprogramming,2019-06-02T14:45:22Z,"having to compile on old versions of gcc for edu.buildaworld.net (we support c++17, but need fallbacks, `static_if` is a fallback for c++14)",0,0.9916588664054871
289645640,307,devshgraphicsprogramming,2019-06-02T14:47:53Z,sure because `get*edge` returns a normal natural 2d point and `reset` + `addpoint` should work on it just fine,0,0.9904148578643799
289645646,307,devshgraphicsprogramming,2019-06-02T14:48:01Z,void,0,0.9530168771743774
289645651,307,devshgraphicsprogramming,2019-06-02T14:48:08Z,no return,0,0.9630244970321655
289645695,307,devshgraphicsprogramming,2019-06-02T14:49:43Z,something went wrong here. [code block],0,0.9552318453788757
289645709,307,devshgraphicsprogramming,2019-06-02T14:50:18Z,"made a typo, updated",0,0.9791703224182129
289645757,307,devshgraphicsprogramming,2019-06-02T14:51:45Z,remember about the stack overflow algorithm,0,0.9767525792121887
289645773,307,devshgraphicsprogramming,2019-06-02T14:52:19Z,explicit,0,0.890796959400177
289645846,307,devshgraphicsprogramming,2019-06-02T14:54:21Z,this class still around?,0,0.9845934510231018
289645900,307,devshgraphicsprogramming,2019-06-02T14:55:53Z,wrong. aabb2dsimdf will perform sign flip when calling a constructor from a single point,-1,0.777829647064209
289646168,307,Przemog1,2019-06-02T15:03:32Z,"no, will clean it up later",0,0.9817945957183838
289646181,307,Przemog1,2019-06-02T15:03:57Z,nvm,0,0.9624345302581787
289646208,307,Przemog1,2019-06-02T15:04:40Z,"thats the plan, but implementing those will take some time",0,0.9347065687179565
289646240,307,Przemog1,2019-06-02T15:05:40Z,why not ordinary copy assigment? we are not moving anything,0,0.9525226354598999
289646427,307,Przemog1,2019-06-02T15:10:28Z,sure,0,0.9137381911277771
289648504,307,Przemog1,2019-06-02T16:06:34Z,"description of this function says: /** necessary if for example minedge and maxedge are swapped. */ so in this situation if minedge and maxedge are switched, then aabbsimdf version of getminedge() will return maxedge with fliped sign",0,0.9953638315200806
289659389,307,Crisspl,2019-06-02T21:56:33Z,we are allowed to use `if constexpr` now?,0,0.9949743747711182
289660528,307,devshgraphicsprogramming,2019-06-02T22:36:29Z,"no, see the other comment i left about `static_if`",0,0.9879807829856873
289660579,307,devshgraphicsprogramming,2019-06-02T22:38:10Z,"you could move the temporary `pointbox` into `this` now what you have is incompileable, but i can assume you meant to copy the internal rep of the temporary `pointbox` into `this->internal....` which will get optimized by the compiler only if you're lucky.",0,0.9831113815307617
289660620,307,devshgraphicsprogramming,2019-06-02T22:39:14Z,"yes, but you need to anticipate `repair` being called on a totally valid aabb (that does not need switching)",0,0.9807530045509338
290260397,307,devshgraphicsprogramming,2019-06-04T12:01:02Z,irr_force_ebo,0,0.9786860942840576
290260560,307,devshgraphicsprogramming,2019-06-04T12:01:32Z,"make them protected, this way `aabb2dsimdbase` will not be possible to instantiate",0,0.991960346698761
290260685,307,Przemog1,2019-06-04T12:01:55Z,makes sense,0,0.9534063935279846
290260698,307,devshgraphicsprogramming,2019-06-04T12:01:57Z,just use assignment,0,0.9848612546920776
290488747,307,devshgraphicsprogramming,2019-06-04T20:43:49Z,"nope, you need to downcast the pointer and call the crtp version of operator=",0,0.9896865487098694
290489092,307,devshgraphicsprogramming,2019-06-04T20:44:41Z,aabb2simdbase decl also needs `irr_force_ebo`,0,0.99375981092453
290490345,307,Przemog1,2019-06-04T20:47:53Z,i really need to read about it,0,0.5234208106994629
290492206,307,Przemog1,2019-06-04T20:52:33Z,"got it, just in case copy assigment is overrided",0,0.9917190074920654
290505153,307,devshgraphicsprogramming,2019-06-04T21:29:47Z,basically put static_asserts that `sizeof(aabb2dsimdf)==16u` and see what happens,0,0.9937393665313721
290505341,307,devshgraphicsprogramming,2019-06-04T21:30:21Z,"that's invalid, you need to use `_mm_store_ps`",0,0.9828333258628845
290514441,307,Przemog1,2019-06-04T22:00:22Z,"i've changed that already, but it worked",0,0.9816383123397827
290531667,307,devshgraphicsprogramming,2019-06-04T23:14:40Z,its works because your compiler substitutes in `_mm_storeu_ps` silently,0,0.9923233985900879
165333271,21,devshgraphicsprogramming,2018-02-01T11:46:02Z,"maybe have a ""blob* serializetoblob(void** initialdataptr, uint32_t& blobsize=0);"" function for future use in all classes? with a requirement that initialdataptr is either null or an address of a pointer to memory which can be reallocated using realloc. and then at the end of the function return *initialdataptr; ofc blobsize would be the starting size of the initialdataptr, and after it gets written the true size.",0,0.9943165183067322
165334472,21,devshgraphicsprogramming,2018-02-01T11:51:13Z,could add that as of 2018 most opengl implementations support 16 attributes (some cad gpus more),0,0.9899210929870605
165334558,21,devshgraphicsprogramming,2018-02-01T11:51:39Z,special id for reverse xyzw order,0,0.9704782366752625
165334674,21,devshgraphicsprogramming,2018-02-01T11:52:10Z,best thing about this enum is that it can be casted to an int to give you the actual component count :+1:,0,0.602985680103302
165334891,21,devshgraphicsprogramming,2018-02-01T11:53:08Z,in opengl some formats are special like rgb30_a2 or rgb9_e5 which force the number of components and give no flexibility in the number of channels,0,0.9846190810203552
165335421,21,devshgraphicsprogramming,2018-02-01T11:55:43Z,"in opengl parlance normalized-integer means whether an integer value gets rescaled to [0,1] or [-1,1] float value respectively for unsigned and signed integer, by the time it reaches the shader input as a vertex attribute or texel from a texture.",0,0.9927842617034912
165335632,21,devshgraphicsprogramming,2018-02-01T11:56:46Z,"if we're including it here, then move cbawfile.h from ""source/irrlicht"" to ""include""",0,0.9955975413322449
165336498,21,devshgraphicsprogramming,2018-02-01T12:00:41Z,"we should move this into the protected section, as this class is an adt definitely dont want to be able to create these objects out of thin-air",0,0.9346060752868652
165337614,21,devshgraphicsprogramming,2018-02-01T12:06:06Z,"as mentioned in out previous conversations: we only keep track of a position attribute, as every vertex needs to have at least a position to be displayed on the screen. certain vertices may not have colors, normals, texture coords, etc. but a position is always present. i wanted to give flexibility and not just assume attribute 0 to be the old gl_vertex blindly. on another note we need to know at least what is the vertex attribute for position to calculate bounding boxes reliably. however if you want to do some weird gpgpu based off drawing vertices, you can safely ignore this if you don't use bounding box culling.",0,0.9769731760025024
165338156,21,devshgraphicsprogramming,2018-02-01T12:08:44Z,for consistency call it the index array,0,0.9929869771003723
165339927,21,devshgraphicsprogramming,2018-02-01T12:17:53Z,"on another note, maybe instead of doing the copying here... do it in the constructor of the finalbonehierarchyblobv1 class? or a static createonmemory(void* dataptr) function? at least for consistency :) we can get all the private members of cfinalbonehierarchy, i.e. keyframecount == cfinalbonehierarchy::getkeyframecount() keyframes == cfinalbonehierarchy::getkeys() interpolatedanimations == cfinalbonehierarchy::getinterpolatedanimationdata(0) noninterpolatedanimations == cfinalbonehierarchy::getnoninterpolatedanimationdata(0) etc.",1,0.8594145774841309
165342356,21,devshgraphicsprogramming,2018-02-01T12:30:51Z,vertex with index ix which is to be returned,0,0.9929695725440979
165342884,21,devshgraphicsprogramming,2018-02-01T12:33:11Z,the 'ix'th vertex no such vertex not index,0,0.9696388244628906
165343608,21,devshgraphicsprogramming,2018-02-01T12:36:49Z,and by 'bufferoffset' also basically it will get the start of the array at the same point as opengl will get upon a gldraw* when accessing the array take account of the attribute stride as consecutive elements in the array will not be attribute #attrid of consecutive vertices,0,0.9881443977355957
165343760,21,devshgraphicsprogramming,2018-02-01T12:37:33Z,vertex attribute not index attribute,0,0.9793999791145325
165344809,21,devshgraphicsprogramming,2018-02-01T12:42:51Z,see my note about variable size blobs,0,0.9848362803459167
165344990,21,devshgraphicsprogramming,2018-02-01T12:43:42Z,see my note about variable size blobs,0,0.9848362803459167
165345203,21,devshgraphicsprogramming,2018-02-01T12:44:48Z,see my note about variable size blobs,0,0.9848362803459167
165345351,21,devshgraphicsprogramming,2018-02-01T12:45:26Z,maybe have a constructor/static create function directly from the object being saved +see my note about variable size blobs,0,0.9915955662727356
165346095,21,devshgraphicsprogramming,2018-02-01T12:49:05Z,maybe have a constructor/static create function directly from the object being saved +see my note about variable size blobs,0,0.9915955662727356
165350535,21,devshgraphicsprogramming,2018-02-01T13:10:52Z,maybe have a constructor/static create function directly from the object being saved +see my note about variable size blobs,0,0.9915955662727356
165351741,21,devshgraphicsprogramming,2018-02-01T13:16:15Z,"can be a static_cast or reinterpret_cast, just check the mesh type before casting",0,0.9909343123435974
165352323,21,devshgraphicsprogramming,2018-02-01T13:18:41Z,you will need to use the heap for this bad boy,-1,0.9794690608978271
165355319,21,devshgraphicsprogramming,2018-02-01T13:30:58Z,"big note for this function, not all format conversions to rgba32f/xyzw32f are implemented!",1,0.9574974179267883
165355421,21,devshgraphicsprogramming,2018-02-01T13:31:21Z,vectorsimdf object,0,0.9839178323745728
165355512,21,devshgraphicsprogramming,2018-02-01T13:31:47Z,vertex,0,0.9451643824577332
165357003,21,devshgraphicsprogramming,2018-02-01T13:37:50Z,"ix out of range, no attribute specified/bound or given attribute's format conversion to vectorsimdf unsupported",0,0.9357991814613342
165357123,21,devshgraphicsprogramming,2018-02-01T13:38:23Z,"vertex not index, the index is ""of the vertex""",0,0.9930062294006348
165357249,21,devshgraphicsprogramming,2018-02-01T13:39:00Z,"big note for this function, not all format conversions from rgba32f/xyzw32f (vectorsimdf) are implemented!",1,0.9452412724494934
165357426,21,devshgraphicsprogramming,2018-02-01T13:39:46Z,"should add a comment with a link to [a link] telling people to read that to understand the key terms like attribute ids, indices, attribute formats etc.",0,0.9914590120315552
165407500,21,Crisspl,2018-02-01T16:20:04Z,"about variable size blob: i'm allocating memory on stack for it (see for example cbawmeshwriter.cpp:54), it's your idea actually. so now `variablesizeblob` would allocate mem on heap for us... at most it could make sense for `cfinalbonehierarchy` and corresponding blob struct right now",0,0.9884872436523438
165411796,21,devshgraphicsprogramming,2018-02-01T16:33:01Z,"well if we know the blob to be less than 16kb then lets placement new it on the stack, but for things which can be much bigger like the cfinalbonehierarchy (as it contains all the animations), we definitely need the heap. so that variablesizeblob::caclblobsizeforobj static function could help us differentiate between the two cases. we dont have to call ""allocmemforblob"" it was more of an idea to have a static create function which requires you to say how much memory you reserved or allocated and assert if the constructor would overrun it, and that needs some sort of mechanism to allow us to create the object via a placement new but having the constructor declared as private.",0,0.982306182384491
165441972,21,Crisspl,2018-02-01T18:13:59Z,we already talked about this and decided to load blob buffer with variable-size data outside ctor since it has to rely on the fact that the memory actually is allocated (and check it from inside ctor) and it's kinda dangerous,-1,0.9411923885345459
165442274,21,Crisspl,2018-02-01T18:15:06Z,we already talked about this and decided to load blob buffer with variable-size data outside ctor since it has to rely on the fact that the memory actually is allocated (and check it from inside ctor) and it's kinda dangerous,-1,0.9411923885345459
165442296,21,Crisspl,2018-02-01T18:15:11Z,we already talked about this and decided to load blob buffer with variable-size data outside ctor since it has to rely on the fact that the memory actually is allocated (and check it from inside ctor) and it's kinda dangerous,-1,0.9411923885345459
165464225,21,devshgraphicsprogramming,2018-02-01T19:34:30Z,"true, thats why i'm pondering making the constructor private and instead making a static ""createovermemory"" function which will call the constructor through placement new in private and check the memory size provided... it would have to be a static function and a private constructor as constructors are not allowed to not create the object or to return anything else than the object.",0,0.9746969938278198
165465945,21,devshgraphicsprogramming,2018-02-01T19:40:34Z,"sorry i didn't explain this before, but we never put .cpp files outside source/irrlicht",-1,0.9929326772689819
165466217,21,devshgraphicsprogramming,2018-02-01T19:41:26Z,does it not compile if you leave it unspecialized?,0,0.9714778065681458
165466443,21,devshgraphicsprogramming,2018-02-01T19:42:11Z,does it not compile if you leave it unspecialized?,0,0.9714778065681458
165466513,21,devshgraphicsprogramming,2018-02-01T19:42:24Z,does it not compile if you leave it unspecialized?,0,0.9714778065681458
165467561,21,Crisspl,2018-02-01T19:45:57Z,"o, yea, it shoukld be obvious for me, my bad",-1,0.9882944822311401
165467611,21,Crisspl,2018-02-01T19:46:10Z,i'll put it back,0,0.9831504225730896
165467689,21,devshgraphicsprogramming,2018-02-01T19:46:27Z,"""curiously recurring template"" will allow us to declare static calcblobsizeforobj and allocmemforblob functions which can be ""overriden"" like virtual functions",0,0.9851891994476318
165467889,21,Crisspl,2018-02-01T19:47:08Z,i don't understand how i could leave it unspecialized,-1,0.7989510893821716
165468420,21,devshgraphicsprogramming,2018-02-01T19:48:53Z,"true, thats why i'm pondering making the constructor private and instead making a static ""createovermemory"" function which will call the constructor through placement new in private and check the memory size provided... it would have to be a static function and a private constructor as constructors are not allowed to not create the object or to return anything else than the object.",0,0.9746969938278198
165469242,21,devshgraphicsprogramming,2018-02-01T19:51:59Z,still forgot to change index's value to vertex's value,0,0.9716131687164307
165469628,21,devshgraphicsprogramming,2018-02-01T19:53:25Z,maybe make it a function of the blobheaderv* ?,0,0.9945411086082458
165469720,21,Crisspl,2018-02-01T19:53:43Z,yea maye.. but what's the point of doing so?,0,0.7189828753471375
165469859,21,devshgraphicsprogramming,2018-02-01T19:54:13Z,"""curiously recurring template"" will allow us to declare static calcblobsizeforobj and allocmemforblob functions which can be ""overriden"" like virtual functions",0,0.9851891994476318
165469922,21,Crisspl,2018-02-01T19:54:24Z,nice :+1:,1,0.9943838119506836
165478330,21,devshgraphicsprogramming,2018-02-01T20:28:20Z,not having to remember to specialize the allocmemforblob function every time :),1,0.8235530257225037
165479624,21,devshgraphicsprogramming,2018-02-01T20:33:52Z,"i'm going to be a dick and change this again, could we have: `uint8_t compressiontype; uint8_t dummy[3]; uint32_t blobtype; //go to the wiki page for blobtype registry` [a link] order matters, i want to keep everything 64bit and type-aligned",-1,0.9399321675300598
165490417,21,Crisspl,2018-02-01T21:18:42Z,"the function is not specialized. it's not even a template, only struct is a template. see how it's used [a link] (cbawmeshwriter.cpp:65)",0,0.9868289828300476
165493341,21,devshgraphicsprogramming,2018-02-01T21:29:52Z,sorry i meant declared and defined for every struct.,-1,0.9926826357841492
165727688,21,Crisspl,2018-02-02T18:51:25Z,what about this?,0,0.9209670424461365
165728247,21,Crisspl,2018-02-02T18:53:26Z,"what about this? don't really know why anything would be needed, but .obj loader does something...",0,0.5116414427757263
165778520,21,Crisspl,2018-02-02T22:35:34Z,"nope, `dynamic_cast` is the only one really safe here. `reinterpret_cast` just gave me crash in analogic situation (base class can have a bit different offset and only `dynamic_cast` cares about that).",0,0.9241456985473633
165814548,21,devshgraphicsprogramming,2018-02-03T13:26:51Z,"icpuskinnedmesh is a direct inheritor of icpumesh, so reinterpret_cast should be safe. there's no multiple inheritance etc. like for ivirtualtextures if you were casting from ireferencecounted, then you'd have a problem.",0,0.9882252216339111
165814597,21,devshgraphicsprogramming,2018-02-03T13:28:34Z,"i'll test next week, and see",0,0.9787878394126892
165814853,21,devshgraphicsprogramming,2018-02-03T13:39:28Z,"i'll test next week, and see",0,0.9787878394126892
165815400,21,devshgraphicsprogramming,2018-02-03T14:06:20Z,i don't like friends. because i don't have any...,-1,0.9895896315574646
165815995,21,devshgraphicsprogramming,2018-02-03T14:28:27Z,"i don't like this. the blobs should create a cfinalbonehierarchy, not the cfbh from blob. the reason is that imagine having 4 versions of the blob and also updating the cfbh class. if you want the loader to be backward compatible with all blob versions 1 through 4, then you will have 4 constructors polluting this file which should only be about getting interpolated keyframes for an armature. instead have a constructor: `explicit cfinalbonehierarchy(bonereferencedata* boneflatarraybegin, bonereferencedata* boneflatarrayend, ..., etc.)` then when we move to c++11 we can use move semantics to move the bone name strings.",-1,0.9400076866149902
165816035,21,devshgraphicsprogramming,2018-02-03T14:29:34Z,any comment?,0,0.9818077683448792
165816360,21,devshgraphicsprogramming,2018-02-03T14:42:01Z,"no need to read the entire file at once. you dont check the file header, and that the file has a minimal length to support at least 1 blob it needs to be done in order not to load some bogus file and crash. first only read the file header and check that it even matches, and determine the file version.... then dispatch to the correct loadheadersvn function.",0,0.9832358956336975
165816387,21,devshgraphicsprogramming,2018-02-03T14:43:14Z,again this needs to be checked if it not past the end of the file.,0,0.9875875115394592
165816445,21,Crisspl,2018-02-03T14:46:23Z,"uh, sorry, must have missed this one. i'll talk to you about this and other issues in few days. as for now i don;t really see the need since `exportasblob` functions in mesh writer would do exactly same thing.",-1,0.987496018409729
165816573,21,devshgraphicsprogramming,2018-02-03T14:51:06Z,"imagine the baw file has a huge mesh inside it with auxillary data, or is an archive, it could be couple gigabytes! we only want to read all the blobheaders into ram, at once and linearly. then we can have an std::map > which means std::map > the std::pair could be the sblobdata struct for all i care",0,0.9178694486618042
165816610,21,devshgraphicsprogramming,2018-02-03T14:52:37Z,"if you already have a `createdobjects` member in the context, then there is no need for a wascreated flag. you can just use `std::map::find` to try-get the created object. or if you are scared of using two logn operations, then instead of `bool wascreated` have a `void* createdobj` and ditch the `createdobjects' member - which now after i wrote this, seems a better idea.",0,0.9897457361221313
165816644,21,Crisspl,2018-02-03T14:54:01Z,thanks to the flag i don't need to look for an object in map to determine if it was loaded or not,1,0.586651086807251
165816683,21,devshgraphicsprogramming,2018-02-03T14:56:22Z,"look at my sblobdata comment, you can ditch this in favor of an `ireferencecounted* createdobj` in sblobdata.",0,0.9935682415962219
165816709,21,devshgraphicsprogramming,2018-02-03T14:57:43Z,maybe call it `trymake` or `get`,0,0.9937813878059387
165816737,21,devshgraphicsprogramming,2018-02-03T14:58:56Z,"if you ditch `std::map createdobjects` then you can most probably ditch this function too (or not, but it will just be almost a macro for a 1 line op).",0,0.9924915432929993
165816814,21,devshgraphicsprogramming,2018-02-03T15:02:04Z,"blobs are really nice for serialization to a binary struct, which could be used with other data sinks such as other file formats, networks, mpi, etc.",1,0.969903826713562
165816904,21,devshgraphicsprogramming,2018-02-03T15:06:49Z,"yes, and if the createdobj pointer is not null then it was definitely loaded. you could also set it to 0xdeadbeefdeadbeefull for things that failed to load.",0,0.9916312098503113
165816914,21,devshgraphicsprogramming,2018-02-03T15:07:25Z,the whole point of my suggestions is that there is no 2nd map,0,0.9786689281463623
165816968,21,devshgraphicsprogramming,2018-02-03T15:10:13Z,"just load all headers at the start, then find your mesh to load (we may support pulling named meshes or textures out of big archives).",0,0.9935099482536316
165817106,21,devshgraphicsprogramming,2018-02-03T15:19:13Z,don't seek to 0 after reading header,0,0.9773972630500793
165817118,21,devshgraphicsprogramming,2018-02-03T15:19:45Z,subtract already read amount.,0,0.9851706624031067
165817381,21,devshgraphicsprogramming,2018-02-03T15:33:03Z,create a new core::icpubuffer(size) without a pointer and it will malloc the storage for you. then do ctx.file->read() directly into the buf->getdata(),0,0.9939998388290405
165817502,21,devshgraphicsprogramming,2018-02-03T15:38:35Z,this should really disappear from every `cbawmeshfileloader::make` and be moved into a loadblob function or something else appropriately named,0,0.994679868221283
165817650,21,devshgraphicsprogramming,2018-02-03T15:46:29Z,"we need a more general loadblob function to do the alreadycreated/loaded check, checksum check, calling make<> and tagging as loaded after load. due to the fact that we will have multiple versions of blobs for imesh etc. as we evolve, as well as the ability to serialize in/out of blobs that come from other sources such as network etc. i think the make function should be a function of the blob itself.",0,0.9925833940505981
165818020,21,devshgraphicsprogramming,2018-02-03T16:01:25Z,"the other argument for making this a function of the blob, is that if someone wants to extend the loading system with their own blob types, then they won't need to touch cbawmeshfileloader at all or any other loading and saving systems",0,0.9918986558914185
165818186,21,devshgraphicsprogramming,2018-02-03T16:09:17Z,"and another argument, killer argument... is that you do 'make ' which will fail the moment we support loading two blob versions for the same object",-1,0.8424023985862732
165819910,21,devshgraphicsprogramming,2018-02-03T17:23:08Z,'fixed',0,0.9640693068504333
165820304,21,devshgraphicsprogramming,2018-02-03T17:39:11Z,'fixed',0,0.9640693068504333
165820310,21,devshgraphicsprogramming,2018-02-03T17:39:26Z,'fixed',0,0.9640693068504333
165821129,21,devshgraphicsprogramming,2018-02-03T18:12:07Z,see my latest commit,0,0.9662697315216064
166878485,21,devshgraphicsprogramming,2018-02-08T09:45:24Z,"can we make this a template function, so that the blob is filled inside a blob member function? `template b* serializetoblob(void* _stackptr=null, const size_t& _size=0) { return variablesizeblob ::createandtryonstack(this,_stackptr,_size); }` and then make the 'variablesizeblob::createandtryonstack' function actually use placement new and the proper private constructor (which fills all data) to have a unified api",0,0.993013322353363
166878990,21,devshgraphicsprogramming,2018-02-08T09:47:28Z,if createdobj==0xdeadbeefdeadbeefu then loaded but not usable,0,0.9863722920417786
166879638,21,devshgraphicsprogramming,2018-02-08T09:50:09Z,you can't just delete a void*,0,0.9027393460273743
504880062,549,devshgraphicsprogramming,2020-10-14T18:18:55Z,not sure i want these as public. we should have a `setmutability`,0,0.901305615901947
504883220,549,devshgraphicsprogramming,2020-10-14T18:24:02Z,"doesn't matter what you do here because of #451 which means that it should be the `sassetbundle` that holds the metadata, not the `iasset` (a future todo along with #22 #23 which are still open because of a rare scheduling loophole)",0,0.9929230213165283
504884014,549,devshgraphicsprogramming,2020-10-14T18:25:17Z,forgot something?,0,0.8240213990211487
504885039,549,devshgraphicsprogramming,2020-10-14T18:27:05Z,does the cpu2gpu need non-`const` `sdescriptorinfo` ?,0,0.9931693077087402
504885572,549,devshgraphicsprogramming,2020-10-14T18:27:48Z,converttodummyobject above this line does not check for mutability,0,0.9869416356086731
504887147,549,Crisspl,2020-10-14T18:30:25Z,need non-const descriptors,0,0.9739156365394592
504887821,549,Crisspl,2020-10-14T18:31:26Z,"because it doesnt have to, it would change nothing",0,0.9720588326454163
504888294,549,devshgraphicsprogramming,2020-10-14T18:32:10Z,"if it can be const, make it const",0,0.9895512461662292
504889041,549,devshgraphicsprogramming,2020-10-14T18:33:24Z,but why?,0,0.8641574382781982
504892328,549,devshgraphicsprogramming,2020-10-14T18:39:03Z,"why are you changing our default caching to ""always immutable"" ?",0,0.9882910847663879
504923509,549,devshgraphicsprogramming,2020-10-14T19:34:18Z,default behaviour should be no change (assets go in as mutable),0,0.9932988882064819
505455524,549,Crisspl,2020-10-15T11:06:57Z,setting asset's mutability is exclusive for asset manager and it's already a friend of iasset,0,0.6965342164039612
506334774,549,devshgraphicsprogramming,2020-10-16T11:50:23Z,"ah ok, but still the public functions here are a bit ugly, they should be protected.",-1,0.9718002676963806
506336141,549,devshgraphicsprogramming,2020-10-16T11:52:18Z,would be useful if we called it `swapcontents` and had the two assets swap stuff around,0,0.9943629503250122
506337074,549,devshgraphicsprogramming,2020-10-16T11:53:31Z,"this is now mutable by default, yes?",0,0.9858890771865845
506351004,549,devshgraphicsprogramming,2020-10-16T12:11:33Z,can we even restore this?,0,0.9927254915237427
506354860,549,devshgraphicsprogramming,2020-10-16T12:17:06Z,maybe fold this check into `canbeconvertedtodummy`,0,0.9947973489761353
506361102,549,devshgraphicsprogramming,2020-10-16T12:25:23Z,"btw, `converttodummyobject_common` will set `isdummyobjectforcachealiasing = true;`",0,0.9934313893318176
506362806,549,devshgraphicsprogramming,2020-10-16T12:27:36Z,"as i wrote, you could fold `usadummyobjectforcache` into `canbeconvertedtodummy`",0,0.9928523898124695
506772163,549,Crisspl,2020-10-17T00:34:04Z,hm.. good point. this asset is kinda special because the idea was gpu object->asset->potentially save on disk,1,0.9288234710693359
506772898,549,Crisspl,2020-10-17T00:39:47Z,"public `iassetmanager::insertintocache` sets asset's mutability as cpu persistent (so that everything that is added to cache explicitely by user is cpu persistent), but `iassetloaderoverride` sets mutability as mutable (everything loaded by `getasset` and subassets that are added to cache during the loading process are mutable) all the builtins are added to cache as immutable",0,0.9948740601539612
506774185,549,Crisspl,2020-10-17T00:50:23Z,shouldnt user be able to query asset's mutability level?,0,0.9858477115631104
507619866,549,devshgraphicsprogramming,2020-10-19T09:54:59Z,maybe `getmutability()<em_cpu_persistent`,0,0.9936469197273254
507620023,549,devshgraphicsprogramming,2020-10-19T09:55:13Z,instead of bitfield,0,0.9848862290382385
507633562,549,devshgraphicsprogramming,2020-10-19T10:18:08Z,"yes, but we shouldn't have multiple functions to query, just `getmutability` and the enum obvs `canbeconvertedtodummy` can stay, cause it does more than checking an enum",0,0.971760630607605
507634274,549,devshgraphicsprogramming,2020-10-19T10:19:22Z,"we'd have to check a few things before restoring, then i guess?",0,0.963371217250824
507636432,549,devshgraphicsprogramming,2020-10-19T10:23:05Z,ok i guess it kind-of makes sense.,0,0.9604516625404358
507636908,549,devshgraphicsprogramming,2020-10-19T10:23:52Z,not entirely convinced about the asset manager default behaviour.,-1,0.6477669477462769
507653852,549,devshgraphicsprogramming,2020-10-19T10:54:06Z,needs default argument for `_levelsbelow` should `~0u`,0,0.9936849474906921
507655849,549,devshgraphicsprogramming,2020-10-19T10:57:38Z,"this should not be here, just because asset is not mutable or is not a dummy object (cannot be restored, doesn't matter what `_other` is) does not meen the dependencies couldn't be restored. same if `_other` is a dummy object, the dependants of `this` which are mutable and dummy could be restored from dependants of `_other` which are mutable and non-dummy. **however if `_other` does not ""match""/""is not compatible"" with `this` (i.e. different layout contents) then obviously there's no point restoring the dependants.** p.s. when restoring you should check that `_other` is mutable.",0,0.9695205688476562
507659230,549,devshgraphicsprogramming,2020-10-19T11:04:00Z,"you should probably split this into `restorefromdummy_this` and `restorefromdummy_recurse`, to solve comment [a link] you can only restore `this` from `_other` if: 1. `_other` matches `this` 2. `this` is dummy 3. `this` is mutable 4. `_other` is not a dummy 5. `_other` is mutable you can only recurse if **`_other` ""matches"" `_this`, no other conditions necessary**",0,0.9943495392799377
507660331,549,devshgraphicsprogramming,2020-10-19T11:06:05Z,you're forgetting the size.,0,0.7577602863311768
507662835,549,devshgraphicsprogramming,2020-10-19T11:10:47Z,"ah ok, size is supposed to be identical",0,0.8099929690361023
507664092,549,devshgraphicsprogramming,2020-10-19T11:13:08Z,"the ""does `this` match `_other`""restoration check needs to be fully recursive, so need to check whether layouts match (etc.) before trying to restore top level objects",0,0.993556559085846
507666970,549,devshgraphicsprogramming,2020-10-19T11:18:47Z,kinda paired up with [a link],0,0.9790661931037903
507668149,549,devshgraphicsprogramming,2020-10-19T11:21:00Z,"if we'll already check if we can restore entire dependency tree, then this should call `restorefromdummy_impl` directly instead of `restorefromdummy` for dependencies tied up with the same thread [a link]",0,0.994920551776886
507668749,549,devshgraphicsprogramming,2020-10-19T11:22:12Z,"pointer values of `m_samplers` should not be swapped, only contents (because it would mess up cpu 2 gpu caches) so recursively restore.",0,0.9866818189620972
507672127,549,devshgraphicsprogramming,2020-10-19T11:28:33Z,"there's also a buffer to consider, not only regions",0,0.9914074540138245
507673414,549,devshgraphicsprogramming,2020-10-19T11:30:56Z,need to think about whether to require this.,0,0.9621691107749939
507673633,549,devshgraphicsprogramming,2020-10-19T11:31:20Z,should we require this?,0,0.9803200960159302
507688875,549,devshgraphicsprogramming,2020-10-19T11:59:43Z,"this function is dangerous, it takes no limits/constraints on asset type to be restored (you will usually know the type of asset you're after). the amount of duplication should be not top level, but top level + `_levelsbelow` also handling of mixed dummy and non dummy assets in a bundle is ""meh"". also no check that length of new bundle == old bundle",0,0.7247779965400696
508841453,549,devshgraphicsprogramming,2020-10-20T21:10:04Z,needs a call to `canberestoredfrom_recursedag` at the end,0,0.9945248365402222
508841564,549,devshgraphicsprogramming,2020-10-20T21:10:15Z,make it protected,0,0.9853243231773376
508845955,549,devshgraphicsprogramming,2020-10-20T21:18:42Z,we probably shouldn't require this.,0,0.9739207029342651
508847179,549,devshgraphicsprogramming,2020-10-20T21:21:03Z,"you should recursively restore, dont swap what are essentially pointer lists!",0,0.8845528364181519
508847333,549,devshgraphicsprogramming,2020-10-20T21:21:22Z,see [a link],0,0.9869033098220825
508847758,549,devshgraphicsprogramming,2020-10-20T21:22:13Z,but the `restorefromdummy` should not call `canberestoredfrom` but `canberestoredfrom_this_node` or something like that,0,0.9938925504684448
508856819,549,devshgraphicsprogramming,2020-10-20T21:40:14Z,i dont get this if statement,0,0.6836188435554504
508859771,549,devshgraphicsprogramming,2020-10-20T21:46:31Z,i dont get this if statement,0,0.6836188435554504
508860143,549,devshgraphicsprogramming,2020-10-20T21:47:16Z,"this is bad, its okay to have no push constant ranges, this will fail if either is 0",-1,0.9912434816360474
508860255,549,devshgraphicsprogramming,2020-10-20T21:47:30Z,i dont get this if statement,0,0.6836188435554504
509133928,549,devshgraphicsprogramming,2020-10-21T09:35:14Z,i dont get this if statement,0,0.6836188435554504
509134308,549,devshgraphicsprogramming,2020-10-21T09:35:50Z,will fail with null index buffers,0,0.8819517493247986
509134468,549,devshgraphicsprogramming,2020-10-21T09:36:06Z,same bug as all your optional pointer comparisons,0,0.8757913708686829
509134629,549,devshgraphicsprogramming,2020-10-21T09:36:21Z,pointer mess again,-1,0.87931889295578
509134768,549,devshgraphicsprogramming,2020-10-21T09:36:36Z,pipeline is not optional iirc,0,0.9768124222755432
509137558,549,devshgraphicsprogramming,2020-10-21T09:40:45Z,leave a comment pointing to the github issue.,0,0.9854977130889893
509138846,549,devshgraphicsprogramming,2020-10-21T09:42:41Z,ok `ismutable` might actually be useful,0,0.9890546798706055
509357462,549,Crisspl,2020-10-21T14:53:05Z,"it is, it's not used at all right now in a way other than returning pipeline from mesh loader",0,0.989790141582489
509469808,549,devshgraphicsprogramming,2020-10-21T17:22:27Z,"you cant draw a meshbuffer without a pipeline, you dont even know what primitive type it is",0,0.8880686163902283
509472682,549,Crisspl,2020-10-21T17:25:19Z,i mean `video` namespace ignores it,0,0.9870032668113708
509479020,549,devshgraphicsprogramming,2020-10-21T17:30:38Z,!? afaik its an error to have a icpumeshbuffer with a nullptr icpupipeline,-1,0.9815202355384827
509482370,549,Crisspl,2020-10-21T17:33:16Z,cant because an asset has to be able to call it on its dependencies,0,0.843981146812439
509483202,549,Crisspl,2020-10-21T17:34:03Z,"what, no, why",0,0.6760728359222412
509487996,549,Crisspl,2020-10-21T17:39:02Z,"what i've noted from our conversation: * `restorefromdummy` first calls `canberestoredfrom_recursedag` and early exits if false, otherwise calls `restorefromdummy_impl` * `restorefromdummy_impl` calls `canberestoredfrom` and restores if true, but regardless of result calls `restorefromdummy` on dependencies",0,0.9940902590751648
509673179,549,devshgraphicsprogramming,2020-10-21T20:35:50Z,but asset and its dependencies both inherit from `iasset` ?,0,0.9944986701011658
509714274,549,devshgraphicsprogramming,2020-10-21T21:28:13Z,missed this one,0,0.9685131311416626
509719838,549,devshgraphicsprogramming,2020-10-21T21:35:49Z,"what you're missing that is the public `canberestoredfrom` checks for whether mutability and dummy state of self and this is ok (what i suggest calling `canberestoredfrom_this_node`, which would be equivalent to your current 4 if-statements) and then the ""matching"" of the dag because of this, the `restorefromdummy_impl` should not call this function to prevent the resotration of current asset in the dag, but a protected `canberestoredfrom_this_node`. `restorefromdummy` shouldn't call the public function either but only `canberestoredfrom_recursedag` to early out.",0,0.9927974343299866
510772185,549,devshgraphicsprogramming,2020-10-23T09:56:00Z,actually [a link],0,0.9874691963195801
510960117,549,Crisspl,2020-10-23T15:22:52Z,soo is not the case your description above perfectly matches what actually is now,0,0.9892323017120361
510962339,549,Crisspl,2020-10-23T15:25:55Z,asset bundle can hold only one type of assets if thats what you mean,0,0.9882506132125854
510962646,549,Crisspl,2020-10-23T15:26:16Z,doesnt matter,0,0.8212878108024597
510975776,549,devshgraphicsprogramming,2020-10-23T15:44:58Z,"ok there's a simple workaround for that, move `canberestoredfrom_recursedag` to protected and also provide this as a workaround: [code block] then because `canberestoredfrom_recursedag_call` is not virtual derived classes should be able to call it, correct?",0,0.9903808236122131
511105825,549,devshgraphicsprogramming,2020-10-23T19:27:31Z,what happened here?,0,0.9823284149169922
511106165,549,devshgraphicsprogramming,2020-10-23T19:27:54Z,just assert ;),1,0.9538782835006714
511106514,549,devshgraphicsprogramming,2020-10-23T19:28:19Z,why public?,0,0.9416879415512085
511107165,549,devshgraphicsprogramming,2020-10-23T19:29:07Z,why public?,0,0.9416879415512085
511111649,549,devshgraphicsprogramming,2020-10-23T19:34:29Z,why,0,0.8536384701728821
511111773,549,devshgraphicsprogramming,2020-10-23T19:34:49Z,why,0,0.8536384701728821
511112928,549,devshgraphicsprogramming,2020-10-23T19:37:18Z,i need an explainer about this,0,0.834756076335907
511114510,549,devshgraphicsprogramming,2020-10-23T19:39:15Z,why?,0,0.8699262738227844
511212462,549,Crisspl,2020-10-24T00:31:56Z,ah i forgot to re-enable this,0,0.7780682444572449
511940124,549,Crisspl,2020-10-26T12:59:56Z,"no, why? hm, i think workaround would be put this into iasset [code block] and then call in derived classes, i.e. in case of ds: `canberestoredfrom_recursedag_call(getlayout(), other->getlayout())` same for `restorefromdummy_impl`",0,0.9837155938148499
511942050,549,Crisspl,2020-10-26T13:03:17Z,im doing this,-1,0.7502804398536682
512184389,549,devshgraphicsprogramming,2020-10-26T18:36:10Z,todo,0,0.918040931224823
512187433,549,devshgraphicsprogramming,2020-10-26T18:40:51Z,"no its not, there's one thing missing the fucntion here, `canberestoredfrom`, should do the 4 if statements plus a call to `canberestoredfrom_recursedag`",0,0.9940369129180908
512188381,549,devshgraphicsprogramming,2020-10-26T18:42:18Z,leave a comment,0,0.9537000060081482
512189395,549,devshgraphicsprogramming,2020-10-26T18:44:05Z,"hmm ok can keep as is, just document want criss wrote on the wiki",0,0.8706649541854858
512202255,549,devshgraphicsprogramming,2020-10-26T19:06:14Z,ugh i said it wrong again.,-1,0.6295411586761475
512207006,549,devshgraphicsprogramming,2020-10-26T19:14:47Z,should take a `uint32_t _levelsbelow` parameter,0,0.99518221616745
512208752,549,devshgraphicsprogramming,2020-10-26T19:18:02Z,ugh this is so coupled.,0,0.8618690967559814
512212611,549,devshgraphicsprogramming,2020-10-26T19:24:59Z,"oh, we already discussed it",0,0.9338739514350891
512213380,549,devshgraphicsprogramming,2020-10-26T19:26:17Z,just remind me of the corner case that would break a `_levelsbelow` parameter version?,0,0.9878339767456055
512218571,549,devshgraphicsprogramming,2020-10-26T19:35:28Z,but i'd instead add a `mutability` argument to the function with ` iasset::em_cpu_persistent` as the default parameter so user doesn't have to do the long form of first inserting an asset and then changing its mutability to what he actually wants,0,0.9932509064674377
512221452,549,devshgraphicsprogramming,2020-10-26T19:40:40Z,"no that's not what i meant, i mean that you pass a bundle of some type, then use the bundle's cache key value to try and get a fresh load (badly because only top level will be duplicated and for restore you need the full dag). then you dont limit the asset types you will retrieve/load from `getassetinhierarchy` so the bundle you might get back could be a different length and even type. furthermore you `assert` and not fail gracefully if you dont get same size bundle. then you restore without extra checks. its basically a surefire way to program termination either via `assert` or trying to restore assets from different types. basically the usefulness of this method approaches 0",0,0.664551317691803
512563772,549,Crisspl,2020-10-27T10:12:32Z,"anything, you want to restore pipeline to the level of pipeline layout so you check only those levels but it might turn out that pipelines are incompatible on some lower level (ds layouts for example)",0,0.9910458922386169
512654759,549,devshgraphicsprogramming,2020-10-27T12:34:48Z,"ok, thx",0,0.9213208556175232
512706631,549,Crisspl,2020-10-27T13:49:06Z,never heard of this really,0,0.6095548868179321
472049195,487,devshgraphicsprogramming,2020-08-18T09:37:18Z,"this works wrong. if the cap would be overflown, we always need to remove the oldest value. see here [a link]",0,0.8442193865776062
472050847,487,devshgraphicsprogramming,2020-08-18T09:40:12Z,timestamp can be made redundant (its implicit),0,0.9799128770828247
472063334,487,devshgraphicsprogramming,2020-08-18T10:01:59Z,reserve memory in the `map`,0,0.9928359389305115
472068256,487,devshgraphicsprogramming,2020-08-18T10:10:52Z,"use a `list >`, i use it like that in the `deferredeventhandler` to implement a queue (although i only need forward linked list there). however you need to create your own implementation of a doubly linked list using a pool address allocator such that every node is not dynamically allocated from the heap (its possible that its just enough to implement a custom allocator on top of `pooladdressallocator` and pass that in as a template argument for `list`, but only if `list` calls the allocator to allocate one node at a time). then `unordered_map ` to be the ""skip list"" first you need a `common_peek`: 1) look up the hashmap with key 2) use hashmap's iterator (pointer) to the linked list node when you `peek`: 1) call `common_peek` to find yout node and return node's value when you `get`: 1) call `common_peek` to find your node 2) move the node from its current position in the list to the back 3) return node's value when you `insert` (you assume that user cannot call `insert` twice on the same key): 1) if cache cap has been reached, you call `common_erase` on the front linked list node 2) construct a linked list node out of `key,value` and add it to the back of the list 3) record the iterator (pointer) to that node into the `unordered_map` when you `erase`: 1) get the node by calling `common_peek` 2) call `common_erase` on the found node in `common_erase`: 1) remove node from the linked list 2) look up the node's ""skip link"" in the unordered map and remove it",0,0.994170069694519
472429818,487,Hazardu,2020-08-18T19:28:03Z,"since timestamp is redundant, what is the difference between peek and get?",0,0.9717217087745667
472487021,487,devshgraphicsprogramming,2020-08-18T20:54:04Z,explained on discord,0,0.9783822298049927
480356946,487,devshgraphicsprogramming,2020-08-31T19:39:51Z,"add a pointer/iterator type, so you're not always forced to use `struct snode*` as the pointer type",0,0.9924418926239014
480357640,487,devshgraphicsprogramming,2020-08-31T19:41:15Z,correct layout is [code block] because `value` could be a type with complex alignment requirements (i.e. sse/avx data structure aligned to 16 or 32 bytes or more) and it would create padding inbetween your members,0,0.9944682121276855
480357803,487,devshgraphicsprogramming,2020-08-31T19:41:35Z,did you pull this code off the internet or something?,0,0.9854679703712463
480358727,487,devshgraphicsprogramming,2020-08-31T19:43:32Z,you always want to place the fattest-most-aligned member first... biggest to smallest.,0,0.9807797074317932
480358796,487,Hazardu,2020-08-31T19:43:40Z,no,0,0.8846297860145569
480359038,487,devshgraphicsprogramming,2020-08-31T19:44:12Z,make value a `const value&` then add a move constructor as well as copy assignment and move assignment.,0,0.9940754175186157
480359721,487,devshgraphicsprogramming,2020-08-31T19:45:33Z,"if you take out all the `sizeof(snode)` you will get good alignment, and sequential addresses.",0,0.9661180377006531
480364126,487,devshgraphicsprogramming,2020-08-31T19:54:33Z,"the memory you give to an address allocator is not for storing data.. its for storing internal state, familiarize yourself with `pooladdressallocator::reserved_size`.",0,0.9922146201133728
480366347,487,devshgraphicsprogramming,2020-08-31T19:59:09Z,"you need to explictly call the destructor on the node you're removing, `value` may be a non-trivial type",0,0.9868549108505249
480367234,487,devshgraphicsprogramming,2020-08-31T20:01:01Z,`alloc_addr` gets you an offset into a data store you've created and maintain by yourself.... not a pointer to a data store correct solution would be [code block],0,0.9913193583488464
480367640,487,devshgraphicsprogramming,2020-08-31T20:01:47Z,call it a `fixedcapacitylinkedlist` since it cant be grown over its initial capacity.,0,0.9937987923622131
480368107,487,devshgraphicsprogramming,2020-08-31T20:02:45Z,"i'd define this struct outside in its own header, might be useful on its own",0,0.9907979965209961
483077248,487,devshgraphicsprogramming,2020-09-03T15:43:55Z,make it a `uint32_t`,0,0.9916706085205078
483135302,487,Hazardu,2020-09-03T17:16:24Z,change the `typedef` to `uint32_t` and cast to `snode< >` in every function where its used? isn't that a bit lengthy way to do this?,0,0.9792078137397766
483256110,487,devshgraphicsprogramming,2020-09-03T21:10:43Z,no use the `uint32_t` to index into an array of `snode` owned by the `cfixedcapacitydoublylinkedlist`.,0,0.994807779788971
483931564,487,Hazardu,2020-09-05T09:20:56Z,"i've had quite a bit of trouble find a way to do it in a performance friendly way, checking online yields only a result similar to my own conclusion. indexing a linked list will slow things down. inserting and removing will require a lot more operations, and the action of removing last element and inserting a new one will become `o(2n)`",0,0.6136643886566162
483932217,487,Hazardu,2020-09-05T09:27:36Z,"actually, just o(n), but still bad :hundred_points:",-1,0.9132868051528931
484560648,487,devshgraphicsprogramming,2020-09-07T20:26:02Z,these i want to be addresses not pointers,0,0.9737507700920105
484560688,487,devshgraphicsprogramming,2020-09-07T20:26:19Z,"same here, address not pointer",0,0.9868647456169128
484560840,487,devshgraphicsprogramming,2020-09-07T20:27:18Z,instead of `nullptr` define an `invalid_iterator` (which in this case would be the pool allocator's invalid address),0,0.9942095279693604
484561132,487,devshgraphicsprogramming,2020-09-07T20:29:19Z,"also `p_end` doesn't and shouldn't exist, you should keep `p_back` which is your `p_end->prev`",0,0.9920181632041931
484561347,487,devshgraphicsprogramming,2020-09-07T20:30:38Z,"usually in stl compatible containers ""end"" means one past the container, where as ""back"" is the true last element.. see std::vector and std::array",0,0.9896590113639832
484561499,487,devshgraphicsprogramming,2020-09-07T20:31:39Z,no that's still not how it works! reserved space is for the allocator internal state. you need to create a separate array of `snode[cap]`,0,0.5102953314781189
484561642,487,devshgraphicsprogramming,2020-09-07T20:32:37Z,"it seems like your `p_end` functions like a `p_back`, if so, rename it.",0,0.993765115737915
484561813,487,devshgraphicsprogramming,2020-09-07T20:33:43Z,nope.. `node->~snode();` delete is a call to system's `free()`,0,0.986513078212738
484561976,487,devshgraphicsprogramming,2020-09-07T20:34:47Z,what about the `node->next->prev` and `node->prev->next` ? you break the chain at `node` !,0,0.9868256449699402
484563227,487,devshgraphicsprogramming,2020-09-07T20:42:31Z,"first allocate the reserved space, [code block]",0,0.9921172261238098
484563294,487,devshgraphicsprogramming,2020-09-07T20:42:54Z,"first allocate the reserved space, [code block]",0,0.9921172261238098
484563371,487,devshgraphicsprogramming,2020-09-07T20:43:26Z,"first allocate the reserved space, [code block]",0,0.9921172261238098
484563527,487,devshgraphicsprogramming,2020-09-07T20:44:19Z,"then you can construct the allocator [code block] the `reservedspace` is required to be avialable at alocator construction time because internal state gets set up immediately! p.s. you've `malloc`ed the reserved space, but where is the `free` (or better `_irr_aligned_free` ) ?",0,0.9629262089729309
484563867,487,devshgraphicsprogramming,2020-09-07T20:46:32Z,the actualy storage for the `snode`s is yet another array you have to create for yourself.,0,0.984035313129425
486173945,487,devshgraphicsprogramming,2020-09-10T08:51:19Z,init the `prev` and `next` to invalid address,0,0.9917433857917786
486174393,487,devshgraphicsprogramming,2020-09-10T08:51:59Z,irr_static_inline_constexpr,0,0.9689334034919739
486175977,487,devshgraphicsprogramming,2020-09-10T08:54:39Z,what is `m_end` ?,0,0.9931681156158447
486176146,487,devshgraphicsprogramming,2020-09-10T08:54:53Z,facepalm,0,0.9238436818122864
486176571,487,devshgraphicsprogramming,2020-09-10T08:55:33Z,make this an r-value reference,0,0.9903601408004761
486176673,487,devshgraphicsprogramming,2020-09-10T08:55:43Z,std::move the val,0,0.9846987128257751
486177066,487,devshgraphicsprogramming,2020-09-10T08:56:29Z,this line shouldn't be needed.,0,0.957248866558075
486177332,487,devshgraphicsprogramming,2020-09-10T08:56:55Z,`m_begin = addr;`,0,0.9910138249397278
486178064,487,devshgraphicsprogramming,2020-09-10T08:58:07Z,"also you cant just use `m_end->` and `m_begin->` , you'd need to implement a tiny allocator wrapper struct over the `uint32_t` to be able to do that.... or just use `m_array[m_end].` instead.",0,0.9932448267936707
486178421,487,devshgraphicsprogramming,2020-09-10T08:58:41Z,this needs to return a pointer to snode not an address,0,0.9876318573951721
486178783,487,devshgraphicsprogramming,2020-09-10T08:59:12Z,no point for a reference of a type that's less than or equal 8 bytes,0,0.9780299663543701
486179407,487,devshgraphicsprogramming,2020-09-10T09:00:08Z,"you dont use placement new, also reserved space does not overlap with data storage!",0,0.9512579441070557
486181851,487,devshgraphicsprogramming,2020-09-10T09:04:07Z,"you need the reserved space to be available to the allocator from the start, wrong order of initialization!",-1,0.5173565149307251
491482525,487,devshgraphicsprogramming,2020-09-19T18:50:49Z,take the value from the address allocator or pass it through somehow,0,0.9934940934181213
495599855,487,devshgraphicsprogramming,2020-09-27T18:16:58Z,this needs to come from the address allocator `invalid_address` constexpr (we plan to change from `0deadbeefu` eventually),0,0.9949290752410889
495600046,487,devshgraphicsprogramming,2020-09-27T18:19:31Z,i'd rather use `m_array+m_begin` notation instead of `&(m_array[m_begin])`,0,0.9924260377883911
495600245,487,devshgraphicsprogramming,2020-09-27T18:21:20Z,"you call `delete []` here... because you used array new! (otherwise the destructors of the nodes never get called, also its bad c++ practice and asan will scream at you)",-1,0.7547343969345093
495600327,487,devshgraphicsprogramming,2020-09-27T18:22:30Z,"if you don't intend to call destructors automatically, you should not use`new []` in the first place.",0,0.991072952747345
495600696,487,devshgraphicsprogramming,2020-09-27T18:26:37Z,you need to call the destructor on the memory of the back node you've just deallocated.,0,0.9909396171569824
495600749,487,devshgraphicsprogramming,2020-09-27T18:27:12Z,"that's absolutely not how it works, do a proper placement new!",0,0.6895439624786377
495601327,487,devshgraphicsprogramming,2020-09-27T18:33:26Z,`snode * node = new(mydatastore+addr) snode (val);`,0,0.9928615689277649
495601463,487,devshgraphicsprogramming,2020-09-27T18:34:58Z,"this needs to happen, as in the other erase",0,0.9838854074478149
495601478,487,devshgraphicsprogramming,2020-09-27T18:35:11Z,define the destructor.,0,0.9843346476554871
495601602,487,devshgraphicsprogramming,2020-09-27T18:36:08Z,also protect against invalid addr,0,0.9700342416763306
495603720,487,devshgraphicsprogramming,2020-09-27T18:58:27Z,typo.,0,0.9696038365364075
495603851,487,devshgraphicsprogramming,2020-09-27T18:59:54Z,erm what about the `prev` of the old `m_begin` node?,0,0.9921750426292419
495604147,487,devshgraphicsprogramming,2020-09-27T19:03:09Z,"but you'd need to call the destructors for all nodes that were still allocated at the time of the destructor of the double linked list (you can abuse knowledge of the pool allocator internal state, it actually keeps a stack of all ""free"" addresses in its reserved memory, you can sort that stack and iterate through the whole address space skipping the destructor call on the ""free"" addresses) it will be o(nlogn) or o(n) for the sort of free list, then just o(n) to walk the list and skip addresses.",0,0.9872390627861023
495605059,487,devshgraphicsprogramming,2020-09-27T19:12:55Z,"return the dereferenced found iterator, this `operator[]` will trigger yet another search that you don't need.",0,0.9912309646606445
495605060,487,devshgraphicsprogramming,2020-09-27T19:12:56Z,"why do you need the `key` to live both in the linked list and the unordered map? i know i gave a such example but it seems not necessary to duplicate it, , your opinion?",0,0.976314127445221
495605135,487,devshgraphicsprogramming,2020-09-27T19:13:41Z,make a `const` qualifier overload as well,0,0.9939917922019958
495605298,487,devshgraphicsprogramming,2020-09-27T19:15:28Z,mostly why does the key live in the linked list?,0,0.9896989464759827
495605492,487,devshgraphicsprogramming,2020-09-27T19:17:25Z,"use insert with a iterator hint, the insert might be faster.",0,0.9834542274475098
495605740,487,devshgraphicsprogramming,2020-09-27T19:20:10Z,shouldn't this be `common_erase` or something?,0,0.993130624294281
495605811,487,devshgraphicsprogramming,2020-09-27T19:20:55Z,you only need to swap the value.,0,0.9782499670982361
495605915,487,devshgraphicsprogramming,2020-09-27T19:22:09Z,"`value` should be always an ""r-value"", there should probably be two overloads of this method for a `const key&` and a `key&&`",0,0.9938196539878845
496173760,487,devshgraphicsprogramming,2020-09-28T19:11:39Z,"dont duplicate code, if you have a override with slightly different reference types, then pass through appropriately to a ""master implemenetation"".",0,0.9823306798934937
496174783,487,devshgraphicsprogramming,2020-09-28T19:13:39Z,"peek should be `const` qualified, and so its argument",0,0.9939864873886108
496175998,487,devshgraphicsprogramming,2020-09-28T19:16:00Z,"comment doesnt match behaviour, update the comment.",0,0.9670157432556152
496176256,487,devshgraphicsprogramming,2020-09-28T19:16:32Z,"return by reference, not by value.",0,0.988214373588562
496176389,487,devshgraphicsprogramming,2020-09-28T19:16:45Z,return by reference not by value,0,0.9896695017814636
496176508,487,devshgraphicsprogramming,2020-09-28T19:17:04Z,also const and non-const reference return value overloads,0,0.9926317930221558
496176527,487,devshgraphicsprogramming,2020-09-28T19:17:07Z,also const and non-const overloads,0,0.9917681217193604
496177129,487,devshgraphicsprogramming,2020-09-28T19:18:17Z,`common_erase` ?,0,0.9914447665214539
496178310,487,devshgraphicsprogramming,2020-09-28T19:20:30Z,p.s. example i gave [a link],0,0.9817742109298706
496191387,487,devshgraphicsprogramming,2020-09-28T19:45:46Z,"it would be possible to only have one copy of `key`, it would need a bit of a hack. you'd need to change `unordered_map ` to `unordered_set , equalswrapper >` then you'd reserve the `invalid_iterator` to mean ""input key to the function"" (making a huge assertion here that `m_shortcut_map` can never contain `invalid_iterator`). what would happen is that you could define your own `struct hashwrapper` and `struct equalswrapper` which thanks to c++11 could actually be made stateful and store the reference to the `m_list`, as well as `const key* invalid_iterator_key;` and `std::size_t invalid_iterator_hash;`, you'd construct the wrappers in the constructor of `lrucache` and pass them into the constructor of `m_shortcut_map`. then whenever you call `m_shortcut_map.find`, you'd first set the pointer to `invalid_iterator_key` and compute the `invalid_iterator_hash` for the stateful wrappers. then whenever the `operator()` of either the hash or equals gets called: - if the value is `invalid_iterator` return the relevant state's hash or use the state's pointer for the `operator==` - if the value is not `invalid_iterator` then fetch the relevant node from `m_list` use it's pair's `key` member for hash or compare",0,0.9823593497276306
496192758,487,Hazardu,2020-09-28T19:48:29Z,yep,0,0.8459084630012512
499151178,487,Hazardu,2020-10-03T14:12:18Z,was assigned 9 lines above,0,0.9878966808319092
499178524,487,Hazardu,2020-10-03T20:15:19Z,i hope i got this right in the next commit,0,0.9554342031478882
499191067,487,devshgraphicsprogramming,2020-10-03T23:43:46Z,todo.,0,0.9295810461044312
499191135,487,devshgraphicsprogramming,2020-10-03T23:45:01Z,its a const pointer that should be returned,0,0.9900214076042175
499191179,487,devshgraphicsprogramming,2020-10-03T23:45:49Z,waiting on that `common_delete` or something.,0,0.9809696674346924
499191233,487,devshgraphicsprogramming,2020-10-03T23:46:36Z,waiting on that common_delete or something.,0,0.9692334532737732
499191368,487,devshgraphicsprogramming,2020-10-03T23:49:09Z,why are you returning pointers instead of references?,0,0.987893283367157
499191580,487,devshgraphicsprogramming,2020-10-03T23:53:21Z,"todo: i don't like having a duplicate `key` lingering around. also another solution would be to swap out the `key` in unordered map for a `key*` in the `unordered_map` (don't need a weird `unordered_set` anymore) however the hash and equals would still need to be wrapped to dereference the pointer. the `key*` pointer would need to point to the `snode<>.value.first` so its basically almost a duplicate of the `uint32_t` field, at which point we degenerate into the `unordered_set` solution.",0,0.8237171173095703
499226732,487,Hazardu,2020-10-04T09:46:44Z,to be able to return a nullptr,0,0.9796175360679626
499506854,487,Crisspl,2020-10-05T10:45:45Z,"i think you'll have to allocate raw storage and create `snode`s with placement-new, just like std vector does. otherwise you're unable to store not-default-constructible types",0,0.9716772437095642
499506899,487,Crisspl,2020-10-05T10:45:52Z,?,0,0.9557723999023438
499712603,487,Hazardu,2020-10-05T16:08:57Z,i've changed the lru cache to store `key*` :smiling_face_with_smiling_eyes::thumbs_up:,0,0.9886278510093689
500216035,487,devshgraphicsprogramming,2020-10-06T11:56:56Z,"ah ok, for invalid.",-1,0.8149344325065613
500217605,487,devshgraphicsprogramming,2020-10-06T11:59:33Z,why are `insertat` and `reserveaddress` public?,0,0.9935950636863708
500219146,487,devshgraphicsprogramming,2020-10-06T12:02:17Z,this should have been a malloc/free not a new/delete,0,0.9915870428085327
378544290,422,devshgraphicsprogramming,2020-02-12T22:15:00Z,we can get rid of `parent`,0,0.989107072353363
378555342,422,Crisspl,2020-02-12T22:41:39Z,at all? won't it be needed for vulkan implementation?,0,0.9880993962287903
378893582,422,devshgraphicsprogramming,2020-02-13T14:28:16Z,"nah, ihvs says that they don't care about parents at all.",0,0.9137048125267029
378896291,422,Crisspl,2020-02-13T14:32:30Z,what are ihvs?,0,0.9898990988731384
379173872,422,devshgraphicsprogramming,2020-02-13T23:20:37Z,"don't make a default, let the user create one and pass it around.",0,0.988400936126709
379174483,422,devshgraphicsprogramming,2020-02-13T23:22:36Z,make it a parameter to the functions (also make a parameter struct to these functions of `igpuobjectfromassetconverter` for posteriority),0,0.994679868221283
379174810,422,devshgraphicsprogramming,2020-02-13T23:23:42Z,doesnt this change affect a lot more?,0,0.981342613697052
379175294,422,devshgraphicsprogramming,2020-02-13T23:25:27Z,you're caching the wrong thing here,-1,0.66716468334198
379175536,422,devshgraphicsprogramming,2020-02-13T23:26:09Z,wrong thing to cache,-1,0.6913955807685852
379175755,422,devshgraphicsprogramming,2020-02-13T23:26:49Z,can you cache this compiler?,0,0.9887091517448425
379176634,422,devshgraphicsprogramming,2020-02-13T23:29:36Z,does vulkan have this? if not then only cpu cache should have.,0,0.9913095235824585
379178764,422,devshgraphicsprogramming,2020-02-13T23:35:20Z,independent hardware vendors,0,0.9761902689933777
379218741,422,Crisspl,2020-02-14T02:06:51Z,it does but i changed everything,0,0.8046941161155701
379219034,422,Crisspl,2020-02-14T02:08:20Z,hm?,0,0.9498917460441589
379219154,422,Crisspl,2020-02-14T02:08:54Z,"yea, it has",0,0.6392303109169006
379846388,422,devshgraphicsprogramming,2020-02-15T18:04:59Z,"we shouldn't be caching the spir-v shader, just the hash of the shader instead.",0,0.9866793751716614
379846613,422,Crisspl,2020-02-15T18:09:27Z,"yea, yea, ofc it does. this last param is just wrong approach to something else, doesnt matter, sorry. will rework it today",-1,0.9906651973724365
379847661,422,devshgraphicsprogramming,2020-02-15T18:27:21Z,ok.,0,0.9740158319473267
379848106,422,devshgraphicsprogramming,2020-02-15T18:35:45Z,shouldn't hash be in `copenglshader` the unspecialized one?,0,0.9952983260154724
379848173,422,devshgraphicsprogramming,2020-02-15T18:36:35Z,also the spir-v?,0,0.9935452938079834
379848227,422,devshgraphicsprogramming,2020-02-15T18:37:37Z,that can move to the pipeline since that will hold program objects now.,0,0.9896754622459412
379849516,422,Crisspl,2020-02-15T19:00:58Z,"no, why? unspecialized shader has nothing to do with pipelines + unspecialized shader holds spirv or glsl, while specialized always holds spirv",0,0.9548148512840271
379861064,422,devshgraphicsprogramming,2020-02-15T22:48:41Z,hash of either is fine. are there any mutations that get applied to the glsl after we create an `igpushader` ?,0,0.9867130517959595
379862247,422,devshgraphicsprogramming,2020-02-15T23:20:03Z,why?,0,0.8699262738227844
379862330,422,devshgraphicsprogramming,2020-02-15T23:22:12Z,`const` the `_glnames`,0,0.9936200976371765
379862887,422,devshgraphicsprogramming,2020-02-15T23:35:48Z,"because you're using separable programs, the uniform locations can be precomputed (will be identical for all usages across all threads and pipelines) for a specialized shader (from a single compilation) and ""cached"" inside of the specialized shader",0,0.9946039319038391
379863024,422,devshgraphicsprogramming,2020-02-15T23:40:02Z,shouldn't layout be the key? just like specialization would be?,0,0.9904575347900391
379863092,422,devshgraphicsprogramming,2020-02-15T23:41:26Z,in `irr_debug` assert that,0,0.9930612444877625
379866990,422,Crisspl,2020-02-16T01:03:29Z,"well, yea, like everything. #include resolvements, binding reorders, push constants to uniform translation, specialization constants resolvements",0,0.9541540145874023
379867062,422,Crisspl,2020-02-16T01:05:47Z,no because there's no way to make an operator< for it,0,0.9408640265464783
379918481,422,devshgraphicsprogramming,2020-02-16T17:16:24Z,that's on the glsl generated from spir-v. but yeah i remember the run-time extension `include`s,0,0.9807021021842957
379923129,422,devshgraphicsprogramming,2020-02-16T18:28:06Z,layout should be in the key though? since we want to get the full driver dependent shader binary (and that depends on glsl generated from spir-v which depends on the layout),0,0.9942078590393066
379923220,422,devshgraphicsprogramming,2020-02-16T18:29:46Z,dont put this in the hot loop (stuttering) actually intialize at the start.,0,0.9209702610969543
379923233,422,devshgraphicsprogramming,2020-02-16T18:30:02Z,same as [a link],0,0.9871845841407776
379923895,422,Crisspl,2020-02-16T18:40:26Z,look in code that actually finds binaries,0,0.982164740562439
379926229,422,devshgraphicsprogramming,2020-02-16T19:17:04Z,"let's invent one (don't actually give it a `operator<` but use a `map` with a custom comparator functor struct. you can treat a layout as a 4d vector/array of descriptor layouts, so implement a `<` operator like you would for a 4bit lsb int (first set `<`, then if first set `==` then check second set, and so on) then a `<` function for descriptor layouts could be defined the same as you define a `<` operator for an `std::array`",0,0.9905345439910889
379926853,422,devshgraphicsprogramming,2020-02-16T19:26:19Z,"use a single-threaded cache, and mutex the shit out of the pipeline, just using a thread-safe cache won't make the member functions of the owner safe to call from multiple threads.",-1,0.5775696635246277
379927034,422,devshgraphicsprogramming,2020-02-16T19:29:12Z,its possible to implement a comparator using very similar logic to this: [a link],0,0.9818410277366638
379927656,422,Crisspl,2020-02-16T19:39:10Z,"so u're saying that having let's say layouts a, b,c and knowing relation of compatibility between them i can sort them in some order that will optimize process of searching the one compatible with some another layout d? i don't think so, how would it work? compatibility between layouts a and b says nothing about compatibility a and d",0,0.9380297660827637
379930182,422,Crisspl,2020-02-16T20:18:20Z,"u dont want just a comparator, u want a clearly defined relation",0,0.7095022201538086
379930273,422,Crisspl,2020-02-16T20:19:47Z,why?,0,0.8699262738227844
379930376,422,Crisspl,2020-02-16T20:21:10Z,"hm, ok, i know what u mean, nvm",0,0.8524349927902222
379930650,422,Crisspl,2020-02-16T20:25:12Z,"they're precomputed once for all threads, however u're right that those can be stored in copenglspecializedshader, i'll change it",0,0.9845147132873535
379931081,422,Crisspl,2020-02-16T20:31:24Z,"because `getshaderglnameforctx` might create the gl name and `getuniformlocationsforstage` will need gl name to query locations (ofc locations are cached once queried, but order of those calls are still important for the first time when locations are yet unknown)",0,0.9941328167915344
379931230,422,Crisspl,2020-02-16T20:33:25Z,"not really because copenglspecializedshader holds offsets of ""uniforms""",0,0.9735687375068665
379939607,422,devshgraphicsprogramming,2020-02-16T22:34:42Z,either use `vector` for both or `smart_refctd_dynamic_array`,0,0.993687093257904
379946529,422,devshgraphicsprogramming,2020-02-17T00:10:12Z,"well in order for a spir-v to give you the same glsl shader, the layout needs to be fully compatible, which means that all descriptor sets need to be identically defined. fun fact, how stl implements all algorithms in terms of just `<`: a b: `b compatibility between layouts a and b says nothing about compatibility a and d well compatibility for a shader binding reordering requires full compatibility, so if a and b are compatible for shader x and c is compatible with a or b up to set 4, then c will be compatible as the descriptor set layouts are identically defined. p.s. another way to establish a `<` relation is to first compare shader hash, then specialization info, and then the computed (set,binding) to (type,binding) remappings which could be cached in `copenglpipelinelayout` similarily to precomputed multibind params [a link]",0,0.5746396780014038
379946843,422,devshgraphicsprogramming,2020-02-17T00:14:19Z,"we could just create all the thread's programs (all the duplicates) at once during pipeline creation so we never, ever, stutter during a frame. we should always compile/create at least one shader program upon pipeline creation and hence the uniform locations should be queried at that time and stored in the specialized shader (they will be identical for all following copies). to avoid any hitches during rendering.",0,0.9923145174980164
379946861,422,devshgraphicsprogramming,2020-02-17T00:14:39Z,ok,0,0.8787186145782471
379949301,422,Crisspl,2020-02-17T00:41:58Z,done,0,0.8974218964576721
379949670,422,Crisspl,2020-02-17T00:45:55Z,actually only the 2nd one so u want to create for all threads at once? now pipeline irrbaw objects store binaries and create gl names from it when a thread wants to use the pipeline,0,0.9878673553466797
379949807,422,devshgraphicsprogramming,2020-02-17T00:47:14Z,"there's probably an overhead in creating a new shader even from a binary, so maybe doing all up-front is a better idea.",0,0.983245849609375
379949936,422,devshgraphicsprogramming,2020-02-17T00:48:32Z,what if there are no uniforms at all? will we keep on hitting this?,0,0.7652531862258911
379949970,422,devshgraphicsprogramming,2020-02-17T00:48:50Z,ah nvm its in `compile` so only one hit ever.,0,0.9702739119529724
379951151,422,devshgraphicsprogramming,2020-02-17T00:59:44Z,you're leaking binaries?,0,0.7890346050262451
379951380,422,Crisspl,2020-02-17T01:02:02Z,"no, binaries are stored in smart array. it's in a raw one because of alignment",0,0.9889687299728394
379951423,422,devshgraphicsprogramming,2020-02-17T01:02:26Z,do we always need to make a new array?,0,0.9884907007217407
379951545,422,devshgraphicsprogramming,2020-02-17T01:03:14Z,"make these `std::array`, there's no need for dynamic allocation for arrays we 100% know the upper bound for.",0,0.9834275841712952
379951658,422,Crisspl,2020-02-17T01:04:14Z,so what's the upper bound?,0,0.9907644987106323
379951977,422,Crisspl,2020-02-17T01:07:03Z,"not ever, every time pipeline with this shader is created. yes, we hit every time then. and then it runs 0 iterations loop so whatever",0,0.8501025438308716
380015203,422,devshgraphicsprogramming,2020-02-17T07:18:05Z,argh shit `m_glnames` and `m_uniformssetfortheveryfirsttime` actually needs a dynamic allocation (but you could join the `gluint` and `bool` into a single struct/pair and only have one dynamically allocated array). but `m_shaderbinaries` you only need up to max_stages_per_pipeline (which is your template paramater right now).,-1,0.9677015542984009
380015283,422,devshgraphicsprogramming,2020-02-17T07:18:21Z,"yeah, i realized",0,0.8428544998168945
380193036,422,Crisspl,2020-02-17T13:51:39Z,"not always, this code runs just once. anyway it's no longer there, now locations are stored in copenglspecializedshader",0,0.989081621170044
380225266,422,Crisspl,2020-02-17T14:51:59Z,i dont know what you mean actually,-1,0.8446729779243469
380338490,422,devshgraphicsprogramming,2020-02-17T19:23:40Z,what does `haveuniformsbeeneverset` and `afteruniformsset` do?,0,0.9941297769546509
380345462,422,devshgraphicsprogramming,2020-02-17T19:48:47Z,what did you end-up doing in the end?,0,0.982254683971405
380755945,422,Crisspl,2020-02-18T15:43:57Z,would u prefer it to be cached in copenglspecshader or somehow in pipeline cache?,0,0.9944638609886169
380861306,422,devshgraphicsprogramming,2020-02-18T18:40:49Z,what error did you get withthis?,0,0.9535185694694519
380861760,422,devshgraphicsprogramming,2020-02-18T18:41:43Z,[a link] hmm seems i should check for `cmake_cuda_compiler` before proceeding to enable language,0,0.9665927290916443
381025357,422,devshgraphicsprogramming,2020-02-19T01:08:24Z,"pipeline cache, but in the second map/cache that's only for igpushader",0,0.9919579029083252
381599550,422,Crisspl,2020-02-19T23:06:54Z,former one gets flag and the latter one sets it to false,0,0.9902539849281311
382016254,422,devshgraphicsprogramming,2020-02-20T14:02:07Z,can't the pipeline handle it in `setuniformsimitatingpushconstants` ? also why is `setuniformsimitatingpushconstants` a member of the shader!?,0,0.9933444261550903
382018130,422,devshgraphicsprogramming,2020-02-20T14:05:07Z,maybe make the argument an `icpushader` then the `icpushader` can keep track of its own hash?,0,0.9946558475494385
382019185,422,devshgraphicsprogramming,2020-02-20T14:06:55Z,"wrong assert, should be `!found || !iscompatible(found.layout.get(),_val.layout.get()`",0,0.9878894686698914
382110282,422,Crisspl,2020-02-20T16:25:04Z,"because shader holds ""uniforms' offsets""",0,0.9933401942253113
382111473,422,Crisspl,2020-02-20T16:26:51Z,why? pipeline operates on specialized shaders so why even bother with unspecialized ones?,0,0.8937124013900757
382112193,422,Crisspl,2020-02-20T16:27:58Z,see code of `find()`,0,0.9919894337654114
382118215,422,Crisspl,2020-02-20T16:37:01Z,"""no cuda toolset found""",0,0.9885594248771667
382130932,422,Crisspl,2020-02-20T16:58:01Z,ok i fixed it,0,0.9251788854598999
382277402,422,devshgraphicsprogramming,2020-02-20T21:50:38Z,"it can hold whatever it wants, but since pipelineholds both all the shaders, per-thread shader instances, and these actually hold state in driver's opengl implementation... the pipeline should be setting the uniforms with `setuniformsimitatingpushconstants` as a methdod not the shader",0,0.9901300072669983
382277787,422,devshgraphicsprogramming,2020-02-20T21:51:23Z,but you're findind the parsed spirv of the unspecialized shader right?,0,0.9907298684120178
382278100,422,devshgraphicsprogramming,2020-02-20T21:52:07Z,`find` assumes that `layout` is compatible with the key?,0,0.9952399730682373
382872017,422,devshgraphicsprogramming,2020-02-22T01:21:48Z,?,0,0.9557723999023438
383559173,422,Crisspl,2020-02-24T22:44:14Z,`find` doesnt find anything (returns nullptr) if passed layout is not compatible with any of entries of equal key,0,0.9874381422996521
383559819,422,Crisspl,2020-02-24T22:45:53Z,theres no spirv of unspecialized shader and spirv of specialized shader. theres just spirv. specialized shader is spirv + spec info,0,0.9907504916191101
383833208,422,devshgraphicsprogramming,2020-02-25T11:54:29Z,"well we can compute the hash of spir-v and glsl the same anyway, and make icpushader keep that.",0,0.9914429783821106
383833521,422,devshgraphicsprogramming,2020-02-25T11:55:12Z,what happened in the end?,0,0.9861453771591187
383833693,422,devshgraphicsprogramming,2020-02-25T11:55:35Z,?,0,0.9557723999023438
383843579,422,Crisspl,2020-02-25T12:17:57Z,"copenglpipelinecache caches parsed spir-v and upon gl shader creation tries to find parsed spir-v to use it for faster spirv-cross compiler construction (in order to specialize, reorder bindings and generate final glsl)",0,0.992897629737854
383965889,422,Crisspl,2020-02-25T15:49:23Z,done,0,0.8974218964576721
384030272,422,devshgraphicsprogramming,2020-02-25T17:46:37Z,"i'd compare the opengl multibind arguments here instead, cause after all you only care if the bindings got remapped the same to opengl slots (which means that as you iterate through the `(set,binding)` tuples of both layouts, do all 4 running total counts of ubo, ssbo, texture and image stay the same?) but i guess that can be left as a todo in the comment, since this seems to be ""good enough""",0,0.9365575313568115
385869603,422,devshgraphicsprogramming,2020-02-28T19:04:11Z,"cmon guys, you know i hate constant literals.",-1,0.9913768768310547
297751222,333,devshgraphicsprogramming,2019-06-26T16:11:19Z,"you're not returning reflectance, this returns ior when not using texture?",0,0.9822925925254822
297751940,333,devshgraphicsprogramming,2019-06-26T16:13:03Z,!?,-1,0.8082060217857361
297755003,333,Crisspl,2019-06-26T16:20:30Z,hm?,0,0.9498917460441589
297755260,333,Crisspl,2019-06-26T16:21:04Z,"yea, there's a comment in code you commented below",0,0.9808943867683411
297766475,333,devshgraphicsprogramming,2019-06-26T16:48:28Z,what is going on here?,0,0.9745950102806091
297766665,333,devshgraphicsprogramming,2019-06-26T16:48:53Z,so why is it named like that?,0,0.9901414513587952
297799393,333,Crisspl,2019-06-26T18:07:57Z,well i had to name it somehow and choose between the two,0,0.9759117960929871
297800274,333,Crisspl,2019-06-26T18:10:12Z,"real ior is got in different way depending on whether it comes from texture or constant. and this code is generated in inline lambda (so that i don't have to create extra string for this code, imo it's more legible this way)",0,0.9545707106590271
298714977,333,devshgraphicsprogramming,2019-06-28T19:03:19Z,shouldn't you factor this out to engine core in `video` namespace?,0,0.9942532181739807
298715168,333,devshgraphicsprogramming,2019-06-28T19:04:01Z,you need a choice (argument to the function) whether this will simulate repeating heightfield (`etc_repeat`) or not,0,0.994390070438385
298715523,333,devshgraphicsprogramming,2019-06-28T19:05:23Z,"i think you're forgetting a `ceilf` after the `log2`, and a +1 for the numer of mipmaps see the source of `copengltexture`",0,0.9926152229309082
298715645,333,devshgraphicsprogramming,2019-06-28T19:05:45Z,"if this is going to be in engine core, then you can build-in the shader",0,0.9924410581588745
298715731,333,devshgraphicsprogramming,2019-06-28T19:06:06Z,acceptable,0,0.938209056854248
298715907,333,devshgraphicsprogramming,2019-06-28T19:06:43Z,you can use the multibind with `nullptr` to unbind,0,0.9945064187049866
298716201,333,devshgraphicsprogramming,2019-06-28T19:07:40Z,does it?,0,0.9764822125434875
299662804,333,devshgraphicsprogramming,2019-07-02T20:07:24Z,those 4 are redundant computation,0,0.7227128744125366
299662956,333,devshgraphicsprogramming,2019-07-02T20:07:51Z,what is the 0.5 here for?,0,0.9936370849609375
299663349,333,devshgraphicsprogramming,2019-07-02T20:08:58Z,"why is max(,0.0) here?",0,0.9898923635482788
299664526,333,devshgraphicsprogramming,2019-07-02T20:12:16Z,put the 0.5 in `ggxsmithheightcorrelated_wo_numerator`,0,0.9947846531867981
299667800,333,devshgraphicsprogramming,2019-07-02T20:21:31Z,why clamp?,0,0.9154001474380493
299670409,333,devshgraphicsprogramming,2019-07-02T20:28:17Z,0.5,0,0.9798235893249512
299670451,333,devshgraphicsprogramming,2019-07-02T20:28:22Z,0.5,0,0.9798235893249512
299670481,333,devshgraphicsprogramming,2019-07-02T20:28:28Z,0.5,0,0.9798235893249512
299676537,333,devshgraphicsprogramming,2019-07-02T20:44:43Z,"optimize this, you already calculate the inverseqsrt of `rellightposlen2` above!",0,0.9786383509635925
299677078,333,devshgraphicsprogramming,2019-07-02T20:46:12Z,"no `max` necessary, its impossible to have a view vector at an obtuse angle to the half vector! assuming normalized v and l h = (v+l)/positive_divisor vdoth = (1+vdotl)/positive_divisor vdotl >= -1.0 imply vdoth >=0.0",0,0.9569821357727051
299684798,333,devshgraphicsprogramming,2019-07-02T21:06:26Z,this is correct,0,0.9699544310569763
299685427,333,devshgraphicsprogramming,2019-07-02T21:08:15Z,"don't use isinf, use `<flt_max` and swap the order of arguments in the `mix`",0,0.9935261011123657
299693157,333,devshgraphicsprogramming,2019-07-02T21:30:17Z,"although i would pass `a2` and `anisotropy` (`uanisotropy`) to this function. this way you could optimize the computation like this [code block] double check this, but it would be nice because no sqrt needed",0,0.8720300197601318
299698554,333,devshgraphicsprogramming,2019-07-02T21:47:00Z,it needs to check for `a2*(1.0-uanisotropy)`,0,0.9946659803390503
299698823,333,devshgraphicsprogramming,2019-07-02T21:47:46Z,see my comment about the ndf,0,0.9802122116088867
299700834,333,devshgraphicsprogramming,2019-07-02T21:53:55Z,that happens in your derivative mapping code,0,0.9913621544837952
299701765,333,devshgraphicsprogramming,2019-07-02T21:56:55Z,"because of texture warping on curved surfaces you can bet on tbn not being an orthogonal frame. this will fuck up all the lighting computation that needs to know about tangents. so maybe make `vec3 b = cross(n,t);` (don't normalize, its redundant)",0,0.8794647455215454
300067578,333,devshgraphicsprogramming,2019-07-03T17:07:51Z,we need fresnel diffuse multiscatter constant polynomial approximation in terms of `t1`,0,0.992616593837738
300475081,333,devshgraphicsprogramming,2019-07-04T17:55:44Z,why still clamp `ndotv` ?,0,0.9876992702484131
300475144,333,devshgraphicsprogramming,2019-07-04T17:56:10Z,are you going to use those identities?,0,0.9898894429206848
300475439,333,devshgraphicsprogramming,2019-07-04T17:58:01Z,you know you could just do this whole function in `vec3` then if someone wants the `float` version then they just put `.x` at the end ;) also call it `calcdiffusefresnelcorrectionfactor`,1,0.8675616383552551
300475595,333,devshgraphicsprogramming,2019-07-04T17:58:55Z,why did you feel the need to pack the texture coord derivatives in a vec4 ?,0,0.9842216968536377
300475771,333,devshgraphicsprogramming,2019-07-04T18:00:00Z,wanna try ?,0,0.9707613587379456
300479391,333,devshgraphicsprogramming,2019-07-04T18:26:21Z,?,0,0.9557723999023438
300479593,333,devshgraphicsprogramming,2019-07-04T18:28:06Z,"i think its best to put the shared memory barrier in, i've read the vulkan memory model appendix and i think execution synchronisation and availability+visibility of writes are two separate things (although visibility/availability requires execution synch)",0,0.964655876159668
300479654,333,devshgraphicsprogramming,2019-07-04T18:28:29Z,?,0,0.9557723999023438
300479697,333,devshgraphicsprogramming,2019-07-04T18:28:50Z,?,0,0.9557723999023438
300485101,333,Crisspl,2019-07-04T19:10:12Z,"they were in use until i needed tdoth or bdoth (so now i need h and not only n,v dots with h)",0,0.9852486252784729
300485279,333,Crisspl,2019-07-04T19:11:32Z,i cant because theres branch and i have no guarantee all of them will be on the same side of 1,0,0.6225069761276245
300485307,333,Crisspl,2019-07-04T19:11:44Z,less parameters,0,0.9328513741493225
300501561,333,devshgraphicsprogramming,2019-07-04T21:28:42Z,"its confusing, also it won't help anything.",-1,0.9766440987586975
300501687,333,devshgraphicsprogramming,2019-07-04T21:29:47Z,"ok, but put cerberus mesh+textures into media repo",0,0.9823840856552124
300507474,333,devshgraphicsprogramming,2019-07-04T22:51:56Z,"for such short functions you should aim for branchless (every branch generates at least 3 instructions + each branch could be executed, a mask generates 1), also you have eta2 laying around (by necessity you alwasy have it, so use it). yes div is hundreds of cycles, but i'm hoping for a reciprocal instruction to be generated. here's an implementation (check it) [code block]",0,0.9267917275428772
300509264,333,devshgraphicsprogramming,2019-07-04T23:23:09Z,"any vector, lets call it `k` can have `kdoth` calculated from identities dot(k,h) = dot(k,l+v)/length(l+v) = (dot(k,l)+dot(k,v))*lplusv_rcplen = (kdotl+kdotv)*lplusv_rcplen you actually happen to have all tdotv,tdotl,bdotb,bdotl needed",0,0.9722129106521606
310353634,333,devshgraphicsprogramming,2019-08-03T14:40:37Z,?,0,0.9557723999023438
310353652,333,devshgraphicsprogramming,2019-08-03T14:41:27Z,did our discord convo resolve this question for you or not?,0,0.9926597476005554
310357195,333,devshgraphicsprogramming,2019-08-03T16:58:04Z,?,0,0.9557723999023438
310357203,333,devshgraphicsprogramming,2019-08-03T16:58:13Z,?,0,0.9557723999023438
310357210,333,devshgraphicsprogramming,2019-08-03T16:58:22Z,?,0,0.9557723999023438
310357215,333,devshgraphicsprogramming,2019-08-03T16:58:31Z,?,0,0.9557723999023438
310357222,333,devshgraphicsprogramming,2019-08-03T16:58:40Z,?,0,0.9557723999023438
310357230,333,devshgraphicsprogramming,2019-08-03T16:58:49Z,?,0,0.9557723999023438
310359475,333,Crisspl,2019-08-03T18:29:33Z,"not there already, resolved",0,0.9877554774284363
310359706,333,Crisspl,2019-08-03T18:37:48Z,what do you mean by build-in? if it's gonna be in engine core then i think it must be in its own class so that shader program can be deleted in the class's destructor,0,0.9930663108825684
310359836,333,Crisspl,2019-08-03T18:42:07Z,"i remember that while you were reading vulkan spec some long time ago you found out that exec barrier implies memory barrier, you tried it out and it was working and saving quite nice % of performance. so i take it it's not true, at lest in opengl?",1,0.5514119863510132
310364528,333,Crisspl,2019-08-03T22:28:41Z,resolved,0,0.964900553226471
310364529,333,Crisspl,2019-08-03T22:28:53Z,resloved,0,0.9728860855102539
310364534,333,Crisspl,2019-08-03T22:29:06Z,resolved,0,0.964900553226471
310364536,333,Crisspl,2019-08-03T22:29:17Z,resolved,0,0.964900553226471
310364541,333,Crisspl,2019-08-03T22:29:31Z,resolved,0,0.964900553226471
310364564,333,Crisspl,2019-08-03T22:30:09Z,resolved but give me an answer for the question :),1,0.9203861355781555
310365976,333,Crisspl,2019-08-04T00:05:12Z,left todo i think your code is missing `a2` factor and then it's ok,0,0.9694052934646606
310365984,333,Crisspl,2019-08-04T00:05:42Z,but i'll check again tomorrow to be sure...,0,0.9687384963035583
310382350,333,devshgraphicsprogramming,2019-08-04T11:15:58Z,how does this resolve [a link] ?,0,0.9924436211585999
310382424,333,devshgraphicsprogramming,2019-08-04T11:18:14Z,"noooo.... i read in the vulkan spec that exec barrier implies only exec barrier and memory barrier is needed to ensure transactions are visible and available. ~i did however read that `coherent` qualified variables do not need `memorybarrier` because they are well, coherent.~",-1,0.5864885449409485
310382631,333,devshgraphicsprogramming,2019-08-04T11:24:27Z,"basically `memorybarriershared` < `groupmemorybarrier` < `memorybarrier` also so basically you need both `coherent` and a memory-barrier. unless you are doing *atomic* operations *only* on *coherent* qualified variables, then no memory barrier is necessary.",0,0.9930688142776489
310382662,333,devshgraphicsprogramming,2019-08-04T11:25:28Z,doesn't `float atab = a2*antianiso; //old a2` do the job? my `atab` is your `a2`,0,0.9931118488311768
310382701,333,devshgraphicsprogramming,2019-08-04T11:26:42Z,this sort of thing makes me think we should create a default one in the `ivideodriver` and just do a getter so there are not 10s of the same thing instantiated.,0,0.9734941720962524
310382751,333,devshgraphicsprogramming,2019-08-04T11:27:53Z,"smaterial only has `material_max_textures` slots for now, once we solve #129 #130 we can remove this limit.",0,0.9942123293876648
310402584,333,Crisspl,2019-08-04T20:32:44Z,"no, i meant something different. but seems like it's ok, it doesn't need anything",0,0.8373718857765198
310411961,333,Crisspl,2019-08-05T00:38:26Z,"to do it without sauxcontext, i'd have to create sampler object (in order not to modify texture's state) with pure gl calls, etc, etc.. i have to do it without sauxcontext because i have to bind it to tex unit untouchable by the engine (>=8) and sauxcontext doesnt allow it. any ideas?",0,0.8454238176345825
310412557,333,Crisspl,2019-08-05T00:47:54Z,why do you want `ceil` and not `floor`? + i've just taken the code from `copengl2dtexture`,0,0.988389253616333
310640719,333,devshgraphicsprogramming,2019-08-05T14:43:48Z,why do you have to bind it to a tex unit untouchable by the engine?,0,0.9811007976531982
310642880,333,devshgraphicsprogramming,2019-08-05T14:48:10Z,ah yeah its 1+floor() so ok,0,0.6837249994277954
216014517,143,devshgraphicsprogramming,2018-09-07T16:22:49Z,whats the reason behind not adding multimap and unordered_multimap to the is_assoc_container true set?,0,0.992299497127533
216014980,143,devshgraphicsprogramming,2018-09-07T16:24:37Z,is this doing anything?,0,0.9382384419441223
216015172,143,devshgraphicsprogramming,2018-09-07T16:25:18Z,remember about the force_ebo macro (otherwise empty base optimization wont happen for msvc),0,0.9928786158561707
216016016,143,devshgraphicsprogramming,2018-09-07T16:28:27Z,do you know about the c++11 constructor inheritance? [code block],0,0.9935051202774048
216019010,143,devshgraphicsprogramming,2018-09-07T16:39:23Z,"i don't understand this, why is a null `second` invalid? reference: [a link] [a link]",0,0.789231538772583
216043987,143,Crisspl,2018-09-07T18:10:34Z,because it doesn't matter `cpreinsertionverifier<>::verify()` for multicaches always returns `true` disregarding container type. but i'll add them just for logic sense.,0,0.9928297400474548
216044197,143,Crisspl,2018-09-07T18:11:22Z,"seems like nope, i don't remember what it was so.. it's gone",-1,0.8867489695549011
216044539,143,Crisspl,2018-09-07T18:12:25Z,memory layout doesn't matter here. or do you care? i can add if you do,0,0.9628188014030457
216044644,143,Crisspl,2018-09-07T18:12:45Z,"forgot about this, i'll change",0,0.6554974913597107
216044875,143,Crisspl,2018-09-07T18:13:35Z,`second` is `bool` here. it's the pair returned by non-multi assoc container from `std`,0,0.9955044388771057
216077008,143,devshgraphicsprogramming,2018-09-07T20:21:35Z,as a matter of principle we should always enable empty base optimization on empty structs and classes,0,0.992195725440979
216456890,143,devshgraphicsprogramming,2018-09-10T20:13:09Z,what are the limitations to using non-pointer types? (as well as pointer types),0,0.9833178520202637
216457282,143,devshgraphicsprogramming,2018-09-10T20:14:32Z,"you have no use for these 2 ""no pointer"" types.",0,0.9710174202919006
216458119,143,devshgraphicsprogramming,2018-09-10T20:17:35Z,a move constructor would require you to zero out or invalidate the input reference. also why not copy and move constructors for the cache base itself?,0,0.9831558465957642
216459243,143,devshgraphicsprogramming,2018-09-10T20:21:26Z,could be a `const typename value_type`,0,0.9936754107475281
216460102,143,devshgraphicsprogramming,2018-09-10T20:24:21Z,"ok i see, it was just a bit hard to read.",0,0.6814325451850891
216471341,143,devshgraphicsprogramming,2018-09-10T21:00:50Z,single cache `insert` only returns a `bool` how is this overload/specialization going to work? have you tested this with the different container types? (even instantiation?),0,0.9932854175567627
216471991,143,devshgraphicsprogramming,2018-09-10T21:03:14Z,this silly macro impacts readability,-1,0.9374570846557617
216474665,143,devshgraphicsprogramming,2018-09-10T21:11:53Z,"this template paramter name is misleading, i think you meant `isnotvectorbased`",0,0.9462721347808838
216475306,143,devshgraphicsprogramming,2018-09-10T21:14:20Z,"how does your compiler like the fact that you are calling `findrange_internal`, a function without a `const` qualifier? because gcc sure-as-hell won't like it.",0,0.8335991501808167
216475578,143,devshgraphicsprogramming,2018-09-10T21:15:24Z,although if you made the internal function a `static` and take the container as a parameter then you'd be safe,0,0.9873079657554626
216475833,143,devshgraphicsprogramming,2018-09-10T21:16:22Z,"again misleading parameter name, either use `isnonvectorbased` or `isassociativecontainer`",0,0.9612905979156494
216477514,143,devshgraphicsprogramming,2018-09-10T21:22:30Z,i think we need to modify `_outrange->second` so that the final `_outrange` is a valid range and can be used normally,0,0.9891993999481201
216477974,143,devshgraphicsprogramming,2018-09-10T21:24:18Z,now that's a well named template parameter,0,0.9694305062294006
216478288,143,devshgraphicsprogramming,2018-09-10T21:25:30Z,why `lower_bound` and not `find` or whatever built-in function it has ?,0,0.9929357171058655
216479375,143,devshgraphicsprogramming,2018-09-10T21:29:45Z,if you retuned std::end() for first and second then any function under a lock (or single threaded) would not have to use `isnonzerorange` to determine if valid range was found,0,0.9943974018096924
216480378,143,devshgraphicsprogramming,2018-09-10T21:33:38Z,see my general comment about checking ranges,0,0.9787086844444275
216480911,143,devshgraphicsprogramming,2018-09-10T21:35:37Z,see my general comment about `isnonzerorange`,0,0.9912986159324646
216481004,143,devshgraphicsprogramming,2018-09-10T21:35:56Z,see my general comment about `isnonzerorange`,0,0.9912986159324646
216507667,143,Crisspl,2018-09-10T23:39:08Z,"i have, a line below. readability purposes",0,0.9343244433403015
216508069,143,Crisspl,2018-09-10T23:41:51Z,"that's why i use `std::move`. so `std::function` takes care of that sorry, i don't understand what you're asking for",-1,0.976344108581543
216508232,143,Crisspl,2018-09-10T23:42:50Z,"no, it'd be `t* const` and i want `const t*`",0,0.9910934567451477
216508490,143,Crisspl,2018-09-10T23:44:33Z,see all specializations of `cpreinserionverifier`. it's not the one that is used in case you're talking about,0,0.9919547438621521
216508614,143,Crisspl,2018-09-10T23:45:15Z,"ok, i'll remove but imo it's exactly the opposite",0,0.9482411742210388
216509107,143,Crisspl,2018-09-10T23:48:38Z,"i meant ""is multimal or unordered_multimap"". isnotvectorbased would be misleading here because it doesn't tell that only ""multi"" containers are allowed here (and vector)",0,0.9576983451843262
216509344,143,Crisspl,2018-09-10T23:50:06Z,that's a bug. compiler didn't compile the const variant of function and so didn't give an error while testing. i'll fix as you proposed with static,-1,0.6613009572029114
216509486,143,Crisspl,2018-09-10T23:50:52Z,see my answer to the comment about the same thing,0,0.970892608165741
216509579,143,Crisspl,2018-09-10T23:51:28Z,"i don't understand. also what means ""normally""?",-1,0.60220867395401
216509716,143,Crisspl,2018-09-10T23:52:16Z,will check tomorrow. now i'm writing from a phone,0,0.9815570116043091
216510361,143,Crisspl,2018-09-10T23:56:05Z,but it wouldn't give any information where to put new element/relation between contents of cache and elent being inserted. `findrange` is used also in functions where insertions happens,0,0.9939238429069519
216592295,143,devshgraphicsprogramming,2018-09-11T08:52:12Z,"granted, we could do the following as a replacement to `valuetype_ptrtoconst_impl` [code block] this would leverage sfinae to handle non-pointer cached object types p.s. right now non-ptr objects will fail because they won't be able to instantiate the `noptrvaluetype_impl` and `valuetype_ptrtoconst_impl` aliases.",0,0.9953687191009521
216641302,143,Crisspl,2018-09-11T11:55:35Z,"non-pointers will fail because that's how cache is designed and it's also made sure by `static_assert`. also i'm not sure if you understand how it is. cache's template parameter takes any type, it doesn't have to be pointer type! but underlaying container **always** contains pointer type (and so `valuetype_impl` typedef is always pointer type) which is quite obvious since it's a cache and not a regular container and i believe that's why you initially asked for cache as container for pointers. example code: [code block]",0,0.9480403661727905
216664114,143,devshgraphicsprogramming,2018-09-11T13:15:38Z,and?,0,0.9768803119659424
216664192,143,devshgraphicsprogramming,2018-09-11T13:15:54Z,ok i guess thats fine with using != for isnonzerorange,0,0.8942029476165771
216665451,143,devshgraphicsprogramming,2018-09-11T13:20:05Z,"damn... i thought i would instantiate the cache as `core::cconcurrentobjectcache ` its not required for the cache to work on all types, but i thought if it could be achieved through changing a single line of code, then it should be done.",-1,0.958832859992981
216666544,143,Crisspl,2018-09-11T13:23:15Z,"well, it already works on all types. that's why we have customizable greet and dispose functions",0,0.9861590266227722
216666860,143,Crisspl,2018-09-11T13:24:14Z,"also thanks to nature of containing just pointers we don't even care about copyable, moveable etc.",0,0.968867838382721
216668323,143,Crisspl,2018-09-11T13:28:51Z,"well, seems like ""just because"". what's the differenece anyway",0,0.9821826815605164
216683842,143,Crisspl,2018-09-11T14:10:33Z,also that's why there's two typedefs: `cachedtype` (public) and `valuetype_impl` (private),0,0.9944196343421936
216711072,143,devshgraphicsprogramming,2018-09-11T15:23:10Z,fair enough i see its too much work to support all types.,-1,0.9085134267807007
310383270,341,devshgraphicsprogramming,2019-08-04T11:40:46Z,"get the transforms from the camera, and not the driver... also refactor into an extension like i told you on discord, then there is absolutely no problem with history tracking",0,0.9184299111366272
310384978,341,devshgraphicsprogramming,2019-08-04T12:27:53Z,"apply jitter onto the camera proj matrix before it `render`s or `drawall` is called, that will make all matrices consistent (all combos of proj matrix) also right now you're not rendering with the jitter! secondly you've hardcoded the `jitter_offsets` to have the window resolution inside, it would be far better to have them [0,1)^2 pixel footprint relative sobol or halton samples (or standard vulkan msaa pattern sequence) that are later expanded to viewport resolution (not render target resolution, but active viewport resolution). furthermore your offsets are miscalculated because ndc is in [-1,1]^2 so your jitters need to be in range [-1/res_x,1/res_x]*[-1/res_y,1/res_y], so approximately 2x too small and biased to one side lastly, the matrix concatenation is wrong, there will be a w divide at the end, and that will make the vanishing point at (0,0) ndc, when in-fact for a jittered view, the vanishing point should be at `jitter_offset`. [a link] which means that you also need to modify column 3 to add a `jitter` proportional factor for the viewspace z component, so the vanishing line/point stays the same in world coordinates.",0,0.987854540348053
310384996,341,devshgraphicsprogramming,2019-08-04T12:28:26Z,for the love of god precompute your fbo attachment combos + use multiple render targets to output velocity + color in one pass!,1,0.9824894666671753
310385023,341,devshgraphicsprogramming,2019-08-04T12:29:15Z,does your taa shader also know the previous frame's jitter offset so it can properly look things up in history buffer?,0,0.9943962097167969
310387078,341,devshgraphicsprogramming,2019-08-04T13:24:52Z,a. we have a full screen triangle extension to use b. we shouldn't be even using that anymore because it should be done in compute shaders,0,0.9869869947433472
310387170,341,devshgraphicsprogramming,2019-08-04T13:27:59Z,"a dot is just a 1x3 and 3x1 matrix transform, if first matrix is 3x3 then you can have rgb to yuv just remember to convert tonemapped srgb -> linear rgb -> linear yuv then do the clipping/clamping in linear yuv",0,0.9905080795288086
310387316,341,devshgraphicsprogramming,2019-08-04T13:31:51Z,"when you use compute, change that to texelfetch",0,0.9928684830665588
310387393,341,devshgraphicsprogramming,2019-08-04T13:33:30Z,"ok but compute the aabb/variance ellipsoid in yuv btw, you can compute a 3x3 covariance matrix, that basically gives an ellipsoid that you can scale up and down and clip against",0,0.9872351288795471
310387464,341,devshgraphicsprogramming,2019-08-04T13:35:28Z,use `texturegather()` you'll get all 2x2 neighbourhood at once (one channel at a time),0,0.9926445484161377
310387676,341,devshgraphicsprogramming,2019-08-04T13:40:03Z,"clamp will shift hue, clip instead.... clip against elipsoid to be even nicer",0,0.946348249912262
310388184,341,devshgraphicsprogramming,2019-08-04T13:52:17Z,"you can clip a line against an ellipsoid quite easily in the special case of a line originating at 0 and an ellipsoid centered at 0 as well. when doing ellipsoid fitting with covariance matrices, you'll have to center the ellipsoid on the mean/average value of your sample set. you just need to find the 3x3 matrix that transforms a unit sphere into your ellipsoid, then find the inverse of that matrix, you transform the direction vector of the line (doesn't matter if normalized) by the inverse matrix, that moves it into the unit sphere space, then if you normalize the transformed vector you clip it! now transform the normalized vector by the matrix that scales a unit sphere into your ellipsoid, and you will get the clipped vector. actually the matrix that makes your unit sphere the elipsoid is the covariance matrix [a link] that's actually how we visuallize the contours of a mixture of gaussians ;) you can look at how the ellipsoid collider in our simple raycast collision code does it. but anyway this is what happens [code block]",0,0.9890045523643494
310388289,341,Crisspl,2019-08-04T13:55:04Z,"don't review outdated sources, it makes no sense",0,0.859735369682312
310388834,341,devshgraphicsprogramming,2019-08-04T14:09:12Z,if you factor it all out then really what is happening is [code block],0,0.9834823608398438
310388879,341,devshgraphicsprogramming,2019-08-04T14:10:22Z,i think inside used a factor of 0.9 or something,0,0.9831356406211853
310388897,341,devshgraphicsprogramming,2019-08-04T14:10:47Z,can you do both tssaa and motion blur combined at the same time?,0,0.9914577603340149
310388945,341,devshgraphicsprogramming,2019-08-04T14:11:47Z,define a fast_transform macro for future use `matrix[0]*vec.x+matrix[1]*vec.x+matrix[2]*vec.x+matrix[3]`,0,0.9919331669807434
310388966,341,devshgraphicsprogramming,2019-08-04T14:12:25Z,"nope, z-divide must happen per pixel (move it to pixel shader and pass `xyw` along).",0,0.9923740029335022
310388987,341,devshgraphicsprogramming,2019-08-04T14:13:00Z,just beware of ndc y direction and texture coordinate y direction (we use vulkan convention),0,0.98014235496521
310389217,341,devshgraphicsprogramming,2019-08-04T14:18:21Z,"waaait, why no filtering when sampling history buffer?",-1,0.5324769020080566
310389300,341,devshgraphicsprogramming,2019-08-04T14:20:07Z,for proper ellipsoid calculate 3x3 covariance matrix (use yuv as xyz for usual machine learning/statistics algorithm) you can probably do some funky simple unrolled algo since you'll only have 4 samples. more here: [a link],0,0.9883049726486206
310389320,341,devshgraphicsprogramming,2019-08-04T14:20:28Z,nice idea.,1,0.9871044158935547
310389340,341,devshgraphicsprogramming,2019-08-04T14:21:16Z,"you will have epic arithmetic, divide by 0 and other errors on interpolation for triangles close to the near plane... this is really needed per pixel",-1,0.9394299983978271
310389474,341,devshgraphicsprogramming,2019-08-04T14:24:52Z,plz plz plz don't hardcode,0,0.9250723719596863
310389550,341,devshgraphicsprogramming,2019-08-04T14:26:42Z,can you do motion blur almost always?,0,0.991949200630188
310390588,341,devshgraphicsprogramming,2019-08-04T14:51:11Z,page 11 [a link] you don't have the shear that maintains the same vanishing point,0,0.9729346036911011
310391812,341,devshgraphicsprogramming,2019-08-04T15:19:31Z,"also page 17 from tiago sousa had a funky idea, but that requires velocity info for both current and previous frame (so current matrix, 1 frame behind, and 2 frames behind). [a link] and obviously to get v_p, you'd need to reproject pixel to previous frame, and then reproject again, then the diff between the reprojections would be v_p",0,0.7219632267951965
310393157,341,devshgraphicsprogramming,2019-08-04T15:56:29Z,yes,0,0.9659429788589478
310393573,341,devshgraphicsprogramming,2019-08-04T16:08:08Z,actually luma weight is used by ue4 + inside did their research and sousa velocity weight didn't work for them that well... but you can try it once you have the basic taa working to see whats best.,0,0.9274673461914062
310393644,341,devshgraphicsprogramming,2019-08-04T16:10:22Z,"use `texelfetch`, offset parameter in `*offset` in glsl has to always be a compile-time constant.",0,0.9944296479225159
310393879,341,devshgraphicsprogramming,2019-08-04T16:17:33Z,refactored to make sure clipping does not project (make vector longer),0,0.9760201573371887
310394057,341,devshgraphicsprogramming,2019-08-04T16:22:25Z,"also these fetches don't make sense, you're getting a cross around the jittered sample right now [code block] do 3 `texturegather`s around the unjittered `texcoords-ujitter` position, then what you're doing will at least have some meaning/semantic (the gathered samples will be from within output pixel's footprint). an even higher level of advancement would be to use `texelfetch` and compute shader 17x17 shared memory with 16x16 workgroups, then you could get 2x2 or even 4x4 (but then 19x19 smem) neighbourhoods for the covariance effortlessly.",0,0.987595796585083
310394150,341,devshgraphicsprogramming,2019-08-04T16:25:53Z,"see brian karis' 2013 temporalaa presentation where he mentions burely07 that box filter does not behave well with moving samples, so for this tap (and this tap only) a pseudo-small-kernel-gaussian 2 wide pixel support reconstruction filter (save bandwidth with shared memory or approximating gaussian with 4=2x2 `texturelodoffset`).",0,0.9923608899116516
310394187,341,devshgraphicsprogramming,2019-08-04T16:26:59Z,"luminance is just y in yuv rep, but you need to find out if they want hdr pre-tonemap, post-tonemap linear or gamma luminance in this weighing scheme.",0,0.9924184083938599
310394237,341,devshgraphicsprogramming,2019-08-04T16:28:38Z,aaand what do you do if `q_uv` is outside the screen?,0,0.961868166923523
310394262,341,devshgraphicsprogramming,2019-08-04T16:29:07Z,see [a link],0,0.9869033098220825
310394344,341,devshgraphicsprogramming,2019-08-04T16:31:00Z,"if you ""fix"" your gather for aabb/covariance samples, then you don't need this tap",0,0.9900583624839783
310394503,341,devshgraphicsprogramming,2019-08-04T16:35:11Z,"totally worth it - see karis temporalaa pptx slide 27 however you can still dilate velocity if you have no velocity texture (which is what we should be striving towards). just when you run your 16x16 wg compute shader, compute velocity for 18x18 tile (1 pixel border) in shared memory, then dilate (run your filter that's z dependant) over the innermost 16x16 samples. basically you'll be making a tiled renderer in software xd.",0,0.6215717196464539
310394597,341,devshgraphicsprogramming,2019-08-04T16:37:48Z,corrected my code listings,-1,0.7277481555938721
310394689,341,devshgraphicsprogramming,2019-08-04T16:40:07Z,if you just nuked the velocity buffer and went with deferred+ ready idea from here [a link] then all of the above would go away and be a non-issue,0,0.9814317226409912
310395152,341,devshgraphicsprogramming,2019-08-04T16:52:29Z,"look here at `a`,`b`,`c` [a link] its a shear",0,0.9911938309669495
310396205,341,devshgraphicsprogramming,2019-08-04T17:21:46Z,i mean like have this extension be a combined tssaa + motion blur,0,0.975031316280365
310396279,341,devshgraphicsprogramming,2019-08-04T17:24:09Z,"ok uncharted and lumberyard car game [a link] used stencil buffer to augment luma weight and color clipping (which should be done in yuv or ycocg), basically if stencil fails then no history sample to be taken (weight = 0.0). something similar could be done not with the stencil buffer, but with objectid buffer, in the far future.",0,0.9834010004997253
310397964,341,devshgraphicsprogramming,2019-08-04T18:13:01Z,filmic temporal supersample aa presentation mentions using a bicubic fast appriximation (catmul-rom 5 tap bilinear thing),0,0.9699012637138367
310398014,341,devshgraphicsprogramming,2019-08-04T18:14:42Z,"filmic temporal supersample aa mentions depth-rejection of certain samples from the neighbourhood for a tighter bound and less ghosting (so you'd be using 1-5 samples, instead of 5 all the time for your old method, and 1-16 in my new method).",0,0.9872603416442871
310398030,341,Crisspl,2019-08-04T18:14:59Z,clamp to edge,0,0.9792332053184509
310398159,341,Crisspl,2019-08-04T18:18:48Z,now its `etft_linear_no_mip` (thats why you shouldnt review outdated code),0,0.9920634627342224
310398256,341,devshgraphicsprogramming,2019-08-04T18:21:32Z,also lots of impl details here [a link],0,0.9621750712394714
310398312,341,devshgraphicsprogramming,2019-08-04T18:23:13Z,i think correct solution would be to never take a history sample into account because its simply not valid,0,0.9695797562599182
310398336,341,Crisspl,2019-08-04T18:23:43Z,"a. it uses full screen triangle b. yea, i'll rewrite it as cs when it goes as irrbaw extension",0,0.9910860657691956
310398390,341,Crisspl,2019-08-04T18:25:06Z,hm why?,0,0.6080778241157532
310398473,341,devshgraphicsprogramming,2019-08-04T18:27:16Z,"ok even according to inside and ke xu [a link] that sequence needs to be halton or sobol, probably halton best.",0,0.9925217032432556
310398507,341,Crisspl,2019-08-04T18:28:03Z,i dont understand. what is output pixel's footprint?,-1,0.8616558313369751
310477259,341,devshgraphicsprogramming,2019-08-05T07:54:09Z,"output pixel `x` and its center + its footprint corners `f`. [code block] jittered pixel center `j` (where sampling, rasterizing and shading occurs) [code block] if you sample the jittered texture at `j-jitter` (which is `j-(j-x)==x`) then you're in the 2x2 patch between jittered samples, `texturegather` will get you 4 samples from jittered texture around the unjittered position.",0,0.9937244057655334
310478095,341,devshgraphicsprogramming,2019-08-05T07:56:19Z,"compute has better performance+scheduling than fullscreen tri, the only time you want to use fs quad is when you want to leverage fast culls like stencil for some weird operation. not to mention that with vulkan if you use compute you can do async compute. finally texelfetch because compute gives you integer grid coordinates, so there's no need for that fp32 inaccuracy?",0,0.9632645845413208
310486202,341,devshgraphicsprogramming,2019-08-05T08:18:15Z,also for reference [a link],0,0.9841926097869873
310490893,341,devshgraphicsprogramming,2019-08-05T08:30:19Z,"also if you're going to use depth-rejection or object id to tighten the neighbourhood bounds, then there needs to be a parameter to turn that off (for scenes with translucent media)",0,0.9926592707633972
310510928,341,devshgraphicsprogramming,2019-08-05T09:19:53Z,"page 26 of [a link] shows variance clipping, which is a more rudimentary approach. if you have full covariance matrix (9 floats) instead of variance (2x3 floats) then you can clip against oriented ellipsoid instead of axis aligned (unoriented) bounding box. now you have a chance for a little bit of original research and contribution to science ;)",1,0.9916079044342041
310516641,341,devshgraphicsprogramming,2019-08-05T09:33:33Z,"for transparents, page 46 [a link] suggests that we pick the motion vector that is essentially ""the most visible"" in the neighbourhood (which i guess wouldn't work as well anymore if all objects are equally opaque, but one could make a heuristic so the motion vector of most-contributing blend is picked for motion blur, and then those vectors are dilated with the whole min-depth filter).",0,0.9909740090370178
310521518,341,devshgraphicsprogramming,2019-08-05T09:45:32Z,"look at pages 50-53 where the variance clipping (with 7x7 gather, not 3x3) makes stochastic transparency work.",0,0.9941258430480957
311756292,341,devshgraphicsprogramming,2019-08-07T20:48:00Z,you also need `onanimate()` that actually calculates the matrices from mouse and keyboard `render()` only sets them in the driver,0,0.9909866452217102
311756811,341,devshgraphicsprogramming,2019-08-07T20:49:26Z,"this one you dont need, you can calc `currpos_ndc` from `gl_fragcoord`",0,0.9885475635528564
311756900,341,devshgraphicsprogramming,2019-08-07T20:49:44Z,"but still, best not to output a velocity buffer at all ;)",1,0.9469114542007446
311757116,341,devshgraphicsprogramming,2019-08-07T20:50:24Z,i would have preferred yuv,0,0.9448561072349548
326900978,373,devshgraphicsprogramming,2019-09-22T13:23:59Z,"not true, iasset is just an adt, so its not an object in itself (cannot be instantiated). but concrete classes (such as icpubuffer, icpumeshbuffer, etc.) derived from `iasset` can be instantiated via `new` or `core::make_smart_refctd_ptr`",0,0.994706928730011
326901029,373,devshgraphicsprogramming,2019-09-22T13:25:11Z,"not a register, wrong word, and its a `uint64_t` just by the way",0,0.8774337768554688
326901054,373,devshgraphicsprogramming,2019-09-22T13:25:57Z,its provided so you know whether the type you're `static_cast`ing to is right,0,0.9896032214164734
326901103,373,devshgraphicsprogramming,2019-09-22T13:27:03Z,if `iasset* asset;` and `asset->gettype()==et_buffer` then you can `static_cast (asset)` safely,0,0.9930878281593323
326901141,373,devshgraphicsprogramming,2019-09-22T13:27:59Z,bundle can only hold an array of assets that are the same type,0,0.9900625348091125
326901155,373,devshgraphicsprogramming,2019-09-22T13:28:27Z,its an sassetbundle not an asset,0,0.9869993329048157
326901179,373,devshgraphicsprogramming,2019-09-22T13:29:12Z,"bundles are indentical if array pointers match, not if contents match (makes dealing with them a lot faster)",0,0.9918739199638367
326901215,373,devshgraphicsprogramming,2019-09-22T13:30:04Z,"not true, the particular assets can be instantiated and filled out by hand. loaders just automate this process and can create assets from ""files"" (or any other resource interfacing as a file).",0,0.9950175881385803
326901511,373,devshgraphicsprogramming,2019-09-22T13:37:04Z,"its a rather weird bitfield, we'd have to explain how the loading process works. basically a mesh can reference a submesh, a submesh can reference a material, a material can reference a texture, etc. if you look at them as recursive functions, the `level` is basically how deep down the stack you are. this flag is a bitfield with 2 bits per level, and the enums provie are just some useful constants. but different combinations are valid as well. example [code block]",-1,0.8784853219985962
326901536,373,devshgraphicsprogramming,2019-09-22T13:37:45Z,"default, if you can find the asset in the previously cached asset, then you will return it and if you cant you will load it and add it to the cache before returning",0,0.9904160499572754
326901591,373,devshgraphicsprogramming,2019-09-22T13:39:09Z,nope it doesn't cpu 2 gpu conversion is in the `video::` namespace,0,0.9815400242805481
326901625,373,devshgraphicsprogramming,2019-09-22T13:40:17Z,"thread safety still has one issue, if you start loading the same asset at the exact same time (they will both check cache and not find anything), you may end up with two copies in the cache.",0,0.9103749394416809
327678691,373,AnastaZIuk,2019-09-24T15:20:29Z,"actually shouldn't it be reinterpret_cast, should it?",0,0.985072910785675
327731651,373,Crisspl,2019-09-24T17:07:47Z,"nah, never use reinterpret_cast unless it's an absolute must",0,0.9714126586914062
327763146,373,devshgraphicsprogramming,2019-09-24T18:15:22Z,`static_cast` works beautifully because it can calculate the relative offset to the pointer accounting for the difference between the start of storage of a base class and a derived class. example [code block] if you print both `base` and `derived` as `%p` you will see that the pointer to derived has been rolled back by 4 bytes. `reinterpret_cast` is only for casting void pointers really.,0,0.9926170706748962
327763553,373,devshgraphicsprogramming,2019-09-24T18:16:18Z,still need a word about that you can create them outside of loaders,0,0.985934317111969
327765949,373,devshgraphicsprogramming,2019-09-24T18:21:46Z,need a description,0,0.9786161780357361
328247091,373,AnastaZIuk,2019-09-25T17:27:15Z,i will cover it soon,0,0.9758763909339905
328248018,373,AnastaZIuk,2019-09-25T17:29:21Z,gonna cover it soon,0,0.9654219150543213
328273646,373,devshgraphicsprogramming,2019-09-25T18:24:47Z,clarify,0,0.9764105677604675
328274807,373,devshgraphicsprogramming,2019-09-25T18:27:23Z,because of external and custom asset loaders we cannot protect a static_cast with a type enum comparison.. this is why we provide a string.,0,0.9879586696624756
328274947,373,AnastaZIuk,2019-09-25T18:27:41Z,"i think it's clear, isn't it?",0,0.9744947552680969
328276665,373,devshgraphicsprogramming,2019-09-25T18:31:29Z,"not necessairly true. it may be desireable to have a cache of gpu objects associated with the cpu objects, while at the same time being able to get rid of the ram overhead for storage of such a cpu object. this function will get rid of as much memory as possible (including references to cpu objects it needs), the only thing that stays is just the pointer and the memory allocated for that pointer (whole class). after this operation we can treat the asset contents as invalid garbage. the default cpu to gpu object converter provided by the engine does this.",0,0.9851614236831665
328277011,373,devshgraphicsprogramming,2019-09-25T18:32:20Z,"""attempts to fetch an asset."" ""certein"" is a typo -> certain",0,0.7350072264671326
328277169,373,devshgraphicsprogramming,2019-09-25T18:32:41Z,rephrase,0,0.9552386999130249
328277480,373,devshgraphicsprogramming,2019-09-25T18:33:22Z,this asset,0,0.9795202016830444
328278309,373,devshgraphicsprogramming,2019-09-25T18:35:20Z,"doesn't need to be converted, there are some functions in the engine which take icpubuffer as a nice way to represent a plain byte array. its used for storage of large arrays, so that storage can be decoupled from other objects such as meshbuffers, images, animations and shader source/bytecode.",0,0.9918854236602783
328278528,373,devshgraphicsprogramming,2019-09-25T18:35:54Z,"""no case in which""",0,0.9881260395050049
328278818,373,devshgraphicsprogramming,2019-09-25T18:36:28Z,compared to an `std::vector<>`,0,0.9931607246398926
328279475,373,devshgraphicsprogramming,2019-09-25T18:37:56Z,"and compared to `std::array` its size can be determined at runtime. as a consequence `sizeof(dynamic_array )` is completely meaningless, and it can only be allocated on the heap and is non-copyable.",0,0.9924995303153992
328280212,373,devshgraphicsprogramming,2019-09-25T18:39:26Z,"the purpose of this class is to compensate for the non-copyability of the base class and allow ""pass by reference"" (shared contents) without memory leaks and going out of scope.",0,0.9902556538581848
328280262,373,AnastaZIuk,2019-09-25T18:39:33Z,"that's why i described that assets are needed as a key, so they cannot be removed entirely",0,0.989373505115509
328291980,373,devshgraphicsprogramming,2019-09-25T19:06:45Z,"yes, but this can be read very wrong... this class method has nothing to do with cpu to gpu object conversion (its needed by the default, but nothing to do with that) its only for getting rid of memory and keeping the pointer alive",-1,0.7885523438453674
328292360,373,devshgraphicsprogramming,2019-09-25T19:07:38Z,the english/grammar is not clear here,0,0.8901790976524353
328294375,373,devshgraphicsprogramming,2019-09-25T19:12:51Z,"meta = above, higher this is for attaching extra data to an asset that the loader retrieved, which are not ubiquitously representable by the engine. these could be but not limited to (note that categories overlap): - global data about the file or scene - ids, names - default view/projection - complex animations and hierarchies - physics simulation data - ai data - lighting - extra material metadata there is total flexibility here, its expected that each loader has its own base metadata class implementing the iassetmetadata interface, with its own type enum that other loader's metadata classes derive from the base. there's no attempt to standardise the metadata, as loaders are so diverse.",0,0.990676760673523
328302568,373,AnastaZIuk,2019-09-25T19:34:25Z,"well, i will move it",0,0.9840943217277527
329347580,373,devshgraphicsprogramming,2019-09-29T10:13:51Z,"the filename argument goes in, the actual resolved path comes out (the override decides how to resolve a local path or even a url into a ""proper"" filename). hierarchy level is more like a stack counter, we expect that that asset loading will get called recursively, example mesh needs material, material needs texture, etc. so `getloadfilename` could be called separately for each dependent resource from deeper recursions in the loading stack.",0,0.9926993250846863
329916156,373,devshgraphicsprogramming,2019-10-01T07:39:17Z,"replace ""arrays operations"" to array indexing",0,0.994193971157074
329916909,373,devshgraphicsprogramming,2019-10-01T07:41:23Z,"its actually necessary to reserve the correct amount of memory when writing to file, ""conservative"" here actually means that the value returned can be greater than memory actually needed. what you've written about is actually a secondary functionality, also, the bigger the asset the more likely it is to be compressed with a more expensive (slower) algorithm (replace the badly formed sentence ending).",0,0.9836914539337158
329917536,373,devshgraphicsprogramming,2019-10-01T07:43:16Z,"its important to note that not every writer supports all these flags and may just silently drop them when writing (example, jpg, png do not write encrypted images)",0,0.9782480597496033
332604767,373,devshgraphicsprogramming,2019-10-08T16:14:22Z,status?,0,0.9820219278335571
332604811,373,devshgraphicsprogramming,2019-10-08T16:14:27Z,status?,0,0.9820219278335571
332605020,373,devshgraphicsprogramming,2019-10-08T16:14:54Z,status?,0,0.9820219278335571
332605061,373,devshgraphicsprogramming,2019-10-08T16:14:59Z,status?,0,0.9820219278335571
332605108,373,devshgraphicsprogramming,2019-10-08T16:15:05Z,status?,0,0.9820219278335571
332605151,373,devshgraphicsprogramming,2019-10-08T16:15:11Z,status?,0,0.9820219278335571
332605268,373,devshgraphicsprogramming,2019-10-08T16:15:30Z,status?,0,0.9820219278335571
332605288,373,devshgraphicsprogramming,2019-10-08T16:15:32Z,status?,0,0.9820219278335571
332605314,373,devshgraphicsprogramming,2019-10-08T16:15:35Z,status?,0,0.9820219278335571
332605340,373,devshgraphicsprogramming,2019-10-08T16:15:38Z,status?,0,0.9820219278335571
332605359,373,devshgraphicsprogramming,2019-10-08T16:15:40Z,status?,0,0.9820219278335571
332605390,373,devshgraphicsprogramming,2019-10-08T16:15:43Z,status?,0,0.9820219278335571
332605417,373,devshgraphicsprogramming,2019-10-08T16:15:46Z,status?,0,0.9820219278335571
332605466,373,devshgraphicsprogramming,2019-10-08T16:15:52Z,status?,0,0.9820219278335571
332605492,373,devshgraphicsprogramming,2019-10-08T16:15:56Z,status?,0,0.9820219278335571
332605513,373,devshgraphicsprogramming,2019-10-08T16:15:59Z,status?,0,0.9820219278335571
332605558,373,devshgraphicsprogramming,2019-10-08T16:16:05Z,status?,0,0.9820219278335571
332670263,373,AnastaZIuk,2019-10-08T18:38:30Z,solved,0,0.9605372548103333
332670391,373,AnastaZIuk,2019-10-08T18:38:46Z,solved,0,0.9605372548103333
332670715,373,AnastaZIuk,2019-10-08T18:39:28Z,solved,0,0.9605372548103333
332670800,373,AnastaZIuk,2019-10-08T18:39:42Z,solved,0,0.9605372548103333
332670963,373,AnastaZIuk,2019-10-08T18:40:03Z,solved,0,0.9605372548103333
332671295,373,AnastaZIuk,2019-10-08T18:40:48Z,solved,0,0.9605372548103333
332671391,373,AnastaZIuk,2019-10-08T18:41:00Z,solved,0,0.9605372548103333
332671507,373,AnastaZIuk,2019-10-08T18:41:15Z,solved,0,0.9605372548103333
332671590,373,AnastaZIuk,2019-10-08T18:41:25Z,solved,0,0.9605372548103333
332671692,373,AnastaZIuk,2019-10-08T18:41:40Z,solved,0,0.9605372548103333
332671828,373,AnastaZIuk,2019-10-08T18:41:55Z,solved,0,0.9605372548103333
332672094,373,AnastaZIuk,2019-10-08T18:42:30Z,solved,0,0.9605372548103333
332672215,373,AnastaZIuk,2019-10-08T18:42:47Z,solved,0,0.9605372548103333
332682141,373,AnastaZIuk,2019-10-08T19:04:40Z,solved,0,0.9605372548103333
415136405,480,AnastaZIuk,2020-04-25T20:20:54Z,file to remove,0,0.9881080985069275
420662545,480,devshgraphicsprogramming,2020-05-06T09:36:35Z,i wouldn't bother with the extra `irrlichtbaw` directory since you already prefix the file/class names,0,0.9885616302490234
420663234,480,devshgraphicsprogramming,2020-05-06T09:37:56Z,why add `effect` to the name,0,0.9918656945228577
420663565,480,devshgraphicsprogramming,2020-05-06T09:38:34Z,duplicate file?,0,0.9381697177886963
420664213,480,devshgraphicsprogramming,2020-05-06T09:39:37Z,"these will probably be fbo bind and unbind, check if opengl backend does more than that",0,0.9884868860244751
420665272,480,devshgraphicsprogramming,2020-05-06T09:41:37Z,"you might need to add a ubo or ssbo for some per-quad data such as transforms, colors etc.",0,0.9922182559967041
420666566,480,devshgraphicsprogramming,2020-05-06T09:44:04Z,you want this to come from an ssbo [code block],0,0.9921784400939941
420666982,480,devshgraphicsprogramming,2020-05-06T09:44:42Z,"check if cegui supports gradients, if not (all vertices get assigned the same color) put the color in `perquaddata`",0,0.9932326078414917
420667314,480,devshgraphicsprogramming,2020-05-06T09:45:22Z,for glsl shaders to compile into spir-v you need to specify matching `layout(location=` on all `in` and `out` variables,0,0.994387686252594
420668091,480,devshgraphicsprogramming,2020-05-06T09:46:55Z,"then naturally a push constant to supply offset into array, so you could do this [code block]",0,0.9929741621017456
420668786,480,devshgraphicsprogramming,2020-05-06T09:48:18Z,"if everything cegui ever draws are quads, then you could easily make these `const` global arrays (like the vulkan triangle example) for a single quad indexed by `gl_vertexindex` then if you want more quads in different places, you'd handle that via instancing and a per-quad `modelviewperspmatrix`",0,0.9932789206504822
420669357,480,devshgraphicsprogramming,2020-05-06T09:49:23Z,"btw. the final override of a `virtual` function does not need the `virtual` keyword, only `override`",0,0.9929157495498657
420669804,480,devshgraphicsprogramming,2020-05-06T09:50:09Z,these should be ridiculously simple for you to implement ;) start here.,1,0.9945067763328552
420670332,480,devshgraphicsprogramming,2020-05-06T09:51:03Z,here do the opposite of what opengl says,0,0.9806175827980042
421693134,480,AnastaZIuk,2020-05-07T18:03:35Z,"it sets viewport, the matrix and cegui render target [code block]",0,0.9938357472419739
422011438,480,devshgraphicsprogramming,2020-05-08T08:16:56Z,that would be a: [a link] [a link] the matrix stuff you need to compute yourself and send to shader via push constant or ubo,0,0.9927424192428589
422011996,480,devshgraphicsprogramming,2020-05-08T08:18:19Z,"a gui projection is orthographic, not perspective",0,0.9760528206825256
422012650,480,devshgraphicsprogramming,2020-05-08T08:19:43Z,you need a simple orthographic matrix,0,0.9831220507621765
422013438,480,devshgraphicsprogramming,2020-05-08T08:21:32Z,"oh, so that's how they do it xd",0,0.6353582143783569
422015730,480,devshgraphicsprogramming,2020-05-08T08:26:39Z,you could possibly load with an override that overrides the cache searching so you get a separate asset cache just for cegui (you'd also need to override the gpu object creator slightly for `getgpuobjectsfromassets`) cc:,0,0.9943646192550659
422015905,480,devshgraphicsprogramming,2020-05-08T08:27:07Z,what is this needed for?,0,0.9840806126594543
422016285,480,devshgraphicsprogramming,2020-05-08T08:28:02Z,"i'd first create a gpuimage, then create a `igpuimageview` directly from it, doing it via the cpu object and using `getgpuobjectsfromassets` introduces more objects into caches",0,0.9930769205093384
422021769,480,devshgraphicsprogramming,2020-05-08T08:40:09Z,what does cegui use `cachingname` for ?,0,0.9948941469192505
422022522,480,devshgraphicsprogramming,2020-05-08T08:41:48Z,"call `blitfrommemory(buffer,{0.f,0.f,buffer_size.d_width, buffer_size.d_height})` and do the implementation there",0,0.9938189387321472
422022714,480,devshgraphicsprogramming,2020-05-08T08:42:18Z,this is pretty much what the screenshot extension does,0,0.963130533695221
422022922,480,devshgraphicsprogramming,2020-05-08T08:42:45Z,"don't support these, they are not srgb, and cegui probably gets them wrong",-1,0.7310988903045654
422023162,480,devshgraphicsprogramming,2020-05-08T08:43:14Z,"maybe change the `asset::e_format newformat = [&]()` lambda into a static private function, so you can check it here.",0,0.9942871928215027
422385396,480,AnastaZIuk,2020-05-08T21:31:26Z,"yeah, you've got an alias to various kind of resources hah",0,0.8125764727592468
422406612,480,devshgraphicsprogramming,2020-05-08T22:37:28Z,why are you turning every single texture into a framebuffer!?,0,0.7801740765571594
422407092,480,devshgraphicsprogramming,2020-05-08T22:39:11Z,"create a gpu buffer of the given `bufferbytesize` with `driver->creategpubufferdevicelocalondedmem` and fill it with `driver->updatebufferrangeviastagingbuffer`, no need for `getgpuobjectsfromassets` and creation of cpu buffer",0,0.9944671392440796
422407665,480,devshgraphicsprogramming,2020-05-08T22:41:09Z,"do not blit with fraebuffers! you should be using `copybuffertoimage` here, and you could have implemented `irrlichtbawtexture::loadfrommemory` with this function partially",0,0.7416214942932129
422408055,480,devshgraphicsprogramming,2020-05-08T22:42:47Z,that's not how it works and it won't work this way.,-1,0.6901333928108215
422408373,480,devshgraphicsprogramming,2020-05-08T22:43:58Z,you need `copyimagetobuffer`,0,0.9929631352424622
422408471,480,devshgraphicsprogramming,2020-05-08T22:44:23Z,just copy what it does with the downstreaming buffer and `copyimagetobuffer`,0,0.9935571551322937
422408633,480,devshgraphicsprogramming,2020-05-08T22:45:00Z,you don't need to use the framebuffer at all,0,0.9875386953353882
422957265,480,AnastaZIuk,2020-05-11T10:56:51Z,adjusted in following commit,0,0.990561306476593
423175959,480,AnastaZIuk,2020-05-11T16:47:04Z,adjusted in following commit,0,0.990561306476593
425429647,480,AnastaZIuk,2020-05-14T21:04:49Z,adjusted in following commit,0,0.990561306476593
425429917,480,AnastaZIuk,2020-05-14T21:05:17Z,adjusted in following commit,0,0.990561306476593
425430907,480,AnastaZIuk,2020-05-14T21:07:10Z,it is copied from their opengl implementation,0,0.9919215440750122
425431069,480,AnastaZIuk,2020-05-14T21:07:29Z,resolved,0,0.964900553226471
425435466,480,AnastaZIuk,2020-05-14T21:16:21Z,adjusted in following commit,0,0.990561306476593
425449167,480,AnastaZIuk,2020-05-14T21:45:41Z,adjusted in following commit,0,0.990561306476593
425449264,480,AnastaZIuk,2020-05-14T21:45:53Z,adjusted in following commit,0,0.990561306476593
425451093,480,AnastaZIuk,2020-05-14T21:50:10Z,adjusted in following commit,0,0.990561306476593
425451508,480,AnastaZIuk,2020-05-14T21:51:06Z,"i know, but it's my habbit likely, i will remove those",0,0.6904614567756653
425452110,480,AnastaZIuk,2020-05-14T21:52:35Z,resolved,0,0.964900553226471
425456186,480,AnastaZIuk,2020-05-14T22:02:26Z,changed it a little,0,0.9682371020317078
425456713,480,AnastaZIuk,2020-05-14T22:03:54Z,adjusted in folllowing commit,0,0.9895176291465759
425458989,480,AnastaZIuk,2020-05-14T22:09:18Z,"i'm not sure if gpu extent takes into account buffer row length, if for it it is indifferent, i will just use width",0,0.7076243758201599
425464492,480,AnastaZIuk,2020-05-14T22:24:10Z,"they use it for caching afaik, doing like folllowing [code block]",0,0.9898026585578918
425464675,480,AnastaZIuk,2020-05-14T22:24:38Z,the solution will be [a link],0,0.9901188611984253
425638276,480,devshgraphicsprogramming,2020-05-15T08:12:59Z,i think we have an srgb enum for these two,0,0.9760357737541199
425638412,480,devshgraphicsprogramming,2020-05-15T08:13:13Z,don't support this one,0,0.6741703748703003
425638768,480,devshgraphicsprogramming,2020-05-15T08:13:59Z,"don't assert, its not an error to ask",0,0.7898979783058167
425638818,480,devshgraphicsprogramming,2020-05-15T08:14:07Z,!=ef_unnknown,0,0.9630930423736572
425639222,480,devshgraphicsprogramming,2020-05-15T08:14:51Z,"don't create a new buffer, we have the downstreaming buffer, same thing we use in the screenshot extension!",0,0.9480156898498535
425639734,480,devshgraphicsprogramming,2020-05-15T08:15:49Z,"maps in irrlichtbaw are persistent, meaning they will not perform a fence before returning the pointer to the buffer! downstreaming buffer is persistently mapped.",0,0.9820658564567566
425639849,480,devshgraphicsprogramming,2020-05-15T08:16:03Z,well in that case its wrong xd,0,0.7763610482215881
425641060,480,devshgraphicsprogramming,2020-05-15T08:18:22Z,you can `copybuffertoimage` straight from the streaming/staging buffer... here you're creating one buffer too many,0,0.9666393995285034
425642439,480,devshgraphicsprogramming,2020-05-15T08:20:56Z,on other classes too,0,0.9850667715072632
425643824,480,devshgraphicsprogramming,2020-05-15T08:23:27Z,"you don't need this function, because you don't need to create transient buffers (we already have those, they're called the up and downstreaming buffer)",0,0.975649356842041
425644546,480,devshgraphicsprogramming,2020-05-15T08:24:45Z,that's not the correct width for texture scaling to return.,0,0.7837652564048767
425645209,480,devshgraphicsprogramming,2020-05-15T08:25:56Z,you're not even using this variable,0,0.9112976789474487
425645661,480,devshgraphicsprogramming,2020-05-15T08:26:50Z,"you're still doing it wrong, you've creating a icpuimageview not an igpuimageview",0,0.5070850253105164
425646947,480,devshgraphicsprogramming,2020-05-15T08:29:11Z,"i think its possible to create a ""clean"" asset manager class (`core::make_smart_refctd_ptr ()`) that could be used just by the cegui renderer components, or at least use an override during loading that could prepend `?cegui?` to all the caching paths when inserting into cache and searching the cache",0,0.9926753640174866
425647901,480,devshgraphicsprogramming,2020-05-15T08:30:49Z,"first create the gpu image, then do a `copybuffertoimage` but via the upstreaming staging buffer, don't create new buffers!",0,0.9868506193161011
425648154,480,devshgraphicsprogramming,2020-05-15T08:31:17Z,"also dry, so create the igpuimage and the views, then call `blitfrommemory`",0,0.992085874080658
352044307,402,devshgraphicsprogramming,2019-11-29T09:27:57Z,removed dds?,0,0.9866148829460144
352044560,402,devshgraphicsprogramming,2019-11-29T09:28:26Z,wrong include?,0,0.9133697748184204
352045287,402,devshgraphicsprogramming,2019-11-29T09:30:00Z,whats the difference between this and profile_ktx,0,0.9852122068405151
352045564,402,devshgraphicsprogramming,2019-11-29T09:30:38Z,total faces,0,0.8622081279754639
352045808,402,devshgraphicsprogramming,2019-11-29T09:31:12Z,you will need to translate the format between gli format and our own e_format,0,0.9899476170539856
352147906,402,AnastaZIuk,2019-11-29T14:09:23Z,do you want me to delete dds (and ktx) loader?,0,0.9934564232826233
352147945,402,AnastaZIuk,2019-11-29T14:09:32Z,"sure, to fix",0,0.9554805159568787
352148612,402,AnastaZIuk,2019-11-29T14:11:22Z,so what is a difference between layer and face? i can imagine a face as an index of texture (if it is a cubemap),0,0.9895219206809998
352156443,402,AnastaZIuk,2019-11-29T14:32:35Z,"well, so the **format** struct looks like this: [a link] i will translate it, but i'm not sure which format member i should choose for translating internal format: [a link] external format: [a link] or type format: [a link]",0,0.9678031206130981
352160942,402,AnastaZIuk,2019-11-29T14:44:11Z,"i don't know actually and i can't find anything about it, so i have created an issue [a link] i hope they will clarify us it",0,0.5233567357063293
352237707,402,devshgraphicsprogramming,2019-11-29T20:14:21Z,"that's a distinction that only gli seems to make, in vulkan and modern (dsa) opengl, faces of a cubemap are layers `arraylayerindex%6` gives you the cubemap face `arraylayerindex/6` gives you the cubemap array index",0,0.9919571876525879
352237751,402,devshgraphicsprogramming,2019-11-29T20:14:45Z,"well yeah, no point in duplicate loaders.",0,0.8511385321617126
352237768,402,devshgraphicsprogramming,2019-11-29T20:14:51Z,good.,1,0.8666313290596008
352272486,402,AnastaZIuk,2019-11-30T08:03:43Z,what do you think about it?,0,0.9713603854179382
352302094,402,devshgraphicsprogramming,2019-11-30T20:10:11Z,"thanks to `gl_arb_texture_storage` we now deal with exclusively internal formats [a link] before opengl was a retarded mix of extenal+type format, i.e. `gl_rgba` + `gl_float` now you just have `gl_rgba32f` you should ignore swizzles and target types (well you still need to differentiate 1d, 2d and 3d) for images and put them in the imageview creation struct instead, arbitrary swizzles are possible.",0,0.9205173850059509
352337738,402,AnastaZIuk,2019-12-01T11:29:42Z,"hm, actually it seems to me that our image assumes that the ""layer"" is always one, but if it is an cubemap it can handle some ""layers"" considered by our api as faces, right? so if there were some layers, i have to create pointers of our **icpuimage** and if target is an cubemap, i can set **arraylayers** that stores our faces",0,0.9616702198982239
352337875,402,AnastaZIuk,2019-12-01T11:32:18Z,"but in that case where there are loaded layers i have to consider mipmap level if present and create **screationparams** for each image, because it won't match anymore",0,0.9923127293586731
352378236,402,devshgraphicsprogramming,2019-12-01T22:30:42Z,"only one icpuimage is ever produced, ""layers"" are no different than ""depth"" and function exactly like ""height"" pixel addressing. `((z*height+y)*width+x)*pixelsize` there's even a function that gets you an offset into a bufer buffer i believe. icpuimage consists of declaration of image size+format+etc plus a list of buffer regions that shall be copied into it, see the ""fixed"" png loader, separate mip-map levels are separate image subresources, hence a separate buffer-region to copy. you don't however need 1 buffer per copy region, you can pack everything into one without any problem (that's what offsets are for). see vulkan-tutorial and read documentation of `vkcmdcopybuffertoimage`",0,0.9886300563812256
352378352,402,devshgraphicsprogramming,2019-12-01T22:32:40Z,why?,0,0.8699262738227844
352378371,402,devshgraphicsprogramming,2019-12-01T22:33:00Z,patent expired in 2019,0,0.988756000995636
352378404,402,devshgraphicsprogramming,2019-12-01T22:33:41Z,"also decompression is patented, not transfer of bytes, sending compressed data stream to opengl driver puts the onus of licensing on opengl driver implementation not the application using opengl (this is why mesa can't have nice things)",0,0.9328299760818481
352378531,402,devshgraphicsprogramming,2019-12-01T22:35:35Z,this sort of shit should be a cmake option then go into the buildconfig dynaically configured file. look at the first 6 files here [a link] if you want to you can convert all the other `_irr_compile_with` to cmake options.,0,0.7174708843231201
352378573,402,devshgraphicsprogramming,2019-12-01T22:36:34Z,arraylayers = totalfaces = faces()*layers(),0,0.9890457987785339
352378589,402,devshgraphicsprogramming,2019-12-01T22:36:46Z,"nope, see my other comment.",0,0.9557414650917053
352378687,402,devshgraphicsprogramming,2019-12-01T22:38:25Z,"i think you'll need to return a `e_format,icpuimageview::screationparams::swizzle` pair",0,0.9906668066978455
352378704,402,devshgraphicsprogramming,2019-12-01T22:38:34Z,static,0,0.8975487351417542
352378893,402,devshgraphicsprogramming,2019-12-01T22:40:40Z,"image view not image also you don't need virtual here, dont use virtual here, make the class final",0,0.9882444143295288
353048087,402,AnastaZIuk,2019-12-03T08:52:01Z,"sure, but swizzles are placed in **scomponentmapping** struct",0,0.9935678839683533
353136301,402,devshgraphicsprogramming,2019-12-03T11:56:51Z,yeah i don't remember all the structs and nested class declarations off by heart ;),1,0.9611155390739441
353935335,402,AnastaZIuk,2019-12-04T19:22:05Z,i think i've got it wrong while reading about copybuffers it seems to me that there should be one imageview and images in amount of mipmaps and such images will be filled by copy buffers to finaly create imageview i need to read it one more time for sure,0,0.8274151682853699
353948507,402,devshgraphicsprogramming,2019-12-04T19:50:04Z,baseimagetype becomes 1d here iirc,0,0.9621701240539551
353948593,402,devshgraphicsprogramming,2019-12-04T19:50:15Z,baseimagetype becomes 2d here iirc,0,0.9612675309181213
353948736,402,devshgraphicsprogramming,2019-12-04T19:50:34Z,baseimagetype becomes 2d here iirc,0,0.9612675309181213
353948841,402,devshgraphicsprogramming,2019-12-04T19:50:50Z,baseimagetype same as non-array version,0,0.9710347652435303
353948945,402,devshgraphicsprogramming,2019-12-04T19:51:01Z,just collapse this into the default case.,0,0.9814006090164185
353949291,402,devshgraphicsprogramming,2019-12-04T19:51:47Z,one image and one imageview there will be one copy range struct per mip-map (but it will point to 1 image and 1 buffer),0,0.9883425831794739
353949952,402,devshgraphicsprogramming,2019-12-04T19:53:10Z,you need to vary `miplevel` and `bufferoffset` accordingly also are you sure gli will give tightly packed image rows?,0,0.993164598941803
353950328,402,devshgraphicsprogramming,2019-12-04T19:53:55Z,"finally `extent` shrinks for each mip level, the icpuimage or iimage has a utlity function that actually tells you the extent of a given mip-level.",0,0.9898461699485779
353950859,402,devshgraphicsprogramming,2019-12-04T19:54:57Z,"this is stupid, `gl::swizzle` is an enum, you can just make an array and just index it by the swizzle",-1,0.9917946457862854
353951503,402,devshgraphicsprogramming,2019-12-04T19:56:21Z,you'll have to inver the swizzle for some of these,0,0.9466131925582886
353951873,402,devshgraphicsprogramming,2019-12-04T19:57:09Z,image_view,0,0.9403733611106873
353951890,402,AnastaZIuk,2019-12-04T19:57:11Z,"sure, but it seems to me it won't match because of that: [a link]",0,0.8492583632469177
353952019,402,devshgraphicsprogramming,2019-12-04T19:57:27Z,write binary? anything else?,0,0.9689313173294067
353952189,402,AnastaZIuk,2019-12-04T19:57:47Z,"i missed it, mistake",-1,0.7049108147621155
353952595,402,devshgraphicsprogramming,2019-12-04T19:58:42Z,use `core::unordered_map` then,0,0.9927058815956116
353957448,402,devshgraphicsprogramming,2019-12-04T20:09:51Z,a `static const core::unordered_map`,0,0.9920450448989868
353976927,402,AnastaZIuk,2019-12-04T20:54:03Z,"well, i get extent relative to mipmaplevel by loaded gli texture that has a capability of getting an extent for each mip level, but i will remember it",0,0.9727546572685242
354285916,402,AnastaZIuk,2019-12-05T12:32:03Z,"is it for sure necessary? gli reads it and assigns it properly i think, but i do an extra mapping on our api",0,0.9798264503479004
354286641,402,AnastaZIuk,2019-12-05T12:34:06Z,"[a link] if a swizzle is blue, it will be assigned to red so forth, so it seems to me it is correct",0,0.9852492213249207
354287972,402,AnastaZIuk,2019-12-05T12:37:40Z,"[a link] if swizzle of compoment red that will be assigned to it is blue, it will be extra mapped to our format and then assigned to",0,0.9895422458648682
354411287,402,devshgraphicsprogramming,2019-12-05T16:21:11Z,i'd assume that if gli reports `internal_bgra8_unorm` then rgba = bgra and then there's an extra swizzle from gli on top of that meaning that `internal_bgra8_unorm` needs to become `ef_r8g8b8a8_unorm` + a swizzle that is red = blue green = green blue = red alpha = alpha,0,0.9938063621520996
354412093,402,devshgraphicsprogramming,2019-12-05T16:22:38Z,what is this last comment about!?,0,0.9621173739433289
354413869,402,AnastaZIuk,2019-12-05T16:25:35Z,"but that's what my mapping does, it respects it otherwise why does gli read swizzle on 4 size vector?",0,0.88355952501297
354424775,402,devshgraphicsprogramming,2019-12-05T16:44:17Z,well but what happens if you have the bgra format + a custom swizzle? or will gli not give you such?,0,0.9476063847541809
354526276,402,AnastaZIuk,2019-12-05T20:16:25Z,"the default is `rgba`, without swizzle assumption standard swizzle vector with size of 4 also assume that it is `rgba` and it returns enum swizze to each chanel r as [0], g as [1] and so forth i think. in that case, if my format in case statement matches `bgra` format, we will have to consider that format is got from texture contating loaded parameters, swizzles though. mapped swizzles (without mapping extraordinary to our api) are in format order therefore, right? for instance: format[4] (where there is r, g, b, a default) read swizzle on [0] (`r`), gli returns on it swizzle_blue, so i map it and get 'b' read swizzle on [1] (`g`), gli returns on it swizzle_green, so i map it and get 'g' read swizzle on [2] (`b`), gli returns on it swizzle_red, so i map it and get 'r' read swizzle on [3] (`a`), gli returns on it swizzle_alpha, so i map it and get 'a' swizzle output -> `bgra` and there is mapping to our api left i have to handle it, right",0,0.9852666854858398
354562954,402,devshgraphicsprogramming,2019-12-05T21:44:44Z,"just test and see what assumptions are correct, i know nothing about how gli works, only our library.",0,0.8981232643127441
361932297,402,devshgraphicsprogramming,2019-12-30T09:06:32Z,btw you opened the issue on a fork of the original repo,0,0.9926651120185852
361932455,402,devshgraphicsprogramming,2019-12-30T09:07:18Z,get rid of this useles comment,0,0.9804125428199768
361936162,402,devshgraphicsprogramming,2019-12-30T09:23:44Z,comment needs to go,0,0.9852434396743774
362605983,402,devshgraphicsprogramming,2020-01-02T19:50:23Z,status?,0,0.9820219278335571
362606013,402,devshgraphicsprogramming,2020-01-02T19:50:28Z,status?,0,0.9820219278335571
362606035,402,devshgraphicsprogramming,2020-01-02T19:50:34Z,status?,0,0.9820219278335571
362606057,402,devshgraphicsprogramming,2020-01-02T19:50:38Z,status?,0,0.9820219278335571
362606247,402,devshgraphicsprogramming,2020-01-02T19:51:13Z,status?,0,0.9820219278335571
362606298,402,devshgraphicsprogramming,2020-01-02T19:51:22Z,status?,0,0.9820219278335571
338339882,387,devshgraphicsprogramming,2019-10-24T00:48:17Z,"you want to add two last parameters `const igpubuffer* countbuffer=nullptr, size_t countoffset=0u`, also rename `count` to `maxcount`. if the parameter buffer if its not null and (gl_arb_indirect_parameters || version>=460 ): 1. attach (via state chace) to the indirect parameter binding 2. multidraw{arrays|elements}indirectcount variants instead of the usual mdi call else if parameter buffer not null, scream to high heaven and ouput log error.",0,0.9151120781898499
338340066,387,devshgraphicsprogramming,2019-10-24T00:49:15Z,this used to work both for icpu and igpu meshbuffers.,0,0.9917303919792175
338340222,387,devshgraphicsprogramming,2019-10-24T00:50:05Z,just include `irr/core/core.h`,0,0.9937043786048889
338341969,387,devshgraphicsprogramming,2019-10-24T00:59:59Z,"geometrycreator will need a large refactor return type should be `icpumeshbuffer` with an `icpurenderpassindependentpipeline` member that is slightly invalid (no shaders, arbitrary `sblendparams` and `srasterizationparams`)",0,0.9925752878189087
338727618,387,devshgraphicsprogramming,2019-10-24T18:31:15Z,std::move the buffer binding,0,0.992180347442627
338727713,387,devshgraphicsprogramming,2019-10-24T18:31:28Z,std::move the buffer binding,0,0.992180347442627
338727929,387,devshgraphicsprogramming,2019-10-24T18:31:57Z,this is fucked should be a unique_ptr,-1,0.9798533916473389
338727987,387,devshgraphicsprogramming,2019-10-24T18:32:05Z,this shoudln't be refcounted,0,0.8972576260566711
339115545,387,Crisspl,2019-10-25T15:36:45Z,"shouldnt be smart pointer at all, idk what happened here",-1,0.7419708967208862
339229529,387,devshgraphicsprogramming,2019-10-25T20:36:49Z,i think i nuked this function in `master`,0,0.9656196236610413
339230498,387,devshgraphicsprogramming,2019-10-25T20:39:36Z,not sure there's a need for this.,0,0.821925699710846
339230595,387,devshgraphicsprogramming,2019-10-25T20:39:54Z,why kill the mutators?,0,0.6786584258079529
339230803,387,devshgraphicsprogramming,2019-10-25T20:40:33Z,why no union?,0,0.9369502067565918
339231251,387,devshgraphicsprogramming,2019-10-25T20:41:55Z,why `_const` ?,0,0.9914032816886902
339231921,387,devshgraphicsprogramming,2019-10-25T20:43:57Z,"don't delete, move to legacy",0,0.9635699987411499
339233376,387,devshgraphicsprogramming,2019-10-25T20:48:22Z,isn't there an arb version as well?,0,0.9925541281700134
339233759,387,devshgraphicsprogramming,2019-10-25T20:49:30Z,"i'd make a `pglmultidrawarrayindirectcountarb` and pick at function call, not exactly safe to assume typedef **pfnglmultidrawarraysindirectcountarbproc** == **pfnglmultidrawarraysindirectcountproc**",0,0.9936690926551819
339235106,387,devshgraphicsprogramming,2019-10-25T20:53:25Z,"we not only need to eliminate duplicates by pointer, but also duplicates by content.",0,0.9787636995315552
339235495,387,devshgraphicsprogramming,2019-10-25T20:54:29Z,"adding things to `std::` namespace is ub, we should just provide a hash functor that can be used as a template parameter",0,0.9940963983535767
339235704,387,devshgraphicsprogramming,2019-10-25T20:55:04Z,why the virtual inheritance?,0,0.9510542750358582
339278255,387,Crisspl,2019-10-26T00:44:49Z,yea but same func type. see func loading code,0,0.9888583421707153
339278370,387,Crisspl,2019-10-26T00:46:15Z,that's why i used cast to *arb so that gives an error if it's not same. but generally it is,0,0.9629710912704468
339278538,387,Crisspl,2019-10-26T00:49:03Z,"nah we never did this, might be an extension todo for eliminateduplicatea func",0,0.9848485589027405
339278695,387,Crisspl,2019-10-26T00:51:44Z,"thought the same but seems like it's common practice in case of has<>, not sure if legal. btw there's a lot of this in irrbaw :p",1,0.8762712478637695
339278786,387,Crisspl,2019-10-26T00:53:08Z,"because of parent pipeline, see comments there, it's todo tricky stuff, left because not needed for gl (buildable req)",0,0.9789446592330933
339293034,387,devshgraphicsprogramming,2019-10-26T09:05:02Z,because there was never any point to compare contents xd,0,0.931373655796051
339293042,387,devshgraphicsprogramming,2019-10-26T09:05:22Z,recently removed some of it.,0,0.9615516066551208
339293095,387,devshgraphicsprogramming,2019-10-26T09:07:38Z,"explain, doesn't `ipipeline` inherit from `ireferencecounted` ?",0,0.9935830235481262
339319863,387,Crisspl,2019-10-26T23:43:07Z,"[a link] ""adding template specializations"" section",0,0.9872670769691467
339319883,387,Crisspl,2019-10-26T23:44:18Z,also sample code in std::hash docs encourage this [a link],0,0.979379415512085
339330807,387,devshgraphicsprogramming,2019-10-27T08:29:41Z,"all right, i give up",0,0.783514678478241
339368426,387,Crisspl,2019-10-27T22:43:17Z,"because it doesnt call destructors of its members (deleted destructor). user has to provide user-defined destructor deciding which destructors are called, but it's impossible to tell since `sdescriptorinfo` doesnt know descriptor type",0,0.9908884763717651
339368714,387,Crisspl,2019-10-27T22:47:44Z,no idea why but below code [code block] tries to call non-const overload and gives me compile error. so this is kinda dirty workaround but idk whats going on,-1,0.925282895565033
339369182,387,Crisspl,2019-10-27T22:55:58Z,"nah, those functions are not needed, just blob type",0,0.9850261807441711
339429803,387,devshgraphicsprogramming,2019-10-28T07:43:56Z,do `const_cast (mb->getpipeline())->some_const_member_func();` tried that?,0,0.9942037463188171
339430202,387,devshgraphicsprogramming,2019-10-28T07:45:23Z,didn't i?,0,0.9701939225196838
339430323,387,devshgraphicsprogramming,2019-10-28T07:45:51Z,have you seen this comment?,0,0.987450361251831
339435561,387,devshgraphicsprogramming,2019-10-28T08:05:22Z,"ekhm, there's a `desc` just on the line above, could add a `gettype()` function to it. the you could switch/if in the destructor to decide which union to kill. would save us from a lot of `dynamic_cast`ing as well. ### sidenote on performance to get a performance increase, it will make sense to re-use the memory in `swritedescriptorset::info` (so vulkan backend doesn't need to allocate arrays of `vkdescriptorimageinfo`, `vkdescriptorbufferinfo` or `vkbufferview`) hence `idescriptorset::updatedescriptorset` should **consume** the entire `_descwrites` parameter and destroy the `swritedescriptorset` objects inside, so `swritedescriptorset::info` should come back from the function as just garbage memory ready to be deallocated.",0,0.9921121597290039
339546876,387,Crisspl,2019-10-28T12:55:38Z,"maybe i messed up the merge a little, doesnt really matter since its inside #ifndef",0,0.9401769042015076
339548462,387,Crisspl,2019-10-28T12:59:22Z,"we cant because one irrbaw class doesnt map to one particular desc type. but what we can do is a function telling ""descriptor category"" - i.e. what union member to use.",0,0.9779548048973083
339559185,387,Crisspl,2019-10-28T13:24:11Z,"nah sorry its just `mb->getpipeline()` and the error is exactly whatever, i just made a const overload in icpumesbuffer overlapping the one from imeshbuffer<....>. still dirty but at least theres no weird `getpipeline_const` now",-1,0.986536979675293
339562085,387,Crisspl,2019-10-28T13:30:30Z,i dont get it at all,0,0.5508163571357727
339595882,387,devshgraphicsprogramming,2019-10-28T14:32:29Z,this makes me ask how much you could have messed up the merge.,0,0.7644021511077881
339597042,387,devshgraphicsprogramming,2019-10-28T14:34:20Z,nvm leave it till later.,0,0.9642063975334167
339597426,387,devshgraphicsprogramming,2019-10-28T14:34:59Z,let's do that.,0,0.9840031266212463
339597913,387,devshgraphicsprogramming,2019-10-28T14:35:52Z,clean enough for me.,0,0.9482617378234863
339666811,387,devshgraphicsprogramming,2019-10-28T16:33:07Z,?,0,0.9557723999023438
339724358,387,Crisspl,2019-10-28T18:27:23Z,"no, it doesnt",0,0.8652773499488831
339725062,387,Crisspl,2019-10-28T18:29:02Z,virtual inheritance because its base for icpupipeline and icpupipeline also inherits from iasset and iasset inherits from irefcounted,0,0.9932749271392822
339791129,387,devshgraphicsprogramming,2019-10-28T21:02:25Z,shouldn't `ipipeline` inherit virtually from `ireferencecounted` instead then?,0,0.9940989017486572
339802565,387,AnastaZIuk,2019-10-28T21:31:20Z,"no i haven't, but i'm gonna see it asap",0,0.9209954738616943
339941118,387,devshgraphicsprogramming,2019-10-29T08:27:43Z,will merge when ipipeline inherits from ireferencecounted,0,0.9925359487533569
340017079,387,devshgraphicsprogramming,2019-10-29T11:18:45Z,fuck it i'll do it myself.,-1,0.9819204211235046
340023324,387,Crisspl,2019-10-29T11:34:28Z,erm sorry,-1,0.9895184636116028
340024617,387,devshgraphicsprogramming,2019-10-29T11:38:02Z,"no problem, i've decided to do #148 today.",0,0.9518068432807922
341487796,387,AnastaZIuk,2019-11-01T08:32:10Z,"okay, i have already read whole pr geometrycreator needs refactoring and meshbuffers in certain loaders need non-null pipeline i will deal with ply and x loaders first and then gonna fill them up",0,0.9689054489135742
341537608,387,devshgraphicsprogramming,2019-11-01T11:30:35Z,first fix master on the old pipeline.,0,0.9845077991485596
341541153,387,AnastaZIuk,2019-11-01T11:44:44Z,sure,0,0.9137381911277771
392578773,437,devshgraphicsprogramming,2020-03-14T11:39:59Z,"if you're hashing in 64bits then you need 64bit long prime numbers (big big numbers) also make the hash 2d, cause you'll be storing projections",0,0.9899886250495911
392578793,437,devshgraphicsprogramming,2020-03-14T11:40:20Z,`float(std::numeric_limits ::max())`,0,0.9924576282501221
392578814,437,devshgraphicsprogramming,2020-03-14T11:40:44Z,no need for the `&` operation,0,0.9902162551879883
392578896,437,devshgraphicsprogramming,2020-03-14T11:41:47Z,these must store a `struct {uint16_t[3]};` not a uint32_t,0,0.9941451549530029
392579064,437,devshgraphicsprogramming,2020-03-14T11:45:18Z,why are you inserting into the cache what you've already found? your key needs to be `projfitting` that you've tried searching with for the `std::vector::insert` function the iterator is a placement hint.,0,0.9948840737342834
392579310,437,devshgraphicsprogramming,2020-03-14T11:49:22Z,"first of all use `fittingvector` not `normal`, we save space by noting the symmetry and using a `abs(normal)` for the fitting and caching (after fit is found or computed the function should restore the signs). should be applied to the search result too now [a link] you want to take the `fittingvector` and transform it into a 2d surface projection `projfitting` my suggestion is barycentric coordinate of the intersection of a line originating at (0,0,0) in direction of `fittingvector` with the triangle defined by vertices (0,0,1),(0,1,0),(1,0,0)",0,0.9928748607635498
394016557,437,Przemog1,2020-03-17T22:53:23Z,will take care of it when i'm done with cache,0,0.9799542427062988
394016823,437,Przemog1,2020-03-17T22:54:12Z,oops,-1,0.9215677976608276
394626323,437,devshgraphicsprogramming,2020-03-18T20:40:41Z,"ok, thanks for pointing out!",1,0.9494032263755798
394648771,437,devshgraphicsprogramming,2020-03-18T21:25:37Z,update the comment that its actually `v=pz`,0,0.9937570095062256
394648931,437,devshgraphicsprogramming,2020-03-18T21:25:58Z,on the whole looks good!,1,0.9940756559371948
394649074,437,devshgraphicsprogramming,2020-03-18T21:26:19Z,what oops?,-1,0.9063677787780762
395496909,437,devshgraphicsprogramming,2020-03-20T08:39:00Z,bigger primes!,-1,0.8479161858558655
395755589,437,Przemog1,2020-03-20T16:33:27Z,"may be not the best choice, i will try to figure it out",0,0.9536380171775818
395762714,437,devshgraphicsprogramming,2020-03-20T16:45:29Z,vector8u ?,0,0.9908093214035034
395764229,437,Przemog1,2020-03-20T16:48:01Z,.. right,0,0.9418842792510986
396360487,437,devshgraphicsprogramming,2020-03-23T10:48:20Z,just remove these cases and let them drop to default.,0,0.9831882119178772
396370927,437,devshgraphicsprogramming,2020-03-23T11:07:11Z,and remove the enums from here [a link],0,0.9912567138671875
396830110,437,Przemog1,2020-03-24T00:01:43Z,i wonder if i should make these static,0,0.8111429810523987
396961078,437,devshgraphicsprogramming,2020-03-24T08:01:09Z,"export to buffer, make it take an `sbufferbinding ` as input and write to the correct offset in the buffer (return error is not enough space)",0,0.9940876960754395
396961301,437,devshgraphicsprogramming,2020-03-24T08:01:33Z,actually take an `sbufferbinding` its because it would be handy to support an offset into the buffer from which to read.,0,0.9906519651412964
396961496,437,devshgraphicsprogramming,2020-03-24T08:01:55Z,this is still an issue,0,0.8691837787628174
396963372,437,devshgraphicsprogramming,2020-03-24T08:05:50Z,keep these structs in `cquantnormalcache` don't want them to pollute the global namespace,0,0.9811657667160034
397076118,437,devshgraphicsprogramming,2020-03-24T11:17:59Z,"dont make the caches static, i hate globals!",-1,0.9929364323616028
397076201,437,devshgraphicsprogramming,2020-03-24T11:18:07Z,"dont make the caches static, i hate globals!",-1,0.9929364323616028
397091240,437,devshgraphicsprogramming,2020-03-24T11:46:10Z,there should be a requirement that the input to this function already be a an absolute value vector,0,0.993224024772644
397091547,437,devshgraphicsprogramming,2020-03-24T11:46:43Z,because `bestfit` returned will be an abs value vector,0,0.9910229444503784
397092303,437,devshgraphicsprogramming,2020-03-24T11:48:05Z,"you could template these functions and turn them into one, by templating on the cache type (enum or stored value type)",0,0.9907327890396118
397092886,437,devshgraphicsprogramming,2020-03-24T11:49:15Z,"these functions are practically identical, the only thing that changes is the number of quantization bits, that you could deduce them from the template type of an enum or stored value type",0,0.9787392616271973
397298483,437,Przemog1,2020-03-24T16:38:54Z,should i make this class singleton then? i don't think there is need for more than one instance of this class,0,0.9841592311859131
397360718,437,devshgraphicsprogramming,2020-03-24T18:08:47Z,"no singletons, no globals, user might want to make bazillion instances of asset manager (and ergo normal caches)",0,0.9619442820549011
398982131,437,Przemog1,2020-03-27T01:16:08Z,"since `quantizenormal16_16_16` returns uint64_t this solution would require different return type as well: [code block] and usage would look smth like this: [code block] it's error prone, and kinda wierd imo, i know current solution violates dry rule but personally i would leave it as it is..",-1,0.5774039030075073
399046412,437,Przemog1,2020-03-27T05:43:04Z,not after recent changes,0,0.9687461256980896
399113462,437,devshgraphicsprogramming,2020-03-27T08:49:47Z,try this [code block],0,0.9895839095115662
399114901,437,devshgraphicsprogramming,2020-03-27T08:52:37Z,"instead, maybe make a boolean/flag in `loadnormalquantcachefrombuffer` whether to replace or merge/add the contents",0,0.9955354928970337
399115441,437,devshgraphicsprogramming,2020-03-27T08:53:42Z,you can put it next to `sbufferbinding`,0,0.9929472208023071
399116001,437,devshgraphicsprogramming,2020-03-27T08:54:44Z,this should be a method of the `cquantnormalcache` not its owner.,0,0.9942527413368225
399130463,437,devshgraphicsprogramming,2020-03-27T09:21:18Z,still,0,0.9232051968574524
399136863,437,devshgraphicsprogramming,2020-03-27T09:32:19Z,and these should also be methods of `cquantnormalcache`,0,0.9935218691825867
399646749,437,Przemog1,2020-03-28T10:33:03Z,is it ok?,0,0.9839369058609009
399650667,437,devshgraphicsprogramming,2020-03-28T11:18:34Z,just plain old pointer and non-static member function,0,0.9767358303070068
399650703,437,devshgraphicsprogramming,2020-03-28T11:18:55Z,stop with the statics!,-1,0.9171950221061707
399651358,437,Przemog1,2020-03-28T11:26:31Z,that will complicate things but ok,0,0.6232553720474243
399704544,437,devshgraphicsprogramming,2020-03-28T20:13:16Z,"careful about an expression like `absvec >> quantizationbits * 2` the bitwise operators have weird precedence, its better to write `absvec >> (quantizationbits * 2)`",-1,0.5661907196044922
399704768,437,devshgraphicsprogramming,2020-03-28T20:15:17Z,16,0,0.9278516173362732
399704797,437,devshgraphicsprogramming,2020-03-28T20:15:35Z,template those,0,0.9756919145584106
399704882,437,devshgraphicsprogramming,2020-03-28T20:16:43Z,"remember about the `abs` on the normal, so the input makes sense (moving it out of the function",0,0.9815087914466858
399704961,437,devshgraphicsprogramming,2020-03-28T20:17:35Z,remember about the fallback if `_params.quantnormalcache==nullptr` (get the default from assetmanager->getmeshmanipulator()->getnormalcache()),0,0.9951997995376587
399705004,437,devshgraphicsprogramming,2020-03-28T20:17:55Z,"you can keep it as a member, just not a static member",0,0.9871964454650879
401237788,437,devshgraphicsprogramming,2020-03-31T21:53:12Z,do not const_cast its dangerous,-1,0.7123027443885803
401237994,437,devshgraphicsprogramming,2020-03-31T21:53:34Z,just create new parameters or something,0,0.9749869108200073
401238675,437,devshgraphicsprogramming,2020-03-31T21:54:59Z,make `imeshmanipulator* const meshmanipulatortouse` last parameter (as `imeshmanipulator* meshmanipulatoroverride=nullptr`),0,0.9942016005516052
401239087,437,devshgraphicsprogramming,2020-03-31T21:55:54Z,`(meshmanipulatortouse ? meshmanipulatortouse:assetmanager->getmeshmanipulator())->getquantnormalcache()`,0,0.9947590231895447
401239370,437,devshgraphicsprogramming,2020-03-31T21:56:35Z,"if its nulll, you just take the default one from the asset manager !",0,0.9856799840927124
401603145,437,Przemog1,2020-04-01T13:12:08Z,i do it here: [a link],0,0.9845348596572876
287615503,301,devshgraphicsprogramming,2019-05-26T21:39:41Z,"order in which you try them is important, you dont want to try a parent directory before a deeper (more matching) one",0,0.9501177072525024
288333112,301,devshgraphicsprogramming,2019-05-28T22:53:03Z,why ditch the smart_ptr ?,0,0.9803357124328613
288335799,301,Crisspl,2019-05-28T23:04:44Z,gives compile errors with abstract classes,0,0.9034389853477478
288336605,301,devshgraphicsprogramming,2019-05-28T23:08:31Z,"has the same syntax as [a link] you don't need the new, just the args",0,0.9873551726341248
288336794,301,devshgraphicsprogramming,2019-05-28T23:09:23Z,`includehandler = core::make_smart_refctd_ptr (filesystem);`,0,0.9913142323493958
288772808,301,Crisspl,2019-05-29T21:17:39Z,"ah, my bad, it was because i wrote core::make_smart_refctd_ptr",-1,0.9872968196868896
288773358,301,Crisspl,2019-05-29T21:19:16Z,"but `core::make_smart_refctd_ptr (filesystem, core::dont_grab);` doesnt work, it wants to put dont_grab into cincludehandler's constructor :/",-1,0.9696569442749023
288781871,301,devshgraphicsprogramming,2019-05-29T21:45:09Z,you don't need a `core::dont_grab` i don't think so,0,0.9359853863716125
288782105,301,devshgraphicsprogramming,2019-05-29T21:45:50Z,if you do then i've fucked up the definition of `template ...... core::make_smart_refctd_ptr`,0,0.7205033302307129
288782494,301,devshgraphicsprogramming,2019-05-29T21:47:09Z,and you've pushed :d,1,0.974774956703186
288787426,301,Crisspl,2019-05-29T22:03:53Z,"well, it's easy to workaround (just drop after creating smart ptr), but there's [code block] so seems like it's supposed to work. but i don't know why it doesn't or how to do it other way `dont_grab` is needed because while creating a ref-counted object it obviously has ref-count=1 and after creating smart ptr, it then has ref-count=2. but smart pointer's dtor drops only once so it's a memleak",0,0.9688734412193298
288787787,301,Crisspl,2019-05-29T22:05:23Z,fuuuu.. i'll remove and force push,-1,0.7929054498672485
288789050,301,devshgraphicsprogramming,2019-05-29T22:10:03Z,`make_smart_refctd_ptr` should just `dont_grab` by default,0,0.9941098690032959
288789961,301,devshgraphicsprogramming,2019-05-29T22:13:41Z,"i fucked up bigtime, the only definition of `make_smart_refctd_ptr` should have been: [code block]",-1,0.9477207660675049
288790709,301,Crisspl,2019-05-29T22:16:24Z,"ah, ok, so i'll push it to this branch",0,0.883316159248352
289118371,301,devshgraphicsprogramming,2019-05-30T18:37:59Z,rg8_snorm,0,0.948305070400238
289118485,301,devshgraphicsprogramming,2019-05-30T18:38:17Z,use a macro to make it configurable,0,0.9915391802787781
289118826,301,Crisspl,2019-05-30T18:39:12Z,"thx, no idea how it worked",-1,0.8169983625411987
289119173,301,Crisspl,2019-05-30T18:40:00Z,smem size? but what fot?,0,0.9114628434181213
289119480,301,devshgraphicsprogramming,2019-05-30T18:40:47Z,macro like `(18*(threadid.y+1) + threadid.x+1)` should work much better,0,0.9919666647911072
289119951,301,Crisspl,2019-05-30T18:42:02Z,what's the difference?,0,0.9521433711051941
289120276,301,devshgraphicsprogramming,2019-05-30T18:42:55Z,don't do the if-statements,0,0.9220591187477112
289120480,301,devshgraphicsprogramming,2019-05-30T18:43:28Z,you're missing the factor of half (because you're taking the gradient across 2 pixels not 1),0,0.9618285894393921
289120658,301,devshgraphicsprogramming,2019-05-30T18:43:56Z,also why not apply `uheightscalefactor` at the end?,0,0.9944058656692505
289120968,301,devshgraphicsprogramming,2019-05-30T18:44:44Z,unbind this later!,0,0.9402072429656982
289121132,301,devshgraphicsprogramming,2019-05-30T18:45:08Z,this needs to be reset to previous value,0,0.9770947098731995
289121414,301,devshgraphicsprogramming,2019-05-30T18:45:47Z,why did the fix get reverted?,0,0.9648459553718567
289121529,301,devshgraphicsprogramming,2019-05-30T18:46:03Z,fix got reverted?,0,0.9349715709686279
289122310,301,devshgraphicsprogramming,2019-05-30T18:47:59Z,you've coded the function as-if there's real simd in a single gpu thread... so there are useless multiplies here also a cast to int for no reason. the upside of a macro is that it can function like a template ;) (doesn't care if you use uint or int),1,0.985792338848114
289122617,301,devshgraphicsprogramming,2019-05-30T18:48:48Z,one day when all devices support 1024-sized work groups....,0,0.9874939322471619
289123066,301,Crisspl,2019-05-30T18:49:56Z,commit message ;) crashes on fence-related code deep in the engine and can't figure why,1,0.6654142141342163
289123405,301,devshgraphicsprogramming,2019-05-30T18:50:41Z,because the fence stuff worked with a fucked up reference count ;),-1,0.9060685038566589
289124705,301,devshgraphicsprogramming,2019-05-30T18:54:02Z,"shit, we're leaking fences",-1,0.984207808971405
289125107,301,Crisspl,2019-05-30T18:54:55Z,"well, i thought `dot` will make it more simd. the cast is because my driver is a little retarded and while compiling without cast, gives errors like `dot` is returning always float, same thing with `mix`. well, that's actually source of i-dont-know-whats-going-on bugs :p",-1,0.9151683449745178
289125505,301,Crisspl,2019-05-30T18:56:02Z,?? how?,0,0.6268053650856018
289125705,301,Crisspl,2019-05-30T18:56:33Z,"oh, yea, thanks",1,0.8487544655799866
289126642,301,Crisspl,2019-05-30T18:58:53Z,"because now it works on smaller numbers = possibly better precision. generally i think that way, but here no point",0,0.9559764266014099
289132567,301,devshgraphicsprogramming,2019-05-30T19:15:01Z,if your compiler is complaining about dot being a float then you shouldn't use it... it might actually calc the index as a float xd,0,0.9267103672027588
289134646,301,Crisspl,2019-05-30T19:20:48Z,"it probably does, but they're integer's small enough to be representable on 32bit float",0,0.9794297218322754
289136831,301,devshgraphicsprogramming,2019-05-30T19:26:41Z,"ok: 1) your texture coordinate is wrong, you'd need to offset by 0.5 of a pixel 2) you should use texelfetch instead anyway. 3) best way to do this is like this [code block] compiler should unroll the loop and you will just get the texel calculation math + 1 conditional texel fetch",0,0.990374743938446
289137641,301,devshgraphicsprogramming,2019-05-30T19:28:54Z,float precision is only an issue if your operands to add or sub differ vastly in magnitude,0,0.9762069582939148
289138513,301,devshgraphicsprogramming,2019-05-30T19:31:24Z,but converting from float to int and back is not free,0,0.9381365776062012
289182342,301,Crisspl,2019-05-30T21:35:30Z,hm smart but `texelfetch` require that bump map and derivative map are the same size + nothing-doing threads if the size is not multiple of 16 (if-statement needed here). filtering is so costly?,0,0.6535982489585876
289660655,301,devshgraphicsprogramming,2019-06-02T22:40:23Z,"re-use `smem`, by basically doubling the smem required you'll reduce occupancy greatly",0,0.9891439080238342
289660804,301,devshgraphicsprogramming,2019-06-02T22:45:24Z,"bump map and drivative map should absolutely be the same size, because from frequency analysis theory (mixing fourier and shannon nyquist): 1. a bump-map of resolution n contains frequencies of at most k hz 2. a derivative applied before a fourier transform does introduces a mutliplicative term to the original fourier transform, hence if the original did not contain frequencies above k, then the fourier of the derivative will also not contain any frequencies above k 3. hence if derivative map is lower resolution them it looses detail or if its higher its wasting pixels because the signal can be reconstructed anyway from a lower amount of samples",0,0.9848929643630981
418334287,483,devshgraphicsprogramming,2020-04-30T22:55:06Z,"`candeferredflush` does not invalidate the cache, `candeferredflush` is a property of `idriverfence` and it tells you whether the `waitcpu` method can accept a `flush=true` parameter (which performs an implicit `glflush` on the context you've placed the fence on just before you actually start witing on the fence). a pipeline/context flush (`glflush`) flushes the driver-cpu-side queue onto the gpu device for execution, if you place a fence but don't flush you can end up in a deadlock, basically each time you call `waitcpu` it will time-out because the work has not been sent to the gpu for execution 100% (its stuck in transit). so you either need to perform a `glflush` (but on the same thread+context that placed the fence) after placing the fence but before `waitcpu` (on any thread) or use that implicit flush functionality (but only if setting thread is the waiting thread), see the documentation for `waitcpu` .",0,0.992942214012146
418334855,483,devshgraphicsprogramming,2020-04-30T22:56:54Z,"a common trick for creating an `icpubuffer` over an already existing `void*` array without any memcpy or taking over the memory ownership is to use a `ccustomallocatorcpubuffer` with a `null_allocator` that adopts memory (it is a bit counter intuitive because adopt=take ownership, but a null allocator doesn't do anything, even free the memory, so you're all good)",0,0.9629726409912109
418335391,483,devshgraphicsprogramming,2020-04-30T22:58:39Z,it can actually store both raw glsl to be compiled or already compiled (but unspecialized) spv,0,0.9928929209709167
418335498,483,devshgraphicsprogramming,2020-04-30T22:59:00Z,or unspecialized spir-v,0,0.9778333306312561
418335564,483,devshgraphicsprogramming,2020-04-30T22:59:13Z,plesase cover specialization constants,0,0.9914308190345764
418335918,483,devshgraphicsprogramming,2020-04-30T23:00:18Z,"mention that any overlapping regions shall be copied into the output in exactly the order they were when specifying the image (last region copies into image last, overwriting any overlapped pixels)",0,0.9925329685211182
418336407,483,devshgraphicsprogramming,2020-04-30T23:01:47Z,state that irrlichtbaw limits push constant size to 128 bytes,0,0.9834850430488586
418336686,483,devshgraphicsprogramming,2020-04-30T23:02:39Z,"not options, bindings and set numbers of descriptors as well as the descriptor types",0,0.9876794815063477
418336985,483,devshgraphicsprogramming,2020-04-30T23:03:38Z,none of that stuff is here cause its an adt base for concrete graphics and compute pipelines,0,0.9869656562805176
418337624,483,devshgraphicsprogramming,2020-04-30T23:05:23Z,the correct function to use are these: [a link] its flush when cpu is writing and gpu is reading invalidate when cpu is reading and gpu is writing if you're not confident controlling cache coherency manually then use the coherent memory type when creating mappable `igpubuffer`s,0,0.9936482310295105
418341168,483,devshgraphicsprogramming,2020-04-30T23:16:38Z,"give examples of how to set up the `sbinding` array for a given glsl `layout(set=x,binding=y) descriptortype descriptorname[z]`",0,0.9938503503799438
418341508,483,devshgraphicsprogramming,2020-04-30T23:17:44Z,"if you don't know what filter you'll be executing at runtime, you can use the polymorphic interface and operate on `iimagefilter` pointers or references",0,0.9924983382225037
418341801,483,devshgraphicsprogramming,2020-04-30T23:18:40Z,"actually there is complete freedom on filters inputs and outputs, this is why each defines (or at least typedefs) its own `state` there are input only, output only (such as fill) or input output filters.",0,0.9920825958251953
418342073,483,devshgraphicsprogramming,2020-04-30T23:19:29Z,"utility filter isn't an actual filter you can use, its a base for some of the filters so its less repeating code",0,0.9696422815322876
418342809,483,devshgraphicsprogramming,2020-04-30T23:21:43Z,rephrase avoid `current` and `texel buffer`,0,0.993553638458252
418342890,483,devshgraphicsprogramming,2020-04-30T23:21:59Z,polymorphism,0,0.9609663486480713
418343790,483,devshgraphicsprogramming,2020-04-30T23:24:43Z,"nope, rounds up measurements in `texels` to mutliples of block sizes",0,0.9840199947357178
418343859,483,devshgraphicsprogramming,2020-04-30T23:24:59Z,its not an inverse,0,0.8193318843841553
418344248,483,devshgraphicsprogramming,2020-04-30T23:26:16Z,"nope, it will return 64 for 64 with a 4x4 but for a 1,2,3 will return 4, it rounds up.. its quite useful to determine actual mipmap sizes of bc compressed mip map levels or textures not aligned to block size (gives you the size of the overlap)",0,0.9577714800834656
418344497,483,devshgraphicsprogramming,2020-04-30T23:26:57Z,"nope, converts measurements in `texels` to `blocks` while rounding up at the same time",0,0.9891688823699951
418344555,483,devshgraphicsprogramming,2020-04-30T23:27:09Z,rewrite,0,0.9493415355682373
418344832,483,devshgraphicsprogramming,2020-04-30T23:28:06Z,"converted values will be written to texel buffer, texel buffer won't be converted, its already in that format, but doesn't have data inside that makes sense",0,0.984814465045929
418951556,483,AnastaZIuk,2020-05-02T12:14:39Z,adjusted in following commit,0,0.990561306476593
418952610,483,AnastaZIuk,2020-05-02T12:25:09Z,adjusted in following commit,0,0.990561306476593
418953159,483,AnastaZIuk,2020-05-02T12:30:02Z,adjusted in following commit,0,0.990561306476593
418953276,483,AnastaZIuk,2020-05-02T12:31:15Z,adjusted in following commit,0,0.990561306476593
418957405,483,AnastaZIuk,2020-05-02T13:11:06Z,adjusted in following commit,0,0.990561306476593
418958079,483,AnastaZIuk,2020-05-02T13:18:09Z,adjusted in following commit,0,0.990561306476593
418958351,483,AnastaZIuk,2020-05-02T13:20:35Z,adjusted in following commit,0,0.990561306476593
418958763,483,AnastaZIuk,2020-05-02T13:24:47Z,adjusted in following commit,0,0.990561306476593
418958977,483,AnastaZIuk,2020-05-02T13:26:52Z,"yeah, i have written it. so where should i put that information?",0,0.970893144607544
418961125,483,AnastaZIuk,2020-05-02T13:46:54Z,adjusted in following commit,0,0.990561306476593
418961469,483,AnastaZIuk,2020-05-02T13:50:20Z,adjusted in following commit,0,0.990561306476593
418961545,483,AnastaZIuk,2020-05-02T13:51:15Z,deleted,0,0.9717172980308533
418963173,483,AnastaZIuk,2020-05-02T14:07:30Z,adjusted in following commit,0,0.990561306476593
418963253,483,AnastaZIuk,2020-05-02T14:08:26Z,adjusted in following commit,0,0.990561306476593
418963973,483,AnastaZIuk,2020-05-02T14:16:03Z,adjusted in following commit,0,0.990561306476593
418964040,483,AnastaZIuk,2020-05-02T14:16:47Z,adjusted in following commit,0,0.990561306476593
418964720,483,AnastaZIuk,2020-05-02T14:23:18Z,adjusted in following commit,0,0.990561306476593
418964982,483,AnastaZIuk,2020-05-02T14:25:32Z,adjusted in following commit,0,0.990561306476593
418965303,483,AnastaZIuk,2020-05-02T14:29:04Z,adjusted in following commit,0,0.990561306476593
418965756,483,AnastaZIuk,2020-05-02T14:33:43Z,adjusted in following commit,0,0.990561306476593
418966019,483,AnastaZIuk,2020-05-02T14:36:14Z,adjusted in following commit,0,0.990561306476593
419113104,483,devshgraphicsprogramming,2020-05-03T14:41:55Z,nope there's a separate function for invalidation,0,0.9817891716957092
419113486,483,devshgraphicsprogramming,2020-05-03T14:45:06Z,you haven't covered what a specialization constant is,0,0.927701473236084
432380933,483,devshgraphicsprogramming,2020-05-29T09:56:22Z,"put the relevant stuff about graphics in the graphics pipeline base class header, and the stuff about compute in the compute pipeline base class header",0,0.9933928847312927
491054008,483,AnastaZIuk,2020-09-18T16:14:29Z,corrected in following commit,0,0.9914671182632446
491073301,483,AnastaZIuk,2020-09-18T16:51:03Z,corrected in following commit,0,0.9914671182632446
491075826,483,AnastaZIuk,2020-09-18T16:55:55Z,corrected,0,0.9229590892791748
310355875,340,devshgraphicsprogramming,2019-08-03T16:01:22Z,register the loader with asset manager to comply with req. 0 from #340,0,0.9940475225448608
310355900,340,devshgraphicsprogramming,2019-08-03T16:02:29Z,"if you register loader with asset manager, you can just load by path",0,0.9902157783508301
310356433,340,devshgraphicsprogramming,2019-08-03T16:22:59Z,looks like a candidate for a static function ?,0,0.9899933934211731
310356437,340,devshgraphicsprogramming,2019-08-03T16:23:15Z,why do you need to track the type?,0,0.9821727871894836
310356755,340,devshgraphicsprogramming,2019-08-03T16:39:32Z,`parserlog::mitsubaloadererror` what's this?,0,0.9913939833641052
310356772,340,devshgraphicsprogramming,2019-08-03T16:40:02Z,explain?,0,0.9806632399559021
310356797,340,devshgraphicsprogramming,2019-08-03T16:40:59Z,override + final,0,0.9815959334373474
310356905,340,devshgraphicsprogramming,2019-08-03T16:45:27Z,shouldn't it always be `_atts[2]==nullptr` and `_atts[0] && _atts[1]` ?,0,0.993821382522583
310356946,340,devshgraphicsprogramming,2019-08-03T16:47:13Z,ok if you're going to use `new` that heavily just spawn a context for the current loading session (like in baw file loader) and give that context a linear allocator to use to do placement-new,0,0.9928821325302124
310356975,340,devshgraphicsprogramming,2019-08-03T16:48:35Z,or do you seriously need to implement the simple element stuff to dynamically create `ielement`s ?,0,0.9708369374275208
310357772,340,Przemog1,2019-08-03T17:19:08Z,i dont think i will need that anywhere else,0,0.731163740158081
310358031,340,devshgraphicsprogramming,2019-08-03T17:30:29Z,"if it does not need the internal state of an object (does not need `this`) if should always be a static. bonus point, you can have a private static.",0,0.9929266571998596
310358043,340,Przemog1,2019-08-03T17:31:08Z,"to make downcasting easier, i do a lot of downcasting, especially in processchilddata functions. just like in this example: [a link]",0,0.985151469707489
310358102,340,devshgraphicsprogramming,2019-08-03T17:32:53Z,"but matrix is always 4x4 or 3x4 (with implicit 0,0,0,1 last row). this is matrix type not element type!",0,0.976887047290802
310358403,340,Przemog1,2019-08-03T17:43:20Z,"it just prints ""mitsuba loader error:\ninvalid .xml file structure: '"" followed by its only parameter `errormessage`: [a link] i think it needs better name and also i will use there `printer::log` instead of `printer::print`",0,0.9798199534416199
310358445,340,devshgraphicsprogramming,2019-08-03T17:45:08Z,so if you have `celementmatrix` why do you keep a separate transform here?,0,0.9942767024040222
310358464,340,devshgraphicsprogramming,2019-08-03T17:45:50Z,ok i see this as todo,0,0.9547560811042786
310358475,340,devshgraphicsprogramming,2019-08-03T17:46:18Z,use smart pointer,0,0.9847207069396973
310358628,340,devshgraphicsprogramming,2019-08-03T17:53:18Z,"you're gonna be wanting to be using a variant of this one [a link] hierarchy is as follows: - 0 for root level asset (an icpumesh for now, we have no scene object) - 1 for whatever icpumesh contains, so meshbuffers so the hierarchy would be 0u, 1u in the future if we make an icpuscene object or something like that.",0,0.9884994626045227
310358655,340,devshgraphicsprogramming,2019-08-03T17:54:42Z,your include paths on extension headers are all wrong... see rule nr. 5 in the readme [a link],0,0.9764183163642883
310359116,340,Przemog1,2019-08-03T18:12:54Z,"if .xml file structure is correct, then _atts[0] is always ""value"" and _atts[1] is a string consisting of 16 floats",0,0.9927908182144165
310359214,340,devshgraphicsprogramming,2019-08-03T18:18:12Z,parserutil.cpp less inline functions,0,0.988300085067749
310359316,340,Przemog1,2019-08-03T18:22:51Z,it is not implemented yet,0,0.9575594067573547
310359325,340,Przemog1,2019-08-03T18:23:23Z,"sorry, i should leave some comment about that",-1,0.9924764037132263
310359904,340,devshgraphicsprogramming,2019-08-03T18:45:00Z,yes,0,0.9659429788589478
310359963,340,devshgraphicsprogramming,2019-08-03T18:47:06Z,"but still, explain?",0,0.9661625623703003
310366655,340,Crisspl,2019-08-04T00:53:38Z,where this rule come from actually?,0,0.9876967072486877
310381788,340,devshgraphicsprogramming,2019-08-04T10:59:24Z,"the justification is that the extension should not fuck-up your build system because you didn't add its directory to the search path. imagine that your project includes extension files, but extension files include their peers with relative paths, you're gonna have a fuck-up when two extensions have the same public include filenames, unless full paths relative to repo's `./include/` are specified",0,0.6502209901809692
314891868,340,devshgraphicsprogramming,2019-08-16T21:13:06Z,"there's a thing called valiation, someone might be trying to feed the loader a bad .xml and the loader should not crash because of that",-1,0.5372782945632935
314892242,340,devshgraphicsprogramming,2019-08-16T21:14:25Z,what did we agree on in the end?,0,0.9829291105270386
314892306,340,devshgraphicsprogramming,2019-08-16T21:14:37Z,you should be using the overload!,0,0.9577604532241821
314896456,340,devshgraphicsprogramming,2019-08-16T21:29:52Z,what about alpha?,0,0.9852192401885986
314896623,340,devshgraphicsprogramming,2019-08-16T21:30:31Z,explain?,0,0.9806632399559021
314897985,340,devshgraphicsprogramming,2019-08-16T21:35:23Z,why?,0,0.8699262738227844
314898996,340,devshgraphicsprogramming,2019-08-16T21:39:27Z,no need if going to provide metadata,0,0.8651904463768005
314899015,340,devshgraphicsprogramming,2019-08-16T21:39:34Z,use smart pointer?,0,0.9840922355651855
315012808,340,Przemog1,2019-08-19T01:09:36Z,"needed that for ""baking"" mesh transforms, but it is irrelevant now",0,0.98313969373703
316682812,340,devshgraphicsprogramming,2019-08-22T13:39:22Z,what's happened here?,0,0.9802583456039429
316684051,340,devshgraphicsprogramming,2019-08-22T13:41:50Z,and you know that there's a `core::make_smart_refctd_ptr` so you don't need to use the nasty `dont_grab` constructor,0,0.9834644794464111
316685295,340,Przemog1,2019-08-22T13:44:09Z,"it is probably because i copied and pasted entire code from my ""backup file""",0,0.9898264408111572
317288569,340,devshgraphicsprogramming,2019-08-23T20:21:13Z,what are you doing here?,0,0.9815195798873901
317288975,340,devshgraphicsprogramming,2019-08-23T20:22:35Z,"the convention here is to return the raw pointer, we only want to return a `smart_refctd_ptr` if we are sure that the callee wants to hold onto the reference for a longer time.",0,0.9932407140731812
317310594,340,Przemog1,2019-08-23T21:39:12Z,here i retrive mesh from shape element,0,0.9890695214271545
317310832,340,Przemog1,2019-08-23T21:40:10Z,then this retrived mesh is added to the array which contain all loaded meshes,0,0.9844977259635925
317325602,340,devshgraphicsprogramming,2019-08-23T22:57:23Z,i meant ref-counting-wise?,0,0.9839962124824524
339260993,390,devshgraphicsprogramming,2019-10-25T22:34:36Z,you only want to be loading `.glsl` files,0,0.9870931506156921
339263104,390,devshgraphicsprogramming,2019-10-25T22:46:04Z,try rendering an attribute-less mesh (like in vulkan examples) move the `vertices` array to the vertex shader and index it with `gl_vertexid` all this code is overkill for splatting points accoridng to a bsdf,0,0.9771844744682312
339263251,390,devshgraphicsprogramming,2019-10-25T22:46:41Z,"if you set `eit_unknown` then you can create a mesh without index buffer, index-count becomes vertex count",0,0.9937413334846497
339263358,390,devshgraphicsprogramming,2019-10-25T22:47:14Z,you need `layout(location = 0)` for this,0,0.9931607246398926
339263399,390,devshgraphicsprogramming,2019-10-25T22:47:28Z,we use `#version 430 core`,0,0.9932389259338379
339292272,390,achalpandeyy,2019-10-26T08:37:21Z,"as mentioned in the comment above, this was just to test if the custom shaders are working as intended. it will not make it to the final version.",0,0.9944433569908142
339292349,390,achalpandeyy,2019-10-26T08:38:46Z,same as above.,0,0.9857698678970337
339307382,390,devshgraphicsprogramming,2019-10-26T16:54:07Z,"you could use a `smart_refctd_ptr` you know, if only `irr::shadermanager` inherited from `irr::core::referencecounted`",0,0.9943663477897644
339307405,390,devshgraphicsprogramming,2019-10-26T16:54:44Z,you might want to check for shader compile fail.,0,0.9846650958061218
339307455,390,devshgraphicsprogramming,2019-10-26T16:55:54Z,do not put random example class in my engine's namespaces!,0,0.6136083602905273
339307468,390,devshgraphicsprogramming,2019-10-26T16:56:04Z,do not put random example class in my engine's namespaces!,0,0.6136083602905273
339307522,390,devshgraphicsprogramming,2019-10-26T16:57:58Z,i'm thinking that maybe bsdf_cos_sample should return both the chosen direction and probability (might be less intensive to compute them together) and abandon the `bsdf_cos_sample_probability` function,0,0.9895454049110413
339327665,390,achalpandeyy,2019-10-27T07:00:11Z,"yeah, this was something i was kind of confused about. why do we put `bsdfvalidatorapp` in `irr` namespace, then? i observed similar behavior in the brdf explorer.",-1,0.8020287752151489
339329266,390,achalpandeyy,2019-10-27T07:47:06Z,isn't it already done deep within `copengldriver::addhighlevelshadermaterial` somewhere in `source/irrlicht/copenglslmaterialrenderer.cpp` ? i was getting compile errors when i appended illegal function definitions to the shader. is it worth doing it again?,0,0.9861328601837158
339331612,390,devshgraphicsprogramming,2019-10-27T08:49:00Z,because i (unfortunately) wansn't babysitting the person who wrote it.,-1,0.9453625082969666
339331701,390,devshgraphicsprogramming,2019-10-27T08:51:10Z,if `copengldriver::addhighlevelshadermaterial` returns <0 then the shader failed to build.,0,0.9874076843261719
339333905,390,devshgraphicsprogramming,2019-10-27T09:49:25Z,you can still do `using namespace irr;` in c++ files,0,0.9940205216407776
339333911,390,devshgraphicsprogramming,2019-10-27T09:49:34Z,and `using namespace irr::ext::cegui;`,0,0.9911618232727051
339333955,390,devshgraphicsprogramming,2019-10-27T09:50:46Z,"you will probably want to display the buttons/ui not over the texture, so you need a larger window",0,0.9845884442329407
233016775,172,devshgraphicsprogramming,2018-11-13T12:27:35Z,you may as well allow for start+end colors... also why require uint8_normalized color format? just let people use full floats for rgba,0,0.988086462020874
233017001,172,devshgraphicsprogramming,2018-11-13T12:28:22Z,i'd call the extensions something more useful.. maybe `debugdraw`,0,0.9906471371650696
233017523,172,devshgraphicsprogramming,2018-11-13T12:30:15Z,if you're going to draw lines i'd pass 2 instead of 3... but this is only cosmetic since that parameter is only needed for tessellation shaders.,0,0.9687210321426392
233018069,172,devshgraphicsprogramming,2018-11-13T12:32:16Z,"if your index buffer is going to be 0,1, ... (starting at some offset and then monotonically increasing by 1) then there is no need for it",0,0.9812535643577576
233018335,172,devshgraphicsprogramming,2018-11-13T12:33:12Z,you can actually drop the descriptor straight after line 59 since meshbuffer will grab,0,0.9932984709739685
233019202,172,devshgraphicsprogramming,2018-11-13T12:36:14Z,ect_unsigned_int is not normalized format... you need normalized format i think like `ect_normalized_unsigned_int` non nomralized int formats are for shaders that take `ivecn` or `uvecn` as inputs,0,0.9921099543571472
233019629,172,devshgraphicsprogramming,2018-11-13T12:37:40Z,`m_linedata` needs not be a class member,0,0.9919054508209229
233019925,172,manhnt9,2018-11-13T12:38:32Z,will change to float color,0,0.9891441464424133
233019956,172,devshgraphicsprogramming,2018-11-13T12:38:40Z,most of this set-up you can do in the constructor,0,0.9902347326278687
233020099,172,manhnt9,2018-11-13T12:39:14Z,changed it anyways,0,0.966736912727356
233020313,172,manhnt9,2018-11-13T12:39:57Z,updated,0,0.968669593334198
233020376,172,devshgraphicsprogramming,2018-11-13T12:40:12Z,"if there is no `smgr->drawall` or at least `smgr->onanimate` then the active camera will not be updated, and hence you will get no change in the view-proj matrix and ergo your line won't move",0,0.9433332681655884
233022671,172,manhnt9,2018-11-13T12:47:29Z,for multi-threading capability ... right.,0,0.9535613656044006
233023153,172,manhnt9,2018-11-13T12:49:10Z,then m_offsets should not be a member either,0,0.9811561107635498
233024018,172,manhnt9,2018-11-13T12:51:56Z,so i can just remove all index related calls?,0,0.9925139546394348
233024598,172,manhnt9,2018-11-13T12:54:03Z,including `mapvertexattrbuffer`? you mean i can even `multi_place` in constructor to get mem offset then update the buffer for each `cdraw3dline::draw` call?,0,0.9952260255813599
233024888,172,manhnt9,2018-11-13T12:54:59Z,added smgr->drawall(),0,0.9914267063140869
233028099,172,devshgraphicsprogramming,2018-11-13T13:04:30Z,"you should never use the default streaming buffer persistently... so allocate and free on each draw. if one uses streaming buffer persistently, then streaming buffer is no longer a streaming buffer. however you can set `basevertex` on the mesh dynamically! (which is why you want/need allocation alignment to be a multiple of vertex size )",0,0.9895134568214417
233028429,172,devshgraphicsprogramming,2018-11-13T13:05:25Z,"not for mt capability, it just simply doesn't need to be kept around outside of the function. for mt its best to create one instance per-thread and use these independently...",0,0.9798067808151245
233028491,172,devshgraphicsprogramming,2018-11-13T13:05:37Z,pretty much.,0,0.9089773297309875
233028937,172,devshgraphicsprogramming,2018-11-13T13:06:58Z,if getting rid of indices then set this to eit_unknown,0,0.9938591122627258
233031086,172,manhnt9,2018-11-13T13:13:12Z,commiting this,0,0.9612576365470886
233031114,172,manhnt9,2018-11-13T13:13:21Z,commiting this,0,0.9612576365470886
233031496,172,manhnt9,2018-11-13T13:14:38Z,commiting this,0,0.9612576365470886
233061900,172,devshgraphicsprogramming,2018-11-13T14:36:15Z,index count still needs to be present... it tells how many vertices are to be drawn.,0,0.9806156754493713
233107681,172,manhnt9,2018-11-13T16:04:35Z,"i think it's not necessarily used for debug, sometimes you want lines in the world for some reason. and in the future someone may add more drawing extension.",0,0.959710419178009
233136801,172,devshgraphicsprogramming,2018-11-13T17:05:40Z,a. this is not a high performance implementation of line drawing b. why is the extension called `draw` if it only draws lines?,0,0.9873392581939697
233306299,172,manhnt9,2018-11-14T03:47:11Z,changed namespace to debugdraw,0,0.9895037412643433
413863210,478,devshgraphicsprogramming,2020-04-23T14:49:54Z,probably not,0,0.9314528703689575
413864795,478,devshgraphicsprogramming,2020-04-23T14:51:42Z,you want the same treatment on c and cxx flags (except for __cplusplus macro),0,0.9911357164382935
413865356,478,devshgraphicsprogramming,2020-04-23T14:52:23Z,you need to handle c (non cxx) as well,0,0.9856084585189819
413866088,478,devshgraphicsprogramming,2020-04-23T14:53:13Z,like making the o2 replace disappear,0,0.9387187957763672
413867744,478,devshgraphicsprogramming,2020-04-23T14:55:10Z,"i don't want `/gl` on relwithdebug info, i want incremental linking instead (and incremental with minimal rebuild on debug a similar warning level to debug is wanted same `wchar_t` option for all targets",0,0.9808101058006287
413869693,478,devshgraphicsprogramming,2020-04-23T14:57:17Z,`/gf` and `/gy` are provided by `o2` so throw them out,0,0.9944363832473755
413871181,478,devshgraphicsprogramming,2020-04-23T14:59:00Z,remove the `/gy-` flag,0,0.9941626191139221
413872315,478,devshgraphicsprogramming,2020-04-23T15:00:18Z,"`/ot /oy /oi` are provided by ox and o2, i don't know why they were there",0,0.9778146147727966
413873548,478,devshgraphicsprogramming,2020-04-23T15:01:35Z,`/mp /sdl-` is neede here as well,0,0.9939409494400024
413874720,478,devshgraphicsprogramming,2020-04-23T15:02:59Z,and you don't want any `/z` (`/zi`) option on a release build since its pointless,0,0.7195708155632019
413875025,478,devshgraphicsprogramming,2020-04-23T15:03:21Z,"replace `/zi` with `/zi` maybe we'll get to use ""edit and continue""",0,0.9931479096412659
413878908,478,devshgraphicsprogramming,2020-04-23T15:07:55Z,"finally the target also needs the `replace ""/mdd"" ""/mtd""` on both c and cxx falgs",0,0.9939888715744019
413879443,478,devshgraphicsprogramming,2020-04-23T15:08:32Z,just kill the code,-1,0.8037891983985901
413879565,478,devshgraphicsprogramming,2020-04-23T15:08:41Z,just kill the code,-1,0.8037891983985901
413882582,478,devshgraphicsprogramming,2020-04-23T15:12:02Z,"also add `/oy-` after `/o2` (o2 already in the flags, so append the options)",0,0.994491696357727
414106376,478,devshgraphicsprogramming,2020-04-23T20:36:37Z,still,0,0.9232051968574524
414107992,478,devshgraphicsprogramming,2020-04-23T20:39:10Z,too manny flags don't want `/gf /ot /gs- /oi` btw. check that you can actually singlestep (or at least somewhat step) code of examples in relwithdebinfo builds,-1,0.5388250350952148
417855983,478,devshgraphicsprogramming,2020-04-30T08:51:19Z,`/ot /oy /oi` are provided by o2 no need for them here,0,0.9935013651847839
417856740,478,devshgraphicsprogramming,2020-04-30T08:52:29Z,"you sure the syntax `/zc:__cplusplus,wchar_t` works?",0,0.9945433139801025
417858611,478,devshgraphicsprogramming,2020-04-30T08:55:38Z,i want you to get rid of the `irrlichtserver` target completely,0,0.9831086993217468
418845634,478,Przemog1,2020-05-02T02:47:55Z,nah,0,0.9429860711097717
422009746,478,devshgraphicsprogramming,2020-05-08T08:13:21Z,what around release?,0,0.9766924381256104
422009859,478,devshgraphicsprogramming,2020-05-08T08:13:37Z,what around release?,0,0.9766924381256104
422079545,478,Przemog1,2020-05-08T10:56:36Z,release and relwithdebinfo are set to mt,0,0.9926190972328186
422175247,478,devshgraphicsprogramming,2020-05-08T14:28:06Z,ah ok i see,0,0.9482339024543762
422547882,478,devshgraphicsprogramming,2020-05-09T21:23:38Z,we will never support hlsl,0,0.9435621500015259
422669781,478,Przemog1,2020-05-10T16:48:26Z,it still needs to be there,0,0.9839099049568176
423073342,478,Crisspl,2020-05-11T14:18:34Z,/gl and /ltcg is basically same thing but former is compiler flag and latter is linker flag. they must both be specified though for whole program optimization to be enabled. otherwise im getting [code block],0,0.9711093902587891
423091137,478,Crisspl,2020-05-11T14:42:47Z,"actually.. why dont we use ltcg:incremental in release? i guess `/gl` forces `/ltcg` and thats why it doesnt raise any warnings, but it doesnt enable `/ltcg:incremental`",0,0.9775066375732422
390614729,431,devshgraphicsprogramming,2020-03-10T21:12:35Z,make it `src/irr/builtin`,0,0.994364857673645
390614742,431,devshgraphicsprogramming,2020-03-10T21:12:36Z,make it `src/irr/builtin`,0,0.994364857673645
390614745,431,devshgraphicsprogramming,2020-03-10T21:12:37Z,make it `src/irr/builtin`,0,0.994364857673645
390615644,431,devshgraphicsprogramming,2020-03-10T21:14:23Z,needs to be a sized array `const uint8_t %s[%d]` with %d giving the size,0,0.9919393658638
390616171,431,devshgraphicsprogramming,2020-03-10T21:15:31Z,make an example out of the built-in shaders (for that you need to work off the `shader_pipeline` branch),0,0.9946792125701904
390617782,431,devshgraphicsprogramming,2020-03-10T21:18:46Z,"you need to declare this option with a proper default, also i'd call it `irr_embed_builtin_resources` it also needs to be defined in the installed configure header in `include/irr/config` so the c++ code can check the macro `_irr_embed_builtin_resources` and decide whether to load from embedded `uint8_t` array or some file in `include/irr/builtin/`",0,0.99396151304245
391053382,431,devshgraphicsprogramming,2020-03-11T15:24:57Z,"no need for this, its in the top level cmake",0,0.9866846203804016
391053809,431,devshgraphicsprogramming,2020-03-11T15:25:30Z,don't commit the resource files.,0,0.9371167421340942
391054439,431,devshgraphicsprogramming,2020-03-11T15:26:18Z,you need to embed the arrays in an appropriate namespace [code block],0,0.9894603490829468
391057720,431,devshgraphicsprogramming,2020-03-11T15:30:31Z,"you need a unique variable name instead of `resource` i'd take the original virtual path like `irr/builtin/x/y/z/something.type` and i would replace the `/` or `\` and `.` with `_` and use that as a name, for now",0,0.9944105744361877
391058038,431,devshgraphicsprogramming,2020-03-11T15:30:53Z,give this file the same name as its virtual path.,0,0.9914984107017517
391058515,431,devshgraphicsprogramming,2020-03-11T15:31:28Z,"you don't output to source dir, you output to binary/build dir",0,0.9809381365776062
391059845,431,devshgraphicsprogramming,2020-03-11T15:33:12Z,not sure you should be using the `cmake_current_source` variable,0,0.9915302991867065
391060648,431,devshgraphicsprogramming,2020-03-11T15:34:13Z,you're missing the magical glue that defines it for this config header (should be in `./source/irrlicht/cmakelists.txt`),0,0.9425594806671143
391627661,431,devshgraphicsprogramming,2020-03-12T13:41:42Z,?,0,0.9557723999023438
391627786,431,devshgraphicsprogramming,2020-03-12T13:41:54Z,?,0,0.9557723999023438
393776802,431,devshgraphicsprogramming,2020-03-17T15:44:30Z,missing quotes,0,0.9585671424865723
395209107,431,devshgraphicsprogramming,2020-03-19T17:44:32Z,"check if you have the paths right, you can use cmake `message` to check what `${cmake_current_binary_dir}/builtin` evalutates to",0,0.9938408136367798
396376276,431,devshgraphicsprogramming,2020-03-23T11:16:53Z,don't commit these,0,0.7751962542533875
396376615,431,devshgraphicsprogramming,2020-03-23T11:17:24Z,this has really bad syntax,-1,0.9919388890266418
396376864,431,devshgraphicsprogramming,2020-03-23T11:17:50Z,why is `builtin_resource_list` some sort of global variable?,0,0.9928313493728638
396378204,431,devshgraphicsprogramming,2020-03-23T11:20:11Z,`${python_executable}` is the correct one to use,0,0.9911636114120483
396378455,431,devshgraphicsprogramming,2020-03-23T11:20:35Z,why!?,-1,0.9413153529167175
396378999,431,devshgraphicsprogramming,2020-03-23T11:21:32Z,"you should be passing the list to the function, not using a weird global cmake variable",0,0.9338368773460388
399184542,431,devshgraphicsprogramming,2020-03-27T10:58:58Z,can you revert the change to this file?,0,0.9934053421020508
399184881,431,devshgraphicsprogramming,2020-03-27T10:59:35Z,why did you remove the extra headers?,0,0.9844725728034973
399185383,431,devshgraphicsprogramming,2020-03-27T11:00:32Z,"don't touch my samples, try to embed one of the shaders in `iassetmanager` instead of having it as a rawstring and test (example 35 uses builtin shaders)",0,0.9876090288162231
399214490,431,devshgraphicsprogramming,2020-03-27T11:59:36Z,what the fuck are you doing?,-1,0.9802743792533875
404131999,455,devshgraphicsprogramming,2020-04-06T14:23:57Z,"instead of adding a `_fragment` suffix, do `.frag` its a universally recognized extension",0,0.994759738445282
404132320,455,devshgraphicsprogramming,2020-04-06T14:24:23Z,ok,0,0.8787186145782471
404132725,455,devshgraphicsprogramming,2020-04-06T14:24:54Z,"instead of adding a `_vertex` suffix, do `.vert` suffix its a universally recognized extension",0,0.9944748282432556
404133351,455,devshgraphicsprogramming,2020-04-06T14:25:37Z,`.frag`,0,0.9852210879325867
404133534,455,devshgraphicsprogramming,2020-04-06T14:25:52Z,ok,0,0.8787186145782471
404134563,455,devshgraphicsprogramming,2020-04-06T14:27:17Z,`core::icpubuffer` you dont want a circular dependency of `asset` namespace on the `io` namespace,0,0.9912291765213013
404135526,455,devshgraphicsprogramming,2020-04-06T14:28:27Z,see my comment about the `.frag` and `.vert` suffices,0,0.9921523928642273
404136598,455,devshgraphicsprogramming,2020-04-06T14:29:51Z,might be because the `irr_core_unique_string_literal_type` macro only works for up to 127 character strings,0,0.9948651194572449
404136780,455,devshgraphicsprogramming,2020-04-06T14:30:04Z,what is `__irr_root_directory__` ?,0,0.9938914775848389
404137414,455,devshgraphicsprogramming,2020-04-06T14:30:51Z,"do not throw, irrlichtbaw is a no-exceptions library! just return `nullptr`",0,0.7096936702728271
404138760,455,devshgraphicsprogramming,2020-04-06T14:32:29Z,"you want `_irr_install_directory_` and you should be getting the cmake installation directory, i will fix it myself afterwards actually",0,0.9890096783638
404141265,455,devshgraphicsprogramming,2020-04-06T14:35:35Z,and irrlichtserver as well needs these deps,0,0.9913271069526672
404142246,455,devshgraphicsprogramming,2020-04-06T14:36:57Z,you don't need this line at all,0,0.9680699706077576
404142537,455,devshgraphicsprogramming,2020-04-06T14:37:18Z,this change is also not needed,0,0.9881504774093628
404142784,455,devshgraphicsprogramming,2020-04-06T14:37:37Z,ok i see it now,0,0.9378982782363892
404147316,455,devshgraphicsprogramming,2020-04-06T14:43:31Z,"ok this is actually quite a bit complex, but lets do it like this: 1. when the irrlicht targets are not installed (all examples and lib run out of the build-dir), this configured header (whose configured version will be placed in `{binary_dir}/include/irr/config/buildconfigoptions.h` as it is right now, but unlike how it is now, not added to the install target) needs to evaluate to `#define _irr_install_directory_ ""{binary_dir}""` 2. when the irrlicht targets are installed (all examples run out of somewhere, and the library and includes are installed somewhere in a system-wide directory) this configured header will probably have to be placed somewhere out of the way, but added to the install target. and the macro needs to evaluate to `#define _irr_install_directory_ ""${cmake_install_prefix}""`",0,0.9852505922317505
404788703,455,Hazardu,2020-04-07T13:00:04Z,length was 72,0,0.9694951176643372
404798437,455,Hazardu,2020-04-07T13:14:35Z,"it's needed for `#include ""builtinresources.h""`",0,0.9952387809753418
404799481,455,Hazardu,2020-04-07T13:16:08Z,"since `core::icpubuffer` does not exist, i will replace this with `core::ibuffer`",0,0.9932327270507812
404801398,455,Hazardu,2020-04-07T13:18:48Z,are the files with shader code copied to the install dir as is now?,0,0.9955673813819885
405738515,455,devshgraphicsprogramming,2020-04-08T18:45:57Z,good,1,0.9361386299133301
405739018,455,devshgraphicsprogramming,2020-04-08T18:46:51Z,"you should check what the result (resulting files, directories, etc.) is when actually going through with installing to `program files`",0,0.993603527545929
405739232,455,devshgraphicsprogramming,2020-04-08T18:47:15Z,"should have been `#include ""irr/builtin/builtinresources.h""`",0,0.9944129586219788
412943569,455,devshgraphicsprogramming,2020-04-22T12:37:22Z,why is the binary include not private?,0,0.9680668711662292
412943877,455,devshgraphicsprogramming,2020-04-22T12:37:47Z,i need to think about this,0,0.705917239189148
412944339,455,devshgraphicsprogramming,2020-04-22T12:38:26Z,i need to see if this will work,0,0.956627607345581
417950315,455,devshgraphicsprogramming,2020-04-30T11:46:14Z,"actually scap this idea, we don't need this define here",0,0.9203729033470154
417950766,455,devshgraphicsprogramming,2020-04-30T11:46:57Z,we should solve it differently,0,0.9756057858467102
417955489,455,devshgraphicsprogramming,2020-04-30T11:56:10Z,still a problem?,0,0.8155316114425659
417956778,455,devshgraphicsprogramming,2020-04-30T11:58:44Z,what does it look like now?,0,0.9688002467155457
417956838,455,devshgraphicsprogramming,2020-04-30T11:58:52Z,and?,0,0.9768803119659424
420852261,455,Hazardu,2020-05-06T14:48:51Z,i am unsure how to pass the reference of sirrlichtcreationparameter to ifilesystem,0,0.6534953117370605
432382274,455,Hazardu,2020-05-29T09:58:55Z,not a problem anymore,0,0.8348711133003235
170435240,39,devshgraphicsprogramming,2018-02-24T22:56:11Z,i dont think this is a valid way to check for compression (could have encryption instead of compression too),0,0.8682742714881897
170435319,39,devshgraphicsprogramming,2018-02-24T22:59:55Z,"stack use here is redundant and possibly problematic. 1) we can't grab more stack safely (windows has only 1mb by default) 2) anything under 16k should not really be compressed 3) statistically the larger decompressed stuff will be compressed so when compressed, either: a) don't try and make dst=_stackptr and always malloc dst straight away and possibly use _stackptr as working area for dstcompressed data b) always malloc dstcompressed",0,0.9819731712341309
170435404,39,devshgraphicsprogramming,2018-02-24T23:04:04Z,"don't have this in two places. i know its in separate classes, but still d.r.y. unless you have a reason for actual different implementations.",0,0.9437971711158752
170435445,39,devshgraphicsprogramming,2018-02-24T23:06:06Z,what's this about? dont we releaseobj everything?,0,0.9680724143981934
170435852,39,devshgraphicsprogramming,2018-02-24T23:16:04Z,make the default ect_raw_buffers|ect_animation_data|ect_textures,0,0.9938015341758728
170436031,39,devshgraphicsprogramming,2018-02-24T23:25:15Z,what you use now for textures should really be ect_texture_paths although ect_textures should already be reserved,0,0.9929719567298889
170436903,39,Crisspl,2018-02-25T00:07:43Z,"it was done quite a long ago due to mem-leaks patching. irrlicht's reference counted objects has to be dropped after setting them as other object 'ownership'. e.g.: [code block] here before `desc` goes out of scope it has to dropped so that when meshbuffer is being destroyed, `desc`'s refcount will be ==1 and meshbuffer's destructor will actually destroy it. but it must be done after *all* such sets (since one object can be 'owned' more then once but drop must be only one) and above applies only for reference counted objects and not even all of them... so `regulardrop` is called after all the loading. what's more.. we want to support any kind of blobs so we have to assume `releaseobj` will not do just drop but actual `delete`. that's what i was talking about while whining about this reference-counting irrlicht's thing and not some kind of `unique_ptr`.",0,0.9897088408470154
170437649,39,Crisspl,2018-02-25T00:47:17Z,without this there'll be even more repeating (explicitly passing treshold values to writing function). besides.. i don't really see repeating in this.,0,0.8819701671600342
170437842,39,Crisspl,2018-02-25T00:57:06Z,"i know, changes will come along with encryption",0,0.9502434134483337
170438524,39,Crisspl,2018-02-25T01:38:09Z,"o, they already came actually",0,0.9819785952568054
170450760,39,devshgraphicsprogramming,2018-02-25T12:02:14Z,but why do you call releaseobj only on some blobs?,0,0.9749309420585632
170450782,39,devshgraphicsprogramming,2018-02-25T12:02:59Z,you have one lzmamemmngmnt for write and one lzmamemmngmnt for load ? should't this be in typedblob or cbawfile?,0,0.9944466352462769
170450924,39,Crisspl,2018-02-25T12:09:02Z,"oh.. i thought you were talking about props pointer :d sure, i just forgot about this. i'll move it to cbawfile.h",1,0.46433401107788086
170452700,39,Crisspl,2018-02-25T13:17:57Z,"because not all of our ref-counted objects has to be dropped (i.e. mesh through the whole loading time has ref-count==1 because no other object grabs it) and also, in case of non-reference-counted objects releaseobj would call just `delete` and we don't want it. there's just a finite set of objects that must be dropped and infinite set of possible blobs so...",0,0.7768500447273254
170465631,39,devshgraphicsprogramming,2018-02-25T20:18:56Z,"createmesh is designed to only ever return one mesh... so thats the only thing not getting deleted. loaded textures upon gettexture are added to the ivideodriver texture cache and can neither be dropped or deleted, removetexture must be called upon them... and i'm totally fine with cache pollution from unreferenced textures. since we have infinite set of possible blobs, every single one should have releaseobj called except for the top blobs being returned (like the root blob that we started loading). anything thats not being returned implicitly or explicitly by load routines should get destoroyed, because thats the very definition of a memory leak.",0,0.8858998417854309
171077960,39,devshgraphicsprogramming,2018-02-27T21:49:09Z,i wonder if there is a way to copy a freshly intialized context so we don't have to init new ones all the time? does evp have a clone/copy function?,0,0.9836843013763428
171078072,39,devshgraphicsprogramming,2018-02-27T21:49:31Z,shouldn't the function return outsize or at least write it to _outsize ?,0,0.9935592412948608
171078250,39,devshgraphicsprogramming,2018-02-27T21:50:10Z,why are you creating an encrypted file by default?,0,0.9794977903366089
171078937,39,devshgraphicsprogramming,2018-02-27T21:52:39Z,no.... just check against the specific blob header's data you are returning (make the function take the createobjs iterator of the blob that you chose as the mesh to load),0,0.9906372427940369
171080345,39,devshgraphicsprogramming,2018-02-27T21:57:43Z,"if you used evp padding properly inside core::runaes128gcm, you wouldn't need a redundant memcpy (hell even if you can't make that work, round up the `data` malloc to 16 bytes and you'll never need padding)",0,0.9834627509117126
171086890,39,devshgraphicsprogramming,2018-02-27T22:22:14Z,if you want to round up to a multiple of pot (size+pot-1)&(0-pot),0,0.9907093048095703
171091080,39,devshgraphicsprogramming,2018-02-27T22:39:11Z,the iv cannot be treated as a string.. must be 16 hex values,0,0.9735881686210632
171091112,39,devshgraphicsprogramming,2018-02-27T22:39:23Z,the cipherkey cannot be treated as a string.. must be 16 hex values,0,0.9760165214538574
167834678,36,devshgraphicsprogramming,2018-02-13T11:21:19Z,can we make it equal to scene::evai_count ? or do we run into circular refs?,0,0.9917154908180237
167835427,36,devshgraphicsprogramming,2018-02-13T11:25:15Z,"this makes the entire template class serializable, not just icpumeshdataformatdesc (which is a typedef for imeshdataformatdesc ) will have to convert the icpumeshdataformatdesc typedef into a class inheriting from imeshdataformatdesc and blobserializable",0,0.994401752948761
167836510,36,Crisspl,2018-02-13T11:30:42Z,"yes, i had to forward declare every class used by blobs to make them able to inherit from classes from cbawfile.h. so there's the best solution i came up with. i put assert (or rather `_irr_debug_break_if` so we will know when `evai_count` change [a link]",0,0.970943033695221
167837250,36,Crisspl,2018-02-13T11:34:43Z,"yea, i know it's a todo, got it in mind",0,0.7565634846687317
167837569,36,devshgraphicsprogramming,2018-02-13T11:36:19Z,"we initially wanted to support buffer typing (like in dx10) but opengl 4.0+ brought arb_buffer_storage which makes the buffer type irrelevant, since you explicitly state if the buffer should be on the gpu or not. aside from that opengl never had strict buffer typing, the buffer type was more of a hint as to whether to store the buffer in ram,dma ram or vram. so this e_buffer_type enum is deprecated.",0,0.9926695823669434
167837830,36,devshgraphicsprogramming,2018-02-13T11:37:42Z,"doesn't matter right now, but if we switch to a memory allocator that does not offer a free `realloc` then this will necessitate a memcpy.",0,0.9825870394706726
167838653,36,Crisspl,2018-02-13T11:41:36Z,it's one of things i wasn't sure about meaning. i'll ask you about this later anyway :),1,0.9280845522880554
167839281,36,devshgraphicsprogramming,2018-02-13T11:44:27Z,"layer of the framebuffer to attach to, for explanation see the opengl wiki for the topic of ""layered rendering"" values >= mean that a particular `layer` of a 2d or cubemap texture array, or 3d texture is attached to the framebuffer. value <0 means the entire 3d texture or, 2d texture or cubemap array is bound making the framebuffer layered, and enabling you to use gl_layer for layered rendering. look at example 15 to see layered rendering used on a cubemap to render point shadows in a single pass.",0,0.991523265838623
167840257,36,devshgraphicsprogramming,2018-02-13T11:49:11Z,only returns if the attachment has been attached (glframebuffer* called) and the fbo is queued up for rebinding. a return value of true does not mean that the attachment color format is renderable or that the combination of attachments is valid. only after rebindrevalidate() is called by the driver internally or by the user manually do the attachments drawn into by the framebuffer change.,0,0.9941482543945312
167842180,36,devshgraphicsprogramming,2018-02-13T11:57:50Z,"this is a general function present in all our video namespace objects which reference/use resizeable resources such as textures and buffers. arb_buffer_storage and arb_texture_storage remove the ability to respecify storage for opengl objects (essentially no gpu realloc) so to resize objects we need to destroy the old and create a new object, this means that the opengl handles (object ids) change so the new object needs to be bound in place of the old (texture to an fbo, buffer to a vao). whenever a bound object gets modified this way an atomic counter increases and this triggers the rebind* function to do more than just return `true`. the driver always calls these functions internally before using the object with a rebind*() function. however for the framebuffer you can call it manually after changing attachments as it will also call `glcheckframebufferstatus` which will make the rebindrevalidate() function return false if the color formats you are trying to render to are invalid (like rgb9_e5) or if a certain combination of attachments is invalid (try specifying the depth and stencil attachments to be different with any nvidia gpu). this function does nothing if no changes to bound objects have occurred.",0,0.9905143976211548
167842519,36,devshgraphicsprogramming,2018-02-13T11:59:13Z,"its best you use a gpu fence to ensure any operations which you've queued up that are writing to this buffer or reading from it have completed before you start using this pointer, otherwise you will have a race condition.",0,0.9771243929862976
167842778,36,devshgraphicsprogramming,2018-02-13T12:00:19Z,"we only support persistently mapped buffers with arb_buffer_storage. its almost the fastest across all cards, and is more in line with what vulkan has. please don't ask us to support buffer orpahning, or map/unmap.",0,0.9770087599754333
167843037,36,devshgraphicsprogramming,2018-02-13T12:01:31Z,start point,0,0.925471842288971
167843269,36,devshgraphicsprogramming,2018-02-13T12:02:36Z,if the point is behind the camera,0,0.9654784798622131
167843624,36,devshgraphicsprogramming,2018-02-13T12:04:33Z,doesn't have a windows implementation yet.,0,0.7907909154891968
167843863,36,Crisspl,2018-02-13T12:05:51Z,it's mostly not documented. i'll have to ask what `getbacktrace` actually do because i couldn't figure out.,0,0.7722434401512146
167844072,36,devshgraphicsprogramming,2018-02-13T12:07:01Z,good solution,1,0.9836632013320923
168931624,36,devshgraphicsprogramming,2018-02-17T20:07:48Z,careful about short-circuit evaluation,0,0.7559000849723816
168931647,36,devshgraphicsprogramming,2018-02-17T20:08:38Z,do we need dynamic_cast instead of static_cast ? (reinterpret is always wrong),0,0.9911706447601318
343915311,399,devshgraphicsprogramming,2019-11-07T22:49:03Z,this bad-boy needs a `core::clamp`,-1,0.990253746509552
343915370,399,devshgraphicsprogramming,2019-11-07T22:49:17Z,this bad-boy needs a `core::clamp`,-1,0.990253746509552
343915407,399,devshgraphicsprogramming,2019-11-07T22:49:22Z,this bad-boy needs a `core::clamp`,-1,0.990253746509552
344234999,399,AnastaZIuk,2019-11-08T15:41:02Z,"actuallly i don't get it technically. i mean, won't there be a maximum value of `int8_t` if i casted `double` to `int8_t` assuming my double variable is around 100k? won't it be clamped automaticaly even though?",0,0.9416373372077942
344256778,399,Crisspl,2019-11-08T16:25:20Z,"nah, it's ub. see [a link], paragraph 4.9.1. however on gcc indeed there is a clamp [a link] but ofc you cannot rely on behavior of single compiler since standard says that anything really can happen (just as well it could be wrap-around did in some tricky way or some random shit)",0,0.9160906076431274
344258104,399,AnastaZIuk,2019-11-08T16:28:08Z,"thank you so much, i'm gonna check it!",1,0.9876075387001038
344356380,399,devshgraphicsprogramming,2019-11-08T20:36:09Z,wrong range... maybe make a template intermediate function calling `core::clamp` that will deduce the limits from integer type?,0,0.9887474775314331
344356526,399,devshgraphicsprogramming,2019-11-08T20:36:38Z,don't touch these functions in `decode`,0,0.9835397005081177
347090520,399,devshgraphicsprogramming,2019-11-16T12:56:09Z,don't we have this function already in terms of `e_format` ?,0,0.9911361932754517
347090566,399,devshgraphicsprogramming,2019-11-16T12:57:24Z,input is always a `double` you can take away the boolean argument we have a function that is a template of `e_format` i believe its called `isformatnormalized ()` or something like that.,0,0.9930799603462219
347090606,399,devshgraphicsprogramming,2019-11-16T12:58:36Z,"its actually the other way round... the normalized gets a multiply up, the scaled stays as is reason is that normalized store the floating point [0,1] or [-1,1] range in all the ints, scaled just casts a float to an int.",0,0.9810882806777954
347245783,399,devshgraphicsprogramming,2019-11-18T08:22:17Z,make format a template parameter.,0,0.9856715798377991
347246130,399,devshgraphicsprogramming,2019-11-18T08:23:18Z,shouldn't this all be constexpr + constexpr function instead of reference?,0,0.9919186234474182
347246535,399,devshgraphicsprogramming,2019-11-18T08:24:26Z,ok answer accepted.,0,0.9319859743118286
347394186,399,AnastaZIuk,2019-11-18T13:58:07Z,is it a good practice or it goes on performance or you want it to be as you said just simply?,0,0.9520021677017212
347394263,399,AnastaZIuk,2019-11-18T13:58:15Z,"to fix, sure",0,0.9671816229820251
347400100,399,devshgraphicsprogramming,2019-11-18T14:09:22Z,"template parameter basically is guaranteed inlining and duplicate code generation for every value of `format`, a parameter the compiler may still leave some code to deal with a mutable `format`",0,0.9917699098587036
347498727,399,AnastaZIuk,2019-11-18T17:02:24Z,so is there such?,0,0.9913104772567749
347506402,399,devshgraphicsprogramming,2019-11-18T17:18:20Z,nope not for this.,0,0.5635604858398438
347507622,399,devshgraphicsprogramming,2019-11-18T17:20:58Z,"you don't need `&` on a constexpr, thats actually an error to do so",0,0.8725365400314331
347507889,399,devshgraphicsprogramming,2019-11-18T17:21:32Z,make it `constexpr inline uint64_t`,0,0.9925129413604736
347509966,399,AnastaZIuk,2019-11-18T17:25:52Z,"sure, to fix",0,0.9554805159568787
347786296,399,devshgraphicsprogramming,2019-11-19T08:30:32Z,you could use a `static_assert` plus `!core::is_any_of` in a future pr,0,0.9940423369407654
458158263,515,devshgraphicsprogramming,2020-07-21T14:50:38Z,nope triangles go in,0,0.8053930401802063
458158435,515,devshgraphicsprogramming,2020-07-21T14:50:49Z,always `440 core` or higher,0,0.9928580522537231
458158638,515,devshgraphicsprogramming,2020-07-21T14:51:04Z,is this your fix?,0,0.9901918172836304
458161419,515,devshgraphicsprogramming,2020-07-21T14:54:43Z,`linedraw.count`,0,0.9918897747993469
458161709,515,devshgraphicsprogramming,2020-07-21T14:55:04Z,ask if there's a built-in glsl include for these structs,0,0.9931746125221252
458162310,515,Crisspl,2020-07-21T14:55:50Z,"yea xd as i said, little bug in `clone()`",0,0.8588154911994934
458162535,515,devshgraphicsprogramming,2020-07-21T14:56:09Z,you need to declare the `in` and `out` variables in matched interfaces,0,0.9938350915908813
458163283,515,devshgraphicsprogramming,2020-07-21T14:57:02Z,"wrong, you do not use the `gpumesh` for drawing lines, you need to provide your own array of 16 bindings",0,0.8432111144065857
458164061,515,devshgraphicsprogramming,2020-07-21T14:58:04Z,"`linesbuffer.get(), 0u, trianglecount * 6 * sizeof(uint32_t), 6 * sizeof(uint32_t)` all of this is wrong, those parameters are for the buffer that holds `drawindirectparameters_t`",0,0.989924430847168
458164907,515,devshgraphicsprogramming,2020-07-21T14:59:04Z,this barrier is only for the `fillbuffer`,0,0.9940154552459717
458165612,515,devshgraphicsprogramming,2020-07-21T15:00:00Z,`assert(false)` we don't throw,0,0.9812319874763489
458166820,515,devshgraphicsprogramming,2020-07-21T15:01:33Z,"this needs to be `roundup(sizeof(drawindirectparameters_t),16)` and you need to fill it with sane values for everything except for the `count` which should be 0",0,0.9938130378723145
458167320,515,devshgraphicsprogramming,2020-07-21T15:02:12Z,"you should compute the `offsetof(drawindirectparameters_t,count)` and only zero-out the count",0,0.9944753050804138
460397522,515,devshgraphicsprogramming,2020-07-25T11:52:21Z,they are now in `irr/asset/pipeline.h` according to the merged #520,0,0.9940698146820068
460563319,515,Crisspl,2020-07-26T19:19:05Z,"what's going on? you have to create ds layout for things u declared in geom shader. then you have to add it to pipeline layout of all pipelines being used. ds layout is null while compiling shader because it really is null. your pipeline layout doesn't have layout for ds0. see megatexture example, there's example of modifying pipelines of loaded meshes. then ofc you have to create desc set with those 2 ssbos used by gs. i can help u with this on monday",0,0.8899549841880798
460563690,515,Crisspl,2020-07-26T19:23:05Z,"u dont need full (deep) copy, you need to copy only the pipeline object and maybe its layout, so pass 1u as arg to clone() (then it will copy pipeline, layout and specialized shaders)",0,0.9879305362701416
468071149,515,devshgraphicsprogramming,2020-08-10T17:42:09Z,"there are engine built-ins for that now, if you merge the latest `shader_pipeline`",0,0.9948087930679321
468143811,515,devshgraphicsprogramming,2020-08-10T19:51:22Z,"do tie breaking, so one triangle will have to create this line (out of the two that share the edge)... my suggestion is to only do this check for the top edge.",0,0.958081066608429
468145238,515,devshgraphicsprogramming,2020-08-10T19:54:07Z,"this is messed up loop.. it should produce two line points, not have thepossibility of producing 3",-1,0.9783014059066772
468145554,515,devshgraphicsprogramming,2020-08-10T19:54:45Z,why duplicate ?,0,0.8702549934387207
468146947,515,devshgraphicsprogramming,2020-08-10T19:57:24Z,this equation must be wrong.,0,0.6752187013626099
468752530,515,devshgraphicsprogramming,2020-08-11T17:39:54Z,could you undo changes to this file?,0,0.9932157397270203
469180591,515,devshgraphicsprogramming,2020-08-12T11:07:42Z,feed the max line count to the shader as a specialization constant.,0,0.992463231086731
469180648,515,devshgraphicsprogramming,2020-08-12T11:07:50Z,use the builtin include for this,0,0.9931617975234985
469998312,515,devshgraphicsprogramming,2020-08-13T14:33:55Z,"you forgot how pointer arithmetic works, either `reinterpret_cast (reinterpret_cast (ptr)+address)` or divide `address` by `sizeof(float)`",0,0.9930936098098755
469999654,515,devshgraphicsprogramming,2020-08-13T14:35:42Z,"you need to declare the downstreaming buffer (in `sirrlichtcreationparameters` at the start) to be of equal or larger size, otherwise download would need to happen in chunks.",0,0.9945101737976074
470000150,515,devshgraphicsprogramming,2020-08-13T14:36:20Z,"you're leaking memory, missing `multi_free` on success ;)",1,0.8027205467224121
368119465,412,devshgraphicsprogramming,2020-01-17T20:19:57Z,"polymorphic swizzle is a class that can swizzle the rgba componenents into a different arrangement at runtime, using it (non null pointer) obviously makes the whole process slower.",0,0.9495904445648193
368248134,412,devshgraphicsprogramming,2020-01-18T20:56:59Z,get the values with padding maybe? (or can you guarantee that you always use one region for the whole and only mip and its without padding),0,0.9945237636566162
372619382,412,devshgraphicsprogramming,2020-01-29T20:43:02Z,"no depth as in dimension size depth is 1u (image is always 2d) pixeldepth from tga header probably means how many bits per pixel (color depth), so its used for picking the correct e_format",0,0.9930651187896729
372619946,412,devshgraphicsprogramming,2020-01-29T20:44:22Z,"you could just reinterpret cast, since its same bytewise stuff.",0,0.9909880757331848
374048176,412,devshgraphicsprogramming,2020-02-03T11:19:41Z,it would be easier on the cpu and memory to flip before expanding to 3x the size during the convert,0,0.9893149137496948
374048643,412,devshgraphicsprogramming,2020-02-03T11:20:45Z,why not make `data` an icpubuffer that you can then use directly?,0,0.9916290044784546
374049032,412,devshgraphicsprogramming,2020-02-03T11:21:40Z,"wait, why, what happened?",0,0.5767298340797424
374197985,412,AnastaZIuk,2020-02-03T16:18:56Z,"well, all of the images placed in `color_space_test` doesn't contain informations about gamma. i was trying to generate it through gimp, but i couldn't as well, so i decided to bypass it",0,0.9469509124755859
374207823,412,devshgraphicsprogramming,2020-02-03T16:35:22Z,"well sure, but leave the code for handling gamma, if there is no info about gamma then assume 2.233333333..............",0,0.6634848713874817
374264693,412,AnastaZIuk,2020-02-03T18:27:13Z,"okay, i will patch it",0,0.9723735451698303
374597922,412,devshgraphicsprogramming,2020-02-04T10:46:02Z,"why is there a template on t, why are you incrementing the `in` and `out` by the same stride that is in pixels and not in bytes?",0,0.9748727083206177
374693366,412,AnastaZIuk,2020-02-04T14:14:17Z,"because somebody has created it, but if it comes to stride, i need to fix it",0,0.8488652110099792
374725465,412,devshgraphicsprogramming,2020-02-04T15:06:13Z,just use uint8_t* always.,0,0.9910392165184021
374827813,412,devshgraphicsprogramming,2020-02-04T17:54:50Z,you're using `channels` wrong when in fact you should be using pixel block bytesize (tga formats always have a 1x1 block physical size),0,0.9901067614555359
374889690,412,AnastaZIuk,2020-02-04T19:55:45Z,"my mistake, to fix",-1,0.9400224685668945
374899921,412,devshgraphicsprogramming,2020-02-04T20:17:34Z,still fucking wrong.,-1,0.9801284670829773
373663008,416,devshgraphicsprogramming,2020-01-31T20:06:35Z,won't that make it `zlibstaticzlibstatic` ?,0,0.9918445944786072
373786730,416,AnastaZIuk,2020-02-01T15:53:31Z,"i think it won't, why should it make it like that?. i've checked paths in some vs projects - seems to be done well + launched, so it works",0,0.9747427701950073
377609170,416,devshgraphicsprogramming,2020-02-11T12:39:56Z,"this needs to happen in the blob instantiation, as you need to check the flag in the blob (if mesh was saved lh or rh) then only flip if `savedflag!=requestedflag`",0,0.9940165281295776
377611230,416,AnastaZIuk,2020-02-11T12:44:47Z,how to save it if there is no member for blobs for that - so no need for patching constructors for those blobs? should it be saved in header of blob?,0,0.9941539168357849
377613685,416,AnastaZIuk,2020-02-11T12:50:05Z,i have talked to criss recently and afaik it can't be saved in it (but not sure),0,0.7411678433418274
377614525,416,devshgraphicsprogramming,2020-02-11T12:51:53Z,"don't flip, just save the flag into the blob (left or right handed)",0,0.9859892129898071
377614858,416,devshgraphicsprogramming,2020-02-11T12:52:37Z,there's no reason for you to touch the final bone hierarchy blob because you won't be changing it,0,0.9830469489097595
377615235,416,AnastaZIuk,2020-02-11T12:53:23Z,so should i delete it?,0,0.9921548962593079
377615330,416,AnastaZIuk,2020-02-11T12:53:36Z,okay,0,0.7269688844680786
377640049,416,devshgraphicsprogramming,2020-02-11T13:41:32Z,yes,0,0.9659429788589478
377645556,416,devshgraphicsprogramming,2020-02-11T13:51:39Z,"you save the left/right hand flag as an extra member of the meshbuffer blob. (old files get upgraded by making the new version blob a blob that always has lh-flag) if the flag does not agree, then when loading (in the finalization step), you need to create a new `icpubuffer` per meshbuffer just for the positions (and normals, if present) and write out flipped values to it (create a copy of the meshbuffer with the old position and normals buffers attached, then change the attr0 and attr3 buffers, and via the use of `getattribute` and `setattribute` you can extract, flip and save the new values)",0,0.9926901459693909
378541676,416,devshgraphicsprogramming,2020-02-12T22:08:58Z,"you need to patch this assert, because you added a member the struct will grow in size.",0,0.989701509475708
378541832,416,devshgraphicsprogramming,2020-02-12T22:09:21Z,"don't use `bool` they have undefined size across platforms, uint8_t is more appropriate.",0,0.9819990396499634
378542041,416,devshgraphicsprogramming,2020-02-12T22:09:46Z,still need aliases for ver2 to ver0,0,0.9907655715942383
378542525,416,devshgraphicsprogramming,2020-02-12T22:10:53Z,this bad boy should be set by the writer.,-1,0.984281063079834
378542919,416,devshgraphicsprogramming,2020-02-12T22:11:49Z,"this constructor will never be used again, it can go (you will never make a new legacy blob from object, only new blob from old blob)",0,0.9899868369102478
379424634,416,AnastaZIuk,2020-02-14T13:17:52Z,"matt is it neseccary if there is no change since ver0 to ver2 up? i have exchaned meshbuffers using 0 version (that are the same till v3) for version 2 and i find it valid, it compiles",0,0.9706174731254578
379424906,416,AnastaZIuk,2020-02-14T13:18:32Z,"i haven't known it yet though, to fix",0,0.8630977272987366
379425085,416,AnastaZIuk,2020-02-14T13:18:57Z,"okay, to remove",0,0.9625367522239685
379821718,416,devshgraphicsprogramming,2020-02-15T09:50:36Z,we always provide all the v0 to vlatest at least as aliases.,0,0.9921825528144836
379825526,416,devshgraphicsprogramming,2020-02-15T11:18:29Z,this duplicates the above function i think?,0,0.9721283316612244
382029361,416,devshgraphicsprogramming,2020-02-20T14:23:12Z,"kill this function, we don't use it",-1,0.7491192817687988
382058105,416,devshgraphicsprogramming,2020-02-20T15:06:40Z,"little optimization: you can skip processing (flipping) the mesh if the reference count `<2` (the stack was the only reference, mesh will get dropped as soon as stack lets go)",0,0.9896970391273499
345893526,401,AnastaZIuk,2019-11-13T17:22:50Z,guys please help me i have no idea how i can determine which buffer corresponds to which attribute is there actaully a way to this? let's say that i would like to get normals buffer how can i check it in our engine?,0,0.6913277506828308
345930717,401,Crisspl,2019-11-13T18:39:41Z,[a link] also see how getattribpointer() works [a link],0,0.987941324710846
346535966,401,devshgraphicsprogramming,2019-11-14T20:42:59Z,"there's a vague convention that some loaders rely on: - 0 : position (but there's a query for that) - 1 : uv - 2 : color - 3 : normal not sure if i got 1 and 2 the right way around, see the obj loader, its a good reference. some formats like `.baw` or `.gltf` don't really give a shit which attribute does what and can save more than the pos+uv+color+normal.",0,0.6717364192008972
346537778,401,devshgraphicsprogramming,2019-11-14T20:47:34Z,"call it `ewpf_mesh_is_right_handed` it does not mean it will be flipped. explanation: if a mesh format is right-handed then no flipping for right handed input mesh, but flipping for left handed input mesh (the default). example: possibly obj (i think we flip when we load by default), definitely `.gtlf` if a mesh format is left-handed then flip for right-handed input but no flipping for left-handed input. example: directx .x",0,0.9947271943092346
346538057,401,devshgraphicsprogramming,2019-11-14T20:48:15Z,what's `loadderflagsusedforwriting` doing here?,0,0.9954763054847717
346538141,401,devshgraphicsprogramming,2019-11-14T20:48:27Z,btw move the enum inside `iassetwriter`,0,0.9941233992576599
346538329,401,devshgraphicsprogramming,2019-11-14T20:48:54Z,also input to function is const so you can't flip in-place on the mesh,0,0.9911766052246094
347089710,401,AnastaZIuk,2019-11-16T12:31:41Z,"we have to know the orientation of loaded mesh, i mean the orientation applied to mesh we want to write/save, haven't we?",0,0.9914652705192566
347090416,401,devshgraphicsprogramming,2019-11-16T12:52:14Z,"your proposed approach makes no sense, for two reasons: 1. not every mesh to be written is loaded (some are generated, i.e. geometry creator) 2. you will use the `writerflags` to tell the writer if the meshes being passed in are right handed or not (each writer will decide internally whether to flip or not depending on the convention for the format or if the format can take the orientation metadata like .baw)",0,0.9920209050178528
347104181,401,AnastaZIuk,2019-11-16T19:27:23Z,"thank you guys, i will remember those hints",1,0.9201276898384094
347248707,401,devshgraphicsprogramming,2019-11-18T08:30:44Z,"this flag shouldn't exist, you should know whether mesh should be written as right handed from the format you're writing to.",0,0.9883748292922974
347392067,401,AnastaZIuk,2019-11-18T13:54:19Z,what do you mean? don't we want to write as left or right in dependence of user choice?,0,0.9714197516441345
347398369,401,devshgraphicsprogramming,2019-11-18T14:05:53Z,"the mesh format almost always has a convention, if you write out as right handed to .x then all the model viewers in the world will see the model wrong.",0,0.9787054657936096
347406708,401,AnastaZIuk,2019-11-18T14:22:08Z,"okay, so i'll throw out 'ewpf_write_right_handed'",0,0.9881094098091125
347490239,401,devshgraphicsprogramming,2019-11-18T16:46:48Z,great,1,0.9416693449020386
347506828,401,devshgraphicsprogramming,2019-11-18T17:19:14Z,so ply is right handed format?,0,0.988581120967865
347507164,401,devshgraphicsprogramming,2019-11-18T17:19:59Z,stl is right handed too?,0,0.9888851642608643
347512821,401,AnastaZIuk,2019-11-18T17:31:31Z,"as we have spoken, right? default right, but to make it left there was a flip at beggining btw google says that it is righthanded :d",1,0.9845556616783142
347515474,401,devshgraphicsprogramming,2019-11-18T17:37:29Z,"ok cool, nice to paste a reference in the comments.",1,0.9763479828834534
347515566,401,devshgraphicsprogramming,2019-11-18T17:37:41Z,so stl and ply are right handed?,0,0.9918910264968872
347596117,401,AnastaZIuk,2019-11-18T20:36:04Z,they are righthanded,0,0.9721141457557678
347640469,401,devshgraphicsprogramming,2019-11-18T22:21:23Z,"cool, never knew that ;)",1,0.9926597476005554
272800308,244,devshgraphicsprogramming,2019-04-06T16:07:21Z,i trust you this works ;),1,0.993608832359314
272810017,244,devshgraphicsprogramming,2019-04-06T21:26:04Z,"ntdll makes the shared lib, not the static that we want",0,0.9675405025482178
517652370,553,Hazardu,2020-11-04T21:52:05Z,"i'd to mess up somewhere, as the returned buffer is full of zeroes. i do not know whether it is initially filled with zeroes and never assigned (messed up binding), all the methods in the compute shader return zero or if the buffer gets zeroed out during down streaming.",0,0.6028600931167603
517652735,553,Hazardu,2020-11-04T21:52:53Z,here i need to emulate what is being done on the gpu and then compare it to the downloaded result,0,0.9887414574623108
517653071,553,Hazardu,2020-11-04T21:53:37Z,don't fire me for using `goto` pls,0,0.8379587531089783
518680359,553,devshgraphicsprogramming,2020-11-06T11:04:23Z,pack your things,0,0.9399484992027283
518681999,553,devshgraphicsprogramming,2020-11-06T11:07:31Z,"this formula is correct, although faster thing would be to `assert` that ""subgroupsize is power of two"" then compute `subgroupoffset = data+localinvocationindex&(subgroupsize-1u);`",0,0.994189977645874
518683121,553,devshgraphicsprogramming,2020-11-06T11:09:35Z,why 200% the size?,0,0.8643893003463745
518683524,553,devshgraphicsprogramming,2020-11-06T11:10:20Z,use c++11 mersenne twister etc.,0,0.9931966066360474
518683648,553,devshgraphicsprogramming,2020-11-06T11:10:38Z,ran only has a 16bit range or something like that,0,0.9792535305023193
518684513,553,devshgraphicsprogramming,2020-11-06T11:12:21Z,"dont do the long way of creating an icpubuffer from the array, and then converting it... there's a special function in the driver called ""create filled device local on ded mem"" iirc which only takes buffer size and contents as parameter",0,0.9784119725227356
518685701,553,devshgraphicsprogramming,2020-11-06T11:14:52Z,iirc push constants size are given in bytes and sizes+offsets need to be aligned to 4 bytes,0,0.99050372838974
518686658,553,devshgraphicsprogramming,2020-11-06T11:16:49Z,leave a comment that subgroup size is hardcoded to 4 (there's a requirement that workgroup be at least half the size) for now and max workgroup size is hardcoded to 256,0,0.9932880997657776
518687212,553,devshgraphicsprogramming,2020-11-06T11:18:01Z,you're missing `layout (workgroup_size_x=_irr_glsl_workgroup_size_) in;` to actually declare the size of the workgroup to glsl,0,0.9949362277984619
518687997,553,devshgraphicsprogramming,2020-11-06T11:19:39Z,# **get into the habit of declaring a `delete/free` as soon as you type out a `new/malloc` with your keyboard**,0,0.9836812019348145
518688789,553,devshgraphicsprogramming,2020-11-06T11:21:15Z,"`gl_localinvocationindex` is the index within a workgroup, not within all dispatches",0,0.9909058809280396
518690943,553,devshgraphicsprogramming,2020-11-06T11:25:34Z,"this is wrong, if you have 32 milion invocations to process, and between 2 and 1024 invocations per workgroup.. then you need to divide by the workgroup size as well because dispatch counts in workgroups not invocations you also need to handle the case when the number of invocations in a workgroup times the size of a uint doesn't divide the buffer size exactly",-1,0.5741370320320129
518696378,553,devshgraphicsprogramming,2020-11-06T11:37:18Z,"you compute shader never runs, see other comments",0,0.9568088054656982
518697772,553,devshgraphicsprogramming,2020-11-06T11:40:14Z,"note for the future, because you're only using the buffer for a copy and then reusing it as an ssbo, only the following combination of flags is required `gl_buffer_update_barrier_bit|gl_shader_storage_barrier_bit`",0,0.9946672916412354
518742357,553,Hazardu,2020-11-06T13:13:31Z,i was testing if downloading fails,0,0.9168381690979004
518914136,553,Hazardu,2020-11-06T17:58:50Z,"well, that was the code you provided me with, and `subgroupoffset` was never used",0,0.9940816760063171
518916753,553,devshgraphicsprogramming,2020-11-06T18:03:46Z,"it was to emulate a single workgroup, not the whole dispatch",0,0.9819238781929016
519211873,553,Hazardu,2020-11-07T19:49:35Z,"`workgroup_size_x` didnt exist, so i used `local_size_x `",0,0.9942600727081299
519212601,553,devshgraphicsprogramming,2020-11-07T19:57:33Z,its wront you need the subgroup offset to data :person_facepalming:,0,0.9894204139709473
519212635,553,devshgraphicsprogramming,2020-11-07T19:58:15Z,you could have put `<subgroupinvocationid` in the for-loop condition,0,0.9952164888381958
519212636,553,Hazardu,2020-11-07T19:58:18Z,so it actually had a use then...,0,0.9835266470909119
519212648,553,devshgraphicsprogramming,2020-11-07T19:58:27Z,you could have put `<=subgroupinvocationid` in the forloop condition instead of the break,0,0.9948769211769104
519212672,553,devshgraphicsprogramming,2020-11-07T19:58:45Z,data offset!,0,0.736083447933197
519212703,553,devshgraphicsprogramming,2020-11-07T19:59:09Z,data offset!,0,0.736083447933197
519213343,553,devshgraphicsprogramming,2020-11-07T20:06:06Z,"everything is fine, but the variable name is misleading",0,0.87486332654953
432708911,499,devshgraphicsprogramming,2020-05-29T20:03:18Z,update help text about file and channels,0,0.9909570217132568
432709598,499,devshgraphicsprogramming,2020-05-29T20:04:53Z,all files need to have proper extensions on the input,0,0.9870575070381165
432709926,499,devshgraphicsprogramming,2020-05-29T20:05:33Z,also rewrite with the old files so you can run and test them (use same input files),0,0.9923047423362732
432710273,499,devshgraphicsprogramming,2020-05-29T20:06:14Z,i need this working for monday,0,0.9577181339263916
432962903,499,AnastaZIuk,2020-05-31T16:30:40Z,done,0,0.8974218964576721
432962910,499,AnastaZIuk,2020-05-31T16:30:44Z,done,0,0.8974218964576721
432962921,499,AnastaZIuk,2020-05-31T16:30:53Z,done,0,0.8974218964576721
433112461,499,devshgraphicsprogramming,2020-06-01T08:42:50Z,what about checking if there are too few arguments?,0,0.8998091220855713
433113298,499,devshgraphicsprogramming,2020-06-01T08:44:34Z,"rephrase ""channel name for multilayered exr images, a layer with most matching name will be chosen (one that contains the channel name as a substring at the earliest position).""",0,0.9925591945648193
433114032,499,devshgraphicsprogramming,2020-06-01T08:46:11Z,"jesus don't do esposure bias 10.2, but -2.0, like before so we can at least compare outputs to previous",0,0.9918219447135925
433122261,499,AnastaZIuk,2020-06-01T09:04:28Z,"oh, i have copied it from my previous version uh",-1,0.5219965577125549
433124595,499,AnastaZIuk,2020-06-01T09:09:52Z,done,0,0.8974218964576721
433124618,499,AnastaZIuk,2020-06-01T09:09:55Z,done,0,0.8974218964576721
433124690,499,AnastaZIuk,2020-06-01T09:10:02Z,done,0,0.8974218964576721
433208633,499,devshgraphicsprogramming,2020-06-01T12:37:14Z,"tonemapper parameters are required, don't even bother with defaults... two parameters and tonemapping method must always be present",0,0.9708359241485596
433208650,499,devshgraphicsprogramming,2020-06-01T12:37:17Z,"tonemapper parameters are required, don't even bother with defaults... two parameters and tonemapping method must always be present",0,0.9708359241485596
433209095,499,devshgraphicsprogramming,2020-06-01T12:38:12Z,its fine if its not exr.,0,0.9805623292922974
433209180,499,devshgraphicsprogramming,2020-06-01T12:38:24Z,i check formats later and stuff,0,0.9761614203453064
433210024,499,devshgraphicsprogramming,2020-06-01T12:40:14Z,what's the deal with this?,0,0.9621179103851318
433482696,499,AnastaZIuk,2020-06-01T20:51:31Z,"you have started something with the filter and commented it, so i did it for you if you were to use it",0,0.9716864228248596
433482829,499,AnastaZIuk,2020-06-01T20:51:45Z,okay,0,0.7269688844680786
433890784,499,AnastaZIuk,2020-06-02T13:51:06Z,"it will be going through validation, done",0,0.9717475771903992
433890842,499,AnastaZIuk,2020-06-02T13:51:10Z,"it will be going through validation, done",0,0.9717475771903992
467818663,524,devshgraphicsprogramming,2020-08-10T10:37:33Z,nah lets just get rid of these functions and keep the ones with `vec2` or `vec3` random number input only.,0,0.9916536211967468
467888992,524,devshgraphicsprogramming,2020-08-10T13:06:39Z,ndf,0,0.8240270614624023
467889289,524,devshgraphicsprogramming,2020-08-10T13:07:07Z,every bsdf sample generation function takes a anisotropic interaction ;),1,0.9481346607208252
467889880,524,devshgraphicsprogramming,2020-08-10T13:08:14Z,"don't do dielectric yet, the whole process of sampling is 100% different",0,0.5837544202804565
467902587,524,devshgraphicsprogramming,2020-08-10T13:27:53Z,"seems that you could remove `absvdoth` from both remainder and pdf, they cancel out",0,0.9894576668739319
467902628,524,devshgraphicsprogramming,2020-08-10T13:27:58Z,"seems that you could remove `absvdoth` from both remainder and pdf, they cancel out",0,0.9894576668739319
468063559,524,Crisspl,2020-08-10T17:28:11Z,"nah, ndf is in `bxdf/brdf/ndf/blinn_phong.glsl`. this is ndf with some shadowing term incorporated, generally this model is weird and has lots of definitions... [a link] [a link]",-1,0.9506722092628479
468102329,524,devshgraphicsprogramming,2020-08-10T18:38:57Z,interesting,0,0.9451717138290405
468493334,524,devshgraphicsprogramming,2020-08-11T10:53:06Z,you want to divide the `dx` derivatives by screen x resolution similarly for `dy` divide by screen y,0,0.9912292957305908
468494399,524,devshgraphicsprogramming,2020-08-11T10:55:14Z,"btw i made a glsl loader, it will produce an asset bundle with a `icpuspecializedshader` iirc.",0,0.9934684038162231
468496398,524,devshgraphicsprogramming,2020-08-11T10:59:14Z,i'd suggest outputting `abs(det-s.ndotl/brdf_cos_eval(s))` because sometimes the determinant can be 0 and value of brdf should never be 0 for a generated sample,0,0.9923027753829956
468598378,524,Crisspl,2020-08-11T13:55:48Z,"oh, nice, thats useful",1,0.9318259954452515
468631111,524,devshgraphicsprogramming,2020-08-11T14:36:29Z,oh boy you screwed up,-1,0.9707742929458618
468689050,524,devshgraphicsprogramming,2020-08-11T15:56:28Z,actually multiply,0,0.9339960217475891
469974609,524,devshgraphicsprogramming,2020-08-13T14:02:24Z,do a proper if statement not a ternary operator (skipping that amount of operations will actually pay off for the gpu),0,0.9842750430107117
469975039,524,devshgraphicsprogramming,2020-08-13T14:03:01Z,same everywhere else,0,0.9252464175224304
469978275,524,devshgraphicsprogramming,2020-08-13T14:07:51Z,i propose [code block],0,0.9880000948905945
469986419,524,devshgraphicsprogramming,2020-08-13T14:18:23Z,i think there's supposed to be a factor of 2.0 here p.s. we should make `irr_glsl_ggx_smith_g2_over_g1_wo_numerator`,0,0.991554319858551
469989936,524,devshgraphicsprogramming,2020-08-13T14:23:03Z,i think they'd be of the form `0.5*(1+devsh_v/ndotv)/(ndotl*devsh_v+ndotv*devsh_l)`,0,0.9929244518280029
469994807,524,devshgraphicsprogramming,2020-08-13T14:29:14Z,"mm or maybe a `irr_glsl_ggx_smith_g2_over_g1_wo_numerator_with_cos` could be more useful, cause it could have the `ndotl` factored in i suppose",0,0.9944823980331421
470053482,524,devshgraphicsprogramming,2020-08-13T15:52:10Z,for stuff like that i recommend `uintbitstofloat(0xbitpatternforinf)`,0,0.9914803504943848
470058051,524,devshgraphicsprogramming,2020-08-13T15:59:11Z,"pretty sure it should be ([a link] `pdf = irr_glsl_ggx_trowbridge_reitz(a2,s.ndoth*s.ndoth)*irr_glsl_ggxsmith_g1_wo_numerator(interaction.ndotv,a2,one_minus_a2)*0.5;`",0,0.9835631847381592
470208438,524,devshgraphicsprogramming,2020-08-13T19:51:29Z,todo for beckmann,0,0.980313241481781
470217868,524,devshgraphicsprogramming,2020-08-13T20:08:10Z,do for beckmann,0,0.9877138137817383
510344106,552,devshgraphicsprogramming,2020-10-22T17:41:46Z,dont add these,-1,0.5391532182693481
510344451,552,devshgraphicsprogramming,2020-10-22T17:42:26Z,what happened to `overrideusesmotionblur ` in the newer sdk?,0,0.99470454454422
510344610,552,Hazardu,2020-10-22T17:42:42Z,its gone,-1,0.5049689412117004
510344643,552,devshgraphicsprogramming,2020-10-22T17:42:45Z,"undo everything below this line, i need to redo it anyway",0,0.8991135358810425
511506241,552,devshgraphicsprogramming,2020-10-24T19:30:24Z,change these two pointers into `cudeviceptr`,0,0.994063675403595
511506398,552,devshgraphicsprogramming,2020-10-24T19:32:01Z,let me know how much memory the denoiser says it needs for the scratch size with a 1080p tile,0,0.9898596405982971
511582062,552,Hazardu,2020-10-25T11:14:02Z,470 081 920 bytes which is 448 mib,0,0.9885632991790771
512948347,552,devshgraphicsprogramming,2020-10-27T18:54:03Z,"try using 1024x1024 a 2048x2048 tile, it might expose logic errors when your test image is not divisible by tile size exactly",0,0.9785445928573608
512949435,552,devshgraphicsprogramming,2020-10-27T18:55:51Z,remember to change back and do download in 64mb sized parts,0,0.9805088043212891
512952928,552,devshgraphicsprogramming,2020-10-27T19:02:01Z,what happened here?,0,0.9823284149169922
512955033,552,Hazardu,2020-10-27T19:05:47Z,"after changing tile size to 1024 by 1024, images are skipped ` while executing a kernel, the device encountered a load or store instruction on an invalid memory address. this leaves the process in an inconsistent state and any further cuda work will return the same error. to continue using cuda, the process must be terminated and relaunched. `",0,0.97786945104599
512956669,552,devshgraphicsprogramming,2020-10-27T19:08:53Z,always tile your image,0,0.9797597527503967
512961736,552,devshgraphicsprogramming,2020-10-27T19:17:42Z,"first of all, just iterate over denoiser types and not input images. secondly why are you multiplying by 2 ?",0,0.9791659712791443
512963135,552,devshgraphicsprogramming,2020-10-27T19:20:09Z,actually it would be good to not clamp `maxresolution` here and use the tile size directly,0,0.9935504198074341
512963524,552,devshgraphicsprogramming,2020-10-27T19:20:51Z,"instead of clamping max resolution, just use tile sizes here",0,0.9901108145713806
512964091,552,devshgraphicsprogramming,2020-10-27T19:21:35Z,why did you add an extra link?,0,0.9824838042259216
512964417,552,Hazardu,2020-10-27T19:21:59Z,"well, size of scratch is currently not calculated properly, and it turns out ~1.3 times smaller than needed",0,0.9474108815193176
512969666,552,devshgraphicsprogramming,2020-10-27T19:28:20Z,"`pixelbuffersize` is important because it gets used for storing the actual image as a whole for autoexposure and luminancce measure, you're gonna have a problem if this buffer is sized for a tile and not a whole image.",0,0.9841481447219849
513001433,552,devshgraphicsprogramming,2020-10-27T20:14:54Z,"duplicate code is bad, just tile always",-1,0.9835141897201538
513684473,552,devshgraphicsprogramming,2020-10-28T18:50:05Z,you don't need these two variables,0,0.9659562110900879
513685547,552,devshgraphicsprogramming,2020-10-28T18:51:53Z,no still keep separate maxresolution per denoiser type! just keep this as it was!,0,0.4757186770439148
513686245,552,devshgraphicsprogramming,2020-10-28T18:53:08Z,tiled download would be nice.,1,0.5893325805664062
164545791,14,devshgraphicsprogramming,2018-01-29T19:55:21Z,what about a blob for the _mesh itself!?,0,0.9891675710678101
164547343,14,devshgraphicsprogramming,2018-01-29T20:01:09Z,maybe boot this and replace with a 'void* getdata() {return this;}',0,0.9941167831420898
164548397,14,devshgraphicsprogramming,2018-01-29T20:04:32Z,"all this stuff is nice, but not very maintanable.. maybe make a ""struct meshbufferblobv1 : public blob"" which will construct itself from an icpumeshbuffer* and also use the stack instead of heap! making our exporter faster!",1,0.985040545463562
164548676,14,devshgraphicsprogramming,2018-01-29T20:05:34Z,"all this stuff is nice, but not very maintanable.. maybe make a ""struct meshdataformatdescblobv1 : public blob"" which will construct itself from an imeshdataformatdesc * and also use the stack instead of heap! making our exporter faster!",1,0.9891939163208008
164549086,14,devshgraphicsprogramming,2018-01-29T20:07:11Z,"loop unrolling will help and happen automagically by the compiler... but! the memory is being walked very erratically, which the compiler won't fix, its much better for performance to have many loops for each array to be saved.",0,0.8409625887870789
164549458,14,devshgraphicsprogramming,2018-01-29T20:08:30Z,"this is complicated to maintain, maybe we should set blobsizedecompr later? or at least as sizeof(meshbufferblobv1) ?",0,0.9881716370582581
164549611,14,devshgraphicsprogramming,2018-01-29T20:09:09Z,"this is complicated to maintain, maybe we should set blobsizedecompr later? or at least as sizeof(imeshdataformatdescblobv1) ?",0,0.9903871417045593
164550389,14,Crisspl,2018-01-29T20:12:08Z,"considered as not needed since it's just collection of ptrs to mesh buffers. plus bounding box, but this can be recalculated after adding all loaded mesh buffers.",0,0.9936915636062622
164550909,14,Crisspl,2018-01-29T20:14:05Z,"yea, better",0,0.8947589993476868
164550992,14,devshgraphicsprogramming,2018-01-29T20:14:24Z,"sure, but think what happens once we put more than one imesh in a file. p.s. the bounding box can be quite expensive to recalculate for a skinned mesh.",0,0.9368081092834473
164551014,14,Crisspl,2018-01-29T20:14:28Z,"nice idea, thanks",1,0.9924482107162476
165057984,14,devshgraphicsprogramming,2018-01-31T13:55:26Z,use placement new to create a meshblob over a larger data memory allocation,0,0.9933168888092041
165058390,14,devshgraphicsprogramming,2018-01-31T13:56:58Z,adt violation,-1,0.8889485001564026
165061468,14,devshgraphicsprogramming,2018-01-31T14:08:18Z,change to pointer,0,0.9886364340782166
176917109,49,devshgraphicsprogramming,2018-03-24T18:58:31Z,also need a yield() equivalent for when milliseconds==0,0,0.9913854598999023
176917117,49,devshgraphicsprogramming,2018-03-24T18:58:44Z,also need a yield() equivalent for when nanoseconds==0,0,0.9922856092453003
176917323,49,devshgraphicsprogramming,2018-03-24T19:07:46Z,std::atomic is neither copyable nor movable. -- volatile int used to work for this... but we never copy or move these,0,0.9285334348678589
176917817,49,devshgraphicsprogramming,2018-03-24T19:31:41Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel,0,0.9940392971038818
176917819,49,devshgraphicsprogramming,2018-03-24T19:31:49Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel,0,0.9940392971038818
176917823,49,devshgraphicsprogramming,2018-03-24T19:31:59Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel,0,0.9940392971038818
176917961,49,devshgraphicsprogramming,2018-03-24T19:38:17Z,this is a lock promotion so its a release and get rolled into one... so please use std::memory_order_acq_rel,0,0.9927210211753845
176917970,49,devshgraphicsprogramming,2018-03-24T19:38:36Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel,0,0.9940392971038818
176918040,49,devshgraphicsprogramming,2018-03-24T19:41:57Z,"but theoretically because it would be sandwiched between two std::memory_order_acq_rel, we could let it be a relaxed",0,0.9937639832496643
176918044,49,devshgraphicsprogramming,2018-03-24T19:42:14Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel,0,0.9940392971038818
176918045,49,devshgraphicsprogramming,2018-03-24T19:42:21Z,more than two threads can use this atomic lock so please use std::memory_order_acq_rel,0,0.9940392971038818
176918148,49,devshgraphicsprogramming,2018-03-24T19:46:30Z,these babies also need to be ported to c++11,0,0.987888514995575
205717031,49,devshgraphicsprogramming,2018-07-27T09:26:01Z,"this add+store needs to be atomic, the return type can be different/normal but the add needs to be atomic",0,0.9898803234100342
205717325,49,devshgraphicsprogramming,2018-07-27T09:27:02Z,everything below,0,0.9188801050186157
205825335,49,Crisspl,2018-07-27T16:12:19Z,"it is atomic, look at [a link]",0,0.9680802226066589
205825554,49,Crisspl,2018-07-27T16:13:22Z,"they are, but in their `#if` branch",0,0.9941278696060181
205830413,49,devshgraphicsprogramming,2018-07-27T16:31:42Z,did we ever solve the acquire release semantics on the spinlocks?,0,0.9937578439712524
205830651,49,devshgraphicsprogramming,2018-07-27T16:32:37Z,oh overlooked the change in define for fw_atomiccounter but the return type of that function still needs to change to a plain int32_t,0,0.8943628072738647
205837986,49,Crisspl,2018-07-27T17:01:51Z,i think so. anyway everything should be in out comments here,0,0.9789425730705261
205838179,49,Crisspl,2018-07-27T17:02:34Z,"yea, i just noticed",0,0.8877391815185547
278643259,265,devshgraphicsprogramming,2019-04-25T16:58:35Z,lovely.,1,0.9808438420295715
278717228,265,devshgraphicsprogramming,2019-04-25T20:24:52Z,rationale?,0,0.9105374217033386
278717540,265,devshgraphicsprogramming,2019-04-25T20:25:44Z,"i thought we already had ""wnoerrr=ignored-attributes""",0,0.9815332293510437
278743594,265,devshgraphicsprogramming,2019-04-25T21:43:24Z,`-wno-error=ignored-attributes` doesn't take care of this?,0,0.99055415391922
278777058,265,Crisspl,2019-04-26T00:34:52Z,hm apparently not,-1,0.7573474645614624
278838377,265,devshgraphicsprogramming,2019-04-26T07:42:28Z,why special directory for config?,0,0.9300602674484253
279082494,265,devshgraphicsprogramming,2019-04-26T19:51:07Z,if you dlete cmake cache and reconfigure+regenerate?,0,0.9938363432884216
279082721,265,devshgraphicsprogramming,2019-04-26T19:51:49Z,that shouldn't happen so there should be an `assert(false)` before the break,0,0.9923904538154602
279082886,265,devshgraphicsprogramming,2019-04-26T19:52:25Z,again assert,0,0.9846857786178589
279084075,265,Crisspl,2019-04-26T19:56:41Z,"tried, nothing anyway",0,0.7320669293403625
394628408,428,devshgraphicsprogramming,2020-03-18T20:44:43Z,"no, this is not what i asked for at all example 13 stays as the brdf explorer example 7 is supposed to be a pure cegui-only example to show off gui, nothing else",0,0.9446057081222534
394629177,428,devshgraphicsprogramming,2020-03-18T20:46:17Z,no need for the `irrlichtbaw` in the path also don't add `include` and `src` to paths in `ext` just keep it all in one folder,0,0.9938570857048035
394629598,428,devshgraphicsprogramming,2020-03-18T20:47:04Z,"this needs to change slightly to reflect that we've added to this code under apache 2.0, obvs keep the cegui notice",0,0.9922502040863037
394629932,428,devshgraphicsprogramming,2020-03-18T20:47:41Z,for extensions we use the following guard `_irr_ext_extensionname_filename_h_included_`,0,0.9954224228858948
394630409,428,devshgraphicsprogramming,2020-03-18T20:48:36Z,"no, by pointer not reference",0,0.9832804203033447
394630461,428,devshgraphicsprogramming,2020-03-18T20:48:41Z,"no, by pointer not reference",0,0.9832804203033447
394630694,428,devshgraphicsprogramming,2020-03-18T20:49:06Z,i think namespace on this should be `irr::ext::cegui`,0,0.9923853874206543
394631032,428,devshgraphicsprogramming,2020-03-18T20:49:47Z,"its `""irrlicht.h""",0,0.9922624826431274
394632662,428,devshgraphicsprogramming,2020-03-18T20:52:52Z,in .cpp files you can use `using namespace`,0,0.9944122433662415
394867989,428,devshgraphicsprogramming,2020-03-19T08:45:56Z,don't use warning disable unless you know what they are for,0,0.7838907241821289
498390138,540,devshgraphicsprogramming,2020-10-01T16:59:20Z,"no need for `gpu` prefix, its implied.",0,0.9929196238517761
498390423,540,devshgraphicsprogramming,2020-10-01T16:59:48Z,use `nbl`,0,0.991688072681427
498391285,540,devshgraphicsprogramming,2020-10-01T17:01:26Z,move this out to separate headers,0,0.9875651001930237
498391513,540,devshgraphicsprogramming,2020-10-01T17:01:49Z,move this out to separate headers,0,0.9875651001930237
498391946,540,devshgraphicsprogramming,2020-10-01T17:02:34Z,move this out to separate headers,0,0.9875651001930237
498392662,540,devshgraphicsprogramming,2020-10-01T17:03:48Z,command buffer needs to be created by a pool/driver so no constructor necessary for the interface (at least no public ctor),0,0.9909995198249817
498392790,540,devshgraphicsprogramming,2020-10-01T17:04:04Z,inline,0,0.9631757736206055
498392984,540,devshgraphicsprogramming,2020-10-01T17:04:27Z,"could you document what this does, or at least link the relevant spec part?",0,0.9893935918807983
498393458,540,devshgraphicsprogramming,2020-10-01T17:05:22Z,how will you figure out that the cmdbuf is no longer pending?,0,0.9927302002906799
498393533,540,devshgraphicsprogramming,2020-10-01T17:05:31Z,how will you figure out that the cmdbuf is no longer pending?,0,0.9927302002906799
498393751,540,devshgraphicsprogramming,2020-10-01T17:05:59Z,i think you should rather assert that state is `es_recording`,0,0.9882833957672119
498394184,540,devshgraphicsprogramming,2020-10-01T17:06:53Z,why the comment?,0,0.9097101092338562
498394810,540,devshgraphicsprogramming,2020-10-01T17:08:04Z,last argument should be a pointer i think?,0,0.9907037019729614
498395612,540,devshgraphicsprogramming,2020-10-01T17:09:34Z,"todo: discuss events, semaphores and barriers.",0,0.9888989329338074
498395976,540,devshgraphicsprogramming,2020-10-01T17:10:14Z,"maybe make this fully virtual and hide the member, because the opengl backend should completely disregard this.",0,0.9752241373062134
498396073,540,devshgraphicsprogramming,2020-10-01T17:10:27Z,+1,0,0.7702900171279907
498396654,540,devshgraphicsprogramming,2020-10-01T17:11:30Z,why is `begin` protected?,0,0.99050372838974
498397718,540,devshgraphicsprogramming,2020-10-01T17:13:27Z,"same as before, they'll need to be created by a factory so no public constructor necessary",0,0.9920978546142578
498398018,540,devshgraphicsprogramming,2020-10-01T17:13:58Z,"in vulkan its not a fence that gets set, its a semaphore, right?",0,0.9774948954582214
498399458,540,devshgraphicsprogramming,2020-10-01T17:16:35Z,what do you need this method for?,0,0.9797617197036743
386272924,425,devshgraphicsprogramming,2020-03-02T09:17:51Z,"not lambertian, just debug",0,0.9171481132507324
386273474,425,devshgraphicsprogramming,2020-03-02T09:19:03Z,why did you turn off culling?,0,0.9835453629493713
386274023,425,devshgraphicsprogramming,2020-03-02T09:20:11Z,"return the smart pointer instead, don;t do weird grabs and stuff",-1,0.6703729629516602
386274340,425,devshgraphicsprogramming,2020-03-02T09:20:48Z,ekhm what's the one with the texture doing here?,0,0.9764499068260193
386275321,425,devshgraphicsprogramming,2020-03-02T09:22:56Z,add an alias `irr/builtin/loaders/ply/pipelinelayout` (you can cache under multiple paths),0,0.9925922155380249
386466937,425,AnastaZIuk,2020-03-02T15:36:38Z,because we have tested it with criss and didn't work without it,0,0.9816610813140869
386467060,425,AnastaZIuk,2020-03-02T15:36:49Z,okay,0,0.7269688844680786
386467581,425,AnastaZIuk,2020-03-02T15:37:34Z,"you wanted me to create 3 debug shaders, should i remove it?",0,0.9743632674217224
386467938,425,AnastaZIuk,2020-03-02T15:38:31Z,okay,0,0.7269688844680786
386499721,425,devshgraphicsprogramming,2020-03-02T16:25:19Z,that means that you have your polygons the wrong way around,0,0.6626784801483154
386499934,425,devshgraphicsprogramming,2020-03-02T16:25:39Z,they don't need a texture declared,0,0.9492338299751282
387000211,425,AnastaZIuk,2020-03-03T12:55:28Z,they are correct after the fix however,0,0.9852273464202881
387107026,425,devshgraphicsprogramming,2020-03-03T15:42:08Z,"uv debug shader should not be using a texture, it should be outputting the uv coords as color!",0,0.9736347198486328
387107387,425,devshgraphicsprogramming,2020-03-03T15:42:41Z,none of the default shaders ply uses for its pipelines can use a texture! (because it will never load a texture),0,0.9754253029823303
387107681,425,devshgraphicsprogramming,2020-03-03T15:43:05Z,return type of function still not changed,0,0.9778586030006409
387130626,425,AnastaZIuk,2020-03-03T16:15:37Z,"oh sorry, to fix",-1,0.9931522607803345
387130978,425,AnastaZIuk,2020-03-03T16:16:06Z,hey i fixed it!,1,0.8868954181671143
387492820,425,devshgraphicsprogramming,2020-03-04T07:41:25Z,you still have a drop,0,0.9704763293266296
387523551,425,AnastaZIuk,2020-03-04T08:53:14Z,goood,0,0.682239294052124
185475338,81,devshgraphicsprogramming,2018-05-02T12:14:31Z,will this cmake let me specify custom openssl path? (so i dont compile and link against my system libs) like this? [a link],0,0.9901605844497681
185541307,81,numberZero,2018-05-02T15:36:57Z,"yes, but note that `openssl_libraries` is not a valid configuration option; use `openssl_crypto_library` (`-dopenssl_crypto_library=/path/to/crypto.so`) and `openssl_ssl_library` instead. `cmake-gui` shows the available configuration options (in terminal, use `cmake -lah ` instead)",0,0.9947574138641357
185561851,81,devshgraphicsprogramming,2018-05-02T16:41:27Z,what about where it will get include files for openssl from?,0,0.9914888143539429
185611051,81,numberZero,2018-05-02T19:25:42Z,"from `openssl_include_dir`. on my system, that’s just `/usr/include` by default, so that you can write e.g. `openssl/aes.h` to reference `/usr/include/openssl/aes.h`. that’s the way libraries are used with cmake.",0,0.9951208233833313
339189360,389,devshgraphicsprogramming,2019-10-25T18:42:44Z,i guess you can write `class final` and remove all the `virtual` keywords from the methods,0,0.9828367233276367
339189905,389,devshgraphicsprogramming,2019-10-25T18:44:12Z,this is going to crash badly. you need `.get()->getpointer()`,-1,0.8939387798309326
339190325,389,devshgraphicsprogramming,2019-10-25T18:45:25Z,nope `if (_params.loaderflags&e_loader_parameter_flags::elpf_right_handed_meshes)`,0,0.9938157796859741
339190810,389,devshgraphicsprogramming,2019-10-25T18:46:36Z,why are you flipping around .z and not .x ?,0,0.9760863184928894
339191401,389,devshgraphicsprogramming,2019-10-25T18:48:12Z,stl is completely non indexed?,0,0.9491187930107117
339198927,389,AnastaZIuk,2019-10-25T19:08:30Z,it seems it is non indexed,0,0.909806489944458
339335217,389,AnastaZIuk,2019-10-27T10:21:47Z,should _params be a const& member or should it be passed through functions?,0,0.9952229857444763
339336864,389,devshgraphicsprogramming,2019-10-27T11:07:21Z,and which one do you think will crash if you attempt to call the loader from multiple threads?,0,0.9427768588066101
339336963,389,devshgraphicsprogramming,2019-10-27T11:09:45Z,"where's your flip of the position and the normal around the x axis? also you shouldn't be inverting indices here, you'll end up premuting them twice... you'll get the same output as a result when rendering.",0,0.9316787123680115
339338995,389,AnastaZIuk,2019-10-27T12:03:29Z,"oh right, i forgot about normals flip and did premuting twice actually",-1,0.5122538208961487
339339089,389,AnastaZIuk,2019-10-27T12:05:47Z,"there is a pos flip, but sure, rest to fix",0,0.9396703243255615
339339123,389,AnastaZIuk,2019-10-27T12:06:35Z,"being honest i don't know, i haven't done anything with multithreading before",0,0.6714386343955994
339340679,389,devshgraphicsprogramming,2019-10-27T12:41:19Z,"you're permuting the indices, and then you're permuting how normals and positions are read according to the indices... two reversals of indices == no reversal",0,0.936097264289856
339345744,389,devshgraphicsprogramming,2019-10-27T14:29:59Z,"well if you have a member and the loader is shared between threads, what's gonna happen?",0,0.9334176778793335
339346133,389,AnastaZIuk,2019-10-27T14:38:03Z,"i think that operations on such a member won't be atomic, right? so it could crash",0,0.7431803941726685
339346415,389,devshgraphicsprogramming,2019-10-27T14:45:12Z,"well done, now you know why every loader has a context struct and passes a reference to it as a parameter.... rule nr. 1 of multi-threading, avoid global states.",0,0.8664342164993286
339346591,389,AnastaZIuk,2019-10-27T14:48:47Z,"[a link] there is only one index mirrowing (last commit i removed double permuting), normals (added in last) and possitions are flipped as well",0,0.9909507036209106
339347167,389,devshgraphicsprogramming,2019-10-27T15:00:10Z,where are the positions?,0,0.9900264739990234
339348005,389,AnastaZIuk,2019-10-27T15:14:37Z,here there are my boss! [a link] positions [a link] normals [a link] indicies,1,0.9839791059494019
181593508,63,devshgraphicsprogramming,2018-04-15T19:12:51Z,at least normalize it before doing stuff with it! (all library functions will assume normalized quaternion input in order to be faster),0,0.9722408652305603
181593824,63,devshgraphicsprogramming,2018-04-15T19:23:04Z,instead of nonsse float to double loadu there are instructions to promote the lower half of the register to double such as _mm_cvtps_pd p.s. most probably need 1 more instruction for the higher part of the register to move it down for bool _0=true,0,0.9936171770095825
181593916,63,devshgraphicsprogramming,2018-04-15T19:26:15Z,there's cvtpd_ps for parallel double to float conversion add a shuffle or movelh and you can put two registers made from double conversion into 1 register,0,0.9929009675979614
181654357,63,devshgraphicsprogramming,2018-04-16T08:18:32Z,a single shuffle_ps could do the work of or+and+movehl [a link],0,0.992311418056488
181654518,63,devshgraphicsprogramming,2018-04-16T08:19:09Z,this is beautiful,1,0.9940642714500427
181655787,63,devshgraphicsprogramming,2018-04-16T08:24:15Z,why so many core::transpose4 ?,0,0.9871997237205505
181656227,63,devshgraphicsprogramming,2018-04-16T08:25:45Z,"this will crash, vectorsimdf has a memory alignmend requirement of 16 bytes, plus you can't guarantee _out is 16 byte aligned in the first place",0,0.634942352771759
181656857,63,devshgraphicsprogramming,2018-04-16T08:28:10Z,could you explain the shuffles to me?,0,0.981953501701355
181689329,63,Crisspl,2018-04-16T10:30:59Z,"similarly to float32 version. `_a0` and `_a1` are two halves of a row. so: * `_mm_shuffle_pd(_a0, _a0, 0)` will give us first element of first half broadcasted (i.e. x brodcasted) * `_mm_shuffle_pd(_a0, _a0, 3)` will give us second element of first half broadcasted (y broadcasted). `3` comes from the fact that 3==0b11 same for second half. the trailing `if` is because in first half it'd have no sense since first half of 3rd row is {0, 0} and so we would have to do something like _mm_add_pd(res, _mm_and_pd(_a1, **mask00**));",0,0.9925446510314941
181699716,63,devshgraphicsprogramming,2018-04-16T11:17:16Z,"don't add this, make quaternion oblivious of matrix3x4simd you can reinterpret_cast quaternion to vectorsimdf very safely",0,0.9579048156738281
181700113,63,devshgraphicsprogramming,2018-04-16T11:19:18Z,i was just confused as to the 0b11 shuffle mask for a shuffle_pd [a link],0,0.5846933126449585
181733876,63,Crisspl,2018-04-16T13:30:43Z,tested it. works,0,0.7732884883880615
182711082,63,devshgraphicsprogramming,2018-04-19T11:10:21Z,with 3 hadds this will go in the res[3] element which will never be memcopied out... as this is the non 4x1 function maybe for this specific instance (mul with 3x1 vector) you should use the default zero vector for r3,0,0.9938735961914062
182717665,63,devshgraphicsprogramming,2018-04-19T11:42:14Z,"there's no fast way to insert a custom translation into a row matrix, so we must do it simply in non-simd fashion (you could do two transposes but thats simply slower). there's no need for a transpose so multiply all rows by center to obtain `r_i = ri*_center` then use 3 hadds to reduce the 3 rows (and a random register) into a single 4x1 vector `col3` then get `finalcol3 = _center-_translation-col3` you can then save the 3 out of 4 components of finalcol3 to elements 3,7,11 of the matrix with regular c memory ops",0,0.9895007014274597
182717738,63,devshgraphicsprogramming,2018-04-19T11:42:42Z,there's no need for the mask as the final component doesn't get saved as there is no row[3],0,0.9922958612442017
182718005,63,devshgraphicsprogramming,2018-04-19T11:44:09Z,"this is wrong, it should have been `-c0*_center.x-c1*_center.y-c2*_center.z`",0,0.9760194420814514
346540097,400,devshgraphicsprogramming,2019-11-14T20:53:01Z,"pitch, i think in bytes",0,0.9807989597320557
346540806,400,devshgraphicsprogramming,2019-11-14T20:54:32Z,"see how address is calculated in vk, if this is 0 then its assumed to be tightly packed.",0,0.9936550855636597
346543626,400,devshgraphicsprogramming,2019-11-14T21:01:13Z,"actually not in bytes. but you should aim for it to be image width rounded up to the next ""lowest common multiple of 8 and texel block byte size"" after ""texel block byte size times image width"" basically [code block]",0,0.9847570657730103
346544013,400,devshgraphicsprogramming,2019-11-14T21:02:13Z,`(region.bufferrowlength*blockbytesize)` instead,0,0.9945040941238403
346544240,400,devshgraphicsprogramming,2019-11-14T21:02:54Z,you've already moved the `texelbuffer` you will crash on nullptr,0,0.9745177626609802
347247538,400,devshgraphicsprogramming,2019-11-18T08:27:21Z,"no this is wrong, you're not taking level into account!",-1,0.8009735345840454
347247859,400,devshgraphicsprogramming,2019-11-18T08:28:20Z,i removed this function for a reason!,0,0.5420091152191162
347248257,400,devshgraphicsprogramming,2019-11-18T08:29:29Z,and you `region.bufferrowlength` is still 0,0,0.9890066385269165
347286283,400,devshgraphicsprogramming,2019-11-18T09:56:48Z,actually its fine.,0,0.9675025343894958
347289026,400,devshgraphicsprogramming,2019-11-18T10:01:47Z,removed.,0,0.9782117605209351
347291755,400,Crisspl,2019-11-18T10:07:17Z,"i added it temporarily because i needed to perform core::max on this type just for when _mm_cmplt/gt are broken. see commit previous to last one, i replaced vector3simd for vector3d, somewhere in iimage i think",0,0.9881126284599304
347299417,400,devshgraphicsprogramming,2019-11-18T10:22:54Z,fixing the compile issue now.,0,0.9844540953636169
347304538,400,devshgraphicsprogramming,2019-11-18T10:33:01Z,"changed to a macro in vectorsimdf, works now",0,0.9923054575920105
347304601,400,devshgraphicsprogramming,2019-11-18T10:33:09Z,fixed it myself.,0,0.9796604514122009
347304761,400,devshgraphicsprogramming,2019-11-18T10:33:31Z,"had to change it a bit, realized this wont work",-1,0.6934224367141724
357872190,406,devshgraphicsprogramming,2019-12-13T23:40:16Z,you will only create one icpuimage (previous system was fucked up thats why the api was changed). the icpuimage contains all mip-maps (but here you will only have one mip).,0,0.9361777901649475
357872324,406,devshgraphicsprogramming,2019-12-13T23:40:57Z,"well you're falling through your switch statement, so all non-rgba format images will try to load with wrong format.",0,0.5988712310791016
357872744,406,devshgraphicsprogramming,2019-12-13T23:43:23Z,"you can create the icpu buffer first, and use it instead of `data`",0,0.994139552116394
357872863,406,Przemog1,2019-12-13T23:44:03Z,"i know, but it is for testing purpose, so far i'm trying to load only rgba image",0,0.9549357295036316
357872865,406,devshgraphicsprogramming,2019-12-13T23:44:04Z,"this will leak (double grab), use `auto imagebuffer = core::make_smart_refctd_ptr (imagesize);` instead",0,0.9876720905303955
357873116,406,devshgraphicsprogramming,2019-12-13T23:45:26Z,"all of the above are good, you just need to pick the format correctly.",0,0.7929104566574097
357873177,406,devshgraphicsprogramming,2019-12-13T23:45:47Z,no need for a `.get()` the `->` operator is already overloaded.,0,0.9920555949211121
357873280,406,devshgraphicsprogramming,2019-12-13T23:46:32Z,"ok dude, you need to fill out `regions` with apropriate values, you have uninitialized memory there right now",1,0.6897643804550171
357873487,406,devshgraphicsprogramming,2019-12-13T23:47:43Z,you can delete this variable actually.,0,0.9851378202438354
357873492,406,Przemog1,2019-12-13T23:47:45Z,right,0,0.8996442556381226
358139907,406,devshgraphicsprogramming,2019-12-16T09:55:56Z,"this format is not supported widely, this is why i had a function here originally that would convert r8_srgb to rgb8_srgb in software.",0,0.9665883779525757
366565355,406,AnastaZIuk,2020-01-14T20:50:08Z,in that should i calculate average of channels and perform grayscale or should i fill `g` and `b` channels with certain default values like 0?,0,0.9937792420387268
366571552,406,AnastaZIuk,2020-01-14T21:05:07Z,"i see we have someting like `video::convertcolor`, but i'm not sure if it'll solve it though",0,0.7740874886512756
366575753,406,devshgraphicsprogramming,2020-01-14T21:15:23Z,no what imean is that you should duplicare the r8_srgb channel to fill rgb8_srgb so its basically is: [code block],0,0.9902644157409668
366576349,406,AnastaZIuk,2020-01-14T21:16:47Z,"okay, great",1,0.9905506372451782
480280796,534,devshgraphicsprogramming,2020-08-31T17:33:59Z,what happened here!?,0,0.8099323511123657
480280849,534,devshgraphicsprogramming,2020-08-31T17:34:03Z,what happened here!?,0,0.8099323511123657
480283319,534,Crisspl,2020-08-31T17:38:34Z,"instance.parent is always shapehroup by mitsuba docs which doesnt have tform so it makes no sense. i dont know how it worked, i did it in a way more understadnable for me",0,0.5286204814910889
480283766,534,Crisspl,2020-08-31T17:39:26Z,"nothing, code wrote by me and commented-out by me. shouldnt be here",0,0.9717783331871033
480285143,534,devshgraphicsprogramming,2020-08-31T17:41:57Z,wouldn't it make more sense to store just one offset and 3 counts?,0,0.9916489124298096
480286207,534,devshgraphicsprogramming,2020-08-31T17:43:56Z,"use gaussian + mitchell (resample gaussian, reconstruct mitchell)",0,0.9924291968345642
480290629,534,Crisspl,2020-08-31T17:52:09Z,why not,0,0.7787730097770691
480314049,534,devshgraphicsprogramming,2020-08-31T18:36:00Z,could this be a template parameter instead (compile time)?,0,0.9927771091461182
480345468,534,devshgraphicsprogramming,2020-08-31T19:24:32Z,any way to disable this function at compile time if `!has_derivative` ? i'm not an `enable_if` expert unfortunately.,0,0.9621472954750061
480350738,534,devshgraphicsprogramming,2020-08-31T19:30:11Z,"[a link] i made it possible to have an instance parent another one, transform-wise.",0,0.9869526624679565
480351193,534,devshgraphicsprogramming,2020-08-31T19:30:43Z,"is this a ""why not"" in agreement?",0,0.9758241772651672
480354791,534,devshgraphicsprogramming,2020-08-31T19:35:21Z,where is `scale` and `havescale` (who declares it) ?,0,0.9943497776985168
480355133,534,devshgraphicsprogramming,2020-08-31T19:36:05Z,hmmm the constructors should just take the r-value kernels and work out the negative and positive support (in all 3 dimensions) as the maximum of all kernel's supports.,0,0.981931209564209
480359597,534,Crisspl,2020-08-31T19:45:15Z,"yeah, all streams for one ir tree are put in continuous memory anyway so it can be done without an issue",0,0.9809804558753967
480360090,534,Crisspl,2020-08-31T19:46:18Z,"base specific for this kernel, at the top of this file",0,0.9934868812561035
480413687,534,devshgraphicsprogramming,2020-08-31T21:37:36Z,don't see it in `cchannelindependentimagefilterkernelbase`,0,0.9939960241317749
482043419,534,devshgraphicsprogramming,2020-09-02T12:51:21Z,we need to look at if your rewrite of this kernel handles the scale correctly,0,0.9885242581367493
270784497,250,devshgraphicsprogramming,2019-04-01T09:31:47Z,"nice but add a human readabke string beforehand, because someone will just get a random number out of nowhere in the console and not know what it means",0,0.637906014919281
270784744,250,devshgraphicsprogramming,2019-04-01T09:32:33Z,`screen_gamma` is actually 2.233333333,0,0.9877372980117798
270785354,250,devshgraphicsprogramming,2019-04-01T09:34:24Z,or try to set to 1.0 and then use the srgb formats instead in `new asset::cimagedata` later on,0,0.9949215054512024
270788733,250,devshgraphicsprogramming,2019-04-01T09:43:16Z,i said to assume `params.handlesrgb=true` and remove it from the engine!,0,0.9853954911231995
271576983,250,qbasa12,2019-04-03T04:43:08Z,allright,0,0.933426022529602
271577122,250,qbasa12,2019-04-03T04:44:09Z,actually always:1.0,0,0.9789699912071228
271619866,250,devshgraphicsprogramming,2019-04-03T08:01:04Z,"this one needs switch cases for srgb as well p.s. why are there ef_r8_srgb, ef_r8g8_srgb.... i'm 100% sure that opengl doesn't support that, is that even a thing in vulkan?",0,0.9523698687553406
271620010,250,devshgraphicsprogramming,2019-04-03T08:01:29Z,"there are more srgb formats [a link] please provide cases for all.l p.s. why are there ef_r8_srgb, ef_r8g8_srgb.... i'm 100% sure that opengl doesn't support that, is that even a thing in vulkan?",0,0.9571032524108887
271620205,250,devshgraphicsprogramming,2019-04-03T08:02:04Z,excise this and the comment completely,0,0.974493682384491
271620647,250,devshgraphicsprogramming,2019-04-03T08:03:10Z,replace `params.handlesrgb` with `true` entirely,0,0.9937513470649719
271682644,250,Crisspl,2019-04-03T10:48:16Z,the rest is taken care of or not supported in gl all we have is slightly renamed vkformat. ofc it doesn't mean they are supported in gl,0,0.977318286895752
271692594,250,devshgraphicsprogramming,2019-04-03T11:19:33Z,"i'm surprised those things are supported in vulkan xd. however those switch statements are still missing the cases for `ef_r8g8b8_srgb`, `ef_b8g8r8_srgb`, the bcn srgb formats, etc and astc",0,0.5035114288330078
271697592,250,Crisspl,2019-04-03T11:35:17Z,"etc and astc srgb are all there, but if i haven't overlooked a few of bcn are missing (bc1-bc3 i think) so please add also them, thanks",1,0.9092615842819214
271714581,250,devshgraphicsprogramming,2019-04-03T12:24:08Z,any questions?,0,0.9777396321296692
411670157,473,devshgraphicsprogramming,2020-04-20T20:28:55Z,"actually if you want a 64bit uint constant the suffix is `ull`, e.g. `1ull`",0,0.9947127103805542
411670810,473,devshgraphicsprogramming,2020-04-20T20:30:03Z,i dont think that function declaration return type is the place to put `[[maybe_unused]]`,0,0.9438084363937378
411670833,473,AnastaZIuk,2020-04-20T20:30:06Z,"i know those literals, right",0,0.9345343112945557
411671301,473,AnastaZIuk,2020-04-20T20:30:55Z,"i didn't solve the problem though, so it will be removed probably",0,0.9756636619567871
411671309,473,devshgraphicsprogramming,2020-04-20T20:30:55Z,"actually while you're at it, this function should be changed to use floats throughout",0,0.9850667715072632
411671584,473,AnastaZIuk,2020-04-20T20:31:18Z,but probably should be at def,0,0.9842171669006348
411673761,473,devshgraphicsprogramming,2020-04-20T20:35:05Z,its probably being unused where its being called.,0,0.9393237233161926
411673839,473,devshgraphicsprogramming,2020-04-20T20:35:12Z,so why the cast?,0,0.9751901626586914
411678612,473,AnastaZIuk,2020-04-20T20:43:19Z,"yes, i wanted to use attribute to avoid it",0,0.9427528977394104
411678772,473,AnastaZIuk,2020-04-20T20:43:35Z,to fix,0,0.9448611736297607
432381808,473,devshgraphicsprogramming,2020-05-29T09:57:58Z,"its the correct place to put it, where its being called and unused, not the global definition for everyone",0,0.9846101999282837
391790133,436,devshgraphicsprogramming,2020-03-12T17:47:07Z,dont need this,0,0.6617436408996582
391790319,436,devshgraphicsprogramming,2020-03-12T17:47:25Z,no display,0,0.9380489587783813
391790589,436,devshgraphicsprogramming,2020-03-12T17:47:54Z,"now instead of doing any more crap with the images, just save them to exr again, one by one",0,0.7374119162559509
392230481,436,devshgraphicsprogramming,2020-03-13T13:35:25Z,as for an input image with fileopendialog,0,0.990800678730011
392230883,436,devshgraphicsprogramming,2020-03-13T13:36:07Z,this goes in `ecolorspace.h`,0,0.9938165545463562
392231247,436,devshgraphicsprogramming,2020-03-13T13:36:43Z,"images only have eotf, only displays are relevant for oetf",0,0.9839627146720886
392231360,436,devshgraphicsprogramming,2020-03-13T13:36:57Z,don't have name in the general metadata.,0,0.951407790184021
392232890,436,devshgraphicsprogramming,2020-03-13T13:39:45Z,afaik nonlinear srgb will only be the case for non-floating point image format (image depth 8 bit or less) float16 or higher will be linear srgb without an eotf (linear eotf),0,0.9918559789657593
392233115,436,devshgraphicsprogramming,2020-03-13T13:40:14Z,name is something exr specific etc.,0,0.9816083312034607
392588838,436,AnastaZIuk,2020-03-14T13:34:22Z,what do you mean?,0,0.9843899607658386
392589548,436,devshgraphicsprogramming,2020-03-14T13:45:41Z,if its linear then the eotf_ is literally nothing,0,0.8804082274436951
392589620,436,devshgraphicsprogramming,2020-03-14T13:46:24Z,"add a `eotf_identity` to the list (pass through, no transformation of inputs occurs)",0,0.9920558333396912
392589719,436,devshgraphicsprogramming,2020-03-14T13:47:59Z,"i don't like the vulkan enum split between `nonlinear` and `linear`, you should delete these sufficies (and the `khr` and `ext`) whether the pixels are linear or not will be given by `electro_optical_transfer_function` (together the pair of `e_color_space` and `electro_optical_transfer_function` will give the equivalent vulkan enum)",0,0.5613707304000854
392589769,436,devshgraphicsprogramming,2020-03-14T13:48:34Z,still native file dialog or command like arg to give us the filename (i want this to be a tool i actually want to use rather than a pointless example),0,0.9670459032058716
278430596,271,devshgraphicsprogramming,2019-04-25T07:47:24Z,why enable exceptions?,0,0.9393651485443115
278430756,271,manhnt9,2019-04-25T07:47:54Z,"check other mails too, i explained it in the issue",0,0.9850398302078247
278430811,271,devshgraphicsprogramming,2019-04-25T07:48:07Z,i think this may fail if the output directory is not present there yet,0,0.9645611643791199
278431403,271,devshgraphicsprogramming,2019-04-25T07:49:58Z,why did you remove this?,0,0.9794459939002991
278432189,271,devshgraphicsprogramming,2019-04-25T07:52:17Z,"a. why are you using `force` all over the place? b. all of the subfolders specify the things with `option` not `set`, why are you using `set` ?",0,0.9943678975105286
278432365,271,manhnt9,2019-04-25T07:52:49Z,the folder is guaranteed by the submodule (this is a verified fix by criss and shaderc's devs). still a dirty work-around though but it's out of my support scope anyways.,0,0.9609997272491455
278432443,271,manhnt9,2019-04-25T07:53:03Z,explained in other issue,0,0.985228955745697
278432663,271,manhnt9,2019-04-25T07:53:42Z,here: [a link],0,0.9865595102310181
278433110,271,manhnt9,2019-04-25T07:55:06Z,using `force` so cmake overwrite current settings and people don't need to clear build folder and run cmake again. a minor issue though.,0,0.9889593124389648
336540984,381,devshgraphicsprogramming,2019-10-18T15:11:49Z,"not like this, look at [a link]",0,0.6848792433738708
336541831,381,devshgraphicsprogramming,2019-10-18T15:13:39Z,if you did [a link] then we wouldn't need this `#ifdef` clutter,0,0.9926234483718872
336543143,381,devshgraphicsprogramming,2019-10-18T15:16:35Z,"if you want to support 1d,2d array textures or cubemaps you need to call this something else, and touch index 1 or 2 so you have the correct 3d extent",0,0.9882946014404297
336544406,381,devshgraphicsprogramming,2019-10-18T15:19:23Z,i suggest to rename it to `minoffset`,0,0.9909461736679077
336544776,381,devshgraphicsprogramming,2019-10-18T15:20:10Z,you need to do [code block] then everything shall work,0,0.9834355711936951
337404445,381,devshgraphicsprogramming,2019-10-22T09:10:05Z,"gli loads both dds and ktx, you could nuke our dds loader and have this class handle both ktx and dds.",0,0.9923409223556519
337404608,381,devshgraphicsprogramming,2019-10-22T09:10:29Z,ktx and dds would be nice.,1,0.5282484889030457
337404833,381,devshgraphicsprogramming,2019-10-22T09:10:54Z,would be good to load dds as well since gli does both (and you could get rid of our awful dds loader).,0,0.7379648089408875
185208710,80,devshgraphicsprogramming,2018-05-01T12:03:31Z,whats going on here? why would createmeshbufferduplicate give a null meshdataandformat if _inbuffer has a non null one ?,0,0.9687110781669617
185208979,80,devshgraphicsprogramming,2018-05-01T12:06:44Z,there's an sgpumesh for such operations on an igpumesh should there be an scpumesh derived from icpumesh too? (if one wants to add and remove meshbuffers),0,0.9943694472312927
185209139,80,devshgraphicsprogramming,2018-05-01T12:08:13Z,"don't add mutability to icpumesh api, if you have code that requires mutability and manipulation then create an scpumesh (or skinned mesh) and cast it when you're done",0,0.9915137887001038
185209261,80,devshgraphicsprogramming,2018-05-01T12:09:35Z,ccpuskinnedmesh should only contain scpuskinmeshbuffers!,0,0.9594774842262268
185327755,80,Crisspl,2018-05-01T20:40:10Z,and there's appropriate dynamic_cast,0,0.9902335405349731
185331642,80,Crisspl,2018-05-01T20:55:47Z,but how you know that _inbuffer has a non null one?,0,0.9789204001426697
186552886,80,devshgraphicsprogramming,2018-05-07T21:11:58Z,"you took away my unordered_set optimization it seems edit: checked the rest, it seems you didn't but you changed my include files :)",1,0.9731013774871826
186552955,80,devshgraphicsprogramming,2018-05-07T21:12:17Z,functional is needed for delete and add keyframes functions,0,0.9937276840209961
186553376,80,devshgraphicsprogramming,2018-05-07T21:13:55Z,rename to denormalized for consistency,0,0.9918757677078247
283866246,297,devshgraphicsprogramming,2019-05-14T15:36:39Z,spit out the profiling only in `_irr_debug` if defined,0,0.9942582845687866
283867451,297,devshgraphicsprogramming,2019-05-14T15:38:52Z,"this needs to be the default to the `calculatesmoothnormals` function's std::function parameter, need to support user define-able vertex comparison criterions",0,0.9956081509590149
283868908,297,devshgraphicsprogramming,2019-05-14T15:41:35Z,instead of epsilon i want a `std::function` vertex comparison predicate,0,0.9934584498405457
283870151,297,devshgraphicsprogramming,2019-05-14T15:44:05Z,this is 100% correct ;),1,0.9946109056472778
283870569,297,devshgraphicsprogramming,2019-05-14T15:44:57Z,you know you could just use a std::vertex::resize instead of a reserve+emplace loop,0,0.9925854802131653
286832703,297,devshgraphicsprogramming,2019-05-23T08:34:34Z,"this needs to be an actual `assert(!core::ispot(_hashtablemaxsize))`, we want the program to crash (with a message) `_irr_debug_break_if` only breaks the debugger if one is used, otherwise execution continues.",0,0.9866053462028503
286835874,297,devshgraphicsprogramming,2019-05-23T08:42:27Z,maybe take heed from [a link] because the mesh does not always need to be created as a duplicate (in-fact that can be harmful to other optimizations).,0,0.9891207218170166
286836094,297,devshgraphicsprogramming,2019-05-23T08:43:00Z,you also need to check whether the index type is `eit_unknown` (that the mesh has no shared vertices),0,0.993164598941803
502294384,539,devshgraphicsprogramming,2020-10-09T09:10:15Z,change the theshold to `(0x1<<coalescing_dwords_log2)` also does changing the `coalescing_dwords_log2` to 5 and deleting the `notenoughinvocations` (always false) change the perf of the benchmark much?,0,0.9947921633720398
502295127,539,devshgraphicsprogramming,2020-10-09T09:11:29Z,"wonder if we hoisted the `bonedata_dword retval` above the if, and had only one ssbo with the `restrict` keyword, how the perf would change then (both branches do `tobonedata`",0,0.9667993783950806
338171364,386,AnastaZIuk,2019-10-23T17:09:08Z,"shouldn't it actually be a uint64_t, should it? i mean, you could use then || and specify more than one flag at once",0,0.9854996800422668
338267516,386,devshgraphicsprogramming,2019-10-23T20:41:06Z,nope all good.,0,0.5903966426849365
338268369,386,devshgraphicsprogramming,2019-10-23T20:43:08Z,"if it isn't set, compatibility with left-handed coordinate camera is assumed.",0,0.9913010001182556
338268703,386,devshgraphicsprogramming,2019-10-23T20:43:48Z,"const reference, not just a const",0,0.976414144039154
338269317,386,devshgraphicsprogramming,2019-10-23T20:45:10Z,`et_buffer` it already exists,0,0.991950511932373
338269564,386,devshgraphicsprogramming,2019-10-23T20:45:46Z,"no need to grab, you only grab if you expect to hold onto the object after the function returns.",0,0.9884741902351379
338272012,386,devshgraphicsprogramming,2019-10-23T20:51:16Z,wtf? there's only ever one file to read!,-1,0.9915794134140015
338272227,386,devshgraphicsprogramming,2019-10-23T20:51:44Z,what on earth is this?,-1,0.7101256251335144
338272381,386,devshgraphicsprogramming,2019-10-23T20:52:07Z,the sassetbundle should return exactly one `icpubuffer`,0,0.9933878183364868
338274857,386,devshgraphicsprogramming,2019-10-23T20:57:24Z,"we already have a function for getting the file extension, see how other loaders use it.",0,0.9915407299995422
338276152,386,devshgraphicsprogramming,2019-10-23T21:00:24Z,"you do realize that the whole point of `const char** getassociatedfileextensions()` is that the `iassetmanager` does all this for you? the `bool isaloadablefileformat(io::ireadfile* _file) const` function should only check the ability to load the file based on the file contents (not the extension) such as the presence of a header, etc. in this case we can obviously see that the function need always `return true` because a .bin file does not have a header.",0,0.9928503036499023
473275042,530,devshgraphicsprogramming,2020-08-19T19:40:58Z,default should not blend!,-1,0.8266236186027527
473275898,530,devshgraphicsprogramming,2020-08-19T19:42:43Z,"layouts, shaders and metadata are common for both actual mtl pipelines and a dummy default one. also why are you creating this default pipeline in obj loader, and not mtl loader?",0,0.9911708235740662
473276182,530,devshgraphicsprogramming,2020-08-19T19:43:17Z,what's this new function?,0,0.9798388481140137
473282414,530,Hazardu,2020-08-19T19:55:07Z,"because if there is no mtl file, the pipeline for a mesh buffer is assigned in obj loader",0,0.9931835532188416
473306098,530,devshgraphicsprogramming,2020-08-19T20:41:52Z,the default result of a loader should be handled by the loader.,0,0.9906395673751831
474269262,530,Hazardu,2020-08-20T20:59:18Z,i'm getting access violations on this line. i have no idea why,-1,0.9083370566368103
474270775,530,Hazardu,2020-08-20T21:02:25Z,"when using loadasset() from the constructor, _override is equal to null ptr, and only then. the plan is to load the cached descriptor set with the magenta checkerboard and use it.",0,0.9933869242668152
474309545,530,devshgraphicsprogramming,2020-08-20T22:36:58Z,bundle is empty?,0,0.9899701476097107
474311925,530,Hazardu,2020-08-20T22:44:24Z,"i found the problem, cimagewriterpng was initialized after cgraphicspipelineloadermtl",0,0.9848816990852356
474332581,530,devshgraphicsprogramming,2020-08-20T23:52:17Z,"erm, maybe just maybe we should have adding of built-in assets be separate from the constructors? i.e. first all loaders are constructed and added, then we call `init` ?",0,0.9947269558906555
250556965,213,devshgraphicsprogramming,2019-01-24T10:56:46Z,"what about the check that all the mips that don't have format `ef_unknown`, must have the same format?",0,0.9886959791183472
250653003,213,Crisspl,2019-01-24T15:31:06Z,"since constructor (and those init functions as well) is protected, construction code assumes that `create()` already make sure that input `core::vector ` is perfectly valid",0,0.9932329654693604
250682872,213,devshgraphicsprogramming,2019-01-24T16:35:18Z,ok so this sort of validation takes place somewhere else?,0,0.9933253526687622
250684222,213,Crisspl,2019-01-24T16:38:26Z,take a look at `create_impl()` and `validatemipchain()`,0,0.9927082657814026
254303586,213,devshgraphicsprogramming,2019-02-06T14:56:13Z,"that will break, badly i have need for both in the current codebase also what msvc version are you using? this compiles for us on windows.",-1,0.8932759761810303
254308841,213,Crisspl,2019-02-06T15:08:25Z,vs 2017 (15.9.3) i'll try changing toolset version. also i'll have to update cmake because it generates projects for vs 2015 and maybe there's the differenece between our setup,0,0.9891948699951172
254311169,213,Crisspl,2019-02-06T15:13:53Z,"yea, that was it! with v141 toolset it builds just fine",1,0.9344596862792969
255296826,213,devshgraphicsprogramming,2019-02-09T12:05:32Z,isn't `std::enable_if_t`c++17?,0,0.9951534271240234
255303095,213,Crisspl,2019-02-09T15:59:02Z,"nah, all this `_v` and `_t` from ` ` is c++14. and i'm always checking the standard version of a feature if i'm not sure, so don't worry :)",1,0.9786846041679382
478504166,531,devshgraphicsprogramming,2020-08-27T15:25:38Z,need this for anything?,0,0.9497263431549072
478507492,531,devshgraphicsprogramming,2020-08-27T15:29:57Z,don't assert that texture for bumpmap (or a texture in general will be there).,0,0.9895707368850708
478507816,531,devshgraphicsprogramming,2020-08-27T15:30:22Z,(it might not be),0,0.9847972989082336
478578220,531,devshgraphicsprogramming,2020-08-27T17:23:42Z,they should be adjacent no matter the min alloc size (if you `alloc` and `commit` the whole list of meshes that you wish to be adjacent),0,0.9931064248085022
478578772,531,devshgraphicsprogramming,2020-08-27T17:24:40Z,you just set minimum number of triangles to 2^16-1?,0,0.9932629466056824
478579218,531,devshgraphicsprogramming,2020-08-27T17:25:18Z,why not `alloc` all at once?,0,0.9860867261886597
478579349,531,devshgraphicsprogramming,2020-08-27T17:25:32Z,why not `commit` all at once?,0,0.9869440793991089
478581296,531,devshgraphicsprogramming,2020-08-27T17:28:56Z,why?,0,0.8699262738227844
478581976,531,devshgraphicsprogramming,2020-08-27T17:30:04Z,move this below `camera->render()`,0,0.9921582937240601
478582469,531,devshgraphicsprogramming,2020-08-27T17:30:54Z,this is going to be a problem,-1,0.5542343258857727
501222758,542,devshgraphicsprogramming,2020-10-07T18:24:58Z,this a bit messed up.,-1,0.9400582313537598
501223295,542,devshgraphicsprogramming,2020-10-07T18:25:54Z,this a bit messed up.,-1,0.9400582313537598
501223679,542,devshgraphicsprogramming,2020-10-07T18:26:36Z,wtf? what is `stb` doing in my repo!?,-1,0.9671708345413208
501224643,542,devshgraphicsprogramming,2020-10-07T18:28:19Z,this a bit messed up.,-1,0.9400582313537598
501224751,542,devshgraphicsprogramming,2020-10-07T18:28:31Z,this a bit messed up.,-1,0.9400582313537598
501225757,542,devshgraphicsprogramming,2020-10-07T18:30:09Z,this is a bit messed up.,-1,0.9090837240219116
501248486,542,devshgraphicsprogramming,2020-10-07T19:11:05Z,this rule needs updating.,0,0.9864843487739563
501248559,542,devshgraphicsprogramming,2020-10-07T19:11:12Z,include dir,0,0.9836514592170715
501249015,542,devshgraphicsprogramming,2020-10-07T19:12:02Z,"oh boy many more example cmakes needs to be updated then, make sure you run all examples.",0,0.8612182140350342
501633440,542,devshgraphicsprogramming,2020-10-08T11:03:20Z,irr_root_dir not cmake_source_dir this would cause problems when a large project attempts to use our engine via `add_subdirectory`,0,0.9916655421257019
282001731,295,devshgraphicsprogramming,2019-05-08T10:09:13Z,what changed? how does this fix the bug?,0,0.9519626498222351
341873066,398,devshgraphicsprogramming,2019-11-03T21:18:27Z,"use a reference, the functional object is very expensive to pass around by copy in all honesty i'd prefer a bunch of nice staateless static methods to a lambda",0,0.8554168939590454
341873311,398,AnastaZIuk,2019-11-03T21:23:48Z,"yup, it will be fixed",0,0.8126865029335022
344511522,398,AnastaZIuk,2019-11-10T19:55:01Z,"well, how should it look like? do you mean a static method expecting two lambdas for handling orientation?",0,0.9856300950050354
344714999,398,AnastaZIuk,2019-11-11T13:40:49Z,"i mean, if there should be such a method, it should have access to `_params`. should i create a pointer to it as a member? how would you like it to look like?",0,0.9913239479064941
344730426,398,AnastaZIuk,2019-11-11T14:17:09Z,how should i apply flipping on baw loader exactly?,0,0.9885749220848083
345335150,398,devshgraphicsprogramming,2019-11-12T17:13:57Z,are there still questions?,0,0.9838378429412842
345375327,398,AnastaZIuk,2019-11-12T18:36:48Z,it's been valid still,0,0.9701985120773315
425650789,489,devshgraphicsprogramming,2020-05-15T08:36:11Z,do the `load` and `dump` actually get called without polymorphism?,0,0.9944023489952087
425675833,489,Przemog1,2020-05-15T09:21:14Z,"yup, check out parameters of `load` and `dump` functions [a link]",0,0.9539656043052673
425710171,489,devshgraphicsprogramming,2020-05-15T10:26:05Z,"ah, sweet!",1,0.9947924017906189
173868891,48,devshgraphicsprogramming,2018-03-12T16:52:58Z,"this is not very parallel, i'm sure there is a more efficient way to do this",0,0.7244548797607422
173871068,48,devshgraphicsprogramming,2018-03-12T16:59:19Z,"generate the matrices to be multiplied before starting the main loop, otherwise rand() will take most of the computation time!",0,0.977430522441864
173874438,48,devshgraphicsprogramming,2018-03-12T17:09:17Z,this needs acquire and release orders at once,0,0.9772391319274902
173874920,48,devshgraphicsprogramming,2018-03-12T17:10:46Z,"this is a kind of 'lock', doesn't it need acquire ?",0,0.9903500080108643
173875026,48,devshgraphicsprogramming,2018-03-12T17:11:05Z,"this is a a sort of 'unlock', doesnt it need release?",0,0.990936815738678
173875713,48,devshgraphicsprogramming,2018-03-12T17:13:07Z,this may need both acquire and release,0,0.984109103679657
232599234,165,devshgraphicsprogramming,2018-11-12T10:15:06Z,this shoud not be a static/singleton multiple contexts should be possible,0,0.9781121611595154
232599699,165,devshgraphicsprogramming,2018-11-12T10:16:26Z,"we need both functions, for example when the opencl device has already been created externally and we need to see if its the right one for sharing with the opengl gpu.",0,0.9924977421760559
232602044,165,devshgraphicsprogramming,2018-11-12T10:23:49Z,"do not init an opencl device context by default for everyone, only if asked for in device creation parameters. while i'm not asking for a full #162 fix and implementation, that api calls for a query opencl devices and a list of devices for which to create contexts in device creation paramters... basically a simple `createopenclinteropcontext` boolean in device creation parameters will do for now.",0,0.986771285533905
234398089,165,manhnt9,2018-11-17T05:59:41Z,"whole copenclhandler is current used as static, so everything is static i will store a copenclhandler object in copengldriver, is that ok?",0,0.9851908087730408
234261182,177,devshgraphicsprogramming,2018-11-16T16:13:38Z,are you sure msvc is complaining here? because i will get linking errors in gcc if the `constexpr` is not `static inline` and i sure as hell compile with `-std=c++11`,-1,0.8292329907417297
234261686,177,devshgraphicsprogramming,2018-11-16T16:14:59Z,"good fix, however try to scope the vectors so they go out of scope after the `multi_alloc_addr`",1,0.6705803871154785
234308495,177,Crisspl,2018-11-16T18:41:22Z,wanted to make it same scope as those arrays. anyway `dummybytes` is used once more after `multi_alloc_addr` (line 246),0,0.9934535026550293
234310148,177,devshgraphicsprogramming,2018-11-16T18:47:19Z,ok as you wish.,0,0.9753292798995972
234314646,177,devshgraphicsprogramming,2018-11-16T19:02:58Z,_irr_static_inline_constexpr should replace the whole `static` and `contexpr`,0,0.9946972131729126
234314745,177,devshgraphicsprogramming,2018-11-16T19:03:18Z,"i see you defined the macro correctly, so just take the extra qualifiers away",0,0.9725147485733032
259598572,219,devshgraphicsprogramming,2019-02-24T00:35:55Z,"what happens if can't find bullet on system? can it build without? (btw there is some code in the top-level cmake that skips building with vulkan if vulkan sdk is not detected on the system, maybe you can steal that approach)",0,0.9898393154144287
260376476,219,khomsidakhun,2019-02-26T16:38:30Z,i'd assume it won't spew errors and you'd be able to do without but just to be safe i'll add some sanity checks if they leave it blank and not glob_recurse over a blank string,0,0.9673835039138794
288491740,219,devshgraphicsprogramming,2019-05-29T10:10:08Z,now your bullet lib needs to come from the submodule,0,0.993485152721405
336174449,378,AnastaZIuk,2019-10-17T18:58:55Z,could i create a protected function in iscenenodeanimator handling that? dry,0,0.9867274165153503
336175065,378,AnastaZIuk,2019-10-17T19:00:23Z,in reference to [a link],0,0.9906794428825378
336347770,378,devshgraphicsprogramming,2019-10-18T07:13:10Z,"nope, that would lead to clutter. you can acutally use `core::mix(-expression,expression,bool)`",0,0.9677611589431763
396362414,443,devshgraphicsprogramming,2020-03-23T10:51:43Z,you don't need this in this example,0,0.9781770706176758
396367420,443,devshgraphicsprogramming,2020-03-23T11:00:30Z,no need for this,0,0.9313280582427979
396367522,443,devshgraphicsprogramming,2020-03-23T11:00:39Z,nor this,0,0.9193848371505737
396368044,443,devshgraphicsprogramming,2020-03-23T11:01:40Z,no need for this,0,0.9313280582427979
396368123,443,devshgraphicsprogramming,2020-03-23T11:01:47Z,or this,0,0.8953132629394531
461148272,522,devshgraphicsprogramming,2020-07-27T20:25:15Z,"rename this header, its not common to all material compilers, only one particular backend (or split out the common and non common part). for example virtual texturing is only really a part of a backend that does not use the descriptor indexing vulkan capability. also path is wrong, should be `irr/builtin/glsl/material_compiler` i think",0,0.9524572491645813
461202065,522,Crisspl,2020-07-27T22:16:54Z,"thats why its in subdir for glsl backend that would imply scattering material_compiler sources over language/backend-based directories like glsl/material_compiler, backendx/material_compiler, backendy/material_compiler etc",0,0.9905979037284851
461204862,522,devshgraphicsprogramming,2020-07-27T22:24:21Z,"hmm ok makes sense, buut there are many possible backends for glsl: - glsl separate pipeline/shader per bsdf (no multi draw indirect) - glsl with virtual geometry and virtual textures (no descriptor indexing) - glsl with bindless (descriptor indexing) plus there is the question if the rasterizer backend will want/need the sampling functons (for stochastic shadows)",0,0.9585480690002441
470032036,522,devshgraphicsprogramming,2020-08-13T15:20:20Z,"take not of this comment, i'm closing the pr",0,0.8610029816627502
269774654,249,devshgraphicsprogramming,2019-03-27T21:18:25Z,what are you doing? i said log the metadata... i.e. the png header!,0,0.9453150033950806
269774949,249,devshgraphicsprogramming,2019-03-27T21:19:14Z,check the gamma ( jpeg has different color profiles),0,0.9846956133842468
269775933,249,devshgraphicsprogramming,2019-03-27T21:22:04Z,"if gamma=2.2 then its srgb, if gamma 2.0 then you can also pretend its srgb, if gamma 1.0 then its unorm anything else then return null and report an error",0,0.9899479150772095
269776548,249,devshgraphicsprogramming,2019-03-27T21:23:55Z,"a. don't log the pixels! b. now that srgb has been set as format, remove this squaring conversion!",0,0.6377345323562622
473264294,529,devshgraphicsprogramming,2020-08-19T19:20:08Z,"why add a swizzle to sat just because one example texture uses it, it makes far more sense to have sat be oblivious to the swizzle and make sure you apply an inverse swizzle (same swizzle) when saving the new/output texture to file.",0,0.9890055060386658
474168055,529,devshgraphicsprogramming,2020-08-20T17:52:28Z,investigate why `readblockpos` has a non-zero w (go up the stack),0,0.9903610944747925
474168127,529,devshgraphicsprogramming,2020-08-20T17:52:35Z,this worries me,-1,0.9778820872306824
474660738,529,AnastaZIuk,2020-08-21T12:19:06Z,it's because `readblockpos` if filled with `localcoord+trueoffset` and some line earlier there is the statement `trueoffset.w = subresource.basearraylayer;`,0,0.9947545528411865
474660982,529,AnastaZIuk,2020-08-21T12:19:36Z,corrected,0,0.9229590892791748
475111289,529,devshgraphicsprogramming,2020-08-22T17:18:17Z,ok makes sense.,0,0.9806748032569885
234402401,181,devshgraphicsprogramming,2018-11-17T09:24:21Z,should that be a vector of std::pair ?,0,0.9947506785392761
234415182,181,devshgraphicsprogramming,2018-11-17T17:21:19Z,"since you will always require an even number of vertices, make that a vector of vertex-pairs",0,0.9888879656791687
234415251,181,manhnt9,2018-11-17T17:23:35Z,i will update soon,0,0.9745630621910095
294235784,328,devshgraphicsprogramming,2019-06-17T10:35:41Z,we don't need any of the non-virtual functions,0,0.9770511984825134
294236013,328,devshgraphicsprogramming,2019-06-17T10:36:22Z,whenever you use `virtual` use the `override` keyword in the base classes,0,0.9940457344055176
294236169,328,devshgraphicsprogramming,2019-06-17T10:36:52Z,need the parameter about rmb zoom here,0,0.9927126169204712
373197275,415,devshgraphicsprogramming,2020-01-30T21:15:29Z,"no need to have it come from your own fork, its generally ok to go straight from main repo if the owner is not a maniac (unlike some repos we've had to clone)",0,0.9729719161987305
373197496,415,devshgraphicsprogramming,2020-01-30T21:16:00Z,since you're only adding includes i wouldn't call the macro `link`,0,0.9900553226470947
374866481,415,devshgraphicsprogramming,2020-02-04T19:09:37Z,?,0,0.9557723999023438
376703932,415,devshgraphicsprogramming,2020-02-08T11:12:23Z,"wrap this in a test for msvc compiler (only enable if msvc detected, we have plenty of these tests in the engine headers, so just copy one)",0,0.9937485456466675
419963846,475,devshgraphicsprogramming,2020-05-05T09:03:43Z,did i want this?,0,0.9690937399864197
419964028,475,devshgraphicsprogramming,2020-05-05T09:04:01Z,"oh, you merged my branch",0,0.9733567833900452
425632186,488,devshgraphicsprogramming,2020-05-15T08:00:41Z,also if cegui is getting built,0,0.9876874089241028
425633454,488,devshgraphicsprogramming,2020-05-15T08:03:14Z,"should that be public for everyone, or should we have a special getter just for loaders?",0,0.9950035214424133
425634614,488,devshgraphicsprogramming,2020-05-15T08:05:30Z,what's this about?,0,0.9754487872123718
426883899,488,devshgraphicsprogramming,2020-05-18T20:45:38Z,"tha layout of a bitfield is not standardised, warning can and may backfire",0,0.8152883648872375
409096639,462,devshgraphicsprogramming,2020-04-15T19:55:31Z,"code snippets will be necessary (more like it) ask for a smallest reproducible example either as inline code, gist or a pull request/separate repo (cpp code listing).",0,0.9902306199073792
409096849,462,devshgraphicsprogramming,2020-04-15T19:55:53Z,i need cpu and commit hash/tag/branch,0,0.9792690873146057
409097139,462,devshgraphicsprogramming,2020-04-15T19:56:26Z,this is more like for a pr rather than a feature request issue,0,0.9657750129699707
460003961,520,Crisspl,2020-07-24T11:46:26Z,i'd move this to icomputepipeline.h or make separate utility header and move all 3 there,0,0.9942268133163452
460004377,520,Crisspl,2020-07-24T11:47:23Z,probably separate header is best option,0,0.9770843386650085
460061262,520,Przemog1,2020-07-24T13:45:04Z,what do you think?,0,0.9768986105918884
460354435,520,devshgraphicsprogramming,2020-07-25T02:42:39Z,"i second criss, this (all indirect structs) should move to `irr/asset/ipipeline.h`",0,0.991238534450531
257990844,222,devshgraphicsprogramming,2019-02-19T11:03:41Z,why is this constructor implicitly adopting memory?,0,0.9667125940322876
258016649,222,Crisspl,2019-02-19T12:26:07Z,just using the adopting constructor but as you can see it allocates its own mem. however it's missing memcpy,0,0.9858381152153015
