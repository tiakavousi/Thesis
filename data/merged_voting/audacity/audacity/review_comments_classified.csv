id,pr_number,body,distilbert_sentiment_label,codebert_sentiment_label,deberta_sentiment_label,distilbert_confidence,codebert_confidence,deberta_confidence,majority_label,final_decision,decision_reason
627440957,835,"is the effect of this line to let any one of these libraries access the header files of any other one of the libraries? i see inclusions like: #include ""lib-string-utils/urlencode.h"" therefore lib-telemetry depends on lib-string-utils. you can also see that from its cmakelists.txt where it uses target_link_libraries. but what i'm hoping to do with the libraries i'm developing is avoid #include directives with more than one path component. and i think target_link_libraries will let you do just that -- shorten the #include path, so long as the library dependent on (here lib-string-utils) does not use private in target_sources. see my commit 45ff9419864c079cbd6f51cdd5e11f58ec882c30.",0,0,0,0.9443193674087524,0.965837299823761,0.9851447343826294,0.0,accept,unanimous_agreement
627445357,835,"this could be done in a different way, as well as the `*libname*api.h` i can change it if you want, no problem :hundred_points:",0,1,1,0.9621886610984802,0.6737893223762512,0.9822587966918944,1.0,accept,majority_agreement
627506072,835,you took the ctor out-of-line to avoid a nested header file. good!,1,1,1,0.9667484760284424,0.9872034192085266,0.9724074602127076,1.0,accept,unanimous_agreement
627506600,835,you figured out translatablestring::debug(). good!,1,1,1,0.989617109298706,0.975892961025238,0.9843758940696716,1.0,accept,unanimous_agreement
627510621,835,we aren't distinguishing a really failed import from the user cancelling it in the progress indicator. maybe that does not matter.,0,0,0,0.7270112633705139,0.8530437350273132,0.9643914699554444,0.0,accept,unanimous_agreement
627515066,835,q: how do you know this string is un-internationalized (to be consistent with other uses of reportbuiltinevent)? a: because of how we use type distinctions for strings!,0,0,0,0.9817669987678528,0.9808117151260376,0.9918448328971864,0.0,accept,unanimous_agreement
627535303,835,"what event to you think you are reporting? i think the effect is not necessarily ""selected"" interactively if we come to this line. it might be part of a macro invocation. i know people often master their tracks with macros. maybe that distinction does not matter, but comment at least what you really mean.",0,0,0,0.9654787182807922,0.9532400965690612,0.9860373139381408,0.0,accept,unanimous_agreement
627537546,835,"why is the opening of this one non-modal dialog important to report, but not the others (mixer board, karaoke, macro editor, contrast, history window)? just asking.",0,0,0,0.9551899433135986,0.954309105873108,0.9672713875770568,0.0,accept,unanimous_agreement
627543880,835,i'd like this table and the enum definition to refer to each other in comments,0,0,0,0.6016971468925476,0.9846941828727722,0.9748952388763428,0.0,accept,unanimous_agreement
627626167,835,can i start another review? yes i can. this is just a test of github. and it seems you found a bug in a 3pl to fix with a null check. did it crash for you in testing?,0,0,0,0.9846735000610352,0.953440487384796,0.9573037624359132,0.0,accept,unanimous_agreement
627756976,835,this is too vague. tell users what is being collected and why.,0,-1,0,0.75525963306427,0.6525482535362244,0.5384990572929382,0.0,accept,majority_agreement
627762185,835,"this url does not currently show a privacy policy. that should be online *before* merging this. moreover, a wall of legalese is not really sufficient for informed consent. there should be concise summaries of what information is being collected and why directly in the gui, not only on a webpage external to the application.",0,0,0,0.8706147074699402,0.9767389297485352,0.974572777748108,0.0,accept,unanimous_agreement
627763498,835,"be more specific [code block] what is ""etc""? be specific. list *all* the information that is collected.",0,0,0,0.987185537815094,0.9875773191452026,0.992301106452942,0.0,accept,unanimous_agreement
627764300,835,"""anonymous"" is unlikely to be correct. audacity cannot guarantee that google or yandex won't be able to link the user's ip address to their identity, so you'd better avoid making promises which might be seen as lies.",-1,0,0,0.600544810295105,0.9501619338989258,0.8748981952667236,0.0,accept,majority_agreement
627767257,835,"indeed. the privacy policy will probably need, among other things, to list yandex and google as sub-processors, state that the user's personal data will be sent outside the eu, and probably offer a dpo contact, in addition to the usual things. you can find instructions at [a link] [a link] spoiler: it's going to be practically impossible to respect gdpr and schrems ii if you use google.",0,0,0,0.8535577058792114,0.903808891773224,0.944599449634552,0.0,accept,unanimous_agreement
627780325,835,"also, if the uuid is saved it is at best *pseudo*nymous.",0,0,0,0.9670002460479736,0.9888238310813904,0.919075071811676,0.0,accept,unanimous_agreement
627844475,835,"this seems to be a downscaled version of apple's ""chart with upwards trend (u+1f4c8)"" emoji according to emojipedia. i'm not a lawyer but i'm fairly sure you're not supposed to redistribute it under gpl.",0,0,0,0.9514795541763306,0.8979003429412842,0.9642848372459412,0.0,accept,unanimous_agreement
627870880,835,"however, if google or yandex says it's anonymous then the blame shifts to these corporations in case it turns out otherwise, which in this case saying that it's ""anonymous"" is correct.",0,0,0,0.9735906720161438,0.9868754148483276,0.9457266926765442,0.0,accept,unanimous_agreement
627903275,835,"surely you need to include the privacy policy in the distributed software, rather than asking the user to view it? surely when i download a copy of audacity, i didn't agree to a copy of privacy policy that you can update at any time.",0,0,0,0.9138579964637756,0.9792216420173644,0.969985008239746,0.0,accept,unanimous_agreement
627993755,835,i'm afraid you cannot claim anonymous tracking and do that in the same pull request.,-1,-1,-1,0.8948646783828735,0.8891000151634216,0.9150936603546144,-1.0,accept,unanimous_agreement
627994491,835,can someone translate what this does to english?,0,0,0,0.9731456637382508,0.988386332988739,0.9927492141723632,0.0,accept,unanimous_agreement
627995654,835,this is saving some sort of unique identifier of the user.,0,0,0,0.986910045146942,0.9909045100212096,0.9932845830917358,0.0,accept,unanimous_agreement
627995927,835,"even if this was removed, google could easily de-pseudonymize your ip. so anyone claiming ""it's anonymous"" just shows that they don't know what they are talking about or are intentionally deceiving you.",0,0,0,0.6883553266525269,0.680290937423706,0.7446209788322449,0.0,accept,unanimous_agreement
627996939,835,google and yandex also track ip addresses on their side.,0,0,0,0.9864566326141356,0.9871715903282166,0.9923744797706604,0.0,accept,unanimous_agreement
628005925,835,does this mean you will now create a release of audacity whenever [a link]? have you considered the security implications that you open the door for in this scenario?,0,0,0,0.9736430048942566,0.9924873113632202,0.9902252554893494,0.0,accept,unanimous_agreement
628006320,835,vendoring curl?! of all dependencies? :scream:,-1,1,-1,0.9885225296020508,0.9359963536262512,0.9189454317092896,-1.0,accept,majority_agreement
628008821,835,"this will not work on some linux distributions as it downloads sources during build (build systems do not allow internet connection during build). apart from that, this suffers from the [a link]: including custom sources where in reality you should build against a system provided version of the library",0,0,0,0.9408470392227172,0.9796302318572998,0.9564701914787292,0.0,accept,unanimous_agreement
628068662,835,"there is no mention here (as in the pr) to sqlite database corruption. as i mention in a comment these databases are peoples save files it. needs to be explicitly noted here that information about project files is collected. (or just scrap this whole pr, which is the better move)",0,0,0,0.8772913217544556,0.9907559752464294,0.9893876314163208,0.0,accept,unanimous_agreement
628076637,835,"this conveniently hides that the service provider, google analytics, can be assumed to collect ip addresses. this is personally identifiable information under gdpr. you should be clear about the third parties involved in this process.",0,0,0,0.985643744468689,0.9802306294441224,0.9901942610740662,0.0,accept,unanimous_agreement
628156527,835,that's not how law usually works. and we already *know* that it's not anonymous. google is an advertising company.,-1,0,0,0.5640277862548828,0.8451944589614868,0.9494178295135498,0.0,accept,majority_agreement
628295126,835,"oh, my. this story gets weirder the deeper one crawls. * some days ago, ""muse group buys audacity"" -> :confused: * a few days - nothing happens -> :cold_sweat: * fefe blogs about this pr -> :scream: * it's about ""embedding"" g**gle -> :angry: * you start digging and find friends already all over it -> :weary: * they dig out stuff like ***this*** -> :rage: :exploding_head: :boom: :meat_on_bone: :fried_shrimp: :bone: i am very, very disappointed, muse group. and sad. very sad, too. ------ in other recognition, thanks for pointing it out! it's pretty telling of the whole thing, i'd say....",-1,-1,-1,0.987533450126648,0.7368599772453308,0.980618417263031,-1.0,accept,unanimous_agreement
628398239,835,"to be fair, audacity had a problematic practice of vendoring dependencies long before muse group got invovled.",0,0,0,0.7464175820350647,0.7118279337882996,0.7081741690635681,0.0,accept,unanimous_agreement
628413918,835,liblib-foo?,0,0,0,0.9883643388748168,0.9828094840049744,0.9783995747566224,0.0,accept,unanimous_agreement
628415242,835,web apis should not require cookies - they are unnecessarily complex. this reeks of bloat.,-1,-1,-1,0.9796925783157348,0.7340871691703796,0.9618383646011353,-1.0,accept,unanimous_agreement
628419362,835,i would guess they want to know how many people are using the spectrum feature specifically,0,0,0,0.9795715808868408,0.9584890604019164,0.972761869430542,0.0,accept,unanimous_agreement
628437539,835,this line seems to default the telemetry to be enabled when the config key doesn't exist. not having a config key is not a consent to be tracked.,0,0,0,0.9673115611076356,0.9849058985710144,0.9912546873092652,0.0,accept,unanimous_agreement
628470707,835,"fwiw i'm currently discussing this in the audacity discord with the op. ~~this appears to be a workaround for a ui bug, to be completely fair.~~ [a link] that is where the telemetry is being initialized - you can see it default to `false`. why it's `true` here is unclear and ~~i'm pushing for a proper comment explanation (or even better, a fix) to be added.~~ good catch here though. --- seems to be a copy-and-paste error that was made. it's set to be updated in a later commit, as i understand it.",1,0,1,0.943024218082428,0.6234624981880188,0.9237600564956664,1.0,accept,majority_agreement
628500849,835,"the `wxos_unknown` return value of `getoperatingsystemid()` is not handled. in that case you'll end up here as `unix`, which is not correct.",0,0,0,0.974088191986084,0.9796456694602966,0.9919420480728148,0.0,accept,unanimous_agreement
628504922,835,yea controversy aside this isn't even a well coded pr,-1,-1,0,0.8853121399879456,0.9606027007102966,0.546347439289093,-1.0,accept,majority_agreement
628774985,835,"tabs -> spaces, as per the audacity coding standards docs. also at other places in this file. (please don't start a holy war about which one is better.)",-1,0,0,0.5105405449867249,0.8021466135978699,0.8053455948829651,0.0,accept,majority_agreement
628775096,835,"yeah, sure, a holy war about tabs and spaces. let's go with that",-1,-1,-1,0.7905792593955994,0.9891678094863892,0.8843948245048523,-1.0,accept,unanimous_agreement
628776876,835,you are giving a review to code that will never reach production.,0,0,-1,0.8250377774238586,0.6407285332679749,0.6062036156654358,0.0,accept,majority_agreement
628777286,835,i'm just trying to show how bad quality it is.,-1,-1,-1,0.970974862575531,0.8224495053291321,0.9568559527397156,-1.0,accept,unanimous_agreement
628792423,835,"this doesn't seem correct. `getarchitecture()` gives you the bit-width of your architecture, not an exact intel instruction set. this will report for example audacity on arm as x86 or x64, giving you bogus telemetry info.",0,0,0,0.9308001399040222,0.7976347208023071,0.6570799350738525,0.0,accept,unanimous_agreement
628806502,835,"if the original curl release is used, why not simply take the one installed on the system?",0,0,0,0.9831655025482178,0.9929597973823548,0.991552233695984,0.0,accept,unanimous_agreement
628806749,835,"if this is auto-generated, then why not generate it at build-time?",0,0,0,0.9789066314697266,0.9923997521400452,0.988805055618286,0.0,accept,unanimous_agreement
628806847,835,"why is library example code replicated here, when only the library itself is needed?",0,0,0,0.9797263145446776,0.9921087622642516,0.985828161239624,0.0,accept,unanimous_agreement
628807072,835,those braces should indicate what opening element (namespace) they belong to.,0,0,0,0.9865552186965942,0.9912181496620178,0.992064654827118,0.0,accept,unanimous_agreement
628807184,835,include lf @ eol. also indicate what those braces refer to syntactically.,0,0,0,0.985834538936615,0.992144763469696,0.9946693778038024,0.0,accept,unanimous_agreement
628807205,835,excessive semicolon.,-1,-1,-1,0.7130374312400818,0.7050219178199768,0.5721269249916077,-1.0,accept,unanimous_agreement
628807269,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807296,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807304,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807398,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807428,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807450,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807489,835,lf @ eol. also should include a blank line before the closing braces for the namespaces.,0,0,0,0.9887748956680298,0.990384578704834,0.9902907013893129,0.0,accept,unanimous_agreement
628807633,835,potential for integer overflow issues.,0,0,0,0.9429357051849364,0.9087494611740112,0.954221487045288,0.0,accept,unanimous_agreement
628807643,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807769,835,why traverse directory paths upwards instead of properly setting up the include path in the cmake configuration?,0,0,0,0.9783787727355956,0.9935451745986938,0.9723214507102966,0.0,accept,unanimous_agreement
628807781,835,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
628807790,835,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
628807809,835,indentation.,0,0,0,0.9762426614761353,0.949278712272644,0.9784886837005616,0.0,accept,unanimous_agreement
628807816,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807889,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628807929,835,lf @ eol. inconsistent with other files of this library regarding blank line between closing braces of namespaces.,0,0,0,0.7302186489105225,0.8525030612945557,0.9810513257980348,0.0,accept,unanimous_agreement
628807951,835,"lf @ eol. also should include a blank before the closing braces for the namespaces (and when opening them, before defining classes insdie the namespace).",0,0,0,0.9887319803237916,0.985850989818573,0.9880886673927308,0.0,accept,unanimous_agreement
628808061,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628808075,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628808231,835,reinventing the wheel / nih syndrome: [a link],0,0,0,0.9814700484275818,0.968603253364563,0.9899975657463074,0.0,accept,unanimous_agreement
628808256,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628808338,835,lf @ eol. also prefer blank lines after opening and before closing brace of namespace ...,0,0,0,0.957446277141571,0.9602143168449402,0.987096071243286,0.0,accept,unanimous_agreement
628808417,835,why not use function from curl for this task? smells like nih.,0,-1,0,0.6055961847305298,0.6692959070205688,0.9896690249443054,0.0,accept,majority_agreement
628808659,835,"shouldn't you lock your internal state before modifying it for actual persistence? looks wrong. also this client id makes telemetry no longer anonymous, but at best pseudonymous. clear objection to this kind of telemetry from my side.",-1,-1,-1,0.8392130732536316,0.7827173471450806,0.9613972306251526,-1.0,accept,unanimous_agreement
628808801,835,unchecked return value ...,0,0,0,0.6553536057472229,0.9676619172096252,0.9899564981460572,0.0,accept,unanimous_agreement
628809087,835,"claiming anonymity and also having some clear interface for user tracking purposes, doesn't go well together. especially when service providers are known to heavily mine data ""entrusted"" to them.",-1,0,0,0.8620756268501282,0.8786095380783081,0.5743290185928345,0.0,accept,majority_agreement
628809293,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809311,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809317,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809322,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809406,835,reaching this comment while reviewing i already need my second hand to count review comments ... in binary ...,0,0,0,0.9172283411026,0.5524881482124329,0.9878306984901428,0.0,accept,unanimous_agreement
628809435,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809438,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809462,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809469,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809473,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809616,835,shouldn't this normally be `const std::function & callback`?,0,0,0,0.9852250218391418,0.99234277009964,0.9937852621078492,0.0,accept,unanimous_agreement
628809655,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809677,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809715,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809732,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628809954,835,even trying to compile those files in should be subject to conditional compilation. having this code included is an unreasonable liability and a potential attack vector due to its network surface.,-1,-1,0,0.5695940852165222,0.7105082273483276,0.5741066932678223,-1.0,accept,majority_agreement
628809985,835,should be optionally included based on actual use of telemetry by this build.,0,0,0,0.9854342937469482,0.9923344254493712,0.9946861267089844,0.0,accept,unanimous_agreement
628810022,835,why is this change needed? what breaks without it and why can't that not be repaired otherwise? is telemetry the only reason to break bc with old macos versions?,0,0,0,0.9265174865722656,0.9265766739845276,0.986480176448822,0.0,accept,unanimous_agreement
628810319,835,is this change actually related to this pr?,0,0,0,0.9782352447509766,0.9904993176460266,0.9927563071250916,0.0,accept,unanimous_agreement
628810470,835,excess ws @ eof.,0,0,-1,0.9560230374336244,0.7295589447021484,0.7911842465400696,0.0,accept,majority_agreement
628810586,835,indentation seems off ...,0,-1,0,0.5208960771560669,0.6038915514945984,0.539924681186676,0.0,accept,majority_agreement
628810828,835,"this should also include information on the exact data collected, reasons for collection. those information should be current with the implementation of the telemetry.",0,0,0,0.9817403554916382,0.9911468625068665,0.9946420192718506,0.0,accept,unanimous_agreement
628810910,835,information about collected data should be specific to the current build. thus it should be available from inside audacity without need for an internet connection.,0,0,0,0.978278398513794,0.9940301179885864,0.9937846660614014,0.0,accept,unanimous_agreement
628811007,835,"should better read ""user & usage surveillance settings"" ...",0,0,0,0.9730526208877563,0.9866161346435548,0.9935559630393982,0.0,accept,unanimous_agreement
628811420,835,"avoid marketing speak in the wording of that paragraph and be honest. well, maybe could be even more specific, but yeah: you get the gist of it.",0,0,0,0.5754171013832092,0.5417435169219971,0.8929206132888794,0.0,accept,unanimous_agreement
628811519,835,it's not anonymous!,0,-1,0,0.947558343410492,0.8546193838119507,0.9853194952011108,0.0,accept,majority_agreement
628811627,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628811720,835,lf @ eol.,0,0,0,0.9849274158477784,0.9693138599395752,0.9842858910560608,0.0,accept,unanimous_agreement
628813650,835,this would definitely invalidate the claim that a cmake flag would prevent the telemetry code from being compiled.,0,0,0,0.972001612186432,0.957899570465088,0.9849374890327454,0.0,accept,unanimous_agreement
628816050,835,` ` -> ` `. using semicolons after html character entity references are strongly recommended.,0,0,0,0.980535089969635,0.9932128190994264,0.9514625072479248,0.0,accept,unanimous_agreement
628818054,835,goggle,0,0,0,0.9749260544776917,0.9645147919654846,0.9288151264190674,0.0,accept,unanimous_agreement
628821083,835,"this is not a very thorough uuid verification. the minimum would be to check if the uuid version field is within the currently defined values. (1, 2, 3, 4, 5)",0,0,0,0.9623737931251526,0.9884787201881408,0.9660924673080444,0.0,accept,unanimous_agreement
628821257,835,"it's also not correct, as zero bytes are very much allowed in uuids.",0,0,0,0.9597882628440856,0.8247734904289246,0.95827454328537,0.0,accept,unanimous_agreement
628821424,835,"it's using `std::any_of`, not `std::all_of`. since it's using `any_of`, it's just making sure that one of the bytes is not zero, i.e. it's not all zeros.",0,0,0,0.9858449697494508,0.9898512363433838,0.9927489161491394,0.0,accept,unanimous_agreement
628823333,835,maybe they meant [a link]. ;),1,1,1,0.6063402891159058,0.9930378794670104,0.9208743572235109,1.0,accept,unanimous_agreement
628877519,835,"a nixos package maintainer here: side effects like downloading sources during build are problematic indeed for many build systems. i'd kindly ask you to reconsider this, otherwise several distributions need to patch this downstream.",0,0,0,0.8816400170326233,0.869401752948761,0.9384834170341492,0.0,accept,unanimous_agreement
628891908,835,over 9000!,0,-1,0,0.7571088075637817,0.7197599411010742,0.8543306589126587,0.0,accept,majority_agreement
628921058,835,leftover commented code that needs to be removed.,0,0,0,0.9826945662498474,0.9641757011413574,0.9681652784347534,0.0,accept,unanimous_agreement
628923883,835,are there any safeguards that `use_uuid_create` and `use_libuuid` are not defined at the same time? both of them seems to work on windows. does this function silently fail if none of these three libs are present?,0,0,0,0.9767476916313172,0.9924522042274476,0.9938110709190368,0.0,accept,unanimous_agreement
682794994,1384,i think that this line can safely be removed now!,0,0,0,0.8940923810005188,0.8248472809791565,0.8608993887901306,0.0,accept,unanimous_agreement
682796436,1384,"let's add the `cmd_option` for `${_opt}use_libtorch`. there are some examples in the root cmakelists.txt :) i think we should switch it off by default because of how big is libtorch, so it doesn't affect every developer.",1,1,1,0.9828306436538696,0.971301794052124,0.9848677515983582,1.0,accept,unanimous_agreement
682797245,1384,"probably `cmake_dependent_option` is an even better idea, because the feature depends on ${_opt}has_networking",0,0,0,0.9662346839904784,0.991256594657898,0.9893503785133362,0.0,accept,unanimous_agreement
682798001,1384,cmake_dependent_option will simplify this code to just `$ `,0,0,0,0.9872971773147584,0.9923757910728456,0.9940820336341858,0.0,accept,unanimous_agreement
682801268,1384,"probably messageboxexception is a better choice for the base here. looks like resample, for example, is called outside try{}catch{} (or i missed something)",0,0,0,0.977259397506714,0.9901394248008728,0.987144649028778,0.0,accept,unanimous_agreement
682801576,1384,generally it's better to keep implementation in source files :),1,1,0,0.8659204840660095,0.9432368278503418,0.990453004837036,1.0,accept,majority_agreement
682802318,1384,the same about the base,0,0,0,0.9847247004508972,0.9858880639076232,0.992026388645172,0.0,accept,unanimous_agreement
682804250,1384,"please use wxfile api, they will handle encoding correctly. this is a major pain point on windows",-1,-1,-1,0.957300066947937,0.9613282680511476,0.9858747124671936,-1.0,accept,unanimous_agreement
682805146,1384,similar as above. you can implement your own writer or even simply serialize to string first,0,0,0,0.9868664741516112,0.9922608733177184,0.9939602613449096,0.0,accept,unanimous_agreement
682805764,1384,the same about the base :),1,1,0,0.8785542249679565,0.9872949719429016,0.9924523234367372,1.0,accept,majority_agreement
683677723,1384,resolved [a link],0,0,0,0.987500786781311,0.983327090740204,0.9945695996284484,0.0,accept,unanimous_agreement
683677771,1384,resolved [a link],0,0,0,0.987500786781311,0.983327090740204,0.9945695996284484,0.0,accept,unanimous_agreement
683717884,1384,resolved [a link],0,0,0,0.987500786781311,0.983327090740204,0.9945695996284484,0.0,accept,unanimous_agreement
683717955,1384,resolved [a link],0,0,0,0.987500786781311,0.983327090740204,0.9945695996284484,0.0,accept,unanimous_agreement
686659439,1384,"this is fine for now but should be defaulted to off i think. we should figure out the best way to deliver the effect first, as it is huuuuge :)",1,1,1,0.9830099940299988,0.9762513041496276,0.9942413568496704,1.0,accept,unanimous_agreement
686672894,1384,"let's add another atomic, that controls thread termination. `detach` should really never be used :-) so it will be like `cancel.store(true); threa.join();`",1,1,1,0.671105146408081,0.9263013005256652,0.9420228600502014,1.0,accept,unanimous_agreement
686677310,1384,this still blocks the ui thread! at least `wxsafeyield` should be used instead.,0,0,-1,0.9840152263641356,0.9646284580230712,0.5213087201118469,0.0,accept,majority_agreement
686685650,1384,no c-casts please!,0,0,-1,0.9294111132621764,0.7665027976036072,0.8280770182609558,0.0,accept,majority_agreement
686686121,1384,std::make_unique?,0,0,0,0.9848405718803406,0.9927181005477904,0.9940420985221864,0.0,accept,unanimous_agreement
686686241,1384,std::make_unique?,0,0,0,0.9848405718803406,0.9927181005477904,0.9940420985221864,0.0,accept,unanimous_agreement
686688810,1384,why do we need shared_ptr?,0,0,0,0.9802815914154052,0.986119270324707,0.991605281829834,0.0,accept,unanimous_agreement
686689696,1384,i would prefer explicit encoding here. lib-strings can help with it :-),1,1,0,0.9699912071228028,0.8457562327384949,0.5538215041160583,1.0,accept,majority_agreement
686690339,1384,why .c_str?,0,0,0,0.97724050283432,0.987147092819214,0.9887269735336304,0.0,accept,unanimous_agreement
686690540,1384,why .c_str?,0,0,0,0.97724050283432,0.987147092819214,0.9887269735336304,0.0,accept,unanimous_agreement
686693372,1384,"in this case, i prefer having a no-throw overload, that provides a default value. like: [code block] also, passing the document as a first argument would allow defaulting the default value!",0,0,0,0.9751198291778564,0.9873523712158204,0.962181031703949,0.0,accept,unanimous_agreement
686696554,1384,you can write the lambda inline! [code block],0,0,0,0.9741922616958618,0.9622331261634828,0.9597002267837524,0.0,accept,unanimous_agreement
686701937,1384,i would prefer sticking to camelcase,0,0,0,0.9356703162193298,0.9690430164337158,0.973897099494934,0.0,accept,unanimous_agreement
686874055,1384,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
686874142,1384,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
686874216,1384,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
686896814,1384,resolved [a link],0,0,0,0.987500786781311,0.983327090740204,0.9945695996284484,0.0,accept,unanimous_agreement
686958202,1384,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
686971224,1384,resolved [a link],0,0,0,0.987500786781311,0.983327090740204,0.9945695996284484,0.0,accept,unanimous_agreement
686980913,1384,"hmm, i'm not entirely sure what you mean. would you mind clarifying? thanks!",1,1,1,0.9030505418777466,0.9449055790901184,0.9726662039756776,1.0,accept,unanimous_agreement
686984438,1384,`audacity::toutf8` from `codeconversions.h`,0,0,0,0.97317636013031,0.9943050742149352,0.9923081398010254,0.0,accept,unanimous_agreement
691138871,1384,static_cast please :),1,1,0,0.849583625793457,0.9473114013671876,0.9904959201812744,1.0,accept,majority_agreement
691139543,1384,this can be `retrun mresampler->forward(inputs).totensor();`,0,0,0,0.9858777523040771,0.9940699338912964,0.9947178959846495,0.0,accept,unanimous_agreement
691140495,1384,"i think it is worth commenting what is `nogradguard` and why it is needed. also, *camecase* for the variable name please.",0,0,0,0.9706858396530152,0.9818801879882812,0.9791389107704164,0.0,accept,unanimous_agreement
691140827,1384,new line before `throw` and `xo`,0,0,0,0.9858141541481018,0.9923248291015624,0.9931968450546264,0.0,accept,unanimous_agreement
691140929,1384,new line before `throw`,0,0,0,0.9864450097084044,0.9872867465019226,0.993219792842865,0.0,accept,unanimous_agreement
691141255,1384,and let's wrap it in `xo` as it is possibly user visible.,0,0,0,0.9896491765975952,0.9910208582878112,0.9954315423965454,0.0,accept,unanimous_agreement
691148602,1384,as with the previous case - let's move everything under the `try`,0,0,0,0.986078679561615,0.992238700389862,0.9939870834350586,0.0,accept,unanimous_agreement
691148869,1384,let move them to the `private` section below,0,0,0,0.9886505603790284,0.994097113609314,0.9954621195793152,0.0,accept,unanimous_agreement
691149156,1384,if there are no sub-classes planned - let's mark it `final`,0,0,0,0.9868488311767578,0.9935948252677916,0.9934050440788268,0.0,accept,unanimous_agreement
691149496,1384,"does it modify internal state? it not, it should be `const`",0,0,0,0.980004906654358,0.9947413206100464,0.99404114484787,0.0,accept,unanimous_agreement
691149679,1384,make it `const` please,0,0,0,0.987739622592926,0.9928554892539978,0.9953712821006776,0.0,accept,unanimous_agreement
691149874,1384,make it `const` please,0,0,0,0.987739622592926,0.9928554892539978,0.9953712821006776,0.0,accept,unanimous_agreement
691149990,1384,"does it modify internal state? it not, it should be `const`",0,0,0,0.980004906654358,0.9947413206100464,0.99404114484787,0.0,accept,unanimous_agreement
691150568,1384,initialize it please. like [code block],0,0,0,0.9814695119857788,0.9919705390930176,0.9952293634414672,0.0,accept,unanimous_agreement
691150703,1384,initialization could and should be movede here,0,0,0,0.9887475967407228,0.9942052960395812,0.9951732754707336,0.0,accept,unanimous_agreement
691155282,1384,`final`?,0,0,0,0.9830428957939148,0.988864541053772,0.9919310212135316,0.0,accept,unanimous_agreement
691157054,1384,"do we really need to explicitely initialize the mcards? also, please put the initializer list to a new line",0,0,0,0.9883373379707336,0.9929168224334716,0.9953899383544922,0.0,accept,unanimous_agreement
691158831,1384,`const std::string` and `audacity::toutf8` please. or even it can be left as `wxstring` or `wxfilename`? on windows there should be lots of care about string encodings when working with files.,0,0,0,0.9814058542251588,0.993349015712738,0.989700198173523,0.0,accept,unanimous_agreement
691159472,1384,"`= default` probably will be sufficient here. althoug there is a bug in older gcc versions, so probably this change will be reverted :)",0,1,1,0.6368784308433533,0.9382003545761108,0.9565829634666444,1.0,accept,majority_agreement
691162211,1384,`httpcode != 200 && httpcode != 302`?,0,0,0,0.9858388304710388,0.9935623407363892,0.995033860206604,0.0,accept,unanimous_agreement
691163084,1384,"something like should work: `wxlogdebug(""saving modelcard for %s \n"", card->getrepoid())`;",0,0,0,0.986122727394104,0.9841499924659728,0.9943408966064452,0.0,accept,unanimous_agreement
691163414,1384,possible encoding issues again,0,0,0,0.935010015964508,0.9666202664375304,0.96805077791214,0.0,accept,unanimous_agreement
691163480,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691164716,1384,do you really need to store the response? it seems you capture it in `downloadmodel` inside the finished callback,0,0,0,0.9885700345039368,0.9946150183677672,0.9950686693191528,0.0,accept,unanimous_agreement
691190892,1384,"actually, it seems to be a bug in networkmanager :) let's fix it! `if (mhttpcode == 0)` should be removed from the curlresponse.cpp:307 after this, check for `httpscode != 200` will be sufficient!",1,1,1,0.9831551313400269,0.9885293841362,0.9930490255355836,1.0,accept,unanimous_agreement
691192032,1384,i think checking for errors is good idea here,1,1,1,0.7204864025115967,0.6835211515426636,0.9806146025657654,1.0,accept,unanimous_agreement
691192345,1384,you can throw if remove fails,0,0,0,0.9864000082015992,0.9819427132606506,0.989620804786682,0.0,accept,unanimous_agreement
691192509,1384,`!=`,0,0,0,0.9483559727668762,0.976328432559967,0.791607677936554,0.0,accept,unanimous_agreement
691192822,1384,`const std::string`,0,0,0,0.9838842749595642,0.9881662130355836,0.992984414100647,0.0,accept,unanimous_agreement
691193282,1384,"oh, i see you need it! ignore my previous comment on it :)",1,1,1,0.989395797252655,0.9762023091316224,0.8664487600326538,1.0,accept,unanimous_agreement
691197326,1384,"`const std::string&` there are cases, when plain `std::string` is preferred. for example: * you always change the string inside * you can move the string (for example, as initializer in constructor) in this case, unnessesary copy will be created.",0,0,0,0.988609790802002,0.9952591061592102,0.991584300994873,0.0,accept,unanimous_agreement
691197805,1384,explicit capture list please!,0,0,0,0.982571303844452,0.8995088338851929,0.9746208190917968,0.0,accept,unanimous_agreement
691197974,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691198373,1384,"`return ""[a link] will work too",0,0,0,0.987604022026062,0.9784760475158693,0.9953098893165588,0.0,accept,unanimous_agreement
691201529,1384,std::make_shared please.,0,0,0,0.9827100038528442,0.9923628568649292,0.9914643168449402,0.0,accept,unanimous_agreement
691202932,1384,"well, at least `const std::string` but i think this should be extracted into a method as well. something like `geturl(""models.json"")`",0,0,0,0.9859392642974854,0.9945058226585388,0.9918221831321716,0.0,accept,unanimous_agreement
691203624,1384,!=,0,0,0,0.7124844789505005,0.8985469341278076,0.7911180853843689,0.0,accept,unanimous_agreement
691203722,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691205228,1384,const std::string,0,0,0,0.9855875968933104,0.9735679626464844,0.9892377853393556,0.0,accept,unanimous_agreement
691205807,1384,!=,0,0,0,0.7124844789505005,0.8985469341278076,0.7911180853843689,0.0,accept,unanimous_agreement
691205886,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691206019,1384,std::make_shared,0,0,0,0.9858142733573914,0.9635461568832396,0.9917932152748108,0.0,accept,unanimous_agreement
691206574,1384,look like this variable is not used. let's remove it.,0,0,0,0.9749446511268616,0.9820011258125304,0.9908487796783448,0.0,accept,unanimous_agreement
691207327,1384,"static_cast! please, don't use c-casts, unless you are writing c code.",0,0,-1,0.965851902961731,0.9607723355293274,0.9162887334823608,0.0,accept,majority_agreement
691208000,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691208312,1384,the fix to curlresponse and !=,0,0,0,0.9797154664993286,0.9089154601097108,0.9945945143699646,0.0,accept,unanimous_agreement
691208526,1384,no cerr please!,-1,0,-1,0.618058979511261,0.7583092451095581,0.8105154037475586,-1.0,accept,majority_agreement
691208794,1384,std::make_shared,0,0,0,0.9858142733573914,0.9635461568832396,0.9917932152748108,0.0,accept,unanimous_agreement
691209415,1384,const std::string,0,0,0,0.9855875968933104,0.9735679626464844,0.9892377853393556,0.0,accept,unanimous_agreement
691209909,1384,no explicit wxstring,0,0,0,0.9871302247047424,0.971096932888031,0.9943676590919496,0.0,accept,unanimous_agreement
691211041,1384,"also, we don't really use hungarian notation. i would prefer something like `cardauthor` and `cardname`",0,0,0,0.9618350863456726,0.9689871668815612,0.993500292301178,0.0,accept,unanimous_agreement
691211429,1384,you can `return true` from try block...,0,0,0,0.987128496170044,0.9892589449882508,0.9945951104164124,0.0,accept,unanimous_agreement
691211715,1384,... and just return false here,0,0,0,0.9451574683189392,0.6803551316261292,0.9729233980178832,0.0,accept,unanimous_agreement
691213058,1384,but do we really need try ... catch ... ? is this block run on a different thread? maybve just throwing will be sufficient?,0,0,0,0.9796470403671264,0.9877161383628844,0.9852783679962158,0.0,accept,unanimous_agreement
691213306,1384,see above :),1,1,0,0.7007662057876587,0.9852907657623292,0.992622971534729,1.0,accept,majority_agreement
691213606,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691213727,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691213866,1384,const!),1,0,1,0.5201641321182251,0.5224668383598328,0.9259393811225892,1.0,accept,majority_agreement
691214806,1384,see above about the curlresponse!,0,0,0,0.9796817302703856,0.9364787936210632,0.9944366216659546,0.0,accept,unanimous_agreement
691217303,1384,"wxfile doesn't throw, so you should check the errors differently.",0,0,0,0.9842798709869384,0.962411105632782,0.9661006927490234,0.0,accept,unanimous_agreement
691217428,1384,why is it needed?,0,0,0,0.9596907496452332,0.9635456204414368,0.9891014695167542,0.0,accept,unanimous_agreement
691218747,1384,"i don't quite undestand, how this error will be presented to the user.",0,-1,0,0.861312747001648,0.635577380657196,0.8090143203735352,0.0,accept,majority_agreement
691219611,1384,final?,0,0,0,0.9590096473693848,0.9744627475738524,0.98588365316391,0.0,accept,unanimous_agreement
691220571,1384,this is the case where you should have plain `std::string`. then - `m_msg(std::move(msg))`,0,0,0,0.9873396158218384,0.9943866729736328,0.9944279193878174,0.0,accept,unanimous_agreement
691221156,1384,do we really need the sub-project?,0,0,0,0.985917866230011,0.9883233308792114,0.9891136884689332,0.0,accept,unanimous_agreement
691222395,1384,this is the case where `std::string` should be used. than `m_msg(std::move(msg))`,0,0,0,0.9880027770996094,0.9949207901954652,0.99518084526062,0.0,accept,unanimous_agreement
691222975,1384,"also, i think msg should be a `translatablestring`",0,0,0,0.9872309565544128,0.9921165108680724,0.9944397211074828,0.0,accept,unanimous_agreement
691223688,1384,final?,0,0,0,0.9590096473693848,0.9744627475738524,0.98588365316391,0.0,accept,unanimous_agreement
691223854,1384,const?,0,0,0,0.9827048182487488,0.9756897687911988,0.9789122939109802,0.0,accept,unanimous_agreement
691223913,1384,const?,0,0,0,0.9827048182487488,0.9756897687911988,0.9789122939109802,0.0,accept,unanimous_agreement
691224173,1384,const?,0,0,0,0.9827048182487488,0.9756897687911988,0.9789122939109802,0.0,accept,unanimous_agreement
691224267,1384,const?,0,0,0,0.9827048182487488,0.9756897687911988,0.9789122939109802,0.0,accept,unanimous_agreement
691224309,1384,const?,0,0,0,0.9827048182487488,0.9756897687911988,0.9789122939109802,0.0,accept,unanimous_agreement
691224452,1384,"well, you know... const?",0,0,0,0.9804778695106506,0.9749114513397216,0.9579920768737792,0.0,accept,unanimous_agreement
691224821,1384,const?,0,0,0,0.9827048182487488,0.9756897687911988,0.9789122939109802,0.0,accept,unanimous_agreement
691224882,1384,const?,0,0,0,0.9827048182487488,0.9756897687911988,0.9789122939109802,0.0,accept,unanimous_agreement
691225018,1384,"const? also, see the cpp file",0,0,0,0.9885586500167848,0.9918681979179382,0.9940316081047058,0.0,accept,unanimous_agreement
691225253,1384,some formattring issues here,0,0,0,0.986311972141266,0.9225770235061646,0.9802159667015076,0.0,accept,unanimous_agreement
691230612,1384,do you really need to copy to a different array?,0,0,0,0.9813959002494812,0.9874144196510316,0.9898415207862854,0.0,accept,unanimous_agreement
691230815,1384,`: moutputtracks->selectedleaders ()`,0,0,0,0.9512959122657776,0.991296648979187,0.992089033126831,0.0,accept,unanimous_agreement
691234742,1384,"well, sleep is still here :)",1,1,1,0.9696906805038452,0.9882657527923584,0.9277348518371582,1.0,accept,unanimous_agreement
691237056,1384,"but this won't block forward pass, will it? i think an exception should be thrown here. also, the e.what() should be included in the message. otherwise it is hard to understand what has happened. given that modelexception is messageboxexception i think that it makes sense just to remove try-catch here.",0,0,0,0.9580785632133484,0.9777786135673524,0.9891911745071412,0.0,accept,unanimous_agreement
691238692,1384,this method is called from a different thread. you should not interract with the ui from threads other than the main thread.,0,0,0,0.9860709309577942,0.9451158046722412,0.993221879005432,0.0,accept,unanimous_agreement
691239045,1384,the context is lost here again. e.what should be included in the error message.,0,0,0,0.9221442341804504,0.9827399253845216,0.949539065361023,0.0,accept,unanimous_agreement
691239733,1384,!=,0,0,0,0.7124844789505005,0.8985469341278076,0.7911180853843689,0.0,accept,unanimous_agreement
691240926,1384,"i'm not sure, but maybe something derived from audacity exceptions hierarchy shoul be used?",0,0,0,0.9566217064857484,0.902962863445282,0.8692256212234497,0.0,accept,unanimous_agreement
691241014,1384,const void* here ...,0,0,0,0.882854700088501,0.9812644720077516,0.98539137840271,0.0,accept,unanimous_agreement
691242420,1384,... static_cast here,0,0,0,0.9835081100463868,0.9864025712013244,0.9937081336975098,0.0,accept,unanimous_agreement
691242512,1384,const!,0,0,1,0.9429593682289124,0.8716628551483154,0.9072546362876892,0.0,accept,majority_agreement
691242934,1384,do we need try catch here?,0,0,0,0.9834461808204652,0.9916708469390868,0.99424546957016,0.0,accept,unanimous_agreement
691244124,1384,look for `/* i18n-hint: ` examples in the code. it is important to clarify how placeholder will be replaced to translators,0,0,0,0.984288454055786,0.9936364889144896,0.994123876094818,0.0,accept,unanimous_agreement
691244643,1384,probably xc should be used here (and above),0,0,0,0.9853555560112,0.9932236671447754,0.9880084991455078,0.0,accept,unanimous_agreement
691244890,1384,see above,0,0,0,0.9731385707855223,0.913881540298462,0.985628604888916,0.0,accept,unanimous_agreement
691246118,1384,"oooph, lets probably create issame method in modelcard?",0,0,0,0.9768919348716736,0.9674196243286132,0.9933104515075684,0.0,accept,unanimous_agreement
691246702,1384,ditto may this should be moved to a separate method?,0,0,0,0.9859237670898438,0.988430380821228,0.9927929639816284,0.0,accept,unanimous_agreement
691247250,1384,"please, move the initialization here from the constructor",0,0,0,0.9879855513572692,0.9924399852752686,0.9931047558784484,0.0,accept,unanimous_agreement
691247300,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691248186,1384,translatablestring?,0,0,0,0.9880173206329346,0.9724564552307128,0.9943603873252868,0.0,accept,unanimous_agreement
691248249,1384,translatablestring?,0,0,0,0.9880173206329346,0.9724564552307128,0.9943603873252868,0.0,accept,unanimous_agreement
691250093,1384,"generally, if you pass a pointer to the function - it should check if it is not nullptr. or you can pass `const document&` here and to the functions below, which will simplify them as well. (this applies to every function in the namespace)",0,0,0,0.9878072142601012,0.9933297038078308,0.9925191402435304,0.0,accept,unanimous_agreement
691251372,1384,translatablestring with format?,0,0,0,0.9885438084602356,0.974673330783844,0.994147777557373,0.0,accept,unanimous_agreement
691251809,1384,explicit toutf8 please,0,0,0,0.9878565073013306,0.9920613765716552,0.994062602519989,0.0,accept,unanimous_agreement
691252299,1384,can this guy be defaulted?,0,0,0,0.9099823832511902,0.9861496686935424,0.9837034344673156,0.0,accept,unanimous_agreement
691252488,1384,= default please,0,0,0,0.962535560131073,0.9699278473854064,0.9842448830604552,0.0,accept,unanimous_agreement
691252756,1384,see comment about checking the pointers!,0,0,0,0.9834095239639282,0.973466694355011,0.993206024169922,0.0,accept,unanimous_agreement
691253685,1384,"well, you know. translatablestring and format?",0,0,0,0.9883530735969543,0.9768940806388856,0.9915134310722352,0.0,accept,unanimous_agreement
691255159,1384,is it intentional?,0,0,0,0.934357225894928,0.963773548603058,0.9733911752700806,0.0,accept,unanimous_agreement
691255435,1384,how do we report the error to the user?),0,0,0,0.9457464218139648,0.9762029647827148,0.9913942217826844,0.0,accept,unanimous_agreement
691255998,1384,"if we are ok with default values, let's use overloads with them",0,0,0,0.9878637194633484,0.9878040552139282,0.9901463389396667,0.0,accept,unanimous_agreement
691256598,1384,`getrepoid() == that.getrepoid()`?,0,0,0,0.9845528602600098,0.9937233328819276,0.994952917098999,0.0,accept,unanimous_agreement
691256872,1384,= default,0,0,0,0.9536699652671814,0.9512579441070556,0.9805260300636292,0.0,accept,unanimous_agreement
691257456,1384,`if( it == this->end() )`,0,0,0,0.9876915812492372,0.9907662868499756,0.993131458759308,0.0,accept,unanimous_agreement
691259716,1384,you should use `std::back_inseter` in `copy_if`!,0,0,0,0.9869869947433472,0.9923332929611206,0.9954988360404968,0.0,accept,unanimous_agreement
691261127,1384,with back_inserter - you wont need this method.,0,0,0,0.9872375726699828,0.987343430519104,0.9955394864082336,0.0,accept,unanimous_agreement
691261285,1384,final?,0,0,0,0.9590096473693848,0.9744627475738524,0.98588365316391,0.0,accept,unanimous_agreement
691261398,1384,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
691262196,1384,do you use this functions outside the modelcard? if not - they should not be in the header!,0,0,0,0.9686111211776732,0.987766981124878,0.994049310684204,0.0,accept,unanimous_agreement
691262826,1384,final!,0,1,0,0.7159443497657776,0.4578888118267059,0.9480268359184264,0.0,accept,majority_agreement
691263487,1384,probably let's still use camelcase?,0,0,0,0.9859469532966614,0.9924079179763794,0.9822955131530762,0.0,accept,unanimous_agreement
691263645,1384,msvc failed to compile,0,0,0,0.9244810342788696,0.9548912644386292,0.9287031888961792,0.0,accept,unanimous_agreement
691266431,1384,final?,0,0,0,0.9590096473693848,0.9744627475738524,0.98588365316391,0.0,accept,unanimous_agreement
691266884,1384,i prefer inline intialization whnever possible,0,0,0,0.9792856574058532,0.930283784866333,0.9834185242652892,0.0,accept,unanimous_agreement
691267438,1384,the only reason for this class is filter?,0,0,0,0.9618880152702332,0.9857500791549684,0.9919844269752502,0.0,accept,unanimous_agreement
691267765,1384,static const int!,0,0,0,0.984804391860962,0.5872093439102173,0.8917027711868286,0.0,accept,unanimous_agreement
691269917,1384,std::move?,0,0,0,0.980795443058014,0.9893413186073304,0.9928488731384276,0.0,accept,unanimous_agreement
691285109,1384,more explicit name for the class. and let's move it to a different set of h/cpp,0,0,0,0.9866668581962584,0.9889857769012452,0.9920111298561096,0.0,accept,unanimous_agreement
691286239,1384,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
691287316,1384,`verbatim` should be used here. xo/xc are for strings that should be translated.,0,0,0,0.98833429813385,0.9953113198280334,0.9946107864379884,0.0,accept,unanimous_agreement
691289565,1384,why do we need show?,0,0,0,0.9563993215560912,0.952576756477356,0.9899446964263916,0.0,accept,unanimous_agreement
691290030,1384,xc here for sure,0,0,0,0.9637460112571716,0.9803020358085632,0.9607782959938048,0.0,accept,unanimous_agreement
691290199,1384,xc,0,0,0,0.952043354511261,0.926144242286682,0.8466074466705322,0.0,accept,unanimous_agreement
691290466,1384,static_cast!,0,0,0,0.9833266139030457,0.954572856426239,0.9191780090332032,0.0,accept,unanimous_agreement
691290811,1384,translation?,0,0,0,0.977103590965271,0.986534595489502,0.9919523596763612,0.0,accept,unanimous_agreement
691292518,1384,different set of h/cpp?,0,0,0,0.9809750318527222,0.9817339181900024,0.9891286492347716,0.0,accept,unanimous_agreement
691294833,1384,capitalize constatants please!,0,0,0,0.9796696901321412,0.874570906162262,0.9791995882987976,0.0,accept,unanimous_agreement
692202978,1384,"yes! the reason i do this is because `moutputtracks->selectedleaders ()` is an iterator, and source separation appends to `moutputtracks` while it's iterating, meaning that we will then feed the output tracks back into the loop (in a possibly infinite loop)",0,0,0,0.9247945547103882,0.9592586159706116,0.7916595935821533,0.0,accept,unanimous_agreement
692212170,1384,the `static_cast` doesn't like the const qualifier: **code**: [code block] **error stack**: [code block],0,0,0,0.6616209149360657,0.8839889764785767,0.9855018854141236,0.0,accept,unanimous_agreement
692213097,1384,(casting to `const sampleptr` (aka `char *const`) doesn't work either,0,0,0,0.9420925974845886,0.9388722777366638,0.9883527159690856,0.0,accept,unanimous_agreement
692226377,1384,resolved in [a link],0,0,0,0.987494170665741,0.9891554713249208,0.9955808520317078,0.0,accept,unanimous_agreement
692342728,1384,"this shouldn't need to face the user, just the model contributor who is debugging a model.",0,0,0,0.9783061146736144,0.9736937284469604,0.9880123138427734,0.0,accept,unanimous_agreement
693056631,1384,"this block is run from a networkmanager thread, when each card is retrieved from huggingface, so we need to catch any exceptions to avoid not throwing them in the main thread",0,0,0,0.9862490296363832,0.9776198863983154,0.9885997772216796,0.0,accept,unanimous_agreement
693077758,1384,why use std::move if `card` is a shared_ptr?,0,0,0,0.9830922484397888,0.9936237335205078,0.9837719798088074,0.0,accept,unanimous_agreement
693140031,1384,"yes, and insert. i had other plans for it, but i don't think i'll have time for that",0,0,0,0.9088085889816284,0.8767803311347961,0.9418633580207824,0.0,accept,unanimous_agreement
693140737,1384,ah! i wanted to keep a difference between methods for the dto and just data fields. i'd be happy to switch everything over to camelcase though,1,1,1,0.8902153372764587,0.9916309714317322,0.9641023278236388,1.0,accept,unanimous_agreement
693406264,1384,"once the download is completed, the ui thread checks to see if the files were installed with isinstalled(). if isinstalled() returns false, then an error is presented to the user.",0,0,0,0.9830333590507508,0.992301106452942,0.9934275150299072,0.0,accept,unanimous_agreement
694082485,1384,fixed in rebase!,0,0,0,0.9771935939788818,0.932610034942627,0.957221508026123,0.0,accept,unanimous_agreement
694291557,1384,[x],0,0,0,0.9808779954910278,0.9841301441192628,0.9916139841079712,0.0,accept,unanimous_agreement
778742227,1384,macos,0,0,0,0.9835206866264344,0.9362348318099976,0.9876652956008912,0.0,accept,unanimous_agreement
778743288,1384,remove these changes from the branch please,0,0,0,0.9846855401992798,0.9919924736022948,0.9945195317268372,0.0,accept,unanimous_agreement
778746112,1384,"better to write `set( sources`, in case the variable sources inherits some value from parent scope that woud influence the cmake evaluation incorrectly.",0,0,0,0.9829596281051636,0.992148220539093,0.9898035526275636,0.0,accept,unanimous_agreement
778747373,1384,"similarly, precede the loop with the command `set( outputs )` to be sure that variable is empty before you append to it.",0,0,0,0.9877113699913024,0.9915685057640076,0.993645191192627,0.0,accept,unanimous_agreement
778748755,1384,"""tags"" not required. is that correct?",0,0,0,0.9857733845710754,0.9900485277175904,0.9951069355010986,0.0,accept,unanimous_agreement
778750215,1384,why was this change necessary to your build?,0,0,0,0.934627890586853,0.9894866943359376,0.9925169348716736,0.0,accept,unanimous_agreement
778754080,1384,this is ok?,0,0,0,0.9810299873352052,0.956796169281006,0.9273771047592164,0.0,accept,unanimous_agreement
778757977,1384,i would like every new cmakelists.txt file for a library or a module to begin with long-form comments at the top giving some overview of the purpose: [code block] you might explain what some of the individual source files do but it is not necessary for all of them.,0,0,0,0.9380481243133544,0.9881930947303772,0.9888124465942384,0.0,accept,unanimous_agreement
778760176,1384,now i see an explanation in audacityheaders.h. please repeat it here.,0,0,0,0.97645103931427,0.979747712612152,0.9932723641395568,0.0,accept,unanimous_agreement
778775338,1384,"before diving deeply in these new source code files to understand them, the first thing i did was look through the #include directives to understand their dependencies, so that i could understand how to approach understanding bottom-up or top-down. i made this graph with graphviz of dependencies among the .cpp/.h file pairs: ![a link] ideally dependencies among source code files should have no cycles, but i find two non-trivial strongly connected components here, as boxes. can these dependencies be broken? maybe my further exploration will tell me.",-1,0,0,0.5224201679229736,0.8853183388710022,0.8894928693771362,0.0,accept,majority_agreement
778778433,1384,"a good rule to follow is that each .cpp file will # include its corresponding h file before any other, so that we are sure each .h file is compiled at least once in the system as the first header, and therefore contains all other nested inclusions that it depends on. this forces the # include directives to tell the complete story of compilation dependencies, and you know i care about getting a correct picture of those dependencies. you followed that rule but with two exceptions. this is one, and modelmanager.cpp is the other. i rearranged the # include lines in my own build, to be sure things still compile. they do. please make those changes too.",0,0,0,0.8238657712936401,0.9253301024436952,0.7296109199523926,0.0,accept,unanimous_agreement
778916640,1384,yes,0,0,0,0.9564858078956604,0.9659429788589478,0.9686408638954164,0.0,accept,unanimous_agreement
779167788,1384,you can `std::move` from `msg` too for a small efficiency,0,0,0,0.9857643246650696,0.9918789863586426,0.994025468826294,0.0,accept,unanimous_agreement
779169807,1384,`noexcept` is more modern c++ style than `throw()`,0,0,0,0.9850664138793944,0.9913464188575744,0.9928324222564696,0.0,accept,unanimous_agreement
779177722,1384,"thank you for documenting the exception safety contract! but here and elsewhere, write it correctly, `` not ``. it is supposed to be a promise that the object does not change its state at all in case of exceptions. it is often implemented by building a copy, and swapping it with the original only when the copy is completed. but is this comment event right? i read the implementation and i see no checking of the schema, no throwing of an exception. that is a doxygen alias defined in audacity.dox.in.",1,1,1,0.9499194025993348,0.9289808869361876,0.9718244671821594,1.0,accept,unanimous_agreement
779178516,1384,could be `const`,0,0,0,0.9857649207115172,0.989950954914093,0.9931831955909728,0.0,accept,unanimous_agreement
779182550,1384,const,0,0,0,0.9770036339759828,0.9538535475730896,0.8837863802909851,0.0,accept,unanimous_agreement
779183227,1384,"iteration over a const container (so you can't insert into it) but exposing shared pointers to non-const cards. do you want that, or do you want ""deep const?""",0,0,0,0.98597252368927,0.9772046208381652,0.9784734845161438,0.0,accept,unanimous_agreement
779184717,1384,unnecessary `;`,0,0,0,0.8989936113357544,0.9889033436775208,0.8597733974456787,0.0,accept,unanimous_agreement
779186943,1384,"the files in this namespace are used only in modelcard.cpp. so should you move them there, and simplify this interface file?",0,0,0,0.9895710945129396,0.9951685667037964,0.9953190684318542,0.0,accept,unanimous_agreement
779188438,1384,"""long-distance"" friendship, with a class defined in a different header file, is something to avoid. it implies i can't really understand modelcard without understanding deepmodelmanager. why not just publicize more methods of modelcard? what are invariant conditions of the modelcard object that must be maintained by functions in its public interface? if you can state them, and if use of the mutating methods that are made public when you remove the friend declaration don't lead to violations of them -- then deepmodelmanager doesn't really need to be a friend.",0,0,0,0.9092509150505066,0.9463158249855042,0.9188746809959412,0.0,accept,unanimous_agreement
779190027,1384,const,0,0,0,0.9770036339759828,0.9538535475730896,0.8837863802909851,0.0,accept,unanimous_agreement
779191720,1384,"you are inconsistent in the convention for naming of ""setter"" functions, some with ""set"" in the name, some without. actually i suggest you use the without convention, and further allow the ""chain-call"" idiom: [code block] and similar, then elsewhere: [code block] could instead be nicely: [code block]",0,0,0,0.9691774845123292,0.9905331134796144,0.980916440486908,0.0,accept,unanimous_agreement
779193627,1384,"i have a mild preference for the new uniform-initialization, curly-brace syntax in constructor expressions.",0,0,0,0.9152194857597352,0.921053409576416,0.9529014825820924,0.0,accept,unanimous_agreement
779195789,1384,"i see from uses elsewhere that these predicates assume a non-null pointer, and the fact that the pointer is a smart one is irrelevant. also the card isn't mutated. say all of this with types. use a reference to const, not a pointer to modifiable. make the type `std::function ` this complicates the implementation of filter() below, but makes the interface in this header file simpler to understand. i know more about what the predicate is and isn't allowed to do.",0,0,0,0.9290146231651306,0.9478594064712524,0.988958477973938,0.0,accept,unanimous_agreement
779198488,1384,"the implementation of the non-throwing function might be a little bit cheaper, if it and the throwing function are both implemented in terms of a third, non-throwing function, visible only in this .cpp file, that returns a `std::optional `; rather than having to catch an exception whenever defaulting of the value applies. similar for other pairs of functions below.",0,0,0,0.9855479598045348,0.9923185110092164,0.9918507933616638,0.0,accept,unanimous_agreement
779200973,1384,`d.parse` is called twice. is that a mistake? is it a harmless mistake that makes no difference to the final state of `d`? i don't know rapidjson enough to answer the questions for myself.,0,0,0,0.8229284882545471,0.5755708813667297,0.8660043478012085,0.0,accept,unanimous_agreement
779201564,1384,"i looked at all uses of this type, and i don't see a non-empty second argument given anywhere to the constructor.",0,0,0,0.9837586283683776,0.9856843948364258,0.990471601486206,0.0,accept,unanimous_agreement
779204628,1384,perhaps the error message should quote the path to be more helpful to the user. perhaps call the static member function `translatablestring fileexception::writefailuremessage(const wxfilename &filename);` to format the message consistently with other messages in audacity.,0,0,0,0.9876919388771056,0.994681179523468,0.9902837872505188,0.0,accept,unanimous_agreement
779205799,1384,"should comment that only getrepoid is meant to be significant in comparison, not the other fields: i was surprised to learn this when i got to reviewing the implementation. now i wonder why you need operator ==. it raises the question, could this type also usefully be hashable or comparable with `<` ?",0,0,0,0.9243212342262268,0.7930378317832947,0.5974442362785339,0.0,accept,unanimous_agreement
779206462,1384,no insertion happens that would make non-unique ids. perhaps the return should be boolean.,0,0,0,0.9874754548072816,0.987662434577942,0.988920509815216,0.0,accept,unanimous_agreement
779207018,1384,"might take the lambda argument by const reference for tiny efficiency, avoiding reference count changes",0,0,0,0.9865456819534302,0.9752612113952636,0.9896201491355896,0.0,accept,unanimous_agreement
779207529,1384,"might `move(card)` for another tiny efficiency, or make the argument of `insert()` a const reference, avoiding one shared pointer copy",0,0,0,0.9874637126922609,0.9924874305725098,0.9883723855018616,0.0,accept,unanimous_agreement
779208610,1384,i see `m_is_local` and `m_local_path` are omitted. should i think it's a possible bug or should a comment tell me that is intended?,0,0,0,0.9842181205749512,0.9903590083122252,0.9944673776626588,0.0,accept,unanimous_agreement
779208939,1384,"""metadata""",0,0,0,0.9854543209075928,0.9878541827201844,0.9886131286621094,0.0,accept,unanimous_agreement
779209049,1384,"""hf"" means huggingface, right?",0,0,0,0.9062797427177428,0.9658613204956056,0.9732663631439208,0.0,accept,unanimous_agreement
779209784,1384,permuting these lines so the order agrees with the serialization function would help a reviewer verify it's complete.,0,0,0,0.9874470829963684,0.9892894625663756,0.9916450381278992,0.0,accept,unanimous_agreement
779212086,1384,"better to use the `` (or `\file`, no difference) command to name and briefly describe a file's purpose. i prefer not to use the `\class` command at all, but instead just prefix the doxygen comments to the class definition itself.",0,0,0,0.9696381092071532,0.9941173791885376,0.9904099702835084,0.0,accept,unanimous_agreement
779212439,1384,no such class (any more?). remove this comment,0,0,0,0.9642573595046996,0.9731298685073853,0.9863165020942688,0.0,accept,unanimous_agreement
779213129,1384,"might precede this line with `//i18n-hint ` i believe dmitry has already emphasized to you the importance of the special i18n-hint comments, which get extracted from the source into the translation catalog, which human translation experts must fill in. unusual words out of context might need some more helpful explanation.",0,0,0,0.9754730463027954,0.9874423146247864,0.99091374874115,0.0,accept,unanimous_agreement
779215264,1384,might `move`,0,0,0,0.9854538440704346,0.9893476963043212,0.98746919631958,0.0,accept,unanimous_agreement
779215895,1384,"""its""",0,0,0,0.9595107436180116,0.8795079588890076,0.9842362403869628,0.0,accept,unanimous_agreement
779217550,1384,"again, """"",0,0,0,0.8643629550933838,0.6993323564529419,0.9613997340202332,0.0,accept,unanimous_agreement
779218839,1384,"i only now noticed a systematic mistake of yours in doxygen comments. please read this: [a link] your comment blocks are not correct, and none of your intended documentation comments for methods are going into the generated html pages. (you can generate those for yourself if you install doxygen and run at the project root: `doxygen nographs.dox`) to make the extraction work, you need to start line comments with `//!` or you can make long comments with [code block]",0,0,0,0.9144777059555054,0.9877324104309082,0.877427875995636,0.0,accept,unanimous_agreement
779220630,1384,might preced with `//! load(std::string&)`,0,0,0,0.9864756464958192,0.9884985089302064,0.988719403743744,0.0,accept,unanimous_agreement
779220908,1384,"""attributes""",0,0,0,0.984645664691925,0.985538363456726,0.9613575339317322,0.0,accept,unanimous_agreement
779220962,1384,"""model's""",0,0,0,0.9812870621681212,0.989557683467865,0.989318311214447,0.0,accept,unanimous_agreement
779223379,1384,"this is not implemented with a strong exception safety guarantee, as the header comment claims, if `eval()` might throw. any previous data in `mmodel` is lost. you should insead put the model in a temporary unique_ptr, then move that into mmodel only after any possibly throwing operations are done. unless -- you mean it to be a precondition that `load()` may only be called for a `deepmodel` that has not yet been loaded. in that case, header comments should say that, and the top of this function might assert the precondition.",0,0,0,0.983638882637024,0.9936554431915284,0.9885037541389464,0.0,accept,unanimous_agreement
779223945,1384,"if you follow my first suggestion, `cleanup()` would be eliminated (here and in all other places), and mutation of members of `*this` would happen only on the success paths and only after all possibly throwing steps are done.",0,0,0,0.9819937348365784,0.9912591576576232,0.9914474487304688,0.0,accept,unanimous_agreement
779224852,1384,might `move`,0,0,0,0.9854538440704346,0.9893476963043212,0.98746919631958,0.0,accept,unanimous_agreement
779224970,1384,"and if `mcard` is moved, don't resuse it here",0,0,0,0.9654982686042786,0.991682767868042,0.9943885207176208,0.0,accept,unanimous_agreement
779225077,1384,unnecessary use of type name,0,0,0,0.5831621289253235,0.9520698189735411,0.630567729473114,0.0,accept,unanimous_agreement
779225711,1384,"""prevents""",0,0,0,0.9652472734451294,0.989279806613922,0.9880067110061646,0.0,accept,unanimous_agreement
779226374,1384,"is this truly strongly exception-safe, meaning that if `forward` throws, `*mmodel` is in an unchanged state? to answer that would require knowing what promises torch makes.",0,0,0,0.978235363960266,0.9717224836349488,0.9847458600997924,0.0,accept,unanimous_agreement
779228061,1384,"""series""",0,0,0,0.9016477465629578,0.9885404706001282,0.9806151986122132,0.0,accept,unanimous_agreement
779229662,1384,"""bar""",0,0,0,0.9397029280662536,0.6505670547485352,0.9867562055587769,0.0,accept,unanimous_agreement
779229759,1384,an in-class initializer might help the reviewer,0,0,0,0.985258400440216,0.9924405813217164,0.9902612566947936,0.0,accept,unanimous_agreement
779230903,1384,"this is the third time i'm reading a similar new exception class, defining `what()`. perhaps the common pattern needs to be a new utility i should add to lib-exceptions.",0,0,0,0.9827157258987428,0.9878523349761964,0.9865463972091676,0.0,accept,unanimous_agreement
779234202,1384,would be nice to add `{}` initializers,0,0,0,0.9605640769004822,0.9861520528793336,0.9827761650085448,0.0,accept,unanimous_agreement
779234645,1384,"more ""stupid"" pointer members, which should be initialized",-1,-1,-1,0.9777864813804626,0.9802529811859132,0.8832806348800659,-1.0,accept,unanimous_agreement
779235877,1384,"i prefer to see member initialization before the constructor body where possible, not as assignments. (in fact you have no choice when a member is const or is a reference.) or, as mentioned, initializing in-line in the class. again all this helps a reviewer check correctness of things.",0,0,0,0.9782679080963136,0.974212646484375,0.9894802570343018,0.0,accept,unanimous_agreement
779236747,1384,might comment that this is an abstract class,0,0,0,0.984066367149353,0.984750270843506,0.9858104586601256,0.0,accept,unanimous_agreement
779238324,1384,"you omitted `mapplybutton` ! again, in-class initializers for the pointers would make it easier to check that there is no omission.",0,0,0,0.9834466576576232,0.993572235107422,0.993661642074585,0.0,accept,unanimous_agreement
779240720,1384,"this, and the following two vector-valued accessors, might return const reference, and the places that use them might bind variables with `const auto &tags = ...`, for avoidance of vector copies.",0,0,0,0.9879717230796814,0.991458773612976,0.9906095862388612,0.0,accept,unanimous_agreement
779241073,1384,uses of `std::cout` for debugging purposes should be removed from production code.,0,0,0,0.9830977320671082,0.9932079911231996,0.9885918498039246,0.0,accept,unanimous_agreement
779242441,1384,"should be like `xo(""%s labels"").format(leader->getname()).translation()` 1. ""labels"" needs to be internationalized 2. and ""substitute, don't concatenate"" is a rule for translations that include some variable part: other languages might want other word orders 3. and an i18n-hint comment should precede",0,0,0,0.983342170715332,0.9950330257415771,0.9936227202415466,0.0,accept,unanimous_agreement
779243999,1384,"don't need the cast, widening size_t to samplecount",0,0,0,0.9875386953353882,0.9710676670074464,0.9937208890914916,0.0,accept,unanimous_agreement
779244885,1384,"i would pass labeltrack by reference, since the smart pointer ownership policy is not relevant to what the function does.",0,0,0,0.9818387031555176,0.9731433987617492,0.9903439283370972,0.0,accept,unanimous_agreement
779247857,1384,`stamp(...)` is unnecessary; `emplace_back` itself is a variadic function passing arguments to the element type constructor.,0,0,0,0.9831480979919434,0.9928292632102966,0.9932724237442015,0.0,accept,unanimous_agreement
779758600,1384,resolved in bf7a9ac5f,0,0,0,0.9840393662452698,0.9853293299674988,0.9941867589950562,0.0,accept,unanimous_agreement
779773337,1384,resolved with rebase,0,0,0,0.9867693185806274,0.9908661246299744,0.9918654561042786,0.0,accept,unanimous_agreement
779778482,1384,resolved in 7e642c2d8da630073e45fe99d4e9687131e97a22,0,0,0,0.98703533411026,0.9853089451789856,0.9945757389068604,0.0,accept,unanimous_agreement
779778841,1384,resolved in 7e642c2d8da630073e45fe99d4e9687131e97a22,0,0,0,0.98703533411026,0.9853089451789856,0.9945757389068604,0.0,accept,unanimous_agreement
779779313,1384,"yes! we're not using them for now, but could be useful once search capabilities are possible",0,0,1,0.6831711530685425,0.7149365544319153,0.967477321624756,0.0,accept,majority_agreement
779784214,1384,resolved in 3b4f57d5c,0,0,0,0.9855836629867554,0.9852328896522522,0.994080126285553,0.0,accept,unanimous_agreement
779786672,1384,resolved in 548b8a32d77953433c6d4025cc08a10c7af4d98e,0,0,0,0.9868338704109192,0.9824116826057434,0.994471788406372,0.0,accept,unanimous_agreement
780292383,1384,"you say it is intentional that ""tags"" is not required, so no mistake. good. can that be # commented for the next reader?",1,1,1,0.9412423968315125,0.5788306593894958,0.8460283279418945,1.0,accept,unanimous_agreement
780296391,1384,"this mention of asio duplicates what is elsewhere in the file, and i think it's not relevant to deep learning and was mistakenly included.",0,0,0,0.9186242818832396,0.8968016505241394,0.986739993095398,0.0,accept,unanimous_agreement
780336161,1384,this is correct,0,0,0,0.9802361130714417,0.9699544310569764,0.9877755641937256,0.0,accept,unanimous_agreement
780337823,1384,this is incorrect though. sorry i wasn't clear. it is correct to have `list (append` and incorrect to have `set` within this loop. but there should be `set( outputs )` before `foreach` to be sure `outputs` is empty before each appending.,-1,-1,-1,0.989042103290558,0.991546094417572,0.982280969619751,-1.0,accept,unanimous_agreement
780340475,1384,the consequence of the mistake could be that resampler.pt is changed but deeplearning-models target would not be updated by the build step.,0,0,0,0.961361289024353,0.9886946082115172,0.9800987243652344,0.0,accept,unanimous_agreement
780346186,1384,"i think there are assumptions elsewhere that the first member of stamp is always less than or equal to the second. is there any guarantee that the data delivered by torch will satisfy that condition? if not, should you check it and enforce it here? either by discarding bad stamps, or swapping the bounds?",0,0,0,0.9562163949012756,0.9912365674972534,0.9896550178527832,0.0,accept,unanimous_agreement
780355458,1384,cmakelists.txt suggests that this effect has other uses besides source separation.,0,0,0,0.9859936237335204,0.9895629286766052,0.9902509450912476,0.0,accept,unanimous_agreement
780360334,1384,[a link] does not (yet) exist. will it? likewise for the other manualpage for the analyzer. remember to discuss with how this should be documented on-line. our system for documentation may change.,0,0,0,0.980376362800598,0.9901042580604552,0.9923328161239624,0.0,accept,unanimous_agreement
780367373,1384,see corresponding place in deeplearninganalyzer. maybe we need to be careful about internationalization of names of track. maybe it would be nice to translate the labels. but labels depend on some imported model and are not known from the source code tree. (they come ultimately from the .json data?) an open question how this might be fixed.,0,0,0,0.9817002415657043,0.9840369820594788,0.9886062741279602,0.0,accept,unanimous_agreement
780369072,1384,is this short description the source of the strings appended to track names? do we have any control over this schema? can we somehow provide optional translations of user-visible short and long descriptions into other locales?,0,0,0,0.987703025341034,0.9921510219573976,0.992237150669098,0.0,accept,unanimous_agreement
780374218,1384,"i checked again to see which of the ""setter"" member functions of modelcard are used. long_description, short_description, and labels are never used (where i think we might want to solve the i18n problem). also sample_rate, multichannel, effect_type, domain_tags and tags are not used. do you need to repair these omissions?",0,0,0,0.9878582954406738,0.9903597831726074,0.992767095565796,0.0,accept,unanimous_agreement
780377514,1384,"fix ""to to""",0,0,0,0.9816151261329652,0.9932175278663636,0.9929433465003968,0.0,accept,unanimous_agreement
780381957,1384,"this function is used in two places, the analyzer and the effect. should it have a simple early exit path in case the sample rates are equal?",0,0,0,0.9859027862548828,0.9929149150848388,0.9932249188423156,0.0,accept,unanimous_agreement
780384377,1384,"i observe downmixing after resampling in the analyzer, but the opposite in the effect. is the difference a mistake? or is it significant, and should be commented? or is it unimportant?",0,0,0,0.8772991299629211,0.9093905687332152,0.9864723682403564,0.0,accept,unanimous_agreement
780391006,1384,is this resampling needed or is it redundant with the second resampling in `processone`?,0,0,0,0.982339084148407,0.9945982694625854,0.9927676916122437,0.0,accept,unanimous_agreement
780406580,1384,"as many tracks are made, as there are labels. but not, number of labels times number of channels in the leader. is this right? should there be more commentary about how stereo tracks are handled? does a stereo-capable model ""label"" left and right outputs separately? if so, then how do you inform the model that the input is not stereo? (by a tensor dimension?) are you making any hidden assumptions that the input is at most stereo? that is correct for now, but who knows how audacity might generalize in the future. if the assumption is important, put in a comment like other comments elsewhere in the source tree: `// todo: more-than-two-channels`",0,0,0,0.9569134712219238,0.9868215918540956,0.9847597479820251,0.0,accept,unanimous_agreement
780417412,1384,"why was this postprocessing step important? i don't like it that the several effect subclasses have, some of them, special clip-handling logic, rather than having a generalized logic defined in just one place. but i'm not sure what that should be, given possible time-stretching. i'm not telling you to change anything, just noting something that bothers me.",-1,-1,-1,0.9531382918357848,0.9718703031539916,0.9065828919410706,-1.0,accept,unanimous_agreement
780418881,1384,"i notice that only the clip boundaries of the leader track influence the result. but the clip boundaries of a right channel of a stereo track are not always in correspondence. again i ask how i should understand the results applied to stereo input tracks. i only know that output tracks correspond to labels, an i also see that they are always unlinked, above. so, surprisingly, results of this effect are never stereo. is stereo track handling in fact all unfinished business of this project?",0,0,0,0.899351954460144,0.9001986980438232,0.9509470462799072,0.0,accept,unanimous_agreement
780429074,1384,"so, i understand that this effect is doing an outer loop over intervals of time, while any loops over channels are inner loops. getblockindices() looks like it was a lot of work in pursuit of efficiencies, but was there measurement of the benefit? i think you are assuming too that the block boundaries for efficient access occur at the same times in the two channels, but that might be untrue in unusual cases. the division into blocks should have no effect on the outputs of the model. can i be sure that is so? does the model know how to carry state from one pass of the loop to the next? is that exactly one of the points of the tensorflow library, to process large amounts of data piecewise?",0,0,0,0.9557849168777466,0.9732319116592408,0.980133295059204,0.0,accept,unanimous_agreement
780430131,1384,"if this pattern of efficient iteration over the blocks of a track is really important, i should think about how to extract it into a reusable utility, and also treat the multiple channel case, for reuse in other effects and analyzers.",0,0,0,0.9785813689231871,0.9851592183113098,0.9886171221733092,0.0,accept,unanimous_agreement
780432673,1384,"now here is another indexing into `sourcetracks`. whatever the first dimension of the output tensor is, update that many channels in sourcetracks. so what guarantees that this output dimension is equal to (or, just not more than) the number of ""labels""?",0,0,0,0.9861160516738892,0.993337631225586,0.9884297847747804,0.0,accept,unanimous_agreement
780437451,1384,"mclasses might remain not-clear when the analyzer exits, occupying a bit of memory needlessly. but i think it is easily changed to a local variable instead of a class member variable, and passed as an argument to tensortolabeltrack.",0,0,0,0.9798881411552428,0.980131208896637,0.988608717918396,0.0,accept,unanimous_agreement
780443105,1384,"this function executes inside a destructor (a ""finally"" block in effect.cpp) and should be guaranteed not to let exceptions escape. can i be sure of that, for the following steps? you could wrap all in `guardedcall ([&]{ ... });` which just eats the exceptions, not handling them, but if exceptions are of subclasses of `messageboxexception`, then a delayed action is enqueued to the event loop, to show the user a message later.",0,0,0,0.9874770641326904,0.9911292791366576,0.992661476135254,0.0,accept,unanimous_agreement
780447444,1384,let's use `std::max` and `std::min` instead,0,0,0,0.9870204925537108,0.9936621189117432,0.9935311675071716,0.0,accept,unanimous_agreement
780447880,1384,"you mean, overridden in sub-classes",0,0,0,0.9433543682098388,0.9908819198608398,0.9861479997634888,0.0,accept,unanimous_agreement
780450716,1384,"this calls a function, which displays a message box and returns int, then throws the int. that's wrong. either do the message box immediately and propagate an error code as the return value, or throw `simplemessageboxexception` to delay the display of a message box.",0,0,0,0.8474540114402771,0.9127238988876344,0.9253414273262024,0.0,accept,unanimous_agreement
780454901,1384,"instead, [code block]",0,0,0,0.9852864742279052,0.9912113547325134,0.9943575263023376,0.0,accept,unanimous_agreement
780462241,1384,resolved in fafafa2af,0,0,0,0.984569251537323,0.9910468459129332,0.9912919402122498,0.0,accept,unanimous_agreement
780462263,1384,resolved in fafafa2af,0,0,0,0.984569251537323,0.9910468459129332,0.9912919402122498,0.0,accept,unanimous_agreement
780463178,1384,"does the library provide no means to execute `forward` incrementally and interruptibly? that is unfortunate if so, and would explain some of what i am reading. or do i understand that there is such a means, and you did use it at the higher level, where the effect and the analyzer iterate over blocks of the track? so you are only adding precautions here against a model that still gets hung doing a small piece? should you explain that in comments?",-1,-1,-1,0.8158568143844604,0.925100326538086,0.5649670958518982,-1.0,accept,unanimous_agreement
780467740,1384,"precede this line with `if (thread.joinable())` else, a std:: exception will be thrown in the case that the thread was detached.",0,0,0,0.9875942468643188,0.9940629601478576,0.9924690127372742,0.0,accept,unanimous_agreement
780470520,1384,"in the case that the thread detaches, because the user clicks the cancel button in progress, are we sure it will exit before too much time and not keep consuming resources? there is no portable way to kill a std::thread that invokes bad code.",-1,0,0,0.7199984788894653,0.51655113697052,0.9223157167434692,0.0,accept,majority_agreement
780477619,1384,"there is a greater danger in the case of a detached thread. the lambda capture of the thread function will have dangling references to stack variables of this function after it exits! there is also still a data race updating `output` in this path. the thread might be in the middle of assignment to output before it sees the change of state of `success`. i think you should to this: make a shared_ptr to a structure containing variables that the thread needs. capture that shared_ptr by value in the thread function. if you take the path that joins the thread, copy the `torch::jit::ivalue` that the thread wrote into a result variable. (copies of that type are inexpensive?) but if you take the path that detaches the thread, then zero out the result instead; let the detached thread keep running, but never touching the result variable.",-1,0,0,0.919691562652588,0.9349536299705504,0.9516230821609496,0.0,accept,majority_agreement
780481801,1384,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
780486199,1384,still unused,0,0,0,0.9701611399650574,0.9342719316482544,0.9641698002815248,0.0,accept,unanimous_agreement
780488371,1384,"do i understand right that this scroller may get populated with stuff, and grow before your eyes, as a result of asynchronous activity of the modelmanager? that is unusual, as our dialogs go, and is worth a comment!",0,0,0,0.652327835559845,0.8892540335655212,0.9157654047012328,0.0,accept,unanimous_agreement
780488661,1384,and this changes contents according to the selected card.,0,0,0,0.9837803840637208,0.9896480441093444,0.9953472018241882,0.0,accept,unanimous_agreement
780494845,1384,or simply `auto name = verbatim(tag);`,0,0,0,0.9862480759620668,0.9936594367027284,0.9953199028968812,0.0,accept,unanimous_agreement
780500290,1384,"rather than all this retitling and rebinding of the buttons, you might find this solution more elegant: use `shuttlegui` members `startsimplebook` and `endsimplebook`. in those brackets, use `startnotebookpage` and `endnotebookpage` one for each status. and inside those brackets, add buttons and texts that don't need to change. then just use the `setselection` of the notebook control.",0,0,0,0.9773973822593688,0.9904188513755798,0.9827101230621338,0.0,accept,unanimous_agreement
780500814,1384,"maybe the pages could even have different layouts, not every one of them having one button and one text.",0,0,0,0.9772244691848756,0.977944314479828,0.9589223861694336,0.0,accept,unanimous_agreement
780501631,1384,"you would not need to show and hide the gauge, but just put it in one page. changing the notebook page is then enough to hide it.",0,0,0,0.9840831160545348,0.98108172416687,0.9930237531661988,0.0,accept,unanimous_agreement
780502539,1384,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
780503298,1384,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
780507620,1384,better to internationalize the user-visible string with i18n-hint comment that it abbreviates an unknown number of megabytes.,0,0,0,0.9808068871498108,0.9780496954917908,0.9896093606948853,0.0,accept,unanimous_agreement
780507783,1384,internationalize this too.,0,0,0,0.982246160507202,0.98958021402359,0.9920239448547364,0.0,accept,unanimous_agreement
780508627,1384,"not the first `verbatim(""%s"")` i see, which could be simplified",0,0,0,0.9863872528076172,0.9930610060691832,0.989437222480774,0.0,accept,unanimous_agreement
780509077,1384,"such a small ambiguous word without context needs its i18n-hint comment that it means ""programmed by"" someone",0,0,0,0.9630517959594728,0.9643248915672302,0.938477337360382,0.0,accept,unanimous_agreement
780510591,1384,should i worry about a possibly unbouded list of tags laid out horizontally?,0,0,0,0.9487804174423218,0.9170240759849548,0.9537922739982604,0.0,accept,unanimous_agreement
780512003,1384,this is not properly balanced with `endhorizontallay` !,0,0,0,0.5542119741439819,0.5113009810447693,0.9049881100654602,0.0,accept,unanimous_agreement
780513187,1384,resolved in 479a35ad4,0,0,0,0.9867616891860962,0.9855715036392212,0.9935989379882812,0.0,accept,unanimous_agreement
780513231,1384,resolved in 479a35ad4,0,0,0,0.9867616891860962,0.9855715036392212,0.9935989379882812,0.0,accept,unanimous_agreement
780513324,1384,resolved in 8fe2f0dab,0,0,0,0.9874241948127748,0.9901288151741028,0.9946516752243042,0.0,accept,unanimous_agreement
780513385,1384,resolved in 479a35ad4,0,0,0,0.9867616891860962,0.9855715036392212,0.9935989379882812,0.0,accept,unanimous_agreement
780513429,1384,resolved in 580b7f943,0,0,0,0.9864364266395568,0.9920857548713684,0.9939720034599304,0.0,accept,unanimous_agreement
780515090,1384,resolved in 1a5105597,0,0,0,0.9863405227661132,0.9842349886894226,0.994074523448944,0.0,accept,unanimous_agreement
780518680,1384,resolved in 0d3f97f48,0,0,0,0.987076461315155,0.9885176420211792,0.9944041967391968,0.0,accept,unanimous_agreement
780519580,1384,resolved in fafafa2af,0,0,0,0.984569251537323,0.9910468459129332,0.9912919402122498,0.0,accept,unanimous_agreement
780520154,1384,resolved in 09844aa67,0,0,0,0.9867140650749208,0.9912200570106506,0.9951346516609192,0.0,accept,unanimous_agreement
780520191,1384,resolved in 09844aa67,0,0,0,0.9867140650749208,0.9912200570106506,0.9951346516609192,0.0,accept,unanimous_agreement
780525319,1384,resolved in 8cce7502a,0,0,0,0.9865896701812744,0.9922136664390564,0.9941199421882628,0.0,accept,unanimous_agreement
780525334,1384,resolved in 8cce7502a,0,0,0,0.9865896701812744,0.9922136664390564,0.9941199421882628,0.0,accept,unanimous_agreement
780525349,1384,resolved in 8cce7502a,0,0,0,0.9865896701812744,0.9922136664390564,0.9941199421882628,0.0,accept,unanimous_agreement
780525366,1384,fixed in 8cce7502a,0,0,0,0.9848263263702391,0.9925096035003662,0.9944867491722108,0.0,accept,unanimous_agreement
780527031,1384,4164841bf,0,0,0,0.9768707752227784,0.9544263482093812,0.9867047071456908,0.0,accept,unanimous_agreement
780596738,1384,"""tensor""",0,0,0,0.9724360704421996,0.9881738424301147,0.9929592609405518,0.0,accept,unanimous_agreement
780601452,1384,no longer todo ?,0,0,0,0.7700824737548828,0.9717061519622804,0.9784526228904724,0.0,accept,unanimous_agreement
780603332,1384,"i see this question, and i think a solution might be: [a link] and the related `std::future`, which establish a channel between threads that can perform a one-time communication of either a result value or an exception. you can read details, while i try to understand your code better to see whether this might really apply here.",0,0,0,0.975191295146942,0.9728127121925354,0.9844173192977904,0.0,accept,unanimous_agreement
780718425,1384,there is an incomplete thought in that comment,0,0,0,0.9267818331718444,0.9657428860664368,0.9720459580421448,0.0,accept,unanimous_agreement
780718824,1384,"i made some trial runs, and the color choices should be adjusted. the yellow color for ""installing"" made a poor contrast between text and background which was hard to read. but this is one of the easiest things to change.",0,0,0,0.8619547486305237,0.9308637380599976,0.8363868594169617,0.0,accept,unanimous_agreement
780720000,1384,"now it's time to speak of the difficult topic of thread safety, where i see problems. 1. i understand now that this and other progress and completion callbacks ultimate are given to networkmanager, which will execute them on non-main threads. 2. i see many uses of `callafter` in modelcardpanel.cpp and modelmanagerpanel.cpp that had no explanation in the comments, but they make sense now that i understand this fact about threads. an inner lambda, given to `callafter` by the outer lambda, means the inner lambda is sure to be enqueued to execute in the main thread later at idle time of the event loop, and that serializes those inner lambdas so there are no data races between them. 3. you may not have known this, but: you don't need a window to invoke callafter. you can also invoke this method on the global object, `wxtheapp` defined in ` `. 4. in fact, i recommend you do exactly this, here at the low level of deepmodelmanager.cpp, in all places that some callback is passed to networkmanager. wrap all callbacks passed in from above in lambdas that pass them to `wxtheapp->callafter`; pass the wrapped callbacks, only, to networkmanager; and then in deepmodelmanager.h, where the callback `std::function` types are declared, comment that they are guaranteed to execute in the main thread. then, the callbacks upstairs in the dialog files can be simplified. 5. lambdas like this one should also be wrapped (downloadmodel in this case would wrap them, but they would remain unchanged here). because, as it is now, there is a dangerous data race. `isinstalling` uses `mresponsemap`, here in the thread pool, but the same map might be mutated concurrently in the main thread by `cancelinstall`. dangerous! you could guard accesses with a mutex, but you can also just use callafter to serialize all the work in the main thread.",0,0,0,0.8546708226203918,0.9661664962768556,0.9355959892272948,0.0,accept,unanimous_agreement
780720745,1384,"i have more to say, about a better way to handle the lifetime of window objects. 1. the code comment above suggest to me you discovered a crash, and worked around it. the workaround was not perfect, becase `this->isinstalling(card)` might have transitioned from true above to false below, because of a thread context switch at just the wrong time. serializing all on the main thread will solve that. still, the need for the workaround points to something not right elsewhere in the program. 2. the only lambda that is ever wrapped inside this one is `onprogress` defined in `modelcardpanel::oninstall`, and i think you discovered a dangling pointer crash in that lambda because the `this` that was captured, no longer existed when the callback happened. am i right? 3. a solution for dangling pointers is to use a weak pointer. i do not mean `std::weak_ptr` in this case, becuase it is not recommended to use standard smart pointers with certain wxwidgets objects, that have their own special memory management. instead, see this: [a link] 4. so, better that `modelcardpanel::oninstall` should capture a `wxweakref` to `this`, and not `this` itself, in the lambda. then that allows a null pointer check inside that lambda, that the window still exists. (no danger in that case that the non-null pointer will become stale because of the action of other threads. all deletion of windows is done in the main thread.) 5. really it is the responsibility of `onprogress`, defined there, to guard against capturing a dangling pointer. fix it there, then simplify here, removing this intermediate level of wrapping. 6. should you do the same in the five other places that now use callafter in the *dialog.cpp files? i haven't proved yet to myself that it's necessary in all cases, but it is easy to do to enhance safety. so, do that!",0,0,0,0.8841812610626221,0.976197063922882,0.9747119545936584,0.0,accept,unanimous_agreement
780721852,1384,"when making a ""singleton"" class like this, these lines, to prohibit copying, are also useful: [code block] the are redundant to stop copying in this case, because of the private destructor and the `std::mutex` member, but still it makes the intent plain and the impossibility of copy more obvious to the reviewer. banning copy causes the compiler to flag this mistake: [code block] where `&` to declare a reference variable was omitted. i have been guilty of such mistakes.",-1,0,0,0.6718209981918335,0.733892023563385,0.9304516911506652,0.0,accept,majority_agreement
780722560,1384,"i see the string literals ""model.pt"" and ""metadata.json"" repeated in many places. better to write each literal only once and give it a variable name, then reuse the name. this matters less inside one .cpp file, but i don't like it when i see long-distance coincidence of number or string literals in different .cpp files. might this file have need to grow and split in future?",-1,-1,-1,0.82341468334198,0.5975813269615173,0.9469451308250428,-1.0,accept,unanimous_agreement
780722839,1384,which call above might throw `const char *`?,0,0,0,0.9814226627349854,0.9936490654945374,0.9933713674545288,0.0,accept,unanimous_agreement
780723110,1384,"i'm not very sure of this assumption, even after all is serialized in the main thread. it's harmless if the assumption is wrong. i wouldn't make an assertion.",-1,-1,0,0.7933468222618103,0.7216556668281555,0.8197832703590393,-1.0,accept,majority_agreement
780723396,1384,"the mutex locked above could be eliminated as i have suggested elsewhere, and `insert` does not throw that exception type, so couldn't this simplify?",0,0,0,0.985137701034546,0.992612361907959,0.9943963289260864,0.0,accept,unanimous_agreement
780724814,1384,"""anywhere""",0,0,0,0.9423637986183168,0.9858123064041138,0.9931032657623292,0.0,accept,unanimous_agreement
780724842,1384,"""it's""",0,0,0,0.957711100578308,0.8271774053573608,0.9618598818778992,0.0,accept,unanimous_agreement
780725347,1384,"`uninstall` throws if the card was already not installed. are you sure it won't throw here? maybe make uninstall non-throwing, and insert throws at other uses of it? is there a guarantee that `cancelinstall` aborts the response and that this callback is not invoked again? i'm not sure.",0,0,0,0.9586127400398254,0.9200029373168944,0.9826327562332152,0.0,accept,unanimous_agreement
781577694,1384,e27545cbe5c2905cc9555f14c840eb8d3d870e5d,0,0,0,0.9464427828788756,0.8172934055328369,0.954617202281952,0.0,accept,unanimous_agreement
781584234,1384,539a3ead07f5a298c8bca75203e772f8f74321a9,0,0,0,0.9710835218429564,0.8945170044898987,0.9641168117523192,0.0,accept,unanimous_agreement
781593996,1384,94de8a3bbcca7f5c348a4b98865eed91a3b0a8b3,0,0,0,0.9567508697509766,0.8846837878227234,0.924660623073578,0.0,accept,unanimous_agreement
781599543,1384,b447514d38b84c98c1d08508c2f6d12ca752d1c0,0,0,0,0.9635351300239564,0.8465684056282043,0.9691717624664308,0.0,accept,unanimous_agreement
781650490,1384,3a45be1d37e3b81b72ce5da358dab578a0144474,0,0,0,0.975609004497528,0.907156229019165,0.9747406244277954,0.0,accept,unanimous_agreement
781650952,1384,30f12ed7fc19470527419f8782fceb3ca7c15386,0,0,0,0.9758006930351256,0.9056543707847596,0.962503969669342,0.0,accept,unanimous_agreement
781653205,1384,1c33a378e460e0e1b8d7cd9028b13f906646f4b3,0,0,0,0.9449899792671204,0.8839593529701233,0.9639748930931092,0.0,accept,unanimous_agreement
781655027,1384,c2b6d73b7606a41209e160878eba7699e451cd45,0,0,0,0.9672927856445312,0.8730195164680481,0.9710468649864196,0.0,accept,unanimous_agreement
781663991,1384,added a clarification [code block],0,0,0,0.9880375862121582,0.990103244781494,0.9952693581581116,0.0,accept,unanimous_agreement
781664158,1384,8d42c80dded1ba5dd6b0d02155d8f145c67549d2,0,0,0,0.9703092575073242,0.8702988028526306,0.9620411396026612,0.0,accept,unanimous_agreement
781665081,1384,a51ac92a90a6efb6243d1cf208da660f7819823c,0,0,0,0.9743545651435852,0.8877062797546387,0.9395581483840942,0.0,accept,unanimous_agreement
781667603,1384,525fb9b9e497bcd38a812067cf7ce69350e9bcec,0,0,0,0.9777556657791138,0.8758565187454224,0.8254263401031494,0.0,accept,unanimous_agreement
781667642,1384,4619c09faa3e0b2f4f54f70adb7e3b8721b4e646,0,0,0,0.9778640866279602,0.907740592956543,0.9238216280937196,0.0,accept,unanimous_agreement
781667666,1384,4619c09faa3e0b2f4f54f70adb7e3b8721b4e646,0,0,0,0.9778640866279602,0.907740592956543,0.9238216280937196,0.0,accept,unanimous_agreement
781668259,1384,2161ece9c7f4b4533f82c7acaeaf375c1c9f3a48,0,0,0,0.9755472540855408,0.8813583850860596,0.9706509113311768,0.0,accept,unanimous_agreement
781668407,1384,525fb9b9e497bcd38a812067cf7ce69350e9bcec,0,0,0,0.9777556657791138,0.8758565187454224,0.8254263401031494,0.0,accept,unanimous_agreement
782375025,1384,d19180bd489b299b7e7a8caee2c5a9f13bd2e689,0,0,0,0.9539387226104736,0.884819746017456,0.950813055038452,0.0,accept,unanimous_agreement
782375135,1384,d19180bd489b299b7e7a8caee2c5a9f13bd2e689,0,0,0,0.9539387226104736,0.884819746017456,0.950813055038452,0.0,accept,unanimous_agreement
782392255,1384,7ae287f72127a0f04e62564fc227c7c958ee76c1,0,0,0,0.964643895626068,0.8747825026512146,0.953073501586914,0.0,accept,unanimous_agreement
782392311,1384,7ae287f72127a0f04e62564fc227c7c958ee76c1,0,0,0,0.964643895626068,0.8747825026512146,0.953073501586914,0.0,accept,unanimous_agreement
782396413,1384,358f92a21c5048518f61d8a9e5c83045659791ad,0,0,0,0.9592865705490112,0.8994102478027344,0.9157696962356568,0.0,accept,unanimous_agreement
782409290,1384,3db261fb8644bbb764504db69d4fd10223f7dec0,0,0,0,0.9754937291145324,0.8856949210166931,0.9450629949569702,0.0,accept,unanimous_agreement
782409381,1384,3db261fb8644bbb764504db69d4fd10223f7dec0,0,0,0,0.9754937291145324,0.8856949210166931,0.9450629949569702,0.0,accept,unanimous_agreement
782409424,1384,3db261fb8644bbb764504db69d4fd10223f7dec0,0,0,0,0.9754937291145324,0.8856949210166931,0.9450629949569702,0.0,accept,unanimous_agreement
782409467,1384,3db261fb8644bbb764504db69d4fd10223f7dec0,0,0,0,0.9754937291145324,0.8856949210166931,0.9450629949569702,0.0,accept,unanimous_agreement
782409550,1384,3db261fb8644bbb764504db69d4fd10223f7dec0,0,0,0,0.9754937291145324,0.8856949210166931,0.9450629949569702,0.0,accept,unanimous_agreement
782410994,1384,"yes, the labels do come from the .json data, meaning that they would have to be translated on the fly somehow.",0,0,0,0.988567590713501,0.9932175278663636,0.9909750819206238,0.0,accept,unanimous_agreement
782431016,1384,"this is the short, 50-something character description shown on the scrolled window on the left. it helps users browse through models and pick the one suited for their needs. because these models (along with their json metadata) are meant to be contributed by the community (and hosted in huggingface repositories), i can't think of a way to provide optional translations. maybe querying a translation api?",0,0,0,0.9670096039772034,0.9849117994308472,0.965579628944397,0.0,accept,unanimous_agreement
782432357,1384,"mmmm, i think those setters are not used because those fields are filled out in `modelcard::deserialize` always (since they come from json data), but i wanted to leave them there for completeness. any thoughts?",0,0,0,0.9752891063690186,0.9657770395278932,0.964458465576172,0.0,accept,unanimous_agreement
782435099,1384,"it is unimportant, but i fixed it for consistency. 1756e7ca96f0dcdd5650aaebc950f8390d3dbc3d",0,0,0,0.9468671083450316,0.920048177242279,0.980369508266449,0.0,accept,unanimous_agreement
782436380,1384,the content in `sourcetracks` contains the result audio output by the deep model. deep models process audio at their own sample rates (typically 16k). this resampling step resamples each output track from the deep model's sample rate to the input track's original sample rate.,0,0,0,0.9868918061256408,0.9922621250152588,0.9937148690223694,0.0,accept,unanimous_agreement
782471486,1384,5ffa9262fd2870e777e192f70b74b4d64b4e1638,0,0,0,0.9595162272453308,0.8654579520225525,0.9700505137443542,0.0,accept,unanimous_agreement
782477323,1384,"yeah, the input to the deep model can currently have any number of channels (more-than-two-channels is supported), but each output track has to be mono. i don't think it would be too hard to support multichannel output tracks though.",0,0,0,0.9559689164161682,0.9483633041381836,0.982751190662384,0.0,accept,unanimous_agreement
782490022,1384,355d1e08c421b7605144e20d965125c36b8b47b3,0,0,0,0.9517428278923036,0.8898390531539917,0.968208074569702,0.0,accept,unanimous_agreement
784335483,1384,f09c89099133a4bc51f6837a54627a504452fc7c,0,0,0,0.9419007897377014,0.9054520130157472,0.9582027196884156,0.0,accept,unanimous_agreement
784335513,1384,fixed in f09c89099133a4bc51f6837a54627a504452fc7c,0,0,0,0.9822131395339966,0.9881574511528016,0.993794322013855,0.0,accept,unanimous_agreement
785067143,1384,using wxtheapp->callafter works!,0,0,0,0.938081920146942,0.8230504393577576,0.6242236495018005,0.0,accept,unanimous_agreement
785071005,1384,"removed those unnecessary checks from uninstall. now, it will only throw if there was an error in wxfileremove when the file actually exists. cancelinstall should always abort the response",0,0,0,0.98494553565979,0.9877583384513856,0.9903765320777892,0.0,accept,unanimous_agreement
785073768,1384,"libtorch does not provide a way to execute `forward` incrementally and interruptibly. i'm processing the audio clip-by-clip. each clip is processed in blocks, where i use `track->getbestblocksize` to get the size of each block. i find that the blocks are in the order of a few seconds, but deep learning models can still take a while when processing a few seconds of audio. suggested to not do `forward` in the main thread, because of how slow some deep models are to process audio.",0,0,0,0.9360939264297484,0.905439794063568,0.986459255218506,0.0,accept,unanimous_agreement
785074545,1384,done! added a struct that holds all necessary variables for as long as the detached thread runs,0,0,1,0.9182451367378236,0.5987871289253235,0.942696750164032,0.0,accept,majority_agreement
785084387,1384,"is it possible to just process the track clip-by-clip? would it cause any memory problems if the clip is too large? using `track->getbestblocksize` was just the way a few other effects are implemented in audacity, so i figured i would try to follow the pattern.",0,0,0,0.9787449836730956,0.9919244647026062,0.9907873272895812,0.0,accept,unanimous_agreement
785086380,1384,this should work better [code block],0,0,0,0.9777694940567015,0.979528307914734,0.985033929347992,0.0,accept,unanimous_agreement
787038773,1384,"i don't think const is really needed here, so i removed it for now.",0,0,0,0.9737709164619446,0.9516555666923524,0.9858539700508118,0.0,accept,unanimous_agreement
805384996,1384,should this be `audacity_has_deeplearning`?,0,0,0,0.973623514175415,0.9948182702064514,0.9929805397987366,0.0,accept,unanimous_agreement
1137383630,4414,"i see you have got used to the boilerplate for making new attached objects. `clientdata::site` is a great idea if i may say so immodestly, but i find this kind of repetition a bit painful. i have some ideas for using a crtp template to automate the writing of all this `get` junk, requiring only that you supply the factory. please review my #4395 . that, or something close to it, may be part of the solution.",-1,-1,0,0.6051276922225952,0.9717280864715576,0.6059231758117676,-1.0,accept,majority_agreement
1137394761,4414,"as we mentioned today, maybe we join this with lib-time-frequency-selection, just to avoid too many libraries. that did not previously have the two dependencies above, while it also depends on lib-screen-geometry and lib-project-history. all four of these are comparatively low level things -- screen geometry is even a leaf.",0,0,0,0.964866042137146,0.9862453937530518,0.9893255233764648,0.0,accept,unanimous_agreement
1137403722,4414,"did i ever explain the prohibited macro and why i don't still use it and sometimes remove it? wow, seven years ago. 9e5d31d347873f7e54f5a4b7e8528fa61490b792 while purging all the old naked news and deletes, i wanted easy text scans to see where remaining ones were that needed work. `safenew` also dates from this time for certain news that are correctly unpaired and don't need smart pointers -- any construction of a wxwindow with a non-null parent, because the parent assumes deletion responsibility (and i think qt works the same?).",0,0,0,0.9287619590759276,0.784087061882019,0.9305555820465088,0.0,accept,unanimous_agreement
1137417646,4414,did you also look at the examples of registry item subclasses in namespace `menutable`? that incidentally was a focus of the cycle-busting i was doing yesterday.,0,0,0,0.9848204255104064,0.9926909804344176,0.9927247166633606,0.0,accept,unanimous_agreement
1137427920,4414,"what you did here, to adapt one abstract visitor interface to another, might be more nicely done with a template convenience defined in registry.h itself.",0,0,0,0.9838940501213074,0.9892868995666504,0.9882042407989502,0.0,accept,unanimous_agreement
1137429473,4414,... because one can easily foresee much repetition of the pattern,0,0,0,0.9317440390586852,0.9348084926605223,0.9710302352905272,0.0,accept,unanimous_agreement
1137434318,4414,i would use `final` not `override` for these three functions,0,0,0,0.987983465194702,0.9933359622955322,0.9926071166992188,0.0,accept,unanimous_agreement
1137435686,4414,"all of which are defined below. so, why a registry? do you anticipate more, and scattered add-on cases?",0,0,0,0.9852140545845032,0.9814839363098145,0.9936768412590028,0.0,accept,unanimous_agreement
1137441222,4414,that you for figuring out and reapplying the registry system. how would you rate your first experience? - [ ] :expressionless_face: - [ ] :face_with_rolling_eyes: - [ ] :yawning_face: - [ ] :exploding_head: - [ ] :star-struck: - [ ] :face_vomiting:,-1,0,1,0.9047955870628356,0.9872174859046936,0.9787704348564148,,review,no_majority_disagreement
1137447227,4414,the files-changed count looks less frightening to me now,-1,-1,0,0.907015860080719,0.8057458400726318,0.9090635180473328,-1.0,accept,majority_agreement
1137450851,4414,good riddance,1,1,1,0.9473381042480468,0.9756991863250732,0.922512710094452,1.0,accept,unanimous_agreement
1137454464,4414,"as we mentioned today -- moving all of the persistency code into the green, if my other prs for track subclasses are merged too. good milestone.",1,1,1,0.9770920872688292,0.9611366987228394,0.9869819283485411,1.0,accept,unanimous_agreement
1137471312,4414,"i didn't see yet what happens to src/snap.* in a branch that i haven't shared yet, i made it the home of the new attached object, i moved the functions that draw yellow lines out into trackart.cpp, and i moved them to lib-time-frequency-selection i also found a way to break dependency of projectselectionmanager on wavetrack, and then i moved that too into lib-time-frequency-selection",0,0,0,0.9331334233283995,0.9732090830802916,0.9898455142974854,0.0,accept,unanimous_agreement
1137475798,4414,"good for you, i should do more like it",1,1,1,0.9732522368431092,0.9566103219985962,0.9902177453041076,1.0,accept,unanimous_agreement
1137480587,4414,"a cmake long comment, please, as with other libraries",0,0,0,0.987174153327942,0.974242627620697,0.9927828311920166,0.0,accept,unanimous_agreement
1137491592,4414,we should just nuke this file and the other listener too,0,0,0,0.9825013279914856,0.983656406402588,0.9891576766967772,0.0,accept,unanimous_agreement
1138122564,4414,document the assertion with a comment here,0,0,0,0.988215446472168,0.9889820218086244,0.9942206144332886,0.0,accept,unanimous_agreement
1138134394,4414,i think it is wrong to delete this. instead change it to modify the projectrate object.,0,0,0,0.5027878284454346,0.8626141548156738,0.6441776752471924,0.0,accept,unanimous_agreement
1138135178,4414,likewise here set projectrate,0,0,0,0.986968457698822,0.9927514791488647,0.9923242330551147,0.0,accept,unanimous_agreement
1138138969,4414,does as_setrate become unused at this commit?,0,0,0,0.9803639650344848,0.9903302192687988,0.9945068955421448,0.0,accept,unanimous_agreement
1138148897,4414,is that function unused now?,0,0,0,0.983157992362976,0.9916658997535706,0.991555154323578,0.0,accept,unanimous_agreement
1138159875,4414,"was all this per project persistency of signatures stipulated in design explicitly? if not, be sure there is agreement",0,0,0,0.9870511293411256,0.9932275414466858,0.9935253858566284,0.0,accept,unanimous_agreement
1138161914,4414,unless you agree to put it into an existing library not a new one,0,0,0,0.9706518054008484,0.988098442554474,0.9921483993530272,0.0,accept,unanimous_agreement
1138165658,4414,comment is wrong,-1,-1,-1,0.871258556842804,0.8936163187026978,0.7911021113395691,-1.0,accept,unanimous_agreement
1138605804,4414,"the second commit in the sequence breaks the build with this line, and the build is fixed but wrongly, at ""selectionbarlistener no longer controls snapping"", by deleting the line.",0,0,0,0.9643313884735109,0.9818322658538818,0.9887716174125672,0.0,accept,unanimous_agreement
1138611667,4414,"answer, no, but still the function just calls through to `projectrate::get( project ).setrate( rate );` and there is no need i see for that extra level of abstraction around it in the remaining place.",0,0,0,0.985753893852234,0.9874184131622314,0.98945552110672,0.0,accept,unanimous_agreement
1138613979,4414,i'm sure it's wrong -- the command parameter has no effect now,0,0,0,0.8562979102134705,0.966066300868988,0.8524590730667114,0.0,accept,unanimous_agreement
1138693157,4414,"when i build the commit that introduces this button on my macbook, the button fails to display and i don't know why. there is just a blank space on the toolbar below the title.",0,-1,0,0.712022066116333,0.6124072074890137,0.6957566142082214,0.0,accept,majority_agreement
1138829158,4414,"ah, the commit comment mentions that visuals aren't all correct yet. i didn't see the second line. you know my habit of adding ellipsis... to the first line of a commit comment to direct the reviewer not to skip more explanation. i recommend it",0,0,0,0.7391629815101624,0.703761875629425,0.8328601121902466,0.0,accept,unanimous_agreement
1138830470,4414,"i also observed at that commit that if you drag the toobar off the dock, it does not give you a resizer grip at the corner as other toolbars do.",0,0,0,0.9809091091156006,0.9868256449699402,0.987011194229126,0.0,accept,unanimous_agreement
1138941112,4414,"i notice now, most toolbars did not have the resizer grip. the two new ones do not. the few that do have it are the meters and play-at-speed, for which it makes sense, and also the time toolbar. the time toolbar adapts the numeric control to a bigger font or smaller. maybe there is a question for design whether that feature would also be desirable for the other toolbars that have this numeric control too -- the selection spectral selection toolbars (that last is hidden by default). or maybe we just ignore that question until after rebasing to qt.",0,0,0,0.9554250240325928,0.9651355743408204,0.9760000109672546,0.0,accept,unanimous_agreement
1138985998,4414,"yeah, turns out there was an indirection, let me fix that",0,0,0,0.9843069314956664,0.9784387946128844,0.9843251705169678,0.0,accept,unanimous_agreement
1138991305,4414,"bad merge with master, sorry for that",-1,-1,-1,0.9891636371612548,0.9934968948364258,0.9951896667480468,-1.0,accept,unanimous_agreement
1139229718,4414,"if you add a setting object, be sure to eliminate all repetitions of the path elsewhere. so you must also change pluginmenus.cpp",0,0,0,0.9865642786026,0.9942154288291932,0.9952197670936584,0.0,accept,unanimous_agreement
1139272127,4414,the `setname` call got lost and that has bad implications for the screen reader.,-1,-1,-1,0.9357381463050842,0.5633504390716553,0.7469672560691833,-1.0,accept,unanimous_agreement
1139290648,4414,"the commit that does all of this -- should be squashed with the commit two previous, and the commit that adds images should be before that, if you want to eliminate the unfinished intermediate step of the history.",0,0,0,0.9872260689735411,0.9916974306106568,0.9893980026245116,0.0,accept,unanimous_agreement
1139295666,4414,"i am trying for myself a rebasing onto recent master and building each commit. so you will discover too if you do that, the need to change this path because the file is now in a library.",0,0,0,0.9151501059532166,0.9498143196105956,0.990036964416504,0.0,accept,unanimous_agreement
1139296200,4414,the commit adding this file just disappears when you rebase.,0,0,0,0.97206711769104,0.9712526202201844,0.992731511592865,0.0,accept,unanimous_agreement
1139305344,4414,the commit adding this file has an easily resolved conflict in libraries/cmakelists.txt,0,0,0,0.9877540469169616,0.9909900426864624,0.99516099691391,0.0,accept,unanimous_agreement
1139309451,4414,"visibility isn't needed for this and the previous struct, but no harm",0,0,0,0.9566631317138672,0.7955401539802551,0.9635878801345824,0.0,accept,unanimous_agreement
1139310878,4414,avoiding repeated expression `projecttimesignature::get(mproject)` might be nice,0,0,0,0.9134703874588012,0.9869076013565063,0.98338520526886,0.0,accept,unanimous_agreement
1139315045,4414,so the distinction between nearest and prior is lost after saving and reloading the project. should we try to fix that?,0,0,0,0.978943645954132,0.9708839058876038,0.9868918061256408,0.0,accept,unanimous_agreement
1139331308,4414,is `cassert` really needed?,0,0,0,0.9866678714752196,0.9924909472465516,0.9922703504562378,0.0,accept,unanimous_agreement
1139334097,4414,should that instead be `return snaptosetting.getdefault();`,0,0,0,0.9855343103408812,0.9941708445549012,0.9940061569213868,0.0,accept,unanimous_agreement
1139335740,4414,another easily resolved conflict here,0,0,0,0.968432605266571,0.9847224354743958,0.9734505414962769,0.0,accept,unanimous_agreement
1139338441,4414,you didn't use this function yet at this commit,0,0,0,0.9807904958724976,0.9890041947364808,0.9938035011291504,0.0,accept,unanimous_agreement
1139351064,4414,"please comment what the second member means. i had thought the meaning of the second member would be that the output time is different from the input time. but that is not consistent with the examples of snap functions in snaputils.cpp. if the purpose of the boolean is to indicate that a snap function is not found, while a snap function is expected always to return true in second place -- then a snap function should just return double. if that is not the intent, please comment what it is, and change the snap functions so that they sometimes return false.",0,0,0,0.9822820425033568,0.98386812210083,0.9852949380874634,0.0,accept,unanimous_agreement
1139353409,4414,"the whole library is not used in this commit, what's the point?",0,0,0,0.8586017489433289,0.933612048625946,0.8524426221847534,0.0,accept,unanimous_agreement
1139354553,4414,i do know how to resolve conflicts.,0,0,0,0.9431192278862,0.9572603106498718,0.9604635834693908,0.0,accept,unanimous_agreement
1139355410,4414,that's unfortunate omission that i forgot to implement. this function will be quite a bit more complex.,-1,-1,-1,0.9660509824752808,0.9850581288337708,0.9780600666999816,-1.0,accept,unanimous_agreement
1139355769,4414,this is the original behavior,0,0,0,0.9847411513328552,0.980636179447174,0.993925154209137,0.0,accept,unanimous_agreement
1139359378,4414,the ordering preference initializer makes hints unnecessary. hints will be useful if ever there are scattered snap function definitions in other files,0,0,0,0.9872903227806092,0.9906052947044371,0.9937090873718262,0.0,accept,unanimous_agreement
1139359891,4414,i do not yet understand the purpose of grouping in this registry. i have not yet seen begingroup or endgroup used for any purpose.,0,0,0,0.6004700660705566,0.9054283499717712,0.9088233709335328,0.0,accept,unanimous_agreement
1139363563,4414,the transparency of the groups doesn't matter unless they are nameless,0,0,0,0.978686273097992,0.9728517532348632,0.9693303108215332,0.0,accept,unanimous_agreement
1139365079,4414,i recall some strange detail about the non-uniformity of one of these frame formats. is the snap function correct?,0,-1,0,0.8493669033050537,0.7173741459846497,0.8912505507469177,0.0,accept,majority_agreement
1139366033,4414,this is just like `snaptotime`. will it be changed?,0,0,0,0.9874180555343628,0.9932888150215148,0.9943051934242249,0.0,accept,unanimous_agreement
1139370694,4414,"this function is removed, but there is still one comment mentioning it. remove that comment.",0,0,0,0.9748867750167848,0.9827371835708618,0.9941288232803344,0.0,accept,unanimous_agreement
1139371805,4414,the commit that adds this file needs four `#include` directives to change so that it builds.,0,0,0,0.9869078397750854,0.9931936860084534,0.9933757185935974,0.0,accept,unanimous_agreement
1139373026,4414,this answers an earlier question of mine,0,0,0,0.9731531143188475,0.9891327023506165,0.9821001291275024,0.0,accept,unanimous_agreement
1139377657,4414,"let this stand for now, but be aware that i'll probably need to break dependencies on trackpanel and also projectwindow to make further progress to toolkit neutrality for larger parts of the code. trackpanel should instead either subscribe to change in selection and refresh itself, or poll for changes in idle time.",0,0,0,0.9870358109474182,0.9839464426040648,0.988471269607544,0.0,accept,unanimous_agreement
1139386221,4414,this should be in the previous commit if it fixes the build,0,0,0,0.9866739511489868,0.9916424751281738,0.9953362345695496,0.0,accept,unanimous_agreement
1139390390,4414,this function might be removed at the earlier commit where selectionbar stops using it,0,0,0,0.9869765639305116,0.9943780303001404,0.9938831329345704,0.0,accept,unanimous_agreement
1139394942,4414,"the commit that removes this can replace `#include ""numerictextctrl.h""` with ""componentinterfacesymbol.h"", lowering this guy in the dependency graph. that will require other `#include`s added in other places that depended on transitive inclusions.",0,0,0,0.9887153506278992,0.994240403175354,0.9940470457077026,0.0,accept,unanimous_agreement
1139397405,4414,"you no longer use mconverter in the general case to define snapping -- and indeed it is excessively complicated for most uses. but for the weird cases of pal and/or ntsc frames, conserve old behavior. let snaptoframes include ""numericconverter.h"" and define snapping the old way just for the weird case.",0,-1,0,0.7123603820800781,0.6858495473861694,0.97734797000885,0.0,accept,majority_agreement
1139416898,4414,"why use xo(“%d”)? for locale dependent decimal point, or maybe even other digit characters.",0,0,0,0.9833886623382568,0.9906418919563292,0.9836769104003906,0.0,accept,unanimous_agreement
1139417047,4414,maybe more places need to do that,0,0,0,0.9445415735244752,0.9858684539794922,0.9545347690582277,0.0,accept,unanimous_agreement
1139420789,4414,this event handler changes the project rate but does not change preferences in the .cfg file which is what preference dialog pages are supposed to do. furthermore the commit says you “moved” quality but this does not remove it from the other page. who specified this change? i think it is not necessary for bears and bars and needs more thought.,0,0,0,0.9765889644622804,0.976280689239502,0.9840202331542968,0.0,accept,unanimous_agreement
1139422292,4414,"i think the only other place where we used that project argument in the page factory, is for spectrogram preferences, because this dialog was reused (by me, several years ago) for the new purpose of also changing per-track spectrogram settings.",0,0,0,0.9841153621673584,0.9903153777122498,0.9884152412414552,0.0,accept,unanimous_agreement
1139444057,4414,does snap to prior become unavailable?,0,0,0,0.9662521481513976,0.9853013157844543,0.9913811087608336,0.0,accept,unanimous_agreement
1139445092,4414,does it update for change of language?,0,0,0,0.984765648841858,0.9932542443275452,0.9931997656822203,0.0,accept,unanimous_agreement
1139445287,4414,wrong comment,-1,-1,-1,0.9223400354385376,0.6907638311386108,0.8904055953025818,-1.0,accept,unanimous_agreement
1139446648,4414,comment,0,0,0,0.9770903587341307,0.9481089115142822,0.6779552102088928,0.0,accept,unanimous_agreement
1139447893,4414,"again, language?",0,0,0,0.9726508855819702,0.977167308330536,0.9851112961769104,0.0,accept,unanimous_agreement
1139933529,4414,"tbh the last place i would be looking for snapping would be ""time-frequency-selection"", but i can move the code i you want. when i have started working on this there was no `lib-time-frequency-selection` either.",0,0,0,0.9838914275169371,0.9812474846839904,0.971620500087738,0.0,accept,unanimous_agreement
1139934225,4414,i had to look over all the places to understand how to use registries.,0,0,0,0.9526997208595276,0.9360139966011048,0.8718037605285645,0.0,accept,unanimous_agreement
1139957109,4414,"the whole registry thing was done in anticipation of your criticism about the lack of open endlessness. i would personally agree with this criticism this time, so i took an open ended approach. doing it not open-endedly or even writing ""own"" would be much quicker, however i have tried to stick to the standard approach used in other places in audacity. this has costed me quite a lot of time.",-1,0,-1,0.93394136428833,0.6666768193244934,0.8825066685676575,-1.0,accept,majority_agreement
1139959942,4414,"i will do it in the following pr, probably not for 3.3 though",0,0,0,0.9852491021156312,0.9916679263114928,0.9831753969192504,0.0,accept,unanimous_agreement
1139963848,4414,snapping is out of the selection tb,0,0,0,0.97202730178833,0.9624107480049132,0.9937864542007446,0.0,accept,unanimous_agreement
1139965757,4414,"for the music creation time signature is a vital part of the project. you have reminded me that i forgot about project history though, that i will fix (if have no objections).",0,0,0,0.8014484643936157,0.9652414917945862,0.7195121049880981,0.0,accept,unanimous_agreement
1139967697,4414,that's unfortunate.,-1,-1,-1,0.9812957644462584,0.9900751709938048,0.9845683574676514,-1.0,accept,unanimous_agreement
1139969415,4414,"i've tried to keep history consistent and easy for review. i failed horribly in the end anyway, because nice history never matches the actual history.",-1,1,-1,0.9072292447090148,0.4357229173183441,0.9879222512245178,-1.0,accept,majority_agreement
1139970887,4414,probably not anymore,0,0,0,0.7976241111755371,0.9660804867744446,0.8442733287811279,0.0,accept,unanimous_agreement
1139974722,4414,"i would love to omit the ordering preference initializer, but turns out nothing works without it. by the time i figured that out i've spent to much time already to continue experiment on how things work. i would like to keep it this way though, this improves the readability somewhat.",0,1,0,0.6996546983718872,0.8127461075782776,0.7093655467033386,0.0,accept,majority_agreement
1139975849,4414,"this is a draw back of commit by commit review, yes. it gets worse when everything is split into multiple pull requests too.",-1,-1,-1,0.880193293094635,0.8399303555488586,0.6255298256874084,-1.0,accept,unanimous_agreement
1139978553,4414,potentially we will change the transparency or even make it dependent on user preferences.,0,0,0,0.9852079153060912,0.9805268049240112,0.9820926189422609,0.0,accept,unanimous_agreement
1139979134,4414,it only affects the display for ntsc with drop frames.,0,0,0,0.9822200536727904,0.991166889667511,0.9893959164619446,0.0,accept,unanimous_agreement
1139979916,4414,no. i like it to have an explicit name.,1,0,0,0.5986291170120239,0.5346826910972595,0.9642139077186584,0.0,accept,majority_agreement
1139989806,4414,i have read carefully about the ntsc drop frames. this excessive complexity is only needed for the display purposes. on top of that: * there is a question to design team about the chosen format. we do not have `23.97` display format in audacity. ( fyi) * we handle `29.97` in a straight forward way. we have a separate format that accounts for ntsc drop frames. * i don't really know how important is this format for snapping at all. so should i change this behavior now? i doubt it and i will have to extend the formats of numericconverter to do so.,-1,0,0,0.6919217109680176,0.666109561920166,0.6851756572723389,0.0,accept,majority_agreement
1139990913,4414,"unfortunate leftover, i had `%d hz` before.",-1,-1,-1,0.9708751440048218,0.988548755645752,0.9899907112121582,-1.0,accept,unanimous_agreement
1140021548,4414,"did. i agree that this is very questionable change, we have discussed it at some point during the design review. `projectrate` in audacity is a very confusing thing per se, which is made far worse by this change. quality preference page allows you to set the project rate to be used by a new project. this setting is called ""default project rate"". selection tool bar, on the other hand, controlled the sampling rate of the project (only by changing the projectrate value). this is now moved to audio preferences. so there is nothing wrong with what the commit message says. i do not understand the value of changing the sample rate of the project without the tracks resampling (or in allowing tracks to have different sample rates in one project). i think that we need to discussed it carefully again. i don't think that it is a blocker for 3.3 though. fyi",-1,-1,-1,0.5836066603660583,0.694045901298523,0.8392840623855591,-1.0,accept,unanimous_agreement
1140021716,4414,as per design.,0,0,0,0.981389582157135,0.9853938817977904,0.9933838248252868,0.0,accept,unanimous_agreement
1140022966,4414,"this needs to fixed, yes. turns out that the timetoolbar doesn't work either.",0,0,0,0.9743276238441468,0.8374602198600769,0.9774577617645264,0.0,accept,unanimous_agreement
1140157729,4414,"snapping modifies what is time-selected, so it is related. i don’t feel very strongly on this",-1,-1,0,0.9118829369544984,0.8784098029136658,0.858478844165802,-1.0,accept,majority_agreement
1140160995,4414,"what did not become a registry yet is the table of formats in numericconverter. i thought i might see that, when you mentioned registries. i hope you agree that registries have their value and will be easier for you to use again.",0,0,0,0.9470022916793824,0.7819799184799194,0.6846532821655273,0.0,accept,unanimous_agreement
1140162921,4414,or allow me to clean it up? i may still rebase that pr that removes dependencies on toolbars,0,0,0,0.986713409423828,0.9896566867828368,0.9941826462745668,0.0,accept,unanimous_agreement
1140165394,4414,it's up to you :-) i can do that without problems,1,1,1,0.9910338521003724,0.9948935508728028,0.99261873960495,1.0,accept,unanimous_agreement
1140173728,4414,"actually, there was never undo/redo for rate changes either.",0,0,0,0.985043168067932,0.9765444993972778,0.9844300746917723,0.0,accept,unanimous_agreement
1140176906,4414,"i do want to follow this with refactoring that demotes projectselectionmanager to lib-time-frequency-selection, so that will depend on lib-snapping if it still separate.",0,0,0,0.9867556095123292,0.9869660139083862,0.9923884272575378,0.0,accept,unanimous_agreement
1140183689,4414,maybe an edge case in little used functionality. it seems the snap functions for the weird cases might be good as separately registered stuff.,0,0,0,0.9460365176200868,0.8072527647018433,0.9111642241477966,0.0,accept,unanimous_agreement
1140184662,4414,which makes more obvious sense as needing i18n,0,0,0,0.9845294952392578,0.9615883231163024,0.9912753105163574,0.0,accept,unanimous_agreement
1140191284,4414,maybe lib-beats would push things into this registry and into the tables of numeric formats in the ideal reorganization — but it would not paint any more things green.,0,0,0,0.9561748504638672,0.973615825176239,0.9662133455276488,0.0,accept,unanimous_agreement
1140203302,4414,"my point is that right now we do not have snap-to format that needs the complexity of the ntsc drop frames. snapping the time to 29.97 (or, more correctly, to 30 * 1000 / 1001) does not require the magic from the numeric converter, as we do not care about the frame number - we only want to snap to the frame boundary.",0,0,0,0.8690933585166931,0.9893739819526672,0.981131076812744,0.0,accept,unanimous_agreement
1140267333,4414,but the code to do it remains in the library for future use maybe.,0,0,0,0.9869986176490784,0.9918566942214966,0.993989109992981,0.0,accept,unanimous_agreement
1140366935,4414,i have rechecked and this change is correct. the name is now set in `selectionbar::setselectionmode`. this method is called from `selectionbar::populate()` so the name is always set and correct.,0,0,0,0.9848251938819884,0.9876224398612976,0.9878756403923036,0.0,accept,unanimous_agreement
1140396408,4414,"yeah, i think i will leave it for now.",0,0,0,0.9628578424453736,0.9403721690177916,0.9621410965919496,0.0,accept,unanimous_agreement
1140412848,4414,"i have rechecked, changing the language re creates all the toolbars from scratch. i thought that time toolbar was broken as i had untranslated beats&bars mode set",0,0,0,0.9703652858734132,0.931357443332672,0.9876102209091188,0.0,accept,unanimous_agreement
1140598603,4414,"one thing i overlooked in the first round of review. this `redrawproject` call was lost. my branch to break dependencies on toolbars, which conflicts so much with this one, adds a subscription to projectwindow so it redraws itself. meanwhile: your rebased branch is failing some builds",-1,0,0,0.5245931148529053,0.5730195045471191,0.9550613164901732,0.0,accept,majority_agreement
1140652807,4414,"it fails sanity test with the timeout, i will check why.",0,0,0,0.8595162630081177,0.9290226101875304,0.9871440529823304,0.0,accept,unanimous_agreement
1140658314,4414,"is it really need though? i don't know. fix is quite easy, provided that redrawproject defers the action.",0,0,0,0.9626284241676332,0.9196490049362184,0.982125997543335,0.0,accept,unanimous_agreement
1140977365,4414,"as i said, now i have done that rebase to clean this up.",0,0,0,0.9772661328315736,0.9844635725021362,0.9924235343933104,0.0,accept,unanimous_agreement
1140978102,4414,i'll do that cleanup in another branch,0,0,0,0.9836834073066713,0.988799810409546,0.9891027212142944,0.0,accept,unanimous_agreement
1140979535,4414,"you removed the repetition of the path literal, which is good. but you introduced an `extern` declaration, which i don't like. it lets you ""cheat"" without properly declaring this setting in a header file, and including that file, so that the tool that produces the ""jungle"" graph doesn't reflect the complete, real dependencies. please declare the setting in selectionbar.h. that does not add dependency on selectionbar -- the dependency was already there because of this extern; now it is made more obvious. and we may not like adding dependencies on the toolbars, but from a src/menus file it is not bad. these files are already tops of the dependency graph -- note that they are .cpp files without corresponding .h and rely on registration to add their functionality.",0,0,0,0.741155743598938,0.6425276398658752,0.6281049847602844,0.0,accept,unanimous_agreement
1140979988,4414,i'm satisfied,0,0,1,0.9668298363685608,0.6926422119140625,0.8741406798362732,0.0,accept,majority_agreement
1140980107,4414,"it's not ""horrible""",-1,-1,-1,0.9576619267463684,0.9638826251029968,0.7228333950042725,-1.0,accept,unanimous_agreement
1140987831,4414,thanks for the explanation. if the boolean means nothing more or less than a success indicator -- then i might instead just use `using snapresult = std::optional ;`,1,1,1,0.9260596036911012,0.6140093803405762,0.9552648067474364,1.0,accept,unanimous_agreement
1140988422,4414,but too i think the functions might be scattered to other files in a later library reorganization (which i don't demand with this pr). the snapping routines special to beats and also the numeric format special to beats would live together and push their special case stuff into registries.,0,0,0,0.9828518629074096,0.9854156374931335,0.9908646941184998,0.0,accept,unanimous_agreement
1140988601,4414,"on the other hand i see now, that you reuse transparency explicitly for another purpose. i was only thinking of how registry.cpp assigns meaning to transparency in the merging procedure.",0,0,0,0.9816437363624572,0.9829692840576172,0.988155722618103,0.0,accept,unanimous_agreement
1140988838,4414,maybe we start `lib-video` just to register this with a big `wip` in cmakelists.txt :-),1,0,0,0.882725179195404,0.53404301404953,0.9860596060752868,0.0,accept,majority_agreement
1140989378,4414,"what i described is now part of my own pr, to follow this one",0,0,0,0.951772928237915,0.9805942177772522,0.992089867591858,0.0,accept,unanimous_agreement
1140990446,4414,"i wonder sometimes though, should xo(""%d"") be a thing? [a link] we still use sexagesimal time units after all [a link]",0,0,0,0.809524416923523,0.903448224067688,0.9299848079681396,0.0,accept,unanimous_agreement
1140990683,4414,ideally any formatting function should handle the locale. but it seems to be not the case for wxstring::format,0,0,0,0.9837377071380616,0.9923956394195556,0.9915804266929626,0.0,accept,unanimous_agreement
1140991031,4414,"i had forgot whether you needed special work with each toolbar to get translation update, besides setting the label. seeing `updateprefs` reminded me that language is one preference.",0,0,0,0.9381840229034424,0.9499930739402772,0.9647035598754884,0.0,accept,unanimous_agreement
1146257989,4414,build failure on macos -- use operator * instead,0,0,0,0.9585272669792176,0.9891891479492188,0.9902228116989136,0.0,accept,unanimous_agreement
1146273798,4414,"yeah, i found it out already...",0,0,0,0.9318850040435792,0.9637194275856018,0.974398136138916,0.0,accept,unanimous_agreement
1146414914,4414,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
1146415365,4414,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
1146420544,4414,"answering that question, i have suggested that a lib-time-signature, or lib-beats or whatever you name it, would make sense as a place in which to collect all special behavior related to beats and bars, and put registrations that push more behavior into the other libraries. it was true before this commit that all `undostateextension` subclasses and their factories were in green libraries, not in audacity. given lib-beats, that could remain so.",0,0,0,0.9650794863700868,0.9894670844078064,0.9917479753494264,0.0,accept,unanimous_agreement
1146422856,4414,they could be `const`,0,0,0,0.984906792640686,0.9920267462730408,0.9925508499145508,0.0,accept,unanimous_agreement
1146425341,4414,commit comment disagrees with the new name you really chose,0,0,0,0.8203855752944946,0.8671585321426392,0.9136955738067628,0.0,accept,unanimous_agreement
1146435462,4414,"the changes for focused digit are good ones i hoped to see, after i reviewed the existing numericconverter code. but now this function requires the precondition `mdigits.size() > 0`. where is the proof of that?",0,0,1,0.8960880041122437,0.8912361860275269,0.6158980131149292,0.0,accept,majority_agreement
1146436253,4414,"as noted, insufficiently safe, unless you test first for no digits and exit with no effect.",0,0,0,0.9218155145645142,0.8805220127105713,0.9696199893951416,0.0,accept,unanimous_agreement
1146438051,4414,great catch! but what should be index of the focused digit in this case? i think `-1` is as good value as any.,1,1,1,0.9914634823799132,0.9864351749420166,0.9967331886291504,1.0,accept,unanimous_agreement
1146441509,4414,visibility should be unnecessary if there are no non-inline member functions,0,0,0,0.984558641910553,0.9822002649307252,0.9919047355651855,0.0,accept,unanimous_agreement
1146443278,4414,`lib-time-frequency-selection` is a library that depends on `lib-project-history`. so should `projecttimesignature` go there? should beats go there as well?,0,0,0,0.9882310032844543,0.9948740601539612,0.9922312498092652,0.0,accept,unanimous_agreement
1146443618,4414,"i see this cast, and think, better that `i`, `j`, `pos` and the members of the structure be `size_t` -- unless -1 for invalid values is used somewhere?",0,0,0,0.9875627756118774,0.9934318661689758,0.990350902080536,0.0,accept,unanimous_agreement
1146449663,4414,i kinda kept that cast intact (it was implicit previously). it is weird that old code (and the one moved to a new class) haven't really used the `digitinfo::field`. instead it tried to match the `pos` of the digits to get the corresponding field.,-1,-1,-1,0.9740395545959472,0.9690032601356506,0.911002516746521,-1.0,accept,unanimous_agreement
1146473549,4414,"i would even make the structure members `const size_t` then also, `numericfield::digits` should be `size_t`",0,0,0,0.9868952631950378,0.9927841424942015,0.9942654967308044,0.0,accept,unanimous_agreement
1146483111,4414,"this commit is good. i would now make it better: `numericconverter::mfields` should be private, and a protected member function gives `numerictextctrl` only the `const` access to the array that it requires.",1,1,1,0.7328391671180725,0.9064825773239136,0.9592067003250122,1.0,accept,unanimous_agreement
1146488616,4414,this naming convention for ctor arguments isn't necessary. they can just be the same as the members.,0,0,0,0.9869053959846495,0.9922195672988892,0.9928115010261536,0.0,accept,unanimous_agreement
1146506146,4414,"seeing `-1` made me pause in my review to reason about all uses of `pos` to be sure there was no missing bounds checks. i would instead write `size_t pos{ wxstring::npos };` but seeing that, still i would do the same check. really the safety condition is this: when `parseformatstring` builds the vector of `numericfield`, it is always a legal subscript in `mvaluetemplate`, which will also have the same length as `mvaluestring` when that is built. that should be commented somewhere",0,0,0,0.9274362325668336,0.9868512749671936,0.9862268567085266,0.0,accept,unanimous_agreement
1146508308,4414,`mvaluetemplate` was never read. it haven't survived :-),1,1,0,0.8996214866638184,0.9811692833900452,0.8035709857940674,1.0,accept,majority_agreement
1146511348,4414,"in any case - it was left uninitialized previously, so it really had some random value. i need to revisit the code, probably we can remove the `pos` as well",0,0,0,0.9849476218223572,0.9652171730995178,0.9909406900405884,0.0,accept,unanimous_agreement
1146515550,4414,"i notice that the `if` and the `else` branch below choose the same format string always. zero padding was made always true, somewhere else in this file, some long time ago. but maybe this function should not be aware of that and still prepared to eliminate the zero padding.",0,0,0,0.9729748964309692,0.9821841716766356,0.9847044944763184,0.0,accept,unanimous_agreement
1146518854,4414,"i see the enum, i think it's closed-endedness, and i would rather see registration remove the enum completely. maybe i'm about to see that. no spoilers, please!",0,1,1,0.8573949337005615,0.9306280016899108,0.6253507733345032,1.0,accept,majority_agreement
1146519179,4414,in later code you will find the checks (but somewhat too late). this can be fixed easily,0,0,0,0.9763373136520386,0.985090970993042,0.992131531238556,0.0,accept,unanimous_agreement
1146520942,4414,that function is wrong in any case. i think i should rewrite it. passing `11` as the range doesn't quite work :-),1,1,1,0.4111321866512298,0.5913600325584412,0.9477089643478394,1.0,accept,unanimous_agreement
1146522706,4414,this on stays. it can be quite easily removed though.,0,0,0,0.9639360308647156,0.9808335304260254,0.9909737706184388,0.0,accept,unanimous_agreement
1146530366,4414,the commit introducing this enum class fails to build. it does not yet remove the old enumeration. one line of the ctor of `numericconverter` should change to ` if (type == numericconvertertype::time )`,0,0,0,0.9338672161102296,0.9949073195457458,0.9938284754753112,0.0,accept,unanimous_agreement
1146567685,4414,"`fields` is not defined. i would write it [code block] so that the formalized postcondition could be cut and pasted and compiled as the last line before returninng from a definition of `valuetostring`, assuming a local variable called `result`",0,0,0,0.9877468347549438,0.9949593544006348,0.9944705963134766,0.0,accept,unanimous_agreement
1146568563,4414,"and so that the post could also be written just after the point of call, supplying the missing `this` and changed variable names appropriately, and using only public member functions of the class",0,0,0,0.9882092475891112,0.9921807050704956,0.9941142201423644,0.0,accept,unanimous_agreement
1146605477,4414,i would make these three `const` (returning the value of scalingfactor from `parseformatstring`),0,0,0,0.9875747561454772,0.9928955435752868,0.9944086670875548,0.0,accept,unanimous_agreement
1146606579,4414,`mutable` is unhappy but then ntsc is just a weird case,-1,-1,-1,0.9800368547439576,0.9859746098518372,0.9712207913398744,-1.0,accept,unanimous_agreement
1146632977,4414,why was this new line needed?,0,0,0,0.9325859546661376,0.985774040222168,0.9823294281959534,0.0,accept,unanimous_agreement
1146703074,4414,assigned but not yet used at the commit that introduces it.,0,0,0,0.9871074557304382,0.993304431438446,0.9919590950012208,0.0,accept,unanimous_agreement
1146704668,4414,simplify with `clamp`,0,0,0,0.9857510328292848,0.9912318587303162,0.995363473892212,0.0,accept,unanimous_agreement
1146975498,4414,the second `move` is a little strange,0,-1,0,0.5222185254096985,0.8983874320983887,0.5407370924949646,0.0,accept,majority_agreement
1146976689,4414,"this does nothing, but i haven't seen whether later commits add to it",0,0,0,0.6380260586738586,0.9271482229232788,0.9827890992164612,0.0,accept,unanimous_agreement
1146983044,4414,spelling,0,0,0,0.9774957895278932,0.928835928440094,0.9833834767341614,0.0,accept,unanimous_agreement
1146983991,4414,"that looks like a dangerous by-reference capture, but it isn't so long as the tables remain static... worth a commen",-1,-1,-1,0.5158383846282959,0.9326539635658264,0.946039080619812,-1.0,accept,unanimous_agreement
1146985093,4414,"the three ""begin"" hints can't all be satisfied -- but registry will sort by the internal identifiers for determinacy. but i think the ordering of this registry really doesn't matter for anything the user sees.",0,0,0,0.9727256298065186,0.959588885307312,0.9838390350341796,0.0,accept,unanimous_agreement
1146986792,4414,the commit that deletes this finally repairs the build of the commit sequence (except for the porblem building tests on mac),0,0,0,0.9885427951812744,0.9899829030036926,0.9947853684425354,0.0,accept,unanimous_agreement
1146987295,4414,"you know ""iff"" is a mathematician's shorthand for ""if and only if?"" when you see that word, it isn't a spelling mistake!",0,0,0,0.95359605550766,0.701163113117218,0.955946922302246,0.0,accept,unanimous_agreement
1146987591,4414,"but you can also write ""whether"" as i do sometimes, to be more precise than ""if""",0,0,0,0.9855504035949708,0.9903846979141236,0.993385136127472,0.0,accept,unanimous_agreement
1147306902,4414,"hmm, i thought tests on mac are fixed, at least ci passes...",0,0,0,0.9624435305595398,0.9588983654975892,0.956980288028717,0.0,accept,unanimous_agreement
1147308366,4414,"in the previous version, i had crashes without `orderingpreferenceinitializer`, if i remember correctly.",0,0,0,0.9853164553642272,0.9075331091880798,0.9844998121261596,0.0,accept,unanimous_agreement
1147330274,4414,i'm still marching up the commit sequence to c9f0e36d59,0,0,0,0.9430679082870485,0.9074100852012634,0.987939476966858,0.0,accept,unanimous_agreement
1147412088,4414,"not obvious, but -- this introduces the change to `adjust` that you mentioned in meeting, to fix a bug. clamping the stepped value to bounds, and scaling, were done in the wrong sequence. please mention this subtletly in a commit comment. you must have observed the bad interaction of scaling and min and max while trying to make things work for beats. was this also a bug in the spectral selection toolbar? in fact, maybe it used to be, but see commits 24c2c6e, 0dd3aef where the setting of minimum and maximum were disabled.",0,0,0,0.7568310499191284,0.8892499804496765,0.9789689779281616,0.0,accept,unanimous_agreement
1147414226,4414,this came solely from the code observation,0,0,0,0.9863925576210022,0.993221402168274,0.9939642548561096,0.0,accept,unanimous_agreement
1147432921,4414,"the template argument is not for crtp. it's to specify the type of argument supplied to computed registry items, which you don't need in this registry. so just use empty angle brackets to default the argument: `<>`",0,0,0,0.9818522930145264,0.993224799633026,0.9948987364768982,0.0,accept,unanimous_agreement
1147437269,4414,"this won't link due to the symbols duplication. this is the reason the snap registry uses some type as well, but you have missed it probably because it is called visitor as well. the `template< typename visitortype = computeditem::defaultvisitor ` is really confusing, it took me a lot of time to figure out that visitortype is not related to the visitor, rather it is a factory. i can use some random tag type here, if you think this would improve the code. tbh, i think registries need quite a lot of work to be done.",-1,-1,-1,0.706619143486023,0.5891531109809875,0.9511749744415284,-1.0,accept,unanimous_agreement
1147437597,4414,"seeing you write things like this again, to define another registry, i'm thinking i didn't do enough with the template magic to make the definition of new registry types easier. i have ideas. so, wait for it in 3.4...",0,0,0,0.5285032391548157,0.802656888961792,0.8684461712837219,0.0,accept,unanimous_agreement
1147438486,4414,"more shortcomings in the registry system, if you must use `baseitem` rather than a more specific type as your template parameter. i must think about that.",0,0,0,0.9571873545646667,0.9778863191604614,0.9111130833625792,0.0,accept,unanimous_agreement
1147438647,4414,"registries should be simplified, not made more complex.",0,0,0,0.9687578678131104,0.9776943922042848,0.9771977066993712,0.0,accept,unanimous_agreement
1147440785,4414,"a new registry -- and yet, there is still a closed-ended enum class as an argument, which means, the purpose of a registration system still isn't realized. ideally instead of an enum value, there would be a dynamically assigned small integer value (suitably wrapped perhaps in some other new type) passed to the registrator.",0,0,0,0.9871740341186525,0.991840958595276,0.9845464825630188,0.0,accept,unanimous_agreement
1147444756,4414,"this is the stuff that the factory type below needs: the parameters of a formatter that are not known at compile time. and i see beat and bar specific stuff here, and i think again that this is a failure of open endedness. there should instead be some type erasure. maybe the argument of the factory should just be `void*` after all? or, `std::any` so that there could be some dynamic type checking by the function, that the expected sort of data are given to it.",0,0,0,0.926973819732666,0.9537100791931152,0.892010509967804,0.0,accept,unanimous_agreement
1147451295,4414,there is an assumption that groups don't nest.,0,0,0,0.9211599826812744,0.9803633093833924,0.9820833206176758,0.0,accept,unanimous_agreement
1147456471,4414,"please consider it to be no written in the largest font possible. `std::any` does not helps open endianness in any way. how would the numericconverter knows what is expected by the converter? i have not yet seen a place where `any` is an indication of anything but bad design in c++. `void*` can be justified in c due to lack of closures, but not in c++. this specific place is even worse than effectsetting: there is no 1-1 correspondence between the user (numericformatter) and the implementation (formatter), so such architecture would become unusable. i can propose passing a reference to audacityproject instead, if you are ok with this dependency. this would be a simple and easily extensible solution.",-1,0,0,0.8535354733467102,0.8237218856811523,0.5890341997146606,0.0,accept,majority_agreement
1147457198,4414,there is indeed. begingroup assumes it as well.,0,0,0,0.9855256676673888,0.991172730922699,0.9925143122673036,0.0,accept,unanimous_agreement
1147459035,4414,there could be a string based identifier. we need to be able to set the type in the controls.,0,0,0,0.9882033467292786,0.9925605654716492,0.9928389191627502,0.0,accept,unanimous_agreement
1147475446,4414,"the ""hack"" that the commit comment mentions is, i now see, the `getfraction()` function. please mention that specifically in the commit comment.",0,0,0,0.9791631102561952,0.9906452894210817,0.9938406944274902,0.0,accept,unanimous_agreement
1147480107,4414,"i also notice now that this big commit in 2021 171d8cf added the special hack of '>' in the mini-language, but the long comment explaining the syntax of the language wasn't update for it. and there is a confusing long i18n comment repeated in many places. i haven't thought whether there was a better way to localize the decimal point. have you?",0,-1,0,0.9048444032669068,0.7813803553581238,0.7813342809677124,0.0,accept,majority_agreement
1147482028,4414,we need to use system one. however this is a problem for future us :-),1,1,0,0.928564727306366,0.991897702217102,0.619144856929779,1.0,accept,majority_agreement
1147485500,4414,"there would ideally be a nicer way to express this more in the style of the menu definitions, just using a variadic constructor expression that includes all the details of all the formats. but never mind that for now.",0,0,0,0.8604095578193665,0.9483233094215392,0.9828982353210448,0.0,accept,unanimous_agreement
1147506327,4414,"actually, i think that passing audacityproject would be an only option when we implement the ability to have a different tempo and signature across the project :-)",1,1,0,0.8633937239646912,0.6781479716300964,0.7610527873039246,1.0,accept,majority_agreement
1147518277,4414,"ideally this could use observer, but that change would be a lot of work, and the places using the message will not be in green libraries soon if ever.",0,0,0,0.9731192588806152,0.9815092086791992,0.9380645155906676,0.0,accept,unanimous_agreement
1147520331,4414,"the integer information is no longer set. so i made a careful check of all old uses of these events to be sure the integer value is never retrieved from the event. but there is one such place still! in `spectralselectionbar::onupdate` but then it's only this inialization `int index = evt.getint();` of a variable that is never used, so delete that please",0,0,0,0.9681864976882936,0.980484664440155,0.9849255681037904,0.0,accept,unanimous_agreement
1147520992,4414,"if there were an observer message with only the necessary information, i would not have needed to check all that. but you would have written much more stuff.",0,0,0,0.9762778878211976,0.9794798493385316,0.9758478999137878,0.0,accept,unanimous_agreement
1147537177,4414,"oh no -- now i think you should do all the work of using observer, after all. whereas `tt_setaudiotimeformat` received a `numericformatsymbol` before, now instead it gets `numericformatsymbol` constructed from the internal identifier only, possibly losing translatable string information. in fact, in the tables now, all the numericformatsymbols are like `{ xo(""seconds"") }`, that is using the constructor `componentinterfacesymbol( const translatablestring &msgid )`, so none will really lose information. yet, it doesn't work now with the correct, future-proof generality.",0,0,0,0.9533618688583374,0.9301811456680298,0.9708364009857178,0.0,accept,unanimous_agreement
1147539755,4414,"similar remarks about the calls to `ssbl_setfrequencyselectionformatname`, `ssbl_setbandwidthselectionformatname`",0,0,0,0.9848695993423462,0.99388325214386,0.9928146600723268,0.0,accept,unanimous_agreement
1147541080,4414,"and yet again -- i do have that other pending branch to clean up all that stuff, eliminating those bogus listener classes. maybe it would be less work for us all if i simply pushed that bit of work onto your brnach! that would avoid the problem.",0,0,0,0.6400471329689026,0.8824915289878845,0.6179447770118713,0.0,accept,unanimous_agreement
1147552464,4414,i was under impression that the match is done by `internal`. i don't really understand what could be the reason behind the locale specific matching for identifiers. if this is the case - saving to the configuration was broken long before this pr.,0,0,0,0.867488443851471,0.5360447764396667,0.9670502543449402,0.0,accept,unanimous_agreement
1147553405,4414,this commit removes this without restoring an equivalent. a later commit does that. stringly speaking it breaks a feature. but i agree it's already too much to squash it all.,0,0,0,0.9284776449203492,0.5741503238677979,0.8688613772392273,0.0,accept,unanimous_agreement
1147554340,4414,how can you break a feature that doesn't work?),0,0,0,0.9523385167121888,0.8106887340545654,0.9750099182128906,0.0,accept,unanimous_agreement
1147555917,4414,the introduction of long-distance coincidence of strings literals between two source files is unfortunate. i don't see yet how these functions could be moved into parsednumericconverterformatter.cpp,-1,-1,-1,0.9750834703445436,0.977392077445984,0.9593189358711244,-1.0,accept,unanimous_agreement
1147558302,4414,why should they?,0,0,0,0.846632719039917,0.9385619759559632,0.9220157265663148,0.0,accept,unanimous_agreement
1147558925,4414,"no -- that's wrong. with only one exception (defaultselectionformat), they are not used within this file, but are only used by various dialogs and toolbars. so they easily can and should be moved to that other file. what to do about defaultselectionformat to make it nicer, i don't know yet.",0,0,0,0.6568233966827393,0.6877009868621826,0.8308861255645752,0.0,accept,unanimous_agreement
1147560673,4414,i do agree with this. i've just tried to keep this review 1% less long and boring,-1,-1,-1,0.942322552204132,0.5970079898834229,0.7610234022140503,-1.0,accept,unanimous_agreement
1147565296,4414,"i think that since ""hh:mm:ss + milliseconds"" is a string with special significance in numericconverter as the default -- then, parsednumericconverterformatter.cpp should call the function that returns that string where it initializes the table, instead of duplicating the literal. and the suggests that the return type of `defaultselectionformat` should be `numericformatsymbol`.",0,0,0,0.9865938425064088,0.991532862186432,0.9841470718383788,0.0,accept,unanimous_agreement
1147567321,4414,"sorry, i don't understand this point at all.",-1,-1,-1,0.9874874353408812,0.9906230568885804,0.993238091468811,-1.0,accept,unanimous_agreement
1147583433,4414,"as an option i can move this specific formats into the numericconverter.cpp, so i can keep all the constants in one file. this will, however, affect the user visible ordering. i don't think that this is desirable.",0,0,0,0.9528096914291382,0.969779908657074,0.9879540205001832,0.0,accept,unanimous_agreement
1147694948,4414,i do not understand or agree with your uncompromising opposition to all uses of `any`. however my review is not complete enough for me to know whether even i think it is right. i have not yet examined how these configuration things are built and used.,-1,0,-1,0.9307413697242736,0.5575627088546753,0.7901237607002258,-1.0,accept,majority_agreement
1147697008,4414,"audacityproject is a sort of all-purpose ""context"" oftentimes, it's true",0,0,0,0.9786726832389832,0.9861901998519896,0.9842224717140198,0.0,accept,unanimous_agreement
1147859880,4414,"you do -- good, please do the small cut and paste. seeing well organized code pleases me rather than bores me. for the same reason we like `boolsetting` and similar for eliminating repetition of a string literal in favor of just one named object -- so this would be good.",1,1,1,0.9347137212753296,0.9697002172470092,0.9768801927566528,1.0,accept,unanimous_agreement
1147861044,4414,"i would not like that. really i think time and frequency formats would be nicer separated into their own files, but let's not do that yet.",-1,-1,-1,0.9807512760162354,0.9197295904159546,0.9045379161834716,-1.0,accept,unanimous_agreement
1147867445,4414,"introducing new (bad) unintended dependencies by doing that, as we saw in this pr already. that specific case should be solved differently though, we should instead have listeners for the preferences reset. tbh i'm quite confused by how you don't like enums, but instead replacing them with constants or global objects :-)",-1,-1,1,0.7576826214790344,0.8502547144889832,0.7841976284980774,-1.0,accept,majority_agreement
1147872072,4414,"speaking of preferences objects - personally i see shared global writable preferences as a massive source of potential bugs. using objects doesn't make it worse, but it doesn't really fix a problem either.",-1,0,0,0.6058037281036377,0.6458900570869446,0.574018657207489,0.0,accept,majority_agreement
1147873072,4414,"it's not saving to config that would be broken. i just haven't followed the chain of consequences to see whether some l10n would be broken afterward in-session. and even then it might only become broken if for any reason the tables had to change their english strings and use the two-argument constructor of the symbol to keep compatibiliy (but that is unlikely to happen). so it would be not broken, but fragile. but as i say, really the selection bar listener classes should be eliminated, and i have a commit already to do that which does not require all else that is in my branch. i would like to append that commit to this branch.",0,0,0,0.7883558869361877,0.948633313179016,0.9390949010849,0.0,accept,unanimous_agreement
1147875340,4414,"in any case, you have not convinced me that i am wrong. citing componentinterfacesymbol implementation: [code block] we do store `internal` in preferences, so i don't think that i have introduced any kind of bug here.",-1,0,0,0.6798784136772156,0.784462571144104,0.9819375276565552,0.0,accept,majority_agreement
1147876547,4414,"right, that too would eliminate an enum type.",0,0,0,0.986668348312378,0.9800511002540588,0.9898489117622375,0.0,accept,unanimous_agreement
1147878449,4414,"if you mean the usage of them should be simplified, then the added template metapoetry is the complexity than enables the simplicity of use. are you opposed to the effort of investing in better templates?",0,0,0,0.9506702423095704,0.9858128428459167,0.985759437084198,0.0,accept,unanimous_agreement
1147882026,4414,so should i proceed?,0,0,0,0.9799419641494752,0.9901517033576964,0.9838431477546692,0.0,accept,unanimous_agreement
1147882434,4414,"explain more some time. i hope you recognize the good purpose they serve. if you mean it should be easier to define new registries to serve that purpose, then i agree and i have some ideas.",1,1,1,0.58186274766922,0.9266440868377686,0.9125539064407348,1.0,accept,unanimous_agreement
1147883996,4414,"you found it deductively? well that is good too, even better.",1,1,1,0.5217065811157227,0.8151625394821167,0.893227756023407,1.0,accept,unanimous_agreement
1147897047,4414,"i see the settings object as revealing the need to make a link dependency explicit. the problems of bad global state may not be solved but the naming of an object with linkage, instead of the reliance on coincident string literals, forces a more deliberate choice about where to define the global object and which place to make dependent on the other place.",0,0,0,0.9368181824684144,0.9547571539878844,0.9855167269706726,0.0,accept,unanimous_agreement
1147899245,4414,"i dislike enums for a different reason. it's closed-endedness. if instead the set of possibilities may need to grow and serve very unrelated special cases, i would rather have a registry and also good dependency inversion.",-1,-1,0,0.9636842012405396,0.9573882222175598,0.5118696689605713,-1.0,accept,majority_agreement
1147900686,4414,"i've started writing the comment about how i do not understand why this value was ""switched"", but understood the reason in process. i still think that it could be written differently - in the end we know the frame length is fixed, only the string representation can be different.",0,0,0,0.956420600414276,0.9751291275024414,0.977629780769348,0.0,accept,unanimous_agreement
1147901243,4414,the real question is how it worked without this line before,0,0,0,0.9690195918083192,0.973005712032318,0.9774004817008972,0.0,accept,unanimous_agreement
1147902262,4414,this was not intentional,0,0,0,0.5851491689682007,0.7718157768249512,0.9806923270225524,0.0,accept,unanimous_agreement
1147908225,4414,there is more in that class than just its equality and comparison operators.,0,0,0,0.9789671301841736,0.9872954487800598,0.9847849607467652,0.0,accept,unanimous_agreement
1147909252,4414,"for one - i don't think `inlinegroupitem` should not be parametrized with a factory which is called visitor :-) in the end, you can only have single `dllexport`ed subclass using the default parametrization, otherwise audacity won't link due to the symbol conflicts between libraries. so i had to use some kind of tagging to overcome this issue. somehow you have missed `struct snapregistrygroup : public registry::inlinegroupitem ` which is wrong too, because inlinegroupitem expects a factory, not a visitor :-)",0,1,1,0.6038699150085449,0.9815419316291808,0.9743321537971495,1.0,accept,majority_agreement
1147912476,4414,"there is. but we only use equality here and we store this value in preferences. and this value **was** stored in preferences before. so if it will break - it will break globally, not because code here relies only on internal part. for display purposes numericformatsymbol can still be retrieved from the registry. this is how the menu is built!",0,0,0,0.9595061540603638,0.8991400599479675,0.983423352241516,0.0,accept,unanimous_agreement
1147915205,4414,"allow me to push the commit that removes the listener classes so i can relieve my doubts, the code gets simpler, and we can stop arguing about this point.",0,0,0,0.8000696897506714,0.952565610408783,0.9578061699867249,0.0,accept,unanimous_agreement
1147920512,4414,"sure, go ahead",0,0,0,0.9501767754554749,0.9555253982543944,0.9827264547348022,0.0,accept,unanimous_agreement
1147964952,4414,"no, it is really parametrized by a visitor type, which can also act as the context expected by the lambdas that become computeditems in the registry. read this closer: `void appendone( const computeditem::factory &factory )` the visitortype is a template parameter of a ""factory"" type alias but is not itself a factory type. it's the input to the factory. example from pluginmenus: [code block] change the argument of the lambda to audacityproject* (and project to *project inside) and it properly fails to compile the call to appendone. the class `toolbarmenuvisitor` (bad name, i will change it in the pr for lib-menus) implicitly converts to audacityproject & and is also the template argument of the group items used in the menu registry.",0,0,0,0.9751787781715392,0.9928228855133056,0.9910645484924316,0.0,accept,unanimous_agreement
1148016919,4414,"i can see how toolbarmenuvisitor is a visiting factory, this doesn't help establishing that relationship when one tries to figure out how to use the registry :-) nor does it help with the linking problems or writing simple registries. for both registries introduced in this pr i had to hack my way through. i understand what you have tried to achieve and i find this solution to be very elegant, but i have a strong opinion that this should be not be done by `inlinegroupitem`. instead, some well documented `computablegroupitem` can be used (naming is my weakness, yes).",1,1,1,0.8641805052757263,0.9842700958251952,0.981962025165558,1.0,accept,unanimous_agreement
1148037873,4414,"some details may be revisited, but what i wanted was the convenient variadic calls to `items` or `section` or `menu`, which usually accept `command` but can sometimes just take a lambda in-line for the computed item. the lambda must accept the correct argument type for that registry. what that type is -- had to be given somehow as a template argument.",0,0,0,0.9862871766090392,0.9897224307060242,0.9932936429977416,0.0,accept,unanimous_agreement
1148044451,4414,"better comments, maybe newer c++17 template tricks for more convenience -- all of this is needed. i need to look over registry.* with fresh eyes after having first done it some years ago, and the pull request for registry-changes has been waiting as a draft for a long time, still needing its self review and cleanup as non-draft. then also i hope you will learn registry inside and out -- read all of registry.cpp and understand how this pull request makes some bug fixes and improvements.",1,0,1,0.7132509350776672,0.6725050806999207,0.746826171875,1.0,accept,majority_agreement
1148346368,4414,a stray character,0,-1,0,0.6104820966720581,0.7846918702125549,0.904309093952179,0.0,accept,majority_agreement
1148375233,4414,"repeated work when you come here from `setcustomformat`, but there are other paths",0,0,0,0.9874302744865416,0.9910520911216736,0.9942203760147096,0.0,accept,unanimous_agreement
1148376419,4414,"pedantically... this commit should be squashed with ""use parsednumericformatconverter in the numericconverter""",-1,0,0,0.7616596221923828,0.9882586002349854,0.990212380886078,0.0,accept,majority_agreement
1148376627,4414,i should have noticed when i reviewed that commit. i am sorry my review was so hasty and careless.,-1,-1,-1,0.9885558485984802,0.9910262227058412,0.9924152493476868,-1.0,accept,unanimous_agreement
1148383999,4414,"checking again to see what else i might have missed in that commit, i found nothing.",0,0,0,0.6405682563781738,0.9707313776016236,0.9583550095558168,0.0,accept,unanimous_agreement
1148384934,4414,wrong comment,-1,-1,-1,0.9223400354385376,0.6907638311386108,0.8904055953025818,-1.0,accept,unanimous_agreement
1148385809,4414,"really -- this is an unnecessary file! when the .cpp accomplishes all its influence on program behavior by registrations, it can be headerless. see src/menus or src/import for other examples.",-1,-1,-1,0.9230403304100036,0.9047065377235411,0.9928387999534608,-1.0,accept,unanimous_agreement
1148386128,4414,give that an `i18n-hint` comment,0,0,0,0.9886609315872192,0.9939005374908448,0.9929192662239076,0.0,accept,unanimous_agreement
1148386269,4414,"and at `xo(""bar"")` in snaputils.cpp, too",0,0,0,0.987475335597992,0.9935463070869446,0.9945870637893676,0.0,accept,unanimous_agreement
1148386368,4414,i18n-hint,0,0,0,0.9859569072723388,0.9858796000480652,0.9788827300071716,0.0,accept,unanimous_agreement
1148386466,4414,"""one"" where is the bug you refer to? can you fix it?",0,0,0,0.9801345467567444,0.9912909269332886,0.9854093194007874,0.0,accept,unanimous_agreement
1148386672,4414,i notice that `fracfield` gets no label,0,0,0,0.9760890603065492,0.9179025888442992,0.9900251626968384,0.0,accept,unanimous_agreement
1148387006,4414,"i notice `false` passed to the `frac` ctor argument, a little surprising, but then i also see it only influences a different override of `valuetostring` that this class doesn't use",0,-1,0,0.9697582721710204,0.8746442198753357,0.9825511574745178,0.0,accept,majority_agreement
1148388748,4414,i need it for unit tests,0,0,0,0.9809542894363404,0.9551286101341248,0.9875205755233764,0.0,accept,unanimous_agreement
1148388903,4414,using log10 is a bad idea. i will rewrite that function anyway.,-1,-1,-1,0.9825819730758668,0.9678810834884644,0.95459645986557,-1.0,accept,unanimous_agreement
1148388942,4414,yes,0,0,0,0.9564858078956604,0.9659429788589478,0.9686408638954164,0.0,accept,unanimous_agreement
1148389655,4414,"that leads me to think that maybe `numericfields` should contain only the commonly needed fields, and the subclasses of `numericconverterformatter` privately add whatever else is special-purpose, in .cpp files and not included elsewhere. `base` is not needed by this new class. `range` isn't needed by this class either after `createdigitformatstr` uses it to decide the format string. `zeropad` isn't needed as a member either -- for either subclasss! it can be just an argument of the constructor of `numericfield` and `createdigitformatstr `. `pos` and `formatstr` are used by each subclass, but there is no common code in the base class that uses them, except initialization in the constructor. so they too might be removed. that could shrink `numericfield` to just `digits` and `label` -- which are used in the ui layeer code in numerictextctrl. then that means the public interface of lib-numeric-formats is simplified. this structure, which is exposed to numerictextctrl, would have less in it needing documentation.",0,0,0,0.9474823474884032,0.9925212264060974,0.9895674586296082,0.0,accept,unanimous_agreement
1148390245,4414,the same can be said of parsednumericconverterformatter.h,0,0,0,0.9840965270996094,0.9932712912559508,0.994002878665924,0.0,accept,unanimous_agreement
1148390888,4414,indent,0,0,0,0.8967059850692749,0.8570648431777954,0.9154122471809388,0.0,accept,unanimous_agreement
1148392894,4414,didn't this cause you divide-by-zero crashes?,0,0,0,0.9500271081924438,0.9307492971420288,0.9671397805213928,0.0,accept,unanimous_agreement
1148393925,4414,there is a check mfracpart and there are no integer divisions.,0,0,0,0.9861714243888856,0.990625500679016,0.9946885108947754,0.0,accept,unanimous_agreement
1148395294,4414,should this be an `override`? (i'm not sure..),0,0,0,0.7016449570655823,0.8500007390975952,0.8662228584289551,0.0,accept,unanimous_agreement
1148395371,4414,why not call `handleformatterchanged`? (which will do one extra thing),0,0,0,0.9785610437393188,0.9930282235145568,0.9927207231521606,0.0,accept,unanimous_agreement
1148396620,4414,"revisiting the question of where this should go. i like the idea of a `lib-beats` for other reasons, but even without that, it makes most sense to keep this registration in the file projecttimesignature.cpp. this would require you to change `lib-project-interface` to `lib-project-history-interface` in lib-numeric-formats/cmakelists.txt. i don't think that is a bad dependency. i consider lib-project and lib-project-history as low-level things (and have even thought that they might be merged).",1,1,0,0.5559527277946472,0.7136247158050537,0.8125452399253845,1.0,accept,majority_agreement
1148403891,4414,"at last i have reached the commit in which `numericconverterconfig`, introduced five commits previously, is fully used. forget what i said about `std::any`, yet i'm still uncomfortable with that structure and how the messages are passed. mostly it's analogous with how changes of project rate are communiated to the formatter -- and i have decided i dislike that too. figuring out the more pleasing organization looks like it will turn into another proposed commit from me insted of an explanation, because i wanted to make the change myself to see if it made sense and compile, and it became rather extensive.",-1,-1,-1,0.9814264178276062,0.985957682132721,0.9234692454338074,-1.0,accept,unanimous_agreement
1148405083,4414,"i'm catching up with this commit now, which did some of what i suggested to simplify `numericfield`.",0,0,0,0.9816007614135742,0.958168923854828,0.9918434023857116,0.0,accept,unanimous_agreement
1148408286,4414,"i've planned to change that to audacityproject reference, if you don't mind.",0,0,0,0.9759240746498108,0.9570317268371582,0.988149642944336,0.0,accept,unanimous_agreement
1148408395,4414,and i plan to move beat/bar duration calculation to the projecttimesignature,0,0,0,0.9833353757858276,0.9758800268173218,0.9943944215774536,0.0,accept,unanimous_agreement
1148410009,4414,"essentially this is a many-to-one mapping from identifiers of selection formats, to identifiers of their grain size, and the latter identifiers are then mapped to snap functors by another registry. this repetition of lots of string literals that are private to parsednumericconverterformatter.cpp doesn't feel good. let it stand for now, but now i think the registry of snap functors wants to be placed in the same library with the registry of numericconverteritems, and that registry should implement this map with extra information in the registered items, which is then accessed from snaputils with a visit.",-1,0,-1,0.6639888286590576,0.8052563071250916,0.9630290269851683,-1.0,accept,majority_agreement
1148410803,4414,"this is only needed for config migration, it is not used otherwise. please, let's not overcomplicate this. i would rather remove it and stick to default values.",0,0,-1,0.9403864145278932,0.9592638611793518,0.7133153080940247,0.0,accept,majority_agreement
1148411403,4414,no mistake here?,0,0,0,0.8726040720939636,0.8647496104240417,0.9810042977333068,0.0,accept,unanimous_agreement
1148411472,4414,i really want to stress that again - i don't think that snapping and numeric formatters are related. they are separate concepts and snapping must not be handled by lib-numeric-format.,-1,0,0,0.7843742370605469,0.584123969078064,0.9244179129600524,0.0,accept,majority_agreement
1148411568,4414,if you mean the changed tittle - consider it as bug fix :-),1,1,0,0.8336504101753235,0.9447979927062988,0.9924057126045228,1.0,accept,majority_agreement
1148415858,4414,good answer,1,1,1,0.9526222944259644,0.96990305185318,0.9828249216079712,1.0,accept,unanimous_agreement
1148416367,4414,i disagree — i think it is reasonable that some form of information about the unit could be part of the registry of formats and accessible to the visitor.,-1,0,0,0.5414449572563171,0.7525663375854492,0.9374779462814332,0.0,accept,majority_agreement
1148417744,4414,"so do i. formatting time to string is unrelated to snapping, they must not share libraries. what happens now is just a configuration migration. it is safe (that's it - a failure has no user visible implications), it is not used anywhere in calculations. it will not be used anywhere in calculations. if you are uncomfortable with it - the only fix is to remove it. i have very strong opinion about it. half of this pr is about breaking the ties between snapping and time display. under absolutely no condition snapping should rely on numeric format functions. what you see in this map is a simple way of converting the list of well known values from the old audacity versions to the new one. it does not introduce any kind of dependency between libraries.",0,0,0,0.5496089458465576,0.4399317502975464,0.7480403184890747,0.0,accept,unanimous_agreement
1148422279,4414,"ok there is agreement about something. i said “let it stand” and still think that. there are more important structural issues. but this change made me think that: some notion of “identifier of time unit” is needed these identifiers should not be a closed-ended list all in one place and each string literal should occur only once in the source the registry of formats includes one such identifier in each leaf, which a visitor can see, so that repetition of that registry’s key strings is not needed the registry of snap functions is keyed on the same these criteria are not met yet in the pr",0,0,0,0.8576425909996033,0.9005764126777649,0.9570149183273317,0.0,accept,unanimous_agreement
1148422948,4414,"maybe i’m arguing that this bit of logic needs to be elevated to a higher level library. maybe lib-snapping holds the registry of snap functions but snaputils, which finds and applies the functions, goes up to lib-time-frequency-selection.",0,0,0,0.9207817316055298,0.9798182249069214,0.9646447896957396,0.0,accept,unanimous_agreement
1148423600,4414,"maybe the correction of the setting object at startup time, migrating an old config, is the only thing to elevate to a higher library. then snapping and formats depend neither on the other?",0,0,0,0.9798831343650818,0.9885510802268982,0.9874799847602844,0.0,accept,unanimous_agreement
1148423844,4414,"why? what complex logic do you expect from ""finding"" snapping functions? unlike numericconvertertype it is not set anywhere explicitly in code.",0,0,0,0.9376733899116516,0.9041154384613036,0.982071578502655,0.0,accept,unanimous_agreement
1148429315,4414,i have pushed a commit trying to clarify the intention of the `readsnapto`. if you are not satisfied and still consider it to be dependency - i will remove that code. resetting snap value to second would be just a minor inconvenience for the users.,0,0,0,0.5576480627059937,0.7790707349777222,0.9897693395614624,0.0,accept,unanimous_agreement
1148560671,4414,"i approve. so no more `numericconverterconfig`? audacityproject is at a low level of the dependency tree and you can think of it as the context argument for many things that need per-project state, and of course attaching more stuff non-intrusively to the project is what `clientdata` is all about. all that was very much not true of the source code tree before 2019. the project depended on almost everything else becuase it had accessor functions defined in it to retrieve all those others. this was a major reason why hundreds of source files were in a big strongly connected component of the graph. inventing `clientdata` was a great exercise of the dependency inversion principle. i didn't know the solid jargon at the time actually but i was led to the principle by experience.",0,0,0,0.8559356927871704,0.833855926990509,0.8475492596626282,0.0,accept,unanimous_agreement
1150445931,4414,"i'm not convinced yet that there is no path that divides by `mfracpart` when it is zero. there is a test here, but you don't then reassign it as 1 or anything like that.",0,0,0,0.7962504029273987,0.7309184074401855,0.8423613905906677,0.0,accept,unanimous_agreement
1150450287,4414,"there is no integer division. there cannot be any exception. in any case, please do not continue the review now, specifically of this file.",0,0,0,0.9652458429336548,0.982355296611786,0.9896969199180604,0.0,accept,unanimous_agreement
1150473241,4414,"yes, `const auto fraclength = beatlength * mlowertimesignature / mfracpart;` is not an integer division because `mfracpart` is coerced to floating point. but that is irrelevant and my objection is still unanswered. i do not see a guard against division by `mfracpart` when it is zero.",0,0,0,0.870322585105896,0.9416041374206544,0.9814957976341248,0.0,accept,unanimous_agreement
1150475185,4414,it. is. safe. and again - do not review this file now.,0,0,0,0.9342589378356934,0.7965470552444458,0.7212252020835876,0.0,accept,unanimous_agreement
1150482811,4414,"the comment isn't right. ""/selectionformat"" is still used and still written but does not control snapping at all. what is right is to say, older versions of audacity did not have the ""/snap/to"" key. come to this function only when that key is undefined. i think `snaptosetting` should be static in this file, then, so that all reads of it must go through `readsnapto`. that implies a change in `onresetconfig` in pluginmenus.cpp",0,0,0,0.9725446701049804,0.9866945743560792,0.972545087337494,0.0,accept,unanimous_agreement
1150487379,4414,"this comment is right. `selectionformat` no longer controls snapping. this review already contains 300 comments, which were so far converted to around 30 action point, most of which were extremely minor. this is extremely frustrating and time consuming.",-1,-1,-1,0.9588450193405152,0.9711304306983948,0.9928158521652222,-1.0,accept,unanimous_agreement
1150495748,4414,"this change is good, and to make it even better, used `taggedidentifier`. `using numericconvertertype = taggedidentifier ` (the tag is an ""elaborated type"" that you don't need to define) this makes a type distinction between this and all other `taggedidentifier` specializations so they won't impliciatly interconvert. note, identifier.h contains several `taggedidentifier` specializations, but do not add to that list. i don't like that list and need to move those aliases elsewhere after fixing some still remaining legacy confusions about the right levels for certain declarations. (see also lib-components, a library with an unclear purpose.)",0,0,1,0.4371219575405121,0.4616311490535736,0.8261018395423889,0.0,accept,majority_agreement
1150504124,4414,"changing an enumeration to an identifier type opens the possibility of an open-ended scattering of the different types, yet, that does not yet happen at this commit",0,0,0,0.9837274551391602,0.9922450184822084,0.9899747967720032,0.0,accept,unanimous_agreement
1150543430,4414,"danger! define this as a static variable inside a function which returns a reference to that variable. otherwise, if the registered formats are later scattered to other files, then you may suffer from the problems of unspecified sequence of static inititalizations across translation units.",-1,-1,-1,0.5801145434379578,0.9378203749656676,0.9851256608963012,-1.0,accept,unanimous_agreement
1150570330,4414,the map is guaranteed to be initialized before the first use and only once. there is precisely zero need for lazy initialization here.,0,0,0,0.9852520227432252,0.9886188507080078,0.9921897053718568,0.0,accept,unanimous_agreement
1150575214,4414,"then once again, you went to the trouble to make a registry, without taking actual advantage of a registry, so what was the point?",0,0,0,0.881309986114502,0.584990382194519,0.729041576385498,0.0,accept,unanimous_agreement
1150608375,4414,"common, really? you've blocked this pr because you thought that having a format type as a string was not open ended enough. numericformatters are registered from different places now. i don't plan to move them to a different library because i don't want to create `lib-beats-formats` and i don't want the potential `lib-beats` to depend on `lib-numeric-formats`, because it would be a lower level library. what i agree is that implementing my own registry would've saved me days of time.",0,0,0,0.664291501045227,0.6400717496871948,0.6201406717300415,0.0,accept,unanimous_agreement
1150622269,4414,"suppose we wanted the well-known frequency and bandwidth formats to be kept separate from time formats, which might make some sense for better separation of concerns. then there would be some scattering of the cases of this new small registry, and then what i said about the static variable would be relevant. this need for a static defined within a function is such a frequency occurring pattern with registrations that i had to mention it.",0,0,0,0.98177170753479,0.9821032285690308,0.988679587841034,0.0,accept,unanimous_agreement
1150693108,4414,"consider this (please, not ""blocking!"") suggestion about what would seem to me a better organization. - `frequencyconverterformats_`, and what depends on it, `parsedfrequency`, move out of `parsednumericconverterformatter.cpp` into some new file. - then `numericconvertertype_frequency`, used by `parsedfrequency`, also moves its definition into that new file and its declaration into the corresponding header. that requires `frequencydefault` to move too. - now `numericconvertertype.*` don't mention frequency cases at all. - do similar for bandwidths: collect all that is special to bandwidth formats in one file. - even the time-specific formats and registrators might be separated from `parsednumericformatconverter`. then that file is responsible for defining and interpreting the little language, but is (almost) agnostic about special case details. (but there are still some legacy oddities about sample rates and ntsc frames.) - then `numericconvertertype.*` aren't needed. - dependency inversion and open endedness are really achieved: the special cases (time, frequency, bandwidth) depend on the general case, each special case concentrated into one source file. the open-endedness of the registration system is really used to advantage to get this. all that would seem the more natural organization of things to me, and when you first mentioned you were using registrations, i hoped that this was where it was tending.",0,0,0,0.96412855386734,0.9671888947486876,0.953013837337494,0.0,accept,unanimous_agreement
1150718191,4414,"so far the only instance of a new registrator object that is really scattered is `beatstime`. whether you make a new library for time signature or not, still i think it makes sense to concentrate all that is special-case to time signature into one or a few related files, not mixed up with others. so i think `beats` and `triplets` should move out of snaputils.cpp and join `beatstime` in one file. this does not make format conversion dependent on snapping, or the opposite. the general purpose files for those two things are kept separate. but there would be one higher level place that pushes related things for time signature into each of those registries.",0,0,0,0.9677868485450744,0.9866082668304444,0.9692073464393616,0.0,accept,unanimous_agreement
1150730408,4414,"correct, selection format did control snapping too. anyway i understand the explanation that emphasizes that this is only for migration.",0,0,0,0.979970932006836,0.9780271053314208,0.9850730299949646,0.0,accept,unanimous_agreement
1150735501,4414,"registries let us ""scatter"" special cases away from certain closed-ended central listings so that instead we ""gather"" in one place the things that implement a new feature, such as time signature, or spectral selection. the new feature can be non-intrusive in the general case code, which is ""open for extension but closed to modification.""",0,0,0,0.9881874918937684,0.9927022457122804,0.9897549748420716,0.0,accept,unanimous_agreement
1150759857,4414,absolutely not. there is absolutely no difference to open-endedness in where those initializations reside. they are in the same file for the sake of reducing the number of changes so your own rule is followed.,0,0,0,0.9488165974617004,0.9801458716392516,0.9671497344970704,0.0,accept,unanimous_agreement
1150794125,4414,"this will make the `numericconverter` to be an absolute nightmare to use. it does expect a fixed type by design, there is no audacity-user choice in that. making it an identifier made things bad. your ide no longer can help you. your compiler no longer can help you. scattering the possible values across the files will leave the developer without any clue about how to use `numericconverter` or `numerictextctrl`. enum are not always bad. not everything need to be extensible. speaking of software design - `numerictextctrl` should not be a subclass of `numericconverter`. they are unrelated types. considering that you chose not to make methods like controlstovalues to be virtual - they cannot be even interchanged safely.",-1,-1,-1,0.963802456855774,0.927059769630432,0.9715964198112488,-1.0,accept,unanimous_agreement
1150872628,4414,"no disagreement on that -- and that it still is doesn't reflect any particular wish of mine. i think you will discover that james separated the classes first, very long ago.",0,0,0,0.9532764554023744,0.9590847492218018,0.9590948224067688,0.0,accept,unanimous_agreement
1151666171,4414,"edge case. on repeat review, i realized the subscriptions are incomplete. snapping may also be influenced by rate, and might need to change with project rate change, if you are so closely zoomed in, you can resolve samples. yes, unlikely. but then i also thought: there might be just one subscription here to projectsnap. project snap could listen to changes of rate and time signature (and whatever else might be snapped to in future) and translate it into a single message for change of parameters relevant to snap.",0,0,0,0.9541866779327391,0.9662816524505616,0.9351280331611632,0.0,accept,unanimous_agreement
1151670105,4414,"two statements on one long line, the second, a no-op",0,0,0,0.979243814945221,0.9832081198692322,0.9818971753120422,0.0,accept,unanimous_agreement
1151672837,4414,wait for the commit i will push in couple hours! or probably not xd,0,1,1,0.7677390575408936,0.6689971685409546,0.9718708395957948,1.0,accept,majority_agreement
1151674560,4414,"nah, i think it won't be really changed by the next commit.",0,0,0,0.837186872959137,0.9444941878318788,0.9725030660629272,0.0,accept,unanimous_agreement
1151746641,4414,can this be a `const` member?,0,0,0,0.9879029393196106,0.9932847023010254,0.995088279247284,0.0,accept,unanimous_agreement
1151751703,4414,a minor point. these two are not made mutually exclusive and custom will quietly override the symbol in case someone give both. but who cares.,0,0,0,0.5858773589134216,0.8151407837867737,0.695589005947113,0.0,accept,unanimous_agreement
1151775879,4414,"timetoolbar and selectionbar listen for changes and then inform their numerictextctrls. this feels unsatisfactory -- the controls should do their own subscriptions. but getting audacityproject& into the constructors of all numerictextctrl everywhere is too bothersome. i believe these toolbars (and the spectral selection bar, never mind it) are the only non-modal text controls. there are others in timedialog and the label editing dialog and effects that are modal. edge case (i haven't tried it yet): new project. set time signature, and make beat the preferred format. another new project. set a different time signature. switch back to first project. open a modal numerictextctrl. which time signature is used? if it's the wrong one, it's because the numerictextctrl (and numericconverter) are not correctly initialized for the project's time signature but instead use the last values saved in preferences. please just note this, don't try to fix it!",-1,-1,-1,0.9767264127731324,0.6945163607597351,0.9398719668388368,-1.0,accept,unanimous_agreement
1151777286,4414,"yeah, just wait me to press push xd",0,0,0,0.979152500629425,0.92359858751297,0.9885681867599488,0.0,accept,unanimous_agreement
1151781861,4414,"i noticed today (it escaped me in an earlier round of review) that the earlier change in deviceprefs changed project rate immediately in the event handler and ignored dialog cancellation, but this now delays the side effect on the project until the ok button. i think that's better, and consistent with how preferences are changed. but is there any debate?",0,0,0,0.9567635655403136,0.9520323276519777,0.6584080457687378,0.0,accept,unanimous_agreement
1151785294,4414,why there would be any debate?,0,0,0,0.8749801516532898,0.8729159832000732,0.9631208181381226,0.0,accept,unanimous_agreement
1151786008,4414,there are many rough-edges with having multiple projects open - this is just the latest one.,0,0,0,0.9762396812438964,0.9690884351730348,0.9749374985694884,0.0,accept,unanimous_agreement
1151786426,4414,oh damn it's outdated now,-1,-1,-1,0.9868776202201844,0.98275488615036,0.9940504431724548,-1.0,accept,unanimous_agreement
1151788255,4414,"this is a problem with commit by commit review, yes. especially when every commit does a step by step transformation. i hope you understand my concerns about matryoshka prs now.",-1,0,-1,0.7159962058067322,0.8956612944602966,0.7969846129417419,-1.0,accept,majority_agreement
1151789756,4414,is this refactoring written or just contemplated?,0,0,0,0.9845481514930724,0.983975112438202,0.9842979311943054,0.0,accept,unanimous_agreement
1151790590,4414,does it matter for this review?,0,0,0,0.965234637260437,0.9914674758911132,0.9863808751106262,0.0,accept,unanimous_agreement
1151818975,4414,will i see a commit doing that today?,0,0,0,0.9775230288505554,0.9888420104980468,0.9907015562057496,0.0,accept,unanimous_agreement
1151819721,4414,"i don't know, there might be another opinion about ui guidelines",0,0,0,0.9508324265480042,0.5500117540359497,0.8942561149597168,0.0,accept,unanimous_agreement
1151819964,4414,it is literally the next commit on the branch,0,0,0,0.9837786555290222,0.9890881776809692,0.9937293529510498,0.0,accept,unanimous_agreement
1152167972,4414,"i notice that the behavior of the false branch changed, and documentation doesn't explain it, but then too, it is never reached anyway because the second argument is always true.",0,0,0,0.9732685089111328,0.9482612013816832,0.9850186705589294,0.0,accept,unanimous_agreement
1152188698,4414,"thanks for this assertion which explains that crash you saw. i wanted to know how to reproduce this. so, it was in resetting the configuration. i reproduced the assertion failure at the commit before this one. then i rebased my long waiting registry-changes draft pr branch onto it and tried again, and confirmed that the problem is fixed. sorry for the pain that the withholding of that fixed caused. let's get that branch self-reviewed, and reviewed, and merge early in 3.4 so the registry system is more reliable.",-1,-1,-1,0.9557461738586426,0.9772241115570068,0.9822008609771729,-1.0,accept,unanimous_agreement
1152190027,4414,is the change from 12 to 11 at 50d15a573ca3fc478b09ef94a9009b22c099cd76 intended?,0,0,0,0.9864563941955566,0.9930562376976012,0.9943254590034484,0.0,accept,unanimous_agreement
1152214827,4414,"yep, bug in numericfield is fixed. in some of the next commits this will be further improved",0,0,0,0.9835249185562134,0.9706225395202636,0.9392003417015076,0.0,accept,unanimous_agreement
1152261300,4414,`std::move`?,0,0,0,0.9854684472084044,0.994243323802948,0.9936856627464294,0.0,accept,unanimous_agreement
1152273902,4414,"might as well do this for the spectral selection bar too, though in fact sample rate is never used when formatting frequencies or bandwidths.",0,0,0,0.987789750099182,0.992156147956848,0.9919884204864502,0.0,accept,unanimous_agreement
1152284780,4414,"timedialog is constructed only in the function `onsetregion` where audacityproject& is available, so it could easily have more complete context",0,0,0,0.9860374331474304,0.9936309456825256,0.9933187961578368,0.0,accept,unanimous_agreement
1152288450,4414,"`tagseditordialog` is constructed only in `showeditdialog` and all calls to that have `audacityproject&` near at hand, so likewise, they can have fuller context",0,0,0,0.9843186736106871,0.9906760454177856,0.9929108023643494,0.0,accept,unanimous_agreement
1152291368,4414,"timerrecorddialog already has a project reference in it, so more context",0,0,0,0.9858511090278624,0.9904637336730956,0.9912846088409424,0.0,accept,unanimous_agreement
1152295299,4414,"you could sneak audacityproject& in here too, with a change to the factory function at the bottom of the file -- but only when it is given non-null. oh well, at least one use of `emptycontext()' is necessary then.",0,0,0,0.9805245399475098,0.9849026799201964,0.990994393825531,0.0,accept,unanimous_agreement
1152298374,4414,timerrecorddialog uses custom format strings and doesn't use rate at all.,0,0,0,0.987101912498474,0.9825510382652284,0.9888972640037536,0.0,accept,unanimous_agreement
1152304461,4414,"are these necessary before a project can be created? it is not obvious why so, but i am guessing the construction of the things hooked onto `clientdata::site` by the libraries that lib-numeric-formats uses, made it necessary. those include lib-project-rate now.",0,0,0,0.9866781234741212,0.990689754486084,0.992496132850647,0.0,accept,unanimous_agreement
1152306027,4414,projectrate has a very complex initialization.,0,-1,0,0.921452522277832,0.6878960728645325,0.7197957038879395,0.0,accept,majority_agreement
1152309562,4414,"that's right, and `qualitysettings::defaultsamplerate` unusually uses a computed default value, using `audioiobase` if it were just the constant 44100.0, i wonder if the test could simplify",0,0,0,0.9636368155479432,0.9865801930427552,0.9909867644309998,0.0,accept,unanimous_agreement
1152309940,4414,"mockedaudio can be omitted if two assertions are removed from the audioio. it is not possible to omit mockedprefs, because projectrate flushes unconditionally. it seems that some of this class are hanging on ci for some reason. i'm trying to figure that out, it is not reproducible locally or in the windows sandbox.",0,0,0,0.953680157661438,0.8653307557106018,0.9815393090248108,0.0,accept,unanimous_agreement
1152330345,4414,"it returns bool now, and not all false returns are ultimately checked (via updateformatter or setcustomformat), but maybe it doesn't matter. what mattered was to verify sufficient null checks of `mformatter` (yes)",0,0,0,0.982781708240509,0.993825912475586,0.9841944575309752,0.0,accept,unanimous_agreement
1152342762,4414,"after deleting these lines, these preferences used only to initialize a new project or to show the values in the preference dialog. there are written not only by the dialog, but also in projecttimesignature whenever a project's time signature is changed. is that the right behavior? it is not like how projectrate behaves, so it seems inconsistent.",0,0,0,0.9485023617744446,0.8468210697174072,0.9708622694015504,0.0,accept,unanimous_agreement
1152362810,4414,"this commit was a tremendous effort. i'm still not done reviewing it. i thought the idea of it was one we would abandon as just too hard. did you have the insights to make it happen only yesterday? thanks for doing it. i assume you are thinking that elimination of these uses of `sampleratecontext` from src/effects, in favor of `projectcontext`, would be a good thing, but i hope you are not now attempting it and will be satisfied to leave this as a known issue to fix in future. as you know i have pending draft prs for `effectcontext`, to make the effect objects even more stateless. i moved the project rate into context, and when i rebase that work onto this, i will try to put formatter context into effect context too.",1,1,1,0.9041917324066162,0.9043549299240112,0.9883272051811218,1.0,accept,unanimous_agreement
1152372288,4414,"i'm not sure what dialog you are talking about. i do agree that what is done is not quite ideal. do we need this setting at all? do we want to have preferences for the default values? i don't really know, but i don't think it matters a lot now. reusing the last project rate for new projects is as good approach as the other ones.",0,-1,0,0.567082941532135,0.7489334940910339,0.8040363192558289,0.0,accept,majority_agreement
1152380439,4414,"aha, i was misled by these remaining, unnecessary lines in guiprefs.cpp, when i looked for all uses of the settings: [code block] so there is in fact no longer anything in the dialog then to make them available, unlike for the preferred project rate.",-1,0,0,0.8362917900085449,0.57649827003479,0.444933533668518,0.0,accept,majority_agreement
1152381754,4414,can also remove: [code block],0,0,0,0.9878439903259276,0.9933833479881288,0.9950130581855774,0.0,accept,unanimous_agreement
1152400089,4414,don't need that assignment,0,0,0,0.9757846593856812,0.8519359827041626,0.9933117628097534,0.0,accept,unanimous_agreement
1152406706,4414,"besides `mformat` these can be const, and that might help understanding",0,0,0,0.9771744608879088,0.9936546087265016,0.9930237531661988,0.0,accept,unanimous_agreement
1152418385,4414,unused function,0,0,0,0.9601799249649048,0.9496458172798156,0.9824621677398682,0.0,accept,unanimous_agreement
1152425106,4414,should it be deleted or should the defensive checks of tempo and time signature values be put back into `updateformat`?,0,0,0,0.9667508006095886,0.9957423806190492,0.9937092065811156,0.0,accept,unanimous_agreement
1152426222,4414,"the check is different now, considering that formatter listens to the changes of the projecttimesignature",0,0,0,0.9838935136795044,0.9902376532554626,0.992531716823578,0.0,accept,unanimous_agreement
1152426327,4414,i will remove it,0,0,0,0.9759747982025146,0.9837966561317444,0.9906105399131776,0.0,accept,unanimous_agreement
1152445495,4414,members might be const,0,0,0,0.9801486134529114,0.988038957118988,0.9863022565841676,0.0,accept,unanimous_agreement
1152455145,4414,should the condition be `hasfracpart`?,0,0,0,0.9877089262008668,0.99427729845047,0.9921138286590576,0.0,accept,unanimous_agreement
1152456077,4414,"great catch, thank you!",1,1,1,0.9919175505638124,0.9951401948928832,0.9965803027153016,1.0,accept,unanimous_agreement
1152470936,4414,"this function checks that the width allocated to the field is at least the minimum number of digits, and otherwise just sufficient to show the given, maximum, 1-based value. i would comment that.",0,0,0,0.98844575881958,0.990667164325714,0.9951947331428528,0.0,accept,unanimous_agreement
1152544292,4414,still needs update,0,0,0,0.9813061356544496,0.9731133580207824,0.983969748020172,0.0,accept,unanimous_agreement
1152545770,4414,i still agree it ought to be easier to write and it’s on me to improve registry.h so you can,0,1,0,0.6081193089485168,0.506548285484314,0.9209619760513306,0.0,accept,majority_agreement
1152546675,4414,it should look more like a menu definition — which uses things not all in registry.h. there are template patterns there that could become more general utilities.,0,0,0,0.9826410412788392,0.9891895055770874,0.9899809956550598,0.0,accept,unanimous_agreement
1152550986,4414,please do this,0,0,0,0.9702004194259644,0.9799822568893432,0.985742211341858,0.0,accept,unanimous_agreement
1152555991,4414,“functionidentifier”,0,0,0,0.9812263250350952,0.992586314678192,0.9945533275604248,0.0,accept,unanimous_agreement
1152560678,4414,please stay tuned for these improvements!,0,1,0,0.7898644208908081,0.5384833812713623,0.8330932259559631,0.0,accept,majority_agreement
1152561807,4414,i hope this comment proved to be a good stimulus,1,1,1,0.9422977566719056,0.9034401178359984,0.9821699261665344,1.0,accept,unanimous_agreement
1152562405,4414,the long comment all out the mini language might still be updated,0,0,0,0.98797869682312,0.9892961382865906,0.993213415145874,0.0,accept,unanimous_agreement
1152565165,4414,still...,0,0,0,0.6039600968360901,0.8798754811286926,0.8812305331230164,0.0,accept,unanimous_agreement
1152569736,4414,"still, wrong comment",-1,-1,-1,0.9675627946853638,0.7144813537597656,0.8323597311973572,-1.0,accept,unanimous_agreement
1152578738,4414,this suggestion stands,0,0,0,0.9809834361076356,0.9757431149482728,0.983160674571991,0.0,accept,unanimous_agreement
1152581286,4414,have you tried this edge case? the latest commit as of this comment may include fixes for that,0,0,0,0.9898352026939392,0.989279806613922,0.9946868419647216,0.0,accept,unanimous_agreement
1152582528,4414,"there was not, in fact, a refactoring of audioio, which i feared would add even more burden to this long review. not to imply that there are not still many virtuous refactorings to be done there some day.",-1,0,-1,0.7606235146522522,0.9406176805496216,0.589175283908844,-1.0,accept,majority_agreement
1152827812,4414,it’s only audioiobase of lib-audio-devices that is the actual dependency?,0,0,0,0.985850989818573,0.9898848533630372,0.9912994503974916,0.0,accept,unanimous_agreement
1153100185,4414,i think this is a missing feature of the setting classes. they should reset when the configuration resets. the need to manually reset preferences wrapped in setting violates open/closed - every time you add such preference you end up updating pluginmenus. ideally `cachingsettingbase` should listen to reset preferences events and call `invalidate`,0,0,0,0.9752448797225952,0.9820263981819152,0.9690629243850708,0.0,accept,unanimous_agreement
1153110975,4414,"i have formed a different opinion: i blame how shuttlegui presently handles settings objects. it bypasses them and directly uses gprefs->write() on the path. that happens in shuttleprefs.cpp. instead, in all places where the tie... functions are called with settings object, these should be rewritten always as named settings objects, cleaning up many preference paths that are not yet settings, and passed as non-const references. then, rewrite shuttlegui to use the interface of settings only; and then invalidate() will become unnecessary. the waiting work to do this cleanup is already in my other monster branch attempting a revised shuttlegui and would be the first stage of that ambitious project.",-1,-1,0,0.973568081855774,0.6729704737663269,0.5587496757507324,-1.0,accept,majority_agreement
1153118323,4414,"right, the huge commit did not touch projectselectionmanager. so the edge case could be fixed with one more subscription, to projectrate, there.",0,0,0,0.9831112623214722,0.9878084659576416,0.9924091100692748,0.0,accept,unanimous_agreement
1153122991,4414,"i don't think we are talking about the same thing. i am talking about `resetpreferences` not actually resetting any of the `cachingsettingbase`, i don't see how changing shuttlegui will help to solve this problem. for this reason `onresetconfig(const commandcontext &context)` growth every time new `cachingsettingbase` setting is created (if one cares about resetting of this value). btw this is an example, where everything is scattered between translation units, but open/closed is violated. on top of that, it creates inconsistent behavior: if specific `cachingsettingbase` is not manually added to `onresetconfig` there is a different state between gprefs and `cachingsettingbase`. if that setting is not modified, it will be reset on the next launch, so it won't be kept. at very list we need a global message that preferences were reset.",0,0,0,0.9086396098136902,0.5926769375801086,0.891563355922699,0.0,accept,unanimous_agreement
1153146471,4414,"i see it now, and agree. i think invalidate() should be made unnecessary. i did not remember this other necessary part of that work. generally, naked `gprefs` must be discouraged in new code and fixed in a big cleanup. open/closed, correctly done, allows things to scatter. i never claimed that conversely, if things are scattered, therefore open/closed is realized. in fact i never did claim settings objects in particular as an example of application of open/closed as i understand it. but i want them for the other reason that magic literals (here not numbers but string literals) should be avoided.",0,0,0,0.8554728031158447,0.8391302227973938,0.8597522377967834,0.0,accept,unanimous_agreement
1153149867,4414,what bugs can be demonstrated? in fact this should not be difficult to fix now. make every settings object an observer of a singleton publisher that fires after `gprefs->deleteall().`,0,0,0,0.981500506401062,0.9836958646774292,0.9873064756393432,0.0,accept,unanimous_agreement
1153156625,4414,"not difficult, but not for now. i expect extensive testing. 1. remove the line we are discussing 2. change the selection mode 3. reset the configs using menu 4. observe selection mode has not changed 5. relaunch audacity 6. observe selection mode changed to deafult. i expect that there are other similar problems, or problems with the stickiness which are not so easy to observe.",0,0,0,0.904856026172638,0.8852011561393738,0.9210574626922609,0.0,accept,unanimous_agreement
1153340810,4414,"""note""",0,0,0,0.949126958847046,0.9811121821403505,0.9911112189292908,0.0,accept,unanimous_agreement
1153350909,4414,"good, but there are still a few mistaken ""i18-hint"" comments in snaputils.cpp and updatenoticedialog.cpp",0,0,0,0.5429626107215881,0.7496713995933533,0.6394979953765869,0.0,accept,unanimous_agreement
1153353043,4414,"well, that is weird, grepping last time gave me no results. i have 6 now :-( will fix asap",-1,-1,-1,0.9904220104217528,0.9936512112617492,0.9967194199562072,-1.0,accept,unanimous_agreement
1153453479,4414,are we really making that string visible to the end user?,0,0,0,0.983066976070404,0.9891662001609802,0.9898543953895568,0.0,accept,unanimous_agreement
1153464466,4414,"you mean beta? yes, this is by design",0,0,0,0.9843375086784364,0.9801065921783448,0.9892007112503052,0.0,accept,unanimous_agreement
1153582365,4414,"you put this in the red library, not src/widgets. okay.",0,0,0,0.9811038970947266,0.9428923726081848,0.992380917072296,0.0,accept,unanimous_agreement
1153591319,4414,"i might have used a chain-calling options class for “named parameter idiom” for the valuetypes and the bool, so the call sites might be easier.",0,0,0,0.9875184893608092,0.992311418056488,0.9841004610061646,0.0,accept,unanimous_agreement
1153631387,4414,"hey, i want an initializer too! :crying_face:",-1,1,-1,0.9882936477661132,0.5200885534286499,0.9874611496925354,-1.0,accept,majority_agreement
1153632058,4414,spelling,0,0,0,0.9774957895278932,0.928835928440094,0.9833834767341614,0.0,accept,unanimous_agreement
1153633249,4414,spelling — and please don’t have an infarction,0,-1,0,0.9572212100028992,0.891506016254425,0.7577100396156311,0.0,accept,majority_agreement
1153640242,4414,static_cast?,0,0,0,0.9860401153564452,0.9886051416397096,0.9944572448730468,0.0,accept,unanimous_agreement
1153653455,4414,"trying to run it on mac, i got strange looking results for the lts — but my environment was not clean. i deleted audacity.cfg and tried again, and saw 4 not blank, and the down arrow of the combo looked more normal. but i see rounded corners and slightly different height mismatching the tempo and uts boxes which are square and positioned a bit higher.",-1,-1,0,0.7649485468864441,0.6633407473564148,0.8195641040802002,-1.0,accept,majority_agreement
1153674197,4414,"well, this is not a c-cast and this form is much shorter. i don't have any hard feelings either",-1,-1,0,0.8390847444534302,0.4051159024238586,0.6640459299087524,-1.0,accept,majority_agreement
1153674757,4414,it is initialized in constructor,0,0,0,0.9883843660354614,0.98820298910141,0.99558687210083,0.0,accept,unanimous_agreement
1153676625,4414,"i will check that, thank you. this constant inconsistency is a primary reason for the migration to a different ui toolkit",1,0,1,0.8201099634170532,0.6483191251754761,0.9467954635620116,1.0,accept,majority_agreement
1153689129,4414,have you seen valnum.h? our own adapted versions of these classes for reasons i don’t know.,0,0,0,0.9632277488708496,0.9655343890190125,0.9735027551651,0.0,accept,unanimous_agreement
1153693327,4414,i don’t understand this asymmetry between spin up and down,-1,-1,-1,0.6612571477890015,0.8456637263298035,0.811051607131958,-1.0,accept,unanimous_agreement
1153706325,4414,i see that now,0,0,0,0.97878897190094,0.9306086897850036,0.9697239995002748,0.0,accept,unanimous_agreement
1153722866,4414,looks to be a copy from the wx source tree. i am confused. the code comes from 2013 with a message [code block] i think they match wx validators exactly,-1,-1,-1,0.9226542115211488,0.8014723062515259,0.5685793161392212,-1.0,accept,unanimous_agreement
1153724570,4414,"i forgot to delete that line... it makes no harm, but it is not really needed anyway.",0,0,0,0.5642149448394775,0.5359991192817688,0.9372668862342834,0.0,accept,unanimous_agreement
1153735536,4414,fun fact - wxcomboctr and wxcombobox look disturbingly differently on macos.,-1,-1,-1,0.5614926815032959,0.8806496262550354,0.8686242699623108,-1.0,accept,unanimous_agreement
1153821587,4414,"i've tried to do wxcomboctrl, but it is not focusable in read-only mode. so i have just adjusted the height to make it look a tiny bit better on macos",0,0,0,0.9562940001487732,0.931353747844696,0.9624279737472534,0.0,accept,unanimous_agreement
1153862388,4414,was it at that point a future version of wxwidgets?,0,0,0,0.9812656044960022,0.9947814345359802,0.9915850162506104,0.0,accept,unanimous_agreement
774289430,2295,"i'm skipping review of the three module* files of course, assuming they are cut-and-pasted from third party code.",0,0,0,0.843155562877655,0.9878513216972352,0.9771182537078856,0.0,accept,unanimous_agreement
774301814,2295,unnecessary include,0,0,0,0.7829469442367554,0.9505435824394226,0.9794029593467712,0.0,accept,unanimous_agreement
774306264,2295,let's comment that this line is the (sole?) entry into platform-specific code in one of three conditionally compiled files.,0,0,0,0.9855772852897644,0.9915984869003296,0.992495059967041,0.0,accept,unanimous_agreement
774307778,2295,"""it reports errors that are a consequence of faulty logic within the program such as violating logical preconditions or class invariants and may be preventable."" [a link] maybe that doesn't really describe what happens here, maybe system_error is more like it, but this is not important. i see all of these standard exceptions do get caught. if there is need to propagate an error beyond this module, better that a subclass of audacityexception be used for that.",0,0,0,0.7106814384460449,0.975501537322998,0.9862041473388672,0.0,accept,unanimous_agreement
774308803,2295,spelling,0,0,0,0.9774957895278932,0.928835928440094,0.9833834767341614,0.0,accept,unanimous_agreement
774495020,2295,the same block of code except for the string literal. i would make a lambda to avoid the duplication.,0,0,0,0.987251043319702,0.9888063669204712,0.9916083216667176,0.0,accept,unanimous_agreement
774501770,2295,"there is an include dependency cycle between vst3effect.h and vst3effectsmodule.h. a cycle of just two files doesn't concern me much, but it would be nice to figure out the extra effort to break the cycle. i think the module depends one-way on the effect, becuase it must be a factory of effects.",0,0,0,0.9522677063941956,0.9433154463768004,0.9766305685043336,0.0,accept,unanimous_agreement
780837786,2295,should there be a destructor too that uses the funknown_dtor macro for some debug checking?,0,0,0,0.9876666069030762,0.9947604537010192,0.9932843446731568,0.0,accept,unanimous_agreement
780841541,2295,i am pleased to see that the new files in internal/ have no dependency cycles. i can study them in a bottom-up order to understand them. please write a little more commentary about the purposes of the classes.,1,1,1,0.9357848167419434,0.918236255645752,0.8394372463226318,1.0,accept,unanimous_agreement
780841713,2295,start the comment with `//!` and doxygen will extract it as the brief description of the class that follows. you can write a long comment for detail after the brief comment if you enclose it in [code block],0,0,0,0.9844843745231628,0.9893235564231871,0.9941178560256958,0.0,accept,unanimous_agreement
780842530,2295,this function never assigns `index`. but does the caller expect that you do?,0,0,0,0.98288756608963,0.9917175769805908,0.9935359954833984,0.0,accept,unanimous_agreement
780843534,2295,"the deleter in the .cpp file is always the same lambda, with an empty capture, so you could declare a zero-sized deleter class here with an `operator ()`, and define it in the .cpp file, and make this unique_ptr just one pointer wide.",0,0,0,0.988121509552002,0.994728147983551,0.9942143559455872,0.0,accept,unanimous_agreement
780843938,2295,i think there is an incomplete clause in that comment,0,0,0,0.9683905839920044,0.970747172832489,0.979604721069336,0.0,accept,unanimous_agreement
780844294,2295,this return path does not assign `index`. is that ok?,0,0,0,0.9845884442329408,0.982501745223999,0.9954623579978944,0.0,accept,unanimous_agreement
780844525,2295,incorrect ``,0,0,-1,0.8985698819160461,0.4973298609256744,0.844312846660614,0.0,accept,majority_agreement
780844708,2295,"you mean ""in real life"" ?",0,0,0,0.9775700569152832,0.9190490245819092,0.9866097569465636,0.0,accept,unanimous_agreement
780845810,2295,"""try to grab""",0,0,0,0.8695045113563538,0.9885733127593994,0.9722895622253418,0.0,accept,unanimous_agreement
780854633,2295,"i think i missed some interesting discussions during my week off. what's the proof of correctness of this algorithm? 1. tthere are two `parameterchanges` objects, and at all times each is held in exactly one of five places (editor, processor, first, second, or pending) and each place holds at most one. 2. only the editor thread ever makes pending non-null. 3. only the editor thread ever makes second null. every exchange satisfies those conditions; from that you can deduce that editor never fails to lock one of the objects. do i reason right? is this reasoning worth commenting?",0,0,1,0.8226154446601868,0.8868260383605957,0.8506927490234375,0.0,accept,majority_agreement
780856074,2295,"is it worth the trouble to write `auto cleanup = finally([&]{ handler->endedit(id) })` after the ""begin"" call?",0,0,0,0.9642890691757202,0.993882656097412,0.9855238795280457,0.0,accept,unanimous_agreement
780856959,2295,there are four cases above for controls. do you try examples of vst3 plug-ins that exercise all four of these paths?,0,0,0,0.9853583574295044,0.9903697371482848,0.9939823746681212,0.0,accept,unanimous_agreement
781136120,2295,"see also the class messagebuffer in playbackschedule.h where i solved the same problem in a lock-free, but not wait-free algorithm, yet very probably looping only very rarely, and using only two slots. which of these solutions is better? i think there is a utility to be extract from it into one of the lower libraries. which are the threads that communicate? in the cases of my messagebuffer, it's the main thread sending messages to a worker thread -- the one which must maintain high throughput but can tolerate variation in latency, not the one that executes as the callback for the portaudio library. changes of looping play bounds are the sort of changes done there. in your case, i presume this is also about adjustment of sliders detected by the main thread. it is the low-latency thread that is receiving the messages. however, i believe that is a wrong implementation (an old error and nothing wrong with this pr). see issue #2082. things should be restructured so the receiver thread for your messages is the same as those using messagebuffer.",0,0,0,0.9769142270088196,0.9770680665969848,0.9855604767799376,0.0,accept,unanimous_agreement
781571869,2295,"the build is broken if not on windows. that must be fixed of course. one if the fixes is simply to omit ""/msw"" in that path. there are other fixes to do in vst3utils.cpp",0,0,0,0.9892578721046448,0.9780768156051636,0.980248749256134,0.0,accept,unanimous_agreement
781576529,2295,"i see shared_ptr, also many iptr because you must use them with vst3 objects, and those are shared pointers. but in fact only mmodule, meffectclassinfo, and msetup are shared among copies of the object (which must be made for master-slave connections), which isn't obvious unless you read the copy constructor. make it more obvious here in the header with comments, and perhaps rearrange the sequence so the really shared members are separate from the really unique ones.",0,0,0,0.9860095977783204,0.9904053807258606,0.9932945370674132,0.0,accept,unanimous_agreement
781615139,2295,"i see how three of these values are ultimate communicated to the vst3 library in vst3processblock, but i don't see where the sample rate is given to it. is that an omission? have you tested with non-default sample playback rate? (change it in the drop-down at bottom left) if you have an effect like an equalizer, but vst3 is misinterpeting the sample rate, then you might hear wrong results at non-default sample rate choices.",0,0,0,0.9798362255096436,0.9430838227272034,0.9889750480651855,0.0,accept,unanimous_agreement
781621506,2295,"this needs a catch block to stop std::exceptions, as is done in the two other places that may construct vst3effect",0,0,0,0.9420048594474792,0.9901610612869264,0.993941843509674,0.0,accept,unanimous_agreement
781623698,2295,"need null check on meditcontroller, as elsewhere",0,0,0,0.9809020757675172,0.9893913269042968,0.9938929080963136,0.0,accept,unanimous_agreement
781624051,2295,need null check,0,0,0,0.9752060174942015,0.980413854122162,0.9933799505233764,0.0,accept,unanimous_agreement
781625140,2295,"this isn't null checked, but i think you guarantee the invariant that it is not null, if meditcontroller is not null",0,0,0,0.9862627983093262,0.98671954870224,0.9902364611625672,0.0,accept,unanimous_agreement
781625559,2295,null check?,0,0,0,0.9645925164222716,0.9825400710105896,0.9947369694709778,0.0,accept,unanimous_agreement
781628571,2295,"please add comments about which of the above are invariantly non-null, after construction. i think that includes meffectcomponent, not mcomponenthandler; and mpendingchanges is sure to be non-null provided that mcomponenthandler is not null.",0,0,0,0.9872753620147704,0.992432713508606,0.9938058853149414,0.0,accept,unanimous_agreement
781635738,2295,use `reinterpret_cast` consistently here,0,0,0,0.9875168204307556,0.9936360120773317,0.993656575679779,0.0,accept,unanimous_agreement
781636698,2295,and perhaps make a little inline function to do this query. it happens in seven places.,0,0,0,0.986928403377533,0.9914990067481996,0.9933170080184937,0.0,accept,unanimous_agreement
781647075,2295,"this writes a number as the key into commandparameters. but parameterinfo also has short and long titles. maybe the title should be written, or (if that is not certain to be unique among parameters) a concatenation of a title and the id. if you use a vst3 effect in a macro and edit the settings, that key is stored in the macro text file, and will be visible to anyone who tries to read it. maybe an advanced user might try to edit the text of a macro file directly, and mnemonic names for the parameters, instead of simple numbers, would be helpful. of course setautomationparameters must be correspondingly changed too.",0,0,0,0.974357843399048,0.990476131439209,0.9883527159690856,0.0,accept,unanimous_agreement
781648083,2295,"beginedit/endedit pair again. maybe make a little ""parameditscope"" utility object to do them in ctor and dtor.",0,0,0,0.9881235957145692,0.9901527762413024,0.9888752698898317,0.0,accept,unanimous_agreement
781653725,2295,"are these two just ""dummies"" that you will never do, or should the comments say todo? i think you will need to do them in future, to complete the analogy with vst2 handling, and allow the user to save settings. but we aren't near that stage of testing yet.",0,0,0,0.8501901626586914,0.9878161549568176,0.9851486682891846,0.0,accept,unanimous_agreement
781657832,2295,"is this also unfinished work? i looked a little bit into vst headers and i think a ""factory preset"" is in their jargon a ""program"" (so it was in vst2) and the relevant interface for getting the information is iunitinfo in ivstunits.h.",0,0,0,0.9846594333648682,0.9904020428657532,0.992738664150238,0.0,accept,unanimous_agreement
781679000,2295,should this `performedit`be bracketed with `beginedit` and `endedit` (outside the loop)?,0,0,0,0.9877246022224426,0.995133101940155,0.9932292699813844,0.0,accept,unanimous_agreement
781679158,2295,should this `performedit`be bracketed too?,0,0,0,0.985905647277832,0.9934988021850586,0.9941646456718444,0.0,accept,unanimous_agreement
781679982,2295,this function isn't a dummy,0,0,0,0.9836412668228148,0.7274407744407654,0.9860052466392516,0.0,accept,unanimous_agreement
781681372,2295,"why does getlatency() take a maximum over the group of processors but this function does not? the gettailsize() function isn't yet used, and there are some old comments from leland about that, but i'm not sure what they should be used for, unless maybe they matter in generation of sounds.",0,0,0,0.8908979892730713,0.9439756274223328,0.9690039157867432,0.0,accept,unanimous_agreement
781684573,2295,this function might be called in a worker thread. maybe it should not log messages.,0,0,0,0.980274736881256,0.9542086124420166,0.988996148109436,0.0,accept,unanimous_agreement
781685312,2295,maybe blocklen should be cast from an unsigned to a signed type before you take a minimum. could the other argument to min be a negative that indicates an invalid value?,0,0,0,0.9860923886299132,0.9932244420051576,0.9887993931770324,0.0,accept,unanimous_agreement
781688902,2295,"for the vst2 effect, processinitialize is called. for vst3, you only `syncparameters` but don't do the other side effects. is it correct?",0,0,0,0.9880394339561462,0.9939656853675842,0.9950069189071656,0.0,accept,unanimous_agreement
781690870,2295,"i see suspend and resume only call `setprocessing` for slaves, not for `this`. that is not like vst 2. however maybe vst 2 did that unnecessarily, because it was only for the unnecessary calculations that i removed at commit 81951abe5dbc3c263bc5e4d40ccb3e685bfa0170. is this what you were thinking? then maybe my commit was not complete, in its removal of unnecessary things.",0,0,0,0.7692705392837524,0.899970531463623,0.9867817759513856,0.0,accept,unanimous_agreement
781692193,2295,do not ignore the `forcemodal` argument. show modally or non- as in the other overrides.,0,0,0,0.9739538431167604,0.9819899797439576,0.9914917349815368,0.0,accept,unanimous_agreement
781694777,2295,is this todo? other overrides re-load last used settings from saved preferences. this function is called the first time the effect is used again in a session.,0,0,0,0.9886991381645204,0.9890379905700684,0.9957159161567688,0.0,accept,unanimous_agreement
781696148,2295,"this should return false when the plain dialog was last used in populateui, to be like the vst 2 implementation",0,0,0,0.9872201681137084,0.9917505383491516,0.9939269423484802,0.0,accept,unanimous_agreement
781699191,2295,i presume the four functions above are todo,0,0,0,0.9813271164894104,0.9812535643577576,0.9908329844474792,0.0,accept,unanimous_agreement
782203556,2295,"yep, accidentally was added multiple times by the ide, and i overlooked that, thanks!",1,1,1,0.9564241766929626,0.9250078797340392,0.9672182202339172,1.0,accept,unanimous_agreement
782228580,2295,"the only reason why vst3effectsmodule is needed here is that vst3effect duplicates itself when the effect requests to add a new realtime processor, no details about vst3effectmodule itself actually are needed here, so to make everything clearer i'll extract vst host access function from vst3effectsmodule to some other place",0,0,0,0.98057758808136,0.9906140565872192,0.9921906590461732,0.0,accept,unanimous_agreement
782229511,2295,won't harm,0,0,0,0.8895274996757507,0.697600245475769,0.9556841850280762,0.0,accept,unanimous_agreement
782249781,2295,"our implementation does not use it. vst documentation is not very wordy about the use of this parameter, and there are no examples of how this parameter is used in the sdk samples as well. moreover, it's not stated that the index should be persistent, but plugins can access our implementation through `iparametervaluequeue ` interface. so yes, it would be safer to assign a value to it. thanks for spotting this",1,0,1,0.9700040817260742,0.5857115983963013,0.9223819375038148,1.0,accept,majority_agreement
782255977,2295,good point,1,1,1,0.9578153491020204,0.9655349254608154,0.9818260669708252,1.0,accept,unanimous_agreement
782948877,2295,"it should be ""though both getparameterdata and addparameterdata return pointers to shared objects"", but now i have doubts that such restriction is correct since vst plugins are allowed to access those objects as well",0,0,0,0.9290027022361756,0.9817787408828736,0.9727243185043336,0.0,accept,unanimous_agreement
783005202,2295,"1 - yes, 2 - yes, 3 - yes, and first one as well. there are only two threads (at most): processing and ui/editor thread. there are only two buffers that are used to store changes, any of them is either: 1) stored in `mfirst` or `msecond` and considered to be empty, ui thread may move one of them to `mpendingchanges` 2) stored in `mpendingchanges`, only ui thread is allowed to store on of the buffers in that variable. 3) stored in unique pointer returned by `getpendingchanges`, and isn't accessible from ui thread until buffer is returned to `mfirst` or `msecond` by processing thread ui thread will try to lock the buffer in `mpendingchanges` first, if it locked one in `mfirst` or `msecond` instead it may happen so that `mpendingchanges` isn't yet read by processing thread and then the implementation may become a bit more complicated. at most one of the buffers is hold by processing thread, at least one of the buffer is available from ui thread (`mpendingchanges`, `mfirst` or `msecond`)",0,0,0,0.9603061079978944,0.9930592775344848,0.9829338192939758,0.0,accept,unanimous_agreement
783939505,2295,"i believe that `vst3effect::setsamplerate` and `vst3effect::setblocksize` are used to set up the effect. yes, i've tested effects with non-default sample rates.",0,0,0,0.9642399549484252,0.991665542125702,0.9916502237319946,0.0,accept,unanimous_agreement
784004437,2295,"well, probably neither of them doesn't make sense. especially gettailsize(). as i understand tail is used to process effects that produce more samples than they consume (like reverb or delay). and the problem is that different tracks may have different sample rates thus, different tail sizes. block size, however, is always the same for each track/processor.",0,0,0,0.9379829168319702,0.9864181876182556,0.9207809567451476,0.0,accept,unanimous_agreement
784005363,2295,"yes, thanks",1,1,1,0.8015396595001221,0.7530786395072937,0.8420318365097046,1.0,accept,unanimous_agreement
784021462,2295,"shouldn't be the case, `maxsamplesperblock` is always positive (see `vst3effect::setblocksize`) and is set before the processor is activated, and `blocklen` should be positive as well.",0,0,0,0.9872276782989502,0.9943591952323914,0.9901997447013856,0.0,accept,unanimous_agreement
784026313,2295,"i believe so, the `realtimeinitialize` is called before any call to `realtimeaddprocessor`, so we cannot configure them here (but they are initialized in `realtimeaddprocessor` instead), and there is no need to set up the ""container"" effect since it's not used for realtime processing.",0,0,0,0.9812084436416626,0.9947157502174376,0.990124523639679,0.0,accept,unanimous_agreement
784031524,2295,"maybe vst2 implementation does not need to initialize the ""master effect"" too, there is no need to do so in the vst3 implementation since all the processing is done by ""processor effect"" instances, in the case of realtime processing master effect simply holds initial parameters with which other instances would be initialized",0,0,0,0.9848083257675172,0.9945504069328308,0.989787220954895,0.0,accept,unanimous_agreement
784743631,2295,yep,0,0,0,0.9712458848953248,0.8459084630012512,0.7848060131072998,0.0,accept,unanimous_agreement
785984806,2295,"it's unfinished, yes, but i don't think that ""program"" is a synonym for ""factory preset"", as it does not contain a set of parameter values, but rather enables or disables processing units",0,0,0,0.9656406044960022,0.9663158059120178,0.9784714579582214,0.0,accept,unanimous_agreement
792489681,2295,don't need `pluginsettings::`,-1,0,0,0.7962732315063477,0.9890138506889344,0.994192898273468,0.0,accept,majority_agreement
792495541,2295,`static_cast` would be modern,0,0,0,0.9871817827224731,0.9923765063285828,0.9943678975105286,0.0,accept,unanimous_agreement
792496956,2295,`static_cast` again,0,0,0,0.9876828789711,0.988010585308075,0.9950266480445862,0.0,accept,unanimous_agreement
792500253,2295,and `size_t`,0,0,0,0.9838130474090576,0.992163896560669,0.9948311448097228,0.0,accept,unanimous_agreement
792509916,2295,`size_t`,0,0,0,0.982771933078766,0.9875985980033876,0.9915273785591124,0.0,accept,unanimous_agreement
792510092,2295,`size_t`,0,0,0,0.982771933078766,0.9875985980033876,0.9915273785591124,0.0,accept,unanimous_agreement
792519190,2295,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
794419146,2295,"""conditionally""",0,0,0,0.985089898109436,0.9839491248130798,0.9701704382896424,0.0,accept,unanimous_agreement
794437458,2295,"this line was introduced in the commit ""some basic loading functionality"" and the source file is added to the build in the following commit ""vst3 sources added to cmakelists"" and the build fails because the include path should remove ""../../"" do an interactive rebase to fix the include path in the earlier commit. then each commit in the sequence will build.",0,0,0,0.9880549311637878,0.9935925602912904,0.9950852990150452,0.0,accept,unanimous_agreement
794505654,2295,i would prefere a reference return type to indicate that it is never null,0,0,0,0.9869344234466552,0.9840606451034546,0.9926825165748596,0.0,accept,unanimous_agreement
794529789,2295,"do not use unique_ptr to a wxwindow object. pointers to them are never supposed to be given to operator delete. instead just use `safenew`. whenever you make a wxwindow with a non-null parent, it is owned and will be correctly destroyed when the parent is destroyed. so, a naked new is the correct thing in this case.",0,0,0,0.9842292070388794,0.9933187961578368,0.9935516119003296,0.0,accept,unanimous_agreement
794530120,2295,"likewise, do not use `unique_ptr` here.",0,0,0,0.980855405330658,0.9915606379508972,0.992526650428772,0.0,accept,unanimous_agreement
794532075,2295,complete the analogy with `vsteffect::buildplain`. do not omit the `setname` call. david bailes will tell you it is important so that the screen reader pronounces the name.,0,0,0,0.982109546661377,0.9938700199127196,0.9912625551223756,0.0,accept,unanimous_agreement
794545551,2295,i would like this function better if it returned `iptr `,0,0,0,0.8839924931526184,0.9902114272117616,0.9035625457763672,0.0,accept,unanimous_agreement
794546556,2295,"returning a ""stupid"" pointer means i have to check all uses of the function to be convinced there is no leak",-1,-1,-1,0.9690614938735962,0.7524766325950623,0.7371313571929932,-1.0,accept,unanimous_agreement
794560097,2295,"i would prefer the string literals ""processorstate"" and ""controllerstate"" appearing in only one place each and given a name",0,0,0,0.9849857091903688,0.9898526072502136,0.9848707318305968,0.0,accept,unanimous_agreement
794563350,2295,is setting component state twice through two different interfaces necessary? (a eustion to answer from steinberg documentation),0,0,0,0.98748117685318,0.992796003818512,0.9935075044631958,0.0,accept,unanimous_agreement
794839927,2295,avoid new calls to `audacitymessagebox`. instead include `basicui.h` and use `basicui::messagebox`. leave fewer calls to rewrite later when we try to make this toolkit neutral.,0,0,0,0.974063754081726,0.9940699338912964,0.9874436259269714,0.0,accept,unanimous_agreement
794855352,2295,"a raw string literal would help the reader: `r""([\\*?/:<>|])""`",0,0,0,0.9831917881965636,0.9918240904808044,0.9943976402282716,0.0,accept,unanimous_agreement
794862540,2295,"unnecessary #include is still there. remember `vst3effect` does not inherit `effect`, strange but true",0,0,-1,0.8484766483306885,0.968255579471588,0.7845125198364258,0.0,accept,majority_agreement
794873064,2295,"""to shared objects""",0,0,0,0.9861745834350586,0.9936624765396118,0.9946367144584656,0.0,accept,unanimous_agreement
794873300,2295,"""because they are pointers to temporary objects""",0,0,0,0.982395350933075,0.9921185970306396,0.9910863041877748,0.0,accept,unanimous_agreement
794875681,2295,"""try to grab"" again",0,0,0,0.8528483510017395,0.967043936252594,0.983339786529541,0.0,accept,unanimous_agreement
794891948,2295,need two `reinterpret_cast`s for consistent style,0,0,0,0.9851092100143432,0.9881641864776612,0.9883777499198914,0.0,accept,unanimous_agreement
795050324,2295,"i see that this function is new since my last round of review but not used. (it was declared then, but not defined. now it is defined but never called.)",0,0,0,0.982970118522644,0.9871671795845032,0.989402174949646,0.0,accept,unanimous_agreement
795050543,2295,"why is `plugin_api` linkage visibility necessary? nothing needs to link to these functions. these are overrides, so the pointers to functions are discovered by the framework at runtime instead. that's the point of virtual function tables.",0,0,0,0.985891044139862,0.9944270849227904,0.9870834350585938,0.0,accept,unanimous_agreement
795052241,2295,is that last sentence still true? i think all of that has been fixed now.,0,0,0,0.9796644449234008,0.9868702292442322,0.9909012317657472,0.0,accept,unanimous_agreement
795052629,2295,"doxygen extracts the brief description but not the detailed description. keep this separation of brief and detailed, and rewrite the detailed inside [code block]",0,0,0,0.9882461428642272,0.9902358651161194,0.994027018547058,0.0,accept,unanimous_agreement
795054204,2295,more plugin_api we may not need,0,0,0,0.9878832697868348,0.9787465929985046,0.9928590059280396,0.0,accept,unanimous_agreement
795054350,2295,"this comment block does not separate brief and detailed descriptions. so all will appear only in the detailed description on the doxygen pages. this isn't wrong, but you might reconsider what would best help someone else using those pages.",0,0,0,0.9751617908477784,0.9611985087394714,0.9539657235145568,0.0,accept,unanimous_agreement
795055533,2295,more `plugin_api` to remove,0,0,0,0.9887827038764954,0.9905025959014891,0.995032787322998,0.0,accept,unanimous_agreement
795055786,2295,ещё раз,0,0,0,0.8890907168388367,0.9822563529014589,0.8391243815422058,0.0,accept,unanimous_agreement
795062072,2295,"i see you broke the dependency cycle between vst3effectsmodule and vst3effect. the module depends on effect, one-way. you removed things from vst3effectsmodule.h and defined them in vst3effect instead. that is good, but now i see a duplication of this string constant. could you make a static function in vst3effect.h and use it here? .",0,0,0,0.9433143734931946,0.9507678747177124,0.5367477536201477,0.0,accept,unanimous_agreement
795114188,2295,"i think the two fields above are non-null only when the object is not constructed by copy and should be in the section with `mplugview` etc., below.",0,0,0,0.9879699945449828,0.9928604960441588,0.9871838688850404,0.0,accept,unanimous_agreement
795114831,2295,"the non-copy constructor may leave meditcontroller null. it makes mcomponenthandler non-null only if meditcontroller is. these things should be stated here in comments. in my first round of review, i looked at uses of these two fields to see if null checks were sufficient. every use of meditcontroller should be preceded by a null check of it or of mcomponenthandler. that condition is satisfied everywhere. every use of mcomponenthandler needs a null check. i checked again and it looks good now.",1,1,0,0.8407056331634521,0.6788124442100525,0.5401725769042969,1.0,accept,majority_agreement
795115207,2295,"there are two calls to `buildplainui` here. they pass pointers to meditcontroller and mcomponenthandler. a look inside the function shows that it is assumed that the pointers are not null, but there is no comment to that effect. that condition is guaranteed here, so there is not a bug. still, i would prefer to say what i mean with types: make `buildplainui` take references instead of pointers to make clear that null is not allowed. then at the places where we call it, we have to dereference pointers. that would make me look for the proof that the pointers are not null, and i would get it from the suggested comments in the header about invariants.",0,0,0,0.9672819972038268,0.9624856114387512,0.9770456552505492,0.0,accept,unanimous_agreement
795116131,2295,"ah no you don't, if non-null mcomponenthandler implies non-null meditcontroller",0,0,0,0.9365512132644652,0.946491003036499,0.9835083484649658,0.0,accept,unanimous_agreement
795116406,2295,still needs resolution,0,0,0,0.96454918384552,0.9791039228439332,0.9783198237419128,0.0,accept,unanimous_agreement
795116821,2295,reassigning nulls in a destructor should be unnecessary,0,0,0,0.9660996198654176,0.9871906638145448,0.9913445711135864,0.0,accept,unanimous_agreement
795117196,2295,"which is correct, doing this call before or after endedit? it changed since my first round of review here, but is consistent with the other call to it now.",0,0,0,0.9878532886505128,0.9866053462028505,0.9924578666687012,0.0,accept,unanimous_agreement
795117447,2295,"this function is called in a worker thread. it's not good to call wxassert there. if the assertion is violated for any reason, the debug build will try to make a dialog from a non-main thread. maybe just a simple `assert` instead if you must express some assertion.",0,0,0,0.8795831203460693,0.96205073595047,0.9838669300079346,0.0,accept,unanimous_agreement
795117559,2295,"as i wrote in the first round of review, more should happen in this function, like reading last-used effect settings which were stored in preferences during the last session of audacity.",0,0,0,0.9867897629737854,0.9920529127120972,0.992389976978302,0.0,accept,unanimous_agreement
797794762,2295,"according to vst documentation, it's not prohibited to change parameter names. it's not difficult to append suffix if parameter has a title to a parameter key, like `0_vol`. then, to read it from a commandparameters we would need to extract id number and discard suffix.",0,0,0,0.987998366355896,0.9935628175735474,0.9919392466545104,0.0,accept,unanimous_agreement
797856375,2295,"not used as an index, but rather a loop iteration counter",0,0,0,0.9866238236427308,0.979814112186432,0.9901626110076904,0.0,accept,unanimous_agreement
797856586,2295,thanks,1,0,1,0.6094269156455994,0.5400217771530151,0.8643599152565002,1.0,accept,majority_agreement
797935247,2295,thank you,1,1,1,0.7400884628295898,0.6702879667282104,0.9420937299728394,1.0,accept,unanimous_agreement
797965177,2295,yes,0,0,0,0.9564858078956604,0.9659429788589478,0.9686408638954164,0.0,accept,unanimous_agreement
797968315,2295,this would be inconsistent with other use cases of pluginsettings then,0,0,0,0.977011740207672,0.9750725626945496,0.9902434945106506,0.0,accept,unanimous_agreement
797989759,2295,turned out there is a safer and shorter for to query interfaces via `funknownptr<>`,0,0,0,0.9840908646583556,0.9937193393707277,0.99123877286911,0.0,accept,unanimous_agreement
797992403,2295,"i'll remove it, we don't need it now, since we don't have automation support yet",0,0,0,0.9732004404067992,0.9785847067832948,0.9876530170440674,0.0,accept,unanimous_agreement
797995551,2295,"`plugin_api` expands to `__stdcall`, under windows platform it does not make difference when compiling for x64 or arm processors, but when compiling for x86 there would be an error.",0,0,0,0.9874524474143982,0.991475224494934,0.9929921627044678,0.0,accept,unanimous_agreement
797997661,2295,"this comment relates to the `componenthandler` class itself, not the client code which uses it.",0,0,0,0.9849336743354796,0.9919318556785583,0.9906368851661682,0.0,accept,unanimous_agreement
798007030,2295,"for that purpose it would be better to read `iparameterchanges` documentation, i cannot imagine anything helpful i could add that isn't a duplicate of what's written there",0,0,0,0.9780555367469788,0.9881842136383056,0.989395797252655,0.0,accept,unanimous_agreement
798029156,2295,"doesn't matter actually, because editcontroller should not notify componenthandler about parameter change when seyparamnormalized is invoked directly",0,0,0,0.9869430065155028,0.9811763167381288,0.9826120138168336,0.0,accept,unanimous_agreement
798029972,2295,"yep, thanks",1,1,1,0.913679838180542,0.8417004346847534,0.953986883163452,1.0,accept,unanimous_agreement
800606836,2295,"i see you have removed a check in ""programfiles(x86)"" that was in an earlier version of the pr. no mistake?",0,0,0,0.9851522445678712,0.96753191947937,0.9902684688568116,0.0,accept,unanimous_agreement
800616258,2295,"in this and other effects that must be noexcept, but call untrusted foreign code -- do similarly to what i did for the other effect families. wrap the body in [code block] it is not implemented yet, but i think we should detect errors turned into return codes, and disable the effects that raise them.",0,0,0,0.9839702248573304,0.98625385761261,0.9941658973693848,0.0,accept,unanimous_agreement
800664114,2295,"i see that since the last version of this branch, you moved activatebuses out of processinitialize into the constructor, and there is no longer a complementary de-activation. that seems wrong, like a kind of leak.",0,0,0,0.5824918150901794,0.8337283730506897,0.829439103603363,0.0,accept,unanimous_agreement
800687982,2295,"i suspect off-by-one mistakes in these lines. if the right coordinate of viewrect is non-exclusive, which is how it works with wxsize, then it is left + width - 1. similarly for top, height, and bottom.",0,0,0,0.9649228453636168,0.9499297142028807,0.8363494277000427,0.0,accept,unanimous_agreement
800689380,2295,"""its""",0,0,0,0.9595107436180116,0.8795079588890076,0.9842362403869628,0.0,accept,unanimous_agreement
800689710,2295,"""its""",0,0,0,0.9595107436180116,0.8795079588890076,0.9842362403869628,0.0,accept,unanimous_agreement
800690038,2295,"yes, there is no need to search x86 plugins in x64 bit audacity as they will not be loaded anyway",0,0,0,0.973860204219818,0.987673819065094,0.994355082511902,0.0,accept,unanimous_agreement
800698407,2295,"the commit ""generator effect duration control added"" doesn't compile. the commit ""user presets"" adds this include directive, which fixes it. it would be nice to do an interactive rebase and make all the commits compile.",0,0,0,0.970234215259552,0.9903883337974548,0.9881386160850524,0.0,accept,unanimous_agreement
800705937,2295,the viewrect's definitions of width and height: [code block] they aren't same as in wxrect,0,0,0,0.987491011619568,0.9947792291641236,0.9934005737304688,0.0,accept,unanimous_agreement
800719407,2295,"[code block] well, probably the funciton name is misleading here. some plugins may have `kdefaultactive` flag set which means that we need to activate the bus manually (this also means that some plugins do not requrire manual bus actiavtion at all), there is nothing said about bus deactivation. as i understand deactivation may be required when changes to bus arrangement are made (we don't support this feature yet, we always use default arrangement), so we don't need to make additional calls to `iaudioprocessor::activatebus` this `activatebuses` activates only that are flagged with `kdefaultactive` but i actually not 100% sure about this, the documentation is either incomplete on this topic, or i miss something. there are two places where bus activation is mentioned and mentions are made in a different context, though they do not contradict each other. especially if you take them literally i think. thank you for that question. anyway everything seems to work fine, considering restrictions on bus arrangements we do have now.",0,0,0,0.9790205359458924,0.9919300675392152,0.9901962280273438,0.0,accept,unanimous_agreement
800742245,2295,"i'm not sure that understand your question. the type of `runloop` variable is `iptr `. `owned` is a macro which grabs raw pointer and constructs iptr object without reference count increment. `runloop.get()` returns a raw pointer, but `runloop` constructor assigns it to the field of type iptr",0,0,0,0.9360263347625732,0.8341943025588989,0.9447181820869446,0.0,accept,unanimous_agreement
800837598,2295,"i misunderstood, i thought this was about dllexport linkage.",-1,0,0,0.690125584602356,0.5605180859565735,0.8200914263725281,0.0,accept,majority_agreement
800839781,2295,"should this and the following declarations have ""override""?",0,0,0,0.9838369488716124,0.9942387342453004,0.9920489192008972,0.0,accept,unanimous_agreement
800843144,2295,"`gpointer` is an alias for `void *` so `static_cast` is appropriate, and less surprising to read",0,0,0,0.9797146916389464,0.9912654757499696,0.9888572096824646,0.0,accept,unanimous_agreement
800844163,2295,what is `condition` for ? it is ignored,0,0,0,0.9794803857803344,0.9887611269950868,0.992234230041504,0.0,accept,unanimous_agreement
800846983,2295,"the map is keyed on the handler only, not the handler and file descriptor pair. is that all right? or is it possible to reassign `meventhandlers[handler]` ?",0,0,0,0.9884286522865297,0.9949493408203124,0.995681643486023,0.0,accept,unanimous_agreement
800851152,2295,"why a search loop in the hash map when instead you could write: `if (auto end = meventhandlers.end(), iter = meventhandlers.find(handler); it != end)`",0,0,0,0.9602669477462769,0.9893947243690492,0.9811317920684814,0.0,accept,unanimous_agreement
800853943,2295,"give `eventdata` a destructor that does those two steps (with a null check first), and a move constructor tha nulls the channel and id. then this would simplify just to erasing the iterator. it would also make it clearer that there is no leak of gtk resources when the runloop is destroyed.",0,0,0,0.9885361194610596,0.9918587803840636,0.993373155593872,0.0,accept,unanimous_agreement
800856852,2295,"i suggested that `eventdata` should be a smart raii handler with a destructor, and so too, the above two resource acquiring calls could be done inside its constructor so that there aren't any ""naked"" pointers.",0,0,0,0.9838392734527588,0.9927350282669068,0.9864946603775024,0.0,accept,unanimous_agreement
800862179,2295,"i suggested a constructor, move constructor, and destructor in this structure for simpler resource management",0,0,0,0.985030472278595,0.9819779992103576,0.9911766052246094,0.0,accept,unanimous_agreement
800863072,2295,similarly the data type of this map might be instead a structure that calls `g_source_remove` in its destructor,0,0,0,0.9867428541183472,0.9927856922149658,0.9928325414657592,0.0,accept,unanimous_agreement
800875588,2295,this function will return zero the second time it is called. that is strange. why?,-1,-1,-1,0.9515455961227416,0.9822805523872375,0.9267489314079284,-1.0,accept,unanimous_agreement
800882338,2295,"`size_t` would be a better type, unless you need -1 for invalid?",0,0,0,0.9874287247657776,0.9895319938659668,0.9899644255638124,0.0,accept,unanimous_agreement
800887933,2295,can the duplication be eliminated? can this file be shared with the old vst implementation?,0,0,0,0.9892519116401672,0.995211660861969,0.9936594367027284,0.0,accept,unanimous_agreement
800892403,2295,"the commit that introduces `funknownptr` can be squashed as a fixiup of ""plugin gui & processing fixes""",0,0,0,0.9874573349952698,0.9933937191963196,0.9950945377349854,0.0,accept,unanimous_agreement
800894291,2295,"the commit ""plain ui imporvements"" has a mis-spelling in the commit comment, and it doesn't build, because the line above is introduced only in the following commit. please fix that up.",0,0,0,0.9827143549919128,0.9031877517700196,0.9537705779075624,0.0,accept,unanimous_agreement
800914613,2295,"in fact, shouldn't the whole commit be squashed with ""plugin gui & processing fixes""? i say that commits in a new feature branch should not be too few and too big, but also should not leave a record of errors and corrections.",0,0,0,0.9768130779266356,0.9815338253974916,0.9871454238891602,0.0,accept,unanimous_agreement
800916987,2295,"`sethost` is now no longer empty, but it is still incomplete. see how the private configuration ""parameters"" is loaded and stored for the other effect families.",0,0,0,0.9889510273933412,0.994779109954834,0.995213270187378,0.0,accept,unanimous_agreement
800918064,2295,"""an""",0,0,0,0.9517802000045776,0.9536847472190856,0.9904956817626952,0.0,accept,unanimous_agreement
800926998,2295,"i think it is incorrect to restrict what you write into `parms` by this condition. there is some unfortunate confusion in terminology in audacity, where ""automation"" refers to macro programming itself, not automation curves of effects (which is what i think the steinberg api refers to). the intention for macros is that any kind of user control that the effect supports should be programmable by macros. and this is not only for macros. it is also for saving in the .cfg files as your default, preferred settings for the effect. if you exit audacity, then restart, then reopen the effect dialog (maybe to apply the effect destructively) -- then you should see all dials, pushbuttons, etc. as they were before.",0,0,0,0.8793944716453552,0.936123251914978,0.6557019948959351,0.0,accept,unanimous_agreement
800928479,2295,"see my other comment about ""parameters"" being restored in sethost. that is also part of the persistency of last user choices.",0,0,0,0.9877750873565674,0.9937548637390136,0.990898847579956,0.0,accept,unanimous_agreement
800935507,2295,"good. the difference between the toolkits is surely worth commenting, as a possible source of confusion.",1,1,1,0.921362042427063,0.8916779160499573,0.9428876042366028,1.0,accept,unanimous_agreement
802817603,2295,it's not used by the event handler,0,0,0,0.9859060049057008,0.9717792272567748,0.9926053285598756,0.0,accept,unanimous_agreement
802825051,2295,vst sdk examples and vstgui implementation use only handler to identify channel,0,0,0,0.9887147545814514,0.9946002960205078,0.9937404990196228,0.0,accept,unanimous_agreement
802851479,2295,that's how it implemented in other effects,0,0,0,0.9850576519966124,0.9871029257774352,0.9924014806747437,0.0,accept,unanimous_agreement
802859577,2295,you expect that list of options will stay same for both vst and vst3?,0,0,0,0.986409604549408,0.9942861199378968,0.9903380274772644,0.0,accept,unanimous_agreement
802872849,2295,"unfortunately some vst plugins may expose many thousands of parameters, which sometimes aren't present in the plugin interface, it's the safest option i see right now to remove such parameters from the list",0,0,-1,0.8707652688026428,0.8926600813865662,0.7291340827941895,0.0,accept,majority_agreement
804624386,2295,"i think the destuctor of `eventhandler` destroys some resources too early, but you can fix this by giving the struct a move constructor that zeroes the id and channel pointer in the source of the move.",0,0,0,0.9798062443733216,0.988323450088501,0.9836311340332032,0.0,accept,unanimous_agreement
804625114,2295,likewise you may need a nontrivial move constructor.,0,0,0,0.9858330488204956,0.9248775839805604,0.9851587414741516,0.0,accept,unanimous_agreement
804678207,2295,"not sure that i understand. the type of `eventhandler` is `std::unique_ptr<>`, once the ownership is moved, `eventhandler` doesn't point to the object any more. do i miss something here?",0,0,0,0.8867080807685852,0.9479215145111084,0.797617495059967,0.0,accept,unanimous_agreement
804687803,2295,"you are right, it is a unique_ptr, and i overlooked that. but implementing the move copy in eventhandler and timerhandler, which act as resource handles, would be the right thing to do in those classes, considering what they do independently of how they are allocated: make sure that they are move-only and never are copied by mistake. it would allow you to avoid the unnecessary extra indirection of a unique_ptr.",0,0,0,0.945281744003296,0.9755869507789612,0.9771339297294616,0.0,accept,unanimous_agreement
1431719151,5791,"i just removed the contrast measure in a follow-up commit, improving performance of the classifier and simplifying the procedure. please ignore this part while reviewing.",0,0,0,0.979723572731018,0.9853862524032592,0.9899097681045532,0.0,accept,unanimous_agreement
1432541543,5791,fix the comment,0,0,0,0.984907865524292,0.9838183522224426,0.9931963682174684,0.0,accept,unanimous_agreement
1432541703,5791,fix the comment,0,0,0,0.984907865524292,0.9838183522224426,0.9931963682174684,0.0,accept,unanimous_agreement
1432557844,5791,put a banner on the file and `#include` guard,0,0,0,0.987165629863739,0.9934351444244384,0.995328426361084,0.0,accept,unanimous_agreement
1432561554,5791,i wish we had `std::span` from c++20. i wish we could use `std::vector` less often to pass contiguous ranges of values. because `std::vector` specifies storage management details that are extraneous to the algorithm. without `span` you would need at least one extra `size_t` argument so that you could pass simple pointers. don't fix this but remember it and think about it.,0,0,0,0.9583401083946228,0.9892170429229736,0.8867895603179932,0.0,accept,unanimous_agreement
1432595750,5791,the assertion should be commented as a precondition,0,0,0,0.9854544401168824,0.9901418089866638,0.9940381050109864,0.0,accept,unanimous_agreement
1432603856,5791,"you use template parameters t and u, not requiring them to be the same. you use `double` in the return type. maybe you might make this more general? (could there be some future need to use it with `long double` or `std::complex ?) maybe `template , typename t, typename u>` maybe also the common cases where t and u are both double or both float could also declare `extern math_api` explicit template instantiations here, and a companion .cpp file could generate the definitions.",0,0,0,0.9842607378959656,0.9946134686470032,0.9929478168487548,0.0,accept,unanimous_agreement
1432619243,5791,see here for a formula that suggests a one-pass accumulation of the answer which might or might not make a difference in performance [a link] but see also [a link],0,0,0,0.9825351238250732,0.9869417548179626,0.9928110241889954,0.0,accept,unanimous_agreement
1432624512,5791,"here too, this is just variance (times n)",0,0,0,0.9796839952468872,0.9884907007217408,0.9897927045822144,0.0,accept,unanimous_agreement
1432630039,5791,i think this line is unnecessary to build,0,0,0,0.5875906944274902,0.8869253993034363,0.8444536328315735,0.0,accept,unanimous_agreement
1433207325,5791,banners for this and other new source files,0,0,0,0.982154130935669,0.991962730884552,0.9942944645881652,0.0,accept,unanimous_agreement
1433214534,5791,"previous contents of `buffer` matter -- this is addition, not assignment. a header comment should say that.",0,0,0,0.9881275296211244,0.9922163486480712,0.9941036105155944,0.0,accept,unanimous_agreement
1433224802,5791,i figured out that the only uses of `getfloats` are in this function. is there a guarantee that `frame.data()` used as the buffer will be zero-initialized first? only if the given `frame` is empty before this `resize`. precede this with `resize(0)` and then there is no more doubt.,0,0,0,0.98410564661026,0.9884886145591736,0.991228461265564,0.0,accept,unanimous_agreement
1433228708,5791,here is the use of `getnextframe` but i see no zeroing out of the buffer between passes. is there in fact a bug here?,0,0,0,0.9726898670196532,0.9737030863761902,0.9910470843315125,0.0,accept,unanimous_agreement
1433236151,5791,"to treat the short file boundary case really fully, should there be a while loop below? with a careful test that the loop makes progress each time? or should you be sure to zero-fill any uninitialized part remaining after the second read? (which would be a consequence of first resizing the buffer to zero above)",0,0,0,0.9841230511665344,0.9945278763771056,0.9921187162399292,0.0,accept,unanimous_agreement
1433937999,5791,"clarify with comments that this class does not calculate stft, but is only a source of time-domain frames, with windowing function applied",0,0,0,0.9868645071983336,0.9929753541946412,0.9946356415748596,0.0,accept,unanimous_agreement
1433947119,5791,you might just write `std::plus{}`,0,0,0,0.9778019785881042,0.9927109479904176,0.9930025935173036,0.0,accept,unanimous_agreement
1434000357,5791,"not clear in context here, what string you mean. use `//!` instead of `//` and it becomes a doxygen brief comment.",0,0,0,0.973800778388977,0.9556094408035278,0.9595620036125184,0.0,accept,unanimous_agreement
1434003078,5791,make a `` comment,0,0,0,0.9852682948112488,0.9900784492492676,0.994924545288086,0.0,accept,unanimous_agreement
1434010393,5791,i might write [code block],0,0,0,0.987471044063568,0.9888456463813782,0.9927812218666076,0.0,accept,unanimous_agreement
1434011342,5791,are you also assuming `fullsize > 0` ? (loops below won't terminate if it is 0) can it be unsigned?,0,0,0,0.989210605621338,0.9929721355438232,0.994284689426422,0.0,accept,unanimous_agreement
1434012512,5791,incorrect if x is 0 or negative; again consider an unsigned argument,0,0,0,0.9377846121788024,0.7323199510574341,0.8708491921424866,0.0,accept,unanimous_agreement
1434017222,5791,the function name doesn't suggest exactly what it does. 6 is not a power of 2 or of 3.,0,0,0,0.9691015481948853,0.945028841495514,0.984176516532898,0.0,accept,unanimous_agreement
1434018673,5791,or simply `n % 9 == 0`,0,0,0,0.984074592590332,0.9917486906051636,0.9928143620491028,0.0,accept,unanimous_agreement
1434019919,5791,so really `getpowersof2and3` could generate just the powers of 2 and the triples of those,0,0,0,0.980372667312622,0.9929232597351074,0.991729199886322,0.0,accept,unanimous_agreement
1434020216,5791,i don't know what `odf` abbreiviates,0,-1,0,0.5945439338684082,0.5402031540870667,0.9568700790405272,0.0,accept,majority_agreement
1434020791,5791,`j` is never 0,0,0,0,0.9714288711547852,0.9822929501533508,0.9837436079978944,0.0,accept,unanimous_agreement
1434021455,5791,this condition too is always false,0,0,0,0.9753560423851012,0.95664244890213,0.9707971811294556,0.0,accept,unanimous_agreement
1434024820,5791,"i would make a small companion `.cpp` file, just to define the destructor non-inline, so that the linker doesn't need to de-duplicate the virtual function table but will allocate it just in that .cpp. not very important for a header file that is not widely used, but i make a habit of this whenever i make a new abstract base class.",0,0,0,0.6313524842262268,0.9299266338348388,0.9859780073165894,0.0,accept,unanimous_agreement
1434031768,5791,"i took another look this morning, and i'm still not convinced, that the loop using `getnextframe` in `mirdsp.cpp` is correct. i still think later passes have a buffer contaminated with previous data. but all of that could be fixed down at this level, if only the first `addchannel` instead assigned the buffer, not accumulating into it. only the second `addchannel` should remain. and then no special header comments would be needed.",0,0,0,0.9659712314605712,0.9731762409210204,0.947025179862976,0.0,accept,unanimous_agreement
1434034892,5791,this type is nowhere used,0,0,0,0.9168140292167664,0.9437919855117798,0.9941652417182922,0.0,accept,unanimous_agreement
1434044316,5791,"if i correctly understand the statistical methods of roc, then whether the allowed false positive rate is consistent with the threshold, depends on probability distributions of ... whatever `threshold` measures, in two different populations of sound files, those that have rhythmic content and those that do not. so then are the four magic numbers below derived experimentally from a certain corpus of example files that you take as representative?",0,0,0,0.9770846962928772,0.9890438318252563,0.9895798563957214,0.0,accept,unanimous_agreement
1434069456,5791,"`timesignature` is not assigned on all paths. better to make it consistent that way. or maybe better, why not return `musicalmeter` by value and eliminate arguments?",0,0,0,0.9848806858062744,0.9903258681297302,0.9911120533943176,0.0,accept,unanimous_agreement
1434071254,5791,"maybe one `musicalmeter` member instead, directly initialized",0,0,0,0.9879078269004822,0.9931963682174684,0.9905547499656676,0.0,accept,unanimous_agreement
1434082468,5791,"should this standard deviation be defined in the same place as the mean, `bpmexpectedvalue`?",0,0,0,0.9841364622116088,0.9949564337730408,0.992771565914154,0.0,accept,unanimous_agreement
1434084722,5791,redundant words,0,0,0,0.8842217326164246,0.6244629621505737,0.5258431434631348,0.0,accept,unanimous_agreement
1434091283,5791,this use of the normalized hann window is only as a moving-average kernel -- spectral properties are not important. am i right?,0,0,0,0.8064181208610535,0.965012550354004,0.9902310967445374,0.0,accept,unanimous_agreement
1434092641,5791,maybe that loop can just be `std::accumulate` on one or two ranges,0,0,0,0.986548125743866,0.9942309856414796,0.9849234819412231,0.0,accept,unanimous_agreement
1434604163,5791,i don't understand this multiplier.,-1,-1,-1,0.8137656450271606,0.8216072916984558,0.7470483779907227,-1.0,accept,unanimous_agreement
1434604568,5791,make a ``,0,0,0,0.9790696501731871,0.984847366809845,0.993243396282196,0.0,accept,unanimous_agreement
1434608698,5791,can this divide by 0?,0,0,0,0.9818626046180724,0.9884442687034608,0.9924967288970948,0.0,accept,unanimous_agreement
1434615304,5791,"the argument is called `samplerate` but at the point of usage it is passed a frame rate, which is sample rate divided by a hop size -- hop rate? hops per second.",0,0,0,0.9884068369865416,0.994575023651123,0.993857443332672,0.0,accept,unanimous_agreement
1434616135,5791,i don't pretend to know the theory here. maybe school me later.,0,-1,0,0.8034406304359436,0.5864132642745972,0.8547242283821106,0.0,accept,majority_agreement
1434617207,5791,maybe reserve `frameprovider.getnumframes()` ?,0,0,0,0.988929569721222,0.9937957525253296,0.9943768382072448,0.0,accept,unanimous_agreement
1434618791,5791,"if performance is concern enough for a progress indicator, perhaps we should seek optimizations. maybe the old functions in fft.cpp could be improved. such as by avoiding the un-permuting and re-permuting of the spectrum.",0,0,0,0.9787710309028624,0.9904562830924988,0.9849842190742492,0.0,accept,unanimous_agreement
1434621683,5791,no such parameter,0,0,0,0.981151282787323,0.9617873430252076,0.992266833782196,0.0,accept,unanimous_agreement
1434623670,5791,is minnumbars <= maxnumbars always?,0,0,0,0.9882001876831056,0.9925772547721864,0.991800844669342,0.0,accept,unanimous_agreement
1434625719,5791,<= not < ? (twice),0,0,0,0.9456251859664916,0.9901242852211,0.7355550527572632,0.0,accept,unanimous_agreement
1434964131,5791,"i wish we had c++20 ranges. without them, you could use standard algorithms without needing these temporary vectors just to hold integers. making these vectors seems wasteful and only obscures the two outer loops that might just as easily be written with an integer loop variable.",-1,0,-1,0.5829471945762634,0.9556617736816406,0.5210554599761963,-1.0,accept,majority_agreement
1435028287,5791,maybe call that `pulsetrainperiod`,0,0,0,0.9869585633277892,0.9945836663246156,0.9915105104446412,0.0,accept,unanimous_agreement
1435035906,5791,this comment makes me think of the problem of applying a varying stretch to correct irregularities of rhythm... have you thought of that?,0,0,0,0.9125801920890808,0.9343863725662231,0.9606079459190368,0.0,accept,unanimous_agreement
1435038076,5791,"`std::accumulate` defaults the operation to addition, so you can shorten that",0,0,0,0.9875918626785278,0.9929664134979248,0.9931102991104126,0.0,accept,unanimous_agreement
1435039421,5791,`std::abs`,0,0,0,0.9817310571670532,0.9870945811271667,0.9916866421699524,0.0,accept,unanimous_agreement
1435040457,5791,why `2 *`?,0,0,0,0.9748846888542176,0.9879980087280272,0.9887948036193848,0.0,accept,unanimous_agreement
1435041792,5791,you can default the last two arguments,0,0,0,0.9867779016494752,0.9882163405418396,0.9947086572647096,0.0,accept,unanimous_agreement
1435052545,5791,it looks like you just want an `unordered_set` hashed on the third member,0,0,0,0.9860876202583312,0.9921836256980896,0.9931713342666626,0.0,accept,unanimous_agreement
1435053706,5791,"is the normalized distance really a ""probability"" (vertical axis if you plot the distribution) or is it the ""random variable"" (horizontal axis)?",0,0,0,0.979938507080078,0.991963505744934,0.9908012747764589,0.0,accept,unanimous_agreement
1435054420,5791,"explain ""contrast"" -- the same thing as the ""score""?",0,0,0,0.9753893613815308,0.9904887676239014,0.9914826154708862,0.0,accept,unanimous_agreement
1435055143,5791,i would write inner braces around the first three members,0,0,0,0.9840789437294006,0.9926214218139648,0.9873678088188172,0.0,accept,unanimous_agreement
1435059237,5791,"is it correct to choose the hypothesis that minimizes error as the most likely correct hypothesis -- or, is there need to do something fancier with a bayesian formula? which would make some assumptions about the unconditional probabilities of the hypotheses (how often will a loop have 6/8? how often 4/4? etc.) and those data again might need to be derived from some corpus of examples we take as representative.",0,0,0,0.9784990549087524,0.9882988929748536,0.9850690960884094,0.0,accept,unanimous_agreement
1435061216,5791,"e.g. find a large enough population of examples where time signature is deduced from explicit metadata, not calculation?",0,0,0,0.9783329367637634,0.9903305768966676,0.9917961359024048,0.0,accept,unanimous_agreement
1435061963,5791,what is the source of all the numbers in these three maps?,0,0,0,0.9754846692085266,0.9901849031448364,0.9920352101325988,0.0,accept,unanimous_agreement
1435063626,5791,the data in the third map -- however derived -- might be used in that suggested bayesian formula.,0,0,0,0.9856370091438292,0.9896988272666932,0.9904911518096924,0.0,accept,unanimous_agreement
1435097509,5791,"that has units of samples / beat, so i might call it `beatlength`",0,0,0,0.984154224395752,0.9928277134895324,0.9939565658569336,0.0,accept,unanimous_agreement
1435102383,5791,"you are testing increasing periods, not frequencies -- maybe that should really be called ""sub-harmonic""",0,0,0,0.9784539937973022,0.9418147206306458,0.975315511226654,0.0,accept,unanimous_agreement
1435121700,5791,"i think you could sequence this test before all the rest of the calculation of autocorrelation and scores, and skip all that if it is true",0,0,0,0.9857171773910522,0.9910407662391664,0.9854112863540648,0.0,accept,unanimous_agreement
1437553342,5791,"i do think the case where `x` is of integer type is quite common. that's the use case i had, rounding onsets to tatum (or ""tick"") indices. for the rest, it's a bit complicated to find a solution that satisfies all cases without compiler warnings. i just generalized the weight type for usage convenience, but the return type is just double. users who need float coefficients shouldn't have trouble downcasting.",0,0,0,0.9535614848136902,0.952339231967926,0.9316079616546632,0.0,accept,unanimous_agreement
1437562009,5791,"yes indeed, this wasn't intended behaviour. addressing.",0,-1,0,0.914114773273468,0.5627539753913879,0.9665977358818054,0.0,accept,majority_agreement
1437582367,5791,"yes, the perfect circular read-out would need a while loop. but it probably makes implementation easier not to care for this use case, which would be too short to be a musical loop anyway. i think initialization to 0 would only improve situations where the underlying file is less than twice the fft size, but it's cheap and easy, so will do.",0,0,0,0.8397694230079651,0.8387481570243835,0.9470047950744628,0.0,accept,unanimous_agreement
1437605887,5791,that's an outdated comment - thanks.,0,-1,1,0.4851884245872497,0.4469307661056518,0.5381565690040588,,review,no_majority_disagreement
1437620103,5791,onset detection function,0,0,0,0.9872402548789978,0.9902209043502808,0.9934074878692628,0.0,accept,unanimous_agreement
1437620190,5791,"making it unsigned doesn't protect against invalid input, since `fullsize > 0` is a pre-condition, so i don't see that much of a benefit. but yes, i should handle invalid argument values.",0,0,0,0.9674665331840516,0.9708013534545898,0.9870727062225342,0.0,accept,unanimous_agreement
1437656088,5791,`n % 27 == 0` - we hold musical rhythms with two triple levels for realistic (e.g. a swung 6/8). but thanks for the tip.,1,1,1,0.8998758792877197,0.9472015500068665,0.944045066833496,1.0,accept,unanimous_agreement
1437710949,5791,"right - and this was a bug, missing the presence of a peak at index 0. thank you, addressing this has improved the performance of the classifier. see c0b0d85123b5403d4c8355ffdfc92374c4b46da0",1,1,1,0.775120198726654,0.8694120049476624,0.651902973651886,1.0,accept,unanimous_agreement
1437712724,5791,an obsolete remnant.,0,0,0,0.8209631443023682,0.8477066159248352,0.9351733922958374,0.0,accept,unanimous_agreement
1437721323,5791,"two distributions of the score returned by the algorithm, yes, one for files whose ground truths say they are not music loops, and the other for the others. if the distributions do not overlap, then you have a perfect classifier and the threshold can be set anywhere between the two. but ours do, and we set the threshold such that it splits the non-loop population in 99% / 1% for the strict case, and 90% / 10% for the lenient case, the upper part of the split being the false-positive area. representativeness is indeed a topic. ideally i could take a representative sample set from what users are importing, but i don't have this. so i need a data set i'm happy with, and believe in it. the one use in this pr (next commit) is worth what it's worth. a follow-up ticket, #5795, may provide something more representative (although the goal of that ticket is first and foremost to make the dataset available to others for reproducibility).",0,0,0,0.8863730430603027,0.9561594724655152,0.9879857897758484,0.0,accept,unanimous_agreement
1437727259,5791,absolutely.,0,0,0,0.8953989744186401,0.7786356806755066,0.963522732257843,0.0,accept,unanimous_agreement
1437729291,5791,"these will be subject to change in follow-up improvement prs, i'm reluctant to invest time centralizing them, as little work as that may be.",-1,-1,-1,0.6992954015731812,0.8371917605400085,0.695777952671051,-1.0,accept,unanimous_agreement
1437735052,5791,i suppose it is in some way. the average of the signal is like its dft at 0hz. the window function reduces the amount of leakage of non-zero components in the 0hz measurement.,0,0,0,0.9810709357261658,0.9811949133872986,0.988324761390686,0.0,accept,unanimous_agreement
1437744848,5791,"it's a poorly documented yet important multiplier. the moving average of the raw odf will be subtracted from it to yield the final odf, negative results being set to 0. this is to remove noise of small odf peaks before the method's quantization step. changing this value can impact dramatically the performance of the classifier. i'm still not completely happy with the odf. in some cases it can be very noisy in comparison with our perception of where onsets are. i'm exploring better solutions, and if i do find one, this smoothing may become obsolete. still, adding a comment.",-1,-1,-1,0.9392642974853516,0.8809568881988525,0.7779117226600647,-1.0,accept,unanimous_agreement
1437745147,5791,it's in the header.,0,0,0,0.9862017035484314,0.9913349747657776,0.9915506839752196,0.0,accept,unanimous_agreement
1437746376,5791,not unless the input is only zeroes. adding a check.,0,0,0,0.983716607093811,0.9820937514305116,0.9908918738365172,0.0,accept,unanimous_agreement
1437750934,5791,"#5794 is planned for optimization. downsampling to 16khz is already something that could augment speed drastically. but i'm keeping that ticket for later. like i said, i'm not completely happy with the odf, and reworking it would put any optimization at risk. also, i don't mind the algorithm to underperform on master for a while, so that team members and especially and get to experience the progress bar and the nuisance it can be on file import before the final release.",-1,0,0,0.9200106859207152,0.7083848714828491,0.7111262679100037,0.0,accept,majority_agreement
1437754501,5791,will `iotarange` complain if it isn't?,0,0,0,0.9435964226722716,0.973465383052826,0.9666563272476196,0.0,accept,unanimous_agreement
1437755466,5791,"given that `tatumrate` is not an integer, that won't make much difference. `mintatumsperminute` and the other are ballpark values anyway.",0,0,0,0.9849528670310974,0.9859327673912048,0.9741316437721252,0.0,accept,unanimous_agreement
1437759423,5791,"this could be an application of the result of this analysis indeed. we could offer the user the possibility to automatically warp the onsets to the nearest tatum. generalizing our integration of the time-stretching from staffpad may not be that tricky, but there would be real difficulties related to waveform painting. or maybe the painting would be so subtle we wouldn't even need to address it ... then pencil and brush would also have to be disabled for time-warped clips, but ux-wise that wouldn't be too bad either.",0,0,0,0.9061346054077148,0.8854937553405762,0.9468140006065368,0.0,accept,unanimous_agreement
1437760382,5791,of course.,0,0,0,0.9671178460121156,0.981129229068756,0.9627540707588196,0.0,accept,unanimous_agreement
1437760807,5791,"such that the error nicely spans `[0, 1)`. will comment.",0,0,0,0.984891414642334,0.9901379346847534,0.9934768080711364,0.0,accept,unanimous_agreement
1437768333,5791,"you're right, it's not a probability, `1 - distance` it's just a score. the probability of the file being a loop given that score is what we use in the benchmarking to determine the thresholds.",0,0,0,0.9746819734573364,0.9875839352607728,0.991081476211548,0.0,accept,unanimous_agreement
1437769308,5791,"outdated comment, thanks. (see [a link] if you wish)",1,1,1,0.7434444427490234,0.7330924272537231,0.9078831672668456,1.0,accept,unanimous_agreement
1437769719,5791,in fact `score` and `error` are rather redundant. i simplified.,0,0,0,0.9784979224205016,0.9359123706817628,0.987834095954895,0.0,accept,unanimous_agreement
1437771920,5791,"this is part of the following, disambiguation step of the algorithm. for now we're only interested in tatum quantization. but since tatum rate typically is faster than beat rate, a follow-up disambiguation step is necessary. there, time signature ""popularity"" are taken into account to decide how tatums should be grouped in beats and beats in bars. see the introductory comment in the header.",0,0,0,0.962960422039032,0.9928699135780334,0.9921371340751648,0.0,accept,unanimous_agreement
1437789624,5791,"you're right, i am using probabilistic measures that may be more clearly be brought together with a clear formulation of the bayes theorem. i just created a ticket for that: [a link]",0,0,0,0.931315779685974,0.8037373423576355,0.9876124262809752,0.0,accept,unanimous_agreement
1437790733,5791,it's more the period index that i'm increasing. renaming.,0,0,0,0.966062307357788,0.9136040210723876,0.9882826209068298,0.0,accept,unanimous_agreement
1437817932,5791,"nice! that may be a non-negligible speed improvement. i may remove this `fourfourit` in a follow-up algorithmic improvement, but until then ...",1,1,1,0.9883687496185304,0.99257493019104,0.9881026148796082,1.0,accept,unanimous_agreement
1437818400,5791,i don't understand.,-1,-1,-1,0.8802521824836731,0.6400864720344543,0.8783383965492249,-1.0,accept,unanimous_agreement
1439751210,5791,this won't help for very small x.size().,0,0,0,0.9506278038024902,0.9347764253616332,0.980399250984192,0.0,accept,unanimous_agreement
1439982307,5791,"i see it is now corrected, though there are two passes over the buffer (to zero it, then to add to it). maybe that marginal inefficiency is unimportant.",0,0,0,0.7667274475097656,0.9528738856315612,0.9799348711967468,0.0,accept,unanimous_agreement
1439987617,5791,"are you trying to handle corner cases? you deal with zero for `numsamples`. log2 returns -infinity for a zero argument, nan for a negative, and idealhopsize might be zero. i'm just trying to think of abusive inputs... the numbers come from virtual functions of `audio` below which have no postconditions.",-1,-1,-1,0.9397384524345398,0.5401514172554016,0.5827970504760742,-1.0,accept,unanimous_agreement
1440989748,5791,considering that crash i fixed in the unit test -- you might comment that the lifetime of the source encloses that of this?,0,0,0,0.9796676635742188,0.9932855367660522,0.9928762912750244,0.0,accept,unanimous_agreement
1441009640,5791,"i notice now the window is periodic in `size`, not symmetrical; perhaps worth a header comment",0,0,0,0.9412555694580078,0.9876184463500975,0.9906328916549684,0.0,accept,unanimous_agreement
1441091266,5791,did you mean `0 < delta && delta < 1. / 8`,0,0,0,0.9808388948440552,0.9924789667129515,0.9922164678573608,0.0,accept,unanimous_agreement
1441172648,5791,"this may be a problem: the function may take paths that do change the tracks, but do not push an undo state. therefore those changes of the tracks will be lost if you undo the import command that was previously pushed, then redo again. or the changes will be consolidated as part of the next undo item that is pushed, which may be for an unrelated editing operation.",0,0,0,0.9308167695999146,0.9861778020858764,0.9704670906066896,0.0,accept,unanimous_agreement
1441177270,5791,it may loop infinitely because the termination test is == not >=,0,0,0,0.9574258327484132,0.9447124004364014,0.98310649394989,0.0,accept,unanimous_agreement
1441520403,5791,it's only for debug purposes. do you want to push `powspec` before or after the swap?,0,0,0,0.9859981536865234,0.9944961667060852,0.99348783493042,0.0,accept,unanimous_agreement
1441521466,5791,do you want to push one more power spectrum for debug output?,0,0,0,0.9875361323356628,0.9907972812652588,0.9937666654586792,0.0,accept,unanimous_agreement
1441534993,5791,i don't understand the context of the remark,-1,-1,-1,0.7166714072227478,0.5297588109970093,0.615146815776825,-1.0,accept,unanimous_agreement
1441538832,5791,`const auto size = x.size()` (lift that out of the loop) `k = (k + n + i + size()) % size()` i don't know whether that might make this hot inner loop run faster -- measure,0,0,0,0.9807089567184448,0.9760781526565552,0.9870507717132568,0.0,accept,unanimous_agreement
1441560820,5791,like not alike,-1,0,0,0.904573619365692,0.61994469165802,0.9204155206680298,0.0,accept,majority_agreement
1441603585,5791,`const auto odfsr = odf.size() / audiofileduration;`,0,0,0,0.9846405982971193,0.992784857749939,0.9937753677368164,0.0,accept,unanimous_agreement
1441605940,5791,"comments at least for the more abbreviated member names? remind the reader what ""odf"" means",0,0,0,0.9821274876594543,0.9808912873268129,0.992343246936798,0.0,accept,unanimous_agreement
1441610040,5791,"good, i like to see the ""iife"" technique used to make clear that something remains const after once computed. (immediately invoked function expression)",1,1,1,0.7863060832023621,0.9409478306770324,0.9747899770736694,1.0,accept,unanimous_agreement
1441612574,5791,"""numbers""",0,0,0,0.9764705896377563,0.9890828132629396,0.9897712469100952,0.0,accept,unanimous_agreement
1441614613,5791,"so write `const int maxnumbars = std::max(minnumbars, ...);`",0,0,0,0.9863772392272948,0.993065595626831,0.9927892088890076,0.0,accept,unanimous_agreement
1441630225,5791,"i wonder about this use of `isround` sometimes wrongly rejecting a hypothesis. would it be better to do it with integer operations? suppose `tatumsperbeat` contains nums and denoms, `(beatsperbar * num) % denom == 0` is the condition",-1,0,0,0.5897785425186157,0.9297232031822203,0.8838863372802734,0.0,accept,majority_agreement
1441637157,5791,maybe one `musicalmeter` member,0,0,0,0.9780950546264648,0.9924822449684144,0.9891401529312134,0.0,accept,unanimous_agreement
1441638902,5791,you assigned that already above maybe just collect all assignments here,0,0,0,0.98805433511734,0.989840805530548,0.9922118186950684,0.0,accept,unanimous_agreement
1441668743,5791,`numtatums` is the key of the map but also duplicated as part of the value. it's not important.,0,0,0,0.9360713362693788,0.9778232574462892,0.9925731420516968,0.0,accept,unanimous_agreement
1441695829,5791,"i got confused reviewing elsewhere -- this member actually is a number of tatums, not divisions",-1,-1,0,0.7422969937324524,0.5006318092346191,0.5513229966163635,-1.0,accept,majority_agreement
1441703771,5791,"i feel a similar doubt here, as with `isround` -- you should express the test with integer arithmetic only",0,0,0,0.8085154294967651,0.5709951519966125,0.8173990845680237,0.0,accept,unanimous_agreement
1441710043,5791,"is this so hard? `bardivision` is constructed in only one place, at line 98. you can prove there with little difficulty that `beatsperbar` is not more than 4. what i might do: give `bardivision` a constructor with explicit preconditions -- and since its members are const, the preconditions become invariants. then this function can assume the invariant is satisfied. the burden of proof of the precondition shifts to the place of construction.",0,0,0,0.9171671271324158,0.9576722979545592,0.9753298163414,0.0,accept,unanimous_agreement
1441712395,5791,"do as in the previous suggestion, and `ts` will not be optional.",0,0,0,0.984906792640686,0.9938269257545472,0.993454098701477,0.0,accept,unanimous_agreement
1441713794,5791,i still don't know the source of the numbers.,0,-1,-1,0.5269069671630859,0.506198525428772,0.5989580750465393,-1.0,accept,majority_agreement
1441734642,5791,now i feel confused about whether this mapping is correct. wasn't the autocorrelation just half of a vector expected to be conjugate-symmetric?,-1,-1,-1,0.9117745757102966,0.7473084330558777,0.9734917879104614,-1.0,accept,unanimous_agreement
1441736767,5791,"so, this while loop is climbing up to a local peak? summarize with a comment if i understand right",0,0,0,0.9829940795898438,0.9671998023986816,0.9907107949256896,0.0,accept,unanimous_agreement
1441747025,5791,"sorry, was just a not for myself. if `x.size() == 1`, this crashes. have to fix this.",-1,-1,-1,0.989058792591095,0.9930765628814696,0.9927365779876708,-1.0,accept,unanimous_agreement
1441756487,5791,"`minbarduration < maxbarduration`, and they divide the same value, so `minnumbars <= maxnumbars`.",0,0,0,0.987583577632904,0.9918319582939148,0.9883623719215392,0.0,accept,unanimous_agreement
1441852551,5791,you don't need to capture this in the lambda -- it's a constant,0,0,0,0.9828779697418212,0.9886524081230164,0.9924585223197936,0.0,accept,unanimous_agreement
1441858919,5791,"i've done bottom-up review of all these calculations, twice now. i'm doing one more pass, top-down, depth first. now i think it would be clearer if moved this multiplication by 1.5, into mirdsp where the moving average is used. then this so-called `getmovingaverage` will really do what the function name suggests, and only that.",0,0,0,0.9720187187194824,0.9713855981826782,0.9712782502174376,0.0,accept,unanimous_agreement
1441888072,5791,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
1441895973,5791,maybe this function could be called `generatetempohypotheses`,0,0,0,0.9875433444976808,0.9940396547317504,0.986078143119812,0.0,accept,unanimous_agreement
1441947117,5791,this is used only in `runquantizationexperiment` -- maybe this computation could be lowered into that function for clarity; pass `possibledivs` into it instead,0,0,0,0.9883520007133484,0.9951605200767516,0.9924346208572388,0.0,accept,unanimous_agreement
1441948037,5791,"""generate hypotheses"" here about tempo...",0,0,0,0.9723953008651732,0.9880580902099608,0.9895206689834596,0.0,accept,unanimous_agreement
1441948663,5791,"maybe call this ""best fit tatum number""",0,0,0,0.8964906334877014,0.990656077861786,0.987443745136261,0.0,accept,unanimous_agreement
1441952465,5791,"could there be more than one hypothetical bar division with a four/four signature? if so, why should the first be preferred?",0,0,0,0.9753144979476928,0.9926735758781432,0.989548683166504,0.0,accept,unanimous_agreement
1442111329,5791,"the autocorrelation is not conjugate-symmetric, only symmetric: it's real numbers. i'm confident that the code below is correct.",0,0,0,0.9424837827682496,0.9645059108734132,0.9458848237991332,0.0,accept,unanimous_agreement
1442137606,5791,actually not: we are pushing another odf frame because it's based on the adjacent differences. the correct number of power spectra already has been pushed.,0,0,0,0.9823843240737916,0.9903979301452636,0.9919066429138184,0.0,accept,unanimous_agreement
1442164412,5791,"absolutely, thanks.",1,1,1,0.9257825016975404,0.794938862323761,0.8062466979026794,1.0,accept,unanimous_agreement
1442881884,5791,incidentally noticed that `getpossiblebardivisors` in `mirutils` are not used at all,0,0,0,0.9817960858345032,0.9772642850875854,0.9726770520210266,0.0,accept,unanimous_agreement
1442889694,5791,c++23 would let you write `0uz` instead to make a size_t literal,0,0,0,0.9878645539283752,0.99413800239563,0.9921408891677856,0.0,accept,unanimous_agreement
1442895173,5791,are not is,0,0,0,0.8139098882675171,0.850081205368042,0.9740740656852722,0.0,accept,unanimous_agreement
1446746636,5791,comment from -licameli:,0,0,0,0.9870364665985109,0.9870204925537108,0.9765338897705078,0.0,accept,unanimous_agreement
1446747135,5791,from -licameli:,0,0,0,0.9856415390968324,0.9876402020454408,0.992805540561676,0.0,accept,unanimous_agreement
1446747506,5791,from -licameli:,0,0,0,0.9856415390968324,0.9876402020454408,0.992805540561676,0.0,accept,unanimous_agreement
1446747865,5791,from -licameli:,0,0,0,0.9856415390968324,0.9876402020454408,0.992805540561676,0.0,accept,unanimous_agreement
1446748202,5791,from -licameli:,0,0,0,0.9856415390968324,0.9876402020454408,0.992805540561676,0.0,accept,unanimous_agreement
1446749099,5791,from -licameli: [a link] (comment is a bit long to be copied.),0,0,0,0.9871528744697572,0.9876635670661926,0.9918851852416992,0.0,accept,unanimous_agreement
1446749399,5791,from -licameli:,0,0,0,0.9856415390968324,0.9876402020454408,0.992805540561676,0.0,accept,unanimous_agreement
1446749736,5791,from -licameli:,0,0,0,0.9856415390968324,0.9876402020454408,0.992805540561676,0.0,accept,unanimous_agreement
1446749918,5791,from -licameli:,0,0,0,0.9856415390968324,0.9876402020454408,0.992805540561676,0.0,accept,unanimous_agreement
1446755880,5791,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
1446760245,5791,"it could, but since the false-positive tolerance itself being rather arbitrary, we shouldn't be preoccupied with that kind of precision.",0,0,0,0.9640281796455384,0.8079063296318054,0.95497727394104,0.0,accept,unanimous_agreement
1446762289,5791,"i agree, checksum is a better choice of name. also changing the signature to something more straightforward.",0,0,0,0.9447126388549804,0.9396561980247498,0.8837583065032959,0.0,accept,unanimous_agreement
1446770627,5791,"looks ok. i've just run the benchmarking again, counting the total number of samples, which is 84540711. to get the average dc offset in db, `20*log10(1840.31005859375/84540711) == -93.24349792273436`, close to the noise floor for 16bit audio.",0,0,0,0.8888647556304932,0.9760637283325196,0.885381281375885,0.0,accept,unanimous_agreement
1446770802,5791,i don't mind - thanks.,1,1,1,0.560795783996582,0.8372247815132141,0.8207072615623474,1.0,accept,unanimous_agreement
1446772745,5791,"that could be a problem. i expect it will be close, though, since i don't expect the false-positive and true-positive rates to differ much or at all. as for the floating-point arithmetic ... in a follow-up pr i intend to make the evaluation dataset easily available, not only on the machine i'm using right now. when i'm there i'll test it on the macbook i have, see what happens.",0,0,0,0.8918094635009766,0.9469723701477052,0.909075140953064,0.0,accept,unanimous_agreement
1446774458,5791,"yes, the commits i'm preparing should fix this. most importantly, the calculated thresholds are consistent with the values used in `musicinformationretrieval.h`, [code block]",0,0,0,0.9831316471099854,0.9851481914520264,0.990946650505066,0.0,accept,unanimous_agreement
1304419878,5043,"replicated in another pr -- again, wrong number?",0,0,0,0.6872657537460327,0.9492419958114624,0.9766006469726562,0.0,accept,unanimous_agreement
1304421081,5043,"please edit the commit comment. put breaks in the very long line that is the third paragraph, and remove the last line.",0,0,0,0.9828416109085084,0.9899064898490906,0.9944992065429688,0.0,accept,unanimous_agreement
1304433990,5043,"""adequate""",0,0,0,0.883237361907959,0.9858367443084716,0.8352077603340149,0.0,accept,unanimous_agreement
1304436302,5043,"do i understand the intention: if i cut from a project with 60 bpm tempo, and paste into a project with 120 bpm tempo, it is not meant to play back the same, but play twice as fast? and so the selection change too?",0,0,0,0.9751160144805908,0.964464008808136,0.9861418604850768,0.0,accept,unanimous_agreement
1304440543,5043,"a test of the branch tells me i have described how it behaves. whether that is as design specified, i don't know, but assuming so, i update the qa checklist.",0,0,0,0.9857827425003052,0.9809123873710632,0.980130672454834,0.0,accept,unanimous_agreement
1304458265,5043,"`mprojecttempo` can be private and this branch still builds. please do that. is there a commit i didn't review yet in another branch that needs `mprojecttempo`? if so, rewrite that to use `track::getprojecttempo` which as you see is not a simple accessor. remember i rewrote it that way to fix the uninitialized variable that made the error drawing stereo clips.",0,0,0,0.978573739528656,0.9903301000595092,0.9928277134895324,0.0,accept,unanimous_agreement
1304485954,5043,"this one line: i think in an earlier version you duplicated this unnecessarily in `wavetrack` at places where `init` had already been called, which was why the member was protected, but i pointed out the redundancy.",0,0,0,0.9523073434829712,0.989715039730072,0.9880081415176392,0.0,accept,unanimous_agreement
1304490863,5043,it builds for me without this inclusion and without prefs.h,0,0,0,0.9737951159477234,0.991198718547821,0.9919827580451964,0.0,accept,unanimous_agreement
1304497323,5043,"does this added line, with the other at 630, fix a known bug in copy-paste? strictly speaking that's not the scope of the pr or the stretching project. is there an issue number that it fixes?",0,0,0,0.9760361313819884,0.9906469583511353,0.9930128455162048,0.0,accept,unanimous_agreement
1304497728,5043,i will add to the qa checklist anyway,0,0,0,0.9847509860992432,0.9885776042938232,0.993069589138031,0.0,accept,unanimous_agreement
1304502614,5043,"the function might be more understandable if you do that stretch only when `!stretchotherbeforeresampling` but i understand that if `stretchotherbeforeresampling`, then the line does nothing because the stretch ratio is already unit.",0,0,0,0.9754565954208374,0.9933524131774902,0.9872099161148072,0.0,accept,unanimous_agreement
1304513357,5043,did experimentation with larger numbers might find an easy way to improve performance?,0,0,0,0.9653329253196716,0.9850931763648988,0.9902737736701964,0.0,accept,unanimous_agreement
1304520980,5043,"i like this swap for better exception safety, but it is still imperfect. now it is set up to happen if an exception occurs before `newsequences` were fully filled, which is also possible because of a db failure. so really you need another boolean for a stage of partial success. that is, `bool swappedonce = false;` above. make the `swap` in the finally only if `swappedonce`. assign `swappedonce = true;` after the other swap below.",0,0,0,0.5535562634468079,0.5343577265739441,0.5032709240913391,0.0,accept,unanimous_agreement
1304555599,5043,why this exception?,0,0,0,0.8810721039772034,0.8644104599952698,0.9841788411140442,0.0,accept,unanimous_agreement
1304560199,5043,"1. what happens inside a `finally` may happen during stack unwinding, so the called functions should be `noexcept`. (i don't believe in adding `noexcept` just because you can; but only when there are certain strong reasons for it like here.) 2. this might not restore the state of the other track exactly. `mrawaudiotempo` in a clip may go from empty to non-empty and not back again.",0,0,0,0.9673201441764832,0.9850245714187622,0.9781060218811036,0.0,accept,unanimous_agreement
1304561614,5043,"i wonder if instead this should be an assertion that is stated as a precondition. but then the precondition may need to be repeated for the functions that call this, and so on up the stack until somewhere you can give some convincing argument that the condition is guaranteed.",0,0,0,0.942222535610199,0.95396226644516,0.9487959742546082,0.0,accept,unanimous_agreement
1304563394,5043,the two places that use this function also use `const_cast`. i feel some unease. i might approve reluctantly.,-1,0,-1,0.5841925740242004,0.5794281363487244,0.8054295778274536,-1.0,accept,majority_agreement
1304572521,5043,move this to a `default:` case of the `switch` to remove a compile warning.,0,0,0,0.9862767457962036,0.9934512376785278,0.9942197799682616,0.0,accept,unanimous_agreement
1304590123,5043,this overload is not used,0,0,0,0.9735192656517028,0.9718838930130004,0.9933053851127625,0.0,accept,unanimous_agreement
1305005742,5043,"the definition of this function is better now, but it is still not used",0,0,0,0.980940282344818,0.9904480576515198,0.9904389381408693,0.0,accept,unanimous_agreement
1310213549,5043,spot on.,0,0,0,0.9790809750556946,0.9450607895851136,0.9896013140678406,0.0,accept,unanimous_agreement
1314963314,5043,still unresolved,0,0,0,0.894314169883728,0.931536078453064,0.793069064617157,0.0,accept,unanimous_agreement
1315985724,5043,i reverted this change - wrong since `mprojecttempo` became part of `channelgroupdata`.,0,0,0,0.9667852520942688,0.9814245104789734,0.8974642157554626,0.0,accept,unanimous_agreement
1315996337,5043,"yes, that's correct. it's a simple ux rule: preserve the length in beats rather than in seconds.",0,0,0,0.9809039235115052,0.9256041646003724,0.991027534008026,0.0,accept,unanimous_agreement
1316032511,5043,"the reason is obscure, but there is one. `copy->clearsequence(playendtime, sequenceendtime)` clears the trimmed data. if we don't call `copy->settrimleft(0)`, one may still think the hidden data is valid. further down i call `newclip->applystretchratio()`. this provisionally sets left and right trim to 0, to reduce the ramping in/out of the effect if possible ... note that, in 5-of-6, i remove that call on `newclip`, but this is a healthy change in any case, making changes in the lines below safer.",0,0,0,0.9819428324699402,0.9852741956710817,0.986405313014984,0.0,accept,unanimous_agreement
1316038681,5043,"i didn't experiment with larger numbers, no. this number is the hop size for either the analysis or the synthesis (depending on the stretch direction), so it might spare iterations.",0,0,0,0.9788995385169984,0.9864189028739928,0.9892205595970154,0.0,accept,unanimous_agreement
1316049842,5043,agreed. cherry-picked your fix-commit d15f03a1c4ca0b6f59d286ac59862635b3d27457.,0,1,0,0.9710074067115784,0.7813626527786255,0.9366375207901,0.0,accept,majority_agreement
1316069242,5043,"now i think this throw behaviour is too strict. this method is used so far in `wavetrack::pastewavetrack` and `wavetrack::clearandpaste`. i cannot think of a reason for either of them not to be callable before they are made part of a project, but maybe i'm not thinking hard enough. a more pragmatic approach would be for this method to assert and return without doing anything instead of throwing, without stating a pre-condition. the assert might reveal a concrete example where this doesn't hold in the future, yet there might not be any consequence at all (e.g. if no stretching occurred), in which case bothering the user with it would just be annoying to everyone. ok for assert without pre-condition ?",0,0,0,0.6184424757957458,0.8476719856262207,0.5633823275566101,0.0,accept,unanimous_agreement
1316084753,5043,"i never used that keyword before. i notice, though, that [code block] doesn't yield a warning, which would make even more tedious checking that all nodes of the call tree of `onprojecttempochange` also are `noexcept`. or am i missing something ?",0,0,0,0.5093693137168884,0.9484988451004028,0.9003540873527527,0.0,accept,unanimous_agreement
1316096726,5043,"i hadn't thought about that, but looks like i'm a lucky guy: `track.getprojecttempo().has_value()` if and only if `track.onprojecttempochange` was called at least once. if it wasn't, then this method doesn't proceed. if it was, then all clips have `mrawaudiotempo` set.",0,1,1,0.7681094408035278,0.5621271133422852,0.9174972772598268,1.0,accept,majority_agreement
1321898836,5043,"""scope""",0,0,0,0.9836867451667786,0.9869994521141052,0.9877140522003174,0.0,accept,unanimous_agreement
1321914868,5043,"i still dislike the `const_cast` in two places and the non-obvious reasoning why there is never a net side effect on `waveclip`. an alternative is that `provisionallysynchronizeprojecttempo` (renamed maybe) takes a reference to a `const wavetrack` and returns a shared pointer to a new, duplicate wavetrack that has the project tempo change in it. its scope is only as long as this `finally` would be. maybe a lot of memory allocations and deallocations but a sharing of all the blocks in the sqlite database so none of the very expensive things are done.",-1,-1,-1,0.978181540966034,0.8066731691360474,0.9105420112609864,-1.0,accept,unanimous_agreement
1321918816,5043,"consider too that duplication of the in-memory wavetrack structures, but with sharing of sqlite resources, happens all the time when you push and pop the undo stack, or even just modify the current entry because of a change of the selected interval. and we hardly notice the performance.",0,0,0,0.9605043530464172,0.9512105584144592,0.9859641790390016,0.0,accept,unanimous_agreement
1321920000,5043,"now i think, let the exception stand. rewrite the function as i suggested so it doesn't mutate other but constructs a copy. if the preconditions are not satisfied, throw. the two places where this function is called are in pasting and i already made sure years ago with exhaustive examination of call paths that these are safe places to throw and have audacityapp::onexceptioninmainloop catch it and deal with it.",0,0,0,0.9587259888648988,0.9778931736946106,0.9761337041854858,0.0,accept,unanimous_agreement
1322570488,5043,"that's a good idea, better than this kind of magic i was doing. see 8604d5726a239849bdd80636a3d948c31e076ccd.",1,1,1,0.8732782602310181,0.9181530475616456,0.9775481820106506,1.0,accept,unanimous_agreement
1322756916,5043,"the commit comment ""preserve beat length of selection when copying across projects"" describes this part of it. perhaps the rest of this commit needs other commit comments, whether in the same or a separate commit.",0,0,0,0.9880003333091736,0.991102695465088,0.9900673627853394,0.0,accept,unanimous_agreement
1322767017,5043,i don't remember what this line fixes -- was it only necessary when you were using temporary side effects on clips?,0,0,0,0.8502353429794312,0.7183824777603149,0.9543319940567015,0.0,accept,unanimous_agreement
1322767574,5043,but this change makes sense regardless,0,0,0,0.9673449993133544,0.9698679447174072,0.97981196641922,0.0,accept,unanimous_agreement
1322772367,5043,``,0,0,0,0.9513025879859924,0.9623854756355286,0.9134702086448668,0.0,accept,unanimous_agreement
1322776133,5043,"`leader` is assumed to be non-null, so i would instead type it as `wavetrack *& leader` and in the header write a doxygen comment `[out] leader`",0,0,0,0.9877805709838868,0.993923842906952,0.9935988187789916,0.0,accept,unanimous_agreement
1322825731,5043,"a small change. but i remember some of the surprises in getting effects figured out, were the unintended consequences of changing `<` to `<=` tests in certain `wavetrack` and `waveclip` member functions that were more widely used. are there such surprises here? i did review all uses of `getcliptime` and now, i think not.",0,0,0,0.9436949491500854,0.97368186712265,0.9646803736686708,0.0,accept,unanimous_agreement
1322848756,5043,this simple change raises similar doubts. but i presume you have retested the destructive effects with this change? this pr is based on all of that other stuff. i have in fact noticed zero-length clips sometimes as a thing that ought to be debugged later. is there a way of making zero length clips in 3.3.3 that gets fixed by this? maybe there are existing issues about them?,0,0,0,0.8224723935127258,0.6195077300071716,0.8432540893554688,0.0,accept,unanimous_agreement
1322866977,5043,i might write this without the vector: `const auto range = tracks.any () + [&](const auto ptrack){ return synclock::issynclockselected(t) || (notlocked && playable); }`,0,0,0,0.9854296445846558,0.9913678765296936,0.9934440851211548,0.0,accept,unanimous_agreement
1322867386,5043,then just use `range` twice in range-for statements,0,0,0,0.988637149333954,0.9938001036643982,0.9946000576019288,0.0,accept,unanimous_agreement
1322869820,5043,strings. ?,0,0,0,0.9760652184486388,0.9822746515274048,0.976223647594452,0.0,accept,unanimous_agreement
1322871847,5043,"i see a repetition of these strings and would like to see a convenience function to make the progress indicator, so the strings occur in just one place",0,0,0,0.9823218584060668,0.9541256427764891,0.9887531995773317,0.0,accept,unanimous_agreement
1322887539,5043,"a conditional call to `join` is now unconditional. does this change behavior? in the case that the selected portion of track for eq contains split lines, not at the extremes of the selection, then this is intended to put the lines back where they were. does this conserve that behavior?",0,0,0,0.9870397448539734,0.9911898374557496,0.9931962490081788,0.0,accept,unanimous_agreement
1327184799,5043,"not sure anymore either, but it still is better this way: `waveclip::onprojecttempochange` is the only way a clip's project tempo can be set, hence `wavetrack::insertclip` calling it with `oldtempo == nullopt`. best would be to add a dedicated api, but i'm lazy.",-1,0,0,0.6905531287193298,0.9586177468299866,0.8114200234413147,0.0,accept,majority_agreement
1329514717,5043,"when i changed the boundary check in the first place, it was to redefine clip intervals as standard closed-begin, open-end. consistently, and for adjacent clips, `clipa.getplayendtime() == clipb.getplaystarttime()`. this is a place that went against this rule of thumb that i haven't addressed earlier, and would prevent me from using `getclipattime` in `pasteone`: there i don't want a clip whose end is at `t0` to interfere. i also looked at uses of `getclipattime`. it's used in `getenvelopeattime`. my testing of envelope editing showed that it still worked properly. will add a qa checkbox.",0,0,0,0.9337834119796752,0.9540722966194152,0.984298825263977,0.0,accept,unanimous_agreement
1329555946,5043,"not that i know of. #2263 wrongly reports zero-length clips, but that's actually the click-to-merge vertical line. in any case, it'd be wrong indeed to split a track on the first sample of a clip. one could even question whether a track should be splittable at the second-last sample of a clip, leaving a length-1 clip, barely more usable than a length-0 clip. but i didn't venture that far.",0,0,0,0.7991273999214172,0.8476756811141968,0.7970705032348633,0.0,accept,unanimous_agreement
1329662375,5043,"iiuc, the `+` overload works like an ""&&"", and your proposal would yield another condition: `playable && (issynclockselected || notlocked)`. i think what could work is [code block] but that's not so important.",0,0,0,0.968326210975647,0.988234281539917,0.9874541759490968,0.0,accept,unanimous_agreement
1329663385,5043,addressed - see proposal in more recent commits.,0,0,0,0.984923243522644,0.9928941130638124,0.9854506254196168,0.0,accept,unanimous_agreement
1329664152,5043,part of the utility functions proposed in recent commits.,0,0,0,0.987220585346222,0.990459680557251,0.9913380146026612,0.0,accept,unanimous_agreement
1329771617,5043,"i think that `cliprealstartendtimes` contain the original clip boundaries, and `join` isn't called across any of these. but i'm trying to figure out if this function is needed at all. what it does: takes `newcontents`, a one-clip track with the output of the effect, replaces the content of `oldtrack` in `region = [start, start + len)` with it, preserving existing clip boundaries strictly within `region`, but merging at `start` if it splits a clip underneath, and likewise for `start + len`. this is the intended behaviour for other effects - if merging doesn't mean stretch-rendering, else there is no merging. can you recall why this is a special case ? also, it crashes on `master` for [a link]: not modifying the selected region, apply some eq. `getclipattime` above returns an unchecked nullptr. i haven't got to the bottom of this but if this function isn't needed i may not have to. #5138 doesn't repair it but this branch does somehow.",0,0,0,0.97734534740448,0.9892706871032716,0.9851933121681212,0.0,accept,unanimous_agreement
1332881044,5043,"this commit eliminates some duplication. but it doesn't do enough. see this in `effectoutputtracks.cpp`: [code block] this lambda needs to be defined only once, and reusable. in the other two places that use the strings, they repeat part of this lambda, but not the reset of it -- therefore those progress indicators have non-functional cancel buttons! the utility should take a reference to `count` and construct a lambda that captures it. the utility returns a `std::function` and comments that it may throw `userexception`.",0,0,0,0.943794846534729,0.979289412498474,0.9004966616630554,0.0,accept,unanimous_agreement
1332886781,5043,there is a fourth place -- in autoduck. the identical lambda could be eliminated. the utility could construct the progress indicator. do you know c++14 extended lambda capture? it lets a lambda hold a `unique_ptr` which c++11 could not do. [code block] there is need to vary the progress bar message for autoduck but nothing else. so the utility could take that as another parameter.,0,0,0,0.9871936440467834,0.993433952331543,0.9938244819641112,0.0,accept,unanimous_agreement
1332900153,5043,"you would need another parameter too, the denominator of the division.",0,0,0,0.9868621826171876,0.985398530960083,0.9909911155700684,0.0,accept,unanimous_agreement
1332907224,5043,"okay, this commit totally rewrites the previous. but it does it with a very weird and unnatural inversion of control. what led to this choice? i think it would make more understandable code if instead you had a factory making a function object that you just call to update the user, and you write loops more naturally, just bumping the count captured by reference in the factory. did you not do this just because you could not figure out the lambda capture? abstracting just the test for user cancellation means decisions about how to iterate the range aren't forced -- and you would not need the line above but could iterate with `rbegin` and `rend` as it was. really i don't like this. try it as i suggested.",0,-1,-1,0.5162947773933411,0.8306012749671936,0.8434972763061523,-1.0,accept,majority_agreement
1332922020,5043,"this commit reuses the utility, for nested loops. maybe i understand better now why that led to the strange inverted flow of control. still i don't like it. the simpler alternative to eliminate repetition would be to write another utility that wraps one progress reporter in another, that takes another denominator and another reference to a count.",-1,-1,-1,0.964104175567627,0.9569281339645386,0.9625336527824402,-1.0,accept,unanimous_agreement
1333211418,5043,"this commit is small, but i remember now the doubts i had about it. the changes in generator led me here, and just that led me to separate the destructive effects branch first, and get all of its problems figured out first. my doubt is because is that the boolean `merge` governs more than just the internal splitting of the new pasted clip: see all the rest in `clearandpasteone` under `if (merge && splits.size() > 0)` i was thinking then, and write it down now, that i think the correct fix may require more boolean arguments to control the details more finely.",0,0,0,0.8700929880142212,0.9299690127372742,0.8863937258720398,0.0,accept,unanimous_agreement
1333221516,5043,"contrast the behavior: - select part of a track, with a stretch. apply an effect. drag the new clip to another track. drag (don't stretch) clip edges. - similar but pasting instead of applying an effect (and there doesn't need to be any stretch). for the effect, the clips containing unchanged data retain hidden clip information. but for paste -- as a consequence of this commit -- they do not. (without this commit, of course there were no new splits at the selection bounds.) which is the correct behavior? i think there should be consistency between these cases. as for the new clip in the middle -- for the effect, it turns out to preserve the rest of the clip, stretched but without the effect applied. (but #5220 will change that behavior for performance reasons). for paste, the middle clip can still carry hidden data from the place from which it was originally cut or copied.",0,0,0,0.9588767886161804,0.9889673590660096,0.9869983792304992,0.0,accept,unanimous_agreement
1334305998,5043,"the argument `starttime` is now unused, so remove it",0,0,0,0.9844656586647034,0.9915771484375,0.9955891370773317,0.0,accept,unanimous_agreement
1334321714,5043,this needs scope only within the `else` block,0,0,0,0.9878221154212952,0.9937153458595276,0.9934449195861816,0.0,accept,unanimous_agreement
1334325421,5043,one could rewrite this with `std::lower_bound`,0,0,0,0.9867060780525208,0.9941996335983276,0.9918497800827026,0.0,accept,unanimous_agreement
1335545546,5043,"is the following a correct understanding of your proposal? [code block] [code block] if it is, yes, it's more standard and straightforward at first, but as client you still ought not to forget to update your `count`, which i did, scatterbrained me, forget already (but which you spot during review). so i wonder what is better: straightforward but incomplete, or quirky but complete.",0,0,0,0.874640166759491,0.9226412177085876,0.8969992399215698,0.0,accept,unanimous_agreement
1335604306,5043,yes like that but — the lambda must capture with = not & or you get a dangling reference!,0,-1,0,0.9679516553878784,0.9223669171333312,0.9922985434532166,0.0,accept,majority_agreement
1335661830,5043,"great catch, thank you. we could add one more boolean, to control the `split` argument of the internal call to `handleclear`, currently hard-coded to false. this would solve the problem you describe, but would introduce new problems: ""there is not enough room ..."" if the pasted data is larger than `[t0, t1]`, and a unfilled gap if the pasted data is less than `[t0, t1]`. and me believing i was done with it ...",1,1,1,0.9871355891227722,0.9795430898666382,0.9943358302116394,1.0,accept,unanimous_agreement
1335780924,5043,"... which makes me realize that, in `wavetrack::pastewavetrack` and `clearandpasteone`, the `endtime` argument was wrongly passed as `insertduration` argument to `pasteone`. i suppose this wasn't noticed by qa because these two outer methods are called with temporary tracks, all with their first clip at 0.",0,0,0,0.96162348985672,0.9753023982048036,0.9809091091156006,0.0,accept,unanimous_agreement
1335798729,5043,i find this simpler to understand.,0,0,0,0.9015143513679504,0.9449086785316468,0.9548293948173524,0.0,accept,unanimous_agreement
1336097248,5043,"following-up our discussion, i tried your idea to get inspiration from `std::for_each` - _that_ is the kind of suggestion i was hoping you were going to make from the beginning. works like a charm, see [a link].",0,0,1,0.6134502291679382,0.9513958096504213,0.978992760181427,0.0,accept,majority_agreement
1337008460,5043,just make another deduced template type parameter for the callable. don't implicitly and unnecessarily construct a `std::function` from a lambda. see how `for_each` deduces the callable type. [a link],0,0,0,0.95754736661911,0.991746187210083,0.9954458475112916,0.0,accept,unanimous_agreement
1337009849,5043,"now the utility function is nicer to use, but i feel that basicui.h is the wrong place for it. i'm not sure what is the right place for it.",-1,-1,0,0.940299153327942,0.7802280783653259,0.7690971493721008,-1.0,accept,majority_agreement
1337014141,5043,"`progressreporter` too can be a deduced type, allowing more generality and avoiding some more `std::function` constructions.",0,0,0,0.9876533150672911,0.9926962852478028,0.9909787178039552,0.0,accept,unanimous_agreement
1337021340,5043,"""intersected"" typo",0,0,0,0.9857431054115297,0.991400420665741,0.9907859563827516,0.0,accept,unanimous_agreement
1337025914,5043,the loops and nested loops surely look much nicer now. i think the function needs a better name than `splitprogress`. perhaps `withredenominatedprogress` and some comments explaining the change of denominator as the size of the given iterator range.,1,0,0,0.4994936287403106,0.9470099210739136,0.8862559199333191,0.0,accept,majority_agreement
1337054677,5043,not just commenting assertions but adding one. so can you prove this new one is satisfied at the point of the call?,0,0,0,0.9869118928909302,0.9924336671829224,0.994473397731781,0.0,accept,unanimous_agreement
1337638631,5043,"i made several attempts at finding a better name, but then came to think that it wasn't such a bad name after all. added a description in 1bc93b7.",0,0,0,0.6924988031387329,0.9375015497207642,0.9159199595451356,0.0,accept,unanimous_agreement
1337640474,5043,but doesn't the user then loose the information that it takes a double and returns a void just by looking at the function's signature?,0,0,0,0.9836063385009766,0.9439356327056884,0.9834837317466736,0.0,accept,unanimous_agreement
1337641818,5043,"provided that the comment i added is correct, yes.",0,0,0,0.9802438020706176,0.981554925441742,0.9934192299842834,0.0,accept,unanimous_agreement
1338442899,5043,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
1338443933,5043,"space after ,",0,0,0,0.9779988527297974,0.9863249659538268,0.9888643026351928,0.0,accept,unanimous_agreement
1340008513,5043,should you reassign `clipatt0` after `splitat`? to be sure you shift the correct one and make no assumptions about how `splitat` mutates the clips previously present?,0,0,0,0.9871745109558104,0.9940808415412904,0.9939711689949036,0.0,accept,unanimous_agreement
1340105094,5043,"yes, that's a potential crash indeed. will publish a fix ...",0,0,0,0.5303690433502197,0.931335747241974,0.8038052320480347,0.0,accept,unanimous_agreement
1347001862,5043,"i see the commit that fixes envelopes. i read through all uses of envelopes in this file, to see if it is complete. do these need any changes? i think not, but let me know the code paths were tested too and recommended to qa. `insertsilence` `appendsilence` `clearandaddcutline` `expandcutline`",0,0,0,0.9825109839439392,0.96311354637146,0.9688227772712708,0.0,accept,unanimous_agreement
1347007576,5043,this comment raises a lot of questions about a function used in many places. did you study all those uses?,0,0,0,0.7329836487770081,0.7659160494804382,0.9654802680015564,0.0,accept,unanimous_agreement
1347012550,5043,"you don't need the comment above. we have done the work to guarantee it now that this is always so: upgrading the opening of old files with misalignment, and changing what happens when mono tracks are joined into stereo.",0,0,0,0.9833696484565736,0.9887610077857972,0.9929043650627136,0.0,accept,unanimous_agreement
1347017085,5043,that comment line might be kept,0,0,0,0.9887166023254396,0.98782479763031,0.9934921860694884,0.0,accept,unanimous_agreement
1347020577,5043,"i see this commit that changes join behavior, and i ask whether it might make unnecessary changes in case clips already have equal stretches.",0,0,0,0.9817404747009276,0.9597431421279908,0.9861978888511658,0.0,accept,unanimous_agreement
1347037548,5043,"if the function can already return false for failure, and uses of it are checked, maybe there should not be an assertion.",0,0,0,0.9796003699302672,0.9916303753852844,0.9813722372055054,0.0,accept,unanimous_agreement
1347115648,5043,"i'm confused. `true` not `false` must be passed if the intention is not to change behavior in this path, as the comment suggests. that is, to pass the default for `split` to `pasteone`, which is `true`, but is also the negation of `merge`. places where you can reach this: - repeat effect - paulstretch - cut, copy, split cut by label - track::synclockadjust (but is this in fact unreachable because of overriding functions?) other places, but where i think the destination track is always empty so it does not matter: - stereo to mono - benchmark",-1,0,-1,0.770275354385376,0.7726688981056213,0.7853071093559265,-1.0,accept,majority_agreement
1347123797,5043,"reviewing this commit, i looked at all uses of `pasteone`, and there is one call that was not rewritten, because it passes a defaulted value. that is in sync-lock adjustment of a wavetrack to lengthen it with silence. was this case tested? is the desired behavior to insert silence without splits, or with them? is this consistent with other insertions of silence, like the silence audio command?",0,0,0,0.9827569723129272,0.9937458038330078,0.9762776494026184,0.0,accept,unanimous_agreement
1347132765,5043,the commit that made this change fails to compile because one more use of `split` remains in `wavetrack::pasteone`,0,0,0,0.973421275615692,0.9909431338310242,0.9914571642875672,0.0,accept,unanimous_agreement
1347149817,5043,"i see an exact comparison of floating point values, and i want to know whether they were first rounded to a multiple of the same inverted rate. that's not obvious in context here.",0,0,0,0.9731591939926147,0.9301143288612366,0.9787078499794006,0.0,accept,unanimous_agreement
1347154419,5043,"and: please amend the comment for this commit, with some line breaks",0,0,0,0.974617063999176,0.9873887300491332,0.9943137168884276,0.0,accept,unanimous_agreement
1347155278,5043,this repairs the build failure of two commits previous,0,0,0,0.9806295037269592,0.9881446361541748,0.992282211780548,0.0,accept,unanimous_agreement
1347159059,5043,"so, behavior may change in the case editing can't move clips, and merge is true. the lines after this small-scope `if` happen when they did not happen before.",0,0,0,0.9876526594161988,0.9847002029418944,0.9923330545425416,0.0,accept,unanimous_agreement
1347162011,5043,same question here as in the previous commit: should times be rounded before comparison?,0,0,0,0.9854021072387696,0.9934321641921996,0.9920088052749634,0.0,accept,unanimous_agreement
1347165474,5043,"good catch, now i'm embarrassed i didn't flag this problem in earlier reviews",-1,-1,-1,0.9000823497772217,0.5003904104232788,0.992595374584198,-1.0,accept,unanimous_agreement
1347177601,5043,"remember, i prefer to keep include directives sorted by the last path component only, because path prefixes will often change (shorten) as we make more libraries. so omit this please.",0,0,0,0.9589595794677734,0.9859236478805542,0.9933125376701356,0.0,accept,unanimous_agreement
1347216475,5043,ignore what i said about exception safety: this is still right. but i would like to conserve this assertion of the postcondition.,0,0,0,0.9338380098342896,0.9471603631973268,0.9889806509017944,0.0,accept,unanimous_agreement
1347227511,5043,"yes, this corrects a mistake i introduces at af5911aa2e59f1ebcdc0c4e5e8c8e9581fb49dd5",0,0,0,0.9701060652732848,0.9564436078071594,0.9899531006813048,0.0,accept,unanimous_agreement
1347264826,5043,"not tested but examined: the other places pass unstretched time values to the envelope methods, which looks correct. i added qa test cases nevertheless :thumbs_up:",0,1,1,0.9052039980888368,0.8537747263908386,0.9851711392402648,1.0,accept,majority_agreement
1347265299,5043,no i haven't.,0,0,0,0.8843609094619751,0.9597559571266174,0.982358992099762,0.0,accept,unanimous_agreement
1347267718,5043,"that doesn't invalidate this statement that we are assuming equal boundaries, though, does it?",0,0,0,0.9663428664207458,0.9849099516868592,0.9730435013771056,0.0,accept,unanimous_agreement
1347277062,5043,"ah, crap, i forgot that check ... thank you !",-1,-1,-1,0.8023229837417603,0.6603750586509705,0.7166358828544617,-1.0,accept,unanimous_agreement
1347280362,5043,yeah sure.,0,0,0,0.9503239393234252,0.9667165279388428,0.9592881202697754,0.0,accept,unanimous_agreement
1347291255,5043,"we do assume that, and there will be nothing left todo later",0,0,0,0.98191636800766,0.9865293502807616,0.9716140627861024,0.0,accept,unanimous_agreement
1347302944,5043,"right, should be `true`. your mention of paulstretch made me uncover another bug, where when applied to a stretched clip results in the not-enough-room error. i'll have a fix commit for that.",0,0,0,0.9794817566871644,0.968596875667572,0.983985722064972,0.0,accept,unanimous_agreement
1347311317,5043,"the default value was negated, and so was its usage in `pasteone`, so all good here. the intention was from the very start not to change the behaviour for existing usages, so i haven't reconsidered them.",0,0,0,0.9422248601913452,0.970732569694519,0.9379361271858216,0.0,accept,unanimous_agreement
1347325893,5043,"you're right, adding some rounding at the beginning of that method.",0,0,0,0.9786427021026612,0.9720447063446044,0.988269567489624,0.0,accept,unanimous_agreement
1347326823,5043,where do you see the need for line breaks?,0,0,0,0.9805814027786256,0.9879263639450072,0.9856160879135132,0.0,accept,unanimous_agreement
1347334124,5043,they probably should. addressing ...,0,0,0,0.9479920268058776,0.9625226259231568,0.9800354838371276,0.0,accept,unanimous_agreement
1347489450,5043,"i remember your objection from a previous pr, but in that case the headers were ordered if one omitted the `../..`. here they were out of order whether accounting for path prefixes or not.",0,0,0,0.9850178360939026,0.9857396483421326,0.9883008003234864,0.0,accept,unanimous_agreement
1348897726,5043,"why is `preserve` non-default? other effects using a time warper pass the default `true` -- except nyquist, which lets the lisp code choose. and now i also see that noisereduction uses non-default for `merge` and i question that other inconsistency.",0,0,0,0.9715341925621032,0.9659222960472108,0.96055406332016,0.0,accept,unanimous_agreement
1348915632,5043,"just being extra cautious: the code before didn't preserve splits, and i didn't want to change that behaviour here.",-1,0,0,0.7803668975830078,0.7225671410560608,0.9565224051475524,0.0,accept,majority_agreement
1348917117,5043,"motivation in noisereduction.cpp would have been the same, i should think.",0,0,0,0.9731894731521606,0.9871403574943542,0.9842506647109984,0.0,accept,unanimous_agreement
1348922399,5043,must you also copy `mprojecttempo` to be sure `getstrectchratio` returns the same for both clips?,0,0,0,0.9896055459976196,0.9948570728302002,0.9945435523986816,0.0,accept,unanimous_agreement
1348924445,5043,this part looks good -- but you might even add `+ 1` to this `begin`,1,1,0,0.7794084548950195,0.6890219449996948,0.8424098491668701,1.0,accept,majority_agreement
1348936136,5043,"this used to be the case when i put my designer cap on and decided the leftmost ratio were to be applied to the other clips, but that's not true anymore: all clips must be rendered unless there is consensus.",0,0,0,0.9789251089096068,0.9859538674354552,0.988906741142273,0.0,accept,unanimous_agreement
1348940881,5043,"i don't expect there to be a use case for that: an empty clip normally is something freshly created for future insertion into a track, at which stage it gets the project tempo update. but it wouldn't hurt to be extra cautious. will add a to-be-squashed commit for that.",0,0,0,0.930410087108612,0.7684603929519653,0.9578636884689332,0.0,accept,unanimous_agreement
1348952204,5043,oh i'm a fool,-1,-1,-1,0.9867312908172609,0.9459018707275392,0.9936588406562804,-1.0,accept,unanimous_agreement
1255092217,4881,doxygen,0,0,0,0.9761431217193604,0.9349312782287598,0.9827454686164856,0.0,accept,unanimous_agreement
1255092935,4881,no,0,0,0,0.922592043876648,0.8846297860145569,0.9063705205917358,0.0,accept,unanimous_agreement
1255094311,4881,project tempo is not copied. i might understand why but comment that,0,0,0,0.9806397557258606,0.939517080783844,0.9893428087234496,0.0,accept,unanimous_agreement
1255094586,4881,here too,0,0,0,0.977906346321106,0.9846388697624208,0.9838451147079468,0.0,accept,unanimous_agreement
1255567193,4881,first commit fails to build. waveformview.cpp and samplehandle.cpp.,0,0,0,0.8246803283691406,0.9879947304725648,0.910119891166687,0.0,accept,unanimous_agreement
1255579024,4881,"`getsequencestartsample` is now used only in `getbestblocksize` and that function exists only to give hints for destructive effects that loop over all samples of a channel, grabbing them in blocks and processing. so that too may disappear, later.",0,0,0,0.986335515975952,0.9928795695304872,0.992732584476471,0.0,accept,unanimous_agreement
1255584134,4881,"should all mentions of ""play"" in function names or comments in this header file also change to ""visible"" for consistency?",0,0,0,0.9862350821495056,0.9951013922691344,0.9949567914009094,0.0,accept,unanimous_agreement
1255589990,4881,the commit that changes this name fails to compile spectrumview.cpp and spectrumcache.cpp,0,0,0,0.930151104927063,0.9858893156051636,0.9843276143074036,0.0,accept,unanimous_agreement
1255597405,4881,"the commit for pencil tool does some irrelevant things in spectrum view. i'd like the minimal changes to maintain compilation to go into the previous commit, and all the more substantial changes attempting to correct spectrum view, in the last one.",0,0,0,0.961759626865387,0.9704741835594176,0.8472002744674683,0.0,accept,unanimous_agreement
1255598241,4881,... but compilation of spectrum code is still broken in this commit anyway.,0,-1,-1,0.8599125742912292,0.5310208797454834,0.6059725880622864,-1.0,accept,majority_agreement
1255675636,4881,"samplehandle.cpp is the first part of this pull request that i am studying more deeply. i see how this function, used in hit testing, now changes rate when inside a clip. but there is still a use of `wavetrack::getfloats` in `samplehandle::hittest.` should we eliminate all uses of `getfloats` in here? should hit test fail if the cursor is not inside the x coordinate boundaries of a clip? (or within some pixel width tolerance or the boundaries?)",0,0,0,0.9645731449127196,0.9873665571212769,0.9442352056503296,0.0,accept,unanimous_agreement
1255677502,4881,"i also see `getenvelopeattime` is used, but that calls `getclipattime`, so if the latter hit-tests correctly for the x coordinate, so does the former.",0,0,0,0.988541066646576,0.9918339252471924,0.9943367838859558,0.0,accept,unanimous_agreement
1255681050,4881,"`envelope::getvalue` is also called, passed a sample duration. maybe that use of rate needs to be corrected for the clip, and maybe it is unimportant when getting just one value.",0,0,0,0.9673830270767212,0.9864680767059326,0.990120530128479,0.0,accept,unanimous_agreement
1255685692,4881,"i'm looking at what did not change in these routines, as well as what did. there are samplecount members of samplehandle.h and the track's longsamplestotime is used to quantize the time value to a discrete sample count, by the wavetrack's rate. i think that should no longer happen -- instead it should always quantize according to a clip's rate and stretch.",0,0,0,0.9708274006843568,0.987685203552246,0.9797506928443908,0.0,accept,unanimous_agreement
1255702075,4881,"some edge-case behavior of the paintbrush tool will change. first, maybe two clips are touching, you click just right of the boundary, and where before the left hand clip might be changed too, now it isn't. secondly, this routine has an asymmetry. fetching some initial out-of-bounds zeroes lets it succeed, but you fail instead of fetching right. to be really conservative, getting and setting of samples from neighboring clips, when there are only unit sample rations (because the user doesn't use tempo or time stretch at all), should work. but this is a very edgy edge-case in a little known and used feature.",0,-1,0,0.7171019315719604,0.8507527709007263,0.8815997242927551,0.0,accept,majority_agreement
1255715005,4881,"good question, and i should have asked it too about the other use of `envelope::getvalue` in this file. the previous commit ""project tempo changes affect waveclip stretch ratios ..."" updates the times and durations stored directly in the waveclip immediately whenever there is a tempo change. and presumably that will happen too when adjustment of individual clips is implemented. and therefore when you hit-test clips by time, no additional accounting for ratio is needed. but you did not, in that commit, to anything to adjust the envelope values. either you should do that, or else adjust time with ratios here. maybe it's easier to understand to update all times and durations, in envelope as well as waveclip, to complete this. and maybe that would incidentally fix other misbehavior of envelope display that you showed me yesterday?",1,0,1,0.8309435844421387,0.5569151639938354,0.6771792769432068,1.0,accept,majority_agreement
1255724157,4881,"i'm reviewing changes in drag now, paying attention to what did not change as well as what did. i mentioned before the two `samplecount` typed members of samplehandle. they are [code block] and they are used in drag. but they depend on `longsamplestotime` and `timetolongsamples` which should be avoided now. change those two to store pixel x coordinates instead -- that is, `viewinfo::timetoposition` values will quantize the time, suitable for a comparison of click position with drag position.",0,0,0,0.9787006974220276,0.9906435608863832,0.9787241220474244,0.0,accept,unanimous_agreement
1255727060,4881,"compute a time value at the top of drag, not a samplecount value s0.",0,0,0,0.9857178926467896,0.9841698408126832,0.993259847164154,0.0,accept,unanimous_agreement
1255730947,4881,"i have no more to say about the sample handle. it was good to review this -- and understand how pixel to time and inverse mappings will work with the new data structures, and to understand what's missing for envelope.",0,1,1,0.7156497240066528,0.5076636075973511,0.9646628499031068,1.0,accept,majority_agreement
1255732539,4881,"i haven't felt the need to change these, possibly because these refer to time points, hence stretching makes no difference.",0,0,0,0.7283676862716675,0.8736094236373901,0.979596734046936,0.0,accept,unanimous_agreement
1255896420,4881,this morning i addressed spectrum drawing in a decent way i think. i squashed those changes and force-pushed. these lines are outdated.,-1,0,0,0.7718150615692139,0.6837848424911499,0.89249587059021,0.0,accept,majority_agreement
1255942967,4881,"nice that you found that `getvalue` use and the potential for confusion the sample-step argument has. afaics in the implementation, step size only becomes relevant for queries of more than one value. this step size defaults to 0. with more time i'd consider removing that optional argument and hard-code it to zero when it calls `getvalues` underneath. but here i'll just use the default value instead of the sample period.",0,0,1,0.5883737206459045,0.8885118961334229,0.9497104287147522,0.0,accept,majority_agreement
1255947453,4881,it's preferable ; using `getfloatat` instead. thank you.,1,1,1,0.9706171154975892,0.9277543425559998,0.9525301456451416,1.0,accept,unanimous_agreement
1255952870,4881,"indeed this is the approach taken, in that one-liner commit, calling `menvelope->rescaletimesby(ratiochange)` when project tempo change is reported.",0,0,0,0.9893807172775269,0.9940595626831056,0.9917935729026794,0.0,accept,unanimous_agreement
1288491442,4881,"reviewing the first commit. rather than removing all bounds checks on t, i think you should just change the initialization of `mrange`. see how there are checks on the neighboring clips, to limit the drag so that clips do not overlap. are you sure that stretching will still also avoid clip overlap? also will it avoid dragging the left end of the clip beyond the right end? (though i suppose negative stretch on a clip could make sense in theory)",0,0,0,0.9810746312141418,0.9912992119789124,0.9859057664871216,0.0,accept,unanimous_agreement
1288649198,4881,uniform initialization syntax?,0,0,0,0.9875409007072448,0.9848624467849731,0.9911407828330994,0.0,accept,unanimous_agreement
1288757612,4881,"skipping ahead to one of the easier small commits: persistency looks correct. i might this up while i had an excuse to change it, eliminating the repetition of string literals like ""rawaudiotempo"" and the rest, using named constants. take or leave that suggestion.",0,0,0,0.9841337203979492,0.9669606685638428,0.9479312896728516,0.0,accept,unanimous_agreement
1288793795,4881,"i would rename it `remapcutlines` and only do the `shiftby`, which later determines the point to paste at, when the cutline is later expanded. only then, do the `stretchrightto` part. this delays not only the expense of stretch calculation until it is really needed, but would also avoid compounding of data losses in case stretching happens more than once before cutline expansion. `waveclip::expandcutline` is already defined in terms of `waveclip::paste`, so maybe whatever you do to change paste will also cover cutline expansion -- except that, perhaps the new clip boundaries should not be made for cutline expansion.",0,0,0,0.9747902154922484,0.9920721650123596,0.9899112582206726,0.0,accept,unanimous_agreement
1288923727,4881,"you mean ""stretches"" not ""sets""",0,0,0,0.9702456593513488,0.9914986491203308,0.9876305460929872,0.0,accept,unanimous_agreement
1288930148,4881,"you add this comment, only to remove it in a later commit. maybe amend this commit instead.",0,0,0,0.984122633934021,0.9873327612876892,0.9936687350273132,0.0,accept,unanimous_agreement
1288971606,4881,"i think the comments don't match the function names and are confusing. ""stretchleftto"" is really stretching the left bound while fixing the right bound. the clip is stretched ""from"" the invariant right visible bound ""to"" a new left bound. or say ""stretches the left from its present position to the absolute time"" it would also be good to comment that nothing happens if `to` is right of the present right bound. mutatis mutandis for the other function.",0,0,0,0.9284096956253052,0.9321035742759703,0.7296861410140991,0.0,accept,unanimous_agreement
1289807213,4881,"reviewing the fifth commit. if i read the function above in isolation, i see there might be a crash if when `oldtempo.has_value()` but `mprojectratio` does not. i had to reread other code outside of waveclip to convince myself the crash won't happen (`wavetrack::insertclip`). i would prefer you just crash-proof the function by changing the numerator to `mprojecttempo.value_or(*oldtempo)`",0,0,0,0.9792068004608154,0.9923033714294434,0.9787213802337646,0.0,accept,unanimous_agreement
1289811957,4881,"then, more than that: i think you are making an assumption that `mprojecttempo` is a cache of the previously seen `newtempo` value, which is expected to be the same as `oldtempo`. the cache is needed for `getstretchratio`. so you can use an assertion to document this assumption. it won't crash release code if violated, but violations might mean something plays at wrong tempo. so, a precondition: `assert(!(mprojecttempo.has_value() && oldtempo.has_value()) || *mprojecttempo == *oldtempo);` re-stated maybe informally in the header file: "" first ever invocation on this object, or else `oldtempo` equals the last seen `newtempo`""",0,0,0,0.92251318693161,0.9912990927696228,0.9860270023345948,0.0,accept,unanimous_agreement
1289816243,4881,"i see this change, and the first thing i think is, was similar stretching of `getvisiblesamplecount` also done where needed at every other call of that function or use of its underlying member variables? i don't know the answer just now. it's not so quick to determine that. code review often means examining what did not change, not only what did change.",0,0,0,0.9153205752372742,0.9148678183555604,0.9736968874931335,0.0,accept,unanimous_agreement
1289818359,4881,"i read this, and i want to change the function name to `durationtosamples`. if this change is correct, that better describes the meaning of the return value. as with the distinction of durations from time points (as types!) in std::chrono.",0,0,0,0.9655544757843018,0.9876179695129396,0.9904809594154358,0.0,accept,unanimous_agreement
1289818870,4881,and then i would reexamine every use of the function to be sure they are correct.,0,0,0,0.9816716313362122,0.9783575534820556,0.9925246834754944,0.0,accept,unanimous_agreement
1289821070,4881,this too might change its name,0,0,0,0.9840625524520874,0.9749317169189452,0.9906249642372132,0.0,accept,unanimous_agreement
1289830556,4881,"this function could be private, and instead `getplaystarttime` and `getplayendtime` can be commented, that the return values are always multiple of the inverse of the track's stored rate, but that rate is independent of tempo changes or stretch.",0,0,0,0.9870274662971495,0.9935478568077089,0.99311500787735,0.0,accept,unanimous_agreement
1289838970,4881,this function is not yet used at the commit i am reviewing. can it be made private?,0,0,0,0.9875398874282836,0.9881029725074768,0.9955629110336304,0.0,accept,unanimous_agreement
1289842871,4881,"what this function really does, is get the play end time, which is on the realtime time-line, but then subtract one sample duration, but that duration is on the different scale of the track's internal rate unadjusted for stretch. am i mistaken or is the purpose confused?",0,0,0,0.9631175994873048,0.7787330746650696,0.9628812670707704,0.0,accept,unanimous_agreement
1289846959,4881,the correction by `getappendbufferlen` was removed. was that your omission or an intended bug fix?,0,0,0,0.981609582901001,0.9930332899093628,0.9947991371154784,0.0,accept,unanimous_agreement
1289859277,4881,"you are changing edge case behavior! i don't know what subtle off-by-one errors may result, or may be corrected. i looked back in history and found this comment added at commit e5dc8928dcc3a26bbd878d85682e9dbc1fd6f492 which references [a link] [code block] this commit changed < to <= for the test at the right boundary. i suggest you go to the bugzilla page, and do the steps to reproduce, to be sure there is no regression.",0,-1,-1,0.7197010517120361,0.655566394329071,0.8729722499847412,-1.0,accept,majority_agreement
1289860629,4881,"see also later commits 1cc2f3b6fe250c71fc919b5738e726f360d1758d, a58328c3df0e9ace0362c28e93f449dba3322ee0, to understand the ancestry of this function.",0,0,0,0.9867541193962096,0.9925494194030762,0.9936475157737732,0.0,accept,unanimous_agreement
1289867121,4881,"please comment these new data members and also the old ones. the invariant assumed for `msequenceoffset`, `mtrimleft`, `mtrimright` are that they are always realtime durations. but the sample interval `1 / mrate` is not necessarily realtime duration. `mclipstretchratio` is used in `getstretchratio` which computes the factor, by which the sample interval is multiplied, to get a realtime duration.",0,0,0,0.9884430766105652,0.9943458437919616,0.991675615310669,0.0,accept,unanimous_agreement
1289869862,4881,should instead `getstretchratio() / mrate` be the subtracted term?,0,0,0,0.9857770800590516,0.994424283504486,0.9943793416023254,0.0,accept,unanimous_agreement
1289874104,4881,"also: at commit 1cc2f3b6fe250c71fc919b5738e726f360d1758d, vitaly changed some member function names but neglected to update the comment. i would not only fix this, but improve the statement: `beforeplayregion, afterplayregion, and withinplayregion are mutually exclusive and exhaustive.` and now i must prove to myself that this remains true. and that was easily done with inspection.",0,0,0,0.9342864751815796,0.9722040295600892,0.951833963394165,0.0,accept,unanimous_agreement
1289877734,4881,what you assert at the top of this and the following new functions should be mentioned in the header file comments as ``,0,0,0,0.983773708343506,0.9908458590507508,0.9953108429908752,0.0,accept,unanimous_agreement
1289922506,4881,"this function is true in case the play region is a proper subset of [t0, t1)",0,0,0,0.9847257733345032,0.9927923679351808,0.9945542812347412,0.0,accept,unanimous_agreement
1289951582,4881,maybe `intersectsplayregion` -- this is the non-disjointness test,0,0,0,0.9854164719581604,0.9947335720062256,0.9937196969985962,0.0,accept,unanimous_agreement
1289953251,4881,maybe it is correctly used but maybe the name misleads.,-1,0,0,0.7952175140380859,0.9645462036132812,0.9522042274475098,0.0,accept,majority_agreement
1289955042,4881,"this one is the test for what you might describe as ""properly partial overlap"" excluding the case that either interval is a subset of the other",0,0,0,0.9828277826309204,0.9916368126869202,0.9921780228614808,0.0,accept,unanimous_agreement
1289955952,4881,"or simply ""includesplayregion""?",0,0,0,0.987144649028778,0.9927559494972228,0.9945728182792664,0.0,accept,unanimous_agreement
1289959253,4881,"that name is unsatisfactory -- rather ""playregionwithin"" ? its the interval that extends the play region, not the opposite. when i read a member function name, i think of `this` as the subject of whatever verb is in it. all right, some better naming is needed for this set of functions, and i haven't necessarily given the best names yet.",0,0,0,0.8663669228553772,0.9295825958251952,0.7965654134750366,0.0,accept,unanimous_agreement
1289972224,4881,this change is not equivalent to the original. do you mean `extendsplayregiononbothsides`,0,0,0,0.9787667989730836,0.9882614016532898,0.9937241673469543,0.0,accept,unanimous_agreement
1289984388,4881,"maybe you did this at a later commit -- but while i review ""make waveform display work again"", i see that the `0.5` should be changed to `true`",0,0,0,0.9868125319480896,0.9939928650856018,0.9902426600456238,0.0,accept,unanimous_agreement
1289992943,4881,"the variable name might be updated. `sppmatch` perhaps. and update ""pps"" in the comment.",0,0,0,0.9894746541976928,0.9948712587356568,0.9942540526390076,0.0,accept,unanimous_agreement
1290005838,4881,"i assume you change this line in a later commit, but why not make it right in this commit?",0,0,0,0.9707030653953552,0.9880714416503906,0.9869621992111206,0.0,accept,unanimous_agreement
1290029961,4881,i have a doubt about the correctness. where did the `averagepixelspersample` value come from? i found it in the function `calculateadjustmentforzoomlevel`. that function uses clip rate but not stretch ratio. so i think it computes an incorrect pixels per sample value. i'm not sure what consequences follow.,-1,-1,-1,0.6189852356910706,0.6845082640647888,0.769812285900116,-1.0,accept,unanimous_agreement
1290034967,4881,"i think the fix for that may just be to initialize `clipparameters::rate` accounting for ratio, and also remove `stretchratio` in `drawclipwaveform` and maybe i haven't seen that yet in a later commit where you did it?",0,0,0,0.9876508116722108,0.9948171973228456,0.9907351732254028,0.0,accept,unanimous_agreement
1290049746,4881,"i reexamined just what is done with `clipparameters::rate` and i see that for spectrograms, sometimes the rate is used for calculations relating to the y coordinate on the frequency scale -- and those should still use the unadjusted clip rate, but other calculations that convert sample counts to time points should be updated. so i anticipate seeing this as i review later commits.",0,0,0,0.9761129021644592,0.9842901825904846,0.9871276617050172,0.0,accept,unanimous_agreement
1290055171,4881,"it's good to see these comments. strictly they should be added in the commit ""project tempo changes affect waveclip stretch ratios""",1,1,1,0.5837443470954895,0.7015122175216675,0.9298979043960572,1.0,accept,unanimous_agreement
1290072883,4881,"i am skipping review of the pencil tool for now to work on the commit for spectrum view. i think this commit and the one for waveform view should be combined into one -- the commit for waveform that i reviewed is not really complete without some of these changes. as i anticipated, you needed to change `clipparameters` to remember the sample rate and the stretch, from which a correct sample rate can be computed. however -- were all the necessary changes made in all places where the old code used rate? i doubt it, and will give details.",0,0,0,0.914112627506256,0.9456688165664672,0.9596143364906312,0.0,accept,unanimous_agreement
1290076227,4881,it's good to see `const` members replacing assignments within the constructor body. that aids understanding of the rest of the class and its uses. maybe you can do the same for more of the member variables.,0,0,0,0.8829328417778015,0.8316099047660828,0.7261934876441956,0.0,accept,unanimous_agreement
1290434250,4881,"i would prefer that you don't permute these lines. leave them alphabetical by the last path component. as more files move to libraries, and the `#include` lines change, there is just removal of `../` and can make a smaller diff.",0,0,0,0.9832119345664978,0.9876668453216552,0.9905281066894532,0.0,accept,unanimous_agreement
1290443728,4881,"these lines change the resulting time selection, but i don't understand why.",0,0,0,0.7268457412719727,0.7622442245483398,0.9132850170135498,0.0,accept,unanimous_agreement
1290455407,4881,"i think this omission should have been detected sooner, when testing #4867 or #4870. i think it will affect copy/paste and undo/redo for all track types. i will add to the qa checklist.",0,0,0,0.986294686794281,0.9801053404808044,0.9749417901039124,0.0,accept,unanimous_agreement
1290877515,4881,"indeed that's a better approach. no, stretching could have led to overlapping clips. i pushed a fix commit on top of this branch.",0,0,0,0.9659426212310792,0.984684944152832,0.990346610546112,0.0,accept,unanimous_agreement
1291195130,4881,i think this line is unnecessary because `track::init` was called in `emptycopy` and that copied the tempo.,0,0,0,0.969922125339508,0.987629532814026,0.9800401926040648,0.0,accept,unanimous_agreement
1291210799,4881,"but -- the comments are contradicted now by the changes in ""repair wavetrack copy/paste/join"" so what's right? did you try the cross-project case of copy/paste? did you copy copying to clipboard, closing source project, then pasting?",0,0,0,0.9800089597702026,0.9849297404289246,0.9896607398986816,0.0,accept,unanimous_agreement
1291214374,4881,some objections i raised in earlier commits are resolved here. it is easily seen that none of the optionals are dereferenced without checking first.,0,0,0,0.9861326217651368,0.9924295544624328,0.9907354712486268,0.0,accept,unanimous_agreement
1291220522,4881,good to see these `settrim*` calls for completeness. did you see any bad consequences when they were omitted?,1,0,1,0.7456157207489014,0.6159931421279907,0.8734661936759949,1.0,accept,majority_agreement
1291224769,4881,"you apply stretch ratio after any needed resampling or change of format. resampling to a lesser rate might be theoretically lossless for a band-limited signal, but maybe not practically. change of format to a lesser bit width mixes in some dither noise. maybe it's better to stretch first and make those other transformations after, for better quality?",0,0,0,0.9780898094177246,0.9746496677398682,0.9855719804763794,0.0,accept,unanimous_agreement
1291227416,4881,i would add `assert(getstretchratio() == 1);` which is the postcondition,0,0,0,0.9876634478569032,0.9932471513748168,0.9945095181465148,0.0,accept,unanimous_agreement
1291229599,4881,"you make side-effects on the waveclip object here, but before all operations have succeeded, and some might fail throwing exceptions because we run out of drive space for the database. i would rather bullet-proof this. add `bool success = false;` and assign it true only at the bottom of the function. test `success` in the `finally` and if it is false, restore trim-left and trim-right to their old values.",0,0,0,0.9775521755218506,0.98681378364563,0.986112415790558,0.0,accept,unanimous_agreement
1291234679,4881,maybe too small. did you see if it helps performance of clip joining to go larger?,0,0,0,0.9704686999320984,0.9771845936775208,0.9625900983810424,0.0,accept,unanimous_agreement
1291237505,4881,"`flush` might fail and throw. so instead, swap `newsequences` into place. in the `finally`, if there is not success, then swap again.",0,0,0,0.9684090614318848,0.9910261034965516,0.9831218123435974,0.0,accept,unanimous_agreement
1291239332,4881,`numprocessedsamples` never varies. should you remove it and use `numoutsamples`?,0,0,0,0.9869438409805298,0.9927979111671448,0.993657648563385,0.0,accept,unanimous_agreement
1291239911,4881,this function follows a comment that used to be attached to the following function.,0,0,0,0.9856783747673036,0.991990864276886,0.9945144653320312,0.0,accept,unanimous_agreement
1291245486,4881,some of my earlier comments are irrelevant now after these changes in the interval test functions,0,0,0,0.9718101620674132,0.9864233136177064,0.975543200969696,0.0,accept,unanimous_agreement
1293207703,4881,"nice that you spot this, it's outdated. i later realized there were places where a track was copied for the clipboard, but before it was re-contextualized by being added to a project, boundary-related queries were made onto its clips. hence the change of strategy: clip and track copies inherit the context from `orig`, and the pasting code is repsonsible for re-contextualization. will remove.",0,0,1,0.8742287755012512,0.5325897336006165,0.9721245765686036,0.0,accept,majority_agreement
1293215009,4881,"perfect, thanks for doing my job.",1,1,1,0.9647114872932434,0.969386339187622,0.989628791809082,1.0,accept,unanimous_agreement
1293221039,4881,"... although, it can be that a clip (and its track) is copied from one project to another, in which case cached project tempo and `oldtempo` may differ.",0,0,0,0.9827856421470642,0.978613555431366,0.9897213578224182,0.0,accept,unanimous_agreement
1293226595,4881,"as we agreed verbally last thursday, i will leave it as is, since `stretchrightto` does not apply time-stretching, but only modifies the `double mclipstretchratio` value.",0,0,0,0.9861730933189392,0.9935611486434937,0.9943153262138368,0.0,accept,unanimous_agreement
1293232028,4881,"yes. can't remember exactly what, probably overlapping clips.",0,0,0,0.8209180235862732,0.7135055661201477,0.918788731098175,0.0,accept,unanimous_agreement
1293258140,4881,"thanks for that remark. resampling: computational cost: the fastest would be to time-stretch before in case of upsampling, and after in case of downsampling. quality: i do not know the algorithm sufficiently to say what influence the order has. i would have guessed that it can only be better with more frequency information, hence in case of downsampling i'd have first stretched and then downsampled. david hearn doesn't believe this to have a noticeable consequence. sample-format: computational cost: i suppose calculations are faster on lower precision samples, but i'm largely ignorant on the matter - that'd be a question to . quality: i don't expect a perceivable difference here. if someone is of another opinion i'd consider testing. the only obvious impact i see is wrt performance when resampling. i'll push something that handles this.",1,0,1,0.7354169487953186,0.4877502620220184,0.9691495895385742,1.0,accept,majority_agreement
1293259727,4881,"thanks for that remark. resampling: computational cost: the fastest would be to time-stretch before in case of upsampling, and after in case of downsampling. quality: i do not know the algorithm sufficiently to say what influence the order has. i would have guessed that it can only be better with more frequency information, hence in case of downsampling i'd have first stretched and then downsampled. david hearn doesn't believe this to have a noticeable consequence. sample-format: computational cost: i suppose calculations are faster on lower precision samples, but i'm largely ignorant on the matter - that'd be a question to . quality: i don't expect a perceivable difference here. if someone is of another opinion i'd consider testing. the only obvious impact i see is wrt performance when resampling. i'll push something that handles this.",1,0,1,0.7354169487953186,0.4877502620220184,0.9691495895385742,1.0,accept,majority_agreement
1293261630,4881,"thanks for that remark. resampling: computational cost: the fastest would be to time-stretch before in case of upsampling, and after in case of downsampling. quality: i do not know the algorithm sufficiently to say what influence the order has. i would have guessed that it can only be better with more frequency information, hence in case of downsampling i'd have first stretched and then downsampled. david hearn doesn't believe this to have a noticeable consequence. sample-format: computational cost: i suppose calculations are faster on lower precision samples, but i'm largely ignorant on the matter - that'd be a question to . quality: i don't expect a perceivable difference here. if someone is of another opinion i'd consider testing. the only obvious impact i see is wrt performance when resampling. i'll push something that handles this.",1,0,1,0.7354169487953186,0.4877502620220184,0.9691495895385742,1.0,accept,majority_agreement
1293263289,4881,sure.,0,0,0,0.9536533951759338,0.9664214849472046,0.9824982285499572,0.0,accept,unanimous_agreement
1293270591,4881,"ah, this one is confusing. it's not related to analysis/synthesis size. the result will be bit-exact independently on it. it's just to limit the amount of memory in our buffer. would `buffersize` be better?",-1,-1,-1,0.916433811187744,0.9425159692764282,0.7990319132804871,-1.0,accept,unanimous_agreement
1293274081,4881,"oj - thanks. this was a bug, likely appending unwanted silence samples.",1,1,1,0.9237326979637146,0.9474360346794128,0.8790625929832458,1.0,accept,unanimous_agreement
1293294690,4881,"to restore the original sequences i'd have the `flush` in a try-catch, so that i can detect if it's failed. but it seems to me that you're suggestion something different? also, there's another such a `flush` call that's not handled (i copy-pasted from it) ; is the situation there different?",0,0,0,0.9758689999580384,0.9583382606506348,0.9922754168510436,0.0,accept,unanimous_agreement
1293305548,4881,i'm afraid i don't understand.,-1,-1,-1,0.9759289622306824,0.9465128183364868,0.9914025664329528,-1.0,accept,unanimous_agreement
1293314106,4881,"i often thought that having a type-safe differentiation between absolute and clip-relative times would spare us a few bugs and a little mental strain. i find the analogy between `std::chrono` time point and duration interesting, but i can't see how it fits here. what makes you say that `time` is a duration? `timetosamples` could very well be used to get the sample index closest to the time point `time`.",0,0,0,0.95344877243042,0.8882914781570435,0.93884015083313,0.0,accept,unanimous_agreement
1293396349,4881,"i only remember i had a reason at the time, i'm sorry i should have written this down. now it seems wrong to me the way it is, and is inconsistent with `getplayendsample()`. in any case, i really would like to clarify the meaning of the append buffer length. i guess this append buffer is here for optimization, to reduce calls to sql. if that's right, shouldn't these not-yet-committed samples _always_ be reported? `getnumsamples()` doesn't account for it, and is used in several places where i don't see why it shouldn't (e.g., in `timetosequencesamples`, non-committed samples are not accounted for).",-1,-1,-1,0.971028447151184,0.9303246736526488,0.9832210540771484,-1.0,accept,unanimous_agreement
1293473093,4881,"good suggestion. i did and the behavior is correct. you will see in `b742621` that i augmented the collection of `waveclip` methods for those kind of comparison, in an effort to make clip boundary checks in `wavetrack` easier to understand. these new methods (and renamed existing methods) have a consistent documentation and the comment you mention is probably not needed anymore.",1,1,1,0.9073094129562378,0.8924781084060669,0.971859574317932,1.0,accept,unanimous_agreement
1293473853,4881,thanks - the comment is obsolete now.,0,1,0,0.5012900233268738,0.8497216105461121,0.742604672908783,0.0,accept,majority_agreement
1293475637,4881,i added those `` later and squashed them in the relevant commit.,0,0,0,0.9873329997062684,0.9909709692001344,0.9931747317314148,0.0,accept,unanimous_agreement
1293483965,4881,"are you sure? for a clip with boundaries `[0, 1)`, `partlywithinplayregion(0.2, 0.3)` would return false, wouldn't it?",0,0,0,0.9875094294548036,0.9925423860549928,0.9936819076538086,0.0,accept,unanimous_agreement
1293487839,4881,"perfect. if it returns `false`, then the intersection of clip boundaries and `[t0, t1)` is empty.",0,0,0,0.9293478727340698,0.9468570351600648,0.9895687699317932,0.0,accept,unanimous_agreement
1293500542,4881,"indeed those are poor. thanks for the suggestion, will address.",-1,-1,1,0.4973599314689636,0.9479870796203612,0.6453322172164917,-1.0,accept,majority_agreement
1293510007,4881,"i had a need for it some place in `wavetrack`, probably, then not anymore, i suppose since i added the new boundary-check methods. will remove. sorry for having wasted your time.",-1,-1,-1,0.9879804253578186,0.9890046715736388,0.9934242963790894,-1.0,accept,unanimous_agreement
1293516876,4881,all good suggestions.,1,1,1,0.827582836151123,0.970000386238098,0.9443358182907104,1.0,accept,unanimous_agreement
1293534592,4881,sure.,0,0,0,0.9536533951759338,0.9664214849472046,0.9824982285499572,0.0,accept,unanimous_agreement
1293558819,4881,"in other words you are requesting a strong guarantee for this method? i would agree. coincidentally, not restoring the original trim values is a mistake, even in the case of successful stretching. there's a fix-up commit that does this. i don't see another state-changing method whose side-effect i should revert in case of failure. it would be useful to have a helper for this safety, like `effectoutputtracks` making a copy of the track and only replacing the original with it if successful.",0,0,0,0.9241178035736084,0.956559956073761,0.9839527010917664,0.0,accept,unanimous_agreement
1293572896,4881,it's for copy-pasting across project with different tempi. a selection of 10 seconds of audio in project a should become 5 seconds in project b if tempo in b is twice as fast.,0,0,0,0.9834372997283936,0.9775547981262208,0.9918067455291748,0.0,accept,unanimous_agreement
1293573391,4881,will comment.,0,0,0,0.9806814789772034,0.896603524684906,0.9752042889595032,0.0,accept,unanimous_agreement
1293577117,4881,"i did just that, but your review would of course be welcome.",0,0,0,0.7507534027099609,0.6977912187576294,0.890338122844696,0.0,accept,unanimous_agreement
1293589025,4881,that was wrong indeed. `coversentireplayregion` is what's in use now.,0,0,0,0.7182372808456421,0.9822399616241456,0.9268853664398192,0.0,accept,unanimous_agreement
1294348826,4881,i did.,0,0,0,0.9554957747459412,0.971515953540802,0.9033631682395936,0.0,accept,unanimous_agreement
1294363185,4881,"interesting to observe is that `beforeplayregion(double t)` and other methods taking a time point, this ambiguity doesn't seem to arise. i guess `extendsplayregiononbothsides` has this problem because `t0` and `t1` may be interpreted as a play region. renaming `extendsplayregiononbothsides` to `playregionisextendedonbothsidesby(t0, t1)` would require also renaming `beforeplayregion` and the likes to `playregionisafter` ; do we really want this? i think getting used to `extendsplayregiononbothsides` is easy.",0,0,0,0.9407469630241394,0.9804102778434752,0.9707819223403932,0.0,accept,unanimous_agreement
1294446369,4881,"this is an error in conflict resolution! shift the clips of each channel, not only those of `this` `wavetrack`.",-1,0,-1,0.8461561799049377,0.5449110865592957,0.861480176448822,-1.0,accept,majority_agreement
1294466839,4881,"this isn't right, and not what i suggested. this block is visited on function exit, whether normal or exceptional. what i suggested is: 1. at top of the function, `bool success = false;` 2. at the very bottom of the ""happy path"", after all possibly throwing calls have not thrown, assign `success = true;` 3. in this finally block, reassign the old trim left and trim right values, only if `!success` 4. also do the swapping, not assignment, of `msequences`. one swap below before the `flush`, and another conditional swap here if not successful. so, this also requires `newsequences` is declared before the `finally`.",0,0,0,0.919734537601471,0.9871108531951904,0.5499625205993652,0.0,accept,unanimous_agreement
1294469612,4881,"we both forgot something about cutlines last week: they too can have envelopes and paste envelope points into the clip when they are expanded. did you test this possibility? just as, one of these commits is a one-line fix to rescale envelopes of the main clip -- so too here, i think you must remap any envelope points in the cutline.",0,0,0,0.9785872101783752,0.9848737716674804,0.9909104704856871,0.0,accept,unanimous_agreement
1294513487,4881,"is the clip stretching handle completely correct, or must you also restore the `std::clamp`? what happens below if snapping is disabled? i don't see where `t` is limited by `mrange` on that path.",0,0,0,0.981320321559906,0.9921914935112,0.9925448298454284,0.0,accept,unanimous_agreement
1294530613,4881,"generally we prefer american spellings, ""neighbor""",0,0,0,0.9649738073349,0.9887918829917908,0.9901944994926452,0.0,accept,unanimous_agreement
1294531730,4881,i would simply write `as_const(*this)` `std::as_const` is new in c++17 and you can leave off `std::` because `wavetrack` inherits `std::enable_shared_from_this`,0,0,0,0.9798239469528198,0.9945559501647948,0.9943344593048096,0.0,accept,unanimous_agreement
1294561771,4881,maybe make that `>=`,0,0,0,0.9757497906684875,0.9925280809402466,0.9832707047462464,0.0,accept,unanimous_agreement
1294594545,4881,cool!,1,1,1,0.9857184290885924,0.9900528788566588,0.993294894695282,1.0,accept,unanimous_agreement
1294595756,4881,"me too, since audacity is originally american. that one slipped. thanks.",1,1,1,0.9477521181106568,0.9727118015289308,0.968740940093994,1.0,accept,unanimous_agreement
1294599413,4881,thank you: that's a change i forgot to revert.,1,1,1,0.8758390545845032,0.7345166206359863,0.8834279775619507,1.0,accept,unanimous_agreement
1294601556,4881,"i coincidentally thought about this earlier today and already pushed a fix. spot on, though.",0,0,0,0.977147936820984,0.9523252248764038,0.9816024899482728,0.0,accept,unanimous_agreement
1294613583,4881,"that's the piece i was missing, thank you. regarding the trimming, i attempted to explain in my earlier reply that it is correct to restore the original trim values, whether success or not. rendering stretching should not modify a clip's boundaries, trimming included. i'll add a comment.",1,1,1,0.526746928691864,0.7916733622550964,0.9372698068618774,1.0,accept,unanimous_agreement
1294617389,4881,oj ... :1st_place_medal:,1,0,1,0.7479956746101379,0.9650996923446656,0.9736421704292296,1.0,accept,majority_agreement
1294622219,4881,"... in fact i'm renaming this ""getnextclip"". ""neighbor"" could be confused with ""adjacent"".",0,0,0,0.9732086658477784,0.914962112903595,0.9834244847297668,0.0,accept,unanimous_agreement
1294636793,4881,this loop repeatedly sorts the clips by time in `getneighbourclip`. avoid that by using `getsortedcliparray` once at this level.,0,0,0,0.9848312139511108,0.9919337034225464,0.9896897077560424,0.0,accept,unanimous_agreement
1294639886,4881,the default can simply be '{}' provided then that you null-check it where you use it,0,0,0,0.988431453704834,0.9928217530250548,0.9951481223106384,0.0,accept,unanimous_agreement
1294641488,4881,here too; and i would also make a `using` type alias for the repeated type.,0,0,0,0.9892097115516664,0.9902077317237854,0.9943116903305054,0.0,accept,unanimous_agreement
1294649150,4881,and for `std::pair ` which gets repeated a lot in the overrides. nicer to name it with a single word like `unstretchinterval`,0,0,0,0.8837205767631531,0.976189136505127,0.9900051951408386,0.0,accept,unanimous_agreement
1294651298,4881,simplify the default here too,0,0,0,0.9868035912513732,0.9914000034332277,0.9948923587799072,0.0,accept,unanimous_agreement
1294659894,4881,maybe `std::lower_bound` instead of `find_if` for logarithmic not linear complexity in the number of clips. after all we are encouraging the making of many little clips. at least that's what i saw in the demo of the prototype.,0,0,0,0.9510605335235596,0.9692590832710266,0.9859707951545716,0.0,accept,unanimous_agreement
1294662613,4881,null check on `reportprogress` here,0,0,0,0.9823517203330994,0.9942134022712708,0.9941892623901368,0.0,accept,unanimous_agreement
1294665108,4881,just pass '{}',0,0,0,0.9858238697052002,0.9899084568023682,0.994398295879364,0.0,accept,unanimous_agreement
1294666683,4881,null check on `reportprogress`,0,0,0,0.9796080589294434,0.9931460618972778,0.9943519830703736,0.0,accept,unanimous_agreement
1294670159,4881,"any `xo` that you add, ask if he likes the exact words.",0,0,0,0.9854325652122498,0.944278359413147,0.9820642471313475,0.0,accept,unanimous_agreement
1294670340,4881,here too,0,0,0,0.977906346321106,0.9846388697624208,0.9838451147079468,0.0,accept,unanimous_agreement
1294670490,4881,here too,0,0,0,0.977906346321106,0.9846388697624208,0.9838451147079468,0.0,accept,unanimous_agreement
1294670985,4881,you didn't use `count`,0,0,0,0.98176908493042,0.988511085510254,0.9905260801315308,0.0,accept,unanimous_agreement
916481945,3176,"this commit is ok except i think this comment should be clearer. what is “valid”? say maybe instead, “mptrack points to the removed track, if some other shared pointer is preventing its deletion”",0,0,0,0.986816704273224,0.970289945602417,0.9644373059272766,0.0,accept,unanimous_agreement
916602347,3176,"hmm, i'm trying to say that track pointer is valid during the event in any case",0,0,0,0.979498326778412,0.8576481938362122,0.9790701866149902,0.0,accept,unanimous_agreement
927519791,3176,"i don't understand why noisereduction required special treatment. can you explain? this new function needs to be called only from realtimeeffectstateui, and noise reduction is not one of the realtime capable effects, so i don't understand how you can ever reach this override.",0,0,0,0.8305864930152893,0.7265663146972656,0.8863512277603149,0.0,accept,unanimous_agreement
927538618,3176,"as you know, i do not trust in ""something is not called now"" :-) the reason `geteffectuiclientinterface` is there for symmetry. i had some reasoning why this was not done for `nyquisteffect`, but i don't remember it.",1,1,1,0.6601095795631409,0.9804892539978028,0.9842627048492432,1.0,accept,unanimous_agreement
929698270,3176,"maybe the commit that does this should logically be last in the sequence, because all else is in place not to cause bugs in non-modality only then",0,0,0,0.9838522672653198,0.9867686629295348,0.9641481041908264,0.0,accept,unanimous_agreement
929701820,3176,agreed!,0,0,1,0.7875120043754578,0.4254315495491028,0.5302326083183289,0.0,accept,majority_agreement
929703752,3176,"this member should move earlier in the header file, before `mmainsettings` (and the initializers ordered appropriately) just so that the `` section comments are correct.",0,0,0,0.9892207980155944,0.9944095015525818,0.9952008724212646,0.0,accept,unanimous_agreement
929710046,3176,"realtimeeffectstate has a `site` which has this thing in a slot which has a `shared_ptr` to the good stuff. i might have arranged it differently: realtimeeffectstate has a `shared_ptr` to a sharedstate structure that it declares, as a `site`; then this would be a simple attachment and would not need to be cloneable. either would work. what other attchments to states might be needed in future? i don't know yet. the latter way of doing it would make it impossible for them to be un-shared.",0,0,0,0.9450783729553224,0.9659441709518432,0.9817264676094056,0.0,accept,unanimous_agreement
929713360,3176,"at first i feared a leaky `shared_ptr` cycle but then i saw `mcurrentstate` is a `weak_ptr`. good, so use `weak_from_this()` instead to make that more obvious.",0,0,0,0.959812879562378,0.9834259748458862,0.8156229853630066,0.0,accept,unanimous_agreement
929725117,3176,should there be a null check on `currentstate`?,0,0,0,0.9834923148155212,0.994170308113098,0.9930660724639891,0.0,accept,unanimous_agreement
929726910,3176,"""its""",0,0,0,0.9595107436180116,0.8795079588890076,0.9842362403869628,0.0,accept,unanimous_agreement
929728669,3176,its,0,0,0,0.955832302570343,0.8803131580352783,0.6934903860092163,0.0,accept,unanimous_agreement
929731588,3176,or just `assert(false)`,0,0,0,0.9869679808616638,0.9918237328529358,0.993805766105652,0.0,accept,unanimous_agreement
929738833,3176,"ironically, there was assert(false), but at some point i have decided to make it more explicit",0,0,0,0.858526885509491,0.983070433139801,0.9630789160728456,0.0,accept,unanimous_agreement
929749332,3176,"the `shared_ptr` is only lazily initialized. i think this means that different versions of the state in the undo history my or may not shared state. would that have bad consequences? - make a new state - do some other edit - click the cogwheel then the current track list points to the shared state but the pushed undo state does not. does this mean i could undo, click the wheel again, and have two non-modal dialogs open at once? or is there something i haven't seen yet that destroys the dialog whenever you undo and redo? (but then why have this shared state)? but swap the last two steps, and then there is sharing. if i am right that there could be a bug, then the shared_ptr should instead be assigned eagerly whenever a new state is made, then always copied. so either rearrange the storage as i suggested, or used `buildall` in the constructor of `realtimeeffectstate` and have `realtimeeffectstateui` alway make the shared state.",0,0,0,0.8979210257530212,0.8489314317703247,0.9699375629425048,0.0,accept,unanimous_agreement
929755881,3176,"the deleted code for a modal dialog restored state as it was in case the dialog is cancelled or the esc key is hit, and it pushes an undo history item for change of state if the dialog is ok'd. i don't see where this commit preserves that behavior by other means.",0,0,0,0.9742236137390136,0.9873247146606444,0.9929046034812928,0.0,accept,unanimous_agreement
929762349,3176,"replacing a weak pointer with a reference might look unsafe, but i think it is a safe enough assumption that this window will be destroyed only before the associated project.",0,0,0,0.9577429294586182,0.9650505185127258,0.9814956784248352,0.0,accept,unanimous_agreement
929772087,3176,"as it was mentioned in pr description - the undo/redo is intentionally left unimplemented for the effect parameters. and for the reference - there are several daws that do not implement it all as well and at least for ableton there were problems observed with the implementation (i. e. undo restored the parameter value to some unexpected state). if and when we decide to implement the undo/redo for stacked effect parameters - we will have to create an item for each parameter user changes (see ableton as the reference). the potential problem i expect now is that audacity project won't get ""dirty"" on parameter change, but i would rather fix it in a different pr.",0,0,0,0.8614906072616577,0.983620285987854,0.9741722345352172,0.0,accept,unanimous_agreement
929772367,3176,"when the user deletes an effect from the stack, hide the dialog. when the user replaces one effect with another in the stack, that too should hide the dialog. but i don't see a corresponding change in `oneffectlistitemchange`. that is the function reached through an observer callback.",0,0,0,0.9855024814605712,0.9910695552825928,0.9916383624076844,0.0,accept,unanimous_agreement
929773833,3176,"thank you for pointing this out, i will check.",1,1,1,0.7285858392715454,0.8931370973587036,0.9591843485832214,1.0,accept,unanimous_agreement
929774489,3176,"does this line properly belong to the earlier commit ""adds a class to manage stacked effects settings ui"" ?",0,0,0,0.9892898201942444,0.9953987002372742,0.9947242140769958,0.0,accept,unanimous_agreement
929778856,3176,i would say no,0,0,0,0.8443019986152649,0.8542993664741516,0.8280943036079407,0.0,accept,unanimous_agreement
929779427,3176,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
929779805,3176,realtimeeffectpanel is a child of projectwindow,0,0,0,0.9789419174194336,0.9865394234657288,0.9925432205200196,0.0,accept,unanimous_agreement
929780772,3176,"why is this not done in case of replacements (as indicated by evt.mextra)? i think i do understand that this can happen if you do a destructive effect application via other ui, or you finish recording, if i look for uses of `tracklist::replace`. the commit comment gave some explanation, and this code should too. but then in the case of replacement, shouldn't there be another branch to call `updaterealtimeeffectuidata`? the track object is replaced with another one which is now the current state of the track in the project.",0,0,0,0.9813756942749025,0.9923192858695984,0.9855141639709472,0.0,accept,unanimous_agreement
929783149,3176,"aha, here it is then. you are relying on the deletion and addition events both arriving, which is part of the contract in track.h. and you don't rely on the sequence of their arrival.",0,0,1,0.9862387776374816,0.8889015913009644,0.5008665323257446,0.0,accept,majority_agreement
929790241,3176,"was it agreed then with designers that the formerly specified undo/redo behavior is now abandoned? do we open another issue for the future effort to figure out the problem? if there will not be undo/redo states for the ok button, still i think something could be done: the ok button should call `modifystate` -- what also happens for the power button changes. then the change of settings becomes, not another state, but fused with whatever is the latest undo state. this is similar to what is done when you simply change the selection, and makes for argubly less surprising behavior, if after ok-ing the dialog, you undo and redo again, expecting the settings to be unchanged. besides all that, there is also the reasonable expectation that if you cancel the dialog, tentative changes of settings should be cancelled and old state restored. but nothing does that now.",0,0,0,0.9566304087638856,0.9797875881195068,0.9773138165473938,0.0,accept,unanimous_agreement
929790387,3176,right,0,0,0,0.9538289308547974,0.8996442556381226,0.9678029417991638,0.0,accept,unanimous_agreement
929790788,3176,not sure i understood why.,-1,0,0,0.8669925332069397,0.6512738466262817,0.5378299951553345,0.0,accept,majority_agreement
929795060,3176,i've talked with on that. can i see the previous specification please? afaik the dialog specified has no ok/cancel buttons whatsoever. there will be no ok button,0,0,0,0.9854816198349,0.9445275664329528,0.9906396865844728,0.0,accept,unanimous_agreement
929799884,3176,please see #3090 for the design. stackable effects are really different from what happens on destructive path so there are different assumptions about the behavior. unfortunately we have a chicken-egg problem here: we cannot reasonably implement #3090 before non modality is achieved and without it there seems to be a confusion about the behavior of the buttons that will be removed from the dialog.,-1,0,0,0.6180774569511414,0.6272018551826477,0.9792211055755616,0.0,accept,majority_agreement
929806309,3176,"so then i looked at slide 8.0 (macos examples) and that is so. but is that an omission in the design? how is the user supposed to close the dialog? if it's only with esc or the close button, then there is no way to distinguish between committing and cancelling the changes.",0,0,0,0.9841563105583192,0.9822912216186525,0.9925952553749084,0.0,accept,unanimous_agreement
929810091,3176,i have commented at #3090,0,0,0,0.9836889505386353,0.9719268083572388,0.994112193584442,0.0,accept,unanimous_agreement
929812957,3176,"this matches the behavior for stacked effects in other daws though. in most of the cases i saw (including garage band) settings are always committed (on every change) and software provides no way to undo them. ableton tracks each and every parameter change, but every change is committed immediately as well. ![a link]",0,0,0,0.8029141426086426,0.9630102515220642,0.6013858318328857,0.0,accept,unanimous_agreement
929820667,3176,so maybe we have an opportunity to do things a bit better than those.,0,0,0,0.8862998485565186,0.983025074005127,0.960914433002472,0.0,accept,unanimous_agreement
930946734,3176,turned out that this commit is not needed at all,0,0,0,0.9882447719573976,0.983405828475952,0.9907336235046388,0.0,accept,unanimous_agreement
930998848,3176,turned out that removing wasn't handled properly either,0,0,0,0.9456915259361268,0.9637318253517152,0.9426892399787904,0.0,accept,unanimous_agreement
932657977,3176,"this `#include` is new since my last round of review, and unfortunately makes bad depenency cycles. this is from a ""before"" picture made by scripts/graph.pl: bad -- cycles crept in this release that we should fix later. but let's not make them worse: remove the one `#include` and this bubble still grows by one, including the new file realtimeeffectstateui. i'm not sure which is the edge to cut so that this doesn't happen. but at least this does not tie in audioio and the other realtime* files. my unmerged library extractions in progress would move those files down into lib-audio-io. and how to do the rest of the code change to break the dependency is easy to see: the two functions of `realtimeeffectlist` that you modify already do `publish` so you can make subscriptions elsewhere to handle this.",-1,-1,-1,0.7968288660049438,0.845665693283081,0.9570866227149964,-1.0,accept,unanimous_agreement
932704050,3176,"you followed one of the suggestions for changing the management of lifetimes of the shared state. is it all correct? - generate noise, open sidebar, add any effect, but do not yet click the gear - do something undo-able - undo - click the gear - redo - click the gear again this was a sequence that i feared might erroneously leave two non-modal dialogs opened connected to the same effect state. this doesn't happen. yet, the reasons why it doesn't happen seem a little fragile to me. it doesn't happen because `projecthistory::popstate` fires many track deletion, then addition, events in these lines: [code block] and the subscription you added calls `hiderealtimeuifortrack` -- with the consequence, that any undo or redo makes the non-modal dialog disappear, i think? -- which might be considered unacceptable to qa. now, the ""lazy"" creation of `realtimeeffectstateui` happens anyway almost always, whenever you cause a push or pop of the undo stack -- which can mean, there is little point in avoiding doing it sooner, eagerly. and the way to do that, as i suggested, is to have `realtimeeffectstate` call `meffectstateextensions.buildall()` in the constructor. that would defeat my doubts. or it would also do so, if you do the other thing: have `realtimeeffectstate` hold a `shared_ptr` to its `extensions` and copy that pointer in the copy ctor. then `buildall` won't be needed. and not needing `buildall` might mean economy in case `extensions` ever needs to host some other attachment.",0,-1,0,0.676257848739624,0.6709864139556885,0.9696524739265442,0.0,accept,majority_agreement
933009150,3176,"shoot, my bad! will be fixed for sure!",-1,-1,-1,0.9880200028419496,0.9927380681037904,0.995949387550354,-1.0,accept,unanimous_agreement
942317293,3176,the comment is not correct -- noisereduction does not override the function. and i don't think it needs to because it is not eligible for effect stacks.,0,0,0,0.9174538254737854,0.8946098685264587,0.9863060712814332,0.0,accept,unanimous_agreement
942328581,3176,"this change is new since i last reviewed, and i would describe this oppositely -- what was a deep copy is now shallow. this has the consequence that the state is only transient state. there is no longer any undoing or redoin of changes of settings, but only of the composition of the effect list.",0,0,0,0.9508832097053528,0.9689806699752808,0.98713880777359,0.0,accept,unanimous_agreement
942333700,3176,this comment is not consistent with `realtimeeffectlist::moveeffect` which leaves the pointer in the message null,0,0,0,0.9462599754333496,0.9939478635787964,0.987718939781189,0.0,accept,unanimous_agreement
942336684,3176,"yeah, you are right, my bad",-1,-1,-1,0.9822065830230712,0.9899681806564332,0.9931829571723938,-1.0,accept,unanimous_agreement
942340307,3176,"the `#include` that made the bad dependency cycle is still here, but not needed to build now so easily deleted.",0,0,0,0.950254499912262,0.975205898284912,0.977035403251648,0.0,accept,unanimous_agreement
942342813,3176,"deletion of the copy constructor might be done in the commit ""realtimeeffectlist performs shallow copy for states""",0,0,0,0.9850930571556092,0.9941904544830322,0.9942873120307922,0.0,accept,unanimous_agreement
942360561,3176,"i think this may fail to fire when intended, in case `mcurrenttrack` expired because the track was replaced because some other edit was done to it that caused tracklist::replace",0,0,0,0.7868383526802063,0.9675641655921936,0.9822516441345216,0.0,accept,unanimous_agreement
942362538,3176,"the problems of dangling pointers to states or parts of states are surely fixed now, so no fear. maybe though, this event handler closes the dialog too often because it isn't discriminating about which track. but to do that right might require a shared pointer to the interesting track, not weak. and then there would be the problem of invalidating that shared pointer, and updating it to find the corresponding track in a different undo state. because i observe that undo or redo causes the dialog to disappear, because of this case of the switch. maybe that is acceptable for now. maybe testing will result in some request to change the design.",0,0,0,0.9247376918792723,0.947559118270874,0.5021530389785767,0.0,accept,unanimous_agreement
942363957,3176,i have checked and mcurrenttrack is always consistent,0,0,0,0.9834401607513428,0.978650689125061,0.9898723363876344,0.0,accept,unanimous_agreement
942365511,3176,"i do not see your point. `mextra == 0` means that the track is removed from the project as per contract. please, provide an str of a behavior you think is wrong.",0,0,0,0.6308032870292664,0.9042121171951294,0.7146377563476562,0.0,accept,unanimous_agreement
942372541,3176,"seems that undo is calling clear, readding the duplicate back later",0,0,0,0.9882112145423888,0.9824963808059692,0.9929742813110352,0.0,accept,unanimous_agreement
944514606,3176,i should have noticed this last round -- `pstate` is moved-from therefore null. nothing in non-modality depends on this but the events should anyway behave as advertised.,0,0,0,0.9803242087364196,0.985791802406311,0.9896000623703004,0.0,accept,unanimous_agreement
944524872,3176,"the commit that removes this copy constructor should also remove the comment in the header file, `members that are copied for undo and redo`",0,0,0,0.9877723455429076,0.9956263303756714,0.995978832244873,0.0,accept,unanimous_agreement
944532833,3176,spelling,0,0,0,0.9774957895278932,0.928835928440094,0.9833834767341614,0.0,accept,unanimous_agreement
944537676,3176,the variable name `effect` might be less confusing as `state`,0,0,0,0.9804911613464355,0.9905191659927368,0.9852874279022216,0.0,accept,unanimous_agreement
944544520,3176,"wow, that's crtp x 3 !",1,1,1,0.8529940843582153,0.8460462093353271,0.8267744183540344,1.0,accept,unanimous_agreement
944546074,3176,can the non-modal dialog exist but be hidden? then this function name might mislead.,0,0,0,0.8464890122413635,0.9599366784095764,0.984538435935974,0.0,accept,unanimous_agreement
944546798,3176,"but, no, i see.",0,0,0,0.9634168148040771,0.9408819675445556,0.989048421382904,0.0,accept,unanimous_agreement
944553013,3176,"we come here when rebuilding the side bar. but can there be edits of the track name that don't get reflected in the dialog title? a complete solution might be done with subscription to undo/redo events. which i suggest as a bug fix after this pr, not a blocking problem.",0,0,0,0.985708713531494,0.9796217679977416,0.9928351044654846,0.0,accept,unanimous_agreement
944556390,3176,"to be really complete... it would also subcribe also to changes of preferences, in case the effect name is a built-in that can be retranslated for changed of locale.",0,0,0,0.9805129766464232,0.9917959570884703,0.9909630417823792,0.0,accept,unanimous_agreement
944576108,3176,copy-pasted comment refers to a nonexistent variable,0,0,0,0.9796597361564636,0.9892055988311768,0.9883157014846802,0.0,accept,unanimous_agreement
944578566,3176,comment is trying to explain why `release()` doesn't leak below. it's because the dialog has a non null parent.,0,0,0,0.9699655175209044,0.9864659905433656,0.9906051754951476,0.0,accept,unanimous_agreement
944581549,3176,why was this subscription needed?,0,0,0,0.9644462466239928,0.9753478765487672,0.9920427203178406,0.0,accept,unanimous_agreement
944600040,3176,"did you intend to hide a non-modal dialog but not destroy it? the closing of the project window does cause the dialog to be destroyed, because it sets its parent pointer to the projectwindow. there are other non-modal dialogs associated with a project -- like tools > macros... -- and nothing special is needed to ensure that they are cleaned up.",0,0,0,0.9818816781044006,0.9879905581474304,0.9925445318222046,0.0,accept,unanimous_agreement
944603941,3176,i have also,0,0,0,0.97695654630661,0.9402551651000975,0.9896153211593628,0.0,accept,unanimous_agreement
944607314,3176,it fixes an assert in `effectuihost::~effectuihost()`. is this assert important? you tell me.,0,0,0,0.9862574934959412,0.99380624294281,0.993164360523224,0.0,accept,unanimous_agreement
944610558,3176,"i think buildall is now unnecessary for correct lifetimes of `realtimeeffectstateui`, now that the state objects are shared across undo history states. undo/redo still closes the window. if there is an enhancement to avoid that, remember that test case should be: - add an effect to a stack but don't open settings yet - make some undoable edit - undo - click the gear - redo (here, the sidebar must reconnect to another track) - click the gear again and the second click should hide the dialog, not open a second dialog.",0,0,0,0.9851144552230836,0.9851706624031068,0.9860913157463074,0.0,accept,unanimous_agreement
944611928,3176,"i had naïve expectation that track_data_change will be fired, because, well, track data has changed. but you are right, it is not",-1,0,0,0.511960506439209,0.8648272156715393,0.9607429504394532,0.0,accept,majority_agreement
944617228,3176,"ironically, msvc now has a diagnostic for that ![a link]",-1,0,0,0.9029216170310974,0.9813942909240724,0.7133793234825134,0.0,accept,majority_agreement
944630731,3176,"well, that means it's a bad comment anyway :-) it should be about `effectinstance` lifetime",1,1,1,0.9775823950767516,0.990598738193512,0.959787368774414,1.0,accept,unanimous_agreement
944631650,3176,"it is no longer needed on the other hand, the (weak) pointer to effectinstance is no longer stored",0,0,0,0.9758756160736084,0.99281245470047,0.9929163455963136,0.0,accept,unanimous_agreement
944632936,3176,"let's keep it for now, probably, it does no harm either",0,0,0,0.8924712538719177,0.7860429286956787,0.7332755327224731,0.0,accept,unanimous_agreement
944686380,3176,"if any more clientdata are attached to the realtimeeffectstate, they too would be built non-lazily. well we don't care about that now.",-1,0,0,0.941678524017334,0.8280658721923828,0.9395393133163452,0.0,accept,majority_agreement
944686924,3176,"okay, and maybe that old assertion is an inappropriate one. but let it all stand.",0,0,0,0.5283854603767395,0.7899811863899231,0.6371604204177856,0.0,accept,unanimous_agreement
944781910,3176,also for the `reset`? you can make that happen with the history dialog,0,0,0,0.989574372768402,0.9945728182792664,0.9951770305633544,0.0,accept,unanimous_agreement
944785429,3176,"this requires that #3365 be merged first, so that the dialog is closed when it must be.",0,0,0,0.9875778555870056,0.994644284248352,0.9947382807731628,0.0,accept,unanimous_agreement
944785785,3176,will do,0,0,0,0.9603245854377748,0.957181751728058,0.9619618058204652,0.0,accept,unanimous_agreement
944786276,3176,"yep, right now it is kind of no-op",0,0,0,0.7515206336975098,0.8134751915931702,0.6598516702651978,0.0,accept,unanimous_agreement
944789217,3176,this commit breaks the build but the next and final commit fixes it.,0,0,0,0.9705760478973388,0.9755483865737916,0.9609270691871644,0.0,accept,unanimous_agreement
944795215,3176,"this commit is insufficient to update langauges in (e.g.) the dialog for reverb. it only fixes the dialog title, not the static texts and label buttons. destroying and recreating the dialog may do it. that is i think `realtimeeffectstateui::hide` then `realtimeeffectstateui::show`",0,0,0,0.9438651204109192,0.9813218712806702,0.9916163086891174,0.0,accept,unanimous_agreement
944801183,3176,"correct that, it is rather, still closing the dialog unnecessarily. we want the dialog to close exactly when it should.",-1,0,0,0.5223599076271057,0.761009693145752,0.764664888381958,0.0,accept,majority_agreement
944819650,3176,"now i'm trying to make it work by cherry-picking my fix onto this branch, and it doesn't, revealing an incompleteness of my proposed fix. so watch for an amendment of #3365 !",0,0,-1,0.5533276200294495,0.9607970118522644,0.5474784970283508,0.0,accept,majority_agreement
944842857,3176,"okay, i amended #3365, which you should review first. but still not enough: if i cherry-pick it onto your branch, i must make one more change: your message handler must do nothing for messages of type `purge`. with that change i observe that undo and redo close the dialog only exactly as needed. so, are we done yet, debugging undo/redo? no, i think there is one more problem. wait for more.",0,0,0,0.944263994693756,0.9292160868644714,0.922390878200531,0.0,accept,unanimous_agreement
945580952,3176,spelling,0,0,0,0.9774957895278932,0.928835928440094,0.9833834767341614,0.0,accept,unanimous_agreement
945582413,3176,the last commit in the sequence is still correcting a build error of the previous commit. i'd like both commits to be compilable.,0,0,0,0.9622777104377748,0.9537026286125184,0.9903090596199036,0.0,accept,unanimous_agreement
945583722,3176,"you don't update ui for the reset message, which can happen if you choose a state using the history dialog, and so the title of a dialog might be incorrect in that case. however that case will correctly fall through to the check for reachability of states below.",0,0,0,0.9876843690872192,0.9904636144638062,0.9953994154930116,0.0,accept,unanimous_agreement
945584090,3176,"well, rebase error again. rebasing takes like half a time on this branch now",0,0,-1,0.9793606400489808,0.9353399872779846,0.8811060190200806,0.0,accept,majority_agreement
945587636,3176,"i merged other approved things to master lately, so please also rebase onto those.",0,0,0,0.9871501922607422,0.9656561613082886,0.9932739734649658,0.0,accept,unanimous_agreement
1295776515,5041,should this comparison use discrete sample counts?,0,0,0,0.9854142665863036,0.9924787282943726,0.9893681406974792,0.0,accept,unanimous_agreement
1295797495,5041,"non-ascii mathematical notation in comments, nice",0,1,1,0.8801795840263367,0.9700241684913636,0.9722362756729126,1.0,accept,majority_agreement
1295799474,5041,"see uses of `` with `@{` and `@}` elsewhere in the source tree, so that doxygen can associate a comment with multiple class members. the generated pages will have nicer information and just looking at the source code makes clearer the intended ""scope"" of your comment.",0,0,0,0.975114405155182,0.9867759346961976,0.9927886128425598,0.0,accept,unanimous_agreement
1295801264,5041,here you can simply use `//!` for a doxygen comment on one member.,0,0,0,0.9870967864990234,0.9916214942932128,0.9920024871826172,0.0,accept,unanimous_agreement
1295805487,5041,i think this function should use `timetolongsamples`,0,0,0,0.9876950979232788,0.9902122616767884,0.9894994497299194,0.0,accept,unanimous_agreement
1296367556,5041,"no, just delete the function! it is defined but not used anywhere in these six prs",0,0,0,0.9491783976554872,0.8585018515586853,0.6404378414154053,0.0,accept,unanimous_agreement
1296369747,5041,delete this comment please,0,0,0,0.973163604736328,0.9866775274276732,0.9831079840660096,0.0,accept,unanimous_agreement
1296777100,5041,isn't it too much to have private members show up in doxygen?,0,0,0,0.8610056042671204,0.9812878370285034,0.9829602241516112,0.0,accept,unanimous_agreement
1296828948,5041,"the playtime boundary getters return sample-rounded values, but results can be different whether we round `t` or not, so it's an important question. mathematically it is correct as it is. someone can use the method to check whether the cursor splits the clip visually. but we also use this method to decide whether a clip should be split or not, in which case it's a headache to figure out what should be done when splitting a clip a fraction of a sample before its play end time. i'm thinking now that these boundary-check methods should take `samplecount` arguments. then it's the responsibility of the users to decide what rounding they want. the internal variables (`msequenceoffset`, etc) must stay `double`s because of stretching. i haven't seen a problem related to that, though, perhaps because the places that use this already pass rounded values. for the sake of time, would you agree to leave it as-is for now and keep this in mind if problems are reported?",0,0,0,0.8458910584449768,0.6904320120811462,0.9809219241142272,0.0,accept,unanimous_agreement
1296837406,5041,it's deleted.,0,0,0,0.9446767568588256,0.9850761294364928,0.9838584065437316,0.0,accept,unanimous_agreement
1296845751,5041,"it is used, in `wavetrack::applystretchratio`, in pr 5. i'll remove it from this pr, and rebasing will force me to re-introduce it. then i'll use `timetolongsamples`.",0,0,0,0.98815256357193,0.9930267333984376,0.992345929145813,0.0,accept,unanimous_agreement
1296934657,5041,"all might help someone needing to understand the implementation, not just interface. there is the notion of “representation invariant” for instance — invariant conditions involving private member variables. might as well follow conventions with `` there too",0,0,0,0.9789639711380004,0.9929178357124328,0.9906052947044371,0.0,accept,unanimous_agreement
1298376288,5041,"i think i wrote this elsewhere, bug again: `0.5` should change to `true` at the commit ""make waveform display work again"" to match the change of argument type.",0,0,0,0.907865583896637,0.9784467816352844,0.9906461238861084,0.0,accept,unanimous_agreement
1298392366,5041,"near the end of this function `findcorrection`, clean up two things please: use `std::clamp` and `assert`",0,0,0,0.9877347350120544,0.9934884309768676,0.9906796813011168,0.0,accept,unanimous_agreement
1298407552,5041,i see this change in `drawindividualsamples`. i wonder whether it's complete. i see another use of `clip->getrate()` that is not corrected for stretch later. but it's only fetching one value from the envelope and passing a time-step value for successive samples that doesn't matter and could be 0.,0,0,0,0.889510989189148,0.9782307147979736,0.9864831566810608,0.0,accept,unanimous_agreement
1298408977,5041,"the domain of the envelope (viewed as a curve or function) is always updated with ration changes to be real time, correct? so `time` given to `getvalue` is right? did you test display of individual samples with an envelope too?",0,0,0,0.9885224103927612,0.993328094482422,0.9944890737533568,0.0,accept,unanimous_agreement
1299369268,5041,"as i wrote on the closed pr, the commit ""make waveform display work again"" doesn't completely do what it says. instead the next commit ""spectrum display..."" completes the work for waveform display too. so properly, these two commits should be squashed into one (plus the fixup i pushed). maybe that commit would be too large and you might find a nice way to separate small steps like changes of arguments of functions or construction of `clipparameters` but then i see the next commit ""wavechannelview clean-up ..."" does yet more things that correct the calculations, which comes after ""spectrum drawing does not need a widesamplesequence ..."" but that one is easy, just deletions. i have to look at the diff of a sequence of four commits to understand the whole transformation and be confident it's right. this isn't easy.",0,0,0,0.9624167084693908,0.9808523058891296,0.9842151999473572,0.0,accept,unanimous_agreement
1299370732,5041,"is this comment in commit ""spectrum display..."" correct?",0,0,0,0.9713876843452454,0.9921383261680604,0.9951122403144836,0.0,accept,unanimous_agreement
1299402809,5041,"if 0 is an excluded value, maybe the member doesn't need to be `std::optional` but instead you would test the value wherever it is used.",0,0,0,0.988781213760376,0.9937645196914672,0.9899264574050904,0.0,accept,unanimous_agreement
1299403106,5041,i spent a surprising amount of time studying this small commit to convince myself it was correct. rereading the whole class led me to push one more commit for an possible undiscovered problem. i think backwards scrubbing with stretch applied might be wrong.,0,-1,0,0.6003625392913818,0.841464638710022,0.8145797252655029,0.0,accept,majority_agreement
1299403836,5041,"i found this small commit difficult to understand because `durationtodiscard` is multiplied by the clip's rate only in one place, but then also divided by stretch ratio in another place. i think the members `mlastreadsample` and `mtotalnumsamplestoproduce` should be commented. `mlastreadsample` counts raw samples but `mtotalnumsamplestoproduce` counts stretched. also, what should have made the bug ""obvious"" in earlier reviews -- is that the clip's rate should always be divided by the stretch ratio, never multiplied by it.",0,0,0,0.8710494041442871,0.9696948528289796,0.8146795630455017,0.0,accept,unanimous_agreement
1299843850,5041,"you've fixed a bug indeed, thank you. added the missing unit test that would have caught it.",1,1,1,0.8698368072509766,0.8415834307670593,0.9787472486495972,1.0,accept,unanimous_agreement
1299913890,5041,"i considered some time ago already providing a class only for the implementation of `timeandpitchsource` and let `clipsegment` use it. it could have avoided this confusion. now `mlastreadsample` is a member of the source, and represents a sample index before stretching. `mtotalnumsamplestoproduce` is a member of `clipsegment` and represents a sample count after stretching.",0,0,0,0.9860646724700928,0.9943704009056092,0.9919195175170898,0.0,accept,unanimous_agreement
1299914648,5041,"now i did it. the commit ""review comments: extract timeandpitchsource from clipsegment ..."" only just does that - no change in logic.",0,0,0,0.9730986952781676,0.992679476737976,0.9887205958366394,0.0,accept,unanimous_agreement
1299924255,5041,one advantage of `optional`: the compiler will tell you if you are not de-referencing when you should. a bare double won't warn against unchecked uses.,0,0,0,0.9824312329292296,0.978905439376831,0.9785559177398682,0.0,accept,unanimous_agreement
1299926094,5041,"it's outdated, stemming from the time when spectrum display did not account for stretching. thanks.",1,1,1,0.8817594647407532,0.87441086769104,0.9360058307647704,1.0,accept,unanimous_agreement
1299940579,5041,"i tried to demonstrate backwards scrubbing going wrong without this fix, but i could not. maybe `samplesperchannel` is never greater than `remainingsamplesinclip` because of other tests elsewhere, but the class `clipsegment` should not depend on that pattern of usage.",0,0,0,0.9576016664505004,0.9687328934669496,0.9870325326919556,0.0,accept,unanimous_agreement
1299968117,5041,"right. i did not a good job with my interactive rebase for this part. i may mistakenly have attempted to re-order and squash the ""wavechannelview clean-up ..."" into ""make waveform display work again"", but actually it should have been squashed into ""spectrum display ..."" (and then squashing that into ""make waveform display work again"" as you suggested). i don't mind doing it, but is now a good time, since you've reviewed this already?",-1,0,1,0.5298260450363159,0.6119124293327332,0.5609721541404724,,review,no_majority_disagreement
1299992835,5041,"correct. the x-position of the samples is scaled by the stretch ratio because the audio samples are stored in stretched state. the envelope is, though. i did, yes, and that works to the extent i tested it. not so confident about the corner cases, though.",0,0,0,0.9259721040725708,0.9605186581611632,0.9511430263519288,0.0,accept,unanimous_agreement
1300674381,5041,change “pps ” in the comment,0,0,0,0.9832815527915956,0.993762195110321,0.98407781124115,0.0,accept,unanimous_agreement
1300674948,5041,and the variable name,0,0,0,0.9846953749656676,0.9863487482070924,0.9948897361755372,0.0,accept,unanimous_agreement
1301768815,5041,this moved function is now more general than it needs to be. the first argument is always a size one vector at the sole place where you call it. maybe you feel like cleaning that up?,0,0,0,0.9771026372909546,0.9882232546806335,0.9910606741905212,0.0,accept,unanimous_agreement
1301771445,5041,your search-and-replace made the comment read strangely,0,0,0,0.9735767841339112,0.86314457654953,0.5822305679321289,0.0,accept,unanimous_agreement
1302278623,5041,first two arguments are unused,0,0,0,0.9814298748970032,0.9813621640205384,0.9922667145729064,0.0,accept,unanimous_agreement
1302281321,5041,remember `min` is not `lowest` when the type is floating! -- but that's not the case here,0,0,0,0.9779438972473145,0.9540494680404664,0.9805285334587096,0.0,accept,unanimous_agreement
1302284604,5041,fix the variable name `clipendingadjustment`,0,0,0,0.9879568219184875,0.9933835864067078,0.995492696762085,0.0,accept,unanimous_agreement
1302296428,5041,arguments `track` and `selectedregion` are not used,0,0,0,0.9870824813842772,0.9934322834014891,0.9948700666427612,0.0,accept,unanimous_agreement
1302300193,5041,"`t1` is not used outside this constructor, so it might be a local variable",0,0,0,0.987970530986786,0.9942765831947328,0.9926579594612122,0.0,accept,unanimous_agreement
1302317307,5041,"below, change `rate` to `samplerate` in commented-out code. sample rate not corrected for stretch ratio would be right because we assume the envelope already stretches its time coordinates.",0,0,0,0.9885720014572144,0.9952303767204284,0.9934900999069214,0.0,accept,unanimous_agreement
1302317789,5041,or `6 * threshold1`,0,0,0,0.9853915572166444,0.9938982725143432,0.9922716617584229,0.0,accept,unanimous_agreement
1302320333,5041,"below, likewise, change commented-out code",0,0,0,0.9888631105422974,0.9912131428718568,0.9940395355224608,0.0,accept,unanimous_agreement
1302328378,5041,`params` is unused,0,0,0,0.9853091835975648,0.9899505376815796,0.9943580031394958,0.0,accept,unanimous_agreement
1302334192,5041,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
1302337814,5041,"maybe the first real bug i have found: while dividing by `getwidth` may correct a mistake introduced earlier -- yet i look at the uses of `speccache::populate` and i see one (in drawclipspectrum) passed the visible sample count, while the other (in this file) passed the sequence sample count. but now both use the sequence count. why is this right?",0,0,0,0.8966822624206543,0.9513721466064452,0.9150591492652892,0.0,accept,unanimous_agreement
1302345661,5041,"notice how `getfloats` had a `maythrow` argument defaulting true but passed false here. i added that years ago. i reasoned that if reading sample blocks failed for any reason, but only in display code, it should be non-throwing, and instead just zeroes should be substituted. but now that is lost with this transformation. see where `sampleblock.cpp` used to use the `maythrow` argument. but that was a guard around the concrete class that implemented `dogetsamples`. so i think `sqlitesampleblock::getfloatsampleview` should now add a try-catch around its new call to `dogetsamples` and the catch block needs to add zeroes. so that the behavior in exceptional cases does not change.",0,0,0,0.9710755348205566,0.9828936457633972,0.9713953733444214,0.0,accept,unanimous_agreement
1302593980,5041,"at last i know what the `maythrow` is about - my bad not for having actively searched its meaning. `getfloatsampleview` is used for both display and playback, though, so adding a try-catch would override the current playback, throwing behaviour. it's not too much work to add this boolean to `getfloatsampleview`. otherwise we'd have to choose one behaviour for both use cases - always catching would also affect playback behaviour. added a commit that does this.",-1,-1,-1,0.766782820224762,0.7893156409263611,0.9599912762641908,-1.0,accept,unanimous_agreement
1302701314,5041,"thanks for this question, it motivated me to (try and) understand this whole code better. i think it is okay the way it is. `numsamples` will be used to know whether the time-domain input to the spectrogram needs zero-padding, if the window goes beyond that. providing the sequence sample count, as opposed to the _visible_ sample count, allows the code to fetch samples beyond the visible boundary to draw the spectrum, which is good. the other call used to use `getvisiblesamplecount`, and leading to unnecessary zero-padding in case of right trimming. note, though, that that other call only gets executed if the fisheye state is `pinned`, but it never is, as it's hard-coded to `hidden`, so i cannot test that it indeed works with these changes. what i could test, though, is that an impulse, whether at the beginning or end of the clip, has its spectrogram displayed properly, also with left- and/or right-trimming.",1,1,1,0.956759512424469,0.9580976963043212,0.9885931015014648,1.0,accept,unanimous_agreement
1302703735,5041,ty,0,0,0,0.942253828048706,0.7737126350402832,0.7169978022575378,0.0,accept,unanimous_agreement
1302703807,5041,ty,0,0,0,0.942253828048706,0.7737126350402832,0.7169978022575378,0.0,accept,unanimous_agreement
1302722329,5041,how could i miss that ... thank you.,1,1,1,0.7291989922523499,0.8567525148391724,0.9914931654930116,1.0,accept,unanimous_agreement
1302723907,5041,"haha, ""adjustemt""",1,1,1,0.903164565563202,0.9004624485969543,0.9798816442489624,1.0,accept,unanimous_agreement
1302743915,5041,"good that you spot this. this means that this function is actually not useful, and `spectrumcache` can call `audiosegmentsampleview::copy` directly instead. (it would probably be useful if `wavetrack::getsampleview` were used, but that's not the case.) removing.",0,1,1,0.6089054346084595,0.8515251278877258,0.9739711284637452,1.0,accept,majority_agreement
1302851106,5041,"i'll let your decisions stand on this, but maybe it should be reexamined later. maybe a clip with unusually large hidden data will cause caching to do too much work and even defeat the purpose of caching for performance. maybe there should be a smarter way to bound the cache size, more than the visible samples but fewer than the whole.",0,0,0,0.9534645676612854,0.9351962804794312,0.9679892063140868,0.0,accept,unanimous_agreement
1302867397,5041,now there is only a direct call to `copy`. the limiting of sample buffer size and the filling of extra space with zeroes don't happen. should they be restored?,0,0,0,0.986721396446228,0.9912296533584596,0.992905616760254,0.0,accept,unanimous_agreement
1302886734,5041,"you are right. `timecorrection` is scaled to the clip's raw sample rate, without the stretching ratio correction for real time. we want to find the correct x coordinate for that. so remove ""todo"" and explain in the comment more confidently.",0,0,0,0.9433079361915588,0.9786590337753296,0.9874696731567384,0.0,accept,unanimous_agreement
1302890888,5041,reference #2 on this page was my guide to implement this algorithm long ago. [a link] i used to be able to find freely available pdfs,0,0,0,0.922666072845459,0.898236095905304,0.9932594895362854,0.0,accept,unanimous_agreement
1302914256,5041,"almost completing review! the last thing i must understand is why you changed arguments in the other call of `grow` but not this one. are you correcting an old error? but i examined things and i find this added comment misleading. `t0` is, and was before the changes, a time relative to clip start. not absolute. and relative time is in fact what `grow` was expecting. the `t0` value is stored in `start` and ultimately used only in `getspectrogram` just above us here to check for a cache hit. the `t0` in the comparison is the same `t0` used here.",-1,1,1,0.5628652572631836,0.717875599861145,0.4623624086380005,1.0,accept,majority_agreement
1302915781,5041,"`getspectrogram` (this function, here) is called in only one place, and the `t0` value supplied there is from `clipparameters::t0`, and that value is initialized with a duration relative to clip play start, not an absolute time.",0,0,0,0.988456964492798,0.994506061077118,0.9935628175735474,0.0,accept,unanimous_agreement
1302920214,5041,"right. i just pushed a commit that changes the `copy` behaviour to something more usual, with trailing samples being zeroed. i might have decided against it at the time to ease the implementation of `fillbufferfromtrackblocksequence`, but now that it's gone it's better to make the life of clients easier. sorry for the re-implementation and please take a close look at that commit.",-1,-1,-1,0.9875118732452391,0.9716416597366332,0.9875108003616332,-1.0,accept,unanimous_agreement
1302920390,5041,"all right, now i think the other call of `grow` was correct all along, but the comment added there is incorrect. and this call was correct, but the added code, more seriously, is now incorrect. `t0` above also comes from `clipparameters` and therefore is relative to clip start. subtracting start time again will be wrong when start time is not 0.",0,0,0,0.9582194685935974,0.9855072498321532,0.9823986887931824,0.0,accept,unanimous_agreement
1302922352,5041,you have an ieee subscription ?? :star-struck:,0,1,1,0.7796114087104797,0.9758455157279968,0.981562614440918,1.0,accept,majority_agreement
1302925681,5041,"copy-pasting your explanation as comment here, tagging it with your initials.",0,0,0,0.9838206768035888,0.9887517094612122,0.9935296177864076,0.0,accept,unanimous_agreement
1302926607,5041,actually no,0,0,0,0.9377094507217408,0.9432126879692078,0.8664157390594482,0.0,accept,unanimous_agreement
1302937403,5041,"there's no trace of absolute time here, i wonder what brought me to think there was. even then i was inconsistent. i wonder how my extensive testing didn't get me to spot the error, maybe because it ""only"" induced more cache misses ? anyway, fixing it.",-1,-1,0,0.6701363921165466,0.5100474953651428,0.7753861546516418,-1.0,accept,majority_agreement
1307364845,5041,i need your benediction :),1,1,0,0.9815987944602966,0.9900504350662231,0.9755631685256958,1.0,accept,majority_agreement
1307523722,5041,"i don't feel competent to review this without much more time for study of the library. i'll just ask: - does this affect performance only or does it change the calculations? - the reassignment of `hop_s_err` and `hop_a_err` used to happen once per function call. do you mean to make it happen at most once, or sometimes multiple times? - if not multiple times, then should `hop_s` and `hop_a` be changed after these two assignments? -",-1,0,-1,0.90348482131958,0.8503308892250061,0.7825571298599243,-1.0,accept,majority_agreement
1307526669,5041,"again, i'll just trust this change without digging deep",0,0,0,0.5237888097763062,0.9531905651092528,0.8738154172897339,0.0,accept,unanimous_agreement
1308470363,5041,"the naming of these variables isn't really descriptive. as i understand this code, `hop_a_err` is the analysis samples ""credit"". `exact_hop_a`, the ""exact analysis hop size"", can be a fractional number of samples, but of course, one can only feed discrete samples at a time. so when you need 2.5 samples to perform one fft, as soon as you get the 3rd sample, all 3 samples are processed, but you have a credit of 0.5 samples. this goes into `hop_a_err`. same principle for `hop_s_err` but in the ifft direction. there were situations (when `numsamples` wasn't the 1024 ""default"" or the stretch ratio is so low that `exact_hop_s < 1`) where those state variables were updated although no analysis or no synthesis happened. as a result, no samples were ever produced, and we were falling in an endless loop. now to your questions: * no, negligibly * sometimes multiple times, which is the correct thing to do: update your credit variables if and only if analysis/processing happened also tested the other extrem: stretching from 30s to 12h. i also did and these changes do not help. looking into it.",0,0,0,0.9743034839630128,0.9854938983917236,0.974350929260254,0.0,accept,unanimous_agreement
1310090700,5041,what's your proof that the assertions in `as_size_t` are satisfied -- that there is no narrowing of a negative or a too-large `samplecount` value?,0,0,0,0.9861491918563844,0.993742048740387,0.9936794638633728,0.0,accept,unanimous_agreement
1310111527,5041,same question,0,0,0,0.9724015593528748,0.947645366191864,0.9845231771469116,0.0,accept,unanimous_agreement
1310111679,5041,same question,0,0,0,0.9724015593528748,0.947645366191864,0.9845231771469116,0.0,accept,unanimous_agreement
1310180780,5041,"i see that before this commit, `audiosegmentsampleview` was constructed in only one place outside tests, in `sequence`, and always passing `size_t length` to the `samplecount` argument. if `audiosegmentsampleview` really eliminated use of type `samplecount` and only used `size_t`, it would move the need to use `as_size_t` to the point of construction. there are new places where it is constructed, all of them in `wavetrack` and added by this commit.",0,0,0,0.985639214515686,0.9948107004165648,0.9921557903289796,0.0,accept,unanimous_agreement
1310182741,5041,"in fact, the accessor `audiosegmentsampleview::getsamplecount` was used nowhere before this commit.",0,0,0,0.9876059293746948,0.994424045085907,0.9931396842002868,0.0,accept,unanimous_agreement
1310192407,5041,"here and elsewhere, ""half as many"" would read better than ""twice as few""",0,0,0,0.9680446982383728,0.9870083928108216,0.978226602077484,0.0,accept,unanimous_agreement
1310200723,5041,"""intervals"" same spelling error in one other place",0,0,0,0.9687528014183044,0.9654427766799928,0.978926122188568,0.0,accept,unanimous_agreement
1310204578,5041,"""the raw"" x 4 places",0,0,0,0.9761788249015808,0.9798678159713744,0.9937844276428224,0.0,accept,unanimous_agreement
1310212486,5041,"i must remember to fix this when i rebase #5031 onto this again: use the ""narrow"" not the ""wide"" clip when this class holds references to two clips.",0,0,0,0.986730694770813,0.9874082803726196,0.9911593794822692,0.0,accept,unanimous_agreement
1310235623,5041,i hope that writing this commit was a good exercise in understanding the new channel and interval interfaces.,1,1,1,0.8463169932365417,0.9452856779098512,0.9466920495033264,1.0,accept,unanimous_agreement
1310373638,5041,inner pair of `{}`?,0,0,0,0.9869433641433716,0.9926944971084596,0.9905664324760436,0.0,accept,unanimous_agreement
1310386165,5041,"just as `start` and `end` are non-virtuals in `channelgroupinterval`, so should the be too in the base class `channelinterval`, i think. but that can be fixed later",0,0,0,0.986365556716919,0.994309902191162,0.9922437071800232,0.0,accept,unanimous_agreement
1310426966,5041,"no proof, just assuming that users request reasonable amounts of time of reasonably stretched clips. in `mixerboard` usage, ~= 50ms are queried at a time. stretch ratio to get an overflow would have to be [code block]",0,0,0,0.9804714918136596,0.9876628518104552,0.9819684624671936,0.0,accept,unanimous_agreement
1310465013,5041,"my own, old comment in the file says ` // expect that the difference of t1 and t0 is the part of a track played // in about 1/20 second (ticks of trackpanel timer), so this won't overflow ` i didn't make a really rigorous proof then. but can we do better? stretches aren't limited yet to ""reaonable"" bounds and also the calculation above is specific to default sample rate.",0,0,0,0.9812646508216858,0.96103835105896,0.989098310470581,0.0,accept,unanimous_agreement
1310465997,5041,"i agree, i should be consistent with myself. a sample view is typically used to store a temporary buffer, and the total amount should never exceed what `size_t` can hold. shall i simplify this?",0,0,0,0.9784795641899108,0.9493139386177064,0.9845735430717468,0.0,accept,unanimous_agreement
1310469168,5041,"add to the comment ""unless stretch ratio is extreme""",0,0,0,0.9735400080680848,0.9940827488899232,0.9928602576255798,0.0,accept,unanimous_agreement
1310469413,5041,sure,0,0,0,0.9371067881584167,0.9137381911277772,0.9422702193260192,0.0,accept,unanimous_agreement
1310475830,5041,"that's not the part that causes me the most headache. i find this model quite sensible, and was happy to be able to easily use consistent aliases, such as `channelgroupsampleview` and `channelsampleview`. remains `audiosegmentsampleview` that on the occasion i'd rename `channelsegmentsampleview`. (i wouldn't use `channelintervalsampleview`, because ""segment"" is now coined to either clip or silence segments. a `wavechannelinterval`, in practice, implies (the channel of) a clip under the hood.)",-1,1,0,0.6266951560974121,0.7644971013069153,0.7698647379875183,,review,no_majority_disagreement
1310478763,5041,"the deleted `as_size_t` is now instead inside the function called above. i'm not convinced there won't ever be an extreme stretch ratio. if the assertion ever fired in a debug build -- the release build might continue, with a wrapped, small value. no harm except an inaccurate meter that put too few floats in its update queue. but with a less extreme value, which doesn't cause the assertion, still a large size_t value might not be allocable and the release build would crash. so how about this little bit of bullet-proofing here. [code block]",0,0,0,0.8785435557365417,0.850635290145874,0.9621960520744324,0.0,accept,unanimous_agreement
1310479365,5041,"indeed, whenever there's the need, we do this.",0,0,0,0.9816623330116272,0.9898356795310974,0.983170211315155,0.0,accept,unanimous_agreement
1310481244,5041,"extremely low, to be precise. added.",0,0,0,0.9630365371704102,0.8552067279815674,0.973416805267334,0.0,accept,unanimous_agreement
1310484318,5041,do this also when constructing `meterfloatsarray`.,0,0,0,0.9882722496986388,0.9928243160247804,0.9945586323738098,0.0,accept,unanimous_agreement
1310495993,5041,"i just tried to crash it, calling `floats tempfloatsarray{ std::numeric_limits ::max() };`. the exception was caught by the `publisher` code, which visits its observers within a try/catch block. this is the case here, since this scope reacts to an `ontimer` change. so :person_shrugging:",0,0,0,0.7061594724655151,0.927244246006012,0.5319606065750122,0.0,accept,unanimous_agreement
1310524201,5041,"something very basic: does `msampleview` really need a longer lifetime than this function? i think not, it can be a local, not a member.",0,0,0,0.983431041240692,0.9728158116340636,0.9854309558868408,0.0,accept,unanimous_agreement
1310688754,5041,"it does, if we want the caching to work properly. actually i notice one improvement: emptying this view upon start/stop so as to allow cache eviction.",0,0,0,0.9753315448760986,0.9687141180038452,0.9839622974395752,0.0,accept,unanimous_agreement
1311360418,5041,good,1,1,1,0.9150943756103516,0.93613862991333,0.8759189248085022,1.0,accept,unanimous_agreement
1311361719,5041,"that wasn't the suggestion: i said limit the try-catch scope to only the allocation, as in the code sample above.",0,0,0,0.9811766743659972,0.9896360039711,0.9849069118499756,0.0,accept,unanimous_agreement
1311366124,5041,would be better,0,0,0,0.911512553691864,0.9844607710838318,0.9500131011009216,0.0,accept,unanimous_agreement
1311401413,5041,i think this was wrong: it should be `timetosamples(t0 - getsequencestarttime())`,0,0,0,0.6494840383529663,0.9857507944107056,0.936391055583954,0.0,accept,unanimous_agreement
1312743652,5041,"no, the user is already supposed to give clip-relative times.",0,0,0,0.9869056344032288,0.974237322807312,0.986517369747162,0.0,accept,unanimous_agreement
1312745290,5041,"but what use would this be, since the exception is already caught above ? i'm not sure we're understanding each other.",0,0,-1,0.5141026973724365,0.6706344485282898,0.7024731040000916,0.0,accept,majority_agreement
1312750926,5041,an elaboration in this comment would be welcome.,0,0,0,0.9026947617530824,0.8800773620605469,0.9806859493255616,0.0,accept,unanimous_agreement
666612403,1207,"oh no, adding colors to the theme. that has not been done in a long time -- since 2017. james crook is more familiar with the theming system than anyone. a question is whether these choices of colors need to be different in other themes. if so, it's not obvious how to do it. it involved darkthemeasceecode.h, etc. which are generated by strange processes.",0,0,0,0.7662562131881714,0.6694730520248413,0.8717988133430481,0.0,accept,unanimous_agreement
666824151,1207,i was relying on [a link] page doesn't provide information on theme source code generation though,0,0,0,0.89944988489151,0.8591331839561462,0.988187849521637,0.0,accept,unanimous_agreement
666928146,1207,"i think it involved making a special build with experimental_theme_prefs and doing other things. but i also think the colors at the end of the table are just used unchanged in the other themes that don't redefine them. if you had inserted the lines in the middle, i think that might have messed up the non-default themes worse if they were not regenerated. i think there is much inconvenience in extending the theming system, which needs rewrites. but that's another topic.",0,0,0,0.7883731722831726,0.6982366442680359,0.8953151702880859,0.0,accept,unanimous_agreement
668382981,1207,"following the analogy with vruler controls, this function should not be virtual",0,0,0,0.985805094242096,0.9885756373405457,0.9916613101959229,0.0,accept,unanimous_agreement
668386256,1207,this is not a pure virtual: you should commend that the default behavior is to return null.,0,0,0,0.7642536759376526,0.923547089099884,0.9921118021011353,0.0,accept,unanimous_agreement
668386343,1207,*controls,0,0,0,0.9688489437103271,0.9054905772209167,0.9896360039711,0.0,accept,unanimous_agreement
668386571,1207,more simply: `return {};`,0,0,0,0.985693097114563,0.9915876984596252,0.9924465417861938,0.0,accept,unanimous_agreement
668386734,1207,just analogous with the vruler controls of course.,0,0,0,0.9866554737091064,0.987049400806427,0.987734854221344,0.0,accept,unanimous_agreement
668390314,1207,"this implements the item ""play head should be rendered over a track panel (not separate tracks)"" of #1181 ? it's correctly done. please make it a separate commit then, for a single independent task, rather than making this one huge commit.",0,0,0,0.9885810017585754,0.9921140670776368,0.9767810106277466,0.0,accept,unanimous_agreement
668392220,1207,i do not understand the changes in this file. this disables the vertical stroke to indicate the zero-length selection. why? and why do you use that particular experimental? where is this change specified? can this be another small commit?,0,0,0,0.7300105690956116,0.638460636138916,0.9383262991905212,0.0,accept,unanimous_agreement
668393441,1207,"this constant is only used in trackpanel.cpp -- perhaps it should be defined only in that file, until need arises to reuse the constant elsewhere.",0,0,0,0.9886310696601868,0.9935032725334167,0.990422248840332,0.0,accept,unanimous_agreement
668395775,1207,"you have redefined subdivisions in this file. i like that. it would be good to make a commit just of the changes of trackpanel.cpp, and the changes in trackview necessary for it. then, other commits to implement affordance controls specially for wavetrack and for notetrack.",1,1,1,0.9686489105224608,0.9807383418083192,0.8881720304489136,1.0,accept,unanimous_agreement
668396103,1207,"i have observed this: if you minimize a wave track (the button with a black triangle), it is taller than it was before. ""mute"" and ""solo"" buttons still appear. is this an intended consequence? is it desirable? please point it out to the designers and ask.",0,0,0,0.974338948726654,0.9252035617828368,0.9626071453094482,0.0,accept,unanimous_agreement
668399111,1207,update this comment! it's not longer a complete description.,0,0,0,0.6486408114433289,0.7797123789787292,0.9846104383468628,0.0,accept,unanimous_agreement
668399369,1207,explicit maybe,0,0,0,0.9793453216552734,0.9601376056671144,0.9637237191200256,0.0,accept,unanimous_agreement
668399479,1207,consider that whenever a ctor has one argument.,0,0,0,0.9816808104515076,0.9880442023277284,0.9890210032463074,0.0,accept,unanimous_agreement
668400572,1207,why was this change needed? because of emptypanelrect not inheritinc commontrackpanelcell?,0,0,0,0.9771687984466552,0.98819899559021,0.992462992668152,0.0,accept,unanimous_agreement
668402214,1207,unnecessarily moved lines,-1,0,0,0.9101634621620178,0.7488823533058167,0.6558213233947754,0.0,accept,majority_agreement
668403314,1207,"these lines aren't gone, but hoisted -- ok",0,0,0,0.9598791003227234,0.8731650710105896,0.9854884743690492,0.0,accept,unanimous_agreement
668404269,1207,why not matching #endif here?,0,0,0,0.969005823135376,0.9655133485794068,0.985988438129425,0.0,accept,unanimous_agreement
668404418,1207,compilation fails if the experimental is turned off. fix it,0,0,0,0.9634190201759338,0.8521920442581177,0.988162100315094,0.0,accept,unanimous_agreement
668404536,1207,i don't think the lines above should be compiled only when the experimental is on,0,0,0,0.973843276500702,0.97552227973938,0.9680469632148744,0.0,accept,unanimous_agreement
668404774,1207,"this new #include is not needed, remove it",0,0,0,0.9866142868995668,0.9833182096481324,0.9958958625793456,0.0,accept,unanimous_agreement
668404809,1207,"this new #include is not needed, remove it",0,0,0,0.9866142868995668,0.9833182096481324,0.9958958625793456,0.0,accept,unanimous_agreement
668405627,1207,"we aren't yet wholly consistent about comment at tops of files, but see some examples with my name and imitate with your name in this and other new files.",0,0,0,0.9698266983032228,0.9752163290977478,0.9897621273994446,0.0,accept,unanimous_agreement
668406718,1207,all good,1,1,1,0.9273792505264282,0.9738343358039856,0.9065300822257996,1.0,accept,unanimous_agreement
668407327,1207,i'd prefer to avoid including trackpanel.h,0,0,0,0.975707471370697,0.9888213872909546,0.9867957830429076,0.0,accept,unanimous_agreement
668407509,1207,just viewinfo::get(*pproject) and you can avoid use of trackpanel,0,0,0,0.982912302017212,0.9919058084487916,0.9952545166015624,0.0,accept,unanimous_agreement
668408863,1207,i'm glad you figured out the use of laststate from other examples!,1,1,1,0.9846278429031372,0.9819660782814026,0.9772119522094728,1.0,accept,unanimous_agreement
668409067,1207,"remembering the rule that a .cpp file's own header should be the first included, good",1,1,0,0.5407263040542603,0.5197194218635559,0.9556966423988342,1.0,accept,majority_agreement
668410054,1207,"i might want to make a raii class, perhaps in trackartist.h, called tempclippingregion which does setclippingregion in its ctor destroyclipppingregion in its dtor... define it once, reuse the class in a few places.",0,0,0,0.987559735774994,0.9924869537353516,0.9889588356018066,0.0,accept,unanimous_agreement
668410631,1207,this constant might be made private to the .cpp file,0,0,0,0.989525556564331,0.9939597845077516,0.9947368502616882,0.0,accept,unanimous_agreement
668410995,1207,remove this comment,0,0,0,0.9579126834869384,0.980471134185791,0.9814572334289552,0.0,accept,unanimous_agreement
668412203,1207,but then... perhaps the setting and destroying of the clipping region can happen inside drawclipaffordance? because that function always requires it? then you don't need to repeat it for wave track affordance.,0,0,0,0.983439803123474,0.9919978976249696,0.9892873764038086,0.0,accept,unanimous_agreement
668413060,1207,assuming the clipping region is such that the bottom corners are not drawn.,0,0,0,0.9798398613929749,0.987829327583313,0.9883238077163696,0.0,accept,unanimous_agreement
668413268,1207,reminder to check whether these and other new colors look good in all four of the built-in themes. ask the designers.,0,0,0,0.968817174434662,0.9820982813835144,0.9787122011184692,0.0,accept,unanimous_agreement
668414417,1207,"what happens if the text is so long that it extends past the clip's right boundary? another clip's affordance might be painted after over part of it. the text is now always empty, but maybe you will need to truncate it with ...",0,0,0,0.9729537963867188,0.9580888152122498,0.981319546699524,0.0,accept,unanimous_agreement
668415428,1207,"the trackartists additions might make a small separate commit, followed by commits for wave and note tracks",0,0,0,0.9881129860877992,0.9939740300178528,0.992276132106781,0.0,accept,unanimous_agreement
668416973,1207,this might be a simple pointer. it's safe to assume no clip you point to will be destroyed during the drawing of the track panel. so ownership semantics are irrelevant to the function.,0,0,0,0.9850150942802428,0.9895890951156616,0.9901594519615172,0.0,accept,unanimous_agreement
668418318,1207,"unecessary, remove it",0,0,0,0.9661194086074828,0.9758955836296082,0.942007303237915,0.0,accept,unanimous_agreement
668418892,1207,"again, this might be a simple pointer",0,0,0,0.9870207905769348,0.9899889230728148,0.9876006841659546,0.0,accept,unanimous_agreement
668419774,1207,"good, if not strictly needed correction; do the same for spectrumview",1,0,0,0.6751846671104431,0.8405364155769348,0.9090471267700196,0.0,accept,majority_agreement
668420905,1207,good that you figured out the need for this -- it must have been by recording?,0,0,1,0.7379589080810547,0.6059503555297852,0.7779116034507751,0.0,accept,majority_agreement
668421296,1207,i think that could safely be a static cast. wavetrackview controls the definition of its affordance cell as always of this type.,0,0,0,0.9885770082473756,0.9885684251785278,0.9883467555046082,0.0,accept,unanimous_agreement
668421451,1207,`return {};`,0,0,0,0.9811363816261292,0.9889966249465942,0.9836598634719848,0.0,accept,unanimous_agreement
668423099,1207,"eliminate this #include, as for notetrackaffordancecontrols",0,0,0,0.9846066236495972,0.9784994125366212,0.9939809441566468,0.0,accept,unanimous_agreement
668424281,1207,simplify`: {}`,0,0,0,0.9829562902450562,0.9913369417190552,0.9451031684875488,0.0,accept,unanimous_agreement
668424479,1207,`return {};` avoid repeating the type. let the compiler deduce it.,0,0,0,0.9829950928688048,0.9889605641365052,0.9928472638130188,0.0,accept,unanimous_agreement
668424693,1207,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
668426013,1207,why the change? again because of that empty square above the ruler?,0,0,0,0.8644011616706848,0.9716082215309144,0.9811320304870604,0.0,accept,unanimous_agreement
668426456,1207,the logic has changed so that the following lines might execute with `clickedtrack==nullptr` which didn't happen before. fix that.,0,0,0,0.988523006439209,0.9898160696029664,0.9946816563606262,0.0,accept,unanimous_agreement
668428028,1207,i'd like to avoid adding more wxunused,0,0,0,0.9720699787139891,0.9067347049713136,0.9727631211280824,0.0,accept,unanimous_agreement
668428704,1207,out-dent please,0,0,0,0.982019066810608,0.946665108203888,0.9900334477424622,0.0,accept,unanimous_agreement
668428996,1207,just `const audacityproject *` if you don't use the argument. it will make no compiler warning.,0,0,0,0.9635917544364928,0.992872953414917,0.9933342933654784,0.0,accept,unanimous_agreement
668429273,1207,design specified this string?,0,0,0,0.9871562719345092,0.977963387966156,0.9941473007202148,0.0,accept,unanimous_agreement
668429847,1207,might be a const reference argument to avoid the nontrivial copy of shared_ptr. not very important.,0,0,0,0.8960139751434326,0.8765614628791809,0.9873807430267334,0.0,accept,unanimous_agreement
668430952,1207,what does this line do?,0,0,0,0.9510906338691713,0.981590986251831,0.9805620312690736,0.0,accept,unanimous_agreement
668432370,1207,this line looks weird. the conversion of shared to weak can just be left implicit.,-1,-1,-1,0.9811463356018066,0.9896968603134156,0.991169571876526,-1.0,accept,unanimous_agreement
668433530,1207,"what is really meant by this condition? that the clip was not dragged, but just clicked and released? i think a more correct test could be written, than reliance on the return code of release. add something to the base class for this purpose if you must.",0,0,0,0.986152410507202,0.9859646558761596,0.9902377724647522,0.0,accept,unanimous_agreement
668434138,1207,"i don't like the existing typeswitches, i hope to eliminate many of them, and i want to avoid adding more of them. better: affordancehandle defines another virtual function; and wavetrackaffordancehandle is a further subclass supplying the behavior in the block below in an override.",-1,-1,-1,0.9522395730018616,0.9330640435218812,0.5821767449378967,-1.0,accept,unanimous_agreement
668437145,1207,unnecessary,0,0,-1,0.6610735654830933,0.9073663949966432,0.580326497554779,0.0,accept,majority_agreement
668437812,1207,"what are the ""clip frame drawing fixes?"" corrections to the previous commit, or some intentional changes specified in the design? if the first, squash with other commits for wave and note track affordances once those are separated. if the second, explain more in commit comments.",0,0,0,0.9875476360321044,0.991309642791748,0.9933912754058838,0.0,accept,unanimous_agreement
668632210,1207,"it casts to the subclass, so static_cast is not safe.",-1,0,0,0.7207155227661133,0.9678189158439636,0.98184996843338,0.0,accept,majority_agreement
668734988,1207,"that's not a complete answer. static_cast can be safe in special cases where the programmer has some other way to prove that the cast is always correcct. the static_cast was a safe thing before that was in the code for years. i want to understand, why is it no longer so.",0,0,0,0.8767332434654236,0.9662494659423828,0.9451321959495544,0.0,accept,unanimous_agreement
668785396,1207,"if it's guranteed to be a pointer to commontrackpanelcell, why then we use trackpanelcell instead? and in this case the problem is that emptypanelrect class is not derived from commontrackpanelcell, and the signature of trackpanelgroup::children doesn't say it has to be",-1,0,0,0.9302768707275392,0.9910020232200624,0.978964865207672,0.0,accept,majority_agreement
668808232,1207,"i don't remember that desiners would requested such behaviour, it rather a unforseen consequence of having an affordance area which increases minimum track size. i'll let them know about this.",0,0,0,0.9330210089683532,0.6868506669998169,0.9838303923606871,0.0,accept,unanimous_agreement
669207340,1207,"the complete answer why the old code was not wrong to use static_cast: you can examine the subdivision of the area in trackpanel, and prove that the ultimate cells were always of subclasses of commontrackpanelcell. that's not true in general for a cellularpanel (the base class of trackpanel), but it is true for this subclass of it. this is no longer true after these changes. it might be made true again if emptypanelrect could also be a commontrackpanelcell, knowing which track it is associated with (at construction time), and overriding dofindtrack() to return that track. in fact it might be mildly advantageous to rewrite that class this way. then the static_cast can be restored.",0,0,0,0.982234537601471,0.9932600855827332,0.9836238622665404,0.0,accept,unanimous_agreement
669208972,1207,"good points: but trackpanelgroup is misleadingly named for historical reasons (and my fault): cellularpanelgroup would be a better name. it is now meant to cooperate with cellularpanel, a more general base class of trackpanel but also of adornedrulerpanel (the timeline above it). ""trackpanelcell"" might be better called cellularpanelcell, and ""commontrackpanelcell"" is really the common subclass of all cells, specifically of trackpanel, so ""trackpanelcell"" should be the name only for that. the guarantee that the pointer to the visited cell is really of this subclass -- that guarantee is not given by cellularpanel, but it is given by trackpanel. did i make that clear? i'm not sure i did, but that's my explanation.",1,0,1,0.7342280149459839,0.7108269929885864,0.7278627753257751,1.0,accept,majority_agreement
669209322,1207,"that is, i mean compile them irrespective of that experimental",0,0,0,0.9720548391342164,0.9677942395210266,0.99207204580307,0.0,accept,unanimous_agreement
669210136,1207,also mentioned today: what about right-to-left languages? maybe the code to draw the text needs to change in that case?,0,0,0,0.9838480353355408,0.992660105228424,0.9937551021575928,0.0,accept,unanimous_agreement
669211256,1207,"the static_cast was justified by the fact that this uihandle class is produced only by cell objects that are part of trackpanel, and all other cells of a trackpanel were guaranteed to be derived from commontrackpanelcell.",0,0,0,0.9875062704086304,0.9946916699409484,0.99380624294281,0.0,accept,unanimous_agreement
669211508,1207,"or again, the static_cast could remain, if the new empty cell type is also a commontrackpanelcell.",0,0,0,0.9889492988586426,0.9926723837852478,0.9917710423469543,0.0,accept,unanimous_agreement
669737397,1207,"no, but we definitely will need another hit text for this handle, do i need to talk to designers about that or strings will be reviewed and updated later before we start next release?",0,0,0,0.9729061722755432,0.984979808330536,0.991455078125,0.0,accept,unanimous_agreement
670327277,1207,"let solve this with pr related to clip names, until then i remove label from affordances",0,0,0,0.9870699644088744,0.9713338613510132,0.9942217469215392,0.0,accept,unanimous_agreement
670333513,1207,"you are saying that there is an agreement that trackpanel should contain only entities derived from commontrackpanelcell. i've made a small research and found out that these are not the only places where such assumption is used, so i believe it would be safer to do what you said. refactoring of this, if required at all, is outside of the scope of this pr.",0,0,0,0.9492163062095642,0.9791867733001708,0.9849231243133544,0.0,accept,unanimous_agreement
670335173,1207,"the comment above says: constants related to y coordinates in the track panel and this is not the only constant used only in trackpanel.cpp, i'd preffer to keep it here to group related things together",0,0,0,0.9837740659713744,0.99306458234787,0.994724690914154,0.0,accept,unanimous_agreement
670335623,1207,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
670337026,1207,"drawclipaffordance does not have enough of context to make proper clipping, also in example with wave clips, that would lead to redundant calls",0,0,0,0.9196096062660216,0.9648226499557496,0.9800187945365906,0.0,accept,unanimous_agreement
670343523,1207,"thanks! fixed whole drawing, should be fine now",1,1,1,0.9757269024848938,0.9942542910575868,0.994282364845276,1.0,accept,unanimous_agreement
670350500,1207,do you mean use {} within ternary operator? i don't think c++ allows that,0,0,0,0.9789157509803772,0.9493393301963806,0.991296410560608,0.0,accept,unanimous_agreement
670351341,1207,"yep, typo, thanks!",1,1,1,0.9607177376747132,0.990467607975006,0.9735854864120485,1.0,accept,unanimous_agreement
670353167,1207,this is to highlight affordance on hover,0,0,0,0.9853619337081908,0.9898687601089478,0.994310736656189,0.0,accept,unanimous_agreement
670364406,1207,"this is an error, thanks. still i did some changes, which allow me to draw cursor over affordance area properly",1,1,1,0.6890208125114441,0.9199087023735046,0.8118575811386108,1.0,accept,unanimous_agreement
671088706,1207,"i see the change now at 6888d9006ff9286ec38e8dd1c3e3c0324240269a, but i don't yet approve that.",0,0,0,0.959316611289978,0.964431643486023,0.9938238859176636,0.0,accept,unanimous_agreement
671103855,1207,still unresolved,0,0,0,0.894314169883728,0.931536078453064,0.793069064617157,0.0,accept,unanimous_agreement
671104835,1207,"i'm sure it does, at least in c++14 and later. i have compiled lines like it.",0,0,0,0.5335639119148254,0.9599162340164183,0.9840823411941528,0.0,accept,unanimous_agreement
671108370,1207,i made a card for this question in the project board.,0,0,0,0.9799281358718872,0.98909991979599,0.983260214328766,0.0,accept,unanimous_agreement
671109400,1207,the correct way to do that is to override uihandle::enter. see other examples.,0,0,0,0.9873842000961304,0.9938191771507264,0.9943285584449768,0.0,accept,unanimous_agreement
671110431,1207,this is still unresolved,0,0,0,0.7882057428359985,0.848151683807373,0.9580997824668884,0.0,accept,unanimous_agreement
671117229,1207,remove these two functions,0,0,0,0.9770629405975342,0.9847010374069214,0.9934050440788268,0.0,accept,unanimous_agreement
671117477,1207,*thickness,0,0,0,0.9535956382751464,0.9120113849639891,0.9161193370819092,0.0,accept,unanimous_agreement
671119264,1207,this might be constructed also with a shared_ptr to the associated track,0,0,0,0.9877179861068726,0.9941027760505676,0.9940733313560486,0.0,accept,unanimous_agreement
671119411,1207,"changed base, good",1,1,1,0.9326844811439514,0.8619071841239929,0.970048725605011,1.0,accept,unanimous_agreement
671120456,1207,"... and then this might return non-null. it may be slightly advantageous to do that. certain click-drag-release actions query for the track the mouse is over during the drag, which might not be the same as at the click point. this information can be found when the mouse is over a vertical ruler or over a resizing area. it might as well be available too for this small rectangle.",0,0,0,0.9825240969657898,0.9860069751739502,0.9867022633552552,0.0,accept,unanimous_agreement
671123726,1207,"i do not approve this commit. was this change of appearance explicitly specified? to draw the zero-width selection over the affordance too? but, not do to that with non-zero-width selection? as implemented here, the line will also be stroked over the separator between stereo channels.",0,0,-1,0.9533479809761048,0.9730857014656068,0.5907525420188904,0.0,accept,majority_agreement
671126301,1207,"another point of the old implementation of the zero-width cursor is that the function drawoverlays() knows how to redraw certain simple strokes over the track panel area cheaply, without repainting everything, and existing calls to drawoverlays() after change of selection assume that the erasing of old selection and drawing of new will be done.",0,0,0,0.9870511293411256,0.9899590611457824,0.9887136220932008,0.0,accept,unanimous_agreement
671126888,1207,and that happens only for drawing implemented by subclasses of overlay. not trackpaneldrawable.,0,0,0,0.9823327660560608,0.9901546239852904,0.9938942790031432,0.0,accept,unanimous_agreement
671156327,1207,what for we do need it now?,0,0,0,0.9834532141685486,0.977194607257843,0.990920901298523,0.0,accept,unanimous_agreement
671195732,1207,none of my compilers allow that. clang bundled with xcode 12.4 says: initializer list cannot be used on the right hand side of operator ':' msvc does not compile this as well. and minimum c++ standard version is set to c++17 in cmake (i didn't change that),0,0,0,0.968713879585266,0.9888249039649964,0.9883843660354614,0.0,accept,unanimous_agreement
671209382,1207,"i'm not sure which picture i should look at there. still, if it is the correct design, the implementation should use overlay classes.",0,0,0,0.5394761562347412,0.7169864177703857,0.7282167673110962,0.0,accept,unanimous_agreement
671211138,1207,"when i click that link, the picture shows me a mono track, with a non-point selection -- and it id not painting over the affordance. and that behavior will happen with no other change. where is there a picture specifying a change for drawing of point selection? and also showing a stereo example?",0,0,0,0.983749270439148,0.9610714316368104,0.9860087037086488,0.0,accept,unanimous_agreement
671214266,1207,"for instance, if you click in one track to select, then drag the mouse into another track, then the other track also becomes selected. this happens not only if the mouse drags into the waveform area, but even if it drags into the vertical ruler or control area. it should happen also if the mouse drags into the new empty cell. so the empty cell should report which track it is associated with. this may not be a very important case to fix, that anyone will notice. however, it is very easily implemented, and makes behavior a bit more consistent, so i say, do it.",0,0,0,0.9692792892456056,0.974932074546814,0.9505854845046996,0.0,accept,unanimous_agreement
672271568,1207,"you are right, but nullptr will work instead of {}, and we should prefer that brevity and non-repetition of type information.",0,0,0,0.9771971106529236,0.9657214283943176,0.9861114025115968,0.0,accept,unanimous_agreement
672338180,1207,does not compile either: non-pointer operand type 'const std::weak_ptr ' incompatible with nullptr,0,0,0,0.967519760131836,0.9743083715438844,0.991452693939209,0.0,accept,unanimous_agreement
672587955,1207,"as far as i can see, changing selection involves redrawing anyway (i didn't add any line to invoke redrawing), so from that perspective i don't see difference. right now i don't see solid solution for solving this issue with overlays, i can come up only with workarounds.",0,0,0,0.884255588054657,0.9429691433906556,0.8536694645881653,0.0,accept,unanimous_agreement
672815010,1207,"is there a reason you can't implement the change in this file, rather than in trackpanel?",0,0,0,0.984776258468628,0.9934950470924376,0.9932460188865662,0.0,accept,unanimous_agreement
672815319,1207,oh well,0,1,0,0.6503499746322632,0.5791757702827454,0.881588876247406,0.0,accept,majority_agreement
672815664,1207,"now it's resolved, thanks! i see you copied the implementation of selecthandle's double click, which still has one of the unfortunate typeswitches, but that can be fixed later.",1,1,1,0.9627314209938048,0.9781094789505004,0.9920719265937804,1.0,accept,unanimous_agreement
672817051,1207,"it may be a problem that we do too much unnecessary redrawing and should figure out how to do less of it. i don't see why you can't have the editcursoroverlay dynamic_cast to tack affordance cell types and then that's not null, then draw over the cell, just as with trackview.",0,0,0,0.939831793308258,0.9513088464736938,0.9568108916282654,0.0,accept,unanimous_agreement
672817236,1207,approved this commit,0,0,0,0.9803807139396667,0.9707244038581848,0.954931914806366,0.0,accept,unanimous_agreement
672819112,1207,this dynamic cast could safely be static instead. wavetrackaffordancehandle can assume that it is only created by hit-tests on affordance areas of wave tracks.,0,0,0,0.9894173741340636,0.9940209984779358,0.9924209713935852,0.0,accept,unanimous_agreement
672819389,1207,thanks for this commit,1,0,1,0.7261790037155151,0.5114346146583557,0.8705613613128662,1.0,accept,majority_agreement
672819514,1207,i approved this commit,0,0,0,0.9764118194580078,0.8912866115570068,0.9325574636459352,0.0,accept,unanimous_agreement
672901673,1207,"then the only reason for having a class for affordance cell (which is required to be a commontrackcell now) would be to detect it's type with dynamic_cast (or to check for wavetrackaffordancecontrols and notetrackaffordancecontrols separately). but when drawing is done in channelgroup, we don't need neither of these (separate class, type check).",0,0,0,0.987251043319702,0.9943779110908508,0.9924393892288208,0.0,accept,unanimous_agreement
672913037,1207,"i don't like dymamic_cast, but for me it's a general rule to use it when downcasting is required, it spots places where refactoring may be needed.",-1,-1,0,0.827235221862793,0.9175493717193604,0.6990513801574707,-1.0,accept,majority_agreement
674899986,1207,"this is not sufficient reason not to make the affordance cell class. when i rebase my long branch onto the part of affordances already merged, and resolved conflicts, i needed the new common class for other reasons. the code in trackpanel may be simpler, avoiding casts, but that also does not address the possible performance problems. short answer: i still have my doubts about moving the drawing. it may prove to be better this way. but, i also don't want to delay merging this, and the appearance is right. therefore: don't delete the lines above, but comment them out, as the possibly useful alternative way of drawing the cursor, which we may want to use again in future.",0,0,0,0.6075952649116516,0.7857998013496399,0.9125619530677797,0.0,accept,unanimous_agreement
674921133,1207,"spelling, ""navigation""",0,0,0,0.9834896326065063,0.9879069328308104,0.9937248826026917,0.0,accept,unanimous_agreement
674923652,1207,very good: you found out that the right-click case needs handling too. maybe just comment `right-click`,1,1,1,0.92290061712265,0.5999296307563782,0.9687724113464355,1.0,accept,unanimous_agreement
674935280,1207,this is a large block of moved code. it used to happen in the click. i'm not sure how i reach it in the debugger now. can the commit comment explain the purpose of this move?,0,-1,0,0.8335540890693665,0.5211500525474548,0.9811136722564696,0.0,accept,majority_agreement
674937142,1207,"more is happening here than the routine changes needed elsewhere for the distinction of the two indices. if it were me, i might make two commits. rather than that, add more explanation to the commit comment about the intention.",0,0,0,0.9789526462554932,0.9834248423576356,0.9916545152664183,0.0,accept,unanimous_agreement
674937374,1207,more commit comments about this.,0,0,0,0.9501413702964784,0.9627719521522522,0.9903308153152466,0.0,accept,unanimous_agreement
674940702,1207,"i disagree with that general rule. static_cast is appropriate instead of dynamic_cast, when you have good reasons to tell the compiler, ""trust me, i can prove that the check is not necessary."" dynamic_cast is also justifiable sometimes.",0,0,0,0.7592718005180359,0.9663643836975098,0.8779329657554626,0.0,accept,unanimous_agreement
750178462,2121,"by eliminating utf8ctowx, are you requring that tag strings to be canonicalized into utf-8 already, or requiring them just to be ascii strings? they are all ascii in practice (i just had to review them all). it is worth a comment. you know i like to say things with type disctinctions where i can. if we were using c++20, i would use std::u8string_view instead of std::string_view. not having c++20 and char8_t, what can we do? maybe at least make a different type alias to make the disctinction in function declarations, thought we won't have type checking by the compiler.",0,0,0,0.8041390180587769,0.6422424912452698,0.9536256194114684,0.0,accept,unanimous_agreement
750178577,2121,"by eliminating utf8ctowx, are you requring that tag strings to be canonicalized into utf-8 already, or requiring them just to be ascii strings? they are all ascii in practice (i just had to review them all). it is worth a comment. you know i like to say things with type disctinctions where i can. if we were using c++20, i would use std::u8string_view instead of std::string_view. not having c++20 and char8_t, what can we do? maybe at least make a different type alias to make the disctinction in function declarations, thought we won't have type checking by the compiler.",0,0,0,0.8041390180587769,0.6422424912452698,0.9536256194114684,0.0,accept,unanimous_agreement
750204812,2121,i'm taking this whole file on trust. are there any differences from the original i should know? as there were with tochars?,0,0,0,0.973857879638672,0.9169663190841676,0.9628700613975524,0.0,accept,unanimous_agreement
750206466,2121,"""not matching the pattern""",0,0,0,0.6330922842025757,0.9729390144348145,0.9602072834968568,0.0,accept,unanimous_agreement
750206711,2121,"""too""",0,0,0,0.9417047500610352,0.773298978805542,0.9643995761871338,0.0,accept,unanimous_agreement
750208447,2121,"""signed"" (in 4 places) ""singed"" means ""burned"" -- which you could also say as ""charred"" :-)",0,1,0,0.7862483859062195,0.9800038933753968,0.5371232032775879,0.0,accept,majority_agreement
750209264,2121,"(and it rhymes with ""cringed"")",0,0,0,0.6607710719108582,0.9880239367485046,0.9870612621307372,0.0,accept,unanimous_agreement
750212179,2121,this time it is just the latest release of the library!,0,0,0,0.8038550615310669,0.929597795009613,0.9915504455566406,0.0,accept,unanimous_agreement
750214047,2121,`unsigned(c) - '0'` ? i'm paranoid of signed char now.,-1,0,-1,0.9472139477729796,0.8189138770103455,0.6984485387802124,-1.0,accept,majority_agreement
750222814,2121,"i think you don't need `- 1`. you treat the last safe digit in the second loop below instead of the first. not wrong, but is it too much caution?",0,0,0,0.956430196762085,0.6871486902236938,0.972800314426422,0.0,accept,unanimous_agreement
750222917,2121,"i don't actually think that char8_t implies any checks on encoding. however, we use expat, and expat seems to convert the output to utf8 internally. so specifically for this case, i imply utf8, and that is what originally implied. the utf8 allows to safely compare to ascii strings given that all the symbols are from the first half of the table. this covers audacity needs for 100% when working with tags and names. for attribute values - we explicitly convert from utf8 to wxstring where needed.",0,0,0,0.9874730110168456,0.9860545992851256,0.9855704307556152,0.0,accept,unanimous_agreement
750223873,2121,probably `std::deque`? it can be more efficient on some platforms,0,0,0,0.978586196899414,0.994750440120697,0.9932328462600708,0.0,accept,unanimous_agreement
750225781,2121,this if-else is redundant with line 74,0,0,0,0.9786155223846436,0.9662327766418456,0.9914759397506714,0.0,accept,unanimous_agreement
750229472,2121,"i'm pretty sure that this will generate the same code because of integer promotion rules. [a link] can do it you way, no probs :-)",1,1,1,0.93263977766037,0.9893876314163208,0.9858450889587402,1.0,accept,unanimous_agreement
750229756,2121,should this be `std::is_signed_v ? static_cast ( std::numeric_limits ::max() / 2 + (isnegative ? 1 : 0)) : std::numeric_limits ::max()`,0,0,0,0.985956072807312,0.9931799173355104,0.9939725995063782,0.0,accept,unanimous_agreement
750234840,2121,"i want to keep the consistent overflow checks. i.e. for uint8_t digits10 is 3, but 257 is an overflow. so we allow to parse ""57"" quickly but give more caution while parsing ""157"" because we expect that it can be ""557""",0,0,0,0.9837401509284972,0.9888606667518616,0.9857471585273744,0.0,accept,unanimous_agreement
750238413,2121,"hmm, thank you for pointing out, line 74 is redundant actually! i want `if constexpr` here exlicitlely.",1,1,1,0.5719709992408752,0.5709469318389893,0.9863641858100892,1.0,accept,unanimous_agreement
750244438,2121,"is it really 3, not 2? see immediately under ""example"" [a link]",0,0,0,0.9872482419013976,0.990802764892578,0.9938563704490662,0.0,accept,unanimous_agreement
750246737,2121,"hmm, could be a bit faster, yes!",0,0,0,0.7553211450576782,0.4849018454551697,0.8795468807220459,0.0,accept,unanimous_agreement
750249896,2121,"hmm, yes, you are completely right!",1,1,1,0.6834824085235596,0.8266080617904663,0.7888118028640747,1.0,accept,unanimous_agreement
750266429,2121,"certainly it's safe when a tag is ascii, and all of them are. but i'm asking, are we _requiring_ them to be ascii now that you remove utf3ctowx ? you may miss my point about char8_t -- it is that, where a string or string_view is required to be utf8 encoding, it would be good to say that with one type, and where required to be ascii, to say that without another type, and it would be best if the types do not implicitly interconvert, so the compiler will help us catch misuses.",0,0,0,0.9403072595596312,0.8367488384246826,0.9849125146865844,0.0,accept,unanimous_agreement
750277735,2121,"i thought `deque` deals with big pages. existing projectfileioregistry (alias xmlmethodregistry ) registrations are maybe too few to justify it, and they happen only at startup. whereas, the lookups into the map may be many, and we want all the savings we can find during deserialization. the lookups may not really be many, yet, but xmlmethodregistry may be reused for many more fields later.",0,0,0,0.9789865612983704,0.984126627445221,0.9820122718811036,0.0,accept,unanimous_agreement
750278915,2121,"not just faster, but correct. it was wrong without `/ 2`. you want overflow of the absolute value of the signed value at a lower threshold than with unsigned.",0,0,0,0.9840767979621888,0.792630672454834,0.9728819131851196,0.0,accept,unanimous_agreement
750284456,2121,"we can't even do it, because expat will always output utf8 encoded string. the safest assumption is that all std::string are utf8 encoded to be fair.",0,0,0,0.9843336939811708,0.9868790507316588,0.9830499291419984,0.0,accept,unanimous_agreement
750314906,2121,"temp > maxvalue is useless in the unsigned case. temp < result is an insufficient check for overflow! try it for example with resulttype as unsigned char, and the string ""724"". you will get 212 and no error detected. please review another suggested commit from me to fix this.",0,0,0,0.9072054028511048,0.6239180564880371,0.9556076526641846,0.0,accept,unanimous_agreement
750320590,2121,"sorry, i was wrong, because the template argument is ` ` not ` `",-1,-1,-1,0.98222553730011,0.9918741583824158,0.9905969500541688,-1.0,accept,unanimous_agreement
750322072,2121,"but the original was wrong too, because the cast to unsignedresulttype should be done before adding 1 ! (maybe it works, but the small change technically avoids actual overflow in the computation of maxvalue itself)",0,0,0,0.9651659727096558,0.9698095321655272,0.970984935760498,0.0,accept,unanimous_agreement
750350620,2121,"yes, i rewrote it correctly",0,0,0,0.9837911128997804,0.938155233860016,0.9886224865913392,0.0,accept,unanimous_agreement
750351568,2121,"hmm, it will, but probably not for the `uint64_t`, let me think. definitely works for `uint8_t`: [a link] we can compile it out by if constexpr, but i don't think if it really matters though",0,0,0,0.963908314704895,0.9607633352279664,0.9649550318717957,0.0,accept,unanimous_agreement
750356412,2121,"""text""",0,0,0,0.9756245017051696,0.9884782433509828,0.9915151596069336,0.0,accept,unanimous_agreement
750356878,2121,"""a number of get overloads""",0,0,0,0.9572960138320924,0.9855932593345642,0.9766026735305786,0.0,accept,unanimous_agreement
750359433,2121,"""uninitiallized""",0,0,0,0.9801669716835022,0.9379034042358398,0.9874722361564636,0.0,accept,unanimous_agreement
750361227,2121,isn't string_view cheap to pass by value?,0,0,0,0.9322131872177124,0.9764512777328492,0.9870389103889464,0.0,accept,unanimous_agreement
750370636,2121,"you use noexcept a lot. what is your understanding of the usefulness of it? my understanding is that noexcept is mainly useful for a few special functions like constructors, destructors, moves, and swaps so that standard library containers and algorithms can sometimes produce more efficient specializations. that is, where something like this might occur: [code block] but all these accessors, even if they don't ever throw, are unlikely to bring any such benefit by having the annotation.",0,0,0,0.9690160155296326,0.9339131712913512,0.9620552659034728,0.0,accept,unanimous_agreement
750381700,2121,"you just overloaded one function name ""get"" for the functions without default values. why not do the same for this other series? overloading one name makes nice uses of visit of a variant possible, with a simple generic lambda, as i did in this commit in master. 3acbcb4c2d8ada1e74991be79ecb3844568bcc0a",0,0,0,0.971907913684845,0.9910860657691956,0.9853648543357848,0.0,accept,unanimous_agreement
750385688,2121,"as i showed in commit 3acbcb4c2d8ada1e74991be79ecb3844568bcc0a in master, we can use variant, with some restrictions. use `get_if` not `get`.",0,0,0,0.9893749952316284,0.994768500328064,0.9946028590202332,0.0,accept,unanimous_agreement
750390367,2121,`std::is_signed_v ` is false: [a link] so maybe you should do like the standard library?,0,0,0,0.9863629937171936,0.9930052161216736,0.9948835968971252,0.0,accept,unanimous_agreement
750411836,2121,"unused expression, and incorrect result!",-1,-1,-1,0.6727442145347595,0.9663849472999572,0.9689958691596984,-1.0,accept,unanimous_agreement
750418726,2121,maybe cast to unsigned and express this with one bitwise &,0,0,0,0.9873502850532532,0.9927238821983336,0.9898372292518616,0.0,accept,unanimous_agreement
750420153,2121,this entire source file makes me want to find a nicer rewrite with variant and visit and less repetition... but not now,0,0,-1,0.8216419816017151,0.8008443713188171,0.8596583604812622,0.0,accept,majority_agreement
750430536,2121,it is,0,0,0,0.9721988439559937,0.9420114159584044,0.9914257526397704,0.0,accept,unanimous_agreement
750436381,2121,for two reasons: 1. it's a part of contract for the user of the interface. similar to `const`. if i see `noexcept` - i expect that i don't have to handle the exception. 2. it impacts the code generation even more than const. ([a link],0,0,0,0.9187320470809937,0.98436039686203,0.9811002016067504,0.0,accept,unanimous_agreement
750438879,2121,i'm not sure if i understand what you mean. get(bool&) and getbool(bool) behavior is completely different.,-1,-1,-1,0.9260848164558412,0.6854159832000732,0.7681323289871216,-1.0,accept,unanimous_agreement
750439405,2121,"sure, why not!",0,0,0,0.9340269565582277,0.8278423547744751,0.4990353286266327,0.0,accept,unanimous_agreement
750439522,2121,ooops,0,-1,-1,0.9782004952430724,0.9456677436828612,0.9803285002708436,-1.0,accept,majority_agreement
750442507,2121,"well, this will only replace switch by mtype to switch by variant::index. i expect the compilation speed to be much worse in the case of a variant though.",0,0,0,0.913110077381134,0.9864150881767272,0.9862848520278932,0.0,accept,unanimous_agreement
750452184,2121,"there will be a huge set of nested ifs by a type, won't it? so the amount of code will be roughly the same, the compilation speed will be much worse though. get can be rewritten easily using a template, but again, the cost will be the compilation time.",0,0,0,0.6233022809028625,0.8678717613220215,0.875163733959198,0.0,accept,unanimous_agreement
750454812,2121,"(you know, like) [code block]",0,0,0,0.9857921600341796,0.990555226802826,0.990617573261261,0.0,accept,unanimous_agreement
750480476,2121,"i notice this change to the call to writeattr. (only to this call.) but the function xmlwriter::writeattr was not changed. there is still an implicit construction of a wxstring each time it is called. did you mean yet another change of arguments, to take std::string_view? this might squeeze some more performance out of serialization. but this pr is about the deserialization.",0,0,0,0.9718008041381836,0.9769080877304076,0.9860286116600036,0.0,accept,unanimous_agreement
750482515,2121,"well, this is a mistake :-( i do, but not with this pr",-1,-1,-1,0.9894017577171326,0.9917073845863342,0.9967859983444214,-1.0,accept,unanimous_agreement
750484914,2121,"instead of naming the overloads taking a default value as getbool, getint16, ... they might all be called get, but then a non-deduced template parameter would be needed when the default is not specified, thus get (). that might be an extra bother to type, but if for some reason you wanted these functions in a variant visitor, there would be a uniform syntax get () for some t. well never mind. i'm now reading how these functions are used in practice in a later commit.",0,0,0,0.6463204026222229,0.9381055235862732,0.9798081517219543,0.0,accept,unanimous_agreement
750490877,2121,is this a not always correct assumption that sizeof(long) is sizeof(int32_t)?,0,0,0,0.9524700045585632,0.9847567677497864,0.9886198043823242,0.0,accept,unanimous_agreement
750505433,2121,the compiler replaces it with something like `(value - min) < (max - min)` if the resulttype is smaller than int64_t and simply compiles out this check if resulttype is int64_t. i feel like the direct comparison here expresses the intention better both for the reader and for the compiler.,0,0,0,0.7249727845191956,0.9859613180160522,0.9900975227355956,0.0,accept,unanimous_agreement
750507449,2121,"on our platforms - yes, but let me rewrite it in a safer way.",0,0,0,0.9658493399620056,0.9704211950302124,0.9908764958381652,0.0,accept,unanimous_agreement
750508446,2121,"hmm, i've looked below, we convert it to `int` later on",0,0,0,0.985186755657196,0.9771482944488524,0.9787390828132628,0.0,accept,unanimous_agreement
750510604,2121,"actually, previous code could lead to an undefined value in viewinfo.vpos. `tolong` docs state `false if the string does not represent a valid number in the given base (the value of val may still be modified in this case).`",0,0,0,0.98768949508667,0.9926642775535583,0.9934858679771424,0.0,accept,unanimous_agreement
750515070,2121,i can rename get to `tryget` if you want :-) this will allow to name this set of functions as simply `get` then.,1,1,1,0.9330917000770568,0.987311601638794,0.9225072264671326,1.0,accept,unanimous_agreement
750516792,2121,"just to clarify - i've tried to keep the diffs as small as possible, and i guess it was your intention as well when you were extracting this code into a library.",0,0,0,0.979264199733734,0.979244828224182,0.991393744945526,0.0,accept,unanimous_agreement
750518936,2121,"what's worse, now i see that in some cases (see `zoom` nearby) the original code had undefined behavior and i'm no longer sure that my changes are equivalent. i think i will go ahead with that tryget refactoring, this will force me to rewrite all such code as `a = value.get(a)`.",-1,0,-1,0.7914187908172607,0.5767883062362671,0.9358626008033752,-1.0,accept,majority_agreement
750663472,2121,"and yet isn’t there generation of code to detect an exception trying to escape the scope, and forcing a call to terminate instead? my understanding is that this is required by the standard and is not free. see also the mention of “table” implementation at the end which seems to be questioning what scott said.",0,0,0,0.9710425138473512,0.9783706665039062,0.990023910999298,0.0,accept,unanimous_agreement
750664829,2121,"i think you could just call them all get and rely on overload resolution, but maybe you would not want to. or maybe get_or? (see std::optional::value_or)",0,0,0,0.9844767451286316,0.99317729473114,0.9886239767074584,0.0,accept,unanimous_agreement
750666165,2121,"who cares, we will be at c++20 with modules speeding up our builds next month. right after the similarly easy replatforming. yeah.",0,0,-1,0.7450389266014099,0.6704757809638977,0.4527332782745361,0.0,accept,majority_agreement
750667658,2121,cool. well at least one compiler.,1,1,1,0.976074516773224,0.99227774143219,0.9722046852111816,1.0,accept,unanimous_agreement
750673307,2121,"i like avoidance of repetition where i can get it with templates, with its advantages for maintainability. maybe i should care more about build time. but you know... “lisp programmers know the value of everything and the cost of nothing.” substitute “meta” for “lisp”",1,1,0,0.6241563558578491,0.9466962218284608,0.5226991772651672,1.0,accept,majority_agreement
750683088,2121,"templates have a significant cost attached. they are slow to compile; they bloat the executables and libraries. in this case, having all the internal of the class exposed seems a bit much to me. there are places where they are extremely helpful, but i really don't think that this is the one.",-1,-1,-1,0.667353630065918,0.6767234206199646,0.7768496870994568,-1.0,accept,unanimous_agreement
750685706,2121,"i've checked it over clang, msvc, and gcc. all three generated a single comparison instruction here and compiled out the int64_t case.",0,0,0,0.985255479812622,0.9877976775169371,0.9895238280296326,0.0,accept,unanimous_agreement
750688783,2121,overloading with reference and value type doesn't really play well.,-1,0,0,0.7873856425285339,0.8775880336761475,0.7608540654182434,0.0,accept,majority_agreement
750699351,2121,"only if the compiler sees that there is a potentially-throwing expression, and unlike throw() noexcept is not required to generate unwinding code at all. it may do it, though. in our case, as we build loads of shared libraries, the only case the compiler can know that for sure is if we correctly mark exported methods as noexcept. btw cppcoreguidelines e.12 is ""use noexcept when exiting a function because of a throw is impossible or unacceptable""",0,0,0,0.984237253665924,0.9933558702468872,0.9660645723342896,0.0,accept,unanimous_agreement
751127787,2121,should you shrink the default to be sure the operating system doesn't grab a second 4k page that is mostly wasted?,0,0,0,0.96670800447464,0.9236507415771484,0.9834681749343872,0.0,accept,unanimous_agreement
751130788,2121,why not just memcpy?,0,0,0,0.9446486830711364,0.9796410799026488,0.9847078323364258,0.0,accept,unanimous_agreement
751134680,2121,there is no check of the return value of readvalue!,0,0,0,0.9736015200614928,0.9731354117393494,0.9829959273338318,0.0,accept,unanimous_agreement
751134937,2121,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
751143337,2121,"""handler""",0,0,0,0.986517071723938,0.982170820236206,0.9836646914482116,0.0,accept,unanimous_agreement
751153283,2121,xmlattributevalueview.h,0,0,0,0.98150235414505,0.9899013042449952,0.9917062520980836,0.0,accept,unanimous_agreement
751155116,2121,i like the encapsulation of the isgoodint tests and similar now,1,1,1,0.8016801476478577,0.991109013557434,0.9452415108680724,1.0,accept,unanimous_agreement
751159254,2121,this line made me look here and check the rules for copying of unions [a link],0,0,0,0.9846696853637696,0.9808080196380616,0.9927005767822266,0.0,accept,unanimous_agreement
751162357,2121,"squash the commit that made this change with the previous, to keep buildability of all commits in the branch",0,0,0,0.9853722453117372,0.9934519529342652,0.9941439032554626,0.0,accept,unanimous_agreement
751165090,2121,the skipping of empty tags was not preserved,0,0,0,0.9706650972366332,0.981974184513092,0.9927011728286744,0.0,accept,unanimous_agreement
751171706,2121,i notice a few case insensitive comparisons in the old code. maybe it doesn't matter. some of the other ones are only about very old file formats.,0,0,0,0.9227698445320128,0.6005898714065552,0.9443287253379822,0.0,accept,unanimous_agreement
751172865,2121,"wait, you did take care of case-insensitive comparisons. but, you missed one of the old wxstricmps, above.",0,0,0,0.9657298922538756,0.9773467183113098,0.9750568270683287,0.0,accept,unanimous_agreement
751177260,2121,"i think you need a pop-front of mattrs to preserve this old behavior now, skipping ""filename"" before examining the rest. did you test importing of an audacity 2 file?",0,0,0,0.9867045879364014,0.9742612838745116,0.9888789653778076,0.0,accept,unanimous_agreement
751197669,2121,"i'm not sure if i fully understand your concern. in case of a page fault, os always will fetch more than one page from the swap. in case the memory read can be satisfied from ram there is a balance of how many cache lines we are willing to waste for the buffer purposes vs the cost of reading data. 4k is usually a good compromise, but the optimal performance for sqlite reader proved to be around 32k, otherwise, the cost of reading itself reduced performance noticeably. speaking of how virtual memory is allocated the page size is rarely relevant too. and we have no control over it anyway, most likely an allocation will occupy the adjacent pages. `fread` buffer size is 4k by default in microsoft crt, 8kb on glibc. please keep in mind, that in our configuration sqlite does not use memory-mapped io, reading from disk usually is not implemented via memory mapping.",0,0,-1,0.6178194284439087,0.6325389742851257,0.5897178053855896,0.0,accept,majority_agreement
751212938,2121,"this class was written to avoid the `memcpy`, specifically because memcpy was the number one hot spot. this would be odd to use it here. both on arm64 and x86(-64) this code will generate a single instruction on all the compilers we use. this code remains safe for older arm cpus. however, it was noted that msvc fails to optimize `memcpy` sometimes.",0,0,0,0.9536365866661072,0.9087778925895692,0.9862446188926696,0.0,accept,unanimous_agreement
751216894,2121,as with the restructuring you do - i had no intentions to fix all possible issues with the original code. the `lastread` was not checked either.,0,0,0,0.9672959446907043,0.958696722984314,0.988149106502533,0.0,accept,unanimous_agreement
751219015,2121,i will squash it before merging,0,0,0,0.9812915325164796,0.982427418231964,0.9915071129798888,0.0,accept,unanimous_agreement
751224588,2121,fixed!,0,0,1,0.698331356048584,0.7785738706588745,0.8815674781799316,0.0,accept,majority_agreement
751225858,2121,still have a comment typo,0,0,0,0.9864004850387572,0.8986812233924866,0.9165278077125548,0.0,accept,unanimous_agreement
751226156,2121,"thank you pointing out, fixed!",1,1,1,0.9623924493789672,0.9924960136413574,0.9860170483589172,1.0,accept,unanimous_agreement
751228882,2121,reference and const reference is what i should have said,0,0,0,0.9807580709457396,0.9673954248428344,0.9765579104423524,0.0,accept,unanimous_agreement
751229426,2121,triple cool.,1,1,1,0.9534330368041992,0.9842812418937684,0.9685428738594056,1.0,accept,unanimous_agreement
751236670,2121,"i was thinking of allocating the memory for a vector of 4096 chars, which will have some small memory allocaiton overhead. does the memory allocator try to page-align such big requests, and if so, is there any small advantage in shrinking the vector size just a little so that data plus overhead fits that page?",0,0,0,0.9772639274597168,0.9584579467773438,0.9880205988883972,0.0,accept,unanimous_agreement
751247216,2121,"not this specific case. wavetrack doesn't handle ""filename"" attribute anyway, so it should be safe. i will add pop_front anyway.",0,0,0,0.987825572490692,0.987194836139679,0.9894911050796508,0.0,accept,unanimous_agreement
751255004,2121,"i like to clean up these wxunused things when i have excuse to disturb a function. just omit the argument name. or, use `[[maybe-unused]]` if you want to be very modern.",0,0,0,0.9033787846565248,0.8933666944503784,0.9509073495864868,0.0,accept,unanimous_agreement
751263512,2121,"i don't like it either, but i've tried to leave as much of the original code as possible",-1,-1,-1,0.9697653651237488,0.9790095686912536,0.9586076736450196,-1.0,accept,unanimous_agreement
751264867,2121,"i just checked again the definitions of isgoodstring and isgoodlongstring. the first had an additional check that the other did not, that a string isn't over 4096 characters and possibly from a malicious file, or so the comment said. are you intentionally removing the excessive length check? i don't see where in the pr it is preserved. see commit 7547de9 which was recent and relevant, changing the bound used for the check. although in that commit, pehaps the better thing would have been to use isgoodlongstring somewhere to avoid the check.",0,0,0,0.959367334842682,0.9782318472862244,0.9820479154586792,0.0,accept,unanimous_agreement
751274098,2121,"a general comment about these xmlvaluechecker functions: some become unused, so add a commit to remove them. do they all become unused? if they don't, maybe you missed one of the needed rewrites. in each place where one of the calls to these functions was eliminated, i want to review again to make sure that some other validation is there, with tryget() not get().",0,0,0,0.9847419261932372,0.9887561202049256,0.9813216328620912,0.0,accept,unanimous_agreement
751278298,2121,or maybe i should not bother?,0,0,0,0.905335009098053,0.9710445404052734,0.9360531568527222,0.0,accept,unanimous_agreement
751285403,2121,"isgoodlongstring() only checks that string has no `\0` except for the null terminator. it probably was relevant someday, but i don't see any point in keeping it. isgoodstring() exposes some arbitrary global constraint on all the strings originating from the xml file. i'm glad it is no longer used because such constraints should be implemented in a way that informs the user about it, not simply by discarding the data during the parsing. before [a link] the situation was especially bad because projects would open differently on different platforms. my point is - i see no reasoning behind checking for null characters or why the limit of 4096 characters is used. the first check is redundant by construction. expat is a c library, and it could not produce a string with null characters in the middle.",1,1,0,0.8319345116615295,0.9747665524482728,0.4516147375106811,1.0,accept,majority_agreement
751286043,2121,good point!,1,1,1,0.9838534593582152,0.9942666888237,0.9930058121681212,1.0,accept,unanimous_agreement
751819819,2121,good to see this change. there are other new inclusions of xmltaghandler.h that also only need xmlattributevalueview.h in other files. fix those too if you feel like it. but it's not very important.,1,1,1,0.8142443895339966,0.9485225081443788,0.9767038822174072,1.0,accept,unanimous_agreement
751827747,2121,"getblob is now unused, so remove it",0,0,0,0.9837513566017152,0.9847144484519958,0.9950190782546996,0.0,accept,unanimous_agreement
751861865,2121,is it ok to ignore .ptr in the fromcharsresult? (this is the only place you do ignore it),0,0,0,0.9197156429290771,0.9937317967414856,0.9942986965179444,0.0,accept,unanimous_agreement
751913308,2121,"i thought the emptiness of this function was a bug until i stepped in the debugger and figured out that it is visited only when reading back the xml header data from projectfileio::writexmlheader which we don't really need. (but still write to avoid compatibility breaks, right?) a comment explaining that would help.",0,0,0,0.9498162269592284,0.9672932624816896,0.941305935382843,0.0,accept,unanimous_agreement
751922010,2121,"mstringscache is a deque, i assume because you need non-relocation of the strings that you cache in it (so that you can make string_views later). but could repeated clearing of the deque and then re-allocation in it doing some wasteful reallocations? are all pages freed when you clear()? standard says std::vector::clear() does not change capacity, but i don't see the same stipulated for deque. maybe you can keep one dummy string in it, and resize to 1 instead of clearing, if it matters.",0,0,0,0.9849866032600404,0.9677914381027222,0.9852501749992372,0.0,accept,unanimous_agreement
751922593,2121,"this looks correct, but i don't understand what economy it gives you. still there is one std::string construction. are you sure there are in fact even more allocations in the non-ascii path?",0,-1,0,0.9774551391601562,0.8287472724914551,0.9742956757545472,0.0,accept,majority_agreement
752005989,2121,"around 15-20 percent speedup. c++ standard library fails horribly when it comes to working with strings and locales (nothing new, really. it was this way since the stl was created). another approach would be to use alternative converters. it will be a bit slower in general, but much faster if there are lots of non ascii labels in the project.",-1,0,0,0.5114737749099731,0.8339831829071045,0.6212738156318665,0.0,accept,majority_agreement
752023252,2121,"you really don't like deque ;-) usually, the problem with deque is considered to be different: the memory costs just for one item are very high because deque allocates in large chunks. std::sting is usually around 24-32 bytes (why, libc++?. no, really, why 32 bytes?). on clang deque allocates no less the 4k, on gcc - 512 bytes, which surely fits quite a bit of strings in. even horrible msvc implementation is not a performance concern here. we have worse problems to be solved first, for example, `sequence::handlexmltag` is currently the #1 issue, because it never estimates the resulting blocks count, so `mblock.push_back(wb);` is consuming most of the time right now. still, we have a 40x speed up, and that problem can be easily addressed in a separate, much smaller, and easier to review pr. in case we ever end up having deque to be a performance problem here - the fix will be as easy as a custom allocator. and trust me - you have to write them a lot when you are fighting for the performance :-)",-1,1,1,0.7917245030403137,0.959998369216919,0.9533466696739196,1.0,accept,majority_agreement
752088347,2121,i change my mind. ignore these requests for changes.,-1,-1,-1,0.4998343586921692,0.7933520674705505,0.6002631783485413,-1.0,accept,unanimous_agreement
752094757,2121,custom allocator. i was wondering if you would find use for `std::pmr::string` and some other allocator for the character data.,0,0,0,0.9875855445861816,0.9888449311256408,0.9920042157173156,0.0,accept,unanimous_agreement
752131656,2121,"i found nothing wrong. only this: two tests of in waveclip and commandmanager, where it's not clear to me why you substituted that for isgoodstring there but not elsewhere. but isgoodstring, we agree, was a check we just didn't need.",0,0,0,0.9691547155380248,0.7573320865631104,0.9816493391990662,0.0,accept,unanimous_agreement
639997120,836,this should be removed too,0,0,0,0.9826247096061708,0.9879469275474548,0.9937753677368164,0.0,accept,unanimous_agreement
639997491,836,"we need to make sure, that this is not merged",0,0,0,0.9777961373329164,0.9462143778800964,0.985503315925598,0.0,accept,unanimous_agreement
640013632,836,do you mean the whole file ?,0,0,0,0.9850172400474548,0.9883629679679872,0.992154061794281,0.0,accept,unanimous_agreement
640015630,836,i make no comments on this file,0,0,0,0.7267031669616699,0.9266546368598938,0.989454746246338,0.0,accept,unanimous_agreement
640016264,836,[a link] that documentation page says to use this cmake variable as a last resort and with great caution. are we sure this is necessary to get usable debug symbols?,0,0,0,0.977953553199768,0.9674476385116576,0.991908609867096,0.0,accept,unanimous_agreement
640036886,836,"chain-call idiom is nice. the naming convention in audacity is that member functions begin with a capital letter. perhaps just delete ""set"" from each name. nothing serious.",1,1,1,0.8365406394004822,0.9425225257873536,0.8074085116386414,1.0,accept,unanimous_agreement
640037306,836,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
640042208,836,"reinterpret_cast is the cast operator of last resort. static_cast is more appropriate when a void* context argument, given back to you by a c library, must be down-cast to a real type. that applies to the other uses of reinterpret_cast in this commit. and this declaration might also read better with auto. (which you did use elsewhere.)",0,0,0,0.9846887588500975,0.9936269521713256,0.992436945438385,0.0,accept,unanimous_agreement
640042457,836,but thank you for not using c style casts!,1,1,1,0.9528172612190248,0.9314034581184388,0.8263664841651917,1.0,accept,unanimous_agreement
640044377,836,"it helps to avoid compiler warnings about unused parameters. either omit the variable name, or comment it out, or inside the function write ` exinfo; assertion; `",0,0,0,0.983335256576538,0.993623435497284,0.9922780990600586,0.0,accept,unanimous_agreement
640044670,836,"[a link] this is the only option which works, known to me at least (with xcode, other generators will require another solutions)",0,0,0,0.987542986869812,0.9760491847991944,0.993330180644989,0.0,accept,unanimous_agreement
640046867,836,"consider c++11 raw string literal syntax instead of piling up the \ characters: ` r""(=\)"" ` and ` r""(\"")"" ` [a link]",0,0,0,0.9863431453704834,0.9941216111183168,0.9932814836502076,0.0,accept,unanimous_agreement
640052516,836,what is the reason to use fixed-size strings?,0,0,0,0.9747422933578492,0.989075779914856,0.9921410083770752,0.0,accept,unanimous_agreement
640056219,836,to avoid using heap allocations after exception occurs,0,0,0,0.9710644483566284,0.9892334938049316,0.9920071363449096,0.0,accept,unanimous_agreement
640058179,836,"final is good. the class needs a few comments as to purpose, and make the habit to use doxygen commands too. at least: ` //! a short description ` or `/*! a long description */ ` before this line. i had to read audacityapp.cpp to understand its purpose: use it at startup time to initialize crash reporting. also that this object needs only a short lifetime, unlike the crashreportcontext",1,1,1,0.8340148329734802,0.606009840965271,0.892033576965332,1.0,accept,unanimous_agreement
640059001,836,"a brief doxygen comment about this function at least, being the most important one in the class. also, capital naming convention.",0,0,0,0.9865360856056212,0.9391353726387024,0.9932098984718324,0.0,accept,unanimous_agreement
640059744,836,this is a slight abuse of the non-short-circuiting &= operator. `ok = ok && ...;` is more proper.,0,0,0,0.9560819864273072,0.9236635565757751,0.9540489315986632,0.0,accept,unanimous_agreement
640064763,836,"also because it is statically constructed? yet it is a static constructed in a function, not file scope, and that function is done when already starting up the application, somewhat late in the startup process.",0,0,0,0.9851727485656738,0.9939409494400024,0.9884560108184814,0.0,accept,unanimous_agreement
640066189,836,"is this an early enough place to initialize? is this the earliest possible place? maybe the answer to the last in fact no, but the question should be asked and your answer should be a code comment. this source file contains the actual definition of main() if you look elsewhere.",0,0,0,0.9878926873207092,0.9913336634635924,0.9940392971038818,0.0,accept,unanimous_agreement
640067423,836,comments should emphasize that this function is for initialization...,0,0,0,0.9756240844726562,0.9879124760627748,0.9950042366981506,0.0,accept,unanimous_agreement
640068872,836,"... while this function executes after a crash, and so is constrained, such as, not to allocate memory. if i understand correctly.",0,0,0,0.9810500741004944,0.8525880575180054,0.9853361248970032,0.0,accept,unanimous_agreement
640070682,836,"when you write a .cpp / .h file pair, it is good to make the #include of the .h file the first of all #include directives. that compels you to put all the necessary nested #include directives or forward declarations in that header, so that other source code files might also #include the header as a self-contained thing. i noticed that one version of crashreportcontext.h has the standard map header but the other doesn't, but appears to need it because you include before it in the .cpp file.",0,0,0,0.945495903491974,0.9788286089897156,0.987525224685669,0.0,accept,unanimous_agreement
640073164,836,"i figured out that this function executes in the context of a crash, as also the makecommand and send member functions, and therefore do unusual things to avoid memory allocation. but these three should contain comments, to make that clearer.",0,0,0,0.9805402159690856,0.9861162304878236,0.98808354139328,0.0,accept,unanimous_agreement
640073807,836,this and the remaining functions do not operate under the constraints of uploadreport(). say that too in comments.,0,0,0,0.9870592355728148,0.9910746216773988,0.9956568479537964,0.0,accept,unanimous_agreement
640075011,836,wcscpy_s is not necessitated by crash context here. is there another reason to prefer it to string class operations?,0,0,0,0.9803121089935304,0.9792704582214355,0.9912001490592957,0.0,accept,unanimous_agreement
640075281,836,as above?,0,0,0,0.9795584082603456,0.986420750617981,0.9936766028404236,0.0,accept,unanimous_agreement
640075396,836,as above again?,0,0,0,0.9789404273033142,0.9864245057106018,0.993224024772644,0.0,accept,unanimous_agreement
640076295,836,"you might use std::optional. except we are not at c++17 yet. but there is an imitation of optional in src/memoryx.h. but maybe you can't include from src/ here. hm. make a ""todo c++17"" comment.",0,0,0,0.9828633666038512,0.9924609065055848,0.9924307465553284,0.0,accept,unanimous_agreement
640076850,836,"explain that ""this"" is context passed back to uploadreport.",0,0,0,0.9814633131027222,0.9928505420684814,0.9941938519477844,0.0,accept,unanimous_agreement
640077867,836,"can you comment, or point to documentation, explaining the call signature that this function must have? for instance i don't understand ""succeeded"" just reading this.",0,0,0,0.9814046025276184,0.9845421314239502,0.9754012823104858,0.0,accept,unanimous_agreement
640079390,836,"final ? comments, again, about purpose? likewise for unix version. i had to read other things to understand that this class is intended for statically constructed singleton use.",0,0,0,0.9864330887794496,0.9688921570777892,0.9879051446914672,0.0,accept,unanimous_agreement
640081041,836,"audacity has a convention (not always very strictly followed) that non-static member variables have names beginning with ""m"" followed by a capital. (and ""s"" for static). exceptions are for pod (plain-old-data) struct classes that don't need to maintain important invariant conditions, but this isn't a class like that. yes, ""m_"" might be a better convention. i wouldn't mind encouraging that for new code.",0,0,0,0.9576305747032166,0.9711442589759828,0.9642109274864196,0.0,accept,unanimous_agreement
640081752,836,"i forget that ""command"" was a member variable and had to look around again. ""m_command"" might have helped. i was trying to understand how much stack or other memory might have needed allocation. now i see it was allocated at startup time.",0,0,0,0.9483210444450378,0.9891547560691832,0.9706351161003112,0.0,accept,unanimous_agreement
640086365,836,"i looked up the documentation of the _s family of functions, and now i wonder if we also need to bulletproof this by proper use of: [a link] ""if set_constraint_handler_s is never called, the default handler is implementation-defined: it may be abort_handler_s, ignore_handler_s, or some other implementation-defined handler. "" so i think we want to be sure abort_handler_s is never called, preventing the crash report from happening.",0,0,0,0.9467277526855468,0.9831770062446594,0.9804930090904236,0.0,accept,unanimous_agreement
640087178,836,what is the context in which this function runs? is it a dedicated thread? is it a signal handler?,0,0,0,0.9854183197021484,0.9902967810630798,0.9921796321868896,0.0,accept,unanimous_agreement
640092350,836,"as else where with &=, here too |= is abused. non-short circuiting, and not appropriate with the type of err, which is errno_t better to write `err = err || ...;` and stop after the first error if any.",0,0,0,0.8491703271865845,0.8674845099449158,0.95932537317276,0.0,accept,unanimous_agreement
640095452,836,"lots of things could go wrong, but keeping this data in a static storage should make it less vulnerable i guess",0,0,0,0.9066796898841858,0.7239035964012146,0.7520738244056702,0.0,accept,unanimous_agreement
640096700,836,"i read this and i question whether this static construction captures a dangling reference to descriptor or not. is it passed by value? then you are safe, but comment so. or better, say it in code by eliminating descriptor and just using the expression.",0,0,0,0.9817011952400208,0.9628177881240844,0.9510246515274048,0.0,accept,unanimous_agreement
640099134,836,"mostly for this file and its header, i omit remarks i would make analogous to windows case. there are a few others to make.",0,0,0,0.979742705821991,0.988023042678833,0.9889174699783324,0.0,accept,unanimous_agreement
640100938,836,"why do you hardcode a command name here but not for windows? should the string literals be only in crashreports and not in src? if so, maybe the repetition of the string literal could also be eliminated by using a macro for the executable name that you set up in cmake. i don't like to see coincident string literals: it's fragile. define the literal once, then use a repeated symbolic name.",-1,-1,0,0.9195764660835266,0.9392113089561462,0.6007152795791626,-1.0,accept,majority_agreement
640101174,836,comments elsewhere about the string literal.,0,0,0,0.9790264368057252,0.9834625720977784,0.9871670603752136,0.0,accept,unanimous_agreement
640101919,836,"i think the literal should be mentioned in only one place, as a compiler command-line macro definition supplied by cmake, then just use the macro. and perhaps not use it at all under src/ but make it private to crashreports.",0,0,0,0.9876258969306946,0.9915006160736084,0.985322117805481,0.0,accept,unanimous_agreement
640110131,836,i'd like this new cmakelist.txt file (and all new ones) to have comments at top explaining the purpose. perhaps in #[[ long form ]]#,0,0,0,0.8208407759666443,0.9876349568367004,0.9762543439865112,0.0,accept,unanimous_agreement
640122910,836,"so this defines a special library statically linked into audacity, which uses breakpad::client, which is -- shared or static? i was thinking maybe these files should just be part of src/, but then i reconsidered the special need to have an easier build-time off switch for the whole thing, so this organization may be better. so let's explain all that in comments for the next reader.",0,0,0,0.958528697490692,0.9798163175582886,0.9792720675468444,0.0,accept,unanimous_agreement
640123182,836,"explain too how parts execute at startup, others in the immediate post-crash context.",0,0,0,0.982611119747162,0.9867647886276244,0.9875903129577636,0.0,accept,unanimous_agreement
640123641,836,"thank you for including all the relevant files in sources, even the .h files. which are not needed to make it build, but add convenience in the ide browser.",1,1,1,0.7460166215896606,0.5729299187660217,0.9148681163787842,1.0,accept,unanimous_agreement
640124114,836,"this sub-directory structure for the crashreporter executable, however, feels a bit wrong to me... more in that file",-1,-1,0,0.969325065612793,0.9225055575370787,0.5100048780441284,-1.0,accept,majority_agreement
640127443,836,"again, a long comment at top. this builds a separate executable from audacity, which is a sister of the audacity object file in the installed tree. so i think it should be at the same level of the source tree. is there any reason that would not work? so i think top cmakelists might first visit this, which defines the crashreporter target. the crashreports library is in effect dependent on this target. not really for build purposes, but at runtime it assumes this executable is present to be called. perhaps that dependency should be encoded in the cmake relations, by having this target have a compile_define in its interface (such as, the string literal ""crashreporter"" that i mention elsewhere).",0,0,0,0.9807868599891664,0.9710994958877563,0.978797733783722,0.0,accept,unanimous_agreement
640131255,836,final? comments?,0,0,0,0.962988018989563,0.989248752593994,0.989424467086792,0.0,accept,unanimous_agreement
640131527,836,move up to first line?,0,0,0,0.9861258864402772,0.986013889312744,0.9934644103050232,0.0,accept,unanimous_agreement
640135270,836,"if we do use lib-strings in this executable, then you could change the return type to translatablestring, which is not interconvertible implicitly with wxstring, and that would help document the purpose of this function and raise confidence that you don't mix translatable strings with other strings mistakenly.",0,0,0,0.9873653054237366,0.993503749370575,0.9927718043327332,0.0,accept,unanimous_agreement
640136204,836,"also i think simple conditions will be have a more readable. [code block] for optimization compiler is convoling all conditions itself for each cpu model. i saw something like this in old gcc version (around of 4.6). c++ code [code block] asm code [code block] i think you can don't worry about this moment. ps: sorry for using powerpc assembler syntax in example, just very forgot x86.",-1,-1,-1,0.9873692393302916,0.9698166847229004,0.9092812538146972,-1.0,accept,unanimous_agreement
640145745,836,may be remove this repeated `if (parameterindex < parameterscount)` to something like this? [code block],0,0,0,0.988405704498291,0.9954397082328796,0.9940958023071288,0.0,accept,unanimous_agreement
640156950,836,where are the catches for this and the other throw statements? could the crash reporter itself crash on bad inputs? it should not.,-1,0,0,0.545818030834198,0.971178412437439,0.9711700081825256,0.0,accept,majority_agreement
640157063,836,catch?,0,0,0,0.9838799834251404,0.969515323638916,0.9725125432014464,0.0,accept,unanimous_agreement
640158125,836,"comment that this intentionally quits the application, having done its job.",0,0,0,0.680115282535553,0.9759170413017272,0.98726624250412,0.0,accept,unanimous_agreement
640161352,836,catch?,0,0,0,0.9838799834251404,0.969515323638916,0.9725125432014464,0.0,accept,unanimous_agreement
640164742,836,"i saw you sometimes using `static` variables for store various buffers length, may be put this values into single `enum` into `crashreportcontext`? ``` enum ... { kmaxdumpapplepathlength = 4096, kmaxbufferlength = 2048 ...",0,0,0,0.9864518642425536,0.9954279661178588,0.9942883253097534,0.0,accept,unanimous_agreement
640165419,836,but it's constructed before the exception.,0,0,0,0.9843734502792358,0.9764466285705566,0.992055356502533,0.0,accept,unanimous_agreement
640166032,836,"yes, maybe that is a good point. even though this function is not one of those called after the crash.",0,0,0,0.805338442325592,0.9467215538024902,0.8908522725105286,0.0,accept,unanimous_agreement
640178191,836,"i agree with -licameli and we should dividing headers, that needed for `.h` file should included only into `.h` file and that needed for `.cpp` should be included only in `.cpp` after `#include .h`. also -licameli, , i think it will be great if we can using `path/to/file` conception in `#include` directive. that means when we have file tree (example): `src/base/base.h`, `src/modules/module_a.h` and `src/app.h`, all path in `#include` will be same for each. for example: we want to include `src/base/base.h` in `src/modules/module_a` and `src/app.h`. therefore, `#include` directive will be same for both as: [code block] of course, i understand that is need to remake all dependiency connections, but may be in father use it?",1,0,1,0.6725624203681946,0.6237439513206482,0.8107888698577881,1.0,accept,majority_agreement
640182164,836,"-licameli `m` or `m_` usual using for coloring private class members, and `_` in end of name (google style). better if we using `s` or `s_`. for example: `static int ssomstatic` or `static int s_somestatic`, i think second case better looking with `s_`.",0,0,0,0.9696031808853148,0.992135763168335,0.9502949714660645,0.0,accept,unanimous_agreement
640186051,836,"i think need move this function into some `breakpad` folder, because i don't see a reason to declarate it in `audacityapp.cpp`, because `initbreakpad` not dependenly (not using) of various `audacityapp` constructions.",0,0,0,0.986888349056244,0.9917308688163756,0.9894027709960938,0.0,accept,unanimous_agreement
640462593,836,this changes when ci builds. vitaly used it for testing,0,0,0,0.986835479736328,0.9708412289619446,0.9939886331558228,0.0,accept,unanimous_agreement
640487639,836,"it will bring lots of dependencies into crashreports module, and initbreakpad's job is to configure environment (which is defined by application) for breakpad to run.",0,0,0,0.9863107204437256,0.9832332730293274,0.9790919423103333,0.0,accept,unanimous_agreement
640495647,836,"makes sense, will fix",0,0,0,0.962298572063446,0.9762095808982848,0.9636189937591552,0.0,accept,unanimous_agreement
640503229,836,"isn't it generated by implement_app for windows target? i thought that this is a ""reasonably early"" place to initialize breakpad",0,0,0,0.9794488549232484,0.9867717623710632,0.9930195212364196,0.0,accept,unanimous_agreement
640507916,836,"-gas i'm not sure i understand you. but if you mean paths with ../ are bad -- though now numerous under our src/ -- then i agree with that, and my big branch misc-modules eliminates many of those. it simplifies almost all inclusions to just a file name, with no directory names, by supplying appropriate -i options on the compiler command line.",0,-1,0,0.8114653825759888,0.870332658290863,0.7513040900230408,0.0,accept,majority_agreement
640511965,836,"-gas and in fact, it would be nicer to use size_t not int, when the intention is a constant that describes an array bound. because size_t is supposed to be the type sufficient to describe the size of any contiguous array in memory. so either static constexpr size_t maxbufferlength{ 2048 }; or enum : size_t { ... (i hope we all know that notation to specify the underlying type of an enum. you need it to properly forward-declare an enum type without the enumerators.)",0,0,0,0.9310672879219056,0.988949418067932,0.9261950850486756,0.0,accept,unanimous_agreement
640514413,836,"i don't understand -gas. initbreakpad() is in fact defined in another folder. audacityapp must call it. makes the point (as i also noted in comments about the cmakelists.txt files) that the breakpad folder makes a static library for audacity, and that library itself depends on other libraries. cmake variables make it easy to eliminate all of that from a build if that is desired, so audacity does not have the (transitive) dependencies on breakpad.",0,0,0,0.9626837968826294,0.8853088021278381,0.9762986302375792,0.0,accept,unanimous_agreement
648171483,836,"at least one more thing before merging: make sure new translated strings and i18n-hint comments are exactly as in unusedstrings.h, then delete them from there. commit that. run locale/update_po_files.sh to verify that the strings are not removed from audacity.pot. (the lines may move.). do not commit that.",0,0,0,0.8819329142570496,0.9876311421394348,0.9938124418258668,0.0,accept,unanimous_agreement
648187471,836,why was this needed? i'm only asking.,0,0,0,0.7849007844924927,0.8541856408119202,0.9751072525978088,0.0,accept,unanimous_agreement
648195605,836,perhaps use lib-string-utils for this and similar,0,0,0,0.986777663230896,0.9931402802467346,0.9905891418457032,0.0,accept,unanimous_agreement
648398370,836,"this line was defining _debug symbol in relwithdebinfo and minsizerel configurations, which vc++ compiler does not expect to see when include system headers",0,0,0,0.9890340566635132,0.9952059388160706,0.993776798248291,0.0,accept,unanimous_agreement
648459255,836,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
648483733,836,"i see this one isn't used in the code any more. no problem, just some extra space taken up by translation catalogs.",0,0,0,0.9768582582473756,0.9494466781616212,0.9630712866783142,0.0,accept,unanimous_agreement
648485506,836,this string had an i18n-hint comment that was not preserved in the cut-and-paste. that should be done. the comment must be on the line before the string. this will guarantee that we preserve this comment in the audacity.pot file in future versions. the comment helps the translator when the english string alone isn't completely self-explanatory.,0,0,0,0.9808068871498108,0.9912518858909608,0.9752476215362548,0.0,accept,unanimous_agreement
648487053,836,"this string was not cut and pasted exactly into the code, where ""the"" was omitted. it must be done exactly now that audacity.pot is finalized for this release. otherwise, the translations will not be found by lookup and all users will see the english string as in the code.",0,0,0,0.9875401258468628,0.9950687885284424,0.9932557344436646,0.0,accept,unanimous_agreement
648514181,836,"i added a temproary xc macro definition to crashreportapp.cpp, also i've checked that each string in unusedstring.h has a matching string in crashreportapp.cpp (including msgctxt, spelling etc.), but still, somehow, i missed ""the"" one",0,0,0,0.9491427540779114,0.9917389154434204,0.8757027387619019,0.0,accept,unanimous_agreement
648587970,836,preservation of the i18n-hint comments is still not done after the recent force push.,0,0,0,0.984504461288452,0.9924606680870056,0.9764570593833924,0.0,accept,unanimous_agreement
648592833,836,"i understand you need another definition of xc if you don't include lib-strings. but the ctx argument must not be ignored. otherwise, the runtime lookup of the string will not find the translation. the string and the context must be passed to the wxtranslation system. i think the macro should expand to `wxgettranslation( msg, wxstring{}, ctx )` if you rebase this work onto more recent master, you can change to one of the updated languages (dutch, hindi, ukrainian, or corsican) and test that it works.",0,0,0,0.9654215574264526,0.9881911873817444,0.9861785173416138,0.0,accept,unanimous_agreement
651883576,836,*intentional,0,0,0,0.7606562972068787,0.8351799845695496,0.9908639788627625,0.0,accept,unanimous_agreement
651883729,836,*intentional,0,0,0,0.7606562972068787,0.8351799845695496,0.9908639788627625,0.0,accept,unanimous_agreement
651885062,836,"this has been replaced by the intentional memory leak to ensure the handler is never destroyed, but will catch crashes even in the cleanup of other static objects.",0,0,0,0.9821564555168152,0.9822148680686952,0.993927836418152,0.0,accept,unanimous_agreement
651904480,836,"comment should emphasize that this builds a separate executable, invoked by fork-exec or windows equivalent, when the main program is trapping a crash.",0,0,0,0.982084095478058,0.9919195175170898,0.9889988303184508,0.0,accept,unanimous_agreement
651913537,836,"there are many ""naked news"" in this file. i won't insist on cleaning them up, in this small, separate, short-running executable. but you should know about the conventions i insist on in audacity. 1) when you heap-allocate anything derived from wxwindow, and its parent is null, then that may ""leak"" a window that gets cleaned up only when the application exits. so this looks like a bug. (but modal dialogs may have null parent windows, because they are stack allocated.)",-1,0,0,0.657563328742981,0.7479473352432251,0.6185508966445923,0.0,accept,majority_agreement
651918283,836,"2) sizer objects are not windows. this should instead be: `auto mainlayout = std::make_unique (wxvertical);` and ultimately you pass `mainlayout.release()` to setsizer below. this eliminates a suspicious naked new, guaranteeing cleanup. (it would be better if the wxwidgets function took a std::unique_ptr argument, and you used `std::move(mainlayout)`. but wxwidgets was developed for c++98 and just uses a plain pointer in the interface, while explaining in documentation that it does take over responsibility to delete it. in c++11 and later, it is much better to let the types of arguments make this clear, and that is what we try to do in functions defined in audacity.)",0,0,0,0.9577189087867736,0.983281672000885,0.9841073751449584,0.0,accept,unanimous_agreement
651920540,836,"3) this is a wxwindow object constructed with a parent window, and that means its deletion is guaranteed, if the parent's deletion is guaranteed. it is not right, then, for headertext to be a smart pointer. in audacity, there is a macro `safenew` for these cases, and it simply expands to `new`. i defined that macro to help me make a textual scan for new naked-news added to the program, that need to be corrected.",0,0,0,0.950337052345276,0.9875237345695496,0.9886322617530824,0.0,accept,unanimous_agreement
651925158,836,"finally, this use of new is unlike the others. it isn't ""naked"" because it is the constructor argument of unique_ptr. still i prefer not having the keyword new appear at all, and would write instead: [code block] which is also briefer to read, avoiding repetition of the type name `wxlocale`. understand that all these remarks are not just about style: they are about the right habits for writing leak-free code using idioms consistent with much of audacity. especially point 2 above. it's proper ""raii"". it means i don't have to examine later lines of code to see whether they might throw exceptions or return early before the pointer is passed along to some other owner. this completes my comments about allocations.",0,0,0,0.5829658508300781,0.8636483550071716,0.6656171679496765,0.0,accept,unanimous_agreement
651936150,836,"comment should say ""exception"" not ""assertion."" but the important thing is that there is a i18n-hint comment now, which will be in future updates of audacity.pot, and help the translator understand that the word means something in the technical sense of c++.",0,0,0,0.9417338371276855,0.9929556846618652,0.9927282333374025,0.0,accept,unanimous_agreement
651936333,836,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
651939238,836,comment it?,0,0,0,0.9711029529571532,0.9855339527130128,0.9879480004310608,0.0,accept,unanimous_agreement
652032998,836,*as command-line,0,0,0,0.9660576581954956,0.9786586761474608,0.9946374297142028,0.0,accept,unanimous_agreement
652041607,836,"if this were a more general purpose program, you would escape "" characters in the value string, here and in the windows version of this function too, and in parsearguments() of crashreporterapp.cpp. i had to find the use of setparameters in audacity.cpp to confirm this doesn't happen.",0,0,0,0.979878306388855,0.9933945536613464,0.9907649755477904,0.0,accept,unanimous_agreement
652045305,836,shlemiel the painter! :-) [a link] but it's unimportant.,1,1,1,0.6301437020301819,0.9959563612937928,0.995230495929718,1.0,accept,unanimous_agreement
652050003,836,good point. and that's why it's important to comment that crashreportcontext has a trivial destructor which doesn't change the memory -- not just static allocation of storage.,1,1,1,0.7620485424995422,0.8269721865653992,0.955981433391571,1.0,accept,unanimous_agreement
652054159,836,is there a difference between shell programs on different platforms explaining why you need the extra \ characters in stream here and not on unix?,0,0,0,0.9766968488693236,0.9905096292495728,0.9921672940254213,0.0,accept,unanimous_agreement
1220397608,4771,also for debugging,0,0,0,0.9868157505989076,0.9813207983970642,0.9891856908798218,0.0,accept,unanimous_agreement
1220405402,4771,i wrote that debugging code to make sure that playback of a 20s mono track yielded for me [code block] columns are `elapsed time (ms) / object address / ctor-dtor message` (see implementation of `libsampletrack::block` for more detail).,0,0,0,0.989003837108612,0.9945563077926636,0.9947361350059508,0.0,accept,unanimous_agreement
1220411458,4771,sorry for the inadvertent formatting ...,-1,-1,-1,0.9887563586235046,0.9896073937416076,0.9934862852096558,-1.0,accept,unanimous_agreement
1220414063,4771,"oj, one `clip->grabfloats(start, len);` too many ; useless but doesn't break anything.",0,-1,-1,0.5594022870063782,0.8691306114196777,0.5976533889770508,-1.0,accept,majority_agreement
1220417760,4771,"i haven't tried this yet, but now we should be able to query not more than the amount of samples required by the playback buffer (2400 for me on windows).",0,0,0,0.9840434193611144,0.9818296432495116,0.991536021232605,0.0,accept,unanimous_agreement
1221362315,4771,"i would prefer a solution that does not require “polluting” the interface of sampletrack with any mention of caching, but instead, lift the creation of caching scope up to places where wavetrack is known, and we also construct the “decorator” tracks. and that must wait on my other refactoring work, part of which i asked for review yesterday.",0,0,0,0.9715216159820556,0.9806694388389589,0.9752928614616394,0.0,accept,unanimous_agreement
1221382539,4771,"you are thinking of “double checked locking” but that is considered an anti pattern now because of our-of-order execution possibilities. [a link] i think a proper solution must use these functions instead somewhere, but they are for shared pointers not weak. even the check of the weak pointer before the lock is not thread safe. the standard library requires different shared and weak pointers to maintain the managed objects control block with thread safety, yes. but races on the pointers themselves can cause undefined behavior. so really you must put a lock scope around the weak pointer. you might use the spin lock class that is already in out libraries. you might also use two, more limited lock scopes by constructing the cache outside of the lock, and only then locking and assigning. money thread might lose the race to assign non null, in which rare case, it can just release what it allocated.",0,0,0,0.9450182914733888,0.9604440927505492,0.9621239900588988,0.0,accept,unanimous_agreement
1221386700,4771,i misplaced my comment— modifying this class in lib-wave-track is acceptable. but the new types it uses should also be defined in this library and not in the lower one.,0,0,0,0.9328929781913756,0.7804836630821228,0.987041711807251,0.0,accept,unanimous_agreement
1221392556,4771,"no. this will conflict seriously with other refactoring i want you to review which introduces the wide sample sequence abstraction into the mixer. and i repeat, we should seek a solution where cache maintenance is entirely internal to lib-wave-track, and control of cache lifetime is upstairs in audacity, and it is all completely non-intrusive in lib-sample-track.",0,0,0,0.8613542318344116,0.6464372277259827,0.8379083275794983,0.0,accept,unanimous_agreement
1221410295,4771,"this holds shared pointers to blocks, so there is no dangling pointer problem. but this might construct a cache that becomes out of date with changing sequence contents. maybe it won’t matter in actual uses but comments should explain the limitation. or maybe a complete redesign of caching with have sequence maintain more state and keep consistency.",0,0,0,0.9823635816574096,0.9839431047439576,0.989473044872284,0.0,accept,unanimous_agreement
1221431298,4771,"currently cache maintenance is in your to-be-introduced `lib-mixer`, through still persisting `sampletrackcache`. so this proposal wouldn't be worse than what we have now (with respect to your concern). giving responsibility of cache maintenance to the consumers of `sampletrack` (e.g. `mixersource`, `spectrogramcache`) makes the problems of eviction and cache miss avoidance easy. i cannot think of a solution that easy if this responsibility were to be that of `wavetrack`.",0,0,0,0.8764590620994568,0.9873173832893372,0.9838275909423828,0.0,accept,unanimous_agreement
1221444925,4771,"i have looked into the spinlock implementation, and it calls `yield` every other time, so it's not better. i think we need extend it with a policy, that does not `yield` at all. yielding make the spinlock at least as expensive as the `mutex`, it should be avoided in threads that have latency guarantees.",0,0,0,0.9689019918441772,0.984499454498291,0.9751763343811036,0.0,accept,unanimous_agreement
1221449066,4771,i wouldn't mind so much rebasing my draft on top of your branch.,0,0,0,0.9717369675636292,0.5557745695114136,0.9487550258636476,0.0,accept,unanimous_agreement
1221457167,4771,"if that's of concern, we could define an abstract wrapper for `sampletrack` (to become `widesamplesequence`), whose implementation (in `lib-wave-track` or a new lib only `lib-wave-track` would depend on) is injected in consumers of  ́wavetrack` and does the cache maintenance.",0,0,0,0.9886063933372498,0.9958874583244324,0.9926583170890808,0.0,accept,unanimous_agreement
1221461338,4771,"a shared pointer to a structure containing the weak pointer may seem weird but then it could be updated using the standard, non-member functions specialized for `atomic >`",-1,0,0,0.6013186573982239,0.7347441911697388,0.5323610305786133,0.0,accept,majority_agreement
1221462751,4771,the not-worse organization should become a positively better one.,0,0,0,0.7439836263656616,0.9192032217979432,0.8986294269561768,0.0,accept,unanimous_agreement
1222021571,4771,"maybe. if not i don't imagine this would get in the way of time stretching, meanwhile our current caching problem is.",0,0,0,0.5807535648345947,0.7274664640426636,0.9530749320983888,0.0,accept,unanimous_agreement
1222047582,4771,"what could be executed out of order here? according to [a link] the creation of the shared ptr is executed atomically, and all other variables before the mutex are local.",0,0,0,0.988957703113556,0.9942436814308168,0.9922768473625184,0.0,accept,unanimous_agreement
1222103934,4771,"you shared a link to a solution for the case where multiple threads access the _same shared_ptr object_. here a new `shared_ptr` object is created each time - in which case ""all member functions (including copy constructor and copy assignment) can be called by multiple threads on different instances of shared_ptr without additional synchronization"". ([a link]",0,0,0,0.9851733446121216,0.9917452931404114,0.994720458984375,0.0,accept,unanimous_agreement
1224280955,4771,"remove this unnecessary line; then, this revision of the pull request makes no changes in `lib-sample-track`, which is very good.",1,0,1,0.7034032940864563,0.8472119569778442,0.5647370219230652,1.0,accept,majority_agreement
1225623025,4771,just replacing `//` with `//!` on a brief comment line before a member variable allows doxygen to extract the comment. do that with each member of this structure and also explain `usefullength`.,0,0,0,0.987359583377838,0.9918415546417236,0.9946042895317078,0.0,accept,unanimous_agreement
1225624759,4771,i had to read sequence.cpp to understand that `usefullength` is a span of sample positions not necessarily covered by the blocks. better that i could have read a comment explaining that here.,0,0,0,0.972548246383667,0.9881218671798706,0.9585467576980592,0.0,accept,unanimous_agreement
1225629007,4771,slow down. you are only setting yourself up for more conflict with stuff i have to do.,-1,-1,-1,0.8430837988853455,0.8396294116973877,0.9790816307067872,-1.0,accept,unanimous_agreement
1225631057,4771,this solution no longer intrudes in sampletrack but still does intrude in lib-mixer. i am not yet decided whether i like it.,0,0,0,0.5901721715927124,0.5349302887916565,0.7891790866851807,0.0,accept,unanimous_agreement
1225635110,4771,"""effectively returns expired() ? shared_ptr () : shared_ptr (*this), executed atomically."" okay, i learned something -- `lock()` on a `std::weak_ptr` is thread safe. my memory though is that you can't have unsynchronized usage of a `shared_ptr` object.",0,0,0,0.9791536331176758,0.953205406665802,0.985552966594696,0.0,accept,unanimous_agreement
1225635720,4771,there were more naive implementations of the double checked locking pattern in older days before c++11 that were later understood to be an anti-pattern.,0,0,0,0.9078722596168518,0.9860742092132568,0.9786295294761658,0.0,accept,unanimous_agreement
1225639615,4771,"other related and interesting c++ things to know are the thread safety guarantees in the language specification for the first time construction of static variables inside functions, and the related `std::once_flag` defined in ` `.",0,0,0,0.8996750712394714,0.9932465553283693,0.9715818762779236,0.0,accept,unanimous_agreement
1228334012,4771,"as we have discussed: the decorator should also remap envelope values on the time axis, and also remap the end time, and not just pass through the calls.",0,0,0,0.9883589744567872,0.993280827999115,0.9940474033355712,0.0,accept,unanimous_agreement
1228454730,4771,"if you say it's a precondition, then it should be commented where the member function is declared in the header file, preferably with the `` doxygen comment convention",0,0,0,0.9872201681137084,0.9938141107559204,0.9936145544052124,0.0,accept,unanimous_agreement
1229407370,4771,"yes, why not instead [code block]",0,0,0,0.9819816946983336,0.99196457862854,0.992233157157898,0.0,accept,unanimous_agreement
1229409591,4771,"this reassings `mcacheholders`, recreating the complete cache stucture, each time `get` is called -- but t0 and len may vary between calls. so this is why eviction works. only sufficient cache for the request is kept. when the old value of mcacheholders is released after the reassignment, reference counts in the caches for individual blocks may drop to zero. it may work but i wonder how it might be improved.",0,0,0,0.898571789264679,0.973382532596588,0.9887863397598268,0.0,accept,unanimous_agreement
1229411562,4771,this function is no longer used,0,0,0,0.9544988870620728,0.9867669939994812,0.9865809679031372,0.0,accept,unanimous_agreement
1229461716,4771,"i understand better how it works now. every time you call `get` on the decorator, it goes back to the sequence and finds the blocks that overlap the range. the old cache is not yet destroyed when a new one is made. any blocks with a non-expired weak pointer to a vector of samples use that. if the underlying sequence has been changed between calls to `get`, there is no invalidation problem. the range of the request is just mapped to the new blocks.",0,0,0,0.9572803974151612,0.9753271341323853,0.9449228048324584,0.0,accept,unanimous_agreement
1238333002,4771,"i don't like quiet narrowing conversion from `samplecount` to `size_t` and made a point of eliminating that in many places years ago. please use `limitsamplebuffersize` which contains some assertions, and initialize `towrite` then with `{}` syntax. `samplecount` is a wide integral type used for positions in a sample stream or durations, because you can overflow 32 bits at 44.1 khz with only about 13.5 hours, unlikely but not impossible. `size_t` is sufficient for buffer sizes that fit in memory.",-1,0,0,0.8239327669143677,0.7899600863456726,0.97703218460083,0.0,accept,majority_agreement
1238340681,4771,i prefer to use c++11 universal initialization syntax '{...}' where i can for member initializers.,0,0,0,0.9764094352722168,0.9905072450637816,0.9923086166381836,0.0,accept,unanimous_agreement
1238346190,4771,"only the lesser of `buffersize` and `getsamplecount` is written, instead of filling the buffer up to `buffersize` with zeroes as needed. that behavior is not obvious to guess from the un-commented header file. so please comment.",0,0,0,0.9884265661239624,0.9916875958442688,0.9952933192253112,0.0,accept,unanimous_agreement
1238346998,4771,replace `//` with `//!` for doxygen,0,0,0,0.9840680956840516,0.9771963357925416,0.994150459766388,0.0,accept,unanimous_agreement
1238349098,4771,"""double checked locking"". use that in the comment.",0,0,0,0.9896620512008668,0.9891564846038818,0.994702160358429,0.0,accept,unanimous_agreement
1238350721,4771,"please mention that `std::weak_ptr::lock()` guarantees atomicity, which is important to make this work without races.",0,0,0,0.9863068461418152,0.9945297837257384,0.9942094087600708,0.0,accept,unanimous_agreement
1238352478,4771,notice this `msamplecount` correctly does not have type `samplecount` but instead `size_t` because it is for an in-memory block.,0,0,0,0.9864484667778016,0.9913738369941713,0.9920209050178528,0.0,accept,unanimous_agreement
1238360853,4771,"note `as_size_t` contains an assertion that you are not narrowing, so i like it better than the unchecked narrowing.",1,0,0,0.7951623201370239,0.9655457139015198,0.7080193758010864,0.0,accept,majority_agreement
1238361338,4771,`limitsamplebuffersize` might also express this,0,0,0,0.9883771538734436,0.9936471581459044,0.9932928085327148,0.0,accept,unanimous_agreement
1238363608,4771,that function also guards against the case that the `samplecount` is negative. that can happen because the type is also meant to expressed signed differences of positions in audio streams.,0,0,0,0.9815903306007384,0.9887186288833618,0.9933351278305054,0.0,accept,unanimous_agreement
1238373819,4771,i do not like new assertions with no accompanying comments to explain why they are justified. assertions should document assumptions you are making and explain them to the user. i consider an assumption at the top of a function to be justified if the header file has a `` doxygen comment.,-1,-1,0,0.9566394686698914,0.7844166159629822,0.8076611161231995,-1.0,accept,majority_agreement
1238374605,4771,"you need more commentary to explain `ii` and state the precondition on its legal values. then, it is understood that the burden of a guarantee of the correctness of the assumption lies not in the function but in the places that use it.",0,0,0,0.9816769361495972,0.9899481534957886,0.9925293326377868,0.0,accept,unanimous_agreement
1238381167,4771,but see `wavetrack::get`. you can easily copy some of that to make this function more robust. [code block],0,0,0,0.9801276922225952,0.9925143122673036,0.9954262375831604,0.0,accept,unanimous_agreement
1238383737,4771,"this is better than your not wholly justified `assert(false)`. instead it asserts a postcondition of `nbuffers()`. actually that's not an explicitly stated postcondition in the header, but that can and should be added easily.",0,0,0,0.9847812652587892,0.987102210521698,0.9689147472381592,0.0,accept,unanimous_agreement
1238406402,4771,it seems wasteful to allocate a lot of zeroes for this case. with some more effort in `audiosegmentsampleview` the silent case might be treated differently without the allocation.,-1,0,0,0.8822548389434814,0.9728780388832092,0.549228847026825,0.0,accept,majority_agreement
1238408658,4771,what's a proof that this is a save `as_size_t` ? i think it can be deduced that `len` is not more than `length`. an `assert` of that with some explanation of that deduction would be welcome.,0,0,0,0.9794615507125854,0.9484657645225524,0.990545392036438,0.0,accept,unanimous_agreement
1238462448,4771,rename as `channelsampleview` ?,0,0,0,0.9870755076408386,0.9938138723373412,0.9948508143424988,0.0,accept,unanimous_agreement
1238738373,4771,that should be `as_size_t` and there should be some comments why that is not narrowing,0,0,0,0.9843010306358336,0.993033528327942,0.9939138293266296,0.0,accept,unanimous_agreement
1238741217,4771,comment why this doesn't narrow,0,0,0,0.8579245805740356,0.8615054488182068,0.967495858669281,0.0,accept,unanimous_agreement
1238790063,4771,i think this call (but only this one) should be changed to `getsequencestarttime` so that the cache will have the correct contents in case a smart clip has any hidden data at the left end.,0,0,0,0.9881207942962646,0.9913877844810486,0.9841617345809937,0.0,accept,unanimous_agreement
1238807811,4771,"i think the comment should simply say ""one per channel""",0,0,0,0.9840878844261168,0.9763043522834778,0.9773682355880736,0.0,accept,unanimous_agreement
1238811732,4771,some doxygen commentary please about the purpose of the class.,0,0,0,0.9848987460136414,0.9633933901786804,0.987695574760437,0.0,accept,unanimous_agreement
1238812133,4771,`{}` member initializer syntax?,0,0,0,0.9871228933334352,0.9939047694206238,0.9939152598381042,0.0,accept,unanimous_agreement
1238813349,4771,"again, use `limitsamplebuffersize`",0,0,0,0.9884890913963318,0.9928070306777954,0.9953887462615968,0.0,accept,unanimous_agreement
1238815527,4771,you assume `buffersize >= written` but what proves that? should there be a check?,0,0,0,0.9869558811187744,0.992245614528656,0.9925415515899658,0.0,accept,unanimous_agreement
1238819419,4771,"you assume after this a post of `getsampleview`: `size() == nbuffers - ichannel` please make that explicit in header comments, and assert the post here",0,0,0,0.987700343132019,0.9939669370651244,0.9946722388267516,0.0,accept,unanimous_agreement
1238822643,4771,you need only the second,0,0,0,0.9820244312286376,0.9783747792243958,0.9946594834327698,0.0,accept,unanimous_agreement
1238831461,4771,i recall this was some non-team member's experiment that wasn't completed see commit 8e1b084f01f97266eb843af72ec8d31045aa11fa,0,0,0,0.979300856590271,0.9909342527389526,0.9882785081863404,0.0,accept,unanimous_agreement
1238833592,4771,fix indent of line 347 (new numbers),0,0,0,0.9874765276908876,0.9893946051597596,0.9942309856414796,0.0,accept,unanimous_agreement
1238841017,4771,"please comment that only the 0th channel of `sequence` is really used. in the interim, this still works correctly for `widesamplesequence` backed by a right channel track, which always ignores its partner. please comment in the pr that qa should test spectrograms of stereo tracks, in which there is some obvious difference of content between the channels, to be sure the correct channel's stuff is drawn in each rectangle.",0,0,0,0.9877043962478638,0.9930807948112488,0.9926464557647704,0.0,accept,unanimous_agreement
1238915138,4771,could use alloca for this small allocation,0,0,0,0.9879648685455322,0.993303120136261,0.9939275979995728,0.0,accept,unanimous_agreement
1239371068,4771,"why on this particular class? class comments are the exception in this repo, if there's a rule of thumb i'd like to know it (besides that's it's a cool class).",0,0,0,0.7993367314338684,0.763515055179596,0.8287551999092102,0.0,accept,unanimous_agreement
1239388718,4771,"i don't understand this comment, i think you might be referring to the time-stretching decorator, which is another pr.",0,-1,0,0.6823598146438599,0.5425155162811279,0.9131154417991638,0.0,accept,majority_agreement
1239435299,4771,`limitsamplebuffersize` is handy :thumbs-up:,0,1,1,0.6941240429878235,0.93128764629364,0.9919803142547609,1.0,accept,majority_agreement
1239449516,4771,thanks.,0,1,0,0.5150366425514221,0.5804154276847839,0.5270382761955261,0.0,accept,majority_agreement
1239466395,4771,"i'm addressing this reluctantly, i was hoping for no debate and time spending over this. it's not only about correcting `nbuffers`, but also handling a more complex situation underneath, where `powner` can be null.",0,0,-1,0.9282561540603638,0.533846914768219,0.9465190172195436,0.0,accept,majority_agreement
1239475904,4771,"you're right, that's not good.",-1,1,-1,0.962577760219574,0.604941725730896,0.7718890905380249,-1.0,accept,majority_agreement
1239513248,4771,"`as_size_t` already does the assertion, but i'm adding a comment.",0,0,0,0.985977053642273,0.9878734946250916,0.9943172335624696,0.0,accept,unanimous_agreement
1239549349,4771,"that'd be wrong. say we have one noisy clip starting at 0, the first second of which is trimmed. now `start` is 0, and `length` is 2s. in your proposal, the returned view would be 2s of noise. `wavetrack` has to account for trimming ; the 1st second should be silence.",0,0,0,0.8021124005317688,0.9777578711509703,0.9065257906913756,0.0,accept,unanimous_agreement
1239550829,4771,"comment it at least because the class is meant for use outside the library that defines it. i don’t think you must comment every type defined in anonymous namespaces. if many classes don’t have doxygen, that’s not an excuse for improving practice now.",0,0,0,0.9719510078430176,0.918441355228424,0.9822269678115844,0.0,accept,unanimous_agreement
1239556690,4771,thank you.,1,1,1,0.6186631917953491,0.5337218642234802,0.6976000666618347,1.0,accept,unanimous_agreement
1239557572,4771,"right, i never took the habit for some reason.",0,0,0,0.6605247855186462,0.5874673128128052,0.9784325361251832,0.0,accept,unanimous_agreement
1239562710,4771,"this is based on the fact that `audiosegmentsampleview::copy` won't return more than `towrite` samples. a unit-test proves this, which i'd argue is enough ? edit: that specific unit test didn't exist, you're comment made me aware of that. now it does, though.",0,0,0,0.975811004638672,0.9772235155105592,0.9900334477424622,0.0,accept,unanimous_agreement
1239596874,4771,i understand the bug fix commit and expect you will squash it after complete review.,0,0,0,0.9745702743530272,0.9650838375091552,0.990090012550354,0.0,accept,unanimous_agreement
1239606798,4771,"`nbuffers - ichannel`, really? i have been interpreting those arguments as ""give me `nbuffers` starting from index `ichannel`"", which results in `size() == nbuffers`. an alternative interpretation that would lead to `size() == nbuffers - ichannel` is ""give me buffers from index `ichannel` to index `nbuffers` (exclusive)"", but i don't think that's the intended one, or the naming would have been another. (your implementation of `wavetrack::get` does neither, but i think it attempted the former interpretation. i'm attempting a fix accordingly.)",0,0,0,0.9338288903236388,0.9877739548683168,0.9905810952186584,0.0,accept,unanimous_agreement
1239617693,4771,"sorry, what i wrote was mistaken. what i was thinking was, how to prove you don't index `buffers` out of bounds. so what i should have said is, there is an unstated postcondition that `getsampleview` always returns a vector of size `nbuffers`. so it would be good to make that explicit in that function's header.",-1,-1,-1,0.9786524176597596,0.967965841293335,0.9383749961853028,-1.0,accept,unanimous_agreement
1239619435,4771,"mmh, but this commit is just making use of it in some other file. in any case, if you're correct now one should care if i removed those ifs. will append a tentative commit that does that.",0,0,0,0.9849756360054016,0.8340868949890137,0.977099597454071,0.0,accept,unanimous_agreement
1239625677,4771,"tests are just one line of defense ensuring code quality and raising our confidence. i think they should be complemented with assertions in the program. (i mean both `assert` and also the informal statement of pres and posts and invariants.) when i write assertions it means i'm very serious about persuading the unfamiliar reader (who might be you, or future me) that the code is correct, because i was working hard at the time to convince myself first and to make more explicit the assumptions that i relied on. a test, though automated, is the weaker form of ""well it seems to work"". true, human reasoning is still fallible and tests may still catch mistakes (perhaps because of future modifications by someone understanding the code imprefectly). still -- write contracts first, i think, and a well thought contract is then a guide for writing the test cases themselves. some correspondence between test cases and formal or informal assertions in the program is a good idea.",-1,-1,0,0.8773733377456665,0.531456708908081,0.9147802591323853,-1.0,accept,majority_agreement
1239627978,4771,can do that.,0,0,0,0.9796872138977052,0.9876855611801147,0.9926786422729492,0.0,accept,unanimous_agreement
1239628014,4771,"you should also remember, though, that sometimes you must use `()`. one example is initializing a vector with a size. if the element type is implicitly constructible from an int or size_t, the `{}` syntax will invoke the wrong constructor. this danger exists when a class has a constructor taking `std::initializer_list`.",0,0,0,0.9296823740005492,0.9926127195358276,0.9813450574874878,0.0,accept,unanimous_agreement
1239637056,4771,"did you try this case? i didn't, but i thought i deduced a problem. `waveclip::getplaystarttime()` returns `msequenceoffset + samplestotime(timetosamples(mtrimleft));` which is assigned to `clipstarttime` then we compute `clips0` as so many samples into the playable part of the clip (the unhidden part) then we pass that into `waveclip::getsampleview` as `start` and it is passed unchanged into `sequence::getfloatsampleview` but that function is interpreting `start` as relative to the start of the sequence (which doesn't know about the trimming) and that includes the left trimmed part. so doesn't this mean that the cache contains the wrong stuff, left of the correct place by a shift equal to the trim length?",0,0,0,0.9645327925682068,0.9900521636009216,0.9864742159843444,0.0,accept,unanimous_agreement
1239637062,4771,this fix attempt relates to [a link],0,0,0,0.9870831966400146,0.9909324645996094,0.9944473505020142,0.0,accept,unanimous_agreement
1239637615,4771,"numerous times, i have seen well-thought assertions fail on the first run.",-1,0,0,0.6325430870056152,0.8155730366706848,0.6830431222915649,0.0,accept,majority_agreement
1239638587,4771,you saw my retraction of my mistaken comment of yesterday?,0,0,0,0.8444597125053406,0.7874835133552551,0.9540286660194396,0.0,accept,unanimous_agreement
1239639084,4771,"i said i finished review, but then i wrote some more in answer to your answers.",0,0,0,0.9813005924224854,0.957030951976776,0.991714894771576,0.0,accept,unanimous_agreement
1239639358,4771,"that wasn't my intention, but i don't want to feel i have to comment every single class where not necessary. the visibility-beyond-hosting-library sounds like a good rule of thumb to me.",0,0,0,0.5979521870613098,0.5350565910339355,0.8229004144668579,0.0,accept,unanimous_agreement
1239643498,4771,"yes, we are fallible, but still we should value well thought assertions and make attempts at rigor. as i said, i think contracts should be a guide to what cases should be tested. or if you like the tdd approach of writing failing tests first, and then then changing the program to succeed, i think then you should write something in the contract too after those iterations. tests might be ""executable documentation"" but i like documentation in the header itself, explaining all that is important in the interface in one place.",0,0,0,0.8031905293464661,0.9218072295188904,0.9538438320159912,0.0,accept,unanimous_agreement
1239652779,4771,"i actually found an alternative implementation, where it is obvious that `written < buffersize`, and which does not unnecessarily iterate over segments after if `written` already `== buffersize`. but i'd have complied.",0,0,0,0.9860976934432985,0.9845933318138124,0.9910681843757628,0.0,accept,unanimous_agreement
1239665994,4771,ok. i already added a `` line to that header stating this. is that good enough?,0,0,0,0.9821712970733644,0.9555842876434326,0.9904837608337402,0.0,accept,unanimous_agreement
1239673937,4771,"good catch! but i'm fixing it in `waveclip::getsampleview`, accounting for `mtrimleft` like `getsamples` does.",1,1,1,0.9877196550369264,0.9836095571517944,0.9943447113037108,1.0,accept,unanimous_agreement
1239685273,4771,"i did, yes, but i still think this assertion is incorrect.",0,0,0,0.5311395525932312,0.682230532169342,0.9105592370033264,0.0,accept,unanimous_agreement
1239925635,4771,i didn't mention the file banners -- good that you remembered,1,0,1,0.6702769994735718,0.8881378769874573,0.939957559108734,1.0,accept,majority_agreement
1239929085,4771,this comment block was ignored by doxygen because it did not begin with `/*!` or `/**`,0,0,0,0.9811477065086364,0.9930156469345092,0.9941388368606568,0.0,accept,unanimous_agreement
1239938288,4771,"the grave accents are markdown that make text appear in typewriter font. i often use it in `` and `` when a pre/post-condition can be written formally in c++. it's less important here -- doxygen will recognize the class name and format it as an html link. the grave accents cause the link to have typewriter font too. ""blocksampleviews"" however will fail to link because it's not the exact type alias name.",0,0,0,0.9827952980995178,0.9852247834205629,0.9895663261413574,0.0,accept,unanimous_agreement
1239941916,4771,"you might use the `` and `` doxygen commands in this banner, so the summary html page of files has a comment about the purpose. here's the reference for all commands. [a link]",0,0,0,0.9836162328720092,0.9803845882415771,0.9913098812103271,0.0,accept,unanimous_agreement
1239946410,4771,"you corrected the formal statement of the assertion. thank you. `nbuffers - ichannel <= nchannels()` is still the incorrect precondition in widesamplesequence.h. my fault, but please correct it there too.",-1,1,1,0.3741949498653412,0.8359302878379822,0.9774352312088012,1.0,accept,majority_agreement
1239949995,4771,just use my initials `prl:` as in many other comments,0,0,0,0.9806371927261353,0.9903748631477356,0.9946080446243286,0.0,accept,unanimous_agreement
1239978455,4771,"this function is not intended to work with long lengths. the argument should be `size_t`. where it is used in `wavetrack::getonesampleview`, there is a use of `as_size_t` which could use some comments.",0,0,0,0.9889832139015198,0.9947311878204346,0.9931859970092772,0.0,accept,unanimous_agreement
1239997878,4771,"the last `` is not quite executable as written, so if i wrote it, i would not put only variable names in grave accents and leave the statement informal.",0,0,0,0.9304133653640748,0.9586381316184998,0.9915061593055724,0.0,accept,unanimous_agreement
1240003352,4771,"i like the improved test! my last irritating trivial comment for today: ""fewer"" not ""less"" is better english according to the grammar books, but a lot of english speakers don't observe that usage.",1,1,1,0.988264799118042,0.9946972131729126,0.9923073649406432,1.0,accept,unanimous_agreement
1241763844,4771,"good that you noticed the `as_size_t` to in the end call the implicit `samplecount` ctor. it probably will never be used for more than `size_t` can represent, yet semantically this is an audio segment between two clips, which `samplecount` can help realize. (also, i'd have to change it in the other ctor for consistency.)",1,0,1,0.7542527318000793,0.9740396738052368,0.9500073790550232,1.0,accept,majority_agreement
842691225,2668,unused constant vstcmdkey no longer needs a definition,0,0,0,0.9860812425613404,0.9894301891326904,0.993818700313568,0.0,accept,unanimous_agreement
842694518,2668,remove this enum with vstsubprocess,0,0,0,0.986966609954834,0.9922818541526794,0.9953292608261108,0.0,accept,unanimous_agreement
842745902,2668,"my recent changes in effectmanager may make the benefits of these changes less but still not zero. after my changes, instance initialization is avoided, but still not the plugin initialization.",0,0,0,0.978939414024353,0.9631809592247008,0.9904059767723083,0.0,accept,unanimous_agreement
842837621,2668,"i wonder if this incomplete old idea would be valuable later, but still then, it would make sense to implement filtering by type in one common dialog accessible in common from all four menus. so it's all right.",0,0,0,0.94911527633667,0.9707885384559632,0.8707776069641113,0.0,accept,unanimous_agreement
842892916,2668,"i'm looking at experimental_effect_management elsewhere, and i think it's time to retire this experimental flag. it's not going to turn off. so remove it from experimental.cmake and remove the related bits in effectsprefs.cpp",0,0,0,0.9768350124359132,0.979812502861023,0.9548214673995972,0.0,accept,unanimous_agreement
842913096,2668,"i don't believe in using `noexcept` too widely, but functions meant to be called inside a `finally` and therefore inside a destructor should have it.",-1,0,0,0.7057781219482422,0.9761382341384888,0.9488674402236938,0.0,accept,majority_agreement
842915460,2668,that applies to `onpluginvalidationfinished `,0,0,0,0.9843424558639526,0.9945066571235656,0.9948739409446716,0.0,accept,unanimous_agreement
856141445,2668,second '#' isn't needed. add a few words about the general purpose of these files.,0,0,0,0.9855841398239136,0.9716743230819702,0.9938649535179138,0.0,accept,unanimous_agreement
856144242,2668,"""vice versa""",0,0,0,0.9772437810897828,0.9601977467536926,0.9928216338157654,0.0,accept,unanimous_agreement
856146202,2668,"when you need an abstract base class with just one virtual function besides the destructor, an alternative is just to generate the type you need from std::function: [code block] it's your choice whether you prefer that suggestion here. maybe you anticipate more functions in the interface later.",0,0,0,0.9834815859794616,0.9930455088615416,0.9916600584983826,0.0,accept,unanimous_agreement
856149035,2668,"is the argument never null? if so, i would prefer to use a reference to say what i mean with types, leaving no doubt in the reader's mind about that, while needing no extra comments either.",0,0,0,0.9719732999801636,0.9712079763412476,0.9935075044631958,0.0,accept,unanimous_agreement
856150919,2668,"""description""",0,0,0,0.9697015881538392,0.9845405220985411,0.977802276611328,0.0,accept,unanimous_agreement
856154091,2668,"this yields only every 2 failed tests. i'm curious, why 2, not 1, or some other number. did some article recommend that?",0,-1,0,0.9398238062858582,0.6479791402816772,0.9441310167312622,0.0,accept,majority_agreement
856159951,2668,`explicit` ?,0,0,0,0.9846414923667908,0.9875319600105286,0.9892055988311768,0.0,accept,unanimous_agreement
856161653,2668,would a more careful definition be [code block],0,0,0,0.9828919172286988,0.9927579164505004,0.9862805604934692,0.0,accept,unanimous_agreement
856162816,2668,"so i read the class to understand that it's a move-only object for raii cleanup when a socket is opened. comment that before the class. perhaps too, ""unique_socket_guard"" would be a name that suggests that it is move-only.",0,0,0,0.9877553582191468,0.9928817749023438,0.9937291145324708,0.0,accept,unanimous_agreement
856166482,2668,perhaps comment `// todo c++20: use std::byte`,0,0,0,0.9877002239227296,0.993444800376892,0.9920806288719176,0.0,accept,unanimous_agreement
856168238,2668,this line should be added in the same commit that defines the source code files in lib-pic. not later.,0,0,0,0.9870522022247314,0.9950212240219116,0.9948018789291382,0.0,accept,unanimous_agreement
856169882,2668,comment likewise,0,0,0,0.9822156429290771,0.9560077786445618,0.9874413013458252,0.0,accept,unanimous_agreement
856170400,2668,can the second argument be a reference?,0,0,0,0.9877468347549438,0.9916614294052124,0.9928092956542968,0.0,accept,unanimous_agreement
856170921,2668,can this be a const reference or a `*const`?,0,0,0,0.9871363639831544,0.994376540184021,0.994210124015808,0.0,accept,unanimous_agreement
856171314,2668,can this member be const? it's always good to add const when you can to help the reader understand what parts never vary after construction.,0,0,0,0.9685901999473572,0.9755609631538392,0.991504967212677,0.0,accept,unanimous_agreement
856175350,2668,"indeed this assumes callback isn't null, so i would rather have a reference argument then",0,0,0,0.9775540232658386,0.9882088899612428,0.9916173815727234,0.0,accept,unanimous_agreement
856177354,2668,what feature in wxwidgets was needed? say in the commit comment,0,0,0,0.9885099530220032,0.9946370720863342,0.9952462315559388,0.0,accept,unanimous_agreement
857198166,2668,"toutf8 used here, utf8_str used instead in the following function -- made me check in the wxwidgets headers to be sure they were not really different. why not simply use utf8_str as in the existing function making the differences between the two functions less?",0,0,0,0.9856886863708496,0.9887245297431946,0.9917261600494384,0.0,accept,unanimous_agreement
857199685,2668,"while you are touching this class, please do these things too: - use in-class member initializers so that the body of the constructor shrinks to nothing. - make sure no other members of non-class types are uninitialized. - remove the friend declaration, because long-distance friendships are bad for understanding code. make load() and set() public so you can.",0,0,0,0.737301230430603,0.9523247480392456,0.986403465270996,0.0,accept,unanimous_agreement
857200783,2668,this include becomes redundant when plugindescriptor.h is separated,0,0,0,0.9867662191390992,0.990522563457489,0.9941164255142212,0.0,accept,unanimous_agreement
857441676,2668,"what were you intending the directory structure of the new library to mean? why not just leave it flat? the `internal` sub-directory and the parent directory are in fact in a dependency cycle because of the #include above. so as a whole the subdirectory is not lower-level. however, at the finer level of source code files, there is no dependency, which is good. just leave a flat folder structure, i say.",0,0,0,0.9636933207511902,0.9860609769821168,0.9856210350990297,0.0,accept,unanimous_agreement
857447545,2668,"- callback is assumed non-null inside the function -- therefore, make it a reference argument - id is a ""naked"" int. i would write a small channelid class wrapping the int and preventing implicit conversions to and from int. probably it would need operators == and != and maybe < (or just <=> if we had c++20)",0,0,0,0.9832563400268556,0.9928406476974488,0.9915424585342408,0.0,accept,unanimous_agreement
857448756,2668,"if channel becomes a reference instead of pointer, remember to pass `std::ref(channel)` to avoid the copy constructor.",0,0,0,0.9870420694351196,0.9928725957870485,0.9937134385108948,0.0,accept,unanimous_agreement
857462566,2668,what is the purpose of the unique_ptr making another layer of indirection? could you just use std::thread and use `joinable` to test for its activity instead of `operator bool` ?,0,0,0,0.989305019378662,0.9937180280685424,0.9928537011146544,0.0,accept,unanimous_agreement
857465421,2668,"is there no ""un-binding"" needed later for inet?",0,0,0,0.98280268907547,0.9948517680168152,0.9927986860275269,0.0,accept,unanimous_agreement
857473523,2668,"`man poll` tells me that -1 is a possible return value, indicating an error, stored in `errno` (which is a macro, not really a variable, on my system: i suppose they addressed the thread safety problem). so please make the check more exhaustive.",0,0,0,0.983187735080719,0.991418480873108,0.9926543235778807,0.0,accept,unanimous_agreement
857480996,2668,"on windows this is a possibly-failing constructor but there is no indication to the caller of the failure. either you need a boolean method to test for success, or should throw an exception. same applies to the server, on windows only.",0,0,0,0.9875341653823853,0.9898259043693542,0.9935681223869324,0.0,accept,unanimous_agreement
857481739,2668,ditto question use of `unique_ptr`,0,0,0,0.9853721261024476,0.9918370842933656,0.9747187495231628,0.0,accept,unanimous_agreement
857482642,2668,"... oh i see, but then createchannel() can indicate error. ok then.",0,0,0,0.9549286365509032,0.935016393661499,0.9761177897453308,0.0,accept,unanimous_agreement
857485844,2668,the ipcserver object itself is not thread safe -- i mean `createchannel` could race to assign `impl::mworker` if two threads called it. maybe that is worth a comment.,0,0,0,0.9717485904693604,0.9745146036148072,0.9896931052207948,0.0,accept,unanimous_agreement
857486974,2668,"as with server, this initialization is not itself a thread safe function",0,0,0,0.9821875095367432,0.9662218689918518,0.9928601384162904,0.0,accept,unanimous_agreement
857490010,2668,"return void and throw, or return boolean for error? you made inconsistent choices for client and server. and client, unlike server, makes no error if mimpl failed initialization on windows. i think it is eaiser to make both return boolean and not throw.",0,0,0,0.9548988938331604,0.9521659016609192,0.9111183285713196,0.0,accept,unanimous_agreement
857490714,2668,"ditto use of a reference for the callback, and `std::ref`",0,0,0,0.9723255038261414,0.9938943982124328,0.9911841750144958,0.0,accept,unanimous_agreement
857500082,2668,argument `id` is not used,0,0,0,0.9803619384765624,0.989048957824707,0.9928879141807556,0.0,accept,unanimous_agreement
857505976,2668,in fact the unique use of onconnect in bufferedipcchannel.cpp is always passing non-null (`this`).,0,0,0,0.9883434176445008,0.9940755367279052,0.9937060475349426,0.0,accept,unanimous_agreement
858065531,2668,"too much is happening in the commit ""pluginvalidator interface"" with too few code and commit comments. i am having trouble understanding it. the second line of the commit comment says ""code path that is used with ""bfast"" flag in checkforupdates was extracted into initializeplugins function"" and that explains this function. it might help to separate a commit that does only this part. perhaps ""revalidateplugins"" is also a clearer name for what this does.",-1,0,-1,0.9201915860176086,0.7579343914985657,0.8789936900138855,-1.0,accept,majority_agreement
858070813,2668,"four new abstract classes are introduced in the commit ""pluginvalidator interface"" but i'm not sure what they really do, or how they are meant to be used, from reading their names alone and from the lack of comments. i must study other code to understand.",0,0,0,0.7279474139213562,0.890902042388916,0.7976870536804199,0.0,accept,unanimous_agreement
858163257,2668,"i am beginning to understand this new file. if you are here, you are in the main thread of a child process. the serve() loop detects requests and sends responses, while the overridden functions do work on another thread. nothing ever blocks inside serve(), which makes it a busy loop, in the admittedly unlikely event that it handles its requests faster than the responses arrive. whereas `ondataavailable` contains an assertion that is not provable from what i read here, and migh fail with unusual timing, unless there is more i don't understand yet about the main process. i would be more satisfied to see: - a std::mutex and associated std::condition_variable. - serve() waits [a link] for the condition: `!running || (request && channel)` - onconnectionerror, ondisconnect, an ondataavailable may make the condition true, so they call [a link] - serve() releases the mutex only after moving from mrequest. - ondataavailable holds the mutex while assigning to mrequest - after taking the mutex, it also waits on the condition variable for `!mrequest`, which really ""proves"" it - ondisconnect, which can make the condition true, also notifies the variable - the spin lock should still guard the use of mchannel so that serve() doesn't race with ondisconnect() destroying the channel.",0,0,1,0.6431482434272766,0.6640909314155579,0.5843544006347656,0.0,accept,majority_agreement
858458893,2668,should be `desc->getuntranslatedversion()`,0,0,0,0.9883268475532532,0.99469792842865,0.9945057034492492,0.0,accept,unanimous_agreement
873150365,2668,"commit comment misspelled ""instance""",0,0,0,0.9698890447616576,0.9921098351478576,0.9717427492141724,0.0,accept,unanimous_agreement
873152034,2668,"commit comment misspelled ""stability""",0,0,0,0.9733213186264038,0.9709104299545288,0.9809235334396362,0.0,accept,unanimous_agreement
873154718,2668,is the convention `details` or `detail`? i used `detail`,0,0,0,0.9877045154571532,0.9939398765563964,0.995187520980835,0.0,accept,unanimous_agreement
873154822,2668,"""builds""",0,0,0,0.9841082096099854,0.9894537925720216,0.9754793047904968,0.0,accept,unanimous_agreement
873155033,2668,all these comments might use doxygen format `//! ...` or ` /*! ... */ `,0,0,0,0.9847840070724488,0.9941005110740662,0.9863129258155824,0.0,accept,unanimous_agreement
873156128,2668,"an assertion without proof -- but sufficient ""proof"" for me would be that you document in the header file, [code block] so the burden of further proof is properly on the caller.",0,0,0,0.9855105876922609,0.98995178937912,0.9707077741622924,0.0,accept,unanimous_agreement
873156396,2668,"this comment disagrees with the implementation, and i think you want to change the comment. result is valid if and only if there is no error and there is at least one descriptor.",0,0,0,0.9799561500549316,0.9867905974388124,0.9781692028045654,0.0,accept,unanimous_agreement
873156865,2668,"why not `std::move(desc)`? you need it to avoid copying, because `desc` alone still is an lvalue reference even though the argument is declared with `&&`. and that might allow vector instead of list for the container, but maybe there is a reason for list i don't understand yet, some requirement of non-relocation of the memory.",0,0,0,0.9819988012313844,0.9900820851325988,0.989393711090088,0.0,accept,unanimous_agreement
873157284,2668,duplicated string literal,0,0,0,0.98723965883255,0.9722762703895568,0.992260754108429,0.0,accept,unanimous_agreement
873159303,2668,"now i'm wondering about the proper internationalization of error messages. does `translation` really work, or has the host process not intiailized translations before this point is reached? if it doesn't, maybe `translation()` can be applied to the msgid on the host side, if the `translatablestring` is a simple one without format arguments.",0,0,0,0.9528787732124328,0.9832286834716796,0.9656307101249696,0.0,accept,unanimous_agreement
873159366,2668,"and, two new non-internationalized messages.",0,0,0,0.9854470491409302,0.9862200021743774,0.9919986128807068,0.0,accept,unanimous_agreement
873160538,2668,"in audacityapp.cpp, `populatepreferences` follows `initpreferences` and that is where translation is initialized. that function, or pieces of it, should be moved out of audacityapp.cpp and demoted into one of the lib-s, so it can be used here too, resolving the doubts about `translation()` i mentioned before.",0,0,0,0.9870104789733888,0.9949656128883362,0.9939531683921814,0.0,accept,unanimous_agreement
873161195,2668,"""condition""",0,0,0,0.9844808578491212,0.989690899848938,0.9895979166030884,0.0,accept,unanimous_agreement
873161894,2668,another non-translated string,0,0,0,0.9860154390335084,0.9732841849327089,0.9892423748970032,0.0,accept,unanimous_agreement
873162046,2668,this implies that this server expects messages as formatted by `makerequeststring`. then that should be commented in the header file.,0,0,0,0.9887452721595764,0.9951400756835938,0.9936475157737732,0.0,accept,unanimous_agreement
873162723,2668,"an assertion without proof. to fix it, improve documentation to explain that a request must be sent only after responses of all previous requests have been received by the client -- otherwise, requests may be lost: they don't queue up. that makes this class more understandable without reading the code that uses the class -- and that code doesn't exist yet, at the commit introducing this.",0,0,0,0.976220726966858,0.9849568009376526,0.8945732116699219,0.0,accept,unanimous_agreement
873168899,2668,maybe it won’t be difficult to build a small executable that links only this library and its dependencies. avoid wxmodule and wasteful loading of another audacity with all of its static initializations. not essential to making this pr.,-1,0,0,0.5890249013900757,0.8662642240524292,0.9849356412887572,0.0,accept,majority_agreement
873188687,2668,"maybe less misleading to write, ""starts and communicates with a dedicated process to perform plugin validation"". but the member functions of it are available to call in the main process.",0,0,0,0.9854736328125,0.9854540824890136,0.878243088722229,0.0,accept,unanimous_agreement
873188880,2668,"a thread join happens at the closing brace, so callbacks to members may happen before that completes, making mdelegate null matters while joining. am i right? it may help to explain a little more.",0,0,0,0.9608786702156068,0.973969578742981,0.99334055185318,0.0,accept,unanimous_agreement
873190041,2668,"if you really want to minimize the time inside the lock_guard: note that swap of an `optional` with another empty one does perform a move-construction, see [a link] ... but for wxstring that performs a string copy anyway, because wxwidgets is an old library not defining move constructors. you can improve this using `optional ` or you can use the member function `wxstring::swap` on *mrequest. (then `mrequest.has_value()` is still true, it has an empty string in it; so `mrequest.reset()` would be needed.)",0,0,0,0.9816377758979796,0.9893518090248108,0.992065966129303,0.0,accept,unanimous_agreement
873190093,2668,you also used `optional ` in pluginhost and might change it.,0,0,0,0.9893141984939576,0.9923200011253356,0.994227409362793,0.0,accept,unanimous_agreement
873192911,2668,what you wrote is equivalent to [code block] but does not lock the weak pointer for the intended scope! it should be [code block],0,0,0,0.9604370594024658,0.9814473390579224,0.9913092851638794,0.0,accept,unanimous_agreement
873193971,2668,"this means, handling of one request is complete, and another may be sent. it is very pleasing to see only one virtual function interface here, and the simplified implementation without the state machine and a switch. i find it more understandable than the first draft.",1,1,1,0.9181933403015136,0.9522937536239624,0.9099817872047424,1.0,accept,unanimous_agreement
873194219,2668,"i would also write the lambda capture without this, only with self to access this. and that would have caused a compilation error after the incorrect if, which might make you fix it correctly.",0,0,0,0.9866010546684264,0.9733686447143556,0.9927963614463806,0.0,accept,unanimous_agreement
873194573,2668,"the sixth commit, which introduces this file, fails to compile. it requires the overload of `registerplugin` added at the next commit.",0,0,0,0.939965546131134,0.9939512014389038,0.991634488105774,0.0,accept,unanimous_agreement
873195130,2668,"the constants `state_new` and `id_shownew` might also exist only when conditionally compiled. that would make it more obvious that the changes in this commit are complete and correct. that would mean one of the event bindings in the table is also eliminated, and one case of a switch statement, and one if-block in `setstate`.",0,0,0,0.98760324716568,0.9944661259651184,0.9940686225891112,0.0,accept,unanimous_agreement
873195338,2668,"""plugins still exist""",0,0,0,0.9894393086433412,0.9875891804695128,0.993882417678833,0.0,accept,unanimous_agreement
873199958,2668,comments should explain that the callbacks occur on the main thread when the event loop idles or is yielded to.,0,0,0,0.986061692237854,0.9881218671798706,0.9930188059806824,0.0,accept,unanimous_agreement
873200977,2668,it's good to make members of new classes `const` where possible as an aid to understanding. this is one member that could be const.,1,0,0,0.5887129902839661,0.8410784006118774,0.9861376881599426,0.0,accept,majority_agreement
873201782,2668,"is this where errors from pluginhost are used at last? then fixing the setup of locale in the other process is unimportant after all, and literal english string errors are all right. but then, where `translation()` was used, make it `debug()`.",0,0,0,0.9694748520851136,0.9926339983940125,0.9941775798797609,0.0,accept,unanimous_agreement
873202738,2668,this could be just a local variable,0,0,0,0.9869044423103333,0.9897317290306092,0.991291046142578,0.0,accept,unanimous_agreement
873202904,2668,`poll` already did a `yield` too,0,0,0,0.9851985573768616,0.9919928312301636,0.9923547506332396,0.0,accept,unanimous_agreement
873204773,2668,"if the definition of `checkpluginupdates` is moved here, it makes the commit easier to review. more black lines, fewer red and green.",0,0,0,0.9734932780265808,0.990565061569214,0.9932180047035216,0.0,accept,unanimous_agreement
873205563,2668,"moving the definition makes it clearer that false became true in this line. a more complete check of validity is done. still now, i wonder about this. what happens if a plug-in is upgraded to a newer version reinstalled at the same path? should that be detected and cause another load again in the sandbox? nyquist.cpp contains checks for advance of the modification date of the plug-in file, making it easier to try changes while you develop a plug-in. but those are just interpreted source code. maybe recording of time stamps is a future enhancement to do.",0,0,0,0.9248439073562622,0.9203367233276368,0.9759057760238647,0.0,accept,unanimous_agreement
873206763,2668,"does this leak? a wxwindow is managed when it has a non-null parent, but this non-modal dialog does not! but i see it does not leak because all the button event handlers cause it to destroy itself. very well, mention that here, to justify `safenew` (which is something like an assertion -- something needing a proof when you see it.)",0,0,0,0.8962364196777344,0.9535454511642456,0.8950673341751099,0.0,accept,unanimous_agreement
873206968,2668,"you do a lot with explicit sizers and control creations and so on. are you not comfortable enough with shuttlegui? all right if not, but a rewrite of this should be in the future to make all of this desirable plug-in checking platform neutral too. besides which: perhaps this dialog belongs in its own small source file.",0,0,0,0.8991897106170654,0.5682445764541626,0.9786353707313538,0.0,accept,unanimous_agreement
873991893,2668,"depends on project i believe, do we have such convention?",0,0,0,0.9731165170669556,0.9789678454399108,0.985615611076355,0.0,accept,unanimous_agreement
874022697,2668,"right, thanks! there is no such requirement, `plugindescriptor` will be copied later, when added to `pluginmanager`",1,1,1,0.9832209348678588,0.991891384124756,0.9912902116775512,1.0,accept,unanimous_agreement
874052822,2668,"hm, didn't think of it, thanks. it's hard to answer such questions without a complete understanding of requirement. though we can initialize i18n on the host side too, but then there is a question of language preference change. so, i don't have a complete answer, not use i18n in messages is a possible solution i think.",-1,-1,1,0.4000664353370666,0.5380694270133972,0.8473875522613525,-1.0,accept,majority_agreement
874066172,2668,"i was thinking of it too, and there is a downside - the size of application will increase, don't know how much though.",0,0,0,0.509519100189209,0.5114247798919678,0.954559326171875,0.0,accept,unanimous_agreement
874075230,2668,"yes, it's correct",0,0,0,0.9773458242416382,0.8665518164634705,0.9769917130470276,0.0,accept,unanimous_agreement
874084138,2668,thanks! `this` is needed for class-member access,1,1,1,0.9642139077186584,0.8571286201477051,0.9890678524971008,1.0,accept,unanimous_agreement
874091829,2668,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
874108555,2668,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
874117743,2668,"wasn't aware of that, thanks!",1,1,1,0.8445305824279785,0.9682692289352416,0.9611761569976808,1.0,accept,unanimous_agreement
874119431,2668,it will cost some time because from what i see it doesn't yield each `poll`. in my case the difference was 2-4 seconds.,0,0,0,0.9429886341094972,0.8872220516204834,0.9683635234832764,0.0,accept,unanimous_agreement
874121599,2668,i'd say yes. but for this we need to track module file timestamp (if there is a file),0,0,0,0.9861314296722412,0.9888411164283752,0.9925538897514344,0.0,accept,unanimous_agreement
874128773,2668,"i'm still not very comfortable with wxwidgets) probably, you are right",0,-1,-1,0.4471658766269684,0.5212506055831909,0.8014329075813293,-1.0,accept,majority_agreement
875640947,2668,you didn't take this suggestion yet in the lastest force-push. did you not understand it?,0,0,0,0.6983469724655151,0.9790696501731871,0.978133499622345,0.0,accept,unanimous_agreement
1241278381,4797,"my first comment on this pr. i did not review the pr that added this library, so i must become familiar with that first. i see `libraries/lib-time-and-pitch/cmakelists.txt` lacks a long-form cmake comment at the top, which is the convention with other libraries. please supply that comment, about the general purpose of the library.",0,0,0,0.9627825617790222,0.9241008758544922,0.9893112182617188,0.0,accept,unanimous_agreement
1242063703,4797,"i see this header file changes in the second commit in the sequence, and nothing else changes in lib-mixer thereafter. you know i dislike the notion of an internal, stateful cursor leaking out of the abstract interface, and i would think it more elegant instead to change the `get` function to take a direction argument, and also to specify the reversal of samples is done in the result. but i think i will not insist on this if the schedule presses.",-1,0,0,0.8891791105270386,0.6424005031585693,0.9567964673042296,0.0,accept,majority_agreement
1242064721,4797,some breaks in this very long comment line,0,0,0,0.942717671394348,0.5851790308952332,0.6170670390129089,0.0,accept,unanimous_agreement
1242480129,4797,"good, now please add to the doxygen comments above, explaining the argument, and the expectation that the outputs are reversed. and likewise for `getenvelopevalues`",0,1,0,0.9071266055107116,0.5946416258811951,0.5947898626327515,0.0,accept,majority_agreement
1242522012,4797,"i would rather not see this ugly cast. i would rather see `widesamplesequence::getfloats` take `bool backwards = false` as the first optional argument. the ""narrow"" overload in `sampletrack` may simply supply false instead of exposing that argument to its callers.",-1,0,-1,0.8698623180389404,0.959137499332428,0.953739583492279,-1.0,accept,majority_agreement
1242541090,4797,"i see reversal of the envelope values. but i was expecting to see `reversesamples` too, restoring the removed call in mixersource. i think this means the first commit breaks backward scrubbing, and that should not be. i haven't yet reviewed later commits, which might make it work again, when the wavetrack has its stretching decorator, but logically, shouldn't the proper place to apply reversal be here in wavetrack?",0,0,0,0.975635290145874,0.9912726283073424,0.9846339821815492,0.0,accept,unanimous_agreement
1242547769,4797,"library header comment, please",0,0,0,0.9841693639755248,0.9877760410308838,0.9939666986465454,0.0,accept,unanimous_agreement
1242550701,4797,"if you really want to include this in the tree, the cmakelists.txt comment can refer the reader to it for more explanation.",0,0,0,0.9859874844551086,0.9896334409713744,0.9943366646766664,0.0,accept,unanimous_agreement
1242561625,4797,"i'm skipping the rest of this big commit for now, i will return and review it in detail last",0,0,0,0.7419830560684204,0.9482232928276062,0.9545610547065736,0.0,accept,unanimous_agreement
1242562583,4797,`override` is still missing for `getrate` and that makes clang give warnings,0,0,0,0.9846853017807008,0.9850149750709534,0.9920024871826172,0.0,accept,unanimous_agreement
1242564384,4797,you should also delete the `` mentioning `ii`,0,0,0,0.9874470829963684,0.9934000968933104,0.9952917098999025,0.0,accept,unanimous_agreement
1242569948,4797,"this call no longer needs to satisfy the removed precondition, but must now not index the array out of bounds, and so `clipinterface::getsampleview` should have a `` or `` comment guaranteeing the size of the result equals the width. and `clipinterface::getwidth()` should replicate the promise of `widesamplesequence::nchannels`: [code block]",0,0,0,0.9849746823310852,0.9940823912620544,0.9947038292884828,0.0,accept,unanimous_agreement
1242573033,4797,"however, i'm not yet sure i agree that `ii` should be removed as an argument.",0,0,0,0.7742072939872742,0.6863412857055664,0.8174270987510681,0.0,accept,unanimous_agreement
1242575438,4797,"you are assuming here that all channels will be needed in the cache. but remember what i explained about drawing code, including spectrogram, needing to stride ""channel-major"" but ""clip-minor"". the caches for spectrogram drawing might now be doing wasteful duplicated work? creating a left and right side cache, but only using one side, destroying that cache, then repeating for the right channel? .",0,0,0,0.9667294025421144,0.9739809036254884,0.964643120765686,0.0,accept,unanimous_agreement
1242578220,4797,might `move` the shared pointers,0,0,0,0.9882091283798218,0.9918553829193116,0.9917274713516236,0.0,accept,unanimous_agreement
1242582501,4797,i think you really mean: [code block],0,0,0,0.9803223013877868,0.9841018319129944,0.9764299988746644,0.0,accept,unanimous_agreement
1242587232,4797,"you handle un-owned tracks anyway, so weaken the ``. now remember too, that clips are not necessarily stored, sorted by start time. but are you assuming that where you use the results of this function?",0,0,0,0.9827725291252136,0.9873542189598083,0.9898584485054016,0.0,accept,unanimous_agreement
1242596374,4797,"this line, and the one in src/cmakelists.txt, are unnecessary for the build, and i would prefer you omit them so that the generated library graph does not have unnecessary edges.",0,0,0,0.9832747578620912,0.9924412965774536,0.986248791217804,0.0,accept,unanimous_agreement
1242614503,4797,"oh, never mind. the caching for spectrum view will not include the stretching decorator.",0,0,0,0.9622910618782043,0.6402401924133301,0.9453450441360474,0.0,accept,unanimous_agreement
1242632520,4797,"the stretching decorator re-implements ::get, where the clip samples are reversed before being passed to the stretching algorithm. as a result scrubbing does work when injected that decorator, but you're right, `wavetrack::get` should reverse the samples, even if no other code has use for it. `wavetrack::getsampleview` isn't a virtual function and `backwards` could/should be removed from its arguments, leaving `cachingplayablesequence::get` do the reversal.",0,0,0,0.9737861752510072,0.9931722283363342,0.9939929842948914,0.0,accept,unanimous_agreement
1242634945,4797,"i have to update this, thanks for reminding.",1,0,1,0.5220401883125305,0.5483229756355286,0.8725497722625732,1.0,accept,majority_agreement
1242654735,4797,"not the stretching decorator, but `cachingplayablesequence` also uses `waveclip::getsampleview`. currently it calls it on two separate tracks each with mono clips, so there's no unnecessary work. when we do use wide clips, though, there'll be only one stereo track, `wavetrack::getsampleview` will call `getsampleview` on clips, and yes, doing unnecessary work if it stays at that. looks like i indeed need to preserve the `ii` argument ...",0,0,0,0.9416037201881408,0.9799705743789672,0.9828593134880066,0.0,accept,unanimous_agreement
1242659656,4797,"ok for the ``. the stretching decorator sorts the clips this method returns, so we're good.",1,0,0,0.8039648532867432,0.5990846753120422,0.8660163879394531,0.0,accept,majority_agreement
1242665641,4797,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1242669658,4797,"in the interests of progress i will not block the pr if this is left unfinished, and scrubbing works in the end result, but you are aware of a need to come back and clean it up. really you should make sure that the sample reversal is part of the stated contract of `widesamplesequence` and that all overrides of `get` do it correctly -- whether it's the undecorated or the decorated wavetrack. maybe some overrides of `get` won't be directly called in 3.4, but you should not assume it will always be so. the classes should make sense in isolation and in test harnesses, fulfilling the base class contract. that's what the l of solid is all about.",0,0,0,0.950599193572998,0.9748818874359132,0.9768282175064088,0.0,accept,unanimous_agreement
1242671677,4797,then perhaps the lack of promise of sortedness should be mentioned in a header comment.,0,0,0,0.9635894298553468,0.991903841495514,0.9868918061256408,0.0,accept,unanimous_agreement
1242672606,4797,"if you just make a `// todo` note to revisit the efficiency problem in a later pr, i would accept that.",0,0,0,0.9854828119277954,0.9862409830093384,0.9852369427680968,0.0,accept,unanimous_agreement
1242952609,4797,this interface looks strange -- i don't see what tells it how many `buffers` are there.,-1,-1,-1,0.911198079586029,0.9542833566665648,0.9301349520683287,-1.0,accept,unanimous_agreement
1242952675,4797,class comments?,0,0,0,0.9839799404144288,0.9876694083213806,0.9890011548995972,0.0,accept,unanimous_agreement
1242954199,4797,"i would define `audiosegment.cpp` just to define the destructor non-inline -- so that the linker can avoid de-duplication of the definition of the destructor and the virtual function table of the class; also so that ""audiosegment.h"" is included in at least one translation unit before any other header, and we can be sure the header does not require any earlier #include for it to compile.",0,0,0,0.9883109927177428,0.9941551089286804,0.993298351764679,0.0,accept,unanimous_agreement
1242955371,4797,likewise for this class -- i would make one wimpy little translation unit just to give the virtual function table a unique home at link time.,0,0,0,0.9627949595451356,0.9772408604621888,0.5300777554512024,0.0,accept,unanimous_agreement
1242960804,4797,`size_t` seems a strange choice of type to describe a sample rate. it's not sizing something in memory.,-1,-1,-1,0.738847017288208,0.5389115214347839,0.8621059060096741,-1.0,accept,unanimous_agreement
1242978913,4797,you did make a tiny translation unit for this one,0,0,0,0.9848463535308838,0.97957581281662,0.9904735684394836,0.0,accept,unanimous_agreement
1242979326,4797,"uniform member initialization syntax, here and elsehwere, maybe?",0,0,0,0.9888193011283876,0.9909402132034302,0.9895097017288208,0.0,accept,unanimous_agreement
1242982974,4797,"only now do i understand the meaning of the return value of `getfloats`. but audiosegment.h, lacking comments, didn't help me. please write some informal description of the contract in that header file. if it were me, i would even add a pure virtual `size_t getwidth() const` just so that i could use it to state a precondition on the size of `buffers` and call it just in not-ndebug builds to assert the precondition.",0,0,0,0.8982278108596802,0.9882931113243104,0.9793363213539124,0.0,accept,unanimous_agreement
1242990876,4797,maybe that should be `>=` just to be sure there is eventual emptiness even in the presence of an off-by-few error,0,0,0,0.9629833698272704,0.99104905128479,0.9780927896499634,0.0,accept,unanimous_agreement
1242991936,4797,maybe `limitsamplebuffersize`; and are you sure that subtraction never underflows?,0,0,0,0.9877293705940248,0.9952390193939208,0.9940069913864136,0.0,accept,unanimous_agreement
1243259149,4797,"i don't know of evidence that the compilation time gain is worth the manual effort. the early-include verification... yeah, all right.",0,0,0,0.9548354744911194,0.908108413219452,0.9283761382102966,0.0,accept,unanimous_agreement
1243282022,4797,"the effective number of channels is known in the context instances are used by both implementation and user. but you're right, looking back that's unusual. i'll pass a vector reference instead.",0,0,0,0.9592574834823608,0.9558936357498168,0.9925634264945984,0.0,accept,unanimous_agreement
1243287075,4797,never thought of `size_t` that way ... will use just int.,0,0,0,0.955204963684082,0.9766005277633668,0.9785035252571106,0.0,accept,unanimous_agreement
1243291295,4797,because i initially added this in `lib-mixer` and wanted to be consistent with the code around me :d,1,1,1,0.9202393293380736,0.9818400740623474,0.9788740277290344,1.0,accept,unanimous_agreement
1243301827,4797,"i don't understand what you mean here. in any case, i think it's obvious enough from the code that `mtotalnumsamplestoproduce >= mtotalnumsamplesproduced`, asserting this would make the code look uncertain.",0,0,0,0.8516552448272705,0.6196746230125427,0.9199458360671996,0.0,accept,unanimous_agreement
1243304395,4797,"similarly to above, `mtotalnumsamplesproduced` simply can't be larger than `mtotalnumsamplestoproduce`. i wouldn't want the reader to start doubting this.",0,0,0,0.9654600024223328,0.918095886707306,0.976563036441803,0.0,accept,unanimous_agreement
1243306415,4797,absolutely.,0,0,0,0.8953989744186401,0.7786356806755066,0.963522732257843,0.0,accept,unanimous_agreement
1243325682,4797,"oops : i added `audiosegment.cpp` and moved the dtor definition there, and now i'm getting unresolved external symbol. i can't see why, so at least for now i'll leave it with the inline definition.",-1,-1,-1,0.5423454642295837,0.9342228174209596,0.9738837480545044,-1.0,accept,unanimous_agreement
1243342042,4797,you likely need to export the interface,0,0,0,0.9858104586601256,0.9886643290519714,0.9933547973632812,0.0,accept,unanimous_agreement
1243429233,4797,i'm addressing it.,0,0,0,0.9644904136657716,0.947888970375061,0.9801849722862244,0.0,accept,unanimous_agreement
1243881096,4797,"`start` is an inclusive bound for the usual forward fetch and the other bound is exclusive. but as i recall how mixer works, `start` is exclusive and the other inclusive for backwards fetch. worth commenting.",0,0,0,0.7678409218788147,0.9832277297973632,0.9918587803840636,0.0,accept,unanimous_agreement
1243881563,4797,"likewise, clarify inclusive and exclusive bounds.",0,0,0,0.9786271452903748,0.9855225086212158,0.9919861555099488,0.0,accept,unanimous_agreement
1243920278,4797,"i see `backwards` is used to construct the cache, but is ignored when using it. samples are not taken from the end and reversed. so this implementation of `cachingplayablesequence` is incomplete, and so in the first commit, backwards scrubbing won't work right. but i see that later commits stop using this class for audio io, and in the remaining uses for spectrogram, there is never any backwards fetch. so for now just `assert(!backwards)` and comment about it.",0,0,0,0.9266534447669984,0.9745129942893982,0.9855980277061462,0.0,accept,unanimous_agreement
1243937000,4797,"you changed `float *const *` to `std::vector &` so there is information about the number of buffers. this is all right. but `std::vector` carries the irrelevancy about the allocator type in its second template argument, and this doesn't allow the caller simply to stack-allocate the pointers if desired. this is why i wanted `std::span` for such uses, but that is c++20. however it might be easily imitated in a new utility. it's also why my preference, lacking `span`, is to pass two arguments, the array of pointers and its size. now should there be an explanation about which buffers are filled? if the caller happens to pass more buffers then the width, should you expect zeroes in the extra buffers or unspecified? this abstraction still has no interface to query the width. none of the above is a blocking criticism.",0,0,0,0.9480133652687072,0.9904575347900392,0.9841927886009216,0.0,accept,unanimous_agreement
1243942756,4797,"you changed `samplerate` from `size_t` to `int`. in other audacity code, inconsistently, `int` and sometimes `double` is used for rates. if we really never need fractions of hz, then maybe `unsigned` would make most sense. let it remain `int`. you changed `numchannels` to `int` too, but i didn't ask for that -- `size_t` does make sense for that. but this too can stand.",0,0,0,0.975714385509491,0.9914566874504088,0.9907159805297852,0.0,accept,unanimous_agreement
1243961691,4797,"here, an override of a pure virtual function is adding an assertion at the top -- that's an unstated, stricter precondition than the base class specified. that's bad form (violating the l principle) -- so again, i think `getwidth` should also be a pure virtual of the base class, so that the base class can formally state the precondition. and that would answer the question about excess buffers -- they are just not allowed.",-1,0,0,0.521130383014679,0.8145608305931091,0.9408622980117798,0.0,accept,majority_agreement
1243997086,4797,this test file fails to compile in the commit that introduces it. the audacity executable compiles.,0,0,0,0.8595015406608582,0.9886484742164612,0.9894010424613952,0.0,accept,unanimous_agreement
1244004069,4797,"this line now breaks the build at ""waveclip inherits clipinterface""",0,0,0,0.9870498776435852,0.9946687817573548,0.9942753911018372,0.0,accept,unanimous_agreement
1244016857,4797,"again -- if i see a new assertion at the top of a function, i want to see it commented too as an explicit precondition. the commit introducing this function repairs all the previous build problems.",0,0,0,0.9820885062217712,0.9908422231674194,0.9905162453651428,0.0,accept,unanimous_agreement
1244022320,4797,the informally stated (and not `assert`ed) precondition of the constructor of `waveclip` can be violated if you make a track with misaligned clips. but of course it doesn't matter much. wideclip is provisional only until i make real wide waveclips and misaligned clips become impossible.,0,0,0,0.8393425941467285,0.9830502867698668,0.9859080910682678,0.0,accept,unanimous_agreement
1244024256,4797,still an unnecessary arc in the modules graph,0,0,0,0.970649003982544,0.9556305408477784,0.8354395627975464,0.0,accept,unanimous_agreement
1244028528,4797,"still missing one more `override`, for `getrate`",0,0,0,0.9851474165916444,0.9901522994041444,0.9828936457633972,0.0,accept,unanimous_agreement
1244036941,4797,i'm actually recommending an l principle violation with that assertion! but i understand the fix as not worth the effort now,-1,1,-1,0.7316256761550903,0.5807913541793823,0.9760938286781312,-1.0,accept,majority_agreement
1244044290,4797,"i would clarify, ""provided in each buffer""",0,0,0,0.9882461428642272,0.9917883276939392,0.9935699701309204,0.0,accept,unanimous_agreement
1244047969,4797,"that #include at least is unnecessary, maybe some others too",0,0,0,0.9712761640548706,0.9770227670669556,0.9897683262825012,0.0,accept,unanimous_agreement
1244053321,4797,wrong comment,-1,-1,-1,0.9223400354385376,0.6907638311386108,0.8904055953025818,-1.0,accept,unanimous_agreement
1244057709,4797,"this is only test code, but i don't like naked `new`. you could `make_unique` and then `move` it.",-1,-1,0,0.8699007630348206,0.7662193775177002,0.8807706236839294,-1.0,accept,majority_agreement
1244062273,4797,you mean `.h`,0,0,0,0.8952285051345825,0.9922768473625184,0.989694118499756,0.0,accept,unanimous_agreement
1244069683,4797,you need `#include ` to define `size_t` and fix linux builds.,0,0,0,0.9892597198486328,0.9946119785308838,0.9951569437980652,0.0,accept,unanimous_agreement
1244071290,4797,that's a path on your computer only!,0,0,0,0.9690613746643066,0.9063047170639038,0.994699478149414,0.0,accept,unanimous_agreement
1244080427,4797,i think you do need mock_prefs but why mock_audio?,0,0,0,0.8425613045692444,0.9844851493835448,0.9841639399528505,0.0,accept,unanimous_agreement
1244082608,4797,"declared, nowhere defined",0,0,0,0.9482541680336,0.9814635515213012,0.9895365238189696,0.0,accept,unanimous_agreement
1244083679,4797,add `override` please,0,0,0,0.9887785315513612,0.991979956626892,0.995182454586029,0.0,accept,unanimous_agreement
1244114407,4797,"`lib-stretching-sequence` does not depend on `lib-wave-track`, but the opposite. however the test executable depends on `lib-wave-track`. the build system let you do this, but i think i don't like it and should consider it a cycle. instead, you could lift all testing files that depend on wavetrack and waveclip into a new `lib-wave-track/test` directory. that may mean `lib-wave-track/test` might need to used some of the mocks defined in `lib-stretching-sequence/test`. does the test build system allow that dependency? ?",0,0,0,0.9366095066070556,0.9025990962982178,0.9349988698959352,0.0,accept,unanimous_agreement
1244123947,4797,i think the second base could be `private`,0,0,0,0.9889745712280272,0.983942449092865,0.9881759881973268,0.0,accept,unanimous_agreement
1244128493,4797,"if the constructor is not meant for public use, but instead only the `create` factories -- maybe use the `createtoken` trick as in `effectstage`. the constructor has to be public, but `create` needs make-shared so `std` functions have to call the constructor. but the trick is a way to restrict the usage without the `std` functions needing to be `friend`s.",0,0,0,0.98752623796463,0.9929227828979492,0.991021692752838,0.0,accept,unanimous_agreement
1244132350,4797,more uniform initializations might be done for this and other test classes.,0,0,0,0.9857207536697388,0.9925296902656556,0.9852461218833924,0.0,accept,unanimous_agreement
1244740804,4797,thank you!,1,1,1,0.9661415219306946,0.9148550629615784,0.9448403120040894,1.0,accept,unanimous_agreement
1244742856,4797,removed - thanks!,1,1,1,0.8197445869445801,0.98262757062912,0.9581992626190186,1.0,accept,unanimous_agreement
1244748628,4797,`audacityproject::create()` leads to an audio-io setup in my `testwavetrackmaker`. not sure if/how it could be avoided.,0,0,0,0.8558655381202698,0.9773827195167542,0.9166904091835022,0.0,accept,unanimous_agreement
1244764341,4797,"makes sense, there must be modifications in `wavetrack` needed for this integration test that i added in follow-up commits.",0,0,0,0.9875641465187072,0.9918869137763976,0.9883358478546144,0.0,accept,unanimous_agreement
1244767098,4797,i need a refererence to `factory` after the move. it's feasible without this `new` but more complicated.,0,0,0,0.9761189222335817,0.9892684817314148,0.9790050983428956,0.0,accept,unanimous_agreement
1244773513,4797,"i don't think we have a cyclic dependency. in fact, if i could remove `lib-stretching-sequence` from the list of libraries needed by this test executable and it would still compile. it's just one unnecessary arrow in the dependency graph ;)",0,1,1,0.949363887310028,0.9730737209320068,0.940541923046112,1.0,accept,majority_agreement
1244783569,4797,"if we're picky, yes, we'll want `getwidth` and specifications about `buffers.size() > getwidth`. `audiosegment`s are used in `stretchingsequence`, which, like all `playablesequence`s in audacity as of now, has either only mono or stereo clips. this is why a need for `getwidth` wasn't felt in the first place. i suggest we leave it at that for now, and address it properly when/if we ever support tracks of mixed channel counts.",0,0,0,0.963869035243988,0.9886310696601868,0.9895212650299072,0.0,accept,unanimous_agreement
1244785635,4797,i wish c++ had a strictly-positive-integer type ...,0,0,-1,0.9603311419487,0.9524396061897278,0.5859770178794861,0.0,accept,majority_agreement
1244795399,4797,"oh well, you win :d",1,1,1,0.9847036004066468,0.9906365275382996,0.9940333962440492,1.0,accept,unanimous_agreement
1244798716,4797,"could it ? checking ... ... no, because it passes itself as `timepitchandsource` to `mtimeandpitch`.",0,0,0,0.974821388721466,0.9931519031524658,0.9901005625724792,0.0,accept,unanimous_agreement
1244802968,4797,"it's ok, it can be used publicly, it's just that clients usually don't want to bother about injecting a factory and are happy with the default one. one test case, though, needs it. but that's a nice trick, never thought about it.",0,1,1,0.4872870147228241,0.9008234739303588,0.9782809019088744,1.0,accept,majority_agreement
1244809125,4797,"i agree. it'd be hard to test, too. spot on, though.",0,0,0,0.7750915288925171,0.6124067306518555,0.8509616255760193,0.0,accept,unanimous_agreement
1244820395,4797,i meant by that that i was going to address it. it's done now.,0,0,0,0.9769974946975708,0.9380837082862854,0.9909331798553468,0.0,accept,unanimous_agreement
1244823328,4797,addressed,0,0,-1,0.9792097806930542,0.9635511636734008,0.5785259008407593,0.0,accept,majority_agreement
1245249641,4797,"but i think the test directory for a library should be responsible to test only that library. if a test executable involves other libraries higher in the graph, that argues for moving those tests.",0,0,0,0.9821757674217224,0.971455216407776,0.98755544424057,0.0,accept,unanimous_agreement
1318465255,5138,`wavetrack::duplicate` does this check for you. we should consider making it a public helper method of wavetrack to places like these simpler.,0,0,0,0.9826064109802246,0.9941283464431764,0.9931849837303162,0.0,accept,unanimous_agreement
1318469813,5138,"pardon me i thought it did: not really, or intricately. that said, `duplicate` won't apply stretch ratio if no clip is stretched in the interval. so behaviour would be preserved removing those checks - although it would have a negative impact on performance.",0,0,0,0.702680230140686,0.9417183995246888,0.9667786955833436,0.0,accept,unanimous_agreement
1318475502,5138,nice !,1,1,1,0.9834675192832948,0.9923530220985411,0.9870871305465698,1.0,accept,unanimous_agreement
1318477159,5138,:thumbs_up:,0,0,1,0.8380307555198669,0.9771975874900818,0.9533231854438782,0.0,accept,majority_agreement
1318805924,5138,"i've been using `timeinterval` on my other branch, which i think is appropriate since it's a pair of doubles.",0,0,0,0.9850690960884094,0.984726905822754,0.9908046722412108,0.0,accept,unanimous_agreement
1318811510,5138,i prefer the way it was before: easier to understand (i always have to look up the subtlety between lower_bound and upper_bound) and on usage average seldom more expansive performance-wise. but sure ...,0,0,0,0.722850501537323,0.8743442893028259,0.6845563054084778,0.0,accept,unanimous_agreement
1319676421,5138,i will change the name,0,0,0,0.9740912318229676,0.9787343740463256,0.9922325611114502,0.0,accept,unanimous_agreement
1321321559,5138,"eliminate `wxunused` when you have an excuse to disturb a function with that macro. just declare `double, double` or if you want to be really modern: [a link]",0,0,0,0.9783114790916444,0.9781460762023926,0.9929754734039308,0.0,accept,unanimous_agreement
1321323557,5138,new strings.,0,0,0,0.9787517189979552,0.968933403491974,0.991936206817627,0.0,accept,unanimous_agreement
1321327006,5138,fyi copy-paste of agreed-upon strings from other places where pre-rendering is needed.,0,0,0,0.9886912107467652,0.98681902885437,0.9912471175193788,0.0,accept,unanimous_agreement
1324068459,5138,"you mentioned this utility in our meeting yesterday, but i didn't get the advantage over adding member functions to `wavetrack` ?",0,0,0,0.9842384457588196,0.9890738129615784,0.9936461448669434,0.0,accept,unanimous_agreement
1324075017,5138,"in the ""timeandpitchinterface::ispassthroughmode"" commit of #5191, i'm consolidating checks of whether a clip is stretched with the decision in `staffpadtimeandpitch` to be in pass-through mode or not. provided that what i did there is correct, the check here should be `pclip->stretchratioequals(1)`.",0,0,0,0.987712562084198,0.9941326975822448,0.993492066860199,0.0,accept,unanimous_agreement
1324095801,5138,"now that i pay attention to the progress bar, i realize that there are two buttons: stop and cancel. i don't see a difference in behaviour between the two. `effectbase.cpp` uses just `progressshowcancel`, which seemingly we should here too.",0,0,0,0.9743824005126952,0.9708074927330016,0.97682124376297,0.0,accept,unanimous_agreement
1324096486,5138,i'd be interested in knowing the difference between stop and cancel if anyone knows.,0,0,0,0.9756248593330384,0.9589605331420898,0.9255994558334352,0.0,accept,unanimous_agreement
1324108499,5138,"not sure how much this matters, but we get boxes of different look and feel depending on whether we've selected too many samples ![a link] or when selection intersects stretched data: ![a link]",-1,0,0,0.9319860339164734,0.7229519486427307,0.3893823623657226,0.0,accept,majority_agreement
1324112857,5138,"a shortcoming that was already there that this commit should fix: this check should be placed before the `if (repairlen > 128) {` check : if you expand a clip by a factor of 2, and select 100 visible samples, the `repairlen > 128` fails. i've experienced it and it took me time to understand why. a lambda user would probably perceive this as a bug.",0,0,0,0.7457546591758728,0.9354292750358582,0.9659004807472228,0.0,accept,unanimous_agreement
1324134494,5138,"i don't think someone should be able to call `applystretchratio` with an empty interval. i'd rather have ` `!unstretchinterval || unstretchinterval->second > unstretchinterval->first`. then, in effectoutputtracks.cpp, if the interval is empty, call `wavetrack::duplicate` with an `std::nullopt` (or equivalent).",0,0,0,0.9788570404052734,0.9924341440200806,0.9296374917030334,0.0,accept,unanimous_agreement
1324171053,5138,wording sounds good,1,1,1,0.804558277130127,0.8192676901817322,0.7977312803268433,1.0,accept,unanimous_agreement
1324240268,5138,i realize that the `unstretchinterval` arguments of `track::duplicate` and `wavetrack::applystretchratio` have opposite meanings: stretch nothing in the former and everything in the latter. maybe we should remove that argument from `duplicate` and `clone` and let the callers make a call after that to `applystretchratio` if needed.,0,0,0,0.9807391166687012,0.99056214094162,0.9867059588432312,0.0,accept,unanimous_agreement
1324245267,5138,"i think smaller is often better for classes. the function i move into that file was defined in an earlier commit without intrusion into wavetrack. it wasn't necessary. the existing public interfaces were sufficient to define it. so then, why disturb and complicate the interface of wavetrack without need? i'm making the function available for reuse but keeping it separate from the class. i think we may identify more inessential member functions of wavetrack that could also be moved out. it's a big file doing too much. i think it would be better to have a smaller wavetrack class someone could study, which provides just the essential services and maintains important class invariants.",0,0,0,0.7835484743118286,0.9408514499664308,0.9257943630218506,0.0,accept,unanimous_agreement
1324274370,5138,"semantically, the (i) message is wrong in both cases anyway as we error out and abort. the red (x) would be more appropriate here. i have no strong feeling whether to use the big or the small text version. the big version feels a bit vista/7, but i also have no strong desire to see it changed at the moment. the smaller version is the more appropriate to use going forward though.",-1,0,0,0.6818163394927979,0.6899104714393616,0.9351249933242798,0.0,accept,majority_agreement
1324293909,5138,done. i recall there was a difference between stop and cancel for import and export. i didn't look to see if that was conserved after all the refactoring in this release. it was possible to stop with a partially exported file instead of aborting the whole thing and deleting the file.,0,0,0,0.9820094108581544,0.9820833206176758,0.971441924571991,0.0,accept,unanimous_agreement
1324302385,5138,"all right, so change to red, but what's the required change for the looks-and-feel (if any) ?",0,0,0,0.9803179502487184,0.982131004333496,0.9890413880348206,0.0,accept,unanimous_agreement
1324306575,5138,no strong objection to that.,0,0,0,0.9501745104789734,0.8014148473739624,0.8619003295898438,0.0,accept,unanimous_agreement
1325374795,5138,if you get the chance while squashing: `if (bgoodresult && templist)`.,0,0,0,0.9847311973571776,0.9616848826408386,0.9902701377868652,0.0,accept,unanimous_agreement
1325375457,5138,`if (clip->getstretchratio() != 1.0)`. i'll make the change myself.,0,0,0,0.984977960586548,0.9885897636413574,0.9942786693572998,0.0,accept,unanimous_agreement
1325510340,5138,"if nothing is selected, then `mt0 == mt1 == 0` and the assert this commit introduces in `effectoutputtracks::effectoutputtracks` is hit.",0,0,0,0.9875341653823853,0.9950290322303772,0.9943122863769532,0.0,accept,unanimous_agreement
1325553634,5138,"neither of these false returns prevent the output tracks to be committed, actually. maybe we should fix this now, i.e. `bgoodresult = false` if `processone` fails.",0,0,0,0.9848151206970216,0.9845157861709596,0.9902315735816956,0.0,accept,unanimous_agreement
1325690407,5138,this makes a progress indicator for each wave track separately.,0,0,0,0.9855685830116272,0.9822937846183776,0.9938404560089112,0.0,accept,unanimous_agreement
1325694045,5138,instead you could move stretching after this loop. count wave tracks or maybe only the tracks needing a stretch first and construct a progress indicator with that denominator. then another loop to do stretching.,0,0,0,0.9856753945350648,0.9860301613807678,0.9930128455162048,0.0,accept,unanimous_agreement
1325696223,5138,remove that comment line,0,0,0,0.9654815793037416,0.986093521118164,0.9917691946029664,0.0,accept,unanimous_agreement
1325699106,5138,maybe the progress indicator for stretch can be built by a reusable utility function in wavetrackutils.h. it would take another std::function just to report the varying `count` and give back another std::function.,0,0,0,0.986480176448822,0.9927986860275269,0.9872183799743652,0.0,accept,unanimous_agreement
1325700464,5138,"when a zero duration interval is given, will there be a split there or will nothing happen? comment that",0,0,0,0.9776312708854676,0.9869788885116576,0.9931491017341614,0.0,accept,unanimous_agreement
1325702052,5138,does this stretch all or nothing? should be nothing,0,0,0,0.7935662865638733,0.8613250851631165,0.96566641330719,0.0,accept,unanimous_agreement
1325703923,5138,tell me what warning this fixes,0,0,0,0.981070637702942,0.664788544178009,0.9917563199996948,0.0,accept,unanimous_agreement
1325704517,5138,duh,0,-1,0,0.7108088731765747,0.7630913257598877,0.8287663459777832,0.0,accept,majority_agreement
1325709520,5138,`warning c4273: 'audiograph::sink::~sink': inconsistent dll linkage `,0,0,0,0.9371307492256165,0.9909165501594543,0.9892832040786744,0.0,accept,unanimous_agreement
1325710384,5138,nothing.,-1,0,0,0.7621091604232788,0.8902982473373413,0.7564334273338318,0.0,accept,majority_agreement
1325714500,5138,"i'm doing something like that in 4-of-6, where rendering happens also e.g. when joining.",0,0,0,0.9823821187019348,0.9787557125091552,0.9883297681808472,0.0,accept,unanimous_agreement
1325716937,5138,"it's implied: `in which case clips are split at these boundaries before rendering - if rendering is needed` -> empty interval, no rendering needed.",0,0,0,0.984961748123169,0.9945539236068726,0.994172990322113,0.0,accept,unanimous_agreement
1325722459,5138,sounds better. trying that ...,1,0,0,0.4879577159881592,0.8816217184066772,0.887744665145874,0.0,accept,majority_agreement
1326142429,5138,"so i understand that means, yes there is a split?",0,0,0,0.9706525206565856,0.9849880337715148,0.9924851059913636,0.0,accept,unanimous_agreement
1326212380,5138,"i see, it was a duplicate definition of `~sink` which is still defined elsewhere.",0,0,0,0.9863908290863036,0.9889032244682312,0.9923012256622314,0.0,accept,unanimous_agreement
1326212997,5138,good,1,1,1,0.9150943756103516,0.93613862991333,0.8759189248085022,1.0,accept,unanimous_agreement
1326216721,5138,"on further thought, the new utility function could just take a reference to a counter variable instead of a function. it would return a function. of course you would need to use c++14 ""extended capture"" [] syntax to allocate the progress indicator with `make_unique` so it would be destroyed along with the `std::function` when no longer needed.",0,0,0,0.9880274534225464,0.9947332143783568,0.993026852607727,0.0,accept,unanimous_agreement
1326222270,5138,that's a very alert catch. thank you.,1,1,1,0.9703777432441713,0.9939792156219482,0.9842821955680848,1.0,accept,unanimous_agreement
1326226835,5138,you are right. but you have fixed this with another commit that weakened the assertion.,0,0,0,0.9613409042358398,0.9644994735717772,0.9858814477920532,0.0,accept,unanimous_agreement
1326227168,5138,"again, duh",-1,-1,-1,0.541081964969635,0.9755489826202391,0.968958616256714,-1.0,accept,unanimous_agreement
1326227552,5138,later,0,0,0,0.9777056574821472,0.9508756399154664,0.7526319026947021,0.0,accept,unanimous_agreement
1326232006,5138,"not so alert, but through testing. other effects behave like that, i didn't comment them all.",0,0,0,0.7003203630447388,0.7978504300117493,0.9604870676994324,0.0,accept,unanimous_agreement
1326234006,5138,"no, there is no split. i didn't realize this was so unclear - will clarify the comment when i get the chance.",0,0,0,0.9480665922164916,0.8088943958282471,0.9618259072303772,0.0,accept,unanimous_agreement
1327532539,5138,what if output tracks contains un-selected tracks of the sync lock group? they would be analyzed too,0,0,0,0.98803049325943,0.9911609888076782,0.9928426742553712,0.0,accept,unanimous_agreement
1327539472,5138,this looks like an abandoned experiment you don’t want to commit,-1,-1,-1,0.627055287361145,0.6915492415428162,0.9577097296714784,-1.0,accept,unanimous_agreement
1327541723,5138,i checked for the other use of findsilences but that is correctly left unchanged as it already applies to an output track.,0,0,0,0.9875915050506592,0.994530975818634,0.9942692518234252,0.0,accept,unanimous_agreement
928817018,3278,most one-argument constructors should be `explicit`,0,0,0,0.9865238666534424,0.9927493333816528,0.9903130531311036,0.0,accept,unanimous_agreement
928831728,3278,"i see you add two virtual functions to the wrapper when you moved load() into it. i understand virtual `unload` lets wrapper avoid mention of `mdialog`. but i think the last part of `unload`: [code block] should be the responsibility of wrapper, balancing what it does in load. make those lines a non-virtual function; call it in the destructor of lv2wrapper, and also on the failure path of `load()`. and i think you defined virtual `callsetprogram` to avoid dependending on `mslaves`. but `load()` only needs `callsetprogram` to initialize a plug-in or an instance which will not yet have any slaves. so i think you don't need this function, and can instead let `load` call `callsetprogramb`",0,0,0,0.9668195843696594,0.983135461807251,0.9880913496017456,0.0,accept,unanimous_agreement
928835270,3278,might simplify it with an inherited constructor: `using defaulteffectuivalidator::defaulteffectuivalidator `,0,0,0,0.9852782487869264,0.9945089221000672,0.9927531480789183,0.0,accept,unanimous_agreement
928847591,3278,"the commit that stubs `processinitialize` and others is incomplete. my fault for giving an incomplete description for step 4. (now updated) `processfinalize` should also be moved to the instance, and you will know all is correct when the effect also inherits `pertrackeffect` not `statefulpertrackeffect`. please figure out step 4 as a whole and squash all the 4.x commits.",-1,0,-1,0.96808123588562,0.9794636964797974,0.8767324090003967,-1.0,accept,majority_agreement
928882020,3278,"your last commit fails to build because `vstinstance` becomes an abstract class when it inherits `vstwrapper`. i mentioned before why `unload` is the only virtual function you really need, and at this commit, you should define it for `vstinstance`. what part of `vsteffect::unload` should be moved into that function? this part, but not the part mentioning a dialog: [code block] that is because powering on is only something the instance needs to do, not the effect. in fact i think `poweron()` and `poweroff()` should end up in the instance class only. but to do step 4 without step 5, you will first need to move them into the wrapper class. then move them again in step 5. also in step 4, the `poweron()` in `buildfancy()` should be changed to call it on the instance, not on `this`. pass the instance into `buildfancy()` from `populateui()`.",0,0,0,0.9593578577041626,0.990107536315918,0.992128610610962,0.0,accept,unanimous_agreement
928906077,3278,"`vsteffectinstance` will also need to define all the other pure virtuals that were added to `vsteffectwrapper`. some of the new functions should be empty stubs, others should have the lines from the corresponding vsteffect functions moved into them, and data members should be moved too as needed to compile it. or a third possibility is that some members should be moved into vstwrapper and the functions become non-virtual. which of the new functions of `vsteffectinstance` should be empty? i think needidle, updatedisplay, sizewindow all serve ui purposes only so should be empty. what about the rest of them? i'm not decided yet.",0,0,0,0.983958899974823,0.9929641485214232,0.9874818325042723,0.0,accept,unanimous_agreement
928911549,3278,"the virtual functions with non-void return are `gettimeinfo` and `getsamplerate`. if we have a vst handle for the plug-in distinct from the instances, will it need to report meaningful values out of `audiomaster` or will those cases never be invoked? i'm not sure of the answer. but i suggest this, and let experiment see if there is a problem: make default implementations of these non-pure virtuals to return nullptr at 44100. make overrides in the instance class. move the member mtimeinfo to the instance.",0,0,0,0.9686108827590942,0.943510890007019,0.9823716282844543,0.0,accept,unanimous_agreement
928914011,3278,"it's unclear what `getprocesslevel` is supposed to report to the plug-in, but the legacy code in fact never returned anything but 1 because mprocesslevel is never changed. i say move mprocesslevel into the wrapper class and provide a default implementation to the non-pure virtual. maybe we will figure out the need for an override later.",0,0,0,0.9844259023666382,0.9782690405845642,0.9911323189735411,0.0,accept,unanimous_agreement
928915400,3278,i think the `void`-returning `setbufferdelay` and `automate` are meaningful only for instances. make default implementations that do nothing. override them in the instance.,0,0,0,0.9568804502487184,0.9923139214515686,0.99020117521286,0.0,accept,unanimous_agreement
928923914,3278,"hm, making `automate` an override in the instance requires the array of slaves, which should move to the instance, but you can't really to that completely until step 5. i suggest, construct the instance with a reference to the array in the effect, to complete step 4. but then step 5 moves mslaves into the instance.",0,0,0,0.9860910177230836,0.9918519854545592,0.991771399974823,0.0,accept,unanimous_agreement
928927838,3278,"last comment for this round of review! this definition of `getlatencyb` seems weird to me. i think you do it because the `setbufferdelay` virtual function must be defined for all wrappers. but i say again, make it non-pure and let it do nothing in the base class. let the instance override it properly. then, that leaves no need to move the two data members into the wrapper. they belong in the instance only.",-1,-1,-1,0.9786999821662904,0.987898051738739,0.9403050541877748,-1.0,accept,unanimous_agreement
928929153,3278,"ah, one more comment. honestly the last. i don't think this function is necessary.",-1,-1,0,0.6502172946929932,0.9876790642738342,0.9543496966362,-1.0,accept,majority_agreement
929017250,3278,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
929084842,3278,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
929095502,3278,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
929219542,3278,"automate also references mmaster, so to have it a member of the instance, i had to move it to the wrapper. i think i implemented all your suggestions here? please check commit ""4.3 implement some virtuals in the instance""",0,0,0,0.9867488145828248,0.9901691675186156,0.9919920563697816,0.0,accept,unanimous_agreement
929229108,3278,"that's right, i could add the pluginpath as an arg to the instance constructor. done in commit 4.4",0,0,0,0.9826217889785768,0.9900415539741516,0.9950194358825684,0.0,accept,unanimous_agreement
929823312,3278,this call within `unload` is unnecessary.,0,0,0,0.8587101697921753,0.985002100467682,0.9889057874679564,0.0,accept,unanimous_agreement
929832062,3278,this too is unnecessary.,-1,0,0,0.6711031794548035,0.756754994392395,0.5411731600761414,0.0,accept,majority_agreement
929838102,3278,"i commited part of your suggestion in 4.5. `muselatency` can not be moved to the instance, because it is referenced by `vsteffect::showoptions` - any idea on how to solve that?",0,0,0,0.9865488409996032,0.9935657382011414,0.9941980838775636,0.0,accept,unanimous_agreement
929843308,3278,"you did not remove `getlatencyb` or undo the move of the two data members `muselatency`, `mbufferdelay`",0,0,0,0.98891943693161,0.994379222393036,0.9925147891044616,0.0,accept,unanimous_agreement
929844691,3278,"if you examine how mmaster is used, it's really just a boolean that is true when an instance (a vsteffect) is not the master.",0,0,0,0.9823931455612184,0.9897574186325072,0.9884536862373352,0.0,accept,unanimous_agreement
929845571,3278,"you need mmaster in automate, but the wrapper has a no-op override of audomate, so there should be no need to put mmaster in the wrapper. you also moved mtimeinfo into the wrapper but it should be in the instane.",0,0,0,0.9880419969558716,0.9940721392631532,0.9950249791145324,0.0,accept,unanimous_agreement
929861858,3278,just duplicate that boolean in the instance. make it a constructor argument.,0,0,0,0.9850568175315856,0.992627203464508,0.9949684739112854,0.0,accept,unanimous_agreement
929965233,3278,"but `mmaster` is set and used in 3 different `vsteffect` methods - that's why i put it in the wrapper. i probably could rework the code in a way that `vsteffect` does not need it anymore, but i'd leave that for later",0,0,0,0.9810113906860352,0.9907214641571044,0.9913553595542908,0.0,accept,unanimous_agreement
929969259,3278,`mtimeinfo` is again written/used in different methods of `vsteffect`. should i figure out how to move these uses of it from `vsteffect` to `vsteffectinstance` as part of step 4?,0,0,0,0.9887729287147522,0.9951679706573486,0.9943671822547911,0.0,accept,unanimous_agreement
930042679,3278,"now implemented in commit 4.6: i moved `muselatency` and `mbufferdelay` in the instance, leaving a copy of `muselatency` in the effect class which is passed to the instance at construction time.",0,0,0,0.9897361993789672,0.9938887357711792,0.9940313696861268,0.0,accept,unanimous_agreement
930049704,3278,"ok, removed",0,0,0,0.9700809121131896,0.9630083441734314,0.988579511642456,0.0,accept,unanimous_agreement
930049889,3278,"ok, removed",0,0,0,0.9700809121131896,0.9630083441734314,0.988579511642456,0.0,accept,unanimous_agreement
931625588,3278,"please do an interactive rebase, squashing this commit onto the second one, so that all commits are buildable.",0,0,0,0.9861159324645996,0.9909143447875975,0.993811309337616,0.0,accept,unanimous_agreement
932072268,3278,"ok, now done and force-pushed",0,0,0,0.9811422228813172,0.9036078453063964,0.8523727655410767,0.0,accept,unanimous_agreement
932073188,3278,"oops i should delete the ""build fix for osx"" commit - it's only whitespaces now",0,-1,0,0.5321400165557861,0.811427652835846,0.8115667700767517,0.0,accept,majority_agreement
934373560,3278,"i just noticed in review today, the omission of `virtual` from this destructor, though there are other virtual functions. it might look nicer to add it. it's not in fact important, so long as there are never yet any unique or shared pointers to a vsteffectwrapper.",0,0,0,0.9764443635940552,0.9823383688926696,0.9656406044960022,0.0,accept,unanimous_agreement
934374964,3278,"the minimal validator class doesn't yet appear to be necessary for the vst2 transformation, unlike the case for audiounits and vst3. but no harm in keeping the commit that adds it.",0,0,0,0.9690080881118774,0.9893340468406676,0.98872047662735,0.0,accept,unanimous_agreement
934390914,3278,it is not necessary to move these two into the wrapper and i think they will eventually be in the instance.,0,0,0,0.9852184653282166,0.9916493892669678,0.99320250749588,0.0,accept,unanimous_agreement
934392244,3278,the existing `statefuleffect` class might also serve the purpose,0,0,0,0.9879521727561952,0.9924637079238892,0.9944275617599488,0.0,accept,unanimous_agreement
934393090,3278,"the `#include` at top of the file can now be `pertrackeffect.h`, not needing the stateful subclass",0,0,0,0.9863559007644652,0.9947059750556946,0.9944756627082824,0.0,accept,unanimous_agreement
934397810,3278,"an earlier version of this pr copied muselatency into the instance in its constructor. that change should remain. what i should have said too: the block size, and the user block size, should also be passed into the constructor of the instance. also the array of slaves used to be passed as a reference into the constructor. why no longer? do that too.",0,0,0,0.9844207167625428,0.9930657148361206,0.9805054068565368,0.0,accept,unanimous_agreement
934402106,3278,"i don't like `doprocessfinalize`, `doprocessinitialize`, or `processblockb`. too much is stil being done in the wrapper class, and therefore the effect still has more state that it should. the purpose of this pr should be to remove as much effect state as possible, identifying the parts that should be per-instance state. and i think the reason you thought you needed this is: you let the slaves remain vsteffect objects, and did not change the type of the slaves to be vsteffectinstance. but you can do this. the array of slaves remains temporarily in the effect, until step 5 is done. but the virtual functions needed in the slaves are only `processfinalize` and `processblock`, now in the instance class, and other functions already in the wrapper.",-1,0,0,0.8839911818504333,0.81294184923172,0.924477994441986,0.0,accept,majority_agreement
934403493,3278,"i would prefer to have these virtual functions defined non-inline, with comments inside the class about what they do (which is mostly nothing)",0,0,0,0.9631568789482116,0.9848309755325316,0.9423355460166932,0.0,accept,unanimous_agreement
934407047,3278,this function should be marked `override` and its definition should be non-inline,0,0,0,0.9873028993606568,0.9940063953399658,0.9951834082603456,0.0,accept,unanimous_agreement
934443631,3278,"if all is done right, `domakeinstance` and the `const_cast` should no longer be needed. `muselatency` and `muserblocksize` don't need to be member variables of the effect. they can become local variables of this function. but then they must be passed to the constructo of instance which stores them. but this may need to wait until step 5.",0,0,0,0.9866707921028136,0.994674801826477,0.9892625212669371,0.0,accept,unanimous_agreement
935610976,3278,correct. now moved back in the effect.,0,0,0,0.9833751320838928,0.984575629234314,0.9888315200805664,0.0,accept,unanimous_agreement
935618589,3278,"hmm... `statefuleffect` does not inherit `pertrackeffect` though. i gave it a try anyway, and i got compiler errors. never mind, this is only a temporary class that should disappear at point 5.",0,0,0,0.7862867116928101,0.5252181887626648,0.8217426538467407,0.0,accept,unanimous_agreement
935629969,3278,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
935638171,3278,"muselatency, block size, user block size are now passed into the constructor of the instance and saved there. i chose not to pass the array of slaves into the instance constructor, because i now turned slaves from effects into instances - given that, it seems conceptually wrong that an instance should be interested in all other instances.",0,0,0,0.8500169515609741,0.9902093410491944,0.9838247299194336,0.0,accept,unanimous_agreement
935639151,3278,"i now implemented the ""middle class"" vstinstancebase as we discussed, please have a look there.",0,0,0,0.9830549955368042,0.9617825746536256,0.9925646781921388,0.0,accept,unanimous_agreement
935639803,3278,i made them inline now.,0,0,0,0.9853699207305908,0.9793394207954408,0.989487648010254,0.0,accept,unanimous_agreement
935643373,3278,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
935644368,3278,"i now pass them to the instance constructor. as you said, later in step 5. i could remove them from the effect.",0,0,0,0.9867361187934875,0.989515781402588,0.995342254638672,0.0,accept,unanimous_agreement
935685405,3278,"well actually at this point i need it, because i pass the instance it belongs to in its constructor, to retrieve it later in ::showclientinterface",0,0,0,0.9816277623176576,0.9807569980621338,0.993248701095581,0.0,accept,unanimous_agreement
935691503,3278,i do not yet see a force-push with that update,0,0,0,0.9522820711135864,0.9541226029396056,0.984466314315796,0.0,accept,unanimous_agreement
943325912,3278,"this is the one virtual function of `vsteffectwrapper` that we can define in the base and then not override again, or so we think now. so the first commit might also remove `vsteffect::getprocesslevel()`",0,0,0,0.9869831800460817,0.9947399497032166,0.9935947060585022,0.0,accept,unanimous_agreement
943357199,3278,is this part of the comment still correct?,0,0,0,0.9798988103866576,0.9897288084030152,0.9918628931045532,0.0,accept,unanimous_agreement
943372086,3278,"i did not mention this before, but if you look for the analogous uses of `storesettings` on audiounit instances, one of them happens here. and `storesettings` now happened here too, because `processinitialize` did it next. call `processinitialize` not `doprocessinitialize` below; remove the duplicate steps above (beginning and end of set-program and what comes between, and also the storing of chunks).",0,0,0,0.9887977242469788,0.9932346940040588,0.9912086725234984,0.0,accept,unanimous_agreement
943385375,3278,"automate() is changed to use `callsetparameterb`, losing the loop over slaves. that seems like a wrong change in side-effects. you should call `callsetparameter`. but that doesn't exist in `vstinstancebase`. the fix should then be: move automate() to the instance class in step 4, which is what the header file says should happen. also move `callsetparameter` (which includes the loop) into instance, out of the effect object. but then `vsteffect::onslider` won't compile. but the solution for that will be, the validator object will call `callsetparameter` on the instance. that function will ultimately be in the validator. so make this temporary fix here in step 4: let the effect retain a pointer to the last constructed validator. assume there is never more than one valdator at once and that its lifetime will include any call to `onslider`, which will happen only while a non-fancy, plain ui dialog is open.",0,0,0,0.8508365154266357,0.9853702783584596,0.971950113773346,0.0,accept,unanimous_agreement
943390744,3278,"can the distinction between `callsetprogram` and `callsetprogramb` now be eliminated? i think so, but it needs some longer explanation from me.",0,0,0,0.9814029932022096,0.9889528751373292,0.9929662942886353,0.0,accept,unanimous_agreement
943418946,3278,i think there is no longer any need to make `doprocessfinalize` a separate function.,0,0,0,0.9825855493545532,0.9760913252830504,0.981545627117157,0.0,accept,unanimous_agreement
943428303,3278,"do not do this. we don't want to do mutex locking and unlocking in a worker thread. we will trust `settings` to be a copy of settings, properly updated in an atomic fashion, by the `effectsettingsaccess` object. yes, strictly speaking you are right that a data race on the `vsteffectsettings` stored in the effect, is possible while the transition to statelessness is not complete, and you might remove this mutex locking then. but i think that is excessive caution. i didn't transform audiounit effects with similar caution and i don't recommend you do it for vst.",-1,0,0,0.8344893455505371,0.9123611450195312,0.6726642847061157,0.0,accept,majority_agreement
943431694,3278,"your step 5.1 removes these lines. i already explained how it should be done in step 4, eliminating the need for two versions of the set-parameter function.",0,0,0,0.9859094023704528,0.9894108176231384,0.9953063130378724,0.0,accept,unanimous_agreement
943435828,3278,"you made these changes in 5.1. i don't like the mutex. does experiment show that this is called on the main thread only in response to slider changes? i need the answer to that, before i can recommend the correct thing to do.",-1,-1,-1,0.9767794013023376,0.959138035774231,0.9345080852508544,-1.0,accept,unanimous_agreement
943440357,3278,"there is nothing in the instance now corresponding to `process`. instead you trust `pertrackeffect` to do destructive effect processing in its `process`, calling the `processblock` function of the instance. and after other recent refactorings, that happens in member functions of an `effectstage` object.",0,0,0,0.9828595519065856,0.9949758052825928,0.9933330416679382,0.0,accept,unanimous_agreement
943447380,3278,i think step 5.3 makes more sense squashed with step 4,0,0,0,0.9743524193763732,0.96792733669281,0.9770376682281494,0.0,accept,unanimous_agreement
943450530,3278,"this change might be squashed onto step 4, making 4 more correct",0,0,0,0.9852213263511658,0.977940797805786,0.9915646314620972,0.0,accept,unanimous_agreement
943455507,3278,more experience tells you that the division of responsibilities between instance and effect should change. redo the earliest commits to reflect this. so i think you are saying automate really is for the main thread only?,0,0,0,0.9790450930595398,0.9710146188735962,0.9908889532089232,0.0,accept,unanimous_agreement
943518826,3278,"removing it at this stage is not so simple, because doprocessfinalize is in vstinstancebase and it is used by vsteffect; but vsteffect does not know vsteffectinstance... we'd need to wait until step 5",0,0,0,0.9775547981262208,0.9309790134429932,0.9846242666244508,0.0,accept,unanimous_agreement
945551468,3278,ok done that in commit 4.2 (yet to be pushed while i am writing this) - you will see that to make it work i also had to add a call to `fetchsettings` inside `automate`.,0,0,0,0.9865411520004272,0.9889763593673706,0.9931107759475708,0.0,accept,unanimous_agreement
945572258,3278,"the short answer is: not, when doing realtime processing, at least at this stage (i mean, step 4) why? i tried the following: 1) place breakpoint in callsetprogram 2) choose a factory preset: when we reach callsetprogram, mslaves is empty so if we did only destructive processing, then we could go with callsetprogramb only (i.e. the version which ignores slaves) but: if i start realtime processing and then choose a factory preset, when i reach callsetprogram, mslaves is not empty - it has one item and i guess it is the item doing the realtime processing.",0,0,0,0.9323847889900208,0.9803336262702942,0.9796754121780396,0.0,accept,unanimous_agreement
945847407,3278,"i was wrong when i said that automate has to belong to the instance. it must indeed belong to the effect, because changes in sliders are intercepted by the effect vst callback. that being said, yes it is still wrong that automate() loses the loop over slaves. in commit 4.3 i fix that by having automate use callsetparameter and that required that minstances move to the instancebase class.",0,0,0,0.9441924691200256,0.9762212634086608,0.8941851258277893,0.0,accept,unanimous_agreement
946051875,3278,"as i told you during our talk, without introducing this mutex, i always ran into a crash when i moved a slider while processing realtime. this is because msettings was written in the main thread (when moving the slider), while it was read in the worker thread. but i will add a comment about the mutex being a temporary thing until the validator is fully implemented.",0,0,0,0.9710512757301332,0.945185363292694,0.9818286895751952,0.0,accept,unanimous_agreement
946052670,3278,please see my comment above [a link],0,0,0,0.9799757599830629,0.9424729943275452,0.9947742819786072,0.0,accept,unanimous_agreement
946085934,3278,"ok, done in commit 4.5",0,0,0,0.9867454171180724,0.9871473908424376,0.9916175007820128,0.0,accept,unanimous_agreement
946843636,3278,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
951888329,3278,"""validator""",0,0,0,0.9886801242828368,0.9882223010063172,0.9936328530311584,0.0,accept,unanimous_agreement
951909361,3278,"step 5.1 adds this assignment, but never uses the member, and never reassigns it back to null. but i'm still progressing through the 5.x commits, which may be squashed into one if i approve them.",0,0,0,0.983166754245758,0.9811752438545228,0.9902772903442384,0.0,accept,unanimous_agreement
952310838,3278,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
952325909,3278,"correct. i introduced `mvalidator` as a way to call `callsetparameter` on the validator's instance, in `::onslider`, as you previously suggested (or so i understood). then i found out that things work also without that call (and i left the code there commented out) so i could delete `mvalidator` now. shall i do it?",0,0,0,0.9848405718803406,0.9903427362442015,0.9822001457214355,0.0,accept,unanimous_agreement
952394641,3278,"in step 5.3, add: `subeffect.load()` to preserve the behavior.",0,0,0,0.9891496300697328,0.9947422742843628,0.9955462217330932,0.0,accept,unanimous_agreement
952408298,3278,"in step 5.4, think `poweron` and `poweroff` should not move to wrapper. they are only for the instance. power comes on, only in an instance. note `vsteffinstance.poweron()` -- it's not done on this. but there are calls to `poweroff` done on the effect. the right thing is to change those. where `closeui` does `poweroff`, do it instead to the instance stored in the validator. which is why `vsteffect::mvalidator` finds a use after all. als in `closeui`, reassign `mvalidator` to null when done. the `poweroff()` in the unloading of the effect should just be deleted.",0,0,0,0.9805821776390076,0.9920573830604552,0.987063765525818,0.0,accept,unanimous_agreement
952410181,3278,good catch! ok,1,1,1,0.9907536506652832,0.9954078793525696,0.9965233206748962,1.0,accept,unanimous_agreement
860817187,2867,"this changes the format for the monolithic ""sprite sheet"" for dropping in a custom theme. after merging this we must remember to give the updated sheet to put in the wiki page. if more changes to this file are expected during this release cycle, then that can wait until they are all done.",0,0,0,0.9875948429107666,0.9908983111381532,0.9943601489067078,0.0,accept,unanimous_agreement
860820331,2867,"""which simplify""",0,0,0,0.9704501628875732,0.9831101894378662,0.9925150275230408,0.0,accept,unanimous_agreement
860825525,2867,"you include this for `evt_theme_change` and not `prefspanel`? as you might have guessed, that is a usage of wxevent that i would rather simplify with observer. in fact, i have a commit waiting in my big branch of module extractions doing just that. i should cherry-pick it, and push it onto your branch, and let you merge it with this branch.",0,0,0,0.983815848827362,0.9855623245239258,0.9913152456283568,0.0,accept,unanimous_agreement
860830707,2867,"perhaps say ""which decorate given base classes with simplified theme support"" this is sort of a ""decorator pattern"" only it inserts behavior with inheritance, not object composition.",0,0,0,0.9854610562324524,0.9925354719161988,0.9860592484474182,0.0,accept,unanimous_agreement
860834913,2867,i'm more hesitant about using `noexcept` liberally. i saw a cppcon talk by john lakos describing reasons for caution. i need to review it again. i mostly use it only when i know something must be called inside a destructor. i look at this and i see it doesn't have a bounds check on the array access.,-1,-1,0,0.5838305950164795,0.8624061346054077,0.8263319730758667,-1.0,accept,majority_agreement
860836592,2867,"given that the index is in bounds (might say it with a `` comment), should this return a reference to a guaranteed non-null object? perhaps. but maybe warn too about invalidation in case states are added or removed.",0,0,0,0.9881181120872498,0.9933699369430542,0.9932543635368348,0.0,accept,unanimous_agreement
860837463,2867,use `std::rotate` to simplify this,0,0,0,0.9876046180725098,0.99407958984375,0.9940298795700072,0.0,accept,unanimous_agreement
860839214,2867,"and because this does all that `swap` can do, and more -- then remove `swap`",0,0,0,0.9861412048339844,0.9889028668403624,0.9934712648391724,0.0,accept,unanimous_agreement
860842206,2867,failing linux build wants (at least) `#include `,0,0,0,0.7950676083564758,0.9833298325538636,0.9443920850753784,0.0,accept,unanimous_agreement
860848516,2867,"good comment, saying what they types don't alone imply",1,1,1,0.9290092587471008,0.9745089411735536,0.986165165901184,1.0,accept,unanimous_agreement
860853746,2867,"please put this new file pair directly into `src` not `src/widgets` the sub-folder division of `src` was never really ever done on any consistent principle, whereas the coming modularization will only move files again. the seeming intention of `src/widgets` is for reusable, and reused, windows like `ruler` but this looks like it will only ever have one use, closely associated with projectwindow.",0,0,0,0.9844422936439514,0.9873501658439636,0.9929488897323608,0.0,accept,unanimous_agreement
860881143,2867,`#include ` needed to build non-windows,0,0,0,0.984283208847046,0.9927417039871216,0.9938010573387146,0.0,accept,unanimous_agreement
860890600,2867,just default it?,0,0,0,0.9857124090194702,0.978113889694214,0.992744207382202,0.0,accept,unanimous_agreement
860976273,2867,`name` is not used,0,0,0,0.9755873084068298,0.9912559986114502,0.9946168065071106,0.0,accept,unanimous_agreement
860978214,2867,"maybe you will want to set the window name, for reasons of the screen reader, if perhaps these things can be tabbed to -- talk to about it. in fact, accessibility for this new ui might need to be another issue with another pr, involving wxaccessible classes -- but i don't want to delay merge of this one for that.",0,0,0,0.96662038564682,0.9786183834075928,0.985542058944702,0.0,accept,unanimous_agreement
861071667,2867,"proof? if none, make a `` comment to license it, but then examine the calls to this function , where the burden of proof is then shifted.",0,0,0,0.9876689314842224,0.992669939994812,0.9907958507537842,0.0,accept,unanimous_agreement
861072688,2867,"as i said elsewhere, what you assert here, should also be an explicitly commented precondition of the function called here.",0,0,0,0.985804319381714,0.9898514747619628,0.9924241304397584,0.0,accept,unanimous_agreement
861080679,2867,"or else, just return and do nothing if the condition fails. other event handlers here do that.",0,0,0,0.9721221327781676,0.9845958352088928,0.9862050414085388,0.0,accept,unanimous_agreement
861084877,2867,do you need a null check on the return value?,0,0,0,0.9841057658195496,0.9920380115509032,0.9938482642173768,0.0,accept,unanimous_agreement
861091914,2867,"another assumption of non-null ness, prove how?",0,0,0,0.976773738861084,0.9723544716835022,0.990653932094574,0.0,accept,unanimous_agreement
861098456,2867,assuming not null again as at 374,0,0,0,0.9804389476776124,0.9868430495262146,0.9887657761573792,0.0,accept,unanimous_agreement
861126575,2867,a future pr?,0,0,0,0.9593895673751832,0.9880546927452089,0.9885435104370116,0.0,accept,unanimous_agreement
861128339,2867,might simplify with comparison of two std::pairs?,0,0,0,0.9844879508018494,0.9945977926254272,0.9929465651512146,0.0,accept,unanimous_agreement
861129183,2867,"correct filer by real-time capability, ok",0,0,0,0.9849975109100342,0.862514317035675,0.9799191951751708,0.0,accept,unanimous_agreement
861129419,2867,filter,0,0,0,0.98113614320755,0.963556170463562,0.8939088582992554,0.0,accept,unanimous_agreement
861130866,2867,quadratic insertion sort instead of n log n std::sort? shrug,0,-1,0,0.9723443388938904,0.5818955302238464,0.9895688891410828,0.0,accept,majority_agreement
861133308,2867,i imagine different sorting and grouping criteria might be future demands. do what now? nothing but think about it,0,0,0,0.8916528224945068,0.8315035700798035,0.9487514495849608,0.0,accept,unanimous_agreement
861134236,2867,and?,0,0,0,0.9706349968910216,0.9768803119659424,0.992021143436432,0.0,accept,unanimous_agreement
861136261,2867,"can the return type of this function be identifier then, not naked wxstring?",0,0,0,0.9892498254776,0.9946131110191344,0.9934804439544678,0.0,accept,unanimous_agreement
861137058,2867,indent,0,0,0,0.8967059850692749,0.8570648431777954,0.9154122471809388,0.0,accept,unanimous_agreement
861401952,2867,"an alternative possibility: don't define this event. don't post it from realtimeeffectcontrol. instead, make the realtimeeffectlist a `publisher` of messages when its item list changes -- analogous to what tracklist does. (don't delay events with callafter as tracklist does for legacy reasons. let listeners callafter to delay their reactions as they need.) then the realtimeeffectswindow subscribes. this way of doing it is more consistent with existing designs and would allow other subscribers if we ever need them, which won't need to cooperate specially with realtimeeffectcontrol.",0,0,0,0.9612957239151,0.9854192733764648,0.9871619343757628,0.0,accept,unanimous_agreement
861402675,2867,i like this solution better for the possible future expansions. but you can do just enough for present needs: let the list publish only deletions. we might generalize for additions and permutations later.,1,1,1,0.9189042448997498,0.5233445763587952,0.5370774865150452,1.0,accept,unanimous_agreement
861404043,2867,"for these other event types, closer coupling of this window and the item controls is proper.",0,0,0,0.9846925735473632,0.987356424331665,0.9921361207962036,0.0,accept,unanimous_agreement
861417115,2867,"good, now also state it as a postcondition comment for `addstate`",0,0,1,0.7349905967712402,0.515742838382721,0.7228761315345764,0.0,accept,majority_agreement
861421048,2867,"i see now that there is a serious problem in this design. there should be undo and redo of changes to the effect list. this is not yet part of this pull request. i anticipated the need at commit 5da76c6eae0aceb1823be43bcb9009aa20ead755 with some support. if this window persists through pushes and pops of the undo stack, then storing this pointer is the wrong thing. it might point into a version of the state that is in undo history but not the present project state, and it might become a dangling pointer if redo states are destroyed after an undo and then other edits. should the parent window just rebuild itself entirely whenever the undo stack is pushed or popped? maybe that's easiest to do. just subscribe to events from undomanager. in fact, you don't have a choice. if you can't predict at all how the composition of the realtimeeffectlist changes with undo or redo, you just have to read it all and rebuild. okay, that eliminates the dangling pointer danger.",0,0,-1,0.8527915477752686,0.8778228163719177,0.7032485604286194,0.0,accept,majority_agreement
861421643,2867,"i see uses of `translation` here and elsewhere when building buttons. that means one of these windows should be a `prefslistener` and recreate those labels, in case the user changes the language in interface preferences.",0,0,0,0.988957703113556,0.9926540851593018,0.992967963218689,0.0,accept,unanimous_agreement
861421997,2867,this side-effect on the effect list should cause a push of the undo history. see my previous comment mentioning undo/redo matters.,0,0,0,0.9775069952011108,0.9902759790420532,0.9935938715934752,0.0,accept,unanimous_agreement
861422173,2867,this too needs an undo push.,0,0,0,0.9517158269882202,0.9884699583053588,0.9841485619544984,0.0,accept,unanimous_agreement
861422400,2867,"and here, another undo push.",0,0,0,0.9831101894378662,0.9882105588912964,0.9588134288787842,0.0,accept,unanimous_agreement
861422807,2867,"what i said there: the list window needs to subscribe to the undomanager so it can rebuild after undo and redo commands that might change the current list of effects, to avoid pointers into the wrong version of the realtimeeffectlist.",0,0,0,0.9754822850227356,0.9675930738449096,0.9910051822662354,0.0,accept,unanimous_agreement
861425681,2867,"i see no callback bound to this toggle button. maybe bind an empty lambda with one more explicit todo comment, like other todos in this commit.",0,0,0,0.986200988292694,0.981303334236145,0.9896071553230286,0.0,accept,unanimous_agreement
861426747,2867,"let's also have an `else` and another todo comment in case of other ids, so one effect can replace another. let's make as many todos as we can to make clear how much work remains.",0,0,0,0.9853367209434508,0.9908028841018676,0.9939789772033693,0.0,accept,unanimous_agreement
861431754,2867,"still more undo stack pushes are needed, for changes of settings in an effect stack. but this doesn't work -- as you may have known from testing. i think it was something you needed to discuss with me, but didn't find the opportunity? it doesn't work because for realtime capable effects, a non-modal dialog is opened, and modifysettings exits before the dialog closes. maybe then, the individual effect has other modifysettings calls in its event handlers, so it sort-of works. but not as you might expect from reading this code, and it won't interact correctly with undo and redo. how to fix this then? see the example of `effectmanager::promptuser` and `macrocommands::promptforparamsfor` which calls it, while inside this scope object's lifetime: [code block] that forces effect dialogs to open modally, even for realtime effects, if you are editing a macro, which is how you can step through those functions and understand. but they change the global effectsettings for the effect, which is of course not the right thing here.",0,0,0,0.942633867263794,0.8463716506958008,0.977191686630249,0.0,accept,unanimous_agreement
861433554,2867,"another question to ask is whether all these things requiring pushes and pops of the undo stack are safe to do while playback is in progress. i think we surely want that -- one hope is that you listen as you change settings of a single effect, or even change the composition of the effect list. but now i doubt whether all is set up correctly in the audio engine for that, both to avoid dangling pointers and crashes, and to communicate changes of the sequence of effects properly inter-thread. the limited thing that i know was anticipated by leland's work, is the powering on and off of individual effects, which is what the suspending and resuming of states is for. and the point of the effectsettingsaccess class i developed is to communicate changes of settings of an individual effect correctly -- what this piece of code here will do. but adding, deleting, and permuting effects? or changing the whole stack at one with undo and redo? i must think.",0,0,0,0.8670993447303772,0.9581851363182068,0.6826270222663879,0.0,accept,unanimous_agreement
861441863,2867,"i see what this subscription is doing and i understand why you need something like it. i question whether this is exactly what we will want. first, sometimes multiple tracks are selected, as when you select all. this might, wastefully, visit this function once for each track, rebuilding the window many times, and finally leaving it as for the last selected track. would it be better to scan the track list for a unique selected track -- and empty the effect list if there is no such track? but then -- as i pointed out long ago, critiquing the design proposals -- there is a distinction between selection, which is non-exclusive, and focus (indicated by the yellow border), which is. i think it makes more sense to show the effect stack for the focused track, which means you should listen for what is now the `evt_track_focus_change` event (but, like theme change, another thing i want to rewrite with observer, and i also have a waiting commit for that, which i can cherry-pick and push onto your branch). will surely want to test this new feature and be satisfied with keystroke navigation, and again, the notion of a ""focused"" object, rather than a ""selected"" one, is in general relevant to the targeting of commands given by keystroke. see for instance `ontrackmenu` in `trackmenus.cpp` which handles shift+m in default key bindings. that keyboard shortcut opens the track drop-down menu for the (unique) *focused*, not selected, track.",0,0,0,0.9136605262756348,0.9533023834228516,0.6819429993629456,0.0,accept,unanimous_agreement
861648672,2867,"is there a current design specification for the effects panel which includes the keyboard navigation? i have asked this question on [a link] but have not yet received a reply. concerning whether the effects panel show the effects stack for the focused or selected track. the normal pattern is for a side panel to show some property of a selected item in a list. however, i don't think it fits the current case. a user might want to look at the effect stack without changing which track or track was selected, and each audio track having its own effect button implies this. note however, that when a user presses an effect button, then i presume the intention is that the focus is automatically moved to the effects panel. this means that the track is not the focus and won't have a yellow outline. are the designers happy with that? concerning the list of effects in the effects panel. when the figma designs of this were originally shared by jouni, the keyboard navigation of the list of effects, including the controls in each item, was specified as just a series of tabs. i commented on discord at the time that it would be much better if the keyboard navigation was appropriate for a list. unfortunately, nobody replied to that comment. it is still my view that the list of effects should have keyboard navigation which is appropriate for a list where each list item contains a number of controls, and in addition, the list is read as being a list by users of screen readers. given that these requirements have implications for how the code for the list is structured, first writing it so that works only with mouse interaction, and then ensuring that it works properly with keyboard interaction and screen readers will probably end up involving more work than if it was written with all types of interaction from the start.",0,0,0,0.9763251543045044,0.979171097278595,0.9726497530937196,0.0,accept,unanimous_agreement
861704031,2867,also possible: the sidebar changes only if you press effects on another track. (or delete that track) the effects button of that track only is painted as down.,0,0,0,0.9868249297142028,0.9877749681472778,0.9929921627044678,0.0,accept,unanimous_agreement
874889410,2867,added a commetary and replaced pointer with reference type,0,0,0,0.98780357837677,0.9911733269691468,0.9950769543647766,0.0,accept,unanimous_agreement
874890343,2867,"i'll skip it, as you've already done that",0,0,0,0.9641206860542296,0.9790014028549194,0.9866821765899658,0.0,accept,unanimous_agreement
874923721,2867,"perhaps, what is implemented is not what was asked in the task description actually.",0,0,0,0.9768692851066588,0.9737370014190674,0.9593071937561036,0.0,accept,unanimous_agreement
874924172,2867,there is no link yet),0,0,0,0.8538813591003418,0.969814121723175,0.9779224395751952,0.0,accept,unanimous_agreement
875835230,2867,"there is no much sense in doing so: `movablecontrol` is a wxwidgets based component, qt has it's own component drag&drop logic",-1,0,0,0.7231273651123047,0.9878224730491638,0.9827186465263368,0.0,accept,majority_agreement
876172182,2867,"i do not understand your response. i think you did not understand my objection. changes in the realtimeeffectlist — a ui neutral internal entity— should be published with our ui neutral publisher class, as is also done for changes of the tracklist. then this new ui works more indirectly: one drag and drop changes the realtimreffectlist object, then it publishes its message, then the other control reacts. but then it is also possible for other things that need to be kept consistent with the real-time effect list to react also. i do not want to use qt signals and slots outside of a ui layer of code built on a toolkit neutral layer.",-1,-1,-1,0.7727185487747192,0.6890989542007446,0.8283470273017883,-1.0,accept,unanimous_agreement
878047364,2867,"you repeated ""message""",0,0,0,0.9852860569953918,0.9735316634178162,0.9949235320091248,0.0,accept,unanimous_agreement
878048128,2867,"""number"" would be a better word than ""amount"" (for a count-noun, not a mass-noun)",0,0,0,0.968639612197876,0.9916692972183228,0.98616760969162,0.0,accept,unanimous_agreement
878076191,2867,"maybe `std::variant` is the more proper thing when the alternatives are not open-ended but instead all enumerated here :shrug: to my mind, `std::any` is more appropriate where there is open-endedness (if, say, realtimeeffectlistmessage was the root of a class hierarchy) or simply make it a numerical field that is ignored for the other message types.",0,0,0,0.954910695552826,0.9632743000984192,0.8875402808189392,0.0,accept,unanimous_agreement
878089468,2867,"you need to update the text of labels and buttons for changes of language -- and deriving from `prefslistener` is how that is done. it is not sufficient to update the labels when the theme changes -- and i don't understand why it is necessary then either, but maybe i don't know. ah, but is it that the dismissing of the preferences dialog coincidentally sends theme change and prefslistener messages together, always? so maybe this appears to work when you test change of language, but still i don't think it is done properly. and who knows, we might invent a different ui for language change some day that doesn't have this coincidence.",0,0,0,0.9177879095077516,0.544613242149353,0.9537681937217712,0.0,accept,unanimous_agreement
878090547,2867,see what was done in commit 20ace31,0,0,0,0.9879996180534364,0.991133153438568,0.9945783615112304,0.0,accept,unanimous_agreement
878106163,2867,please squash this and other compilation fixes into earlier commits,0,0,0,0.9853450655937196,0.9853132367134094,0.9952496290206908,0.0,accept,unanimous_agreement
878108968,2867,"this breaks the macos build. only the pointer-valued overload of `any_cast` is available, with our minimum targeted version.",0,0,0,0.9263312816619872,0.9856685400009156,0.9804101586341858,0.0,accept,unanimous_agreement
878353711,2867,"i didn't think it was a coincidence, as i understand making a change to a single parameter in a settings group (""interface"" or ""effects"") updates values for all parameters in that group",0,0,0,0.9628816843032836,0.975036084651947,0.9494962692260742,0.0,accept,unanimous_agreement
879295413,2867,i18n-hint comment does not match the string which has three format directives.,0,0,0,0.9698744416236876,0.9890093207359314,0.9797180891036988,0.0,accept,unanimous_agreement
879297182,2867,should you add 1 to from and to? users may understand 1-based indices better.,0,0,0,0.9828816652297974,0.9913932085037231,0.9930413961410522,0.0,accept,unanimous_agreement
879318802,2867,"the changes for undo and redo look good, though incomplete. replacement of one effect with another is not yet implemented and will also push an undo state. changing on/off states will use `modifystate` not `pushstate`. changing settings after clicking ok the settings dialog should also push an undo state. the details of the short and long user visible messages for undo and redo may disagree with the specifictaion, but maybe the specification will be corrected. none of what i just wrote here will block this pull request.",0,0,1,0.858613133430481,0.9798631072044371,0.7655551433563232,0.0,accept,majority_agreement
879324057,2867,this pair of files is still in `src/widgets` and i would rather just put it under `src` pending other folder reorganizations later.,0,0,0,0.987978458404541,0.9949435591697692,0.9926519989967346,0.0,accept,unanimous_agreement
879354145,2867,"this still subscribes to selection change efents, but we have agreed that is should instead be focus changes. also i suggest that the effects window might subscribe itself rather than relying on `projectwindow` to make the changes.",0,0,0,0.9879485368728638,0.9901356101036072,0.9947786331176758,0.0,accept,unanimous_agreement
879361713,2867,"""drophintlineheight""",0,0,0,0.920199453830719,0.9915116429328918,0.9932936429977416,0.0,accept,unanimous_agreement
879373586,2867,"i see that this call pops a menu and returns a plugin id which is ignored. so it's still to do: substitute one effect for another in the list, and also push an undo item. this pr might be merged with this known incompleteness. (should have a todo comment)",0,0,0,0.9875659346580504,0.9890813827514648,0.992111086845398,0.0,accept,unanimous_agreement
879386393,2867,when the button is pressed to change the track whose effect list is shown -- then the track focus should also be changed to that track.,0,0,0,0.986273467540741,0.9911065697669984,0.9931032657623292,0.0,accept,unanimous_agreement
879585955,2867,"i tested this, and undo/redo did not have the desired effect, and i figured out why. `mtrack` is a shared pointer, so there isn't a danger of a dangling pointer. however, it must be reassigned when the undo state is pushed or popped, so that it points at a track in the current version of the track list. see `track::getid()` for an identifier of a track across undo/redo states. this window needs to store that id, then find that id again with each undo and redo. it may also be necessary to `refresh()` after `settrack()`.",0,0,0,0.9798073768615724,0.9879139065742492,0.982301950454712,0.0,accept,unanimous_agreement
879613557,2867,"here and in `reloadeffectlist`, please check that the track is a wavetrack before getting the `realtimeeffectlist`, just to avoid creation-on-demand of a useless, empty list in case the track is of non-wave type.",0,0,0,0.9874055981636048,0.9924778938293456,0.9917365908622742,0.0,accept,unanimous_agreement
879754655,2867,"hm, seems like i've lost part of my changes during commit history rewrite",-1,-1,0,0.7124722003936768,0.5719021558761597,0.9322044849395752,-1.0,accept,majority_agreement
879918652,2867,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
879936195,2867,"but turns out this is not neccessary. `projectwindow` gets notification from `trackfocus` about changed focus, and given that focus now points to a new track instance `realtimeeffectpanel` updates anyway",0,0,0,0.986296772956848,0.9899082183837892,0.9930580854415894,0.0,accept,unanimous_agreement
879938092,2867,"shouldn't be the case as if we do not show ""effects"" button for other types of tracks",0,0,0,0.97359961271286,0.974660575389862,0.9813793897628784,0.0,accept,unanimous_agreement
880259917,2867,but changing track focus using the up and down arrow keys is another way to change the contents of the sidebar.,0,0,0,0.9836140871047974,0.9874792098999025,0.9931921362876892,0.0,accept,unanimous_agreement
880273742,2867,"didn't think of that, thanks. check is already there",1,1,1,0.9189634323120116,0.7030712962150574,0.9890407919883728,1.0,accept,unanimous_agreement
880280498,2867,"should it also call through to the base class’s updateprefs? i think yes in general, but it might call through to a pure virtual. which might be given a default do nothing implementation. (did you know that a pure virtual can have a definition but also remain pure? yes it can, so subclasses must define it to be constructible, while qualified calls to the function are also allowed.)",0,0,0,0.978644609451294,0.9941269159317015,0.9922654032707214,0.0,accept,unanimous_agreement
880285622,2867,"ditto. preference changes might be written to send messages like theme changes, but it was implemented this way with virtual functions before observer existed. that rewrite would eliminate the problem of missed call throughs but would be the bigger work now.",0,0,0,0.946195423603058,0.9789859056472778,0.9189125895500184,0.0,accept,unanimous_agreement
880317073,2867,"""an individual""",0,0,0,0.9741111397743224,0.9859052300453186,0.9928300976753236,0.0,accept,unanimous_agreement
880326434,2867,"i understand you need to repaint a track if effects are inserted or removed in its stack, because the button may need to change its appearance when the effect list becomes empty or becomes nonempty. i do not see why you need to refresh the whole panel when there are changes in the global list of effects. no harm would be done, but a needless repainting.",0,0,0,0.9172288179397584,0.910950779914856,0.9203011989593506,0.0,accept,unanimous_agreement
880340197,2867,"you also took this header file out of `src/widgets` actually i don't mind this file being in that folder, because it is more general-purpose and reusable. i only wanted `realtimeeffectpanel.h` to move out of it. but this file can stay in `src` too",0,0,0,0.9101425409317015,0.9848366379737854,0.9410816431045532,0.0,accept,unanimous_agreement
880341996,2867,"will that line un-collapse the effects panel if it was hidden, whenever i use the up and down arrow keys? maybe not desirable if so.",0,0,0,0.9543423056602478,0.941512167453766,0.9418088793754578,0.0,accept,unanimous_agreement
880350123,2867,still misspelled,0,0,0,0.9196407794952391,0.8251609802246094,0.908955454826355,0.0,accept,unanimous_agreement
880352516,2867,were,0,0,0,0.9535436034202576,0.8796284794807434,0.9879379868507384,0.0,accept,unanimous_agreement
880378065,2867,"i don't understand why you changed mproject to a `wxweakref` but still assume it is non-null anyway. is there any reason to think the project will ever be destroyed before the associated effects window? did your experiments suggest that is so? see `projectmanager::onclosewindow` where there is some care about the sequence of destruction of things. but note the projectwindow is destroyed there (which should destroy its descendants), just before the last line which destroys the project object. so i think there is no need at all for wxweakref for safety.",0,0,0,0.956155002117157,0.96816223859787,0.9413213729858398,0.0,accept,unanimous_agreement
880382503,2867,"see `realtimeeffectlist::handlexmlendtag` for some answer to your question. yes, there is a check on success of `geteffect` at the time the project is reopened, which we can assume, i think, follows all plugin initializations at startup. and i think there is then no way to insert an effect from a plug-in that does not exist. but can a plug-in ever be un-loaded while the session continues? i don't think that ever happens. if it did, perhaps then more uses of observer and subscriptions might let the realtimeeffectlists update themselves, and they would further propagate `publish`-ed messages to these windows.",0,0,0,0.961287796497345,0.985159993171692,0.9906248450279236,0.0,accept,unanimous_agreement
880386351,2867,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
880413080,2867,"right, it does not make sense `wxwindow::destroy` does not destroy window immediately, but i'm not sure about exact order of things happening after that.",-1,0,0,0.7648903131484985,0.7571041584014893,0.9746562242507936,0.0,accept,majority_agreement
880420187,2867,"""wxwidgets delays actual deletion of the window until all events have been processed, since otherwise there is the danger that events will be sent to a non-existent window."" [a link] so maybe your precaution does make sense in event handlers, but it was not fully realized without adding the null checks",0,0,0,0.9679164886474608,0.99213045835495,0.9930853843688964,0.0,accept,unanimous_agreement
880423269,2867,"but it happens silently, without any warnings, isn't it? if there was a warning, user could have decided to close the project, install plugin and reopen this project again. also, it's not necessary to remove `realtimeeffectstate` if plugin which it refers to is missing. there might be something that indicates a faulty plugin in the stack. but this is more ui/ux question i guess.",0,0,0,0.9768732786178588,0.9751092195510864,0.9833210706710817,0.0,accept,unanimous_agreement
596395393,759,"""%s hakkında"" olmalı",0,0,0,0.8946768045425415,0.9268274903297424,0.8199841380119324,0.0,accept,unanimous_agreement
596396976,759,"türkçede ""website"" diye bir kullanım yok, ""web sitesi"" doğru.",0,0,0,0.9609602093696594,0.9845788478851318,0.9211996793746948,0.0,accept,unanimous_agreement
596397559,759,"ses bağlamında ""çıkış"" daha yaygın olarak kullanılıyor.",0,0,0,0.7842430472373962,0.9706029891967772,0.8424463272094727,0.0,accept,unanimous_agreement
596398428,759,"gui üç sözcüğün kısaltması olduğu için büyük harfle yazılıyor, bu yüzden arayüzü büyük harfle yazmaya gerek yok. ""grafik arabirim"" olarak çevrilebilir.",0,0,0,0.8986323475837708,0.9586449265480042,0.9116964936256408,0.0,accept,unanimous_agreement
596398705,759,yapı,0,0,0,0.9358524680137634,0.8904609680175781,0.9626085758209229,0.0,accept,unanimous_agreement
596398963,759,bit,0,0,0,0.9747421741485596,0.902165949344635,0.887111246585846,0.0,accept,unanimous_agreement
596399675,759,"bir önceki çeviri doğru, yeni çeviri tümüyle hatalı.",0,0,0,0.8644905090332031,0.9735628366470336,0.8207630515098572,0.0,accept,unanimous_agreement
596400189,759,taramak daha düzgün bir çeviri.,0,0,0,0.8859027028083801,0.9812113046646118,0.8737090229988098,0.0,accept,unanimous_agreement
596402279,759,viki,0,0,0,0.9716962575912476,0.9604743123054504,0.8793007135391235,0.0,accept,unanimous_agreement
596402752,759,"çeviri mantıkı hatalı, eski çeviri doğru.",0,0,0,0.8712077140808105,0.9785169959068298,0.883557140827179,0.0,accept,unanimous_agreement
596403203,759,eski çeviri doğru.,0,0,0,0.966568887233734,0.9788863658905028,0.9165588617324828,0.0,accept,unanimous_agreement
596403914,759,mümkün olduğunca soru edatı kullanılmalı.,0,0,0,0.8677845597267151,0.9603031277656556,0.9050615429878236,0.0,accept,unanimous_agreement
596405013,759,olmak hatalı çeviri.,0,0,0,0.89967942237854,0.9771181344985962,0.7883989810943604,0.0,accept,unanimous_agreement
596406714,759,i̇leti varken mesaj kullanılmamalı...,0,0,0,0.8097265362739563,0.9635887742042542,0.9172742366790771,0.0,accept,unanimous_agreement
596407163,759,sesi olmalı,0,0,0,0.7708671689033508,0.9370598196983336,0.9268335103988647,0.0,accept,unanimous_agreement
596407786,759,hacim ne alaka? ses düzeyinden söz ediyor burada.,0,0,0,0.7870092391967773,0.979963481426239,0.8417412638664246,0.0,accept,unanimous_agreement
596408185,759,hacim?,0,0,0,0.9815938472747804,0.9713684916496276,0.9897868633270264,0.0,accept,unanimous_agreement
596408395,759,hacim?,0,0,0,0.9815938472747804,0.9713684916496276,0.9897868633270264,0.0,accept,unanimous_agreement
596668573,759,yüzde işaretinden sonra boşluk yok,0,0,0,0.8633941411972046,0.9741248488426208,0.843204140663147,0.0,accept,unanimous_agreement
596669805,759,ofseti,0,0,0,0.9784330129623412,0.8711724281311035,0.9811558723449708,0.0,accept,unanimous_agreement
596671123,759,lin yerine doğ veya doğrusal,0,0,0,0.8809545636177063,0.941228449344635,0.7506266236305237,0.0,accept,unanimous_agreement
596671493,759,veri şuraya yazıldı:,0,0,0,0.9437158107757568,0.9814541339874268,0.9842841625213624,0.0,accept,unanimous_agreement
596672297,759,: eksik,0,0,0,0.9735780954360962,0.9288655519485474,0.9225944876670836,0.0,accept,unanimous_agreement
596672877,759,davulu. altta da aynı terim için tambur denmiş.,0,0,0,0.9074571132659912,0.9640606641769408,0.8449937701225281,0.0,accept,unanimous_agreement
596673389,759,tırnak işaretinden sonra ek gelirse boşlukla ayrılmaz,0,0,0,0.5584438443183899,0.9622412919998168,0.7796594500541687,0.0,accept,unanimous_agreement
596674064,759,zayıf vuruşun midi perdesi,0,0,0,0.9303274154663086,0.959419012069702,0.7492009401321411,0.0,accept,unanimous_agreement
596677821,759,"bazı yerlerde parça, bazı yerlerde iz kullanılmış. hangisi?",0,0,0,0.9146583676338196,0.9768666625022888,0.971051812171936,0.0,accept,unanimous_agreement
596678334,759,aşağıda çubuk varken çoğu yerde bar olarak çevrilmeden bırakılmış,0,0,0,0.6013977527618408,0.942777931690216,0.7617809176445007,0.0,accept,unanimous_agreement
596679401,759,süzgeç varken neden filtre? aynı şey ve biri türkçe,0,0,0,0.5575301647186279,0.9825566411018372,0.915773630142212,0.0,accept,unanimous_agreement
596680346,759,-sxz eki neden ayrı? çift kanallı varken neden stereo?,0,0,0,0.9470635652542114,0.982320249080658,0.9681465029716492,0.0,accept,unanimous_agreement
596681199,759,"çevirirken değişkenlere kesme işaretiyle ek getirilmez, değişkenin büyük ünlü uyumuna uyacağı garantisi yok.",0,0,0,0.7785595059394836,0.9646722078323364,0.8010202050209045,0.0,accept,unanimous_agreement
596682016,759,düzeyin nesi yanlış?,0,0,0,0.954504132270813,0.9825502038002014,0.9835816621780396,0.0,accept,unanimous_agreement
596683487,759,"... varsa süren bir eylemi belirtir. ""vuruşlar bulunuyor...""",0,0,0,0.7723425626754761,0.9391023516654968,0.585522472858429,0.0,accept,unanimous_agreement
596685050,759,vuruş varken ritim ne alaka? ritim rhythm yerine kullanılıyor zaten,0,0,0,0.750353991985321,0.9713667631149292,0.9542824029922484,0.0,accept,unanimous_agreement
596686345,759,% burada yüzde işaretini değil de bir değişkeni belirtiyor olsa gerek. başa yazılması hatalı.,0,0,0,0.9103767275810242,0.966948926448822,0.9132584929466248,0.0,accept,unanimous_agreement
596687952,759,sonunda as olduğu için başka bir ifade izliyor olsa gerek. şunun gibi başla/bitir: daha yerinde olabilir. programdan kontrol edilmeli.,1,0,0,0.5244060158729553,0.954600155353546,0.8597524166107178,0.0,accept,majority_agreement
596689332,759,"karartma anlaşılır değil. sesi açarak gir, diğeri için sesi azaltarak çık vb. gibi terimler kullanılmalı.",0,0,0,0.72932368516922,0.9485583305358888,0.8305554389953613,0.0,accept,unanimous_agreement
596689764,759,solma? karartma? hangisi?,0,0,0,0.9815368056297302,0.9866214990615844,0.963475465774536,0.0,accept,unanimous_agreement
596690121,759,aşağıda belirttiğim gibi açma/azaltma en iyi karşılık fade için duruma göre,0,0,0,0.7077515125274658,0.9543220400810242,0.724766194820404,0.0,accept,unanimous_agreement
596690765,759,"gnu genel kamu lisansı, ikinci sürümün koşulları altında yayımlanmıştır.",0,0,0,0.9772993326187134,0.9606949687004088,0.8747169971466064,0.0,accept,unanimous_agreement
596691979,759,binlerce oktav,0,0,0,0.9754428863525392,0.8513250350952148,0.9837821125984192,0.0,accept,unanimous_agreement
596692490,759,santihertz,0,0,0,0.9755622148513794,0.9477814435958862,0.9710153937339784,0.0,accept,unanimous_agreement
596693522,759,"command düğmesi olduğu gibi bırakılmalı, klavyelerin üzerinden aynen böyle yazıyor.",0,0,0,0.9168696999549866,0.9599178433418274,0.7826057076454163,0.0,accept,unanimous_agreement
596694248,759,çift kanallı'nın nesi yanlış?,0,0,0,0.9179420471191406,0.9764311909675598,0.9781172275543212,0.0,accept,unanimous_agreement
596695029,759,"bu bağlamda türkçede tire kullanılmaz, böyle bir kural yok. ""çoklu görünüm""",0,0,0,0.7293973565101624,0.9659788012504578,0.8453771471977234,0.0,accept,unanimous_agreement
596695915,759,format kullanılmaya başlansa da biçim hala çok yaygın çevirilerde. değiştirilmesi için bir neden yok,0,0,0,0.8226826786994934,0.9467211365699768,0.8239990472793579,0.0,accept,unanimous_agreement
596696329,759,"artı çeviri hatalı. ""örnek biçim değiştiriliyor""",0,0,0,0.8434648513793945,0.9624221324920654,0.78006911277771,0.0,accept,unanimous_agreement
596696871,759,doğru olan çeviriyi neden değiştiriyorsunuz?,0,0,0,0.8478462100028992,0.9826536774635316,0.9643763899803162,0.0,accept,unanimous_agreement
596697689,759,""" bin"" olarak çevrilmeli (boşluğa dikkat). türkçede 10k diye bir kullanım yok.",0,0,0,0.9741393327713012,0.9767559766769408,0.9521806836128236,0.0,accept,unanimous_agreement
596698065,759,yanlış tire kullanımı...,0,0,0,0.934638738632202,0.9375588297843932,0.8995890021324158,0.0,accept,unanimous_agreement
596698653,759,yanlış tire kullanımı,0,0,0,0.8490763902664185,0.932763695716858,0.8592314720153809,0.0,accept,unanimous_agreement
596699351,759,kanal neden silindi?,0,0,0,0.9819559454917908,0.9761351943016052,0.990092933177948,0.0,accept,unanimous_agreement
596699857,759,müzik ne alaka?,0,0,0,0.9702605605125428,0.9661762714385986,0.9854589700698853,0.0,accept,unanimous_agreement
596837159,759,"kısayol düğmeleri genelde öncelikli olarak türkçe karakter olmayan harflere atanır erişilebilirliği iyi olsun diye. her klavye düzeninde türkçe harf olmayabilir. ö, ü, ı, ş, ğ gibi karakterleri kullanmamak gerek.",0,0,0,0.6951341032981873,0.9577042460441588,0.7432332634925842,0.0,accept,unanimous_agreement
596837746,759,"s-expr türkçesi sembolik ifade, bu şekilde kullanılmalı",0,0,0,0.8368098735809326,0.9684452414512634,0.9269208908081056,0.0,accept,unanimous_agreement
596839239,759,"""%s (%s, %s, %s, %s ve %s içerir)""",0,0,1,0.6379863619804382,0.9234911799430848,0.5162320733070374,0.0,accept,majority_agreement
596840893,759,"yeni çeviri hatalı, eskisi doğru.",0,0,0,0.9097346067428588,0.9778074026107788,0.8020008206367493,0.0,accept,unanimous_agreement
596841458,759,"""%s"", audacity yerine gelmeli, hatalı çeviri",0,0,1,0.8750336170196533,0.9733124375343324,0.6004297137260437,0.0,accept,majority_agreement
596842102,759,"geniş zaman olmalı, ""içerir""",0,0,0,0.6991848945617676,0.9720602631568908,0.9619700908660888,0.0,accept,unanimous_agreement
596843187,759,"""hata ayıklama yapısı"" (derleme: compilation)",0,0,0,0.8171114921569824,0.9423992037773132,0.9918870329856871,0.0,accept,unanimous_agreement
596846233,759,yayın sürümü/yapısı daha doğru. sürüm derlemesi anlam bakımından doğru; ancak kavramlar karışıyor.,0,0,0,0.8593136072158813,0.9362818598747252,0.9277926087379456,0.0,accept,unanimous_agreement
596848144,759,"yeni çeviri hatalı, eskisi doğru. scrub'a gidin bir anlam ifade etmiyor. aramak da sözlük anlamı olarak doğru olsa da kavram olarak hatalı.",0,0,0,0.8420462608337402,0.9622745513916016,0.7744686603546143,0.0,accept,unanimous_agreement
596849423,759,audacity'yi yine de başlatmak istiyor musunuz? çevirirken kavramları çevirmeye sondan başlamak daha doğru. özne burada audacity.,0,0,0,0.9353649020195008,0.9756601452827454,0.8615801334381104,0.0,accept,unanimous_agreement
596850423,759,"ı ekinden önce boşluk gelmez, tırnak işaretine yanaşık kullanılır.",0,0,0,0.9482824206352234,0.966635763645172,0.800501823425293,0.0,accept,unanimous_agreement
596850960,759,türkçe karaktere atanan kısayol,0,0,0,0.7655887007713318,0.9573370218276978,0.923760712146759,0.0,accept,unanimous_agreement
596851576,759,ses başlatma hatası (belirtisiz kullanım),0,0,0,0.7757254838943481,0.9722505807876588,0.9630683064460754,0.0,accept,unanimous_agreement
596853227,759,"düzey yerine seviye kullanımı çeviriye pek fazla bir şey katmıyor, aksine türkçe kökenli sözcük kullanımını azaltıyor. lütfen türkçe sözcüklerin kullanımını yaygınlaştıralım. diğer örnekler için de geçerli.",0,0,0,0.8175579905509949,0.939260959625244,0.8804000020027161,0.0,accept,unanimous_agreement
596853969,759,hala yerine hâlâ kullanabilirsiniz.,0,0,0,0.9652068614959716,0.9784351587295532,0.8618467450141907,0.0,accept,unanimous_agreement
596854728,759,lütfen aygıt yerine cihaz kullanmayın.,0,0,0,0.9032321572303772,0.9691314697265624,0.8375949263572693,0.0,accept,unanimous_agreement
596855743,759,"dosyadaki tüm ""hacim"" sözcüklerini aratıp ""ses düzeyi"" olarak değiştirin lütfen.",0,0,0,0.8795665502548218,0.9731249809265136,0.8460485935211182,0.0,accept,unanimous_agreement
596856187,759,şu çıkışı destekler:,0,0,0,0.8971304893493652,0.9749799966812134,0.985870361328125,0.0,accept,unanimous_agreement
596856582,759,şu girişi destekler:,0,0,0,0.9436014294624328,0.97973895072937,0.9901581406593324,0.0,accept,unanimous_agreement
596857269,759,at,0,0,0,0.9709627032279968,0.8760236501693726,0.8990716338157654,0.0,accept,unanimous_agreement
596858133,759,"""\""evet\"" seçeneği, seçilen projeleri anında kalıcı olarak siler.""",-1,0,0,0.473138689994812,0.989003837108612,0.9618552327156068,0.0,accept,majority_agreement
596858639,759,"yeni çeviri hatalı, eskisi doğru",0,0,0,0.7391225695610046,0.9682114124298096,0.8432251811027527,0.0,accept,unanimous_agreement
596859625,759,tutarsız büyük harf kullanımı,0,0,0,0.7407910823822021,0.9387497901916504,0.930871605873108,0.0,accept,unanimous_agreement
596860036,759,-yu gereksiz,0,0,0,0.7668768763542175,0.9479796290397644,0.9221336245536804,0.0,accept,unanimous_agreement
596860362,759,-yu gereksiz,0,0,0,0.7668768763542175,0.9479796290397644,0.9221336245536804,0.0,accept,unanimous_agreement
596860932,759,parametresiz,0,0,0,0.9705250263214112,0.9509533047676086,0.9920610189437866,0.0,accept,unanimous_agreement
596862012,759,anlaşılamadı bu bağlamda doğru. batch için toplu iş olarak kullanılır genelde. tanınmadı doğrudan çeviri oluyor.,0,0,0,0.9269514083862304,0.935754656791687,0.6885815262794495,0.0,accept,unanimous_agreement
596862533,759,türkçe karakterde kısayol,0,0,0,0.7843160033226013,0.9477145075798036,0.9695455431938172,0.0,accept,unanimous_agreement
596862828,759,türkçe karakterde kısayol,0,0,0,0.7843160033226013,0.9477145075798036,0.9695455431938172,0.0,accept,unanimous_agreement
596863186,759,türkçe karakterde kısayol,0,0,0,0.7843160033226013,0.9477145075798036,0.9695455431938172,0.0,accept,unanimous_agreement
596863527,759,türkçe karakterde kısayol,0,0,0,0.7843160033226013,0.9477145075798036,0.9695455431938172,0.0,accept,unanimous_agreement
959061547,3432,don’t need second ‘#’,0,0,0,0.5060914754867554,0.9727250933647156,0.9856319427490234,0.0,accept,unanimous_agreement
959061901,3432,"i prefer private only before wxbase, otherwise allowing transitive dependencies",0,0,0,0.969547688961029,0.9757895469665528,0.9904706478118896,0.0,accept,unanimous_agreement
959062976,3432,sent,0,0,0,0.9800391793251038,0.9435835480690002,0.900726079940796,0.0,accept,unanimous_agreement
959063782,3432,synchronously,0,0,0,0.9810990691184998,0.985622227191925,0.990500032901764,0.0,accept,unanimous_agreement
959064213,3432,completedhandler,0,0,0,0.9876410365104676,0.9770220518112184,0.9711396098136902,0.0,accept,unanimous_agreement
959290855,3432,"yeah, i keep copying it :-(",-1,-1,-1,0.9910154938697816,0.9886046648025512,0.9962984919548036,-1.0,accept,unanimous_agreement
959468199,3432,"a singleton object instead of a namespace for all these functions, but it is stateless, for now at least. will that need to change? will there ever be more than one serviceconfig?",0,0,0,0.9820417165756226,0.9809509515762328,0.9887235164642334,0.0,accept,unanimous_agreement
959469004,3432,or to be cuter [code block],0,0,0,0.9697898030281068,0.9935821294784546,0.9906071424484252,0.0,accept,unanimous_agreement
959470426,3432,"i like seeing `string_view` and wish we could have c++20 soon, so we can also use `std::span` to pass ranges of constant data, instead of `const std::vector &`, without some irrelevant allocator type as a template parameter.",1,0,1,0.8829936981201172,0.8545293807983398,0.7215451598167419,1.0,accept,majority_agreement
959470973,3432,"i have build lib-cloud-audiocom and i want to understand all that is in it, and i begin here at the bottom of the dependency graph of files.",0,0,0,0.9729222655296326,0.9757196307182312,0.9871238470077516,0.0,accept,unanimous_agreement
959480176,3432,incorrect comment,-1,-1,-1,0.5906003713607788,0.8569077253341675,0.7953888773918152,-1.0,accept,unanimous_agreement
959484535,3432,perhaps overload 3 might express it more clearly: [a link],0,0,0,0.981670379638672,0.9913382530212402,0.9878854751586914,0.0,accept,unanimous_agreement
959492329,3432,"that comment above makes me nervous. `observer.h` says `intended for single-threaded use only`. should you use `callafter` wherever you publish, and change the comment to say, ""messages are received in the main thread in idle time"" ?",-1,0,-1,0.9636052846908568,0.6431820392608643,0.9590865969657898,-1.0,accept,majority_agreement
959493388,3432,"no, i'd rather stop using observer.",0,0,0,0.8690584897994995,0.958756148815155,0.9813796877861024,0.0,accept,unanimous_agreement
959494211,3432,"or, should there be mutual exclusion around all `publish` calls? what might stil happen is that a subscription is destroyed concurrently with a publication. that might not have bad consequences, but i would have to reexamine observer.h to be sure of that.",0,0,0,0.9351478219032288,0.9838547110557556,0.978734254837036,0.0,accept,unanimous_agreement
959517551,3432,what is this lock guard guarding? is it the static `refreshtoken` ? i also need to be convinced that you don't need a `std::recursive_mutex`.,0,0,0,0.9852150678634644,0.9919912219047546,0.9942447543144226,0.0,accept,unanimous_agreement
959581678,3432,"i thought so... it is possible, though unlikely, that the two-argument overload of `authorizerefreshtoken` holds the mutex, and calls the other overload, which calls this function, which sets the lambda as the callback -- and this lambda may be called at once before `setrequestfinishedcallback` exists, making a self-deadlock. but `recursive_mutex` would eliminate the possibility.",0,0,0,0.9831398129463196,0.9881941080093384,0.987070381641388,0.0,accept,unanimous_agreement
959607746,3432,shadowing of the static `refreshtoken`,0,0,0,0.9862558245658876,0.9941960573196412,0.9937117099761964,0.0,accept,unanimous_agreement
959630146,3432,"if it is stipulated in the header file as a precondition that all functions that may use this global are to be called in the main thread only then there is no need for mutexes to guard it and you can avoid the recursive mutex. i think that is true from inspection of the entire pr, but not obvious. the functions would be `validateauth`, `hasrefreshtoken`, `unlinkaccount`",0,0,0,0.9867570400238036,0.9926100373268129,0.989185869693756,0.0,accept,unanimous_agreement
959651506,3432,this is equivalent to simply `!getaccesstoken().empty()`,0,0,0,0.9780393242836,0.9935048818588256,0.9949807524681092,0.0,accept,unanimous_agreement
959663393,3432,do you want to defend against a string the defines one of the arguments more than once?,0,0,0,0.9807144999504088,0.9761146306991576,0.9721770882606506,0.0,accept,unanimous_agreement
959671306,3432,`unexpectedresponse`,0,0,0,0.9848211407661438,0.9843048453330994,0.9845439791679382,0.0,accept,unanimous_agreement
959678525,3432,i think this is more like a future than a promise?,0,0,0,0.9278014302253724,0.975697934627533,0.9715880751609802,0.0,accept,unanimous_agreement
959679362,3432,"if this is generally like `std::async`, then call the return object a future",0,0,0,0.9884494543075562,0.9941032528877258,0.9940225481987,0.0,accept,unanimous_agreement
959685049,3432,incorrect comment,-1,-1,-1,0.5906003713607788,0.8569077253341675,0.7953888773918152,-1.0,accept,unanimous_agreement
959687055,3432,"four types recognized here, but only three in the enumeration in serviceconfig.h? i notice now, that enum is only for the return of `audioformat getpreferredaudioformat` and it's always the same. did you forget to define an `enumsetting` to save it as a preference?",0,0,0,0.9852222800254822,0.9935868978500366,0.989654779434204,0.0,accept,unanimous_agreement
959692088,3432,"`move` doesn't help with `wxstring`, but no harm.",0,0,0,0.9310615658760072,0.8761394619941711,0.967105269432068,0.0,accept,unanimous_agreement
959695952,3432,above four members can be `const`,0,0,0,0.9849377870559692,0.9910221695899964,0.9935414791107178,0.0,accept,unanimous_agreement
959766579,3432,"what should happen in case this ""promise"" (or future) is destroyed before completion, without any calls to `abort` or `discardresult` ? it could be that `uploadoperation` still occupies some resources unnecessarily because `maborted` isn't true. should `uploadpromise` call `abort()` in its detructor if not completed? what are you crazy? that would be a pure virtual function call! the base class can't do that...",-1,-1,-1,0.9445804953575134,0.9015061259269714,0.9916210174560548,-1.0,accept,unanimous_agreement
959772546,3432,"... so instead, the destructor of the concrete class could guarantee that one of completion, abort, or discard has happened, and then the lambdas should capture weak, not strong, references to self. i think this would make better raii guarantees on the main thread. the ""leak"" in case there is no explicit abort on the main thread isn't until program exit, but it could mean the other thread works longer than needed before stopping.",0,0,0,0.978205382823944,0.9866601228713988,0.98044753074646,0.0,accept,unanimous_agreement
959773507,3432,"what does ""s3"" abbreviate?",0,0,0,0.9711878895759584,0.9911994338035583,0.9906361699104308,0.0,accept,unanimous_agreement
959775627,3432,"well, it kinda means s3 (or simple storage service, but i doubt anyone calls it that). it's a somewhat standard protocol for object storages. [a link]",0,0,0,0.974536120891571,0.975667417049408,0.985413670539856,0.0,accept,unanimous_agreement
959783108,3432,"this will complicate the code. abort is not synchronous and i don't see much reason to change that (although it is achievable). passing weak pointers will additionally increase complexity of the implementation. right now promise (or future, or operation) outlives the dialog at most until lubcurl invokes any of it's callbacks. making abort synchronous would basically just delay the dialog closing for that specific time. i do not, however, like the idea for blocking ui thread for such reasons.",-1,0,0,0.7716840505599976,0.8800022006034851,0.8121271729469299,0.0,accept,majority_agreement
959783533,3432,"i checked to see what would happen if a nonexisted file was given. `addfile` throws a `simplemessageboxexception`. but we get here on a worker thread, right? is it safe to do that? there will be a `callafter` that pops up the dialog, no problem, but is there a `catch` above us here? if not, should there be a `guardedcall`? do we need to guard any other calls into `lib-network-manager`?",0,0,0,0.9812526106834412,0.9915021657943726,0.9877859354019164,0.0,accept,unanimous_agreement
959786529,3432,the file existence is checked on the main thread first. but i will improve safety here anyway.,0,0,0,0.9588896036148072,0.938787281513214,0.9937904477119446,0.0,accept,unanimous_agreement
959786813,3432,"you don't like `observer` for other reasons, or you were thinking of the same thread safety question? i got as far as finishing a review of `uploadservice` where i see you define another message type but do not use `observer`. i must review `userservice` and that will complete a review of this commit. still leaving several other commits.",0,-1,0,0.7965532541275024,0.8017392158508301,0.9855936169624328,0.0,accept,majority_agreement
959789106,3432,"however, i've thought of solution that will make both of us happier! :-)",1,1,1,0.990972638130188,0.9956024885177612,0.9950450658798218,1.0,accept,unanimous_agreement
959789571,3432,"did i misunderstand the intended context of use of this, then? is there going to be a non-modal dialog in audacity giving an interface that lets the user abort the operation? or will that be on a web page only?",0,0,0,0.7307910323143005,0.9123147130012512,0.9407529830932616,0.0,accept,unanimous_agreement
959791151,3432,"it's good for a class at a lower level not to make too-strong assumptions, or else, to make those assumptions explicit in comments in the header.",0,0,0,0.97502863407135,0.9833088517189026,0.9845461845397948,0.0,accept,unanimous_agreement
959792885,3432,"there is a modal dialog in audacity that calls abort when closing, if the promise was not fulfilled.",0,0,0,0.9689182043075562,0.9673031568527222,0.9941018223762512,0.0,accept,unanimous_agreement
959795660,3432,"this is private class. the file existence is checked by a public ""factory"" class before the object of this class is created. there is a subtle chance that the file will be deleted while we are waiting to get here, so i will improve the exception guarantees at this specific point.",0,0,0,0.9833011627197266,0.9899895191192628,0.9933371543884276,0.0,accept,unanimous_agreement
959796069,3432,"this class is not even listed in a header, to be fair.",0,0,0,0.9596012830734252,0.8618780374526978,0.9592429995536804,0.0,accept,unanimous_agreement
959806839,3432,"this is the safe, main-thread publishing done my userservice.",0,0,0,0.9751508235931396,0.9466454982757568,0.9942498207092284,0.0,accept,unanimous_agreement
959807533,3432,but this is the unsafe subscription to oauthservice which will be rewritten. correct?,0,0,0,0.9673593044281006,0.9619208574295044,0.9933388829231262,0.0,accept,unanimous_agreement
959815581,3432,perhaps the string literals given to `setheader` should be named constants to avoid repetition of them within this new library.,0,0,0,0.9862914681434632,0.993684947490692,0.9864387512207032,0.0,accept,unanimous_agreement
960497941,3432,you understand that `setname` affects audible screen reader output?,0,0,0,0.9889829754829408,0.9930641055107116,0.9947233200073242,0.0,accept,unanimous_agreement
960510189,3432,"yes, that is the reason for setname here",0,0,0,0.98800927400589,0.991722047328949,0.994321584701538,0.0,accept,unanimous_agreement
960515841,3432,this commit reminds me that i turn off wavpack in my local build because for some reason i never got it to work. `wavpack/wavpack.h` can't be found.,0,0,0,0.9024357795715332,0.9536850452423096,0.9878801703453064,0.0,accept,unanimous_agreement
960518007,3432,if i choose `system` not `local` for `audacity_use_wavpack` it doesn't even configure.,0,0,0,0.9680382609367372,0.989033818244934,0.9903154969215392,0.0,accept,unanimous_agreement
960519798,3432,i'm not sure why it should. do you have a system version of wavpack installed? i was sure that we have overcame this problem by dropping your conan cache.,0,0,0,0.6795754432678223,0.7462946772575378,0.9335989952087402,0.0,accept,unanimous_agreement
960530001,3432,"let it stand for alpha, but i don't like these `extern`s and i hope you don't either. it makes the dialog dependent on src/export files but the dependency is not made explicit in an `include` directive. those export files are header-less because they are supposed to be highest-level things in the dependency graph, and candidates for easy removal as modules, if we can ever return to the extraction refactorings. i'm sure you or i will think up something in the future to rewrite the necessary parts of this file as a registry that the exporters can plug into. making possible tinier builds of audacity that only know wav exporting for instance.",0,0,0,0.6446639895439148,0.6832841634750366,0.6417290568351746,0.0,accept,unanimous_agreement
960532075,3432,"i don't like it, nor do i think that it is feasible to rewrite the whole export framework. it is highly coupled with the ui and provides pretty much no sane way to configure the exporting plugin.",-1,-1,-1,0.9780353307724,0.9834219813346864,0.976929008960724,-1.0,accept,unanimous_agreement
960538335,3432,"here it is... that preference that i noted before, is not a preference. it's always wav. no memory of a user choice. must that be fixed for release?",0,0,0,0.9758525490760804,0.974730670452118,0.9229416847229004,0.0,accept,unanimous_agreement
960539989,3432,"i should be always wavpack (if available), i will tipple check that. there are no plans to give the user control of exporting right now, so this is not a bug.",0,0,0,0.9636832475662231,0.9818456172943116,0.9896590113639832,0.0,accept,unanimous_agreement
960540355,3432,"and it is part of service *configuration*, it is not a preference.",0,0,0,0.979141891002655,0.9909125566482544,0.9935966730117798,0.0,accept,unanimous_agreement
960540530,3432,you want a busy-wait when numerator equals denominator?,0,0,0,0.981495440006256,0.9211845993995668,0.9921420812606812,0.0,accept,unanimous_agreement
960542837,3432,this is the behavior from the original progress bar.,0,0,0,0.9864256381988524,0.990753412246704,0.991145670413971,0.0,accept,unanimous_agreement
960552488,3432,is this the right power of 10?,0,0,0,0.9774178862571716,0.9892182350158693,0.9908083081245422,0.0,accept,unanimous_agreement
960555306,3432,"this value is unrelated to the original progress dialog. i can use virtually any number greater that 1. 10000 is probably an overkill, but it doesn't affect the result much. rescaling is needed because wxgauge does not allow 64 bit values.",0,0,0,0.9794474840164183,0.9230260848999025,0.9869192242622375,0.0,accept,unanimous_agreement
960560219,3432,i'm not competent in this language yet,-1,-1,-1,0.9450690746307372,0.9454410076141356,0.8940447568893433,-1.0,accept,unanimous_agreement
960563642,3432,what was the reasoning to put this in `src/cloud` but the rest in `src/cloud/audiocom`?,0,0,0,0.9872927665710448,0.9948541522026062,0.992973566055298,0.0,accept,unanimous_agreement
960604442,3432,for the miniscule chance of adding other services :-) can be easily moved into audiocom,1,1,1,0.8722066283226013,0.9854302406311036,0.8663151860237122,1.0,accept,unanimous_agreement
960625019,3432,"i have reviewed the usages, it can be moved to main thread for now.",0,0,0,0.9841179847717284,0.9880738854408264,0.9930163621902466,0.0,accept,unanimous_agreement
960646100,3432,nope,0,0,0,0.9570183157920836,0.8642067909240723,0.9711623191833496,0.0,accept,unanimous_agreement
960770078,3432,"only the first two. i want to be able to reset the handlers, so the associated resources can be released as well",0,0,0,0.9860190153121948,0.9775565266609192,0.9932308197021484,0.0,accept,unanimous_agreement
960910612,3432,"i have revised it and see no problem here: even if the exporter calls `poll` multiple times with `numerator == denominator`, which is not the case - the only side effect is yielding every time the exporter calls poll. and i would say that 50 msec is like 5 times more than we need. 20 fps is noticeable laggy. ideally, export plugin should use a background thread, so the events are processed by the main thread normally.",0,0,0,0.5355750322341919,0.7030941843986511,0.972969114780426,0.0,accept,unanimous_agreement
961015127,3432,i’m not asking for a change.,0,0,0,0.6022728681564331,0.8326497077941895,0.7802611589431763,0.0,accept,unanimous_agreement
961019587,3432,"by the way, it’s minus-cule not mini-scule but everybody gets it wrong unless they like typography and know that “majuscule” is a thing too...",-1,-1,0,0.6682782769203186,0.8143597841262817,0.9522303938865662,-1.0,accept,majority_agreement
961158407,3432,this line is new since the last push. is it correct?,0,0,0,0.9858720898628236,0.990214228630066,0.9951615929603576,0.0,accept,unanimous_agreement
961161532,3432,new too,0,0,0,0.9319697022438048,0.9620370268821716,0.9731351733207704,0.0,accept,unanimous_agreement
961163113,3432,also new... okay i trust this is a pattern done for a good reason,1,1,0,0.9386529326438904,0.4848023056983948,0.586280345916748,1.0,accept,majority_agreement
961167520,3432,lock the callbacks mutex first,0,0,0,0.9879857897758484,0.9876393675804138,0.9924746155738832,0.0,accept,unanimous_agreement
961172709,3432,it's still true in the latest push that the return value of this function never changes. is it your intent to check availability of wavpack? i think i know how to do that. wait for me to push a pr onto your pr.,0,0,0,0.9811827540397644,0.9827696084976196,0.994606077671051,0.0,accept,unanimous_agreement
961764150,3432,exportplugin,0,0,0,0.9864393472671508,0.9827849268913268,0.9939854741096495,0.0,accept,unanimous_agreement
961764378,3432,exportplugin,0,0,0,0.9864393472671508,0.9827849268913268,0.9939854741096495,0.0,accept,unanimous_agreement
685508915,1193,unnecessary # include,0,0,0,0.8517012000083923,0.9608129262924194,0.9775623083114624,0.0,accept,unanimous_agreement
685509729,1193,"add authorship comment at the head of this and the corresponding .h file, as you have elsewhere with the other new files.",0,0,0,0.9874048829078674,0.9919325709342957,0.9951647520065308,0.0,accept,unanimous_agreement
685511232,1193,"comment what this is for, and explain that the default implementation does nothing.",0,0,0,0.953300952911377,0.9733564853668212,0.9903637766838074,0.0,accept,unanimous_agreement
685519651,1193,"maybe delete this using directive for an inherited constructor, now that spectrumview has its own constructor that overloads it.",0,0,0,0.9830478429794312,0.9935583472251892,0.9879435300827026,0.0,accept,unanimous_agreement
685520142,1193,one-argument constructors should usually be `explicit` unless you really want implied conversions.,0,0,0,0.9852532744407654,0.9899210929870604,0.981603503227234,0.0,accept,unanimous_agreement
685524078,1193,"you didn't copy mstartt, mendt. maybe spectraldata should supply its own copy to make this less error prone?",0,0,0,0.9845392107963562,0.8043972253799438,0.9748417735099792,0.0,accept,unanimous_agreement
685526202,1193,this change should also be conditional on experimental_brush_tool be sure all such appearance changes in the ui don't happen when the experimental is off.,0,0,0,0.9886189699172974,0.9898641705513,0.9931509494781494,0.0,accept,unanimous_agreement
685527766,1193,"this one line deserves a tiny commit of its own because it is a bug fix in existing code, not properly part of your project.",0,0,0,0.6408669948577881,0.972510814666748,0.9476794004440308,0.0,accept,unanimous_agreement
685529331,1193,you can leave one less changed file :-),1,1,0,0.9382674098014832,0.976171612739563,0.9943562150001526,1.0,accept,majority_agreement
685534104,1193,"comment a bit about the purpose of this time. it's really mapping from time (as discrete sample count) to a set of bins, right? then maybe (1) a better name and (2) the set need not contain wide integers, because there will not be so many frequency bin values.",0,0,0,0.97866028547287,0.9875033497810364,0.9831770062446594,0.0,accept,unanimous_agreement
685536473,1193,"so start is minimum of all sample times so far entered, end is max? comment that.",0,0,0,0.9532325863838196,0.991024374961853,0.9929443001747132,0.0,accept,unanimous_agreement
685544382,1193,this static isn't used,0,0,0,0.9763784408569336,0.8189916014671326,0.9905975461006165,0.0,accept,unanimous_agreement
685547666,1193,this function fails to compile with experimental_brush_tool off. maybe you can simply wrap this whole file in an #ifdef to turn it off. likewise for the header.,0,0,0,0.9690533876419068,0.9507265090942384,0.9914255142211914,0.0,accept,unanimous_agreement
685548259,1193,explicit,0,0,0,0.9819175601005554,0.890796959400177,0.979380428791046,0.0,accept,unanimous_agreement
685549977,1193,"this header file is actually not needed! it is included only in one .cpp file, and that file influences the behavior of the program completely by means of registrations at static initialization time. so the class definitions of this .h can simply move to the header-less .cpp file. see all the files under src/menus -- they are headerless, but similarly manage to cause their items to appear in the toolbar menus.",0,0,0,0.971481442451477,0.9892492294311525,0.9860972762107848,0.0,accept,unanimous_agreement
685550816,1193,"and once you do that, you could even put the whole file inside `namespace { ... }` which could have the tiny advantage of making fewer symbols in the linkage tables. maybe not important.",0,0,0,0.9820966720581056,0.9827709794044496,0.9903995394706726,0.0,accept,unanimous_agreement
685551119,1193,swap the last two lines so it compiles without the experimental,0,0,0,0.98420250415802,0.9909663200378418,0.9919752478599548,0.0,accept,unanimous_agreement
685554134,1193,can these have in-line initializers?,0,0,0,0.9889813661575316,0.993229866027832,0.9942324757575988,0.0,accept,unanimous_agreement
685555352,1193,"i prefer in-line initializers in the class, or member initializers before the function body, instead of assignments in the body, where possible. it makes it a bit easier to compare the constructor and the class and be sure everything is initialized. in fact, when a class has const or reference data members, those are the only ways you can initialize them, and it's good when possible to make such data members to help the reader reason about the class, knowing the members are immutable. so are any of these immutable? i think mproject can have type `audacityproject *const`",0,0,0,0.8884196877479553,0.8691390752792358,0.9454554915428162,0.0,accept,unanimous_agreement
685555845,1193,even making this one initialized here with nullptr would be nice.,0,0,0,0.5385770797729492,0.8600651621818542,0.9836946725845336,0.0,accept,unanimous_agreement
685560062,1193,"i think this event handler got here because you imitated the history dialog. but you don't use maudioiobusy anywhere. and yet, you should! we should disallow commands like the apply button that might change the content of wave tracks while you are also playing or recording. that is consistent with the rest of audacity.",0,0,0,0.9474228620529176,0.9715545773506165,0.9535245895385742,0.0,accept,unanimous_agreement
685560824,1193,this other bit of event handling copied from the undo history dialog is less useful. that dialog really needs to detect changes of undo history so it can update what it shows. this dialog has no such need.,0,0,0,0.9775519371032716,0.9195441603660583,0.982102632522583,0.0,accept,unanimous_agreement
685563080,1193,"finally you may wonder if you really need this bit of copied event handling from history window. you do! because one thing that might change in preferences is the language. we have made sure that all non-modal dialogs re-create themselves so that user-visible strings are translated into the newly chosen language. it is right to do here. of course you won't see translation if you try it now, becase your new intenationalized strings (those in the `xo` macro) are not yet entered in the catalogs that human translators have yet to fill in.",0,0,0,0.5505924820899963,0.8329346179962158,0.8593342900276184,0.0,accept,unanimous_agreement
685563727,1193,not actually constructed anywhere? make these private? or... see below,0,0,0,0.9705554842948914,0.977843463420868,0.9919613003730774,0.0,accept,unanimous_agreement
685564259,1193,"so i understand this is the sole entry point to the code in this file, used by the dialog. separation of dialog code from the state it manages is a very good idea! maybe spectraldatamanager should be a namespace, and this the one function declared in it, and all the rest can be hidden in the corresponding .cpp file.",1,1,1,0.9770127534866332,0.8891741633415222,0.9906430840492249,1.0,accept,unanimous_agreement
685591097,1193,"your name, not mine!",0,-1,0,0.5969246029853821,0.6703401207923889,0.9436460137367249,0.0,accept,majority_agreement
685591394,1193,your name! and this one did not historically split from trackpanel.cpp.,0,1,1,0.9009127616882324,0.8973298072814941,0.7835157513618469,1.0,accept,majority_agreement
685594177,1193,"i find a dependency cycle of spectrumview and brushhandle, but no other files in that cycle. i think brushhandle includes spectrumview only because it needs spectraldata. they both do, so you can make separate new files just for that structure, and the cycle is broken. it is a common lower-level dependency of both. better: avoid a header including a header. make `class spectraldata;` just an incomplete type definition here, and include spectraldata.h only in brushhandle.cpp. maybe you will try that and find a compilation failure -- because the compiler tries to generate an in-lin destructor of brushhandle, which requires a dtor of `shared_ptr `, which requires the dtor of spectraldata, which is only forward-declared. and so you fix that by explicitly declaring the destructor and making it non-inline. maybe you will need the same for copy and assignments, or instead you can also fix that by `= delete;` - ing them.",0,0,0,0.9533963203430176,0.98002427816391,0.9747430086135864,0.0,accept,unanimous_agreement
685595369,1193,"i recommend this rule: in a .cpp file, the first `#include` directive should always be for the corresponding .h file. putting it before any others causes that header file to be properly self-contained -- you can be sure it is not depending on some other header being included first to make it compilable. instead you are forced to make all necessary nested include's or make forward declarations of incomplete types. maybe you know this rule -- you followed it in all other examples of new .cpp files, but just forgot it once here.",0,0,0,0.9470138549804688,0.9841890931129456,0.9101150035858154,0.0,accept,unanimous_agreement
685596259,1193,"there are several things leftover in this file because you followed the example of selecthandle, but they are not used. all of the time-snapping things are probably among those. `connect` and all the timer handling are also unneeded, i think. i don't know if that is all of them. please take another look and clean up unnecessary things.",0,0,0,0.8919997215270996,0.8005344867706299,0.9524645805358888,0.0,accept,unanimous_agreement
685598894,1193,"as i mention elsewhere, spectraldata should be in its own .cpp/.h file pair so that a dependency cycle between brushhandle and spectrumview can be broken. when a .cpp file exists, you might also make more complicated functions like this non-inline.",0,0,0,0.988145351409912,0.9909412264823914,0.994070827960968,0.0,accept,unanimous_agreement
685600247,1193,"now to begin some suggestions about more difficult matters: i finally deduced from reading other code that the values of ll_sc correspond to whatever time value is at the mouse x position. but you know that spectrum transformers will be used, and there will be a natural ""hop"" size of 1/4 of whatever fixed fft window length you are using. so it may be disadvantageous to collect frequency bins for too many time coordinates that don't fall at hop widths. maybe all the ll_sc values ought to be rounded so that they differ by multiples of the hop size. maybe you can simply round every ll_sc value as it comes into this class. or maybe let the first value, whatever that is, be unrounded, so the user's first pick can be more precise, but afterwards all values should be rounded so their difference with the initial value is a multiple of the hop.",0,0,0,0.924601912498474,0.9036060571670532,0.9592391848564148,0.0,accept,unanimous_agreement
685603807,1193,you never call with maysnap true. so why not simplify this function and remove freq_snap_distance?,0,0,0,0.9846040606498718,0.9856070280075072,0.9942322373390198,0.0,accept,unanimous_agreement
685604258,1193,some unused functions above,0,0,0,0.98160320520401,0.9881234765052797,0.9944663643836976,0.0,accept,unanimous_agreement
685607203,1193,"i thought escape might have to do more work to be sure the spectral highlight goes away with the esc key, but experiment tells me, no!",-1,0,0,0.7840595245361328,0.6771917343139648,0.9624583721160888,0.0,accept,majority_agreement
685607405,1193,*according to,0,0,0,0.952531397342682,0.9566006660461426,0.98740154504776,0.0,accept,unanimous_agreement
685607892,1193,these two might be const members of brushhandle,0,0,0,0.9866045117378236,0.9933598637580872,0.9891153573989868,0.0,accept,unanimous_agreement
685617635,1193,"i'm puzzled why the add function affects only the current state, but the subtract function rewrites all past states. maybe if you rounded times to discrete hops of 512 (or whatever window size / 4 is), as i suggested elsewhere, then you would find it easier to erase what you added just in the most recent state.",0,0,-1,0.8143696784973145,0.5307434797286987,0.7632846236228943,0.0,accept,majority_agreement
685618642,1193,"i think most of these lines are deletable copies from selecthandle? but maybe the click should call handletimefreqdata once -- if you follow the suggestion elsewhere that the first pick (at least in the life of the spectraldata object, not necessarily the first pick in the life of each click-drag-release) should be at the exact time coordinate at the mouse-down point, estabilishing the time origin for rounding to hops.",0,0,0,0.98787260055542,0.9931674599647522,0.987299621105194,0.0,accept,unanimous_agreement
687604343,1193,"maybe the first push_back should happen instead when you click, so every call to drag, including the first one, can enlarge the selection.",0,0,0,0.984353482723236,0.9883964657783508,0.9782072901725768,0.0,accept,unanimous_agreement
687607234,1193,what is the reason for the clipping of coordinates here? i think this is a wrong solution for the absense of array bounds checking somewhere else in the program.,-1,0,0,0.680905282497406,0.8886552453041077,0.9727190136909484,0.0,accept,majority_agreement
687678842,1193,"each time you call this function, a spectrumtransformer is created and destoyed. if you round sample times to hop sizes, you might be computing the same ffts repeatedly. maybe the spectrumtransformer object could have a longer lifetime, and a cache of fft windows? this may be a problem for me to think about and implement to improve my class.",0,-1,0,0.7500258684158325,0.6045682430267334,0.9823150634765624,0.0,accept,majority_agreement
687680957,1193,this is an algorithm for plotting an unfillled circle. but shouldn't there be a filled circle? the numerical tricks used for fast plotting may be less important here than correct calculation of the time and frequency bins that must be added. something like: [code block],0,0,0,0.9757664799690248,0.9870941042900084,0.9890543222427368,0.0,accept,unanimous_agreement
687681494,1193,four calls to positiontofrequency might be reduced to two. see how arguments do and don't change.,0,0,0,0.9849534034729004,0.9847040176391602,0.9839507341384888,0.0,accept,unanimous_agreement
687696979,1193,maybe too: do clamping of values to the acceptable range within this function (std::clamp is a useful little c++17 function). no bin value needs to be less than 0 or more than the nyquist bin (window size / 2). maybe that is the better replacement for the clamping of x and y values done in the drag method of brushhandle.,0,0,0,0.95706307888031,0.9922481775283812,0.9901989698410034,0.0,accept,unanimous_agreement
688241187,1193,"i see a problem. you always pass true as the first argument to the base class constructor, which means output is required, the inverse fourier transform is done, and overlap-add, and pasting of data into the track that was supplied to process(). all of this is unnecessary when you are only computing frequency snapping. could this be another reason for the slowness?",0,0,0,0.8998626470565796,0.9672999382019044,0.8662037253379822,0.0,accept,unanimous_agreement
688241396,1193,"i think i understand things better now, and it's the right thing to do after all.",0,0,1,0.7472411394119263,0.780982494354248,0.9092223048210144,0.0,accept,majority_agreement
688243028,1193,how will this change if all sample counts are rounded to hop sizes? will it mean that the inner for-loop needs only one pass?,0,0,0,0.9805548191070556,0.9903629422187804,0.9919834733009338,0.0,accept,unanimous_agreement
688243963,1193,"you zeroed out a certain bin, but also one bin up and down in each direction. you may have got into trouble because you lack a bounds check on the bins, so you compensated elsewhere in the program such as by limiting the coordinates in the brush tool. but better to fix it all here. and yet, why are you going one bin up and down like this? is this an unnecessary correction of the other problem, that you were ""drawing"" unfilled circles instead of filled ones?",0,0,0,0.7719014883041382,0.6987022161483765,0.9360232949256896,0.0,accept,unanimous_agreement
688244888,1193,"i see the ""magic number"" 2048 repeated in this file. is the sameness of those numbers a coincidence, unimportant to the design -- or is it essential? if it's essential, it is better to give this constant a name, and repeat the name in two places, not the literal number. i think the hop size of 1/4 the window size may need to be used in more places outside this file -- so that hop size should be public in the header as well, as a named constant.",0,0,0,0.9829912185668944,0.9910146594047546,0.9846963882446288,0.0,accept,unanimous_agreement
688245481,1193,as mentioned before -- be careful here too about bounds checking. don't fetch the array at nonexistent subscripts.,0,0,0,0.956998884677887,0.9584577083587646,0.9864896535873412,0.0,accept,unanimous_agreement
688904970,1193,this line is removed in latest commit,0,0,0,0.98823744058609,0.9905545115470886,0.9949843883514404,0.0,accept,unanimous_agreement
688915572,1193,added abstracted method for copying.,0,0,0,0.9865767955780028,0.9900738000869752,0.9951226115226746,0.0,accept,unanimous_agreement
692040865,1193,question: should this rounding happen before or after the update of mstartt and mendt?,0,0,0,0.9823231101036072,0.9919997453689576,0.9915395379066468,0.0,accept,unanimous_agreement
693363907,1193,"if this is all in spectrumview.cpp, then i understand this commit does not yet fix drawing problems.",0,0,0,0.981909155845642,0.9860527515411376,0.9889127016067504,0.0,accept,unanimous_agreement
693363961,1193,"why not 512, which is 1/4 window size? why do you think you need more closely spaced hops?",0,0,0,0.9742650389671326,0.9717286825180054,0.9899073839187622,0.0,accept,unanimous_agreement
693364210,1193,"you can simplify this if-else block just to the one statement after the else. that is because operator [] of std::map may mutate the map. if the data type has a default constructor, then it guarantees the subscripted element is present, creating it on demand in default-constructed state if it was not.",0,0,0,0.9889301657676696,0.9926117062568665,0.9933857321739196,0.0,accept,unanimous_agreement
693365302,1193,i checked again ho mfreqlowerbound and mfrequpperbound are set up when you construct the brush handle. you still exclude the lowest and hightest frequency bins from editing. is that still needed after better bounds checking and removing the +/- 1 hack?,0,0,0,0.986578643321991,0.9903743267059326,0.9940443634986876,0.0,accept,unanimous_agreement
693366036,1193,why are you excluding certain extreme values of x and y coordinates? is that also something made unnecesary by bounds checkin somewhere else?,0,0,0,0.966862678527832,0.9649210572242736,0.9913721084594728,0.0,accept,unanimous_agreement
693366427,1193,"you round sample counts down to find the hop, but maybe round to nearest would work better, correcting the x coordinate less in the worst case. so add 1/2 of hop zie to the long long position, before dividing. similarly, round the y to the nearest frequency bin, not downward.",0,0,0,0.981427013874054,0.9795162081718444,0.9918754696846008,0.0,accept,unanimous_agreement
693366902,1193,"i think mmostrecentx, mmostrecenty, mautoscrolling, and the timerhandler class are all legacies of selecthandle that you don't need. there are still unnecessary things to remove from brushhandle.cpp.",0,0,0,0.9823107719421388,0.9818636178970336,0.9815741181373596,0.0,accept,unanimous_agreement
693367138,1193,perhaps these variable names should be h1 and b1 to suggest the different coordinate space.,0,0,0,0.9839717149734496,0.9896979928016664,0.984598994255066,0.0,accept,unanimous_agreement
693367383,1193,"and maybe h0, b0 and maybe the twice used x -> h and y -> b transformations could each be a little lambda",0,0,0,0.979810357093811,0.9937161803245544,0.9912061095237732,0.0,accept,unanimous_agreement
693367777,1193,"""line drawing"" steps are unchanged. only the coordinate space is different. that's what i expected. (but maybe you will change variable names. also dh, db)",0,0,0,0.96566241979599,0.9885174036026,0.9864541888237,0.0,accept,unanimous_agreement
693368265,1193,i think you need to change this function now so it expects hop and bin values but it is still now expecting sample count and frequency values.,0,0,0,0.9860094785690308,0.9866790175437928,0.9880934357643129,0.0,accept,unanimous_agreement
693371560,1193,"this is before our discussion on the rendering fix in spectrogram, large hop size yields brush stroke that's not looking good. since we have found potential fix for that, will change it to 1/4 of the `mwindowsize`",0,0,0,0.9746025800704956,0.9455812573432922,0.9264156222343444,0.0,accept,unanimous_agreement
693372818,1193,"yes, since dragging out of the track (to non-visible frequency) will generate wrong result for connecting coordinates.",0,0,0,0.904312789440155,0.8366468548774719,0.977915585041046,0.0,accept,unanimous_agreement
693379100,1193,`mmostrecentx` and `mmostrecenty` is used for drawing the outline of the brush tool. will remove the `timerhandler` and `mautoscrolling`,0,0,0,0.9872605800628662,0.9935702085494996,0.9946159720420836,0.0,accept,unanimous_agreement
693418988,1193,is this entire commit only for a debugging feature that you don't use in the final product?,0,0,0,0.9783911108970642,0.9929023385047911,0.9891848564147948,0.0,accept,unanimous_agreement
693419129,1193,"did you mix up the intended definitions of db and dh, sb and sh?",0,0,0,0.9856845140457152,0.9934079647064208,0.9895086288452148,0.0,accept,unanimous_agreement
693419434,1193,"maybe the code is correct, but the substitution of h for x and b for y in variable names isn't consistent, and is sometimes reversed, so it is hard to review it.",0,0,0,0.9362181425094604,0.8213979005813599,0.945823073387146,0.0,accept,unanimous_agreement
693419498,1193,"you are right, these lines should be removed from pr",0,0,0,0.9680747985839844,0.977965772151947,0.982120931148529,0.0,accept,unanimous_agreement
693422901,1193,should that say `spectrumsize -1` ?,0,0,0,0.9883544445037842,0.9939287900924684,0.9902958273887634,0.0,accept,unanimous_agreement
693438775,1193,"sorry you are right about this, have been corrected to stay consistent.",-1,-1,-1,0.984826922416687,0.9923989176750184,0.9920096397399902,-1.0,accept,unanimous_agreement
1245285984,4853,when you need an abstract interface with just one interesting virtual function -- just make an alias for a `std::function `,0,0,0,0.98064923286438,0.9910500049591064,0.9899811148643494,0.0,accept,unanimous_agreement
1245287778,4853,"can the listener and publisher be new attached objects on the project, so that no intrusion in projectmanager is necessary?",0,0,0,0.9880546927452089,0.9939969778060912,0.9941668510437012,0.0,accept,unanimous_agreement
1245293847,4853,i think the listener and publisher classes should just be fused into one.,0,0,0,0.9833504557609558,0.9748275876045228,0.9802964925765992,0.0,accept,unanimous_agreement
1245685077,4853,"sounds like a use case for an attachment, indeed : these blokes are just here to live, no one manipulates them ... the attachment should still be defined in `src`, though, the only possible get-together place for `projecttimesignature` and `tracklist` without modifying the dependency graph.",-1,0,0,0.7200891375541687,0.976568043231964,0.9853493571281432,0.0,accept,majority_agreement
1245685661,4853,"but that'd mean moving the implementation of the publisher down in `src`, meaning more code to re-implement when migrating to qt.",0,0,0,0.987846314907074,0.9916987419128418,0.987927496433258,0.0,accept,unanimous_agreement
900120288,2224,"please update to gpl2-or-later. or even better, please add `/* spdx-license-identifier: gpl-2.0-or-later */` to the top of both export and import files",0,0,0,0.9860769510269164,0.994164764881134,0.9950675964355468,0.0,accept,unanimous_agreement
900122535,2224,"this `#ifdef` since audacity was ported to use cmake based build. it is save, but it could be dropped.",0,0,0,0.988086462020874,0.9951074123382568,0.9946091175079346,0.0,accept,unanimous_agreement
900145911,2224,please add space before `(`,0,0,0,0.9342991709709167,0.9918096661567688,0.9954212307929992,0.0,accept,unanimous_agreement
900157180,2224,please rewrite using `boolsetting`,0,0,0,0.987332046031952,0.994199514389038,0.9952619075775146,0.0,accept,unanimous_agreement
900157235,2224,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
900159935,2224,you can tie to boolsetting,0,0,0,0.9870396256446838,0.989315390586853,0.9951484799385072,0.0,accept,unanimous_agreement
900160496,2224,and this code becomes no longer needed,0,0,0,0.9674277901649476,0.9840956926345824,0.994639813899994,0.0,accept,unanimous_agreement
900161441,2224,please move all the setting objects to the anonymous namespace above. this way you can reuse them!,0,0,0,0.9536173939704896,0.9832808375358582,0.9929127097129822,0.0,accept,unanimous_agreement
900163544,2224,you can write `const auto hybridmode = hybridmodesetting.toggle();`,0,0,0,0.9828937649726868,0.992962658405304,0.994673192501068,0.0,accept,unanimous_agreement
900163850,2224,and this code will go away as well!,0,0,0,0.9141756892204284,0.836961567401886,0.9782142639160156,0.0,accept,unanimous_agreement
900165351,2224,"but you still need to flush the config, so this line remains!",0,0,0,0.957923412322998,0.9799473285675048,0.9942982792854308,0.0,accept,unanimous_agreement
900166661,2224,let's use c++ way [code block],0,0,0,0.9863389730453492,0.9906609654426576,0.995081067085266,0.0,accept,unanimous_agreement
900167540,2224,"please initialise values here, i.e. `wxcheckbox* mhybridmode { nullptr };`",0,0,0,0.9856675267219543,0.994062840938568,0.9958536624908448,0.0,accept,unanimous_agreement
900171542,2224,the correct code is `progressresult::failed`,-1,0,0,0.7968083620071411,0.991610825061798,0.994340181350708,0.0,accept,majority_agreement
900171856,2224,you can just use `= {}` to zero initialize the structure,0,0,0,0.9879624247550964,0.9904114603996276,0.9936996698379515,0.0,accept,unanimous_agreement
900173231,2224,please use setting object you've extracted to the anonymous namespace before,0,0,0,0.9870964288711548,0.992868721485138,0.9954087138175964,0.0,accept,unanimous_agreement
900175952,2224,missing check for `isopened`,0,0,0,0.9651488661766052,0.9926651120185852,0.9741344451904296,0.0,accept,unanimous_agreement
900177859,2224,please remove `this` and use `nullptr`.,0,0,0,0.9865678548812866,0.9914510846138,0.9954043626785278,0.0,accept,unanimous_agreement
900190813,2224,please use `nullptr` to close the context - after this line please write: [code block] this way the context will be closed using raii and won't leak. on top of that - it will allow to simplify the code,0,0,0,0.9856908917427064,0.9843378663063048,0.9940861463546752,0.0,accept,unanimous_agreement
900199075,2224,`constexpr size_t` please,0,0,0,0.9837170839309692,0.991002917289734,0.9950335025787354,0.0,accept,unanimous_agreement
900202771,2224,this call will go away,0,0,0,0.9736913442611694,0.966108739376068,0.9882330298423768,0.0,accept,unanimous_agreement
900204089,2224,`const auto` instead of `uint32_t` (or `const size_t`),0,0,0,0.9873923659324646,0.9935211539268494,0.9926631450653076,0.0,accept,unanimous_agreement
900204703,2224,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
900206553,2224,for consitency: `exporting selected audio as wavpack`,0,0,0,0.9858357906341552,0.99366295337677,0.9957537651062012,0.0,accept,unanimous_agreement
900206863,2224,for consistency: `exporting the audio as wavpack`,0,0,0,0.9865837693214417,0.9935085773468018,0.995512068271637,0.0,accept,unanimous_agreement
900211786,2224,"`getbuffer` reurns `const char*` already, and i see no reason to remove const here: you do not modify the buffer and `const t*` means that you could not modify the data, the pointer itself is modifiable.",0,0,0,0.9822189807891846,0.9905427098274232,0.9932875037193298,0.0,accept,unanimous_agreement
900277760,2224,"wavpack works even with float32 data, so `int16sample` sounds like a pessimiztion to me. i think we should allow user to choose between `16 bit`, `24 bit` and `32 bit float`, similar to exportpcm.",0,0,0,0.9672659039497375,0.9274053573608398,0.9467484951019288,0.0,accept,unanimous_agreement
900285527,2224,"(i believe, that audacity will return you an array of 32 ints, if you request sample24 as an output format for the mixer. am i right, -licameli?)",0,0,0,0.9585264921188354,0.9538073539733888,0.990655243396759,0.0,accept,unanimous_agreement
900286019,2224,this cycle should be adopted to the different sample formats,0,0,0,0.9821584224700928,0.9915177226066588,0.9947484135627748,0.0,accept,unanimous_agreement
900287276,2224,"this can be `return progressresult::failed` now, as memory managment is handled by c++ now",0,0,0,0.8721827864646912,0.9944795370101928,0.9949173927307128,0.0,accept,unanimous_agreement
900289410,2224,"`return progressresult::failed`? and i think that `basicui::showerrordialog` should be used to notify the user about the error in places where codec has failed. (please, see exportpcm for example)",0,0,0,0.967265248298645,0.9930092096328736,0.99357670545578,0.0,accept,unanimous_agreement
900290066,2224,both conversions are redundant,0,0,0,0.9730170965194702,0.681983470916748,0.9742857217788696,0.0,accept,unanimous_agreement
900290152,2224,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
900290412,2224,"please, use `static_cast`. we do not allow c-casts in audacity no more",0,0,0,0.9399440884590148,0.99264258146286,0.9872701168060304,0.0,accept,unanimous_agreement
900291363,2224,sounds like that we should return progressresult::failed (and see above about error messages),-1,0,0,0.8751195669174194,0.9605079889297484,0.9915202260017396,0.0,accept,majority_agreement
900291650,2224,no longer needed!,0,1,0,0.8362836837768555,0.5482490062713623,0.7668503522872925,0.0,accept,majority_agreement
900291893,2224,`failed`,0,0,0,0.8966541290283203,0.9836549162864684,0.9508921504020692,0.0,accept,unanimous_agreement
900292361,2224,`static_cast`,0,0,0,0.9863430261611938,0.9861262440681458,0.9950950145721436,0.0,accept,unanimous_agreement
900296054,2224,unused!,0,-1,0,0.8874341249465942,0.5767177939414978,0.9827383160591124,0.0,accept,majority_agreement
900296205,2224,`return false;`,0,0,0,0.9847732782363892,0.9900240898132324,0.9898089170455932,0.0,accept,unanimous_agreement
900305300,2224,"this function can be rewritten with less nesting involved! [code block] also, this allows to remove `error` from the writeid structure!",0,0,0,0.9755001664161682,0.9683027267456056,0.9531883001327516,0.0,accept,unanimous_agreement
902412129,2224,`reinterpret_cast` please!,0,0,0,0.9686893820762634,0.9857711791992188,0.9624525904655457,0.0,accept,unanimous_agreement
902414023,2224,"this can be simplified as `wavpackbuffer[j*numchannels + i] = *mixed++;`, not critical",0,0,0,0.9868147373199464,0.9917091727256776,0.9944901466369628,0.0,accept,unanimous_agreement
902417415,2224,"for simplicity we can cache that block in memory, but this will do too. very good!",1,1,1,0.9910945296287536,0.9952110648155212,0.9941505789756776,1.0,accept,unanimous_agreement
902417968,2224,we generally prefer to have an empty new line at the end of the file,0,0,0,0.9837809801101683,0.9902718663215636,0.9926855564117432,0.0,accept,unanimous_agreement
902420526,2224,"hmm, i'm not sure why this is needed. and i think we need to flush settings here",0,0,0,0.8179870247840881,0.5229456424713135,0.8886750340461731,0.0,accept,unanimous_agreement
902475187,2224,"we can drop ifdef here, similar to export",0,0,0,0.9888533353805542,0.9940528273582458,0.9954162836074828,0.0,accept,unanimous_agreement
902476604,2224,not really needed,0,0,0,0.964015781879425,0.8377049565315247,0.929262101650238,0.0,accept,unanimous_agreement
902482123,2224,this can be moved up! [code block],0,0,0,0.9762834310531616,0.9390587210655212,0.9512469172477722,0.0,accept,unanimous_agreement
902484090,2224,"it is advisable to use references whenever we have non-null guarantees. it is not critical here, because check for `nullptr` is made right on top of it, but simplifies reading the code quite a bit.",0,0,0,0.9735897779464722,0.9879004955291748,0.982268452644348,0.0,accept,unanimous_agreement
902488217,2224,i think it would be better to call `getmaxblocksize()` on the first channel. it will return the number of samples audacity uses for a single block.,0,0,0,0.9880508184432985,0.9919084906578064,0.985942542552948,0.0,accept,unanimous_agreement
902488672,2224,i preffer to use `const` as much is possible!,0,0,0,0.9783153533935548,0.907827854156494,0.9924296736717224,0.0,accept,unanimous_agreement
902533050,2224,"few thoughts: * even though no dithering is expected here, appending sample by sample can become a bottlneck here * 32 bit depth does not gurantee float samples, this should be checked seprately so it looks like we have 3 cases here: 1. 24-bit or in fp mode: no conversion is needed at all. the loop can be as simple as: [code block] 2. 16-bit: create a temp buffer of `int16_t`, copy stripped data there, append to the channel in a way similar to the fisrt case 3. 32-bit: create a temp buffer of floats, convert int32 data into there (dividing by int min/max), copy data channels",0,0,0,0.8967785239219666,0.9785143733024596,0.9625678062438964,0.0,accept,unanimous_agreement
902534531,2224,this breaks handling of cancelled case,0,0,0,0.9614518880844116,0.8698680400848389,0.8080070614814758,0.0,accept,unanimous_agreement
902539439,2224,we do not allow such allocations in most of the cases. this case can be written as [code block],0,0,0,0.9834288954734802,0.994732141494751,0.9940958023071288,0.0,accept,unanimous_agreement
902539664,2224,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
902547525,2224,the choice of separator looks a bit odd to me. why not forward slash or '\n'?,-1,-1,-1,0.896027147769928,0.9407690167427064,0.6515868902206421,-1.0,accept,unanimous_agreement
904753835,2224,"in the `exportwavpack.cpp` file, i think there were some issues with float 32 bit export. earlier, i just passed 32 bit int values for float sample export. so, i think while importing it was getting imported as 32 bit int (before adding special cases for float sample import as you suggested). though it was ok while importing in audacity ( wtih the previous code before applying your suggestions for import), i tried to play the 32 bit exported wavpack file using the vlc media player and it sounded like corrupted. now, when i converted the `mixed` data into `float` and then into `int32_t` while exporting as 32 bit float, both vlc media and audacity (after applying your suggestions) opened and played the 32 bit float files correctly.",0,0,0,0.6507242321968079,0.976399540901184,0.9504715204238892,0.0,accept,unanimous_agreement
904764235,2224,"this branch should have additional condition, something like ``` if (mformat == int24sample || (wavpackgetmode(mwavpackcontext) & mode_float) == mode_float)",0,0,0,0.9888628721237184,0.9937174320220948,0.995366096496582,0.0,accept,unanimous_agreement
904767000,2224,please use `std::numeric_limits ::max()`,0,0,0,0.9811087250709534,0.993485391139984,0.9950987696647644,0.0,accept,unanimous_agreement
904767949,2224,"we can move it to the top, and reuse it's value in decoding cycle! please mark `const` as well",0,0,0,0.9537796974182128,0.936629593372345,0.9950920343399048,0.0,accept,unanimous_agreement
904772293,2224,"i think you should set `config->float_norm_exp: = 127;` to enable fp mode in wavpack. in any case - you should consult `wavpackgetmode` to check, if you need to convert the values. `1u << 31` - `std::numeric_limits ::max()` please.",0,0,0,0.9831717014312744,0.9940901398658752,0.9903941750526428,0.0,accept,unanimous_agreement
904773150,2224,"(value `127` is an exponent bias for ieee754 32-bit float values. we have 8 bits for exponents, so the bias is `2^7 - 1`)",0,0,0,0.986522614955902,0.9945874214172364,0.9931635856628418,0.0,accept,unanimous_agreement
905997789,2224,"minor, but i expect a compiler warning here. let's add `static_cast ` here. sorry i've missed that before...",-1,-1,-1,0.9892632365226746,0.9891123175621032,0.9940031170845032,-1.0,accept,unanimous_agreement
906003619,2224,"not that important here, but is is best to avoid memory allocations in such loops. allocations can be quite costly.",0,0,0,0.8218987584114075,0.8567438125610352,0.95875084400177,0.0,accept,unanimous_agreement
1444013109,2224,i am curious to know why :d,1,1,1,0.9595629572868348,0.977042317390442,0.9897945523262024,1.0,accept,unanimous_agreement
1210105253,4746,`const auto sequence =`,0,0,0,0.9837203025817872,0.98733252286911,0.98908793926239,0.0,accept,unanimous_agreement
1210105384,4746,`const auto sequence =`,0,0,0,0.9837203025817872,0.98733252286911,0.98908793926239,0.0,accept,unanimous_agreement
1210109821,4746,am i correct in understanding that this commit doesn't change any behaviour?,0,0,0,0.88966304063797,0.9700520038604736,0.9891707301139832,0.0,accept,unanimous_agreement
1210135481,4746,`sharedpointer ()` ?,0,0,0,0.986979365348816,0.9928412437438964,0.9944169521331788,0.0,accept,unanimous_agreement
1221277527,4746,looks like both branches of this `if` do the exact same...,0,0,0,0.9784563779830932,0.9878877997398376,0.9900978803634644,0.0,accept,unanimous_agreement
1221323418,4746,`const auto &input` (below too),0,0,0,0.987751841545105,0.9921922087669371,0.9952732920646667,0.0,accept,unanimous_agreement
1221335343,4746,why not using `const std::optional `? reading usages with `-1` is puzzling.,-1,0,0,0.5793214440345764,0.8491821885108948,0.7812346816062927,0.0,accept,majority_agreement
1221364940,4746,"could be const, right?",0,0,0,0.9848098158836364,0.9868289828300476,0.9854987859725952,0.0,accept,unanimous_agreement
1221375158,4746,shouldn't _all_ tracks be leaders now?,0,0,0,0.9731139540672302,0.993232488632202,0.9890428185462952,0.0,accept,unanimous_agreement
1221387152,4746,i don't understand why we have to make this check here. it seems to me that this implementation would result in `tracklist::nchannels(rightchanneltrack) != rightchanneltrack.nchannels()`.,0,0,0,0.95792555809021,0.8441070914268494,0.8280983567237854,0.0,accept,unanimous_agreement
1221391691,4746,"so until we have the real deal, the leader will be the one iterating over all channels. nice.",1,1,1,0.9660762548446656,0.9874008297920228,0.5314338207244873,1.0,accept,unanimous_agreement
1221422271,4746,"no, track objects are not leaders only yet. that is a farther refactoring goal.",0,0,0,0.9784507751464844,0.9860515594482422,0.9866580367088318,0.0,accept,unanimous_agreement
1221426186,4746,"that is intended. a non-leader track will count only itself and later channels and give access through the wide sample sequence interface to those channels only. (i wrote that in general terms anticipating future more than stereo tracks). i expect track painting code will use the widesamplesequence abstraction too, and will require objects that only view one side.",0,0,0,0.9797793030738832,0.9911394715309144,0.9922818541526794,0.0,accept,unanimous_agreement
1223988858,4746,"`leftchanneltrackofstereotrack.nchannels()` must equal 2, and it will, that's fine. `rightchanneltrackofstereotrack.nchannels()` now equals 1. what code needs to do such check? unless there really is a need for it, i'd at least assert false for the time where we still have the concept of leaders.",0,0,0,0.9663663506507874,0.9913183450698853,0.9878159165382384,0.0,accept,unanimous_agreement
1223994448,4746,looks unused.,0,-1,0,0.546953558921814,0.6810610294342041,0.955072820186615,0.0,accept,majority_agreement
1223997733,4746,here as well: why not `optional `,0,0,0,0.9794874787330629,0.9912972450256348,0.9939019680023192,0.0,accept,unanimous_agreement
1224034200,4746,"referring to [a link]: trying to figure out whether `sequence` is expected to be a leader or not. given `channel < 0`, if it is a leader, it will return as many instances as the track has channels. if not, it will return only one instance. then i suppose that clients of this function must take care not to call it with `channel = -1` and iterate over all tracks, else there would be more than one instance for the right channel of a stereo track. disclaimer: i probably still miss some context around this function.",0,0,0,0.7686965465545654,0.9584730863571168,0.965472936630249,0.0,accept,unanimous_agreement
1224062590,4746,"side note : now debugging splitting a stereo track to mono, as this is an ""multichannel"" effect. it hit `assert(!partner->mpgroupdata);` in track.cpp, line 216. might be related to the work you did on having tracks share mute, gain and other properties. i guess this assert could be removed, but it will require your attention.",0,0,0,0.9814687967300416,0.983911633491516,0.9559157490730286,0.0,accept,unanimous_agreement
1224088317,4746,"oops: always false if `channel = -1`, due to the implicit conversion from signed to unsigned.",0,-1,-1,0.9377004504203796,0.6122221946716309,0.9384061694145204,-1.0,accept,majority_agreement
1224113671,4746,"looks like this function, when used by `pertrackeffect`, takes care that `sequence` is always a leader. i wonder if this actually always must be true. if it must, please assert. i'm giving up on reviewing that part, at least for now, i can't grasp all possible situations.",-1,-1,0,0.7716853022575378,0.5978706479072571,0.8922163248062134,-1.0,accept,majority_agreement
1224121854,4746,please assert in this lambda that `input.psequence` is a leader.,0,0,0,0.987166941165924,0.9945125579833984,0.9950673580169678,0.0,accept,unanimous_agreement
1224124063,4746,const,0,0,0,0.9770036339759828,0.9538535475730896,0.8837863802909851,0.0,accept,unanimous_agreement
1224132088,4746,"just realized that `mix.cpp` also uses this function, i reckon for the real-time effects. in this context `channel == -1`, but it's only called with leader sequences. so looks correct in that case too.",0,0,0,0.9752311706542968,0.9852762818336488,0.9751105904579164,0.0,accept,unanimous_agreement
1224135099,4746,"it's unfortunate that ""width"" here is used for bit depth when we're introducing ""wide"" sequences.",-1,-1,-1,0.9314920902252196,0.9650518298149108,0.962653398513794,-1.0,accept,unanimous_agreement
1224189285,4746,"i can't do that. nothing in `widesamplesequence` mentions the notion of ""leader"" any more. nor do i want to add some virtual functions to it just so i could make the assertion.",0,0,0,0.6470906138420105,0.9398045539855956,0.9639805555343628,0.0,accept,unanimous_agreement
1224194862,4746,why not getting the envelope values once and then iterate over the channels to apply it on the entries in `msamplequeue` ?,0,0,0,0.9806272387504578,0.9935362339019777,0.9916942715644836,0.0,accept,unanimous_agreement
1224197445,4746,"same here, i think `getenvelopevalues` can be factored out of the loop.",0,0,0,0.9883053302764891,0.9931226372718812,0.9928817749023438,0.0,accept,unanimous_agreement
1224201296,4746,would be nice to access const references `mt0` and `mt1` .,0,0,0,0.9071125984191896,0.9811010360717772,0.9759454131126404,0.0,accept,unanimous_agreement
1224218506,4746,"the conceptual difference in `waveclip` between ""play"" and ""sequence"" start times is the former accounts for trimming, the other not. i find this naming fairly sensible. now `track` has `virtual double getstarttime() const = 0`, `sampletrack` has this `getsequencestarttime`. `wavetrack` implements `getstarttime` by calling `getplaystarttime` on its clips. as a reader used to the `waveclip` convention, i first thought it was a bug for `mixersource` to call `seq->getsequencestarttime()` to decide where to start getting the samples from. this pr looks like a good opportunity to rename these two.",0,0,0,0.9305875897407532,0.992262363433838,0.966835618019104,0.0,accept,unanimous_agreement
1224224775,4746,i still haven't figured out the need for queuing in this class. isn't the caching provided by `sampletrackcache` sufficient?,0,0,0,0.8602340221405029,0.9758376479148864,0.9623480439186096,0.0,accept,unanimous_agreement
1224377381,4746,"alternatively, `std::max_element` over clips.",0,0,0,0.98831045627594,0.9924968481063844,0.992285132408142,0.0,accept,unanimous_agreement
1224384776,4746,right.,0,0,0,0.9566289782524108,0.9793882369995116,0.9789980053901672,0.0,accept,unanimous_agreement
1224428951,4746,"sorry, i want to overrule that opinion. i expect a transitional period in which tracks are not all leaders but painting is reimplemented in terms of another abstraction that will make use of this. ultimately there will be no remaining notion of leader at all.",-1,-1,-1,0.9885182976722716,0.990866243839264,0.9558338522911072,-1.0,accept,unanimous_agreement
1224430152,4746,good catch.,1,1,1,0.9640093445777892,0.9815194606781006,0.9776482582092284,1.0,accept,unanimous_agreement
1224449729,4746,"are you saying the naming may cause confusion with the different terms in waveclip? i will change the name simply to `getstarttime` and `getendtime` as in track. i got compilation errors when i did it that way at first, but i can fix that error another way without inventing other names.",0,0,0,0.95095694065094,0.9692705273628236,0.9897214770317078,0.0,accept,unanimous_agreement
1224716577,4746,sounds good.,1,1,1,0.920201539993286,0.9417163729667664,0.857205867767334,1.0,accept,unanimous_agreement
1225830847,4746,i disagree. the sequence object is here cast to a wavetrack and the track interface is still really needed.,-1,-1,0,0.7786316871643066,0.9248431921005248,0.7715623378753662,-1.0,accept,majority_agreement
1225831307,4746,likewise i disagree here.,-1,-1,-1,0.7573769092559814,0.915091872215271,0.7210878133773804,-1.0,accept,unanimous_agreement
1225831618,4746,"correct, the commit ""update msamplepos in just two places, at function exits"" is not intended to change behavior. the transformation of `mixersource` needs to be careful, and i'm showing small steps of transformation in these commits. and still i made a mistake which now has its fix-up commit.",0,0,-1,0.7586604356765747,0.7590503692626953,0.5172568559646606,0.0,accept,majority_agreement
1225832150,4746,"you would mean `widesamplesequence` now with changes of names, but that would not compile. anyway, this line (changed in the first commit) is ultimately changed again, at ""mixersource uses sampletrackcache ""widely"" and doesn't use track...""",0,0,0,0.9854125380516052,0.9919893145561218,0.990688681602478,0.0,accept,unanimous_agreement
1225845950,4746,"adding very little to clarity in my opinion, when the scope of the variable is so small.",0,0,0,0.7847408056259155,0.9077137112617492,0.8232204914093018,0.0,accept,unanimous_agreement
1225855449,4746,"true, some further possible simplification after the loop splitting.",0,0,0,0.9860305786132812,0.9904528856277466,0.9905097484588624,0.0,accept,unanimous_agreement
1225857031,4746,"but that also makes the assumption that envelope values do not depend on the channel. that is not true now in all possible tracks that you can construct by joining mono channels, but as in other parts of this pull request, i will allow myself in these transformations to disregard such cases.",0,0,0,0.9803491830825806,0.9910571575164796,0.9942336678504944,0.0,accept,unanimous_agreement
1225861074,4746,i agree,0,0,0,0.934429407119751,0.8392824530601501,0.9744842648506165,0.0,accept,unanimous_agreement
1225863099,4746,"this code was older than my sampletrackcache, and that cache was also reused in spectrogram drawing. the extra layer of queue is still useful to handle the mismatch of the number of samples fetched from the track, and the number of samples really produced, because of resampling. i assume there is nothing for me to change in response because we will remove that cache anyway.",0,0,0,0.9844186305999756,0.987027645111084,0.9916712045669556,0.0,accept,unanimous_agreement
1225863126,4746,i don't care too much,-1,-1,-1,0.9815940856933594,0.8124545812606812,0.4807148575782776,-1.0,accept,unanimous_agreement
1225864814,4746,"see commits 9f7d6c31b2d9fb2d4a9d01801673606830d9bab1 and c0f7aecfdb16c4cbd8cd240665a2fa7b5376d231, now merged.",0,0,0,0.9882242679595948,0.990619421005249,0.9916297793388368,0.0,accept,unanimous_agreement
1225865212,4746,"as i said, i can't assert that. but as you will see in the next round of review, the condition must be ensured by `pertrackeffect.cpp` to correct a bug in an earlier version of this branch, which caused assertion violations when generating a stereo chirp.",0,0,0,0.972063422203064,0.9928794503211976,0.9929081201553344,0.0,accept,unanimous_agreement
1225866023,4746,"it seems too much to me, when only a few small positive values are needed.",-1,-1,-1,0.6586224436759949,0.7752002477645874,0.8718339204788208,-1.0,accept,unanimous_agreement
1226246230,4746,right. i must have missed the cast somehow.,-1,0,0,0.715392529964447,0.9241467118263244,0.9646539092063904,0.0,accept,majority_agreement
1226246601,4746,right. i must have missed the cast somehow.,-1,0,0,0.715392529964447,0.9241467118263244,0.9646539092063904,0.0,accept,majority_agreement
1226294227,4746,"right, this is just a question for my understanding in the prospect of the caching refactoring, not a request for change. i see where it comes from now, given the layer of resampling, thanks for the explanation. when you say ""remove that cache"", you are talking about the `sampletrackcache`, right? if so, this caching for resampling is still a problem to time stretching, since it requests 65536 samples at once. this isn't as bad as the megabyte currently queried by `sampletrackcache`, but still this will likely be a performance bottleneck. how to solve this? reducing its size? i suppose the queue must have size at least as large as the largest playback buffer size possible, which might be tricky to find out and most of the time still unnecessary large. the `stretchedwidesamplesequence` must solve the same problem : for a given requested output length, it doesn't know in advance how many samples must be pulled from its source. this makes me wonder if a good approach would be yet another, resampling decorator. then `mixersource` would need only one simpler method as opposed to currently two complex ones (`mixsamerate` and `mixvariablerates`). the processing chain would then go `mixersource > (resamplingsequence) > stretchingsequence > wavetrack`, with `resamplingsequence` injected only if needed. (`stretchingsequence` could also do the caching as proposed in my draft, or we'd pass it a `cachingsequence`, whichever.)",0,0,1,0.7698997259140015,0.9371578097343444,0.8581492304801941,0.0,accept,majority_agreement
1226314568,4746,"another interesting aspect to the resampling decorator: it could be freely injected at some other stage of the processing chain than the one proposed. i guess it's best to have it after stretching, yet who knows, there may be surprises along the way.",0,0,0,0.9278113842010498,0.9781777858734132,0.9543592929840088,0.0,accept,unanimous_agreement
1226398728,4746,"in that case it is not so much about clarity but rather easing optimization on the compiler. not sure that in such cases it really _does_ make it easier on the compiler, but for us programmers it's a very easy thing to do.",0,0,0,0.83449387550354,0.907623052597046,0.9790894389152528,0.0,accept,unanimous_agreement
1226408163,4746,"i still can't grasp the use of `rightchanneltrackofstereotrack.nchannels()` always being equal to 1, even in terms of painting. but all right, i can live with that for now.",0,0,0,0.868188202381134,0.9525098204612732,0.645024836063385,0.0,accept,unanimous_agreement
1235306842,4746,"`trackrange` are selected leaders, so why is it necessary to use `findleader` and not just `find` ?",0,0,0,0.9832487106323242,0.994308054447174,0.9920750856399536,0.0,accept,unanimous_agreement
1235326417,4746,the current behavior in audacity is that all selected tracks will disappear and be replaced by one track with the rendered audio. now this is removing only the first of selected leaders (causing the other leaders to move up in the ui) and appends the rendered track to the bottom. i don't expect this behavior change to be wanted.,0,0,0,0.91475510597229,0.9393890500068665,0.9840649962425232,0.0,accept,unanimous_agreement
1235329514,4746,"before ""mix and render"": ![a link] after: ![a link]",-1,0,1,0.8986390829086304,0.9871531128883362,0.6012985110282898,,review,no_majority_disagreement
1235352954,4746,"because, operator ++ behaves differently, iterating leaders only and not channels. this change makes `insertionpoint` correct. without it, just making a new empty stereo track, and mixing-and-rendering, corrupts the track list and causes the crash.",0,0,0,0.90911465883255,0.951336145401001,0.9900197982788086,0.0,accept,unanimous_agreement
1235366946,4746,"you are right. failure to remove right channels was part of this bug, but now it works correctly only when there is one selected track. so please review the new, second fixup.",0,0,0,0.9281260371208192,0.907931625843048,0.9398431777954102,0.0,accept,unanimous_agreement
1520464592,6068,"this is a valid value in expected range. if you already support c++23 in your tool-chain, you might better use `std::expected` as return-type, otherwise a `std::optional` or at least a negative value to be able to sort out non-valid input.",0,0,0,0.9887232780456544,0.9926502108573914,0.9936630725860596,0.0,accept,unanimous_agreement
1520471662,6068,"maybe check, if it is save to assume `float` is 32bit on all machines. but i think, it is....",0,0,0,0.9611474871635436,0.9850485920906068,0.9888285994529724,0.0,accept,unanimous_agreement
1520476658,6068,you might want to add an early return for factor is not fullfilling expectations (`factor <= 0`),0,0,0,0.9867699146270752,0.9931255578994752,0.9934855103492736,0.0,accept,unanimous_agreement
1520489828,6068,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
1520504166,6068,"as you use `factor` for calculating the bounds of your iterators, it's maybe a good idea to check `factor` is in expected range.",0,0,0,0.9723185300827026,0.983574628829956,0.9901636242866516,0.0,accept,unanimous_agreement
1520506147,6068,shouldn't it be `1.f / env`?,0,0,0,0.9848270416259766,0.994361162185669,0.9928855299949646,0.0,accept,unanimous_agreement
1520509149,6068,"as `env` can still be close to infinity small, the resulting weight might get a huge number introducing noise and artifacts. i could imagine, that either limiting `1/env` or the weight would result in less audible artifacts.",0,0,0,0.9548903107643129,0.9628495573997498,0.974623203277588,0.0,accept,unanimous_agreement
1520941304,6068,"i didn't know `expected`, that's interesting, thank you. unfortunately we still c++17, and even our ci toolchain for macos doesn't support the full c++17 std lib, e.g. ` `. i don't know the exact version numbers, but the oldest macos version we release audacity for cannot deal with the most recent c++ versions. also, we are relatively lenient in terms of safety: we document functions with `` conditions, assert these preconditions, but generally don't otherwise deal with error handling. you won't find this pattern often, where the return value is checked for error. seems to work for us :person_shrugging: on the other hand, unit-testing is encouraged, and i have been lazy doing this time...",1,1,1,0.8798633813858032,0.9288809895515442,0.964634358882904,1.0,accept,unanimous_agreement
1520944888,6068,"i will assert at the beginning of `formantshifter::process` like i should have, given the pre-condition stated in that methods documentation. concerning this particular method, given its narrow scope, it usually is tolerated without.",0,0,0,0.9866609573364258,0.990694522857666,0.9943897128105164,0.0,accept,unanimous_agreement
1521158295,6068,"a remnant of me copying chunks from the [a link] to get started. it's not a great protection, because, as you commented someplace else, the weights can still end up being huge. i expect this can happen if for some reason the input signal has a frequency region of near-zero values. i'm about to push a protection that i think makes sense: the purpose of formant preservation is to boost or attenuate spectral regions by some reasonable amount of decibels. this commit will limit the amplification to +20db, which is plenty for our purpose and then avoid crazy amplification.",0,0,0,0.5385578274726868,0.4673827588558197,0.8259280920028687,0.0,accept,unanimous_agreement
1521160597,6068,"since `env` has type `float`, i expect `1` to be typecast to float, too. but sure, it doesn't hurt adding the `.f`.",0,0,0,0.9410269856452942,0.9661591053009032,0.9917367100715636,0.0,accept,unanimous_agreement
1521161890,6068,"agreed, limiting the weights it will be.",0,0,0,0.9831281900405884,0.9698246717453004,0.992444097995758,0.0,accept,unanimous_agreement
1521166433,6068,-licameli would you be so kind to review that i pasted here your discord message in a relevant way?,0,0,0,0.93148672580719,0.943135142326355,0.5946852564811707,0.0,accept,unanimous_agreement
1521563419,6068,i am confused. why `lib-utility` instead of `lib-math`?,-1,-1,-1,0.8562321066856384,0.8142824172973633,0.9377732872962952,-1.0,accept,unanimous_agreement
1521578196,6068,"`lib-math` depends on `lib-soxr`. i'm reluctant to let the time-and-pitch depend on this mainly because it compiles pffft functions which are also found in `lib-fft`, another dependency of time-and-pitch.",0,0,0,0.870618462562561,0.5523601174354553,0.739447832107544,0.0,accept,unanimous_agreement
1521770782,6068,"i think this should be moved into a separate directory, and with `requirements.txt`",0,0,0,0.9877007007598876,0.9932706952095032,0.9876573085784912,0.0,accept,unanimous_agreement
1521779139,6068,do you plan to have different implementation?,0,0,0,0.97705078125,0.940076470375061,0.9927009344100952,0.0,accept,unanimous_agreement
1521779928,6068,why is this a part of a logger (which is a logger otherwise)?,0,0,0,0.958525538444519,0.987528383731842,0.9888984560966492,0.0,accept,unanimous_agreement
1521783069,6068,"i believe you only use it for tests. it's way too intrusive, tbh",-1,-1,-1,0.982386350631714,0.9705228805541992,0.9908520579338074,-1.0,accept,unanimous_agreement
1521787959,6068,you use `formantshifterlogger` directly here. this happens because `getfftsizeoverride` must not be a part of it. i think that you should have an empty logger for production and use formantshifterlogger only for tests. configurability must not be a part of logger.,0,0,0,0.9870412349700928,0.9945611357688904,0.992583394050598,0.0,accept,unanimous_agreement
1521797733,6068,you do not utilize the interface again. was there any need for it then?,0,0,0,0.9717769622802734,0.9804952144622804,0.991552233695984,0.0,accept,unanimous_agreement
1521820034,6068,"we spent a lot of time and effort to optimize it, it is weird to see it go.",-1,-1,-1,0.9864631295204164,0.990728497505188,0.9893613457679749,-1.0,accept,unanimous_agreement
1521821576,6068,"paul has introduced the class for aligned vectors, hasn't he?",0,0,0,0.9783920049667358,0.9911288022994996,0.9927994012832642,0.0,accept,unanimous_agreement
1521823952,6068,"you go from simd to scalar algorithm, and i don't see any good reason for that",0,0,0,0.777062714099884,0.5256071090698242,0.9585205912590028,0.0,accept,unanimous_agreement
1521826809,6068,and why is it a problem? it doesn't introduce a circular dependency.,0,0,0,0.9451617002487184,0.9157239198684692,0.9626645445823668,0.0,accept,unanimous_agreement
1521828029,6068,"and probably, it should be called fastlog2 or whatever.",0,0,0,0.9868640303611756,0.9925904273986816,0.9847418069839478,0.0,accept,unanimous_agreement
1521830890,6068,"i don't like it, but i don't have a strong opinion, either",-1,-1,-1,0.979524314403534,0.983959138393402,0.9834100604057312,-1.0,accept,unanimous_agreement
1521840769,6068,i don't understand this point. why do we need it deterministic? how much do we care about this determinism? provided that `srand` modifies the global state i wonder if something like [a link] should be used instead.,0,-1,0,0.5223175287246704,0.5055431723594666,0.5228180289268494,0.0,accept,majority_agreement
1521842931,6068,"i understand that this is a new code, but i will stress that it is located in a known hot point",0,0,0,0.9532269835472108,0.9235791563987732,0.9823340177536012,0.0,accept,unanimous_agreement
1521843527,6068,why this include is in the header?,0,0,0,0.974663496017456,0.9877793192863464,0.9918245673179626,0.0,accept,unanimous_agreement
1521882356,6068,"not a circular dependency, but how can you be confident that it's the `lib-fft` symbols that will be used?",0,0,0,0.9866684675216676,0.9929941296577454,0.9875730872154236,0.0,accept,unanimous_agreement
1521885659,6068,what is `requirements.txt` ?,0,0,0,0.9872297644615172,0.9936845898628236,0.9952351450920104,0.0,accept,unanimous_agreement
1521890120,6068,no. it ended up being a way for me to expose only relevant methods to `formantshifter` and the rest (`newsamplescoming` and override getters) to whoever integrates logger and shifter together (`staffpadtimeandpitch`).,0,0,0,0.9777517914772034,0.9922266006469728,0.9895827770233154,0.0,accept,unanimous_agreement
1521891351,6068,your script has non-trivial dependencies. `requirements.txt` is a standard python to define such dependencies.,0,0,0,0.986588418483734,0.9703108668327332,0.9945868253707886,0.0,accept,unanimous_agreement
1521893360,6068,"because it's often related by usage: these allow overriding otherwise unexposed parameters, the effect of which one might not only need to hear but also to visualize, which then really implies the logger.",0,0,0,0.9801499843597412,0.9784979224205016,0.9902358651161194,0.0,accept,unanimous_agreement
1521896421,6068,it's convenient. what problem do you see with it?,0,1,0,0.9688619375228882,0.9421617984771729,0.9554353952407836,0.0,accept,majority_agreement
1521897679,6068,i rest my case; such configuration must not be a part of the logger.,0,0,0,0.9800693988800048,0.8995818495750427,0.980662763118744,0.0,accept,unanimous_agreement
1521898934,6068,"provided that you need a custom config in audacity itself, why not use the ""setting""?",0,0,0,0.9849709868431092,0.9943422079086304,0.9931269884109496,0.0,accept,unanimous_agreement
1521901490,6068,it is a hack that hardcodes some random path into the build for no reason.,-1,-1,-1,0.6109873056411743,0.6394631266593933,0.8611807227134705,-1.0,accept,unanimous_agreement
1521902915,6068,"this removal is only the removal of an earlier commit in this very pr ; the older code is left untouched. bad things happen if i use `vo::rotate` because it expects aligned float pointers, and `pspec + imagingbeginbin` isn't necessarily aligned.",-1,0,0,0.8475499749183655,0.9457441568374634,0.9005915522575378,0.0,accept,majority_agreement
1521904382,6068,"not necessary here, due to [a link].",0,0,0,0.9718530774116516,0.992302417755127,0.992733597755432,0.0,accept,unanimous_agreement
1521906543,6068,static-asserting in the header file?,0,0,0,0.9873347282409668,0.99333256483078,0.9935395121574402,0.0,accept,unanimous_agreement
1521908741,6068,writing unit tests in a header file.,0,0,0,0.9875574111938475,0.9909806847572328,0.9909479022026062,0.0,accept,unanimous_agreement
1521935294,6068,"sounds good, i'll try.",1,0,1,0.78465336561203,0.5135318636894226,0.8972635865211487,1.0,accept,majority_agreement
1521941525,6068,"yes, but i cannot think of a more optimized alternative, and there are extenuating circumstances: * only gets executed for clips that are pitch-shifted downwards, * for a number of bins that is at most a quarter of the fft size, when down-shifted by an octave, and less for lesser shift amounts.",0,0,0,0.9098789691925048,0.961903989315033,0.9854294061660768,0.0,accept,unanimous_agreement
1521942551,6068,that's a remnant of me using something more sophisticated. can be removed i think.,0,0,0,0.7530044317245483,0.8501261472702026,0.9861393570899964,0.0,accept,unanimous_agreement
1521942994,6068,consider me convinced:-),1,1,1,0.9505376815795898,0.6888857483863831,0.9867728352546692,1.0,accept,unanimous_agreement
1522825132,6068,you mean as defined in `prefs.h`? i'd still need a write mechanism.,0,0,0,0.988701343536377,0.9931267499923706,0.9903449416160583,0.0,accept,unanimous_agreement
1522827382,6068,can you explain please?,0,0,0,0.980401575565338,0.9881700277328492,0.986355721950531,0.0,accept,unanimous_agreement
1522862383,6068,"sure: if e.g. a method like `std::optional getfftsizeoverride()` finds `overridefftsizeexponent.txt` in `logdir` that has a valid int value, it will use this rather than the production value. i can hear the result change on the fly by editing that file during playback. even if i used the prefs, i'd need this functionality, and it should not be exposed to the user. (and in this regard it's actually not bad that `logdir` has some random string in the production build, as it makes it near impossible for the user to inadvertently have that file at that path and get a non-production parameter.)",0,0,0,0.9212992191314696,0.9461590051651,0.9609009623527528,0.0,accept,unanimous_agreement
1522953750,6068,"well, you've just made it worse. during the playback, do you randomly try to open a file? i wouldn't call that a good idea at all. open/read/close are syscalls. they are not cheap, and they can cause havoc in some scenarios. do we want such an approach to support debug scenarios tied strictly to one machine? i say we don't. linux package maintainers will disagree. you make the build result depend on the file system structure of the computer used to build it. --- i'm very much confused by this approach. probably, it doesn't cause any noticeable difference for you, but i am very much against it. please create a separate config for the pitch-shifter. if you want to stick to reading files for now, please make access to the files conditionally compiled. i also prefer you use an executable/data path as a root for those files. in the future, if we want to expose these settings to users, it would be a very quick and easy operation.",-1,-1,-1,0.9607270956039428,0.9723591804504396,0.9906705617904664,-1.0,accept,unanimous_agreement
1523018012,6068,"for a/b comparison before and after some algorithmic tweaks, for example. i might want to make sure that my modifications do affect the signal, so i render it once before and once after. if the process weren't deterministic i couldn't tell.",0,0,0,0.9816138744354248,0.958358108997345,0.9851491451263428,0.0,accept,unanimous_agreement
1523054062,6068,"i don't understand how that matters: it's intended for development and functional only for local builds. but i don't mind using an app-data directory. i was lazy but it has advantages. i didn't have this in mind. i want to reduce conditional compilation to a maximum to avoid code becoming outdated, but if it's only just around the file opening that's completely fine.",-1,-1,0,0.7338451147079468,0.489617109298706,0.4301583766937256,-1.0,accept,majority_agreement
1523064406,6068,"you push it to production builds, and that matters. you push the code only needed for the feature tuning into the production build. expensive code.",-1,0,0,0.8458793759346008,0.9608351588249208,0.9860516786575316,0.0,accept,majority_agreement
1523263739,6068,what compilation warning was fixed by the first commit?,0,0,0,0.9827119708061218,0.9871871471405028,0.9929872155189514,0.0,accept,unanimous_agreement
1523269395,6068,loss of precision warning (size_t vs int or the other way round),0,0,0,0.953682541847229,0.9791836738586426,0.9391289949417114,0.0,accept,unanimous_agreement
1523315705,6068,"this page recommends `add_compile_definitions` instead [a link] you use this macro in `formantshifterlogger.cpp`. i would choose a different name for the macro, like this_directory, just so we aren't confusing compile-time preprocessor symbols with cmake configure-time variables. this commit fails to compile. [code block]",0,0,0,0.9778044819831848,0.9952436089515686,0.988242208957672,0.0,accept,unanimous_agreement
1523325347,6068,perhaps a `complexfloat` alias will be convenient,0,0,0,0.9874717593193054,0.9933564066886902,0.9906308054924012,0.0,accept,unanimous_agreement
1523516686,6068,this unnecessary temporary vector construction makes me wish we had `std::span` instead. maybe instead let `printpythonvector` take a range of iterators as two arguments.,0,0,-1,0.8229565024375916,0.9784342646598816,0.7701005935668945,0.0,accept,majority_agreement
1523692769,6068,this code only works on windows,0,0,0,0.9876307845115662,0.9860075116157532,0.9939354062080384,0.0,accept,unanimous_agreement
1524301125,6068,"that's all right, i only need it there, and if someone needs it elsewhere, she can generalize it.",0,0,0,0.9717578291893004,0.9470681548118592,0.9630466103553772,0.0,accept,unanimous_agreement
1524313426,6068,"update: after some clean-up there now is an alternative, dummy implementation that's injected for production.",0,0,0,0.987988829612732,0.9910736680030824,0.9883884787559508,0.0,accept,unanimous_agreement
1528987470,6068,"it seems that you use the mutex for making parts of the timeandpitchinterface to be thread safe. i don't understand, why this mutex is not in the timeandpitchinterface implementation in this case.",0,0,0,0.9731441736221312,0.957378089427948,0.97963684797287,0.0,accept,unanimous_agreement
1529796668,6068,"in `clipsegment.cpp`, you can see that we add two callbacks for pitch shift change and formant preservation toggling. these callbacks are issued from the main thread, meanwhile the processing is on the audio thread. since we have the guarantee that the `staffpadtimeandpitch` ctor is completely executed before these callbacks are registered, it would be safe to internalize the mutex, but the safety is more straightforward to implement and for reviewers to verify this way. the drawback with this approach is that we lock the mutex at frame rate also if there is no time stretching. i still haven't got to the bottom of whether this is a bad thing, and i was thinking maybe you could enlighten me. in our case there'd only be contention when the user changes pitch during playback.",0,0,0,0.9665212631225586,0.9885228872299194,0.9742118716239928,0.0,accept,unanimous_agreement
1530019461,6068,"considering that it caught my attention, i would disagree that it is better approach from the reviewer point of view :-)",1,-1,1,0.8865602016448975,0.6052117943763733,0.7806616425514221,1.0,accept,majority_agreement
1211374578,4668,"ideally (not critical now, though) we should ditch `m` prefix. this members are no longer private :-)",0,1,1,0.5446352362632751,0.91390061378479,0.7413251399993896,1.0,accept,majority_agreement
1211374928,4668,`final`?,0,0,0,0.9830428957939148,0.988864541053772,0.9919310212135316,0.0,accept,unanimous_agreement
1211380216,4668,i wonder if it is safe,0,0,0,0.753219723701477,0.7874038219451904,0.8434871435165405,0.0,accept,unanimous_agreement
1211387303,4668,"no range checks are performed. i understand that it was the case in the original code, but some safety here won't hurt :-)",1,1,1,0.95438414812088,0.9849794507026672,0.978354513645172,1.0,accept,unanimous_agreement
1211392468,4668,"we must describe what happens if the format index is not in `[0, getformatcount())`. should we return the default format? this generally happens in this commit but not for every plugin. should we return empty format info, which will break the assumption that there is always at least one file extension? should we throw? in any case, it needs to be decided and then uniformly followed.",0,0,0,0.986879825592041,0.9921253323554992,0.9908943176269532,0.0,accept,unanimous_agreement
1222854726,4668,lol,1,1,1,0.9700573682785034,0.96007639169693,0.8464275002479553,1.0,accept,unanimous_agreement
1229181080,4668,do we really (like really) want to make the function non idempotent? i don't quite understand why,0,-1,0,0.8082281351089478,0.5337035059928894,0.7302480936050415,0.0,accept,majority_agreement
1229186391,4668,there are 9 places where such code is used in this commit. should we give it a name?,0,0,0,0.9880409240722656,0.9848588109016418,0.9943782687187196,0.0,accept,unanimous_agreement
1229187850,4668,i would've called it something like `progressdialogprogresslistener`or similar. not generic for sure :-),1,1,0,0.9252333641052246,0.7353671789169312,0.5136844515800476,1.0,accept,majority_agreement
1229197430,4668,i believe that readabily would benefit from moving `exportresult` out of the `exportprogresslistener` scope,0,0,0,0.9724887013435364,0.9805223345756532,0.9894493222236632,0.0,accept,unanimous_agreement
1229201969,4668,looks like a typo to me.,0,0,0,0.9771745800971984,0.9520846009254456,0.9546921849250792,0.0,accept,unanimous_agreement
1229252669,4668,i think it worth documenting this flags,0,0,0,0.8642553687095642,0.8776929974555969,0.9776686429977416,0.0,accept,unanimous_agreement
1229688447,4668,"usually it doesn't return nullptr. for example `return wxdynamiccast(wxwindow::findwindowbyid( miid, mpdlg), wxbitmapbutton);`",0,0,0,0.9876807928085328,0.9933459758758544,0.9942744374275208,0.0,accept,unanimous_agreement
1230682943,4668,early continue to reduce nesting?,0,0,0,0.9716871380805968,0.978561282157898,0.990459680557251,0.0,accept,unanimous_agreement
1230888995,4668,i wonder if we should find a way to populate this list from the module cmakelists.txt,0,0,0,0.9547720551490784,0.9806906580924988,0.963284194469452,0.0,accept,unanimous_agreement
1234995560,4668,should the exceptions inherit audacityexception? (or even messageboxexception),0,0,0,0.985893726348877,0.993289053440094,0.9915046095848083,0.0,accept,unanimous_agreement
1235008549,4668,"i wonder if this is useful at all :-) `ffmpeg for audacity` doesn't ship executables for a long time, `lame for audacity` is long deprecated",1,1,1,0.9660400748252868,0.9926930665969848,0.9872344136238098,1.0,accept,unanimous_agreement
1235012905,4668,should it be `mcontext`?,0,0,0,0.9851698279380798,0.9941853880882264,0.9916837215423584,0.0,accept,unanimous_agreement
1235087928,4668,should it be `lib-tags-interface`?,0,0,0,0.989227533340454,0.9943108558654784,0.9939823746681212,0.0,accept,unanimous_agreement
1235093037,4668,"static_cast or ""constructor"" cast?",0,0,0,0.9881618618965148,0.9936356544494628,0.9930718541145324,0.0,accept,unanimous_agreement
1235145368,4668,why is this list empty?,0,0,0,0.90473872423172,0.9775346517562866,0.9740952253341676,0.0,accept,unanimous_agreement
1235145582,4668,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1235189634,4668,should this be xo? should there be an i18n-hint?,0,0,0,0.9881075024604796,0.994562566280365,0.9944766163825988,0.0,accept,unanimous_agreement
1235204240,4668,it doesn't look exactly clean... nothing better really comes to mind now,-1,-1,0,0.8988237380981445,0.8902697563171387,0.5025911331176758,-1.0,accept,majority_agreement
1235223662,4668,early `continue`?,0,0,0,0.9854387044906616,0.9872987866401672,0.9926745295524596,0.0,accept,unanimous_agreement
1235227009,4668,should this be moved out of the function into the anon namespace?,0,0,0,0.9863018989562988,0.995070219039917,0.9944700002670288,0.0,accept,unanimous_agreement
1239492586,4668,i can do that in a separate commit,0,0,0,0.9884670972824096,0.9902477860450744,0.9936502575874328,0.0,accept,unanimous_agreement
1243308114,4668,"each implementation has non-empty list of extensions, so formally - yes, it's safe [code block]",0,0,0,0.9835051894187928,0.9612843990325928,0.9905940294265748,0.0,accept,unanimous_agreement
1243338684,4668,"isn't relevant any more, sorry for confusion :)",-1,-1,-1,0.9392523169517516,0.9934200644493104,0.994947910308838,-1.0,accept,unanimous_agreement
1243339672,4668,"isn't relevant too, sorry again :)",-1,-1,-1,0.9826682209968568,0.9932502508163452,0.9949383735656738,-1.0,accept,unanimous_agreement
1243343210,4668,this is done in the later commit,0,0,0,0.9885253310203552,0.988684356212616,0.9949063062667848,0.0,accept,unanimous_agreement
1243349786,4668,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
1254218624,4668,"it could be, but when i reviewed the implementation of `messageboxexception`'s delayed handler i found out that this doesn't map well to the current behaviour, which i tried to preserve as much as possible. `exportexception` replaces (not literally ofcourse) `basicui::showmessagebox` which doesn't have counterpart in `audacityexception` hierarchy",0,0,0,0.9787158966064452,0.9906741976737976,0.9803060293197632,0.0,accept,unanimous_agreement
1268210948,4668,there is a check now,0,0,0,0.9869154691696168,0.9704051613807678,0.9939996004104614,0.0,accept,unanimous_agreement
1268214186,4668,"added a comments to this function about desired behaviour, also `formatinfo`'s and `exportplugin`s are now accessed via container-like `exportpluginmanager` class",0,0,0,0.9884780049324036,0.9933352470397948,0.9943857192993164,0.0,accept,unanimous_agreement
1268215587,4668,"yes, indeed, this is fixed in the later commit, but the error is still hidden somewhere in the commit history",0,0,0,0.9868202805519104,0.992617666721344,0.9874301552772522,0.0,accept,unanimous_agreement
1268216243,4668,added in the later commit,0,0,0,0.9870622754096984,0.9854406714439392,0.9941672086715698,0.0,accept,unanimous_agreement
1268216816,4668,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1268220396,4668,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1268220552,4668,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1268224428,4668,afaik ogg/vorbis does not imply any predefined sample rate constraints.,0,0,0,0.986241340637207,0.9822205901145936,0.990154504776001,0.0,accept,unanimous_agreement
1268225659,4668,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1268226268,4668,replaced with ranged for,0,0,0,0.9835433959960938,0.988794445991516,0.992833375930786,0.0,accept,unanimous_agreement
1268226586,4668,done in later commit,0,0,0,0.9878838658332824,0.983951449394226,0.991560995578766,0.0,accept,unanimous_agreement
1269785368,4668,i'd like to see a proper check here as well.,0,0,0,0.9613335132598876,0.9800650477409364,0.9827739000320436,0.0,accept,unanimous_agreement
1270509369,4668,why not `b`?,0,0,0,0.968466818332672,0.9881768822669984,0.988058865070343,0.0,accept,unanimous_agreement
1270541588,4668,but is it really a preferred option? i think joint stereo reduces the quality.,0,0,0,0.9596681594848632,0.9736256003379822,0.9657427072525024,0.0,accept,unanimous_agreement
1270563482,4668,"i'm fairly confident that it doesn't. joint stereo does a per-frame m/s encoding, rather than l/r encoding where the channels are similar, and where they aren't, it switches back to l/r encoding. lame makes this decision for every mpeg frame. lame also has options to force m/s encoding (`-m f` instead of `-m j`), which i hope we don't use.",0,0,0,0.865831732749939,0.9774507880210876,0.9395042657852172,0.0,accept,unanimous_agreement
1270568961,4668,"yeah, judging by [a link] and lame source code you are correct",-1,0,-1,0.9134973883628844,0.7781237959861755,0.987981379032135,-1.0,accept,majority_agreement
1270589994,4668,and here: [a link],0,0,0,0.9846885204315186,0.9850183129310608,0.9945573806762696,0.0,accept,unanimous_agreement
1196560264,4701,"i don't know the consequences of this, but that'd be the easiest fix for me :d so tentatively proposing it.",1,1,1,0.5362005233764648,0.6277468204498291,0.9822601675987244,1.0,accept,unanimous_agreement
1196649252,4701,does that mean users with macos < 10.15 wouldn't be able to run newer audacity releases ?,0,0,0,0.9596993327140808,0.9880892634391784,0.9920899868011476,0.0,accept,unanimous_agreement
1196748810,4701,"this will break macos. we cannot have a target greater than 10.13. also, raising a target requires a lot of thought and discussion. we have plenty users on older macos versions",0,-1,-1,0.6400545239448547,0.6643089652061462,0.5900139212608337,-1.0,accept,majority_agreement
1198869563,4701,"that's all right, i gave up on using (experimental/)filesystem to fix this.",0,0,0,0.9723345041275024,0.969594419002533,0.96304851770401,0.0,accept,unanimous_agreement
1205986617,4701,"i repeat my previous suggestion: add the .h files to this list please. it may not be necessary to build, but i will make the headers known to the ide file browsers as part of the project, and that is more convenient.",0,0,0,0.981600284576416,0.827011227607727,0.9862181544303894,0.0,accept,unanimous_agreement
1206358241,4701,"i agree, just forgot.",0,0,0,0.9582233428955078,0.9100183248519896,0.9708161950111388,0.0,accept,unanimous_agreement
1209133382,4701,`final` would be much appreciated.,0,0,1,0.5497980117797852,0.8058668375015259,0.707615077495575,0.0,accept,majority_agreement
1209136334,4701,why the function is not `const`?,0,0,0,0.9685980081558228,0.9856882095336914,0.9839584827423096,0.0,accept,unanimous_agreement
1209141059,4701,maybe? [code block],0,0,0,0.986968994140625,0.9907797574996948,0.989342212677002,0.0,accept,unanimous_agreement
1209141440,4701,more descriptive names would be much appreciated,0,1,0,0.738048255443573,0.6568050980567932,0.6381786465644836,0.0,accept,majority_agreement
1209144143,4701,generally we don't use such prefixes,0,0,0,0.9630260467529296,0.9106557369232178,0.9888535737991332,0.0,accept,unanimous_agreement
1209149956,4701,"generally, we always use camelcase for methods.",0,0,0,0.9871317148208618,0.9906060099601746,0.9921678900718688,0.0,accept,unanimous_agreement
1209166622,4701,"i don't think that we should reformat a 3d party library. i would prefer to have it as is while it is included as a part of audacity, so updating the library will generate sane diffs",0,0,0,0.8958052396774292,0.97049742937088,0.9324329495429992,0.0,accept,unanimous_agreement
1209168024,4701,"it is advisable to always have a new line at the end of file. at least it would remove annoying red mark from the reviews :-) if you use vscode, please install the editorconfig extesnsion, it will handle this issue for you.",1,1,1,0.7358871102333069,0.974242091178894,0.9843236804008484,1.0,accept,unanimous_agreement
1209170410,4701,"i wonder if we want this to be globally visible to all tests. also, please at least prefix new files with [code block] and, ideally, with a longer comment with author and file name",0,0,0,0.9504212737083436,0.97746604681015,0.9667070508003236,0.0,accept,unanimous_agreement
1209173188,4701,i would much prefer relying on working directory here,0,0,0,0.9636568427085876,0.978867530822754,0.9814099073410034,0.0,accept,unanimous_agreement
1209177074,4701,"let's avoid using legacy cmake. `target_compile_definitions` is a cleaner way to achieve the result. however, i would prefer a different approach, without the hardcoding of the path. for example, `add_unit_test` can be extended to accept the working directory of the test.",0,0,0,0.9779631495475768,0.9929211735725404,0.9915739893913268,0.0,accept,unanimous_agreement
1209179472,4701,do we need this factory method here at all though?,0,0,0,0.9846694469451904,0.9916163086891174,0.991931140422821,0.0,accept,unanimous_agreement
1209185809,4701,should we check that ratio has really changed?,0,0,0,0.97929710149765,0.9919041991233826,0.989933431148529,0.0,accept,unanimous_agreement
1209190216,4701,i think `static_cast ` is redundant here,0,0,0,0.9871293902397156,0.962812602519989,0.9850999712944032,0.0,accept,unanimous_agreement
1209192167,4701,i wonder if we should make this value to be configurable,0,0,0,0.7874116897583008,0.9633662700653076,0.9487239718437196,0.0,accept,unanimous_agreement
1209197247,4701,"hmm, it looks a bit odd that this function does not return the number of samples that were written to the output. if it is expected, that the tail is always zero-filled - it should be stated in the docs.",0,-1,-1,0.5412524342536926,0.8969250321388245,0.5766745805740356,-1.0,accept,majority_agreement
1209203294,4701,"i think that output buffers should be allocated only once. allocation is not free, especially in multithreaded environments, and provided that you ask for a few kilobytes it won't be noticeable.",0,0,0,0.986949384212494,0.9807727336883544,0.9802678823471068,0.0,accept,unanimous_agreement
1209204948,4701,this looks like a ub to me. getsamples provides no way for a caller to know if the output was modified at all.,0,0,0,0.9700694680213928,0.7708982825279236,0.9784760475158693,0.0,accept,unanimous_agreement
1209210328,4701,"given that audiosource is never copied in staffpadtimeandpitch, i think that `numpulledframes = 0ull` is sufficient here",0,0,0,0.987485945224762,0.9928916692733764,0.9926666617393494,0.0,accept,unanimous_agreement
1209212449,4701,`target_compile_options` and only on windows please,0,0,0,0.9872481226921082,0.9945650100708008,0.9954500794410706,0.0,accept,unanimous_agreement
1209213698,4701,"but i would rather define something like ""use_experimental_filesystem"" only on macos to avoid the potential compilation breakdown when some newer compiler decides to drop this headers from the stdlib",0,0,0,0.9845699667930604,0.9940930008888244,0.9865670800209044,0.0,accept,unanimous_agreement
1209216180,4701,"or this way, yes :-)",1,1,0,0.9618340730667114,0.9930205941200256,0.977754294872284,1.0,accept,majority_agreement
1209218703,4701,"well, the problem is resolved now :-)",1,1,1,0.9240498542785645,0.9872717261314392,0.9149205088615416,1.0,accept,unanimous_agreement
1209220268,4701,i'm not sure i understand this condition.,-1,-1,-1,0.926538586616516,0.7266684770584106,0.8292987942695618,-1.0,accept,unanimous_agreement
1209747004,4701,`channelvectors` ?,0,0,0,0.9877182245254515,0.9892136454582214,0.993902325630188,0.0,accept,unanimous_agreement
1209881509,4701,"mmh, yeah. i'm most at peace editing files that are formatted, 'cos sometimes i don't realize i'm auto-formatting and end up having to triage my changes, which is really painful. but i suppose these are not files i'll be editing often.",-1,-1,-1,0.9742418527603148,0.9675377011299132,0.5552440881729126,-1.0,accept,unanimous_agreement
1209891806,4701,not sure i understand. you'd place `wavfileio`'s definition directly in `staffpadtimeandpitchtest.cpp` ? :thumbs_up: for the prefix.,0,0,1,0.9721419215202332,0.9866293668746948,0.9106549024581908,0.0,accept,majority_agreement
1209898054,4701,why? that could be a pain to whoever wants to run this test. (it was to me.),-1,-1,-1,0.9782943725585938,0.9698663949966432,0.9705162644386292,-1.0,accept,unanimous_agreement
1209918348,4701,as in a launch configuration? i only found a solution for vs : [a link],0,0,0,0.9844279885292052,0.9843005537986756,0.9936625957489014,0.0,accept,unanimous_agreement
1209931680,4701,staffpad's `timeandpitch` allows configuring it. i personally don't see what's the big deal so i wouldn't. it determines the capacity of some ring buffer.,0,0,0,0.9651948809623718,0.8076362013816833,0.9857912063598632,0.0,accept,unanimous_agreement
1209942515,4701,"come to think of it, if `maxblocksize` equalled the number of samples typically queried by `mixersource` at once (i've seen 2400 in my debugging, but haven't looked for where it comes from), some looping could be avoided. will look into this.",0,0,0,0.9840298891067504,0.9783266186714172,0.98810076713562,0.0,accept,unanimous_agreement
1209949937,4701,"there are different cases. for real-time processing, we may want to have this value lower; for rendering or destructive processing - a higher value might be helpful. right now, audacity largely ignores any latency settings, using some random context-dependent hardcoded values, but this surely will change.",0,0,0,0.9518573880195618,0.9862679243087769,0.9755914211273192,0.0,accept,unanimous_agreement
1209953125,4701,i'd place it near the mocks :-) that's it - in `tests` directory.,1,1,1,0.8377476930618286,0.9927774667739868,0.8949382305145264,1.0,accept,unanimous_agreement
1209974295,4701,"all righty: `playbackpolicy::buffertimes::batchsize`, together with the sample rate, leads to those 2400. i also did some debugging using the unit test querying the same number of samples at a time than `maxblocksize`. yes, there'd be a little less looping, but that wouldn't spare any significant calculation. i could wire up those two when i integrate the time stretcher, but i think the added code complexity isn't worth it.",0,0,0,0.9333625435829164,0.971670925617218,0.9754132032394408,0.0,accept,unanimous_agreement
1209976521,4701,"oj, sorry, you're also reviewing commit by commit ... this gets changed in a later commit.",-1,-1,-1,0.9911024570465088,0.9906344413757324,0.9648396372795104,-1.0,accept,unanimous_agreement
1209981142,4701,"consider we have finally done asio or any low latency api right. in this case, something like 128 samples won't be unrealistic, but time stretcher will just become another place we must fix. this is something that needs to be addressed soon. `buffertimes` manages to ignore user settings and hardware requirements simultaneously. it was a reason for a p1 bug on alsa, which is not quite fully fixed now.",0,0,0,0.9691404104232788,0.9663810729980468,0.972123682498932,0.0,accept,unanimous_agreement
1209981964,4701,"yeah, my fault xd",-1,-1,1,0.9854778051376344,0.9670053720474244,0.9261852502822876,-1.0,accept,majority_agreement
1209982814,4701,what's ub?,0,0,0,0.9701401591300964,0.9433002471923828,0.9941640496253968,0.0,accept,unanimous_agreement
1209983585,4701,undefined behavior,0,0,0,0.9758124947547911,0.917728066444397,0.9835431575775146,0.0,accept,unanimous_agreement
1210003549,4701,just added the following comment (not pushed yet): [code block],0,0,0,0.98792564868927,0.9868934154510498,0.9954878687858582,0.0,accept,unanimous_agreement
1210017835,4701,"aha, now i get you. you mean `tests` under root. with pleasure.",1,1,1,0.9252521395683287,0.9927607774734496,0.9619388580322266,1.0,accept,unanimous_agreement
1210044126,4701,"doesn't work for me unfortunately. i tried this (in audacitytesting.cmake) ![a link], as well as `set(working_directory ${cmake_source_dir})` in that same function. working directory is still `$(projectdir)`.",-1,0,-1,0.6869226098060608,0.7260926365852356,0.6047902703285217,-1.0,accept,majority_agreement
1210068756,4701,to be clear : `maxblocksize` won't change the algorithmic latency at all. we really only are talking about making the batch size with the internal ring buffer size to maybe avoid some loop iterations. the output should be bit-exact regardless of the batch size.,0,0,0,0.9844448566436768,0.9853329062461852,0.9906912446022034,0.0,accept,unanimous_agreement
1210070876,4701,"but the ring buffer size will change, that's the point :-)",1,1,1,0.9187332391738892,0.7119844555854797,0.7987024188041687,1.0,accept,unanimous_agreement
1210071039,4701,"i just verified : batch size 512 or 1234 yield bit-exact output. however, i tried 128 as well, and there the output not only differs but it isn't stretched properly anymore ... - [x] look into this",0,0,0,0.9810304641723632,0.934775412082672,0.99012553691864,0.0,accept,unanimous_agreement
1210078574,4701,"i mixed up batch and maxblocksize in my previous comment. just verified that `maxblocksize` 1024 or 512 yield bit-exact results. 128, on the other hand, also yields a different result, though.",0,0,0,0.9885367155075072,0.9729084372520448,0.9905349612236024,0.0,accept,unanimous_agreement
1210176804,4701,so your concern is unnecessarily large memory allocation?,0,0,0,0.5645811557769775,0.5621294379234314,0.954057514667511,0.0,accept,unanimous_agreement
1210181047,4701,"no. why? i don't quite get why to hardcode this value, while it doesn't match anything in the system :-) simply having setmaxblocksize()/getmaxblocksize() won't hurt, even if it won't be used for the first time :-)",1,1,1,0.8940476775169373,0.8572778105735779,0.8578241467475891,1.0,accept,unanimous_agreement
1210181656,4701,"i agree that the code as is could leave some data unchanged, possibly garbage, at the tail of `output`, and a `memset` to zero may be useful. but i don't get the undefined behavior part.",0,0,0,0.9809977412223816,0.974349558353424,0.9738177061080932,0.0,accept,unanimous_agreement
1210187046,4701,the caller has absolutely no way of knowing the call's results and will likely pass the buffer for further processing. i think that number of samples written should be returned in any case.,0,0,0,0.9770405292510986,0.973913848400116,0.9832882285118104,0.0,accept,unanimous_agreement
1210188531,4701,"that's not even correct, actually. i don't see how this function cannot set all required samples. the `break` you highlighted does not break the outer loop.",0,0,0,0.8934314846992493,0.5928851366043091,0.984077215194702,0.0,accept,unanimous_agreement
1210236782,4701,"i disagree that it won't hurt. audacity's code is complex enough as it is, if there isn't a good reason for clients of this class to change that, then we shouldn't offer a way of changing it.",-1,-1,0,0.7453087568283081,0.9549438953399658,0.5403127074241638,-1.0,accept,majority_agreement
1210306373,4701,"oops, that was for experimenting, i should revert that. - [x] revert",-1,-1,-1,0.8209541440010071,0.8374789357185364,0.9718073606491088,-1.0,accept,unanimous_agreement
1210512064,4701,i found the 128 batch size / block size problem and pushed a fix.,0,0,0,0.9858413934707642,0.989801585674286,0.990288257598877,0.0,accept,unanimous_agreement
1212088380,4701,should we return `true` here? if i remember correctly - this will force `settimeandpitch` to reboot anyway. chances are i am wrong :-),-1,1,0,0.714271605014801,0.9583675265312196,0.94634610414505,,review,no_majority_disagreement
1212089456,4701,"so we are not making it configurable for now? that's fine, but i don't think that fixing it will take any time",0,0,0,0.8958526253700256,0.8760554790496826,0.9625771045684814,0.0,accept,unanimous_agreement
1212737492,4701,"crap, you're right. thanks for staying vigilant.",-1,1,-1,0.8550278544425964,0.9600603580474854,0.9915829300880432,-1.0,accept,majority_agreement
1212789918,4701,"i apologize for having wasted your time, but i just pushed [a link], which removes the possibility of changing time or pitch ratios on the fly. the rationale behind is in the commit message.",-1,-1,-1,0.9093255400657654,0.9355856776237488,0.9651761054992676,-1.0,accept,unanimous_agreement
1296529480,5042,“access”,0,0,0,0.7892807126045227,0.96707946062088,0.9923402070999146,0.0,accept,unanimous_agreement
1296530631,5042,“rules”,0,0,0,0.7616664171218872,0.9917230010032654,0.9839377999305724,0.0,accept,unanimous_agreement
1297096614,5042,"please comment that the new setting functions will succeed with out-of-bounds requests, only changing what is in bounds.",0,0,0,0.9853299856185912,0.98929625749588,0.992501974105835,0.0,accept,unanimous_agreement
1297100361,5042,"is this description really what we want? to be really strictly conservative of program behavior, in the case of not time stretching, it's possible two clips were separated by a tiny gap of one or two sample intervals, but the paint brush might affect both. and maybe nobody in the history of audacity actually ever did this.",0,0,0,0.7687221169471741,0.8741537928581238,0.9122580885887146,0.0,accept,unanimous_agreement
1297103487,5042,`backward` seems surprising as the default value. but you never call it with the default.,0,0,0,0.9198731780052184,0.7663437128067017,0.8163508772850037,0.0,accept,unanimous_agreement
1297105451,5042,"ditto, default argument",0,0,0,0.977069079875946,0.9765356183052064,0.9929648637771606,0.0,accept,unanimous_agreement
1297114599,5042,"this function is used in two places, and this change, while avoiding that pop-up when you click between clips, also will change the hit test to return a handle in the case that it did not do so before. does clicking and dragging in the empty space between clips make any vacuous undo/redo items?",0,0,0,0.9869864583015442,0.98409503698349,0.9920998215675354,0.0,accept,unanimous_agreement
1297116710,5042,"aha, i tried the build. yes it does! so instead the hit testing function should also be changed to return null when there is no clip.",1,1,1,0.5603798031806946,0.8306949138641357,0.9783021211624146,1.0,accept,unanimous_agreement
1297121368,5042,"actually... that's an old defect, which you might fix. i just tried released audacity. when the magnification does show samples, but you click and drag outside of a clip, still you do get a bogus undo/redo item.",0,-1,0,0.6281527280807495,0.8886849880218506,0.8700099587440491,0.0,accept,majority_agreement
1297170255,5042,"actually an old problem, and i was confused about something. `hittest` only happens with the * tool button. with the pencil tool button, you can click anywhere and it has always been like that.",-1,-1,0,0.89711594581604,0.9151523113250732,0.816173791885376,-1.0,accept,majority_agreement
1297171680,5042,`samplehandle::hitanywhere` is also used in waveformview.cpp in this case.,0,0,0,0.988509714603424,0.9950407147407532,0.9942955374717712,0.0,accept,unanimous_agreement
1304416629,5042,i think that's not the right issue number,-1,-1,0,0.4984528124332428,0.5537649989128113,0.9364919662475586,-1.0,accept,majority_agreement
1308414953,5042,omitting,0,0,0,0.903444528579712,0.909245491027832,0.963917076587677,0.0,accept,unanimous_agreement
1308692145,5042,"you need more comments to clarify: when direction is backward, the buffer of given samples is not reversed, and `t` rounds to the time of the clip sample corresponding to the past-the-end position.",0,0,0,0.9863791465759276,0.9927939176559448,0.994474470615387,0.0,accept,unanimous_agreement
1308693059,5042,clarify that the resulting samples are not reversed when direction is backward.,0,0,0,0.9689186811447144,0.9882128834724426,0.9922882318496704,0.0,accept,unanimous_agreement
1312832951,5042,"now that clips can be stretched, we have to choose between constant time or constant sample-count brush radius. the approach i took is the latter. but then, samples of a clip 10 seconds away should not be taken into account. so i went for the simple rule that they have to touch each other, or nothing happens. i also reckon we won't run into trouble because of this subtle change of behaviour.",0,0,0,0.8931124806404114,0.935559868812561,0.9102255702018738,0.0,accept,unanimous_agreement
1312833470,5042,"right, makes no particular sense - removed it (and moved this method to `private`).",0,0,0,0.9786229133605956,0.9899335503578186,0.9798730611801147,0.0,accept,unanimous_agreement
1313133479,5042,"each time `samplehandle::release` is called (when letting go of the mouse with pencil tool activated), a history item is pushed. the easiest solution to this i can think of would be to create a `bool msamplemoved`, whose value is set to true whenever a sample is modified, checked when releasing, and then set to false again. that'd be something totally new, and not completely trivial to review.",0,0,0,0.9455646276474,0.9792187809944152,0.985293984413147,0.0,accept,unanimous_agreement
1313140314,5042,moved those to `private` and made comments a bit more precise.,0,0,0,0.9842055439949036,0.9885870814323424,0.992070972919464,0.0,accept,unanimous_agreement
1324857818,5042,"""excluding""",0,0,0,0.9421311020851136,0.9880504012107848,0.9834421277046204,0.0,accept,unanimous_agreement
1324870922,5042,"as always, i see `as_size_t` and think, what's the proof of satsifaction of the assertion? here, ""it's easy to prove that the expression is bounded by numfloats"". so just say that in a comment.",0,0,0,0.9832557439804076,0.9849442839622498,0.9908478260040284,0.0,accept,unanimous_agreement
1324872490,5042,likewise,0,0,0,0.9695988893508912,0.9202402234077454,0.9617113471031188,0.0,accept,unanimous_agreement
1324882822,5042,"please comment in the header that the function may rewrite only a subrange of `[buffer, buffer + nfloats)`, leaving unchanged the buffer positions not corresponding to part of the clip play region.",0,0,0,0.9885210990905762,0.9938726425170898,0.9951068162918092,0.0,accept,unanimous_agreement
1324885498,5042,"please comment that `[buffer, buffer + 2 * numsizesamples + 1)` is assumed to be a valid span of addresses, and likewise that only a subrange may be overwritten. in other words zero-filling is not promised for the rest.",0,0,0,0.988651156425476,0.993714153766632,0.9945619702339172,0.0,accept,unanimous_agreement
1324897974,5042,"""effective""",0,0,1,0.9434463381767272,0.9845060706138612,0.964731991291046,0.0,accept,majority_agreement
1324906769,5042,`waveclip::snaptosample` analogous to the `widesamplesequence` member function might be nice,0,0,0,0.9701973795890808,0.9762604832649232,0.9510055780410768,0.0,accept,unanimous_agreement
1324923391,5042,"i might simplify all that with `#include ` and `template using bufferchartype = std::conditional_t >, constsampleptr, sampleptr>;`",0,0,0,0.9853805899620056,0.9908663630485536,0.9914222359657288,0.0,accept,unanimous_agreement
1324929089,5042,"i think the template argument can be omitted, nicely deduced from arguments",0,0,0,0.9805712699890136,0.9840492010116576,0.9536681175231934,0.0,accept,unanimous_agreement
1324929248,5042,here too,0,0,0,0.977906346321106,0.9846388697624208,0.9838451147079468,0.0,accept,unanimous_agreement
1325747821,5042,`getsamples` (not a new function) should also comment that `start` is relative to play start `getfloatattime` should comment that `t` is relative to play start,0,0,0,0.9872322082519532,0.994474709033966,0.9944708347320556,0.0,accept,unanimous_agreement
1325772934,5042,explain the strange use of `1e6`,0,0,0,0.8739994168281555,0.8279043436050415,0.9338987469673156,0.0,accept,unanimous_agreement
1325774284,5042,rounding to the nearest millionth of a sample? why?,0,0,0,0.922637701034546,0.9699804186820984,0.9858078956604004,0.0,accept,unanimous_agreement
1325780274,5042,"in the case that `max` above clipped a negative value to 0, should the buffer instead get some zeroes at `buffer + alreadyread` (if writing), and should the first member of the return be a later position? maybe not but i'm trying to understand the usage",0,0,0,0.9812952280044556,0.9906408190727234,0.9832834005355836,0.0,accept,unanimous_agreement
1325782291,5042,some comment why this is a safe `as_size_t`?,0,0,0,0.9843285083770752,0.9925259351730348,0.9948803186416626,0.0,accept,unanimous_agreement
1325784212,5042,similar question whether this is the right thing when `min` above did some work,0,0,0,0.965821087360382,0.9916342496871948,0.9616097211837769,0.0,accept,unanimous_agreement
1325789221,5042,"this loop may concatenate samples from clips of different stretch ratios into one buffer, and then we forget about the stretches and operate on the buffer. understand that i objected to this for plot spectrum (weightings of windows in the combined result might be wrong) and for mixer board (rms calculations may be wrong again for mis-weighting, but i let that problem go). but here, doing microscopic repairs with your pencil or the even less-known paintbrush tool, it is defensible.",0,0,0,0.9250155687332152,0.6851106882095337,0.9855723977088928,0.0,accept,unanimous_agreement
1325796298,5042,i think `>=` makes me surer of loop termination just looking at this function.,0,0,0,0.9825871586799622,0.9658825397491456,0.9417357444763184,0.0,accept,unanimous_agreement
1325796813,5042,again `>=` would look better to me,0,0,0,0.7887769341468811,0.9810724258422852,0.9835714101791382,0.0,accept,unanimous_agreement
1325801032,5042,"here and elsewhere you use this or `getnextclip`, there is a sorting of the clips each time. probably unimportant in practice for performance.",0,0,0,0.8365288972854614,0.9738729000091552,0.9827645421028136,0.0,accept,unanimous_agreement
1325802214,5042,"next, not adjacent; and i understand why",0,0,0,0.9748004078865052,0.928305208683014,0.9900908470153807,0.0,accept,unanimous_agreement
1325823537,5042,"i think the ""so quantize time"" part no longer makes sense",0,0,0,0.7503565549850464,0.965831995010376,0.9569547772407532,0.0,accept,unanimous_agreement
1325831405,5042,"this old comment should instead say, set a range of samples around the mouse event",0,0,0,0.986839234828949,0.9930978417396544,0.9884294271469116,0.0,accept,unanimous_agreement
1325836833,5042,does it ever divide by 0?,0,0,0,0.978342831134796,0.9773628115653992,0.9857959747314452,0.0,accept,unanimous_agreement
1325838042,5042,"here too, shorten the confusing comment",0,0,0,0.96705561876297,0.8806625008583069,0.9090394377708436,0.0,accept,unanimous_agreement
1327461060,5042,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
1328488900,5042,"it might easily be confused for `wavetrack::snaptosample`, though. this manipulation is safe here in this `roundtonearestclipsample` function, i'd leave it as it is if there aren't other needs elsewhere for it.",0,0,0,0.9857845902442932,0.9930509328842164,0.9880321025848388,0.0,accept,unanimous_agreement
1328605437,5042,"i can't remember. just did a quick test with regular rounding, works too. i'll use a simple rounding, and next time should comment.",0,0,0,0.9673361778259276,0.9442314505577089,0.9723913073539734,0.0,accept,unanimous_agreement
1328615416,5042,"i'm not sure i understand your question. `alreadyread` means `[buffer, buffer + alreadyread)` are indices that already have been dealt with. `startsamp` tells which first sample index of the clip matches `buffer + alreadyread`.",0,0,0,0.9702245593070984,0.9419512152671814,0.6224928498268127,0.0,accept,unanimous_agreement
1328623579,5042,will comment.,0,0,0,0.9806814789772034,0.896603524684906,0.9752042889595032,0.0,accept,unanimous_agreement
1328659124,5042,"if `min` did some work, then `startorendtime` was past the end of the clip. it may be confusing to have this buffer offsetting amidst this more complex code. all the offset is doing is moving the read-write pointer according to the number of samples already read/written. it should not be concerned with the number of samples remaining to read from the clip.",0,0,0,0.9611174464225768,0.9313007593154908,0.9764907360076904,0.0,accept,unanimous_agreement
1328661572,5042,ok (for both),0,0,0,0.9779903888702391,0.9582114815711976,0.9909047484397888,0.0,accept,unanimous_agreement
1328669474,5042,"good question. the code before didn't check, but i cannot guarantee that my changes do not change that particular thing. adding a check upstream.",1,1,1,0.6531569957733154,0.9188637137413024,0.9365044236183168,1.0,accept,unanimous_agreement
1329971569,5042,"actually, your informal proof here is wrong. what if `t` happens to be a very negative value? so to be safe you should write `const auto numleadingzeros = limitsamplebuffersize(numfloats, effectivestart - maybenegativestart);`",0,0,0,0.9362421631813048,0.9114526510238647,0.9069574475288392,0.0,accept,unanimous_agreement
1329971950,5042,see latest in the conversation,0,0,0,0.9806466102600098,0.9870530962944032,0.973602056503296,0.0,accept,unanimous_agreement
1329974376,5042,you mean `clang-format` here and again below,0,0,0,0.9844947457313538,0.9935824275016784,0.994516909122467,0.0,accept,unanimous_agreement
1329975656,5042,"""addresses""",0,0,0,0.9851705431938172,0.9862099289894104,0.989084780216217,0.0,accept,unanimous_agreement
1330144731,5042,"no, i meant `clan-format` xd",0,0,0,0.979729413986206,0.9834133386611938,0.9941177368164062,0.0,accept,unanimous_agreement
1330157801,5042,"by substitution, `effectivestart - maybenegativestart == std::max(samplecount { 0 }, maybenegativestart) - maybenegativestart`, and `maybenegativestart = timetosamples(t)`. so if `t < 0`, then `effectivestart - maybenegativestart == - maybenegativestart`, that is, a positive value. for `t` to be negative is actually not a corner case, here, and the code has proven to work well as far as my testing went, which is another evidence that it is correct.",0,0,0,0.9710097908973694,0.9911265969276428,0.9865086674690248,0.0,accept,unanimous_agreement
1331399387,5042,keep the comment of old line 221,0,0,0,0.9858983755111694,0.9795933961868286,0.9934957027435304,0.0,accept,unanimous_agreement
643608503,830,"for this command, you take away the checkbox for grayscale, because there is now a more-than-binary choice. you should put back a a choice control so that this command can still set the visuals. see examples of the use of tiechocie in the src/commands directory for how to do it.",0,0,0,0.987014651298523,0.9934462904930116,0.9943462014198304,0.0,accept,unanimous_agreement
644088942,830,"in c++11 and later, it's preferable not to use typedef but instead: ` using colorscheme = int; ` however -- i'd rather not use this line at all...",0,0,0,0.9613445401191713,0.9925496578216552,0.9622824788093568,0.0,accept,unanimous_agreement
644098990,830,... and instead write ` enum colorscheme : unsigned { ` i find it preferable to make static type distinctions where you can to aid compile time checking.,0,0,0,0.953016996383667,0.9884408712387084,0.9910764694213868,0.0,accept,unanimous_agreement
644109224,830,"you should say that somehow with a compile time assertion ` static_assert(spectrogramsettings::csnumcolorscheme == colorschemes, ""broken correspondence ""); ` but don't put that line in this file. avoid another #include and instead put in in spectrogramsettings.cpp",0,0,0,0.9850150942802428,0.992916226387024,0.9950022101402284,0.0,accept,unanimous_agreement
644113807,830,why changed from 512? i'm not saying it's wrong.,-1,-1,0,0.5704548954963684,0.5132917761802673,0.8924665451049805,-1.0,accept,majority_agreement
644117930,830,add `` for doxygen but where is this file used? i can't find it.,0,0,0,0.9211536049842834,0.9779314398765564,0.9914286732673644,0.0,accept,unanimous_agreement
644119238,830,note that this change will also break any macro scripts in existence that happen to use this checkbox parameter. but i think that is unimportant. do nothing about that.,-1,0,0,0.8818408250808716,0.8422751426696777,0.9847652912139891,0.0,accept,majority_agreement
644128901,830,see examples of use of the class (template) `enumsetting`. use a global `enumsetting ` object it can be a static -- it isn't needed outside of this file. still the purpose of use is to eliminate repetition of the string literal path and also the default value passed to read(). replacing coincident literals with a declared name is a good thing.,1,0,0,0.7233093976974487,0.9564720392227172,0.868244469165802,0.0,accept,majority_agreement
644147080,830,"you are no longer using this preference. but (unlike with the case of macros, a more rarely used expert feature) we do not want to ignore the problem of compatibility of old user preferences, in case someone already preferred grayscale. so where you do use an `enumsetting`, you should also supply this old path as the optional constructor argument. you should also then override the migrate() method, because the default implementation won't do the right thing. the old possible values of 0 and 1 will not map identically to the new enumerators. rather 0 should go to color (new), which we want to make the default colored spectrogram, but 1 should go to inverse grayscale, which is the ""old"" grayscale, in case someone did save that preference. so see `enumsettingbase::migrate()` and adapt it. then test this by choosing grayscale as built in head, then run your build. see audacity.cfg for where the preferences are stored. observe the relevant lines inside it. [a link]",0,0,0,0.9695733189582824,0.9894938468933104,0.9841341376304626,0.0,accept,unanimous_agreement
644190366,830,"audacity's designers are deciding which exact english strings should be shown to the user, and internationalized. meanwhile, you should also rewrite this table using the two-argument constructor for `enumvaluesymbol`. for instance ` { l""default"", xo(""color (new)"") } ` the first string, which is not internationalized, can be stable across audacity versions, identifying the choice in saved preferences, while the user-visible name might be changed.",0,0,0,0.9872277975082396,0.9930684566497804,0.9931702613830566,0.0,accept,unanimous_agreement
644198505,830,no problems in this file,0,0,0,0.97080796957016,0.9751678109169006,0.9629985094070436,0.0,accept,unanimous_agreement
644198735,830,no problems in this file,0,0,0,0.97080796957016,0.9751678109169006,0.9629985094070436,0.0,accept,unanimous_agreement
644202396,830,you mean `acolor::colorschemes`,0,0,0,0.9577847123146056,0.9927583932876588,0.9943513870239258,0.0,accept,unanimous_agreement
644203621,830,"also, make a non-static assertion about that correspondence, like ` wxassert(result.size() == csnumcolorscheme); `",0,0,0,0.9881937503814696,0.9948478937149048,0.9944037199020386,0.0,accept,unanimous_agreement
644712456,830,the change you suggested breaks template type deduction and cause compile errors. (at least at vs2017) i won't apply this.,0,0,0,0.9488670229911804,0.9554757475852966,0.8830903768539429,0.0,accept,unanimous_agreement
644714228,830,"to save memory and gain some speed. it might be trivial. anyway, this does not affect visual quality.",0,0,0,0.781971275806427,0.9365328550338744,0.9843422770500184,0.0,accept,unanimous_agreement
644729299,830,ok ignore that suggestion,0,0,0,0.9235660433769226,0.8374444842338562,0.9580013155937196,0.0,accept,unanimous_agreement
644775052,830,spectrogram has per-track setting. can it really be static? i'm confused.,0,-1,-1,0.634350597858429,0.7082297205924988,0.7518482208251953,-1.0,accept,majority_agreement
644783998,830,"added the static_assert in spectrogramsettings.cpp, along with `wxassert(csnumcolorscheme == result.size());`. i coudln't find better place to put it.",0,0,0,0.9608928561210632,0.9848089814186096,0.9933185577392578,0.0,accept,unanimous_agreement
644797427,830,both of them.,0,0,0,0.9270326495170592,0.97490394115448,0.9613637328147888,0.0,accept,unanimous_agreement
644803931,830,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
644806098,830,added 'spectro. color scheme' to 'set track visuals' macro command.,0,0,0,0.98593670129776,0.9945889711380004,0.9942836165428162,0.0,accept,unanimous_agreement
644809347,830,it's included from acolor.cpp. it contains rgb value of new spectrogram colormap.,0,0,0,0.9876574277877808,0.994530975818634,0.9934044480323792,0.0,accept,unanimous_agreement
644895071,830,ok leave it so,0,0,0,0.9696332812309264,0.9653684496879578,0.9927050471305848,0.0,accept,unanimous_agreement
644898960,830,"now i see, you added the #include in the first commit. i thought it would be in the same commit that added acolorresources.h. this means the first commit can't compile. i prefer that each commit in a commit history should compile. after more complete review, i would like the new commits to be squashed, but it is also good to leave the first refactoring commit separated, and fixed so it compiles.",0,0,0,0.8510819673538208,0.86393141746521,0.9435470700263976,0.0,accept,unanimous_agreement
644903112,830,"the old code here is in fact using a global setting. the system of spectrogram settings leaves something to be desired -- a track can have independent settings, or it can take its settings from defaults, but it can't default individual settings separately. don't try to understand and fix all of that -- just understand that where you rewrite usages of a global setting (which are what gprefs contains), then it is preferable to use an enumsetting object instead.",0,0,0,0.9807181358337402,0.9698538184165956,0.990797996520996,0.0,accept,unanimous_agreement
645649380,830,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
645649593,830,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
645662958,830,applied with preference migration :winking_face:,0,0,1,0.983305275440216,0.7439604997634888,0.9902042150497437,0.0,accept,majority_agreement
648791916,830,"thank you for these changes. but now, we are in the period of ""string freeze."" that means the message catalog locale/audacity.pot, in which all the xo (and xc) strings are extracted, is in a final form, allowing translators to finish their work. one of our designers reviewed this project, and specified changes to the user-visible strings. so you must: 1) change the xo strings above to the xc strings below. (but leave the wxt strings as they are.) 2) find these strings in lib-strings/locale/unusedstrings.h; be sure you have copied them exactly; and delete them from that file. 3) rebase this branch onto more recent master. (and while doing that, do an interactive rebase, and make sure all commits in the sequence compile. i believe the first one does not. and maybe do some fixups to shorten the list of commits.) 4) test (using one of the completed languages, such as dutch) that translation works. (you change language using the interface page of preferences.) 5) force-push your rebased branch. [code block]",1,1,1,0.8551585078239441,0.8642744421958923,0.943851113319397,1.0,accept,unanimous_agreement
648793239,830,"also for string freeze, the string above must be exactly as the designer specified in unusedstrings.h. cut and paste this string from there (with the comment too, pasted to the line before the line with the string): [code block]",0,0,0,0.9876306653022766,0.993922233581543,0.995027244091034,0.0,accept,unanimous_agreement
648793806,830,"also for string freeze, it's too late now to add new user-visible strings -- or else they won't translate from english. so change this to reuse the same string as in the preferences dialog: `xc(""sche&me"", ""spectrum prefs"")`",0,0,0,0.9867924451828004,0.9888588190078736,0.9945045113563538,0.0,accept,unanimous_agreement
649815422,830,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
648541598,966,"i suggest a comment string consistent with others recently added to this file: ""build networking features into audacity"" ""build support for sending errors to sentry"" that is, ""build...""",0,0,0,0.98458069562912,0.990959882736206,0.99326092004776,0.0,accept,unanimous_agreement
648553185,966,dependency on project.h should not be needed,0,0,0,0.9583587646484376,0.9868558049201964,0.9928576946258544,0.0,accept,unanimous_agreement
648553599,966,project.h again should not be needed,0,0,0,0.9754334688186646,0.9842517971992492,0.9924915432929992,0.0,accept,unanimous_agreement
648554417,966,"updatemanager doesn't really use project except to find its parent window. better then, that you simply construct it with a window. (passed by reference not pointer if null is not permittted.)",0,0,0,0.9810927510261536,0.9876890182495116,0.99308842420578,0.0,accept,unanimous_agreement
648556159,966,"as explained, you should simply pass a window to the constructor. but even if you really needed the project for other reasons, i would also say: reinterpret_cast is the cast of last resort which should not be used here. and don't use c-style pointer casts either in new code. this should be a simple up-casting operation, for which no explicit cast is needed. but you need wx/frame.h to make that compile (the compiler needs to see the inheritance relation).",0,0,0,0.9819449186325072,0.9931243062019348,0.9920952916145324,0.0,accept,unanimous_agreement
648557688,966,"this is where you should find the project's frame, and just pass that instead. this is happening only when the application initializes, and the project is the empty untitled project that is always made then. study of updatemanager tells me it really only wants a window. that should be more obvious just from reading this make_unique call.",0,0,0,0.9775055050849916,0.9880648255348206,0.992694616317749,0.0,accept,unanimous_agreement
648565608,966,"this is odd, as i've pointed it out previously and it was fixed",-1,-1,-1,0.5274545550346375,0.969212293624878,0.8453795313835144,-1.0,accept,unanimous_agreement
648567356,966,"now i understand differently and i'm changing the suggestions of the previous review. the key is to reason about lifetimes of objects. the updatemanager lives as long as the unique audacityapp object. (so perhaps it doesn't even need this unique_ptr. it might just be a static variable, if there is no problem destroying it after the audacityapp object.) it has a timer and checks for updates periodically (twice a day). that might repeat of audacity is left open a long time. but, project windows may be opened and closed in that long time, and audacity might even be in a state where there are no windows (it can be done on macos, which still leaves a menu bar at top of screen and allows you to switch in and out of the audacity application.) this has implications.",0,0,0,0.9462596774101256,0.961795449256897,0.9422771334648132,0.0,accept,unanimous_agreement
648569063,966,no c-cast please.,0,0,0,0.958740234375,0.9746456146240234,0.9246855974197388,0.0,accept,unanimous_agreement
648570267,966,"this plain c pointer is dangerous. it might become a dangling pointer, because the updatemanager outlives the window. wxweakref would be safer, but you would still need to check whether it is null whenever you use it. but better to eliminate this pointer entirely.",-1,0,-1,0.6598584055900574,0.8475703597068787,0.6631669402122498,-1.0,accept,majority_agreement
648570556,966,we should probably rename `tracking` to `updateschecking` or whatever. tracking has a lot of negativity attached to it.,0,0,-1,0.9725762009620668,0.9264840483665466,0.9120916128158568,0.0,accept,majority_agreement
648570938,966,`const` please,0,0,0,0.9853883385658264,0.9904865622520448,0.993013560771942,0.0,accept,unanimous_agreement
648574280,966,i feel like `showexceptiondialog` is a better choice for error messages. this applies to the cases below as well,0,0,0,0.9370225071907043,0.9614826440811156,0.9787895083427428,0.0,accept,unanimous_agreement
648577471,966,"you use mparent just so that a modal dialog has some parent window. but a modal dialog is allowed to have a null parent. the dialog has a stack-like lifetime and is destroyed before that audacitymessagebox call is completed. (a modeless dialog can also have a null parent, but you must then do extra work to be sure it is destroyed at some time.) i see that this code is rewritten in later commits, but the same remarks apply: ` mparent->callafter([this] { updatepopupdialog dlg(mparent, this); const int code = dlg.showmodal(); ` so i say: don't remember the mparent pointer. instead, find a window just when you need it to show the modal dialog. and if you can't, just use null. use findprojectframe( getactiveproject() ). include , so the compiler knows wxframe is-a wxwindow, rather than using a pointer cast.",0,0,0,0.9797265529632568,0.98517644405365,0.9908746480941772,0.0,accept,unanimous_agreement
648579401,966,where? at the other closed pr? the comment and commit history here are confusing.,-1,0,0,0.8333733677864075,0.5619309544563293,0.6781953573226929,0.0,accept,majority_agreement
648581014,966,"also, wxframe is a subclass of wxwindow, so no cast is required here at all.",0,0,0,0.98784339427948,0.9937706589698792,0.9940069913864136,0.0,accept,unanimous_agreement
649088802,966,"renamed on ""build updates checking features into audacity"".",0,0,0,0.98684561252594,0.9944105744361876,0.9946488738059998,0.0,accept,unanimous_agreement
649532804,966,"-licameli in case, when audacity have no project windows (macos case), i guess `findprojectframe( getactiveproject() )` returned `nullptr` and i can't executing next actions below (may be i wrong). [code block]",0,0,0,0.9827102422714232,0.9919187426567078,0.9892380237579346,0.0,accept,unanimous_agreement
649539479,966,then write `wxtheapp->callafter(...`,0,0,0,0.986443281173706,0.9848124980926514,0.995042085647583,0.0,accept,unanimous_agreement
649564857,966,"as i also explained to vitaly: see the file futurestrings.h. cut the strings from there. paste them into your source code. make sure you have copied them exactly, and also cut and pasted any i18n-hint comments that were immediately before the string. the deletions from futurestrings.h should also be committed to your branch.",0,0,0,0.9768587946891784,0.9532984495162964,0.9934414625167848,0.0,accept,unanimous_agreement
649565292,966,this was the only example in futurestrings.h that did have an i18n-hint comment.,0,0,0,0.9871020913124084,0.9935798645019532,0.9932277798652648,0.0,accept,unanimous_agreement
649566555,966,"this use of xo will not find a translation at runtime, because the string is not what is in futurestrings.h or in locale/audacity.pot. you should write instead: [code block]",0,0,0,0.9861032962799072,0.994117259979248,0.9947456121444702,0.0,accept,unanimous_agreement
649567115,966,"the strings in futurestrings.h for this file all use xc (with two arguments), not xo. it is important to use both arguments for correct lookup.",0,0,0,0.9867321848869324,0.9937501549720764,0.9935442209243774,0.0,accept,unanimous_agreement
649567711,966,"the convention for naming member functions in audacity is camelcase, but also capitalizing the first letter.",0,0,0,0.9859049916267396,0.989066243171692,0.9924960136413574,0.0,accept,unanimous_agreement
649570409,966,"do not assert (parent). it may be null, on mac when there is no open window, and that is not because of any logical error in the program or failure to observe pre- and post-conditions. as we discussed elsewhere, it is safe to make modal dialogs like the exception dialogs below with no parent. so you do not need the early return.",0,0,0,0.9813543558120728,0.9927073121070862,0.9925496578216552,0.0,accept,unanimous_agreement
649571442,966,"as we also discussed, replace the first `parent` with wxtheapp in case parent is null. instead of capturing parent in the lambda, you can repeat `findprojectframe(getactiveproject());` inside it, and that may be safer. there may be a small change that parent is destroyed between executing callafter now, and calling the lambda later, leaving a dangling pointer.",0,0,0,0.9875565767288208,0.9932998418807985,0.9937576055526732,0.0,accept,unanimous_agreement
649581991,966,"an easier way: `return std::tie(mversion, mrelease, mrevision) < std::tie(other.mversion, other.mrelease, other.mrevision);`",0,0,0,0.9832822680473328,0.9922221302986144,0.9931197166442872,0.0,accept,unanimous_agreement
649582667,966,you can use std::tie here too,0,0,0,0.9458463191986084,0.9925837516784668,0.9948133230209352,0.0,accept,unanimous_agreement
649582964,966,supports,0,0,0,0.9797510504722596,0.9600903391838074,0.990714192390442,0.0,accept,unanimous_agreement
649933469,966,"-licameli just i little bit confused, could you clarifying this moment please. okay, we have two method naming styles, lets nameing it as: * uppercamelcase - `somemethodname()` * lowercamelcase - `somemethodname()` how we should naming: 1 - local methods? (uppercc or lowercc) 2 - static methods? (uppercc or lowercc)",0,0,-1,0.8167603015899658,0.6403164863586426,0.7012806534767151,0.0,accept,majority_agreement
653185296,966,we prefer uppercamelcase always. sometimes there are exceptions -- such as when you make a container class and must name members begin() and end() so that they work right of : in the range-for statement.,0,0,0,0.9848302602767944,0.9910069108009338,0.9934126734733582,0.0,accept,unanimous_agreement
653204067,966,"this is good: the boolsetting is defined in just one place as a global, and used in different files, avoiding repeating the string literal and the default value. but should it be defined here or in the other place, updatemanager.cpp? i would prefer the other place. settings objects that influence the behavior of some component should live with it. preference dialog pages, which give a user interface for changing the setting, should refer to it by including a header file. the variable is ""model"" and the preference page is ""view.""",0,0,1,0.5750828981399536,0.8287420868873596,0.5763875842094421,0.0,accept,majority_agreement
653204384,966,"note that you use the boolsetting to mean, updates should be checked.",0,0,0,0.9872519969940186,0.9929379820823668,0.994301438331604,0.0,accept,unanimous_agreement
653205021,966,"you are also using the bool setting to mean: the user asked not to be shown the box again. was that the design? i think it was, i just want to make sure.",0,0,0,0.9747285842895508,0.9722530245780944,0.9925265312194824,0.0,accept,unanimous_agreement
653205294,966,"""for"" better than ""to"" in this name",0,0,0,0.9402720332145692,0.986221432685852,0.9831914305686952,0.0,accept,unanimous_agreement
653206460,966,"you changed a pointer to a reference, meaning null is not allowed -- i like that. you changed updatemanager to versionpatch which is just the information needed here. i like that too.",1,1,1,0.983733892440796,0.8065671920776367,0.920242726802826,1.0,accept,unanimous_agreement
653208593,966,"a very minor matter: i would indent the closing lines of this and the other lambdas less. `});` is the closing brace of something like a control structure, if not exactly a control structure. so this would be like the well recognized k&r style of indents.",0,0,0,0.8511019349098206,0.976466953754425,0.9892622828483582,0.0,accept,unanimous_agreement
653210396,966,do not use static here! (can explain to me why?),-1,0,-1,0.5954646468162537,0.6052795648574829,0.9137969017028807,-1.0,accept,majority_agreement
653212695,966,"""safenew"" follows the correct convention here, but perhaps you don't understand it. i'll explain: i want to discourage naked new in the program, using smart pointers instead. but you can't use smart pointers with objects of classes derived from wxwindow, because they have their own special memory management done by wxwidgets. if a window has a non-null parent, then this new without a corresponding delete is not really a memory leak. so in cases like this, i wxassert that the parent is not null (easily proved within this file), and use safenew which is just a macro for new. and then, a simple text scan of the program for ""new"" exactly doesn't find this. it was useful for me to check that other naked news are not being introduced in the program.",0,0,0,0.9283230900764464,0.9505149126052856,0.9650458693504332,0.0,accept,unanimous_agreement
653213732,966,"actually this isn't all quite correct: here is a smart pointer for wxwindow objects. but the point is, you can't use std::unique_ptr or std::shared_ptr. [a link]",0,0,0,0.9548371434211732,0.965469241142273,0.9907438158988952,0.0,accept,unanimous_agreement
653215498,966,this line isn't needed,0,0,0,0.980774700641632,0.9524834156036376,0.9925220608711244,0.0,accept,unanimous_agreement
653215744,966,i can see easily from in-line initializers below that nothing is left uninitialized. good!,1,1,1,0.9884328246116638,0.9908598065376282,0.9818966388702391,1.0,accept,unanimous_agreement
653217760,966,not needed,0,0,0,0.971994400024414,0.9419540762901306,0.9915127158164978,0.0,accept,unanimous_agreement
653217825,966,not needed,0,0,0,0.971994400024414,0.9419540762901306,0.9915127158164978,0.0,accept,unanimous_agreement
653218500,966,"you followed the rule that each .h file is the first `#include` in the corresponding .cpp file, so that the header file must `#include` or declare all that is necessary to parse it. i like that.",1,0,1,0.9816924333572388,0.5219436287879944,0.9442452788352966,1.0,accept,majority_agreement
653218813,966,"""parses"" (and two other repetitions)",0,0,0,0.986420512199402,0.9865676164627076,0.994668185710907,0.0,accept,unanimous_agreement
653218891,966,"""does not allow""",0,0,0,0.7071910500526428,0.9411746859550476,0.9834659099578856,0.0,accept,unanimous_agreement
653220910,966,it's good to remember some doxygen in new classes. i would simply: [code block],0,0,0,0.5647521615028381,0.7313109636306763,0.5104230642318726,0.0,accept,unanimous_agreement
653223474,966,"are two spaces left after periods, sometimes? you might easily strip leading spaces from each sentence before you push onto the array. see wxstring::trim",0,0,0,0.9830005168914796,0.9921728372573853,0.991812229156494,0.0,accept,unanimous_agreement
653225438,966,"there is a simple finite state machine implied in this function and the previous. i can figure out that an operating system tag is expected to be followed by a version tag (is it optional?), then a link tag. but please comment that.",0,0,0,0.986716628074646,0.9874572157859802,0.9951930046081544,0.0,accept,unanimous_agreement
653225842,966,"""trimmed""",0,0,0,0.9643247723579408,0.9829022884368896,0.971384346485138,0.0,accept,unanimous_agreement
653228021,966,"if i wanted to be really strict about raii for cleanup of the side effects, making no assumptions here that parsestring won't throw, then i would write, using a class from memoryx.h: `valuerestorer setter{ mversionpatch, versionpatch };` instead of the two assignments.",0,0,0,0.9852779507637024,0.9841495156288148,0.9887264370918274,0.0,accept,unanimous_agreement
653228486,966,"""that handles managing of updates""",0,0,0,0.9871102571487428,0.990462839603424,0.9942398071289062,0.0,accept,unanimous_agreement
653228845,966,do we still need comments about multiple windows after the other corrections for object lifetimes?,0,0,0,0.9843265414237976,0.9899918437004088,0.9924373030662536,0.0,accept,unanimous_agreement
653232926,966,"not very important, i would prefer to simplify with a static intsetting object... but 32 bits may not be enough and it might be one of the 32 bit windows builds we still do. maybe i should define longsetting?",0,0,0,0.9487804174423218,0.9194462299346924,0.9441891312599182,0.0,accept,unanimous_agreement
653233394,966,rename the member to mupdatecheckinginterval,0,0,0,0.9862783551216124,0.9919662475585938,0.9944095015525818,0.0,accept,unanimous_agreement
653236232,966,"in this and the other lambdas, you use nullptr for parents of dialogs. you might safely use `findprojectframe(getactiveproject())` instead. it would be sure to center the dialog on the main project window that the user is looking at. this may be an unimportant, small advantage.",0,0,0,0.9467394948005676,0.9729962944984436,0.983736217021942,0.0,accept,unanimous_agreement
653396618,966,"it is because anton then uses `!(*this < other)`. although it can be written in one line as well, that is true",0,0,0,0.9700381755828856,0.993122398853302,0.9934387803077698,0.0,accept,unanimous_agreement
653490847,966,"yes, its was designed.",0,0,0,0.9842709898948668,0.9839956164360046,0.9903742074966432,0.0,accept,unanimous_agreement
653492065,966,"yes, if it possible `longlongsettings`",0,0,0,0.984820544719696,0.991609513759613,0.9913389682769777,0.0,accept,unanimous_agreement
653893020,966,when i tested with `wxtheapp` using it was centered too. just i want avoid from project is not created (on macos when menu shown only) by `wxtheapp` using.,0,0,0,0.9845443367958068,0.9772869348526,0.990202784538269,0.0,accept,unanimous_agreement
875686102,2941,"you might make this simpler than the corresponding code in spectrumprefs. there, i needed a non-empty lambda capture. here, you don't. so just declare instead [code block]",0,0,0,0.9855048060417176,0.9900352358818054,0.9938753247261048,0.0,accept,unanimous_agreement
875692838,2941,"if you change `wxt(""device"")` (the internal, non-localized string), then for users who customized the layout of toolbars (preferring it in the bottom dock for instance), their preference won't be respected when they upgrade to the new version. a minor bother but perhaps avoidable.",0,0,0,0.8419304490089417,0.9695942997932434,0.9681689739227296,0.0,accept,unanimous_agreement
875694633,2941,"this looks like duplication from controltoolbar.cpp. instead, let's lower the repeated function into toolbar as an overload of makebutton.",0,0,0,0.9864826202392578,0.982650101184845,0.9937273263931274,0.0,accept,unanimous_agreement
875697142,2941,"given that the ui looks like roadkill on upgrade, i think we may need to just reset toolbar preferences altogether. see #2919",0,0,0,0.9822178483009338,0.9548494219779968,0.8984748721122742,0.0,accept,unanimous_agreement
875735583,2941,"i see more imitation of controltoolbar.cpp here. do you understand what this is doing? for controltoolbar, it looks up `name` in the commandmanager to determine the keystroke shortcut, if any, that is associated with that name, and then formats the hover text for the button to include that shortcut key in the description. here, no key will be found because ""open audio setup"" is not the name of any command. but then, perhaps it should be registered as a named command so it can indeed be bound to a keystroke if the user chooses in preferences -- even if we do not decide to give it a key binding by default. would be interested i'm sure in keystroke accessibility of the new menu under the cogwheel.",0,0,0,0.9658185243606568,0.98751962184906,0.9803521633148192,0.0,accept,unanimous_agreement
875744154,2941,`verbatim(prompt.translation())` should simplify just to `prompt`,0,0,0,0.9857639670372008,0.994508683681488,0.9942876696586608,0.0,accept,unanimous_agreement
875747326,2941,this should be `verbatim(inputsource)`,0,0,0,0.9866625666618348,0.993561625480652,0.995668649673462,0.0,accept,unanimous_agreement
879899672,2941,"no, kit, your name here!",0,1,0,0.9278454184532166,0.5729663372039795,0.9932928085327148,0.0,accept,majority_agreement
879901163,2941,"when you make a new .cpp/.h file pair, the .cpp should include the .h before any other inclusion, to be sure the .h file is really self-contained. and you did that! was it accident or were you aware of this rule?",0,0,0,0.8430615067481995,0.943858563899994,0.9747501015663148,0.0,accept,unanimous_agreement
879903694,2941,maybe you copied and pasted. i like to keep the #include directives and forward declarations minimal. i think you can eliminate: class wxcommandevent; class wxboxsizer; class wxsize; class wxpoint; class wxmenu; class wxstring; class abutton; class audacityproject;,0,0,0,0.9145540595054626,0.963023841381073,0.9922096729278564,0.0,accept,unanimous_agreement
879903999,2941,`explicit` ?,0,0,0,0.9846414923667908,0.9875319600105286,0.9892055988311768,0.0,accept,unanimous_agreement
879906339,2941,i18n (internationalization) hint comments are significant. they get extracted into translation catalog template files and read by human experts in foreign languages. don't just copy-past this from devicetoolbar.cpp. adapt it meaningfully.,0,0,0,0.968036651611328,0.9607692360877992,0.980113923549652,0.0,accept,unanimous_agreement
879911722,2941,"add `#include ` you can eliminate #include #include #include #include #include #include #include #include #include #include #include #include ""../trackpanel.h"" #include ""acolor.h"" #include ""imagemanipulation.h"" #include ""prefs.h"" #include ""project.h"" #include ""../shuttlegui.h"" #include ""../widgets/grabber.h"" #include ""../widgets/audacitymessagebox.h"" #include ""../widgets/grabber.h"" #include ""../widgets/windowaccessible.h""",0,0,0,0.9433640241622924,0.99372661113739,0.9895365238189696,0.0,accept,unanimous_agreement
879913545,2941,"don't assign, when you can use a member initializer. but don't use a member initializer, when you can use an in-class initializer!",0,0,0,0.9816432595252992,0.9827457666397096,0.9476501941680908,0.0,accept,unanimous_agreement
879916132,2941,duplicated comment is unclear here,0,0,0,0.976463794708252,0.8983307480812073,0.9725621342658995,0.0,accept,unanimous_agreement
896272675,2941,there is no such parameter!,0,-1,0,0.9031352996826172,0.8103687763214111,0.9928922653198242,0.0,accept,majority_agreement
896274269,2941,a separate commit just to move this function into toolbar.cpp might be nice too.,0,0,0,0.5875663757324219,0.9236406683921814,0.9811661839485168,0.0,accept,unanimous_agreement
896276542,2941,"one commit adds this file (but does much else besides), another corrects the comment. i prefer to see a squashed sequence of commits that doesn't leave a record of mistakes and corrections.",0,0,0,0.9360703229904176,0.4985847175121307,0.96637362241745,0.0,accept,unanimous_agreement
896291545,2941,actually though... you don't really use this overload in the final commit,0,0,0,0.807560920715332,0.8070893287658691,0.983984649181366,0.0,accept,unanimous_agreement
896672816,2941,"new uses of `getactiveproject` should be avoided! it dependes on a global variable to identify the project. but this toolbar was constructed with a reference to the project, which was passed to the bass class toolbar. give toolbar a const accessor to return audacityproject& and use that.",0,0,0,0.971688449382782,0.9916844367980956,0.9925077557563782,0.0,accept,unanimous_agreement
896673697,2941,"actually, it's a protected member, so just use `mproject` directly.",0,0,0,0.989414930343628,0.99225652217865,0.9943482279777528,0.0,accept,unanimous_agreement
897867728,2941,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
897868288,2941,commit squashed.,-1,0,-1,0.6444517374038696,0.923863649368286,0.9520320892333984,-1.0,accept,majority_agreement
897869380,2941,removed incorrect doxygen param comment.,0,0,0,0.9397295117378236,0.9829124212265016,0.9759352207183838,0.0,accept,unanimous_agreement
1130864771,4384,`const` function?,0,0,0,0.9875227808952332,0.9929503202438354,0.992792010307312,0.0,accept,unanimous_agreement
1130885278,4384,correctness of this change assumes `setmask` was nowhere used -- and that is true,0,0,0,0.9857435822486876,0.9936298727989196,0.9930976033210754,0.0,accept,unanimous_agreement
1130920702,4384,"the `{}` here and elsewhere initializes `mmask` but that member is nowhere used, so simplify",0,0,0,0.9864187836647034,0.994041621685028,0.9937328696250916,0.0,accept,unanimous_agreement
1130950461,4384,did you neglect `--si.channels;` after the loop?,0,0,0,0.9840652346611024,0.9949045181274414,0.994279146194458,0.0,accept,unanimous_agreement
1130954230,4384,... and so you did in the second commit. just squash it.,0,0,0,0.8981595635414124,0.9457054734230042,0.9551109671592712,0.0,accept,unanimous_agreement
1131057718,4384,"move (or just delete) the banner comments too, for the moved classes",0,0,0,0.9885530471801758,0.9934145212173462,0.9924830794334412,0.0,accept,unanimous_agreement
1131064937,4384,the commit comment can also mention exportplugin,0,0,0,0.9884791970252992,0.9936531782150269,0.9959845542907716,0.0,accept,unanimous_agreement
1131728486,4384,"not obvious in this large commit -- this is not just copied and pasted, but also the type of the third argument changes. please mention that in the commit comment.",0,0,0,0.9881151914596558,0.9848983883857728,0.9927387833595276,0.0,accept,unanimous_agreement
1131731849,4384,"oh but i see now -- same type, just another alias. so never mind.",0,0,0,0.6838868856430054,0.7848594188690186,0.8512623906135559,0.0,accept,unanimous_agreement
1131759896,4384,"should be ""complementary""",0,0,0,0.9789919257164,0.9819077849388124,0.993621289730072,0.0,accept,unanimous_agreement
1131760604,4384,"as a matter of form i'd prefer that there is also a .cpp including this so we are sure the header has all its compilation dependencies, and the destructor should have a non-inline definition there.",0,0,0,0.9877279996871948,0.9914233088493348,0.9912691116333008,0.0,accept,unanimous_agreement
1132274550,4384,should i worry about the safety of that `->`? should there be a shared or weak pointer? or should there be comments in the base class header explaining the assumptions that derived classes may make about lifetimes of `importfilehandle`?,0,0,0,0.9665334820747375,0.9940535426139832,0.9930478930473328,0.0,accept,unanimous_agreement
1132297399,4384,"in the old logic, there was a distinction between stopping and cancelling. in case of stopping, there was no error reported, even if `totalsamplesread < mnumsamples`. in the new logic, this changes.",0,0,0,0.9814783334732056,0.9898895621299744,0.9917820692062378,0.0,accept,unanimous_agreement
1132310725,4384,"progress dialogs had a stop button distinct from cancel in the previous version, but with this commit they don't. is this change intended?",0,0,0,0.9867628216743468,0.9902349710464478,0.9922696352005004,0.0,accept,unanimous_agreement
1132326126,4384,this is an unusual way to write it. funny c++ fact: if you change it to `auto haserror = {false};` then instead the type is deduced as `std::initializer_list ` and compilation fails because that is not convertible too bool.,-1,-1,0,0.9641940593719482,0.9427602291107178,0.7380539178848267,-1.0,accept,majority_agreement
1132348331,4384,"might want a check against division by zero, as with other progress updates",0,0,0,0.9886406660079956,0.9926546812057496,0.9900277256965636,0.0,accept,unanimous_agreement
1132363273,4384,another denominator to check for 0,0,0,0,0.9821144938468932,0.983616054058075,0.9934746623039246,0.0,accept,unanimous_agreement
1132378199,4384,mazzoni,0,0,0,0.8743365406990051,0.8826125264167786,0.9614687561988832,0.0,accept,unanimous_agreement
1132383812,4384,"i thought this was unnecessary for the build, but now i see it's needed for `audacity_file_suffix_event` that is one place where i omitted to change wxevents to observer messages, but then this is a case of wxwidgets dialogs communicating to each other.",0,0,0,0.9684839248657228,0.9831363558769226,0.990300178527832,0.0,accept,unanimous_agreement
1132393250,4384,"and one more denominator. maybe `onimportprogress` should take numerator and denominator as two arguments, and you can write the check for zero division in one place only.",0,0,0,0.9876206517219543,0.9934303164482116,0.9937363862991332,0.0,accept,unanimous_agreement
1132515399,4384,"the cancel() overrides are all alike, with one exception. i suggest - make `mcancelled` protected and provide a default `cancel()` implementation - make `mcancelled` atomic, anticipating background threads",0,0,0,0.9874075651168824,0.9915590286254884,0.9940822720527648,0.0,accept,unanimous_agreement
1132526465,4384,"i think this virtual function will be called from background threads, correct? then the base class will need to specify that in header file comments, and this override will need some rework. perhaps, it will just update some atomic variable for the numerator of the fraction. the main thread, running the progress dialog (modally?), could intercept idle or periodic timer events to check that number and update display. the dialog's event handler for cancel button press would update the atomic boolean that the background thread reads in `cancel()`.",0,0,0,0.9873212575912476,0.9919881820678712,0.9902862906455994,0.0,accept,unanimous_agreement
1132554176,4384,it would be good to make a stringsetting now and not repeat the literal path string,0,0,0,0.962400496006012,0.9919455647468568,0.9912586808204652,0.0,accept,unanimous_agreement
1132563096,4384,"with this deletion, ifilterindex becomes unused. i expected then that timer record would achieve this side effect otherwise, by a call to configure the exporter, but i don't see it.",0,0,0,0.9621851444244384,0.9879125952720642,0.9924355149269104,0.0,accept,unanimous_agreement
1132575872,4384,i think there is a proof though that this assignment was always overridden anyway? because `getfilename` was on the execution path after that and made it 0?,0,0,0,0.9878360629081726,0.993584930896759,0.9898738861083984,0.0,accept,unanimous_agreement
1132576848,4384,"if that is correct, then `m_iautoexportfilterindex` is a useless member of `timerrecorddialog`.",0,0,0,0.8500891327857971,0.9692864418029784,0.9902583360671996,0.0,accept,unanimous_agreement
1132577488,4384,"and if that is removed, then `exporter::getautoexportfilterindex()` will be called nowhere.",0,0,0,0.9869483709335328,0.9934681057929992,0.9937288761138916,0.0,accept,unanimous_agreement
1132586813,4384,i think this has `setfullname` where the old version had `setname` in `exporter::getfilename()`. why the change?,0,0,0,0.9843083024024964,0.9918228983879088,0.9915170669555664,0.0,accept,unanimous_agreement
1132609897,4384,why not `filedialogwrapper` as in the original?,0,0,0,0.9849424362182616,0.99321049451828,0.9904845952987672,0.0,accept,unanimous_agreement
1132618119,4384,`export` is a misleading name. this function only chooses a path before export really happens.,0,0,0,0.7478867769241333,0.8016032576560974,0.7032113075256348,0.0,accept,unanimous_agreement
1132619319,4384,i think this should be `continue` to conserve the old logic,0,0,0,0.9806491136550904,0.9846278429031372,0.983064591884613,0.0,accept,unanimous_agreement
1132619815,4384,`continue` here too,0,0,0,0.9833231568336488,0.9922379851341248,0.9945074915885924,0.0,accept,unanimous_agreement
1132620252,4384,and one more `continue`,0,0,0,0.9823295474052428,0.974646270275116,0.9879909157752992,0.0,accept,unanimous_agreement
1132620464,4384,`continue` here too,0,0,0,0.9833231568336488,0.9922379851341248,0.9945074915885924,0.0,accept,unanimous_agreement
1136928360,4384,"do you understand the difference between `sampletrack` and `wavetrack`? the first is an abstract base class of the second. (and `writablesampletrack` is between them.) i think these utilities would be better defined in terms of the more general interface. we don't yet have other concrete subclasses of `sampletrack` but it may be useful later. `sampletrack` does not expose the notion of a clip within the track, but i don't see that you require knowledge of subdivision into clips.",0,0,0,0.9814955592155457,0.987606942653656,0.9902125000953674,0.0,accept,unanimous_agreement
1136929331,4384,"i don't understand the comment. what ""same result?""",-1,-1,0,0.7652035355567932,0.7847961783409119,0.6170606017112732,-1.0,accept,majority_agreement
1136933864,4384,`track` which is the base of `sampletrack` does expose selectedness. but it is `playabletrack` that defines mute and solo and it is not a base of `sampletrack`. yet you still might apply `filter` to the track range to get a range of `sampletrack`. maybe `playabletrack` should instead become a mix-on property of tracks that you discover with a `dynamic_cast`? that's a bigger idea i should think about for future.,0,0,0,0.9351121783256532,0.9925837516784668,0.98750638961792,0.0,accept,unanimous_agreement
1136934859,4384,feel free to ignore all the suggestions about `sampletrack` for a draft. but remember the idea.,0,0,0,0.9198251962661744,0.9637540578842164,0.9804480075836182,0.0,accept,unanimous_agreement
1136966083,4384,no preservation of the other old comments from jkc? (james),0,0,0,0.9781569242477416,0.992775559425354,0.9930817484855652,0.0,accept,unanimous_agreement
1137006232,4384,"if you change lines like this, also take the opportunity to eliminate one more repeated string literal path with a `boolsetting` object.",0,0,0,0.9867781400680542,0.9911097288131714,0.9938387274742126,0.0,accept,unanimous_agreement
1137020938,4384,"there is still special treatment of a subclass here, which i hope you clean up in a later commit i have not yet reviewed. probably it's ok to keep treating `cl` as a special part of the framework, but for `ffmpeg` there should instead be some other new virtual function of the export plugin object to make this decision.",0,0,0,0.9814870357513428,0.98527193069458,0.9907377362251282,0.0,accept,unanimous_agreement
1137528486,4384,"another opportunity to use `boolsetting`. but be careful: this one is used as an argument to `tiecheckbox`. when that happens, you also need to use `invalidate` in the `commit()` member function of the preference panel. i intend to remove that need for `invalidate`, but it requires first using a named setting object in every call of the `tie...` functions, in preferences, and also in export dialogs, and also in soundactivatedrecord.cpp",0,0,0,0.9604191184043884,0.9943258166313172,0.983983874320984,0.0,accept,unanimous_agreement
1138584984,4384,did you mean to pass `selectedonly` for the third argument?,0,0,0,0.9862620830535888,0.99379163980484,0.993399143218994,0.0,accept,unanimous_agreement
1138587212,4384,"you lifted this ui out of the testing logic,but now it duplicates a string literal in two places. is there a good file in which to put a single occurrence of the literal?",0,0,0,0.9879918694496156,0.9896968603134156,0.9922041893005372,0.0,accept,unanimous_agreement
1138598539,4384,"this new function shows the file dialog after the setting of export range, but previous to this commit, the two things were in the opposite order (as they remain for timer recording). so there may be an unintended, though unimportant, change in behavior. such as giving the warning dialog before any file selection. better to change no behavior unless really meaning to.",0,0,0,0.9786352515220642,0.9712770581245422,0.9902601838111876,0.0,accept,unanimous_agreement
1138774330,4384,was moved to anonymous namespace,0,0,0,0.9872934818267822,0.9927014112472534,0.9948981404304504,0.0,accept,unanimous_agreement
1138777550,4384,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
1138871957,4384,aren't comments for `importprogresslistener` explain this?,0,0,0,0.9780521988868712,0.9896053075790404,0.994078516960144,0.0,accept,unanimous_agreement
1139175071,4384,"i think that the major distinction between them is that the data that has been been read by the time stop button was pressed is preserved, but mpg123 importer seem to be an exception. will update this commit so that this behavior is preserved.",0,0,0,0.9862702488899232,0.9789453148841858,0.9874863624572754,0.0,accept,unanimous_agreement
1139180237,4384,"moved them to `importpluginhandleex`, though i don't want to convert it's type to atomic in advance",0,0,0,0.9891929030418396,0.972264528274536,0.9944275617599488,0.0,accept,unanimous_agreement
1139182776,4384,"probably, but similarly i don't want to do it in advance",0,0,0,0.9289917945861816,0.6128934621810913,0.941927134990692,0.0,accept,unanimous_agreement
1139221339,4384,"this should not change the behavior, considering that currently `exportfiledialog::show` is always called with project name without extension, but in context of `exportfiledialog` i think it make more sense to allow user to specify full file name.",0,0,0,0.9860451817512512,0.9915897250175476,0.986741840839386,0.0,accept,unanimous_agreement
1139251072,4384,"what happens now is that track range is evaluated multiple times in different places, but within same ""export flow"", i think this approach is error prone. instead, track range should become a member variable of `exporter` or another state-object and passed as argument where it's required (for mixing, validation etc.)",0,0,0,0.9754927158355712,0.9849822521209716,0.9349232316017152,0.0,accept,unanimous_agreement
1139294496,4384,"yes, thanks!",1,1,1,0.9110047221183776,0.9793177843093872,0.9540684819221495,1.0,accept,unanimous_agreement
1139300015,4384,"no, but if i understand correctly this really shouldn't happen.",0,0,0,0.7829533219337463,0.8704357743263245,0.8968155384063721,0.0,accept,unanimous_agreement
1139301755,4384,the behavior is restored in one of the later commits,0,0,0,0.9873409867286682,0.9923566579818726,0.991582214832306,0.0,accept,unanimous_agreement
1143091948,4384,"at the commit ""move `exportmixerdialog` invocation and mix-related warnings"", this line is deleted, and i don't see where it moves.",0,0,0,0.9762521982192992,0.9862793684005736,0.9912545680999756,0.0,accept,unanimous_agreement
1143122169,4384,"i'm pleased to see this function unified with `process`. it was an ugly violation of open-closed to see this as part of the exporter interface. fix the spelling in the commit comment: ""became""",1,1,-1,0.8899540305137634,0.9583002924919128,0.6470789909362793,1.0,accept,majority_agreement
1143156447,4384,`explicit`,0,0,0,0.9817335605621338,0.9890751242637634,0.9844794869422911,0.0,accept,unanimous_agreement
1164193200,4384,"i could use my new utility like this, avoiding repetition, and requiring no rewriting in case there is ever a need to add more variant alternatives that the generic lambda handles: [code block] similarly in other places where you use `get_if`",0,0,0,0.9842718243598938,0.9932552576065063,0.9936249256134032,0.0,accept,unanimous_agreement
949911011,3396,"this commit is not strictly needed for statelessness. you must have found a case where this appeared to fix persistency of settings in the configuration file. the analogous code for vst2, which you originally adapted to vst3, still uses base64 encoding and to change that would have some small risk of breaking compatibility of someone's settings configuration or macros if they migrate to 3.2. what was the original reason base64 encoding was used at all? i'm not certain but i think it was a way of converting binary data into something that could be stored in a config file with proper escapes and no loss of data. is that right, and is it a reason why you still might want to figure out some other way to keep base64 encoding working?",0,0,0,0.9683542847633362,0.9637327194213868,0.9904442429542542,0.0,accept,unanimous_agreement
949914369,3396,extra character in `#include`,0,0,0,0.9850038290023804,0.989192545413971,0.994835376739502,0.0,accept,unanimous_agreement
949926652,3396,"the meanings of `fetchsettings` and `storesettings` got reversed, and are now inconsistent with terminology in audiounits. there, `fetchsettings` is fetching state *from* an audiounit handle *into* an effectsettings package of data. `storesettings` does the opposite.",0,0,0,0.9828363060951232,0.9866093993186952,0.9814821481704712,0.0,accept,unanimous_agreement
949929867,3396,unused local variable,0,0,0,0.9785838723182678,0.9872424602508544,0.9908918738365172,0.0,accept,unanimous_agreement
949954417,3396,"copy construction was eliminated, so perhaps you may also declare the copy with explicit `= delete`",0,0,0,0.9876025319099426,0.9926537275314332,0.9952974915504456,0.0,accept,unanimous_agreement
949967763,3396,"the elimination of `storesettings` leaves the argument `settings` unused in this function, at least so i see at the fifth commit in the sequence. so this ""breaks"" that function, but i presume you fix it in later commits i have not yet reviewed. i understand from other commit comments that you put back a local wrapper object in the function for this purpose. strictly then this commit sequence isn't preserving intended behavior all the way through but i won't insist on that now.",0,0,0,0.9637480974197388,0.951589286327362,0.991350531578064,0.0,accept,unanimous_agreement
949975230,3396,"last things to say about the fifth commit. when i transformed other effect families, the move to actual statelessness came late. until a late commit, `getsettings` was a non-static member function, ignoring its argument, and really using information in the stateful effect object. all the places where `getsettings` had to be called were figured out first; and only then did i make a change so that the `effectsettings` objects really carried independent information around and were not dummies. you make this change earlier, so `effectsettings` objects really carry data, making it possible that buggy behavior exists in the intermedate steps of this transformation because of inconsistencies about where the correct data really are. i already mentioned the possible wrong behavior of exporting. it's not how i would write a very careful transoformation. in case bugs still exist after everything and i want to bisect to understand where the bug was introduced, the other caution i took with intermediate steps might help me find out where the mistake was really introduced. i'm not insisting now on rewriting this pull request that way.",0,0,0,0.965579628944397,0.9757260680198668,0.9244025945663452,0.0,accept,unanimous_agreement
949978761,3396,"i think it is the fifth commit that introduces the build failure on linux. it seems ""always"" is a macro defined somewhere in one of the inclusions. i was able to fix linux builds of my cherry-picks of your branch by moving the definition of `vst3effect::realtimesupport` earlier in the file, before other `#include` directives. another thing i didn't try was just to insert `#undef always` before the function.",0,0,0,0.962510347366333,0.98721444606781,0.9859948754310608,0.0,accept,unanimous_agreement
949988888,3396,"just use literal `44100.0` as a default, as before. don't use `effectbase::mprojectrate`. that is another piece of state in the effect objects i need to eliminate in a future release.",0,0,0,0.9847449660301208,0.994275152683258,0.9941903352737428,0.0,accept,unanimous_agreement
950019477,3396,could this instead be `singleinputparametervalue *const mparameterqueues;` so you can remove the `const_cast` below?,0,0,0,0.9879773259162904,0.9953281879425048,0.9932416677474976,0.0,accept,unanimous_agreement
950031281,3396,should this function clear the map in the settings? -- maybe not if it needs to be done in a worker thread. you don't (yet) use it in any worker thread (at the eighth commit of ten).,0,0,0,0.9832854866981506,0.9937717318534852,0.9915751814842224,0.0,accept,unanimous_agreement
950032150,3396,at this commit i see accumulation of changes in the map in `performedit` but clearing nowhere.,0,0,0,0.978876769542694,0.9917118549346924,0.97422194480896,0.0,accept,unanimous_agreement
950034001,3396,"this is the only place where the processors get changed settings information, and it only happens before playback.",0,0,0,0.983688235282898,0.9882348775863647,0.993701696395874,0.0,accept,unanimous_agreement
950035245,3396,"something is needed to replace the deleted lines, of course, so that there can be continuing adjustment of settings during play. so it seems you would need more `consumesettings` but in a worker thread. i don't yet see the complete transformation of the code in later commits, but at this commit it is surely incomplete.",0,0,0,0.9390654563903807,0.988331139087677,0.9898024201393129,0.0,accept,unanimous_agreement
950035872,3396,note the `realtimeprocessstart` is the only place where the worker thread should check for changes of state communicated by the main thread. not in `realtimeprocess` or `realtimeprocessend`.,0,0,0,0.9880316257476808,0.9934677481651306,0.9928336143493652,0.0,accept,unanimous_agreement
950042089,3396,"so i understand that `process` makes `inputparameterchanges` from `vst3wrapper::mparameters`, which in turn, must be assigned by `consumechanges`. a call to that is surely needed, then in `realtimeprocessstart`, and then `mparameters` will be correctly unchanging in case of mulitple calls to `process.`",0,0,0,0.9871801733970642,0.9907780885696412,0.9909605383872986,0.0,accept,unanimous_agreement
950043312,3396,"maybe the `effectsettings` could contain a map from parameter ids to `optional<>` values, so the consuming thread could ""clear"" the map by reassigning `nullopt` everywhere, but not doing any free-store deallocation.",0,0,0,0.9885945320129396,0.9948019981384276,0.9858104586601256,0.0,accept,unanimous_agreement
950058973,3396,"moving on the the ninth commit. as i already mentioned, you should avoid either allocating or freeing and that means, not clearing a `std::map` either. so i suggest again, a map from keys to optional values and just reassignment of null opt instead of clearing.",0,0,0,0.9863792657852172,0.9903604984283448,0.9925159811973572,0.0,accept,unanimous_agreement
950059260,3396,`copysettingscontents` in either direction is always done on the worker thread.,0,0,0,0.9885019063949584,0.9940724968910216,0.9943066239356996,0.0,accept,unanimous_agreement
950062153,3396,"`pertrackeffect.h` is enough, don't need its subclass",0,0,0,0.9757133722305298,0.9902455806732178,0.9923696517944336,0.0,accept,unanimous_agreement
950065075,3396,"this commit loses the vector of processors in the effect, but does not restore that array elsewhere in the instance.",0,0,0,0.9734346270561218,0.9880144000053406,0.9887680411338806,0.0,accept,unanimous_agreement
950069398,3396,"this deleted line has no corresponding one in the new function for the instance. but i see from other functions that you assume latency is available at initialization time and does not change, so you cache the value. ok. but i wonder if varying latency, with varying settings, really is a possible thing we will need to handle later. you know that fixing the handling of latency in realtime play is a problem i need to solve, maybe in a patch release.",0,0,0,0.8981236815452576,0.9400842785835266,0.9718382954597472,0.0,accept,unanimous_agreement
950071697,3396,the new `processinitialize` no longer calls `consumechanges`. does destructive processing correctly apply the changes to settings made in the dialog? how is that communicated? i must see the tenth commit i suppose.,0,0,0,0.9766831994056702,0.992086946964264,0.9950469732284546,0.0,accept,unanimous_agreement
950075262,3396,this logic moves to `realtimeinitialize` while the new `realtimeaddprocessor` does nothing. the `consumechanges` is lost so i am again unsure that the processor really begins in the correct state.,0,0,0,0.6311821341514587,0.9466522336006165,0.9652385115623474,0.0,accept,unanimous_agreement
950076309,3396,"this was the added `consumechanges` call i was expecting to see -- good, but again, i don't understand why it is right to remove the other calls, and it also needs rewrite to avoid deallocations.",0,0,0,0.937673270702362,0.944282293319702,0.934570014476776,0.0,accept,unanimous_agreement
950079321,3396,"ninth commit re-introduces use of the `settings` argument, good",0,1,0,0.8059290051460266,0.8304889798164368,0.684792160987854,0.0,accept,majority_agreement
950082042,3396,i expect that this new member of the effect moves to the validator next,0,0,0,0.9855347871780396,0.98435378074646,0.9889367818832396,0.0,accept,unanimous_agreement
950084243,3396,"there is a long-distance coincidence of repeated string literals here and in `vst3optionsdialog.cpp`. it would be nice to clean that up, but it's not necessary now",0,0,0,0.9800615906715392,0.9907751679420472,0.9782589673995972,0.0,accept,unanimous_agreement
950095289,3396,"i saw this new function and thought, is it safe to use only on the main thread? do changes of `mactive` happen only in the main thread? is `mactive` privately used only on the main thread? yes, yes, and yes, which is good. so please just add a comment in the header file that it's for main thread usage only.",0,0,1,0.913301169872284,0.851917564868927,0.8963066339492798,0.0,accept,majority_agreement
950102544,3396,i think this should call through to `effectuivalidator::onclose` so the effect doesn't hold on to `mparent` either,0,0,0,0.9849085807800292,0.991916000843048,0.9860803484916688,0.0,accept,unanimous_agreement
950103763,3396,this call got lost in the validator. the function is no longer called anywhere.,0,0,0,0.9194764494895936,0.8830362558364868,0.9874025583267212,0.0,accept,unanimous_agreement
950116259,3396,"my understanding of these lines is that they update both the edit controller and the effect component after you change a preset. the first, presumably, causes graphical updates. the other affects the state of the processor, but this might be happening during processing. are we confident of the thread safety of this? if not -- then `realtimeprocessstart` in the instance would have to complete the change of state of the effect component. would it be correct just to do a complete state change there, not using the pending changes interface?",0,0,0,0.9762335419654846,0.9907984733581544,0.9874574542045592,0.0,accept,unanimous_agreement
950118597,3396,"this also raises the question of the thread safety of the calls that may precede `updateui` and those are `loadfactorydefaults`, `loadfactorypreset`, `importpresets`, `loaduserpreset`. are they all safe to do while another thread is processing?",0,0,0,0.9847812652587892,0.9952127933502196,0.99285888671875,0.0,accept,unanimous_agreement
950120513,3396,"the sequence of those two calls is changed in the validator now, and i think that is correct",0,0,0,0.985676407814026,0.9849156141281128,0.9932833909988404,0.0,accept,unanimous_agreement
950124824,3396,"this call also got lost in the transformation. i think this means that `componenthandler::perforedit` will never do anything, so changes of dials will not be communicated in realtime to the processor.",0,0,0,0.9657332301139832,0.9714064002037048,0.9914008975028992,0.0,accept,unanimous_agreement
950133506,3396,"mprojectrate value is used to initialize generators, like in another effects, but without explicit sample rate specification",0,0,0,0.988943099975586,0.9939923882484436,0.9916973114013672,0.0,accept,unanimous_agreement
950140683,3396,"later commits eliminated these lines, so it doesn't matter. `msetup` is now, properly, part of instance state, not the effect, and is initialized with the correct rate.",0,0,0,0.9846358299255372,0.992194652557373,0.9938124418258668,0.0,accept,unanimous_agreement
950156176,3396,i haven't yet figured out what exactly causes data corruption. may be it's in base64::encode or base64::decode or may be there are some implicit charset conversion which wasn't taken into account. correct,0,0,0,0.9820319414138794,0.9205971360206604,0.9809044003486632,0.0,accept,unanimous_agreement
950176460,3396,"using storesettings on vst3effect instance could change it's state, which isn't correct behaviour. also considering that there is a single instance and the copy of settings that passed to this function was more likely fetched from same instance it shouldn't harm?",0,0,0,0.9786770343780518,0.9749774932861328,0.9885346293449402,0.0,accept,unanimous_agreement
950178549,3396,"name collision caused by indirect include of x.h, fixed by moving includes to another file",0,0,0,0.9690566658973694,0.9927714467048644,0.9846144318580629,0.0,accept,unanimous_agreement
950208935,3396,"not neccessarily. vst3effect doesn't yet (at this step) support realtime processing and doesn't support parameter changes ""on the fly"". so at this point it's enough to call consumesettings once, just before processing has started. parameterchanges used to be a vector... but as i said in the previous comment, i'll move it to assignsettings. upd: since it's not possible to update settings on the main thread side without a call to ::flush clearing does not do what it supposed to do",-1,0,0,0.6787735819816589,0.9832300543785096,0.9812871813774108,0.0,accept,majority_agreement
950286667,3396,in case of vst3 plugin should explicitly ask host to restart (via setactive) effect component by sending icomponenthanler::restartcomponent(klatencychanged).,0,0,0,0.9894487857818604,0.9918799996376038,0.9951496720314026,0.0,accept,unanimous_agreement
950297065,3396,1. there is only one instance of vst3wrapper which owned by vst3instance (no per-track sub effect initialization) 2. there is only one point where actual parameter change transfer before processing could occur - effectinstance::realtimeprocessstart 3. in case of destructive processing instance state updated via icomponent::setstate with settings stored by vst3uivalidator::validateui,0,0,0,0.9874287247657776,0.9915367364883424,0.991741180419922,0.0,accept,unanimous_agreement
950298482,3396,and also it creates a helper effect instance,0,0,0,0.9872034192085266,0.9914234280586244,0.9948467016220092,0.0,accept,unanimous_agreement
950307073,3396,"the only exception in the interface of this class is a process function, otherwise it's not thread-safe",0,0,0,0.9790495038032532,0.9509128332138062,0.9898656010627748,0.0,accept,unanimous_agreement
950317602,3396,"yep, thanks, fixed that",1,1,1,0.7915980219841003,0.9589632749557496,0.9571802616119384,1.0,accept,unanimous_agreement
950317713,3396,thanks,1,0,1,0.6094269156455994,0.5400217771530151,0.8643599152565002,1.0,accept,majority_agreement
950333005,3396,"it's safe to call setstate/getstate during processing, but this doesn't happen during processing `if(!isactive)` i would object to that since `realtimeprocessstart` is getting called for each block, i guess it's not how it supposed to work. correct thing would be to use setstate once (or when preset has changed), send changes via `icomponenthandler` and then save state at least once (in our case - when ui is closed)",0,0,0,0.9750139117240906,0.9888750314712524,0.9873730540275574,0.0,accept,unanimous_agreement
950695550,3396,"the point, however, is to make exportpresets work independently of any instance. and you achieve that in the later commit with a temporary wrapper.",0,0,0,0.9885936975479126,0.9931175708770752,0.9907393455505372,0.0,accept,unanimous_agreement
950870633,3396,"i see you added the build fix, but maybe it would be better done earlier in the commit sequence to keep all commits buildable.",0,0,0,0.9800675511360168,0.9910763502120972,0.989846169948578,0.0,accept,unanimous_agreement
950870904,3396,the build fixes might be done earlier in the commit sequence to keep all commits buildable.,0,0,0,0.9885454773902892,0.9942979216575624,0.9919244647026062,0.0,accept,unanimous_agreement
950872330,3396,"you have simply deleted the clearing of the `std::map` instead of the more complicated suggstion i made to use a map of unchanging size with `std::optional` values in it. there is also a swapping of map contents. i wonder whether this will reall work right. it would be that the old contents swapped away might later be incorrectly swapped in again, if `copysettingscontents` is called again before the main thread sends an updated message. so i think the right thing to do, which might fix some bugs with real time adjustment of dials, is as i suggested. more explicitly: - `makesettings` makes a map from each parameter id to `nullopt` - `performedit` emplaces values - `copysettingscontents` copies each value and assigns `nullopt` to the source (note, std::move from the optional will not make the source null opt) if you are experiencing some bugs with adjustment of sliders, then try this instead.",0,0,0,0.931671380996704,0.9804404377937316,0.9846144318580629,0.0,accept,unanimous_agreement
950878067,3396,it doesn't build for you?,0,0,0,0.9504981637001038,0.9729084968566896,0.9719858169555664,0.0,accept,unanimous_agreement
950879068,3396,"the more complicated suggestion will not work because: a) `makesettings` can't make such map because to do so it would need to instantiate `ieditcontroller` b) assigning `nullopt` or clearing the map turned out to be pointless, considering that the real purpose is to clear setting on the main thread side (so that subsequent `get` see it empty) and not the intermediate objects, which could be achieved only by using `flush` for now i guess it's not a big problem that main thread remebers latest values of all parameters that have changed i thought that counter prevents that, isn't it?",0,0,0,0.9066989421844482,0.9793680906295776,0.9645923376083374,0.0,accept,unanimous_agreement
950880369,3396,i don't understand that answer. there is no use of `mactive` but on the main thread. correct? anyway this unresolved point is only about a comment.,-1,-1,0,0.5221660137176514,0.7793320417404175,0.7237517237663269,-1.0,accept,majority_agreement
950883641,3396,i consider this resolved but i leave it open so you read and understand my previous comment.,0,0,0,0.9648858904838562,0.9673340916633606,0.9827949404716492,0.0,accept,unanimous_agreement
951471204,3396,i didn't really try building on linux. i may be mistaken. all commits were building for me on macos -- but not after the latest rebasing.,-1,0,0,0.5308741331100464,0.5032737851142883,0.9291550517082214,0.0,accept,majority_agreement
1593695176,6359,"i don't know if this comment is relevant only to the following two out-commented lines or to what follows, too. why keep the dead code?",0,0,0,0.8314471244812012,0.6074490547180176,0.9109750390052797,0.0,accept,unanimous_agreement
1593709727,6359,"looks like even the pointer should be `const`, i.e., `static const channelgroup* const mastergroup;` also, i'd prefer the initialization to take place here as well for clarity, rather than in the source file.",0,0,0,0.9854702949523926,0.9930443167686462,0.9894915819168092,0.0,accept,unanimous_agreement
1593713909,6359,trailing spaces,0,0,0,0.9795891642570496,0.824914276599884,0.9645050168037416,0.0,accept,unanimous_agreement
1593714423,6359,why not just removing it?,0,0,0,0.9130080938339232,0.970437228679657,0.9814432859420776,0.0,accept,unanimous_agreement
1593717912,6359,`nullptr` aka `mastergroup` ?,0,0,0,0.9872335195541382,0.99296772480011,0.992056667804718,0.0,accept,unanimous_agreement
1593751139,6359,"if so i'd prefer `mastergroup` over `nullptr`, in case one looks for all places where it's used.",0,0,0,0.98707914352417,0.9945347309112548,0.989539921283722,0.0,accept,unanimous_agreement
1593771923,6359,"why ? isn't this used by `allocatechannelstoprocessors` to ""plug"" an effect's output channels to the number of playback channels. why should this change with the master channel?",0,0,0,0.9645008444786072,0.9905403852462769,0.988507866859436,0.0,accept,unanimous_agreement
1593796935,6359,i think correct english would be `maketrackeffectpane` (even if there's more than one effect).,0,0,0,0.9864510297775269,0.9849910140037536,0.9870092272758484,0.0,accept,unanimous_agreement
1593844391,6359,"this crashes when playing a midi file on an empty project, because `mplaybacksequences` and, consequently, `mprocessingbuffers`, are then empty.",0,0,0,0.938531458377838,0.9386754035949708,0.9717668294906616,0.0,accept,unanimous_agreement
1593868140,6359,"maybe a solution: the size of `mmasterbuffers` equals the number of playback channels, maybe it could be used instead. also, afaics these buffers always have the same size, so a simple `mmasterbuffers[0].size()` would be more expressive and sufficient.",0,0,0,0.9819215536117554,0.994342803955078,0.9850425720214844,0.0,accept,unanimous_agreement
1593869133,6359,or `mplaybackbuffers`.,0,0,0,0.988114595413208,0.9922059178352356,0.9929973483085632,0.0,accept,unanimous_agreement
1593870392,6359,noise,0,0,0,0.8707705140113831,0.7852447032928467,0.8246247172355652,0.0,accept,unanimous_agreement
1593870645,6359,trailing spaces,0,0,0,0.9795891642570496,0.824914276599884,0.9645050168037416,0.0,accept,unanimous_agreement
1593916589,6359,"i don't see any side effect if `pscope == nullptr`, so shouldn't the `if (pscope)` be on this line?",0,0,0,0.9733498096466064,0.9892534613609314,0.9886062741279602,0.0,accept,unanimous_agreement
1593918862,6359,the comment isn't specifically about master channel. when we allocate two mono effects to one stereo track there is at least one problem with ui : you can't see the output of the second channel. i think configuring effects to process samples in native track format and rate could have benefit of reducing cpu load in case if playback sample rate is higher compared to playback rate. but that may be conceptually wrong.,0,0,0,0.7521252632141113,0.9654260277748108,0.9539592266082764,0.0,accept,unanimous_agreement
1593973495,6359,"regarding the cpu, i don't know, it looks like there is no negotiation at the moment: the framework dictates the sampling rate to the effect instances, which i guess is much simpler. also, i think resampling is inevitable, so i'm not sure we want to try and minimize it. my point is that this todo should probably be tempered with some doubt, e.g., ""consider initializing (...) because (...)""",0,0,0,0.7670028209686279,0.7578673362731934,0.9092623591423036,0.0,accept,unanimous_agreement
1595345368,6359,""" or for the master when group is null""",0,0,0,0.98746919631958,0.9934066534042358,0.9939957857131958,0.0,accept,unanimous_agreement
1595415050,6359,"comment ""mplaybackbuffers correspond many-to-one with mplaybacksequences"" above this line is no longer correct",0,0,0,0.9553556442260742,0.9932570457458496,0.9916704893112184,0.0,accept,unanimous_agreement
1595424913,6359,"i would add a comment that this `resize` is expected not to allocate memory in the worker thread, because sufficient size should have been reserved in `allocatebuffers`. perhaps, test capacity before and after and `assert` no change.",0,0,0,0.9894784092903136,0.9945764541625975,0.9926361441612244,0.0,accept,unanimous_agreement
1595463844,6359,"i don't think the mixer can be properly eliminated in the case that it does resampling of a track whose rate does not match the device output rate, or there is a time track. there will be some state in the resampler dependent on previous input. however, note that the mixer stands as a producer in relation to this function which is its consumer. perhaps, if it really matters, another thread could mix in advance. but all that effort at overlapping computation may be unnecessary because this thread really spends most of its time idle anyway, going faster than the ultimate real-time consumption of its output. or then again maybe it might matter in future because we want to have ever more capacity for complicated calculations like more effects, more stretching, more pitch shifting. or again, maybe you were thinking of power consumption, not performance.",0,0,0,0.963736057281494,0.8306468725204468,0.9685280323028564,0.0,accept,unanimous_agreement
1595470151,6359,"i notice that as part of this pr you have moved the logic to silence tracks (which might be driven by unpredictable presses of the mute buttons by the user) from the low-latency thread to this high-throughput thread. was that for simplification of the former, so that it does less work? or some other reason? does this comment mean you have not yet restored the microfading feature? (i have not yet read enough to answer that for myself) i think i like this change because as i recollect, the microfading had a dependency on the buffer size given to `audacityaudiocallback` which can depend on operating system or larency settings. that should not be: the duration of the fade in or out should be independent of that.",1,0,1,0.583875298500061,0.9501937627792358,0.6539367437362671,1.0,accept,majority_agreement
1596345141,6359,i don't know what earlier check is meant here. could it be that this comment is also outdated?,0,0,0,0.8278078436851501,0.6337452530860901,0.930857002735138,0.0,accept,unanimous_agreement
1596347972,6359,"a little bit higher, line 2712 on this commit, is the line `float *outputfloats = outputbuffer;`, which only seems to be an alias to the same thing, maybe a remnant of older code. would you remove it if you get the chance?",0,0,0,0.9867870807647704,0.9936949610710144,0.9919227361679076,0.0,accept,unanimous_agreement
1596367013,6359,"there might be a mini bug here: if adding a real-time effect during playback increased latency such that `samplesavailable` becomes 0, what would be played for that frame would be the samples of the previous `mplayoutbuffers`, possibly leading to a repeated playout of the last few ms. solution might be to return `false`, such that the `audiothread` doesn't read the content of `mplayoutbuffers` ? it would be worse if a real-time effect had variable latency, but i don't think there's a use case for that.",0,0,0,0.9364534616470336,0.9473761916160583,0.9671934247016908,0.0,accept,unanimous_agreement
1596381971,6359,that would apply to the next `if(samplesavailable == 0)` too.,0,0,0,0.9880306124687196,0.9926769733428956,0.9942049384117126,0.0,accept,unanimous_agreement
1596408085,6359,"i have doubts about the correctness of the handling of latency for the master channel. the `discardable` value returned by a real-time effect is the number of leading samples that can be discarded. for the track effects, this is indeed what is done: [code block] for the master track, however, no leading samples are discarded, and then [code block] which means trailing samples are discarded instead. it was already that way in the previous commit but i missed it. if i'm correct, the consequence of this mistake would be that, if the master channel has an effect that adds delay, an artefact due to zeroed audio would be heard at the beginning of playback.",-1,0,0,0.7868634462356567,0.925096333026886,0.6891471743583679,0.0,accept,majority_agreement
1596413595,6359,"i also don't see the necessity of `masteroffsets`. i don't think there can be left-overs from one `processplaybackslices` to the next, as it would mean this method would produce more audio samples than asked for, and i don't see it to be the case.",0,0,0,0.8839527368545532,0.9767667055130004,0.990620493888855,0.0,accept,unanimous_agreement
1596710560,6359,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
1596727030,6359,comment refers to variables that no longer exist,0,0,0,0.9177529811859132,0.9864767789840698,0.9873907566070556,0.0,accept,unanimous_agreement
1596798315,6359,"delete ""of""",0,0,0,0.9621173739433287,0.9892259240150452,0.9842102527618408,0.0,accept,unanimous_agreement
1596800992,6359,i am reminded that the handling of latency is still not satisfactory. i had ideas for fixing it that i have not found time to implement.,-1,-1,-1,0.949951469898224,0.7382562160491943,0.4990476667881012,-1.0,accept,unanimous_agreement
1596816243,6359,"the problem does exist indeed. in the attached video, you can hear an audible crackle at the beginning of the playback with a non-zero latency effect (tdr limiter) added to the stack: [a link]",0,0,0,0.9578579664230348,0.9919846653938292,0.986244261264801,0.0,accept,unanimous_agreement
1596831605,6359,is that really todo? i think you have conserved the micro-fade logic on the consumer side in `filloutputbuffers`,0,0,0,0.9878424406051636,0.9932789206504822,0.993440568447113,0.0,accept,unanimous_agreement
1596831831,6359,thanks .,0,1,0,0.5150366425514221,0.8151535391807556,0.5633893609046936,0.0,accept,majority_agreement
1596835118,6359,"iiuc that one handles the changes in the volume slider, which are global. this is for the track-specific mute/unmute.",0,0,0,0.988203465938568,0.9925455451011658,0.9927884936332704,0.0,accept,unanimous_agreement
1596845035,6359,"the comment refers to what now happens inside `callbackcheckcompletion`. amend the comment to make that more explicit. and it's now ""below"" not ""above"".",0,0,0,0.9733981490135192,0.9935719966888428,0.9947752952575684,0.0,accept,unanimous_agreement
1596868341,6359,doing latencies really right is a known bit of technical debt. i have had ideas. i didn't find time to elaborate and share them yet.,-1,-1,-1,0.8712688684463501,0.968742311000824,0.5373624563217163,-1.0,accept,unanimous_agreement
1598563569,6359,"i though that mixer could be ""advanced"" without doing any actual work",0,0,0,0.9854767918586732,0.9687739610671996,0.984421968460083,0.0,accept,unanimous_agreement
1598576216,6359,the reason is that we can't do master effects processing on low-latency thread and that processing should happen after all the tracks have been mixed into playback channels.,0,0,0,0.981073260307312,0.9902320504188538,0.9880498051643372,0.0,accept,unanimous_agreement
1598578087,6359,"micro-fading isn't completely restored, it doesn't happen when you move gain, pan sliders or press solo/mute buttons.",0,0,0,0.9691558480262756,0.9584825038909912,0.9595823884010316,0.0,accept,unanimous_agreement
1598588136,6359,"i think the answer to your question is in `fillplaybuffers`. if for some reason `samplesavailable` will be zeroed, then there will be more processing passes until `getneeded() == 0`. otherwise if i `return false` as you suggest then extra buffer exchange step will be initiated for same frame, which i think is less preferrable. may be we should test how it works now with latency values that are much larger than our regular buffer sizes",0,0,0,0.9720916748046876,0.9903054237365724,0.9842926859855652,0.0,accept,unanimous_agreement
1600928970,6359,"what are these new lines fixing ? it looks like we are now ensuring that no new memory is allocated in that function. this comes at the risk, though, that we provide less than `frames` samples, if for some reason the capacity of the buffer is insufficient. wouldn't that be worse ? i wonder if this change is motivated by the initial playback click that we hear in 's video above. i suspect this not to be due to buffer allocation, but simply because he is playing a sine wave without any sort of smoothing envelope, and it's then completely normal to hear this click.",0,0,0,0.6045994162559509,0.8158740401268005,0.94937002658844,0.0,accept,unanimous_agreement
1601118035,6359,"yes memory allocations are not better. the disadvantage of this code is that it's not capable to handle very large latencies (usually > 250ms). no, i did that in response to paul's comment above",0,0,0,0.6779197454452515,0.8467005491256714,0.978792130947113,0.0,accept,unanimous_agreement
1610160924,6359,please avoid unnecessary formatting changes if you don't change the line itself - it complicates the search through commit history and review process,0,0,0,0.947460949420929,0.9821616411209106,0.9811413288116456,0.0,accept,unanimous_agreement
1610170103,6359,there is a `finally` block already that does cleanup job,0,0,0,0.9884225726127625,0.9911532998085022,0.9935573935508728,0.0,accept,unanimous_agreement
702501679,1614,only changing note track affordance text colors?,0,0,0,0.9863166213035583,0.9743311405181884,0.9946790933609008,0.0,accept,unanimous_agreement
702501884,1614,"add header comments as in other headers describing the purpose of the file, and use and comments for doxygen.",0,0,0,0.9890459179878236,0.9916172623634338,0.995460331439972,0.0,accept,unanimous_agreement
702504278,1614,"i am uneasy with this entire commit. you have figured out tracklistevent, which is emitted by tracklist. why must wavetrack emit an event? where you need this event, can't you bind to the tracklist instead and use the existing event types?",-1,-1,-1,0.977270007133484,0.9285506010055542,0.9786737561225892,-1.0,accept,unanimous_agreement
702504439,1614,this is where the new event type is bound. why not bind to the tracklist?,0,0,0,0.9858810901641846,0.9921701550483704,0.9945269227027892,0.0,accept,unanimous_agreement
702504699,1614,this is the handler of the event. could instead mtextedithelper bind directly to the track list? would that solve any problems about lifetime?,0,0,0,0.9879449605941772,0.9930992126464844,0.9951635599136353,0.0,accept,unanimous_agreement
702507284,1614,"unbind() is also unnecessary when the event ""sink"" object in the bind() call also inherits wxevthandler. then when it is destroyed, the ""source"" wxevthandler is also notified to clean up its list of observers. (i'm not certain, but it may in fact be enough for the sink to inherit wxtrackable, a base class of wxevthandler.) can the text edit helper inherit wxevthandler and bind itself to the tracklist? then it can destroy itself in response to the event.",0,0,0,0.9855607151985168,0.991663932800293,0.992382824420929,0.0,accept,unanimous_agreement
702511353,1614,"perhaps ""texteditpolicy"". this looks like the ""policy"" pattern, also called ""strategy,"" where an object supplies a set of callbacks to a reusable framework.",0,0,0,0.98730206489563,0.9936074018478394,0.988817811012268,0.0,accept,unanimous_agreement
702512587,1614,"this logic was duplicated from labeltrackview and labeltexthandle. but why duplicate, when we might really reuse? can it be given a better name like ""texteditingcell"" and could it first be split out and used in labeltrackview?",0,0,0,0.9880504012107848,0.985380232334137,0.9928783774375916,0.0,accept,unanimous_agreement
702527347,1614,"i recommend: combine this header with textedithelper.h, because the classes cooperate closely. neither is useful without the other. then, define the destructor of texteditdelegate as non-inline. if a class has virtual functions, it is better that at least one of them is defined non-inline, and the destructor can be the one if all the others are pure virtuals. (actually pure virtual functions cal also be given definitions, but that's another story.) it is better because then it can be decided at compile time, in what single place, the virtual function table of this base class will be compiled. whereas otherwise, the compiler must duplicate the virtual function table definition, and the linker needs to remove all but one duplicate. so avoid the bit of extra work for the linker.",0,0,0,0.921629786491394,0.9549978971481324,0.9488343000411988,0.0,accept,unanimous_agreement
703034109,1614,in new commit history this commit contains also wave track colors changes,0,0,0,0.9877095222473145,0.99133962392807,0.99366295337677,0.0,accept,unanimous_agreement
703034600,1614,`waveclipaffordancecontrols` now inherits `wxevthandler` and this fixes issue with event processing and objects lifetime,0,0,0,0.9873842000961304,0.995287299156189,0.986372411251068,0.0,accept,unanimous_agreement
703035792,1614,"no, it's not a policy. it could be a `texteditlistener` or replaced with wxevent dispatch",0,0,0,0.986400842666626,0.9907358288764954,0.9938818216323853,0.0,accept,unanimous_agreement
703036621,1614,it's not a cell because it does not define trackpanel separation as other cells do. there is another pr which addresses an issue with code duplication,0,0,0,0.9821205735206604,0.9824305772781372,0.9902313351631165,0.0,accept,unanimous_agreement
704844424,1614,"i see the purpose of this change and the commit that introduces it is to fix a ""slicing problem"" in assignuihandleptr, where an object of derived type may be assigned to an object of base type, losing information. yes? i don't know why i didn't see this earlier in review! i suggest this additional change (add it to the label refactoring branch maybe): in assignuihandleptr, in the else-branch, add [code block] you may also need [code block]",0,0,0,0.9476280212402344,0.8760347366333008,0.7497580647468567,0.0,accept,unanimous_agreement
704846185,1614,"this change is good, but incomplete! similar code with the same slicing error is still not corrected in notetrackaffordancecontrols.",1,1,0,0.862511396408081,0.965908706188202,0.5057322978973389,1.0,accept,majority_agreement
704850892,1614,can you state in comments any intended invariant relations among these values? is it meant to be invariant that `minitialcursorpos <= mcurrentcursorpos` ?,0,0,0,0.98894065618515,0.9950559139251708,0.9950372576713562,0.0,accept,unanimous_agreement
704851346,1614,"should you comment before this function, [code block] or swap the values before the assignment to make the condition hold?",0,0,0,0.988137662410736,0.9915394186973572,0.9953006505966188,0.0,accept,unanimous_agreement
704854663,1614,please use `override` not `virtual`.,0,0,0,0.985771656036377,0.9928566217422484,0.9946605563163756,0.0,accept,unanimous_agreement
704863745,1614,should this be index <= 0?,0,0,0,0.9862720966339112,0.9922427535057068,0.9915568828582764,0.0,accept,unanimous_agreement
704868225,1614,"i don't know if it is important, but i think this if-block needs to move down, outside one more } , to correct the analogy with labeltexthandle::handletextclick: do it whether bounding box contains the position, or not.",0,0,0,0.9793257713317872,0.9642809629440308,0.9866752028465272,0.0,accept,unanimous_agreement
704870171,1614,"my preference is to put cleanup lines like the above three inside [code block] and put the declaration of cleanup higher, just after the first setclippingregion(). this is ad-hoc raii. `finally` generates a class that performs the lambda in its destructor, and binds an instance to `cleanup`. this makes it easier to be confident that a long function isn't making a mistake somewhere, with an early exit that forgets to restore the context. or, in case of exceptions.",0,0,0,0.9785211086273192,0.9924666285514832,0.9909928441047668,0.0,accept,unanimous_agreement
704872072,1614,is this condition correct in case of right-to-left layout?,0,0,0,0.9869049191474916,0.9937644004821776,0.9934201836586,0.0,accept,unanimous_agreement
704872192,1614,ditto ?,0,0,0,0.8876813054084778,0.9752580523490906,0.9641594886779784,0.0,accept,unanimous_agreement
704872404,1614,i think moffset needs comments about what it really is. i'm not sure i understand it.,-1,-1,0,0.920250117778778,0.5738299489021301,0.8840007185935974,-1.0,accept,majority_agreement
704873937,1614,"are the above two lines right? isn't current >= initial always? is what you really want to do: get char positions for initial and current, as left and right, but then swap in case of rtl layout? because, swap is needed in that case and that case only? did you really try all of this out with arabic? putting breakpoints at every test of layout, and making sure all are hit?",0,0,0,0.9831199049949646,0.9890226125717164,0.98812997341156,0.0,accept,unanimous_agreement
704878292,1614,"i see you made this command by analogy with settracknamecommand in commontrackcontrols.cpp, and like that command class, it isn't meant to be registered with commandmanager. it is commented there, that the same effect can be achieved with other commands available to macro programming. is that so for change of clip name? no. so i suggest: the existing setclipcommand class needs to be extended with another parameter for setting the name, by means of macro programming. i know that wasn't part of the specification of this project, but it is something that should be done for completeness: exposing all changes of properties we can to macro programmers too. this could be a separate pr. i opened issue #1644",0,0,0,0.9418959021568298,0.9654567837715148,0.9643439054489136,0.0,accept,unanimous_agreement
704880162,1614,is this your first experience writing some shuttlegui code?,0,0,0,0.9824478030204772,0.9915607571601868,0.9883162379264832,0.0,accept,unanimous_agreement
704881009,1614,"whenever you add xos or xxos, make sure jouni agrees with the exact words. there are a few others in this pr.",0,0,0,0.9813534021377563,0.9902702569961548,0.9940504431724548,0.0,accept,unanimous_agreement
704888853,1614,"this function, and the two following, may cause. return key, while the mouse is in a wave track, to edit a clip name. was that part of the design? i think the more correct way to do call-through: call through to the affordance, but then check event.getskipped(). if it is true, meaning the affordance did not take its first-chance to capture the key, then call through to the base class in case it wants to capture. take the bitwise or of the return from the two capturekey calls, as the return value of the function. it may not make a difference now, because nothing really happens in the base class methods, but don't assume that will remain so. make similar fixes in the next two functions.",0,0,0,0.9811517596244812,0.985556423664093,0.9881792068481444,0.0,accept,unanimous_agreement
704891903,1614,"tab key navigation didn't work when i tried it, but the simple missing piece, is a change of wavetrackaffordancecontrols::capturekey so it does not skip the event for tab key.",0,0,0,0.9843820929527284,0.97425776720047,0.9898219108581544,0.0,accept,unanimous_agreement
704893435,1614,"do we also want to implement leftward navigation among clips for shift + tab, as is done for labels?",0,0,0,0.9886578917503356,0.9948304295539856,0.9933364391326904,0.0,accept,unanimous_agreement
704909404,1614,make_shared ?,0,0,0,0.9853606820106506,0.980197548866272,0.994558334350586,0.0,accept,unanimous_agreement
704910475,1614,that's a strange line... i think it does nothing,-1,-1,-1,0.9712673425674438,0.9857048988342284,0.9264618158340454,-1.0,accept,unanimous_agreement
704912047,1614,"""used to send""",0,0,0,0.986584484577179,0.98186856508255,0.9922695159912108,0.0,accept,unanimous_agreement
704913021,1614,override,0,0,0,0.9859734773635864,0.9445286989212036,0.9805362224578856,0.0,accept,unanimous_agreement
704913065,1614,override,0,0,0,0.9859734773635864,0.9445286989212036,0.9805362224578856,0.0,accept,unanimous_agreement
704916277,1614,"now i understand why textedithelper has a weak pointer to its delegate. if it were shared, we would have a cycle of shared pointers which is a bad thing. the helper is owned by its delegate and not the opposite. perhaps comments in those text edit classes should clarify this point of lifetime management?",-1,0,0,0.6627042293548584,0.5284765958786011,0.9293566346168518,0.0,accept,majority_agreement
704918290,1614,"you can simplify. double click can or the return value with cancelled and then you don't need mdoubleclickflag. see the much repeated comment ""do not start a drag"" in the source tree for other examples.",0,0,0,0.9856488704681396,0.985328733921051,0.9927918910980223,0.0,accept,unanimous_agreement
704920185,1614,"now that you bind to the track list, the function ontrackchanged will take its effect whenever any track changes it selected state. is that the intention, or should it check only for changes of the relevant wave track?",0,0,0,0.9888562560081482,0.9933506846427916,0.994779109954834,0.0,accept,unanimous_agreement
707258524,1614,not neccessary that `minitialcursorpos <= mcurrentcursorpos` it depends on direction in which selection is moving: from left to right or right to left. variables have the same meaning as they do in labeltrackview,0,0,0,0.9876809120178224,0.9898502826690674,0.9913756251335144,0.0,accept,unanimous_agreement
707265720,1614,"yes, it should, thanks!",1,1,1,0.9371758699417114,0.985913872718811,0.9751213192939758,1.0,accept,unanimous_agreement
707280334,1614,"agreed, thanks!",1,1,1,0.9490524530410768,0.9863975644111632,0.968579888343811,1.0,accept,unanimous_agreement
707298324,1614,"yep, don't work as expected with rtl layout and ltr language",0,0,0,0.96992826461792,0.8450434803962708,0.9725860357284546,0.0,accept,unanimous_agreement
707301008,1614,will add a comment,0,0,0,0.984499454498291,0.9830548763275146,0.9919449687004088,0.0,accept,unanimous_agreement
707304955,1614,"not always, depends on direction of cursor movement",0,0,0,0.9716900587081908,0.9705490469932556,0.9805237054824828,0.0,accept,unanimous_agreement
707308108,1614,sort of,0,0,0,0.9752012491226196,0.8739995360374451,0.932602882385254,0.0,accept,unanimous_agreement
707573266,1614,"yes, though editing will be invoked only if there is a ""selected"" clip on that track.",0,0,0,0.9889302849769592,0.9925823211669922,0.9931824803352356,0.0,accept,unanimous_agreement
707643942,1614,"yes, it's intentional, thought was not specified by design document, so i made the behaviour similar to the behaviour in the label track, whenever it was possible (that was specified)",0,0,0,0.9837132692337036,0.9910194277763368,0.9910147786140442,0.0,accept,unanimous_agreement
707650674,1614,"but i thought mcurrentcursorpos and minitialcursorpos are logical positions in a string of characters, not x coordinates on a screen. if they are not that, what are they?",0,0,0,0.9815086722373962,0.9487675428390504,0.9842705130577089,0.0,accept,unanimous_agreement
707653147,1614,"they do, but it's not neccessary that owner of the textedithelper and texteditdelegate are the same object, and in the latter case it's better to keep it in a separate file",0,0,0,0.9870551824569702,0.9897137880325316,0.9911881685256958,0.0,accept,unanimous_agreement
707653554,1614,thanks! fixed,1,1,1,0.9678161144256592,0.99091774225235,0.990587592124939,1.0,accept,unanimous_agreement
707665590,1614,i'm not sure that undoing clipping region in the case of exception would be a safe operation,0,0,0,0.8783283829689026,0.7458683848381042,0.5606629252433777,0.0,accept,unanimous_agreement
707667225,1614,"fixed, tabbing works for me on windows, but didn't test it on other platforms. also added a shift+tab, thanks",1,1,1,0.9368442296981812,0.6700799465179443,0.9698495268821716,1.0,accept,unanimous_agreement
707669540,1614,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
707738557,1614,"yes, they are a positions in a string. minitialcursorpos is not moving and initialized when interaction is started, then, when user moves cursor either with mouse (holding a left button), or with shift+arrow left/right mcurrentcursorpos is used to track the ""current"" cusror position",0,0,0,0.9851592183113098,0.9896764159202576,0.9936888217926024,0.0,accept,unanimous_agreement
708389265,1614,"i still like non-inline virtual destructors (really, virtual anything should never be inlined, because it will usually never be inlined).",0,0,0,0.5576848983764648,0.7693869471549988,0.9092509150505066,0.0,accept,unanimous_agreement
708389952,1614,this suggestion wasn't implemented yet,0,0,0,0.9775248765945436,0.982662796974182,0.9878724813461304,0.0,accept,unanimous_agreement
708393961,1614,i think you meant to replace the line before this new line. not to add a new line. but the code is correct! just not simplified,0,1,1,0.9241384267807008,0.6435558795928955,0.5019751787185669,1.0,accept,majority_agreement
708400978,1614,"nice use of a template to capture the common logic of the forward and backward cases! instead of `comp comp` i would write `pred pred` because that argument is a unary predicate, not a binary comparator. but that's only variable names.",1,0,1,0.9619161486625672,0.748136043548584,0.9901522994041444,1.0,accept,majority_agreement
708484066,1614,fixed with wxdcclipper,0,0,0,0.98921799659729,0.9921647310256958,0.994579553604126,0.0,accept,unanimous_agreement
709689352,1679,this is correct use of positiontotime and timetoposition. you understatnd that you don't just mutliply dx by some scaling factor. the assumption of uniform samples per pixel should not be made. future projects might change that.,0,0,0,0.9856424927711488,0.9859041571617126,0.9789342284202576,0.0,accept,unanimous_agreement
709689657,1679,the cancel procedure is good. the release is still empty. it will require pushing an undo history item.,1,0,0,0.6202150583267212,0.5058613419532776,0.638110876083374,0.0,accept,majority_agreement
709689995,1679,"std::weak_ptr instead of some subclass raises the danger of the slicing problem, which you correct in a later commit. but look at all those old bad examples before it that i wrote! these should be corrected too.",-1,0,-1,0.5192316770553589,0.5888878107070923,0.8105167150497437,-1.0,accept,majority_agreement
709690480,1679,"i observe that this second commit in the draft pr does not build. in the final pr, that should be corrected, and i would like this internals commit to be first in the sequence. or it might be a pr by itself.",0,0,0,0.978298008441925,0.9901140928268432,0.9917873740196228,0.0,accept,unanimous_agreement
711424012,1679,the unusual case where a call to one of the *sequence* functions is needed not *play*. comment it.,0,0,0,0.972201406955719,0.9805886149406432,0.9752010107040404,0.0,accept,unanimous_agreement
711424770,1679,"i would slightly prefer not removing the anonymous namespace over can, making symbol tables just a little smaller. this would require forward-declaring incomplete types in namespace { ... } in the .h file.",0,0,0,0.9754413962364196,0.9886935353279114,0.9858579635620116,0.0,accept,unanimous_agreement
711429022,1679,"this change is correct, but discuss with whether new information about the size of the hidden parts of the clip should also be passed to nyquist. understand what happens here: c++ composes a string that is passed to the lisp interpreter, and that sets up variables that are available to programming in lisp.",0,0,0,0.9858289957046508,0.9928989410400392,0.9948260188102722,0.0,accept,unanimous_agreement
711430317,1679,"as i review the necessary changes in effects, this occurs to me. what is expected if effects are applied to clips with hidden parts? if you do nothing else, then the hidden parts remain unchanged. perhaps that is expected behavior. or perhaps in the case of the reverse effect, it would be surprising behavior. i’m not sure whether you should do anything extra. this is one of the few places where there was a call to setoffset. other effects did not use it.",0,-1,0,0.8516342639923096,0.6361836791038513,0.9481399059295654,0.0,accept,majority_agreement
711431051,1679,"as with nyquist, so perhaps too for macro programming: give more information about the size of the hidden parts of the wave for sophisticated users. only information: no interface for changing it.",0,0,0,0.9790537357330322,0.979362726211548,0.9911676645278932,0.0,accept,unanimous_agreement
711431522,1679,notice this comment. the non-overlapping condition for clips can be violated with macro programming! not our responsibility to fix that yet i think.,-1,-1,0,0.8053240180015564,0.649162232875824,0.9176270365715028,-1.0,accept,majority_agreement
711431653,1679,another unusual setoffset call.,0,0,0,0.969645619392395,0.9542993307113647,0.7152971029281616,0.0,accept,unanimous_agreement
711614236,1679,"i notice that this is a protected method. i notice also that wavetrack is a final class, so the distinction of protected and private is not useful. maybe the class should be simplified, only to have public and private methods.",0,0,0,0.9630627632141112,0.9762428998947144,0.9848203063011168,0.0,accept,unanimous_agreement
711615101,1679,"i see that wavetrack::getnumsamples becomes two public methods, each used in only one other place, and those other uses are correct. i like the renaming changes here and in waveclip -- *sample* versus *play* names -- and they force you to recompile many places and consider carefully which renaming is the correct one. i am more confident in your work when i see that you did this. should the name changes be permanent? i say, yes. much less has changed in the interface of wavetrack.h, than for waveclip.h. it is a little surprising -- so to review carefully i must also look at what else is in wavetrack.h that did not change, and be convinced that it is correct not to change them. i notice that wavetrack::getstarttime() and getendtime() did not change names. but as you know, that is because they are overrides of methods of track.h, which declares virtual getstarttime() and getendtime() but doesn't comment what they are supposed to mean. so, i understand this exception to renaming -- you don't want to make the name changes in the other overrides. still that means i must review all uses of getstarttime and getendtime to be sure.",1,1,1,0.8693205714225769,0.6476726531982422,0.8842188119888306,1.0,accept,unanimous_agreement
711616146,1679,"comments above this function, and above the next function, still mention the old method names `getstarttime, getendtime`. update the comments.",0,0,0,0.9884546995162964,0.9932618737220764,0.9945665597915648,0.0,accept,unanimous_agreement
711616567,1679,"i'm doing that review, and i notice many getstarttime and getendtime calls in effects, which i just assume correct -- that destructively applied affects will only apply to the un-hidden parts of tracks. as i said, that might be surprising in some cases and a debatable point of design, but i will interpret the design for now as not demanding it. i notice getoffset() and setoffset() are two other virtual functions in the base class track that were not renamed, so i must also review uses of those to be sure of completeness.",0,0,0,0.9542695879936218,0.9524449110031128,0.973838984966278,0.0,accept,unanimous_agreement
711618037,1679,the comment preceding this function also needs update to mention new method names,0,0,0,0.9884207248687744,0.9933363199234008,0.995705544948578,0.0,accept,unanimous_agreement
711628434,1679,"now i have done that review. i think that the legacy in class track needs a clean-up. it's not clear what the distinction of ""start time"" versus ""offset"" is supposed to mean, or what purpose the moffset member variable serves. i think there should be a clean-up project to eliminate the ""offset"" functions. this is not to be part of the present pull request. it is for one of us to write in the stabilization period and for the other one to review.",0,0,0,0.9712716341018676,0.9849188327789308,0.9565874338150024,0.0,accept,unanimous_agreement
711630192,1679,"please insert this new member function immediately before wavetrack::paste(). that may make the commit more easily reviewable because there will be more common lines, and less in the diff view.",0,0,0,0.9865137934684752,0.9900602102279664,0.9948528409004213,0.0,accept,unanimous_agreement
711631737,1679,"buried in all these changes is one very interesting thing here: the need for a more strict definition of correspondence of clips. a detail like this deserves comments, both in the code here, and also in the git commit comments. i'd like to encourage you to write more comments, of both kinds, about such changes of behavior.",0,0,0,0.4972967207431793,0.6201915144920349,0.501502513885498,0.0,accept,unanimous_agreement
711640153,1679,"the function `wavetrack::trim` has another interesting non-trivial change of behavior, like the test for correspondence, which is worthy of a comment. instead of deleting material, as before, now we hide the material in the smart clip but do not forget it. i looked for where this function is used. one place is in effectsoundtouch -- but it always applies to a newly generated temporary track. the other implements the trim editing command, in editmenus.cpp. there is a comment there, no longer appropriate, which should be changed: [code block]",0,0,0,0.873985230922699,0.9688544273376464,0.9361497759819032,0.0,accept,unanimous_agreement
711661039,1679,a definite mistake here. waveclip::setoffset used to affect the envelope and the sequence. but waveclip::setplaystarttime now affects only the sequence.,0,0,-1,0.8267159461975098,0.9630718231201172,0.5748506784439087,0.0,accept,majority_agreement
711661446,1679,"if this function instead called through to waveclip::setsequencestarttime(), which does change the envelope offset, then the bug last mentioned would be fixed.",0,0,0,0.9884757995605468,0.9945040941238404,0.9922458529472352,0.0,accept,unanimous_agreement
711677507,1679,“previously”,0,0,0,0.802928626537323,0.9896753430366516,0.9808183908462524,0.0,accept,unanimous_agreement
711677766,1679,"i thought there might be a bug with cut lines, but i read all again carefully and no longer think so. good job",1,1,1,0.9730805158615112,0.9775723814964294,0.9930126070976256,1.0,accept,unanimous_agreement
711680311,1679,some doubtful code you dont need now?,0,-1,0,0.7354063391685486,0.5388576984405518,0.9057978987693788,0.0,accept,majority_agreement
712049731,1679,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
713929581,1679,"yes, but now i think it's not that important to precisely count only visible cutlines here, since it's used only as an estimation for cache preallocation size and assertion at the end. removing it",0,0,0,0.979074001312256,0.9716508984565736,0.9852677583694458,0.0,accept,unanimous_agreement
713929828,1679,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
714081482,1679,updated both commit message and function comment,0,0,0,0.9873396158218384,0.9906033873558044,0.990395724773407,0.0,accept,unanimous_agreement
717483514,1679,should you change `samplecount(floor(gettrimleft() * getrate()))` to `timetosamples(gettrimleft() * getrate())` for correct rounding?,0,0,0,0.988443911075592,0.9938264489173888,0.994263470172882,0.0,accept,unanimous_agreement
717497362,1679,what does it mean if `mappendbufferlen` and `mtrimright` are not both zero? it could be the case of append-recording onto a clip that was shrunk at the right end. will the hidden part at the right be lost when the recording is complete?,0,0,0,0.9860019683837892,0.992544174194336,0.9927898049354552,0.0,accept,unanimous_agreement
717498146,1679,"this is not taking the append buffer into account, as with `getplayendtime()` but neither did removed `getendsample()`",0,0,0,0.9872224926948548,0.9931960105895996,0.9947410821914672,0.0,accept,unanimous_agreement
717510254,1679,"also not accounting for buffer length, inconsistently with `getsequenceendtime()` but that was also so in removed `getendsample`",0,0,0,0.978661835193634,0.9929267764091492,0.9931206107139589,0.0,accept,unanimous_agreement
717517530,1679,this copies the comment and the logic of `waveclip::withinclip()` but it looks strange. the fix for 2288 changed `<=` to `<`. but should it have changed `>` to `>=` instead?,0,0,0,0.7144286036491394,0.9615008234977722,0.8204510807991028,0.0,accept,unanimous_agreement
717520251,1679,and this copies `beforeclip()` and the comment said there must be consistency. but this looks like a very old off by one error.,0,0,0,0.9319063425064088,0.9640965461730956,0.992715060710907,0.0,accept,unanimous_agreement
717522113,1679,"and the fix for 2288 changed '>=' to '>' but here you do correct the coresponding function. maybe you reintroduce the bug 2288, which had its questionable fix.",0,0,0,0.9804116487503052,0.9652885794639589,0.9865824580192566,0.0,accept,unanimous_agreement
718976522,1679,"""constrained""",0,0,0,0.9792734384536744,0.9897634983062744,0.8779621720314026,0.0,accept,unanimous_agreement
718983023,1679,thank you for fixing my embarrassing slicing mistakes!,-1,1,-1,0.6144936680793762,0.880420446395874,0.9326496124267578,-1.0,accept,majority_agreement
718988546,1679,thanks for that,1,1,1,0.6682795286178589,0.6089425086975098,0.8706192374229431,1.0,accept,unanimous_agreement
719056462,1679,remove unused function in comment,0,0,0,0.9776418805122375,0.9896731376647948,0.9943974018096924,0.0,accept,unanimous_agreement
719057123,1679,comment that these set the trimming to a given absolute time (if that is in bounds),0,0,0,0.9858119487762452,0.9913656711578368,0.9937738180160522,0.0,accept,unanimous_agreement
719057343,1679,comment that these four get and set the non-negative length of hidden material at each end,0,0,0,0.9846088886260986,0.9904050827026368,0.9933106899261476,0.0,accept,unanimous_agreement
719057769,1679,comment that offset is relative to playable start,0,0,0,0.9880936741828918,0.9867108464241028,0.9930731654167176,0.0,accept,unanimous_agreement
719276659,1679,"move this function, perhaps, so it is just after waveclip::clear, so the diff of the two versions is a bit smaller, more corresponding unchanged lines.",0,0,0,0.9565767645835876,0.99143785238266,0.9829463958740234,0.0,accept,unanimous_agreement
719330841,1679,"there were three cases above: pasting exactly at the play start time; exactly at play end; or other. i think that in the first of these cases, the two lines above are incorrect. because clearsequence() has removed some intial segment of samples, you need to paste at sample 0. and i think you need to reassign msequenceoffset correctly in this case. am i mistaken?",0,0,0,0.9664776921272278,0.8620885610580444,0.9873232245445251,0.0,accept,unanimous_agreement
720180220,1679,a comment should clarify the offset is relative to play start,0,0,0,0.985937774181366,0.9880539774894714,0.9935775399208068,0.0,accept,unanimous_agreement
720210256,1679,comment should carify that cut lines are not counted,0,0,0,0.9805394411087036,0.9807855486869812,0.9909945130348206,0.0,accept,unanimous_agreement
720545421,1679,"yes, it should, thanks!",1,1,1,0.9371758699417114,0.985913872718811,0.9751213192939758,1.0,accept,unanimous_agreement
721247902,1679,"i don't understand the four lines above. this function isn't doing what the name suggests -- just inserting silence -- but it may also discard the trimmed samples. maybe there is a reason for that, can you explain? should there be a different function for that purpose? but is it also a bug in that case, that the trim-left and trim-right values in the clip are not reset to 0?",0,0,0,0.8777121901512146,0.6654050946235657,0.8097444772720337,0.0,accept,unanimous_agreement
721250971,1679,"i think most paths to waveclip::insertsilence involve newly created empty tracks, so it doesn't matter, but an exception is that wavetrack::join calls waveclip::appendsilence which calls this. did you insert those lines only to handle this special case?",0,0,0,0.9855834245681764,0.990422248840332,0.9892332553863524,0.0,accept,unanimous_agreement
721264560,1679,"i think trimleft was intended, not settrimleft: else, clearing the middle of a clip, which already had some left trimming, will give wrong results for the right hand new clip. am i correct?",0,0,0,0.9568046927452089,0.9559298753738404,0.9876863956451416,0.0,accept,unanimous_agreement
721273839,1679,"i was wondering about these unexplained deleted lines... but i think we can prove that they never happened because of the lines in wavetrack::handleclear(): [code block] so, okay",0,0,0,0.9597243666648864,0.703029215335846,0.9471663236618042,0.0,accept,unanimous_agreement
721308689,1679,should this be getplaystartsample()?,0,0,0,0.9873895645141602,0.9932870268821716,0.994998812675476,0.0,accept,unanimous_agreement
722095867,1679,"there is also another comment saying: ` one and only one of the following is true for a given t (unless the clip has zero length -- then beforeclip() and afterclip() can both be true). within() is true if the time is substantially within the clip`. i think this is more about the definition of 'within'. changing the implementation will require a more careful review of the usage of each function. and i think that changing '<=' to '<' was anyway correct, because 'getplayendsample()' is the index of the sample following the last one, so 'within' includes the last sample, but does not include the first sample.",0,0,0,0.9611221551895142,0.9866112470626832,0.9880069494247437,0.0,accept,unanimous_agreement
722101163,1679,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
722164908,1679,"if i understand you correctly, then i think that the answer to the first question is: `samplecount s0 = timetosequencesamples(t0);` `s0` should be 0 for given `t0` after `clearsequence(getsequencestarttime(), t0);` but i doubt that pasting in front of the clip is possible at all, taking into account implementation of the `withinplayregion`",0,0,0,0.979752004146576,0.9926530122756958,0.9915236234664916,0.0,accept,unanimous_agreement
722196916,1679,"the reason was that i considered `insersilence(t0, length, envelope)` to be equivalent to `paste(t0, silenceclip)`. and `paste` discards the hidden part of the destination clip in case if the clip is prepended or appended. and i thought that this was the safest approach in these cases, but maybe you are right and hidden data should not be discarded (`paste` should not discard too) and `wavetrack::join` should handle this case instead.",0,0,0,0.95675390958786,0.9914899468421936,0.9908878803253174,0.0,accept,unanimous_agreement
722209467,1679,"yes, thanks!",1,1,1,0.9110047221183776,0.9793177843093872,0.9540684819221495,1.0,accept,unanimous_agreement
722214341,1679,"hm, yes, and this makes possible the case with prepending data in `paste`. thanks!",1,1,1,0.9727818369865416,0.9881502389907836,0.9794910550117492,1.0,accept,unanimous_agreement
1437585004,5818,"i would make a type distinction between points and vectors. then type checking will not allow meaningless operations. two vectors can be added or subtracted to make a vector. a vector can be scaled by a number. addition of a point to a point or scaling of a point does not make sense. subtracting a point from a point does make sense, but the result is not a point, but a vector.",0,0,0,0.94148451089859,0.9470698833465576,0.9774203896522522,0.0,accept,unanimous_agreement
1437585747,5818,why are the two operations above useful? they are not usual operations you want with vectors.,0,0,0,0.9845920205116272,0.9133573174476624,0.9850656390190125,0.0,accept,unanimous_agreement
1437585932,5818,comment [code block],0,0,0,0.9876821637153624,0.9861414432525636,0.994520664215088,0.0,accept,unanimous_agreement
1437586828,5818,"so essentially, the points are meaningless; vectors can be used all over the place :-)",0,1,0,0.4149405062198639,0.653819739818573,0.8429544568061829,0.0,accept,majority_agreement
1437586844,5818,"again, two questionable, non-member operations",0,0,0,0.6281840205192566,0.8865938782691956,0.5121891498565674,0.0,accept,unanimous_agreement
1437587379,5818,welcome to the world of graphics :-) probably this operation is not used though,1,1,1,0.976353883743286,0.9959912896156312,0.9917436242103576,1.0,accept,unanimous_agreement
1437587603,5818,this depends on scaletype,0,0,0,0.9827778935432434,0.9669743776321412,0.9893360137939452,0.0,accept,unanimous_agreement
1437587715,5818,that's wrong. distance between points is norm of the difference.,-1,-1,0,0.9121088981628418,0.8365539312362671,0.8613603711128235,-1.0,accept,majority_agreement
1437588094,5818,norm is a function of a vector.,0,0,0,0.9723225831985474,0.9773361086845398,0.981573522090912,0.0,accept,unanimous_agreement
1437588204,5818,this one is an unfortunate mistake,-1,-1,-1,0.978300154209137,0.9894409775733948,0.9944032430648804,-1.0,accept,unanimous_agreement
1437589149,5818,"i would put point, rect, and size in lib-screen-geometry which can be just about the geometry with no mention of color. that's a leaf library not even using lib-utility. yes, lib-screen-geometry still has extraneous constants about the particular audacity 3 layout, as we discussed before. let me figure out how to clean that up.",0,0,0,0.9722266793251038,0.8980371356010437,0.9859819412231444,0.0,accept,unanimous_agreement
1437590575,5818,`lowest` or `min`?,0,0,0,0.9819080233573914,0.9934733510017396,0.988373875617981,0.0,accept,unanimous_agreement
1437592092,5818,"so the convention is that x coordinates increase rightwards, y coordinates downwards. it's the usual graphics convention, but worth explicit comment near the top of the class definition.",0,0,0,0.9845727682113647,0.9929147958755492,0.9947633743286132,0.0,accept,unanimous_agreement
1437592435,5818,"the ""problem"" with this specific pr is that it is two years old and predates many of the libraries. i haven't re-reviewed much myself, but most, if not all, of the lib-graphics are likely not strictly needed for the purposes of the pull request. i am not sure that we want it for 3.5 or for audacity 3 at all; this was never discussed . please note that the pr is not even on the board.",0,0,0,0.7705062627792358,0.6484326124191284,0.7830193042755127,0.0,accept,unanimous_agreement
1437592674,5818,are the bottom and right coordinates included or excluded?,0,0,0,0.98478764295578,0.9936681389808656,0.994355320930481,0.0,accept,unanimous_agreement
1437592875,5818,"a box could be valid but empty, if bottom and right are excluded.",0,0,0,0.9867796897888184,0.9909371733665466,0.9902858138084412,0.0,accept,unanimous_agreement
1437593156,5818,"inclusive, or exclusive of p2?",0,0,0,0.9787984490394592,0.9929230213165284,0.9929285645484924,0.0,accept,unanimous_agreement
1437593496,5818,bottomright describes a point excluded from the given rectangle.,0,0,0,0.9849191904067992,0.9803589582443236,0.9901747703552246,0.0,accept,unanimous_agreement
1437597170,5818,"there are only numbers in this class, so i think you don't need moves",0,0,0,0.9780380725860596,0.9580601453781128,0.9888012409210204,0.0,accept,unanimous_agreement
1437597532,5818,meant to include the point always?,0,0,0,0.9851497411727904,0.9914372563362122,0.9931064248085022,0.0,accept,unanimous_agreement
1437597726,5818,"i might name it with a noun, `expansion`",0,0,0,0.9858373403549194,0.991929531097412,0.9905923008918762,0.0,accept,unanimous_agreement
1437598272,5818,there is an assumption that the rectangle is valid -- not negative area,0,0,0,0.9710099101066588,0.9814394116401672,0.9934820532798768,0.0,accept,unanimous_agreement
1437599089,5818,i have a strong opinion that function and methods must be verbs. i will push hard towards it.,-1,0,0,0.8715418577194214,0.511798083782196,0.8182086944580078,0.0,accept,majority_agreement
1437600073,5818,i think `>=` and `<=` are correct. `p12` and `p22` are excluded points of the rectangles.,0,0,0,0.9875699877738952,0.9927549958229064,0.98456209897995,0.0,accept,unanimous_agreement
1437601001,5818,"this calculation is correct, but making the change above may return a different rectangle when the resulting area is zero.",0,0,0,0.9834976196289062,0.9865750670433044,0.9926316738128662,0.0,accept,unanimous_agreement
1437602213,5818,"also if you use {} for zero-area rectangles, canonicalizing origin to zero -- then should this do nothing for such rectangles? or is that the caller's problem to check?",0,0,0,0.9831475615501404,0.9933667778968812,0.9941678047180176,0.0,accept,unanimous_agreement
1437602342,5818,or `expansion`,0,0,0,0.9846903085708618,0.9850585460662842,0.9943451881408693,0.0,accept,unanimous_agreement
1437602774,5818,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1437603291,5818,"ah, here it is: bottom and right are indeed meant to be included. that is not like top + height or bottom + width of a rectangle.",0,0,0,0.9480811953544616,0.9772017002105712,0.9871926307678224,0.0,accept,unanimous_agreement
1437604848,5818,wrongly returns false when the true bottom or right edge of the rectangle coincides with the included boundary. fix with `- 1` twice,0,0,0,0.948308289051056,0.8799868226051331,0.9352598190307616,0.0,accept,unanimous_agreement
1437608200,5818,"it is possible that a box contains both r1 and r2, but does not contain `intersect(r1, r2)` if they are disjoint, because you canonicalize the empty rectangle to all zeroes. that seems weird, not corresponding to set-theoretic identities. maybe the function should always return true for empty rectangles, regardless where the top left corner is.",-1,-1,-1,0.7509984970092773,0.9309007525444032,0.9594280123710632,-1.0,accept,unanimous_agreement
1437609924,5818,i think `value >= datatype{}` would optimize away anyway for unsigned types,0,0,0,0.9863027930259703,0.987984538078308,0.9881425499916076,0.0,accept,unanimous_agreement
1437610821,5818,i would call it `axisalignedboundingbox`,0,0,0,0.9880942702293396,0.9922744631767272,0.9933075904846193,0.0,accept,unanimous_agreement
1568640166,5818,[code block] is that expected?,0,0,0,0.988584280014038,0.9922165870666504,0.9956104159355164,0.0,accept,unanimous_agreement
1568693520,5818,i don’t like adding to memoryx.h. these might be in a new small header in lib math,-1,-1,-1,0.9697899222373962,0.9561494588851928,0.9373731017112732,-1.0,accept,unanimous_agreement
1568700578,5818,"i just merged a pr commit-experimental-branches and proposed another, maintain-experimental-branches. i want to eliminate experimental.cmake. see the second pr. if you are not certain to commit to using the experiment, instead define a bool constant in namespace experimental. use if constexpr not ifdef to control new code. that makes the compiler still check that it can build, when it does not build.",0,0,0,0.9846854209899902,0.9878453612327576,0.9837876558303832,0.0,accept,unanimous_agreement
1568812983,5818,shouldn't it be `it->key.firstsample + cacheelementwidth < left`?,0,0,0,0.9877497553825378,0.9935626983642578,0.9940892457962036,0.0,accept,unanimous_agreement
1568849143,5818,is that range typically short? will binary search benifit here?,0,0,0,0.9883341789245604,0.988658845424652,0.9920507073402404,0.0,accept,unanimous_agreement
1568880785,5818,isn't it always the only option here?,0,0,0,0.9546767473220824,0.9915162324905396,0.9808336496353148,0.0,accept,unanimous_agreement
1569067022,5818,"if this pr passes qa, i think the proper solution would be to remove the old code altogether.",0,0,0,0.9864376783370972,0.9858048558235168,0.9880715608596802,0.0,accept,unanimous_agreement
1569079865,5818,an excellent point! let me just kill this method lol,1,1,1,0.9933377504348756,0.9922463297843932,0.9946823716163636,1.0,accept,unanimous_agreement
1569105282,5818,sure,0,0,0,0.9371067881584167,0.9137381911277772,0.9422702193260192,0.0,accept,unanimous_agreement
1569141830,5818,"i have never seen this function as a hot spot. generally, with the current implementation, the cache can hold up to `width * 4 / 256`, which limits the cache size to under 64 items on the 4k display. i think the difference between linear and logarithmic time is negligible in this case.",0,0,0,0.8714215755462646,0.97049081325531,0.9684000015258788,0.0,accept,unanimous_agreement
709077541,1623,"this change of cmakelists.txt should be in the previous commit ""use lib-ffmpeg-support""",0,0,0,0.9893041849136353,0.9948368072509766,0.9955403208732604,0.0,accept,unanimous_agreement
709078421,1623,"should that be `libavformat*.so.*` ? previous code had two *. but maybe not, i see the old getlibavformatname did not have a version number there.",0,0,0,0.9852623343467712,0.98984032869339,0.9891274571418762,0.0,accept,unanimous_agreement
709083170,1623,these string literals for file globs are repeated in this file. better to remove repetition.,0,0,0,0.9781070351600648,0.9627516269683838,0.9868687987327576,0.0,accept,unanimous_agreement
712828024,1623,"i strongly disagree with this change. ffmpeg behavior may differ if `den=0`. for example, it means that the decoder is responsible for setting up time bases based on stream content. but i agree that it is probably better to initialize the fields explicitly, regardless that this is a dto for the c structure,",0,0,-1,0.6160950064659119,0.9470952153205872,0.8153067231178284,0.0,accept,majority_agreement
712830453,1623,"i think i would just explicitly delete the move constructor/assignment here, as well as in most of the other places",0,0,0,0.9880205988883972,0.9897631406784058,0.9876882433891296,0.0,accept,unanimous_agreement
712831354,1623,"it generally makes no sense as this is an abstract class and is leftover from the moment, when i was ""generating"" wrappers",0,0,0,0.8924473524093628,0.9729629158973694,0.916015326976776,0.0,accept,unanimous_agreement
712836389,1623,"this was causing me issues on windows, but looks like that was a different bug! thank you for noticing!",1,1,1,0.9819034337997437,0.9890121221542358,0.9926134347915648,1.0,accept,unanimous_agreement
712837544,1623,"good catch, thank you!",1,1,1,0.9892038702964784,0.994400441646576,0.9949259757995604,1.0,accept,unanimous_agreement
712923170,1623,well defined values should be there i think if this struct is ever default constructed. you decide which values.,0,0,0,0.9835253953933716,0.9859035611152648,0.990196168422699,0.0,accept,unanimous_agreement
712993001,1623,"okay, it looked to me as if some resource reclamation done in the previous code was lost in this rewrite. but it should be asked, does the documentation you cite apply to all versions of ffmpeg that we will support, or only to the latest? if only the latest, then there may be some work to do to get it right for both. maybe then one .inl file won't be enough to compile the correct overrides for avcodeccontextwrapperimpl",0,0,0,0.965142011642456,0.9673897624015808,0.9821027517318726,0.0,accept,unanimous_agreement
712997586,1623,i took the best of both worlds in the end :-) if `avcodec_free_context` is unavailable - i close the codec. the corresponding code will be pushed soon,1,1,1,0.9562551975250244,0.9947966933250428,0.9939302206039428,1.0,accept,unanimous_agreement
713737842,1623,i will move it down to the case where av_free is used. there is no need for this call when av_packet_free is used for sure,0,0,0,0.9867554903030396,0.9937434792518616,0.994419276714325,0.0,accept,unanimous_agreement
713743668,1623,ooopsie indeed :( thank you!,-1,-1,-1,0.8382782936096191,0.9888337254524232,0.9956372380256652,-1.0,accept,unanimous_agreement
713744705,1623,"not really related to this pr, but let's pick it anyway",0,0,0,0.980249285697937,0.9639981985092164,0.939585506916046,0.0,accept,unanimous_agreement
713747171,1623,"well, it would be destroyed last anyway, as the member is first. but const - that is what i like a lot :)",1,1,1,0.9841827750205994,0.994830310344696,0.9902268648147584,1.0,accept,unanimous_agreement
713747795,1623,"not in scope of pr, but good.",1,0,1,0.7490264773368835,0.6060392260551453,0.7790811061859131,1.0,accept,majority_agreement
713767124,1623,"now that i've started thinking of it - both variants are incorrect. right-shift is ub in c++ :( yours is more correct, though. i will rewrite it using a similar approach to our regular sample format conversions, without dithering (this can be fixed later!)",-1,-1,-1,0.7296146154403687,0.9895143508911132,0.9956511855125428,-1.0,accept,unanimous_agreement
713767675,1623,"i think it should be (value - 0x80) as well, i'll fix it that way",0,0,0,0.9773009419441224,0.9866946935653688,0.9909756779670716,0.0,accept,unanimous_agreement
713793971,1623,"this looks like a more correct implementation. however, ffmpeg itself doesn't bother about flushing at all. we did it only once (and i was trying to keep as much of the original behavior as possible). i think codecs with av_codec_cap_delay are not common at all and the best implementation should check for it. very quick search and i found only ape decoder to set this flag, but i think we do not support ape.",0,0,0,0.7874835729598999,0.7303552627563477,0.9519284963607788,0.0,accept,unanimous_agreement
713794680,1623,"yes, but new api is not available in 2.2.2 and if we end up with ffmpeg version without avcodec_decode_audio4 - it can be implemented using new api",0,0,0,0.9876927733421326,0.9910640716552734,0.9947913885116576,0.0,accept,unanimous_agreement
713795549,1623,"a fix to offsetpacket was required after this change. i'm not sure if this code is really safe, though",0,0,0,0.9517853856086732,0.7974609136581421,0.9365214705467224,0.0,accept,unanimous_agreement
714253785,1623,"[a link] strictly speaking, right shift of signed and negative values has “implementation defined” behavior, which is not the much worse category of ub.",0,0,0,0.9362390041351318,0.9138193726539612,0.9672594666481018,0.0,accept,unanimous_agreement
714254435,1623,it was late night when i wrote these code changes. something needed doing here but i didn’t get it all right.,-1,0,-1,0.7693486213684082,0.7112600207328796,0.5210726857185364,-1.0,accept,majority_agreement
714255232,1623,"but note the important thing that the handle should have been constructed only after the possible reloading of libraries, right?",0,0,0,0.9846612811088562,0.9866728782653807,0.9918999671936036,0.0,accept,unanimous_agreement
714256194,1623,"yeah, same for me when i was writing the original code :-) thank you a lot for pointing it out, this was a really stupid error, not exposed in my testing",1,1,1,0.9926597476005554,0.9848039150238036,0.9903602600097656,1.0,accept,unanimous_agreement
714415337,1623,"setting of codec_id, codec_type, and codec_tag did not survive the rewrite. did you decide they were unimportant steps or is this an omission?",0,0,0,0.9611459374427797,0.9845401644706726,0.9905213117599488,0.0,accept,unanimous_agreement
714418177,1623,"here too, setting of codec_tag was commented out. omission or is it unnecessary?",0,0,0,0.9822689294815063,0.9906484484672546,0.9939739108085632,0.0,accept,unanimous_agreement
714420140,1623,again assignment to codec_id is lost. instead we construct codec. sure of this? does codec get reassigned before it is ever used?,0,0,0,0.9495458602905272,0.9546226263046264,0.9911032915115356,0.0,accept,unanimous_agreement
714425561,1623,should the local codecid be reassigned here instead?,0,0,0,0.9862679243087769,0.995107889175415,0.9935290217399596,0.0,accept,unanimous_agreement
714425921,1623,"since codec_id in the structure was not reassigned, should this be the local codecid instead?",0,0,0,0.9884651899337769,0.9954727292060852,0.9926233291625975,0.0,accept,unanimous_agreement
714426262,1623,(or translate the audacity_ value to library value?),0,0,0,0.9834433794021606,0.994691789150238,0.9950591325759888,0.0,accept,unanimous_agreement
714427779,1623,av_error_max_string_size was 64 actually. shrug.,-1,0,0,0.8934949636459351,0.6770062446594238,0.8648192882537842,0.0,accept,majority_agreement
714428167,1623,maybe use local codecid here too,0,0,0,0.9862574934959412,0.9939411878585817,0.990888237953186,0.0,accept,unanimous_agreement
714430795,1623,"why is the error code negated? averror was a no-op macro, it didn't negate. i wondered if this return value is passed to ffmpeg because this is a callback function? but further examination tells me no.",0,0,0,0.9265745878219604,0.9368098974227904,0.9785845875740052,0.0,accept,unanimous_agreement
714438578,1623,"you deleted all the resets. the lifetime of side structures therefore continues until the end of the lifetime of the exportffmpeg object. did you check that this lifetime isn't longer than when this function is called? are you sure the exportffmpeg object isn't reused and might expect a clean state when it is? i tried to determine that from the code, and it's not trivial to prove it. so maybe leave the harmless release() lines.",0,0,0,0.9809516668319702,0.8970974087715149,0.9916369318962096,0.0,accept,unanimous_agreement
714643103,1623,"hmm, codec_tag might be important, as it may choose a different codec. i will bring it back. the other two are set by avcodec_open2. i will double check",0,0,0,0.9821058511734008,0.9840643405914308,0.963070511817932,0.0,accept,unanimous_agreement
714646233,1623,i don't really see why logger should live shorted than ffmpeg. if it does - we will be losing potentially useful information from the log.,0,0,0,0.8386499881744385,0.6641085147857666,0.8624100089073181,0.0,accept,unanimous_agreement
714650097,1623,"this is a bug in the python generator (well, not a bug, it is ignorant about some libc constants). i will fix it in ffmpegtypes.h",0,0,0,0.9078428745269777,0.683476984500885,0.9534249305725098,0.0,accept,unanimous_agreement
714664926,1623,double checked - we retrieve the default tag for the codec and output format. if the tag is not set - ffmpeg will call av_codec_get_tag internally for encoders where it is relevant,0,0,0,0.9872987866401672,0.9922937154769896,0.9949045181274414,0.0,accept,unanimous_agreement
714668046,1623,this one i will return though!,1,0,0,0.6945680379867554,0.6455625891685486,0.950208306312561,0.0,accept,majority_agreement
714688622,1623,and it helped to find and fix a different bug!,0,1,1,0.4887368083000183,0.8675220608711243,0.9456597566604614,1.0,accept,majority_agreement
714688846,1623,codec_id should not be assigned,0,0,0,0.9749266505241394,0.97046160697937,0.9927049279212952,0.0,accept,unanimous_agreement
714689595,1623,we can for sure,0,0,0,0.9697405695915222,0.957133412361145,0.9766319394111632,0.0,accept,unanimous_agreement
715213224,1623,sorry but... you should remove my comment now! you fixed the use of tags.,-1,-1,-1,0.989316463470459,0.9934242963790894,0.994640588760376,-1.0,accept,unanimous_agreement
715215203,1623,these two new lines have no side effect and just repeat the getchannels call. did you intend something else?,0,0,0,0.9855169653892516,0.9843741059303284,0.9942876696586608,0.0,accept,unanimous_agreement
715215893,1623,i see you are correcting possibly wrong assumptions about endian-ness in the old code.,0,0,0,0.9641973972320556,0.9452584385871888,0.984548807144165,0.0,accept,unanimous_agreement
715223485,1623,"i notice this function, too, is ""deprecated"" [a link]",0,0,0,0.9801782965660096,0.9346094727516174,0.9865127801895142,0.0,accept,unanimous_agreement
715226238,1623,suggest one more comment documenting the assuptions made elsewhere: [code block],0,0,0,0.984348475933075,0.9863476753234864,0.9953286647796632,0.0,accept,unanimous_agreement
715231489,1623,one more doubt! is this one more place where you should use the local variable `codecid` and not the id stored in the context object?,-1,-1,-1,0.5408971309661865,0.6369968056678772,0.8217703700065613,-1.0,accept,unanimous_agreement
715442474,1623,"missed it, sorry!",-1,-1,-1,0.9879035353660583,0.9934938549995422,0.9961034059524536,-1.0,accept,unanimous_agreement
715443040,1623,"debugging leftovers, fixed. conditional breakpoints are too slow for practical use :(",-1,-1,-1,0.9838802218437196,0.9906123280525208,0.9953782558441162,-1.0,accept,unanimous_agreement
715444608,1623,"the original code was copying random memory most of the time (as the tag was an empty string by default, so 0 and 3 random bytes were copied). so endian-ness wasn't the worst problem anyway :)",0,1,1,0.7270731925964355,0.9740830063819884,0.9331901669502258,1.0,accept,majority_agreement
715445991,1623,"yes, but send/receive family is not supported in 2.2.2. when encode_audio/decode_audio will be removed - we will have to add 2 implementations.",0,0,0,0.989376425743103,0.9840099215507508,0.9944866299629213,0.0,accept,unanimous_agreement
646424848,952,interactive rebase might eliminate this commit as a fixup on a previous one,0,0,0,0.9877609014511108,0.9779489040374756,0.9918033480644226,0.0,accept,unanimous_agreement
646425373,952,"raw string literals are good. a concatenation of raw string literals, with comments explaining this big regex, would be even more helpful to a reader.",1,1,1,0.9380536675453186,0.7085826992988586,0.9812545776367188,1.0,accept,unanimous_agreement
646428043,952,i make no comments on this commit,0,0,0,0.6226687431335449,0.9148396253585817,0.988081693649292,0.0,accept,unanimous_agreement
646432897,952,"suggest consistency of wording with the option before it: ""build support for sending errors to sentry""",0,0,0,0.9847788214683532,0.992020547389984,0.9945841431617736,0.0,accept,unanimous_agreement
646446647,952,"i'm not requiring a fix for this now: this lonely header file will have to move to a library at some point, to enable the refactoring, so that everything dealing with the sqlite db can be separated from audacity. lib-sentry-reporting would be the obvious place for it, and then `${_opt}has_sentry_reporting` would need testing in lib-sentry-reporting/cmakelists.txt, and the library would build differently so that add_exception_context would be a no-op. (it might even be a proper, inline function instead of a macro.)",0,0,0,0.5889652371406555,0.975736677646637,0.9671259522438048,0.0,accept,unanimous_agreement
646453468,952,"i'm trying to build the new code, without success yet i tried `cmake -gxcode -daudacity_has_sentry_reporting=yes -daudacity_has_networking=yes -dsentry_dsn_key=yes -dsentry_host=yes _dsentry_project=yes ..`",0,0,0,0.9142420887947084,0.9856566190719604,0.9696273803710938,0.0,accept,unanimous_agreement
646456045,952,"the comment above are organized by doxygen into one detailed comment on the class, with no brief comment i usually write ` //! a brief description ` ` /*! and longer comments */ `",0,0,0,0.977875828742981,0.9752820730209352,0.990526795387268,0.0,accept,unanimous_agreement
646457833,952,"perhaps better to call it moveparameters, the object isn't consuming something",0,0,0,0.9785566926002502,0.9829332828521729,0.9808146953582764,0.0,accept,unanimous_agreement
646465974,952,should the constructor be private? is it enough to have one global or could there be a need for thread_local ?,0,0,0,0.9882076382637024,0.995101273059845,0.994300365447998,0.0,accept,unanimous_agreement
646469209,952,"do you mean ""runtime_error"" i don't see the *'s in the code",0,0,0,0.9753894805908204,0.986924648284912,0.9921364784240724,0.0,accept,unanimous_agreement
646471293,952,"spelling (twice) you are explaining why this destructor must be non-inline, and i think it's not just gcc that would require this",0,0,0,0.9812992215156556,0.9429994225502014,0.9821764230728148,0.0,accept,unanimous_agreement
646475341,952,is this used anywhere?,0,0,0,0.9868593215942384,0.989799976348877,0.9940593242645264,0.0,accept,unanimous_agreement
646476025,952,can you explain the parameters? i think they are an http code and a response,0,0,0,0.9871195554733276,0.9906454086303712,0.9941776990890504,0.0,accept,unanimous_agreement
646478590,952,should you pass close and log to showerrorreportdialog?,0,0,0,0.988801121711731,0.9948723912239076,0.9928075075149536,0.0,accept,unanimous_agreement
646481023,952,where a completionhandler is given,0,0,0,0.9816001057624816,0.9907450675964355,0.9947181344032288,0.0,accept,unanimous_agreement
646481237,952,the only place i think,0,0,0,0.9219789505004884,0.908925712108612,0.954529881477356,0.0,accept,unanimous_agreement
646482478,952,"you added a function to this file, but i had deleted this file in a branch i rewrite my branch so i don't delete the file, but i restrict inclusion of it to just one place. this needs to be hidden behind the basicui facade at some point, so lib-exceptions and others can avoid dependency on wxcore.",0,0,0,0.9861410856246948,0.979068636894226,0.9933086633682252,0.0,accept,unanimous_agreement
646483041,952,see other remark about doxygen,0,0,0,0.9824553728103638,0.9856196641921996,0.9913102388381958,0.0,accept,unanimous_agreement
646486632,952,"this will cause the exception dialog whenever there is any audacityexception. i think we may not want it for every exception, and might need to construct exception objects with an option not to use this dialog. for instance exceptions in onpaste in editmenus.cpp. you can get them if you select two wave tracks, copy, then select a wave and a label track, and try to paste. nothing goes wrong with external devices. rather the exception provides a way to write the complicated paste operation and allow backing out of some deeply nested place when the operation can't complete just for logical reasons that are discovered late. it relies on a catch handler in audacityapp::onexceptioninmainloop and the undo manager to restore document state.",0,0,0,0.9622024297714232,0.950165033340454,0.9679481983184814,0.0,accept,unanimous_agreement
646487520,952,other examples of simplemessageboxexception in wavetrack.cpp.,0,0,0,0.9879307746887208,0.9922105073928832,0.9921200275421144,0.0,accept,unanimous_agreement
646488224,952,this might fire every time somebody simply has a loose cable connection... would the collected data be valuable?,0,0,0,0.7896881103515625,0.9251052141189576,0.954617440700531,0.0,accept,unanimous_agreement
646489151,952,so i see many straightforward substitutions of one function for another. a question is whether this is substitution is complete enough.,0,0,0,0.9740530252456664,0.9769870042800904,0.9884254932403564,0.0,accept,unanimous_agreement
646489910,952,"this whole commit is also straightforward, but not obviously complete from reading diffs alone.",0,0,0,0.9791643619537354,0.9689055681228638,0.9912223815917968,0.0,accept,unanimous_agreement
646496841,952,"i suggest: anonymizedstring is a new class that wraps a const std::string. it calls the function in its constructor. it has operator const std::string& . it has a method called `move()` that returns std::string&& . so objects of that type guarantee anonymization at construction, and are immutable except to move out of them again. then message::create and all these other functions are changed to take anonymizedstring as argument. why would i do this? two reasons. one, i genrally don't like ""naked"" wxstring or other string classes overused in function signatures. i would rather always have strings in different wrapper classes when they serve different purposes, and the non-interconversion of those wrapper types eliminates programming errors. second reason, it makes it more obvious to anyone reviewing classes message and exception, just from the header files, that they deal in anonymized data: it's not implementation detail inside those functions, that anonymization happens. rather the reviewer is directed to the anonymizedstring class and can see it must happen before you enter these functions.",0,0,0,0.9345464110374452,0.5820417404174805,0.9648614525794984,0.0,accept,unanimous_agreement
646497440,952,did you omit part this comment?,0,0,0,0.9722533822059632,0.9917793869972228,0.9918143153190612,0.0,accept,unanimous_agreement
646498449,952,spelling,0,0,0,0.9774957895278932,0.928835928440094,0.9833834767341614,0.0,accept,unanimous_agreement
646649323,952,"in the next commit, i will add `audacity_header_only_library` . it does not set any graph nodes yet.",0,0,0,0.9833163619041444,0.9937346577644348,0.9956082701683044,0.0,accept,unanimous_agreement
646653046,952,"it is internationally not thread_local, with the synchronized state.",0,0,0,0.9783883690834044,0.9902492165565492,0.989832878112793,0.0,accept,unanimous_agreement
646653884,952,i really thought that doxygen supports markdown.,0,0,0,0.9612342715263368,0.8515470027923584,0.9447962641716005,0.0,accept,unanimous_agreement
646669461,952,"for clang and cl it is sufficient to write `report::~report() = default;` however, i can't find which behavior is correct in c++ standard. i will remove the comment",0,0,0,0.980885088443756,0.99016934633255,0.9938446283340454,0.0,accept,unanimous_agreement
646683568,952,"i will remove `handled`, adddata still seems useful to me",0,0,0,0.9673593044281006,0.8107355237007141,0.9588809609413148,0.0,accept,unanimous_agreement
646684647,952,"`close` defines the behavior of the help button. for sentry dialog - there is no default option, so close is always assumed to be `false`",0,0,0,0.9875139594078064,0.9931136965751648,0.9914608001708984,0.0,accept,unanimous_agreement
646687312,952,there is only one way to find out :-),1,1,0,0.8604939579963684,0.9528375864028932,0.9704537391662598,1.0,accept,majority_agreement
646688338,952,i've grepped showerrordialog and replaced all the places i felt made sense.,0,0,0,0.9722269177436828,0.7733058929443359,0.9887233972549438,0.0,accept,unanimous_agreement
646689590,952,"and i no longer remember, what i've planned to write anyway. i will clean it up",-1,0,0,0.6209100484848022,0.9311315417289734,0.9175721406936646,0.0,accept,majority_agreement
646691147,952,"of course i see the synchronization, so it's not thread_local, but i'm wondering whether it might need to be. maybe (very very improbably) there are exceptions on two threads at once and you don't want to combine their data into one report.",0,0,0,0.9175655245780944,0.732371985912323,0.9030686020851136,0.0,accept,unanimous_agreement
646692014,952,"you are right, it appears as italics in the html pages.",0,0,0,0.9790777564048768,0.9762005805969238,0.9898698925971984,0.0,accept,unanimous_agreement
646693284,952,"well, they are just strings here. but i like your second point",1,1,0,0.9405003786087036,0.8849681615829468,0.7982244491577148,1.0,accept,majority_agreement
646698120,952,and the log argument is meant to show the user more details. also not relevant?,0,0,0,0.9866776466369628,0.955333650112152,0.9947275519371032,0.0,accept,unanimous_agreement
646700941,952,we always show the details always with the report. but i guess if `log` is not empty - it makes sense to include it with the report itself. i will add it,0,0,0,0.9810947179794312,0.9818655848503112,0.9901402592658995,0.0,accept,unanimous_agreement
646748818,952,"a string is not just a string if you wrap it in a well designed class, with a constructor that establishes an important invariant property (like some kind of well-formedness), and methods that preserve this invariant (such as by making the contents immutable or only available to move out). a function taking that wrapped class is saying in its contract, not its implementation, that it takes as a precondition the prior satisfaction of this invariant. successful construction of an object of the class amounts to a proof of the precondition. maybe i am only restating my second point here, but i find it very useful to think in such terms.",0,0,0,0.928598403930664,0.8720340132713318,0.7930965423583984,0.0,accept,unanimous_agreement
646750382,952,"i use `` `` and `` in my doxygen comments sometimes. programming by contract, even if only informally stated in comments, is useful discipline.",0,0,0,0.9373195767402648,0.9797643423080444,0.75590980052948,0.0,accept,unanimous_agreement
646955792,952,where is target defined? the function argument is name,0,0,0,0.9883841276168824,0.9935278296470642,0.9947552680969238,0.0,accept,unanimous_agreement
646965216,952,*imitate,0,0,0,0.943642258644104,0.8797940015792847,0.9705926179885864,0.0,accept,unanimous_agreement
646966461,952,"breaking with the camelcase naming convention is acceptable for string-like and container-like classes, following c++ standard library conventions instead. so perhaps also add empty(), clear(), swap() ... as they prove needful.",0,0,0,0.9727391600608826,0.9941717982292176,0.9938071370124816,0.0,accept,unanimous_agreement
646967580,952,"bravo! you exceeded my expectations. i wasn't insisting on the suggested configuration-time switch for approval of the pr, but now here it is.",1,-1,1,0.9788801074028016,0.9805121421813964,0.9942104816436768,1.0,accept,majority_agreement
646969421,952,"a class comment please, explaining that initialization strips paths, and then nothing changes the contents except assignments and moves from the same class.",0,0,0,0.9874275922775269,0.989620804786682,0.9917412996292114,0.0,accept,unanimous_agreement
646969821,952,"nonexplicit constructors, which i think are good for the purpose.",0,0,0,0.9697245359420776,0.8725934028625488,0.8479627370834351,0.0,accept,unanimous_agreement
646971872,952,maybe move parametervalue,0,0,0,0.9866569638252258,0.9879385828971864,0.9884451627731324,0.0,accept,unanimous_agreement
646977476,952,that comment is right only if the argument is `exceptiontype::internal` ?,0,0,0,0.984375774860382,0.994050681591034,0.9937219023704528,0.0,accept,unanimous_agreement
646977704,952,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
646978089,952,i hadn't thought to make this distinction. good!,1,1,1,0.984745442867279,0.9928116202354432,0.9949418902397156,1.0,accept,unanimous_agreement
646978919,952,but now i wonder if we always want this to be internal too. what if you are just trying to write to a folder that is write-protected or a drive that is out of space? you decide. write a comment if you don't change it.,0,0,0,0.8696120381355286,0.6024922728538513,0.9632296562194824,0.0,accept,unanimous_agreement
646981548,952,and that's all of our message box throws reexamined! very good.,1,1,1,0.9902999401092528,0.9952574372291564,0.9920768737792968,1.0,accept,unanimous_agreement
646983370,952,"now i see target was defined in the context of the sole use of this new cmake function, but i think you should not rely on that, use name",0,0,0,0.9851115345954896,0.9837790131568908,0.9902600646018982,0.0,accept,unanimous_agreement
647320145,952,"we had peculiar sqlite errors in this case in 3.0. let's leave it for now and see, how it turns out.",0,0,0,0.9480608105659484,0.9636889696121216,0.9827914834022522,0.0,accept,unanimous_agreement
647464350,952,too,0,-1,0,0.9567309021949768,0.5766266584396362,0.7399529814720154,0.0,accept,majority_agreement
647469662,952,still misspelled,0,0,0,0.9196407794952391,0.8251609802246094,0.908955454826355,0.0,accept,unanimous_agreement
915749282,3183,"it looked very weird that the wrapper class, which should have nothing to do with user interface, requires a pointer to a window. i see you did this only because `audacitymessagebox` uses that pointer in two places to report errors. (at least it is only two places, at the third commit.) so i say, just pass nullptr. the message box will still appear, as it always does, as a window with its own frame, but wxwidgets will not consider it to have a parent and might simply position it a bit differently. then keep mparent out of this wrapper.",-1,-1,-1,0.9523137211799622,0.9023556709289552,0.9614699482917786,-1.0,accept,unanimous_agreement
915761299,3183,"i notice there is an assignment of this member in the constructor of vsteffect that is no longer necessary. i suggest, you make a new preliminary commit, and rebase your branch onto that: first rewrite the constructor of vsteffect to eliminate as many assignments to members, as possible. instead, use in-class initializations where possible, otherwise member initializers in the constructor.",0,0,0,0.9872081875801086,0.9910180568695068,0.9924336671829224,0.0,accept,unanimous_agreement
915767166,3183,"this changes behavior from `getsymbol`. it will cause the wrong thing to happen, in case audacity 3.1 saved an xml file and 3.2 reloads it. there will be an unnecesary dialog asking to continue. instead, lower the `mname` member into the wrapper so `getsymbol` can be defined in just the same way.",0,0,0,0.9619741439819336,0.95615154504776,0.991978645324707,0.0,accept,unanimous_agreement
915768831,3183,you wrote the functions to set chunks so that you avoided duplications: the old functions invoke the `b` functions for common steps. do likewise for setting the parameter. make the return from this function boolean if necessary to enable that rewrite.,0,0,0,0.9886647462844848,0.9937005043029784,0.9947745203971864,0.0,accept,unanimous_agreement
916099076,3183,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
916099215,3183,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
916099329,3183,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
916110739,3183,"i do not understand: i already wrote ::callsetparameterb. do you mean, i should have it return a boolean and check the value where called? the reason to write the ""b"" versions of callsetchunk, callsetparameter, callsetprogram was this: they are needed by other methods in the wrapper, but the original versions also loop on mslaves, and i guess (please confirm) that the wrapper should not be aware of them. the ""b"" versions are basically copies of the originals, with the loop on mslaves removed.",0,0,0,0.9445510506629944,0.9801204800605774,0.9021648168563844,0.0,accept,unanimous_agreement
916317844,3183,"this first commit is good. do you know that you could even write [code block] the in-class initializer doesn't have to be a constant expression, and it can refer to earlier declared members. that would more exactly preserve the meaning of the assignment [code block]",1,1,1,0.8047589659690857,0.8358975648880005,0.6994603872299194,1.0,accept,unanimous_agreement
916321444,3183,"now that mname is in the wrapper, i suggest: - make this function non-inline - simply call it `getsymbol` - redefine `vsteffect::getsymbol` (a virtual function override) as the call-through to `vsteffectwrapper::getsymbol`",0,0,0,0.9790419936180116,0.994911015033722,0.9945358037948608,0.0,accept,unanimous_agreement
916323541,3183,"i mean, i see repetition of the use of `effcanbeautomated`. a small rewrite eliminates that repetition. `callsetparameter` can be defined in terms of `callsetparameterb` meaning that it is not coincidental that the same constant is reused. the ""b"" function does not always set the parameter, and by returning a boolean, it tells the other function whether to continue setting parameters in slaves.",0,0,0,0.9861279726028442,0.9869582056999208,0.99138206243515,0.0,accept,unanimous_agreement
916329295,3183,"this call isn't needed because `mvstversion` was assigned in `vsteffect::load` and is a member now of the `vsteffectwrapper` base, and i presume the answer returned by the plug-in to this query will never change. in fact, it may be that we discover, as we take this transformation further, that most of the things assigned in `load` will need to move down into the wrapper, and so perhaps the entire function will also move into it.",0,0,0,0.9874282479286194,0.9931564927101136,0.992120623588562,0.0,accept,unanimous_agreement
916330894,3183,"it may help, in the commit comment, to explain that `storesettings` adapts the logic in `loadparameters` and `loadsettings` but using in-memory settings instead of a config file as the source of values.",0,0,0,0.988312304019928,0.9950148463249208,0.9930101037025452,0.0,accept,unanimous_agreement
916338607,3183,"this visit of parameters has these differences from `vsteffect::loadsettings`: - the bracketing dispatches of `effbeginsetprogram` and `effendsetprogram` are not done - the bounds check on `value` between +/- 1 is not done is it important to preserve the bounds check? i honestly don't know. preserve it, as real code or as commented out, and experiment may later decide if we really need it. `loadsettings` as i now see, and as you probably saw too, was doing `callsetparameter` on self and then again on slaves: which was unnecessary, because the `callsetparameter` call on self was already recursive. the begin and end of set program were only done on master. was it right or wrong not to do it to on slaves? i don't know. but let's assume, it can be done on every handle for every instance, and the calls should therefore be part of `storesettings` here. in practice, multiple slaves will happen only when you use the old non-modal dialog from the effects menu, which will eventually not be part of 3.2 anyway. but we may in future want to reimplement something like it for a master bus of effects.",0,0,0,0.9500513672828674,0.9472519755363464,0.971105933189392,0.0,accept,unanimous_agreement
916340026,3183,"comment in the commit that `fetchsettings` adapts `savesettings` and `saveparameters` but storing in-memory in effectsettings, not in a config file.",0,0,0,0.9876014590263368,0.9955621957778932,0.99464213848114,0.0,accept,unanimous_agreement
916343718,3183,the commit that introduces this function should also call `refreshparameters()` which is a step done in the existing functions that load user and factory presets and that import. maybe you did this in a later commit i haven't reviewed yet? but you can do it in this early commit to make the function complete.,0,0,0,0.9882138967514038,0.9949129819869996,0.995019793510437,0.0,accept,unanimous_agreement
916345036,3183,"this `makesettings` is good. to be very fussy about the correct logical sequence of commits, i would say do this one before defining `transferdatatowindow`, just so that the lines [code block] ... are sure not to return false because `msettings` has not yet been initialized.",1,0,1,0.7982069849967957,0.6015666127204895,0.8998889327049255,1.0,accept,majority_agreement
916347411,3183,"now i have looked at the whole pr and i see this wasn't done. the task breakdown said ""define transferdatatowindow (to become updateui of a validator later), calling storesettings; remove parts of loadsettings that duplicate this"" so, to make that step complete, add the `refreshparameters()` call and also remove the call in three places, all in the same commit.",0,0,0,0.9830947518348694,0.992603838443756,0.9908906817436218,0.0,accept,unanimous_agreement
916350442,3183,the commit that inserts calls to `fetchsettings` should also do it in `loadfactorypreset`,0,0,0,0.9889031052589417,0.9956847429275512,0.9953433275222778,0.0,accept,unanimous_agreement
916355700,3183,"this new definition of `loadsettings` should set up all members of `vstsettings`, not just the parameter map. clear the chunk and set the id, version, etc. from the wrapper.",0,0,0,0.9887490272521972,0.9947167038917542,0.995027720928192,0.0,accept,unanimous_agreement
916405214,3183,"in the last commit, which adds two calls to `storesettings`, check the return value and return early if it is false. in `saveparameters`, do that before any other steps changing the config file.",0,0,0,0.9892839789390564,0.9952394962310792,0.994714081287384,0.0,accept,unanimous_agreement
916407324,3183,"in the commit that adds these lines, ""rewrite saveparameters not using the handles"" -- you store values from vstsettings and not from maeffect, which is what i meant. hiding all mention of maeffect in this function isn't what i meant. it's not wrong to factor out `supportschunk`, but not what i meant. but the last commit in the sequence (after this) should also, as i said, do `storesettings` first, anyway, which includes the check that the values in the two agree.",0,0,0,0.9758553504943848,0.9654383659362792,0.98777174949646,0.0,accept,unanimous_agreement
916408488,3183,"the commit adding these two functions, ""rewrite loadparameters not using the handles"", is just hiding mention of maeffect in loadparameters while not removing dependency on its state. it's not what i meant. however, i must read and understand all that you commented in ""rewritten loadsettings / savesettings"". actually eliminating use of maeffect might not be possible, as i think you are saying: instead, this handle is really needed as a ""scratch"" as with audiounits.",0,0,0,0.9596121311187744,0.9795462489128112,0.982108235359192,0.0,accept,unanimous_agreement
916411654,3183,"the commit that rewrites this function can also make it and `storecommandparameters` const, and that will allow you to remove `doloaduserpreset` and a `const_cast`",0,0,0,0.98819899559021,0.9946780204772948,0.9950569868087769,0.0,accept,unanimous_agreement
916418631,3183,"okay, commit 6.2, the most difficult one: i'm not convinced by what you write in the commit comment, about the need to keep the old functions. and, the new loadsettings/savesettings are not using the same ""parm_%d"" convention to name the keys (sometimes), which means it might break compatibility with old config files. `storecommandparameters` is used only by `loadparameters`. if it takes the ""chunk"" alternative, then it is using the maeffect handle, as a ""scratch"" from which it then fetches settings. that's ok. if that function does not take the early exit path loaing a chunk -- then instead a string value for key ""parameters"" is loaded, and reinterpreted as a config file of key-value pairs. i don't see why this could not be given to the new `loadsettings` directly. in which case, you do not rely on a ""scratch"" handle and so should not use `fetchsettings`. `fetchcommandparameters` is used only by `saveparameters`. that function first calls `storesettings` to change the scratch handle state, and then maybe exits early if chunks are supported. but if they are not, then again, i don't understand why the direct translation of settings to key-value pairs in `eap` can't be done.",0,0,0,0.8598642945289612,0.9554699063301086,0.8679611086845398,0.0,accept,unanimous_agreement
916763464,3183,"i understand now, thanks, done",1,1,1,0.8953027725219727,0.9182378649711608,0.947648584842682,1.0,accept,unanimous_agreement
916767330,3183,"what you suggest would look better - done, although i had to use a static cast: `unsigned mblocksize{ static_cast (muserblocksize) };`",0,0,0,0.9806029200553894,0.9908849596977234,0.9889938235282898,0.0,accept,unanimous_agreement
916790670,3183,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
916831023,3183,"alright, done. and yes, probably a good part if not all of ::load will need to move to the wrapper.",0,1,0,0.9265173077583312,0.6417182683944702,0.9705923199653624,0.0,accept,majority_agreement
916887560,3183,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
916889788,3183,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
916955039,3183,"you are right, i forgot this. now done.",0,0,0,0.8794185519218445,0.8549304008483887,0.8866895437240601,0.0,accept,unanimous_agreement
916959621,3183,"good point, done",1,1,1,0.9487727880477904,0.9112382531166076,0.9711862802505492,1.0,accept,unanimous_agreement
916968935,3183,"good catch, now done",1,1,1,0.9730644822120668,0.9711248874664308,0.952171802520752,1.0,accept,unanimous_agreement
916990498,3183,"this is what i added now, i hope it is what you meant? [code block]",0,0,0,0.9084202647209167,0.9563639760017396,0.9607546329498292,0.0,accept,unanimous_agreement
916996251,3183,"that's right, done.",0,0,0,0.963454246520996,0.874962568283081,0.9701728224754332,0.0,accept,unanimous_agreement
917764524,3183,"i added the bounds checking and the `effbeginsetprogram` / `effendsetprogram` bracketing. i need a plugin which does not support chunks to test this, but since `loadsettings` did this, it looks ok if storesettings also does it.",0,0,0,0.9879416823387146,0.9882112145423888,0.987136721611023,0.0,accept,unanimous_agreement
917804033,3183,maybe mblocksize should just be size_t. or you can use the = syntax not {} . there is a difference. {} disallows narrowing conversions.,0,0,0,0.9856560230255128,0.9903857707977296,0.9878197908401488,0.0,accept,unanimous_agreement
917806052,3183,yes,0,0,0,0.9564858078956604,0.9659429788589478,0.9686408638954164,0.0,accept,unanimous_agreement
917862764,3183,"if it is allowed to reference maeffect for that case, then i am happy to revert `supportschunk` - done.",1,1,0,0.8998550176620483,0.8742584586143494,0.6677389144897461,1.0,accept,majority_agreement
917887478,3183,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
917995134,3183,"i interpret your comment like so: in `loadparameters`, instead of calling `storecommandparameters` and then `fetchsettings`, just call `loadsettings`. then there would be no need for `storecommandparameters` to exist. but the thing is: the new `loadsettings` only translates to settings the `commandparameters` that it is given, without writing them to the handle. i thought this was the semantics of `loadsettings` we agreed on - is it not? it should be only a translator, not a translator + a setter. because i found the existing `loadsettings` not to conform to these agreed semantics (it was also writing to the handle), i renamed it to `storecommandparameters` and wrote a new `loadsettings` which does the translation only. but i could also revert it all, i.e. just have the original `loadsettings` which translates and sets to the handle, and then i could use it as you suggest. no problem for me, the code would also be simpler. i would only have the concern that the semantics of `loadsettings` would then vary across effect families.",0,0,0,0.9530563950538636,0.978540539741516,0.9779132008552552,0.0,accept,unanimous_agreement
918652553,3183,i opted to make mblocksize a size_t,0,0,0,0.984430968761444,0.9920361638069152,0.9941893815994264,0.0,accept,unanimous_agreement
918792844,3183,"let's try to see it from this angle: what `loadparameters` has to do, is to read some stuff from the config, set it to a plugin handle (done in the call to `callsetchunkb`) and fetch the settings from the plugin handle. this handle is `maeffect`, a member of the wrapper. methods of `vsteffect` do not operate on `maeffect` directly, but through methods of `vsteffectwrapper`. is this wrong?",0,0,0,0.9588008522987366,0.9943272471427916,0.9780941605567932,0.0,accept,unanimous_agreement
919877320,3183,just remove that commented line,0,0,0,0.984301507472992,0.973240613937378,0.9940826296806335,0.0,accept,unanimous_agreement
920883287,3183,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
921430728,3183,i don't see it,0,0,0,0.5306718945503235,0.507005512714386,0.7418217062950134,0.0,accept,unanimous_agreement
1593647921,6395,may be `lib-src` is better place for this library?,0,0,0,0.9900920987129213,0.9949447512626648,0.9925657510757446,0.0,accept,unanimous_agreement
1593694089,6395,"`std::move` is redundant here, better pass `settings` parameter by reference",0,0,0,0.9859906435012816,0.9929015040397644,0.9928948283195496,0.0,accept,unanimous_agreement
1593707116,6395,"`msettings` is not initialized at this point. while in that particular case nothing bad will happen because `compressorsettings` is trivially constructible, i'd still suggested to move initialization into constructor's body.",0,0,0,0.9859739542007446,0.9876685738563538,0.989495575428009,0.0,accept,unanimous_agreement
1593812943,6395,"i don't understand why should `limitersettings` inherit `compressorsettings`. i really do not see any benefits from doing so, but i see downsides in many `if(...) else { ... }` and typechecks. i'd suggested to eliminate `limitersettings` type, but instead introduce: [code block]",0,0,0,0.7999716401100159,0.971719205379486,0.7417100667953491,0.0,accept,unanimous_agreement
1593991818,6395,"i've been considering, yes, but i'll probably be modifying the code in some follow-up work. is that a good reason?",0,0,0,0.9706937074661256,0.9266252517700196,0.9829535484313964,0.0,accept,unanimous_agreement
1593995870,6395,"well spot, thanks.",1,1,1,0.9330561757087708,0.9429360628128052,0.8254674077033997,1.0,accept,unanimous_agreement
1594050276,6395,i'm not sure that this would work - not that i wouldn't like it to! i think it's because of this guy: ![a link] the `effectsettingsaccess` class initially creates a default-constructed struct. creating a new type is the only way i found of circumventing that.,-1,-1,-1,0.9852892756462096,0.9463246464729308,0.989066481590271,-1.0,accept,unanimous_agreement
1594062208,6395,"is it? the given `settings` object is originally a right value. if i passed by reference in the end there'd be a call to the copy ctor, wouldn't there?",0,0,0,0.9889839291572572,0.993804097175598,0.9941020607948304,0.0,accept,unanimous_agreement
1601159167,6395,not the case with pod-types i guess. it will simply create an extra copy.,0,0,0,0.9853113889694214,0.9805980324745178,0.9807494282722472,0.0,accept,unanimous_agreement
1601175735,6395,"hm, didn't think of it. `effectwithsettings<>::makesettings` is virtual and can be overriden, will that help?",0,0,0,0.9496871829032898,0.9552401900291444,0.9212413430213928,0.0,accept,unanimous_agreement
1601181422,6395,"up to you. i think it's not a big deal if you modify code added to `lib-src`, i recall there are already such cases",0,0,0,0.953536093235016,0.920236587524414,0.97153240442276,0.0,accept,unanimous_agreement
1601359271,6395,"`instance` will outlive editor, so that should be safe",0,0,0,0.9875184893608092,0.9869363903999328,0.988570272922516,0.0,accept,unanimous_agreement
1601410190,6395,is it possibly depend on ring buffer size (which is usually 0.25ms)?,0,0,0,0.985105037689209,0.9922351241111756,0.9911147356033324,0.0,accept,unanimous_agreement
1601499471,6395,`wxpoint2ddouble` makes graph move smoother?,0,0,0,0.9860792756080629,0.993908166885376,0.9890572428703308,0.0,accept,unanimous_agreement
1601550024,6395,"i guess it will be better to always call `realtimeprocess`, but instead effects could implement `bypass` mode, so that effects could accumulate samples if it's required for processing. for vst's that should be done trivially. wdyt?",0,0,0,0.985052227973938,0.9775301814079284,0.9816267490386964,0.0,accept,unanimous_agreement
1601854858,6395,"`compressorinstance` could remember it's state after init/suspend/resume/finalize, `ontimer` then could check that state. i have no doubt that observers will do the thing, i'm just a bit sceptical about effect instance being a publisher.",-1,0,0,0.8706547617912292,0.6911189556121826,0.9774496555328368,0.0,accept,majority_agreement
1603588276,6395,"and if it didn't, would there be harm in a dangling subscription ?",0,0,0,0.9266533255577089,0.9787999391555786,0.9806883335113524,0.0,accept,unanimous_agreement
1603593513,6395,the size of the low-latency playback thread buffer you mean? yes.,0,0,0,0.9843831658363342,0.9864673018455504,0.993707537651062,0.0,accept,unanimous_agreement
1603599988,6395,"no, it's more for anti-aliasing. will comment.",0,0,0,0.9866162538528442,0.941519021987915,0.9874853491783142,0.0,accept,unanimous_agreement
1603602988,6395,we'd then have to review all implementations and make sure none of the actually does the processing when bypassed. so i think this is safer.,0,0,0,0.9478986263275146,0.9758870601654052,0.9874498844146729,0.0,accept,unanimous_agreement
1603610211,6395,"the sample rate may change between playback states, and all this time the panel may stay open, so the sample rate update is a must. i tried other things before, and the observer-publisher pattern seemed like the simplest in the end (although there is no fundamental difference between injecting a callback lambda, i think).",0,0,0,0.9839978218078612,0.9813546538352966,0.9909083247184752,0.0,accept,unanimous_agreement
1603623214,6395,"no, it stores pointer in `weak_ptr`, should be safe anyway",0,0,0,0.985999882221222,0.9883755445480348,0.9917746186256408,0.0,accept,unanimous_agreement
901409170,3088,probably it should go to `#if defined(__wxgtk__)` as well,0,0,0,0.9877184629440308,0.994731903076172,0.9928216338157654,0.0,accept,unanimous_agreement
901410017,3088,"i think we could leave ""settings folder"" here. what do you think, -licameli?",0,0,0,0.981380045413971,0.98493629693985,0.9605132341384888,0.0,accept,unanimous_agreement
901416594,3088,according to the docs it seems that this code could be rewritten with simply `wxstring configdir(wxstandardpaths::get().getuserdatadir())` or at least `audacity_name` should be used,0,0,0,0.9878151416778564,0.9957905411720276,0.9925183057785034,0.0,accept,unanimous_agreement
901438113,3088,will do.,0,0,0,0.9548023343086244,0.9864637851715088,0.9465230703353882,0.0,accept,unanimous_agreement
901438355,3088,okay.,0,0,0,0.9698997735977172,0.9151892066001892,0.9765366315841676,0.0,accept,unanimous_agreement
901440646,3088,"~i am not sure, if i follow? `getuserdatadir()` will return `~/.local/share`, not `~/.config`.~ +1 on using `audacity_name` instead of a hardcoded string. disregard the last comment. i missed that this block is only executed when `__wxgtk__` is not defined.",0,0,0,0.6306877136230469,0.8657422065734863,0.6935963034629822,0.0,accept,unanimous_agreement
901498948,3088,"docs are confusing: `only use this method if you have a single configuration file to put in this directory, otherwise [a link] is more appropriate as the latter adds appinfo to the path, unlike this function.` [a link]",-1,0,0,0.5398702025413513,0.7590886354446411,0.7683519721031189,0.0,accept,majority_agreement
901522143,3088,"i agree, that the docs are confusing. i am currently rewriting the implementation based on your `enum dirtarget` idea. actually the `wxwidgets` `getuserwhateverdir` methods don't map to corresponding `xdg_whatever_home` directories, so i decided to just implement the correct xdg base directory logic for unix and keep the windows case exactly as it currently is. more info later. btw, are we sure that `__wxgtk__` is the correct preprocessor macro to distinguish unix? i just kept it from the original pr, but i am not 100% sure.",0,0,0,0.8395757079124451,0.5601428747177124,0.7484651207923889,0.0,accept,unanimous_agreement
901534970,3088,"we use it for now, at least, so it's good to go!",1,1,1,0.9804670214653016,0.9609645009040833,0.9819437265396118,1.0,accept,unanimous_agreement
902326158,3088,looks like glib is included unconditionally.,0,0,0,0.8407863974571228,0.9900974035263062,0.9820795059204102,0.0,accept,unanimous_agreement
902327870,3088,let's use c-assert. we are moving away from wxassert,0,0,0,0.9787363409996032,0.990529477596283,0.9928383231163024,0.0,accept,unanimous_agreement
902329583,3088,i think it is better to return `gdatadir` or at least to throw `audacityexception` of some kind. not `abort` for sure.,0,0,0,0.9838952422142028,0.9913699626922609,0.9798765182495116,0.0,accept,unanimous_agreement
902332129,3088,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
902332204,3088,"you return non const reference from gtargetdir, but here c++ deduce the type as `filepath`. is is desired?",0,0,0,0.9898257851600648,0.9929439425468444,0.9943707585334778,0.0,accept,unanimous_agreement
902334256,3088,"looks like you want overwrite the value, so you need `auto& dir = gtargetdir(target);`",0,0,0,0.9833911657333374,0.9937570095062256,0.9930415153503418,0.0,accept,unanimous_agreement
904788911,3088,i think we can do something like [code block] this will simplify code below,0,0,0,0.9809041619300842,0.9737557768821716,0.9813855886459352,0.0,accept,unanimous_agreement
904792220,3088,i think we can have an array here by adding `count` to `dirtarget`: [code block],0,0,0,0.9878990054130554,0.985377550125122,0.9910955429077148,0.0,accept,unanimous_agreement
904793001,3088,"(sorry for the formatting, github aint a good text editor xd)",-1,-1,1,0.9903618097305298,0.9822596311569214,0.9421707391738892,-1.0,accept,majority_agreement
904801847,3088,"can be done as [code block] this way we force the compiler to do all the checks necessary. given that the enum is private, there is not much need left for any runtime checks.",0,0,0,0.9880991578102112,0.9899857044219972,0.9939927458763124,0.0,accept,unanimous_agreement
904805504,3088,let's name it `getusertargetdir` for consistency please!,0,0,0,0.9265127778053284,0.9173285365104676,0.9933158755302428,0.0,accept,unanimous_agreement
904807442,3088,this becomes `auto& dir = directories[size_t(target)];`,0,0,0,0.9865573048591614,0.9928926229476928,0.9939193725585938,0.0,accept,unanimous_agreement
904807703,3088,this goes away,0,0,0,0.9456258416175842,0.966651976108551,0.9863727688789368,0.0,accept,unanimous_agreement
904808535,3088,`if (olduserdatadirexists())...`,0,0,0,0.9855066537857056,0.9931340217590332,0.993889570236206,0.0,accept,unanimous_agreement
904813259,3088,let's make all 4 functions to be const!,0,0,0,0.971108376979828,0.7591697573661804,0.9941633343696594,0.0,accept,unanimous_agreement
904917770,3088,"actually, i think i'll just extract all the xdg-specific logic into a separate function and then just inline these 2 functions into it.",0,0,0,0.9877102375030518,0.9776819348335266,0.988709270954132,0.0,accept,unanimous_agreement
904918596,3088,"makes sense. would `_targetcount` be an acceptable name? i would like to somehow distinguish that `count` is a sentinel, not a valid target.",0,0,0,0.987677276134491,0.9935144186019896,0.9865940809249878,0.0,accept,unanimous_agreement
904920953,3088,how about [code block] also i think the `xdgconfig` array should be `const`.,0,0,0,0.9883694648742676,0.993134617805481,0.9943928718566896,0.0,accept,unanimous_agreement
904921947,3088,"std::pair would do too, but i prefer descriptive names :-)",1,1,1,0.9840819835662842,0.4940143227577209,0.7076430320739746,1.0,accept,unanimous_agreement
904922159,3088,works for me,0,0,0,0.9517455101013184,0.9660178422927856,0.9870917797088624,0.0,accept,unanimous_agreement
904923013,3088,"what do you mean? this is a namespace, not a class.",0,0,0,0.9824585318565368,0.986200213432312,0.988445281982422,0.0,accept,unanimous_agreement
904927834,3088,"oh shoot, ignore me than",-1,-1,-1,0.92308247089386,0.7598061561584473,0.8084659576416016,-1.0,accept,unanimous_agreement
905026935,3088,+1 for the conservatism,0,0,0,0.5405633449554443,0.8174475431442261,0.5818194150924683,0.0,accept,unanimous_agreement
905114419,3088,looks good!,1,1,1,0.9856627583503724,0.9947203397750854,0.983550190925598,1.0,accept,unanimous_agreement
1461901926,5874,"do not delete this header from cmakelists.txt. the build works, but the file was not deleted, and so should be made known to the ides as part of the project.",0,0,0,0.9846928119659424,0.9944698810577391,0.9945935606956482,0.0,accept,unanimous_agreement
1470123671,5874,the header file is still not there,0,0,0,0.9742717146873474,0.9780648350715636,0.9863089323043824,0.0,accept,unanimous_agreement
1470127493,5874,"one would assume that entity named `on*` refers to an action, isn't `musicfileimportprefs` good enough?",0,0,0,0.9862723350524902,0.9949341416358948,0.993209421634674,0.0,accept,unanimous_agreement
1470131066,5874,i thought we use capital letters for enumerations elsewhere...,0,0,0,0.976729691028595,0.982213854789734,0.9883440732955932,0.0,accept,unanimous_agreement
1470132880,5874,"i'd expected `bool` as a return type, `on*` fits better here",0,0,0,0.97550231218338,0.98989737033844,0.9915406107902528,0.0,accept,unanimous_agreement
1470159082,5874,"method does not need an access to the internal state of the instance, so it can be lifted out from the class definition",0,0,0,0.9872713685035706,0.9928154945373536,0.9918498992919922,0.0,accept,unanimous_agreement
1470194945,5874,"`projectinterface` could be simplified a bit: `synchronizeproject` can accept as arguments what it now reads from getters (except `getuserprefs`). i guess that `projectinterface` is actually a project synchronization delegate (callback), right?",0,0,0,0.988016963005066,0.9936777949333192,0.9921802282333374,0.0,accept,unanimous_agreement
1470206802,5874,"please, use `std::unique_ptr&`",0,0,0,0.9843727350234984,0.9945853352546692,0.994434416294098,0.0,accept,unanimous_agreement
1470917449,5874,why not `std::shared_ptr `?,0,0,0,0.9858531951904296,0.991566240787506,0.9920886754989624,0.0,accept,unanimous_agreement
1470928420,5874,`analyzedaudioclip` seem to represent a delegate object too,0,0,0,0.9873630404472352,0.9929399490356444,0.9930325746536256,0.0,accept,unanimous_agreement
1470959874,5874,reference?,0,0,0,0.9850238561630248,0.9849644303321838,0.9921230673789978,0.0,accept,unanimous_agreement
1470975585,5874,"i think that the previous loop can be combined with that one, eliminating the need for `loopindices` variable",0,0,0,0.9868849515914916,0.9818398356437684,0.9853179454803468,0.0,accept,unanimous_agreement
1471018288,5874,"this structure wraps parameters that are later passed to a `getprojectsyncinfo`, this makes me think that it should be eliminated",0,0,0,0.98607337474823,0.9924163818359376,0.9933061003684998,0.0,accept,unanimous_agreement
1471137982,5874,i'd liked to see this renamed to `ontimesignaturerecoginized` or similar,0,0,0,0.9755537509918212,0.6941463947296143,0.9732037782669068,0.0,accept,unanimous_agreement
1471145262,5874,the second argument doesn't seem to be useful in real world,0,0,0,0.8619500994682312,0.9531925320625304,0.967329204082489,0.0,accept,unanimous_agreement
1471154457,5874,"not a clip, but rather a delegate",0,0,0,0.9852834939956664,0.9738290309906006,0.9852853417396544,0.0,accept,unanimous_agreement
1471160760,5874,"i guess call to this function is important outcome of the `synchronizeproject` function call in some cases, but it was not tested, otherwise i don't see much benefits from control inversion here in it.",0,0,0,0.9754728674888612,0.9797634482383728,0.9810980558395386,0.0,accept,unanimous_agreement
1471328090,5874,"i think that transformation could be simplified to `std::vector(sortednames.begin(), sortednames.end())`",0,0,0,0.987101435661316,0.9893378019332886,0.9862672090530396,0.0,accept,unanimous_agreement
1471686596,5874,is it really safe? i see that there could be `userexception` thrown at the same scope where `audacitymirproject` is created,0,0,0,0.9858081340789796,0.984865427017212,0.991641640663147,0.0,accept,unanimous_agreement
1471697582,5874,"not sure if it's the case in the real world, but there is a code path where `clipmiraudioreader` could be created but `import` returns `false`. could be easily fixed with `unique_ptr`",0,0,0,0.9882970452308656,0.9901564121246338,0.9696941375732422,0.0,accept,unanimous_agreement
1472584159,5874,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
1472591231,5874,what's would be the benefit?,0,0,0,0.97650945186615,0.984933853149414,0.989039182662964,0.0,accept,unanimous_agreement
1472600277,5874,i don't quite understand. could you pseudo-code what you mean?,-1,-1,0,0.6276429891586304,0.7456042766571045,0.5938708186149597,-1.0,accept,majority_agreement
1472607035,5874,"`std::shared_ptr&`, but sure.",0,0,0,0.9867363572120668,0.9903864860534668,0.9905632734298706,0.0,accept,unanimous_agreement
1472609002,5874,no good reason.,-1,-1,0,0.9263994097709656,0.6763692498207092,0.5755204558372498,-1.0,accept,majority_agreement
1472640955,5874,"sure, but this step-by-step approach is less intricate.",0,0,0,0.9640358686447144,0.9432926177978516,0.982107937335968,0.0,accept,unanimous_agreement
1472647083,5874,"there are advantages to using a struct as opposed to many arguments, e.g. like smaller diff when modifying them, especially when there exists test code.",0,0,0,0.9805050492286682,0.9872286319732666,0.9910498857498168,0.0,accept,unanimous_agreement
1472655374,5874,"mmh, it's not only about the recognition of the time signature, but also the interaction with the user, which i finds makes the `on` naming a bit tricky ... `setviewtobeatsandmeasures` itself isn't quite correct, actually. `reconfiguremusicgrid` is probably better.",0,0,0,0.8800251483917236,0.8834903836250305,0.8726412057876587,0.0,accept,unanimous_agreement
1472660052,5874,"in practice, you mean? cases are seldom, true, but they exist. future improvements could make this happen more often.",0,0,0,0.9717835783958436,0.9841476678848268,0.9862775206565856,0.0,accept,unanimous_agreement
1472662583,5874,what name do you propose?,0,0,0,0.9729484915733336,0.9909107089042664,0.9917833805084229,0.0,accept,unanimous_agreement
1472666395,5874,"tested it is, in musicinformationretrievaltests.cpp, and plenty of places, too. search `clipsweresynchronized` in that source file.",0,0,0,0.9584321975708008,0.9921826720237732,0.9896395206451416,0.0,accept,unanimous_agreement
1472669375,5874,"yep, nice.",1,1,1,0.9620048403739928,0.986287534236908,0.7981544733047485,1.0,accept,unanimous_agreement
1472671143,5874,what is it that could throw?,0,0,0,0.9786579608917236,0.9223306179046632,0.98852801322937,0.0,accept,unanimous_agreement
1472678101,5874,"it would be created but then destroyed when this lambda exits if `!success`. what is your concern? i haven't managed moving a vector of unique pointers around without invoking the unique_ptr copy ctor, yielding an error. a couple of lines below, `if (!resultingreaders.empty()` should probably be changed to `if (success && !resultingreaders.empty())`, though.",0,0,0,0.9126699566841124,0.9892751574516296,0.9908632040023804,0.0,accept,unanimous_agreement
1472715182,5874,"[code block] it also looks like that there is an invariant `projectwasempty == !projecttempo.has_value()`, so one of these arguments may be reduntant",0,0,0,0.9840254187583924,0.99534273147583,0.9944287538528442,0.0,accept,unanimous_agreement
1472733153,5874,"don't remember where i've learned it from for the first time, but googling shows that it originates to scott meyers's article (""how non-member functions improve encapsulation""). i think it's a good rule",0,0,1,0.6159811615943909,0.6724958419799805,0.980613112449646,0.0,accept,majority_agreement
1472737735,5874,`reportprogress` in `runtempodetection`,0,0,0,0.9861624240875244,0.99342679977417,0.9944466352462769,0.0,accept,unanimous_agreement
1472740772,5874,"context search shows me that `synchronizecalled` isn't never checked though, that's what i meant, but yes, you are right, `clipsweresynchronized` should be enough",0,0,0,0.9638991355895996,0.9673065543174744,0.9928638339042664,0.0,accept,unanimous_agreement
1472741928,5874,e.g. `clipsyncdelegate`,0,0,0,0.9833489656448364,0.9908656477928162,0.9948021173477172,0.0,accept,unanimous_agreement
1472751694,5874,"that still sounds odd to me, considering that you can call `synchronizeproject` not being in the context where musical grid is actually present. this call is just a way to provide a result for the intermediate step.",-1,-1,-1,0.9367882609367372,0.9794788956642152,0.7450838685035706,-1.0,accept,unanimous_agreement
1472754971,5874,"ah, sorry, i meant the third argument - `reconftype`",-1,-1,-1,0.9851085543632508,0.985845983028412,0.9123796224594116,-1.0,accept,unanimous_agreement
1472762007,5874,"my concern is that `presultingreader` is a raw pointer type. there seem to be a case where `import` creates a `clipmiraudioreader`, but then returns false, and object leaks because it's not yet wrapped with any type of smart pointer. but you've already said that you'll change the type of the argument to `shared_ptr&` in `import`, that should solve the problem",0,0,0,0.9044207334518432,0.983338475227356,0.9463441967964172,0.0,accept,unanimous_agreement
1472872503,5874,"ok, i see the exception. should be fine: if the user cancels the analysis, then there won't be time to modify the project, and the ctor should return early.",0,0,0,0.9833441376686096,0.9766429662704468,0.9859905242919922,0.0,accept,unanimous_agreement
1472874506,5874,:thumbs_down:,-1,0,0,0.5444921851158142,0.9822263717651368,0.5241621136665344,0.0,accept,majority_agreement
1472875628,5874,right. i just pushed a commit that cleans this up a little.,0,0,0,0.9676176309585572,0.9836459159851074,0.990255892276764,0.0,accept,unanimous_agreement
1472890524,5874,"i see. there's one subtlety: we must evaluate `project.viewisbeatsandmeasures()` after the prompt. we don't know what view the project will be in when this function exits. and since we need the `projectinterface` for that, we might as well use it to get the project tempo, too.",0,0,0,0.9790157079696656,0.9777968525886536,0.9818529486656188,0.0,accept,unanimous_agreement
1475791656,5874,could be `std::move`,0,0,0,0.9821896553039552,0.9925566911697388,0.9933362007141112,0.0,accept,unanimous_agreement
1475810008,5874,yep. will squash that in before merge.,0,0,0,0.9859821796417236,0.8845663666725159,0.978114366531372,0.0,accept,unanimous_agreement
852313290,2831,"i don't like the closed-endedness -- the violation of the ""o"", open-closed principle, of solid: ""a design should be open to extension but closed to modification"" in other words, if we ever add a new effect that falls into one of these categories, then it won't be self-contained in one new implementation file, but instead this file will need modification to make the menu sorting continue to work as desired. and we are also depending on long-distance coincidences of string literal values, between this file and each of the many effect implementation files, which is хрупкость. so i suggest: - a new enumeration effectcategory, defined in effect.h - a table mapping effectcategory to enumvaluesymbol (which pairs an identifier and translatablestring), defined in effect.cpp and accessible by a static member function - menulist is instead `std::vector >>` and gets translatablestring from that table - a virtual function of effect called geteffectcategory, appropriately overridden in all the effects that matter - some of these effects are not built-ins, but nyquist plug-ins. so nyquisteffect needs an override of geteffectcategory that doesn't just return a constant, but computes an answer too. - add a case in nyquisteffect::parse to recognize a new special lisp comment `$category`, which does reverse-lookup of the table of categories, by the identifier (not by the translatablestring), to find the enum value - modify the plug-ins/*.ny files as needed to identify their categories - ping when you do this, to review the changes at least in nyquist.cpp, and recommend how to update documentation of nyquist - preferredeffectsmenu does not return a static value, but computes its answer instead, by iterating the plug-ins and querying geteffectcategory - maybe it can cache that computed answer, but invalidation of the cache would need to be done by the plugin manager dialog, or if the user changes the language preference; see class preferencelistener do all of this, and i will be less dissatisfied... but then the set of categories and the sorting of the categories themselves will still be closed-ended, and in a further future i might want to seek a fix for that too involving a registration of categories.",-1,-1,-1,0.9772529006004332,0.9643815159797668,0.9392774701118468,-1.0,accept,unanimous_agreement
852327654,2831,"1. effectcategory is very likely to be extended/changed. 2. not each effect has should have effect category assigned, effects can be added or removed from that list. 3. menulist can be changed at any time, without modification of the effects source code, it's a resource object. considering that, i don't agree that my implementation violates ""o"". ideally, there could be an external file describing the stucture of that menu, which can be changed without any code modification.",0,0,0,0.9664826989173888,0.9838309288024902,0.9797682166099548,0.0,accept,unanimous_agreement
852340112,2831,"rename the `invert` effect to `invert polarity`, please.",0,0,0,0.9873833060264589,0.9944698810577391,0.9750396013259888,0.0,accept,unanimous_agreement
852376649,2831,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
852380784,2831,"ah, sorry, you copied my typo here. it should be ""volume and compression"" with a big c",-1,-1,-1,0.9865975975990297,0.9923956394195556,0.9901843070983888,-1.0,accept,unanimous_agreement
852381687,2831,same with these guys: * spectral tools * spectral delete * spectral edit multi tool * spectral edit parametric eq * spectral edit shelves,0,0,0,0.7490181922912598,0.9891843795776368,0.9885634183883668,0.0,accept,unanimous_agreement
852381778,2831,"if it is agreed to make that name change, the correct change in invert.cpp is: [code block] because in case anyone uses the invert effect in a macro, this will avoid breaking that macro when they migrate to a newer version of audacity. only the localized name of the effect will be changed, not the english identifier that macro programmers use.",0,0,0,0.9870507717132568,0.9947659969329834,0.993661642074585,0.0,accept,unanimous_agreement
852385995,2831,"as paul said in his comment above these are ""identifiers"", not names, but ""spectral tools"" is a group name and i'll fix that",0,0,0,0.9866403937339784,0.9923134446144104,0.9918115139007568,0.0,accept,unanimous_agreement
852390003,2831,"i veto this change request as part of the same issue. make this change request a different, minor issue. changing the name while preserving macro compatibility turns out not to be as easy for nyquist effects as it would be for invert. it needs more thought.",-1,0,0,0.5330705642700195,0.8659825921058655,0.9719067811965942,0.0,accept,majority_agreement
852724079,2831,"your implementation violates open ended ness for reasons i described. you must change pluginmenus.cpp if in future a new categorized effect is added, rather than having all necessary new code self contained in the effect’s implementation. i do not accept this.",-1,0,-1,0.7291895151138306,0.8394017815589905,0.9127103090286256,-1.0,accept,majority_agreement
852731315,2831,"how does that make me wrong? it is something i admitted: that even if you do my steps, it is not a complete fix for the problem of closed ended ness. still the steps i described are necessary if not sufficient. do you mean there should be another enumeration value for effects of undefined category? that is easy enough. “effects can be added or removed from the list.” do you mean as future development, or do you mean that the composition of the lists can be changed at runtime? do you mean that as a future development, we change our decision about the categorization of an individual effect? but it is much more proper, if some source code must change, that is the source code of that effect only rather than pluginmenus.cpp.",0,0,0,0.6762711405754089,0.9057847261428832,0.6862055063247681,0.0,accept,unanimous_agreement
852750824,2831,"""menulist can be changed at any time, without modification of the effects source code, it's a resource object. does “resource object” mean that the categorization of individual effects should not be hard oder in them, but somehow specified in an external file, like the configuration, and the user would have some way to change its contents, and the program would do effect sorting according to an interpretation of that file? but this implementation does none of that."" so i do t understand what you mean by “resource object.”",0,0,0,0.9442970156669616,0.983456552028656,0.987505316734314,0.0,accept,unanimous_agreement
852751669,2831,sorry i edited your original comment by mistake. i didn't mean to delete it. but i think i quoted all of it in my replies.,-1,-1,-1,0.9877138137817384,0.9909244179725648,0.9893163442611694,-1.0,accept,unanimous_agreement
852804072,2831,"""maybe it can cache that computed answer, but invalidation of the cache would need to be done by the plugin manager dialog, or if the user changes the language preference; see class preferencelistener"" to clarify i mention this really to suggest you don't bother with it: do recalculate the list each time you need to repopulate the effects menus.",0,0,0,0.981068789958954,0.9840890169143676,0.9928948283195496,0.0,accept,unanimous_agreement
852805792,2831,"""a design should be open to extension but closed to modification"" please, let do not pollute interfaces with more constants that has some meaning for about 30 effects, it has nothing to do with oc. why should prebundled effect, which isn't present in that menu, should be categorized as ""undefined""? or why should any other external effect have category which will never be used? during development ofcourse, and this is in fact points to the possibility to violate oc in future. yes, we can add or remove effects to/from that list, even now there are prebundled effects that are not present in that list, the set of groups can change as well. question: there are groups like ""distortion and modulation"", ""eq and filters"", should there be 4 emum values or only 2? what if effect provides both distortion and eq? it's not a problem from the implementation point of view, and it's not a bad idea in general, but there is no use for it right now. there is a set of effects that should be put in a certaing menu groups, there is no need to ""categorize"" all effects. menulists can be put into separate cpp file (like allthemeresources), or even external xml (json, txt,...) file. not sure that we need to provide a way for user to change that list, but surely we can do that. in fact we can extend format with rules and filters and provide a way to make this menus very customizable, and your idea with effects category will make it more flexible for the user.",0,0,0,0.9755845665931702,0.978684902191162,0.8313111662864685,0.0,accept,unanimous_agreement
852821213,2831,"that doesn't answer my question. what ""interface"" is polluted? effect itself? well it's going through lots of necessary changes this release. but it is quite simple to make effects un-categorized with a default implementation of the virtual function, and so most effects will need no modification for this. only the few that are categorized. this really isn't different in principle than ishiddenfrommenus. we are failing to understand ""oc"" to mean the same thing. if there is a new effect, its categorization should be determined by the code of that effect alone. the file that makes effect menus should be generalized, and should not make special mentions of any individual effects. the interface offered by abstract effect is extended now to be sufficient for the needs of the plugin menus. do you see there is special weird stuff in pluginmenus about noise reduction and the nyquist prompt? true. but that is bad legacy, not good precedent. as i said, i am admitting to incompleteness of this solution for open endedness, but i do not accept your argument that therefore, let this pr stand and make no attempt to fix it. effects should have some virtual function reporting their category as some kind of value, and pluginmenus.cpp should use that value and not have a hard-coded list of effect names. start by making that value an enumeration. though this enumeration of categories is closed ended, the set of effects in any one category is not closed ended. let me see the redraft. then we can discuss the further step of changing the value type from enumeration to some other dynamically determined set of cateogires.",-1,-1,0,0.8509856462478638,0.8553197383880615,0.5547954440116882,-1.0,accept,majority_agreement
853011371,2831,"what question then? using enum for entity like effect category is very likely to violate oc (until we agree that it will never change). so i don't see why your impementation violating oc is preferrable over my implementation which ""violates oc"" (which is not, because you don't have to change effect to change menu ordering, and you don't have to change anything in the menu to add a new effect, though you may want to change that too, but the problem here is that you cannot answer to the question ""how should i change that menu?"") effect placement in the menu should be determined by the menu. it can use properties of the effect to do that and using effect id for that purpose isn't worse than using any other property of the effect. effect id and effect category are both properties of the same entity, there is no difference between them in sence that they both could to be used as a filter parameters. this task does not specify that we should assign category to each effect, and build menu so that all effects grouped by these categories. this task requires to put **certain** effects into certain submenus, that's why there are references to the individual effects in the menu description, you cannot solve such task using generalization.",0,0,0,0.7370477318763733,0.9180415272712708,0.9394564032554626,0.0,accept,unanimous_agreement
853025569,2831,"as paul wrote: ""why?"". what other kinds of waveform inversion are there? yes there is such a thing as ""spectral inversion"" (which audacity does not have), but if that's the distinction that you want to make then i don't think that ""invert polarity"" does it as well as ""invert waveform"". regardless of which wording is decided, please avoid changing the command name unless absolutely necessary as doing so will break custom macros that use the command. as paul wrote: ""only the localized name of the effect"" should be changed.",0,0,0,0.969569206237793,0.9794236421585084,0.9799822568893432,0.0,accept,unanimous_agreement
853030700,2831,"one more time: i admit the incompleteness of my suggestions, but still say it is a better organization than this first attempt. if you are actually arguing to go beyond my suggestions and figure out open-endedness of categories, not just the members of categories -- great, do so! if not, still i want some of the extra effort done now. but the rest of what you say is unpersuasive to me. saying you only satisfy the issue in a looks-like-it-works way in the black box view is not acceptable. the decision to categorize an individual effect one way or another way should be encoded in the implementation of that effect. that is the open-ended solution in regard to the enlargement of the set of effects. ideally effects should be plug-ins, not baked into the executable. in fact this is realized in the case of nyquist effects, though we don't do this yet for effects in c++. at least for nyquist effects, a nyquist programmer should have the ability to put a new effect into the sub-menu of their choice, just by writing appropriate code in the .ny file, without needing special cooperation from a re-compiled audacity executable.",-1,1,-1,0.919675350189209,0.5680748820304871,0.8739586472511292,-1.0,accept,majority_agreement
853191676,2831,"i say that they are orthogonal to each other. what exactly does not work here? it's opposite to what is specified in the task: author/publisher effect, sorted alphabetically by name",0,0,0,0.977424144744873,0.9799056649208068,0.990002989768982,0.0,accept,unanimous_agreement
853221417,2831,"i don't understand what is orthogonal to what. nothing. but what i say from point of view of architecture is, it's not enough that it merely looks like it works. it shoudl be properly designed for extension. then should respecify the issue. we can specify the interface of nyquist programming as we can't for the other protocols. we can and should make the effort to give nyquist programmers the ability to categorize effects as they choose.",0,0,0,0.8908787369728088,0.8498239517211914,0.7886216044425964,0.0,accept,unanimous_agreement
853225955,2831,i think would agree with the last point.,0,0,0,0.9764143228530884,0.9822204113006592,0.9636952877044678,0.0,accept,unanimous_agreement
891806765,2831,indentation?,0,0,0,0.9771732091903688,0.9491462707519532,0.9903632998466492,0.0,accept,unanimous_agreement
891826510,2831,"maybe another type alias `effectsmenugroup` for the element, and reuse that below",0,0,0,0.9895911812782288,0.994192898273468,0.9883328080177308,0.0,accept,unanimous_agreement
891827416,2831,add a null check on `textcontent`,0,0,0,0.9866358637809752,0.9922630786895752,0.9950791597366332,0.0,accept,unanimous_agreement
892085765,2831,unused variable and type alias,0,0,0,0.9832367300987244,0.9899067282676696,0.9920364022254944,0.0,accept,unanimous_agreement
892088094,2831,"the first commit, introducing this enum and much else, is a very pleasing refactoring.",1,1,1,0.7923654913902283,0.8930355310440063,0.8965422511100769,1.0,accept,unanimous_agreement
892096362,2831,someone sould make the repeated '3.0.3' in this script an argument or take it from an environment variable and make it more current. not for this pr. all it does it make a comment in the generated .pot file out of date.,0,0,0,0.5989560484886169,0.9824985265731812,0.9789485335350036,0.0,accept,unanimous_agreement
892099188,2831,"i understand this simple rule extracts all xml content as strings to translate, but only the strings really need it, as strings not already part of the program.",0,0,0,0.9854645133018494,0.9361591935157776,0.9870906472206116,0.0,accept,unanimous_agreement
892106965,2831,"i tested comment extraction and it works: add to the .xml file [code block] before the ""volume and compression"" line, ran the script, confirmed that it was extracted. it seems i don't need ""i18n"". the option to xgettext may be unnecessary. include at least one example of a comment in the final version.",0,0,0,0.9803951382637024,0.9780776500701904,0.9693770408630372,0.0,accept,unanimous_agreement
892109489,2831,"which capitalization convention should we use? this is not like ""volume and compression"". should it have ""tempo""?",0,0,0,0.9289501309394836,0.9929105639457704,0.9906699657440186,0.0,accept,unanimous_agreement
892109798,2831,caps,0,0,0,0.9038844108581544,0.9483622312545776,0.7964485883712769,0.0,accept,unanimous_agreement
892110493,2831,caps again. up-casing all important words is what effect names have done. so i think it's right and these new names must be made consistent with it.,0,0,0,0.9795361161231996,0.9138750433921814,0.9725531339645386,0.0,accept,unanimous_agreement
892111053,2831,caps,0,0,0,0.9038844108581544,0.9483622312545776,0.7964485883712769,0.0,accept,unanimous_agreement
892111409,2831,"maybe these few effect names must be fixed, here and in the .ny files",0,0,0,0.9840577244758606,0.9918674826622008,0.985903263092041,0.0,accept,unanimous_agreement
892120146,2831,this function nicely encapsulates the decisions about default grouping and sorting of effects. to define some different policy in a later version should change only what happens in here. maybe a static variable can hold the results of the parse so that the .xml file need not be read more than once each session. but didn't we agree to sort effect names in each group by their translations? easily added here. did we also want to sort the groups by their translations? re-sorting of names in the statically duration results might be repeated in case the user changes languages and the menus must be rebuilt.,0,0,0,0.9550926089286804,0.9875242710113524,0.9743592739105223,0.0,accept,unanimous_agreement
892121650,2831,"maybe we only want to sort each list by translation, but keep the names ordered as in the resource file. whatever the decision, it is easy to change it just here.",0,0,0,0.9816686511039734,0.9822596311569214,0.98656564950943,0.0,accept,unanimous_agreement
892130874,2831,"for me on mac, the sorting doesn't work. the file is at /users/paullicameli/github/audacity2/build/bin/debug/audacity.app/contents/res/effects_menu_defaults.xml the program looks for a file at /users/paullicameli/github/audacity2/build/bin/debug/audacity.app/contents/macos/res/effects_menu_defaults.xml",0,0,0,0.9476822018623352,0.97804594039917,0.9934210181236268,0.0,accept,unanimous_agreement
892134314,2831,i moved the .xml to the expected place in the tree and was then able to test the changes and verify that switching grouping criteria in effects preferences does as expected.,0,0,0,0.988381803035736,0.9853620529174804,0.9927640557289124,0.0,accept,unanimous_agreement
892136177,2831,"the default sorting of generators and analyzers was surprising to as we now know. whatever is right way the criteria should be changed here, it will be an easy change.",0,0,0,0.873259425163269,0.9221601486206056,0.9708920121192932,0.0,accept,unanimous_agreement
893703864,2831,i see the new changes with `defaultfilter` and how `isdefaultplugin` changed. no objections.,0,0,0,0.9807279109954834,0.9590438604354858,0.9856197834014891,0.0,accept,unanimous_agreement
1318768364,5139,"i see a new member variable in this dialog, which is non-modal and so may live a long time between button clicks. that makes me want to examine its uses and see if instead local variables are used, or if that's not easy, then to be sure that the vector is cleared at appropriate times when the data are no longer needed.",0,0,0,0.9805228114128112,0.9549444317817688,0.9667506217956544,0.0,accept,unanimous_agreement
1318826550,5139,"not easy: the audio is acquired in `getaudio`, and read in another method: `recalc`. see `onclosebutton()`. this pr does not change the times when memory is acquired or released.",0,0,0,0.9701520800590516,0.907126486301422,0.9707613587379456,0.0,accept,unanimous_agreement
1318938323,5139,"restating my lost comment: this line is why i don't like the change. `as_size_t` has an assertion that the value of the sample count is really in the range of a `size_t`. i wasn't following the `` comment convention yet those years ago. it should be a `` now. and that means, there is burden of proof of satisfaction of the precondition at the point of the call. but i don't know what the proof is here, and i don't think there is any sufficient information to prove it. the point of commit 48aaca450b113a971a487f768c3e941accf9395a was to shift the burden of that proof instead to the places where `audiosegmentsampleview` is constructed. and note too, in that commit, the places where i added ` stretched samples in [t0, t1) can be counted in a `size_t` ` as an informal precondition, moving the burden of proof farther up. and in the next commit after that, which is ba920717e826d4a0d6b5d81436d90f6a2e8f69df, i made those try-catches of `bad_alloc` in case the precondition was not satisfied.",-1,-1,-1,0.8930188417434692,0.8718987703323364,0.5056178569793701,-1.0,accept,unanimous_agreement
1318940597,5139,so i don't approve of the reversal of all of that caution that i put into an earlier commit. and i must finish my examination of this pull request to see where you use the constructor and what proof of satisfaction of the precondition is possible.,0,0,0,0.5903855562210083,0.9172958135604858,0.5389954447746277,0.0,accept,unanimous_agreement
1318963691,5139,"i'm not persuaded by this either. after a closer look, i think this: - only a local variable in `recalc` is necessary. - `getaudio` can return the value instead of changing a member variable. - `recalc` can call `getaudio`. both existing calls to `getaudio` can be eliminated with this change. - `drawplot` and `plotpaint` only use the number `getnumsamples(mchannelgroupsampleviews)` so instead, just store that number as a member variable each time `recalc` is called.",0,0,0,0.9320886731147766,0.9816092848777772,0.9377195835113524,0.0,accept,unanimous_agreement
1319189602,5139,is this calculation right? i think it’s 23.3 minutes,0,0,0,0.9707027077674866,0.9848841428756714,0.983107089996338,0.0,accept,unanimous_agreement
1319195002,5139,do you preserve non-throwing?,0,0,0,0.983470380306244,0.9824480414390564,0.9941180944442748,0.0,accept,unanimous_agreement
1319195882,5139,ok yes,0,0,0,0.9717511534690856,0.915292263031006,0.9863651990890504,0.0,accept,unanimous_agreement
1319197109,5139,that should not be deleted i think,0,0,0,0.9854767918586732,0.9614655375480652,0.9710739850997924,0.0,accept,unanimous_agreement
1319201142,5139,"i think you are correct that you make the lifetime of sample data just the same as in the previous version. which means, the previous version didn’t handle memory as efficiently as it might have and so we can improve on it now. with closer study you can find that the “analyst” object has all the derived data necessary to draw the plot, and the size of that is proportional only to the analysis window size (or number of frequency bins) and independent of the length of the selection, which could be large.",0,0,0,0.9686418771743774,0.9773858785629272,0.9288149476051332,0.0,accept,unanimous_agreement
1319206399,5139,"even numbers that do fit in a size_t can be excessive and run out of memory. there is still a bound of 64m samples and multiply that by four to get bytes. will there always be a quarter gig free? so maybe a try-catch of `bad_alloc` could happen around the allocation, like what i lately did to bullet-proof the mixer board.",-1,0,0,0.6617265343666077,0.959205150604248,0.9620563387870787,0.0,accept,majority_agreement
1319209931,5139,"this bothers me, for the same reasons that mixer board changes did, and why i cautioned about correct rms calculation in contrast.cpp. samples from neighboring clips with different stretches are treated as just one long sequence of samples as if they had the same real-time rate, ignoring stretches. is that right? for contrast i argued it was wrong: rms should be calculated for clips separately, then combined into an overall rms with the proper weighting of different clips, taking stretches into account at that point. for mixer board, it was all right if only peak values are needed, but as i have also mentioned, mixer board also does an rms calculation that can be wrong now, but fixing it is future work that needs a totally different approach anyway to get the true post-fader levels out of the audio engine. what wrong calculation could be happening here? ...",-1,-1,-1,0.7811315059661865,0.5310709476470947,0.914775550365448,-1.0,accept,unanimous_agreement
1319212546,5139,"... answering that would take you into the guts of spectrumanalyst, where as i recall, values derived from many different fft windows are combined into a single window that is later plotted. as we have lately discussed, it is not wrong to take fft of pre-stretched data and assign it to the same frequency bins as for the as-rendered sound that we don’t bother to calculate just yet. however... i think you would find there an assumption that all windows should be weighted equally in the combined result, but that could now be wrong with stretches. what is a test case that might demonstrate this? ...",0,0,0,0.8180054426193237,0.880774199962616,0.9548670053482056,0.0,accept,unanimous_agreement
1319475109,5139,"i see three stages that matter to our decision here: 1. selection sample read-out (`getaudio`) 2. calculation of spectrum (`recalc`) 3. display of result (`show`) `getaudio` itself calls `recalc`, but `recalc` can also be called independently, if there is a change of analysis parameter (window size, spectrum type, ...). the user may keep the analysis window open and change the track data, which is a nice user experience. so the time-domain audio must be kept in memory for the lifetime of the window, we cannot assume that it won't change and we can re-read it.",1,0,0,0.6060373783111572,0.974770963191986,0.8707596659660339,0.0,accept,majority_agreement
1319484778,5139,"it is correct. unusual is the left operand of the bit-shift being 2, it usually is 1 - which would then yield 23.3. changed to `1 << 27`, in case i make another push.",0,0,0,0.9867183566093444,0.9726179242134094,0.9939080476760864,0.0,accept,unanimous_agreement
1319559253,5139,"### tl, dr: from a result point of view, imo it very marginally matters whether we pre-render or not, because of how rare use cases are where the limitation of either approach becomes a problem. (i assume that we don't put in the effort of weighting according to stretch ratio.) implementation wise, i think this one is easier, isn't it? no need to make an editable copy of the track objects, just use a different, user-friendly api (`getsampleview`). ### detail: yes, the weighting is ignored here, which might yield unexpected results if the selection is made across clips of different stretch ratios. i don't expect this to happen often, and if it does, that the stretching difference is large enough to be noticeable, but in principle, yes, either accurate, preliminary stretch-rendering, or weighting would alleviate this. i said ""accurate"" because, as we know already, the stretching algorithm is not perfect. i've done an experiment, which should serve as material for the spectrum analysis as well as the noise reduction problem. 1. i recorded myself saying ""test"" with an open mic. 2. i stretched the clip moderately, squeezing it by approx. 25%. 3. i duplicated the track for better comparison. 4. i selected a short region of background noise, 5. i rendered the stretching of that region. the project overall: ![a link] the spectrum analysis of the unrendered labeled segment (upper track): ![a link] that of the rendered segment (lower track): ![a link] (a way of superposing the spectra would be nice, like in adobe audition. we don't have this yet, do we?) for the spectrum analysis use case, i don't expect this to happen often either. it's more for the noise reduction case that this might become an issue, but i'll elaborate in that other pr.",0,0,0,0.6484765410423279,0.9612519145011902,0.8885282874107361,0.0,accept,unanimous_agreement
1319577448,5139,"i don't think so. in either versions, before or after, the only thing it does is returning before the warning check that there aren't too many samples. but if `selcount == 0`, it means that there was no selected track in the project, and no sample was read, in which case, of course, no warning anyways.",0,0,0,0.9735859036445618,0.9807239770889282,0.9644773006439208,0.0,accept,unanimous_agreement
1319594996,5139,"yep. `recalc` then also must return a boolean, because the follow-up code that shows the result otherwise crashes. that's not hard, commit upcoming.",0,0,0,0.942251205444336,0.8804592490196228,0.9437685012817384,0.0,accept,unanimous_agreement
1319649483,5139,"i don't see how it was safer before. i'm looking at this: [code block] if `audiosegmentsampleview::mlength` is `size_t`, overflow could happen in the first statement. if it takes a `samplecount`, overflow could happen in `getnumsamplesinview`. either way the overflow is caught by your try-catch. also, this would only happen in extreme cases : the mixerboard refreshes every 50ms. what stretch ratio do we need to squeeze more than 2^31 samples of audio in such a short amount of time ? possible, yet again there's the try-catch. with `samplecount`, the risk of overflow doesn't matter for this check in the next commit: [code block] but again, i didn't realize you had changed it, and didn't revert it properly as i left your comments untouched. we have a disagreement about whether this pr should go in or not, let's wait until that's settled to see if i have to clean that up.",0,0,0,0.9564270973205566,0.9328146576881408,0.935964584350586,0.0,accept,unanimous_agreement
1320562896,5139,"""audio could not be analyzed. this may be due to a stretched clip. try resetting any stretched clips, or mixing and rendering the tracks before analyzing."" might be better",0,0,0,0.9806973934173584,0.9853737354278564,0.987841784954071,0.0,accept,unanimous_agreement
1321801227,5139,that makes me think that we don't have an straightforward way of unstretching clips ... ticket ?,0,0,0,0.6394416689872742,0.573329746723175,0.9854474067687988,0.0,accept,unanimous_agreement
1321818183,5139,you mean resetting the stretch ratio exactly to 1.,0,0,0,0.9822741150856018,0.9837480187416076,0.9889935851097108,0.0,accept,unanimous_agreement
1323127281,5139,"i think this other old message should be corrected to ""must have"" or maybe totally different words",0,0,0,0.9766894578933716,0.8649979829788208,0.970973014831543,0.0,accept,unanimous_agreement
1323132629,5139,"i see one use of `getaudio` where the return value is not checked, in `onreplot`, but i think that will work all right. the dialog remains shown but the message is shown and nothing will be analyzed.",0,0,0,0.9854636788368224,0.9912880063056946,0.9658397436141968,0.0,accept,unanimous_agreement
1323201527,5139,"a clip could be either ""stretched"" or ""compressed"". i'm just asking whether the wording should be more inclusive?",0,0,0,0.9812968373298644,0.980042040348053,0.9923036098480223,0.0,accept,unanimous_agreement
1323202548,5139,"or should i say ""shrunk"" to avoid other confusions!",0,0,-1,0.9079395532608032,0.9734415411949158,0.5206890106201172,0.0,accept,majority_agreement
1324169545,5139,"""must have"" sounds good to me.",1,1,1,0.6976597309112549,0.7128031849861145,0.5385358929634094,1.0,accept,unanimous_agreement
1324252064,5139,"it is a problem at the basis indeed, ""stretch"" meaning ""expand"" in non-technical context. not sure how to solve this :d",-1,-1,1,0.3775050938129425,0.985270619392395,0.985248863697052,-1.0,accept,majority_agreement
1324255884,5139,addressed.,0,0,-1,0.9813690185546876,0.9869421124458312,0.8090953826904297,0.0,accept,majority_agreement
1324260553,5139,"i suppose, yes: this pr doesn't change the execution sequence for the case where sequences have different sample rates. that's been working well and failure due to failing `getfloats` take the same path.",0,0,0,0.964853286743164,0.9858765006065368,0.9891708493232728,0.0,accept,unanimous_agreement
1327468232,5139,but does this only appear to fix it? is the un-raised window just hiding behind the project window which you can move aside?,0,0,0,0.9758049845695496,0.9806011915206908,0.9926887154579164,0.0,accept,unanimous_agreement
1327518414,5139,"good thinking, but i tested it and it seems like it really fixes it. could confirm ?",1,1,1,0.9498204588890076,0.7380051612854004,0.9878446459770204,1.0,accept,unanimous_agreement
1328737912,5139,"yes, the issue has been fixed.",0,0,0,0.9822660684585572,0.9490004777908324,0.9030656218528748,0.0,accept,unanimous_agreement
1394655739,5570,is this file really needed here?,0,0,0,0.9873680472373962,0.9849708676338196,0.9917762279510498,0.0,accept,unanimous_agreement
1394665296,5570,i'd much prefer it not to be an operator overload,0,0,0,0.9425911903381348,0.9417769908905028,0.6323015689849854,0.0,accept,unanimous_agreement
1394719512,5570,"same here, single `setescapeid(wxid_no)` should do the thing",0,0,0,0.9867234826087952,0.9941650032997132,0.9946034550666808,0.0,accept,unanimous_agreement
1394721654,5570,not used,0,0,0,0.9469820857048036,0.9175628423690796,0.9867091178894044,0.0,accept,unanimous_agreement
1394732539,5570,shouldn't be there a way to change that in preferences dialog?,0,0,0,0.9631619453430176,0.991205632686615,0.9905347228050232,0.0,accept,unanimous_agreement
1394736094,5570,this file has too many whitespace changes,0,-1,0,0.8264179825782776,0.516711413860321,0.8182119131088257,0.0,accept,majority_agreement
1394736535,5570,and `#include` reorderings...,0,0,0,0.9834958910942078,0.9924185276031494,0.9950336217880248,0.0,accept,unanimous_agreement
1394739954,5570,"shouldn't we display detected bpm value in that dialog, to make user well informed about the choice? btw, i get strange results when trying to import ""big bass hit"" from musehub. it sets my project tempo to 542,373",-1,0,0,0.9706587791442872,0.8537343740463257,0.8877092003822327,0.0,accept,majority_agreement
1394744351,5570,`constexpr auto epsilon = std::numeric_limits ::epsilon() * mstep`?,0,0,0,0.985321879386902,0.992400050163269,0.9945034980773926,0.0,accept,unanimous_agreement
1394902678,5570,"yo, me too. i messed up a constant during clean-up, fix in 6c471cd.",-1,-1,0,0.6678767204284668,0.8284902572631836,0.6587006449699402,-1.0,accept,majority_agreement
1395341807,5570,i want all chances on this library's side that it stays well formatted. but maybe it's time to check in this .clang-format in the root of the repo - i don't know of an automation that would want to reformat the entire repo.,0,0,0,0.9584328532218932,0.9582020044326782,0.9767494797706604,0.0,accept,unanimous_agreement
1395343428,5570,why not? i find it sensible and it reads great: [code block],1,1,1,0.7474449872970581,0.8562811613082886,0.9922245740890504,1.0,accept,unanimous_agreement
1395357673,5570,"cool, thanks!",1,1,1,0.9858912825584412,0.9935232400894164,0.9948582649230956,1.0,accept,unanimous_agreement
1395359797,5570,"so that means that wxwidgets by default binds esc with clicking a no button ?.. anyway, thank you, it does work.",1,1,1,0.9262811541557312,0.5452231168746948,0.920645833015442,1.0,accept,unanimous_agreement
1395362826,5570,"we haven't discussed that with design. i would say so, only then i wouldn't know if checking ""don't ask me again"" should modify the value in that other dialog. ?",0,0,0,0.9407950043678284,0.9817162156105042,0.986887514591217,0.0,accept,unanimous_agreement
1395365728,5570,"vscode does that for me on save. i could only stage and commit the changes that are not automatic, but we're better without those trailing whitespaces anyways.",0,0,0,0.9817934036254884,0.9856008887290956,0.9895881414413452,0.0,accept,unanimous_agreement
1395370500,5570,"obviously devs tried to manually keep these in order, and yet it was imperfect. automatic re-ordering is painful for the reviewers when not done regularly, sorry about that, but then everyone could do it automatically and time would be spared.",-1,-1,-1,0.9807189702987672,0.9848323464393616,0.9929925203323364,-1.0,accept,unanimous_agreement
1395375237,5570,... pity that there isn't a `setclosebuttonid(...)` ...,-1,-1,-1,0.989509105682373,0.988207995891571,0.9922518134117126,-1.0,accept,unanimous_agreement
1395379786,5570,"i don't think this problem is related to the step size. the comment intends to give a comprehensive explanation, please let me know if there are unclarities.",0,0,0,0.9507827758789062,0.9328928589820862,0.9721834063529968,0.0,accept,unanimous_agreement
1432675903,5570,i'm doing some after-the-fact review of this because i need the background to understand #5791. i note the first commit in the sequence didn't build (test compilation failed),0,0,0,0.9694818258285522,0.983079195022583,0.9817537665367126,0.0,accept,unanimous_agreement
1432676103,5570,not yet used,0,0,0,0.9646007418632508,0.926746666431427,0.9903085827827454,0.0,accept,unanimous_agreement
1432683017,5570,second commit failed to configure the build because this file did not exist yet,0,0,0,0.9637198448181152,0.982895851135254,0.9707212448120116,0.0,accept,unanimous_agreement
1432683783,5570,no banner,0,0,0,0.9466707110404968,0.9307831525802612,0.9672507643699646,0.0,accept,unanimous_agreement
1432684352,5570,no banner,0,0,0,0.9466707110404968,0.9307831525802612,0.9672507643699646,0.0,accept,unanimous_agreement
1432686076,5570,all of this could have used shuttlegui instead,0,0,0,0.9865524172782898,0.9900038838386536,0.9909448623657228,0.0,accept,unanimous_agreement
1432749778,5570,banners please for this and the .h file,0,0,0,0.9836049675941468,0.989403247833252,0.9929447770118712,0.0,accept,unanimous_agreement
1432752464,5570,this associated empty user-visible strings with the identifiers. that's wrong. but what happened in later commits? ...,-1,-1,0,0.8237338066101074,0.5356191992759705,0.7997769713401794,-1.0,accept,majority_agreement
1432849935,5570,"i really don't like it that lib-wave-track and lib-track have all this mention of stretches and tempos, which are extraneous to what should be lesser and more easily understood class responsibilities. it's not for you to clean up now, but along with wave clip refactoring, i want to figure out dependency inversion between lib-wave-track and lib-stretching-sequence.",-1,-1,-1,0.9841039180755616,0.9792814254760742,0.9880965948104858,-1.0,accept,unanimous_agreement
1432991228,5570,this might use `foreachclip`,0,0,0,0.9880291819572448,0.9936887621879578,0.9952462315559388,0.0,accept,unanimous_agreement
1432999838,5570,i really dislike this added dependency,-1,-1,-1,0.9854838252067566,0.9908236265182496,0.9953493475914,-1.0,accept,unanimous_agreement
1433002947,5570,unnecessary,0,0,-1,0.6610735654830933,0.9073663949966432,0.580326497554779,0.0,accept,majority_agreement
1433003582,5570,unnecessary,0,0,-1,0.6610735654830933,0.9073663949966432,0.580326497554779,0.0,accept,majority_agreement
1433013793,5570,this assumes `newtracks` is not empty and no other subscript it used. maybe the argument should be `const tracklist &`,0,0,0,0.988325834274292,0.994639217853546,0.9931362867355348,0.0,accept,unanimous_agreement
1433016150,5570,what proves the assertion? you really rely on the weaker condition `clips.size() > 0`,0,0,0,0.9821049571037292,0.9914811849594116,0.9929004907608032,0.0,accept,unanimous_agreement
1433029600,5570,"ok so this commit corrects the previous, using shuttlegui. i wonder if a `populatoritem` could be used and other tricks to make the music information retrieval a non-intrusively defined module. also breaking the dependencies added in projectfilemanager.cpp.",0,0,0,0.9759119153022766,0.98768413066864,0.9888006448745728,0.0,accept,unanimous_agreement
1433035410,5570,ideally wavetrack and waveclip should not mention quarter notes!,0,0,0,0.9396877884864808,0.9247361421585084,0.9917005896568298,0.0,accept,unanimous_agreement
1434794424,5570,"maybe breaking down the wavetrack in a part that's only concerned with the horizontal arrangement of clips. this one would not need to see the stretch-related details of the clips, but i guess would essentially be concerned with boundaries. then the other part of wavetrack whose role is that of a clip container, really, which knows the stretching detail. not thought through, not much more than an intuition. will probably shatter against audacity's endless use cases.",0,0,0,0.6721756458282471,0.8646582961082458,0.8950625658035278,0.0,accept,unanimous_agreement
1434902548,5570,"from the context: surely importing one file results in one clip, and importing more than one files, in more than one tracks each with one clip. this could be a post-condition of `importer::import` (currently not stated).",0,0,0,0.9871438145637512,0.9918137788772584,0.9918131828308104,0.0,accept,unanimous_agreement
1434903268,5570,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
1514610713,6094,"the first `false` is `backup`, which is the negation of `forclipboard` in the creation of `newclip`, but always `false` here. i wonder if that's correct.",0,0,0,0.8969067335128784,0.9651045799255372,0.9898634552955629,0.0,accept,unanimous_agreement
1514624084,6094,the execution of `rightclips();` crashes for me just when generating a mono tone: [code block] `mrightchannel` is null.,0,0,0,0.9629629254341124,0.9784543514251708,0.9822417497634888,0.0,accept,unanimous_agreement
1514626729,6094,... as well as when generating a tone on a stereo track.,0,0,0,0.9707801342010498,0.9852750301361084,0.9795755743980408,0.0,accept,unanimous_agreement
1514636577,6094,... i realise now that this was that way already before this commit.,0,0,0,0.6365483999252319,0.850196361541748,0.8705108165740967,0.0,accept,unanimous_agreement
1514748669,6094,"so the change is conservative and if there is a bug related to this, it is not introduced herein.",0,0,0,0.97394460439682,0.9829601049423218,0.9907999634742736,0.0,accept,unanimous_agreement
1514749178,6094,i'm debugging this now,0,0,0,0.9753338098526,0.938435673713684,0.9735262393951416,0.0,accept,unanimous_agreement
1519559133,6094,how? by mixing left- and right?,0,0,0,0.9736199378967284,0.9851662516593932,0.9890235662460328,0.0,accept,unanimous_agreement
1519624083,6094,i suppose that `pinterval->getclip()` never equals `nullptr` ? in which case this could reduce to `const bool selected = selectedclip == &pinterval->getclip();` - for clarity.,0,0,0,0.9877279996871948,0.9939565658569336,0.9922836422920228,0.0,accept,unanimous_agreement
1519650833,6094,the standard guarantees that the first assignment of this line gets evaluated before the second?,0,0,0,0.9871577620506288,0.9935373663902284,0.9942536950111388,0.0,accept,unanimous_agreement
1519661853,6094,"line 46 of this file has `using waveclipholder = std::shared_ptr ;`. is it too soon to remove this alias? i was puzzled by `auto wavetrack::rightmostornewclip() -> intervalholder`, wondering if it might return the last entry of `mclips` or if some wrapping was still necessary.",0,0,0,0.9682914614677428,0.9900746941566468,0.9482440948486328,0.0,accept,unanimous_agreement
1519674391,6094,"i haven't commented on this in the wide-wave-track pr, but is there something that justifies `wavechannel` inheriting `widesamplesequence` conceptually?",0,0,0,0.9783329367637634,0.993492066860199,0.9903574585914612,0.0,accept,unanimous_agreement
1519681959,6094,the two `findclip` definitions in the anonymous namespace (at the time of writing lines 1510 and 1527) are now unused.,0,0,0,0.9864140152931212,0.9949546456336976,0.9938517808914183,0.0,accept,unanimous_agreement
1519682733,6094,rename this `findclip` ?,0,0,0,0.987663209438324,0.9936488270759584,0.995009422302246,0.0,accept,unanimous_agreement
1519695443,6094,`const`,0,0,0,0.9820937514305116,0.9839904308319092,0.9916640520095824,0.0,accept,unanimous_agreement
1519723038,6094,will `origclip.msequences.size() == 1` after this move?,0,0,0,0.9890339374542236,0.9945982694625854,0.9946297407150269,0.0,accept,unanimous_agreement
1519734371,6094,no need for a `transaction transaction{ *this };` in this implementation?,0,0,0,0.9876728653907776,0.9943580031394958,0.9946562051773072,0.0,accept,unanimous_agreement
1519760014,6094,"""discardright"" perhaps is a better name",0,0,0,0.9498369097709656,0.9889901876449584,0.9388693571090698,0.0,accept,unanimous_agreement
1519761971,6094,`getclip` returns a reference and & is address-of. we assume references always refer to an existing object.,0,0,0,0.9880026578903198,0.9910135865211488,0.9939805269241332,0.0,accept,unanimous_agreement
1519764774,6094,"it's not an assignment, it's an initialization, and surely they are evaluated in sequence.",0,0,0,0.978561520576477,0.9880093932151794,0.9838367104530334,0.0,accept,unanimous_agreement
1519778791,6094,"maybe one more cleanup commit is justified, to eliminate dual terminology.",0,0,0,0.9774351119995116,0.974865198135376,0.9674541354179382,0.0,accept,unanimous_agreement
1519780761,6094,i should eliminate the inheritance and see whether things still compile. but the abstract base class may be used somewhere.,0,0,0,0.9874575734138488,0.9886383414268494,0.9894618391990662,0.0,accept,unanimous_agreement
1519781106,6094,noted,0,0,0,0.954064130783081,0.9701052904129028,0.9895713329315186,0.0,accept,unanimous_agreement
1519781664,6094,"as i said, a terminology cleanup later",0,0,0,0.9867050051689148,0.9871059656143188,0.9928240776062012,0.0,accept,unanimous_agreement
1519781839,6094,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
1520071479,6094,"even if this were assignment and not initialization -- the `,` as an expression operator (not as the separator of declarations) also ensures sequencing. the hazard you may be thinking of, is that in evaluation of arguments passed to a function, which are separated by commas -- then, yes, the sequence of evaluation is not specified.",0,0,0,0.9369735717773438,0.9922175407409668,0.9901082515716552,0.0,accept,unanimous_agreement
1520090100,6094,"not immediately. you see that this function is only called under `waveclip::splitchannels` and before it exits, it calls `makenarrow` (or whatever i rename that to be) and that visits the main clip and recursively the cutlines.",0,0,0,0.9883884787559508,0.987724542617798,0.9883427023887634,0.0,accept,unanimous_agreement
1520111581,6094,"intentionally so. see #6107 which proposes a fix for the slow importing in the master branch. that fix will conflict too much with wave-clip-refactoring, so if it is merged, it should be reverted before wave-clip-refactoring is merged to master. i need an alternative fix for performance, and that is to remove the transaction. in fact i suggest #6107 also just remove it. there is strong exception safety for operations on individual sequence objects, meaning in case of exception, the previous state of the objects is restored unchanged. there is only weak exception safety for waveclip objects operating on multiple sequences, unless there is also a transaction, to handle the possibility that one sequence is updated, but an exception happens during the update of the other. each sequence remains self-consistent, but the waveclip might not achieve strong exception safety, or the ""strong invariant"" condition of equal length sequences. recall pr #6089 which you reviewed. i decided i can't easily guarantee that consistency always. it reduced the programming effort to allow append to violate the strong condition temporarily.",0,0,0,0.970824122428894,0.9885091185569764,0.9416146874427797,0.0,accept,unanimous_agreement
1520113032,6094,see also the long commit on append in the header file.,0,0,0,0.9863908290863036,0.9931991696357728,0.9952440857887268,0.0,accept,unanimous_agreement
1521193845,6094,of course - i overlooked that it returned a reference.,0,0,0,0.9551694989204408,0.9049410223960876,0.9714083075523376,0.0,accept,unanimous_agreement
1521200431,6094,"i cannot find the standard spec for that, but it looks like you're right - from left to right.",0,0,0,0.9691628217697144,0.9467526078224182,0.9873436689376832,0.0,accept,unanimous_agreement
1521213261,6094,ok. i didn't notice the comment line 830.,0,0,0,0.9772451519966124,0.9757549166679382,0.9818618297576904,0.0,accept,unanimous_agreement
1521251094,6094,"i ran your branch locally to check something else, and this causes a stack overflow, calling again this `createclip` overload instead of the one below.",0,0,0,0.98763906955719,0.9692980647087096,0.990453839302063,0.0,accept,unanimous_agreement
1521272157,6094,doesn't `[[nodiscard]]` apply here?,0,0,0,0.983683943748474,0.9936485886573792,0.9938905239105223,0.0,accept,unanimous_agreement
1521277659,6094,rather `t0 clamped to sequence start time`.,0,0,0,0.9861630797386168,0.9939773082733154,0.9938766360282898,0.0,accept,unanimous_agreement
1521859105,6094,good idea. i'm doing that in a rebasing and squashing.,1,1,1,0.9536529779434204,0.9781534671783448,0.971018135547638,1.0,accept,unanimous_agreement
936915749,3229,could this method be made const?,0,0,0,0.988520324230194,0.9934685230255128,0.993221402168274,0.0,accept,unanimous_agreement
937641562,3229,"seems so, thanks! i'll fix that",1,1,1,0.9866827726364136,0.9915600419044496,0.99459707736969,1.0,accept,unanimous_agreement
937712435,3229,i think both imageroll files could be removed as there are no longer any references to them.,0,0,0,0.9883725047111512,0.987561583518982,0.9893565773963928,0.0,accept,unanimous_agreement
937729704,3229,could this be changed to a 'const auto&'?,0,0,0,0.9876054525375366,0.9947199821472168,0.9942162036895752,0.0,accept,unanimous_agreement
937741750,3229,missing include for reference to wxtheapp,0,0,0,0.9795459508895874,0.9906359314918518,0.9733040928840636,0.0,accept,unanimous_agreement
937744316,3229,i disagree. understand whether there are good ideas there worth revisiting before you say that. and i have never myself studied these files closely enough to answer that.,-1,-1,-1,0.8842526078224182,0.9457841515541076,0.5239458084106445,-1.0,accept,unanimous_agreement
937744359,3229,possibly change to 'const auto'. just being pedantic.,-1,0,0,0.9620139598846436,0.9708074331283568,0.5124989151954651,0.0,accept,majority_agreement
937746794,3229,"imageroll.h is used by abutton. expandingtoolbar.* are the unused files. i suggest don't remove them, but maybe don't modify them except minimally to keep them compiling?",0,0,0,0.9879119396209716,0.9804571270942688,0.9913780689239502,0.0,accept,unanimous_agreement
937794322,3229,this line can be removed as index is not referenced.,0,0,0,0.9835822582244872,0.9917033910751344,0.9947643280029296,0.0,accept,unanimous_agreement
937801681,3229,i think begin/end could be replaced with cbegin/cend.,0,0,0,0.9875043034553528,0.990763247013092,0.9854898452758788,0.0,accept,unanimous_agreement
937813371,3229,"how about adding a pre-condition assert check before this line, an assert(seq.size() != 0)? if seq.size() is 0 and forward is false then increment will become a very large number as size_t is an unsigned number.",0,0,0,0.9868746399879456,0.9928606152534484,0.9932940006256104,0.0,accept,unanimous_agreement
937838048,3229,does this function need to verify that index is valid before calling thetheme.bitmap?,0,0,0,0.9888922572135924,0.9949610233306884,0.9942598342895508,0.0,accept,unanimous_agreement
938808821,3229,"can't be made const, it changes value later",0,0,0,0.985648274421692,0.98600834608078,0.9920148849487304,0.0,accept,unanimous_agreement
938809276,3229,"right, thanks!",1,1,1,0.9345529675483704,0.9875818490982056,0.9598597884178162,1.0,accept,unanimous_agreement
938812912,3229,"it can't be zero-sized, though it may contain nullptrs",0,0,0,0.987956702709198,0.9844522476196288,0.9855791330337524,0.0,accept,unanimous_agreement
938816151,3229,"there is a check inside thetheme.bitmap, but i think it's not really neccessary since all bitmap indices have names in the code",0,0,0,0.9834835529327391,0.9875792860984802,0.9870564937591552,0.0,accept,unanimous_agreement
938837100,3229,"ah, i missed that.",-1,0,0,0.873245894908905,0.7089142799377441,0.8742367625236511,0.0,accept,majority_agreement
952739555,3229,this change makes a difference for windows that override `getmainwindowofcompositecontrol`. what are such windows?,0,0,0,0.978024959564209,0.9898380041122437,0.9951515197753906,0.0,accept,unanimous_agreement
952743064,3229,"combos and list controls i see, but no such are used in the sidebar.",0,0,0,0.9884204864501952,0.9871677756309508,0.9922578930854796,0.0,accept,unanimous_agreement
952761787,3229,"this deletion requires you insert the `#include` in `expandingtoolbar.cpp` so that the commit ""abutton refactoring"" builds",0,0,0,0.988821268081665,0.9954238533973694,0.9956259727478028,0.0,accept,unanimous_agreement
952763705,3229,"comment, please",0,0,0,0.970051407814026,0.9547224044799804,0.9912960529327391,0.0,accept,unanimous_agreement
952767607,3229,off by one mistake -- the third argument is not `dx2 - dx1`,0,0,0,0.9748657941818236,0.9510854482650756,0.932297706604004,0.0,accept,unanimous_agreement
952771193,3229,"and dx2 - dx1 may be zero or negative, in which case, skip it",0,0,0,0.9807320237159728,0.990005910396576,0.9935303330421448,0.0,accept,unanimous_agreement
952778361,3229,"the commit ""realtimeeffectpanel wx*button replaced with abutton"" doesn't build. the next commit repairs that. make both build.",0,0,0,0.9678981900215148,0.9835846424102784,0.9943252205848694,0.0,accept,unanimous_agreement
952799755,3229,you don't add any overrides in later commits. but this change is harmless.,0,-1,0,0.9701637029647828,0.8668666481971741,0.9925360679626464,0.0,accept,majority_agreement
952901248,3229,"see: [a link] i think this change may break that old bug fix, on windows though not on mac. the first window in `seq` is not a `tooldock` but the parent of one. drag all toolbars off the top dock so they float, and test it.",0,0,0,0.9570356607437134,0.9511555433273317,0.993545949459076,0.0,accept,unanimous_agreement
952934819,3229,see also #3419,0,0,0,0.9835529327392578,0.9838821887969972,0.9939660429954528,0.0,accept,unanimous_agreement
953197798,3229,"the changes in commit ""imagerollpanel usage replaced with wxpanelwrapper"" are not necessary for this issue. not harmful either, as they remove and change two unused classes. why did you think you needed this?",0,-1,0,0.9175914525985718,0.5037978887557983,0.9913980960845948,0.0,accept,majority_agreement
953204953,3229,"it seems that almost everywhere else the program handles `wxk_escape`, it's the key-down, not char event. does this matter? i don't know. if it works, ok",0,0,0,0.9791226387023926,0.9351510405540466,0.8568739891052246,0.0,accept,unanimous_agreement
953207044,3229,the power buttons are just `abutton` and not themable. does this matter? are the images really the same in all themes?,0,0,0,0.9474350810050964,0.968152105808258,0.9931262731552124,0.0,accept,unanimous_agreement
953208553,3229,"the template `themedbuttonwrapper` is now unused at commit ""realtimeeffectpanel wx*button replaced with abutton"" while the template `themedabuttonwrapper` is only used with abutton as the template argument. i wonder if the templates are really needed then, but maybe you think there will be future uses.",0,0,0,0.9803217053413392,0.9902751445770264,0.9924885034561156,0.0,accept,unanimous_agreement
953555950,3229,what was the major advantage in this replacement of `wxbutton` with `abutton`? more states that can be associated with changed images? more convenient control of the button state?,0,0,0,0.9834012985229492,0.9850788116455078,0.9905722737312316,0.0,accept,unanimous_agreement
953582120,3229,perhaps then the name of this function should change to `processdragevent` because it no longer delays the dispatch.,0,0,0,0.9862427711486816,0.9942991733551024,0.9884418845176696,0.0,accept,unanimous_agreement
953613050,3229,"i was not aware that this interchange of behavior of the two buttons was specified, but it is certainly correctly implemented.",0,0,0,0.97906231880188,0.964508593082428,0.9787742495536804,0.0,accept,unanimous_agreement
953629678,3229,"this long-distance coincidence of literals here and in realtimeeffectspanel.cpp is unfortunate. maybe a named constant. also the mismatch of capitalization would make two strings in the translation catalog. the _ macro does a run-time translation. if the language preference changes, is this name reset? no. that means the screen reader might read it in the wrong language. important? maybe not enough to fix, but comment it.",-1,-1,-1,0.9064358472824096,0.9505208730697632,0.9117661714553832,-1.0,accept,unanimous_agreement
953650582,3229,"i see that the template that became unused earlier now is reused. i see _ again but the template adds the handler for preference changes that updates the title. the handler for preference change in that template, and also in the `themedbuttonwrapper`, should also update the window name with the title, for the screen reader.",0,0,0,0.987147331237793,0.9891144037246704,0.9929719567298888,0.0,accept,unanimous_agreement
953653634,3229,"if language is changed in preferences, this line is not visited to update the name.",0,0,0,0.9810454845428468,0.9886817932128906,0.9926736950874328,0.0,accept,unanimous_agreement
954859782,3229,"right, but `dx2` calculation is wrong",0,0,0,0.9653732776641846,0.9737589359283448,0.8164777159690857,0.0,accept,unanimous_agreement
954868961,3229,"thanks, will fix that",1,1,1,0.7331090569496155,0.7420212626457214,0.841853678226471,1.0,accept,unanimous_agreement
954909396,3229,"-licameli i tested it in current master (without my changes) as you said and both top and bottom panels are focusable, so even if i revert this check in my branch it wouldn't fix the issue. also tried after configuration reset, both docks aren't empty, though they are look empty",0,0,0,0.9769924879074096,0.9653120636940002,0.968805193901062,0.0,accept,unanimous_agreement
954952040,3229,"for same reason we are trying to avoid dependency cycles, because aliases complicates the code",0,0,0,0.8837308287620544,0.9638031125068665,0.982241988182068,0.0,accept,unanimous_agreement
954961097,3229,key down event delivered to the window that has focus. wxdialog handles wxk_escape same way,0,0,0,0.9888269901275636,0.9888203740119934,0.9928159713745116,0.0,accept,unanimous_agreement
954965577,3229,"it is themable, but stored as a `abutton*`",0,0,0,0.984987199306488,0.992222249507904,0.9952093958854676,0.0,accept,unanimous_agreement
954974419,3229,"native buttons are not focusable on mac until such behaviour explicitly enabled in the preferences. native buttons do not support text elision, appearance can't be customized... many reasons actually",0,0,0,0.9385104179382324,0.7694916725158691,0.977189600467682,0.0,accept,unanimous_agreement
955032095,3229,"as i concerned it works same way everyway, don't see why this case is special",0,0,0,0.9438785314559937,0.9280848503112792,0.9351954460144044,0.0,accept,unanimous_agreement
955090408,3229,"i don't understand. top or bottom panel is meant to be skipped in the ctrl-f6 cycle if there are no toolbars on the dock. are you saying that there was already a regression in this behavior, in master, for windows? if so, then don't try to fix the regression if your pr is not introducing it. there should instead be an issue which i think should not be fixed for alpha.",0,0,0,0.9290220141410828,0.8792151212692261,0.7084553837776184,0.0,accept,unanimous_agreement
955090913,3229,"behavior of focusing, and you know, is different across operating systems.",0,0,0,0.9516870975494384,0.9415594935417176,0.9728220701217652,0.0,accept,unanimous_agreement
955114655,3229,now i see and understand your rewrite.,0,0,0,0.9705596566200256,0.980275571346283,0.9894317388534546,0.0,accept,unanimous_agreement
1513202051,5980,minor: alphabetical order (below too),0,0,0,0.9680660367012024,0.989693820476532,0.9880766868591307,0.0,accept,unanimous_agreement
1513206914,5980,this is your way of not duplicating the long list of `wxdataviewctrl` ctor arguments ? :d,1,0,1,0.9578131437301636,0.6065433025360107,0.9812682271003724,1.0,accept,majority_agreement
1513241070,5980,doesn't look necessary as it was already set to null a few lines above.,0,0,0,0.9683617353439332,0.9773691296577454,0.975205659866333,0.0,accept,unanimous_agreement
1513646478,5980,most of these could be private.,0,0,0,0.9859559535980223,0.9854571223258972,0.9770679473876952,0.0,accept,unanimous_agreement
1513648719,5980,"trying to understand these: ideally this #if would be false, so that e.g. `class plugindataviewstaterenderer final : public wxdataviewtogglerenderer` could be defined and end of story. but it's not always the case and so you need some custom implementations. are your custom implementations inferior? if not, which not just keeping them and remove the #if ?",0,0,0,0.971053183078766,0.9829984307289124,0.9800887703895568,0.0,accept,unanimous_agreement
1513662956,5980,"... i coincidentally found out that, in spite of this #if statement yielding true for me, there still is an available definition of `wxdataviewtextrenderer` in dvrenderers.h. so i tried to remove this #if and only keep `class plugindataviewstaterenderer final : public wxdataviewtogglerenderer` and `class plugindataviewtextrenderer final : public wxdataviewtextrenderer` and then run audacity. at first sight i don't see a difference.",0,0,0,0.8531057834625244,0.8713697791099548,0.8102914094924927,0.0,accept,unanimous_agreement
1513672101,5980,"because i'm lazy and try to minimize the amount of code i have to review, i similarly tried to remove this class definition, just using [code block] i'm no narrator expert, but trying it out it still seemed to work. what was the motivation for this class definition?",-1,0,0,0.9229804873466492,0.741366446018219,0.5814877152442932,0.0,accept,majority_agreement
1513682311,5980,not used?,0,0,0,0.9662325978279114,0.928513526916504,0.992996871471405,0.0,accept,unanimous_agreement
1513682595,5980,not used?,0,0,0,0.9662325978279114,0.928513526916504,0.992996871471405,0.0,accept,unanimous_agreement
1513683399,5980,"`clearall`, `selectall`, `enable` and `disable` not used.",0,0,0,0.9888375997543336,0.9921808242797852,0.9935264587402344,0.0,accept,unanimous_agreement
1513690869,5980,"i don't understand why, but `eiscreating` is the only mode used in this source file.",0,0,0,0.9347463250160216,0.8875537514686584,0.9283574223518372,0.0,accept,unanimous_agreement
1513693970,5980,a constant for this width would be nice.,0,0,0,0.6439876556396484,0.962378740310669,0.9780367016792296,0.0,accept,unanimous_agreement
1513707971,5980,`pm` is not used,0,0,0,0.9775763154029846,0.990918517112732,0.994342565536499,0.0,accept,unanimous_agreement
1513716315,5980,"i noticed (and think i remember someone else mentioning this in the ticket, maybe peter) that once this modal shows, the visible plugin items become greyed out: ![a link] i don't know why or how to fix this, but it probably would be around those lines.",-1,0,-1,0.9675836563110352,0.8822373151779175,0.7716678380966187,-1.0,accept,majority_agreement
1514000156,5980,yes :grinning_face_with_sweat:,-1,0,1,0.3728278875350952,0.9868387579917908,0.9546302556991576,,review,no_majority_disagreement
1514046057,5980,"ideally, yes. but `wxwidgets` controls are not always have same behavior across platforms. there are three different underlying types depending on target platform: generic on windows (custom implementation that doesn't use high level oss controls), gtk tree view on linux-based platforms, and `nsoutlineview` on macos. they are all react differently on user input, and not exactly as we want it to. `wxdataview*renderer` implementations are also platform-dependent, and class hierarchies they belong to are also different depending on platform. no doubt :rolling_on_the_floor_laughing: i think i answered that question?",0,0,0,0.627104640007019,0.926968514919281,0.9397913813591005,0.0,accept,unanimous_agreement
1514053962,5980,"yes, i'll remove that `if` statement, thanks!",1,1,1,0.9309050440788268,0.978249192237854,0.9517409801483154,1.0,accept,unanimous_agreement
1514189517,5980,ack,0,0,0,0.9720376133918762,0.8596508502960205,0.9149930477142334,0.0,accept,unanimous_agreement
1514356065,5980,"yes i recall that was me - but: a) i can't find where i reported it, b) i can't seem to be able to replicate it on the latest branch build for this.",0,0,0,0.9230661988258362,0.9766532778739928,0.9799705743789672,0.0,accept,unanimous_agreement
1514601801,5980,"as matthieu accurately noticed, it seem that rows become grayed out when ""incompatible plugins"" dialog appear. in latest update i provided a hotfix which works for me. also, search when typing should now loop over the table.",0,0,0,0.9735264778137208,0.96828955411911,0.9845296144485474,0.0,accept,unanimous_agreement
1514658979,5980,:smiling_face_with_tear:,-1,0,1,0.8147109150886536,0.9897242784500122,0.9111701846122742,,review,no_majority_disagreement
1515978219,5980,`override`,0,0,0,0.9849077463150024,0.98292738199234,0.9879725575447084,0.0,accept,unanimous_agreement
1515996515,5980,"either this should be an `override` or it is not used. please review this for other methods as well. that will help the review, and making as many of these `private` as possible on top of that would help even more.",0,0,0,0.9774580001831056,0.9890291690826416,0.993443489074707,0.0,accept,unanimous_agreement
1521311351,5980,"one small thing: currently, sorting by ""generator"", the ""type"" menu saying ""audacity effects""/""nyquist effects""/... is confusing, as you really are seeing something that's not an effect. can you rename them to the following instead? * audio unit * ladspa * lv2 * vst * vst3 * nyquist * native (where native is what currently is ""audacity effects"")",0,0,0,0.8284646272659302,0.5855239033699036,0.8821758031845093,0.0,accept,unanimous_agreement
1521323731,5980,"good call. but for greater clarity could the ""native"" be expanded to ""**native audacity**"" ?",1,1,1,0.9745950102806092,0.7126954197883606,0.9680097699165344,1.0,accept,unanimous_agreement
1534045021,5980,"with this change it is not guaranteed that `pluginprovidernames` and `mpluginproviderids` have equal size anymore, is it? then it is used in [code block] and i haven't yet understood what the consequences could be.",0,0,0,0.91238933801651,0.961521327495575,0.9893583059310912,0.0,accept,unanimous_agreement
1534063708,5980,"all good, i didn't realize that `continue` also skipped the call to `mpluginproviderids.push_back(pluginmanager::getid(provider.get()));`.",0,0,0,0.885631799697876,0.8919453620910645,0.8817170858383179,0.0,accept,unanimous_agreement
1205343881,4723,"i'm starting the review in the middle, with the commit ""remove now obsolete api methods"". it makes the most widespread changes, by changing the interface of wavetrack, and i want to understand that first as perhaps what motivates much else. my first comment: waveclip::tosequencesamples becomes unused so could be removed.",0,0,0,0.950632870197296,0.9544017314910888,0.9531428217887878,0.0,accept,unanimous_agreement
1205645567,4723,should the comment instead say `scratch`?,0,0,0,0.9818060398101808,0.9947242140769958,0.9867701530456544,0.0,accept,unanimous_agreement
1205680309,4723,add banner comments at top,0,0,0,0.9871086478233336,0.9859288334846495,0.9936591982841492,0.0,accept,unanimous_agreement
1205680648,4723,add banner comments,0,0,0,0.9861940741539,0.9866598844528198,0.9921122789382936,0.0,accept,unanimous_agreement
1205681130,4723,add some doxygen comments about the purpose of the class,0,0,0,0.9872682690620422,0.991560995578766,0.9938802719116212,0.0,accept,unanimous_agreement
1205697376,4723,"very minor, but i think about shrinking the `sizeof` and `alignof` structs when i define them. i might think to permute the members, putting `mmaxblocksize` last. and then forget about it.",0,0,0,0.9411171078681946,0.773658037185669,0.9735659956932068,0.0,accept,unanimous_agreement
1205703363,4723,"the sequence of member initializers does not agree with the sequence that the class declares the memebrs. it's legal but will compile to execute in the sequence of the members, not the sequence of the initializers seen here. some compilers warn about that. in this case it doesn't matter because there are no side effects or ordering dependencies among the initializers. but it is good habit always to make the sequences agree.",0,0,0,0.9523378610610962,0.974112629890442,0.9825872778892516,0.0,accept,unanimous_agreement
1205706808,4723,"putting `numsamples`, then `format` last might shrink the `sizeof`",0,0,0,0.986922800540924,0.9937426447868348,0.9927026033401488,0.0,accept,unanimous_agreement
1205711060,4723,"my preference is to use new uniform initialization syntax for members [code block] which has an advantage of disallowing narrowing conversions. but one must know about a few dangers, where you must use parentheses to disambiguate. such as, constructing a vector and specifying an initial size instead of vector contents.",0,0,0,0.9719802141189576,0.9872806668281556,0.9836775064468384,0.0,accept,unanimous_agreement
1205718936,4723,"the terminology throws me a bit. ""block"" is already much used in sequence itself with a different meaning, and there can be any number. but ""blocks"" here are just two. i suggest instead, ""slots"".",0,0,0,0.8872142434120178,0.9200348258018494,0.5195124745368958,0.0,accept,unanimous_agreement
1205734202,4723,"i think this misuses the assertion. if it's part of the contract that the getter function cannot fail, then just give it a void return. if failure is tolerable (and indeed you handle the case next), then don't assert. and i would do the latter, knowing what i do about the history. the `maythrow` arguments ultimately cause exception propagation when true in case there is some sort of disk failure. exceptions lead to a top-level handler in the program that backs out the side effects of a failed operation and restores the last good state out of undo history. see `audacityapp::onexceptioninmainloop`. but in some contexts (painting the screen) false is passed around instead to suppress exceptions, and it's expected to fill sample buffers with zero and give that to painting. failure conditions because of exogenous device problems or corrupted files are contingencies to be handled, and it is not proper to assert that they never happen. as i said, i don't like new assertions that have no accompanying comments anywhere, unless they are in the middle of the function and very easy to deduce as always correct in the context. a new assertion should mean ""this condition was provable at the time the assertion was written."" you should know, and persuade your reviewer too, that assertion failure is logically impossible at the time you add the assertion. i see assertions as a kind of documentation to aid the reader in reasoning about correctness, not just there for their runtime effects in debug builds. now maybe later code modification breaks the proof because it is hard to maintain all the consistency. that's when the runtime effect of assertions is also valuable.",0,0,0,0.5727568864822388,0.957246959209442,0.9560792446136476,0.0,accept,unanimous_agreement
1205739360,4723,"this is ""lru"", isn't it? least-recently-used.",0,0,-1,0.9831900596618652,0.990204930305481,0.8254898190498352,0.0,accept,majority_agreement
1205742544,4723,"maybe `memcpy` instead, or maybe compilers are smart enough to make that optimization",0,0,0,0.9362152218818665,0.9925864338874816,0.9861937165260316,0.0,accept,unanimous_agreement
1205762304,4723,"i have now read all of this replacement for `sampletrackcache`. that class had many more complications that i wrote long ago and reviewed again just today. did you read and understand all of it? i don't ask to reproduce all of those, yet.. like this cache, that one was meant to work best with a pattern of fetching from successive sample offsets. many small fetches then would not be punished with repeated database queries. unlike this, that one also allowed for efficient, sequentially backward fetches, as might also happen in scrubbing. also unlike this, that one had awareness of the underlying block boundaries within the sequence and adjusted its caching pre-fetch sizes accordingly. but that is lost with the simplifications here. removing the complications of best and ideal block sizes from wavetrack and waveclip interfaces still seems a good idea to me, cleaning up those abstractions, but now that the new cache can cooperate more intimately with sequence, it should still implement similar logic to align its prefetches to the underlying sequence blocks. also unlike this, sampletrackcache maintained two buffers and could satisfy a request partly from each. so suppose two buffers equal to the maximum block size. so suppose only the maximum block size is exposed by wavetrack as a preferred size for sequential fetches, and suppose an effect does just that. (let's neglect time stretching). still the request might not align to the actual blocks, because of the history of cuts and pastes causing some under-sized blocks, or because some starting point was chosen without regard to alignment. but maintaining two buffers would still reduce the number of database queries. a request for the maximum block size might be filled partly by one slot, then partly by the other, but then also the remainder of the other slot is available to satisfy the next request without again invoking the getter function. in other words -- without reproducing all complications of `sampletrackcache`, still i would rewrite the above to loop, filling alternate slots, then copying to the out buffer, until satisfying the total request.",0,0,0,0.93074631690979,0.8662312030792236,0.8809841871261597,0.0,accept,unanimous_agreement
1205790883,4723,"as we discussed, a question is whether the cache is invalidated in sufficient places. the cache depends on mnumsamples and mmaxsamples, so it should be invalidated at least when either of those changes. (though also when contents change). i haven't studied the later commits, but even this one is incomplete by that criterion. `mmaxsamples` can change in `converttosampleformat`. (also `handlexmltag`, but that is deserialization of the structure from disk, so in fact just one initialization of the cache at the end of `handlexmlendtag` is sufficient.) `mnumsamples` may change where `appendblock` is called -- surprise!, the third argument is a reference. also in `paste`, `delete`. also `commitchangesifconsistent`, `appendblocksifconsistent` but you covered those.",0,0,0,0.9794347882270812,0.9920042157173156,0.9872344136238098,0.0,accept,unanimous_agreement
1205795533,4723,or not make this file ... ?,0,0,0,0.5232482552528381,0.9620480537414552,0.9894146919250488,0.0,accept,unanimous_agreement
1205799209,4723,"... or don't make a separate file? you made this cache separate from sequence and used a std::function callback -- were you thinking of avoiding dependency cycle? yes, it avoids the cycle between two translation units. but now i think it could be quite proper for sequence and its cache to cooperate intimately, each class using the other's interface directly, and one a friend of the other -- and so, put them all just in sequence.* avoidance of dependency cycles is desirable in the graph if `#include`s relating translation units. but it's not necessary at the level of closely cooperating classes, like containers and their iterators.",0,0,0,0.9342058300971984,0.8966570496559143,0.9675897359848022,0.0,accept,unanimous_agreement
1205801116,4723,surely this functiion served little purpose,0,0,0,0.785936176776886,0.9676446318626404,0.7264388203620911,0.0,accept,unanimous_agreement
1205801772,4723,and the next thing is we spend time splitting classes into different headers/translation units :-),1,1,0,0.92961448431015,0.9369637966156006,0.9883832335472108,1.0,accept,majority_agreement
1205802581,4723,"finally i reach the commit that deletes the two functions above, and much else. as i already explained, i don't like these deletions from sequence. i think some valuable old logic for alignment of cache fetches is lost. i think these two functions at least should be retained, and they should be private, but the cache of the sequence should be a friend or a nested class.",-1,-1,-1,0.74916672706604,0.8921027183532715,0.612707257270813,-1.0,accept,unanimous_agreement
1205807611,4723,"why are there now const and non-const overrides? this suggests the query might mutate the track. i think `getidealblocksize` was erroneously non-const, and you just made a global search and replace?",0,0,0,0.9829397201538086,0.9844448566436768,0.9906365275382996,0.0,accept,unanimous_agreement
1205818968,4723,"`tosequencesamples` can be removed, as now unused -- and then `getsequencestartsample` is also unused, so delete it too",0,0,0,0.9866868257522584,0.9949424862861632,0.9917900562286376,0.0,accept,unanimous_agreement
1205826739,4723,"this change is incorrect! removing the use of `getbestblocksize` is all right, but not removing the call to `limitsamplebuffersize`, which makes sure that the last fetch does not exceed the intended range of the sequence.",0,0,0,0.8675646781921387,0.552840530872345,0.5713337659835815,0.0,accept,unanimous_agreement
1205829796,4723,"we split lots of old legacy code that combined ui and internals carelessly and was generally written without regard to proper dependency cycle management. this case isn't like that. but are you thinking of some generalized abstract, polymorphic sequence? i think you hinted at that and i don't undertand you yet.",-1,-1,0,0.6268313527107239,0.8697775602340698,0.9644706845283508,-1.0,accept,majority_agreement
1205833573,4723,"also incorrect to remove `limitsamplebuffersize` here, though this is experimental code unreachable in the release build.",0,0,0,0.958200454711914,0.9895755052566528,0.9562957286834716,0.0,accept,unanimous_agreement
1205868786,4723,"i don't like this solution to the invalidation problem. distinguishing abstract sequenceinterface, and making this decorator, seems to me, excessive complication for the problem. i would rather, as i said, let the sequence and its cache be closely cooperating classes in one translation unit, and just invalidate the cache in all mutating member functions of sequence. there would be little need to disturb other code outside of sequence. this commit does add a lazy creation-on-demand of the cache when getting from the sequence -- that part is good. putting sufficient invalidations into sequence.cpp so that we can examine it in isolation and be confident of cache correctness -- that is good. still there might be the other problem of ""eviction."" reclaiming the memory resources of the cache when it's not good to occupy them. the old caches were short-lived -- they disappeared after rendering a spectrogram, or after destroying a mixer object. the new caches are internal cursors of sequences, and might be more numerous than before, as they become per-clip and not per-track, and are not local variables in appropriate scopes. sequence (and therefore waveclip, and therefore wavetrack) might therefore benefit by exposing a `clearcaches` function that the application can decide to call in certain contexts. i would at least be sure to empty the caches of the duplicate tracks that are in the undo stack -- both when creating undo states, and also when duplicating tracks out of the undo state. actually that might even require a pure virtual function in track for cache clearing. see `tracklistrestorer` where the duplications happen.",-1,-1,-1,0.9372910857200624,0.8778184652328491,0.8765921592712402,-1.0,accept,unanimous_agreement
1206367716,4723,"missed that, thanks.",1,1,1,0.7915711998939514,0.6602179408073425,0.8839835524559021,1.0,accept,unanimous_agreement
1469503561,5900,what happens if you swap channels?,0,0,0,0.9687322378158568,0.973105788230896,0.9858223795890808,0.0,accept,unanimous_agreement
1469505759,5900,"this commit is strange. as i said i don't like it that lib-wave-track mentions extraneous things like quarter notes and stretch ratios, and now this is one more thing. i might figure out a restructuring in my branch. why can't a track or clip simply publish whenever it changes, and have subscribers attached to it? why must you first set a publishing interface into it?",-1,-1,-1,0.9759894609451294,0.9764181971549988,0.9862619042396544,-1.0,accept,unanimous_agreement
1469512254,5900,i think this function should be moved into `wavetrackaffordancecontrols.cpp` which is the sole user of it.,0,0,0,0.9893525838851928,0.9916141033172609,0.9860844016075134,0.0,accept,unanimous_agreement
1469517737,5900,repeated expression could be `textwidth`,0,0,0,0.9885373115539552,0.9933549165725708,0.9938740134239196,0.0,accept,unanimous_agreement
1469520861,5900,"seeing this commit that again changes what is painted in the affordance area -- i say again: add it to the qa checklist, that it should be tested with a right-to-left language, hebrew or arabic.",0,0,0,0.984960913658142,0.9869338274002076,0.9862418174743652,0.0,accept,unanimous_agreement
1469524140,5900,"should you always draw that bitmap, or not in case you reassigned 0 to iconwidth?",0,0,0,0.9880311489105223,0.9922508597373962,0.992360770702362,0.0,accept,unanimous_agreement
1469525197,5900,"oh i see the early return did that, but i found it a bit non obvious",0,-1,0,0.8846040368080139,0.6719451546669006,0.9823850989341736,0.0,accept,majority_agreement
1469564845,5900,"those classes look nice, but i'd rather you just follow conventional use of shuttlegui for bracketing things.",0,1,0,0.7137210965156555,0.5319091081619263,0.8527498841285706,0.0,accept,majority_agreement
1469748882,5900,"this method is called when preparing tracks for playback. during playback, swapping channels isn't possible. after playback, the publisher will have expired, so swapping channels wouldn't have consequence.",0,0,0,0.9842143058776855,0.9831244945526124,0.9943631887435912,0.0,accept,unanimous_agreement
1469758511,5900,"the publisher is updated by the stretching sequence, before playback, and gets destroyed after playback. but i'll try the approach you suggest.",0,0,0,0.9871563911437988,0.9822116494178772,0.9933699369430542,0.0,accept,unanimous_agreement
1469802041,5900,"it helped me when i had to change things around, and i think it would also have helped me when i looked at this source file the first time and was trying to figure out how it all worked.",0,0,1,0.7951719760894775,0.9147610664367676,0.6183645129203796,0.0,accept,majority_agreement
1470947060,5900,"two octaves down, five octaves up -- might comment somewhere that these are the bounds. maybe more prominently in the header file.",0,0,0,0.9863583445549012,0.9900111556053162,0.986855447292328,0.0,accept,unanimous_agreement
1470976230,5900,this does not impose the limits on pitch shift that the dialog does.,0,0,0,0.9784451127052308,0.9723665118217468,0.9620122313499452,0.0,accept,unanimous_agreement
1470979991,5900,it's a little strange that this is a member function of a ui object (representing a certain rectangle of the screen). can't it simply be a non-member function?,-1,-1,-1,0.7730228304862976,0.9271188974380492,0.5544307231903076,-1.0,accept,unanimous_agreement
1470988759,5900,"i really dislike this entire commit -- adding mutability. let it stand, but i may explain the alternative with another suggested commit.",-1,-1,-1,0.9867848753929138,0.9903353452682496,0.9911912083625792,-1.0,accept,unanimous_agreement
1470994406,5900,why remove `const`? that's not necessary and having it here is useful information to a maintainer.,0,0,0,0.9823511838912964,0.992765247821808,0.990514039993286,0.0,accept,unanimous_agreement
1471005943,5900,"looks good to me - see ""use observer framework"" commit",1,1,1,0.9538188576698304,0.9589547514915466,0.7438156604766846,1.0,accept,unanimous_agreement
1471008213,5900,"oh, now i see at this commit why the member becomes non-const. consider using the utility `atomicuniquepointer` instead of a mutex.",0,0,0,0.9863042235374452,0.983233630657196,0.9914942979812622,0.0,accept,unanimous_agreement
1471009027,5900,adding a comment.,0,0,0,0.9801612496376038,0.9766945838928224,0.9923937320709229,0.0,accept,unanimous_agreement
1471013962,5900,looks indeed like it should.,0,0,0,0.9597281217575072,0.9843997955322266,0.95953106880188,0.0,accept,unanimous_agreement
1471017220,5900,or just `std::mem_fn`,0,0,0,0.9676121473312378,0.9917219281196594,0.9941593408584596,0.0,accept,unanimous_agreement
1471019626,5900,it seems you are reinventing the publisher utility and i don't know why.,0,-1,0,0.8668668270111084,0.5892760157585144,0.747840940952301,0.0,accept,majority_agreement
1471022902,5900,"i think `mpropagators` never gets size more than 1, so why a vector?",0,0,0,0.9673782587051392,0.9758775234222412,0.98532235622406,0.0,accept,unanimous_agreement
1471026000,5900,"... there is the call to `findtrack`, though, which is a member method. i haven't understood yet under what conditions it may cause an early return. making that method const, at least, is a no-brainer.",0,0,0,0.8014840483665466,0.9350149035453796,0.9795969724655152,0.0,accept,unanimous_agreement
1471046003,5900,"ok, found something better. coming up...",0,0,0,0.910507321357727,0.936850368976593,0.926198959350586,0.0,accept,unanimous_agreement
1471057959,5900,"i don't think an atomic would be helpful here, since it's not only just the reallocation of the object that must be synchronized. remember that comment in sp: [code block]",0,0,0,0.9788904786109924,0.9844600558280944,0.982299506664276,0.0,accept,unanimous_agreement
1471058961,5900,"it's outdated now, through the use of `observer`.",0,0,0,0.8853269219398499,0.9878793358802797,0.9898959398269652,0.0,accept,unanimous_agreement
1471074098,5900,"but there is just too much weirdness and reinvention going on, as i said. what i think you should do: make `clipinterface` inherit `observer::publisher ` (or maybe some distinct struct type `pitchratio` just containing a double). ~~a `using` declaration to make `publish()` public.~~ never mind, i think it's not needed ~~a pure virtual `dopublish(double)`.~~ ~~`wideclip` overrides that to do the work.~~",0,0,0,0.5407079458236694,0.7597915530204773,0.5920366644859314,0.0,accept,unanimous_agreement
1471080225,5900,"you may ignore most of a9752ac3a7431db60b6742de5ae9a5b5281ea104 and 250725b5876d32aa78c9114af86f0dff36d0fe24, as i did in a recent commit put in place almost exactly what you described. see, too, that this change is outdated.",0,0,0,0.9690565466880798,0.9909276962280272,0.988402783870697,0.0,accept,unanimous_agreement
1471087557,5900,"the constructor of `clipsegment` isn't passed a function that does subscription. it is just passed a reference to `observer::publisher `. that reference can be stored in `staffpadtimeandpitch::parameters`. then `staffpadtimeandpitch` in its constructor simply subscribes to the publisher, passing in that lambda, and holding the `subscription` object which is a sort of smart, weak pointer representing the connection between publisher and subscriber.",0,0,0,0.970407485961914,0.9926170706748962,0.9908343553543092,0.0,accept,unanimous_agreement
1471089889,5900,"there are multiple threads involved here, and that means some caution in the use of `observer`. creating and destroying subscriptions, or destroying the publisher before the subscription that it gave out, is safe so long as it is all in the main thread. publishing from other threads will be safe so long as the callback does not itself cause subscriptions to be created or destroyed. i think that applies.",0,0,0,0.9697722792625428,0.987488567829132,0.9871304631233216,0.0,accept,unanimous_agreement
1471093707,5900,where is publish called then?,0,0,0,0.9875680208206176,0.9914177656173706,0.9929406642913818,0.0,accept,unanimous_agreement
1471099637,5900,"i looked through this confusing stuff again, and now i see, ultimately it's in `waveclip::setsemitoneshift` so then, that can simply call the inherited `publish`",0,0,0,0.916066825389862,0.9666140079498292,0.9622538685798644,0.0,accept,unanimous_agreement
1471356772,5900,"incidentally, here it's the other way round: subscription creation and destruction is done on the audio thread ; publication on the main thread. just took a look at some of the observer implementation, couldn't see thread unsafety (but i haven't strained myself too much). also tried a worst-case scenario, with very fast subscription creation and destructions, concurrently with very fast publications. couldn't get the program to behave incorrectly, which is more evidence that i can take your word for it.",0,0,0,0.8986857533454895,0.8022955656051636,0.9685873985290528,0.0,accept,unanimous_agreement
1471400021,5900,that “inverse” pattern should be safe too. is there no way to lift the making and destroying of subscriptions to the main thread? shared and weak pointers manage the shared state in a thread safe way — but provided each thread uses different pointer objects. it is possible to have races in the use of the identical pointer object in two threads. don’t do that. observer uses weak pointers.,0,0,0,0.9180604219436646,0.9727166295051576,0.9923884272575378,0.0,accept,unanimous_agreement
1471400999,5900,the thread safety issue should be commented!,0,0,0,0.9729642868041992,0.9855456948280334,0.9872878789901732,0.0,accept,unanimous_agreement
1471536711,5900,will do.,0,0,0,0.9548023343086244,0.9864637851715088,0.9465230703353882,0.0,accept,unanimous_agreement
1808822922,7590,good lord finally,1,1,1,0.9663566946983336,0.9926059246063232,0.9917743802070618,1.0,accept,unanimous_agreement
1808833126,7590,it should probably just be `win`,0,0,0,0.9803091287612916,0.9926687479019164,0.9866770505905152,0.0,accept,unanimous_agreement
1808833935,7590,"while we are at it, would you mind adding cmakeuserpresets.json? see [a link] for au3 or we could do that within another pr",0,0,0,0.9689210057258606,0.9922728538513184,0.99347323179245,0.0,accept,unanimous_agreement
1808835820,7590,does this break anything on mac/lin?,0,0,0,0.9495958089828492,0.9762836694717408,0.9867807030677797,0.0,accept,unanimous_agreement
1808835918,7590,"i think there is no need to perform the building and installation itself, it is enough to just configure the project to generate .sln",0,0,0,0.9587560296058656,0.9715628623962402,0.980575442314148,0.0,accept,unanimous_agreement
1808838401,7590,should we hardcode vs version? i'm using 2022,0,0,0,0.9863944053649902,0.9777770042419434,0.9950163960456848,0.0,accept,unanimous_agreement
1808841644,7590,"developer - i think we need to think of another name, it’s not clear what it is and where it comes from i think we need to check the name of the cmake generator or something like this: vs_cmake_generator",0,0,0,0.9670658707618712,0.9521119594573976,0.9888005256652832,0.0,accept,unanimous_agreement
1808841948,7590,do we need it hardcoded here? i believe that it can be detected automatically.,0,0,0,0.9353718161582948,0.9888021945953368,0.9934355020523072,0.0,accept,unanimous_agreement
1808842616,7590,some files are missing newlines,0,0,0,0.9625350832939148,0.9276098012924194,0.9768449068069458,0.0,accept,unanimous_agreement
1808846359,7590,"i see that this is also used for vscode, then we still need to think about a good name.",0,0,0,0.9098610877990724,0.9631052017211914,0.9873442649841307,0.0,accept,unanimous_agreement
1808846682,7590,"does vscode not obey ""insert_final_newline"" for .editorconfig?",0,0,0,0.9723028540611268,0.9930942058563232,0.9944091439247132,0.0,accept,unanimous_agreement
1808851628,7590,"shouldn't we add ""synthwave '84"" theme with glow enabled to the list of recommendations? (jk)",0,0,0,0.9755222201347352,0.9931828379631042,0.9871079325675964,0.0,accept,unanimous_agreement
1809203492,7590,it would probably be better to use something like this.. ${env:qtdir},0,0,0,0.9801623821258544,0.9942641854286194,0.9899953603744508,0.0,accept,unanimous_agreement
1809204390,7590,better to use qtdir,0,0,0,0.97450590133667,0.9910441637039183,0.9909645318984984,0.0,accept,unanimous_agreement
1809206333,7590,developer.bat - i think it would be better to call it something like `make_sln.bat` or `generate_sln.bat`,0,0,0,0.979215681552887,0.9946157336235046,0.990984320640564,0.0,accept,unanimous_agreement
1810137039,7590,found that this is an internal name in vsсode,0,0,0,0.9879531860351562,0.9900215268135072,0.992668092250824,0.0,accept,unanimous_agreement
1810148634,7590,"as far as i can see, this is (c_cpp_properties.json) an automatically created file, it is better to add it to gitignore.",0,0,0,0.9873282313346864,0.9911625385284424,0.9933438301086426,0.0,accept,unanimous_agreement
1810223544,7590,"probably there should be not a build here, but an install. suggested that we can just do `cmake: install`, and not add a task file.",0,0,0,0.9883424639701844,0.9909342527389526,0.9910202622413636,0.0,accept,unanimous_agreement
1810226279,7590,"it is better to simply write in the instructions (and when trying to configure it, it is indicated) that us need to add qt to the path",0,0,0,0.9866318106651306,0.9929397106170654,0.9913839101791382,0.0,accept,unanimous_agreement
1810349169,7590,"you see, i missed that. will consider it for this pr.",1,0,0,0.9009525775909424,0.9711387157440186,0.962894082069397,0.0,accept,majority_agreement
1810378091,7590,"the proposed approach in this pr is to add an audacity-target post-build step to copy the executable to the install directory. if you just build audacity without building install first, it will copy it, it will be alone in its `install/bin`.",0,0,0,0.9878116250038148,0.9951177835464478,0.9939091205596924,0.0,accept,unanimous_agreement
1810387724,7590,"can we ensure a vs generator without specifying the version? i'd gladly remove this flag, but if i do, i don't know what ensures that it will pick a visual studio generator.",0,0,0,0.9635881185531616,0.8861880898475647,0.9867126941680908,0.0,accept,unanimous_agreement
1810408519,7590,"the only solution i've found to that is a bit complicated, but maybe worth using: [code block]",0,0,0,0.865265429019928,0.9192635416984558,0.9681206941604614,0.0,accept,unanimous_agreement
1810434420,7590,"i just realize that the `msvc` check is sufficient for this part of the configuration (configuring the debugging command correctly). this then leaves the `developer` flag to adding the post-build step to copy the executable to the install directory, which we can still discuss if we want this at all.",0,0,0,0.988801121711731,0.9872686862945556,0.9909147024154664,0.0,accept,unanimous_agreement
1810438749,7590,probably.,0,0,0,0.9542737007141112,0.9666392207145692,0.9442833065986632,0.0,accept,unanimous_agreement
1810442011,7590,"the `includepath`, adding the qtdir, isn't default and it's something i enjoy. once the file is created, i'm not sure it gets modified. i suggest we give it a try and re-assess if we see that it does and it becomes a nuisance.",0,1,0,0.6072185635566711,0.9775057435035706,0.6578311920166016,0.0,accept,majority_agreement
1810443773,7590,"we have this: [code block] are the missing newlines an issue, though?",0,0,0,0.9888216257095336,0.9935253858566284,0.9930216670036316,0.0,accept,unanimous_agreement
1810444917,7590,"we should recommend the uncrustify extension, though. will add.",0,0,0,0.9859586358070374,0.9919004440307616,0.9949475526809692,0.0,accept,unanimous_agreement
1810446260,7590,"if we decide to keep the copy step, let's name the flag something like: `optimized_deploy`",0,0,0,0.9866414070129396,0.9939723610877992,0.9933865666389464,0.0,accept,unanimous_agreement
1810446665,7590,i don't know. does it work well with doki-theme?,0,0,0,0.9630196690559388,0.604637086391449,0.9667843580245972,0.0,accept,unanimous_agreement
1810452407,7590,of course.,0,0,0,0.9671178460121156,0.981129229068756,0.9627540707588196,0.0,accept,unanimous_agreement
1810454891,7590,i believe we can add qt to the include path in our cmake files. although it's strange that i didn't need it in my example... maybe because i have qt in the path,0,0,0,0.906193196773529,0.9216696619987488,0.9733595252037048,0.0,accept,unanimous_agreement
1810482616,7590,"in fact, i think we can get rid of this entry altogether. i expect cmake will query the qtdir env variable by default, and we do expect contributors to have this set.",0,0,0,0.9851858019828796,0.9807301759719848,0.9911575317382812,0.0,accept,unanimous_agreement
1810504930,7590,"mh. for some reason that qml language server doesn't find the executable when i use `${env:qmldir}`. i have proof that my `${env:qmldir}` is set properly, so don't know what's wrong. anyway, the whole path should be made platform-independent - macos probably will the server executable in some other place. also, i haven't been able to configure the language server properly for my very machine. it doesn't manage to resolve the muse qml modules, maybe because it excludes the `_deps` directory? i'm not sure. for now i think i'll remove that extension recommendation as well as these configs. maybe someone else will have more success at some stage.",-1,-1,0,0.6035921573638916,0.7116589546203613,0.7423585653305054,-1.0,accept,majority_agreement
1810516412,7590,i agree. it's nostalgia: my previous company had it named that way. i also like the idea of a developer :bat:,1,1,1,0.9188555479049684,0.993179202079773,0.9864845871925354,1.0,accept,unanimous_agreement
1810517150,7590,generate_sln sounds good.,1,1,0,0.8164212703704834,0.7661056518554688,0.56703782081604,1.0,accept,majority_agreement
1810527189,7590,"this works because of the post-build task in the cmakelists that gets the executable copied to the install dir. having `install` as pre-launch task has for consequence that each time you launch after having modified the source code, the install target gets executed and, even if it's not the first time, just the check that everything (except audacity.exe) is up-to-date takes at least a couple of seconds. on the other hand, for fast onboarding, what you suggest would be easier: the user wouldn't have to build the install target manually once. but we can propose two launch tasks: the one you suggest and make it the default one, and for power users, the present one.",0,0,0,0.9732551574707032,0.9852526783943176,0.9901927709579468,0.0,accept,unanimous_agreement
1810556698,7590,"i'm confused. now it's super fast for me even with install. ok for your proposal, then.",-1,-1,-1,0.8875473141670227,0.9796964526176452,0.7415468692779541,-1.0,accept,unanimous_agreement
1810573543,7590,"consequently with [a link], i'll remove.",0,0,0,0.9852198362350464,0.9875768423080444,0.9927813410758972,0.0,accept,unanimous_agreement
1810576580,7590,"sorry, no, it still is needed for visual studio, which doesn't have pre-launch tasks afaik.",-1,-1,-1,0.9823163151741028,0.9909433722496032,0.9689314961433412,-1.0,accept,unanimous_agreement
1810581591,7590,... but then it's not so much a matter of optimizing deployment anymore. `copy_to_install` ? doesn't say everything but it gives a good clue.,0,0,0,0.9374332427978516,0.8989052176475525,0.9730087518692015,0.0,accept,unanimous_agreement
1810583952,7590,"... or maybe we can just add that post-build step just if `msvc`. won't hurt ci anyway, as it uses ninja. then no need for that extra flag.",0,0,0,0.9572756290435792,0.9406615495681764,0.9788690209388732,0.0,accept,unanimous_agreement
1810596898,7590,`developer.bat` -> `generate_sln.bat`,0,0,0,0.984975516796112,0.9918360114097596,0.9917827844619752,0.0,accept,unanimous_agreement
1810764230,7590,"i see, we can give it a shot. one thing though, it should be `%programfiles(x86)%` instead of `c:\program files (x86)`",0,0,0,0.966404914855957,0.9300471544265748,0.95872962474823,0.0,accept,unanimous_agreement
1810784241,7590,"it's not that important, it's just the way it's done historically. and without a newline, some command line tools can misbehave. for example if you `cat file` the prompt will be printed on the same line as the last line from the file",0,0,0,0.6254938244819641,0.9254526495933532,0.9648249745368958,0.0,accept,unanimous_agreement
1810789371,7590,`copy_to_install` - acceptable for me,0,0,0,0.982569456100464,0.9889966249465942,0.9896005988121032,0.0,accept,unanimous_agreement
1810803346,7590,unfortunately not :(,-1,-1,-1,0.9874508380889891,0.9936582446098328,0.9938964247703552,-1.0,accept,unanimous_agreement
686270150,1377,"this enumeration persists with the attribute name ""linked"" both before and after your changes. so consider the problems of downgrade (3.1 file opened in 3.0.x) and the opposite problem of upgrade. downgrade is all right because any non-zero value in the file will become boolean ""true"" so that preserves whether the track is a left channel of a pair, or not. upgrade is more complicated. as it is written now, stereo tracks saved in 3.0.x always load as ""group"" meaning in the (usual?) case of clips all aligned between tracks, drag bars will appear on the right, because boolean true was saved and is now interpreted as 1. you could swap group and aligned, but that only makes the opposite problem in the (less usual?) case that a file was saved with non-aligned clips, which should show right channel drag bars but will not. the complete solution? make 1 a reserved ""legacy"" value. enlarge track::linkconsistencycheck() so it detects numerically whether clips correspond between channels, and change ""legacy"" to group or aligned. and of course linkconsistencycheck must become a virtual function so track does not depend on wavetrack, and the override for wavetrack must also call-through to the base class method.",0,0,0,0.97123521566391,0.9926965236663818,0.986567199230194,0.0,accept,unanimous_agreement
686275315,1377,"will the linktype enumeration need more values in future versions of audacity? maybe. so consider, what if we are loading a future file, and there is a value not within the existing linktype enumeration of audacity 3.1? the future value must be corrected to one of the known values, or loading the file should abort. if aborting isn't acceptable, what's the best guess we can make now about future designs we haven't done yet? a crazy question maybe, but we have to decide something now. and i would say: assume the unknown value can map to ""aligned"" which is the expected usual case. (what if the guess is wrong? then audacity 3.1 ought to have some way to let the user correct the situation, changing incorrectly ""aligned"" tracks to ""grouped"" with something in the drop-down menu of the track control panel. is that in the scope of this issue? no, so don't act on this suggestion yet. but we should argue it in the next design review.)",0,0,0,0.9031310081481934,0.6939773559570312,0.8106690645217896,0.0,accept,unanimous_agreement
686333838,1377,"it's quite strange solution i would say, why do you expect that file loaded from old project and having corresponding clip borders should be without affordances on the right channel (remember that with affordances both cases are valid)? why not we remove them when clips are aligned at runtime then, or check this condition after merging tracks? seems like it's another question for ux experts. i don't like idea of linkconsistencycheck changing object state at all, now it's just make state somewhat cosistent, i can understand that, but i don't see any reason to prefer 'aligned' over 'grouped'",-1,-1,-1,0.9172217845916748,0.91635262966156,0.9683115482330322,-1.0,accept,unanimous_agreement
686344936,1377,"i didn't see that enum (or boolean value in the past) beeing used somewhere except wavetrack context actually. and i don't see any sense in linking label tracks for example (maybe we would find use for this in future, but that's a speculation). and note that value is loaded/stored in wavetrack but belongs to the track class. that's why i don't like modifying meaning of existing entities :) but make sense to me, and... 'aligned' is more strict condition compared to 'grouped', and 'grouped' is stricter than 'none', and who knows which type of link we would decide to have in future (maybe we'll remove it all), but droping to 'none' is the safest option here i think. also there is a version check exist for project files",1,1,1,0.915881097316742,0.9797248840332032,0.9656860828399658,1.0,accept,unanimous_agreement
686397658,1377,"if a file is loaded from an old project, and all clip borders do correspond, as would be usual -- do you think it is better there are affordances on the right? wouldn't the user instead want them removed? but then, how could they be removed, once they are present? ""why don't we remove them when clips are aligned at runtime then, or check this condition after merging tracks?"" maybe that won't be done automatically, but maybe the choice to do it if possible, should also be given to the user. for instance, what happens if you record a stereo track, split it, do nothing else (or do edits that don't affect clip boundaries), then join channels again? affordances enter the right track, and can never go away again. i think that is a gap in the design. i think the problem of writing the function that will detect that affordances can be removed is a problem that will need to be solved.",0,0,0,0.9786294102668762,0.9874803423881532,0.9729604125022888,0.0,accept,unanimous_agreement
686399770,1377,"there is a version check, but audacity has very rarely made incompatible changes in version, and i don't know yet that we will decide to do so. maybe you have the better argument, that if there is an unknonwn future value for this field read into version 3.1 -- then the worst assumptions should be made, and it should be corrected to none not aligned. if that is wrong, let the user join mono channels back into stereo. (ah, but again -- should they have a choice to make the stereo tracks aligned not simply grouped?) but the larger point remains: sometihing must be done in 3.1 at load time, to be sure that the value read from the file maps to some valid value of the small enumeration of three values. that isn't done yet here.",0,0,0,0.7948200106620789,0.773144006729126,0.9210638999938964,0.0,accept,unanimous_agreement
686402373,1377,"how do you like this idea instead: the enumeration does have four values, not three. the new values are 2 and 3. old files may have the value 1. linkconsistencycheck will correct 1 to 2 or 3. it can simply correct 1 always to group (which is now 2). but if after testing we decide that a more complicated procedure is needed to correct the value -- then we will do that, and we have already prepared by reserving 1 for the old, un-corrected value, distinct from the two new values.",0,0,0,0.876219630241394,0.9804134964942932,0.9812920093536376,0.0,accept,unanimous_agreement
686408968,1377,"lines were permuted in this header file, making the diff bigger than necessary and a little more difficult to review.",0,0,0,0.9819425940513612,0.8339499831199646,0.9656513929367064,0.0,accept,unanimous_agreement
686411812,1377,"i explained that previous work aimed to remove the assumption that the number of channels in a group of tracks is at most two in as many places as possible. these changes suggest, unfortunately, a regression of that work which goes beyond what i expected to happen. you may have a justification. what is it?",0,0,0,0.7745211720466614,0.7623481750488281,0.5631916522979736,0.0,accept,unanimous_agreement
686417274,1377,"everywhere, groupchannels is eliminated and replaced instead with linkchannels or unlinkchannels. i think this is unnecessary, and again, a regression of the previous work at possible generalization for the future to more than two channels.",0,0,0,0.8588414192199707,0.98772931098938,0.9862858653068542,0.0,accept,unanimous_agreement
686419229,1377,haslinkedtrack() replaces getlinked() when used as just a boolean. i explained that i made sure getlinked() was a private function when i rewrote all the old code. haslinkedtrack() should also be private. i checked that the code still compiles if it is.,0,0,0,0.9871677756309508,0.9895864725112916,0.993043065071106,0.0,accept,unanimous_agreement
686421552,1377,"rather than eliminating groupchannels and replacing it with two functions -- preserve groupchannels. keep the argument for number of channels. the third argument was never non-default -- very well, remove it, but replace with the new argument that specifies whether to align or not, in the case of more than one channel. then write the body of groupchannels on the assumption that the number of channels to be grouped is not necessarily two or less.",0,0,0,0.9849307537078856,0.98850280046463,0.9920257925987244,0.0,accept,unanimous_agreement
686423041,1377,note that this was one of only two places where groupchannels might be called with more than two -- importing.,0,0,0,0.987294852733612,0.9918549060821532,0.9917962551116944,0.0,accept,unanimous_agreement
686424283,1377,note that this is the second of only two places where groupchannels could be called with more than two channels -- recording. there is in fact not yet support for more-than-stereo tracks. calling groupchannels with more than two made all mono tracks -- an implementation detail that could be changed in the future. but it's the right abstraction to have these places that make possibly more-than-stereo tracks -- and we leave it to the details of the tracklist implementation to decide how to deal with that.,0,0,0,0.98042893409729,0.9850144982337952,0.9878540635108948,0.0,accept,unanimous_agreement
686466414,1377,"i see a minor consequence, that if a track ever needs an affordance, but later no longer needs it (as when swapping stereo channels) -- then the affordance control is not deleted until the track is. not very important.",0,0,0,0.5889970660209656,0.7946492433547974,0.9780434370040894,0.0,accept,unanimous_agreement
686466695,1377,"not necessary for this issue, but good, that you take the unnecessary pointer to an affordance out of the base class trackview and put it only in the subclasses that need it.",0,0,0,0.963468611240387,0.94082772731781,0.6552155613899231,0.0,accept,unanimous_agreement
686472608,1377,this is private. keep it so. tracklist::findleader() is for public use.,0,0,0,0.9786085486412048,0.9894240498542786,0.9954108595848083,0.0,accept,unanimous_agreement
686473027,1377,"replace ""previous one"" with ""its leader"" and this comment is not objectionable. but i still strongly disagree with the unnecessary disturbance of the places that called groupchannels().",-1,-1,0,0.6827186942100525,0.9102303385734558,0.5713995695114136,-1.0,accept,majority_agreement
686475659,1377,"really, no. i don't like this part. leave as it was: one function, not two functions, with an interface equipped to make channel groups of any size, even though this isn't yet fully implemented. just add an argument for ""alignment"" or not. update function comments to say ""alignment"" has no effect when there is just one channel; and that grouping past two is not necessarily implemented yet, but the interface is presented.",-1,-1,-1,0.9755014181137084,0.8704525828361511,0.9910194277763368,-1.0,accept,unanimous_agreement
686479785,1377,i do like the name changes making this line read less strangely. that's all for reviewing this pr.,1,1,1,0.6035242676734924,0.9428568482398988,0.871516227722168,1.0,accept,unanimous_agreement
686724799,1377,"they can't be removed ![a link] i think that it's safest assumption (keep things as they were before) well maybe, but that was not declared in the scope of work for this task",0,0,0,0.9452266693115234,0.9778349995613098,0.8554933667182922,0.0,accept,unanimous_agreement
686745202,1377,"i was studying what groupchannel does for multi-channel tracks and came to conclusion that it does almost nothing: beeing called for multi-channel tracks it'll just set channel type to mono (as it was before) and will set the link to false (as it was before). the result of groupchannels is a set of ungrouped channels, which is a bit misleading i think, and will lead to a false conclusions about the behaviour in future (we don't know yet how 5.1 channels would be grouped, for example). maybe that's another reason to have a stereowavetrack type, then grouping and checks for leads will become redundant? but the consequences would have their own downsides surely consider a new declaration: `void groupchannels(track& first, int nchannels, linktype linktype, bool resetchannels = false);` it looks a bit overloaded with parameters, and possibly incompotible states. this method tries to deduce things inside that are obvious from the context where grouping or ungrouping is needed.",0,0,0,0.7518026828765869,0.8218135833740234,0.802273690700531,0.0,accept,unanimous_agreement
686760802,1377,"i still disapprove what you did. you must consider the implementation and also the interface. there is what groupchannels does now, which does not yet implement multi-channel tracks, because we don't yet have a data representation for them. however there is all the other code using the abstractions provided by track and tracklist, that are programmed to an interface anticipating possible multi-channel implementation in the future. it required a lot of my work in previous years to make that so -- that the assumption of at-most-stereo tracks is made in very few places. that should remain so. please change the interface of groupchannels only to specify alignment or not. changing that function into two functions that can only allow for making either mono and stereo tracks is not a change in behavior now, but it is not an improvement of the interface.",-1,-1,-1,0.4859981536865234,0.8872452974319458,0.9383137226104736,-1.0,accept,unanimous_agreement
686824303,1377,i do agree that you can simplify away the resetchannels argument which was never non-default.,0,0,0,0.9773572087287904,0.985198438167572,0.9800991415977478,0.0,accept,unanimous_agreement
686841180,1377,"i have a suspicion that the scope may enlarge after all to include this after some more testing, but i admit this is trying to read designers' minds right now.",-1,0,-1,0.8454288244247437,0.5839403867721558,0.555336058139801,-1.0,accept,majority_agreement
686965164,1377,"we will need to make changes to groupchannels then (maybe multiple times), and this will affect each piece of the code which calls this method, and make sure that we don't break anything unintentionally: to add a behaviour which will handle grouping for more than two channels, we'll need to interfere the code that does grouping for two channels.",0,0,0,0.9659166932106018,0.9784178137779236,0.9916844367980956,0.0,accept,unanimous_agreement
692611085,1377,spelling in commit comment: *hiding,0,0,0,0.8860959410667419,0.9821621775627136,0.987966001033783,0.0,accept,unanimous_agreement
692611922,1377,"at least this small change might be better: use sortedcliparray() not getclips() because clips in a wavetrack are not necessarily stored in sorted order by start time. (i don't really like that, and maybe wavetrack should be rewritten instead to guarantee the invariant of sortedness of clips. but, it's not so yet.)",-1,0,-1,0.5515339374542236,0.9670530557632446,0.6895931363105774,-1.0,accept,majority_agreement
692612707,1377,"as mentioned, you might instead assume the two arrays of clips are already sorted.",0,0,0,0.9874892830848694,0.992082953453064,0.9921969175338744,0.0,accept,unanimous_agreement
692613911,1377,"and then instead, you might use std::mismatch on the two ranges of pointers, and the appropriate lambda, expressing what you mean very simply.",0,0,0,0.9738415479660034,0.9864588379859924,0.9940061569213868,0.0,accept,unanimous_agreement
692614089,1377,"""existence""",0,0,0,0.980703830718994,0.9657701253890992,0.9911365509033204,0.0,accept,unanimous_agreement
692616426,1377,"wait, is it correct to return false whenever a wavetrack is last, or not followed by another wave track? no -- you should return false only if the track is mono, link type 0.",0,0,0,0.9882012009620668,0.9733229279518129,0.9932572841644288,0.0,accept,unanimous_agreement
692618929,1377,"this doesn't cause a project to fail to load in projectfilemanager.cpp. still it should be fixed, in case the return value needs reuse somewhere else.",0,0,0,0.9852713346481324,0.985071063041687,0.9914052486419678,0.0,accept,unanimous_agreement
692625828,1377,"one more matter: you still need the loading procedure to defend against unexpected values for ""linked"" that are not within the enumeration. you can map all values outside { 0, 1, 2, 3 } to grouped (which means, making the least assumptions about non-mono tracks.)",0,0,0,0.985499620437622,0.98796147108078,0.99192214012146,0.0,accept,unanimous_agreement
692783640,1377,:/ thanks for spotting this!,-1,1,-1,0.8737276792526245,0.9793820381164552,0.9941232800483704,-1.0,accept,majority_agreement
1293713001,5027,love the naming :-),1,1,1,0.9909706115722656,0.9909165501594543,0.9928200840950012,1.0,accept,unanimous_agreement
1293895763,5027,still reviewing?,0,0,0,0.9727964997291564,0.9722201228141784,0.9873849153518676,0.0,accept,unanimous_agreement
1295626701,5027,`mclips` are not necessarily in order. i'd expect `getinterval` to be consistent with the visual experience. why not sorting first?,0,0,0,0.9717840552330016,0.9798550009727478,0.9830300211906432,0.0,accept,unanimous_agreement
1295629567,5027,is `right->mclips.size() == mclips.size()` not necessarily true?,0,0,0,0.981115698814392,0.9935843348503112,0.993274450302124,0.0,accept,unanimous_agreement
1295659526,5027,"`gettrack().mclips`, similarly to `gettrack().intervals()`, is destined to return possibly stereo data. here we are in a single-channel context. wouldn't it spare future changes if we used `wavechannel::intervals()` right away ?",0,0,0,0.9847851991653442,0.9942008256912231,0.9898165464401244,0.0,accept,unanimous_agreement
1295687008,5027,`waveclip` is in practice still mono but soon to become stereo-capable. it'd be wrong for a `wavechannelinterval` to return data that belongs to another channel. are there plans to have a mono api ?,0,0,0,0.9819213151931764,0.9444361925125122,0.9863877296447754,0.0,accept,unanimous_agreement
1295709385,5027,renaming this `getchannelrms` would make it less confusing.,0,0,0,0.9459605813026428,0.980383574962616,0.9879827499389648,0.0,accept,unanimous_agreement
1295713082,5027,not used (and hence `stepsperwindow` too),0,0,0,0.9802811741828918,0.9910037517547609,0.9902976155281068,0.0,accept,unanimous_agreement
1295716847,5027,here - some british spelling ;),1,1,0,0.5959230065345764,0.9935179948806764,0.989227294921875,1.0,accept,majority_agreement
1295721226,5027,does this really cast to `false` ? i'd rather see `false`.,0,0,0,0.9593497514724731,0.9780341982841492,0.9914429783821106,0.0,accept,unanimous_agreement
1295729238,5027,hm. `effectrepeat` seems unused. are we aware of that ?,0,0,0,0.9682494401931764,0.8816033005714417,0.9857419729232788,0.0,accept,unanimous_agreement
1295732381,5027,"consider placing these four lines in a scope, so as to reassure the reader that `iter` is only used for that.",0,0,0,0.9837945103645324,0.9940107464790344,0.9911132454872132,0.0,accept,unanimous_agreement
1295736925,5027,interesting. here's an effect that requires joint-stereo processing. but it doesn't care about clip boundaries ...,-1,-1,0,0.4972165524959564,0.5281144976615906,0.5947318077087402,-1.0,accept,majority_agreement
1295824055,5027,"so calling `setselected` on each channel was redundant because `tracks.any ()` already returns all tracks, leader or not?",0,0,0,0.9837401509284972,0.9940587282180786,0.9904338121414183,0.0,accept,unanimous_agreement
1295837212,5027,"this nested iteration could well have been interval-then-channel, which is what the code before this change was doing. any particular reason why you chose this order?",0,0,0,0.9842767715454102,0.9730417132377625,0.990074336528778,0.0,accept,unanimous_agreement
1295927271,5027,what's the track shifter?,0,0,0,0.9853476285934448,0.9906359314918518,0.9944096207618712,0.0,accept,unanimous_agreement
1295971437,5027,"`wavetrack` will not be a `wavechannel` anymore, is that correct ?",0,0,0,0.984036386013031,0.9935910701751708,0.993558704853058,0.0,accept,unanimous_agreement
1296059458,5027,"it might be nicer that way, but for now, the correctness of these transformations does not depend on sorting. sorting with each access may be too expensive and keeping sortedness as an invariant would need too much other review to be sure of its completeness.",0,0,0,0.9566114544868468,0.9737011790275574,0.9818934202194214,0.0,accept,unanimous_agreement
1296063083,5027,"wherever clips are iterated before, they will be iterated in the same sequence through this new layer of api. that is more conservative, and one less source of surprising behavior changes.",0,0,0,0.9002904295921326,0.97847580909729,0.9896809458732604,0.0,accept,unanimous_agreement
1296068707,5027,"it is still possible to make such tracks, but consider it “undefined behavior” as this huge code restructuring is happening in stages. i have told qa not to test such cases and not to worry about preserving behavior. ultimately, there will be just one wavetrack with “wide” clips each storing a vector of sequences, possibly more than one. no longer any correspondence of waveclips between two wavetracks.",0,0,0,0.9559807777404784,0.9777227640151978,0.9762108325958252,0.0,accept,unanimous_agreement
1296074080,5027,maybe. indeed the next pr changes this again.,0,0,0,0.9797882437705994,0.9880913496017456,0.9786673188209534,0.0,accept,unanimous_agreement
1296082790,5027,or rather the next planned pr,0,0,0,0.9807158708572388,0.988267719745636,0.9920058846473694,0.0,accept,unanimous_agreement
1296091712,5027,wavechannelinterval is the mono api for the rest of the world that uses wavetrack. the next draft pr gives it a getfloats member function and eliminates some calls of getclip. look ahead at it if you wish.,0,0,0,0.9796302318572998,0.9875051975250244,0.9920618534088136,0.0,accept,unanimous_agreement
1296093308,5027,i thought there was already too much diff but i might add a commit to rename that,0,0,0,0.9795072674751282,0.9360514879226683,0.9879327416419984,0.0,accept,unanimous_agreement
1296095512,5027,default construction of built in integral types is always the zero,0,0,0,0.9847516417503356,0.9908533692359924,0.992444097995758,0.0,accept,unanimous_agreement
1296098334,5027,think again. each effect class has a header file that isn’t included anywhere else but its implementation. so how do any of them work? put a breakpoint in the constructor and figure it out.,0,0,0,0.9809715151786804,0.9378719329833984,0.9798397421836852,0.0,accept,unanimous_agreement
1296106629,5027,"there is post processing to restore clip boundaries, remapped by the time stretch. the logic for this is unfortunately replicated in sbsmseffect, nyquist, and eq rather than having a unified implementation applied to all effects. i became aware of this problem in other refactoring but decided not to address it. the scope of the restructuring is already big enough.",0,0,0,0.8940134644508362,0.9882213473320008,0.7703020572662354,0.0,accept,unanimous_agreement
1296110266,5027,see the finalize member function,0,0,0,0.986996054649353,0.9915177226066588,0.9952512979507446,0.0,accept,unanimous_agreement
1296114220,5027,"the selected boolean was in track but is now instead in the channel group info structure. this was accomplished much earlier in this release cycle. but vitaly’s great import export refactoring, which i never did review completely, developed somewhat independently of my work and so it reintroduced one of the unnecessary loops that i had eliminated.",0,0,0,0.8471580147743225,0.9239855408668518,0.9844914078712464,0.0,accept,unanimous_agreement
1296117056,5027,"track names were another thing formerly duplicated in channels of a stereo track. i eliminated the duplicate data and the need to keep channels consistent. likewise rate, gain, pan. things really to be associated with the stereo track as a whole, not with one channel of it.",0,0,0,0.9727368354797364,0.984512746334076,0.98981374502182,0.0,accept,unanimous_agreement
1296125573,5027,code before this change was certainly not iterating interval-major. i don’t understand you.,0,-1,0,0.5502413511276245,0.7883409261703491,0.6015233397483826,0.0,accept,majority_agreement
1296129365,5027,a thing involved in implementing drags of clips but also of midi track data in other subclasses of the abstract base. also movement of labels. there are certain menu commands that you can bind to keystrokes for shifting track data left and right. cares a lot about maintaining this non graphical ui.,1,-1,0,0.4829033613204956,0.7581679821014404,0.9730206727981568,,review,no_majority_disagreement
1296132754,5027,in future it will contain wavechannels and not be a wavechannel. but things are transitioning to that in stages.,0,0,0,0.9770711064338684,0.9834359288215636,0.9889606833457948,0.0,accept,unanimous_agreement
1296141150,5027,you may remember the other recent work to disallow mismatch of rates across channels.,0,0,0,0.9864882826805116,0.9870684146881104,0.9909866452217102,0.0,accept,unanimous_agreement
1296895613,5027,"all makes sense, thanks.",1,1,1,0.8375046849250793,0.8010486364364624,0.5994883179664612,1.0,accept,unanimous_agreement
1296912289,5027,"ok, got confused by the looks of it and forgetting that `track` itself really just is a channel (so far).",-1,0,0,0.778576135635376,0.5348928570747375,0.6458847522735596,0.0,accept,majority_agreement
1499188139,5965,what is this for?,0,0,0,0.9697429537773132,0.9780064821243286,0.9856045246124268,0.0,accept,unanimous_agreement
1499541354,5965,the change on this particular line isn't needed.,0,0,0,0.9828472137451172,0.9687531590461732,0.9872032999992372,0.0,accept,unanimous_agreement
1499543595,5965,same here (for the sake of clarity),0,0,0,0.9778832197189332,0.9798256754875184,0.9925588369369508,0.0,accept,unanimous_agreement
1500375041,5965,"i missed to update that comment in the pitch-shift pr, you may want to complete it.",0,0,0,0.9174898862838744,0.9868015050888062,0.9893240332603456,0.0,accept,unanimous_agreement
1500392924,5965,"it should be the other way round, shouldn't it? namely the `const` method has the implementation, and the non-const one const-casts. otherwise there is no guarantee that your const method really doesn't modify your object. i tried it, to make sure i wasn't overlooking something, you may copy-paste: [code block]",0,0,0,0.9804583191871644,0.9394562840461732,0.9910467267036438,0.0,accept,unanimous_agreement
1500401327,5965,"does the use of a shared pointer mean that note intervals may survive a note track? if we are sure it's not, using a `const notetrack&` would convey this information (and be more economic).",0,0,0,0.9845481514930724,0.9925192594528198,0.9905717372894288,0.0,accept,unanimous_agreement
1500428400,5965,mistakenly added,0,0,0,0.7536804676055908,0.5444884300231934,0.6670162677764893,0.0,accept,unanimous_agreement
1500429705,5965,i was thinking of moving it to a nonmember function in wavetrackutilities,0,0,0,0.9763537645339966,0.9677547216415404,0.9904484152793884,0.0,accept,unanimous_agreement
1500429975,5965,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1500499022,5965,"this crashes. `iter` must not outlive the interval created by `rightmostornewclip`. looking for other places that use this faulty pattern, but a solution that prevents compilation of these would of course be ideal.",0,0,0,0.5452705025672913,0.8780931234359741,0.9516538381576538,0.0,accept,unanimous_agreement
1500516917,5965,"i'm thinking that if `channelgroup::intervaliterator ::mpgroup` were a weak pointer rather than a naked pointer, then [code block] at least would return a nullptr, not garbage, and this could be checked by the user. if the user doesn't do the check, we still have a crash, but at least it could help debugging?",0,0,0,0.9743091464042664,0.9877918362617492,0.9828716516494752,0.0,accept,unanimous_agreement
1500535295,5965,couldn't find another usage that might have this problem.,0,0,0,0.6267931461334229,0.9601662755012512,0.8714714646339417,0.0,accept,unanimous_agreement
1500594103,5965,`pright` is not used anymore.,0,0,0,0.9586597084999084,0.9870347380638124,0.992667019367218,0.0,accept,unanimous_agreement
1500613043,5965,"i remember from your explanation yesterday that you now needed to split the cloning implementation in two, sort of, but i can't remember why, if you could help me remember and understand this change.",0,0,0,0.962862491607666,0.9672279953956604,0.9778131246566772,0.0,accept,unanimous_agreement
1500714591,5965,what steps exactly reproduce the crash?,0,0,0,0.977676808834076,0.9812430739402772,0.9902349710464478,0.0,accept,unanimous_agreement
1500995046,5965,avoids violating some `isleader()` assertions.,0,0,0,0.918343424797058,0.975933849811554,0.9795035123825072,0.0,accept,unanimous_agreement
1500996235,5965,"put wave tracks into the temporary tracklist objects before doing other things with them, while they are still not yet wide tracks.",0,0,0,0.9802827835083008,0.9824641346931458,0.9926389455795288,0.0,accept,unanimous_agreement
1501217444,5965,"i don't understand -- delete the comment? or complete it, how? or you can do that as you will in master.",0,0,0,0.9594472050666808,0.946131706237793,0.9257528781890868,0.0,accept,unanimous_agreement
1501221580,5965,"i don't really agree. it is not too hard by inspection of the non-const function to see that it doesn't change any data structure directly, but just exposes non-const pointers. this pattern of the const calling the non-const with a cast is a common enough idiom. the total lines of code is less as i did it.",0,0,0,0.8975191712379456,0.8710619807243347,0.9171271324157716,0.0,accept,unanimous_agreement
1501224266,5965,"i like it as i wrote it. less is assumed about lifetimes of things this way. maybe intervals would survive. i had reasons to rewrite wavetrack::interval to hold shared pointers, not references. but i admit, there, the pointers are to waveclip objects, not the track.",1,1,1,0.9301691055297852,0.7272985577583313,0.7556584477424622,1.0,accept,unanimous_agreement
1501224673,5965,"never mind, i understand the problem, which happened not to crash on the debug macos build, but that was an ""accident.""",0,0,0,0.853830873966217,0.6066682934761047,0.954293131828308,0.0,accept,unanimous_agreement
1501224732,5965,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
1502304287,5965,do the const-cast in the direction i propose and no inspection is needed anymore but that of the const-cast of the return type. then the real implementation may grow and there still won't be a need for inspection. your arguments not to apply this suggestion aren't solid.,0,0,0,0.5406330823898315,0.9639691710472108,0.919774055480957,0.0,accept,unanimous_agreement
1502440641,5965,no.,0,0,0,0.8795708417892456,0.9381861686706544,0.9730188846588136,0.0,accept,unanimous_agreement
1505645434,5965,"the reparenting is going to happen on the pre-condition that `index < mattachments.size() - 1`, which means that, if `mattachments.size() == 2`, calling `erase(parent, 0)` will reparent the remaining attachment but not `erase(parent, 1)`. i still don't understand why reparenting is necessary, but this looks worth being pointed out.",0,0,0,0.980087161064148,0.9888346791267396,0.9786609411239624,0.0,accept,unanimous_agreement
1505769902,5965,not used,0,0,0,0.9469820857048036,0.9175628423690796,0.9867091178894044,0.0,accept,unanimous_agreement
1505784110,5965,shouldn't the modification `this->setlinktype(linktype::none);` be undone here?,0,0,0,0.984122633934021,0.9947668313980104,0.9944671392440796,0.0,accept,unanimous_agreement
1505796220,5965,"great to see these gone! i was expecting this commit to justify the previous one, a67b7aded083eea4a3fbdfb455e95801e49a60f6, but does it, actually?",1,1,1,0.9901031255722046,0.9898569583892822,0.9961887001991272,1.0,accept,unanimous_agreement
1506354952,5965,it is intentionally not stated as a precondition. the idea of reparenting is that each attachment is informed when its numerical slot in the array changes. there is no change for those before `index`.,0,0,0,0.9843463897705078,0.9915958046913148,0.993871808052063,0.0,accept,unanimous_agreement
1506358843,5965,"precisely not! the tentative stereo channel pair (as indicated by the ""leader"" attribute) is discovered to be ineligible to merge and so two mono tracks remain.",0,0,0,0.957307517528534,0.9679009914398192,0.9836958646774292,0.0,accept,unanimous_agreement
1506360836,5965,"yes, it simplified the job, avoiding even more const-casting in wavetrack.cpp",0,0,0,0.97929447889328,0.94968181848526,0.9898659586906432,0.0,accept,unanimous_agreement
1512621233,5965,"ouch, of course ...",-1,0,0,0.9753752946853638,0.667338490486145,0.9395157098770142,0.0,accept,majority_agreement
847708694,2801,"the steps aren't exactly as i described before, but that is all right. did you verify that each step in the transformation preserves the persistency of settings? maybe the second and fourth steps could be combined as the third step of three. because you never construct the validator in the second commit -- it isn't necessary to make msettings a reference and then change it to a value in the last step.",0,0,0,0.984764277935028,0.9913007616996764,0.9846715331077576,0.0,accept,unanimous_agreement
847709728,2801,"my only objection is that this assignment to effectecho::validator::msettings is not needed, because it was already done in the construction of it. really the settings argument of this function isn't needed any more.",0,0,0,0.6403898000717163,0.9825992584228516,0.9645835757255554,0.0,accept,unanimous_agreement
848158592,2801,"i tried verifying persistency of settings. it happens only at the last step. in our previous discussion i noted that it did not happen in the first step and you said it was maybe not worth fixing, but i could at least try to fix it in the 2nd and 3rd steps. i must be sure that i understood you right: you are suggesting that i could combine step 2 and 4 into a 3rd step; the pre-existing 3rd step would then become the second. is that correct? i modified the second commit so to have msettings a value right from the start (will be observable in the next force-push)",0,0,0,0.9120919108390808,0.939857006072998,0.965654194355011,0.0,accept,unanimous_agreement
848219269,2801,that's right! the correction of this will be visible in the next force-push.,0,1,0,0.9156016707420348,0.764152467250824,0.6881181597709656,0.0,accept,majority_agreement
848328331,2801,i still see the unnecessary assignment to msettings.,0,0,0,0.8352138996124268,0.6025965809822083,0.7491354942321777,0.0,accept,unanimous_agreement
848381334,2801,"did you look at the latest force-push? there is an assignment `msettings = getsettings(access.get());` in `effectecho::populateorexchange` only at intermediate steps, but i guess that it is needed. in the last step there is no such assignment, in either `effectecho::populateorexchange` or `effectecho::validator::populateorexchange`",0,0,0,0.9847715497016908,0.995005428791046,0.9935666918754578,0.0,accept,unanimous_agreement
850310212,2801,i reverse my previous comment at this line. do not put the validator into its final form at this commit. make msettings a reference at this step. change it to no reference only at the last step.,0,0,0,0.9746257662773132,0.980562686920166,0.99524986743927,0.0,accept,unanimous_agreement
850310889,2801,do not add these lines in the second commit. only at the last commit.,0,0,0,0.9513912796974182,0.9897443652153016,0.9941285848617554,0.0,accept,unanimous_agreement
850312227,2801,again add this only at the last commit. getsettings should not be available until then. the point where the echo settings move out of the effect and i to effectsettings is only then.,0,0,0,0.9872788190841676,0.9898303151130676,0.9950838685035706,0.0,accept,unanimous_agreement
850312986,2801,use effectinstancewithsamplerate to simplify. remove the member function and variable for msamplerate. just inherit them.,0,0,0,0.987970769405365,0.9941798448562622,0.994466245174408,0.0,accept,unanimous_agreement
850313597,2801,settings is an unnecessary variable name,0,0,0,0.9481528401374816,0.7534410953521729,0.924799144268036,0.0,accept,unanimous_agreement
850314912,2801,"do not name and the settings argument in step 3. add that only at step 4. and step 3, static_cast mprocessor to effectecho and use its msettings. at step 4, remove those lines, as you must to compile without the msettings member. only then use the arguments.",0,0,0,0.9869895577430724,0.992918074131012,0.995294749736786,0.0,accept,unanimous_agreement
850315378,2801,ok this is now what i expect for step 3.,0,0,0,0.9766232967376708,0.9751448035240172,0.9848687648773192,0.0,accept,unanimous_agreement
850316029,2801,ok just that the argument name settings isn’t needed at this step,0,0,0,0.9858396053314208,0.9886747002601624,0.9917530417442322,0.0,accept,unanimous_agreement
850319239,2801,"the base class should change only at this step. effectwithsettingsbase won’t be used, so you can interactively rebase, removing the commit from me. this step causes a makesettings member to be defined and called. you must understand that it is not correct to use getsettings until this point, because the generated makesettings should not be used either before this. only when the msettings member of the effect is removed, must these other changes be made too, to keep all steps of the transformation correct.",0,0,0,0.9808277487754822,0.9898527264595032,0.9932398796081544,0.0,accept,unanimous_agreement
850371881,2801,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
850372342,2801,"i commented it out + put a todo comment ""uncomment at final step""",0,0,0,0.963386297225952,0.9749600291252136,0.9942917823791504,0.0,accept,unanimous_agreement
850372402,2801,"i commented it out + put a todo comment ""uncomment at final step""",0,0,0,0.963386297225952,0.9749600291252136,0.9942917823791504,0.0,accept,unanimous_agreement
850381645,2801,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
850381862,2801,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
850383119,2801,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
850383695,2801,"ok, removed",0,0,0,0.9700809121131896,0.9630083441734314,0.988579511642456,0.0,accept,unanimous_agreement
850508369,2801,"alright, commit with effectwithsettingsbase removed. the other point is understood now.",0,0,0,0.9848935008049012,0.9620765447616576,0.9944234490394592,0.0,accept,unanimous_agreement
1324750269,5193,"i might say ""channels"" not ""tracks"" in this name",0,0,0,0.9853559136390686,0.9885656237602234,0.9826835989952089,0.0,accept,unanimous_agreement
1324754212,5193,"if you rebase onto my fixup commit [a link] and resolve the conflict, then you will understand that the `push_back` above should be pulled out of the loop. `capturesequences` must contain leader tracks only, and each one only once. then test that recording to stereo tracks still works.",0,0,0,0.9844159483909608,0.993065357208252,0.9953669309616088,0.0,accept,unanimous_agreement
1324754593,5193,that completes review of this one commit of the draft.,0,0,0,0.9828019738197328,0.9887136220932008,0.99195659160614,0.0,accept,unanimous_agreement
1326646322,5193,indent,0,0,0,0.8967059850692749,0.8570648431777954,0.9154122471809388,0.0,accept,unanimous_agreement
1326650399,5193,that should be `track->getname()`,0,0,0,0.9873619079589844,0.9935529232025146,0.995382845401764,0.0,accept,unanimous_agreement
1326650835,5193,just to make no assumptions about the continued validity of the old track pointer,0,0,0,0.9808564186096193,0.9639948606491088,0.9914244413375854,0.0,accept,unanimous_agreement
1326658724,5193,your commit comment suggest that you think this is redundant. i think you are right after all. i overlooked other details. but the extra insurance is harmless.,0,-1,0,0.6593123078346252,0.8897937536239624,0.9327719807624816,0.0,accept,majority_agreement
1326667282,5193,thank you for making me look up this standard algorithm and refresh my memory of it.,1,1,1,0.8465148210525513,0.7924181818962097,0.8072170615196228,1.0,accept,unanimous_agreement
1327277637,5193,"ah, overlooked that merge conflict, thanks!",1,1,1,0.9627957344055176,0.9743108749389648,0.9638354778289796,1.0,accept,unanimous_agreement
1329153951,5193,"keep this todo comment please, to remind me later to remove the line below",0,0,0,0.976498544216156,0.9832586050033568,0.9933869242668152,0.0,accept,unanimous_agreement
1329157466,5193,still unresolved -- don't use `mpdata->ptrack` after `swapchannels` but use `track`,0,0,0,0.9819768667221068,0.9860013723373412,0.9936482310295104,0.0,accept,unanimous_agreement
1329183226,5193,return what?,0,0,0,0.9790596961975098,0.906458020210266,0.7869825959205627,0.0,accept,unanimous_agreement
1329188043,5193,very good: we start to eliminate `makemultichanneltrack` except as an implementation detail of track.cpp. i would declare a variable to eliminate repetition of `*tracks.rbegin()`,1,1,1,0.5290248394012451,0.6176906228065491,0.8671934008598328,1.0,accept,unanimous_agreement
1329192748,5193,"you copy-pasted an old mistake in the words of the comment. should be ""new"" not ""changed""",0,0,0,0.964961051940918,0.9668570160865784,0.9552074670791626,0.0,accept,unanimous_agreement
1329213428,5193,"i made a mistake here at 03c68afc55b2020b0e8086aa288090b4e5ea8ca2, neglecting the provisions for more than two channels (maybe in future). correct my mistake. change the condition back to `if (basetrackname.empty())`",0,0,0,0.8387671709060669,0.9470239877700806,0.9364319443702698,0.0,accept,unanimous_agreement
1329216367,5193,the comment before this deletion should be deleted too now,0,0,0,0.9836179614067078,0.9917790293693542,0.9946084022521972,0.0,accept,unanimous_agreement
1329256697,5193,"you did what i asked, removing this and instead creating a ""wide"" track (as a tracklist) through the factory. but now i see that this makes an unintended change of behavior. the call of `wavetrack::init()` in `emptycopy` doesn't happen, and so certain information of `first` is no longer copied into the new track -- things such as the color, and whatever else in future might be attached to the `channelgroup` client data site. so the new `create` function should take `first` as another argument, which could default to nullptr, and from which it copies information as in `emptycopy`. or instead of that -- i think it's nicer -- add `std::optional onchannels = {}` as an argument in `emptycopy` and call that.",0,0,0,0.9703662991523744,0.9853916764259338,0.9866757988929749,0.0,accept,unanimous_agreement
1329259771,5193,this no longer needs to be a loop. just do this once on `mix`.,0,0,0,0.98742014169693,0.9873474836349488,0.9941642880439758,0.0,accept,unanimous_agreement
1329262169,5193,"in the present transitional state of the source tree, this needs to be `reallygetchannelindex`, i think",0,0,0,0.9853294491767884,0.9914423823356628,0.9923412799835204,0.0,accept,unanimous_agreement
1329264320,5193,duplicate these comments before the overload defined above.,0,0,0,0.9657617211341858,0.9835456609725952,0.9940921664237976,0.0,accept,unanimous_agreement
1329269810,5193,duplicate this assertion in a `` comment.,0,0,0,0.9783994555473328,0.990528643131256,0.9928349256515504,0.0,accept,unanimous_agreement
1329279138,5193,don't delete the comment!,0,-1,0,0.8216121196746826,0.4902524650096893,0.9521192908287048,0.0,accept,majority_agreement
1329280276,5193,"move the `monotostereo` call after the `reset`, consisntently with the comment. did you hit a breakpoint here in the debugger? i think you need to do what i wrote to avoid putting the `tracklist` objects into an inconsistent state.",0,0,0,0.982194721698761,0.979540467262268,0.9935821294784546,0.0,accept,unanimous_agreement
1329281522,5193,"it should also be asserted, and commented with ``, that `this` has null for `getowner()`.",0,0,0,0.9868966937065125,0.9929907321929932,0.9948099851608276,0.0,accept,unanimous_agreement
1329312677,5193,"""builds a wavetrack and places""",0,0,0,0.9848506450653076,0.9895301461219788,0.9923540353775024,0.0,accept,unanimous_agreement
1329920394,5193,"""flushes"" and ""moves"", consistent verb forms",0,0,0,0.9824816584587096,0.9939548373222352,0.9910523295402528,0.0,accept,unanimous_agreement
1329920851,5193,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1329952166,5193,why do you make bounds checks on this unsigned index variable only in importffmpeg.cpp but not in the other place that use `foreachchannel`? should there be checks in the other places?,0,0,0,0.9847006797790528,0.9947446584701538,0.989096224308014,0.0,accept,unanimous_agreement
1329992362,5193,"you are right, the problem is that `wavetrack::duplicate` copies both channels into new list, but we need only left",0,0,0,0.9637710452079772,0.9806710481643676,0.98667973279953,0.0,accept,unanimous_agreement
1329995063,5193,then `//! !getowner()` only is enough precondition as it implies that `nchannels() == 1`,0,0,0,0.9728082418441772,0.9738454222679138,0.9940083026885986,0.0,accept,unanimous_agreement
1330003562,5193,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
1330037918,5193,"i don't think so, i need that to preserve existing loop exit condition. `const auto nchannels = std::min(sc->codeccontext->getchannels(), sc->initialchannels);` which formally is not same as `mstreams.size()`, but `nchannels` was used as an upper bound in the original loop",0,0,0,0.983807384967804,0.9936851859092712,0.9891849756240844,0.0,accept,unanimous_agreement
1330200170,5193,"""and places""",0,0,0,0.9730466604232788,0.9870193004608154,0.9884069561958312,0.0,accept,unanimous_agreement
1330203388,5193,"in this commit's comment, ""eliminate""",0,0,0,0.9794716835021972,0.9937698245048524,0.9915890097618104,0.0,accept,unanimous_agreement
1335040294,5193,"thank you for figuring out what i omitted in recording. all of this looks like the right idea to me. why do you call it only an ""attempt""? did you observe that something still doesn't work?",1,1,1,0.9517422914505004,0.8769112229347229,0.9810164570808412,1.0,accept,unanimous_agreement
932062123,3258,i am really confused by the naming. i would've never expected such a behavior from a function called reserve and it has not documentation provided otherwise.,-1,-1,-1,0.9697092175483704,0.9499899744987488,0.9871737957000732,-1.0,accept,unanimous_agreement
932065689,3258,and it is even more confusing that consume does nothing while reserve consumes,-1,0,-1,0.919994056224823,0.5796436071395874,0.885434091091156,-1.0,accept,majority_agreement
932067878,3258,"after looking into implementation i say that i do not understand why this is called a sink. at very least, please document the protocol, as the implementation of the protocol was unexpected to me.",0,0,0,0.676441490650177,0.707669734954834,0.9671028852462769,0.0,accept,unanimous_agreement
932068251,3258,please document what this method is supposed to do,0,0,0,0.9837234020233154,0.9823394417762756,0.9928721785545348,0.0,accept,unanimous_agreement
932068331,3258,please document what this method is supposed to do,0,0,0,0.9837234020233154,0.9823394417762756,0.9928721785545348,0.0,accept,unanimous_agreement
932071267,3258,is it intentional that flush is kept out of the protocol?,0,0,0,0.9586297869682312,0.9848963022232056,0.9863893389701844,0.0,accept,unanimous_agreement
932073677,3258,should we have this commit in a different pr that could be merged earlier?,0,0,0,0.9834835529327391,0.9945935606956482,0.9909175038337708,0.0,accept,unanimous_agreement
932076513,3258,so probably it should be called `acknowledge`? `advance` usually has skip semantics.,0,0,0,0.984767735004425,0.995192289352417,0.9906176924705504,0.0,accept,unanimous_agreement
932077878,3258,but should the source know about the user?,0,0,0,0.9864770174026488,0.989801824092865,0.9870145320892334,0.0,accept,unanimous_agreement
932085722,3258,"`source`, on the other hand, seems to do what i would expect from source (well, from the producer, but this is minor).",0,0,0,0.983176589012146,0.986815631389618,0.9825804829597472,0.0,accept,unanimous_agreement
932086961,3258,"i would enjoy to see both `isgenerator` and `isprocessor` to be const, but that is very minor",0,1,0,0.8891041874885559,0.9066314101219176,0.914597749710083,0.0,accept,majority_agreement
932090461,3258,"if a c++ exception will be thrown by a subclass - the process will terminate. but i do not say, that this is bad :-)",-1,1,1,0.8185256123542786,0.9490464329719543,0.8600817918777466,1.0,accept,majority_agreement
932092334,3258,and i agree that it now implies usage of guardedcall for the code reviewer.,0,0,0,0.9751443266868592,0.9759584665298462,0.9868861436843872,0.0,accept,unanimous_agreement
932111015,3258,oh i see now why `processfinalize` is now `noexcept`,0,0,0,0.9772483706474304,0.9881572127342224,0.9848939776420592,0.0,accept,unanimous_agreement
932114104,3258,i think that the implementation of the host should handle any exception that happened inside the host code. i am pretty sure that plugins themselves cannot throw a c++ exception :-),1,1,1,0.9260983467102052,0.94695645570755,0.9513779878616332,1.0,accept,unanimous_agreement
932114901,3258,stage is good.,1,1,1,0.909704566001892,0.8989784717559814,0.96470844745636,1.0,accept,unanimous_agreement
932234606,3258,please document `bound`,0,0,0,0.9859696626663208,0.9917610883712769,0.9950290322303772,0.0,accept,unanimous_agreement
932398438,3258,yes,0,0,0,0.9564858078956604,0.9659429788589478,0.9686408638954164,0.0,accept,unanimous_agreement
932403666,3258,"it is optional. i agree this placement of progress update responsibility may not seem cleanest, but this is what the transformation accomplished while preserving the behavior. i didn’t figure out a better way yet. i think an abstract stage object might report remaining latency, and a routine running the pipeline might watch that (those) value(s) from the stage(s) and the remaining() of the ultimate source, and handle progress update instead.",0,0,0,0.9498611092567444,0.9755147099494934,0.9902312159538268,0.0,accept,unanimous_agreement
932406746,3258,"this preserves what was there. which i wrote years ago. audacityexception, only, is the root of things we can catch and handle at the event loop.",0,0,0,0.9756970405578612,0.984401524066925,0.9920029640197754,0.0,accept,unanimous_agreement
932408402,3258,"in the last commit, effectstate becomes a subclass of source, and the function becomes an override, with the understanding that it “inherits” all documentation for that.",0,0,0,0.9881336092948914,0.9922077059745787,0.9941213726997375,0.0,accept,unanimous_agreement
932416311,3258,just moving the indicator update? but why?,0,0,0,0.9197303652763368,0.9430741667747498,0.990120768547058,0.0,accept,unanimous_agreement
934396247,3258,"not critical i think, but making `advancedpositions` to be a class member may help to reduce the load on memory allocator a bit.",0,0,0,0.9872387051582336,0.9852672815322876,0.9778652191162108,0.0,accept,unanimous_agreement
934470308,3258,should it be final?,0,0,0,0.9791728258132936,0.9925106763839722,0.9867123365402222,0.0,accept,unanimous_agreement
934520082,3258,or even our friend `alloca`. but avoidance of heap allocations is not very important for destructive effect processing.,0,0,0,0.9136642217636108,0.9440813064575196,0.9841358661651612,0.0,accept,unanimous_agreement
934522454,3258,"for now it can be. there might be future need to make this an abstract base class, if we figure out multi-core. and what is now in effectstage::produce would instead become another task viewing its upstream and down as source and sink. but i haven't arrived at those details yet.",0,0,0,0.9588335156440736,0.9844509363174438,0.9875405430793762,0.0,accept,unanimous_agreement
934527096,3258,"yeah, i tend to forget that this is destructive path only :-)",-1,1,1,0.5747054219245911,0.5193086862564087,0.4552412331104278,1.0,accept,majority_agreement
637226816,918,nice instructions! it's a pain to update instructions via prs so do you think we could put these in the [a link] instead? we could put a link to the wiki page in readme.md.,1,1,1,0.9850695729255676,0.9783849716186525,0.9229096174240112,1.0,accept,unanimous_agreement
637233364,918,"i personally think it is neater to put all `run` commands in a separate bash script that gets copied into the docker image. see this [a link] for musescore, and also note the surrounding comments about how to reduce the image size (and how not to do it). [a link] is where the tidying up happens.",0,0,0,0.9611568450927734,0.9837745428085328,0.9815912246704102,0.0,accept,unanimous_agreement
637235144,918,"switching to a bash script would also allow you to [a link] to avoid endless backslashes. you can also [a link] in arrays, unlike with backslashes.",0,0,0,0.9852424263954164,0.9926906228065492,0.992896854877472,0.0,accept,unanimous_agreement
637238436,918,here's another place when an array would be ideal: [code block],0,0,0,0.9857192635536194,0.9855067729949952,0.9928365349769592,0.0,accept,unanimous_agreement
637244074,918,"this table is going to be a pain to maintain in markdown. i recommend linking to the relevant cmakelists.txt where the options are defined, or if they are in separate files then just tell people to use the `cmake -lh` option. if you really want a separate list, i recommend putting it in an online spreadsheet and linking to it from here. i'll pm you with more details about this.",-1,-1,-1,0.9608166813850404,0.8746963143348694,0.953984260559082,-1.0,accept,unanimous_agreement
637246360,918,why pch disabled?,0,0,0,0.9334243535995485,0.9704093933105468,0.9437002539634703,0.0,accept,unanimous_agreement
637247405,918,is brew now a prerequisite on macos?,0,0,0,0.9881139397621156,0.9929346442222596,0.9907659292221068,0.0,accept,unanimous_agreement
637247832,918,this is more information that would be better in a spreadsheet. ideally the cmake configuration would simply fail with an appropriate error message if the correct library version is not available: [code block] you can give the command or link to the wiki page that has the command. this [a link] does something similar if qt is not installed.,0,0,0,0.9861763119697572,0.9934032559394836,0.992655873298645,0.0,accept,unanimous_agreement
637248567,918,"we should refer to the wiki for extended instructions for things like signing and notarization, and perhaps for portable version too.",0,0,0,0.9880191683769226,0.9881630539894104,0.9929741621017456,0.0,accept,unanimous_agreement
637249584,918,"wiki could say more about this (pkg-cfg issues), so as not to clutter up building.md with info about non standard builds.",0,0,0,0.9863198399543762,0.9812105298042296,0.9809802174568176,0.0,accept,unanimous_agreement
637458312,918,[code block] unix makefiles is the default generator on linux and macos. there is no need to specify it explicitly (i personally use ninja though).,0,0,0,0.9852800369262696,0.9917415380477904,0.9932652711868286,0.0,accept,unanimous_agreement
637458385,918,thank you for documenting these.,0,1,1,0.5277552604675293,0.5075139403343201,0.7696265578269958,1.0,accept,majority_agreement
637509732,918,we had a specific request that there is a manual available in the source code. but i will put it on the wiki page as well after the branch has merged,0,0,0,0.9861755967140198,0.9845612049102784,0.9952355027198792,0.0,accept,unanimous_agreement
637509756,918,"nice catch, i will look into it on monday",1,1,1,0.977480411529541,0.9080202579498292,0.987311601638794,1.0,accept,unanimous_agreement
637510000,918,"yeah, that why i have called it ""most notable"" lol i guess i will move it in a separate doc a rewrite it a bit. also, vs code makes such tables really easy to format :-)",1,1,1,0.9897728562355042,0.9937042593955994,0.9932523369789124,1.0,accept,unanimous_agreement
637510316,918,"we have a spreadsheet, but i guess we need an ""offline"" version as well. i will move this table into a separate doc under the `linux` directory.",0,0,0,0.9863953590393066,0.9841467142105104,0.9941893815994264,0.0,accept,unanimous_agreement
637510429,918,"that is a good question, i don't know :-) it is disabled for all the ci builds for some reason, hurts paul sometimes",1,1,1,0.97958242893219,0.9867320656776428,0.9930340051651,1.0,accept,unanimous_agreement
637510432,918,`[a link]` ?,0,0,0,0.9881739616394044,0.9922773838043212,0.9923710823059082,0.0,accept,unanimous_agreement
637510657,918,absolutely not. but it is easier to install cmake using brew. for conan - pip3 is always installed with the latest versions of macos,0,0,0,0.963359832763672,0.9790602922439576,0.9829181432724,0.0,accept,unanimous_agreement
637510955,918,"yeah, i'll move most of it under `linux/minimal_libraries_versions.md`. we had a request from the maintainers that we keep the build docs in source tree",0,0,0,0.9844703674316406,0.992152750492096,0.9878666400909424,0.0,accept,unanimous_agreement
637512774,918,an excellent point!,1,1,1,0.9914713501930236,0.995771586894989,0.9938420057296752,1.0,accept,unanimous_agreement
637520372,918,that sounds a good balance between 'build docs in source tree' and 'provide alternative/elaborating info outside the main doc'.,0,1,0,0.8702751994132996,0.807056725025177,0.8978585600852966,0.0,accept,majority_agreement
637535390,918,"building with pch off requires the insertion of more #include directives to make the build pass, and those extra #includes give the honest and complete picture of dependencies with my scripts.",0,0,0,0.9833210706710817,0.9807246923446656,0.9918496608734132,0.0,accept,unanimous_agreement
637567713,918,i don't think it's a great idea to duplicate the content in multiple places. it is very likely one would not be updated when the other is. however a link from the wiki to this document in the code repository would be a good idea.,0,0,0,0.7641701102256775,0.8755743503570557,0.9095942974090576,0.0,accept,unanimous_agreement
637570675,918,"also, i don't recommend using two wikis at once. if you're going to add more to github wiki, i suggest moving everything from mediawiki and closing the mediawiki to edits.",0,0,0,0.9630411863327026,0.983062744140625,0.9752903580665588,0.0,accept,unanimous_agreement
637571616,918,i see `buildsystem=1` listed in the examples above but it is not documented here. what does that option do?,0,0,0,0.9867598414421082,0.990622103214264,0.9928094148635864,0.0,accept,unanimous_agreement
637810354,918,"this activates so-called ""legacy build system"" in xcode. their new system is very confusing and we currently have odd issues with it.",-1,-1,-1,0.9197019338607788,0.9231196641921996,0.9222002029418944,-1.0,accept,unanimous_agreement
637826179,918,i'd rather prefer to have it explicit,0,0,0,0.96234130859375,0.9844772815704346,0.9795547127723694,0.0,accept,unanimous_agreement
637826724,918,"we should, but not in this pr",0,0,0,0.9755299091339112,0.9818974137306212,0.9497442841529846,0.0,accept,unanimous_agreement
809474337,2565,"""an""",0,0,0,0.9517802000045776,0.9536847472190856,0.9904956817626952,0.0,accept,unanimous_agreement
809474676,2565,wrong comment,-1,-1,-1,0.9223400354385376,0.6907638311386108,0.8904055953025818,-1.0,accept,unanimous_agreement
809476763,2565,"maybe define pwind, then assign it to pconstwind, and get rid of the ugly c-style pointer cast",0,0,0,0.6905622482299805,0.9600329995155334,0.9597758650779724,0.0,accept,unanimous_agreement
809478101,2565,let's get rid of the rest of experimental_notebook in the source tree. that includes the line in experimental.cmake. the rest of the source code isn't available to turn it on again even if we wanted to.,0,0,0,0.9874188303947448,0.9909816384315492,0.9911673665046692,0.0,accept,unanimous_agreement
809479487,2565,put extra parentheses around this condition to suppress warnings (from clang at least). or rewrite as a for loop.,0,0,0,0.986866295337677,0.9859169125556946,0.9920816421508788,0.0,accept,unanimous_agreement
809481379,2565,"notice that the bottom toolbar docking area is part of the right side of the container window, therefore it will be narrower when the effects panel shows, rather than limiting the vertical extent of that panel. not right or wrong -- just saying we understand the consequence.",0,0,0,0.9771540760993958,0.9094071388244628,0.9897683262825012,0.0,accept,unanimous_agreement
809482778,2565,clean this up as a modern `static_cast` while you are visiting the neighborhood.,0,0,0,0.98297381401062,0.9870460033416748,0.9935919642448424,0.0,accept,unanimous_agreement
809483525,2565,tab order reminds me that we may need to check out how tabbing now works in the presence of the new window. might have opinions.,0,0,0,0.9658015966415404,0.9559462666511536,0.987485945224762,0.0,accept,unanimous_agreement
809484671,2565,"it would look a little nicer to me, to use a variable to eliminate the repeated calls to `window.gettracklistwindow()` and `window.getcontainerwindow()`",0,0,0,0.7233381867408752,0.8168330788612366,0.986939549446106,0.0,accept,unanimous_agreement
809485709,2565,"the only new #include in this pr, and it's a wxwidgets header. no new dependencies among audacity's own source code files. that is good.",1,1,1,0.9107133746147156,0.6920871138572693,0.7498149275779724,1.0,accept,unanimous_agreement
809864348,2565,"what happens if the user changes the theme? do you need to add to `projectwindow::onthemechange` to reset this color? or, is the background color in fact not seen because everything else in the window hides it?",0,0,0,0.9823575019836426,0.988905906677246,0.9919778108596802,0.0,accept,unanimous_agreement
809867161,2565,another background color you may need to update with theme changes,0,0,0,0.9802226424217224,0.9847705960273744,0.9914546012878418,0.0,accept,unanimous_agreement
809868743,2565,is unsplitting enough without the call to hide?,0,0,0,0.8319177031517029,0.974489152431488,0.9016464948654176,0.0,accept,unanimous_agreement
809869974,2565,is the explicit show() needed?,0,0,0,0.98635071516037,0.9925641417503356,0.9948323965072632,0.0,accept,unanimous_agreement
809870585,2565,"what happens if you try to drag the separator? is that not wanted, and do you need to bind and veto another event?",0,0,0,0.926906943321228,0.9198653101921082,0.9730738401412964,0.0,accept,unanimous_agreement
809910980,2565,"thanks, will fix",1,1,1,0.8757645487785339,0.8136782050132751,0.6667729616165161,1.0,accept,unanimous_agreement
809911081,2565,"thanks, will fix",1,1,1,0.8757645487785339,0.8136782050132751,0.6667729616165161,1.0,accept,unanimous_agreement
809911263,2565,"makes sense, will fix",0,0,0,0.962298572063446,0.9762095808982848,0.9636189937591552,0.0,accept,unanimous_agreement
809911402,2565,will do,0,0,0,0.9603245854377748,0.957181751728058,0.9619618058204652,0.0,accept,unanimous_agreement
809911726,2565,"no need, i'll rewrite the loop",0,0,0,0.9831330180168152,0.9709240198135376,0.9913010001182556,0.0,accept,unanimous_agreement
809912440,2565,"not sure that understand that, bottom toolbar docking area is a sibbling of the container window, isn't it?",0,0,0,0.7742440700531006,0.7268292307853699,0.9208999872207642,0.0,accept,unanimous_agreement
809912630,2565,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
809913357,2565,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
809919535,2565,"in my prototype branch i had changed background color in response to the theme event, but there was no visible effect, because of the child windows. i mistakenly committed this line. if i understand you correctly you saying that we don't need the separator to be draggable?",0,0,-1,0.6597214937210083,0.9147558212280272,0.5533900260925293,0.0,accept,majority_agreement
809919754,2565,"turned out - yes, thanks",1,1,1,0.8920028805732727,0.8847194314002991,0.9672293663024902,1.0,accept,unanimous_agreement
809949435,2565,i ask whether it is intended. maybe a limit on rightward dragging is needed.,0,0,0,0.9761866331100464,0.9853286147117616,0.972055971622467,0.0,accept,unanimous_agreement
809969950,2565,"you are right, i misread that",-1,0,0,0.8899590373039246,0.818920910358429,0.7803465127944946,0.0,accept,majority_agreement
813895221,2565,unused variable,0,0,0,0.9723678827285768,0.983355700969696,0.9869065284729004,0.0,accept,unanimous_agreement
813899001,2565,"feel free to clean up wxmin, wxmax with std::min, std::max instead",0,0,0,0.803516685962677,0.987972855567932,0.9908587336540222,0.0,accept,unanimous_agreement
813901251,2565,"""among"" instead of ""between"" is better english",0,0,0,0.9650104641914368,0.9852764010429382,0.9880637526512146,0.0,accept,unanimous_agreement
813901571,2565,"i know you just moved this comment, but fix it",0,0,0,0.9839358329772948,0.8654825091362,0.9792122840881348,0.0,accept,unanimous_agreement
813904640,2565,did you discover off by one mistakes in this function that you are also fixing? a commit comment should say so. should you fix it? is it making small but noticeable changes in other drawing that wasnt' specified?,0,0,0,0.9643731117248536,0.9564386606216432,0.9906946420669556,0.0,accept,unanimous_agreement
813917074,2565,"you add no calls to bevel. is it used in drawing functions that were changed? rather than change the more widely used function, adjust the rectangle that you pass into the function in the one relevant place.",0,0,0,0.9883238077163696,0.9851051568984984,0.9948838353157043,0.0,accept,unanimous_agreement
813919067,2565,but i think there are no such uses that you need to adjust.,0,0,0,0.9622002243995668,0.9739853739738464,0.9891848564147948,0.0,accept,unanimous_agreement
1365817464,5398,"-licameli this is actually not right, which is why this pr is still a draft. i couldn't figure it out before the end of the day unfortunately. maybe you can spot what i'm doing wrong.",-1,-1,-1,0.9208753108978271,0.7472360730171204,0.7015981674194336,-1.0,accept,unanimous_agreement
1366591554,5398,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
1369935419,5398,"the compile on macos doesn't let you capture a structured binding name directly in a lambda. another fix is to change the lambda capture below from `[&]` to `[track = track, interval = interval]`",0,0,0,0.9884510040283204,0.9924546480178832,0.9938149452209472,0.0,accept,unanimous_agreement
1369979870,5398,"`foreachclip` might be used more consistently in these new functions, but that's not important. also i would redefine `foreachclip` as an inline function, deducing the type of the argument as a template parameter, avoiding the construction of a `std::function` object. but this is not important.",0,0,0,0.975328803062439,0.988916277885437,0.9922786951065063,0.0,accept,unanimous_agreement
1369980973,5398,actually this is needed only for clip 0. see the commits merged at 48154efe6d8ce8e02c570a665a31caab39786cdc. right channel envelopes are just ignored.,0,0,0,0.989389955997467,0.99310302734375,0.9950136542320251,0.0,accept,unanimous_agreement
1370008172,5398,"this replacement for `waveclip::applystretchratio` loses a few good things: - early quick exit when ratio is already 1 - pre- and post-conditions, stated in header comments, and asserted in the function",0,0,0,0.9067453742027284,0.9899926781654358,0.9611365795135498,0.0,accept,unanimous_agreement
1370027165,5398,"answering: exception safety was carefully documented for those sequence operations precisely because exceptions are possible (otherwise it would have been `excsafety{no-fail}`). it is a promise that in case of exceptions, the sequence object is restored to its prior state. a known problem with wide wave clips (such as we have them, with the wavetrack::interval facade) is that strong exception safety for the individual sequences does not imply strong exception safety of the wide clip as a whole when appending or flushing. maybe there is success for one channel but failure for the other, and then there is no reversion of the first channel to its previous state. i did not attempt to solve this unlikely problem for 3.4 and neither should you. just maybe it will happen if you record and run out of space on the drive. there is exception handling in this case to save as much of the recording as possible rather than throw away the entire recording. this hole in strong exception safety might mean it's one remaining way to end up with mis-aligned clips.",0,0,0,0.9750840663909912,0.99168199300766,0.99087393283844,0.0,accept,unanimous_agreement
1370031873,5398,the step `mrawaudiotempo = *mprojecttempo;` is lost in this version. should that be fixed?,0,0,0,0.9878997206687928,0.993933379650116,0.993461012840271,0.0,accept,unanimous_agreement
1370035038,5398,cutlines? why not? they might be preserved un-stretched. maybe nobody cares.,0,0,0,0.6249181628227234,0.8898233771324158,0.94253271818161,0.0,accept,unanimous_agreement
1370040993,5398,not completely like `this`. i noticed that the new constructor of `interval` always uses `floatsample` format. i don't see where you change format to match the track's when inserting the new interval.,0,0,0,0.6566619873046875,0.7292281985282898,0.981667935848236,0.0,accept,unanimous_agreement
1370044774,5398,"more about formats: either the argument to this function should be `float *const *` or else the format should be an argument, not assumed to be `floatsample`. the latter solution has the appeal of more generality easily implemented, even if not yet needed.",0,0,0,0.9791256189346312,0.990471363067627,0.9893675446510316,0.0,accept,unanimous_agreement
1370064102,5398,the assertions in this and the next two functions should be stated in header comments as preconditions.,0,0,0,0.9868543148040771,0.9916996955871582,0.994947910308838,0.0,accept,unanimous_agreement
1370348438,5398,"`dst`, as a freshly-created empty clip, doesn't have project tempo set yet. it will be when inserted with `wavetrack::insertinterval`.",0,0,0,0.9882977604866028,0.9944181442260742,0.9917576909065248,0.0,accept,unanimous_agreement
1370355728,5398,"preserving them unstretched would probably be the best, but then when expanding they should be stretch-rendered to the stretch ratio of the parent clip, meaning re-introducing the possibility of stretch-rendering to a ratio other than 1. also, that should be done at interval level to ensure joint-stereo, (at least until wide clips are a reality), and i'm not sure how this would look like. so yeah, hoping nobody will care.",0,0,-1,0.749325156211853,0.7158528566360474,0.6858388781547546,0.0,accept,majority_agreement
1370550065,5398,i see. consider this point resolved.,0,0,0,0.9733630418777466,0.953633427619934,0.969361126422882,0.0,accept,unanimous_agreement
1370555406,5398,"this is a design change. make sure designers agree. expansion of cutlines is done by waveclip::paste in waveclip::expandcutline. paste fails if ratios don't match. so i think the complete solution would be correct remapping of cutlines along the timeline at the time stretch is applied, but then computing the stretch of the cutline could be delayed until just before the paste.",0,0,0,0.9771629571914672,0.9553349614143372,0.9900762438774108,0.0,accept,unanimous_agreement
1370608744,5398,absolutely - i've been overseeing this argument. addressing ...,0,0,0,0.8383708596229553,0.4803467690944671,0.9717167019844056,0.0,accept,unanimous_agreement
1370611388,5398,"""overseeing"" or ""overlooking""? (not the same...)",0,0,0,0.7507487535476685,0.9349225759506226,0.9540220499038696,0.0,accept,unanimous_agreement
1370624951,5398,"logged a follow-up ticket that still awaits martin's (or leo's, but he's on vacation) input.",0,0,0,0.9826661348342896,0.9614778757095336,0.985852599143982,0.0,accept,unanimous_agreement
1370638645,5398,trying ... :crossed_fingers:,-1,0,-1,0.8513807654380798,0.9136114716529846,0.8649426102638245,-1.0,accept,majority_agreement
1374628854,5398,i think you may need to swap the two lines above to get correct results in all cases. because the function move envelope points after the collapsed part leftward.,0,0,0,0.9861994981765748,0.9882766604423524,0.9873719215393066,0.0,accept,unanimous_agreement
1374630945,5398,"i wouldn't expect that, but to be on the safe side i'll push that change.",0,0,0,0.893823504447937,0.9448413848876952,0.9615288972854614,0.0,accept,unanimous_agreement
802219407,2536,"""expectedvalue""",0,0,0,0.9852688908576964,0.9900981783866882,0.9926877021789552,0.0,accept,unanimous_agreement
802220147,2536,"""integers""",0,0,0,0.9837217926979064,0.9905397891998292,0.991811990737915,0.0,accept,unanimous_agreement
809895920,2536,you might lift the common assignment of `test_dir` before the `if()`,0,0,0,0.988587498664856,0.9948371648788452,0.9947609305381776,0.0,accept,unanimous_agreement
809899064,2536,"""source files""",0,0,0,0.9871869087219238,0.988452970981598,0.9935979843139648,0.0,accept,unanimous_agreement
809900918,2536,it may be useful to add `properties prop1 ...` and pass those to: [a link],0,0,0,0.9877119660377502,0.992684841156006,0.9957731366157532,0.0,accept,unanimous_agreement
809901235,2536,and here are all the possible properties [a link],0,0,0,0.9840375185012816,0.9725763201713562,0.9955310225486756,0.0,accept,unanimous_agreement
809903941,2536,... unless one uses one of the properties: * fail_regular_expression * pass_regular_expression * skip_regular_expression * skip_return_code * will_fail,0,0,0,0.6480078101158142,0.9824293851852416,0.959884226322174,0.0,accept,unanimous_agreement
809904752,2536,"maybe the function will have other keyword arguments to abbreviate other combinations of properties. don't ask me yet, what exactly. experience will tell what is useful.",0,0,0,0.965332806110382,0.9557598829269408,0.9848086833953856,0.0,accept,unanimous_agreement
809906280,2536,i have a very strong opinion that unit test should return 0 on success,1,0,0,0.6263106465339661,0.5319386124610901,0.8537847995758057,0.0,accept,majority_agreement
809906518,2536,"catch2 needs to link something? i thought it is just one amalgamated header file. or is that precisely what this line does, just adding in include path.",0,0,0,0.9866031408309937,0.9905417561531068,0.989052951335907,0.0,accept,unanimous_agreement
809906899,2536,this can be easily added in the future in case we find a need for any additional ctest properties,0,0,0,0.9853904247283936,0.9904118180274964,0.9932426810264589,0.0,accept,unanimous_agreement
809907376,2536,"""proper""",0,1,0,0.9559128284454346,0.855831503868103,0.966307818889618,0.0,accept,majority_agreement
809907599,2536,"""modern"" cmake uses `target_link_libraries` for header-only libraries as well.",0,0,0,0.9891178011894226,0.9943816065788268,0.9935564398765564,0.0,accept,unanimous_agreement
809910170,2536,"will we want arguments for command that can be given to add_unit_test? will we ever need to reuse a common test executable with different arguments? should there be a lower-level cmake function taken out of this, for invoking add_test with such options? i'm thinking we might in future need a more complicated thing like setup and cleanup of fixtures for a test or a group of tests, in which each setup or cleanup step is itself described as a ""test."" [a link]",0,0,0,0.9796999096870422,0.9899446964263916,0.9896109104156494,0.0,accept,unanimous_agreement
809912202,2536,i wonder if these fixes you figured out for dynamic libraries should be reused with image-compiler too. or have you done that already? maybe a common cmake function for such steps then.,0,0,0,0.9658583402633668,0.9758449196815492,0.976727306842804,0.0,accept,unanimous_agreement
809912950,2536,"and still, i have very that if you need to it for unit tests you have serious design issues and should reconsider them. `add_unit_test` is expected to be used only to create unit tests.",0,0,0,0.8599992394447327,0.8688789010047913,0.5096511840820312,0.0,accept,unanimous_agreement
809914132,2536,"again maybe use a common low function for add_test, and consider how to pass other command arguments and test options into it.",0,0,0,0.9859689474105836,0.9942055344581604,0.9850990772247314,0.0,accept,unanimous_agreement
809914175,2536,"they can be reused, but the image-compiler is a) rarely built, b) does not test the functionality of a library. for these reasons, it is left as-is for now.",0,0,0,0.9808452129364014,0.976572811603546,0.9916495084762572,0.0,accept,unanimous_agreement
809935079,2536,got it,0,0,1,0.9009029269218444,0.929606556892395,0.904470145702362,0.0,accept,majority_agreement
1489495326,5952,it seems like there have been some wires crossed here - the overflow button should summon the clip context menu. clicking on the pitch/speed numbers should summon the dialog.,0,0,0,0.9828284382820128,0.981775403022766,0.9473040103912354,0.0,accept,unanimous_agreement
1490046022,5952,do not put this here. just put in the file where the sole call to it is. besides which: this change is extraneous to what the first commit comment says.,0,0,0,0.9051682949066162,0.9794098138809204,0.992946445941925,0.0,accept,unanimous_agreement
1490055412,5952,this deletion is one cause of failure of compilation of the first commit,0,0,0,0.9313875436782836,0.992090940475464,0.986642360687256,0.0,accept,unanimous_agreement
1490056919,5952,`#include ` for `wxrect` is another needed change,0,0,0,0.9863729476928712,0.9937180280685424,0.994727909564972,0.0,accept,unanimous_agreement
1490059483,5952,"as i said, i don't like enlarging this file with the new function, but `#include ` would be needed to fix its compilation",-1,-1,0,0.7412314414978027,0.5708466172218323,0.7593494057655334,-1.0,accept,majority_agreement
1490064259,5952,"i dislike so called ""utility"" files unless the things put into them really are needed in more than one place.",-1,-1,-1,0.9325548410415648,0.9749248027801514,0.9374501705169678,-1.0,accept,unanimous_agreement
1490083099,5952,i could fix the first commit so it compiles -- but then the second fails to link! you neglected to add the new files to `cmakelists.txt`. also the new files should have banners.,0,0,0,0.9283624887466432,0.9494554400444032,0.5069712996482849,0.0,accept,unanimous_agreement
1490087463,5952,"after i fix cmakelists.txt, still, to build i must add: [code block]",0,0,0,0.9864493012428284,0.9894123673439026,0.9912663102149964,0.0,accept,unanimous_agreement
1490088616,5952,"again, i don't see the need to move the code -- but also i notice, `selectinterval` is lost. intentional?",0,0,0,0.9236782789230348,0.833659827709198,0.9864704012870787,0.0,accept,unanimous_agreement
1490095845,5952,"i was mistaken -- i see it is used in more than one place, now that i fix cmakelists.txt and rebuild.",0,0,0,0.9639797806739808,0.9391632676124572,0.9726294279098512,0.0,accept,unanimous_agreement
1490147265,5952,"for me, the debug build was violating an assertion in wxwidgets, but my build didn't have debug symbols and i couldn't see wxwidgets source code. after some trial and error, i figured out that replacing `wxcolour{}` with `*wxblack` was a sufficient fix.",0,0,0,0.935860276222229,0.9800584316253662,0.9837406277656556,0.0,accept,unanimous_agreement
1490567583,5952,it's a tentative removal. the clip still remains selected after the dialog is closed even without. i intended to ask if he remembered why he added this in 65d23cf019fe465c852a06314981544fc9699dab.,0,0,0,0.9869995713233948,0.9410730004310608,0.9930486679077148,0.0,accept,unanimous_agreement
1490575944,5952,that was literally the task to select the clip on right click. probably has more details.,0,0,0,0.97348153591156,0.9721869230270386,0.9934671521186828,0.0,accept,unanimous_agreement
1490976438,5952,"i feel foolish now -- yes, just making it happen at button-up not down was the right thing!",-1,-1,-1,0.9849151372909546,0.988689124584198,0.9936648607254028,-1.0,accept,unanimous_agreement
1490985949,5952,need `weak_from_this()` for third argument,0,0,0,0.9834192991256714,0.9932832717895508,0.99440336227417,0.0,accept,unanimous_agreement
1495841977,5952,`this` may not survive by the moment handler is invoked. i think it would be safer to grab weak pointers explicitly. `audacityproject` has `std::enable_shared_from_this` in its base.,0,0,0,0.987242579460144,0.9939927458763124,0.985726237297058,0.0,accept,unanimous_agreement
1495948664,5952,could be shortened: [code block],0,0,0,0.9853323101997375,0.9935558438301086,0.9954084753990172,0.0,accept,unanimous_agreement
1495964213,5952,"not a clipped clip, documentation for `getclippingbox` says: the clipped clip rect is what will be returned if `hascliprect` is `true`. otherwise i like the motivation to eliminate one call to `getclippingbox`",1,0,0,0.8035516142845154,0.9859080910682678,0.9056374430656432,0.0,accept,majority_agreement
1497173780,5952,"could you please explain what ""lowlit"" and ""hightlit"" mean?",0,0,0,0.985104501247406,0.992786705493927,0.9913540482521056,0.0,accept,unanimous_agreement
1497187008,5952,"""modern"" way: pass `shared_ptr`s by value, and use `std::move` [a link]",0,0,0,0.9882072806358336,0.97868013381958,0.9921711683273317,0.0,accept,unanimous_agreement
1497260170,5952,when i have an expression under `if` statement that spans across multiple lines then i prefer to enclose the body of the branch into `{ }` that make code much more readable to my taste,0,0,0,0.9579010605812072,0.9836949110031128,0.976970672607422,0.0,accept,unanimous_agreement
1497341435,5952,you could avoid introducing extra name `clipbuttontag`: [code block],0,0,0,0.9882748126983644,0.9908512234687804,0.9952545166015624,0.0,accept,unanimous_agreement
1497351614,5952,":eyes: [a link] not the case in that particular set of arguments, but i don't like the idea of wrapping arguments into a structure to shorten the list...",-1,-1,-1,0.9805201888084412,0.9751909375190736,0.9791427850723268,-1.0,accept,unanimous_agreement
1497376377,5952,would be nice to reset `weak_ptr` in `release` and `cancel`,0,0,0,0.968529224395752,0.993631899356842,0.9903931021690368,0.0,accept,unanimous_agreement
1497383289,5952,"`label` should be passed by value then, not reference. `move` on `iprop` is redundant",0,0,0,0.9845595955848694,0.993664026260376,0.992383062839508,0.0,accept,unanimous_agreement
1497386219,5952,"ok, fixed in later commit",0,0,0,0.986543595790863,0.9892157316207886,0.9931562542915344,0.0,accept,unanimous_agreement
1497755689,5952,i agree.,0,0,0,0.9386655688285828,0.8401532769203186,0.9653030633926392,0.0,accept,unanimous_agreement
1497788026,5952,nice!,1,1,1,0.9834675192832948,0.9912506341934204,0.9901132583618164,1.0,accept,unanimous_agreement
1497795126,5952,first time i read something like this. i do see advantages.,0,0,0,0.7060284614562988,0.6089941263198853,0.7281643152236938,0.0,accept,unanimous_agreement
1497797426,5952,"i thought about it, but couldn't think of a situation where it could change behaviour.",0,0,0,0.7995572090148926,0.9376011490821838,0.892276406288147,0.0,accept,unanimous_agreement
1497806040,5952,"it wasn't when i wrote that line, but that was because of the `args&&...` in the class template. i removed `&&` and now i don't have to move the ints anymore. i think it's because before it expected right-reference types.",0,0,0,0.982032060623169,0.9875465035438538,0.9808335304260254,0.0,accept,unanimous_agreement
890356970,3030,the addition of this `include` of this header allows the deletion of the other two.,0,0,0,0.9874384999275208,0.9897745847702026,0.9946289658546448,0.0,accept,unanimous_agreement
890363580,3030,"here and elsewhere, i suggest you learn the conventions for doxygen comments. see : [a link] simply adding `!` after `//` means a comment will also be extracted to the automatically generated web pages. if you install the program, you can run `doxygen nographs.dox` to generate web pages on your own computer, then open `dox/html/index.html` to test how it looks. i say this as a recommendation, not a requirement for merging this.",0,0,0,0.929029107093811,0.962148904800415,0.9867728352546692,0.0,accept,unanimous_agreement
890364577,3030,"for doxygen, you can write [code block] there are a few alternatives of the comment syntax that doxygen also recognizes.",0,0,0,0.9888859987258912,0.9920127987861632,0.9943379759788512,0.0,accept,unanimous_agreement
890369570,3030,maybe this mutable member should become private.,0,0,0,0.9786871075630188,0.9832853674888612,0.9778448343276978,0.0,accept,unanimous_agreement
890372457,3030,"pointer or reference as return type? i would prefer reference. it's a conventional way of saying, null isn't possible, and making it unnecessary to specify that with a `//! ` comment. but otherwise, seeing just this declaration, i as a possible caller of this function, would be left in doubt whether null checks on all the uses of this function should be done or not.",0,0,0,0.9632135033607484,0.9846909642219543,0.9546973705291748,0.0,accept,unanimous_agreement
890375698,3030,"now i see the lines in the function: [code block] suggesting that sometimes it's necessary to return null because the effect plugin can't be completely initialized yet. is that right? then, a comment in the header should explain.",0,0,0,0.9855251908302308,0.9918102622032166,0.9916885495185852,0.0,accept,unanimous_agreement
890377135,3030,i have learned to prefer `size_t` not `int` for loops like this.,0,0,0,0.8909078240394592,0.9869890213012696,0.9820444583892822,0.0,accept,unanimous_agreement
890377778,3030,not skipping the hidden parameters? as you wish.,0,0,0,0.9810246229171752,0.98427015542984,0.9887813329696656,0.0,accept,unanimous_agreement
890384489,3030,"strictly speaking, the deletion of these two lines ought to wait until the commit ""define transferdatatowindow"" so that each step if the transformation is correct, introducing no temporary known bugs.",0,0,0,0.9874803423881532,0.9860612154006958,0.9881440997123718,0.0,accept,unanimous_agreement
890386775,3030,"the second commit, which introduces this function, might also rewrite `vst3parameterswindow::vst3parameterswindow` so that the commit comment is correct: only one call of `getparametercount` remains",0,0,0,0.9876906871795654,0.9956610798835754,0.994497001171112,0.0,accept,unanimous_agreement
890392173,3030,i still have a feeling that putting `meffectclassinfo` into the wrapper base class might make nicer simplifications of usage... but i don't insist,-1,0,0,0.6613599061965942,0.7091304659843445,0.967818021774292,0.0,accept,majority_agreement
890396253,3030,the commit that introduces this line needs `#include ` to compile on macos,0,0,0,0.9893954396247864,0.9947481751441956,0.994900643825531,0.0,accept,unanimous_agreement
890398888,3030,is this #include needed at the commit that adds it?,0,0,0,0.987297534942627,0.9954013824462892,0.9950072765350342,0.0,accept,unanimous_agreement
890399307,3030,or this?,0,0,0,0.9509294629096984,0.96500563621521,0.989923894405365,0.0,accept,unanimous_agreement
890409553,3030,"this added visit of parameters doesn't correspond to any deleted code. it doesn't skip the read-only parameters, as `syncparameters` does. it feels strange, and as we have discussed, that may be because `syncparameters` has perhaps a confused dual purpose. maybe all of this added visit should just be deleted.",-1,-1,-1,0.5596941113471985,0.8770775198936462,0.7158279418945312,-1.0,accept,unanimous_agreement
890411424,3030,"this on the other hand is here because a call to `syncparameters` is deleted from `loaduserpreset`. but it uses a dummy settings, which is strange; but that is because `syncparameters` takes a non-const reference to settings, as it must in other contexts. so i think the visit above should be deleted, and these two lines should be retained, but some comment added to explain that this is only transitional, pending the definition of the instance class. we need to discuss with .",0,0,0,0.9473425149917604,0.9852073192596436,0.9769001007080078,0.0,accept,unanimous_agreement
890411704,3030,these lines are certainly good ones that will remain in the final version.,1,0,1,0.8715518116950989,0.9117947816848756,0.707342267036438,1.0,accept,majority_agreement
890430655,3030,`at` might allow brevity but it can throw an exception that isn't handled anywhere. i would rather use `find` and a test against `end` and skip parameters that are not found.,0,0,0,0.9857639670372008,0.988821268081665,0.9766196608543396,0.0,accept,unanimous_agreement
890433609,3030,"this line is added at the last commit, to correspond with what `savesettings` does. but strictly it should be added earlier, in the commit ""define the structure, fetchsettings method, storesettings method""",0,0,0,0.988461136817932,0.9951462149620056,0.9946931004524232,0.0,accept,unanimous_agreement
890434688,3030,extra `;`,0,0,0,0.9710464477539062,0.99116313457489,0.9901298880577089,0.0,accept,unanimous_agreement
891141569,3030,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
891141960,3030,"right, better skip them, done.",0,0,0,0.9676861763000488,0.9503734111785888,0.9786838889122008,0.0,accept,unanimous_agreement
891142093,3030,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
891144778,3030,i take a chance now to refresh my rusty doxygen knowledge...,0,0,0,0.6679102182388306,0.7769707441329956,0.8957316875457764,0.0,accept,unanimous_agreement
891151172,3030,"that's right, it is for the case when meditcontroller could not be initialized. added comment for it.",0,0,0,0.987579882144928,0.9925779700279236,0.9939262270927428,0.0,accept,unanimous_agreement
892191354,3030,"i forgot about that, now done.",0,0,0,0.7702825665473938,0.92374187707901,0.8984813094139099,0.0,accept,unanimous_agreement
892196790,3030,"oops, actually no, it is a leftover from an attempt to find missing headers. will remove it.",-1,0,0,0.6220471858978271,0.8587878346443176,0.6299934983253479,0.0,accept,majority_agreement
892196928,3030,same as above,0,0,0,0.9772257208824158,0.965356171131134,0.9918335676193236,0.0,accept,unanimous_agreement
892206096,3030,"thanks, added",1,1,1,0.5618008375167847,0.7387487292289734,0.8128573298454285,1.0,accept,unanimous_agreement
892529430,3030,i will do an edit on that commit,0,0,0,0.986989676952362,0.9867985844612122,0.9931091070175172,0.0,accept,unanimous_agreement
892530174,3030,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
892789786,3030,woops i just realized that i am searching the map two times - instead of .at() i should have used the iterator directly.,0,-1,0,0.7625786066055298,0.5972651243209839,0.6402353644371033,0.0,accept,majority_agreement
892815680,3030,"i think i must rewrite this method, because it is not doing what is supposed to, i.e. take the input settings and move sliders and knobs on the plugin gui to reflect their values. what it is doing instead, is only passing on the settings to the audio processor (through the componenthandler).",0,0,0,0.9684187769889832,0.9698302745819092,0.9482139348983764,0.0,accept,unanimous_agreement
987841885,3696,"did you confirm that the buttons reformat after the value is changed and the preferences dialog is dismissed? if that doesn't work, then i maybe commit 3598fe4 added enough calls to invalidate().",0,0,0,0.9877976775169371,0.9945149421691896,0.9953664541244508,0.0,accept,unanimous_agreement
990495329,3696,"does mwhichmeters still need to be a bitwise or of non-exclusive choices? there was old, old code for an alternative combined play & record meter toolbar in one, instead of the separate ones. i forget when that was removed, but it appears the program is still constructing this third, combined meter toolbar, and yet never showing it and giving you no user interface to turn it on!",0,-1,0,0.8970307111740112,0.4958163797855377,0.8578506112098694,0.0,accept,majority_agreement
990503702,3696,"the commit that adds percent_slider for the play and record meters is perhaps incomplete. i can double-click on the slider thumb and get a dialog to enter a value. but it must be a fraction from 0 to 1, not a percentage value. is that acceptable? a design question",0,0,0,0.9718590378761292,0.9474024176597596,0.9718390703201294,0.0,accept,unanimous_agreement
990504607,3696,i also see that not all calls to sendupdate() are followed by showtip() -- the dialog has some of those calls. should showtip() be added?,0,0,0,0.9885502457618712,0.9931532144546508,0.9945007562637328,0.0,accept,unanimous_agreement
990505528,3696,"at this commit, at least in macos, i do not yet get the hover texts over these two slider thumbs. but i do get them for track pan and gain and the mixer board gain slider. maybe a later commit will fix this. i haven't built them all yet.",0,0,0,0.9575541615486144,0.9627290964126588,0.9420137405395508,0.0,accept,unanimous_agreement
990512802,3696,"ok, after another commit that changes this default, i do see tooltips, on macos -- but only if i click the thumb, not when i just hover the mouse over it. this is different from the pan and gain sliders. the text i see is like "": 47%"" suggesting something was supposed to be formatted before the "":"" but is left empty. i think that is mname being empty at these lines of aslider.cpp: [code block] with pan and gain sliders, i see a hover text, but when i press the mouse, i see the same text, but it moves and is drawn in a bordered, rounded rectangle. that's a little strange.",0,0,0,0.9428204298019408,0.939117193222046,0.9698455333709716,0.0,accept,unanimous_agreement
990515732,3696,"okay, at another commit, now i see the problems of previous commits corrected. names before the :, and a nice hover text with a rounded border. in fact, now the old behavior of the pan and gain sliders looks worse! there should be a minor issue i think to fix them to be consistent with the volume sliders. which is not part of the scope of this pr.",-1,-1,1,0.8283981084823608,0.718656063079834,0.3936408758163452,-1.0,accept,majority_agreement
990516259,3696,"it is still the case, however, that when double clicking the volume slider thumb to get a dialog, i'm still not entering a percentage value, but instead a fraction in the range 0.0 to 1.0.",0,0,0,0.9837225079536438,0.9748036861419678,0.9903028607368468,0.0,accept,unanimous_agreement
990522768,3696,"why getdefault() and not just read()? now if i change interface preferences so the bottom of scale is not -60 db, the drawing updates for it correctly, but the name spoken for the button still says -60, inconsistently with the display.",0,0,0,0.9698693752288818,0.9417961239814758,0.9323777556419371,0.0,accept,unanimous_agreement
990523979,3696,"`decibelscalecutoff.getdefault()` also occurs in the constructor of meterpanel. i put it there at commit 01a53e7da9b616d26d1bb49f381180f04438504f. as a behavior-preserving code transformation, it was correct as i did it, eliminating the use of the constant env_db_range. but was old behavior correct? perhaps not, and that other line should also be corrected to use read().",0,0,0,0.9847235679626464,0.9940401911735536,0.9898613691329956,0.0,accept,unanimous_agreement
997973101,3696,"thanks, fixed",1,1,1,0.80034339427948,0.8649866580963135,0.7960073947906494,1.0,accept,unanimous_agreement
997983670,3696,"thanks, dialog now shows values in range 0..100",1,1,1,0.94478040933609,0.8735685348510742,0.9614571928977966,1.0,accept,unanimous_agreement
1015364656,3696,"if you add the space yourself, for the special reasons explained in the comment, then do not include the spaces in the strings to be translated.",0,0,0,0.9843040108680724,0.9910743832588196,0.9941458702087402,0.0,accept,unanimous_agreement
1015365233,3696,this applies to five translatable strings in this function.,0,0,0,0.9848415851593018,0.9908863306045532,0.994165539741516,0.0,accept,unanimous_agreement
1015380747,3696,i see the minor fault was in copy-pasted code and not introduced here. so it's just a recommendation.,0,0,0,0.9868896007537842,0.9780746698379515,0.984574258327484,0.0,accept,unanimous_agreement
1251169150,4867,"as i said before: this entire class could be eliminated, and instead you can write `using projecttempolistener = std::function<...>;`",0,0,0,0.9856934547424316,0.9931249618530272,0.9933854937553406,0.0,accept,unanimous_agreement
1251172715,4867,you mean `oldtempo = mtempo`?,0,0,0,0.9839552044868468,0.9940491914749146,0.992565393447876,0.0,accept,unanimous_agreement
1251175841,4867,the extra indirection of wavecliplist serves no purpose. i say remove that class and simplify.,0,0,0,0.9611566662788392,0.9757574200630188,0.984879195690155,0.0,accept,unanimous_agreement
1251176742,4867,supply this before my approval. i think it’s very easy.,0,1,1,0.6322653889656067,0.6431890726089478,0.968733012676239,1.0,accept,majority_agreement
1251177056,4867,"not in principle difficult either, but i won’t demand it",0,-1,0,0.7780539989471436,0.5861454010009766,0.7641782164573669,0.0,accept,majority_agreement
1251179093,4867,"again i don’t see why the publisher must be a member of projectmanager. i would just make it an independent attached object on the project’s clientdata::site. and then it really needs only a .cpp file, no .h file, because it does all its magic by registering its factory at startup.",0,0,0,0.9457612037658693,0.9850422739982604,0.9844597578048706,0.0,accept,unanimous_agreement
1251182331,4867,"... if in fact there remains any need to define this interface, but i doubt even that",0,-1,0,0.9053603410720824,0.6619325876235962,0.9276947975158693,0.0,accept,majority_agreement
1251195971,4867,"again: i think you can eliminate this class, and even eliminate the std::function alias, and make all of it implementation detail of the publisher. and new criticism: you need to iterate all tracks now, not just wave tracks.",0,0,0,0.9753400087356568,0.979290783405304,0.9768622517585754,0.0,accept,unanimous_agreement
1251343297,4867,silly me.,-1,-1,-1,0.9857712984085084,0.966055989265442,0.9903083443641664,-1.0,accept,unanimous_agreement
1251363199,4867,looks like it works. coming up.,0,0,0,0.8698394298553467,0.7128872275352478,0.822354793548584,0.0,accept,unanimous_agreement
1251374331,4867,you know it gets annoying when you're (probably) right for the 10th time in a row?,-1,-1,-1,0.9618915319442748,0.9778618216514589,0.974204957485199,-1.0,accept,unanimous_agreement
1251853274,4867,"now i remember why this is needed. if a clip is cut from project a and pasted in b, it needs to know immediately what the tempo of b is to be painted and played back correctly. the clip copy constructor cannot rely on that information from the other clip. when do we know for sure when a clip becomes visible in a project? i can only think of this moment, when the clip is pushed into a track's clip list. this class is here to make sure that this doesn't happen without a tempo update. but it doesn't have to be part of this very pr, we'll have time to debate over this.",0,0,0,0.8965964913368225,0.9444358944892884,0.6804388761520386,0.0,accept,unanimous_agreement
1251858094,4867,"`wavecliplist` only added a `std::optional ` data member, which could just as easily become part of `wavetrack.`",0,0,0,0.9880834221839904,0.993893265724182,0.99147367477417,0.0,accept,unanimous_agreement
1251868968,4867,pleased to see you figured this out. i had forgotten the details of using the allegro library. so you have completely implemented this new virtual for all except the wavetracks!,1,1,1,0.9816673994064332,0.9156017899513244,0.994806706905365,1.0,accept,unanimous_agreement
1251870199,4867,"no, if you call `wavecliplist::pushback`, it sets the project tempo on the clip. [code block]",0,0,0,0.9878902435302734,0.9953437447547911,0.9943663477897644,0.0,accept,unanimous_agreement
1251870769,4867,expect a small conflict if you rebase this onto my clip-views branch. i eliminate `track::vrulersize`.,0,0,0,0.9745793342590332,0.9795952439308168,0.9935089945793152,0.0,accept,unanimous_agreement
1251873214,4867,"as i said, this header file isn't needed. just put all in the .cpp file. there are many examples already of .cpp files without companion .h files, when registration at startup time is enough to cause the code to be visited. for instance in src/export",0,0,0,0.9873849153518676,0.99271821975708,0.9927893280982972,0.0,accept,unanimous_agreement
1251874566,4867,"compilation failed for me becuase ""observer.h"" was not included",0,0,0,0.9345142245292664,0.9765532612800598,0.9360297918319702,0.0,accept,unanimous_agreement
1251875419,4867,"compilation failed for me because ""float.h"" was not included",0,0,0,0.7741703391075134,0.9783993363380432,0.8382745385169983,0.0,accept,unanimous_agreement
1251878433,4867,i think this step of construction is not needed. there will not yet be any tracks.,0,0,0,0.97950541973114,0.968738853931427,0.9778058528900146,0.0,accept,unanimous_agreement
1251879071,4867,yes - which leaves audacity in an inconsistent state : change project tempo and all tracks shrink or expand except for the most important one :d,1,1,1,0.6520191431045532,0.7518579363822937,0.961949110031128,1.0,accept,unanimous_agreement
1251880405,4867,thanks.,0,1,0,0.5150366425514221,0.5804154276847839,0.5270382761955261,0.0,accept,majority_agreement
1251883891,4867,"the previous solution remembered old project tempo in projecttimesignature. now you store last known tempo in each track. i think i understand what justifies this. it's not always duplicated everywhere. a track could be duplicated into an undo state or in the clipboard. it remembers what project tempo was at the time the duplicate track was created. we don't want to normalize it to some tempo value, because we want to delay the time when we must compute the time stretch, which is not perfectly invertible, and so, lossy.",0,0,0,0.8733737468719482,0.7131435871124268,0.9686748385429382,0.0,accept,unanimous_agreement
1251890514,4867,good to start testing. i think copy and paste will work fine for midi and label tracks. the tracklist listener was all you needed. (timetrack does not copy and paste.),1,1,1,0.9428061246871948,0.923487424850464,0.9863152503967284,1.0,accept,unanimous_agreement
1251893508,4867,still unresolved,0,0,0,0.894314169883728,0.931536078453064,0.793069064617157,0.0,accept,unanimous_agreement
1251897254,4867,"still, you might simply change every `push_back` in wavetrack to use instead a new private member function of wavetrack that does this.",0,0,0,0.9878899455070496,0.9937416911125184,0.990406334400177,0.0,accept,unanimous_agreement
1251900156,4867,"this, and also to reduce cognitive load when trying to figure out what happens when tracks in the undo stack miss out on project tempo updates and later get inserted into the list. now it's easier.",0,0,0,0.9585501551628112,0.9811464548110962,0.9529649019241332,0.0,accept,unanimous_agreement
1409749684,5685,"looking at the second of five commits so far. this change is correct for the purpose stated in the commit comment. but i would ask, how will the mouse actions be discoverable? the read-only mouse preferences pages too used to serve as a reference but that is gone. i will review the rest.",0,0,0,0.9831716418266296,0.986464023590088,0.9696975350379944,0.0,accept,unanimous_agreement
1409751954,5685,"i now say, this commit is correct, but not complete. find all `""/gui/verticalzooming""` and see that the midi track, too, has a vertical ruler influenced by the same preference, and it also mentioned mouse actions in the context menu items.",0,0,0,0.9855164885520936,0.9879327416419984,0.9914058446884156,0.0,accept,unanimous_agreement
1409757690,5685,"you might qualify this little variable as `const` or to be even more modern, `constexpr`. that's a minor bit of style. i skip it sometimes when the scope of a variable is small, but it can be helpful if ever you have something at the top of a large function or block.",0,0,0,0.9590592980384828,0.9773534536361694,0.9725059866905212,0.0,accept,unanimous_agreement
1409764077,5685,this dispels my doubt about discoverability. rely on the tooltips.,-1,-1,0,0.6739343404769897,0.7422701716423035,0.8484039306640625,-1.0,accept,majority_agreement
1409765319,5685,indentation. the convention is three spaces in most of our source files. you might change preferences in your source code editor.,0,0,0,0.9887269735336304,0.9912681579589844,0.9938253164291382,0.0,accept,unanimous_agreement
1410554377,5685,"this change is not quite equivalent to the previous version. ""right-click for menu."" was a message that appeared in the status bar, when you right click, and have not yet released the button. this is lost. but i suppose you observed this, and the answer is that it doesn't make sense as a discoverability aid if you really have to do that right click before you see the message suggesting right click! and you are just assuming right click for context menu is a widespread convention we don't need to mention. yes?",0,0,0,0.7244951725006104,0.6411978602409363,0.9274135828018188,0.0,accept,unanimous_agreement
1410561097,5685,"i think you didn't complete your intended work: this context menu items still mention the mouse button shortcuts, but you removed those for waveform and spectrum rulers.",0,0,0,0.9873814582824708,0.9751659631729126,0.9075484275817872,0.0,accept,unanimous_agreement
1410568118,5685,-licameli that is a _**very**_ widespread convention an many apps and oss,0,0,0,0.6811336278915405,0.5209963321685791,0.746526837348938,0.0,accept,unanimous_agreement
1410703225,5685,indeed,0,0,0,0.9593731164932252,0.9424352049827576,0.9869857430458068,0.0,accept,unanimous_agreement
1410730330,5685,"it's a widespread convention _when it is obvious_ that the pointer is over a clickable entity (frequently indicated by a change in ""hover over"" colour). the problem that i see in relation to the track's vertical ruler is that a high proportion of users are unaware that it is clickable.",0,0,0,0.8635027408599854,0.9211804270744324,0.945930242538452,0.0,accept,unanimous_agreement
949402525,3317,"i would like to see `xxo(""&generate"")`. this way this string will be reused.",0,0,0,0.9827964305877686,0.9903658628463744,0.9928003549575806,0.0,accept,unanimous_agreement
949403241,3317,probably a wrong condition?,-1,0,-1,0.7310662865638733,0.9007959365844728,0.5431514978408813,-1.0,accept,majority_agreement
949404627,3317,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
949429313,3317,wrong condition? after the #3391 mwstate should not be used.,0,0,0,0.7604518532752991,0.9101165533065796,0.9465093016624452,0.0,accept,unanimous_agreement
949431247,3317,"i have checked all the design sources - button is always called ""preview"". also, it should be ""grouped"" with the ""apply"", right now it leans to the left (i. e. it is near the ""presets"" button)",0,0,0,0.9845823049545288,0.9913870692253112,0.990664005279541,0.0,accept,unanimous_agreement
949440166,3317,"you can do `using observer::publisher ::publish`, but i don't yet understand why this function is public",0,0,0,0.944908857345581,0.9805244207382202,0.9924254417419434,0.0,accept,unanimous_agreement
949445203,3317,i think this should become a `realtimeeffectstate::setactive`. that specific method should also publish the message,0,0,0,0.9757341742515564,0.9887720942497252,0.9877183437347412,0.0,accept,unanimous_agreement
949453177,3317,"agree on calling it ""preview"" (changing to ""stop preview"" after it's been pressed). regarding the grouping, it apparently was difficult and martin didn't mind it ungrouped iirc.",0,0,0,0.9795507192611694,0.7738569974899292,0.957358181476593,0.0,accept,unanimous_agreement
949454645,3317,"well, i know how to do such grouping :-)",1,1,1,0.9753340482711792,0.965579628944397,0.8834108710289001,1.0,accept,unanimous_agreement
952381290,3317,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
952383605,3317,"changed. to xxo(""&generate"").",0,0,0,0.9866961240768432,0.9902406930923462,0.9945711493492126,0.0,accept,unanimous_agreement
952385550,3317,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
952385899,3317,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
952386225,3317,"changed to use mptempprojectstate instead, plus tacked on a few other condition checks as well.",0,0,0,0.9859098196029664,0.9936097860336304,0.9930617213249208,0.0,accept,unanimous_agreement
952403973,3317,"unnecessary check, could be `focus == play`",0,0,0,0.9753756523132324,0.9758373498916626,0.9922751784324646,0.0,accept,unanimous_agreement
952434281,3317,`getaccess` does not return empty pointer,0,0,0,0.9854597449302672,0.9855292439460754,0.994362473487854,0.0,accept,unanimous_agreement
954200932,3317,do we really need `char` here?,0,0,0,0.9857845902442932,0.9919771552085876,0.9890474677085876,0.0,accept,unanimous_agreement
954202628,3317,you can use `publish` without this line. it was only required when you needed `publish` to be public.,0,0,0,0.989048421382904,0.9929590225219728,0.9947391152381896,0.0,accept,unanimous_agreement
954204195,3317,"i would like -licameli to review this specific method. generally it keeps the behavior from the realtimeeffectpanel, but probably paul can suggest something different",0,0,0,0.9397211670875548,0.9796874523162842,0.9704805612564088,0.0,accept,unanimous_agreement
954212302,3317,"setactive will publish `realtimeeffectstatechange` when needed, so the following lines are redundant (and `projecthistory::get(*mproject).modifystate(false);` probably has visible side effects)",0,0,0,0.985539436340332,0.9936177730560304,0.9932339787483216,0.0,accept,unanimous_agreement
954270449,3317,"i would say that this should `xo` now, not that it matters :-) just whining",1,1,1,0.5214971303939819,0.9688105583190918,0.9586270451545716,1.0,accept,unanimous_agreement
954273274,3317,"i think checking `mptempprojectstate` is enough. i would like to see this check to be wrapped into `isopenedfromeffectpanel` method (naming is hard, yes). otherwise it quite hard to understand when you see this code for the first time",0,0,0,0.8996723294258118,0.9794347882270812,0.9822143912315368,0.0,accept,unanimous_agreement
954285244,3317,when we move away from `addstandardbuttons` - `mapplybtn` should be assigned there.,0,0,0,0.9888762831687928,0.994765281677246,0.9928269982337952,0.0,accept,unanimous_agreement
954286214,3317,you can use `mapplybtn` here,0,0,0,0.9879339933395386,0.9923897385597228,0.995497226715088,0.0,accept,unanimous_agreement
954289937,3317,"i say this line should go. `onenable` is now called only when the ui is opened from the fx panel, so there is no point to change the ""global"" state. this toggle should only affect a single effect.",0,0,0,0.9881919026374816,0.992665946483612,0.9838885068893432,0.0,accept,unanimous_agreement
954291606,3317,"let's replace it with that method i have proposed earlier. please not, that `msupportsrealtime` is always true for effects in the stack.",0,0,0,0.980152189731598,0.9906304478645324,0.9948711395263672,0.0,accept,unanimous_agreement
954292420,3317,give the early return couple lines above - i think this `if` can be ommited,0,0,0,0.9885101914405824,0.9823887944221495,0.9909371733665466,0.0,accept,unanimous_agreement
954293652,3317,why not `if (msupportsrealtime)` as it was before?,0,0,0,0.9831486940383912,0.9904531240463256,0.9889751672744752,0.0,accept,unanimous_agreement
954294488,3317,please update the comment. its something translators see.,0,0,0,0.9792914986610411,0.9899508357048036,0.9956925511360168,0.0,accept,unanimous_agreement
954294615,3317,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
954295234,3317,this line should probably go too.,0,0,0,0.9792484045028688,0.9883562922477722,0.985645055770874,0.0,accept,unanimous_agreement
954295861,3317,that not yet created method here please as well,0,0,0,0.9840697646141052,0.9857455492019652,0.9950512051582336,0.0,accept,unanimous_agreement
954650963,3317,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
955323397,3317,`isopenedfromeffectpanel`? minor though,0,0,0,0.982119619846344,0.9941046833992004,0.990665853023529,0.0,accept,unanimous_agreement
955329853,3317,it appears that both branches are identical now,0,0,0,0.9794492721557616,0.990840494632721,0.9915379285812378,0.0,accept,unanimous_agreement
878683383,2957,i need to add `#include ` to build it,0,0,0,0.9879267811775208,0.9832768440246582,0.9936286807060242,0.0,accept,unanimous_agreement
878686979,2957,"this looks like a correct fix to me. ? but let's agree to go farther: write [code block] and eliminate the repetition of the string literal, using the named constant instead in three places. do likewise for the other string constant.",0,0,0,0.9801174998283386,0.9509556293487548,0.9103446006774902,0.0,accept,unanimous_agreement
878687521,2957,"these functions to fetch settings from the vst3 handle into our own map, and store them back, are a beginning toward statelessness by analogy with the transformation i am making for audiounits. for audiounits, the fetching and storing both perform a loop over the settings as defined by the handle. storesettings doesn't iterate our own hash map, but looks up in it. also in audiounits, the details of how to iterate the handle's metadata for settings is written just once in a higher-order function called `foreachparameter`, and that function takes a lambda for the loop body. i suggest you make similar changes.",0,0,0,0.969157338142395,0.9797914624214172,0.9823746085166932,0.0,accept,unanimous_agreement
878696509,2957,"if you define `makesettings`, also define an efficient `copysettingscontents`. but make those definitions only very late, when all else is ready for the final switch to statelessness. so, not in this first stage pr.",0,0,0,0.9732118248939514,0.9904864430427552,0.9926901459693908,0.0,accept,unanimous_agreement
878703096,2957,"do not make `getsettings` a static function, until the last step to real statelessness. make it a non-static member function of vst3effect that ignores its argument and uses a vst3effectsettings member of the vst3effect, which is still stateful. this would parallel what i did with audiounits. this allows some changes to use `getsettings` where that will be needed, while not yet changing real behavior, when the transformation to statelessness is still incomplete.",0,0,0,0.958368718624115,0.9816344380378724,0.9916143417358398,0.0,accept,unanimous_agreement
878703587,2957,"here and elsewhere, you might write just one line `fetchsettings(getsettings(settings))`",0,0,0,0.9881941080093384,0.9929446578025818,0.992405116558075,0.0,accept,unanimous_agreement
878704020,2957,"but then, also, fetchsettings should clear the map before iterating the parameters and reinserting them.",0,0,0,0.987173318862915,0.9904058575630188,0.991594135761261,0.0,accept,unanimous_agreement
878704121,2957,"`fetchsettings` is called in all necessary places, good",1,1,1,0.6145200729370117,0.7223955988883972,0.8587866425514221,1.0,accept,unanimous_agreement
880153589,2957,looks like a bug indeed,-1,0,-1,0.8789178133010864,0.9498517513275146,0.6896082162857056,-1.0,accept,majority_agreement
880160741,2957,is that possible to store pointer to the controller instead?,0,0,0,0.9883544445037842,0.9941895008087158,0.9946027398109436,0.0,accept,unanimous_agreement
880188970,2957,"parameters stored by `savesettings` are used by macroses in audacity and are meant to be read by human, i'm not sure if that was correct to skip other types of parameters, but this was an attempt to restrict the amount of parameters (there could be thousands of them) to a set of paramters that are useful and meaningful",0,0,0,0.9527500867843628,0.973881721496582,0.9800043702125548,0.0,accept,unanimous_agreement
880235540,2957,"thanks for the clarification, i was wondering about that, it makes sense to do it this way.",1,1,1,0.7657161355018616,0.8342486619949341,0.9529054760932922,1.0,accept,unanimous_agreement
880239478,2957,"i am not sure i understand. do you mean, instead of storing the `value`, store the pointer `&meditcontroller`?",0,0,0,0.8622066974639893,0.8410229682922363,0.778473973274231,0.0,accept,unanimous_agreement
880240954,2957,"ok thanks - i wonder if we should correct this in a separate, trivial pr so that it goes in master soon?",1,0,1,0.5975774526596069,0.5494207143783569,0.808007001876831,1.0,accept,majority_agreement
880269728,2957,"yes, instead of storing parameter values in `settings` use `settings` object to access underlying `editcontroller`",0,0,0,0.9885335564613342,0.993588089942932,0.9944861531257628,0.0,accept,unanimous_agreement
880272334,2957,"agree, -licameli ?",0,0,0,0.9821619391441344,0.9919410943984984,0.9872463941574096,0.0,accept,unanimous_agreement
880357301,2957,"agreed, write it, also eliminating the repetition of string literals.",0,0,0,0.984350562095642,0.990029752254486,0.9922218918800354,0.0,accept,unanimous_agreement
880424966,2957,maybe this `struct` should just simplify to a `using` alias,0,0,0,0.9862805604934692,0.9935611486434937,0.988355040550232,0.0,accept,unanimous_agreement
880427286,2957,"this is not analogous to what i did for audiounits: the visitor function can return false, not to cause `foreachparameter` to fail, but only to cause it to stop visiting other parameters. in fact `foreachparameter` for audiounits ended up as a void-returning function, and yours might too.",0,0,0,0.978377878665924,0.9572344422340392,0.992455005645752,0.0,accept,unanimous_agreement
880428276,2957,"as explained, skip over certain parameters that don't automate; but don't stop the visit or return a failure code.",0,0,0,0.977044939994812,0.9666255116462708,0.9916369318962096,0.0,accept,unanimous_agreement
880436721,2957,"this function could also be used to simplify `supportsautomation` and `loadfactorydefaults` as for `loadsettings`, change it to use `foreachparameter`, and not iterating over `parms`. instead call `parms.read` as in `audiouniteffect::loadsettings`",0,0,0,0.9875384569168092,0.9952389001846312,0.9944591522216796,0.0,accept,unanimous_agreement
880442455,2957,"can we assume that the set of parameters, and the kcanautomate flag for each parameter, is unchanging during the lifetime of the loaded vst3 plug-in? and independent of any instance state? i would assume so. when you write copysettingscontents analogous to that for audiounits (not yet merged, but in the last of the sequence of prs for au), you may be making such an assumption.",0,0,0,0.9868878722190856,0.994335949420929,0.9925094842910768,0.0,accept,unanimous_agreement
880448645,2957,"i'm missing some context. these lines are no longer in the last commit of this branch. are you suggesting that a pointer to `editcontroller` should be carried around in the `effectsettings` object? i don't like that. `effectsettings` should be thought of as a ""frozen"" description of instance state, not using any third-party library handles. thus our fetching and storing functions to synchronize frozen with live state, one way or the other. the `effectsettings` is something we can pass across inter-thread boundaries, and also copy from one live instance to the other by means of fetching from one and storing to the other. maybe it is not the most efficient way for every effect protocol, but it seems to me to have the generality that we need that would work with all of them in one unifying framework.",-1,-1,-1,0.7080230712890625,0.6321551203727722,0.8758081793785095,-1.0,accept,unanimous_agreement
880696834,2957,now added in commit `created foreachparameters and used in 3 places`,0,0,0,0.9857164025306702,0.9863324761390686,0.9947372078895568,0.0,accept,unanimous_agreement
880698155,2957,now done in commit `created foreachparameters and used in 3 places` and will do the same for the standalone branch to fix this bug.,0,0,0,0.9890417456626892,0.9936105608940125,0.9944220185279846,0.0,accept,unanimous_agreement
880698645,2957,now done in commit `created foreachparameters and used in 3 places`,0,0,0,0.9854754209518432,0.986624002456665,0.9939425587654114,0.0,accept,unanimous_agreement
880700714,2957,done in commit `getsettings turned to temporary version`,0,0,0,0.9864888787269592,0.993595540523529,0.9937684535980223,0.0,accept,unanimous_agreement
880733329,2957,done in commit `simplified parameterinfo`,0,0,0,0.9862594604492188,0.9934791326522828,0.9946494698524476,0.0,accept,unanimous_agreement
880733783,2957,done in commit `correct the behavior of foreachparameter...`,0,0,0,0.9860364198684692,0.9951152801513672,0.9939646124839784,0.0,accept,unanimous_agreement
880734391,2957,done in commit `correct the behavior of foreachparameter...`,0,0,0,0.9860364198684692,0.9951152801513672,0.9939646124839784,0.0,accept,unanimous_agreement
881249818,2957,"i am not sure about using it for `supportsautomation`, because `foreachparameter` will always stop at the first parameter for which the visitor fails, and then return true - while `supportsautomation` stops at the first parameter which can be automated, returning true, but if none of the parameters can be automated, it will return false. i think i'd need a different version of `foreachparameter` for that, which will return true at the first successful visit and false if no successful visits happened (it could be named something like verifyatleastoneparameter)",0,0,0,0.919570803642273,0.9644342660903932,0.9044958353042604,0.0,accept,unanimous_agreement
881270163,2957,"as for `loadfactorydefaults`, now done in commit `loadfactorydefaults uses foreachparameter`",0,0,0,0.9883995056152344,0.9942334294319152,0.9953964352607728,0.0,accept,unanimous_agreement
881315044,2957,"as for `loadsettings`, i need to have a talk about that first",0,0,0,0.9833530187606812,0.9838340878486632,0.9932896494865416,0.0,accept,unanimous_agreement
881912625,2957,"i prepared a version of `loadsettings` that uses `foreachparameter`, but it is deactivated (under #if 0) in favor of the existing version - this because i can not find a way to reach this method (i tried using macros, as hinted in our conversation, but the method called when playing back the macro will not take the else branch that calls loadsettings). when i can rebase on vitaly's recent work for stacks, i will be able to reach this method and test if the new version works.",0,0,0,0.9619067311286926,0.9855026006698608,0.9902092218399048,0.0,accept,unanimous_agreement
1209735362,4739,"this sentence will probably let the user think that she now has to convert one of the tracks to the sample rate of the other. as pointed out, an alternative worth considering would be panning - simpler, no memory usage increase, lossless. please consider suggesting this in your sentence.",0,0,0,0.9732859134674072,0.9889529943466188,0.9841318726539612,0.0,accept,unanimous_agreement
1209860509,4739,"there is also the danger that the user changes the sample rate of one of the tracks by using the rate sub menu on the track's menu, rather than tracks > resample.",0,0,0,0.912769854068756,0.972517728805542,0.9284121990203856,0.0,accept,unanimous_agreement
883507503,2805,"old implementation is a bit confusing, now it looks ok",-1,-1,0,0.5669598579406738,0.750929057598114,0.5302985310554504,-1.0,accept,majority_agreement
883521708,2805,`bissecondchannel` didn't change before,0,0,0,0.9857564568519592,0.9895753860473632,0.9941341280937196,0.0,accept,unanimous_agreement
883523822,2805,"if i understand correctly the meaning of `mchannelindex` this check won't yield same results as before, because `j` now increments only inside the new inner loop",0,0,0,0.9856362342834472,0.987278938293457,0.9902554154396056,0.0,accept,unanimous_agreement
883537115,2805,could be `wxstring::lower` [a link],0,0,0,0.9872907996177672,0.9929201006889344,0.993375837802887,0.0,accept,unanimous_agreement
1201670899,2805,can you get the number of leaders and call `minitialtrackselection.reserve(numleaders)` ?,0,0,0,0.9885834455490112,0.9944471120834352,0.9954503178596495,0.0,accept,unanimous_agreement
1201696072,2805,const,0,0,0,0.9770036339759828,0.9538535475730896,0.8837863802909851,0.0,accept,unanimous_agreement
1201708989,2805,"would you mind explaining what this select command modes represent ? a quick exploration of audacity's ui didn't bring an answer. i couldn't even find the command ""select tracks"". i'd like to understand this as it might be something to be tested.",0,0,0,0.9631863832473756,0.9563995003700256,0.9498222470283508,0.0,accept,unanimous_agreement
1201719313,2805,const,0,0,0,0.9770036339759828,0.9538535475730896,0.8837863802909851,0.0,accept,unanimous_agreement
1201730053,2805,"i wouldn't mind a type specifier here, i.e. `for (track* channel : ...)` ; would spare readers like me wondering if we're unnecessarily increasing a smart pointer ref count.",0,0,0,0.9145755767822266,0.8635669350624084,0.9622125029563904,0.0,accept,unanimous_agreement
1201736815,2805,"i also don't see how i can excite this code, i don't find a ""set track status"" command. (two lines below)",0,0,0,0.9371559023857116,0.9339739084243774,0.9857699871063232,0.0,accept,unanimous_agreement
1201747535,2805,was moving `pnewleft->setselected(!tonewtrack);` downwards necessary? else the diff could have been kept lower by just deleting this line.,0,0,0,0.9835061430931092,0.9933295249938964,0.99206805229187,0.0,accept,unanimous_agreement
1201783939,2805,:thumbs_up:,0,0,1,0.8380307555198669,0.9771975874900818,0.9533231854438782,0.0,accept,majority_agreement
1201784256,2805,:thumbs_up:,0,0,1,0.8380307555198669,0.9771975874900818,0.9533231854438782,0.0,accept,majority_agreement
1201807441,2805,"using a binary `enum class allchannels { yes, no }` instead of a bool would be more work but ease the reading where it's used.",0,0,0,0.9871767163276672,0.9923350214958192,0.9918292164802552,0.0,accept,unanimous_agreement
1201881008,2805,i'd be glad for an explanation of this setting. i found it in the preferences but couldn't observe any effect.,1,1,1,0.906536877155304,0.9447461366653442,0.6983336210250854,1.0,accept,unanimous_agreement
1201948075,2805,... in fact i can't see a place in the code where the enum value is changed :thinking_face: either we have a bug or this preference could be removed altogether.,0,0,0,0.8887076377868652,0.5203070640563965,0.6165228486061096,0.0,accept,unanimous_agreement
1202444035,2805,"i could, though i doubt this would bring much advantage.",0,0,0,0.8810936212539673,0.9465218782424928,0.959198832511902,0.0,accept,unanimous_agreement
1202598554,2805,"the added argument in notify is only for transitional states of the big code transformation. ultimately it will be removed again, though not in this pull request.",0,0,0,0.9887452721595764,0.9931275844573976,0.9931679368019104,0.0,accept,unanimous_agreement
1202607149,2805,see this line in tracksbehaviorsprefs.cpp: [code block] the second argument is by reference. that code constructs a dialog that may modify the setting.,0,0,0,0.988140106201172,0.9926354289054872,0.9949209094047546,0.0,accept,unanimous_agreement
1203514813,2805,thanks to your explanation yesterday i could debug that. looks good.,1,1,1,0.9738369584083556,0.9901620149612428,0.9680925607681274,1.0,accept,unanimous_agreement
1203524672,2805,"found out, cool stuff.",1,1,1,0.9390962719917296,0.98306804895401,0.989837646484375,1.0,accept,unanimous_agreement
1234777260,4795,"if `pleader` is a raw pointer, then you don't need the conditional operator, just pass `pleader`.",0,0,0,0.9886166453361512,0.9924437403678894,0.994280219078064,0.0,accept,unanimous_agreement
1234802568,4795,"oh, i'm surprised here to see a per-project effect list. is it here in anticipation of the future master effect stack?",-1,-1,-1,0.4956761002540588,0.8886330723762512,0.5242002606391907,-1.0,accept,unanimous_agreement
1234817130,4795,"i vaguely remember you saying that `wavetrack` might at some stage not be a `track` anymore. maybe i'm remembering wrongly or you were not serious, else would this line become a problem then?",0,0,0,0.7948921322822571,0.7954431772232056,0.9555728435516356,0.0,accept,unanimous_agreement
1234836216,4795,"excellent, just what my `stretchingsequence` will need.",1,1,1,0.948284387588501,0.9884495735168456,0.9783053994178772,1.0,accept,unanimous_agreement
1234844600,4795,"(github wouldn't let me ""comment on this file"" for some reason.) it's a little bit more work but not useless work to have one header per abstract class. seeing `audioiosequences.h` i thought ""what could be a `class audioiosequences` ?...""",0,0,0,0.7186013460159302,0.7508403658866882,0.7028547525405884,0.0,accept,unanimous_agreement
1234856901,4795,"i never saw abstract interfaces being used for classification like that before. wouldn't simply adding a `isplayable` interface to `track` have done the job? if so i'd prefer that, to spare readers like me some eyebrow lifting.",0,0,0,0.8506346940994263,0.9657872915267944,0.9392057061195374,0.0,accept,unanimous_agreement
1234859175,4795,"the indent is awkward, it took me longer than necessary to make sure that `result.otherplayablesequences.push_back(psequence);` resulted from the `if`.",0,-1,-1,0.8561182022094727,0.8961451053619385,0.9775587916374208,-1.0,accept,majority_agreement
1234866817,4795,"to be kept in mind, but nothing to address in this pr: the `stretchingsequence::get` requiring a modification of its state, i'd like at some stage to have these `constplayablesequences` become non-const. right now i'm using a const_cast.",0,0,0,0.9792861342430116,0.9852860569953918,0.9891164898872375,0.0,accept,unanimous_agreement
1234877150,4795,thank you!,1,1,1,0.9661415219306946,0.9148550629615784,0.9448403120040894,1.0,accept,unanimous_agreement
1234879141,4795,`mplaybackbuffers.clear()` ?,0,0,0,0.9861634373664856,0.993658483028412,0.9937676191329956,0.0,accept,unanimous_agreement
1234881700,4795,you have something against `std::min_element` ?,0,0,0,0.9699884057044984,0.9941934943199158,0.9948523640632628,0.0,accept,unanimous_agreement
1234884120,4795,"in any case, thanks for the clean-up.",0,1,1,0.5852762460708618,0.8490246534347534,0.8448635339736938,1.0,accept,majority_agreement
1234916925,4795,"`t` is only used to index `mplaybacksequences`, hence a range loop would be appropriate and make this code a wee bit easier to understand.",0,0,0,0.9770007729530334,0.9906082153320312,0.9915260672569276,0.0,accept,unanimous_agreement
1234966600,4795,"you've called this `nchannels` elsewhere, better stay consistent to ease reading.",0,0,0,0.9775851368904114,0.9902966618537904,0.9901036024093628,0.0,accept,unanimous_agreement
1234971515,4795,can probably be `const`?,0,0,0,0.9874494075775146,0.9928116202354432,0.9924364686012268,0.0,accept,unanimous_agreement
1234975257,4795,or `std::copy_if`,0,0,0,0.987309753894806,0.993282675743103,0.9932924509048462,0.0,accept,unanimous_agreement
1237758611,4795,exactly!,0,1,0,0.9351991415023804,0.955691933631897,0.984325647354126,0.0,accept,majority_agreement
1237759798,4795,"in fact, the global effect list was a thing before 3.2, in the limited implementation of real-time effects then. it is now hidden but may be revealed again.",0,0,0,0.985742211341858,0.984261155128479,0.992920219898224,0.0,accept,unanimous_agreement
1237766576,4795,"wavetrack will remain a kind of track but wavechannel will be a thing representing a part of the track. but realtimeeffectmanager will still know widesampesequence objects which will still correspond to trakcs, not channels.",0,0,0,0.9874134063720704,0.9879277348518372,0.9912469983100892,0.0,accept,unanimous_agreement
1237774889,4795,"i do not agree to any rule classes should correspond one to one with header files. sometimes the atomization is excessive. that’s a judgment, not a precise criterion. sometimes too it is proper to have closely cooperating classes in one header file if the alternative is cyclic dependency, though that does not apply in this case.",0,0,0,0.8585294485092163,0.8323161602020264,0.9791271090507508,0.0,accept,unanimous_agreement
1237776383,4795,"no. track is a dirty legacy class with too many duties, which i am trying to remove from lob-audio-io.",-1,0,-1,0.9791060090065002,0.6120878458023071,0.967881977558136,-1.0,accept,majority_agreement
1237781518,4795,"a matter of taste. i find that i like indentation styles in which the variation of the leftmost column helps me to scan it and separate the parts. in this case, separating a long condition expression that doesn’t fit on one line, from the consequent statement.",1,0,0,0.4945025146007538,0.5827686786651611,0.969828724861145,0.0,accept,majority_agreement
1237786971,4795,"i’m still not persuaded. i still feel like this abstract interface should be stateless, and any dependency on the history of the pattern of access in the concrete class justifies the use of mutable members.",-1,0,0,0.7284529805183411,0.6471939086914062,0.737008273601532,0.0,accept,majority_agreement
1237789151,4795,"true, no difference for changes of capacity and for whatever small performance advantage.",0,0,0,0.9794156551361084,0.9668381810188292,0.9793524146080016,0.0,accept,unanimous_agreement
1237789810,4795,"min_element returns an iterator, not a value",0,0,0,0.9875863790512084,0.9872726798057556,0.9930291771888732,0.0,accept,unanimous_agreement
1237794495,4795,"good idea, that was not true before the transformation but it is now",1,1,1,0.8991333246231079,0.9605068564414978,0.96861332654953,1.0,accept,unanimous_agreement
1237796289,4795,"but there is a distinction to make, between the sample sequences of project data, and the number of device channels. they may go many to one.",0,0,0,0.9844402074813844,0.9870030283927916,0.9883583188056946,0.0,accept,unanimous_agreement
1237797087,4795,"maybe, small advantage to readability, and i strongly doubt it makes any difference in performance",0,0,-1,0.8899915218353271,0.6671697497367859,0.5181267857551575,0.0,accept,majority_agreement
1237799236,4795,good,1,1,1,0.9150943756103516,0.93613862991333,0.8759189248085022,1.0,accept,unanimous_agreement
1237799301,4795,"but there is a distinction to make, between the sample sequences of project data, and the number of device channels. they may go many to one.",0,0,0,0.9844402074813844,0.9870030283927916,0.9883583188056946,0.0,accept,unanimous_agreement
1237799680,4795,"small advantage for readability, none for performance",0,0,0,0.9662891030311584,0.9010788798332214,0.920632779598236,0.0,accept,unanimous_agreement
1237802790,4795,"yeah, but i would need a lambda or std::mem_fn",0,0,0,0.8094294667243958,0.982833743095398,0.9925956130027772,0.0,accept,unanimous_agreement
1238124756,4795,"i suppose that's an inconvenience of the decorator approach. the users see no distinction between the `wavetrack` implementations (const) and the stretching ones (mutable). to be transparent as to what really is const and what isn't, we would have needed a solution where the mixer gets a const `wavetrack` (if needed at all) and a mutable `sequencerealtimeprocessor`. in practice we're all right, though, so long as the same `stretchingsequence` isn't used by different threads, which i don't see happening.",0,0,0,0.9186729192733764,0.8874294757843018,0.931318461894989,0.0,accept,unanimous_agreement
1238128676,4795,"of course, you have to dereference the return, but unless there is a risk `buffers` is empty, `min_element` never returns `end()`.",0,0,0,0.9858971238136292,0.99160236120224,0.99246746301651,0.0,accept,unanimous_agreement
1440563161,5839,banners,0,0,0,0.9653770327568054,0.956121861934662,0.9793654680252076,0.0,accept,unanimous_agreement
1440565838,5839,"these are not necessary to compile what is below. if they are required in other places that include this header, i would move them there.",0,0,0,0.9884810447692872,0.9932536482810974,0.9936304688453674,0.0,accept,unanimous_agreement
1440580244,5839,maybe return `nullopt` instead. elsewhere you write a function taking `optional `,0,0,0,0.988667905330658,0.993819773197174,0.99095356464386,0.0,accept,unanimous_agreement
1440581028,5839,remind the reader that `{}` means undefined time signature,0,0,0,0.9855022430419922,0.988864541053772,0.9936186075210572,0.0,accept,unanimous_agreement
1440591396,5839,you might replace the first two with forward declarations of incomplete types.,0,0,0,0.98554790019989,0.976807415485382,0.9931013584136964,0.0,accept,unanimous_agreement
1440597570,5839,"the comment is inconsistent with the code, which is right? you might try `std::mismatch` and might then not need the length comparison -- you expect just to get the end iterator of the prefix.",0,0,0,0.9787757396697998,0.9842995405197144,0.9869322180747986,0.0,accept,unanimous_agreement
1440617649,5839,why does a module have a unit test? can this go to `lib-file-formats`? i like a banner comment in each `cmakelists.txt` delimited by [code block],0,0,0,0.8545673489570618,0.9907832145690918,0.9928523898124696,0.0,accept,unanimous_agreement
1440618611,5839,see other examples. that banner just summarizes the purpose of the library.,0,0,0,0.9864894151687622,0.9839596152305604,0.9922519326210022,0.0,accept,unanimous_agreement
1440621480,5839,i'm failing to configure the build for macos: [code block],-1,-1,0,0.764370858669281,0.6975372433662415,0.8826428651809692,-1.0,accept,majority_agreement
1440623778,5839,yes: see fe2caec,0,0,0,0.984025537967682,0.978146493434906,0.993081033229828,0.0,accept,unanimous_agreement
1440625224,5839,"ok, i see you fixed the configuration problem. this completes a round of review.",0,0,0,0.9722051620483398,0.976979434490204,0.9462110996246338,0.0,accept,unanimous_agreement
1440638643,5839,"i agree, that's better.",0,0,0,0.8858808875083923,0.7339937686920166,0.5721462368965149,0.0,accept,unanimous_agreement
1440720209,5839,"works for the acidizertags, but with sndfile i get the `redifinition with different basic type` error, don't know why.",0,0,0,0.921277642250061,0.8607754707336426,0.9535330533981324,0.0,accept,unanimous_agreement
1440721353,5839,i found an easier approach: remove trailing nulls (due to byte-padding for word alignment it would seem) and exactly compare the strings.,0,0,0,0.9841229319572448,0.9683103561401368,0.9886598587036132,0.0,accept,unanimous_agreement
1440970154,5839,you might also forward declare `sndfile`,0,0,0,0.9888612627983092,0.9934845566749572,0.9961589574813844,0.0,accept,unanimous_agreement
1442835173,5839,"emphasize with a comment, this should not be `auto`",0,0,0,0.9757589101791382,0.9849804639816284,0.9923784732818604,0.0,accept,unanimous_agreement
1442836478,5839,might move this line up and eliminate a few repeated expressions,0,0,0,0.987239420413971,0.9782760143280028,0.9904869198799132,0.0,accept,unanimous_agreement
1442840162,5839,although both sizes happen to be 4 so it will work -- still the change in the last argument should be reverted.,0,0,0,0.9847375750541688,0.982111930847168,0.9840831160545348,0.0,accept,unanimous_agreement
1442843720,5839,"i would make `file` a reference. otherwise it needs a null check to make me confident. it is just passed to a sndfile function, which is c style, but i don't know whether the library does null checks or would crash. better to use c++ style in this wrapper level.",0,0,0,0.96906179189682,0.9659624099731444,0.9849153757095336,0.0,accept,unanimous_agreement
1442846936,5839,why not propagate the error out of this function and let the caller decide whether to eat it?,0,0,0,0.9576483368873596,0.9815860390663148,0.9817296862602234,0.0,accept,unanimous_agreement
1446660741,5839,thanks,1,0,1,0.6094269156455994,0.5400217771530151,0.8643599152565002,1.0,accept,majority_agreement
1446663359,5839,"reworked that utility code, this isn't an issue anymore.",0,0,0,0.9609888195991516,0.9624401330947876,0.9853078126907348,0.0,accept,unanimous_agreement
1446666190,5839,"i don't expect this to be an issue beyond development of this utility, and am lazy handling it on the client side.",-1,0,0,0.940923511981964,0.9512786269187928,0.5682666301727295,0.0,accept,majority_agreement
1449177379,5839,this utility is used only for tests?,0,0,0,0.9872114062309264,0.9904927611351012,0.9938493371009828,0.0,accept,unanimous_agreement
1449179896,5839,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
1449478588,5839,"this suggests to me, maybe you might like instead, simply `using acidizertags = std::variant ;`",0,0,0,0.9755938649177552,0.993188977241516,0.9907724857330322,0.0,accept,unanimous_agreement
1449481096,5839,or not...,-1,0,0,0.6072701811790466,0.9514156579971312,0.9698233008384703,0.0,accept,majority_agreement
1454004231,5839,you might simplify away these two constructors with `using libfileformats::acidizertags::acidizertags`,0,0,0,0.9865180850028992,0.994865357875824,0.9939316511154176,0.0,accept,unanimous_agreement
1088873480,4033,this macro isn't needed and the named class doesn't exist,0,0,0,0.9825238585472108,0.9879226088523864,0.9932683110237122,0.0,accept,unanimous_agreement
1088878176,4033,these string literals are repeated in tracksbehaviorsprefs.cpp. eliminating duplication might be nice but in this case is not very important. no bug would result if they were differently modified. the strings are not used as identifiers.,0,0,0,0.98256653547287,0.9830430150032043,0.9887804985046388,0.0,accept,unanimous_agreement
1088884895,4033,"what is now asserted instead of checked, should be commented above the function too as the precondition it assumes.",0,0,0,0.9859501719474792,0.9931442737579346,0.992355227470398,0.0,accept,unanimous_agreement
1088887895,4033,"the third commit has no errors, but i don't yet see what code duplication is removed as the commit comment says. or rather, this is allowing something to be reused?",0,0,0,0.9837840795516968,0.9699304103851318,0.9914152026176452,0.0,accept,unanimous_agreement
1088904428,4033,"here, assume negation of the while-condition: `dsttrack == dsttrackrange.end() || srctrack == srctrackrange.end()`",0,0,0,0.9847180247306824,0.9944022297859192,0.9942440390586852,0.0,accept,unanimous_agreement
1088904845,4033,"therefore, `srctrack == srctrackrange.end()`",0,0,0,0.9865238666534424,0.9928364157676696,0.9942687749862672,0.0,accept,unanimous_agreement
1088905605,4033,"but what about the other possibility, that destination tracks ran out before source tracks? don't you need to check that and visit extra source tracks? you do that at the top of the function, only when there are zero destination tracks.",0,0,0,0.9868298172950744,0.9899481534957886,0.989974319934845,0.0,accept,unanimous_agreement
1088907770,4033,"here and elsewhere that you call `f`, what proves that there is not a null dereference? track iterators are allowed to dereference an end iterator, getting a null, but then the second dereference might be unsafe. the function would look better with a test for empty src and early exit.",0,0,0,0.9869515895843506,0.9909870028495787,0.9909206628799438,0.0,accept,unanimous_agreement
1088910295,4033,"the algorithm in `foreachcopiedwavetrack` might visit one source track multiple times and count its space multiply in the estimate. this isn't needed for copying and pasting within a project because of the sharing of data. rather than all this work, it suggests to me that cross-project copying and pasting needs a smarter algorithm to replicate the graph structure and pattern of sharing. this could prevent explosion of file sizes in the first place without so much need to warn about it.",0,0,0,0.9591416716575624,0.989613115787506,0.9869440793991088,0.0,accept,unanimous_agreement
1092026457,4033,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
1092027700,4033,"agreed, though not very clear where exactly such strings could be placed",0,0,0,0.978646993637085,0.9475120902061462,0.9856514930725098,0.0,accept,unanimous_agreement
1092040429,4033,"clipboard access and double checking on same condition (`!tracks.selected()`) - `dopastenotingselected` assumes that nothing is selected... but i agree that commit message isn't very clear, i'll change it to `audio paste code simplification`",0,0,0,0.9578887224197388,0.9734213948249816,0.9942834973335266,0.0,accept,unanimous_agreement
1092127119,4033,"when copying tracks we consider two cases when pasting: 1) there is no selection 2) not empty region is selected in the first case we copy **all tracks** from `src` (used in simplified paste method `dopastenothingselected`). when selection isn't empty `n = min(src.size(), dst.size())` tracks are copied from `src`, plus the **last track** from `src` could be duplicated `m = dst.size() - n` times more, if `m > 0` (corresponds to a paste logic after `!tracks.selected()` condition in `onpaste`). in both cases `foreachcopiedwavetrack` visits tracks that are to be copied according to behaviour described above. does that answers your questions?",0,0,0,0.9799638390541076,0.9940193891525269,0.9943789839744568,0.0,accept,unanimous_agreement
1092139420,4033,"not sure that understand your question. `dst` is allowed to be empty, `src` is expected to be not empty (and it can't have null tracks, right?). i don't see where null pointer dereference could happen in that case. i can comment about preconditions, but it's not a publicly available function which's purpose is to simplify implementation of another function.",0,0,0,0.94760000705719,0.9623292684555054,0.8943549990653992,0.0,accept,unanimous_agreement
1092145210,4033,also it's possible that different source tracks can reference same blocks,0,0,0,0.9871279001235962,0.9853565096855164,0.9891812205314636,0.0,accept,unanimous_agreement
1097389776,4033,"yes, i accept this reasoning. but then the new function should have a comment containing this explanation. reading the function in isolation made me question it.",0,0,0,0.8920808434486389,0.9343934655189514,0.94288432598114,0.0,accept,unanimous_agreement
1097396828,4033,"right, to prove no null dereference happens, you must assume src is not an empty track list, and that is guaranteed at the call site. it's all happening within one file, yes, so i won't be pedantic about stating preconditions.",0,0,0,0.8377849459648132,0.9742560982704164,0.988548755645752,0.0,accept,unanimous_agreement
1110074000,4033,"i assume all visible design and wording changes were prescribed by someone else, but i think ""any time"" is more proper english usage. although grammarly just told me it's considered acceptable as one word now.",0,0,0,0.976504385471344,0.9575179815292358,0.9782706499099731,0.0,accept,unanimous_agreement
1110080007,4033,"grammarly says: and in a similar vein the guardian style guide (my personal touchstone in such matters) somewhat jocularly says: and here's the microsoft guide: [a link] so, i'm minded to agree with -licameli that it would be better as ""any time"" with the space. and i'm also minded to think that it would read better as ""allowing you to access trimmed data at any time"" - _with the ""added ""**at**""_",0,0,0,0.4919377863407135,0.7439107894897461,0.8573824167251587,0.0,accept,unanimous_agreement
1085667628,4171,"if i wrote this, i would do the extra work to define a .cpp file, so that (1) at least one .cpp file in the system includes the header file before any other, guaranteeing that the header is self-sufficient for compilation; and (2) making out-of-line functions doing most of the work that doesn't depend on the template type parameter, leaving only small template functions in the header to be inlined. see for instance observer, which separates an out-of-line, ""type erased"" part. i don't insist that you follow the suggestion for this pr.",0,0,0,0.967528223991394,0.9804930090904236,0.988200306892395,0.0,accept,unanimous_agreement
1085671947,4171,it would also make sense to put this file in src/wrappers. the class resembles `wxpanelwrapper` for instance. but i don't insist. library extractions might soon upset the folder organization anyway. although a library for src/wrappers would definitely be a non-toolkit-neutral part of the program until we figure out better abstractions.,0,0,0,0.964527666568756,0.9836766123771667,0.9707660675048828,0.0,accept,unanimous_agreement
1085678861,4171,"ditto, suggestion about folder placement. i don't insist.",0,-1,0,0.9376041889190674,0.5115007758140564,0.9529210925102234,0.0,accept,majority_agreement
1085696529,4171,"and this file. but whatever the folders they are in, it is good to see realtimeeffectpanel shrink to its essentials.",0,0,0,0.8405819535255432,0.7571460008621216,0.5449157953262329,0.0,accept,unanimous_agreement
1085699734,4171,this comment got lost in the cut and paste.,0,0,0,0.8470079302787781,0.8379043936729431,0.8894899487495422,0.0,accept,unanimous_agreement
1085700720,4171,"and if restored, it should also be more complete, describing what the event handlers accomplish.",0,0,0,0.986151397228241,0.9873442649841307,0.9938910007476808,0.0,accept,unanimous_agreement
1085710313,4171,do all these #include directives compile on all platforms? i thought ../ would be needed in some of them.,0,0,0,0.9838711023330688,0.9892026782035828,0.990208387374878,0.0,accept,unanimous_agreement
1085729918,4171,maybe a more suggestive name? pluginmenubuilder?,0,0,0,0.9820615649223328,0.9886099100112916,0.9730389714241028,0.0,accept,unanimous_agreement
1085732024,4171,not reachable with default experimental.cmake but it's good you noticed it,1,1,1,0.7765697836875916,0.8127136826515198,0.9301226735115052,1.0,accept,unanimous_agreement
1085736854,4171,"i see one use of save() not followed by the publication, and that is in `pluginmanager::initializeplugins()`. is that right or wrong?",0,0,0,0.970355987548828,0.9936862587928772,0.990192413330078,0.0,accept,unanimous_agreement
1085739171,4171,"not wrong, i see, because the only subscriber is realtimeeffectlistwindow which cannot possibly be constructed earlier than that initialization.",0,0,0,0.970696985721588,0.975699782371521,0.9847598671913148,0.0,accept,unanimous_agreement
1085753030,4171,"""its"" not it's",0,0,0,0.8791370391845703,0.954628050327301,0.9232506155967712,0.0,accept,unanimous_agreement
1085765993,4171,"the constructor makes subscriptions. `resettrack()` destroys both subscriptions. `settrack()` restores the old subscription to non-null, but not the new one. is that right or wrong?",0,0,0,0.9505908489227296,0.978679656982422,0.9894724488258362,0.0,accept,unanimous_agreement
1085770239,4171,i am glad to see you figured out the usage of menuvisitor! i hope it did not seem unnecessarily difficult. if you gained some more understanding of registry.h and registry.cpp that is good -- they need some re-work which will need careful review by someone.,1,1,1,0.9893445372581482,0.9947525262832642,0.9944061040878296,1.0,accept,unanimous_agreement
1085790643,4171,this repeated lambda might be a local variable defined once,0,0,0,0.9866067171096802,0.9890549182891846,0.992352306842804,0.0,accept,unanimous_agreement
1085794586,4171,"i checked the function again to see what these two {}s are -- and i discovered, `realflags` is passed around among many functions in menuhelper.cpp but never used! i don't know where in source code history it became unused -- but you have an opportunity to simplify with one more commit.",0,0,0,0.9309234619140624,0.8991569876670837,0.8785091638565063,0.0,accept,unanimous_agreement
1086585722,4171,"i believe so, yes. if i remember correctly `src` folder is added to include directories somewhere in cmake",0,0,0,0.9649677276611328,0.9668928980827332,0.9811534881591796,0.0,accept,unanimous_agreement
1086586960,4171,it used to provide macros menu helpers too. and it doesn't build menus,0,0,0,0.9738304018974304,0.980878472328186,0.990957260131836,0.0,accept,unanimous_agreement
1086593332,4171,"`mpluginschangedsubscription.reset()` shouldn't be here, thanks!",1,1,0,0.8223753571510315,0.9770079851150512,0.6268369555473328,1.0,accept,majority_agreement
1086595431,4171,"had to spend some time to figure out how it works, yes :)",1,1,0,0.9619333148002625,0.9903653860092164,0.8462859392166138,1.0,accept,majority_agreement
1086619354,4171,yep,0,0,0,0.9712458848953248,0.8459084630012512,0.7848060131072998,0.0,accept,unanimous_agreement
1086642480,4171,tracked it down to c3db93c . i guess that was removed intentionally.,0,0,0,0.9845290780067444,0.9855506420135498,0.9898663759231568,0.0,accept,unanimous_agreement
1087817905,4171,you made the suggested simplification to remove duplication. amusingly: you could even simplify this more to: [code block] the implicit constructor of `std::function` used when you call `menuhelper::populateeffectsmenu` works even when the template parameter is of type pointer-to-member-function.,0,1,0,0.8878077864646912,0.6602126955986023,0.9928345680236816,0.0,accept,majority_agreement
1109800197,4171,"the definition of `isrealtimenotactiveflag` is in this file. it becomes unused, so may be deleted too.",0,0,0,0.9854334592819214,0.9935742020606996,0.994987964630127,0.0,accept,unanimous_agreement
1109822540,4171,maybe you could use composition instead of inheritance: a member of a type inheriting prefslistener. then you would not need to play with type traits to pass through to the base. instead updateprefs is directly invoked directly on this member and on the base class to do different unrelated things that can happen in either sequence.,0,0,0,0.9880439639091492,0.9930994510650636,0.9853830337524414,0.0,accept,unanimous_agreement
1109827312,4171,"this variable is not longer used, so remove it too",0,0,0,0.9776795506477356,0.9810466170310974,0.9929929971694946,0.0,accept,unanimous_agreement
1109846173,4171,"a wise comment. i like it that you are aware of dependencies you add. but i checked that this does not add a dependency cycle. true, it may still be an undesirable dependency, but we can figure out some trick to break it if we need that later.",1,1,1,0.979816198348999,0.9624770283699036,0.9902371764183044,1.0,accept,unanimous_agreement
1109912192,4171,"... or maybe, even without composition, all you need is: [code block]",0,0,0,0.9740731716156006,0.9897419214248656,0.991436779499054,0.0,accept,unanimous_agreement
1399351314,5653,when included from another library that macro will expand into [code block],0,0,0,0.9890544414520264,0.9906604886054992,0.9952671527862548,0.0,accept,unanimous_agreement
1399642138,5653,i see many c4661s: [code block],0,0,0,0.985559344291687,0.9808295965194702,0.9935746788978576,0.0,accept,unanimous_agreement
1399671727,5653,"there is also at least one `mclips.push_back` in `insertclip`, which is used in many places. but `insertclip` may start send lots of redundant/unwanted messages on projects that have many clips. so i don't understand why `onnewclip` is not in `insertclip`, but simple insertion of it seem to be too ""dirty"" fix.",-1,0,0,0.5377357602119446,0.9042366743087769,0.961145520210266,0.0,accept,majority_agreement
1399684315,5653,why not observer?,0,0,0,0.9416574835777284,0.966401755809784,0.9848847389221193,0.0,accept,unanimous_agreement
1399689038,5653,`deserialization` flag feels like extra parameter,0,0,0,0.9840793013572692,0.9906931519508362,0.9519871473312378,0.0,accept,unanimous_agreement
1399694565,5653,"my guess is that there will be an extra call to `setcolorindex` during deserialization: one from `onnewclip`, and second in `handlexmlattribute`, right?",0,0,0,0.986493706703186,0.9937098026275636,0.9875895380973816,0.0,accept,unanimous_agreement
1399737435,5653,"as linked in crtpbase.h, it's recommended here: [a link] i use the same in `extract-lib-note-track` which has passed code review but is not yet merged into master.",0,0,0,0.9882700443267822,0.9909210205078124,0.9955961108207704,0.0,accept,unanimous_agreement
1399738822,5653,see the bottom of that page,0,0,0,0.9817335605621338,0.9868786931037904,0.9926652312278748,0.0,accept,unanimous_agreement
1399741865,5653,i see the same in the logs for the build of `extract-lib-note-track`. i think i should instead give an inline '{}' body to the dtor in the class definition and let the linker de-duplicate it.,0,0,0,0.988464057445526,0.993331015110016,0.9909172654151917,0.0,accept,unanimous_agreement
1400428663,5653,"how would i create the observers and the subscriptions if wavetrack is the publisher? each new wavetrack must inform its own listener, which has its own separate state (the wave track color), of the event of addition of clips. so the listener must be created too with each wavetrack -- and that's where `clientdata` is useful, if also i use `buildall` instead of creation on demand. it allows hooking of a constructor of a class. and i need `buildall` so that the new attached object is present from the beginning, before any clips are created or deserialized. but you are right that i could then also use observer instead of this class. there is the problem of getting deep-copy right, but that is what `reparent` is for.",0,0,0,0.978158950805664,0.9842110276222228,0.976408064365387,0.0,accept,unanimous_agreement
1400429819,5653,"i'm not sure of the complete set of messages that will be useful in future. i could easily use observer and an enumeration now for creation, deserialization, deletion, ...",-1,0,0,0.7426597476005554,0.949082374572754,0.6833458542823792,0.0,accept,majority_agreement
1400431032,5653,"yes, does it matter much? it would matter in case a file serialized wave color without clip color, but then the clip colors would still be initialized. i don't think there are any such legacy files, though.",0,0,0,0.9786529541015624,0.9830247163772584,0.989340364933014,0.0,accept,unanimous_agreement
1407510341,5653,i think we should revise the usage of crtpbase in a separate pr. i have opened a task for that #5704,0,0,0,0.9772607684135436,0.9853426218032836,0.9838783740997314,0.0,accept,unanimous_agreement
1484049761,5653,"serializable cache is not a usual thing, tbh",0,0,0,0.9826708436012268,0.5503278374671936,0.9678021669387816,0.0,accept,unanimous_agreement
1484057855,5653,"i think this violates srp and in a bad way. i missed it somehow, during the first pass of the review, but it caught my eye when i saw color index serialization in the wave cache.",-1,-1,-1,0.9108294248580932,0.8803588151931763,0.9556484818458556,-1.0,accept,unanimous_agreement
1492104404,5653,"i have a strong opinion that the fix is worse than the problem. i understand that it is pointless to argue. otherwise, my review would've ended here.",-1,-1,0,0.8509901165962219,0.8542248606681824,0.5872217416763306,-1.0,accept,majority_agreement
1952468963,8211,could probably be `const` ?,0,0,0,0.9866586327552797,0.9938522577285768,0.9901934266090392,0.0,accept,unanimous_agreement
1952482053,8211,"this guy is a `static` and the `updatemanager` is also a static. maybe make it a const, non-optional member of the manager ?",0,0,0,0.9828540086746216,0.994282841682434,0.991676926612854,0.0,accept,unanimous_agreement
1952487646,8211,"being paranoid: i guess it's better not to share uuid although the user gave her consent than the other way round, right? in that case, `result == wxok` would be stricter and hence safer.",-1,0,0,0.8901146650314331,0.9486932158470154,0.7835088968276978,0.0,accept,majority_agreement
1952488815,8211,(you could even write an `assert(result == wxok || result == wxno)`),0,0,0,0.9888309836387634,0.994647204875946,0.9946460723876952,0.0,accept,unanimous_agreement
1952490227,8211,spelling ;),0,1,0,0.6583893895149231,0.9933679699897766,0.8659493327140808,0.0,accept,majority_agreement
1952494395,8211,i'm lazy - could you explain why we need this line?,-1,-1,-1,0.9466964602470398,0.6291046142578125,0.9443755149841307,-1.0,accept,unanimous_agreement
1952522083,8211,just curious: what's the leading `x` for ?,0,0,0,0.9768442511558532,0.9338414669036864,0.9833729863166808,0.0,accept,unanimous_agreement
1952554437,8211,"i see that not all `request`s are subject to optional headers, e.g. in `downloadavatar`. what's the rule of thumb here ?",0,0,0,0.9867205619812012,0.9918144345283508,0.9920803904533386,0.0,accept,unanimous_agreement
1952561692,8211,"it was asked from the backend team, not sure about that",0,0,0,0.945048451423645,0.8009926080703735,0.9582787156105042,0.0,accept,unanimous_agreement
1952563442,8211,yes :grinning_face_with_sweat:,-1,0,1,0.3728278875350952,0.9868387579917908,0.9546302556991576,,review,no_majority_disagreement
1952565478,8211,"yes, it should be const",0,0,0,0.9804285168647766,0.9838986992836,0.9916676878929138,0.0,accept,unanimous_agreement
1952571356,8211,"we are setting these headers only for requests sent to the audio.com backend. avatars and project data requests are sent to the storage, and they do not require those.",0,0,0,0.9881960153579712,0.994551718235016,0.9942149519920348,0.0,accept,unanimous_agreement
1952574816,8211,"after the preferences window is closed, the configuration file is updated, but the option objects may contain cached data that needs to be updated.",0,0,0,0.9878199100494384,0.9930444359779358,0.9918606877326964,0.0,accept,unanimous_agreement
1952598613,8211,"that's a good point, it makes sense.",1,1,1,0.8771464824676514,0.8561716675758362,0.9739742875099182,1.0,accept,unanimous_agreement
1952646690,8211,"ok, so i should not expect any `setoptionalheaders` outside the lib-cloud-audiocom module. still i find it hard to figure out which requests should have the uuid and which not. is there an explicit list someplace, or anything to help code readers?",0,0,0,0.6836903095245361,0.9854876399040222,0.8830062747001648,0.0,accept,unanimous_agreement
1953009270,8211,"yes no, i don't think so",0,0,0,0.5943126082420349,0.7989275455474854,0.9818229675292968,0.0,accept,unanimous_agreement
1609888328,6472,"it may be better to pass the entire context as a property, this is done in other places, this can be useful when more properties from it are needed (for example, a selected loop)",0,0,0,0.9836837649345398,0.9928057789802552,0.991564393043518,0.0,accept,unanimous_agreement
1609897022,6472,"no objections, but for information, the theme can be used in the cpp directly, like this [code block]",0,0,0,0.9849157333374025,0.9900107979774476,0.9867289662361144,0.0,accept,unanimous_agreement
1609915563,6472,"at the moment, the reasons why we need to have a base class with virtual methods and an inheritor are not clear. i believe this is not necessary.",-1,0,0,0.7794909477233887,0.9753491282463074,0.9862240552902222,0.0,accept,majority_agreement
1609916455,6472,in au4 we don't use singletons,0,0,0,0.9792593717575072,0.9820828437805176,0.98827064037323,0.0,accept,unanimous_agreement
1609919823,6472,"i think it’s possible in one line... (in au3, in my opinion, the code width is too small, i think this is a legacy of many years ago, when there were small monitors with low resolution)",0,0,0,0.9049108624458312,0.9753059148788452,0.959014356136322,0.0,accept,unanimous_agreement
1609931800,6472,"it's best to avoid in-out arguments unless clearly necessary. for example, here i think it’s better to do this: [code block]",0,0,0,0.974640965461731,0.983796000480652,0.9905912280082704,0.0,accept,unanimous_agreement
1609933644,6472,missing return?,0,0,0,0.9283588528633118,0.968605935573578,0.9871187210083008,0.0,accept,unanimous_agreement
1609937809,6472,better [code block],0,0,0,0.9670498371124268,0.9641659259796144,0.989415407180786,0.0,accept,unanimous_agreement
1609940250,6472,in au4 we use `camelcase` for method names,0,0,0,0.9883944988250732,0.9943628311157228,0.9940131306648254,0.0,accept,unanimous_agreement
1609944423,6472,and i think these methods can be made static for convenience,0,0,0,0.9733238220214844,0.8967211842536926,0.986722767353058,0.0,accept,unanimous_agreement
1609947692,6472,see [a link],0,0,0,0.9835211038589478,0.9869033098220824,0.99574077129364,0.0,accept,unanimous_agreement
1609948885,6472,not necessary for us,0,0,0,0.9718570113182068,0.9427558779716492,0.9915251135826112,0.0,accept,unanimous_agreement
1609950796,6472,"here the painter cannot be null, there is no mandatory check",0,0,0,0.9849575757980348,0.9882984161376952,0.9906656742095948,0.0,accept,unanimous_agreement
1609952121,6472,"please do not use auto unless necessary (for example, if the type is too complex)",0,0,0,0.962786078453064,0.9799960255622864,0.9841914176940918,0.0,accept,unanimous_agreement
1609954278,6472,there’s no need to call saves and restore here.,0,0,0,0.9788233637809752,0.9864073991775512,0.9911080598831176,0.0,accept,unanimous_agreement
1609957324,6472,"i think here it’s better to explicitly set the pen for the painter. this code essentially does nothing, it modifies a local variable that is not passed to the painter.",0,0,0,0.9836190342903136,0.983674943447113,0.9805640578269958,0.0,accept,unanimous_agreement
1609960070,6472,"there are a lot of objects being passed by non-constant reference, are they all changed by this method?",0,0,0,0.968411386013031,0.9732089042663574,0.99137282371521,0.0,accept,unanimous_agreement
1609964624,6472,"pen (color) does not change, so there is no need to set it in the loop",0,0,0,0.9860005974769592,0.9871565103530884,0.982192873954773,0.0,accept,unanimous_agreement
1609965665,6472,"pen (color) does not change, so there is no need to set it in the loop",0,0,0,0.9860005974769592,0.9871565103530884,0.982192873954773,0.0,accept,unanimous_agreement
1609967091,6472,in au4 we use `camelcase` for method names,0,0,0,0.9883944988250732,0.9943628311157228,0.9940131306648254,0.0,accept,unanimous_agreement
1609967751,6472,not need,0,0,0,0.9767553210258484,0.826400876045227,0.9910385608673096,0.0,accept,unanimous_agreement
1609971235,6472,"it’s better to use a structure with named fields, it’s much more convenient and clearer than `std::get<0>`",0,0,0,0.9587519764900208,0.9604844450950624,0.9848204255104064,0.0,accept,unanimous_agreement
1609979066,6472,"please always initialize with default values, like this [code block]",0,0,0,0.9883791208267212,0.9889680743217468,0.9933801889419556,0.0,accept,unanimous_agreement
1609981287,6472,there is no need to explicitly call initialization here,0,0,0,0.9869259595870972,0.986850917339325,0.9946697354316713,0.0,accept,unanimous_agreement
1609983481,6472,"in au4 we prefer to use `=` for initialization, and only use `{}` where necessary [code block]",0,0,0,0.9879873991012572,0.9950665235519408,0.9945525527000428,0.0,accept,unanimous_agreement
1610174197,6472,"it makes sense if you know that there can be different types of rulers in audacity. i implemented timeline but you can also have ""beats and measures"" ruler - which needs to have the same methods implemented. i can remove it right now if you want but we're gonna need it later anyway",0,0,0,0.9667763113975524,0.9868603348731996,0.9824001789093018,0.0,accept,unanimous_agreement
1610190614,6472,"isn't it a good habit to use {} initialization? i mean it has advantage of additional check - it saves you from conversions that lose information like: int b{8.1} -> will produce compilation error int b = 8.1 -> will compile, but b is 8 instead of 8.1 i know it's rather rare case but :p",1,1,1,0.9261495471000672,0.902975857257843,0.9811248779296876,1.0,accept,unanimous_agreement
1610529838,6472,"yes, i assumed that there might be something like that, but then the architecture must be appropriate. that is, then it turns out that there should be something like this: * single implementation of timeline for different things * must be type of timeline * there must be a factory that created a formatter for a given type. (these are all assumptions, i didn't look at how it was done in au3 :) ) yes, everything may be like this... but it may not be like that :) therefore, i suggest not complicating things until it is clear why it is needed. because in reality it may be a little different.",1,1,1,0.9082316160202026,0.985782027244568,0.9865702986717224,1.0,accept,unanimous_agreement
1610559240,6472,"there may be some benefits to using `{}`, but the big value is readability, and easy to read code means consistent code. it's common practice in the muse framework to use `=`, and there's no good reason to change hundreds of thousands of lines of code to do otherwise :) more philosophical thoughts, if we use `{}` to initialize class members, then it is consistent to use `{}` to initialize local variables, but in practice this is not the case, in one place it’s one thing, in another place it’s another :) another point, i often see `double v {}`, but this only raises questions about what the default value is, and how much time is spent on thinking depends on the developer’s experience :) in the `double v = 0.0;` option, for developers of any experience the same minimum time of awareness. i.e., pros and cons of both approaches can be found if it is important for you to use `{}`, for technical reasons, or you are used to it and think that it is more correct, then i do not insist on using `=`. i see that au3 uses `{}`, so it could be a big cognitive problem to switch to `=` for no obvious reason (other than code consistency)",1,1,1,0.9366483688354492,0.994449257850647,0.9913523197174072,1.0,accept,unanimous_agreement
1611079042,6472,"it's not that important for me, i'll switch to `=`, that's not a problem :) it's just the first time i see a different opinion about that, but it's always good to get a different point of view - that's why i asked. good point with `double v{}`, i didn't think about that",1,1,1,0.9860579371452332,0.9916267395019532,0.9939542412757874,1.0,accept,unanimous_agreement
1611080264,6472,"sure, then i'm going to remove base class for now",0,0,0,0.9857771992683412,0.9744660258293152,0.9860759377479552,0.0,accept,unanimous_agreement
1611624288,6472,i think it can be one line,0,0,0,0.9747811555862428,0.9452771544456482,0.98286372423172,0.0,accept,unanimous_agreement
1611631775,6472,"better get this values once, not on each loop iteration",0,0,0,0.9783502817153932,0.9840301275253296,0.9877864122390748,0.0,accept,unanimous_agreement
1613304394,6472,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1613304488,6472,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1469226612,5899,"i don't expect this class to be used anywhere except for the current effects implementation. it makes very strict assumptions about the reader/writer and gives a fair amount of problems due to its' double buffering, which made 3.2 such a torture.",0,-1,-1,0.5232170820236206,0.893235445022583,0.7851350903511047,-1.0,accept,majority_agreement
1469228090,5899,"this class uses `this_thread::yield` every second loop and doesn't use `pause`. it makes sense, but not exactly correct.",0,0,0,0.9854676127433776,0.9872326850891112,0.9557942152023317,0.0,accept,unanimous_agreement
1469230102,5899,this library is surely long needed.,0,-1,0,0.97221577167511,0.5584393739700317,0.9616520404815674,0.0,accept,majority_agreement
1469233583,5899,"i see absolutely no justification for using exceptions here. they are meant to signal exceptional situations. in the worst case, they can be used to get back deep into the call stack, but that always indicates serious problems with program design.",0,0,0,0.7710185647010803,0.8755144476890564,0.5563490986824036,0.0,accept,unanimous_agreement
1469260885,5899,reporting progress is very complex in mt environments. i'm not sure that this value will be meaningful by the time the progress is reported.,-1,-1,0,0.6086488366127014,0.7334470748901367,0.7931846976280212,-1.0,accept,majority_agreement
1469267455,5899,"this, however, introduces **false sharing**, which is a problem in this case. `abandoned` is mostly read, and rarely modified (never, ideally). `total` is modified every call to `operator ()`, effectively invalidating `abandoned` for every other cpu.",0,0,0,0.9709784388542176,0.982434093952179,0.9747825264930724,0.0,accept,unanimous_agreement
1469272601,5899,"this looks like a cancellation pattern but with progress tracking. i don't think that the progress tracking is accurate or needed here. at the same time, i think that using an exception and, specifically, an exception from the `details` namespace reduces the scope where this class is useful.",0,0,0,0.9658107161521912,0.9830153584480286,0.9771800637245178,0.0,accept,unanimous_agreement
1469272935,5899,what is the justification of the capital p here?,0,0,0,0.9735987782478333,0.9912602305412292,0.9902442693710328,0.0,accept,unanimous_agreement
1469273925,5899,"no license identifier. previously, audacity ignored it in most files, but that is not correct.",0,0,0,0.9679239988327026,0.9546658992767334,0.9889510273933412,0.0,accept,unanimous_agreement
1469290575,5899,why? this limits the use of this class.,0,0,0,0.8843075037002563,0.8175346851348877,0.984266459941864,0.0,accept,unanimous_agreement
1469291704,5899,typo in `seriallyx`,0,0,0,0.9879486560821532,0.9904796481132508,0.994632363319397,0.0,accept,unanimous_agreement
1469293991,5899,good!,1,1,1,0.9833734035491944,0.984546959400177,0.9942196607589722,1.0,accept,unanimous_agreement
1469298485,5899,"what is the justification for making progress callable? i would not object if the users below were allowed to receive a callable instead of progress. however, progress is used only to stop the workers if the exception occurs.",0,0,0,0.9819840788841248,0.976630449295044,0.9891166090965272,0.0,accept,unanimous_agreement
1469299382,5899,i find such code to be very poorly readable.,-1,-1,-1,0.9326307773590088,0.8262261748313904,0.9491943717002868,-1.0,accept,unanimous_agreement
1469303947,5899,"i like that the assertion is not the only check, but do we need the `n_threads > 0` at all?",1,0,0,0.7708131074905396,0.9447378516197203,0.5696547627449036,0.0,accept,majority_agreement
1469305155,5899,i am very concerned about this code. it must be rewritten without the comma.,-1,-1,-1,0.9759934544563292,0.9459761381149292,0.9852759838104248,-1.0,accept,unanimous_agreement
1469312138,5899,"contrary to the previous place, i see very little reason to split this into multiple lines instead of using ++index right in place.",0,0,0,0.9549660682678224,0.9733442664146424,0.9807953238487244,0.0,accept,unanimous_agreement
1469314006,5899,"i can't say i like this, but i understand that this is safe.",1,0,1,0.6127361059188843,0.5766551494598389,0.9387547373771667,1.0,accept,majority_agreement
1469315838,5899,not having thread pools limits the usability of this function quite significantly.,0,0,0,0.9363638758659364,0.978008508682251,0.937060296535492,0.0,accept,unanimous_agreement
1469355245,5899,"if i understand correctly, this function may put cpu to 100% load during the playback. there must be more control over the thread priorities and count here.",0,0,0,0.9861122965812684,0.9645403027534484,0.9885949492454528,0.0,accept,unanimous_agreement
1469364578,5899,it was first written and used in scrubbing to communicate to the thread that fetches audio in response to mouse movements. that file is just moved without change and does not need review.,0,0,0,0.9868215918540956,0.9891047477722168,0.9939477443695068,0.0,accept,unanimous_agreement
1469366071,5899,that file too is just moved unchanged and not used in the new files.,0,0,0,0.9812510013580322,0.982399582862854,0.99289870262146,0.0,accept,unanimous_agreement
1469371665,5899,"the alternative is to complicate how tasks are written, requiring them to test and exit. it is simpler instead to let them use a possibly non-returning function, which also, in the future c++20 version perhaps, would instead become a coroutine suspension point. then there could be the possibility of non-resumption or migration of a task to another thread in a more sophisticated task scheduler.",0,0,0,0.9790086150169371,0.9907494187355042,0.988532781600952,0.0,accept,unanimous_agreement
1469373488,5899,"very good point. and this is why i wrote the `noninterfering` utility class template, which should more to lib-concurrency and be used here.",1,1,1,0.9442195296287536,0.9576554894447328,0.9822891354560852,1.0,accept,unanimous_agreement
1469375300,5899,none really. we don't have very well defined conventions. we have already namespace observer,0,0,0,0.6134504079818726,0.8735685348510742,0.8962481021881104,0.0,accept,unanimous_agreement
1469379783,5899,"at least when the supplied argument is 1, you know that the task just runs serially on the calling thread, so you can easily confirm first that the algorithm is serially correct before debugging it with multiple threads. in the first application of this algorithm for tempo detection, the calling thread is the main thread and is the only one that may update the progress dialog.",0,0,0,0.9868083596229552,0.9865151047706604,0.9923008680343628,0.0,accept,unanimous_agreement
1469381766,5899,it's the unfortunate correct way to forward an argument perfectly.,-1,-1,-1,0.9625502228736876,0.9790600538253784,0.977854073047638,-1.0,accept,unanimous_agreement
1469383258,5899,wrong -- `index` is used twice in arguments of a constructor and order of evaluation is not specified. i must increment only in another statement.,-1,0,0,0.5865641236305237,0.9559328556060792,0.7087939381599426,0.0,accept,majority_agreement
1469384410,5899,synchronizing on the get of a future of a packaged_task that runs on the thread should be equivalent to joining the thread.,0,0,0,0.9846120476722716,0.994295299053192,0.9929848313331604,0.0,accept,unanimous_agreement
1469385759,5899,"i can have a task where i need to handle complications explicitly. i do have such use cases now, but not using this class, obviously. i don't see how handling the result complicates anything.",0,0,0,0.6732728481292725,0.668930172920227,0.9791923761367798,0.0,accept,unanimous_agreement
1469386483,5899,i didn't want to distract myself yet with writing a thread pool too. i wanted to get to a demonstration of some real performance wins and also ease of use of the new utility in a few places. do we already have a usable thread pool in a third party library/,0,0,0,0.9423032999038696,0.9276121258735656,0.91008722782135,0.0,accept,unanimous_agreement
1802849473,7561,"i don't like the code duplication here, how can i propagate the action from trackeditactionscontroller to qml item?",-1,-1,-1,0.9765599370002748,0.9696042537689208,0.8522863388061523,-1.0,accept,unanimous_agreement
1802856579,7561,please add nullptr check here,0,0,0,0.98880797624588,0.9926133155822754,0.995380401611328,0.0,accept,unanimous_agreement
1802863007,7561,previous version was better: verb + noun,0,0,0,0.9624232649803162,0.9794495105743408,0.9883739948272704,0.0,accept,unanimous_agreement
1802864843,7561,also please add nullptr check,0,0,0,0.9885821342468262,0.9919024109840392,0.995612621307373,0.0,accept,unanimous_agreement
1802869632,7561,i think you first should remove the track and then send a notification,0,0,0,0.986494779586792,0.98194420337677,0.9916708469390868,0.0,accept,unanimous_agreement
1802889398,7561,i can't agree with that.,-1,-1,-1,0.771165132522583,0.7246400117874146,0.7623767256736755,-1.0,accept,unanimous_agreement
1802891373,7561,"what if a subscriber tries to access data associated with the track directly or indirectly, say the name of the deleted track? if the track is deleted its data will be unavailable.",0,0,0,0.9734370112419128,0.9702335000038148,0.9808390140533448,0.0,accept,unanimous_agreement
1802898022,7561,"registering such actions is used in cases where we know for sure that these actions will be used in several places and usually they do not depend on the ui, i.e. in the case of track-rename i would assume that it accepts trackid and newname - the data is prepared and only needs to be applied. i am not sure that there is an action for renaming a track, so i would suggest not registering such an action and simply handling the rename call - call titleedit in qml. so probably we need a previous solution with `var operations` for menubutton",0,0,0,0.9728913903236388,0.9901858568191528,0.991613745689392,0.0,accept,unanimous_agreement
1802905555,7561,"but, i'm okay to stick to either style, but we should enforce it. right now there is a total mess in [a link]",-1,-1,-1,0.6553420424461365,0.7729172706604004,0.9777944087982178,-1.0,accept,unanimous_agreement
1802911137,7561,in qt they solved the problem by emitting two events `xxxabouttoberemoved` and `xxxremoved` which we do not have in au3 yet. so i would rather have this event before the data is gone.,0,0,0,0.9855974316596984,0.992340922355652,0.9914701581001282,0.0,accept,unanimous_agreement
1804252221,7561,no longer needed,0,0,0,0.9583399295806884,0.9708465337753296,0.9761536717414856,0.0,accept,unanimous_agreement
1804400906,7561,uiaction is needed to populate the menu; please correct me if i'm wrong.,0,0,0,0.920724868774414,0.8892129063606262,0.9772046208381652,0.0,accept,unanimous_agreement
1804603965,7561,i would add [code block],0,0,0,0.9874554872512816,0.9893697500228882,0.9954500794410706,0.0,accept,unanimous_agreement
1804608658,7561,shouldn't it be effects? (looking at q_invokable function in trackslistmodel) [code block],0,0,0,0.9887032508850098,0.9942737221717834,0.994155764579773,0.0,accept,unanimous_agreement
1804618727,7561,"ups, looks like my formatter stopped working :grimacing_face:",-1,1,-1,0.9855189323425292,0.3945434689521789,0.9942787885665894,-1.0,accept,majority_agreement
1804631549,7561,"oops, typo, thanks",1,1,1,0.8858805894851685,0.9261417984962464,0.7539929151535034,1.0,accept,unanimous_agreement
1804632708,7561,sure,0,0,0,0.9371067881584167,0.9137381911277772,0.9422702193260192,0.0,accept,unanimous_agreement
1804841090,7561,"i don't find the implementation of this method in this pr.. but its presence here may be a problem. usually the actions are received by the controller, which calls the service.. which performs the action and notifies about the change, the view model is subscribed to the changes...",0,0,0,0.9221784472465516,0.9836986064910888,0.9547165036201476,0.0,accept,unanimous_agreement
1804845024,7561,"in fact, all these constants can be omitted... this is how it is done historically... but there is little sense and convenience (rather, it is even inconvenient)",0,-1,0,0.59983891248703,0.5235894918441772,0.9319453835487366,0.0,accept,majority_agreement
1804849624,7561,"this should be called in trackeditinteraction()->deletetrack. the point is that if trackeditinteraction()->deletetrack is called from somewhere else.. the logic associated with the history should also be executed, i.e. it is part of the logic of the trackeditinteraction()->deletetrack method",0,0,0,0.9813820123672484,0.9948640465736388,0.9915044903755188,0.0,accept,unanimous_agreement
1804904526,7561,actually i started to think about that in terms of implementing clip overlapping: when you move a clip over another clip in the end you end up with doing multiple actions at once: 1. clip move 2. clip trim or clip delete both of these will add state to the undo-stack while i think it should be considered as one action what do you think?,0,0,0,0.9741597175598145,0.9687456488609314,0.9887977242469788,0.0,accept,unanimous_agreement
1804917797,7561,"yes, it looks like one action. in such cases usually something like this (schematically): [code block] i.e. there are private methods that perform one action without side effects there are public methods that perform some logic using the algorithm with private methods",0,0,0,0.9810591340065002,0.9811180233955384,0.991313636302948,0.0,accept,unanimous_agreement
1804929107,7561,there is also this option: [code block] but the first option with private methods without side effects is better,0,0,0,0.9821423888206482,0.9891786575317384,0.9917427897453308,0.0,accept,unanimous_agreement
1804959958,7561,"yes, it was a leftover, removed.",0,0,0,0.982975423336029,0.9861342310905457,0.9870542883872986,0.0,accept,unanimous_agreement
1804960217,7561,"okay, removed",0,0,0,0.9845430254936218,0.9540407061576844,0.9883775115013124,0.0,accept,unanimous_agreement
1806045916,7561,"in the case of track-rename, we have to create menuitem manually and add it to the list",0,0,0,0.9870346188545228,0.9928152561187744,0.993019163608551,0.0,accept,unanimous_agreement
1806188261,7561,to understand why this item is created manually and not from an action?,0,0,0,0.979109525680542,0.990415334701538,0.9908128380775452,0.0,accept,unanimous_agreement
1806190806,7561,"here you need to explicitly specify translatablestring otherwise the utility for generating the file for translation will not process these lines (there is just a parser by keywords, translatablestring is a keyword)",0,0,0,0.988458812236786,0.9916366934776306,0.9930216670036316,0.0,accept,unanimous_agreement
1806194201,7561,here is the discussion with [a link],0,0,0,0.985023021697998,0.9874467253684998,0.9934136271476746,0.0,accept,unanimous_agreement
1806195231,7561,basically because the rename is only to be executed from the context menu,0,0,0,0.9829270243644714,0.9914787411689758,0.9869568347930908,0.0,accept,unanimous_agreement
1806195476,7561,"i see, thanks",1,1,1,0.9590002298355104,0.707760214805603,0.8456934690475464,1.0,accept,unanimous_agreement
1806196055,7561,to understand why this item is created manually and not from an action?,0,0,0,0.979109525680542,0.990415334701538,0.9908128380775452,0.0,accept,unanimous_agreement
1806201237,7561,"i don't think that's the reason, most of the action is from one place now... but that's changing..",-1,-1,0,0.7056291103363037,0.6181701421737671,0.9512320160865784,-1.0,accept,majority_agreement
1806204922,7561,"for example, i really like the control that is sometimes used on websites, when you hover the mouse over the action button - and the actions open up in a fan, usually there are 3-5 actions, the most popular ones... :)",1,1,1,0.9845481514930724,0.9944274425506592,0.9943939447402954,1.0,accept,unanimous_agreement
1806228646,7561,are you talking about [a link]? that actually would be awesome to have as optional feature.,1,1,1,0.7136052250862122,0.7294585704803467,0.7942245602607727,1.0,accept,unanimous_agreement
669643255,1295,"the commit comment means ""now"", not ""not"", right?",0,0,0,0.9730536341667176,0.988736093044281,0.989464282989502,0.0,accept,unanimous_agreement
669643878,1295,shuttlegui.* all look good,1,1,1,0.9729759097099304,0.9855154752731324,0.8935650587081909,1.0,accept,unanimous_agreement
669644469,1295,"i'd `emplace_back` instead, unimportant",0,0,0,0.8991747498512268,0.9567419290542604,0.9932996034622192,0.0,accept,unanimous_agreement
669645814,1295,"yes, i will fix that",0,0,0,0.9761508703231812,0.9844048619270324,0.9876794219017028,0.0,accept,unanimous_agreement
669651901,1295,i think this function and the next would be nicer as const. the format arguments array should remain unchanged. this is not imporant enough to block the pr.,0,0,0,0.9763497710227966,0.9390525221824646,0.9806857109069824,0.0,accept,unanimous_agreement
669652728,1295,"why stable sort? how could two formatarguments have the same placeholderposition now? maybe if one placeholder is a prefix of another? hm, sounds like a caller mistake then.",0,-1,0,0.6763381958007812,0.5618060827255249,0.97871196269989,0.0,accept,majority_agreement
669654542,1295,i see that this explains why wxwrapsizer was not constructed with `wxremove_leading_spaces`,0,0,0,0.9844767451286316,0.992234230041504,0.9924865961074828,0.0,accept,unanimous_agreement
669657159,1295,"i'm done with this commit, approve it so far with suggestions for later",0,0,0,0.9780312180519104,0.8698376417160034,0.6621021628379822,0.0,accept,unanimous_agreement
669663102,1295,"this is an edge case handling. i'm not sure, that this edge case will ever occur. technically it is possible, that a placeholder is missing from the translation to one language, but is present in another (why? i don't know). in this case, `placeholderposition` will be `npos`. if we have several cases of that - `stable_sort` will preserve the original order for the format arguments. so i think, that for 99.9% of cases `sort` is sufficient. but for the majority of cases, both `sort` and `stable_sort` will be no-op, because there will be only one item to format.",0,0,0,0.973094880580902,0.9597449898719788,0.9682630300521852,0.0,accept,unanimous_agreement
669665189,1295,maybe other uses of mview in this file should have null checks too,0,0,0,0.9859737157821656,0.993727684020996,0.985098361968994,0.0,accept,unanimous_agreement
669665337,1295,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
669667350,1295,might just be `read` because false is the default specified for that settings object,0,0,0,0.9883069396018982,0.993953287601471,0.9905808568000792,0.0,accept,unanimous_agreement
669667544,1295,might also just be `read`,0,0,0,0.9880657196044922,0.993548572063446,0.9904108047485352,0.0,accept,unanimous_agreement
669668387,1295,"i'm not aware of other crashes, but i will check. this one i found out accidentally while testing",0,-1,0,0.8520141839981079,0.5020152926445007,0.95932275056839,0.0,accept,majority_agreement
669668602,1295,add `gprefs->flush();`,0,0,0,0.9860516786575316,0.9914743900299072,0.9933192729949952,0.0,accept,unanimous_agreement
669670733,1295,"do we want to spell out ""application""?",0,0,0,0.9865309596061708,0.992030143737793,0.9923381209373474,0.0,accept,unanimous_agreement
669671813,1295,* how to turn * is replaced with,0,0,0,0.980388641357422,0.9843286275863647,0.993131935596466,0.0,accept,unanimous_agreement
669674187,1295,move the comment to the line just before the xo,0,0,0,0.9872400164604188,0.9876089096069336,0.991628646850586,0.0,accept,unanimous_agreement
669674412,1295,"same question about ""app""",0,0,0,0.9851898550987244,0.9886181354522704,0.9881551265716552,0.0,accept,unanimous_agreement
669681016,1295,move the hint to the line before the xxc,0,0,0,0.988056182861328,0.9921980500221252,0.9940191507339478,0.0,accept,unanimous_agreement
669683559,1295,"no problems here, but there is duplication of code in updatenoticedialog. later in master, fix the duplication. maybe a common function taking shuttlegui&.",0,0,0,0.9849948287010192,0.9928243160247804,0.9880670309066772,0.0,accept,unanimous_agreement
669683674,1295,i've asked jouni about it,0,0,0,0.9830352067947388,0.9798132181167604,0.9770429134368896,0.0,accept,unanimous_agreement
669687044,1295,large number of moved lines makes this diff hard to understand,0,0,0,0.8144055008888245,0.7027392387390137,0.8719845414161682,0.0,accept,unanimous_agreement
669689434,1295,sorry i must return to this commit later today.,-1,-1,-1,0.986922025680542,0.9895387291908264,0.9917674660682678,-1.0,accept,unanimous_agreement
669701773,1295,"a huge text blob in the middle of the layout made it very hard to read and debug. probably, i should move the license blob to a different file, so the diff will be shorter",0,-1,-1,0.6850264072418213,0.5852611064910889,0.9036777019500732,-1.0,accept,majority_agreement
669822671,1295,"this would make the algorithm much more complex or use extra memory. the second is feasible, i think",0,0,0,0.9574761986732484,0.9784010648727416,0.98723304271698,0.0,accept,unanimous_agreement
669823117,1295,it will also allow replacing stable_sort with sort,0,0,0,0.9878111481666564,0.99205082654953,0.9950278401374816,0.0,accept,unanimous_agreement
669878340,1295,these is a way for msgfmt to make errors if the format substitutions don’t match. let’s make sure to use it when accepting translations.,0,0,0,0.9856790900230408,0.9832757711410522,0.9890046715736388,0.0,accept,unanimous_agreement
669883472,1295,i'm not quite sure what i should here. btw stable_sort is replaced by sort as a part of addressing another comment,-1,0,0,0.5925888419151306,0.5775953531265259,0.7072994112968445,0.0,accept,majority_agreement
670033700,1295,"my last comment mentioned something i should remember in the next round of acceptance of translations, not anything for you to do now. if english has %s but some .po file omits it, i think there is a way to detect that error when i accept translations.",0,0,0,0.9803341031074524,0.9788711071014404,0.984558641910553,0.0,accept,unanimous_agreement
1427776485,5789,"""copy selection timestamp"" would be the better string for this function.",0,0,0,0.986933708190918,0.9916913509368896,0.9898741245269777,0.0,accept,unanimous_agreement
1427801560,5789,"why is copy bound to the word ""selection""? it's not a clickable part of the ui, meaning it's not a place where you'd click and expect anything to happen. i'd expect ctrl+c to copy if one of the numerictextctrl boxes is focused.",0,0,0,0.9829174876213074,0.967442512512207,0.9785625338554382,0.0,accept,unanimous_agreement
1427815256,5789,"it is unusual for timestamps to be of variable length. they usually are more useful to be used in conjunction with other programs, and those other programs usually expect a fixed format like iso 8601 or smpte timecodes. i'm not saying that our output _must_ be one of these standards - but imagine implementing a reverse function, where you can paste a timestamp into the numerictextctrl. if the timecode was always the same, it'd simplify things.",0,0,0,0.9716365933418274,0.9708386659622192,0.9785003066062928,0.0,accept,unanimous_agreement
1427841606,5789,"i think this is the wrong place for this menu entry - the function will happily copy a point selection (just the black line) as eg 3m57.117s-3m57.117s. the menu entry can just live directly in the select menu, underneath ""store cursor position"".",0,0,0,0.804197371006012,0.9814417958259584,0.8735975027084351,0.0,accept,unanimous_agreement
1427884015,5789,"receive, modify menu location and menu item description.",0,0,0,0.9875942468643188,0.9907834529876708,0.9940435290336608,0.0,accept,unanimous_agreement
1427884231,5789,"ok, because this time control has multiple display formats, i will leave the output as is and just remove the spaces.",0,0,0,0.9836132526397704,0.9880887866020204,0.9923912882804872,0.0,accept,unanimous_agreement
1427884354,5789,"this is more efficient, as you only need to move the mouse to click once, and the right-click will not lose the focus of the audio selection. why not let us keep the right click, delete the double click, and then implement a regular operation of ctrl+c to mtimecontrols?",0,0,0,0.967638909816742,0.9846817255020142,0.9883345365524292,0.0,accept,unanimous_agreement
1427967074,5789,"if we only were concerned about making timecode copying more efficient, you'd be absolutely right. you even could dedicate a copy button next to the selection settings button to give that functionality some affordance, so it's possible to figure out you even can copy without consulting the manual. unfortunately, we can't really do that. audacity has millions of users all with different needs and most of them casual. copying timecodes is not important enough to warrant a permanently visible button, and as we're working on simplifying the app, adding invisible/""you have to read the manual to find it"" features is going in the wrong direction. the compromise solution here is to allow users which need this function to set themselves one-button shortcuts, and that is something you can do for any menu item: ![a link]",-1,0,-1,0.5407911539077759,0.6354573965072632,0.4948339462280273,-1.0,accept,majority_agreement
1427978429,5789,"configuring shortcut keys is indeed convenient for keyboard-focused users, but for users who use the keyboard and mouse more balancedly, positioning the mouse on a text label and right-clicking to complete a shortcut function is as convenient as keyboard shortcuts. if possible, i hope to retain the mouse shortcut operation of right-clicking the ""select"" text label on the toolbar to activate this function. that position will not cause any side effects, and since there will be a system floating window notify after the operation, it will not cause any confusion to the user.",0,0,0,0.9464589953422546,0.9714664816856384,0.9339109659194946,0.0,accept,unanimous_agreement
1427991901,5789,"i'm not sure the user would expect this. they may well be using these controls to fine tune a time selection, and then press ctrl + c to copy the audio the audio to the clipboard. so i don't think changing the effect of the shortcut here is a good idea.",0,0,0,0.9194945096969604,0.5426230430603027,0.8858542442321777,0.0,accept,unanimous_agreement
1427998721,5789,"only when mtimecontrols got focus, then they can handle ctrl+c, and that time, user can not copy audio because focus not on track window. i just think that the operation of first clicking to select the time control and then pressing ctrl+c is a bit cumbersome, this requires a combination of mouse and keyboard and cannot be completed with one hand. and it will make the track selection area lose focus.",-1,0,-1,0.7680283188819885,0.6223217248916626,0.5576201677322388,-1.0,accept,majority_agreement
1428014340,5789,oh yes they can!,1,1,0,0.6908375024795532,0.8683499693870544,0.9541916847229004,1.0,accept,majority_agreement
1428021999,5789,"in that case, i also agree to remove ctrl+c. this is just a small function. it seems to be enough to provide a configurable keyboard shortcut and a mouse shortcut operation entrance.",0,0,0,0.9839048981666564,0.9761222004890442,0.9935111403465272,0.0,accept,unanimous_agreement
1798899165,7515,let's add `using trackidlist = std::vector ;`,0,0,0,0.9832826852798462,0.9924105405807496,0.9947741627693176,0.0,accept,unanimous_agreement
1799104985,7515,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1801037172,7515,"as discussed 1-1: there is no plan for discontinuous time selection ( please confirm), hence the time selection can entirely be determined by m_selectedstarttime and m_selectedendtime.",0,0,0,0.988027572631836,0.9931467175483704,0.9946183562278748,0.0,accept,unanimous_agreement
1801044450,7515,"in audacity 3, some logic like the generators determine where to generate based on this time selection and the (possibly discontinuous) set of selected tracks. in audacity 4, with discontinuous clip selection, it seems to me like there is going to be an additional, prevailing logic: generators will first check if there are selected clips (`m_selectedclip` will by then be `m_selectedclips`) and use this as placeholder, else it will fall back on the au3 behavior.",0,0,0,0.9757757782936096,0.9924414157867432,0.9873392581939696,0.0,accept,unanimous_agreement
1801055990,7515,we have some help functions for work with containers [a link] [code block],0,0,0,0.9858776330947876,0.9860578179359436,0.9944570064544678,0.0,accept,unanimous_agreement
1801056754,7515,see [a link],0,0,0,0.9835211038589478,0.9869033098220824,0.99574077129364,0.0,accept,unanimous_agreement
1801258998,7515,`const trackidlist&`,0,0,0,0.9807825684547424,0.9927709698677064,0.9946540594100952,0.0,accept,unanimous_agreement
1801259360,7515,... and below,0,0,0,0.9134241342544556,0.9476596117019652,0.9281920194625854,0.0,accept,unanimous_agreement
1801260629,7515,would you rename to `splittracksat` ? it reads better.,0,0,0,0.9783692955970764,0.9915677905082704,0.9907116293907166,0.0,accept,unanimous_agreement
1801267820,7515,could you make this method internally call `setselectedtracks({})` ? it would make easier to recognize that the logic is the same for both.,0,0,0,0.9889645576477052,0.9931405186653136,0.992704689502716,0.0,accept,unanimous_agreement
1801289224,7515,`pasteintonewtracks()` seems more correct?,0,0,0,0.9856544137001038,0.9928799271583556,0.9914462566375732,0.0,accept,unanimous_agreement
1801345389,7515,"i don't really understand this undo logic overall: 1. get the index of the first selected track in the project (which could be `trackidlist.size()` if none is selected), call it _i_ 2. undo, 3. reload the tracks from the project, which provides new track list. 4. set the _i_th track from the reloaded list as the selected track. would that work if: a. i create and select a track, b. i create a new track - it should get automatically selected. c. i undo. in this case, _i_ would be `1`, but `newtrackidlist.size() == 1`, and no track would be selected anymore. i audacity 3, the selection reverts to the track created in step a. i wonder how it's implemented there, or what undo manager the muse framework provides and if it could be reused just for the track selection state.",0,0,0,0.8757070302963257,0.9817833304405212,0.9586306810379028,0.0,accept,unanimous_agreement
1802479232,7515,"i will create a new task for it, this case needs some extra care - it's not working as intended anyway (and never was based on your example)",0,0,0,0.9505964517593384,0.9722458124160768,0.9913042783737184,0.0,accept,unanimous_agreement
1802554399,7515,nice,1,1,1,0.8361793160438538,0.9342552423477172,0.7884483337402344,1.0,accept,unanimous_agreement
1802589175,7515,"it seems to me that all `selectionactive`-related members (signal, getter, setter, state variable) are not used externally at all, as a consequence of which it should be removed to simplify and clarify the logic even more. or is there a reason to keep it i'm missing?",0,0,0,0.9424070119857788,0.9901006817817688,0.989924430847168,0.0,accept,unanimous_agreement
1802599067,7515,"this confused me for a while, i thought we might really pass a range, but in fact, looking at line 22 shows that `m_startpoint.y()` just equals `y` at this stage. at least please replace `m_startpoint.y()` with just `y` to help the slow-minded of my kind understand your code better. you could even have a `determinatetrack(double y)` that'd internally just call `determinatetracks(y, y)`, but that'd be a stretch.",0,0,-1,0.6178683042526245,0.6506041288375854,0.733394205570221,0.0,accept,majority_agreement
1802605708,7515,"btw, you have a `::resetdataselection` method in this class that does this, which you could probably get rid of.",0,0,0,0.9883258938789368,0.993471384048462,0.9877070784568788,0.0,accept,unanimous_agreement
1802611302,7515,"i think this method might be simplified to [code block] which would also make it behave more like au3. say i have two tracks selected, and i click on one of them to drag my selection. in audacity 3, this will deselect the non-clicked track, while here it won't. or was this a new spec i'm not aware of?",0,0,0,0.9789043068885804,0.9680721759796144,0.98318612575531,0.0,accept,unanimous_agreement
1802639426,7515,"about `isdataselected()` : i'm not sure what it is supposed to tell its clients? for sure it's only about time (it doesn't consider whether a track is selected or not). it would return true if start time were 10 and end time were 1. start and end time setters are part of the public interface, and i don't see sanity checks to make sure that end time is never set to something less than start time, so it could happen. i'm not saying that these checks should be added now, but if this isn't intended to be possible and `isdataselected` intends in fact to say `timeselectionisnotempty`, then i would like it to be renamed as such. it is used in many places in the code, and this could reveal bugs. likewise for `isdataselectedontrack`: what it tells now is only whether the track of the given id is selected or not, so i would like this see renamed to `istrackselected`.",0,0,0,0.8504549860954285,0.8052698373794556,0.9714131355285645,0.0,accept,unanimous_agreement
1802647093,7515,i forgot: the implementation of `isdataselected` should also add the `&&` that end time is strictly larger than start time (if negative selection spans are indeed not intended).,0,0,0,0.8008820414543152,0.990079402923584,0.956243932247162,0.0,accept,unanimous_agreement
1802665930,7515,"hmmm, it's actually used in tracksclipsview.qml `property bool isneedselectioncursor: !selectioncontroller.selectionactive && mainmousearea.mouseontracks`",0,0,0,0.762366533279419,0.9921938180923462,0.9821611642837524,0.0,accept,unanimous_agreement
1802720861,7515,"it's used on qml side so i can't remove it but it will be good to use it here instead of these two lines, good catch :d",1,1,1,0.9811579585075378,0.9929510354995728,0.9956716299057008,1.0,accept,unanimous_agreement
1802811086,7515,"i think that last check must `m_selectedendtime.wav > m_selectedstarttime.val`, shouldn't it? i.e. if they are equal, this method should return false - i think.",0,0,0,0.9871566891670228,0.9921680092811584,0.9861887097358704,0.0,accept,unanimous_agreement
1802831590,7515,"that makes a lot of sense now. i'm wondering more and more if `m_selectedtracks` couldn't disappear in favor of calls to `selectioncontroller()->selectedtracks()`, to avoid this app state being maintained in two places. or does something speak against it?",0,0,0,0.7195742726325989,0.962812840938568,0.9507482647895812,0.0,accept,unanimous_agreement
1802845092,7515,i looked and it seems to me that this `m_audiodataselected` variable could disappear and query `selectioncontroller()->timeselectionisnotempty()` where its value is read.,0,0,0,0.9861475825309752,0.9903697371482848,0.9929279685020448,0.0,accept,unanimous_agreement
1802846376,7515,nice.,1,1,1,0.8888204097747803,0.9356518387794496,0.7452678084373474,1.0,accept,unanimous_agreement
1802848329,7515,"i'm more confident now: `doglobalcut()`, `doglobaldelete()` and other such should check this, and be no-opts if the selection is just a point selection.",0,0,0,0.960396945476532,0.979981243610382,0.7485230565071106,0.0,accept,unanimous_agreement
1802882942,7515,"i'd like to get rid of it too but for now it's ""not possible"", meaning: it will break sync of track headers and tracks in the clips view. i will address it anyway as i believe sergey will find out what's wrong with it but i need to extend muse framework first. as this may take some additional time until this thing gets merged into musescore i suggest we merge it for now as is. added appropriate comment in the code though",0,0,0,0.9212441444396972,0.975593090057373,0.9296953082084656,0.0,accept,unanimous_agreement
1802894600,7515,smart :smiling_face_with_sunglasses:,1,0,1,0.8868658542633057,0.984950304031372,0.9877167344093324,1.0,accept,majority_agreement
1802897556,7515,"if `m_stracklist.size() == 0`, `index(m_tracklist.size() - 1)` will wrap around to an enormous number, won't it? it that's intended, please add a comment, otherwise typecast to index before subtracting.",0,0,0,0.988194704055786,0.9744799733161926,0.9940409064292908,0.0,accept,unanimous_agreement
1803066821,7515,"i think this logic should not be in a view model, but in the controller itself (in the setselectedclip method). i.e. if this method is called from another place, the logic should be exactly the same",0,0,0,0.9821491837501526,0.9919849038124084,0.9871784448623656,0.0,accept,unanimous_agreement
1803074102,7515,looks like it's time to write unit tests for this controller :),1,1,0,0.9514340758323668,0.8962910175323486,0.9648481607437134,1.0,accept,majority_agreement
642968339,948,"let's avoid c-style casts or function notation for scalar types. either use uniform initialization where you can: 'uint8_t{...}' or if you can't (because ui doesn't allow narrowing; if hexchartonum returned int for instance), then use static_cast.",0,0,0,0.988679587841034,0.9941005110740662,0.9917842149734496,0.0,accept,unanimous_agreement
642969586,948,i lately came across similar concerns preparing my updated less-dithering branch.,0,0,0,0.8677536845207214,0.6917110085487366,0.9342789053916932,0.0,accept,unanimous_agreement
642974354,948,"well, actually it is a c++ cast using converting constructor or whatever it's called. i can change it to static_cast, although this form is shorter and more expressive. the cast itself is required because of integer promotion rules when performing <<",0,0,0,0.9819294810295104,0.9928604960441588,0.9928111433982848,0.0,accept,unanimous_agreement
642975210,948,"interesting that you use noexcept. i haven't formed that habit yet. i often say in code comments that there are parts of the code that must be no-throw. the annotation could be useful. the compiler does not have to prove that exceptions are impossible from a noexcept function (and even if it could, the program would still be valid). rather the standard requires calls to terminate will happen if exceptions do try to escape. but i'm not familiar with whatever warnings compilers make that could help you make such a proof.",0,0,1,0.7895293235778809,0.8410320281982422,0.7042198777198792,0.0,accept,majority_agreement
642977181,948,"i will remove it here, it was just a force of habit. i worked on the platform with no exception, so having noexcept everywhere made code behave similarly everywhere",0,0,0,0.8364689946174622,0.9511823058128356,0.9535143971443176,0.0,accept,unanimous_agreement
642980276,948,#pragma once or follow the convention for #include guards?,0,0,0,0.981804132461548,0.9926471710205078,0.994534969329834,0.0,accept,unanimous_agreement
642980844,948,#pragma once is not standard,0,0,0,0.974202036857605,0.9153807759284972,0.9932774901390076,0.0,accept,unanimous_agreement
642981246,948,i really think we should change our conventions. i've never seen a single compiler that had no support for pragma once,0,0,0,0.8945239782333374,0.8561493754386902,0.6347877979278564,0.0,accept,unanimous_agreement
642985152,948,i didn't say remove it!,0,0,0,0.8303946852684021,0.4423868358135223,0.9518945813179016,0.0,accept,unanimous_agreement
642988180,948,"ahh, spaceship.",0,0,0,0.8165969252586365,0.6769554615020752,0.8519344925880432,0.0,accept,unanimous_agreement
642994634,948,no comments?,0,0,0,0.9534364938735962,0.9736647605895996,0.9902690649032592,0.0,accept,unanimous_agreement
642995157,948,comment that these are lexicographical?,0,0,0,0.9772914052009584,0.987016499042511,0.9895898699760436,0.0,accept,unanimous_agreement
642997900,948,is one purpose of this to allow a set or map of these values? is it worth the trouble also to customize std::hash for unordered containers too?,0,0,0,0.9112890362739564,0.9902887344360352,0.9917757511138916,0.0,accept,unanimous_agreement
642998573,948,"excellent point, i will implement it!",1,1,1,0.9914618730545044,0.996075451374054,0.9963309168815612,1.0,accept,unanimous_agreement
642999027,948,i might assert that return value is 36 then define a constant so i don't repeat 36,0,0,0,0.9861631989479064,0.98657888174057,0.9916222095489502,0.0,accept,unanimous_agreement
642999154,948,ditto assertion,0,0,0,0.982330322265625,0.9797065258026124,0.9436940550804138,0.0,accept,unanimous_agreement
642999514,948,return const bytes & ?,0,0,0,0.9865727424621582,0.988900661468506,0.994471549987793,0.0,accept,unanimous_agreement
642999697,948,"well, it is wrong here anyway. `std::vector` has a throwable copy constructor. anyway, besides the generated code size it only matters for move constructors. i will add one :)",1,1,1,0.8488187193870544,0.9871894717216492,0.9800991415977478,1.0,accept,unanimous_agreement
643000808,948,"` // c++20 return std::none_of(mdata.begin(), mdata.end(), std::identity); ` :-)",0,1,1,0.8738602995872498,0.949618637561798,0.7350091934204102,1.0,accept,majority_agreement
643001837,948,uninitialized or zeroes? say,0,0,0,0.9747480750083924,0.9716872572898864,0.9911656975746156,0.0,accept,unanimous_agreement
643002722,948,"constructs zeroes, not uninitialized. say.",0,0,0,0.9826762676239014,0.9628739356994628,0.9935883283615112,0.0,accept,unanimous_agreement
643004854,948,"oh, it has std::array, ignore my part about std::vector",0,0,0,0.8856644630432129,0.9130035638809204,0.9783847332000732,0.0,accept,unanimous_agreement
643005287,948,"subtract 1 from inputend if hasbraces? readbyte won't err if you don't, but i had to reread it",0,0,0,0.9857164025306702,0.9675769805908204,0.9941563606262208,0.0,accept,unanimous_agreement
643007363,948,"you require that str is exactly a uuid or a brace-enclosed one, else return nil. you aren't writing a function that just allows a prefix of a string to be a uuid. comment that. though maybe i am supposed to guess that because the function isn't also returning a std::string::const_iterator.",0,0,0,0.979982614517212,0.9784852862358092,0.9897218346595764,0.0,accept,unanimous_agreement
643007805,948,"when i ask for comments, i mean in the header. because it's about the contract, not just the implementation.",0,0,0,0.9708808660507202,0.98927640914917,0.9911284446716307,0.0,accept,unanimous_agreement
643009512,948,"i try to be alert to truncation problems. sure, there is no harm here. so actually it's just the first operand of | that needs a static_cast.",0,0,0,0.9566834568977356,0.9401228427886964,0.984666109085083,0.0,accept,unanimous_agreement
643009644,948,i'm done,0,0,0,0.9581262469291688,0.8463840484619141,0.8608697056770325,0.0,accept,unanimous_agreement
643011512,948,a separate move ctor wouldn't make sense for a std::array argument,0,0,0,0.9694506525993348,0.9748884439468384,0.9835350513458252,0.0,accept,unanimous_agreement
643012692,948,"ah, one more thing. why not negate the return value, and call this explicit operator bool ?",0,0,0,0.9692068099975586,0.9149664044380188,0.9881150722503662,0.0,accept,unanimous_agreement
643013573,948,that could make it more concise to declare a uuid variable within `if(...)` and narrow its scope.,0,0,0,0.9878353476524352,0.9932767748832704,0.9919010996818542,0.0,accept,unanimous_agreement
643423130,948,visibility might be unnecessary. it's all inline.,0,0,0,0.9566351175308228,0.9735393524169922,0.985734224319458,0.0,accept,unanimous_agreement
643423646,948,should start that line. or break it out before the `/*!` on a `//!` line.,0,0,0,0.9858506321907043,0.992233157157898,0.9908080697059632,0.0,accept,unanimous_agreement
675199981,1323,this might be just a constexpr variable. or even just wxpath_separator which is acceptable (belonging to wxbase),0,0,0,0.9891842603683472,0.9937303066253662,0.9933005571365356,0.0,accept,unanimous_agreement
677039421,1323,"this line made me look up what `download` is in versionpatch.h. i see it is a wxstring. but that is uninformative. i like wrapping strings up in classes that indicate the purpose of the string, to prevent mistaken inter-conversions. and there exists a type urlstring, lately added. can you use that type in versionpatch.h? can you insert a commit in the sequence before this commit, to make that change?",0,0,0,0.8892767429351807,0.9546241760253906,0.849197506904602,0.0,accept,unanimous_agreement
677043260,1323,"- is downloadreponse really needed in the lambda capture? - are you sure this lambda executes in the main thread? (try a breakpoint). if not, are you sure it is safe to destroy the dialog? if not, then consider callafter. - but then, mprogressdialog should not be a unique_ptr. it should be a wxwindowptr<>. remember that wxwindow objects have special memory management and should not be handled with the usual c++ smart pointers. - [a link]",0,0,0,0.9726662039756776,0.9900555610656738,0.99061918258667,0.0,accept,unanimous_agreement
677043962,1323,repeat my question about the lambda capture.,0,0,0,0.979430854320526,0.9487816095352172,0.9887735247612,0.0,accept,unanimous_agreement
677076944,1323,"wait, is mversionpatch.download a url or is it a file name? i'm confused now.",0,-1,-1,0.5048197507858276,0.6672974824905396,0.766806423664093,-1.0,accept,majority_agreement
677077405,1323,"maybe you can get away with this, extracting the last path component. it's a little hacky.",-1,-1,0,0.9706040024757384,0.9737289547920228,0.7968698740005493,-1.0,accept,majority_agreement
677078096,1323,"you might use the recently added basicui::makeprogress() to make this bit of code ""toolkit-neutral."" but it is not important, yet, to do that here.",0,0,0,0.9727542996406556,0.9893428087234496,0.9910549521446228,0.0,accept,unanimous_agreement
677079075,1323,this variable is not yet used. i suppose a later commit? then it might be added with that commit.,0,0,0,0.9893395304679872,0.991099774837494,0.9917170405387878,0.0,accept,unanimous_agreement
677080685,1323,"i see a problem. this line might crash, though in very unusual cases. you assign mprogressdialog only once (in std::call_once). you use it here, outside that lambda. but you destroy it in the request-finished callback. so, what happens if the program runs so long that getupdates() is called twice?",0,0,0,0.9153913855552672,0.5027241706848145,0.8697189688682556,0.0,accept,unanimous_agreement
677080946,1323,is call_once really right? or should you do this each time? see elsewhere about lifetime of the progress dialog.,0,0,0,0.9852926135063172,0.9895029067993164,0.9938931465148926,0.0,accept,unanimous_agreement
677083474,1323,"why not use this constructor of wxfilename: wxfilename(const wxstring& path, const wxstring& name, wxpathformat format = wxpath_native)",0,0,0,0.988098919391632,0.9937682151794434,0.9946371912956238,0.0,accept,unanimous_agreement
677086637,1323,why not do this error checking?,0,0,0,0.954914391040802,0.9409222602844238,0.9873653650283812,0.0,accept,unanimous_agreement
677088172,1323,"what if there was an error downloading? (see other comment about missing check.) if you know there was an error, then you should not make this call. but if there was an error, is your callback called or not? if you callback is called even in case of error, how do you know if there was one? it is not clear to me from the class curlreponse how this is communicated to the caller. so ask crisp.",0,0,0,0.9759595990180968,0.8099755048751831,0.9881246089935304,0.0,accept,unanimous_agreement
677089439,1323,"it looks like this commit corrects the previous commit, which was not actualy correct for macos, right? squash the two commits. make a sequence of commits that are stages of implementation that are each buildable and runnable without errors. but don't leave a sequence of known bugs and corrections.",0,0,0,0.983856439590454,0.9572021961212158,0.988760769367218,0.0,accept,unanimous_agreement
677089854,1323,"now i see you already found the problem about threads i already mentioned. so as i said, use interactive rebase and fix-up the original. don't leave a record of mistakes and corrections.",0,0,0,0.9775564074516296,0.9288682341575624,0.9874309301376344,0.0,accept,unanimous_agreement
677090303,1323,"... and you already did notice my basicui too, ok",0,0,0,0.9545068740844728,0.8885791897773743,0.9671249985694884,0.0,accept,unanimous_agreement
677090603,1323,"yes, null check now avoids the crash. but maybe the progress dialog should be created more than once, not in call_once, so the destructions and creations match.",0,0,0,0.985898494720459,0.991040289402008,0.9911309480667114,0.0,accept,unanimous_agreement
677090863,1323,should this deletion be part of the first commit?,0,0,0,0.980283796787262,0.993242084980011,0.9914537668228148,0.0,accept,unanimous_agreement
677587323,1323,"it is a link to audacity installer file and have a two use cases here: 1 - using like `std::string` url for make request for curl. 2 - using like `wxstring` for `wxfilename`, that contain the name of latest audacity patch. may be i should create a new type for this cases like: `using patchlink = wxstring` for give a more anformation about `mversionpatch.download` field.",0,0,0,0.9847508668899536,0.9927813410758972,0.9932271838188172,0.0,accept,unanimous_agreement
677590711,1323,"because it can successfully read in next callback cycle, may be need additional checking the all readed bytes in `finishcallback` also.",0,0,0,0.9883257150650024,0.9924336671829224,0.9943252205848694,0.0,accept,unanimous_agreement
677689748,1323,"destructions and creations is already match, because `setrequestfinishedcallback` with progress dialog desruction called once, only when downloading is finished.",0,0,0,0.9890012741088868,0.9931641221046448,0.9949872493743896,0.0,accept,unanimous_agreement
677696472,1323,"well, leave it alone for now. urls use / as separator. i was wondering whether this would work wrong on windows where \ is the sperator, but you try to interpret a url as a file path. but if it tests all right, i won't insist on the type distinctions.",0,0,0,0.9816393852233888,0.9081756472587584,0.9591796398162842,0.0,accept,unanimous_agreement
677727359,1323,"yes, it work fine, i already tested it on windows too.",0,0,0,0.8341838717460632,0.904409885406494,0.8510430455207825,0.0,accept,unanimous_agreement
681184785,1323,"makeprogress or makegenericprogress, as appropriate -- i may have overspecified it. if there is no ""denominator"" for the ""numerator"" -- no real estimate of the incomplete work, then the generic progress is the right one. ah, but the download callback is supplied ""current"" and ""expected."" so that means, don't use generic?",0,0,0,0.9833104014396667,0.974314033985138,0.9916915893554688,0.0,accept,unanimous_agreement
681189877,1323,"but my point was that using call_once isn't right. maybe the dialog will be created more than once, in unusual but possible circumstances. maybe download fails once, but is attempted again.",0,0,0,0.7970380783081055,0.8025078177452087,0.9764801263809204,0.0,accept,unanimous_agreement
681394032,1323,"you know you can leave out ` ` in c++17? improved deduction of types in constructor expressions and declarations! i am convinced now that this mutex is doing a correct thing. i think there would be a more ligthweight way to do this with std::atomic instead -- the mutex is only guarding the transition of a boolen from false to true. but, don't bother doing this.",0,0,1,0.5376757383346558,0.8153150081634521,0.8591077327728271,0.0,accept,majority_agreement
681395292,1323,"you reset monprogress to false on some of the exit paths. but i think you must do it more places. the returns at lines 124 and 139 -- where you detect a network failure or a corruption of the download -- should also reset monprogress to false. otherwise, automatic update checking will never be tried again, while the program remains running. you also failed to cover the case that `mversionpatch.version > currentbuildversion()` is false, or the case that the dialog return code is neither `wxid_yes` nor `wx_id_no`. which i don't know is possible from the context.",0,0,0,0.9782071709632874,0.9883952140808104,0.9851471781730652,0.0,accept,unanimous_agreement
681888825,1323,"yes, because i add it manualy, therefore i agree with you about raii approach (smart classes) for fix the same possible problems.",0,0,0,0.9511582255363464,0.9003660678863525,0.9806539416313172,0.0,accept,unanimous_agreement
681890560,1323,"also, i think, i solve this possible moments by create own `udatelocker` class, that atomic blocking entry to update process with raii support.",0,0,0,0.9885974526405334,0.98745197057724,0.9920837879180908,0.0,accept,unanimous_agreement
681902945,1323,doing it with raii would be even better. see valuerestorer in memoryx.h which may already do what you want. no new class needed. [code block] do you understand the idea?,0,0,0,0.9425143003463744,0.966300129890442,0.9721776843070984,0.0,accept,unanimous_agreement
682067749,1323,"yes, i implemented something like this, but thanks for `valuerestorer` example, i think i can change the part of same logic by `valuerestorer` using.",1,0,1,0.8176909685134888,0.7277441620826721,0.5977585911750793,1.0,accept,majority_agreement
766702422,2261,"one of the c++ core guidelines i like is that each virtual function declaration should be marked with exactly one of `virtual` `override` or `final` as appropriate, and for these two it should be `override`.",0,0,0,0.8006534576416016,0.9811045527458192,0.9791852831840516,0.0,accept,unanimous_agreement
766708087,2261,"oh, i see i misunderstood the context. this is not overriding uihandle functions. `virtual` is right.",0,-1,0,0.8616439700126648,0.733816921710968,0.948944628238678,0.0,accept,majority_agreement
766716097,2261,clang gives me a warning about '&&' within '||'. add parentheses to make the intent unmistakable.,0,0,0,0.9805474281311036,0.7919653654098511,0.9927768707275392,0.0,accept,unanimous_agreement
766716675,2261,"same track, or aligned partner track",0,0,0,0.9858777523040771,0.9874602556228638,0.9915314316749572,0.0,accept,unanimous_agreement
766719835,2261,"i would prefer to iterate the intervals, as in the other branch, not the clips, for uniformity, and in case wavetrack might add some other kind of interval in future (who knows?) you can static_cast the extra() pointer of each interval to wavetrack::intervaldata* and then test for the clip you want to exclude.",0,0,0,0.9876965880393982,0.9911421537399292,0.9931966066360474,0.0,accept,unanimous_agreement
766724470,2261,"the two shared_ptr arguments could be const references, and so they should, to aid the human reader. instead i read this then stopped to see whether `track` and `clip` were being reassigned for some reason.",0,0,0,0.987582504749298,0.9834207892417908,0.9929999113082886,0.0,accept,unanimous_agreement
766726172,2261,a const auto & here for consistency,0,0,0,0.9837966561317444,0.9852022528648376,0.9943087697029114,0.0,accept,unanimous_agreement
766729889,2261,another argument might be const reference,0,0,0,0.9876046180725098,0.9852775931358336,0.9925423860549928,0.0,accept,unanimous_agreement
766736544,2261,"see how selecthandle overrides enter, hasescape, and escape member functions. these allow you to hit the esc key and dismiss the yellow snap lines, enabling a fine, un-snapped adjustment, if that is what the user really wants. the same might be done here. maybe some common base class, derived from uihandle, should be defined? hm.",0,0,0,0.96458101272583,0.9765373468399048,0.9899154901504515,0.0,accept,unanimous_agreement
766737995,2261,"you may note that i could have done the extra work i suggested in the uihandle subclasses recently added to adornedrulerpanel, but i didn't. this is not mandatory extra work. but i should reconsider how the pattern might be made easier and reusable across uihandle classes that snap.",0,0,0,0.9810214042663574,0.9866777658462524,0.9882572293281556,0.0,accept,unanimous_agreement
766742647,2261,"see trackpaneldrawable::drawingarea: default behavior should not be to return an empty wxrect, but to return the second argument unchanged.",0,0,0,0.9880096316337584,0.9920904636383056,0.9944633841514589,0.0,accept,unanimous_agreement
766786258,2261,"funny, the tool i use to analyze a code suggests quite opposite: it says that parenthesizes are redundant :) but i usually tend to put them too. thank you!",1,1,1,0.9918859004974364,0.9953670501708984,0.9971534013748168,1.0,accept,unanimous_agreement
766787284,2261,didn't think of that. thank you!,1,1,1,0.9733290076255798,0.9835948348045348,0.9933562874794006,1.0,accept,unanimous_agreement
767576126,2261,"if i try to hit escape when using a select handle it just resets the current selection, with a debugger attached i see that both `::escape` and `::cancel` member functions are triggered, did i misunderstand something?",0,0,0,0.8997145891189575,0.934356927871704,0.9620031714439392,0.0,accept,unanimous_agreement
767706669,2261,you can hit escape to dismiss the yellow snap line before the click. it seems you can't dismiss the yellow snap line while dragging.,0,0,0,0.9815913438796996,0.9494450092315674,0.9928185939788818,0.0,accept,unanimous_agreement
767709406,2261,"just a discussion... i would prefer `static_cast` myself here... but actually, i'd rather see `std::any_cast`. the extra information in intervaldata looks like a place i could rewrite things with `std::any` now that we use c++17. i think `any_cast` makes a simpler check than `dynamic_cast`. just equality of a statically determined `typeid` of the template parameter with the dynamically determined `typeid` in the `any`.",0,0,0,0.9623221158981324,0.984420359134674,0.9753140807151794,0.0,accept,unanimous_agreement
767712918,2261,still not resolved,0,0,0,0.8862641453742981,0.8275210857391357,0.7692859768867493,0.0,accept,unanimous_agreement
767713130,2261,"does not seem to work as well, i still get snap lines during the selection",0,0,0,0.7413843274116516,0.72160404920578,0.96833735704422,0.0,accept,unanimous_agreement
767724619,2261,"i've never seen much performance impact from using `dynamic_cast`. it can be slow in tight loops with deep hierarchies, but that's not the case here.",0,0,0,0.6797294020652771,0.981082320213318,0.974230945110321,0.0,accept,unanimous_agreement
767725826,2261,"[a link] i agree that sometimes we can justify using `static_cast` instead of `dynamic_cast` if we want to get as much performance as possible, and we do guarantee that the specified type is the only possible option here. but one of the reasons why this part of the code was rewritten is that we may want to add more interval types to a wave track in the future, wasn't it?",0,0,0,0.967545747756958,0.9883026480674744,0.9885845184326172,0.0,accept,unanimous_agreement
767726398,2261,a general comment: i'm reviewing changes in the class adjustborders. the other subclass of cliptrimpolicy is adjustbetweenborders. that class is not constructed anywhere. is there a mistake?,0,0,0,0.9708334803581238,0.8685199022293091,0.9874446392059326,0.0,accept,unanimous_agreement
767726453,2261,"sorry, will fix that, thanks!",-1,-1,-1,0.7564520239830017,0.988625943660736,0.9927821159362792,-1.0,accept,unanimous_agreement
767729066,2261,"it's not a mistake, adjustbetweenborders moves borders of both clips if they are close enough, and it was my understanding of how things should happen, and turned out that i was wrong. but i was told that we may need this in the future.",0,0,0,0.8287234306335449,0.9092706441879272,0.9597440958023072,0.0,accept,unanimous_agreement
767730463,2261,you are right about dynamic_cast being better for future generality. i should have remembered myself. so would be any_cast. with std::any i wouldn't need to invent dumb little base classes like trackintervaldata just to have a virtual destructor.,0,0,0,0.8372798562049866,0.950644314289093,0.7664591670036316,0.0,accept,unanimous_agreement
767736547,2261,"`std::any` has costs attached. it's not a `zero-cost` abstraction in general, although compilers may implement a fast-path for small objects.",0,0,0,0.9868934154510498,0.9860376715660096,0.9881028532981871,0.0,accept,unanimous_agreement
885526547,3009,"the second commit fails to compile for me, unless i add to vst3utils.h: [code block]",0,0,0,0.9640222191810608,0.9589255452156068,0.989290416240692,0.0,accept,unanimous_agreement
885527691,3009,"this commit adds an argument to fillparameters and buildplainui. instead, this could replace the editcontroller argument, and that can be fetched from the wrapper.",0,0,0,0.9889459013938904,0.9948847889900208,0.9947388768196106,0.0,accept,unanimous_agreement
885534638,3009,"i think vitaly mentioned that the set of parameters might really be very large. maybe not too large though, to make it inconvenient to cache all. could uses of `foreachparameter` be further simplified, if the set of flags to filter on is passed as another argument to it, and with suitable default values? (maybe two arguments, for flags to include any of, and flags to exclude all of, for `fillparameters`) update -- i no longer like the suggestion i made in this comment very much",-1,0,-1,0.9633327126502992,0.8452072143554688,0.8521575927734375,-1.0,accept,majority_agreement
885541109,3009,"explain in a comment that this is mutable because it is cached once on demand. or even better: define a class parametercache. give the wrapper a `const std::shared_ptr` to a cache. put the mutable member in the cache class, and give it a `const` member function that gives a reference to this vector. give `vstwrapper` a constructor taking `std::shared_ptr` to this cache. the constructor calls `make_shared` if the argument is null, or else uses the given argument. these suggestions anticipate the definition of an instance, which can share the cache of parameters with its plug-in.",0,0,0,0.9878458380699158,0.9928690791130066,0.9913055300712584,0.0,accept,unanimous_agreement
885542995,3009,maybe you can call this `anyof` by analogy with `std::any_of`,0,0,0,0.9699344635009766,0.9937322735786438,0.9874849915504456,0.0,accept,unanimous_agreement
885555676,3009,"the rewrite of `loadsettings` at the second commit is surely wrong, because it never uses `parms` at all. i would rather see a more correct sequence of transformation steps, in which the second commit has the correct lookup in `parms`. then later commits complete the transformation of this function.",0,0,0,0.9170538783073424,0.9915854930877686,0.8912368416786194,0.0,accept,unanimous_agreement
885572910,3009,"where before, `fuid::fromtuid` was called once -- now it is called twice, here and also inside `savepreset`. that looks wrong. and a similar problem, for loading presets. simpler maybe just to pass a reference to `meffectclassinfo` into each of the new functions and let the utility level do the details. or even simpler -- make `meffectclassinfo` a third member of the wrapper base class (this means rewriting the first commit). then there is no argument. the class info, as you can see from some examination, is `const` and set when the vst effect is constructed.",0,0,0,0.838215708732605,0.9895607233047484,0.7535308003425598,0.0,accept,unanimous_agreement
885579739,3009,"there is no filtering at all by parameter flags. is this doing excessive work then? one if the flags is for read-only status. perhaps, exclude those from the fetching and storing.",0,0,0,0.8586622476577759,0.9779064655303956,0.9886271357536316,0.0,accept,unanimous_agreement
885582088,3009,you cause failure if a parameter is known in the plug-in but not known in the mapping. this is not like what i did for audiounits. i think it's better to ignore this case and continue storing other parameters.,0,-1,0,0.514047384262085,0.4995236098766327,0.9852502942085266,0.0,accept,majority_agreement
885584453,3009,the commit that defines this function should also delete the code that is make unnecessary in the other functions that load settings or presets or import.,0,0,0,0.9840202331542968,0.9934076070785522,0.9933903217315674,0.0,accept,unanimous_agreement
885586590,3009,"remember also the calls to `mplainui->reloadparameters();` that move into this function, when this pr is rebased onto 's #2990. (but wait for that pr to be redrafted in response to the first round of review.)",0,0,0,0.9886142015457152,0.995040476322174,0.9923722743988036,0.0,accept,unanimous_agreement
885588112,3009,"the commit comment that removes this function should include more explanation, as in the issue checklist. this step of course has no analogue for au or vst2.",0,0,0,0.9876940250396729,0.9937669038772584,0.9921833872795104,0.0,accept,unanimous_agreement
885860826,3009,"apologies, it was not yet clear to me that i should cmake-generate with pch off, when doing development. when turning it off, i actually found that i'd also need `#include `",-1,0,-1,0.7536759972572327,0.9643734097480774,0.5964794754981995,-1.0,accept,majority_agreement
885867847,3009,"good point, will do that",1,1,1,0.7526612281799316,0.9066523909568788,0.9815465807914734,1.0,accept,unanimous_agreement
885882444,3009,"i have seen that there are about 2000 parameters for the gain plugin which i am using in my tests - so yes, very large (and btw. i can not fathom why a gain plugin needs to have 2k parameters...). scanning 2k of them each time is definitively overkill, so i'd implement what you suggest. however, i think that to make it worth, i'd need to have not just one vector as we have now, but a set of vector e.g. one for the params which are automatable, one for the readonly ones, as needed by the callers of foreachparameter - otherwise if i had only one vector, we'd be back to square one i.e. i'd have to scan all 2000 items of it anyway.",0,0,0,0.8656120300292969,0.8392630815505981,0.8196155428886414,0.0,accept,unanimous_agreement
885893973,3009,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
886000549,3009,"note this from steinberg's header file, ivsteditcontroller.h: [code block] so, check my logic please: i think we can always ignore the hidden parameters. because, see how `parameterinfo.flags` is used. in the places where only the automatable parameters are examined -- that implies that the read-only are excluded. in `syncparameters`, all (and only) the read-onlies are excluded (explicitly). therefore, these visits exclude all the hidden. in `fillparameters`, when building a plain ui -- we may examine some read-only parameters. but, we exclude the hidden ones. therefore: we always ignore the hidden. maybe you can easily verify with some temporary code, that most of these gain parameters are hidden?",0,0,0,0.9819504022598268,0.9899633526802064,0.9880111813545228,0.0,accept,unanimous_agreement
886204252,3009,make `ownsettings` a reference and avoid a map copy,0,0,0,0.9851729869842528,0.9921618103981018,0.9949074387550354,0.0,accept,unanimous_agreement
886204869,3009,could write: `auto &ownsettings = getsettings(settings); ownsettings.clear();` and eliminate the assignment a the end,0,0,0,0.98728209733963,0.9945953488349916,0.9931564927101136,0.0,accept,unanimous_agreement
886206938,3009,"when you correct the lookup into `parms`, also remove `parseautomationparameterkey` which becomes unused",0,0,0,0.9886950850486756,0.9952669143676758,0.9952219128608704,0.0,accept,unanimous_agreement
888220716,3009,"apologies, it looks like the vst3 gain plugin i used for the tests (blue cat's gain suite) is very unusual - it has 2049 parameters but only 2 of them are ""real"" and automatable, i.e. gain amount and on/off - and none of the 2049 params is hidden. i tried with another gain plugin and it has only two parameters. so maybe we can leave things as they are?",-1,0,-1,0.6427375078201294,0.8121398687362671,0.6718493103981018,-1.0,accept,majority_agreement
888282544,3009,"i tried what you suggest, but i came to a point where i had to use the mutable keyword anyway. the problem is, when it is time for constructing vst3wrapper, meditcontroller is still null - if it was not, i could send it as an arg to the vst3wrapper ctor, to be used to populate the cache - and there would no need to have a mutable something. but the fact that the cache can be populated only when meditcontroller is not null, implies that the cache must be mutable.",0,0,0,0.9737652540206908,0.9835330247879028,0.9734068512916564,0.0,accept,unanimous_agreement
888293842,3009,maybe so. but how strange. is there a way to dump information and find out more about this strange plug-in?,-1,-1,-1,0.959492325782776,0.96824049949646,0.9751800298690796,-1.0,accept,unanimous_agreement
888294453,3009,"actually, this duplication happened only for loadpreset. i removed the extra unnecessary conversion in vst3wrapper::loadpreset and verified it still works.",0,0,0,0.9888211488723756,0.992340922355652,0.9938377737998962,0.0,accept,unanimous_agreement
888297232,3009,"what i meant was, the member shared_ptr to the cache can be const, the cache object can be const, but then the members of the cache object need to be mutable. there is still mutable, but hidden at a lower level. is that not what you had to do? i recommend the shared_ptr so the plug-in and its instances can share just one cached definition of the set of parameters that is initialized only once, so we can be sure all visits are really over the same set of parameters. i did something like this for audiounit, but the details did not require shared_ptr or mutable.",0,0,0,0.9270323514938354,0.9849098324775696,0.988502025604248,0.0,accept,unanimous_agreement
888305532,3009,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
888306274,3009,"alright, also done now",0,0,0,0.9728670120239258,0.9080256819725036,0.992052674293518,0.0,accept,unanimous_agreement
889904204,3009,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
889904764,3009,"good point, ok",1,1,1,0.9536526203155518,0.95216703414917,0.944385588169098,1.0,accept,unanimous_agreement
889904854,3009,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
1701795368,7017,"we talked about this a little bit. i believe that an application should have one settings file. this code makes it so that there are two settings files, one that is created by the muse framework (it stores, for example, theme settings) and the other is created here.",0,0,0,0.6705706119537354,0.9666559100151062,0.9825397729873656,0.0,accept,unanimous_agreement
1701804395,7017,should be removed from `src`,0,0,0,0.9862723350524902,0.9942394495010376,0.9948030114173888,0.0,accept,unanimous_agreement
1702015363,7017,"after su a few days ago we had a follow-up discussion with and and iiuc there was a consensus to trying to use the au3 library as a black box with its own persistency mechanism and making sure that this library exposes the necessary read/write from it. but i can conceive that one mechanism for all settings for may make things better on the middle term. only i haven't tried it and seen how the pluginmanager reacts to it. i guess we can experiment with multiple setting files for now and maybe change in the future? the code i had to write for that isn't much, throwing it away if necessary wouldn't be a big loss. i wouldn't block this pr for that, though.",0,0,0,0.9309674501419068,0.8846380710601807,0.9184930324554444,0.0,accept,unanimous_agreement
1702207647,7017,"i only have concerns about the main config file (i have no concerns about the plugin config files). when we move on, and the au3 code disappears completely or almost disappears, the user will still have 2 main config files - this will look very strange, and some effort will need to be made to ensure backward compatibility. there will also be problems directly when rewriting a code. for example, now a selected device can store au3, then we rewrite this functionality to the new code (without wx), but so that a user does not loss anything, we will still need to store (or at least read) from the au3 settings file. in fact, i have already implemented an adapter to the muse::settings, since we seemed to have discussed this yesterday. [a link]",-1,0,0,0.5833469033241272,0.8216426372528076,0.7791540026664734,0.0,accept,majority_agreement
1703819046,7017,"i see : indeed, changing the setting implementation of the general config is even beyond the scope of this pr. sorry that i mixed things up, will revert that line as soon as i can verify that my poc still runs without it. (having troubles launch the app at the moment.)",-1,-1,-1,0.989207684993744,0.985857367515564,0.9926661849021912,-1.0,accept,unanimous_agreement
1710043302,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710052614,7017,"that could be a single `platformcompatibilitywx.cpp` which simply wraps calls to `wxstandardpaths`, the new implementation does not depend on wx, but might introduce unwanted behavior change.",0,0,0,0.9825844168663024,0.9919779300689696,0.9855427742004396,0.0,accept,unanimous_agreement
1710060709,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710061559,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710061675,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710061952,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710062076,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710062546,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710067781,7017,is it used at all?,0,0,0,0.984372079372406,0.9879044890403748,0.9917933344841005,0.0,accept,unanimous_agreement
1710081680,7017,may be `basicui::*` would be a good replacement for it?,0,0,0,0.9700380563735962,0.9949573874473572,0.993156373500824,0.0,accept,unanimous_agreement
1710150187,7017,am i miss something? this line seem to never evaluate to `true`,0,0,0,0.6611136794090271,0.9476937651634216,0.6490305066108704,0.0,accept,unanimous_agreement
1710161365,7017,"just remembered that we have `globalhook`s, but i do not insist that we should use that one here",0,0,0,0.9631536602973938,0.9891496300697328,0.9923900961875916,0.0,accept,unanimous_agreement
1710168887,7017,changes in that file are not necessary,0,0,0,0.9702103137969972,0.9893409609794616,0.9937257170677184,0.0,accept,unanimous_agreement
1710170394,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710171593,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710171909,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710172288,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710172512,7017,unnecessary change,-1,0,0,0.5957686305046082,0.906771719455719,0.709006667137146,0.0,accept,majority_agreement
1710972226,7017,i like previous name more :),1,1,1,0.987938642501831,0.9950522780418396,0.8094176650047302,1.0,accept,unanimous_agreement
1711132553,7017,awesome ! how come i didn't think of that.,1,1,1,0.9888277053833008,0.9957707524299622,0.9958155751228333,1.0,accept,unanimous_agreement
1711143324,7017,hm. not anymore. good catch.,1,1,1,0.9732474088668824,0.8474898338317871,0.9696193933486938,1.0,accept,unanimous_agreement
1711160460,7017,"i think so too. i was being extra conservative. (`mmessageboxcb` was also meant to be injected with `getmessageboxcb()`, but i lost that injection somewhere along the way. anyway.)",-1,0,0,0.5333095192909241,0.8835218548774719,0.9698328375816344,0.0,accept,majority_agreement
1711170425,7017,"i didn't pay attention. was added in [a link]. i can't see how this could be executed either, though. remove ? then we'd have one callback injection less.",0,0,0,0.5827038884162903,0.8776113986968994,0.8916390538215637,0.0,accept,unanimous_agreement
1711200658,7017,"awesome ! how come i didn't think of it. also maybe qt has such helpers, too, when it gets needed in au4. i'll give it a try.",1,1,1,0.9918575882911682,0.9955183267593384,0.9963181018829346,1.0,accept,unanimous_agreement
1065800814,4053,why do we have this enum?,0,0,0,0.9647387266159058,0.9678657650947572,0.9902100563049316,0.0,accept,unanimous_agreement
1065801159,4053,should the state be `final`?,0,0,0,0.9855331778526306,0.9933816194534302,0.988813817501068,0.0,accept,unanimous_agreement
1065802987,4053,do we need this struct at all? why is it not `final`?,0,0,0,0.969420850276947,0.9935411214828492,0.992899775505066,0.0,accept,unanimous_agreement
1065803426,4053,i don't like this naming at all. it is really confusing when reading,-1,-1,-1,0.985886573791504,0.9899560213088988,0.9942514896392822,-1.0,accept,unanimous_agreement
1065807072,4053,should this be explicit?,0,0,0,0.9839465618133544,0.9885905385017396,0.9909560084342957,0.0,accept,unanimous_agreement
1065809568,4053,"you may call me very picky, but i think that this is a very confusing name.",-1,-1,-1,0.9529537558555604,0.9508832097053528,0.98509418964386,-1.0,accept,unanimous_agreement
1065811994,4053,if i'd see this in a forest - i would run away screaming. it is very hard to understand what happens here just by reading the code.,-1,-1,-1,0.970772385597229,0.9226970672607422,0.985779881477356,-1.0,accept,unanimous_agreement
1065814912,4053,`title` was so much more descriptive,0,0,0,0.916153371334076,0.9641807675361632,0.9715942740440368,0.0,accept,unanimous_agreement
1065820142,4053,"something like `const basicmenu::menuitemtext& menuitemtext` feels much more readable. i don't quite like `basicmenu` name either, but it's too late to do anything about it.",-1,0,0,0.6240853667259216,0.7925413250923157,0.8738276362419128,0.0,accept,majority_agreement
1065826484,4053,do we really need optional here? how is it different from checking for `phelp.empty()`? why is is called `phelp`?,0,0,0,0.9849977493286132,0.9903620481491088,0.9945915341377258,0.0,accept,unanimous_agreement
1065832443,4053,"generally i would like more consistency here, i. e. getters in both places",0,0,0,0.94221693277359,0.9887682795524596,0.98172527551651,0.0,accept,unanimous_agreement
1066061451,4053,why filehistorymenus needs to be a nested class?,0,0,0,0.96678626537323,0.9767377972602844,0.9881812334060668,0.0,accept,unanimous_agreement
1066068178,4053,"i understand that this somehow reflects the decisions made by wxwidgets, but this is probably the most confusing name of this pr",0,-1,-1,0.6356150507926941,0.910753607749939,0.7298550009727478,-1.0,accept,majority_agreement
1066778465,4053,i would much prefer to have a factory function to tricks with tag types. `freshmenu` caries very little semantics. sound like something related to food ([a link],0,-1,0,0.6066208481788635,0.6286965608596802,0.969501495361328,0.0,accept,majority_agreement
1066782359,4053,"there are 4 method that accept very similar list of parameters. provided that all of them are in one namespace it feels that item should be a structure. as i noted earlier, naming is not clear at all too.",0,0,0,0.9823840856552124,0.9333944320678712,0.988239288330078,0.0,accept,unanimous_agreement
1066785533,4053,not final,0,0,0,0.9313243627548218,0.9084278345108032,0.9797123670578004,0.0,accept,unanimous_agreement
1066786697,4053,"we break down ""item::text"" here. overall, it feels that we need this structure, not the previous ones.",0,0,0,0.92925626039505,0.9731037616729736,0.9925395846366882,0.0,accept,unanimous_agreement
1066788967,4053,"no final. naming is very unclear. i would much prefer something like `menuiteminfo`. (no, `basicmenu::info` doesn't help to understand the intention at all)",0,0,0,0.860628068447113,0.7798238396644592,0.6431763768196106,0.0,accept,unanimous_agreement
1066789327,4053,not final.,0,0,0,0.8438448905944824,0.9261312484741212,0.961384117603302,0.0,accept,unanimous_agreement
1066790673,4053,all the previous comments apply here,0,0,0,0.9877632260322572,0.9860203862190248,0.9940955638885498,0.0,accept,unanimous_agreement
1066795592,4053,"i think this should be removed before merge, to be fair.",0,0,0,0.955913245677948,0.9666830897331238,0.9659509658813475,0.0,accept,unanimous_agreement
1066796055,4053,overall it feels that this file should be split.,0,0,0,0.9721910953521729,0.8487290740013123,0.9841338396072388,0.0,accept,unanimous_agreement
1066821630,4053,i think popup should not be the part of this class. this way we will be able to separate menu data and how the specific framework builds menus,0,0,0,0.973059892654419,0.9823901653289796,0.9755188822746276,0.0,accept,unanimous_agreement
1066823377,4053,should we use `handle` interface here instead?,0,0,0,0.987686574459076,0.9947627186775208,0.9946407079696656,0.0,accept,unanimous_agreement
1066827183,4053,"optionally, we can rename `freshmenu` as `emptymenu`. but i still prefer something like `makemenu` or `makeemptymenu`",0,0,0,0.97703218460083,0.9936750531196594,0.9917568564414978,0.0,accept,unanimous_agreement
1066846273,4053,but should they be implicit? i have nothing against though,0,0,0,0.9232189059257508,0.7592278122901917,0.9810153245925904,0.0,accept,unanimous_agreement
1066895353,4053,even getting here doesn't help me understanding `item::state` (i might have missed something). if this is a mask - why not call it something like `statemask` or so?,0,0,0,0.5919570326805115,0.9591134786605836,0.9825327396392822,0.0,accept,unanimous_agreement
1857999177,7785,"why was it necessary to link this module? this looks unexpected, it is alarming that the audio module depends on the track editing module",-1,-1,-1,0.93317449092865,0.8879076838493347,0.966679871082306,-1.0,accept,unanimous_agreement
1858027143,7785,i think better to just include `effects/effects_base/effectstypes.h`,0,0,0,0.9626132249832152,0.989732563495636,0.9869354367256165,0.0,accept,unanimous_agreement
1858071064,7785,it is better to add the required method to the `ieffectsprovider` and use it through injection,0,0,0,0.9876936674118042,0.9918560981750488,0.993190586566925,0.0,accept,unanimous_agreement
1858074245,7785,"better not to use the abbreviation, at first i didn't understand what rt is",0,-1,0,0.7187234163284302,0.8905085921287537,0.9386597871780396,0.0,accept,majority_agreement
1858075969,7785,it is better to add the required method to the `itrackeditproject` and use it by [code block],0,0,0,0.9877849817276,0.9918999671936036,0.994616687297821,0.0,accept,unanimous_agreement
1858079426,7785,"i am also confused by the item in the audio module. item is about ui, as for me, the audio module should not operate with such concepts",0,-1,-1,0.5812111496925354,0.7746616005897522,0.7870199680328369,-1.0,accept,majority_agreement
1858083751,7785,"i believe there is a better place for all this. the audio engine is a low-level utility service, it is unexpected to see it accessing the global context, working with tracks, subscribing to track events... i think that all this added code needs to be moved to the `effects_base` module, adding a new interface, something like `irealtimeeffects` and its implementation.",0,0,0,0.5562450885772705,0.9805415868759156,0.95545095205307,0.0,accept,unanimous_agreement
1858087586,7785,"these comments are useless, you set for them `uictxprojectopened` context, so this won't happen and the likelihood that someone will encounter this is low (i am not sure that someone will change their context)",-1,0,0,0.7549733519554138,0.7950416803359985,0.6304810047149658,0.0,accept,majority_agreement
1858098593,7785,"the default value is false, so you don't need to set it here we use true in rare cases, and this is not your case",0,0,0,0.9759746193885804,0.992537796497345,0.9933899641036988,0.0,accept,unanimous_agreement
1858099946,7785,you can use `normalcolor`,0,0,0,0.9860470294952391,0.9925695061683656,0.994628131389618,0.0,accept,unanimous_agreement
1858103701,7785,if you need a border for flatbutton you should override backgrounditem,0,0,0,0.9893757104873656,0.9918277263641356,0.9938534498214722,0.0,accept,unanimous_agreement
1858106614,7785,you can use menubutton for it,0,0,0,0.986685276031494,0.9890096783638,0.9942964911460876,0.0,accept,unanimous_agreement
1858109376,7785,better to use component.oncompleted for root item,0,0,0,0.9790705442428588,0.9852729439735411,0.9924513697624208,0.0,accept,unanimous_agreement
1858638824,7785,"i already have a `realtimeeffectlistitem.qml` :) wanted to avoid the two getting confused. i agree that ""list item"" does sound ui-like indeed. however, the sequence of realtime effects we set on the audio engine (or in the effect module, debate is ongoing) needs a name. what do you suggest ? ""sequence"" instead of ""list"" would do. ""entry"" instead of ""item"", too. pick your combination :)",1,1,1,0.9840242266654968,0.9950939416885376,0.9934712648391724,1.0,accept,unanimous_agreement
1858641176,7785,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
1859138525,7785,why ?,0,0,0,0.6633803844451904,0.8471168279647827,0.9233791828155518,0.0,accept,unanimous_agreement
1859138780,7785,"awesome, thanks !",1,1,1,0.990998387336731,0.9957031607627868,0.9962412118911744,1.0,accept,unanimous_agreement
1859142299,7785,"thanks for the suggestion, i looked into this. the default for flatbutton is that component of id `defaultbackgroundcomponent`. it does everything i want my button to do, except for the border thing (it uses `ui.theme.borderwidth`, which equals 0, though). i haven't found a ready-to-go solution to reuse it without duplicating it or changing the framework to expose that property in the flatbutton. this last option seems like the right one, but i'm lazy and maybe there's another correct way ?",0,1,1,0.4767146110534668,0.819374144077301,0.9587894678115844,1.0,accept,majority_agreement
1859146971,7785,"... which is the default, so i can remove this line. thanks !",1,1,1,0.9816438555717468,0.9852242469787598,0.9924060702323914,1.0,accept,unanimous_agreement
1860073191,7785,"i will suggest duplicating, overriding backgrounditem is done exactly for such cases, so as not to create a lot of properties",0,0,0,0.978756308555603,0.9810024499893188,0.9925109148025512,0.0,accept,unanimous_agreement
1860075613,7785,to initialize the model after all the elements on the page have been created in the future it may be that the model will depend on some other parameters from the page that may not have been created yet,0,0,0,0.9867883920669556,0.9909772872924804,0.9855930209159852,0.0,accept,unanimous_agreement
1860114819,7785,"yeah, but then i have a button whose only difference to the rest of the ui is that it has a non-zero border. if i duplicate it and `menubutton` changes on the framework, my button will not get automatically updated. so there seems not to be a way i overlooked. will go for the duplication now but will look into making a pr in the framework.",0,0,0,0.9399869441986084,0.7762148976325989,0.9780308604240416,0.0,accept,unanimous_agreement
1860119205,7785,so children are initialized before their parents? i never realized. ok then.,0,0,0,0.9802093505859376,0.9380879998207092,0.9814008474349976,0.0,accept,unanimous_agreement
1860602708,7785,"i just gave it a try: it's not enough to just duplicate `defaultbackgroundcomponent`, i'd have to duplicate the entire `flatbutton`. so nevermind, for now, it'll be the rectangle wrapper. and how about flatbutton.qml: [code block] and then [code block] this only exposes one more property and gives the client control over the properties of the default item. (only a pity that i have to use `component.oncompleted`)",-1,0,-1,0.7947012186050415,0.7675598859786987,0.6111059188842773,-1.0,accept,majority_agreement
1860606187,7785,"just in case, if we use data types from another module that are described only in the `.h` file, or interfaces, then we do not need to link these modules. in the current implementation of au4, it is usually necessary to link only au3wrap and global (linked automatically) i.e. to use trackid you don't need to link trackedit, to use effectid you don't need to link effects_base",0,0,0,0.9860510230064392,0.9949173927307128,0.9928717017173768,0.0,accept,unanimous_agreement
1861640674,7785,"no, you are bringing the private part out, this approach is wrong let me clarify, i meant to duplicate defaultbackgroundcomponent",0,0,0,0.5234186053276062,0.7006444931030273,0.976756989955902,0.0,accept,unanimous_agreement
1861804737,7785,"like i said,",0,0,0,0.9683852195739746,0.95847886800766,0.9855049252510072,0.0,accept,unanimous_agreement
1861833149,7785,can you get it from effectmeta?,0,0,0,0.988446831703186,0.994170606136322,0.9946268200874328,0.0,accept,unanimous_agreement
1861836496,7785,show how you tried to duplicate,0,0,0,0.9842358827590942,0.922810435295105,0.9920483231544496,0.0,accept,unanimous_agreement
1861849576,7785,magic structure can we describe it? create our structure with important fields,0,0,0,0.9834784269332886,0.985557496547699,0.9806907773017884,0.0,accept,unanimous_agreement
1861856019,7785,i threw the experiment away. you can see for yourself that defaultbackgroundcomponent has dependencies on flatbutton.,0,0,0,0.9457837343215942,0.8374701738357544,0.9768317341804504,0.0,accept,unanimous_agreement
1861857477,7785,also.,0,0,0,0.9817356467247008,0.9795122742652892,0.9842071533203124,0.0,accept,unanimous_agreement
1863100382,7785,was in fact just used as identifier. just using `uintptr_t` is better indeed.,0,0,0,0.9815661907196044,0.9922397136688232,0.9927378296852112,0.0,accept,unanimous_agreement
808094571,2561,unnecessary assignment,0,0,0,0.7626065015792847,0.871398389339447,0.5215676426887512,0.0,accept,unanimous_agreement
808943625,2561,do not delete the i18n_hint comment that helps the translators,0,0,0,0.9807698726654052,0.9850285053253174,0.9921420812606812,0.0,accept,unanimous_agreement
808946753,2561,"why was it necessary for resolving this issue, to delete this logic that appends ""label track"", ""note track"", etc. to `name`? this name is not the name you will see on the screen. it is a name that the screen reader will speak. may not agree with this change. you are removing the default name (i didn't like it either) so the suffix ""label track"", etc. so now you are prepending ""track #n"" always. i think that is all right.",0,0,0,0.8964868783950806,0.9472441673278807,0.938290536403656,0.0,accept,unanimous_agreement
808953758,2561,you review yourself? :-),1,1,1,0.9413007497787476,0.9832273721694946,0.92353492975235,1.0,accept,unanimous_agreement
808959204,2561,"certain import file formats might contain multiple channels that become multiple tracks. should you consider giving them unique names? but in the usual case of one track, i understand that you would not want to add the numeral.",0,0,0,0.9833266139030457,0.9680649638175964,0.991114377975464,0.0,accept,unanimous_agreement
808962900,2561,"i understand that you changed the factory to force you to fix compilation of all uses of it, and so consider at each place how to set the track name. how can we guarantee that future calls to these functions will also have names set? should you at least comment here that the caller should consider setting a unique track name?",0,0,0,0.9798669815063475,0.9873374104499816,0.9921826720237732,0.0,accept,unanimous_agreement
809106837,2561,"that what i proposed, maybe not the best solution, and it needs to be improved (or reverted).",0,0,0,0.9576284885406494,0.9667826890945436,0.757698118686676,0.0,accept,unanimous_agreement
809115537,2561,"this function doesn't set the name. the reason is that the track with random name isn't better than track without the name, when the intention is to have a track with a certain name. another reason is that there are many cases when track is created to hold some temprorary data and then inserted into another track. i'll improve the comment by adding ""an unnamed empty track"".",0,0,0,0.983975112438202,0.977706015110016,0.9901471734046936,0.0,accept,unanimous_agreement
809138170,2561,"if i understand your question correctly, then i think `projectfilemanager::addimportedtracks` assigns unique names to the channels. yes.",0,0,0,0.9863488674163818,0.9819767475128174,0.9918870329856871,0.0,accept,unanimous_agreement
809144434,2561,"i've found multiple instances, of the same string in different places and with different comments (or without them), and didn't find an approriate one for this case, but missed that one: `/* i18n-hint: the %d is replaced by the number of the track.*/` thanks.",1,0,1,0.6781833171844482,0.9273094534873962,0.8791201710700989,1.0,accept,majority_agreement
809147771,2561,"yes, i need to improve my practice of self-reviewing)",0,0,0,0.6995477080345154,0.911920964717865,0.956024706363678,0.0,accept,unanimous_agreement
809468755,2561,"if a translatable string literal is repeated exactly in more than one place, and without a context string, then it is enough the one occurrencde has a comment.",0,0,0,0.9866418838500975,0.9857866764068604,0.992763102054596,0.0,accept,unanimous_agreement
810002733,2561,"1. prepending ""track #n"". this is too verbose, and it would be better to prepend simply ""#n"". 2. removal of the conditional appending of ""label track"", ""note track"", etc. please don't remove this. the idea is that when for example someone changes the default name of a newly created label track from ""label track"", to say ""fred"", the screen reader readers ""fred label track"" which reminds the user that it is a label track, and not an audio track (or indeed inform the user that it's a label track, if they did not create the project themselves). similarly for note tracks and time tracks.",0,0,0,0.7139157056808472,0.9873443841934204,0.742451548576355,0.0,accept,unanimous_agreement
811045288,2561,"the repetition of making a track, then setting its default name with a unique number, is repeated in a few places. i would suggest a static member function of labeltrack to simplify this repetition.",0,0,0,0.9865625500679016,0.99007248878479,0.9921890497207642,0.0,accept,unanimous_agreement
811055555,2561,"please see the struct track::classtypeinfo and learn a bit about how it is used. maybe it should be extended with a field containing the default name for a track type, so there is a uniform way to specify it for label and wave and other types of tracks. if for some reason there is need for polymorphism in getting ""the default name for a track type"" but unspecified which type that is. but this generalization is for now a solution looking for a problem. don't do it, but think a little about it.",0,0,0,0.9446920156478882,0.970934510231018,0.9846088886260986,0.0,accept,unanimous_agreement
811469915,2561,"makes sense, thanks",1,1,1,0.9620105624198914,0.8120645880699158,0.9331464767456056,1.0,accept,unanimous_agreement
811985413,2561,"the latest changes to simplify the repetitions lost the use of makeuniquetrackname on pahts like this where the argument is explicit. tell me you meant that, or else fix it.",0,0,0,0.9847687482833862,0.9775641560554504,0.9921644926071168,0.0,accept,unanimous_agreement
811987500,2561,"comment the two functions above about the intention to add unique names, unless that is caller's responsibility. or maybe add a boolean to control whether there is unique numbering.",0,0,0,0.985819935798645,0.9926736950874328,0.9933903217315674,0.0,accept,unanimous_agreement
811994001,2561,"as i review more, i see there are only two uses of this overload of labeltrack::create. the other one, in effect.cpp, does not want a unique name. so, just this call needs a fix.",0,0,0,0.9751249551773072,0.9782015085220336,0.9872318506240844,0.0,accept,unanimous_agreement
812002069,2561,"the four #include directives above were removed from an earlier version of this pull request, which was a happy thing reducing the dependencies. but now three of them return. i don't say it's a necessity for approval of this pr, to eliminate them. but i would like them eliminated at some future time. my hope is that note, time, and label track functionalities could be completely segregated from audacity into optional add-ons. in fact my big experimental misc-libraries branch accomplishes that. but this change may cause me some difficulties in rebasing all of it.",0,1,0,0.6431267857551575,0.8463810086250305,0.8189877867698669,0.0,accept,majority_agreement
812005264,2561,"nothing wrong with these latest changes, but i understand there is still debate and it's not yet final. if a virtual function can be added to track so that the dynamic_casts and #include of note, wave, and label tracks can go way, that would be nice. eliminating wavetrack.h is not as important -- i don't plan to segregate wavetrack from the audacity monolith in an add-on. wavetracks are just too much involved with everything else.",-1,0,0,0.7905135154724121,0.881591796875,0.8617098927497864,0.0,accept,majority_agreement
812084656,2561,only one with default name assigns unique name to the track,0,0,0,0.9863579273223876,0.9916354417800904,0.9945841431617736,0.0,accept,unanimous_agreement
812084846,2561,thanks,1,0,1,0.6094269156455994,0.5400217771530151,0.8643599152565002,1.0,accept,majority_agreement
900290830,3070,"maybe these two lines should be switched, just to be sure that their sequence remains the same as it was in vst3effect before, so the sequence of their destruction is the same. or maybe it makes not difference.",0,0,0,0.9489105343818665,0.9912015199661256,0.9817124009132384,0.0,accept,unanimous_agreement
900292067,3070,"in the first commit, the inclusion here allows you to delete the same header included in two other places and still compile. do that.",0,0,0,0.986764907836914,0.9906466007232666,0.9943838119506836,0.0,accept,unanimous_agreement
900293548,3070,"this line allows two other inclusions of module.h to be removed, at the first commit.",0,0,0,0.989641010761261,0.9941418766975404,0.994394302368164,0.0,accept,unanimous_agreement
900297819,3070,"remove the two uses of `std::optional::value` above and use the `*` operator instead. it breaks the mac build, as do certain other c++17 library functions that can throw new kinds of exceptions. but on mac they can't build and link unless a certain minimum version of the operating system is targeted, above our present minimum. the difference with `*` is that is just gives undefined behavior if there is no value, not an exception. but you have the proper null (or should i say nullopt) checks before use so it is safe.",0,0,0,0.984272599220276,0.975063979625702,0.9914073348045348,0.0,accept,unanimous_agreement
900299154,3070,this inclusion at the second commit lets you remove the header in one other place.,0,0,0,0.988889455795288,0.9915732741355896,0.9943166375160216,0.0,accept,unanimous_agreement
900306896,3070,"you didn't write this assertion -- you only move a line that existed in another file. but read this uncommented assertion and ask, what's the proof? the proof should ideally be deduced from a postcondition stated explicitly in a comment in class base64. and size_t would be a better return type for `decode`.",0,0,0,0.9857001304626464,0.9933178424835204,0.9926449060440063,0.0,accept,unanimous_agreement
900308392,3070,again you add an #include and should check whether you can remove the same file elsewhere. and you can.,0,0,0,0.9845594763755798,0.989487648010254,0.9947636127471924,0.0,accept,unanimous_agreement
900310450,3070,`fetchsettings` is given settings that are not assumed to be initially empty. be sure to assign nullopt along paths that fail to get state from the plug-in.,0,0,0,0.989281415939331,0.9891455173492432,0.992942988872528,0.0,accept,unanimous_agreement
900328842,3070,`value` again twice needs to be rewritten,0,0,0,0.9862363934516908,0.9840651154518129,0.9907225370407104,0.0,accept,unanimous_agreement
900339877,3070,"`loadsettings`, like `fetchsettings`, should make the given settings reflect exactly what is in the instance or the config file. so, add other branches that assign nullopt when the configuration does not contain a string.",0,0,0,0.9888569712638856,0.99490225315094,0.9942581653594972,0.0,accept,unanimous_agreement
900342197,3070,it is documented that `savesettings` may assume `parms` is empty. this is unlike `loadsettings` which cannot assume `settings` begins empty.,0,0,0,0.9881334900856018,0.9948260188102722,0.9941500425338744,0.0,accept,unanimous_agreement
900350286,3070,"you anticipated me. i see this now, taking the commits in sequence. good: but of course rebase interactively and squash the fixes onto earlier commits before this is merged.",1,1,1,0.6694050431251526,0.889984130859375,0.5408877730369568,1.0,accept,unanimous_agreement
900374024,3070,the wrapper base class already hass `meffectclassinfo` so this call and the call to `loadpreset` can pass just one argument.,0,0,0,0.9889034628868104,0.9944173097610474,0.994481921195984,0.0,accept,unanimous_agreement
900376512,3070,"the commit that inserts the `fetchsettings` calls is good. it should be squashed with the earlier commit that rewrites `loadsettings` and `savesettings`. that commit isn't complete without the calls to `fetchsettings` because `savesettings` is assuming that the fetch was already done, and is not correct without it.",0,0,0,0.587385892868042,0.9731603264808656,0.979986608028412,0.0,accept,unanimous_agreement
908208492,3070,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
908208624,3070,also done,0,0,0,0.9839096665382384,0.9532709717750548,0.9789647459983826,0.0,accept,unanimous_agreement
908208935,3070,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908217679,3070,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908222606,3070,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
908223677,3070,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
908235071,3070,"right, done",0,0,0,0.9631369709968568,0.9163886308670044,0.9782338738441468,0.0,accept,unanimous_agreement
908248750,3070,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
908252300,3070,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
908254685,3070,"i assume that by this you mean that in `loadsettings `i should add `else `branches to assign nullopt in case something could not be read, as you comment later.",0,0,0,0.9886075854301452,0.9928005933761596,0.9914980530738832,0.0,accept,unanimous_agreement
908264237,3070,woops! done.,1,-1,-1,0.9646806120872498,0.9698967337608336,0.9773388504981996,-1.0,accept,majority_agreement
908276814,3070,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
908434278,3070,the second commit in the sequence is still not buildable. rebase and squash the fix onto the second commit.,0,0,0,0.9593884944915771,0.9838017821311952,0.9933700561523438,0.0,accept,unanimous_agreement
908498418,3070,"yes and i meant that the analogous is not needed in savesettings -- which would be, deleting a key/value pair from the config file.",0,0,0,0.9880961179733276,0.994549572467804,0.9938874840736388,0.0,accept,unanimous_agreement
908535858,3070,"i interpret your comment in this way: 1) leave the assertion there, and write a comment in class base64 that the returned value should be <= buffer.getsize() 2) have `size_t len = static_cast ( base64::decode(str, buffer) );` - or do you mean 2) rewrite base64::decode so that it returns a size_t instead of an int ?",0,0,0,0.9861959218978882,0.9939780235290528,0.9928130507469176,0.0,accept,unanimous_agreement
1409618318,5675,"this leaves the function `onadvancedvzoom` unused, so delete it too",0,0,0,0.9842360019683838,0.9941283464431764,0.9947108030319214,0.0,accept,unanimous_agreement
1409629935,5675,"did you scan the code for all occurrences of ""/gui/verticalzooming""? maybe i should review #5685 first. so far this looks like a change i could not approve, because of incompleteness. the code is still governed by the behavior of a preference that you can't change any more in the user interface. that behavior would be ""stuck"" one way or another depending on your audacity.cfg file. by the way -- the long-distance coincidence of repeated string literals for the preference pathname is a thing i have long disliked. so instead there are the classes in `prefs.h` -- `boolsetting`, etc. -- which ought to eliminate all of these repetitions some day as a code cleanup. there would be a lot of volume of work there. maybe you can figure out examples and volunteer to do some of those cleanups if you like. that's for preferences we don't remove.",-1,0,0,0.6816261410713196,0.6574810743331909,0.9196584820747375,0.0,accept,majority_agreement
1409642428,5675,"maybe you should remove one preference at a time in each commit, and do each really completely. ""/gui/adjustselectionedges"" is used in `viewinfo::updateprefs` so there is the same objection that it's possible to have behavior frozen one or another way depending on the config file. admittedly it's unlikely anyone would do this. still it leaves the code simplification incomplete. so you should also eliminate the member variable `viewinfo::badjustselectionedges` and simplify by assuming it was true wherever it was used before.",-1,0,0,0.8944354057312012,0.984878957271576,0.9822008609771729,0.0,accept,majority_agreement
1577565457,6306,"oops, mistake ...",-1,-1,-1,0.9880486130714417,0.9762983322143556,0.9270806908607484,-1.0,accept,unanimous_agreement
1577570177,6306,"all right, i overlooked these implementations ... wip.",0,-1,0,0.9492250084877014,0.7313597202301025,0.987902283668518,0.0,accept,majority_agreement
1577624110,6306,"i'm not sure here. eventually it will replace the offline processor, ""stealing"" its name (currently ""real-time compressor""), so maybe it should stay `after_3_1` and not be `always` ? on the other hand, i don't see any different consequence in returning `after_3_1` or `always`.",0,0,0,0.9014944434165956,0.9590423107147216,0.9365375638008118,0.0,accept,unanimous_agreement
1577637091,6306,"if you reuse the old id, you should introduce after_3_6 (3_7?) this is a way paul has introduced to distinguish between rt/non-rt versions of built in effects",0,0,0,0.9870861172676086,0.9938772320747375,0.9937897324562072,0.0,accept,unanimous_agreement
1577639542,6306,not needed.,0,0,0,0.9606450200080872,0.9052770733833312,0.992871344089508,0.0,accept,unanimous_agreement
1577654326,6306,also wrong - coming up.,-1,0,0,0.618984043598175,0.5490647554397583,0.7782170176506042,0.0,accept,majority_agreement
1577655583,6306,these defaults should be reviewed.,0,0,0,0.983637511730194,0.987217366695404,0.9868196845054626,0.0,accept,unanimous_agreement
1579457253,6306,"i think i fixed it on my branch too, hence the conflict",0,0,0,0.8768324851989746,0.9803377389907836,0.983092486858368,0.0,accept,unanimous_agreement
1579504639,6306,it's not quite clear what it tests tbh,0,-1,0,0.6543903946876526,0.7891588807106018,0.8347882628440857,0.0,accept,majority_agreement
1579524442,6306,"i would prefer static or ""constructor"" cast, by it is very minor",0,0,0,0.8893264532089233,0.9260501861572266,0.9793988466262816,0.0,accept,unanimous_agreement
1579531873,6306,this looks ... odd. i think there should be something in line with `mslaves.push_back(compressorinstance { mprocessor })`,-1,-1,-1,0.9417036771774292,0.9721202254295348,0.7834296822547913,-1.0,accept,unanimous_agreement
1579532749,6306,see `effectreverb::instance::realtimeaddprocessor`,0,0,0,0.986522138118744,0.992841362953186,0.9951074123382568,0.0,accept,unanimous_agreement
1579538618,6306,why do files relating only to one particular effect belong in lib-effects? i don't agree with the file placement.,0,0,0,0.7639690041542053,0.8529829382896423,0.7573455572128296,0.0,accept,unanimous_agreement
1579541351,6306,should this be configurable?,0,0,0,0.9868395924568176,0.9934322834014891,0.9924278855323792,0.0,accept,unanimous_agreement
1579589534,6306,wdyt?,0,-1,0,0.9751594066619872,0.614355742931366,0.9878125786781312,0.0,accept,majority_agreement
1579593094,6306,"provided that this effect is new, i think `realtimesince::always` makes much more sense",0,0,0,0.6515991687774658,0.9709757566452026,0.9908024072647096,0.0,accept,unanimous_agreement
1579595872,6306,"the same i think applies to the compressor, as you have changed the id",0,0,0,0.9865490794181824,0.9906595945358276,0.9917486906051636,0.0,accept,unanimous_agreement
1580657016,6306,"i agree, it's confusing.",-1,-1,-1,0.9461642503738404,0.9404333233833312,0.8966261148452759,-1.0,accept,unanimous_agreement
1580658695,6306,"because then they can be reused by another target, namely a unit test.",0,0,0,0.9857192635536194,0.992806911468506,0.9907671809196472,0.0,accept,unanimous_agreement
1580659838,6306,let's make sure we discuss the string i pushed in a follow-up commit.,0,0,0,0.981881320476532,0.991400420665741,0.9933388829231262,0.0,accept,unanimous_agreement
1581095954,6306,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
1581147854,6306,"isn't this a capability? i expect the `realtimeeffectstate` class to create the correct number of slaves, provide the correct input, etc., which, afaics, it does, too.",0,0,0,0.9870498776435852,0.991046130657196,0.992496132850647,0.0,accept,unanimous_agreement
1581155276,6306,"it doesn't test much indeed. i've been using it a little bit as debug helper. maybe it will come in handy when i start tweaking the algorithm, which i consider doing after the ui follow-up work.",0,0,0,0.951959788799286,0.9231712818145752,0.9216874837875366,0.0,accept,unanimous_agreement
1581155633,6306,rebased.,0,0,0,0.982489824295044,0.958116054534912,0.9845768809318542,0.0,accept,unanimous_agreement
1581218815,6306,"it is extraneous to lib-effects. i would rather give it its own library if you must have unit tests. ideally mod-effect-classes could be separated as in my pull request and made independent of the audacity executable and given its own unit tests, but that presupposes much dependency breaking that is not yet figured out.",0,0,0,0.9506056308746338,0.9441715478897096,0.985091269016266,0.0,accept,unanimous_agreement
1581377926,6306,"i would also like to have framework-agnostic processors have their own library, easy to re-use by other projects. we're only at the beginning of the release cycle, the code around the compressor will not rest until 3.7, i'll have time to relocate.",0,0,0,0.9649309515953064,0.978419303894043,0.9771941900253296,0.0,accept,unanimous_agreement
1581381732,6306,done. they may be refined until the next release.,0,0,0,0.98276948928833,0.9903032183647156,0.9923654198646544,0.0,accept,unanimous_agreement
1901568480,7978,i think it would be nice to leave this test with expected values as before (but setting timepoint mode explicitly) and writing additional test checking duration mode,0,0,0,0.9566854238510132,0.982646107673645,0.9746735692024232,0.0,accept,unanimous_agreement
1901573870,7978,"yes! sure! you are right! i should increase the test coverage, not the opposite.",1,1,1,0.8922725915908813,0.9722631573677064,0.9828798174858092,1.0,accept,unanimous_agreement
1901642617,7978,as far as i could see. we only use the duration variant on this timecode widget and i don ́t want to inject the formatter mode if this is not really needed. but to keep the test coverage i have added a file to test the beatsformatter itself.,0,0,0,0.97723388671875,0.9822903275489808,0.98918879032135,0.0,accept,unanimous_agreement
1901653828,7978,perfect :thumbs_up:,1,1,1,0.953399121761322,0.9929485321044922,0.9966699481010436,1.0,accept,unanimous_agreement
1901656949,7978,hey -gabriel ! is it not the opposite? isn't the instance in `playbacktoolbar.qml` responsible for the display of this guy? ![a link],1,1,-1,0.5823692679405212,0.5217056274414062,0.9423733353614808,1.0,accept,majority_agreement
1901658965,7978,"personally i wouldn't make such a critical argument optional with default, to make sure the user of this class gives it some thinking.",-1,0,0,0.5087887048721313,0.9749324321746826,0.9627614617347716,0.0,accept,majority_agreement
1901659466,7978,cannot be `const` ?,0,0,0,0.9720535278320312,0.9878190755844116,0.989559531211853,0.0,accept,unanimous_agreement
1901665221,7978,"actually, why not keeping `m_fieldvalueoffset`, (making it const and) setting it in the ctor to 0 or 1 depending on the `beatsformattermode` ? that would reduce the diff and make the code more condensed.",0,0,0,0.9854000210762024,0.99368816614151,0.9903843402862548,0.0,accept,unanimous_agreement
1901672164,7978,"yes! i tottaly missed these ones. i focused on the ones we use on the effeects. i don ́t know how i haven ́t seen it, the modification will be a little bit tricker than i thought because i will need to inject this information depending on whether we are on the bar or on the effect. i will work on this.",1,0,1,0.4445445537567138,0.6712906956672668,0.6470175385475159,1.0,accept,majority_agreement
1901675745,7978,"i don ́t know. i always think it is better to be explicit. an int can be anything. we can put 2, 3, 10 or whatever. that way we create many valid inputs that in the end shouldn ́t exist. using the enum we make these options impossible to be represented.",0,0,0,0.9357621669769288,0.8354544043540955,0.9364526271820068,0.0,accept,unanimous_agreement
1901954289,7978,"""a simple enum""",0,0,0,0.9860879778862,0.9785791039466858,0.994927167892456,0.0,accept,unanimous_agreement
1901964266,7978,interesting. shouldn't the display stay at 0 until the value has reached 1 ?,0,0,0,0.9530868530273438,0.60834139585495,0.8256951570510864,0.0,accept,unanimous_agreement
1901970650,7978,here it's like i'd expect it.,0,0,0,0.9738115072250366,0.9864193797111512,0.9749994874000548,0.0,accept,unanimous_agreement
1901980140,7978,"we're at 120bpm, so a beat is 0.5 seconds, so in 1.9 seconds, there are 3 beats (a complete 3/4 bar, that's ok) and the remained is 0.4 seconds. one tick is a fourth of a beat, so 0.125 seconds. 0.4/0.125 = 3.2. so i think it's correct. but it's hard to figure out. maybe encoding `double beatdur = 60/tempo; double tickdur = beatdur / 4;` and then [code block] would be helpful for the reader ?",0,0,0,0.9490038752555848,0.9553332328796388,0.9682429432868958,0.0,accept,unanimous_agreement
1905002230,7978,here i have just kept the same tests as before once i was not focused on the numericformatter. i don ́t know exactly the reason for this but i do know this is very explicit on the code that we need to round it to the nearest integer. [code block],0,0,0,0.9739609956741332,0.9503592252731324,0.9852933287620544,0.0,accept,unanimous_agreement
1905025676,7978,yes! very good point. i have improved the readability for these tests. i hope it is better now.,1,1,1,0.9907193779945374,0.9955770969390868,0.995047688484192,1.0,accept,unanimous_agreement
1905032170,7978,"... and it indeed is that way in audacity 3, too: ![a link] is this correct ?",-1,0,0,0.9757282733917236,0.9847384691238404,0.7291931509971619,0.0,accept,majority_agreement
1905047992,7978,"i do find this rounding all the more confusing that, for musical durations, neither of bar, beat or tick is rounded: ![a link]",-1,-1,-1,0.9830567240715028,0.7974110841751099,0.9721945524215698,-1.0,accept,unanimous_agreement
1905049060,7978,... but if no one has noticed so far it's also probably that it's not dramatic. let's move on with this pr and create a follow-up ticket if there's a consensus that it should be changed.,0,0,0,0.7790949940681458,0.7626762986183167,0.8731961846351624,0.0,accept,unanimous_agreement
1905099052,7978,does it work? it has typo: `timecodemodeselectors -> timecodemodeselector`,0,0,0,0.9861479997634888,0.9923765063285828,0.9948925971984864,0.0,accept,unanimous_agreement
1905111163,7978,"i'd move those two: `reloadformatter(); updatevaluestring();` outside of this function - as its name suggests, it should only setmode and nothing else. i think it will be better to make a connection within the constructor to respond to that change, sth like: `connect(this, &timecodemodel::valuechanged, [](){ reloadformatter(); updatevaluestring();}`",0,0,0,0.9761887788772584,0.9898894429206848,0.9902662634849548,0.0,accept,unanimous_agreement
1905120031,7978,i think it's registered as `timecodemodeselector` not the `timecodemode` right? if it works anyway because of typedef or sth it would be nice to keep it consistent in all qml files,0,0,0,0.972601354122162,0.987393856048584,0.9894531965255736,0.0,accept,unanimous_agreement
1905153786,7978,thx. nice catch.,1,1,1,0.979290246963501,0.9952118396759032,0.990435779094696,1.0,accept,unanimous_agreement
1905154102,7978,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1905165250,7978,"i would say i agree to your point here. but if you take a look on the code, this pattern is used everywhere on this file. (settempo, setsamplerate, setuppersignature and so on). i have used this pattern to keep the consistency, once i think it is important as you correctly stated on the other comment. so imo there are two options: we refactor everything related to the setters on this file or keep it as it is. or maybe leave as it is and open other ticket to refactor it idk. what do you think ?",0,0,0,0.9470658302307128,0.810873806476593,0.76027512550354,0.0,accept,unanimous_agreement
1905170922,7978,"aaah, indeed it is, let's leave it as is then",0,0,0,0.8771665692329407,0.9108870029449464,0.9594773650169371,0.0,accept,unanimous_agreement
1905307279,7978,i totally agree with you. the behavior varies depending on the formatter used.,0,0,0,0.9445537328720092,0.7966635227203369,0.9102985858917236,0.0,accept,unanimous_agreement
728517739,1865,"putting new early return logic here and in editmenus means the association of ctrl+a, etc. with the actions is only default configuration and not hard coded. that is good. lit also means however that descriptions of what select all, cut, copy and paste menu commands do (and edit toolbar buttons, and macro commands) may need updating in the manual to explain the special cases of clip and label text editing. inconsistently, deletion is done with hard coded, un-configurable keys that do not overload what menu commands do. i do not suggest doing anything about that. just for now be aware. conversations with lately make me want to redesign the system of keystroke assignment to be contextual so that different command handler functions could map to the same key in different focusing contexts. needs much thought and work.",1,0,0,0.7219412326812744,0.7212738990783691,0.921084761619568,0.0,accept,majority_agreement
728529657,1865,"i would like to see a null pointer check before dereference even if there is enough redundant protection in the enabling condition for this command, preventing call of this function when there are no tracks.",0,0,0,0.9871476292610168,0.9858182072639464,0.9873918890953064,0.0,accept,unanimous_agreement
728537686,1865,whose responsibility is it to push or modify the undo state? caller or called? it should be commented. was pushing of undo stack preserved in all the paths of editmenus? it is not obvious to me yet.,0,0,0,0.9743436574935912,0.9580305814743042,0.989424169063568,0.0,accept,unanimous_agreement
728540077,1865,is the capacity to make a new label by pasting text lost or preserved elsewhere?,0,0,0,0.9847497940063475,0.9917923212051392,0.9877628087997437,0.0,accept,unanimous_agreement
728540634,1865,"oh, i see",0,0,0,0.9510844945907592,0.9401328563690186,0.9744234681129456,0.0,accept,unanimous_agreement
728541353,1865,similar question about refresh of the trackpanel.,0,0,0,0.9824606776237488,0.9891314506530762,0.9886201620101928,0.0,accept,unanimous_agreement
728543509,1865,"how cells and uihandles generally work is that they are responsible for undo operations but just return coded to direct the caller whether to refresh display. best that these new functions be consistent with that. maybe this contract isn’t clearly commented either for cells and handles, so you are welcome to improve comments in those abstract base classes too.",0,1,0,0.954794943332672,0.5787766575813293,0.9921625256538392,0.0,accept,majority_agreement
728547628,1865,"i think a problem here is that only left channels or mono tracks are ever “focused” by trackpanelax but you may need to redirect to a right channel’s affordance area in unusual cases. please write some ugly little fix, but my sense technical debt around the problem of better representing a tree of focusables is growing still more. maybe trackpanelnode (not cell) needs the notion of “focusable “ and your new virtual functions really need to be declared there. maybe trackpanelax needs to work in terms of those nodes, not the underlying tracks.",-1,-1,-1,0.8014342188835144,0.7866798639297485,0.7979742884635925,-1.0,accept,unanimous_agreement
728550556,1865,is this test here just so that ctrl+whatever is dispatched to the command manager? but that assumes the editing keys are not customized to other unusual keystrokes. maybe nobody does that. still not the happiest solution.,-1,-1,0,0.739005982875824,0.8039567470550537,0.5778268575668335,-1.0,accept,majority_agreement
728820663,1865,"i'd like to see `focusable` or introduce the focus concept into some of the basic track panel classes, this solution is rather a bit more generalized version of how text edit shortcuts work in labeltrackview. another option here is to track only the current textedithelper",0,0,0,0.9686784148216248,0.9840789437294006,0.9892424941062928,0.0,accept,unanimous_agreement
731855410,1865,"it should be possible to assign alt+whatever for these commands (checked that, though i moved this check to textedithelper instead)",0,0,0,0.9887443780899048,0.9940707087516784,0.9947472214698792,0.0,accept,unanimous_agreement
731992664,1865,but what about assignments of shift+... ?,0,0,0,0.9799100160598756,0.986262023448944,0.9893682599067688,0.0,accept,unanimous_agreement
732110729,1865,"shift + ... during text typing is usually supposed to toggle to upper/lower case, isn't it? but ctrl + shift + ... should work too",0,0,0,0.965833067893982,0.9852863550186156,0.9936031699180604,0.0,accept,unanimous_agreement
732117636,1865,"though, additionally, we can check that the second keycode is a character",0,0,0,0.988637626171112,0.9922731518745422,0.9942753911018372,0.0,accept,unanimous_agreement
732374401,1865,please explain the reason for this changed line.,0,0,0,0.9755963683128356,0.972730040550232,0.9899545907974244,0.0,accept,unanimous_agreement
732569619,1865,"sorry, i overlooked this during rebase, thanks!",-1,-1,-1,0.9782502055168152,0.9926726222038268,0.9921133518218994,-1.0,accept,unanimous_agreement
733135863,1865,you might call capturekey and eliminate duplication.,0,0,0,0.9879481196403505,0.9884363412857056,0.993110418319702,0.0,accept,unanimous_agreement
733137965,1865,comments explaining that these do not always push the undo stack.,0,0,0,0.9665222764015198,0.9722812175750732,0.9917002320289612,0.0,accept,unanimous_agreement
733139198,1865,update this comment,0,0,0,0.986348271369934,0.9842175245285034,0.9811255931854248,0.0,accept,unanimous_agreement
1095699926,3996,"it's not obvious locally in the code here, but i understand a consequence of this is that changes of factory preset will ""dirty"" the project so you are prompted to save it when you close. am i right? is there another reason for this?",-1,0,0,0.6731723546981812,0.9527015089988708,0.9829818606376648,0.0,accept,majority_agreement
1095704823,3996,"i understand the second of the six commits, except for this unexplained change. what does it accomplish?",0,0,0,0.9587185382843018,0.6796821355819702,0.986642599105835,0.0,accept,unanimous_agreement
1095712086,3996,"""initializecomponents""",0,0,0,0.9890488386154176,0.9899849891662598,0.9948408007621764,0.0,accept,unanimous_agreement
1095729471,3996,"is `internal` the right type for this and the other new exception, not `badenvironment`? if this failure occurs, do we want sentry data about it or not? `fileexception` does use `internal` but see the comment in its constructor explaining that as an unusual decision.",0,0,0,0.9727658033370972,0.9879876375198364,0.9896537661552428,0.0,accept,unanimous_agreement
1095745864,3996,"you assume here that `getcache` never returns null. if that is a correct and reliable assumption, make that clear with types: return a reference instead of apointer. if not, test for null.",0,0,0,0.9882766604423524,0.9919196367263794,0.9937790036201476,0.0,accept,unanimous_agreement
1095754559,3996,"in fact `getcache` is not now guaranteeing a non-null return, so please null check this.",0,0,0,0.9789695739746094,0.9832931756973268,0.9943259358406068,0.0,accept,unanimous_agreement
1095760719,3996,"why not simply combine the two functions ? just let `getcache` return a reference to `svst3plugincache[key]` and that will create and default-initialize a member that isn't there already. then the assertion isn't needed, and you know i don't like assertions without comments: when i review an assertion,. i'm not satisfied until i also review all uses of the function. less burden of review without it.",-1,0,0,0.841634213924408,0.6483942866325378,0.9086795449256896,0.0,accept,majority_agreement
1095762122,3996,"to make my last suggestion work, defaulted `vst3plugincache` must be distinguishable from one that was initialized as in the following code, so you can write another test here.",0,0,0,0.9889484643936156,0.9927130341529846,0.9945005178451538,0.0,accept,unanimous_agreement
1095766265,3996,"... and i think this assignment would make that distinguishability, if it is always reached, but it isn't.",0,0,0,0.9662134051322936,0.9654850363731384,0.974790334701538,0.0,accept,unanimous_agreement
1095770933,3996,"this is a change of a user facing string that i suppose you must tell design about, if there is any important opinion about string consistency.",0,0,0,0.9852736592292786,0.9760271906852722,0.9870337247848512,0.0,accept,unanimous_agreement
1095821773,3996,"it is correct, though formally there could be other types of parameter that aren't automatable or hidden. for such parameters it is correct to ""dirty"" the project too i think.",0,0,0,0.9592097997665404,0.9920929074287416,0.9826669096946716,0.0,accept,unanimous_agreement
1095827974,3996,"some vst3 plugins can offer better processig quality in `koffline` mode. i think it used to be `koffline` some time before refactoring, but i've made a typo",0,0,0,0.9726637005805968,0.9776982665061952,0.9870807528495787,0.0,accept,unanimous_agreement
1095854102,3996,"not sure how to answer the first question, but i don't think that it's a good idea to send preset loading failures to sentry. `loadpresetfromstream(filestream)` load preset file from disc, and user may attempt to load preset that was genrated by older version of same plugin, or even by another plugin.",0,0,0,0.9425448775291444,0.8908562660217285,0.7988802194595337,0.0,accept,unanimous_agreement
1095878003,3996,"that would be mere formal check. cache for the effect id is created in the constructor and never erased. changing return type to reference would require ""fallback"" cache variable to be introduced, whichs purpose is to replace `nullptr`. what should be done if cache can't be found? throw an exception? i think it's overcomplication, considering that this is an implementation detail.",0,0,0,0.977444350719452,0.9815762042999268,0.5433438420295715,0.0,accept,unanimous_agreement
1095891639,3996,"the answer is in vst3wrapper constructor - cache initialization process. if `getcache` and `createcahce` were combined i had to add an initialization state. reference type might have convinced you that return value isn't nullptr (though that can be violated too), and the code is formally correct, but you must make sure that the state of returned object is correct too. i don't think that it worth changing.",0,0,0,0.907158374786377,0.9830440878868104,0.9900744557380676,0.0,accept,unanimous_agreement
1095895869,3996,"yes, and all other places should check that too. not obvious what should happen if `getcache` returns not initialized object",0,0,0,0.985294222831726,0.9448691606521606,0.9938902854919434,0.0,accept,unanimous_agreement
1095898067,3996,"right, thanks!",1,1,1,0.9345529675483704,0.9875818490982056,0.9598597884178162,1.0,accept,unanimous_agreement
1095905633,3996,"yes, the meaning for `knoprogramlistid` is that plugin does not have program list parameter, which is fine.",0,0,0,0.9859344363212584,0.993350088596344,0.9896775484085084,0.0,accept,unanimous_agreement
1096113497,3996,"so then, will you revert that change or comment that you are keeping it?",0,0,0,0.9766680598258972,0.992194652557373,0.9881592988967896,0.0,accept,unanimous_agreement
1096121564,3996,"if there should not reporting for this error, then internal is the wrong choice. see this other example: [code block] if sqlite fails but tells the program it's exhaustion of device space, then we don't need to collect a report. only if sqlite fails for some other various reason do we want a report.",0,0,0,0.9411276578903198,0.9422311782836914,0.9804477691650392,0.0,accept,unanimous_agreement
1097269665,3996,"no, i think `koffline` fits better for destructive processing. `realtimeinitialize` uses `krealtime` mode.",0,0,0,0.9863048791885376,0.9916327595710754,0.9879119992256165,0.0,accept,unanimous_agreement
1097270323,3996,reverted that line,0,0,0,0.956533133983612,0.9797948598861694,0.9856148958206176,0.0,accept,unanimous_agreement
1335981842,5239,thanks for catching this!,1,1,1,0.9586896300315856,0.8838008642196655,0.9322888255119324,1.0,accept,unanimous_agreement
1336792018,5239,i think this is the reason for the problem i found. it should be something like `interval.begin() + (interval.end()-interval.begin())*moldspeed/mspeed;`,0,0,0,0.9766175746917723,0.981303334236145,0.9856735467910768,0.0,accept,unanimous_agreement
1336794046,5239,"yes, you are totally right",1,1,0,0.6475517749786377,0.6528297662734985,0.8376495838165283,1.0,accept,majority_agreement
1336816927,5239,"`applystretchratio` has so far meant rendering time-stretching. it took me some time to realize, though, that this is not this method's intent. please consider something else, something like `dochangeclipspeed` ?",0,0,0,0.9729888439178468,0.9800201654434204,0.9865336418151855,0.0,accept,unanimous_agreement
1336826104,5239,reusing the `progressreporter` alias would be better for consistency.,0,0,0,0.9866138100624084,0.991530179977417,0.9906021356582642,0.0,accept,unanimous_agreement
1336831495,5239,"i haven't used it ... for consistency sake :-) i was just copying the waveclip interface, where applystretchratio is defined as [code block]",1,1,1,0.9906355738639832,0.9923203587532043,0.984772264957428,1.0,accept,unanimous_agreement
1336837198,5239,thank you :grimacing_face:,-1,1,-1,0.977308452129364,0.9863542914390564,0.9941014647483826,-1.0,accept,majority_agreement
1336846988,5239,"oh really :grinning_face_with_sweat: well, do as you please, maybe i'll fix it up in some future pr.",1,0,1,0.7493335604667664,0.8344122171401978,0.9374125003814696,1.0,accept,majority_agreement
926729534,3271,i do not see why this moved member ever needed to be static. make it non-static and initialize it with `{}`,0,0,0,0.9714770317077636,0.9757835268974304,0.9856107234954834,0.0,accept,unanimous_agreement
926730470,3271,modernize with `static_cast` and `nullptr`,0,0,0,0.9875495433807372,0.9939957857131958,0.994762361049652,0.0,accept,unanimous_agreement
926740583,3271,second commit needs to change `realpath` also in the mac-only lines below,0,0,0,0.9892677664756776,0.9940323233604432,0.9946660995483398,0.0,accept,unanimous_agreement
926742963,3271,mac build also requires `mpluginmain` in lines above,0,0,0,0.9891756176948548,0.9942469596862792,0.9952463507652284,0.0,accept,unanimous_agreement
926745379,3271,linux compilation will also need a fix in the second commit.,0,0,0,0.986819624900818,0.988271415233612,0.9893621802330016,0.0,accept,unanimous_agreement
926751540,3271,"""because""",0,0,0,0.9159451127052308,0.9601486921310424,0.9666597843170166,0.0,accept,unanimous_agreement
926752686,3271,"this is just a ""c"" pointer to function -- so initialize it to null",0,0,0,0.9880449175834656,0.99266254901886,0.994519054889679,0.0,accept,unanimous_agreement
926755795,3271,you can modernize more casts and nulls,0,0,0,0.9877156615257264,0.9883551597595216,0.9932454228401184,0.0,accept,unanimous_agreement
926775732,3271,"redefine the old calldispatcher in terms of the new, passing maeffect. avoid duplication.",0,0,0,0.9794670343399048,0.9873305559158324,0.992697775363922,0.0,accept,unanimous_agreement
926777358,3271,"if this function is redefined as `static`, which i recommend, then `mdispatcherlock` must become an argument, passed by reference. and you can also modernize by using `std::mutex` instead of the wx synchronization classes.",0,0,0,0.9888700246810912,0.9949719905853271,0.9951318502426147,0.0,accept,unanimous_agreement
926795790,3271,"here's a better idea for splitting load, phase 2. define a small structure holding maeffect and the mutex. make `calldispatcher` a member function of it that locks the mutex. make its destructor call the dispatcher with `effclose`, replacing the two places where you do that explicitly. you can also change the existing `maeffect` member to be of this structure type, and define an `operator ->`, which will let you avoid changing many lines of code.",0,0,0,0.9848108291625975,0.9868380427360536,0.986329972743988,0.0,accept,unanimous_agreement
926800886,3271,"`getstringfromhandle` can become a static, nonmember function if `handle` is of the new structure type.",0,0,0,0.9880950450897216,0.9936667084693908,0.9930303692817688,0.0,accept,unanimous_agreement
926828350,3271,"here's another idea. change the return type of `loadcommon` to be the new structure. give it an `explicit operator bool()` returning false when it contains a null pointer, and return `{}` for failure. define move construction and assignment for the new type, to transfer the pointer to the left hand side and leave it null on the right. do all of this -- and the loading of the plug-in can avoid destroying one aeffect only to build another one at once.",0,0,0,0.9836243391036988,0.9898675680160522,0.9908815622329712,0.0,accept,unanimous_agreement
926838617,3271,"the new structure should record whether `effopen` was done, and do `effclose` in the destructor only if so.",0,0,0,0.9889683723449708,0.9933391213417052,0.9941694736480712,0.0,accept,unanimous_agreement
926842900,3271,this was an error path that did not balance `effopen` and `effclose`. see how the smart pointer structure would make this easy to ensure.,0,0,0,0.985091507434845,0.957301914691925,0.989778220653534,0.0,accept,unanimous_agreement
926854893,3271,"this may improve error checking, causing the function to return false of load failes for some other reason after constructing `maeffect` -- though i see no such reasons now. i reviewed where else this function is called and i see `vsteffectsmodule::loadplugin` does not check the status. so change that function to check and return null for failure.",0,0,0,0.9752272367477416,0.988296926021576,0.9934826493263244,0.0,accept,unanimous_agreement
926860173,3271,"so, construction of a `vsteffect` may leave it in an unusable state if load fails. where should that failure be checked? where `make_unique ` happens, and one place is `loadplugin`, just mentioned, the other in `vsteffect::realtimeaddprocessor`. i don't yet see if you add a check there and return false, but i'm still marching through this commit sequence.",0,0,0,0.9300399422645568,0.9774264693260192,0.990111529827118,0.0,accept,unanimous_agreement
926876501,3271,"when `loadcommon` is lifted out of `load`, then you might `move` its return value into a new argument of `load` to transfer ownership of the handle.",0,0,0,0.9890310168266296,0.9940021634101868,0.99340158700943,0.0,accept,unanimous_agreement
926884383,3271,"now i see that `load` is not always preceded by `loadcommon` in the later commits. but that can't possibly work, can it? `load` assumes `mpluginmain` to be inititalized to non-null, but `loadcommon` is where that happens.",0,0,0,0.9833745956420898,0.9935702085494996,0.9891561269760132,0.0,accept,unanimous_agreement
926919372,3271,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
926928620,3271,"tried making it non-static, but then it needs to be so, because it is referenced by ::audiomaster which is a static method. tried to make audiomaster non-static, but it looks like the vst api entry point really wants it to be static. at least i now initialized the static with {} as you said, though.",0,0,0,0.9839927554130554,0.9877614974975586,0.9841593503952026,0.0,accept,unanimous_agreement
927037421,3271,"right, done",0,0,0,0.9631369709968568,0.9163886308670044,0.9782338738441468,0.0,accept,unanimous_agreement
927038127,3271,"right, done",0,0,0,0.9631369709968568,0.9163886308670044,0.9782338738441468,0.0,accept,unanimous_agreement
927039007,3271,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
927039180,3271,oops - done,0,0,-1,0.9413981437683104,0.7784523963928223,0.7322718501091003,0.0,accept,majority_agreement
927040830,3271,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
927043860,3271,can’t you also rewrite the case in audiomaster to use `vst->mcurrenteffectid`?,0,0,0,0.989446461200714,0.9949457049369812,0.9942014813423156,0.0,accept,unanimous_agreement
927390616,3271,"that's right, then it is possible - done.",0,0,0,0.9816795587539672,0.9291638135910034,0.9782755374908448,0.0,accept,unanimous_agreement
927439969,3271,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
690250252,1482,i would really prefer an explicit check here (and in general as well). i.e. `pwindows2 != nullptr`. the condition here takes multiple lines separated by comments so it reads like returning `pwindow2` instead of boolean. `auto` in function signature doesn't help too.,0,0,0,0.9564341902732848,0.9934350252151488,0.95926833152771,0.0,accept,unanimous_agreement
690254515,1482,"please, let's not oversuse comma. while it's behavior is better defined now, i don't feel like it should be used, it doesn't really improve readability. [code block]",0,0,-1,0.7656994462013245,0.9123536348342896,0.9290372133255004,0.0,accept,majority_agreement
690256113,1482,"it really feels like this namespace is related to windows os, not to application windows.",0,0,0,0.8592898845672607,0.9567989110946656,0.9737210869789124,0.0,accept,unanimous_agreement
690257199,1482,comma again; why not [code block] ?,0,0,0,0.9824718832969666,0.986353635787964,0.989066481590271,0.0,accept,unanimous_agreement
690258183,1482,`const wxwindow*`?,0,0,0,0.9800623059272766,0.9932436347007751,0.9949390888214112,0.0,accept,unanimous_agreement
690259154,1482,`const wxwindow&` or even `const wxwindow*`?,0,0,0,0.9831763505935668,0.9937021732330322,0.9926366806030272,0.0,accept,unanimous_agreement
690259495,1482,`const wxwindow*`?,0,0,0,0.9800623059272766,0.9932436347007751,0.9949390888214112,0.0,accept,unanimous_agreement
690261060,1482,`const wxwindow*`?,0,0,0,0.9800623059272766,0.9932436347007751,0.9949390888214112,0.0,accept,unanimous_agreement
690262933,1482,i have very strong opinion that `static_cast` can't possibly be used within the template function. you leave both compiler and runtime helpless here. it is really no difference between c-cast and `static_cast` in this case. `dynamic_cast` is fast enough and this code is not performance-critical anyway.,0,0,0,0.694468080997467,0.5474052429199219,0.931010127067566,0.0,accept,unanimous_agreement
690277014,1482,is that possible that for some reason these checks fail? what would be the consequence for the user?,0,0,0,0.9197714328765868,0.9792377948760986,0.985161304473877,0.0,accept,unanimous_agreement
690292776,1482,"i prefer the brevity of relying on the bool conversion. i can write trailing && on this line, not the next. i don't have strong feelings. putting it on the next is one of the silly rules of the musescore coding standard, and i don't know who i was trying to please with it. but we don't use those rules. auto in the function signature does help. it allows a function to return a lambda. i can't do it otherwise. the alternative is changing return type to a std::function, with its overheads, and maybe defeating the inlining of std::find_if. so i agree with only 1 out of 3 things.",-1,-1,0,0.8867229223251343,0.77266925573349,0.6611925363540649,-1.0,accept,majority_agreement
690293752,1482,disagree,0,0,0,0.8876661062240601,0.9700709581375122,0.8026720285415649,0.0,accept,unanimous_agreement
690294491,1482,"by using comma, i make it clear that these expressions really do deduce the same type.",0,0,0,0.9852324724197388,0.9818654656410216,0.9935048818588256,0.0,accept,unanimous_agreement
690295069,1482,"well... controls? as in dialog controls, which are each a wxwindow object.",0,0,0,0.9865119457244872,0.9880544543266296,0.987356185913086,0.0,accept,unanimous_agreement
690295859,1482,see above for why i prefer it. just one auto instead of two autos makes it more legible to me. it expresses sameness of types.,0,0,0,0.9475747346878052,0.9600769281387328,0.8712393045425415,0.0,accept,unanimous_agreement
690298009,1482,"won't work for the retur value. would require findbypath to return const wxwindow*, and then see in the event deserializers how the windows must be changed. however, if you meant the predicate signature only -- ok",0,0,0,0.9857535362243652,0.987911581993103,0.9923480749130248,0.0,accept,unanimous_agreement
690341759,1482,ok to const but -- no to pointer argument. i use reference types to communicate that nullptr is not allowed.,0,0,0,0.981483280658722,0.9703346490859984,0.9907698035240172,0.0,accept,unanimous_agreement
690342133,1482,no! `const wxwindow &` yes.,0,0,0,0.6843255162239075,0.959657907485962,0.942633330821991,0.0,accept,unanimous_agreement
690342341,1482,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
690347752,1482,"if the checks fail, then dispatchevent will return false. that causes journal::dispatch() to throw syncexception. that exception's delayed handler action makes the program quit. that causes journal::getexitcode() to return a non-zero status on the command line. all of that is intended behavior, for the user who is the qa engineer. all of this means an interaction sequence recorded before, fails to rerun now, because the sequence of events fails on rerun -- the windows that should be the handlers of events don't exist in the rerun. tests need some way to fail when they should fail and report that .",0,0,0,0.9648333191871644,0.8590844869613647,0.976840615272522,0.0,accept,unanimous_agreement
690462988,1482,`static_cast` is not as bad c style pointer casts because it will not cast away const and will not allow conversion from base to derived when the inheritance relation is private or protected and is is not in the right scope for accessibility.,0,0,0,0.9485416412353516,0.9351720213890076,0.948722779750824,0.0,accept,unanimous_agreement
690486701,1482,"if you tell me `static_cast` is absolutely never justified for pointer downcasting, i strongly disagree with that. it is used in ""type erasure"" techniques such as you may soon review too for lib-xml. i will refuse to ""correct"" the `static_cast`s in that pr unnecessarily. wxwidgets event system is built around type erasure and is set up to invoke event handler functions without runtime checks. see, for instance, this line of audacity: [code block] explore how the macro is implemented, if you dare, especially what `wxcommandeventhandler` means inside it. set a breakpoint in the function, arrange to hit it, and see the call stack. this unchecked downcasting is pervasive in the handling of wxwidgets events and never a source of crashes in my experience. wx/event.h even uses that same term, ""type erasure:"" [code block]",-1,-1,-1,0.8953576683998108,0.5642038583755493,0.8311817049980164,-1.0,accept,unanimous_agreement
690503221,1482,"predicate, yes",0,0,0,0.9798067808151244,0.9796038269996644,0.9869630932807922,0.0,accept,unanimous_agreement
690591893,1482,"looks like an attempt to bypass compile time restrictions to me, with runtime overhead :)",1,1,0,0.7996665835380554,0.8920513391494751,0.882046103477478,1.0,accept,majority_agreement
690594958,1482,"yes, if more details on failure will be ever needed that may be corrected in the future",0,0,0,0.9830027222633362,0.9884519577026368,0.9807706475257874,0.0,accept,unanimous_agreement
691203453,1482,i tried to make the program return the line number of the journal file where failure occurred. however at least on macos it is truncated to an 8 bit value.,0,0,0,0.986323893070221,0.9910303354263306,0.9794096946716307,0.0,accept,unanimous_agreement
691211006,1482,"the simplistic opinion that ""static_cast to downcast pointers is never right,"" is wrong. i now know that is not dmitry's opinion after the approving review of the lib-xml extraction. it can be right when the code you need to examine to prove the correctness of the static_cast is not open ended. but that isn't quite true with the wxwidgets events. i think you can get undefined behavior from what should be properly written event handlers, but you have to work hard to do it. like construct your own wxevent objects of the wrong class, and use seteventtype() on them, and then give them directly to a window to be processed. it's possible but not usual. it's deliberate ""fraud"" and not ""accident."" seteventtype() isn't supposed to be used. events constructed by the libraries have the integer wxeventtype consistent with the expected subtype of the wxevent object.",-1,0,0,0.6749897003173828,0.5997795462608337,0.7379039525985718,0.0,accept,majority_agreement
691249849,1482,"i like your style of debating :) i was not saying that it's right or wrong, i noted that you build an extra object at runtime to do something that looks like an attempt to persuade a compiler that it's safe to cast",1,1,1,0.9924658536911012,0.9935793876647948,0.9961174726486206,1.0,accept,unanimous_agreement
