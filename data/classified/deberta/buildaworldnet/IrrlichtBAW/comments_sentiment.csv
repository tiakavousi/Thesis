id,pr_number,user,created_at,body,deberta_sentiment_label,deberta_confidence
524583954,358,devshgraphicsprogramming,2019-08-24T22:01:40Z,"ok i see that retrofitting this shit to work with `smaterial` and `icpumaterial/igpumaterial` is rather cumbersome. maybe after you get back it would make more sense to implement these 50% [a link] [a link] this means an `irenderpassindependentpipeline<>` and `icomputepipeline<>` without any `ipipelinelayout<>` objects implemented yet (that's just to much). in place of `ipipelinelayout<>` you can use the current `smateriallayer<>` `idriverpipelinecache` is a cache for helping to speed up the creation of new *compute* pipelines (separate from the runtime per-thread caching on opengl), there's an actual vulkan api object for that, but with opengl we could put that to some use, like storing introspection or compiled spir-v for parsed glsl + extension list. for now it can be an empty useless object. then at-least we: - disable/enable blend per fbo attachment - finally support all blending modes and factors on any fbo attachment separately - separate color mask per attachment - support all the render/raster states that vulkan advertises (lots of multisampling state) - finally support stencil operations properly (can rewrite oitzoo without bare opengl) - support the gl_patch primitive type without fucking guessing from whether we're using a tessellation shader this changes our asset hierarchy a bit, in the follwing way. ~ i<>meshbuffer -> i<>meshdataformat -> i<>buffer ~ i<>meshbuffer -> i<>renderpassindependentpipeline & i<>buffer -> i<>specializedshader & i<>pipelinelayout/smateriallayer so i<>meshbuffer takes over the i<>buffer vertex input bindings (so now vertex and index are stored in the same place) while i<>renderpassindependentpipeline replaces the remaining functionality of i<>meshdataformatdesc. i<>renderpassindependentpipeline also replaces everything except for `smaterial::texturelayer[]` which is now moved outside as a member of `i<>meshbuffer` instead. p.s. adding support for compute shaders might be super easy now, just an `ivideodriver::setcomputepipeline` + `ivideodriver::dispatchcompute{indirect}()` p.p.s. in vulkan compute and graphics pipelines can be set separately, we'll try to emulate the same with opengl.",-1,0.9494302272796631
528044524,358,devshgraphicsprogramming,2019-09-04T19:16:00Z,anything fucked up after the merge?,0,0.884541928768158
528065780,358,Crisspl,2019-09-04T20:12:42Z,"nah, not yet at least",0,0.975762665271759
530796801,358,devshgraphicsprogramming,2019-09-12T12:11:27Z,where's the compute pipeline?,0,0.9950351715087891
530864384,358,Crisspl,2019-09-12T14:55:19Z,in next (last currently) commit,0,0.9930203557014465
533020039,358,devshgraphicsprogramming,2019-09-19T08:12:36Z,"you need a `ipipelinelayout::iscompatiblewith(const ipipelinelayout*)` its needed for a lot of things, such as deciding if descriptor sets need to be unbound or push-constants are nullified (in `irr_debug` we can push an all 0s range on the new pipeline when this happens, and do nothing on release builds).",0,0.9934337139129639
533065065,358,devshgraphicsprogramming,2019-09-19T10:14:54Z,you may want to read (but not apply fully) the ideas in #25 and #59,0,0.9895437955856323
533500701,358,devshgraphicsprogramming,2019-09-20T10:31:43Z,check if this is true in the vulkan spec,0,0.9935006499290466
533518816,358,Crisspl,2019-09-20T11:41:06Z,"yes, compatibility for descriptor sets requires also compatibility for push constants. and compatibility for push constants requires exactly the same push constant ranges",0,0.9938898086547852
534290449,358,Crisspl,2019-09-23T21:22:11Z,observation: lack of assumption that `vertex buf binding` = `attrib number aka location` makes hash for vaos more complex and less probable that fitting vao will be found in cache (+ more vao objects needed to be created).,0,0.9914552569389343
534320242,358,devshgraphicsprogramming,2019-09-23T23:12:13Z,"how big is the hash with the above ? p.s. the `e_format` enum has less than 256 values (actually 197), so could use `ef_unknown` as a value for a disabled vertex input location. binding is 4 bits, and relative offset 11bits (max value is 2047). so this gives you 15 bits per location, and we have 16 locations... so 46 bytes for location hash. then you only hash the input rate and stride per binding, input rate is 1 bit and stride is 11 bits just like relative offset. so 32 bytes here. total is a 78 byte hash.",0,0.9850737452507019
534931687,358,devshgraphicsprogramming,2019-09-25T09:16:47Z,extras to resolve: [a link],0,0.9959670305252075
535013843,358,Crisspl,2019-09-25T13:08:35Z,"what about `glcreatesamplers`? for some reason until now we were using `glgensamplers` and somehow it was working, not why. i'm going to add copenglextensionhandler but i see there's this line [code block] seems kinda mysterious.",0,0.9189522862434387
535063575,358,devshgraphicsprogramming,2019-09-25T14:57:17Z,"if you don't have ext nor arb dsa, then use gen samplers, if you have dsa then create. you can make an [code block] that wraps around the dsa thing and emulates it (like the other create/gen wrappers)",0,0.9935619831085205
535249973,358,Crisspl,2019-09-25T22:33:29Z,we have to know what (thing/type/...) should go to `driver::draw*indirect()` in `vao` parameter. as for now it was `imeshdataformatdesc *` but obviously it cant be like this anymore,0,0.9912627935409546
535250554,358,Crisspl,2019-09-25T22:35:50Z,also: look at a few of my last commits and look for comments with `todo`. i have some questions regarding driver's member `resetrenderstates`,0,0.9940935969352722
535254095,358,devshgraphicsprogramming,2019-09-25T22:49:45Z,"ok the drawcall cannt set the vao/pipeline implicitly inside the draw anymore, we need a `bindpipeline` and `binddescriptorsets` and `pushconstants` just like we used to have `setmaterial` that is separate from `draw`",0,0.9919705390930176
535254191,358,devshgraphicsprogramming,2019-09-25T22:50:08Z,could you list them with links?,0,0.9944049119949341
535254856,358,Crisspl,2019-09-25T22:52:49Z,so meshbuffer shouldnt hold graphics pipeline object?,0,0.9924200177192688
535257016,358,devshgraphicsprogramming,2019-09-25T23:02:13Z,"yes it should, you can use it inside the draw the validate the same one has been bound as required",0,0.9938449859619141
535258084,358,Crisspl,2019-09-25T23:06:49Z,o_o oh ok,1,0.9581301808357239
535265523,358,devshgraphicsprogramming,2019-09-25T23:34:44Z,"does our raster parameter struct have a ""rasterizerdiscard` boolean?",0,0.994236171245575
535265945,358,Crisspl,2019-09-25T23:36:41Z,yes,0,0.9686408638954163
539904153,358,devshgraphicsprogramming,2019-10-09T08:48:34Z,"there's a bunch of files in [a link] that have last been modified over a year ago, they're probably as good as dead now (i.e. `copengl*renderer`)",0,0.9825674891471863
539904451,358,devshgraphicsprogramming,2019-10-09T08:49:22Z,also the following function in `ivideodriver` will give you a headache (abstract non defined) `virtual void removealltexturebufferobjects() =0;` you can kill it,0,0.9333859086036682
541240709,358,Crisspl,2019-10-11T22:09:19Z,"to make dynamic offsets work without copying of arrays, i'd have to modify precomputed (in `copengldescriptorset`) multibind params in-place. (this obviously requires `copengldescriptorset::getmultibindparams()` to return params struct as non-const ref; this implies that gl state tracker structs have to hold descriptor sets as non-const [smart] ptrs; this implies that `driver::binddescriptorsets()` has to take descriptor sets as non-const ptrs as well) ofc after modification and running multibind calls i'd have to bring params to previous values. but real implications are that concurrent access to precomputed multibind params in copengldescriptorset is out of question. so.. either that or we have to copy arrays of offsets in order to apply dynamic offsets. i personally think that copying is much better here (copying has to happen only if descriptor set was bound with any dynamic offsets, only offsets arrays are copied, and ofc it concerns ubos and ssbos only)",0,0.9928921461105347
541251155,358,devshgraphicsprogramming,2019-10-11T23:02:20Z,"this small amount of copying makes sense, but only in copengldriver and on-stack (91+96 values on stack, current opengl maximums for ssbo and ubo counts).",0,0.9912717938423157
542382331,358,Crisspl,2019-10-15T20:06:50Z,done everything except: * ~[a link] (iterator pair...)~ * ~`clearscreen()` gl state changes (related: [a link] and [a link] * ~get rid of tex targets and img formats in `copengldescset` multibind params struct~ * ~[a link] * [a link],0,0.9891316890716553
543890323,358,Crisspl,2019-10-18T19:02:46Z,to me it's merge-ready except [a link],0,0.9939728379249573
543965676,358,devshgraphicsprogramming,2019-10-18T21:46:50Z,we need to put `ibuffer` back into `irr::core`,0,0.993384063243866
543995049,358,Crisspl,2019-10-18T23:00:38Z,"there are 2 ibuffers now: asset::ibuffer and core::ibuffer decided here [a link] where asset::ibuffer is answer for ""icpu and igpu buffer need a common base on top of core::ibuffer""",0,0.995347797870636
544115221,358,devshgraphicsprogramming,2019-10-19T08:27:11Z,"ok resolved. - your input attachment query is not querying all the extensions - pipeline caching mess - compute pipelines - pasting of enabled glsl extensions to find the conversations scross up and press ""load more` until all items are not hidden anymore",0,0.9459539651870728
544287022,358,Crisspl,2019-10-20T20:02:58Z,it's ready,0,0.8562366962432861
544314179,358,Crisspl,2019-10-21T01:16:13Z,"maybe try closing this pr and opening another one so that comments in this one are preserved. (if you're right about that retargeting will cause all the comments to disappear). idk how to dump comments to some usable form (not screenshot; i mean theres chrome extension to ""screenshot"" whole page whatever long wouldnt it be but it wont let us ctrl+f later)",0,0.9796748757362366
544472541,358,devshgraphicsprogramming,2019-10-21T11:29:22Z,there are two very old unresolved things: 1. using ifdef instead of commenting out old code so that i can find it later 2. documentation update obviously need to clear the latest comments and we can merge. but then we immediately open another pr for compute pipelines and making this branch finally build.,0,0.9622251987457275
544869655,358,devshgraphicsprogramming,2019-10-22T09:02:51Z,merge and correct [a link] then i will hit the merge button.,0,0.9946710467338562
605350452,424,devshgraphicsprogramming,2020-03-27T23:06:53Z,review done on 28/03/2020,0,0.9910278916358948
641075904,424,devshgraphicsprogramming,2020-06-09T07:00:40Z,remember to merge my pr into your branch,0,0.9947380423545837
701469027,424,Crisspl,2020-09-30T15:34:37Z,i think it can be considered as mergable. fixed thin dielectric and a few more annoying bugs (see commits for a list),0,0.8326188325881958
703170560,424,devshgraphicsprogramming,2020-10-03T22:07:40Z,did you end up fixing the `twosided` thing for bsdfs?,0,0.9913698434829712
710719024,424,Crisspl,2020-10-17T01:18:56Z,yea,0,0.9237021803855896
714357998,424,devshgraphicsprogramming,2020-10-22T09:22:04Z,"also one last thing, mitsuba creates approximate bsdfs for loaded objs... it seems we don't, so it should be an error to not specify a bsdf element on a obj shape",0,0.9887224435806274
718120556,424,Crisspl,2020-10-28T18:19:11Z,"it is an error (`assert()`) for each non-`shapegroup`, non-`instance` shape to not specify a bsdf",0,0.9933438301086426
731355102,424,devshgraphicsprogramming,2020-11-20T19:06:31Z,5 unresolved conversations until merge,0,0.9633011817932129
569841467,410,devshgraphicsprogramming,2019-12-31T01:08:08Z,"ok, so this is what i want to happen now. the mtl loader should always return the same few combos of vertex and fragment shaders. a new shader is only warranted if it requires a different set of `layout(...) in` or `layout(...) out`, so basically if some different combination of vertex attributes is enabled or different combination of textures (useful to have a mtl global cache of these combos). all the other variance should be handled by the ubershader mechanism, which is basically a `switch` on a ubo/pc integer value. naturally there will be externalities required to have a functioning render, such as: - camera matrices (mvp, vp^t^-1 = normal matrix, etc.) - lights now i dont want duplicate code floating around, so please factor out as much as possible into common built-in includes, especially the brdfs for which an api has already been invented: [a link] and please please please preprocessor guard everything so user can replace everything, vertex input, vertex output, fragment input, fragment output, main functions, descriptor sets, lighting, bsdf, etc. [a link] default lighting should be preprocessor guarded and be evaluated against a hardcoded point light centered at the camera position + environment map ibl (with 32 or 64 samples from the brdf importance sampling, with ""random"" 2d numbers from the sobol sequence permuted by a random toroidal (modulo 1.f) offset, a.k.a cranley patterson rotation, `new = fract(original+random)`) if any is present. in conclusion, all the given asset loader generater shader should look like is: - version - a whole bunch of brdf includes - more includes from built in headers - preprocessor guarded inputs - preprocessor guarded outputs - preprocessor guarded local function declarations (these should be very rare, mostly to do with attribute/brdf parameter loading from ubo or texture, as everything can be factored out into built-in headers this stuff should be minimal) - preprocessor guarded main entry point - preprocessor guarded local function definitions furthermore we should stick to some preprocessor guard convention, so its easy to override shaders generated by any loader (examples of naming convention given in [a link] p.s. i will provide you with sobol sequence, in the meantime use the halton or hammersley sequence (whatever is left over from our last february's/march's pcf shadows work). the random should probably be seeded by the world space or model space position of the pixel.",0,0.972701370716095
573379570,410,Crisspl,2020-01-12T03:54:35Z,"seems like not an issue, crash doesnt happen any more... maybe msvc generated some weird code before and it wasnt fault of ourc cpp code (wouldnt be first time)",0,0.7615566849708557
577109380,410,devshgraphicsprogramming,2020-01-22T10:13:36Z,there's about 20 unresolved conversations that are 2+ days old.,-1,0.5542818307876587
580467131,410,devshgraphicsprogramming,2020-01-30T21:25:28Z,"one polite request, for every built-in brdf make a function that already has the cosine factored in and takes `irr_glsl_bsdfisotropicparams` as input so there is some standarisation (need that stuff to be reusable for mitsuba and gltf)",0,0.9854775667190552
581392481,410,devshgraphicsprogramming,2020-02-03T12:31:38Z,"ok, we're almost done.",0,0.9463625550270081
581841490,410,devshgraphicsprogramming,2020-02-04T10:26:26Z,9 unresolved conversations.,0,0.7347319722175598
582854624,410,devshgraphicsprogramming,2020-02-06T11:10:10Z,did you change the depth writing mask fro alpha blended objects?,0,0.99396151304245
618003543,474,devshgraphicsprogramming,2020-04-22T19:57:05Z,we genrally want to abandon the `texturepacker` nomenclature in favor of `virtualtexture`,0,0.9930791258811951
618029676,474,Crisspl,2020-04-22T20:44:09Z,why doesnt `ivirtualtextureresidentstorage` keep (as a member) a physical page texture? actually i cant see them at all.. i'm a little confused.,-1,0.8344091176986694
618030999,474,devshgraphicsprogramming,2020-04-22T20:46:57Z,"they're here [code block] the ""semi-const"" map has them",0,0.9934020638465881
624557723,474,devshgraphicsprogramming,2020-05-06T10:06:37Z,only a few old conversations left,0,0.8901798725128174
626696108,474,devshgraphicsprogramming,2020-05-11T13:18:07Z,cool now merge my branch and we're good,1,0.991203784942627
655559160,497,AnastaZIuk,2020-07-08T14:35:03Z,done,0,0.8682363629341125
667153619,497,AnastaZIuk,2020-07-31T14:38:44Z,i will do exactly what i did before but with no caching nor wasting memory for all the layers,0,0.9833143949508667
670471114,497,Crisspl,2020-08-07T11:27:44Z,"don't use `auto` this much! it becomes illegible, use `auto` only in generic/template code when you actually need it and in case of very long type names (but even then prefer `typedef`/`using` instead). `auto i = 0u` isnt a good place to use `auto` for sure!",0,0.8698821067810059
670488136,497,Crisspl,2020-08-07T12:17:05Z,"actually... i dont know why you even touch output regions while decoding.. just do `cbasicimagefiltercommon::executeperregion(commonexecutedata.inimg, decode, commonexecutedata.inregions.begin(), commonexecutedata.inregions.end(), clip);`, fill scratch with decoded texels, do sat on scratch, and finally `executeperregion` over output regions (encode). ofc all of the above should be done per layer. take into account my today's review. yout negative offsets problem must be result of wrong api usage (of which is great amount as i already found quite a few in review comments), but theres no point in looking for whats wrong because it can be redesigned and done in much simpler way (the main part, (i.e. sat code) most likely doesnt need any changes)",0,0.9206168055534363
670516446,497,devshgraphicsprogramming,2020-08-07T13:28:03Z,"also `auto` without a reference (`auto&`) turns into a ""copy-by-value"" which has other performance implications.",0,0.9865053296089172
670539562,497,devshgraphicsprogramming,2020-08-07T14:16:39Z,"ok i think `clip_functor_t` needs an explainer [a link] you create the object by giving it the subresource (mip level and layer) of the original image, as well as the offset + extent to clip to, these are pretty much derived from your filter's state. you also pass it some texel-block-format info, but thats just for convenience and speed (it can derive those from the format). whenever you call the clip functor's function operator [a link] it will produce a `newregion` that is the intersection of the offset and extent of the functor and the offset and extent of `referenceregion`. now in order to produce such a region so its valid and is ""as-if"" it specified the image itself, you need to do the following: 1. resolve your `bufferwidth` if it was `0/-1` and similar because you need to know the byte-distance between successive rows and layers in a clipped region 2. find an offset that is both within the functor's state and the `referenceregion` (maximum of the coordinates) 3. find an extent that when added to the previously computed offsets is still within both rectangles (minimum of the coordinates with the maximum subtracted). `targetlimit` is the the one-past the max coordinate of the rectangle given in the constructor, while `resultlimit` is the equivalent for the input region. 4. compute a new `bufferoffset` given the change in the `offset` (offset can only become larger than the reference region so the `bufferoffset` shall be increased by a non-negative number) you can see step 2 and 3 being done starting on this line: [a link] if the two rectangles don't intersect (no common texels) then we return `false` [a link] the `offsetinoffset` cannot be negative: [a link]",0,0.9836170673370361
615398353,468,devshgraphicsprogramming,2020-04-17T18:30:11Z,jpg loader is fine,0,0.9643427133560181
617359878,468,AnastaZIuk,2020-04-21T19:14:36Z,i'm done,0,0.8608697056770325
723332418,554,devshgraphicsprogramming,2020-11-06T22:41:59Z,there still remains the problem that it looks like literally every mesh gets its own pipeline (loads of separate shader compiles),0,0.5467723608016968
488618273,291,manhnt9,2019-05-02T10:03:38Z,"cegui build is integrated in to irrbaw, but don't try it yet, still has some errors. the building process is done, i will have to set correct configurations for cegui.",0,0.9799718260765076
488916020,291,manhnt9,2019-05-03T03:36:48Z,"proposed changes, please review . (approved by devsh on discord). in order to link more libs to an example, we'd have to modify `macro(irr_create_executable_project)`. cmake complains if i use `target_link_libraries` in cmake of example, after `irr_create_executable_project("""" """")` since it's called before in the `macro(irr_create_executable_project)`. so `target_link_libraries` should be called once. to let example add more libs, the macro can be changed to: `macro(irr_create_executable_project _extra_sources _extra_options _extra_includes _extra_libs)`. further changes required: - find and replace `irr_create_executable_project("""" """")` with `irr_create_executable_project("""" """" """" """")`",0,0.983121931552887
489042786,291,devshgraphicsprogramming,2019-05-03T10:03:45Z,double approved.,0,0.9795555472373962
489065532,291,manhnt9,2019-05-03T11:30:28Z,"i pushed the changes several hours ago, it appears before the comment because my windows time is f**ked by linux. have just fixed my lvm partitions, relocated and resized, etc so still no code yet. my environment is stable now. from here we can expect frequent code updates.",0,0.7716296911239624
489554949,291,manhnt9,2019-05-06T09:05:59Z,linux can now build cegui and base project.,0,0.9869769215583801
489560082,291,manhnt9,2019-05-06T09:26:15Z,"in the waiting of the img loaders, i will use stb image for the time being.",0,0.9887170791625977
489562603,291,manhnt9,2019-05-06T09:36:25Z,"the progress is still new, i will notify when it's ready to be reviewed.",0,0.9919038414955139
489563503,291,manhnt9,2019-05-06T09:39:54Z,"according to , native file dialogs library has bugs on linux so he had to replace with [a link], and it works well. bug description: the implementation of ndf which uses zenity (nfd_zenity.c) on a few occasions would skip right through the file dialog, which would return garbage because the window just flashes and closes right after without the user be able to choose anything. pdf also uses zenity and doesn't exhibit the same problem, plus its single header. it's in active development (more than ndf) and is made by a oss supporter sam hocevar, the guy who invented wtfpl license.",0,0.9370638728141785
489880541,291,manhnt9,2019-05-07T02:17:41Z,"i had to remove this include, it produces conflicts with glew that cegui uses. #include ""../source/irrlicht/copenglextensionhandler.h""",0,0.9867016673088074
489980559,291,manhnt9,2019-05-07T08:11:58Z,"current cmake warning: cmake error at cmake/common.cmake:12 (add_executable): target ""brdf_explorer"" links to item ""irrlichtbaw/build/3rdparty/cegui/build/install/lib/ceguiopenglrenderer-0_static.lib "" which has leading or trailing whitespace. this is now an error according to policy cmp0004. call stack (most recent call first): examples_tests/13.brdf_explorer/cmakelists.txt:13 (irr_create_executable_project) i have to keep this because of the cmake's nature. the build still works correctly though. in fact, it needs this warning to work. for example: [code block]",0,0.9908595681190491
490440667,291,devshgraphicsprogramming,2019-05-08T10:51:13Z,would it work as [code block] ?,0,0.9938188195228577
490441665,291,devshgraphicsprogramming,2019-05-08T10:55:20Z,"last thing, why is portable file dialog a submodule in irr::ext? btw you have permission to put 3rdparty dependencies (even cegui) of any extension in the `./3rdparty` folder as this simplifies life when multiple extensions or parts of the library need the same extension. just don't install them",0,0.9899229407310486
491142232,291,manhnt9,2019-05-10T03:25:47Z,[code block] doesn't work. i'll relocate the submodules.,0,0.9869927167892456
491146493,291,manhnt9,2019-05-10T03:54:34Z,still doesn't build so i postpone the refactoring.,0,0.9302029013633728
491663223,291,manhnt9,2019-05-13T03:23:23Z,"well, gitlab tracks summary of unsolved comments so you can check without having to scroll, just saying.",0,0.9929649829864502
492485573,291,manhnt9,2019-05-15T03:03:32Z,about the clip control. currently not calling `resetopenglclip()` because i call `setopenglclip()` after `saveopenglstate()` so `restoreopenglstate()` should also restore the clip.,0,0.9925827980041504
492490192,291,manhnt9,2019-05-15T03:32:11Z,"rfc about the default texture slot, looks like it's from windows. will we be able to use this? ![a link]",1,0.792713463306427
492548822,291,devshgraphicsprogramming,2019-05-15T07:57:59Z,i don't understand ? clarify.,0,0.6863256096839905
492549096,291,manhnt9,2019-05-15T07:58:50Z,the icon seems like it is designed for windows. would you like to change to something else?,0,0.9854605793952942
492549272,291,manhnt9,2019-05-15T07:59:18Z,"like a free for commercial use icon, maybe.",0,0.9565871357917786
492601846,291,devshgraphicsprogramming,2019-05-15T10:38:34Z,i'm open to any icon that has a license that lets us use it.,0,0.9360759258270264
492907972,291,manhnt9,2019-05-16T04:02:17Z,"cegui ext is now a static library, let's review. only texture loader and minor refactoring left then we'll be able to do the 3d rendering.",0,0.9908937215805054
492909591,291,manhnt9,2019-05-16T04:12:45Z,"replaced image icon to fontawesome's icon. ![a link] be alert about this issue, we won't just take any icon to use in our work. ![a link]",0,0.7135239839553833
492994137,291,manhnt9,2019-05-16T09:33:44Z,i'm having this on windows (release mode). ![a link],1,0.5719316005706787
492995658,291,manhnt9,2019-05-16T09:38:09Z,msvc can't mix debug/release libs (can't build debug example with release cegui libs). so i'm changing cegui build process to use `add_subdirectory`.,0,0.994495689868927
493053683,291,devshgraphicsprogramming,2019-05-16T12:49:46Z,what's the license for that image?,0,0.9945200085639954
493297815,291,manhnt9,2019-05-17T02:38:08Z,"cegui deps are not meant to be built on linux, so linux users have to install packages manually. this is the message when i use add_subdirectory with cegui deps: this dependency pack is intended for use on apple os x and ms windows only. for other systems, such as gnu/linux, please consult your package manager or distribution maintainer to discover how to install the libraries you wish to use with cegui. thanks!",1,0.9872581362724304
493320672,291,manhnt9,2019-05-17T05:03:03Z,cegui deps must be built before adding cegui as subdir to find those deps. so i don't have other options than to build cegui deps when configuring (running cmake).,0,0.9916794896125793
493321310,291,manhnt9,2019-05-17T05:07:00Z,cegui's project added. ![a link],0,0.7860998511314392
493321755,291,manhnt9,2019-05-17T05:09:44Z,"cegui deps was downloaded into build folder. in order to reset the build folder easier (just deleting build folder without caring about anything inside), deps is downloaded into 3rdparty/cegui folder and ignored in git. then it's extracted to build folder and will be built there.",0,0.9923558235168457
493340396,291,manhnt9,2019-05-17T06:43:17Z,only this left and we'll have a perfect msvc build. looks strange. ![a link],-1,0.9959050416946411
493374826,291,manhnt9,2019-05-17T08:46:39Z,ah typo. it's good now.,1,0.9636563062667847
493405292,291,manhnt9,2019-05-17T10:25:40Z,looks what your macro resolves to. i'm not sure that function instead of macro will make a difference but i always stay away from macro. it's as dangerous as variables in cmake. i'm wasting the whole day to make it link for msvc. -- optimizedc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguiopenglrenderer-0_static.liboptimizedc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguibase-0_static.liboptimizedc:/users/manh/desktop/irrlichtbaw/3rdparty/cegui/cegui/dependencies/lib/glew.liboptimizedc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguiexpatparser_static.liboptimizedc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguistbimagecodec_static.liboptimizedc:/users/manh/desktop/irrlichtbaw/3rdparty/cegui/cegui/dependencies/lib/freetype.liboptimizedc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguicorewindowrendererset_static.liboptimizedc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguicommondialogs-0_static.liboptimizedc:/users/manh/desktop/irrlichtbaw/3rdparty/cegui/cegui/dependencies/lib/libexpat.liboptimizedc:/users/manh/desktop/irrlichtbaw/3rdparty/cegui/cegui/dependencies/lib/pcre.libdebugc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguiopenglrenderer-0_static_d.libdebugc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguibase-0_static_d.libdebugc:/users/manh/desktop/irrlichtbaw/3rdparty/cegui/cegui/dependencies/lib/glew_d.libdebugc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguiexpatparser_static_d.libdebugc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguistbimagecodec_static_d.libdebugc:/users/manh/desktop/irrlichtbaw/3rdparty/cegui/cegui/dependencies/lib/freetype_d.libdebugc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguicorewindowrendererset_static_d.libdebugc:/users/manh/desktop/irrlichtbaw/build/3rdparty/cegui/cegui/lib/ceguicommondialogs-0_static_d.libdebugc:/users/manh/desktop/irrlichtbaw/3rdparty/cegui/cegui/dependencies/lib/libexpat_d.libdebugc:/users/manh/desktop/irrlichtbaw/3rdparty/cegui/cegui/dependencies/lib/pcre_d.libirrceguiext,-1,0.9839116930961609
493408411,291,manhnt9,2019-05-17T10:37:31Z,"msvc will always be considered a disease to me. cmake with gcc is very great. for example if you link irrceguiext, you have all irrceguiext as well. guess what you get with msvc? a irrceguiext string.",-1,0.8240268230438232
493737402,291,devshgraphicsprogramming,2019-05-19T08:26:45Z,"that's literally beyond annoying, but it can stay like this for the time being so you're not wasting your time.",-1,0.992330014705658
493737838,291,devshgraphicsprogramming,2019-05-19T08:34:24Z,"sounds like the cegui dependency pack is a little bit fishy ;) i think we've had the ""had to be built upon configure"" issue with openssl (and then it turned out that you can actually get the exotic dependency building outside of configure), how did we resolve it?",1,0.9588794112205505
493738644,291,devshgraphicsprogramming,2019-05-19T08:47:13Z,this is still a problem or did your last two commits get around it? also what do you propose instead of that macro?,0,0.9867542386054993
493823761,291,manhnt9,2019-05-20T03:01:48Z,it links properly now. macro is like find and replace (same as #define in c++) so passed parameters could be messed up in code generation. also it bloats up the cmake code and increases configuration time a little bit. i would use cmake's function syntax.,0,0.9921338558197021
494223131,291,manhnt9,2019-05-21T03:12:13Z,"i'm also giving irrbaw an ext framework, including: - a macro to create a static ext library by providing header, source list, external include path and compile options - that macro will build, install headers, install ext lib to correct location according to `extension rules` - and set global cmake variables for any example to use, e.g: irr_ext_cegui_include_dirs and irr_ext_cegui_lib to use the ext framework: - refer to ext/cmakelists.txt, then add_subdirectory and copy 2 simple variables - in ext's cmake code, call irr_create_ext_library_project - now you can use irr_ext_name_include_dirs and irr_ext_name_lib",0,0.9935929179191589
494226684,291,manhnt9,2019-05-21T03:33:50Z,cmake code is now super clean.,1,0.59794682264328
494238662,291,manhnt9,2019-05-21T04:52:46Z,discovered and fixed another issue affecting the bad boy msvc. also reported to cmake [a link].,0,0.9065037369728088
494239583,291,manhnt9,2019-05-21T04:57:54Z,commit date is messed again because of linux/windows time mismatch.,0,0.6412877440452576
494308158,291,ghost,2019-05-21T09:10:38Z,"you can configure linux to use local time as the stored time format [code block] linux and windows use different conventions when writing current time/date to bios upon booting, hence the mistmatch",0,0.9939159750938416
494327055,291,manhnt9,2019-05-21T10:05:08Z,"i was lazy to find the solution although i've done before. used your above command, thanks!",1,0.9431084990501404
494406748,291,devshgraphicsprogramming,2019-05-21T14:07:27Z,"hi, i met with our contact, tried to show him the example and ran into this when doing a fresh clone [code block]",0,0.9907750487327576
494407560,291,manhnt9,2019-05-21T14:09:18Z,"network problems, met these too. were you using coffee's internet?",0,0.9902093410491943
494408182,291,manhnt9,2019-05-21T14:10:55Z,btw you could ask for a pre-built version. are you still there or not?,0,0.9943926334381104
494409050,291,manhnt9,2019-05-21T14:12:58Z,also did you try cloning your original repo too?,0,0.995192289352417
494413131,291,manhnt9,2019-05-21T14:22:51Z,"ah i discovered something, we should use https for those modules. i was using ssh url because i always use ssh. sorry, this is very unexpected. will update.",-1,0.9943757057189941
494413563,291,devshgraphicsprogramming,2019-05-21T14:23:55Z,when can i pull and try again?,0,0.9911525845527649
494413780,291,manhnt9,2019-05-21T14:24:28Z,in several mins,0,0.984286367893219
494414122,291,manhnt9,2019-05-21T14:25:17Z,if you want to save build time i can send a prebuilt version.,0,0.9923399686813354
494415012,291,manhnt9,2019-05-21T14:27:21Z,"i pushed, try git reset --hard and pull, then git submodule sync",0,0.9942691326141357
494476562,291,Crisspl,2019-05-21T17:06:31Z,"not sure if it's the same problem but in my case it started running when i created gitlab account, created ssh key and registered it in gitlab account",0,0.9096288084983826
494803280,291,manhnt9,2019-05-22T13:30:44Z,i think that's it. the only odd thing i've found out is that the failed submodules were using ssh urls.,0,0.9384384155273438
495045281,291,manhnt9,2019-05-23T02:37:07Z,"shit, i was hurrying and sleepy, pasted stb url for cegui module.",-1,0.9874510765075684
495698770,291,devshgraphicsprogramming,2019-05-24T16:28:23Z,"having cmake `configure` build your cegui dependencies is a nightmare (takes so long one thinks its broken), we should fix it at some point in the future (before 2020) i'm getting linker errors, the glew dependency [code block]",-1,0.9837644696235657
495699736,291,manhnt9,2019-05-24T16:30:53Z,is this the latest commit?,0,0.9941668510437012
495700029,291,devshgraphicsprogramming,2019-05-24T16:31:40Z,"yes, after hard reset, pull etc.",0,0.9874561429023743
495701093,291,manhnt9,2019-05-24T16:34:23Z,what is your cegui module's latest commit?,0,0.994515061378479
495703709,291,manhnt9,2019-05-24T16:41:28Z,"about the slowness, i don't thing it's gonna improve much when using git modules, because: - downloading a zip file is faster than each uncompressed submodule - build time of dependencies and cegui won't improve",0,0.7622818946838379
495725788,291,devshgraphicsprogramming,2019-05-24T17:40:52Z,"build time is fine, its just the cmake ""configure"" stage thats killing me",-1,0.9587430953979492
495730597,291,manhnt9,2019-05-24T17:52:57Z,did the linker errors go away? i think it's because you wasn't having latest cegui patch for static linking.,0,0.9914546012878418
495801668,291,devshgraphicsprogramming,2019-05-24T22:12:31Z,"if we need a later version of cegui can you commit that you've pulled a later version of the submodule? (if you pull a different submodule commit/branch, you can commit that fact)",0,0.995404839515686
495845607,291,manhnt9,2019-05-25T04:12:00Z,"yes i know that, just wondering if you've got the correct cegui version. because it (glew linking errors) is strange since that is fixed in latest cegui.",0,0.8011408448219299
495916740,291,devshgraphicsprogramming,2019-05-25T13:01:20Z,"well i reset and force intialized my submodules, what else can i do?",0,0.9884597063064575
495917628,291,manhnt9,2019-05-25T13:14:19Z,could you paste last 5 commits of git log after cd into `3rdparty/cegui/cegui`?,0,0.9950870871543884
495918281,291,manhnt9,2019-05-25T13:24:10Z,"yeah that's an old module. my log is below, notice that the first commit hash is the same as what i pushed: [a link] [code block]",0,0.98977130651474
495918756,291,manhnt9,2019-05-25T13:31:45Z,"oooh, strange, but the latest commit message should be `add utility files` instead of `update cegui for static pcre fix` shown in [a link] i think git is messed up somehow. i'm checking.",-1,0.8782568573951721
495919534,291,manhnt9,2019-05-25T13:43:48Z,"solved, besides git url a submodule needs the branch name if it's not using master as default branch. my cegui branch is `saga`. adding submodule without branch name works for the first time but it can't update without knowing which branch later. git is dumb in this issue, not producing a sensible output and just assume the updated status somehow.",-1,0.9225186705589294
495919566,291,manhnt9,2019-05-25T13:44:12Z,you can pull and try updating the cegui module.,0,0.9949931502342224
495931039,291,devshgraphicsprogramming,2019-05-25T16:29:33Z,"i couldn't pull because despite the pull of the main repo (where the branch is specified) git told me i'm not on a branch when pulling a submodule so i had to pull explicitly, and it told me i'm up to date [code block] why do i need to mess around with the module manually if you update the submodules file? its not like i had any tracked or untrack file changes there. and after all this i get extra compiler errors + cannot find glew.h .",0,0.5346482992172241
495931196,291,manhnt9,2019-05-25T16:31:43Z,"for any submodule, you'll have to checkout its branch before pulling. [code block]",0,0.9953535795211792
495931338,291,devshgraphicsprogramming,2019-05-25T16:33:43Z,"i've done that manually, question is why on earth do i have to do that by myself, shouldn't we all be synced up nicely regarding what branch and revision/commit of a submodule we're using? especially after a `hard` `reset`?",-1,0.5128760933876038
495931633,291,devshgraphicsprogramming,2019-05-25T16:38:00Z,"i was all up to date and proper. seems that because the cegui deps are not proper targets, after a change of cegui the following happens: 1) `zero_check` doesn't work, as in it doesn't detect dependency 2) ""configure"" again doesn't work because of cmake cache so i needed to delete cache, and do ""configure"" with correct extra options from the ground up again.",0,0.9870942234992981
495932229,291,manhnt9,2019-05-25T16:46:47Z,"the submodule hassle is due to the git mirroring. the git version has extra changes (.gitignore for example) which are not reasonable to put into original svn repo. and the sync process will break completely if the git repo has manually made commit via git. so each time i sync, my sync script does some tricks that re-writing some git commits, i'd have to revert git changes, sync from svn, re-add git changes and commit, and push -f. maybe the commit hashes are messed up. for now, i can eliminate git changes from the repo (leaving out .gitignore and then dependencies folder generated by build will be detected by irrbaw's git, but we already have shaderc and openssl polluted the same way, shaderc needs a touch of new lib file before building and openssl only builds in the source folder). about the cegui cmake cache, yes because cegui version has changed. i advise deleting the cegui folder generated in build/3rdparty and configure again. also note that i've tried deleting my build folder and rebuild several times on both windows and linux, so it shouldn't meet any serious build problems now.",0,0.8996705412864685
495932510,291,devshgraphicsprogramming,2019-05-25T16:50:31Z,"actually openssl building in the source dir is not a problem, because the submodule gets reset and pulled the latest version from the 1.0.2 branch every time it builds ;) yeah the shaderc thing is a drag, they were supposed to have already fixed it :( i think cegui deps should be properly added and statically linked on linux after we ship brdf explorer completely.",1,0.5238833427429199
495932916,291,devshgraphicsprogramming,2019-05-25T16:56:21Z,update: i've experienced #299 when trying to build example 13 in the release configuration straight away. nope still same glew linker errors,0,0.9860949516296387
495937212,291,devshgraphicsprogramming,2019-05-25T18:02:06Z,even in debug build [code block] are you actually getting your glew from vcpkg or something and not the repo? otherwise i have no idea how you manage to build this,0,0.9112527966499329
497048246,291,devshgraphicsprogramming,2019-05-29T18:09:01Z,"i think i found the issue, you're including the dependencies like this [code block] when in-fact they are [code block]",0,0.9806807637214661
497049140,291,devshgraphicsprogramming,2019-05-29T18:11:29Z,"damn it, that's not it",-1,0.9949754476547241
497052522,291,devshgraphicsprogramming,2019-05-29T18:20:31Z,this might be definitely it [code block] sources: [a link] [a link] [a link],0,0.9904536008834839
497057204,291,devshgraphicsprogramming,2019-05-29T18:32:30Z,"now it works, cegui needs `cegui_build_shared_libs_with_static_dependencies = on`",0,0.9882170557975769
497192719,291,manhnt9,2019-05-30T03:54:32Z,"cegui_build_shared_libs_with_static_dependencies is not intended. it's for dynamic libs with static dependencies. that's why i needed to patch cegui for static libs + static dependencies. mine works without that option, i'm not able to dig into your case soon but in general that fix is discouraged.",0,0.9797137379646301
497328475,291,devshgraphicsprogramming,2019-05-30T13:26:15Z,"seems not, also the only thing it seems to control is whether to define `glew_static` no idea how thats possible, maybe you're actually loading glew from a system installed dll. `glew_static` must be defined when compiling anything that used glew headers for a static glew to work.",0,0.9514684081077576
497895841,291,devshgraphicsprogramming,2019-06-01T00:20:06Z,also funny story `cegui_build_shared_libs_with_static_dependencies` does not show on the linux cmake-gui config screen ;),1,0.8843368291854858
497896022,291,devshgraphicsprogramming,2019-06-01T00:22:15Z,"tested on windows and linux. merged as its 99% complete, further work should be done on a new pr (the helper refactoring etc.)",0,0.9817842245101929
562460549,403,AnastaZIuk,2019-12-06T07:11:24Z,"the openexr is a **priority**, so i will slow with doing [a link] gli dependency for a while and focus on it.",0,0.9715024828910828
567913268,403,devshgraphicsprogramming,2019-12-20T12:47:01Z,did you forget to add and commit `cmake/findzlib.` (the override for findpackage zlib)?,0,0.9928455948829651
568174940,403,AnastaZIuk,2019-12-21T11:43:36Z,"there is no need for that now, i fixed cmake and now everything works properly",0,0.5512759685516357
667319181,521,devshgraphicsprogramming,2020-07-31T19:42:54Z,ok now only blue noise dithering left to do and we're ready to merge ;),1,0.6896364688873291
679280176,521,AnastaZIuk,2020-08-24T18:03:20Z,i think we should move `idither` to asset directory,0,0.9899955987930298
680990936,521,AnastaZIuk,2020-08-26T16:35:31Z,i'm done,0,0.8608697056770325
683440711,521,AnastaZIuk,2020-08-30T16:25:57Z,**cblitfilter** has worked with new api recently correctly without issues but i wonder if we should query the `seed` for wang hash in the way like i do it now (maybe we should change it to something like `std::chrono::high_resolution_clock::now().time_since_epoch().count()` or similar?),0,0.9873284101486206
683441168,521,AnastaZIuk,2020-08-30T16:30:20Z,spotted an issue however! ![a link] it seems it isn't due to dithering - when using identity dither it generates the same weird output on bottom and right edit: it's probably a bug [a link],-1,0.9791790246963501
683958930,521,devshgraphicsprogramming,2020-08-31T18:42:32Z,`seed` should be in the whitenoise dither's state,0,0.9941372871398926
683961121,521,AnastaZIuk,2020-08-31T18:46:30Z,okay,0,0.9793328642845154
685713368,521,devshgraphicsprogramming,2020-09-02T12:50:02Z,this should be merged into 's branch when its done.,0,0.9954373240470886
576198311,411,devshgraphicsprogramming,2020-01-20T10:00:58Z,"almost ready to merge, just some changes to gli writer needed",0,0.8053785562515259
496307981,307,devshgraphicsprogramming,2019-05-27T21:23:00Z,"one more thing, because this is nice and new clean api... the files should be in `include/irr/namespace/...` in the case of axis aligned bounding boxes, they should be in `include/irr/core/math`",1,0.9109594225883484
498205433,307,devshgraphicsprogramming,2019-06-03T10:38:53Z,", btw you need to add `irr_force_ebo` to all classes which are ""empty"" (don't have members) otherwise their sizes will be messed up like this [a link] its a very interesting msvc bug regarding empty base optimization that you can read about ;)",1,0.9763535261154175
498640691,307,Przemog1,2019-06-04T11:57:22Z,now all i need to do is better algorithm for box intersection test,0,0.979076623916626
498641681,307,Przemog1,2019-06-04T12:00:35Z,"also to finish this task i will need operator<, operator>, unpacklo and unpackhi functions for simd vectors",0,0.993133008480072
499056629,307,devshgraphicsprogramming,2019-06-05T12:10:07Z,are we done?,0,0.9821861386299133
499058690,307,Przemog1,2019-06-05T12:17:16Z,if everything is alright then yes. need to add few comments and i think its time to suspend this task until simd vector classes rework.,0,0.9614837169647217
362012645,21,devshgraphicsprogramming,2018-01-31T17:45:00Z,"please merge your branch, i needed to change some things for c++03 tr1 compliance",0,0.9948377013206482
362059870,21,devshgraphicsprogramming,2018-01-31T20:26:13Z,i think this merge didnt take my std::memcpy for memcpy and set<>::emplace to set<>::insert fixes for ref: [a link],0,0.9872758984565735
362083705,21,Crisspl,2018-01-31T21:54:34Z,"well, it took, but for some reason doesn't show in diff.. and why actually c header (`""stdint.h""`) and why quatation marks instead of `<>` ?",0,0.9903485774993896
362239552,21,devshgraphicsprogramming,2018-02-01T11:34:27Z,"becuase cstdint is from c++11, gcc throws a fit about it. all that stdint provides is typedefs for (u)intn_t",-1,0.7865180373191833
362250252,21,suddani,2018-02-01T12:22:46Z,"wunderbar am 01.02.2018 12:46 schrieb ""devshgraphicsprogramming"" < notifications.com>:",0,0.989328920841217
362258405,21,devshgraphicsprogramming,2018-02-01T12:58:49Z,"about variable size blobs such as meshblobv1, finalbonehierarchyblobv1, etc. lets inherit them from a template struct `template struct variablesizeblob : public blob { static size_t caclblobsizeforobj(t* _obj) {return 0;} static void* allocmemforblob(t* _obj) {return malloc(caclblobsizeforobj ());} };` as i.e. class meshblobv1 : public variablesizeblob then specialize the calcblobsizeforobj function for all objects? and finally change the structs inheriting from variablesizeblob to classes and make the constructors private and only provide a static placement new wrapper ..",0,0.9878320097923279
362264739,21,devshgraphicsprogramming,2018-02-01T13:24:51Z,"also i'm seeing a lot of `_ctx.headers[_headeridx].blobsize = _ctx.headers[_headeridx].blobsizedecompr = size; core::xxhash_256(&data, _ctx.headers[_headeridx].blobsizedecompr, _ctx.headers[_headeridx].blobhash); _file->write(data, _ctx.headers[_headeridx].blobsizedecompr);` in every exportasblob maybe we should make a general function for this on the blob or in the cbawmeshwriter, so we don't repeat ourselves?",0,0.9911784529685974
362670902,21,Crisspl,2018-02-02T18:46:45Z,i'm going to have much less time for a few days now. could you just run writer/loader on some more complicated meshes to see if it's working? i'll also test it myself of course :d but some feedback from you would be nice since you know the exact needs,1,0.9902764558792114
362806581,21,devshgraphicsprogramming,2018-02-03T13:34:44Z,"still don't like the fact that allocmemforblob is not a member of variablesizeblob we can make it work with a crtp. [[a link] this ties is with the other thing i don't like which is that all blobs are not constructed and filled in their constructors, variablesizeblobs would just use static some static func, i.e. ""createfromobj"" which would use placement new internally, with private constructors.",-1,0.9216569066047668
362820132,21,Crisspl,2018-02-03T15:12:04Z,did this one thing now. about everything else i'll talk to you in a few days because of mentioned lack of time..,0,0.9282306432723999
362820247,21,devshgraphicsprogramming,2018-02-03T15:13:06Z,"no problem, just remember to merge, i had to rip out c++11 std::free and malloc stuff from cbawmeshwriter.cpp again",0,0.8565946817398071
362823118,21,devshgraphicsprogramming,2018-02-03T15:37:03Z,"i think a big problem now is a lot of dry (don't repeat yourself) violation, basically every specialization of `cbawmeshfileloader::make` does ` if (_data.wascreated) return dynamic_cast (_ctx.createdobjects[_data.header->handle]); ` and `registerobject(_data, _ctx, buf);` (which i want to disappear anyway) the function `cbawmeshfileloader::make` should be wrapped in a generic `loadblob` function which should do stuff like checking if the object was already loaded/created, checksum validation (in the future decompression) and, at the end, changing the object's status to loaded.",0,0.7183202505111694
362823694,21,devshgraphicsprogramming,2018-02-03T15:41:25Z,"i think i forgot to mention rule 12,13 and 14 of hpc: 12) recursion is evil, and so are deep call-stacks, ergo rule 13 13) don't inline your functions, but keep them inlineable 14) eliminate deep call-stacks, by usting your own stack! i have an idea for keeping the loading from being functions calling functions, but for now its not essential. in a nutshell if would boil down to: 1) `obj* someobjectblob::createobj (stack & _additionalblobstoload)` 2) if `someobjectblob::needsfinalization(obj* _obj)` then put on `std::pair _objectblobstofinalize` 3) load everything that is on `_additionalblobstoload` with repeating steps 1-2 4) for all in `_objectblobstofinalize` do `someobjectblob::finalizeobj (obj* _obj)`",-1,0.7134529948234558
364060336,21,devshgraphicsprogramming,2018-02-08T09:56:52Z,"stop what you're doing, we need to talk",-1,0.8724917769432068
708595682,549,devshgraphicsprogramming,2020-10-14T18:53:58Z,"i see a problem that [code block] is used an an ""early out"" on all `converttodummyobject` now because the call is recursive (goes through children) and whether a child is converted depends on its mutability state... this means that just because it was called before on an asset, won't guarantee that a second call is not going to produce side-effects. this logic was broken even before mutability concerns, when we first introduced the recursion depth parameter.",0,0.9333994388580322
708628534,549,Crisspl,2020-10-14T20:00:13Z,this `if` doesn't concern mutability at all. however i see your point.. for example at first i call converttodummy(0) and after that converttodummy (2). and levels 1 and 2 won't be converted then,0,0.9837700128555298
713445826,549,devshgraphicsprogramming,2020-10-21T09:42:14Z,todo: - [x] comments - [x] ~~non-const getters on non-mutable assets to return `nullptr` etc.~~ make non-const getters on non-mutable assets `assert(false)` - [x] `const_cast` in cpu2gpu converter (so that const getters can be used),0,0.9945141077041626
717311501,549,Crisspl,2020-10-27T15:10:54Z,all done,0,0.9894260168075562
638757379,487,devshgraphicsprogramming,2020-06-04T10:14:11Z,does this work and has it been actually tested?,0,0.9924793243408203
685644428,487,devshgraphicsprogramming,2020-09-02T11:15:25Z,can you merge `shader_pipeline` into your branch so the diff is not insane?,0,0.986816942691803
686610697,487,Hazardu,2020-09-03T16:32:40Z,could you assist me with assigning the proper parameters for allocator's constructor in cfixedcapacitydoublylinkedlist.h?,0,0.9936063289642334
585444038,422,devshgraphicsprogramming,2020-02-12T22:12:29Z,whhy does this pr contain updates to submodules?,0,0.9885011911392212
585455836,422,Crisspl,2020-02-12T22:43:32Z,"idk, added files with git add -u and those got added. i think it's no harm though",0,0.9398748874664307
585782411,422,devshgraphicsprogramming,2020-02-13T14:29:24Z,no way to tell unless you do a clean checkout and see if you've added a problem to our already problem riddled submodules. the submodules were at specific commits and tags for a reaason,0,0.8453392386436462
590236130,422,devshgraphicsprogramming,2020-02-24T09:38:16Z,what are we doing about the unresolved conversations?,0,0.9051091074943542
508554001,333,devshgraphicsprogramming,2019-07-04T18:31:34Z,you should merge my master branch into yours to get latest cmake+submodule fixes.,0,0.9954332113265991
508922467,333,devshgraphicsprogramming,2019-07-06T12:21:24Z,there's still about 8 unresolved conversations remaining in the pr.,0,0.8505644798278809
517994360,333,devshgraphicsprogramming,2019-08-04T11:11:20Z,cool but you didn't include `cderivativemapper.h` in any other include so user won't be able to use it by just including `irrlicht.h`,1,0.9376698136329651
418922215,143,devshgraphicsprogramming,2018-09-06T00:18:12Z,it would be nice to unify the methods for all cache types. the single-object caches can just return 1-sized ranges,0,0.9901477694511414
418930612,143,Crisspl,2018-09-06T01:09:29Z,"that's kind of stuff you should tell me before. it changes approach like a lot, but i'll see tomorrow how we can do that",0,0.9120221138000488
418973722,143,devshgraphicsprogramming,2018-09-06T05:56:36Z,"well at least these classes are not being used anywhere, yet. agreed. however it would be beneficial to commit the intended function declarations first (or interfaces), then we could discuss the approach before the trouble of writing definitions and implementations.",0,0.9882497787475586
419498381,143,devshgraphicsprogramming,2018-09-07T16:44:03Z,"i allowed the insertion and caching of null pointers a month ago [a link] also referenced it in the issue #123 the non-nullness of the returned pointer is no longer an indicator of success. greet and dispose are always called, even on nullptr... they are supposed to check for it and handle that.",0,0.9917945265769958
419531679,143,Crisspl,2018-09-07T18:48:17Z,"i know, everything i'm aware of is up to date with your changes",0,0.9613442420959473
419557563,143,devshgraphicsprogramming,2018-09-07T20:31:42Z,ok i'll review code once again,0,0.9929043650627136
420061262,143,devshgraphicsprogramming,2018-09-10T21:07:06Z,the operation of `cpreinsertionverifier` is really hard to decipher without comments. the macros don't help either.,-1,0.8674470782279968
420071266,143,devshgraphicsprogramming,2018-09-10T21:42:57Z,"in general using `isnonzerorange` to check a range's validity is not really that efficient. as everything except for vector and possibly map/multimap could suffer big performance hits from the `std::distance` call as the ""complexity"" part of the spec says [a link] the complexity for non-random access iterators will be linear in the distance size. a far better method would be to simply check if `range.first!=range.second`",0,0.9567986726760864
420099782,143,Crisspl,2018-09-10T23:57:45Z,yea that's wrong. i'll change it to `!=` as you suggest,0,0.9373387098312378
420178576,143,devshgraphicsprogramming,2018-09-11T07:40:31Z,"i think all uses of `noptrvaluetype_impl` could be replaced with `const value_type &` or `const_reference_type` then the cache could take non-ptr types too. on 11/09/18 00:39, krzysztof szenk wrote:",0,0.9913893342018127
420178954,143,devshgraphicsprogramming,2018-09-11T07:42:05Z,"ok i see that std::move shoudl take care of the first problem by ""copy and move constructors for the cache base itself?"" i mean [code block] on 11/09/18 00:41, krzysztof szenk wrote:",0,0.9933056235313416
420183770,143,devshgraphicsprogramming,2018-09-11T08:00:21Z,"i guess if you change `isnonzerorange` to use the != operator instead of `std::distance` this should be fine to stay. on 11/09/18 00:56, krzysztof szenk wrote:",0,0.9861374497413635
420185532,143,devshgraphicsprogramming,2018-09-11T08:07:08Z,"right now you have a situation that if you find a key, then the range returned will be a valid range of all key values for that key. however if the key is not present, you insert a nullptr key, and you still return the old found range. there are 2 problems with this: 1. insertion (container modification) can invalidate existing iterators 2. now the real valid range is the iterator returned by `m_container.insert` and the `std::next` of that iterator problem number 1 is the biggest issue as it will cause a segfault if someone wants to use the returned range to know where their reserved nullptr is. on 11/09/18 00:51, krzysztof szenk wrote:",0,0.8918644189834595
420186000,143,devshgraphicsprogramming,2018-09-11T08:08:56Z,"ok, at least write a big comment on that line. on 11/09/18 00:48, krzysztof szenk wrote:",0,0.9915052056312561
420190100,143,devshgraphicsprogramming,2018-09-11T08:23:45Z,"it is the specialization used for single element associative cache, but i forgot it returns a std::pair on 11/09/18 00:44, krzysztof szenk wrote:",0,0.9945085644721985
420242066,143,Crisspl,2018-09-11T11:34:05Z,[code block] they're generated by the compiler for every class ever as long as the're not explicitely deleted in the class or one of its memebers.,0,0.9933912754058838
420243072,143,Crisspl,2018-09-11T11:38:37Z,also please answer in the conversation because it's hard to read when all the talking is scattered all over the page,0,0.9654913544654846
420250179,143,Crisspl,2018-09-11T12:05:30Z,"still return the old found range. oh yeah, it's a bug, thanks",1,0.8865931034088135
420253106,143,devshgraphicsprogramming,2018-09-11T12:17:09Z,reply by email seems not to put my replies in the right thread. do you want me to copy the replies in the right places?,0,0.8732085227966309
420254828,143,devshgraphicsprogramming,2018-09-11T12:23:25Z,"ok, but can we get a static_assert that the end classes are copyable and movable ?",0,0.9940853118896484
420259459,143,Crisspl,2018-09-11T12:39:42Z,"sure, btw, concurrent variants won't be moveable nor copyable (also in the sense of assignment) with c++11 impl. of locks (`std::atomic`).",0,0.9888033270835876
420270133,143,devshgraphicsprogramming,2018-09-11T13:15:15Z,i take thats a given about concurrents :),0,0.9838032722473145
420273886,143,Crisspl,2018-09-11T13:26:43Z,"so i'll explicetely delete copy/move ctors/assignment ops in concurrents so they're uniform regardless of locks implementation, ok?",0,0.9912557601928711
420293670,143,Crisspl,2018-09-11T14:27:09Z,"hm turns out it's not really possible, because such static_assert must be inside template class definition (so it triggers at template instantiation) but at least msvc doesn't allow putting ""undefined class"" (because it's *inside* the definition) into `is_copy_constructibe<>` etc. btw it's implemented with some compiler intrinsic here. also it can't live outside the definition because it'd have been concretized for some template args. best bet imo would be to put some instantiations of cache template type into those type traits but it's extremely ugly",-1,0.9679936766624451
420313539,143,devshgraphicsprogramming,2018-09-11T15:24:06Z,ok lets not bother with that.,0,0.9624385833740234
420316702,143,devshgraphicsprogramming,2018-09-11T15:33:13Z,"i closed and merged but some areas i marked with `// can be get some general specialization for any allocator?` will need an update for the future because we need to support all std::vector (map, etc.) regardless of allocator used.",0,0.9922312498092651
420321815,143,Crisspl,2018-09-11T15:48:01Z,"yea, i've seen your plans about this somewhere. i'll do this in next commit",0,0.9660888910293579
420323541,143,devshgraphicsprogramming,2018-09-11T15:53:12Z,you'll need a big merge for that ;),0,0.9874504804611206
420324437,143,Crisspl,2018-09-11T15:55:53Z,you've done it :d and i already pulled to my local,1,0.994946300983429
518009418,341,devshgraphicsprogramming,2019-08-04T14:45:19Z,you do realize that the velocity buffer is practically almost not needed at all? unless ofc you plan to blend velocities for some weird obscure reason (particles). since we can very easily work out velocity [code block],0,0.9789228439331055
518009725,341,devshgraphicsprogramming,2019-08-04T14:49:01Z,for getting ndc position or view space position from non-linear zbuffer plus texcoords you can check out my previous work here [a link],0,0.9900068044662476
518012428,341,devshgraphicsprogramming,2019-08-04T15:23:11Z,"when we encounter skinned meshes or moving meshes, we could implement what is already required in deferred+, that is give every object and triangle a unique id. then given the world space (or view space) 3d fragment postion, work out the triangle barycentric coordinates, then use data about the previous frame (old transformed skinning vertices by compute shader, old mvp matrices, etc.) to compute the 3 triangle vertex `gl_position`s and reproject like that ;)",1,0.8934220671653748
518025260,341,devshgraphicsprogramming,2019-08-04T18:26:14Z,"last thing, try and work out the average distance between your jitter samples (obvsiouly repeat them a in a 3x3 grid) to find out the mip-map bias to set on all textures (its an opengl setting, you can extend `stexturelayer`) i'd expect this, where n is numer of jitter sample positions n=1 -> avg_distance = 1.0 pixel n=2 -> avg_distance = 0.707 pixel etc. your mipmap bias needs to be `log2(avg_distance)` this is because now textures will get smoother and blurrier, so tssaa can provide better quality aa in terms of texture filtering.",0,0.9899207353591919
518311883,341,Crisspl,2019-08-05T16:50:40Z,some screenshots no camera movement: ![a link] slight camera movements: ![a link] fast camera movements: ![a link] as bmp (i had to convert to jpg for github to allow uploading it): [a link],-1,0.7080557346343994
518331577,341,devshgraphicsprogramming,2019-08-05T17:46:15Z,"oh i read in ke xu's presentation that the history buffer needs to be fp16, which makes sense because usually we have banding and loose a lot of info to the extent of needing dithering (i actually inject noise before writing out to 8bit textures/framebuffer in build a world). so basically output post-gamma non-linear (lin2srgb) colors to a linear half-float history buffer. also since you will be using the compute shader, you can finally use rgb9e5 shared exponent non-renderable format for the history buffer (make an r32uint image view, use as read+write storage image and pack/unpack manually) which saves us 2x space! to reduce banding and allow hdr displays (itu 2020) your input could be fp16, r11g11b10f or rgb9e5, even though its post-resolve/post-gamma. if you get srgb8 texture as input remember not to sample it as srgb8 (it will linearize, you don't want to work in linear space), create a rgb(a)8_unorm view for it. finally you could add dithering (nice noise) on the non-history output, after the motion blur if any. in the future we will roll tonemapping -> color correction -> oetf -> tssaa & motion blur & output dithering into one shader",0,0.9800466299057007
518335683,341,devshgraphicsprogramming,2019-08-05T17:57:57Z,"those screenshots don't look like aa, there's some blur but the straight edges of the box against the background don't look like 8x tssaa",0,0.9616708755493164
518343819,341,Crisspl,2019-08-05T18:20:52Z,"what actually means ""8x"" in ""8x tssaa""?",0,0.9884998202323914
518345934,341,devshgraphicsprogramming,2019-08-05T18:26:35Z,8 jitter positions.,0,0.9875279068946838
615873111,341,devshgraphicsprogramming,2020-04-18T13:36:37Z,we'll redo it at some point,0,0.964730441570282
539876325,373,devshgraphicsprogramming,2019-10-09T07:29:40Z,"resolved everything, merge to other fork",0,0.9708526730537415
622187719,480,devshgraphicsprogramming,2020-05-01T00:20:49Z,when the code is commented out the opengl vs.vulkan ndc set-up is wrong (it doesn't get reset to opengl default before cegui is invoked) however when its uncommented there's probably something wrong with saving the blend state (`glenable` + `glblendfunc` stuff),0,0.9832943677902222
655763739,480,devshgraphicsprogramming,2020-07-08T21:20:05Z,closing temporarily.... reopen when ready for merge,0,0.9775266647338867
559723678,402,devshgraphicsprogramming,2019-11-29T09:32:16Z,"afaik the glm submodule may be fucked up and have problems configuring/building when added as a subdirectory in cmake, have to check and if its the case figure out what's wrong.",-1,0.5997483134269714
559724086,402,devshgraphicsprogramming,2019-11-29T09:33:30Z,btw have a look at [a link],0,0.9910643100738525
560168736,402,devshgraphicsprogramming,2019-12-01T22:39:47Z,"you need to view the icpuimage as the full opengl image, all layers and mip-levels included. icpuimage gets its pixels filled by a series of buffer to image copies like in vulkan.",0,0.9943087697029114
570060023,402,AnastaZIuk,2020-01-01T15:04:57Z,close due to moving to [a link],0,0.8918981552124023
546046717,387,devshgraphicsprogramming,2019-10-24T18:33:24Z,i have a bunch of comments for stl and ply loaders that now got lost because of the merge.,0,0.9645029306411743
546510553,387,devshgraphicsprogramming,2019-10-25T20:56:08Z,"i'd cut down on that `public virtual`, `idescriptor` does not need to know anything about ref counting.",0,0.9929206967353821
546553793,387,Crisspl,2019-10-26T00:57:11Z,"not sure what about this is but yea, it needs to inherit from irefcounted, see idescriptorset code (smart_refctd_ptr )",0,0.9634252190589905
546553920,387,Crisspl,2019-10-26T00:58:47Z,they're still there,0,0.9531566500663757
546585297,387,devshgraphicsprogramming,2019-10-26T09:07:09Z,so you are holding onto objects by `idescriptor` pointer ? ok but lets have the `public virtual` used as low down the hierarchy as possible.,0,0.9929210543632507
546740638,387,Crisspl,2019-10-27T22:19:06Z,it is if i understand correctly what u mean. went with same approach as with `iasset : public virtual ireferencecounted`,0,0.9934239387512207
599044694,437,Przemog1,2020-03-14T11:36:39Z,hash function may not make sense at this moment :v,1,0.9439510703086853
601760716,437,Przemog1,2020-03-20T15:31:15Z,"now on my machine, in debug mode time to load sponza decreased from ~1:30 to ~0:45 since sponza uses only `quantizenormal2_10_10_10` functions `quantizenormal888` and `quantizenormal16_16_16` are not tested yet",0,0.9919135570526123
602526833,437,devshgraphicsprogramming,2020-03-23T11:07:52Z,"nice, we just now need to wrap up the cache in a class and allow for saving, loading and mergining caches (so that we can accelerate between runs)",0,0.6089138388633728
605352944,437,devshgraphicsprogramming,2020-03-27T23:18:00Z,merge my branch into yours first.... and lets get this mf-cker merged!,0,0.9868549108505249
606895396,437,devshgraphicsprogramming,2020-03-31T21:49:31Z,can you merge my `image_manipulator` branch into this?,0,0.9958820343017578
606896427,437,devshgraphicsprogramming,2020-03-31T21:52:03Z,did you merge rebase or something like that?? i'm seeing 209 modified files!?,-1,0.9618079662322998
607807416,437,devshgraphicsprogramming,2020-04-02T12:11:00Z,"not merging this with so many modified files, branch again, and hand-copy the changes",0,0.9751003384590149
496294794,301,devshgraphicsprogramming,2019-05-27T19:54:15Z,"should we have a `glsl` namespace for this? after all this is crap that will never get serialized to a .baw file, and `asset` doesn't really need this glsl include processing, glsl preprocessor, nor a compiler... only spir-v reflection/introspection and if spir-v reflection => you need glsl compiler as well (shaderc) then `asset` could depend on `core`, `io` (future `system`) and `glsl`",-1,0.9712349772453308
496303716,301,devshgraphicsprogramming,2019-05-27T20:52:27Z,btw equation for 2d biquadratic is [code block] which is actually identical to an average of the gradient of 4 bilinear surfaces around a pixel,0,0.9899765849113464
497109541,301,Crisspl,2019-05-29T21:07:34Z,and it's sufficient for continuity?,0,0.9944100975990295
497120388,301,devshgraphicsprogramming,2019-05-29T21:44:38Z,should be ok for generating derivative maps of the same resolution as the height map,0,0.9935865998268127
497441305,301,devshgraphicsprogramming,2019-05-30T18:46:33Z,can you post a screenie of the derivative mapping?,0,0.9951836466789246
497448374,301,Crisspl,2019-05-30T19:08:02Z,![a link],1,0.5592244863510132
497501250,301,devshgraphicsprogramming,2019-05-30T21:59:56Z,"nice screenshots, the derivative map needs some mip-mapping xd you should do a reduction in shared memory, you can recast the 18*18 smem buffer as a 16*16 with 16x16 wg size you can compute extra 4 mip levels from the base then you can make a multi-pass solution that reduces 4 mips at a time: initial run: 0 (already made by creating the map), 1, 2, 3, 4 iteration 1: 5,6,7,8 iteration 2: 9,10,11,12 ...etc... don't try to be clever with z-order curves and nice reductions as the functions will probably need to be updated at a certain point to use a nice kernel and modulate roughness maps when implementing toksvig aa in the future. but do add the `derivativemapcomputemipmap` functions to a built-in header. (disclaimer: there's probably no way to pass shared memory to a function, so requiring the user to define a macro might be in order)",1,0.8866732120513916
497504662,301,Crisspl,2019-05-30T22:13:32Z,currently `regeneratemipmaplevels()` is called after running derivative map gen cs. (but screenshot is done with bilinear filtering on derivative map sampler) do you know if there's a way to bind more than one mip level to one `image2d`? edit: i think not..,0,0.9934131503105164
497509704,301,devshgraphicsprogramming,2019-05-30T22:35:21Z,"irrlicht has the downside of only using the multi-bind for storage images, see faq point for 18 [a link] but yes, you can only attach a single mip-map you'd need 5 image bind points btw: don't use texture sampler as input for subsequent mip-map calculation passes, because you'll need 2 memory barrier bits instead of just one (gl_shader_image_access_barrier_bit). obviously you'd need all the barrier bits after the very last mipmap.",0,0.9814589023590088
497969168,301,devshgraphicsprogramming,2019-06-01T18:53:13Z,i changed the branch that this will get merged into. also if you want there's a new sponza with bump maps (instead of normal maps) all packed nicely in a zip [a link],0,0.993331253528595
635886138,483,devshgraphicsprogramming,2020-05-29T09:57:08Z,i want to get this merged soon.,0,0.9835203289985657
655763552,483,devshgraphicsprogramming,2020-07-08T21:19:39Z,closing temporarily.... reopen when ready for merge,0,0.9775266647338867
517946621,340,devshgraphicsprogramming,2019-08-03T18:51:57Z,"remember about this ""respect and use iassetloaderoverride during the loading process (v. important)"" i'm gonna be really anal about that.",0,0.6249859929084778
522160478,340,devshgraphicsprogramming,2019-08-16T21:42:03Z,"you have an astronomical amount of duplicate code, use templates, crtp or inhertance.",0,0.867946982383728
522377227,340,Przemog1,2019-08-19T01:08:07Z,"yeah, i had to redo a lot of things because of it",-1,0.746561586856842
546510688,390,devshgraphicsprogramming,2019-10-25T20:56:34Z,will review tomorrow,0,0.981977105140686
546522010,390,devshgraphicsprogramming,2019-10-25T21:37:56Z,"this is a remnant of a time before cmake, we used to have codeblocks project files in the repo. now we can allow `.layout` to be tracked.",0,0.9934072494506836
546583692,390,achalpandeyy,2019-10-26T08:45:10Z,thanks for the review. do you have a specific gui in mind?,1,0.8964408040046692
546585080,390,devshgraphicsprogramming,2019-10-26T09:04:02Z,"512x512 window. drop down list of bsdfs to use: - diffuse - custom (load file) diffuse bsdf and sample function shouldn't be too hard for you to put together. when ""custom"" gets chosen, then file open dialog pops up asking for a `.glsl` file",0,0.983852744102478
546586194,390,achalpandeyy,2019-10-26T09:20:56Z,"how about instead of a drop down let's just default to diffuse bsdf, then whenever the user presses the `load function definitions` button they'll be prompted to open a `.glsl` file? if going back to diffuse bsdf is important we can add a `reset` button as well. i feel like a drop down will introduce unnecessary complexity.",0,0.7463085651397705
546587712,390,devshgraphicsprogramming,2019-10-26T09:43:30Z,fine.,0,0.9628560543060303
546610856,390,achalpandeyy,2019-10-26T15:05:53Z,"function signatures in the fragment shader maybe wrong, it is just to build without errors. they'll be updated accordingly. next is the reset button.",0,0.9919624924659729
546620838,390,devshgraphicsprogramming,2019-10-26T16:59:01Z,i need to spec out the signatures of the functions for the bsdf for you,0,0.9933745265007019
546898419,390,achalpandeyy,2019-10-28T11:08:29Z,are the function signatures finalized?,0,0.9945076107978821
546902422,390,devshgraphicsprogramming,2019-10-28T11:20:43Z,on it,0,0.9889004230499268
546976779,390,devshgraphicsprogramming,2019-10-28T14:39:29Z,ok i stopped editing around the bsdf struct definitions,0,0.9935299754142761
546983454,390,achalpandeyy,2019-10-28T14:52:54Z,"the user is going to fill in the struct details in the loaded function definitions, right? so that means, things like `vdotl`, `ndotl` etc are not necessary, because different bsdfs will have different formulae and they might not require `vdotl` (for example) specifically for their evaluation.",0,0.993130624294281
546984386,390,achalpandeyy,2019-10-28T14:54:49Z,there is no `bsdfsample` struct anymore !,0,0.980822741985321
546985077,390,devshgraphicsprogramming,2019-10-28T14:56:10Z,"no, but i'm making those functions for you. its there [code block] then the compiler will optimize them away ;)",1,0.9527617692947388
546986412,390,achalpandeyy,2019-10-28T14:58:39Z,"so, they are not meant to be included in the fragment shader source code? i mean the structs.",0,0.9907472133636475
546986704,390,devshgraphicsprogramming,2019-10-28T14:59:16Z,"not the user's code, you will prepend all that.",0,0.9896326065063477
546987398,390,achalpandeyy,2019-10-28T15:00:44Z,"right. so, the user is expected to write function definitions in terms of these structs?",0,0.9907003045082092
546987550,390,devshgraphicsprogramming,2019-10-28T15:01:02Z,yep.,0,0.9245200753211975
547018162,390,devshgraphicsprogramming,2019-10-28T16:03:50Z,"getter functions [a link] you can either: ### a map each pixel in a cubemap to an incoming (light) direction. then produce a number of different cubemaps (cubemap array) for varying outgoing (view) direction. ### b assign one axis of a 2d image to the angle between the view and normal (`ndotv`) the other to the light and normal (`ndotl`). then produce a number of different textures (2d texture array) for varying `vdotl` values. i believe disney calls it brdf slices, (you'd just have to extend the axes from [0,1] to [-1,1] for the ndotb and ndotl) for anisotropic bsdf you can map your texture array layers to varying `vdotl` and `tdotv`. it will take you a bit of trigonometry to derive `tdotl` from the 4 other angles. ### notes if you have anisotropic bsdf then you need to come up with a way to turn a [0,array_count] sequence into different samples of 2d values.",0,0.9858493804931641
547031282,390,devshgraphicsprogramming,2019-10-28T16:31:37Z,the official bsdf signatures are now here [a link],0,0.9942822456359863
547542539,390,achalpandeyy,2019-10-29T17:35:09Z,"unfortunately, i ran out of time to work on this. i will not be able to make any significant progress for at least a month. if its urgent, please feel free to take it from here.",-1,0.9737669825553894
547799051,390,devshgraphicsprogramming,2019-10-30T08:55:31Z,no problem.,0,0.7675672173500061
557316397,390,devshgraphicsprogramming,2019-11-21T23:19:54Z,"you should move this work onto the `shader_pipeline` branch from my repository, since you're like 10-15% done, it would make sense to use the new api.",0,0.9942392110824585
438265237,172,manhnt9,2018-11-13T13:27:47Z,renderdoc v0.92 capture file. vertex input is currently empty. [a link],0,0.9942023158073425
438291286,172,manhnt9,2018-11-13T14:46:14Z,"debug build crashes. release build runs but vertex data is not uploaded. irrlicht engine version 1.8.3-baw linux 4.15.0-38-generic #41-ubuntu smp wed oct 10 10:59:38 utc 2018 x86_64 creating x window... using renderer: opengl 4.5.0 geforce gtx 1050 ti/pcie/sse2: nvidia corporation glsl version: 45.0 `================================================================= ==27492==` error: addresssanitizer: stack-buffer-overflow on address 0x7fffffffdc78 at pc 0x5555555af76c bp 0x7fffffffd520 sp 0x7fffffffd510 read of size 8 at 0x7fffffffdc78 thread t0 #0 0x5555555af76b in unsigned int irr::video::streamingtransientdatabufferst >::multi_place<>(std::chrono::duration > const&, unsigned int, void const* const*, unsigned int*, unsigned int const*, unsigned int const*) (/home/manh/irrlichtbaw/examples_tests/33.draw3dline/bin/draw3dline+0x5b76b) #1 0x5555555aeff8 in unsigned int irr::video::streamingtransientdatabufferst >::multi_place (unsigned int, void const* const*, unsigned int*, unsigned int const*, unsigned int*&&) (/home/manh/irrlichtbaw/examples_tests/33.draw3dline/bin/draw3dline+0x5aff8) #2 0x5555555ae85a in unsigned int irr::video::streamingtransientdatabuffermt , std::mutex>::multi_place (unsigned int&&, void const* const*&&, unsigned int*&&, unsigned int*&&, unsigned int*&&) (/home/manh/irrlichtbaw/examples_tests/33.draw3dline/bin/draw3dline+0x5a85a) #3 0x5555555aa026 in irr::ext::draw::cdraw3dline::draw(float, float, float, float, float, float, float, float, float, float) /home/manh/irrlichtbaw/ext/draw/cdraw3dline.cpp:51 #4 0x5555555bc2f5 in main /home/manh/irrlichtbaw/examples_tests/33.draw3dline/main.cpp:49 #5 0x7ffff4e72b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96) #6 0x5555555a8a09 in _start (/home/manh/irrlichtbaw/examples_tests/33.draw3dline/bin/draw3dline+0x54a09) address 0x7fffffffdc78 is located in stack of thread t0 at offset 1256 in frame #0 0x5555555a9797 in irr::ext::draw::cdraw3dline::draw(float, float, float, float, float, float, float, float, float, float) /home/manh/irrlichtbaw/ext/draw/cdraw3dline.cpp:42 this frame has 23 object(s): [32, 33) ' ' [96, 100) ' ' [160, 164) ' ' [224, 228) ' ' [288, 292) ' ' [352, 356) ' ' [416, 424) ' ' [480, 488) ' ' [544, 552) ' ' [608, 616) ' ' [672, 680) ' ' [736, 744) ' ' [800, 808) ' ' [864, 872) ' ' [928, 936) ' ' [992, 1000) ' ' [1056, 1064) ' ' [1120, 1128) ' ' [1184, 1216) ' ' [1248, 1256) 'linedata' <== memory access at offset 1256 overflows this variable [1312, 1336) ' ' [1376, 1424) ' ' [1472, 1528) 'vertices' hint: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext (longjmp and c++ exceptions *are* supported) summary: addresssanitizer: stack-buffer-overflow (/home/manh/irrlichtbaw/examples_tests/33.draw3dline/bin/draw3dline+0x5b76b) in unsigned int irr::video::streamingtransientdatabufferst >::multi_place<>(std::chrono::duration > const&, unsigned int, void const* const*, unsigned int*, unsigned int const*, unsigned int const*) shadow bytes around the buggy address: 0x10007fff7b30: f2 f2 f2 f2 f2 f2 00 f2 f2 f2 f2 f2 f2 f2 00 f2 0x10007fff7b40: f2 f2 f2 f2 f2 f2 00 f2 f2 f2 f2 f2 f2 f2 00 f2 0x10007fff7b50: f2 f2 f2 f2 f2 f2 00 f2 f2 f2 f2 f2 f2 f2 00 f2 0x10007fff7b60: f2 f2 f2 f2 f2 f2 00 f2 f2 f2 f2 f2 f2 f2 00 f2 0x10007fff7b70: f2 f2 f2 f2 f2 f2 00 f2 f2 f2 f2 f2 f2 f2 00 f2 =>0x10007fff7b80: f2 f2 f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2 00[f2] 0x10007fff7b90: f2 f2 f2 f2 f2 f2 00 00 00 f2 f2 f2 f2 f2 00 00 0x10007fff7ba0: 00 00 00 00 f2 f2 f2 f2 f2 f2 00 00 00 00 00 00 0x10007fff7bb0: 00 f2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0x10007fff7bc0: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 0x10007fff7bd0: 01 f2 f2 f2 f2 f2 f2 f2 f8 f2 f2 f2 f2 f2 f2 f2 shadow byte legend (one shadow byte represents 8 application bytes): addressable: 00 partially addressable: 01 02 03 04 05 06 07 heap left redzone: fa freed heap region: fd stack left redzone: f1 stack mid redzone: f2 stack right redzone: f3 stack after return: f5 stack use after scope: f8 global redzone: f9 global init order: f6 poisoned by user: f7 container overflow: fc array cookie: ac intra object redzone: bb asan internal: fe left alloca redzone: ca right alloca redzone: cb ==27492==aborting [1] + done /usr/bin/gdb --interpreter=mi --tty=${dbgterm} 0 /tmp/microsoft-miengine-out-05hcx3eq.3i6",0,0.8296421766281128
438302874,172,devshgraphicsprogramming,2018-11-13T15:17:41Z,you were doing a double free and a double alloc with no parameters,0,0.9862757921218872
438336961,172,devshgraphicsprogramming,2018-11-13T16:28:37Z,is this ready for merging? (i.e. does address sanitizer moan about anything else other than x11 ),0,0.9934547543525696
438346581,172,manhnt9,2018-11-13T16:53:15Z,one comment on namespace left: [a link] tomorrow i'll check in debug build and confirm.,0,0.9948464632034302
438527361,172,manhnt9,2018-11-14T03:46:13Z,"quit message received. draw3dline: ../../include/irr/core/alloc/generalpurposeaddressallocator.h:400: void irr::core::generalpurposeaddressallocator<_size_type, allocstrategy>::free_addr(irr::core::generalpurposeaddressallocator<_size_type, allocstrategy>::size_type, irr::core::generalpurposeaddressallocator<_size_type, allocstrategy>::size_type) [with _size_type = unsigned int; allocstrategy = irr::core::impl::generalpurposeaddressallocatorstrategy ; irr::core::generalpurposeaddressallocator<_size_type, allocstrategy>::size_type = unsigned int]: assertion `bytes+freesize<=allocstrategy::buffersize' failed.",0,0.9870645999908447
438527674,172,manhnt9,2018-11-14T03:48:25Z,"about the performance, will this be more helpful? - enqueue lines in a core::vector - draw all lines at once and clear so users can add lines to a buffer and issue only one draw call at some point.",0,0.9879306554794312
438529714,172,manhnt9,2018-11-14T04:02:38Z,git pull --rebase & push to apply your newest commits re-notify those commits,0,0.9936849474906921
438576347,172,devshgraphicsprogramming,2018-11-14T08:19:58Z,"draw3dline: ../../include/irr/core/alloc/generalpurposeaddressallocator.h:400: void irr::core::generalpurposeaddressallocator<_size_type, allocstrategy>::free_addr(irr::core::generalpurposeaddressallocator<_size_type, allocstrategy>::size_type, irr::core::generalpurposeaddressallocator<_size_type, allocstrategy>::size_type) [with _size_type = unsigned int; allocstrategy = irr::core::impl::generalpurposeaddressallocatorstrategy ; irr::core::generalpurposeaddressallocator<_size_type, allocstrategy>::size_type = unsigned int]: assertion `bytes+freesize<=allocstrategy::buffersize' failed. that looks like an issue on my side",0,0.9901042580604553
438576973,172,devshgraphicsprogramming,2018-11-14T08:22:15Z,"i would advocate passing a begin and end iterator to a list of positions for drawing multiple lines, i wouldn't mess around with enqueues etc.",0,0.9819466471672058
618454857,478,devshgraphicsprogramming,2020-04-23T15:13:28Z,nuke this file from the repo [a link],0,0.9938932657241821
618464570,478,devshgraphicsprogramming,2020-04-23T15:28:13Z,i guess then that we don't need all my old `*_pch.h` and `pch.h` headers that i've curated by hand all these years?,0,0.9780502915382385
618466002,478,devshgraphicsprogramming,2020-04-23T15:30:31Z,"also get rid of the `irrlichtserver` target, we haven't linked anything with that in months, and i'm working on making the opengl functions be loaded from the .dll/.so at runtime so that we can handle a failure of gpu acceleration nicely in server applications.",0,0.9936341047286987
623120309,478,devshgraphicsprogramming,2020-05-03T14:40:06Z,"let me know when both pch and relwtihdebinfo work on msvc, then i can merge",0,0.9934216141700745
625877799,478,devshgraphicsprogramming,2020-05-08T15:43:13Z,"ok i guess you're at the stage where you can test this with clang, minggw or linux clang/gcc",0,0.9819029569625854
626562802,478,devshgraphicsprogramming,2020-05-11T08:45:49Z,open this pr against criss' `mitsuba` branch,0,0.9949600696563721
626966260,478,Przemog1,2020-05-11T21:10:44Z,i'll clean it up,0,0.9336402416229248
627031427,478,devshgraphicsprogramming,2020-05-12T00:09:46Z,can this get merged into criss' branch instead?,0,0.9946129322052002
597322956,431,devshgraphicsprogramming,2020-03-10T21:19:04Z,nice stuff but needs an example of usage.,1,0.9289592504501343
600142922,431,devshgraphicsprogramming,2020-03-17T15:44:43Z,you need to compile this and test it works,0,0.9929628968238831
601464444,431,devshgraphicsprogramming,2020-03-19T23:36:02Z,nice stuff,1,0.9890707731246948
602535765,431,devshgraphicsprogramming,2020-03-23T11:28:37Z,"ok, now make sure new files are only generated in the binary/build directory (dont want changes in source dir). you will then need to add the header to the install target (so that it get copied properly) etc. see how we treat `buildconfigoptions.h` which is another dynamically generated header. take the `src/irr/builtin/shader1.txt` and turn it into `include/irr/builtin/shader1.txt`, this is because that if we don't choose to embed the resources, they will need to be added to the install target. also make the `include` be implicit in the python script. finally instead of having `src/irr/builtin/shader1.txt` as the test case (remove it), take some of the already existing c++11 rawstring shaders in builtin loaders (such as mtl or some in iassetmanager.cpp) and move them to their `.glsl/.frag/.vert/.comp` respective files in `irr/builtin/` (have the builtin path be the same as the path for cache insertion - remember the `include` is implicit!).",0,0.9931043982505798
602538214,431,devshgraphicsprogramming,2020-03-23T11:34:30Z,my old example for loading shaders [code block],0,0.9939700365066528
604965823,431,Hazardu,2020-03-27T12:10:51Z,i will create a different branch with just intended changes,0,0.9920703768730164
621792525,455,devshgraphicsprogramming,2020-04-30T12:08:59Z,"you need to make it so you install everything in the `irr/builtin` directory if embed_resources is false just like this installs the headers [a link] test it, you should see the builtins copied to somewhere `c:\program files` (whereever irrlichtbaw install prefix is) but preferably not have them install if we've configured the lib not to embed",0,0.9948683977127075
368266622,39,devshgraphicsprogramming,2018-02-24T22:51:30Z,"ok, so a few remarks: a) interestingly enough, supposedly, lzma has roughly the same decompression speed as lz4 b) i suggest hashing of post-encryption and post-compression data, has is there only to check blob was not corrupted by the disk i/o errors",0,0.9791959524154663
368269180,39,devshgraphicsprogramming,2018-02-24T23:38:03Z,"if the loading is slow, then maybe we should up the thresholds for compression `bloblz4encrthresh(4096), bloblzmaencrthresh(32768)` to something higher? i also think that compression level parameter and algo should be exposed in writeprops. also can you check if the hash function in lz4/xxhash is the same one as in coreutil.h? finally i don't think you should worry about getting an upper bound on compression size, as we already threshold to compress stuff larger than 4k and 32k and the max stack we can take without crashing people's programs is 16k. so it's safe to assume to always allocate on the heap and not worry about doing things on the stack for compressed blobs.",0,0.9825268387794495
368276867,39,Crisspl,2018-02-25T02:10:55Z,"no, it's something different, not even one-call. a few functions forming some ""hashing pipeline"".",0,0.959416925907135
368304067,39,devshgraphicsprogramming,2018-02-25T12:08:06Z,from what i gathered by reading the source of xxhash is that it can be done in bulk or streamed mode. bulk consists of 1 function -- `xxh64 ()`,0,0.9926667809486389
368347679,39,Crisspl,2018-02-25T21:44:35Z,"here comes encryption with a few notes as for now: * no mac checking yet * i didn't really have a neat idea about how to do ""no password"" thing, so here's kinda a little monster. please look closer at this, maybe it is ok... * i'll also have to correct that now passwords **must** be 16 characters long. i guess passwords should be able to be any length <=16? about macs: i had an idea of making another block in our format (before block of offsets for example; it will be 0-size block when no blob is encrypted) and also another few bytes for mac-count. i'll have to spend a little more time to tell how complicated it will be, but for now i think it'd work fine.",-1,0.44463977217674255
368349438,39,devshgraphicsprogramming,2018-02-25T22:06:16Z,"we should not care about mac as we don't care if someone is trying to tamper with our data, like whats the worst that can happen? a dick will show up as a model? like we dont care about rejecting other content, we only care about that content being protected. if we really gave a crap about real security then we'd use aes256. also i'm fine with requiring 16 char passwords, but if you're not then aesgladman, internally does some well-defined method of generating a passphrase (16byte) from hashing a password, it even has its own international spec number.",-1,0.8490518927574158
368684937,39,devshgraphicsprogramming,2018-02-26T23:12:11Z,also now the convert2baw tool will now have to take a password argument :),0,0.9939369559288025
369041536,39,devshgraphicsprogramming,2018-02-27T21:59:20Z,added some comments in the latest push,0,0.9926847219467163
369378837,39,devshgraphicsprogramming,2018-02-28T20:52:53Z,"also can we have an option to specify whether to save texture paths relative to the input or output files in the convert2baw tool? (by implication also have this option in writeprops, i.e. if non 0 length relative path exists then save relative to that path instead of the output file)",0,0.9952684044837952
364736319,36,devshgraphicsprogramming,2018-02-11T09:18:53Z,"hmm.. i think the reason why you don't see the skinned mesh is because finalize() (in the x loader) calculates the bounding boxes of the bones and the mesh. but i am unsure of what else finalize() does, so we need to review it to see if it doesn't overwrite the bone hierarchies etc.",0,0.9714988470077515
365015688,36,Crisspl,2018-02-12T18:26:58Z,"thanks for the cr :) here's part of the docs. again i'll have very little time for a few following days, but docs will be coming in small batches. there's a few params empty of which i wasn't sure about. i'll ask about them when i gather more unsureness.. :d",1,0.9964040517807007
365018804,36,Crisspl,2018-02-12T18:36:04Z,"but then i'd have to cast to it while calling in the switch what would be kinda problematic. it is doable of course, but worth it?",0,0.7316538691520691
365043721,36,devshgraphicsprogramming,2018-02-12T19:59:38Z,"can you merge your pull against my master , because as you start commenting, you will make conflicts",0,0.9673441052436829
365055629,36,Crisspl,2018-02-12T20:43:43Z,"can do. also about *serializable base class: there's a problem with mesh/skinned-mesh inheritance from variablesizeblobserializable (iskinnedmesh inherits imesh), same with mesh buffers.",0,0.9921150803565979
365240237,36,devshgraphicsprogramming,2018-02-13T11:31:22Z,"ok, lets keep it the way it is. well since you need the object in order to serialize it, there is no need for the serialize method to be static. since there is no need for the serialize method to be static, then there is no need for static-polymorphism. since there is no need for static-polymorphism, the serializable class doesn't need to be a template class with a curiously recurring... bla bla bla hence the serializable class can be an abstract data type with a single public method, a pure virtual function `serializetoblob.` (which yes, i know requires us to override the function in every class inheriting from serializable). but it could have a protected utlity template method which does exactly what the current `serializetoblob` method does right now (have the utility method be a template, not the entire class). at this point overriding the serializetoblob function would become just an exact copy-paste.",0,0.8832473158836365
365292639,36,devshgraphicsprogramming,2018-02-13T15:01:31Z,"yes, and now every blob gets loaded once and an empty object is made for every blob in the file, only to delete the objects which do no get referenced by any other one. a stack of dependencies allows us to read 10 actually needed blobs out of 1000. also now the code loads the blob from the file twice (once for instantiateemptywithoutdeps and secondly for finalize), i believe?",0,0.9890339374542236
365346244,36,Crisspl,2018-02-13T17:45:49Z,"ok, i didn't even consider posiblity of blob not referenced by any other. why would there be such? are you talking about using this as an archive file you mentioned some time? i'll get it done later ! yes, unfortunately there's the cost of simplicity :/",-1,0.9961537718772888
365741208,36,Crisspl,2018-02-14T20:52:01Z,"there it is, but i can't go below two loads of blob unless we keep all the needed blobs in memory (that would also mean heap only i think) through the whole process of loading... which is not our goal either.",0,0.9557949304580688
365894604,36,devshgraphicsprogramming,2018-02-15T11:03:37Z,"hmm.. obviously reduction of disk io > reducing memory fragmentation. so the heap it is. certain things can always be loaded and finalized at once, like icpubuffers and textures, so heap not necessary (any object that has 0 dependencies). other things, yes, i guess the heap it is then. obviously lets keep the beautiful createonstack function, but for heap allocation lets pass the stackpointer to be null. one last thing before i approve the pull request, can we rename `source/irrlicht/blobsloading.cpp` to something more conformant to our standards (camelcase, etc.)?",0,0.928851842880249
366468019,36,devshgraphicsprogramming,2018-02-17T20:10:04Z,ok... i shall push my latest stuff and then we merge.,0,0.9858356714248657
551302598,399,devshgraphicsprogramming,2019-11-07T22:49:47Z,generally speaking most of the encodes need a `core::clamp`,0,0.9910030364990234
551983051,399,devshgraphicsprogramming,2019-11-08T20:43:57Z,"actually its the clamp that should have the epsillon, its because lots of npot numbers are not exactly representable in iee754, and floats round down. should be on the clamp, because it affects the clamp (make sure that i.e. 2^32-1 doesn't truncate lower) but you are correct that floats truncate towards zero, so the clamp minimums less than 0.0 should have -0.4 added not 0.4 yeah ""scaled"" formats need a larger minimum in the clamp. ""norm"" stays as is.",0,0.9912177920341492
554623477,399,AnastaZIuk,2019-11-16T10:10:47Z,"[a link] so norm shouldn't have an epsilon at minimum? i mean, if there is for instance uint8_t norm, min = 0, max = 255 + epsilon",0,0.9929425716400146
554634852,399,devshgraphicsprogramming,2019-11-16T12:54:50Z,norm and scaled clamp to the same values (because they are stored in the same integers) the only difference is that the `double` value gets multiplied by the max positive integer value before the clamp for norm and there is no mulitplication for scaled before the clamp,0,0.9890594482421875
554768164,399,AnastaZIuk,2019-11-17T17:34:37Z,i'm done if there is no function mentioned here [a link] about,0,0.9883584380149841
555236428,399,devshgraphicsprogramming,2019-11-18T22:21:10Z,does it build?,0,0.9921635389328003
555361839,399,AnastaZIuk,2019-11-19T06:54:35Z,"section with encode builds, status: to merge",0,0.9953014850616455
661902216,515,Hazardu,2020-07-21T14:39:58Z,"something is wrong with the [a link], when converting to a gpu mesh, the specialized shader was a nullptr, and the console during runtime printed out this errors [code block] what is a good extension for highlighting errors glsl in ide?",0,0.948931872844696
661915869,515,devshgraphicsprogramming,2020-07-21T15:03:21Z,why did you add `testgeomshader.geom` to builtin !? also revert all changes to example 06 and the media folder,0,0.9910447597503662
670628328,515,devshgraphicsprogramming,2020-08-07T17:33:42Z,"did you forget to commit some files, such as the geometry shader?",0,0.9883145093917847
574636984,412,devshgraphicsprogramming,2020-01-15T12:23:55Z,so gli does not support tga?,0,0.9778337478637695
574729277,412,AnastaZIuk,2020-01-15T16:06:19Z,actually it seems to me it does [a link] so what is the decision?,0,0.9926194548606873
574733443,412,AnastaZIuk,2020-01-15T16:15:23Z,should i get rid of the loader and replace it with gli tga loader?,0,0.9899137020111084
574796517,412,devshgraphicsprogramming,2020-01-15T18:43:40Z,yes ofc you should as long as you can get the same functionality out of it!,0,0.9245122075080872
575618865,412,AnastaZIuk,2020-01-17T13:08:36Z,"checked, there is no opportunity to use gli for loading tga - tga loader will be refactored",0,0.9943488240242004
580462524,412,devshgraphicsprogramming,2020-01-30T21:13:30Z,tell me when done and tested.,0,0.9912990927696228
581176726,412,AnastaZIuk,2020-02-02T20:59:55Z,"done and tested, but i had to insert some code into some switch cases, it looks awful, so i will do a small clean code refactor tomorrow and then it will be ready to merge",-1,0.9858531951904297
581580471,412,AnastaZIuk,2020-02-03T19:34:07Z,"convertcolor needed patching with default values on texels, but nut sure about alpha. afaik there are some rules defining how to put default alpha values when inteeger or normalized etc",0,0.9515409469604492
581863922,412,devshgraphicsprogramming,2020-02-04T11:25:44Z,"default value is (0,0,0,1) whatever channel is not defined, you take from that default vector.",0,0.9938482642173767
582035253,412,devshgraphicsprogramming,2020-02-04T17:55:26Z,are we done?,0,0.9821861386299133
581043610,416,AnastaZIuk,2020-02-01T16:02:25Z,"so i noticed functions responsible for converting into new one version up should be moved to legacy section. where directly? because we have a place where there are some namespaces for legacy stuff, but you have written about loader cpp as i remember",0,0.9870169758796692
581393892,416,devshgraphicsprogramming,2020-02-03T12:35:57Z,you want to provide new struct definitions (patch) for `skinnedmeshblobv3` and `meshblobv3`,0,0.9943015575408936
581400235,416,devshgraphicsprogramming,2020-02-03T12:54:19Z,"[a link] this is the resting place for v2 function and struct definitions (that will not be simply typedef'ed/aliased into being v3), you can delete as much as you want (like asset instantiation) as the loader only needs the definitions to convert from v2 to v3.",0,0.9951153993606567
581400684,416,devshgraphicsprogramming,2020-02-03T12:55:30Z,"you usually only need the v2 struct, and the conversion is done manually.",0,0.9925645589828491
581400915,416,devshgraphicsprogramming,2020-02-03T12:56:07Z,i'd make another .cpp file in [a link] just for the implementations of the loader's file-convert-up functions,0,0.9927369952201843
554073855,401,devshgraphicsprogramming,2019-11-14T20:51:11Z,"an overarching idea for .baw format patching, we will store the ewpf_mesh_is_right_handed flag (1 bit) in the meshbufferblobv2 (we need to bump the version). now if that flag is present in the .baw file's meshbuffer blob, then we know that mesh is right-handed, if its not then its left-handed (like it has been now). if right-handed flag in blob does not match the right-handed loader parameter flag when loading the asset, then flip position and normal.",0,0.991252601146698
554666136,401,AnastaZIuk,2019-11-16T19:19:19Z,"well, the result loading, writing and loading is [a link] it seems to me that winding order should be changed to solve it, so simply exchange vertex1 with vertex3, but i think it **shouldn't** be applied actually, something went wrong, didn't it? the code responsible for loading: [code block] loaders assume that every resource is loaded as input in righhanded, but the default is lefthanded, so flipping is supplied if there is no righthanded flag set while loading. i tell the writer that it has to save it as righthanded and loading it should be same as loading at begging, but winding order error occours **edit** for sure changing vertex1 with vertex3 is _valid_, because cstlloader changes it as well due to winding order :d ** it can be merged, i'm done and everything has been tested thoroughly**",0,0.9856773614883423
554909084,401,devshgraphicsprogramming,2019-11-18T08:33:21Z,there's also a ply writer todo,0,0.9901347756385803
555105925,401,AnastaZIuk,2019-11-18T16:52:42Z,done and tested,0,0.9819189310073853
555236649,401,devshgraphicsprogramming,2019-11-18T22:21:52Z,"builds, works and is mergable?",0,0.9926329255104065
555354660,401,AnastaZIuk,2019-11-19T06:28:59Z,status: to merge,0,0.9930816292762756
480516066,244,devshgraphicsprogramming,2019-04-06T16:09:42Z,i think you've missed out on aesgladman [a link] and furthermore does the cmakelists script automatically update the submodules + pull the latest version of openssl 1.0.2 ?,0,0.9906514883041382
480516346,244,Crisspl,2019-04-06T16:12:51Z,"see commit message just working on it, should be today",0,0.9923573732376099
480519253,244,devshgraphicsprogramming,2019-04-06T16:51:19Z,"i understand. regarding, openssl can you do `#ifdef` to detect version 1.0.2 and make the code work both with 1.0.2 and 1.1.1 ? the ver 1.0.2 branch should still be our default submodule.",0,0.9905427098274231
480782229,244,devshgraphicsprogramming,2019-04-08T10:49:41Z,you're getting linker errors on the examples because the static library of openssl is not linked into the project because the build cmake command is not normal (dependency and location of the static library file not picked up automatically).,0,0.9881361722946167
480783917,244,Crisspl,2019-04-08T10:55:33Z,i'm not that stupid :p they're linked and i checked and the cmake code for this is in source/irrlicht/cmakelists,1,0.9888342022895813
480789414,244,devshgraphicsprogramming,2019-04-08T11:14:50Z,but wouldn't they need to be linked to every example as well?,0,0.9887880682945251
480790010,244,Crisspl,2019-04-08T11:16:54Z,the `interface` does that,0,0.9946967363357544
480792397,244,devshgraphicsprogramming,2019-04-08T11:25:28Z,"hmm, ok i guess i'll shut up now",0,0.522850513458252
480845013,244,devshgraphicsprogramming,2019-04-08T14:03:20Z,did you add the custom command to cmake that automatically updates the submodules? p.s. what did you have to change in openssl to make it compile?,0,0.9959524869918823
480890527,244,Crisspl,2019-04-08T15:52:47Z,"no, and won't until this shit builds. actually imo it's completely useless, but ofc you'll get it if you want [a link] it gave weird errors since `openssldir` was some windows-like path like `d:\....` and so it needed string-quotes. so something like this needed: [code block]",-1,0.9811990261077881
480894488,244,devshgraphicsprogramming,2019-04-08T16:02:50Z,"maybe `./configure` with `--openssldir=""na""` or set `--openssldir` identical to `--prefix` p.s. then no need to modify openssl source.",0,0.9928735494613647
481031152,244,Crisspl,2019-04-08T22:27:11Z,"actually it needs string-quotes regardless of its value, i don't why it is like that in release version of openssl code",0,0.9888045191764832
481038466,244,devshgraphicsprogramming,2019-04-08T23:00:48Z,maybe submit a pull request to them ;),0,0.9866071939468384
481154338,244,Crisspl,2019-04-09T08:27:21Z,"well, its hard to believe that it's not my fault in some way :p",1,0.9445015788078308
481170954,244,devshgraphicsprogramming,2019-04-09T09:15:05Z,"do it, at least they will tell you what you've done wrong.",-1,0.6237839460372925
481581780,244,devshgraphicsprogramming,2019-04-10T08:00:38Z,about the git update submodules + git pull openssl [a link],0,0.9950008988380432
481588355,244,devshgraphicsprogramming,2019-04-10T08:17:42Z,todo: - [ ] submit a pr to openssl project - [ ] irrcompileconfig as cmake configured headers - [ ] gcc warnings (or at least make it build on linux again) - [x] cmake update submodules target - [x] cmake pull latest openssl 1.0.2 target,0,0.9947547912597656
481655851,244,Crisspl,2019-04-10T11:43:00Z,i think it could/should be done with [a link] (executes before generation of makefiles/projects). it also makes sense since all the submodules must be there before cmake starts looking for their sources.,0,0.9873710870742798
481658519,244,devshgraphicsprogramming,2019-04-10T11:52:37Z,"ok i might do it then, i'm fixing my master branch to compile on linux right now",0,0.9703430533409119
481663179,244,devshgraphicsprogramming,2019-04-10T12:07:41Z,do you expect this to break on msvc if i fetch the latest libshaderc ?,0,0.9935368895530701
481664962,244,Crisspl,2019-04-10T12:13:14Z,"no, actually i think i have latest shaderc locally but not sure now",0,0.9787566661834717
481665218,244,devshgraphicsprogramming,2019-04-10T12:13:57Z,"oh ok, because they fixed the `touch` thing on linux",0,0.9074018597602844
481666628,244,Crisspl,2019-04-10T12:18:16Z,"oh, yea, you can just remove the line mentioning issue about this in root cmakelists.txt and that would be all i think. anyway.. shouldn't break anything even if you'd left it",0,0.9647389650344849
481668905,244,devshgraphicsprogramming,2019-04-10T12:25:32Z,"btw, i got this beauty while configuring [code block] obvs, `repository_root` is my full filesystme path",0,0.545590877532959
481898810,244,Crisspl,2019-04-10T22:59:59Z,just a rename definitions->compile_definitions is needed. apparently the pch script is a little old [a link] [a link],0,0.9930329322814941
482027160,244,devshgraphicsprogramming,2019-04-11T08:50:01Z,"awesome, then accept my pull request and do it ;) also my pch on linux can't find headers (errors out at `#include ""aabbox3d.h""` when building the pch) so linux doesn't build",1,0.9960706233978271
636839100,499,devshgraphicsprogramming,2020-06-01T12:42:44Z,"paste input and output results here, i need to see how this denoises",0,0.9929239749908447
637098547,499,AnastaZIuk,2020-06-01T20:59:11Z,all the inputs: [a link] and outputs: [a link],0,0.9947964549064636
638229611,499,AnastaZIuk,2020-06-03T14:19:37Z,"done, to merge",0,0.9939946532249451
673685287,524,devshgraphicsprogramming,2020-08-13T20:08:26Z,fixed ggx for you [a link] now do beckmann,0,0.984420895576477
719623518,552,Hazardu,2020-10-30T15:32:51Z,"pr put on hiatus, after optix fixes their bugs tiled download will be added",0,0.9500694870948792
719981181,552,devshgraphicsprogramming,2020-10-31T20:02:37Z,post the link to the nvidia forum bugreport you made,0,0.994470477104187
361208591,14,devshgraphicsprogramming,2018-01-29T10:50:41Z,"overall great, but why pack smaterial? i can understand smateriallayer as the interface is already finalized.",1,0.8062705397605896
361209837,14,devshgraphicsprogramming,2018-01-29T10:55:36Z,"another question, why do we create separate types for: irr::core::blob::e_blob_type::ebt_attr_buffer, irr::core::blob::e_blob_type::ebt_idx_buffer ? a data buffer is a data buffer, and it should remain so without any type distinctions",0,0.9785593152046204
361212901,14,Crisspl,2018-01-29T11:08:16Z,"(also stexturesamplingparams got packed). to be able to just copy object data without worrying about alignment on various compilers (mesh exported by compilation on compiler a could be not importable on compiler b compilation). am i missing something or it''s just worthless? separate blob types for index and attribute buffer - i just thought it would be useful to know what kind of buffer is it, but don't really know why yet. as for now i don't have any good reason. remove this (leave only ebt_attr_buffer)?",0,0.8848592042922974
361220332,14,devshgraphicsprogramming,2018-01-29T11:41:23Z,"ok we can try with packing (but i thought that padding and packing is specified par the c++ standard), but i need to do a code review if it won't fuck something up in baw :) as for ebt_attr_buffer, i'd have it as ebt_raw_data_buffer",1,0.9644305109977722
361227188,14,Crisspl,2018-01-29T12:13:03Z,"from what i know, padding is not standardized",0,0.9825248122215271
361228805,14,devshgraphicsprogramming,2018-01-29T12:19:52Z,"sorry i confused opengl glsl packing (std430, etc.) in that case we need some static_asserts to check the offset alignment of any sse3 based members and force packing+16byte alignment on smaterial",-1,0.9787002205848694
361261363,14,devshgraphicsprogramming,2018-01-29T14:26:28Z,"on another note, maybe we should change + enum e_blob_compression_type + { + ebct_none = 0, + ebct_lz4, + ebct_lzma, + ebct_count + }; to + enum e_blob_coding_type + { + ebct_raw = 0, + ebct_aes128_gcm, + ebct_lz4, + ebct_lz4_aes128_gcm, + ebct_lzma, + ebct_lzma_aes128_gcm, + ebct_count + }; for added possibility of password protection in the future. then obviously the bitfield ""uint64_t compressiontype : 2;"" would have to be expanded to 3",0,0.9901798963546753
361325597,14,devshgraphicsprogramming,2018-01-29T17:42:40Z,"another note... its not good to have private members holding data of the file to be written: core::array m_headers; core::array m_offsets; this will hamper multi-threading our asset loading, as having two or more concurrent writemesh(...) calls will use the same private members. instead i'd make a cbawmeshwriter::ssavecontext class (with no default ctors) to hold these. p.s. suggestion, make uint32_t genheaders(icpumesh * _mesh); a template function, and add /*genallheaders(const std::vector assetstosave);*/ , as afterall we will use this to save more than one mesh at once and more assets than just meshes. p.p.s. on top of that i would make the ""std::set countedbuffers;"" context wide!",0,0.9756495952606201
361342488,14,devshgraphicsprogramming,2018-01-29T18:37:05Z,"final note... for a imeshbuffer to display its necessary for it to have a formatdescriptor set. so in genheaders you can just do: if (!meshbuffer || !desc) continue; also one imeshdataformatdesc can be reused by multiple meshes (trust me they not only can but are in baw) and if you're really mental you can attach a imeshbuffer twice or more times to an imesh. hence instead of an ""std::set "", i'd use an ""std::set "" and just keep track of everything that way. afterall a pointer is a pointer, and you will get no collisions!",0,0.9498111009597778
361350792,14,Crisspl,2018-01-29T19:03:50Z,"ok, quick fix, thanks! about multithreading thing and others i will talk to you later",1,0.9930559992790222
375916890,49,devshgraphicsprogramming,2018-03-24T19:03:13Z,since we're porting to c++11 then it would be useful to implement fw_gettimestampns() with std::chrono,0,0.9933009147644043
375920033,49,devshgraphicsprogramming,2018-03-24T19:50:02Z,"you've taken out switchtothread() / pthread_yield() from my busywait loops, need yield back. although you could add a for (uint32_t i=0; (!predicate)&&i<kbusyspinsbeforeyield; i++) loop of kbusyspinsbeforeyield (preferrably 1000) iterations without a yield before the while with a yield",0,0.9938674569129944
408365446,49,devshgraphicsprogramming,2018-07-27T09:29:08Z,"if we can merge the latest `master` into this pull request branch, fix the outstanding issues, then we could merge this pull request. then we could switch back and forth between legacy and c++11 implementation.",0,0.9941369295120239
485897397,265,devshgraphicsprogramming,2019-04-23T17:24:08Z,mention #155,0,0.9932461977005005
485985193,265,devshgraphicsprogramming,2019-04-23T21:39:58Z,"nice, but we need to review that everything that needs to be configurable/installable, is so. my worry is that some of the `-d` defines might trip up projects using irrbaw [a link]",0,0.8735120892524719
486627449,265,devshgraphicsprogramming,2019-04-25T11:04:20Z,you need to merge my master pr into your master as well as cherrypick a few commits from my srgb branch ('s linux fixes),0,0.9955132603645325
486797560,265,devshgraphicsprogramming,2019-04-25T18:59:02Z,anything else we need to do?,0,0.9915955662727356
486800032,265,Crisspl,2019-04-25T19:06:17Z,"if i remember correctly, you wanted to have `_irr_server` and `_irr_debug` as ""installables"". and i don't really know how to do this especially in multi-config ides.",0,0.9543009400367737
486818880,265,devshgraphicsprogramming,2019-04-25T20:05:57Z,does `_irr_server` influence anything on the outside?,0,0.9933797121047974
486833780,265,devshgraphicsprogramming,2019-04-25T20:52:49Z,did you add the `$(outdir)` msvc debug working directory cmake option to the make_example cmake macro/function? [a link],0,0.9961615800857544
486848556,265,devshgraphicsprogramming,2019-04-25T21:42:53Z,"i think we covered `_irr_server` in our private chat. for different configurations (release vs. debug) we obviously install to different paths/with different names. so to refresh, recap and adjust: out default `cmake_install_prefix = ./install/$platform` (double check this) **new: always add `/debug` to cmake_install_prefix if the build type is debug** with usual default of `/usr/local` this would evaluate to `./install/$platform` and `./install/$platform/debug` respectively. then we install as follows: 1. headers go into `$cmake_install_prefix/include` 1. built libraries go into `$cmake_install_prefix/lib` for system-wide install, this expands to debug lib -> /usr/local/debug/lib/ debug headers -> /usr/local/debug/include/ release lib -> /usr/local/lib/ release headers -> /usr/local/include/ i base this off the standard linux install and packaging conventions.",0,0.9778429865837097
486849283,265,devshgraphicsprogramming,2019-04-25T21:45:38Z,is the following done? [a link],0,0.9958804845809937
486851080,265,devshgraphicsprogramming,2019-04-25T21:52:10Z,the final thing to think about is how this all will fit in with #91 ? i personally think nothing changes for shared library builds except for macros for `irrcallconv` and `irrlicht_api` in front of function definitions and declaring `irrlicht_exports` in build params. installing `_irr_static_lib` may seem like a nice idea but the app linking the library needs to link to .a or .so (.lib or .dll) so it could just define `_irr_static_lib` when appropriate anyway. this only creates a new output binary and keeps headers identical.,0,0.98649662733078
486851960,265,Crisspl,2019-04-25T21:55:22Z,"yes ok, so `_irr_debug` goes to config-header file as ""installable"", right? i think i finaly have an idea how to do this to be usable for devs and users",0,0.924374520778656
486852569,265,devshgraphicsprogramming,2019-04-25T21:57:36Z,yes its installable.,0,0.9873940944671631
486961224,265,devshgraphicsprogramming,2019-04-26T07:44:33Z,friendly reminder,0,0.9383780360221863
596126479,428,devshgraphicsprogramming,2020-03-07T18:50:52Z,"my dear summer child, please call ex 07 something more appropriate",-1,0.9414829015731812
600848934,428,devshgraphicsprogramming,2020-03-18T20:43:19Z,what the fuck are you doing deleting example 13?,-1,0.9898082613945007
600854703,428,devshgraphicsprogramming,2020-03-18T20:57:35Z,don't prefix every class with `irrlichtbaw` just put it in the `irr::ext::cegui` namespace,0,0.9935278296470642
601659073,428,AnastaZIuk,2020-03-20T11:45:36Z,"fuck this shit, we have to change the tactic",-1,0.9943618774414062
601708158,428,manhnt9,2020-03-20T13:44:12Z,"hey, be polite on code review. it's your company's image on the internet that anybody could see!",1,0.5586485266685486
601710939,428,AnastaZIuk,2020-03-20T13:50:26Z,"forgive me, i have done it all wrong and got angry",-1,0.994425892829895
601721348,428,devshgraphicsprogramming,2020-03-20T14:12:33Z,"results, meritocracy... not rhetoric ;) as long as he gets the job done on time and on budget he can use whatever language he pleases. also was referring to his own code/attempts, not yours ;)",1,0.9789217710494995
601764936,428,manhnt9,2020-03-20T15:39:14Z,"i'm not referring to anyone's work, really. just saw 2 f words that i thought which wasn't necessary. one from you and one from him.",0,0.6673069596290588
601765291,428,manhnt9,2020-03-20T15:39:53Z,here.,0,0.9713109135627747
601767426,428,manhnt9,2020-03-20T15:44:05Z,i'm just minding for open-source culture on the internet. you can treat however you like in your company.,0,0.9054422974586487
601798103,428,devshgraphicsprogramming,2020-03-20T16:40:58Z,"yeah, its getting pretty annoying with all the ""woke-ness""",-1,0.9881864190101624
601809488,428,manhnt9,2020-03-20T17:03:01Z,"ok, if those suggestions seems not useful to you then i have my notes here.",0,0.9838244915008545
702283169,540,devshgraphicsprogramming,2020-10-01T17:24:45Z,why is this pr opened against the old repo?,0,0.9910929799079895
704990036,540,Crisspl,2020-10-07T14:51:35Z,opened against nabla,0,0.9870888590812683
593304161,425,devshgraphicsprogramming,2020-03-02T09:23:39Z,"i think some of the built-in vertex shaders are exactly the same, you can cache the same asset under multiple paths.",0,0.9810672998428345
594000985,425,AnastaZIuk,2020-03-03T15:12:51Z,done,0,0.8682363629341125
385638535,81,devshgraphicsprogramming,2018-05-01T10:03:37Z,"great, but the windows target also needs some of the gcc flags or equivalent, like fno-exceptions etc. also there should be 4 targets: opengl {release,debug} outputs (lib)irrlicht(.a) server {release,debug} outputs (lib)irrlichtserver(.a) same as current makefile when invoked with ""make serverlib baw_server=1 new__meshes_done=1"" c.f. with the codeblocks project file (xml) for compile options, defines and linker options under linux also what do we invoke cmake with and how do we compile? what files will cmake generate/overwrite?",0,0.9632524251937866
385638857,81,devshgraphicsprogramming,2018-05-01T10:05:42Z,"also forgot to mention that your cmake file should have a configurable path to the openssl includes and libraries (crypto & ssl) in our case we presume to be in ../../../openssl relative to ./source/irrlicht, but it would be nice to either let it be some other path or system default.",0,0.9884960651397705
385813180,81,numberZero,2018-05-01T22:49:21Z,"mingw gets the flags already, as cmake recognizes it as gcc. if you mean msvc, well, i need to check the vc project files then as i don’t remember their flags at all. opengl {release,debug} outputs (lib)irrlicht(.a) server {release,debug} outputs (lib)irrlichtserver(.a) will add the server target. debug/release is what cmake cares of. make an empty directory anywhere, enter it, call `cmake ` (that is, to the directory with the main `cmakelists.txt` file; that should probably be the repository root and not where i put it currently), then `make`. it will build the default configuration. you can supply additional arguments to cmake like `-dcmake_build_type=debug` or `-dfast_math=off` to use different configuration. you can also call `cmake-gui` instead of `cmake`, if you have it; it is handy. it works only in the folder you created for it, not changing anything outside it. in our case we presume to be in ../../../openssl relative to ./source/irrlicht, but it would be nice to either let it be some other path or system default. oh, forgot that, sorry. will add, that’s just a few lines in cmake.",0,0.9861017465591431
385813553,81,numberZero,2018-05-01T22:51:25Z,"by the way, where is `macosx/cirrdevicemacosx.mm` mentioned in the codeblocks project?",0,0.9943273663520813
385818472,81,devshgraphicsprogramming,2018-05-01T23:18:46Z,there is no macosx target at all. search in copengldriver.h for a nicely named structure which is comment about apple :),1,0.9904239773750305
385819099,81,devshgraphicsprogramming,2018-05-01T23:22:36Z,"i think its good where it is, the root should have a global cmake that would make examples too (and have test targets)",1,0.8977036476135254
386740351,81,numberZero,2018-05-04T21:30:21Z,`makefile` misses the following files: [code block] but it *does* include other similar files. is that intentional?,0,0.992112398147583
387030775,81,devshgraphicsprogramming,2018-05-07T10:59:31Z,its most probably bad that it misses `coreutil.cpp cgputransientbuffer.cpp` but the makefile only supports a headless server target so no opengl or graphics output device of any kind thats why. what surplus files does it include?,-1,0.8639895915985107
387123228,81,devshgraphicsprogramming,2018-05-07T16:32:18Z,"anyhow, far off is this thing from being ready?",0,0.5782297253608704
387381546,81,devshgraphicsprogramming,2018-05-08T12:11:13Z,"you're missing the o3 flag, as well as linker flags (some compiler flags need to be repeated as linker flags) such as mfp-math=sse, fuse=gold, etc. for gdb to work reliably not only does debug build require -g but also -ggdb3 again c.f. with codeblocks project (you can see compile and linker flags separately) and you're missing the essential define new__meshes_done, again .c.f. with codeblocks project",0,0.9903221726417542
390770579,81,numberZero,2018-05-21T20:21:50Z,"can’t find any documentation on `mfp-math=sse` as linker flag, although it seems to be used when link-time optimization is in effect (it is disabled by default). on `fuse=gold`, is that mandatory or recommended? that should probably be set as default and not as required value then. can’t find *any* mention of `new__meshes_done`, where is it used? i see `new_meshes` only.",0,0.9844797253608704
390771730,81,numberZero,2018-05-21T20:26:01Z,"the makefile includes, among others, * copengldriver.o * copengltexture.o * copenglslmaterialrenderer.o * copenglextensionhandler.o * copenglframebuffer.o * copenglrenderbuffer.o what looks very strange for a headless target.",-1,0.8127268552780151
390883857,81,devshgraphicsprogramming,2018-05-22T07:00:05Z,"`fuse=gold` is mandatory, its the ""new"" multi-threaded linker in the gcc toolchain. you'd be surprised, unless cmake states that explicitly somewhere i'd bank on ggdb3 not being enabled (i wonder if -g is set correctly too). granted, but you're still missing new_meshes as a define. on the topic of extra opengl files, lets leave them in for now, `no_irr_compile_with_opengl_` takes care of not compiling in opengl. (i'll open a separate issue to clean that up. let me know if the cmake is tested and works.",0,0.982216477394104
390986749,81,devshgraphicsprogramming,2018-05-22T13:19:32Z,"please add the `new_meshes` define to the cmake if you confirm that the cmake not only builds, but that the result links with an example, then i can merge. i can merge pull and you can add information to the wiki [a link]",0,0.9953169822692871
391866349,81,numberZero,2018-05-24T21:18:52Z,"added it as default for gcc debug builds. clang doesn’t support that flag afaik, and there are other debuggers (lldb) out there that may better work with other configuration. just realized you ask to add linking flags while linking is not done at all; static libraries (on linux at least) are just archives consisting of object files. on `new_meshes`, sorry, forgot to mention it is defined *unconditionally* in `irrcompileconfig.h`. it does. of course linking requires some flags like `-lcrypto` as dependencies are not propagated by static libraries (cmake is able to do that job, if only it is used to build the program as well; that’s not the case in this pr), but with these it works fine. p.s. it appears my old gpu is waaay too old to use irrlichtbaw. i plan to replace it very soon, but until then, i can only test it with altered gl version check (as mesa exposes gl 3.3 only). well, helloworld works, at least)",-1,0.911237895488739
391871878,81,devshgraphicsprogramming,2018-05-24T21:39:50Z,go to town on the wiki page ;),0,0.9391148686408997
546690854,389,devshgraphicsprogramming,2019-10-27T12:40:38Z,how on earth were you able to merge into my master?,-1,0.8685768246650696
381088829,63,devshgraphicsprogramming,2018-04-13T10:03:36Z,"great stuff! but we still need `transformplane`, `transformboxex`, `makeinverse`, `buildrotatefromto` and `buildaxisalignedbillboard` as well as the `concatenateprecisely*` family of functions using doubles in the intermediate representation of matrices the `transform*` functions can be made members of plane<> and aabbox3d<> as it makes more sense for the matrix to not implement transforms of 50 different geometric primitives (and be aware of them, compile-wise). finally since we removed the standard rotation, we should have test which checks parity between matrix4x3::setrotationradians() and matrix3x4simd::setrotation(quaternion::fromeuler())",1,0.9929038882255554
381431626,63,devshgraphicsprogramming,2018-04-15T19:28:54Z,"good, but still need to get rid of these redundant transposes and hadd_ps that could be replaced with add_ps (by removing a transpose) also why aesgladman is now compiled in from c instead of c++ on the windows project ?",0,0.9600145220756531
381436143,63,Crisspl,2018-04-15T20:37:50Z,"don't undersatnd most of your comments about this. tomorrow.. some unpushed changes apprently.. that's how it has to be (changed about time when we were doing openssl stuff) - i.e. nothing changed now, just project file was unpushed",0,0.9378227591514587
552926295,400,devshgraphicsprogramming,2019-11-12T14:51:07Z,are you using an older revision of glew (or one not from ) in your branch?,0,0.9925794005393982
552944302,400,devshgraphicsprogramming,2019-11-12T15:31:02Z,?,0,0.9296892285346985
554078372,400,devshgraphicsprogramming,2019-11-14T21:03:47Z,looks good.,1,0.6773717999458313
565823534,406,AnastaZIuk,2019-12-15T16:16:46Z,"if you ever had to allocate raw, don't use `new` operator, but use `_irr_new`/`_irr_new_array` and `_irr_delete`/ `_irr_delete_array` instead [a link]",0,0.9954675436019897
565988137,406,devshgraphicsprogramming,2019-12-16T09:56:29Z,great job! let me know when finished.,1,0.9960529804229736
569619180,406,devshgraphicsprogramming,2019-12-30T09:00:25Z,how is the status?,0,0.9925538897514343
686569744,534,devshgraphicsprogramming,2020-09-03T15:27:12Z,let me know when working/mergable.,0,0.950229823589325
478511094,250,devshgraphicsprogramming,2019-04-01T09:45:35Z,tga and bmp loaders are untouched.,0,0.9901573657989502
478758944,250,devshgraphicsprogramming,2019-04-01T21:42:57Z,"thanks a lot for the comments, you've saved me a great deal of time for the first time in the history of our company the commit log of a branch is so bad it needs to be either rewritten or squashed/rebased because it makes no sense. copengldriver.cpp is a mess in the diff viewer ([a link] ) because most probably the newlines got messed up.",1,0.9935219883918762
616793815,473,devshgraphicsprogramming,2020-04-20T20:34:39Z,"prefer `static_cast (var)` to c-style cast `(t)var`, c-style cast will cast anything to anything pretty much ! careful with `decltype(variable)` especially with regards to ints, and similar, because `decltype(var)` on something that was declared as `t var` actually evaluates to `t&` or `const t&` (depending on current scope's access const qualifiers), and you really dont want to be casting constant literals to references (this ties into why you want to use `static_cast` and not c-style cast). you'd actually need a std::decay for that... ask how to best handle",0,0.8413568735122681
617130980,473,AnastaZIuk,2020-04-21T11:48:20Z,"i need to change for `static_cast`, but i find it probably not true (quite) with evaluating to `t&` or `const t&`, since it depends on the way you call decltype",0,0.9914038181304932
617133797,473,devshgraphicsprogramming,2020-04-21T11:54:50Z,i think `static_cast ` should protect us against most things,0,0.9693845510482788
617134190,473,AnastaZIuk,2020-04-21T11:55:40Z,"yeah, it's true",0,0.9385758638381958
635886702,473,devshgraphicsprogramming,2020-05-29T09:58:29Z,update to match the head of `shader_pipeline` fix my comments and i'll merge,0,0.9931862354278564
655764131,473,devshgraphicsprogramming,2020-07-08T21:20:51Z,closing temporarily.... reopen when ready for merge,0,0.9775266647338867
598331743,436,devshgraphicsprogramming,2020-03-12T17:46:49Z,`iimagemetadata : public iassetmetadata`,0,0.9945490956306458
599225786,436,AnastaZIuk,2020-03-15T15:34:49Z,moving to [a link],0,0.9945473670959473
486512715,271,manhnt9,2019-04-25T04:08:45Z,"finished, now linux users can build with `cmake .. -dirr_pch=off`",0,0.9858518838882446
486557720,271,devshgraphicsprogramming,2019-04-25T07:47:03Z,ok but does pch work on linux or not?,0,0.9925718903541565
486560305,271,manhnt9,2019-04-25T07:55:37Z,"the pch is not working, i disable pch for now since i don't have firm experience with it.",0,0.9393470883369446
486562503,271,devshgraphicsprogramming,2019-04-25T08:02:46Z,ok that will be 's task.,0,0.9877203106880188
486627116,271,devshgraphicsprogramming,2019-04-25T11:03:13Z,come back with another pr for the exception throwing from `replace_invalid` in the utf8 dependency,0,0.993867814540863
486725688,271,manhnt9,2019-04-25T15:38:05Z,"will keep an eye on that, hope the utf lib gets updates soon.",0,0.8895883560180664
543787179,381,devshgraphicsprogramming,2019-10-18T15:02:55Z,do multilayered textures and cubemaps then we merge ;),0,0.9929112792015076
544468510,381,devshgraphicsprogramming,2019-10-21T11:16:46Z,how's work going?,0,0.9425788521766663
544730332,381,achalpandeyy,2019-10-21T22:13:30Z,"thanks for the review! going great but incredibly busy, hopefully i will be able to make changes by the end of this week",1,0.9949565529823303
557317360,381,devshgraphicsprogramming,2019-11-21T23:23:09Z,"either port this loader to `shader_pipeline` and do a pr from that branch, or let take over.",0,0.9922217726707458
557798723,381,achalpandeyy,2019-11-23T13:38:33Z,"sure, can take over.",0,0.981306791305542
559724016,381,devshgraphicsprogramming,2019-11-29T09:33:16Z,superseded by #402,0,0.9940659999847412
385639054,80,devshgraphicsprogramming,2018-05-01T10:07:00Z,will give it a look real soon :),0,0.5930796265602112
387209740,80,devshgraphicsprogramming,2018-05-07T21:18:16Z,i have a feeling that [a link] [a link] should disappear. and also the `makeplanartexturemapping` family of functions in cmeshmanipulator.*,0,0.9787777662277222
387214149,80,devshgraphicsprogramming,2018-05-07T21:35:52Z,"after my most recent comments are addressed i have 3 final questions before approving the merge: 1) are the setattribute and getattribute tested for parity (same results) for the attribute types that used to work?? ** 2) is the matrixsimd3x4 skinning upgrade well tested? 3) have you tested that the mesh optimizer not only works, but that it actually reduces the mesh memory footprint (i.e. makes .baw files or vertex sizes smaller)? ** we have code like this in baw [code block] the position attribute is always ect_float with ecpa_three or ecpa_four, if it doesn't work we will be unhappy.",0,0.9751371145248413
387417418,80,Crisspl,2018-05-08T14:16:05Z,"hardware skinning example works fine (but faster :d), so... i think yes. yes, but usually it's not a lot. also it's easly ""lookable"" with `-info` option of `convert2baw`. actually yes, i did that while debugging some time ago. btw, you can have multi-line code in this fine-looking code-block-thing by encapsulating code with triple thing-below-tilde, so it looks like this: [code block]",1,0.9883782267570496
387461017,80,devshgraphicsprogramming,2018-05-08T16:25:43Z,"can you merge with the latest commit (take care when merging imeshbuffer.h) and then test that example 1,3-19 and 23-24 produce expected results?",0,0.9952451586723328
491493920,297,devshgraphicsprogramming,2019-05-11T09:04:48Z,"you can nuke whatever is guarded by an `#ifndef new_meshes` that is to do with normals, tangents, etc.",0,0.9893919229507446
491653060,297,Przemog1,2019-05-13T02:08:50Z,"since we have margin of tolerance for vertex position comparison, there may be ""connected"" vertices in different cells, this problem is not resolved yet. also hashtablesize and cellsize parameters need to be adjusted.",0,0.9913508892059326
491659816,297,manhnt9,2019-05-13T02:58:41Z,"a little note: this feature also presents in assimp library, which we will revive in the future.",0,0.977246105670929
492289663,297,devshgraphicsprogramming,2019-05-14T15:33:47Z,yes but: 1. assimp is an extension not a core feature 2. we need to be able to do this on our own meshes (not in assimp data structures),0,0.9824137687683105
493737226,297,devshgraphicsprogramming,2019-05-19T08:23:40Z,"it is 100% correct, it makes integer voxel coordinates, no bit cast",0,0.9578768014907837
495374563,297,devshgraphicsprogramming,2019-05-23T20:33:36Z,or could you check out this branch and just see if it builds on linux? (i don't need to know whether it works),0,0.9941217303276062
702173612,539,devshgraphicsprogramming,2020-10-01T14:26:53Z,can i merge or do i still need to wait on something?,0,0.9933784604072571
702174010,539,devshgraphicsprogramming,2020-10-01T14:27:33Z,btw you havent changed the 2 submodule repos to my forks.,0,0.99126797914505
704988121,539,Crisspl,2020-10-07T14:48:40Z,opened against nabla as well,0,0.9887574315071106
705037750,539,devshgraphicsprogramming,2020-10-07T16:06:03Z,"i'll merge it here, tonight",0,0.9923151731491089
705678381,539,Crisspl,2020-10-08T16:20:16Z,"our contribution got merged into spirv-cross. but we're still using our spirv-cross repo as a submodule, right? then what should i do? pull and set it on primary repo's `head`? obviously `2020-09-17` tag you skaded for before doesnt support subgroups.",0,0.9896577000617981
705689584,539,Crisspl,2020-10-08T16:39:40Z,ran the benchmark: (rtx 2070) [code block],0,0.9950681924819946
706064794,539,devshgraphicsprogramming,2020-10-09T09:06:55Z,"we will always use our own fork, we'll add more features to it.",0,0.9910838603973389
706094407,539,devshgraphicsprogramming,2020-10-09T10:09:54Z,nvidia 1050 mobile [code block],0,0.9926450252532959
706107883,539,Crisspl,2020-10-09T10:41:00Z,"`coalescing_dwords_log2=5`, rtx 2070 (case 4) [code block]",0,0.9953755140304565
706118411,539,Crisspl,2020-10-09T11:07:12Z,"`coalesing_dwords_log2=5` and just one `restrict` buffer, rtx 2070 (case 4) [code block]",0,0.9959264993667603
706134884,539,Hazardu,2020-10-09T11:48:07Z,gtx 1060 6gb [code block],0,0.9946634769439697
706146862,539,devshgraphicsprogramming,2020-10-09T12:16:42Z,ok seems that subgroup tricks dont win us extra perf.,0,0.9710779190063477
545634911,386,devshgraphicsprogramming,2019-10-23T21:01:43Z,i actually wanted these commits to be applied on top of `master` branch and a pr into `master`,0,0.9928152561187744
685712741,530,devshgraphicsprogramming,2020-09-02T12:49:01Z,can you do the final reviews on this and merge this into your mitsuba megabranch?,0,0.9952919483184814
685722282,530,Hazardu,2020-09-02T13:05:12Z,"could you delay merging untill later today? there are some changes to level curve extraction that i made for the purpose of sending a zip file to a client. i'll be home past 17:30, so the last commit should be pushed shortly after",0,0.9890968799591064
457156125,213,devshgraphicsprogramming,2019-01-24T10:58:09Z,a conflict on cmakelists.txt and czipreader.cpp preventing mergeability,0,0.9684728980064392
463385587,213,devshgraphicsprogramming,2019-02-13T21:43:22Z,"is this merge request ready? i've done a number of stability/bugfix commits to master, if you can merge with them first before i press the holy green button i'd be much obliged.",1,0.8330942988395691
489902175,295,manhnt9,2019-05-07T04:21:42Z,thank you. could you also take a look at this issue? [a link] i'm trying to debug an app.,1,0.953490138053894
489902975,295,Crisspl,2019-05-07T04:26:18Z,"seems like missing -lunwind, but never got this before.. btw you can open github pr (or just pull with git) from any fork to yours any time you want yourself (so that you don't have to wait for someone to make pr)",0,0.9692021012306213
489903358,295,manhnt9,2019-05-07T04:28:41Z,"have you tried `cmake .. -dcmake_build_type=debug` on linux? if this error is not here before it means the cmake is really not stable, i've met similar issue with zlib in irrbaw. before it linked and after a while it doesn't.",0,0.9898828864097595
489904301,295,Crisspl,2019-05-07T04:34:23Z,"hm, no, i think i ran only release builds on linux.",0,0.9813585877418518
490433919,295,devshgraphicsprogramming,2019-05-08T10:25:38Z,i changed base to srgb branch since thats what we're working on now this pr fixes: - linking of libunwind debug builds of examples on linux - srgb conversions in decode and encode pixels improved and fixed (at least partially) - minor bugfixes,0,0.661140501499176
490572114,295,devshgraphicsprogramming,2019-05-08T17:14:11Z,"note that this moves where the pch on linux go (build dir, not source dir) so you can remove the .gch files from gitignore that you've added",0,0.9920133948326111
490859856,295,Crisspl,2019-05-09T11:08:56Z,"actually it was done in [a link] , long before this pr",0,0.99212646484375
491142867,295,manhnt9,2019-05-10T03:29:48Z,updated.,0,0.9768958687782288
552098514,398,devshgraphicsprogramming,2019-11-09T13:03:27Z,status according to conversation with : - memory leak in ply or some sort of corruption leading to crash - baw loader does not respect the flag yet but works.,0,0.98042231798172
553040539,398,AnastaZIuk,2019-11-12T18:34:36Z,"i think it can be **merged** everything has been tested in significant detail the plan is to do baw later, after writer flags here are loaders that work great with flipping dependecy",1,0.5003035068511963
629067824,489,Przemog1,2020-05-15T07:02:46Z,almost done,0,0.8225545883178711
629158923,489,devshgraphicsprogramming,2020-05-15T10:26:15Z,can i merge?,0,0.9944422841072083
629376288,489,Przemog1,2020-05-15T17:10:18Z,"not yet, i've got few more things to do",0,0.7769212126731873
629665257,489,devshgraphicsprogramming,2020-05-16T15:42:34Z,mergable?,0,0.9411869049072266
629746962,489,Przemog1,2020-05-17T05:44:46Z,yes,0,0.9686408638954163
372376483,48,devshgraphicsprogramming,2018-03-12T16:39:16Z,would be nice if this pull request got split into 3 separate pull reqs,0,0.9543574452400208
447642171,165,devshgraphicsprogramming,2018-12-16T13:09:52Z,any progress on this?,0,0.9856436252593994
447642249,165,manhnt9,2018-12-16T13:11:07Z,"not yet, i'm developing saga3d most of the time.",0,0.9655192494392395
465878851,165,devshgraphicsprogramming,2019-02-21T06:30:52Z,doing it by myself.,0,0.9111971855163574
439494130,177,devshgraphicsprogramming,2018-11-16T19:04:18Z,can you commit the cmakelists fixups too?,0,0.9962276220321655
459960047,219,devshgraphicsprogramming,2019-02-02T12:06:57Z,-khun i'd remove `ccollisionshape` and inline pretty much every class method that isn't `virtual`,0,0.959282636642456
493970722,219,devshgraphicsprogramming,2019-05-20T12:42:30Z,"its a nice pr, it be a shame if it never got merged.",-1,0.5196873545646667
496874851,219,devshgraphicsprogramming,2019-05-29T10:11:55Z,now basically add an option to cmake `irr_build_bullet` (just like `irr_build_cegui`) that controls the building of your bullet example and the bullet dependency maybe merge the srgb branch into yours to access that nice `irr::ext` library building macro?,0,0.9938594698905945
499017979,219,devshgraphicsprogramming,2019-06-05T09:53:25Z,so i guess we're ready to merge?,0,0.9855027198791504
543253875,378,devshgraphicsprogramming,2019-10-17T16:23:46Z,what have you done... you just broke the animatiors.,-1,0.9908285140991211
543316404,378,AnastaZIuk,2019-10-17T19:01:57Z,"we have misunderstood each other, solved :b",1,0.9874956011772156
543560508,378,devshgraphicsprogramming,2019-10-18T07:13:48Z,we're done?,0,0.987357497215271
543755611,378,AnastaZIuk,2019-10-18T13:47:52Z,done :),1,0.6320397257804871
619160426,443,AnastaZIuk,2020-04-24T17:54:34Z,"something has fucked up after merging, i need to check it",-1,0.9662685394287109
619434046,443,AnastaZIuk,2020-04-25T20:09:47Z,closing,0,0.9869142174720764
664620011,522,devshgraphicsprogramming,2020-07-27T20:26:08Z,"if i merge this, will the denoiser break? (it needs a functional mitsuba loader to load camera xmls)",0,0.9714245200157166
664670225,522,Crisspl,2020-07-27T22:28:17Z,"no, it loads metadata just fine, provided shaders wont work obviously but thats it",0,0.9812120795249939
665162586,522,devshgraphicsprogramming,2020-07-28T17:08:21Z,"ok fix beckmann and ggx, then i'll merge ;)",1,0.7401625514030457
381064938,64,devshgraphicsprogramming,2018-04-13T08:33:13Z,"rather than changing all our files and requesting a massive pull... could we get a .sh script that fixes up the line endings (into unix not windows) and replaces tabs by 4 spaces? p.s. need to fix my ide to go into space mode, been putting it off for waaay too long.",0,0.8401626348495483
381202110,64,numberZero,2018-04-13T17:13:02Z,you’re definitely right) here is it: [code block],0,0.7722849249839783
381248427,64,Crisspl,2018-04-13T20:11:01Z,uh i'll do it too then. code looks really crappy sometimes on github because of tabs vs spaces duel.,-1,0.9769737124443054
381310819,64,devshgraphicsprogramming,2018-04-14T07:39:33Z,"4 spaces are good, tabs are a bit bad... not as a normal shit-throwing fest of tabs vs. spaces but simply of the meld, tortoisegit, codeblocks and visual studio mix that we use renders spaces to be roughly the same indent size. i know what the find does, but can you explain the role of the sed arguments?",-1,0.9735113382339478
381326541,64,numberZero,2018-04-14T12:42:26Z,"`-i` means “edit files in-place” (by default `sed` writes everything to stdout, even when processing multiple files) the next argument is the program, it has 2 “search-and-replace” statements in this case: [code block] replaces `\r` that is just before line end with nothing (lines end in `\r\n` on windows but with `\n` on unix). (it actually doesn’t need the trailing `g`) [code block] replaces tab with 4 spaces; `g` is a flag to make it replace each tab on the line (by default, `s` does one replace per line). the following arguments `sed` expect are file names, `xargs` supplies them. *p.s. tabs are great!*",0,0.9925518035888672
381332103,64,devshgraphicsprogramming,2018-04-14T14:14:43Z,"thanks for the `sed` explanation, will make a .sh script in the top directory for this. a tested .bat file for windows would be welcome p.s. i know `xargs` xd",1,0.9740965962409973
437121385,164,devshgraphicsprogramming,2018-11-08T19:15:18Z,this is not a way to fix the issue... i think `core::` is missing from the names of the classes the opencl objects inherit from as well as possibly the `irr/core/baseclasses.h` include,0,0.9816998839378357
437225872,164,manhnt9,2018-11-09T02:14:45Z,i see many other classes have been commented out that same public keyword so i did the similar. do you mind explaining what allocationoverridedefault is and why it's needed for this class?,0,0.9944913387298584
437314501,164,devshgraphicsprogramming,2018-11-09T10:16:48Z,"allocationoverridedefault overrides the default c++ operator new and delete to make sure that when the class is `new`ed the memory its been allocated resides on a address boundary aligned to the default irrlicht alignment (now 16, but soon 32 for avx). all classes in irrlicht that do not inherit from a class (like `ireferencecounted`) that is derived from `allocationoverridedefault` should declare inheritance from `allocationoverridedefault`, unless: 1. it is a packed class that needs to be packed in arrays more tighty than the default irrlicht alignment would allow (i.e. vectorsimdf) 2. it requires alignment bigger than the defaut irrlicht alignment (but it should still inherit from `alignedbase` ) 3. requires a specific alignment that may never change (but should still inherit from `alignedbase`), an example here are classes for interop with glsl like matrices, vectors so that structs containing arrays of them have the same layout as the ubo/ssbo etc. in the shader 4. is supposed to be byte-compatible with some other struct or data declared outside of irrlicht (i.e. a meta-type that you use as an accessor to plain void* memory)",0,0.9924442172050476
437314699,164,devshgraphicsprogramming,2018-11-09T10:17:39Z,these were the classes i could not decide on how to handle their alignment (which category they belong to),0,0.8645538687705994
437579707,164,manhnt9,2018-11-10T12:13:03Z,pushed the new fix.,0,0.9902565479278564
437609546,164,devshgraphicsprogramming,2018-11-10T18:51:04Z,thanks a lot :d,1,0.9952763319015503
477353440,249,devshgraphicsprogramming,2019-03-27T21:24:43Z,all loaders need to debug log their metadata about headers also png loader not done. writers also need doing so they export correct metadata,0,0.994247317314148
478511278,249,devshgraphicsprogramming,2019-04-01T09:46:08Z,superceded by another pr,0,0.9925370812416077
441343521,181,manhnt9,2018-11-24T04:49:07Z,well something made this pr automatically closed ...,0,0.9885567426681519
441343564,181,manhnt9,2018-11-24T04:50:38Z,"ah i lost my changes, maybe i reset my branch without caring about this pr. anyways, the code is still in my engine so will make a new pr before new week starts.",0,0.934974730014801
502490285,328,Przemog1,2019-06-16T22:15:16Z,fixed,0,0.920660674571991
502706345,328,devshgraphicsprogramming,2019-06-17T14:28:21Z,can you make a cleaner pr that doesn't have 49 modified files when done against the `brdf_explorer` branch? (as well as fix my comments above),0,0.9944646954536438
580463758,415,devshgraphicsprogramming,2020-01-30T21:16:45Z,"cool, now change the typedef for `core::unordered_map` and similar `unordered` to parallel hashmap stuff and test the library (especially smooth normal computation).",1,0.8846136331558228
618916680,475,devshgraphicsprogramming,2020-04-24T09:51:58Z,i added sdl2 submodule to 3rdparty. cmake will need touching up to add it as a dependency of `irrlicht` target here's a list of resources on sdl2 and vulkan: [a link] [a link] [a link] [a link],0,0.9924374222755432
618971499,475,devshgraphicsprogramming,2020-04-24T12:09:07Z,"i also included `volk` [a link] no need to make it a dependency, you can use it in header-only-mode",0,0.9955993890762329
623941600,475,devshgraphicsprogramming,2020-05-05T09:05:11Z,"why did you copy my commit and not merge my branch, this is a recipe for conflicts when merging",0,0.84046870470047
630273546,490,devshgraphicsprogramming,2020-05-18T15:52:40Z,writer?,0,0.9801263213157654
630274213,490,AnastaZIuk,2020-05-18T15:53:42Z,i'm dealing with it right now :d,1,0.9939350485801697
630425416,490,devshgraphicsprogramming,2020-05-18T20:44:20Z,why did you add denoised images to our repo?,0,0.9943517446517944
630806111,490,devshgraphicsprogramming,2020-05-19T13:09:48Z,would you mind converting the .hdri envmaps to openexr?,0,0.9949712753295898
630814564,490,AnastaZIuk,2020-05-19T13:22:58Z,"okay, i will do it",0,0.89922696352005
440736613,186,devshgraphicsprogramming,2018-11-21T16:53:16Z,can it echo whether it found vulkan or not?,0,0.9944002032279968
440747855,186,manhnt9,2018-11-21T17:26:27Z,cmake will print out if it found vulkan and the library's location. any custom message can be printed out using cmake command `message`.,0,0.9940724968910217
440762337,186,devshgraphicsprogramming,2018-11-21T18:13:15Z,"can you message ""building with vulkan"":""not building with vulkan""",0,0.9815858602523804
440969931,186,devshgraphicsprogramming,2018-11-22T09:38:38Z,"great work, thanks!",1,0.9966367483139038
441096396,187,manhnt9,2018-11-22T18:02:11Z,"well, i think i must have replaced all my cmake knowledge with 3.12, so i made a mistake. in modern cmake, we only need to `link` a library, `include dir` of a library is a `property` of that library, so only need to link and cmake will add `include dir` automatically. this pr is for old cmake, everything is variable so we need to specify. in new cmake, we have target and target can have multiple properties, that's more convenient.",0,0.8260884881019592
441180530,187,devshgraphicsprogramming,2018-11-23T08:38:37Z,does this work with the new lunarg sdk that comes as a package from a repository ? (no more need for that pesky `vulkan_sdk` environment variable),0,0.9946764707565308
441208073,187,manhnt9,2018-11-23T10:43:59Z,which package? i have libvulkan-dev installed and i don't have to set any environment variable.,0,0.9942580461502075
441249374,187,devshgraphicsprogramming,2018-11-23T14:06:18Z,that's exactly what i wanted to hear.,0,0.9401601552963257
663847220,462,devshgraphicsprogramming,2020-07-25T11:58:47Z,take this over (low priority),0,0.8778384327888489
660250019,514,devshgraphicsprogramming,2020-07-17T17:43:49Z,could you also tackle this week's bug with the missing builtin data in this pr?,0,0.9930599927902222
660250803,514,Hazardu,2020-07-17T17:45:21Z,sure,0,0.9422702193260193
660255590,514,Hazardu,2020-07-17T17:55:08Z,"ive merged the latest changes to this branch, yet it does not appear to skip any files in the generated .cpp file",0,0.9836891293525696
660257192,514,devshgraphicsprogramming,2020-07-17T17:58:31Z,provide counter example,0,0.993320107460022
415484760,138,devshgraphicsprogramming,2018-08-23T16:41:30Z,"i could accept your pull request, if you revert your changes to `irrmemory.h`",0,0.9946690201759338
415500173,138,devshgraphicsprogramming,2018-08-23T17:22:10Z,there is ongoing debate with the `template<>` [a link] [a link] can anybody clear up the `template<>` issue?,0,0.9910067915916443
415521557,138,Crisspl,2018-08-23T18:28:47Z,about `template<>`: see [a link],0,0.9957836866378784
465879456,222,devshgraphicsprogramming,2019-02-21T06:33:49Z,"briliant, but we're missing a null-allocator specialization (because null allocator will allocate nullptr and default custom allocator cpubuffer will try to memcpy into that), that deletes the non-adopting constructor.",0,0.9697213172912598
487809311,284,manhnt9,2019-04-30T03:09:53Z,his full name is `nguyễn ngọc huy`.,0,0.9925123453140259
487809521,284,manhnt9,2019-04-30T03:11:42Z,"and my account is manhnt9, not manhnt.",0,0.9885432720184326
487809869,284,manhnt9,2019-04-30T03:15:02Z,"btw since you mistyped it and guy seems like a c++ programmer, i'd like to inform him that our company in vietnam is hiring more developers. hi , you can consider this job or share the [a link] for us. thanks and sorry for bothering you.",-1,0.9879149198532104
487034592,275,devshgraphicsprogramming,2019-04-26T12:09:51Z,i need to close and resolve #265 first,0,0.9933466911315918
487034957,275,manhnt9,2019-04-26T12:11:11Z,okay.,0,0.9765366315841675
495407498,275,devshgraphicsprogramming,2019-05-23T22:28:02Z,could this affect/cause/interact with #299 ?,0,0.991665780544281
538643886,375,AnastaZIuk,2019-10-05T12:01:59Z,"i have sent you nice website that might solve our troubles with chemical compounds etc, because in majority of cases those chemicals are placed in such a part of ""handbook of optical constants of solids"" that access to them is paid. over 300$ for entire book. check out discord please.",1,0.9783250689506531
539155031,375,AnastaZIuk,2019-10-07T18:56:11Z,"most of troubles solved, obtained 3 toms of palik's book, but despite it i can't find anything about ""d-c"" :d",1,0.9914348721504211
539431601,375,devshgraphicsprogramming,2019-10-08T09:28:45Z,d-c is cubic diamond,0,0.9892072677612305
