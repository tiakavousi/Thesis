id,pr_number,body,distilbert_sentiment_label,codebert_sentiment_label,deberta_sentiment_label,distilbert_confidence,codebert_confidence,deberta_confidence,majority_label,final_decision,decision_reason
1385885426,5439,"a single package can have multiple identifiers, like cpe and purl. it should be able to accommodate all of them. one idea is make `pkgidentifier` an array, but it is a bit bothering to access purl because it needs to iterate the array every time. what if simply adding identifiers as the field? [code block]",0,0,0,0.9192559719085692,0.9705812931060792,0.985192060470581,0.0,accept,unanimous_agreement
1385887019,5439,we used to need it in order to store bom-ref. i'm afraid that removing this field affects scanning somewhere. but we may no longer need it since we dropped some capabilities. i'll take a look.,0,-1,-1,0.7284348607063293,0.9061983823776244,0.6782854199409485,-1.0,accept,majority_agreement
1386479013,5439,"all right, i'll adopt this approach.",0,0,0,0.945641815662384,0.971601903438568,0.9847689867019652,0.0,accept,unanimous_agreement
1395469096,5439,i marked it as deprecated at [a link] instead of removing it,0,0,0,0.9863533973693848,0.9894466400146484,0.968845009803772,0.0,accept,unanimous_agreement
1396638425,5439,why is there extra `1%3a` in this line?,0,0,0,0.972679615020752,0.9918789863586426,0.990293264389038,0.0,accept,unanimous_agreement
1396641131,5439,looks like purl should contain [a link]: [a link],0,0,0,0.9801678657531738,0.9909062385559082,0.9904250502586364,0.0,accept,unanimous_agreement
1396660395,5439,"do we need this change? we can just add `purl.newpackageidentifier(filetype, newpkg)`: [code block]",0,0,0,0.9880423545837402,0.994415283203125,0.9961890578269958,0.0,accept,unanimous_agreement
1396669181,5439,do we need to use pointer?,0,0,0,0.9853296875953674,0.9916531443595886,0.9945393204689026,0.0,accept,unanimous_agreement
1396670327,5439,if i understand correctly - we will remove `pkgref` later. but why we remove it here?,0,0,0,0.981799066066742,0.991786539554596,0.9922693967819214,0.0,accept,unanimous_agreement
1396673891,5439,if we can't build purl for package - we use uuid - [a link] in this case we will skip this uuid. perhaps we need to add uuid as in `pkgidentifier`?,0,0,0,0.9893369674682616,0.9954047203063964,0.9926175475120544,0.0,accept,unanimous_agreement
1396682801,5439,previous numbers should not be changed - [a link] [code block],0,0,0,0.9849604964256288,0.9925480484962464,0.9959516525268556,0.0,accept,unanimous_agreement
1396698237,5439,i played with your changes and found that you run `purl.newpackageidentifier` for each detected line. we need to call this function after package detection is complete.,0,0,0,0.9879775047302246,0.980285942554474,0.9928346872329712,0.0,accept,unanimous_agreement
1396842552,5439,that's a good question... it might be related with some weird encoding done at the function below: - [a link],-1,1,1,0.8386226892471313,0.7619044184684753,0.9109821915626526,1.0,accept,majority_agreement
1396846978,5439,"we can include the distro & arch information by providing a valid metadata in the line below (by ensuring this function receives it as an argument): - [a link] but i wasn't able to find the way to have that info when the function is invoked, e.g.: - [a link]",0,0,0,0.9852262139320374,0.9943055510520936,0.994106650352478,0.0,accept,unanimous_agreement
1396849043,5439,please note `purl.newpackageidentifier` receives the package as second parameter,0,0,0,0.9879912734031676,0.9937679767608644,0.9953274726867676,0.0,accept,unanimous_agreement
1396852919,5439,"no. to be honest, i don't have a strong opinion about this. in terms of performance it depends on the size of the structs, these two reads can add more light on this topic: - [a link] - [a link] i usually prefer pointers because it's easier to determine if something is set or not: it's easier to do `foo != nil` than `foo != customtype{}`",-1,0,0,0.7639021277427673,0.890661895275116,0.7523338198661804,0.0,accept,majority_agreement
1396854118,5439,"good catch, reverting it",1,1,1,0.9701125621795654,0.97432941198349,0.9811320304870604,1.0,accept,unanimous_agreement
1396858663,5439,"i don't think uuids are valid to identify known vulnerabilities, at least i mainly find references to use purl, cpe or swid: - [a link] - [a link]",0,0,0,0.9496601223945618,0.982543408870697,0.9836655259132384,0.0,accept,unanimous_agreement
1396866884,5439,"done, see [a link]",0,0,0,0.9842819571495056,0.9243940711021424,0.9950354099273682,0.0,accept,unanimous_agreement
1396867051,5439,"done, see [a link]",0,0,0,0.9842819571495056,0.9243940711021424,0.9950354099273682,0.0,accept,unanimous_agreement
1396874436,5439,do you mean after `parseapkinfo` is invoked? or even after that?,0,0,0,0.9867374300956726,0.9941856861114502,0.9941627383232116,0.0,accept,unanimous_agreement
1396978395,5439,yep. i know about this decode([a link] but i missed first `1`. after decoding - `pkg:rpm/openssl-libs:1.1.1k-4.el8` but we should to move epoch to qualifiers - [a link],0,0,0,0.9783049821853638,0.9697684049606324,0.9890760183334352,0.0,accept,unanimous_agreement
1396983674,5439,"but we don't have metadata in pkg (apk, rpm, etc.) analyzers. perhaps we can just remove this condition: [a link] do you remember why we need this condition?",0,0,0,0.9859721660614014,0.9907435774803162,0.9936018586158752,0.0,accept,unanimous_agreement
1396985497,5439,i missed it. thanks for showing me this.,1,1,1,0.967624306678772,0.8991851806640625,0.9835512042045592,1.0,accept,unanimous_agreement
1396997613,5439,it looks like we can just create a function `func(i pkgidentifier) empty() bool`.,0,0,0,0.9857182502746582,0.9910236597061156,0.9920459985733032,0.0,accept,unanimous_agreement
1397002496,5439,"we don't need to change purl/cpe. i'm worried this might get confusing because `layer` and `digest` don't use pointers. i think we should either use pointers for each structural field (layer, digest, pkgidentifier) or not use them at all. in this case i am for the second option",0,-1,-1,0.4985107481479645,0.6465364098548889,0.8656060099601746,-1.0,accept,majority_agreement
1397004799,5439,but we also add `pkgidentifier` for `package` structure. this makes sense for users using `trivy fs -f json --list-all-pkgs` command.,0,0,0,0.9876921772956848,0.9951849579811096,0.9951552152633668,0.0,accept,unanimous_agreement
1397009114,5439,i think we can move this logic before adding `pkg` to `pkgs`: [a link] [a link],0,0,0,0.9868162274360656,0.9873902797698976,0.9923287034034728,0.0,accept,unanimous_agreement
1397009657,5439,can you also check dpkg and rpm for same problem?,0,0,0,0.9888750314712524,0.9923281073570251,0.9938378930091858,0.0,accept,unanimous_agreement
1397043157,5439,imho that condition doesn't make much sense since `parsequalifier` isn't using `metadata`. am i missing sth?,0,0,0,0.8483816981315613,0.8875080347061157,0.9429545998573304,0.0,accept,unanimous_agreement
1397043969,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1397045223,5439,this can be addressed with the change below: [code block],0,0,0,0.9881664514541626,0.9908700585365297,0.996024489402771,0.0,accept,unanimous_agreement
1397141529,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1397142473,5439,tried this at [a link],0,0,0,0.9877246022224426,0.9920178651809692,0.9945011138916016,0.0,accept,unanimous_agreement
1397142911,5439,tried this at [a link],0,0,0,0.9877246022224426,0.9920178651809692,0.9945011138916016,0.0,accept,unanimous_agreement
1398641104,5439,i also don't see the need for this condition. let's take a look at this after removing this.,0,0,0,0.9676063656806946,0.788263738155365,0.9862224459648132,0.0,accept,unanimous_agreement
1398667690,5439,looks like we need to update this test,0,0,0,0.9845474362373352,0.9864999651908876,0.9910386204719543,0.0,accept,unanimous_agreement
1398670876,5439,we need to think about `ref` field. perhaps we can mark it as deprecated and upgrade logic to use `pkgidentifier`. but it seems that this would be better done in another pr.,0,0,0,0.9800121188163756,0.9944623112678528,0.9925009608268738,0.0,accept,unanimous_agreement
1398674432,5439,"if i remember correctly, i removed all cases where we could get `pkgurl != nil && pkgurl.type == """"`. we can remove `pkgurl.type == """"` check.",0,0,0,0.9864354729652404,0.9925485253334044,0.993886172771454,0.0,accept,unanimous_agreement
1398675466,5439,this function is tested indirectly. can we add small unit test for it?,0,0,0,0.9893847107887268,0.990979552268982,0.9941061735153198,0.0,accept,unanimous_agreement
1399019654,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1399019749,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1399021738,5439,yup.. i added a comment at `pkg/types/vulnerability.go` mentioning that's to be deprecated but i took no further action.,0,0,0,0.9452499151229858,0.9786621928215028,0.974760115146637,0.0,accept,unanimous_agreement
1399025164,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1399034290,5439,"i understand the use of the uuid within the sbom doc since you can reference it but it doesn't add much value outside it, right? i think we should omit it.",0,0,0,0.9812397956848145,0.9901264905929564,0.987294614315033,0.0,accept,unanimous_agreement
1399982691,5439,"okay, that makes sense. if we need it, we can always add it.",0,0,0,0.9687827229499816,0.9236261248588562,0.9780328273773192,0.0,accept,unanimous_agreement
1399985634,5439,"if i remember correctly, we simply copy `ref` from `package` to `detectedvulnerability`. it looks more logical to add comment for parent (i mean the first element of this chain (`package`)). but i think the best way is to add a comment in both places.",0,0,0,0.9840293526649476,0.9884573817253112,0.9887425899505616,0.0,accept,unanimous_agreement
1399996916,5439,it is not possible: [a link],0,0,0,0.9305070042610168,0.9571595788002014,0.9883713126182556,0.0,accept,unanimous_agreement
1400001325,5439,i don't think this makes sense. we already tried to create purl in `analyzer`. for sdpx we can remove this and leave `packageurl == nil`. in this case we simply don't include purl to spdx package: [a link],0,0,0,0.9678620100021362,0.9831222891807556,0.7445407509803772,0.0,accept,unanimous_agreement
1400003389,5439,can you check case if we just remove this? it looks like we will create uuids for packages without `pkg.identifier`.,0,0,0,0.9890817403793336,0.99459969997406,0.9952890872955322,0.0,accept,unanimous_agreement
1400003821,5439,we don't seem to expect any changes in the desired results for this test.,0,0,0,0.9183816313743592,0.9252221584320068,0.9794433116912842,0.0,accept,unanimous_agreement
1400160845,5439,addressed at [a link],0,0,0,0.987715780735016,0.9894911050796508,0.995331346988678,0.0,accept,unanimous_agreement
1400160889,5439,addressed at [a link],0,0,0,0.987715780735016,0.9894911050796508,0.995331346988678,0.0,accept,unanimous_agreement
1400160970,5439,addressed at [a link],0,0,0,0.987715780735016,0.9894911050796508,0.995331346988678,0.0,accept,unanimous_agreement
1400161176,5439,addressed at [a link],0,0,0,0.987715780735016,0.9894911050796508,0.995331346988678,0.0,accept,unanimous_agreement
1400330283,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1401421097,5439,"we need the file path in bom-ref. while bom-ref must be unique, purls can conflict. this is another example where bom-ref is different from purl.",0,0,0,0.9811813235282898,0.9874666333198548,0.9929185509681702,0.0,accept,unanimous_agreement
1401422155,5439,looks like the purl is now wrong. the type should be `deb`. [a link],0,0,0,0.9728657603263856,0.9745290875434875,0.986930251121521,0.0,accept,unanimous_agreement
1401643537,5439,"this is sth that pointed out on this [a link] but the problem is that we don't have the [a link] info in pkg (apk, rpm, etc.) analyzers. after i moved the purls generation to the ""analysis"" part so `pkgidentifier` is also part of the `package` type per your suggestion, i was unable to find a way to obtain it. this is the reason why [a link] isn't receiving any metadata argument. i'd appreciate help on this because i don't really know how to achieve it.",0,1,1,0.6235368251800537,0.5808153748512268,0.7929409742355347,1.0,accept,majority_agreement
1401676669,5439,fixed at [a link],0,0,0,0.9883076548576356,0.9854505062103271,0.9949426054954528,0.0,accept,unanimous_agreement
1402916545,5439,"we can move logic to creating purl's for pkg managers (dpg, rpm, apk) to [a link]. this will allow us to create simpler code (we build purl in 1 place for all pkgs, instead of collecting purl for each package separately). also we will have info about os.",0,0,0,0.985224723815918,0.9846829771995544,0.992091417312622,0.0,accept,unanimous_agreement
1403293720,5439,"proposal implemented at [a link] this proposal doesn't moves entirely the pkg identifier generation to handler but overwrites the work done by pkg managers when it's possible. this way, we also have pkg identifiers in distroless & similar images that may use pkg managers without an actual os.",0,0,0,0.9876521825790404,0.993948459625244,0.9937978386878968,0.0,accept,unanimous_agreement
1403575496,5439,i'd appreciate if you could re-generate amd64 golden images by the way.,1,0,1,0.676863431930542,0.9048304557800292,0.7178832292556763,1.0,accept,majority_agreement
1403919712,5439,but this golden file still has wrong purl: [a link] also i left some comments below,0,-1,0,0.6775630116462708,0.5934689044952393,0.9722982048988342,0.0,accept,majority_agreement
1403919753,5439,i think it is better to use separate package.,0,0,0,0.9789712429046632,0.9756802320480348,0.9821495413780212,0.0,accept,unanimous_agreement
1403920968,5439,`result` and `blob` are pointers. but if i remember corerctly - we only need to change `blob` [a link],0,0,0,0.987728238105774,0.9911625385284424,0.9937434792518616,0.0,accept,unanimous_agreement
1403921750,5439,i will do that after we finish with handler logic.,0,0,0,0.9842183589935304,0.9854915142059326,0.9927575588226318,0.0,accept,unanimous_agreement
1404240540,5439,is the fluentd image used to generate `trivy/integration/testdata/fluentd-multiple-lockfiles.cdx.json.golden` distroless?,0,0,0,0.9713976979255676,0.9952179193496704,0.9952384233474731,0.0,accept,unanimous_agreement
1404240782,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1404240834,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1411571190,5439,sorry for delay. we use `testdata/fixtures/images/fluentd-multiple-lockfiles.tar.gz` image: [a link],-1,-1,-1,0.987953782081604,0.991078794002533,0.9886321425437928,-1.0,accept,unanimous_agreement
1411573187,5439,this name can be confusing. maybe something like `ospkgid`?,-1,0,0,0.5116260051727295,0.8371848464012146,0.950331687927246,0.0,accept,majority_agreement
1411574928,5439,"i think we need to mode this function to new handler. `purl` package generates purls, but it shouldn't overwrite fanal structure.",0,0,0,0.9880545735359192,0.9671510457992554,0.9878987669944764,0.0,accept,unanimous_agreement
1411794899,5439,"i've trying to figure out why it uses `pkg:dpkg` instead of `pkg:deb/debian`. to do so, i introduced the log below in my branch: [code block] as we can see below: [code block] the scanner only recognizes os family in one of the layers containing packages info from fluentd image. therefore, the packages detected in the other layer are not adapted with the right purl. i need further advice on how to address this.",0,0,0,0.9741722345352172,0.991202712059021,0.9729012846946716,0.0,accept,unanimous_agreement
1411795414,5439,fixed at [a link],0,0,0,0.9883076548576356,0.9854505062103271,0.9949426054954528,0.0,accept,unanimous_agreement
1411795542,5439,fixed at [a link],0,0,0,0.9883076548576356,0.9854505062103271,0.9949426054954528,0.0,accept,unanimous_agreement
1411795681,5439,fixed at [a link],0,0,0,0.9883076548576356,0.9854505062103271,0.9949426054954528,0.0,accept,unanimous_agreement
1413471626,5439,"hm... right. take a look at this feature for merging packages, licenses, secrets, etc. from all layers: [a link]",0,0,0,0.9809078574180604,0.8843216300010681,0.9626167416572572,0.0,accept,unanimous_agreement
1414111787,5439,thanks ! this inspired me to address the issue in this commit: [a link],1,1,1,0.9839088320732116,0.988443911075592,0.9780388474464417,1.0,accept,unanimous_agreement
1414880912,5439,hm... why we got new target?,0,0,0,0.6363375782966614,0.8508132696151733,0.9452426433563232,0.0,accept,unanimous_agreement
1414881571,5439,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1414894031,5439,"i'm not sure if one layer should affect another layer before saving to cache. i can't think of an example right now, but my intuition tells me we don't need to do this. i think it's better to update info after we take all layers from cache. can you share your opinion if you have time?",0,0,0,0.7865978479385376,0.8146512508392334,0.9087636470794678,0.0,accept,unanimous_agreement
1414894791,5439,perhaps this is system file and we didn't remove it.,0,0,0,0.9855567812919616,0.9854323267936708,0.9687029123306274,0.0,accept,unanimous_agreement
1414991653,5439,"no problem on that, we can keep pushing the original layer to the cache by adding this small change: [code block]",0,0,0,0.9858124256134032,0.9375332593917848,0.9857434630393982,0.0,accept,unanimous_agreement
1415046725,5439,"honestly, i don't know how this appeared here but i don't see how it can be related to my changes.",-1,-1,0,0.6411808133125305,0.953059196472168,0.7056530117988586,-1.0,accept,majority_agreement
1423401825,5439,i checked this case. this problem seems to occur because `result` is nil: [a link] handlers don't work,0,0,0,0.861882209777832,0.9898747205734252,0.9924544095993042,0.0,accept,unanimous_agreement
1423464277,5439,i thought about this case and found 1 more way. i made these changes in another branch (i did not update client/server mode and sbom) – [a link] i think this way is easier. we add purl for os packages when filling out `layer` field for os packages: [a link] can you take a look?,0,0,0,0.960282027721405,0.9551456570625304,0.9737398624420166,0.0,accept,unanimous_agreement
1423467929,5439,1 more possible way - [a link],0,0,0,0.9854633808135986,0.9840571284294128,0.9921247363090516,0.0,accept,unanimous_agreement
1423810140,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1423810244,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1423810431,5439,applied your suggestion at [a link],0,0,0,0.9867792129516602,0.9802430272102356,0.9945964217185974,0.0,accept,unanimous_agreement
1424958004,5439,this purl is broken. but this problem is not related to this pr. created #5783 to fix this.,0,-1,0,0.8339220881462097,0.5226321220397949,0.7495995163917542,0.0,accept,majority_agreement
1424986992,5439,we do this when merge layers. it doesn't make sense.,-1,0,0,0.6526602506637573,0.5880287885665894,0.914754033088684,0.0,accept,majority_agreement
1424987858,5439,same for `dpkg` and `rpm`,0,0,0,0.9845985174179076,0.9921261072158812,0.994911253452301,0.0,accept,unanimous_agreement
1424991491,5439,use the correct purl row here.,0,0,0,0.9853675961494446,0.9920561909675598,0.9942189455032348,0.0,accept,unanimous_agreement
1424992253,5439,same for all inputs in this test file.,0,0,0,0.9870187044143676,0.9880043864250184,0.9935252666473388,0.0,accept,unanimous_agreement
1424993946,5439,as for image test - correct purls in this test file.,0,0,0,0.9871740341186525,0.9942688941955566,0.9746420979499816,0.0,accept,unanimous_agreement
1424994658,5439,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1424996086,5439,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1425010064,5439,we need to add logic for `apk` from imgconf - [a link] let me time think about this.,0,0,0,0.9794996976852416,0.9876956939697266,0.9947840571403505,0.0,accept,unanimous_agreement
1425010614,5439,do we need these changes?,0,0,0,0.9849812984466552,0.9894384741783142,0.9927627444267272,0.0,accept,unanimous_agreement
1425011501,5439,looks like these changes from previous solution.,0,0,0,0.9839629530906676,0.9868159890174866,0.989232897758484,0.0,accept,unanimous_agreement
1425013352,5439,remove this?,0,0,0,0.9706291556358336,0.9845433831214904,0.991973638534546,0.0,accept,unanimous_agreement
1425021789,5439,#5784,0,0,0,0.9718465209007264,0.9699450731277466,0.9878067374229432,0.0,accept,unanimous_agreement
1425195743,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1425195963,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1425196134,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1425196369,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1425196515,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1425196657,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1425196881,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1425196995,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1425197312,5439,thanks,1,0,1,0.6094269156455994,0.5400217771530151,0.8643599152565002,1.0,accept,majority_agreement
1425374603,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1426234244,5439,all previous packages are retained. [code block],0,0,0,0.9877912998199464,0.9933907985687256,0.995686411857605,0.0,accept,unanimous_agreement
1426351464,5439,awesome!,1,1,1,0.991037368774414,0.9946492314338684,0.9943788647651672,1.0,accept,unanimous_agreement
1426351686,5439,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1821325001,7732,`scanner engine but is lacking relevant security information needed to make security detections and recommendations. ` we repeat this in the air gap doc as well. is this intentional?,0,0,0,0.9582810401916504,0.9779727458953856,0.9861090779304504,0.0,accept,unanimous_agreement
1821328368,7732,i would remove specific versions from this because they will get out of date easily. already the check-db is at default tag of 1. [code block],0,0,0,0.9850833415985109,0.9926689863204956,0.9924197793006896,0.0,accept,unanimous_agreement
1821332473,7732,comma splice [code block],0,0,0,0.9860196113586426,0.991750419139862,0.9955046772956848,0.0,accept,unanimous_agreement
1821356375,7732,formatting [code block],0,0,0,0.9861038327217102,0.9905270338058472,0.9952463507652284,0.0,accept,unanimous_agreement
1821359289,7732,"you can also add the checks db from [a link] `""mediatype"": ""application/vnd.oci.image.manifest.v1+json""`",0,0,0,0.9881553649902344,0.9946395754814148,0.9961906671524048,0.0,accept,unanimous_agreement
1821366363,7732,fixing table borders [code block],0,0,0,0.987652063369751,0.9909014701843262,0.9952111840248108,0.0,accept,unanimous_agreement
1821366981,7732,should we separate out the three dbs into their own rows?,0,0,0,0.9803895354270936,0.9929893016815186,0.9902522563934326,0.0,accept,unanimous_agreement
1822121564,7732,i thought it's worth reintroducing the motivation since someone might be reading one doc and not the other. i you think it's unnesessary i can remove the intro from the air gap doc.,0,0,0,0.9665066599845886,0.9664153456687928,0.9898888468742372,0.0,accept,unanimous_agreement
1822129367,7732,"actually i don't like adding extra spaces and dashes in markdown, it makes editing very annoying",-1,-1,-1,0.9886587262153624,0.9847330451011658,0.992672324180603,-1.0,accept,unanimous_agreement
1824017702,7732,should be `ghcr.io/aquasecurity/trivy-checks` here?,0,0,0,0.9878283739089966,0.9943878054618835,0.994903802871704,0.0,accept,unanimous_agreement
1824019171,7732,why are some images with tags and some without?,0,0,0,0.9400120377540588,0.9648477435112,0.981113851070404,0.0,accept,unanimous_agreement
1824025903,7732,the database will be loaded from the next repository only in case of a temporary error. (429 status and some 5xx) [a link],0,0,0,0.9893490076065063,0.991178333759308,0.9959316849708556,0.0,accept,unanimous_agreement
1824037010,7732,"it's mentioned here generally and more detailed later in the flags documentation. but ok, added here too",0,0,0,0.9824745059013368,0.9810872673988342,0.97050940990448,0.0,accept,unanimous_agreement
1824136258,7732,"trivy-java-db is not used for pom scanning, and also needed for sbom. [code block]",0,0,0,0.9895750880241394,0.995256006717682,0.9953641891479492,0.0,accept,unanimous_agreement
1824139112,7732,shouldn't we mention which one is the default?,0,0,0,0.972919464111328,0.990483283996582,0.9917840957641602,0.0,accept,unanimous_agreement
1824141840,7732,i think it's more straightforward to aggregate them by artifacts so users can understand which address they can use for secondary. - trivy-db - ghcr.io/aquasecurity/trivy-db (default) - aquasec/trivy-db - public.ecr.aws/aquasecurity/trivy-db - trivy-java-db - ghcr.io/aquasecurity/trivy-java-db (default) - ... --,0,0,0,0.961118757724762,0.9876090288162231,0.9885854125022888,0.0,accept,unanimous_agreement
1824144313,7732,it's repeated. [code block],0,0,0,0.986406147480011,0.9901602864265442,0.9932519793510436,0.0,accept,unanimous_agreement
1824145174,7732,"we call it ""checks bundle"" in all other places. do we want to rename it officially?",0,0,0,0.9836920499801636,0.9941686391830444,0.9934439659118652,0.0,accept,unanimous_agreement
1824146572,7732,the git protocol is not used for vex repositories. [code block],0,0,0,0.9874109625816344,0.989778220653534,0.9944887161254884,0.0,accept,unanimous_agreement
1824147744,7732,adding a link to the page about self-hosting?,0,0,0,0.983393371105194,0.9918491840362548,0.9947643280029296,0.0,accept,unanimous_agreement
1824151665,7732,"a comma also works, but the repeated flags may be easier to understand the intention. [code block]",0,0,0,0.9869422912597656,0.9921894073486328,0.9940438866615297,0.0,accept,unanimous_agreement
1824296252,7732,"i thought that the authoritative section is this one, which describes all the db flags, and the db locations section on top should point here, not the other way around.",0,0,0,0.9852489829063416,0.9879366755485536,0.9839245080947876,0.0,accept,unanimous_agreement
1824298409,7732,i'm fine with it.,0,0,0,0.9246673583984376,0.8383365273475647,0.6400198340415955,0.0,accept,unanimous_agreement
1824301936,7732,"i'm fine with making the change, but just thinking users might have a mirror preference based on their infrastructure, for example an aws customer would probably prefer ecr for all of the images.",0,0,0,0.971535623073578,0.9439457654953004,0.8266345262527466,0.0,accept,unanimous_agreement
1824304998,7732,"i thought that all official repos should be used by default, in the order specified. but i realize this is not the case.",0,0,0,0.8369308114051819,0.9858912825584412,0.9724211096763612,0.0,accept,unanimous_agreement
1824314762,7732,"i think you named it ""checks bundle."" what do you think?",0,0,0,0.9841444492340088,0.9897353649139404,0.9472497701644896,0.0,accept,unanimous_agreement
1825163703,7732,yeah checks bundle is good with me.,1,1,1,0.7393147349357605,0.5142225623130798,0.6008134484291077,1.0,accept,unanimous_agreement
1825388091,7732,"is calling it ""checks database"" in this pr. we should be consistent in what we call it within the project. either is fine for me. - checks bundle - checks database note we already have a flag `--checks-bundle-repository` and need to rename it to `--checks-db-repository` if we'll go with checks database. [code block]",0,0,0,0.9599742293357848,0.9882213473320008,0.9661508798599244,0.0,accept,unanimous_agreement
1832129641,7732,need a newline ![a link] [code block],0,0,0,0.958742082118988,0.982876718044281,0.9242107272148132,0.0,accept,unanimous_agreement
1832132852,7732,does docker work for this purpose?,0,0,0,0.9839644432067872,0.9925832748413086,0.9948286414146424,0.0,accept,unanimous_agreement
1832133236,7732,i'd mention [a link] as we usually use it.,0,0,0,0.98710697889328,0.9832026362419128,0.9930574893951416,0.0,accept,unanimous_agreement
1832133778,7732,"need to add ""self-hosting trivy's databases""",0,0,0,0.9860325455665588,0.9925411939620972,0.993999719619751,0.0,accept,unanimous_agreement
1832136875,7732,"this page also explains network connectivity, but it's not the main content. this document is for those who want to run trivy under the restricted network. the title should be ""advanced network scenarios,"" ""restricted networks,"" or something similar.",0,0,0,0.9799096584320068,0.9828190207481384,0.992493212223053,0.0,accept,unanimous_agreement
1832138699,7732,it's broken now. need a tab. ![a link],-1,-1,-1,0.4867493510246277,0.8383222818374634,0.995031714439392,-1.0,accept,unanimous_agreement
1832140803,7732,"the first section is an artifact name ""vulnerability & java databases"", but this section is a scanner name. we should rename ""vulnerability & java databases"" to ""sbom & vulnerabiliity scanning"" or rename this to ""iac checks"" for consistency.",0,0,0,0.9883838891983032,0.9954000115394592,0.9941153526306152,0.0,accept,unanimous_agreement
1832142944,7732,"if we use the term ""misconfiguration database"", shouldn't it be ""embedded misconfiguration database""?",0,0,0,0.9612000584602356,0.9930769205093384,0.987995445728302,0.0,accept,unanimous_agreement
1832143501,7732,ditto [code block],0,0,0,0.9835489988327026,0.987265944480896,0.9920666217803956,0.0,accept,unanimous_agreement
1832146441,7732,"it's already described in ""trivy's databases"". imo, we should link to the page rather than repeat repository locations.",0,0,0,0.9863134622573853,0.9728006720542908,0.9924731254577636,0.0,accept,unanimous_agreement
1832148419,7732,i don't think we will set all of them as the default repositories shortly. we should mark which one is the default for now.,0,0,0,0.9827409386634828,0.944229543209076,0.9741246104240416,0.0,accept,unanimous_agreement
1833188766,7732,"since the intro says ""the rest of this document details each resource's connectivity requirements and relevant configuration options."" i'll go with ""misconfiguration checks database""",0,0,0,0.9876656532287598,0.9927414655685424,0.9906983971595764,0.0,accept,unanimous_agreement
1833193676,7732,"my implicit thought process was the checks from the misconfiguration db are embedded as a workaround to avoid loading the db, but it's very semantic and doesn't really matter.",0,0,0,0.8276430368423462,0.9560012817382812,0.9742936491966248,0.0,accept,unanimous_agreement
1833201072,7732,"my implicit thought process was that the this doc discusses all the network requirements and implications, so when discussing these dbs we need to mention where they are located (in addition to other network related info). in the dbs doc, i didn't intend to dive into network requirements, but i wanted to say that we push the dbs to several registries and are able to fallback between them. so there might be slight overlap, only the name of the images is repeated, but in different context that contribute the the doc's purpose. if we are removign one in favor of the other, then i'd need to move the related content with it, for example if i take your suggestion, i would need to move the protocol, hosts, and related info to the db docs together with the names of images.",0,0,0,0.9519585967063904,0.9483469724655152,0.9648615717887878,0.0,accept,unanimous_agreement
1833842493,7732,"can you elaborate on that? it makes sense that the overview is on the db page and the details are on this page, but why do we have to move everything?",0,0,0,0.9830777049064636,0.9872779846191406,0.988507866859436,0.0,accept,unanimous_agreement
1833848784,7732,"i think we should define terms regarding misconfigurations. what is the misconfiguration database? is it pointing to the bundle.tar.gz? after extracting it, do we call it checks? embedded one is not archived, so we call it checks? i don't have an opinion, but it would be a good idea to define the terminology and share it within the project.",0,0,0,0.9459151029586792,0.9295604228973388,0.8661420941352844,0.0,accept,unanimous_agreement
1834738823,7732,i think i misunderstood you earlier. i made the change that i think you suggested,-1,0,0,0.5296502709388733,0.8431693911552429,0.8427470326423645,0.0,accept,majority_agreement
1835115149,7732,i'm also fine with either.,0,0,0,0.9489957690238952,0.8749536871910095,0.9642046093940736,0.0,accept,unanimous_agreement
1838783376,7732,what about the [a link]?,0,0,0,0.9837679266929626,0.9916115403175354,0.9932934045791626,0.0,accept,unanimous_agreement
1838790985,7732,"this explanation is weird; ""the order"" is one single registry, while these ""alternative registries"" is not explained. if this refers to the locations named above, then it would make more sense to say that ghcr is the primary source and the other locations listed above would be attempted in case of transient errors.",-1,-1,-1,0.975155770778656,0.942276895046234,0.9870550632476808,-1.0,accept,unanimous_agreement
1838794060,7732,should vex repos not be treated in this section?,0,0,0,0.976109743118286,0.9919064044952391,0.9863535165786744,0.0,accept,unanimous_agreement
1838796808,7732,"it makes sense to explain what will happen in this case; explicitly state that the local registry is tried first, and if it does not respond, then the gitlab source is attempted",0,0,0,0.9875195026397704,0.9923753142356871,0.9879862666130066,0.0,accept,unanimous_agreement
1838798566,7732,the `--offline-scan` option is not explained in this entire page,0,0,0,0.9865846037864684,0.9935050010681152,0.992896854877472,0.0,accept,unanimous_agreement
1838801012,7732,"the `alpine` image is used in two other examples, i think it's a nice example because it is a reasonable copy-paste tryout",1,1,1,0.680934488773346,0.830548107624054,0.9188271760940552,1.0,accept,unanimous_agreement
1838803284,7732,"please explain the use case for the ""only update"" option. does it fill a cache (if so, which cache) which can be used in a succession of scans (i.e. iterating over a set of containers without attempting updates all the time)?",0,0,0,0.989025056362152,0.99443781375885,0.9919469952583312,0.0,accept,unanimous_agreement
1838804730,7732,"it is strange that there is no entry for the `check` db, while the previous sections all mention it. perhaps address the reason as to why it isn't a possible option",0,0,-1,0.7742952704429626,0.6155832409858704,0.7335929870605469,0.0,accept,majority_agreement
1838807001,7732,"strange that this is called `vuln-db`, but i guess it's because `db` would be too confusing. likewise, the `checks-bundle` is always `checks` in the more lengthier parameters. is there a separate ticket or discussion which treats the naming of these options?",0,0,0,0.8523821234703064,0.976545751094818,0.5725633502006531,0.0,accept,unanimous_agreement
1838811830,7732,"indentation below this block is probably incorrect, if so, the change should be undone",0,0,0,0.971362054347992,0.9681513905525208,0.987093150615692,0.0,accept,unanimous_agreement
1838812208,7732,"indentation below this block is probably incorrect, if so, the change should be undone",0,0,0,0.971362054347992,0.9681513905525208,0.987093150615692,0.0,accept,unanimous_agreement
1838813678,7732,"this line makes more sense in the parent section, in an explanation around line 42 just after `surgically populate the trivy cache directory with them.`",0,0,0,0.9819289445877076,0.9915168285369872,0.9908654093742372,0.0,accept,unanimous_agreement
1838814848,7732,"in `db.md`, this is referred to this as the `misconfiguration db`",0,0,0,0.9581918120384216,0.9949166774749756,0.9932925701141356,0.0,accept,unanimous_agreement
1838818073,7732,then why is it treated in a separate section and not together with the vulnerability and java dbs?,0,0,0,0.9755918383598328,0.9929512143135072,0.9876590371131896,0.0,accept,unanimous_agreement
1838819329,7732,does the `--offline-scan` parameter affect these https requests?,0,0,0,0.9876546263694764,0.9942200183868408,0.9946151375770568,0.0,accept,unanimous_agreement
1838820377,7732,"when the vex hub sources are overridden (e.g. with a local repo), are calls to github still made or will they be omitted?",0,0,0,0.985513150691986,0.9955818057060242,0.9924680590629578,0.0,accept,unanimous_agreement
1838821944,7732,is there a reference to a page that explains in which cases this might happen? it seems rather arbitrary although it would be important to know when implementing an air gapped environment,0,0,0,0.9695386290550232,0.9320842027664183,0.9550254940986632,0.0,accept,unanimous_agreement
1838826118,7732,"this seems weird to note in an air gapped or otherwise restricted network environment, it should be explained on `configuration/db.md`. instead, it might be useful to address a restricted network environment which implements rate limiting (i.e. the local infrastructure instead of the public infrastructure).",-1,-1,-1,0.9092043042182922,0.9173028469085692,0.9665582180023192,-1.0,accept,unanimous_agreement
1850042174,7732,"i wanted to differentiate ""databases"" from ""external resources"". db is maintained by the trivy team and is fundemental to trivy operation. other external resources might be used by trivy like maven central, which are not considered ""databases"". vex repositories currently fall into the latter category i think",0,0,0,0.973149597644806,0.9926835894584656,0.9857434630393982,0.0,accept,unanimous_agreement
1850043786,7732,the section was rewritten lmk if it's still unclear,0,0,0,0.9878316521644592,0.9709247350692748,0.991033375263214,0.0,accept,unanimous_agreement
1850044950,7732,see response to other similar comment,0,0,0,0.9813743233680724,0.98906809091568,0.9918415546417236,0.0,accept,unanimous_agreement
1850136390,7732,"i think the example is self explanatory, especially since it the preceding example is exactly the same jsut with one flag, and is supposedly clear. this example just shows how specify multiple values",0,0,0,0.9820575714111328,0.9391251802444458,0.9124954342842102,0.0,accept,unanimous_agreement
1850141996,7732,"this section relates only to vex hub, not to custom vex repositories. when using custom vex repositories there are no calls to github, do you think that isn't clear?",0,0,0,0.9851672053337096,0.987653911113739,0.9939753413200378,0.0,accept,unanimous_agreement
1850148317,7732,"no. i think the documentation is accurate about this, however confusing the name of offline-scan is. i have raised this issue here: [a link]",0,0,0,0.9606067538261414,0.9576280117034912,0.9779996275901794,0.0,accept,unanimous_agreement
1850149156,7732,the section now shows which external resource is used by which trivy feature,0,0,0,0.9848010540008544,0.994365930557251,0.9944416880607604,0.0,accept,unanimous_agreement
1850152284,7732,"the document was renamed to ""connectivity and network considerations"". it should be noted that all external resources can be unstable. in fact, we experienced stability issues with maven central too in the past.",0,0,0,0.9748029112815856,0.990579068660736,0.993615984916687,0.0,accept,unanimous_agreement
1855451208,7732,yes. updated,0,0,0,0.9782312512397766,0.9654099345207214,0.9796229004859924,0.0,accept,unanimous_agreement
1855452049,7732,added. cc:,0,0,0,0.9843207597732544,0.984535276889801,0.9836365580558776,0.0,accept,unanimous_agreement
1855452338,7732,agree. i also mention this in several previous issues (that we need to standardize the names of databases) cc . for now that state is accurate,0,0,0,0.9683930277824402,0.9651085734367372,0.9620923399925232,0.0,accept,unanimous_agreement
1855452761,7732,"this moved to a new doc, but i checked that the tabs rendering works",0,0,0,0.9876006841659546,0.9859132170677184,0.9939451813697816,0.0,accept,unanimous_agreement
1855452804,7732,see other comment,0,0,0,0.9847960472106934,0.9767111539840698,0.990841031074524,0.0,accept,unanimous_agreement
1855453044,7732,i think it reads ok now in the self-hosting document,0,0,0,0.9814013838768004,0.9137526750564576,0.8491503596305847,0.0,accept,unanimous_agreement
1855453417,7732,i didn't see this comment earlier but already merged them :),1,1,0,0.9429960250854492,0.957734763622284,0.989833116531372,1.0,accept,majority_agreement
1855931383,7732,they deprecated container registry and migrated to artifact registry. [code block],0,0,0,0.9894211292266846,0.9935190081596376,0.9927886128425598,0.0,accept,unanimous_agreement
1855960786,7732,do you think it is self-hosting?,0,0,0,0.9823234677314758,0.9914359450340272,0.9884429574012756,0.0,accept,unanimous_agreement
1856248338,7732,"yes. i initially made this doc only about oci hosting like you suggested but i couldn't help thinking it's exactly the same use case and motivation as cache-population, just different technique, so i put them together. i also added other self-hosting advice for example for vexhub. so the current structure is like: 1. network connectivity doc - explains why trivy access the internet and documents all external resources details 2. self-hosting - explains how to run trivy without internet access (should address all external resources exaplained in 1) 3. db doc - documents trivy's ""native"" databases (owned and maintained by trivy and cruicial to it's functioning), and the flags related to db management. p.s i even considered making the self-hosting guide into tutorials",0,0,0,0.8867103457450867,0.955367147922516,0.9126478433609008,0.0,accept,unanimous_agreement
1856386362,7732,"![a link] ""hosting"" sounds like accessing the data over the network. but i'll update it later as i want to re-add ""air-gapped environment"". i saw many people using trivy in air-gapped environments. we need a single page for them.",0,0,0,0.8357616066932678,0.6666067242622375,0.86307692527771,0.0,accept,unanimous_agreement
1856393983,7732,"i don't think it's resolved. i want to make a decision on terminology excplicitly. otherwise, ""check"", ""policy"" ""bundle"" and ""database"" will be mixed up in the document in the future. also, as i mentioned, we need to rename the cli flag of `--checks-bundle` if we change the term. also, there are several places calling it ""checks bundle"". [a link] [a link]",0,0,0,0.9725621342658995,0.9805152416229248,0.9346101880073548,0.0,accept,unanimous_agreement
1856423997,7732,"i discussed with ai and now would like to vote for ""bundle"" as below: - check: rego file - built-in checks: rego files from trivy-checks - custom checks: user-defined rego files - checks bundle: bundle.tar.gz from trivy-checks - embedded checks: rego files embedded into the binary but i just want to make them consistent in the project. any others are also fine for me.",0,0,0,0.5875213146209717,0.7080436944961548,0.9257734417915344,0.0,accept,unanimous_agreement
1856450172,7732,"i don't mind changing the name or explicitly call it ""air gapped"" but i do think hosting oci image in private registry or manually populating the cache is 100% same use case, don't you think?",0,0,0,0.942931592464447,0.9607571363449096,0.9667046666145324,0.0,accept,unanimous_agreement
1856468662,7732,"this terminology list makes sense to me.. but i think we already use it this way so not sure what is the change you are suggesting 1. policy -> check: was discussed before (i can find the issue) 2. built-in/custom/embedded: it only makes sense to contextualize when needed, i think we use this terminology this way already. 3. bundle: this is opa terminology that i believe we borrowd which is fine, when applied to the distributable tar.gz. i'm trying to clarify your feedback, is it against using the word ""database"" for checks? if so, the list doesn't address this case, what is your suggstion?",0,0,0,0.6801056265830994,0.9363266825675964,0.9293349981307985,0.0,accept,unanimous_agreement
1856507303,7732,"yes, i believe this is how we use terms now, but i wanted to ensure we're on the same page. and then, 1. do we all agree to add the term ""database""? 2. if so, how will we update the terminology?",0,0,0,0.8635302782058716,0.972767174243927,0.987963080406189,0.0,accept,unanimous_agreement
1857234502,7732,"specially for the suggestion that you made above, i'm not sure if we need to change the terminology to use ""database"". what you mentioned [a link] makes sense to me and is the current terminology that we agree on. if so, is there any action item that still needs to addressed out of this?",0,0,0,0.967712938785553,0.9819974303245544,0.9054572582244872,0.0,accept,unanimous_agreement
1857781669,7732,"this pr introduces several new terms, like [a link], [a link] and [a link]. i want to clarify what it refers to and whether we agree on the term. if we prefer [a link], we should delete ""misconfigurations database"" or things like that from this pr.",0,0,0,0.982797622680664,0.989629566669464,0.9858705401420592,0.0,accept,unanimous_agreement
1857884812,7732,how should we call it then?,0,0,0,0.9661821722984314,0.9883493185043336,0.990347981452942,0.0,accept,unanimous_agreement
1857938613,7732,"i don't probably understand your suggestion. what is ""misconfigurations database""? i thought it was trying to replace ""checks bundle"". according to the conclusion that we'd stay with the current terminology, we continue to use ""checks bundle"" instead of ""misconfigurations database"". but i'm confused with your question. does ""misconfigurations database"" mean something new?",-1,-1,-1,0.9047214388847352,0.5978003144264221,0.8363280892372131,-1.0,accept,unanimous_agreement
1857996716,7732,"ok, i thought that we call all the trivy's native sources of information - databases, regardless of their underlying technology or file format. i thought bundle is just a technical term we inharited from opa to refer to the file format (specified by opa), but we still call it checks database when referring to it's functionality in trivy, so i didn't view those terms as mutually exclusive. i don't mind calling it checks bundle everywhere, if that's what you suggest (but i also think it's not benefiting the user experience). do you also think we should remove it from the databases page?",0,0,0,0.8752015233039856,0.9626957178115844,0.9534224271774292,0.0,accept,unanimous_agreement
1858014322,7732,"oh, i didn't know that. i thought ""checks database"" was introduced in this pr. where do we use the term in trivy? since we already use ""checks bundle"" in the documentation and have a cli flag ""--checks-bundle-repository"", it's user-facing. we should use either ""checks bundle"" or ""checks database"". if we go for ""checks database"", we should delete ""checks bundle"" and vice versa. btw, i'd propose calling the external data ""scan assets"" instead of ""databases"". then, it's natural to keep ""checks bundle"" under the page. [a link]",0,0,0,0.8412675857543945,0.961577534675598,0.7185893654823303,0.0,accept,unanimous_agreement
1858059550,7732,"i wrote that *i thought* we still call it checks database.. probably my misunderstanding about scan assets, i think i went in this direction with the connectivity considerations doc where i called these ""external resources"" to that are required by trivy. but to clarify your intention - do you consider vex hub and/or maven central as scan assets? how would you refer to (for example) the vex hub file (not a database i suppose)? about the databases page - it was originally created in order to document the relevant trivy options. the options groups today include ""db options"" for just vulnerability dbs options, ""vulnerabilities scanner"" which doesn't have any vulnerability dbs options, and ""misconfigurations scanner"" options which includes checks and checks bundle related options. do you suggest to change this as well?",0,0,0,0.9109572172164916,0.9229639768600464,0.9550682306289672,0.0,accept,unanimous_agreement
1858166226,7732,"hmm. and should be more familiar with that. i've personally never seen that. i defined ""scan assets"" as external data that trivy downloads and uses during scanning. [a link] therefore, vex hub is an asset as trivy downloads it during scanning, but any api call, like maven central, is not an asset. we should also mention api calls on the network connectivity page, though. however, i'd put this discussion aside. i'll open a follow-up pr to share my suggestion. we can discuss ""checks database"" or ""checks bundle"" here.",0,1,0,0.8439237475395203,0.5896223187446594,0.9144803881645204,0.0,accept,majority_agreement
1858177034,7732,"i found one use, but i think it's a mistake. i now understand why used ""misconfiguration database"". [a link]",-1,0,0,0.5936806797981262,0.97230726480484,0.952534556388855,0.0,accept,majority_agreement
1858182061,7732,"i thought ""misconfiguration database"" was a newly introduced term. thought ""misconfigurations database"" was already used and just reused it. most pages call it a checks bundle. so, a checks bundle is the canonical term, imo. i think we should comply with that.",0,0,0,0.973738729953766,0.9757274389266968,0.9733866453170776,0.0,accept,unanimous_agreement
1858189037,7732,so next steps to merge this pr - 1. change checks db to checks bundle 2. change databases page to scan assets does that make sense to you?,0,0,0,0.9843398332595824,0.9876563549041748,0.9948658347129822,0.0,accept,unanimous_agreement
1858194408,7732,i'm fine with only the first item as the second item requires additional changes. let me try the second one in a separate pr.,0,0,0,0.9686112999916076,0.9618952870368958,0.9879868626594543,0.0,accept,unanimous_agreement
1858230301,7732,"ok. ptal at [a link] imo it now feels out of place in some cases in the context of other ""databases"" but if we will change the context then it might be ok.",0,0,0,0.9749152064323424,0.6564302444458008,0.9505511522293092,0.0,accept,unanimous_agreement
1859110904,7732,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement
502910984,679,i think we can drop `errcheck`.,0,0,0,0.9866899251937866,0.969366192817688,0.9872944951057434,0.0,accept,unanimous_agreement
502911243,679,i'm just curious which linter says this.,0,-1,0,0.846001923084259,0.4988758862018585,0.954111099243164,0.0,accept,majority_agreement
502911339,679,do we have to add `filepath.clean` to all file-related functions? i'm feeling like it is meaningless.,-1,-1,-1,0.952638864517212,0.9280411005020142,0.93351811170578,-1.0,accept,unanimous_agreement
502911549,679,read this [a link],0,0,0,0.9880918264389038,0.987898886203766,0.9947448968887328,0.0,accept,unanimous_agreement
502911936,679,"i can drop it, but then we are enabling developers to ignore errors, i think we should keep it, at least the developer should log the error, it will help us if we miss errors while development.",0,0,0,0.9534797668457032,0.9809256196022034,0.9744600057601928,0.0,accept,unanimous_agreement
502912348,679,"it is the case when we know the size in advance. in this case, we specify 0, so i think the performance is worse than before.",-1,0,0,0.5038270354270935,0.9557881951332092,0.9281675219535828,0.0,accept,majority_agreement
502912514,679,"yes, but in some cases, a path is hard-coded. it doesn't make sense to apply `filepath.clean`. this should be done for user input only.",0,0,0,0.9616150856018066,0.9881712198257446,0.9889849424362184,0.0,accept,unanimous_agreement
502912879,679,"so if i don't clean it i will get linter errors, will this cause any issues?",0,0,0,0.838370680809021,0.823814868927002,0.9779027104377748,0.0,accept,unanimous_agreement
502913383,679,"it is better to have it, but we have to add `// nolint: errcheck` to all `defer` and some tests. it's a bit bothering me. do we have another way besides `nolint`?",-1,-1,-1,0.8357070088386536,0.9633726477622986,0.9578121900558472,-1.0,accept,unanimous_agreement
502922153,679,"i don't see performance difference in the benchmark test with 1000 size, do you want me to run with bigger numbers?",0,0,0,0.97712379693985,0.926633894443512,0.9767389297485352,0.0,accept,unanimous_agreement
502922513,679,"i already skipped the test and mock files in the linter config so this is not required in tests, another way would be to have a common package for system functions and instead of calling file.open and closing in defer we will call the custom package function to get file reader.",0,0,0,0.987691044807434,0.9941105246543884,0.9937561750411988,0.0,accept,unanimous_agreement
502927128,679,"btw, i checked performance with preallocating the base capacity and its better than not allocating [a link]",0,0,0,0.978298008441925,0.9764907360076904,0.8837150931358337,0.0,accept,unanimous_agreement
503073155,679,you can disable the linter. we don't have to follow all warnings from linters.,0,0,0,0.9813000559806824,0.9785056710243224,0.9923640489578248,0.0,accept,unanimous_agreement
503081284,679,"ah, you didn't specify capacity. in that case, the performance should be the same as `var arr []int`. it means we don't have to change it. for example, `len(advisories)` is much greater than the length `vulns` requires. so, memory is wasted. [a link] if the number of elements is the tens of thousands or millions and it takes a few minutes, it's better to specify the capacity beforehand. but in our case, it is only 10 or 100 and takes only in milliseconds. the performance may improve slightly, but it wastes memory (depending on the situation) and reduces readability. we don't have to think about performance for now and should keep it simple. i'm feeling like ""premature optimization is the root of all evil"".",0,0,0,0.941303849220276,0.9817295670509338,0.971562683582306,0.0,accept,unanimous_agreement
503358102,679,i have added the exception for obvious cases and now we don't need to add nolint in general cases.,0,0,0,0.9855589866638184,0.986729383468628,0.9925814867019652,0.0,accept,unanimous_agreement
503358814,679,"removed preallocate linter, reverted changes",0,0,0,0.9838432669639589,0.9919899106025696,0.9873140454292296,0.0,accept,unanimous_agreement
503358900,679,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
503678709,679,"also, i found a warning from golangci-lint. [a link]",0,0,0,0.9848815202713012,0.9886454343795776,0.9945173859596252,0.0,accept,unanimous_agreement
503685196,679,can we disable only g304 as follows? [a link],0,0,0,0.9898098707199096,0.9942440390586852,0.9962504506111144,0.0,accept,unanimous_agreement
503685782,679,already removed [a link],0,0,0,0.9875161647796632,0.9847303628921508,0.9947304725646972,0.0,accept,unanimous_agreement
503687580,679,v1.29 looks a bit old. [a link],0,0,0,0.7834010124206543,0.9536788463592528,0.5203536152839661,0.0,accept,unanimous_agreement
503688764,679,"we've not introduced a new dependency, right? why were some dependencies added? it's weird if you are using go 1.15.",-1,-1,-1,0.9187913537025452,0.9718384146690368,0.9881354570388794,-1.0,accept,unanimous_agreement
503689676,679,you can exclude `integration/` for errcheck. the directory contains only test-related files.,0,0,0,0.9893755912780762,0.994629442691803,0.9951645135879515,0.0,accept,unanimous_agreement
503690284,679,we have to ignore this error. an error always occurs the first time. this change breaks trivy and trivy won't launch forever. could you add `nolint`?,0,0,0,0.8495044112205505,0.9198989272117616,0.9741723537445068,0.0,accept,unanimous_agreement
503691447,679,is this necessary?,0,0,0,0.9814280271530152,0.9865994453430176,0.990889608860016,0.0,accept,unanimous_agreement
503692900,679,the length of severity is only 5. we don't have to specify the capacity in advance.,0,0,0,0.9814541935920716,0.9899408221244812,0.991622269153595,0.0,accept,unanimous_agreement
503693147,679,see a comment,0,0,0,0.9857800602912904,0.9823117256164552,0.976525068283081,0.0,accept,unanimous_agreement
503694905,679,"could you keep it as is? this script shows eol dates to stdout and the error pollutes stdout. or, it might work to show it in stderr.",0,0,0,0.9893071055412292,0.9921608567237854,0.99320650100708,0.0,accept,unanimous_agreement
503694941,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
503697879,679,which linter warns like this? and i'd like to know the detail.,0,0,0,0.9788438081741332,0.799056887626648,0.9903649687767028,0.0,accept,unanimous_agreement
503698462,679,`default` must be slim in this case. this change doesn't make sense.,-1,0,0,0.551014244556427,0.9300838112831116,0.9313604235649108,0.0,accept,majority_agreement
503700163,679,could you add a comment that we can't find eol of photon os? [a link],0,0,0,0.9884176850318908,0.993118166923523,0.9950543642044068,0.0,accept,unanimous_agreement
503722380,679,it may be unnecessary. you can remove it.,0,0,0,0.9503496289253236,0.9852288365364076,0.9930768013000488,0.0,accept,unanimous_agreement
503723562,679,what kind of error is this? does a linter say `_` should not be used?,0,0,0,0.8889153599739075,0.9697707295417786,0.9791561365127563,0.0,accept,unanimous_agreement
503724446,679,this `filepath.clean` is necessary.,0,0,0,0.9855074882507324,0.9922653436660768,0.9956943988800048,0.0,accept,unanimous_agreement
503724502,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
503728196,679,"we already defined `less`, so what if adding `len` and `swap` so that we can use `sort.sort`? [a link]",0,0,0,0.9879769682884216,0.9946586489677428,0.9949461817741394,0.0,accept,unanimous_agreement
503729541,679,"such a change would increase the pr size. it makes review difficult. can we disable the linter once, revert this change, add todo, and fix it in the dedicated pr?",0,0,0,0.9216007590293884,0.8746145963668823,0.9759634733200072,0.0,accept,unanimous_agreement
503729743,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
503730656,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
503730743,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
503846645,679,"yes gocyclo linter was complaining about cyclomatic complexity of more than 10, i had to return to make it under 10",-1,0,0,0.7917079925537109,0.5840898752212524,0.96308696269989,0.0,accept,majority_agreement
503847753,679,"yes gocyclo linter was complaining about cyclomatic complexity of more than 10, i had to remove default and return early to make it under 10",-1,0,0,0.8343951106071472,0.6699737906455994,0.9666475653648376,0.0,accept,majority_agreement
503848425,679,"yes linter says, import of types ""_"" should be defined in the main file or should contain comment.",0,0,0,0.9883765578269958,0.9939090013504028,0.9945743680000304,0.0,accept,unanimous_agreement
503852778,679,"shadow: declaration of ""err""",0,0,0,0.9756847620010376,0.9940754175186156,0.9927296042442322,0.0,accept,unanimous_agreement
503885683,679,"this shadow? if so, the module generates many false positives. [a link] it looks like this example disables `shadow`. but it's weird that `check-shadowing` is true... [a link]",-1,-1,-1,0.9813251495361328,0.80636066198349,0.873030424118042,-1.0,accept,unanimous_agreement
503892143,679,updated,0,0,0,0.968149185180664,0.968669593334198,0.7592994570732117,0.0,accept,unanimous_agreement
503892247,679,:thumbs_up:,0,0,1,0.8380307555198669,0.9771975874900818,0.9533231854438782,0.0,accept,majority_agreement
503894184,679,"btw, i already declared fixedversion will it work?",0,0,0,0.9894428253173828,0.9904526472091676,0.9901913404464722,0.0,accept,unanimous_agreement
504549521,679,"could you disable `shadow` and revert it? or, can we disable `shadow` only for `err`?",0,0,0,0.9865272641181946,0.9947885274887084,0.9941291809082032,0.0,accept,unanimous_agreement
504549658,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
504715263,679,"hmm... i prefer the previous one. if we follow the linter, `return xxx.newscanner()` looks better.",0,0,0,0.6628332138061523,0.9637356996536256,0.8747226595878601,0.0,accept,unanimous_agreement
505226763,679,"it was for running the linter check in workflow here, reverted",0,0,0,0.9875760078430176,0.9912304878234864,0.9925041198730468,0.0,accept,unanimous_agreement
505234213,679,doesn't it work as follow? [a link],0,0,0,0.9859763383865356,0.9886137247085572,0.9961218237876892,0.0,accept,unanimous_agreement
505235826,679,reverted to rahul2393?,0,0,0,0.980991542339325,0.9929848313331604,0.9938272833824158,0.0,accept,unanimous_agreement
505276889,679,"ok, done,",0,0,0,0.9745250344276428,0.6858764886856079,0.9673718810081482,0.0,accept,unanimous_agreement
507664932,679,"they are also `github.com/aquasecurity`, but look like a different group from l13-l18.",0,0,0,0.9814761281013488,0.9924864768981934,0.9912776947021484,0.0,accept,unanimous_agreement
507666064,679,do we need these empty lines?,0,0,0,0.984172821044922,0.9852266907691956,0.990503191947937,0.0,accept,unanimous_agreement
507666384,679,"also, i think we can merge it into the group in l12-",0,0,0,0.9800026416778564,0.986527979373932,0.9934300780296326,0.0,accept,unanimous_agreement
507671160,679,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
507671231,679,"no, removed",0,0,0,0.9545906782150269,0.9733774662017822,0.9883727431297302,0.0,accept,unanimous_agreement
508221338,679,could you group them?,0,0,0,0.9862146973609924,0.9922764897346495,0.9923753142356871,0.0,accept,unanimous_agreement
508221422,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
508221463,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
508221558,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
508221852,679,same here,0,0,0,0.982987642288208,0.9628711938858032,0.99204421043396,0.0,accept,unanimous_agreement
508223728,679,"i'd like to know why `gocyclo` complains `default`. is it only about `default`? or, even if we remove `default` and add a new family, will `gocyclo` complain again?",0,0,0,0.9846267104148864,0.9844877123832704,0.9738121628761292,0.0,accept,unanimous_agreement
508223936,679,grouping,0,0,0,0.9712930917739868,0.9033780694007874,0.9893452525138856,0.0,accept,unanimous_agreement
508224136,679,grouping,0,0,0,0.9712930917739868,0.9033780694007874,0.9893452525138856,0.0,accept,unanimous_agreement
508224245,679,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
508224332,679,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
508233322,679,"even if you replace the default with a different case, it will complain because by default cyclomatic complexity of 10, and for this function, default branch is adding up to 11",0,0,0,0.7556325197219849,0.967445433139801,0.9363752007484436,0.0,accept,unanimous_agreement
508449247,679,"so, removing `default` doesn't address the root issue. let's consider it carefully later.",0,0,0,0.9840441346168518,0.9727606177330016,0.9908646941184998,0.0,accept,unanimous_agreement
1624284348,6781,i found that the backport pr title also needs to follow [a link] so release please can create release prs. i changed the backport pr title to use the original one.,0,0,0,0.982559859752655,0.990972638130188,0.99441397190094,0.0,accept,unanimous_agreement
1624288868,6781,"after testing for a while, i found it difficult to understand backported prs without a label, so i've added one. - prs that we want to backport: `backport-to-release/v0.50` - prs created by the tool ""backport"": `backport` cc:",0,0,0,0.9739911556243896,0.9915509223937988,0.9789601564407348,0.0,accept,unanimous_agreement
1624773827,6781,what release would it backport to? would it automatically pickup the patch or minor depending on (fix/chore/etc.) and (feat)?,0,0,0,0.9874695539474488,0.9951373934745787,0.9944931268692015,0.0,accept,unanimous_agreement
1625314904,6781,"i've updated my comment. it's simple. if we label ""backport-to-release/v0.52"" to a pr, the tool ""backport"" will cherry-pick the commit from the pr in the main branch and create a new pr with label ""backport"" aginst the branch ""release/v0.52"". it's backporting from ""main"" to ""release/v0.52"".",0,0,0,0.9813546538352966,0.7862628698348999,0.9631741046905518,0.0,accept,unanimous_agreement
1625568196,6781,"we will only process prs with `backport-to- ` tag. this means that all necessary prs will be caught by the `labeled` trigger, right?",0,0,0,0.9873148202896118,0.994318664073944,0.9938287138938904,0.0,accept,unanimous_agreement
1625572751,6781,we will also see many similar errors for closed prs - [a link],0,0,0,0.9844621419906616,0.9839950799942015,0.9931922554969788,0.0,accept,unanimous_agreement
1625586651,6781,but we may want to use the following steps: 1. open pr 2. set `backport-to- ` label 3. merge pr 4. run this action in this case we will see error in p2 - [a link],0,0,0,0.9845619797706604,0.9937381744384766,0.9956480860710144,0.0,accept,unanimous_agreement
1625592583,6781,let's add one step before `backport action` to check label/`merge pr` to avoid an error (and just stop this action).,0,0,0,0.9878491759300232,0.9915255904197692,0.994074285030365,0.0,accept,unanimous_agreement
1625658299,6781,we need to create new branch from release tag of `main` branch. take a look the following example([a link] 1. i pushed tag 2. i pushed commit (`test commit`) 3. after that i created `release/v0.54` branch. in this case patch will include this `test commit`.,0,0,0,0.9870442748069764,0.9914661645889282,0.9931769371032716,0.0,accept,unanimous_agreement
1625667158,6781,"is it possible to add options to return error for internal `sorenlouv/backport-github-action` errors? e.g. we got error, but action finished successfully - [a link]",0,0,0,0.9863052368164062,0.9953426122665404,0.9951930046081544,0.0,accept,unanimous_agreement
1625672592,6781,can we add note that we need to create pr for each fix? e.g. i expected that i would mark (set label)) all needed for `patch` prs -> backport would create one pr -> i would merge this pr,0,0,0,0.9804609417915344,0.9909740090370178,0.9944320321083068,0.0,accept,unanimous_agreement
1625725913,6781,"oh, does the job fail if the pr doesn't have `backport-to-`?",0,0,0,0.9334498643875122,0.9813977479934692,0.9850388765335084,0.0,accept,unanimous_agreement
1625733376,6781,right,0,0,0,0.9538289308547974,0.8996442556381226,0.9678029417991638,0.0,accept,unanimous_agreement
1625735159,6781,"ideally, we should create a branch here. what do you think? [a link]",0,0,0,0.9770163893699646,0.989523947238922,0.9911490678787231,0.0,accept,unanimous_agreement
1625741201,6781,"i didn't find such an option. but as for this specific case, we can use `commitconflicts: true`. [a link]",0,0,0,0.9835624098777772,0.9890025854110718,0.9936859011650084,0.0,accept,unanimous_agreement
1625756244,6781,how about this? [a link],0,0,0,0.987173318862915,0.9882256984710692,0.9943864345550536,0.0,accept,unanimous_agreement
1625761236,6781,yeah. it looks good to me. we can create a branch for the next minor version in this/next step of this activity.,1,1,1,0.9677082300186156,0.9624605774879456,0.8320323824882507,1.0,accept,unanimous_agreement
1625773222,6781,"it doesn't work - [a link] iiuc problem in `contains(github.event.pull_request.labels.*.name, 'backport-to-')` `github.event.pull_request.labels.*.name` will be `backport-to-release/v0.54 ` and `backport-to-release/v0.54 ` != `backport-to-`",0,0,0,0.9338825941085817,0.9883854389190674,0.9923419952392578,0.0,accept,unanimous_agreement
1625870106,6781,is there any way to apply `startswith` to all labels in `if` statement?,0,0,0,0.987392246723175,0.9951123595237732,0.994761288166046,0.0,accept,unanimous_agreement
1626866812,6781,"i didn't find way for this. i thought we can [a link] labels array (e.g. `github.event.pull_request.labels.*.name.backport-to*`, but filtering doesn't work for arrays... [a link] looks like we need to add 1 more `step` for this check.",0,0,0,0.9747402667999268,0.9443824887275696,0.9722522497177124,0.0,accept,unanimous_agreement
1626953989,6781,"yes, i eventually added one more step. [a link] i confirmed it skipped steps. [a link] please test this change.",0,0,0,0.9829504489898682,0.9500792622566224,0.9905006885528564,0.0,accept,unanimous_agreement
1626956108,6781,i'll open another pr for that.,0,0,0,0.9702081680297852,0.9837287068367004,0.9882976412773132,0.0,accept,unanimous_agreement
1626993641,6781,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1627026206,6781,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1627044352,6781,looks like it works :+1:,1,1,1,0.9044221043586732,0.963028073310852,0.99443519115448,1.0,accept,unanimous_agreement
1627055436,6781,thanks for confirming. i marked this conversation resolved.,1,1,1,0.8066551089286804,0.8972051739692688,0.8973819613456726,1.0,accept,unanimous_agreement
1627056624,6781,this doesn't work as we expected - [a link] [a link],0,0,0,0.925244390964508,0.8264399170875549,0.979560136795044,0.0,accept,unanimous_agreement
1627061385,6781,`commit conflicts: true` includes these conflicts in code instead of returning error ([a link],0,0,0,0.9845920205116272,0.990742027759552,0.9945663213729858,0.0,accept,unanimous_agreement
1627091529,6781,"yes, it's expected.",0,0,0,0.979267120361328,0.983160436153412,0.988009512424469,0.0,accept,unanimous_agreement
1627092065,6781,you can see the document.,0,0,0,0.984812557697296,0.9513135552406312,0.9949965476989746,0.0,accept,unanimous_agreement
1627098106,6781,"imo, it's better to open a pr anyway and resolve conflicts on the pr rather than abort.",0,0,0,0.9655507206916808,0.990516483783722,0.9668049812316896,0.0,accept,unanimous_agreement
1627099542,6781,it doesn't look very comfortable. can we move table from merge pr to the pr backport? as here [a link],-1,-1,0,0.8039671778678894,0.5203309059143066,0.7659358978271484,-1.0,accept,majority_agreement
1627104838,6781,does it show this error even with `commitconflicts: true`?,0,0,0,0.9676324725151062,0.993540108203888,0.9922796487808228,0.0,accept,unanimous_agreement
1627109962,6781,no. backport just creates pr with `<<<<< ` and `>>>>>` : [a link] [a link],0,0,0,0.98735249042511,0.9154660701751708,0.9949299693107604,0.0,accept,unanimous_agreement
1627113723,6781,"this makes sense, but gh doesn't mark it as `conflict` (see [a link] we can only see the problem in `tests`. so, to fix this: you need to pull this branch => manually update these changes => push these changes.",0,0,0,0.9845337867736816,0.989509344100952,0.9913183450698853,0.0,accept,unanimous_agreement
1627117430,6781,before this it was better because backport told which pr you need to merge before that pr: [a link],0,0,0,0.9818650484085084,0.9883657693862916,0.9945948719978333,0.0,accept,unanimous_agreement
1627132988,6781,"yes, there is a risk of accidentally merging `<<<<<` and `>>>>>`, but i didn't find a good approach. do you have any ideas? if `backport` aborts with conflicts (`commitconflicts: false`), it means we must manually create a backport pr with resolved conflicts. - `commitconflicts: true` - pros: - no need to run `git cherry-pick` or `backport` locally - cons: - risk of accidentally merging `>>>>>` as it is not treated as a conflict on github - `commitconflicts: false` - pros: - low risk of accidentally merging `>>>>>` (although manual `git cherry-pick` may fail) - cons: - need some manual work - `git cherry-pick` locally and resolve conflicts - create a pr against `release/vx.y` which is better?",0,0,0,0.9156906604766846,0.9865309596061708,0.9674893021583556,0.0,accept,unanimous_agreement
1627145906,6781,opened [a link],0,0,0,0.9873035550117492,0.9882739782333374,0.994262397289276,0.0,accept,unanimous_agreement
1627147058,6781,"correct me if i'm wrong, but i think it's better to merge related (another) pr before current pr to avoid conflict, no?",0,0,0,0.9595514535903932,0.8310038447380066,0.83699631690979,0.0,accept,unanimous_agreement
1627153993,6781,"let's say we added big changes for feature enhancement. we cannot backport the pr. if the critical fix is based on the change, the conflict cannot be avoided, and we have to resolve it manually.",0,0,0,0.980788230895996,0.9466366171836852,0.982413649559021,0.0,accept,unanimous_agreement
1627188521,6781,"okay, `commitconflicts: true` looks better to me. perhaps we can create `comment` that this pr contains a conflict?",0,0,0,0.8749813437461853,0.9741002917289734,0.9887680411338806,0.0,accept,unanimous_agreement
1627196171,6781,"it sounds like a good idea, but i didn't find the option. [a link]",1,1,1,0.6816279292106628,0.5007853507995605,0.9283475875854492,1.0,accept,unanimous_agreement
1627204867,6781,"perhaps we need to check changes in the commit... linter should show error about this, so let's just leave `commitconflicts: true` and get some experience with it. if necessary, we will think about checking the commit to reduce risks",0,0,0,0.9480839371681212,0.9880814552307128,0.9824703335762024,0.0,accept,unanimous_agreement
1627208518,6781,hmm. it may be better to create our own backport tool.,0,0,0,0.9761654138565063,0.8641467094421387,0.9644124507904052,0.0,accept,unanimous_agreement
1627221438,6781,this takes time... let's try current version. `test` workflow should protect us from mistakes,0,0,0,0.8886451721191406,0.9702428579330444,0.8432559967041016,0.0,accept,unanimous_agreement
1627527303,6781,i already started before seeing your comment :grinning_face_with_smiling_eyes: [a link],0,0,1,0.8921268582344055,0.9522973299026488,0.7268221974372864,0.0,accept,majority_agreement
1628771887,6781,"can we add some ""protection"" so that only maintainers can run this workflow?",0,0,0,0.987409234046936,0.9944236874580384,0.9949217438697816,0.0,accept,unanimous_agreement
1628772264,6781,what if we will work only with `release/vx.y` branches?,0,0,0,0.9859159588813782,0.9935810565948486,0.991495966911316,0.0,accept,unanimous_agreement
1628778554,6781,"do we need to upgrage this logic? e.g. remove remote branch `$new_branch` before creating that branch, or pull changes from `$branch_name` if `$new_branch` exists. example: 1. i merged pr1 and pr2 (with changes from pr1). ([a link] + [a link] 2. i ran the backport for pr2 by mistake and received a conflict warning. ([a link] 3. i ran backport for pr1 and merge this backport into `release/vx.y` branch. ([a link] 4. but when i again try to run backport for pr2 - i get error - [a link]",0,0,0,0.7496880292892456,0.9922130703926086,0.9942898750305176,0.0,accept,unanimous_agreement
1628778966,6781,can we use `-bot` for this comment?,0,0,0,0.9881666302680968,0.9949369430541992,0.9954956769943236,0.0,accept,unanimous_agreement
1628782759,6781,`org_repo_token` is a pat for `aqua-bot`. the bot user will comment (i used my pat in my fork). [a link],0,0,0,0.9872421026229858,0.9898734092712402,0.9956002235412598,0.0,accept,unanimous_agreement
1628785065,6781,got it! :+1:,1,1,1,0.9692668318748474,0.9932577610015868,0.9967159032821656,1.0,accept,unanimous_agreement
1628788710,6781,"in that case, i think we should merge `release/vx.y` into [a link] manually. [code block] or we can close [a link] delete the branch, and re-run backporting. i'm not sure if it's feasible. the conflicted changes are already committed. it sounds like we need to revert. in this case, we need to force-push the branch. i'm a bit afraid of unexpected accidents (e.g. important changes are overridden by force push).",-1,-1,-1,0.8438184261322021,0.8229842185974121,0.9335819482803344,-1.0,accept,unanimous_agreement
1628793326,6781,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1628799685,6781,"okay, let's start with the manual work for cases like this. we may update this later when we have more experience (if at all necessary).",0,0,0,0.9766353368759156,0.9757227897644044,0.9899559020996094,0.0,accept,unanimous_agreement
1628802552,6781,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1628803985,6781,i'll add it to the document.,0,0,0,0.9845736622810364,0.9808762669563292,0.994787335395813,0.0,accept,unanimous_agreement
1628917806,6781,it works - [a link] + [a link],0,0,0,0.976409912109375,0.9651904106140136,0.9770240187644958,0.0,accept,unanimous_agreement
1628919594,6781,it works: [a link] + [a link],0,0,0,0.9797722101211548,0.9808309674263,0.9770544171333312,0.0,accept,unanimous_agreement
1628966939,6781,added [a link] please take another look.,0,0,0,0.9818037748336792,0.9812104105949402,0.9939401149749756,0.0,accept,unanimous_agreement
1629060547,6781,lgtm,0,0,0,0.9795994758605956,0.7242414951324463,0.9618706703186036,0.0,accept,unanimous_agreement
1403923925,5635,it looks like `git` didn't remove it after merging main branch.,0,0,0,0.9782628417015076,0.9920127987861632,0.9920421242713928,0.0,accept,unanimous_agreement
1403925032,5635,also you need to add this page here: [a link] use `mage docs:serve` command to build local [a link],0,0,0,0.9869681000709534,0.9884898066520692,0.9960436820983888,0.0,accept,unanimous_agreement
1403925851,5635,`[^1]` link doesn't work.,0,0,0,0.8994723558425903,0.9834822416305542,0.9575598239898682,0.0,accept,unanimous_agreement
1403927223,5635,we separate `pre-build` and `post-build` - [a link] `manifest.toml` looks as lock file. perhaps we can scan these files only in `fs` mode?,0,0,0,0.9888553023338318,0.9955050349235536,0.9938111901283264,0.0,accept,unanimous_agreement
1403928279,5635,do we need all these test cases? we tested complex issues in go-dep-parser. i think 4 tests will be enough: - `manifest.toml` + `project.toml` - only `manifest.toml` - there are no dependencies - error,0,0,0,0.9740424156188964,0.9938934445381165,0.9892330169677734,0.0,accept,unanimous_agreement
1403931784,5635,i think it is better to use `pkg/fanal/analyzer/language/julia/pkgjl/pkgjl.go` [code block],0,0,0,0.9802674055099488,0.9917706251144408,0.9894413948059082,0.0,accept,unanimous_agreement
1403941514,5635,we use only `dependencies` field. [code block],0,0,0,0.9888030886650084,0.9935382008552552,0.9960373640060424,0.0,accept,unanimous_agreement
1403944175,5635,you will sort libs in postanalyze: [a link] [code block],0,0,0,0.9879543781280518,0.9915001392364502,0.995400369167328,0.0,accept,unanimous_agreement
1403945535,5635,all `go-dep-parser` tests use uuid without version for pkg.id. what am i missing?,0,0,0,0.9808453321456908,0.9735798239707948,0.9937171936035156,0.0,accept,unanimous_agreement
1403946030,5635,looks like we can use `pkgids` [code block],0,0,0,0.9858441352844238,0.9874366521835328,0.992609202861786,0.0,accept,unanimous_agreement
1406688537,5635,sorry this was before we changed that in go-dep-parser,-1,-1,-1,0.9860956072807312,0.9889583587646484,0.992437779903412,-1.0,accept,unanimous_agreement
1406692223,5635,"i just copied from rust as an example so we can change this, but why not support all modes? manifest.toml files can appear in both source code and in build artifacts, so i think it is relevant to scan image, fs, and repo. i'm not so sure about roosfs, but other languages do it, so why not julia as well?",0,0,0,0.9710753560066224,0.97445946931839,0.9844263195991516,0.0,accept,unanimous_agreement
1407053342,5635,this is what i wanted to see. thank you. let's look at `manifest.toml` in all modes.,1,1,1,0.9567025303840636,0.9458694458007812,0.9879071116447448,1.0,accept,unanimous_agreement
1422016188,5635,"do you think we need this? if i understand correctly, pkg.id (this is the uuid from the julia file) is always unique.",0,0,0,0.9873377084732056,0.9904707670211792,0.992741048336029,0.0,accept,unanimous_agreement
1422018674,5635,can you add testcase for this? (`testnewpackageurl`),0,0,0,0.9885112047195436,0.99151211977005,0.9955998659133912,0.0,accept,unanimous_agreement
1422022638,5635,"you mean removing test dependencies, right? if so, it's best to update this comment to avoid confusion.",0,0,0,0.9814969301223756,0.9788104295730592,0.9946993589401244,0.0,accept,unanimous_agreement
1422024751,5635,"we recently added `dev` flag to `package` (dev dependencies are excluded from the report by default, but users can use `--include-dev-deps` to include them). but i'm not sure that julia's users need this feature. what do you think? do users need dev dependencies in reports?",0,0,0,0.9668495655059814,0.9601154923439026,0.9804449081420898,0.0,accept,unanimous_agreement
1422027383,5635,looks like you don't use comparer,0,0,0,0.9558433294296264,0.9401658177375792,0.9898893237113952,0.0,accept,unanimous_agreement
1423185969,5635,sorry this was left over from an earlier version. removed,-1,-1,-1,0.9861547350883484,0.9881759881973268,0.9934514760971068,-1.0,accept,unanimous_agreement
1423186012,5635,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1423186226,5635,yes. done,0,0,0,0.9653884768486024,0.8105977773666382,0.9328125715255736,0.0,accept,unanimous_agreement
1423187058,5635,yes i think this will be helpful! i have tried to implement this from looking at other code and i've updated the test with some dev deps. lmk if it looks correct.,1,1,1,0.9341469407081604,0.9483788013458252,0.993302583694458,1.0,accept,unanimous_agreement
1423187142,5635,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
1423369392,5635,[code block] wdyt?,0,0,0,0.989582657814026,0.9852877855300904,0.994474470615387,0.0,accept,unanimous_agreement
1423377864,5635,you can simply take `dev` from current package and remove `dev bool`. [code block],0,0,0,0.9893032312393188,0.993701696395874,0.99567312002182,0.0,accept,unanimous_agreement
1423379189,5635,as you correct wrote - this is expected behavior. i think we can remove this comment. [code block],0,0,0,0.9872955679893494,0.9461414217948914,0.991235375404358,0.0,accept,unanimous_agreement
1423394792,5635,i think we don't need to return map here. [code block],0,0,0,0.9872055053710938,0.9435428380966188,0.9902010560035706,0.0,accept,unanimous_agreement
1424089733,5635,added,0,0,0,0.973513960838318,0.9267084002494812,0.8435775637626648,0.0,accept,unanimous_agreement
1438069005,5635,"we parse the lock file, right? we need to update the list. [a link]",0,0,0,0.9867591261863708,0.9789257049560548,0.995360791683197,0.0,accept,unanimous_agreement
1438070840,5635,i'm sorry i'm probably missing some context. do we need to use uuid here? can the combination `name + version` be non-unique?,-1,-1,-1,0.9870506525039672,0.98533833026886,0.9797948002815248,-1.0,accept,unanimous_agreement
1438072940,5635,we discussed about this here - [a link],0,0,0,0.9771187901496888,0.9805980920791626,0.9941099286079408,0.0,accept,unanimous_agreement
1438074039,5635,"there are cases when a file contains two dependencies with same name and version, but with different uuids - [a link] we thought it would be better to use uuids to separate dependencies, like julia does.",0,0,0,0.9845575094223022,0.9875577688217164,0.9924837946891784,0.0,accept,unanimous_agreement
1438076658,5635,i'd like to see why it is allowed. is there any document?,0,0,0,0.9683921337127686,0.9830012321472168,0.989501655101776,0.0,accept,unanimous_agreement
1438077255,5635,do you have any documents regarding this case?,0,0,0,0.9832152724266052,0.9869102835655212,0.9918917417526244,0.0,accept,unanimous_agreement
1438335094,5635,see [a link],0,0,0,0.9835211038589478,0.9869033098220824,0.99574077129364,0.0,accept,unanimous_agreement
1454161380,5635,is there still a need to update this list?,0,0,0,0.9747331142425536,0.9912188649177552,0.993973672389984,0.0,accept,unanimous_agreement
1599427388,5635,we [a link]. we don't need tests for spdx and cyclonedx unless julia needs any specific handling for sbom. either of them is fine.,0,0,0,0.9504743218421936,0.9872375726699828,0.9903034567832948,0.0,accept,unanimous_agreement
1600076180,5635,no specific handling is needed. i have removed the cyclonedx test.,0,0,0,0.9862416982650756,0.991590976715088,0.9952557682991028,0.0,accept,unanimous_agreement
914675876,2333,"since we removed this part from the docs (which is fine), wdo we want to keep the rest?",0,0,0,0.9819737672805786,0.9936760067939758,0.99397611618042,0.0,accept,unanimous_agreement
914681335,2333,do we want to keep the grouping in this section based on content location? (presentations -> cncf webinar -> item vs just list of items),0,0,0,0.9872663617134094,0.9947155117988586,0.993177056312561,0.0,accept,unanimous_agreement
914682324,2333,also add to one of tutorial index pages?,0,0,0,0.986969828605652,0.9932517409324646,0.994605839252472,0.0,accept,unanimous_agreement
914961101,2333,"ah yes, good point, will include that",1,1,1,0.5678606629371643,0.8699222207069397,0.946452498435974,1.0,accept,unanimous_agreement
914961528,2333,"no, will rewrite it -- thanks for pointing it out",1,1,1,0.8363392353057861,0.8854972124099731,0.9168999195098876,1.0,accept,unanimous_agreement
945232931,2333,i cannot comment on the file so commenting here: we could add some context there about what is cks and why it's in the trivy docs.,0,0,0,0.9693462252616882,0.9833011627197266,0.991336226463318,0.0,accept,unanimous_agreement
945233003,2333,"are we sure this is a ""first party"" tutorial and not ""third party""? do we want to maintain it?",0,0,0,0.9811621904373168,0.9921445250511168,0.989924132823944,0.0,accept,unanimous_agreement
945233294,2333,"is there a specific place for ""community tutorials"" or just anywhere in tutorials? is this what the ""tools"" are for? if so, need to refine this instruction and also rename tools. otherwise lets clarify what tools are for",0,0,0,0.9848400950431824,0.99215430021286,0.9930232763290404,0.0,accept,unanimous_agreement
945239803,2333,"no, we can't. the first party tutorial should be - github actions - we have an official action - circleci - travis ci - gitlab ci - gitlab folks maintain our tutorial - bitbucket pipelines - we have [a link] - (aws codepipeline) - it should be moved to third party as the blog is written by aws, not us. - aws security hub - as we maintain [a link]",0,0,0,0.9698377847671508,0.9783101081848145,0.991169810295105,0.0,accept,unanimous_agreement
945282518,2333,"yes, will add that",0,0,0,0.982475996017456,0.9829110503196716,0.9935833811759948,0.0,accept,unanimous_agreement
945282598,2333,hmm in addition to those we need tutorials such as deploy the `trivy operator through gitops` where do you see those?,0,0,0,0.9837065935134888,0.983044445514679,0.9858217835426332,0.0,accept,unanimous_agreement
945283059,2333,"i would only accept tutorials here that we want to maintain e.g. installing trivy operator through flux, visualising metrics in grafana etc. or similar, re trivy -- using trivy in an air-gapped environment -- and similar -- otherwise, tutorials should be added in the additional resource section and just reference an external link. this is how i had it in mind",0,0,0,0.95965838432312,0.9846978187561036,0.9843926429748536,0.0,accept,unanimous_agreement
945506752,2333,"we have many trivy-related tools such as docker desktop, vscode/intellij plugins, etc. do we want to put only trivy operator at the top level?",0,0,0,0.9813416004180908,0.993313491344452,0.9889422655105592,0.0,accept,unanimous_agreement
945508829,2333,"do you have a specific reason to change the order? do you prefer ""quick start"" being before ""installation""? i thought the order was the opposite as users can start using trivy after installation.",0,0,0,0.9749345779418944,0.989654779434204,0.993480920791626,0.0,accept,unanimous_agreement
945509547,2333,"in addition, i prefer the directory name is the same as the section name. it is easy to find the relevant directory. [code block]",0,0,0,0.9420390129089355,0.9552584886550904,0.9333410263061525,0.0,accept,unanimous_agreement
945513426,2333,"first of all, `#` is not shown in the navigator bar, so we should have a single `#` per a single page. ![a link] and do we want to put only operator installation here though we have many related tools such as docker extension?",0,0,0,0.9638665914535522,0.9871405959129332,0.9598668813705444,0.0,accept,unanimous_agreement
945544367,2333,"""ci/cd"" section details how to run trivy in ci/cd, but this section is how to install trivy operator through gitops. i feel like this section is different from others. also, do we want to trivy operator things in the trivy doc?",0,0,0,0.736844539642334,0.9846492409706116,0.9438534379005432,0.0,accept,unanimous_agreement
945547001,2333,"nit: imo, we don't need `trivy` everywhere like `trivy aws` and `trivy circleci` :grinning_squinting_face: [code block]",0,0,1,0.5312046408653259,0.9780476689338684,0.6504202485084534,0.0,accept,majority_agreement
945548385,2333,"`trivy k8s` is not clear. i think we should mention what users can do with this tutorial, e.g. ""cluster scanning"" or something like that.",0,0,0,0.9599418044090272,0.9848729372024536,0.9742606282234192,0.0,accept,unanimous_agreement
945552123,2333,"they are not cks relevant, no?",0,0,0,0.9701907634735109,0.704886257648468,0.9833235144615172,0.0,accept,unanimous_agreement
945553162,2333,"that page contains much of our content, so it is not community tutorials. [code block]",0,0,0,0.9802906513214112,0.9811424612998962,0.9943087697029114,0.0,accept,unanimous_agreement
945553605,2333,there are two `#`. we need to remove this line or remove the first line.,0,0,0,0.9873396158218384,0.985543131828308,0.9931433200836182,0.0,accept,unanimous_agreement
945554150,2333,"most of them are our blogs, not from the community.",0,0,0,0.9121995568275452,0.9825013279914856,0.9846952557563782,0.0,accept,unanimous_agreement
945581670,2333,hmmm itay and i discussed this -- but good point -- maybe we could put it at the top level integrations -- and then reference a page that links to either the docs or the different repo e.g. the lens trivy repo people can then easily go through it and find the integrations/tools that work for them. do you prefer to name it `tools`?,0,1,0,0.6566920876502991,0.6494540572166443,0.5216599702835083,0.0,accept,majority_agreement
945582581,2333,i don't have any strong feelings about the order & agree with you on the dir name :grinning_face_with_smiling_eyes: will change it,-1,-1,1,0.4276633560657501,0.771599531173706,0.9508286714553832,-1.0,accept,majority_agreement
945589250,2333,i would add the docker extension as a tutorial and then link here to it since it does not seem too straightforward and is more about the use rather than the installation. what do you think?,0,0,0,0.9749746918678284,0.9784895181655884,0.9596818685531616,0.0,accept,unanimous_agreement
945591582,2333,actually made the link to trivy operator part of the helm installation. that makes more sense to me (didn't change much),0,0,0,0.9304974675178528,0.9652742743492126,0.9910735487937928,0.0,accept,unanimous_agreement
945593074,2333,"this boils down to the question -- if trivy is marketed as the all in one security scanner, do we want to send people do one docs where they can discover all features or to different docs -- or moreover, at what point do we send people to different docs? when itay and i spoke, we agreed to put the tutorials first into the trivy docs and then at some point move them over to the operator docs when there are too many -- but this might be counterintuitive since links might not work like expected. independently, i could add the gitops tutorial to the kubernetes tutorial section",0,0,0,0.7728108167648315,0.9866161346435548,0.9624949097633362,0.0,accept,unanimous_agreement
945605554,2333,yes but they are also not trivy-focused and teach people something,0,0,0,0.7683696746826172,0.9252627491950988,0.9736074805259703,0.0,accept,unanimous_agreement
945605614,2333,you have a point,0,0,0,0.9733334183692932,0.9069088101387024,0.9924665093421936,0.0,accept,unanimous_agreement
945605844,2333,removed this line :),1,1,0,0.6976712942123413,0.847186267375946,0.9933984279632568,1.0,accept,majority_agreement
945606001,2333,"yes, will add more community ones -- you have a point tho hahah",1,1,1,0.8555390238761902,0.7662211656570435,0.982885241508484,1.0,accept,unanimous_agreement
945627153,2333,`integrations` and `tools` both work for me.,0,0,0,0.9853137135505676,0.9908102750778198,0.9895332455635072,0.0,accept,unanimous_agreement
945629620,2333,maybe kubernetes scanning,0,0,0,0.9838696122169496,0.9910072684288024,0.9910141825675964,0.0,accept,unanimous_agreement
945633225,2333,"hmm. i thought trivy operator, docker extensions, and other tools would move to `integrations` or `tools`. do we have links in the `installation` section to all the tools?",0,0,0,0.9836829304695128,0.9807799458503724,0.9681485295295716,0.0,accept,unanimous_agreement
945638586,2333,does it mean we will not have the same tutorial in the trivy operator doc? i just want to avoid duplication so that it could reduce the maintenance cost.,0,0,0,0.9568833708763124,0.9860306978225708,0.9929410219192504,0.0,accept,unanimous_agreement
945641863,2333,"so, should we move these links to somewhere else? otherwise, it looks like these links help users pass the cks exam.",0,0,0,0.9839586019515992,0.9918323755264282,0.9912542700767516,0.0,accept,unanimous_agreement
945646387,2333,we may want to have two sections: - additional references - all of the contents are from aqua (official) - community tutorials - all of the contents are from the community (unofficial),0,0,0,0.968458354473114,0.9933701753616332,0.9940910935401917,0.0,accept,unanimous_agreement
945667826,2333,"i renamed it to additional resources -- the thing is that official vs unofficial is going to be a bit scarce, and people would have to look at multiple places that have the same goal",0,0,0,0.7269275784492493,0.8065531849861145,0.9749948382377625,0.0,accept,unanimous_agreement
945668162,2333,"well, it is study material, that's why i wanted to include it",0,0,0,0.960793137550354,0.9888519644737244,0.9837315082550048,0.0,accept,unanimous_agreement
945889567,2333,"i think of this more as ""installing trivy in k8s through gitops"" rather than ""installing trivy operator through gitops"". in my mind trivy operator is just another face of trivy. does that make sense?",0,0,0,0.8880281448364258,0.9778746962547302,0.9811105728149414,0.0,accept,unanimous_agreement
945906848,2333,"i'm ok with ""installing trivy in k8s through gitops"". i just wondered if we want to include all trivy-related tools in the tutorial. for example, docker extension is also another face of trivy. in that case, don't we have the same tutorial in the trivy operator doc? where is the single truth of source?",0,0,0,0.978467345237732,0.9304813146591188,0.8768148422241211,0.0,accept,unanimous_agreement
947504375,2333,"last time we discussed documentation for integrations, we said that: 1. reference docs will live in the integration's own repo 2. we will link from the menu of trivy docs to the individual readmes/docs or other projects 3. tutorials will live in trivy docs under dedicated tutorials sections covering different scenarios examples: 1. trivy github actions document with all possible options is in the readme of the action's repo. it is linked to from the integrations section of trivy docs. the tutorial for using trivy in github actions is in trivy docs and linked in the triby tutorials section. 2. trivy semaphore document with all possible options is in the semaphore documentation. it is linked to from the integrations section of trivy docs. the tutorial for using trivy with semaphore is in the semaphore blog and linked in the trivy tutorials section. does this still makes sense?",0,0,0,0.89948570728302,0.9898057579994202,0.97135990858078,0.0,accept,unanimous_agreement
947538751,2333,we planned to put a link to trivy operator at the top header -- this turned now into trivy ecosystem linking to the external repos/docs -- so you are saying that you would like to keep it as trivy operator in the header and link to external tools in the integration section? we could still have the trivy ecosystem overview somewhere -- maybe in an overview in integrations?,0,0,0,0.9703404903411864,0.9939383268356324,0.9931067824363708,0.0,accept,unanimous_agreement
950513415,2333,"no i didn't mean to revert anything, just wanted to answer teppei's comment. i think (?) this model i described still works with ecosystem page",0,0,0,0.962209403514862,0.9189238548278807,0.9351941347122192,0.0,accept,unanimous_agreement
957355819,2333,"we moved `tools` to `ecosystem`. we don't need it anymore, right?",0,0,0,0.9794740080833436,0.9908713698387146,0.9910517334938048,0.0,accept,unanimous_agreement
957362028,2333,"as for `trivy operator installation` and `docker desktop extension`, can we just put ""other tools"" and say `see the `ecosystem` tab?",0,0,0,0.9893494844436646,0.9947776794433594,0.99434232711792,0.0,accept,unanimous_agreement
957364287,2333,not fixed yet?,0,0,0,0.95827454328537,0.9768253564834596,0.97999507188797,0.0,accept,unanimous_agreement
957364619,2333,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
957366303,2333,can we put `ci/cd` on the `kubernetes` section? ci/cd integration is the first citizen in trivy.,0,0,0,0.9882992506027222,0.989042341709137,0.9953505992889404,0.0,accept,unanimous_agreement
957367875,2333,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
957368382,2333,"ok, we can keep operator tutorials then.",0,0,0,0.983300805091858,0.975713849067688,0.9921234250068665,0.0,accept,unanimous_agreement
957371967,2333,people might try unofficial tools first because community tools are listed first. can we put official tools before community tools?,0,0,0,0.984363615512848,0.9895989894866944,0.9859492182731628,0.0,accept,unanimous_agreement
960639994,2333,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
960640139,2333,removed it,0,0,0,0.9677612781524658,0.9675471782684326,0.977264404296875,0.0,accept,unanimous_agreement
960640488,2333,what do you mean?,0,0,0,0.9683603048324584,0.9843899607658386,0.9906946420669556,0.0,accept,unanimous_agreement
960640768,2333,done :),1,1,1,0.8739592432975769,0.9783425331115724,0.6320397257804871,1.0,accept,unanimous_agreement
960643253,2333,ah got it,1,0,0,0.6613131761550903,0.8259475231170654,0.7232646346092224,0.0,accept,majority_agreement
1510354838,6234,begine -> begin,0,0,0,0.9821186065673828,0.920502543449402,0.9911277294158936,0.0,accept,unanimous_agreement
1510355300,6234,"i'm not sure this is mandatory, for example k8s. ?",-1,0,0,0.5459879636764526,0.5602516531944275,0.9115169048309326,0.0,accept,majority_agreement
1510355456,6234,shams -> schemas,0,0,0,0.98258638381958,0.9851877689361572,0.989096224308014,0.0,accept,unanimous_agreement
1510355541,6234,we should clarify what's mandatory / optional,0,0,0,0.984428882598877,0.9838660359382628,0.9783737659454346,0.0,accept,unanimous_agreement
1510355718,6234,"starts with an example, better to start with explanation",0,0,0,0.96515554189682,0.985706865787506,0.9910655617713928,0.0,accept,unanimous_agreement
1510355898,6234,"you imply that this is optional (can), is it?",0,0,0,0.9804897904396056,0.9910880327224731,0.9936233162879944,0.0,accept,unanimous_agreement
1510355963,6234,can,0,0,0,0.980562686920166,0.9319468140602112,0.910301148891449,0.0,accept,unanimous_agreement
1510356208,6234,"i think this is relevant only for cloud checks? also i remember saying sometime that this is overlapping with selector, did we address that? ( )",0,0,0,0.9466561675071716,0.9654787182807922,0.985473334789276,0.0,accept,unanimous_agreement
1510356412,6234,"""short code is a short code"" .. can remove this part, the rest is sufficient",0,0,0,0.9853399395942688,0.9537774324417114,0.9949066042900084,0.0,accept,unanimous_agreement
1510356927,6234,this section needs rewriting imo. need to better explain what is input and its meaning in the check. how to configure it and what structure it has. if needed expand this to a seperate section,0,0,0,0.9818975329399108,0.9632715582847596,0.9147046208381652,0.0,accept,unanimous_agreement
1510357013,6234,i think this should be further up towards the beginning,0,0,0,0.960840106010437,0.9632346034049988,0.9795315265655518,0.0,accept,unanimous_agreement
1510357115,6234,what if it's not a cloud check?,0,0,0,0.9642674326896667,0.9662190079689026,0.9758451581001282,0.0,accept,unanimous_agreement
1510357614,6234,"add (about the second argument): ""you can pass any rego variable that reference reference a field of the input document.""",0,0,0,0.9883933663368224,0.9926072359085084,0.9944901466369628,0.0,accept,unanimous_agreement
1510357827,6234,"since this is a doc not a tutorial, i think it needs to be clearer what is the description of how to add checks, and what is the example of the description",0,0,0,0.9688740968704224,0.9752963781356812,0.971537470817566,0.0,accept,unanimous_agreement
1510359458,6234,"i think contributing providers/adapters is too complicated for this doc. i don't see anyone contributing a provider and if they did, this doc would probably be insufficient so i suggest to remove it",0,-1,0,0.7414098978042603,0.5356964468955994,0.9669256806373596,0.0,accept,majority_agreement
1510361096,6234,what are those input(s)?,0,0,0,0.985037624835968,0.9899832010269164,0.9944604635238647,0.0,accept,unanimous_agreement
1510361799,6234,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
1510362260,6234,"again, need to draw the line that we are discussing an example",0,0,0,0.9739050269126892,0.9847251772880554,0.9859283566474916,0.0,accept,unanimous_agreement
1510363360,6234,"sentence about metadata can come first, as we're now covering the code and it comes first there",0,0,0,0.986476182937622,0.991773784160614,0.9938400387763976,0.0,accept,unanimous_agreement
1510364295,6234,"this is over simplification.. not sure it's helpful. what i recommend is creating this doc as an example for how to add a service to aws, and then mention the adapters needed to update for that scenario.",-1,-1,-1,0.6739567518234253,0.8195973038673401,0.8774731159210205,-1.0,accept,unanimous_agreement
1510364391,6234,"explain what, who",0,0,0,0.9305851459503174,0.950525164604187,0.9885497689247132,0.0,accept,unanimous_agreement
1510368236,6234,"there's naturally some overlap between this and the other doc about custom checks. given the difference between them is only an extra step (do you want to contribute it or keep it to yourself), it highlights the inconsistency between the otherwise similar docs. for example, this doc basically documents how to write an aws check, but i wouldn't think to read it if i didn't want to contribute to trivy. if it's not too much, i would refactor the content into: 1) creating custom checks - should fully document all the guidelines related to the rego file, testing, metadata, aws examples etc. this can be multiple docs if needed. 2) contributing a custom check to trivy - refers to the other doc and explains how to take a check you wrote (not explained here) and just contribute it.",0,0,0,0.9394259452819824,0.9750524163246156,0.8920449018478394,0.0,accept,unanimous_agreement
1511287790,6234,"ah, it looked different on vs code, not showing the indentation",0,0,0,0.9566792845726012,0.5983802080154419,0.9793908596038818,0.0,accept,unanimous_agreement
1511291427,6234,i rewrote it -- some components that are not relevant for anyone writing custom checks for their usage of trivy are however a requirement when contributing the check back into trivy,0,0,0,0.9875384569168092,0.9918982982635498,0.9906687140464784,0.0,accept,unanimous_agreement
1511374499,6234,"i need some additional information on how people can add adapters -- i.e. what sections are required, what information should i highlight? the adapt.go file looks fairly complex",0,0,0,0.963196575641632,0.9423624277114868,0.9710391163825988,0.0,accept,unanimous_agreement
1511375109,6234,i cannot find where people run `make schemas`,0,0,0,0.9609007835388184,0.9488124251365662,0.952286422252655,0.0,accept,unanimous_agreement
1511377900,6234,could you please provide further information on the sections that are required in the `metadata` vs that aren't? if people contribute a check back to trivy they need the metadata defined in the check but do they need every field listed below?,0,0,0,0.987875521183014,0.9943853616714478,0.9942261576652528,0.0,accept,unanimous_agreement
1511378679,6234,what are subtypes?,0,0,0,0.9759735465049744,0.9892561435699464,0.9923726320266724,0.0,accept,unanimous_agreement
1511588345,6234,"to support cloud providers in either live cloud scanning (like trivy aws) or iac scanning (like terraform, cloudformation or arm) we need to define the provider first. this is done as we build a [a link] locally. as for kubernetes scanning, it's a little different because we only need to parse the input (yaml) and make decisions on it. there's no concept of state as above. same goes for dockerfile scanning. so to summarize, i think we could probably re-write this as below: [code block]",0,0,0,0.9681543111801147,0.9893484115600586,0.9731749892234802,0.0,accept,unanimous_agreement
1511596970,6234,[a link] an example of what the simplest policy should looks like. the input selector (and whatever fields are not here) are optional. the rest is needed to display the results.,0,0,0,0.9881254434585572,0.9893997311592102,0.9926664233207704,0.0,accept,unanimous_agreement
1511597415,6234,yes. this is optional and only needed if you want to optimize your scanning. see my comment [a link] for what's optional and required.,0,0,0,0.9848825335502625,0.9853745698928832,0.9886045455932616,0.0,accept,unanimous_agreement
1511600909,6234,"we've updated to use `magefiles` as the rest of the trivy targets. you can find them [a link] so to generate the new schema it would be `mage schema:generate` and to verify it, the command will be `mage schema:verify` you can see these targets by running `mage -l` in the trivy repo.",0,0,0,0.9856483936309814,0.9891244173049928,0.9935764670372008,0.0,accept,unanimous_agreement
1511601669,6234,replied [a link],0,0,0,0.9855501651763916,0.989191710948944,0.994495451450348,0.0,accept,unanimous_agreement
1511603104,6234,"subtypes are documented [a link] and are only needed at this time for cloud checks. they help us only run the checks that are needed for what's being scanned, optimizing the cloud scanning runtime a little.",0,0,0,0.9864891767501832,0.9927842617034912,0.992976725101471,0.0,accept,unanimous_agreement
1511875715,6234,comma splice [code block],0,0,0,0.9860196113586426,0.991750419139862,0.9955046772956848,0.0,accept,unanimous_agreement
1511885647,6234,"the comments on [a link] pr should help. as for learning about the resources themselves, i would say terraform documentation is a good place to go to. for instance [a link] is an example.",1,0,1,0.5164461731910706,0.9585434794425964,0.6351132392883301,1.0,accept,majority_agreement
1512667284,6234,"could you please check this table, specifically the ""in table"" and ""in json"" parts?",0,0,0,0.9859712719917296,0.9930383563041688,0.9941897392272948,0.0,accept,unanimous_agreement
1513584812,6234,"schema isn't required per se as it only is needed for validating the checks for functional correctness (syntax). furthermore, if a file has a file extension we expect scanning will still work just fine. for instance, if you try to scan argocd configs without having an argocd schema is still fine as they're treated as regular yaml files.",0,0,0,0.9821089506149292,0.9932517409324646,0.9928882718086244,0.0,accept,unanimous_agreement
1513585473,6234,"can we format this a little better, this is how it renders for me in the browser.",0,0,0,0.984370768070221,0.9895195960998536,0.9905508756637572,0.0,accept,unanimous_agreement
1513590553,6234,"we inform the user about policy namespaces in [a link] part of the docs but i wonder if we can tie that in here as well because without passing a custom namespace, the custom checks will not be evaluated (trivy by default only runs in it's own namespace, unless specified by the user).",0,0,0,0.9778825640678406,0.9912822246551514,0.9861686825752258,0.0,accept,unanimous_agreement
1513599668,6234,we need to update the link to `source-types` to point to [a link],0,0,0,0.9887561202049256,0.9935864806175232,0.9948191046714784,0.0,accept,unanimous_agreement
1513604332,6234,"tbh i don't understand what's the ""in table"" and ""json"" are for. could you clarify? the table is quite wide and not very easy to view as you can see below. should we split into two table assuming we need all the columns? but nevertheless, we should move the ""required"" column to the left as it's probably the most important for users to know.",0,0,-1,0.9036638736724854,0.771567165851593,0.7166973352432251,0.0,accept,majority_agreement
1513604886,6234,use trivy hyperlinks.,0,0,0,0.983350932598114,0.987505316734314,0.9951732754707336,0.0,accept,unanimous_agreement
1513606244,6234,"services are defined within a provider, so rds is a service and aws is a provider. your link seems to point to providers directory.",0,0,0,0.9873393774032592,0.99114590883255,0.9944591522216796,0.0,accept,unanimous_agreement
1513606682,6234,maybe we can update all defsec links to point to trivy? that might uncover any shortcomings as well.,0,0,0,0.9836716055870056,0.9925966262817384,0.9809107184410096,0.0,accept,unanimous_agreement
1513608745,6234,comma splice [code block],0,0,0,0.9860196113586426,0.991750419139862,0.9955046772956848,0.0,accept,unanimous_agreement
1514116455,6234,"upps, i did it at other locations, missed this one",0,0,0,0.597663402557373,0.5574225783348083,0.9868886470794678,0.0,accept,unanimous_agreement
1516039278,6234,"could you please clarify what ""in table"" and ""in json"" is as we are not sure what that means? i assume the output format but not sure how it relates to writing policies?",0,0,0,0.978871762752533,0.945831060409546,0.991651713848114,0.0,accept,unanimous_agreement
1516045764,6234,"i don't like them, it makes it more difficult to ""read"" in large documents",-1,-1,-1,0.9779794812202454,0.9833037853240968,0.981566309928894,-1.0,accept,unanimous_agreement
1548157622,6234,"originally it represented which fields were displayed in json/table format, but as it does not appear to be maintained, it can be removed.",0,0,0,0.9884632229804992,0.9935372471809388,0.9943397641181946,0.0,accept,unanimous_agreement
1549308885,6234,"oki, thank you",1,1,1,0.91208678483963,0.8623304963111877,0.9423131346702576,1.0,accept,unanimous_agreement
1550642710,6234,i saw the review request but i still see the json/table columns in the pr. did you forget to push the change?,0,0,0,0.9875916242599488,0.9883556365966796,0.9947559833526612,0.0,accept,unanimous_agreement
1595218153,6234,there is a difference between 1. writing/contributing rego checks 2. writing/contributing custom compliance reports this docs is the first,0,0,0,0.9858112335205078,0.9897029995918274,0.993440568447113,0.0,accept,unanimous_agreement
1883484981,8080,nit: use `parse.go` name,0,0,0,0.9869689345359802,0.993705689907074,0.9952658414840698,0.0,accept,unanimous_agreement
1883493122,8080,can you create `packageid` function (as in other parsers)?,0,0,0,0.9898514747619628,0.99424946308136,0.9955610036849976,0.0,accept,unanimous_agreement
1883496655,8080,this worries me. there are problems when there are multiple `root` packages (see #7802). perhaps we want to add a check for multiple root packages?,-1,-1,-1,0.9745449423789978,0.96190083026886,0.9156898260116576,-1.0,accept,unanimous_agreement
1883498530,8080,"uuic uv.lock contains sorted packages, but i still suggest to sort packages, dependencies, dependson",0,0,0,0.9888872504234314,0.9755396842956544,0.9938382506370544,0.0,accept,unanimous_agreement
1883524804,8080,i don't want to do 2 cycles what do you think about this? [code block],0,-1,-1,0.9605662822723388,0.5967094302177429,0.631801426410675,-1.0,accept,majority_agreement
1883536216,8080,"uurc usually don't use nested functions, using them for similar cases (e.g. [a link] can we move this function out?",0,0,0,0.9806681871414183,0.991107940673828,0.9878410696983336,0.0,accept,unanimous_agreement
1883543379,8080,is this possible? if we didn't find the root package in the parser - maybe we need to find it in `pyproject.toml` file in analyzer,0,0,0,0.9854487776756288,0.994823694229126,0.992256760597229,0.0,accept,unanimous_agreement
1883555435,8080,"add this type to languages ​​and lock files. otherwise, this works for `rootfs`: [code block]",0,0,0,0.9886510372161864,0.9940199851989746,0.9959373474121094,0.0,accept,unanimous_agreement
1883556554,8080,debug?),0,0,0,0.9709766507148744,0.9345797300338744,0.9831337332725524,0.0,accept,unanimous_agreement
1883660569,8080,the suggested code does not use `devdeps`,0,0,0,0.9874812960624696,0.9932411909103394,0.9945933222770692,0.0,accept,unanimous_agreement
1883678853,8080,root package always exists inside the lockfile. see [a link],0,0,0,0.98895663022995,0.9936275482177734,0.995414972305298,0.0,accept,unanimous_agreement
1883687084,8080,"sorry, i forgot to write 2nd part my suggest :grinning_face_with_smiling_eyes: we can save non-dev dependencies and check `!ok` here: [a link]",-1,-1,-1,0.9823052883148192,0.981069266796112,0.939260721206665,-1.0,accept,unanimous_agreement
1883689263,8080,"then the case when the lock file does not have a root package is an invalid lock file. i suggest returning an error when the root package is not found (and attach this link to the comment, please)",0,0,0,0.9853690266609192,0.9878965616226196,0.9939038157463074,0.0,accept,unanimous_agreement
1883689276,8080,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1883689420,8080,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1883689693,8080,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1883690650,8080,lockfile cannot contain multiple root projects [a link],0,0,0,0.9875385761260986,0.9910837411880492,0.993048131465912,0.0,accept,unanimous_agreement
1883692366,8080,fair enough. done [a link],0,0,0,0.9136762619018556,0.6319233179092407,0.7739514112472534,0.0,accept,unanimous_agreement
1883692978,8080,forgot about that. done [a link],-1,0,0,0.7775266170501709,0.9751463532447816,0.7511333227157593,0.0,accept,majority_agreement
1883693676,8080,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
1883699598,8080,for this `devdeps` needs to be filled in. i start a recursive traversal from the root project and its direct dependencies to get a list of all dependencies that don't belong to any group. all dependencies that are not visited during the traversal are dev.,0,0,0,0.9887855052947998,0.987438976764679,0.9943565726280212,0.0,accept,unanimous_agreement
1883711484,8080,"you are absolutely right. essentially, i'm suggesting that you reverse your logic: [code block]",0,0,0,0.8257038593292236,0.9035119414329528,0.8897961378097534,0.0,accept,unanimous_agreement
1883713142,8080,would it be a good tone to refer to the uv codebase?,0,0,0,0.9823012351989746,0.9914389848709106,0.9886167645454408,0.0,accept,unanimous_agreement
1883717303,8080,we always try to reproduce the logic of the language file application. `mvn` is a very clear example. so it's quite normal.,0,0,0,0.9139021039009094,0.9504191875457764,0.9896344542503356,0.0,accept,unanimous_agreement
1883754533,8080,"what do you think about logging this instead of returning an error? if we return an error, the analyzer will stop traversing. by the way, the same is true for other analyzers. a project may contain test data with broken files, analyzing which we stop traversing.",0,0,0,0.975264847278595,0.9481037855148317,0.9863843321800232,0.0,accept,unanimous_agreement
1886170276,8080,good point. let's use logger here and return `nil`: [a link],1,1,1,0.9616259932518004,0.8103948831558228,0.912884533405304,1.0,accept,unanimous_agreement
1886218634,8080,that's a good idea. done [a link],1,1,1,0.9653470516204834,0.9862414598464966,0.9875230193138124,1.0,accept,unanimous_agreement
1886495826,8080,i think it makes no sense to share the link for users. [code block],0,0,-1,0.8177797198295593,0.9329075813293456,0.6394909024238586,0.0,accept,majority_agreement
1886498737,8080,[code block] but you need to use `packages` and `dependencies` here: [a link],0,0,0,0.9885106086730956,0.9882537126541138,0.9956158399581908,0.0,accept,unanimous_agreement
1886499540,8080,can you use `//` here?,0,0,0,0.988017439842224,0.9918939471244812,0.996058225631714,0.0,accept,unanimous_agreement
1886502360,8080,`parse` may return 2 errors: - no root package - wrong toml file so i think we won't get many errors and can use `warn` here.,0,0,0,0.9749945998191832,0.9828073978424072,0.9893116354942322,0.0,accept,unanimous_agreement
1886504788,8080,let's save one line :grinning_face_with_smiling_eyes: [code block],0,0,0,0.9030229449272156,0.9819782376289368,0.9931786060333252,0.0,accept,unanimous_agreement
1886507549,8080,we already found the root package above. let's use it here instead of re-finding the root package.,0,0,0,0.9874841570854188,0.991523504257202,0.9941474199295044,0.0,accept,unanimous_agreement
1886583819,8080,then the example would be hard to copy,0,0,0,0.97358375787735,0.6505855321884155,0.9767529368400574,0.0,accept,unanimous_agreement
1886587741,8080,"got it, then at least straighten it out",0,0,0,0.9744462370872498,0.9730907678604126,0.9587454199790956,0.0,accept,unanimous_agreement
1886626596,8080,i forgot to look at the sorting implementations :),1,1,0,0.8147984147071838,0.9628000259399414,0.7343013286590576,1.0,accept,majority_agreement
1887935031,8080,same as for root package. we already got `packages` map: [a link] let's use this map.,0,0,0,0.9853508472442628,0.9811140894889832,0.9952806830406188,0.0,accept,unanimous_agreement
1887936774,8080,let's check case when lock file contains 2 root package and return error for this case.,0,0,0,0.9890503883361816,0.9922518134117126,0.9936633110046388,0.0,accept,unanimous_agreement
1887936897,8080,and add test case for that.,0,0,0,0.986825168132782,0.988602340221405,0.9953048229217528,0.0,accept,unanimous_agreement
1888043465,8080,wouldn't this check be unnecessary since uv doesn't support more than 1 root package?,0,0,0,0.9801738262176514,0.9819011092185974,0.9879419207572936,0.0,accept,unanimous_agreement
1888148801,8080,it's only 1 line of code. but it shows a warning to the user if he/she has changed the file incorrectly. we will also see the problem immediately if the following logic is changed: [a link],0,0,0,0.9832181930541992,0.9817031025886536,0.987971842288971,0.0,accept,unanimous_agreement
1889979261,8080,i don't think we need to fill in the deprecated field for the newly added package manager.,0,0,0,0.9737669825553894,0.9695397019386292,0.984102189540863,0.0,accept,unanimous_agreement
1889986712,8080,"we used to add this kind of test when the `package` struct was very small. today, it has `relationship`, `license` and many other fields, which makes it hard to maintain large test cases. instead, we manually create small test cases to cover edge cases these days. i think we can delete `uvlarge`.",0,0,0,0.977981984615326,0.9917284846305848,0.9840589761734008,0.0,accept,unanimous_agreement
1889988461,8080,i needed clarification on why this function could identify prod dependencies from the source code. can you please add some comments?,0,0,0,0.9845549464225768,0.9869472980499268,0.990505039691925,0.0,accept,unanimous_agreement
1890190752,8080,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1890190982,8080,removed [a link],0,0,0,0.980537474155426,0.9906651973724364,0.9876884818077089,0.0,accept,unanimous_agreement
1890191318,8080,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1890606062,8080,"are development dependencies listed in `[package.dev-dependencies]`? if so, we need to parse them for `--include-dev-deps`.",0,0,0,0.989231526851654,0.9948614239692688,0.9941518902778624,0.0,accept,unanimous_agreement
1891199143,8080,we will do that in a separate pr.,0,0,0,0.9863622784614564,0.98905211687088,0.9940401911735536,0.0,accept,unanimous_agreement
1891328554,8080,"users don't always need to scan development dependencies, so we don't always use `dev` field and just skip them. do you have a feature request? if not, i suggest waiting for a user request (like we did for yarn dependencies).",0,0,0,0.9841901659965516,0.9899543523788452,0.9936813116073608,0.0,accept,unanimous_agreement
1919756905,8177,i added info about `-` and `0` into logs: [code block] but we can add info before table. e.g.: [code block] /trivy wdyt?,0,0,0,0.9895344376564026,0.9913883805274964,0.9946889877319336,0.0,accept,unanimous_agreement
1919759949,8177,the summary table contains aggregated targets. do we want to split them by `filepath` in this pr or just start working on removing the aggregation (in another pr)? cc.,0,0,0,0.9888229370117188,0.9936378598213196,0.9946375489234924,0.0,accept,unanimous_agreement
1922767474,8177,"should we elaborate on why a certain file ""didn't scan""? is it because it was unable to get parsed, wasn't valid for the scan (then maybe we shouldn't even traverse it) or something else?",0,0,0,0.9654801487922668,0.9586438536643982,0.9874067902565002,0.0,accept,unanimous_agreement
1923076075,8177,"i think we can wait for user feedback: in most cases `-` will be used for the case when the file is scanned by another scanner. e.g., we scanned `dockerfile`, and `-` will be for vulnerabilities. in case the file is invalid (e.g. wrong lock file) - the report will not include the result with this file.",0,0,0,0.9868412017822266,0.992950677871704,0.9857447743415833,0.0,accept,unanimous_agreement
1933152414,8177,i prefer putting it in the footer. [code block],0,0,0,0.936261773109436,0.98398095369339,0.9900749325752258,0.0,accept,unanimous_agreement
1933191544,8177,"i didn't split aggregated results, but, actually yes, we can split them in the table writer. i think we should do that in this pr. we will not need the logic after removing the aggregation, though.",0,0,0,0.9777555465698242,0.9848999977111816,0.9913769960403442,0.0,accept,unanimous_agreement
1933339983,8177,examples: [code block],0,0,0,0.9847283959388732,0.989849090576172,0.9958219528198242,0.0,accept,unanimous_agreement
1933391082,8177,"this check is required to hide os package licenses from summary table. this is necessary to avoid confusion - when we show that we were looking for licenses for os packages, but there were no os packages in the scanned folder. e.g.: [code block] but on the other hand it will be a problem for scanning an image where we did not find os packages. because the user may think that we did not look for licenses for os package files. but the second case is more rare, so i chose this way. tell me - if you disagree or have other ideas",0,0,0,0.9285334348678588,0.9574106335639954,0.9718062281608582,0.0,accept,unanimous_agreement
1933392989,8177,similar case. we only keep file licenses and dpkg licenses (but we remove them in `applier`) in this slice. so the report can only include file licenses. we don't need to show this result if the `--liecense-full` flag is not set.,0,0,0,0.9877848625183104,0.9943278431892396,0.9908214807510376,0.0,accept,unanimous_agreement
1933619210,8177,"actually, after we introduce the summary table, i don't think we have to show os packages when trivy is unable to find os packages.",0,0,0,0.9833971858024596,0.9837636947631836,0.9911155700683594,0.0,accept,unanimous_agreement
1933669365,8177,it make sense. removed in [a link],0,0,0,0.9859068393707277,0.991424024105072,0.991555631160736,0.0,accept,unanimous_agreement
1933673301,8177,done - [a link] + [a link],0,0,0,0.9831010699272156,0.9599411487579346,0.992377758026123,0.0,accept,unanimous_agreement
1933673597,8177,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1933701726,8177,"for example, suppose a flag has already been added for a long time, and we don't want to terminate a program for backward compatibility as it will change behavior. in that case, we have to make it a warning, but an error is basically better because the user may not see the warning message. [code block]",0,0,0,0.9782045483589172,0.9602904915809632,0.986336350440979,0.0,accept,unanimous_agreement
1933708577,8177,"it looks like the legend is still in header, not footer.",0,0,0,0.9841430187225342,0.9902291893959044,0.9816847443580629,0.0,accept,unanimous_agreement
1933744147,8177,"sorry. something ""stuck"" me. i don't know why i added legend before summary table. fixed in [a link]",-1,-1,-1,0.9883643388748168,0.99363374710083,0.9900570511817932,-1.0,accept,unanimous_agreement
1933749871,8177,i saw one case - we show log after summary table: [code block] we might want to add a header (e.g. `result tables`) before result tables (after the legend) to separate summary table from other tables. but on the other hand i think it's redundant.,0,0,0,0.9740014672279358,0.9912095069885254,0.970990777015686,0.0,accept,unanimous_agreement
1940627922,8177,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
1940701927,8177,nit: we can probably remove an iteration over `vulns`. [code block],0,0,0,0.9895899891853333,0.992948055267334,0.9926683306694032,0.0,accept,unanimous_agreement
1940728683,8177,it might be time to split into functins. [code block],0,0,0,0.9867146611213684,0.9921575784683228,0.991178810596466,0.0,accept,unanimous_agreement
1940744746,8177,"we may need to write the rendered output to a buffer and flush it later to stdout, like [a link]. [a link]",0,0,0,0.9871794581413268,0.9942883253097534,0.9937092065811156,0.0,accept,unanimous_agreement
1942330835,8177,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1942331074,8177,nice catch! removed in [a link],1,1,1,0.99033921957016,0.99285626411438,0.9941943287849426,1.0,accept,unanimous_agreement
1942331606,8177,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1942333988,8177,i used renderer interface for summary table - [a link] i found that we have same problem in `main` branch: [code block] so i want to fix that in separate pr.,0,0,0,0.985045611858368,0.9866713881492616,0.9917980432510376,0.0,accept,unanimous_agreement
1942469011,8177,- [a link],0,0,0,0.9849315881729126,0.9847033619880676,0.9919177889823914,0.0,accept,unanimous_agreement
1977038136,8177,i thought we could just enable all scanners. but i think we need to use the same format(logic) for `convert` and other subcommands. so i enabled `--scanners` that users can get summary table as for `table` format.,0,0,0,0.9832589626312256,0.9905518293380736,0.9898496866226196,0.0,accept,unanimous_agreement
1977040643,8177,i rebased and updated pr with updated interface,0,0,0,0.9788503050804138,0.9729124903678894,0.9911206364631652,0.0,accept,unanimous_agreement
1977221979,8177,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1977222051,8177,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1977222130,8177,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1977222183,8177,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1977239864,8177,"this is a major ui change, so there might be some backlash from the community. in that case, since switching from opt-out to opt-in is possible, it might be a good idea to mark it as experimental. also, as [a link], boolean flags are not very flexible. specifying it as something like `--table summary,detail` could be an alternative option. this approach would allow us to meet future requests from users who may only want to display the summary table, and by changing the default values, it would be easy to switch between opt-in and opt-out.",0,0,0,0.910156548023224,0.9865764379501344,0.9319628477096558,0.0,accept,unanimous_agreement
1977244300,8177,hm... it make sense. i will update pr.,0,0,0,0.9375168085098268,0.8741860389709473,0.9580432772636414,0.0,accept,unanimous_agreement
1977269437,8177,"there are several options: - --table - --table-view - --table-format - --table-mode also, - summary|detail - summary|detailed - etc.",0,0,0,0.9839500188827516,0.9914024472236632,0.995120108127594,0.0,accept,unanimous_agreement
1977273226,8177,"i think this is a good idea. in the `trivy-aws` plugin, the report flag takes an enumeration:",1,0,1,0.9046220183372498,0.5276816487312317,0.9845735430717468,1.0,accept,majority_agreement
1977275054,8177,`--table-mode` + `summary|details` (with `s` suffix) are my favorite.,0,0,0,0.9225729703903198,0.8599778413772583,0.8347688317298889,0.0,accept,unanimous_agreement
1977296637,8177,"my friend :) recommended `detailed`, but you can decide it. --- when deciding on terminology to distinguish between a concise summary output and a more exhaustive one, many tools and uis use the terms **“summary”** and **“detailed.”** while “detail” or “details” might seem similar at first glance, **“detailed”** is often chosen for the following reasons: 1. **consistent adjective pairing** - in english, it’s common to describe views or reports using adjectives. for instance, many interfaces provide a “summary view” and a “detailed view,” or a “summary report” and a “detailed report.” using “detailed” as an adjective aligns naturally with “summary” in such contexts. 2. **clear mode indicator** - when specifying a mode in a cli or configuration file, saying `detailed` conveys that you want the more comprehensive or in-depth version of the output. an adjective like “detailed” feels more intuitive than the noun form “details,” which might be perceived as describing the objects being displayed rather than the mode or style of display. 3. **established convention** - many existing tools (even if they don’t directly use the exact words “summary” and “detailed”) follow the pattern of an abbreviated or condensed output versus a more verbose output. where explicit labels are used, it’s more common to see “detailed” than “details” for the extended version. 4. **smoother documentation** - documentation and user guides often refer to “detailed mode” (or a “detailed report”), making it very clear that it’s an expanded form of the output. conversely, “details mode” or “details report” can sound slightly off in english usage, as it doesn’t match the typical way we describe different presentation modes. in short, **“detailed”** pairs nicely with **“summary”** and is more recognizable to users as the counterpart for a “deep-dive” option, while “detail” or “details” tend to read more like nouns referring to the actual data rather than the presentation style.",1,1,1,0.9695671796798706,0.9912111163139344,0.9949306845664978,1.0,accept,unanimous_agreement
1977298780,8177,"`--table-mode` also looks good to me. then, the pairing of ""summary mode"" and ""detailed mode"" may be straightforward.",1,1,0,0.7179853320121765,0.767746090888977,0.7830016016960144,1.0,accept,majority_agreement
1978119487,8177,"in the interest of not committing bike shedding... i'll vote for `--table-mode` flag with `=detailed,summary` as values. :grinning_squinting_face:",-1,0,1,0.6440958976745605,0.9862315058708192,0.7015394568443298,,review,no_majority_disagreement
1978829936,8177,"since it's a normal usage, we don't need to use a note, imo. [code block]",0,0,0,0.9856683015823364,0.8497732281684875,0.6571984887123108,0.0,accept,unanimous_agreement
1978830105,8177,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
1978832122,8177,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
1978832892,8177,changed `--no-summary-table` to `--table-mode` - [a link] perhaps you will have more ideas.,0,0,0,0.9816070795059204,0.9905598759651184,0.9948002099990844,0.0,accept,unanimous_agreement
1978923869,8177,"i played with this pr and found that it's common that no secrets detected. since warnings should be displayed for unexpected things, i think the info level is better here. [code block]",0,0,0,0.9541407823562622,0.959961712360382,0.7137892246246338,0.0,accept,unanimous_agreement
1978936811,8177,"nit: it's no big deal, but the alignment looks a bit strange when `-` is used in all columns. [code block] [code block]",0,-1,-1,0.8500720858573914,0.7660890817642212,0.7681490778923035,-1.0,accept,majority_agreement
1978960143,8177,nice catch. i somehow didn't pay attention to it. updated [a link],1,1,1,0.9806702136993408,0.9788059592247008,0.9905350804328918,1.0,accept,unanimous_agreement
307968523,99,you miss a newline here.,-1,0,0,0.5864071249961853,0.6708447933197021,0.9442076683044434,0.0,accept,majority_agreement
307968594,99,those lines are kinda useless.,-1,-1,-1,0.958390474319458,0.9835729002952576,0.9697709679603576,-1.0,accept,unanimous_agreement
307968605,99,i would rather see the shell changed here. see [a link],0,0,0,0.9831520318984984,0.9880875945091248,0.9915214776992798,0.0,accept,unanimous_agreement
307968621,99,hardcoding version numbers is nice but i would make it a little bit less strict.,0,0,0,0.5072369575500488,0.7855424284934998,0.6667590737342834,0.0,accept,unanimous_agreement
307968720,99,i really dislike it when people do this. it prvents you from doing ``docker run --rm -it trivy/trivy bash``.,-1,-1,-1,0.9872274398803712,0.9896464943885804,0.9901646971702576,-1.0,accept,unanimous_agreement
307973174,99,"true, it's the way i draft my wip stuff :)",1,1,1,0.9752496480941772,0.9813594818115234,0.8704639673233032,1.0,accept,unanimous_agreement
307973194,99,i don't follow?,0,0,0,0.9345024824142456,0.8350744843482971,0.9756900072097778,0.0,accept,unanimous_agreement
307973224,99,don't know here. all official dockerfile use this format as well,0,0,0,0.9852520227432252,0.5499475002288818,0.9929839372634888,0.0,accept,unanimous_agreement
307973266,99,"no problem. on my critical apps in prod, i prefer to do this as i had one nassssty bug cause but a package in the past.",0,0,0,0.8734938502311707,0.6626877188682556,0.6593048572540283,0.0,accept,unanimous_agreement
307973305,99,"humm, this is strange. it should not prevent you to `docker run --rm -it trivy/trivy sh`",-1,-1,-1,0.9604032039642334,0.9902163743972778,0.9395562410354614,-1.0,accept,unanimous_agreement
307973410,99,the beauty of this is that you can overide cmd by passing an attribute during the docker run.,0,0,0,0.972981333732605,0.8159232139587402,0.9609838724136353,0.0,accept,unanimous_agreement
307973453,99,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
307989252,99,github told me that you miss a line break here. this breaks diffs at the end of the file. or you just override it and put a trivy before.,0,0,0,0.9684666395187378,0.7638762593269348,0.990943968296051,0.0,accept,unanimous_agreement
307989301,99,but you would need to repeat this in every run. kinda pointless.,-1,-1,-1,0.9758816957473756,0.9916138648986816,0.9289814829826356,-1.0,accept,unanimous_agreement
307989366,99,i think this is a mistake.,-1,0,-1,0.9320451021194458,0.5430154204368591,0.975731074810028,-1.0,accept,majority_agreement
307989379,99,this would pass sh as an argument to trivy.,0,0,0,0.9874714016914368,0.99338960647583,0.99144846200943,0.0,accept,unanimous_agreement
308003350,99,"well, this build runs perfectly. i don't know what to do with this.",0,0,-1,0.6055212616920471,0.9074786305427552,0.9275467991828918,0.0,accept,majority_agreement
308005711,99,you added a new line to the file in a commit somewhere. consider this solved.,0,0,0,0.9795255661010742,0.9848900437355042,0.9932776093482972,0.0,accept,unanimous_agreement
308015887,99,no idea where this is coming from. can you fix it?,0,-1,-1,0.8664150238037109,0.5068815350532532,0.6114131808280945,-1.0,accept,majority_agreement
308016381,99,"you don't need to delete this dir, when running apk with --no-cache",0,0,0,0.9863665103912354,0.9896056652069092,0.993510901927948,0.0,accept,unanimous_agreement
308023329,99,it's best practice when installing packages.,0,0,0,0.9735469222068788,0.9755831360816956,0.9585339426994324,0.0,accept,unanimous_agreement
308023433,99,agreed,0,0,0,0.9622963666915894,0.9622275233268738,0.9598594307899476,0.0,accept,unanimous_agreement
308023774,99,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
308091974,99,no i can't. it's your pr not mine.,0,0,0,0.7342774271965027,0.8573260307312012,0.7252823114395142,0.0,accept,unanimous_agreement
308227487,99,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
308227805,99,what do you suggest?,0,0,0,0.978707194328308,0.9866458177566528,0.9916003942489624,0.0,accept,unanimous_agreement
308438563,99,just add trviy to the cmd. if you wan't to change it you just need to write trivy in the command arg.,0,0,0,0.9853877425193788,0.993187665939331,0.994839608669281,0.0,accept,unanimous_agreement
308463933,99,agreed?,0,0,0,0.973708987236023,0.9719335436820984,0.9875431060791016,0.0,accept,unanimous_agreement
308463976,99,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
308464145,99,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
308487861,99,you are missing a new line here,0,0,0,0.960019826889038,0.9787448644638062,0.9923457503318788,0.0,accept,unanimous_agreement
308497845,99,this is weird. see screenshot: ![a link],-1,-1,-1,0.9910927414894104,0.9906717538833618,0.995962917804718,-1.0,accept,unanimous_agreement
308497864,99,what's missing?,0,0,0,0.9348101615905762,0.9758636951446532,0.9677937626838684,0.0,accept,unanimous_agreement
308627454,99,the final new line. you always add a final new line to files in the linux world.,0,0,0,0.9877614974975586,0.9911835193634032,0.9937601685523988,0.0,accept,unanimous_agreement
308629588,99,humm didn't know it. cheers!,1,1,1,0.979093849658966,0.9838268160820008,0.9938807487487792,1.0,accept,unanimous_agreement
363371828,99,"referring to the previous discussion about this line ([a link] - the change from calling `trivy` from the entrypoint to the cmd does not really make sense... the first thing i did with the image after building it was to kick the tires: [code block] [code block] that's what i expected - i'd need to pass some arguments. happily, `trivy` printed usage information telling me that i needed to state the image as the first positional argument - i can now get to work: [code block] [code block] this is not what i expected to happen, given the usage information. setting the command to the application like this only makes sense if the application is a service. as `trivy` is not, the only thing that can ever happen is that it is envoked without any arguments and fails... that's not the most useful thing in the world! it would therefore be better if changed back to entrypoint (and it maintains compatibility with how the existing image works). if you want to hack around in a container when the entrypoint has been set to something that's not a shell, the way to do it is to override the entrypoint: `docker run --rm -it --entrypoint=bash trivy/trivy`.",-1,0,0,0.7429947257041931,0.8828418850898743,0.8882482051849365,0.0,accept,majority_agreement
363375129,99,"it would be great if `goarch` was based on the actual build architecture/a build variable (e.g. this builds fine for a rpi if set to `arm`). however, it may be better to solve this later, in a following pr.",0,0,0,0.9103068709373474,0.9919615387916564,0.9831615686416626,0.0,accept,unanimous_agreement
363471792,99,and i expect it to run bash cause all official images do function like this and adding ``--entrypoint`` works but it is not nice.,0,-1,-1,0.644232988357544,0.8708884119987488,0.9818989038467408,-1.0,accept,majority_agreement
363472338,99,i would love to see something like [a link] . adds 116 bytes and fixes my and your problem.,0,1,1,0.6351915597915649,0.982320249080658,0.9799016714096068,1.0,accept,majority_agreement
363527433,99,"i've not reviewed what all official images do but i would comment that running a shell inside such a container is perhaps not most people's the main use case. it is interesting to note that ""distroless"" images are seemingly becoming popular now (e.g. those by google [a link] which do not support such use case at all. i wouldn't mind a more exotic entrypoint as you suggested.",0,0,0,0.8383117318153381,0.8971384763717651,0.8822339773178101,0.0,accept,unanimous_agreement
363528216,99,these need to be populated (or removed if not relevant).,0,0,0,0.9806061387062072,0.9890828132629396,0.9938631057739258,0.0,accept,unanimous_agreement
363554641,99,"please edit them as i'm not the maintainer of this project. or maybe remove it, and add this task in your backlog. these labels are following best practices.",0,0,0,0.9818846583366394,0.9868893623352052,0.9904841184616088,0.0,accept,unanimous_agreement
365021274,99,i am also not the maintainer ;). i will see if any of the maintainers will get involved.,0,0,1,0.5403620004653931,0.9743613600730896,0.949012279510498,0.0,accept,majority_agreement
432822184,99,"if you are using docker buildx to build multi-arch the `$targetarch` argument (auto injected but needs to be defined) contains the build arch (`amd64`, `arm64` etc). so basically: [code block] should work just fine.",0,0,0,0.9788975715637208,0.9930845499038696,0.9908952713012696,0.0,accept,unanimous_agreement
509840036,99,i fixed this: [a link],0,0,0,0.9856756925582886,0.9492053389549256,0.9439183473587036,0.0,accept,unanimous_agreement
509841355,99,agree,0,0,0,0.9757640957832336,0.9753760099411012,0.8991182446479797,0.0,accept,unanimous_agreement
393040016,433,"if it is vulnerabilities of libraries, we should not the severity of a vendor. we have to think about the way to display the vendor severity for os package vulnerabilities and the nvd/public database severity for library vulnerabilities.",0,0,0,0.957064151763916,0.983061134815216,0.9847991466522216,0.0,accept,unanimous_agreement
397543183,433,"roger that. with the latest changes, this is now possible: this was a node vulnerability where the vendor (node) rated it lower than nvd, so we preferred the node vulnerability instead.",0,0,0,0.972293734550476,0.990571141242981,0.9896873831748962,0.0,accept,unanimous_agreement
397558898,433,i'm not sure if this is correct since we have to maintain `detect` for backwards compatibility. cc,0,0,0,0.8515483736991882,0.7944498658180237,0.7590307593345642,0.0,accept,unanimous_agreement
397834182,433,i think we don't have to store `vendorseverity` in the result.,0,0,0,0.9832594394683838,0.967737078666687,0.9802196621894836,0.0,accept,unanimous_agreement
398025720,433,"if `ok` is false, we should display the severity of nvd. i couldn't find such a process. is there something to do it?",0,0,0,0.886384129524231,0.9130526185035706,0.98923522233963,0.0,accept,unanimous_agreement
398027530,433,"trivy is not a library for now, so i think it doesn't matter.",-1,0,0,0.5045627355575562,0.9066606163978576,0.9752623438835144,0.0,accept,majority_agreement
398028120,433,todo: fill reporttype,0,0,0,0.988106608390808,0.9880658388137816,0.994112193584442,0.0,accept,unanimous_agreement
398028685,433,"if we send a `reporttype` in a rpc request, we should use it instead of `req.osfamily`.",0,0,0,0.9884888529777528,0.9952389001846312,0.994218111038208,0.0,accept,unanimous_agreement
398067054,433,"by default, `getvulnerability` includes a vulnerability struct that already has a `severity` populated in it. you can see it here [a link] but there's another point that i think is possible, i added some tests to show that: [a link] and [a link] good catch!",1,1,1,0.96384197473526,0.956596851348877,0.9911621809005736,1.0,accept,unanimous_agreement
398071479,433,"yeah, where can we get this from?",0,0,0,0.9816606044769288,0.9842499494552612,0.9938836097717284,0.0,accept,unanimous_agreement
398074207,433,could you explain this a little more?,0,0,0,0.9791058897972108,0.9883162379264832,0.987392008304596,0.0,accept,unanimous_agreement
398083639,433,yeah currently `detectedvulnerability ` includes `vulnerability` which includes `vendorseverity`. [a link] is there a way we can get rid of it in the result?,0,0,0,0.985895335674286,0.9936951994895936,0.993919849395752,0.0,accept,unanimous_agreement
398501249,433,"`getvulnerability` populates a severity which is sometimes not from nvd. nit: btw, i feel it is weird `getxxx` doesn't return anything.",-1,-1,-1,0.9847713112831116,0.921971559524536,0.9546539187431335,-1.0,accept,unanimous_agreement
398502834,433,we have to add `type` here. [a link] but this api exists for backward compatibility because we switched `detect` to `scan` for json cache. i'm not sure we should maintain this function.,0,0,0,0.9040554165840148,0.9606618881225586,0.9611720442771912,0.0,accept,unanimous_agreement
398502980,433,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
398780652,433,also shouldn't a test be failing right now if this information is missing?,0,0,0,0.9645220041275024,0.9794245958328248,0.988714635372162,0.0,accept,unanimous_agreement
398898124,433,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
398898193,433,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
398911855,433,i added source [a link] and removed the vendorseverity here [a link],0,0,0,0.9872660636901855,0.9810057878494264,0.995518922805786,0.0,accept,unanimous_agreement
398988449,433,note to self: change this to master once [a link] is merged.,0,0,0,0.9874994158744812,0.990916669368744,0.9937254786491394,0.0,accept,unanimous_agreement
400822525,433,you have to add some tests for light database instead. it may be like the following. [code block],0,0,0,0.9846656322479248,0.99149888753891,0.995063841342926,0.0,accept,unanimous_agreement
400822890,433,is this todo necessary? the bool seems to be already removed.,0,0,0,0.9870930314064026,0.9910206198692322,0.9939967393875122,0.0,accept,unanimous_agreement
400823196,433,note: remove this todo.,0,0,0,0.9795814156532288,0.9820283651351928,0.9930740594863892,0.0,accept,unanimous_agreement
401176841,433,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
406705331,433,"it should point to this commit. [a link] in addition, you need `go mod tidy`",0,0,0,0.98707377910614,0.9938520193099976,0.9956638216972352,0.0,accept,unanimous_agreement
406733146,433,why is the only first one used?,0,0,0,0.9402996897697448,0.942886769771576,0.9899471402168274,0.0,accept,unanimous_agreement
406734729,433,cruft?,0,0,0,0.9747046232223512,0.9585397839546204,0.6516714096069336,0.0,accept,unanimous_agreement
406737051,433,"didn't you fix them, yet?",0,0,0,0.9790462255477904,0.9858993887901306,0.9883140325546264,0.0,accept,unanimous_agreement
406737686,433,i'd like to know why this result doesn't contain `type`.,0,0,0,0.9828164577484132,0.975368857383728,0.9846776723861694,0.0,accept,unanimous_agreement
406738345,433,this error should be just after line 49.,0,0,0,0.9649207592010498,0.9874897599220276,0.9781324863433838,0.0,accept,unanimous_agreement
406739721,433,nit: [code block] ```,0,0,0,0.9845751523971558,0.9811146855354308,0.991054356098175,0.0,accept,unanimous_agreement
406740257,433,did you apply `make fmt`? it's a bit weird compared to `target`.,-1,-1,-1,0.975547969341278,0.9221803545951844,0.9154749512672424,-1.0,accept,unanimous_agreement
406740905,433,nit: i think we don't have to change the import order like this.,0,0,0,0.967777132987976,0.9097105860710144,0.9846685528755188,0.0,accept,unanimous_agreement
406741450,433,is there any reason not to use `result.type`?,0,0,0,0.9851524829864502,0.9930599927902222,0.993867814540863,0.0,accept,unanimous_agreement
406741761,433,"`rpcresults` has `type` in the struct, right? why does it need `resulttype` as an argument?",0,0,0,0.9863787889480592,0.9949193596839904,0.992681086063385,0.0,accept,unanimous_agreement
406741919,433,can't we do like the following? [code block],0,0,0,0.986864984035492,0.9687716364860536,0.995795488357544,0.0,accept,unanimous_agreement
407705406,433,"si, i just forget to take the commented section out. i've fixed it.",0,0,0,0.9765216708183287,0.973136067390442,0.978058934211731,0.0,accept,unanimous_agreement
407715249,433,"the mock was missing it, i added it.",0,0,0,0.9782738089561462,0.9832401871681212,0.9933167695999146,0.0,accept,unanimous_agreement
407720566,433,i think adding the temporal variable of source doesn't really help with duplication. i'd like to leave it as is unless i missed a point.,0,0,0,0.9439173936843872,0.9411248564720154,0.9736986756324768,0.0,accept,unanimous_agreement
407723126,433,yes i ran `make fmt`,0,0,0,0.9844363927841188,0.9921129941940308,0.9938854575157166,0.0,accept,unanimous_agreement
407724806,433,it's my ide that thinks this is the right order. i can revert back. i don't think it's a big deal though.,0,0,0,0.7697739601135254,0.7925876379013062,0.708399772644043,0.0,accept,unanimous_agreement
407742030,433,"ok. but i want to know why it doesn't help. if the signature of getvendorseverity is changed, we have to fix all of them.",0,0,0,0.956435203552246,0.68609219789505,0.919356405735016,0.0,accept,unanimous_agreement
407749218,433,ah good catch.,1,1,1,0.9452776908874512,0.984192669391632,0.9837293028831482,1.0,accept,unanimous_agreement
407752596,433,"you are right. i don't recall why i added this, maybe it was prior to introducing the `type` type. i have removed it now. thanks!",1,1,1,0.973295509815216,0.993805766105652,0.9905559420585632,1.0,accept,unanimous_agreement
407752681,433,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
407753494,433,but it does [a link] is that not right?,0,0,0,0.8437178134918213,0.9827008843421936,0.9925568103790284,0.0,accept,unanimous_agreement
407756849,433,"fair enough, i refactored it.",0,0,0,0.9558349251747132,0.8955974578857422,0.972283899784088,0.0,accept,unanimous_agreement
409507789,433,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
409508406,433,"ah, i see. i saw the only first one. after `go mod tidy`, they will be removed.",0,0,0,0.9832205772399902,0.9656388759613036,0.9859981536865234,0.0,accept,unanimous_agreement
1168657039,4058,i think we can change it to `[]*spdx.package`. [code block],0,0,0,0.9876076579093932,0.9878929257392884,0.9911881685256958,0.0,accept,unanimous_agreement
1168661125,4058,i think they are no longer needed after changing packages to slice.,0,0,0,0.9716904759407043,0.9777202606201172,0.9886661767959596,0.0,accept,unanimous_agreement
1168663024,4058,i'm curious why we need go-cmp here. doesn't `assert.equal` work?,0,-1,0,0.9480018019676208,0.6776073575019836,0.9524309635162354,0.0,accept,majority_agreement
1168665222,4058,`creators` is a slice. do we need to sort it?,0,0,0,0.987731158733368,0.9917721152305604,0.9929156303405762,0.0,accept,unanimous_agreement
1168666272,4058,i believe we will not need that.,0,0,0,0.8080291748046875,0.9355770945549012,0.9330697655677797,0.0,accept,unanimous_agreement
1168667531,4058,is the order of files inconsistent?,0,0,0,0.9629698991775512,0.9790014028549194,0.961647927761078,0.0,accept,unanimous_agreement
1168709377,4058,"i kept it in order to remove duplications, i've used `[]*spdx.package` before but then i've got multiple packages with the same `elementid`.",0,0,0,0.986967384815216,0.9879133105278016,0.9949905276298524,0.0,accept,unanimous_agreement
1168713516,4058,"oops, i'll remove it :)",-1,1,-1,0.4864420294761657,0.98334538936615,0.8423373103141785,-1.0,accept,majority_agreement
1168714778,4058,since the map is used to remove duplications i still needed it.,0,0,0,0.9855205416679382,0.9853642582893372,0.9883677363395692,0.0,accept,unanimous_agreement
1168721221,4058,"i've done it to be on the safe side, so the goldan file will not need to be changed to the exact order. i can remove it if you like.",0,0,0,0.9674689769744872,0.9689577221870422,0.986857533454895,0.0,accept,unanimous_agreement
1168722707,4058,same as in [a link],0,0,0,0.986356258392334,0.9902995824813844,0.9946607947349548,0.0,accept,unanimous_agreement
1168724934,4058,same as [a link] should i remove it?,0,0,0,0.9851036667823792,0.9926669001579284,0.9943301677703856,0.0,accept,unanimous_agreement
1168725788,4058,could you share an example where you saw the duplications?,0,0,0,0.9876667261123656,0.9911215305328368,0.9911333918571472,0.0,accept,unanimous_agreement
1168727277,4058,"yes, it is relevant to this discussion. [a link]",0,0,0,0.9753325581550598,0.6990579962730408,0.9915948510169984,0.0,accept,unanimous_agreement
1168732581,4058,"imo, the golden file should be sorted in the exact order. we can remove it. it would be great if `bom.creationinfo.creators` implements [a link], though.",0,0,0,0.6600168347358704,0.9393022656440736,0.9809961318969728,0.0,accept,unanimous_agreement
1168748901,4058,"sure, i've got it from the unit test `testmarshaler_marshal - happy path for container scan`, `actionpack` define in `target: ""app/subproject/gemfile.lock"",` and in `target: ""app/gemfile.lock"",` [code block]",1,0,0,0.6178693771362305,0.9838992357254028,0.8267801403999329,0.0,accept,majority_agreement
1168758194,4058,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1168758437,4058,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
1168758676,4058,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
1168810267,4058,"thanks. that is what i expected, and i wanted to confirm it. i want to change it to have both files, but it can be done in another pr. we can leave it as is.",1,1,1,0.934469997882843,0.9652829170227052,0.9545470476150512,1.0,accept,unanimous_agreement
1168815927,4058,i'd sort packages when marshaling rather than in tests. [a link],0,0,0,0.9862789511680604,0.9859631657600404,0.9926367998123168,0.0,accept,unanimous_agreement
1168859942,4058,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1168860294,4058,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
453951381,542,please avoid use of global constants. you should make these as part of the server config struct that's available here [a link] and initialize them here [a link],0,0,0,0.9862674474716188,0.993557870388031,0.9929147958755492,0.0,accept,unanimous_agreement
453952226,542,dry: have one function that can take the current args and in addition have another arg for the appropriate action.,0,0,0,0.9873172640800476,0.9844847917556764,0.9917389154434204,0.0,accept,unanimous_agreement
453953246,542,what's the difference between the two? running them locally they are the same: [code block],0,0,0,0.9839287996292114,0.9924541115760804,0.9942237734794616,0.0,accept,unanimous_agreement
453953487,542,inline,0,0,0,0.9861072301864624,0.9631757736206056,0.833534836769104,0.0,accept,unanimous_agreement
453957307,542,this will panic. logger will only log the error that happens but it will not prevent it from getting used in the future. a simple way to reproduce this is to pass in `nil` for `gaugemetric` which would signal that it was not initialized.,-1,0,0,0.7137531638145447,0.9833088517189026,0.8817968964576721,0.0,accept,majority_agreement
453958135,542,should validate if the input args are sane or not. see previous comment on how this will be part of a panic.,0,0,0,0.904139757156372,0.9889890551567078,0.9904875159263612,0.0,accept,unanimous_agreement
453962378,542,i think we should probably set a sane `timeout` as not setting one will keep connections open indefinitely. see here [a link],0,0,0,0.9763035178184508,0.9876022934913636,0.9875636696815492,0.0,accept,unanimous_agreement
453995476,542,"so, last db update corresponds to the timestamp of last successful db update. but last db update attempt corresponds to the timestamp of last db update attempt made no matter if it failed or succeeded.",0,0,0,0.9856239557266236,0.9935909509658812,0.9925445318222046,0.0,accept,unanimous_agreement
459072487,542,"so , if such kind of situation happens, then should i programme the code to panic and exit with status 1. or should i just programme it to log in the terminal ""gaugemetric not initialised"" but still **not** make the code exit and hence, allow the user to use the existing session for other functionalities, if they want?",0,0,0,0.9753161072731018,0.9899436235427856,0.9840133786201476,0.0,accept,unanimous_agreement
462742417,542,the latter. this shouldn't panic and exit as it's an optional component. we should log it and carry on as usual with ensuring that nothing else panics down the road.,0,0,0,0.9588677883148192,0.9782414436340332,0.9540048837661744,0.0,accept,unanimous_agreement
465967091,542,i think you're fine with just having `prometheus gauge found to be nil` as `wanterr`.,0,0,0,0.971333622932434,0.985936164855957,0.983588457107544,0.0,accept,unanimous_agreement
465967902,542,lowercase the returned error. `prometheus gauge found to be nil` see [a link],0,0,0,0.9858520030975342,0.9930692911148072,0.9909374713897704,0.0,accept,unanimous_agreement
465968288,542,these comments are not necessary. the code is self documenting.,0,0,0,0.9811919331550598,0.986563801765442,0.9928598999977112,0.0,accept,unanimous_agreement
465968366,542,remove as well,0,0,0,0.9853297472000122,0.981656849384308,0.988234043121338,0.0,accept,unanimous_agreement
465969987,542,this is not needed. in go by default the value will be `nil`. you've added a check before using it in functions where it's used and that's sufficient.,0,0,0,0.9876691699028016,0.9932593703269958,0.9945223331451416,0.0,accept,unanimous_agreement
469803825,542,`config` is for cli options. could you move it to the server package?,0,0,0,0.989407241344452,0.995329737663269,0.9950826168060304,0.0,accept,unanimous_agreement
469814253,542,i'm just curious why you need `last_db_update_attempt`. is there any example in other oss?,0,0,0,0.9737535119056702,0.929344892501831,0.9878695607185364,0.0,accept,unanimous_agreement
469815896,542,`time.now()` doesn't match with the date when db is updated. we have to use metadata instead of `time.now`,0,0,0,0.9860401153564452,0.989540994167328,0.9917548894882202,0.0,accept,unanimous_agreement
469816091,542,would you wrap this error with some context?,0,0,0,0.9797037839889526,0.989694595336914,0.9890769720077516,0.0,accept,unanimous_agreement
469843833,542,"actually, the issue mentioned it as one of the requirements, so moved on with that :)",1,1,1,0.5226141214370728,0.9937408566474916,0.5969072580337524,1.0,accept,unanimous_agreement
485199465,542,"actually, it was an old piece of code which i forgot to refactor. i'll deal with it.",0,0,0,0.983692705631256,0.9553393125534058,0.9423028230667114,0.0,accept,unanimous_agreement
491199141,542,remove,0,0,0,0.9725990891456604,0.947705328464508,0.9896913170814514,0.0,accept,unanimous_agreement
491199283,542,remove,0,0,0,0.9725990891456604,0.947705328464508,0.9896913170814514,0.0,accept,unanimous_agreement
513553726,709,"this change increases the possibility of breaking table format on a terminal. ![a link] we need to break a line in the middle or get the width of the terminal to dynamically change the output. if the terminal is wide enough, it displays avd links. or, we can disable it in the table, add a new key in json like `avdlink`, and put the link into it.",0,0,0,0.8332430124282837,0.986355483531952,0.9911186099052428,0.0,accept,unanimous_agreement
513554157,709,what's going to happen if `vulnerabilityid` is not cve-id?,0,0,0,0.971985161304474,0.9906692504882812,0.9865664839744568,0.0,accept,unanimous_agreement
513554329,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
513554391,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
513772441,709,is that a possibility? if so what could it be? i was assuming it never would be. but in that case today it will just be a 404.,0,0,0,0.971367597579956,0.9677242040634156,0.9690586924552916,0.0,accept,unanimous_agreement
513779194,709,could you expand on what you meant by break a line in the middle? how wide is wide enough? >80px? anything under 80px is presented with no links? is that the idea? the problem with json is highlighted here [a link],0,0,0,0.9857483506202698,0.9778189659118652,0.9919673800468444,0.0,accept,unanimous_agreement
513970932,709,there are many vulnerability ids other than cve-id. most of the vulnerabilities for programming language library are not cve-id assigned. do you think 404 is acceptable?,0,0,0,0.9603481292724608,0.9630118012428284,0.9910390973091124,0.0,accept,unanimous_agreement
513980468,709,"i meant something like the following. it does make it harder to copy the link, though. [code block] you can calculate it. the width is the total length of package name + vulnerability id + ... + avd link. or, you can also output the table to a variable to determine the length of each row. you said `everywhere`, but afaik, we have only artifact and client/server, two places, right? also, a server doesn't need to return an avd link because a client is able to generate it. what's the big deal?",0,0,0,0.8980404138565063,0.9455028176307678,0.9626774787902832,0.0,accept,unanimous_agreement
514645251,709,oh! see. yeah that's not acceptable to be left in like that. i have added a filter to remove such links here [a link],-1,-1,-1,0.5483137965202332,0.9238716959953308,0.863664984703064,-1.0,accept,unanimous_agreement
514645370,709,diito^2,0,0,0,0.9195606112480164,0.9627161622047424,0.98362398147583,0.0,accept,unanimous_agreement
514645383,709,diito^2,0,0,0,0.9195606112480164,0.9627161622047424,0.98362398147583,0.0,accept,unanimous_agreement
515392597,709,fair point. i added it in [a link],0,1,0,0.9366992115974426,0.5537587404251099,0.8695080876350403,0.0,accept,majority_agreement
515395659,709,how about the following? it can still be resolved and clicked upon (at least in most modern terminal emulators like iterm) and saves us 8 extra characters.,0,0,0,0.9867916107177734,0.9847381114959716,0.9917879700660706,0.0,accept,unanimous_agreement
516425959,709,"ok, let's see how users react. if a lot of users complain about it, we'll remove it from the table.",0,0,0,0.9712756872177124,0.9034242033958436,0.984631359577179,0.0,accept,unanimous_agreement
517020637,709,ok. i added [a link],0,0,0,0.9864065051078796,0.974336564540863,0.9933803081512452,0.0,accept,unanimous_agreement
517483779,709,is there any reason that we don't generate an avd link in `fillinfo`? [a link],0,0,0,0.9855419397354126,0.9949859380722046,0.994772493839264,0.0,accept,unanimous_agreement
517484099,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
517484178,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
517484289,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
517484608,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
517484652,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
517485082,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
517485552,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
517485650,709,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
517485857,709,"[code block] `avd` is not a word users will be familiar with. we probably should use a more generic word such as `url`, `reference`, and `link`. also, we might be able to display a link other than avd in the future.",0,0,0,0.9888311624526978,0.9928810596466064,0.9917721152305604,0.0,accept,unanimous_agreement
517674519,709,no reason - what's argument in favour?,0,0,0,0.8932667970657349,0.9223228096961976,0.9447751045227052,0.0,accept,unanimous_agreement
517680395,709,one argument i have against adding it is that in that case we have to solely rely on integration tests far more than we can on unit tests. afaict `fillinfo` cannot be easily unit tested and it isn't today. nothing against integration testing - just the shorter feedback loop unit testing is something i see enough of a reason to stick with it.,0,0,0,0.6323133707046509,0.9591432213783264,0.9736863970756532,0.0,accept,unanimous_agreement
519952262,709,"`dbc` can be injected, so we can write unit tests now, right? if we change the avd link a little, we have to fix all places now.",0,0,0,0.9881265163421632,0.9934087991714478,0.990429162979126,0.0,accept,unanimous_agreement
520218120,709,ok. i did it here [a link],0,0,0,0.9809963703155518,0.9743499159812928,0.9929090738296508,0.0,accept,unanimous_agreement
520229269,709,ok updated [a link],0,0,0,0.9863615036010742,0.8734199404716492,0.9940934777259828,0.0,accept,unanimous_agreement
523769837,709,craft?,0,0,0,0.9709799885749816,0.9804320335388184,0.9756640195846558,0.0,accept,unanimous_agreement
523770187,709,necessary?,0,0,0,0.9708913564682008,0.98057222366333,0.9840206503868104,0.0,accept,unanimous_agreement
523770544,709,"there are 3 places to generate avd links. should we define a function? if we change the url path, we have to fix 3 places.",0,0,0,0.9873859882354736,0.9785319566726683,0.9900277256965636,0.0,accept,unanimous_agreement
523770557,709,here,0,0,0,0.9784635901451112,0.9411950707435608,0.940010666847229,0.0,accept,unanimous_agreement
523770621,709,and here,0,0,0,0.9779892563819884,0.968537986278534,0.9837828278541564,0.0,accept,unanimous_agreement
523770873,709,"i think it's better to put the url on the rightmost side. we need to add ""url"" after ""title"".",0,0,0,0.9865443110466005,0.9799430966377258,0.9881904125213624,0.0,accept,unanimous_agreement
525652775,709,"yes, fixed.",0,0,0,0.981860339641571,0.953544020652771,0.9571782946586608,0.0,accept,unanimous_agreement
525653011,709,ok fixed,0,0,0,0.9787641763687134,0.9665587544441224,0.9906387329101562,0.0,accept,unanimous_agreement
525664353,709,ok i refactored into a function: [a link],0,0,0,0.9873491525650024,0.9867724776268004,0.9949116110801696,0.0,accept,unanimous_agreement
525694265,709,i'm unable to run the linter locally but in the past when i pushed it up it started to complain. i think it's too aggressive as i find this function to have a reasonable cyclomatic complexity.,-1,-1,-1,0.9203954935073853,0.9320403933525084,0.7524191737174988,-1.0,accept,unanimous_agreement
526318099,709,you can easily run it. `$ golangci-lint run`.,0,0,0,0.969890594482422,0.9935245513916016,0.991232931613922,0.0,accept,unanimous_agreement
526321246,709,where is this file used?,0,0,0,0.9858905076980592,0.9921010136604308,0.9948760867118835,0.0,accept,unanimous_agreement
526325654,709,"we already have `references`. can we add an avd link to the field? [a link] in that case, we may not need to generate avd links in `convert.go` because a server calls `fillinfo` and `references` should have the avd link. we can just filter and extract the avd link from `references` in `writer.go`.",0,0,0,0.9775852560997008,0.9937188625335692,0.9929773211479188,0.0,accept,unanimous_agreement
526326543,709,"also, it may not be necessary. if there is an avd link in `references`, we'll extract it, but if we don't find it, we can return the first element of `references`.",0,0,0,0.9876749515533448,0.9940043091773988,0.9922173023223876,0.0,accept,unanimous_agreement
526327411,709,"so, this should be kind of like `getprimarylink`, `filterforprimarylink`, or something like that.",0,0,0,0.984650731086731,0.9934722185134888,0.9894535541534424,0.0,accept,unanimous_agreement
526328404,709,"also, we can just call `getprimarylink` here. in that case, the url will not be empty, an avd link or another link.",0,0,0,0.9895044565200806,0.9949936270713806,0.9949716329574584,0.0,accept,unanimous_agreement
526454144,709,it's part of a missing test case that was added here [a link],0,0,0,0.9854286313056946,0.993797481060028,0.9947906732559204,0.0,accept,unanimous_agreement
1505401543,6217,iiuc this is only required for the test. what if we just created a new test for the `determineregion` function?,0,0,0,0.9882680773735046,0.9927392601966858,0.9929912090301514,0.0,accept,unanimous_agreement
1505403197,6217,is [a link] same file?,0,0,0,0.9849632382392884,0.9920510649681092,0.9949376583099364,0.0,accept,unanimous_agreement
1505407336,6217,you can use [a link] here,0,0,0,0.9879932403564452,0.9880011677742004,0.9951083064079284,0.0,accept,unanimous_agreement
1505407499,6217,do we need pointer here?,0,0,0,0.9889457821846008,0.9918299317359924,0.9941796064376832,0.0,accept,unanimous_agreement
1506022234,6217,"that's correct, i'll look at it today.",0,0,0,0.979939341545105,0.9688870906829834,0.986299455165863,0.0,accept,unanimous_agreement
1506028442,6217,"it looks to be, and appears to be newer than the version i have installed in the aws cli. i can change the comment to refer to this instead.",0,0,0,0.9873712062835692,0.9897515773773192,0.9926482439041138,0.0,accept,unanimous_agreement
1506032116,6217,"i chose to use a pointer to distinguish between not matching the regexp and returning a match, but i can return a boolean instead if that's your preference.",0,0,0,0.9859479665756226,0.9905327558517456,0.9945597052574158,0.0,accept,unanimous_agreement
1506053103,6217,"i've removed the function from that interface and created a test interface instead, i wanted to ensure the client has the appropriate region set.",0,0,0,0.982377290725708,0.9886848330497742,0.994728982448578,0.0,accept,unanimous_agreement
1506053526,6217,replaced with a link to the tagged file,0,0,0,0.983100414276123,0.991859257221222,0.9952202439308168,0.0,accept,unanimous_agreement
1506053714,6217,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1506965415,6217,you can simply compare with empty string. [code block],0,0,0,0.9888474941253662,0.9906030893325806,0.9954450130462646,0.0,accept,unanimous_agreement
1507031403,6217,"technically yes, but not something i'm a fan of to be honest. i prefer to be explicit.",-1,-1,0,0.7587312459945679,0.8440274000167847,0.7527881264686584,-1.0,accept,majority_agreement
1507065595,6217,"typically we use comparison logic with an empty string. i think it's best to stick to one code style. it may also make this part of the code difficult to maintain. because over time, maintainer must remember why we are using a pointer here.",0,0,0,0.9668956995010376,0.9913496971130372,0.976685345172882,0.0,accept,unanimous_agreement
1507596340,6217,"if that's your coding style i'll use it, even though i find this pattern is more likely to introduce problems for callers who now need to remember and check for special case returns. this tends to be clearer with pointer/boolean.",0,0,0,0.9767380356788636,0.9887058138847352,0.978741466999054,0.0,accept,unanimous_agreement
1508445484,6217,i found 1 interesting case: if `aws_region` env != region from domain: should we use aws_region (we are overwriting this value now)? iiuc this case is user mistake (wrong`aws_region`). but perhaps it make sense to show warning log message about this.,0,0,0,0.9607713222503662,0.9888094067573548,0.972431778907776,0.0,accept,unanimous_agreement
1508503562,6217,"the point of the pr is to override the aws_region setting, if we don't do that then we end up with an authentication token for one region and have no visibility of containers hosted in other regions. our use case is multiple private repositories in multiple regions.",0,0,0,0.9877331256866456,0.9885463714599608,0.9938725233078004,0.0,accept,unanimous_agreement
1508547564,6217,i meant that we need to tell the user that region from aws_region != region from domain. something like that: [code block] also i am worried about asff template. we [a link] aws_region env for this template. perhaps we need to set `aws_region` env when we have overwritten the region.,-1,0,0,0.9817345142364502,0.9305086731910706,0.947869598865509,0.0,accept,majority_agreement
1509063130,6217,"ah gotcha. we can certainly add a message, although i'm not sure it would make much sense as it is likely to have been set by the webhook to match the eks installation. if you consider our use case, with multiple private repositories in different regions, then it would be impossible for the user to set the region appropriately so it would be defaulted to the webhook's view. i can take a look at the template today, i didn't consider that, and can certainly pass the parameter through to getsession as that seems cleaner than rewriting it.",0,0,0,0.5958445072174072,0.9179354310035706,0.9155112504959106,0.0,accept,unanimous_agreement
1509087418,6217,"i've pushed the changes for getsession and the warning, looking at the template.",0,0,0,0.9814606308937072,0.9870314002037048,0.9929128289222716,0.0,accept,unanimous_agreement
1509128357,6217,"i've reviewed the template but don't see anything which would concern me about the region parameter, i think we may be able to leave it as-is. i'm spinning up a cluster to double-check.",0,0,0,0.9619861841201782,0.9758428931236268,0.9680134654045104,0.0,accept,unanimous_agreement
1509255397,6217,"i created the cluster and private repos to double-check, then ran the old/new versions of trivy against the repo from my local machine. the reports from both were identical, except for timestamps. interestingly enough my change doesn't appear to be required when running locally with my access key/secret access key, however within the eks cluster, using an assigned role, it does. the command was [code block] with `aws_region` set to `us-east-1`",0,0,0,0.963850200176239,0.9902668595314026,0.9852030873298644,0.0,accept,unanimous_agreement
1509258420,6217,an excerpt [code block],0,0,0,0.9872717261314392,0.986936628818512,0.9946386218070984,0.0,accept,unanimous_agreement
1510599327,6217,"hello thanks for your extensive research! i am worried about this: [code block] region from `id` != region from `region`. we can change `aws_region` only to run trivy. `os.setenv` changes env only while the program is running. i created small example [code block] so we can add `os.setenv(""aws_region"", region)` in [a link] wdyt? can you check this solution?",-1,1,1,0.5259577035903931,0.9863390922546388,0.9886198043823242,1.0,accept,majority_agreement
1511137614,6217,"this output is the same as we would currently get, if running from the command line. the region is only used to obtain the correct authentication credentials for accessing the repository, nothing more. i'm not sure `os.setenv` would make sense in our use case, since it involves different private repositories in different regions, but i can take a look.",0,0,0,0.97925865650177,0.9750771522521972,0.988342821598053,0.0,accept,unanimous_agreement
1511547707,6217,"i cannot find any mention of the region that would impact the scanning we are doing. one place i did find, in the asff template, is the productarn which is registered with aws security hub. since this needs to be registered, and the asff templated report doesn't change with this fix in place, i think it is safer to leave this change only for generating the credentials and we shouldn't set the env variable.",0,0,0,0.9692953824996948,0.9902837872505188,0.9900972843170166,0.0,accept,unanimous_agreement
1511554193,6217,"i should also add that i don't know enough about the aws security hub integration to know whether the current report is broken in its use of aws_region - should `region` match the image region? - is it wrong to assume `productarn` matches `region`? i think those questions should be answered separately, since this pr is not modifying that behaviour.",0,0,0,0.9774649143218994,0.991820216178894,0.9898080229759216,0.0,accept,unanimous_agreement
1512152571,6217,aws docs([a link] say: [code block],0,0,0,0.9861599802970886,0.9866629242897034,0.9955897331237792,0.0,accept,unanimous_agreement
1512153358,6217,"but it looks like when using `asff` template, users will have `aws_region` set. in addition, we display a warning. we can start with these changes. if problems arise, we will think about fixing them (as another solution, we can add your regex to `asff.tpl`).",0,0,0,0.9858767986297609,0.9892306923866272,0.9899571537971495,0.0,accept,unanimous_agreement
1512891454,6217,"+1, in my view arn and region are not related but the template assumes they are.",0,0,0,0.9745203852653505,0.9722025394439696,0.9788177609443665,0.0,accept,unanimous_agreement
1512894476,6217,"yes, since the output doesn't change with this pr we are no worse off. i do think there is change needed for the template but that should be a separate issue.",0,0,0,0.8097491264343262,0.9500204920768738,0.954054355621338,0.0,accept,unanimous_agreement
1513753867,6217,oh... i sent the wrong link. you can see arn formats here: [a link] [a link],-1,-1,0,0.9369778633117676,0.5841030478477478,0.75843346118927,-1.0,accept,majority_agreement
1514996167,6217,i don't think those other links change anything for this pr.,0,0,0,0.7729077935218811,0.9111923575401306,0.9490747451782228,0.0,accept,unanimous_agreement
1570028030,6217,iiuc we should compare `googleregistryclient`.,0,0,0,0.9865820407867432,0.9938470721244812,0.9915125966072084,0.0,accept,unanimous_agreement
1570767823,6217,"should be good now, thanks for catching this",1,1,1,0.9541292786598206,0.9822229146957396,0.9872891902923584,1.0,accept,unanimous_agreement
763561214,1437,looks like we have to pass the tool version. [a link],0,0,0,0.9860196113586426,0.9697660207748412,0.9940277338027954,0.0,accept,unanimous_agreement
764597147,1437,changed.,0,0,0,0.9753402471542358,0.9758284687995912,0.9680466055870056,0.0,accept,unanimous_agreement
764597195,1437,"ok, sure",0,0,0,0.9587004780769348,0.9386001229286194,0.9773937463760376,0.0,accept,unanimous_agreement
772492613,1437,would you leave a comment that we will remove this warning after a while?,0,0,0,0.981303334236145,0.9840260744094848,0.993958592414856,0.0,accept,unanimous_agreement
772839133,1437,pkgpath can be used in case of individual packages.,0,0,0,0.9886067509651184,0.9921661615371704,0.992642104625702,0.0,accept,unanimous_agreement
772840287,1437,can we use consts?,0,0,0,0.9873534440994264,0.9926159381866456,0.9953794479370116,0.0,accept,unanimous_agreement
772840910,1437,wrap error,0,0,0,0.953796088695526,0.9546900987625122,0.8825289607048035,0.0,accept,unanimous_agreement
773107394,1437,"explicitly it didn't work, because `vuln.path` is empty sometimes. added a check: [code block]",0,0,0,0.9677271246910096,0.9909222722053528,0.9921991229057312,0.0,accept,unanimous_agreement
773110444,1437,"should i change all strings to consts? (""npm"", ""yarn"", ""nuget"", ""pipenv"", ""poetry"", ""bundler"", ""cargo"", ""composer"")",0,0,0,0.9874162077903748,0.994439959526062,0.9947389960289,0.0,accept,unanimous_agreement
773994202,1437,yes. we have those consts anywhere.,0,0,0,0.9824737906455994,0.9634088277816772,0.9907426238059998,0.0,accept,unanimous_agreement
774000342,1437,any reason we cannot use this struct? [a link],0,0,0,0.9854722619056702,0.9852895140647888,0.9934817552566528,0.0,accept,unanimous_agreement
774554630,1437,"i wanted to create test data with required fields, but `omitempty` allows to skip (forget) it in tests. also some of required fields maybe don't exist in `go-sarif`. we'd reveal it. but if this isn't important, i'll use specified structure",0,0,0,0.9823410511016846,0.9931118488311768,0.9892561435699464,0.0,accept,unanimous_agreement
774894057,1437,i think it is ok if we are careful about expected data. do you mean we cannot use `go-sarif` to generate the sarif report if it is missing some required fields?,0,0,0,0.9841617345809937,0.9806966185569764,0.9723390340805054,0.0,accept,unanimous_agreement
774903418,1437,"i mean that we can detect missing fields and ask to add them. ok, i'll use `go-sarif`'s structs for tests.",0,0,0,0.9879288077354432,0.9746354222297668,0.9931540489196776,0.0,accept,unanimous_agreement
774904396,1437,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
774905546,1437,i understand. i think it should be done aside from unit tests.,0,0,0,0.9561941623687744,0.9734832048416138,0.9529097080230712,0.0,accept,unanimous_agreement
774937098,1437,"i guess this is not vulnerability type, but target type. this comes from report.result.type, right? if it is the case, these consts should be them. [a link]",0,0,0,0.9854200482368468,0.9911513924598694,0.9840966463088988,0.0,accept,unanimous_agreement
774938001,1437,should we put severity to `properties.security-severity`? [a link],0,0,0,0.9882132411003112,0.9949550032615662,0.9953547716140748,0.0,accept,unanimous_agreement
774940385,1437,seems to be missing many types such as `gemspec` and `gomod`.,0,0,0,0.945913314819336,0.975862979888916,0.9866522550582886,0.0,accept,unanimous_agreement
774940774,1437,we may be able to use `report.result.class`.,0,0,0,0.987119197845459,0.9919360876083374,0.9932405948638916,0.0,accept,unanimous_agreement
774941295,1437,"also, what about misconfigurations?",0,0,0,0.8699703216552734,0.9805732369422911,0.9771270155906676,0.0,accept,unanimous_agreement
774946501,1437,"sure, i'll add this fiels, but we have to exclude `severity` from `tags`? i'd leave `tags` unchanged",0,0,0,0.9885116815567015,0.9936406016349792,0.9904098510742188,0.0,accept,unanimous_agreement
774965201,1437,"yes, it would be better to keep it since `tags` can be used for filtering.",0,0,0,0.9880727529525756,0.9911184906959534,0.98988276720047,0.0,accept,unanimous_agreement
775055758,1437,"yes, you're right. it seems that is target type. changed.",0,0,0,0.9719406366348268,0.7400967478752136,0.9902005791664124,0.0,accept,unanimous_agreement
775056603,1437,"yes, i've added this field. but i'd like you review for mapping severity to the level of severity (between 0.0 and 10.0).",0,0,0,0.9667794704437256,0.9720981121063232,0.9935421943664552,0.0,accept,unanimous_agreement
775057496,1437,"yes, i've added all types and added config files too",0,0,0,0.9889380931854248,0.9342990517616272,0.9939717650413512,0.0,accept,unanimous_agreement
775058646,1437,"also i removed several tests from here, because there is no os with `-oval` suffix (`oracle-oval`, `debian-oval`, `redhat-oval` etc). [a link]",0,0,0,0.9892925024032592,0.9927610158920288,0.995238184928894,0.0,accept,unanimous_agreement
775058872,1437,`suse-cvrf` and `opensuse-cvrf` were removed too,0,0,0,0.9875237941741944,0.9950992465019226,0.9944650530815125,0.0,accept,unanimous_agreement
775059217,1437,"yes, added config files.",0,0,0,0.9885536432266236,0.989772379398346,0.9918573498725892,0.0,accept,unanimous_agreement
775068805,1437,i meant this switch can be simplified [code block],0,0,0,0.97897207736969,0.9821450710296632,0.9934850335121156,0.0,accept,unanimous_agreement
775069064,1437,it should be descriptive enough. [code block],0,0,0,0.9826149940490724,0.9759564399719238,0.9952782392501832,0.0,accept,unanimous_agreement
775069149,1437,it should not be reached here. [code block],0,0,0,0.951548159122467,0.9895735383033752,0.9825579524040222,0.0,accept,unanimous_agreement
775071951,1437,"oh, ok. changed",0,0,0,0.9461573958396912,0.884719967842102,0.926854133605957,0.0,accept,unanimous_agreement
779486088,1437,i don't think this test is needed.,0,0,0,0.8686902523040771,0.721677839756012,0.9664153456687928,0.0,accept,unanimous_agreement
779486886,1437,"we don't keep the template as we remove, but we keep it working as is.",0,0,0,0.9751324653625488,0.9644511342048644,0.9907156229019164,0.0,accept,unanimous_agreement
779487165,1437,can we use cvss score?,0,0,0,0.986186385154724,0.9939070343971252,0.9953718781471252,0.0,accept,unanimous_agreement
780408523,1437,"if you could put the cvss score into a tag, that would make it filterable in the github security dashboard",0,0,0,0.9882317185401917,0.9936155080795288,0.9935176372528076,0.0,accept,unanimous_agreement
781788154,1437,removed.,0,0,0,0.9311882257461548,0.9782117605209352,0.9612457156181335,0.0,accept,unanimous_agreement
781790431,1437,changed this comment.,0,0,0,0.9754720330238342,0.979377806186676,0.982462763786316,0.0,accept,unanimous_agreement
781794067,1437,i can't find cvss score for misconfigurations...,-1,-1,0,0.7830101251602173,0.6229608654975891,0.8581803441047668,-1.0,accept,majority_agreement
781795430,1437,"oh, you're right. we need this conversion for misconfigurations. can we use cvss only for vulnerabilities?",0,0,0,0.93431955575943,0.8813003301620483,0.9883098602294922,0.0,accept,unanimous_agreement
782137657,1437,we can use `severitysource` to take the vendor cvss score. i feel we should not use the nvd score. it is possible that the severity is low and the score is 9.5. the score depends on the severity source for consistency. the priority is 1. vendor score (it would be ok if it is nvd) 2. mapping score,0,0,0,0.967783510684967,0.988906979560852,0.9800026416778564,0.0,accept,unanimous_agreement
1244838784,4652,[code block] wdyt?,0,0,0,0.989582657814026,0.9852877855300904,0.994474470615387,0.0,accept,unanimous_agreement
1244864039,4652,you are using `defer` in a loop. can we move this logic into a separate function to close each file?,0,0,0,0.9865672588348388,0.9864994287490844,0.9936568140983582,0.0,accept,unanimous_agreement
1244890681,4652,i think about 1 case when `node_modules` and `.yarn` folders exist. e.g. user updated project to yarn v2. does `node_modules` folder still exist or will `yarn` remove this folder? wdyt? perhaps we need to check `.yarn` folder first (as latest implementation) or(and) add debug message that 2 folder were found.,0,0,0,0.9850128889083862,0.9936708211898804,0.9881080985069276,0.0,accept,unanimous_agreement
1244895415,4652,i think we can remove the fields we don't need. as for a `happy` test: [a link],1,1,0,0.6826268434524536,0.7427444458007812,0.9785947203636168,1.0,accept,majority_agreement
1245298216,4652,"then user should delete `node_modules`) in fact, if the yarn [a link] is set as `node_modules`, then the packages will be installed in` node_modules`, but the folder `.yarn` can also exist, because it stores not only packages.",0,0,0,0.9635895490646362,0.9952322840690612,0.9929289221763612,0.0,accept,unanimous_agreement
1245303458,4652,"yes, you're right",0,0,0,0.9474586248397828,0.6886029243469238,0.9705547094345092,0.0,accept,unanimous_agreement
1245336050,4652,great catch! done.,1,1,1,0.9916658997535706,0.9959015250205994,0.9971163272857666,1.0,accept,unanimous_agreement
1245336249,4652,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1245336669,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1246097840,4652,thanks for information. i also played with `yarn`: after updating `yarn` and adding/updating package -> `yarn` moves packages from `node_modules` to `.yarn` folder. some example: [code block],1,1,1,0.937468647956848,0.8832240104675293,0.958987295627594,1.0,accept,unanimous_agreement
1246111610,4652,we use new function to only parse `package.json` **from zip file**. the name `parsepackagejson` can be confusing (i mean you might think that this function for any `package.json`). what if we use `parsepackagejsonfromzip` name?,0,0,0,0.974459946155548,0.9824650883674622,0.9895769357681274,0.0,accept,unanimous_agreement
1246131215,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1271898881,4652,do we need this complex logic? do you mean dummy package.json? my question is why we cannot simply check if the file name matches `package.json`.,0,0,0,0.984641969203949,0.9806331992149352,0.98011976480484,0.0,accept,unanimous_agreement
1271902187,4652,it can be a dummy file for tests.,0,0,0,0.979292631149292,0.9896053075790404,0.9898790121078492,0.0,accept,unanimous_agreement
1271915628,4652,"does the dummy file have a valid package name and license, and can it lead to false detection? i guess it is unlikely to happen, no?",0,0,0,0.942040741443634,0.9728482961654664,0.9918230175971984,0.0,accept,unanimous_agreement
1272260923,4652,"yes, i agree",0,0,0,0.9430531859397888,0.8994792103767395,0.9755862951278688,0.0,accept,unanimous_agreement
1286549136,4652,looks like we can make this function non-exportable.,0,0,0,0.9872438311576844,0.9732609391212464,0.9883908033370972,0.0,accept,unanimous_agreement
1286555271,4652,can you add comment why we use `license` here?,0,0,0,0.9879741668701172,0.9932425618171692,0.9957934617996216,0.0,accept,unanimous_agreement
1286557902,4652,can you add comments why you use these conditions?,0,0,0,0.9840781688690186,0.9884526133537292,0.9952532052993774,0.0,accept,unanimous_agreement
1286559728,4652,if i understand correctly - any license file name is possible: [a link] perhaps we need to save `node_modules`/`.yarn` folder?,0,0,0,0.9880453944206238,0.994434416294098,0.9938871264457704,0.0,accept,unanimous_agreement
1286560970,4652,`npm` also finds licenses in `node_modules/ /package.json` file. maybe we can use this function? or will these changes be in another pr?,0,0,0,0.9893390536308287,0.9953372478485109,0.9944633841514589,0.0,accept,unanimous_agreement
1286561460,4652,what if use `utils` file name for this file?,0,0,0,0.984260618686676,0.9948464632034302,0.9943045973777772,0.0,accept,unanimous_agreement
1286928751,4652,the cache folder can be large.,0,0,0,0.9874789714813232,0.9621518850326538,0.9916259050369264,0.0,accept,unanimous_agreement
1286930329,4652,how about making these changes in another pr?,0,0,0,0.97109454870224,0.9870682954788208,0.9939032196998596,0.0,accept,unanimous_agreement
1286932906,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1286933022,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1286933141,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1286933230,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1286933297,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1286933424,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1287883514,4652,i assumed that... okay. i think in most cases license file name contains `license`. let's wait for feedback from users. if users say that there are files with other names - we will return to this question.,0,0,0,0.975501537322998,0.950745165348053,0.9829187393188475,0.0,accept,unanimous_agreement
1287887278,4652,okay. i created #4964 for this task.,0,0,0,0.9687793254852296,0.9597413539886476,0.9859328866004944,0.0,accept,unanimous_agreement
1287891032,4652,golden file doesn't contain license.,0,0,0,0.9773470759391784,0.9741482734680176,0.9904183745384216,0.0,accept,unanimous_agreement
1287892423,4652,"this is second time i am thinking of moving this file to `nodejs/license` folder, but i'm not sure about it. wdyt?",0,-1,0,0.9350886344909668,0.766156017780304,0.9799476861953736,0.0,accept,majority_agreement
1287894727,4652,can you add a test case with a missing license? i am referring to case where license field in `package.json` is missing and `license` file doesn't exist.,0,0,0,0.9877091646194458,0.9906424880027772,0.9951488375663756,0.0,accept,unanimous_agreement
1289714055,4652,good trick! i forgot to move this file after renaming fs to repo.,1,1,1,0.9915012121200562,0.9931140542030334,0.9964796900749208,1.0,accept,unanimous_agreement
1289723532,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1289723633,4652,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1289726122,4652,"sounds good, i'll wait for answer",1,1,1,0.8942384123802185,0.6989100575447083,0.9288771748542786,1.0,accept,unanimous_agreement
1289730642,4652,sounds good,1,1,1,0.9535238742828368,0.9683692455291748,0.8904690742492676,1.0,accept,unanimous_agreement
1290881331,4652,i understood that it can confused - users can think that we only parse `license` file. [code block],0,0,0,0.979219913482666,0.9716166853904724,0.9900424480438232,0.0,accept,unanimous_agreement
1291208227,4652,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1574109921,6524,`go-dep-parser` in trivy now - [a link],0,0,0,0.9853848814964294,0.993169903755188,0.9952314496040344,0.0,accept,unanimous_agreement
1574125031,6524,what about `windows` and `macos` formats?,0,0,0,0.9885541796684264,0.9914352297782898,0.9908378720283508,0.0,accept,unanimous_agreement
1574125792,6524,can you add a comment with a link where you get this regex?,0,0,0,0.988503396511078,0.9924284815788268,0.9953951239585876,0.0,accept,unanimous_agreement
1574126445,6524,you use `dependent.id` once. so you can just use it here. [code block],0,0,0,0.9886360168457032,0.9916720986366272,0.9961840510368348,0.0,accept,unanimous_agreement
1574131572,6524,"is there a way to determine package name? looks like it might be confusing if all detected binaries are named ""python""",0,0,0,0.9526032209396362,0.8551673889160156,0.9531063437461852,0.0,accept,unanimous_agreement
1574132610,6524,you can use `require.errorcontains`,0,0,0,0.9857263565063475,0.9938965439796448,0.9956454038619996,0.0,accept,unanimous_agreement
1574135481,6524,"looks like we can use 1 file and change names, permissions, etc. in test. then we can reduce the number of copies of test files.",0,0,0,0.9874030351638794,0.9889217615127563,0.9877619743347168,0.0,accept,unanimous_agreement
1574137589,6524,looks like we don't need this change.,0,0,0,0.946045458316803,0.949945330619812,0.9730387330055236,0.0,accept,unanimous_agreement
1574155254,6524,it looks like go 1.22 doesn't have this file. can you please update the link and double check - we may need to add some changes.,0,0,0,0.9815359711647034,0.9689441919326782,0.9907754063606262,0.0,accept,unanimous_agreement
1574175455,6524,will be great if you add some comment about these regex (e.g. link to docs),1,0,1,0.741215169429779,0.5109516382217407,0.595802366733551,1.0,accept,majority_agreement
1574176783,6524,looks like we can use [a link] for new binaries,0,0,0,0.984406352043152,0.985105037689209,0.991816222667694,0.0,accept,unanimous_agreement
1624132180,6524,"i removed the go-dep-parser as a dependency, it only uses the internal package now",0,0,0,0.9868869185447692,0.9922295212745668,0.9918839931488036,0.0,accept,unanimous_agreement
1624135520,6524,"it's from syft... should i link that? all the regexes i used, i mostly copied them from syft. for example python regex: [a link]",0,0,0,0.9834191799163818,0.9789661169052124,0.9895338416099548,0.0,accept,unanimous_agreement
1624136786,6524,removed the packageid function from all parsers and replaced with dependency.id call only,0,0,0,0.988839328289032,0.995353102684021,0.9927405714988708,0.0,accept,unanimous_agreement
1624138057,6524,"i don't think so unfortunately, if there was additional package information, the standalone binary detection would not be needed. but i will look into it if it's obtainable from some metadata.",0,0,0,0.9780063629150392,0.9741780161857604,0.9537227749824524,0.0,accept,unanimous_agreement
1624138781,6524,changed the tests according to this.,0,0,0,0.9789332151412964,0.991334855556488,0.991051435470581,0.0,accept,unanimous_agreement
1624139241,6524,"yeah, i'll rework the tests for fanal in an upcoming commit.",0,0,0,0.9763752222061156,0.9803793430328368,0.989170491695404,0.0,accept,unanimous_agreement
1624140809,6524,"hmm, not sure why i did it, but i'll remove it in next commit, it's just some ""automatic"" line deletion i did i guess :)",1,1,1,0.8148149847984314,0.9114697575569152,0.9400282502174376,1.0,accept,unanimous_agreement
1624143055,6524,i unfortunately didn't find this in go 1.22 either. i'll take a look into this in next commit.,-1,0,0,0.5090842247009277,0.9003022909164429,0.6547808051109314,0.0,accept,majority_agreement
1624143998,6524,"same as for the other regexes, it's from syft, should i link that? [a link]",0,0,0,0.988050937652588,0.9879615902900696,0.9945289492607116,0.0,accept,unanimous_agreement
1624144515,6524,"change all the types to become ""typexexecutable"".",0,0,0,0.985931634902954,0.9901277422904968,0.9945386052131652,0.0,accept,unanimous_agreement
1624151809,6524,haven't thought about that yet. will have to check on those.,-1,0,0,0.5260341167449951,0.8600709438323975,0.9387671947479248,0.0,accept,majority_agreement
1624640434,6524,fanal test cases were reworked. it uses the common logic of executable tests. added test cases for python/node/php binaries.,0,0,0,0.9847618341445924,0.9926742911338806,0.9914844632148744,0.0,accept,unanimous_agreement
1624640712,6524,removed.,0,0,0,0.9311882257461548,0.9782117605209352,0.9612457156181335,0.0,accept,unanimous_agreement
1624651297,6524,"i understand what you meant here now, that all the new binaries could be typeexecutable. i use the language specific types in fanal executable.go, to figure out which binary type was detected in case of ""detectable"" binary. it can be localized to executable.go instead and use the common type for the ""outside"" return types.",0,0,0,0.984080731868744,0.9815053343772888,0.9821316003799438,0.0,accept,unanimous_agreement
1626285516,6524,"i tried testing with windows pes, the interface can be implemented for `exe` and `openexe`, but the regex based detection methods don't work on the pe files i tried (i did manual testing to confirm). i honestly don't have any experience with macos binaries :face_with_diagonal_mouth: so not sure if i can implement the interface for those. i also tried to obtain files to test with, but failed, since now i don't have access to a macos system. any idea if regex based detection would work on those? if not, i'd rather not bother with implementing this for those binaries, even though you could implement the interface and `executableanalyzer` would still run on those, the binary version detection won't give package in the `analysisresult`.",-1,-1,-1,0.8908411860466003,0.9362238645553588,0.7066354155540466,-1.0,accept,unanimous_agreement
1626302610,6524,"i added them as a separate, new group of variables instead in this same file.",0,0,0,0.9843984842300416,0.9922999143600464,0.990051805973053,0.0,accept,unanimous_agreement
1626328528,6524,"i have updated the link and also the implementation was changed. it's not a 1on1 port, since they repurposed it for capturing go main module version, but we need to read whole executable file, but i used the same ideas. it also contains interfaces for other binaries (didn't put those in, only elf).",0,0,0,0.9831566214561462,0.9788705110549928,0.988474667072296,0.0,accept,unanimous_agreement
1627258993,6524,"there's a way to try detect it with os package managers, but they don't necessarily yield results unfortunately. i think if these were in package manager, then os pkg analyzer would be scanning these, so probably also not the right way to go about it. i wasn't able to find any way to figure out more concrete package name from the standalone binaries.",0,-1,0,0.7274034023284912,0.5966212153434753,0.7637344002723694,0.0,accept,majority_agreement
1879433683,8077,"i wanted to override the `expression.normalizeforspdx` function, but we use `with` as a delimiter to parse licenses: [a link] so there are problems with overwriting licenses with the wrong exception",0,0,0,0.9763577580451964,0.9793725609779358,0.9668086171150208,0.0,accept,unanimous_agreement
1881116688,8077,[code block] i would always include the license as the license name - not just when the text is present,0,0,0,0.9876335859298706,0.993297278881073,0.9955592155456544,0.0,accept,unanimous_agreement
1881121449,8077,"second thought, this may be appropriate if the license text is the actual text of the license. in most cases, the metadata for packages includes text that are supposed to be a license name or identifier in which case it should also be in the name. if we know the license text is really the text, then the existing code is ok. if, however, the license text is what is found in the package metadata files and they are not the actual text, i would add the same field as the name plus add a licensecomment to explain - something like `otherlicense.licensecomment = ""the license text represents text found in package metadata and may not represent the full text of the license""",0,0,0,0.974390745162964,0.9900646805763244,0.9767891764640808,0.0,accept,unanimous_agreement
1881127536,8077,"this comment may deserve to be a separate suggestion, but in reading the code i would recommend building the license and exception ids from the j[a link]. the license list is updated every 3 months with new ids and maintaining these in code can be a challenge to keep up and maintain. what i do in the code i maintain is attempt to access the current json files on the website [a link] and [a link] if i can not access the website or if the user specified not to use the online version, i'll use a cached version of the file.",0,0,0,0.883260190486908,0.9835222959518432,0.975102424621582,0.0,accept,unanimous_agreement
1881135551,8077,"minor suggestion - you could simplify this by including the ""-"" in the licenserefprefix definition and just use `licenserefprefix + licenseid` the string ""licenseref"" will likely never be used without the trailing ""-"".",0,0,0,0.9888940453529358,0.9929617047309875,0.9878996014595032,0.0,accept,unanimous_agreement
1881469620,8077,this is our internal decision - we don't use `-` suffixes in constants :),1,1,0,0.641941249370575,0.9776712656021118,0.9274848699569702,1.0,accept,majority_agreement
1881484240,8077,"there are cases when users run multiple times. downloading these files for each run is not good. but we can save `licenses.json` and `exceptions.json` files in the cache dir and use them. the files contain `releasedate` field, so we can update this file only when `releasedate + 3 months` has expired. how strictly is this rule followed? anyway let's move this discussion into another issue/pr. ___ i found that [a link] and [a link] are different (see `harbour-exception`). which file would be more correct to use?",0,0,0,0.7735069394111633,0.9497717022895812,0.983061134815216,0.0,accept,unanimous_agreement
1881510091,8077,"there are cases (e.g. `license` field from python metadata files) when we can't understand that license is name/id/text. we tried to detect `text` of license: [a link] so trivy split license name/id and license text(`text://` prefix). that is why i used both `licensename` and `extractedtext` fields: [a link] another question - i used `noassertion` for `licensename` and `extractedtext` fields (see link above), because these fields are mandatory ([a link] is this correct?",0,0,0,0.980434775352478,0.9914844632148744,0.99313884973526,0.0,accept,unanimous_agreement
1881515390,8077,i liked this idea :thumbs_up: added in [a link],1,1,1,0.9618934988975524,0.9744313955307008,0.9962117671966552,1.0,accept,unanimous_agreement
1882642397,8077,"not very strictly. there is, however, a license list version field which is reliably incremented on release. which file would be more correct to use? the lists at [a link] - these will always be the latest _released_ version. the github repo master will have the latest in development version which may not be stable. the github repo is tagged with release versions, so if you go to the tag for the latest release in github, it will match what is on the website.",0,0,0,0.9863836765289308,0.9900593161582948,0.9892042279243468,0.0,accept,unanimous_agreement
1882658352,8077,"makes sense - i wasn't sure how the text was captured. since you are capturing the text and name distinctly, your approach should work. btw, it's a bit tricky to find the start and end of the license text and even trickier to match it to know licenses - something we've been working on in the spdx java libraries for about 10 years and still don't have it perfected ;). is this correct? for the license name, this is ok. the spec isn't very clear on how these should be treated, so many people make up a name based on the text. unlike other parts of the spec, noassertion is not required if you don't know - but in this case i think it would be fine to use noassertion - for the name. for the text, i would put in whatever string was actually found - even if it is the name. the definition of the field is the license text found - so if someone puts in ""this software is licensed under mylicense"" - you can put that exact string in the text field even though it is not technically the text of ""mylicense"". i wouldn't use ""noassertion"" for the text field.",1,0,1,0.5236705541610718,0.7740650773048401,0.9497748613357544,1.0,accept,majority_agreement
1883358808,8077,got it! thanks for your opinion! updated text field in [a link],1,1,1,0.9894535541534424,0.987230122089386,0.995262622833252,1.0,accept,unanimous_agreement
1883359954,8077,"okay, update exception list in [a link]",0,0,0,0.9888383150100708,0.9801012277603148,0.993807852268219,0.0,accept,unanimous_agreement
1887959748,8077,"since we need to keep it up-to-date, it should be done by `mage spdx` or something like that. i think we should create a separate file for the list and add [code block] to the header.",0,0,0,0.9873212575912476,0.9934852719306946,0.9926518797874452,0.0,accept,unanimous_agreement
1887968896,8077,"do you want to check `exceptions.json` file in tests? i mean the same as for [a link] this will help keep the file up-to-date, but can be noisy for prs when a new version of file is released. on the other hand, we can add a separate action to check the file's relevance once a week.",0,0,0,0.9873520135879515,0.9919275045394896,0.992525577545166,0.0,accept,unanimous_agreement
1887975653,8077,"using `curl` and `awk` through `go generate` is the easiest way, but some environments don't have `curl`, and cli flags might be different. ideally, we should do that in go.",0,0,0,0.9848672747612,0.9915245175361632,0.9909399747848512,0.0,accept,unanimous_agreement
1887976600,8077,"no, we don't need it for now. we can update the file when we notice that.",0,0,0,0.9835590720176696,0.982971966266632,0.9923076629638672,0.0,accept,unanimous_agreement
1887978206,8077,"yes, that's what i planned this command (using `awk` and other commands) is just a quick way to get all exceptions",0,0,0,0.9840254187583924,0.941378116607666,0.9884952306747437,0.0,accept,unanimous_agreement
1887978614,8077,"this sounds better. also, we don't need to fail the test. we can notify it on microsoft teams.",0,0,0,0.7485993504524231,0.6618480682373047,0.7685018181800842,0.0,accept,unanimous_agreement
1888362141,8077,"i updated pr. take a look, when you have time, please.",0,0,0,0.9542021751403807,0.822931170463562,0.5883566737174988,0.0,accept,unanimous_agreement
1919731265,8077,nit: isvalidspdxlicense or validatespdxlicense are more aligned with the naming style in trivy.,0,0,0,0.9884397983551024,0.9936373233795166,0.992949604988098,0.0,accept,unanimous_agreement
1919732799,8077,looks like we can just call this function as nil is checked at the beginning of the function. [code block],0,0,0,0.9871944785118104,0.9832096695899964,0.9913389682769777,0.0,accept,unanimous_agreement
1919732953,8077,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1919735245,8077,"after merging [a link] into this branch, you can use set.set. [code block]",0,0,0,0.9879412055015564,0.9909839630126952,0.9956209063529968,0.0,accept,unanimous_agreement
1919735404,8077,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1919745274,8077,"nit: i tried to make the nest less, but it's just my preference. you can decide it. [code block]",0,0,0,0.9755951166152954,0.9400757551193236,0.9715591669082642,0.0,accept,unanimous_agreement
1919747712,8077,nit: the current prefix is always lowercase. [a link] [code block],0,0,0,0.9877015948295592,0.988336741924286,0.9949799180030824,0.0,accept,unanimous_agreement
1919748215,8077,we might want to define a const for spdx as it's used in several places.,0,0,0,0.9860734939575196,0.9928523898124696,0.9899516701698304,0.0,accept,unanimous_agreement
1922023119,8077,"what do you think about my approach? [a link] it would be as below. i just wrote a poc, so it doesn't work as is, of course, but i hope you'll get my point. ```go otherlicenses := map[string]*spdx.otherlicense{} replaceotherlicenses := func(expr expression.expression) expression.expression { var licensename string switch e := expr.(type) { case expression.simpleexpression: if expression.validspdxlicense(e.license) { return license } licensename = e.license case expression.compoundexpression: if e.conjunction() != expression.tokenwith { return expr } if expression.validspdxlicense(e.left().string()) && expression.validspdxlicense(e.right().string()) { return expr } licensename = e.string() } license := newotherlicense(licensename, false) if license == nil { ... } otherlicenses[license.licenseidentifier] = license return expression.simpleexpr{license: license.licenseidentifier} } normalizedlicense, err := expression.normalize(license, licensing.normalizelicense, expression.normalizeforspdx, replaceotherlicenses)",0,0,1,0.9626877903938292,0.9076103568077089,0.9285438060760498,0.0,accept,majority_agreement
1923157257,8077,"[code block] it looks like we need to return `simpleexpr` to a valid spdx license to avoid a separate license and exception checking, but overall your approach should work!",0,0,1,0.8775191903114319,0.9344083666801452,0.7700448036193848,0.0,accept,majority_agreement
1923202087,8077,"it's just a waste of time as it will validate the same licenses and exceptions twice, but it doesn't cause any bugs, right?",-1,0,-1,0.566871702671051,0.6574618816375732,0.842829704284668,-1.0,accept,majority_agreement
1923302735,8077,"won't we get something like duplicates? i mean `license with exception`, `license` and `separate exception`. but maybe i'm wrong - i'll check and let you know",0,0,0,0.962072253227234,0.9116773009300232,0.9881153106689452,0.0,accept,unanimous_agreement
1923386053,8077,"i believe not, but let's see.",0,0,0,0.9355374574661256,0.9576348066329956,0.9413918256759644,0.0,accept,unanimous_agreement
1923581765,8077,we use otherlicense for exception. e.g. for `happy path with with operator` test: [code block] so i saved license with exception as simpleexp.,0,0,0,0.9702881574630736,0.9852598905563354,0.995604395866394,0.0,accept,unanimous_agreement
1923581881,8077,updated in [a link],0,0,0,0.9845641851425172,0.9892787337303162,0.995200514793396,0.0,accept,unanimous_agreement
1923582515,8077,added in [a link],0,0,0,0.9876591563224792,0.9878443479537964,0.9952162504196168,0.0,accept,unanimous_agreement
1923582626,8077,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1923583338,8077,i separated this logic in [a link],0,0,0,0.9865514039993286,0.98121839761734,0.9942428469657898,0.0,accept,unanimous_agreement
1923583991,8077,updated in [a link],0,0,0,0.9845641851425172,0.9892787337303162,0.995200514793396,0.0,accept,unanimous_agreement
1923584097,8077,updated in [a link],0,0,0,0.9845641851425172,0.9892787337303162,0.995200514793396,0.0,accept,unanimous_agreement
1923584507,8077,removed in [a link],0,0,0,0.9858155250549316,0.9919909834861756,0.9932310581207277,0.0,accept,unanimous_agreement
1923584615,8077,removed in [a link],0,0,0,0.9858155250549316,0.9919909834861756,0.9932310581207277,0.0,accept,unanimous_agreement
1923584929,8077,renamed in [a link],0,0,0,0.9871048927307128,0.9926044940948486,0.9954591989517212,0.0,accept,unanimous_agreement
1923587638,8077,i save and check exceptions in uppercase because we don't have normalization for exceptions like we do for licenses. i suggest waiting for user feedback. maybe we need to update this logic (e.g. check in uppercase but save in original (from this file) case).,0,0,0,0.9842600226402284,0.9881983399391174,0.9917019009590148,0.0,accept,unanimous_agreement
1924466797,8077,"in the spdx tools i maintain, i take the approach of saving in the original case but comparing ignoring case",0,0,0,0.9836929440498352,0.983805239200592,0.9917830228805542,0.0,accept,unanimous_agreement
1924768762,8077,thanks i updated logic in [a link] + [a link],1,1,1,0.8996540307998657,0.9187883138656616,0.8107821941375732,1.0,accept,unanimous_agreement
1928555225,8077,i think the `happy path with with operator` test is failing just because the exception validation is missing. the following code should pass the test. [code block],0,0,0,0.9236003756523132,0.9576272368431092,0.972646713256836,0.0,accept,unanimous_agreement
1930061433,8077,"thanks for ""fresh"" look. it looks better. fixed in [a link]",1,1,1,0.9689907431602478,0.9918619394302368,0.9894243478775024,1.0,accept,unanimous_agreement
342460128,253,"i think we should elaborate that the light mode is faster with db downloads, but the downside of it is lack of cve title/description in the output report.",0,0,0,0.9840333461761476,0.9814074635505676,0.9773225784301758,0.0,accept,unanimous_agreement
342463176,253,i'd be more specific what version we're talking about. version of db or trivy binary? without looking into code the user might be confused.,0,0,0,0.9771711826324464,0.9710131883621216,0.9752126932144164,0.0,accept,unanimous_agreement
342465157,253,for troubleshooting we might want to add expected and actual db schema version to the error message. also lowercase the error message.,0,0,0,0.9866678714752196,0.9888344407081604,0.9930896162986756,0.0,accept,unanimous_agreement
342466942,253,i'm wondering whether `c.dbc.getmetadata()` should return error. anyway you ignore it. and my ide warns me that the `metadata` variable might be nil when you compare versions.,0,0,0,0.916911005973816,0.7865330576896667,0.9397767782211304,0.0,accept,unanimous_agreement
342468435,253,log debug that we're skipping db download. for troubleshooting.,0,0,0,0.9592085480690002,0.9845137000083924,0.9866216778755188,0.0,accept,unanimous_agreement
342469407,253,reopen -> reopening ?,0,0,0,0.9828118681907654,0.983414113521576,0.992439866065979,0.0,accept,unanimous_agreement
342474697,253,"i think you could `require.noerror(t, err)` here",0,0,0,0.9844123721122742,0.9921076893806458,0.9920672178268432,0.0,accept,unanimous_agreement
342478355,253,we can possibly make this error message shorter without loosing the meaning & root cause.,0,0,0,0.9840912222862244,0.9826284646987916,0.9858278036117554,0.0,accept,unanimous_agreement
342479041,253,"i'd keep it shorter, e.g. `xerrors.new(""opening new db: invalid database"")`",0,0,0,0.9847987294197084,0.9811260104179382,0.991846799850464,0.0,accept,unanimous_agreement
342479736,253,maybe it's better to use `require.noerror` here. if it fails at this state it probably doesn't make sense to check subsequent assertions.,0,0,0,0.9667150378227234,0.9904910326004028,0.9800546169281006,0.0,accept,unanimous_agreement
342481703,253,do we really need this token? or is it just a workaround for tirvy-db being a private repo?,0,0,0,0.9858224987983704,0.980680525302887,0.9914275407791138,0.0,accept,unanimous_agreement
342490575,253,"nit: you can make this private, i.e. name it `repository` and shorten `repositoryinterface` to simply `repository`",0,0,0,0.9873602986335754,0.9934746623039246,0.993987798690796,0.0,accept,unanimous_agreement
342492177,253,add some message to the logger. log it as error?,0,0,0,0.9704100489616394,0.9741348028182985,0.9942623376846312,0.0,accept,unanimous_agreement
342493119,253,"give some context to the log message, e.g. `log.logger.debugf(""inspecting github release: %s"", release.getname())`",0,0,0,0.9876283407211304,0.9943916201591492,0.993645429611206,0.0,accept,unanimous_agreement
342496016,253,"`require.noerror(t, err, ""init logger failed"")`",0,0,0,0.9856309294700624,0.9924530386924744,0.9936601519584656,0.0,accept,unanimous_agreement
342499018,253,do you really need this for testing with mocks?,0,0,0,0.9739050269126892,0.986560881137848,0.9888441562652588,0.0,accept,unanimous_agreement
342512126,253,"formatting, break it into lines",0,0,0,0.9788322448730468,0.9836755394935608,0.991578221321106,0.0,accept,unanimous_agreement
342512649,253,what if err != nil?,0,0,0,0.6942433714866638,0.9636214375495912,0.9866170883178712,0.0,accept,unanimous_agreement
342512959,253,which error are you checking here?,0,0,0,0.9663336277008056,0.9531067609786988,0.9873694777488708,0.0,accept,unanimous_agreement
343169886,253,"i got it. by the way, i'm not sure `light` is a proper name. do you have any other idea? e.g. `fast`, `no-detail`, and so on.",0,0,0,0.9501879811286926,0.5290617346763611,0.8672453165054321,0.0,accept,unanimous_agreement
343170841,253,i fixed it.,0,0,0,0.97554349899292,0.9678345322608948,0.7885528802871704,0.0,accept,unanimous_agreement
343174519,253,i fixed it.,0,0,0,0.97554349899292,0.9678345322608948,0.7885528802871704,0.0,accept,unanimous_agreement
343180015,253,"if the db is not in the local machine, getmetadata will return err. but `metadata` is a struct, not a pointer. a default value is stored. [a link] but my editor also warns me. i fixed it.",0,0,0,0.9834901094436646,0.93199622631073,0.9898720383644104,0.0,accept,unanimous_agreement
343181490,253,nice. i fixed it.,1,1,1,0.9426410794258118,0.95191890001297,0.9913582801818848,1.0,accept,unanimous_agreement
343186727,253,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
343188044,253,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
343188671,253,"do you mean we should make expectederror shorter? or, should we avoid wrapping error many times?",0,0,0,0.9811192750930786,0.9917322397232056,0.991178810596466,0.0,accept,unanimous_agreement
343189352,253,you're right.,0,0,0,0.9367263913154602,0.7213375568389893,0.7370946407318115,0.0,accept,unanimous_agreement
343276264,253,i'm curious as to why is `getmetadata` a slice of `getmetadataoutput`? can there ever be more than one behaviour at a time for `getmetadata` in a single invocation? it also looks like all the test cases here only have a single element anyway.,0,0,0,0.9665401577949524,0.8676021099090576,0.9231959581375122,0.0,accept,unanimous_agreement
343280851,253,are there some changes that haven't been pushed yet ? i don't see this fixed in the latest head of the branch.,0,0,0,0.9537805914878844,0.988189697265625,0.985022246837616,0.0,accept,unanimous_agreement
343281740,253,this would be an example of a situation where testing what's logged would be useful.,0,0,0,0.9861002564430236,0.9862982630729676,0.9890405535697936,0.0,accept,unanimous_agreement
343298550,253,"this will panic if releases is not empty but doesn't have all the elements inside of it, in particular `publishedat`. for example: [code block] should we explicitly check for that before proceeding to be safe?",0,0,0,0.6630765795707703,0.9912251830101012,0.9011368155479432,0.0,accept,unanimous_agreement
343318718,253,the name `write` is confusing in this context where there's an interface `writer` and a method within that interface also called `write`. maybe we should rename this to something else like `writeoutput` for the lack of a better name?,-1,0,0,0.7277060151100159,0.968698024749756,0.9639155268669128,0.0,accept,majority_agreement
343319066,253,i like `light`!,1,1,1,0.9622107148170472,0.9948904514312744,0.9885868430137634,1.0,accept,unanimous_agreement
343335368,253,"i'm sorry. i was interrupted at the end of today, so i couldn't push the commits. i pushed just before.",-1,-1,-1,0.9880991578102112,0.9923190474510192,0.992401361465454,-1.0,accept,unanimous_agreement
344493282,253,i fixed it.,0,0,0,0.97554349899292,0.9678345322608948,0.7885528802871704,0.0,accept,unanimous_agreement
344493412,253,"yes, github release api sometimes returns a redirect url. in that case, trivy uses http client to fetch pre-built db. this mock is for the http client. [a link]",0,0,0,0.986799955368042,0.9920849204063416,0.994652509689331,0.0,accept,unanimous_agreement
344494559,253,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
344495191,253,"in that case, the error is handled by line 46 - 49. the error would be displayed, but it wouldn't stop the loop.",0,0,0,0.9823408126831056,0.9901878237724304,0.9901066422462464,0.0,accept,unanimous_agreement
344495332,253,"when `--light` is enabled, the error from line 41. when `--light` is disabled, the error from line 44. they are almost the same, so i made those error handling common. [code block] we can write as the above.",0,0,0,0.98845112323761,0.9924622774124146,0.992020308971405,0.0,accept,unanimous_agreement
344495649,253,"i assumed a case where `getmetadata` was not called. in that case, i need to avoid calling `mock.on().return()`. this is because we use `assertexpectations`. if the slice is empty, we can skip the `for` loop. but for now, `getmetadata` is always called once. we can change from a slice to an object.",0,0,0,0.9857189059257508,0.9931238293647766,0.99164879322052,0.0,accept,unanimous_agreement
344495854,253,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
344496134,253,great point. we should have used `getpublishedat`. this is safety for nil.,1,1,1,0.9173322319984436,0.9807370901107788,0.9825160503387452,1.0,accept,unanimous_agreement
344496551,253,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
344496648,253,"actually, i didn't feel that this name is good, but i couldn't come up with a good name. i will change write to writeoutput. thanks.",1,1,1,0.9556888937950134,0.9675484299659728,0.956586480140686,1.0,accept,unanimous_agreement
344496738,253,i used writeresults,0,0,0,0.9871780872344972,0.9737484455108644,0.9945250749588012,0.0,accept,unanimous_agreement
345415939,253,i added the description for light mode.,0,0,0,0.9873701333999634,0.9881920218467712,0.990041196346283,0.0,accept,unanimous_agreement
999448744,3015,i think we should be pointed to this one now: [a link],0,0,0,0.9774358868598938,0.9629545211791992,0.989459991455078,0.0,accept,unanimous_agreement
999449222,3015,"(that said, i'm not sure it's been pushed with the v0.80.1 tag as expected, i'll check it out)",0,0,0,0.9775461554527284,0.986721396446228,0.9888107776641846,0.0,accept,unanimous_agreement
999459237,3015,i fixed the bundle tag issue here: [a link] - will tag and release a good bundle shortly.,1,0,1,0.5193058848381042,0.7371419668197632,0.55186527967453,1.0,accept,majority_agreement
999486468,3015,"fixed, `0`, `0.80` and `0.80.2` are now synonymous with `latest` :partying_face:",0,0,0,0.9873740077018738,0.9874486327171326,0.9842405915260316,0.0,accept,unanimous_agreement
1000014921,3015,awesomesauce.gif,1,0,0,0.9781021475791932,0.9584562182426452,0.7849072217941284,0.0,accept,majority_agreement
1000015537,3015,updated here [a link],0,0,0,0.9821210503578186,0.9864339828491212,0.99538391828537,0.0,accept,unanimous_agreement
1035766953,3015,"i'm just curious about why `<=` is better than `==` here. that value cannot be negative, right? [code block]",0,0,0,0.950075387954712,0.9182725548744202,0.9731068015098572,0.0,accept,unanimous_agreement
1035770876,3015,"btw, trivy will not use the downloaded policy if `--skip-policy-update` is specified. am i correct? i imagined as below: [code block] the above two commands should return the same result as the first command already downloads the policy.",0,0,0,0.9886960983276368,0.9903079867362976,0.9931622743606568,0.0,accept,unanimous_agreement
1035773997,3015,"same here. when `--skip-policy-update` is specified, it always falls back into embedded policies. it looks weird to me. 1. `--skip-policy-update` is specified at the first run => use embedded policy 2. `--skip-policy-update` is specified when the policy is already downloaded => use the downloaded policy i might be missing something, as i've not been involved in the discussion.",-1,-1,-1,0.9838036298751832,0.9868220090866088,0.9835608005523682,-1.0,accept,unanimous_agreement
1036596592,3015,"yes you're correct. actually it's been too long for me to remember why i did this way as well :rolling_on_the_floor_laughing:. but yes i understand, it makes sense. i changed the behaviour as such here [a link]",-1,0,1,0.5099584460258484,0.8823338150978088,0.9639796614646912,,review,no_majority_disagreement
1043101968,3015,"i might be mistaken, but does it mean we will not use built-in policies if the user passes `--config-policy`? i thought built-in policies are loaded anyway, and custom policies are loaded in addition to that.",0,0,0,0.9800397157669068,0.9832165837287904,0.9358460903167723,0.0,accept,unanimous_agreement
1043957152,3015,"yes this is correct. there is a good reason for this however and that is the fact that if we do load embedded policies when a user specifies a custom policy of their own, we risk the chance of getting rego namespace collisions. a more detailed explanation with an example: a user loads a custom policy that they've written that uses rego helper functions from an aqua library, like this: [a link] - in this case there's a chance that their code is using a version of the helper library (kubernetes.rego) that is out of date or different from the latest embedded helper library (kubernetes.rego). this would cause their custom policy to fail. they would also not be able to load their own helper either because of rego namespace collision (redeclaring the same functions). so in short, if a user loads a custom policy, it is on them to supply all necessary helper libraries as well for the policy to work properly. this eliminates any confusion or mismatch as described above.",0,0,0,0.9139936566352844,0.9904384016990662,0.9859644174575806,0.0,accept,unanimous_agreement
1044860517,3015,"it makes sense that we don't want to load helper functions when custom policies are passed. but if i understand correctly, the current version loads custom policies in addition to built-in policies, right? will we change the behavior to disable all built-in policies when custom policies are specified? isn't this a breaking change?",0,0,0,0.9712684750556946,0.9851725101470948,0.9755472540855408,0.0,accept,unanimous_agreement
1044930996,3015,"hm yeah that is a good point. although the breakage is limited to those custom policies that use any rego helpers we provide. do you have any proposal on how we can if possible, avoid this breaking change?",1,1,0,0.9298366904258728,0.515873908996582,0.7392243146896362,1.0,accept,majority_agreement
1045193433,3015,it is inconvenient if the built-in policies are disabled and not intuitive as users assume custom policies are add-on. i think we can accept the risk of out-of-date helper functions. we should warn it in our doc though. did you already see any issue from the version mismatch of the helper library? any thoughts?,0,-1,-1,0.9061201810836792,0.9236432313919068,0.652283251285553,-1.0,accept,majority_agreement
1045206344,3015,"thanks for catching this i agree, i don't think it's reasonable to expect the user to provide helpers for trivy's built-in policies, and moreover to make sure not to break any existing policy. agree with your recommendation.",1,0,1,0.8518331050872803,0.5217625498771667,0.9758664965629578,1.0,accept,majority_agreement
1045207473,3015,"in addition (another pr) wdyt about changing the namespace of built-in helpers for example to `lib.trivy.kubernetes` (instead of `lib.kubernetes` which is a popular existing library), this way it's clear that this is a trivy component, and if someone is using a custom/another kubernetes lib in custom policy, it would not conflict with trivy's.",0,0,0,0.9877880215644836,0.9865885376930236,0.9944127202033995,0.0,accept,unanimous_agreement
1045228247,3015,"changing the namespace of our helpers sounds good to me. it could be a breaking change, so we can announce that along with the embedded policy retirement.",1,0,0,0.9010723829269408,0.6429152488708496,0.9744481444358826,0.0,accept,majority_agreement
1046405755,3015,"actually i might have missed a thing here as it's been a while i made this pr. so i tested out the current set of changes and it is in fact loading both embedded policies and custom policies (if any are specified). iow loading custom policies does not disable embedded policies (current behaviour is maintained). also if a custom policy uses a helper, it will use the one that the embedding policies have (also current behaviour). see below for an example. note there are 4 results as the ""custom"" policy i'm loading is just a copy of an embedded policy, ds005. [code block] policy can be found here: [a link]",0,0,0,0.9649090766906738,0.9837194681167604,0.9746062159538268,0.0,accept,unanimous_agreement
1046756540,3015,"if this is the actually behavior (not sure since teppei spotted the behavior in the code) then it sounds like a good one to me. to summarize: 1. built-in policies are downloaded by default 1.1 can be disabled `--skip-policy-update` 2. built-in policies are loaded by default 2.1 can not be disabled (right?) 3. custom policies, if provided `--config-policy`, are loaded in addition to built-in 3. built-in helpers are always loaded and available for built-in and custom policies 3.1 if built-in policies bundle was not downloaded, built-in helpers are not available for custom policy author (correct? might want to fix it in the future) 3.2 todo: namespace built-in helpers",0,0,1,0.5394273400306702,0.8420432209968567,0.748690128326416,0.0,accept,majority_agreement
1046802966,3015,"oh, seems like we don't use downloaded polices like i pointed out, but use embedded policies. if custom policies are passed, we switch downloaded policies to embedded policies. this is why i said embedded policies complicate the logic. for example, - the latest downloaded policies: policy a, b, c (c was added to defsec recently) - the embedded policies: policy a, b - the user custom policy: policy d in this case, `trivy config /path/to/dir` detects a, b and c, but `trivy config --config-policy ./my-policy /path/to/dir` will detect a, b and d, not detect c anymore. i don't think it is expected behavior.",0,0,0,0.8416833281517029,0.9642029404640198,0.9496293663978576,0.0,accept,unanimous_agreement
1046815279,3015,"so if we consider the typical hierarchy: 1. embedded 2. downloaded 3. custom it should be loaded in this order, meaning 3 overrides 2 overrides 1 currently we miss step 2 if custom if provided. correct?",0,0,0,0.9859533905982972,0.991951823234558,0.9938313961029052,0.0,accept,unanimous_agreement
1046815363,3015,"iiuc, this pr behaves as below: 1. built-in policies are downloaded by default 1.1 can be disabled --skip-policy-update 1. built-in policies are loaded by default 2.1 can not be disabled (can be ignored by using exception policies though) 1. custom policies, if provided --config-policy, are loaded in addition to **embedded built-in** policies 3.1 regardless of whether built-in policies are downloaded 1. built-in helpers are always loaded and available for built-in and custom policies it should be like: 1. built-in policies are downloaded by default 1.1 can be disabled --skip-policy-update 1. built-in policies are loaded by default 2.1 can not be disabled (can be ignored by using exception policies though) 1. custom policies, if provided --config-policy, are loaded in addition to built-in policies 3.1 use downloaded policies if present 3.2 use embedded policies if there are no downloaded policies in local 1. built-in helpers are always loaded and available for built-in and custom policies please correct me if i'm wrong.",0,0,0,0.9618576765060424,0.9826844334602356,0.9844632148742676,0.0,accept,unanimous_agreement
1046819871,3015,1. built-in 1.1. embedded 1.2. downloaded (if present) 1. custom `1.2` should override `1.1`. `2` should not override `1`. enabling `2` should not affect `1`. `1.1` or `1.2` should be selected regardless of `2`.,0,0,0,0.9873714447021484,0.9945492148399352,0.9902119040489196,0.0,accept,unanimous_agreement
1063944917,3015,"thanks for the positive discussion from you both, i've read through it and i think i have an idea of what's desired. just to recap, i'm going by this as it's the most succinct and clear definition so far. here's a few results, please point out any logical flaws if you see any: 1. no cache, `--skip-policy-update` enabled and no custom policy passed: [code block] **result: only embedded policy is used.** 2. no cache, `--skip-policy-update` enabled and one custom policy passed: [code block] **result: observe that custom policy was scanned in addition to the embedded policy as desired by: `2 should not override 1. enabling 2 should not affect 1. 1.1 or 1.2 should be selected regardless of 2.`** 3. no cache, policy update is successful, no custom policy: [code block] **result: only newer downloaded policy is used.** 4. no cache, policy update is successful, one custom policy: [code block] **result: observe that again custom policy is scanned in addition but this time it is the newer downloaded policy. this is as per: `1.2 should override 1.1`.** 5. no cache, policy update fails, no custom policy [code block] **result: observe in this case the embedded policy is used as no new policies were downloaded.** 6. no cache, policy update fails, one custom policy: [code block] **result: observe again in this case embedded policy is used (in addition to custom policy).**",1,1,1,0.9535400867462158,0.9491774439811708,0.9884033799171448,1.0,accept,unanimous_agreement
1063945063,3015,the changes to implement above are minimal but i want to confirm if the expectation is as desired before proceeding.,0,0,0,0.9863184690475464,0.981873631477356,0.990514039993286,0.0,accept,unanimous_agreement
1064160833,3015,"thanks for sorting out. it looks perfect to me! there is one note about no.5. we should show the fallback message as an error so that users can be aware embedded policies are used. if there is no embedded policy, the logic can be much simplified, though. we may want to announce the retirement of embedded policies shortly.",1,1,1,0.9897498488426208,0.9941825270652772,0.996034562587738,1.0,accept,unanimous_agreement
1065571076,3015,"we need to close the file. otherwise, it fails tests on windows.",0,0,0,0.7883691191673279,0.9280702471733092,0.9894819259643556,0.0,accept,unanimous_agreement
1065571197,3015,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1066335505,3015,ah... thanks for catching this!,1,1,1,0.9774373769760132,0.955329179763794,0.9923976063728333,1.0,accept,unanimous_agreement
1066949223,3015,"it shows this error even when `--skip-policy-update` is specified on the first run. [code block] i think only unexpected things should be shown as an error. if policies cannot be pulled due to network or storage issues, it should be an error. what do you think? if you don't think embedded policies should be used even with `--skip-policy-update`, which means they should have downloaded policies locally, the error is ok because using embedded policies is unexpected.",0,0,0,0.9448590278625488,0.9875871539115906,0.9777730107307434,0.0,accept,unanimous_agreement
1066950000,3015,forgot to remove?,0,0,0,0.9064918756484984,0.9699225425720216,0.8303985595703125,0.0,accept,unanimous_agreement
1066951769,3015,shouldn't it be aligned with config scanning? seems like aws scanning will not download policies if custom policies are passed.,0,0,0,0.9578744173049928,0.9834551811218262,0.9873241186141968,0.0,accept,unanimous_agreement
1067557480,3015,"right, i think the former is better (only error in unexpected situations). i think that's easy to check with err != nil and false skip update, that should signal that user intended to download new policies but failed to do so. i added that check in: [a link]",0,0,0,0.943303644657135,0.940281867980957,0.9841145277023317,0.0,accept,unanimous_agreement
1067570946,3015,good catch - fixed that here [a link],1,1,1,0.870539128780365,0.9774383902549744,0.982165515422821,1.0,accept,unanimous_agreement
531792712,751,the `--create-namespace` flag is pretty handy if he namespace does not exist: [code block],0,0,0,0.9212515354156494,0.8383561372756958,0.9876219630241394,0.0,accept,unanimous_agreement
531796570,751,"iirc trivy does not recognize the `log_level` env, only trivy_debug. am i right ? if yes we can remove this setting and the loglevel value.",0,0,0,0.984946608543396,0.967564821243286,0.993206024169922,0.0,accept,unanimous_agreement
531800193,751,"trivy server does not use the `trivy_reports_dir` env. it was only relevant for the harbor scanner adapter, which is storing vulnerability reports in temporary files.",0,0,0,0.9873805046081544,0.9928684830665588,0.9930384755134584,0.0,accept,unanimous_agreement
531801091,751,"i'm not sure it makes sense to expose cachedir value to helm users. this is somehow implementation detail of this chart, which does not have any impact on scan results. what's more, i can imagine someone misconfiguring it.",-1,-1,0,0.6331408023834229,0.6084429025650024,0.5190202593803406,-1.0,accept,majority_agreement
531803758,751,"we need to double check, but i played with trivy server run in the cluster and i had to specify `0.0.0.0:8080` to accept connection from client pods. see [a link]",0,0,0,0.985524594783783,0.9804974794387816,0.9955392479896544,0.0,accept,unanimous_agreement
531804496,751,that's the name of env recognized by trivy: [code block],0,0,0,0.985082507133484,0.9928761720657348,0.9949524402618408,0.0,accept,unanimous_agreement
531806262,751,i'd not expose it as helm value. see my previous comment where this value is used.,0,0,0,0.9885419607162476,0.9728972315788268,0.9903045296669006,0.0,accept,unanimous_agreement
531806319,751,does not take effect,0,0,0,0.859475314617157,0.917364239692688,0.9855340719223022,0.0,accept,unanimous_agreement
531806553,751,i'd use the default port of trivy server 4954,0,0,0,0.984519362449646,0.9887407422065736,0.9940959215164183,0.0,accept,unanimous_agreement
531806702,751,scanner adapter -> trivy server,0,0,0,0.9867289662361144,0.9850115776062012,0.9932373762130736,0.0,accept,unanimous_agreement
531806738,751,takes no effect,0,0,0,0.9073278307914734,0.8438869714736938,0.9879141449928284,0.0,accept,unanimous_agreement
531806770,751,not used by trivy server,0,0,0,0.9735191464424132,0.9544165134429932,0.9918295741081238,0.0,accept,unanimous_agreement
531806842,751,i'd use 4954 instead of 8080 to be consistent with trivy cli,0,0,0,0.9840373992919922,0.9923740029335022,0.9845600128173828,0.0,accept,unanimous_agreement
531807384,751,"did you consider using deployment with emptydir volumes? i know that you're inspired by aquasecurity/harbor-scanner-trivy, but harbor adapter is using trivy in standalone mode. that was the reason to use statefulsets, but in case of client-server mode we may probably use deployment.",0,0,0,0.9858214259147644,0.9932785630226136,0.99392831325531,0.0,accept,unanimous_agreement
531807876,751,for aquasecrity/harbor-scanner-trivy image we created user scanner(id=1000). it's not the case for trivy image. so maybe you can use nobody(id=65534) as trivy image is based on alpine.,0,0,0,0.9852619767189026,0.9951359629631042,0.991741418838501,0.0,accept,unanimous_agreement
531807983,751,i think we don't use this anywhere. the server is not pulling image layers.,0,0,0,0.8558975458145142,0.8742420077323914,0.981979250907898,0.0,accept,unanimous_agreement
531808006,751,not used.,0,0,0,0.8704697489738464,0.9310392737388612,0.9787590503692628,0.0,accept,unanimous_agreement
531808114,751,"actually, i've just tested it and it works fine!",1,1,1,0.8738150000572205,0.9504252076148988,0.8968547582626343,1.0,accept,unanimous_agreement
532153173,751,"yes, trivy recognizes only `trivy_debug`.",0,0,0,0.989095151424408,0.9868501424789428,0.9931632280349731,0.0,accept,unanimous_agreement
532153517,751,"as said, the server doesn't communicate with a registry.",0,0,0,0.9752587080001832,0.939468502998352,0.9873128533363342,0.0,accept,unanimous_agreement
532364934,751,"i understood the comments in a way, that trivy would pull the database from github. with the pvc and statefulset i wanted to prevent a pull for the database on every pod restart.",0,0,0,0.9636359214782716,0.9910311698913574,0.99066960811615,0.0,accept,unanimous_agreement
532665290,751,"okey so in case you want to reuse downloaded db files by configuring the storage class that has the reclaim policy set to `retain`, having statefulset makes sense. (afaik this is not possible with deployments and the only way is indeed `persistencevolumeclaimtemplate`.) on the other hand we can change the default `podmanagementpolicy` of the statefulset from `orderedready` to `paraller`, so pods are spun up independently rather than one after the other. there's no reason to wait in case of trivy server. pods can run and scale up or down independently.",0,0,0,0.973734736442566,0.9644231796264648,0.9616752862930298,0.0,accept,unanimous_agreement
532690416,751,add `trivy.ignoreunfixed` to values.yaml with short description,0,0,0,0.9835619330406188,0.9948086142539978,0.9951794147491456,0.0,accept,unanimous_agreement
532690697,751,add `trivy.skipupdate` to values.yaml with short description,0,0,0,0.9860833287239076,0.9942688941955566,0.9957386255264282,0.0,accept,unanimous_agreement
533091301,751,i changed the `podmanagementpolicy` and added a short note in the readme.,0,0,0,0.9874898791313172,0.9876412749290466,0.9938249588012696,0.0,accept,unanimous_agreement
533705015,751,"even though we do not expose cache directory as helm value, we have to set it as env here. when i tested it pods were failing because we're running trivy server as non root user (`nobody`), but it's trying to read and write to the `/.cache` directory. [code block]",0,0,0,0.9573647379875184,0.9899250268936156,0.9853540658950806,0.0,accept,unanimous_agreement
533706281,751,"i think we're missing description of the `githubtoken` property, which is referred to by the secret.",0,0,0,0.9753620624542236,0.9903209805488586,0.9830774664878844,0.0,accept,unanimous_agreement
533712186,751,"by default this service has `spec.sessionaffinity: none`, which might cause inconsistency errors when we scale up statefulset replicas. i was actually able to see such errors in my env after scaling to 3 replicas. basically we have to make sure that all requests related to scanning a particular image are routed to the same pod, which has its own file system cache (pvc -> pv). the following sketch diagram depicts the problem that i'm trying to describe. ![a link] one way to fix it is to change `spec.sessionaffinity: none` to `spec.sessionaffinity: clientip`, but we have to double check how does that impact scalability. /cc",0,0,0,0.7077013850212097,0.9037818908691406,0.6329664587974548,0.0,accept,unanimous_agreement
533977070,751,i think i missed to delete. in another comment mentioned the github token isn't needed to pull the database. [a link] or did i misunderstand this comment?,0,0,0,0.5248827338218689,0.9477621912956238,0.973682165145874,0.0,accept,unanimous_agreement
533977338,751,added this.,0,0,0,0.9845632910728456,0.9785866141319276,0.9901505708694458,0.0,accept,unanimous_agreement
533979574,751,added,0,0,0,0.973513960838318,0.9267084002494812,0.8435775637626648,0.0,accept,unanimous_agreement
534024746,751,sorry for that you're right. i saw the secret referring to the gh token and i mixed up things. indeed we don't need the secret and the gh token for trivy client-server,-1,-1,-1,0.9893494844436646,0.9925290942192078,0.989367425441742,-1.0,accept,unanimous_agreement
537014840,751,"i've supported redis and it will address this issue. [a link] should we wait for the redis support? or, can we merge this pr once and replace pv with redis in separate pr? what do you think, ?",0,0,0,0.976095974445343,0.9426765441894532,0.9714279770851136,0.0,accept,unanimous_agreement
537017420,751,it will be done in the subsequent pr.,0,0,0,0.9864978194236756,0.9921322464942932,0.9951318502426147,0.0,accept,unanimous_agreement
537220048,751,"i overlooked this conversation, but i was talking about `insecure`, not `githubtoken`. i meant `insecure` was unnecessary, but `githubtoken` was necessary for github rate limiting. even though a server doesn't pull the database from github so often (every 12 hours), a user might face the rate-limiting.",0,0,0,0.8301214575767517,0.9278297424316406,0.9815667867660522,0.0,accept,unanimous_agreement
537234424,751,fixed this in pr #769,0,0,0,0.986700475215912,0.992668628692627,0.9937703013420104,0.0,accept,unanimous_agreement
537521630,751,absolutely. i mixed up pulling layers from registry server by client (does not require gh token) and downloading trivy db from gh which is subject to rate limit and we should be able to configure gh token.,0,-1,0,0.9012401103973388,0.5235000252723694,0.92044335603714,0.0,accept,majority_agreement
667435479,1101,"iiuc, this section is not about scanning oci *image* but about oci *image layout directory*. saying image might confuse with a built image?",0,0,0,0.986844539642334,0.9785858392715454,0.9880580902099608,0.0,accept,unanimous_agreement
667436313,1101,"perhaps ""more blogs"", ""external blogs"", or ""what others are saying""",0,0,0,0.9689841270446776,0.9781389832496644,0.98661071062088,0.0,accept,unanimous_agreement
667436924,1101,"""comprehensive vulnerability detection"" (otherwise it means the vulnerabilities are comprehensive, not trivy)",0,0,0,0.9824092388153076,0.979913592338562,0.9928386807441713,0.0,accept,unanimous_agreement
667437236,1101,maybe merge these into: [code block],0,0,0,0.985646903514862,0.992255926132202,0.993545949459076,0.0,accept,unanimous_agreement
667437922,1101,"how does this affect the license of trivy? the license file simply says apache 2, is that correct?",0,0,0,0.9717588424682616,0.9935280680656432,0.9932823181152344,0.0,accept,unanimous_agreement
667438306,1101,"""scan image for vulnerabilities""",0,0,0,0.9548168182373048,0.9905726313591005,0.9928855299949646,0.0,accept,unanimous_agreement
667438364,1101,"""scan directory for misconfigurations""",0,0,0,0.952526330947876,0.9918038845062256,0.9913821816444396,0.0,accept,unanimous_agreement
667438964,1101,"""trivy's usually scans each configuration file individually. sometimes it might be useful to compare values from different configuration files.""",0,0,0,0.9867825508117676,0.992531955242157,0.9911132454872132,0.0,accept,unanimous_agreement
667439981,1101,"this was already said, can remove",0,0,0,0.9880849719047546,0.9908307790756226,0.99568510055542,0.0,accept,unanimous_agreement
667446856,1101,suggestion: [code block],0,0,0,0.9879049062728882,0.9914191961288452,0.9957109689712524,0.0,accept,unanimous_agreement
667446987,1101,i think it's better to put this first,0,0,0,0.954733669757843,0.9576807022094728,0.9834348559379578,0.0,accept,unanimous_agreement
667447120,1101,"if you accept my suggestion for rule-based, can rewrite this in the same style",0,0,0,0.9836703538894652,0.9852750301361084,0.9933165311813354,0.0,accept,unanimous_agreement
667447761,1101,broken link,0,0,0,0.7162068486213684,0.5794562697410583,0.5503872632980347,0.0,accept,unanimous_agreement
667448104,1101,"what do you mean by ""allowed values"" the entire purpose of this flag is to supply my own custom value no?",0,0,0,0.974467933177948,0.9853142499923706,0.9908726811408995,0.0,accept,unanimous_agreement
667448439,1101,"wdym ""as a virtual machine""?",0,0,0,0.9873078465461732,0.9851891994476318,0.9909381866455078,0.0,accept,unanimous_agreement
667449481,1101,i think the details of how the policy db works is unnecessary for the quick start [code block],0,0,0,0.9607208371162416,0.9774059653282166,0.972537636756897,0.0,accept,unanimous_agreement
667449698,1101,"please add ""for suggestions or issues regarding policy content, please open an issue under ""appshield"" or ""tfsec"" repository.",0,0,0,0.9812347292900084,0.9901560544967652,0.9948358535766602,0.0,accept,unanimous_agreement
667452900,1101,"maybe just to distinguish this list from the previous list, call the previous one ""file formats"" and this one ""configuration languages""",0,0,0,0.9870650768280028,0.9924216866493224,0.9842323064804076,0.0,accept,unanimous_agreement
667453071,1101,"""policy structure""?",0,0,0,0.9842076897621156,0.9936495423316956,0.990868091583252,0.0,accept,unanimous_agreement
667453543,1101,"""metadata helps enrich trivy's scan results with useful information""",0,0,1,0.9587957859039308,0.9818539023399352,0.6650046110153198,0.0,accept,majority_agreement
667454130,1101,"maybe instead of this ""note"", add to the selector description above, that it's not just selecting which files to pass to the policy, but also affects how they will be parsed",0,0,0,0.9859765768051147,0.9936375617980956,0.9773005843162536,0.0,accept,unanimous_agreement
667465740,1101,"add ""layout"" in accordance with [a link] [a link]",0,0,0,0.987621247768402,0.9928458333015442,0.995306670665741,0.0,accept,unanimous_agreement
667465826,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667465879,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667465887,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667470347,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667470381,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667470458,1101,"`--file-pattern` does affect how files are parsed, but `selector` doesn't affect.",0,0,0,0.98542457818985,0.9924885034561156,0.990269660949707,0.0,accept,unanimous_agreement
667470554,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667470627,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667470704,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667471282,1101,"no, it controls how trivy looks for config files. trivy looks for config files according to file name and extension. when a user might have dockerfile not named ""dockerfile"" and have different name conventions such as `webapp.docker` and `db.docker`, trivy will not handle the file as dockerfile. in that case, a user can specify `--file-patterns dockerfile:.*.docker`.",0,0,0,0.9852184653282166,0.992519736289978,0.9923256635665894,0.0,accept,unanimous_agreement
667471405,1101,looks it is working. still broken? [a link],0,0,0,0.9667930603027344,0.9581868648529052,0.9519609212875366,0.0,accept,unanimous_agreement
667471425,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667471458,1101,"i rewrote, but could you review it again? [a link]",0,0,0,0.9819582104682922,0.9879214763641356,0.9943048357963562,0.0,accept,unanimous_agreement
667471467,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667471491,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667471518,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667471625,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667471651,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667471710,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
667471739,1101,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
862458214,2065,`defer` in a loop might cause resource leak,0,0,0,0.94965797662735,0.99070006608963,0.9784849286079408,0.0,accept,unanimous_agreement
862477449,2065,"maybe the logic for persisting files on fs should be done in `trivy-kubernetes`, shouldn't trivy accept only root file folder path and walk it?",0,0,0,0.988144874572754,0.9954661130905152,0.9898120760917664,0.0,accept,unanimous_agreement
862477609,2065,"we are calling k8s scan for each file path, shouldn't we call it once for folder path?",0,0,0,0.9878268837928772,0.9920368194580078,0.9939042925834656,0.0,accept,unanimous_agreement
862607748,2065,"if there is no validation, we don't have to have `init()`.",0,0,0,0.9860824346542358,0.987789273262024,0.993235409259796,0.0,accept,unanimous_agreement
862609896,2065,"could you point to the existing commit in remote so that reviewers can run this pr easily? like `go get -u github.com/aquasecurity/trivy-kubernetes`. after merging [a link] we will update go.mod again to point to the main branch. i don't mean you should not use `replace` directive. you can use `replace` in local, but it would be helpful if you use the actual commit when pushing commits to github.",0,0,0,0.9677950143814088,0.9880335330963136,0.992952287197113,0.0,accept,unanimous_agreement
863937295,2065,ioutil is deprecated,0,0,0,0.983440637588501,0.9746460318565368,0.9627693891525269,0.0,accept,unanimous_agreement
863953556,2065,"i can change the replace to point to my fork for now, as the branch exists on my fork i don't think go mod can pull it from the aquasecurity while the pr is not merged.",0,0,0,0.9889299273490906,0.9860566854476928,0.9933956265449524,0.0,accept,unanimous_agreement
863958151,2065,please try [code block],0,0,0,0.9882170557975768,0.9897100329399108,0.9950351715087892,0.0,accept,unanimous_agreement
868947758,2065,this condition is redundant as there is a check already in `trivy-kubernetes` : [a link],0,0,0,0.9771721959114076,0.989096999168396,0.9951080679893494,0.0,accept,unanimous_agreement
868971373,2065,`file handle` remains open if it fails on `yaml.marshal`,0,0,0,0.9857534170150756,0.993263840675354,0.9943251013755798,0.0,accept,unanimous_agreement
868972219,2065,`file handle` remains open if it fails on `file.write`,0,0,0,0.98689866065979,0.991428792476654,0.9941942095756532,0.0,accept,unanimous_agreement
868978647,2065,"resource config file removal should be deferred right after its creation (l195) , as if `k8sscan` fails, the file will remains on the disk",0,0,0,0.9869598746299744,0.9948691129684448,0.9946736693382264,0.0,accept,unanimous_agreement
869298921,2065,this is an example. we don't have to put the entire json. can we shorten it?,0,0,0,0.981590449810028,0.9422640204429626,0.992315113544464,0.0,accept,unanimous_agreement
869524931,2065,any reason we don't support timeout?,0,0,0,0.8740211725234985,0.8534231781959534,0.962620735168457,0.0,accept,unanimous_agreement
869531891,2065,"what do you think we put all k8s-related definitions into `pkg/k8s`? `report` and `writer` are much different from other artifacts. it makes it easy to find source code regarding k8s. another benefit is we can put codeowners in `pkg/k8s`, then you can do whatever you want under the directory. [a link]",0,0,0,0.9726973176002502,0.9726651906967164,0.97317773103714,0.0,accept,unanimous_agreement
869539653,2065,this verb can be used only in 'fmt.errorf' calls (%w). [code block],0,0,0,0.98732727766037,0.992203950881958,0.9956814050674438,0.0,accept,unanimous_agreement
869540875,2065,"this `defer` should be put after the error handling. if it fails to create a temp file, it also fails to remove the file. [code block]",0,0,0,0.9845508933067322,0.9948630928993224,0.995860517024994,0.0,accept,unanimous_agreement
870559536,2065,yup. as we spoke we are doing it after getting this pr in.,1,0,0,0.5969115495681763,0.6148000359535217,0.9895541667938232,0.0,accept,majority_agreement
870683673,2065,looks like prs are already in the upstream (trivy-kubernetes). do we still need the `replace`?,0,0,0,0.9895892143249512,0.9942270517349244,0.9921684861183168,0.0,accept,unanimous_agreement
870685294,2065,"i think ""scan kubernetes images and configurations"" or ""scan kubernetes vulnerabilities and misconfigurations"" are better since `image` is an artifact and `misconfigurations` is a security issue.",0,0,0,0.9795134663581848,0.9925228953361512,0.9801780581474304,0.0,accept,unanimous_agreement
870687375,2065,the version 0 looks weird. is this because this feature is still experimental?,-1,-1,-1,0.9825448393821716,0.9874864816665648,0.9874375462532043,-1.0,accept,unanimous_agreement
870688242,2065,can we mention this is experimental here as below? [a link],0,0,0,0.9862046241760254,0.9914488196372986,0.9955546259880066,0.0,accept,unanimous_agreement
870692224,2065,"any reason this is a debug message? i understand the error will be included in the report, but i feel like we should notify it in terminal.",0,0,0,0.7979351282119751,0.9534151554107666,0.9785985946655272,0.0,accept,unanimous_agreement
870693170,2065,looks like this issue is remaining. [a link],0,0,0,0.9856535792350768,0.9784820675849916,0.9873207807540894,0.0,accept,unanimous_agreement
870695707,2065,"yes, i'm waiting for a last merge -> [a link]",0,0,0,0.984793186187744,0.9795946478843688,0.992260754108429,0.0,accept,unanimous_agreement
870696255,2065,"that was the idea, but i can change it to 1 if you think it makes more sense.",0,0,0,0.9754029512405396,0.953864336013794,0.990322768688202,0.0,accept,unanimous_agreement
870696428,2065,"ok, let's wait for it then.",0,0,0,0.9764007329940796,0.9718837141990662,0.9847776889801024,0.0,accept,unanimous_agreement
870697150,2065,it is ok then. i agree the schema is not fixed yet. i'm sure we will fix the schema soon.,0,0,1,0.9029462337493896,0.778433084487915,0.540841281414032,0.0,accept,majority_agreement
870700026,2065,"i asked a few friends to try it on their cluster with several resources (500-1000 resources), several resources were deployed with private images, and `trivy` was not configured to access the registry, the output becomes terrible, lots and lots of error logs, seems like everything is not working, and they cancelled the command, without waiting to generate a report , even to check at least the misconfigurations as the images were not reachable.",-1,-1,-1,0.9671651124954224,0.963014543056488,0.9799158573150636,-1.0,accept,unanimous_agreement
871002699,2065,"interesting. we probably should notify users if it is an authentication error like ""to scan private images, please consider setting appropriate credentials."" let's keep it in our mind as a future enhancement.",1,0,0,0.5407548546791077,0.9593831300735474,0.6323246955871582,0.0,accept,majority_agreement
871095945,2065,remove commented code and readd when required?,0,0,0,0.9856944680213928,0.9933297038078308,0.99529367685318,0.0,accept,unanimous_agreement
1673374571,7131,i think we can omit this test. i think we'll just ask contributors to add new licenses to the `tests`. can you remove this test and revert `mapping` to `mapping`,0,0,0,0.9877644181251526,0.990909993648529,0.9909036755561828,0.0,accept,unanimous_agreement
1673677586,7131,"`mapping `is back to private. i also removed additional ""+"", ""-only"" and ""-or-later"" suffixes from [a link]",0,0,0,0.9884875416755676,0.9920307397842408,0.9949800372123718,0.0,accept,unanimous_agreement
1673692269,7131,thanks! spdx differentiates between `gpl-1.0-only` and `gpl-1.0-or-later` (see [a link] so i'm not sure we need to do this.,1,1,1,0.9569342136383056,0.9424893856048584,0.9887750148773192,1.0,accept,unanimous_agreement
1673952511,7131,"1. there is no change in behavior, for example `gpl-2.0-only` and `gpl-2.0-or-later` are already mapped to gpl20 in current trivy mapping 2. `gpl-1.0-only` and `gpl-1.0-or-later` are not in current [a link], and it is probably not necessary to add them because of next point: 3. the main purpose of the normalization is to classify licenses into categories in [a link]. `gpl-1.0-only`, `gpl-1.0-or-later` and `gpl-1.0` would have the same category.",0,0,0,0.983213186264038,0.9934791326522828,0.9869972467422484,0.0,accept,unanimous_agreement
1675069355,7131,"sorry, i missed that `licenseclassifier` uses same license for `gpl-2.0-only` and `gpl-2.0-or-later`. thank you for the clarification!",-1,-1,-1,0.8435397744178772,0.9779734015464784,0.9654889106750488,-1.0,accept,unanimous_agreement
1675075638,7131,let's add a new variable for the updated license name to avoid renaming the license if we don't find that license in the `mapping` [code block] see [a link],0,0,0,0.9879024624824524,0.9906733632087708,0.9954918026924132,0.0,accept,unanimous_agreement
1675875705,7131,i also performed additional space and spelling normalizations and added many new mappings from [a link] i need to fix integration tests.,0,0,0,0.9868593215942384,0.9874606728553772,0.9946154952049256,0.0,accept,unanimous_agreement
1677271669,7131,you can use `mage test:updategolden` command.,0,0,0,0.9864488244056702,0.9912816286087036,0.9956462979316713,0.0,accept,unanimous_agreement
1689473152,7131,can you add comment about this case?,0,0,0,0.9871767163276672,0.9902215003967284,0.9932023882865906,0.0,accept,unanimous_agreement
1689473463,7131,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1689477916,7131,iiuc licenses are already normalized. do we need this?,0,0,0,0.9877633452415466,0.9910261034965516,0.9922877550125122,0.0,accept,unanimous_agreement
1689514703,7131,can we use this function here? [a link],0,0,0,0.9882247447967528,0.9895780086517334,0.996134638786316,0.0,accept,unanimous_agreement
1689516782,7131,i didn't find why we use `*-only` and `*-or-later` licenses here,0,0,0,0.9840668439865112,0.9849004745483398,0.9875147342681884,0.0,accept,unanimous_agreement
1689546604,7131,"we do not check all fields for os packages: [a link] therefore, there is no point in updating the os packages for the files `pkg/fanal/test/integration/testdata/goldens/packages/*.json.golden`.",0,0,0,0.9837371706962584,0.993922770023346,0.9944401979446412,0.0,accept,unanimous_agreement
1690147476,7131,i added a comment.,0,0,0,0.9832298159599304,0.9690238833427428,0.975155234336853,0.0,accept,unanimous_agreement
1690147917,7131,i also added a comment.,0,0,0,0.985877513885498,0.9822585582733154,0.971808671951294,0.0,accept,unanimous_agreement
1690151711,7131,the `license` from `normalizekeyandsuffix` is only used for the following assertion with the `panic` error. i added some comemnts to make it more explicit. the check could be made in unit test but it means having `mapping` public.,0,0,0,0.9895012974739076,0.9951226115226746,0.9948334693908693,0.0,accept,unanimous_agreement
1690155105,7131,"i removed the cyclonedx normalization from this pr to reduce the scope. from [a link] that would ideally mean having : - id: ""a valid spdx license id"" - name: ""if spdx does not define the license used, this field may be used to provide the license name"",",0,0,0,0.9882642030715942,0.9919077157974244,0.9950710535049438,0.0,accept,unanimous_agreement
1690157124,7131,this is explained in [a link] where the `apt` copyright has both: - license: gplv2+ interpreted as gpl-2.0-or-later - /usr/share/common-licenses/gpl-2 interpreted as gpl-2.0-only,0,0,0,0.9872708320617676,0.991994857788086,0.9954547882080078,0.0,accept,unanimous_agreement
1690157389,7131,i reverted those changes.,0,0,0,0.9696878790855408,0.9407567977905272,0.959586262702942,0.0,accept,unanimous_agreement
1690732621,7131,"i think i understand your idea - you want to check the newly added licenses (from another pr later). i think we don't need to do this check every time we start trivy. you have added so many licenses, so i am not sure that many licenses will be added later. maybe a comment before `mapping` to the instructions for the new licenses will be enough. wdyt?",0,0,0,0.8578526973724365,0.7460349798202515,0.8455409407615662,0.0,accept,unanimous_agreement
1690732943,7131,got it! thanks,1,1,1,0.9877667427062988,0.9833373427391052,0.996517539024353,1.0,accept,unanimous_agreement
1690785165,7131,"sorry, i confused you a little. `containerd` tests use full files. i have updated these golden files in [a link]",-1,-1,-1,0.9880809783935548,0.9918689727783204,0.9767370820045472,-1.0,accept,unanimous_agreement
1690785882,7131,can you take a look?,0,0,0,0.9862033128738404,0.9826734662055968,0.992240309715271,0.0,accept,unanimous_agreement
1693338523,7131,fixed in latest commit.,0,0,0,0.9848797917366028,0.9891290068626404,0.9930731654167176,0.0,accept,unanimous_agreement
1693342194,7131,"especially with latest commit with the version regular expression, it's becoming quite difficult to make sure to only add standardized keys. i added an `invalidmappingkeys` used in test and which might also be used later if adding new mappings from cli or other mean becomes possible.",0,0,0,0.5069916844367981,0.972360908985138,0.8826010227203369,0.0,accept,unanimous_agreement
1698132425,7131,looks like we don't need this function anymore and we can just put everything in the map right away,0,0,0,0.9654881358146667,0.9672278761863708,0.9725172519683838,0.0,accept,unanimous_agreement
1698170491,7131,i'm not sure i understand where we need this. can you add an example in the comment?,-1,-1,0,0.6096854209899902,0.5580856800079346,0.727617621421814,-1.0,accept,majority_agreement
1698178116,7131,i think this is a redundant test. we see this function working in `testparseapkinfo`.,0,0,0,0.9833498001098632,0.9866586327552797,0.970407247543335,0.0,accept,unanimous_agreement
1698186399,7131,"what if we move this function to the test. to get `mapping`, we can create a function like [a link] for secrets.",0,0,0,0.9867144227027892,0.9912739396095276,0.991211473941803,0.0,accept,unanimous_agreement
1698190502,7131,i tried to avoid using regex if possible. maybe we can avoid using this regex here,0,0,0,0.8935456871986389,0.9789624810218812,0.98240464925766,0.0,accept,unanimous_agreement
1699888251,7131,invalidmappingkeys no more used in latest commit.,0,0,0,0.9021864533424376,0.9825426340103148,0.986250638961792,0.0,accept,unanimous_agreement
1699888746,7131,testlaxsplitlicense was moved to normalize_test in latest commit.,0,0,0,0.9890944361686708,0.994577169418335,0.9935398697853088,0.0,accept,unanimous_agreement
1699889829,7131,normalize_test is now in package licensing to use internal mapping and functions.,0,0,0,0.9891754984855652,0.993960738182068,0.9950008988380432,0.0,accept,unanimous_agreement
1699900800,7131,the many version variations are in normalize_test. most of the mappings in current trivy version or in [a link] are because of slight variations in the way the version is declared in the license. so this regexp allows to: 1. greatly limit the number of mappings 2. avoid missing version mappings this regexp is strict by checking only version suffixes.,0,0,0,0.9871920347213744,0.9927873015403748,0.9915750622749328,0.0,accept,unanimous_agreement
1699958786,7131,"done in latest commit, even if i am not sure it is more readable that way.",0,0,0,0.9773082137107848,0.8833460807800293,0.9897711277008056,0.0,accept,unanimous_agreement
1722843523,7131,can you add field names for better readability in these tests? e.g.: [code block],0,0,0,0.9870184659957886,0.9916187524795532,0.995426595211029,0.0,accept,unanimous_agreement
1741052287,7131,field names have been added in last commit.,0,0,0,0.987792193889618,0.993195414543152,0.9917203187942504,0.0,accept,unanimous_agreement
918865031,2490,"`pre-commit ` is developer helper, like `golangci-lint`. i am not sure that we need to add instruction to docs.",0,0,0,0.9678133130073548,0.9763725399971008,0.987478733062744,0.0,accept,unanimous_agreement
918867169,2490,`trivy` repository has many test files with vulnerabilities. scan result will always return exit code 1 for these files. i think we can only select 1 file.,0,0,0,0.9829455614089966,0.9668169021606444,0.9836033582687378,0.0,accept,unanimous_agreement
918933284,2490,"not sure if there is misunderstanding. this does not scan the trivy repo itself. (`.pre-commit-hooks.yaml` is not the same as the `.pre-commit-config.yaml`) it is the hook definition other users can reference in their pre-commit hook config for their repo. one ""less opinionated"" way might be to drop the `.` and let user specify this in the users hook config in the `args` block when the reference the `trivyfs` hook can you explain what you mean by that",0,0,0,0.917773425579071,0.984950065612793,0.8101149797439575,0.0,accept,unanimous_agreement
918933337,2490,"i thought as developer if i wanted to know on how to get started integrating trivy as a pre-commit hook i would look in the ""getting started / installation"" section",0,0,0,0.9710529446601868,0.9836844205856324,0.9828999638557434,0.0,accept,unanimous_agreement
919637146,2490,sorry for misleading you. yesterday i made a mistake with the logic of using `pre-commit`. thanks for help me understand.,-1,-1,-1,0.9885641932487488,0.992786943912506,0.9755463600158693,-1.0,accept,unanimous_agreement
919637269,2490,now i understand. you're right. this is a good place for it.,1,1,1,0.9714295864105223,0.94990736246109,0.9568720459938048,1.0,accept,unanimous_agreement
919655668,2490,"do we need this hook? i think users will only use `trivyfs` hook. what do you think? p.s. i tried to use this hook but can't set `path` to `args`. i got errors. e.g.: `fatal multiple targets cannot be specified` when: [code block] `fatal unknown command ""fs ."" for ""trivy""` when: [code block]",0,0,0,0.9214937090873718,0.9862651228904724,0.981486976146698,0.0,accept,unanimous_agreement
919660559,2490,what if we add information about the possibility of using [a link]? for example: [code block],0,0,0,0.9857293367385864,0.9934452772140504,0.9940827488899232,0.0,accept,unanimous_agreement
919756075,2490,"yeah, i also misread something in the pre-commit docs, the reason why it works for the `trivyfs` hook but not the `trivy` one is that i configured `trivyfs` with [a link] `: false` pre-commit per default will not check all the files but only the staged one, therefore i think you got the error `fatal multiple targets cannot be specified` because pre-commit executed trivy like this: `trivy fs . staged-file1.txt staged-file2.txt` i'll remove the ""plain hook"" for now as it makes only sense if you can execute a command allows the appending of multiple files to check",0,0,0,0.6750412583351135,0.961910605430603,0.9778347611427308,0.0,accept,unanimous_agreement
921057037,2490,i think it should be said that all flags work.,0,0,0,0.9826404452323914,0.9752062559127808,0.9812410473823548,0.0,accept,unanimous_agreement
1728448015,7336,we need to add info when we use `custom license` in docs and `license name`/`log message`,0,0,0,0.9891400337219238,0.9946202039718628,0.9953439831733704,0.0,accept,unanimous_agreement
1728449415,7336,add new field in `rpc` package.,0,0,0,0.9879058599472046,0.992139995098114,0.9959397315979004,0.0,accept,unanimous_agreement
1728452246,7336,we use `file://` prefix in python. what if we create constants for these prefixes?,0,0,0,0.9877126812934875,0.9845543503761292,0.993691086769104,0.0,accept,unanimous_agreement
1728453667,7336,we might want to add the first few words of the license text to the `name`.,0,0,0,0.989170253276825,0.9899125695228576,0.9927122592926024,0.0,accept,unanimous_agreement
1728500105,7336,"if agrees too, i'll add it. i thought about filtering by `custom license`, but maybe it doesn't matter",0,0,0,0.9803778529167176,0.9879388809204102,0.9901927709579468,0.0,accept,unanimous_agreement
1730884092,7336,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1730884287,7336,i hope i done it,1,0,1,0.5809788107872009,0.5238195657730103,0.9379848837852478,1.0,accept,majority_agreement
1730884865,7336,)) ![a link],0,0,1,0.555858850479126,0.952575147151947,0.7535579204559326,0.0,accept,majority_agreement
1731078380,7336,looks like we can skip this change,0,0,0,0.9830633997917176,0.984865427017212,0.9886664152145386,0.0,accept,unanimous_agreement
1731096814,7336,this change results the versions of `protoc-gen-go` for `cache/` and `common` to the same version. it was build automatically,0,0,0,0.9881278872489928,0.9955325126647948,0.9951071739196776,0.0,accept,unanimous_agreement
1731102208,7336,removed this update for this pr),0,0,0,0.9702816605567932,0.9789825677871704,0.9946931004524232,0.0,accept,unanimous_agreement
1731109957,7336,i thought about `custom license` again. this may not be clear to users. what if we use the name `incomparable license`/`unmatched license` this means that we can't compare license text with known trivy licenses and therefore store license as text. cc.,0,0,0,0.9870712161064148,0.9743618965148926,0.9779382944107056,0.0,accept,unanimous_agreement
1741735478,7336,"i saw some places calling them ""custom licenses"", so i don't think it's that bad. [a link] [a link] [a link] or ""non-standard"" or something like that. `incomparable license`/`unmatched license` are also unclear what these did not match.",0,-1,0,0.5811843276023865,0.5265212655067444,0.8994081616401672,0.0,accept,majority_agreement
1743122000,7336,"nit: since this is ""detectedlicense"", `text` looks enough. [code block]",0,0,0,0.981295108795166,0.9691462516784668,0.9937340617179872,0.0,accept,unanimous_agreement
1743122111,7336,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1743353772,7336,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1743353908,7336,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1650330692,6993,"for beauty and sameness: maybe we can move this log to the ""clear"" function (like for ""vuln-db"", ""java-db"" and ""checkbundle"")",1,0,0,0.9069291949272156,0.6434059143066406,0.9863173961639404,0.0,accept,majority_agreement
1650340528,6993,perhaps we can mark this flag as `removed`?,0,0,0,0.987903654575348,0.9943386912345886,0.9898383617401124,0.0,accept,unanimous_agreement
1650368366,6993,what do you think about short name? [code block],0,0,0,0.9852017760276794,0.9909630417823792,0.9774905443191528,0.0,accept,unanimous_agreement
1650374283,6993,we say about removing cache**s**. i think it is better to use `-all` flag here. [code block],0,0,0,0.9850083589553832,0.9893486499786376,0.9930437803268432,0.0,accept,unanimous_agreement
1650374857,6993,if you will use `-all` flag. [code block],0,0,0,0.9891921877861024,0.9934553503990172,0.995732605457306,0.0,accept,unanimous_agreement
1650376355,6993,we can use separate flags to remove dbs: [code block],0,0,0,0.9883956909179688,0.9936196208000184,0.9956719875335692,0.0,accept,unanimous_agreement
1650381999,6993,i'm not sure i understand why this was necessary. would removing this break gitlab integration?,0,-1,-1,0.5269749760627747,0.5152767896652222,0.5624945163726807,-1.0,accept,majority_agreement
1650411084,6993,"now, `--clear-cache` is actually just removing fanal cache (scan cashe) and not equivalent to `--all`. that's one of the reasons i want to delete `--clear-cache`.",0,0,0,0.9847598671913148,0.9835696816444396,0.9916368126869202,0.0,accept,unanimous_agreement
1650412054,6993,"similar to [a link] `--reset` is not just removing databases, but removing all caches now. it's equivalent to `--all`.",0,0,0,0.987261950969696,0.9936023354530334,0.9935863614082336,0.0,accept,unanimous_agreement
1650414824,6993,"the cache is based on image id and will not be used even when the same tag is used for different images, like the comment says. in other words, the comment is wrong and i believe we don't need `--clear-cache` here.",0,0,0,0.8681281805038452,0.989648938179016,0.9888691902160645,0.0,accept,unanimous_agreement
1650419223,6993,fixed in [a link],0,0,0,0.98800128698349,0.9866787791252136,0.9950093030929564,0.0,accept,unanimous_agreement
1650419449,6993,i also added `--all`. [a link],0,0,0,0.988135576248169,0.9829665422439576,0.9956080317497252,0.0,accept,unanimous_agreement
1650420363,6993,what is your suggestion? `suggested change` looks identical to me. do you mean `-a` or something similar?,0,0,0,0.9779540300369264,0.986262321472168,0.994598150253296,0.0,accept,unanimous_agreement
1650422488,6993,it will be a breaking change as a command with `--light` will abort. i want to remove it separately. we probably need another announcement for the breaking change.,0,0,0,0.9751986265182496,0.9876027703285216,0.9813133478164672,0.0,accept,unanimous_agreement
1650430010,6993,"agree. i think log messages are more of a user interface feature, so i moved them under `commands/clear`. [a link]",0,0,0,0.9655216932296752,0.9747408628463744,0.9736417531967164,0.0,accept,unanimous_agreement
1650432123,6993,got it!,1,1,1,0.9387748837471008,0.851534366607666,0.9894996285438538,1.0,accept,unanimous_agreement
1650437739,6993,hm... looks like i saved suggestion incorrectly. yes. `-a` is usual shorthand for `--all` flag,0,0,0,0.9594019651412964,0.8683957457542419,0.9011387825012208,0.0,accept,unanimous_agreement
1650442880,6993,"yeah. i know this, but i doubted correctness of comment. thanks that clarified this for me.",1,1,1,0.9588223099708556,0.492435485124588,0.9880498051643372,1.0,accept,unanimous_agreement
1650448625,6993,right. but this is db page. i think this page should say how to remove only dbs (instead of removing all caches).,0,0,0,0.984172821044922,0.9805593490600586,0.982956886291504,0.0,accept,unanimous_agreement
1650452814,6993,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1650454586,6993,"oh, yes. you're right. i just replaced the existing flag (`--reset`) with the equivalent one (`--all`), but we now have better flags to remove dbs. thanks.",1,1,1,0.9661240577697754,0.9880040884017944,0.9739271402359008,1.0,accept,unanimous_agreement
1650551153,6993,"add new page to `mkdocs.yml`, please",0,0,0,0.9877507090568542,0.9913909435272216,0.9945946335792542,0.0,accept,unanimous_agreement
1650556998,6993,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
1650559947,6993,looks like it should be before `reset` flag.,0,0,0,0.9870882034301758,0.9916679263114928,0.9887657165527344,0.0,accept,unanimous_agreement
1650675420,6993,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1650675866,6993,thanks. i was confused. fixed in [a link],-1,1,1,0.652803897857666,0.9782574772834778,0.9610034823417664,1.0,accept,majority_agreement
1650675995,6993,fixed in [a link],0,0,0,0.98800128698349,0.9866787791252136,0.9950093030929564,0.0,accept,unanimous_agreement
1764465601,7526,just to make sure i understand correctly - `closed` is needed to check `github.event.pull_request.merged`? [a link],0,0,0,0.9863392114639282,0.9923118948936462,0.9940582513809204,0.0,accept,unanimous_agreement
1764483171,7526,"i think we need to say about `helm` in branch name, eg: [code block]",0,0,0,0.9873502850532532,0.9900858402252196,0.9907329082489014,0.0,accept,unanimous_agreement
1764486203,7526,"can we add a comment about this case? iiuc this work will be started after pushing a new tag, right?",0,0,0,0.9786267280578612,0.990799069404602,0.994721293449402,0.0,accept,unanimous_agreement
1764486720,7526,will be great to add comments for other jobs. this will make it easier to understand this workflow,1,1,1,0.9264988899230956,0.8758761882781982,0.9764928817749025,1.0,accept,unanimous_agreement
1764598161,7526,"yes, i keep the default types and add `closed` for pr merged",0,0,0,0.9889096617698668,0.9875873923301696,0.995242714881897,0.0,accept,unanimous_agreement
1764615213,7526,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1764615797,7526,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1805881744,7526,what do you think about using [a link] you can get [a link] also you can [a link],0,0,0,0.9820284843444824,0.9825894832611084,0.9897993803024292,0.0,accept,unanimous_agreement
1805882991,7526,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
1805884457,7526,it seems like overwriting the versions in `jsondata` and writing this yaml would be more reliable. wdyt?,0,0,0,0.9857046604156494,0.97899067401886,0.9891579151153564,0.0,accept,unanimous_agreement
1805886332,7526,it might make sense to write about change in `helm` version as well.,0,0,0,0.9864566326141356,0.9924620985984802,0.9900850057601928,0.0,accept,unanimous_agreement
1805888348,7526,`version` and `appversion` are default fields - [a link] let's create struct. something like that: [code block],0,0,0,0.9871150255203248,0.993237853050232,0.9950660467147828,0.0,accept,unanimous_agreement
1805891682,7526,"i may be wrong, but i remember that the events for merging a pr by default and merging using `merge queue` may be different. does this work correctly?",0,0,0,0.9106653928756714,0.9740513563156128,0.9231904745101928,0.0,accept,unanimous_agreement
1810000231,7526,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1810000668,7526,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1810036710,7526,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1810247129,7526,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1810292777,7526,"i tried several ways to overwriting `chart.yaml`. martshaling/unmarshaling doesn't allow to keep order of unknown fields. if we create a custom struct we can miss something in the future. using a specific library ([a link] doesn't allow to save only `chart.yaml`, it creates all helm files. so `sed` is the simplest way to update the yaml file. wdyt?",0,0,0,0.9773409366607666,0.9640918970108032,0.9837485551834106,0.0,accept,unanimous_agreement
1810467204,7526,"thanks for checking this out. then let's use `sed`, i don't mind :thumbs_up:",1,1,1,0.9119636416435242,0.991607666015625,0.9951881170272828,1.0,accept,unanimous_agreement
1811205774,7526,"yep, it works: [a link] for the simplest job: [a link]",0,0,0,0.9376800656318665,0.9091131687164308,0.7250118255615234,0.0,accept,unanimous_agreement
1811866365,7526,just for info: you can use `t.tempdir()` to avoid having to do `defer os.remove(tempfile.name())`.,0,0,0,0.985323965549469,0.9871886372566224,0.9942378997802734,0.0,accept,unanimous_agreement
1811869348,7526,`ioutil` is deprecated - [a link] use `os.writefile`,0,0,0,0.9878262877464294,0.993996262550354,0.9920585751533508,0.0,accept,unanimous_agreement
1811878575,7526,should helm tests be started if this workflow has been changed?,0,0,0,0.9857414960861206,0.9925866723060608,0.9943295121192932,0.0,accept,unanimous_agreement
1811882551,7526,i don't think we need to start testing if the pr has been merged.,0,0,0,0.9759128093719482,0.9164755344390868,0.9798554182052612,0.0,accept,unanimous_agreement
1811886043,7526,ubuntu-24.04 is currently `latest` version of `ubuntu` runner. can we bump runner version (maybe in another pr),0,0,0,0.9841512441635132,0.9943324327468872,0.9949971437454224,0.0,accept,unanimous_agreement
1814186768,7526,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1814187511,7526,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1814189960,7526,"i thought that yes. trivy helm chart depends on trivy image with a specific tag. if this image is removed, we shouldn't publish a new chart. does it wrong point?",0,0,0,0.9422481060028076,0.9678840041160583,0.9766258001327516,0.0,accept,unanimous_agreement
1814194186,7526,"done [a link] i've updated it here, because another actions already are bumped os version up (or using `-latest`).",0,0,0,0.988865315914154,0.9903478622436525,0.9954925775527954,0.0,accept,unanimous_agreement
1814244028,7526,i'm unsure about it. in any case we can see the result for created pr.,-1,0,0,0.8356532454490662,0.6970455646514893,0.9179438948631288,0.0,accept,majority_agreement
1814489243,7526,hm... i forgot about this case. thanks for reminding me!,1,1,1,0.9603252410888672,0.8018491864204407,0.9905449151992798,1.0,accept,unanimous_agreement
1308799708,5062,"spdx mixes multiple types. in the example below, tye type of `elasticsearch` is `bitnami`, while the type of `apm-agent` is `maven`. if we force it to `bitnami`, it will not detect vulnerabilities in the java dependencies. [code block] the easiest approach is splitting an application into two applications, `bitnami` and other types. i'm thinking about where and how we should do that.",0,0,0,0.9786120653152466,0.9851598143577576,0.9729831218719482,0.0,accept,unanimous_agreement
1308889950,5062,"we're just forcing it for the main application, right? i mean, we're not overwriting the type for all the associated libraries.",0,0,0,0.9684593677520752,0.985756814479828,0.9883102178573608,0.0,accept,unanimous_agreement
1309770274,5062,"no, it overwrites all packages included in spdx besides the main package like elasticsearch. ![a link]",0,0,0,0.9121969938278198,0.9592655301094056,0.9411334991455078,0.0,accept,unanimous_agreement
1310027602,5062,"i see.. to be honest i don't know how we should parse relationships such as these ones... [code block] ... where it basically says ""_elasticsearch_ contains _jar_ which contains _co.elastic.apm:apm-agent_"". - should we consider both _elasticsearch_ & _jar_ applications? - should we _jar_ a library package of _elasticsearch_? - is _co.elastic.apm:apm-agent_ a library package of _elasticsearch_ or _jar_?",0,0,0,0.6240400075912476,0.8774598240852356,0.6705880761146545,0.0,accept,unanimous_agreement
1310464588,5062,"yes, the bitnami package and the java packages are different from the purl perspective. i opened a pr. could you take a look? it works in my local environment. if you don't mind i can directly push the commits to your branch. [a link]",0,0,0,0.9577815532684326,0.9576351642608644,0.9901956915855408,0.0,accept,unanimous_agreement
1311141663,5062,"thanks so much! i just merged! i'll continue my work based on that, i really appreciate it",1,1,1,0.9929046034812928,0.9958611130714417,0.996921181678772,1.0,accept,unanimous_agreement
1311292800,5062,looks like we can remove that.,0,0,0,0.9840442538261414,0.985066056251526,0.98868328332901,0.0,accept,unanimous_agreement
1311297737,5062,what if we move this into [a link],0,0,0,0.985333263874054,0.9903837442398072,0.990992784500122,0.0,accept,unanimous_agreement
1311313453,5062,"we [a link] `root package => application` case. but looks like we also need to remove tihs `application` from `orphanpkgs`. correct me, if i have missed something.",0,0,0,0.9766945838928224,0.9806921482086182,0.9915388226509094,0.0,accept,unanimous_agreement
1311339790,5062,done at [a link],0,0,0,0.9888259172439576,0.9870756268501282,0.9953743815422058,0.0,accept,unanimous_agreement
1311341243,5062,no cons on my side,0,0,0,0.8676225543022156,0.9620561003684998,0.954862892627716,0.0,accept,unanimous_agreement
1311341317,5062,could you address this?,0,0,0,0.9875240325927734,0.9907281398773192,0.9936742782592772,0.0,accept,unanimous_agreement
1311345270,5062,"sure, i'll take care.",0,0,0,0.6398820281028748,0.9799225330352784,0.77176833152771,0.0,accept,unanimous_agreement
1311379992,5062,we use `createpackagespdxidentifiermap` function 2 times: - [a link] - [a link] maybe we can only use `packagespdxidentifiermap`.,0,0,0,0.988636553287506,0.9951026439666748,0.9918863773345948,0.0,accept,unanimous_agreement
1311431593,5062,"they are for different purposes. we need to hold a whole mapping between spdx ids and packages since the same spdx id appears repeatedly, while orphan packages will be deleted gradually. any ideas on merging them?",0,0,0,0.983071744441986,0.938027024269104,0.990961253643036,0.0,accept,unanimous_agreement
1311439551,5062,"the analysis result is sorted later, so we don't have to do that in each analyzer. [a link] but then i just remember we could use `sort()`. fixed in [a link]",0,0,0,0.9848110675811768,0.9854259490966796,0.9946088790893556,0.0,accept,unanimous_agreement
1311442682,5062,i've removed `application` only when it has dependencies. [a link],0,0,0,0.9882519841194152,0.9717435240745544,0.9956258535385132,0.0,accept,unanimous_agreement
1311445492,5062,oh... right. we need list of all spdx ids. sorry for confusing.,-1,-1,-1,0.9901698231697084,0.9924778342247008,0.991551399230957,-1.0,accept,unanimous_agreement
1311511353,5062,"we need file paths. otherwise, users cannot understand where the package comes from. i remember the bitnami sbom used to include file paths. any reasons for removing file paths from sbom?",0,0,0,0.9857966303825378,0.9371477365493774,0.9922991394996644,0.0,accept,unanimous_agreement
1311612499,5062,i've set the component path. it is much better than empty. we can talk about it later. [a link],0,0,1,0.8928306102752686,0.6360828876495361,0.7381660342216492,0.0,accept,majority_agreement
1311699709,5062,it seems the main reason why we removed the `packages[].files[]` array is that we found issues validating the generated spdx files using the spdx validator below: - [a link] the error was: [code block] i'm trying to figure out why we were including the files information under `packages[].files[]` instead of `files[]` as it is done in this official example: - [a link] i'll let you know when i collect more information.,0,0,0,0.9655499458312988,0.9925946593284608,0.9823585152626038,0.0,accept,unanimous_agreement
1311701586,5062,apparently this is sth that was already discussed at [a link],0,0,0,0.987692654132843,0.985988199710846,0.992087185382843,0.0,accept,unanimous_agreement
1311707990,5062,"why this continue? i mean, why not iterating through `app.libraries` when type is `bitnami`?",0,0,0,0.9772704243659972,0.9862461090087892,0.9766606688499452,0.0,accept,unanimous_agreement
1311732198,5062,"yes, spdx added a breaking change, and we fixed that. thus, i think you can include files in spdx. [a link] [a link]",0,0,0,0.9792280197143556,0.9866490960121156,0.9870738983154296,0.0,accept,unanimous_agreement
1311754093,5062,"yes, after the fix we continued facing issues with the validator. it complained about `filesanalyzed` being set to `true` while missing the package verification code: [code block] see: - [a link] - [a link] and.. if we force `filesanalyzed` to `false` we find the error below: [code block] spec: [a link]",0,0,0,0.7664423584938049,0.985870361328125,0.988645315170288,0.0,accept,unanimous_agreement
1311785223,5062,"if you apply these changes to the `elasticsearch.spdx.json`, you'll have a spdx file that's considered valid by [a link] [code block]",0,0,0,0.9876651167869568,0.9912983775138856,0.9956621527671814,0.0,accept,unanimous_agreement
1311828269,5062,"added a comment. [a link] `application` in trivy represents a group of packages, such as package-lock.json, like a project. it doesn't make sense to set file paths to all the packages in package-lock.json. bitnami spdx aggregates packages and doesn't have the respective file paths now. then, we just set file paths to the application level. however, artifacts like jar files are located in the image separately. they all have different file paths, and those file paths are set to `application.libraries[].filepath` in trivy. in short, - application.filepath: a file path for aggregated packages - application.libraries[].filepath: a file path for artifacts ideally, we should determine that from `application.type`, but i put that in our backlog. i know the design is not straightforward now, so i'm planning to refactor it. it is in its early stages. we can improve this feature step by step.",0,0,0,0.9762251377105712,0.9940318465232848,0.9860422015190125,0.0,accept,unanimous_agreement
1311833784,5062,thanks for the information. we'll look into it.,1,0,1,0.8088781833648682,0.5639051795005798,0.9052070379257202,1.0,accept,majority_agreement
1312521092,5062,"can you please take a look? if we confirm the problem, we should create an issue and fix it.",0,0,0,0.9836429953575134,0.9810117483139038,0.9928101301193236,0.0,accept,unanimous_agreement
1312584601,5062,i checked our implementation: we don't use `filesanalyzed` (always `false`) and `packageverificationcode` fields. we add files to [a link] and use them in [a link]. that is why we have valid format. but perhaps it looks more correct to use `fileanalyzed`. perhaps we need to consider using this field.,0,0,0,0.9774031043052672,0.9910386204719543,0.9895402789115906,0.0,accept,unanimous_agreement
1312628585,5062,"our spdx is valid. i guess you build sbom on top of our sbom, right?",0,0,0,0.9835980534553528,0.988300323486328,0.9913437366485596,0.0,accept,unanimous_agreement
1312953979,5062,"we obtain warnings in the [a link] such as the ones below with your spdx: [code block] yes, we use your sbom to build our spdx files.",0,0,0,0.989465594291687,0.994345724582672,0.9949761629104614,0.0,accept,unanimous_agreement
1502164957,6176,nit: table has `plan json` -> `plan snapshot` order. but below `plan snapshot` -> `plan json` order. it's a little difficult to read,0,0,0,0.973863959312439,0.6281675100326538,0.9427970051765442,0.0,accept,unanimous_agreement
1502168097,6176,this is broken link.,0,-1,-1,0.8688876628875732,0.8327928781509399,0.5516332387924194,-1.0,accept,majority_agreement
1502171493,6176,we have similar info in `coverage/iac/terraform/`. maybe we can just add link here?,0,0,0,0.9870720505714417,0.993915855884552,0.9932780861854552,0.0,accept,unanimous_agreement
1502213991,6176,correct me if i am wrong. [code block],0,0,0,0.9314318895339966,0.8894489407539368,0.7919968962669373,0.0,accept,unanimous_agreement
1502218397,6176,iiuc this function is needed to re-generate tfplan files. can you add a comment on this? this will make this code easier to maintain,0,0,0,0.9796903133392334,0.9893895983695984,0.9850329756736756,0.0,accept,unanimous_agreement
1502269309,6176,"that's right, i couldn't find the link to which it should be changed to",0,0,0,0.976572334766388,0.9797959327697754,0.982348620891571,0.0,accept,unanimous_agreement
1502307734,6176,i was sure we had moved them. but it seems i am wrong - [a link] do you remember why we removed these examples? perhaps defsec (or another repo) contains these examples?,0,0,0,0.6850847601890564,0.9056130051612854,0.9212660193443298,0.0,accept,unanimous_agreement
1503672143,6176,"is it easier if we simply parse the input within trivy and decide if the user has passed in a plan json or a plan snapshot? i feel having to know which kind of terraform plan scanner to use is a little overwhelming for the user as compared to just ""scanning the plan"" and letting trivy decide what the input is. another example would be: today we scan terraform, without the user telling us if it's hcl v1 or v2. wdyt?",0,0,0,0.5890023708343506,0.5964609980583191,0.5769988894462585,0.0,accept,unanimous_agreement
1503674958,6176,i wasn't able to run this target. see below for details: [code block],0,0,0,0.8624656200408936,0.9587271213531494,0.9750939011573792,0.0,accept,unanimous_agreement
1503700173,6176,"it seems we need to know the size as `zip.newreader` expects it, what if we use [a link] and get the size via something like the following? [code block] just trying to see if we can avoid reading the entire plan snapshot into memory.",0,0,0,0.985137104988098,0.991198480129242,0.990889847278595,0.0,accept,unanimous_agreement
1503717871,6176,another idea is if we can write a new function that like the `newreadseekerat()` but also returns the size as well.,0,0,0,0.9878538846969604,0.9925683736801147,0.9888691902160645,0.0,accept,unanimous_agreement
1504533119,6176,"[a link] copies the data from `io.reader` to a buffer, so there is no way to avoid reading the file completely, or am i wrong?",0,0,0,0.8504339456558228,0.9637330174446106,0.9888460040092468,0.0,accept,unanimous_agreement
1504537176,6176,"trivy automatically detects the type of configuration, so the user does not need to worry about selecting the type of scanner. this page describes the trivy coverage.",0,0,0,0.9777496457099916,0.9889320135116576,0.9780293107032776,0.0,accept,unanimous_agreement
1504548240,6176,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1504550139,6176,i've updated the link to `coverage`. [a link],0,0,0,0.9882524609565736,0.9546732902526855,0.9947788715362548,0.0,accept,unanimous_agreement
1504553854,6176,"thank you, fixed [a link]",1,1,1,0.8785097002983093,0.9435728788375854,0.8721610307693481,1.0,accept,unanimous_agreement
1504556651,6176,i have aws set to localstack by default. fixed it [a link],0,0,0,0.9855761528015136,0.9840054512023926,0.9910552501678468,0.0,accept,unanimous_agreement
1504673197,6176,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1505234552,6176,it's a little better in my testing: [code block] you can find the results and the benchmark here: [a link],0,0,0,0.8531277179718018,0.8856029510498047,0.9791473746299744,0.0,accept,unanimous_agreement
1505307375,6176,sorry i misread this. it makes sense now.,-1,-1,-1,0.9865919947624208,0.9894673228263856,0.9887279272079468,-1.0,accept,unanimous_agreement
1505518591,6176,you don't disable `ryuk` for this test now. is this expected?,0,0,0,0.9849165081977844,0.9905430674552916,0.9941059350967408,0.0,accept,unanimous_agreement
1505522526,6176,i'm not sure: do we need to return `aws_endpoint_url` value after this function completes?,0,0,0,0.9506219029426576,0.92184978723526,0.9160973429679872,0.0,accept,unanimous_agreement
1505525845,6176,what if we take this outside of the function?,0,0,0,0.9658265113830566,0.9837257266044616,0.9863013029098512,0.0,accept,unanimous_agreement
1505543786,6176,environment variable values are valid only within the current process and are not saved after the process is terminated,0,0,0,0.9876732230186462,0.9935396313667296,0.9928763508796692,0.0,accept,unanimous_agreement
1505552031,6176,i don't think this list will be used outside of this function,0,0,0,0.973474383354187,0.9419880509376526,0.9799020290374756,0.0,accept,unanimous_agreement
1505653024,6176,hm... i didn't check this. thanks for new information for me :grinning_face_with_smiling_eyes:,1,1,1,0.969634175300598,0.6184486150741577,0.9951059818267822,1.0,accept,unanimous_agreement
1505654213,6176,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
1505678721,6176,thanks for the research! i found an even more effective way [a link],1,1,1,0.9891108870506288,0.9831386804580688,0.9917259216308594,1.0,accept,unanimous_agreement
1506901886,6176,can we rename this to tfjson to avoid confusion with the stdlib package? [code block],0,0,0,0.9891669750213624,0.9954975843429564,0.9958940744400024,0.0,accept,unanimous_agreement
1506934388,6176,"how about reusing `dir` and `name` vars to reduce test code, since they are called the same anyway.",0,0,0,0.9864278435707092,0.9925025701522828,0.9910591244697572,0.0,accept,unanimous_agreement
1507088111,6176,wouldn't this cause confusion with the json configuration syntax? [a link],0,0,0,0.9735826253890992,0.9852519035339355,0.9878581762313844,0.0,accept,unanimous_agreement
1507282427,6176,"checking the path of a remote module is not reliable, as the result may depend on the order in which the tests are executed. if the module is not in the cache, the path is a reference to the git, otherwise the path to the module is in the cache.",0,0,0,0.9382714033126832,0.981596291065216,0.9868946075439452,0.0,accept,unanimous_agreement
1509554546,6176,"i wasn't able to make this test fail, is it flaky? is there any way to test without the effects of the cache?",-1,-1,0,0.8746636509895325,0.5414785742759705,0.9387578964233398,-1.0,accept,majority_agreement
1510860391,6176,1. clear the cache `rm -rf $tmpdir/.aqua`. 2. comment out the first two test cases so that the test with the remote module is the first. 3. run test: [code block],0,0,0,0.986989200115204,0.99498850107193,0.9931041598320008,0.0,accept,unanimous_agreement
1510863181,6176,"since only the remote module is used in this test case, we only need to verify that the check detected misconfig. i'll update the test",0,0,0,0.9870823621749878,0.990212380886078,0.9940547347068788,0.0,accept,unanimous_agreement
1510872667,6176,"i created an issue in defsec asking to add the ability to skip cache to avoid fluky tests, but the issues are now closed. can we move this issue to trivy?",0,0,0,0.9844478368759156,0.9626882076263428,0.9929279685020448,0.0,accept,unanimous_agreement
1510890224,6176,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1510890641,6176,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
1511857379,6176,"yes please, if it's a small change you can just make a pr without the need to track with an issue.",0,0,0,0.9824602603912354,0.9777456521987916,0.9621395468711852,0.0,accept,unanimous_agreement
286617045,50,"rather than relying on the global in utils, would it make sense to define a `scanoptions` struct that could include the vuln types (for now, maybe more options later) and pass that as a parameter to `scanner.scanimage` and `library.scan`?",0,0,0,0.9889434576034546,0.9955841898918152,0.9917240738868712,0.0,accept,unanimous_agreement
286800910,50,i moved vulntype var and related functions in `pkg/types/scanoptions.go` file,0,0,0,0.9866909980773926,0.9926981329917908,0.9943684935569764,0.0,accept,unanimous_agreement
290612276,50,this space is necessary for new line in markdown.,0,0,0,0.9868254065513612,0.9907812476158142,0.9954560995101928,0.0,accept,unanimous_agreement
290612377,50,same as above,0,0,0,0.9772257208824158,0.965356171131134,0.9918335676193236,0.0,accept,unanimous_agreement
290625149,50,this doesn't make much sense. it is not decided where each lock file is located. e.g. `/myapp/package-lock.json` `xxx-app` is the specific case in my example. [a link],0,0,0,0.9040311574935912,0.963556170463562,0.975494623184204,0.0,accept,unanimous_agreement
291030667,50,fixed it with a `\`,0,0,0,0.9814070463180542,0.9926409125328064,0.9921289682388306,0.0,accept,unanimous_agreement
291030701,50,fixed it with a `\` too,0,0,0,0.9844808578491212,0.9933451414108276,0.991428792476654,0.0,accept,unanimous_agreement
291030812,50,i have deleted this block,0,0,0,0.9793359637260436,0.9745153784751892,0.9940328001976012,0.0,accept,unanimous_agreement
291123118,50,`\` does not seem to work. ![a link],-1,0,-1,0.8962506651878357,0.9058547616004944,0.8515700697898865,-1.0,accept,majority_agreement
291123411,50,"this should also be fixed (os,library).",0,0,0,0.9876798391342164,0.9929198622703552,0.995368480682373,0.0,accept,unanimous_agreement
291123521,50,same as above,0,0,0,0.9772257208824158,0.965356171131134,0.9918335676193236,0.0,accept,unanimous_agreement
291124084,50,"how about `os,library` instead of `all`?",0,0,0,0.9885178804397584,0.9943850040435792,0.993196964263916,0.0,accept,unanimous_agreement
291124898,50,same as above,0,0,0,0.9772257208824158,0.965356171131134,0.9918335676193236,0.0,accept,unanimous_agreement
291428715,50,"`s/(os, library)/(os,library)/` the space between ""os"" and ""library"" should be removed because the later code doesn't trim a space.",0,0,0,0.9856230020523072,0.9941645264625548,0.9918633699417114,0.0,accept,unanimous_agreement
291428741,50,same as above,0,0,0,0.9772257208824158,0.965356171131134,0.9918335676193236,0.0,accept,unanimous_agreement
291428836,50,unnecessary?,0,0,0,0.5867832899093628,0.8331812620162964,0.9245723485946656,0.0,accept,unanimous_agreement
291429249,50,i think that isvulntypeselected is unnecessary because this function is the same with `utils.stringinslice`. is there a reason to need this function?,0,0,0,0.9806578159332277,0.9923118948936462,0.9859991669654846,0.0,accept,unanimous_agreement
291455458,50,i have build errors when keeping this line : [code block] i forgot to un-comment before commit,0,0,0,0.6177898049354553,0.7120470404624939,0.8108989000320435,0.0,accept,unanimous_agreement
291455658,50,"did not know about `utils.stringinslice`, i will delete isvulntypeselected.",0,0,0,0.9243220686912536,0.9890376925468444,0.9933350086212158,0.0,accept,unanimous_agreement
291457228,50,i have uncommented it,0,0,0,0.6564742922782898,0.9635398983955384,0.9933485388755798,0.0,accept,unanimous_agreement
291457262,50,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
291524889,50,you can remove this line.,0,0,0,0.9868996143341064,0.9822648763656616,0.9951104521751404,0.0,accept,unanimous_agreement
291526134,50,"you used `if` block, so the scope has been changed. as a result, this line is already unnecessary.",0,0,0,0.9777672290802002,0.9914717078208924,0.9947552680969238,0.0,accept,unanimous_agreement
291549931,50,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1465503759,5999,using `report.artifactname` instead of `report.metadata.repotags` would miss the image tag.,0,0,0,0.9852141737937928,0.9917826652526855,0.9913661479949952,0.0,accept,unanimous_agreement
1465849215,5999,we aggregate some packages to 1 result - [a link] but we can find path from results.packages.filepath: [code block] maybe we just use filepath for these packages?,0,0,0,0.9880405068397522,0.9954234957695008,0.9935023188591005,0.0,accept,unanimous_agreement
1466138693,5999,"although i agree with you it's an interesting change as it would make the manifest more precise. nonetheless, i think the full `filepath` would be too much to render in github dependency and would bloat the ui. i can do a test with that change if you want and show the results here ? otherwise we could try to extract important values from the `filepath` and adding them to `result.target`, but that seems complex and prone to errors.",0,0,0,0.8655208945274353,0.9461418390274048,0.9481337666511536,0.0,accept,unanimous_agreement
1467215241,5999,"for other languages we already use filepath (filepath is stored in `target`): [code block] and we didn't get issues about ui. yes please. if you have time, check it out.",0,0,0,0.972908079624176,0.9800293445587158,0.631901741027832,0.0,accept,unanimous_agreement
1468095610,5999,"so i have a few things to report: 1. as you pointed out trivy aggregates multiple packages in the same ""app"" (for instance `python` or `node`) into one result. the issue is that in the sbom format, the `source_location` is set at the `manifest` level not at the package level (`resolved` key in sbom format). meaning, if we keep the default trivy aggregation then we have to use only one of all the packages `filepath`. how to define that value is either arbitrary, or we need some sort of heuristic ? 2. in terms of ui it isn't as bloated as i expected, so i think you're right and it's ok to use. ![a link] the `source_location` used in the above screenshot is simply the `filepath` of the last package in `result.packages` so it's not even correct. 3. in the case trivy is scanning an image i think it's still pretty useless to replace the `manifest`'s `source_location` with this `filepath` value and we should instead reference the image's name and tag.",0,0,0,0.9681466221809388,0.9906796813011168,0.9470272064208984,0.0,accept,unanimous_agreement
1469105434,5999,"we have already seen cases where it is necessary to remove aggregation, but this requires large changes and we are not sure about it. i created a small function to get filepath for each package - [a link] can you take a look? this makes sense for ui. but what worries me is case where user only knows that image contains vulnerable package, but doesn't have filepath to find and update that package. it would be great to add filepath somehow. e.g. we can use ` : - ` format for [a link]. is it possible to see `gsbom` file after uploading to github?",-1,0,-1,0.8959400653839111,0.9414369463920592,0.9546775221824646,-1.0,accept,majority_agreement
1469441742,5999,"can you take a look? just had a look, so from the trivy `results` there is still aggregation but the sbom `manifest` is not keeping this aggregation. meaning each package is its own result with its own `source_location`, that seems like a good compromise to me. my assumption is that most people scanning images are in charge of maintaining those, meaning they know what's installed on them and how, so knowing the exact `filepath` of a dependency won't change much. but it's true we could always do ` : - ` although it's going to be super long and i'm not sure how github manifest filter will react to it. i feel like maybe we should ask a broader audience then just the 2 of us for the direction to go, but unsure how and where to ask. yes. from my testing it's not exactly the same sbom file trivy sends to github, but [a link]",0,1,0,0.7863026857376099,0.79915851354599,0.4781470596790313,0.0,accept,majority_agreement
1469477171,5999,hello can you take part in this discussion? perhaps you'll see another idea.,0,0,0,0.9707446098327636,0.928784191608429,0.989054799079895,0.0,accept,unanimous_agreement
1474473178,5999,"could we use ""repodigests"" instead, as that included both the tag and digest? that would address the comment i just put on the pr discussion?",0,0,0,0.9864675402641296,0.9953435063362122,0.9943795800209044,0.0,accept,unanimous_agreement
1476125770,5999,just to confirm using `repodigests` would work i did some testing and it seems to be working fine. each time you scan your image with a new sha it will close all the previously open alerts for that image and only keep the latest version open. but you're still able to see the previously closed alerts by simply using the `is:closed` filter and searching for a specific manifest works fine too.,0,0,0,0.8844068646430969,0.9479940533638,0.5163467526435852,0.0,accept,unanimous_agreement
1476156309,5999,"a mix of suggestion at [a link] and yours would give us the longest form possible storing all information: ` / : : - ` ![a link] i tested it and although it's very long, filtering seems to work too (the `image_hash` is fake). to me this defeats the purpose, and that's why i would advise to only use ` / : : `.",-1,0,0,0.8875240087509155,0.9599478840827942,0.9827610850334167,0.0,accept,majority_agreement
1477059064,5999,"see [a link] i think the drawback of [a link] (each package becoming it's own manifest) would ruin the basic usage of github dependency as it would make filtering by manifest very complex. so i went ahead and pushed the change to use ` / : : `, until we find a better solution.",0,0,0,0.9424524307250975,0.9592875242233276,0.97051739692688,0.0,accept,unanimous_agreement
1477075020,5999,"yeah, showing the package location (while having those disadvantages) will help with investigations about what actually needs to be fixed/updated",0,0,0,0.9806170463562012,0.9788329005241394,0.9697369933128356,0.0,accept,unanimous_agreement
1477075118,5999,why are you doing this rather than just using repodigests directly? mind adding a comment?,0,0,0,0.8665315508842468,0.9840953946113586,0.9917420148849488,0.0,accept,unanimous_agreement
1477604636,5999,"unfortunately, it is not true. we've been seeing a lot of issues with people being confused about where a package is installed. this is because our table format doesn't include the full path. therefore, we always point out that the package path is included in the json report and that they should check the path. i might not be following the conversation., but what if adding file paths in `metadata`? [a link]",-1,-1,-1,0.6575071215629578,0.738049328327179,0.5847620964050293,-1.0,accept,unanimous_agreement
1477656287,5999,do you mean to get format like [a link],0,0,0,0.9860753417015076,0.9788862466812134,0.9936898946762084,0.0,accept,unanimous_agreement
1477774823,5999,"iiuc, it just puts a file path to a key. i'm suggesting we put file paths under the metadata of packages. btw, the line i shared above was wrong. [a link] or i may not understand the problem correctly. i just answered this question. [a link]",0,0,0,0.9346434473991394,0.898714005947113,0.9598835706710817,0.0,accept,unanimous_agreement
1477922786,5999,"`repodigests` looks like ` / : `. whereas `repotag` looks like looks like ` / : `. so if only using `repodigests` it means loosing the ` `. good question, i added a comment.",1,0,1,0.5333662033081055,0.9688602089881896,0.7193668484687805,1.0,accept,majority_agreement
1479587202,5999,i just tested and adding a `metadata` at the package level package: [code block] doesn't change anything in github dependency ui. but i agree at least the user would be able to find the path for each package by parsing the json.,0,0,0,0.9703122973442078,0.9797614812850952,0.9862929582595824,0.0,accept,unanimous_agreement
1480964695,5999,interesting. isn't the metadata shown anywhere?,0,0,0,0.7221584320068359,0.872096598148346,0.7845757603645325,0.0,accept,unanimous_agreement
1482849686,5999,"not that i can see in github dependency ui no, see screenshot below to see how it looks. ![a link]",-1,0,1,0.766505241394043,0.9575406908988952,0.958533525466919,,review,no_majority_disagreement
1483840624,5999,"so user can only get package metadata when [a link], right?",0,0,0,0.9887027740478516,0.9921368360519408,0.993793487548828,0.0,accept,unanimous_agreement
1484010653,5999,"if they use trivy then there's no issue as the user will now be able to find the file path for each package by parsing the json report before sending it to github. but if they use trivy-action then the report is sent automatically and the user doesn't have access to the original report hence he wouldn't be able to parse it. maybe if the user then export it from github, the metadata tag with each package file path will still be there, i'll test that.",0,0,0,0.9752045273780824,0.9894952178001404,0.9893375635147096,0.0,accept,unanimous_agreement
1484092505,5999,"this is what i got from github export to sbom for the same package as in [a link] [code block] as you can see the `metadata` tag doesn't show up in the exported sbom. as this issue only involves `trivy-action` and not `trivy` itself anymore, i think we should continue this discussion once this pr is merged to find a solution for `trivy-action` users at [a link] (i would recommend to add an option for [a link] so that user can easily fetch the report).",0,0,0,0.9738977551460266,0.9889091849327089,0.987799882888794,0.0,accept,unanimous_agreement
1487836399,5999,"i created [a link] to make sure users of `trivy-action` will know where to find the missing details from github dependency. and do you agree with this compromise ? if so, can you review this pr code ?",0,0,0,0.9736983776092528,0.9892534613609314,0.9898955821990968,0.0,accept,unanimous_agreement
1494254313,5999,[a link] [code block],0,0,0,0.987799882888794,0.9876729846000672,0.9952563643455504,0.0,accept,unanimous_agreement
1494263085,5999,"also it might make sense to use the separator `,` (without space) to get a string without spaces.",0,0,0,0.9865959286689758,0.992531955242157,0.991355836391449,0.0,accept,unanimous_agreement
1495210457,5999,can you also update other variables that use `_`?,0,0,0,0.9886411428451538,0.9943228960037231,0.9955838322639464,0.0,accept,unanimous_agreement
1495210628,5999,-durand wdyt about this? does it make sense?,0,0,0,0.9488245248794556,0.9158098101615906,0.9684872031211852,0.0,accept,unanimous_agreement
1497453510,5999,"already done in [a link] i honestly have no opinion on this as having a space there shouldn't break anything, so i left it as it was (but i'm totally ok changing it). is there a particular reason you want to remove the space ? if not, i'd say ""if it ain't broke, don't fix it"".",-1,0,0,0.6749083399772644,0.6523408889770508,0.8742743134498596,0.0,accept,majority_agreement
1498704671,5999,"thanks! is there a particular reason you want to remove the space ? if not, i'd say ""if it ain't broke, don't fix it"". i was worried that this might break something in github and make it harder to parse that string (i'm not sure of the use case or if this would be needed). but if you were told that this is normal, let these spaces remain.",1,1,1,0.6699301600456238,0.8936765789985657,0.9866762757301332,1.0,accept,unanimous_agreement
1558858755,6476,is it possible to remove the old flag and add it as an alias to the new flag? then you don't have to worry about handling two flags [code block],0,0,0,0.9818446636199952,0.9903951287269592,0.9956735968589784,0.0,accept,unanimous_agreement
1559170800,6476,the link should be changed to the trivy repo.,0,0,0,0.9867913722991944,0.990190863609314,0.9957310557365416,0.0,accept,unanimous_agreement
1560394150,6476,nice! yeah that's much simpler to implement.,1,1,1,0.982912540435791,0.9909046292304992,0.9953593611717224,1.0,accept,unanimous_agreement
1571843448,6476,does go always use commit for `github.com/aquasecurity/trivy-checks`? also [a link] released. maybe we can use it right away,0,0,0,0.9850152134895324,0.9927543997764589,0.994513988494873,0.0,accept,unanimous_agreement
1571851917,6476,use commit instead of `main` to avoid breaking the link after an update. also looks like `checks/kubernetes/policies` and `rules/docker/policies` don't exist.,0,0,0,0.9878888726234436,0.9954276084899902,0.994705617427826,0.0,accept,unanimous_agreement
1571855545,6476,looks like we missed `--reset-checks-bundle` here.,0,0,0,0.9737057089805604,0.9912944436073304,0.9888561367988586,0.0,accept,unanimous_agreement
1571866731,6476,"we've added logic for the trivy-db and trivy-java-db tags - #6410. i think users will expect the same logic for ""checks"".",0,0,0,0.985017478466034,0.9900919795036316,0.9944673776626588,0.0,accept,unanimous_agreement
1571871357,6476,also i think we can rename link names [code block],0,0,0,0.9829059839248656,0.984670877456665,0.9945014715194702,0.0,accept,unanimous_agreement
1576905564,6476,"if i understand correctly, you are referring to versioning the bundles? if so, we already have that for checks: [a link] if not, could you explain your idea?",0,0,0,0.9859814643859864,0.9820092916488647,0.9940314888954164,0.0,accept,unanimous_agreement
1577186723,6476,"i meant similar logic - [a link] but we do that for backward compatibility: [a link] i thought about using the same logic for similar flags, but it looks like you were only adding tag (""bundleversion"") for default repository, so those changes might break user's scanning.",0,0,0,0.98300963640213,0.97448992729187,0.9934170246124268,0.0,accept,unanimous_agreement
1578586484,6476,ok can we make that change (if needed) in a separate pr? this pr is purely for renaming everything that's a policy into a check.,0,0,0,0.9862678050994872,0.993831753730774,0.9934425354003906,0.0,accept,unanimous_agreement
1578797914,6476,"to be honest, i already doubt the need for these changes. we made them for backward compatibility and will probably remove them soon. so let's leave it to your decision. we can always add this if users ask about it.",0,0,0,0.8967549204826355,0.705112099647522,0.8018953204154968,0.0,accept,unanimous_agreement
1580417920,6476,perhaps we want to rename `policy` folder? `docs/docs/scanner/misconfiguration/policy/builtin.md` -> `docs/docs/scanner/misconfiguration/check/builtin.md`,0,0,0,0.9861737489700316,0.9943059086799622,0.9922484159469604,0.0,accept,unanimous_agreement
1580419345,6476,hmm... what version of go are you using on your local pc? why was this removed?,0,0,0,0.8769502639770508,0.9293344020843506,0.9757516384124756,0.0,accept,unanimous_agreement
1580420870,6476,do you know why the order was changed?,0,0,0,0.9835625290870668,0.9891403913497924,0.9929306507110596,0.0,accept,unanimous_agreement
1580422868,6476,let's try to always use the same name (e.g. [a link] [code block],0,0,0,0.985105276107788,0.9920347332954408,0.993126630783081,0.0,accept,unanimous_agreement
1580451542,6476,"i'm not sure to be honest. maybe it's redundant to specify toolchain when the go version is the same? [a link] i run the following: [code block] if you get rid of the patch version from the go directive within go.mod, i get this error: [code block] running `go mod tidy` on the version in main automatically removes the `toolchain` directive and replaces it with this change.",-1,-1,0,0.91266530752182,0.5445399880409241,0.801145076751709,-1.0,accept,majority_agreement
1580484468,6476,it seems we didn't sort them so the order changed over go versions. i added sorted results now. [a link],0,0,0,0.9812286496162416,0.92982417345047,0.993633508682251,0.0,accept,unanimous_agreement
1580484807,6476,yes fixed a bunch of more places as well. thanks!,1,1,1,0.9614341259002686,0.9953290224075316,0.9863311052322388,1.0,accept,unanimous_agreement
1580496453,6476,hm... this is strange... my go doesn't remove `toolchain` :grinning_face_with_smiling_eyes: : [code block],-1,-1,-1,0.9850929379463196,0.9682010412216188,0.488510400056839,-1.0,accept,unanimous_agreement
1580497736,6476,[a link] is this debug strings? :grinning_face_with_smiling_eyes:,0,0,1,0.5553558468818665,0.9796808958053588,0.97101891040802,0.0,accept,majority_agreement
1580516775,6476,hmm i'm taking a look again to see what's going on. i will upgrade to go 1.22.2 as you and try again.,0,0,0,0.9713153839111328,0.8893401026725769,0.9610838294029236,0.0,accept,unanimous_agreement
1582020667,6476,"i don't have a good answer but after updating to go 1.22.2, go removed the toolchain directive for me but added a patch version to the go version [a link] i personally think since our go version and toolchain are same, this behavior is normal and expected as specifying the same version for the toolchain and go version are redundant. but i'm not sure why i'm not able to replicate the behavior you see on your end. could you try the following? 1. restore the go version from the main branch into my branch 2. try running `go mod tidy`",-1,0,0,0.5102089643478394,0.5546140670776367,0.8722943663597107,0.0,accept,majority_agreement
1582593900,6476,"go also applies [a link] to the go version. since `trivy-checks` uses `go 1.22.0` now, go chooses 1.22.0 rather than 1.22. [a link] i'd suggest removing the patch version in trivy-checks. otherwise, we need to bump the patch version every time (1.22.0 => 1.22.1 => 1.22.2...). [code block]",0,0,0,0.9868994951248168,0.994867205619812,0.9949341416358948,0.0,accept,unanimous_agreement
1584133357,6476,thanks for that info. i had a hunch it could be that but didn't get to it. good to know about mvs! i've updated trivy-checks repo and also used it within trivy [a link],1,1,1,0.9899583458900452,0.9931252002716064,0.9957348704338074,1.0,accept,unanimous_agreement
1590848870,6633,looks like we can use sort.sort,0,0,0,0.9798411130905152,0.9844443798065186,0.9876829981803894,0.0,accept,unanimous_agreement
1590854905,6633,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1590870150,6633,same for other,0,0,0,0.9805243015289308,0.9554008841514589,0.9904228448867798,0.0,accept,unanimous_agreement
1590879159,6633,we can use sort.sort(),0,0,0,0.9868930578231812,0.991795003414154,0.9941045641899108,0.0,accept,unanimous_agreement
1590879271,6633,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1590881446,6633,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1592088782,6633,"iirc it's better to use new number, even if we just rename the field.",0,0,0,0.9843829274177552,0.9861871004104614,0.9890913963317872,0.0,accept,unanimous_agreement
1592158317,6633,"renaming should be ok as protobuf internally uses number, not name. i'll check it just in case.",0,0,0,0.9870041012763976,0.9906150102615356,0.9744125008583068,0.0,accept,unanimous_agreement
1592162166,6633,thanks. [a link],1,1,1,0.7931249141693115,0.897584080696106,0.8471294045448303,1.0,accept,unanimous_agreement
1592180518,6633,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1592180810,6633,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1592181297,6633,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1677279320,7160,"authentication is not only for an air-gapped environment. i think we should leave it [a link] or move it [a link], and reference it in this page.",0,0,0,0.9848164916038512,0.9876074194908142,0.9874317646026612,0.0,accept,unanimous_agreement
1677319315,7160,"the original document was incorrect. the vulnerability db and java db work the same, and it supports only `docker login` now.",0,0,0,0.9656031727790833,0.9837257266044616,0.9865151047706604,0.0,accept,unanimous_agreement
1677320300,7160,we no longer need it and can delete it for now. but suggested re-implementing sonatype api. we'll add it back after that.,0,0,0,0.9803714156150818,0.9888633489608764,0.9937801957130432,0.0,accept,unanimous_agreement
1677320902,7160,"also, users suggested that `--offline` enables all needed flags for air-gapped environments.",0,0,0,0.989165723323822,0.994175374507904,0.9941858053207396,0.0,accept,unanimous_agreement
1677791755,7160,"i agree, i also thought about the allowlist and private access not belonging to the airgap document, but also didn't want to leave them in a vulnerability specific document since they are shared to misconfig and maybe other things in the future. wdyt about renaming the air-gap document to ""advanced database scenarios""? then it makes more sense why the network requirements, authentication, and offline settings are there. it does sounds similar to the existing ""configuration/db.md"" doc that you linked, but i thought that the entire ""configuration"" section is purely cli flags reference (and i thought it's auto-generated)",0,0,0,0.9625495672225952,0.9403348565101624,0.9760296940803528,0.0,accept,unanimous_agreement
1677809744,7160,"why does java db only support authentication via docker login? when an artifact is loaded, [a link] method is called, which loads the image with authentication.",0,0,0,0.9846704006195068,0.9935545921325684,0.9876326322555542,0.0,accept,unanimous_agreement
1677831545,7160,"yes, it makes more sense, but since we also have checks bundle, advanced ""database"" scenarios might be misleading.",0,0,0,0.94915372133255,0.9839815497398376,0.9818846583366394,0.0,accept,unanimous_agreement
1677834315,7160,it's my bad. i was using an old laptop today and referring to an old commit.,-1,-1,-1,0.9880247712135316,0.990790843963623,0.993722140789032,-1.0,accept,unanimous_agreement
1677851876,7160,"so just to confirm, vuln db, java db, checks db all support the same authentication, and that is the same as trivy's ""private registry"" support. right?",0,0,0,0.9877134561538696,0.980782389640808,0.9926177859306335,0.0,accept,unanimous_agreement
1678620740,7160,formatting needs a fix,0,0,0,0.9862242937088012,0.9547574520111084,0.990111529827118,0.0,accept,unanimous_agreement
1678637305,7160,yes,0,0,0,0.9564858078956604,0.9659429788589478,0.9686408638954164,0.0,accept,unanimous_agreement
1679558804,7160,database? it's a page about checks.,0,0,0,0.9850499033927916,0.9862777590751648,0.988742172718048,0.0,accept,unanimous_agreement
1680385527,7160,it is a nit but i like to use `trivy config` instead of `trivy conf` as it is more descriptive.,0,-1,0,0.962373673915863,0.6867563724517822,0.956232726573944,0.0,accept,majority_agreement
1706936119,7160,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
1707097085,7160,"do we call the checks bundle ""database""?",0,0,0,0.9883225560188292,0.9934810400009156,0.9933357238769532,0.0,accept,unanimous_agreement
1707685518,7160,"i have some thoughts about this, but don't want to delay this pr with them so i'll do change it",0,-1,0,0.8900814056396484,0.5504879355430603,0.501731276512146,0.0,accept,majority_agreement
1709224695,7160,"i have an idea about re-structuring this page, but we can do that in another pr.",0,0,0,0.978480577468872,0.9549596309661864,0.9924613833427428,0.0,accept,unanimous_agreement
1777890940,7605,should we also have a debug log to say where the db was downloaded from?,0,0,0,0.9882511496543884,0.9943609833717346,0.9932331442832948,0.0,accept,unanimous_agreement
1777978632,7605,it's logged [a link],0,0,0,0.9889035820961,0.9853353500366212,0.9958494901657104,0.0,accept,unanimous_agreement
1778452598,7605,looks like we can delete this log since we will show it later: [a link],0,0,0,0.9807166457176208,0.9743624925613404,0.9930391907691956,0.0,accept,unanimous_agreement
1778461333,7605,do we need this? we do same in initociartifact: [a link] + [a link],0,0,0,0.987782895565033,0.992831826210022,0.9959665536880492,0.0,accept,unanimous_agreement
1778463774,7605,i think we can say that we keep order when trying to download the db (as for `--image-src`).,0,0,0,0.9893256425857544,0.9758195281028748,0.9884888529777528,0.0,accept,unanimous_agreement
1778513642,7605,"if we already have one artifact initialized with a repository via `withociartifact`, there is no point in looping through repositories.",0,0,0,0.9809231758117676,0.9937093257904052,0.9882561564445496,0.0,accept,unanimous_agreement
1778521996,7605,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1778522419,7605,updated [a link],0,0,0,0.9835633039474488,0.9888258576393129,0.9935036301612854,0.0,accept,unanimous_agreement
1779363608,7605,"i meant to say log the success of the db. something along the lines of ""successfully download from ... "" as a debug print. but it's just a nit.",0,0,0,0.9647780060768129,0.919006049633026,0.9804837107658386,0.0,accept,unanimous_agreement
1779455881,7605,"got it now, i added [a link]",0,0,0,0.9762334227561952,0.9481881260871888,0.9142518639564514,0.0,accept,unanimous_agreement
1780378136,7605,maybe i didn't make it clear. you have duplicate code. can we keep `c.artifact != nil` check and `a.download` function in just one place? [a link] [a link] and [a link] [a link],0,0,0,0.9751794934272766,0.9733830094337464,0.971040904521942,0.0,accept,unanimous_agreement
1780449016,7605,"if the artifact already exists (manually created), then we don't need to create it [a link] and we can just download it instead of trying to load it from possible repositories.",0,0,0,0.9862468242645264,0.9908938407897948,0.9930126070976256,0.0,accept,unanimous_agreement
1780480301,7605,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1780802178,7605,"we should try the next repository only when the error is 429 or 5xx, like [a link]. can we extract status code by using [a link] with [a link]? [a link] may help.",0,0,0,0.9848673939704896,0.99379163980484,0.9945307374000548,0.0,accept,unanimous_agreement
1780832555,7605,"all oci artifacts are always initialized now, even if the primary registry works correctly. it means we waste http calls. what if delaying initialization when needed? please let me know if i'm missing something. [code block]",0,0,0,0.9812644720077516,0.8607144951820374,0.8526573777198792,0.0,accept,unanimous_agreement
1780837076,7605,"`client.artifact` is for testing purposes only. we don't need to expand it to a slice. it means it's okay to return the same instance, but we can change it if we really need it.",0,0,0,0.9831957221031188,0.9931029081344604,0.9910188913345336,0.0,accept,unanimous_agreement
1780852963,7605,"artifact initialization does not cause http requests and never returns an error. [a link] if necessary, i can do some refactoring in this pr.",0,0,0,0.9874675869941713,0.9848950505256652,0.9956282377243042,0.0,accept,unanimous_agreement
1780875479,7605,hmm. we forgot to fix the error handling. i'll open a pr now.,0,0,0,0.9798913598060608,0.8214131593704224,0.9234957695007324,0.0,accept,unanimous_agreement
1780876963,7605,"artifact can be passed through the [a link] option, which is public. can anyone use it?",0,0,0,0.9883748292922974,0.9939212799072266,0.9951642751693726,0.0,accept,unanimous_agreement
1780884481,7605,"agreed, i think we can move [a link] error handling when downloading an artifact.",0,0,0,0.9871453046798706,0.979393482208252,0.9840413331985474,0.0,accept,unanimous_agreement
1780894143,7605,opened [a link],0,0,0,0.9873035550117492,0.9882739782333374,0.994262397289276,0.0,accept,unanimous_agreement
1780936922,7605,"we're unsure how the free tier in ecr public works, so we should probably avoid adding ecr for now. instead, we'll document how to use ecr public in another pr.",0,0,0,0.9628869891166688,0.9884729981422424,0.9874825477600098,0.0,accept,unanimous_agreement
1780969271,7605,merged. [a link],0,0,0,0.9878852963447572,0.97042578458786,0.9907593727111816,0.0,accept,unanimous_agreement
1782299725,7605,"yes, anybody can use it, and it's actually used in several places. [a link] [a link]",0,0,0,0.9843591451644896,0.9844335317611694,0.9839058518409728,0.0,accept,unanimous_agreement
1782586057,7605,i'm curious why it's always set to true. [code block],0,0,0,0.963489830493927,0.9429025650024414,0.9342520236968994,0.0,accept,unanimous_agreement
1782614600,7605,"nit: to get aligned with `artifact.download`, what if defining `artifacts []*artifact` and `artifacts.download()`? [code block]",0,0,0,0.9897514581680298,0.9953061938285828,0.9885175228118896,0.0,accept,unanimous_agreement
1782668172,7605,"that's a typo, [a link].",0,0,0,0.9861283302307128,0.9294093251228333,0.9751448035240172,0.0,accept,unanimous_agreement
1782668389,7605,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1790070873,7605,"the 2nd default repository is wrong, it should be ""public.ecr.aws/aquasecurity/trivy-db:2""",0,0,0,0.9092460870742798,0.9902812242507936,0.979070782661438,0.0,accept,unanimous_agreement
1930230615,8294,"it's weird, but my ide complains :grinning_face_with_smiling_eyes: ![a link]",-1,-1,-1,0.9910036325454712,0.992277979850769,0.9923385381698608,-1.0,accept,unanimous_agreement
1930242413,8294,can we use? [a link],0,0,0,0.9889070987701416,0.9919020533561708,0.9953585267066956,0.0,accept,unanimous_agreement
1930246942,8294,i seem to be missing something why are we using an existing image archive (e.g. `vuln-image.tar.gz`)?,0,0,0,0.8870009183883667,0.9805044531822203,0.9867391586303712,0.0,accept,unanimous_agreement
1930255865,8294,can i add a comment here? because we might forget why we need to calculate size later if sum of layer sizes is already greater than `maximagesize`,0,0,0,0.9841745495796204,0.9929929971694946,0.9952300786972046,0.0,accept,unanimous_agreement
1930276635,8294,goland? i think the static analyzer should not show the warning because 4.1*mb is an integer. [a link],0,-1,0,0.9871568083763124,0.9427254796028136,0.9732027649879456,0.0,accept,majority_agreement
1930277921,8294,"in this case, we don't know the size of the entire image.",0,0,0,0.9600887298583984,0.8841488361358643,0.9685253500938416,0.0,accept,unanimous_agreement
1930280178,8294,i created image2 as it is convenient for testing because it contains two 2mb layers.,0,0,0,0.9868727922439576,0.9328291416168212,0.9924312829971312,0.0,accept,unanimous_agreement
1930280746,8294,"yeah, i agree with you. just wanted to share :grinning_face_with_smiling_eyes:",1,0,1,0.8810384273529053,0.9116239547729492,0.9944190382957458,1.0,accept,majority_agreement
1930283571,8294,"strange that the behavior is different from vscode, i think they use the same lsp.",-1,0,-1,0.7920229434967041,0.9843391180038452,0.95248144865036,-1.0,accept,majority_agreement
1930285976,8294,"sure, add it.",0,0,0,0.9776862859725952,0.9858623147010804,0.989767611026764,0.0,accept,unanimous_agreement
1930287468,8294,but we only test 2 cases: - 1st layer size > `maximagesize`. - image size > `maximagesize`. why do we need the 2nd layer? we just don't want to add extra test files (there are too many of them anyway),0,0,0,0.980152189731598,0.9877039194107056,0.9914490580558776,0.0,accept,unanimous_agreement
1930290676,8294,maybe we can update this function to use it in both cases? i think it's handy to have errors collected in one place,0,0,0,0.9527297019958496,0.9134185910224916,0.987234115600586,0.0,accept,unanimous_agreement
1930297105,8294,"the layers are processed in parallel and if a small layer is processed first, we will not check the first case.",0,0,0,0.9841077327728271,0.991299331188202,0.9922696352005004,0.0,accept,unanimous_agreement
1930313378,8294,"i'm not sure if this makes sense for this test, but okay, let's keep this file.",0,0,-1,0.9575724005699158,0.8635975122451782,0.6104577779769897,0.0,accept,majority_agreement
1930319220,8294,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1930417896,8294,"can't we test it as below? as dmitriy said, we want to avoid adding more testing images in a git repository. i regret committing test binaries :pensive_face: we've recently switched to [a link] ([a link]. if we really need a real tar file, we can go for this approach. [code block]",-1,-1,-1,0.9753212928771972,0.6257445812225342,0.9803655743598938,-1.0,accept,unanimous_agreement
1930419101,8294,2.44kb and 5.12kb may differ. we might want to get the values dynamically or exclude them from `errorcontains` somehow.,0,0,0,0.9832384586334229,0.9923025369644164,0.9881762266159058,0.0,accept,unanimous_agreement
1930419828,8294,"btw, why is it `kb`, not `kb`?",0,0,0,0.9855178594589232,0.9896994233131408,0.9919385313987732,0.0,accept,unanimous_agreement
1930482001,8294,"thanks, i didn't know about the `github.com/google/go-containerregistry/pkg/v1/random` package. fixed [a link]",1,1,1,0.7845258712768555,0.9656903147697448,0.9253588914871216,1.0,accept,unanimous_agreement
1930484675,8294,the decimal prefix kilo is written with a small letter [a link],0,0,0,0.9846397638320924,0.9835651516914368,0.9950556755065918,0.0,accept,unanimous_agreement
1930495174,8294,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1930516863,8294,"i thought [a link] kb in software meant kib (i know it's not strict), but do you know how it's handled in other software (e.g. docker)? the size shown in `docker images` is `mb`, not `mib`? for example, i'm sure docker hub uses `mb` as `mib`. it shows 3.47mb. but the actual size is 3641715. 3641715 / 1024**2 is 3.47. [code block] given this fact, i thought `mb` usually meant `mib` (i'm lazy and sometimes use 1,000 as kib if it doesn't have to be strict).",0,0,0,0.9726881980895996,0.9781206250190736,0.9757019281387328,0.0,accept,unanimous_agreement
1931627349,8294,i'm a bit confused. we use `totalsize` for the following check: [a link] iiuc we can remove `completedlayers != len(diffids)` and see this error here. parallelism shouldn't be a problem - we'll get this error on the last layer. what am i missing?,-1,-1,-1,0.8282865881919861,0.8034189939498901,0.9372189044952391,-1.0,accept,unanimous_agreement
1931634508,8294,should we distinguish that the image is fully loaded or not?,0,0,0,0.9841449856758118,0.9935274720191956,0.989768087863922,0.0,accept,unanimous_agreement
1931642298,8294,it seems to be a rare case (when we get error on image size because of last layer). but if you want - you can handle this case. but i think it makes more sense to do it here (so that all errors for uncompressed sizes (layers or image) are in one place),0,0,0,0.9728466868400574,0.9843357801437378,0.9819735288619996,0.0,accept,unanimous_agreement
1932266908,8294,agreed. i simplified the size check [a link],0,0,0,0.9781566858291626,0.6530771851539612,0.9178007245063782,0.0,accept,unanimous_agreement
1933302423,8294,interesting... ``` $ docker images alpine:3.19 repository tag image id created size alpine 3.19 ace17d5d883e 12 months ago 7.73mb $ docker inspect alpine:3.19 | jq '.[].size' 7728534,0,0,1,0.5982961058616638,0.9863162636756896,0.5777823328971863,0.0,accept,majority_agreement
1933303296,8294,docker: decimal prefixes (1000) docker hub: binary prefixes (1024),0,0,0,0.9867876768112184,0.9911156892776488,0.9934086799621582,0.0,accept,unanimous_agreement
1933309618,8294,"for me, the most significant difference between markdown and mkdocs is that a newline is required before bullet points. [code block] it's broken now. ![a link]",-1,0,-1,0.6916167140007019,0.5477176904678345,0.9777271747589112,-1.0,accept,majority_agreement
1933486583,8294,"it may be worth documenting. otherwise, users who check the size on docker hub may complain about it.",0,0,0,0.832712709903717,0.9404611587524414,0.9850532412528992,0.0,accept,unanimous_agreement
1933765018,8294,btw i found an open issue [a link],0,0,0,0.9875990152359008,0.9696524739265442,0.9928325414657592,0.0,accept,unanimous_agreement
1933848614,8294,docker hub: binary prefixes (1024) doesn't the docker cli display the actual binary size but uses decimal prefixes like docker hub?,0,0,0,0.9892318844795228,0.9915088415145874,0.9940252900123596,0.0,accept,unanimous_agreement
1933867173,8294,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1933867298,8294,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
1934089774,8294,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
613625422,935,"i'm not familiar with this, could you explain its use and purpose?",-1,-1,0,0.5728846192359924,0.5765883922576904,0.8936280608177185,-1.0,accept,majority_agreement
613626870,935,[code block] see [a link] for all the possible severity levels.,0,0,0,0.985607385635376,0.9883235692977904,0.9891538023948668,0.0,accept,unanimous_agreement
613627593,935,inline [code block],0,0,0,0.987924098968506,0.9891084432601928,0.9952849745750428,0.0,accept,unanimous_agreement
613627750,935,inline [code block],0,0,0,0.987924098968506,0.9891084432601928,0.9952849745750428,0.0,accept,unanimous_agreement
613628177,935,"instead of using a local variable, you just do the return within each of the case statements.",0,0,0,0.9880898594856262,0.9912768602371216,0.9926565289497375,0.0,accept,unanimous_agreement
613629141,935,"it avoids path repetition between the physical paths. for example, c:\folder1\folder2\folder3\filename.txt ant this c:\folder1\folder2\folder3 keeps repeating. with that, we can create a variable and re-use it.",0,0,0,0.9870173335075378,0.9929372668266296,0.9933769106864928,0.0,accept,unanimous_agreement
613633264,935,"just taking this to illustrate an example, is this change sufficient enough for the github security tab to display the vulnerability information in the web ui? i was just trying to run it through the online validator and noticed this: i tried with a different image: `knqyf263/vuln-image`. you can see this by running: `trivy -q image -format=template -t=/sarif.tpl knqyf263/vuln-image `",0,0,0,0.9612820744514464,0.9916976690292358,0.9790979623794556,0.0,accept,unanimous_agreement
613639778,935,should this be a valid uri? [a link],0,0,0,0.9891340136528016,0.9927992820739746,0.9959826469421388,0.0,accept,unanimous_agreement
613795901,935,"since the region information is not available so far, we removed the region properties. what do you think about this github rule warning?",0,0,0,0.9847398400306702,0.9730068445205688,0.9924329519271852,0.0,accept,unanimous_agreement
613802133,935,"this is value from .target field, in reality is it possible the value of .target will have this kind of suffix other than path? if yes we may need a logic to handle this case? i also tried to analyze image knqyf263/vuln-image, and from the result i see some of path are in format of file path, not uri path, e.g. ""rust-app\cargo.lock"". the backslash needs to be escaped to `""\\""` so it won't break the json format. we may need convert this path to uri format? e.g."" rust-app/cargo.lock"" cc",0,0,0,0.984418511390686,0.992392122745514,0.991847276687622,0.0,accept,unanimous_agreement
613806347,935,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
613806447,935,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
613806707,935,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
613807530,935,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
613807632,935,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
613937125,935,"we should ignore this. it's better to have an absent region than having wrong information in it (hardcoding to startline=1, for example).",0,0,0,0.8629303574562073,0.9828495383262634,0.9885497689247132,0.0,accept,unanimous_agreement
613938454,935,"-gh, i think we would just need to escape it. that would work. we can't have the `(alpine version)` in the uri. generate with backslash and try to validate in the online validator",0,-1,0,0.9106987118721008,0.6453320980072021,0.9233927726745604,0.0,accept,majority_agreement
614283120,935,"yes i compiled local version escaped the back slash, it caused below warning in the validator: sarif1002: runs[a link].",0,0,0,0.989598274230957,0.9933217167854308,0.9951321482658386,0.0,accept,unanimous_agreement
614286897,935,"i agree with you but i was curious if we don't have this information, will it still show the vulnerability in the github security tab? it's one of the reasons we added startline=1 as at the time github security tab had a requirement on this to be able to show the vulnerability information.",0,0,0,0.9580999612808228,0.9428749084472656,0.960521936416626,0.0,accept,unanimous_agreement
614289053,935,got it. i asked some github guys. will try to update asap.,0,0,1,0.9007518291473388,0.891234278678894,0.5208196640014648,0.0,accept,majority_agreement
614289644,935,got it...,0,0,1,0.8602961301803589,0.9058735370635986,0.7221087217330933,0.0,accept,majority_agreement
614364071,935,"we can remove. github adds it when we dont provide region. but, its something we should re-add later to prevent some information that isn't right.",0,0,0,0.9296743869781494,0.9804397225379944,0.9902945756912231,0.0,accept,unanimous_agreement
614497077,935,", we found some results location uri path contains some extra strings in the end, e.g. ""testdata/fixtures/alpine-310.tar.gz (alpine 3.10.2)"". do you know if this is expected or its just test data? any suggestion how to extract file path from .target field? maybe split by space/bracket? also we may need to convert the path to uri path if its file path e.g. ""node-app\package-lock.json"" need to be ""node-app/package-lock.json"", simply replace ""\"" with ""/"". pls lets know if any concern.",0,0,0,0.9867515563964844,0.993683695793152,0.9771475195884703,0.0,accept,unanimous_agreement
615083869,935,"trivy also supports scanning of tar files individually. in that case it will look very similar to this. let me try to understand it better as it's not clear to me. are you saying how to get: `alpine-310.tar.gz` from the .target which is `testdata/fixtures/alpine-310.tar.gz`? if so, you could do a string split as you described. depending on what's being scanned, `.target` will vary. in the case of a programming library vulnerabilities, it will be a lock file (e.g. node-app/package-lock.json, etc.). in the case of os package vulnerability, it will be the distro:version (e.g. alpine:3.11) and finally in the case of a tarball scan, it will what you described above. why is this needed? backslash is a windows only file path convention, correct? are you suggesting to replace all ""\"" with ""/"" in the final output?",0,0,0,0.9767712354660034,0.9809738993644714,0.9724846482276917,0.0,accept,unanimous_agreement
615089011,935,thanks for confirming. i just tested it out and it seems to work.,1,1,1,0.8947145938873291,0.935780942440033,0.9734063744544984,1.0,accept,unanimous_agreement
615090068,935,", the issue is not windows or linux. the issue here is that the field uri is actually an uri. with that, it must use ""/"". so, one alternative is to replace all \ for /.",0,0,0,0.9704883098602296,0.9707321524620056,0.9856262803077698,0.0,accept,unanimous_agreement
615092452,935,"right, that works for me.",0,0,0,0.9265602827072144,0.9779818654060364,0.9841230511665344,0.0,accept,unanimous_agreement
615141920,935,-gh let me know if you have any further questions. once we resolve this i think it's good to merge.,1,1,1,0.9142866134643556,0.5019340515136719,0.8207547664642334,1.0,accept,unanimous_agreement
615166167,935,thanks for clarification. will add fix for location uri conversion soon.,1,1,1,0.8634127974510193,0.5749032497406006,0.950486421585083,1.0,accept,unanimous_agreement
794415292,1638,why `amd` is missed here,0,0,0,0.9781904220581056,0.9795290231704712,0.991435706615448,0.0,accept,unanimous_agreement
794425570,1638,though i see same in release files,0,0,0,0.9866484999656676,0.98619544506073,0.988569676876068,0.0,accept,unanimous_agreement
803690553,1638,where is this used?,0,0,0,0.9846693873405457,0.987393856048584,0.9943954944610596,0.0,accept,unanimous_agreement
903717207,1638,"it's been a while, so i forgot the reason why we can't use multiple paths. could you explain it again? [a link]",0,0,0,0.907611846923828,0.965222179889679,0.9785689115524292,0.0,accept,unanimous_agreement
904619764,1638,"all files will be saved in 1 archive when we use multiple paths for one step `actions/upload-artifact`. in this case, we will save 4 trivy bins in 1 archive.",0,0,0,0.9881038069725036,0.9940827488899232,0.9944794178009032,0.0,accept,unanimous_agreement
904637206,1638,"oh, yes, i just remember it. thanks for explaining it again!",1,1,1,0.9705880284309388,0.952113687992096,0.9926857948303224,1.0,accept,unanimous_agreement
908105603,1638,nit: goreleaser_config,0,0,0,0.9876012802124025,0.9899629950523376,0.9935750365257264,0.0,accept,unanimous_agreement
908105870,1638,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
908106970,1638,we can use newer ubuntu as this workflow doesn't use createrepo.,0,0,0,0.988770604133606,0.9927915334701538,0.9951142072677612,0.0,accept,unanimous_agreement
908111475,1638,"it restores modules from cache, right? looks like we don't cache anywhere. what if we remove it?",0,0,0,0.9579416513442992,0.9623858332633972,0.9897672533988952,0.0,accept,unanimous_agreement
908113215,1638,"for consistency, name should be capitalized, build binaries",0,0,0,0.9867783784866332,0.9925047159194946,0.9943525791168212,0.0,accept,unanimous_agreement
908113578,1638,ditto. and no hyphen.,0,-1,0,0.9430072903633118,0.629266083240509,0.9569301009178162,0.0,accept,majority_agreement
908114322,1638,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
908115183,1638,deploy rpm/deb packages,0,0,0,0.98678058385849,0.9805849194526672,0.9934866428375244,0.0,accept,unanimous_agreement
908116088,1638,"you mean ""after""?",0,0,0,0.9700245261192322,0.9892231225967408,0.9901496171951294,0.0,accept,unanimous_agreement
908120517,1638,"did this workflow work? i thought we needed to checkout trivy. otherwise, ci/deploy-rpm.sh doesn't exist.",0,0,0,0.9511704444885254,0.9925543665885924,0.9920309782028198,0.0,accept,unanimous_agreement
908208499,1638,if i understand correctly: we either restore cache (if cache for this key was found) or save go modules to cache (if cache is not found). cache is stored for 7 days ([a link] i think we can use this action to avoid loading go modules every run(if `go.sum` file hasn't been changed).,0,0,0,0.9879361987113952,0.9878359436988832,0.9925634264945984,0.0,accept,unanimous_agreement
908237932,1638,"yes, my mistake, thanks.",-1,1,0,0.8710057735443115,0.727543830871582,0.6934394836425781,,review,no_majority_disagreement
908238126,1638,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908238218,1638,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908238303,1638,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908238440,1638,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908239940,1638,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908240115,1638,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908240432,1638,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
908273960,1638,i missed that. thanks a lot! checkout has been added.,1,1,1,0.9922217726707458,0.995564103126526,0.9964951872825624,1.0,accept,unanimous_agreement
908297134,1638,but we don't have modules here as it will be downloaded by goreleaser. looks like we always cache an empty dir.,0,0,0,0.9849551320075988,0.9824553728103638,0.9924195408821106,0.0,accept,unanimous_agreement
908298164,1638,could you test it in your forked trivy-repo? we may miss something else.,0,0,0,0.9689791798591614,0.9900746941566468,0.9870228171348572,0.0,accept,unanimous_agreement
908299995,1638,hm... i didn't think about goreleaser. i will remove it.,-1,-1,0,0.5118158459663391,0.7649828195571899,0.9169930815696716,-1.0,accept,majority_agreement
908304433,1638,"i already checked this: [a link] new rpm file has been added: [a link] i forgot to add `gpg_key`. but `deploy-rpm.sh` worked correctly, so `deploy-deb.sh` will also work correctly. also successfully running canary build: [a link]",0,0,0,0.9639047980308532,0.9559436440467834,0.8443511724472046,0.0,accept,unanimous_agreement
908415438,1638,could you import a dummy gpg key you generate and make sure it works in your fork?,0,0,0,0.9878514409065248,0.9951103329658508,0.9931228756904602,0.0,accept,unanimous_agreement
909677670,1638,i checked. it works correctly : [a link],0,0,1,0.9703238606452942,0.5639990568161011,0.9740313291549684,0.0,accept,majority_agreement
1342297113,5285,i think we can make this function as separate function. also we can return only dependencies and slice of members: [code block],0,0,0,0.9878695607185364,0.9872669577598572,0.9911802411079408,0.0,accept,unanimous_agreement
1342297916,5285,are there cases where the found `members` contain other `members`? i mean `pkg1 => pkg2=> pkg3 etc` if yes => we need to use a queue or recursion to check all nested elements.,0,0,0,0.988326132297516,0.9924582839012146,0.9941325783729552,0.0,accept,unanimous_agreement
1342298155,5285,can you add comment with link to docs about `members`?,0,0,0,0.9885746836662292,0.9917448163032532,0.995781660079956,0.0,accept,unanimous_agreement
1342299044,5285,"can you check case where path from ""members"" does not exist? does rust return an error in this case? or do we need to check this path for existence?",0,0,0,0.9883411526679992,0.9942179918289183,0.9943404197692872,0.0,accept,unanimous_agreement
1347201831,5285,"i made a test: [code block] calling cargo build from the root workspace cause such error: [code block] so, i think workspace could be the one and only:).",1,0,1,0.8676599860191345,0.979329228401184,0.9200469255447388,1.0,accept,majority_agreement
1347310952,5285,"i think, it's better to check or not to check;). btw, i'm not so familiar with go. what is the right way to check file for existence? i found this way: [code block] but i suppose, i should use `fs.fs` for that?",1,0,1,0.9266277551651,0.7436339855194092,0.9761624336242676,1.0,accept,majority_agreement
1348252896,5285,great! thanks for this investigation. it would be nice if you could add comment that cargo doesn't support nested members.,1,1,1,0.9926202297210692,0.9949435591697692,0.9967781901359558,1.0,accept,unanimous_agreement
1348257827,5285,you already have the main cargo.toml file checked: [a link] you can use same logic.,0,0,0,0.9792389273643494,0.9726240038871764,0.995834231376648,0.0,accept,unanimous_agreement
1369620754,5285,"`errnotexist` error can't exist here, because you are handling it in `tomldependities`. or did i miss something?",0,0,0,0.9378342032432556,0.9910162687301636,0.9857884049415588,0.0,accept,unanimous_agreement
1369631387,5285,this comment for `dependencies`: [a link],0,0,0,0.9877601265907288,0.9885697960853576,0.9962156414985656,0.0,accept,unanimous_agreement
1369635414,5285,we've already shown log message (`debug` is enough because `cargo.toml` is helper file for `cargo.lock`). [code block],0,0,0,0.9876453280448914,0.9926927089691162,0.9958964586257936,0.0,accept,unanimous_agreement
1384816873,5285,"yes, exactly...",0,0,0,0.9224523305892944,0.9765446186065674,0.9870175719261168,0.0,accept,unanimous_agreement
1385145087,5285,hm... tests are failing without this hack. trying to find a better solution...,-1,-1,-1,0.98360276222229,0.9598252773284912,0.9894830584526062,-1.0,accept,unanimous_agreement
1385184119,5285,"i have question: do we need this check at all? [a link] i think, we will log this here: [a link]",0,0,0,0.9778177738189696,0.9561031460762024,0.9778777360916138,0.0,accept,unanimous_agreement
1386083721,5285,"if one of members doesn't exist, we continue to check the remaining members. without this check you will stop parsing remaining toml files. correct me, if i am wrong.",0,-1,0,0.7180941104888916,0.5774715542793274,0.9571494460105896,0.0,accept,majority_agreement
1387944046,5285,"yes, you are right. but i think we should do the following: 1. stop if it is not possible to parse the root (workspace) cargo.toml 2. continue if it is not possible to parse member cargo.toml i pushed some changes. warnings in logs lgtm (i malformed some member field): [code block] p.s. sorry, for being so slow. i'm changing work, trying to find some time for open source:).",-1,-1,-1,0.9018306732177734,0.991660177707672,0.861727774143219,-1.0,accept,unanimous_agreement
1388911978,5285,you can't continue parsing because in this case you don't have any members to parse :grinning_face_with_smiling_eyes: but you are right. i like this logic.,1,1,1,0.9769376516342164,0.8272036910057068,0.9830484390258788,1.0,accept,unanimous_agreement
1388914662,5285,but i'm not sure if we should show warning if the root `cargo.toml` file doesn't exist. this can confuse users if they only scan the `cargo.lock` file. i think we need to revert previous logic for root `cargo.toml` file (with debug message).,0,0,0,0.8728459477424622,0.9216091632843018,0.9650941491127014,0.0,accept,unanimous_agreement
1388944854,5285,"i don't have a lot of exp with cargo, can you help me understand: i have played with `cargo tree` command. and it looks like `cargo` builds separate tree for each members: [code block] perhaps we need to add members as libs or mark all dependencies from members as indirect?",0,0,0,0.9696906805038452,0.9552318453788756,0.983698844909668,0.0,accept,unanimous_agreement
1390935453,5285,"according to [a link]: [code block] so, workspace is not a package, it couldn't be a dependency. for example casr workspace has to crates (packages): casr: [a link] libcasr: [a link] they are considered as separate crates. the same picture i see for libafl [a link]. i think, the way we process members is right, they are direct dependencies",0,0,0,0.9762356281280518,0.9865233302116394,0.9869852662086488,0.0,accept,unanimous_agreement
1392022614,5285,"okay, thanks for the explanation!",1,1,1,0.9212554693222046,0.6438590884208679,0.9392107725143432,1.0,accept,unanimous_agreement
1467477719,5285,shouldn't it be false (meaning a direct dependency)? it is defined in cargo.toml.,0,0,0,0.977445125579834,0.9919216632843018,0.9918152689933776,0.0,accept,unanimous_agreement
1467486166,5285,"iiuc, `workspace.dependencies` is overridden by mistake here and then loses the version constraint.",0,0,0,0.9863845705986024,0.9440551400184632,0.9838115572929382,0.0,accept,unanimous_agreement
1467568535,5285,you are right. thanks! fixed in [a link],1,1,1,0.9853274822235109,0.995409905910492,0.9965730905532836,1.0,accept,unanimous_agreement
1467568552,5285,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
1969749660,8254,it will probably not be rendered correctly. can you please test it with `mage docs:serve`?,0,0,0,0.9786186814308168,0.9932624697685242,0.9282029271125792,0.0,accept,unanimous_agreement
1969754532,8254,"did you take the name somewhere? if not, we would go for `vex` [a link] [code block]",0,0,0,0.988283395767212,0.9934138655662536,0.9958912134170532,0.0,accept,unanimous_agreement
1969793632,8254,"since unmarshalreferencetype doesn't return an error, most references have empty types. is it intended?",0,0,0,0.9842446446418762,0.9854108095169068,0.9914140701293944,0.0,accept,unanimous_agreement
1969802707,8254,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
1969809179,8254,do we need to check if `v` is nil?,0,0,0,0.9855007529258728,0.992368757724762,0.9941248297691344,0.0,accept,unanimous_agreement
1969811319,8254,do we need to export this function and some other functions?,0,0,0,0.9848151206970216,0.9938384890556335,0.9948691129684448,0.0,accept,unanimous_agreement
1969815234,8254,is it possible `v` is nil?,0,0,0,0.9861628413200378,0.9930538535118104,0.9910708665847778,0.0,accept,unanimous_agreement
1970032386,8254,fixed: ![a link],0,0,0,0.6783470511436462,0.9667364358901978,0.4992556869983673,0.0,accept,unanimous_agreement
1970041022,8254,refactored,0,0,0,0.9850403070449828,0.9819386005401612,0.9915287494659424,0.0,accept,unanimous_agreement
1970069723,8254,"good catch, that is very unintuitive. adapted `unmarshalreferencetype` to return an `unsupportedexternalreference` error similar to the `unsupportedtype` error that already existed. filtering out external references that returned error - only ""exploitability-statement"" external ref types should now be added to the bom",1,1,0,0.6948791742324829,0.5180375576019287,0.7156941294670105,1.0,accept,majority_agreement
1970088354,8254,was a weird decision on my part to not return an error from the `decodevex` function. fixed,-1,-1,-1,0.9847753643989564,0.9375032782554626,0.9922587275505066,-1.0,accept,unanimous_agreement
1970105261,8254,made them private by lowercasing,0,0,0,0.987595558166504,0.9905912280082704,0.9910282492637634,0.0,accept,unanimous_agreement
1970119914,8254,"actually not, but same holds true for the `typeoci` case above where i mirrored this of. removed check for both.",0,0,0,0.9880064129829408,0.9930384755134584,0.9924980998039246,0.0,accept,unanimous_agreement
1970128707,8254,"nvm rolled back change for `newoci`. there it makes sense to explicitly check for `nil`, because it is not able to return an empty set like the typerepository and the typesbomreference",0,0,0,0.9888772368431092,0.9940053820610046,0.990532159805298,0.0,accept,unanimous_agreement
1971051256,8254,"i don't think we need to define `errunsupportedexternalreference`.since `errunsupportedtype` is handled by the upstream caller, other types of errors may also be returned, so `errunsupportedtype` was necessary to ensure accurate identification of the error type. however, in this case, that is not necessary, so i think it is sufficient to simply return an error and continue if it is not nil. it can be defined at that time if it becomes necessary in the future. [code block]",0,0,0,0.9842496514320374,0.9917685985565186,0.9860125184059144,0.0,accept,unanimous_agreement
1971053046,8254,nitpick [code block],0,0,0,0.9881828427314758,0.9899174571037292,0.9915621876716614,0.0,accept,unanimous_agreement
1971053752,8254,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
1971056754,8254,nit: we basically use the snake case for log parameters. [code block],0,0,0,0.987658441066742,0.9878639578819276,0.9903504252433776,0.0,accept,unanimous_agreement
1971056905,8254,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1971062472,8254,"if no valid vex documents are found, `v` will be nil, and in that case, it seems acceptable to also set sbomreferenceset to nil and skip it. i wasn't sure whether a nil check was needed for the return value of `newsbomreferenceset()`, but after making this change, it is necessary. [code block]",0,0,0,0.985511064529419,0.9946257472038268,0.9887486696243286,0.0,accept,unanimous_agreement
1971073552,8254,"scans should ideally produce consistent results even when run multiple times. in this case, if the server hosting the vex documents is down or if network instability causes a download failure, vulnerabilities that should normally be excluded might be detected. since users currently expect vex to be applied by explicitly specifying `--vex sbom-ref`, it would be better to return an error to notify users that the expectation is unmet. while it might be worth fine-tuning certain aspects, such as allowing authentication failures, as an experimental feature, it’s acceptable to implement it such that an error is returned if vex cannot be retrieved.",0,0,0,0.9744027853012084,0.9935004115104676,0.978377401828766,0.0,accept,unanimous_agreement
1971074634,8254,"now, we should handle nil :) [code block]",1,1,1,0.9481891989707948,0.9919242262840272,0.991724967956543,1.0,accept,unanimous_agreement
1971381170,8254,"my thinking here was to make it ""easy"" to adopt the flag, without worrying about external factors breaking cli runs. but as you said, as an experimental feature that might make sense to be more verbose about. will propagate such errors",0,0,0,0.924229085445404,0.8762710690498352,0.97645103931427,0.0,accept,unanimous_agreement
1971400020,8254,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1971401214,8254,is that a general suggestion? i saw that pattern in multiple parts of the code i believe. nevertheless changed it with your suggestion,0,0,0,0.9765666723251344,0.9656866192817688,0.9934099316596984,0.0,accept,unanimous_agreement
1971401461,8254,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1971401835,8254,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1971423885,8254,this now raises a question for me. if this is an experimental feature and somebody explicitly scans an sbom with `--vex sbom-ref` shouldn't trivy throw an error if it finds no valid external references in the scanned sbom? similar to how it is now throwing an error if e.g. a server responds with 404.,0,0,0,0.8441782593727112,0.9335079789161682,0.9759023785591124,0.0,accept,unanimous_agreement
1972764312,8254,"good question. the `--vex sbom-ref` flag tells trivy that it should use any vex reference found within the sbom. therefore, enabling it even if it's not yet clear whether external vex references exist in the sbom is expected behavior. conversely, it would be unexpected if external references were silently ignored even when present. similarly, the `-vex oci` flag is designed to use any available vex attestations. if no attestation is found, it [a link]; however, if attestation is found but contains issues, an error will be returned. that said, as you mentioned, if it is essential that external references are reliably loaded, returning an error might be more appropriate. this is something we can reconsider based on future community feedback. at the very least, it would be advisable to display a log message that no vex references are found for now.",1,0,1,0.7252910137176514,0.821682870388031,0.8220768570899963,1.0,accept,majority_agreement
1169469499,4047,`types2` is a bit confusing. we usually use `ftypes` for `fanal/types`. [code block],0,0,0,0.5545316934585571,0.8621737360954285,0.6050202250480652,0.0,accept,unanimous_agreement
1169489268,4047,i have idea for setting priority. what if we will use functions for options. something like that: [code block],0,0,0,0.9795190691947936,0.9351783990859984,0.9783846139907836,0.0,accept,unanimous_agreement
1169953631,4047,thanks for the suggestions! i implemented them with some slight changes. please let me know what you think and hit resolve if no further comments,1,1,1,0.9855689406394958,0.9914690256118774,0.9905237555503844,1.0,accept,unanimous_agreement
1172095155,4047,we need this option only for `image` mode. you can disable flag for other modes. [a link],0,0,0,0.9881250858306884,0.9904499650001526,0.9960617423057556,0.0,accept,unanimous_agreement
1172101226,4047,wdyt? [code block],0,0,0,0.988066554069519,0.9574412107467652,0.9910829067230223,0.0,accept,unanimous_agreement
1172103270,4047,it is integration test. don't need to remove this.,0,0,0,0.9768193364143372,0.948430836200714,0.9942438006401062,0.0,accept,unanimous_agreement
1172105334,4047,we can set multiple runtimes [code block],0,0,0,0.9880744814872742,0.9914416670799256,0.9953976273536682,0.0,accept,unanimous_agreement
1172109467,4047,"if i understand correctly - if you return this, then broken test will be fixed.",0,0,0,0.9696808457374572,0.9752468466758728,0.9857118725776672,0.0,accept,unanimous_agreement
1172110917,4047,nice work!,1,1,1,0.986882984638214,0.9958582520484924,0.9943780303001404,1.0,accept,unanimous_agreement
1172568859,4047,"i moved this flag over to the `image` group, and regenerated the docs.",0,0,0,0.988491415977478,0.9870808720588684,0.9946946501731871,0.0,accept,unanimous_agreement
1172571643,4047,"both of these are taken care of. the format `(default <...>)` in the cli help is unalterable. to keep docs consistent with the cli help, i have the following: [code block]",0,0,0,0.9863964319229126,0.9932849407196044,0.9915153980255128,0.0,accept,unanimous_agreement
1172571844,4047,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1172572527,4047,"i restored this, but the same test is failing when i run `mage test:unit`. actually, it's failing for me (locally) even on the `main` branch.",0,0,0,0.85892653465271,0.9464097619056702,0.9629504680633544,0.0,accept,unanimous_agreement
1173283994,4047,it make sense. good solution.,1,1,1,0.9746147990226746,0.9818679094314576,0.9889411330223083,1.0,accept,unanimous_agreement
1173287736,4047,it should help with broken test [code block],0,0,0,0.9744011759757996,0.9905810952186584,0.98629492521286,0.0,accept,unanimous_agreement
1176185339,4047,it should be defined under imageoptions. [a link],0,0,0,0.9863746166229248,0.9911965131759644,0.9961773157119752,0.0,accept,unanimous_agreement
1176185511,4047,it should be defined under imageoptions. [a link],0,0,0,0.9863746166229248,0.9911965131759644,0.9961773157119752,0.0,accept,unanimous_agreement
1176192158,4047,i think it can be done in newcontainerimage. is there any benefit in exporting this function?,0,0,0,0.9870332479476928,0.9865683317184448,0.9897769689559937,0.0,accept,unanimous_agreement
1176625369,4047,"unit tests are passing now, thanks!",1,1,1,0.9687510132789612,0.9859423041343688,0.9851449728012084,1.0,accept,unanimous_agreement
1176627258,4047,"i moved this to `newcontainerimage`, and made the function private. the function was also renamed",0,0,0,0.9886713027954102,0.9922399520874025,0.9947091341018676,0.0,accept,unanimous_agreement
1176627394,4047,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1176627527,4047,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1718139700,7340,"we don't include file paths in purl anymore. if it remains somewhere, it should be deleted.",0,0,0,0.97703617811203,0.9898496866226196,0.9910558462142944,0.0,accept,unanimous_agreement
1718280189,7340,"ok, i'm removing it",0,0,0,0.9770249128341676,0.9722669124603271,0.993615984916687,0.0,accept,unanimous_agreement
1724303576,7340,"can we re-use the existing json, `fluentd-multiple-lockfiles-cyclonedx.json`? you can change this file to use uuid in bom-ref.",0,0,0,0.9891401529312134,0.995900571346283,0.9957267045974731,0.0,accept,unanimous_agreement
1726337578,7340,"the testcase is updated `fluentd-multiple-lockfiles-cyclonedx.json`. i wanted to use `fluentd-multiple-lockfiles.cdx.json.golden` also, but this cdx result is a large, because it's result for `fluentd-multiple-lockfiles.tar.gz`. `fluentd-multiple-lockfiles-cyclonedx.json` is shorter. so i've created a new golden file.",0,0,0,0.9168711304664612,0.993527352809906,0.9929384589195251,0.0,accept,unanimous_agreement
1728471863,7340,input and output bomrefs for os are not equial: [a link],0,0,0,0.9832261204719543,0.9756708145141602,0.9956607222557068,0.0,accept,unanimous_agreement
1738268849,7340,looks like we can remove this,0,0,0,0.9856141209602356,0.9850003719329834,0.9907474517822266,0.0,accept,unanimous_agreement
1738277102,7340,iirc we correctly store bomrefs for the `root` component and packages. do we need this check for all types? maybe we can do this check only for `application` and `operatingsystem` types?,0,0,0,0.9889509081840516,0.9943952560424804,0.9939708709716796,0.0,accept,unanimous_agreement
1738368938,7340,"it seems that no, we have to allocate memory",0,0,0,0.9688702821731568,0.9751988649368286,0.9907214641571044,0.0,accept,unanimous_agreement
1738387834,7340,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1738411842,7340,updated,0,0,0,0.968149185180664,0.968669593334198,0.7592994570732117,0.0,accept,unanimous_agreement
1760537861,7340,it doesn't work for spdx. i thought about using spdx-id as bom-ref (see [a link],0,0,0,0.9691047072410583,0.9549480080604552,0.990788996219635,0.0,accept,unanimous_agreement
1760542383,7340,it looks like we only use fakeuuid for `serialnumber`: [a link] this might be confusing (that we don't overwrite other uuid's). maybe we just don't check `serialnumber`? wdyt?,0,0,0,0.9474464058876038,0.885016918182373,0.986126720905304,0.0,accept,unanimous_agreement
1760544255,7340,nit: `addvulnerability` and `addvulnerabilities` use slightly different logic: - addvulnerability adds vulnerability to slice of existing vulnerabilities. - addvulnerabilities preserves vulnerabilities if component doesn't contain vulnerabilities. this behavior is more similar to `setvulnerabilities`.,0,0,0,0.9791743159294128,0.9948273301124572,0.9867472648620604,0.0,accept,unanimous_agreement
1760553931,7340,also i realized that there might be issues with non-trivy cyclonedx reports: `bom-ref` is an optional field - [a link] so there might be a case where `bom-ref` doesn't exist - so we won't add vulnerabilities for these components.,0,0,0,0.9839954972267152,0.9862127304077148,0.9921477437019348,0.0,accept,unanimous_agreement
1760567568,7340,agree. fixed in [a link],0,0,0,0.981863498687744,0.9857649207115172,0.9845430254936218,0.0,accept,unanimous_agreement
1760571481,7340,"it's interesting. i was not aware of that. however, `vulnerabilities.affects.ref` must be bom-ref. do you think we should generate bom-refs in this case? [a link]",1,0,0,0.6761167645454407,0.5713575482368469,0.8716669678688049,0.0,accept,majority_agreement
1760573910,7340,"hmm. i didn't think spdx supports vulnerabilities, but i just remember we added support. i'll think about it. [a link]",0,0,0,0.9752428531646729,0.7949215173721313,0.9070699214935304,0.0,accept,unanimous_agreement
1760587277,7340,this is a weird case. i still don't understand why `bom-ref` is not a required field. looks like we need to separate the possible cases: - sbom result without vulnerabilities - `vuln` scanner is disabled - we can skip adding bom-ref to preserve the scanned sbom file as much as possible. - trivy found no vulnerabilities - i'm not sure what we should do. i'm more inclined to think that we still need to add bom-refs (use the same logic when `vuln` scanner is enabled) - sbom result with vulnerabilities - `vulnerabilities.affects.ref` is a required field => we need to populate this field => we need to use the same `bom-ref` for the linked component.,-1,-1,-1,0.9861121773719788,0.9663485288619996,0.9852498173713684,-1.0,accept,unanimous_agreement
1760594478,7340,"yes, i agree bom-ref should be required. to keep things simple, imo, it is better to generate a bom-ref if it's missing in cyclonedx that trivy is scanning.",0,0,0,0.9422594308853148,0.979812502861023,0.9820693135261536,0.0,accept,unanimous_agreement
1760598184,7340,since i don't have statistics on how often cyclonedx files without bom-refs are used - it's hard for me to make a choice. i'm not against your decision. let's do it this way and get feedback from users.,-1,-1,0,0.7102254629135132,0.6740174293518066,0.5741113424301147,-1.0,accept,majority_agreement
1760682671,7340,"i wanted to reuse the sbom of the input as much as possible, but i found that my implementation did not work well when using `--pkg-relationships` or `--pkg-types` with `trivy sbom`.",0,0,0,0.8912324905395508,0.9802823066711426,0.98574697971344,0.0,accept,unanimous_agreement
1764836395,7340,the serial number is generated by uuid. i think it's better to confirm it is generated as expected rather than ignoring it.,0,0,0,0.9852184653282166,0.9838707447052002,0.9909891486167908,0.0,accept,unanimous_agreement
1480971294,6072,let's stay `vuln` scanner as default for sbom. [code block],0,0,0,0.98927104473114,0.994174063205719,0.9952394962310792,0.0,accept,unanimous_agreement
1480971622,6072,use `mage docs:generate` to update docs.,0,0,0,0.987860143184662,0.9924856424331664,0.9957950115203856,0.0,accept,unanimous_agreement
1493833622,6072,this change is here because of `\` and `/` differences between linux and windows filesystems. otherwise tests were failing because of wrong path generated. do you think that its change is ok?,0,0,0,0.8876405358314514,0.970192551612854,0.9911106824874878,0.0,accept,unanimous_agreement
1494002905,6072,version `1.5` is currently latest.,0,0,0,0.984752357006073,0.9924288392066956,0.9934112429618835,0.0,accept,unanimous_agreement
1494004402,6072,we use sbom files generated with trivy for testdata.,0,0,0,0.9885537624359132,0.9932003617286682,0.9949325919151306,0.0,accept,unanimous_agreement
1494008510,6072,hmm... this pr doesn't change related code. what test failed?,0,-1,0,0.7433666586875916,0.7152345180511475,0.9342210292816162,0.0,accept,majority_agreement
1494011317,6072,mistake?,-1,0,0,0.7929201126098633,0.5781772136688232,0.6595269441604614,0.0,accept,majority_agreement
1494011899,6072,"it should be `cyclonedx`, right? [code block]",0,0,0,0.988767683506012,0.9944250583648682,0.9938581585884094,0.0,accept,unanimous_agreement
1494944304,6072,"hmm, interesting i am not aware of it ... let me check and fix it.",0,0,0,0.6839906573295593,0.5039442777633667,0.8026127815246582,0.0,accept,unanimous_agreement
1494952606,6072,"test i am udpating `sbom_test.go` is failing without that change, because of windows filesystem.",0,0,0,0.9103869199752808,0.8594751358032227,0.9811424612998962,0.0,accept,unanimous_agreement
1495224827,6072,we run `integration` tests only for linux system - [a link],0,0,0,0.9882619976997375,0.9894710779190063,0.9956138134002686,0.0,accept,unanimous_agreement
1496840483,6072,i think there is no need for so many dependencies for this test. 3-4 will be enough,0,0,0,0.9579949378967284,0.967348337173462,0.951400339603424,0.0,accept,unanimous_agreement
1519400651,6072,looks like you added this by accident,0,0,0,0.9802377223968506,0.9788803458213806,0.986189305782318,0.0,accept,unanimous_agreement
1519401844,6072,just reminding you about this,0,0,0,0.9296250343322754,0.6613394618034363,0.9899842739105223,0.0,accept,unanimous_agreement
1519426315,6072,i will remove it ... i use goland and probably it was added by it / i do not know which action fired it.,0,0,0,0.5581956505775452,0.6935685276985168,0.9881396293640136,0.0,accept,unanimous_agreement
1517222192,6275,"the ""contribution"" section is more generic, like how to open prs. this specific documentation should be located under ""compliance"" or something similar. [a link]",0,0,0,0.9835333228111268,0.9909528493881226,0.995270311832428,0.0,accept,unanimous_agreement
1546241927,6275,"maybe instead of this, we ask the submitter to refer to the spec definition in the pr description, and we can decide if it's good for us or not when reviewing",0,0,0,0.9710988402366638,0.9934971332550048,0.9738924503326416,0.0,accept,unanimous_agreement
1546254900,6275,"it's a good idea to define a naming convention. ""provider-resource"" not sure this is the best terminology, also very cloud specific (and the compliance feature is not). i think in this case the entire ""aws-eks"" is the subject and there's no need to specify it's components in the generic template. another example there will be cis specs for specific k8s flavor (like open shift), which this needs to appear in the name but i don't think in the template. so i would suggest to simplify the template as `subject-spec.yaml` which means: specify the subject of the compliance (what are we evaluating?). if it's a cloud service or another example of a subcomponent, include the parent too, for example `aws-eks`. if the spec is specific to a version, optionally include it after the subject, e.g `k8s-1.21`. spec is a short name for the compliance framework that people can identify, e.g `cis`. if the spec is versioned, include the version too `cis-1.1`. wdyt?",0,0,1,0.5254420638084412,0.9303285479545592,0.643067479133606,0.0,accept,majority_agreement
1546257421,6275,"imo there's too much duplication with the general compliance documentation, this should be about how to upstream a compliance, not the complete guide to write a compliance.",0,0,0,0.7636158466339111,0.9629208445549012,0.8209390640258789,0.0,accept,unanimous_agreement
1546259247,6275,compliance are not specific to k8s. fine to include an example just generalize the language please,0,0,0,0.9247087240219116,0.9813015460968018,0.9831530451774596,0.0,accept,unanimous_agreement
1546260902,6275,there's more to say about vulnerability checks and node checks,0,0,0,0.985158622264862,0.9818416833877563,0.9894731640815736,0.0,accept,unanimous_agreement
1548022484,6275,but then they would have already put the work into creating the compliance spec and we might potentially tell them we don't want it in trivy?,0,0,0,0.9752396941184998,0.9843942523002625,0.9863132238388062,0.0,accept,unanimous_agreement
1548032842,6275,"what do you mean with this sentence: ""provider-resource-spectype-version.yaml"" the reasoning here was is that we call it provider and resource/service in other parts of the source code and docs the spec type is specific to a benchmark version e.g. cis, i don't think it makes much sense to include the k8s version as that won't tell people more about the compliance scan and in some cases cis specs correspond to different k8s versions -keinan thoughts? recent cis specs for reference",0,0,0,0.950171709060669,0.974504292011261,0.9849743843078612,0.0,accept,unanimous_agreement
1548035264,6275,does this relate to line 19 or to the minimum spec structure?,0,0,0,0.9844713807106018,0.993575155735016,0.9927438497543336,0.0,accept,unanimous_agreement
1548036605,6275,"ah yes, of course",0,0,0,0.9017019271850586,0.9008237719535828,0.7646474242210388,0.0,accept,unanimous_agreement
1548072069,6275,i have moved some to the normal compliance documentation but i am thinking about the following instead: - divide the compliance docs into the following two separate sections in the table of content: built-in compliance and custom compliance. the custom compliance would then also detail how to contribute the custom compliance check to trivy,0,0,0,0.970887303352356,0.9861014485359192,0.9797220826148988,0.0,accept,unanimous_agreement
1548072723,6275,-keinan i need your help here,0,0,0,0.7485160231590271,0.9274769425392152,0.8063867688179016,0.0,accept,unanimous_agreement
1551318753,6275,"for example, that opehshift needs to appear in the file name, but doesn't have to have a placeholder in the naming convention template. we can ignore this sentence :) i think this is true only to cloud. for example, i wrote a k8s compliance (pss) and didn't have to know about service/provider in trivy and didn't use it in the name ok, makes sense. but just to clarify, this isn't what text you quoted says ""include the parent too, for example aws-eks""",1,1,1,0.9873027801513672,0.9873506426811218,0.984380841255188,1.0,accept,unanimous_agreement
1551321288,6275,minimum spec structure (and what follows),0,0,0,0.9852043390274048,0.989447832107544,0.9936244487762452,0.0,accept,unanimous_agreement
1551324032,6275,not sure i understand how your suggestion is different than existing?,0,0,-1,0.6124556660652161,0.9199512600898744,0.5586429834365845,0.0,accept,majority_agreement
1595202797,6275,-keinan :) help,1,1,1,0.7656163573265076,0.9961536526679992,0.9919691681861876,1.0,accept,unanimous_agreement
1595295766,6275,"terminology could be confusing, could be `custom compliance specs` is more accurate ?",0,0,0,0.9707659482955932,0.9167293310165404,0.9222895503044128,0.0,accept,unanimous_agreement
1595314100,6275,"`trivy-policies` repo on github name has been changed to `trivy-checks`, change should apply to all references in doc",0,0,0,0.9858471751213074,0.9940857887268066,0.9920052886009216,0.0,accept,unanimous_agreement
1595331145,6275,in example i would put (manual) as there is no check (nil),0,0,0,0.9882670044898988,0.991787850856781,0.9942407608032228,0.0,accept,unanimous_agreement
1603561683,6275,but people are writing a rego check and we referred to rego files as checks? what would be the difference then between the spec and the rego check? :thinking_face:,0,-1,1,0.956363320350647,0.8794298768043518,0.6860008239746094,,review,no_majority_disagreement
1597896405,6674,this description is confusing. my first thought is that this command updates the plugin. my second thought is that this command downloads the `trivy-plugins-index` repository in its entirety. we need to come up with the most clear description possible to avoid confusion with `upgrade` command it’s also worth pointing out that we are only updating the `cachedir/trivy/plugin/index.yaml` file.,-1,-1,-1,0.7780922055244446,0.580157995223999,0.7121729254722595,-1.0,accept,unanimous_agreement
1597899114,6674,you use slice of args: [a link] therefore we must support more than 1 argument.,0,0,0,0.986874520778656,0.9897328019142152,0.9948424696922302,0.0,accept,unanimous_agreement
1597901119,6674,i thought it might be worth mentioning that we search by plugin names and descriptions.,0,0,0,0.9729397892951964,0.9760069251060486,0.9765874743461608,0.0,accept,unanimous_agreement
1597903692,6674,"line 786: ` use: ""run name | url | file_path"",`",0,0,0,0.9870203733444214,0.9946572184562684,0.9943522214889526,0.0,accept,unanimous_agreement
1597909227,6674,can we use multiple words for searching?,0,0,0,0.9871951937675476,0.9896233677864076,0.9947986602783204,0.0,accept,unanimous_agreement
1598028398,6674,it should be ok as people are familiar with `apt-get update`.,0,0,0,0.9853082299232484,0.9177396893501282,0.9910037517547609,0.0,accept,unanimous_agreement
1598029478,6674,this is mentioned.,0,0,0,0.9778550863265992,0.9871860146522522,0.9944314360618592,0.0,accept,unanimous_agreement
1598068993,6674,"not only `apt`, but also [a link], [a link], and many other tools. but we can still update it if it confuses users.",0,0,0,0.982914388179779,0.977914333343506,0.9931520223617554,0.0,accept,unanimous_agreement
1598122115,6674,my concern is that we will change the logic for `update`. these changes may confuse users who currently use plugins.,-1,0,0,0.5743846297264099,0.8766669631004333,0.5578266978263855,0.0,accept,majority_agreement
1598215188,6674,"no, i just passed through the cli arguments, but it looks better to pass one argument for clarity. fixed in [a link]",0,0,0,0.9819662570953368,0.9648001194000244,0.9940465688705444,0.0,accept,unanimous_agreement
1598215809,6674,you're right. thanks. deleted [a link],1,1,1,0.9337694048881532,0.9824288487434388,0.9904909133911132,1.0,accept,unanimous_agreement
1598223396,6674,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1599358608,6674,let's also add log about the removal of plugin.,0,0,0,0.989063560962677,0.9909289479255676,0.9955220222473145,0.0,accept,unanimous_agreement
1599369387,6674,iiuc we need to add `silenceusage` to all plugin flags to avoid printing usage information in case of error. e.g.: [code block],0,0,0,0.9865423440933228,0.9940122961997986,0.9931689500808716,0.0,accept,unanimous_agreement
1599388437,6674,add this page to [a link] please.,0,0,0,0.9750023484230042,0.9867478609085084,0.9945278763771056,0.0,accept,unanimous_agreement
1599388488,6674,add this page to [a link] please.,0,0,0,0.9750023484230042,0.9867478609085084,0.9945278763771056,0.0,accept,unanimous_agreement
1599392277,6674,numbering is broken. [code block]bash $ trivy plugin update [code block]bash $ trivy plugin search name description maintainer output aqua a plugin for integration with aqua security saas platform aquasecurity kubectl a plugin scanning the images of a kubernetes resource aquasecurity referrer a plugin for oci referrers aquasecurity ✓ [...] [code block]bash $ trivy plugin install referrer [code block]bash $ trivy referrer --help [code block]bash $ trivy plugin upgrade [code block]bash trivy plugin uninstall referrer [code block],0,0,0,0.9742931127548218,0.982252836227417,0.9744097590446472,0.0,accept,unanimous_agreement
1599423327,6674,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
1599436625,6674,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1599436789,6674,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1599437009,6674,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
1599437275,6674,grouped plugin subcommands [a link],0,0,0,0.988931119441986,0.9927733540534972,0.995248019695282,0.0,accept,unanimous_agreement
1599437321,6674,grouped plugin subcommands [a link],0,0,0,0.988931119441986,0.9927733540534972,0.995248019695282,0.0,accept,unanimous_agreement
1898281725,8178,"each artifact must have `clean()` method so that the caller can be responsible for cleanup. what if moving that to `clean()`? it might help in case `inspect()` is called several times (we don't assume such usage, though).",0,0,0,0.9887091517448424,0.9944964051246644,0.9921240210533142,0.0,accept,unanimous_agreement
1898282403,8178,"nit: trivy already has several kinds of cache, like scan cache, cache assets, etc. `cachedir` looks like the root directory of the cache directory controlled by `--cache-dir`. i'd rename it to the explicit name. [code block]",0,0,0,0.9838929176330566,0.9933524131774902,0.9942902326583862,0.0,accept,unanimous_agreement
1898373753,8178,currently: [code block] let's use log.logger,0,0,0,0.9888260364532472,0.991859495639801,0.9934897422790528,0.0,accept,unanimous_agreement
1898374447,8178,we can wait for feedback from users. but perhaps some users will want to set custom exit code.,0,0,0,0.9849343299865724,0.9918627738952636,0.9913529753684998,0.0,accept,unanimous_agreement
1898375950,8178,i think it's better to use `trivy` in the cache directory name. this is necessary so that users can understand what directory it is and delete it (if necessary) [code block],0,0,0,0.9840562343597412,0.9911221265792848,0.989806830883026,0.0,accept,unanimous_agreement
1898379811,8178,correct me if i'm wrong: if layercachedir already contains a layer file - we'll still save the layer to that file (again): [a link],0,0,0,0.9666765332221984,0.9738890528678894,0.9515843391418456,0.0,accept,unanimous_agreement
1898390075,8178,we always delete it in case of an error or a successful scan.,0,0,0,0.986547350883484,0.9916006326675416,0.9908191561698914,0.0,accept,unanimous_agreement
1898477892,8178,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1898478019,8178,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1898482603,8178,this is a temporary cache that is removed in the case of an error or when the scan completes,0,0,0,0.9870519638061525,0.9941376447677612,0.9946459531784058,0.0,accept,unanimous_agreement
1898536002,8178,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1898536151,8178,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1919686134,8178,"we can delete the cache directory if `checkimagesize` returns an error, but how about other errors? if i understand correctly, `artifact.clean()` will not be called. so, should we call the defer function before handling the error? [a link]",0,0,0,0.9882509112358092,0.9934800863265992,0.9944168329238892,0.0,accept,unanimous_agreement
1919816753,8178,"`clean` takes artifactinfo, and if we call it before the error is checked, the artifactinfo will not be valid. maybe we should clear the cache inside `inspect` if any error occurred? [code block]",0,0,0,0.9886223673820496,0.9949586987495422,0.9938365817070008,0.0,accept,unanimous_agreement
1919825398,8178,"i thought using `clean()` is more straightforward, but you're actually right. we don't need this cache after `inspect` is complete. it makes more sense to delete it in the method.",0,0,0,0.968183934688568,0.9770867228507996,0.9850590229034424,0.0,accept,unanimous_agreement
1923444051,8178,"aqua is still checking their logic to calculate the image size, so the flag behavior is subject to change. i would mark it as experimental.",0,0,0,0.9873078465461732,0.919282078742981,0.9864730834960938,0.0,accept,unanimous_agreement
1923800104,8178,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
959273897,2589,"would it make sense to replace this multiple (will be much clear) `if` and `continue` with `switch case` , example : [code block]",0,0,0,0.98801451921463,0.9931051135063172,0.9923181533813475,0.0,accept,unanimous_agreement
959284806,2589,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
959287957,2589,"i'm using rancher desktop and did not got infra result at all , hope our checks take under consideration these use cases",1,0,0,0.739822506904602,0.8505589365959167,0.8771519064903259,0.0,accept,majority_agreement
960098891,2589,"what do you see when you do `kubectl get pods -n kube-system` on rancher? (rancher is not working on my computer not sure why, but kind/minikube/kops/k3 are all based on kubeadm, which will have all k8s components under `kube-system`)",0,0,0,0.9878469705581664,0.9890457391738892,0.9908081889152528,0.0,accept,unanimous_agreement
960500624,2589,so rancher doesn’t expose the apiserver? controller manager? or it is in another ns?,0,0,0,0.9842860102653505,0.987661838531494,0.9902192950248718,0.0,accept,unanimous_agreement
991946695,2589,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
991950830,2589,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
1002721946,2589,nit: there are `by default` twice.,0,0,0,0.98565936088562,0.9658693075180054,0.9896008372306824,0.0,accept,unanimous_agreement
934118812,2607,i'm not sure if commit suffix needs to be trimmed here. versions made from tag and another commit must have different version numbers. this can be confusing. i think we can trim this suffix in the check: [a link],0,0,0,0.5148959159851074,0.7085014581680298,0.9615266919136048,0.0,accept,unanimous_agreement
934220481,2607,could you elaborate on that?,0,0,0,0.9842915534973145,0.9892529845237732,0.9900977611541748,0.0,accept,unanimous_agreement
934228926,2607,"`subst` will remove any `v` in the tag. that would break if we have `v` elsewhere in the version like `v0.40v.6` for some reason. i'll try to change so it trims only the prefix we can't really trim it in the code as suggested that the version during the compile itself should not have the `v`, otherwise it becomes `version: version 0.29.1`.",0,0,0,0.986954629421234,0.9917595982551576,0.990983247756958,0.0,accept,unanimous_agreement
934240206,2607,"we can do `version := $(patsubst v%,%,$(shell git describe --tags --abbrev=0))` this will convert `v0.36v.0v` into `0.36v.0v`. aka stripping `v` only from prefix.",0,0,0,0.98896324634552,0.9944460391998292,0.9945640563964844,0.0,accept,unanimous_agreement
934242250,2607,"oh, i see what you mean now. i'll trim in the check.",0,0,0,0.9787508249282836,0.9512743949890136,0.9773897528648376,0.0,accept,unanimous_agreement
934244806,2607,"i only talked about the `--abbrev=0` flag. at the moment when i build the binary i get `v ` like this: `version: v0.30.4-11-g44d53bed` after the changes, we will only get the tag number in version for all commits between tags (for example, `version: v0.30.4` for the actual commit in the main branch). i think we only need to remove `v` prefix.",0,0,0,0.9839414954185486,0.9853980541229248,0.9917228817939758,0.0,accept,unanimous_agreement
934263645,2607,it makes sense. good catch. thanks.,1,1,1,0.9838789701461792,0.9942305088043212,0.9953561425209044,1.0,accept,unanimous_agreement
934366696,2607,"please check now with the latest commit | case | build | versions | output url | | ---- | ------------------------------------------------------------------------------------------------------ | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | | 1 | go build -ldflags ""-s -w -x=main.version=v0.30.4"" ./cmd/trivy/main.go | version: v0.30.4 | please see also [a link] for faster secret detection | | 2 | go build -ldflags ""-s -w -x=main.version=0.30.4"" ./cmd/trivy/main.go | version: 0.30.4 | please see also [a link] for faster secret detection | | 3 | go build ./cmd/trivy/main.go | version: dev | please see also [a link] for faster secret detection | | 4 | goreleaser check && goreleaser release --snapshot --rm-dist --skip-publish --skip-docker --skip-before | version: 0.30.4-snapshot-f2b17e3c | please see also [a link] for faster secret detection | | 5 | make build | version: 0.30.4-6-gf2b17e3c | please see also [a link] for faster secret detection |",0,0,0,0.9539570808410645,0.9717393517494202,0.9853610396385192,0.0,accept,unanimous_agreement
934432999,2607,i think we can not use regex: what do you think of something like this? [code block],0,0,0,0.9566114544868468,0.9030208587646484,0.9827369451522828,0.0,accept,unanimous_agreement
934436521,2607,what about pre-release versions (e.g. `0.30.5-alpha`). should this be considered?,0,0,0,0.9872682690620422,0.9947481751441956,0.9935539960861206,0.0,accept,unanimous_agreement
934450979,2607,i think we can just replace them with `dev` or accept the invalid url.,0,0,0,0.9867754578590392,0.9697956442832948,0.9878799319267272,0.0,accept,unanimous_agreement
934481864,2607,i was in favour of the regex as that would cover other cases for semver like if we had `v0.36.0+snapshot-1` or like `0.36.0-beta+exp.sha.5114f85`. wdyt?,0,0,0,0.9815396666526794,0.9827186465263368,0.9853957295417786,0.0,accept,unanimous_agreement
935087988,2607,"i agree with you. `v0.36.0+snapshot-1` requires a regex, but as said, we can return the invalid url for pre-release versions and versions with build metadata. wdyt? what is preferable?",0,0,0,0.9682520031929016,0.96329265832901,0.975753128528595,0.0,accept,unanimous_agreement
935179306,2607,"we can replace it with `dev`, but the question is again about detecting it's not a release version but a snapshot or pre-release or something, that again falls back to regex. i am the last person to want to use regex but also then i do want to produce valid urls as much as possible",0,0,0,0.9557501673698424,0.9424467086791992,0.9891504645347596,0.0,accept,unanimous_agreement
936372886,2607,"in development, i don't mind even if an invalid url is produced. if we want to make it valid as much as possible, we can use [a link]. [code block]",0,0,0,0.9685237407684326,0.9690666198730468,0.9519816637039183,0.0,accept,unanimous_agreement
936446809,2607,"sure, i'll switch to `go-version`.",0,0,0,0.9875325560569764,0.9882274270057678,0.9920336604118348,0.0,accept,unanimous_agreement
945125252,2607,resolved,0,0,0,0.9733997583389282,0.964900553226471,0.9564491510391236,0.0,accept,unanimous_agreement
945621081,2607,"as mentioned earlier, we want to use our go-version, not hashicorp/go-version. [a link]",0,0,0,0.9861177802085876,0.99249529838562,0.9956362843513488,0.0,accept,unanimous_agreement
1219701931,4557,"maybe dividing it into two lines? #### kubernetes sbom i.e. kbom kubernetes sbom referred to as `kbom`, produces the k8s core components (control plane components, node components and addons) bill of material",0,0,0,0.9648994207382202,0.9951249957084656,0.9913890957832336,0.0,accept,unanimous_agreement
1225902699,4557,[code block]sh trivy k8s cluster --format cyclonedx [code block],0,0,0,0.9769218564033508,0.992933750152588,0.994784414768219,0.0,accept,unanimous_agreement
1225903357,4557,i think this is not needed here if you accept the other suggestion,0,0,0,0.9836455583572388,0.9659953713417052,0.9841058850288392,0.0,accept,unanimous_agreement
1225903602,4557,"needs some more documentation if we have it: examples, supported platforms, limitation, etc.",0,0,0,0.9873741269111632,0.9920237064361572,0.9920319318771362,0.0,accept,unanimous_agreement
1227477526,4557,i don't want to add marshalkbom here. kubernetes should directly call core.marshal.,0,0,0,0.980927586555481,0.9567148685455322,0.9881595373153688,0.0,accept,unanimous_agreement
1227479038,4557,it is kubernetes-specific. i think it should be located under `pkg/k8s/report`.,0,0,0,0.9879891872406006,0.9941688776016236,0.9937565326690674,0.0,accept,unanimous_agreement
1227479072,4557,it is kubernetes-specific. i think it should be located under `pkg/k8s/report`.,0,0,0,0.9879891872406006,0.9941688776016236,0.9937565326690674,0.0,accept,unanimous_agreement
1227482035,4557,i don't think we need to call `marshalreport` here. you can directly construct core.component. [code block],0,0,0,0.9864405989646912,0.988138735294342,0.9899469017982484,0.0,accept,unanimous_agreement
1227521124,4557,we might need to replace it with this method instead : [code block] the other option is to expose(public) `marshaler` and `marshaler.core` what do you prefer?,0,0,0,0.9865787625312804,0.9941853880882264,0.995715081691742,0.0,accept,unanimous_agreement
1227521193,4557,we might need to replace it with this method : [code block] the other option is to expose (public) `marshaler.core` what do you prefer?,0,0,0,0.9852178692817688,0.9936570525169371,0.9956698417663574,0.0,accept,unanimous_agreement
1229389669,4557,"i'm not sure, but do we want to remove all `v` occurrences? doesn't `strings.trimprefix(version, ""v"")` work?",0,0,0,0.9794268608093262,0.8951694369316101,0.9538438320159912,0.0,accept,unanimous_agreement
1229391104,4557,please use our library. [a link],0,0,0,0.9646309018135072,0.8962716460227966,0.9944074153900146,0.0,accept,unanimous_agreement
1229393395,4557,you can use this const. other places as well [a link],0,0,0,0.9871740341186525,0.9891807436943054,0.9949743747711182,0.0,accept,unanimous_agreement
1229393427,4557,ditto [a link],0,0,0,0.957721710205078,0.9786297678947448,0.9932494163513184,0.0,accept,unanimous_agreement
1229393546,4557,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1229393628,4557,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1229393766,4557,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1229399119,4557,we can use the constructor. [a link],0,0,0,0.9880107045173644,0.9665725827217102,0.996347725391388,0.0,accept,unanimous_agreement
1229399647,4557,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
1229436416,4557,i think we can leverage the existing function. [code block],0,0,0,0.9881823658943176,0.9585819244384766,0.9895558953285216,0.0,accept,unanimous_agreement
1229439749,4557,"if you just want to sort by name, you don't need the new type implementing `sort.interface`. [code block]",0,0,0,0.987726628780365,0.9916502237319946,0.9952698349952698,0.0,accept,unanimous_agreement
1229454438,4557,i aim to keep `pkg/report` and `pkg/k8s/report` independent. can we add a tiny writer in `pkg/k8s/report/cyclonedx.go`? [code block],0,0,0,0.9870664477348328,0.9947547912597656,0.9937973618507384,0.0,accept,unanimous_agreement
1230374158,4557,"for purl, we should use canonical names, `k8s.io/kubelet`. [a link]",0,0,0,0.987266719341278,0.9935950636863708,0.9953142404556274,0.0,accept,unanimous_agreement
1230374917,4557,"other components as well, like `k8s.io/apiserver`. you can see the list here. [a link]",0,0,0,0.9816668033599854,0.9867167472839355,0.9948906898498536,0.0,accept,unanimous_agreement
1230709462,4557,"do we need to replace it? if it is a helm error, we can bump the helm version in defsec. [code block] [a link]",0,0,0,0.9885041117668152,0.995439887046814,0.9956240057945251,0.0,accept,unanimous_agreement
1230886541,4557,"sure, created [a link] for defsec",0,0,0,0.9841666221618652,0.9909600019454956,0.9926303625106812,0.0,accept,unanimous_agreement
1231452134,4557,"i have replaced `defsec` with `helm v3.12.1` still getting error as result from dependency issue , see my comments on `go.mod` file, could be replacing kubectl is the best option until latest `github.com/docker/docker` can be used, wdyt?",0,0,0,0.9856693744659424,0.9894329905509948,0.9918085932731628,0.0,accept,unanimous_agreement
1233212787,4557,replacing `oras-go` helps. it works in my local env. [a link],0,0,0,0.978277027606964,0.9530219435691832,0.7131269574165344,0.0,accept,unanimous_agreement
1701256436,7261,we expected an array here. but now it's a string. i think ` custom-headers: []` would be better.,0,0,0,0.9744449853897096,0.9919281005859376,0.9893250465393066,0.0,accept,unanimous_agreement
1701274069,7261,we duplicate default values ​​in comment and values. maybe we can set a limit on values ​​(like 2 values) to avoid such a big page e.g.: [code block],0,0,0,0.9743650555610656,0.9923843741416932,0.986138641834259,0.0,accept,unanimous_agreement
1701277665,7261,"i think it's not convenient to work with such a large number of values ​​(gh pages use horizontal scrolling) i don't like hardcoding, but maybe we should override default values with gh links (as is done now)?",-1,-1,0,0.8592513203620911,0.8707571625709534,0.5639591217041016,-1.0,accept,majority_agreement
1701278759,7261,i think `client/server` flags are not most popular. perhaps we can move them to the end of the array or just lower in the list.,0,0,0,0.9833577275276184,0.9746322631835938,0.9864859580993652,0.0,accept,unanimous_agreement
1701287765,7261,"we can remove case for `string`. `default` also works correctly for `string` we get extra space after `:` for empty strings, but this is still valid `yaml`. [code block]",0,0,0,0.9878377914428712,0.993647038936615,0.9952541589736938,0.0,accept,unanimous_agreement
1701529020,7261,sure. it's a mistake,-1,-1,-1,0.8366828560829163,0.7812370657920837,0.964712917804718,-1.0,accept,unanimous_agreement
1701529136,7261,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1701530267,7261,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1701531364,7261,"ok, done",0,0,0,0.9768383502960204,0.7370215654373169,0.9714605808258056,0.0,accept,unanimous_agreement
1701533471,7261,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1701537110,7261,i'm not sure about it. usually the content is searched in alphabetical order,0,-1,0,0.6261706352233887,0.8495627641677856,0.7480672597885132,0.0,accept,majority_agreement
1701555804,7261,"as we told offline, my thought about usecases is next: it's convenient to copy/paste default values from docs and then to customize it. maybe i'm wrong. i thought the hardcoded link was added to show actual state for default values. now the actual state is added automatically.",0,0,0,0.9269042015075684,0.9735000133514404,0.9631385207176208,0.0,accept,unanimous_agreement
1701557999,7261,"there are aws options is in the end. i'm not sure, that we should add these flags now.",0,0,0,0.9760125279426576,0.7236931324005127,0.960959792137146,0.0,accept,unanimous_agreement
1701563671,7261,client/server flags are reordered now,0,0,0,0.9885220527648926,0.992064893245697,0.9956412315368652,0.0,accept,unanimous_agreement
1701648301,7261,"if we use all default values ​​in `yaml` struct - it will be easier for users to get default values ​​from `yaml` struct than to copy them from comment. i suggested limiting the number of default values ​​[a link]. but maybe a better way is to remove `default is ...` comment, but use all default values ​​in the `yaml` struct. especially since now the structure clearly shows the type: - `addr: `. we can add `""""` for empty string to get `addr: """"` - `custom-headers: []` - `download-java-only: false` - etc.",0,0,0,0.9774616360664368,0.994002640247345,0.982264757156372,0.0,accept,unanimous_agreement
1701658983,7261,"yes. you are right. overall, the alphabetical order suits me. why?",0,1,0,0.8922222256660461,0.4952470362186432,0.5535265207290649,0.0,accept,majority_agreement
1701662595,7261,"ok, let's try. removed default values.",0,0,0,0.985715925693512,0.9788466095924376,0.9939835667610168,0.0,accept,unanimous_agreement
1701662841,7261,oh... right! i forgot about that. so we don't need to include `aws` flags.,0,-1,0,0.8459290266036987,0.7857836484909058,0.5837547779083252,0.0,accept,majority_agreement
1701666501,7261,let's add information before `global options` - that `yaml` files below contain default values. and the user can find possible values `./cli/trivy.md`,0,0,0,0.9845380783081056,0.9947038292884828,0.9949308037757874,0.0,accept,unanimous_agreement
1701666511,7261,aws flags removed,0,0,0,0.9819459319114684,0.989309787750244,0.9487540125846864,0.0,accept,unanimous_agreement
1701674975,7261,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1701677940,7261,great. thanks!,1,1,1,0.9902663826942444,0.9955005049705504,0.9970576763153076,1.0,accept,unanimous_agreement
1794896945,7679,"24 hours is incorrect. we publish trivy-db every 6 hours, but update interval is 24 hours. for trivy-java-db: publish every 24 hours, update interval is 3 days.",0,0,0,0.954049825668335,0.9713782668113708,0.964375615119934,0.0,accept,unanimous_agreement
1843431133,7679,thanks !,1,1,1,0.9308210611343384,0.9159799218177797,0.8865044713020325,1.0,accept,unanimous_agreement
1846010600,7679,"if i understand correctly, there is no chance that `mirror.gcr.io` requires authentication. we should skip `mirror.gcr.io` here. [a link]",0,0,0,0.9858596920967102,0.98301100730896,0.9945127964019777,0.0,accept,unanimous_agreement
1846024172,7679,"yeah, you're probably right, i didn't think about it changed in [a link]",0,0,0,0.9496697783470154,0.903700590133667,0.9786922335624696,0.0,accept,unanimous_agreement
1846051406,7679,it's not correct. ghcr doesn't respect the github token now.,0,-1,0,0.5981626510620117,0.5126920342445374,0.9457712769508362,0.0,accept,majority_agreement
1846052955,7679,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
1846063989,7679,but some users wrote that gh token helps them. do you think that for ghcr it makes no difference at all whether the user is authorized or not when downloading the image?,0,0,0,0.987613558769226,0.9711161255836488,0.9901639819145204,0.0,accept,unanimous_agreement
1846071453,7679,"trivy has [a link] that doesn't reflect `github_token` now, so i'm sure those users luckily didn't see rate limit errors. i saw [a link] when i set the token, so i believe it has no effect on ghcr. if we confirm it helps, we can add it back.",0,0,0,0.9710426330566406,0.9382187128067015,0.8619435429573059,0.0,accept,unanimous_agreement
1846075640,7679,got it! removed info about ghcr in [a link],1,1,1,0.5118688344955444,0.7669779658317566,0.9414886236190796,1.0,accept,unanimous_agreement
1846075840,7679,thanks! fixed in [a link],1,1,1,0.97394460439682,0.9859125018119812,0.985136866569519,1.0,accept,unanimous_agreement
1846101109,7679,is amazon ecr still relevant here if it has been replaced by gcr?,0,0,0,0.9871485829353333,0.9944262504577636,0.9932055473327636,0.0,accept,unanimous_agreement
1846116036,7679,there is an extra `c` in `once` which should be `one example of this ...`,0,0,0,0.9831212759017944,0.9939507246017456,0.9938894510269164,0.0,accept,unanimous_agreement
1846149737,7679,we still push trivy-db and trivy-java-db into ecr. so this is still relevant for users using ecr.,0,0,0,0.9840127229690552,0.99442720413208,0.9946724772453308,0.0,accept,unanimous_agreement
1846150204,7679,thanks! we will fix that in another pr.,1,1,1,0.983182430267334,0.9733363389968872,0.9906885623931884,1.0,accept,unanimous_agreement
1846178253,7679,- #7942,0,0,0,0.9331057071685792,0.977797031402588,0.9880181550979614,0.0,accept,unanimous_agreement
355468898,303,i'd rather log or return error. having both we might see duplicate error messages in the error log,0,0,0,0.971701979637146,0.9788574576377868,0.969239056110382,0.0,accept,unanimous_agreement
355471029,303,missing call to `mockvulnclient.assertexpectations(t)` ?,0,0,0,0.957413911819458,0.9940440058708192,0.9900611639022828,0.0,accept,unanimous_agreement
355471947,303,i'd skip this log and stick to the rule; either log or propagate error to avoid duplicates,0,0,0,0.9834733605384828,0.984491765499115,0.9908682107925416,0.0,accept,unanimous_agreement
355474428,303,"here and in previous test you have a very similar strucs to hold input and return args passed to mocks. you can consider having a generic structure to describe an expected behaviour of the given mock, see [a link] [code block] this might improve readability of the test cases.",0,0,0,0.9801264405250548,0.9872756600379944,0.992923140525818,0.0,accept,unanimous_agreement
355475670,303,add assert expectations for `mockvulnclient`,0,0,0,0.9837074875831604,0.9937973618507384,0.9948527216911316,0.0,accept,unanimous_agreement
355477539,303,log with debug or trace?,0,0,0,0.989431858062744,0.9920768737792968,0.9907055497169496,0.0,accept,unanimous_agreement
355479877,303,add some context message why it failed unless err contains all the details to facilitate troubleshooting.,0,0,0,0.9822302460670472,0.980889618396759,0.9913544058799744,0.0,accept,unanimous_agreement
355481644,303,add some context message to the error. i assume we continue running the server without error because in 10 seconds there's a retry. is that correct?,0,0,0,0.982241988182068,0.9325031638145448,0.9939693212509156,0.0,accept,unanimous_agreement
355499917,303,what's actually asserted in theses tests?,0,0,0,0.982977032661438,0.9924927353858948,0.9892842173576356,0.0,accept,unanimous_agreement
355501764,303,add message unless err contains all info to figure out what's wrong in case of error.,0,0,0,0.9539350271224976,0.9532349705696106,0.991661548614502,0.0,accept,unanimous_agreement
355512416,303,shouldn't it depend on wire install goal? it fails on my local [code block],0,0,0,0.975683093070984,0.9867745637893676,0.990401327610016,0.0,accept,unanimous_agreement
355522737,303,i'm so sorry... i fixed it. would you try it again?,-1,-1,-1,0.9869137406349182,0.9930419921875,0.9958412051200868,-1.0,accept,unanimous_agreement
355524524,303,"this is a function in a server side. so, if a server returns an error, the error will be displayed only in a client side. the error will not be duplicated in the server side. or, do you mean the server should not display an error?",0,0,0,0.9837170839309692,0.9847789406776428,0.9908766150474548,0.0,accept,unanimous_agreement
355527497,303,it was intended because i thought the test failed due to a lack of calling vulnclient in some test cases. but it was misunderstood. i added assertexpectations [a link] thanks.,0,1,1,0.7492241859436035,0.8484185934066772,0.9384567737579346,1.0,accept,majority_agreement
355528022,303,"it is the same reason. if it is confusing, we can add a comment. [a link]",0,0,0,0.9790065884590148,0.9618872404098512,0.9941959381103516,0.0,accept,unanimous_agreement
355529175,303,i fixed it. [a link],0,0,1,0.9865824580192566,0.7514763474464417,0.5910055041313171,0.0,accept,majority_agreement
355530488,303,absolutely:loudly_crying_face: thanks. [a link],1,1,1,0.8239073157310486,0.9915997982025146,0.9930217862129213,1.0,accept,unanimous_agreement
355536106,303,"yup, it works now",0,1,1,0.7253625392913818,0.6364091038703918,0.5131068229675293,1.0,accept,majority_agreement
355536183,303,"`tt.want` is a `config` type which has many fields, but `context` is a pointer. so, i wanted to do `assert.equal(t, tt.want, c, tt.name)` except for `tt.want.context` and `tt.want.logger`. i had no idea to do it, so i copied the value (ctx) to the wanted value (tt.want.context). do you have any idea to compare an actual value and an expected value if they contain a pointer?",0,0,0,0.9774615168571472,0.9781064987182616,0.9745398163795472,0.0,accept,unanimous_agreement
355639434,303,my concern was that it's logged twice on the server side. here and where `detect()` with error handling.,0,0,0,0.9656127095222472,0.9311221837997437,0.8963158130645752,0.0,accept,unanimous_agreement
355648575,303,"i wish we had such utility in golang which i used a lot in my java days -> [a link] we can improve it later on though. just remember to add assert which refers to `tt.want`. i don't see it, so even if you set the `context` we don't actually do asserts.",0,0,0,0.9506842494010924,0.9544108510017396,0.8999943733215332,0.0,accept,unanimous_agreement
355946286,303,i see. `detect()` is a method called internally via http server. [a link] this error will be handled on a client side. it will not be logged twice on the server side.,0,0,0,0.9885491728782654,0.9933030605316162,0.993708610534668,0.0,accept,unanimous_agreement
355953146,303,it's true. i will add more context message.,0,0,0,0.9775927662849426,0.9064913988113404,0.9783338308334352,0.0,accept,unanimous_agreement
355954577,303,"in this case, the error has enough information. but i will add more information just in case.",0,0,0,0.9840944409370422,0.9799478054046632,0.99224853515625,0.0,accept,unanimous_agreement
355957759,303,i fixed it [a link],0,0,0,0.9855576157569884,0.9255636930465698,0.9693162441253662,0.0,accept,unanimous_agreement
355958560,303,i fixed it. 52ebb2c,0,0,0,0.979920208454132,0.9251298308372498,0.7225936651229858,0.0,accept,unanimous_agreement
355958646,303,i fixed it. 52ebb2c,0,0,0,0.979920208454132,0.9251298308372498,0.7225936651229858,0.0,accept,unanimous_agreement
355968546,303,got it!,1,1,1,0.9387748837471008,0.851534366607666,0.9894996285438538,1.0,accept,unanimous_agreement
356224760,303,"your approach looks so cool, but i'd like to keep named args. i refactored here. let me know your thought, please. if it looks fine, i will try to refactor other places. [a link]",1,1,1,0.9497359991073608,0.9385486245155334,0.9897019863128662,1.0,accept,unanimous_agreement
356233812,303,"yes, that is exactly what i want. i didn't find it in testify/assert. that was my fault. i added the assertion. [a link]",-1,0,0,0.9628720879554749,0.9178414344787598,0.8820629119873047,0.0,accept,majority_agreement
356506888,303,i like having a struct for mock expectations as you did in `detector_mock.go`. also setting the expectations in the `newmockdetector` is a great place to do so.,1,1,1,0.972817599773407,0.9081868529319764,0.9632590413093568,1.0,accept,unanimous_agreement
356518248,303,nit: you can use varargs in newmockdetector constructor to shorten this line,0,0,0,0.9850289225578308,0.9905479550361632,0.9953371286392212,0.0,accept,unanimous_agreement
1324009775,5154,this comment is no longer needed,0,0,0,0.9624837636947632,0.9839076995849608,0.9907638430595398,0.0,accept,unanimous_agreement
1324013976,5154,why this comment? it almost duplicates the variable name,0,0,0,0.9197454452514648,0.7349715828895569,0.990502953529358,0.0,accept,unanimous_agreement
1324052211,5154,thanks! done.,1,1,1,0.9528998732566832,0.9886341094970704,0.989313781261444,1.0,accept,unanimous_agreement
1324052564,5154,agreed! done.,0,1,1,0.5407895445823669,0.9781911373138428,0.966742217540741,1.0,accept,majority_agreement
1324052874,5154,thanks again :) done,1,1,1,0.9874919652938844,0.9950271248817444,0.9962658286094666,1.0,accept,unanimous_agreement
1328232217,5154,what if we handle all possible ways? something like that: [code block],0,0,0,0.9713125824928284,0.9907315373420716,0.991284728050232,0.0,accept,unanimous_agreement
1328236753,5154,"according to the [a link], name is a required field.",0,0,0,0.9861708879470824,0.9905637502670288,0.9944872260093688,0.0,accept,unanimous_agreement
1328238855,5154,"oh... right. thanks! then, we can check that the ""name"" field contains ""groupid"".",1,1,1,0.9646835327148438,0.982842981815338,0.9928643703460692,1.0,accept,unanimous_agreement
1328319300,5154,thanks for your advices! added some more checks. main idea is to catch smth like: 1st version of sbom (we don't have group and that's why we can get empty list of vulners): [code block] 2nd version of sbom (we have both - group and name): [code block],1,1,1,0.971572995185852,0.984863817691803,0.9937527775764464,1.0,accept,unanimous_agreement
1328324015,5154,your examples are not valid. e.g. `name` is required field.,0,0,0,0.9766077995300292,0.9822078347206116,0.9909325838088988,0.0,accept,unanimous_agreement
1328327972,5154,"also there is problem in next case: `purl` field is not required - [a link] if `purl` and `group` are empty - we miss package name. i understand that this is strange case, but we need to check all possible cases.",0,0,0,0.7714441418647766,0.9280338287353516,0.8665989637374878,0.0,accept,unanimous_agreement
1328341431,5154,"hm, i removed all data in this two examples just to show fields. in both cases we have `name`, but in first we don't have `group`. maybe i didn't understand you comment abiut ""`name` is required"". yes if `purl` and `group` are missing we miss the package. in last commit i've added checks like you told me - check the `group`. you want me to add some checks to identify if `purl` is present? because at the moment i don't check if `purl` is present and trying to parse it.",0,0,0,0.937179684638977,0.9821911454200744,0.974997878074646,0.0,accept,unanimous_agreement
1328362770,5154,"oh... i didn't understand that you removed all values from these fields ( i thought these field are empty). i think we need to add that. `group` and `purl` can be omitted. so in this case we need to get package name from `name` field. it is strange, but it is possible: [code block] i",-1,-1,-1,0.7293396592140198,0.8986861705780029,0.7331320643424988,-1.0,accept,unanimous_agreement
1328381231,5154,ok! will do it. but if we don't have `group` or `purl` what we need in return? in case of java only `name` will be not enough to get vulnerability data,0,0,0,0.7615107297897339,0.5400192141532898,0.8832426071166992,0.0,accept,unanimous_agreement
1328386990,5154,use `name` field. it is better than nothing. it is also possible that `name` will use ` : ` format. e.g. we used this format in `name` before #4674.,0,0,0,0.9674022197723388,0.990020513534546,0.948318362236023,0.0,accept,unanimous_agreement
1328401576,5154,hope i get it right :) added checks and `name` as default behavior if there is no `group` or `purl`,1,1,1,0.9795371294021606,0.9947273135185242,0.9960313439369202,1.0,accept,unanimous_agreement
1328419975,5154,we already parsed `purl` here - [a link] we can use this.,0,0,0,0.9893155097961426,0.9850017428398132,0.995367169380188,0.0,accept,unanimous_agreement
1328482182,5154,"great idea, thanks! made some changes",1,1,1,0.992837131023407,0.9957740902900696,0.9972042441368104,1.0,accept,unanimous_agreement
1329768061,5154,"i rechecked code before this line and found that we don't parse cyclonedx without `purl` - [a link] so we can remove this check (sorry for confusing you). i think we can remove `purl == """"` check and move logic to `getpackagename` and use [a link] ([a link]. something like that: [code block]",0,-1,-1,0.7924613952636719,0.9616018533706664,0.7483422160148621,-1.0,accept,majority_agreement
1331142614,5154,wow :) great idea! thanks a lot! done :),1,1,1,0.9944493770599364,0.9950290322303772,0.9976378679275512,1.0,accept,unanimous_agreement
1062487767,3391,i think we want the company to be the title. otherwise what do we expect the title to be?,0,0,0,0.9792388081550598,0.9835042953491212,0.9835878014564514,0.0,accept,unanimous_agreement
1062490005,3391,you probably didn't mean to add this as a label right?,0,0,0,0.9620551466941832,0.9779928922653198,0.9806895852088928,0.0,accept,unanimous_agreement
1062494976,3391,so in other words i think we should remove this field,0,0,0,0.9788383841514589,0.967681348323822,0.9918600916862488,0.0,accept,unanimous_agreement
1062496935,3391,:face_with_monocle:,0,0,0,0.9853910207748412,0.9872328042984008,0.9832987189292908,0.0,accept,unanimous_agreement
1062500164,3391,"not sure if this is valuable info to collect, but also - the state oss today isn't easy to define, for example gitlab using trivy - oss or not? we need to make sure the form is frictionless to fill",0,0,0,0.9690892696380616,0.9318435192108154,0.6630972623825073,0.0,accept,unanimous_agreement
1062501285,3391,just to match the description you gave,0,0,0,0.985243558883667,0.9662677645683287,0.9930877089500428,0.0,accept,unanimous_agreement
1062502626,3391,"as much as this is super valuable to us, i think all the fields should be optional. if someone wants to just put their name and leave, they should be able to. wdyt?",0,0,1,0.7694134712219238,0.5308095216751099,0.7038217782974243,0.0,accept,majority_agreement
1062506936,3391,(see my other comment about company name for why this suggestion),0,0,0,0.98004949092865,0.9753077030181884,0.9933776259422302,0.0,accept,unanimous_agreement
1071477358,3391,"people will not know that they should put as title the company -- so i would rather ask explicitly. in the discussion yaml itself on the first line, the title has to be ""show and tell"" so the form shows up when people select show and tell",0,0,0,0.9587594270706176,0.9869917631149292,0.9887093901634216,0.0,accept,unanimous_agreement
1071478457,3391,in the gh documentation on creating a discussion form they explicitly said that the title of the yaml for the form has to match the selection name in the gh discussions of your project -- i think this does not mean that people cannot set a title for their discussion (?),0,0,0,0.9570208191871644,0.9908664226531982,0.9841614961624146,0.0,accept,unanimous_agreement
1071478643,3391,oki,0,0,0,0.9661612510681152,0.8126640319824219,0.8382559418678284,0.0,accept,unanimous_agreement
1071479286,3391,hmm you have a point,0,0,0,0.9722447991371156,0.8202630281448364,0.9753730297088624,0.0,accept,unanimous_agreement
1071486962,3391,i think you might have confused name of file with title of form?,0,0,0,0.9798840284347534,0.9767782688140868,0.9814531803131104,0.0,accept,unanimous_agreement
1071874318,3391,would you like the type to be markdown?,0,0,0,0.986033856868744,0.9926531314849854,0.9920306205749512,0.0,accept,unanimous_agreement
1071894208,3391,that's also not desired (will render as markdown codeblock). just remove it,0,0,0,0.9869078397750854,0.9419293403625488,0.9946624636650084,0.0,accept,unanimous_agreement
1804399827,7690,nit: we have `log.filepath` to log the path [a link],0,0,0,0.9891947507858276,0.9868198037147522,0.9935617446899414,0.0,accept,unanimous_agreement
1804419866,7690,what if we put the loop body in a separate function for readability? then the error will only need to be logged once,0,0,0,0.9845349788665771,0.9870730638504028,0.991144061088562,0.0,accept,unanimous_agreement
1804527046,7690,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1804527416,7690,"oh, thanks. i didn't know it done [a link]",1,1,1,0.9114214181900024,0.8788129687309265,0.879389762878418,1.0,accept,unanimous_agreement
1805653721,7690,is there any benefit of defining this of fixed length? why not simplify like so [code block],0,0,0,0.9820613265037536,0.990812361240387,0.992655873298645,0.0,accept,unanimous_agreement
1805663259,7690,"it seems that this file is a little short on test coverage, maybe we can improve that a bit?",0,0,0,0.9781241416931152,0.9472616314888,0.9734060764312744,0.0,accept,unanimous_agreement
1805701768,7690,"just a thought, would they be also cleaned when we run `trivy clean`?",0,0,0,0.9861971735954284,0.9925253391265868,0.9799644947052002,0.0,accept,unanimous_agreement
1805871852,7690,these temporary files remove after the k8s scan. so i don't think we should use `trivy clean` here,0,0,0,0.9850061535835266,0.9870997071266174,0.9917028546333312,0.0,accept,unanimous_agreement
1805895164,7690,"try to avoid a few copy operations and memory allocations by grabbing it all up front. (it's a quota )). i'm not sure it makes sense, so we can change this one. do you think we should use a simple construction?",0,0,0,0.9379463791847228,0.8937268853187561,0.974256992340088,0.0,accept,unanimous_agreement
1805939056,7690,"i'm just thinking of the case when trivy exits unexpectedly and files are not cleaned up. i think the `defer` should take care of it, but just a thought.",0,0,0,0.8274253606796265,0.9043845534324646,0.9563866853713988,0.0,accept,unanimous_agreement
1805940667,7690,"yes, you're right. we should improve test cases",0,1,0,0.9059963822364808,0.5882729291915894,0.9767113924026488,0.0,accept,majority_agreement
1805957463,7690,"trivy creates these files inside temporary folder, so i think os can take care of it. or do i miss something? thanks",1,1,1,0.9545210599899292,0.7905415296554565,0.9212852716445924,1.0,accept,unanimous_agreement
1806964208,7690,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1807125559,7690,i haven't benchmarked this so i can't say for sure but i would assume the go runtime can grow the slice as needed without much of an overhead.,0,0,0,0.98002427816391,0.964945375919342,0.982314944267273,0.0,accept,unanimous_agreement
1807127247,7690,fair enough :thumbs_up:,0,1,1,0.5936712622642517,0.9453250169754028,0.9949145317077636,1.0,accept,majority_agreement
1807138197,7690,"ok - since this pr also fixes a critical bug for k8s scanning, we can merge it first. i opened [a link] to track improving the test coverage.",0,0,0,0.975714385509491,0.95482736825943,0.9921299815177916,0.0,accept,unanimous_agreement
1808394990,7690,"`make` is faster than `var`, so if we know the length beforehand, we should use `make` for performance reasons. [a link] if the length of the slice is small enough, i personally prefer `var` because it's easier to read. in this case, k8s resources can be a lot. it makes sense to use `make`.",0,0,0,0.9636529684066772,0.9812414646148682,0.9808198809623718,0.0,accept,unanimous_agreement
1808401992,7690,"nit: i think `directory` is more common than `folder` in unix. this function actually calls `mkdirtemp`, not `mkfoldertemp`.",0,0,0,0.9867364764213562,0.990225613117218,0.9899269342422484,0.0,accept,unanimous_agreement
1808457127,7690,rename [a link],0,0,0,0.9854812026023864,0.9917600750923156,0.9951573014259338,0.0,accept,unanimous_agreement
747469261,1230,"[a link] shows an error: [code block] it seems that we should remove `+1`, right?",0,0,0,0.9734805226325988,0.991463840007782,0.9936311841011048,0.0,accept,unanimous_agreement
747542161,1230,"ah yes, my bad! :downcast_face_with_sweat:",-1,-1,-1,0.9903404116630554,0.9911491870880128,0.9958374500274658,-1.0,accept,unanimous_agreement
747660560,1230,the trailing comma is wrong,0,0,0,0.8523991107940674,0.55799800157547,0.7882459759712219,0.0,accept,unanimous_agreement
1002710944,2951,-keinan wouldn't this be better under the `kubernetes` section? it is very specific to k8s.,0,0,0,0.9851030111312866,0.9917379021644592,0.9663112759590148,0.0,accept,unanimous_agreement
1002711289,2951,"both word as plural doesn't read correct, maybe simplify as `results` only?",0,0,0,0.9695799350738524,0.989980399608612,0.9865894317626952,0.0,accept,unanimous_agreement
1002711309,2951,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1002746268,2951,+1,0,0,0,0.696722686290741,0.7702900171279907,0.9816582202911376,0.0,accept,unanimous_agreement
1002746550,2951,i don't think we can keep maintaining this test data as it is quite large. can we make it small?,0,0,0,0.9276413917541504,0.5424491763114929,0.7925792336463928,0.0,accept,unanimous_agreement
1002746686,2951,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1002746817,2951,"if we need a test using actual data, we can do that in integration tests rather than unit tests.",0,0,0,0.986212968826294,0.990623414516449,0.9896897077560424,0.0,accept,unanimous_agreement
1002747042,2951,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1002747088,2951,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1002748823,2951,but we will have to move it later again as we are planning to add `aws cis compliance spec` as well so kubernetes section will not match.,0,0,0,0.9605485796928406,0.9909961223602296,0.9922441840171814,0.0,accept,unanimous_agreement
1003218853,2951,"i think we can have nsa under kubernetes and cis under aws respectively. `trivy k8s` users may not be interested in aws cis. we can also have a dedicated page for compliance, but the page just contains links to each page.",0,0,0,0.9843701124191284,0.992301344871521,0.9885758757591248,0.0,accept,unanimous_agreement
1003226976,2951,shouldn't it be under report flags?,0,0,0,0.9746201038360596,0.99403715133667,0.9907031059265136,0.0,accept,unanimous_agreement
1003277343,2951,does `id` mean the control id?,0,0,0,0.9850417971611024,0.9933086633682252,0.9937849044799804,0.0,accept,unanimous_agreement
1004320936,2951,can we add a reference to the nsa hardening guidance? this one? [a link],0,0,0,0.9886921644210817,0.9895880222320556,0.9961819648742676,0.0,accept,unanimous_agreement
1004321551,2951,can we add a description of what the percentage describes? non-root containers: 89.89% might not be clear.,0,0,0,0.984566867351532,0.9920948147773744,0.99273419380188,0.0,accept,unanimous_agreement
1004328661,2951,"not sure, as it trigger scanning behind the scene , so it invoke scan process",0,0,0,0.9812524914741516,0.9662045240402222,0.9654820561408995,0.0,accept,unanimous_agreement
1004332925,2951,its scan checks id --> `map[avd-124-1234]types.results`,0,0,0,0.9866108894348145,0.9937844276428224,0.9947997331619264,0.0,accept,unanimous_agreement
1004354152,2951,"yes, it also affects scanning, but it is mainly for reporting, no?",0,0,0,0.9729596376419068,0.9819489121437072,0.991569459438324,0.0,accept,unanimous_agreement
1004361819,2951,"for example, `--format cyclonedx` also affects scanning since sbom doens't need vulnerabilities, misconfigurations and secrets, but it is under report flags as it is mainly for reporting.",0,0,0,0.9783824682235718,0.99382883310318,0.9932844638824464,0.0,accept,unanimous_agreement
1004414707,2951,do we need to override unmarshalyaml? i wonder if we can validate scanners after unmarshaling.,0,0,0,0.9040714502334596,0.9743599891662598,0.9868948459625244,0.0,accept,unanimous_agreement
1004419527,2951,sure can be done afterwards,0,0,0,0.9808502793312072,0.9820830821990968,0.993626356124878,0.0,accept,unanimous_agreement
1004451162,2951,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1211063681,4210,i'm not too fond of this approach. any ideas?,-1,-1,-1,0.9442186951637268,0.9759012460708618,0.9795390367507936,-1.0,accept,unanimous_agreement
1211272672,4210,"what if we will add flag (folder names) insted of this hardcode? flag will show that we need to get packages from sbom instead of language files for those folders. for `fs,` image`, etc.. `opt/bitnami` will be default value. therefore, users can use this flag for other folders.",0,0,0,0.9893206357955932,0.995017945766449,0.9930856227874756,0.0,accept,unanimous_agreement
1212499257,4210,"in the case of bitnami, sbom and executable files are located under `opt/bitnami`, but i'm not sure about other cases. i'm afraid the flag is very bitnami specific.",-1,-1,-1,0.7008998990058899,0.8602746725082397,0.7057921290397644,-1.0,accept,unanimous_agreement
1212502296,4210,"what if we parse both files (i mean jar + sbom), merge packages and add logic to exclude duplicates? e.g. if we found packages from sbom files - we need to check these packages in the found language files and skip the duplicate",0,0,0,0.9871169924736024,0.9950061440467834,0.9913030862808228,0.0,accept,unanimous_agreement
1212510043,4210,"yeah, that is what i was thinking first. but for example, jar scanning is quite expensive (download trivy-java-db, etc.). if there is sbom, we should skip analyzing.",0,0,0,0.9070143103599548,0.90834778547287,0.9572106003761292,0.0,accept,unanimous_agreement
1212511246,4210,we can scan sbom first(pre-analyzer) and add check for language analyzers - if filepath from sbom == language package filepath => skip analyze,0,0,0,0.9853528141975404,0.99369615316391,0.9951409101486206,0.0,accept,unanimous_agreement
1212514428,4210,"interesting, but how? `io.reader` for image layer tarballs is read only once. we cannot iterate twice. [a link]",0,0,0,0.8943830132484436,0.9603548049926758,0.8982314467430115,0.0,accept,unanimous_agreement
1212518384,4210,"most expensive language packages use post-analyzers ( or we can move them to post-analyzer). we will add check for filepath from sbom into start of `postanalyze` func. e.g. for jar: we will add check before downloading trivy-java-db if bom contains all jar files - we will not download java-db correct me, if i am wrong",0,0,0,0.9555757641792296,0.957824409008026,0.9818702936172484,0.0,accept,unanimous_agreement
1212700615,4210,"it was impossible since a single sbom includes several files, and trivy didn't store those file paths. but it may be possible now after [a link]. trivy has file paths of nested dependencies. i'll give it a shot. thanks!",1,1,1,0.970313549041748,0.9891104102134703,0.9886603355407716,1.0,accept,unanimous_agreement
1212919052,4210,[code block] this does not work?,0,0,0,0.9353721141815186,0.9824227094650269,0.9928807020187378,0.0,accept,unanimous_agreement
1212919705,4210,can you add testcase for this?,0,0,0,0.9890648126602172,0.9908864498138428,0.9959290623664856,0.0,accept,unanimous_agreement
1212935872,4210,"if spdx doesn't have application - we think that all packages are from 1 application, i understand correctly?",0,0,0,0.985965132713318,0.9817516207695008,0.9921735525131226,0.0,accept,unanimous_agreement
1212937973,4210,also perhaps we want to use `initapplication`?,0,0,0,0.9870346188545228,0.9953031539916992,0.9941335320472716,0.0,accept,unanimous_agreement
1212955004,4210,maybe we need to add generic logic for other folders. but we can do it after user questions.,0,0,0,0.987070858478546,0.9914922118186952,0.9835774898529052,0.0,accept,unanimous_agreement
1212957767,4210,maybe we need to add testcase for cyclonedx or are testcases from `sbom` package enough? wdyt?,0,0,0,0.9894429445266724,0.9924665093421936,0.992197036743164,0.0,accept,unanimous_agreement
1213127298,4210,true. this can be used for the case where an application exists in sbom.,0,0,0,0.9881914258003236,0.9935110211372375,0.9920273423194884,0.0,accept,unanimous_agreement
1213129065,4210,"yes, agree. but i guess there is no standard for this.",0,0,0,0.9599432349205016,0.9118335843086244,0.9782764315605164,0.0,accept,unanimous_agreement
1213144528,4210,added in [a link],0,0,0,0.9876591563224792,0.9878443479537964,0.9952162504196168,0.0,accept,unanimous_agreement
1213145252,4210,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1213145674,4210,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1213147719,4210,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1213958051,4210,`filepath.ext` doesn't work from `.spdx.json`,0,0,0,0.9841780066490172,0.9936487078666688,0.9920504689216614,0.0,accept,unanimous_agreement
1213968541,4210,fixed in 0b9daa2441e7c583046563ca3ecfa4e634a6a1fe,0,0,0,0.982617437839508,0.9822112917900084,0.993349015712738,0.0,accept,unanimous_agreement
1214166071,4210,"i think it should be clarified that this currently **only** works for bitnami images. i came here from reading the release notes that just state: [code block] this got me excited, because we could use this for our own images, but unfortunately this currently only works for this hardcoded directory.",0,0,1,0.7387073040008545,0.7613538503646851,0.4991074800491333,0.0,accept,majority_agreement
1214196932,4210,why do you think it works with the hardcoded directory?,0,0,0,0.9795370101928712,0.9487859010696412,0.9918736815452576,0.0,accept,unanimous_agreement
1214260007,4210,"i am referring to this discussion: [a link] even in current `main`, the `sbom.go` only checks the hardcoded path `/opt/bitnami` for spdx-sboms: [code block] or am i reading this wrong and other paths/formats are somehow implicitly supported?",0,0,0,0.9567766189575196,0.9658886790275574,0.9852993488311768,0.0,accept,unanimous_agreement
1214350563,4210,"no, it is just rewriting file paths for bitnami. sbom itself is analyzed anyway.",0,0,0,0.9874465465545654,0.9898021817207336,0.9890869855880736,0.0,accept,unanimous_agreement
1687482593,7206,i am not sure about this. perhaps we want don't use aliase for `vex`. [code block],0,0,0,0.7780354022979736,0.930737316608429,0.8332858681678772,0.0,accept,unanimous_agreement
1687486893,7206,do we need this? also looks like it doesn't work: [code block],0,0,0,0.972217857837677,0.949748396873474,0.9924018383026124,0.0,accept,unanimous_agreement
1687486971,7206,same for other `list` and `download`,0,0,0,0.9859469532966614,0.9904819130897522,0.9952621459960938,0.0,accept,unanimous_agreement
1687523463,7206,let's add info about cache dir with repositories in [a link],0,0,0,0.9878923892974854,0.9831416606903076,0.9955593347549438,0.0,accept,unanimous_agreement
1687553911,7206,do you think we don't need this anymore? it saves resources for spdx and cyclonedx formats.,0,0,0,0.9856611490249634,0.9933831095695496,0.9881321787834167,0.0,accept,unanimous_agreement
1687577325,7206,can you add comment here? we can add link to vexhub ([a link] or vex-repo-spec ([a link] btw - `vex-repo-spec` doesn't say about `subpath`,0,0,0,0.9887872338294984,0.994774043560028,0.9961601495742798,0.0,accept,unanimous_agreement
1687602553,7206,"perhaps we need to add more context: - user can write names of repositories for downloading - we only download enabled repositories (maybe we should download user repo, even repo is disabled)",0,0,0,0.981978952884674,0.9943780303001404,0.9900738000869752,0.0,accept,unanimous_agreement
1687610285,7206,perhaps we need to add flag to disable vex repositories (remove `repository.yaml` or disable all repos). at a minimum we should write in docs how to stop using vex repos,0,0,0,0.9825828075408936,0.9948667287826538,0.9913352131843568,0.0,accept,unanimous_agreement
1687642912,7206,vex-repo-spec doesn't contain this field- [a link],0,0,0,0.987272083759308,0.9923424124717712,0.995107650756836,0.0,accept,unanimous_agreement
1687653792,7206,is this debug line?,0,0,0,0.980977475643158,0.9867674708366394,0.9940453767776488,0.0,accept,unanimous_agreement
1690911858,7206,it was a mistake. deleted. [a link],-1,-1,-1,0.7913995385169983,0.5300931334495544,0.9026793241500854,-1.0,accept,unanimous_agreement
1690912106,7206,we don't need it. deleted. [a link],0,0,0,0.9734981060028076,0.9461671113967896,0.6582273840904236,0.0,accept,unanimous_agreement
1690912362,7206,`init` is needed. added more examples. [a link],0,0,0,0.9864245653152466,0.9811204075813292,0.9957942962646484,0.0,accept,unanimous_agreement
1690948822,7206,"currently, our sbom scanning process involves several steps: 1. [a link] 2. [a link] 3. for certain operations (e.g., vex application), [a link] we've identified that this process, particularly the decoding and re-encoding between `core.sbom` and `types.report`, is not as efficient as it could be. ideally, we should reuse the decoded sbom instead of re-encoding it. one key challenge i've encountered is that during the initial sbom decoding, we can't always determine whether ""parents"" will be needed later in the process (applying vex or not). given this uncertainty, i decided to always generate the parents. i attempted to implement the reuse of the decoded sbom, but found that it required more extensive modifications to our codebase than i initially anticipated. as a result, i've reverted these changes for now to maintain code stability and manageability. looking ahead, i still plan to remove the parent field in question to facilitate this optimization in the future. however, i'm keeping the option open to reintroduce this field if needed in the short term. reverted in [a link]",0,0,0,0.8910415172576904,0.984527349472046,0.96864253282547,0.0,accept,unanimous_agreement
1690950426,7206,thanks. added in [a link] please let me know if you think we should describe it more.,1,1,1,0.8907343149185181,0.8467828631401062,0.8753870129585266,1.0,accept,unanimous_agreement
1690983567,7206,opened a pr. [a link],0,0,0,0.9868571162223816,0.9446457028388976,0.994882106781006,0.0,accept,unanimous_agreement
1690985516,7206,added a comment [a link],0,0,0,0.9874956011772156,0.9881789684295654,0.994708776473999,0.0,accept,unanimous_agreement
1691005869,7206,added [a link] i think it's okay to download only enabled repositories. i'm open to changing it if the community requests it.,0,0,0,0.9692143201828004,0.9114447236061096,0.9387232065200806,0.0,accept,unanimous_agreement
1691006919,7206,it's activated only when `--vex repo` is passed. they can just remove the flag to stop using vex repos.,0,0,0,0.9879591464996338,0.9951047897338868,0.9946584105491638,0.0,accept,unanimous_agreement
1691007956,7206,thanks. deleted [a link],1,1,1,0.6567130088806152,0.9072892069816588,0.5491119623184204,1.0,accept,unanimous_agreement
1691009476,7206,absolutely. deleted in [a link],0,0,0,0.969595432281494,0.9847528338432312,0.9529074430465698,0.0,accept,unanimous_agreement
1691079511,7206,exactly! i didn't think about this.,-1,1,-1,0.8401303887367249,0.6665838360786438,0.7009398341178894,-1.0,accept,majority_agreement
1691143758,7206,perhaps we don't need this. we show list all non-suppressed vulns: [code block],0,0,0,0.9856907725334167,0.9853512048721312,0.9815813302993774,0.0,accept,unanimous_agreement
1691320681,7206,i have changed it to be shown once per package. [a link] [code block],0,0,0,0.9879912734031676,0.9834455847740172,0.9958480596542358,0.0,accept,unanimous_agreement
1691321927,7206,cool :thumbs_up:,1,1,1,0.9820370078086852,0.9897390007972716,0.9969998002052308,1.0,accept,unanimous_agreement
1680436648,7163,"since go uses `go` line if `toolchain` is omitted, we probably need to check the `go` line as well. [a link] but we need to consider how to treat a go line omitting a patch version, like `go 1.22`. i think we can skip stdlib in this case.",0,0,0,0.988270938396454,0.9926882982254028,0.9917872548103333,0.0,accept,unanimous_agreement
1682103665,7163,"if module uses version without patch (and child modules don't use patch and `toolchain`) - `go` doesn't add patch/toolchain: [code block] since we say we use `minimum required version` for `stdlib` - we can say that `v1.x.0` (`v1.21.0` for this example) is the minimum required version, no? i think i'm missing something, but i can't figure out what :grinning_face_with_smiling_eyes:",0,0,1,0.610468864440918,0.832099974155426,0.7603935599327087,0.0,accept,majority_agreement
1682109503,7163,"or do you mean that if `go` version doesn't contain patch - that means it is not a situation where `toolchan` is omitted? and we don't need to check for cases where `toolchain` is not used (or omitted). but it doesn't work for `v1.19` or early: `the standard go toolchains are named gov where v is a go version denoting a beta release, release candidate, or release. for example, go1.21rc1 and go1.21.0 are toolchain names; go1.21 and go1.22 are not (the initial releases are go1.21.0 and go1.22.0), but go1.20 and go1.19 are.`",0,0,0,0.9812543392181396,0.9946720004081726,0.9932047128677368,0.0,accept,unanimous_agreement
1682120681,7163,"i found answer - `1.21` != `1.21.0`: `for example, 1.21 < 1.21rc1 < 1.21rc2 < 1.21.0 < 1.21.1 < 1.21.2.`",0,0,0,0.9790375232696532,0.9924181699752808,0.9939127564430236,0.0,accept,unanimous_agreement
1682389909,7163,i updated this pr: - if toolchain is omitted - check `go` line - check go version (take only >= 1.21) - check patch - check `rc` releases,0,0,0,0.9714742302894592,0.9900402426719666,0.9949294328689576,0.0,accept,unanimous_agreement
1682424315,7163,"i'd like to clarify my understanding of the `go` and `toolchain` lines in go.mod files, as it's pretty complex: 1. prior to go 1.20, the `go` line was **not** a minimum required version. this is a common misconception. for details, see: [a link] - from go 1.21 onwards, it can be considered a minimum required version, aligning with the common misconception. 2. the meaning of v1.m changed before/after go 1.20. previously, versions were go 1.20, 1.20.1, 1.20.2, etc. from 1.21, it's go 1.21.0, 1.21.1, 1.21.2, etc., for clarity. given that go currently supports the latest two versions, 1.21 and 1.22, we can focus on the behavior from 1.21 onwards. it was unclear to me how go behaves when go.mod contains `go 1.21`, as 1.21 ≠ 1.21.0 as you pointed out. as described in the proposal, cloud native buildpacks and [a link] use the latest patch version if a patch version is omitted, meaning `go 1.21` would use 1.21.12 (current latest patch). therefore, i conducted some tests. ## go version behavior test results all tests were conducted using go 1.21.12. note that the output of `go version` reflects the toolchain selection. ### base environment [code block] ### test cases #### case 1: `go 1.22` (patch version omitted, newer than local) result: 1.22.0 is downloaded and used. no changes to `go` or `toolchain` lines. [code block] #### case 2: `go 1.21` (patch version omitted, older than local) result: local version 1.21.12 is used. [code block] #### case 3: `go 1.21.3` (patch version specified, older than local) result: local version 1.21.12 is used. [code block] #### case 4: `go 1.22.3` (patch version specified, newer than local) result: 1.22.3 is downloaded and used. [code block] #### case 5: `toolchain go1.21.3` (toolchain specified, older than local) result: local version 1.21.12 is used. [code block] #### case 6: `toolchain go1.22.0` (toolchain specified, newer than local) result: 1.22.0 is downloaded and used. [code block] from these tests, we can conclude: - the versions specified in `go` or `toolchain` lines aren't always used (if the local version is newer). - if `toolchain` is omitted, `go` is referenced. - `go 1.21` is treated as `go 1.21.0`. for trivy to detect vulnerabilities based on the minimum required version: - ignore the local go version (for reproducibility from go.mod). - use the `toolchain` version if specified. - use the `go` version if `toolchain` is omitted. - treat versions without patch numbers (e.g., `go 1.21`) as the first patch version (1.21.0). this approach should provide consistent vulnerability detection based on the go.mod file. we don't have to mention the trivy policy that doesn't run the local go binary. it is better to explain that it is for reproducible scan results.",0,0,0,0.9326197504997252,0.915106475353241,0.9312973618507384,0.0,accept,unanimous_agreement
1682491004,7163,this is only for `go` 1.21 or higher. i think we can return `1.21.0` instead of `1.21` to reduce the number of questions from users.,0,0,0,0.988695740699768,0.993239164352417,0.993437111377716,0.0,accept,unanimous_agreement
1682500818,7163,"after your tests i began to doubt the need for these changes. case with the version of `go` used is already quite complicated. if we exclude the local version of `go`, this may confuse users even more and users will have more questions than answers. also, some users don't read (or don't read carefully) docs and will think that the version detected by trivy is the version of `go` they are using. might be better off asking users to scan binaries - this would be a significantly more reliable option for detecting `go` version. wdyt?",0,-1,0,0.9124733209609984,0.5868509411811829,0.9024008512496948,0.0,accept,majority_agreement
1682586784,7163,anyway i updated logic related to your tests - [a link] and updated docs - [a link],0,0,0,0.9856197834014891,0.9836763739585876,0.991600513458252,0.0,accept,unanimous_agreement
1682644253,7163,"honestly, the current go seems to behave differently from the proposal (and i expected). [a link] from my tests, `toolchain` also sees older/newer distinctions. i expected case 5 to return 1.21.4. i thought the `toolchain` version is always used regardless of the local go version. i didn't find that statement [a link]. this is talking about the other way around, but it probably means the default go toolchain is used if it is newer than `toolchain `. in summary, even `toolchain` is not deterministic. as you said, it can confuse users. i agree. i'm not sure if we should add this feature. having said that, i think we can mitigate confusion with log messages. also, ecosystems will probably use `toolchain` for go version selection (e.g., [a link] it's still open, though). i guess the `toolchain` version will likely be used in ci/cd. it's not that bad that trivy relies on it. but perhaps it should be possible to pass different versions from the `toolchain` line in some way. for example, `trivy_gotoolchain=$(go version | awk ‘{print $3}’`).",0,0,0,0.8695459365844727,0.8465694785118103,0.9623393416404724,0.0,accept,unanimous_agreement
1683759995,7163,"` for example, when using the go command bundled with go 1.21.3 in a main module that says go 1.21.0, the go command uses go 1.21.3.` uuic this is related with `go` and `toolchain` lines i will try to add as accurate logs as possible for this. this is good option. but i see 2 moments: - it will work only for 1 repository. user can't set this env for modules (from different dirs) with different `go` versions. - users can try using logic as for `gotoolchain` with `+` and `auto` (e.g. `gotoolchain=go1.21.3+auto`). we will need to add info to docs and add warning for this case. but it can still be confusing for users... the rest looks good. in our case this is a good workaround. i will update this pr. perhaps at this time we will find more ideas on how to improve this.",1,1,0,0.593338668346405,0.765373170375824,0.8903839588165283,1.0,accept,majority_agreement
1683928533,7163,"i was just thinking out loud, but it may be too much. we can just recommend scanning go binaries if they want to detect stdlib vulnerabilities.",0,-1,0,0.5812127590179443,0.6091967821121216,0.9462411999702454,0.0,accept,majority_agreement
1686095128,7163,"i thought about this today with clear head and i think we don't need to add this at the moment. we try to do trivy simple and working from the box. but this future adds a lot of nuanses: 1. users should understand how works go toolchains (even we spent time to understand/check that) 2. users should check local go version (in some cases developers don't know about go version using in cd/cd (e.g. because devops works with ci/cd). 3. if we will add `trivy_gotoolchain` user need to set this env or skip vulns if you know that local go version is not vulnerable. let's also add here that users don't always read logs and documentation well, and sometimes they hide logs altogether and don't read documentation. this will lead to users mistakenly thinking that there is a vulnerability in their application, and even worse if they think that there is no vulnerability (this is a rare but possible case)",0,0,0,0.6665643453598022,0.9822991490364076,0.7186810374259949,0.0,accept,unanimous_agreement
1686099377,7163,how about enabling it with `--vuln-detection-level=lax`?,0,0,0,0.6656391024589539,0.9948714971542358,0.995042324066162,0.0,accept,unanimous_agreement
1686105975,7163,hm... i like this solution. this flag will force users to carefully read docs and investigate result of trivy.,1,1,1,0.984927773475647,0.98209410905838,0.9712826609611512,1.0,accept,unanimous_agreement
1686136546,7163,"detection using the minimum version may be better enabled when this flag is used. for example, `django>=3.0.0` in requirements.txt, we can take `3.0.0` as the version even if the project may use newer than 3.0.0. the toolchain version is the same. from `toolchain go1.21.4` in go.mod, we consider it go 1.21.4 even if the project may actually use go 1.21.5.",0,0,0,0.9870471954345704,0.9954376816749572,0.9934630393981934,0.0,accept,unanimous_agreement
1686151399,7163,agree with you.,0,0,0,0.960660994052887,0.9767778515815736,0.974169671535492,0.0,accept,unanimous_agreement
1686155628,7163,"ok, i've converted this pr to draft. let's finalize [a link] first and come back here.",0,0,0,0.9819221496582032,0.9568493962287904,0.9938393235206604,0.0,accept,unanimous_agreement
1686156081,7163,this is good idea :thumbs_up:,1,1,1,0.9335904717445374,0.994273602962494,0.9969327449798584,1.0,accept,unanimous_agreement
1738167679,7163,"i updated this pr using `--detection-priority` flag. take a look, when you have time, please.",0,0,0,0.9786916375160216,0.972478210926056,0.9859508872032166,0.0,accept,unanimous_agreement
1740651841,7163,what is this for?,0,0,0,0.9697429537773132,0.9780064821243286,0.9856045246124268,0.0,accept,unanimous_agreement
1740652896,7163,"nit: it's no big deal, but if `useminversion == false`, we don't need to get the toolchain version. we may want to evaluate `useminversion` first before getting the toolchain version.",0,0,0,0.9829492568969728,0.9584730863571168,0.950080633163452,0.0,accept,unanimous_agreement
1740671014,7163,hm... maybe i checked something and didn't remove it. thanks for showing me this. removed in [a link],1,1,1,0.9325699210166932,0.866206705570221,0.82789546251297,1.0,accept,unanimous_agreement
1740671318,7163,it make sense. updated in [a link],0,0,0,0.9754645824432372,0.9854507446289062,0.9871279001235962,0.0,accept,unanimous_agreement
1745307526,7444,can we update `resource`? i think it's a bit hard to keep 2 similar structs.,0,0,0,0.7505289316177368,0.8735800385475159,0.7409718632698059,0.0,accept,unanimous_agreement
1745312113,7444,also there are no tests for this case.,0,0,0,0.9760692119598388,0.9429457187652588,0.9856719970703124,0.0,accept,unanimous_agreement
1746837564,7444,"thanks for the feedback, i'm not sure why i assumed the `resource` struct was used by other packages in trivy, but it doesn't seem to be the case. i'll work on updating the `resource` struct accordingly. regarding the tests, i wanted to get feedback on the approach before proceeding. i'll focus on adding the tests next.",1,1,1,0.611505389213562,0.7199715971946716,0.9684526324272156,1.0,accept,unanimous_agreement
1764780167,7444,the test uses `assert.equal`. is it possible don't use `reflect`?,0,0,0,0.9864864349365234,0.9938753247261048,0.9924265146255492,0.0,accept,unanimous_agreement
1764782128,7444,do you really need a separated test instead of `testreport_consolidate`?,0,0,0,0.9874282479286194,0.9945350885391236,0.992192804813385,0.0,accept,unanimous_agreement
1766236681,7444,that's possible. i've [a link] to use `assert.equal` and consolidated it in `testreport_consolidate`.,0,0,0,0.9863947629928588,0.991309642791748,0.993845283985138,0.0,accept,unanimous_agreement
1766237138,7444,that's possible. i've made the change [a link].,0,0,0,0.9841740131378174,0.9691891074180604,0.9943040013313292,0.0,accept,unanimous_agreement
1766350295,7444,great! thanks!,1,1,1,0.9903974533081056,0.9946237802505492,0.9972928166389464,1.0,accept,unanimous_agreement
1308934349,5059,maybe replace the wording `object` with `resource`,0,0,0,0.9872933626174928,0.9939794540405272,0.9927761554718018,0.0,accept,unanimous_agreement
1308938646,5059,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
1309004405,5059,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1309004605,5059,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1311321092,5059,we have a lot of flags now and want to assign shorthand to frequently used flags.,0,0,0,0.9714445471763612,0.9771336317062378,0.989830195903778,0.0,accept,unanimous_agreement
1311365921,5059,removed the shorthand for `--exclude-owned` flag.,0,0,0,0.9818440079689026,0.9933522939682008,0.9929572343826294,0.0,accept,unanimous_agreement
1537340243,6357,we can simply add `requires` to `lockfile`. [code block] in this case we will unmarshal file once.,0,0,0,0.9898618459701538,0.9927273988723756,0.995293915271759,0.0,accept,unanimous_agreement
1537355933,6357,iiuc we can add line numbers: [code block],0,0,0,0.9861353635787964,0.9845501780509948,0.993228018283844,0.0,accept,unanimous_agreement
1537365419,6357,"one functions for: - v1 : `lib, err := tolibrary(node.ref, node.startline, node.endline)` - v2 : `lib, err := tolibrary(req.dep, req.startline, req.endline)` [code block]",0,0,0,0.9876211285591124,0.9933057427406312,0.9956247210502625,0.0,accept,unanimous_agreement
1537366115,6357,"handle error, please.",0,0,0,0.967033863067627,0.9591854214668274,0.904927372932434,0.0,accept,unanimous_agreement
1550461330,6357,i can try to put this info. not sure if that's useful tho - it's going to point to a single line :),1,1,0,0.9442957639694214,0.9168955087661744,0.887941300868988,1.0,accept,majority_agreement
1550593409,6357,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1550593603,6357,added line info,0,0,0,0.9823828935623168,0.9842055439949036,0.9910563230514526,0.0,accept,unanimous_agreement
1550593752,6357,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1550593975,6357,refactored,0,0,0,0.9850403070449828,0.9819386005401612,0.9915287494659424,0.0,accept,unanimous_agreement
1550594126,6357,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1550594245,6357,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1565342165,6357,dependency graph is only supported for version v1. add note please [code block],0,0,0,0.9876590371131896,0.992272973060608,0.995542585849762,0.0,accept,unanimous_agreement
1568001160,6357,fixes applied,0,0,0,0.9876499772071838,0.9799743890762328,0.9858019948005676,0.0,accept,unanimous_agreement
1577369532,6357,can we split a line? [code block],0,0,0,0.9893116354942322,0.9929105639457704,0.9957583546638488,0.0,accept,unanimous_agreement
1579260496,6357,updated and rebased to resolve conflicts,0,0,0,0.981971800327301,0.9895983934402466,0.9946576952934264,0.0,accept,unanimous_agreement
1718022223,7339,"should only those finds that exactly match the start and end of the lines be ignored? or is it better to ignore everything between the passed position? for example, i want to ignore a misconfig that is found inside a terraform block, but i want to specify the position of the block.",0,0,0,0.9820990562438964,0.989891767501831,0.9906855225563048,0.0,accept,unanimous_agreement
1718022716,7339,you can log the start and end separately,0,0,0,0.9868276119232178,0.9910940527915956,0.994564414024353,0.0,accept,unanimous_agreement
1718026943,7339,id already exists in findingsresults.,0,0,0,0.9872402548789978,0.991972804069519,0.9952700734138488,0.0,accept,unanimous_agreement
1718470689,7339,i went back and forth here and thought it made more sense to be explicit to match the lines of the finding itself instead of a range.,0,0,0,0.960519552230835,0.9740628600120544,0.9805358648300172,0.0,accept,unanimous_agreement
1718471594,7339,fair enough. i can make that adjustment.,0,0,0,0.8721569776535034,0.8499355316162109,0.9802138209342957,0.0,accept,unanimous_agreement
1718477201,7339,"i also debated on this quite a bit. the only scanner passing multiple ids is the misconf scanner. i decided to avoid refactoring all the other scanner functions up the stack to support a slice of strings for ids, when they only had one, and instead just pass the single string down. i could just as well refactor those and move the for loop from the misconf method into the match method, but felt that a bit clunky to put a for loop over all other scanners, when only one uses it (even though it would just be one iteration for the others). i'm open to making that change if we want to make the method signature friendlier. open to feedback here.",-1,0,0,0.5087457299232483,0.4949695765972137,0.8790486454963684,0.0,accept,majority_agreement
1735377618,7339,-a-shelton could you give an example of why passing a range isn't ideal? just trying to understand. to me it feels passing an explicit range would have more flexibility.,0,0,0,0.9121253490447998,0.966888964176178,0.9333489537239076,0.0,accept,unanimous_agreement
1735378187,7339,"i guess to me this log line would change if the results are ignored in a range (start:end, would be one line like you currently have) but if not probably best to log separately.",0,0,0,0.984529435634613,0.9657250046730042,0.9821792244911194,0.0,accept,unanimous_agreement
1737422736,7339,"for instance, someone typos the ""end_line"" in their ignore file. maybe they meant to do: [code block] but instead, fat-fingered the number on end_line so it was something like: [code block] this would still pass if using a range, but should actually instead fail as now you're ignoring more than intended. the start and end line numbers are actually how the finding itself is captured as well, so those fields are there mirroring the causemetadata struct for the misconf: [a link]",0,0,0,0.9457255005836488,0.9316169619560242,0.9822580814361572,0.0,accept,unanimous_agreement
1747185727,7339,updated!,0,0,1,0.8773723840713501,0.908010721206665,0.663396954536438,0.0,accept,majority_agreement
1747665266,7339,shouldn't this be zero inclusive? what if start or end are actually 0?,0,0,0,0.957219898700714,0.9701897501945496,0.9891710877418518,0.0,accept,unanimous_agreement
1747977786,7339,"the only place i found references to a possible usage of 0 in a test for either start or end line were here: [a link] in this scenario the start and end line checks would be skipped. there are also references to `>0` here: [a link] i am trying to think of a scenario where there is a line 0 in a finding, but can't come up with one. it should always start with 1, no?",0,0,0,0.9651437997817992,0.983001470565796,0.9840908646583556,0.0,accept,unanimous_agreement
1750842107,7339,you're right.,0,0,0,0.9367263913154602,0.7213375568389893,0.7370946407318115,0.0,accept,unanimous_agreement
1917828923,8244,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
1917832664,8244,i think we should explain how it works with some examples. how about orders? when does trivy fall back into the next mirror? is the original registry used? and so on.,0,0,0,0.976469099521637,0.9767141342163086,0.98186457157135,0.0,accept,unanimous_agreement
1917835281,8244,"currently, this page shows the default values. i'm wondering if it confuses users. since the document describes an example, isn't it enough?",0,-1,-1,0.9304693341255188,0.5043050050735474,0.8040218949317932,-1.0,accept,majority_agreement
1917836986,8244,i'm impressed it works!,1,1,1,0.988013744354248,0.9929351210594176,0.995008945465088,1.0,accept,unanimous_agreement
1917837638,8244,smart :clapping_hands:,1,0,1,0.625194251537323,0.9746243357658386,0.9926114678382874,1.0,accept,majority_agreement
1917841243,8244,"instead of nesting it, i prefer adding another method, like `tryref`, `tryimage` or something like that.",0,0,0,0.95932537317276,0.988153874874115,0.9910180568695068,0.0,accept,unanimous_agreement
1917853320,8244,"nit: i thought `ctx` would be used later in the function, but actually just used to get a registry string. imo, it's better not to define a new variable here to reduce confusion. but it's no big deal. you can decide it. [code block]",0,0,1,0.9526162147521972,0.5941511988639832,0.4714585840702057,0.0,accept,majority_agreement
1917855326,8244,this means users specified the wrong registry. i think we should return an error to notify users. what do you think?,0,0,0,0.7954570055007935,0.6100879311561584,0.9747133255004884,0.0,accept,unanimous_agreement
1917857819,8244,"i want to make sure that container runtimes work in the same way. even if it fails due to an authentication error, do they try the next mirror?",0,0,0,0.9845257997512816,0.9855183362960817,0.9916634559631348,0.0,accept,unanimous_agreement
1919543753,8244,"we are not adding flags support, so we need to include something in the config file docs. but honestly, i added this example because i could come up with good lines for an empty `map[string][]string` this is a yaml file, and the `go` (`map[string][]string`) syntax can be confusing to users. i can use `<..>` in the example. eg: [code block] let me know if you have another idea.",0,0,0,0.8840512633323669,0.959097385406494,0.9622871279716492,0.0,accept,unanimous_agreement
1919613741,8244,added testcase - [a link] full error trace: [code block],0,0,0,0.9880895018577576,0.9808998107910156,0.995585560798645,0.0,accept,unanimous_agreement
1919614368,8244,it make sense. thanks! updated in [a link],1,1,1,0.9844300746917723,0.9906578063964844,0.9942684173583984,1.0,accept,unanimous_agreement
1919614544,8244,updated in [a link],0,0,0,0.9845641851425172,0.9892787337303162,0.995200514793396,0.0,accept,unanimous_agreement
1919614730,8244,added order and example - [a link] + [a link],0,0,0,0.984731912612915,0.9857073426246644,0.9953492283821106,0.0,accept,unanimous_agreement
1919700914,8244,"this document well describes how the configuration should look. [a link] imho, `config-file.md` can be simply `mirros:` because it's the default value. [code block] but your approach also looks good. [code block] in that case, we may want to [a link] for examples and generate `config-file.md` from them rather than [a link]",1,0,1,0.7011715173721313,0.9712200164794922,0.9473339319229126,1.0,accept,majority_agreement
1919704167,8244,"i just wanted to ask if docker, containerd or other runtimes also fall back into the next mirror with authentication errors. i'm asking this because i was wondering if they might try the next one only with 404 error.",0,0,0,0.9260876178741456,0.8669619560241699,0.9799055457115172,0.0,accept,unanimous_agreement
1919786594,8244,i misunderstood you. i will check it and write to you,-1,-1,0,0.9391042590141296,0.7836325168609619,0.6591578722000122,-1.0,accept,majority_agreement
1919803756,8244,"looks like you are right - we can use `mirrors: ` value. also, frankly, i don't want to introduce a new flag field to use it only for one flag (given that we can get by with documentation). so i chose your option - [a link] i think about it too. we will think about it - if we need examples somewhere else.",0,0,0,0.9272958040237428,0.8665518164634705,0.8958364725112915,0.0,accept,unanimous_agreement
1919827515,8244,"agree. if we need to generate more examples, we can implement it.",0,0,0,0.9677063822746276,0.9873324036598206,0.9804974794387816,0.0,accept,unanimous_agreement
1919828423,8244,i'm sorry i should have explained to you more clearly.,-1,-1,-1,0.9853118658065796,0.9841983318328856,0.990281105041504,-1.0,accept,unanimous_agreement
1919863651,8244,"no problem :thumbs_up: i started local docker registry with authentication, configured it as mirror in `docker`, and tried to pull an image. i can confirm that `docker` checks the original registry if the mirrors return a `401` error.",0,1,1,0.9712308049201964,0.924117386341095,0.9920654892921448,1.0,accept,majority_agreement
1919885431,8244,thanks for confirming!,1,1,1,0.9222665429115297,0.8061491847038269,0.9260522127151488,1.0,accept,unanimous_agreement
1920208464,8244,it's always false :),1,1,0,0.8650573492050171,0.9356594681739808,0.9457837343215942,1.0,accept,majority_agreement
1920209696,8244,same as above,0,0,0,0.9772257208824158,0.965356171131134,0.9918335676193236,0.0,accept,unanimous_agreement
1921820497,8244,nice catch! i missed that when created tryimage and tryget functions. fixed in [a link],1,1,1,0.992929995059967,0.9913970232009888,0.9957082271575928,1.0,accept,unanimous_agreement
1921820538,8244,fixed in [a link],0,0,0,0.98800128698349,0.9866787791252136,0.9950093030929564,0.0,accept,unanimous_agreement
767215378,1287,what if we define a new http transport? [code block],0,0,0,0.987758457660675,0.9928315877914428,0.9950156807899476,0.0,accept,unanimous_agreement
767215590,1287,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
767216057,1287,i think looking up env in many places makes maintenance hard. we might want to add `-insecure` here. [a link],0,0,0,0.7093420028686523,0.9674797654151917,0.9701401591300964,0.0,accept,unanimous_agreement
767697522,1287,thanks for the pointer. will have a look at how to rewrite this.,1,1,1,0.8191473484039307,0.7353624701499939,0.9337678551673888,1.0,accept,unanimous_agreement
767697559,1287,with a new `transport` we would lose the defaults for the other settings: [code block] [a link],0,0,0,0.9866448044776917,0.994796335697174,0.9953120946884156,0.0,accept,unanimous_agreement
767804349,1287,"i hope, i found all the needed pieces. please have a look.",0,0,1,0.5385518670082092,0.650713324546814,0.9751630425453186,0.0,accept,majority_agreement
803392653,1287,"what if we define the http client directly? ``` client := &http.client{ transport: &http.transport{ tlsclientconfig: &tls.config{ insecureskipverify: true, }, }, }",0,0,0,0.9844083189964294,0.9924260377883912,0.9948392510414124,0.0,accept,unanimous_agreement
803394405,1287,why do we need to return an error?,0,0,0,0.9477986097335817,0.9347885251045228,0.982862114906311,0.0,accept,unanimous_agreement
803394804,1287,we should add a test with an insecure https server.,0,0,0,0.9579442739486694,0.950454831123352,0.9898772835731506,0.0,accept,unanimous_agreement
803395862,1287,the same as the cache client,0,0,0,0.9872612953186036,0.9911312460899352,0.9943959712982178,0.0,accept,unanimous_agreement
803396233,1287,looks like these cases don't test anything since the error is always nil.,0,0,0,0.9546236395835876,0.974721133708954,0.9630061388015748,0.0,accept,unanimous_agreement
803599986,1287,good catch. thanks. that's a left over from some other implementation i tried.,1,1,1,0.9857016801834106,0.9936699271202089,0.9948891401290894,1.0,accept,unanimous_agreement
803600192,1287,good catch. thanks. that's a left over from some other implementation i tried.,1,1,1,0.9857016801834106,0.9936699271202089,0.9948891401290894,1.0,accept,unanimous_agreement
803601880,1287,"this way, we would lose the other defaults of `http.transport`. when i clone the default, i only change the `insecureskipverify` setting.",0,0,0,0.9785943031311036,0.9881408214569092,0.9932627081871032,0.0,accept,unanimous_agreement
803656306,1287,i think it will be the case when we use `http.defaultclient`. `&http.client{}` should not cause any issues.,0,0,0,0.9880968332290648,0.9917819499969482,0.9865248203277588,0.0,accept,unanimous_agreement
804382357,1287,changed that in the latest commits.,0,0,0,0.9804162383079528,0.9869067668914796,0.99249529838562,0.0,accept,unanimous_agreement
804382478,1287,re-wrote the tests in the latest commits.,0,0,0,0.984539806842804,0.9869297742843628,0.994536519050598,0.0,accept,unanimous_agreement
804382611,1287,re-wrote the tests in the latest commits to connect against an insecure tls server.,0,0,0,0.977946937084198,0.9872224926948548,0.9889273643493652,0.0,accept,unanimous_agreement
1657367758,7039,"packages which don't contribute runtime assets to the application cannot contribute to a runtime vulnerability since nothing from the package persists at runtime. runtime assets can be identified by examining the targets section since that's what the host uses to probe for those. there are lots of ways packages might be referenced by an app and excluded from runtime. the package might be referenced with `excludeassets=""runtime""`, the package might have been superseded by the .net runtime itself and excluded but the build, or the package might have overlapping assets with another package that is preferred. in all cases - if it's bits don't make it to the final app it cannot be a source of a vulnerability in that app.",0,0,0,0.9762436747550964,0.9864650964736938,0.9881155490875244,0.0,accept,unanimous_agreement
1658107400,7039,"in general i think the same way. thank you for detailing this :+1: there are times when users want to see dependencies that are not used at runtime (we encountered this in nodejs). that's why we've added options to allow users to see all dependencies (we hide them by default). for example, this may be needed not for scanning vulnerabilities, but for generating a sbom",1,1,1,0.9788605570793152,0.9799710512161256,0.9937800765037536,1.0,accept,unanimous_agreement
1658108175,7039,do we need to check this case? can you write more info about this? [a link] don't have info about `excludeassets` field.,0,0,0,0.986586093902588,0.9916990995407104,0.994978964328766,0.0,accept,unanimous_agreement
1658126726,7039,"i would add more contexts. as interest in supply chain security grows, there is a demand to understand vulnerabilities in packages that are used for ci/cd and other purposes, even if they are not included in production applications and are used only for development. if the library is not used at all, even for development purposes, there is no need to include it.",0,0,0,0.982186198234558,0.9900830388069152,0.9479713439941406,0.0,accept,unanimous_agreement
1660640315,7039,"since we're unfamiliar with .net core, we need your input. given the above context, do you think we don't have to save these libraries?",0,0,0,0.9817550778388976,0.9752605557441713,0.9922665953636168,0.0,accept,unanimous_agreement
1669027855,7039,"you can find the docs on excludeassets [a link]. they may be interesting for informational purposes, but for the actual cve which apply to runtime libraries (the vast majority of cves) they are not interesting. there could be a case where a package only provides development time assets. for instance - a build target that inserts code into the binary. that package might appear without any runtime assets, however such a package is not the norm. such a package could also remove all traces from the deps.json if it wanted to, so trying to use that for detecting it isn't a legitimate use case. the deps.json isn't a manifest of the things used when building the project - it's a manifest to be used by the runtime to determine what it can load.",0,0,0,0.9699082970619202,0.9886033535003662,0.9739096164703368,0.0,accept,unanimous_agreement
1669587056,7039,".net uses so many files that it can get confusing... iiuc `packagereference` field is related with `packages.config` and `*packages.props` files (`xml` format). can this field be used for *.deps.json files? if there are cases when non-runtime dependencies might be needed - i think we need to hide them (instead of remove them). as [a link] devops engineers may need to check these packages, for example in pipelines.",0,0,0,0.9281650185585022,0.9590689539909364,0.9519535303115844,0.0,accept,unanimous_agreement
1669640170,7039,"in other ecosystems, it is common to include test assertion libraries as development libraries. and while these libraries are not used at runtime, their vulnerability is important. this example you gave is certainly not legitimate, but are libraries used for development purposes in general use such as the one i gave not included in deps.json?",0,0,0,0.98375004529953,0.9819287061691284,0.9787228107452391,0.0,accept,unanimous_agreement
1674566823,7039,"`deps.json` isn't the file to see all dependencies that might be used at development time. it's used for loading binaries at runtime. at development time projects use `packagereference` (direct references) in the project, which gets computed to the full package graph in `project.assets.json`. the old format `packages.config` had a flattened graph in the single file and was really just a log for the package modifications that were made to the project file separately. these two files are better for identifying development dependencies - and are used by component governance for that purpose. they are present on the build machine / source control. there's also the new sbom infrastructure which is better suited as a catch all. they may or may not be included, it depends on the type of package and how its referenced. `deps.json` is only used for telling the runtime what to load. when a library is present you can be certain it's used - so if that library/package is vulnerable it should be flagged. if the package is listed in the deps file, you can be certain it was at least referenced - but it may have been eliminated by the build and not loadable at runtime - so it should not be flagged. you can't assume that a package being absent means it wasn't used at dev time since the deps.json doesn't list all development time dependencies.",0,0,0,0.97492653131485,0.9926089644432068,0.9863322973251344,0.0,accept,unanimous_agreement
1675043052,7039,hm.. it looks like that we can remove non-runtime dependencies. also we need to write in docs that trivy only detects runtime deps from `*.deps.json`,0,0,0,0.9573724865913392,0.9782167673110962,0.9682713150978088,0.0,accept,unanimous_agreement
1675404379,7039,"thanks for your explanation. it might be similar to go binary scanning. it doesn't have any development modules, while go.mod includes it. we can just delete non-runtime dependencies and improve it later if we see any feedback.",1,1,1,0.9134327173233032,0.9182308316230774,0.9460005760192872,1.0,accept,unanimous_agreement
1677268895,7039,done :+1: can you review this pr?,0,1,1,0.5802164673805237,0.8578937649726868,0.9450969696044922,1.0,accept,majority_agreement
1679654555,7039,looks to me like it checks if they are not empty. [code block],0,0,0,0.9646298289299012,0.9807923436164856,0.9913542866706848,0.0,accept,unanimous_agreement
1679657918,7039,"[code block] i think this function returns true if the library **contains** one of these sections, or if the library is completely missing from the section. the behavior looks correct, just the comment seems inverted.",0,0,0,0.987722635269165,0.991269826889038,0.9871769547462464,0.0,accept,unanimous_agreement
1679808424,7039,would it be possible to add another testcase that references some of the commonly reported false positives and proves that those aren't flagged? for example - a deps file listing a vulnerable version of `system.net.http` etc. here's a sample deps file: [a link] this was created with [code block] this shows that all the old packages (some vulnerable) making up the netstandard surface area are all excluded when targeting the latest frameworks which provide inbox support for all those package.,0,0,0,0.9887524247169496,0.9928959012031556,0.9924968481063844,0.0,accept,unanimous_agreement
1680569587,7039,"i updated this function, but forgot to update comment. thanks! fixed in [a link]",1,1,1,0.9837968945503236,0.992997109889984,0.994301438331604,1.0,accept,unanimous_agreement
1680569724,7039,fixed in [a link],0,0,0,0.98800128698349,0.9866787791252136,0.9950093030929564,0.0,accept,unanimous_agreement
1680571841,7039,your test file is too large. so i only inserted `system.net.http` and `netstandard.library` libraries into test file. - [a link],0,0,0,0.9683650135993958,0.9916024804115297,0.9943681359291076,0.0,accept,unanimous_agreement
392549075,435,note to self: change this to master once [a link] is merged.,0,0,0,0.9874994158744812,0.990916669368744,0.9937254786491394,0.0,accept,unanimous_agreement
392698543,435,"if metadata.nextupdate is nil, it causes panic.",0,0,0,0.5504729747772217,0.9677647352218628,0.8163744211196899,0.0,accept,unanimous_agreement
392699105,435,"i feel the default output should be human-readable. when we receive `-f json`, we should display it as a json format.",0,0,0,0.9854161143302916,0.9726940393447876,0.97585129737854,0.0,accept,unanimous_agreement
392699197,435,we need to take `-cache-dir` option.,0,0,0,0.9882041215896606,0.9933236241340636,0.9951553344726562,0.0,accept,unanimous_agreement
392699352,435,"it sometimes returns an error. even if we don't handle it, it might be better to display a warning/error message.",0,0,0,0.9640387296676636,0.930258810520172,0.9877198338508606,0.0,accept,unanimous_agreement
392700058,435,"type in db.metadata is just int. if we display it, should we convert it to string such as ""light"".",0,0,0,0.9894893765449524,0.9913640022277832,0.9947881698608398,0.0,accept,unanimous_agreement
392700359,435,[code block] i feel `version` is not necessary here.,0,0,0,0.9831316471099854,0.9833235144615172,0.9917762279510498,0.0,accept,unanimous_agreement
392700990,435,"if db isn't in a local file system, this shows like the following. is it intended? [code block]",0,0,0,0.9850358963012696,0.9883379340171814,0.994162380695343,0.0,accept,unanimous_agreement
393244644,435,`c.app.version` may be better here,0,0,0,0.9739413857460022,0.994228720664978,0.9935412406921388,0.0,accept,unanimous_agreement
393341202,435,yeah like we discussed it has been switched now: [a link],0,0,0,0.9681532979011536,0.7866276502609253,0.9885699152946472,0.0,accept,unanimous_agreement
393346569,435,"this isn't the case today. the output is the same regardless of the `-f` option specified. [code block] ~~i'm not aware of a way where we can parse the `-f` flag at initialization time with this cli framework. i also think this output is simple enough to be human readable even in json format and we could avoid logic complexity.~~ there is actually a way, using `c.string(""format"")`. i can switch to using that.",0,0,0,0.9658158421516418,0.9659547805786132,0.9847431182861328,0.0,accept,unanimous_agreement
393354836,435,fixed 0952d709b17878654fad853c46de616984c4b2a5,0,0,0,0.9765157103538512,0.9537416696548462,0.9900885224342346,0.0,accept,unanimous_agreement
393371806,435,yes good point. addressed here [a link],1,1,1,0.9263296723365784,0.9178938269615172,0.9598788619041444,1.0,accept,unanimous_agreement
393372340,435,fixed here [a link],0,0,0,0.987947642803192,0.9859613180160522,0.9954773783683776,0.0,accept,unanimous_agreement
393376339,435,type names fixed here: [a link],0,0,0,0.987247884273529,0.992362380027771,0.9956647753715516,0.0,accept,unanimous_agreement
393377493,435,if we handle the error like this [a link] then we would have something like: `unable to display current version: unexpected end of json input` what do you prefer? i have no strong opinions.,-1,0,0,0.9082589745521544,0.6461331248283386,0.6122034192085266,0.0,accept,majority_agreement
393377552,435,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
393715025,435,"ah, i meant `vulnerabilitydbversion` is empty here. we should show a version of trivy anyway even if db is not there. you tried not to show nextupdate and updatedat if they are zero value, but you didn't do anything for `vulnerabilitydbversion`. i just imagined you wanted to display something like this :grinning_face_with_smiling_eyes: [code block] never mind. it doesn't matter even if empty `vulnerabilitydbversion` is displayed.",0,0,0,0.482403427362442,0.9641835689544678,0.5029768347740173,0.0,accept,unanimous_agreement
394582691,435,[code block] you have to pass c.app.version to this function.,0,0,0,0.9885193705558776,0.9933307766914368,0.9952200055122375,0.0,accept,unanimous_agreement
394587156,435,"i'm sorry i didn't mean a table format, but a plain text. also, the current table is not easy to see. [code block] i think `docker version` is preferred here. [code block] i know the default value of `-format` is `table`, but i think we can ignore it in this case.",-1,-1,-1,0.9853100776672364,0.973697543144226,0.9697017073631288,-1.0,accept,unanimous_agreement
394687439,435,fixed here [a link],0,0,0,0.987947642803192,0.9859613180160522,0.9954773783683776,0.0,accept,unanimous_agreement
394687723,435,i already do this [a link] what's missing?,0,0,0,0.9761741161346436,0.9815359711647034,0.9921783208847046,0.0,accept,unanimous_agreement
394693291,435,fixed here [a link],0,0,0,0.987947642803192,0.9859613180160522,0.9954773783683776,0.0,accept,unanimous_agreement
394852461,435,"sorry, i didn't notice.",-1,-1,-1,0.9838168621063232,0.9907304644584656,0.992919623851776,-1.0,accept,unanimous_agreement
394853324,435,`library.go` is the file for the programming language library. it is better to put this struct in another file.,0,0,0,0.985474705696106,0.9941036105155944,0.9934611320495604,0.0,accept,unanimous_agreement
395391778,435,i moved it out to `app.go` in favour of temporal locality [a link],0,0,0,0.988191783428192,0.9734219908714294,0.994461178779602,0.0,accept,unanimous_agreement
820263761,1799,looks like `sbom` doesn't need `--exit-code` since this option makes the job fail when critical vulnerabilities are found.,0,0,0,0.9809902906417848,0.985980987548828,0.984096884727478,0.0,accept,unanimous_agreement
820265288,1799,"i'd like to return an error in this case. like ""invalid artifact type, ""docker:"", ""dir:"" or ""artifact:"" are allowed"" or something like that.",0,0,0,0.9858668446540833,0.8196632862091064,0.9881540536880492,0.0,accept,unanimous_agreement
820266420,1799,"in addition to usage, we may want to add a description since this subcommand is a bit complex. [code block]",0,0,0,0.9813302159309388,0.9875307083129884,0.9905563592910768,0.0,accept,unanimous_agreement
820266688,1799,trivy also supports podman and we're trying to add support for containerd. how about `image`? [code block],0,0,0,0.985273778438568,0.992159366607666,0.9932562112808228,0.0,accept,unanimous_agreement
820494933,1799,"i don't want the artifact type prefix to be mandatory. one of the goals of `trivy sbom` as a dedicated subcommand is to be able to determine the artifact type by itself. i added the artifact type prefix for edge cases (for example if you want sbom for ubuntu image, but also have a local ubuntu directory, so you can specify exactly what you want trivy to generate sbom for)",0,0,0,0.9742237329483032,0.9875935912132264,0.9865313172340392,0.0,accept,unanimous_agreement
820644836,1799,`table` and `template` don't make sense. we should restrict formats that can be specified.,0,0,0,0.9196569919586182,0.9793206453323364,0.9651386737823486,0.0,accept,unanimous_agreement
820649136,1799,"i think it is confusing and makes debugging harder for users. filesystem scanning also supports a single file, so we don't know if it is an image archive or a dependency file. and if your local filesystem accidentally has the same file name as an image name you want to scan, the scanning will fail. i'm sure users will get confused. users must know what kind of artifact they want to scan. adding a prefix is not a big effort. i feel that the disadvantages of the confusion without prefixes would be greater.",-1,-1,-1,0.892633318901062,0.7998918294906616,0.8445909023284912,-1.0,accept,unanimous_agreement
820794843,1799,"i completely understand this point of view. however, i believe the user experience here is more important than the specific edge case. we can reflect the process better with dedicated logs, something like - ""searching for artifact ...” “generating sbom for image “ :latest” or “generating sbom for package “ ” ... plus, to expect trivy users to figure out the right flag to use might be confusing on its own. i think that the main goal of the dedicated sbom command is to let the user to simply generate them on a result of a build process. without inferring the resulting artifact type. i think we should consider keeping the artifact type detection by trivy",0,0,0,0.6278544664382935,0.961524486541748,0.8536980152130127,0.0,accept,unanimous_agreement
820827884,1799,"what is the benefit of removing prefixes for users? do you think adding prefixes is a big effort? i think it is no big deal, so it is better to reduce confusion.",0,0,0,0.9549753069877625,0.9132344126701356,0.9837326407432556,0.0,accept,unanimous_agreement
821046662,1799,"i don't think that we need to remove the prefixes, just to make it optional :beaming_face_with_smiling_eyes: i think that not requiring the prefixes simplifies the command for the users. in my opinion, this is a very important advantage, and the main goal of creating a dedicated subcommand for sbom generation. another benefit of the ""auto-detection"", is that it makes the command generic, the user doesn't need to use different commands for different types, he has one unified command. then, if you use it in a ci pipeline for example, you can make it generic and you don't have to customize the command for each pipeline. the use of a flag in a cli is to let the user customize the configuration of the command execution, like the sbom format or quite mode. the artifact type is not up to the user to decide, it is a given thing. the user can't say that a directory is an image (for example). the only reason i added the prefix option is to handle the spoken edge case - the user can use the prefixes to overcome it, but we want that by default he won't need it. we want to let the user to generate sbom in minimum effort, and i think the prefixes add unnecessary effort.",0,0,1,0.7854363322257996,0.6897839903831482,0.846524715423584,0.0,accept,majority_agreement
821426279,1799,"no, i mean users can remove prefixes (optional) and how important it is for users. i'd like to know why it is very important. as far as i understand, the main goal is generating multiple sbom formats for multiple formats. the ""auto-detection"" sounds like another thing. i don't say we should not have `sbom` subcommand. we have one unified command regardless of prefixes. i'm asking how big the effort is. if users don't know what they want to scan, i agree we should detect it automatically. but they must know it. how hard do they specify it? i feel like the optional prefixes reduce very small effort and bring confusion. if you can tell me how hard it is, i'll be convinced:thinking_face: another idea is that the artifact type will be a container image by default and they can overwrite it with `fs` or others with the prefix.",0,0,0,0.8464261293411255,0.6970773935317993,0.965563714504242,0.0,accept,unanimous_agreement
821585478,1799,"i don't think that container image as default is a good idea, it is more confusing. i removed the auto-detection and updated the documentation - now it returns error when the artifact type prefix is unknown (or empty)",0,-1,0,0.63105708360672,0.5463905930519104,0.6927856206893921,0.0,accept,majority_agreement
822384544,1799,"i'm not saying the optional prefix is a bad idea, but we should sort out the pros and cons. actually, i know it is optional in some tools, while required in other tools. we should discuss the trade-off. i'm curious why you think it is very important and we can make it optional if it makes sense.",0,0,0,0.7647629380226135,0.6491748094558716,0.8663055300712585,0.0,accept,unanimous_agreement
830578785,1799,this tab is required. [a link],0,0,0,0.9864274859428406,0.9891805052757264,0.995746910572052,0.0,accept,unanimous_agreement
830578896,1799,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
830579306,1799,"we can define this flag under sbom flags at 546-553 line since this flag is unique for sbom subcommand. also, we should have another validation for sbom.",0,0,0,0.9875181317329408,0.9936583638191224,0.993713676929474,0.0,accept,unanimous_agreement
830579382,1799,this description looks stale. we don't have a prefix now.,-1,0,0,0.890444815158844,0.5884467363357544,0.5804653763771057,0.0,accept,majority_agreement
830579575,1799,we have to check if this type is valid.,0,0,0,0.9812927842140198,0.9817466735839844,0.989778697490692,0.0,accept,unanimous_agreement
830579663,1799,"also, we need to support git repositories.",0,0,0,0.9867357611656188,0.991746187210083,0.9940394163131714,0.0,accept,unanimous_agreement
830579788,1799,"also, we can put it under `newsbomcommand`.",0,0,0,0.9890152812004088,0.9931327700614928,0.9951100945472716,0.0,accept,unanimous_agreement
830853531,1799,what do you mean in validation for sbom?,0,0,0,0.985331416130066,0.988051176071167,0.9922118186950684,0.0,accept,unanimous_agreement
830897429,1799,i mean the same as below. [a link],0,0,0,0.9836090803146362,0.9344152212142944,0.9938302636146544,0.0,accept,unanimous_agreement
826896713,1832,the path is wrong. it would be like [code block] i'm not sure about nokogiri. please make the path look correct.,-1,0,-1,0.5207945704460144,0.6473693251609802,0.4992868304252624,-1.0,accept,majority_agreement
826899565,1832,"if it is not a requirement from cyclonedx, i think we should not sort vulns by id so that vulns can keep the same order as trivy's other results such as json.",0,0,0,0.986012637615204,0.99006849527359,0.9884554147720336,0.0,accept,unanimous_agreement
826916933,1832,just a question. is `cdx.advisory` exported as `externalreferences`?,0,0,0,0.9877979159355164,0.9920368194580078,0.9874037504196168,0.0,accept,unanimous_agreement
826917733,1832,what if we remove these lines and return an empty slice? is it problematic?,0,0,0,0.9417913556098938,0.8134410977363586,0.979168176651001,0.0,accept,unanimous_agreement
826918407,1832,looks like `%s` is fine in this case. [code block],0,0,0,0.9770593047142028,0.986050546169281,0.9712240695953368,0.0,accept,unanimous_agreement
826918862,1832,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
826919161,1832,`i` looks like an index.,0,0,0,0.9823958277702332,0.9897929430007936,0.990993320941925,0.0,accept,unanimous_agreement
826932156,1832,"if the data source has severity, rating will be duplicated?",0,0,0,0.9825531244277954,0.9918327331542968,0.9917981624603271,0.0,accept,unanimous_agreement
826934671,1832,"we probably should not remove vendorseverity from our result. then, we can use it for this field. [a link]",0,0,0,0.9861769080162048,0.9839774966239928,0.9913119077682496,0.0,accept,unanimous_agreement
826937172,1832,looks like we don't need to convert string to types.severity. [code block],0,0,0,0.9758735299110411,0.9869120121002196,0.987331211566925,0.0,accept,unanimous_agreement
826943342,1832,"also, specversion should be updated.",0,0,0,0.987192153930664,0.9931607246398926,0.9950790405273438,0.0,accept,unanimous_agreement
826964143,1832,"in the future, when outputting file hash values as cyclonedx, the processing results must always be equal.",0,0,0,0.9865397810935974,0.9922704696655272,0.9915432929992676,0.0,accept,unanimous_agreement
826966406,1832,thank you i will fix.,1,1,1,0.8248959183692932,0.8433352112770081,0.8923768997192383,1.0,accept,unanimous_agreement
826971282,1832,i may not have understood the question correctly. i think that vulnerability advisories and external references are different things. [a link],0,0,0,0.7788231372833252,0.937439739704132,0.8586778044700623,0.0,accept,unanimous_agreement
826981147,1832,"because vendor advisory does not always return the cwe-ids, i returned nil. although not explicitly stated in the documentation probably, by returning an empty array, the absence of a cwe-id is clearly expressed.",0,0,0,0.9897941946983336,0.9870455265045166,0.992521584033966,0.0,accept,unanimous_agreement
826983416,1832,thank you i will fix that.,1,1,1,0.7576737403869629,0.8330597877502441,0.9028013348579408,1.0,accept,unanimous_agreement
826983505,1832,thank you i will fix that.,1,1,1,0.7576737403869629,0.8330597877502441,0.9028013348579408,1.0,accept,unanimous_agreement
826984222,1832,thank you i will fix that.,1,1,1,0.7576737403869629,0.8330597877502441,0.9028013348579408,1.0,accept,unanimous_agreement
826991806,1832,thank you ! i forgot about it.,1,1,1,0.9668253660202026,0.9745895266532898,0.9930132031440736,1.0,accept,unanimous_agreement
826992085,1832,thank you i will fix that.,1,1,1,0.7576737403869629,0.8330597877502441,0.9028013348579408,1.0,accept,unanimous_agreement
827000368,1832,"i understood. i remove that line. then, use that rather than calculating from score.",0,0,0,0.9807555079460144,0.9770300388336182,0.9894228577613832,0.0,accept,unanimous_agreement
827029081,1832,the process was incorrect. processing in the case of no cvss has been added.,0,0,0,0.8889943957328796,0.7041717767715454,0.9795852899551392,0.0,accept,unanimous_agreement
830583399,1832,i mean the result is already sorted. [a link],0,0,0,0.9862594604492188,0.9684287309646606,0.9943643808364868,0.0,accept,unanimous_agreement
830583648,1832,you can see `type: advisories` in `externalreferences` here. what is the difference between `advisories` and `externalreferences`? [a link],0,0,0,0.9871382713317872,0.9929733276367188,0.9951007962226868,0.0,accept,unanimous_agreement
830584759,1832,i suggested as below. [a link],0,0,0,0.9859573841094972,0.9519346356391908,0.994640588760376,0.0,accept,unanimous_agreement
830585737,1832,thank you! understood...,1,1,1,0.9824747443199158,0.9928995370864868,0.9924312829971312,1.0,accept,unanimous_agreement
830900506,1832,[a link] vulns are temporarily unsorted by map.,0,0,0,0.9783530235290528,0.9905796647071838,0.9941645264625548,0.0,accept,unanimous_agreement
928206854,2567,do we need to bump the version?,0,0,0,0.9814852476119996,0.9922593235969543,0.9917587637901306,0.0,accept,unanimous_agreement
928206858,2567,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
928210175,2567,"no, we don't. i updated go.mod unintentionally. i checked again, and go.mod needs no modifications.",0,0,0,0.9517996311187744,0.9021512866020204,0.9920960664749146,0.0,accept,unanimous_agreement
928210322,2567,same [a link],0,0,0,0.9862238168716432,0.9852105975151062,0.9950562715530396,0.0,accept,unanimous_agreement
928778103,2567,"add this link, please. [a link]",0,0,0,0.9825353622436525,0.8934683203697205,0.9939247965812684,0.0,accept,unanimous_agreement
928780009,2567,do we need it?,0,0,0,0.9835900664329528,0.986260950565338,0.992378830909729,0.0,accept,unanimous_agreement
928781804,2567,"it is a nitpick, but we're recently trying to comply with the same convention. [a link] [code block]",0,0,0,0.98453289270401,0.7763271927833557,0.7670067548751831,0.0,accept,unanimous_agreement
928781972,2567,nit: ditto [code block],0,0,0,0.9793906211853028,0.9760655760765076,0.961178421974182,0.0,accept,unanimous_agreement
928783046,2567,"nit: imho, `require` is better here as all the subsequent assertions will fail anyway when it returns an error. [code block]",0,0,0,0.9860416054725648,0.9894387125968932,0.9180883169174194,0.0,accept,unanimous_agreement
928783225,2567,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
928785472,2567,can we add a keyless section?,0,0,0,0.9895490407943726,0.9938052892684937,0.9956563711166382,0.0,accept,unanimous_agreement
928786826,2567,[code block] and put it at the bottom. [code block],0,0,0,0.9881316423416138,0.9936391711235046,0.9950796365737916,0.0,accept,unanimous_agreement
929424443,2567,alright. i've added the link.,0,0,0,0.9771889448165894,0.9052056670188904,0.9920089244842528,0.0,accept,unanimous_agreement
929424938,2567,"sorry, i forgot to remove it.",-1,-1,-1,0.9844874739646912,0.9910504817962646,0.9920406937599182,-1.0,accept,unanimous_agreement
929425199,2567,i've fixed it.,0,0,0,0.9759785532951356,0.9754263162612916,0.7737823724746704,0.0,accept,unanimous_agreement
929425239,2567,i've fixed it.,0,0,0,0.9759785532951356,0.9754263162612916,0.7737823724746704,0.0,accept,unanimous_agreement
929425548,2567,it makes sense. i've fixed it.,0,0,0,0.9641695618629456,0.8861325979232788,0.6535428762435913,0.0,accept,unanimous_agreement
929425664,2567,i've fixed it.,0,0,0,0.9759785532951356,0.9754263162612916,0.7737823724746704,0.0,accept,unanimous_agreement
929425925,2567,alright. i've added a keyless signing section.,0,0,0,0.9824902415275574,0.963854432106018,0.9925232529640198,0.0,accept,unanimous_agreement
929425980,2567,i've fixed it.,0,0,0,0.9759785532951356,0.9754263162612916,0.7737823724746704,0.0,accept,unanimous_agreement
930748561,2567,to align with their doc. [a link] [code block],0,0,0,0.9880258440971376,0.990915596485138,0.9956627488136292,0.0,accept,unanimous_agreement
930750159,2567,we may have more predicates in the future. [code block],0,0,0,0.9882660508155824,0.9897466897964478,0.99479478597641,0.0,accept,unanimous_agreement
930755264,2567,this pr got merged. but we can keep our own structs so that we won't depend on cosign only for those small structs.,0,0,0,0.9877898693084716,0.9887199997901917,0.9931157231330872,0.0,accept,unanimous_agreement
931082952,2567,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
931083181,2567,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
931083299,2567,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
931086854,2567,i have added comments on the background and references.,0,0,0,0.9845794439315796,0.9803513884544371,0.992946207523346,0.0,accept,unanimous_agreement
1104440430,3599,remote mode should support `dockerhost` properly,0,0,0,0.987621009349823,0.9935420751571656,0.995544731616974,0.0,accept,unanimous_agreement
1104452845,3599,it's better to pass all options here. see `tryremote(...)`,0,0,0,0.9855198264122008,0.993938684463501,0.9952754974365234,0.0,accept,unanimous_agreement
1104883374,3599,"not sure how `dockerhost` will be an option to scan a remote docker repository like dockerhub etc. i guess leaving it as `""""` (empty) is fine. please do correct me if i'm wrong.",0,0,0,0.949954867362976,0.7673826217651367,0.950994908809662,0.0,accept,unanimous_agreement
1104883643,3599,:check_mark_button:,0,0,0,0.9869791269302368,0.9872032999992372,0.9915158748626708,0.0,accept,unanimous_agreement
1104883745,3599,:check_mark_button:,0,0,0,0.9869791269302368,0.9872032999992372,0.9915158748626708,0.0,accept,unanimous_agreement
1105716879,3599,"ah right, i mixed it up with client server mode. sorry for confusion",-1,-1,-1,0.9877524375915528,0.9905346035957336,0.9943066239356996,-1.0,accept,unanimous_agreement
1105718544,3599,marking this as resolved !,0,0,0,0.9665104150772096,0.660088062286377,0.9781908988952636,0.0,accept,unanimous_agreement
1791265605,7664,`--password-stdin` doesn't support `comma-separated`. but we can use `user` and `password`. if we don't want use a multiple credentials - we need to say about that in docs: [a link],0,0,0,0.9870972633361816,0.9907538890838624,0.9937545657157898,0.0,accept,unanimous_agreement
1791266850,7664,add new pages in `mkdocs.yml`,0,0,0,0.9864253997802734,0.993118166923523,0.9941688776016236,0.0,accept,unanimous_agreement
1791277373,7664,what if we also add the username here?,0,0,0,0.9857380390167236,0.9926503300666808,0.9937496185302734,0.0,accept,unanimous_agreement
1791295835,7664,`docker login` checks credentials: [code block] we don't do that: [code block] users will expect the same behavior. we need to add this check (if possible) or write in the docs that trivy just records the credentials without checking.,0,0,0,0.9859957098960876,0.9942631125450134,0.993228793144226,0.0,accept,unanimous_agreement
1791306309,7664,"nit: `docker logic` can be used without registry (default `docker.index.io` is used in this case). i guess we are not docker, so we don't need to use the same logic. but maybe we want to write in docs that default registry for `docker` is `docker.index.io` (because i never thought about it and checked `docker/cli` to find it :grinning_face_with_smiling_eyes: ).",1,0,1,0.9244906306266784,0.990199863910675,0.8498818278312683,1.0,accept,majority_agreement
1791361048,7664,"there are several tools supporting authentication nowadays. most of them don't have the default registry. [code block] [code block] [code block] [code block] i don't think we need to mention `docker login` here. it's well described. [code block] if we see users who get confused, we can update the doc.",0,0,0,0.9704138040542604,0.9898294806480408,0.988695502281189,0.0,accept,unanimous_agreement
1791367916,7664,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1791374085,7664,thanks. i always forget to update it. we probably need to automate it... [a link],1,1,1,0.9131876230239868,0.9192724227905272,0.9410402774810792,1.0,accept,unanimous_agreement
1791382759,7664,nice catch. it's better to exit in that case. fixed in [a link],1,1,1,0.962318241596222,0.9540004730224608,0.9860084652900696,1.0,accept,unanimous_agreement
1791401840,7664,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1791490447,7664,"i was aware of the difference, but `crane auth login` doesn't validate the credential, and i complied with it. however, it's better to do that in terms of ux, as you said. added [a link]",0,0,0,0.9807456731796264,0.9539374113082886,0.9937917590141296,0.0,accept,unanimous_agreement
1791517198,7664,"i think we don't need to split `--password-stdin` with `,` here: [a link] without `strings.split` we will immediately return an error on the number of users/passwords.",0,0,0,0.9887240529060364,0.9905940294265748,0.9877102375030518,0.0,accept,unanimous_agreement
1791679623,7664,^,0,0,0,0.4896445572376251,0.947323441505432,0.970213770866394,0.0,accept,unanimous_agreement
1791706418,7664,thanks. i tested it locally and forgot to revert. [a link],1,1,1,0.9197775721549988,0.976202428340912,0.9499934315681458,1.0,accept,unanimous_agreement
1005340280,3037,what if using `matrix`? [a link] we can have different installation steps respectively. [a link],0,0,0,0.9883527159690856,0.9936459064483644,0.995429754257202,0.0,accept,unanimous_agreement
1005341231,3037,what is this file for?,0,0,0,0.9856863617897034,0.9894634485244752,0.9923415184020996,0.0,accept,unanimous_agreement
1005341805,3037,doesn't rego work on windows?,0,0,0,0.9726263880729676,0.9892955422401428,0.9901707768440248,0.0,accept,unanimous_agreement
1005343510,3037,analyzing os doesn't work on windows?,0,0,0,0.938373327255249,0.9598718285560608,0.988455295562744,0.0,accept,unanimous_agreement
1005360831,3037,"it always seems to get skipped. am i missing something? also, this package is essential for scanning alpine linux. i think we need to run the test even on windows.",0,0,0,0.9388642311096193,0.8532628417015076,0.898521363735199,0.0,accept,unanimous_agreement
1005364772,3037,don't we need `testing.short()`? [code block],0,0,0,0.9878969192504884,0.9923048615455629,0.9953096508979796,0.0,accept,unanimous_agreement
1005371515,3037,we might be able to leverage `unix`. [code block] [a link],0,0,0,0.9881961941719056,0.990985870361328,0.99404776096344,0.0,accept,unanimous_agreement
1005378728,3037,seems like it already skips windows. do we need these lines? [a link],0,0,0,0.9761102795600892,0.9855749607086182,0.9914016127586364,0.0,accept,unanimous_agreement
1005379999,3037,do we need the if-statement as only windows reaches here? [a link],0,0,0,0.9895970225334167,0.9932076334953308,0.9950494170188904,0.0,accept,unanimous_agreement
1005380691,3037,looks like it skips anytime. [code block],0,0,0,0.9831974506378174,0.987758457660675,0.9890996813774108,0.0,accept,unanimous_agreement
1005382374,3037,this test is essential for container image scanning. is it hard to run tests on windows?,0,0,0,0.9862145781517028,0.979455590248108,0.9931904673576356,0.0,accept,unanimous_agreement
1005384192,3037,what if using maps.keys? [a link],0,0,0,0.9879321455955504,0.9931302666664124,0.9943509101867676,0.0,accept,unanimous_agreement
1005386120,3037,i'd like to know the reason we should check the key existence. doesn't the following work? [code block],0,0,0,0.980411410331726,0.9896311163902284,0.9908875226974488,0.0,accept,unanimous_agreement
1005387092,3037,please correct me if i'm wrong. [code block],0,0,0,0.943761944770813,0.9094396829605104,0.9166807532310486,0.0,accept,unanimous_agreement
1005387658,3037,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1014072347,3037,it didn't but i've found the issue in defsec so its resolved.,0,0,0,0.9767425656318665,0.9922004342079164,0.9934027791023254,0.0,accept,unanimous_agreement
1014155115,3037,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1014155262,3037,fixed in all the places,0,0,0,0.982003390789032,0.9883850812911988,0.9914413690567015,0.0,accept,unanimous_agreement
1014155327,3037,"no reason, it works fine. changed",1,0,0,0.5144593119621277,0.932547926902771,0.8947655558586121,0.0,accept,majority_agreement
1014155363,3037,"yup, good good",1,1,1,0.9871084094047546,0.9937463998794556,0.9835362434387208,1.0,accept,unanimous_agreement
1014155386,3037,test working now,0,0,0,0.9825589656829834,0.9822898507118224,0.8186177611351013,0.0,accept,unanimous_agreement
1014155413,3037,this is passing the tests now,0,0,0,0.9861928820610046,0.9842106103897096,0.9648943543434144,0.0,accept,unanimous_agreement
1014155434,3037,fixed this - removed the requirement for `skipwindows`,0,0,0,0.9873756170272828,0.9950410723686218,0.9919965863227844,0.0,accept,unanimous_agreement
1014155498,3037,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
1014157069,3037,"i'll have another look at this. i did it in a single file initially, but it was very ugly with so many conditions",-1,-1,-1,0.9137589931488036,0.9663857221603394,0.987583339214325,-1.0,accept,unanimous_agreement
1015208148,3037,"okay - done, not as ugly as i was worried it would be",-1,-1,-1,0.8958034515380859,0.8670848608016968,0.5594620704650879,-1.0,accept,unanimous_agreement
1045229164,3215,"does wolfi provide advisories for unfixed vulnerabilities? if no, we can remove these lines.",0,0,0,0.9857117533683776,0.982787013053894,0.994149684906006,0.0,accept,unanimous_agreement
1045229390,3215,"this is because wolfi doesn't have releases and eol, right? could you write it down why it always returns true?",0,0,0,0.980689823627472,0.9762300252914428,0.9928199648857116,0.0,accept,unanimous_agreement
1045229576,3215,this test case is for alpine linux. we can remove.,0,0,0,0.9866587519645692,0.9913449287414552,0.9937220215797424,0.0,accept,unanimous_agreement
1045229755,3215,it is not used anywhere.,0,0,0,0.8127294182777405,0.9531649947166444,0.985819697380066,0.0,accept,unanimous_agreement
1045273802,3215,"okay, thanks! removed in 40c4eb3f",1,1,1,0.9711986780166626,0.9833037853240968,0.9886794686317444,1.0,accept,unanimous_agreement
1045273846,3215,"yes, correct. added a comment to clarify in 0dfe8322",0,0,0,0.984879195690155,0.9628982543945312,0.9891692399978638,0.0,accept,unanimous_agreement
1045273861,3215,removed in a9f359ff,0,0,0,0.9845761060714722,0.9900555610656738,0.9902239441871644,0.0,accept,unanimous_agreement
1045273885,3215,removed in 5dee0a29,0,0,0,0.9862626791000366,0.992215096950531,0.9922983050346376,0.0,accept,unanimous_agreement
1510211377,6240,"nit: keep function call consist, in some cases `dependency.id` called directly in some cases it has a wrapper `packageid` in another case there is a wrapper [a link]",0,0,0,0.988535463809967,0.9941966533660888,0.9946500658988952,0.0,accept,unanimous_agreement
1510214121,6240,remove commented struct,0,0,0,0.9842365980148317,0.9867114424705504,0.9936165809631348,0.0,accept,unanimous_agreement
1510220115,6240,is this test should be removed ?,0,0,0,0.9828453660011292,0.9932542443275452,0.992701530456543,0.0,accept,unanimous_agreement
1510225235,6240,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
1510226305,6240,is this case is needed ? as later `if c.type == core.typelibrary || c.pkgid.purl != nil {` will catch it,0,0,0,0.9638763070106506,0.9939975738525392,0.9957797527313232,0.0,accept,unanimous_agreement
1510227049,6240,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
1510685986,6240,do you want to store this package in root dir of dependency package (`pkg/dependency`)? maybe it make sense to use value familiar to `utils` or `type` dir?,0,0,0,0.9896017909049988,0.9949681162834167,0.9941104054450988,0.0,accept,unanimous_agreement
1510703170,6240,some language types still don't use `id` field (e.g. gobinary - [a link] we may need to add id for them (we can do this in another pr) to avoid reporting differences.,0,0,0,0.9830151796340942,0.9907248616218568,0.9891799688339232,0.0,accept,unanimous_agreement
1517532485,6240,"yes, we should do that in another pr. this pr is already large.",0,0,0,0.9812427759170532,0.9899722337722778,0.9900141954421996,0.0,accept,unanimous_agreement
1517537563,6240,"it generates an id for dependencies. i don't think it's terrible to put it under `pkg/dependency.` the name `utils` should be used as little as possible, as it does not express anything. we only use it when we can't come up with a good package name, no matter how much we think about it. i would like to delete `utils` in the future.",-1,0,0,0.6181164979934692,0.4943114817142486,0.7606812119483948,0.0,accept,majority_agreement
1517548110,6240,"if it is called once, i'd call `dependency.id` directly. if it is called several times. i defined `packageid`. as you said, `id` and `packageid` should be aligned. fixed in [a link] thanks!",1,1,1,0.9260699152946472,0.977117657661438,0.982204258441925,1.0,accept,unanimous_agreement
1517552091,6240,my bad. thanks. removed in [a link],-1,-1,-1,0.9889967441558838,0.9865095019340516,0.9934693574905396,-1.0,accept,unanimous_agreement
1517552637,6240,fixed in [a link],0,0,0,0.98800128698349,0.9866787791252136,0.9950093030929564,0.0,accept,unanimous_agreement
1517552746,6240,fixed in [a link],0,0,0,0.98800128698349,0.9866787791252136,0.9950093030929564,0.0,accept,unanimous_agreement
1517552956,6240,deleted [a link],0,0,0,0.9631725549697876,0.9902043342590332,0.9684436917304992,0.0,accept,unanimous_agreement
1519151902,6240,got it.,0,0,1,0.8921144008636475,0.9649474024772644,0.8578740358352661,0.0,accept,majority_agreement
1519159075,6240,can you help me understand why we can't just always use `dependency.id`? ___ add `packageid`: - pkg/dependency/parser/java/pom/parse.go use `dependency.id`: - pkg/dependency/parser/swift/swift/parse.go,0,0,0,0.8735746741294861,0.9944866299629213,0.9950557947158812,0.0,accept,unanimous_agreement
1519173149,6240,i'll update the test.,0,0,0,0.9842405915260316,0.9805573225021362,0.9929646253585817,0.0,accept,unanimous_agreement
1519246418,6240,added [a link],0,0,0,0.9870722889900208,0.9884545803070068,0.993630588054657,0.0,accept,unanimous_agreement
1519248336,6240,take a look comment above.,0,0,0,0.9848339557647704,0.9804338812828064,0.9933884143829346,0.0,accept,unanimous_agreement
1520898747,6240,fixed. but it is not that strict policy. it won't end the world even if we don't follow it. [a link] [a link],0,0,0,0.9214431047439576,0.5378977060317993,0.5599265098571777,0.0,accept,unanimous_agreement
1574524190,6329,"i found this example in [a link]. [code block] we probably need a regexp like ``name\s*=\s*""([^""]+)""``. i want to avoid using regular expressions wherever possible, though.",0,0,0,0.9646158218383788,0.9914973378181458,0.9911043643951416,0.0,accept,unanimous_agreement
1574541454,6329,"in addition, if a conanfile.py is small enough, applying regexp to the file content might be simpler and faster. [code block] i am not 100% sure which is faster as i have not compared it with processing one line at a time. i was just thinking out loud, and it's not a performance critical process. you can decide.",0,0,0,0.8050113320350647,0.909279763698578,0.9823472499847412,0.0,accept,unanimous_agreement
1574547143,6329,we also need to parse the version as the license can be different depending on the version.,0,0,0,0.9871535897254944,0.9889419078826904,0.9913361072540284,0.0,accept,unanimous_agreement
1575905222,6329,"if i understand correctly - `conan` uses same file for each version: repository: [code block] cache dir: [code block] repository also contains 1 conanfile.py file for all versions. look at `conandata.yaml` file - [a link] i was thinking about the case where different versions use different licenses. but i didn't find an example for this. so i think we can define licenses by package name first. if we have any problems, we will update this logic.",0,0,0,0.9717413783073424,0.9833365082740784,0.9745070338249208,0.0,accept,unanimous_agreement
1575913464,6329,"it looks as bug, but we can also parse this case. i also don't trust regexp and try not to use them. i think we can just remove all the spaces. in the files that i checked, `name` and `license` fields are placed in first 20-30 lines. so i think we won't gain much time by doing this. 675 lines - [a link]",-1,0,0,0.7601925730705261,0.9191654324531556,0.9080632925033568,0.0,accept,majority_agreement
1575923228,6329,i added removing extra spaces - [a link],0,0,0,0.9851425290107728,0.9881333708763124,0.995498538017273,0.0,accept,unanimous_agreement
1575927775,6329,"where is the `conanfile.py` file defined in `conandata.yaml`? i found urls, but didn't find `conanfile.py`.",0,0,0,0.9873132109642028,0.994965136051178,0.99326753616333,0.0,accept,unanimous_agreement
1575932561,6329,if i understand correctly here it is -[a link],0,0,0,0.9846899509429932,0.983732283115387,0.9935221076011658,0.0,accept,unanimous_agreement
1575934409,6329,i probably got you. there is only one file stored in the repository. [a link] it seems like conan is unable to define different licenses. we can go with you implementation.,0,0,0,0.9427730441093444,0.9128328561782836,0.9915004968643188,0.0,accept,unanimous_agreement
1575937103,6329,why is it a bug? it does not break the python semantics.,0,0,0,0.8448082208633423,0.6283307075500488,0.9706614017486572,0.0,accept,unanimous_agreement
1575942257,6329,"it introduces another bug with `license = ""apache or mit"".",0,0,0,0.961763083934784,0.9823293089866638,0.9790040850639344,0.0,accept,unanimous_agreement
1575942803,6329,"i haven't seen such cases. also, all test cases use the format `name = ""foo""`. therefore, i assumed that this was a bug or maybe just a typo in the documentation. in any case, this is easy to solve.",0,0,0,0.9810968637466432,0.9717386960983276,0.9762331247329712,0.0,accept,unanimous_agreement
1575945349,6329,"it should be more strict. otherwise, it matches other than the license line. that's why i suggested regexp this time. [a link]",0,0,0,0.9847614765167236,0.989468276500702,0.9934347867965698,0.0,accept,unanimous_agreement
1575946343,6329,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1575949465,6329,"conanfile is written by hand, so any format is possible, isn't it? i think there is a customary preferred format, but it is legitimate.",0,0,0,0.9859991669654846,0.9792969822883606,0.993081271648407,0.0,accept,unanimous_agreement
1575952956,6329,you are right :thumbs_up:,0,1,1,0.7392419576644897,0.8361995816230774,0.9945632815361024,1.0,accept,majority_agreement
1575954488,6329,it looks like we can't avoid using regexp...,0,0,0,0.6420727968215942,0.8935766220092773,0.9860988855361938,0.0,accept,unanimous_agreement
1575956519,6329,"if possible, i don't want to use regexp. i'm still considering a way to parse the license line without regexp, but...",0,-1,0,0.527718722820282,0.8088776469230652,0.8248559832572937,0.0,accept,majority_agreement
1575957435,6329,isn't `conanfile.txt` used?,0,0,0,0.9854492545127868,0.9945127964019777,0.9944775700569152,0.0,accept,unanimous_agreement
1575983179,6329,take a look this -[a link],0,0,0,0.9850428104400636,0.9823170900344848,0.9876708984375,0.0,accept,unanimous_agreement
1575989355,6329,"yes, it's better.",0,0,0,0.9272701740264891,0.9441497325897216,0.681629478931427,0.0,accept,unanimous_agreement
1576005273,6329,cache dir contains only `conanfile.py` files: [code block],0,0,0,0.9887073040008544,0.9937460422515868,0.9957355260849,0.0,accept,unanimous_agreement
1576043924,6329,used `strings.cut` - [a link] + [a link],0,0,0,0.9883418679237366,0.9946016073226928,0.9958764314651488,0.0,accept,unanimous_agreement
1576575948,6329,is `conanfile.py` required? i'm wondering if we just don't find a project using `conanfile.txt` as most projects use `conanfile.py`. but we can handle `conanfile.txt` if we find such a case.,0,0,0,0.98574697971344,0.990447163581848,0.986409306526184,0.0,accept,unanimous_agreement
1576580660,6329,[a link] seems better. [code block],0,0,0,0.9661272168159484,0.977185606956482,0.9756568670272828,0.0,accept,unanimous_agreement
1577167446,6329,"iiuc only `conanfile.py` contains [a link] - [a link] therefore, we can't detect package name/license from `conanfile.txt` files. then we don't need to parse the conanfile.txt files.",0,0,0,0.9874396324157716,0.9936668276786804,0.9934056997299194,0.0,accept,unanimous_agreement
1577187870,6329,changed in [a link],0,0,0,0.9864720106124878,0.9879952073097228,0.9932738542556764,0.0,accept,unanimous_agreement
1632652139,6882,the code base doesn't seem to support the dependency graph. it needs which package depends on which package. it returns nil here. [a link],0,0,0,0.9775835275650024,0.9833278059959412,0.9824202060699464,0.0,accept,unanimous_agreement
1633113184,6882,"sorry, corrected that.",-1,-1,-1,0.9868637323379515,0.992624580860138,0.9896026253700256,-1.0,accept,unanimous_agreement
1633640906,6882,seems like it's not used anywhere. we can delete it. [code block],0,0,0,0.9728023409843444,0.9891027212142944,0.99208801984787,0.0,accept,unanimous_agreement
1634210107,6882,[code block] - use `var libraries ftypes.packages` for this. - you can remove this after that: [a link],0,0,0,0.9856508374214172,0.993914783000946,0.9955718517303468,0.0,accept,unanimous_agreement
1634211331,6882,[code block] i think we can avoid unmarshalling unused fields.,0,0,0,0.9853007197380066,0.9831151366233826,0.9935559630393982,0.0,accept,unanimous_agreement
1634215090,6882,we don't need to parse other files (we only need lock file) so i think it's better to use [a link],0,0,0,0.974117398262024,0.9793928861618042,0.9919341802597046,0.0,accept,unanimous_agreement
1634217926,6882,"correct me, if i am wrong. uuic default name is `build.sbt.lock`. but you can use any name with [a link] i think in this case we can compare file names with `build.sbt.lock`. for other names user can use [a link] or do users often use the names `*.sbt.lock`?",0,0,0,0.9773364663124084,0.962605357170105,0.8911020159721375,0.0,accept,unanimous_agreement
1634219116,6882,we don't add empty apps. e.g.: [a link],0,0,0,0.9811683893203736,0.9834281802177428,0.9945123195648192,0.0,accept,unanimous_agreement
1634221350,6882,nit: we try to use tests with results first (`v1 lockfile` -> `empty lockfile` in your case).,0,0,0,0.9896826148033142,0.9939099550247192,0.99110209941864,0.0,accept,unanimous_agreement
1634224322,6882,we include only `runtime` and `compile` scopes for `pom.xml` files: [a link] i think we need to use same logic here.,0,0,0,0.9882835149765016,0.9934735894203186,0.9942149519920348,0.0,accept,unanimous_agreement
1634231302,6882,i thought we would parse other files in the future. let's ask the future plan of sbt-dependency-lock.,0,0,0,0.9849334359169006,0.9877166152000428,0.9905591011047364,0.0,accept,unanimous_agreement
1634399680,6882,future improvements to sbt-dependency-lock will be added to the existing `*.sbt.lock` files. is it still possible to walk the directory in an `analyzer`? it is common to have multiple sub-projects in sbt and each of these would generate their own `build.sbt.lock` file.,0,0,0,0.9889379739761353,0.9958314299583436,0.9944735169410706,0.0,accept,unanimous_agreement
1634404418,6882,i'm not aware of anyone overriding the default filename (`build.sbt.lock`) but i'm sure someone is using it! i'll change it over to use the default.,0,0,0,0.9227569103240968,0.7786579132080078,0.836566686630249,0.0,accept,unanimous_agreement
1634561891,6882,"what is the sub-project? does it belong to the main project? or are they separate projects? if you need to process those files at the same time, you need to use `postanalyzer`. if you only need to parse them individually, `analyzer` is more efficient. for example, trivy needs both `package.json` and `package-lock.json` for npm projects and uses `postanalyzer` in this case.",0,0,0,0.9854875802993774,0.9951779842376708,0.9932978749275208,0.0,accept,unanimous_agreement
1635171999,6882,sbt supports having multiple projects within a single parent project. generally each sub-project will generate its own artifacts (jars/wars/graalvm binaries etc) and will be in a sub-directory of the parent project. configuration for sub-projects (including dependencies) is _extremely_ flexible and can be defined in any of the following locations (or a combination): - `build.sbt` in the sub-project dir. - inherited from the root `build.sbt`. - configured from the `project` directory of the root project. the sbt-dependency-lock plugin will generate a separate `build.sbt.lock` file in each of the sub-projects that will contain all the dependencies of that sub-project.,0,0,0,0.9191383719444276,0.99413800239563,0.8861414790153503,0.0,accept,unanimous_agreement
1635878021,6882,"do you want to process `build.sbt.lock` separately or together? when processed together, all dependent packages are shown as root `build.sbt.lock`. if not, they are just different lock files and show dependencies respectively.",0,0,0,0.9890100359916688,0.9948835968971252,0.9942476749420166,0.0,accept,unanimous_agreement
1644077229,6882,after thinking about it i reckon that processing them separately is probably better for the majority of sbt users.,0,0,0,0.9599503874778748,0.9342507719993592,0.977645754814148,0.0,accept,unanimous_agreement
1645517121,6882,thanks for your insight. we can use the analyzer for now and switch to the post-analyzer when we need to combine those files.,1,1,1,0.9456839561462402,0.7742347121238708,0.9476404190063475,1.0,accept,unanimous_agreement
1645536087,6882,`input.filepath` is enough. [code block],0,0,0,0.9864647388458252,0.9889973402023317,0.9955180287361144,0.0,accept,unanimous_agreement
1645537953,6882,nit: [code block],0,0,0,0.9873168468475342,0.9847351312637328,0.9919844269752502,0.0,accept,unanimous_agreement
1645713823,6882,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1645714079,6882,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1528302220,6333,`package` already contains location - [a link] what if we just add location when creating a new vulnerability? [a link],0,0,0,0.989003360271454,0.9938400387763976,0.9955833554267884,0.0,accept,unanimous_agreement
1528303861,6333,iirc os packages don't have locations,0,0,0,0.9858298897743224,0.8207239508628845,0.9851911664009094,0.0,accept,unanimous_agreement
1528305951,6333,location from package is different- [a link],0,0,0,0.983951985836029,0.9882549047470092,0.9921194314956664,0.0,accept,unanimous_agreement
1529457109,6333,not clear on this should i create a new type for locations in fanal/types for both packages and vulnerabilitydetected?,0,0,0,0.9760718941688538,0.9639381170272828,0.9726130962371826,0.0,accept,unanimous_agreement
1529612673,6333,"not sure, i copied the first test case and used it, it has location fields in packages but if you want i change it as well. also it will be great if you can point out any relevant reading materials that i can go through.",1,1,1,0.5919827818870544,0.5361005067825317,0.6318633556365967,1.0,accept,unanimous_agreement
1529795148,6333,you can see the packet parser [a link]. you can see the language files that support places [a link],0,0,0,0.98508620262146,0.9764312505722046,0.9946922659873962,0.0,accept,unanimous_agreement
1529797106,6333,i think it's better to add language package (like yarn.lock or pom.xml) to avoid confusion when we support this code later.,0,0,0,0.9786403775215148,0.9863296151161194,0.9833494424819946,0.0,accept,unanimous_agreement
1529801791,6333,no. you can use `ftypes.location` in `vulnerabilitydetected`. you have already chosen right solution: [a link],0,0,0,0.987497091293335,0.9872944951057434,0.9938307404518129,0.0,accept,unanimous_agreement
1529822410,6333,we don't need location cache and package check now. what do you thin about this update for this function: [code block],0,0,0,0.975165069103241,0.9777372479438782,0.9953493475914,0.0,accept,unanimous_agreement
1529824039,6333,you need to add locations in both places: - package - detectvulnerability but these must be the same line numbers.,0,0,0,0.9869660139083862,0.9889159202575684,0.9950838685035706,0.0,accept,unanimous_agreement
1531330925,6333,"initially, i considered this approach. however, i decided that implementing backward compatible changes would be beneficial as some other code might be using this. if you're confident that this won't impact the approach, i'll proceed with updating it to match the example you provided.",0,0,0,0.9712963700294496,0.967458724975586,0.971401572227478,0.0,accept,unanimous_agreement
1531461911,6333,"if another app generates `report` using trivy packages - these changes will have no effect. but if this app creates `report` on its own, it will need to simply copy `location` from `package` to `vulnerabilities detected`. so i think these changes won't be a problem.",0,0,0,0.9806493520736694,0.9884597063064576,0.9792786836624146,0.0,accept,unanimous_agreement
1531469041,6333,"it appears there might be referring to wrong test case in the comment. my changes actually begin from line 544. nevertheless, i've refactored the test case for a package vulnerability as per your suggestion.",0,0,0,0.9778487086296082,0.980209231376648,0.9865816831588744,0.0,accept,unanimous_agreement
1531469354,6333,i have added a yarn vulnerability as a test case replacing the previous osdependency,0,0,0,0.9842246770858764,0.9220264554023744,0.9936407208442688,0.0,accept,unanimous_agreement
1887990776,8106,"wdyt about moving this function to `pkg/dependency/parser/python/utils.go` this is the logic described in `pep`, so we can say that it is a common function for python",0,0,0,0.9813289642333984,0.7593732476234436,0.9915575981140136,0.0,accept,unanimous_agreement
1887995355,8106,is this used anywhere?,0,0,0,0.9868593215942384,0.989799976348877,0.9940593242645264,0.0,accept,unanimous_agreement
1888000403,8106,uuic we use only map keys we still create `unmarshaltoml` function for dependencies. perhaps we want to use map[string]struct{}.,0,0,0,0.9897831082344056,0.9953340888023376,0.990961730480194,0.0,accept,unanimous_agreement
1888116108,8106,wdyt? [code block],0,0,0,0.988066554069519,0.9574412107467652,0.9910829067230223,0.0,accept,unanimous_agreement
1888227283,8106,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1888227412,8106,deleted,0,0,0,0.9476664662361144,0.9717172980308532,0.8444666862487793,0.0,accept,unanimous_agreement
1888227744,8106,done [a link],0,0,0,0.987381100654602,0.9436766505241394,0.9950201511383056,0.0,accept,unanimous_agreement
1888229004,8106,"got the idea, used the package id [a link]",0,0,0,0.9794211387634276,0.915773630142212,0.9909356236457824,0.0,accept,unanimous_agreement
1889644139,8106,"do we need to check if a package with `pkgid` exists before adding it to `visited`? iiuc we check for this case in the parser: [a link] but i would still prefer to leave the ""correct"" order of actions wdyt?",0,0,0,0.9890263676643372,0.992950201034546,0.9920796751976012,0.0,accept,unanimous_agreement
1889648220,8106,i am thinking about moving logic into `getproddeps` and renaming function to `filterdevdeps`. wdyt?,0,0,0,0.9851436018943788,0.983829915523529,0.98519104719162,0.0,accept,unanimous_agreement
1889903224,8106,"should we be strict when checking? a package can only be missing in 1 case if `pyproject.toml` is manually updated and a new dependency is added and no dependency locking is performed, but the `lockfile` is still considered valid.",0,0,0,0.9889774918556212,0.9942343831062316,0.9901034832000732,0.0,accept,unanimous_agreement
1889910582,8106,"ok, but i think it's more correct to call it `filterprodpackages`, since `filderdev` stands for dependency filtering and dev extraction.",0,0,0,0.986830711364746,0.9899234175682068,0.988461971282959,0.0,accept,unanimous_agreement
1890085511,8106,"let's stay this check for this case. sometimes users forget to update the lock file after updating the ""main"" file this check will remove ambiguities",0,0,0,0.9777282476425172,0.9758594632148744,0.9945955872535706,0.0,accept,unanimous_agreement
1890220463,8106,"i was a little mistaken. with recursive traversal, the packet is guaranteed to exist. it can only be missing [a link] for two reasons: the user removed the package manually from `pyproject.toml` or the package is not a direct dependency, but we cannot determine the exact reason.",0,0,0,0.9299723505973816,0.7281307578086853,0.80210280418396,0.0,accept,unanimous_agreement
1891206050,8106,"okay, then we can remove this check.",0,0,0,0.985631823539734,0.9757349491119384,0.9913893342018129,0.0,accept,unanimous_agreement
1893539721,8106,nit: for consistency and stacktrace [code block],0,0,0,0.9874306917190552,0.9801399111747742,0.993907392024994,0.0,accept,unanimous_agreement
1893546580,8106,"we should flag [a link] instead of filtering for `--include-dev-deps`, but if you want to keep the original behavior in this pr, we can add the change in a separate pr.",0,0,0,0.989557445049286,0.9947565793991088,0.995023250579834,0.0,accept,unanimous_agreement
1893549458,8106,as i wrote in [a link] - are you sure that we want to add dev deps under `dev` field? previously we only did this upon request from users. i have yet to meet a python user who needs to scan for dev dependencies,0,0,0,0.9849233627319336,0.978184163570404,0.9939635396003724,0.0,accept,unanimous_agreement
1893964745,8106,"hmm. it sounds reasonable, but we should add a new column showing if --include-dev-deps is supported.",0,0,0,0.9751943349838256,0.9272626638412476,0.9640700817108154,0.0,accept,unanimous_agreement
1893978531,8106,"but if the implementation cost is not so different, it's better to mark dev dependencies.",0,0,0,0.9803080558776855,0.9702724814414978,0.9913357496261596,0.0,accept,unanimous_agreement
1894593920,8106,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
1894593985,8106,i'll open another pr for this one,0,0,0,0.960055947303772,0.9842126965522766,0.989739716053009,0.0,accept,unanimous_agreement
369567830,376,would you replace these lines with an install script? [a link],0,0,0,0.9890940189361572,0.9898682832717896,0.9957258701324464,0.0,accept,unanimous_agreement
369569261,376,does the scan without this line fail? trivy is supposed to fetch an image from docker registry automatically after docker finishes `docker login` equivalent.,0,0,0,0.988631784915924,0.9942037463188172,0.9831274747848512,0.0,accept,unanimous_agreement
369569834,376,are these lines required?,0,0,0,0.9852880835533142,0.9897812604904176,0.9942675232887268,0.0,accept,unanimous_agreement
369580874,376,it seems to work. [a link],0,1,0,0.9740744233131408,0.5139406323432922,0.5306563973426819,0.0,accept,majority_agreement
369581851,376,i tested it here. [a link],0,0,0,0.98212331533432,0.8629150986671448,0.9929680228233336,0.0,accept,unanimous_agreement
369900026,376,fix it in d4e0cc9.,0,0,0,0.9858387112617492,0.993949294090271,0.993522584438324,0.0,accept,unanimous_agreement
369900262,376,nice improvement! fix it in d4e0cc9.,1,1,1,0.9881932139396667,0.9919690489768982,0.9961571097373962,1.0,accept,unanimous_agreement
369901724,376,"as these indicates only that this is ready for the integration with gitlab container scanning feature, we can remove them.",0,0,0,0.9889960289001464,0.9899000525474548,0.9944610595703124,0.0,accept,unanimous_agreement
369901992,376,let's remove them. did it in df726fe.,0,0,0,0.9884704351425172,0.9942072629928588,0.9942820072174072,0.0,accept,unanimous_agreement
369907124,376,`contrib/gitlab.tpl` is missing now while the install script was improved.,0,0,0,0.9886287450790404,0.9944872260093688,0.993402063846588,0.0,accept,unanimous_agreement
369915412,376,could you help me find out what is wrong? it is confirmed that template exists and the command arguments look correct: [a link],0,0,0,0.98261821269989,0.9879226088523864,0.9867472648620604,0.0,accept,unanimous_agreement
369992895,376,"i'm sorry the install script fetches the latest version of trivy, but the latest version doesn't support a file template yet. i'll release it soon.",-1,-1,-1,0.9871784448623656,0.9891448616981506,0.9916227459907532,-1.0,accept,unanimous_agreement
370020991,376,i've released v0.4.3. would you try it again?,0,0,0,0.9853041768074036,0.9923778772354126,0.9933255910873412,0.0,accept,unanimous_agreement
370222792,376,want to make this alpine:3.11 or :latest to be explicit?,0,0,0,0.9749209880828856,0.993864357471466,0.994543194770813,0.0,accept,unanimous_agreement
370288531,376,"is there a way we could not fetch this from master? if the template changes and the downloaded binary does not support it, this could cause incompatibilities. maybe we can parse $(trivy --version) and pull from the tag instead?",0,0,0,0.917027473449707,0.9839668869972228,0.9927021265029908,0.0,accept,unanimous_agreement
370648894,376,thanks. it works now! :smile: [a link] script will be updated when other matters are addressed.,1,1,1,0.9916179776191713,0.9957600235939026,0.9972694516181946,1.0,accept,unanimous_agreement
370649209,376,let use use `3.11` :thumbs_up:,0,0,1,0.978078544139862,0.9734978675842284,0.9701679944992064,0.0,accept,majority_agreement
370650813,376,"you are right. we should use environment variables to fix. with environment variables with the default value of trivy version, (gitlab ci) users can inject arbitrary version of (trivy-gitlab) template, which will reduce regression and be helpful for users of non-latest version gitlab.",0,0,0,0.8073713779449463,0.6175930500030518,0.9525115489959716,0.0,accept,unanimous_agreement
370758058,376,"we could call the trivy binary after fetching and installing. `trivy_version=${trivy_version:-$(/usr/local/bin/trivy --version | sed -e ""s/trivy version //"")}`",0,0,0,0.9850416779518129,0.9945427179336548,0.994523286819458,0.0,accept,unanimous_agreement
370988378,376,"thanks for your suggestion. on reflection, we do not have to get version from trivy binary :grinning_face_with_smiling_eyes: i prefer pinning the trivy version to make users' devops robust as much as possible.",1,1,1,0.9584455490112304,0.9593811631202698,0.990062654018402,1.0,accept,unanimous_agreement
1242182829,4706,why do we need this field?,0,0,0,0.9629247784614564,0.9725064039230348,0.9862318634986876,0.0,accept,unanimous_agreement
1242230945,4706,good catch! it was added by mistake. it will be fixed along with the other comment in the next commit.,1,1,1,0.9917538166046144,0.9919167160987854,0.9966500401496888,1.0,accept,unanimous_agreement
1246185175,4706,seems like this file doesn't have to be updated,0,0,0,0.9576886892318726,0.9679802656173706,0.9863274097442628,0.0,accept,unanimous_agreement
1246185261,4706,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1246185383,4706,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
1246187576,4706,is it needed? `pkg` seems to be already reset above.,0,0,0,0.986568570137024,0.993765115737915,0.9950734972953796,0.0,accept,unanimous_agreement
1246188282,4706,"looks like an absolute path, no?",0,0,0,0.9629341959953308,0.9774288535118104,0.9822383522987366,0.0,accept,unanimous_agreement
1246190456,4706,"`keepsysteminstalledfiles` shouldn't always be true. we should pass the value for each test case. otherwise, we cannot test the case where `keepsysteminstalledfiles` is false.",0,0,0,0.974122941493988,0.993308424949646,0.991634964942932,0.0,accept,unanimous_agreement
1273380077,4706,"indeed, i changed it",0,0,0,0.9828343391418456,0.9643620252609252,0.989584982395172,0.0,accept,unanimous_agreement
1273380313,4706,it should be removed as well,0,0,0,0.982219696044922,0.9925243258476256,0.9841827750205994,0.0,accept,unanimous_agreement
1275905618,4706,do we need to further document the usage of the flag?,0,0,0,0.9832665920257568,0.9929786324501038,0.994168758392334,0.0,accept,unanimous_agreement
1291202935,4706,thanks for the comment ! i changed it to`--retain-system-installed-files retains the files installed by each package in the analysis output when set to true.` do we need to add anything ?,1,1,1,0.966926336288452,0.9845348596572876,0.9821552038192748,1.0,accept,unanimous_agreement
1299318597,4706,"nit: this field is located under `package`, so we can simply call it `installedfiles`. [code block]",0,0,0,0.9886806011199952,0.9833696484565736,0.9947150349617004,0.0,accept,unanimous_agreement
1299318944,4706,"this mistake is not from your change, but we should close this file. [code block]",0,0,0,0.9255695343017578,0.9895127415657043,0.6557956337928772,0.0,accept,unanimous_agreement
1299319355,4706,does `pkg` make more sense? [code block],0,0,0,0.987332046031952,0.9920086860656738,0.9949280023574828,0.0,accept,unanimous_agreement
1299319799,4706,we should merge these two values since `systeminstalledfiles` is now just a collection of installed files for all packages. it doesn't make sense to have them differently. but we can refactor that after merging the pr.,0,0,0,0.9833405613899232,0.9932209253311156,0.99399334192276,0.0,accept,unanimous_agreement
895115443,2186,does k8s subcommand accept multiple commands?,0,0,0,0.9876322746276855,0.9927603006362916,0.9942779541015624,0.0,accept,unanimous_agreement
895170758,2186,does all and cluster subcommands should appear at the end,0,0,0,0.9883688688278198,0.9902746677398682,0.9951388835906982,0.0,accept,unanimous_agreement
895175527,2186,"i would put more informative error msg , so the user will know what to do to fix it",0,0,0,0.9812861680984496,0.9642561674118042,0.9772428870201112,0.0,accept,unanimous_agreement
895175563,2186,"i would put more informative error msg, so the user will know what to do to fix it",0,0,0,0.9812861680984496,0.9685956835746764,0.9796262383461,0.0,accept,unanimous_agreement
895184465,2186,the idea is supporting resources scanning like kubectl: eg: [code block],0,0,0,0.9820499420166016,0.992599368095398,0.9935391545295716,0.0,accept,unanimous_agreement
895184684,2186,"yes, `all` and `cluster` should be at the end, as they are `targets`. like we do for other trivy commands. `trivy image --security-checks=config alpine:latest`",0,0,0,0.9577742218971252,0.994897186756134,0.9939234852790833,0.0,accept,unanimous_agreement
897638998,2186,we can change it after we move to cobra.,0,0,0,0.9864010214805604,0.9890151619911194,0.9913761019706726,0.0,accept,unanimous_agreement
897639802,2186,thanks. it makes sense.,1,1,1,0.8335576057434082,0.9661772847175598,0.9660263061523438,1.0,accept,unanimous_agreement
919955456,2494,can you tell me the reason you removed this line? i thought it would be helpful even when we fetch only a single branch.,0,0,0,0.9750383496284484,0.9881686568260192,0.9933151602745056,0.0,accept,unanimous_agreement
919956088,2494,debug code?,0,0,0,0.9882348775863647,0.973319172859192,0.9787267446517944,0.0,accept,unanimous_agreement
919956925,2494,why don't you use newbranchreferencename? [code block],0,0,0,0.986685276031494,0.9943608641624452,0.9949153661727904,0.0,accept,unanimous_agreement
919957213,2494,same [code block],0,0,0,0.986836314201355,0.9843027591705322,0.9953988194465636,0.0,accept,unanimous_agreement
919959791,2494,nit [code block],0,0,0,0.9879410862922668,0.9891023635864258,0.9871647357940674,0.0,accept,unanimous_agreement
919961084,2494,these fields require a prefix as this struct is embedded into `options`. [code block],0,0,0,0.988369345664978,0.9936957955360411,0.996056318283081,0.0,accept,unanimous_agreement
919994915,2494,"so this now, by default, stays removed because a user might pass the `--commit` argument for which we would need the entire commit history. and for cases when its not a `--commit`, we set it back to `1` [a link]",0,0,0,0.9871402382850648,0.9945369362831116,0.9948981404304504,0.0,accept,unanimous_agreement
919995352,2494,"sorry my bad, forgot to remove the debugs here.",-1,-1,-1,0.9874835014343262,0.9928939938545228,0.9940535426139832,-1.0,accept,unanimous_agreement
919997449,2494,"woah, did not notice this function at all. thanks a lot, implementing this for tags as well as branches both!",1,1,1,0.9908624887466432,0.9902352094650269,0.9954829216003418,1.0,accept,unanimous_agreement
919997676,2494,implementing the change,0,0,0,0.982508897781372,0.9885926246643066,0.9936156272888184,0.0,accept,unanimous_agreement
920028675,2494,it makes sense. thanks.,1,1,1,0.9032182693481444,0.9633778929710388,0.97603839635849,1.0,accept,unanimous_agreement
920834595,2494,we don't depend on the internet in unit tests. please think about the use of a dummy server. [a link],0,0,0,0.9840846061706544,0.9808570146560668,0.9923861026763916,0.0,accept,unanimous_agreement
920905871,2494,could not find much of documentation about this :/ can you help me out here if possible?,-1,-1,-1,0.8680728673934937,0.9493464231491088,0.995835781097412,-1.0,accept,unanimous_agreement
920906165,2494,made and pushed these changes,0,0,0,0.9836381673812866,0.9839297533035278,0.9913778305053712,0.0,accept,unanimous_agreement
921104179,2494,we have a bare git repository in `testdata`. [code block] i hope it works.,1,1,0,0.5788601636886597,0.5002018213272095,0.7685527205467224,1.0,accept,majority_agreement
921203543,2494,"thank you for this, was able to do it (i hope) correctly!",1,1,1,0.967904567718506,0.9895059466362,0.9928446412086488,1.0,accept,unanimous_agreement
1029003601,3130,it will be more informative to put more info and the cis checks and link to spec,0,0,0,0.9738472104072572,0.9732268452644348,0.9901695847511292,0.0,accept,unanimous_agreement
1029019282,3130,wonder if there is a way to override it so it will not show `cis` for `trivy k8s` and `nsa` for `trivy aws` sub command as it is not supported and throw an error if used by users,0,0,0,0.649101734161377,0.9715753793716432,0.9530948400497437,0.0,accept,unanimous_agreement
1029955078,3130,thanks added,1,1,0,0.5284340977668762,0.7709925770759583,0.7172717452049255,1.0,accept,majority_agreement
1029955793,3130,we could leave the specs out of the help text to make it more generic. [code block],0,0,0,0.9884900450706482,0.9931423664093018,0.9940229058265686,0.0,accept,unanimous_agreement
1031337964,3130,"the compliance framework also provide data when `opt.reportformat == ""all""` not just `summary` and also support json and table view. so in total you can produce four types of output: - table with report == summary - table with report == all - json with report == summary - json with report == all",0,0,0,0.9745166301727296,0.9920839071273804,0.9945570230484008,0.0,accept,unanimous_agreement
1031766881,3130,`--format=json --report=summary`: [a link] `--format=json --report=all`: [code block] `--format=table --report=summary`: [a link] `--format=table --report=all`: [a link] (this combination today doesn't actually return a table in trivy k8s fyi). please let me know if i've missed something.,0,0,0,0.9702110886573792,0.9874762892723083,0.9810898900032043,0.0,accept,unanimous_agreement
1031817236,3130,"do we want to produce report for `opt.reportformat == all`? maybe the condition `opt.reportformat == ""summary""` can be removed?",0,0,0,0.98867666721344,0.9953581690788268,0.994882583618164,0.0,accept,unanimous_agreement
1031865188,3130,"yes i agree, that makes sense. updated here [a link]",0,0,0,0.9352908730506896,0.888320803642273,0.9566828012466432,0.0,accept,unanimous_agreement
1037011394,3130,"we can override usage like [a link] but should the value `cis`? i thought it should be `awscis1.2` and `awscis1.4`. please correct me if i'm missing something. btw, even though we can override the accepted values, do we still need the `aws` prefix? i mean `cis1.2` vs `awscis1.2`.",0,0,0,0.9870162010192872,0.9894948601722716,0.971138834953308,0.0,accept,unanimous_agreement
1037066649,3130,i prefer text-based as it is easy to update. do you have any reason you want to use an image here?,0,0,0,0.8365378975868225,0.9866835474967957,0.9849322438240052,0.0,accept,unanimous_agreement
1037072638,3130,this page is not included in mkdocs.yml. [code block],0,0,0,0.9791364073753356,0.9934049248695374,0.994743824005127,0.0,accept,unanimous_agreement
1037073328,3130,and the page is broken. you can build the doc and test it locally with `make mkdocs-serve`.,0,0,0,0.9808216094970704,0.9762794375419616,0.9859765768051147,0.0,accept,unanimous_agreement
1038500488,3130,ah sorry thanks i forgot about this - i fixed it.,-1,-1,-1,0.9832592010498048,0.992672085762024,0.992714822292328,-1.0,accept,unanimous_agreement
1038501011,3130,"it was an image in the k8s compliance markdown so i decided to go that route. i changed it to text, no problem.",0,0,0,0.9034962058067322,0.9762500524520874,0.7984859943389893,0.0,accept,unanimous_agreement
1038922017,3130,i think you need spaces or tabs here.,0,0,0,0.986868381500244,0.970894694328308,0.9880648255348206,0.0,accept,unanimous_agreement
1038924752,3130,fixed in [a link],0,0,0,0.98800128698349,0.9866787791252136,0.9950093030929564,0.0,accept,unanimous_agreement
1038925007,3130,"please review my change. also, do we support cis 1.4 too? don't we mention that in the doc? looks like the current doc mentions cis 1.2 only.",0,0,0,0.9798955917358398,0.9861650466918944,0.993163764476776,0.0,accept,unanimous_agreement
1041589724,3130,thanks for catching that!,1,1,1,0.9599462151527404,0.8953269124031067,0.9286797046661376,1.0,accept,unanimous_agreement
1041691766,3130,"your change looks good, thanks i learnt something new! i updated the docs to include 1.4 as well. as for the prefixes, i think we should include them. cis publishes many benchmarks and we should be clear that its the aws version of the cis benchmarks.",1,1,1,0.9880486130714417,0.9916421175003052,0.9964351654052734,1.0,accept,unanimous_agreement
1042574403,3130,got it :thumbs_up:,0,1,1,0.508533239364624,0.8676651120185852,0.9950631260871888,1.0,accept,majority_agreement
1307167178,5037,"is there any specific logic for the combination of cyclonedx and cocoapods besides purl? if not, we don't need to test the same thing again here as we test the purl logic in the `purl` package enough.",0,0,0,0.988754391670227,0.9938066005706788,0.9934900999069214,0.0,accept,unanimous_agreement
1307182321,5037,we don't test [a link] function in `purl` package. i only found 1 my mistake with `subpath` when testing sbom manually. that is why i added tests in sbom.,0,0,0,0.9528233408927916,0.9899404644966124,0.9909037947654724,0.0,accept,unanimous_agreement
1307335724,5037,"oh, we should add `testpackage` then.",0,0,0,0.9873428344726562,0.9895080327987672,0.9908363819122314,0.0,accept,unanimous_agreement
1308153298,5037,removed added test for sbom and added `testpackage`.,0,0,0,0.988328456878662,0.99435293674469,0.9942193031311036,0.0,accept,unanimous_agreement
1308246386,5037,we should mention the limitation that all modules are detected under the same git url.,0,0,0,0.9866330623626708,0.9899924397468568,0.9920935034751892,0.0,accept,unanimous_agreement
1308247406,5037,the link should be permanent. the main branch can be updated.,0,0,0,0.9848330616950988,0.9908751249313354,0.9952204823493958,0.0,accept,unanimous_agreement
1308249387,5037,isn't the subpath `#twitter` in the example of `pkg:cocoapods/sharekit.0#twitter`?,0,0,0,0.9879701137542723,0.9951580166816713,0.994640290737152,0.0,accept,unanimous_agreement
1308263842,5037,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1308263890,5037,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1308263946,5037,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1308265062,5037,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1308265141,5037,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1308265207,5037,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1308268479,5037,i'm not sure i understand what you mean. `twitter` is subpath for `pkg:cocoapods/sharekit.0#twitter` `nsdata+zlib`is subpath for `pkg:cocoapods/googleutilities.5.2#nsdata+zlib`,0,0,0,0.7981761693954468,0.8828092813491821,0.5686937570571899,0.0,accept,unanimous_agreement
1308279744,5037,"so, why do you join name and subpath with `/`?",0,0,0,0.9770827293395996,0.9938902854919434,0.994403839111328,0.0,accept,unanimous_agreement
1308285401,5037,`cocoapods` uses ` / ` format. e.g for `googleutilities`: [code block] i join `module` and `submodule` with `/` to reproduce this format.,0,0,0,0.9891967177391052,0.9944379329681396,0.9947668313980104,0.0,accept,unanimous_agreement
1308287858,5037,i will add comment for this,0,0,0,0.9836875200271606,0.9814035892486572,0.9943475127220154,0.0,accept,unanimous_agreement
1308290197,5037,got it. thanks.,1,1,1,0.9481641054153442,0.9407241940498352,0.9930570125579834,1.0,accept,unanimous_agreement
1308297712,5037,added in 775a6c39af9f14214fdf1c08f322b50c12194760,0,0,0,0.9759469032287598,0.9814589023590088,0.9925490617752076,0.0,accept,unanimous_agreement
1308437127,5037,"thanks! btw, is `googleutilities` a pod name, a module name or a spec name? is `googleutilities/appdelegateswizzler` a subpod, submodule or subspec? ""module might be used in swift, but not used in cocoapods. i just want to make sure of the official name. [a link]",1,1,1,0.9855644106864928,0.9757777452468872,0.9916770458221436,1.0,accept,unanimous_agreement
1308543679,5037,"i'm not sure we can choose ""right"" name. `cocoapods` uses: - [a link] - [a link] - [a link] - [a link]",0,0,0,0.9400507807731628,0.8584775924682617,0.7382434010505676,0.0,accept,unanimous_agreement
1308720833,5037,"we'll go with ""module"" and fix it later if needed.",0,0,0,0.9838773608207704,0.9887667298316956,0.9934831261634828,0.0,accept,unanimous_agreement
778715326,1539,seems hint is not required if you are using `_`,0,0,0,0.9848922491073608,0.9884580969810486,0.9933886528015136,0.0,accept,unanimous_agreement
778761481,1539,why is it separate method? it's never called without `download()`,0,0,0,0.9852655529975892,0.9861429333686828,0.9907925128936768,0.0,accept,unanimous_agreement
778821171,1539,why don't use `decompress()` method? it would be at least more clear [a link],0,0,0,0.987193763256073,0.9925879836082458,0.9926716089248656,0.0,accept,unanimous_agreement
778832600,1539,it's just a question: is order of `defer` important?,0,0,0,0.961802065372467,0.9836047291755676,0.9893919229507446,0.0,accept,unanimous_agreement
778846045,1539,"it doesn't work well if customer reverts to previous trivy version (like 0.21.3). it's a cache anyway, why doesn't just override it with version supported by current `trivy` binary?",0,0,0,0.8174049258232117,0.9762783050537108,0.9872615337371826,0.0,accept,unanimous_agreement
778849620,1539,actually i think it may be useful to stop use of outdated db. but in this case missed scenario is: version is not updated anymore but user keep using old binary. this may lead to false negatives as db will be outdated,0,0,0,0.8783546090126038,0.9749451279640198,0.9556451439857484,0.0,accept,unanimous_agreement
778853921,1539,i think this is ok long term. but for now it will break processing for everyone who is using `--skip-update` option (until they update db using `oras`),0,0,1,0.9690343737602234,0.9752035140991212,0.5865941643714905,0.0,accept,majority_agreement
778857778,1539,"one of option to fix that add check like [code block] meaning: ""expected update has not happen""",0,0,0,0.986581563949585,0.994034469127655,0.9947186708450316,0.0,accept,unanimous_agreement
778942660,1539,"do you mean if `defer` should be called after the error handling? when it fails to create a temp file, we don't need to close and remove it.",0,0,0,0.9870672821998596,0.9928874373435974,0.9918877482414246,0.0,accept,unanimous_agreement
778946881,1539,"we added breaking change to trivy db, so the newer trivy doesn't work with an old database. `--skip-update` should not work with the old db. in other words, the following case should fail: - trivy: v0.24.0 - trivy db: v1",0,0,0,0.9721665978431702,0.9934324026107788,0.991199791431427,0.0,accept,unanimous_agreement
778949966,1539,"yes, but we need to add the check to the older binary, right? it doesn't make sense to add the check to the new version. if you are talking about future migration like v2 to v3, you are right.",0,0,0,0.9751684665679932,0.98700350522995,0.9889940619468688,0.0,accept,unanimous_agreement
778951635,1539,"we want to encourage users to update to the latest version. we can download the v1 db when they use an old binary, but the v1 database will be outdated and lead to false negatives as you said.",0,0,0,0.9659567475318908,0.9762177467346193,0.9897539615631104,0.0,accept,unanimous_agreement
778952573,1539,"for those who revert the binary to an old version, they need to clear the new database once and download the old database explicitly.",0,0,0,0.9816085696220398,0.988332450389862,0.9916709661483764,0.0,accept,unanimous_agreement
778954775,1539,it failed in my environment. [code block],-1,0,0,0.8237389326095581,0.987103283405304,0.9473508596420288,0.0,accept,majority_agreement
778983960,1539,"that is because `updatedownloadedat()` is always called with `download()`, but `download()` may not be called with `updatedownlodedat()` in client/server mode. but i updated it according to your suggestion. [a link]",0,0,0,0.9878870248794556,0.9828890562057496,0.9949122071266174,0.0,accept,unanimous_agreement
778985797,1539,"the benefit of `go-getter` can take a variety of input formats and users don't have to care about it. in this case, the input is a local compressed file, but we can use the same function `download()`. [a link]",0,0,0,0.9765024185180664,0.9896755814552308,0.969407081604004,0.0,accept,unanimous_agreement
779433789,1539,should it be documented somewhere?,0,0,0,0.9825992584228516,0.993977189064026,0.9918010830879213,0.0,accept,unanimous_agreement
779438646,1539,i can understand it will work correctly but question is about code readability. it may be unexpected for someone that method called `download()` used to decompress file.,0,0,0,0.9781318306922911,0.987657070159912,0.9646454453468324,0.0,accept,unanimous_agreement
779447352,1539,i think the check i suggested is required (or something else). just to notify users (eventually) that db with old schema version is not updated anymore. (if they stick to old binary version for some reasons). i can create separate issue if required.,0,0,0,0.9853665828704834,0.9873708486557008,0.9900915622711182,0.0,accept,unanimous_agreement
779463512,1539,ok. we can do that in a dedicated pr.,0,0,0,0.9747291803359984,0.9876402020454408,0.9899495840072632,0.0,accept,unanimous_agreement
779464225,1539,"is the error not enough? if you feel so, we can document it.",0,0,0,0.9247968792915344,0.9842482209205629,0.9853267669677734,0.0,accept,unanimous_agreement
779469038,1539,"first of all, my answer is to your question. we don't need to use `decompress()` since `get()` in `go-getter` can do the same thing. from the perspective of readability, ""download"" may be confusing as you said. should we rename `download()` to `get()` to be aligned with `go-getter`? or, we can define aliases like: [code block] what do you think?",0,0,0,0.9583294987678528,0.9861319065093994,0.981226682662964,0.0,accept,unanimous_agreement
779484181,1539,let's better keep it as is,0,0,0,0.9685225486755372,0.9713205695152284,0.979850709438324,0.0,accept,unanimous_agreement
779489363,1539,"i checked and seems there is no good place to document it. change log has reference to this pr. and it's good enough but i would change message to mention ""schema"". like ""local db has schema version which is not supported anymore. it needs to be updated"". just to distigush that it's not regular db update is required.",0,0,0,0.9503529667854308,0.9800915122032166,0.9686397314071656,0.0,accept,unanimous_agreement
779558561,1539,"thanks. i've updated. also, i mentioned it in the trouble shooting doc. [a link]",1,1,1,0.947104513645172,0.9849855899810792,0.956395149230957,1.0,accept,unanimous_agreement
872937564,2111,"we left compliance out of this release, so remove this",0,0,0,0.9830650091171264,0.9923762679100036,0.9950569868087769,0.0,accept,unanimous_agreement
872937930,2111,remove reference of cis benchmarks,0,0,0,0.9803850650787354,0.9821062088012696,0.992211937904358,0.0,accept,unanimous_agreement
872937966,2111,remove reference of compliance,0,0,0,0.9759841561317444,0.9774132370948792,0.9918041229248048,0.0,accept,unanimous_agreement
872938131,2111,remove,0,0,0,0.9725990891456604,0.947705328464508,0.9896913170814514,0.0,accept,unanimous_agreement
872938531,2111,remove this,0,0,0,0.9735968708992004,0.9678736925125122,0.9827263355255128,0.0,accept,unanimous_agreement
872938860,2111,remove,0,0,0,0.9725990891456604,0.947705328464508,0.9896913170814514,0.0,accept,unanimous_agreement
872946195,2111,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
872946203,2111,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
872946207,2111,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
872946211,2111,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
872946230,2111,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
872946235,2111,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
873115020,2111,"this probably should be trivy related version, or i assume this section can be removed if it wasn't exist before",0,0,0,0.9870527386665344,0.9870311617851256,0.9887822270393372,0.0,accept,unanimous_agreement
873629884,2111,remove the kube hunter line : `kubectl delete crd kubehunterreports.aquasecurity.github.io`,0,0,0,0.9798579216003418,0.9941045641899108,0.994925618171692,0.0,accept,unanimous_agreement
873632138,2111,should the one above it also be removed?,0,0,0,0.9829423427581788,0.9942223429679872,0.9909867644309998,0.0,accept,unanimous_agreement
1020907600,2910,nit: move it under `k8s`. [a link],0,0,0,0.9888540506362916,0.9790858626365662,0.9939152598381042,0.0,accept,unanimous_agreement
1020907968,2910,what is this for?,0,0,0,0.9697429537773132,0.9780064821243286,0.9856045246124268,0.0,accept,unanimous_agreement
1020908401,2910,can't we use t.tempdir()?,0,0,0,0.9867167472839355,0.9936025738716124,0.9951678514480592,0.0,accept,unanimous_agreement
1020908688,2910,it is not obvious what it looks for. please add comments here.,0,0,0,0.9445196986198424,0.647301971912384,0.994921624660492,0.0,accept,unanimous_agreement
1020908886,2910,`--dependency-tree` should work with the vm scanning,0,0,0,0.9867836236953736,0.9945765733718872,0.9949305653572084,0.0,accept,unanimous_agreement
1020910090,2910,i think it is better to just configure the default value to 30 mins. i'll update aws scanning later.,0,0,0,0.9773752093315125,0.984014093875885,0.9872597455978394,0.0,accept,unanimous_agreement
1020921747,2910,do we need `vm` here? what if just returning `io.sectionreader`?,0,0,0,0.9885419607162476,0.993804097175598,0.994797706604004,0.0,accept,unanimous_agreement
1020921961,2910,why don't you call that in `clean()`?,0,0,0,0.968588411808014,0.9915297031402588,0.9937403202056884,0.0,accept,unanimous_agreement
1020922405,2910,"cannot use snapshot id as is for the cache key. the cache key should be re-calculated according to analyzer versions, options, etc.",0,0,0,0.9849578142166138,0.993735373020172,0.9912726283073424,0.0,accept,unanimous_agreement
1020939741,2910,i'm not sure it works properly.,-1,-1,-1,0.9455973505973816,0.8632760643959045,0.837385356426239,-1.0,accept,unanimous_agreement
1022957892,2910,need to this test. [a link],0,0,0,0.9867881536483764,0.9666256308555604,0.9949533343315125,0.0,accept,unanimous_agreement
1022960175,2910,because target is include directory path. [a link],0,0,0,0.9891322255134584,0.9856613874435424,0.995876133441925,0.0,accept,unanimous_agreement
1022979766,2910,because it is no longer needed when inspect method is finished. there is no need to keep it until clean is called.,0,0,0,0.973691701889038,0.9912691116333008,0.992833971977234,0.0,accept,unanimous_agreement
1025281688,2910,"[a link] now, the mode function returns the mode stored in the xfs or ext4 inode.",0,0,0,0.9892994165420532,0.9948990941047668,0.9946342706680298,0.0,accept,unanimous_agreement
1652143214,6861,is it breaking because of this change?,0,0,0,0.735501766204834,0.9807301759719848,0.9628587365150452,0.0,accept,unanimous_agreement
1652144884,6861,i know thats why i put `feat(k8s)!` in title,0,0,0,0.8897179961204529,0.9579867124557496,0.9740206599235536,0.0,accept,unanimous_agreement
1652153107,6861,"yes, i was wondering how it is breaking. are you going to announce?",0,-1,0,0.7899981737136841,0.7635675668716431,0.9758728742599488,0.0,accept,majority_agreement
1652154297,6861,"yes, but also for k8s compliance report naming, all compliance report include version now (except of aws which has it before) , that way it breaking unless you don't think it should be announce as breaking",0,0,0,0.9856025576591492,0.9886493682861328,0.9938948750495912,0.0,accept,unanimous_agreement
1652284693,6861,i think all naming updates should be announced as it will break user commands.,0,0,0,0.9819728136062622,0.9562498331069946,0.9577106833457948,0.0,accept,unanimous_agreement
1652329951,6861,became curious about how embedded files are loaded and found that `trivy-kubernetes` [a link] without command filesystems and node configs. apparently that was missed in this [a link]?,0,0,0,0.910232663154602,0.8475146889686584,0.9812545776367188,0.0,accept,unanimous_agreement
1652378664,6861,logic can be found [a link],0,0,0,0.9879568219184875,0.987342357635498,0.9931539297103882,0.0,accept,unanimous_agreement
1652420892,6861,"i see it, but file systems are not passed to the collector.",0,0,0,0.985998034477234,0.9776437878608704,0.9862627983093262,0.0,accept,unanimous_agreement
1652496218,6861,"thanks for catch up, fixed with [a link] , pr is updated with latest trivy-kubernetes",1,1,1,0.9339867830276488,0.9203546047210692,0.9735507965087892,1.0,accept,unanimous_agreement
1667968107,6965,let's update `fixedversion` to show vulnerability for `opensuse-tumbleweed.tar.gz` [code block] after these changes you will need to update the gold file.,0,0,0,0.9845815300941468,0.994723916053772,0.9958029389381408,0.0,accept,unanimous_agreement
1667969748,6965,do we need this?,0,0,0,0.983482837677002,0.9819303154945374,0.9930108189582824,0.0,accept,unanimous_agreement
1667971386,6965,it would be great to add advisory details to `vulnerability.yaml`. i took this from database: [code block],0,0,0,0.8448715806007385,0.8927592635154724,0.8886407613754272,0.0,accept,unanimous_agreement
1667975837,6965,we check only `name` and `version` of package: [a link] let's remove `installed files` arrays to reduce the file length.,0,0,0,0.989602029323578,0.9946690201759338,0.9949500560760498,0.0,accept,unanimous_agreement
1668301849,6965,"vulnerability.yaml is per cve indexed, should i add the two cves? or can i add the opensuse identified to vulnerability.yaml?",0,0,0,0.9761897325515748,0.9951978325843812,0.9952451586723328,0.0,accept,unanimous_agreement
1668304693,6965,should i do this manually or how?,0,0,0,0.9711172580718994,0.9884697198867798,0.984764277935028,0.0,accept,unanimous_agreement
1668306207,6965,removed it for now,0,0,0,0.9851481914520264,0.983394980430603,0.984938144683838,0.0,accept,unanimous_agreement
1668330358,6965,`jq 'del(.[].installedfiles)'` should work,0,0,0,0.9838238954544068,0.9945684671401978,0.9945021867752076,0.0,accept,unanimous_agreement
1668333605,6965,"you need to add `opensuse-su-2024:13065-1` with `title`, `description`, etc. fields into `vulnerability.yaml` file.",0,0,0,0.9893333315849304,0.994059681892395,0.9955312609672546,0.0,accept,unanimous_agreement
1668335310,6965,we use this file to fill `vulnerability` bucket in test db,0,0,0,0.9894481897354126,0.9915257096290588,0.9940187931060792,0.0,accept,unanimous_agreement
1668712222,6965,i did so,0,0,0,0.9725131988525392,0.956345558166504,0.9892984628677368,0.0,accept,unanimous_agreement
1668712638,6965,"added it, it seems to fill it into golden now",0,0,0,0.6599511504173279,0.9818529486656188,0.9815382957458496,0.0,accept,unanimous_agreement
1669652072,6965,i found a problem with this and have already created #7122 to fix it. i added advisory details here - [a link],0,0,0,0.975874364376068,0.962786078453064,0.9856173396110536,0.0,accept,unanimous_agreement
1891587643,8134,"i don't remember why this page doesn't mention `--include-dev-deps` like [a link], but we should.",0,0,0,0.930655837059021,0.9172370433807372,0.9265471696853638,0.0,accept,unanimous_agreement
1895298075,8134,this package is not marked as a development dependency. is it correct? i'm concerned transitive dependencies introduced by direct development dependencies are not marked correctly.,0,0,-1,0.5989783406257629,0.7285085320472717,0.6894705891609192,0.0,accept,majority_agreement
1895379898,8134,`httpx` is not a development dependency: `uv add httpx==0.28.1 --extra socks`,0,0,0,0.9876903295516968,0.994041383266449,0.9950834512710572,0.0,accept,unanimous_agreement
1896386930,8134,why did we newly introduce this dependency? i thought the test case was updated for optional or development dependencies.,0,0,0,0.9844473600387572,0.979677140712738,0.9891611933708192,0.0,accept,unanimous_agreement
1896389872,8134,did we need it to test extra packages?,0,0,0,0.985645353794098,0.9926500916481018,0.9916159510612488,0.0,accept,unanimous_agreement
1896394274,8134,"ah, i should have added about test cases in the description. yes, i added some more test cases: - an optional dependency in the root package - direct dependency with an extra dependency that is optional",0,0,0,0.970642626285553,0.9875367283821106,0.9757680892944336,0.0,accept,unanimous_agreement
1896419807,8134,"ok, thanks.",1,1,0,0.5829715132713318,0.7235771417617798,0.6576256155967712,1.0,accept,majority_agreement
1896422468,8134,can use link for `include` as in [a link]?,0,0,0,0.9893781542778016,0.9941906929016112,0.9960028529167176,0.0,accept,unanimous_agreement
1896423864,8134,trivy doesn't support `--include-dev-deps` flag for `pip`,0,0,0,0.9800894260406494,0.9925149083137512,0.9936876893043518,0.0,accept,unanimous_agreement
1896425241,8134,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
1896436805,8134,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
1896436880,8134,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
1896440080,8134,"by the way, why are `include/exclude` used to link the table and sections and not the package manager names from the first column?",0,0,0,0.9831339120864868,0.9937211275100708,0.993158996105194,0.0,accept,unanimous_agreement
1896454937,8134,"by default, we don't show dev dependencies. this link is intended to draw users attention to this and direct them to the section about the file, where they can see that `--include-dev-deps` flag needs to be used.",0,0,0,0.9877535700798036,0.992642343044281,0.9922724962234496,0.0,accept,unanimous_agreement
1896528121,8134,you only need to add links if the `--include-dev-deps` flag is used for the file,0,0,0,0.9883253574371338,0.9940369129180908,0.9948824644088744,0.0,accept,unanimous_agreement
1896532162,8134,in nodejs all package managers have links. i think the documentation should be consistent.,0,0,0,0.9806079864501952,0.972311556339264,0.9900500774383544,0.0,accept,unanimous_agreement
1896533822,8134,then we should update the nodejs documentation,0,0,0,0.9836946725845336,0.9930720925331116,0.9939724802970886,0.0,accept,unanimous_agreement
1896552621,8134,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1896569428,8134,"i missed that a link was added for `bun`. we can remove the link for that. but for other files - `yarn`, `npm` and `pnpm` support `--include-dev-deps`. that's why they have links.",0,0,0,0.9647473096847534,0.9912315011024476,0.9870222210884094,0.0,accept,unanimous_agreement
1896686174,8134,"i think we should write the default behavior, like [a link]. or am i missing something? [code block]",0,0,0,0.9844385981559752,0.9923122525215148,0.9880530834197998,0.0,accept,unanimous_agreement
1896687051,8134,"ok, i'll open a pr for that.",0,0,0,0.9792097806930542,0.9831300377845764,0.9923646450042723,0.0,accept,unanimous_agreement
1896688612,8134,fixed [a link],0,0,0,0.9879513382911682,0.9892292618751526,0.993672251701355,0.0,accept,unanimous_agreement
335128890,201,why is the file closed here?,0,0,0,0.9502552151679992,0.986725926399231,0.989510178565979,0.0,accept,unanimous_agreement
335129447,201,does it make sense to keep this method inside of `tar_input_test.go` as it's purely for testing and nothing else at the moment?,0,0,0,0.9840688109397888,0.9952096343040466,0.9927016496658324,0.0,accept,unanimous_agreement
335138939,201,"i need just a temp file. the result of trivy is exported to this file through pseudo cli (`app.run`) like this. `trivy --output /path/to/tempfile` in short, `app.run` writes the result to this file. we don't use this file descriptor directly. if the file is left open, an error occurs when trivy (= `app.run`) tries to open it.",0,0,0,0.98485666513443,0.9869765639305116,0.9789099097251892,0.0,accept,unanimous_agreement
335140279,201,"i separated the file so i can add more tests later. as you said, it doesn't make sense for now. i can merge this function to `tar_input_test.go`.",0,0,0,0.9782059192657472,0.992946445941925,0.9943206310272216,0.0,accept,unanimous_agreement
335142461,201,gotcha. thank you for the explanation!,1,1,1,0.982405722141266,0.9274652600288392,0.9901658892631532,1.0,accept,unanimous_agreement
335183238,201,"i couldn't reason out why this was being changed to a `[]*result`. would it make sense to change it back to `[]result` unless i've missed a reason not to, in order to keep things simple?",0,0,0,0.8664915561676025,0.9886782765388488,0.9691791534423828,0.0,accept,unanimous_agreement
335631443,201,one thought: [a link],0,0,0,0.9804931282997132,0.9902101755142212,0.9930851459503174,0.0,accept,unanimous_agreement
335750238,201,this function doesn't seem to be used anywhere. should this be removed?,0,0,0,0.9714486598968506,0.9740918278694152,0.990298867225647,0.0,accept,unanimous_agreement
335835163,201,"yes, but this function is used by a different tool. [a link] before, i'd like to develop a different tool to scan lock files. i suspend to develop it now, but i'm supposed to resume it in the future. let me keep this function.",0,0,0,0.962695062160492,0.93713116645813,0.9856325387954712,0.0,accept,unanimous_agreement
336205615,201,"should an `unknown` severity be ranked higher than a known `low` one, if the `low` vulnerability has a `pkgname` set? i see this is the current behaviour but i'm just probing to see if it is what we want. you can see a test that demonstrates this here: [a link]",0,0,0,0.9814341068267822,0.9894808530807496,0.9927452206611632,0.0,accept,unanimous_agreement
336212310,201,tests like these which use the `rpm` command fail for me (because i didn't have the `rpm` tool installed). should we ensure that wherever these tests will get run (e.g. ci) we have the `rpm` binary installed so the tests don't fail out as a result?,0,0,0,0.9502031207084656,0.9820839762687684,0.9675158262252808,0.0,accept,unanimous_agreement
336215135,201,"based on our conversation offline, i've switched it back to `[]result` in this commit [a link]",0,0,0,0.9834860563278198,0.9925132393836976,0.9957518577575684,0.0,accept,unanimous_agreement
336223761,201,would you have an example of an acceptable input template that the user can pass in?,0,0,0,0.9876789450645448,0.9916354417800904,0.9935662150382996,0.0,accept,unanimous_agreement
336226202,201,i'm not sure why this isn't coming out in the diff but it looks like `getignoredids()` no longer takes in an argument for `ignorefile`. is that a flag we're going to deprecate? would that break backwards compatibility with existing usage of the flag?,0,0,0,0.8360405564308167,0.941291570663452,0.9680436253547668,0.0,accept,unanimous_agreement
336591533,201,like this [code block],0,0,0,0.9861828088760376,0.990678071975708,0.9927412271499634,0.0,accept,unanimous_agreement
336592103,201,`getignoreids()` takes an argument in `master` branch. i'll fix this conflict. [a link],0,0,0,0.9867905974388124,0.9917038679122924,0.9958086013793944,0.0,accept,unanimous_agreement
336593195,201,"exactly. we need to install `rpm` in ci. besides, we probably should prepare makefile and ensure `rpm` will be installed on the test environment.",0,0,0,0.9859817028045654,0.9930809140205384,0.9935553669929504,0.0,accept,unanimous_agreement
336604386,201,i fixed it.,0,0,0,0.97554349899292,0.9678345322608948,0.7885528802871704,0.0,accept,unanimous_agreement
336668805,201,"basically, all vulnerabilities have pkgname. i'd like to display vulnerabilities sorted by a package name. why do you expect `hogepkg`? this package doesn't seem to be defined. [a link]",0,0,0,0.9842945337295532,0.9806148409843444,0.9920509457588196,0.0,accept,unanimous_agreement
336670519,201,makes sense if pkgname takes preference!,0,0,0,0.9618872404098512,0.8997678160667419,0.9881967902183532,0.0,accept,unanimous_agreement
336671568,201,i addressed this. moved it back to `tar_input_test.go` for now until we have the need for a separate file.,0,0,0,0.9877259135246276,0.9938556551933287,0.9911606907844543,0.0,accept,unanimous_agreement
450081986,552,"would you make sure some corner cases work, such as `^` and `~`. [a link] node.js has some special constraints. [a link] [a link] if it doesn't work, we need to define `matchversions` for each language.",0,0,0,0.988015115261078,0.9938761591911316,0.9908108711242676,0.0,accept,unanimous_agreement
450284106,552,"i used [a link] it passed all constraints reported in issue, also it will work with all possible node.js special constraints, please take a look at tests now.",0,0,0,0.9776582717895508,0.9606083035469056,0.9493484497070312,0.0,accept,unanimous_agreement
450862120,552,please check,0,0,0,0.980006754398346,0.9714785218238832,0.9921120405197144,0.0,accept,unanimous_agreement
452036174,552,"what is `a`? it is ok if the short name is clear what it means like `for _, m := range msgs {`, but in this case, it is difficult to understand what `a` indicates.",0,0,0,0.9806157946586608,0.9875748753547668,0.9473986625671388,0.0,accept,unanimous_agreement
452048205,552,`assert` goes through even if it doesn't satisfy the condition. [code block],0,0,0,0.9884626269340516,0.992312490940094,0.9952503442764282,0.0,accept,unanimous_agreement
452049007,552,is there any reason that you need the suffix 2? [code block],0,0,0,0.9874463081359864,0.9941348433494568,0.9952986836433412,0.0,accept,unanimous_agreement
452053528,552,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
452056617,552,do you think `-java` is pre-release? it looks just a kind to me. [a link] i meant we might need to change the comment. i think we don't need to change the logic.,0,0,0,0.7890799641609192,0.9728292226791382,0.9921228289604188,0.0,accept,unanimous_agreement
452060367,552,"i know this change affects all `advisory.go` for each language, but `go-version` is no longer necessary. so, i feel it is the right way to replace `go-version` with `semver` in all places. [code block]",0,0,0,0.934697926044464,0.9609365463256836,0.9328446984291076,0.0,accept,unanimous_agreement
453202257,552,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
453202311,552,"it was committed mistakenly, was comparing the older/new version for correctness, fixed",0,0,0,0.9417775869369508,0.8981989622116089,0.9228654503822328,0.0,accept,unanimous_agreement
453202325,552,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
453202331,552,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
455631799,552,i found this version was old. you have to import `semver` as follows. [code block],0,0,0,0.9870113134384156,0.986668586730957,0.9940823912620544,0.0,accept,unanimous_agreement
455634508,552,"i think there is no reason to overwrite `rangeversions` and it sometimes introduces a bug, so `for _, v := range rangeversions {` looks enough in this case.",0,0,0,0.9855185747146606,0.987760365009308,0.9835325479507446,0.0,accept,unanimous_agreement
455636048,552,could you define this process as another function?,0,0,0,0.9876328706741332,0.993977189064026,0.9932199716567992,0.0,accept,unanimous_agreement
455641568,552,"i think it doesn't work with a patch version including a dot such as `1.2.3-beta.1. [a link] it might work even if we replace valid dots, but i think we should keep the version in its original form as much as possible to avoid an unexpected bug. the best way i think of at the moment is [code block] let me know your thought.",0,0,0,0.976405680179596,0.9821292757987976,0.9750746488571168,0.0,accept,unanimous_agreement
455740860,552,"updated, as suggested, i think you are right, let's see if we get any other issues later",0,0,1,0.903537929058075,0.9496482610702516,0.5480849742889404,0.0,accept,majority_agreement
456914894,552,"nit: it is wide, so what if we split the line? [code block]",0,0,0,0.9847871661186218,0.97516667842865,0.987450122833252,0.0,accept,unanimous_agreement
456915196,552,"this `msgs` will not be used, right? or, does it affect the loop variable at line 37? if it is not used, we should make it easy to understand. [code block]",0,0,0,0.9862335920333862,0.992498219013214,0.9948412775993348,0.0,accept,unanimous_agreement
456917103,552,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
661300783,1081,this is now possible as of cyclonedx-go [a link],0,0,0,0.9867749214172364,0.99201500415802,0.9954890608787536,0.0,accept,unanimous_agreement
686729502,1081,thank you! deep respect. i have a few question. does cyclonedx-go have any plans to support vulnerability? i want to use this struct. [a link],1,1,1,0.9886888861656188,0.9948241710662842,0.9946816563606262,1.0,accept,unanimous_agreement
686779511,1081,"no plans currently, as the vulnerability extension is only supported for xml. working with xml (and especially namespacing in xml) in go is a pain, which is why i didn't bother implementing it yet. i see you've asked a similar question in the cdx slack already. i think or may be able to give some insights in how vulnerabilities are supposed to be or will be handled in cyclonedx going forward. if the proposed solutions don't help your case with trivy, you could consider using xml output instead, and i'll see how i can integrate the vulnerability extension into cyclonedx-go.",-1,0,0,0.9497070908546448,0.909915566444397,0.7900828123092651,0.0,accept,majority_agreement
686905904,1081,"refer to cyclonedx support for [a link] and [a link]. disclosing vulnerabilities in an sbom is currently only supported in xml. that will be changing in a big way with v1.4 of the spec. so in terms of design, i would plan for the eventual support for json, but it will be changing from its current format.",0,0,0,0.9844979643821716,0.987547755241394,0.9926803112030028,0.0,accept,unanimous_agreement
687106753,1081,"thank for reply. i understood perfectly. i will wait for cyclonedx 1.4 to be released. in this pull request, i will implement to create sboms for package information, etc.",1,1,1,0.9666951298713684,0.9779701232910156,0.9881000518798828,1.0,accept,unanimous_agreement
776674414,1081,is there any reason why we cannot this version? [a link],0,0,0,0.978302001953125,0.9912832975387572,0.9953470826148988,0.0,accept,unanimous_agreement
804526880,1081,cyclonedx v1.4 including support for vulnerabilities is now available in [a link].,0,0,0,0.9886921644210817,0.991140067577362,0.9923132061958312,0.0,accept,unanimous_agreement
805610994,1081,any reason you moved it here?,0,0,0,0.974403440952301,0.9823273420333862,0.9930735230445862,0.0,accept,unanimous_agreement
805622542,1081,we may want to assert `dependson` as well.,0,0,0,0.987567901611328,0.9930163621902466,0.9931208491325378,0.0,accept,unanimous_agreement
806024103,1081,"if we don't separate the function, gocyclo's checks will cause it to fail. [code block] i separated the functions because i think there will be more cases in the future where list-all-pkg needs to be enforced.",0,0,0,0.9839882254600524,0.989035427570343,0.9885281324386596,0.0,accept,unanimous_agreement
797970584,1668,is there any reason to remove ecr?,0,0,0,0.981965959072113,0.9920783638954164,0.9937865734100342,0.0,accept,unanimous_agreement
797970745,1668,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
797971273,1668,"we cannot use the default token since this action pushes commits to another repository. if you need additional permission, please let me know.",0,0,0,0.9836873412132264,0.98733252286911,0.993541955947876,0.0,accept,unanimous_agreement
797971532,1668,devops?,0,0,0,0.919328510761261,0.9346165657043456,0.91418719291687,0.0,accept,unanimous_agreement
797971703,1668,looks like it is your account.,0,0,0,0.9763577580451964,0.9814149737358092,0.9910807013511658,0.0,accept,unanimous_agreement
797984599,1668,"so sorry about that, i forgot to revert the changes that i've been made for testing purposes.",-1,-1,-1,0.9866985082626344,0.9919530749320984,0.9930654764175416,-1.0,accept,unanimous_agreement
797984830,1668,"to be able to use sign feature, i need to update the latest version of goreleaser",0,0,0,0.9848282933235168,0.9844441413879396,0.9917507767677308,0.0,accept,unanimous_agreement
797984867,1668,"so sorry about that, i forgot to revert the changes that i've been made for testing purposes.",-1,-1,-1,0.9866985082626344,0.9919530749320984,0.9930654764175416,-1.0,accept,unanimous_agreement
797984914,1668,"so sorry about that, i forgot to revert the changes that i've been made for testing purposes.",-1,-1,-1,0.9866985082626344,0.9919530749320984,0.9930654764175416,-1.0,accept,unanimous_agreement
797984952,1668,"so sorry about that, i forgot to revert the changes that i've been made for testing purposes.",-1,-1,-1,0.9866985082626344,0.9919530749320984,0.9930654764175416,-1.0,accept,unanimous_agreement
798273087,1668,"i got it. please pin the version then. otherwise, we have a concern about supply chain attacks and may face an unexpected error.",0,0,0,0.94355309009552,0.9230149388313292,0.958548069000244,0.0,accept,unanimous_agreement
798977279,1668,"gotcha! fixed right now, thanks",1,1,1,0.9889951944351196,0.9893317222595216,0.9959880709648132,1.0,accept,unanimous_agreement
799777864,1668,"according to the document, what we need looks like `docker_signs`. `sign-blob` is a subcommand for signing artifacts such as binaries and packages. [a link] am i missing something?",0,0,0,0.9838210344314576,0.991787850856781,0.9933433532714844,0.0,accept,unanimous_agreement
799813395,1668,"ah yes, you are totally right, this was my mistake, i'll fix that asap, really good catch, thank you for watching my back :man_raising_hand_light_skin_tone::smiling_face_with_heart-eyes:",1,1,1,0.9859384894371032,0.9237715601921082,0.9956822395324708,1.0,accept,unanimous_agreement
799856683,1668,but we want to sign our binaries and packages as well as container images in another pr:winking_face:,0,0,0,0.8746044635772705,0.9873722791671752,0.9608681797981262,0.0,accept,unanimous_agreement
800360160,1668,"thank you, it should be fixed right now.",1,1,1,0.7349888682365417,0.763739824295044,0.9146645665168762,1.0,accept,unanimous_agreement
805186506,1668,i would recommend pin-by-sha [a link],0,0,0,0.978958010673523,0.9901314973831176,0.9952958226203918,0.0,accept,unanimous_agreement
807242437,1668,"fixed, thank you",1,1,1,0.8080604672431946,0.9648296236991882,0.9827500581741332,1.0,accept,unanimous_agreement
825440735,1668,i think we need more permissions since it disables other permissions. [a link] i'll take it.,0,0,0,0.983758270740509,0.9072784781455994,0.9922086000442504,0.0,accept,unanimous_agreement
