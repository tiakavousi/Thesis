id,pr_number,body,distilbert_sentiment_label,codebert_sentiment_label,deberta_sentiment_label,distilbert_confidence,codebert_confidence,deberta_confidence,majority_label,final_decision,decision_reason
816050553,15769,"too dark for dark themes imo ![a link] also not to comment in another line, completed and active seeding have the exact same color (blue).",0,-1,-1,0.8161577582359314,0.6723775267601013,0.9656714200973512,-1.0,accept,majority_agreement
816110274,15769,checkout changes.,0,0,0,0.984563946723938,0.978911280632019,0.99202698469162,0.0,accept,unanimous_agreement
816193153,15769,"now completed has the same color as downloading... other than that, everything lgtm.",0,0,0,0.9828187823295592,0.8708282709121704,0.9731454253196716,0.0,accept,unanimous_agreement
816822440,15769,good eye!,1,1,1,0.9896681308746338,0.9933909177780152,0.9849167466163636,1.0,accept,unanimous_agreement
816975572,15769,it's used for downloading in light theme. pick a color not used somewhere else.,0,0,0,0.9844126105308532,0.9856113195419312,0.9946714043617249,0.0,accept,unanimous_agreement
817046450,15769,"i think i did something bad, but check it out. i just couldn't find a yellow color that works on white.",-1,-1,-1,0.8981600999832153,0.7717559337615967,0.9812723398208618,-1.0,accept,unanimous_agreement
817088415,15769,"i don't see anything bad. i like yellow on dark but... isn't it a flashy color for a state that's supposed to be ""this is finished, forget it, let it fade in the background""? maybe i'm nitpicking.",-1,-1,-1,0.6429451107978821,0.9254626035690308,0.5306271910667419,-1.0,accept,unanimous_agreement
817093620,15769,"i agree, -im please leave colors alone etc. until others provide more feedback & looks like you'll also now have to wait for maintainer approval. only thing i can suggest you do is keep re-basing periodically to avoid any conflicts going forward.",0,0,0,0.9243060350418092,0.6565200686454773,0.8871670365333557,0.0,accept,unanimous_agreement
817097307,15769,i will figure something out. after that i am leaving the pr as is.,0,0,0,0.8853790760040283,0.964378833770752,0.7764918804168701,0.0,accept,unanimous_agreement
835512014,15769,[code block] otherwise it won't compile. that is how it is in master.,0,0,0,0.9863009452819824,0.9926134347915648,0.9886254072189332,0.0,accept,unanimous_agreement
835531506,15769,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
846570392,15769,"wrong order. in case i haven't mention it, you can use [a link] to help sorting the list.",0,0,0,0.8528822064399719,0.9813251495361328,0.7881355285644531,0.0,accept,unanimous_agreement
846584398,15769,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
846657056,15769,check the pause icon now.,0,0,0,0.9842854142189026,0.9913778305053712,0.992059588432312,0.0,accept,unanimous_agreement
884073887,15769,maybe rename it to `filter-inactive`? and other `filter*` icons too.,0,0,0,0.9872841835021972,0.9941571950912476,0.9896472096443176,0.0,accept,unanimous_agreement
884074144,15769,it would be great if you can help update it to https and latest link: [code block],1,1,1,0.6716006398200989,0.6932925581932068,0.6289920806884766,1.0,accept,unanimous_agreement
884074150,15769,add an empty line: [code block],0,0,0,0.9868789315223694,0.9897363185882568,0.9956621527671814,0.0,accept,unanimous_agreement
884075000,15769,"i think this comment is redundant, i would suggest removing it.",0,0,0,0.8400425910949707,0.9101607799530028,0.8740724325180054,0.0,accept,unanimous_agreement
884075295,15769,the code looks suspicious... try this: [code block] the same to all other similar instances below.,-1,-1,-1,0.8429892659187317,0.9234402775764464,0.8557795882225037,-1.0,accept,unanimous_agreement
884086530,15769,"i would suggest removing this, it creates another horizontal line when rendered and now there are 2 horizontal lines.",0,0,0,0.9848345518112184,0.9791468977928162,0.9914103150367736,0.0,accept,unanimous_agreement
884086558,15769,please remove this empty line too.,0,0,0,0.9807182550430298,0.9867439270019532,0.9913143515586852,0.0,accept,unanimous_agreement
884174750,15769,revert this line. it causes a crash.,0,0,0,0.7052551507949829,0.8879567980766296,0.9474469423294068,0.0,accept,unanimous_agreement
884266820,15769,how to handle this?,0,0,0,0.926289677619934,0.879682183265686,0.9881220459938048,0.0,accept,unanimous_agreement
885198041,15769,"was it an intended change? if not then just change `m_trackers[null_host] = {};` back to `m_trackers[null_host] = {{}, notracker};`",0,0,0,0.985695779323578,0.9953095316886902,0.9952032566070556,0.0,accept,unanimous_agreement
885268243,15769,"it was intended, we `tracker-warning` icon is required there.",0,0,0,0.9872323274612428,0.9940033555030824,0.9944090247154236,0.0,accept,unanimous_agreement
885277947,15769,but what does the discussed line have to do with it?,0,0,0,0.9642322063446044,0.9484373927116394,0.9847059845924376,0.0,accept,unanimous_agreement
885283277,15769,"as per my understanding, it adds an icon when no tracker is found. it was added by .",0,0,0,0.988927960395813,0.991422712802887,0.9936681389808656,0.0,accept,unanimous_agreement
885781059,15769,only this issue remains.,0,0,0,0.9705074429512024,0.9819967150688172,0.9930570125579834,0.0,accept,unanimous_agreement
885888279,15769,"no!, -im this seems to be an issue with `rebasing`. `m_trackers[null_host] = {};` was changed to `m_trackers[null_host] = {{}, notracker};` via [a link] it should be below [code block] not! [code block] see (lines 375 to 377) in my repo for reference [a link] when these changes are made can you test to see if it still then crashes for you?",-1,0,0,0.5974071621894836,0.7389097213745117,0.9244183897972108,0.0,accept,majority_agreement
885915363,15769,committed the change in the pr.,0,0,0,0.9801794290542604,0.9879648685455322,0.994492530822754,0.0,accept,unanimous_agreement
885926824,15769,"i already have, that's how i know this was causing it :thumbs_up:",0,1,1,0.7591081261634827,0.5733101963996887,0.9911032915115356,1.0,accept,majority_agreement
886338837,15769,please remove this empty line too.,0,0,0,0.9807182550430298,0.9867439270019532,0.9913143515586852,0.0,accept,unanimous_agreement
886689691,15769,i will fix that.,0,0,0,0.9585393071174622,0.9768255949020386,0.97611802816391,0.0,accept,unanimous_agreement
886709688,15769,"yes, it should be qt",0,0,0,0.9837542176246644,0.9845103621482848,0.992191731929779,0.0,accept,unanimous_agreement
889487931,15769,"in case you need more updates, this empty line should be removed too.",0,0,0,0.9856964349746704,0.9881201982498168,0.9950266480445862,0.0,accept,unanimous_agreement
889494195,15769,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
145721746,7610,"these two new options should be merged. probably with a ""set default"" button in the ui.",0,0,0,0.9879549741744996,0.9937328696250916,0.9947500824928284,0.0,accept,unanimous_agreement
145723946,7610,"initially i have only one option. but someone might want to turn ""alternative ui"" off, but save the path for further use. besides, i accept the idea that other settings can appear under ""alternative ui"".",0,0,0,0.9748951196670532,0.980823278427124,0.9812332391738892,0.0,accept,unanimous_agreement
145726502,7610,"the path can be saved elsewhere, what's the problem with that?",0,0,0,0.9407310485839844,0.9732868075370787,0.965523362159729,0.0,accept,unanimous_agreement
145730578,7610,"can't follow your thoughts... we need one setting to enable/disable alt ui, and the second one to store path. how to disable it but store save path using only one setting?",0,-1,0,0.556033730506897,0.681530237197876,0.9389270544052124,0.0,accept,majority_agreement
145731526,7610,"imo, there is no need to save the path. those who need it, can save it as they like. or, even better, you may give them a list to choose from. then there will be no need to save and re-type that path.",0,0,0,0.890171229839325,0.9780123829841614,0.9635090231895448,0.0,accept,unanimous_agreement
145734277,7610,"where do i get this list, without saving anything? it is not clear at all. i save it in order not to re-type it again next time user enable alt ui.",0,0,0,0.973616898059845,0.935127317905426,0.939269244670868,0.0,accept,unanimous_agreement
145735615,7610,"as far as i can see, the alternative ui path is relative. contents of its parent directory is the list you need.",0,0,0,0.9877383708953856,0.9889630675315856,0.9939234852790833,0.0,accept,unanimous_agreement
145736342,7610,you misunderstood this (what could bring you that idea?). it can be any path.,0,0,0,0.93805193901062,0.7567145228385925,0.8743199110031128,0.0,accept,unanimous_agreement
145738252,7610,exceptionally bad decision (opens a wide way to security problems). please change that.,-1,-1,-1,0.9552002549171448,0.949543595314026,0.9898273944854736,-1.0,accept,unanimous_agreement
145739455,7610,"why? user should decide himself where he want to put his files! when you install e.g. apache, does it forbid you to specify `www` folder you want?",0,0,0,0.9515933990478516,0.9641780257225036,0.8011434674263,0.0,accept,unanimous_agreement
145742271,7610,wrong analogy. what you propose isto to change that path via http request.,-1,0,-1,0.9554007649421692,0.5315926671028137,0.5768116116523743,-1.0,accept,majority_agreement
145742874,7610,what do you mean?,0,0,0,0.9683603048324584,0.9843899607658386,0.9906946420669556,0.0,accept,unanimous_agreement
145742972,7610,it is possible to move `www/favicon.ico` to cpp code? it's quite hard to find here.,0,0,0,0.8829733729362488,0.9293631911277772,0.9126001596450806,0.0,accept,unanimous_agreement
145743308,7610,or move it to html?,0,0,0,0.9868971705436708,0.9933956265449524,0.9952398538589478,0.0,accept,unanimous_agreement
145743422,7610,can you put an upper limit for it?,0,0,0,0.9874580502510072,0.9926174283027648,0.9933754801750184,0.0,accept,unanimous_agreement
145743711,7610,the assignment is redundant.,0,-1,0,0.9124509692192078,0.5790453553199768,0.928434669971466,0.0,accept,majority_agreement
145743975,7610,hope you don't find marking it a `const` function,0,0,0,0.9624153971672058,0.8450204730033875,0.908725917339325,0.0,accept,unanimous_agreement
145744249,7610,it was previous behavior. what do you mean?,0,0,0,0.9710134863853456,0.9774232506752014,0.9869583249092102,0.0,accept,unanimous_agreement
145744399,7610,and should be possible to use `qstringref` if you like.,0,0,0,0.9853670597076416,0.9917478561401368,0.9956575632095336,0.0,accept,unanimous_agreement
145744831,7610,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
145745037,7610,can't follow you... this is `static` method.,0,0,0,0.9142557382583618,0.914134442806244,0.9934551119804382,0.0,accept,unanimous_agreement
145745453,7610,"sorry, didn't saw it.",-1,-1,-1,0.9838665127754213,0.990490198135376,0.9911906719207764,-1.0,accept,unanimous_agreement
145745872,7610,don't see any sense. it will be converted to qstring later.,0,0,-1,0.6390792727470398,0.982824206352234,0.8545453548431396,0.0,accept,majority_agreement
145746435,7610,"when converted to qstring this will print `2.0.0` right? if so, then it will break all existing usage/detection.",0,0,0,0.98615825176239,0.9894932508468628,0.9940255880355836,0.0,accept,unanimous_agreement
145747013,7610,personally i prefer using `=` for string...,0,0,0,0.957920789718628,0.9887672066688538,0.9887745380401612,0.0,accept,unanimous_agreement
145749637,7610,"just asking, isn't `pathitems.contains(""."")` redundant? it's basically the current/same path, why should it be prohibited?",0,0,0,0.9432535767555236,0.9775025248527528,0.9862449765205384,0.0,accept,unanimous_agreement
145751463,7610,i don't know. it's very legacy code. should i change it?,0,-1,-1,0.9042374491691588,0.8048572540283203,0.584295928478241,-1.0,accept,majority_agreement
145752044,7610,i would prefer leave it as it is now.,0,0,0,0.9081202149391174,0.9817847013473512,0.9056476950645448,0.0,accept,unanimous_agreement
145753015,7610,"i think we should not allow a requester to get anything they want when they are not authenticated, i.e. they should only be allow to get the login page resources.",0,0,0,0.9683961868286132,0.9675300121307372,0.9733713865280152,0.0,accept,unanimous_agreement
145753250,7610,"we both unsure, then just leave it.",0,0,0,0.8718737959861755,0.9271240234375,0.9673702120780944,0.0,accept,unanimous_agreement
145753821,7610,should this be placed under previous `if` scope?,0,0,0,0.9870240688323976,0.9947968125343324,0.9935816526412964,0.0,accept,unanimous_agreement
145754271,7610,`const qstring &type`?,0,0,0,0.98814058303833,0.9931148886680604,0.994517982006073,0.0,accept,unanimous_agreement
145755047,7610,upper limit please.,0,0,0,0.9840461015701294,0.9809457659721376,0.9920350909233092,0.0,accept,unanimous_agreement
145755308,7610,cashing -> caching,0,0,0,0.9717144966125488,0.960128903388977,0.9770876169204712,0.0,accept,unanimous_agreement
145756860,7610,is it possible `getversion()` & `getappversion()` to be not `public_api`?,0,0,0,0.9874992966651917,0.9947484135627748,0.9935609102249146,0.0,accept,unanimous_agreement
145757439,7610,ok and i'll continue the review later.,0,0,0,0.9784978032112122,0.9798778891563416,0.9924315214157104,0.0,accept,unanimous_agreement
145757537,7610,"well, the points of incompatibility creation should be it the development process, otherwise we will always have to live with the mistakes previously... really, there should not be a big problem since it a major update and old clients can't work with it anyway (because of changed api method names/paths).",0,0,0,0.9343044757843018,0.9450981616973876,0.9566785097122192,0.0,accept,unanimous_agreement
145758636,7610,"ok, then we **should** inform the public the changes beforehand, making an announcement on the qbt website news page when this pr is merged, and this should be as early as possible as we have a lot of users using webapi.",0,0,0,0.9737064838409424,0.9794960618019104,0.9934497475624084,0.0,accept,unanimous_agreement
145759383,7610,what about images/scripts/css used in login page? anyway html files are useless without api access.,0,0,0,0.7666170597076416,0.8835979700088501,0.9212191700935364,0.0,accept,unanimous_agreement
145761034,7610,it's meaningless at least for api version. client should know it to understand how to authenticate (authentication can be changed in some future version).,0,0,0,0.784980058670044,0.9774454832077026,0.9553688168525696,0.0,accept,unanimous_agreement
145761361,7610,type is output parameter here.,0,0,0,0.9858951568603516,0.989801585674286,0.993018925189972,0.0,accept,unanimous_agreement
145762646,7610,"we didn't have it later. what's the purpose? shouldn't user control itself what it have in its www root, imo.",0,0,0,0.8913009166717529,0.7940371036529541,0.9684518575668336,0.0,accept,unanimous_agreement
145763502,7610,it is (or will be) possible to set alternative ui path via web api. as such it is possible to load any file into qbt and compromise the machine it is running on.,0,0,0,0.9849053025245668,0.9926339983940125,0.992973566055298,0.0,accept,unanimous_agreement
145771521,7610,"it isn't possible now and, of course, i wouldn't provide such a possibility anytime. any real scenario? i can't imagine it unless the machine is already compromised.",0,0,0,0.6475820541381836,0.8766809105873108,0.9534106850624084,0.0,accept,unanimous_agreement
145776575,7610,"and the next question. from your pov, what accepted path set can be here, that prevents possible security problems?",0,0,0,0.9854495525360109,0.9895461201667786,0.9936177730560304,0.0,accept,unanimous_agreement
145778025,7610,"in any case, i'm not a fan of ""wipe the user ass"". if something does not prevent the program to work logically, the user can decide how to use it.",-1,-1,0,0.9566206932067872,0.8820610642433167,0.7879750728607178,-1.0,accept,majority_agreement
145782681,7610,"already here: [a link] but how then users of the headless system should choose a web theme? the most important here is that the paths set has to be limited and not include anything like /tmp and /var or any other directory, that can be populated during a normal system' workflow. it also may not include current directory (or app should set its working directory to the file system root dir). also you can consider supplying this path via command line parameter (and then it may be an absolute path).",0,0,0,0.9869749546051024,0.9941229224205016,0.993650496006012,0.0,accept,unanimous_agreement
145791178,7610,"imo, it's up to the user, isn't it? why it's ""wrong analogy"" with the ordinary web-server app? i still can set it up to use any folder as `www` root (e.g. `/tmp` and so on, if i'm not right in the head or i have other good reasons to do it). nobody forbids me to do it. that's my concern, if it will hurt the security of my machine. honestly, i don't want to mess with this. as soon as you start to do something like that, immediately there is someone who says: ""why do you tie my hands? it is very important for me (and for many others) to use that folder!"".",-1,-1,-1,0.8934657573699951,0.96548992395401,0.5928166508674622,-1.0,accept,unanimous_agreement
145791922,7610,"in any case, if you have more supporters, and you offer some reasonable way to limit this (or even better, implement it yourself), i won't fight it. , , /webdev, ?",0,0,0,0.8210219740867615,0.8609942197799683,0.937899649143219,0.0,accept,unanimous_agreement
145796135,7610,"as i answered already, pass that directory via a command line parameter.",0,0,0,0.9879146814346312,0.9912812113761902,0.9954789876937866,0.0,accept,unanimous_agreement
145797389,7610,: how a creator of an alternative ui would get the true icon name?,0,0,0,0.982245922088623,0.9919447302818298,0.9875330328941344,0.0,accept,unanimous_agreement
145813127,7610,now i think we should properly introduce an ico format favicon instead of creating an alias of the png. we can do it later if you won't handle it now.,0,0,0,0.9871121048927308,0.9894439578056335,0.9894631505012512,0.0,accept,unanimous_agreement
145814844,7610,it's reading like: hey i'm going to read a file and i don't care how big it is and i want it all in the memory now. it's a bad practice for an app to grant users unlimited resources.,-1,-1,-1,0.9871504306793212,0.9519749283790588,0.9642993807792664,-1.0,accept,unanimous_agreement
145816402,7610,"i was thinking of a tighter control scheme but it's not beneficial with user's webui, so whatever.",0,-1,0,0.8586750030517578,0.5986489653587341,0.5817798376083374,0.0,accept,majority_agreement
145817209,7610,"i was thinking this should start following [a link]. if so, this should go `{ + 1, 0, 0};`, what do you think?",0,0,0,0.9820832014083862,0.9876943826675416,0.9876835942268372,0.0,accept,unanimous_agreement
145817250,7610,"excellent security hole, btw! right from a textbook...",1,1,1,0.9927984476089478,0.9957870841026306,0.9972679615020752,1.0,accept,unanimous_agreement
145871552,7610,"look, stop being sarcastic! in your comments some emotions, there is no useful information. what is the problem here?",-1,-1,-1,0.9879097938537598,0.9866144061088562,0.9928101301193236,-1.0,accept,unanimous_agreement
145871807,7610,but what is a reasonable limit? and what status to return if you exceed this size?,0,0,0,0.9758433699607848,0.8431212306022644,0.9897748231887816,0.0,accept,unanimous_agreement
145873977,7610,he just add the icon he want into his www folder...,0,0,0,0.9815743565559388,0.9835394620895386,0.9953641891479492,0.0,accept,unanimous_agreement
145874665,7610,"i follow it but in another way. i try to follow qbittorrent main versioning rule when we change major version only on some very big changes. so i interpret old version as 1.x.y in new scheme and just perform major update on it. but if most of you guys prefer ""to be measured penises"" (as firefox and chrome do), then i'll change it to the option you proposed.",0,0,0,0.9459850192070008,0.9587122797966005,0.9745936393737792,0.0,accept,unanimous_agreement
145875186,7610,we can implement it. but it should be user-configurable thing. there are specific proposals? or just wait for the requests from real users of this feature?,0,0,0,0.9840152263641356,0.9839927554130554,0.991557002067566,0.0,accept,unanimous_agreement
145875764,7610,"can you describe your point of view entirely, and not throw some broken up words? and stop to answer only the part of question that is meaningless without the rest.",0,0,0,0.73194819688797,0.835957944393158,0.6803507804870605,0.0,accept,unanimous_agreement
145878400,7610,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
145883683,7610,"well, now limited to 1mb and send 500 (internal server error) when exceeded. waiting for your suggestions.",0,0,0,0.986503839492798,0.934739589691162,0.992171049118042,0.0,accept,unanimous_agreement
145885791,7610,", ` ` is used now.",0,0,0,0.9853039383888244,0.985178291797638,0.9901847839355468,0.0,accept,unanimous_agreement
145888931,7610,"my pov is: the program is incorrect if it produces the incorrect output for correct input and settings. i'm willing (try) to correct the mistakes of this kind. but all you've presented so far, was as follows: ""if the user set inappropriate folder as www root this will lead to errors"". you propose to introduce any restrictions, but what? to try to ""fix user brains"" is ""fight with windmills"", imo. which folders should we ban? only the user can know how exactly his filesystem is used. the only (more or less) reasonable restriction is to have only one predefined www folder (e.g. inside qbittorrent data dir).",-1,-1,0,0.7792823314666748,0.6863475441932678,0.7046626210212708,-1.0,accept,majority_agreement
145923144,7610,"thank you! i was considering 1mb or 10mb, either is fine.",1,1,1,0.9772350192070008,0.9934281706809998,0.9909340143203736,1.0,accept,unanimous_agreement
145924980,7610,"* using semantic versioning is one thing, we can start practicing it if the majority agrees. imo semantic versioning is invented just for this situation. * the `{2, 0, 0};` you proposed is another, problem is: with the current `/version/api get` it returns an integer `15`, but after this pr it drops back to `2.0.0` which is a confusion for our users. so from a user perspective i would recommend using `16.0.0` (even we don't follow semantic versioning). also why not use `utils::version `? [a link]",0,0,0,0.9394842386245728,0.9761584401130676,0.9607297778129578,0.0,accept,unanimous_agreement
145925181,7610,"sarcasm is one of the few ways i have after your ignorance. the problem is: if ui dir is set to filesystem root, one can get contents of any file readable by qbt.",-1,-1,-1,0.939866065979004,0.6152987480163574,0.8847376108169556,-1.0,accept,unanimous_agreement
145925862,7610,ok thank you!,1,1,1,0.9371240735054016,0.9516109228134156,0.9499710202217102,1.0,accept,unanimous_agreement
145940574,7610,"it's not a problem, imo. but i'll do whatever the team decides. personally i prefer the way when zeros after minor version are truncated. waiting other reviewers.",0,0,1,0.5962783694267273,0.4752478897571563,0.5597290396690369,0.0,accept,majority_agreement
146022192,7610,"if someone read our discussion, it will be pretty obvious that you're dissembling in this comment. i haven't ignored any of your comments, although you consistently repeat the same thing, despite my responses that you don't even try to understand. on the contrary, you persist in ignoring my comments either completely oblivious to them or just clinging to some part, taken out of context (carefully avoiding things inconvenient for you). i'll quote something for you: the program is incorrect if it produces the incorrect output for correct input and settings. i'm willing (try) to correct the mistakes of this kind. but all you've presented so far, was as follows: ""if the user set inappropriate folder as www root this will lead to errors"". you propose to introduce any restrictions, but what? to try to ""fix user brains"" is ""fight with windmills"", imo. which folders should we ban? only the user can know how his filesystem is used exactly. the only (more or less) reasonable restriction is to have only one predefined www folder (e.g. inside qbittorrent data dir). : you can put the most reliable lock in the world, but it will not save you if you leave the door open! to make it easier to understand, i'll explain something else. i see this feature purely as server-side configurable option (i.e. only owner of running qbittorrent instance can change the path to the alternative ui www root, and it can do it only on the same machine the app running either via gui options dialog or via configuration file). if to allow to configure this feature remotely, then i do not see any way to guarantee any security. but again i ask the question: **why is it needed**? p.s. , if you don't switch to a constructive dialogue, then i don't want to waste my precious time in this.",-1,-1,-1,0.8483110666275024,0.932432234287262,0.9514935612678528,-1.0,accept,unanimous_agreement
146027900,7610,did you missed to removed this redundant assignment?,0,0,0,0.975177764892578,0.981046736240387,0.9911153316497804,0.0,accept,unanimous_agreement
146028827,7610,is translation really needed? i think no. also please add `maxallowedfilesize()` to the message.,0,0,0,0.9878738522529602,0.991240918636322,0.9948417544364928,0.0,accept,unanimous_agreement
146029554,7610,"just curious, why make it `virtual`?",0,0,0,0.947843372821808,0.8312331438064575,0.9757776260375975,0.0,accept,unanimous_agreement
146032015,7610,for strictness i would use `file.read(maxallowedfilesize())`.,0,0,0,0.9886101484298706,0.9904524087905884,0.99456387758255,0.0,accept,unanimous_agreement
146033472,7610,is it possible to declare all these as const methods? e.g. `void logout() const;`,0,0,0,0.9843628406524658,0.994248628616333,0.9950709342956544,0.0,accept,unanimous_agreement
146037481,7610,is it possible to read more than size() bytes? can the file be changed after we've opened it?,0,0,0,0.988204836845398,0.992173433303833,0.9933151602745056,0.0,accept,unanimous_agreement
146039014,7610,"it's just still a primitive idea in my head, *it might not make full sense*. i was thinking there should always be 2 folders under a user specified path (also applies for built-in ui), name them `public` & `private`. * the public folder contains resources that anyone can freely access, html files, js files, or even some api. then we can put every resources that is needed for login in this folder. * the private folder contains other resources that is only accessible after login. the reason for this, is that i want to minimize the exposure to the public. why? because the first step of web security penetration is reconnaissance, i.e. knowing what software & which version it is running, thus reducing information leakage is important imo. --- also replying [a link] here. given the above idea, i think the api version is not a critical info at the authentication stage, webapi users can simply try another login scheme when the previous failed, assuming we aren't inventing a login scheme every year.",0,0,-1,0.7002346515655518,0.8153281211853027,0.6033018231391907,0.0,accept,majority_agreement
146039444,7610,"base class method returns some predefined default value, the subclasses can redefine it (even has it configurable).",0,0,0,0.9892247319221495,0.990843951702118,0.990400731563568,0.0,accept,unanimous_agreement
146039662,7610,why not? i'll try to do it later.,0,0,0,0.9672092795372008,0.968418538570404,0.9793548583984376,0.0,accept,unanimous_agreement
146040064,7610,"good point, i missed it.",1,1,1,0.9598929286003112,0.8312627077102661,0.9609031677246094,1.0,accept,unanimous_agreement
146040663,7610,oops... i recall i have it done... apparently there are two similar places with this code was later.,-1,-1,-1,0.9654648900032043,0.5228460431098938,0.7042980194091797,-1.0,accept,unanimous_agreement
146041000,7610,"apparently, no. but it's translated in all similar places.",0,0,0,0.982080340385437,0.9654368162155152,0.982275128364563,0.0,accept,unanimous_agreement
146049174,7610,"i'm supporting the freewill on webui root folder location, as i expect it will be used by somehow advanced users and the location may vary according to the setups (ie my qb is running in a headless raspi2, so most likely the webui files will end up in some ramdisk location after boot). others may need a per user interface, and may choose /home/ ...",0,0,0,0.9769881963729858,0.9848694801330566,0.9867005944252014,0.0,accept,unanimous_agreement
146097780,7610,"something like that used in the current (current master) implementation, but it is somehow flawed... so i decided to abandon it in favor of simplicity. but i can return to it if i can see a complete picture of what is what. afaik, all common resources (js, css, images) are public in web apps (i mean images used in page formatting etc.).",0,-1,0,0.8515430092811584,0.5070312023162842,0.7411419749259949,0.0,accept,majority_agreement
146100514,7610,"ideally **only** login-related resources should be in public folder, everything else should go in private folder. and login-related resources should be independent from other resources, some resource might get duplicated but it's a very small cost imo. and as a side effect (bonus?) of this model, you can turn qbt into a dumb public file server by placing any file (with max file size limitation though) in the public folder.",0,0,0,0.946213960647583,0.9661372303962708,0.8954955339431763,0.0,accept,unanimous_agreement
146101438,7610,"i don't like to have private/public in request paths. i have idea to make it transparent for the client side, i.e. when client send request with `/page.html` path we search for `page.html` in public subfolder if client isn't authorized, otherwise we search in both private/public subfolders (in this order). this approach allows to avoid resources duplicating.",-1,-1,0,0.7861699461936951,0.7158818244934082,0.932380437850952,-1.0,accept,majority_agreement
146104115,7610,oops... they call non-const base members.,-1,-1,-1,0.9768317341804504,0.969357132911682,0.8013806343078613,-1.0,accept,unanimous_agreement
146110930,7610,"me too, yet i haven't consider how to implement it. :thumbs_up: seems probable.",0,1,1,0.74374920129776,0.934272050857544,0.985753893852234,1.0,accept,majority_agreement
146128133,7610,a path may end with a space. why do you reject that?,0,0,0,0.9063678979873656,0.9744732975959778,0.9638380408287048,0.0,accept,unanimous_agreement
146128273,7610,"i'm talking not about correctness of the program, because it is correctly implemented to contain the designed security hole.",-1,0,0,0.6257767081260681,0.9556348919868468,0.9740013480186462,0.0,accept,majority_agreement
146129587,7610,"technically, yes. but as soon as to have a space at the beginning or end of a phrase is grammatically incorrect, more likely it's just a typo. similar corrections are found everywhere in our code, so i just did it the same way. it doesn't matter much for me, so if you insist, i'll change it.",0,0,0,0.9393323659896852,0.9492366909980774,0.95525324344635,0.0,accept,unanimous_agreement
146129872,7610,"""allow the user to do what he has a right"" is a security hole?",0,0,0,0.856469452381134,0.9420697093009948,0.9420148134231568,0.0,accept,unanimous_agreement
146354185,7610,"if a user is authenticated and passes a correct csrf token with the request, what's the issue with allowing them to set the webui directory? at that point they have full control over the webui anyway, including the option to specify any external program to execute upon torrent completion.",0,0,0,0.9856716394424438,0.9903484582901,0.990440845489502,0.0,accept,unanimous_agreement
146359864,7610,", shhh... if reads this, you'd be anathematized and burned at the stake!",-1,1,-1,0.9891306161880492,0.6156094074249268,0.9834529757499696,-1.0,accept,majority_agreement
146545820,7610,"about the `if... else if ... else`, i would use 3 `if ()`, its clearer to me this way.",0,0,0,0.9838271141052246,0.9869961738586426,0.987352728843689,0.0,accept,unanimous_agreement
146559100,7610,"yes, any binary can be downloaded to the target system and executed via post-download command. yet i strongly believe that presence of a mistake or design flaw in a program may not be used as an excuse for adding more problems.",-1,0,0,0.5182288289070129,0.9863514304161072,0.9826741814613342,0.0,accept,majority_agreement
146559422,7610,i think that trimming file paths is counter-intuitive and we shall not do this.,-1,0,-1,0.76582270860672,0.8372588753700256,0.6422590613365173,-1.0,accept,majority_agreement
146611180,7610,code reformatted.,0,0,0,0.9798966646194458,0.9907323122024536,0.9939788579940796,0.0,accept,unanimous_agreement
146612171,7610,ok. let users to be careful.,0,0,0,0.9488173723220824,0.7037030458450317,0.989648163318634,0.0,accept,unanimous_agreement
146660915,7610,what if this is symlink to a symlink?,0,0,0,0.9824718832969666,0.971588671207428,0.988144874572754,0.0,accept,unanimous_agreement
146663236,7610,please rename the function to `isxxxfile` or `testfileisxxx`,0,0,0,0.9868561625480652,0.9942851662635804,0.9960923790931702,0.0,accept,unanimous_agreement
146745671,7610,why not reject all symlink?,0,0,0,0.9598025679588318,0.9191267490386964,0.9765180945396424,0.0,accept,unanimous_agreement
146759472,7610,"why not? (since we went the way of restrictions.) i think, there shouldn't be serious reasons to use symbolic links here.",0,0,0,0.944750964641571,0.9457037448883056,0.9685600996017456,0.0,accept,unanimous_agreement
147100348,7610,"i just checked them now and most of them are fine except this line (there are 2 instance of it): `status(400, tr(""incorrect category name""));` i think you should use `""bad request""` (without translation) and add `print(tr(""incorrect category name""));` below.",0,0,0,0.9730997085571288,0.9897902607917786,0.9845483303070068,0.0,accept,unanimous_agreement
147100704,7610,i would move this group above dynamic dns group (under authentication group).,0,0,0,0.9885510802268982,0.9902936220169068,0.9940005540847778,0.0,accept,unanimous_agreement
147104836,7610,this lookup table is not enough for alternative ui use. please add the following types: * jpg & jpeg: `image/jpeg` * bmp: `image/bmp` * txt: `text/plain` * not found in table: `application/octet-stream`,0,0,0,0.9860082268714904,0.9945043325424194,0.994895040988922,0.0,accept,unanimous_agreement
147105622,7610,"some 1920x1080 png wallpapers exceeds this limit, maybe 10mb is enough",0,0,0,0.9762992262840272,0.978581726551056,0.9884337782859802,0.0,accept,unanimous_agreement
147106867,7610,i think re-authentication should be required when users switched this option. i.e. previous saved sessionid should be cleared.,0,0,0,0.9868215918540956,0.9902073740959167,0.9882573485374452,0.0,accept,unanimous_agreement
147107562,7610,what do you think about the suggestion in: [a link],0,0,0,0.9827106595039368,0.9884584546089172,0.9787558317184448,0.0,accept,unanimous_agreement
147138695,7610,no problem to do it. but what is the exact cause?,0,-1,0,0.9827332496643066,0.6192602515220642,0.8829325437545776,0.0,accept,majority_agreement
147149250,7610,"there is also `status(400, ""incorrect torrent hash or name"");`",0,0,0,0.9867326617240906,0.9910030364990234,0.9948157668113708,0.0,accept,unanimous_agreement
147152352,7610,is `bad request` correct in these cases? as said in the doc: the syntax is correct but the requested resource id isn't. maybe `404 not found`?,0,0,0,0.6363194584846497,0.9827160835266112,0.9868152737617492,0.0,accept,unanimous_agreement
147154001,7610,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
147155893,7610,well. done.,0,0,1,0.8395384550094604,0.8711978197097778,0.7919018268585205,0.0,accept,majority_agreement
147165733,7610,"besides, i don't know how to solve it client-side. it'll just start to recieve `403 forbidden` to all its api requests.",0,-1,0,0.8372930288314819,0.5574975609779358,0.5306952595710754,0.0,accept,majority_agreement
147319270,7610,"i was thinking the following example: a user use the built-in webui and is authenticated, now he switch to alternative ui, should he expect to login again or not?",0,0,0,0.9784436225891112,0.9793384671211244,0.985934317111969,0.0,accept,unanimous_agreement
147320321,7610,"is `qmetaobject::invokemethod()` possible to call to class methods? e.g. `doprocessrequest`. if yes, it's a security issue.",0,0,0,0.9816367030143738,0.992020070552826,0.9930912256240844,0.0,accept,unanimous_agreement
147320604,7610,"technically there is no problem to keep current session, iirc. from the other side, as i said before, i don't know how to handle session break at client side.",0,0,0,0.8866438269615173,0.8495261669158936,0.9807621836662292,0.0,accept,unanimous_agreement
147320990,7610,"only invocable methods, i.e. slots and marked as q_invocable. i can also mark all api methods by some tag (as i've done for public).",0,0,0,0.9883125424385072,0.99204421043396,0.9953734278678894,0.0,accept,unanimous_agreement
147320993,7610,no problem just letting them receive error 403 and let them proceed to login manually. does this scenario really make sense?,0,0,0,0.9735195636749268,0.9402700662612916,0.9860447645187378,0.0,accept,unanimous_agreement
147321823,7610,"yes, i was blindly following the old code.",0,0,0,0.710440456867218,0.74227374792099,0.9552760124206544,0.0,accept,unanimous_agreement
147322740,7610,i think it's safer to use a private tag instead of using slots for private apis.,0,0,0,0.9745209217071532,0.9786931276321412,0.980402171611786,0.0,accept,unanimous_agreement
147324713,7610,i don't understand what you mean. i still need to call it via invokemethod so it should be either slot or q_invokable.,0,-1,0,0.7923080325126648,0.5168653726577759,0.9357245564460754,0.0,accept,majority_agreement
147328544,7610,"sorry, i misunderstood something. what i really meant is checking done in `if (!ispublicapi(methodname) && !sessionactive())` is not enough, you need to also check whether the `methodname` is a valid private api name.",-1,-1,-1,0.9841678738594056,0.979714572429657,0.9521540999412536,-1.0,accept,unanimous_agreement
147328958,7610,"becuase exposing all function in `slots` section for webapi is error prone, therefore adding a tag for private api is easier (for us developers) to differentiate which is webapi and which is normal function.",0,0,0,0.9614895582199096,0.9872287511825562,0.9837020635604858,0.0,accept,unanimous_agreement
147330438,7610,but i still have to be sure that the base class method will not be invoked. i'll think of something.,0,0,0,0.9770618081092834,0.9360928535461426,0.9747567176818848,0.0,accept,unanimous_agreement
147403657,7610,but it requires add both private/public tag and q_invokable if we declare it not it slots section: [code block],0,0,0,0.9891926646232604,0.995182454586029,0.9958139061927797,0.0,accept,unanimous_agreement
147408371,7610,webui can be changed at a time when some session is open. it is quite possible scenario. so should i drop the current sessions at this point?,0,0,0,0.624211847782135,0.9528972506523132,0.9928319454193116,0.0,accept,unanimous_agreement
147408991,7610,maybe just have tagged methods under slots section? e.g.: [code block],0,0,0,0.9870879650115968,0.9948657155036926,0.9918477535247804,0.0,accept,unanimous_agreement
147434631,7610,agree.,0,0,0,0.9730729460716248,0.9867860674858092,0.98495215177536,0.0,accept,unanimous_agreement
147435597,7610,"i thought again, if one can authenticate with qbt now, he can also do it later, so there is no point dropping the sessionid in this case. lets keep the current way for simplicity.",0,0,0,0.972074568271637,0.9864631295204164,0.984310269355774,0.0,accept,unanimous_agreement
147464955,7610,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
147581345,7610,"it is not clear what does ""source"" mean here. i suggest something like ""choose alternative ui files location"".",0,0,0,0.9518318176269532,0.9635730981826782,0.9857165813446044,0.0,accept,unanimous_agreement
147581377,7610,are all of these width changes really required?,0,0,0,0.9824803471565248,0.9890360236167908,0.9873172640800476,0.0,accept,unanimous_agreement
147581412,7610,why plain text to html changes are needed?,0,0,0,0.9708887338638306,0.97494238615036,0.9854779243469238,0.0,accept,unanimous_agreement
147581427,7610,this label has to correlate with file dialog title.,0,0,0,0.987332046031952,0.988379955291748,0.9942575693130492,0.0,accept,unanimous_agreement
147581486,7610,why don't you use qmimedatabase here?,0,0,0,0.9763379693031312,0.9915144443511964,0.9926673769950868,0.0,accept,unanimous_agreement
147581552,7610,"afair, this was already asked by , but i can't find that discussion. so i repeat, sorry: why not 413 status code (payload too large)?",-1,-1,-1,0.9795008897781372,0.9892921447753906,0.9915728569030762,-1.0,accept,unanimous_agreement
147581632,7610,what's the point of converting the tag to qlatin1string explicitly?,0,0,0,0.9807929396629332,0.9938011765480042,0.97037672996521,0.0,accept,unanimous_agreement
147581724,7610,can't understand what does this line do.,-1,-1,-1,0.7969487905502319,0.8101204037666321,0.9449464678764344,-1.0,accept,unanimous_agreement
147581759,7610,m_publicapis list is shorter. why don't you test it first?,0,0,0,0.977024257183075,0.9768333435058594,0.992067575454712,0.0,accept,unanimous_agreement
147581971,7610,i believe parameters marshaling can be done here as well. motivation: api functions would contain parameters in its signatures (documenting themselves) and remote api would be one step away from becoming protocol-agnostic.,0,0,0,0.9431006908416748,0.9851477742195128,0.9897868633270264,0.0,accept,unanimous_agreement
147583121,7610,i noticed the change made by qt designer as well.,0,0,0,0.9837528467178344,0.9808545112609864,0.978135883808136,0.0,accept,unanimous_agreement
147583173,7610,no i didn't and quoting rfc 7231: refusing to process a request because the request payload is larger than the server is willing or able to process i.e. the request itself is too large not the response.,0,0,0,0.6894810199737549,0.9709686636924744,0.988104522228241,0.0,accept,unanimous_agreement
147583414,7610,"thanks, !",1,1,1,0.964749276638031,0.9601993560791016,0.9907322525978088,1.0,accept,unanimous_agreement
147583670,7610,"is `500 ""internal server error""` more suitable here?",0,0,0,0.9860917925834656,0.9872583746910096,0.9915229082107544,0.0,accept,unanimous_agreement
147584065,7610,you're welcome!,1,1,1,0.9316214919090272,0.960791826248169,0.977165699005127,1.0,accept,unanimous_agreement
147587106,7610,"encountered an unexpected condition that prevented it from fulfilling the request. we hasn't ""unexpected condition"" here. in fact, the http has not appropriate codes for some of our situations. i imply once we do not support paths with `.` and `..` in it, we have no resources with these paths, so any such resources are ""not found"".",0,0,0,0.922028422355652,0.9204062223434448,0.9891788959503174,0.0,accept,unanimous_agreement
147587197,7610,"the another situation is what we should return, for example, when user request the creation of something? 1. the resource with same id is already exists 2. unsupported id or another data",0,0,0,0.975853443145752,0.9832131266593932,0.9898361563682556,0.0,accept,unanimous_agreement
147587708,7610,this is legacy code from qt4 epoch. will use qmimedatabase now.,0,0,0,0.9887683391571044,0.9929187893867492,0.9939669370651244,0.0,accept,unanimous_agreement
147587796,7610,reset qfileinfo object to another path (parent path of current file).,0,0,0,0.987759292125702,0.99181067943573,0.9947686195373536,0.0,accept,unanimous_agreement
147587937,7610,the public paths requested much less frequently. don't forget that `syncmaindata` (private path) can be requested very frequently.,0,0,0,0.9838629961013794,0.9754902124404908,0.9906219244003296,0.0,accept,unanimous_agreement
147588006,7610,i also think about it. but there are some difficulties here. let me think about it after this pr.,0,0,0,0.9108548760414124,0.9328908920288086,0.905651032924652,0.0,accept,unanimous_agreement
147588473,7610,"my concern is returning 404 when the resource is indeed there is confusing (e.g. `./image.jpg`, web servers like apache, nginx does not have this limit), so imo 500 (or 403) is more explicit to the user that we don't accept `.` or `..`. i'll let you decide this. depends on the context... 200 ok (if we are following restful style), or 409 hard to find an answer without context here, 404, 403?",0,0,0,0.7951322793960571,0.9586836099624634,0.8674712777137756,0.0,accept,unanimous_agreement
147593251,7610,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
147620631,7610,"1. the resource with same id is already exists 2. unsupported id or another data , i mean, e.g., addcategory: 1. when category with the given name is already exists; 2. when request has unacceptable category name (e.g. empty). can you also revise all statuses returned from webapplication and give your suggestions.",0,0,0,0.9820978045463562,0.9859071969985962,0.9938974976539612,0.0,accept,unanimous_agreement
147694312,7610,"`409 conflict`: increaseprio(), decreaseprio(), topprio(), bottomprio(), the first error in rename(), setcategory(), addcategory() also please change to use the standard status name e.g.`not found` in `status()` and use `print()` to embed the specific error.",0,0,0,0.9831973314285278,0.9944686889648438,0.9931663870811462,0.0,accept,unanimous_agreement
147926296,7610,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
147952234,7610,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
147957255,7610,"and after testing for symlinks, please check that the path does not point to a special file (socket, device, etc). as qt does not cover that, here is a snippet for posix (or you can use boost::filesystem): [code block]",0,0,0,0.9879252910614014,0.9946163296699524,0.993530809879303,0.0,accept,unanimous_agreement
147957960,7610,what kind of difficulties?,0,0,0,0.8260006308555603,0.7892186045646667,0.9715434312820436,0.0,accept,unanimous_agreement
147958114,7610,"now built-in webui is broken, ff initiates a download instead of opening the page. the returned http content-type is `application/x-extension-html`, weird. also tested `qmimedatabase::matchdefault` doesn't help much, still parsing error in ff due to translate strings not being replaced.",-1,-1,-1,0.9783516526222228,0.925895929336548,0.9700653553009032,-1.0,accept,unanimous_agreement
147960588,7610,works fine here.,0,0,0,0.7304028272628784,0.9404566287994384,0.8461194634437561,0.0,accept,unanimous_agreement
147961355,7610,oops... i fixed it below but forgot to do it here.,-1,-1,-1,0.983037292957306,0.7888570427894592,0.9402359127998352,-1.0,accept,unanimous_agreement
147961913,7610,", does your test function cover all cases on unix? i mean, should we still checking for symlinks separately?",0,0,0,0.9885746836662292,0.9933852553367616,0.9898616075515748,0.0,accept,unanimous_agreement
147969033,7610,is it really necessary? why?,0,0,0,0.8439530730247498,0.941136121749878,0.984180212020874,0.0,accept,unanimous_agreement
147969758,7610,your qt version? qt 5.9.2 here.,0,0,0,0.9859465956687928,0.993048131465912,0.9954491257667542,0.0,accept,unanimous_agreement
147970122,7610,"sure, one can put there a device file for a whole disk or keyboard and read them.",0,0,0,0.9875651001930236,0.9901549816131592,0.9903841018676758,0.0,accept,unanimous_agreement
147971931,7610,"it is written in accordance to posix, thus all compatible systems (all *nixes) should be covered. you do check for directory symlinks above, while this snippet tests files only. if you want to test for directories, s_ifdir is the flag: [code block] there are helper macros: [code block] that do exactly the same, but they were introduced in 1997 or something like that. so if you don't want to target older systems, they are useful (btw, there is also similar s_islnk macro that test for symbolic links).",0,0,0,0.9668115377426147,0.9914674758911132,0.975807785987854,0.0,accept,unanimous_agreement
147977510,7610,"i'm really interested in this :) afaik: you'll need higher privilege than a normal user to create a block/char file, but there is no point in doing so, you still need to access `/dev` to read the hardware. as for named pipes, you'll need to feed it from somewhere else; if this is the case, then the attacker can already issue shell commands (to create the pipe), no point defending it either. there is no harm for checking more strictly, i won't insist not adding it.",1,1,1,0.9791154861450196,0.9943974018096924,0.9963234663009644,1.0,accept,unanimous_agreement
147986103,7610,"one can give many such files to you in a web ui archive. if one of them contains a proper device numbers, an intruder can use it.",0,0,0,0.986456036567688,0.9910057783126832,0.9818506836891174,0.0,accept,unanimous_agreement
147986431,7610,"5.9.2 too, but i think the key component here is the actual mime database. do you use the bundled one or does your system provide the mime database?",0,0,0,0.9875003099441528,0.993402898311615,0.991592288017273,0.0,accept,unanimous_agreement
147997978,7610,5.9.1 works correctly.,0,0,0,0.9704040288925172,0.9802347421646118,0.9747604131698608,0.0,accept,unanimous_agreement
148004473,7610,i guess the system one. i can see the shared database is installed correctly. i wonder if this is a package issue...,-1,0,0,0.70892733335495,0.9371923208236694,0.9843276143074036,0.0,accept,majority_agreement
148014142,7610,"i don't think unsolvable. i have already tried something. but it is still beyond the scope of this pr, so i would prefer to do it separately.",0,0,0,0.496460884809494,0.6258357167243958,0.94730943441391,0.0,accept,unanimous_agreement
148017288,7610,"by the way, preventing possible claims at the expense of performance... perform a lookup. the parsing of mimetypes is done on demand (when shared-mime-info is installed) or when the very first instance is constructed (when parsing xml files directly).",0,0,0,0.9859203696250916,0.991278111934662,0.99317729473114,0.0,accept,unanimous_agreement
148055594,7610,"ok, but one must be insane to let these files have root permission...",-1,-1,-1,0.7724301218986511,0.9827830791473388,0.9848360419273376,-1.0,accept,unanimous_agreement
148056337,7610,"another problem, built-in webui won't load because it won't pass this check. i got the ""unacceptable file type."" msg in my browser.",-1,-1,-1,0.6236666440963745,0.5546540021896362,0.8200278878211975,-1.0,accept,unanimous_agreement
148056947,7610,"even reading from such files would create a security problem, so root permission is not needed.",0,0,0,0.9396563172340392,0.9730499386787416,0.9828654527664183,0.0,accept,unanimous_agreement
148057482,7610,maybe the function is used with qt resources?,0,0,0,0.9879959225654602,0.9948005676269532,0.9905683398246764,0.0,accept,unanimous_agreement
148058124,7610,"in fact, all these checks are unnecessary for the builtin ui. will be fixed later. , or we shouldn't trust ourself as well?",0,0,0,0.9793784022331238,0.9506059288978576,0.9035775661468506,0.0,accept,unanimous_agreement
148058937,7610,:d,1,0,1,0.9313417077064514,0.7531492114067078,0.9904568791389464,1.0,accept,majority_agreement
148059386,7610,"no, you need root to create/copy such file.",0,0,0,0.9870105981826782,0.9885027408599854,0.9927912950515748,0.0,accept,unanimous_agreement
148063485,7610,"yes, but is it impossible to convince to convince somebody to unpack with sudo? or install such a file by other means?",0,0,0,0.9716238975524902,0.953052818775177,0.9909095168113708,0.0,accept,unanimous_agreement
148064870,7610,"that's what i mean by ""ok"" in my post above ;)",1,1,0,0.8937203288078308,0.9684910178184508,0.8046627640724182,1.0,accept,majority_agreement
148072978,7610,missing closing `/`,0,0,0,0.9542946815490724,0.9915710687637328,0.9907591342926024,0.0,accept,unanimous_agreement
148077409,7610,"just noting down what is happening so far: * with `qmimedatabase::matchextension`, qbt is returning `application/x-extension-html`, so my browser initiates download. weird mime type, don't know why. * with `qmimedatabase::matchdefault`, qbt returns `application/xhtml+xml`, this is correct as the file is in xhtml format. but this mime type creates another problem, ff starts using xml parser to parse the html file and since the html is not well-formed xml, ff is spitting out errors and refuse to render the page. force using `text/html` might workaround this, yet i've not found a way to construct such qmimetype type.",-1,-1,-1,0.9837415218353271,0.8815820813179016,0.881614625453949,-1.0,accept,unanimous_agreement
148259585,7610,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
148259803,7610,", try it now!",1,0,1,0.5501867532730103,0.5661739110946655,0.8597573637962341,1.0,accept,majority_agreement
148261292,7610,"now matches both filename and content. it returns ""text/html"" for me. it's correct behavior for strict xhtml files. strict xhtml should be well-formed xml, but some our web ui sources aren't. it needs to correct it to follow either xhtml or html5 standard.",0,0,0,0.9813506603240968,0.9890860319137572,0.9686793088912964,0.0,accept,unanimous_agreement
148263538,7610,"besides, to make it really protocol-agnostic, we need to implement additional abstraction layer. need to develop some requirements (e.g. the format of the input and output data, status, etc.).",0,0,0,0.9802302122116088,0.9904395341873168,0.988281548023224,0.0,accept,unanimous_agreement
148265756,7610,"thanks, now i can pass this check.",1,1,1,0.6864052414894104,0.7860652208328247,0.8848853707313538,1.0,accept,unanimous_agreement
148266073,7610,"`stat()` returns int type, so it should be `if (::stat(path, &st) != 0)`",0,0,0,0.9856225848197936,0.9932888150215148,0.9934688806533812,0.0,accept,unanimous_agreement
148267775,7610,"yeah, from what i've read, it's bad for web development, pages break too easily. i would chose html5. also this issue should be solved if qmimedatabase is being used.",-1,-1,-1,0.6902098059654236,0.9293596148490906,0.6980616450309753,-1.0,accept,unanimous_agreement
148268208,7610,"maybe: unacceptable file type, only regular file is allowed.",-1,0,-1,0.9476419687271118,0.5385205745697021,0.8143645524978638,-1.0,accept,majority_agreement
148268522,7610,"users won't know what is ""www root folder"", so ""symlinks inside alternative ui folder are forbidden.""",0,0,0,0.938492476940155,0.9563742280006408,0.9876248836517334,0.0,accept,unanimous_agreement
148509789,7610,you should use only the first 2 chars to conform to the standard.,0,0,0,0.9869131445884703,0.991074800491333,0.9948979020118712,0.0,accept,unanimous_agreement
148512468,7610,"this breaks the interface in ie11, please revert. see: [a link]",0,0,0,0.9628236889839172,0.9766641855239868,0.9713655710220336,0.0,accept,unanimous_agreement
148512755,7610,this one is fine and you can also remove it.,0,0,0,0.9484661221504213,0.9571679830551147,0.9844282269477844,0.0,accept,unanimous_agreement
148513450,7610,"if possible, you can remove all these mime types now.",0,0,0,0.988511562347412,0.9886041879653932,0.9945736527442932,0.0,accept,unanimous_agreement
149073534,7610,"they has ""1"" and ""2"" in the names, suggesting that others might follow. then what about possible parameter changes? also, the old object paths denote possibility to export several objects. quite a valuable possibility!",1,1,0,0.9797320365905762,0.9854185581207277,0.5321513414382935,1.0,accept,majority_agreement
149074646,7610,"for example, you could export the rss subsytem in its own sub-path. while now everything is at the same level potentially creating a mess. p.s. take a look at qdbusabstractadaptor documentation and [a link] to get an idea what web api implementation might look like.",-1,0,0,0.61487877368927,0.966052770614624,0.9585295915603638,0.0,accept,majority_agreement
149080233,7610,", i can't say i understand what you mean. this is only ""old-name to new-name"" mapping tables. i have two since they are used in a different way (because of old api inconsistency). or are you just looking to the future, and you want to use something like that for the different things? in this case, do not be lazy to give detailed examples of expected use cases. will reading qdbusabstractadaptor documentation be enough to understand you?",0,0,-1,0.9358994364738464,0.6071120500564575,0.5147165656089783,0.0,accept,majority_agreement
149082823,7610,"yes, this is about future developments (although api sub-paths would make sense in any case). the idea behind qdbusabstractadaptor is very simple: you provide a qobject and a path to publish it, and then all its slots and properties (here you additionally mark them as public_api and private_api, but that doesn't matter) become available at that path. qt dbus documentation can explain details. it would be nice to achieve the same for http, especially taking into account that you are already only a step away.",0,0,0,0.8919286727905273,0.8616303205490112,0.9210832118988036,0.0,accept,unanimous_agreement
149085081,7610,"sorry, forgot to comment on the first part. i'm thinking of possible parameters change between apis. the maps we are talking about might contain not name → name pairs, but name → function to handle parameter change. or such changes in the api are impossible or quite unlikely?",-1,-1,-1,0.9869307279586792,0.9852087497711182,0.9517953395843506,-1.0,accept,unanimous_agreement
149085684,7610,"quick follow-up: supposing the proposed object publishing way is adopted, we could just publish an object for the old api and avoid new on old sub-system dependency (look and the hash parameter handling in the current pr code).",0,0,0,0.985933482646942,0.9934936165809632,0.9898547530174256,0.0,accept,unanimous_agreement
149092026,7610,"hmm... interesting idea. i'll try to go there... agree. as i said before i got rid from sub-paths since they're currently confused/messed and i went a short ways (no ""subpaths"" is better than wrong ""subpaths""). however, now i wonder to use it again. however, i don't want to delay thi pr, because there are other goals. due to the fact that the compatibility layer is implemented, we can have a old api as main and new one as experimental feature for some time. then we can change the api paths safe for the end user. what do you say? i'm just not sure i can quite quickly develop the consistent api paths and names. however, you , you too) can help me with this. you can post your suggestions in this pr topic.",1,1,1,0.7709885835647583,0.4281485378742218,0.8834460973739624,1.0,accept,unanimous_agreement
149092788,7610,"everything is clear with the rss, of course: `/api/rss/processingenabled` and so on.",0,0,0,0.9874441027641296,0.9618214964866638,0.993453860282898,0.0,accept,unanimous_agreement
149102960,7610,"you are talking about sub-paths under `/api` right? take a look, webapis is not much: [a link] i can only think of `/api/torrent`: for apis fetching single torrent data, `/api/global`: for apis like ""get global download limit"" and everything else still under `/api` because no other sub-path fits. i don't think end users cares much about it (as long as webui still work), it's 3rd-party software developers whom are related to these changes: [a link] i'm not saying that is the golden rule, but we something we should bear in mind.",0,0,0,0.7770729064941406,0.9061681628227234,0.9471375942230223,0.0,accept,unanimous_agreement
149105823,7610,maybe `api/session` for bits like the global download limit? login/logout might also fit into the session sub-object.,0,0,0,0.9897019863128662,0.9948937892913818,0.9917650818824768,0.0,accept,unanimous_agreement
149110136,7610,"sound redundant, users are logging into a web session, not a libtorrent session.",0,-1,0,0.8897417783737183,0.6733843088150024,0.5771851539611816,0.0,accept,majority_agreement
149114472,7610,agree. from the webapi pov session is web session. globals can be under `app/` (or some other) subpath.,0,0,0,0.9860483407974244,0.9914570450782776,0.9928376078605652,0.0,accept,unanimous_agreement
149115245,7610,obvious remark: if we are going to move to object publishing approach (see above) we need a sub-path for each api entry.,0,0,0,0.985121726989746,0.9907737374305724,0.987229347229004,0.0,accept,unanimous_agreement
149291740,7610,"not so fast, i think... i tried to imagine it myself, and i have a lot of questions now (and very little time for this). so i plan to implement api paths another (more simple) way in this pr so as not to delay it. are there any strong objections against this?",-1,-1,-1,0.7891710996627808,0.847877025604248,0.6666209101676941,-1.0,accept,unanimous_agreement
149322129,7610,"hi, a note on behalf of existing users and developers of this api [a link]",0,0,0,0.9831543564796448,0.8641923666000366,0.9883583188056946,0.0,accept,unanimous_agreement
149328116,7610,no objections at all.,0,0,0,0.9715731143951416,0.9251590967178344,0.9642754197120668,0.0,accept,unanimous_agreement
149334079,7610,": currently this pr does provide complete compatibility with the old ap (except maybe for a version string, i'm not sure about that). thanks for your concerns!",1,1,1,0.977657675743103,0.9430636763572692,0.984391450881958,1.0,accept,unanimous_agreement
149348619,7610,can you please add a `warning` http header (via `responsebuilder::header()`) when the client uses the old api path? see: [a link] and example value: `deprecated api : use new api under path /api. old api will be removed in v4.0.2`,0,0,0,0.9883872866630554,0.9936090707778932,0.9959207773208618,0.0,accept,unanimous_agreement
149350136,7610,"please use a named variable for this line, to ease documentation work (easier to track).",0,0,0,0.9848180413246156,0.9825160503387452,0.9939356446266174,0.0,accept,unanimous_agreement
149350218,7610,here too and the next line.,0,0,0,0.9856085777282716,0.9876326322555542,0.9878047704696656,0.0,accept,unanimous_agreement
155918324,7610,"instead of moving to `webapplication`, why not move to `protected` section of `abstractwebapplication`? and use `operator()` for const get, and `*_` for setting value.",0,0,0,0.9887809753417968,0.9952373504638672,0.9941725134849548,0.0,accept,unanimous_agreement
155918952,7610,", this pr has currently some unfinished/intermediate changes. please don't review until i finish it.",0,0,0,0.9782994985580444,0.799413800239563,0.5085811614990234,0.0,accept,unanimous_agreement
159116943,7610,`for (const auto &rule : rss::autodownloader::instance()->rules())` ?,0,0,0,0.9865062832832336,0.9927874207496644,0.9941226840019226,0.0,accept,unanimous_agreement
159116952,7610,use a one or two tmp variable for easier reading?,0,0,0,0.9868893623352052,0.9913796186447144,0.9937381744384766,0.0,accept,unanimous_agreement
159116955,7610,use tmp variable?,0,0,0,0.9874875545501708,0.992699921131134,0.9948983788490297,0.0,accept,unanimous_agreement
159116991,7610,the above 2 are unix-only headers right? should you move them in `#ifdef q_os_unix`?,0,0,0,0.9896857142448424,0.9951169490814208,0.9952255487442015,0.0,accept,unanimous_agreement
159116996,7610,"this one should move to top, above `#include `",0,0,0,0.984527349472046,0.993250012397766,0.9949671626091005,0.0,accept,unanimous_agreement
159117021,7610,"`choose alternative web ui folder`, as the files are always placed in some specific folder right?",0,0,0,0.987091064453125,0.995233714580536,0.9928834438323976,0.0,accept,unanimous_agreement
159117047,7610,`folder location:`,0,0,0,0.9803162217140198,0.99284428358078,0.9929004907608032,0.0,accept,unanimous_agreement
159117068,7610,"i'm not against it, but i think you should add a rule in our coding guidelines about it.",0,0,0,0.9612545371055604,0.9603832960128784,0.9198004007339478,0.0,accept,unanimous_agreement
159117140,7610,"can't tell why, but i expected to see `std::string` as parameter.",0,0,0,0.9864102005958556,0.935224950313568,0.9714094400405884,0.0,accept,unanimous_agreement
159117164,7610,is it possible to initialize the above 2 here? using `constexpr` if necessary.,0,0,0,0.989428460597992,0.9946081638336182,0.9955815672874452,0.0,accept,unanimous_agreement
159117284,7610,maybe use a tmp variable?,0,0,0,0.9854140281677246,0.9915967583656312,0.9911848902702332,0.0,accept,unanimous_agreement
159117506,7610,"i use here the wording proposed by some another reviewer (, unless i'm wrong). i would prefer to leave it as is (at least in this pr).",0,0,0,0.9687975645065308,0.9853873252868652,0.9860639572143556,0.0,accept,unanimous_agreement
159117533,7610,`optionalparams`: what does this variable mean? if it's optional then it shouldn't throw any error at all (when not exists). maybe omit this field and let the respective function/method handle its existence?,0,0,0,0.9870109558105468,0.9932997226715088,0.9928876757621764,0.0,accept,unanimous_agreement
159117536,7610,files location is path of its parent folder. but folder location is the place where the folder is located (i.e.its parent folder path). so current wording is correct.,0,0,0,0.988641321659088,0.9939190149307252,0.9939245581626892,0.0,accept,unanimous_agreement
159117540,7610,please specify return types here and `findapicall `,0,0,0,0.9873226284980774,0.9934930205345154,0.9958006739616394,0.0,accept,unanimous_agreement
159117555,7610,no. otherwise the code couldn't compile on windows.,0,0,0,0.9569715857505798,0.8748437166213989,0.9891214966773988,0.0,accept,unanimous_agreement
159117594,7610,"i just saw msvc have this header... then it should move up, above `#if defined(q_os_win)` section.",0,0,0,0.988105535507202,0.9867385625839232,0.9929227828979492,0.0,accept,unanimous_agreement
159117679,7610,"the meaning of this check: all required params must be presented, any of optional param may or may not be presented, any other params are forbidden (except the get request, where any extra params are allowed).",0,0,0,0.9878917932510376,0.9923415184020996,0.9936994314193726,0.0,accept,unanimous_agreement
159117681,7610,"i see you made `hashes` optional here and i'm not sure this change is necessary... do you have specific use case? i've no reason to object, just asking.",0,0,0,0.6528927683830261,0.739886462688446,0.9189406633377076,0.0,accept,unanimous_agreement
159117861,7610,isn't that a bit too strict? imo we should be tolerant about it. and also save some processing power.,0,0,0,0.8867283463478088,0.6202945709228516,0.5483947396278381,0.0,accept,unanimous_agreement
159120417,7610,i think the same way. we shouldn't check it at all and just take the params we need. initially there was no checks. but someone add it for some reason (i don't remember who done it). in this pr i just allow optional params in addition to required.,0,0,0,0.965209186077118,0.9573702216148376,0.97035551071167,0.0,accept,unanimous_agreement
159120478,7610,"some methods can apply its action to one or more torrents. it's too expensive to send all hashes if you want to apply it to all torrents. some of this methods have optimized alternatives earlier (e.g. pause/pauseall). i start to transform it to uniform methods with optional ""hashes"" param.",0,0,0,0.9800060987472534,0.985509753227234,0.9926130771636964,0.0,accept,unanimous_agreement
159124420,7610,"the current situation is no one is against that, but most developers (except me, generally) use include guards (maybe just habit?). should we require ""pragma once"" by creating the appropriate rules? then the dispute between supporters and opponents may inevitably arise. i'm afraid if i try to insist on this, it will generally be prohibited in favor of the include guard.",-1,-1,-1,0.9312389492988586,0.7249616980552673,0.9449315667152404,-1.0,accept,unanimous_agreement
159124531,7610,"i see no reason to do it. ths is a class declared/defined in qt application, it will be used together with other qt types include qstring as well. the fact it extends std class and uses std::string internally shouldn't forbid us to have convenient interface with all qt world outside it.",0,0,0,0.9268521666526794,0.9794084429740906,0.976819097995758,0.0,accept,unanimous_agreement
159133586,7610,"okay, just to be clear, my viewpoint is, having different include guards in the same project is distributing, having a rule for it will clear the confusion. i think the worst scenario is just we make a vote/decision and we move on, me at least won't bother fight hard for it.",-1,0,-1,0.6538967490196228,0.695735514163971,0.6211180686950684,-1.0,accept,majority_agreement
159152868,7610,"ok, just removed it here for now to not slow this pr. let it be another issue.",0,0,0,0.929346203804016,0.976615071296692,0.9843248128890992,0.0,accept,unanimous_agreement
159448254,7610,is it possible to do? [code block],0,0,0,0.98759263753891,0.9931355714797974,0.995538890361786,0.0,accept,unanimous_agreement
159449819,7610,"i just think checking the **required** params is needed and is a common pattern (not sure this can be small enough to inline into each function), however the **optional** params shouldn't be checked at all. what do you think?",0,0,0,0.9826151132583618,0.9863374829292296,0.976395845413208,0.0,accept,unanimous_agreement
159450832,7610,"i agree. or how about use a special string for *all* operation? e.g. `hashes=""all""` will change all torrent settings instead of omitting it? and also `hash` will become a required param. just an idea.",0,0,0,0.9658129811286926,0.960534930229187,0.962230622768402,0.0,accept,unanimous_agreement
159457651,7610,it's possible. i'll change it.,0,0,0,0.9780664443969728,0.9821382761001588,0.9823405742645264,0.0,accept,unanimous_agreement
159487303,7610,"the existing code allows no unexpected params, i only implemented optional params as close as possible. but, as i said, this strictness not so important to me. maybe leave it for separate issue?",0,0,0,0.7305311560630798,0.9572811722755432,0.9856554269790648,0.0,accept,unanimous_agreement
159580092,7610,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
159672098,7610,ok. please consider my additional commit. i've done it there (and some other improvements).,0,0,0,0.9717590808868408,0.7418881058692932,0.9896683692932128,0.0,accept,unanimous_agreement
159672317,7610,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
160023041,7610,"nitpick, `const` here and below is a bit redundant imo.",0,0,-1,0.9486075639724731,0.7174352407455444,0.636765718460083,0.0,accept,majority_agreement
160023209,7610,of course. just a copy-paste here...,0,0,0,0.9807207584381104,0.6938074827194214,0.9924226403236388,0.0,accept,unanimous_agreement
160023308,7610,the result is pretty neat. i can approve the current form after commit squash.,1,1,1,0.773627758026123,0.9531316757202148,0.9880494475364684,1.0,accept,unanimous_agreement
160034184,7610,will the minimum supported version of ie now officially be 10?,0,0,0,0.9860734939575196,0.989073932170868,0.9934626817703248,0.0,accept,unanimous_agreement
160038293,7610,on compile i get an error [code block],0,0,0,0.9154462814331056,0.955812931060791,0.9289336204528807,0.0,accept,unanimous_agreement
160043848,7610,"afaik, this directive is not for defining minimum supported version. it's for using legacy renderer in modern ie versions. ?",0,0,0,0.98613703250885,0.990462601184845,0.9914073348045348,0.0,accept,unanimous_agreement
160044107,7610,"iirc it doesn't event work with ie version < 10. so yes, kinda.",0,0,0,0.96709406375885,0.832301676273346,0.9833694100379944,0.0,accept,unanimous_agreement
160059158,7610,"in my testing it appears to work (mostly) well in ie9. ie8 doesn't work at all, which i'm rather ok with. we ought to document this somewhere because it really does dictate what javescript features i can use when developing. maybe on the qbittorrent [a link] page?",0,0,0,0.9753985404968262,0.9697783589363098,0.819380521774292,0.0,accept,unanimous_agreement
160866189,7610,still getting this error with the latest commits,0,0,0,0.8876692056655884,0.9460282921791076,0.7707764506340027,0.0,accept,unanimous_agreement
160875612,7610,"not sure with the last one... travis compiles it without errors now, so either you have outdated code version, or you're not doing a clean build.",-1,0,0,0.5110911726951599,0.8109548091888428,0.8579156994819641,0.0,accept,majority_agreement
160885690,7610,this include isn't needed,0,0,0,0.9841638207435608,0.962203562259674,0.9936668276786804,0.0,accept,unanimous_agreement
160897570,7610,doubtful... do i have to look into each included header to see that it includes other headers (and do this recursively)? i'm sure not.,0,-1,-1,0.6275896430015564,0.8856766223907471,0.8843503594398499,-1.0,accept,majority_agreement
161270350,7610,remove the header and build the project. it's trivial to verify.,-1,0,0,0.692264199256897,0.973097801208496,0.9937888979911804,0.0,accept,majority_agreement
161279903,7610,"what is your logic? 1. don't include any header and try to compile 2. add missing headers and try to compile again 3. repeat step 2 until no more error occurred. 4. have compilation errors each time some 3rd party header was changed and the header you need was removed there, ? imo, if i use some class declared in some header i can include this header (even if it included indirectly). what's wrong here?",0,0,0,0.9177197217941284,0.9249655604362488,0.7903529405593872,0.0,accept,unanimous_agreement
161301205,7610,i'm not sure what the issue is here. you include a header that you don't use. i don't know why removing it results in so much pushback.,-1,-1,0,0.7866824269294739,0.8515393733978271,0.6750569343566895,-1.0,accept,majority_agreement
161368881,7610,really? let's see the following lines: [code block] they require class qjsonvalue to be complete (i.e. fully defined) so i include the header where it is declared. for some reason this header is also included indirectly via other header (qjsondocument) but why should i care about it?,0,0,-1,0.7944977879524231,0.9840832352638244,0.7706480026245117,0.0,accept,majority_agreement
164289386,7610,"iirc this is widely used, maybe move to it to some top-level header?",0,0,0,0.9896089434623718,0.987908899784088,0.9903581738471984,0.0,accept,unanimous_agreement
164289413,7610,note: it's 2018 now.,0,0,0,0.9578480124473572,0.9900882840156556,0.9911092519760132,0.0,accept,unanimous_agreement
164289448,7610,`enum class errortype`?,0,0,0,0.9846636652946472,0.9920421242713928,0.9955627918243408,0.0,accept,unanimous_agreement
164289554,7610,"what does the ""i"" mean? maybe add a comment?",0,0,0,0.9585124850273132,0.9914658069610596,0.9939541220664978,0.0,accept,unanimous_agreement
164289606,7610,possible to move keys to cpp file?,0,0,0,0.9880827069282532,0.9946156144142152,0.9931495785713196,0.0,accept,unanimous_agreement
164289690,7610,"i don't really understand this line, what is it for?",-1,-1,-1,0.7623335719108582,0.843182384967804,0.8336006999015808,-1.0,accept,unanimous_agreement
164295532,7610,"really? :) actually, some of files was created in 2017, the others in 2018.",1,1,1,0.8389645218849182,0.9960252046585084,0.9952175617218018,1.0,accept,unanimous_agreement
164295571,7610,"imo, it's too wasteful to have a separate file just for one alias.",-1,-1,-1,0.9691930413246156,0.8413806557655334,0.6684014797210693,-1.0,accept,unanimous_agreement
164295641,7610,changed all new to 2018.,0,0,0,0.9763548970222472,0.9889973402023317,0.9893935918807985,0.0,accept,unanimous_agreement
164295771,7610,i don't see much sense to have a separate namespace in this case (this type isn't shared to have it outside apierror; having names like apierror::errortype::notfound seems too complex for me). have you serious reasons to change it?,-1,0,0,0.917383909225464,0.6414250135421753,0.9482693672180176,0.0,accept,majority_agreement
164295977,7610,"it's a common practice for interface naming (i've seen it happen somewhere). isession has no implemented any methods, it's a pure interface.",0,0,0,0.9761815071105956,0.9906426072120668,0.988453209400177,0.0,accept,unanimous_agreement
164296037,7610,see **inheriting constructors** at [a link],0,0,0,0.9871875047683716,0.9885579347610474,0.9952656030654908,0.0,accept,unanimous_agreement
164296343,7610,some keys are used in controllers.,0,0,0,0.9877298474311828,0.9737039804458618,0.9936459064483644,0.0,accept,unanimous_agreement
164301181,7610,nothing much except modern practice and some type safety/correctness... personally i would prefer `enum class` whenever possible.,0,0,0,0.8298877477645874,0.942947268486023,0.92659193277359,0.0,accept,unanimous_agreement
164301209,7610,well ok... the cleanup can be done later.,0,0,0,0.9740851521492004,0.939887762069702,0.9521106481552124,0.0,accept,unanimous_agreement
164303769,7610,"ok, use `enum class` now.",0,0,0,0.988932490348816,0.9908350706100464,0.994882345199585,0.0,accept,unanimous_agreement
170721899,7610,this should be `qstring::number(compat_api_version)`,0,0,0,0.988108456134796,0.9936770796775818,0.9955417513847352,0.0,accept,unanimous_agreement
170721973,7610,use `qstring::number`,0,0,0,0.9858186841011048,0.9928009510040284,0.9950910806655884,0.0,accept,unanimous_agreement
419148054,12746,"i think we still don't agree we should drop it and you should leave these decisions to maintainers, they will drop it themselves when they think they will not maintain it. so please don't argue with this and also same for boost. these core library decision should be left on those who actually maintain it",0,0,-1,0.8770643472671509,0.9572741985321044,0.894334614276886,0.0,accept,majority_agreement
419148201,12746,i think we require space between if and following bracket `if (unix)`,0,0,0,0.98776775598526,0.9851796627044678,0.9890311360359192,0.0,accept,unanimous_agreement
419148952,12746,i think -frtti and -fexceptions are both enabled by default.,0,0,0,0.9880391955375672,0.9878479242324828,0.985153079032898,0.0,accept,unanimous_agreement
419149029,12746,all these defined will be added automatically,0,0,0,0.9837309122085572,0.991024613380432,0.995928943157196,0.0,accept,unanimous_agreement
419154854,12746,"indeed. also i checked the documentation for all of the flags, and came to the following conclusions: - `wno-long-long` is also useless for us - i noticed `wnon-virtual-dtor` is part of a larger `weffc++` suite of errors in gcc. i tried enabling that instead, but got spammed with errors. perhaps we could benefit from the suggested fixes, but it does not seem worth it to enable `weffc++` globally by default, so i just left `wnon-virtual-dtor`.",0,0,0,0.9409200549125672,0.8990842700004578,0.9143512845039368,0.0,accept,unanimous_agreement
419155663,12746,"fixed all remaining instances of this (although i'm personally not a fan of this convention, since it is different that `endif` and `elseif`).",0,0,0,0.974884033203125,0.7491506338119507,0.984317183494568,0.0,accept,unanimous_agreement
419155955,12746,"like i said in the op: i was running into problems with vcpkg rejecting packages with incompatible minor versions. this was the simplest way i found to ""fix"" the problem for now, while i focus on everything else. once other things are ready, this will be revisited, and i'll see what are the minimum set of changes required to support both series if needed.",0,0,0,0.75328129529953,0.966816246509552,0.9583590626716614,0.0,accept,unanimous_agreement
419156583,12746,"are you sure? my impression is that unless you specify `ntddi_version`, `_win32_winnt` and `_win32_ie` manually with the appropriate version, then it is not guaranteed that the executable will work all the way back to windows 7. but i may be wrong or there may be a better way to do this. do you happen to know how? regarding the other definitions, how can i check if they are being added automatically without trial-and-error?",0,0,0,0.917637825012207,0.9791410565376282,0.9806404113769532,0.0,accept,unanimous_agreement
419227401,12746,let follow the following style: [code block],0,0,0,0.9876470565795898,0.9910961389541626,0.9953286647796632,0.0,accept,unanimous_agreement
419227730,12746,let use consistent names for options (either with or without qbt_ prefix).,0,0,0,0.9881891012191772,0.9935804605484008,0.9916298985481262,0.0,accept,unanimous_agreement
419228616,12746,why did you drop `optional_compile_definitions` use? it adds corresponding compiler definition as well.,0,0,0,0.9871751666069032,0.9949626922607422,0.9923835396766664,0.0,accept,unanimous_agreement
419514727,12746,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
419515049,12746,fixed (now nothing uses the qbt prefix),0,0,0,0.9865569472312928,0.994025945663452,0.9925649166107178,0.0,accept,unanimous_agreement
419517707,12746,"because i wanted to decouple the logic of adding compile definitions from the top-level cmake file. now the compile definitions are added in the relevant places, depending on the feature. this makes it easier to migrate to a more target-based approach later across all components (e.g using `target_compile_definitions` instead of `add_compile_definitions`).",0,0,0,0.9863470196723938,0.9942289590835572,0.9883466362953186,0.0,accept,unanimous_agreement
419787497,12746,"is this one of your temporary changes or so you can remove the checks for versions under 1.60? if this is not a temporary change, this should be in a seperate pr that updates the build requirement here, other scripts and readmes.",0,0,0,0.9886531233787536,0.9946993589401244,0.9947911500930786,0.0,accept,unanimous_agreement
419788949,12746,`elseif (msvc)`,0,0,0,0.98545640707016,0.992583394050598,0.9943830966949464,0.0,accept,unanimous_agreement
419790973,12746,"nit: if this stays in a large patch, i'd prefer the variable name here to match the casing that the library uses: requiredopensslversion -> requiredopensslversion this is my personal preference though, so probably wait for a maintainer comment first.",0,0,0,0.9847411513328552,0.9907588958740234,0.9891581535339355,0.0,accept,unanimous_agreement
419791541,12746,"~i would also prefer correct/consistent casing here too, so either use zlib as the package name (i'm not sure if a lowercase first letter would violate any 'standards', but i would propose to use zlib if it doesn't) or match the case in the requiredzlibversion variable.~",0,0,0,0.9330347180366516,0.99152410030365,0.992889404296875,0.0,accept,unanimous_agreement
419794518,12746,~shouldn't this be true already?~ ~[a link] ignore.,0,0,0,0.9023481011390686,0.9862989783287048,0.980839729309082,0.0,accept,unanimous_agreement
419796974,12746,"this condition is too broad, you should be checking against msvc. i would also move this to its own if block.",0,0,0,0.9574300050735474,0.930595338344574,0.9747878313064576,0.0,accept,unanimous_agreement
419797831,12746,why did these move from the top cmake file?,0,0,0,0.9696189761161804,0.9903886914253236,0.9924331903457642,0.0,accept,unanimous_agreement
419801768,12746,"it's temporary, like all other version bumps.",0,0,0,0.5538479685783386,0.9838178157806396,0.9773572087287904,0.0,accept,unanimous_agreement
419802959,12746,"here, this is a compile definition, it's passed as `-dwin32` to the compiler.",0,0,0,0.9891353845596312,0.9923077821731568,0.9933122992515564,0.0,accept,unanimous_agreement
419803525,12746,"part of the effort to decouple anything related to adding compile definitions, adding compile options, include directories, etc. from the top-level file. this should make the transition to `target_*` commands in the future simpler.",0,0,0,0.9874750971794128,0.994045078754425,0.9896169900894164,0.0,accept,unanimous_agreement
419804104,12746,"right, totally did not realize where this was.",-1,-1,0,0.8852170705795288,0.8922504782676697,0.842681348323822,-1.0,accept,majority_agreement
419805885,12746,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
419806013,12746,for now i decided to make the casing consistent like you said.,0,0,0,0.9826670289039612,0.9800519943237304,0.9910056591033936,0.0,accept,unanimous_agreement
419806057,12746,"for now i decided to make the casing consistent like you said. edit: actually, i have to leave it as is because it does not work otherwise.",0,0,0,0.9528862237930298,0.9595606923103333,0.9885607361793518,0.0,accept,unanimous_agreement
419806126,12746,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
420558482,12746,i don't think power-management should be optional in case when dbus is available.,0,0,0,0.9757678508758544,0.9806477427482604,0.9589018821716307,0.0,accept,unanimous_agreement
420558610,12746,seems it should be another `if` block.,0,0,0,0.9858210682868958,0.9915116429328918,0.9804332852363586,0.0,accept,unanimous_agreement
420641552,12746,i made the same suggestion earlier,0,0,0,0.9842151999473572,0.9721742868423462,0.9602725505828856,0.0,accept,unanimous_agreement
420732177,12746,"you really don't think you need `/mp` here, i never tried looking for this particular flag in build files but all cmake generators supporting parallel compilation works out of the box without any problem",0,0,0,0.9639813303947448,0.9665505290031432,0.9739425182342528,0.0,accept,unanimous_agreement
420733848,12746,"`unicode` may be helpful, but i don't really you think we need other flags anyway",0,0,0,0.9754835963249208,0.9653332829475404,0.9833279848098756,0.0,accept,unanimous_agreement
420873722,12746,"if you mean that cmake sets the ""flag that enables parallel jobs int the build tool"" to the optimum value automatically based on the the number of logical processors of the machine, that's correct. however, for vs generators that refers to the `/m` flag of msbuild, which just means multiple projects will be built at the same time, not multiple compilation units. `/mp` must be passed to the compiler directly, not the build tool, for multiple compilation units to be compiled simultaneously. see the relevant section: [a link] this is corroborated by my own benchmarking (these durations are only meaningful for relative comparison): - vs 2019 generator with `/mp` forced: ~3:35 minutes - nmake jom generator: ~3:10 minutes (note how it's still a touch faster than the vs generator; but this could be related to the fact that i called it on cmd vs powershell 7, where there could be extra overhead. on cmd, even the cmake configure invocation, testing compilers, etc seemed to be snappier/faster) - vs 2019 generator (no matter the value set in `--parallel` in the cmake build command line/): 8+ minutes when using `/mp` vs not using it, i can see the difference in duration, in the cpu usage, in the number of simultaneously spawned compiler processes, and even the sound the pc fan makes. i encourage you to try it out for yourself, maybe i'm doing something wrong. here are the commands i use (in a windows 10 vm with the latest vs2019 toolchain): [code block]",0,0,0,0.9826070666313172,0.988375186920166,0.9925326704978944,0.0,accept,unanimous_agreement
420878943,12746,i did it this way initially because i thought `if/elseif` makes more sense than `if/if` since these are mutually exclusive and related to the same thing (the features available on different platforms).,0,0,0,0.9832438826560974,0.990174412727356,0.988593578338623,0.0,accept,unanimous_agreement
420880243,12746,"currently it's optional, but turned on by default (as long as dbus is also on, if dbus is off, it's always turned off). why not give the users the possibility to turn it off? everything else seems to be in place for that.",0,0,0,0.9849945902824402,0.9927138686180116,0.9875391721725464,0.0,accept,unanimous_agreement
420978823,12746,what's the point to make such subfeatures to be optional? what's benefit in disabling it in compile time?,0,0,0,0.9566084146499634,0.9897828698158264,0.9578680396080016,0.0,accept,unanimous_agreement
421122715,12746,"because this is what the script was doing before, but through ""spooky action at a distance"" - i just made it a user-configurable option. [a link] do you think in this case the choice does not make sense at all?",0,0,0,0.83966064453125,0.974478244781494,0.97516530752182,0.0,accept,unanimous_agreement
421248079,12746,"do you think in this case the choice does not make sense at all? i think it doesn't make sense. this option should be always enabled when all necessary stuff (e.g. dbus) is available. here is my general opinion. you need to distinguish between different types of ""optional"" features. some of them are optional because it makes sense to disable them at the user's choice (for example, gui mode). some others are optional because they require some additional dependencies, but we can do without them if these dependencies cannot be satisfied for some reason (e.g. ""power management""). you must be mistaken. it simply disabled the feature if there were unsatisfied dependencies.",0,0,0,0.960148274898529,0.9635462760925292,0.6356034874916077,0.0,accept,unanimous_agreement
422512866,12746,"understood, fixed.",0,0,0,0.9735269546508788,0.9717255234718324,0.8930884003639221,0.0,accept,unanimous_agreement
422513230,12746,the x11 package is probably not required. i was mislead by the source file names.,0,0,0,0.5895630121231079,0.7567431926727295,0.9605945348739624,0.0,accept,unanimous_agreement
422514665,12746,so it would seem. i looked at the files and they only `#include` qt stuff.,0,0,0,0.985260248184204,0.9856044054031372,0.9891282916069032,0.0,accept,unanimous_agreement
422514734,12746,source file names were probably borrowed when i ported this feature from other soft (i don't remember from which one). it looks like they should have a different suffix (`dbus`).,0,0,0,0.9865641593933104,0.9925813674926758,0.9925222992897034,0.0,accept,unanimous_agreement
422517715,12746,fixed. also fixed and include that was causing the build to fail: [a link] backport here: [a link],0,0,0,0.9876185655593872,0.989263355731964,0.9927905797958374,0.0,accept,unanimous_agreement
422518454,12746,"after reading up on it some more, looks like at least `win32` (automatically added by cmake) and `_win32` (automatically added by msvc compiler - [a link] are redundant, so i removed them.",0,0,0,0.988280951976776,0.9931809306144714,0.9892203211784364,0.0,accept,unanimous_agreement
423648919,12746,"docs says it will not affect any other ""normal"" generators like jom, nmake or ninja, since they do individually call compiler for each unit as far as vs generator is concerned one can add this through the visual studio's option box, let the user handle it.",0,0,0,0.987495481967926,0.9913631677627563,0.9918402433395386,0.0,accept,unanimous_agreement
423975234,12746,"i'd rather not rely on the vs gui - right now it's possible to fully build the project with vs generators without using the gui at all. i guess i'll add an exception for vs generators. the advantage of vs generators on windows is that they seem to ""just work"" with any shell, whereas ninja/nmake/jom only work if i specifically use the ""developer command prompt"" or otherwise add all relevant paths (for `cl.exe`, for example) manually to `path`.",0,0,0,0.9794036746025084,0.9888924956321716,0.9684330821037292,0.0,accept,unanimous_agreement
424079594,12746,"this is unsafe, `list(append` is the right choice. it is unsafe because you need to prefer system-supplied modules, because distributions can patch them to account for distribution- or even site-specific peculiarities.",0,0,-1,0.622308611869812,0.9232641458511353,0.4991492927074432,0.0,accept,majority_agreement
424079816,12746,this was the correct way to go.,0,0,0,0.9692501425743104,0.9838846921920776,0.9475501179695128,0.0,accept,unanimous_agreement
424080609,12746,~it's currently `set(cmake_module_path ${cmake_current_source_dir}/cmake/modules)` right at the top of the file. you expect qbittorrent to need more than one module directory?~ [a link],0,0,0,0.9871413707733154,0.994870901107788,0.9950940608978271,0.0,accept,unanimous_agreement
424080638,12746,"consider moving that below replacing with `message(status ""project version is: ${project_version}""). will be shorter.",0,0,0,0.988621175289154,0.992384135723114,0.9921154379844666,0.0,accept,unanimous_agreement
424080864,12746,"ah, i see.",0,0,0,0.9332546591758728,0.9587702751159668,0.9666144847869872,0.0,accept,unanimous_agreement
424081532,12746,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
424084056,12746,"they are slightly different. the `$project_version` cannot include `(${qbt_ver_status})`. to be fair, this is something i would change about qbittorrent, along with the `qbt_version_2`/`qbt_version` ""duplicate"" defines, but that's not up to me, at least not in this pr.",0,0,0,0.9610697627067566,0.986275315284729,0.9819177985191344,0.0,accept,unanimous_agreement
424368345,12746,"ok, now `/mp` only gets appended to the compile options when using vs generators.",0,0,0,0.9883484840393066,0.9935908317565918,0.9930152893066406,0.0,accept,unanimous_agreement
426101657,12746,sorry for repeating; this chunk has to be packed in a findlibtorrentrasterbar.cmake file and put in the modules dir. distributions should be able to provide their own version of find packages.,-1,-1,-1,0.98804771900177,0.9901925325393676,0.9718681573867798,-1.0,accept,unanimous_agreement
426102331,12746,"in that case, will it still be used preferentially over any other `findlibtorrentrasterbar.cmake` in the system unless the user overrides that? or is there something more that i must do to obtain that behaviour?",0,0,0,0.9821107983589172,0.9943709969520568,0.9936500191688538,0.0,accept,unanimous_agreement
426102716,12746,"no, that the point: the system one has to be preferred.",0,0,0,0.9783726334571838,0.9562382698059082,0.9847134947776794,0.0,accept,unanimous_agreement
426104632,12746,"i don't see why. this code does not do anything special to find the package, it just finds the config file and lets that do the magic. the system is free to provide/give preference to whatever `libtorrentrasterbarconfig.cmake` it sees fit. i think this is the sanest way: do as little as possible, trust the provided config files (because this is most likely the best for the system). so imo our way of _finding_ should be the default. the system's way of finding should be the fallback (automatically), but the user should also be able to override this order and prefer the system's way of finding regradless, via a variable or possibly a feature. the fallback is useful for cases when, for example, libtorrent is not built with cmake.",0,0,0,0.8105134963989258,0.9224599599838256,0.8393452763557434,0.0,accept,unanimous_agreement
426105939,12746,"libtorrent might be built with b2, autotools or cmake. the config file will be installed only by the latter one, but that's a side note. for a distribution it is much easier to patch the find module file which comes with the libtorrent itself then duplicate required changes in each client package. if you want to make their life easier (in other words: if you want them to prefer cmake build for qbt) you put the _whole_ find chunk into a module and leave only a single `find_package()` call in the build script.",0,0,0,0.9850581884384156,0.9901661276817322,0.9903580546379088,0.0,accept,unanimous_agreement
426150056,12746,why not `file(copy`?,0,0,0,0.982650339603424,0.9886971712112428,0.9933211207389832,0.0,accept,unanimous_agreement
426150380,12746,seems reasonable. distribution can provide more reliable way to find its packages.,0,0,0,0.9423090815544128,0.9576749205589294,0.976709008216858,0.0,accept,unanimous_agreement
426202595,12746,because it is my impression that it cannot use generator expressions? but please correct me if i'm wrong.,0,0,0,0.6539746522903442,0.6640596985816956,0.9778937101364136,0.0,accept,unanimous_agreement
426202894,12746,"ah, yes, you are right... but why do you need `$ ` there?",0,0,0,0.971439778804779,0.9231656789779664,0.9836408495903016,0.0,accept,unanimous_agreement
426276211,12746,"i don't understand this whole thing. the system findlibtorrentrasterbar.cmake is already being used, this code merely says ""if findlibtorrentrasterbar.cmake isn't found, try to use pkg-config instead"". why is this objectionable? when does this prevent the distribution from providing their own findlibtorrentrasterbar.cmake or patching the system one?",-1,-1,-1,0.6124472618103027,0.7093360424041748,0.8988280892372131,-1.0,accept,unanimous_agreement
426282201,12746,"the point is that all ""find libtorrent"" logic should be encapsulated in findlibtorrentrasterbar.cmake (either system or project, user etc.) so there is single find_package call should be in project file.",0,0,0,0.9894936084747314,0.9951100945472716,0.991361916065216,0.0,accept,unanimous_agreement
426285763,12746,"this is some pretty abstract, confusing logic. if i understand you correctly, then these lines here: [code block] should be moved to modules called e.g. [code block] and invoked as find_package(zlib) to resolve ./cmake/modules/findzlib.cmake which in turn resolves /usr/share/cmake-3.17/modules/findzlib.cmake. but in that case, find_package(zlib) is also a module lookup functionality, so it too should be moved to a module in cmake/modules/. how many times do we recursively factor this out? what's the objective in doing so repeatedly? what's the objective in your proposal to do so even once? if the objective here is to make distros able to override the functionality, then since a findlibtorrentrasterbar.cmake is *always* used, they just provide one and have done with. you can factor this out *zero* times as in the current pr and it still works as expected. if you're introducing additional motivations that doesn't have, please say so as i'm a bit confused here.",-1,0,-1,0.756953775882721,0.712816059589386,0.9061430096626282,-1.0,accept,majority_agreement
426286364,12746,this.,0,0,0,0.9677181839942932,0.977648675441742,0.9696437120437622,0.0,accept,unanimous_agreement
426287306,12746,"so just to be clear: is all actually completely wrong and you're retracting those statements? i.e. this is about the neatness of factoring internal logic into separate, composable files? meanwhile anyone who is interested in changing how qbittorrent is detecting libtorrent-rasterbar will not be modifying `./cmake/modules/*.cmake`, they will be modifying `/usr/share/cmake-3.17/modules/*.cmake`? or somewhere else on the cmake modules path which is external to qbittorrent?",0,0,0,0.9712064266204834,0.9789591431617736,0.9415470361709596,0.0,accept,unanimous_agreement
426287887,12746,true. true. true. true. true.,0,0,1,0.9192390441894532,0.9208564162254332,0.7613903284072876,0.0,accept,majority_agreement
426326833,12746,because of: [code block] in `src/app` cml. it is super convenient for single- and multi-config generators alike. binaries produced by different configs end up in separate folders for each config. `qt.conf` is supposed to be in the same directory as the executable.,0,1,0,0.9844671487808228,0.5192837715148926,0.9134105443954468,0.0,accept,majority_agreement
426332927,12746,"-schwartz am i missing something? you don't need to duplicate changes. i see 2 cases: - the distro can provide a single `findlibtorrentrasterbar.cmake` for all possible client packages. it does not matter if it is patched or not or shoots fireworks. this code will find it and use it. - the distro has to provide a certain way of finding libtorrent for package a, and a different, possibly mutually exclusive way, for finding it for package b, independently of the default way. in that case, wouldn't they have to put each of the different `findlibtorrentrasterbar.cmake` into each package's cmake modules dir, so that it gets picked up in preference to the system's? this code will find it in the project's cmake modules and use it preferentially. in either case if finding fails at first, `pkgconfig` is tried next.",0,0,0,0.9508357048034668,0.9737309217453004,0.8219431042671204,0.0,accept,unanimous_agreement
426337954,12746,"if you do not understand why encapsulation is important i see a little sense to interfere. to give you a hint, that bullshit which you wrote with faked packages will scary off sane persons and it does not even work properly.",-1,-1,-1,0.9618254899978638,0.9078223705291748,0.9610211849212646,-1.0,accept,unanimous_agreement
426356491,12746,"why do you separate it? `pkgconfig` is yet another ""find package"" way. ""finding fails"" means (should mean!) cmake cannot find package in all defined ways (including `pkgconfig` way if it is supposed to be used).",0,0,0,0.9733364582061768,0.9876115918159484,0.9887700080871582,0.0,accept,unanimous_agreement
426752944,12746,"first off, maybe other people you know write bullshit, i don't. i'm human though, so sometimes i make mistakes or do things in a sub-optimal way. when that happens, i expect people to provide constructive criticism, so that i may learn with the mistake and do better next time. so far i have solved every review you posted, and taken your suggestions into account. sometimes i was doing things the wrong way, you suggested a better one, i recognized it, and did it that way (the `alias` thing, for example). that's how it is supposed to work. so how about actually explaining calmly what is wrong with that part? in my testing it seemed to work well. my instinct does tell me it feels rather hacky, but it is the simplest way i found to get `libtorrent` to show up in the feature summary when found by pkgconfig. otherwise, the only indication that pkgconfig gives that it found `libtorrent` is a single output line in the beginning (near the ""found working compiler"" noise that ""disappears"" into scrollback). so please, explain where/when exactly it does not work and/or how it can be done better, instead of insulting, because i think nobody wants to go down that road. again, unnecessary insult. i do understand encapsulation and want to move towards it. if this is still about our previous discussion, i have already told you that truly encapsulating the logic in qbittorrent's cmake scripts will happen in a later pr. there are enough changes as it is for now, it will already be a pain in the ass to organize this neatly into separate commits just to have a clean and clear structure of commits. that being said, it's not like this pr doesn't move towards more encapsulated logic at all, anyway, it does. it's just that the big push for it has to come later, after a solid foundation is laid out. if you're convinced that i don't understand the principle of encapsulation, then i'm convinced you don't understand the principle of least surprise. originally, you defended the ""find package x -> enable feature y as a side-effect"" practice by claiming that's how kde (or some other high-profile project using qt + cmake) does it (for example, ẁith the `qt5widgets` package and a gui feature). it's good to take inspiration from ""authoritative"" sources, but one must always consider some ""done things"" may not be best practices even in these projects. all projects have technical debt, and sometimes they survive and thrive in spite of certain design decisions, not because of them. i believe this is the case for ""features by package found side-effect"". qbittorrent's cml is moving on from that paradigm, and i believe everyone is convinced it is technically the better option. even in libtorrent, recently, the topic resurfaced, and is to be handled at a later date. it is obvious you have great experience with cmake, but you are not impervious to making mistakes. in the example `findlibtorrentrasterbar.cmake` file you wrote (in the libtorrent repo), there is this: [code block] more surprises. the user doesn't even get warned that this happened. they would have to go look up this comment. imo the more sane option would be to fail and inform the user that they should manually pass something like `-dlibtorrentdefs=...` and just check for the existence of that variable. or just tell them to fix their pkgconfig config/cmake config files and try again. why do you separate it? `pkgconfig` is yet another ""find package"" way. ""finding fails"" means (should mean!) cmake cannot find package in all defined ways (including `pkgconfig` way if it is supposed to be used). the goal is to only use the cmake config files like `libtorrentrasterbar.config` first, and then pkgconfig if necessary. if the distro has a special need not covered by this they are free to write their own `findlibtorrentrasterbar.cmake`, put it in the cmake/modules folder, and that will be used instead. i don't think _we_ should concern ourselves with that. and besides, what exactly is the case where a distro packages libtorrent, but in such a way that it does not include the cmake config file _and_ doesn't work with pkgbuild, anyway?",-1,-1,-1,0.8542952537536621,0.7562999725341797,0.6804971098899841,-1.0,accept,unanimous_agreement
426782808,12746,"i'm sorry, i'm tired of standing in one place... i really don't understand why you don't want to encapsulate all this logic in single module as it's expected?",-1,-1,-1,0.988061547279358,0.9928721785545348,0.996086359024048,-1.0,accept,unanimous_agreement
426799326,12746,"i would also rather not be stuck in this discussion, but here we are. i don't see what logic there is to encapsulate. the current code just trusts whatever `libtorrentrasberbar.config` or `findlibtorrentrasterbar.cmake` it finds in the system. those are the files that do the actual heavy lifting in the sense of encapsulating the logic of finding out definitions, compile options, etc, and other metadata of the library that's needed to successfully link to it. presumably, a distribution will include `libtorrentrasberbarconfig,cmake` in their libtorrent package, so that will be used. if they have special needs, they can provide a specific `findlibtorrentrasterbar.cmake` with the qbittorrent package, and that will be used instead. if none of the previous two cases applies, pkgconfig is used to discover the required metadata. the current code is not a find script nor pretends to be one; it just says ""try to use an actual find script/config, and if that does not work, try pkgbuild"". at most, this code could be factored out to a separate macro or function. calling it and treating it like find script logic is misleading imo. furthermore, here is what i think, related to my second bullet point here: [a link] which has not been addressed thus far: imagine if every client package of `libtorrent` provided their separate `findlibtorrentrasterbar.cmake`. over time, they would diverge, some would be somewhat unmaintained, and it would be hell for the distro maintainer to try to figure out how exactly to package libtorrent in such a way that no client package breaks. or they'd have to patch all the find scripts, carefully. on the other hand, if the onus of providing a good and flexible `libtorrentrasberbarconfig,cmake` or pkgconfig metadata falls on the library itself, the logic on the client packages can be much simpler (boils down to ""trust the cmake config files/pkgconfig metadata you find in the system""), and the maintenance burden is lightened. the maintainer just has to patch the client packages that don't work with what the library provides by default. fortunately, i find that as far as libtorrent is concerned, the generated cmake config files/pkgconfig metadata are quite good.",0,0,0,0.9344457387924194,0.955726146697998,0.5685288310050964,0.0,accept,unanimous_agreement
426804066,12746,", pkg_check_modules() is an **alternative** to find_package(), they're two completely different ways to define a cmake ""imported target"". either one under the hood simply calls add_library(... imported) and sets interface properties on it. while it could, i suppose, be `include()`d from cmake/modules/, it doesn't seem unambiguously obvious to do so, and this entire discussion is explicitly about distributing it as a ""find"" package anyway.",0,0,0,0.9794953465461732,0.9891988635063172,0.9752045273780824,0.0,accept,unanimous_agreement
426805881,12746,", everyone, i believe, has a right to produce bullshit and name their own or somebody else one to their liking. it fails if pkgconfig finds no libtorrent package, it fails if libtorrent version is too new and unsupported. what's wrong with it is that it creates problems because you don't want to follow the standard way for locating packages. i maybe don't have enough experience with large software built with cmake, but what i learned from more than 10 years of running gentoo on my laptops is that a foss project build system is not the place to exercise abilities to create and invent. builds happen in unpredictable environments and fail more often that developers think. those who install software have no time or crave to study another non-standard build script to compile that piece of software when something does not work. because this is not the type of think explained in a wiki or readme (unlike build options). if projects follow similar patterns life of those who install software can be much easier. find modules for cmake is one of the strongest patterns of that kind. find module + `find_package_handle_standard_args()` is the simplest way. then do it, please. ... ruining encapsulation :) totally controlled by ones preexisting experience. i built kde for god knows how many times, that had its impact, perhaps. well, i use windows only to launch steam. have no idea what are the best practices there.",-1,-1,-1,0.9760896563529968,0.9640908241271972,0.8455871939659119,-1.0,accept,unanimous_agreement
426808317,12746,"you're doing a truly terrible job of communicating your intentions. i told you i was interpreting your statements as mutually contradictory, asked you to clarify your meaning as to what ""the point"" is, and you simply replied with some ""true. true. true."" gimmick which i can only assume is supposed to be terribly witty. and apparently you also cannot stand to explain yourself to either, so once again instead of taking the opportunity of having a discussion to, well, ""discuss"" things, you just smear insults across the screen. i'm left wondering why you bother to be here. ... i still do not understand your first argument in favor of splitting out the ""try to find an external provider of libtorrent-rasterbar"" logic, because you say it is in aid of linux distributions (or other consumers, one must suppose) replacing the logic with their own logic. this is, to my understanding, nonsense, because anything used to replace said logic would trigger the find_package() invocation. on the other hand, it is nonsense anyway, because i am a linux distribution (i package qbittorrent, among other things, for ) and i assure you if we're modifying detection logic for any sort of dependency we are going to do it in the exported interface of the dependency itself. with a strong preference for pkg-config, but if we absolutely must use `*.cmake` files, we're going to ship it with the dependency itself, not with qbittorrent's sources. we also have a strong expectation that if a package provides both `*.cmake` files and pkg-config files, either one must be sufficient to link to it. so please don't tell me that your advice to refactor these lines into their own file is motivated by your desire to do me a personal favor. it's completely pointless because we don't care one way or the other, and never will. please don't even tell me that's *one* of your motivations.",-1,-1,-1,0.9901220202445984,0.9869747161865234,0.9945806860923768,-1.0,accept,unanimous_agreement
426901309,12746,"you have the right to say whatever you want. but what you said was uncalled for in the context/moment that you said it. thus far we had a nice back-and-forth going, where i have been listening to every single criticism. then you took a piece of code that you had never indicated you had a problem with previously, and called it ""bullshit you wrote"", without even asking what the motivation for it could have been or suggesting changes beforehand. it came across as a hostile action, which will can only be met with hostility. ok. how many times do i have to tell you that will be done **after this pr**? do you think it will be harder to move towards more encapsulated logic _after_ these changes? how can that be? previously there was even global `cxx_flags` manipulation going on, how were the previous scripts easier to work with for this future purpose? same here. there is only one machine where i have windows installed on bare metal, and even then it's a dual-boot configuration with ubuntu. i use that windows install just for certain games that don't run well (or at all) with proton/dxvk. but recently i also setup a windows vm in ubuntu, as a clean environment for building and testing qbittorrent on windows. this is because i recognize that the majority of qbittorrent's user base is on windows, and so whether we like it or not, improving the building process, release automation, etc for that os is essential for the project. so, in addition to testing these changes on linux, i'm doing my best to test them thoroughly on windows. but this is, in principle, not a potential problem exclusive to windows anyway. pulling definitions out of thin air and not telling the user if that happens, as if they had been found normally, is for sure a bad practice no matter the system. especially when the library in question is so picky about them, as is the case with `libtorrent`. that's exactly what is supposed to happen if no suitable pkgconfig file is found, but the ""fake package"" code is not even reached in that case anyhow, the build fails right at `pkg_check_modules`: [code block] good, qbittorrent does not support libtorrent >1.2.x at the moment (in fact, in practice it _only_ supports 1.2.x at the moment). in the future this can be changed of course, as the supported versions change. i'm relying on finding a suitable `libtorrentrasterbarconfig.cmake`, which is as standard as it gets, no? the pkgconfig fallback is a convenience for linux distros that don't build libtorent with cmake (which means no `libtorrentrasterbarconfig.cmake` is produced), because they will almost for sure have pkgconfig at least. and even still, the user may place a custom `findlibtorrentrasterbar.cmake` in the project's module directory and that will be used instead. in fact,the pkgconfig fallback was added at the request of -schwartz ([a link] it seemed reasonable enough, and to be honest, i think if an actual package maintainer from a ""big""/""mainstream"" distribution (who actually packages qbittorrent, no less) agrees that this is the right way to do it (and further justifies why this is, [a link] because one should not blindly follow/trust an ""authoritative"" source), you'll need to provide really convincing counter-arguments to go against that, or find another package maintainer who can do so.",-1,-1,-1,0.7111729383468628,0.713086724281311,0.9523884654045104,-1.0,accept,unanimous_agreement
426909671,12746,"sorry for that. i see no contradiction and i thought from my reply it was clear. for a discussion to take place the subject has to be of interest for both sides the internet is full of vagabonds, why can't i be one of them? let me recollect what we were talking about. there are two points that are related to the topic: 1) append local module path to the directory list and 2) put the whole chunk of the ""find installed libtorrent and create imported target"" into a special file, called ""findlibtorrentrasterbar.cmake"". the first one is reasoned by the replacement logic, because otherwise local files will be used, and i can still find a dozen of packages in the gentoo tree that require actual removing of their in-tree find modules in order to compile. the second point is rational due to the general principles of managing things in software, because of the way the find_package is implemented in cmake, and because that way is the simplest for distribution. a find module in cmake, despite the fact that it is usually implemented as a plain code file, is, in fact, a function with the convention about its interface. its input parameters are well defined, and its output for cmake is also standard (albeit extensible). the body of this function, except trivial cases, is rather complex because it has to handle a lot of nuances. most of these nuances arise from various distribution methods, naturally, and are a dead-weight in any given case. therefore this code has to be encapsulated under the well defined interface of `find_package()`. why is this helpful for distributions too? because the place where you need to look for dependencies looks clean and simple. yes, i understand that and just a few days ago submitted a pr to libtorrent to make it install its find module. as you wish, but i use the linux ecosytem too, and care for it. yeah, it shows. the abs is the least functional package build system i ever used. but again, after portage and exheres nothing impresses.",-1,-1,-1,0.9896841049194336,0.9898365139961244,0.9791628122329712,-1.0,accept,unanimous_agreement
426923593,12746,"if you take that personal, i beg your pardon. this is not true, you were told by me and to wrap that part into a file (where you, so to say, took it from). i see no problem in that. you are not going to kill somebody because of that, right? pr are supposed to bring improvements, right? but here it is a step back in this regard for no reason. i do not defend that code. i just see no reason to destroy other things when you don't have to. this is great, of course. i'm absolutely ignorant with regard to development trends in the windows word and no vm can help me... exactly because of that there was this line in the find module: [code block] exactly. what to do in that case? windows users have no pkg-config and might have no libtorrentraterbarconfig.cmake. macos too. yes, but it's implementation is what is non-standard in case of libtorrent. i don't think it's a way to go. why do i need to write such a file from scratch when there are only three bits are required: library location, includes location, the set of configuration defines? you can easily provide a template for this case. it was there, you deleted it first to add later. may i skip this, please? thankfully, libtorrent will install a proper find module with pkg-config check.",-1,-1,-1,0.9026597738265992,0.811152458190918,0.9548205137252808,-1.0,accept,unanimous_agreement
426954644,12746,"so funny xd. sad to see a classic ""i'm sorry, but..."". we both know when you told me to ""wrap it in a find module"", `it` referred to the whole chunk of code. the ""fake package"" part is just a cosmetic part of it (ultimately not really needed), that makes the information that pkgconfig actually found the package more visible to the user. otherwise, the pkgconfig output disappears in the scrollback. you then claimed it did not work in 2 cases, and i have proved that those are not a concern (and not a consequence of the ""fake package"" code itself anyway). there are no steps backward in terms of encapsulation in this pr. if anything, there are steps forward (for example, previously, the function for ""adding features"" also added compile definitions at the source directory level as a result, which is a clear violation of encapsulation in my book; this is no longer the case). but it wouldn't even matter if there were no ""steps forward"". this pr could very well be just a side-grade in terms of encapsulation. the whole point of it is to simplify the whole foundation so that further encapsulation work is made easier for later. in case you ever need this, here goes some advice from what i have learned so far: microsoft provides ready-to-go vms for development/""evaluation"" free of charge with all the relevant development software pre-installed (vs, wsl, ...). you may need to use the vs gui to install some toolchain packages/customize the toolchain packages, but after that, you don't need to use vs or any gui at all if you don't need it for developing/building. granted, using the vs dev console (which is just a shortcut that opens a cmd window with all of the relevant paths pre-set) is not the best experience, but it does the job. hopefully in the future they will flesh out powershell core (there is already some support for plain powershell as the dev console) + windows terminal support. for (much) better build performance, i recommend fully disabling the anti-virus (there are tutorials online for this; requires fiddling with the group policy editor, turning it off in the anti-virus gui is of course not enough and it just turns itself back on next boot anyway because it knows better than you) and the search indexer (searching in the explorer gui sucks anyway, and you can use classic linux tools via wsl or even powershell for all your searching needs). better than nothing for sure, but in my option, i would go more in the direction of: [code block] or even fail the build and force the user to pass an option allowing it to continue (as well as overrides to the default set, optionally). windows users have no incentive not to build with cmake if there is a choice, especially with stuff like `vcpkg` nowadays. windows users have to compile everything from source anyway, what is the difference if they see the cmake way in the wiki page vs. the b2 way? they are just going to follow the steps. both windows and macos decided to be special snowflakes in a lot of ways when it comes to building software especially, it is perfectly reasonable to just force users of those systems to ""just do it this way, it's what works"". can you please elaborate on this? i have found it to work quite well, providing the expected information. you don't need to write a basic template yourself. you just landed a pr in libtorrent that makes it so whichever way libtorrent is installed, the example find module is installed as well: so that will be used if nothing else works (i don't think you even need to copy it over manually to qbittorrent's module directory). true, but more importantly, i only added the pkgconfig back later, not everything else in the find script as well.",-1,-1,1,0.9894630312919616,0.9939058423042296,0.7452270984649658,-1.0,accept,majority_agreement
428023191,12746,"well, if you want to play that game... [a link] [a link] [a link] [a link] the fake package"" part is the result of your decision to put the find- logic into the main script. you just rejected those cases without any rationale. thank you. perfect. let me summarize: there was a working build script that was able to handle various environments and build the project on all the three major oses. you propose to replace that with a new one that is unable to handle macos (can't create bundles), limits windows users to a single installation method, complicates structure of the main build scrip. does it gove something in return? i can't see anything. am i missing something? and that's the problem.",1,1,1,0.9863262176513672,0.9918204545974731,0.8855847120285034,1.0,accept,unanimous_agreement
428055909,12746,"although i am not an advanced cmake user, it seems obvious and logical to me that `pkg_check_modules()` is one of the ways of finding a certain package and getting information about it, whereas `find_package()` is a generalized interface between the main build script and the implementation of searching for a specific package (which can have arbitrarily complex logic and use different methods, including pkgconfig). but if cmake really involves using several (so-called) alternative methods (each of which is not able to do all the work on its own) then i'm even more disappointed in cmake.",0,0,-1,0.918373703956604,0.8775393962860107,0.9754794239997864,0.0,accept,majority_agreement
428082853,12746,"do you just want me to remove the ""fake pakage logic"" completely? [a link] - structure of the main buildscript is much simpler now overall. in fact, in what concerns ""finding libtorrent"", it would just be a one-liner if it did not have the pkgconfig fallback. - windows users were already limited to a single (worse) installation method in practice. see the current ""windows compilation"" tutorial in the wiki. plus it's not my fault that windows does not use `pkgbuild`, otherwise it would not be limited to a single installation method with the new script. - it works just fine in macos: see this comment, and previous related ones: [a link] i did this because i found the previous find script problematic, for the reasons repeated above multiple times. including a fin script with qbittorrent is just more maintenance burden. we will have to keep it updated with the upstream ourselves. seems worse than just automatically trusting the `libtorrentrasterbarconfig.cmake` or pkgcofig files from upstream. --- do you think we should include our own `findopenssl.cmake` as well? because that makes as much sense as what you're asking for. the current code already accommodates all of the common cases: 1. cmake will first try to find `libtorrent` in `config` mode, because of `set(cmake_find_package_prefer_config on)` in the top level cml. this means it will try to use auto-generated `libtorrentrasterbarconfig.cmake` first if possible, which is what we want. 2. if that fails, it re-tries in `module` mode, which means it will use whatever `findlibtorrentrasterbar.cmake` scripts it can find (if available). this could be an entirely custom one, or a default one provided by `libtorrent` itself, _that we don't have to worry about maintaining_. 3. if that fails, it tries the `pkgconfig` method if available, because it is so commonly available in linux distros. now you might ask, ""since the default `findlibtorrentrasterbar.cmake` already happens to search with `pkgconfig`, isn't the 3rd step redundant?"". the answer is yes, it is redundant, but only if you happen to use the default `findlibtorrentrasterbar.cmake`, or a custom one that does the the `pkgconfig` search. such a script might not be available, however, or the user may not want to write it, so the `pkgconfig` method serves as a convenience fallback on linux. we're doing exactly the same procedure with openssl, except that since `findopenssl.cmake` is guaranteed to exist and suit our needs, we just need to `find_package(openssl)`, which really means we only follow the first 2 steps listed above.",0,0,0,0.7010265588760376,0.9582450985908508,0.8844209313392639,0.0,accept,unanimous_agreement
428086629,12746,"becasue findopenssl.cmake is guaranteed to exist, while findlibtorrentrasterbar.cmake will appear with libtorrent 1.2.7 (?). when the minimal required libtorrent version for qbittorrent increases to 1.2.7 or newer, you can drop the local copy of findlibtorrentrasterbar.cmake. so simple.",0,0,0,0.9776749014854432,0.9876827597618104,0.9751036763191224,0.0,accept,unanimous_agreement
428093865,12746,"i also think it makes sense to abstract `pkg_check_modules()` away in a find script, so that it all happens behind the scenes with a single call to `find_package()`, but one must be aware of the trade-offs/consequences: - it is either guaranteed that the `findpakcagexyz.cmake` script will always be available or - you, as the client package, take up the burden and technical debt of bringing along and keeping up-to-date a (possibly customized) copy of some reference `findpakcagexyz.cmake`. or if there is no reference, roll your own. for libtorrent, we have the following case: - it is not guaranteed that `findlibtorrentrasterbar.cmake` exists everywhere. - i don't think we should carry our own copy of `findlibtorrentrasterbar.cmake` and worry about it. that's why i think it's reasonable to follow the 3 steps listed in [a link]",0,0,0,0.9263455271720886,0.9923730492591858,0.9825929403305054,0.0,accept,unanimous_agreement
428100052,12746,"yes, that's what i said. this code works great with or without libtorrent >=1.2.7. i don't want to wait until the minimum required version is 1.2.7.",0,0,0,0.9555445313453674,0.5437908172607422,0.8727198243141174,0.0,accept,unanimous_agreement
431213529,12746,"so, , what is your verdict? i want to merge this and move on.",0,0,0,0.941057026386261,0.9524125456809998,0.9382032752037048,0.0,accept,unanimous_agreement
431223365,12746,"i didn't review it completely... will do it later. but this place seems bad to me. maybe, of course, this is how it should be in cmake... (i'm not an advanced cmake user).",-1,-1,-1,0.9871134757995604,0.9756240844726562,0.9913032054901124,-1.0,accept,unanimous_agreement
431722129,12746,"you will have to change this logic when we start switching to c++17, because we can't require full support here (due to msvc limitations).",0,0,0,0.984375774860382,0.988946259021759,0.9909384250640868,0.0,accept,unanimous_agreement
431870543,12746,isn't it needed anymore?,0,0,0,0.9731304049491882,0.9888118505477904,0.9896644949913024,0.0,accept,unanimous_agreement
431881632,12746,"should you move ""find package"" for all common packages into qbt_base?",0,0,0,0.9889345765113832,0.9955574870109558,0.9948238134384156,0.0,accept,unanimous_agreement
433543462,12746,"looks like the situation is worse than expected; with c++17, this won't even work with gcc or clang either: [a link] honestly at this point it would just be better to hard-code minimum supported versions (e.g. for c++14 that is gcc >= 5.0, clang >= 5.0, msvc >= 19.11.25505). i would prefer if we could postpone this discussion until we're actually migrating to c++17, but let me know if you would prefer this change right here.",-1,0,-1,0.6597999334335327,0.9207736253738404,0.7967642545700073,-1.0,accept,majority_agreement
433546411,12746,"nope. this file was a hack used to map the cmake defines to qbittorrent defines. as an example, it had stuff like: [code block] so if `qbt_use_gui` was not set to `on` in cmake, `disable_gui` and `disable_countries_resolution` would be defined for the purposes of c++ files preprocessing/compilation. now we just do: [code block]",0,0,0,0.9677258729934692,0.9922309517860411,0.9716740846633912,0.0,accept,unanimous_agreement
433547261,12746,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
433549825,12746,"do you mean into the cml file at `src/base`, or just the top-level cml file? i did it this way initially because: - both `src/base` and `src/app` need some of these packages - seemed awkward to have `find_package()` calls in the top-level cml, since everywhere else the calls are only made as-needed, which i think is a good thing. for example, having the `find_package()` calls to the gui stuff in the `src/gui` cml simplifies the logic in the parent cmls (no need for `if(gui) find_package() ...`).",0,0,0,0.8670915961265564,0.9486287236213684,0.9694989323616028,0.0,accept,unanimous_agreement
439839146,12746,can you add `/wd4127` here it produces too much useless noise in the builds [code block],0,0,0,0.8276384472846985,0.9566943645477296,0.8005993366241455,0.0,accept,unanimous_agreement
439844062,12746,"i think it is sensible to have both build systems using the same flags, i.e. you might want to submit a pr changing the qmake part first so that this pr can follow.",0,0,0,0.980529248714447,0.9849889278411864,0.9866928458213806,0.0,accept,unanimous_agreement
439844456,12746,"qmake uses /w3, which has c4127 already disabled so maybe make it /w3 then.",0,0,0,0.9894715547561646,0.9930112957954408,0.9878364205360411,0.0,accept,unanimous_agreement
439844560,12746,i think it is caused by `/w4` which isn't present in qmake build. i would suggest to remove it and rely on the default.,0,0,0,0.987286388874054,0.991851270198822,0.9881585240364076,0.0,accept,unanimous_agreement
439924716,12746,agreed. msvc ide defaults to `/w3` too. [a link],0,0,0,0.9875805377960204,0.933562695980072,0.9746692776679992,0.0,accept,unanimous_agreement
439951415,12746,"well, i finally found the time to test it... and i failed it! more precisely, my test failed from the first steps. i found another drawback of these changes that is ""blocking issue"" for me. your patch broke my development scenario. i need to do parallel development of qbittorrent and libtorrent (i'm making changes to both projects), so i don't have an ""installed"" libtorrent, but only a configured project in the ide (qtcreator) so my main project depends on it and build it first. it's very easy to configure there (especially in the case of qmake, nothing else is required). the initial problem with cmake was that it didn't allow you to configure projects because it couldn't find libtorrent. for the current cmake script, it was easy to get around this inconvenience, i only had to set a couple of cmake variables in the project settings (libtorrentrasterbar_include_dir and libtorrentrasterbar_library), so it didn't search for the package, but just used these values. with this changes i can't use this solution. i get the following message: i'm sorry, i can't approve of it until it is fixed or another solution is presented.",-1,-1,-1,0.8674150705337524,0.6513490080833435,0.8568048477172852,-1.0,accept,unanimous_agreement
439986841,12746,"well, seems it is possible to make libtorrent a part of qbittorrent project itself just by include it. am i right? then we just need to introduce some variable, e.g. libtorrentrasterbar_project_dir, and handle it (when it's set skip package searching and include libtorrent project). can you investigate into it? or do you think about another solution? (i can test it when i have time.) unfortunately the above won't work...",0,0,0,0.586421549320221,0.7840870022773743,0.9094916582107544,0.0,accept,unanimous_agreement
440038720,12746,have you considered [a link],0,0,0,0.9843616485595704,0.9895379543304444,0.9950343370437622,0.0,accept,unanimous_agreement
440093013,12746,"no. i don't know much about cmake. and i don't have enough time to study it in detail. i can try it, of course, but i'm not sure it will work easily. judging by the amount of documentation, it is not so easy to configure... in addition, this is the job of someone who broke the handling of the use case i described above (""satellite projects"" development).",-1,-1,-1,0.8244373798370361,0.8194788694381714,0.9132900238037108,-1.0,accept,unanimous_agreement
440094145,12746,"assuming libtorrent is built with cmake too, one can supply `libtorrentrasterbar_dir` variable when configuring qbt. the variable has to point to the directory containing the libtorrentrasterbarconfig.cmake file (` /libtorrentrasterbar`). this works with any cmake `find_package()` call ([a link]",0,0,0,0.9869818091392516,0.9948543906211852,0.9940252900123596,0.0,accept,unanimous_agreement
440126875,12746,"it won't work in described use case. what i need is the ability to tell cmake that some dependent package is not installed at the time of project configuration, but should be compiled from sources before building the project (or at least trick cmake into believing that the package was found, as i did earlier, and allow qtcreator to handle dependency between projects).",0,0,0,0.9864705204963684,0.9902122616767884,0.99103045463562,0.0,accept,unanimous_agreement
440137984,12746,"i can re-assure you it works exactly as you want, but you need to run configure for libtorrent manually for the first time.",0,0,0,0.9823676347732544,0.9796844720840454,0.9927473664283752,0.0,accept,unanimous_agreement
440149244,12746,"i know it already but it's exactly what i don't want! i just want to perform ""build"" on qbittorrent project and allow my ide to resolve its dependencies. this is something that works perfectly with the native qt build system (qmake). and it should continue to work with cmake on the same principle (configured and forgot).",0,0,-1,0.6971117854118347,0.6652655005455017,0.4807076454162597,0.0,accept,majority_agreement
440151777,12746,"libtorrent does not provide qmake build script. if the build works for in the way you describe, you must have wrote a qmake rule to build libtorrent. if so, why don't you do the same for cmake, the mainstream c++ build system?",0,0,0,0.9847026467323304,0.9876826405525208,0.9922332763671876,0.0,accept,unanimous_agreement
440390709,12746,"hmm, i have set it to `/w3` for now, but looking through [a link] and [a link] there seem to be some level 4 warnings that would be nice to have when building on windows, such as [a link] i think that ideally, we'd use `/w4 /wall`, and then blacklist those that produce too much noise. however, _where_ the noise is coming from is also important. for example, i'd actually like to have warning `c4127`, but only for our code - is there a way to tell that to the compiler? e.g. ""if this warning comes from qt code, ignore it""?",0,0,0,0.9674504399299622,0.9675004482269288,0.934360921382904,0.0,accept,unanimous_agreement
440598537,12746,"i don't think you understand what i'm talking about... here is a description of my workflow (two ways, common things are omitted): 1. create ""solution"" in qtcreator and add two ""project"": cmake-based ""libtorrent"" and ""qbittorrent"" (either qmake or cmake based). 2. configure ""qbittorrent"" to use ""libtorrent"" include dir and built library (using appropriate variables in qmake based project or libtorrentrasterbar_include_dir/libtorrentrasterbar_library in cmake based project - before this pr it also prevents cmake to search for libtorrent package). 3. set ""libtorrent"" project as dependency for ""qbittorrent"" project (in qtcreator project settings). so from now on qtcreator handle this dependency. a piece of cake! and i want it to stay that way.",0,0,-1,0.9625670313835144,0.924704134464264,0.5720570683479309,0.0,accept,majority_agreement
440780062,12746,"i can't see how that differs from the workflow with packagename_dir that i proposed to you above. as an illustration here was my setup with kdevelop: 1. add libtorrent cmake project to a new session or a session with qbt project. 2. configure the libtorrent project to make it generate export targets and package config files in the libtorrentrasterbar subdir of its build dir. 3. if the qbt project was already configured and picked the system libtorrent up, either remove libtorrent variables from the project cmake cache or delete the cache or build dir altogether. 4. (re-)configure the qbt project passing `-dlibtorrentrasterbar_dir= ` 5. ensure libtorrent is placed earlier than qbt in the session build target list. looks pretty match the same for me. or you can go the formal way and create a superbuild project using the externalproject commands, as it was already suggested in the thread.",0,0,0,0.9856225848197936,0.9927888512611388,0.9903811812400818,0.0,accept,unanimous_agreement
441875422,12746,"sorry for not responding earlier, but this thread has gotten quite long and this particular comment chain is starting to get buried, so i only saw this now. as mentioned, if you've built libtorrent with cmake, it is quite easy to use it when building qbittorrent with cmake, whether you ""install"" it or not. according to what i understood of your workflow, you want to build libtorrent and use the files directly from the build dir without ""installing it"". to accomplish this, you can simply point `libtorrentrasterbar_dir` to the libtorrent build dir. for example, if you've built libtorrent like so: [code block] all the build files will go to `libtorrent/cmake-build-dir`, and will be usable in this state (including the cmake config/target scripts), even before you issue the install command. in particular, `libtorrentrasterbarconfig.cmake` will be inside `libtorrent/cmake-build-dir/libtorrentrasterbar` so, when building qbittorrent, you just need to add: `-dlibtorrentrasterbar_dir=""/absolute/path/to/libtorrent/cmake-build-dir/libtorrentrasterbar""` to its cmake configure command line. i imagine setting it up like this in qtcreator should be no problem.",-1,-1,-1,0.9819360375404358,0.9818745851516724,0.9710871577262878,-1.0,accept,unanimous_agreement
442004443,12746,"it's not a problem. the problem is that i require some additional manual actions since this pr... although it's not so big deal. seems qt creator has its own drawbacks (about integration with cmake), so maybe i need to send a couple of bug reports there first. well, even if you don't look at it qt creator integration, there is a more general/serious problem here, which is the inability to use it on windows if libtorrent isn't built with cmake (please correct me if i'm wrong).",-1,-1,0,0.5340982675552368,0.5069355964660645,0.6339277029037476,-1.0,accept,majority_agreement
442135507,12746,"yes, conceptually it's not even a big deal; it's just ""when building cmake project x (qbittorrent) with some specified options, build cmake project y (libtorrent) first with some specified options"". since qt itself is moving to cmake very soon, i would expect a basic flow like this to be easily configurable, if not today, then in the near future. i'm not sure how libtorrent built with `b2` was propagating usage requirements to qbittorrent's qmake build previously. but now, i think the best solution for this is to have libtorrent generate/bundle cmake config files even when built with `b2`, so that it can easily be used in any cmake project. libtorrent is very sensitive to the flags used in its compilation and dependent projects, so automatic usage requirement resolution and propagation is a must. i honestly don't expect anyone building qbittorrent (or any c++ project based on libtorrent) to want to add libtorrent's libdir, include dir, compile flags, defines, etc manually. an existing example of this, actually relevant to us: right now, qt is built with qmake, but it still generates/bundles proper cmake config files. that's why you can build qt yourself (like in the wiki, with qmake) and have it still ""just work"" in cmake projects: [code block] note the `-dqt5_dir=g:\qbittorrent\install_msvc64\qt5\lib\cmake\qt5`. but yes, at present, you're right. until libtorrent's `b2` build generates cmake config files, it is not feasible to build qbittorrent on windows with cmake if libtorrent wasn't also built with cmake.",0,0,0,0.8319018483161926,0.9528284072875975,0.91761714220047,0.0,accept,unanimous_agreement
442146582,12746,because you broke that in this very pr. lol,1,1,1,0.7884707450866699,0.969480574131012,0.9844678044319152,1.0,accept,unanimous_agreement
442152987,12746,"... libtorrent is very sensitive to the flags used in its compilation and dependent projects, so automatic usage requirement resolution and propagation is a must. i honestly don't expect anyone building qbittorrent (or any c++ project based on libtorrent) to want to add libtorrent's libdir, include dir, compile flags, defines, etc manually. you seem to be exaggerating... there is no such big problem here (at least for developers). i've always done it manually. what's the problem with using the same settings to build these two projects? actually, cmake gave me more trouble when i had to make it work correctly (e.g. when it failed to find boost in the folder where it was without any helpful error messages). in any case, i see no serious reason to break supporting libtorrent that is built with something other than cmake (at least as part of current changes).",-1,-1,-1,0.8469403386116028,0.9556209444999696,0.5406965613365173,-1.0,accept,unanimous_agreement
442165238,12746,"let's see what i ""broke"" (quote from the findlibtorrentrasterbar.cmake file deleted by this pr): which is of course an excellent idea - set some important parameters to some values and hope for the best silently, without even informing/warning the user. moving to an objectively better solution is not ""breaking"", it's ""improving"". it just so happens that an improvement is also necessary in libtorrent's side (`b2` builds need to generate cmake config files). i'd like to hear how asking for a library to generate config files for the standard c++ build system when using another build system is not preferable to the previous solution. perhaps we should also open a bug report on qt's bug tracker saying ""hey guys, you know that thing you were doing with the qmake build generating proper, usable cmake config files? scratch that, just publish a findqt5.cmake file, tell everyone that they are expected to copy paste it in their projects (and to keep an eye out for changes :)). oh, and make sure to silently set important variables to arbitrary values to what you think are sane when whatever automatic detection methods you have in place fail, without warning the user."".",1,1,1,0.9126782417297364,0.562961757183075,0.8327434659004211,1.0,accept,unanimous_agreement
442172825,12746,"there are two calls in the findlibtorrentrasterbar.cmake file that make it possible to use it if you are on windows and libtorrent is built with boost build (or in any other situation when the cmake way could not work): `find_path()` and `find_library()` with hints. if you do not understand the purpose of the code are you throwing out, maybe it's time to pause for a while and think a little bit? as to your comment about random libtorrent flags, i can only say it is unrelated to the topic. the closest related think is the`libtorrentrasterbar_custom_definitions` variable in the same file.",0,0,0,0.9050891399383544,0.9489108324050904,0.9669314622879028,0.0,accept,unanimous_agreement
442207877,12746,at least current (master) approach allows you to use any libtorrent distribution and i don't think this is a flaw that needs to be fixed. please extract this change into separate pr if you want to continue this discussion.,0,0,0,0.9822408556938172,0.9824626445770264,0.9859389066696168,0.0,accept,unanimous_agreement
442215549,12746,"i never claimed there was no way of finding libtorrent before, i claimed that my changes move towards a better way of doing it, that will also require changes on the libtorrent side. if these changes land before the required ones in libtorrent, then yes, there will be a period of time where building libtorrent without cmake on windows won't work for building qbittorrent. but who cares? window users can just build it with cmake in the meantime! cmake comes bundled with vs so most people interested in building on windows already have it, and even if it didn't, windows users are no strangers to the simple task of downloading an exe from the official website (and optionally adding it to path). not to mention that in the future, they'll have to have cmake anyway already to build qbittorrent. using cmake to build both projects is the most practical way already. you have already submitted a pr in libtorrent that touched some `b2` files, so you probably have some experience with that. additionally, you also recognize the importance of cmake in the c++ ecosystem. so, instead of arguing with me here, why not spend that time implementing the better solution over there (making libtorrent `b2` builds generating cmake config files)? personally, i have no interest in doing that myself, i'm happy to just tell windows users ""just build it with cmake"", and i doubt the vast majority would take issue with that or let it bother them. it is relevant. in the old code: - on windows, `pc_libtorrent_rasterbar_found` will be false (because no `pkgconfig`), leading to the `if(libtorrentrasterbar_custom_definitions) ... else()` conditional. - if the user manually specifies `libtorrentrasterbar_custom_definitions`, that will be used. but this is not only tedious and error-prone, it is unlikely that the user will even know about `libtorrentrasterbar_custom_definitions` in the first place, since it's ""documentation"" is a comment in the script. - if the `else()` branch is taken, we fall into the part i mentioned above: `# without pkg-config, we can't possibly figure out the correct build flags. (...)`, where flags that may not work are set without warning. - after that, nothing noteworthy happens to `libtorrentrasterbar_definitions`. it is used to determine if openssl is needed or not. additionally, a few more things may get appended if `libtorrentrasterbar_use_static_libs` (another important variable documented by comment) is not set. - it is then added to the target properties. may not work, hope for the best.",-1,0,0,0.690362274646759,0.7691470980644226,0.741850733757019,0.0,accept,majority_agreement
442228697,12746,"exaggerating about what? `libtorrent is very sensitive to the flags (...)` is no exaggeration. you think having to set libtorrent's libdir, include dir, compile flags, defines, etc manually is a good way of doing things? same with the official qmake build procedure in the wiki ([a link] having to manually edit the build script just to build is insane. maybe it does not bother you because you've been doing it for a long time, but don't let that cloud your judgement. it's difficult to be simpler than this (unless using something like `vcpkg` providing a toolchain file): [code block] it works for everyone with the same files (no need to edit them), each person just has to change paths like `-dboost_root=...` to what they're using at the command line. scriptable, automation-friendly and doesn't require a gui. if you're missing any important `-d.*_{root,dir}` option, you'll get a helpful message like this for each of them (example for boost): [code block] no idea why it failed without a helpful message in your case. perhaps something wrong with your boost installation? it's not a serious problem to break it temporarily (and only on windows), until libtorrent's `b2` build is capable of generating the required files. the workaround/alternative, which is ""just build it with cmake"" is more than sufficient and acceptable imo.",-1,-1,-1,0.9741954207420348,0.9830150604248048,0.9813858866691588,-1.0,accept,unanimous_agreement
444373419,12746,"are you still going to slow down the entire pr because of this unresolved issue, or are you going to separate it? there is nothing too problematic for me personally, just some inconveniences... but can this create problems for users of some more ""exotic"" systems? i mean, how likely is it that some distribution has installed libraries without both cmake and pkgconfig configuration files? do we need to hear more opinions about this particular change? p.s. i am ready to approve it as soon as my last questions are satisfied (as well as when the pending changes are completed and the commits are squashed). ?",0,0,0,0.6511173844337463,0.6892446279525757,0.7377340197563171,0.0,accept,unanimous_agreement
445095326,12746,"as far as i know, both of libtorrent's buildsystems produce at least the pkgconfig configuration files. you could argue ""what happens in distros that don't have pkgconfig?"" - but is this really an issue? i'd say it's very unlikely that there exists a relevant modern distro that doesn't have pkgconfig (although if anyone has hard evidence to the contrary, please enlighten me). anyway, what i'm advocating for (making libtorrent's b2 build method also produce cmake configuration files) makes the ""not having pkgconfig"" problem a non-issue. of course, this whole discussion has an even simpler solution: just don't have 2 different buildsystems. that way we wouldn't even have to worry about having the libtorrent b2 build producing cmake config files. why does libtorrent have to have 2 buildsystems? i suppose it still has both because it started out with b2 and never really dropped it completely, even up to now. if it could only be built with cmake, we would not be having this discussion, everyone would build it happily just fine and no one would complain. but since it happens to be able to be built a different way (which currently does not generate the required config files for the other buildsystem), everyone is sort of forced to support both, because any distro may to decide to use either one.(1) supporting 2 different buildsystems is just a waste of time. it's ok to have 2 during some kind of ""transition phase"" when moving from one to the other, but to keep supporting both indefinitely? just wasteful.(2) ultimately, a decision has to be made in favor of one for the project, and then everyone should ""get with the program"". (1) we can always just ignore this, pretend libtorrent built with b2 doesn't exist, and say ""your libtorrent distro package was built with b2 and it did not produce cmake config files? how terrible. grab the libtorrent source and compile from source yourself"". (2) there is an an exception to this: when one of the platforms the application must support absolutely requires using a different specific buildsystem than the rest. i don't think that's the case for libtorrent, qbittorrent, or similar projects. modern cmake alone is more than adequate for these projects. besides this one, can you please remind me of the other unresolved concerns you have? we don't have to slow down for this. we could just do it this way. if there are too many complaints, we can backtrack and re-add the package find file. but i doubt there will be many, if any complaints. the only complaint so far about this solution being worse is hypothetical (i'm not referring to this one [a link] of yours, which i don't think is complaint about this idea in general, you just had separate issue with boost). everyone else is either indifferent to this find package change (which is a good thing, it means it ""just works""), or actively supporting it (an actual arch linux package maintainer, no less). i would consider making package maintainers' lives easier a nice bonus.",0,0,0,0.665299654006958,0.9269979000091552,0.981538951396942,0.0,accept,unanimous_agreement
445118655,12746,"no, i meant the questions from my previous comment only.",0,0,0,0.9553312659263612,0.9778761863708496,0.9867239594459534,0.0,accept,unanimous_agreement
445127494,12746,"this one? [a link] please extract this change into separate pr if you want to continue this discussion. you can still use any libtorrent distribution, as long as you have pkgconfig or cmake.",0,0,0,0.9875048995018004,0.9874534010887146,0.9949278831481934,0.0,accept,unanimous_agreement
449520397,12746,there is error on windows using mingw: [code block] please fix it!,0,0,0,0.9680561423301696,0.8457235097885132,0.9722777009010316,0.0,accept,unanimous_agreement
449530032,12746,"finally, i have completed my research on this issue. fortunately, your ""totalitarian"" tendencies will not be satisfied, and it still allows you to use any libtorrent source via `findlibtorrentrasterbar.cmake` script installed in the system (or provided to cmake in any possible way). it looks for cmake configuration files first, and if it fails at this, it still tries to find `findlibtorrentrasterbar.cmake` file and use it. imo, it works now even better than it did before, so i am satisfied and this issue is closed for me.",-1,1,1,0.3944327235221863,0.8999993801116943,0.9760369062423706,1.0,accept,majority_agreement
449537172,12746,"yes. shouldn't `qbt_base` care about required packages? then it can provide all common libraries/definitions as part of its interface (iirc, it already does this job except finding packages). but `qbt_app` depends on `qbt_base` so it shouldn't be a problem to obtain all needed stuff via `qbt_base` interface. (i think you understand what ""interface"" means in context of cmake imported targets)",0,0,0,0.9845550656318665,0.9801416397094728,0.9850902557373048,0.0,accept,unanimous_agreement
449569447,12746,"on the other hand, we can have all these ""find_package"" calls in one place (and gui-related too, to be consistent). in addition, splitting the project into multiple targets (static libraries) still doesn't look certain to me. but you still have `if(gui)` to include gui stuff, isn't it? so it can just be written as: [code block]",0,0,0,0.979162096977234,0.990138053894043,0.98574960231781,0.0,accept,unanimous_agreement
449575510,12746,such strings (not cmake code but output strings) break my eyes. i would reformat it: [code block],-1,-1,-1,0.9743841886520386,0.5520594716072083,0.9534886479377748,-1.0,accept,unanimous_agreement
449575983,12746,the same as above: [code block],0,0,0,0.9873642325401306,0.9910086989402772,0.9952123165130616,0.0,accept,unanimous_agreement
449632268,12746,"hmm, actually, i haven't touched `winconf-mingw.cmake` nor tested with building with mingw at all. i'll fix this one error with a simple `and not mingw` in that conditional, but i would appreciate suggestions on how to improve the mingw configuration in general - currently, it's still use stuff like `libtorrentrasterbar_custom_definitions`. or at least, can you please show me how to setup an environment similar to what you're using, so that i can test properly myself? i have never used mingw before.",0,0,0,0.859626293182373,0.7820732593536377,0.9511119723320008,0.0,accept,unanimous_agreement
449634383,12746,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
449634436,12746,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
449636339,12746,"i'm confused... wasn't the *entire* point of this change, that it first looks for `findlibtorrentrasterbar.cmake`, wherever or however you produce one (e.g. by a system libtorrent-rasterbar install, or if you so wish by providing your own)? that was why i objected to moving this `find_package()` into a qbittorrent `cmake/modules/findlibtorrentrasterbar.cmake`, because then you would have recursion issues.",-1,-1,-1,0.5704711079597473,0.7028459310531616,0.9090512990951538,-1.0,accept,unanimous_agreement
449666622,12746,"did someone suggest to move `find_package()` there? perhaps this is some kind of misunderstanding... i suggested to move all ""find libtorrent"" related stuff there so we have only one call to `find_package(libtorrent)` in main script. even now i think it is good idea to have it this way (to have only one call to `find_package(libtorrent)` and let someone else to provide some specific way via findlibtorrentrasterbar.cmake if needed. `find_package()` by default tries to find and use corresponding findpackage.cmake module and if there is no such module it falls back to find and use corresponding cmake configuration files. but it is changed to opposite direction in this pr.",0,0,0,0.8824695348739624,0.9626336097717284,0.8314382433891296,0.0,accept,unanimous_agreement
449670708,12746,"it is quite literally the review comment by zeule which started this discussion, so yes, someone did indeed suggest precisely that. including the find_package(), which i objected to because of namespacing issues. there is no difference to people interested in providing some findlibtorrentrasterbar.cmake if needed. moving this code to find_package(libtorrent) as opposed to leaving it right here merely runs the same exact code via an included macro of cmake function calls. there is no technical advantage to having it in its own file, there is only a readability advantage. but naming it ""libtorrent"" instead of ""libtorrentrasterbar"" may avoid the namespacing/recursion issue i raised, however, it instead opens up the amusing possibility the [a link] project might add a findlibtorrent.cmake, and result in possibly finding the wrong thing. ""naming is hard.""",0,0,0,0.933358073234558,0.9393948316574096,0.9811286926269532,0.0,accept,unanimous_agreement
449671235,12746,"if it is that important to move a few lines somewhere else, i suggest `qbtlibtorrentimpl.cmake` and `include(qbtlibtorrentimpl)`.",0,0,0,0.9884202480316162,0.994307577610016,0.9950428009033204,0.0,accept,unanimous_agreement
449677621,12746,"-schwartz, sorry, i can't understand your reasoning. what do you want from it? iirc, this new configuration allows you to use any libtorrent package that provide cmake configuration files or other kind of libtorrent distribution if there is findlibtorrentrasterbar.cmake exists in any known location (or using pkgconfig as 3rd attempt). we can remove pkgconfig way from our script but it can be added by libtorrent/cmake distributors to their findlibtorrentrasterbar.cmake. are you sure? having second find_package call for the same package only to make script failed isn't readability issue for me. looks like workaround. no.",-1,-1,-1,0.986774444580078,0.9788889288902284,0.9684560894966124,-1.0,accept,unanimous_agreement
449679750,12746,anyway i suggest to continue this discussion in separate thread unless there is something blocking here.,0,0,0,0.9818005561828612,0.9756665229797364,0.9880332946777344,0.0,accept,unanimous_agreement
449727849,12746,"do you propose every target (gui, webui, ...) should be an ""interface library"" (e.g `add_library(xyz interface)`)? if i understand correctly, using static libraries gives us more control with the transitivity of dependencies (can use private, public, interface). furthermore, just for fun i tried making ""qbt_base"" an interface library, but the configure generates 3x repeated compile commands for each file of it - one per target that depends on it (qbt_gui, qbt_app and qbt_webui). so, for example, `src/base/bittorrent/resumedatasavingmanager.cpp` would be compiled 3x. this makes sense because interface libraries don't generate build output, so each dependent must generate the build outputs themselves. i suppose this is reasonable :+1:",0,0,0,0.7961251735687256,0.986152410507202,0.9899896383285522,0.0,accept,unanimous_agreement
449742600,12746,no.,0,0,0,0.8795708417892456,0.9381861686706544,0.9730188846588136,0.0,accept,unanimous_agreement
449743353,12746,"maybe replace the condition above with `if (msvc)`? i have to use mingw environment on my tablet pc (when i'm away from one of my computers), because there's very little storage to keep the visual studio installed. i don't care much about the productivity of this environment, just that qbittorrent is compiled and run for testing. i just install everything needed using official qt installer. the only thing left for me to build myself (apart from libtorrent and qbittorrent) is a boost.system (this is not much different from the build using msvc).",-1,0,0,0.8394643664360046,0.7922089695930481,0.9756556153297424,0.0,accept,majority_agreement
449749481,12746,"shouldn't it be somewhere in winconf? or in ""src"" subdirectory? or at least below msvc_runtime_dynamic feature option declaration?",0,0,0,0.9888446927070618,0.9954307079315186,0.9932532906532288,0.0,accept,unanimous_agreement
449753855,12746,wouldn't the following work? [code block],0,0,0,0.985877275466919,0.988905906677246,0.9954392313957214,0.0,accept,unanimous_agreement
449754355,12746,"why did you change it from predefined variables (apple, win32, unix)?",0,0,0,0.9814209342002868,0.9924598336219788,0.9937289953231812,0.0,accept,unanimous_agreement
449754457,12746,aren't other \*nix systems supported?,0,0,0,0.9632537364959716,0.9858208894729614,0.9904639720916748,0.0,accept,unanimous_agreement
449754651,12746,the same thing. if we're decided to have all find_package at top level you should move this one there (and place it before include this file).,0,0,0,0.9881303310394288,0.9939549565315248,0.9935157299041748,0.0,accept,unanimous_agreement
449754930,12746,it confuses me? why it's really needed? and if it's needed why only for libtorrent?,-1,-1,-1,0.6576353311538696,0.5279685258865356,0.7855172157287598,-1.0,accept,unanimous_agreement
449755863,12746,then all find_package calls should be moved in this script (src/cmakelists.txt) in the same way.,0,0,0,0.9889748096466064,0.995261549949646,0.9946570992469788,0.0,accept,unanimous_agreement
449756807,12746,seems the version numbers still hasn't reverted.,0,0,0,0.9809517860412598,0.8857178688049316,0.9827561378479004,0.0,accept,unanimous_agreement
449757990,12746,"i think this line is redundant given the recent conscious about requiring the latest version of cmake. the specific `3.16` doesn't really mean anything specific for that cmake version, isn't? then it is better to remove this line altogether instead of having a dummy number that will mislead one thinking there is something special with it. imo it would be suitable to have a message that tells users to always upgrade their cmake installation to latest at here instead.",0,0,0,0.9522388577461244,0.9611518979072572,0.9497522711753844,0.0,accept,unanimous_agreement
449761379,12746,"i don't think that was the decision. we all settled with `3.16` as a compromise, for now. besides, every cmake project should begin with `cmake_minimum_required`. otherwise, users will be able to run the script with any version, but will get all sorts of errors and/or strange behavior if the version is not actually suitable. when i proposed ""always use the latest possible version"", it really means ""update `cmake_minimum_required` periodically, as it becomes convenient to make use of features/policy revisions introduced in newer versions, without regard for the versions available in distro repositories"".",0,0,0,0.8724390864372253,0.9837220311164856,0.8571823835372925,0.0,accept,unanimous_agreement
449763564,12746,docs say that cmake_module_path is `a search path for cmake modules to be loaded by the include() or find_package() commands before checking the default modules that come with cmake`. so the modules that come from there are always preferred against the ones that come with cmake. also cmake docs say `cmake_module_path is empty by default and it is intended to be set by project` so it is intended to set this list instead of append to it. or cmake_module_path is usually used in different way?,0,0,0,0.9878259301185608,0.9951598048210144,0.9928061366081238,0.0,accept,unanimous_agreement
449764139,12746,"is `3.16` really the required minimum version? a slightly older version won't work? if the answer is no for the first question, then i haven't seen you address my concern about it, quoting myself: ... otherwise i misunderstood and please disregard this post. well i don't care how recent version we are using however i think it is a really bad compromise when the version doesn't really reflect the reality. i just want to point it out that maybe this can be overlooked for now but it *will* be a concern (at least from me) when we promote cmake build as officially supported.",-1,-1,-1,0.9704755544662476,0.8687551617622375,0.9720380902290344,-1.0,accept,unanimous_agreement
449767515,12746,this one makes it unusable. it cannot be run from qt creator since it is unable to find installed qt components. why do you really need to copy it there? it's needed to in install directory only.,0,0,0,0.9216142892837524,0.9315778613090516,0.9529067873954772,0.0,accept,unanimous_agreement
449768225,12746,"the convenience is questionable, since we are only talking about the resulting binary. intermediate files are still created in the same directory, so if i need to support multiple configurations at the same time, i still have to set the different build directory per configuration manually, and this only adds an unnecessary subfolder inside, for example ""qbittorrent-build/debug/debug"".",0,0,0,0.9498580694198608,0.5353623628616333,0.5752344131469727,0.0,accept,unanimous_agreement
449775320,12746,"the ideal option from my point of view is that cmake_minimum_required really reflects the minimum supported version of cmake (but i do not strictly insist on this until cmake is the main build system of the project so i don't want to waste my time on this topic), otherwise the user may find itself in a situation where we require it to install a version really larger than the one that could successfully process our project (it may already have a suitable version installed, but it will fail due to this unreasonable restriction).",0,0,0,0.951836884021759,0.9469303488731384,0.9777864813804626,0.0,accept,unanimous_agreement
449776923,12746,agree. agree.,0,0,0,0.9584500789642334,0.9687440991401672,0.7596544027328491,0.0,accept,unanimous_agreement
449908039,12746,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
449908046,12746,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
449908243,12746,it was needed to fix a problem with reconfiguration with `ccmake` mentioned a few comments up. refer to the back-and-forth spanning from [a link] to [a link],0,0,0,0.9890835881233216,0.992890477180481,0.9953511953353882,0.0,accept,unanimous_agreement
449928512,12746,"might be. but i haven't tested, and neither has anyone else (that i know of). the lazy way would be to replace all instances of `if(cmake_system_name matches ""linux"")` with `if(unix and (not apple))` and hope for the best, but this doesn't actually guarantee anything - we might be misleading the users into thinking that the support is in good standing. i think if someone wants to make it work in those systems, they can test and submit patches later with the required changes.",0,0,0,0.7765076160430908,0.8942244052886963,0.931004762649536,0.0,accept,unanimous_agreement
449930193,12746,":+1: right, i don't need more justifications, clearly you find this useful and important. i'm just stating that i have no prior experience with it. i was expecting more of a step-by-step, but i'll give it a shot anyway.",1,1,1,0.5789711475372314,0.4972484409809112,0.9772107005119324,1.0,accept,unanimous_agreement
449935158,12746,"with the latest fixups, all package used under the `src/` tree are found with `find_package` calls in `src`'s cml. there is only one remaining `find_package` call, in the cml in `dist/unix/`. but `dist/` is not a subdir of `src` (they're at the same hierarchical level), so i think it's ok for that `find_package` call to remain where it is, or at most go up one level to `dist/`.",0,0,0,0.9864388704299928,0.9909806847572328,0.9828357100486756,0.0,accept,unanimous_agreement
449941772,12746,"not sure what you mean by this... my goal was to have the search procedure working with _at least_ 1) cmake config files and 2) pkg-config. if, in addition, it became possible to use an external `findlibtorrentrasterbar.cmake` to drive the search procedure, then great (as you confirmed, this is the case), but otherwise, no problem. what i did not want, in essence, was for us to provide our own `findlibtorrentrasterbar.cmake` in the repository. so i guess we all got what we wanted in the end? agreed, it has become unwieldy to continue the conversation in this thread. any interested parties can open a new dedicated thread for discussion after this pr is merged, i'll mark this one as resolved now. thanks for the input.",0,0,0,0.6010563373565674,0.8095865845680237,0.8204132318496704,0.0,accept,unanimous_agreement
450057330,12746,"afaik, qbittorrent is used at least on freebsd. but even if someone does not know this clearly, it does not mean that it does not exist... there are no such big differences between different \*nix systems (and there is support in the source code), so it can be configured and built there even if no one has explicitly taken care of it. you don't have to break it here. it will still be possible to run this script on the mentioned systems, and it will be a shame if it fails just because of such changes. , what do you think?",-1,1,-1,0.4894406199455261,0.5171220302581787,0.677519679069519,-1.0,accept,majority_agreement
450058229,12746,"well, but you accidentally changed the related conditions that isn't good in all cases.",0,-1,0,0.905500054359436,0.575425386428833,0.7813898921012878,0.0,accept,majority_agreement
450084739,12746,[a link] is blocking issue.,0,0,0,0.9387084245681764,0.9687711596488952,0.8688800930976868,0.0,accept,unanimous_agreement
450176432,12746,"i'll consider this resolved for now. apparently what we want is msvc's `external` include directives. we can later discuss if we really benefit from `/w4` or `/wall`. i should note that at the time of writing, cmake does not natively support this msvc feature. that is being tracked here: [a link]",0,0,0,0.9811846613883972,0.9863232374191284,0.9705846905708312,0.0,accept,unanimous_agreement
450180446,12746,"unless proven to work reliably, i would choose the conservative way to avoid unnecessary breaking.",0,0,0,0.9637975096702576,0.9474376440048218,0.9729994535446168,0.0,accept,unanimous_agreement
450181175,12746,do you agree with this change? [a link] [a link],0,0,0,0.9845506548881532,0.9872955679893494,0.9888765215873718,0.0,accept,unanimous_agreement
450184249,12746,you're right. next fixup commit will change this back (so that the executable ends up under `src/app/` like before). the point of copying `qt.conf` to the same location as the executable in the build tree is so that those options are still applied when quickly building and testing running the executable from the build tree without installing.,0,0,0,0.980246365070343,0.9764723181724548,0.9854000210762024,0.0,accept,unanimous_agreement
450191499,12746,"but really it breaks ""running the executable from the build tree""! what do you think the purpose of this file is? you're wrong! currently (before your patch) it is placed in root of build tree (this was changed lately from the place you mentioned above).",-1,-1,0,0.9029653668403624,0.7978833317756653,0.8202141523361206,-1.0,accept,majority_agreement
450193144,12746,"the landscape has changed a bit since this pr was opened, most notably, support for `rc_1_1` was officially dropped from master. as for the remaining dependencies: ubuntu is basically our lower bound, and the minimum requirement of qt 5.9 means it also does not make sense to _not_ bump versions up to 18.04 versions, e.g. zlib up to 1.2.11, boost up to 1.65 and opensll up to 1.1.1 (plus openssl 1.1.1 is actually mandatory in qt >= 5.15, so at least this bump makes things easier).",0,0,0,0.9611228108406068,0.9882115721702576,0.9897178411483764,0.0,accept,unanimous_agreement
450198292,12746,"if you didn't understand, placing qt.conf near the qbittorrent executable in output directory is problem.",0,0,0,0.7296090722084045,0.9048574566841124,0.983430027961731,0.0,accept,unanimous_agreement
450199053,12746,but your opinion doesn't really comply to what we established before (before you join) and i still see no point of your reasoning. i don't have much free time and i would just say this much.,-1,-1,-1,0.947559416294098,0.7655816674232483,0.9623043537139891,-1.0,accept,unanimous_agreement
450202394,12746,"if you want us to seriously consider cmake as something approaching the official build system, you must follow the official project requirements. if you want to change them you should open separate issue. usually we discuss it before upcoming minor/major release.",0,0,0,0.980772852897644,0.9791303277015686,0.9863618612289428,0.0,accept,unanimous_agreement
450206389,12746,these definitions have project-wide meaning generally. don't understand why you moved it there.,0,0,0,0.782931387424469,0.8977676630020142,0.9546549320220948,0.0,accept,unanimous_agreement
450271642,12746,"ok, fixed for real this time. i must have got confused with autotools or something. what do you think the purpose of this file is? i thought the purpose of the file was to override certain qt parameters at runtime. if we're shipping like that, why not also build like that? that file looks like it changes a setting relating to dpi, for instance. imagine you are trying to reproduce a user report/testing out some patches relating to dpi/scaling problems. if it never occurs to you to actually install the executable, you will probably fix the wrong problem, since if you don't have the file in the build tree, your environment will be different than the user's. lately, i have seen many reports about scaling/dpi, hopefully this makes fixing those on windows a bit easier. what am i missing, given the reasons above? i can run the executable just fine either way.",0,0,0,0.9522432684898376,0.7401378750801086,0.6585997939109802,0.0,accept,unanimous_agreement
450382026,12746,"i pushed a new commit to make it so that cmake always knows libtorrentrasterbar_dir is a path, by setting it as a cache variable. now, even if you don't specify the type in the command line, the variable will always show up and be configurable in a gui such as ccmake. doesn't seem like a problem that should be fixed in this way. you just need to set variable with a type. if it's unexpected/undocumented behavior it's definitely cmake issue.",0,0,0,0.9799200892448424,0.984126091003418,0.9403485655784608,0.0,accept,unanimous_agreement
450534156,12746,"exactly, that's what this line does - ensures the variable has a type. it initializes the variable in the cache with no value (empty string), but with `path` type. nothing else is affected by this, and this allows `ccmake` to work correctly. from the cmake docs ([a link] (...)",0,0,0,0.9869404435157776,0.9902921319007874,0.990265130996704,0.0,accept,unanimous_agreement
450613327,12746,"still doesn't seem good for me. i can't understand what you're doing with this. is this the intended way? or is this a mistake (of cmake) you're trying to workaround? or is it a ""feature"" when you cache a variable that wasn't originally intended to be cached? anyway, it looks strange to affect a variable that isn't even used directly in your script. and then it turns out that in general case you should do the same with all possible variables that can ever be set via the command line... it looks terrible. is there no other way?",-1,-1,-1,0.9873522520065308,0.991015374660492,0.9955097436904908,-1.0,accept,unanimous_agreement
450778523,12746,"qt docs: qt docs: without `qt.conf` application knows about qt components that installed on developer machine since their paths are hard-coded. with `qt.conf` application tries to find qt components using paths that are specified there, in our case in the application executable folder, it is correct on target machine but incorrect on developer one). you use statically linked executable so you aren't affected by path of qt plugins etc. and you probably didn't pay attention to the qt translations.",0,0,0,0.9861018657684326,0.9932152032852172,0.9919394850730896,0.0,accept,unanimous_agreement
451067689,12746,"to be honest, i also get the feeling that this is simply a workaround for cmake guis like (`ccmake`, in particular). this is a workaround for the case where the user initially specifies a variable in the command line without a type (i would says it's uncommon for cmake users to specify variables _with_ a type in the command line invocation) and then later would like to change the variable's value with `ccmake`. it will not be possible, because `ccmake` does not allow you to change variables that don't have a specified type. i have found that some tools that invoke cmake, such as the cmake tools extension for vs code, add a variable type to all command-line entries, side-stepping this problem entirely. as for, ""why have this `set(cache)` call for `libtorrentrasterbar_dir` and not others?"", i would say this is the one variable that's not used directly that will be changed most often, and also this way the workflow of a contributor isn't broken. but if we go down this route, then yes, it might become justifiable to do this for other variables as well. but that would be done in another pr. i guess it comes down to whether or not you want to leave this workaround in to better support cmake gui users. unless you know of a better way to achieve the same thing.",0,0,0,0.5623071789741516,0.8951262831687927,0.9541198015213012,0.0,accept,unanimous_agreement
453198206,12746,"this particular problem has been fixed, but i'm still not able to build successfully with mingw. i'll mark this as resolved, let's continue solving the remaining problem in the comments at the bottom.",0,0,0,0.8525006175041199,0.9616159796714784,0.966582179069519,0.0,accept,unanimous_agreement
453198327,12746,"i've reviewed and tested the changes (not on apple/macos, but that is the most idempotent change anyway), and i'm quite certain everything is correct now.",0,0,0,0.9578185081481934,0.9198787808418274,0.6210261583328247,0.0,accept,unanimous_agreement
453198653,12746,"it's `qbt_version` and `qbt_version_2` that are ubiquitous. these particular ones only have meaning for ""base"" and ""app"", so i created a specific interface for that, to isolate it. in the future, i'd like to propose some versioning changes to prevent these kind of inconsistencies, but that's a matter for another time.",0,0,0,0.9714637398719788,0.9880365133285522,0.9826085567474364,0.0,accept,unanimous_agreement
453579958,12746,"`cmake_system_name matches ""linux""` works reliably to mean ""linux only"". i took a closer look at the scripts, and figured out that even now, the build should work on the bsds. currently, there are 4 places in the code that could be changed from that to `unix and not apple and not cygwin`: - finding libtorrent through pkg-config (finding via cmake config files should work fine anyway) - the script in the `dist folder`, that only handles the installation of man pages, icons, etc (thus, not relevant for building only; are the current installation directories for these ancillary files also correct for the bsds?) - the addition of the `_default_source` compile definition to all targets - the availability of the dbus and systemd features (is it relevant to the bsds?) the latter item can remain disabled on non-linux for now, and the others enabled without affecting anything else. then, at least a basic build without the `systemd` and `dbus` features should work. the installation will also work; if any of the installation directories need to be changed, some bsd user can later submit a patch for that. i'll make the change.",0,0,0,0.9442771673202516,0.9918360114097596,0.9771342873573304,0.0,accept,unanimous_agreement
453594905,12746,"right, i understand now. will remove the the build-time copying of this file.",0,0,0,0.985576331615448,0.9829208254814148,0.9910265803337096,0.0,accept,unanimous_agreement
462026052,12746,msvc warning flags was intentionally dropped in a recent commit. you shouldn't reintroduce it.,0,0,0,0.7940457463264465,0.9560489654541016,0.9634653925895692,0.0,accept,unanimous_agreement
462027031,12746,is this file required? i think we have enough files in the project root directory. maybe move it into cmake folder.,0,0,0,0.9835851192474364,0.9929399490356444,0.994321346282959,0.0,accept,unanimous_agreement
462234991,12746,"right, fixed.",0,0,0,0.9738963842391968,0.9843685030937196,0.9889113903045654,0.0,accept,unanimous_agreement
462236148,12746,"it's used for configuring the images produced by the `--graphviz` flag, such as [a link] the default settings are pretty bad for our use case. according to the cmake docs ([a link] i would also prefer if cmake searched for it in the cmake modules location natively, but oh well. so just leaving it in `cmake_source_dir` is the easiest way, vs. placing the file in the cmake modules folder and copying it to `cmake_binary_dir` at configure-time (not sure how easy it is to do and don't really want to do it, at least now), or something like this: [a link] i too worry about the excessive number of files at the root of the project. these are the ones that can be removed in the near-future, and are a much bigger problem than a single additional cmake-related file: - replaced by a `.clang-format` file: `.editorconfig`, `uncrustify.cfg`, `codingstyleqtcreator.xml` (contributors may configure their text editor/ide how they like, then run clang-format before commiting; i doubt any other tools is better/more consistent than clang-format, since it is backed by the infrastructure of one of the major c++ compilers) - replaced by a gh actions workflow (maybe; i'll give this a try soon-ish), which goes in inside the `.github` directory: `.travis.yml`, `.appveyor.yml` - simply removed: `todo`, `install` (basic instructions to build can be in the readme + a link to the wiki for the rest) - simply removed due to dropping `qmake + autotools` as a build system: `bootstrap.sh`, `conf.pri.in`, `conf.pri.windows`, `configure`, `configure.ac`, `macxconf.pri`, `qbittorrent.pro`, `unixconf.pri`, `version.pri`, `winconf.pri` that's a reduction of 14 or 16 files, depending on whether we actually move to gh actions for ci, or 10 by just dropping `qmake + autotools` alone. here's my proposal for compromise, and a start to truly solving the ""bloated root"" problem: [a link]",-1,-1,-1,0.8780829906463623,0.923920512199402,0.9614657759666444,-1.0,accept,unanimous_agreement
462930126,12746,", are you okay with this monstrous notation instead of human readable one like the following? [code block] (in all similar cases)",0,-1,-1,0.9651042819023132,0.9185194969177246,0.7148873805999756,-1.0,accept,majority_agreement
462933054,12746,"it is overkill to split it into several lines, it isn't that long: [code block]",0,-1,0,0.9258585572242736,0.8789827823638916,0.5915669798851013,0.0,accept,majority_agreement
462933625,12746,it's one more overkill...,-1,-1,-1,0.9598131775856018,0.9542570114135742,0.6814913153648376,-1.0,accept,unanimous_agreement
462934188,12746,shouldn't you indent this line?,0,0,0,0.9000051617622375,0.9898235201835632,0.9927862286567688,0.0,accept,unanimous_agreement
462935524,12746,"you should add one more indentation level to this and folloving lines (until the end of ""message"" parameter list).",0,0,0,0.9893310070037842,0.98866069316864,0.9953763484954834,0.0,accept,unanimous_agreement
462937614,12746,:-1: to split it,0,0,0,0.9769489169120787,0.9281675219535828,0.9922834038734436,0.0,accept,unanimous_agreement
462938290,12746,:-1: to split it (and all other short fragments).,0,0,0,0.9846042990684508,0.970262050628662,0.9853028059005736,0.0,accept,unanimous_agreement
462952139,12746,it looks like a not-so-useful feature to me and i would still prefer it to be dropped. what do you think?,0,0,-1,0.8159590363502502,0.7781816720962524,0.8732647895812988,0.0,accept,majority_agreement
462952917,12746,"i'm not familiar with the usage of generator expression, maybe franciscopombal can provide the reasons of using them.",0,0,0,0.7404077053070068,0.8830969929695129,0.8911113142967224,0.0,accept,unanimous_agreement
462967854,12746,at least it should be dropped from this already bloated pr.,0,0,-1,0.9580600261688232,0.7875743508338928,0.7015724778175354,0.0,accept,majority_agreement
462984926,12746,"well, i guess there is no reason why this cannot be a separate pr, so i'll remove it from this one.",0,0,0,0.972252368927002,0.9797362089157104,0.9852670431137084,0.0,accept,unanimous_agreement
462989909,12746,"the reasoning for using generator expressions was outlined in part of this comment ([a link] and further expanded upon in this whole comment: [a link] basically, though the syntax is a bit ugly, i think that is an acceptable price to pay for the benefits this change yields. to be fair, `$<$ ,$ >,$ >>:_default_source>` is a bit of a worst-case scenario, all things considered. it can't (or at least shouldn't) get worse than that.",-1,0,0,0.6519368290901184,0.8089956045150757,0.7343274354934692,0.0,accept,majority_agreement
463059668,12746,"cmake is my default build system but i never use generator expression, they're are not build for humans c++ is already hard why're you trying to make build system hard too, i'll personally like you to not use them at all. if() statements may seem redundant but they tend too be much more readable.",0,0,0,0.8613864779472351,0.4596911668777466,0.5448451638221741,0.0,accept,unanimous_agreement
463096427,12746,"my opinion is avoid generator expressions whenever possible. i prefer more readability friendly code. in addition, ""overusing generator expressions"" is something that fell on our heads after this pr was almost completed, and we were trying to finish it. well, now here's another controversial thing that could have had its own pr rather than slowing this one down.",-1,0,0,0.499981939792633,0.7804364562034607,0.5360885262489319,0.0,accept,majority_agreement
465084976,12746,"did you even read my previous posts explaining the benefits? you guys are arguing ""don't use this nice feature of modern cmake because i don't understand it"". despite the somewhat ugly syntax, generator expressions are the best (and often the only easy correct way, see video below) to do certain things. generator expressions _is_ more friendly code, once you look past the syntax. there are many nice videos on yt explaining modern cmake (mostly from c++ conferences from 2017 to present) and generator expressions, including what they are used for and why they're needed and better than the alternative. i encourage you to watch at least this ~10 minute part explaining genexps of this particular talk about modern cmake, [a link] starting at 34:15 through 45:11 (the link already includes the correct timestamp). some highlights: - 35:44 - ""abstraction targets"" - what i attempted to do with the `qbt_common_cfg` and `qbt_version_definitions` targets inside `macroqbtcommonconfig.cmake` - 38:49 - relevant example of generator expressions preventing buggy and non-portable `if ()`-based code - 43:08 - relevant example of an imperative, non-modern cmake logic snippet being modernized and simplified with genexps. the original motivation to also switch to use more generator expressions was to also tackle the mingw build logic, which i originally intended to not even touch (perhaps leaving that to a later pr). i noticed it was becoming too hard to easily reason about target and platfom requirements with all the `if ()`s and scattered imperative logic, so i turned it all to targets + genexp. it made everything about different multiplatform requirements easier to reason about and conclude that currently, there isn't even any special logic required to build with mingw. the previous logic was even kind of dangerous, as it included old-style calls to `target_link_libraries()`, if i'm not mistaken. the whole build system is now easy to understand, change and extend, no matter the platform/os (okay, probably excluding the translations part in `app`, which is still somewhat messy, but as i said before, there is little we can do about it for now), as long as one takes the time to understand genexps. it's a small investment, and not doing so is like saying ""i want to read/write modern c++, but i don't want to learn anything new about c++ >= 11"". i think we are on the same page concerning the desire (and a need actually, considering the upcoming deprecation of qmake) to move to cmake as our build system - we should understand the tools that we use.",-1,1,1,0.7108055353164673,0.9415189623832704,0.633495032787323,1.0,accept,majority_agreement
465145779,12746,"the point was to make it consistent with all the other such statements. but sure, i think the case where there's only one small element can be the exception.",0,0,0,0.9825489521026612,0.9833059906959534,0.9854124188423156,0.0,accept,unanimous_agreement
465153798,12746,all such instances fixed.,0,0,0,0.9864264726638794,0.9890128374099731,0.9944115281105042,0.0,accept,unanimous_agreement
465153892,12746,all such instances fixed.,0,0,0,0.9864264726638794,0.9890128374099731,0.9944115281105042,0.0,accept,unanimous_agreement
465154074,12746,all such instances fixed.,0,0,0,0.9864264726638794,0.9890128374099731,0.9944115281105042,0.0,accept,unanimous_agreement
465154169,12746,all such instances fixed.,0,0,0,0.9864264726638794,0.9890128374099731,0.9944115281105042,0.0,accept,unanimous_agreement
465154308,12746,all such instances fixed.,0,0,0,0.9864264726638794,0.9890128374099731,0.9944115281105042,0.0,accept,unanimous_agreement
465154687,12746,done (forgot to actually do it before).,0,0,0,0.9003664255142212,0.9744318723678588,0.9466142654418944,0.0,accept,unanimous_agreement
42972660,3989,while (,0,0,0,0.8593634963035583,0.7892749905586243,0.9809292554855348,0.0,accept,unanimous_agreement
42973082,3989,maybe friendlyvalue?,0,0,0,0.9808835983276368,0.9825584888458252,0.981805980205536,0.0,accept,unanimous_agreement
42973107,3989,and old is friendlyunit (as always),0,0,1,0.8781090378761292,0.9749090671539308,0.7676995992660522,0.0,accept,majority_agreement
42973387,3989,"placing each condition in the parentheses improves the readability of the code, imo. [code block]",0,0,0,0.9860031604766846,0.982495903968811,0.9750248789787292,0.0,accept,unanimous_agreement
42973868,3989,place enum declaration on top of (all) function declarations.,0,0,0,0.9883183240890504,0.992029905319214,0.9945507645606996,0.0,accept,unanimous_agreement
42974258,3989,if (,0,0,0,0.94404274225235,0.6269218325614929,0.9799877405166626,0.0,accept,unanimous_agreement
42974334,3989,"#include ""searchsortmodel.h""",0,0,0,0.9756703972816468,0.9924865961074828,0.994599461555481,0.0,accept,unanimous_agreement
42974419,3989,one initializer per line (coding style).,0,0,0,0.9884411096572876,0.9892053604125975,0.9934549927711488,0.0,accept,unanimous_agreement
42974525,3989,no blank lines in empty function body.,0,0,0,0.9810810685157776,0.985716700553894,0.9879584312438964,0.0,accept,unanimous_agreement
42974682,3989,simple `foreach`,0,0,0,0.9848971366882324,0.9844809770584106,0.9941856861114502,0.0,accept,unanimous_agreement
42974855,3989,we accepts one line for return (etc.) statements: [code block],0,0,0,0.9888606667518616,0.9910249710083008,0.9961602687835692,0.0,accept,unanimous_agreement
42974892,3989,space after >=,0,0,0,0.9812237024307252,0.9889935851097108,0.992037296295166,0.0,accept,unanimous_agreement
42975093,3989,here (and in similar places) are not that long to divide them into two lines.,0,0,0,0.9647454023361206,0.957156777381897,0.9746289253234864,0.0,accept,unanimous_agreement
42975255,3989,we doesn't accept member implementation in headers. move to .cpp.,0,0,0,0.98243248462677,0.9779573082923888,0.994674563407898,0.0,accept,unanimous_agreement
42981387,3989,pardon? what do you suggest?,0,0,0,0.5912569165229797,0.7803638577461243,0.9525514245033264,0.0,accept,unanimous_agreement
42981576,3989,i prefer to highlight the symmetry,0,0,0,0.9697792530059814,0.9510363936424256,0.9855079054832458,0.0,accept,unanimous_agreement
42982600,3989,"ok, but why?",0,0,0,0.9461976289749146,0.7591626644134521,0.9785723686218262,0.0,accept,unanimous_agreement
42988105,3989,"by the way, since you began to use **enum class**, you can even put it outside utils::misc namespace (utils child namespaces are intended for the functions - that was the idea). it will be fine. just sizeunit::byte etc.",0,0,0,0.9379900097846984,0.9415730237960817,0.9344674944877625,0.0,accept,unanimous_agreement
42988493,3989,"use friendlyvalue for your new function. the same names should be used to really overloaded functions, and these two are not (by the meaning), as do different (albeit related) things.",0,0,0,0.9856076240539552,0.9778162240982056,0.9900643229484558,0.0,accept,unanimous_agreement
42988666,3989,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
42989367,3989,"they are overloaded functions, in fact: the first one just converts result from the second one to string.",0,0,0,0.9842537641525269,0.9889761209487916,0.987798035144806,0.0,accept,unanimous_agreement
42989587,3989,in order to not mix the functions and types... just such a convention.,0,0,0,0.9708001017570496,0.9670780301094056,0.9921454787254332,0.0,accept,unanimous_agreement
42992120,3989,"technically, yes, but not in meaning. the meaning of overloaded functions is to do the same thing for different params. for example: [code block] these are overloaded functions (by definition and by meaning). in your case one function reduces the number up to a certain order, and another converts a number to a string in some way.",0,0,0,0.9794421792030334,0.9884238839149476,0.9873633980751038,0.0,accept,unanimous_agreement
42993129,3989,"i don't insist that to do so is generally impossible. sometimes, on the contrary, it is useful to have functions with identical names but with different access specifiers in a class. but if we put something in the interface, then it must have a clear meaning.",0,0,0,0.9194524884223938,0.9368571639060974,0.9743031859397888,0.0,accept,unanimous_agreement
42999913,3989,"i would name both of them humanreadablesize(), but since there was the functions before, i simply named the second one identically.",0,0,0,0.9869006276130676,0.992339015007019,0.9932669401168824,0.0,accept,unanimous_agreement
43013117,3989,"qreal is wrong input type for this function. we expect there some amount of bytes that shouldn't be neither fractional nor negative. so qlonglong will be right here. and return void, of course.",0,0,0,0.8822647929191589,0.9128636717796326,0.7120659351348877,0.0,accept,unanimous_agreement
43015355,3989,"~~i've opened another pr which is related to this function, if possible please use the new code: [a link]",0,0,-1,0.953049659729004,0.9524458646774292,0.8227433562278748,0.0,accept,majority_agreement
43016061,3989,did you mean `quint64`?,0,0,0,0.9869993329048156,0.9937483072280884,0.9924472570419312,0.0,accept,unanimous_agreement
43016322,3989,qt4 -> qt,0,0,0,0.9808911681175232,0.980115532875061,0.9872103929519652,0.0,accept,unanimous_agreement
43016599,3989,"ah, nevermind.",0,0,0,0.912596881389618,0.6002902984619141,0.6287791728973389,0.0,accept,unanimous_agreement
43018101,3989,"i guess there are negative sizes somewhere, and they are used to represent unknown size, because someone even created a translatable string for this case. for the same reason the function has to signal about incorrect size, so it returns `bool`. the very first action of this function will be the conversion of integral input into floating point value, but since everybody want cleaner interface, let's change both function signatures to `qint64`.",0,0,0,0.9734395146369934,0.9773173332214355,0.9787303805351256,0.0,accept,unanimous_agreement
43018501,3989,but does `double` has any meaning for this function at all? it is just being used as `qint64` and so it is not really has any meaning since you're passing `qint64` in all cases?,0,0,0,0.9685192704200744,0.991060435771942,0.993036925792694,0.0,accept,unanimous_agreement
43018839,3989,i guess `qreal` was used for parameter to avoid declaring a local variable,0,0,0,0.9879916310310364,0.9934547543525696,0.9843920469284058,0.0,accept,unanimous_agreement
43021786,3989,"yes. i made a typo. i mean **qulonglong**, which is the same. we can't have a fractional number of bytes, but we can have fractional number of kibibytes, etc. so return type of **qreal** is correct. this logic should be placed where it is required. not here!",0,0,0,0.9573649764060974,0.6025364995002747,0.9216493368148804,0.0,accept,unanimous_agreement
43152279,3989,"another proof that this is not the place for this: we did not complicate the calling code by removing it from here, however, we achieve the purity of this logic.",0,0,0,0.97086101770401,0.982777774333954,0.986676812171936,0.0,accept,unanimous_agreement
43155955,3989,"can not understand your point. according to qtcreator, this function is called from 48 places to get string representation of a size or a speed. where the message should be placed?",0,0,0,0.9514150023460388,0.8356793522834778,0.8822763562202454,0.0,accept,unanimous_agreement
43158696,3989,i mean wrong size processing only. that don't belong in this function.,-1,0,0,0.6538273096084595,0.5212198495864868,0.7450001239776611,0.0,accept,majority_agreement
43159659,3989,did you mean [code block] but still signed int in [code block] ?,0,0,0,0.9886385798454284,0.9946700930595398,0.9945656061172484,0.0,accept,unanimous_agreement
43162995,3989,yes!,0,1,1,0.8127877116203308,0.7005663514137268,0.4961845874786377,1.0,accept,majority_agreement
43183765,3989,"so you want one of the overloaded functions to check whether the input data is in range, while the other one not? not _this_ type of difference everybody expects from overloaded functions, i would say. now i begin to understand why did you think about them as not overloads.",0,0,0,0.9607232809066772,0.9702090620994568,0.9810865521430968,0.0,accept,unanimous_agreement
43225612,3989,"try to explain again... these functions are overloaded because you have decided to give them the same name. but actually, they perform different roles. old function converts the numeric representation of the size in a string, and it is quite normal to introduce such concept as ""wrong"" size. it processes this in the usual way, i.e. generates its string representation. your function, as i said, reduces the number to a certain order. it does not handle the ""wrong"" size in the usual way, because it is incorrect input for this function, and reports an error (returns false). in this case, you knowingly allow a function to accept an incorrect input value (using a signed type for input argument), and then ""fighting"" with this inside it. this is illogical. this behavior is permissible only in cases where passing of incorrect input values into the function cannot be prevented (for example, the input parameter is a string).",0,-1,0,0.8123905062675476,0.547238290309906,0.8858948349952698,0.0,accept,majority_agreement
54537047,3989,isn't there an implicit cast?,0,0,0,0.9774075150489808,0.9823373556137084,0.987653911113739,0.0,accept,unanimous_agreement
54537131,3989,you pay for the number of code lines? [code block],0,0,0,0.984570562839508,0.9809224009513856,0.9942387342453004,0.0,accept,unanimous_agreement
54537224,3989,why not `sizeunit`?,0,0,0,0.977275550365448,0.9892438650131226,0.9911380410194396,0.0,accept,unanimous_agreement
54537331,3989,fix `is_speed` to camelcase.,0,0,0,0.9882185459136964,0.9908686876296996,0.9946692585945128,0.0,accept,unanimous_agreement
54537438,3989,use `sizeunit` for loop counter.,0,0,0,0.9881689548492432,0.9935663342475892,0.9951358437538148,0.0,accept,unanimous_agreement
54537775,3989,it's better (more readable) to move `&&` on the next line.,0,0,0,0.9843395948410034,0.990350306034088,0.9902043342590332,0.0,accept,unanimous_agreement
54570399,3989,why cast here?,0,0,0,0.8746204376220703,0.9654041528701782,0.9901491403579712,0.0,accept,unanimous_agreement
54571470,3989,camelcase,0,0,0,0.9789125323295592,0.9691299796104432,0.9723753333091736,0.0,accept,unanimous_agreement
54571980,3989,`||` to next line.,0,0,0,0.9770007133483888,0.9884970188140868,0.9885848164558412,0.0,accept,unanimous_agreement
54572406,3989,fix indentation,0,0,0,0.9875961542129515,0.94542396068573,0.9932259917259216,0.0,accept,unanimous_agreement
54583754,3989,is there a `operator ++` for `enum class`?,0,0,0,0.988077700138092,0.993854820728302,0.9952149391174316,0.0,accept,unanimous_agreement
54584374,3989,want to be explicit for narrowing conversions.,0,0,0,0.9800218939781188,0.955382525920868,0.9887850284576416,0.0,accept,unanimous_agreement
54584524,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54584576,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54585233,3989,"again, `operator++`. either `static_cast` will be here, or two of them in the next statement.",0,0,0,0.9883456230163574,0.9933752417564392,0.9920560717582704,0.0,accept,unanimous_agreement
54585570,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54586402,3989,"because there is no qin64 literal, afaik.",0,0,0,0.9848126769065856,0.9822700619697572,0.9869818091392516,0.0,accept,unanimous_agreement
54586545,3989,this is a function override. i strongly object to changing parameters names for it.,0,0,-1,0.8399044871330261,0.9691006541252136,0.7694633603096008,0.0,accept,majority_agreement
54587368,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54587470,3989,thanks.,0,1,0,0.5150366425514221,0.5804154276847839,0.5270382761955261,0.0,accept,majority_agreement
54588416,3989,"oh, right. this is `enum class`.",0,0,0,0.9789468050003052,0.959197163581848,0.9813897013664246,0.0,accept,unanimous_agreement
54589311,3989,but there is implicit cast here! why to make it complicated where it is not needed?,0,0,0,0.8992741107940674,0.8509611487388611,0.5042609572410583,0.0,accept,unanimous_agreement
54589575,3989,what function do you override? (i mean its base class),0,0,0,0.9836596250534058,0.9906460046768188,0.9932750463485718,0.0,accept,unanimous_agreement
54589810,3989,the names of the parameters have value only for the body of this function. you can even call them something different in the declaration of this function.,0,0,0,0.9863014221191406,0.9923135638237,0.993301272392273,0.0,accept,unanimous_agreement
54590409,3989,"weird. `qsortfilterproxymodel::filteracceptsrow()` really has such parameter names, which is not typical for qt...",-1,-1,-1,0.989685595035553,0.9789205193519592,0.9837439656257628,-1.0,accept,unanimous_agreement
54590519,3989,blank line before access specifiers,0,0,0,0.9836419820785522,0.989244818687439,0.9939299821853638,0.0,accept,unanimous_agreement
54590569,3989,"pardon me, i don't understand you. here is a cut: [code block]",-1,-1,-1,0.9189789295196532,0.872803270816803,0.8305799961090088,-1.0,accept,unanimous_agreement
54590600,3989,blank line,0,0,0,0.9657909274101256,0.870745062828064,0.9861246347427368,0.0,accept,unanimous_agreement
54591266,3989,you use `using namespace utils::misc;` above so omit utils::misc here.,0,0,0,0.9850549697875975,0.9950957894325256,0.9952195286750792,0.0,accept,unanimous_agreement
54591645,3989,"don't use this. i already wrote somewhere here that it is meaningless (i mean, this is still not enough, so there is no need to clutter up the code).",-1,0,0,0.7265806198120117,0.6479191780090332,0.7654943466186523,0.0,accept,majority_agreement
54591801,3989,use the same style for declarations.,0,0,0,0.9863107204437256,0.9876708984375,0.9931615591049194,0.0,accept,unanimous_agreement
54592204,3989,"it is preferable to use aggregation, not private inheritance from ui classes. this eliminates naming conflicts and some of the other shortcomings.",0,0,0,0.984124481678009,0.9930101037025452,0.9891746044158936,0.0,accept,unanimous_agreement
54592296,3989,move `{` to the separate line,0,0,0,0.986063539981842,0.9932736158370972,0.9932953715324402,0.0,accept,unanimous_agreement
54592468,3989,blank line between methods and variables.,0,0,0,0.9153615236282348,0.9858432412147522,0.9809846878051758,0.0,accept,unanimous_agreement
54593215,3989,duplicate file. delete it!,0,-1,-1,0.7787467837333679,0.7608346939086914,0.7548293471336365,-1.0,accept,majority_agreement
54594162,3989,"i mean `qsortfilterproxymodel::filteracceptsrow()` really has `source_row` and `source_parent` param names, but these names are not typical for qt (qt uses camelcase). and most importantly, i want to say that you can change the names of the parameters in an absolutely free and safely.",0,0,0,0.9795886874198914,0.9805512428283693,0.9899380207061768,0.0,accept,unanimous_agreement
54596739,3989,"and here we return to the first point: i strongly object. if it is a suggestion, i reject it. if you are going to maintain this code and want to have camelcased parameter names, i''ll change them, of course, no problem here.",0,0,0,0.9307781457901,0.841159999370575,0.9007445573806764,0.0,accept,unanimous_agreement
54596857,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54597018,3989,indeed.,0,0,0,0.9655014872550964,0.9844227433204652,0.9800629615783693,0.0,accept,unanimous_agreement
54597217,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54598235,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54598251,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54598319,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54600779,3989,"it isn't suggestion, it's our coding style rule.",0,0,0,0.9768521189689636,0.984632134437561,0.98994779586792,0.0,accept,unanimous_agreement
54605410,3989,"oh, my god... what a stupid mistake!",-1,-1,-1,0.9915897250175476,0.993654489517212,0.9959482550621032,-1.0,accept,unanimous_agreement
54605696,3989,"but it is effectively not your code, not a code from qbittorent project, i mean.",0,0,0,0.9832060933113098,0.9690448045730592,0.9870490431785583,0.0,accept,unanimous_agreement
54606393,3989,base class method - yes. but this method is part of qbittorrent. you misunderstood something... or too busy working :),1,1,1,0.8434188961982727,0.9625650644302368,0.9729687571525574,1.0,accept,unanimous_agreement
54607327,3989,or do you mean that your code contributed to qbittorrent is not part of qbittorrent?,0,0,0,0.9850617051124572,0.9907570481300354,0.9908975958824158,0.0,accept,unanimous_agreement
54608034,3989,"my compiler (gcc 5.3) does not agree with you. i shall either write: `std::max(0ll, minsize)`, which does not seem nice to me, since `long long` could be not `int64`, or something like `std::max(quint64{0}, minsize)`, which does not differ much from `static_cast`. maybe later, when qt will provide literals for its types, there will be an ideal notation.",0,0,0,0.9515763521194458,0.9384635090827942,0.9173628687858582,0.0,accept,unanimous_agreement
54609005,3989,ok. then leave it as is.,0,0,0,0.9785117506980896,0.9837948083877563,0.9923036098480223,0.0,accept,unanimous_agreement
54610088,3989,"apparently, this is due to the fact that std::max is a template. for interest - what prints your compiler about it?",0,0,0,0.9662562608718872,0.9000177979469299,0.9932470321655272,0.0,accept,unanimous_agreement
54610926,3989,didn't you think to assign appropriate values to sizeunit members and just do `size *= unit`?,0,0,0,0.98630291223526,0.9937976002693176,0.9939885139465332,0.0,accept,unanimous_agreement
54611187,3989,"here is the output, please, with intermediate paths stripped by me: [code block]",0,0,0,0.9865900278091432,0.9884243011474608,0.9947928786277772,0.0,accept,unanimous_agreement
54612664,3989,"ok. i thought so... gcc can't deduce template parameter types. but you can just (try to) do `std::max (0, minsize)`.",0,0,0,0.9799624681472778,0.9850723147392272,0.9633448123931884,0.0,accept,unanimous_agreement
54617402,3989,"i meant that the function signature and parameter names are part of qt code, not qbittorrent. the overrides will become hardly untraceable if everyone change parameters names. or i can add `override` keyword. then the fact of overriding will be explicit.",0,0,0,0.9759299755096436,0.9889877438545228,0.991775393486023,0.0,accept,unanimous_agreement
54621569,3989,"gcc is right, afaik, because promotions are applied _after_ template parameters have been determined.",0,0,0,0.9856024384498596,0.9768424034118652,0.9869930744171144,0.0,accept,unanimous_agreement
54680036,3989,"yes. it just can't deduce template parameter (as i said above) since it has two candidates: `int` and `qint64`. but if we set template parameter explicitly it's ok - compiler instantiates function `std::max(qint64, qint64)` and pass `0` and `minsize` to it and it uses implicit cast from `int` to `qint64` in this case. so you can leave it as is or use `std::max ` instead.",0,0,0,0.986328661441803,0.9890457391738892,0.9790762662887572,0.0,accept,unanimous_agreement
54680337,3989,"you can do this if you will be easier. by the way, use `override` for overriden methods is a really good idea (not only here). it really can prevent some errors in contrast to redundant re-use of `virtual` keyword.",1,1,1,0.5950624942779541,0.6180135607719421,0.7916883826255798,1.0,accept,unanimous_agreement
54692377,3989,broken indentation here.,0,-1,0,0.5563326478004456,0.8536906242370605,0.9634515643119812,0.0,accept,majority_agreement
54692468,3989,broken indentation,0,0,0,0.7894452214241028,0.5879195928573608,0.9632910490036012,0.0,accept,unanimous_agreement
54692644,3989,broken indentation as above. missing spaces before || and extra space after it.,0,0,0,0.8105090856552124,0.8587742447853088,0.9883070588111876,0.0,accept,unanimous_agreement
54692744,3989,same here,0,0,0,0.982987642288208,0.9628711938858032,0.99204421043396,0.0,accept,unanimous_agreement
54699582,3989,"please, no need to invent anything. just fix the indentation. it would also be more readable if you separate the subexpression (by enclosing them in parentheses). [code block]",0,0,0,0.98131000995636,0.972679615020752,0.9711508750915528,0.0,accept,unanimous_agreement
54699929,3989,forgot to say earlier... we start the names of complex types with a capital letter. the same applies to the aliases (etc.) of such types. so there must be `base` (although i don't see much point to use this alias).,0,0,0,0.9591970443725586,0.9835258722305298,0.8755062818527222,0.0,accept,unanimous_agreement
54700106,3989,what this does?,0,0,0,0.7710891366004944,0.935626983642578,0.9872785806655884,0.0,accept,unanimous_agreement
54700752,3989,fix coding style,0,0,0,0.9868863224983216,0.9645603895187378,0.9935343265533448,0.0,accept,unanimous_agreement
54706261,3989,only one blank line.,0,0,0,0.9663495421409608,0.9773415923118592,0.9723823070526124,0.0,accept,unanimous_agreement
54720841,3989,"ok, but what's wrong with it?",0,0,0,0.5439979434013367,0.7482451796531677,0.7284955978393555,0.0,accept,unanimous_agreement
54720901,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
54721203,3989,those are standard methods generated by uic. they create widgets and set translated ui strings.,0,0,0,0.9876984357833862,0.9933237433433532,0.9949823021888732,0.0,accept,unanimous_agreement
54721590,3989,"i need at least a verb, please, to understand what did you want to say.",0,0,0,0.9572917819023132,0.9749240279197692,0.9386953711509703,0.0,accept,unanimous_agreement
54722087,3989,"weren't it you who asked to move `||`? look, was so nicely aligned : [code block] :d",1,1,1,0.568509042263031,0.9905372262001038,0.9898567199707032,1.0,accept,unanimous_agreement
54722538,3989,i had to stress my eyes to get the difference between two conditions. when they were co-aligned it was so much easier.,0,-1,0,0.7924412488937378,0.7115698456764221,0.6471372246742249,0.0,accept,majority_agreement
54723483,3989,"think of it as a kind of the language keyword? the sense is the following. if base class changes, then compiler warns you in the constructor body that you do not call the constructor of the new base class. you correct one type alias and voilà, all base virtual function calls are correct. plus you scm does not show any text changes where there were no semantic changes (you still call base class virtual method, no matter what base class is).",0,0,0,0.9803653359413148,0.9736088514328004,0.9887661337852478,0.0,accept,unanimous_agreement
54728149,3989,"`{` to the next line we use `{` in the same line only after control statements (if, else, for, while, switch etc.). see coding_guidelines.md.",0,0,0,0.9885220527648926,0.9945863485336304,0.993868887424469,0.0,accept,unanimous_agreement
54728494,3989,but you have to fix it here. i meant to insert a blank line before access specifiers.,0,0,0,0.9863285422325134,0.9485684037208556,0.9924031496047974,0.0,accept,unanimous_agreement
54729602,3989,it does not require such alignment (we can't strive to do so in the general case; in this particular case you simply have the variable names of the same length). you just need to keep (our) rules for boolean expressions splitting (they have to split before operators) and rules of indentation (4 spaces as indent).,0,0,0,0.9853023290634156,0.992806911468506,0.9928622841835022,0.0,accept,unanimous_agreement
54730563,3989,"the same answer. i'm not going to argue about this. we have such rules. no need to break them. if they don't like me, can try to make a proposal with the best rules. but not here. this is a separate issue. i also do not like some rules. but the absence of any rules it is a great evil which makes the code unreadable. let's never return to this question in this way.",-1,-1,-1,0.9744695425033568,0.9896841049194336,0.8978433609008789,-1.0,accept,unanimous_agreement
54731513,3989,"i've seen this somewhere... c# or java (or something like that). i won't focus on this. ...unless new base class has the same functions :) okay, let it be. anyway all is not provided.",1,1,1,0.9809391498565674,0.9899742007255554,0.9865723848342896,1.0,accept,unanimous_agreement
54732661,3989,"oh, these names were carefully selected, you know :), in order to align such statements. but if you, guys, want it the other way, i'll change the alignment, of course.",1,1,1,0.960923433303833,0.7695875763893127,0.9764812588691713,1.0,accept,unanimous_agreement
54733788,3989,"this keyword was proposed for c++ too, and during discussion what to do with the multiple inheritance somebody came up with such a `typedef`, which solved the problem. yes, of course it has to have the same functions with the same signatures. qt's model classes are a good example of such base classes.",0,0,0,0.709816575050354,0.939712405204773,0.987534761428833,0.0,accept,unanimous_agreement
54733925,3989,"it is here already, isn't it?",0,0,0,0.9778123497962952,0.9905089139938354,0.9850299954414368,0.0,accept,unanimous_agreement
54734961,3989,"that is why i use `static_cast` for the parameter: we define types for the parameters, and then the compiler can find the best function it has, i don't want to limit it.",0,0,0,0.9800124764442444,0.9802944660186768,0.9909844398498536,0.0,accept,unanimous_agreement
54735600,3989,"well, i doubt this will be much simpler. sure, in one way we can do like [code block] but in the reverse way we have to find the most significant bit of a float number, and i don't know compiler- and platform-independent way to do this. do you? otherwise, i believe, there is no much sense to expel this simple loop.",0,0,0,0.6556137800216675,0.7601938247680664,0.5699114203453064,0.0,accept,unanimous_agreement
54735730,3989,yes. i already wrote this: you already corrected it. github just shows the old comment until now (probably because it is linked to the previous line).,0,0,0,0.986026406288147,0.9792206287384032,0.9836779832839966,0.0,accept,unanimous_agreement
54737353,3989,"not so. the compiler has nothing to choose with the deduction of the template parameters. if there is ambiguity, it leads to error.",0,0,0,0.9436726570129396,0.9737231135368348,0.9575168490409852,0.0,accept,unanimous_agreement
54737936,3989,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
54738272,3989,`setupui()` - yes. but not `retranslateui()`. `retranslateui()` called internally from `setupui()`.,0,0,0,0.9876163601875304,0.9946386218070984,0.994907557964325,0.0,accept,unanimous_agreement
54740311,3989,"sorry, i don't understand you. the third sentence is clear, but what mean the second one?",-1,-1,-1,0.9885108470916748,0.9903057813644408,0.9917306303977966,-1.0,accept,unanimous_agreement
54746390,3989,deduction of the parameters succeeds only if it gives an unambiguous result.,0,0,0,0.9527905583381652,0.990397572517395,0.9903097748756408,0.0,accept,unanimous_agreement
54748384,3989,"to my sadness, i still can not understand what do you want to tell me. my point is the following. i know there has to be a function `max()` which accepts two objects of the same type. i don't know whether the best match is provided by a function template or there is a regular overloaded function. to allow a compiler to include regular functions into the resolution list, i do not use template qualification, instead i cast the parameter.",-1,-1,-1,0.9385071992874146,0.97111976146698,0.9867634177207948,-1.0,accept,unanimous_agreement
54749589,3989,"oh well, that's understandable. i did not include here the regular functions (only templates)... although i'm pretty sure in this case they (regular functions `std::max`) are not exist, but let it remain as is.",0,0,0,0.9393749237060548,0.8712323307991028,0.9231749176979064,0.0,accept,unanimous_agreement
55392420,3989,why do you remove this?,0,0,0,0.9416723251342772,0.9580941796302797,0.9906022548675536,0.0,accept,unanimous_agreement
55393504,3989,"long story short, this is where all the history has started. we move unconditional filtering from here into the qbt gui and make it conditional. you can read explanations from in the issue #3812.",0,0,0,0.9427582025527954,0.9136734008789062,0.9711529016494752,0.0,accept,unanimous_agreement
55478614,3989,ok. thank you.,1,1,1,0.8207945227622986,0.9583298563957214,0.9453005194664,1.0,accept,unanimous_agreement
58002706,3989,"`qchar('""')` isn't enough here?",0,0,0,0.984119713306427,0.991978406906128,0.9926478862762452,0.0,accept,unanimous_agreement
58002818,3989,why do you use comments in this format?,0,0,0,0.964341402053833,0.9448050260543824,0.992721140384674,0.0,accept,unanimous_agreement
58002942,3989,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
58003091,3989,maybe use `widthlist.size()` here directly and remove redundant variable?,0,0,0,0.9885104298591614,0.9946607947349548,0.9917117357254028,0.0,accept,unanimous_agreement
58003101,3989,why not qstring constant?,0,0,0,0.9788000583648682,0.9627482295036316,0.9850292801856996,0.0,accept,unanimous_agreement
58003326,3989,please describe this meta-magic. this is really necessary here?,0,0,0,0.9819425940513612,0.9752041697502136,0.98982971906662,0.0,accept,unanimous_agreement
58003390,3989,same question as above.,0,0,0,0.9777299165725708,0.9889336824417114,0.9885220527648926,0.0,accept,unanimous_agreement
58060032,3989,"this is to save enum names instead of combobox index in the config file and, at the same time, to not duplicate those names in the code which does saving/loading. so the config file record reads: [code block] instead of [code block] i believe that this is better with respect to config file readability and possible further modifications. perhaps i have to add comment to the enum which would warn that name changes will break config reading.",0,0,0,0.9676478505134584,0.9929274916648864,0.9827978610992432,0.0,accept,unanimous_agreement
58062444,3989,these are [a link] comments. since you work on windows you might know c# xml comments which appear in generated documentation and in the ide tooltips. these serve the same purpose: doxygen can generate documentation and good ides show these comments. for instance: ![a link],0,0,1,0.6881500482559204,0.9812936186790466,0.9787895083427428,0.0,accept,majority_agreement
58062934,3989,to marginally decrease memory consumption.,0,0,0,0.9171958565711976,0.9475111365318298,0.9869384765625,0.0,accept,unanimous_agreement
58095251,3989,"it may be better to have this enum in the global namespace and to keep here only the functions (i.e., utilities)?",0,0,0,0.9871639013290404,0.9947696328163148,0.9906358122825624,0.0,accept,unanimous_agreement
58096321,3989,i think it's a good practice to name the ui elements with the class name suffix. for example: `filtermodecombo`.,0,0,0,0.9075393080711364,0.9794792532920836,0.7239047884941101,0.0,accept,unanimous_agreement
58096745,3989,why not `currentindexchanged` here?,0,0,0,0.9750794172286988,0.9933795928955078,0.9911773204803468,0.0,accept,unanimous_agreement
58096924,3989,`widthlist.size()` is of type `int` afaik.,0,0,0,0.9873419404029846,0.9935779571533204,0.995053768157959,0.0,accept,unanimous_agreement
58097463,3989,fix coding style! delete space after `(`.,0,0,0,0.965462565422058,0.9771021008491516,0.9788044691085817,0.0,accept,unanimous_agreement
58098001,3989,fix coding style! we starts new line with comma only in constructor initialization list.,0,0,0,0.9690076112747192,0.7679499983787537,0.5326345562934875,0.0,accept,unanimous_agreement
58098155,3989,"imo, `this` is redundant if it's not strongly required.",0,0,0,0.9719538688659668,0.9722355604171752,0.9811376333236694,0.0,accept,unanimous_agreement
58098775,3989,please fix param name to `parent` (not your mistake);,0,0,0,0.9856263995170592,0.9916204214096068,0.9903500080108644,0.0,accept,unanimous_agreement
58099318,3989,why this method is `public slot`? just `private` is enough for it.,0,0,0,0.9844282269477844,0.9890201687812804,0.9869726300239564,0.0,accept,unanimous_agreement
58101608,3989,this will break adl. what is the advantage?,0,-1,0,0.8014073967933655,0.912049114704132,0.9783006310462952,0.0,accept,majority_agreement
58102070,3989,i don't remember why i wanted to have the possibility to reapply the filter.,0,-1,0,0.7495291233062744,0.7484517097473145,0.9489027857780457,0.0,accept,majority_agreement
58102369,3989,not my code therefore i did not touch it.,-1,0,0,0.6871267557144165,0.9197041988372804,0.9652170538902284,0.0,accept,majority_agreement
58102877,3989,"technically yes, it is not needed. i've put it here to show the relation between the enum and the class.",0,0,0,0.9848778247833252,0.9862988591194152,0.9925330877304076,0.0,accept,unanimous_agreement
58103487,3989,the `slot` is a leftover. it used to be a receiver of the model signal. i'll remove that. but it has to be public because `searchwidget` calls it too.,0,0,0,0.9883562922477722,0.9910416007041932,0.9942446351051332,0.0,accept,unanimous_agreement
58316286,3989,"too bad qt creator doesn't do this. i am a bit skeptical of this. it might lead to loss of readability. but anyway, don't change this. this isn't a big problem for me atm.",-1,-1,-1,0.978354513645172,0.9823241233825684,0.9719818830490112,-1.0,accept,unanimous_agreement
58316418,3989,nitpicking: you could use qstring::startswith()/endswith() but anyway. no need to change it.,0,0,0,0.977139413356781,0.9852930903434752,0.989630162715912,0.0,accept,unanimous_agreement
58316517,3989,you can move the closing brace one line above and have the same base return outside the brace.,0,0,0,0.9882918000221252,0.989891529083252,0.9923287034034728,0.0,accept,unanimous_agreement
58316587,3989,i think it is more correct to do: [code block],0,0,0,0.9838705062866212,0.9611485004425048,0.9817684888839722,0.0,accept,unanimous_agreement
58316611,3989,same here,0,0,0,0.982987642288208,0.9628711938858032,0.99204421043396,0.0,accept,unanimous_agreement
58316613,3989,and here,0,0,0,0.9779892563819884,0.968537986278534,0.9837828278541564,0.0,accept,unanimous_agreement
58316654,3989,"the correct plural of the word leech is ""leeches"". please correct all variations of it.",0,0,0,0.9823501110076904,0.9846363067626952,0.9912365674972534,0.0,accept,unanimous_agreement
58316666,3989,"and of course add the source parent. btw, wouldn't it be beneficial to hold the sourcemodel() in a tmp variable at the top of the function? (for optimization and readability purposes).",0,0,0,0.98666512966156,0.9906862378120422,0.9950991272926332,0.0,accept,unanimous_agreement
58316756,3989,you can forward declare this.,0,0,0,0.9883326888084412,0.9809716939926147,0.9958541393280028,0.0,accept,unanimous_agreement
58316927,3989,is `this` really needed here?,0,0,0,0.9821658730506896,0.9911587834358216,0.9920926690101624,0.0,accept,unanimous_agreement
58317022,3989,i think you should load/save the values of the other filters too.,0,0,0,0.9882020354270936,0.9806591272354126,0.9882611632347108,0.0,accept,unanimous_agreement
58317080,3989,if you indeed elect to save/load the other values too then please convert to the way we already do things. eg look at the top of application.cpp [code block] but in any case prefix this with `key_`,0,0,0,0.9878410696983336,0.995156705379486,0.9947275519371032,0.0,accept,unanimous_agreement
58317126,3989,"i assume if you elect to save/load the other values too, it makes sense to do it inside updatefilter() instead.",0,0,0,0.9868066906929016,0.9902411699295044,0.9897509217262268,0.0,accept,unanimous_agreement
58317197,3989,unfortunately i think you need to break this up in multiple sub strings for 2 reasons. 1. any change in the html code will break all translations 2. some translator might forget an html tag and make the whole thing render weirdly. or worse insert his own tags.,-1,-1,-1,0.9657499194145204,0.9103661179542542,0.9262604117393494,-1.0,accept,unanimous_agreement
58317312,3989,i'll take it because there will be many changes anyway.,0,0,0,0.9823077917099,0.9782338738441468,0.9740272164344788,0.0,accept,unanimous_agreement
58317359,3989,sure.,0,0,0,0.9536533951759338,0.9664214849472046,0.9824982285499572,0.0,accept,unanimous_agreement
58317381,3989,i probably wanted to follow the enumerator identifier. let's correct that too?,0,0,0,0.9844924211502076,0.9832126498222352,0.991815984249115,0.0,accept,unanimous_agreement
58317429,3989,"btw, we can think about using doxygen for generating a .qch file for qt creator...",0,0,0,0.982878804206848,0.9932382106781006,0.9924261569976808,0.0,accept,unanimous_agreement
58317438,3989,agree.,0,0,0,0.9730729460716248,0.9867860674858092,0.98495215177536,0.0,accept,unanimous_agreement
58317451,3989,yes. from a quick look these need correction: 1. leechs 2. m_minleechs 3. m_maxleechs 4. leechs 5. setleechsfilter (and doxygen comments) 6. search is your friend :p,1,1,1,0.9315990805625916,0.9900453686714172,0.9859053492546082,1.0,accept,unanimous_agreement
58317484,3989,"i'm afraid that the following situation may lead to a confusion: 1. search foe a small file, set size filter for that. 2. forget about item 1. 3. perform a search for a large file, see no results.",-1,-1,-1,0.9398618340492249,0.9036573767662048,0.9650408625602722,-1.0,accept,unanimous_agreement
58317501,3989,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
58317506,3989,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
58317512,3989,"you can leave it for now. but i predict, after i release this, users will want the application to remember their ""defaults"".",0,0,0,0.9869076013565063,0.9880266189575196,0.991678774356842,0.0,accept,unanimous_agreement
58317556,3989,"i think by now we should save only ""search in"" combo.",0,0,0,0.9851697087287904,0.9834327697753906,0.9840375185012816,0.0,accept,unanimous_agreement
58318619,3989,"what a nice bug! it exists, but does not expose itself. wish they all learn from this one.",1,1,1,0.9625824689865112,0.9869295358657836,0.9948557615280152,1.0,accept,unanimous_agreement
58318785,3989,do you mean you should assign and not append? i admit i didn't catch too :s,-1,1,1,0.4336417913436889,0.9251123666763306,0.988722324371338,1.0,accept,majority_agreement
58319867,3989,"yes. obviously, the list was flooded with the copy of this word :) on 4 april 2016 at 00:25, sledgehammer999 notifications.com wrote:",1,1,1,0.9489991664886476,0.9937390089035034,0.9962137341499328,1.0,accept,unanimous_agreement
58329215,3989,"then maybe it is better to use qdoc? or would you call it ""deadborn"" too?",0,0,0,0.979451596736908,0.9923574328422546,0.988641321659088,0.0,accept,unanimous_agreement
175494434,8584,"when the user specifies ""skip checking"", it means that qbittorrent will not check the files, but will begin to seed them, assuming they already exist. this comment means ""it would be nice to check the files existence before"". your changes is meaningless since qbittorrent creates save folder when add torrent to session.",0,0,0,0.9839844107627868,0.9917417764663696,0.992192566394806,0.0,accept,unanimous_agreement
175539211,8584,"in the webui the user can specify whatever path they'd like. there's no guarantee that the path will actually exist- and that it isn't complete gibberish- so that's what this check is for. this has nothing to do with the ""skip checking"" option.",0,0,0,0.9805423021316528,0.9734260439872742,0.980542778968811,0.0,accept,unanimous_agreement
175797710,8584,"why did you delete this comment? it's just about ""skip checking"" option. then you should try to create it, but not check for its existence. as i said, it's allowed case when path doesn't exist before we add torrent.",0,0,0,0.9836455583572388,0.9925570487976074,0.9841251373291016,0.0,accept,unanimous_agreement
175892869,8584,"i think you're describing the case where the last directory doesn't exist. i'm focusing on the issue where the user specifies a path `/mnt1/disk/torrents/downloads` where `/mnt1` doesn't exist. surely in this case we shouldn't create that entire path, but throw an error.",0,0,0,0.972146213054657,0.9204392433166504,0.9868878722190856,0.0,accept,unanimous_agreement
175893317,8584,i don't want this commit to be the focus of this pr. if it's that contentious a change i'll gladly remove it.,-1,-1,-1,0.8808698058128357,0.7797570824623108,0.6456168293952942,-1.0,accept,unanimous_agreement
176006620,8584,"me too. i just wanted to clear the space for the main review. it is not as unambiguous as it may seem at first glance. it is better to move it in a separate pr. no, i'm describing common case. it should create save path even if it multilevel.",0,0,0,0.9542412757873536,0.9514047503471376,0.9736522436141968,0.0,accept,unanimous_agreement
176224543,8584,"i'll move it to a separate pr. in the case i described (`/mnt1/disk/torrents/downloads`) would you expect qbittorrent to create all directories, or would you expect an error for `/mnt1` not existing? i personally would expect the latter.",0,0,0,0.9886885285377502,0.9934422969818116,0.9951745867729188,0.0,accept,unanimous_agreement
176320369,8584,"i didn't say what i expected. i was talking about how it works now. but, imo, this behavior is quite expected, otherwise users (especially, remote users) will get a hell of a headache (it breaks some automations). p.s. let's continue this discussion in its own topic.",-1,-1,-1,0.8921190500259399,0.88393634557724,0.8662892580032349,-1.0,accept,unanimous_agreement
176481583,8584,"can you omit these? if there are any messages should print out, it should go through `logger`.",0,0,0,0.9892789721488952,0.9934508800506592,0.9959508180618286,0.0,accept,unanimous_agreement
176483905,8584,[code block] should be possible...,0,0,0,0.9855833053588868,0.993205428123474,0.9944314360618592,0.0,accept,unanimous_agreement
176484296,8584,i would omit curly braces here and other places.,0,0,0,0.9752868413925172,0.984069526195526,0.98995178937912,0.0,accept,unanimous_agreement
176484810,8584,"~~please refactor, use a variable or two here.~~",0,0,0,0.8851184248924255,0.974568247795105,0.9926021695137024,0.0,accept,unanimous_agreement
176485678,8584,and use `{}` replacing `qlist ()`,0,0,0,0.987317144870758,0.9930899739265442,0.9951724410057068,0.0,accept,unanimous_agreement
176486292,8584,why do you need this intermediate object? i mean qvariantmap.,0,0,0,0.9854544401168824,0.9825066924095154,0.9930450320243835,0.0,accept,unanimous_agreement
176487106,8584,use range-based `for()`,0,0,0,0.9862128496170044,0.9920875430107116,0.9952167272567748,0.0,accept,unanimous_agreement
176487321,8584,"""plugin is not supported."" without any particular information is quite meaningless message.",-1,-1,-1,0.9436187148094176,0.922607123851776,0.6768931746482849,-1.0,accept,unanimous_agreement
176487649,8584,`qset `?,0,0,0,0.9871177077293396,0.9928056597709656,0.9939444661140442,0.0,accept,unanimous_agreement
176488815,8584,can you explain your plan? or just remove it.,0,0,0,0.9847025275230408,0.982471525669098,0.9918389916419984,0.0,accept,unanimous_agreement
176489242,8584,"please use range-based `for`, this applies to all similar instances.",0,0,0,0.9862964153289796,0.9930480122566224,0.9945195317268372,0.0,accept,unanimous_agreement
176490448,8584,"~~i think this is wrong (in webapplication.cpp too), the `do while()` should be replaced by `if()`~~ nevermind.",0,0,0,0.7522071003913879,0.9218565821647644,0.8179993033409119,0.0,accept,unanimous_agreement
176491751,8584,`const qstringlist &plugins`,0,0,0,0.9859134554862976,0.9915750622749328,0.9946126937866212,0.0,accept,unanimous_agreement
176491856,8584,`const qlist &searchresults`,0,0,0,0.984811544418335,0.9908180236816406,0.9938309192657472,0.0,accept,unanimous_agreement
176492056,8584,same as [a link],0,0,0,0.9866743683815002,0.9871845841407776,0.9953129291534424,0.0,accept,unanimous_agreement
176492310,8584,"base headers should go first, please move up",0,0,0,0.987355649471283,0.9884302616119384,0.9950906038284302,0.0,accept,unanimous_agreement
176492590,8584,remove?,0,0,0,0.9761508703231812,0.984970211982727,0.9904542565345764,0.0,accept,unanimous_agreement
176492856,8584,`++i`,0,0,0,0.9751697182655334,0.9840044975280762,0.974772572517395,0.0,accept,unanimous_agreement
176494266,8584,"qqueue inherits from qlist, if you used `qlist m_stdoutqueue` instead, you can just `return m_stdoutqueue;` below.",0,0,0,0.9881688952445984,0.995808720588684,0.9947500824928284,0.0,accept,unanimous_agreement
176494864,8584,"or if you can predict some upper bound of the size of `m_stdoutqueue`, you should use `qvector` + `qvector::reserve()`",0,0,0,0.9814664125442504,0.9948705434799194,0.994862735271454,0.0,accept,unanimous_agreement
176495217,8584,`bool websearchhandler::isactive() const`,0,0,0,0.980211079120636,0.9908462166786194,0.9938575625419616,0.0,accept,unanimous_agreement
176495924,8584,`websearchhandler::getsearchresults() const`?,0,0,0,0.9797905683517456,0.9936780333518982,0.994714081287384,0.0,accept,unanimous_agreement
176498224,8584,"off topic, now c++ core guidelines actually has a recommendation for this: [a link]",0,0,0,0.9740334749221802,0.9188960194587708,0.9838392734527588,0.0,accept,unanimous_agreement
176504796,8584,"there are very abstract fears about `#pragma once`. all compilers supported by qbittorrent project support this directive, so i don't see any problem with it. its ""non-standard"" was well known at the stage of discussion, however, the decision was made in its favor.",0,0,0,0.7856382131576538,0.8901365995407104,0.9568787813186646,0.0,accept,unanimous_agreement
176625136,8584,`qdebug` and `logger` are both used pretty extensively in the codebase. is the `qdebug` way of logging deprecated?,0,0,0,0.9872373342514038,0.9857487082481384,0.9898906946182252,0.0,accept,unanimous_agreement
176626608,8584,"i didn't know about this inline form. thanks. because i don't know of another way. i'm still very new to c++, so when pointing out that there are other ways, suggestions are welcome.",1,1,1,0.9125022888183594,0.9923090934753418,0.9885777235031128,1.0,accept,unanimous_agreement
176631260,8584,i get this error when compiling with `+=` and `<<` ` webui/api/searchcontroller.cpp:233:34: error: no match for ‘operator+=’ (operand types are ‘qvariantlist {aka qlist }’ and ‘ ’) `,0,0,0,0.9767035841941832,0.9939733147621156,0.9930318593978882,0.0,accept,unanimous_agreement
176631344,8584,i limit the number of results to 500 (arbitrary number) so that the response isn't too large. though i'm switching to using `qlist::mid()` for this.,0,0,0,0.9782957434654236,0.98586106300354,0.992525577545166,0.0,accept,unanimous_agreement
176632860,8584,i haven't thought of a good way of handling this. removing.,-1,-1,-1,0.8360747694969177,0.842675507068634,0.943087100982666,-1.0,accept,unanimous_agreement
176638520,8584,"imo yes, we don't need to distribute these code/messages unless we want users to help debug something, even so, we can provide a discrete build for them instead of using qdebug.",0,0,0,0.9736288785934448,0.9845916032791138,0.9892916083335876,0.0,accept,unanimous_agreement
176640382,8584,i'll use the logger so that they'll be visible when the log is added to the webui. i'll also do this for when plugin updates fail - though this is admittedly a poor solution.,0,0,0,0.7949780225753784,0.5733786821365356,0.9249467849731444,0.0,accept,unanimous_agreement
176640731,8584,"you should use qjson types directly, unless you already have data in different format. qjsonobject has similar interface with qhash/qmap. qjsonarray has similar interface with qlist. you can do either: [code block] or (if you don't need intermediate variable): [code block] so please don't create qvariantxxx types only to convert it to qjsonxxx types (everywhere in this code).",0,0,0,0.9870773553848268,0.9939292669296264,0.9920663833618164,0.0,accept,unanimous_agreement
176641219,8584,"imo, qdebug is still usefull for dev-eyes-only messages (e.g. to indicate some important execution points etc.). also you free to use it as you want when you test some new code, but many of them are redundant in result and should be removed.",0,0,0,0.979790449142456,0.9864665865898132,0.9810922145843506,0.0,accept,unanimous_agreement
176642339,8584,"pardon, i updated the code above.",0,0,0,0.8468648791313171,0.945944368839264,0.9948323965072632,0.0,accept,unanimous_agreement
176644048,8584,"as i requested before, it should be qjsonobject/qjsonarray here too.",0,0,0,0.9885922074317932,0.9914783835411072,0.9960175156593324,0.0,accept,unanimous_agreement
176928114,8584,"qset doesn't maintain order of its elements, which is required for the webui implementation of categories.",0,0,0,0.9846646189689636,0.9823516011238098,0.9867464900016784,0.0,accept,unanimous_agreement
176928189,8584,"actually, each search job is identified by searchhandler instance so you can use its pointer as id. just serialize it.",0,0,0,0.9894405007362366,0.987908899784088,0.99445641040802,0.0,accept,unanimous_agreement
176932383,8584,there are potential security implications to exposing the pointer's memory address to the webui. i prefer the current process of pseudo-random id generation.,0,0,0,0.9111738204956056,0.969218909740448,0.976846158504486,0.0,accept,unanimous_agreement
176940731,8584,"what about just using a counter and increment it every time? i reckon this id doesn't really need to be strongly protected, or it should be?",0,0,0,0.9673504829406738,0.9745237827301024,0.98078191280365,0.0,accept,unanimous_agreement
176957814,8584,"i don't think it needs to be strongly protected, since it's only useful once the user has authenticated. i considered the counter approach but that's an additional state we'd have to track.",0,0,0,0.9816763401031494,0.978461742401123,0.9811619520187378,0.0,accept,unanimous_agreement
176977672,8584,if you don't need order in `m_searches` use qhash,0,0,0,0.988338589668274,0.9947465062141418,0.995118260383606,0.0,accept,unanimous_agreement
176986854,8584,order isn't needed here. i've swapped the `qmap` with `qhash`.,0,0,0,0.9886544942855836,0.9936923980712892,0.992635190486908,0.0,accept,unanimous_agreement
177165966,8584,`const qjsonobject result = {`,0,0,0,0.9815787076950072,0.983975112438202,0.9926477670669556,0.0,accept,unanimous_agreement
194682200,8584,"if you want to print all these messages in a log, you have to make them more meaningful. look at it through the eyes of the user. it must understand what is at stake.",0,0,0,0.8472766876220703,0.96944659948349,0.9505796432495116,0.0,accept,unanimous_agreement
194683476,8584,"searchpluginmanager already initializes it in its constructor, so this additional method isn't needed. just call `new searchpluginmanager;` in place you want to initialize it (e.g. [a link]",0,0,0,0.9873331785202026,0.992421805858612,0.994025707244873,0.0,accept,unanimous_agreement
194684984,8584,wrong! the param is correct itself. the more appropriate error is not found (since there is no such search job with the given id).,-1,-1,-1,0.8687236905097961,0.5176680088043213,0.935529351234436,-1.0,accept,unanimous_agreement
194686174,8584,notfound,0,0,0,0.9774054884910583,0.9454481601715088,0.9585947394371032,0.0,accept,unanimous_agreement
194686674,8584,notfound,0,0,0,0.9774054884910583,0.9454481601715088,0.9585947394371032,0.0,accept,unanimous_agreement
194686915,8584,when are you going to delete its instance?,0,0,0,0.9826166033744812,0.9894136190414428,0.9934425354003906,0.0,accept,unanimous_agreement
194687596,8584,"the query like ""search/categories?name=somename"" is confusing. what does name mean? shouldn't it be ""pluginname""?",-1,-1,-1,0.7257619500160217,0.5493534207344055,0.6680296063423157,-1.0,accept,unanimous_agreement
194689480,8584,"this is redundant info in all similar responses since it is always ""ok"".",0,0,0,0.9591233730316162,0.9859879612922668,0.9789589047431946,0.0,accept,unanimous_agreement
195283875,8584,i see now our existing apis all use not found for this. i'll change the error(s).,0,0,0,0.9885845184326172,0.9844030141830444,0.9937340617179872,0.0,accept,unanimous_agreement
195288918,8584,it'll get deleted here (will change this line) and also after a timer expires. i'm thinking 30 min.,0,0,0,0.9730241894721984,0.9807002544403076,0.9903311729431152,0.0,accept,unanimous_agreement
195677673,8584,you forgot to remove this method.,0,0,0,0.9693527221679688,0.9529800415039062,0.9866146445274352,0.0,accept,unanimous_agreement
195678000,8584,you can use `logmsg()` function instead.,0,0,0,0.9885823726654052,0.9936948418617249,0.9955440163612366,0.0,accept,unanimous_agreement
195679333,8584,many of these log messages are just a trash. i would leave only really necessary ones.,-1,0,0,0.936437726020813,0.8835018277168274,0.7143327593803406,0.0,accept,majority_agreement
195680052,8584,you also need remove the line `delete searchpluginmanager::instance();` from destructor and put it into appropriate place in application class.,0,0,0,0.988753080368042,0.9941348433494568,0.9950920343399048,0.0,accept,unanimous_agreement
195680962,8584,"it doesn't seem to be required here. please remind me, what is it for?",0,0,0,0.9627785682678224,0.9811076521873474,0.9854540824890136,0.0,accept,unanimous_agreement
195681433,8584,only forward references are required here for these types (except the qhash). includes should be moved to .cpp,0,0,0,0.9886388778686525,0.9952378273010254,0.9954480528831482,0.0,accept,unanimous_agreement
195681864,8584,fix typo in engine,0,0,0,0.9872784614562988,0.9859376549720764,0.9786277413368224,0.0,accept,unanimous_agreement
195810239,8584,"i would use ""status"" here.",0,0,0,0.9868640303611756,0.992401361465454,0.9908120036125184,0.0,accept,unanimous_agreement
195812755,8584,please don't use `const` in function declaration with non-pointer/non-reference types. it's useless and confusing. leave it in function definition only.,-1,-1,-1,0.8603541851043701,0.7603232264518738,0.5485978126525879,-1.0,accept,unanimous_agreement
195887277,8584,these messages are valuable for knowing what happens after triggering an action. but maybe the log isn't the right place for them. i think i might have to handle this in the webui...,0,0,0,0.9382294416427612,0.8738908767700195,0.901288628578186,0.0,accept,unanimous_agreement
195888742,8584,it's for `pluginversion`,0,0,0,0.9882517457008362,0.9940786361694336,0.9959854483604432,0.0,accept,unanimous_agreement
195889225,8584,is it not standard to put the include in the header file when the type is used in a function definition?,0,0,0,0.9790523648262024,0.9926177859306335,0.992473840713501,0.0,accept,unanimous_agreement
195899849,8584,"here are function declarations only. they're defined in .cpp. type definition isn't needed for the compiler when it just passed into function by pointer or by reference, or returned from function (it even unneeded if we use the pointer/reference without accessing to its content). so we can just forward declare it before.",0,0,0,0.9890064001083374,0.9946703314781188,0.993833303451538,0.0,accept,unanimous_agreement
195899904,8584,please don't produce unnecessary changes (especially where you don't know)! rss::autodownloader depends from rss::session so it should be created after rss::session.,0,0,0,0.8898309469223022,0.9779587984085084,0.929933488368988,0.0,accept,unanimous_agreement
195899946,8584,"and more... in most cases, the application components must be removed in reverse order. so if you create it: [code block] you should remove it: [code block]",0,0,0,0.9828181266784668,0.9908565282821656,0.986478626728058,0.0,accept,unanimous_agreement
195899973,8584,i said: so you can leave it here.,0,0,0,0.983686625957489,0.9391770362854004,0.9938173890113832,0.0,accept,unanimous_agreement
195900063,8584,"the messages like ""i'm going to do something..."", ""i started doing something..."", ""i'm doing something..."" is useless in the log in most cases. it is much more important to have here messages about the result of some actions, for example ""plugin *plugin_name* has been successfully updated.""",0,0,0,0.6966931819915771,0.9530513286590576,0.9801833629608154,0.0,accept,unanimous_agreement
196048367,8584,const qstring &plugin,0,0,0,0.9886354207992554,0.987204372882843,0.99516761302948,0.0,accept,unanimous_agreement
196048542,8584,const searchresult &searchresult,0,0,0,0.9860410094261168,0.9767555594444276,0.9912086725234984,0.0,accept,unanimous_agreement
196048813,8584,qregularexpression,0,0,0,0.9863675236701964,0.9753745198249816,0.9899398684501648,0.0,accept,unanimous_agreement
196049324,8584,(optional) i would use `logmsg()` instead of `logger::instance()->addmessage()` everywhere.,0,0,0,0.988701343536377,0.9940102100372314,0.9957281947135924,0.0,accept,unanimous_agreement
196049807,8584,"`.arg(id, sessionid)` and please check other similar instances, combine multiple .arg() whenever possible.",0,0,0,0.9863857626914978,0.9935855269432068,0.9942194223403932,0.0,accept,unanimous_agreement
196049984,8584,"`','`",0,0,0,0.9725193977355956,0.9787793755531312,0.9380285143852234,0.0,accept,unanimous_agreement
196050751,8584,please make it a single line.,0,0,0,0.9786240458488464,0.9891932606697084,0.983260452747345,0.0,accept,unanimous_agreement
196051302,8584,please give the body a new line: [code block],0,0,0,0.9882602691650392,0.9843854308128356,0.9960591793060304,0.0,accept,unanimous_agreement
196051570,8584,"since it only has 1 instance, i would prefer inline it.",0,0,0,0.977668046951294,0.9845166802406312,0.991792619228363,0.0,accept,unanimous_agreement
196146936,8584,you should use the session to store your searches (i think i already talked about this earlier). `isession::getdata()` and `isession::setdata()` should help you. see synccontroller code for example.,0,0,0,0.974368453025818,0.981727123260498,0.993970513343811,0.0,accept,unanimous_agreement
196197375,8584,"i initially attempted this, but faced some confusion. do we want to store the entire `searchhandler` object in the `isession`? how do we store this as a qvariant? i wasn't sure how to do this without adding additional methods to `isession`, which didn't seem like the right approach.",0,-1,0,0.8855997323989868,0.6340506672859192,0.9478359818458556,0.0,accept,majority_agreement
196394222,8584,e.g.: [code block],0,0,0,0.9792590141296388,0.9933766722679138,0.9948378205299376,0.0,accept,unanimous_agreement
197621225,8584,i wasn't aware this could differ between the function declaration and definition.,0,0,0,0.8242588639259338,0.5059490203857422,0.8818104267120361,0.0,accept,unanimous_agreement
197621380,8584,i'm adding back some messages and removing others. let me know if you think there are some that should still be removed.,0,0,0,0.9841524958610536,0.954907238483429,0.9868786931037904,0.0,accept,unanimous_agreement
197621641,8584,i didn't understand the implications of changing this. i'll change it back.,-1,0,-1,0.8298044204711914,0.6593916416168213,0.626213014125824,-1.0,accept,majority_agreement
197631714,8584,this means that rss::autodownloader uses rss::session and assumes that it already exists. so we need create rss::session before rss::autodownloader and delete in reverse order (rss::autodownloader can call rss::session methods in its constructor and destructor).,0,0,0,0.9889705181121826,0.9941540360450744,0.9934199452400208,0.0,accept,unanimous_agreement
197631802,8584,i still don't see you removing that code from the destructor.,0,0,0,0.9389467835426332,0.9260267615318298,0.93527489900589,0.0,accept,unanimous_agreement
197631840,8584,fix `value ()` => `value ()`,0,0,0,0.9867796897888184,0.9921727180480956,0.9924182891845704,0.0,accept,unanimous_agreement
197631902,8584,i don't see any valid reason to do it.,-1,-1,0,0.6965742707252502,0.6281936168670654,0.7887324094772339,-1.0,accept,majority_agreement
197632029,8584,it's overthinking. you can just remove it from collection. qsharedpointer will do the rest.,0,0,0,0.9745521545410156,0.9575834274291992,0.9767248034477234,0.0,accept,unanimous_agreement
197632056,8584,please return it as json too.,0,0,0,0.9863974452018738,0.9901385307312012,0.9956117272377014,0.0,accept,unanimous_agreement
197632085,8584,everywhere in this pr!,0,0,0,0.5128692984580994,0.3890998363494873,0.8210914731025696,0.0,accept,unanimous_agreement
197667854,8584,"this is to clean up the search job after a timeout. we don't want all jobs around for the life of the session, do we? if this isn't a concern i can remove it.",0,0,0,0.921435296535492,0.9713526368141174,0.991159975528717,0.0,accept,unanimous_agreement
197714083,8584,client side should control job lifetime within session boundaries. yes. it can be a problem in case of wrong use. but the timeout isn't the solution. it would be better to have max jobs limit.,0,0,0,0.9771648049354552,0.9737553000450134,0.968906581401825,0.0,accept,unanimous_agreement
197715374,8584,", why are you once again ignoring this comment?",-1,0,-1,0.6889153122901917,0.8903099298477173,0.5268719792366028,-1.0,accept,majority_agreement
197846454,8584,"sorry about that, i subsequently missed this comment when reviewing on github.",-1,-1,-1,0.9878706336021424,0.9931986927986144,0.987074375152588,-1.0,accept,unanimous_agreement
197852519,8584,"we can't rely on the web session calling delete on each search job. i don't foresee the webui doing this at all unless the user takes explicit action (e.g. closing the search tab), which very likely wouldn't happen. i think a clean up timer is our best option. i don't think a max jobs limit solves for this same issue. max jobs would prevent someone from maliciously spawning a bunch of jobs to try using all system resources. if a user has a long-lived webui session, and does many searches over time, should they suddenly no longer be allowed to run a new search?",0,0,0,0.9042885303497314,0.9114989638328552,0.978599727153778,0.0,accept,unanimous_agreement
197859279,8584,"why? what do you think it's for? when the session ends it destroys all session data. did i suggest to prevent it from start a new search? apparently, it wasn't clear enough... i meant delete the old search when the user starts a new one and the limit is exceeded.",0,0,0,0.834726095199585,0.7066396474838257,0.9225462675094604,0.0,accept,unanimous_agreement
197900110,8584,"it exists in the api for obvious reasons, but doesn't cleanly fit into the actual webui usage. unless the user takes an explicit action, like closing a search tab (as the current gui `searchwidget` does). in general i don't expect a user to close their search tabs- they may just close the browser tab entirely. of course, this is still a valid way to delete the search jobs. but we should also account for long-lived sessions. thanks for clarifying. i still fail to see why we would set an arbitrary limit on this, when this limit doesn't also exist in the gui (please correct me if this is wrong). my goal with the timer is to *eventually* delete the search job when the user session is long-lived and the user doesn't explicitly delete it. maybe all this is unnecessary and we just wait until the session is deleted to delete all search jobs.",1,0,1,0.6643598675727844,0.5919161438941956,0.9413183927536012,1.0,accept,majority_agreement
201880294,8584,"i've increased this timeout to 1 hour. i still firmly believe a timer is a good idea, but also welcome other input. web sessions are never deleted until the user clicks log out. which i strongly doubt any users actually do.",0,1,0,0.4866382479667663,0.7506201267242432,0.5721979737281799,0.0,accept,majority_agreement
201930553,8584,"i guess `searchcontroller::startaction()` could be invoked as many times as user want, the problem is qtimer could be a limited resource on some os, from qtimer doc: so maybe it is better to have a qmap that records the (id, start time) pair and have a single qtimer *private variable in class* that fires every hour.",0,0,0,0.9731296300888062,0.9917333126068116,0.9875521659851074,0.0,accept,unanimous_agreement
201962657,8584,", if you don't know something and you're not able to learn it from the code yourself, just ask next time. session inactive time is 15 minutes. it will be deleted after (in fact, it won't be deleted exactly in 15 minutes, as i avoid (over-)using timers where possible; actually it will be deleted on next sessions-related action, i.e. when user access this (outdated) session or try to start the new one). sessions ensure that resources are freed when the session is closed (by the user or as a result of a timeout). i agree that this is not enough in some cases. each search start causes the allocation of resources, so we need to make sure that it is not excessive. but what do we really want to prevent? what's wrong with having a user have one or more active searches throughout the session (even if it's active for a few hours)? on the other hand, what can we prevent by having a timeout for each search? nothing! how many searches can i run during this time? not even during hour, but just during couple of minutes?.. so i repeat again, we should limit the number of existing searches instead.",0,0,0,0.9626350402832032,0.9837946891784668,0.9598225355148317,0.0,accept,unanimous_agreement
201963302,8584,", please see [a link]",0,0,0,0.9774388670921326,0.9818108081817628,0.99325692653656,0.0,accept,unanimous_agreement
202086359,8584,"could you point me to where this happens in the code? i couldn't find it when i looked last night. if the session is cleared so aggressively then i'm less concerned about it. i should disable my ip whitelist rule so that i can see how often the session is recreated. it just happens in the background for me, without any auth prompt, so it appears to be one long session. the concern was around a long-lived (e.g. multi-day) session. i'll test to confirm, but this seems more unlikely now. i still don't think this is the right approach. the concern isn't concurrent sessions, it's sessions not being cleared over a long time period.",0,0,0,0.5749911665916443,0.7774190902709961,0.6974541544914246,0.0,accept,unanimous_agreement
202117887,8584,"i.e. do you want to allow a remote user to start unlimited number of searches? why should session be cleared when it's active (i.e. actually used)? please provide me an example of use case when long lived ""searches"" bring real problems (assuming there is max searches count limit exists).",0,0,0,0.9857729077339172,0.9892297387123108,0.9916717410087584,0.0,accept,unanimous_agreement
202129554,8584,you can search for inactive_time constant usages in webapplication code.,0,0,0,0.987384796142578,0.9934422969818116,0.9951202273368835,0.0,accept,unanimous_agreement
202528254,8584,"what limit would you impose? my point is that a search job may exist long after it's actually ""active,"" simply because the webui does not provide a good means of setting the search job as inactive. this is just a byproduct of how people use webpages. i really don't care to belabor this point any longer. if someone else wants to provide input, please do. otherwise i plan to have a search job timer (following 's suggestion to use a single timer).",-1,0,0,0.878735363483429,0.747018575668335,0.6679467558860779,0.0,accept,majority_agreement
202529732,8584,"now that i'm thinking about implementation, i'm inclined to set a limit of 10 concurrent searches. it would protect against hitting the qtimer limit and was already being suggested.",0,0,0,0.9659249186515808,0.9072412848472596,0.9841141700744628,0.0,accept,unanimous_agreement
204228006,8584,"this isn't needed imo, marking it `static` will make it reside in memory at all times. there more suitable one for marking static is max_concurrent_searches.",0,0,0,0.988730013370514,0.9835414290428162,0.9911422729492188,0.0,accept,unanimous_agreement
204230610,8584,but won't this variable only get initialized once anyway?,0,0,0,0.9815850257873536,0.9873268008232116,0.9907192587852478,0.0,accept,unanimous_agreement
204233454,8584,"yes, but also that the same memory/object of max_concurrent_searches will be shared by different `searchcontroller` instances (not that you really need them anyway...).",0,0,0,0.9883067011833192,0.987817883491516,0.9923382997512816,0.0,accept,unanimous_agreement
204356229,8584,"the variable names says ""correct"" while the message refer to its value as ""incorrect""",0,0,0,0.9783299565315248,0.9917364716529846,0.99150812625885,0.0,accept,unanimous_agreement
204366773,8584,"python version uses unsigned int, please change the comparison to `==`",0,0,0,0.987906813621521,0.9916967153549194,0.9951775074005128,0.0,accept,unanimous_agreement
204368868,8584,`plugins` is not a list? can't understand with respect to line 65 (below).,0,0,0,0.97889906167984,0.9767370820045472,0.9651726484298706,0.0,accept,unanimous_agreement
204371527,8584,duplicates `searchfinished()` (both as text and execution flow).,0,0,0,0.9871804118156432,0.9908127188682556,0.9865182042121888,0.0,accept,unanimous_agreement
204373112,8584,seems to be a bad decision to me. adds a counter-intuitive special case. i would use -1 instead. that would require to change line 138.,-1,-1,-1,0.972701370716095,0.953498899936676,0.9786192774772644,-1.0,accept,unanimous_agreement
204374892,8584,duplicates `searchfinished()`,0,0,0,0.9859224557876588,0.988365650177002,0.993501842021942,0.0,accept,unanimous_agreement
204375908,8584,redundant variable.,0,-1,0,0.941145956516266,0.5446004271507263,0.87708580493927,0.0,accept,majority_agreement
204375954,8584,redundant variable.,0,-1,0,0.941145956516266,0.5446004271507263,0.87708580493927,0.0,accept,majority_agreement
204375993,8584,redundant variable.,0,-1,0,0.941145956516266,0.5446004271507263,0.87708580493927,0.0,accept,majority_agreement
204376240,8584,maybe return a confirmation?,0,0,0,0.9836915731430054,0.9901047348976136,0.9926907420158386,0.0,accept,unanimous_agreement
204376425,8584,duplicates `seachfinished()`,0,0,0,0.985929787158966,0.989343285560608,0.9937439560890198,0.0,accept,unanimous_agreement
204377499,8584,can i reach dos state invoking this frequently enough?,0,0,0,0.988186240196228,0.9317801594734192,0.994335114955902,0.0,accept,unanimous_agreement
204377694,8584,can i reach dos state invoking this frequently enough?,0,0,0,0.988186240196228,0.9317801594734192,0.994335114955902,0.0,accept,unanimous_agreement
204382185,8584,~consider~ [code block] impossible because iterators in qt dictionaries returns value but not a pair when dereferenced.,0,0,0,0.9769749641418456,0.9922769069671632,0.9711472988128662,0.0,accept,unanimous_agreement
204382702,8584,doesn't seem to differ from `searchfinished()`,0,0,0,0.977583646774292,0.981322169303894,0.9910708665847778,0.0,accept,unanimous_agreement
204383866,8584,why do you test in line 311 without removing these characters?,0,0,0,0.9789344668388368,0.9677630662918092,0.9891307353973388,0.0,accept,unanimous_agreement
204396404,8584,what type of `plugin` do you expect?,0,0,0,0.9850673675537108,0.9926856756210328,0.99418842792511,0.0,accept,unanimous_agreement
204398251,8584,"oh, sorry. stupid qt dictionaries...",-1,-1,-1,0.9907729625701904,0.993650496006012,0.9963788390159608,-1.0,accept,unanimous_agreement
204472831,8584,"what do you mean exactly? and what do you suggest to change in line 138: `int limit = params()[""limit""].toint();` the idea is treat `limit <= 0` as unlimited. but if we pass 0 to `qlist::mid()` we will get empty result, since **qlist** use 0 as is.",0,0,0,0.9864035844802856,0.9936239719390868,0.9930906295776368,0.0,accept,unanimous_agreement
204481146,8584,"i suggest to use only negative number as absence of the limit: `int limit = params().value(""limit"", ""-1"").toint()`. that's right. i would expect exactly that. as a side note, ""limit"" seems to me a bad choice for the parameter name, which is ""count"". ""limit"" could mean ""offset"" + ""count"", the last index, and maybe something else.",0,0,0,0.7931708097457886,0.9848859906196594,0.9003254771232605,0.0,accept,unanimous_agreement
204485253,8584,", what exactly is wrong here? you have to copy keys into a dedicated container to iterate over them. is it not stupid?",-1,-1,-1,0.9665305018424988,0.971967339515686,0.988092601299286,-1.0,accept,unanimous_agreement
204486020,8584,"you've probably never dealt with sql? limit means ""upper bound on the number of rows returned by the entire select statement"" there. but you're certainly going to say something like ""stupid sql..."". imo, the ""limit"" term is better than ""count"", since it means ""at most n values"" but not ""exactly n values"" and that's exactly what we want here. or let the user request a deliberately empty result subset is a good idea for you? then explain why you need it.",-1,0,-1,0.9318148493766784,0.5045535564422607,0.7163572907447815,-1.0,accept,majority_agreement
204488483,8584,"have no idea what are you referring to, `select blah-blah limit 0` returns empty dataset. don't need it right away, of course, but can easily imagine scripting using the api and then 0 with a special meaning would add needless tests.",-1,0,0,0.6355199813842773,0.701352059841156,0.8912128806114197,0.0,accept,majority_agreement
204490414,8584,"i only referred to it to show this term might mean not only `""offset"" + ""count"", the last index, and maybe something else`... ok.",0,0,0,0.9679844975471495,0.9874717593193054,0.9895454049110411,0.0,accept,unanimous_agreement
204491322,8584,why don't use another way to iterate over it?,0,0,0,0.8735877275466919,0.9655326008796692,0.9850148558616638,0.0,accept,unanimous_agreement
204492317,8584,return to using iterators explicitly? or what did you suggest?,0,0,0,0.9865765571594238,0.9919533133506776,0.9917861819267272,0.0,accept,unanimous_agreement
204494724,8584,"that's exactly my point: ""limit"" might mean various things. probably not a big deal for sql, where one works with a particular dialect for years, but might be not so good for yet another application with its own api.",0,0,0,0.8859889507293701,0.946093201637268,0.976737916469574,0.0,accept,unanimous_agreement
204495499,8584,why not? or is it no longer fashionable?,0,0,0,0.7333105206489563,0.9134753942489624,0.9764922857284546,0.0,accept,unanimous_agreement
204496691,8584,"sure, everyone fancies the range based for loop. explicit iterators are so old-styled.",0,0,0,0.4838290214538574,0.7446889281272888,0.9064996242523192,0.0,accept,unanimous_agreement
204498482,8584,"imo, there is no place for fashion in programming. we should select the appropriate tool in each case.",0,0,0,0.9537035822868348,0.9290142059326172,0.9670493006706238,0.0,accept,unanimous_agreement
204607903,8584,"good catch, will fix this.",1,1,1,0.9617041945457458,0.9773650765419006,0.9912240505218506,1.0,accept,unanimous_agreement
204608552,8584,i'll also update the usage in `searchwidget.cpp`,0,0,0,0.9881412982940674,0.9928485155105592,0.9953180551528932,0.0,accept,unanimous_agreement
204609918,8584,"`plugins` is either a single plugin, `all`, `enabled`, or `multi` (carry over from gui that means `enabled`). this api should probably support a comma/pipe separated list of plugins to use.",0,0,0,0.989045023918152,0.9943276047706604,0.9939203262329102,0.0,accept,unanimous_agreement
204610637,8584,will refactor,0,0,0,0.9865407347679138,0.9643799662590028,0.994446873664856,0.0,accept,unanimous_agreement
204610839,8584,"`pluginmanager->checkforupdates()` doesn't return anything, so this would be a larger refactor.",0,0,0,0.9883559942245485,0.9928045868873596,0.9916913509368896,0.0,accept,unanimous_agreement
204610968,8584,is this function more vulnerable than any other api endpoint?,0,0,0,0.9304243326187134,0.7068561315536499,0.981219470500946,0.0,accept,unanimous_agreement
204614437,8584,`if (!utils::foreignapps::pythoninfo().isvalid())` would be better.,0,0,0,0.9749915599822998,0.9948380589485168,0.9900897741317748,0.0,accept,unanimous_agreement
204709748,8584,"%1 *out* of %2, probably",0,0,0,0.8575652241706848,0.9910287857055664,0.9542184472084044,0.0,accept,unanimous_agreement
204710465,8584,"i don't quite understand why do you call `removeactivesearch()` here, as it looks to me that `searchhandler::cancelsearch()` will emit the `searchfinished()` signal, thus calling `searchcontroller::searchfinished()` via the lambda defined above.",0,0,0,0.9624680876731871,0.957400381565094,0.96587336063385,0.0,accept,unanimous_agreement
204710719,8584,", could you comment on this, please?",0,0,0,0.9780634045600892,0.9862437844276428,0.9801658391952516,0.0,accept,unanimous_agreement
204711345,8584,"`qlist::append()` will concatenate lists, as well as `qlist::operator<<(const qlist&)`, so you can drop the looping.",0,0,0,0.988628089427948,0.9930663108825684,0.9939555525779724,0.0,accept,unanimous_agreement
204711887,8584,"could you, please, declare these keys as constants? i.e.: [code block]",0,0,0,0.9882938861846924,0.9942354559898376,0.9954169988632202,0.0,accept,unanimous_agreement
204712682,8584,"with as few as max 5 elements and string keys, `qmap` will be faster.",0,0,0,0.9856680631637572,0.9929744005203248,0.991263747215271,0.0,accept,unanimous_agreement
204714705,8584,"those two functions (update and install) consume resources and free them only after downloading (successfully or not) a file. if downloading speed is low, the resources can be acquires as many times as the api calls were made.",0,0,0,0.9878498911857604,0.9917823076248168,0.9926345944404602,0.0,accept,unanimous_agreement
204976952,8584,that's why i left the `limit` parameter as optional. you only need to send it if you explicitly want to impose a limit. i have to agree with this. i think count will be too confusing when the api returns fewer results.,0,0,0,0.8554346561431885,0.9209070801734924,0.9772391319274902,0.0,accept,unanimous_agreement
204978395,8584,"it would trigger downstream, but i like the removal to be explicit. it's also a fairly cheap operation",1,1,0,0.5699011087417603,0.5330111384391785,0.8368706107139587,1.0,accept,majority_agreement
204981204,8584,"in that case i suppose it's theoretically possible, though these apis are csrf-protected posts. only the user can invoke them.",0,0,0,0.9890044331550598,0.9832709431648254,0.9884262084960938,0.0,accept,unanimous_agreement
206154589,8584,"i beg your pardon for slowpoking, but the plural form has to be used here. could you, correct, please? `incorrect update data were received for %1 out of %2 plugins.`",-1,-1,-1,0.8025825619697571,0.7308622598648071,0.9463451504707336,-1.0,accept,unanimous_agreement
206156829,8584,for maintenance it would be cool to relocate the code for creating these values somewhere nearby (just a note).,0,0,0,0.903804361820221,0.984497845172882,0.9801009893417358,0.0,accept,unanimous_agreement
206162538,8584,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
206167287,8584,i would add [code block] to the `isession` class to shorten all the similar calls.,0,0,0,0.988698184490204,0.9913955330848694,0.994099497795105,0.0,accept,unanimous_agreement
206231180,8584,"why does this need to be so complicated? why is the id string first of all? could you explain, please, why a simple interger number does not suit here?",0,0,0,0.827366054058075,0.9261165261268616,0.9746923446655272,0.0,accept,unanimous_agreement
206264207,8584,`for (const qstring &pluginname : copyasconst(updateinfo.keys())) {`,0,0,0,0.9855130314826964,0.992170512676239,0.9937758445739746,0.0,accept,unanimous_agreement
206264317,8584,`for (const qstring &searchid : copyasconst(searchhandlers.keys())) {`,0,0,0,0.985081136226654,0.9925162196159364,0.9932401180267334,0.0,accept,unanimous_agreement
206264499,8584,`for (const qstring &category : copyasconst(searchpluginmanager::instance()->getplugincategories(name)))`,0,0,0,0.9849445223808287,0.990810751914978,0.9923208355903624,0.0,accept,unanimous_agreement
206280172,8584,`copyasconst` seems to be required only when the method returns a copy of an existing container rather than creating it.,0,0,0,0.988153874874115,0.9924095869064332,0.9925010800361632,0.0,accept,unanimous_agreement
209106710,8584,i think it sounds weird with the plural form. easy fix though: remove was/were entirely :),-1,1,-1,0.9451539516448976,0.8147665858268738,0.8509964346885681,-1.0,accept,majority_agreement
209107501,8584,this code was recycled from the webui session id generation.,0,0,0,0.9881986379623412,0.9943066239356996,0.994741678237915,0.0,accept,unanimous_agreement
209241193,8584,how does this address the question?,0,0,0,0.9714240431785583,0.97944438457489,0.9912759065628052,0.0,accept,unanimous_agreement
209245307,8584,i was responding to this question.,0,0,0,0.9499887824058532,0.9494030475616456,0.9455432295799256,0.0,accept,unanimous_agreement
209246271,8584,"errrr... thank you, of course, but why does the id need to be that complicated?",-1,-1,1,0.5745223760604858,0.9691381454467772,0.6643742918968201,-1.0,accept,majority_agreement
211088720,8584,i've switched the id over to using an integer.,0,0,0,0.9853188991546632,0.9895561337471008,0.9944615364074708,0.0,accept,unanimous_agreement
213193796,8584,"i skimmed through, just one last thing from me: [code block]",0,0,0,0.9602746367454528,0.9594328999519348,0.9874629974365234,0.0,accept,unanimous_agreement
214377567,8584,can i also omit the `copyasconst` from line 293: `for (const qstring &pluginname : copyasconst(updateinfo.keys())) {`? `updateinfo` is already const.,0,0,0,0.9885025024414062,0.9939518570899964,0.9959185719490052,0.0,accept,unanimous_agreement
214383713,8584,"yes, but not because it is already const.",0,0,0,0.966057300567627,0.9904104471206664,0.9926900267601012,0.0,accept,unanimous_agreement
216555790,8584,coding style is broken.,0,-1,-1,0.5356543660163879,0.8034518957138062,0.757427453994751,-1.0,accept,majority_agreement
216556074,8584,redundant empty line.,0,0,-1,0.8240636587142944,0.797183632850647,0.7013556957244873,0.0,accept,majority_agreement
218335003,8584,"it's wrong assumption. there are no post, get, etc. on this app level. it's not web api. it's just ""serial"" api, that gets serialized data, process it and returns serialized result. if you need some webapi related limitations you need to implement them one level up.",0,0,0,0.6881321668624878,0.6843320727348328,0.8921496272087097,0.0,accept,unanimous_agreement
218477760,8584,i just thought you were focusing on the request method...,0,0,0,0.9489343166351318,0.920483648777008,0.9821892380714417,0.0,accept,unanimous_agreement
120285247,6911,this is shorter: [code block],0,0,0,0.980079710483551,0.990952491760254,0.9951596856117249,0.0,accept,unanimous_agreement
120285632,6911,"`template whitespace < `, please.",0,0,0,0.985191285610199,0.9893061518669128,0.9903258085250854,0.0,accept,unanimous_agreement
120285877,6911,you may write [code block],0,0,0,0.9888145327568054,0.99002343416214,0.9954611659049988,0.0,accept,unanimous_agreement
120286617,6911,"camelcase, please, for both parameters.",0,0,0,0.9886533617973328,0.9887155890464784,0.9908232688903807,0.0,accept,unanimous_agreement
120287162,6911,why are these two condition pairs not joined under a single `if`?,0,0,0,0.970443844795227,0.9893051385879515,0.9853317141532898,0.0,accept,unanimous_agreement
120287628,6911,"camelcase, please (`settoentrydict()`)",0,0,0,0.9891364574432372,0.9931685924530028,0.9942839741706848,0.0,accept,unanimous_agreement
120307178,6911,isn't `(qstring() == qstring()) == true` and as such this and the next comparisons are redundant?,0,0,0,0.9814650416374208,0.991715967655182,0.9939180612564088,0.0,accept,unanimous_agreement
120404363,6911,use `qset::fromlist()` and `qset::tolist()`.,0,0,0,0.9883158802986144,0.9919679760932922,0.9948009252548218,0.0,accept,unanimous_agreement
120405768,6911,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
120405800,6911,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
120407826,6911,"it's better not to use such ""silently ignore wrong type"" approach. put `q_assert(entry.type() == entry::dict_t)` at start of this function. you should perform checking at caller side (ie where you call `entrydicttoset()`).",0,0,0,0.980492353439331,0.992621898651123,0.9908173084259032,0.0,accept,unanimous_agreement
120412911,6911,qt containers are implicitly shared so you don't need return const reference. use `qset session::tags() const`.,0,0,0,0.9888182282447816,0.9942409992218018,0.99380362033844,0.0,accept,unanimous_agreement
120413397,6911,isempty,0,0,0,0.9725689888000488,0.9427944421768188,0.9397313594818116,0.0,accept,unanimous_agreement
120414157,6911,`qset::remove()` returns `bool` so drop `> 0`.,0,0,0,0.9831680655479432,0.9935710430145264,0.9929641485214232,0.0,accept,unanimous_agreement
120414947,6911,what's the point of these (torrenttagadded and torrenttagremoved) signals?,0,0,0,0.974721133708954,0.9940171241760254,0.9457324147224426,0.0,accept,unanimous_agreement
120415740,6911,settoentrydict,0,0,0,0.9876714944839478,0.990492045879364,0.9923306703567504,0.0,accept,unanimous_agreement
120416563,6911,why dou you store tags as dictionary? why not as list?,0,0,0,0.9750847220420836,0.9740971326828004,0.9854073524475098,0.0,accept,unanimous_agreement
120417022,6911,why not `isvalidtag()`?,0,0,0,0.9832853674888612,0.9907124638557434,0.9909666776657104,0.0,accept,unanimous_agreement
120419672,6911,why would you say it's not like the existing names? e.g. `anytag`.,0,0,0,0.9671284556388856,0.9624904990196228,0.98776775598526,0.0,accept,unanimous_agreement
120420238,6911,you should change it with your name/email.,0,0,0,0.9839015603065492,0.9896388053894044,0.9948461055755616,0.0,accept,unanimous_agreement
120420511,6911,"move this include one line up (before ""base/bittorrent/torrenthandle.h"").",0,0,0,0.9890995621681212,0.9939292669296264,0.995261013507843,0.0,accept,unanimous_agreement
120420952,6911,fix coding style: [code block] `{}` is for empty methods (like destructor below).,0,0,0,0.9895719289779664,0.9941834807395936,0.9942896366119384,0.0,accept,unanimous_agreement
120424166,6911,you should check invariant here. use `q_assert(m_torrentscount >= 0);`,0,0,0,0.9837364554405212,0.995310604572296,0.9958431124687196,0.0,accept,unanimous_agreement
120424341,6911,or `q_assert(m_torrentscount > 0);` at method start.,0,0,0,0.988444447517395,0.9941771030426024,0.9942502975463868,0.0,accept,unanimous_agreement
120424594,6911,please use qt5 connect syntax in new code.,0,0,0,0.9840195178985596,0.9939520955085754,0.9948540329933168,0.0,accept,unanimous_agreement
120424926,6911,"in qtcreator you can use ""refactor -> convert connect() to qt 5 style"".",0,0,0,0.9890958666801452,0.9942635893821716,0.9955717325210572,0.0,accept,unanimous_agreement
120425215,6911,fix variable name according to qbittorrent coding style: `m_tagitems`.,0,0,0,0.9883410334587096,0.9948564767837524,0.9947086572647096,0.0,accept,unanimous_agreement
120426664,6911,use either [code block] or [code block],0,0,0,0.9873508810997008,0.9888912439346312,0.9956703186035156,0.0,accept,unanimous_agreement
120427031,6911,`m_tagrows`,0,0,0,0.985803723335266,0.9907516241073608,0.9930021166801452,0.0,accept,unanimous_agreement
120427616,6911,check for item existence before!,0,0,0,0.9819788336753844,0.92985200881958,0.9940592050552368,0.0,accept,unanimous_agreement
120428658,6911,`qstring tagfiltermodel::getspecialalltag()`,0,0,0,0.964874804019928,0.9931841492652892,0.9936271905899048,0.0,accept,unanimous_agreement
120435045,6911,why do you use pointers for al_tag and untagged_tag?,0,0,0,0.9765639305114746,0.9908535480499268,0.9917730689048768,0.0,accept,unanimous_agreement
120435483,6911,"iirc, `bittorrent::session::isvalidtag()` returns **true** for both al_tag and untagged_tag.",0,0,0,0.988220989704132,0.9937969446182252,0.9923210740089417,0.0,accept,unanimous_agreement
120435756,6911,untaggedcount,0,0,0,0.9846810102462769,0.9258125424385072,0.9844006896018982,0.0,accept,unanimous_agreement
120435890,6911,`[](torrent *torrent)`,0,0,0,0.9866901636123656,0.9917518496513368,0.992608368396759,0.0,accept,unanimous_agreement
120436152,6911,`torrent *torrent`,0,0,0,0.9842678904533386,0.9932326078414916,0.988228678703308,0.0,accept,unanimous_agreement
120438021,6911,move methods at top of fields.,0,0,0,0.9859082102775574,0.9889754056930542,0.9927458167076112,0.0,accept,unanimous_agreement
120438741,6911,isn't this method redundant? `qmap::value` does the same.,0,0,0,0.9848824143409728,0.9890284538269044,0.9919341802597046,0.0,accept,unanimous_agreement
120517572,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120517580,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120517610,6911,"done. fyi, this line was inserted by uncrustify, so the script may need fixing.",0,0,0,0.9863001704216005,0.986014723777771,0.984546422958374,0.0,accept,unanimous_agreement
120517615,6911,done. again uncrustify.,0,0,-1,0.7988697290420532,0.8935773372650146,0.6367843151092529,0.0,accept,majority_agreement
120517626,6911,thanks for pointing that out. i read up on qt's containers after reading your comments.,1,1,1,0.8696275353431702,0.8733788132667542,0.9788689017295836,1.0,accept,unanimous_agreement
120517630,6911,isvalidtag() is fine. done.,0,0,0,0.5548827052116394,0.726563572883606,0.9734109044075012,0.0,accept,unanimous_agreement
120517640,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120517655,6911,"the tag filter has a special ""untagged"" filter for torrents that have 0 tags assigned to them. any time you add a tag to a torrent that was previously untagged, you need to remove it from the that filter. any time you remove the last tag from a torrent, you need to add it to that filter. this is why a count of the number of tags is passed with the signal.",0,0,0,0.9856136441230774,0.993410050868988,0.9891007542610168,0.0,accept,unanimous_agreement
120517682,6911,dictionary keys seemed more semantically similar to a set. not a strong preference though. it would be fine to switch it to a list if that's what you want.,0,0,0,0.9685991406440736,0.9688671827316284,0.9742131233215332,0.0,accept,unanimous_agreement
120517701,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
120517714,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
120518046,6911,"yeah, i went back and forth on whether to call it anytag. this issue is that what these things functionally mean is ""select all torrents regardless of hash / category / tag"". anyhash is an accurate name because all torrents have a hash. anytag is not accurate because not all torrents have tags. thus this filter would also include torrents that do not have ""any tag"". perhaps it would be better if they were all changed to *filteringdisabled to be consistent.",0,0,0,0.979487955570221,0.984565019607544,0.9532515406608582,0.0,accept,unanimous_agreement
120518060,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518069,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
120518082,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518091,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
120518098,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518107,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
120518123,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518147,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518155,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518165,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518181,6911,"this is a design pattern for safely using objects with static storage duration. allocating them inside a function ensures thread-safe initialization with well-defined order. by allocating them with new and never destroying them (hence the pointers), you avoid potential race conditions caused by the fact that the c++ compiler only provides weak guarantees on destructor ordering for static objects. there is no specific issue with this code that requires it, it's just good general practice to avoid bugs being introduced later. you are right about isvalidtag - good catch. it was missing a call to trimmed() on the string to catch whitespace-only tags.",0,1,1,0.6897004842758179,0.6196719408035278,0.893312394618988,1.0,accept,majority_agreement
120518211,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518243,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518248,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518264,6911,"it's probably worth keeping as a convenience wrapper since it gets called a lot, but i used qmap::value to make it a little more succinct.",0,0,0,0.9399383068084716,0.9837105870246888,0.9776436686515808,0.0,accept,unanimous_agreement
120518277,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120518284,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120528822,6911,"minor thing: `!tag.contains(',')`",0,0,0,0.9567461609840392,0.955184280872345,0.9482920169830322,0.0,accept,unanimous_agreement
120528880,6911,`bool hastag(const qstring &tag) const;`,0,0,0,0.9833911657333374,0.9894054532051086,0.99410218000412,0.0,accept,unanimous_agreement
120528974,6911,use camel case for `new_tag_count` and below,0,0,0,0.988132894039154,0.994902729988098,0.9939059615135192,0.0,accept,unanimous_agreement
120529148,6911,you should use camel case for variable names (pls check the whole pr).,0,0,0,0.9889196753501892,0.9912834167480468,0.9942756295204164,0.0,accept,unanimous_agreement
120529537,6911,i would prefer doing checks in 2 steps: [code block],0,0,0,0.9743911027908324,0.979056715965271,0.991253674030304,0.0,accept,unanimous_agreement
120530323,6911,pls move to below of `torrent_added_notifications`,0,0,0,0.9888355135917664,0.9936581254005432,0.9949634075164796,0.0,accept,unanimous_agreement
120530472,6911,add empty line before and after,0,0,0,0.9813671708106996,0.984375536441803,0.9920005798339844,0.0,accept,unanimous_agreement
120530500,6911,add empty line before and after if you want.,0,0,0,0.9835929870605468,0.986844539642334,0.9915372133255004,0.0,accept,unanimous_agreement
120530765,6911,`qstringlist::join`?,0,0,0,0.9842668175697328,0.9936903715133668,0.9944841265678406,0.0,accept,unanimous_agreement
120530873,6911,"pls use qt5 connect syntax, everywhere pls.",0,0,0,0.9892696738243104,0.993588089942932,0.9952390193939208,0.0,accept,unanimous_agreement
120531078,6911,~~you can omit this last parameter.~~ update: don't change it,0,0,0,0.9591320157051086,0.9841391444206238,0.992766499519348,0.0,accept,unanimous_agreement
120531152,6911,combine [code block] and split line if too long,0,0,0,0.979420006275177,0.9903656244277954,0.992473840713501,0.0,accept,unanimous_agreement
120531330,6911,"no need for `pref`, pls inline",0,0,0,0.9886953234672546,0.9903239011764526,0.9936498999595642,0.0,accept,unanimous_agreement
120531662,6911,`tr(dialog_title.tostdstring().c_str())` this is not translatable. and why not just use `dialog_title` here?,0,0,0,0.9845236539840698,0.990921914577484,0.9932472705841064,0.0,accept,unanimous_agreement
120531726,6911,`bool ok = false;`,0,0,0,0.9706118702888488,0.9876054525375366,0.992071807384491,0.0,accept,unanimous_agreement
120531809,6911,pls give a default value,0,0,0,0.9879267811775208,0.9786818623542786,0.9930480122566224,0.0,accept,unanimous_agreement
120531954,6911,"`tr(error.tostdstring().c_str())` won't work, use e.g. `tr(""abc %1 %2"").arg(""first"").arg(""second"")`",0,0,0,0.9856945872306824,0.9933741688728333,0.9921017289161682,0.0,accept,unanimous_agreement
120532088,6911,"also, i would prefer `while () {}` if possible.",0,0,0,0.9853502511978148,0.9919449687004088,0.993749499320984,0.0,accept,unanimous_agreement
120562150,6911,"the interface of the object should be meaningful regardless of who uses it and how. in your case, the session ""says"": my torrent added (removed) tag, but does not indicate on this torrent. look at other similar signals and do your same. besides, you must omit ""new tag count"" parameter, because the observer can obtain it from the torrent itself (`torrent->tags().count()`).",0,0,0,0.9872565269470216,0.9906286597251892,0.9936730861663818,0.0,accept,unanimous_agreement
120562627,6911,", i hope i don't need to comment all points with same issues. if i comment something you should deal with other similar code too.",0,0,0,0.8761729598045349,0.785636842250824,0.7074978351593018,0.0,accept,unanimous_agreement
120562876,6911,and it would be better to enclose this expression: [code block],0,0,0,0.9857650399208068,0.9891844987869264,0.9950372576713562,0.0,accept,unanimous_agreement
120563143,6911,"as i said above it should be changed to `void handletorrenttagadded(torrenthandle *const torrent, const qstring &tag)`.",0,0,0,0.9877035617828368,0.9930707812309264,0.995752215385437,0.0,accept,unanimous_agreement
120564222,6911,please do it. i don't see any serious reasons not to.,-1,0,0,0.5321869254112244,0.773897647857666,0.7670655250549316,0.0,accept,majority_agreement
120587708,6911,"in other words it means ""filter accepts torrents with any hash/category/tag"" (""any tag"" means any tag or any set of tag or no tag, there is nothing wrong) so current names are valid.",0,0,0,0.9885509610176086,0.9893942475318908,0.992786467075348,0.0,accept,unanimous_agreement
120588599,6911,shouldn't we have a more strict rule for tags? i would allow only alphanumeric characters and perhaps spaces. also i would limit the maximum length of the tag.,0,0,0,0.9838929176330566,0.99011492729187,0.9867120981216432,0.0,accept,unanimous_agreement
120687412,6911,no. qset::fromlist is shorter.,0,0,0,0.9604767560958862,0.9779451489448548,0.9908213019371032,0.0,accept,unanimous_agreement
120687680,6911,no. qset::tolist is shorter.,0,0,0,0.9608883261680604,0.9842789769172668,0.9898059964179992,0.0,accept,unanimous_agreement
120687763,6911,i forgot to remove outdated comments :(,-1,-1,-1,0.9905112385749816,0.9864848852157592,0.9644854068756104,-1.0,accept,unanimous_agreement
120688541,6911,"see comment in the code above. the problem is `qstring() == qstring("""")` is true.",0,0,0,0.9860405921936036,0.9942942261695862,0.9941164255142212,0.0,accept,unanimous_agreement
120784873,6911,"yeah, that makes sense. done.",0,0,0,0.9227612018585204,0.6911407113075256,0.9200652837753296,0.0,accept,unanimous_agreement
120784954,6911,"i switched it back to anytag and added a comment explaining that ""any"" means any permutation rather than any individual item.",0,0,0,0.9871279001235962,0.9910998940467834,0.9932265877723694,0.0,accept,unanimous_agreement
120785004,6911,"i appreciate your patience, and apologize to the reviewers for not catching more of these minor style issues before sending the pr. i went through the diffs again and tried to apply all the general comments. sorry if i have missed anything.",-1,-1,-1,0.481935441493988,0.9858360290527344,0.9793883562088012,-1.0,accept,unanimous_agreement
120785065,6911,"string-to-char: done. curious, why do you prefer wrapping the return statement? about strict tags, i would really prefer not restricting characters too much. when using similar systems in other torrent clients, i have often found it useful to be able to include non-alphanum symbols. just as one example, there is a band named ""!"". i can see the motivation for restricting the maximum length because super long tags could cause issues with the ui. do you have a specific value in mind? i don't see any limit on category lengths, but maybe i am missing it.",0,0,0,0.6162478923797607,0.8111140727996826,0.9313787221908568,0.0,accept,unanimous_agreement
120785088,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
120785102,6911,fixed as above.,0,0,0,0.9804685115814208,0.9908767342567444,0.9944182634353638,0.0,accept,unanimous_agreement
120785206,6911,"yeah, sorry for making you guys point this minor style guide stuff out. i have to use the other style all day at work, so it is a battle against my instincts.",-1,-1,-1,0.9893158674240112,0.9903345704078674,0.9923480749130248,-1.0,accept,unanimous_agreement
120785213,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785229,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785239,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785254,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785264,6911,good call.,1,1,1,0.963204562664032,0.9749934673309326,0.9718003869056702,1.0,accept,unanimous_agreement
120785270,6911,i figured consistent syntax should be used within a file. i went ahead and ported all the old code's calls to qt5 as well so the file would be consistent.,0,0,0,0.982597291469574,0.9726786017417908,0.9885715842247008,0.0,accept,unanimous_agreement
120785291,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
120785300,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785310,6911,i moved the tr()'s to the call sites. there are actually only two possible values for the title.,0,0,0,0.9884727597236632,0.9888401627540588,0.9937216639518738,0.0,accept,unanimous_agreement
120785327,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
120785336,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785342,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785350,6911,no problem.,0,0,0,0.9470120072364808,0.9306607842445374,0.7675672173500061,0.0,accept,unanimous_agreement
120785377,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785390,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
120785412,6911,rendered obsolete.,0,0,0,0.5166370868682861,0.8360823392868042,0.8729898929595947,0.0,accept,unanimous_agreement
120786517,6911,it needs to be separate because there are 3 different cases here: - both torrent and session have the tag already (do nothing). - the session has the tag but the torrent doesn't (add the tag to the torrent). - neither the session nor the torrent has the tag (add the tag to both of them). ...and i have actually split these conditionals up further at the request of another review comment.,0,0,0,0.9768798351287842,0.9931106567382812,0.9852414727211,0.0,accept,unanimous_agreement
120786631,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121074241,6911,redundant variable.,0,-1,0,0.941145956516266,0.5446004271507263,0.87708580493927,0.0,accept,majority_agreement
121074539,6911,you might want to shorten this into a single `return` statement: [code block],0,0,0,0.9877145290374756,0.9906471371650696,0.994553565979004,0.0,accept,unanimous_agreement
121074835,6911,you might want to shorten this into a single statement: [code block],0,0,0,0.9866329431533812,0.9907241463661194,0.9934945702552797,0.0,accept,unanimous_agreement
121075321,6911,can be shortened to a single `return` statement.,0,0,0,0.9862629175186156,0.993090569972992,0.9926815629005432,0.0,accept,unanimous_agreement
121115770,6911,"i don't see any sense in keeping twice the data for two special cases. imo, a function `qstring tagdisplayname(const qstring &tag)` would be a better choice.",0,0,0,0.9224474430084229,0.9729830026626588,0.836834728717804,0.0,accept,unanimous_agreement
121116045,6911,unneeded line break.,0,0,0,0.8900696039199829,0.9104407429695128,0.9268866777420044,0.0,accept,unanimous_agreement
121118559,6911,plasma icons themes contain special icons for tags. it might make sense to use them here (optionally). for example: [code block],0,0,0,0.9858967661857604,0.9945250749588012,0.9926503300666808,0.0,accept,unanimous_agreement
121119372,6911,you do search second time here (the first was two lines above).,0,0,0,0.9883698225021362,0.9887403845787048,0.9935054779052734,0.0,accept,unanimous_agreement
121119437,6911,same here (search twice for the same item).,0,0,0,0.9873393774032592,0.9736887216567992,0.991256594657898,0.0,accept,unanimous_agreement
121119513,6911,... and here,0,0,0,0.9442026615142822,0.9229496121406556,0.904207408428192,0.0,accept,unanimous_agreement
121119787,6911,why pointer?,0,0,0,0.9489790797233582,0.9031893610954284,0.9895949363708496,0.0,accept,unanimous_agreement
121120034,6911,why not `using bittorrent::torrenthandle`? why did you change the name?,0,0,0,0.9636868834495544,0.9935592412948608,0.99356609582901,0.0,accept,unanimous_agreement
121120610,6911,and if `item == nullptr` what does it mean? dis-synchronization between the model and actual tags? shouldn't it be reported to log or in another way?,0,0,0,0.981007158756256,0.9936489462852478,0.9936047196388244,0.0,accept,unanimous_agreement
121120992,6911,"questionable decision, imo.",-1,-1,-1,0.9445658326148988,0.7674363255500793,0.9229871034622192,-1.0,accept,unanimous_agreement
121125841,6911,"move comma to the previous line, please.",0,0,0,0.9868832230567932,0.9885446429252625,0.9476300477981568,0.0,accept,unanimous_agreement
121126139,6911,"`geticon(""tag-new"", ""list-add"")`",0,0,0,0.9862188696861268,0.9926119446754456,0.9935797452926636,0.0,accept,unanimous_agreement
121126277,6911,"`geticon(""tag-delete"", ""list-remove"")`",0,0,0,0.9870890974998474,0.9930101037025452,0.9940908551216124,0.0,accept,unanimous_agreement
121126537,6911,maybe it would be better to show this action disabled? for consistency.,0,0,0,0.9780060052871704,0.9921430349349976,0.9668750762939452,0.0,accept,unanimous_agreement
121142932,6911,"move comma to the previous line, please.",0,0,0,0.9868832230567932,0.9885446429252625,0.9476300477981568,0.0,accept,unanimous_agreement
121144262,6911,"the action text is not consistent with the two actions above. consider removing "" tags"" from those two actions. also consider ""tag-add"" and ""tag-delete"" icons, please.",0,0,0,0.9832679629325868,0.9926642775535583,0.9895281195640564,0.0,accept,unanimous_agreement
121174494,6911,"this is a subjective opinion (i don't remember that we had something about this in the coding style, though there is something similar in the initialization list of constructors). personally last time i prefer to start all line breaks from the operator or comma.",0,0,0,0.8445541262626648,0.6747927665710449,0.9579540491104126,0.0,accept,unanimous_agreement
121176350,6911,"iirc, this is common behavior of all torrent filter widgets. it looks like one widget composed of several full-sized subwidgets.",0,0,0,0.9825658798217772,0.974493443965912,0.974845290184021,0.0,accept,unanimous_agreement
121179980,6911,"right, but (a) tag list can become long and (b) user might want to correlate tags with trackers and categories.",0,0,0,0.9888131022453308,0.9884805679321288,0.9908336997032166,0.0,accept,unanimous_agreement
121183509,6911,maybe this is really not appropriate place for tags widget? i still think we should leave basic tags support in this pr and start any advanced investigations later.,0,0,0,0.9407230615615844,0.9678995013237,0.9061896800994872,0.0,accept,unanimous_agreement
121194691,6911,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
121551284,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121551297,6911,"done, but i had to replace the braces with a direct call to the container constructor, because the compiler cannot deduce the correct type from braces in a conditional.",0,0,0,0.9882043600082396,0.9833434820175172,0.993024468421936,0.0,accept,unanimous_agreement
121551309,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121551315,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121551323,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121551348,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121551541,6911,"ok. maybe it's because i don't have any additional themes installed on my development machine, but it looks the same as before.",0,0,0,0.9770148992538452,0.9797784090042114,0.954059362411499,0.0,accept,unanimous_agreement
121551585,6911,"yes, this is as intended. they are searching for different items. the first one searches for the special ""untagged"" entry, the second one searches for the tag that was just added.",0,0,0,0.985371232032776,0.9840660691261292,0.9920382499694824,0.0,accept,unanimous_agreement
121551602,6911,as above.,0,0,0,0.978552520275116,0.9878018498420716,0.9881609678268432,0.0,accept,unanimous_agreement
121551622,6911,as above.,0,0,0,0.978552520275116,0.9878018498420716,0.9881609678268432,0.0,accept,unanimous_agreement
121551667,6911,"[a link] this is the second question i've gotten on this, so if people feel this idiom is too obscure and hurts readability, we can get rid of the static and just create a new string object on every call.",0,0,0,0.8296226263046265,0.8158366084098816,0.9904719591140748,0.0,accept,unanimous_agreement
121551723,6911,"iirc, it was like this in the code i copied over from the categoryfiltermodel. if you don't like it, i'm happy to change it.",1,1,1,0.9733209013938904,0.9857264757156372,0.9183387756347656,1.0,accept,unanimous_agreement
121551747,6911,"yes, that would indicate some sort of internal inconsistency. i added a qwarning.",0,0,0,0.9860279560089112,0.8258415460586548,0.9883091449737548,0.0,accept,unanimous_agreement
121551840,6911,"the leading comma seems like a somewhat unusual style to me too, but afaict, it seems like a common thing to do in the code i've seen. i am just trying to stay consistent. if there is a style recommendation one way or another, i'm happy to follow it.",1,1,1,0.8786474466323853,0.9714279770851136,0.9603281021118164,1.0,accept,unanimous_agreement
121551873,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121551881,6911,"i was going for consistency with categories, which also omits the ""remove category"" option from all / uncategorized. so if one is changed, we should probably change both.",0,0,0,0.9812356233596802,0.9883325695991516,0.9849883317947388,0.0,accept,unanimous_agreement
121551894,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121551911,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
121686869,6911,why not [code block] as you did below?,0,0,0,0.9787470698356628,0.9940037131309508,0.9905349612236024,0.0,accept,unanimous_agreement
121689847,6911,"imo, check for valid tag here (and in `session::hastag()` too) is overkill.",0,0,-1,0.968579649925232,0.9892127513885498,0.6463385224342346,0.0,accept,majority_agreement
121692942,6911,done?.. it's still here!,0,1,0,0.8511138558387756,0.6278663873672485,0.4773898124694824,0.0,accept,majority_agreement
121699582,6911,"these two functions do not require access to private members of the tagfiltermodel class, then why make them class methods? why not just put them in .cpp?",0,0,0,0.9867219924926758,0.9920841455459596,0.9934725761413574,0.0,accept,unanimous_agreement
121700345,6911,no `else` branch if `if` ends with `return`.,0,0,0,0.9851232171058656,0.9926055669784546,0.991738498210907,0.0,accept,unanimous_agreement
121700902,6911,"parent cannot be valid in list model index, isn't it? so we don't need to check it.",0,0,0,0.9865800738334656,0.9910791516304016,0.9920926690101624,0.0,accept,unanimous_agreement
121703395,6911,invalid indentation for brace enclosed case. see coding guidelines.,0,0,0,0.9766145348548888,0.9596015214920044,0.975486934185028,0.0,accept,unanimous_agreement
121703470,6911,invalid indentation for brace enclosed case. see coding guidelines.,0,0,0,0.9766145348548888,0.9596015214920044,0.975486934185028,0.0,accept,unanimous_agreement
121704695,6911,do you really need the casts below? has transferlistfilterswidget overloads for `tracker*` signals?,0,0,0,0.9895540475845336,0.9943919777870178,0.994891881942749,0.0,accept,unanimous_agreement
122320548,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
122321719,6911,there's no particular reason for them to be member functions. i moved them to anonymous namespace in the cpp.,0,0,0,0.9845120906829834,0.9884037375450134,0.9935811758041382,0.0,accept,unanimous_agreement
122321747,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
122321762,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
122321785,6911,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
122321815,6911,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
122321827,6911,"yes, it does not compile without the cast. each signal also has a method with the same name and different arguments that it uses to emit the signal. apparently connect() cannot use the fact that only one is declared as a signal to disambiguate.",0,0,0,0.9690672159194946,0.9389280676841736,0.9915921688079834,0.0,accept,unanimous_agreement
122321859,6911,removed.,0,0,0,0.9311882257461548,0.9782117605209352,0.9612457156181335,0.0,accept,unanimous_agreement
122401532,6911,"now you have wrong indentation inside this anonymous namespace (and, imo, redundant leading and trailing blank lines).",0,0,0,0.8190934658050537,0.7655445337295532,0.6844496726989746,0.0,accept,unanimous_agreement
122485199,6911,"the my main objections are related to `setdata()` method: 1. i don't know why `qt::displayrole` expected here (this is very old code) although `qt::editrole` should be used for simple editing purposes. 2. i do not see the point of supporting `setdata()` at all, because we do not use the standard qt model/view editing features. we can refer directly to underlying model from the caller code. it will also spare us from having to convert data to/from qvariant. i'm not asking you to edit existing code, but you should get rid of your code here.",0,0,0,0.7826222777366638,0.9861778020858764,0.7209314107894897,0.0,accept,unanimous_agreement
122496359,6911,this member can be declared as `const`.,0,0,0,0.9878684282302856,0.9916257858276368,0.995701014995575,0.0,accept,unanimous_agreement
122496909,6911,"don't understand why this one is needed. if you keep it, consider declaring is as `= default` instead of providing an empty body.",0,0,0,0.8975814580917358,0.9695493578910828,0.9275491833686828,0.0,accept,unanimous_agreement
122536609,6911,"are there guidelines about blank lines somewhere? one of the previous reviews kept asking me to add more, so i'm having trouble figuring out what the expectations are.",-1,-1,-1,0.7780100107192993,0.6752464175224304,0.6981703042984009,-1.0,accept,unanimous_agreement
122536631,6911,"ok, i removed the indirection to setdata for the tags code and left the old code alone.",0,0,0,0.9878225922584534,0.9924421310424804,0.9942800998687744,0.0,accept,unanimous_agreement
122568338,6911,"here we are dealing with a known valid indices, isn't it? therefore, we assume that each of them corresponds to a valid torrent unless some errors in code. so we should use `q_assert(torrent);` instead of `if-else`.",0,0,0,0.9875204563140868,0.993208944797516,0.9923495054244996,0.0,accept,unanimous_agreement
122568432,6911,"please use the same coding style rules for function type as for function declaration, type should be separated by space: `void (bittorrent::torrenthandle *const)`. also in header.",0,0,0,0.9879878759384156,0.9947861433029176,0.994249701499939,0.0,accept,unanimous_agreement
122568965,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
122568968,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
122569231,6911,`const qstring &tag`?,0,0,0,0.9882247447967528,0.993327260017395,0.994516909122467,0.0,accept,unanimous_agreement
122569242,6911,i would move this comment to cpp file,0,0,0,0.9865732192993164,0.991643488407135,0.9948856234550476,0.0,accept,unanimous_agreement
122569499,6911,pls add parentheses around `operator==` parameters,0,0,0,0.9874605536460876,0.9903821349143982,0.994394063949585,0.0,accept,unanimous_agreement
122569640,6911,"since line 613 doesn't have curly braces, you should remove it here.",0,0,0,0.9867653846740724,0.9917882084846495,0.9925681352615356,0.0,accept,unanimous_agreement
122569693,6911,i would use a `switch (){}` here,0,0,0,0.9880204796791076,0.9924049973487854,0.9940757751464844,0.0,accept,unanimous_agreement
122569710,6911,remove `qstringliteral`?,0,0,0,0.9840498566627502,0.9945534467697144,0.9954980611801147,0.0,accept,unanimous_agreement
122569815,6911,`bool session::isvalidtag(const qstring &tag) const`,0,0,0,0.9835206866264344,0.9832735061645508,0.9946799874305724,0.0,accept,unanimous_agreement
122569896,6911,i would use `emplace_back()` if possible.,0,0,0,0.9887564778327942,0.9938234090805054,0.9933876991271972,0.0,accept,unanimous_agreement
122569958,6911,"this is very minor, do you mind add [code block]",0,0,0,0.973463237285614,0.6338446140289307,0.9916163086891174,0.0,accept,unanimous_agreement
122570496,6911,then replace it with `qlatin1string`.,0,0,0,0.9857035279273988,0.9919230341911316,0.9949624538421632,0.0,accept,unanimous_agreement
122570534,6911,"no, it's static.",0,0,0,0.941417396068573,0.967902660369873,0.9872220158576964,0.0,accept,unanimous_agreement
122838698,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
122838716,6911,probably it can just be removed since this is a private method.,0,0,0,0.9877684712409972,0.9914630055427552,0.9864739179611206,0.0,accept,unanimous_agreement
122838728,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
122838745,6911,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
122838759,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
122838789,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
122838809,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
122838839,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123005493,6911,don't understand why this list is needed. update: don't understand why this list of strings is needed.,-1,0,0,0.5795599818229675,0.8798530697822571,0.8381168842315674,0.0,accept,majority_agreement
123119954,6911,deleted.,0,0,0,0.855806827545166,0.981515884399414,0.8038783669471741,0.0,accept,unanimous_agreement
123119981,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123119992,6911,the order of the strings corresponds to their row in the model. so it allows lookup of model row by tag and vice versa.,0,0,0,0.9881932139396667,0.9926882982254028,0.9944483041763306,0.0,accept,unanimous_agreement
123121381,6911,but why strings? why not list of `const tagmodelitem*`? i'm continuing to ask why do you search for every item twice.,0,0,0,0.9155493974685668,0.8866842985153198,0.9882423281669616,0.0,accept,unanimous_agreement
123125249,6911,"once i did a clean build, i noticed that this change caused my icons to disappear. ![a link] this is with a stock linux mint 18.1. i am not sure why it is not using the 'fallback' icon if the tags icons are not there. but i decided to revert back to the original icons i was using to avoid any problems.",-1,0,1,0.8690207600593567,0.766495406627655,0.6660533547401428,,review,no_majority_disagreement
123129687,6911,"sure, that is fine too. done.",0,0,0,0.6716393828392029,0.8153687119483948,0.7564888596534729,0.0,accept,unanimous_agreement
123217387,6911,"no, it was committed, but i just now reverted the change. when i was doing final checks of the gui, i noticed that this had caused icons to disappear: ![a link] this is on my test system, which is a stock linux mint 18.1 (no additional icon packs installed). i'm surprised, since the icon provider was supposed to fall back to the original icon if the tag-specific icon was not present, but that doesn't seem to work.",-1,-1,-1,0.9476449489593506,0.6413689255714417,0.9206010699272156,-1.0,accept,unanimous_agreement
123449447,6911,"if you decided to drop that tag_name -> item dictionary, there is no need in pointer here, a straightforward list `qlist m_tagitems;` should be better?",0,0,0,0.9878573417663574,0.9953948855400084,0.9935506582260132,0.0,accept,unanimous_agreement
123658449,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123702502,6911,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
123786505,6911,", what improvements do you expect from these changes? or you again driven by the fear of pointers? :)",1,1,1,0.9441221952438354,0.972382664680481,0.9704495072364808,1.0,accept,unanimous_agreement
123789035,6911,again double lookup. consider `void removefrommodel(const qmodelindex& index);` instead,0,0,0,0.9876939058303832,0.987941324710846,0.9949021339416504,0.0,accept,unanimous_agreement
123789581,6911,explicit destructor is unneeded now.,0,0,0,0.9860749840736388,0.975795567035675,0.9687471389770508,0.0,accept,unanimous_agreement
123790257,6911,or `void removefrommodel(int row);`,0,0,0,0.9855318069458008,0.9941064119338988,0.9943230152130128,0.0,accept,unanimous_agreement
123790494,6911,", we got less complex code already. and yes, i avoid pointers when possible not only because c++ provides better ways to manage objects (but that's the main reason), but also because of data locality, which is important for qbt too, not because it needs all the performance of the cpu cache, but because programs like this one are active in background and provokes cache misses for other processes.",0,0,0,0.8877730369567871,0.9678690433502196,0.9668825268745422,0.0,accept,unanimous_agreement
123790819,6911,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
123792205,6911,then we should seriously consider the need to avoid using qlist where possible. see [a link] for more info.,0,0,0,0.9751020669937134,0.9369720816612244,0.989211082458496,0.0,accept,unanimous_agreement
123794238,6911,it is needed as a consequence of your request to store tagmodelitem as objects instead of pointers. the alternative is moving tagmodelitem's declaration to the header rather than forward-declaring it.,0,0,0,0.9875808954238892,0.992738664150238,0.9949971437454224,0.0,accept,unanimous_agreement
123795505,6911,"right, pardon me. but nevertheless why don't you save a couple of lines and declarre it as default then?",0,-1,0,0.6497832536697388,0.97612327337265,0.9393056631088256,0.0,accept,majority_agreement
123849861,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123849889,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123849934,6911,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123870045,6911,why we need to search for special items? they always have const indexes.,0,0,0,0.9809807538986206,0.9879357814788818,0.975740611553192,0.0,accept,unanimous_agreement
123870089,6911,m_tagitems[1],0,0,0,0.9881225228309632,0.9877053499221802,0.994268536567688,0.0,accept,unanimous_agreement
123870121,6911,or just add two const methods returning these two special items.,0,0,0,0.9869565963745116,0.9904112815856934,0.9950851798057556,0.0,accept,unanimous_agreement
123870132,6911,m_tagitems[0],0,0,0,0.9880537390708924,0.9828981161117554,0.9941765069961548,0.0,accept,unanimous_agreement
123870139,6911,m_tagitems[1],0,0,0,0.9881225228309632,0.9877053499221802,0.994268536567688,0.0,accept,unanimous_agreement
123870146,6911,m_tagitems[0],0,0,0,0.9880537390708924,0.9828981161117554,0.9941765069961548,0.0,accept,unanimous_agreement
123870151,6911,m_tagitems[1],0,0,0,0.9881225228309632,0.9877053499221802,0.994268536567688,0.0,accept,unanimous_agreement
123880525,6911,"methods aren't const, since they return non-const member pointers, but otherwise done (here and elsewhere).",0,0,0,0.9854065179824828,0.9812546968460084,0.9927788376808168,0.0,accept,unanimous_agreement
123413260,6779,shouldn't be or in this place?,0,0,0,0.8900195956230164,0.9713233709335328,0.823408305644989,0.0,accept,unanimous_agreement
123413432,6779,there are many conditions here so it would be better to have two helper functions: isloopbackaddress and islanaddress.,0,0,0,0.9833728671073914,0.9937319159507751,0.9921200275421144,0.0,accept,unanimous_agreement
123510924,6779,"the lan conditionals return true if the address isn't localhost or if local auth is enabled. therefore if an or is used and a user connects with a lan ip, the function would return true regardless of the lan conditionals. that being said, development is still underway, so don't start picking apart my changes just yet ;) once i'm finished i'll squash the changes and update this pr.",1,1,1,0.896861732006073,0.9860073328018188,0.9634724855422974,1.0,accept,unanimous_agreement
123891138,6779,i would prefer `const qhostaddress &clientaddress`,0,0,0,0.9813002347946168,0.9935318231582642,0.9956138134002686,0.0,accept,unanimous_agreement
123891141,6779,i would prefer `const qhostaddress &clientaddress`,0,0,0,0.9813002347946168,0.9935318231582642,0.9956138134002686,0.0,accept,unanimous_agreement
123891279,6779,these 2 can move to `src\base\utils\net` if you want,0,0,0,0.9873544573783876,0.9940181970596312,0.9955456256866456,0.0,accept,unanimous_agreement
123891344,6779,at least it shouldn't be member of abstractwebapplication.,0,0,0,0.976677417755127,0.9856846332550048,0.9845298528671264,0.0,accept,unanimous_agreement
123891372,6779,please use: [code block],0,0,0,0.9854179620742798,0.9885514974594116,0.9952685236930848,0.0,accept,unanimous_agreement
123891410,6779,"no. don't do it! it is considered ""bad form"" to use `else` after `return`.",-1,-1,-1,0.9758613109588624,0.9023210406303406,0.9851468205451964,-1.0,accept,unanimous_agreement
123891468,6779,"ok, but at least it should be [code block] to save 1 comparison.",0,0,0,0.9866167306900024,0.993222951889038,0.9921450018882751,0.0,accept,unanimous_agreement
123891802,6779,you are again mistaken. it saves nothing.,-1,-1,-1,0.7072205543518066,0.7343100905418396,0.9559669494628906,-1.0,accept,unanimous_agreement
123891834,6779,"the second comparison will be executed only if the first returns false, because otherwise we will just return from the function.",0,0,0,0.9856115579605104,0.9916061162948608,0.993552565574646,0.0,accept,unanimous_agreement
123891861,6779,`0a00`,0,0,0,0.977622926235199,0.9805006980895996,0.9780716896057128,0.0,accept,unanimous_agreement
123891986,6779,you're right. i my head was obsessed with something else.,-1,-1,0,0.8663469552993774,0.7057590484619141,0.9077017903327942,-1.0,accept,majority_agreement
123892025,6779,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123892026,6779,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123892028,6779,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123892084,6779,[a link] and [a link] are equivalent.,0,0,0,0.9832758903503418,0.9916890263557434,0.9939654469490052,0.0,accept,unanimous_agreement
123892118,6779,"use `isinsubnet(const qhostaddress &subnet, int netmask)`? i.e. `isinsubnet(qlatin1string(""10.0.0.0""), 8)` and below",0,0,0,0.9885795712471008,0.9948811531066896,0.9952017068862916,0.0,accept,unanimous_agreement
123892133,6779,"i know, the suggestion is for clarity.",0,0,0,0.977954924106598,0.9546178579330444,0.9917669892311096,0.0,accept,unanimous_agreement
123892143,6779,why? they are equivalent.,0,0,0,0.9628475308418274,0.8072800636291504,0.9845933318138124,0.0,accept,unanimous_agreement
123892231,6779,to save 1 function call in our code?,0,0,0,0.9880377054214478,0.9913570880889891,0.9945937991142272,0.0,accept,unanimous_agreement
123892275,6779,"`clientaddress` -> `addr` or some other name there is no concept of ""client"" in these 2 helper functions",0,0,0,0.9873347282409668,0.9937506318092346,0.9941859245300292,0.0,accept,unanimous_agreement
123892515,6779,what's the purpose of using qlatin1string in this instance? it's not currently used for creating the ipv6 mapped 127.0.0.1 address.,0,0,0,0.9879778623580932,0.9879133105278016,0.994059920310974,0.0,accept,unanimous_agreement
123892601,6779,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123892617,6779,"there are non-trivial computation in this func, maybe it make sense to add the following? [code block] update: example updated.",0,0,0,0.9872711300849916,0.9920859932899476,0.9951038360595704,0.0,accept,unanimous_agreement
123892750,6779,qhostaddress is constructed via `qhostaddress(const qstring &address)` and then from [a link] :,0,0,0,0.988392174243927,0.9918461441993712,0.9950392842292786,0.0,accept,unanimous_agreement
123892762,6779,example updated,0,0,0,0.9836198091506958,0.9840355515480042,0.991643488407135,0.0,accept,unanimous_agreement
123893183,6779,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123893290,6779,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
123893531,6779,"we use implicit type conversion in our codebase, so i'll say there is no need for explicit `qhostaddress()` construction here.",0,0,0,0.9887839555740356,0.9887439012527466,0.994637668132782,0.0,accept,unanimous_agreement
123893749,6779,i can't compile without explicitly passing `qhostaddress` [code block],0,0,0,0.9754930138587952,0.9857265949249268,0.9917305111885072,0.0,accept,unanimous_agreement
123893798,6779,"hmmm, ok then.",0,0,0,0.9815838932991028,0.9464744925498962,0.9578062295913696,0.0,accept,unanimous_agreement
123895124,6779,please drop `else` branch and place return statement outside it.,0,0,0,0.9870131611824036,0.9919732809066772,0.9945276379585266,0.0,accept,unanimous_agreement
123895134,6779,"i still see ""clientaddress""...",0,0,0,0.9826629161834716,0.9722370505332948,0.9937082529067992,0.0,accept,unanimous_agreement
123895162,6779,move this include to .cpp,0,0,0,0.9887614846229552,0.9923344254493712,0.9945407509803772,0.0,accept,unanimous_agreement
123899738,6779,the indention looks wrong to me.,-1,-1,-1,0.9662429094314576,0.8213230967521667,0.7336203455924988,-1.0,accept,unanimous_agreement
123907984,6779,i used the same indentation as the [a link] isauthneeded() implementation.,0,0,0,0.9885446429252625,0.992615818977356,0.9947774410247804,0.0,accept,unanimous_agreement
123912548,6779,the `}` should have 4 less spaces right? [a link],0,0,0,0.986396849155426,0.9934520721435548,0.992145836353302,0.0,accept,unanimous_agreement
123923362,6779,good catch.,1,1,1,0.9640093445777892,0.9815194606781006,0.9776482582092284,1.0,accept,unanimous_agreement
125306907,6779,"just stumbled upon this, there is a simpler check for this: [code block] [a link] pls test if it works",0,0,0,0.9868256449699402,0.9834095239639282,0.9102882742881776,0.0,accept,unanimous_agreement
125348690,6779,nice find! tested and it works :thumbs_up:,1,1,1,0.9879443645477296,0.9953255653381348,0.9975525736808776,1.0,accept,unanimous_agreement
125364435,6779,bypass authentication for clients on lan?,0,0,0,0.9647210240364076,0.9931997656822203,0.993516206741333,0.0,accept,unanimous_agreement
125364658,6779,shouldn't we test that server and client are in the same sub-net?,0,0,0,0.978727161884308,0.9939900636672974,0.9932424426078796,0.0,accept,unanimous_agreement
125369775,6779,"""bypass authentication for localhost"" is used now. replace both (for consistency)?",0,0,0,0.9897581338882446,0.9941686391830444,0.995164394378662,0.0,accept,unanimous_agreement
125370074,6779,"i'm not sold on the benefits of doing so. reserved local ips aren't routable over the internet anyway, so adding that additional check would break the feature for some client environments.",0,-1,-1,0.681316614151001,0.8018295168876648,0.770243227481842,-1.0,accept,majority_agreement
125397543,6779,"btw, maybe changing to `isprivateaddress` would be more accurate.",0,0,0,0.9869616031646729,0.9929721355438232,0.9882083535194396,0.0,accept,unanimous_agreement
125430333,6779,agreed && updated.,0,0,0,0.9777429103851318,0.9866724014282228,0.989568531513214,0.0,accept,unanimous_agreement
125431567,6779,"as well as now it is unusable for others. for instance, your guesthouse gives ips from sub-net 10.0.0.0/24. you set up a router in your room and assign to your laptop, phone and tablet ips from 192.168.0.0/16. but you can't disable authentication for lan clients, because all the guesthouse will be able to use your qbt instance.",0,0,0,0.963569402694702,0.9715927243232728,0.98310524225235,0.0,accept,unanimous_agreement
125431954,6779,"then both are incorrect, imo, and have to be corrected.",0,0,0,0.9370529055595398,0.9322969913482666,0.7813877463340759,0.0,accept,unanimous_agreement
125439638,6779,"i don't think we need this check, different clients in different subnets won't be able to talk to each other directly, well... unless someone explicitly set it up... in this example, i would say if someone on 10.0.0.0/24 is able to connect to 192.168.0.0/16 freely, then that router has serious security flaw (routing table or firewall had been tampered), i don't think is the common case.",0,0,0,0.9181193709373474,0.5464067459106445,0.9761404991149902,0.0,accept,unanimous_agreement
125440254,6779,"no, you set up a port forwarding for your qbt, of course, so the router works as expected.",0,0,0,0.9876675605773926,0.986226499080658,0.9947437047958374,0.0,accept,unanimous_agreement
125443393,6779,"security flaw is what this pr is going to merge: unlimited access for unknown and uncontrolled hosts for the sake of (imaginary?) convenience. imo, you should not invent a wheel but implement this in the common way: give user a way to provide a list of sub-nets. probably with a a button (""add localhost and lan addresses"") for a convenience with a message like ""this list is provided for convenience purposes only. please remove all unneeded addresses""",0,0,-1,0.5105758905410767,0.792277991771698,0.5937305092811584,0.0,accept,majority_agreement
125444576,6779,"i still don't find this scenario make sense, why enable webui port forwarding when you don't want outside to access it? iirc, its called access control list (acl), that would work too.",0,0,0,0.9668636918067932,0.9752897024154664,0.5123142004013062,0.0,accept,unanimous_agreement
125444770,6779,"i want to have access from outside, but with authentication.",0,0,0,0.9819281101226808,0.946991205215454,0.9867614507675172,0.0,accept,unanimous_agreement
125446136,6779,"btw, if your router does not perform ingress filtering, you will be extremely vulnerable to address spoofing, because any lan address will bypass authentication.",0,0,0,0.8947159647941589,0.7159087657928467,0.971376895904541,0.0,accept,unanimous_agreement
125447125,6779,"it make sense now, thanks!",1,1,1,0.9685949087142944,0.979951798915863,0.9837616086006165,1.0,accept,unanimous_agreement
125447767,6779,this bypass feature is geared towards convenience. it's up to your network firewall to control what information can pass between subnets. your host should also be running a firewall with additional rules. anyone who needs additional control should turn towards one of these proven methods for enforcing network security.,0,0,0,0.9726101756095886,0.9873546957969666,0.9868414402008056,0.0,accept,unanimous_agreement
125450543,6779,: did you read everything written above?,0,0,0,0.9787489771842957,0.9879302978515624,0.9918795228004456,0.0,accept,unanimous_agreement
125529128,6779,"i did, but i think that would make for a bad user experience. as i stated, for finer control this should be handled by a firewall, either at the router or the host.",-1,0,0,0.887860894203186,0.8211368918418884,0.5316102504730225,0.0,accept,majority_agreement
125529619,6779,"if you rely on a firewall, why bother with ip addresses at all? in that case a simple option ""disable authentication"" will be much simpler and clearer.",0,0,0,0.9764267206192015,0.9914391040802002,0.9879758954048156,0.0,accept,unanimous_agreement
125529976,6779,"how is the ipv4 handling of this any different than the ipv6 implementation? with ipv6 all private ips are allowed, including many trillions+ outside of the user's subnet. once again, private ips aren't routable over the internet. even if a router allowed such a packet through, the nature of a tcp connection wouldn't allow the source of the spoofed ip to receive the reply.",0,0,0,0.972038209438324,0.9162771701812744,0.9807944893836976,0.0,accept,unanimous_agreement
125530162,6779,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
125813536,6779,"thinking through this more, the only way i see to solve the ipv6 issue is to implement the acl you mentioned earlier. i don't think this method will be easy for newbies but for more advanced users it'll be great.",1,1,1,0.9125935435295104,0.6891271471977234,0.8439337015151978,1.0,accept,unanimous_agreement
126339541,6779,the updated code has been pushed.,0,0,0,0.9846214056015016,0.9779638051986694,0.9961708188056946,0.0,accept,unanimous_agreement
126404658,6779,utils shouldn't depend on application preferences!,0,-1,0,0.9759775400161744,0.5858650207519531,0.9887020587921144,0.0,accept,majority_agreement
126405279,6779,"this ""include"" is in wrong place.",-1,0,0,0.7808247804641724,0.7351400256156921,0.6967300772666931,0.0,accept,majority_agreement
126405438,6779,is it valid copyright?,0,0,0,0.9815791845321656,0.9890403747558594,0.9938404560089112,0.0,accept,unanimous_agreement
126405788,6779,is it valid copyright?,0,0,0,0.9815791845321656,0.9890403747558594,0.9938404560089112,0.0,accept,unanimous_agreement
126406178,6779,we prefer `nullptr` in new code.,0,0,0,0.9844324588775636,0.9926354289054872,0.9935370087623596,0.0,accept,unanimous_agreement
126406260,6779,invalid comment.,-1,0,0,0.5894124507904053,0.7578622698783875,0.6977687478065491,0.0,accept,majority_agreement
126406565,6779,`// have to call dialog window`,0,0,0,0.9847699403762816,0.9850002527236938,0.9918286204338074,0.0,accept,unanimous_agreement
126409626,6779,"`getwebuiauthbypassips()`? also, wouldn't `qpair ` result type be a better choice? motivation: textual representation (list of strings) is an implementation detail.",0,0,0,0.9855727553367616,0.9942025542259216,0.9917436242103576,0.0,accept,unanimous_agreement
126418516,6779,would you rather the `qstringlist` of subnets was explicitly passed to the function as an argument? or is there another way of accomplishing this without the pref import?,0,0,0,0.984914243221283,0.9952644109725952,0.9933377504348756,0.0,accept,unanimous_agreement
126438487,6779,"""module"" header should be the first, then system and qt headers, then all other application headers (according to coding guidelines).",0,0,0,0.9872879981994628,0.9940897226333618,0.993730902671814,0.0,accept,unanimous_agreement
126440741,6779,and then what? parse again a few lines later?,0,0,0,0.9824202060699464,0.987308919429779,0.9434860348701476,0.0,accept,unanimous_agreement
126441706,6779,this operation would be simpler with a state-full object: ```c++ class subnets { public: subnets(); // loads config bool contains(const qhostaddress&) const; private: qvector > m_subnets; };,0,0,0,0.98796808719635,0.9844738245010376,0.9939621090888976,0.0,accept,unanimous_agreement
126442421,6779,"now `isipinauthbypasssubnet` function isn't ""utility"" so just move it to abstractwebapplication (e.g. `abstractwebapplication::isclientinauthbypasssubnet()`). you can, of course, modify this function to turn it in ""utility"" again (ie to get rid from preferences dependency), but in this case it would be better to have consistent interface (ie, both test address and subnets should have the same format - either qhostaddress or qstring).",0,0,0,0.9881249666213988,0.9942832589149476,0.993441104888916,0.0,accept,unanimous_agreement
126443442,6779,", imo, it's just moving code from one place to another...",0,0,0,0.9338276386260986,0.5420831441879272,0.9628846645355223,0.0,accept,unanimous_agreement
126444099,6779,headers should be sorted alphabetically.,0,0,0,0.9795158505439758,0.991643488407135,0.9903430938720704,0.0,accept,unanimous_agreement
126446402,6779,"the default works as well, pls remove it. imo, only property value that is different than the default should be saved, otherwise you won't know if it's really needed. there is a small arrow on the right side of property setting in qt designer, use it to reset to default. and please recheck all those properties that are explicitly set.",0,0,0,0.9867300987243652,0.9858251214027404,0.9851890802383424,0.0,accept,unanimous_agreement
126448436,6779,`\n`,0,0,0,0.9700356125831604,0.9596202969551086,0.9759271144866944,0.0,accept,unanimous_agreement
126449082,6779,i prefer default off,0,0,0,0.824594259262085,0.9325522780418396,0.982577621936798,0.0,accept,unanimous_agreement
126452907,6779,"it might make sense to disable/enable the whitelist button when unchecking/checking the checkbox. also after editing the whitelist, the apply button should be enabled if the list has changed.",0,0,0,0.9883660674095154,0.9925469756126404,0.992176353931427,0.0,accept,unanimous_agreement
126523882,6779,"and aside from any preferences, default values must maintain current behavior.",0,0,0,0.9829118251800536,0.9896530508995056,0.9912499189376832,0.0,accept,unanimous_agreement
126697209,6779,"once you have decided to sort it, then do it right. headers should be in alphabetical order within each group so move ""logger.h"" and ""settingsstorage.h"" on top of ""utils/fs.h"".",0,0,0,0.9874774217605592,0.993650496006012,0.9937942028045654,0.0,accept,unanimous_agreement
126697628,6779,remove unneeded space between `>`: `qlist >` in all your code.,0,0,0,0.987450122833252,0.9920003414154052,0.9942795038223268,0.0,accept,unanimous_agreement
126698087,6779,you renamed method names to but forgot to rename keys: `authbypassip` -> `authbypasssubnets`.,0,0,0,0.9887969493865968,0.9931989312171936,0.9952109456062316,0.0,accept,unanimous_agreement
126698561,6779,"also this variable is redundant. you can use value(""preferences/webui/authbypassip"").tostringlist() in loop condition directly.",0,0,0,0.9877711534500122,0.993736743927002,0.9945092797279358,0.0,accept,unanimous_agreement
126702378,6779,why this var is outside the loop?,0,0,0,0.9551109075546264,0.9774213433265686,0.9866798520088196,0.0,accept,unanimous_agreement
126702690,6779,`toutf8()` is redundant here!,0,0,0,0.9674546718597412,0.5354636907577515,0.991737186908722,0.0,accept,unanimous_agreement
126704187,6779,please describe this!,0,0,0,0.944367289543152,0.7932682037353516,0.9932130575180054,0.0,accept,unanimous_agreement
126704752,6779,"as i asked earlier, please make the interface consistent. use either qhostaddress or qstring in all of the parameters.",0,0,0,0.9873673915863036,0.9886244535446168,0.9950897693634032,0.0,accept,unanimous_agreement
126705389,6779,"as this function began to have a more general meaning, please change it name accordingly (remove authbypass).",0,0,0,0.9875147342681884,0.9921475052833556,0.9952438473701476,0.0,accept,unanimous_agreement
126706436,6779,no need to declare it outside the loop.,0,0,0,0.9766835570335388,0.9904869198799132,0.99014550447464,0.0,accept,unanimous_agreement
126706931,6779,initialize this var.,0,0,0,0.9877588152885436,0.9870676398277284,0.9942317605018616,0.0,accept,unanimous_agreement
126707183,6779,it seems that this branch is not used...,0,0,0,0.6800016760826111,0.8748856782913208,0.9898928999900818,0.0,accept,unanimous_agreement
126707695,6779,please add space after `template` keyword: `template struct qpair;`.,0,0,0,0.9869253635406494,0.994189977645874,0.9955230951309204,0.0,accept,unanimous_agreement
126708476,6779,this var is redundant.,0,0,0,0.9264087677001952,0.5333214402198792,0.912649631500244,0.0,accept,unanimous_agreement
126708540,6779,move to the loop.,0,0,0,0.9832651615142822,0.9806655049324036,0.9882091283798218,0.0,accept,unanimous_agreement
126709151,6779,`const auto &i`,0,0,0,0.9831048846244812,0.9895059466362,0.9939841628074646,0.0,accept,unanimous_agreement
126709272,6779,redundant variable.,0,-1,0,0.941145956516266,0.5446004271507263,0.87708580493927,0.0,accept,majority_agreement
126710553,6779,please add also `q_disable_copy(myclass)` to all your qobject subclasses.,0,0,0,0.9873995780944824,0.9939528107643129,0.9955529570579528,0.0,accept,unanimous_agreement
126711197,6779,you can decrease this code: [code block],0,0,0,0.988188087940216,0.9894918203353882,0.9953834414482116,0.0,accept,unanimous_agreement
126711965,6779,redundant var.,0,0,0,0.9128626585006714,0.6718858480453491,0.8768526315689087,0.0,accept,unanimous_agreement
126712022,6779,move to the loop.,0,0,0,0.9832651615142822,0.9806655049324036,0.9882091283798218,0.0,accept,unanimous_agreement
126712391,6779,redundant var.,0,0,0,0.9128626585006714,0.6718858480453491,0.8768526315689087,0.0,accept,unanimous_agreement
126712756,6779,why do you allow two data formats here?,0,0,0,0.978444755077362,0.92689710855484,0.9921888113021852,0.0,accept,unanimous_agreement
126853518,6779,"you come across as extremely rude. do you really think i intentionally messed up the order? people make mistakes; you need to act in a way that _encourages_ open source contributions, not in such a way that deters them.",-1,-1,-1,0.9874269962310792,0.9709274172782898,0.984459638595581,-1.0,accept,unanimous_agreement
126867241,6779,i'm sorry if i hurt you. i didn't want to.,-1,-1,-1,0.983654797077179,0.9915266633033752,0.9888523817062378,-1.0,accept,unanimous_agreement
127773160,6779,"i don't understand why is the conversion to utf-8 needed. could you explain, please?",0,0,-1,0.7879318594932556,0.6528950333595276,0.591658353805542,0.0,accept,majority_agreement
127773513,6779,the function will be shorter with `std::transform()`.,0,0,0,0.988024890422821,0.992282211780548,0.9942944645881652,0.0,accept,unanimous_agreement
127884136,6779,he can't... it just overthinking.,-1,0,-1,0.8851227760314941,0.5177788138389587,0.7965665459632874,-1.0,accept,majority_agreement
128133903,6779,i don't think it hurts to support multiple input formats.,-1,-1,0,0.5990767478942871,0.8593524694442749,0.967015266418457,-1.0,accept,majority_agreement
128134007,6779,this is done for readability. there's no coding guideline on it.,0,0,0,0.9851153492927552,0.9885998964309692,0.9926526546478271,0.0,accept,unanimous_agreement
128135918,6779,i get this error when declaring inside the loop [code block],0,0,0,0.9551624059677124,0.9552210569381714,0.9680474996566772,0.0,accept,unanimous_agreement
128136688,6779,thanks for the reference. i've added it.,1,1,1,0.7489754557609558,0.6065434217453003,0.9212937355041504,1.0,accept,unanimous_agreement
128137211,6779,"in the qt5 [a link] `parsesubnet` returns `qmakepair(qhostaddress(), -1)` for invalid subnets.",0,0,0,0.9883536100387572,0.9947041869163512,0.9952884912490844,0.0,accept,unanimous_agreement
128149727,6779,i don't follow. do you mean because of the comment?,0,0,0,0.7460073828697205,0.5358701944351196,0.8401445150375366,0.0,accept,unanimous_agreement
128173827,6779,"oh, that's right! this is a limitation of qt `foreach`. but that is no reason to have an extra variable. you can define an alias for this type: `using subnet = qpair >`. or, even better, use c++ range-based `for` (afaik, qt has deprecated its `foreach` now).",0,0,0,0.8353645205497742,0.8975416421890259,0.8445186614990234,0.0,accept,unanimous_agreement
128177030,6779,"we can't set all the rules verbatim! there are some things in common... for example, we don't usually put spaces inside the parentheses (in this case, the brackets have similar semantics). at least the brackets here are pairs of things, and they should look flipped relative to their content (i.e. no whitespace after the opening bracket then must not be before the closing). but if some things not so obvious, we can add some new rules in coding guidelines. imo, this is against the readability.",0,0,-1,0.6209666728973389,0.8541961908340454,0.9385445713996888,0.0,accept,majority_agreement
128177173,6779,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
128177431,6779,wrong order.,-1,-1,-1,0.9440091848373412,0.5554730296134949,0.7645806670188904,-1.0,accept,unanimous_agreement
128178402,6779,we have uncrustify.cfg that helps more or less.,0,0,0,0.9821223020553588,0.980712890625,0.992573380470276,0.0,accept,unanimous_agreement
128179441,6779,protocolequivalentaddress is used only when isipv4mappedaddress is true but here is always false.,0,0,0,0.987036406993866,0.992868959903717,0.9935867190361024,0.0,accept,unanimous_agreement
136747940,6779,this was a logic bug. good catch.,1,1,1,0.9726688265800476,0.9305859804153442,0.9899863600730896,1.0,accept,unanimous_agreement
136748831,6779,i switched over to using the range-based for.,0,0,0,0.9858893156051636,0.98785400390625,0.987929344177246,0.0,accept,unanimous_agreement
138982619,6779,seems like there is no need in conversion when `addr.isinsubnet(subnet)` returns true.,0,0,0,0.9825207591056824,0.992127537727356,0.9873971343040466,0.0,accept,unanimous_agreement
138983853,6779,why not `m_ui->ipsubnetwhitelistbutton->setenabled(checked);`?,0,0,0,0.983708679676056,0.9940193891525269,0.9951480031013488,0.0,accept,unanimous_agreement
138984137,6779,bypass authentication for clients in whitelisted ip subnets?,0,0,0,0.968568742275238,0.9929916858673096,0.994166612625122,0.0,accept,unanimous_agreement
139165131,6779,my point was that the white list contains not clients but sub-nets.,0,0,0,0.9743729829788208,0.987299621105194,0.9851986765861512,0.0,accept,unanimous_agreement
139180713,6779,"that's correct, but we'd have to first iterate through all subnets to determine if the conversion is needed. are you proposing having two loops?",0,0,0,0.9854140281677246,0.9736947417259216,0.9939507246017456,0.0,accept,unanimous_agreement
139284983,6779,"well, i would write as follows: [code block] to me this reads easier. but decide yourself, whether you want to change the code. the whole point is not critical, of course.",0,0,0,0.9697628021240234,0.9376983046531676,0.987013041973114,0.0,accept,unanimous_agreement
139297691,6779,"maybe this is my inexperience with c++ talking, but that code looks far more opaque to me :man_shrugging: . it doesn't appear to be more performant, so i'll stick what what i have now.",-1,-1,-1,0.9291448593139648,0.9780428409576416,0.9562960863113404,-1.0,accept,unanimous_agreement
139302137,6779,"this function handles only one specific case of invalid subnet so it shouldn't be in utils. btw, it has small piece of trivial code so you can use it inplace.",0,0,0,0.9836390018463136,0.9854615926742554,0.9908888339996338,0.0,accept,unanimous_agreement
139302164,6779,"this function handles only one specific case of invalid subnet so it shouldn't be in utils. btw, it has small piece of trivial code so you can use it inplace.",0,0,0,0.9836390018463136,0.9854615926742554,0.9908888339996338,0.0,accept,unanimous_agreement
139302360,6779,"imo, i would have it another way. i would have isipinsubnet() function here since it more common, and use it in loop where it needed.",0,0,0,0.9802759885787964,0.986313819885254,0.9898338317871094,0.0,accept,unanimous_agreement
139302428,6779,i would define subnet type in this namespace and use it instead: [code block],0,0,0,0.9882010221481324,0.9921696782112122,0.9954620003700256,0.0,accept,unanimous_agreement
139302516,6779,it should be ipsubnetwhitelistoptionsdialog.,0,0,0,0.9875923991203308,0.994490385055542,0.9956762194633484,0.0,accept,unanimous_agreement
139304262,6779,"`qhostaddress::isinsubnet` already handles that functionality. this is a bespoke method that abstracts away the ipv4/ipv6 conversion and whether it was successful, while only performing the conversion once for the entire list. if anything this should probably be moved out of utils.",0,0,0,0.9851952791213988,0.9942779541015624,0.992478370666504,0.0,accept,unanimous_agreement
139304294,6779,where should this function be moved to? this code is used in multiple places so i think it makes sense as a net util.,0,0,0,0.9866600036621094,0.99136883020401,0.9915415644645692,0.0,accept,unanimous_agreement
139304533,6779,"if you want to care about performance, one can replace qlist with vector.",0,0,0,0.9842785000801086,0.9899126887321472,0.9925246834754944,0.0,accept,unanimous_agreement
139315024,6779,ok. let it be as-is.,0,0,0,0.9828848838806152,0.984252631664276,0.9903261065483092,0.0,accept,unanimous_agreement
139315120,6779,please use utils::net::subnet everywhere in your new code.,0,0,0,0.9846270680427552,0.9944064617156982,0.9944100975990297,0.0,accept,unanimous_agreement
139315154,6779,and use `subnets` as var name here. subnetpair confuses in any case.,0,0,0,0.9811199307441713,0.9933205842971802,0.9951776266098022,0.0,accept,unanimous_agreement
139315433,6779,you use it to check result of `qhostaddress::parsesubnet()` only so you will only need to do the following: [code block] or change this function to handle all possible invalid subnets and leave it here...,0,0,0,0.9865445494651794,0.9943008422851562,0.9958226680755616,0.0,accept,unanimous_agreement
139315532,6779,"when i asked to rename this class i implied you will guess to rename the corresponding files to follow this name. unfortunately, you have not guessed, so i'm asking you to do it.",0,0,0,0.9496071934700012,0.8929367065429688,0.6721603274345398,0.0,accept,unanimous_agreement
139322303,6779,i've renamed the function so it more accurately reflects the intended purpose.,0,0,0,0.9829385280609132,0.986177146434784,0.992356538772583,0.0,accept,unanimous_agreement
139335352,6779,"i don't understand your perseverance. why this function? why would you create a couple and compare the parameter with it, if it is known that only the first items are compared? maybe i'm picky... i don't see any sense in this function. /demigods, judge us, please.",-1,-1,-1,0.9000051021575928,0.966148316860199,0.993470311164856,-1.0,accept,unanimous_agreement
139339561,6779,"[a link] returns that pair when invalid parameters are passed to it. therefore i am checking directly against the expected ""invalid"" value.",0,0,0,0.9798009395599364,0.9815457463264464,0.994532585144043,0.0,accept,unanimous_agreement
142449492,6779,thoughts? i'd like to move this pr forward.,0,0,0,0.9059670567512512,0.9404449462890624,0.9652454257011414,0.0,accept,unanimous_agreement
142653657,6779,invalid indentation here.,0,0,0,0.8796766400337219,0.8136081695556641,0.8864290714263916,0.0,accept,unanimous_agreement
142712215,6779,the one of valid solutions is implementing the following wrapper: [code block],0,0,0,0.9880290627479552,0.9881147146224976,0.9952545166015624,0.0,accept,unanimous_agreement
142851272,6779,i still haven't figured out how to do either of these things. could you point me in the right direction?,0,-1,0,0.6553305983543396,0.5679916739463806,0.5066419243812561,0.0,accept,majority_agreement
142878315,6779,"for the first one, use qt signal/slots, connect qcheckbox toggled signal to qbutton setenabled slot. for the second, after closing edit dialog, if the list has changed then call enableapplybutton.",0,0,0,0.989231288433075,0.9930261373519896,0.9946964979171752,0.0,accept,unanimous_agreement
143224206,6779,"can you point to an existing example in the codebase that connects a qcheckbox and qbutton? i can't find how ""web user interface"", ""use https instead of http"", or any of the other checkboxes implement it.",0,0,0,0.987870752811432,0.9926236867904664,0.990857183933258,0.0,accept,unanimous_agreement
143262019,6779,"since this function does not give us the parsed subnet, i would name it `canparsesubnet`. imo, use overloads is incorrect in this case.",0,0,0,0.9537022113800048,0.8388886451721191,0.9760584235191344,0.0,accept,unanimous_agreement
143324773,6779,try [code block] ps. i didn't test,0,0,0,0.9314672946929932,0.9797933101654052,0.9940674304962158,0.0,accept,unanimous_agreement
143632255,6779,thanks for the help. i've implemented both features for the whitelist. i've also updated the ip ban list- in a separate commit- so it too implements the apply button functionality.,1,1,1,0.9579282999038696,0.966562569141388,0.9743829369544984,1.0,accept,unanimous_agreement
145911288,6779,const &,0,0,0,0.9820737838745116,0.979951560497284,0.976756989955902,0.0,accept,unanimous_agreement
145911335,6779,const &,0,0,0,0.9820737838745116,0.979951560497284,0.976756989955902,0.0,accept,unanimous_agreement
145917519,6779,const &,0,0,0,0.9820737838745116,0.979951560497284,0.976756989955902,0.0,accept,unanimous_agreement
145918214,6779,i would return subnets as string and convert it when it's really needed. now it is irrational. in most use cases you convert it back in strings.,-1,-1,-1,0.9546104669570924,0.944968044757843,0.717013418674469,-1.0,accept,unanimous_agreement
145918832,6779,add space before colon too.,0,0,0,0.9866335391998292,0.9869738817214966,0.9941315054893494,0.0,accept,unanimous_agreement
145923507,6779,is this method really needed?,0,0,0,0.986081600189209,0.9823801517486572,0.9914230704307556,0.0,accept,unanimous_agreement
145923815,6779,"i can't see, where it is used.",0,0,0,0.9331846833229064,0.7711984515190125,0.8759353160858154,0.0,accept,unanimous_agreement
145970675,6779,it's used on line 439.,0,0,0,0.9834355711936952,0.9932126998901368,0.99331796169281,0.0,accept,unanimous_agreement
145975431,6779,"we're already parsing the user's text input into subnets to verify if they're valid before saving. the downstream functions that call `getwebuiauthbypasssubnets` don't always keep them as subnets, but it makes a lot of sense that the function to get the subnets would return items of type subnet.",0,0,0,0.981261134147644,0.9923570156097412,0.991385817527771,0.0,accept,unanimous_agreement
145981427,6779,it's still needed to disable the whitelist button when the subnet bypass option is initially unchecked upon opening preferences.,0,0,0,0.985521912574768,0.9917417764663696,0.9909164309501648,0.0,accept,unanimous_agreement
146008007,6779,i mean why do you need this separate method? why don't do the following: [code block],0,0,0,0.9800480008125304,0.9851222038269044,0.9882317185401917,0.0,accept,unanimous_agreement
146009581,6779,"what's the point? i don't see any sense. after all, you even do not check data loaded from config. do not forget that it can be changed manually.",0,-1,-1,0.8753922581672668,0.5407797694206238,0.9543001055717468,-1.0,accept,majority_agreement
146097182,6779,"the code is self documenting. the return type matches what you'd expect based on the name of the function (ie. a function to get a list of subnets would return a list of objects of type subnet). would we also return a list of integers as strings? subnet whitelist entries are checked before they're saved. a user can circumvent the process by editing the config manually, but who's going to do this? and why do we care? i really don't see how this point is relevant.",0,0,0,0.6491124033927917,0.9363719820976256,0.8710184693336487,0.0,accept,unanimous_agreement
146097335,6779,"the manual config editing is the only way when qbittorrent built without gui. and yes, we should care about it just as you take care of the data entered via the appropriate dialog in gui.",0,0,0,0.981050670146942,0.9805269241333008,0.9937145113945008,0.0,accept,unanimous_agreement
146097748,6779,"i don't see this as a valid use case. can you point me to another preference that's validated upon load, rather than at save?",0,0,0,0.9664841890335084,0.9526398181915284,0.7792516350746155,0.0,accept,unanimous_agreement
146098293,6779,"unfortunately, it may be absent in most legacy code. but lately i constantly remind to all contributors that we should check the input data from any external sources.",0,-1,-1,0.6327854990959167,0.7929472327232361,0.6640225052833557,-1.0,accept,majority_agreement
146098623,6779,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
146110344,6779,"foa, thx a lot for this functionality , very interesting for a qb-nox+webui user as myself. beyond all input validations and formatting, what will the end entry in the preferences file to define the pre-authenticated subnet? something like 192.168.0.0/24 or anything different?",1,1,1,0.974480390548706,0.8837240934371948,0.9880914688110352,1.0,accept,unanimous_agreement
146114411,6779,"each entered subnet is ""normalized"" by passing it through `qhostaddress::parsesubnet()`. then the entire list (excluding any invalid subnets) is saved to the preferences file. for example, my whitelist contains these entries: [code block] and my `qbittorrent.conf` contains this line: [code block]",0,0,0,0.9861635565757751,0.9942574501037598,0.99410879611969,0.0,accept,unanimous_agreement
146116179,6779,perfect . thx again for this feature. as soon as it's accepted i'll test it against the altwebui stuff recently implemented.,1,1,1,0.9409436583518982,0.971373975276947,0.9925962686538696,1.0,accept,unanimous_agreement
146802864,6779,the function name is misleading. from the name it's unclear what does is test: whether the ip is in any of the subnets (which it actually does) or does it belong to all of them.,0,0,-1,0.7103575468063354,0.6156650185585022,0.5439466238021851,0.0,accept,majority_agreement
146803830,6779,"maybe this is an error, but not warning (desired action is impossible)?",0,0,0,0.8389939665794373,0.9622281789779664,0.9452300667762756,0.0,accept,unanimous_agreement
147160189,6779,what would you propose renaming it to?,0,0,0,0.9824716448783876,0.9921203851699828,0.9938027858734132,0.0,accept,unanimous_agreement
147314972,6779,maybe `isipinrange()`?,0,0,0,0.9863604307174684,0.993935763835907,0.9933329224586488,0.0,accept,unanimous_agreement
147319604,6779,updated.,0,0,0,0.975935995578766,0.9856141209602356,0.9768958687782288,0.0,accept,unanimous_agreement
147547231,6779,i think you want `const preferences *pref `,0,0,0,0.9808436036109924,0.989462435245514,0.9890382289886476,0.0,accept,unanimous_agreement
147547296,6779,"this is a primitive type imo, why forward declare it instead of including the header?",0,0,0,0.9829025268554688,0.9469470381736756,0.989532232284546,0.0,accept,unanimous_agreement
147547367,6779,please add parentheses around each `operator==` statements,0,0,0,0.9867764115333556,0.992737352848053,0.9954051971435548,0.0,accept,unanimous_agreement
147547414,6779,"weird, why have 2 similar functions? can someone point me to the discussion if there were any?",-1,-1,-1,0.9783101081848145,0.9706889986991882,0.9430109858512878,-1.0,accept,unanimous_agreement
147547465,6779,`const utils::net::subnet &subnet`,0,0,0,0.983492076396942,0.992355465888977,0.9929805994033812,0.0,accept,unanimous_agreement
147547562,6779,is it possible to use `qsortfilterproxymodel::data()`?,0,0,0,0.9883757829666138,0.9950103759765624,0.9948700666427612,0.0,accept,unanimous_agreement
147547572,6779,this one should be `parsesubnet()`. the function above is for convenience (to avoid declaring redundant variable in place we need just test subnet string representation).,0,0,0,0.9890512824058532,0.9934426546096802,0.9944576025009156,0.0,accept,unanimous_agreement
147547584,6779,also i would write: [code block],0,0,0,0.98738831281662,0.9921960830688475,0.9951239228248596,0.0,accept,unanimous_agreement
147547698,6779,"~~can we omit `addrconversionok`?~~ ~~because if `toipv4address()` fails, i image it will return an invalid address and there is no harm passing it to `isinsubnet()`.~~ never mind.",0,0,0,0.7683625817298889,0.954060673713684,0.964078724384308,0.0,accept,unanimous_agreement
147547842,6779,"i guess you're missing an ampersand in the 2nd parameter... `bool parsesubnet(const qstring &subnetstr, subnet &subnet)` makes more sense to me.",0,0,0,0.972261369228363,0.9868031144142152,0.988048493862152,0.0,accept,unanimous_agreement
147547907,6779,please write: [code block],0,0,0,0.9869353771209716,0.9874322414398192,0.9955838322639464,0.0,accept,unanimous_agreement
147547951,6779,"i think it's confusing for `parsesubnet` not to return a subnet. especially so when it somehow returns a boolean. now `canparsesubnet()` is overloaded, with one variant returning the parsed subnet. this is similar to [a link].",-1,-1,0,0.6521102786064148,0.6423918008804321,0.5980188250541687,-1.0,accept,majority_agreement
147547956,6779,"the doc says nothing about returned value in this case, so we can get undefined behavior instead.",0,0,0,0.9828243255615234,0.9485132098197936,0.984386384487152,0.0,accept,unanimous_agreement
147548022,6779,in this case it's better to have: [code block],0,0,0,0.982851505279541,0.9885519742965698,0.9940695762634276,0.0,accept,unanimous_agreement
147548061,6779,please apply this patch [code block] note: updated 1.,0,0,0,0.9831952452659608,0.9831169843673706,0.993558943271637,0.0,accept,unanimous_agreement
147548076,6779,~~there's no harm but it's a bit inefficient compared to checking `addrconversionok`. i don't mind the variable but if you feel strongly i'll update it.~~,1,0,0,0.7023797035217285,0.4536066651344299,0.8384318351745605,0.0,accept,majority_agreement
147548127,6779,there was an explicit reason i had to default this to false but i can't remember it now. let me mull this one over.,0,0,0,0.7656477689743042,0.9679603576660156,0.9600276350975036,0.0,accept,unanimous_agreement
147548349,6779,please put an example in this widget's `placeholdertext` property. also i tried to put `192.168.1.0/24` but all i get is `/0`,0,0,0,0.9891534447669984,0.9937722086906432,0.9946233034133912,0.0,accept,unanimous_agreement
147548364,6779,don't forget to remove ` ` in net.cpp,0,0,0,0.9824345707893372,0.992450475692749,0.9938236474990844,0.0,accept,unanimous_agreement
147548382,6779,"this function doesn't really do any of the parsing; it just checks the result of `qhostaddress::parsesubnet` against the `invalid` subnet. in 3/4 of this function's uses, the return is directly used in a conditional. in the 4th use, the result is passed as the sole parameter to `setenabled`. thus i think a function that returns a boolean has more utility.",0,0,0,0.9839329719543456,0.9932399988174438,0.9848802089691162,0.0,accept,unanimous_agreement
147548419,6779,"also please start with the word ""example: "" followed by 1 ipv4 example and 1 ipv6 example. the same with the widget in webui.",0,0,0,0.9882985353469848,0.9924025535583496,0.9952378273010254,0.0,accept,unanimous_agreement
147548445,6779,"subnet parsesubnet(const qstring &subnetstr, bool *ok = nullptr); +1",0,0,0,0.969867706298828,0.9725869297981262,0.9874414205551147,0.0,accept,unanimous_agreement
147548532,6779,", don't produce meaningless overloads. the test functions (with names like `issomething`, `hassomething`, `cansomething` and so on) usually don't have any side results. the conversion functions can have additional result of type bool if its return value can't indicate conversion error.",0,0,0,0.9697797298431396,0.9851539134979248,0.978071928024292,0.0,accept,unanimous_agreement
147548663,6779,"on a second thought, `subnet parsesubnet(const qstring &subnetstr, bool *ok = nullptr);` can indicate conversion error, then the `bool ok` is redundant?",0,0,0,0.9857674837112428,0.9935012459754944,0.9883695840835572,0.0,accept,unanimous_agreement
147548834,6779,initially i propose to have this wrapper around qhostaddress::parsesubnet to get rid from incorrect in utils space `isvalidsubnet(subnet subnet)` function.,0,0,0,0.9877174496650696,0.9942160248756408,0.9917538166046144,0.0,accept,unanimous_agreement
147548854,6779,it seems we can use `qhostaddress::parsesubnet` directly in case we don't need to check its result and have `canparsesubnet` for check-only cases.,0,0,0,0.9887588024139404,0.9933897256851196,0.9894590377807616,0.0,accept,unanimous_agreement
147588934,6779,"please use `env()` (and below), it's better because it's guaranteed to be read-only.",0,0,0,0.9861636757850648,0.9873342514038086,0.9947978258132936,0.0,accept,unanimous_agreement
147601130,6779,"it can only indicate a conversion error via the invalid subnet being returned, which is the entire purpose of this function. any code that doesn't need to check the validity of the result already uses `qhostaddress::parsesubnet` directly.",0,0,0,0.9886838793754578,0.9940624833106996,0.993144989013672,0.0,accept,unanimous_agreement
147618599,6779,i just tested that subnet in the gui and it's working normally for me. can you re-try with the latest build?,0,0,0,0.9780870079994202,0.9122845530509948,0.9921265840530396,0.0,accept,unanimous_agreement
147896813,6779,`bool ok = false;`,0,0,0,0.9706118702888488,0.9876054525375366,0.992071807384491,0.0,accept,unanimous_agreement
147896878,6779,`if (ok) *ok = (subnet != invalid);`,0,0,0,0.9866957664489746,0.9802180528640748,0.9936046004295348,0.0,accept,unanimous_agreement
147897000,6779,`bool ok = false;`,0,0,0,0.9706118702888488,0.9876054525375366,0.992071807384491,0.0,accept,unanimous_agreement
147897107,6779,"up to you, but i will add `const` here.",0,0,0,0.9862869381904602,0.9865062832832336,0.9920851588249208,0.0,accept,unanimous_agreement
147897144,6779,`bool ok = false;`,0,0,0,0.9706118702888488,0.9876054525375366,0.992071807384491,0.0,accept,unanimous_agreement
147897156,6779,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
148343323,6779,"will implement this change. but for my own info, what's the purpose of checking `ok` before assigning it?",0,0,0,0.9874870777130128,0.9762601256370544,0.9950302839279176,0.0,accept,unanimous_agreement
148344501,6779,it can be `nullptr` if user don't want to know status.,0,0,0,0.9878508448600768,0.983607828617096,0.991837203502655,0.0,accept,unanimous_agreement
148535318,6779,"everything seems settled down, so could you, please, make the same changes to src/gui/cmakelists.txt?",0,0,0,0.9854261875152588,0.987435221672058,0.9878684878349304,0.0,accept,unanimous_agreement
148710927,6779,updated cmakelists.txt (and squashed).,0,0,0,0.9880861043930054,0.9918387532234192,0.9936187267303468,0.0,accept,unanimous_agreement
149589036,6779,wrong curly brace position.,-1,0,0,0.7448663115501404,0.8236002922058105,0.5831784605979919,0.0,accept,majority_agreement
149589329,6779,inconsistent `else` block. curly braces are required because of curly braces in `if`.,0,0,0,0.9819199442863464,0.9796263575553894,0.991983950138092,0.0,accept,unanimous_agreement
162117841,6779,"unfortunately i noticed it only now... why have you chosen this out-of-context way to encode this list? we should send it as (json) list, isn't it? i'm sure this should be fixed soon.",-1,-1,-1,0.8272263407707214,0.7283093929290771,0.9692658185958862,-1.0,accept,unanimous_agreement
114750802,6698,"why we need ""preferences"" in these paths? why not just ""appearance/usesystemicontheme"" and so on?",0,0,0,0.9800164103507996,0.9902268648147584,0.9837841987609864,0.0,accept,unanimous_agreement
114750963,6698,this and the following lines are unrelated here!,0,0,0,0.9371652007102966,0.7786057591438293,0.9749711751937866,0.0,accept,unanimous_agreement
114751385,6698,move these includes on bottom of qt includes.,0,0,0,0.9880997538566588,0.9903990626335144,0.9952701926231384,0.0,accept,unanimous_agreement
114751612,6698,"imo, it is time to create explicit gui component.",0,0,0,0.9839819073677064,0.9884647130966188,0.992029309272766,0.0,accept,unanimous_agreement
114751767,6698,app includes should be after system/qt includes.,0,0,0,0.9859631657600404,0.9938296675682068,0.9940333962440492,0.0,accept,unanimous_agreement
114752015,6698,`enum msgtype: int;`,0,0,0,0.9829235672950744,0.9914826154708862,0.991866648197174,0.0,accept,unanimous_agreement
114752586,6698,wrong brace location,0,0,-1,0.5445078015327454,0.909069299697876,0.5058521032333374,0.0,accept,majority_agreement
114752691,6698,you should have it in next indentation level.,0,0,0,0.9873355031013488,0.9884780049324036,0.9952789545059204,0.0,accept,unanimous_agreement
114752767,6698,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
114752848,6698,move brace to next line,0,0,0,0.9827993512153624,0.9865716695785522,0.9930039048194884,0.0,accept,unanimous_agreement
114752869,6698,brace,0,0,0,0.9798331260681152,0.9470231533050536,0.7281572818756104,0.0,accept,unanimous_agreement
114752982,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114753135,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114753541,6698,why not in declaration?,0,0,0,0.9434366226196288,0.972135066986084,0.9889687299728394,0.0,accept,unanimous_agreement
114753623,6698,too long line.,-1,-1,-1,0.8675811886787415,0.648794412612915,0.8303176760673523,-1.0,accept,unanimous_agreement
114753641,6698,too long line,-1,-1,-1,0.8514963984489441,0.5722467303276062,0.8709244132041931,-1.0,accept,unanimous_agreement
114753702,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114753954,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114754038,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114754077,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114754169,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114754325,6698,shift indentation,0,0,0,0.9867537617683412,0.9524338841438292,0.9907351732254028,0.0,accept,unanimous_agreement
114754458,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114754616,6698,"i don't know, inherited code.",0,-1,0,0.9335025548934937,0.5694010257720947,0.9236825704574584,0.0,accept,majority_agreement
114754786,6698,brace issue,0,0,0,0.985737919807434,0.9750126600265504,0.9884418249130248,0.0,accept,unanimous_agreement
114754882,6698,brace,0,0,0,0.9798331260681152,0.9470231533050536,0.7281572818756104,0.0,accept,unanimous_agreement
114754903,6698,brace,0,0,0,0.9798331260681152,0.9470231533050536,0.7281572818756104,0.0,accept,unanimous_agreement
114754921,6698,brace,0,0,0,0.9798331260681152,0.9470231533050536,0.7281572818756104,0.0,accept,unanimous_agreement
114755042,6698,why not in declaration?,0,0,0,0.9434366226196288,0.972135066986084,0.9889687299728394,0.0,accept,unanimous_agreement
114755106,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114755146,6698,brace,0,0,0,0.9798331260681152,0.9470231533050536,0.7281572818756104,0.0,accept,unanimous_agreement
114755182,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114755200,6698,redundant blank line,0,0,0,0.9613184332847596,0.7316353917121887,0.9490613341331482,0.0,accept,unanimous_agreement
114755585,6698,", probably you suggest to replace names here?",0,0,0,0.984289824962616,0.9911766052246094,0.9930636286735536,0.0,accept,unanimous_agreement
114757213,6698,"ok ,but i still think that it is better to place them in the following order: 1. corresponding header file 2. app includes 3. qt include 4. stl and other standard includes why? because standard library includes are of less importance, everybody knows what is inside , but what is much more important is app modules inter-dependencies, showed by app includes.",0,0,0,0.9799859523773192,0.9706321954727172,0.9836349487304688,0.0,accept,unanimous_agreement
114757610,6698,"second point: system includes are usually not sensitive to the include order, while app includes might have implicit dependencies. listing them closer to the start of the includes list helps to find such dependencies if any.",0,0,0,0.9861575365066528,0.9912960529327391,0.9901781678199768,0.0,accept,unanimous_agreement
114757828,6698,"will fix, but, btw, also disagree: indented namespaces in fact discourage namespace usage.",0,0,0,0.7967731952667236,0.8759645819664001,0.9788018465042114,0.0,accept,unanimous_agreement
114758070,6698,"otherwise it would be inlined, and we do not want it, right?",0,0,0,0.8384317755699158,0.7686336636543274,0.9749446511268616,0.0,accept,unanimous_agreement
114774205,6698,this comment should belong to #6375,0,0,0,0.9874531626701356,0.9909479022026062,0.9944202303886414,0.0,accept,unanimous_agreement
114787072,6698,do you mean something like: `src/base/ui.h`: [code block] and in `src/gui/gui.h' [code block],0,0,0,0.9869534373283386,0.994869589805603,0.994439959526062,0.0,accept,unanimous_agreement
114835520,6698,this is good point.,1,1,1,0.9296013116836548,0.9303207993507384,0.9747841954231262,1.0,accept,unanimous_agreement
114835920,6698,these lines was in this place earlier but they were removed in current master.,0,0,0,0.9883592128753662,0.9913231134414672,0.9949706196784972,0.0,accept,unanimous_agreement
114836729,6698,"not in this pr, of course... i didn't think about implementation, i have the idea itself. now we have mainwindow as gui manager, but this is wrong approach.",-1,-1,-1,0.8067634105682373,0.864508867263794,0.7705475687980652,-1.0,accept,unanimous_agreement
114838339,6698,"hm... mistake during rebasing then, i guess.... thanks.",-1,1,1,0.7315554022789001,0.8611528873443604,0.4419726729393005,1.0,accept,majority_agreement
115128389,6698,"""could not find theme file""?",0,0,0,0.9792206287384032,0.9845215678215028,0.9833387136459352,0.0,accept,unanimous_agreement
115128546,6698,this section should be at the end and _base_ should be on top according to the guidelines.,0,0,0,0.9852538704872132,0.9918802380561828,0.9938387274742126,0.0,accept,unanimous_agreement
115128637,6698,redundant extra line.,0,0,0,0.824457049369812,0.5529720187187195,0.7182453274726868,0.0,accept,unanimous_agreement
115128660,6698,one line up.,0,0,0,0.9774948954582214,0.9725520014762878,0.9759528040885924,0.0,accept,unanimous_agreement
115128808,6698,one line up.,0,0,0,0.9774948954582214,0.9725520014762878,0.9759528040885924,0.0,accept,unanimous_agreement
115128957,6698,2 lines down.,0,0,0,0.9481676816940308,0.9692714214324952,0.9603897929191588,0.0,accept,unanimous_agreement
115128982,6698,one line up.,0,0,0,0.9774948954582214,0.9725520014762878,0.9759528040885924,0.0,accept,unanimous_agreement
115129037,6698,one line up.,0,0,0,0.9774948954582214,0.9725520014762878,0.9759528040885924,0.0,accept,unanimous_agreement
115129044,6698,the bracket here and a few lines below empty line before `private:`,0,0,0,0.9788424968719482,0.9898139834403992,0.9949769377708436,0.0,accept,unanimous_agreement
115129046,6698,one line up.,0,0,0,0.9774948954582214,0.9725520014762878,0.9759528040885924,0.0,accept,unanimous_agreement
115129550,6698,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
115129552,6698,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
115129625,6698,"no, themes are addressed by theme name.",0,0,0,0.9780431985855104,0.9909989833831788,0.9919418096542358,0.0,accept,unanimous_agreement
115130185,6698,"how about ""could not find a theme file named""? i could be wrong but `file theme` doesn't seem right, `theme file` seems more correct. anyway in the current one you forgot ""could not _find_ file theme named""? unless the class name is deceiving.",0,0,0,0.9534563422203064,0.9348283410072328,0.9858113527297974,0.0,accept,unanimous_agreement
115130295,6698,"ah, right! thanks! there is a typo. has to be ""could not find theme named"".",1,1,1,0.9715660214424132,0.9906421303749084,0.9934099316596984,1.0,accept,unanimous_agreement
115968618,6698,"`setvalue(post, prevalue);`",0,0,0,0.983479380607605,0.992460548877716,0.994145393371582,0.0,accept,unanimous_agreement
116801952,6698,redundant line,0,0,0,0.9137242436408995,0.7985503077507019,0.8700101971626282,0.0,accept,unanimous_agreement
116802326,6698,"huh, so you like adding these... i can go either way, i'll let others decide.",1,0,0,0.5044493675231934,0.6046375036239624,0.6988836526870728,0.0,accept,majority_agreement
116803046,6698,"please note, the first two commits are authored by and are taken from pr #6375",0,0,0,0.9847918748855592,0.9801440834999084,0.9921072125434875,0.0,accept,unanimous_agreement
116803439,6698,i would remove the extra comma,0,0,0,0.9860637784004213,0.9787684082984924,0.989124059677124,0.0,accept,unanimous_agreement
116804627,6698,i think you should adhere to coding guidelines till it changes...,0,0,0,0.9702323079109192,0.9728519916534424,0.9815696477890016,0.0,accept,unanimous_agreement
116804994,6698,`const auto &pair`,0,0,0,0.9842377305030824,0.9899715185165404,0.994797706604004,0.0,accept,unanimous_agreement
116805169,6698,"`m_entries.emplace_back(pair.first, pair.second);` ?",0,0,0,0.9850487112998962,0.9936068058013916,0.994456112384796,0.0,accept,unanimous_agreement
116805508,6698,and i would remove `{}`,0,0,0,0.9866673350334167,0.9913542866706848,0.9935427904129028,0.0,accept,unanimous_agreement
116805840,6698,pls add parentheses,0,0,0,0.9851780533790588,0.980072259902954,0.9944307208061218,0.0,accept,unanimous_agreement
116806442,6698,"instead of casting inside, why not pass in `size_t` directly?",0,0,0,0.9811732172966005,0.9933092594146729,0.9925897121429444,0.0,accept,unanimous_agreement
116806607,6698,i would add parentheses,0,0,0,0.9847016334533693,0.9671653509140016,0.993655562400818,0.0,accept,unanimous_agreement
116807074,6698,i would remove `{}`,0,0,0,0.986806571483612,0.9916917085647584,0.9928199648857116,0.0,accept,unanimous_agreement
116807408,6698,i would remove `{}`,0,0,0,0.986806571483612,0.9916917085647584,0.9928199648857116,0.0,accept,unanimous_agreement
116810810,6698,"just curious, why create a namespace?",0,0,0,0.946675181388855,0.6100825071334839,0.9758301973342896,0.0,accept,unanimous_agreement
116829572,6698,"no, impossible: [code block]",0,0,0,0.979814887046814,0.977668523788452,0.9003503918647766,0.0,accept,unanimous_agreement
116831695,6698,because `qabstractitemmodel` interface uses `int` and replacing parameter type we get casts in `data()` then.,0,0,0,0.9882986545562744,0.9928954243659972,0.9935004115104676,0.0,accept,unanimous_agreement
116832796,6698,to show that these constants are local.,0,0,0,0.9800574779510498,0.989688515663147,0.9924910664558412,0.0,accept,unanimous_agreement
117098066,6698,no big deal imo but i think `logmessagetype` should not be abbreviated because no other section is.,0,1,0,0.9753050804138184,0.49925297498703,0.6915401220321655,0.0,accept,majority_agreement
117103499,6698,deser i alize,0,0,0,0.945220708847046,0.9104732275009156,0.9894396662712096,0.0,accept,unanimous_agreement
117105617,6698,to freely mix objects from different sources within a theme?,0,0,0,0.9810376763343812,0.992442786693573,0.990459680557251,0.0,accept,unanimous_agreement
117107447,6698,typo: correspondign,0,0,0,0.9848768711090088,0.9840627908706664,0.9938679337501526,0.0,accept,unanimous_agreement
117108245,6698,"""this function handles theme inheritance""?",0,0,0,0.98923522233963,0.992633044719696,0.9932663440704346,0.0,accept,unanimous_agreement
117110310,6698,seriali z ation,0,0,0,0.988330602645874,0.9873162508010864,0.984430491924286,0.0,accept,unanimous_agreement
117110759,6698,thees -> this?,0,0,0,0.9725065231323242,0.983619511127472,0.9867542386054992,0.0,accept,unanimous_agreement
117110975,6698,deescription: one extra e,0,0,0,0.9831795692443848,0.9841131567955016,0.9954959154129028,0.0,accept,unanimous_agreement
117112697,6698,swap with above.,0,0,0,0.9809261560440063,0.990088164806366,0.9934201836586,0.0,accept,unanimous_agreement
117113321,6698,"them -> theme? also ""color"" 2 lines above.",0,0,0,0.9824060201644896,0.9932767748832704,0.9906628131866456,0.0,accept,unanimous_agreement
117113450,6698,firs -> first,0,0,0,0.9778299927711488,0.9668011665344238,0.982466995716095,0.0,accept,unanimous_agreement
117114296,6698,one line up.,0,0,0,0.9774948954582214,0.9725520014762878,0.9759528040885924,0.0,accept,unanimous_agreement
117114607,6698,why so lonely?,-1,-1,-1,0.92752605676651,0.8767445087432861,0.9651311039924622,-1.0,accept,unanimous_agreement
117115841,6698,wasloadedsucces s fu l ly,0,0,0,0.9592849016189576,0.6567992568016052,0.9845394492149352,0.0,accept,unanimous_agreement
117117196,6698,"some lines above you use variable name xok but here xok. personally i don't care, actually i prefer the second in this case but coding style.. if it matters i've seen at least one more somewhere else.",-1,0,0,0.9448198080062866,0.9277883768081664,0.9252124428749084,0.0,accept,majority_agreement
117117935,6698,out -> our?,0,0,0,0.9649117588996888,0.9755337834358216,0.9911565780639648,0.0,accept,unanimous_agreement
117118422,6698,capital x in extension.,0,0,0,0.9831838011741638,0.984483540058136,0.9919005632400512,0.0,accept,unanimous_agreement
117120886,6698,"not an error but you use ""colors"" everywhere else. same 2 lines up.",0,0,0,0.9838512539863586,0.9873030781745912,0.9797744154930116,0.0,accept,unanimous_agreement
117122030,6698,you forward declare this a few lines below.,0,0,0,0.9877161383628844,0.985817015171051,0.992488980293274,0.0,accept,unanimous_agreement
117124561,6698,triple fff in effect.,0,0,0,0.9873583912849426,0.9897884130477904,0.7530004978179932,0.0,accept,unanimous_agreement
117124918,6698,serialise -> serialize,0,0,0,0.9874719977378844,0.9763861298561096,0.9901536107063292,0.0,accept,unanimous_agreement
117202149,6698,i would use format string and `qstring::arg()`.,0,0,0,0.9875176548957824,0.9925745725631714,0.9944013953208924,0.0,accept,unanimous_agreement
117203963,6698,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
117204052,6698,coding style.,0,0,0,0.9849669337272644,0.9589239358901978,0.9877970814704896,0.0,accept,unanimous_agreement
117204258,6698,fix coding style: add blank line before `private` section.,0,0,0,0.98894602060318,0.9917268753051758,0.9939437508583068,0.0,accept,unanimous_agreement
117204690,6698,fix coding style. lambda should be indented as function so mave curly brace to next line.,0,0,0,0.9883244037628174,0.9920781254768372,0.9912319779396056,0.0,accept,unanimous_agreement
117204941,6698,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
117225243,6698,explicit qvariant isn't needed here and below.,0,0,0,0.9863082766532898,0.9878394603729248,0.9924910664558412,0.0,accept,unanimous_agreement
117225596,6698,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
117225723,6698,i would remove braces in these two loops.,0,0,0,0.9851587414741516,0.9842574596405028,0.9876101016998292,0.0,accept,unanimous_agreement
117227383,6698,don't need it anymore. leave qt5 branch only.,0,0,0,0.8877543210983276,0.9887838959693908,0.9912793040275574,0.0,accept,unanimous_agreement
117227679,6698,oops. this comment is related to other line.,-1,-1,-1,0.916110336780548,0.9758995175361632,0.9794067740440368,-1.0,accept,unanimous_agreement
117227785,6698,don't need it anymore. leave qt5 branch only.,0,0,0,0.8877543210983276,0.9887838959693908,0.9912793040275574,0.0,accept,unanimous_agreement
117228093,6698,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
117228234,6698,coding style.,0,0,0,0.9849669337272644,0.9589239358901978,0.9877970814704896,0.0,accept,unanimous_agreement
117228684,6698,it's bad idea using unrelated operators even if it's shorter.,-1,-1,-1,0.9730151891708374,0.98850017786026,0.7842620611190796,-1.0,accept,unanimous_agreement
117228880,6698,unused branch.,0,0,0,0.8914957642555237,0.9497455954551696,0.9494306445121764,0.0,accept,unanimous_agreement
117229068,6698,need space after if.,0,0,0,0.9581381678581238,0.9810020327568054,0.9931240677833556,0.0,accept,unanimous_agreement
117229607,6698,need blank lines between enum declarations.,0,0,0,0.9631090760231018,0.9797050356864928,0.9821099638938904,0.0,accept,unanimous_agreement
117230124,6698,it is unix only. move to unixconf.pri,0,0,0,0.9868965744972228,0.9932870268821716,0.9941898584365844,0.0,accept,unanimous_agreement
117410823,6698,isn't plasma integration unix only feature?,0,0,0,0.9876054525375366,0.988629937171936,0.99351304769516,0.0,accept,unanimous_agreement
117419709,6698,why is it separate from other color providers?,0,0,0,0.9505908489227296,0.9802942276000975,0.9904884099960328,0.0,accept,unanimous_agreement
117419914,6698,"imo, all this theme initialization should be in application.",0,0,0,0.9815689325332642,0.9932703375816344,0.9927878975868224,0.0,accept,unanimous_agreement
117420546,6698,aren't `registerfontproviders` and `registercolorproviders` enough? (without `gui` part) or there could be non-gui providers?,0,0,0,0.9872685074806212,0.9945135116577148,0.990203619003296,0.0,accept,unanimous_agreement
117421486,6698,i wouldn't create these variables.,0,0,0,0.8391759395599365,0.8550879955291748,0.9144545793533324,0.0,accept,unanimous_agreement
117421527,6698,"theoretically no, but practically yes.",0,0,0,0.9667920470237732,0.9740117192268372,0.9400674104690552,0.0,accept,unanimous_agreement
117422104,6698,"why on activated? isn't ""current item changed"" better choice?",0,0,0,0.9753512740135192,0.9820988178253174,0.9867832660675048,0.0,accept,unanimous_agreement
117438134,6698,i had an impression that they are re-used somewhere...,0,0,0,0.9197468161582948,0.8712145686149597,0.9779858589172364,0.0,accept,unanimous_agreement
117454067,6698,maybe `active()` would be better?,0,0,0,0.9858399629592896,0.9941100478172302,0.9907387495040894,0.0,accept,unanimous_agreement
117466720,6698,maybe somebody wants to re-apply a theme. last time it was me tuning the plasma colors.,0,0,0,0.96010559797287,0.9607139229774476,0.965580940246582,0.0,accept,unanimous_agreement
117475840,6698,"could you elaborate, please?",0,0,0,0.9829531908035278,0.988714635372162,0.9868924021720886,0.0,accept,unanimous_agreement
117477694,6698,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
117671085,6698,: see `&=`.,0,0,0,0.9862613081932068,0.9906845092773438,0.9891158938407898,0.0,accept,unanimous_agreement
117714322,6698,yes. `&=` is bitwise operator and not logical. correct code: [code block] c++ compilers (still) accept this code as such as using integers in logical expressions but imo (and i hope not only imo) it's a bad idea mixing it.,-1,-1,-1,0.7595467567443848,0.7385716438293457,0.7879274487495422,-1.0,accept,unanimous_agreement
117715864,6698,"section 4.7.4 of the standard is explicit on this subject and the code is correct. however, if you want that change, probably it means that the taken approach does not please everyone and i better refactor this fragment to return early after the first read error.",0,0,0,0.9813284873962402,0.9866212606430054,0.9885451197624208,0.0,accept,unanimous_agreement
117737927,6698,"i don't know why this was done, apparently, for backward compatibility. imo, implicit conversion between boolean and numeric types is evil. it would be better independently of the discussed issue unless you need to read it all in any case.",-1,-1,-1,0.96799498796463,0.9632220268249512,0.9842876195907592,-1.0,accept,unanimous_agreement
117778888,6698,replaced with exceptions.,0,0,0,0.9609079360961914,0.9682894349098206,0.9885860085487366,0.0,accept,unanimous_agreement
118046397,6698,"so the question boils down to ""does theme actively change application or is it used by the app?"" if so, then theme the themes are passive entities.",0,0,0,0.9682631492614746,0.9913581609725952,0.9902302622795104,0.0,accept,unanimous_agreement
118909066,6698,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
119870868,6698,some headers are in sources section. please fix.,0,0,0,0.9837575554847716,0.9509073495864868,0.9796764850616456,0.0,accept,unanimous_agreement
119871861,6698,use `static_cast` unless you check casting result.,0,0,0,0.9867803454399108,0.9922401905059814,0.9950100183486938,0.0,accept,unanimous_agreement
119901052,6698,shouldn't you capture `this` here? you use `tr` method inside this lambda.,0,0,0,0.987549602985382,0.992753565311432,0.994030773639679,0.0,accept,unanimous_agreement
119901330,6698,deserializationerror &ex,0,0,0,0.986292839050293,0.981543779373169,0.9763895869255066,0.0,accept,unanimous_agreement
125428067,6698,`tr()` is static.,0,0,0,0.9842717051506042,0.989063560962677,0.9945968389511108,0.0,accept,unanimous_agreement
125743103,6698,this partially solves #2934.,0,0,0,0.9852970242500304,0.99220472574234,0.9913661479949952,0.0,accept,unanimous_agreement
128436030,6698,i have long wanted to say this: i extremely do not like this approach! why are you making the theme dependent on its users? why not make an abstract interface? e.g.: `qcolor colortheme::color(colorid id) const`. then we won't need to change it every time we want to add support for those in some other application component.,-1,-1,-1,0.9893635511398317,0.980055332183838,0.9889905452728271,-1.0,accept,unanimous_agreement
128464641,6698,"because different parts of the colours set require a bit different handling. torrent state colours require fast access and as such are backed by a cache, while others do not need this. these three functions give a simple interface for clients and of course one can do: [code block] sorry, i can't see how adding an enum member is better or simpler than adding a virtual function.",-1,-1,-1,0.940203845500946,0.8657950162887573,0.9295828938484192,-1.0,accept,unanimous_agreement
128470361,6698,"okay, okay, i won't criticize your solutions, they are certainly correct!.. but if i leave the sarcasm aside, i meant a little more. i meant more abstract interface. the colortheme class simply parses the file and allows you to request a color by its [string] key. caching and other specific handling can (should) be done on the client side.",1,-1,1,0.6743423938751221,0.4298965632915497,0.5806928277015686,1.0,accept,majority_agreement
128483811,6698,"but nothing in the interface says that `colortheme::color()` might be slow, therefore a cache at the client side seems to be illogical. from the other side, you are absolutely right: the client only can decide what is slow for it and what is not.",0,0,0,0.916494369506836,0.9547458291053772,0.9860410094261168,0.0,accept,unanimous_agreement
128569838,6698,"did someone once specifies it in the interface? for example, `colortheme::getcolorslowly()`? this is what i want: each application layer is responsible for its task and has no incorrect dependencies.",0,0,0,0.9865168333053588,0.992395281791687,0.9934032559394836,0.0,accept,unanimous_agreement
140826712,6698,: please take a look at the last commit (refactor theme serialization). i've tried to implement your recommendations.,0,0,0,0.9744423627853394,0.9796638488769532,0.9887296557426452,0.0,accept,unanimous_agreement
140833898,6698,"well, i'll look into it asap.",0,0,0,0.9790453910827636,0.9759420156478882,0.979949951171875,0.0,accept,unanimous_agreement
393258675,12144,i would declare it as static const invalid in appropriate struct.,0,0,0,0.9868539571762084,0.9844478368759156,0.9799806475639344,0.0,accept,unanimous_agreement
393261985,12144,invalid coding style.,0,0,-1,0.6447865962982178,0.5782832503318787,0.6800457835197449,0.0,accept,majority_agreement
393263785,12144,there are no lines in model. there are items.,0,0,0,0.9791544675827026,0.9848324656486512,0.989919662475586,0.0,accept,unanimous_agreement
393270060,12144,"i would call it ""onnewmessage"" or ""handlenewmessage"".",0,0,0,0.9872401356697084,0.9904285669326782,0.9904145002365112,0.0,accept,unanimous_agreement
393439897,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
393439938,12144,done?,0,0,0,0.9820621609687804,0.9815027713775636,0.9878233671188354,0.0,accept,unanimous_agreement
393439972,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
393459962,12144,i think this was done because of the use of html based formatting in `logwidget` which is not required anymore.,0,0,0,0.9859386086463928,0.992871105670929,0.9860188961029052,0.0,accept,unanimous_agreement
393460109,12144,will `m_msgcount` make more sense?,0,0,0,0.985392153263092,0.9926901459693908,0.9929640293121338,0.0,accept,unanimous_agreement
393645667,12144,"we shouldn't use `exec()` anymore, take a look at `void trackerfilterslist::showmenu(const qpoint &)` to see how to do it in an async way.",0,0,0,0.9861141443252563,0.9937617182731628,0.9940400123596193,0.0,accept,unanimous_agreement
393680905,12144,"should i combine both views under `basiclogview`, i mean all they have different is model, which can be added seperately",0,0,0,0.9867483377456664,0.9922323226928712,0.9886743426322936,0.0,accept,unanimous_agreement
393696721,12144,"as i said before you can use generic view. all things you're doing in view constructors you can apply from outside it. seems one exception is key press event handler, so you can implement generic copiablelistview and use it with your models (although you can use basic listview and set external event handler).",0,0,0,0.9861695766448976,0.988760232925415,0.988663375377655,0.0,accept,unanimous_agreement
393700490,12144,"both have the same key events (is am missing something) i was doing it this way implement `loglistview`, set model and filter seperately in executionlogwidget i.e create two instance and setmodel accordingly, they both seem to have only this much difference",0,0,0,0.9663463234901428,0.9871125817298888,0.9861332774162292,0.0,accept,unanimous_agreement
393702370,12144,"problem is model, they seem to do the same think but i can't seem to find an acceptable way to combine them.",0,0,-1,0.6276217699050903,0.6027942299842834,0.6633129119873047,0.0,accept,majority_agreement
393708367,12144,seems the only way is using templates.,0,0,0,0.9002935886383057,0.9598605036735536,0.9738049507141112,0.0,accept,unanimous_agreement
393712177,12144,although seems it isn't good idea to use templates with qobject based types so we can leave two models.,0,0,0,0.9468153715133668,0.545072615146637,0.9347025752067566,0.0,accept,unanimous_agreement
393712701,12144,signals will not work in template how about this [code block] but it will duplicate data,0,0,0,0.984114408493042,0.9861504435539246,0.9899746775627136,0.0,accept,unanimous_agreement
393717737,12144,what do you mean? also vector isn't good choice for collecting messages since when it is full each new message will need its shifting.,0,0,0,0.9631341099739076,0.5015513896942139,0.9439133405685424,0.0,accept,unanimous_agreement
393727954,12144,we currently directly query the message from the logger with this we're maintaining our own message queue. stack?,0,0,0,0.987951934337616,0.9868970513343812,0.9945132732391356,0.0,accept,unanimous_agreement
393730223,12144,"i think you were saying to limit the number of messages in msglist, so maybe this can be considered with this we're caching the message also as you said.",0,0,0,0.9876656532287598,0.990365207195282,0.9898423552513124,0.0,accept,unanimous_agreement
393739770,12144,"currently in this pr, i suppose... yes. but already converted in display friendly form. otherwise we need to obtain and convert it regularly.",0,0,0,0.979882001876831,0.9712857007980348,0.9900599718093872,0.0,accept,unanimous_agreement
393745528,12144,"setting up was small, so i didn't make separate classes",0,0,0,0.953272581100464,0.9388940334320068,0.9706915020942688,0.0,accept,unanimous_agreement
393760683,12144,"well now i'm implementing `baselogmodel`, but just for the discussion, isn't it will create performance implication on a large number of messages. which was the original problem. also, the display functions are only called for the items in the view so it can't be a much of a problem neither std::stack or qstack provides iteration so i'm using qvector as a stack,",0,0,0,0.9688768982887268,0.9671126008033752,0.9863675236701964,0.0,accept,unanimous_agreement
393766134,12144,we need to make a choice. seems we need to compare performance of both ways. anyway both models contain many duplicated code so baselogmodel will probably relevant in both cases.,0,0,0,0.9758884310722352,0.9697274565696716,0.9817200303077698,0.0,accept,unanimous_agreement
393768956,12144,"there are ""circular buffer"" types. as far as i remember tried to use one of them in logger (in original pr).",0,0,0,0.9875054359436036,0.982714593410492,0.9901498556137084,0.0,accept,unanimous_agreement
393823147,12144,why you need 3 lines to do the same thing? why not just: [code block],0,0,0,0.9725342988967896,0.988092839717865,0.9860835671424866,0.0,accept,unanimous_agreement
393836560,12144,this should be `return m_types.testflag(type);`,0,0,0,0.986916184425354,0.993594229221344,0.9951275587081908,0.0,accept,unanimous_agreement
393844606,12144,i think it is a bad idea to use `std::pair` all over the place. maybe you can use `indexrange ` or `indexinterval ` if the first one doesn't fit well.,-1,-1,-1,0.9250965714454652,0.7976954579353333,0.822563648223877,-1.0,accept,unanimous_agreement
393854457,12144,"imo, it seems to be redundant at all. why one needs to know this range before it obtain messages for the first time?",0,0,0,0.6449626684188843,0.8279143571853638,0.9052610397338868,0.0,accept,unanimous_agreement
393895971,12144,"seems ""retrieve by demand"" approach still needs some kind of this info. although i would reimplement single message retrieving to be index based (real index instead of id). we just need to provide ""logger::messagecount()"" method. this way we avoid multiple index-to-id mappings (currently this pr need two mappings to access any message and additional calculations/checkings to get messages count). so i suggest that ""logger::getmessage(int index)"" just means ""get nth message from current set"".",0,0,0,0.9756163358688354,0.9927899837493896,0.9852346777915956,0.0,accept,unanimous_agreement
393898162,12144,we still need to maintain id (as timepoint alternative) so async client (e.g. webapi user) can access messages subset starting from some timepoint.,0,0,0,0.9885950684547424,0.9916406869888306,0.9931702613830566,0.0,accept,unanimous_agreement
394363252,12144,used qcache,0,0,0,0.987947642803192,0.98953515291214,0.993767261505127,0.0,accept,unanimous_agreement
394363379,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
394363472,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
394363564,12144,done?,0,0,0,0.9820621609687804,0.9815027713775636,0.9878233671188354,0.0,accept,unanimous_agreement
394569747,12144,seems this can go private.,0,0,0,0.9860814809799194,0.9411246180534364,0.9881213903427124,0.0,accept,unanimous_agreement
394570569,12144,later date should be on top.,0,0,0,0.9848605394363404,0.9850017428398132,0.992358148097992,0.0,accept,unanimous_agreement
394571173,12144,`qobject::` is redundant isn't? you should really read closely to the code samples i gave...,0,0,0,0.9356945157051086,0.9046987891197203,0.9708630442619324,0.0,accept,unanimous_agreement
394571436,12144,is this header in use?,0,0,0,0.9869683384895324,0.9909508228302002,0.99452543258667,0.0,accept,unanimous_agreement
394571694,12144,this can be `const qaction *` can't it?,0,0,0,0.9848697185516356,0.9940357208251952,0.9939671754837036,0.0,accept,unanimous_agreement
394572427,12144,seems this is not needed here.,0,0,0,0.9676581025123596,0.9710206985473632,0.9896866679191588,0.0,accept,unanimous_agreement
394574532,12144,`const qmodelindex &index` as it seems to be some complex type to me.,0,0,0,0.9848710894584656,0.9929314851760864,0.9878658652305604,0.0,accept,unanimous_agreement
394577671,12144,`logger::message()` and `logger::peer()` read data from different source so they should have different lock.,0,0,0,0.9866173267364502,0.9900182485580444,0.9919291734695436,0.0,accept,unanimous_agreement
394579751,12144,seems this project prefers each variable to have its own line. check other places too!,0,0,0,0.91839599609375,0.7312928438186646,0.9879125952720642,0.0,accept,unanimous_agreement
394581398,12144,and don't appent these extra spaces inside this line (between name and email).,0,0,0,0.6073088645935059,0.9825721979141236,0.9938974976539612,0.0,accept,unanimous_agreement
394593541,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
394593571,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
394594156,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
394594215,12144,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
394594267,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
394594343,12144,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
394594434,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
394594524,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
394594831,12144,"seems like they're not needed to explicitly store, so i removed them as member variables.",0,0,0,0.978339672088623,0.9925681352615356,0.9876540303230286,0.0,accept,unanimous_agreement
395110899,12144,done? you didn't change anything here...,0,0,0,0.8541507124900818,0.9457322359085084,0.9508941769599916,0.0,accept,unanimous_agreement
395112121,12144,what does this do? better add a comment in code because it is not really obvious.,0,0,0,0.9525269865989684,0.8685504794120789,0.983910322189331,0.0,accept,unanimous_agreement
395112858,12144,constructor & destructor should be placed together.,0,0,0,0.986854076385498,0.9933189153671264,0.989313304424286,0.0,accept,unanimous_agreement
395117947,12144,"they should be private slots, displaylistmenu is connected to context menu requested and copy selection is connected to copy action",0,0,0,0.9885810017585754,0.994343876838684,0.9954882264137268,0.0,accept,unanimous_agreement
395119986,12144,i mean shouldn't `keypressevent()` be private?,0,0,0,0.9789111614227296,0.9918714761734008,0.9892938137054444,0.0,accept,unanimous_agreement
395124028,12144,"sorry, done",-1,-1,-1,0.987001657485962,0.992087185382843,0.9943243265151978,-1.0,accept,unanimous_agreement
395124274,12144,added a comment please check.,0,0,0,0.9837032556533812,0.9850719571113586,0.9924882650375366,0.0,accept,unanimous_agreement
395124424,12144,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
395182950,12144,please add `explicit`,0,0,0,0.9869476556777954,0.9921699166297911,0.99580979347229,0.0,accept,unanimous_agreement
395185646,12144,do you mean now it is all plain text and no more coloring for different `msgtype`?,0,0,0,0.9855535626411438,0.989295780658722,0.9936402440071106,0.0,accept,unanimous_agreement
395187618,12144,move the declaration lower to just where it is needed.,0,0,0,0.985066533088684,0.9868446588516236,0.9906008243560792,0.0,accept,unanimous_agreement
395190369,12144,if possible try moving #ifndef block to the bottom of this function block.,0,0,0,0.9871171116828918,0.9935278296470642,0.9920554757118224,0.0,accept,unanimous_agreement
395191304,12144,should this be renamed to `setmsgtypes()`?,0,0,0,0.9879136681556702,0.9947302341461182,0.9953632354736328,0.0,accept,unanimous_agreement
395196371,12144,"coloring is handled by model, so we don't do html formatting any more, previously we're using qlabel with html formatting.",0,0,0,0.9873270392417908,0.9946411848068236,0.9945265650749208,0.0,accept,unanimous_agreement
395200282,12144,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
395200353,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
395200404,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
395200469,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
395200529,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
395445996,12144,seems a good idea to me to turn msgmodel->reset() into a public slot and you can invoke it without the lambda.,1,1,0,0.6592775583267212,0.5820339918136597,0.9275270104408264,1.0,accept,majority_agreement
395448317,12144,[a link] would you please check your code thoroughly?,0,0,0,0.9839141368865968,0.984655499458313,0.9950266480445862,0.0,accept,unanimous_agreement
395449143,12144,can't this be private?,0,0,0,0.9825170636177064,0.9895596504211426,0.9863231182098388,0.0,accept,unanimous_agreement
395449384,12144,redundant empty line isn't?,0,0,0,0.967462718486786,0.8262041807174683,0.5679371356964111,0.0,accept,unanimous_agreement
395451673,12144,"`qstring::fromlatin1(""%1 - "")`",0,0,0,0.9850586652755736,0.9895558953285216,0.9927438497543336,0.0,accept,unanimous_agreement
395451833,12144,those parameters can be `const`.,0,0,0,0.987901210784912,0.9914596080780028,0.9944297671318054,0.0,accept,unanimous_agreement
395451920,12144,use a `switch()` or return on negated condition.,0,0,0,0.986092746257782,0.9897378087043762,0.993006467819214,0.0,accept,unanimous_agreement
395452256,12144,i would use this form: [code block] and then why not merge it with the declaration of `text`?,0,0,0,0.9871087670326232,0.995299220085144,0.9937677383422852,0.0,accept,unanimous_agreement
395452618,12144,we need an empty line at eof please.,0,0,0,0.9831749796867372,0.9864969849586488,0.9904568791389464,0.0,accept,unanimous_agreement
395455969,12144,"""lastknownid"" is meaningless name in terms of logger itself (logger knows any existing id). i would change it to accept parameter that has some consistent meaning, e.g. ""sinceid"". even more... as i said before we really has no ids but some ""synthetic"" timepoints (to be sure they are unique) so i would rename all id related stuff accordingly.",0,0,0,0.9361416697502136,0.9740686416625975,0.9576812982559204,0.0,accept,unanimous_agreement
395456469,12144,"also i would rename ""msg"" to ""message"" in all (or at least in all public) names. ?",0,0,0,0.9875461459159852,0.9944739937782288,0.9945435523986816,0.0,accept,unanimous_agreement
395457075,12144,"why did you remove reference from ""types"" parameter?",0,0,0,0.9792481660842896,0.9923912882804872,0.9939056038856506,0.0,accept,unanimous_agreement
395459726,12144,`explicit` should be always used if constructor can be used with single parameter and we don't want to use it implicitly. if you remove `explicit` here you will be able to write `logfiltermodel model = log::all` but it is incorrect.,0,0,0,0.9845390915870668,0.9941206574440002,0.9766826629638672,0.0,accept,unanimous_agreement
395464319,12144,"it's incorrect usage of signals. signals should be used to inform about some events, but not to encourage something external to take some action.",-1,0,0,0.6504063606262207,0.8202432990074158,0.5214834213256836,0.0,accept,majority_agreement
395467471,12144,why these two are static? if you need to store them between method calls you should make them class members.,0,0,0,0.98398756980896,0.9905545115470886,0.9864621758461,0.0,accept,unanimous_agreement
395470221,12144,is it correct? shouldn't `+=` be here?,0,0,0,0.980872392654419,0.9933317303657532,0.9942891597747804,0.0,accept,unanimous_agreement
395470768,12144,also i don't see where they're used...,0,0,0,0.7756195068359375,0.5609942674636841,0.9865471124649048,0.0,accept,unanimous_agreement
395472503,12144,why don't you return `item` here? otherwise you need to call logger three times at once.,0,0,0,0.9816649556159972,0.9857786893844604,0.9924012422561646,0.0,accept,unanimous_agreement
395472640,12144,"agreed, at least in all public names.",0,0,0,0.9802985787391664,0.9756101369857788,0.9832309484481812,0.0,accept,unanimous_agreement
395473398,12144,"`log::msgtypes` is actually `qflags<>`, i suspect it is small enough to be passed by value, i don't think it make sense that it will be larger than the underlying enum size.",0,0,0,0.9610944390296936,0.9850988388061525,0.9909936785697936,0.0,accept,unanimous_agreement
395475265,12144,"ok, seems you're right.",0,0,0,0.9643936157226562,0.8030276894569397,0.9521245956420898,0.0,accept,unanimous_agreement
395530487,12144,yeap you're right,0,0,0,0.8321642279624939,0.8350318670272827,0.93830543756485,0.0,accept,unanimous_agreement
395532977,12144,"my first thought was -> [code block] but this will not work, because we have a filter mode inside messageview, will have to add another check from filtermodel and then cast its model to baselogmodel, doesn't it will spill the implementation detail everywhere, any suggestion?",0,0,0,0.9581173658370972,0.9808126091957092,0.9763432145118712,0.0,accept,unanimous_agreement
395618715,12144,do you really need the dummy parameter?,0,0,0,0.9872424602508544,0.988456130027771,0.9914284348487854,0.0,accept,unanimous_agreement
395619605,12144,fix coding style please.,0,0,0,0.9866002202033995,0.981417953968048,0.990057647228241,0.0,accept,unanimous_agreement
395621386,12144,"`qstring::fromlatin1(""%1 - %2"")`",0,0,0,0.9852051138877868,0.9925398230552672,0.9933547973632812,0.0,accept,unanimous_agreement
395621680,12144,please add an empty line between every switch cases.,0,0,0,0.9858078956604004,0.9893203973770142,0.9932129383087158,0.0,accept,unanimous_agreement
395625320,12144,is it guaranteed that `id` will always be valid and will not read outside of `m_peers`? this looks very unsafe to me.,-1,-1,-1,0.9714388847351074,0.7700110077857971,0.7665945291519165,-1.0,accept,unanimous_agreement
395629041,12144,i think we should add `case log::normal:` here to be explicit. the `default` case should be only used for catching unexpected cases.,0,0,0,0.9817458391189576,0.9934332370758056,0.9876394867897034,0.0,accept,unanimous_agreement
395633106,12144,"`m_msgcount` can be implied from m_cache size, isn't?",0,0,0,0.9890118837356568,0.992972493171692,0.994575262069702,0.0,accept,unanimous_agreement
395641695,12144,"it isn't guaranteed that start index is 0. you should initialize it alongside with initial message count from logger. e.g. if message count is 0 then start index is 0, otherwise start index should be obtained from first message.",0,0,0,0.9870659708976746,0.9921350479125975,0.9913620352745056,0.0,accept,unanimous_agreement
395642611,12144,are you just messing around here?,-1,0,-1,0.9550771713256836,0.7894575595855713,0.703874945640564,-1.0,accept,majority_agreement
399827482,12144,"webui functions also take parameters at lastknownid, should i change them too? ps: this pr doesn't touch those function, should i really have to touch these?",0,0,0,0.9720345735549928,0.9825637936592102,0.992095410823822,0.0,accept,unanimous_agreement
399828540,12144,"`baselogmodel::data` does the checking, i don't think both inherited classes can do boundary checking (they don't know indexes)",0,0,0,0.9422232508659364,0.989092230796814,0.989568531513214,0.0,accept,unanimous_agreement
399828927,12144,"i got this through hard testing :face_with_tears_of_joy: ps: will change to 64, or is there any other number?",1,0,1,0.7402448058128357,0.9379730224609376,0.9825006127357484,1.0,accept,majority_agreement
399829115,12144,should i leave it? i think the maximum number of visible messages in the current view should be around this number anyway.,0,0,0,0.9851859211921692,0.9845796823501588,0.9874196648597716,0.0,accept,unanimous_agreement
399847726,12144,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
399847753,12144,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
399847791,12144,done?,0,0,0,0.9820621609687804,0.9815027713775636,0.9878233671188354,0.0,accept,unanimous_agreement
399847915,12144,maybe `getmessagedfrom(int lastknownid)`?,0,0,0,0.9848419427871704,0.9948484897613524,0.9946148991584778,0.0,accept,unanimous_agreement
399922535,12144,please remove it.,0,0,0,0.9701205492019652,0.982530415058136,0.9760221838951112,0.0,accept,unanimous_agreement
399962238,12144,functions should be listed before variables.,0,0,0,0.9852784872055054,0.9917660355567932,0.993722140789032,0.0,accept,unanimous_agreement
399966381,12144,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
399966740,12144,please add an empty line above this.,0,0,0,0.9804593324661256,0.9884363412857056,0.9945873022079468,0.0,accept,unanimous_agreement
399968853,12144,"nope cache size is fixed, it will fill up to the size specified in the baselogmodel constructor (64 for now) and then start deleting the least recently used",0,0,0,0.9873809814453124,0.9927001595497132,0.9914275407791138,0.0,accept,unanimous_agreement
399968930,12144,we cache no all messages but several recent ones (in current pr implementation).,0,0,0,0.988680362701416,0.9917473793029784,0.993736982345581,0.0,accept,unanimous_agreement
399970101,12144,`const qstring time = qdatetime::frommsecssinceepoch(msg.timestamp).tostring(qt::systemlocaleshortdate);`,0,0,0,0.9850834608078004,0.9939637780189514,0.9927104711532592,0.0,accept,unanimous_agreement
399970948,12144,"please try `return {text};` or `return {text, {}, {}};`",0,0,0,0.9761084914207458,0.9942615032196044,0.9952408075332642,0.0,accept,unanimous_agreement
399972674,12144,i would still add an `break;` here,0,0,0,0.9863206744194032,0.9913281798362732,0.9921712875366212,0.0,accept,unanimous_agreement
399975016,12144,move this empty line below `item` declaration.,0,0,0,0.9872804284095764,0.9902024269104004,0.99434632062912,0.0,accept,unanimous_agreement
399975236,12144,`const int index`,0,0,0,0.9853325486183168,0.9902626276016236,0.9931373596191406,0.0,accept,unanimous_agreement
399975755,12144,what do you mean by using `&&` here?? or you should use `q_assert_x`,0,0,0,0.9885308742523192,0.9938312768936156,0.9914031624794006,0.0,accept,unanimous_agreement
399992350,12144,done.. extra ident is added by uncrusitify should i keep it?,0,0,0,0.9858837723731996,0.9887248873710632,0.9924127459526062,0.0,accept,unanimous_agreement
399992475,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
399992551,12144,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
399992596,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
399992829,12144,removed the string,0,0,0,0.9787412285804749,0.9900036454200744,0.9941034913063048,0.0,accept,unanimous_agreement
399993248,12144,"changed to later one, clang-tidy is complaining about missing initializer for the first one.",-1,0,0,0.8434429168701172,0.7896140217781067,0.8812681436538696,0.0,accept,majority_agreement
399993397,12144,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
399993455,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
399993505,12144,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
399993541,12144,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
399993718,12144,changed to 64,0,0,0,0.9791865348815918,0.9851546883583068,0.9838009476661682,0.0,accept,unanimous_agreement
400000784,12144,"i think there were two new lines at the end of the file, you're referring to that right? removed.",0,0,0,0.9866880774497986,0.9911479949951172,0.9910593628883362,0.0,accept,unanimous_agreement
400071195,12144,these two can be const function.,0,0,0,0.9869139790534972,0.9900847673416138,0.9926791191101074,0.0,accept,unanimous_agreement
400073327,12144,i think it is better to use a lambda instead of defining another function.,0,0,0,0.9804030656814576,0.9742229580879213,0.9814884662628174,0.0,accept,unanimous_agreement
400073388,12144,here too.,0,0,0,0.9753128290176392,0.989098072052002,0.969845414161682,0.0,accept,unanimous_agreement
400074685,12144,really?,0,0,-1,0.9474573135375975,0.8782153725624084,0.818821132183075,0.0,accept,majority_agreement
400077045,12144,can `view` & `model` be `const t *`?,0,0,0,0.9885668754577636,0.993571400642395,0.9945026636123656,0.0,accept,unanimous_agreement
400215571,12144,done please have a look.,0,0,0,0.9770845770835876,0.9160631895065308,0.968275785446167,0.0,accept,unanimous_agreement
400216253,12144,i moved the contextmenuhandling in executionlogwidget please have a look..,0,0,0,0.9812244772911072,0.9852310419082642,0.9950172305107116,0.0,accept,unanimous_agreement
400631202,12144,"no, it is too long.",0,-1,0,0.686447024345398,0.6055298447608948,0.6019896864891052,0.0,accept,majority_agreement
401792559,12144,yes. changed the pointers to const,0,0,0,0.987795352935791,0.9916576743125916,0.9924492835998536,0.0,accept,unanimous_agreement
401792696,12144,replace with lambda version,0,0,0,0.9847434759140016,0.9918489456176758,0.9940793514251708,0.0,accept,unanimous_agreement
401792820,12144,changed with lambda versions,0,0,0,0.9855315685272216,0.9903096556663512,0.9937891364097596,0.0,accept,unanimous_agreement
401792985,12144,functions are removed,0,0,0,0.9740613102912904,0.9857653975486756,0.9920759201049804,0.0,accept,unanimous_agreement
401793086,12144,ok replaced.,0,0,0,0.9781777858734132,0.975245714187622,0.9834346175193788,0.0,accept,unanimous_agreement
401793295,12144,"sorry, somehow missed. please check again.",-1,-1,-1,0.985466480255127,0.9915014505386353,0.989355742931366,-1.0,accept,unanimous_agreement
402031403,12144,"i don't think this should have `mutable`, it can but seems it isn't really needed.",0,0,0,0.9193788766860962,0.9441137313842772,0.8844972252845764,0.0,accept,unanimous_agreement
402032789,12144,why do you omit the `context` parameter? imo it is good practice to always specify `context` [a link],0,0,0,0.9616891741752625,0.989374339580536,0.9922835230827332,0.0,accept,unanimous_agreement
402032853,12144,here too.,0,0,0,0.9753128290176392,0.989098072052002,0.969845414161682,0.0,accept,unanimous_agreement
402034183,12144,`const int initialsize`,0,0,0,0.9848167300224304,0.9881689548492432,0.9941599369049072,0.0,accept,unanimous_agreement
402034598,12144,isn't this redundant? `m_startindex` already defaults to `0`,0,0,0,0.9828762412071228,0.9902563095092772,0.992919385433197,0.0,accept,unanimous_agreement
402035087,12144,when will this condition happen? i don't understand.,-1,-1,-1,0.5014290809631348,0.6932258605957031,0.64696204662323,-1.0,accept,unanimous_agreement
402037462,12144,does it help if this is enlarged to `128` or `256`? also please add a comment of the criteria of setting this value.,0,0,0,0.9876478910446168,0.9929187893867492,0.995145618915558,0.0,accept,unanimous_agreement
402040130,12144,"this variable name is too vague, can it be renamed to `msgindex`?",0,0,0,0.8612060546875,0.9736039638519288,0.9846870303153992,0.0,accept,unanimous_agreement
402073749,12144,please see [a link],0,0,0,0.9759726524353028,0.9765523076057434,0.995389461517334,0.0,accept,unanimous_agreement
402074601,12144,"please see [a link] sorry i remember initializing m_startindex to -1, but i somehow missed to push the changes, extremely sorry.",-1,-1,-1,0.9889541864395142,0.9905362725257874,0.9942808151245116,-1.0,accept,unanimous_agreement
402079895,12144,the insert used in `baselogmodel::data() const` is not a const data member of `qcache`,0,0,0,0.9864533543586732,0.9946717619895936,0.9947498440742492,0.0,accept,unanimous_agreement
402080039,12144,added,0,0,0,0.973513960838318,0.9267084002494812,0.8435775637626648,0.0,accept,unanimous_agreement
402080134,12144,added,0,0,0,0.973513960838318,0.9267084002494812,0.8435775637626648,0.0,accept,unanimous_agreement
402080168,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
402080423,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
404286627,12144,"ok, but i mean leaving a comment in code.",0,0,0,0.9809702038764954,0.8852205276489258,0.9909613728523254,0.0,accept,unanimous_agreement
404287287,12144,"`m_startindex` still default to `0` in header file, do you intend to change it to `-1` or not?",0,0,0,0.987798035144806,0.9949663281440736,0.995082139968872,0.0,accept,unanimous_agreement
404290529,12144,add whitespace: `new item {rowdata(msgindex)};`,0,0,0,0.985640287399292,0.9934507608413696,0.9951608777046204,0.0,accept,unanimous_agreement
404299269,12144,sorry:crying_face:,-1,-1,-1,0.9870802760124208,0.9928491115570068,0.9952818751335144,-1.0,accept,unanimous_agreement
404309615,12144,actually `m_startindex=-1` causes crashes hmmmmmm,0,0,0,0.9590445160865784,0.8510201573371887,0.9373425245285034,0.0,accept,unanimous_agreement
404313727,12144,"m_startindex should be zero here, as the `initialsize` is provided from the derived classes which obtain this value by calling `messagecount` and `peercount` so `m_startindex` is guaranteed to be zero here we need `initialsize` as we'll miss some log message emitted during start up since gui is initialized after core classes the index in `baselogmodel::addnewmessage(int index)` will be the index of the new message after gui is initialized but we need previous messages in the view as well(?)",0,0,0,0.9840552806854248,0.995019555091858,0.9943758249282836,0.0,accept,unanimous_agreement
404936583,12144,"the last parameter `1` is the same as the default value, you can omit it if you want.",0,0,0,0.98725163936615,0.988902509212494,0.9950820207595824,0.0,accept,unanimous_agreement
404938188,12144,i think this is a better idea: i would omit checking `m_msgcount == 0` above and do boundary check on `msgindex` instead. to me this seems to be safer. `if ((m_msgcount < 0) || (m_msgcount > some_upper_limit)) return {};`,0,0,0,0.9632338285446168,0.9637718200683594,0.623849630355835,0.0,accept,unanimous_agreement
404940523,12144,"iirc i suggested this change, now i feel silly... apologies, you are free to omit the empty lines in this `switch()` block if you want.",-1,-1,-1,0.9877641797065736,0.99073725938797,0.9943852424621582,-1.0,accept,unanimous_agreement
404942993,12144,you need to add curly brackets here since the loop consist of multi-lines.,0,0,0,0.9850144982337952,0.9891065955162048,0.9935674071311952,0.0,accept,unanimous_agreement
404943759,12144,`qstring::fromlatin1`,0,0,0,0.9846631288528442,0.991657555103302,0.994021475315094,0.0,accept,unanimous_agreement
404944240,12144,please move it into the anonymous namespace below.,0,0,0,0.986056923866272,0.9937024116516112,0.9954639077186584,0.0,accept,unanimous_agreement
404947004,12144,seems this can be `const`,0,0,0,0.9847400784492492,0.9922005534172058,0.9932001233100892,0.0,accept,unanimous_agreement
404947213,12144,`(timewidth + fontmetrics.width(seperator))`,0,0,0,0.985284149646759,0.9925726652145386,0.99296772480011,0.0,accept,unanimous_agreement
404947840,12144,"i'm not sure, is this required?",0,-1,0,0.8674500584602356,0.6173824071884155,0.8246028423309326,0.0,accept,majority_agreement
404950805,12144,i think this should be at top of this function: [code block],0,0,0,0.9859699606895448,0.9778061509132384,0.9903050661087036,0.0,accept,unanimous_agreement
404952228,12144,doesn't it reset the pen properties? i mean shouldn't you call `qpen::setcolor` instead?,0,0,0,0.986950933933258,0.9934042096138,0.9933740496635436,0.0,accept,unanimous_agreement
405293696,12144,how about this `if (!((msgindex >= m_startindex) && (msgindex < m_msgcount))) return {};`,0,0,0,0.9845890402793884,0.990735411643982,0.9933950304985046,0.0,accept,unanimous_agreement
405296167,12144,"this paints background, focus rect and other things except for text, the reason why display role is null is to make this call work correctly",0,0,0,0.9838682413101196,0.9919697642326356,0.9932242631912231,0.0,accept,unanimous_agreement
405297563,12144,it's guaranteed that `qstyleditemdelegate` will return painter in original state([a link] it may also call `qpainter::save` and i don't know if overlapping save command to painter will work,0,0,0,0.9871129393577576,0.9922173023223876,0.993644118309021,0.0,accept,unanimous_agreement
405311629,12144,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
405311901,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
405311974,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
405312014,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
405312080,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
405312377,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
405312606,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
405316829,12144,i would prefer not having `!` in the statement.,0,0,-1,0.7543064951896667,0.9844605326652528,0.7307933568954468,0.0,accept,majority_agreement
405318105,12144,`if ((msgindex < m_startindex) || (msgindex >= m_msgcount))` ?,0,0,0,0.9859405755996704,0.9935877323150636,0.9941282272338868,0.0,accept,unanimous_agreement
405319750,12144,off topic: iirc we are having issues on progress bar here: [a link] could be related...,0,0,0,0.979981005191803,0.8271731734275818,0.8996718525886536,0.0,accept,unanimous_agreement
405321624,12144,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
405328817,12144,"hmm may be you're right, but the issues are mainly on linux based systems and i don't have linux machine to test on.",0,0,0,0.9608898758888244,0.5745258927345276,0.9638333320617676,0.0,accept,unanimous_agreement
405353903,12144,"docs clearly state that painter pushes its state onto ""stack"" so it will work.",0,0,0,0.9879316687583924,0.9881844520568848,0.9910051822662354,0.0,accept,unanimous_agreement
405622962,12144,"no. as i said before this name is meaningless from logger perspective (since it knows all its messages). it can be just `getmessages(int startid)` which literally means ""give me all the messages starting with some specific id"".",0,0,0,0.9417543411254884,0.9465736150741576,0.9861289858818054,0.0,accept,unanimous_agreement
287553240,10702,tracking changes in the style file is too much!.. dissaproved.,-1,-1,-1,0.9860279560089112,0.9844871163368224,0.9900789260864258,-1.0,accept,unanimous_agreement
287554349,10702,"helps when making new style file, helped me myself when i was testing this. think about the designer, don't have to restart qbittorrent again and again though i am ready to remove this if you insist",0,0,1,0.8946920037269592,0.5782871246337891,0.8403127789497375,0.0,accept,majority_agreement
287556131,10702,"my belief is that minor features that are not directly related to the main purpose of the application should be implemented as less expensive as possible. interface customizing is minor feature and ""helps when making new style file, helped me myself when i was testing this"" is even more minor (qbittorrent isn't style design studio). reloading the style file on demand (when applying application settings) is more than enough.",0,0,0,0.8846234083175659,0.9245554208755492,0.966436505317688,0.0,accept,unanimous_agreement
287556156,10702,"we don't use ""get"" prefix in getter names.",0,0,0,0.9784708619117736,0.9851135015487672,0.9916398525238036,0.0,accept,unanimous_agreement
287563413,10702,please don't produce such a long lines. you can place comment before affected code and split it into several lines.,0,0,0,0.8291978240013123,0.9423142671585084,0.9221667647361756,0.0,accept,unanimous_agreement
287597553,10702,shouldn't you apply it to qapplication instead?,0,0,0,0.978139579296112,0.9938499331474304,0.9947766065597534,0.0,accept,unanimous_agreement
289048502,10702,"if i'm not wrong, this data member is never used.",0,0,0,0.8832384347915649,0.7842332124710083,0.9708945751190186,0.0,accept,unanimous_agreement
289061060,10702,xd i thought i removed it long time ago,0,0,0,0.970025599002838,0.9650105237960817,0.9788345098495485,0.0,accept,unanimous_agreement
291899853,10702,please init it before main window (i.e. one line up).,0,0,0,0.9880635142326356,0.9915531277656556,0.995145857334137,0.0,accept,unanimous_agreement
291900208,10702,coding style issue: opening brace for functions/lambdas should be on its own line.,0,0,0,0.9867241978645324,0.9832609295845032,0.969572365283966,0.0,accept,unanimous_agreement
291900319,10702,coding style issue: missing space after comma.,0,0,0,0.9433236122131348,0.9308053851127625,0.96039617061615,0.0,accept,unanimous_agreement
291901560,10702,move this line up (so initialization order follows items order).,0,0,0,0.987627387046814,0.9885193705558776,0.993754744529724,0.0,accept,unanimous_agreement
291902946,10702,"why first parameter is ""nullptr""?",0,0,0,0.9796432852745056,0.985648512840271,0.990458607673645,0.0,accept,unanimous_agreement
291903475,10702,i don't know what you're trying to prevent here. please explain.,-1,-1,-1,0.8993510603904724,0.7025691270828247,0.6032359004020691,-1.0,accept,unanimous_agreement
291904727,10702,please don't check int as bool: [code block],0,0,0,0.9779043197631836,0.9871168732643129,0.9842779040336608,0.0,accept,unanimous_agreement
291905211,10702,the same as above.,0,0,0,0.981149673461914,0.988840878009796,0.9920604228973388,0.0,accept,unanimous_agreement
291905894,10702,we put all internal functions in anonymous namespace.,0,0,0,0.987637996673584,0.9915437698364258,0.994899570941925,0.0,accept,unanimous_agreement
291906227,10702,please implement constructor and make initialization there.,0,0,0,0.986623466014862,0.989685833454132,0.9950856566429138,0.0,accept,unanimous_agreement
291906755,10702,"""new"" is redundant in such names.",0,0,0,0.9193283319473268,0.9616150856018066,0.9799571633338928,0.0,accept,unanimous_agreement
291907798,10702,"this name implies that class instance represents some theme instance. but it realy manages themes so it still should be called uithememanager. please note ""ui"" instead of ""ui"" in used names (to be a correctly written abbreviation).",0,0,0,0.9879565834999084,0.992397964000702,0.9915105104446412,0.0,accept,unanimous_agreement
291981933,10702,"on successful `getopenfilename`, i am inserting a ""custom"" in combobox but this `insert` call calls this function recursively with the 'select' as current text, and we get infinite `getopenfilename` calls",0,0,0,0.9860184192657472,0.972466766834259,0.9917469024658204,0.0,accept,unanimous_agreement
292278722,10702,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
292285812,10702,"i don't see the need to reinitialize it. i do not understand why you chose a text-based methods to manage it. since you have a predetermined number of items, you know their indexes, so it is better to use more efficient index-based methods. besides, all these functions (fromthemestr, themestr) are unnecessary. [code block]",0,0,0,0.8734914064407349,0.9606712460517884,0.7594528794288635,0.0,accept,unanimous_agreement
292562239,10702,"thanks, didn't know about `blocksignals`, still learning xd.",0,1,1,0.6258929967880249,0.7079603672027588,0.8547770977020264,1.0,accept,majority_agreement
292562698,10702,"redundant action in destructor, isn't it?",0,0,0,0.975487232208252,0.92525053024292,0.8937334418296814,0.0,accept,unanimous_agreement
292564074,10702,"ok, it is reasonable. also you can move block/unblock signals outside if/else to prevent unnecessary signal here.",0,0,0,0.9757035970687866,0.969645619392395,0.9768825769424438,0.0,accept,unanimous_agreement
292564483,10702,"idk, it's done in `saveoptions` called with every `accept`?",0,0,0,0.9900269508361816,0.9945534467697144,0.9953343272209167,0.0,accept,unanimous_agreement
292565110,10702,"well before some commit i was using empty `m_qssfilepath` as some sort of flag, now it's not necessary.",0,0,0,0.9827057123184204,0.989051878452301,0.991576611995697,0.0,accept,unanimous_agreement
292565311,10702,"sorry, i misread it.",-1,-1,-1,0.9855718612670898,0.9904748797416688,0.9914644360542296,-1.0,accept,unanimous_agreement
294034162,10702,can this be moved into `mainwindow` constructor?,0,0,0,0.9893993735313416,0.994284689426422,0.9957818984985352,0.0,accept,unanimous_agreement
294034250,10702,this is more suitable at `uithememanager::installtheme`,0,0,0,0.9842915534973145,0.9945300221443176,0.995759904384613,0.0,accept,unanimous_agreement
294034282,10702,"this can be inlined to `uithememanager::theme()` and then you don't even need a state for uithememanager, isn't?",0,0,0,0.9800419211387634,0.9941856861114502,0.9919816851615906,0.0,accept,unanimous_agreement
294034470,10702,glassez said it better to change the stylesheet for the `main application`,0,0,0,0.9792840480804444,0.9942615032196044,0.992176115512848,0.0,accept,unanimous_agreement
294034634,10702,"no, i mean move it into mainwindow and change qapplication stylesheet from there. [a link] stylesheet operations doesn't belong to application class imo.",0,0,0,0.9850512742996216,0.9712465405464172,0.9877678751945496,0.0,accept,unanimous_agreement
294034724,10702,better way is create get/set methods in preference class and use it.,0,0,0,0.9846070408821106,0.9925610423088074,0.9910476803779602,0.0,accept,unanimous_agreement
294034821,10702,this way i only do it once else we it will do it with every installtheme,0,0,0,0.9822775721549988,0.97754967212677,0.9902695417404176,0.0,accept,unanimous_agreement
294034838,10702,it can be also done in uithememanager class itself.,0,0,0,0.9881900548934937,0.9944104552268982,0.993965208530426,0.0,accept,unanimous_agreement
294035274,10702,"yeah, but what if user removed that folder (by accident or not), unless he recreates it manually he will have to restart app to get it appeared.",0,0,0,0.9833155870437622,0.8397631049156189,0.9713138341903688,0.0,accept,unanimous_agreement
294042393,10702,how about i create a separate signal `stylechanged` in preference class and listen for it in `uithememanager`,0,0,0,0.9885879755020142,0.993032932281494,0.9932668209075928,0.0,accept,unanimous_agreement
294042473,10702,"bad idea. preferences already has general signal for ""changed"" event. see other classes that use preferences.",-1,-1,-1,0.98479163646698,0.9762418270111084,0.9786806106567384,-1.0,accept,unanimous_agreement
294043483,10702,too many blank lines. only one in a row is acceptable.,0,0,-1,0.7329446077346802,0.7920978665351868,0.602902889251709,0.0,accept,majority_agreement
294043534,10702,m_uithemefilepath.,0,0,0,0.9873336553573608,0.990959405899048,0.9906820058822632,0.0,accept,unanimous_agreement
294043924,10702,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
294043930,10702,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
294043936,10702,maybe done.,0,0,0,0.9724843502044678,0.9786704182624816,0.9635924696922302,0.0,accept,unanimous_agreement
294043940,10702,maybe done.,0,0,0,0.9724843502044678,0.9786704182624816,0.9635924696922302,0.0,accept,unanimous_agreement
294044252,10702,"i would place these functions just below `void setlocale(const qstring &locale);`, similar to the layout of the option dialog. and also in .cpp file too.",0,0,0,0.9893428087234496,0.9943980574607848,0.9938920736312866,0.0,accept,unanimous_agreement
294044293,10702,"you are casting `theme` to `int` eventually, you should just make the parameter `int` type.",0,0,0,0.988800048828125,0.9939659237861632,0.9929424524307252,0.0,accept,unanimous_agreement
294044333,10702,wrong order here and at other places too.,-1,0,-1,0.9250099062919616,0.7766356468200684,0.7182642221450806,-1.0,accept,majority_agreement
294044376,10702,`setguithemeselection`,0,0,0,0.984258770942688,0.9925323128700256,0.9927939176559448,0.0,accept,unanimous_agreement
294044382,10702,`getguithemeselection`,0,0,0,0.983900785446167,0.9905046820640564,0.9917614459991456,0.0,accept,unanimous_agreement
294044468,10702,this should be a function `applytheme()` and `uithememanager` class should become `guitheme` namespace.,0,0,0,0.988381564617157,0.9937817454338074,0.9947052597999572,0.0,accept,unanimous_agreement
294044823,10702,then what's the point of using `enum class`,0,0,0,0.985008955001831,0.9903623461723328,0.9623404145240784,0.0,accept,unanimous_agreement
294044950,10702,"ha, i should be the one asking that problem. joking aside, this specific function is feeding to/from `m_ui->combotheme`. the combobox only understands `int` and thus it doesn't need to know (or use) your customized enum class, isn't? plugging enum into the middle of it feels unnatural for me.",-1,-1,-1,0.9262428283691406,0.9275596141815186,0.9331873655319214,-1.0,accept,unanimous_agreement
294049276,10702,`setguitheme`?,0,0,0,0.9881777167320251,0.9946169257164,0.9939610958099364,0.0,accept,unanimous_agreement
294049756,10702,"[code block] isn't above looks more cryptic as compared to this [code block] sure less code, but the latter is not intituitive.",0,0,0,0.9299080967903136,0.8806031346321106,0.9654804468154908,0.0,accept,unanimous_agreement
294055354,10702,if i were to do it: [code block] also you introduced a *potential* undefined behavior by `static_cast ` in `preferences::theme()` which occurs when the value is large to an extent. that's why i prefer making getters/setters as simple as possible and move the logic of verifying the value validness outside of it instead. defying your own idea...!?,-1,-1,-1,0.5771727561950684,0.7945985794067383,0.9860358238220216,-1.0,accept,unanimous_agreement
294064104,10702,"then i have to write some where what 0 and 1 means in this context. imho i like ""current"" way, but will change if you insist. you're the boss xd",0,1,1,0.546272873878479,0.9332318902015686,0.935272216796875,1.0,accept,majority_agreement
294064257,10702,oh ho that what `selection` implies here. ok now i understood.,0,0,0,0.8252473473548889,0.8131690621376038,0.7601950764656067,0.0,accept,unanimous_agreement
294067229,10702,or perhaps in the current context you can work around by using `bool`: `void preferences::setguiusecustomtheme(bool)`. it is either custom or not (the default).,0,0,0,0.9875012636184692,0.9947680234909058,0.9932109713554382,0.0,accept,unanimous_agreement
294086579,10702,i personally like named constants in my code. this way clearly shows the intent. having an enum cleanly defines different types of `themes` available. imho i find you're both suggested ways more complicated. i myself took some time to understand what you meant by `selection` but maybe i'm a little dumb. idk maybe i'm wrong. ?,-1,-1,-1,0.9270064830780028,0.9791460037231444,0.531093955039978,-1.0,accept,unanimous_agreement
300320649,10702,why this one is really needed? i would do its job in uithememanager constructor.,0,0,0,0.9872409701347352,0.9874281287193298,0.9868996143341064,0.0,accept,unanimous_agreement
300352040,10702,"it's good idea (and widely used practice) to use custom format name and file extension in such case, imo. we don't expect any rcc file here but some preformatted content packed in it.",0,0,1,0.7292392253875732,0.5750540494918823,0.7671030759811401,0.0,accept,majority_agreement
300352939,10702,"with latest commit, it is `m_rccfilepath`",0,0,0,0.9875277876853944,0.994391143321991,0.9954870343208312,0.0,accept,unanimous_agreement
300355855,10702,"i don't have any problem, suggestions?",0,-1,0,0.962475597858429,0.6318855285644531,0.970532476902008,0.0,accept,majority_agreement
300363766,10702,"""select qbittorrent theme file"" for message. .qbtheme or something like it for file extension.",0,0,0,0.9868080019950868,0.9950619339942932,0.994769275188446,0.0,accept,unanimous_agreement
300675511,10702,"we've discussed this already. it must be initialized before the mainwindow. why did you move it? i only asked you to get rid of the unnecessary method ""applytheme"", but not to move this one. you really don't understand why it has to be in this order?",0,0,0,0.8965598940849304,0.889857292175293,0.5566990375518799,0.0,accept,unanimous_agreement
300676624,10702,customuithemepath and other names accordingly,0,0,0,0.9882575869560242,0.9894726872444152,0.9945284724235536,0.0,accept,unanimous_agreement
300689521,10702,"imo, selection suffix isn't so appropriate. it sounds like state of some control but the option means the ui theme mode (default/custom that is used by the application. so i would use something like uithememode. or even make it to be boolean option ""usecustomuitheme""",0,0,0,0.9770384430885316,0.8935688138008118,0.9728327989578248,0.0,accept,unanimous_agreement
300692746,10702,settings in the configuration file can be in inconsistent state (custom theme is used but the path is not set) so you should handle this case.,0,0,0,0.988448679447174,0.9908599853515624,0.9911954402923584,0.0,accept,unanimous_agreement
300695121,10702,why not log this message?,0,0,0,0.9574466943740844,0.8782401084899902,0.9882665276527404,0.0,accept,unanimous_agreement
300696447,10702,why did you leave these two methods public? they're not supposed to be accessed outside of the class implementation.,0,0,0,0.9585890769958496,0.9803856611251832,0.9785410761833192,0.0,accept,unanimous_agreement
300715498,10702,"![a link] ![a link] if called before, the main window is not initialized with the previously set theme, idk why,",0,0,0,0.9763036370277404,0.9744422435760498,0.9662941098213196,0.0,accept,unanimous_agreement
300723197,10702,"this is weird... how is `-stylesheet` command line parameter supposed to work in this case?.. i wish i had time to debug it. anyway, if you can't figure out what the problem is, you're gonna have to go the other way. i'm looking into the future when the theme will contain icons and other resources, so it should be initialized before creating the gui.",-1,-1,-1,0.9883566498756408,0.988757312297821,0.9935681223869324,-1.0,accept,unanimous_agreement
300727082,10702,registerresource in the constructor and `applystylesheet` after mainwindow initialization?,0,0,0,0.9898136258125304,0.9951753616333008,0.995372235774994,0.0,accept,unanimous_agreement
300734799,10702,looks like we're gonna have to do it this way.,0,0,0,0.9488073587417604,0.975048005580902,0.925910472869873,0.0,accept,unanimous_agreement
300753968,10702,now?,0,0,0,0.9759780168533324,0.9796378016471864,0.9896223545074464,0.0,accept,unanimous_agreement
300754137,10702,now?,0,0,0,0.9759780168533324,0.9796378016471864,0.9896223545074464,0.0,accept,unanimous_agreement
300826544,10702,there is the same problem with inconsistent/incorrect settings here. you should never trust to the configuration file since it can be corrupted for some reason. so you should check/fix the config values before use them.,0,0,0,0.9093582630157472,0.6538298726081848,0.959828555583954,0.0,accept,unanimous_agreement
300826604,10702,"please move ""&&"" to the next line. [code block]",0,0,0,0.986296534538269,0.9904444813728333,0.9949305653572084,0.0,accept,unanimous_agreement
300826649,10702,will ask you to add `const` here.,0,0,0,0.9867384433746338,0.9914994835853576,0.994506061077118,0.0,accept,unanimous_agreement
300826739,10702,you should add curly braces since the content of `if` is multiline. (see qbittorrent coding guidelines),0,0,0,0.9878451228141784,0.994203507900238,0.995676338672638,0.0,accept,unanimous_agreement
300826771,10702,please use `logmsg()` helper.,0,0,0,0.9868590831756592,0.9938307404518129,0.9953858256340028,0.0,accept,unanimous_agreement
300826836,10702,add `q_disable_copy(uithememanager)` after it.,0,0,0,0.986395001411438,0.9944879412651062,0.995079755783081,0.0,accept,unanimous_agreement
300833708,10702,`const bool use`,0,0,0,0.9835556149482728,0.9882813096046448,0.995144784450531,0.0,accept,unanimous_agreement
300833727,10702,add `const` to function signature.,0,0,0,0.988625943660736,0.9921587705612184,0.9954209923744202,0.0,accept,unanimous_agreement
300833729,10702,add `const` to function signature.,0,0,0,0.988625943660736,0.9921587705612184,0.9954209923744202,0.0,accept,unanimous_agreement
300833765,10702,no default value for usecustomuitheme? really?,0,0,-1,0.9825659990310668,0.9492255449295044,0.6756494641304016,0.0,accept,majority_agreement
300833778,10702,still placing in wrong order.,-1,0,-1,0.8680784106254578,0.7183300256729126,0.7237036228179932,-1.0,accept,majority_agreement
300833833,10702,wrong comma placement.,-1,-1,-1,0.8798147439956665,0.6978318095207214,0.8066116571426392,-1.0,accept,unanimous_agreement
300833871,10702,i don't really insist that you can instead return early on `!preferences::instance()->usecustomuitheme()` condition.,0,0,0,0.9657407999038696,0.9473412036895752,0.984279215335846,0.0,accept,unanimous_agreement
300833893,10702,wrong comma placement.,-1,-1,-1,0.8798147439956665,0.6978318095207214,0.8066116571426392,-1.0,accept,unanimous_agreement
300833987,10702,do you need this function? seems not to me as you can inline within `applystylesheet`.,0,0,0,0.9785143733024596,0.9877229928970336,0.9952408075332642,0.0,accept,unanimous_agreement
300834019,10702,you should put in the var name.,0,0,0,0.9882063269615172,0.9907745718955994,0.9936471581459044,0.0,accept,unanimous_agreement
300834092,10702,"you should put in the var name... why do i even need to point this (and many other small coding style defectives) out... this is easily seen not in line with rest of file, isn't?",0,0,-1,0.96961909532547,0.9232000112533568,0.6590129137039185,0.0,accept,majority_agreement
300834152,10702,please fill in the 3rd parameter `this`.,0,0,0,0.9875755310058594,0.9907761216163636,0.995697855949402,0.0,accept,unanimous_agreement
300834173,10702,`const int index`,0,0,0,0.9853325486183168,0.9902626276016236,0.9931373596191406,0.0,accept,unanimous_agreement
300834213,10702,"i would replace """" with {}",0,0,0,0.9841654300689696,0.9819005131721495,0.992423176765442,0.0,accept,unanimous_agreement
300834627,10702,please add an empty line above this line.,0,0,0,0.980369746685028,0.9881789684295654,0.994436264038086,0.0,accept,unanimous_agreement
300834637,10702,please add an empty line above this line.,0,0,0,0.980369746685028,0.9881789684295654,0.994436264038086,0.0,accept,unanimous_agreement
300835073,10702,this is to handle i/o error in opening of stylesheet,0,0,0,0.9865603446960448,0.9884260892868042,0.9946638345718384,0.0,accept,unanimous_agreement
300835179,10702,sorry,-1,-1,1,0.9871875047683716,0.9823289513587952,0.6406954526901245,-1.0,accept,majority_agreement
300851053,10702,why is it required?,0,0,0,0.9538490176200868,0.9649354815483092,0.9923633337020874,0.0,accept,unanimous_agreement
300851072,10702,"only in header, remove the `const` in variable.",0,0,0,0.9850148558616638,0.9948049187660216,0.9950138926506042,0.0,accept,unanimous_agreement
300851077,10702,~~here too.~~ never mind.,1,-1,0,0.8101789355278015,0.4993955194950104,0.7957642674446106,,review,no_majority_disagreement
300851110,10702,wrap it in `tr()`,0,0,0,0.9868773818016052,0.9913983345031738,0.9928802847862244,0.0,accept,unanimous_agreement
300851136,10702,"and use `.arg()` to concatenate strings, it is better for translators.",0,0,0,0.9855180978775024,0.9920639395713806,0.9948943853378296,0.0,accept,unanimous_agreement
300851241,10702,i would prefer return early on opposite condition. you produced a needless block of indention currently.,0,-1,-1,0.8052935004234314,0.5512997508049011,0.8399118781089783,-1.0,accept,majority_agreement
300851379,10702,what is the point of giving an error message about you can't open an internal path? what do you expect the users to react upon seeing this error?,0,0,0,0.8858117461204529,0.8551822900772095,0.9225497245788574,0.0,accept,unanimous_agreement
300851408,10702,"you shouldn't call `readall` when `open` is failed in any case, it is beyond common sense even if it produces expected behavior.",0,0,0,0.8989712595939636,0.9736037850379944,0.947281002998352,0.0,accept,unanimous_agreement
300851442,10702,now it make sense (to me) to return early: `if (!preferences::instance()->usecustomuitheme()) {/*setstylesheet && return*/}` because you can save an indention in a long block.,0,0,0,0.9860019683837892,0.9913938641548156,0.9901646971702576,0.0,accept,unanimous_agreement
300851509,10702,"this line is too long, please split at the start of &&",0,0,0,0.9682521224021912,0.8213664293289185,0.7074559926986694,0.0,accept,unanimous_agreement
300851528,10702,and add parentheses around the returned expression.,0,0,0,0.9843232035636902,0.98563551902771,0.9945188164711,0.0,accept,unanimous_agreement
300851798,10702,"backticks usually encloses code. using `""""` is more proper.",0,0,0,0.9864723682403564,0.986863374710083,0.991228461265564,0.0,accept,unanimous_agreement
300851824,10702,i would prefer placing functions before variables.,0,0,0,0.9689260125160216,0.9805777072906494,0.981676459312439,0.0,accept,unanimous_agreement
300851913,10702,this can be `const` too.,0,0,0,0.9867956638336182,0.9927023649215698,0.9939753413200378,0.0,accept,unanimous_agreement
300852051,10702,is it necessary to registerresource in constructor? can't you do it in `applystylesheet`?,0,0,0,0.9881579279899596,0.9947043061256408,0.9949874877929688,0.0,accept,unanimous_agreement
300852634,10702,you didn't follow my previous comments? just look a little into the future. it is assumed that the themes will contain icons and other resources. so it has to be loaded before we create gui. but `applystylesheet` doesn't work before gui (mainwindow) is created (as reported by ) so we have to apply it after.,0,0,0,0.9816962480545044,0.9792171716690063,0.9914767146110536,0.0,accept,unanimous_agreement
300852746,10702,"agree. but error message still needed. i would reformat it to be more user-friendly, e.g. ""couldn't apply theme stylesheet. perhaps theme file is invalid. reason: """,0,0,0,0.7904143929481506,0.9625627398490906,0.9652839303016664,0.0,accept,unanimous_agreement
300852801,10702,as we usually do :+1:,0,1,1,0.7765212059020996,0.8590186834335327,0.9152270555496216,1.0,accept,majority_agreement
300852977,10702,understood.,0,0,0,0.977540135383606,0.982597291469574,0.9652015566825868,0.0,accept,unanimous_agreement
300853042,10702,will remove it.,0,0,0,0.9771601557731628,0.9828522801399232,0.9905731081962584,0.0,accept,unanimous_agreement
300853092,10702,shouldn't you produce a warning (in log) when the path is invalid or register action failed?,0,0,0,0.9744799733161926,0.9887642860412598,0.99157977104187,0.0,accept,unanimous_agreement
300853199,10702,"at least it should guide users/theme creators to the right direction, about the expected file name.",0,0,0,0.9812233448028564,0.9896140694618224,0.9773375988006592,0.0,accept,unanimous_agreement
300853261,10702,`registerresource()` returns false in case of error. it should be logged in this case.,0,0,0,0.9879637956619264,0.9930439591407776,0.9943208694458008,0.0,accept,unanimous_agreement
301174242,10702,#1 [code block] #2 [code block] which one?,0,0,0,0.9880602955818176,0.9931920170783995,0.994795024394989,0.0,accept,unanimous_agreement
301385835,10702,neither [code block],0,0,0,0.9773815870285034,0.991358518600464,0.9873929619789124,0.0,accept,unanimous_agreement
301386485,10702,"i would write: `""failed to register .qbtheme file. path: \""%1\""""`",-1,0,0,0.5723194479942322,0.9889845848083496,0.9925779700279236,0.0,accept,majority_agreement
301386821,10702,"you can also create a const variable to `preferences::instance()`, code will be much shorter.",0,0,0,0.9883829951286316,0.9938188195228576,0.9947624802589417,0.0,accept,unanimous_agreement
301387324,10702,"`error: \""%1\""`",0,0,0,0.9093222618103028,0.9873242378234864,0.9893442988395692,0.0,accept,unanimous_agreement
301387495,10702,shouldn't it belong to log::warning?,0,0,0,0.5876397490501404,0.9879202842712402,0.9907352924346924,0.0,accept,unanimous_agreement
301492522,10702,"i would produce more user-friendly log messages (unless some internals are required to be described there): `failed to load ui theme from file \""%1\""`. there is enough information to understand what we are talking about both for the user and for the developer.",0,0,0,0.9459474682807922,0.9931858777999878,0.9829346537590028,0.0,accept,unanimous_agreement
301494231,10702,i still don't see the point in showing the application internals in this message...,-1,0,-1,0.6202762722969055,0.5881621837615967,0.6123242974281311,-1.0,accept,majority_agreement
301535897,10702,"maybe the creator miss spell the file and these are for the creator anyway, more information is always good :stuck_out_tongue_winking_eye: any suggestions for another message.",0,0,0,0.8121438026428223,0.9641693830490112,0.6364946961402893,0.0,accept,unanimous_agreement
301539952,10702,"yes. but you still should print file path related to theme source root but not to the internal path used by qbittorrent. `couldn't apply theme stylesheet. stylesheet.qss couldn't be opened. reason: %1`. imo, the message like this is both user-friendly and informative for the theme creator.",0,0,1,0.5236797332763672,0.984952986240387,0.6750317811965942,0.0,accept,majority_agreement
301542508,10702,"the message should give the user a clear understanding of what is at stake. it should also contain a minimum of information for the developer, sufficient to match the problem with the application code, if necessary.",0,0,0,0.9804302453994752,0.9915483593940736,0.9894639253616332,0.0,accept,unanimous_agreement
301571751,10702,redundant qstring,0,0,0,0.9741638898849488,0.8974952697753906,0.9841234087944032,0.0,accept,unanimous_agreement
63430288,4936,are we inventing new ways to use every possible feature of the c++ language in qbittorrent? i would do it in a for loop here. ps: i don't want you to change it. just a remark.,0,0,0,0.7693026661872864,0.9492098689079284,0.9684388637542723,0.0,accept,unanimous_agreement
63433818,4936,delete newline,0,0,0,0.9757829308509828,0.938349187374115,0.991692841053009,0.0,accept,unanimous_agreement
63433823,4936,"perhaps it's just me, but `std::transform` shows the purpose more clearly because the stl algorithms are declarative.",0,0,0,0.9791850447654724,0.9897170066833496,0.9609559178352356,0.0,accept,unanimous_agreement
63433862,4936,delete newline,0,0,0,0.9757829308509828,0.938349187374115,0.991692841053009,0.0,accept,unanimous_agreement
63434494,4936,repeat the macro because of [a link],0,0,0,0.9872257113456726,0.992417335510254,0.9939694404602052,0.0,accept,unanimous_agreement
63434820,4936,i think it is better to organize it this way: [code block],0,0,0,0.980875849723816,0.9762609601020812,0.9825133085250854,0.0,accept,unanimous_agreement
63435518,4936,another point is that templates usually bloat the binary size. (again not saying you should change it),0,0,0,0.928199827671051,0.9581600427627563,0.9814629554748536,0.0,accept,unanimous_agreement
63436458,4936,should we have [code block] and call it like [code block] the binary size will increase comparing to [code block] but here? why?,0,0,0,0.9713157415390016,0.9935438632965088,0.9915602803230286,0.0,accept,unanimous_agreement
63437448,4936,it was a general comment.,0,0,0,0.9737207293510436,0.9833328723907472,0.9855247139930724,0.0,accept,unanimous_agreement
63437895,4936,potential division by zero if `m_piecescount == 1` or `m_imagewidth == 1`,0,0,0,0.987393081188202,0.9931883811950684,0.99274080991745,0.0,accept,unanimous_agreement
63437916,4936,same here,0,0,0,0.982987642288208,0.9628711938858032,0.99204421043396,0.0,accept,unanimous_agreement
63438437,4936,"do you really need to initialize explicitly `m_image`, `m_piececolors` and `m_highlitedregion`?",0,0,0,0.9891394972801208,0.9944168329238892,0.9941169023513794,0.0,accept,unanimous_agreement
63440356,4936,"well, the code is certainly not clean here and relies on the fact that when we cast float infinity to int, we receive `-max_int` and this value is discarded in the next checks.",0,0,0,0.9842222332954408,0.9064618349075316,0.9265986680984496,0.0,accept,unanimous_agreement
63440517,4936,i think this should go to the top like the other class.,0,0,0,0.9761911630630492,0.9591227173805236,0.9759480357170104,0.0,accept,unanimous_agreement
63440540,4936,`qtextstream &stream`,0,0,0,0.9849226474761964,0.991097331047058,0.9938253164291382,0.0,accept,unanimous_agreement
63440691,4936,"but i will fix the code, of course.",0,0,0,0.9815701246261596,0.9767012000083924,0.9771105051040648,0.0,accept,unanimous_agreement
63440734,4936,"i think you have to wording wrong here. it should be: `files.count() > 1 ? tr(""file in this piece:"") : tr(""files in this piece:""));`",0,0,0,0.9590036273002625,0.9634408354759216,0.9721804857254028,0.0,accept,unanimous_agreement
63440931,4936,what is the purpose of this if you're always going to return the same value? for exposing it in the future via a setting?,0,0,0,0.976837396621704,0.9880660772323608,0.9850799441337584,0.0,accept,unanimous_agreement
63440997,4936,we highlight several pieces if a file is stretched over them.,0,0,0,0.9851651191711426,0.9643186330795288,0.9889261722564696,0.0,accept,unanimous_agreement
63441000,4936,shouldn't you drop the exclamation mark here?,0,0,0,0.9698053598403932,0.992782473564148,0.9899251461029052,0.0,accept,unanimous_agreement
63441143,4936,and only a single piece if it contains more than one file.,0,0,0,0.9809943437576294,0.9862785935401917,0.9930186867713928,0.0,accept,unanimous_agreement
63441355,4936,i must have made a mistake in `isfilenamecorrectionneeded()` because the generated tooltip texts are correct.,0,0,0,0.9353016018867492,0.992946445941925,0.9879868626594543,0.0,accept,unanimous_agreement
63441415,4936,for the same reason i think you should repeat this macro here too,0,0,0,0.9853200316429138,0.977910816669464,0.9921100735664368,0.0,accept,unanimous_agreement
63441768,4936,"the function is virtual, and the overrided one in `pieceavailabilitybar` returns `true`.",0,0,0,0.9874237179756165,0.9936009049415588,0.9945785999298096,0.0,accept,unanimous_agreement
63441996,4936,or not :),1,1,0,0.6827506422996521,0.9879562258720398,0.9699881672859192,1.0,accept,majority_agreement
63442097,4936,"we do not want to see "".unwanted"" in the `piecesavailiabilitybar` (remote files), right?",0,0,0,0.8909621238708496,0.9817274808883668,0.9806185364723206,0.0,accept,unanimous_agreement
63442147,4936,"but here you test ""files.count()"" which doesn't tell you if the file spans multiple pieces.",0,0,0,0.987564742565155,0.9858990907669068,0.9884827733039856,0.0,accept,unanimous_agreement
63442389,4936,"this is the number of files in the piece under the mouse pointer. if the files size is not exactly equal to the piece size, this works.",0,0,0,0.9858725070953368,0.9900013208389282,0.9946172833442688,0.0,accept,unanimous_agreement
63442412,4936,no we don't. but the name of the function indicates that you don't need the exclamation mark. so you need to changed the returned values or the function name to avoid confusions.,0,0,0,0.9871029257774352,0.9894338250160216,0.9909905195236206,0.0,accept,unanimous_agreement
63442636,4936,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
63442806,4936,"shit i was reading the comparison wrong. but it still can lead to weird outputs. for example one file that occupies one whole piece. the tooltip will read ""files in these pieces"" which is wrong.",-1,-1,-1,0.9879427552223206,0.9903784990310668,0.9907716512680054,-1.0,accept,unanimous_agreement
63442888,4936,then the negation has to be removed (and the function name is correct).,0,0,0,0.9821131825447084,0.9916165471076964,0.9929034113883972,0.0,accept,unanimous_agreement
63443322,4936,"now that i am thinking it, is there really a situation where we want to output the "".unwanted"" folder? i think not.",0,0,0,0.7907376885414124,0.9840832352638244,0.98148512840271,0.0,accept,unanimous_agreement
63443558,4936,"why this define? i see the different code paths, but why do they achieve? is the random user that compiler supposed to know about this define and define/undefine it himself?",0,0,0,0.9551250338554382,0.9091085195541382,0.9771414399147034,0.0,accept,unanimous_agreement
63443727,4936,"i think for the ""progress"" bar (local files) we should output exactly what is on the drive, i.e. including "".unwanted"".",0,0,0,0.984533667564392,0.9899494647979736,0.9863276481628418,0.0,accept,unanimous_agreement
63444051,4936,yeah. you're right. i am sleepy. i can't think straight.,-1,-1,-1,0.972907304763794,0.9859045147895812,0.7313154339790344,-1.0,accept,unanimous_agreement
63444139,4936,then i add a check for the files size if `files.count() == 1`,0,0,0,0.9883317351341248,0.9915722608566284,0.994838535785675,0.0,accept,unanimous_agreement
63444714,4936,"i was not sure which layout to use for tooltips and asked people to compare. you may do this too, but after some recent adjustments to the table layout it is almost perfect and before merging i will delete the define and unused code path.",0,0,0,0.9325504899024964,0.9110944867134094,0.6977794170379639,0.0,accept,unanimous_agreement
63444732,4936,"should i add more pedantry? three strings: 1. ""file in this piece"" -> one file that occupies only one whole piece 2. ""files in these pieces"" -> more than one file that occupy one piece 3. ""file in these pieces"" -> one file that occupies multiple pieces what happens if user hovers over a piece that has 2 files one of which spans to the next(or previous) piece? do you highlight those pieces too?",-1,0,0,0.7360004186630249,0.9875824451446532,0.9921281337738036,0.0,accept,majority_agreement
63445197,4936,"ok no, i don't. only the piece under the cursor is highlighted.",0,0,0,0.9726534485816956,0.9583747386932372,0.9900742173194884,0.0,accept,unanimous_agreement
63447109,4936,and i was wondering from where these came from(i was looking at the 2nd commit diff only). these don't belong in this commit.,0,0,0,0.7416920065879822,0.9217304587364196,0.974427342414856,0.0,accept,unanimous_agreement
63447153,4936,this also doesn't belong in this commit.,0,0,0,0.8655890822410583,0.9262758493423462,0.923855185508728,0.0,accept,unanimous_agreement
63447354,4936,ups...,0,0,0,0.7878943085670471,0.9378788471221924,0.9776294231414796,0.0,accept,unanimous_agreement
63512058,4936,like to be explicit.,0,0,0,0.9717152714729308,0.928159773349762,0.982866108417511,0.0,accept,unanimous_agreement
63599846,4936,remove newline,0,0,0,0.9742608666419984,0.9374572038650512,0.99442720413208,0.0,accept,unanimous_agreement
63600704,4936,you need to check for `m_piecescount` too. remember it is multiplication and any zero makes the whole multiplicaiton zero.,0,0,0,0.9871139526367188,0.9929278492927552,0.9931951761245728,0.0,accept,unanimous_agreement
63600743,4936,you need to check for `m_imagewidth` too. remember it is multiplication and any zero makes the whole multiplicaiton zero.,0,0,0,0.9873033165931702,0.9924812316894532,0.9927957653999328,0.0,accept,unanimous_agreement
63601164,4936,lets leverage the language and not be very verbose with no reason. if it has a default constructor don't empty initialize it. so pelase delete those 3.,0,0,0,0.9824635982513428,0.8300991058349609,0.9902756214141846,0.0,accept,unanimous_agreement
63601404,4936,"apparently, there is need for brackets here, because i read this expression incorrectly yesterday too. `m_imagewidth` is in nominator.",0,0,0,0.9758249521255492,0.9782102704048156,0.9833406805992126,0.0,accept,unanimous_agreement
63601477,4936,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
63601546,4936,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
63601854,4936,you're right. division and multiplication have the same priority and you go from left to right. but better put the parentheses to be sure.,0,0,0,0.9763255715370178,0.7996572852134705,0.9886610507965088,0.0,accept,unanimous_agreement
63604633,4936,wouldn't it be more readable to replace `m_imagewidth` and `m_piecescount` with `float m_pixelsperpiece`?,0,0,0,0.9882469773292542,0.9947494864463806,0.9917013049125672,0.0,accept,unanimous_agreement
63605362,4936,"yes, but why float? you can't have eg half a pixel.",0,0,0,0.980073869228363,0.8555989861488342,0.9796623587608336,0.0,accept,unanimous_agreement
63606205,4936,"but we need to store ratio with precision of about 1e-3 (size of a typical display) in order to transform piece index to pixel with 1-pixel precision. if a torrent contains less than 1000 pieces, integer ratio is not enough.",0,0,0,0.9652920365333556,0.985785186290741,0.9906519651412964,0.0,accept,unanimous_agreement
63607884,4936,i am probably confused on how you calculate pixelsperpiece. how do you do it?,-1,-1,-1,0.5721850991249084,0.9219713807106018,0.642829179763794,-1.0,accept,unanimous_agreement
63608861,4936,"~~`torrent->info().piecescount() / image.width()`~~ no, of course no. that was piecesperpixel. `image.width() / torrent->info().piecescount()`",0,0,0,0.9765567779541016,0.9902751445770264,0.9680286645889282,0.0,accept,unanimous_agreement
63610988,4936,then yes float makes sense. remember 2 special cases: 1. the last piece might be smaller than piece_size 2. i can't explain it well. but take into consideration that due to rounding errors the edges (first/last piece) might be off by some pixels. not too important.,0,0,0,0.957882285118103,0.826052188873291,0.9794013500213624,0.0,accept,unanimous_agreement
63715540,4936,fix coding style for lambda. if you need split it you should use same style as for other functions: [code block],0,0,0,0.9864662289619446,0.9943538904190063,0.9928445219993592,0.0,accept,unanimous_agreement
63715744,4936,**this** isn't required here.,0,0,0,0.9569894671440125,0.9871812462806702,0.9906436800956726,0.0,accept,unanimous_agreement
63716223,4936,remove `bittorrent::` prefix from newly added methods.,0,0,0,0.9781782031059264,0.9934875965118408,0.9951175451278688,0.0,accept,unanimous_agreement
63716416,4936,fix coding style as i described above.,0,0,0,0.9874866008758544,0.9796929359436036,0.9937856197357178,0.0,accept,unanimous_agreement
63717022,4936,minor. do you remember qdebug stream output adds spaces so you will get `filename ' file ' was not found in torrent ' torrent name '`.,0,0,0,0.988474190235138,0.992030143737793,0.9918307662010192,0.0,accept,unanimous_agreement
63717814,4936,you can use `libt` shorthand in bittorrent *.cpp files.,0,0,0,0.9889639616012572,0.995008945465088,0.9952796697616576,0.0,accept,unanimous_agreement
63718539,4936,`qpair ` doesn't your uncrustify know this?,0,0,0,0.9640730619430542,0.992229163646698,0.9272842407226562,0.0,accept,unanimous_agreement
63718741,4936,fix coding style for initializers.,0,0,0,0.9861895442008972,0.9864750504493712,0.9918939471244812,0.0,accept,unanimous_agreement
63719373,4936,it can not process just two lines.,0,0,0,0.8669159412384033,0.8935948014259338,0.9358232021331788,0.0,accept,unanimous_agreement
63719809,4936,fix `m_pieces` => `pieces`.,0,0,0,0.9883129000663756,0.9922916293144226,0.9935427904129028,0.0,accept,unanimous_agreement
63720071,4936,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
63720395,4936,_virtual_ is redundant here!,0,-1,0,0.8700503706932068,0.8309788703918457,0.8749514818191528,0.0,accept,majority_agreement
63720598,4936,insert space befor `*`.,0,0,0,0.9862906336784364,0.9912734627723694,0.9922568798065186,0.0,accept,unanimous_agreement
63721069,4936,fix coding style for initializers.,0,0,0,0.9861895442008972,0.9864750504493712,0.9918939471244812,0.0,accept,unanimous_agreement
63721683,4936,and please don't use uncrustify now unless you sure it will not produce another coding style violations. but you can use discovered violations to upgrade uncrustify.cfg later.,0,0,0,0.9795088768005372,0.9882276654243468,0.9757735133171082,0.0,accept,unanimous_agreement
63722301,4936,insert space before `&`.,0,0,0,0.987209677696228,0.985849380493164,0.9907981157302856,0.0,accept,unanimous_agreement
63722477,4936,"of course, you can use `qvector ` instead of const reference.",0,0,0,0.9896966218948364,0.993568241596222,0.9945107698440552,0.0,accept,unanimous_agreement
63722581,4936,fix `ratio_n` name.,0,0,0,0.9884254932403564,0.9931990504264832,0.994771420955658,0.0,accept,unanimous_agreement
63722815,4936,maybe `return` after to avoid too long `else`?,0,0,0,0.9820353984832764,0.990268051624298,0.9903364181518556,0.0,accept,unanimous_agreement
63723580,4936,"if you're going to use it in a functional context, it is better to give it a verbal name: render. but, imo, i would change its `operator()` to `void render()`.",0,0,0,0.9867504239082336,0.9903993010520936,0.9874926805496216,0.0,accept,unanimous_agreement
63723883,4936,fix `qpair ` => `qpair `,0,0,0,0.9876779913902284,0.9939635396003724,0.9900499582290648,0.0,accept,unanimous_agreement
63724381,4936,are you sure it should be public?,0,0,0,0.9851543307304382,0.99294513463974,0.987008273601532,0.0,accept,unanimous_agreement
63724770,4936,private virtual/abstract methods? tear out my eyes!,-1,-1,-1,0.9775903820991516,0.936012864112854,0.975982904434204,-1.0,accept,unanimous_agreement
63725195,4936,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
63726034,4936,"well, it is public in `qobject`, so there is no big difference...",0,0,0,0.9683282375335692,0.9706318378448486,0.9877184629440308,0.0,accept,unanimous_agreement
63727004,4936,why not `protected`? i don't see much point in making virtual methods private. it only confuses people.,-1,0,0,0.6811839938163757,0.7225160598754883,0.9201647043228148,0.0,accept,majority_agreement
63727306,4936,then ok.,0,0,0,0.975832998752594,0.9271813035011292,0.9830632209777832,0.0,accept,unanimous_agreement
63728506,4936,"because a descendant does not need (and thus disallowed) to call it. update: yes, i understand that it _can_ call it. this just shows that the method is not designed for that.",0,0,0,0.9825273156166076,0.9634891748428344,0.9909387826919556,0.0,accept,unanimous_agreement
63730041,4936,okay. although they are still abstract.,0,0,0,0.9698598980903624,0.9460496306419371,0.9836335778236388,0.0,accept,unanimous_agreement
63735814,4936,herb sutter once wrote a nice [a link] on this subject.,0,0,1,0.8548281192779541,0.632312536239624,0.6992293000221252,0.0,accept,majority_agreement
63736859,4936,i mean insert `return` here and then drop `else` and put its content one indentation level up.,0,0,0,0.9883344173431396,0.9857674837112428,0.9908291101455688,0.0,accept,unanimous_agreement
63737367,4936,"if you moved it that way (not the way i showed), you could do it in one line: [code block]",0,0,0,0.986328423023224,0.9914501309394836,0.9940676689147948,0.0,accept,unanimous_agreement
63737430,4936,"does that mean ""create two functions out of this one""?",0,0,0,0.9734585881233216,0.9916444420814514,0.989905059337616,0.0,accept,unanimous_agreement
63739160,4936,you forget to fix this issue.,0,0,0,0.8788217306137085,0.7560383081436157,0.6625860333442688,0.0,accept,unanimous_agreement
63739304,4936,and what is your comment about this?,0,0,0,0.9379000663757324,0.9845768809318542,0.9906483292579652,0.0,accept,unanimous_agreement
63739463,4936,"it's not my code, but ok.",0,0,0,0.9794856309890748,0.7917405962944031,0.9254032373428344,0.0,accept,unanimous_agreement
63739539,4936,ok. forget it. now i'll see there is some code after `if-else`.,0,0,0,0.9553430080413818,0.9871121048927308,0.9681419134140016,0.0,accept,unanimous_agreement
63739941,4936,"i do not want to change the names. the object _is_ renderer, and `operator()` is its natural ""do the only thing you can"" method.",0,0,0,0.9346188306808472,0.8857124447822571,0.9821380376815796,0.0,accept,unanimous_agreement
63740384,4936,"okay, let it remain as is.",0,0,0,0.978706419467926,0.9863311052322388,0.9758270978927612,0.0,accept,unanimous_agreement
63740567,4936,i think it is better to leave it. if one is reading he should know immediately that it is virtual.,0,0,0,0.9734309911727904,0.9727018475532532,0.9729032516479492,0.0,accept,unanimous_agreement
63741156,4936,non-virtual cannot be override. in other words: override implies virtual.,0,0,0,0.9650256633758544,0.98455411195755,0.9897935390472412,0.0,accept,unanimous_agreement
63741509,4936,"i missed ""override"".",-1,0,0,0.8893000483512878,0.8949089646339417,0.6123377084732056,0.0,accept,majority_agreement
63786158,4936,", i think that with this we avoid floating-point arithmetic, but please check.",0,0,0,0.9799773693084716,0.9437143802642822,0.9850517511367798,0.0,accept,unanimous_agreement
64022439,4936,remove extra space between last parentheses.,0,0,0,0.9773309230804444,0.9814043641090392,0.9911677837371826,0.0,accept,unanimous_agreement
64720949,4936,decided to remove `constexpr` for now. waiting for c++14.,0,0,0,0.9851536750793456,0.9925522804260254,0.9866095185279846,0.0,accept,unanimous_agreement
64725578,4936,please describe it in short. what changes in c++14 do you wait?,0,0,0,0.984079658985138,0.9832515716552734,0.9947547912597656,0.0,accept,unanimous_agreement
64726799,4936,"the relaxed `constexpr` restrictions, of course.",0,0,0,0.9875332117080688,0.9942424893379213,0.9872318506240844,0.0,accept,unanimous_agreement
64732018,4936,i thought so. but another question - will it be enough?,0,0,0,0.9351533651351928,0.949404001235962,0.9526528120040894,0.0,accept,unanimous_agreement
64733107,4936,"sorry, i don't understand you. i just want to put an assertion into a constexpr function. one needs c++14 for that.",-1,-1,-1,0.9895361661911012,0.990911304950714,0.9834877848625184,-1.0,accept,unanimous_agreement
64742589,4936,i'm not sure these relaxation will be enough to use q_assert in `constexpr` methods.,0,0,0,0.6395101547241211,0.6477209329605103,0.6352849006652832,0.0,accept,unanimous_agreement
65109630,4936,"forward declaring indexrange the same way, doesn't work?",0,0,0,0.9819689393043518,0.9795722365379332,0.9830639958381652,0.0,accept,unanimous_agreement
65109908,4936,"it works, of course. decided that the file is so tiny that such optimisation is not significant, while, naturally, this way it is more easy to use this header.",0,0,0,0.9668575525283812,0.967881679534912,0.978492558002472,0.0,accept,unanimous_agreement
65110296,4936,i don't know why calculations seem off. example: **torrent size** = 9 **bytes** **piece size** = 2 bytes **image width** = 500 pixels **bytesperpixel** = 0.018 assuming you want piece 5 (last one) then you get: (5 \* 2 + 2 / 2) / 0.0.18 = 11 / 0.018 = 611.111!,0,0,-1,0.8734445571899414,0.6625155806541443,0.5911436080932617,0.0,accept,majority_agreement
65110314,4936,what if the file size is smaller than the image? extreme case. look at my example below.,0,0,0,0.9803095459938048,0.9281037449836732,0.9812129139900208,0.0,accept,unanimous_agreement
65110430,4936,the idea behind switching to bytes is that there will be no torrent with size in bytes less than ten times size of screen in pixels.,0,0,0,0.9788959622383118,0.983055830001831,0.9905132055282592,0.0,accept,unanimous_agreement
65110574,4936,"it will render incorrectly if `image.width() > torrentinfo.totalsize()`, but i thought that this will never happen. and the relative precision of the computations is `image.width() / torrentinfo.totalsize() * 100%`",0,0,0,0.986959993839264,0.982124388217926,0.9829749464988708,0.0,accept,unanimous_agreement
65110604,4936,sorry i made a mistake. the piece index for the last piece would be 4 not 5. which gives an answer of 500. but since the image is so much bigger than the torrent size should one byte occupy several pixels? shouldn't bytesperpixel = width / size ?,-1,-1,-1,0.9893004298210144,0.9878662824630736,0.9895228743553162,-1.0,accept,unanimous_agreement
65110699,4936,don't use curly braces. use the parentheses.,0,0,0,0.9487281441688538,0.973075807094574,0.9902337789535522,0.0,accept,unanimous_agreement
65110704,4936,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
65110894,4936,and i don't check this one until the first one is resolved.,0,0,0,0.9293264746665956,0.9731557965278624,0.991057276725769,0.0,accept,unanimous_agreement
65110983,4936,"in your example `m_bytesperpixel == 0` (and see my comment above). if you think that probability to encounter a torrent with size less than 1000 bytes is not zero, or you just don't want to leave any chance to it, i will rewrite this with floating-point numbers.",0,0,0,0.9854640364646912,0.9829989075660706,0.9911674857139589,0.0,accept,unanimous_agreement
65111049,4936,and i think i get wrong results for this example too: **torrent size** = 10 mib **piece size** = 2 mib **image width** = 500 pixels **bytesperpixel** = 10240 / 500 = 20.48 = 20 pos for piece 4 (last one): (4 \* 2048 + 2048 / 2) / 20 = 9216 / 20 = 460.80 that means that about 40px are allocated for each piece. so 5 pieces occupy 200px. where do the rest 300px go?,-1,0,0,0.5962610840797424,0.8734963536262512,0.8409744501113892,0.0,accept,majority_agreement
65111644,4936,"i suppose that you meant kib, not mib, for the sizes, then bytesperpixel = 20. let's compute pixels per piece: pixelsperpiece = totalpixels / numberofpieces = totalpixels / ceil(torrrentsize / piecesize); in this example numberofpieces = 5 and pixelsperpiece = 100. the method computes image positions for the center of the given piece. exact number is 450, while computation gave 460. the error is 10/450 = 2.2%. the estimation of the error is: `image.width() / torrentinfo.totalsize() * 100%` = 500 / 10240 *100% = 4.9%; however, taking a torrent of size 10 mib we get error value of approx 1920 / (10 \* 2^20) \* 100% = 0.02% and thus a typical error will be 1920*0.02% = 0.384 px. should we want precise pointing, we need to compute two image positions: for the beginning of a piece and for the end. perhaps that would make computations clearer, i don't know. testing on you showed that i have to either put the approximation used into a comment or rewrite the code using two ends and, perhaps, floating point arithmetic.",0,0,0,0.9813750982284546,0.98826664686203,0.987385392189026,0.0,accept,unanimous_agreement
65112294,4936,"oops you're right. i messed up the units. anyway, i didn't realize you wanted to calculate the position at the center. i think your explanation is enough and imo the error rate is acceptable. more comments on what the algos do are welcome for future reference. and i suppose torrents smaller than the image are so improbable that we shouldn't worry about them.",-1,1,1,0.7272928953170776,0.6637291312217712,0.6407849788665771,1.0,accept,majority_agreement
65112442,4936,i will add the comment then.,0,0,0,0.9846845269203186,0.985289752483368,0.9915340542793274,0.0,accept,unanimous_agreement
65113853,4936,"the function works incorrectly (don't know details yet), but in multi-file torrent it highlights exactly in the first half of the progress bar. it is strange that i had not noticed that for a few days.",-1,-1,-1,0.5515921115875244,0.8713924884796143,0.8878704309463501,-1.0,accept,unanimous_agreement
65116531,4936,"it was an integer overflow when computing value inside of the braces. will make `m_piecesize` of type `qlonglong` too,",0,0,0,0.9898478388786316,0.987070620059967,0.9930210709571838,0.0,accept,unanimous_agreement
65117432,4936,"ok, but this is how c++ code will look like in the very near future.",0,0,0,0.9831820130348206,0.9561133980751038,0.9798034429550172,0.0,accept,unanimous_agreement
65124251,4936,but we did accept using it! let's be consistent in our actions. you agreed to this so easily? after you have fought for this opportunity? you surprise me (not to say otherwise).,1,0,-1,0.8122098445892334,0.5490646362304688,0.8315778374671936,,review,no_majority_disagreement
65153706,4936,"i went back and read the relevant issue. ok, i understand why you want it(to narrow the implicit type conversions). i mistakenly thought that it was only to initialize elements of lists (eg vector, map, hash). you can leave them then. i guess old habits make my eyes hurt by seeing this ""unusual/different"" invocation.",-1,0,-1,0.9402109384536744,0.6974424719810486,0.9493263363838196,-1.0,accept,majority_agreement
65155861,4936,added a comment which explains the used approximation and qdebug log for a case when it is coarse.,0,0,0,0.9877862930297852,0.9883452653884888,0.991458773612976,0.0,accept,unanimous_agreement
65156041,4936,"thank you,",1,1,1,0.6733247637748718,0.8202139139175415,0.8302332758903503,1.0,accept,unanimous_agreement
65188017,4936,just realised that using the `piecerange` abstraction i can make the interface of this class cleaner and remove one of the approximations (for the piece center).,0,0,0,0.9859336018562316,0.988739013671875,0.9886305332183838,0.0,accept,unanimous_agreement
65192496,4936,", take a look, please. as to me the new functions is more correct and cleaner.",0,0,1,0.941110134124756,0.9228470921516418,0.7241737246513367,0.0,accept,majority_agreement
65194125,4936,the `indexrange` type seems to be too general to be a member of the `bittorrent` namespace?,0,0,0,0.9846175909042358,0.9884490370750428,0.9920288920402528,0.0,accept,unanimous_agreement
65207857,4936,of course. move it into global namespace and its file in `base/` directly.,0,0,0,0.9896457195281982,0.9932737350463868,0.9948968291282654,0.0,accept,unanimous_agreement
65208026,4936,i don't like the use **class** keyword in this context.,-1,-1,-1,0.9791315793991088,0.9690492749214172,0.9460834860801696,-1.0,accept,unanimous_agreement
65208634,4936,some incorrect indentation...,-1,-1,0,0.7034221887588501,0.8414140939712524,0.5629299879074097,-1.0,accept,majority_agreement
65209909,4936,"the use of ternary operator with such cumbersome constructions inside looks horrible. imo, in this case it's better (more readable) to use ""earlier return"" or `if-else`: [code block] [code block]",-1,-1,-1,0.9891756176948548,0.9917165637016296,0.9940358400344848,-1.0,accept,unanimous_agreement
65216509,4936,class → typename,0,0,0,0.985572099685669,0.9610305428504944,0.989969789981842,0.0,accept,unanimous_agreement
65216630,4936,simplified. what's wrong with the indentation?,0,0,0,0.6744078397750854,0.7073032855987549,0.9477331638336182,0.0,accept,unanimous_agreement
65218017,4936,now here is the extra space...,0,0,0,0.9713661074638368,0.9878990054130554,0.9929344654083252,0.0,accept,unanimous_agreement
65218415,4936,next indentation level should be more indented than previous one.,0,0,0,0.9835636615753174,0.982332170009613,0.9912603497505188,0.0,accept,unanimous_agreement
65220088,4936,isn't it the case here?,0,0,0,0.9750131964683532,0.9904693961143494,0.9913210272789,0.0,accept,unanimous_agreement
65223258,4936,your previous code was: [code block] the last two lines should be more indented than `: bittorrent::makeinterval (`,0,0,0,0.983424961566925,0.9887480735778807,0.995815932750702,0.0,accept,unanimous_agreement
65225281,4936,"oh, i see. thanks!",1,1,1,0.9782493114471436,0.9938454031944276,0.9867291450500488,1.0,accept,unanimous_agreement
65469602,4936,"question: since begin() is the same as first() shouldn't end() be the same as last()? i am under the impression you offer those for compatibility, right?",0,0,0,0.9036229848861694,0.9442077875137328,0.984495997428894,0.0,accept,unanimous_agreement
65536695,4936,"you are right, this id for compatibility, and as such, end() must point to one after the last element.",0,0,0,0.9824825525283812,0.9838565587997437,0.9920623302459716,0.0,accept,unanimous_agreement
65552916,4936,"i suppose you mean last() and end() are both correct as they are now, right?",0,0,0,0.9795799255371094,0.9888372421264648,0.989984393119812,0.0,accept,unanimous_agreement
65553778,4936,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
778597745,15915,note for myself: this line is incorrect.,0,0,0,0.7745179533958435,0.6991863250732422,0.9490578174591064,0.0,accept,unanimous_agreement
781161531,15915,you can remove those unused headers: [code block],0,0,0,0.9889912605285645,0.9895349144935608,0.995593011379242,0.0,accept,unanimous_agreement
781182424,15915,i would move comparison operators out of class if possible. or at least make them `friend`.,0,0,0,0.9847112894058228,0.98659747838974,0.988394856452942,0.0,accept,unanimous_agreement
781183175,15915,"those operators without assignment (`/`, `+`) should be out of class if possible. or at least make them `friend`.",0,0,0,0.9872061014175416,0.9929090738296508,0.9918928146362304,0.0,accept,unanimous_agreement
781185169,15915,"i would rename the variables to `from, to`. the same to `renamefile()`",0,0,0,0.987880289554596,0.99453604221344,0.9946106672286988,0.0,accept,unanimous_agreement
781188890,15915,i would either rename it to `forceremovefile(const path &path)` or merge it with `removefile()` (try usual remove first then adjust permission if failed).,0,0,0,0.9886765480041504,0.9948712587356568,0.9955606460571288,0.0,accept,unanimous_agreement
781191909,15915,it might be a good idea to sort this block alphabetically so that functions with similar prefixes will be placed next to each other.,0,0,0,0.9736758470535278,0.985683798789978,0.9790257811546326,0.0,accept,unanimous_agreement
781195799,15915,"this should answer you: [a link] therefore it can't be the mount point iirc (or it can? well you have to test it to be sure...) well i don't really expected to see such comments in code, those can be asked on the net instead...",0,0,0,0.8490620851516724,0.9417701959609984,0.9841389060020448,0.0,accept,unanimous_agreement
781199929,15915,can't you do these operations on `path` instead of on `qstring`?,0,0,0,0.9871311783790588,0.9942295551300048,0.9934090375900269,0.0,accept,unanimous_agreement
781203795,15915,"since this looks like a shim, i would write it: [code block] the same applies to other new functions in this file.",0,0,0,0.9883069396018982,0.9900423288345336,0.9944124817848206,0.0,accept,unanimous_agreement
781205591,15915,maybe? [code block] and other similar instances in this file (where `auto` or `auto&` is used),0,0,0,0.9890871047973632,0.9932361245155334,0.9918323755264282,0.0,accept,unanimous_agreement
781209326,15915,maybe use \`path\` to denote the variable and not the type.,0,0,0,0.984767735004425,0.9920667409896852,0.9863141775131226,0.0,accept,unanimous_agreement
781232347,15915,please remind me why it is better?,0,0,0,0.9548035264015198,0.9851528406143188,0.9936758875846864,0.0,accept,unanimous_agreement
781243225,15915,"but both `some/path/.` and `some/path` point to the same place, don't they?",0,0,0,0.9852681159973145,0.9921108484268188,0.9913175106048584,0.0,accept,unanimous_agreement
781244849,15915,"no, since `path` don't store unclean/redundant paths like `some/path/.`",0,0,0,0.9804471731185912,0.9903687834739684,0.9883663058280944,0.0,accept,unanimous_agreement
781248193,15915,"iirc it was for implicit type conversion and/or more degree of freedom on the right hand side when doing comparisons. maybe `path` doesn't allow/need it, but it is still a good idea to follow it generally.",0,0,0,0.8556905388832092,0.9697513580322266,0.9382124543190002,0.0,accept,unanimous_agreement
781344767,15915,"on a second thought, adding `path` to `utils::compare` might be a bad idea. imo there will be 2 types of comparison for a path type. the first is actual path comparison where the case sensitivity of the file system (or perhaps operating system) will be taken into consideration. the second is comparing the path on a string level where the case sensitivity is always true when comparing. and this is not clear which kind of comparison `utils::compare` is doing. for string-like comparison, i would just convert the path to string at the usage site instead.",-1,0,0,0.575596272945404,0.8707090616226196,0.8621348142623901,0.0,accept,majority_agreement
781348377,15915,"i suppose not, otherwise i would have update it if i found the opportunity. anyway, the point is to remove the simplify the following `if()` block if path won't ever contain trailing slash.",0,0,0,0.9869476556777954,0.9841480255126952,0.9894485473632812,0.0,accept,unanimous_agreement
781352179,15915,`tonative()`,0,0,0,0.9796587228775024,0.9890873432159424,0.9939906597137452,0.0,accept,unanimous_agreement
781352658,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
781360771,15915,tonative()?,0,0,0,0.9744515419006348,0.984320878982544,0.991718888282776,0.0,accept,unanimous_agreement
781362278,15915,both tonative()?,0,0,0,0.9741770029067992,0.9635443091392516,0.993168830871582,0.0,accept,unanimous_agreement
781363982,15915,"tonative()? my conclusion so far is that only when passing value to qt functions or qbt internal functions can use tostring(), otherwise it is tonative().",0,0,0,0.983300805091858,0.9925289154052734,0.9863563776016236,0.0,accept,unanimous_agreement
781381635,15915,if scope of this class is limited only to string comparison it should probably be moved in `utils/string/compare.h` as `utils::string::compare`.,0,0,0,0.9882301092147828,0.9950695037841796,0.9933624267578124,0.0,accept,unanimous_agreement
781386923,15915,if i remember correctly it is used in some kind of sort algorithms so i will need to implement another compare for path class and just duplicate all the logic from existing compare to compare paths in the same way as it was done previously... have you any better idea?,0,0,0,0.9577430486679076,0.965184450149536,0.9899208545684814,0.0,accept,unanimous_agreement
781778709,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
781779834,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
781787516,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
781792384,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
781793232,15915,removed qmimedatabase. i'm not sure what another headers are unused...,-1,-1,0,0.642246425151825,0.7201088070869446,0.9879207611083984,-1.0,accept,majority_agreement
781794734,15915,"seems it's about left side. any right side can be used when comparators are class members, e.g.: [code block]",0,0,0,0.9852632284164428,0.9906921982765198,0.9888627529144288,0.0,accept,unanimous_agreement
781853470,15915,changed anyway.,0,0,0,0.9728209972381592,0.9570913314819336,0.8617897629737854,0.0,accept,unanimous_agreement
781855417,15915,slightly reordered declarations but still using logical relations.,0,0,0,0.9802752137184144,0.96297025680542,0.9914669990539552,0.0,accept,unanimous_agreement
781869218,15915,"seems it is used in only one place so i ended up with removing this operators from compare, and now i process paths as strings there.",0,0,0,0.9857029318809508,0.9861488342285156,0.9910116195678712,0.0,accept,unanimous_agreement
782756639,15915,"`qlatin1string` is still useful here, isn't?",0,0,0,0.9856240749359132,0.9926069974899292,0.9934681057929992,0.0,accept,unanimous_agreement
782758726,15915,tonative?,0,0,0,0.9752137064933776,0.9820871949195862,0.9904752373695374,0.0,accept,unanimous_agreement
782759392,15915,i think you should still add path header to this file and to searchhandler.cpp too.,0,0,0,0.9864307641983032,0.9865630865097046,0.9901825785636902,0.0,accept,unanimous_agreement
782761181,15915,for function parameter it should be `const char *rhs`. this applies to other similar instances.,0,0,0,0.9882010221481324,0.9945446252822876,0.9948853850364684,0.0,accept,unanimous_agreement
782762397,15915,is it a good idea to provide this stream operator? it only provides `tostring()`.,0,0,0,0.9883341789245604,0.9897260069847108,0.990542471408844,0.0,accept,unanimous_agreement
782764175,15915,"if it isn't too much trouble for you, i would split it to 2 lines as it is easier to read (for me).",0,0,0,0.9464794993400574,0.9530577063560486,0.9634038805961608,0.0,accept,unanimous_agreement
782766006,15915,not sure why you did it this way. iirc the comparison functions is supposed to compare the salient feature of the type. i would do it like this: [code block],0,0,0,0.9593830108642578,0.966582179069519,0.9080854058265686,0.0,accept,unanimous_agreement
782768766,15915,"(for `/`, `+`) since you already have `friend` version of it, you can just ditch this and declare `friend` version as public.",0,0,0,0.9880659580230712,0.9924903512001038,0.993954598903656,0.0,accept,unanimous_agreement
782772962,15915,seems the outer `path()` is redundant. the same in `std::string` overload.,0,0,0,0.9824416041374208,0.9714398980140686,0.9894233345985411,0.0,accept,unanimous_agreement
782773461,15915,`return !(lhs == rhs);`,0,0,0,0.976432204246521,0.9920042157173156,0.9922722578048706,0.0,accept,unanimous_agreement
782775098,15915,i would rename `rootfolder` to `newroot` or `newrootfolder`.,0,0,0,0.9880859851837158,0.9935799837112428,0.9946532249450684,0.0,accept,unanimous_agreement
782783619,15915,could the path ever be empty? what about making `path` always non-empty? (make this an invariant of the type),0,0,0,0.9851561784744264,0.9928122162818908,0.9907870888710022,0.0,accept,unanimous_agreement
782784616,15915,maybe name it `root`?,0,0,0,0.985986351966858,0.9930418729782104,0.9905716180801392,0.0,accept,unanimous_agreement
782784750,15915,maybe just `parent`?,0,0,0,0.983110785484314,0.9921769499778748,0.9886526465415956,0.0,accept,unanimous_agreement
782789814,15915,is it a good idea to expose this signature instead? [code block],0,0,0,0.9866414070129396,0.989283800125122,0.9948038458824158,0.0,accept,unanimous_agreement
782821026,15915,it is useful in some scenarios. of course it could be done differently but i would prefer postpone this to further optimization.,0,0,0,0.9642135500907898,0.9767765998840332,0.883776068687439,0.0,accept,unanimous_agreement
782824267,15915,but it seems disallow empty paths will add a hell lot of headaches. you even can't provide non-throwing constructor to create path from string.,-1,-1,-1,0.9628304243087769,0.9612666964530944,0.9370571970939636,-1.0,accept,unanimous_agreement
782836123,15915,"it's quite the opposite. it makes sense to convert paths to a native form only when it is really necessary, i.e. when we call third-party functions or show them to the user. everything else is extra heat generation (don't forget that they are stored in uniform format). note, that i try to avoid changing format in webapi etc.(although they are used inconsistently there).",0,0,0,0.9658138155937196,0.9401912093162536,0.982467234134674,0.0,accept,unanimous_agreement
782840320,15915,"but i just emphasize that shared memory key isn't a path. it is just based on some path. i can change it anyway, if you feel it is better.",0,0,0,0.9577322006225586,0.9733343124389648,0.9916090369224548,0.0,accept,unanimous_agreement
782845919,15915,it is intention to use `const char[]` since it should be applicable to string literals written in the code only. any other char arrays shouldn't be treated as latin1 strings.,0,0,0,0.9883995056152344,0.9944816827774048,0.9935184121131896,0.0,accept,unanimous_agreement
782929789,15915,it is needed for qvariant.,0,0,0,0.9836030006408693,0.9911577105522156,0.9940273761749268,0.0,accept,unanimous_agreement
782936779,15915,"it seems to me that the concept of greaterthan/lessthan is not very applicable to the path. only the concept of equal (not equal) makes sense. anyway, as i said above, `it does not pretend to be general purpose solution`. if such a method is really required in the future we'll add it.",0,0,0,0.9026994109153748,0.9778329730033876,0.978684902191162,0.0,accept,unanimous_agreement
783034240,15915,"one more time... there is no point in converting it to a native format in order to transfer it to another qbittorrent instance, where it will be converted back to uniform format inside path.",0,0,0,0.9669118523597716,0.9723774790763856,0.9500964879989624,0.0,accept,unanimous_agreement
783035550,15915,"apparently, i hooked it by accident. reverted.",0,-1,-1,0.9005591869354248,0.5971676111221313,0.8991196155548096,-1.0,accept,majority_agreement
783038975,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
783040524,15915,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
783043821,15915,why do you think so? `path(const qstring &)` constructor is explicit.,0,0,0,0.9866461753845216,0.9929414987564088,0.992319881916046,0.0,accept,unanimous_agreement
783045328,15915,do you think indirection is better? just to reduce the number of friend functions?,0,0,0,0.984861135482788,0.9883527159690856,0.9837660789489746,0.0,accept,unanimous_agreement
783049239,15915,i would still emphasize that it is single path item. isn't it useful?,0,0,0,0.9843024015426636,0.9746100306510924,0.9850968718528748,0.0,accept,unanimous_agreement
783050847,15915,i'm used to `parent` being related specifically to the object model in qt. here it is the parent part of the path.,0,0,0,0.9878777265548706,0.988794445991516,0.97331702709198,0.0,accept,unanimous_agreement
785392593,15915,never mind.,0,0,0,0.8687645196914673,0.6564270257949829,0.958609402179718,0.0,accept,unanimous_agreement
785392903,15915,"if i read correct, those will be write to file on disk, right? and since the file is human readable (or even editable) then it should show the correct path separator.",0,0,0,0.9885231256484984,0.9693349003791808,0.9900013208389282,0.0,accept,unanimous_agreement
785393174,15915,or is it possible to use `qlatin1string` as the parameter instead? using `char[]` or `char*` can't really guard against misuse (non latin1 strings/literals).,0,0,0,0.9660137891769408,0.9930746555328368,0.9902670979499816,0.0,accept,unanimous_agreement
785393324,15915,"sorry, i misread.",-1,-1,-1,0.9863864183425904,0.9908135533332824,0.9915124773979188,-1.0,accept,unanimous_agreement
785393418,15915,"or it can be simplified (based on existing code path, so the surface to the internals is smaller): [code block] the same applies to `path operator+(const path &lhs, const std::string &rhs)`",0,0,0,0.9877556562423706,0.9941169023513794,0.9945923686027528,0.0,accept,unanimous_agreement
785393774,15915,i wanted to reduce access to internal/private variables (here is `m_pathstr`) and build functions on a smaller set of *core functions. therefore this is achievable.,0,0,0,0.9822921752929688,0.9928407669067384,0.9936002492904664,0.0,accept,unanimous_agreement
785394125,15915,"ok, we can leave it to later. it is just a wild thought anyway.",0,0,0,0.9248155355453492,0.9628944993019104,0.9210770726203918,0.0,accept,unanimous_agreement
785394351,15915,never mind.,0,0,0,0.8687645196914673,0.6564270257949829,0.958609402179718,0.0,accept,unanimous_agreement
785394375,15915,"well i saw `std::filesystem::path` has used the same naming, then never mind.",0,0,0,0.9690057039260864,0.9430446028709412,0.9898354411125184,0.0,accept,unanimous_agreement
785394708,15915,"as a user, it is a bit confusing to see both `isequalto()` and `operator==()` exists side by side. maybe just make this function always compare case insensitively?",-1,-1,-1,0.6999235153198242,0.7066301107406616,0.7435248494148254,-1.0,accept,unanimous_agreement
785394801,15915,wrong indent format used.,-1,0,0,0.7768415212631226,0.7193161249160767,0.5141620635986328,0.0,accept,majority_agreement
785395040,15915,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
785395157,15915,tonative() i think this error message could be shown to the user.,0,0,0,0.9839960932731628,0.9819905161857604,0.9855589866638184,0.0,accept,unanimous_agreement
785396254,15915,"now i have rethink (back to the basics) about the `path` class. now i think the `path` has only one true form, it is `tonative()`. `tostring()` is actually an (qbt/qt) artificial/internal thing that provide a faster code path for some operations. therefore i would rename `tostring()` to something else, maybe `togenericstring()` (idea taken from `std::filesystem::path::generic_string`) and rename `tonative()` to `tostring()`. it is also possible to provide a `operator qstring()` to show this intention.",0,0,0,0.9710729718208312,0.990997552871704,0.9830284118652344,0.0,accept,unanimous_agreement
785396622,15915,"i might be drifting off... so i'll ask. what kind of path does it support? i can see absolute path is ok, what about relative path? do you intend to support the following usage? (note this is related to security in webui/webapi usage) [code block]",0,0,0,0.8599110841751099,0.9185936450958252,0.7551407814025879,0.0,accept,unanimous_agreement
785397145,15915,"well, in this case, apparently you're right. but at a minimum, this will require additional tests to make sure that it does not break, since it wrote with uniform separators initially. and it will definitely break the possibility of a ""painless"" downgrade.",0,0,0,0.951123833656311,0.9785501956939696,0.9134351015090942,0.0,accept,unanimous_agreement
785397412,15915,"if uniform separators were used from the start, then just keep it as is. no need to break things now... maybe a comment a code saying this is intended would help developers in the future.",0,0,0,0.9566431641578674,0.9784671068191528,0.985498309135437,0.0,accept,unanimous_agreement
785412915,15915,"then it will be wrong on case sensitive systems. wouldn't it be better to make it system dependent? really we need both comparison way: 1. accurate comparison (always case sensitive) 2. system dependent comparison (case insensitive on appropriate systems) we should use system dependent comparison everywhere we need to know whether two paths point to the same file/folder. accurate comparison is still useful when we compare old and new paths before moving/renaming since it is valid to change only case of filename even on case insensitive systems. so question is which of them should be an `operator==()`, and which an additional function?",0,0,0,0.9575226306915284,0.9891128540039062,0.9397041201591492,0.0,accept,unanimous_agreement
785413368,15915,it will most likely break downgrade. we can provide additional patch to v4.4.1 that will make it separator independent.,0,0,0,0.9873773455619812,0.9891718029975892,0.9872303605079652,0.0,accept,unanimous_agreement
785431330,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
785432930,15915,"of course, the relative paths are supported as well (a relative path is not only the one that contains `.` or `..`). as i have already said, my intention (at least at the first stage) is not to introduce anything new, but only to improve the current use case (i.e. to save the caller from having to take care of separators where it does not concern it, and from the basic cleaning of paths from redundant elements). this is basically a routine but very extensive code transformation, which should preserve the current logic (except in cases where obvious bugs are noticed, which can be easily eliminated without breaking anything else). something more advanced requires additional research, so it can be added later in separate prs. it may be better to handle such cases outside of the path class, so as not to make normal use inconvenient.",0,0,0,0.9698867797851562,0.9848441481590272,0.982412576675415,0.0,accept,unanimous_agreement
785434097,15915,"i can agree with this part of your proposal, but i really don't like the other part of it: i really dislike `togenericstring()`. firstly, i would like to keep it short, since it is too heavily used throughout the code and a long name will really infuriate. secondly, i still feel like having it more expressive about its essence (that it doesn't transform path into something other, but just returns internal data, to prevent from suggestions to store it in a separate variable if it is used multiple times). i would really call it `data()`.",-1,1,-1,0.9858292937278748,0.5370007753372192,0.8213359713554382,-1.0,accept,majority_agreement
785435756,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
785435814,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
785436422,15915,user-friendly representation of type's value isn't always correctly comparable in terms of this type. apparently we should keep discuss it in [a link],0,0,0,0.9842011332511902,0.9352957010269164,0.985283136367798,0.0,accept,unanimous_agreement
785437837,15915,"no. unless you want to go back to where we started: [code block] even in this case it's enough to have overloads with `qstring` parameter. `qlatin1string` doesn't do it either. this is just a way to make the conversion easier/faster when the developer is aware that the string is latin1. in other words, the `path` class provides some contract in the interface that it assumes `latin-1` to be the encoding of the string literal (unlike qstring, which uses utf-8 for string literals and char arrays).",0,0,0,0.9849543571472168,0.992733359336853,0.98697829246521,0.0,accept,unanimous_agreement
785684697,15915,i think `operator==()` should compare in platform dependent way. if we need accurate comparison we can compare them as strings.,0,0,0,0.9869902729988098,0.9879704117774964,0.985944390296936,0.0,accept,unanimous_agreement
786441689,15915,i was hoping it can be enforced either at compile-time or run-time (under debug mode)...,0,0,0,0.9402669072151184,0.9642065763473512,0.9842333197593688,0.0,accept,unanimous_agreement
786445182,15915,ok for me.,0,0,0,0.9717180728912354,0.965094029903412,0.9768423438072203,0.0,accept,unanimous_agreement
786448696,15915,"this is the concerning part. if this part (relative paths) isn't well-defined, it might cause problems when part of the path is taking inputs from user/outside world. and i can't be 100% sure whether this is happening now due to bulk changes..",0,0,-1,0.8460801243782043,0.5546572804450989,0.6409362554550171,0.0,accept,majority_agreement
786451448,15915,it is well-defined. path class support relative path. it just remove redundancies that doesn't affect the meaning of path (ref. `qdir::cleanpath()`).,0,0,0,0.9844492077827454,0.9918213486671448,0.9862406849861144,0.0,accept,unanimous_agreement
795202961,15915,"i feel unsafe when reading this part, can you refactor it more to: [code block] and maybe keep the `if (tmppath != m_path)` comparison?",-1,0,-1,0.9614061713218688,0.5940535068511963,0.972590982913971,-1.0,accept,majority_agreement
795204960,15915,"this is removed, is it correct?",0,0,0,0.9838486909866332,0.9918038845062256,0.99553644657135,0.0,accept,unanimous_agreement
795205926,15915,will `qfileinfo::exists()` return true on folders?,0,0,0,0.9877092838287354,0.9943404197692872,0.9943477511405944,0.0,accept,unanimous_agreement
795207667,15915,i think it is reasonable to provide this if there are any usage of it: [code block],0,0,0,0.984476625919342,0.9656477570533752,0.9909578561782836,0.0,accept,unanimous_agreement
795208523,15915,those look like `const` vars.,0,0,0,0.9839720726013184,0.9909193515777588,0.9916778802871704,0.0,accept,unanimous_agreement
795208839,15915,`u'/'`,0,0,0,0.9756802320480348,0.9906960725784302,0.9769187569618224,0.0,accept,unanimous_agreement
795210203,15915,can those (and other default functions) be removed? under c++ rule of zero.,0,0,0,0.9869073629379272,0.9929720759391784,0.991719365119934,0.0,accept,unanimous_agreement
795211524,15915,you should include the path header.,0,0,0,0.9876447319984436,0.9904879927635192,0.995088517665863,0.0,accept,unanimous_agreement
795211687,15915,please add `reserve()`,0,0,0,0.9861292243003844,0.9924626350402832,0.996145248413086,0.0,accept,unanimous_agreement
795211756,15915,`pathlist`?,0,0,0,0.9882783889770508,0.9918125867843628,0.9951382279396056,0.0,accept,unanimous_agreement
795211851,15915,"those errors might be presented to user, so `tostring()`",0,0,0,0.9851981997489928,0.9852193593978882,0.9927718043327332,0.0,accept,unanimous_agreement
795212289,15915,"optional, maybe rename it to `paths` as it isn't a list...",0,0,0,0.9777640104293824,0.9933673739433287,0.9943985342979432,0.0,accept,unanimous_agreement
795212571,15915,"optional, if possible i would use `{}` as it isn't interesting of the type. also in similar code below.",0,0,0,0.9880868196487428,0.987561583518982,0.9938708543777466,0.0,accept,unanimous_agreement
795213142,15915,`destpath += c_torrent_file_extension);`?,0,0,0,0.9851669669151306,0.9939879179000854,0.9948468208312988,0.0,accept,unanimous_agreement
795949888,15915,i think you should revert it.,0,0,0,0.9048123955726624,0.9661227464675904,0.9756553769111632,0.0,accept,unanimous_agreement
795954126,15915,i think those should be `tostring()` (and other `data()` instances in this function).,0,0,0,0.9891157746315002,0.9904582500457764,0.9869993329048156,0.0,accept,unanimous_agreement
795954577,15915,`pathlist`?,0,0,0,0.9882783889770508,0.9918125867843628,0.9951382279396056,0.0,accept,unanimous_agreement
795955061,15915,`tostring()` too.,0,0,0,0.9876277446746826,0.9902219772338868,0.99463152885437,0.0,accept,unanimous_agreement
795956447,15915,i would include path class header.,0,0,0,0.9886991381645204,0.9896530508995056,0.9937886595726012,0.0,accept,unanimous_agreement
795960319,15915,either you should revert `qstringliteral` back or use `path` class.,0,0,0,0.9859957098960876,0.9949799180030824,0.9942014813423156,0.0,accept,unanimous_agreement
795962569,15915,include path header.,0,0,0,0.9877753257751464,0.9891816973686218,0.9940780401229858,0.0,accept,unanimous_agreement
795966521,15915,`/rss` -> `rss`?,0,0,0,0.9883058071136476,0.9925783276557922,0.9932221174240112,0.0,accept,unanimous_agreement
795967438,15915,wrong order.,-1,-1,-1,0.9440091848373412,0.5554730296134949,0.7645806670188904,-1.0,accept,unanimous_agreement
795969425,15915,you should probably recheck all .cpp files whether the path header is included...,0,0,0,0.9885629415512084,0.9933878183364868,0.9933225512504578,0.0,accept,unanimous_agreement
795970845,15915,please add `reserve()`.,0,0,0,0.985431969165802,0.9914685487747192,0.9959667921066284,0.0,accept,unanimous_agreement
795971941,15915,is `torrent->hasmetadata()` check redundant now?,0,0,0,0.9860053062438964,0.9940671920776368,0.9944975972175598,0.0,accept,unanimous_agreement
795975088,15915,imo `tostring()` is more accurate even if it doesn't contain path separators.,0,0,0,0.986772119998932,0.9857292175292968,0.9865992069244384,0.0,accept,unanimous_agreement
795977379,15915,"duplicate... you could also try reviewing your own pr, it is useful.",0,0,0,0.6922154426574707,0.968086838722229,0.7754804491996765,0.0,accept,unanimous_agreement
795980681,15915,i would use `path`.,0,0,0,0.9887449145317078,0.990542471408844,0.9940944314002992,0.0,accept,unanimous_agreement
795984512,15915,i think it should be `tostring()`.,0,0,0,0.9874827861785888,0.9854171872138976,0.987412452697754,0.0,accept,unanimous_agreement
795984704,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
795985048,15915,`const path decodedpath { ....`,0,0,0,0.9859200716018676,0.99100923538208,0.991606831550598,0.0,accept,unanimous_agreement
795985649,15915,redundant?,0,0,0,0.8326672315597534,0.727566659450531,0.9568108916282654,0.0,accept,unanimous_agreement
795989107,15915,why change it?,0,0,0,0.8394670486450195,0.9713752269744872,0.9535385966300964,0.0,accept,unanimous_agreement
795998054,15915,"i would like this empty line removed, those are a sequence of non-breakable actions imo.",0,0,0,0.937563419342041,0.9343339204788208,0.9831318855285645,0.0,accept,unanimous_agreement
796001454,15915,maybe call it `isparentof`?,0,0,0,0.9861314296722412,0.9938805103302002,0.990026831626892,0.0,accept,unanimous_agreement
796003365,15915,also it feels a bit weird that it is done this way. i would expect something like `path::hasparent(path)` instead of other way around.,-1,-1,-1,0.9773101806640624,0.9764578938484192,0.9686473608016968,-1.0,accept,unanimous_agreement
796005655,15915,"off topic, i think it would be faster by not using replacement: `path(idstring + qlatin1string("".torrent""))`",0,0,0,0.9859374165534972,0.992970049381256,0.9854640364646912,0.0,accept,unanimous_agreement
796006203,15915,`tostring()`,0,0,0,0.985721230506897,0.9884002208709716,0.9942939877510072,0.0,accept,unanimous_agreement
796007236,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796007393,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796008842,15915,"still it should store in native path, no? bencoded file is editable with an editor...",0,0,0,0.9873276352882384,0.9939938187599182,0.9929323196411132,0.0,accept,unanimous_agreement
796009707,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796010018,15915,`const path resumefilename(...)`,0,0,0,0.9873237013816832,0.9920252561569214,0.9939401149749756,0.0,accept,unanimous_agreement
796012209,15915,`path` since it isn't clear what type it returns.,0,0,0,0.9815467596054076,0.9686129093170166,0.9703897833824158,0.0,accept,unanimous_agreement
796014264,15915,i think it should return `qstring` instead. this can avoid (imo) confusing code pattern of `filename().data()`,0,0,0,0.9872150421142578,0.9892037510871888,0.9883278012275696,0.0,accept,unanimous_agreement
796018990,15915,imo you should use `tostring()` in upper code and omit this conversion. the code would be less uncertain due to less `data()`.,0,0,0,0.988454520702362,0.992911159992218,0.9901247024536132,0.0,accept,unanimous_agreement
796022536,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796022873,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796023000,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796024324,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796026761,15915,`pathlist`?,0,0,0,0.9882783889770508,0.9918125867843628,0.9951382279396056,0.0,accept,unanimous_agreement
796027592,15915,`const path path` and the reset of this file.,0,0,0,0.9888906478881836,0.993970274925232,0.9938551783561708,0.0,accept,unanimous_agreement
796030360,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796266396,15915,declaration style..,0,0,0,0.9851481914520264,0.9874873161315918,0.9933316111564636,0.0,accept,unanimous_agreement
796267102,15915,looks like `tostring()` since we cannot be certain what processing follows it.,0,0,0,0.9832531809806824,0.9773659706115724,0.990137219429016,0.0,accept,unanimous_agreement
796267544,15915,ditto. and in all other `logmsg()` instances.,0,0,0,0.972288191318512,0.9376489520072936,0.9729940891265868,0.0,accept,unanimous_agreement
796268963,15915,`tostring()`,0,0,0,0.985721230506897,0.9884002208709716,0.9942939877510072,0.0,accept,unanimous_agreement
796269450,15915,declaration style seems you never review it again your selves after you code it...,0,0,0,0.5597429871559143,0.8637878894805908,0.9913853406906128,0.0,accept,unanimous_agreement
796270696,15915,you sure this logic is correct? i would stick with the previous logic to be safe.,0,0,0,0.9821732044219972,0.98654305934906,0.986333668231964,0.0,accept,unanimous_agreement
796271389,15915,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
796475925,15915,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
796540291,15915,"then we have to compare them in ""case sensitive"" way, otherwise user won't be able to change only case of some path element.",0,0,0,0.9876762628555298,0.970908522605896,0.9846320152282716,0.0,accept,unanimous_agreement
796678071,15915,yes. it was mistakenly assigned twice. [a link],0,0,0,0.9681954383850098,0.9611056447029114,0.9842823147773744,0.0,accept,unanimous_agreement
797405001,15915,it is never used.,0,0,0,0.8970534801483154,0.8849404454231262,0.971515417098999,0.0,accept,unanimous_agreement
797405796,15915,applied.,0,0,0,0.9808796048164368,0.9900319576263428,0.9775310158729552,0.0,accept,unanimous_agreement
797406996,15915,yes. except `path() = default;`. done.,0,0,0,0.9819841980934144,0.9671829342842102,0.991114377975464,0.0,accept,unanimous_agreement
797407997,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
797410579,15915,added.,0,0,0,0.9763525128364564,0.9822506308555604,0.9917559623718262,0.0,accept,unanimous_agreement
797436089,15915,"ok, although i don't treat it as a type indication, so it's ok for me to have it as is.",0,0,0,0.9733679890632628,0.9706789255142212,0.973053216934204,0.0,accept,unanimous_agreement
797438203,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
797500340,15915,"accidentally hooked by ""find and replace"". reverted.",-1,0,0,0.5977872014045715,0.9629381895065308,0.6485914587974548,0.0,accept,majority_agreement
797510991,15915,"initially i returned ""native"" paths only where `tonative()` was used explicitly. should i change it in entire api to return ""native"" paths? is it generally a good idea to make api results dependent on the server platform? i would use uniform paths instead.",0,0,0,0.9887481927871704,0.9916425943374634,0.9916879534721376,0.0,accept,unanimous_agreement
797519150,15915,you're doing it better. probably because it's not a problem for me to have indirect inclusions (at least for such global things).,0,0,1,0.8969793915748596,0.9732072949409484,0.5574631094932556,0.0,accept,majority_agreement
797526165,15915,"""invalid"" torrentinfo returns empty list (as it was even previously). so we don't check it almost anywhere in the code.",0,0,0,0.9709222316741944,0.9723462462425232,0.98921799659729,0.0,accept,unanimous_agreement
797528743,15915,"ok, if you don't care about the excessive search for separators that it will cause.",0,0,0,0.8346639275550842,0.6491315960884094,0.8764942288398743,0.0,accept,unanimous_agreement
797531353,15915,i've done this several times... such little things usually go unnoticed in their own code. especially when there are a hell of a lot of changes that have already been revised and changed several times.,-1,-1,0,0.9529960751533508,0.9388033747673036,0.6995364427566528,-1.0,accept,majority_agreement
797537047,15915,"these data (as well as many other similar data related to the gui state) are saved to the main configuration file only due to a very long-ago mistake that there is still no one to fix. they are not really intended for the user. if someone still climbs here, he should be scared of other things, not ""non-native"" paths. why should we apply unnecessary transformations in such cases?",0,-1,0,0.679816722869873,0.6203806400299072,0.5231797099113464,0.0,accept,majority_agreement
797543734,15915,"it makes code cleaner, imo. why all caller code should care of what platform is supported currently? it should implement its (upper level) logic. if, for example, support of detecting network file systems on haiku is added, it will affect only the place that directly depends on it. this change is in this pr only because i made it along the way.",0,0,0,0.907686710357666,0.9696210026741028,0.8299397826194763,0.0,accept,unanimous_agreement
797548571,15915,"`parent` is used in the meaning of the `direct parent`. this method checks for any base path, i.e. if other is `/home/john/music/jazz` it will return true for `/home/john/music`, `/home/john`, `/home` and `/`.",0,0,0,0.9878117442131042,0.9946609139442444,0.9928693175315856,0.0,accept,unanimous_agreement
797554168,15915,"it is editable but **it isn't intended** to be edited in a regular way. it is for internal use by torrent applications. so why to do it less efficiently? p.s. any binary file ""is editable with an editor"" (hex or even text one) but we don't care...",-1,0,0,0.905125081539154,0.9435502290725708,0.6850886940956116,0.0,accept,majority_agreement
797558368,15915,"filename component of path is still path, isn't it? we can easily do something like `path path = somedirpath / otherpath.filename();` ok. i'll try to check whether it add other confusing code instead.",0,0,0,0.986078679561615,0.9888864159584044,0.9904677271842957,0.0,accept,unanimous_agreement
797563008,15915,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
797566671,15915,`path::findrootfolder` returns single-element path. why to search separators in it?,0,0,0,0.9857528805732728,0.9945114850997924,0.994341254234314,0.0,accept,unanimous_agreement
797568333,15915,it was redesigned several times even before i published pr... it was something like `const auto newfilepath = path::fromstring(qstring(p->new_name()));` previously.,0,0,0,0.9836187958717346,0.9879518151283264,0.9930312633514404,0.0,accept,unanimous_agreement
797571221,15915,the logic is just adjusted to fit using new path class.,0,0,0,0.9868339896202089,0.9910123348236084,0.994653582572937,0.0,accept,unanimous_agreement
797648275,15915,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
797650107,15915,included here.,0,0,0,0.9800091981887816,0.9880446791648864,0.994355857372284,0.0,accept,unanimous_agreement
799387884,15915,"in this case i think so, because it is referring to some file on the server. for this pr it should just preserve the original outcomes. so for all other non related, maybe later.",0,0,0,0.9813275933265686,0.986250638961792,0.9845556616783142,0.0,accept,unanimous_agreement
799397970,15915,"imo the main reason is consistency, that is, the users saw the paths on gui is saved the same (native separators) on file.",0,0,0,0.9885907769203186,0.9898215532302856,0.987559735774994,0.0,accept,unanimous_agreement
799402196,15915,"i see. then i would suggest `bool path::hasancestor(const path &other)`. to elaborate a bit. imo a class function should have `this` as the protagonist and do comparisons with others, e.g. it should provide usage like `path(""/main/a/b/c"").hasancestor(path(""/others""))`.",0,0,0,0.9819064140319824,0.9927085041999816,0.979414165019989,0.0,accept,unanimous_agreement
799407445,15915,imo file name is more (naturally) like a string. that string can become `path` but then it gains additional meaning: it is a relative path to a filename. so i would let users explicitly convert to `path` from string if they really need it.,0,0,0,0.9825947880744934,0.9863532781600952,0.9877419471740724,0.0,accept,unanimous_agreement
799413215,15915,i still hold the same viewpoint: `data()` is a shortcut and it should only be used if the following code is able to consume it. otherwise (or if uncertain) it is always `tostring()`. i consider this way to be safe even if it is sacrificing some performance.,0,0,0,0.9674835801124572,0.9781664609909058,0.9729299545288086,0.0,accept,unanimous_agreement
799415200,15915,even if file is intended for internal use?,0,0,0,0.985087275505066,0.9777477383613586,0.9929435849189758,0.0,accept,unanimous_agreement
799417676,15915,"on the other side, user might want it in uniform style so they can transfer over different os... so leave it as is.",0,0,0,0.9860059022903442,0.9735959768295288,0.9904026985168456,0.0,accept,unanimous_agreement
799418327,15915,"in fact, it even fixes a bug in the old logic, since it explicitly uses `.!qb` extension, not just its length.",0,0,0,0.9466999769210817,0.9935911893844604,0.987280547618866,0.0,accept,unanimous_agreement
799426700,15915,"the `oldparentpath` is already a full path, isn't? so is `actualstoragelocation()` still needed?",0,0,0,0.9871975183486938,0.994907557964325,0.9943998456001282,0.0,accept,unanimous_agreement
799439217,15915,"no, it isn't. why did you think so?",0,0,0,0.7275925278663635,0.8924512267112732,0.9847933650016784,0.0,accept,unanimous_agreement
799441211,15915,"currently it is unfortunate the file of the context here is still for manual editing... if the file is truly not intended for hand editing, then it would not matter.",-1,-1,-1,0.968722641468048,0.9665939807891846,0.9603368639945984,-1.0,accept,unanimous_agreement
799449552,15915,never mind.,0,0,0,0.8687645196914673,0.6564270257949829,0.958609402179718,0.0,accept,unanimous_agreement
805550642,15915,this causes performance regression during startup ![a link],0,0,-1,0.9673731327056884,0.812523365020752,0.7214703559875488,0.0,accept,majority_agreement
805619425,15915,#16444 should improve it.,0,0,0,0.977333962917328,0.9847465753555298,0.9873316884040833,0.0,accept,unanimous_agreement
805641875,15915,"is it necessary to use `qmimedatabase::suffixforfilename` for extension? maybe leave that to the user if they require a mime base suffix, they can call it by themselves.",0,0,0,0.9885053634643556,0.9951807260513306,0.9941694736480712,0.0,accept,unanimous_agreement
85654958,5877,coding style is camelcase but it doesn't matter in this case because this method seems to be changed/removed in #5310. if you could change it back to avoid rebasing #5310 that would be great.,1,0,0,0.7591495513916016,0.9572527408599854,0.7786752581596375,0.0,accept,majority_agreement
85654979,5877,spaces around `<`,0,0,0,0.9766470193862916,0.9896618127822876,0.9904631972312928,0.0,accept,unanimous_agreement
85655067,5877,space before `//` and in the next line. typo `bannig`,0,0,0,0.9866158962249756,0.9922417402267456,0.9684911966323853,0.0,accept,unanimous_agreement
85655179,5877,parenthesis around `(m_filterpath != newfilterpath)` for clarity. there is no rule for this but i was corrected once if i remember correctly.,0,0,0,0.98646879196167,0.98829984664917,0.9909313917160034,0.0,accept,unanimous_agreement
85655636,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
85655640,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
85655641,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
85655642,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
88067085,5877,"giving `0` by default is bad style imo, because everyone just ignore it. you should make use of it when you instantiate the class/variable.",-1,-1,-1,0.9563079476356506,0.7891656160354614,0.9688539505004884,-1.0,accept,unanimous_agreement
88068089,5877,"headers are sorted alphabetically, move up 1 line",0,0,0,0.9820833206176758,0.9814064502716064,0.99497789144516,0.0,accept,unanimous_agreement
88071948,5877,`const` for qstringlist is redundant. you should instead: [code block],0,0,0,0.9813789129257202,0.9916296601295472,0.9806758165359496,0.0,accept,unanimous_agreement
88224504,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
88224785,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
88229827,5877,"can not give any rationale except that it is autogenerated code by qt creator. and of course i ignored that parameter when instantiated object that class. i read documentation and and found that null parameter is fully legal for qdialog, but creates distinct taskbar entry for window of dialog. so now i pass a parent when creating an object. but i not sure, should i change autogenerated cod of constructor declaration. also i doubt that this dialog will be used by somebody more somewhere else.",-1,0,0,0.5409604907035828,0.934750199317932,0.8858275413513184,0.0,accept,majority_agreement
91743774,5877,redundant variable.,0,-1,0,0.941145956516266,0.5446004271507263,0.87708580493927,0.0,accept,majority_agreement
91743958,5877,redundant variable.,0,-1,0,0.941145956516266,0.5446004271507263,0.87708580493927,0.0,accept,majority_agreement
91744491,5877,"""...may not be empty.""",-1,0,0,0.5652176141738892,0.977900207042694,0.9771642088890076,0.0,accept,majority_agreement
91744730,5877,why not `for`?,0,0,0,0.9641202688217164,0.98881733417511,0.985782265663147,0.0,accept,unanimous_agreement
91745213,5877,`modified` → `m_modified`,0,0,0,0.9851933121681212,0.9905933737754822,0.9937293529510498,0.0,accept,unanimous_agreement
91745432,5877,suggest `options_banlist` → `banlistoptions` change.,0,0,0,0.9876370429992676,0.9937968254089355,0.9953550100326538,0.0,accept,unanimous_agreement
91746275,5877,"the text says that you've banned a list. perhaps, ""manually banned ips"" would be better?. otherwise, please provide disambiguation for translators (what the list is).",0,0,0,0.9825631380081176,0.982326090335846,0.9935279488563538,0.0,accept,unanimous_agreement
91746873,5877,"same here (banned list of ips, but not list of banned ips) .",0,0,0,0.975307822227478,0.990532636642456,0.9894379377365112,0.0,accept,unanimous_agreement
91747410,5877,"what is a ""normal ip""? actually, what is an ""unnormal ip""? :)",1,1,1,0.812972366809845,0.9191675782203674,0.9730826616287231,1.0,accept,unanimous_agreement
91748236,5877,please format the initialisation list as follows: [code block],0,0,0,0.9871466159820556,0.9899068474769592,0.9955539107322692,0.0,accept,unanimous_agreement
91748333,5877,redundant comment,0,0,-1,0.9124321341514589,0.6202253103256226,0.8920683264732361,0.0,accept,majority_agreement
91748784,5877,"`qmessagebox::warning(..., tr(""error""),...)` so, is this a warning or an error?",0,0,0,0.952453315258026,0.992869794368744,0.9936254024505616,0.0,accept,unanimous_agreement
91749398,5877,"everywhere except this title you use ""manual"" term and only here ""user"". why?",0,0,0,0.9536088109016418,0.9162726402282716,0.9899166226387024,0.0,accept,unanimous_agreement
91753994,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
91754210,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
91757003,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
91757023,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
91761817,5877,"yes, it's warning, not error. also i reworded message, please check.",0,0,0,0.9768224954605104,0.9627148509025574,0.9859527349472046,0.0,accept,unanimous_agreement
91762472,5877,"**foreach** is widely used in this program, what is wrong with it? different lists and foreach iteration looks much better than c++ iterator style for()",0,0,0,0.9574552178382874,0.9810585975646972,0.9382916688919068,0.0,accept,unanimous_agreement
91762506,5877,"the message is even more cryptic now, as far as i'm concerned. maybe it would be better to disable the button when the text box is empty?",0,0,0,0.6952257752418518,0.7332597970962524,0.9173856377601624,0.0,accept,unanimous_agreement
91763578,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
91763841,5877,"also, why don't we check the input string here, in the dialog? you may use a validator and get a cleaner ui in addition to a more elegant code.",0,0,0,0.9854092001914978,0.9920018911361694,0.9925267696380616,0.0,accept,unanimous_agreement
91764191,5877,i meant the c++11 range-based `for`.,0,0,0,0.9820625185966492,0.9901502132415771,0.9915046095848083,0.0,accept,unanimous_agreement
91765168,5877,"fix type to ""manually banned ip list""",0,0,0,0.9845566749572754,0.9791194796562196,0.9908456206321716,0.0,accept,unanimous_agreement
91766147,5877,"may be ""list of banned ips"" would be better wording? my english skill is not perfect.",-1,-1,0,0.8797832131385803,0.5113656520843506,0.7424012422561646,-1.0,accept,majority_agreement
91768666,5877,this one is semantically correct.,0,0,0,0.9812254309654236,0.9595423340797424,0.99038165807724,0.0,accept,unanimous_agreement
91833936,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
91833939,5877,"it is consequence of ""copy paste"" from provided here mockups :) fixed.",0,1,1,0.5676794052124023,0.9940025210380554,0.9916790127754213,1.0,accept,majority_agreement
91835303,5877,"reworded to ""list of banned ip addresses"".",0,0,0,0.9642773270606996,0.9935640692710876,0.9898509979248048,0.0,accept,unanimous_agreement
91835378,5877,"normal ip == not malformed. anyway it was redundant comment, i remove it.",0,0,0,0.9131363034248352,0.9068384766578674,0.9813659191131592,0.0,accept,unanimous_agreement
91849185,5877,"i read some comparisons and it looks like for() gives slightly more perfomance than qt foreach(), so i change it to for()",0,0,0,0.9715111255645752,0.9784274101257324,0.9887025356292723,0.0,accept,unanimous_agreement
91853972,5877,"following your logic we should also rename existing methods like `session::getbannediplist()` to something like `session::getlistofmanuallybannedipadresses()`. it will be fully semantically correct, but i'm not sure that such rename will resolve more problems than create. what other men would say?",0,0,0,0.7250247001647949,0.9584181904792786,0.9650891423225404,0.0,accept,unanimous_agreement
91854414,5877,renamed class name. should i also rename file names?,0,0,0,0.9879767298698424,0.993002712726593,0.9955626726150512,0.0,accept,unanimous_agreement
91855392,5877,"it would be good. follow the scheme of the surrounding files, please.",0,1,1,0.5200400948524475,0.6950491070747375,0.8475174903869629,1.0,accept,majority_agreement
91855544,5877,"agree with you: ""list"" is unneeded in `getbannediplist()` because the function signature encodes this piece of information (in the return type). the same is true for the setter. moreover, this project does not use ""get"" prefix. hence i would make function signatures as follows: `qstringlist bannedips() const; void setbannedips(const qstringlist &ips); `",0,0,0,0.9861978888511658,0.9949100613594056,0.9809753894805908,0.0,accept,unanimous_agreement
91856499,5877,"i will do it later, because it will screw up all reviews here.",-1,0,-1,0.9325751662254332,0.9356446266174316,0.533760666847229,-1.0,accept,majority_agreement
91857143,5877,"in ""saving list"" pair the gerund does not pose an action. an article is needed between them, i.e. ""saving the list"". consider ""'%1' is not a valid ip address and was rejected while applying the list of banned addresses.""",0,0,0,0.9839282035827636,0.977870225906372,0.9931678175926208,0.0,accept,unanimous_agreement
91857246,5877,"do not know about performance side of this comparison; my point is that all the code tools like debuggers, formatters, etc. understand what `for()` is out of the box, but you have to teach them (if it is possible) what a custom macro is.",0,0,0,0.9300395250320436,0.9723931550979614,0.9658506512641908,0.0,accept,unanimous_agreement
91940777,5877,"accepted your variant, fixed.",0,0,0,0.9802164435386658,0.9740189909934998,0.970207929611206,0.0,accept,unanimous_agreement
91947708,5877,"reworded message again. also added validator, so ""ban ip"" is disabled until valid ip address is entered.",0,0,0,0.9879234433174132,0.9937182664871216,0.9954283237457277,0.0,accept,unanimous_agreement
91961879,5877,i got curios and roughly counted getsmth() style function declarations. `./src/base/preferences.h` have 71 such declarations and whole project nearly 179. looks like the train has left the station.,0,0,0,0.906444787979126,0.9839284420013428,0.9283559918403624,0.0,accept,unanimous_agreement
91987289,5877,"qbt follows qt style, so, please, remove ""get"" at least.",0,0,0,0.987565815448761,0.9929187893867492,0.99091774225235,0.0,accept,unanimous_agreement
91990260,5877,"""dialog"" → ""manually banned ips"" or whatever",0,0,0,0.9527748227119446,0.9767205119132996,0.9713773727416992,0.0,accept,unanimous_agreement
91990826,5877,"remove ""get"", and maybe remove ""list"" too.",0,0,0,0.9845538139343262,0.9922454953193665,0.9943504929542542,0.0,accept,unanimous_agreement
91991226,5877,camelcase,0,0,0,0.9789125323295592,0.9691299796104432,0.9723753333091736,0.0,accept,unanimous_agreement
91992605,5877,"""arg1""? why ""1""? and i'm curious why not a `qvalidator`? a validator can prevent entering a wrong text, and that is a waybetter than checking what is wrong with the input.",0,0,0,0.9644473791122437,0.969653844833374,0.9787148237228394,0.0,accept,unanimous_agreement
92396444,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92396825,5877,renamed to `bannedips()`,0,0,0,0.983357071876526,0.9928291440010072,0.9955638647079468,0.0,accept,unanimous_agreement
92397101,5877,also renamed `setbannediplist()` --> `setbannedips()`,0,0,0,0.9864667057991028,0.9927207231521606,0.9951440095901488,0.0,accept,unanimous_agreement
92399060,5877,oops. fixed and removed redundant group title. ![a link],-1,-1,-1,0.9215654730796814,0.9277209639549256,0.9951435327529908,-1.0,accept,unanimous_agreement
92407770,5877,"1. renamed arg1 to ip. 2. qregexpvalidator does not fits good here. custom validator will be just more complicated wrapping around `libtorrent::address::from_string` than my code. also i dislike ui designs when input field suddenty drop my input when it does not pass intermediate validator check. it is enough that action button is disabled while there is wrong value in input, but edit is not blocked. use case: i copy ip that i want to ban from somewhere and also copied some letters to the left of ip. (may be i was in a hurry, or there is selection problems.) i want to paste it into qbittorent, cut off wrong letters and ban it, but ta-da - validator does not allow me to paste because is will be wrong value, and it force me to use intermediate text editor paste-strip-copy steps. also don't forget about maintaining complicated custom validator code, and such principles like kiss and yagni",-1,-1,-1,0.979284405708313,0.898934543132782,0.774467945098877,-1.0,accept,unanimous_agreement
92408917,5877,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
92410194,5877,"camelcase, please (""bannedips"")",0,0,0,0.985373318195343,0.9819130897521972,0.9909332990646362,0.0,accept,unanimous_agreement
92410621,5877,[code block] if you like (just to save a line).,0,0,0,0.9858171343803406,0.9849948287010192,0.9944920539855956,0.0,accept,unanimous_agreement
92411311,5877,what if `bannediplis` contains this ip already? related question: shouldn't `bannediplist` be sorted?,0,0,0,0.978337824344635,0.9918922185897828,0.9930328130722046,0.0,accept,unanimous_agreement
92411533,5877,redundant variable,0,0,0,0.977111518383026,0.7491233944892883,0.9450158476829528,0.0,accept,unanimous_agreement
92411941,5877,"`static`? or move it out of the class completely. also, a bit of code earlier would look clearer if you rename this function: [code block]",0,0,0,0.9856001138687134,0.9948776960372924,0.9915292263031006,0.0,accept,unanimous_agreement
92412536,5877,"again can't understand why ""list of"" is here.",0,0,-1,0.7809730768203735,0.7934181094169617,0.8112075328826904,0.0,accept,majority_agreement
92415092,5877,camelcase (banlistbutton),0,0,0,0.9884449243545532,0.9877763986587524,0.988819420337677,0.0,accept,unanimous_agreement
92417406,5877,"are you a member of list admirers society? :) seriously, do you think ""list"" adds anything useful to the meaning of the identifier? to me it means presence of several entities only, but there is the plural form in the language exactly for that. is there anything else that i'm missing?",1,1,1,0.98049795627594,0.9925018548965454,0.9950018525123596,1.0,accept,unanimous_agreement
92418257,5877,"a caprice, perhaps, but maybe it is better to pad this to the right a bit?",0,0,0,0.975684642791748,0.9411458373069764,0.9805133938789368,0.0,accept,unanimous_agreement
92418678,5877,"may this happen? the button has to be disabled if the text is empty, right? then why the check is here?",0,0,0,0.9781442284584044,0.9753203988075256,0.992304027080536,0.0,accept,unanimous_agreement
92418959,5877,does this empty line mean something?,0,0,0,0.929393708705902,0.9845079183578492,0.9711139798164368,0.0,accept,unanimous_agreement
92608596,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92611250,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92611306,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92611393,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92611603,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92618385,5877,"is there such a society? i would like to _enlist_ in it :grinning_face_with_big_eyes:. i have put list everywhere because in my brain all processing i have coded is spinning around structured in list entities, not just scattered multiple entities. briefly, i'm working with list here, not with ips. anyway i rename it as you wish.",1,0,1,0.6803837418556213,0.7939150333404541,0.9452205300331116,1.0,accept,majority_agreement
92619054,5877,added 2 indent steps. not sure that it will survive after uncrustify run.,-1,0,0,0.6077014803886414,0.9528807997703552,0.7002403736114502,0.0,accept,majority_agreement
92619652,5877,"no, fixed it.",0,0,0,0.9457811713218688,0.9770201444625854,0.9661005139350892,0.0,accept,unanimous_agreement
92621800,5877,thank you.,1,1,1,0.6186631917953491,0.5337218642234802,0.6976000666618347,1.0,accept,unanimous_agreement
92622556,5877,"please, [code block]",0,0,0,0.9879750609397888,0.9897685050964355,0.9617014527320862,0.0,accept,unanimous_agreement
92624104,5877,"not sure about this include. there were efforts to isolate libtorrent inside of `src/base/bittorrent`. to follow that way i would add a helper function there (in fact, just move `isvalidip()`). , what do you think?",0,0,0,0.971250295639038,0.9152756333351136,0.9047457575798036,0.0,accept,unanimous_agreement
92635589,5877,"not so necessary, because this function is declared locally in cpp file. nobody should `#include *.cpp`, so it should not contaminate global namespace, if your concerns about it. also i thought about static function declaration to exclude it from linkage tables.",0,0,0,0.9785199761390686,0.9886903166770936,0.990256667137146,0.0,accept,unanimous_agreement
92636722,5877,"added static, will wait for helper function relocation decision.",0,0,0,0.9882800579071044,0.9914974570274352,0.9954432249069214,0.0,accept,unanimous_agreement
92637546,5877,"right, but doing so you are making it very clear that there is no available declaration of this function anywhere, period. i'm concerned about clear reading of the author intentions in the first place.",-1,0,-1,0.6343662738800049,0.7367686629295349,0.6524885296821594,-1.0,accept,majority_agreement
92641414,5877,"i had some thoughts about code for alternative ip addition variant, circumventing disabled ""ban ip"" button. onreturnpressed() for example. so i had not still removed this obviously redundant checks.",0,0,0,0.8211053609848022,0.9476362466812134,0.985077977180481,0.0,accept,unanimous_agreement
92643513,5877,"yes, i will implement it. but it rises question what to do with duplicates presented via webgui. may be it would be better to write that code in common save path at `session::setbannedips()` ?",0,0,0,0.9844092726707458,0.9895306825637816,0.9912830591201782,0.0,accept,unanimous_agreement
92655655,5877,read stackoverflow. folks say that static and anonymous namespace are pretty the same thing for function declaration. run grep through project and found only 1 existing anonymous namespace: `./base/preferences.cpp:727:namespace {` also found 16 static functions declarations. look like people does not care about such things. stay confused. :confused_face:,-1,-1,-1,0.971745789051056,0.9283060431480408,0.987695574760437,-1.0,accept,unanimous_agreement
92657688,5877,"this is because formatting rules for this project make it look as follows: [code block] when i grep for 'namespace$', i get 24 matches",0,0,0,0.985577404499054,0.9911147356033324,0.9936627149581908,0.0,accept,unanimous_agreement
92662728,5877,you may use `qhostaddress` to test for ip validity and suppose that it gives the same result as the function from libtorrent.,0,0,0,0.9886370301246644,0.9943785071372986,0.9942389726638794,0.0,accept,unanimous_agreement
92786485,5877,tested it. with `namespace` gcc gives better error message than `static` in case of conflict. fixed it.,0,0,0,0.9661390781402588,0.9920266270637512,0.888860821723938,0.0,accept,unanimous_agreement
92798337,5877,"sorry, i do not know what to do with the web ui. but why that stops you from making this ui better?",-1,-1,-1,0.9845949411392212,0.9889107942581176,0.9946834444999696,-1.0,accept,unanimous_agreement
92808539,5877,may i suggest [code block] ?,0,0,0,0.9872680306434632,0.9924913048744202,0.9957054257392884,0.0,accept,unanimous_agreement
92808567,5877,redundant variable,0,0,0,0.977111518383026,0.7491233944892883,0.9450158476829528,0.0,accept,unanimous_agreement
92808682,5877,"`s, qt::matchexactly` (whitespace)",0,0,0,0.9860234260559082,0.9926884174346924,0.9940202236175536,0.0,accept,unanimous_agreement
92808855,5877,"""the entered..."" should be clearer, as to me.",0,0,0,0.9798909425735474,0.9720765948295592,0.9781873226165771,0.0,accept,unanimous_agreement
92808933,5877,why do we need this line?,0,0,0,0.9590628147125244,0.9714638590812684,0.950308620929718,0.0,accept,unanimous_agreement
92809176,5877,is this a leftover?,0,0,0,0.9356472492218018,0.980036199092865,0.9889707565307616,0.0,accept,unanimous_agreement
92809531,5877,the return value is not used so far. wip?,0,0,0,0.9893720746040344,0.97128027677536,0.9935635328292848,0.0,accept,unanimous_agreement
92921591,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92921593,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92921617,5877,"hmm, unscrustify does not fix it automatically. fixed .",0,0,0,0.9320435523986816,0.9268012642860411,0.9772670269012452,0.0,accept,unanimous_agreement
92921730,5877,"`addr` is not a redundant variable. for example `qhostaddres(""1.2"").tostring()` returns ""1.0.0.2"". also ""0:0:0:0:0::1"" -> ""::1"". e.g. there is probability of change of the ip string to normalized state using such a trick.",0,0,0,0.9867233633995056,0.9937446713447572,0.9933527708053588,0.0,accept,unanimous_agreement
92921830,5877,yes. fixed,0,0,0,0.9720833897590636,0.95016211271286,0.961760640144348,0.0,accept,unanimous_agreement
92922025,5877,it's leftover. fixed.,0,0,0,0.9819512367248536,0.905310034751892,0.9888890981674194,0.0,accept,unanimous_agreement
92922210,5877,"i am in doubt. your approach will return false for a ""0.0.0.0"" string, but mine will return true. would we like to allow user ban ""0.0.0.0"" or to disallow ?",0,0,-1,0.6979824900627136,0.5156169533729553,0.7190466523170471,0.0,accept,majority_agreement
92922463,5877,"""0.0.0.0"" may not point to any host eligible for banning. why would one want to ban it?",0,0,0,0.7534538507461548,0.963892936706543,0.9785691499710084,0.0,accept,unanimous_agreement
92922475,5877,"thanks, i will look into it.",1,1,1,0.6958784461021423,0.5296292304992676,0.8162213563919067,1.0,accept,unanimous_agreement
92922619,5877,`#include `,0,0,0,0.9797579050064088,0.9877738356590272,0.9928992986679076,0.0,accept,unanimous_agreement
92922627,5877,`#include `,0,0,0,0.9797579050064088,0.9877738356590272,0.9928992986679076,0.0,accept,unanimous_agreement
92922632,5877,[code block] ? yet `isnull()` check seems to me to be more appropriate.,0,0,0,0.9873054027557372,0.9915863275527954,0.992883324623108,0.0,accept,unanimous_agreement
92925078,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92925184,5877,autocomplite let me down. fixed.,0,-1,-1,0.9831961393356324,0.7480359673500061,0.9811115860939026,-1.0,accept,majority_agreement
92925189,5877,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
92925557,5877,"please, place it between other utils/ headers",0,0,0,0.9887312054634094,0.9894543886184692,0.9949653744697572,0.0,accept,unanimous_agreement
92925564,5877,"please, place it between other utils/ sources",0,0,0,0.988255500793457,0.9898582100868224,0.9939699172973632,0.0,accept,unanimous_agreement
92934179,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92934180,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
92941018,5877,"i'm really sorry for being such a nasty reviewer, but you misplaced this by one line, so move it one line downward, please (it has to be after misc.cpp, just like you did it with the header file).",-1,-1,-1,0.9896405339241028,0.9915804266929626,0.9939351677894592,-1.0,accept,unanimous_agreement
92941634,5877,"fixed. btw, what to do in case of gui.pri, where i have added files too, but alphabet order is already broken?",0,0,0,0.9868104457855223,0.9873784184455872,0.971129298210144,0.0,accept,unanimous_agreement
92941805,5877,"you do not need to fix this unless you want to. if so, leave the fix in its own commit, please.",0,0,0,0.9755975008010864,0.9839259386062622,0.9908602237701416,0.0,accept,unanimous_agreement
93216137,5877,redundant variable.,0,-1,0,0.941145956516266,0.5446004271507263,0.87708580493927,0.0,accept,majority_agreement
93216880,5877,"i would put the intention of this conversion here, e.g. (my imagination of the author's idea): ```c++ qstring s = qhostaddress(ip).tostring(); // the same ipv6 addresses could be written in different forms; qhostaddress::tostring() result format follows rfc5952; thus we avoid duplicate entries pointing to the same address",0,0,0,0.9806169271469116,0.9929105639457704,0.9921936988830566,0.0,accept,unanimous_agreement
93242378,5877,accept it including comment.,0,0,0,0.9854984283447266,0.9832348823547364,0.9885711073875428,0.0,accept,unanimous_agreement
97159338,5877,leave a license notice. copy one from our files. and adjust your name/year/email.,0,0,0,0.9816747307777404,0.9897834658622742,0.9948768019676208,0.0,accept,unanimous_agreement
97159480,5877,leave a license notice. copy one from our files. and adjust your name/year/email.,0,0,0,0.9816747307777404,0.9897834658622742,0.9948768019676208,0.0,accept,unanimous_agreement
97159732,5877,"disregarding the comment about license, is this really useful? why not use it directly?",0,0,0,0.9432755708694458,0.9521307349205016,0.9847901463508606,0.0,accept,unanimous_agreement
97160026,5877,no need for the include just forward declare it(and include the header in the .cpp) forwards declare it this way: [code block],0,0,0,0.9889267683029176,0.9929511547088624,0.9953972697257996,0.0,accept,unanimous_agreement
97160231,5877,"unless, you copied code from some other place in our repo, dumez isn't a contributor in this file.",0,0,0,0.9745309948921204,0.9876839518547058,0.9872395396232604,0.0,accept,unanimous_agreement
97160566,5877,same here,0,0,0,0.982987642288208,0.9628711938858032,0.99204421043396,0.0,accept,unanimous_agreement
97161241,5877,"i know that you need the underscores for automatic connection, but you don't need them for the middle part. eg `on_pb_banip_clicked()` -> `on_pbbanip_clicked()` also as a convention we use ""button"" to refer to pushbuttons so the above become `on_buttonbanip_clicked()`",0,0,0,0.9828094840049744,0.9931071400642396,0.9934701919555664,0.0,accept,unanimous_agreement
97163415,5877,`qdialog::accept();`,0,0,0,0.9793815612792968,0.9909698367118835,0.99244624376297,0.0,accept,unanimous_agreement
97164032,5877,this function is private and not used somewhere else. so convert it to a private slot which doesn't take parameter. just query the ip text inside this function. and connect it manually in the constructor if you don't want to rename it for autoconnecting.,0,0,0,0.987441897392273,0.9912365674972534,0.9945547580718994,0.0,accept,unanimous_agreement
97164080,5877,redundant. see my comment above.,0,-1,0,0.80003821849823,0.8006905317306519,0.96635103225708,0.0,accept,majority_agreement
97164629,5877,"as i said above this wrapper isn't necessary, and you don't obtain any space from it. also in this particular case in this function you create 2 temporary qhostaddress objects from the same data. one that checks for validity and one that asks a string representation. you should use the same object to do it.",0,0,0,0.9876179695129396,0.9880401492118835,0.991655707359314,0.0,accept,unanimous_agreement
97164889,5877,also conventionally we prefix qlineedit names with `txt`. so `ed_ip` -> `txtip`.,0,0,0,0.9878937602043152,0.9947417974472046,0.9949659705162048,0.0,accept,unanimous_agreement
97165447,5877,`txtip`,0,0,0,0.98462176322937,0.9871097803115844,0.990711271762848,0.0,accept,unanimous_agreement
97165504,5877,`buttonbanip`,0,0,0,0.9825133681297302,0.9912277460098268,0.988079845905304,0.0,accept,unanimous_agreement
97165581,5877,`buttondeleteip`,0,0,0,0.982262909412384,0.9899147748947144,0.979999542236328,0.0,accept,unanimous_agreement
97165854,5877,why this newline?,0,0,0,0.8575465679168701,0.9273419380187988,0.9698352217674256,0.0,accept,unanimous_agreement
97165953,5877,`manually banned ips`,0,0,0,0.964813768863678,0.9912049174308776,0.9924276471138,0.0,accept,unanimous_agreement
97166225,5877,/qbittorrent-frequent-contributors should we join the multiple ips(ipv4+ipv6) using newlines or some other delimiter like `|`? do we have any informal convention on this?,0,0,0,0.9846453070640564,0.991115927696228,0.9929051995277404,0.0,accept,unanimous_agreement
97166366,5877,`manually banned ips`,0,0,0,0.964813768863678,0.9912049174308776,0.9924276471138,0.0,accept,unanimous_agreement
97167297,5877,"due to this we must ensure that the lists are always sorted. i would suggest to do this in the widget for `newlist`, but his may come from the web api too. so `newlist` must be sorted here first. `m_bannedips` must be sorted during loading. the type of `m_bannedips` is of `cachedsettingvalue<>`. this template takes a lamda in the constructor as an argument to manipulate the loaded data. if you can't figure out what to do sort it, then leave a message and i'll help you. (or some other one).",0,0,0,0.9778072237968444,0.98441743850708,0.986754596233368,0.0,accept,unanimous_agreement
97167527,5877,why not use qhostaddress like you do in the widget?,0,0,0,0.9689489006996156,0.9910737872123718,0.991837203502655,0.0,accept,unanimous_agreement
97167961,5877,"`""%1 is not a valid ip and was rejected while applying the list of banned ips.""`",0,0,0,0.9474573135375975,0.9809747934341432,0.970790684223175,0.0,accept,unanimous_agreement
97168117,5877,`log::warning`,0,0,0,0.976729691028595,0.988585650920868,0.7750797867774963,0.0,accept,unanimous_agreement
97171540,5877,"unless i am mistaken the above 2 lines are useless. all they do is re-parse the ip_filter file and apply it. the new `bannedips` aren't applied. this is done in `session::processbannedips()` which isn't called. but it isn't enough to call it here and be done with it. there is subtle bug in this whole logic. consider the following: 1. the logic of `session::processbannedips()` is to ask **libtorrent** for the current filter and then append to it the bannedips. 2. user has banned 3 ips. 3. edits the list, removes one and adds two more. 4. due to the logic of `session::processbannedips()` we won't unban the deleted ip. i have a proposal on how to resolve this: 1. if `newlist` and `m_bannedips` are different, then find the difference(what was deleted from m_bannedips). 2. extend `session::processbannedips()` to take a qstringlist argument with a default value of an empty list. 3. then inside there, if the list isn't empty apply the rules for that list with `0` instead of `libt::ip_filter::blocked` as a flag.",0,-1,0,0.82728511095047,0.5894882678985596,0.8505847454071045,0.0,accept,majority_agreement
97194992,5877,"if i deabbreviate your version, it sounds like a ""manually banned internet protocols"". it looks bad. i know that for a network programmer ""ip"" and ""ip address"" became kind of synonyms, but it is different things. of course, if your insist, i will change this name to whatever you want. but we already have done several iterations of renaming with __evsh__ and __thalieht__.",-1,-1,-1,0.9776845574378968,0.959635317325592,0.983096957206726,-1.0,accept,unanimous_agreement
97195171,5877,"i had a plan to implement additional filtering in `session::setbannedips()` and this function `isvalidip()` shoud be useful there. it was a cause to create net.cpp and move only one function there. and at that time `isvalidip()` was more complicated. it happened later to became so simple, thanks to __evsh__ .",0,0,0,0.8698336482048035,0.5719757676124573,0.9015097618103028,0.0,accept,unanimous_agreement
97195184,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195197,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195275,5877,"fixed, but i think it is kind of a dirty hack and premature optimization (which is a root of all evil (c) ).",-1,-1,-1,0.9522272944450378,0.9186355471611024,0.900127649307251,-1.0,accept,unanimous_agreement
97195280,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195473,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195475,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195480,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195494,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195498,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195653,5877,"i argued upped - it is ""protocol"" vs ""address"" choice. i obviously prefer ""address"".",0,0,0,0.9642101526260376,0.9387540817260742,0.9857091903686525,0.0,accept,unanimous_agreement
97195685,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97195784,5877,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
97197152,5877,"so, now which is it? i mean now that you simplified it, do you still think it will be useful as wrapping one thing only?",0,0,0,0.9823771715164183,0.9534991383552552,0.9909181594848632,0.0,accept,unanimous_agreement
97197159,5877,actually we do this to improve compilation times.,0,0,0,0.9816189408302308,0.9852243661880492,0.9912078380584716,0.0,accept,unanimous_agreement
97197176,5877,ok i understand. then feel free to add address/addresses to my proposed string changes.,0,0,0,0.9635775089263916,0.8701938986778259,0.9486123323440552,0.0,accept,unanimous_agreement
97197216,5877,ok. but you have a leftover backtick after the percentage sign.,0,0,0,0.985404908657074,0.9687527418136596,0.9884470105171204,0.0,accept,unanimous_agreement
97199850,5877,deleted `banlistoptions::banip()` and moved all functionality to `banlistoptions::on_buttonbanip_clicked()`,0,0,0,0.9842995405197144,0.994690477848053,0.9931402802467346,0.0,accept,unanimous_agreement
97200020,5877,it will slightly increase performance in rarely used function and considerable decrease maintainability of that code imho. so i prefer to left it as is.,0,0,-1,0.938835382461548,0.9693649411201476,0.5271360278129578,0.0,accept,majority_agreement
97200238,5877,it is unnecessary because it is done in `banlistoptions::on_txtip_textchanged()` event handler called because of `m_ui->txtip->clear();` call.,0,0,0,0.9870141744613647,0.9952006340026855,0.993547260761261,0.0,accept,unanimous_agreement
97200469,5877,"fixed. i just wonder what is a point in implicit ancestor method calling, if we already call the same method because it is not overridden in banlistoptions widget?",0,0,0,0.8617921471595764,0.8674044013023376,0.9666560292243958,0.0,accept,unanimous_agreement
97200490,5877,"fyi, qt has [a link] or if you wish use one of the std sorts...",0,0,0,0.9838659167289734,0.9767731428146362,0.9929250478744508,0.0,accept,unanimous_agreement
97200548,5877,i want it explicit so a reader can understand immediately that we call the base method.,0,0,0,0.9844756722450256,0.9877628684043884,0.988763689994812,0.0,accept,unanimous_agreement
97200877,5877,"""starting with qt 5.0, you are instead encouraged to use directly the implementations available in the stl"" [a link]",0,0,0,0.98210608959198,0.9847195148468018,0.9940715432167052,0.0,accept,unanimous_agreement
97201348,5877,"but my proposal doesn't account for one corner-case bug: 1. user has manually banned an ip that is also included in the ip filter file. 2. then he deletes it from the manually banned ips list. in my proposal step 2 would result in allowing that ip even though the ip_filter includes it(until the user restarts the application). so would it be wise, to reparse the ip_filter file, add the bannedips and set that whole list in libtorrent, discarding the old one?",0,0,0,0.947451651096344,0.9649617075920104,0.9893280863761902,0.0,accept,unanimous_agreement
97215262,5877,"i think that building ip_filter from scratch (reparse file and add manual part ) will be less error prone and more maintainable way to do it. performance penalty does not matter because it will be not frequent operation, i think.",0,0,0,0.9625602960586548,0.9471614956855774,0.9436260461807252,0.0,accept,unanimous_agreement
97892396,5877,these 2 should be moved at the top before the check: [code block] also remove the commented out lines.,0,0,0,0.988810896873474,0.9937928915023804,0.995682954788208,0.0,accept,unanimous_agreement
98333794,5877,"rewrote more code. now it double checks for inequality of lists. also added code for recreation of internal libtorrent ip filter from scratch to implement ""unban"" case. but i found that manual ban list is enforced to ipfilterlist even when ipfiltering checkbox is disabled. i sink it is an error, isn't it?",0,0,0,0.8105149269104004,0.9682172536849976,0.984650194644928,0.0,accept,unanimous_agreement
99666237,5877,"i think the correct word is ""ensure""",0,0,0,0.9843569397926332,0.9669135212898254,0.982910931110382,0.0,accept,unanimous_agreement
99672853,5877,typo: 3rd party,0,0,0,0.9707343578338624,0.9858585000038148,0.9953521490097046,0.0,accept,unanimous_agreement
99672926,5877,typo: 3rd party,0,0,0,0.9707343578338624,0.9858585000038148,0.9953521490097046,0.0,accept,unanimous_agreement
99673442,5877,it would be a good idea to sort here too. so the first check in setbannedips has actually a change to match.,0,0,0,0.8263484239578247,0.9716625809669496,0.9712460041046144,0.0,accept,unanimous_agreement
99674248,5877,here i meant to change it to `manually banned ip addresses...`,0,0,0,0.9362320303916932,0.9603130221366882,0.9849712252616882,0.0,accept,unanimous_agreement
99674394,5877,`manually banned ip addresses...`,0,0,0,0.876241147518158,0.6769124865531921,0.9770005941390992,0.0,accept,unanimous_agreement
99823791,5877,"it will give us no new functionality but only a twice sort and compare sequence. it is an unnecessary overhead. btw it is presumed here, that `iplist` is created already in sorted order, because entries in `m_ui->bannediplist` are maintained in such an order.",0,0,0,0.971088171005249,0.9830989241600036,0.9567244648933412,0.0,accept,unanimous_agreement
99827280,5877,"ok, i didn't know that.",0,-1,0,0.6057150959968567,0.6397790908813477,0.9751331210136414,0.0,accept,majority_agreement
61945041,5214,"it might make sense to make this variable static. however, i can't imagine qbt changing this environment variable at run time.",0,0,0,0.9835024476051332,0.9866076707839966,0.9830485582351683,0.0,accept,unanimous_agreement
61993662,5214,change this in runtime will cause undefined behaviour or even crash the program. so it must be initialized at program startup and do not change further.,0,0,0,0.9598888754844666,0.9833176136016846,0.94609135389328,0.0,accept,unanimous_agreement
61993875,5214,"this function, like some other (cachelocation, qdesktopservices*) , needs to be moved to another place, because they sense are not file system utilities. these are shell or environment utilities.",0,0,0,0.9867743253707886,0.9941966533660888,0.9938374161720276,0.0,accept,unanimous_agreement
61994121,5214,settingsstorage is not the only class that requires modifications. there are some other classes that store all their settings/state/data in the same place. although it may be enough changes in qdesktopservicesdatalocation for them.,0,0,0,0.9875541925430298,0.9875686764717102,0.991893708705902,0.0,accept,unanimous_agreement
62826678,5214,singleton**g**?,0,0,-1,0.5487786531448364,0.917280614376068,0.5690614581108093,0.0,accept,majority_agreement
62827506,5214,why do you leave these ugly wrappers? why shouldn't we use environment utils directly?,-1,0,-1,0.9364326000213624,0.687090277671814,0.9737663865089417,-1.0,accept,majority_agreement
62827805,5214,using namespace utils::environment is good idea!,1,1,1,0.9898636937141418,0.9720026254653932,0.9811042547225952,1.0,accept,unanimous_agreement
62830833,5214,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
62831258,5214,i don't understand this function and thus left it as is.,-1,0,0,0.5055098533630371,0.7678796648979187,0.5280901789665222,0.0,accept,majority_agreement
62843023,5214,is include guard omitted on purpose?,0,0,0,0.9866352677345276,0.9919243454933168,0.9931789636611938,0.0,accept,unanimous_agreement
62844932,5214,you can add `const` here.,0,0,0,0.9878811836242676,0.9892657995224,0.99588143825531,0.0,accept,unanimous_agreement
62846204,5214,"maybe just me, you could use a temporary qstring to hold the qdir::absolutefilepath(), will be easier to read.",0,0,0,0.9710635542869568,0.9921118021011353,0.9849985241889954,0.0,accept,unanimous_agreement
62848725,5214,"this `catch` is quite away from the `throw`s, is it a good idea to move up?",0,0,0,0.9699337482452391,0.9775470495224,0.9902222156524658,0.0,accept,unanimous_agreement
62849024,5214,can you share the reason of handling error by exceptions? i'm curious about it.,0,0,0,0.8716997504234314,0.9551440477371216,0.9823437929153442,0.0,accept,unanimous_agreement
62850051,5214,`const specialfolder folder`?,0,0,0,0.9882128834724426,0.99437415599823,0.9940897226333618,0.0,accept,unanimous_agreement
62853925,5214,two reasons: i had to signal error from `application::application()` and `main()` had many repeative calls to `displaybadargmessage()` with `return exit_failure` (that is in `catch` clause now).,0,0,0,0.971371293067932,0.9881669878959656,0.9835878014564514,0.0,accept,unanimous_agreement
62854902,5214,"no, it was a mistake. thanks!",1,1,1,0.9540600180625916,0.9931588768959044,0.9911364316940308,1.0,accept,unanimous_agreement
62855317,5214,"agree, the body of `main()` is too long, we better split it onto several functions.",0,0,0,0.9815261363983154,0.9765990376472472,0.9709591269493104,0.0,accept,unanimous_agreement
62867711,5214,"sorry, can not understand why it would be better with `const`.",-1,-1,-1,0.986788272857666,0.9865641593933104,0.993327498435974,-1.0,accept,unanimous_agreement
62872084,5214,"by reading the method signature i would suspect `folder` will somehow change to other value, but it didn't. well this is a habit of mine...",-1,-1,0,0.9786510467529296,0.6495366096496582,0.9063065052032472,-1.0,accept,majority_agreement
62873297,5214,you read the method signature incorrectly! the `folder` cannot be changed since it passed by value. the method free to change its `folder` copy.,0,0,0,0.9435765743255616,0.9500458240509032,0.5624609589576721,0.0,accept,unanimous_agreement
62877620,5214,you must have misunderstood me. i meant i suspect the local copy `folder` will somehow change to other value but it didn't.,0,0,0,0.8389216065406799,0.6139581799507141,0.9058029055595398,0.0,accept,unanimous_agreement
62880615,5214,"passing param by value as const creates hard dependency between function signature and its implementation. if in the future we will need to do some preprocessing of this param, we will either have to change the method signature or use some tricks (create additional variables, etc.).",0,0,0,0.9697297215461732,0.9896390438079834,0.9862447381019592,0.0,accept,unanimous_agreement
62881424,5214,"i hope that even with this polemic you guys will find a time to look at `qinisettings` and think whether we can drop it completely, please? :)",1,1,1,0.9698646068572998,0.995040476322174,0.99205219745636,1.0,accept,unanimous_agreement
62884040,5214,that sounds like you don't like to add `const` for pass-by-value parameters!?,-1,-1,0,0.5562648177146912,0.9243070483207704,0.7565993666648865,-1.0,accept,majority_agreement
62887959,5214,yes. except some really special cases.,0,0,0,0.9736831188201904,0.6855033040046692,0.9725445508956908,0.0,accept,unanimous_agreement
62897582,5214,it returns the cache dir path and create this directory if it doesn't exist which is overkill. so you may drop this function and use your environment utils directly.,0,0,0,0.987362027168274,0.9897084832191468,0.9574745893478394,0.0,accept,unanimous_agreement
62910921,5214,"but why it was written? apparently, somebody encountered a situation when the cache directory was missing. should we create them all the directories when we create the `specialfoldersimpl` object?",0,0,0,0.9834218621253968,0.9768224358558656,0.9929012656211852,0.0,accept,unanimous_agreement
62923227,5214,"after some thinking i like this approach. in `utils::envrironment::specialfolders::initialize()` we ensure that all paths exist in the same way as we do in `utils::envrironment::impl::specialfoldersimplcustom::specialfoldersimplcustom` and remove all the `qdir::mkpath()` calls from the individual functions. the program can not run without the config, cache, and data directories. as for the downloads directory, we already create it now anyway.",1,0,1,0.8019890189170837,0.7503876686096191,0.7307478189468384,1.0,accept,majority_agreement
63026362,5214,maybe remove `qprocessenvironment` from constructor params and us `qprocessenvironment::systemenvironment()` in constructor body? you don't like yourself the extra things in the interface!,-1,-1,0,0.9117152094841005,0.8993880748748779,0.7817760109901428,-1.0,accept,majority_agreement
63026651,5214,there are still some messages? why such verbosity? why not just `message`?,0,0,0,0.8724337220191956,0.9811670184135436,0.9842793941497804,0.0,accept,unanimous_agreement
63027199,5214,i wanted to point out that default values are loaded from environment.,0,0,0,0.9851036667823792,0.9852402210235596,0.9873062372207642,0.0,accept,unanimous_agreement
63027818,5214,"usually, exception texts are for developers, that is why.",0,0,0,0.9745709896087646,0.982377290725708,0.9905904531478882,0.0,accept,unanimous_agreement
63274950,5214,fix coding style: [code block],0,0,0,0.9888399243354796,0.9911673665046692,0.9939800500869752,0.0,accept,unanimous_agreement
63274968,5214,are you thinking that '?' on the next line adds readability?,0,0,0,0.9850430488586426,0.9922683835029602,0.9897236824035645,0.0,accept,unanimous_agreement
63274985,5214,it's better to split such long lines.,0,0,0,0.9529032111167908,0.964814305305481,0.9721008539199828,0.0,accept,unanimous_agreement
63275151,5214,i am thinking we should following the coding guidelines. i am thinking the code uniformity adds readability.,0,0,0,0.9504697918891908,0.9052268862724304,0.9673491716384888,0.0,accept,unanimous_agreement
63275227,5214,why do you love to violate the order? the copyright notice should be placed in reverse chronological order and be as follows: [code block] you can see how it's done!,0,0,0,0.7818235754966736,0.564886212348938,0.9357903599739076,0.0,accept,unanimous_agreement
63275282,5214,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
63275323,5214,why `protected`?,0,0,0,0.9778591990470886,0.9872080683708192,0.9860237836837769,0.0,accept,unanimous_agreement
63275358,5214,please add parenthesis around `s.size() >= 2` too.,0,0,0,0.9870849251747132,0.99383544921875,0.9957036375999452,0.0,accept,unanimous_agreement
63275403,5214,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
63275406,5214,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
63275441,5214,"please fix param name (use camelcase). i understand that most likely it got you inherited, but i hope it's not too much trouble you.",0,0,0,0.6126877069473267,0.679872989654541,0.8908005952835083,0.0,accept,unanimous_agreement
63275449,5214,insert blank line after.,0,0,0,0.975377321243286,0.9850791692733764,0.9836323857307434,0.0,accept,unanimous_agreement
63275515,5214,add space before `*`.,0,0,0,0.9860919117927552,0.9858312010765076,0.9939447045326232,0.0,accept,unanimous_agreement
63275550,5214,this file is an implementation of the classes in the `utils::environment` namespace. to use `using namespace utils::environment` is a good idea here.,1,0,0,0.7430080771446228,0.967972457408905,0.9260197281837464,0.0,accept,majority_agreement
63275597,5214,"base must be independent from app, gui etc.",0,0,0,0.9857343435287476,0.9840092658996582,0.9902425408363342,0.0,accept,unanimous_agreement
63275648,5214,"as i mentioned above, better to remove `utils::environment` and `utils::environment::impl` from these names, than so to be perverted here.",0,0,0,0.8939709663391113,0.9938496947288512,0.9895304441452026,0.0,accept,unanimous_agreement
63275663,5214,please don't mix initializer styles.,0,0,0,0.9049730896949768,0.8952012658119202,0.7755300402641296,0.0,accept,unanimous_agreement
63275690,5214,as **profile** is abstract class you may have public constructor here.,0,0,0,0.9887718558311462,0.991820216178894,0.9941881895065308,0.0,accept,unanimous_agreement
63275700,5214,this isn't needed.,0,0,0,0.9745149612426758,0.8838309049606323,0.9871913194656372,0.0,accept,unanimous_agreement
63276658,5214,"i might misunderstand you, but there is no public constructor because this is an abstract class.",-1,0,0,0.6571308374404907,0.6143151521682739,0.9029672145843506,0.0,accept,majority_agreement
63276688,5214,"who then can initialize this singleton, if not application?",0,0,0,0.9849510192871094,0.9934189915657043,0.9915292263031006,0.0,accept,unanimous_agreement
63276741,5214,i mean you can have public constructor in abstract class. no need extra (protected) section here.,0,0,0,0.9818222522735596,0.9676987528800964,0.9910094738006592,0.0,accept,unanimous_agreement
63276793,5214,"application initializes (almost) all current singletons, but they are independent from it. just do `initialize()` public.",0,0,0,0.9885199666023254,0.993180513381958,0.9948166012763976,0.0,accept,unanimous_agreement
63276809,5214,"you probably mean that it is impossible to create and instance with pure virtual functions anyway. imo, protected constructor in such case is better for documentation/hint reasons.",0,0,0,0.9859490394592284,0.9654889106750488,0.9881277680397034,0.0,accept,unanimous_agreement
63276861,5214,"bad idea. imo, a friend declaration, in this case, is not a dependence. consider the following example: [code block] does `a` depend on `main()`? no, it utilises the idea that there _has_ to be the `main()` function and only it can initialise the class. the same is here: everyone knows that there has to be an `application` class in qt application.",-1,-1,-1,0.98288756608963,0.9764779806137084,0.9553211331367492,-1.0,accept,unanimous_agreement
63276943,5214,"okay, probably you're right here...",0,0,0,0.9421226978302002,0.9280587434768676,0.9801694750785828,0.0,accept,unanimous_agreement
63276959,5214,glad that you agree.,1,1,1,0.8033940196037292,0.6840595006942749,0.9850735068321228,1.0,accept,unanimous_agreement
63276965,5214,"okay, if so.",0,0,0,0.9793092012405396,0.9818669557571412,0.9869158267974854,0.0,accept,unanimous_agreement
63280068,5214,": could you check these changes, please?",0,0,0,0.969832956790924,0.9874327778816224,0.9941781759262084,0.0,accept,unanimous_agreement
63280072,5214,": and here too, please.",0,0,0,0.9490360021591188,0.9659414291381836,0.9851518273353576,0.0,accept,unanimous_agreement
63280264,5214,`booloption` is an exception (with its public inheritance). but probably i just need to move `option::usage()` from `option` to `booloption`.,0,0,0,0.987551748752594,0.9937496185302734,0.989740252494812,0.0,accept,unanimous_agreement
63280543,5214,"i wasn't going to question it anymore, but i can't hold myself :p please, just for once; could you explain (convince) me that this implementation will work fine in my scenario in: [a link] i believe that is a very common usage scenario. or let me know why my scenario might be invalid.",1,1,1,0.9718831181526184,0.4745987057685852,0.98586243391037,1.0,accept,unanimous_agreement
63280594,5214,i guess you imply `--portable` switch set. things will not work in this scenario (obviously). that is why we split the portable mode onto two options.,0,0,0,0.9714869260787964,0.9903152585029602,0.984468162059784,0.0,accept,unanimous_agreement
63285751,5214,"i am confused, how do `--configuration` & `--profile` help for this scenario?",0,-1,-1,0.5864645838737488,0.7751075625419617,0.9212661385536194,-1.0,accept,majority_agreement
63288523,5214,there are four options added by this pr. two of them turn on independent features of the portable mode: `--profile` and `--relative-fastresume`. there is one option for configurations (`--configuration) and there is a shortcut`--profile`which is equal to`----profile=$exe_dir/profile`and`--elative-fastresume`. for the use-case noted by one needs just `--profile` option. those who use a portable drive for qbt and downloads need both options.,0,0,0,0.981817901134491,0.9949303269386292,0.9948167204856871,0.0,accept,unanimous_agreement
63294895,5214,"imo, ""relative fastresume"" is wrong wording.",-1,0,0,0.879096269607544,0.6221680045127869,0.7009283304214478,0.0,accept,majority_agreement
63531253,5214,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
63535447,5214,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
63761145,5214,remove this blank line.,0,0,0,0.9707592129707336,0.9746374487876892,0.9928326606750488,0.0,accept,unanimous_agreement
63762663,5214,"you seem to misunderstand the qlatin1string meaning, once you use it for the wrong purpose. re-read the documentation.",-1,-1,0,0.7711967825889587,0.4995574653148651,0.9532972574234008,-1.0,accept,majority_agreement
63763510,5214,this applies not only to this line.,0,0,0,0.9746120572090148,0.9877039194107056,0.9899354577064514,0.0,accept,unanimous_agreement
63764264,5214,the same issue with method names as in another pr.,0,0,0,0.9832809567451476,0.989461362361908,0.9716111421585084,0.0,accept,unanimous_agreement
63764772,5214,it's better to have blank line after earlier return.,0,0,0,0.9786479473114014,0.9908197522163392,0.9871288537979126,0.0,accept,unanimous_agreement
63767102,5214,"when i suggested utils::environment, i proceeded from the sense of the old functions. environment is something external to the application, but the profile is not. so you shouldn't put it to utils::environment namespace. let it be in global namespace and its files in `base/` directly.",0,0,0,0.986430525779724,0.9920433163642884,0.9923551082611084,0.0,accept,unanimous_agreement
63786509,5214,done. your turn :),1,1,0,0.9651474356651306,0.9947443008422852,0.615541398525238,1.0,accept,majority_agreement
63789555,5214,"while i certainly agree with you that the code does not fall exactly into the ""environment"" group, it makes an individual unit and i think it would be nice to highlight that by using a proper place in the files hierarchy. can not find a word right away.",0,0,0,0.9439043402671814,0.9459762573242188,0.9666603803634644,0.0,accept,unanimous_agreement
63873396,5214,ok. let's go.,0,0,0,0.94548898935318,0.8424327373504639,0.9431070685386658,0.0,accept,unanimous_agreement
63891614,5214,"sorry, , those are good names for the entity which is currently named `class profile`, but we are looking for a name for the namespace (and the corresponding directory), which contains this entity, its various implementations and other things which control how the qbt is localised within a filesystem at run-time.",-1,-1,-1,0.982756495475769,0.9872775673866272,0.9550911784172058,-1.0,accept,unanimous_agreement
63892152,5214,"sorry, i've told you already that i did read the documentation. you see, i don't understand what is wrong. either explain that or give a hint suggesting the right code fragment, please.",-1,-1,-1,0.9844610095024108,0.986078917980194,0.9892531037330629,-1.0,accept,unanimous_agreement
63915606,5214,since we don't use qt_no_cast_from_ascii using qlatin1string in our code is at least useless (really this leads to unnecessary cost). please. for this particular case: [code block],0,0,-1,0.9589163661003112,0.962960422039032,0.6111708283424377,0.0,accept,majority_agreement
63916068,5214,for other case: [code block],0,0,0,0.9857439398765564,0.9920215010643004,0.9950538873672484,0.0,accept,unanimous_agreement
63916330,5214,some other case: [code block],0,0,0,0.9859915375709534,0.9921115636825562,0.9939144253730774,0.0,accept,unanimous_agreement
63927984,5214,"your code has the following shortcomings: 1. global `qstring` constants lead to `qstring` constructor calls at module loading time. static variables in functions would be a bit better. 2. both local static and global `qstring` variables need twice the memory comparing to `char` arrays (permanent usage, is never freed). 3. an expression like `qstring(""a literal"")` requires more computing resources as comparing to `qlatin1string(""the same literal"")` because utf-8 to utf-16 decoder is more complex than ascii to utf-16. and what are the advantages? what costs?",0,0,0,0.9408888220787048,0.9881801605224608,0.8638686537742615,0.0,accept,unanimous_agreement
63931548,5214,"i don't mean global constant. i mean some constant, for example class-wide. if you feel so sorry for the two bytes, you can do so: [code block] agree. but you don't understand the following: `qstring(""str1"") + ""str2""` = 2 qstring ctor + 1 operator+ `qlatin1string(""str1"") + qlatin1string(""str2"")` = 2 qlatin1string ctor + 2 qstring ctor + 1 operator+ 1. performance: additional (and redundant) qlatin1string constructor calls 2. visual: additional (and redundant) qlatin1string in code",0,-1,0,0.7160432934761047,0.6642639636993408,0.699182391166687,0.0,accept,majority_agreement
63954036,5214,"the thing is qlatin1string ctor + qstring ctor is not more work than qstring ctor(char literal), because we remove information about encoding. i suggest you read `qlatin1string` class definition, it is quite short. and the general note: it is usually not possible to make something more optimal removing the information, but the inverse case (more optimal with additional information) is more likely. i bet the compiler generates not significantly different code for `qstring::fromlatin1(""a literal"")` and `qstring(qlatin1string(""a literal""))`.",0,0,0,0.8550910353660583,0.9588755965232848,0.9841156601905824,0.0,accept,unanimous_agreement
64063420,5214,damn. unfortunately qt5 documentation is outdated and contains incorrect and conflicting information. it turns out that qstring's **const char** * api is no longer so lightweight and optimized as described.,-1,-1,-1,0.9864141345024108,0.9914180040359496,0.994392991065979,-1.0,accept,unanimous_agreement
64064921,5214,i don't know what you are talking about but they say in the documentation that `setcodecforcstring()` was removed and all `const char*` strings are assumed to be in utf-8. do they hide anything else?,0,0,0,0.9704623818397522,0.9282097220420836,0.9813416004180908,0.0,accept,unanimous_agreement
64065318,5214,but the following is wrong:,-1,0,0,0.7264732122421265,0.9008622765541076,0.8610930442810059,0.0,accept,majority_agreement
64065651,5214,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
64125286,5214,"with this pr we are adding options to control were qbt stores its configuration and data files (like the fast resume files or the rss cache) and we called this entity ""profile"". thank you for the willingness to help.",1,1,1,0.9665666818618774,0.9327991604804992,0.9215763211250304,1.0,accept,unanimous_agreement
64177748,5214,profile is usual name for such a thing. why do you propose changing it?,0,0,0,0.9748507142066956,0.9753615856170654,0.9891889095306396,0.0,accept,unanimous_agreement
64265540,5214,"things under utils namespace are helpers, wrappers (and so on) for different purposes. but profile is more important, so i see it as the application component (albeit small). therefore, i propose to put it in the global namespace.",0,0,0,0.9830033779144288,0.9898552894592284,0.9880187511444092,0.0,accept,unanimous_agreement
64387582,5214,maybe it will be better to leave implementation classes in namespace impl? perhaps we can create `base/private` or `base/impl` directory and put those files there?,0,0,0,0.988661766052246,0.9955931305885316,0.9909027218818665,0.0,accept,unanimous_agreement
64389072,5214,agree. `base/private` and `private` namespace (as done in bittorrent).,0,0,0,0.9873091578483582,0.99431711435318,0.9922928810119628,0.0,accept,unanimous_agreement
110687948,5214,you already check this in `parsecommandline()`,0,0,0,0.9872636198997498,0.9925962686538696,0.9957285523414612,0.0,accept,unanimous_agreement
110688795,5214,what happens if it is malformed? no 2 parts?,0,0,0,0.9472889304161072,0.752655029296875,0.9692609906196594,0.0,accept,unanimous_agreement
110688993,5214,what happens if it is malformed? no 2 parts?,0,0,0,0.9472889304161072,0.752655029296875,0.9692609906196594,0.0,accept,unanimous_agreement
110769375,5214,"this test meant to show whether the port number is set by user, or has its default value of -1. probably should change the condition to `!= -1`?",0,0,0,0.988819658756256,0.9935019612312316,0.9922606348991394,0.0,accept,unanimous_agreement
110789530,5214,oops. you're correct. i forgot that this might be unset. in this case this check can stay as it is.,0,-1,0,0.5629728436470032,0.4780932962894439,0.5322716236114502,0.0,accept,majority_agreement
110790296,5214,"i don't know if this intended or not. this is just a reminder. you might want to leave an email beside your name. if yes, add it on every other place you put your name.",0,0,0,0.8569262027740479,0.8818578124046326,0.9097418785095216,0.0,accept,unanimous_agreement
110791229,5214,at the time of writing i did not want to leave e-mail there. probably i'll insert the e-mail during the next round of changes.,0,0,0,0.9772375226020812,0.9686129093170166,0.9835790991783142,0.0,accept,unanimous_agreement
110792148,5214,sure. whatever you want. it was just just a reminder. (i am continuing with the review),0,0,1,0.8556589484214783,0.9694730639457704,0.4970366060733795,0.0,accept,majority_agreement
110792623,5214,i think this is a remnant of qt4 support.,0,0,0,0.9852871894836426,0.9674578905105592,0.9821838140487672,0.0,accept,unanimous_agreement
110793803,5214,do you have any reference to this? edit: you probably infer it from qt docs about nativeformat. i hope it stays the same for iniformat. unfortunately the docs don't have an example. i'll check the macos machine to see if it indeed saves it there.,0,0,0,0.9653739333152772,0.9749144911766052,0.9770594239234924,0.0,accept,unanimous_agreement
110795539,5214,according to the docs iniformat forces the use of `.ini` extension on all platforms. so why override it and use `.conf` instead? i think we should stay close to how qt works.,0,0,0,0.9848535060882568,0.9890747666358948,0.9863218069076538,0.0,accept,unanimous_agreement
110796525,5214,i see it will stay empty so it will fallback to using the defaultprofile.,0,0,0,0.9867790937423706,0.9531694650650024,0.9909857511520386,0.0,accept,unanimous_agreement
110796850,5214,"ok, defaults are used if empty",0,0,0,0.982256293296814,0.9872690439224244,0.994998574256897,0.0,accept,unanimous_agreement
110804394,5214,"the `--portable` documentation should be updated to indicate that it also implies `--relative-fastresume` also the result of this test isn't a little too harsh? imo, we should silently ignore `--relative-fastresume` in this case.",0,0,0,0.9816350936889648,0.8784514665603638,0.9815980195999146,0.0,accept,unanimous_agreement
110807130,5214,usage doesn't seem to be documented,0,0,0,0.9734723567962646,0.955896019935608,0.9578900337219238,0.0,accept,unanimous_agreement
110861556,5214,"disagree with you: current files have '.conf' extension, and if we use '.ini' in the custom profiles, we make a custom profile dir incompatible with the current one, while otherwise profile dirs can be copied one into another.",0,0,0,0.7431284785270691,0.9669182896614076,0.8380399346351624,0.0,accept,unanimous_agreement
110886219,5214,"partially true. the old code has an ifdef when creating the qsettings object. in linux it uses nativeformat, which are ini files with `.conf` extension. on windows+macos it uses iniformat which forces `.ini` as extension.",0,0,0,0.9887864589691162,0.9929433465003968,0.9918373227119446,0.0,accept,unanimous_agreement
110887971,5214,shouldn't the arguments be reversed here? (i am talking about the bool check),0,0,0,0.7489499449729919,0.991784691810608,0.9927257299423218,0.0,accept,unanimous_agreement
110890682,5214,wouldn't that create an impression that `--relative-fastresume` is used somehow? let's print a warning instead?,0,0,0,0.9755777716636658,0.9889334440231324,0.9886018633842468,0.0,accept,unanimous_agreement
110892170,5214,"well, if they read the documenation they should have that impression. but i am ok with a warning.",0,0,0,0.9769816994667052,0.9346076250076294,0.8416407108306885,0.0,accept,unanimous_agreement
71085636,5532,having both add-started and add-paused params is bad idea. one of them is redundant.,-1,-1,-1,0.982200026512146,0.9751266837120056,0.9327764511108398,-1.0,accept,unanimous_agreement
71085696,5532,here and in similar places you break coding style rule. you must insert spaces around arithmetic operators.,0,0,0,0.97954261302948,0.7267225384712219,0.9704654216766356,0.0,accept,unanimous_agreement
81368647,5532,you should also remove the trailing spaces in this and other lines.,0,0,0,0.9870020151138306,0.9911735653877258,0.9941674470901488,0.0,accept,unanimous_agreement
81371163,5532,it is done.,0,0,0,0.9764223098754884,0.9584618806838988,0.9802975654602052,0.0,accept,unanimous_agreement
112675708,5532,i would avoid such a general name for the parameter. who knows what other path we would add in the future?,0,0,0,0.8642264604568481,0.9677677750587464,0.9837164878845216,0.0,accept,unanimous_agreement
112675782,5532,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
112676794,5532,"either remove ""started"" and ""paused"" from the translatable string or make it clear for a translator that they have to be kept as is.",0,0,0,0.9834850430488586,0.9933839440345764,0.9923967719078064,0.0,accept,unanimous_agreement
112677283,5532,"don't quite understand why we can pass `wrap_at_column` as default value, but can not do the same with `usage_text_column`?",0,0,0,0.9546229839324952,0.9744728207588196,0.9388216733932496,0.0,accept,unanimous_agreement
112722324,5532,"we use ""add paused"" term in this meaning, so it should be ""add-paused"" here.",0,0,0,0.9861775636672974,0.9950986504554749,0.992960512638092,0.0,accept,unanimous_agreement
112722398,5532,"we use ""save path"" term in this meaning, so it should be ""save-path"" here.",0,0,0,0.987135112285614,0.9943201541900636,0.9944023489952089,0.0,accept,unanimous_agreement
112722854,5532,good point. i'll change it to save-path unless you have a different suggestion. edit: apparently i forgot to refresh this page before commenting and missed the above discussion. save-path it is.,1,1,1,0.8980292677879333,0.9392310976982116,0.971074879169464,1.0,accept,unanimous_agreement
112722898,5532,similarly will change it to torrent-status,0,0,0,0.9890563488006592,0.9912464022636414,0.9940434098243712,0.0,accept,unanimous_agreement
112723563,5532,"imo, ""status"" is incorrect in this context.",0,0,0,0.827289342880249,0.9221482872962952,0.8900936841964722,0.0,accept,unanimous_agreement
112727419,5532,"i would use bool option `--add-paused`, which will be shorter without the value part than `--status=paused`. are there any more statuses except these two?",0,0,0,0.9883747100830078,0.994126558303833,0.994645357131958,0.0,accept,unanimous_agreement
112737102,5532,"`--add-paused` doesn't give the option of someone adding a torrent unpaused when the app is configured to add all torrents paused by default, so it ought to include both options.",0,0,0,0.9838517308235168,0.9915329813957214,0.9905695915222168,0.0,accept,unanimous_agreement
112737453,5532,maybe we better extend the `booloption` class to accept a value? to make it possible to pass `--add-paused=false`.,0,0,0,0.9881930947303772,0.9946895837783812,0.9905089139938354,0.0,accept,unanimous_agreement
112738339,5532,"i spent some time thinking about what the name of this option should be, and settled on `status` (now `torrent-status`) because i can't find any other terminology used elsewhere in the app that refers to the attribute of a torrent that distinguishes whether it's paused or not in the way that we need. in the add torrent dialog, there is a check box that reads ""start torrent"", but since we're overriding the default behavior with this command line option, a simple toggle isn't good enough. the user needs to specify one of three states: use default settings, pause torrent, start torrent. the `torrent-status` approach allows for all three. the actual setting in the preferences for specifying the default behavior is ""do not start the download automatically"" which doesn't really help for coming up with an intuitive command line option either. in the main window, whether a torrent is paused or running is indicated in the status column. so i eventually settled with `torrent-status`. i originally set it up so that there was an `--add-paused` and `--add-started` option but a while back suggested that was redundant and i'm inclined to agree. i think `torrent-status=paused|started` is the way to go.",0,0,0,0.9413164258003236,0.9310907125473022,0.9746224880218506,0.0,accept,unanimous_agreement
112738690,5532,good catch. i think `started` and `paused` had better remain consistent regardless of system language otherwise scripts that execute in one language will fail in another.,1,1,1,0.8873725533485413,0.9594743251800536,0.9724910855293274,1.0,accept,unanimous_agreement
112741386,5532,but what not `--add-paused=true|false`?,0,0,0,0.9837860465049744,0.9940793514251708,0.994650900363922,0.0,accept,unanimous_agreement
112742978,5532,"yes, that could work. i originally discounted that as booloption doesn't current allow a way to specify a value, and i don't think it should since it's implementing a specific common kind of command line option. instead i could continue using stringoption and checking its value, requiring it to be true or false. that would be the easiest and fastest change. alternatively, i could add a new option-derived class called something like tristatebooloption, that requires explicitly specifying a value. that would allow some flexibility in how the value is specified, i.e. true, false, 1, 0, on, and off could all be valid values.",0,0,0,0.9559134244918824,0.9287305474281312,0.9531722664833068,0.0,accept,unanimous_agreement
112743805,5532,"i'll simplify things so that there's just one function, `wraptext`.",0,0,0,0.987863540649414,0.9863179922103882,0.9927737712860109,0.0,accept,unanimous_agreement
112745582,5532,"i would model `booloption` after the same entity in `boost::program_options`, i.e. give it ability to parse supplied value and set an implicit one, which is taken when no explicit value is provided. if you, , do not want to do that or wait for such implementation, imo `stringoption` with a custom check would be fine. let's just avoid option name change in the future.",0,0,0,0.9837051033973694,0.9922316074371338,0.9875590205192566,0.0,accept,unanimous_agreement
112750483,5532,"i don't mind implementing this, as i do prefer doing things ""the right way"". that said i don't think doing something like `boost::program_options` like you describe will work here, as i need an unspecified option to have a value that explicitly means it was undefined rather than an implicit true / false value. so think it would be better to utilize the existing `tristatebool` class (which exists for exactly that purpose) and create a new kind of option based on that.",0,0,0,0.7741485834121704,0.9402527809143066,0.5275153517723083,0.0,accept,unanimous_agreement
112751675,5532,", excuse me, don't understand yet why do you need the third value. why just absent parameter in the command line does not work? sure, you need the tri-state value further on, but why it is needed in the command line?",0,-1,-1,0.8645038604736328,0.7896906137466431,0.5801188349723816,-1.0,accept,majority_agreement
112754959,5532,"it's mainly because, without having an `option`-derived class that can return a tri-state bool, the mechanism where options can be specified using environment variables no longer works. when initializing a value in the constructor of `qbtcommandlineparameters` you need to use something like: `addpaused(paused_option.value(env))` with `booloption`, this will necessarily initialize the variable `addpaused` to either true or false. so if we don't get a value from the corresponding environment variable, `addpaused` is initialized to false rather than to undefined. and now we don't know whether the user actually specified false in the environment variable or didn't specify anything at all. using `tristatebooloption` fixes this. on top of that, and perhaps even more importantly, i think having a separate class called `tristatebooloption` is *conceptually* correct as it provides a different function (namely the ability to have an undefined state) in comparison to `booloption`. better to make that explicit in the definition of an option than to have its behavior not come from its definition but its implementation details. you don't want people to have to check the code carefully to know that `add-paused` behaves differently than every other `booloption`.",0,0,0,0.9755545258522034,0.9950254559516908,0.9887655973434448,0.0,accept,unanimous_agreement
112756920,5532,"i agree with we need some way for ""use application default value for addpaused"". if user omit corresponding parameter this shouldn't mean ""false"".",0,0,0,0.9829809665679932,0.990780770778656,0.9830495119094848,0.0,accept,unanimous_agreement
112763304,5532,"it is still ""path"" here.",0,0,0,0.9862237572669984,0.9864142537117004,0.986616849899292,0.0,accept,unanimous_agreement
112763388,5532,why this is still here?,0,0,0,0.867779016494751,0.9636560678482056,0.9777555465698242,0.0,accept,unanimous_agreement
112763578,5532,please use `qlatin1string`,0,0,0,0.9864219427108764,0.9938071370124816,0.9955138564109802,0.0,accept,unanimous_agreement
112763625,5532,will this go into transifex?,0,0,0,0.9859508872032166,0.9932920932769777,0.9932845830917358,0.0,accept,unanimous_agreement
112763814,5532,`qlatin1string`,0,0,0,0.9845684766769408,0.9902980923652648,0.9941482543945312,0.0,accept,unanimous_agreement
112763898,5532,will this go into transifex?,0,0,0,0.9859508872032166,0.9932920932769777,0.9932845830917358,0.0,accept,unanimous_agreement
112764385,5532,"i don't understand why `booloption` is ok here, but `tristatebooloption` is needed for 'add-paused'? don't they behave identically in terms of absent values? i.e. when value in command line is absent, program setting has to be used.",0,0,0,0.9689745306968688,0.9842394590377808,0.888731062412262,0.0,accept,unanimous_agreement
112764464,5532,"""path""",0,0,0,0.9768666625022888,0.9876376390457152,0.9886302947998048,0.0,accept,unanimous_agreement
112764945,5532,"so, continuing, my idea is: only `result.addpaused` has to be of type `tristatebool`. the option itself is a bool option which accepts value and can be omitted. the third case is here already, in this very test.",0,0,0,0.976027488708496,0.9925766587257384,0.9918007254600524,0.0,accept,unanimous_agreement
112766304,5532,"because utilizing any of the command line options relating to adding a torrent prevents the ""add new torrent"" dialog from opening.",0,0,0,0.930037796497345,0.9742069840431212,0.9838665127754213,0.0,accept,unanimous_agreement
112766403,5532,i haven't used transifex before so i'm not sure. but this is the officially supported way of adding comments to translatable strings according to qt's documentation. is there another method i should use?,0,0,0,0.9751264452934264,0.8292703032493591,0.936869204044342,0.0,accept,unanimous_agreement
112766574,5532,"there is no setting for ""download first and last piece first"" in the application-wide preferences. it always defaults to off so therefore there's no need for a tri-state bool.",0,0,0,0.9858763813972472,0.9938409328460692,0.994065523147583,0.0,accept,unanimous_agreement
112767115,5532,"you're forgetting about environment variables being used to specify options. it's definitely necessary to have `tristatebooloption` in order for that to work. not to mention there's my earlier comment about how using `tristatebooloption` unambiguously informs people reading the code that it behaves differently than the other bool options, which i think vastly improves comprehensibility.",0,0,0,0.9534460306167604,0.9664517641067504,0.979988932609558,0.0,accept,unanimous_agreement
112769588,5532,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
112769829,5532,"you are right, option object with optional value (sorry) is certainly a cleaner solution then.",-1,-1,-1,0.5042188167572021,0.9743975400924684,0.7730871438980103,-1.0,accept,unanimous_agreement
112769974,5532,why this assignment is still present?,0,0,0,0.962541937828064,0.9689597487449646,0.9907331466674804,0.0,accept,unanimous_agreement
112770311,5532,will this go into transifex? why don't you use the second argument of `qobject::tr()`?,0,0,0,0.9807511568069458,0.9945207834243774,0.994499444961548,0.0,accept,unanimous_agreement
112770341,5532,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
112771937,5532,because specifying a save path prevents the new torrent dialog from opening.,0,0,0,0.9303199052810668,0.9709538221359252,0.9905546307563782,0.0,accept,unanimous_agreement
112773087,5532,"the second argument of `qobject::tr()` is meant for disambiguation, like when you have two strings that are the same in english but might need to be translated differently in another language. you're supposed to use the `//:` comment notation for notes to the translator. see [a link]",0,0,0,0.9800048470497132,0.993747353553772,0.9947695136070251,0.0,accept,unanimous_agreement
112774376,5532,"can't agree with you. imo, it would be perfectly fine to supply a save path, a magnet uri and expect to see the dialog. and that is why i asked you to add the option to control it. it is perfectly fine to skip the dialog by default, but where is `skiptorrentdialog = false` then?",0,0,-1,0.95803302526474,0.9790582060813904,0.6178811192512512,0.0,accept,majority_agreement
112775179,5532,"does anybody know will this comment go into transifex? , maybe it is worth to write is simply as: [code block] ?",0,0,0,0.9760790467262268,0.9935848116874696,0.9924880266189576,0.0,accept,unanimous_agreement
112776017,5532,good idea,1,1,1,0.9742737412452698,0.97594553232193,0.9905905723571776,1.0,accept,unanimous_agreement
112778952,5532,"i see what you're getting at. unfortunately the save dialog currently has no facility for passing in torrent options. meaning if i use command line arguments such as `--save-path`, `--category`, `--start-paused` and so on, those options are not reflected in the save dialog and end up having no effect. they only work when adding a torrent using `bittorrent::session::instance()->addtorrent()`. the thing is that these command line arguments are mainly intended to be used for automating qbittorrent. in those instances it's not desirable to have the save dialog open, hence why i set it up so that specifying any of them prevents it from opening. i thought adding a `--skip-dialog` option was useful, though, because someone might want to add a torrent, skip the dialog, and use the application settings without overriding anything, which wasn't possible previously. in order to accomplish what you're talking about, i'd have to make significant changes to `addnewtorrentdialog` so that it can accept an optional `bittorrent::addtorrentparams` parameter and properly pass those settings on when adding the torrent, even the ones that can't be specified by the dialog itself. i'm not very familiar with `addnewtorrentdialog` so it would take some work and have the potential for introducing new bugs. i'd prefer not to do that unless there's a compelling reason for it.",0,0,0,0.7514563798904419,0.8743141293525696,0.9605883955955504,0.0,accept,unanimous_agreement
112779490,5532,ah! what a pity! could you leave a comment or todo marker somewhere then regarding this problem?,-1,-1,-1,0.9905575513839722,0.9928036332130432,0.9955173134803772,-1.0,accept,unanimous_agreement
112781196,5532,sure.,0,0,0,0.9536533951759338,0.9664214849472046,0.9824982285499572,0.0,accept,unanimous_agreement
112781350,5532,thank you!,1,1,1,0.9661415219306946,0.9148550629615784,0.9448403120040894,1.0,accept,unanimous_agreement
112783042,5532,"actually this may require some future proofing. if someone were to make the change we're discussing, it would change the behavior of these command line arguments from preventing the ""add new torrent"" dialog from opening to not preventing it. i think it's bad form to have a potential future version of the app change the behavior of command line arguments in that dramatic of a fashion. so how about this: i'll add the todo and change the `--skip-dialog` to be a tri-state bool. this already makes sense because there is actually an application-wide setting for whether the add torrent dialog should be opened, so being able to say `--skip-dialog=false` might be useful in some cases. for now i'll make a note in the command line usage text that using `--skip-dialog=false` in conjunction with the other command line arguments i've added is currently unsupported. but that way if in a future version someone follows up on the todo and changes `addnewtorrentdialog` so that you can override its settings with these command line arguments, we can start allowing using them in conjunction with `--skip-dialog=false` to allow someone to pop open the dialog, override its settings, all while not change the existing behavior of the other command line arguments. sound good?",-1,-1,-1,0.6214665174484253,0.6749093532562256,0.9284015893936156,-1.0,accept,unanimous_agreement
112792464,5532,"sorry, i don't understand your point. i thought that it would be sufficient just add the option and in case of `--skip-dialog=false` and any of the new options set just abort and show that this combination of options is not yet implemented.",-1,-1,-1,0.9882698059082032,0.9847288727760316,0.9819019436836244,-1.0,accept,unanimous_agreement
112802403,5532,"this param won't affect if we add magnet, isn't it?",0,0,0,0.9766975045204164,0.990565538406372,0.9934705495834352,0.0,accept,unanimous_agreement
112802452,5532,"use tristatebool for skipdialog is a really good idea. and, of course, we should implement overriding of addnewtorrentdialog initial values (imo, it should be done before these changes go to release).",1,1,1,0.909003734588623,0.8411431312561035,0.9832000732421876,1.0,accept,unanimous_agreement
112803541,5532,well being that i have a hard time implementing features that aren't quite finished or don't quite do *the right thing* i went ahead and modified `addnewtorrentdialog` so that it works with my new command line options.,-1,0,0,0.5778745412826538,0.811797022819519,0.9644839763641356,0.0,accept,majority_agreement
112804166,5532,"you're right, it doesn't have an effect in that case. i'm not sure why, but the issue seems to be somewhere within `bittorrent::session::addtorrent()` and/or everything it calls into. i don't think i'm the right person to debug this one.",0,-1,0,0.6877926588058472,0.6071720123291016,0.8418406844139099,0.0,accept,majority_agreement
112804181,5532,"it was for a redundant ""start torrent"" checkbox. it seemed to be the result of a copy/paste mistake someone made. it's not referenced anywhere in the code, and it obscured the real ""start torrent"" checkbox, causing bugs.",0,0,0,0.9155762791633606,0.8442229628562927,0.9568942785263062,0.0,accept,unanimous_agreement
112804892,5532,it's not a bug. we can't prioritize something since we haven't any torrent metadata in case we add it using magnet link. we can do it deferred when metadata has to be loaded. please put todo comment near corresponding addtorrentparams member.,0,0,0,0.9855334162712096,0.9790958166122437,0.9906919598579408,0.0,accept,unanimous_agreement
112841007,5532,"ok. adding a magnet link / torrent url does work with the ""download in sequential order"" feature. i'll see if i can't figure out how to get it to work with ""first and last piece priority"" and failing that i'll add the todo.",0,0,0,0.9840589761734008,0.9875857830047609,0.9866231083869934,0.0,accept,unanimous_agreement
112863429,5532,you forgot `const`.,0,0,0,0.9476627111434937,0.9830620288848876,0.986500084400177,0.0,accept,unanimous_agreement
112901575,5532,this is not enough. you also need store it in torrent resume data as we do for addforced/addpaused (only if it is true). user can close qbittorrent when metadata isn't loaded.,0,0,0,0.924182653427124,0.9876866936683656,0.9932534098625184,0.0,accept,unanimous_agreement
112903705,5532,"imo, `m_hasfirstlastpiecepriority` is better name. user can change it at any time so you should change this field in `setfirstlastpiecepriority()` unconditionally (before return).",0,0,0,0.9781600832939148,0.9923117756843568,0.991418957710266,0.0,accept,unanimous_agreement
112904089,5532,"else ? i mean, if undefined",0,0,0,0.9788758754730223,0.9577071666717528,0.9882264733314514,0.0,accept,unanimous_agreement
112904212,5532,duplicate line.,0,0,0,0.9015927910804749,0.9253945350646972,0.9133452773094176,0.0,accept,unanimous_agreement
112904293,5532,`createsubfolder` is tristatebool now.,0,0,0,0.9875454306602478,0.9936973452568054,0.994903564453125,0.0,accept,unanimous_agreement
112904505,5532,forward declare addtorrentparams instead of this line.,0,0,0,0.9884225726127625,0.9916625022888184,0.9942721128463744,0.0,accept,unanimous_agreement
112904645,5532,`qwidget *parent = 0` like in next `show()`.,0,0,0,0.9854678511619568,0.9926331639289856,0.9941971302032472,0.0,accept,unanimous_agreement
112904844,5532,we use `m_` prefix for all private fields.,0,0,0,0.988038957118988,0.992629051208496,0.994986057281494,0.0,accept,unanimous_agreement
112905061,5532,`tristatebool skiptorrentdialog;` is enough since undefined is default value for tristatebool.,0,0,0,0.9867218732833862,0.9949780106544496,0.9934886693954468,0.0,accept,unanimous_agreement
112906823,5532,don't abuse with `continue`! replace it with `if - else if`.,0,-1,0,0.9764078855514526,0.5636292695999146,0.9631568789482116,0.0,accept,majority_agreement
112908406,5532,it's better to split lines according to subexpressions: [code block],0,0,0,0.984432578086853,0.992927610874176,0.9926620721817015,0.0,accept,unanimous_agreement
112908675,5532,why it's here? it's unused at this file.,0,0,0,0.9362431168556212,0.9521552920341492,0.9892288446426392,0.0,accept,unanimous_agreement
112908821,5532,`const` is static by default so you can omit `static` keyword in these lines.,0,0,0,0.9867386817932128,0.9946807026863098,0.993945300579071,0.0,accept,unanimous_agreement
112921920,5532,"imo, it i much easier to read this kind of looping with `continue`. what's wrong with it from your point of view?",0,0,0,0.5351749658584595,0.9345709681510924,0.7983922362327576,0.0,accept,unanimous_agreement
112922223,5532,there is an unnamed namespace right below. these constants would fit there perfectly.,0,0,0,0.9869781732559204,0.9899216294288636,0.9947813153266908,0.0,accept,unanimous_agreement
112922831,5532,"`const bool`, please.",0,0,0,0.9704440832138062,0.9899864792823792,0.9872391819953918,0.0,accept,unanimous_agreement
112923124,5532,why do you need the named variable?,0,0,0,0.9801809191703796,0.9880813360214232,0.9920032024383544,0.0,accept,unanimous_agreement
112923371,5532,this can be moved after the `if` and you can remove lines 436-437 then: [code block],0,0,0,0.9892429113388062,0.9919169545173644,0.9960336089134216,0.0,accept,unanimous_agreement
112923997,5532,"ah, you just borrowed this piece from the code below...",0,0,0,0.9739115834236144,0.983374834060669,0.9933859705924988,0.0,accept,unanimous_agreement
112924431,5532,"if there is a member, it has to be initialised in the constructor, but not in `show()` function.",0,0,0,0.9861234426498412,0.9942675828933716,0.9931344985961914,0.0,accept,unanimous_agreement
112924775,5532,"and what if the category is absent? say, user mistype it in the command line? i would prefer a program that tells me about that. but here is a bad time to check that, although i did not find the check elsewhere.",-1,-1,0,0.9286447763442992,0.8176366090774536,0.5395345687866211,-1.0,accept,majority_agreement
112925382,5532,please no. unparented dialogue windows are showed on the first screen always in plasma and maybe in any x session regardless of the main window position.,0,0,0,0.963059902191162,0.9875954389572144,0.8376917243003845,0.0,accept,unanimous_agreement
112927673,5532,i suggested this to preserve signature similarity. then remove it from next `show()` too.,0,0,0,0.9879228472709656,0.9919895529747008,0.9951122403144836,0.0,accept,unanimous_agreement
112929331,5532,"it's not only my point of view. the normal continuation/completion of the loop should be described in the appropriate place (as loop condition). `break` and `continue` instructions are for non-standard/emergency interruption of the loop (or loop iteration). or, in exceptional cases, to avoid too much code (when other methods do not help or are ineffective). i don't think that in the case of the use of `else if` this code will become less readable. besides, it will become three times shorter!",0,0,0,0.8920922875404358,0.5291918516159058,0.9267587661743164,0.0,accept,unanimous_agreement
112939216,5532,"nonsense, `break` and `continue` are different in this sense: `continue` has nothing to do with loop condition.",0,0,0,0.6021968126296997,0.7527856230735779,0.9813162088394164,0.0,accept,unanimous_agreement
112942599,5532,"of course. i just said that `break` breaks loop, and `continue` breaks current loop iteration. i don't insist on changing this.",0,0,0,0.95786851644516,0.9184545278549194,0.9487444758415222,0.0,accept,unanimous_agreement
112944492,5532,you are saying this as if everybody likes to read a loop body to the end to check whether there is anything after a sheet of `if`s.,0,0,0,0.9697840809822084,0.9866878390312196,0.910464346408844,0.0,accept,unanimous_agreement
112946990,5532,"since it consists only of these same blocks, i do not insist on the change. in another case it could be otherwise...",0,0,0,0.7984491586685181,0.9714319109916688,0.9888153672218324,0.0,accept,unanimous_agreement
112952522,5532,"if it's `undefined` then we leave the checkbox as is, since we fall back on the application setting. so nothing to do in that case, hence no `else` clause.",0,0,0,0.964027225971222,0.9938179850578308,0.99142986536026,0.0,accept,unanimous_agreement
112956146,5532,"i was trying to avoid using that flag as the canonical indicator as to whether a torrent has first/last piece priority set, since then we need to worry about it going out of sync with the actual state of the torrent. (note that the current implementation of `hasfirstlastpiecepriority()` doesn't use such a flag but instead checks if the first and last pieces actually have the correct priority set, so there's nothing to get out of sync.) however, if we need to store it in the resume data i do believe we'll need to use a flag that way. also, we need to be careful about setting the flag unconditionally, because we don't want the torrent to have first/last priority if it doesn't contain any media files that support it. so i'll maintain that behavior in how `m_hasfirstlastpiecepriority` is set.",0,0,0,0.7666388154029846,0.9801234602928162,0.9839322566986084,0.0,accept,unanimous_agreement
112956668,5532,"you probably want to tell me: dude, look at another place where i set some value for this. i answer: it must be concentrated in one place.",0,0,0,0.518047571182251,0.5435143709182739,0.9468042254447936,0.0,accept,unanimous_agreement
112957566,5532,"you need to place all this logic here and modify constructor to accept addtorrentparams as parameter, then call this function from it.",0,0,0,0.9882035851478576,0.9921934008598328,0.993794083595276,0.0,accept,unanimous_agreement
112977903,5532,"sequential download also needs to be saved with the resume data, so i'll fix that too.",0,0,0,0.9878656268119812,0.9912245869636536,0.9944709539413452,0.0,accept,unanimous_agreement
112979293,5532,i'll keep as is. i agree with in this case that it is more readable with `continue`.,0,0,0,0.9815405607223512,0.98361337184906,0.982161819934845,0.0,accept,unanimous_agreement
112979672,5532,accidentally left it in from a previous (now squashed) commit,0,0,0,0.7890964150428772,0.987878143787384,0.7835551500320435,0.0,accept,unanimous_agreement
112980912,5532,"i like being explicit in the intent of a line of code, and using the named variable makes it more clear what i'm doing in this version of `addnewtorrentdialog::show`. however i can see how it's being more explicit than is strictly necessary so i will remove the variable.",0,0,0,0.7811747789382935,0.9122167229652404,0.8760669231414795,0.0,accept,unanimous_agreement
112983465,5532,i'm pretty sure in that case the current fragment would evolve into a function containing only this switch-like structure.,0,0,0,0.9808703064918518,0.9599025845527648,0.9736319184303284,0.0,accept,unanimous_agreement
112986245,5532,"i thought the reasonable behavior in this case is for it to create a new category. note that the user can type in any category they want into `categorycombobox` and if it doesn't exist, qbittorrent will create it. so the command line argument should behave the same way as providing a value for the combo box. this means it's the responsibility of the user to get the category name right, but that's always been the case.",0,0,0,0.9824259281158448,0.992462158203125,0.9819029569625854,0.0,accept,unanimous_agreement
112988220,5532,not possible due to `addnewtorrentdialog` having a member variable of type `bittorrent::addtorrentparams`.,0,0,0,0.9833106994628906,0.9942139983177184,0.9896032214164734,0.0,accept,unanimous_agreement
112988495,5532,"i don't think this relation is correct now. in the gui user actions are explicit, they know that the new category is created, but here this is done implicitly. to make these two cases equivalent, we should add to the command line help a note that category will be created if it does not exist.",0,0,0,0.981663942337036,0.9843357801437378,0.9524039030075072,0.0,accept,unanimous_agreement
112989992,5532,we should probably refactor `addtorrentparams` into its own file...,0,0,0,0.9883379340171814,0.9947333335876464,0.9936907291412354,0.0,accept,unanimous_agreement
113002220,5532,torrents → files,0,0,0,0.9835495948791504,0.9432999491691588,0.9881114959716796,0.0,accept,unanimous_agreement
113024590,5532,"or we can just get rid of this member. in fact we don't need it at all. we just use a parameter of this type to initialize the dialog, and then just create the object of this type for passing to the session. why we need to store it?",0,0,0,0.9825510382652284,0.990803360939026,0.9903057813644408,0.0,accept,unanimous_agreement
113041666,5532,"well, we do need it, or something like it. not every option in `bittorrent::addtorrentparams` is represented by ui in `addnewtorrentdialog`. in particular, `firstlastpiecepriority` and `sequential`, both of which can be specified from the command line, do not have options in the dialog. but we still want them to be enabled if the user adds the torrent from the command line and specifies them using `--first-and-last` or `--sequential`, regardless of whether the dialog is invoked or not. i opted to have `bittorrent::addtorrentparams` be a member variable because that was the safest way to ensure every option it specifies gets used when the torrent is actually added when `bittorrent::session::instance()->addtorrent()` is called by `accept()`. this is particularly relevant in case someone adds more fields to `bittorrent::addtorrentparams`, because those will be respected too -- it gives us a degree of future proofing and is less error prone. that said, it is true that currently the only options we care about passing through the dialog *right now* that don't have a control in its ui are `firstlastpiecepriority` and `sequential`. in order to eliminate `m_torrentparams` we could add boolean member variables to `addnewtorrentdialog` that just store those values, and then construct a new `bittorrent::addtorrentparams` in the `accept()` method. however if the only reason to eliminate `m_torrentparams` is to remove an `#include` from the header file, i don't think it's a net win given that keeping it around has the benefits i listed above. but i'm not wedded to either approach. if you want me to eliminate `m_torrentparams` i'll do it.",0,0,0,0.9721359610557556,0.9918212890625,0.9906800389289856,0.0,accept,unanimous_agreement
113131853,5532,+1,0,0,0,0.696722686290741,0.7702900171279907,0.9816582202911376,0.0,accept,unanimous_agreement
113132212,5532,maybe later.,0,0,0,0.9502148628234864,0.9845106601715088,0.9619131684303284,0.0,accept,unanimous_agreement
113132786,5532,why did you break it? please revert it. and don't change unrelated things (at least without announcing)!,-1,-1,0,0.6112879514694214,0.8015430569648743,0.9224497675895692,-1.0,accept,majority_agreement
113141732,5532,it has done in torrenthandle constructor.,0,0,0,0.9881417155265808,0.9931530952453612,0.9944820404052734,0.0,accept,unanimous_agreement
113141789,5532,it has done in torrenthandle constructor.,0,0,0,0.9881417155265808,0.9931530952453612,0.9944820404052734,0.0,accept,unanimous_agreement
113145523,5532,how about se,0,0,0,0.973466694355011,0.920521080493927,0.990045726299286,0.0,accept,unanimous_agreement
113147117,5532,"it becomes incorrect when the user changes the priorities in a different way. why did you change it, you're not going to do it? so you're never going to finish this pr.",-1,-1,0,0.6895067691802979,0.7561612725257874,0.7317288517951965,-1.0,accept,majority_agreement
113147319,5532,how about sequential here?,0,0,0,0.9851170778274536,0.9747046232223512,0.9927728772163392,0.0,accept,unanimous_agreement
113202796,5532,"what other way? the only way i'm aware of for these specific priorities to be set is to use the `setfirstlastpiecepriority` function. also, this was discussed earlier. i had originally introduced a member variable called `m_needstosetfirstlastpiecepriority` to handle when a torrent is added with the `firstlastpiecepriority` option before it has downloaded its metadata, but i was asked to change it to `m_hasfirstlastpiecepriority`. that means that new flag is the canonical indicator as to whether a torrent has this option set, and it's no longer valid to check the actual priority of the pieces because it could be set before the torrent's metadata is available. what would you suggest i do otherwise?",0,0,0,0.9813573360443116,0.9898676872253418,0.9880282878875732,0.0,accept,unanimous_agreement
113203003,5532,not necessary. we can set sequential downloading on a torrent before we have its metadata. not so for first / last piece priority.,0,0,0,0.9844085574150084,0.9833446145057678,0.9925518035888672,0.0,accept,unanimous_agreement
113203283,5532,"this is strange, and i'm not sure how i made that edit. sorry! i've corrected it.",-1,-1,-1,0.990648090839386,0.9937238097190856,0.995970606803894,-1.0,accept,unanimous_agreement
113206845,5532,"any manipulation with file priorities resets first-last priority mode, afaik. that is why the mode is tracked via piece priorities but not via a flag.",0,0,0,0.9891538023948668,0.9909482598304749,0.991502285003662,0.0,accept,unanimous_agreement
113206983,5532,"ah i see, the resume data sets it as well. i don't think it makes sense for us to have this flag. i think my earlier approach of using `m_needstosetfirstlastpiecepriority` was better.",0,0,0,0.9605929851531982,0.960669994354248,0.9846383929252625,0.0,accept,unanimous_agreement
113211522,5532,"oh, no, pardon me: my information is outdated.",-1,-1,-1,0.9725738763809204,0.9266013503074646,0.7663607597351074,-1.0,accept,unanimous_agreement
113223003,5532,then we really should place addtorrentparams in its own header.,0,0,0,0.9878325462341307,0.9913255572319032,0.9914074540138244,0.0,accept,unanimous_agreement
113225590,5532,what do you mean? this isn't true?,0,0,0,0.869939386844635,0.8632938265800476,0.9231420755386353,0.0,accept,unanimous_agreement
113226094,5532,then don't store it in resume data.,0,0,0,0.874783456325531,0.931557595729828,0.9842430353164672,0.0,accept,unanimous_agreement
113227041,5532,"you decoupled firs-last mode from sequential mode in 67e90d8d, but setting file priorities still reset piece priorities, right?",0,0,0,0.9887368083000184,0.9859724044799804,0.9889301657676696,0.0,accept,unanimous_agreement
113228456,5532,"afaik, yes!",0,1,1,0.8454626202583313,0.7265504598617554,0.7780186533927917,1.0,accept,majority_agreement
113230129,5532,"you was asked to change field name only. let it be. otherwise this changes will never be released. ? imo, we should omit changing internals here.",0,0,0,0.9841533303260804,0.9836329817771912,0.9267656207084656,0.0,accept,unanimous_agreement
113232980,5532,"but how to resume this mode then? frankly speaking, i lost both of you in this discussion couple of iterations ago. imo, the implementation has to be simple: - add a member flag to `torrenthandle`: `bool m_needapplyfirstlastprioritymode;` - in `torrenthandle::setfirstlastpiecepriority()` if there are no metadata, set this flag, otherwise proceed as usual and reset the flag; - in `torrenthandle::handlemetadatareceivedalert()` check the flag: call `setfirstlastpiecepriority(true);` when it is set. - save the flag to resume data ~(probably only if it is set)~. update: the flag has to be serialised always, of course, otherwise we would read it as set from the resume file always.",0,0,0,0.964731991291046,0.8778708577156067,0.9496181011199952,0.0,accept,unanimous_agreement
113236480,5532,see my comment below: [a link],0,0,0,0.9829047918319702,0.9707390069961548,0.9950523972511292,0.0,accept,unanimous_agreement
113243335,5532,"i see that now. i'm very used to variable names being inextricably linked to their purpose. i do think that i need to reverse this change as it's introduced new bugs, and go back to the method outlined. sorry about that -- i swear i'm not trying to make extra work for all of you! i very much want to see this pr completed.",-1,-1,-1,0.9901617765426636,0.9923916459083556,0.9916911125183104,-1.0,accept,unanimous_agreement
113244516,5532,me too.,0,0,0,0.9441521763801576,0.9761946797370912,0.9760367274284364,0.0,accept,unanimous_agreement
113249465,5532,i agree. this was done almost the same until the author decided to get into the inside. disagree. we should write this flag to resume data only if torrent hasn't metadata (as we do for addpaused/addforced).,0,0,0,0.9478607177734376,0.9223719835281372,0.9553515911102296,0.0,accept,unanimous_agreement
113253275,5532,"i discovered that, similar to first/last piece priority, if a magnet link is added with sequential download but qbittorrent quits before its metadata is retrieved, then `sequential` is not saved. so i added some code to save `sequential` in the resume data when a torrent's metadata isn't retrieved yet to fix the bug.",0,0,0,0.9782440662384032,0.9809232950210572,0.9912569522857666,0.0,accept,unanimous_agreement
113257289,5532,ok. then we need appropriate comment. otherwise someone may break it.,0,0,0,0.9566600918769836,0.9814313650131226,0.9781315922737122,0.0,accept,unanimous_agreement
113268347,5532,can not find where is it used.,0,0,0,0.815356433391571,0.8755236864089966,0.8379366993904114,0.0,accept,unanimous_agreement
113270742,5532,quite a strange replacement.,-1,-1,-1,0.9114684462547302,0.98347407579422,0.8975322842597961,-1.0,accept,unanimous_agreement
113271406,5532,default value for parent does not make sense when the corresponding default gets removed from `show()`.,0,0,0,0.905629336833954,0.9876300692558287,0.951263964176178,0.0,accept,unanimous_agreement
113273897,5532,an artifact of an older version of the function. will remove.,0,0,0,0.9538702964782716,0.9859399795532228,0.9845476746559144,0.0,accept,unanimous_agreement
113274622,5532,"not technically a replacement. the code for setting `ui->createsubfoldercheckbox` is higher up in the function now so that it is grouped with similarly structured code for setting `ui->starttorrentcheckbox`, and `ui->skipcheckingcheckbox` is an addition now that `bittorrent::addtorrentparams` is a parameter the constructor. i do agree with you that this would be much easier to follow if commits weren't being squashed. let me know if you don't want me to do that any longer.",0,0,0,0.9591302871704102,0.9166429042816162,0.9894752502441406,0.0,accept,unanimous_agreement
114047881,5532,no need of `qstring()` here.,0,0,0,0.986102819442749,0.9919925928115844,0.9934404492378236,0.0,accept,unanimous_agreement
114047884,5532,no need of `qstring()` here.,0,0,0,0.986102819442749,0.9919925928115844,0.9934404492378236,0.0,accept,unanimous_agreement
114048031,5532,"if it's not critical, please remove `inline`, i prefer to trust the compiler decision.",0,0,0,0.9751636981964112,0.9900189638137816,0.9862887859344482,0.0,accept,unanimous_agreement
114048040,5532,no need of `qstring()` here and below.,0,0,0,0.9858235120773317,0.9935666918754578,0.9942843317985536,0.0,accept,unanimous_agreement
114048136,5532,"minor thing, you can remove the curly braces here if you want.",0,0,0,0.9871646165847778,0.974183201789856,0.985005795955658,0.0,accept,unanimous_agreement
114048369,5532,"this is causing some padding bytes in the struct. if you want to fix it (as this is not directly related to this pr), you can follow the style in `gui/advancedsettings.h`.",0,0,0,0.9890472292900084,0.9925382733345032,0.9942291975021362,0.0,accept,unanimous_agreement
114055917,5532,now it does not make any sense since addtorrentparams class is in `base/bittorrent/addtorrentparams.h`,0,0,0,0.9700928330421448,0.994016170501709,0.987184464931488,0.0,accept,unanimous_agreement
114055946,5532,"if you don't mind to spare another couple of minutes, please change this now to [code block]",0,0,0,0.973471999168396,0.9865334033966064,0.9938247203826904,0.0,accept,unanimous_agreement
114058951,5532,"i'll make this change in a little while when i'm free, but i'm curious: what's the advantage of using qlatin1string instead of a string literal? does it make any difference when you're just dealing with ascii characters?",0,0,0,0.9380481243133544,0.7443193197250366,0.9596213698387146,0.0,accept,unanimous_agreement
114059185,5532,"thanks you! apart from indicating for a reader an untranslatable string literal, it also gives a hint to qstring that conversion to unicode 16 has to be done from latin-1 but not from utf-8, which is more efficient.",1,1,1,0.9863718152046204,0.9553683400154114,0.9881176352500916,1.0,accept,unanimous_agreement
114077463,5532,typo. `there're` or `there are`,0,0,0,0.981849491596222,0.9880099892616272,0.9930269122123718,0.0,accept,unanimous_agreement
114077537,5532,: you forgot to add `qlatin1string` here.,0,0,0,0.9825168251991272,0.991688907146454,0.9921472668647766,0.0,accept,unanimous_agreement
114077729,5532,got it,0,0,1,0.9009029269218444,0.929606556892395,0.904470145702362,0.0,accept,majority_agreement
114077767,5532,"imo, initial comment is right. i don't understand why `--add-paused` and `--skip-dialog` need an explicit value. their verb indicates ""pause"" or ""skip"" in the absence of value.",0,0,0,0.9749920964241028,0.9872527718544006,0.9722598195075988,0.0,accept,unanimous_agreement
114079322,5532,typos: 1. `quits` 2. `are retrieved`,0,0,0,0.9777333736419678,0.9939217567443848,0.9939858913421632,0.0,accept,unanimous_agreement
114079345,5532,curly braces aren't needed in these 3 if-blocks,0,0,0,0.9859529733657836,0.9876745343208312,0.9882561564445496,0.0,accept,unanimous_agreement
114079448,5532,curly braces aren't needed in these 3 if-blocks,0,0,0,0.9859529733657836,0.9876745343208312,0.9882561564445496,0.0,accept,unanimous_agreement
114079480,5532,i think the check should be: [code block] it is more clear that way.,0,0,0,0.9864328503608704,0.9848003387451172,0.983899474143982,0.0,accept,unanimous_agreement
114079866,5532,does anyone know why we don't print this on windows? it seems like a mistake.,-1,0,0,0.9038503766059875,0.693424642086029,0.738113284111023,0.0,accept,majority_agreement
114080689,5532,`metadata` should be treated the same as `data`. they are in plural. and i like my oldschool (and correct) english! 1. [a link] 2. [a link],1,1,1,0.9528520107269288,0.9925891160964966,0.9929377436637878,1.0,accept,unanimous_agreement
114080744,5532,i agree!,1,1,0,0.6050093173980713,0.8677336573600769,0.7651346325874329,1.0,accept,majority_agreement
114080809,5532,"i didn't write the original version of that line, so i don't know. from my perspective i don't see any reason not to include it in windows, though. if you'd like me to remove the `#ifndef q_os_win` i can do that.",0,0,0,0.9695209860801696,0.8422749042510986,0.974249541759491,0.0,accept,unanimous_agreement
114080850,5532,"i'm generally a descriptivist when it comes to language and i think at this point ""data"" and ""metadata"" can both be used as singular words as it's undeniably become a common usage. but regardless i'll make the change.",0,0,0,0.8224128484725952,0.9595693349838256,0.9118762612342834,0.0,accept,unanimous_agreement
114081051,5532,a datum? is it not used nova days?,0,0,0,0.985373318195343,0.990066409111023,0.9888591766357422,0.0,accept,unanimous_agreement
114081080,5532,"if it isn't too much trouble for you, please do.",0,0,0,0.9043641686439514,0.7699047923088074,0.793951690196991,0.0,accept,unanimous_agreement
114081095,5532,"what about cases where qbittorrent's application-wide settings are configured to a) add torrents paused by default or b) skip the dialog by default? there should be a way to override the application settings from the command line and force adding a torrent in a started state or force showing the ""add new torrent"" dialog, hence the ability to specify `--add-paused=false` or `--skip-dialog=false`. we eventually settled on having a tri-state bool command line option since it seemed like the best solution, especially since the options for whether a new torrent should be started or paused are mutually exclusive.",0,0,0,0.9716169238090516,0.990854024887085,0.988544762134552,0.0,accept,unanimous_agreement
114081155,5532,"maybe i have misunderstood the code or my comment was incomplete. why isn't it possible for user to use `--add-paused`, `--add-paused=true`, `--add-paused=false`? in this case the omission of a value should be equal to `true`. and if the user doesn't use the command switch the application wide setting should apply.",0,0,0,0.9526919722557068,0.9867375493049622,0.9311989545822144,0.0,accept,unanimous_agreement
114081231,5532,"oh, i see what you're getting at. you're correct, we could make it legal to omit a value, and have it default to what the option's name implies. i could implement that by adding an additional argument to the constructor of `tristatebooloption` that specifies what it defaults to without a value and then change it to not throw an error and use that value when no argument is specified.",0,0,0,0.97453373670578,0.9721296429634094,0.966925323009491,0.0,accept,unanimous_agreement
114081326,5532,"that said, i don't think it's the end of the world to require a value, and i am keen to see this pr completed! changing `tristatebooloption` option to work that way isn't a trivial amount of work.",1,1,1,0.956000804901123,0.8531471490859985,0.8991795778274536,1.0,accept,unanimous_agreement
114082208,5532,"okay, i'll merge it then. i'll try to make the change myself today. if you see nothing by tomorrow, feel free to open a followup pr.",0,0,0,0.86219322681427,0.8959463834762573,0.9818990230560304,0.0,accept,unanimous_agreement
111361333,6627,"according to the destructor code below, the class owns `lockfile` object. why don't you say this in the signature? or make this constructor private.",0,0,0,0.9876011610031128,0.9948615431785583,0.9943199157714844,0.0,accept,unanimous_agreement
111362196,6627,would swap this line and the next one.,0,0,0,0.9823029637336732,0.977042555809021,0.989897608757019,0.0,accept,unanimous_agreement
111363296,6627,and where is locking itself?,0,0,0,0.9850555658340454,0.991003394126892,0.989465832710266,0.0,accept,unanimous_agreement
111365172,6627,"and if file operation fails later on, then what?",0,0,0,0.9547332525253296,0.9604020714759828,0.9769688248634338,0.0,accept,unanimous_agreement
111366129,6627,why so many new files have underscore in names?,0,0,0,0.9539576172828674,0.9768685698509216,0.9736822843551636,0.0,accept,unanimous_agreement
111366416,6627,registration function seems to be called more than once. is it needed?,0,0,0,0.9882985353469848,0.9641780853271484,0.9926522374153136,0.0,accept,unanimous_agreement
111366725,6627,you schedule parsing job for the main thread? why?,0,0,0,0.9624003767967224,0.9222269654273988,0.993937849998474,0.0,accept,unanimous_agreement
111368997,6627,why not a constructor?,0,0,0,0.9615259170532228,0.9642155766487122,0.9852042198181152,0.0,accept,unanimous_agreement
111369573,6627,"cosmetic: as of time of writing there are 27 log messages with ""could not"" and 17 with ""couldn't"". could we choose a single style?",0,0,0,0.981899619102478,0.992030382156372,0.9892452955245972,0.0,accept,unanimous_agreement
111370651,6627,the following piece is partially shared with `autodownloader::setprocessingenabled(bool enabled)`. wouldn't it be nicer to refactor the common code into a function?,0,0,0,0.987816035747528,0.9948806762695312,0.9927841424942015,0.0,accept,unanimous_agreement
111370888,6627,`setrule()` does extend a collection? quite confusing!,-1,-1,-1,0.7604553699493408,0.98955500125885,0.8874167799949646,-1.0,accept,unanimous_agreement
111371264,6627,would swap this line and the next one.,0,0,0,0.9823029637336732,0.977042555809021,0.989897608757019,0.0,accept,unanimous_agreement
111371300,6627,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
111371452,6627,wounded comment :),1,1,-1,0.8030957579612732,0.994414210319519,0.980638027191162,1.0,accept,majority_agreement
111372614,6627,"consider iterators or `std::hash` to avoid unnecessary look-ups. or, better, forget already about q containers...",0,0,0,0.9825306534767152,0.9894497990608216,0.9930077791213988,0.0,accept,unanimous_agreement
111372655,6627,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
111372855,6627,which -> that,0,0,0,0.9669488668441772,0.9015390276908876,0.9765888452529908,0.0,accept,unanimous_agreement
111373164,6627,consider [code block],0,0,0,0.9862174987792968,0.9880548119544984,0.9918330907821656,0.0,accept,unanimous_agreement
111373628,6627,"consider renaming `rulesfile` into `rulesfilename`, because now this line looks confusing.",0,0,0,0.5161023139953613,0.8704163432121277,0.8470986485481262,0.0,accept,unanimous_agreement
111373731,6627,redundant call.,0,-1,-1,0.795911967754364,0.7011151313781738,0.906933605670929,-1.0,accept,majority_agreement
111374452,6627,such a strange lone change! where is the code that requires this include?,-1,-1,-1,0.9785951972007751,0.9824329614639282,0.9892160892486572,-1.0,accept,unanimous_agreement
111374901,6627,uhm... a simple short class depends on json object? are you sure?,0,0,0,0.9787230491638184,0.6521464586257935,0.989307701587677,0.0,accept,unanimous_agreement
111375207,6627,"""undefined"" is not semantically equal to ""incorrect"" , but you seems to use ""undefined"" in this way. all in all, i'm against this operator because there is no real conversion between a json value and bool value and it is illogical to pretend the other way.",-1,-1,-1,0.6882250308990479,0.6854843497276306,0.8014312982559204,-1.0,accept,unanimous_agreement
111375698,6627,what was wrong with constants?,0,0,0,0.6512269973754883,0.9296774864196776,0.7998784184455872,0.0,accept,unanimous_agreement
111376090,6627,the variable name matches nor its value nor usage. `isurlscheme`?,0,0,0,0.9801681041717528,0.9944562315940856,0.9949606657028198,0.0,accept,unanimous_agreement
111376942,6627,"this is not a fdo correct icon name. the only one that can be use here and be consistent with fdo scheme is `application-rss+xml` afaik. so, suggest the following change: [code block]",0,0,0,0.9878639578819276,0.9930720925331116,0.9936593174934388,0.0,accept,unanimous_agreement
111395425,6627,please explain what about using `m_lockfile->setparent(this);`?,0,0,0,0.9880785346031188,0.9945218563079834,0.9955543875694276,0.0,accept,unanimous_agreement
111397992,6627,"the standard way in c++ to say that a function takes ownership of an object, passed by pointer, is to take it as `std::unique_ptr `.",0,0,0,0.9888373613357544,0.9950143694877625,0.9928035140037536,0.0,accept,unanimous_agreement
111406488,6627,if you are concerned about performance you might want to use `qregularexpression` instead of making it `static`.,0,0,0,0.9811360239982604,0.9935427904129028,0.991515040397644,0.0,accept,unanimous_agreement
111411394,6627,"wanna ask, is this class serves the same purpose as `boost::optional `? ps. `boost::optional` is header only pps. c++17 has `std::optional`",0,0,0,0.9855656027793884,0.9888501763343812,0.9928194880485536,0.0,accept,unanimous_agreement
111413802,6627,just looked up `qstringliteral`. from [a link],0,0,0,0.9894242882728576,0.9927051663398744,0.9946377873420716,0.0,accept,unanimous_agreement
111414487,6627,would you want to use `qlockfile` ?,0,0,0,0.9889377355575562,0.9941587448120116,0.9941213726997375,0.0,accept,unanimous_agreement
111414568,6627,or there is `experimental/optional`. don't know what compilers have this file.,0,0,0,0.8281570076942444,0.9572144150733948,0.9870703220367432,0.0,accept,unanimous_agreement
111415301,6627,"you mean using the counterparts in std lib right? is there a catch doing so? if none, i'm all for it.",0,0,0,0.9358301162719728,0.9821107983589172,0.8820751905441284,0.0,accept,unanimous_agreement
111415581,6627,one line up.,0,0,0,0.9774948954582214,0.9725520014762878,0.9759528040885924,0.0,accept,unanimous_agreement
111421609,6627,"not sure i understand thoroughly, i see `mutex.lock()` everywhere, why not: [code block] and no more locking after that.",0,0,0,0.9520679712295532,0.9702451825141908,0.7930670976638794,0.0,accept,unanimous_agreement
111425864,6627,something's wrong with the spacing.,-1,0,-1,0.540635883808136,0.6852473616600037,0.8927710652351379,-1.0,accept,majority_agreement
111425995,6627,i don't think visibled is a word. maybe you meant visible.,0,0,0,0.9618432521820068,0.8754125237464905,0.9454405903816224,0.0,accept,unanimous_agreement
111426075,6627,in `parser::parserssarticle` you change `link` to `tmp` but not here.,0,0,0,0.9871498346328736,0.9938607215881348,0.990136742591858,0.0,accept,unanimous_agreement
111434677,6627,maybe i just chose the wrong name? this is not ipc lockfile. here i used the same approach as in bittorrent::session before. it's just a way to block certain folder from deletion while program run.,0,0,0,0.9828578233718872,0.9760053753852844,0.9407833814620972,0.0,accept,unanimous_agreement
111434927,6627,see my comment below.,0,0,0,0.9794177412986756,0.9858478307724,0.9938241243362428,0.0,accept,unanimous_agreement
111435540,6627,it's private.,0,0,0,0.960975706577301,0.9421411156654358,0.9843504428863524,0.0,accept,unanimous_agreement
111435903,6627,"afaik, qfile isn't qobject.",0,0,0,0.98139488697052,0.9485774636268616,0.9801850318908693,0.0,accept,unanimous_agreement
111445711,6627,but it is... [a link],0,0,0,0.963877022266388,0.9847723245620728,0.9933239817619324,0.0,accept,unanimous_agreement
111445824,6627,"indeed, pardon me. my next question: why do you need that `create()` function when you throw an exception if returned object is `nullptr`?",0,-1,0,0.4755002558231354,0.9454386830329896,0.9404225945472716,0.0,accept,majority_agreement
111445873,6627,"in addition to the asynchronous files write another optimization of this class is the following: when someone tries to write the same file (of course with amended contents) repeatedly in a time when a thread is busy (writing another file), only its latest version will be writte. in other words, if we add the job in the queue for file we already have an existing job, we replaced it. so your proposal is not appropriate here.",0,0,0,0.929028570652008,0.9833585619926452,0.9921104311943054,0.0,accept,unanimous_agreement
111447318,6627,oops... apparently i was too sleepy when i wrote these lines of code. but i think in this case it is not so important to do `m_lockfile->setparent(this);` or `delete m_lockfile`.,-1,-1,-1,0.9752423763275146,0.9340526461601256,0.9361011981964112,-1.0,accept,unanimous_agreement
111447392,6627,"aha, this makes better sense then. but it will not work in the unix world. you have to set immutable flag on the file. example: [a link]",0,0,1,0.9771785736083984,0.8684776425361633,0.8754490613937378,0.0,accept,majority_agreement
111448550,6627,"i do it (break program run) at a higher level. it's too simple (utility) class to do this. it should have a wider scope (for example, somewhere we may need to select a different folder, if we can't ""block"" some one).",0,0,0,0.9598168134689332,0.9701539874076844,0.9759017825126648,0.0,accept,unanimous_agreement
111449845,6627,"we can delete folder with opened for writing files on unix? damn, how to live with it? and what happens with this file from the point of view of the writing process?",-1,-1,-1,0.9665329456329346,0.965778946876526,0.8399363160133362,-1.0,accept,unanimous_agreement
111451174,6627,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
111451445,6627,asyncfilestorage emit `failed` signal.,0,0,0,0.9712368845939636,0.991031050682068,0.9840113520622252,0.0,accept,unanimous_agreement
111451713,6627,very conveniently. this is the same type of possibility as overwriting running executable. nothing. it continues to exist until closing.,0,1,0,0.9734704494476318,0.8203007578849792,0.9798212051391602,0.0,accept,majority_agreement
111452559,6627,"to separate an additional prefix from the base name of the file (which usually matches the name of the class). should i remind you why we use these additional prefixes for files in subdirectories of the project? since we can have the same file names in different subfolders, it can lead to conflict when you build using qmake (because it builds everything in one folder).",0,0,0,0.9805405735969543,0.9880580902099608,0.9923203587532043,0.0,accept,unanimous_agreement
111453224,6627,"i just didn't want to do it in some external class. admittedly, it's not the best solution. best to fix it. tell me please the best way. maybe some static initializer?",-1,-1,-1,0.8857824802398682,0.9220535159111024,0.7855227589607239,-1.0,accept,unanimous_agreement
111454006,6627,why for the main thread? queued slots are called in thread of its object. in case the parser is in another thread it will be called there. now we use parsers in another thread (`session::workingthread()`).,0,0,0,0.9888420104980468,0.9945673942565918,0.987786054611206,0.0,accept,unanimous_agreement
111454258,6627,"we can't create a valid object, if we do not get access to the folder.",0,0,0,0.9518644213676452,0.8517282009124756,0.9864071011543274,0.0,accept,unanimous_agreement
111454555,6627,a question of the project level. we mix it everywhere.,0,0,0,0.977774739265442,0.9866614937782288,0.9793354868888856,0.0,accept,unanimous_agreement
111455108,6627,"thanks, the reminder was needed.",0,1,1,0.8054554462432861,0.714855432510376,0.6860799789428711,1.0,accept,majority_agreement
111455270,6627,"yes, i would go with a static initialiser.",0,0,0,0.9869753122329712,0.9884209632873536,0.9920096397399902,0.0,accept,unanimous_agreement
111455320,6627,ok. done.,0,0,0,0.9690111875534058,0.8706185221672058,0.9630922675132751,0.0,accept,unanimous_agreement
111455522,6627,"ah, qt's thread magic... good.",1,1,1,0.9798192381858826,0.955505907535553,0.9852628707885742,1.0,accept,unanimous_agreement
111455627,6627,so `thow`then. why not?,0,0,0,0.9705882668495178,0.9891863465309144,0.9918022751808168,0.0,accept,unanimous_agreement
111456511,6627,"but this is exactly the point why use exceptions! they pass error information to the level where it can be adequately processed, and if this processing is just logging or re-throwing.",0,0,0,0.902079701423645,0.9668437242507936,0.9815762042999268,0.0,accept,unanimous_agreement
111457839,6627,but i meant that you removed the object from `m_jobs`. and it was not serialised.,0,0,0,0.9857578277587892,0.9909521341323853,0.9930433034896852,0.0,accept,unanimous_agreement
111460947,6627,"in the general case, yes. but how can you be here? to replace this with `addrule()` - `changerule()`? this will lead to a lot of checks (e.g., adding a rule with a used name, changing the rule, which is still missing).",0,0,0,0.9776161909103394,0.9889575839042664,0.993703067302704,0.0,accept,unanimous_agreement
111532456,6627,"maybe i'm behind the times (because i'm just hobbyist), but two equivalent approach existed previously: the use of exceptions or the function return codes/results. it was a matter of taste which to use. i never liked exceptions. if you have no objective arguments, then let it remain as it is.",0,-1,0,0.5426015257835388,0.5197137594223022,0.5642920136451721,0.0,accept,majority_agreement
111532703,6627,the write fails only in exceptional situations. i don't think we need this data after. the caller decides what to do in case of failure.,0,0,0,0.942266881465912,0.8741493225097656,0.9884767532348632,0.0,accept,unanimous_agreement
111561064,6627,"i, of course, disagree with you :) they are not equivalent and never were: exception handles... well, an exceptional case, clearly separating in the code a regular branch and the case of an error. i hope some time you agree with this vision. in any case, i do not insists on replacing this function with constructor + exception.",1,1,1,0.9799971580505372,0.9881269335746764,0.9805450439453124,1.0,accept,unanimous_agreement
111561290,6627,"my question is as follows: it is very easy to provide here the strong guarantee, and why don't you do that? use cases might include network attached drives.",0,0,0,0.9709268808364868,0.9537000060081482,0.9889346957206726,0.0,accept,unanimous_agreement
111572451,6627,"i dare say that you're probably wrong. once in the professional environment there is no consensus on this matter, it is impossible to objectively recognize one of these approaches is undoubtedly the best.",-1,-1,-1,0.6832147836685181,0.7504339218139648,0.5538353323936462,-1.0,accept,unanimous_agreement
111577779,6627,what do you mean exactly? should we re-add job into queue if it fails? how many times do we have to try to repeat it in case of failure?,0,0,0,0.9766994714736938,0.9825057983398438,0.9906858801841736,0.0,accept,unanimous_agreement
111578693,6627,"what? if you confusing with commented lines here i do a some optimization (see below), but i leave old code commented here to undo my changes if it is not approved.",0,0,0,0.9610865116119384,0.6676945686340332,0.9825376868247986,0.0,accept,unanimous_agreement
111579397,6627,"i'll just change it with `foreach` by value. please, no start holy war here!",-1,-1,-1,0.9781190156936646,0.6022188663482666,0.9903160929679872,-1.0,accept,unanimous_agreement
111580114,6627,"i forgot to remove it after some testing. by the way, if you're interested, i found one unpleasant thing in qsettings (apparently it refers to ini format).",0,-1,0,0.8391741514205933,0.8987695574760437,0.5736042857170105,0.0,accept,majority_agreement
111580967,6627,"we have constants now but in another way. the old approach had problems with comparison operators. what do you think, will it be better to use `boost::optional ` instead?",0,0,0,0.9831817746162416,0.9844697713851928,0.990156888961792,0.0,accept,unanimous_agreement
111581911,6627,"i just made it to be `static const` since it is unchangeable inside method and between its calls. this is a simple change (like changing the case of characters in a variable name). i don't want to be distracted by outside things in this big pr. so if something is wrong with it, i'll just take it as it was.",0,0,0,0.9042147994041444,0.8856778144836426,0.8986990451812744,0.0,accept,unanimous_agreement
111582276,6627,"we already have `application-rss+xml` icon, but it isn't i need. it has different color with other options dialog icons. what i can do in this case?",0,0,0,0.984065592288971,0.94418066740036,0.9758948683738708,0.0,accept,unanimous_agreement
111582697,6627,ok. i'll turn them into static constants.,0,0,0,0.982633650302887,0.9802219271659852,0.9927279949188232,0.0,accept,unanimous_agreement
111582886,6627,reverted there.,0,0,0,0.9637248516082764,0.9852655529975892,0.9824735522270204,0.0,accept,unanimous_agreement
111618629,6627,"i don't understand it now. i mean, i can write to a file which no longer exists on disk? okay, have to fill in the gaps in my knowledge of unix. in any case, i'm incompetent to do anything more advanced with this, so i'll leave it as is. maybe later someone will come up with a reliable way to solve this...",-1,-1,-1,0.930242955684662,0.9441216588020324,0.9750531911849976,-1.0,accept,unanimous_agreement
111620024,6627,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
111620230,6627,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
111620251,6627,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
111620391,6627,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
111621983,6627,"no, will not work. after all, i need links to the rules... will use c++11 `for`.",0,0,0,0.956563115119934,0.916431188583374,0.946555197238922,0.0,accept,unanimous_agreement
111622054,6627,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
111622205,6627,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
111622337,6627,ok. removed.,0,0,0,0.9456509947776794,0.9748153686523438,0.9720274806022644,0.0,accept,unanimous_agreement
111622476,6627,remove it here.,0,0,0,0.967358648777008,0.9843675494194032,0.991508960723877,0.0,accept,unanimous_agreement
111622838,6627,but i need to store tristatebool in json and i also need failsafe conversion from qjsonvalue. moved it from here to another place.,0,0,0,0.9848341941833496,0.9759249687194824,0.9947571754455566,0.0,accept,unanimous_agreement
111650276,6627,you forgot to change these names along the filename change. also i noticed you use `#pragma once` in half the header files but include guards in the other half.,0,0,0,0.988020360469818,0.9896823763847352,0.9929929971694946,0.0,accept,unanimous_agreement
111658378,6627,"will be fixed. almost all the files under *base/rss* have been heavily rewritten (or rather, they were created from scratch using the old code) and i decided to use `#pragma once` there. my goal was not to change it everywhere.",0,0,0,0.9600518941879272,0.9879674315452576,0.9719879627227784,0.0,accept,unanimous_agreement
111671321,6627,"well... qt names this `insert()`, stl `insert_or_assign()`. imo, both names are fine.",0,0,0,0.7773216366767883,0.9541053771972656,0.9380794167518616,0.0,accept,unanimous_agreement
111671359,6627,as you like.,0,0,0,0.902916133403778,0.9786378741264344,0.975055694580078,0.0,accept,unanimous_agreement
111671399,6627,"strong guarantee means that state of the object does not change in case of error. thus, try write an object, `throw` or `emit` when it fails or remove the object from collection when writing succeeded. then, at the upper level, you may ask user shall we try again. because maybe he will put cable back in the socket and the problem is solved?",0,0,0,0.9844914078712464,0.993770182132721,0.9888864159584044,0.0,accept,unanimous_agreement
111671463,6627,"could you leave a comment in the source code, please?",0,0,0,0.9864773750305176,0.9932739734649658,0.9946234226226808,0.0,accept,unanimous_agreement
111671531,6627,"sorry, i mistyped. the correct code: [code block] it will try to load icon ""rss-config"" from the current theme, this icon will not be found and it will try ""application-rss+xml"" (also from theme). this will be found. when system icon theme is disabled, the first one will be found.",-1,-1,-1,0.9884570240974426,0.9835246801376344,0.9777460098266602,-1.0,accept,unanimous_agreement
111671752,6627,"but this class was designed as non interactive. it's mostly for writing data with short lifetime. instructed and forgotten. write error in this case is just a coincidence (which is very unlikely), or serious problems with the hardware, the os (or brain) of the user. in the first case, it is sufficient to ignore this error and continue working (well, maybe to repeat the task if it has not yet been reset). in the second case, actually, the normal operation of the program impossible, but it is beyond the scope of this pr.",0,0,0,0.8391338586807251,0.8751108646392822,0.9219747185707092,0.0,accept,unanimous_agreement
111671823,6627,the comment below isn't enough? or i should put it here instead?,0,0,0,0.9591019749641418,0.9877580404281616,0.9872638583183287,0.0,accept,unanimous_agreement
111672468,6627,"i feel a strong temptation to copy this answer and use it next time i get a review like would you find that appropriate, sir?",-1,-1,0,0.5548202991485596,0.7168070077896118,0.5748836398124695,-1.0,accept,majority_agreement
111672576,6627,"i believe the comment would be placed better right where the question arises. although, in my code i usually use `#ifdef` in such cases: [code block]",0,0,0,0.9725672006607056,0.9845600128173828,0.9896954298019408,0.0,accept,unanimous_agreement
111674466,6627,"you should use `hasrule` here, and all the other places you are doing `m_rules.contains` you should use `rulebyname` for the else if below as well.",0,0,0,0.988941252231598,0.992588996887207,0.9955000281333924,0.0,accept,unanimous_agreement
111674532,6627,you can combine this `if` with its parent. [code block],0,0,0,0.9896389245986938,0.988283097743988,0.995804727077484,0.0,accept,unanimous_agreement
111674744,6627,"you can't set this here. it needs to be moved to either before the return below, or after this `if` block. setting it here means rules with `ignoredays` could be ignored forever. you should only be updating the last match if all match conditions, including `ignoredays`, match. i prefer you set it after the `if`, because i find it useful to know when a rule last matched, even when i'm not using ignored days.",0,0,0,0.963493824005127,0.9896613359451294,0.982131004333496,0.0,accept,unanimous_agreement
111674789,6627,there are a lot of places in your code where you nest `if` statements like this. i think you should merge them all into single statements and use `&&`,0,0,0,0.9791168570518494,0.9753980040550232,0.9782379865646362,0.0,accept,unanimous_agreement
111674952,6627,"why not give these a more human friendly name? maybe `m_url.replace(qregulareexpression(""\\w+""), ""_"")`",0,0,0,0.977395474910736,0.9911726117134094,0.9915374517440796,0.0,accept,unanimous_agreement
111675128,6627,this should be using the same scheme as the feed url for the icon. this is an existing bug that i had fixed in one of my prs. [a link],0,0,0,0.9817313551902772,0.992137610912323,0.9932960867881776,0.0,accept,unanimous_agreement
111675194,6627,answer: yes rss feeds should always be ordered by date,0,0,0,0.98127019405365,0.9814515709877014,0.9932929277420044,0.0,accept,unanimous_agreement
111675284,6627,you should be using `item::pathseparator` here,0,0,0,0.9880357384681702,0.9938761591911316,0.9957129955291748,0.0,accept,unanimous_agreement
111675400,6627,"this seems a bit lenient. how about just restricting it to word characters (\w), dash (-), and dot (.)? also, should use `item::pathseparator` so: `qstring(r""(\a\w+(%1\w+)*\z)"").arg(item::pathseparator)`",0,0,0,0.9252780675888062,0.9496179819107056,0.9880544543266296,0.0,accept,unanimous_agreement
111677988,6627,"well, it's a matter of taste... maybe i'll rework it in places where it will not break readability.",0,0,0,0.8805034160614014,0.7380604147911072,0.9201071858406068,0.0,accept,unanimous_agreement
111678164,6627,what do you mean? did i break some coding style here?,0,0,0,0.9323528409004213,0.7414551377296448,0.975583791732788,0.0,accept,unanimous_agreement
111678224,6627,please re-read the code. you're wrong. ...as it was before. ok. i'll produce two compile time branches (as suggested) and use old behavior by default.,-1,0,0,0.8496971726417542,0.5096546411514282,0.5356960296630859,0.0,accept,majority_agreement
111678266,6627,why do you need human friendly name for these files? it's not for user editing (and even reading in most cases). are you sure you really want it?,0,0,0,0.9731193780899048,0.9726856350898744,0.9511629939079284,0.0,accept,unanimous_agreement
111678298,6627,"i mean, the sorting is presentation layer job, isn't it? someone may need other sorting...",0,0,0,0.9655950665473938,0.978329598903656,0.9859253764152528,0.0,accept,unanimous_agreement
111678361,6627,"we should not limit this greatly. after all, we assume url as the last feed path item.",0,0,0,0.9832717776298524,0.9723269939422609,0.9906631708145142,0.0,accept,unanimous_agreement
111682764,6627,or even otherwise. we can skip the immediate rules file overwrite if a rule does not use ignoredays. it will be updated later. what do you think?,0,0,0,0.9872621893882751,0.9901595711708068,0.9916192293167114,0.0,accept,unanimous_agreement
111684168,6627,this universal answer caught my attention:,0,0,0,0.5372588634490967,0.8988892436027527,0.9548362493515016,0.0,accept,unanimous_agreement
111684170,6627,"i'm pretty certain i'm not. i'll walk you through what your code is doing now. say i have a rule that matches once per day, and `ignoredays = 2`. it should match every other day, but with yours, the following will happen. day 0 - should download: ` rule.lastmatch() = null` `rule.setlastmatch(0)` `if (null.isvalid())` is false. match success and download. **ok** day 1 - should ignore: `rule.lastmatch() = 0` `rule.setlastmatch(1)` `if (0.isvalid())` is true `if (1 < (0 + 2))` is true. skip. **ok** day 2 - should download: `rule.lastmatch() = 1` `rule.setlastmatch(2)` `if (1.isvalid())` is true `if (2 < (1 + 2))` is true. skip. **wrong**. this will continue forever",0,0,0,0.8988072872161865,0.9195759296417236,0.9298935532569884,0.0,accept,unanimous_agreement
111684306,6627,"actually, i also just noticed that you are using `currentdatetime` for the match date, which is also incorrect. you should be using the date from the article.",0,0,0,0.9743554592132568,0.9863471388816832,0.9900053143501282,0.0,accept,unanimous_agreement
111684934,6627,"sorry, i wrote the last comment without seeing the code (i remember it was supposed to work, so i thought that this is the case). you're right. i fixed it. also i defer all kinds of optimization yet... this is legacy behavior. fixed now.",-1,-1,-1,0.984001874923706,0.970990002155304,0.9836524724960328,-1.0,accept,unanimous_agreement
111695561,6627,"true, if you were to just do the sorting in the ui that would be fine also. how it is now though, the ui doesn't let you sort manually. i also noticed they are in the reverse order while i was testing. so either enable sorting in the current ui, with newest at the top being the default, or leave the sorting here and reverse the order.",0,0,0,0.9676535725593568,0.9850443601608276,0.985999882221222,0.0,accept,unanimous_agreement
111695690,6627,"right, i forgot about that. in that case, you can still greatly simplify the regex to my suggestion, just replace both `\w` with `[^%1]`",0,0,0,0.9747695922851562,0.967344343662262,0.9766815900802612,0.0,accept,unanimous_agreement
111695884,6627,"if you don't intend for a person to be able to read and modify them, don't store them in json. personally, there have been several times where i have wanted to view and edit this data, so i think you should store them as you are now, but make the filenames more friendly.",0,0,0,0.9746469855308532,0.9551500082015992,0.9767193794250488,0.0,accept,unanimous_agreement
111696338,6627,"i think you should use the `specialfolder::config` for this and make `conffolder = ""rss""` and `itemsfile = ""feeds.json""`. i also think you should place the download rules in the same location. only the articles should in the data folder. speaking of the config storage overall, i think you should change some of the folder names as well. here is what i think makes the most sense: `config_path/rss/feeds.json` `config_path/rss/download_rules.json` `data_path/rss/articles/normalized_feed_name.json`",0,0,0,0.949352204799652,0.991721212863922,0.976318061351776,0.0,accept,unanimous_agreement
111702886,6627,ok. i'll do it.,0,0,0,0.9717864394187928,0.9417327642440796,0.8793141841888428,0.0,accept,unanimous_agreement
111703250,6627,"sorting is still here. or this comment so annoying to you that i should remove it? as for the order... you have several times accused me for things i didn't do. this is the existing logic. if you want me to fix something in passing, make a reservation to that effect, why should i do so (why the old logic is incorrect).",-1,-1,-1,0.9720184803009032,0.9550638794898988,0.9478344917297364,-1.0,accept,unanimous_agreement
111703365,6627,"my regex mean ""have no separator at start and at end and have no two or more separators together"". do your regex mean the same?",0,0,0,0.984513819217682,0.9643861651420592,0.9945473670959472,0.0,accept,unanimous_agreement
111703806,6627,"ok. this makes sense. the one thing i don't like (in general) download rules file contains not only configuration data but also some ""state"" data that, moreover, are updated frequently (i mean lastmatch field).",0,0,0,0.9407743215560912,0.753353476524353,0.8504366874694824,0.0,accept,unanimous_agreement
111704592,6627,"first off, i apologize if my comments seemed accusatory, that wasn't my intention. i'm just trying to describe the expected behavior, and where i found that behavior doesn't align while testing. i'm aware that the sorting is still happening in the code below, i just wanted to describe why the sorting was desired. i agree with your response that performing the sorting during presentation would actually be preferred. that isn't currently what is happening though, so it is either necessary to leave the sorting below, or you could remove it from here and add it to the ui. because this diff shows everything as added code, it is extremely hard to tell which parts are new, and which parts are unchanged from before. that being said, the article list in the ui is definitely reversed in this version compared to the main version, so something must have changed somewhere.",0,0,-1,0.6296409368515015,0.4930791556835174,0.564703643321991,0.0,accept,majority_agreement
111704783,6627,"effectively, yes. mine is ""start with 1 or more non-separators, followed by 0 or more sets of 1 separator then 1 or more non-separators.""",0,0,0,0.9848347902297974,0.9849444031715392,0.99201101064682,0.0,accept,unanimous_agreement
111705341,6627,"true, but why is that a problem? we already store various other state data in the main settings that are potentially changed frequently, such as ui dimensions. it's also potentially useful to treat the lastmatch as config data as well. for instance, it could be useful to be able to clear and/or modifying that value when also using ignore days to manipulate the next time a match will occur.",0,0,0,0.9856897592544556,0.9934723377227784,0.984130561351776,0.0,accept,unanimous_agreement
111708166,6627,"i always thought this is incorrect, and i have repeatedly offered to separate settings and states. but here you are right (i thought about this too), lastmatch can be considered as settings as well.",0,0,0,0.9058881998062134,0.969268262386322,0.9392899870872498,0.0,accept,unanimous_agreement
111708425,6627,"the old code had an inconsistent structure, and i may have misunderstood something. how it needs to be sorted from the user's point of view (in the ui)?",0,0,0,0.822600781917572,0.822631299495697,0.924492597579956,0.0,accept,unanimous_agreement
111708743,6627,one more question: how articles are usually sorted in feed xml (retrieved from server)?,0,0,0,0.9865959286689758,0.988760769367218,0.9920699000358582,0.0,accept,unanimous_agreement
111731259,6627,", your memory is strange... don't forget that when you publish your own pr. in addition, the adherence of coding style is not something external, but an integral part of each coding job in the project. as for this place, i rewrote it (because it is faster than arguing here with you). , i leave it as static const. i don't see any reason why it shouldn't be static. what do you think?",-1,-1,-1,0.9358880519866944,0.9575754404067992,0.9816779494285583,-1.0,accept,unanimous_agreement
111732321,6627,"when it comes to collections, i agree `insert` is correct name. but autodownloader is not a collection of rules, it just contains a collection of rules, so `insert` here is incorrect to. but since i can't find a more appropriate name, i change it on `insertrule`, since it is more like you. although, maybe `userule` will be better?",0,0,0,0.979112148284912,0.9790224432945251,0.914234697818756,0.0,accept,unanimous_agreement
111736289,6627,", if i change my mind and i decide to use exceptions here, how should i do this? do i need to create `asyncfilestorageerror` inherited from `std::runtime_error`?",0,0,0,0.943289577960968,0.9923179149627686,0.9852509498596193,0.0,accept,unanimous_agreement
111740826,6627,"i'll let you decide, since i can't argue the slowness of `qregexp` is at construction or `qregexp.exactmatch()` (hence the suggestion above).",0,0,0,0.9876039028167723,0.9879926443099976,0.9882267117500304,0.0,accept,unanimous_agreement
111744860,6627,"the user expects to see the newest articles at the top, which is also typically the order they appear in the feed.",0,0,0,0.9871094226837158,0.9864915013313292,0.9850404262542723,0.0,accept,unanimous_agreement
111759228,6627,"hell, one small typo can become a major headache. fixed it. thank you for testing!",1,1,1,0.9609672427177428,0.9166208505630492,0.9875990152359008,1.0,accept,unanimous_agreement
111762260,6627,2017.,0,0,0,0.8757808208465576,0.9691399335861206,0.914896845817566,0.0,accept,unanimous_agreement
111765910,6627,: exactly.,0,0,0,0.9771702885627748,0.9077081084251404,0.9828324913978576,0.0,accept,unanimous_agreement
111767259,6627,"assuming your explanation, why signal serialisation error then? aren't you want to do this to let your client to do something about the error?",0,0,0,0.9598112106323242,0.9753457903862,0.9900712966918944,0.0,accept,unanimous_agreement
111767669,6627,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
111771118,6627,"really, i don't know what to do in this situation. signal to display a message in the log, while this is the only way. all the rest of the application assumes that the data/configuration folders is ok, or just trying to create them every time they want to write the file. have you any ideas (not violating the desired behavior in this class)?",-1,-1,-1,0.5857300758361816,0.7453572154045105,0.9671657681465148,-1.0,accept,unanimous_agreement
111806741,6627,"i would forward the decision to the user (human). i.e. i would, as i wrote earlier, implement the strong guarantee, and then ask user whether to try again or not. and remove the key that leads to error in the latter case.",0,0,0,0.9849368929862976,0.986814260482788,0.9935325384140016,0.0,accept,unanimous_agreement
111848348,6627,don't you need `q_disable_copy(session)` too?,0,0,0,0.9892203211784364,0.9942752718925476,0.9950748085975648,0.0,accept,unanimous_agreement
111848518,6627,isn't it a good idea to keep these things similar? all of our other singletons use the initinstance()/freeinstance()/instance() triplet. unless you want to solve a technical problem...,0,0,0,0.9748143553733826,0.6550698280334473,0.9871132969856262,0.0,accept,unanimous_agreement
111848672,6627,why not keep the old names? does the data format change here? (same to the others),0,0,0,0.9839358329772948,0.9870951771736144,0.9919918179512024,0.0,accept,unanimous_agreement
111850069,6627,should be initialized in the constructor,0,0,0,0.9855841398239136,0.9909940361976624,0.9950088262557985,0.0,accept,unanimous_agreement
111869235,6627,it will be initialized in every constructor that does not initialize it explicitly. this new syntax ensures that the field will be initialized and we can not worry that we will forget to do it in some constructor. i would strongly not recommend to ignore this initializer form and/or to prohibit it.,0,0,0,0.9534196853637696,0.9838783740997314,0.9687141180038452,0.0,accept,unanimous_agreement
111870087,6627,this is my new approach to make singletons initialization more clear. the first created object become global instance (similar approach is used in qapplication). since all our singletons must be initialized by application there is no problem. it allow to initialize singletons using its constructors. it will allow to clearly initialize inherited singletons (like guiiconprovider; we just call `new guiiconprovider`and then use `iconprovider::instance()` in base code).,0,0,0,0.973791241645813,0.982098400592804,0.9346427917480468,0.0,accept,unanimous_agreement
111872974,6627,i had some conflicts with my new config options (because of some strange/specific/buggy qsettings behavior i found). i prefer rename old options to proper names instead of trying to fit the new names. this will break only rss gui settings and make it invisible again. but it would further indicate to the user that there is now a new (revised) rss subsystem.,0,0,-1,0.5019595623016357,0.8539273142814636,0.5416922569274902,0.0,accept,majority_agreement
111879918,6627,"that's a very good theoretical idea ;) but from a practical point of view, it causes a lot of questions seem to require a separate task to solve them.",1,1,1,0.9879213571548462,0.9958297610282898,0.9948949217796326,1.0,accept,unanimous_agreement
111886263,6627,"strong guarantee. perhaps the most simple in itself. if we leave the job in the queue in case of failure, we simply overwrite it as you normally would, if updated data become available. user interaction. we can't implement this for non-interactive component. we can only delegate it in the interactive layer, but how? now we do not have a suitable notifications subsystem so that it will require to spoil the interfaces of the affected classes by ugly inappropriate signals/methods. one more question. let's say we have the ability to communicate with the user. what can he do in this case? as i said, it's either some kind of temporary glitch that does not require any response, except, perhaps, fix this event in the log and attempts to repeat writing some time ago (agree, i have to implement it), or there is a serious malfunction of the whole system (what to do in this case?). in general, if you don't have a ready solution (not abstract advice), let's leave this for a separate topic. it doesn't break current application behavior.",0,0,0,0.7589510679244995,0.7897816300392151,0.81882244348526,0.0,accept,unanimous_agreement
111958102,6627,i didn't notice that these are for gui settings. so it is ok to break them imo.,0,0,0,0.964538872241974,0.9284064173698424,0.9593562483787536,0.0,accept,unanimous_agreement
111958598,6627,"comment about consistency: iirc the rest of the settings(in settingstorage too) use ""enabled"" to denote the visibility of gui element. i am just mentioning it. do as you please here. it isn't a hard requirement for me.",0,0,0,0.9531098008155824,0.924180269241333,0.9818075895309448,0.0,accept,unanimous_agreement
111959452,6627,"so is this even better than doing it the initializer list? i think you have only one constructor here. just so you know, this design decision will result in recompilations of stuff that include this header in case we want to change the value of the variable. (i am talking about local testing. releasing requires clean builds anyway).",0,0,0,0.9780153632164,0.9752449989318848,0.9894217848777772,0.0,accept,unanimous_agreement
111968471,6627,"but this is only the default value! it does not change practically never. in any case, much less than the other members of the class.",0,0,0,0.8904734253883362,0.9338103532791138,0.96813702583313,0.0,accept,unanimous_agreement
111978253,6627,"ok leave as it is. i am not going to argue for this particular variable. under normal circumstances this value won't ever change, so further discussion is moot.",0,0,0,0.9155886173248292,0.7891360521316528,0.7410897016525269,0.0,accept,unanimous_agreement
112011015,6627,"i don't like that this resource is created not in the constructor, but is freed in the destructor. afaik, local throw/catch in `asyncfilestorage::create()` but with all the invariant set up code in the constructor would be better.",-1,-1,-1,0.962580144405365,0.562426745891571,0.9537087678909302,-1.0,accept,unanimous_agreement
112011098,6627,"if you are not going to implement the lock for unix filesystems, please leave a `// todo:` comment or anything like that.",0,0,0,0.9712028503417968,0.9924266338348388,0.9923967719078064,0.0,accept,unanimous_agreement
112011996,6627,"maybe an implementation via a critical section would be a cleaner one? just asking, did try to implement.",0,0,0,0.9743579626083374,0.986959993839264,0.9839184284210204,0.0,accept,unanimous_agreement
112020867,6627,ok. i'll redo it using constructor+exceptions.,0,0,0,0.9859695434570312,0.9846748113632202,0.993424654006958,0.0,accept,unanimous_agreement
112021204,6627,ok. i'll do it. one question on the future. is there a portable way to do this is for all unix systems? or it depends on the file system?,0,0,0,0.9739469289779664,0.9524816870689392,0.6797322630882263,0.0,accept,unanimous_agreement
112023158,6627,"so this ""concurrency"" code will be unneeded. think of it as a temporary solution. i'll change it, perhaps even along with this pr. either directly after it. as i wrote, i don't want to delay it, because the basic functionality is ready and it is required for other tasks that need to be on top of it (i mean so long-awaited web interface).",0,0,0,0.9580677151679992,0.9580751657485962,0.9354341626167296,0.0,accept,unanimous_agreement
112031761,6627,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
112042192,6627,"hmm, interesting. i didn't know that. so just a heads up: any solution applied here should be applied to the ""bt_backup"" lockfile too.",0,1,0,0.9101332426071168,0.4666769504547119,0.7050777673721313,0.0,accept,majority_agreement
112046431,6627,of course.,0,0,0,0.9671178460121156,0.981129229068756,0.9627540707588196,0.0,accept,unanimous_agreement
112095291,6627,shouldn't this be `path.isempty() || !re.match(path).hasmatch()` or do we actually want to allow empty paths?,0,0,0,0.9249526262283324,0.9908596873283386,0.9930248260498048,0.0,accept,unanimous_agreement
112096316,6627,"sorry, i just realized the regex i gave you is broken. the path separator needs escaped. the correct one is `r""(\a[^\%1]+(\%1[^\%1]+)*\z)""` it also wouldn't hurt to set `dontcaptureoption` and `optimizeonfirstusageoption`",-1,-1,-1,0.9745720028877258,0.9748194813728333,0.983350157737732,-1.0,accept,unanimous_agreement
61475406,5196,why not `qstringlist`? and fix coding style for brace-enclosed initializer.,0,0,0,0.988235354423523,0.9895650148391724,0.9934425354003906,0.0,accept,unanimous_agreement
61475829,5196,"1. don't abuse **auto**. 2. imo, it will be easier using qdiriterator.",0,0,0,0.8216661214828491,0.9516679048538208,0.9641320109367372,0.0,accept,unanimous_agreement
61476509,5196,please do not overuse the meaningless names. `torrentfile` (or just `file`) is better.,0,0,0,0.9774766564369202,0.9782196283340454,0.795396089553833,0.0,accept,unanimous_agreement
61476566,5196,as above.,0,0,0,0.978552520275116,0.9878018498420716,0.9881609678268432,0.0,accept,unanimous_agreement
61477371,5196,"what we decided on the placement of state settings? which group to put them, `state` or `gui`?",0,0,0,0.9853015542030334,0.992384672164917,0.9941028952598572,0.0,accept,unanimous_agreement
61477433,5196,inline,0,0,0,0.9861072301864624,0.9631757736206056,0.833534836769104,0.0,accept,unanimous_agreement
61477674,5196,move `?` to the start of next line,0,0,0,0.9866498112678528,0.9930058121681212,0.9943366646766664,0.0,accept,unanimous_agreement
61478081,5196,branchpath,0,0,0,0.9848816990852356,0.966707170009613,0.9788641333580016,0.0,accept,unanimous_agreement
61478294,5196,is it used outside the class?,0,0,0,0.9834114909172058,0.9910208582878112,0.9928280711174012,0.0,accept,unanimous_agreement
61478882,5196,"in this case, all these functions below are overkill. these one-line methods are only used inside the class and only once.",0,0,0,0.9774937629699708,0.973086416721344,0.8634195327758789,0.0,accept,unanimous_agreement
61489863,5196,"isn't the ""setting"" word in a configuration file superfluous? what else may be there?",0,0,0,0.9359177350997924,0.963765263557434,0.982740581035614,0.0,accept,unanimous_agreement
61489986,5196,don't believe in all-mighty compiler?,-1,-1,-1,0.7874979972839355,0.7910988926887512,0.6333237290382385,-1.0,accept,unanimous_agreement
61490906,5196,can't understand why do you convert path separators back and forth.,0,-1,0,0.8696571588516235,0.5138424038887024,0.5827710628509521,0.0,accept,majority_agreement
61491022,5196,same here (path separators).,0,0,0,0.9879180788993835,0.985545814037323,0.9938210844993592,0.0,accept,unanimous_agreement
61491876,5196,why don't you make a constant for the file extension?,0,0,0,0.9730706810951232,0.9851762056350708,0.992177188396454,0.0,accept,unanimous_agreement
61492103,5196,i would pass `qstring::skipemptyparts` here.,0,0,0,0.9857473969459534,0.9917980432510376,0.9933111667633056,0.0,accept,unanimous_agreement
61492232,5196,and perhaps trim the comment.,0,0,0,0.9859308004379272,0.9859713912010192,0.9849596619606018,0.0,accept,unanimous_agreement
61511583,5196,fixed. but end up using qdiriterator instead...,0,0,0,0.9785665273666382,0.9575907588005066,0.98066508769989,0.0,accept,unanimous_agreement
61513935,5196,"yes, funny that i forgot about it.",-1,-1,1,0.898052990436554,0.9647544026374816,0.3749861419200897,-1.0,accept,majority_agreement
61514677,5196,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
61514687,5196,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
61514933,5196,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
61515119,5196,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
61515239,5196,"nope, fixed.",0,0,0,0.959647297859192,0.937227189540863,0.973285675048828,0.0,accept,unanimous_agreement
61515343,5196,"striped ""setting"" prefix.",0,0,0,0.9866005778312684,0.9922133088111876,0.9871292114257812,0.0,accept,unanimous_agreement
61515772,5196,apparently i didn't clean it up aggressively...,-1,-1,0,0.9250321984291076,0.7789213061332703,0.8809539079666138,-1.0,accept,majority_agreement
61516120,5196,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
61516171,5196,"this should be a app-wide constant, but where should it be?",0,0,0,0.9870997667312622,0.994517147541046,0.9894359111785888,0.0,accept,unanimous_agreement
61516641,5196,it appear to do some tricks at: [a link],0,0,0,0.9823380708694458,0.9833487272262572,0.9930402040481568,0.0,accept,unanimous_agreement
61516831,5196,"no, people might want to put ascii arts in it lol",0,1,1,0.758401095867157,0.790195882320404,0.9174683690071106,1.0,accept,majority_agreement
61524310,5196,i feel stupid when creating them... i add a new commit which add a template helper to avoid repeating the same boilerplate code.,-1,-1,-1,0.9867405295372008,0.9845511317253112,0.9952345490455629,-1.0,accept,unanimous_agreement
61525083,5196,~~can't understand how the default parameter value is supposed to work: can you call `qvariant::value ()` for an empty `qvariant`? what will it return?~~ did read the documentation for `qvariant`. but still: wouldn't it be better to rephrase it in the following way: [code block],0,0,0,0.9606858491897584,0.982583224773407,0.8369280695915222,0.0,accept,unanimous_agreement
61525322,5196,is it needed to keep utf-16 here? i would use `qlatin1string`.,0,0,0,0.989766538143158,0.9946710467338562,0.9955000281333924,0.0,accept,unanimous_agreement
61525990,5196,"from qt doc: [a link] that's the worst case, so i think it will work fine. ## i think no, its probably better to try matching the `qvariant` ctor signature earlier rather than later, in case of an incompatible type results in incomprehensible compiler message.",0,0,0,0.8718298077583313,0.9756932854652404,0.9636433720588684,0.0,accept,unanimous_agreement
61526030,5196,~~fixed.~~,0,-1,0,0.8962555527687073,0.4489502310752868,0.9451676607131958,0.0,accept,majority_agreement
61526088,5196,"the next step is to rename the class into `storablevalue`, add `operator t` and `operator =(t)` and just read and write them lol",0,1,1,0.93670392036438,0.9484063982963562,0.8327842354774475,1.0,accept,majority_agreement
61526151,5196,i mean use them at the left and right sides of an assignment operator.,0,0,0,0.9864482283592224,0.9857913255691528,0.9891788959503174,0.0,accept,unanimous_agreement
61526291,5196,"thank you for the reply. excuse me, i should have read the manual before typing.",1,1,1,0.8511410355567932,0.8992984890937805,0.973344385623932,1.0,accept,unanimous_agreement
61526446,5196,"`qlatin1string` here too, please. ~~replace or add a second constructor.~~ no, replace, please. since we state that the key is an ascii sequence, `qstring` should not be used here. albeit it might make sense to add the second constructor with a `const char*` parameter.",0,0,0,0.9872165322303772,0.9928794503211976,0.9738198518753052,0.0,accept,unanimous_agreement
61528205,5196,"changed, it looks better now. thanks.",1,1,1,0.9581182599067688,0.982462763786316,0.988183319568634,1.0,accept,unanimous_agreement
61528338,5196,"i just can't get qlatin1string to work here, try it yourself. :\",-1,-1,-1,0.9870265126228333,0.9923068881034852,0.9959635734558104,-1.0,accept,unanimous_agreement
61529164,5196,"[code block] works here. but of course, it's dangerous because `qlatin1string` does not copy the data.",0,0,0,0.7132419347763062,0.798986554145813,0.9213969707489014,0.0,accept,unanimous_agreement
61529409,5196,maybe we should add one more template parameter? [code block],0,0,0,0.9876932501792908,0.9916096329689026,0.9939334988594056,0.0,accept,unanimous_agreement
61529957,5196,and i would add [code block] anyway.,0,0,0,0.9872947335243224,0.9864563941955566,0.9947616457939148,0.0,accept,unanimous_agreement
61530129,5196,"i like the result too, thank you for the idea!",1,1,1,0.990464448928833,0.9909528493881226,0.9942664504051208,1.0,accept,unanimous_agreement
61536626,5196,"imo, it's overkill.",-1,-1,-1,0.8486772179603577,0.9652641415596008,0.969392478466034,-1.0,accept,unanimous_agreement
61540919,5196,"this class has an inconsistency. we set the value using using it as variable, but get the value using it as function: [code block] also you pass default value when get its value. but, imo, the default value is life-time constant for object of this class.",0,0,0,0.9805975556373596,0.993424654006958,0.8811013102531433,0.0,accept,unanimous_agreement
61541239,5196,i think just use `qstring` to get the job done.,0,0,0,0.9859501719474792,0.9873999357223512,0.9874786138534546,0.0,accept,unanimous_agreement
61541421,5196,i think we should have `base/global.h` for such cases.,0,0,0,0.983723282814026,0.9871654510498048,0.9836909174919128,0.0,accept,unanimous_agreement
61551103,5196,"agree. how about like this: [code block] this will depend on its scope, for example, see `storedialogsize`. it's possible to expand the template like this: [code block]",0,0,0,0.9774461388587952,0.9930338859558104,0.9815486073493958,0.0,accept,unanimous_agreement
61551357,5196,how about `storageunit`? is it any better?,0,0,0,0.9861836433410645,0.9932343363761902,0.9943536520004272,0.0,accept,unanimous_agreement
61553959,5196,done. i'll update later.,0,0,0,0.9675452709197998,0.9797617197036744,0.9751899242401124,0.0,accept,unanimous_agreement
61559630,5196,"this sounds like a bad design in general. but in this case you have another error. since we use this helper, we need to make these objects to be members of the class whose settings they handle. void set(const t &value) const t operator() (const qvariant &defaultvalue = qvariant()) const // get imo, it's better to use `operator=()` and `operator t()` so we can use it as variable: [code block]",-1,0,-1,0.9485923647880554,0.91944420337677,0.8245893120765686,-1.0,accept,majority_agreement
61562877,5196,`settingsstorage` -> `setting` (or `settingvalue`),0,0,0,0.9884793162345886,0.9930127263069152,0.9941595792770386,0.0,accept,unanimous_agreement
61569140,5196,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
61570794,5196,"for me, overkill is the storing ascii text in utf-16, overkill is the usege of `qvariant` (two words) when in the overwhelming majority of cases the value is either `bool` or a number. a bit of additional work for compiler is not an overkill.",0,0,0,0.98324316740036,0.9801960587501526,0.970343828201294,0.0,accept,unanimous_agreement
61572002,5196,"besides, whould there be `t m_defaultvalue` we can add a bit of reflection and store enum identifiers.",0,0,0,0.9892849326133728,0.9939332604408264,0.9938262104988098,0.0,accept,unanimous_agreement
61572232,5196,"the `const` here looks fun. btw, you can declare m_keyvalue as `const`.",1,1,1,0.7584129571914673,0.9317628741264344,0.9340115189552308,1.0,accept,unanimous_agreement
61573221,5196,how about i use [code block],0,0,0,0.9866316914558412,0.9906559586524964,0.9944108128547668,0.0,accept,unanimous_agreement
61573302,5196,what? what fun? why m_keyvalue as const?,0,-1,1,0.8838028907775879,0.6638247966766357,0.6808905005455017,,review,no_majority_disagreement
61573773,5196,we write a value into an object (which we can read back) via a const-function. isn't it fun? why not? it does not change.,0,0,1,0.9592676758766174,0.8774416446685791,0.5597451329231262,0.0,accept,majority_agreement
61574386,5196,"and maybe, the constructor has to have the following signature: [code block]",0,0,0,0.9868502616882324,0.9936018586158752,0.9928452372550964,0.0,accept,unanimous_agreement
61574428,5196,"oh, i see it now. i really don't write templates much :\",-1,-1,-1,0.989422619342804,0.6725702881813049,0.9963173866271972,-1.0,accept,unanimous_agreement
61577294,5196,"but that is not likely to happen... what about like this, is there going to be any problems? [code block]",0,0,0,0.8293975591659546,0.9220224022865297,0.9064761400222778,0.0,accept,unanimous_agreement
61577953,5196,"looks good to me. `settingstorage::loadvalue(const char*,...)` and `settingstorage::storevalue(const char*, ...)` would be a valuable addition. [code block] would be nice to have too.",1,1,1,0.974298059940338,0.9731192588806152,0.9860403537750244,1.0,accept,unanimous_agreement
61578612,5196,"no, with `qvariantmap` inside this just does not make any sense.",-1,0,0,0.753307580947876,0.9672545790672302,0.8953683972358704,0.0,accept,majority_agreement
61579340,5196,"oh, i forgot to close the template brackets. i meant: [code block]",0,0,0,0.9563150405883788,0.8686373233795166,0.9639567732810974,0.0,accept,unanimous_agreement
61580896,5196,"i still don't understand your concerns about `qvariant` and `t` conversion. if the type is not registered, `qvariant` triggers a nice `static_assert`. could you explain, please, what is the advantage of your approach?",0,0,0,0.803298830986023,0.944551169872284,0.7288738489151001,0.0,accept,unanimous_agreement
61581289,5196,"you know how to bring everything to the absurd! are you trying to save a few bytes in the string, but you're going to generate a bunch of classes (template instances).",-1,-1,-1,0.8762850165367126,0.9847197532653807,0.7619746327400208,-1.0,accept,unanimous_agreement
61582125,5196,"don't know if this make sense: if i wrote `explicit storablevalue(const std::string &keyname, const t &defaultvalue = t())` then i'll have to worry about if `t()` exists or not.",0,0,0,0.8987569212913513,0.955715000629425,0.555360734462738,0.0,accept,unanimous_agreement
61582378,5196,aren't you relying on the same `t()` when you pass an empty `qvariant` to `qvariant::value()`?,0,0,0,0.986060619354248,0.9934473633766174,0.9933404326438904,0.0,accept,unanimous_agreement
61582750,5196,"but what is the overhead from a class in the application? this is not a library, we don't export rtti.",0,0,0,0.9547613859176636,0.9682904481887816,0.986968457698822,0.0,accept,unanimous_agreement
61583368,5196,"let me express it in another way: `settingsstorage::storevalue(const qstring &key, const qvariant &value);` it uses `qvariant` so i just forward it to here. so another dev won't have to track back to `settingsstorage` to find it only accept `qvariant` type.",0,0,0,0.9859790205955504,0.9903226494789124,0.9937631487846376,0.0,accept,unanimous_agreement
61686796,5196,why didn't you change these variables to class members?,0,0,0,0.9609431624412536,0.9915598034858704,0.9880133867263794,0.0,accept,unanimous_agreement
61861124,5196,"if moving these to the header file, it could look like this [code block]",0,0,0,0.9874979853630066,0.9952259063720704,0.994024693965912,0.0,accept,unanimous_agreement
61861757,5196,a pimpl may be the solution you are looking for.,0,0,0,0.9858826398849488,0.9890077114105223,0.9908310770988464,0.0,accept,unanimous_agreement
61863208,5196,"you love to complicate everything! you don't need to have `#define settings_key(name) ""torrentcreator/"" name` in the header! torrentcreatordlg.h: [code block] torrentcreatordlg.cpp: [code block]",1,1,1,0.9816827774047852,0.9894017577171326,0.8181745409965515,1.0,accept,unanimous_agreement
61865735,5196,"no, it is not the case. nor the `storablevalue` instances nor `settingstorage.h` include are parts of the class interface.",0,0,0,0.9877843260765076,0.9944795370101928,0.9906612038612366,0.0,accept,unanimous_agreement
61871195,5196,don't forget about forward declaration.,0,0,0,0.9738924503326416,0.9232905507087708,0.993058443069458,0.0,accept,unanimous_agreement
61874926,5196,"oh, i'm sorry, we don't use pointers here (and it would be extremely inconvenient), so forward declaration is not suitable here. but in this case pimpl is overkill too.",-1,-1,-1,0.9832573533058168,0.9929760694503784,0.98622328042984,-1.0,accept,unanimous_agreement
62015345,5196,done. we can refactor this later if needed.,0,0,0,0.9743738770484924,0.9894044399261476,0.970527172088623,0.0,accept,unanimous_agreement
62016784,5196,"don't forget about the coding style! we use `m_` prefix for private fields. i have used it in my examples, but you didn't see it... :(",-1,-1,-1,0.991363286972046,0.993073046207428,0.996347725391388,-1.0,accept,unanimous_agreement
62017254,5196,"i'm sorry, the style is fixed now.",-1,-1,-1,0.9868701100349426,0.9928750991821288,0.9930758476257324,-1.0,accept,unanimous_agreement
62438540,5196,we didn't decide under what name to put the state settings. my opinion is to put them under `state` and each class should use a generic name for their name. for example `state\torrentcreator\dimensions` and not `state\torrentcreatordlg\dimensions`,0,0,0,0.983857035636902,0.9894285798072816,0.9868366718292236,0.0,accept,unanimous_agreement
62438686,5196,you don't need the braces.,0,0,0,0.980806529521942,0.9741926193237304,0.987515926361084,0.0,accept,unanimous_agreement
62438700,5196,why this check? can't the user drop both kinds of files simultaneously?,0,0,0,0.9715172052383424,0.955931842327118,0.982471525669098,0.0,accept,unanimous_agreement
62448678,5196,"2 reasons that i can think of: 1. the user might be confused when he saw 2 different dialogs pop up at the same time, he might want to download or upload but not 2 at the same time, i doubt anyone will want to mix download/upload together. 2. the addnewtorrentdialog is a modal dialog which could be a problem (dialogs overlap and user cannot switch to another) when multiple dialogs pop up at the same time.",0,0,0,0.960494875907898,0.9241753220558168,0.9670845866203308,0.0,accept,unanimous_agreement
62448764,5196,"fixed, i'll push later.",0,0,0,0.98361337184906,0.9877886176109314,0.9931610822677612,0.0,accept,unanimous_agreement
64773952,5196,pr updated.,0,0,0,0.9796158075332642,0.9867376685142516,0.987762689590454,0.0,accept,unanimous_agreement
64776464,5196,remove space between `=` and `(`,0,0,0,0.971498429775238,0.9925601482391356,0.990709662437439,0.0,accept,unanimous_agreement
64777808,5196,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
64863958,5196,fix this method signature too. no spaces between name and start `(`. [code block],0,0,0,0.9882633090019226,0.9939728379249572,0.9955328702926636,0.0,accept,unanimous_agreement
64869956,5196,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
116289958,5196,"since already added `cachedsettingvalue`, i think this pr has to use that class.",0,0,0,0.9887557625770568,0.9862385988235474,0.9934881925582886,0.0,accept,unanimous_agreement
116290693,5196,"do not insist, but i would use `std::partition()` here without explicit loop and two additional containers.",0,0,0,0.9875742793083192,0.9785283207893372,0.9927645325660706,0.0,accept,unanimous_agreement
116291146,5196,how does it differ from [code block],0,0,0,0.9813643097877502,0.992641031742096,0.9943197965621948,0.0,accept,unanimous_agreement
116298545,5196,"iirc, the 2 classes are different in some ways... i don't wish to muddle into it again... :face_with_crossed-out_eyes:",-1,-1,-1,0.5793732404708862,0.9351518154144288,0.9811252355575562,-1.0,accept,unanimous_agreement
116300031,5196,this is a stub that *might* (or not) expand later to create many torrents at once (if there is an option for it)...,0,0,0,0.97611802816391,0.9912418127059937,0.9882621169090272,0.0,accept,unanimous_agreement
116301345,5196,it's not performance critical and the current ways are easier to read imo. i will keep the current code.,0,0,0,0.9647595286369324,0.8757025003433228,0.9618012309074402,0.0,accept,unanimous_agreement
116305672,5196,but **cachedsettingvalue** is enough. why to create one more class?,0,0,0,0.9665489792823792,0.9903447031974792,0.993093967437744,0.0,accept,unanimous_agreement
116310163,5196,sure. but the readability is exactly what i meant here :),1,1,0,0.9546231627464294,0.9742636680603028,0.8817542791366577,1.0,accept,majority_agreement
116310258,5196,"could you add a comment on this topic to the code then, please?",0,0,0,0.9865627884864808,0.9921466708183287,0.9950633645057678,0.0,accept,unanimous_agreement
116353879,5196,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
116354470,5196,"no, it's not, at least not in current form, see `m_storedialogsize` in this pr. i'll need to add: [code block] ~~**updated2**~~ **this won't work in this case**",0,0,0,0.9799599647521972,0.9895472526550292,0.9901189804077148,0.0,accept,unanimous_agreement
116355272,5196,you're fixated on your current implementation. look at the world wider. why do you need setting a default value every time? why do you need storing the default value in the config file? just do the following in torrentcreatordlg constructor initializer list: [code block],0,0,0,0.983937919139862,0.9677813649177552,0.9032639861106871,0.0,accept,unanimous_agreement
116355698,5196,"and you ignore/forget that the `size()` here gives not the preferred size specified in .ui files. here it returns {100, 30} which is too small. not i want that, only because the true `size` value is populated then. what default value? the `size()` below returns the dialog size *after* the user resizes!",0,0,0,0.9616660475730896,0.7672194838523865,0.5580068826675415,0.0,accept,unanimous_agreement
116357246,5196,or initialize it later... [code block],0,0,0,0.9848685264587402,0.9921541810035706,0.995844542980194,0.0,accept,unanimous_agreement
116357719,5196,"here it returns {100, 30} which is too small. oops... really, i forgot it. using pointer to **cachedsettingvalue** breaks its goals (we can't use `var = m_settingvalue` etc.). but you can use it the following way: [code block] in constructor and then: [code block]",-1,-1,0,0.9462653994560242,0.9545448422431946,0.7946048378944397,-1.0,accept,majority_agreement
116358551,5196,"sorry, i was misleading in my previous code snippet, that doesn't work since `size().isvalid()` returns `true` in member initializer list. so this suggestion won't work too. you still can by dereferencing the pointer... it's a bit ugly but this (`m_storedialogsize`) is a special case , other class variables can use `cachedsettingvalue` with no modifications. imo using a cachedsettingvalue pointer is the easiest way now.",-1,-1,-1,0.9795365333557128,0.9905405044555664,0.989392876625061,-1.0,accept,unanimous_agreement
116358864,5196,"why? `m_storedialogsize(settings_key(""dimension""))` uses default constructed qsize which is invalid.",0,0,0,0.980315089225769,0.9893742203712464,0.9821142554283142,0.0,accept,unanimous_agreement
116361033,5196,"you are right, i'll update it.",0,0,0,0.9403337240219116,0.920226514339447,0.8610021471977234,0.0,accept,unanimous_agreement
116377062,5196,how about constant from globals.h?,0,0,0,0.9865025281906128,0.9923557043075562,0.9927672147750854,0.0,accept,unanimous_agreement
116377182,5196,ui -> m_ui,0,0,0,0.9840881824493408,0.962521195411682,0.9712228178977966,0.0,accept,unanimous_agreement
116377219,5196,can you also fix the names from ui?,0,0,0,0.9891136884689332,0.9946211576461792,0.9958362579345704,0.0,accept,unanimous_agreement
116377474,5196,terminate() isn't working on some platforms.,0,0,0,0.7599917650222778,0.8263404369354248,0.9728485941886902,0.0,accept,unanimous_agreement
116379888,5196,"what do you mean? or what do you suggest? as you can see, here i meant to force stopping the torrent creating process.",0,0,0,0.9739485383033752,0.9847379326820374,0.9915663599967957,0.0,accept,unanimous_agreement
116386174,5196,"if did not mean that there is no way to terminate another thread in general case, i would like to point this out. and if it is not joinable after calling `m_creatorthread->abortcreation()`, there is no much one can do with a hanged thread.",0,0,0,0.9607248902320862,0.9863881468772888,0.9894668459892272,0.0,accept,unanimous_agreement
116413922,5196,"i shall review the torrent creating thread, its termination is not working as i thought...",-1,0,0,0.7263864278793335,0.6678085923194885,0.989849328994751,0.0,accept,majority_agreement
116421600,5196,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
116431823,5196,"added 1 new commit, i've removed `terminate()` as i thought it can force stop a busy operation but in reality, it cannot.",0,0,0,0.9839259386062622,0.9883602857589722,0.9913851022720336,0.0,accept,unanimous_agreement
116717883,5196,"no, it still not done. or you misunderstood me. i mean the names inside ui::torrentcreatordlg class (i.e. inside .ui file).",0,0,0,0.9649934768676758,0.8971770405769348,0.9733632206916808,0.0,accept,unanimous_agreement
116998596,5196,i've only replaced the variables that appears in .cpp file.,0,0,0,0.9837000966072084,0.9898077845573424,0.9934821724891664,0.0,accept,unanimous_agreement
117005591,5196,then the line above isn't needed too.,0,0,0,0.9850542545318604,0.9817795157432556,0.9895564913749696,0.0,accept,unanimous_agreement
117024432,5196,removed.,0,0,0,0.9311882257461548,0.9782117605209352,0.9612457156181335,0.0,accept,unanimous_agreement
99811018,5287,the `if()` looks redundant to me.,0,0,0,0.9062038660049438,0.5307928919792175,0.9713397026062012,0.0,accept,unanimous_agreement
99811073,5287,`const qstring &matchedepisode`?,0,0,0,0.987806499004364,0.9923341274261476,0.9947991371154784,0.0,accept,unanimous_agreement
99811161,5287,coding style.,0,0,0,0.9849669337272644,0.9589239358901978,0.9877970814704896,0.0,accept,unanimous_agreement
99811265,5287,`return qstring();`,0,0,0,0.9845380783081056,0.9896047115325928,0.991746425628662,0.0,accept,unanimous_agreement
99811882,5287,"not a merge blocker here, just too many indentation... is it possible to refactor it? something like `if (episodestr.isempty()) return false;` style...",0,0,0,0.9447972178459167,0.8344724178314209,0.9483658671379088,0.0,accept,unanimous_agreement
99812067,5287,`if (!m_smartfilter) return;`,0,0,0,0.982124924659729,0.9911848902702332,0.9926328063011168,0.0,accept,unanimous_agreement
99812465,5287,should use `foreach()`,0,0,0,0.9862518906593324,0.9928724765777588,0.9946475625038148,0.0,accept,unanimous_agreement
99812533,5287,`foreach` here too,0,0,0,0.9843847751617432,0.9911913275718688,0.9936956763267516,0.0,accept,unanimous_agreement
99812616,5287,"`nullptr`, don't mind the old code.",0,0,0,0.8634625673294067,0.8469024896621704,0.8936598300933838,0.0,accept,unanimous_agreement
99812764,5287,add space: `qmessagebox::yes | qmessagebox::no`,0,0,0,0.8161109089851379,0.9935349225997924,0.994872748851776,0.0,accept,unanimous_agreement
99813585,5287,strip out html headers,0,0,0,0.9869758486747742,0.9590091109275818,0.9945839047431946,0.0,accept,unanimous_agreement
99814846,5287,"and pardon for doing reviews at the last minute, i only noticed this pr and no dev commented on it.",0,-1,-1,0.5080063343048096,0.952987551689148,0.6138195395469666,-1.0,accept,majority_agreement
99831896,5287,also here is a better string with no grammatical or syntax errors. [code block],0,0,0,0.9819465279579164,0.986244022846222,0.992803990840912,0.0,accept,unanimous_agreement
99865110,5287,"i don't think changing this to a reference makes any real difference, as either way its initializing one `qstring` using the given c string. however i could see a point to making it `static const qstring` just to make sure it doesn't accidentally leak into any other file.",0,0,0,0.974740982055664,0.9873778223991394,0.979761242866516,0.0,accept,unanimous_agreement
99866301,5287,or even `return {}`;,0,0,0,0.9865756630897522,0.9919535517692566,0.9932097792625428,0.0,accept,unanimous_agreement
99867001,5287,of range-based `for`,0,0,0,0.9850753545761108,0.9925036430358888,0.9940434098243712,0.0,accept,unanimous_agreement
99868175,5287,`// see` (whitespace),0,0,0,0.987981140613556,0.9880443215370178,0.995091199874878,0.0,accept,unanimous_agreement
99868227,5287,whitespace,0,0,0,0.98747456073761,0.9243230819702148,0.9755821228027344,0.0,accept,unanimous_agreement
99870010,5287,"the code here would not differ significantly from checks in `downloadrule::matches()` then. probably, it has to be refactored into a function.",0,0,0,0.9886926412582396,0.9930030703544616,0.9879440069198608,0.0,accept,unanimous_agreement
99910502,5287,this line and the next one have to be joined.,0,0,0,0.9757958054542542,0.9848127961158752,0.9816505908966064,0.0,accept,unanimous_agreement
99910730,5287,whitespace,0,0,0,0.98747456073761,0.9243230819702148,0.9755821228027344,0.0,accept,unanimous_agreement
99910847,5287,"though the `qregexp` that yields the value of `matchedepisode` is case insensitive, this test will still erroneously fail if the episode number in the article name is using lower case letters, e.g. `s01e01`.",0,0,0,0.9851962327957152,0.9906302094459534,0.9815402626991272,0.0,accept,unanimous_agreement
99911276,5287,this `qregexp` should also be case insensitive.,0,0,0,0.98111754655838,0.9914816617965698,0.9926108717918396,0.0,accept,unanimous_agreement
99911525,5287,this `qregexp` should also also be case insensitive.,0,0,0,0.9828096628189088,0.9918306469917296,0.9930397272109984,0.0,accept,unanimous_agreement
99914351,5287,"i don't use rss rules and have no idea about common episode naming rules, but here are my two cents: wouldn't it be easier to convert the article name to uppercase before matching and keep regexps simpler?",0,0,0,0.8519758582115173,0.9399878978729248,0.923496961593628,0.0,accept,unanimous_agreement
99917394,5287,"no, this is rubbish, because `qregexp` has case insensitivity option.",-1,-1,-1,0.9623778462409972,0.974721372127533,0.8882122039794922,-1.0,accept,unanimous_agreement
113849597,5287,these two lines is redundant. this method is for import old rules settings (not containing your new fields).,0,0,0,0.9681113958358764,0.98533833026886,0.9845074415206908,0.0,accept,unanimous_agreement
113849934,5287,is the method above not enough?,0,0,0,0.8465940952301025,0.9837355613708496,0.984321355819702,0.0,accept,unanimous_agreement
113855462,5287,"why do you have it outside matches() method? at least, this method has inappropriate name, since it's unclear what we're doing at this point.",0,0,0,0.6275028586387634,0.5347287058830261,0.9398595094680786,0.0,accept,unanimous_agreement
113855605,5287,"is ""mark as unread"" is useful from user point of view? when might we need it?",0,0,0,0.9876486659049988,0.9923227429389954,0.9912551641464232,0.0,accept,unanimous_agreement
113855689,5287,"change to ""previouslymatchedepisodes"".",0,0,0,0.9828625321388244,0.9894988536834716,0.993374526500702,0.0,accept,unanimous_agreement
113855747,5287,"iirc, we use qregularexpression in new code.",0,0,0,0.989365816116333,0.9900166392326356,0.9926069974899292,0.0,accept,unanimous_agreement
113984678,5287,"right, but i had old settings that needed importing, and anyone who's been using this patch will also have settings that they might like importing (since remembering what's been downloaded is the point of this patch), it would be nice if this can be kept.",0,0,0,0.9277383089065552,0.908350110054016,0.8610863089561462,0.0,accept,unanimous_agreement
113984947,5287,"i wrote it to make testing easier, but it is the only way to undo an accidental mark all read.",0,0,0,0.9689288139343262,0.9801545739173888,0.9804731607437134,0.0,accept,unanimous_agreement
113985728,5287,"the code can't go in matches as that is called from many places, and we have to know when a match caused a download, so we need a way for the downloader to tell the rule it has matched an episode and it will be downloaded so the rule can add that article to the previously matched episodes. what's a more appropriate name, articlematched? rulematched?",0,0,0,0.9788721203804016,0.983919322490692,0.9926581978797911,0.0,accept,unanimous_agreement
113993177,5287,"why we need to undo it? it breaks the application logic, isn't it? , what do you say about it?",0,0,0,0.6977751851081848,0.6604475975036621,0.9415366053581238,0.0,accept,unanimous_agreement
113994578,5287,"we shouldn't add this code to mainstream. this is nonsense to add backward compatibility with never existing things (from the point of view of mainstream code). those who were able to use your changes, will be able to import this in some way.",-1,-1,-1,0.8758352994918823,0.8753537535667419,0.9257479906082152,-1.0,accept,unanimous_agreement
113996894,5287,"speaking as someone who's been using a build of qbt with an older version of this pr merged in, i don't mind if i have to set up smart filters again or if it loses track of which episodes have downloaded when this feature is part of an official build. i pretty much figured that would happen at least once when i started testing the feature out.",0,0,0,0.8420509696006775,0.939437747001648,0.7081574201583862,0.0,accept,unanimous_agreement
113997290,5287,"ok, i'll remove it",0,0,0,0.9847356081008912,0.9819158315658568,0.9942445158958436,0.0,accept,unanimous_agreement
114008173,5287,"i actually think this is a useful feature. it is something i had been considering adding as well, so i don't mind it being added as part of this.",1,1,1,0.5860515236854553,0.6291821599006653,0.982470154762268,1.0,accept,unanimous_agreement
114009913,5287,do we actually want to consider the previous matches for equality? i think we shouldn't.,0,0,0,0.9170503616333008,0.9812214970588684,0.980715274810791,0.0,accept,unanimous_agreement
114010283,5287,"also, make `episoderegex` an actual `qregularexpression` object, don't initialize it here every time. you should also set `extendedpatternsyntaxoption` and break your pattern onto multiple lines to make it easier to read.",0,0,0,0.9881017208099364,0.993154525756836,0.9944847226142884,0.0,accept,unanimous_agreement
114023879,5287,i think you should rework the episoderegex to used named capture groups for the season and episode portions of each pattern. then you can get rid of this entire `if/else if` construct and extract the values directly from the match object. it would be something like: `(? s\d+)(? e\d+)|(? \d+)x(? \d+)|...` you should also set the `dontcaptureoption` in this case so you can use clarifying parens without them interfering with the captures,0,0,0,0.9772802591323853,0.9908128380775452,0.9825499057769777,0.0,accept,unanimous_agreement
114024010,5287,"1. why is is const, could it be useful for a user to make a change to it? 2. suggest to use raw string literal here and with other regexes too.",0,0,0,0.9873175024986268,0.9934563040733336,0.993137001991272,0.0,accept,unanimous_agreement
114024258,5287,"case insensitivity is quite a voluntaristic decision, isn't it?",-1,0,-1,0.690715491771698,0.5191531181335449,0.7328324317932129,-1.0,accept,majority_agreement
114024994,5287,use `usesmartfilter()` instead of accessing `m_dataptr` directly. same everywhere else that is accessing values directly through `m_dataptr` instead of the getter.,0,0,0,0.9888837337493896,0.9947671890258788,0.994272232055664,0.0,accept,unanimous_agreement
114025226,5287,"agreed. since this is done via full assignment, and not modified with add/remove, not much is gained by having an explicit clear method.",0,0,0,0.983778476715088,0.9917269945144652,0.9923323392868042,0.0,accept,unanimous_agreement
114025877,5287,"if the article is being disconnected after being marked read, it would need to be reconnected here.",0,0,0,0.983481228351593,0.98385888338089,0.9915881752967834,0.0,accept,unanimous_agreement
114027138,5287,now why this comparison is not case insensitive?,0,0,0,0.9143285751342772,0.9611656665802002,0.6863828897476196,0.0,accept,unanimous_agreement
114028135,5287,redundant variable: [code block],0,0,0,0.9824296236038208,0.9866905212402344,0.9940947890281676,0.0,accept,unanimous_agreement
114029142,5287,"the question is not strictly clear, as to me. i would add ""list"" to point out that there is a list of episodes and the list will be cleared, not episodes themselves.",0,0,0,0.9656567573547364,0.9330480098724364,0.9900013208389282,0.0,accept,unanimous_agreement
114029480,5287,i can't find this icon in the qbt built-in theme.,0,0,0,0.9428049325942992,0.9449991583824158,0.9619752764701844,0.0,accept,unanimous_agreement
114030165,5287,isn't this marker present already in `autodownloadrule::matches()`?,0,0,0,0.9857937693595886,0.9945185780525208,0.995039403438568,0.0,accept,unanimous_agreement
114031843,5287,disagree: those who do not use this feature shall not pay for it with their memory.,0,0,0,0.5716056227684021,0.8267942070960999,0.6803609728813171,0.0,accept,unanimous_agreement
114042659,5287,"i actually think it should be a `static const` defined inside the function. that would prevent it from using any memory for those that don't use it, and avoid the large overhead of constantly rebuilding and executing a complicated regex that hasn't been compiled.",0,0,0,0.9827667474746704,0.9815425276756288,0.9798076152801514,0.0,accept,unanimous_agreement
114046330,5287,since this feature implemented incorrectly.,0,0,0,0.8609605431556702,0.7795103788375854,0.7965207695960999,0.0,accept,unanimous_agreement
114046350,5287,"in any case, it is implemented incorrectly now. so if this is a really useful feature, we have two options: 1. i quickly implement it in compliance with the current design of rss subsystem 2. i'll leave it to the author of this pr (i'm not sure he'll do it correctly at once)",0,0,0,0.9706201553344728,0.9261897206306458,0.9024407267570496,0.0,accept,unanimous_agreement
114110622,5287,"i just tried doing this with named groups, but it seems that duplicate named groups are not allowed. this means i'd need to use 5 separate groups and a bunch of if/else if to extract the correct one. i remember having the issue with normal groups, hence how the code is written at the moment. i'll see if i can rewrite that method to be simpler.",0,0,0,0.9677979946136476,0.9764339923858644,0.9653111696243286,0.0,accept,unanimous_agreement
114232045,5287,"well that's unfortunate. that being the case, how about one of these options? 1. use captured groups for each component and identify the match by the `lastcapturedindex()`. since you are always capturing in pairs, episode should always be `lastcapturedindex()` and season `lastcapturedindex() - 1` 2. use an array of patterns using named captures and take the first that matches. this would likely be the cleanest in terms of code readability and maintenance , but has a high overhead.",-1,-1,-1,0.9687097668647766,0.9793609976768494,0.961452841758728,-1.0,accept,unanimous_agreement
117911607,5287,please don't produce such long lines. split this line into two.,0,-1,-1,0.5209490656852722,0.552449107170105,0.8634715676307678,-1.0,accept,majority_agreement
117912063,5287,wouldn't `clearselectedruledownloadedepisodes()` be more correct?,0,0,0,0.9838412404060364,0.9932405948638916,0.9924802780151368,0.0,accept,unanimous_agreement
117913612,5287,please use another indentation. e.g.: [code block] you have too much empty space on the left.,0,0,0,0.9178017377853394,0.9808355569839478,0.9898338317871094,0.0,accept,unanimous_agreement
117913714,5287,our coding style require split lines before operators.,0,0,0,0.9856199026107788,0.9857823848724364,0.9892039895057678,0.0,accept,unanimous_agreement
117914291,5287,"although not mandatory, but it is better to omit the curly braces if there is only one line (exactly, one statement) inside. upd: this comment affects some other places in your code too.",0,0,0,0.9851981997489928,0.990843951702118,0.9928532242774964,0.0,accept,unanimous_agreement
117914998,5287,i don't see definition of this method.,0,0,0,0.8441003561019897,0.5422379970550537,0.9397700428962708,0.0,accept,unanimous_agreement
117918520,5287,there is some incorrect logic. why is `computeepisodename()` called twice for the same article? here is my solution: 1. create `mutable` field in **autodownloadruledata** struct named *lastepisodename* 2. store last episode name inside `autodownloadrule::matches()` 3. create the following method (instead of your `autodownloadrule::matched()`): [code block] 4. call `rule.storelastmatch(job->articledate);` instead of `rule.setlastmatch(job->articledate); rule.matched(job->articletitle);` what do you say?,0,0,0,0.9768434762954712,0.9923900961875916,0.9078011512756348,0.0,accept,unanimous_agreement
117919099,5287,move these fields to the other non-`mutable` fields.,0,0,0,0.985666573047638,0.9915779829025269,0.9907451868057252,0.0,accept,unanimous_agreement
117919584,5287,move these property getters/setters to the other getters/setters.,0,0,0,0.9878910779953004,0.9896692633628844,0.9947201013565063,0.0,accept,unanimous_agreement
118100016,5287,"that method seems like it would be very easy for lastepisodename to be leaked at some point. and it's a lot of effort to go to, just to avoid a duplicate call to computeepisodename(), which only happens when there is a match.",0,0,0,0.938003957271576,0.98206627368927,0.7365934252738953,0.0,accept,unanimous_agreement
118433983,5287,"yes. this ""duplicate call"" is maybe not so bad in itself, but it indicates wrong logic in the code. agree. it was not a good example. i thought about it. then we just need to achieve a consistent interface and behavior. we just need to do some things explicitly: 1. keeping last matched episode name is correct behavior 2. get last matched episode name is correct interface (like in regular expressions, we can get some matched data) 3. having `appendpreviouslymatchedepisode()` is good idea (and correct interface) we get the following: [code block]",0,1,0,0.808965802192688,0.515004575252533,0.5429045557975769,0.0,accept,majority_agreement
118434989,5287,"another thing i don't like are ""previously matched episode"" word combination in interface method names (as well as currently used ""last match""). one gets the impression that we fit in class internals. it would be nice to use a more appropriate concept. i'm not forcing you to do it here - it's just my thoughts. maybe something like ""exclude episode name""...",-1,0,-1,0.754956841468811,0.731690526008606,0.6644396781921387,-1.0,accept,majority_agreement
119472957,5287,"i've just been trying to implement this, but i came across the fact the matches method is const, and can't have side effects. that makes saving the computed episode name impossible. i think the correct solution is to have the matches method return an instance of a new object if it does match (which is what the regular expression class does), but i'm not sure changing the interface for the matches method is worth it for just the episode name.",0,0,0,0.8760785460472107,0.6466677188873291,0.8721959590911865,0.0,accept,unanimous_agreement
119579640,5287,"if you don't pay attention, i offered to create `mutable` field which can be modified by const methods. having something like autodownloadrulematch is another way.",0,0,0,0.9768368601799012,0.9842255115509032,0.9848264455795288,0.0,accept,unanimous_agreement
119985540,5287,"this is just preference, i'm just saying it in case you didn't know. you can use `\\w` which is equivalent to `[^a-za-z0-9_]` (if you don't want the underscore ( _ )). also you can use `+` in place of `{1,}` i don't know if format 3 is a standard but would there be any chance that it might say e.g `2015.3.15` (omit leading zeros)? also could it use slashes or minus/dash instead of dots?",0,0,0,0.9795207381248474,0.989208996295929,0.9866361021995544,0.0,accept,unanimous_agreement
119991334,5287,"as much as i don't want to suggest delaying this pr as i very much want it to be merged, i have to agree with about format 3. there is no standard at all with torrents, so i'd expect at some point this would fail to match something in someone's feed. a better regex is probably: `(\d{4}[_.\-x]\d{1,2}[_.\-x]\d{1,2}|\d{1,2}[_.\-x]\d{1,2}[_.\-x]\d{4})` or `(\\d{4}[_.\\-x]\\d{1,2}[_.\\-x]\\d{1,2}|\\d{1,2}[_.\\-x]\\d{1,2}[_.\\-x]\\d{4})` if it's escaped properly. that will match things like `2014.05.03`, `5.3.2014`, `2014_05_03`, `3-5-2014`, `2014x05x03` and so on. i think that's a good balance between being lenient enough to be unlikely to miss something and not so lenient as to match someone erroneously.",0,0,0,0.8265419602394104,0.9502307772636414,0.9430721402168274,0.0,accept,unanimous_agreement
119991881,5287,"while using the + is probably better, using \w probably isn't, as i just want to make sure the season/episode number isn't matching within something else, and fields might be separated by '_'s. as for adding more date formats, i'm not sure making the regex that lenient without at least some requirement to be dubious at best. and it also raises the question, should we interpret/reformat the date when we store it (like we do the episode numbers) so that we can continue to match if the format changes?",0,0,0,0.8980298042297363,0.6803074479103088,0.9583128690719604,0.0,accept,unanimous_agreement
119992121,5287,"i don't think that regex is too lenient. it's really unlikely to match anything other than date, especially since either the first or last group of numbers has to be four digits long. if you wanted you could modify it to exclude `_` and perhaps `x` as a separator character. i think it's likely that there will be dates separated with hyphens since that's standard in a lot of parts of the world. as for reformatting it... the correct:trade_mark: solution probably **is** to reformat the date into a canonical format. eventually there will be two torrents with the same date in two different formats for someone. but that's a pretty unlikely edge case, and on top of that, there's cases where it's ambiguous what the date actually is. (e.g. does 01.02.2017 mean january 2 or february 1?) so i don't think this is actually necessary.",0,0,0,0.8653976321220398,0.906506896018982,0.8556599617004395,0.0,accept,unanimous_agreement
120590403,5287,", you still didn't answer on this question.",0,0,-1,0.6795417666435242,0.6856581568717957,0.890121579170227,0.0,accept,majority_agreement
120614910,5287,add spaces: `lastcapturedindex - 1`,0,0,0,0.9859063625335692,0.9939383268356324,0.994666337966919,0.0,accept,unanimous_agreement
120616461,5287,"i would leave `static` out, `qregularexpression` isn't very expensive to construct.",0,0,0,0.9732542634010316,0.9424832463264464,0.987305223941803,0.0,accept,unanimous_agreement
120617648,5287,add curly braces: [code block],0,0,0,0.98617422580719,0.9903109073638916,0.9949982166290284,0.0,accept,unanimous_agreement
120619759,5287,i would add a '\n' if possible. [code block],0,0,0,0.9889371395111084,0.988798439502716,0.9942935109138488,0.0,accept,unanimous_agreement
120620377,5287,have you any strong reason to construct the same object each time the method called?,0,0,0,0.982268214225769,0.9852263331413268,0.9929702877998352,0.0,accept,unanimous_agreement
120623297,5287,"actually no, but if there is no performance bottleneck, i would like to keep the code simple (and avoid premature optimization), i'm talking about personal preference here.",0,0,0,0.957782506942749,0.9255629777908324,0.970296025276184,0.0,accept,unanimous_agreement
120641309,5287,"then **if** branch must be enclosed with curly braces too. p.s. personally i like curent form, but if it doesn't follow qbittorrent coding style it should be fixed.",0,0,0,0.7843652963638306,0.7890454530715942,0.9802026748657228,0.0,accept,unanimous_agreement
120981611,5287,"hmm, that's odd. i entered \n into qt creator, and i that's what it wrote to the .ui file. i tried forcing \n in the file and it doesn't work, the tooltip shows a literal '\n'. i tried using instead, but that starts wrapping the text on multiple lines. it seems you either have to use an actual newline in the .ui, or some weird nonsense.",-1,-1,-1,0.9545552730560304,0.9663317203521729,0.8879015445709229,-1.0,accept,unanimous_agreement
121060534,5287,just use the following: [code block] seems qtcreator converts '\n' to a real newline and it is alright.,0,0,0,0.9321383237838744,0.9863911867141724,0.993834376335144,0.0,accept,unanimous_agreement
164360858,5287,"can you explain this regex, please.",0,0,0,0.984555184841156,0.9857435822486876,0.988799810409546,0.0,accept,unanimous_agreement
164363208,5287,don't you know exactly what index you need?,0,0,0,0.9647782444953918,0.9732922315597534,0.9880067110061646,0.0,accept,unanimous_agreement
164363532,5287,please explain what this function produces for different episode format.,0,0,0,0.9829112887382508,0.9676330089569092,0.9921699166297911,0.0,accept,unanimous_agreement
164511490,5287,"this regex combines all of the smart episode filters the user enters in the settings, and searches for them between non-alphanumeric characters, or the start/end of the article title.",0,0,0,0.9814887642860411,0.9904541969299316,0.9941841959953308,0.0,accept,unanimous_agreement
164513172,5287,"usually this function will join all the matching groups of the above regular expression with the 'x' character. this means for a regular expression that matches s01e02, it will produce the string '1x2'.",0,0,0,0.9844740629196168,0.9910203814506532,0.9939643740653992,0.0,accept,unanimous_agreement
164514339,5287,"no, i won't know the index. due to the way the regular expression matching occurs, every capturing group in the regex has a corresponding group index even when that group wasn't matched. so the regex: ""([0-9]+)|([a-z]+) has 2 groups at index 1 and 2 respectively, even though only one of them will ever be populated at once. with the move to user supplied regexs for episode filtering, i don't know how many groups there will be at compile time. i have to iterate through all the groups, check to see if they're populated, and append it to the episode name.",0,0,0,0.9479265809059144,0.934518575668335,0.9682379364967346,0.0,accept,unanimous_agreement
164647087,5287,i asked because i doubted that this regex is exactly what you want... and i was right. it searches between non-(latin lower-case letters or numbers) characters only. i don't think this behavior is consistent with the public use of this feature. what about `\b(?:%1)\b`?,0,0,0,0.6515321731567383,0.813722550868988,0.9608074426651,0.0,accept,unanimous_agreement
164668152,5287,"one small point, the regex is created as case-insensitive, so it does get upper case as well, but yes your point stands, it matches latin characters only. \b isn't a good choice, and is something i looked at early on, since it includes the '_' character which is something i would want to be a boundary. also, \b is just boundaries between [a-za-z0-9_], which is only one character different to what i've got. if i had examples of non-latin based articles i could make a better choice, but i feel this is fine for a first attempt.",0,0,0,0.8749827742576599,0.8680091500282288,0.9172196984291076,0.0,accept,unanimous_agreement
164677509,5287,"unfortunately, i don't understand this. \b is boundary between any ""word"" character (i.e. \w) and non-""word"" character (including start/end of line). when you enable unicode support in qregularexpression \w includes also non-latin alphanumeric characters.",-1,-1,-1,0.6251733303070068,0.5307421684265137,0.8454474210739136,-1.0,accept,unanimous_agreement
164695025,5287,"the main disadvantage is \w includes underscore so it will not match, e.g., ""some_series_name_s01e03"". `(?<=^|[\w_])s(\d+)e(\d+)(?=[\w_]|$)` should match.",0,0,0,0.964717447757721,0.994482398033142,0.9586531519889832,0.0,accept,unanimous_agreement
164778638,5287,i'd like to suggest: `(?:^|[\w_])(?:%1)(?:[\w_]|$)` that should match the pattern between any word boundary characters as well as underscore. be sure to include `qregularexpression::useunicodepropertiesoption` when constructing the `qregularexpression` so that `\w` will properly match unicode word boundaries.,0,0,0,0.9799625873565674,0.9927674531936646,0.9925629496574402,0.0,accept,unanimous_agreement
164783876,5287,", your suggestion is almost the same as mine above (except i have example only for some particular format).",0,0,0,0.9856027364730836,0.938751757144928,0.9813592433929444,0.0,accept,unanimous_agreement
164789768,5287,"i thought `\b` matches a backspace character? edit: nevermind, it depends on regex implementation, at for qt it does probably match a word boundary. using `[\b_]` and `[\w_]` are probably equivalent. the most important bit is including the underscore, though.",0,0,0,0.9867092370986938,0.9710157513618468,0.986331582069397,0.0,accept,unanimous_agreement
164838640,5287,"there was meant to be an underscore between the quotes, but i had forgotten that was a markdown character. i've played around with it a bit, and settled on `(?:[_]|\b)`, with unicode support enabled. `\b` isn't a character class so you can't place it inside [ ].",0,0,0,0.980305552482605,0.9830174446105956,0.9887758493423462,0.0,accept,unanimous_agreement
164840582,5287,"my last example i talk about isn't contain `\b`: `(?<=^|[\w_])s(\d+)e(\d+)(?=[\w_]|$)` iirc, `\b` doesn't work in this case (at least, as you expect).",0,0,0,0.9797836542129515,0.9879069328308104,0.991239845752716,0.0,accept,unanimous_agreement
164842524,5287,"`(?<=^|[\w_])(?:%1)(?=[\w_]|$)` is what you need. do try it on [a link] (don't forget to select pcre as regex engine). p.s. `[_]` is a perversion, you don't need `[]` for a single character.",0,0,0,0.9867456555366516,0.988503396511078,0.9918069243431092,0.0,accept,unanimous_agreement
165289404,5287,"this is c++ so you don't need use `this` everywhere, just in case of name conflicts.",0,0,0,0.9872577786445618,0.99274879693985,0.9935917258262634,0.0,accept,unanimous_agreement
165289471,5287,const,0,0,0,0.9770036339759828,0.9538535475730896,0.8837863802909851,0.0,accept,unanimous_agreement
165289665,5287,const,0,0,0,0.9770036339759828,0.9538535475730896,0.8837863802909851,0.0,accept,unanimous_agreement
165289833,5287,and so on... in every place you don't have to modify variable.,0,0,0,0.9713941216468812,0.9671162962913512,0.9784613251686096,0.0,accept,unanimous_agreement
165290414,5287,"you can set all options once you create regex object (in autodownloader constructor) and update only pattern here, isn't it?",0,0,0,0.9894143342971802,0.992867112159729,0.9944829344749452,0.0,accept,unanimous_agreement
165290623,5287,"we don't use ""get"" prefix.",0,0,0,0.9709089994430542,0.9719003438949584,0.9889655113220216,0.0,accept,unanimous_agreement
165290933,5287,wrong order of headers. see coding guidelines.,-1,0,0,0.7244606614112854,0.9340987205505372,0.658299446105957,0.0,accept,majority_agreement
165291102,5287,curly brace in wrong place.,-1,0,-1,0.7341284155845642,0.5990911722183228,0.5690831542015076,-1.0,accept,majority_agreement
165291683,5287,you have many unrelated changes in .ui files (probably created by qtcreator). please undo it.,0,0,0,0.9854658842086792,0.9657601118087769,0.9933905601501464,0.0,accept,unanimous_agreement
165296195,5287,"it's not so obvious for user to add outer non-capturing group (as well as to have any captures here). it can type just, e.g., ""sn\d+ep\d+"" and wonder why it not works properly. actually, the user should understand how it works to set valid regex.",0,0,0,0.9692409634590148,0.9491241574287416,0.9891548752784728,0.0,accept,unanimous_agreement
165297005,5287,"iirc, it allows to download many proper/repack copies of the same episode.",0,0,0,0.9873381853103638,0.969817280769348,0.9905919432640076,0.0,accept,unanimous_agreement
165453864,5287,"no, the regex also needs to be updated if the smart episode filter option is changed in the options dialog.",0,0,0,0.9868849515914916,0.99145245552063,0.9924295544624328,0.0,accept,unanimous_agreement
165460307,5287,i've tweaked the regex creation to insert a non-capturing group around each item. i was meaning to do that anyway. i've also modified these rules to not include a redundant non-capturing group.,0,0,0,0.975311815738678,0.9856533408164978,0.99350243806839,0.0,accept,unanimous_agreement
165463414,5287,"i'm not quite sure what you mean. i suppose we could keep track of the repacks aswell, but you usually want to always download these.",0,-1,0,0.8030067682266235,0.6428849101066589,0.8480986952781677,0.0,accept,majority_agreement
165592587,5287,you do not understand what i mean? just do: [code block] once `smartepisoderegex ` created (e.g. in autodownloader constructor). then just do here the following: [code block],0,0,0,0.9792489409446716,0.9888744354248048,0.9931665062904358,0.0,accept,unanimous_agreement
165614775,5287,"let's imagine the following articles sequence: 1. some title s01e03 2. some title s01e03 3. some title s01e03 repack 4. some title s01e03 repack 5. some title s01e03 repack it downloads 1st torrent, skips the 2nd (as expected), and download 3, 4 and 5th torrents. is this behavior expected?",0,0,0,0.986950933933258,0.9899165034294128,0.9881017208099364,0.0,accept,unanimous_agreement
165615906,5287,", why this breaking coding style change? revert it back!",-1,-1,-1,0.7254981398582458,0.826901912689209,0.9468149542808532,-1.0,accept,unanimous_agreement
165617147,5287,it's still here.,0,0,0,0.9789385795593262,0.927387833595276,0.9754859805107116,0.0,accept,unanimous_agreement
165693593,5287,"i can pitch in and say yes, that is expected. the convention is that torrents labeled repack include some kind of fix that means it supersedes the previous torrent, and should always be downloaded.",0,0,0,0.9870495200157166,0.991157293319702,0.9889923334121704,0.0,accept,unanimous_agreement
165719383,5287,even other repacks?,0,0,0,0.9748929738998412,0.952755570411682,0.9908507466316224,0.0,accept,unanimous_agreement
165735015,5287,"yes, i've just been testing with one where this has happened.",0,0,0,0.9685654640197754,0.9405483603477478,0.9914402961730956,0.0,accept,unanimous_agreement
165808797,5287,i didn't understand what do you mean. i was just asking is it normal (expected) that it downloads all repack/proper episode variants?,-1,-1,0,0.5525627732276917,0.5969355702400208,0.884016752243042,-1.0,accept,majority_agreement
165809021,5287,"is header inclusion order (from qbittorrent coding guidelines) too difficult? why do you constantly produce such ""invalid"" changes?",0,0,0,0.8371938467025757,0.8745521306991577,0.9129236340522766,0.0,accept,unanimous_agreement
165810457,5287,"yes, it is expected behaviour.",0,0,0,0.9738876819610596,0.984528124332428,0.9913211464881896,0.0,accept,unanimous_agreement
165814979,5287,"why? , the main problem of this pr is your reluctance (or inability) to provide a detailed description (in some example) of the incident, processed by this feature, to not involved people could clearly understand the meaning of this process. why duplicate episodes typically occur? why, in contrast to the ""normal"" episodes, we don't have to skip repeated ""repack/proper"" episodes? now this feature is more like a ""personal use"" than the ""public use"".",0,0,0,0.7769154906272888,0.7626520991325378,0.6948771476745605,0.0,accept,unanimous_agreement
165816685,5287,", forgive my boredom in this issue, i just don't want to answer such questions of users (when we release this feature), not realizing why it works this way and not otherwise.",-1,-1,-1,0.9680110812187196,0.9586235880851746,0.9677128195762634,-1.0,accept,unanimous_agreement
165818463,5287,"i'll chime in again and try to help explain it in detail. hopefully you'll find this satisfactory: the labels ""repack"" and ""proper"" are common conventions used among release groups providing episodes of tv shows, as well as other media. these conventions are used among pretty much every bittorrent tracker that distributes these files. [a link], but in summary, ""repack"" means a rerelease of a previous episode, likely by the same group, meant to correct an error in the first copy. ""proper"" can mean the same thing, or more specifically a release by another group meant to correct an error from the first group. these specific meanings may not be consistent among releases, but you always want to download torrents labeled proper or repack because they, quite consistently, only appear when the episode you've *already downloaded* contains an error. for example, the few times it's happened since i've been using this pr by , the original file that was downloaded was broken to the point of being unplayable. but i didn't need to do anything or worry about it because the proper / repack version was also automatically downloaded. and as has said, sometimes there's more than one because it takes the release groups a few tries to fix an error. it's also worth mentioning that other torrent clients or rss downloaders with a ""smart episode"" feature do this exact same thing. if you're concerned about users nagging you for support requests, then this will save you many questions from people asking for this exact feature.",0,0,1,0.803248941898346,0.8422414064407349,0.815544843673706,0.0,accept,majority_agreement
165821973,5287,"well, i got the following picture: 1. there are several releasers (release groups) on some tracker. 2. they release the same episodes independently so there are duplicates can appear (otherwise this issue can't exist). 3. there is no acceptable (or reliable) way to separate the episodes of the various relisers (using download rules), or we don't want (unable) to do so for some other reason. 4. when some error is detected in the release the releaser publish fixed release (marked as repack or proper). there also can be some proper/repack release fixing error in previous proper/repack release (isn't it?). 5. since we can't distinguish releases from different releasers (because of the same reasons as in item 3) we have only to download them all. what i am mistaken?",0,0,0,0.969100534915924,0.96076101064682,0.9766851663589478,0.0,accept,unanimous_agreement
165822488,5287,"that's mostly correct, but the whole picture is a little different than that. 1. release groups are usually not associated with any particular tracker. it's the tracker's users that obtain the release and make it available on the tracker. 2. this is correct. additionally, sometimes the users of a tracker make their own rip of an episode and make it available, alongside the scene releases. 3. this completely depends on the tracker in question. some of them are very, very tightly organized and you can easily distinguish different releases from the rss post's title. other times this is not the case at all. in the end it is still the responsibility of the qbittorrent user to create a good rule definition in the rss downloader so that it only considers torrents they want, even when using the smart episode filter. 4. this is correct. additionally, a tracker's users can also create their own fixed version of a torrent. either way, the torrent's title should have proper or repack in its title, as per convention. 5. again, this depends on the tracker and how well organized it is, but generally the best way to make sure a good version of an episode is downloaded is first use the user's rule definition in the rss downloader to figure out which episodes are candidates for downloading, then extract out the season/episode number from the rss post and ensure it only downloads one copy. the exception of course is when proper or repack appears. it is technically possible that too many copies of the episode could be downloaded, but in practice this almost never happens and the feature works correctly. i've been using this smart episode feature for over a year now, granted the version of the pr i merged in and compiled doesn't include the option to change or add regex's. however it has been working flawlessly, including when proper or repack torrents are downloaded.",0,0,0,0.923560917377472,0.8938900232315063,0.9184117913246156,0.0,accept,unanimous_agreement
165822979,5287,"i'm going to chime in and say that - as a user, this is exactly what i'd want & expect. i came from utorrent and that's how their smart episode filter works (granted they don't have the options for custom regex).",0,0,0,0.9512318968772888,0.8942818641662598,0.8962141275405884,0.0,accept,unanimous_agreement
166017318,5287,initialize it: [code block],0,0,0,0.987187385559082,0.9903074502944946,0.9960163235664368,0.0,accept,unanimous_agreement
166017728,5287,up one line,0,0,0,0.9824011921882628,0.953544855117798,0.9858560562133788,0.0,accept,unanimous_agreement
166018050,5287,`++i`,0,0,0,0.9751697182655334,0.9840044975280762,0.974772572517395,0.0,accept,unanimous_agreement
166018537,5287,`if (cap.isempty()) continue;`,0,0,0,0.9856796860694884,0.9933058619499208,0.9926826357841492,0.0,accept,unanimous_agreement
166018605,5287,`bool isint = false;`,0,0,0,0.9762544631958008,0.9908987283706664,0.9938068389892578,0.0,accept,unanimous_agreement
166018767,5287,use `?:` operator,0,0,0,0.9861522912979126,0.9919365644454956,0.9924386143684388,0.0,accept,unanimous_agreement
166019361,5287,if possible use c++11 range-based `for()`,0,0,0,0.9854073524475098,0.9944120049476624,0.9953224062919616,0.0,accept,unanimous_agreement
166020656,5287,this property block is redundant.,0,0,0,0.9384393692016602,0.7806842923164368,0.9672425389289856,0.0,accept,unanimous_agreement
166020979,5287,add `const`,0,0,0,0.9864118099212646,0.9912808537483216,0.994657814502716,0.0,accept,unanimous_agreement
533058890,13885,"inappropriate parameter name, don't you think?",-1,0,-1,0.9517282247543336,0.9504085183143616,0.7439342141151428,-1.0,accept,majority_agreement
533059416,13885,"i would rename all these to `isxxxdisabled()`, `setxxxdisabled()`",0,0,0,0.9877989292144777,0.9935541152954102,0.9948110580444336,0.0,accept,unanimous_agreement
533060557,13885,please don't mix initialisation styles: [code block] also the following looks more familiar for me: [code block],0,0,0,0.9716429114341736,0.9624865055084229,0.968432068824768,0.0,accept,unanimous_agreement
533209656,13885,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
533209810,13885,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
533209939,13885,indeed :),1,1,0,0.9404041171073914,0.9919445514678956,0.9532529711723328,1.0,accept,majority_agreement
533319144,13885,"i don't think this line has any useful effect now, try removing it.",0,0,0,0.8609587550163269,0.8404080867767334,0.838612973690033,0.0,accept,unanimous_agreement
533328004,13885,is this member variable really needed?,0,0,0,0.9883558750152588,0.9874281287193298,0.9928734302520752,0.0,accept,unanimous_agreement
533332070,13885,"i would move these two lines in constructor and keep only limit-related assignments here. otherwise, i don't understand based on what concept you extracted this code from the constructor.",0,0,0,0.982808530330658,0.9175198674201964,0.9893425703048706,0.0,accept,unanimous_agreement
533335790,13885,as i suggested before you can extract all speed limits related code into separate widget class and use it in your dialogs (there are at least 3 places where the same widget can be used) and in options dialog too.,0,0,0,0.9887480735778807,0.9919742941856384,0.9949100613594056,0.0,accept,unanimous_agreement
533352755,13885,or maybe leave it for a separate pr (if it can cause difficulties for you)?,0,0,0,0.9719668030738832,0.9936151504516602,0.983435332775116,0.0,accept,unanimous_agreement
533364098,13885,braces required.,0,0,0,0.98438823223114,0.9884601831436156,0.9859155416488647,0.0,accept,unanimous_agreement
533370066,13885,final,0,0,0,0.9030922651290894,0.920214593410492,0.9173561930656432,0.0,accept,unanimous_agreement
533372773,13885,it's a bad idea to store torrenthandle pointers. some of them can be deleted while the dialog is being shown. you should either store torrent hashes and query torrents in `accept()` (and other places after dialog is constructed) or handle torrent deletion events to adjust this list accordingly.,-1,-1,-1,0.9390936493873596,0.9702876210212708,0.6280025243759155,-1.0,accept,unanimous_agreement
533374508,13885,"critical message is too much, imo.",-1,-1,-1,0.962169885635376,0.9490708708763124,0.8891412019729614,-1.0,accept,unanimous_agreement
533375432,13885,also i would just disable ok button if control values have inconsistent states.,0,0,0,0.9862041473388672,0.9618818163871764,0.9922963976860046,0.0,accept,unanimous_agreement
533421513,13885,"i thought so but, from this comment, i guess there is no problem using session::instance() where needed.",0,0,0,0.9835905432701112,0.9780313372612,0.988067626953125,0.0,accept,unanimous_agreement
533494595,13885,don't know how and it sounds like too much trouble. i won't do it.,-1,-1,-1,0.9742602705955504,0.9324912428855896,0.9731224179267884,-1.0,accept,unanimous_agreement
533495348,13885,can't see why it matters but sure.,0,0,0,0.8457924723625183,0.7530149817466736,0.9195324778556824,0.0,accept,unanimous_agreement
533510205,13885,you can declare local variable if you need to access it several times per function.,0,0,0,0.9882006645202636,0.9917741417884828,0.994443953037262,0.0,accept,unanimous_agreement
533513901,13885,"you have some initialization code in the constructor directly and some other is separated into this method. i'm sorry, but i didn't see any pattern on which it is based (maybe i just didn't understand it). but then what's the point? why not put all the code in the constructor? or vice versa, in this method?",-1,-1,-1,0.9700636267662048,0.982597291469574,0.981864333152771,-1.0,accept,unanimous_agreement
533547330,13885,no particular reason. it was this way initially in this dialog and i just continued it. want me to move everything in the constructor? it will have to be a new commit though because i'm not wasting my time resolving conflicts between existing commits or trying to figure out what goes where.,0,0,-1,0.910709798336029,0.906496524810791,0.6420192718505859,0.0,accept,majority_agreement
533552828,13885,"note that i just moved this here. about critical: which of the other options convey ""you can't proceed until...""? if it was right after performing an invalid action i'd agree but here it's because an extra action is needed.",0,0,0,0.9792613983154296,0.9541024565696716,0.988797962665558,0.0,accept,unanimous_agreement
533554586,13885,"it contradicts our rules. we do not merge prs that have a dirty history. you will have to apply any required changes to the corresponding commits. or just squash all your commits into one in the end (even now, it doesn't look like all of them are independent enough).",-1,0,-1,0.8172436356544495,0.932203471660614,0.6584031581878662,-1.0,accept,majority_agreement
533578062,13885,"thank god. i'll squash the last 3 for ""torrent options"" at least and we'll see from there. well?",1,1,1,0.8259552717208862,0.9930312633514404,0.9663123488426208,1.0,accept,unanimous_agreement
533675151,13885,i hope i did it right (fixup commit).,0,0,1,0.7701213955879211,0.9474550485610962,0.955540418624878,0.0,accept,majority_agreement
533675182,13885,"indeed, removed.",0,0,0,0.9663268327713012,0.9850098490715028,0.973471701145172,0.0,accept,unanimous_agreement
534011713,13885,"i want this to be a logical separation, if necessary (for example, you can extract the initialization code for control values from the current session property values, and leave everything else in the constructor). or you can extract the code that is called from several places (but this is not the case here). if in doubt, just put everything in the constructor, because the current split is only confusing.",0,0,0,0.9758230447769164,0.9843561053276062,0.9920179843902588,0.0,accept,unanimous_agreement
534012892,13885,"well, i guess you're right. don't stop there.",0,0,0,0.8700000047683716,0.758061408996582,0.9438057541847228,0.0,accept,unanimous_agreement
534016244,13885,override,0,0,0,0.9859734773635864,0.9445286989212036,0.9805362224578856,0.0,accept,unanimous_agreement
534017996,13885,"m_torrenthashes or m_infohashes ""selected"" is irrelevant in this context (because there are no other torrents for this class).",0,0,0,0.975707232952118,0.9923356175422668,0.9917306303977966,0.0,accept,unanimous_agreement
534447639,13885,i moved everything.,0,0,0,0.9535968899726868,0.954863965511322,0.8986597061157227,0.0,accept,unanimous_agreement
535194733,13885,not very. i told you: but you can (as before) get them as an input parameter. this will save you from unnecessary lookups in the constructor. then you can store their hashes.,0,0,0,0.9718038439750672,0.9359148740768432,0.9871063232421876,0.0,accept,unanimous_agreement
535487382,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
535501450,13885,you still don't understand me. you shouldn't check it here (they are valid unless caller side has bugs). and you shouldn't unnecessarily lookup for torrents in constructor. you should store hashes only to use them later (since some torrent can be deleted while dialog is shown).,-1,0,-1,0.5184758901596069,0.5643856525421143,0.5802918076515198,-1.0,accept,majority_agreement
535526058,13885,i don't understand what the problem is. i thought that's what i'm doing.,-1,-1,-1,0.9227924942970276,0.6653238534927368,0.9337452054023744,-1.0,accept,unanimous_agreement
535543343,13885,the problem is that you lookup for each torrent by its hash next in this constructor which is unnecessary since you already have valid torrent handles here.,0,0,0,0.9655125737190248,0.9933909177780152,0.729053258895874,0.0,accept,unanimous_agreement
535547880,13885,dang! i'm so...,1,1,-1,0.6701268553733826,0.5111116766929626,0.9701035022735596,1.0,accept,majority_agreement
536018299,13885,why not add this line to the loop below?,0,0,0,0.9609517455101012,0.990943729877472,0.9927841424942015,0.0,accept,unanimous_agreement
536021588,13885,disablepex,0,0,0,0.9866349101066588,0.9647400975227356,0.9849109649658204,0.0,accept,unanimous_agreement
536114974,13885,i would put many of trivial slots like this one directly in `connect()` invocation as lambdas.,0,0,0,0.986459255218506,0.9887943863868712,0.9891083240509032,0.0,accept,unanimous_agreement
536147292,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
536148298,13885,"i forgot that's possible thanks. /off topic do ""fixup"" commits help reviewing or nah?",-1,0,1,0.5291087031364441,0.4880892932415008,0.9419854283332824,,review,no_majority_disagreement
536180027,13885,"do ""fixup"" commits help reviewing or nah? i do not care. i'm looking at pr changes in its entirety, so do as you like. if i need any changes to be made in a separate commit, i will ask for it explicitly.",-1,0,0,0.9545266032218932,0.7529978156089783,0.7706760764122009,0.0,accept,majority_agreement
536187928,13885,shouldn't they be checked+disabled for private torrents?,0,0,0,0.9786866307258606,0.9925363063812256,0.9925852417945862,0.0,accept,unanimous_agreement
536189636,13885,shouldn't you have they enabled only if all torrents aren't private? otherwise what happens if user uncheck some of them having some private torrents selected?,0,0,0,0.9815955758094788,0.9699010252952576,0.9924543499946594,0.0,accept,unanimous_agreement
536191697,13885,is this a valid copyright now?,0,0,0,0.9822005033493042,0.9895059466362,0.9952027797698976,0.0,accept,unanimous_agreement
536210940,13885,nothing [code block] why shouldn't users be allowed to change these settings if even 1 public torrent is selected? private ones won't be affected.,0,0,0,0.9783676266670228,0.986080765724182,0.9837915897369384,0.0,accept,unanimous_agreement
536211112,13885,"and provide the illusion that these settings are applied to private torrents? but on the other hand, checked will be more intuitive for users i guess. will change.",0,0,0,0.9837850332260132,0.979693591594696,0.986801266670227,0.0,accept,unanimous_agreement
536211160,13885,sure i don't care.,-1,-1,-1,0.9513261914253236,0.6742473244667053,0.5370154976844788,-1.0,accept,unanimous_agreement
536339813,13885,why not simply [code block] for the setters?,0,0,0,0.9774496555328368,0.9934900999069214,0.9915164709091188,0.0,accept,unanimous_agreement
536357408,13885,i guess set... is easier to search for. assuming all setters start with it (i didn't look).,0,0,0,0.9728932976722716,0.9533554315567015,0.9824995994567872,0.0,accept,unanimous_agreement
536364267,13885,"yes, you're right.",0,0,0,0.9454233646392822,0.6931971907615662,0.9611955285072328,0.0,accept,unanimous_agreement
536530829,13885,"maybe add notification ""private torrents won't be affected by these settings""?",0,0,0,0.9882795810699464,0.9905537962913512,0.9922884106636048,0.0,accept,unanimous_agreement
536587939,13885,uhh sure.,0,0,0,0.9269327521324158,0.9223546385765076,0.9384394288063048,0.0,accept,unanimous_agreement
537052496,13885,[code block] or maybe a better way is to have the icon in the group box text rather,0,0,0,0.9855421781539916,0.9942003488540648,0.9914963245391846,0.0,accept,unanimous_agreement
538301304,13885,i'll change it when i fix that dialog.,0,0,0,0.9812802672386168,0.9714557528495787,0.9921172261238098,0.0,accept,unanimous_agreement
539328091,13885,"imho, ""torrent options"" doesn't seem right here, the dialog that follows doesn't actually include a majority of torrent options.",0,0,0,0.9660387635231018,0.9435663819313048,0.8803040385246277,0.0,accept,unanimous_agreement
539340631,13885,any suggestions?,0,0,0,0.976682722568512,0.984121561050415,0.9799030423164368,0.0,accept,unanimous_agreement
539342020,13885,"anyway menu item that shows dialog should have name with ""..."" in the end.",0,0,0,0.9667737483978271,0.9877014756202698,0.9896826148033142,0.0,accept,unanimous_agreement
539346869,13885,"""torrent speed management"" or ""share options"", idk i'm not good with naming.",-1,-1,-1,0.9089483618736268,0.8226379752159119,0.6601957678794861,-1.0,accept,unanimous_agreement
539373673,13885,"but there may be different types of options. maybe something less specific, like ""other options... "" or ""more options...""?",0,0,0,0.9579156041145324,0.9757315516471864,0.9883114695549012,0.0,accept,unanimous_agreement
539403702,13885,"i think we should keep the current name. if you really want to change the name, what about ""torrent **health** options""??",0,0,0,0.9624931216239928,0.9582282304763794,0.9796767830848694,0.0,accept,unanimous_agreement
539415648,13885,because of the same reason as in [a link] there may be options of different kind.,0,0,0,0.9730998277664183,0.9862922430038452,0.9870852828025818,0.0,accept,unanimous_agreement
539489814,13885,"to me those titles are for minor/miscellaneous options and i personally don't consider current options (speed,share & dht/pex/lsd) as minor for a torrent. maybe we should keep the current title??",0,0,0,0.8928039073944092,0.8844124674797058,0.9706517457962036,0.0,accept,unanimous_agreement
539974552,13885,"wrong order, move it one line up.",-1,0,0,0.7220379710197449,0.8300239443778992,0.6801255345344543,0.0,accept,majority_agreement
539975841,13885,looks like this is `const` now: `void capspeed() const;`,0,0,0,0.9847069382667542,0.9906703233718872,0.9929036498069764,0.0,accept,unanimous_agreement
539977423,13885,try `void settorrentoptions() const;`,0,0,0,0.9854933619499208,0.9900051951408386,0.9941522479057312,0.0,accept,unanimous_agreement
539978718,13885,try `void on_actionsetglobalspeedlimits_triggered() const;`,0,0,0,0.9870451092720032,0.9909222722053528,0.9941144585609436,0.0,accept,unanimous_agreement
539984226,13885,wrong order.,-1,-1,-1,0.9440091848373412,0.5554730296134949,0.7645806670188904,-1.0,accept,unanimous_agreement
539984658,13885,`const qvector &torrents`,0,0,0,0.9846218824386596,0.992393970489502,0.9942032694816588,0.0,accept,unanimous_agreement
539985608,13885,i would give the default values here instead of in .cpp file.,0,0,0,0.9890542030334472,0.9934900999069214,0.9906399250030518,0.0,accept,unanimous_agreement
539986473,13885,"you can also consider using `{}` to initialize values, for example: `qdialog {parent}`",0,0,0,0.98782616853714,0.9931495785713196,0.9940406680107116,0.0,accept,unanimous_agreement
540067520,13885,"can't, `parent` argument for torrentoptionsdialog would have to be const and then i can't init `qdialog` with it...",0,0,0,0.9392603039741516,0.9605268836021424,0.9843937754631042,0.0,accept,unanimous_agreement
540087878,13885,all of them or just here?,0,0,0,0.9771618247032166,0.9873133301734924,0.986102819442749,0.0,accept,unanimous_agreement
540102555,13885,all of them of course.,0,0,0,0.9662490487098694,0.9850013256072998,0.9764198064804076,0.0,accept,unanimous_agreement
540130946,13885,"just to be clear, ""just here"" i mean the initialization list.",0,0,0,0.984777331352234,0.9847545623779296,0.9888851642608644,0.0,accept,unanimous_agreement
540349087,13885,same as [a link],0,0,0,0.9866743683815002,0.9871845841407776,0.9953129291534424,0.0,accept,unanimous_agreement
540349363,13885,same as [a link],0,0,0,0.9866743683815002,0.9871845841407776,0.9953129291534424,0.0,accept,unanimous_agreement
540349714,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
540351701,13885,"i only did it to the list for now. personally i find `{}` less readable but hey, you're the one looking at the code base most, so if you want me to change everything i'll do it.",0,0,0,0.9690781831741332,0.9350484609603882,0.95659202337265,0.0,accept,unanimous_agreement
540907486,13885,please also change to: `class speedlimitdialog final : public qdialog`,0,0,0,0.9849241971969604,0.9925625920295716,0.995661199092865,0.0,accept,unanimous_agreement
540910849,13885,personally i would like to do it this way: [code block],0,0,0,0.9729759097099304,0.9805648922920228,0.9908545017242432,0.0,accept,unanimous_agreement
540913363,13885,i would suggest we use a helper function here: [code block],0,0,0,0.9862678050994872,0.9892857670783995,0.9950050711631776,0.0,accept,unanimous_agreement
540915288,13885,ok and that is exactly what i meant.,0,0,0,0.9724034070968628,0.9402270317077636,0.9873385429382324,0.0,accept,unanimous_agreement
541074961,13885,done thanks.,0,0,0,0.5163121819496155,0.6707050800323486,0.7158834934234619,0.0,accept,unanimous_agreement
541075609,13885,done. i'm not sure why you commented on this line though.,0,0,0,0.7218038439750671,0.843712329864502,0.9790781140327454,0.0,accept,unanimous_agreement
541512780,13885,github doesn't allow me to place comment there... also `final` will benefit functions that has `override`.,0,0,0,0.9812535643577576,0.8254452347755432,0.9858981370925904,0.0,accept,unanimous_agreement
541513347,13885,i meant applying the changes to `speedlimitdialog::accept()` too.,0,0,0,0.9857223033905028,0.9917271137237548,0.9916239380836488,0.0,accept,unanimous_agreement
543967511,13885,please add `m_torrenthashes.reserve(torrents.size());` before the for loop.,0,0,0,0.987865388393402,0.9951340556144714,0.9955748319625854,0.0,accept,unanimous_agreement
543971458,13885,those update functions has the same pattern so it would be recommended to abstract it: [code block],0,0,0,0.9879485368728638,0.9931911826133728,0.9953586459159852,0.0,accept,unanimous_agreement
543981370,13885,can you drop the decimal point?,0,0,0,0.9873353838920592,0.9916031956672668,0.9934874773025512,0.0,accept,unanimous_agreement
543983570,13885,you can drop this curly braces to make the code more concise.,0,0,0,0.9875712394714355,0.9827743172645568,0.9939796924591064,0.0,accept,unanimous_agreement
543984462,13885,`const bool isaltlimitenabled = session->isaltglobalspeedlimitenabled();`,0,0,0,0.9843095541000366,0.994174063205719,0.9934276342391968,0.0,accept,unanimous_agreement
543984999,13885,please move this up to the group of `bool` vars.,0,0,0,0.9851723909378052,0.9942902326583862,0.9958462119102478,0.0,accept,unanimous_agreement
543985847,13885,i think you should handle the case when `torrents` is empty.,0,0,0,0.9886263012886048,0.985468566417694,0.987147331237793,0.0,accept,unanimous_agreement
543989075,13885,seems possible to rewrite: [code block],0,0,0,0.9874839186668396,0.9939782619476318,0.9941827654838562,0.0,accept,unanimous_agreement
543989720,13885,curly braces can be removed.,0,0,0,0.9849965572357178,0.9898658394813538,0.9863281846046448,0.0,accept,unanimous_agreement
543990859,13885,`for (const bittorrent::infohash &hash : asconst(m_torrenthashes()`,0,0,0,0.9859448671340942,0.9789884090423584,0.99237859249115,0.0,accept,unanimous_agreement
543993124,13885,please move this down to near `m_ui`. also you should rewrite it: [code block],0,0,0,0.9872279167175292,0.9925926327705384,0.9956919550895692,0.0,accept,unanimous_agreement
543994691,13885,"if the order isn't important, i would rearrange them (to be more efficient in memory layout): [code block]",0,0,0,0.9857953786849976,0.9920549392700196,0.9935883283615112,0.0,accept,unanimous_agreement
544517309,13885,sorry what am i supposed to do? also [a link] (that was in constructor),-1,-1,-1,0.9854394793510436,0.9848114252090454,0.9928650856018066,-1.0,accept,unanimous_agreement
544519566,13885,but it's supposed to be a `qreal`. e.g. [a link] maybe you meant this for `getseedingtime()`? it slipped by me. removed from there.,0,0,0,0.985683798789978,0.9811400175094604,0.9899485111236572,0.0,accept,unanimous_agreement
544621895,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
544622121,13885,"i chose the first, thanks.",1,1,1,0.5603217482566833,0.8707974553108215,0.7254252433776855,1.0,accept,unanimous_agreement
544622252,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
544622346,13885,sure done.,0,0,0,0.8880610466003418,0.943390429019928,0.9776996374130248,0.0,accept,unanimous_agreement
544622473,13885,"forgot about that, thanks.",0,0,1,0.7485875487327576,0.5064164996147156,0.6391840577125549,0.0,accept,majority_agreement
544622530,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
544622588,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
544623781,13885,i check for emptiness in caller side.,0,0,0,0.979231595993042,0.9795362949371338,0.992140769958496,0.0,accept,unanimous_agreement
544754493,13885,"i get it, but unless the compiler complains i would still prefer not having it (decimal point) in this case. coercion from `int` to floating point types shouldn't produce any warnings iirc.",0,0,0,0.973510444164276,0.8894013166427612,0.9053726196289062,0.0,accept,unanimous_agreement
544758649,13885,i think adding `q_assert(!torrents.empty());` above `session` variable declaration should suffice. seems not related to me. sure. by having `q_assert()` here shows we expect this (unusual) condition to hold.,0,0,0,0.9817111492156982,0.9798168540000916,0.9857563376426696,0.0,accept,unanimous_agreement
545002037,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
546193570,13885,is it worth to change this behavior? why not use the default behavior from qt? we can have less code then.,0,0,0,0.9854142665863036,0.9897139072418212,0.9848513007164,0.0,accept,unanimous_agreement
546194063,13885,"i think it is better to place a vertical spacer above the `qdialogbuttonbox`, like in torrentoptionsdialog.ui.",0,0,0,0.9864574074745178,0.9909047484397888,0.9874014258384703,0.0,accept,unanimous_agreement
546194527,13885,please simplify the grid as done in this picture: ![a link],-1,0,0,0.8466722965240479,0.885994553565979,0.7077894806861877,0.0,accept,majority_agreement
546228361,13885,"i don't follow. if i don't do this, `partiallychecked` will be available to users when toggling the checkbox, if that's the checkbox's startup state. or you're saying there's an easier way to do this?",0,0,0,0.9619584083557128,0.985295295715332,0.9874818325042723,0.0,accept,unanimous_agreement
546228798,13885,"thanks, i didn't know about it.",0,1,1,0.6652199029922485,0.4613566398620605,0.8283975720405579,1.0,accept,majority_agreement
546228813,13885,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
546316634,13885,"yes, is there a reason to avoid this behavior? if a user misclicked a checkbox, at least he will have the chance to revert it instead of close/reopen the dialog.",0,0,0,0.9643347263336182,0.9789365530014038,0.9906892776489258,0.0,accept,unanimous_agreement
546363968,13885,i didn't imagine someone would want this but i guess you're right. changed it back to default.,0,0,0,0.9440571069717408,0.8148240447044373,0.9563016295433044,0.0,accept,unanimous_agreement
548017618,13885,why not print `disabled for this torrent` in case of **private** torrents? i would rearrange conditions in the following way: [code block] or if it's important to see that dht is disabled for this particular torrent even when it is globally disabled: [code block],0,0,0,0.9860379099845886,0.9941617846488952,0.9930452704429626,0.0,accept,unanimous_agreement
548021958,13885,do you really need all these `updatexxxvalue()` methods? why don't use `m_ui->xxx->setvalue()` directly?,0,0,0,0.988163948059082,0.9938002228736876,0.9876136779785156,0.0,accept,unanimous_agreement
548023335,13885,the same question is about all these `getxxxspeedlimit()` methods...,0,0,0,0.9817665219306946,0.9918255805969238,0.992327868938446,0.0,accept,unanimous_agreement
548026601,13885,redundant space after &&,0,0,0,0.9721581935882568,0.9479236602783204,0.988722324371338,0.0,accept,unanimous_agreement
548028481,13885,`else` is redundant after `return`,0,0,0,0.9801825284957886,0.987941563129425,0.9925722479820251,0.0,accept,unanimous_agreement
548029142,13885,`else` is redundant after `return`,0,0,0,0.9801825284957886,0.987941563129425,0.9925722479820251,0.0,accept,unanimous_agreement
548182454,13885,no reason. i just hope people won't be confused when they see it and think they can enable dht etc for private torrents. but then again the same can be said about the global setting. changed. it is important because the global setting is irrelevant if it's disabled for the torrent.,0,0,0,0.6213224530220032,0.9048089981079102,0.6271717548370361,0.0,accept,unanimous_agreement
548182484,13885,"fine, fine. i inlined all one-liners except for [code block]",0,1,0,0.7664567232131958,0.9384122490882874,0.9287130236625672,0.0,accept,majority_agreement
548388600,13885,is it intended to have negative values?,0,0,0,0.7416402697563171,0.968998908996582,0.9277760982513428,0.0,accept,unanimous_agreement
548534955,13885,"intended? no, hence the qmax. it is -1 when torrents limits are different but it won't reach the call sites (anymore). removed qmax and inlined them.",0,0,0,0.9877722263336182,0.9873617887496948,0.9939397573471068,0.0,accept,unanimous_agreement
548862191,13885,in this case (and several cases below) using lambda is redundant: [code block],0,0,0,0.9549229741096495,0.9934858679771424,0.9912638664245604,0.0,accept,unanimous_agreement
548863226,13885,you can connect `qslider::valuechanged` with `qspinbox::setvalue` directly.,0,0,0,0.987108051776886,0.993606448173523,0.995322287082672,0.0,accept,unanimous_agreement
548864031,13885,you can connect `qcheckbox::toggled` with `qspinbox::setenabled` directly.,0,0,0,0.9878087043762208,0.9931408762931824,0.9955782294273376,0.0,accept,unanimous_agreement
548864296,13885,please add blank line above.,0,0,0,0.9810636043548584,0.9878902435302734,0.9948902130126952,0.0,accept,unanimous_agreement
548864312,13885,please add blank line above.,0,0,0,0.9810636043548584,0.9878902435302734,0.9948902130126952,0.0,accept,unanimous_agreement
548864822,13885,i would declare constant mixed_ratios to indicate it instead of using numbers directly.,0,0,0,0.9873805046081544,0.9913774728775024,0.9856062531471252,0.0,accept,unanimous_agreement
548864985,13885,please add blank line above.,0,0,0,0.9810636043548584,0.9878902435302734,0.9948902130126952,0.0,accept,unanimous_agreement
548865089,13885,please add blank line above.,0,0,0,0.9810636043548584,0.9878902435302734,0.9948902130126952,0.0,accept,unanimous_agreement
548900896,13885,"thanks, changed all of these.",0,1,1,0.5538056492805481,0.8388108015060425,0.8887906670570374,1.0,accept,majority_agreement
548901018,13885,i declared mixed_share_limits that is used for both ratio and seeding time. i can change it to 2 constants if that's confusing.,0,0,0,0.9629331827163696,0.9043172597885132,0.9920327663421632,0.0,accept,unanimous_agreement
552936718,13885,wtf? why was the **deletion** of other people's copyright years allowed? was the file rewritten so much that their code isn't here anymore?,-1,-1,-1,0.9705989360809326,0.9308700561523438,0.991411566734314,-1.0,accept,unanimous_agreement
552948489,13885,"seems git incorrectly show this file as rewritten `updownratiodialog.h`. looking at its diff and diffs of the accompanying .`cpp`/`.ui` files, it is clear that this is something created from scratch (am i wrong?). the question is why the author did not want to indicate himself in the copyright, but indicated christophe dumez. we did not focus on this... to be honest, i do not understand the intricacies of copyright, and we do not have any declared policy about it to be guided by it.",-1,-1,0,0.7909119129180908,0.5933333039283752,0.7042107582092285,-1.0,accept,majority_agreement
884455202,16840,might be faster to use a loop directly. currently it needs to construct a qset first and then throw it away after use.,0,0,0,0.984398603439331,0.9921302199363708,0.9794393181800842,0.0,accept,unanimous_agreement
884460444,16840,"based on [a link] `m_loadedresumedata.clear()` might be faster than `m_loadedresumedata = {};`, and the latter might change memory location (which is undesired imo) if i understand correctly.",0,0,0,0.9888889193534852,0.9917230010032654,0.9855319857597352,0.0,accept,unanimous_agreement
884461601,16840,[code block] since we don't mutate it in its lifetime.,0,0,0,0.9830459356307985,0.9896854162216188,0.989440619945526,0.0,accept,unanimous_agreement
884465942,16840,off topic what is rule for deciding which form to use now? i can't see a pattern here.,0,0,0,0.919329822063446,0.8912014365196228,0.9724037051200868,0.0,accept,unanimous_agreement
884467192,16840,if i read correctly: [code block] or just inline the call into the next line.,0,0,0,0.9869694709777832,0.990419328212738,0.9925853610038756,0.0,accept,unanimous_agreement
884469461,16840,it would be nice to break it into smaller parts: [code block],0,0,0,0.9342460036277772,0.9820547699928284,0.9809531569480896,0.0,accept,unanimous_agreement
884471990,16840,is it possible to have a less generic name?,0,0,0,0.9796008467674256,0.9914219975471495,0.9911245703697203,0.0,accept,unanimous_agreement
884474272,16840,"currently we haven't dropped qt5, should we still prefer `qvector`?",0,0,0,0.9875619411468506,0.9938236474990844,0.9919374585151672,0.0,accept,unanimous_agreement
884650961,16840,"what, for example? it's a private name, so i didn't care much. besides, i really can't think of anything more suitable for storing parameters.",-1,-1,0,0.9129480719566344,0.7224458456039429,0.8730553984642029,-1.0,accept,majority_agreement
884653416,16840,"it was a list before that, so i don't see the point in changing it on the threshold of qt6. we don't even know its size to reserve.",0,0,0,0.9045428037643432,0.939802348613739,0.977871596813202,0.0,accept,unanimous_agreement
884658143,16840,"when i studied programming, loops without a condition like `while (true)` were considered as something like `goto`.",0,0,0,0.9821747541427612,0.9881452322006226,0.9725750088691713,0.0,accept,unanimous_agreement
884664465,16840,currently everything is moved. without `std::exchange` it will copy at least once.,0,0,0,0.9878073334693908,0.9815592169761658,0.992946207523346,0.0,accept,unanimous_agreement
884720700,16840,"when we discussed this last time, we agreed that in the case of a constructor call, curly braces should be used only in extreme cases, namely, either when it is necessary to eliminate ambiguity, or when the list of parameters follows directly after the variable name: [code block]",0,0,0,0.9846745729446412,0.9921815395355223,0.9934229254722596,0.0,accept,unanimous_agreement
884767163,16840,changed.,0,0,0,0.9753402471542358,0.9758284687995912,0.9680466055870056,0.0,accept,unanimous_agreement
884767753,16840,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
884768864,16840,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
884937546,16840,i don't think so. [code block] test case 1: [code block] test case 2: [code block],0,0,0,0.9776715636253356,0.9826163053512572,0.976477861404419,0.0,accept,unanimous_agreement
884948582,16840,"i wouldn't take it as a dogma. [a link] imo `while (true)` is the form that has the most freedom to express any idea. i usually start with it and refactor into other forms whenever possible (without bending the statements too much), otherwise it would just stay in the `while (true)` form. anyway, decide it yourself.",0,0,0,0.9573379755020142,0.9395865201950072,0.9620099067687988,0.0,accept,unanimous_agreement
884966449,16840,"to name a few: `programparameters`, `appparameters`, `cmdlineparameters`, `torrentstartupparams`...",0,0,0,0.987593710422516,0.9946829676628112,0.9913349747657776,0.0,accept,unanimous_agreement
884967684,16840,seems this can be moved out of class.,0,0,0,0.9858932495117188,0.9911503791809082,0.989798903465271,0.0,accept,unanimous_agreement
884973785,16840,i would add `#ifdef qt_debug` around it or remove it entirely.,0,0,0,0.9881715178489684,0.9925149083137512,0.9925895929336548,0.0,accept,unanimous_agreement
884974665,16840,i would try to make `50` a named constant.,0,0,0,0.9864054322242736,0.9912140965461732,0.9796301126480104,0.0,accept,unanimous_agreement
884975754,16840,this while loop is big! would it be possible to break it into smaller pieces with lambda functions? i don't insist it be done in this pr but it would be great if you can do it..,1,1,1,0.9394807815551758,0.8776849508285522,0.9436306953430176,1.0,accept,unanimous_agreement
884976664,16840,it should have a `reserve()`.,0,0,0,0.9859252572059632,0.9918993711471558,0.9950173497200012,0.0,accept,unanimous_agreement
885222393,16840,it is not so correct. you forgot to add `qvector b = std::move(a);`. otherwize the result is the same as when use `std::exchange()` but the code takes 3 lines instead of just 1.,0,0,0,0.9764699339866638,0.9790465831756592,0.98146653175354,0.0,accept,unanimous_agreement
885228278,16840,then i need either make application::params public (but it is intended for private use only) or make the function friend. i dislike both of them.,-1,-1,-1,0.986630082130432,0.9710337519645692,0.9817681312561036,-1.0,accept,unanimous_agreement
885244906,16840,what size should i reserve? should i traverse alerts one more time to count add_torrent_alert?,0,0,0,0.9847738742828368,0.9935264587402344,0.9936275482177734,0.0,accept,unanimous_agreement
885245094,16840,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
885271172,16840,"it is already `application::params` so `program`, `app` etc. are redundant. imo, `startup` part is confusing. maybe `application::addtorrentparams`?",0,0,0,0.6285857558250427,0.7387991547584534,0.934025764465332,0.0,accept,unanimous_agreement
885285862,16840,"not sure that is relevant. the point is: with `m_loadedresumedata.clear()`, `m_loadedresumedata` still uses the same memory address. while `m_loadedresumedata = {};` or `std::exchange(m_loadedresumedata , {});` it will have the bad effect.",0,0,0,0.9071382880210876,0.9322526454925536,0.868464469909668,0.0,accept,unanimous_agreement
885286918,16840,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
885289637,16840,an approximated value is better than nothing. i would choose `1024` or even `alerts.size()`...,0,0,0,0.970134437084198,0.9814246892929076,0.9809901714324952,0.0,accept,unanimous_agreement
885292657,16840,"it doesn't using both `std::move` and `std::exchange`. only copy could preserve it but it is bad alternative, imo.",-1,-1,-1,0.957370102405548,0.9811522960662842,0.9665650129318236,-1.0,accept,unanimous_agreement
885302159,16840,"and, btw, i don't see any particular point in ""use the same memory address"" (of course, if we can't trivially avoid it).",0,0,0,0.9738508462905884,0.9674128293991088,0.9897005558013916,0.0,accept,unanimous_agreement
885304047,16840,seems it can be the same as max_processing_resumedata_count.,0,0,0,0.9880610704421996,0.9928566217422484,0.9911613464355468,0.0,accept,unanimous_agreement
885317073,16840,"ok, i saw my error. another thing, can `m_loadedresumedata` have a `reserve()`? probably with an estimated value. if `reserve()` is added then `std::exchange` will reset the capacity and you'll need to reserve it again. if you used `clear()`, since qvector is implicitly shared there should be no copy but a detachment, and detachment don't reset the capacity. of course if `m_loadedresumedata` is small then this issue can be neglected but i'm not sure about it.",0,0,0,0.9364004731178284,0.9622105956077576,0.9745308756828308,0.0,accept,unanimous_agreement
885518810,16840,"done. ok, changed to copy+clear. qvector turned out to be smart enough to copy nothing when detaching due to `clear()`. it still changes the memory address but preserves original capacity.",0,0,0,0.863814115524292,0.9777039289474488,0.9687520265579224,0.0,accept,unanimous_agreement
885661028,16840,refactored into several methods.,0,0,0,0.9845645427703856,0.9875643849372864,0.9832065105438232,0.0,accept,unanimous_agreement
886344996,16840,maybe [code block],0,0,0,0.9848864674568176,0.9904905557632446,0.990217387676239,0.0,accept,unanimous_agreement
886359844,16840,is this rescheduling itself? won't it keep reschedule forever?,0,0,0,0.9514585137367249,0.9795408844947816,0.9808374047279358,0.0,accept,unanimous_agreement
886374240,16840,it is inside conditional statement. it reschedules itself until all the resume data are loaded and startup process is finished.,0,0,0,0.9875396490097046,0.992615818977356,0.9949098229408264,0.0,accept,unanimous_agreement
886403452,16840,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
889059075,16840,"well, redundant scheduling still turned out to be possible under certain conditions (not the ones i originally thought of). so now i'm really tracking whether it was already scheduled.",0,0,0,0.9782982468605042,0.9680392742156982,0.9832134246826172,0.0,accept,unanimous_agreement
901059694,16840,seems not in use?,0,0,0,0.9282134175300598,0.966311812400818,0.9862132668495178,0.0,accept,unanimous_agreement
901060593,16840,"this is quite bad usability, maybe just disable `m_ui->checkstartseeding` checkbox in the constructor if session isn't ready and add a tooltip about why it isn't available. then there is no need for this message.",-1,-1,-1,0.9595422148704528,0.96837717294693,0.9450074434280396,-1.0,accept,unanimous_agreement
901061108,16840,those disabled entries should have a tooltip telling why.,0,0,0,0.9689972400665284,0.963654637336731,0.9830557107925416,0.0,accept,unanimous_agreement
901061537,16840,the title should say the current action (downloading torrents) failed. this applies to other similar messages.,0,0,0,0.982161819934845,0.9838587641716005,0.994413435459137,0.0,accept,unanimous_agreement
901061738,16840,"it should mention when it is possible, i.e. ""adding new torrents is prohibited until session is restored."" this applies to other similar messages.",0,0,0,0.981261909008026,0.9935840964317322,0.9929330348968506,0.0,accept,unanimous_agreement
901062054,16840,"(globally) would it be possible to just disable the gui widgets/elements instead of needing this message? i think it is too intrusive... the message doesn't closely related to the action performed and the failing is unexpected for users. imo this is quite a big change... now is adding/enforcing a new *step* (restoring torrents) when starting up and when processing this step all session related operations are halted. maybe instead of enable/disable widgets here and there maybe present a new modal dialog on top of mainwindow which shows the restore progress (a progressbar with cancel button?), since the gui doesn't have much functionality without session ready anyway... also what about webapi/webui users? how would they know when the session is ready?",-1,-1,-1,0.7533946633338928,0.8241185545921326,0.91727215051651,-1.0,accept,unanimous_agreement
901082546,16840,"it's only about adding torrents. most of the other operations are still available. and i highly doubt that earlier you would have been able to successfully add a torrent before resuming the session, given that the application was almost completely unresponsive during this period. i really don't want to redo everything for now. in addition, i believe that we will not understand how it would be better until it gets into production and we begin to receive real feedbacks. please, just don't make me get into web ui. poking around there is beyond my strength. honestly, it's easier for me to give it all up...",-1,-1,-1,0.9735341668128968,0.9683080911636353,0.9810836911201476,-1.0,accept,unanimous_agreement
901082897,16840,"maybe just silently ignore ""double click"" until the session is restored?",0,0,0,0.9593873023986816,0.9884067177772522,0.9786045551300048,0.0,accept,unanimous_agreement
901091851,16840,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
901303571,16840,"i don't insist on webui. as for webapi, i'm not saying it is a hard requirement for this pr but it is something to think about (as to avoid redesigning the internals). i don't think users would like that. (just providing ideas) on top of the transferlist there could be a modal dialog like this (without the close button): ![a link] the transferlist won't be populated when this dialog is running. to be honest, i don't really like disabling menu items/widgets due to session not ready so i'm finding alternative ways.",-1,-1,-1,0.9853507280349731,0.7225476503372192,0.4953851401805877,-1.0,accept,unanimous_agreement
902162858,16840,"yes, it looks quite cumbersome and poorly scalable. so a modal dialog would be a better alternative. but i am not sure that this will work correctly in the case of starting hidden in the tray (without displaying the main window). i must try... other alternatives i'm thinking of: 1. don't create any regular content of main window until session is restored and just display startup progress, 2. don't create main window until session is restored and display startup progress in its own window.",-1,-1,-1,0.6629745960235596,0.6572186946868896,0.9059234261512756,-1.0,accept,unanimous_agreement
902213764,16840,i'm would prefer this (show the mainwindow but leave the transferlist empty or disabled) and this way would be simpler to implement i presume?,0,0,0,0.9812053442001344,0.9837534427642822,0.9900598526000975,0.0,accept,unanimous_agreement
902228240,16840,"you don't seem to understand this option of mine that you commented on. i mean to create main window that doesn't contain any regular controls, toolbox, menus etc. but only temporary controls needed to display startup progress. after session is restored the main window will expose its regular layout. otherwise we need either disable all regular controls or show modal dialog to make them unavailable.",0,0,0,0.9628154039382936,0.8992350101470947,0.7932602167129517,0.0,accept,unanimous_agreement
902264742,16840,"then the mainwindow will have different layouts depending on the state of session, which is more coding work. to clarify what i said before. i meant on startup, the mainwindow is shown entirely (all menus, widgets) but the transferlist is empty. next the session restore modal dialog is shown automatically (and closed automatically when done). note that this dialog is modal so users cannot interact with mainwindow to do other things. while the session restore procedure runs, the transferlist remains empty (maybe make it in disabled state?), only when the procedure is finished/canceled then the transferlist will populate the contents. would this be possible? will there be downsides? i imagine this way would be easier than other options.",0,0,0,0.9838756918907166,0.9816423654556274,0.988043487071991,0.0,accept,unanimous_agreement
902274581,16840,"(on windows) currently dialogs (about, options, etc.) remains on screen when mainwindow is minimized to tray, so maybe just show the modal dialog anyway (at least for this first version, we can tweak it later).",0,0,0,0.9892266988754272,0.992612600326538,0.9921521544456482,0.0,accept,unanimous_agreement
902277563,16840,"i'm against windows showing when minimized to tray, as qt sometimes crashes on monitor disconnect if it's drawing *any* windows (so i always make sure qbit is minimized to tray before i turn my screen off for the night)",0,0,0,0.7077983021736145,0.7722747921943665,0.8308470845222473,0.0,accept,unanimous_agreement
902331540,16840,i wouldn't consider it as acceptable solution. if users select to start qbittorrent minimized to tray they clearly don't want to see anything on the screen. not very much. the creation of a regular layout could simply be placed in a separate method called when the session is restored.,0,0,0,0.9427847266197203,0.680234432220459,0.858348548412323,0.0,accept,unanimous_agreement
50686029,4681,extra blank line.,0,0,0,0.9751723408699036,0.9701850414276124,0.9852682948112488,0.0,accept,unanimous_agreement
50690961,4681,this subsystem (file logger) is not part of base. it's part of app which uses base service logger (like loglistwidget executionlog is part of gui and it also uses logger).,0,0,0,0.9887386560440063,0.9942688941955566,0.9931024312973022,0.0,accept,unanimous_agreement
50691483,4681,isn't that a little wasteful? maybe it's better to save one value and interpret it as a set of flags?,0,0,0,0.6337336301803589,0.8292639851570129,0.5894978046417236,0.0,accept,unanimous_agreement
50691919,4681,what about default values for constructor params?,0,0,0,0.984162449836731,0.9908629655838012,0.9934515953063964,0.0,accept,unanimous_agreement
50692813,4681,"please use the same rule for names as in c++ files. `menulog`, `actionexecutionlogs`, etc. existing names in mainwindow i fixed in one of my last prs.",0,0,0,0.9885586500167848,0.9934293627738952,0.9948768019676208,0.0,accept,unanimous_agreement
50693280,4681,"by and large, this class should not contain any logic associated with handling log messages (and only the initialization/configuration of interface elements). this should be moved to the appropriate widget code.",0,0,0,0.9871158003807068,0.9926417469978333,0.9912857413291932,0.0,accept,unanimous_agreement
50693556,4681,to call widget classes in the form of ` widget` (eg. executionlogwidget) is a good thing.,1,0,0,0.8389941453933716,0.8924095630645752,0.7995208501815796,0.0,accept,majority_agreement
50802792,4681,"forget it if you want. actually, i understand why you're using this proxy code. you just want to have a simple widget (loglistwidget) that would operate only with some abstract string messages and their categories. i just somewhat confused by the fact that categories aren't used to working with peers... nothing. just do the default values for constructor parameters.",-1,-1,0,0.5816538333892822,0.7989532351493835,0.5228375196456909,-1.0,accept,majority_agreement
50809688,4681,"ok, i'll move it. i generally had in my mind base == non-gui and had forgotten about the other places.",0,0,0,0.96808260679245,0.965071141719818,0.9856011271476746,0.0,accept,unanimous_agreement
50809905,4681,sure. can you recommend a type? i am thinking `char` and setting its first 4bits to on/off. (needs extra code though),0,0,0,0.97172349691391,0.987412929534912,0.9798067808151244,0.0,accept,unanimous_agreement
50810254,4681,"exactly. the only ""optimization"" i could do is move the 2 formatting functions from `executionlog` into the `loglistwidget` class as slots. then in `executionlog` connect the correct instance to the correct signal/slot. so it is a tradeoff: a simple `executionlog` or a simple `loglistwidget`. i don't really care which.",-1,0,0,0.9185922145843506,0.9552359580993652,0.9180166721343994,0.0,accept,majority_agreement
50810331,4681,sure. that name was auto generated by qtdesigner...,0,0,0,0.9783498048782348,0.9931960105895996,0.9891945123672484,0.0,accept,unanimous_agreement
50815490,4681,maybe you should try qflags?,0,0,0,0.9828166961669922,0.9938726425170898,0.9865922331809998,0.0,accept,unanimous_agreement
50817762,4681,good idea but qvariant doesn't have a constructor for that. i am thinking of a qbitarray.,1,0,1,0.6531115770339966,0.5738100409507751,0.524145245552063,1.0,accept,majority_agreement
50819244,4681,qvariant has generic fromvalue(). qflags is better since it allows to use something like log::normal | log::warning.,0,0,0,0.9767987728118896,0.9914283156394958,0.989951193332672,0.0,accept,unanimous_agreement
51356190,4681,"take this diff as you please. besides moving to the same line, some changes: - i removed the translatable property for `...` string. - use `qtoolbutton` in place of `qpushbutton` [code block]",0,0,0,0.9847907423973083,0.9941447377204896,0.9916623830795288,0.0,accept,unanimous_agreement
51617011,4681,move up. before `logger::freeinstance();` since filelogger uses logger.,0,0,0,0.985749125480652,0.9947487711906432,0.9930550456047058,0.0,accept,unanimous_agreement
51617135,4681,`m_filelogenabled` is redundant variable.,0,0,0,0.9799538850784302,0.977266013622284,0.9935590624809264,0.0,accept,unanimous_agreement
51617736,4681,here you open/write/close log file several times in a row. i think that is wasteful.,-1,0,-1,0.9578492641448976,0.6842231154441833,0.8141965866088867,-1.0,accept,majority_agreement
51618084,4681,maybe it would be better to use string array indexed by message type?,0,0,0,0.9866988658905028,0.9926828742027284,0.9831928014755248,0.0,accept,unanimous_agreement
51618516,4681,isn't `q_declare_operators_for_flags` supposed to be placed outside the `log` namespace?,0,0,0,0.986563205718994,0.9955759048461914,0.993646502494812,0.0,accept,unanimous_agreement
51619354,4681,"it is better to divide the system and local includes. use `""` with local.",0,0,0,0.9874191880226136,0.994059920310974,0.9942165613174438,0.0,accept,unanimous_agreement
51619461,4681,coding style!,0,0,0,0.9357277154922484,0.6929866075515747,0.9765297174453736,0.0,accept,unanimous_agreement
51619698,4681,camel case,0,0,0,0.9631492495536804,0.9588241577148438,0.9894331097602844,0.0,accept,unanimous_agreement
51619841,4681,this variable is redundant.,0,0,0,0.9211268424987792,0.5618071556091309,0.9752285480499268,0.0,accept,unanimous_agreement
51620634,4681,maybe add `all = -1` here and use it later?,0,0,0,0.9867825508117676,0.9944438338279724,0.99201101064682,0.0,accept,unanimous_agreement
51621525,4681,"yes, but it never accesses logger directly, only in construction to setup the signal/slots. my intention was to leave it last in order to catch all messages to file. do you still want to move it?",0,0,0,0.9869055151939392,0.974309265613556,0.9938329458236694,0.0,accept,unanimous_agreement
51621693,4681,true. i'll remove.,0,0,0,0.98436039686203,0.9840616583824158,0.990925431251526,0.0,accept,unanimous_agreement
51621989,4681,i don't think you can lose some messages here. better change it.,0,0,0,0.9498111605644226,0.6478029489517212,0.8435271978378296,0.0,accept,unanimous_agreement
51622006,4681,i was thinking this when i was implementing it. i was going to discuss about this but i forgot. my other thought was: have the file as member var and keep it open for eg 5secs of inactivity(timer). then close it again. or keep it open indefinitely and close on object destruction?,0,0,0,0.9138591885566713,0.6303678154945374,0.9516881704330444,0.0,accept,unanimous_agreement
51622243,4681,like we did recently with the sigterm etc signals? that is a good thought.,1,0,0,0.9335848093032836,0.7414225935935974,0.9300144910812378,0.0,accept,majority_agreement
51622490,4681,i have no idea... the docs aren't very detailed there. plus it seems to work on the other places where i use bitwise operations. but i can move it if you want.,0,-1,0,0.9575595855712892,0.6702898740768433,0.8401851058006287,0.0,accept,majority_agreement
51622620,4681,sorry. my mistake.,-1,-1,-1,0.9877989292144777,0.9915197491645812,0.9935818910598756,-1.0,accept,unanimous_agreement
51622636,4681,yes. and do flush() from time to time.,0,0,0,0.9844659566879272,0.9887520670890808,0.9927668571472168,0.0,accept,unanimous_agreement
51623114,4681,i can't read docs at this time but i think it is clear about this.,0,0,0,0.9727030992507936,0.8788698315620422,0.9839144945144652,0.0,accept,unanimous_agreement
51623976,4681,i feel ashamed.,-1,-1,-1,0.9767307639122008,0.976921021938324,0.9922683835029602,-1.0,accept,unanimous_agreement
51624061,4681,:+1:,0,0,0,0.7570654153823853,0.9166757464408876,0.9328674077987672,0.0,accept,unanimous_agreement
51624161,4681,not my code but ok.,0,0,0,0.9649394154548644,0.7751466035842896,0.9656809568405152,0.0,accept,unanimous_agreement
51624477,4681,ok. should i put it first or last?,0,0,0,0.9835991859436036,0.9891645312309264,0.9899915456771852,0.0,accept,unanimous_agreement
51624627,4681,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
51625049,4681,ok another timer... what timeout do you suggest?,0,0,0,0.9766204357147216,0.9236735105514526,0.9928297400474548,0.0,accept,unanimous_agreement
51628278,4681,maybe just to use 0 timeout? do you understand what i mean? if timer isn't active we call single shot with 0 timeout in addlogmessage and store that timer is active.,0,0,0,0.9882925152778624,0.992659032344818,0.989501655101776,0.0,accept,unanimous_agreement
51628494,4681,no matter.,0,0,0,0.9385160207748412,0.8726392984390259,0.9556376338005066,0.0,accept,unanimous_agreement
51636521,4681,"so if the control doesn't return to mainloop we continue to output stuff to the file. but when control returns to mainloop it means that it is unlikely to have other stuff to write immediately, the slot is called and the file is closed. nice idea, but imo we will have almost the same problem with the warning messages about the trackers.(when retrieving favicons that don't exist)",0,1,1,0.8445611000061035,0.7743757367134094,0.5097248554229736,1.0,accept,majority_agreement
51677674,4681,what's the problem you're talking about?,0,0,0,0.6804789304733276,0.7248536348342896,0.922997772693634,0.0,accept,unanimous_agreement
51975231,4681,shouldn't we start from new file here?,0,0,0,0.9804131388664246,0.9919803142547609,0.9938114285469056,0.0,accept,unanimous_agreement
52033116,4681,when application is started it tries to download the favicons for the torrents' trackers. there are quite a few trackers that don't return a favicon and we output warning messages to the log. just check your log to see the orange text. these messages are being logged one after the other at the first few seconds(or minute) of startup. so if i have timer with a 0 timeout to close the filelog file: the file will be opened again after the next mainloop iteration. then closed again and then open agian etc. so we are back to the original problem.,0,0,0,0.960940420627594,0.7228982448577881,0.946487307548523,0.0,accept,unanimous_agreement
52033396,4681,i don't follow. what do you mean?,0,-1,0,0.6388574838638306,0.8385803699493408,0.7809547185897827,0.0,accept,majority_agreement
52038627,4681,"no. i think it's a problem of different level. here you are trying to do this in a loop (with delays in a few micro or even nano seconds). and in another case the delay is much more. besides the messages about favicons not so much (theoretically, their may not be). i also suggest not to open/close the file and keep it open and periodically do flush().",0,0,0,0.9553680419921876,0.793619692325592,0.9526128768920898,0.0,accept,unanimous_agreement
52039771,4681,"imagine this situation: when we run the program, we have some log file (almost complete), remaining after the previous session. we adding some number of messages, it fills up, we remove it and start writing to a new file. we may lose some interesting messages, for example, torrents resuming, ports allocation, etc.",0,0,0,0.9657748341560364,0.9836424589157104,0.9536330103874208,0.0,accept,unanimous_agreement
52043184,4681,i forgot this. i had in my mind close(). then i am ok.,0,0,1,0.5620790123939514,0.9607776999473572,0.6420896053314209,0.0,accept,majority_agreement
52043885,4681,"to be honest, i have seen the gui options other apps have that allow delete/backup for x size. but i have never used them to actually know how they handle that situation(your use case). do you have any proposal here? and isn't it a bit dangerous anyway to select ""delete after x size""? i mean the user probably accepts the risk. ps: i thought of an idea: 1. allow to only backup after x size and 2. allow to delete **backup** logs that are x days old?",0,0,0,0.6300846338272095,0.8440334796905518,0.7768752574920654,0.0,accept,unanimous_agreement
52048809,4681,at least start writing to new file when we start qbittorrent. and let the rest up to the user.,0,0,0,0.9867478609085084,0.99191015958786,0.993460178375244,0.0,accept,unanimous_agreement
52048941,4681,it's good idea. in addition to corresponding option.,1,1,1,0.9265663027763368,0.9833489656448364,0.9896385669708252,1.0,accept,unanimous_agreement
52051468,4681,no. that will fill up the log folder with too much small log files in a matter of days.,0,0,0,0.9320917129516602,0.8052307963371277,0.7878337502479553,0.0,accept,unanimous_agreement
52053069,4681,i mean case when we delete files. we just delete the old file and starts writing to new one.,0,0,0,0.9871990084648132,0.9742338061332704,0.984281361103058,0.0,accept,unanimous_agreement
52055534,4681,"well there are a lot of bugs reported where older log entries would have helped in faster debugging. anyway, i'll implement the delete after x days and be done with it.",0,0,0,0.977625012397766,0.9681919813156128,0.9801249504089355,0.0,accept,unanimous_agreement
55310887,4681,"why not `qscoopedpointer`? the `application` object owns the `m_filelogger` object, doesn't it?",0,0,0,0.9864718914031982,0.9946959614753724,0.9920924305915833,0.0,accept,unanimous_agreement
55311320,4681,"since you've put file size check after writing the current message, a `str.flush()` call would be logical in between.",0,0,0,0.9890936613082886,0.9944854378700256,0.9921361207962036,0.0,accept,unanimous_agreement
55311992,4681,"i would move the tests and the file manipulation towards the beginning of the function, before the place where the current message is written. then the call to `flush()`, mentioned above is not needed, of course.",0,0,0,0.9892292022705078,0.9921157956123352,0.9927632212638856,0.0,accept,unanimous_agreement
55312508,4681,and `mkpath()` will again check does the path exist.,0,0,0,0.988712191581726,0.990616500377655,0.9947258830070496,0.0,accept,unanimous_agreement
55312612,4681,i would write here [code block] and remove `endswith()` check above.,0,0,0,0.988987386226654,0.9911901950836182,0.9944337010383606,0.0,accept,unanimous_agreement
55312724,4681,`time` is redundant variable unless you want to debug the `qdatetime::frommsecssinceepoch()` call.,0,0,0,0.9874854683876038,0.9901475310325624,0.991909682750702,0.0,accept,unanimous_agreement
55312794,4681,perhaps it is possible to write into the log window a note about this fiasco?,0,0,0,0.9174461364746094,0.969882607460022,0.681552529335022,0.0,accept,unanimous_agreement
55313303,4681,"you better read its source code ;) it has to be placed inside of the namespace for c++ overload rules to work as expected. and `log::` can be omitted, i guess.",1,1,1,0.6595567464828491,0.9888870120048524,0.9865806102752686,1.0,accept,unanimous_agreement
55313727,4681,`else` is redundant,0,0,0,0.9725250005722046,0.9639943838119508,0.9904913306236268,0.0,accept,unanimous_agreement
55313865,4681,[code block] is more explicit,0,0,0,0.9873532056808472,0.986836075782776,0.9947330951690674,0.0,accept,unanimous_agreement
55314023,4681,"questionable, but... [code block] or [code block]",0,0,0,0.5868200063705444,0.8787198066711426,0.9441961646080016,0.0,accept,unanimous_agreement
55314387,4681,"or just use `min()` & `max()` to clamp its value, just a matter of preference...",0,0,0,0.982204258441925,0.9900874495506288,0.9940955638885498,0.0,accept,unanimous_agreement
55324835,4681,and get an infinite loop here?,0,0,0,0.98066645860672,0.6130930781364441,0.985798478126526,0.0,accept,unanimous_agreement
55325246,4681,"but we have to add a message to the file, and only then check whether it has exceeded the limit, and decide what to do with it.",0,0,0,0.9775885343551636,0.9813116192817688,0.9916219711303712,0.0,accept,unanimous_agreement
55325456,4681,qt example: [code block],0,0,0,0.9870526194572448,0.9921367168426514,0.9945873022079468,0.0,accept,unanimous_agreement
55325761,4681,q_declare_flags is inside namespace. q_declare_operators_for_flags is outside namespace (but it uses full qualified type name).,0,0,0,0.9894075989723206,0.9946781396865844,0.9947303533554076,0.0,accept,unanimous_agreement
55325868,4681,and how are you going to return a value between 1 and 1000?,0,0,0,0.9858594536781312,0.9778136014938354,0.9862047433853148,0.0,accept,unanimous_agreement
55325972,4681,[code block] it's unreadable. [code block] it's better.,0,0,0,0.977225124835968,0.9909653663635254,0.9089020490646362,0.0,accept,unanimous_agreement
55326114,4681,recall that **preferences** is deprecated in new code.,0,0,0,0.9858923554420472,0.988799810409546,0.9927311539649964,0.0,accept,unanimous_agreement
55349442,4681,"that is why i wrote ""perhaps""",0,0,0,0.9761383533477784,0.9899067282676696,0.9928723573684692,0.0,accept,unanimous_agreement
55349607,4681,so what can be wrong if we chech that before the next write?,0,0,0,0.9124318957328796,0.9811338186264038,0.9862918257713318,0.0,accept,unanimous_agreement
55349693,4681,"fine, but where is a namespace?",0,0,0,0.987322986125946,0.97217059135437,0.9884489178657532,0.0,accept,unanimous_agreement
55349787,4681,see below.,0,0,0,0.976851522922516,0.9821418523788452,0.9944506883621216,0.0,accept,unanimous_agreement
55350354,4681,hmm... maybe you're right.,0,0,0,0.8770776391029358,0.9097215533256532,0.8971707820892334,0.0,accept,unanimous_agreement
55350902,4681,you disappoint me... what a class is different from the namespace in this context?,-1,-1,-1,0.9751592874526978,0.9874654412269592,0.993941843509674,-1.0,accept,unanimous_agreement
55351167,4681,"i mean that only the keyword `else` is redundant, but not the `else` clause.",0,0,0,0.9718151092529296,0.9916316866874696,0.9877135753631592,0.0,accept,unanimous_agreement
55351614,4681,i don't understand what do you mean. we have three cases: val <= 1: we should return 1 1 < val <= 1000: we should return val itself val > 1000: we should return 1000 and we have three branches in code which corresponds to three cases above. what is redundant?,0,-1,0,0.8590559363365173,0.7566250562667847,0.5462266206741333,0.0,accept,majority_agreement
55351972,4681,"[code block] you don't put `break` after `return` in `switch`, right? the same is here.",0,0,0,0.9880900382995604,0.9944278001785278,0.9930689334869384,0.0,accept,unanimous_agreement
55352488,4681,for operators the lookup mechanism checks for an user-provided version in the namespaces where its arguments are declared. therefore there is no need to pollute the global namespace.,0,0,0,0.987430453300476,0.994191586971283,0.9932852983474731,0.0,accept,unanimous_agreement
55352504,4681,you should be more specific. then other explanations need not.,0,0,0,0.918080508708954,0.9820793867111206,0.9915043711662292,0.0,accept,unanimous_agreement
55353178,4681,"so, i would add a flag to the `filelogger` class, say `m_ignoremessages`, set it here, fire a log message and in the very beginning of the function i'll check: [code block] and reset the flag in `filelogger::configure()` after everything is set up. as a bonus `filelogger` will become almost ready for multi-thread usage.",0,0,0,0.9761286973953248,0.9752855896949768,0.991532862186432,0.0,accept,unanimous_agreement
55354549,4681,"are you going again across the universe... who (or what) will set this flag? filelogger is a logger client, do not forget about it. but something to do is still possible... for example, the filelogger can ignore messages on any (hardcoded) attribute.",0,0,0,0.9759986400604248,0.8058832287788391,0.980238676071167,0.0,accept,unanimous_agreement
55354557,4681,"ah, now i see. i'm sorry, i didn't know about it (apparently, qt developers too). for followers: [a link]",-1,-1,-1,0.9875149726867676,0.992684841156006,0.9914717078208924,-1.0,accept,unanimous_agreement
55355158,4681,"this function can set it directly here: [code block] also, if `utils::fs::forceremove()` call below fails, we can do the similar things.",0,0,0,0.988419771194458,0.9932355284690856,0.9949100613594056,0.0,accept,unanimous_agreement
55357762,4681,"it makes sense (we can safely assume that if we are unable to open the file once, we will not be able to do it next). although it is better to name the flag something more suitable (`m_invalid` or something similar).",0,0,0,0.9825603365898132,0.9925691485404968,0.9891414642333984,0.0,accept,unanimous_agreement
55357865,4681,but better to release it first without this feature.,0,0,0,0.9640750885009766,0.9848390817642212,0.990513801574707,0.0,accept,unanimous_agreement
55362682,4681,"besides, there will be no problem, if you leave it as is. says it's too loud. this won't hurt it.",-1,0,0,0.5702247023582458,0.4444891810417175,0.941637933254242,0.0,accept,majority_agreement
55404376,4681,"since there is a default value for the log file name, i would like to see here a call to `qfile::setpermissions(qfile::readowner|qfile::writeowner)`",0,0,0,0.9857930541038512,0.9912360906600952,0.9949506521224976,0.0,accept,unanimous_agreement
55938801,4681,we do cleanup in application::cleanup() instead of destructor. the reason is we need to control the shutdown process on windows otherwise windows kills us aka unclean exit.,0,0,0,0.7795500755310059,0.9829142689704896,0.991014301776886,0.0,accept,unanimous_agreement
55940699,4681,"i see. thank you for the reply. on 13 march 2016 at 16:38, sledgehammer999 notifications.com wrote:",1,1,1,0.978410303592682,0.9483394026756288,0.9857110381126404,1.0,accept,unanimous_agreement
56590764,4681,"the variable may be removed, perhaps. `str << ""(i) ""` does not look worse than `type = ""(i) ""`",0,0,0,0.9727425575256348,0.9915972352027892,0.981855809688568,0.0,accept,unanimous_agreement
56591131,4681,shouldn't one call `str.flush()` here or delete the `str` object?,0,0,0,0.9828563332557678,0.99391770362854,0.9941400289535522,0.0,accept,unanimous_agreement
56591246,4681,"'filelog'? a typo, perhaps?",0,0,0,0.9870036244392396,0.9862631559371948,0.977372109889984,0.0,accept,unanimous_agreement
56593180,4681,why i'm not allowed to indent with tabs in this project? i like them so much!,1,1,1,0.984517514705658,0.9856751561164856,0.8173901438713074,1.0,accept,unanimous_agreement
56596867,4681,"hmm, you're probably right. i'll fix it.",0,0,0,0.9473927021026612,0.9053254723548888,0.8127914071083069,0.0,accept,unanimous_agreement
56596935,4681,no. i want to indicate the file on disk. do you have a better word?,0,0,0,0.9808597564697266,0.9342777729034424,0.991644322872162,0.0,accept,unanimous_agreement
56596980,4681,because we have decided a long ago in 4-spaces indentation.,0,0,0,0.9776045680046082,0.9869033098220824,0.9915419816970824,0.0,accept,unanimous_agreement
56639489,4681,"yes, i know, of course. was joking after i've seen tab indentation in your code.",0,-1,0,0.9552383422851562,0.802302360534668,0.7098096013069153,0.0,accept,majority_agreement
56740252,4681,nope. that's 2 more spaces to make it 4 spaces in total.,0,0,0,0.938482940196991,0.8666491508483887,0.9655485153198242,0.0,accept,unanimous_agreement
56749151,4681,"oh, i was wrong. excuse me my stupid joke, please.",-1,-1,-1,0.989855170249939,0.9924476146697998,0.9945684671401978,-1.0,accept,unanimous_agreement
56749253,4681,"agree with , ""log file"" is perfectly fine.",0,0,0,0.6866722106933594,0.9661310911178588,0.7467979788780212,0.0,accept,unanimous_agreement
56767950,4681,according to docs `endl` flushes the stream too.,0,0,0,0.9892807602882384,0.991797924041748,0.99310040473938,0.0,accept,unanimous_agreement
56769315,4681,maybe just pass-by-value? (for simple/primitive types),0,0,0,0.9877726435661316,0.9933638572692872,0.9877201914787292,0.0,accept,unanimous_agreement
56769517,4681,this always surprises me too.,0,-1,-1,0.5219298005104065,0.9091776013374328,0.7726171016693115,-1.0,accept,majority_agreement
56771230,4681,i can fix this. is this the only thing about the pr?,0,0,0,0.9775069952011108,0.9838362336158752,0.9917399883270264,0.0,accept,unanimous_agreement
56781110,4681,i haven't reviewed it after your last changes. i'll do it asap.,0,0,0,0.9821186065673828,0.9796642065048218,0.9924310445785522,0.0,accept,unanimous_agreement
56781272,4681,what if `value == true` but `m_filelogger != nullptr`?,0,0,0,0.9841296672821044,0.9930705428123474,0.9908690452575684,0.0,accept,unanimous_agreement
56782151,4681,what this black magic is all about? why not just: [code block] ?,-1,0,0,0.8245772123336792,0.9568684101104736,0.8114631772041321,0.0,accept,majority_agreement
56783458,4681,why do you use non-qt naming? just `executionlogmsgtypes` as we usually did. this affects all this pr.,0,0,0,0.8624228239059448,0.9935452938079834,0.992627203464508,0.0,accept,unanimous_agreement
56783635,4681,+1 but `newpath` in first and second statements.,0,0,0,0.9818933010101318,0.9905394315719604,0.979892075061798,0.0,accept,unanimous_agreement
56783747,4681,+1 `else if (!value)`,0,0,0,0.9811297059059144,0.9836929440498352,0.984889566898346,0.0,accept,unanimous_agreement
56789229,4681,it is not necessary to put constants in an anonymous namespace.,0,0,0,0.9831423759460448,0.9858105778694152,0.9936908483505248,0.0,accept,unanimous_agreement
56789320,4681,just `utils::fs::qdesktopservicesdatalocation() + log_folder` isn't enough here?,0,0,0,0.9860957264900208,0.9940599799156188,0.993488073348999,0.0,accept,unanimous_agreement
56789696,4681,"can you try `{ ""qbittorrent.log.bak*"" }` instead of `qstringlist() << ""qbittorrent.log.bak*""`?",0,0,0,0.985767662525177,0.9954339861869812,0.994128942489624,0.0,accept,unanimous_agreement
56790125,4681,"wouldn't it be easier if you put the file creation here, and deleting in `closelogfile()`? i know that in one place it will lead to we create it immediately after removal. for me, it's a small problem.",0,0,0,0.9475117921829224,0.952584743499756,0.9554018378257751,0.0,accept,unanimous_agreement
56790265,4681,`log::error` is defined by libtorrent?,0,0,0,0.975368857383728,0.9948872923851012,0.992319643497467,0.0,accept,unanimous_agreement
56790375,4681,why not in one line? it isn't so long.,0,0,0,0.6488217711448669,0.6939953565597534,0.967925786972046,0.0,accept,unanimous_agreement
56790467,4681,explicit isn't needed. i'm sorry. mobile github is not working lately. all my comments are added in the wrong place.,-1,-1,-1,0.9889095425605774,0.9938179850578308,0.9933183193206788,-1.0,accept,unanimous_agreement
56790626,4681,log::all?,0,0,0,0.9818857312202454,0.9895564913749696,0.9927778840065002,0.0,accept,unanimous_agreement
56816431,4681,but it saves one from typing 'static' in each line.,0,0,0,0.9876904487609864,0.9765140414237976,0.9936356544494628,0.0,accept,unanimous_agreement
56821092,4681,": thank you, i'll fix the comment above.",1,1,1,0.892803430557251,0.9276261925697328,0.9406765103340148,1.0,accept,unanimous_agreement
56822742,4681,it is not necessary to prepend constants with `static`. constants use internal linkage by default.,0,0,0,0.9874528050422668,0.9931955337524414,0.9939477443695068,0.0,accept,unanimous_agreement
56856676,4681,"i think it is cleaner this way, so i am leaving it.",0,0,0,0.7195960879325867,0.9570800065994264,0.9403434991836548,0.0,accept,unanimous_agreement
56857036,4681,but since i am creating `inline settingsstorage *settings()` i opted to put everything here too to reduce visual clutter. i am leaving it as is.,0,0,0,0.9015411734580994,0.9830024838447572,0.9931880235671996,0.0,accept,unanimous_agreement
56857131,4681,oops. i am going to fix it.,-1,-1,-1,0.9732038974761964,0.98260235786438,0.984240710735321,-1.0,accept,unanimous_agreement
56857312,4681,: thank you!,1,1,1,0.9775500297546388,0.9580572247505188,0.991865336894989,1.0,accept,unanimous_agreement
56858445,4681,"i am not sure what you guys are talking about. there is an agreed rule to use internally paths with ""/"" instead of ""\"" even if the called functions understand both(like qdir). or are you talking about something else entirely?",-1,-1,0,0.842045247554779,0.5518362522125244,0.6873064041137695,-1.0,accept,majority_agreement
56858691,4681,+1 i think i just blindly copied it from something else in preferences.,0,0,0,0.8858684301376343,0.9208367466926576,0.8718289136886597,0.0,accept,unanimous_agreement
56859066,4681,i'm talking about lines 66 – 71 (6 in total). they can be replaced with 3 lines. and i do not understand what is is reason behind lines 67 and 68.,-1,0,0,0.9056530594825744,0.573223888874054,0.7511934041976929,0.0,accept,majority_agreement
56859184,4681,i changed it to: [code block] but i get:,0,0,0,0.9847185015678406,0.9842459559440612,0.9934999346733092,0.0,accept,unanimous_agreement
56859308,4681,"i ignored this, but ok i'll do it.",0,0,0,0.9608641266822816,0.9535126686096193,0.8805469274520874,0.0,accept,unanimous_agreement
56860089,4681,i thought you were right and this was a leftover from my initial implementation. but after changing it i get these cryptic messages from msvc: [code block],0,0,0,0.9609668254852296,0.5208513140678406,0.9489506483078004,0.0,accept,unanimous_agreement
56860208,4681,ok. it was something else before. i am changing it.,0,0,0,0.9303409457206726,0.9704207181930542,0.9866316914558412,0.0,accept,unanimous_agreement
56860428,4681,i think i had a dirty build dir before. now a clean build give me this error: [code block],-1,0,0,0.950947880744934,0.7505263686180115,0.859306275844574,0.0,accept,majority_agreement
56860559,4681,"ok, i'll remove it.",0,0,0,0.9833617806434632,0.9866677522659302,0.9938441514968872,0.0,accept,unanimous_agreement
56860857,4681,"oops. that was before i added the log::all. ps: i should remove the `explicit` keyowrd too, right?",-1,-1,-1,0.7903916239738464,0.7557419538497925,0.9227957129478456,-1.0,accept,unanimous_agreement
56860969,4681,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
56861558,4681,"no. not here, because we have the ability to call the constructor with one parameter.",0,0,0,0.9723213315010072,0.9839687347412108,0.9883404970169068,0.0,accept,unanimous_agreement
56861980,4681,"!?!?! if you guys think it is better, i can leave them out of the namespace...",-1,-1,-1,0.6436043977737427,0.9913730621337892,0.990960657596588,-1.0,accept,unanimous_agreement
56862042,4681,"apparently, the constant from libtorrent still interferes here.",0,0,0,0.9502772092819214,0.9008978009223938,0.9410527348518372,0.0,accept,unanimous_agreement
56862621,4681,"line 66 makes the path look as ""c:/test"" instead of ""c:\test"". the user might have edited the ini file and put the path with ""\"" characters. so i am enforcing here the rule i talked about previously. lines 67-68 append missing ""/"" because at line 71 we append the filename.",0,0,0,0.9804211854934692,0.9944286346435548,0.9937886595726012,0.0,accept,unanimous_agreement
56862882,4681,"weird. what does `qstringbuilder `? `operator+(const qstring &, const qstring &)` must return `const qstring()` according to the documentation.",-1,-1,-1,0.9829234480857848,0.9629671573638916,0.967673659324646,-1.0,accept,unanimous_agreement
56863659,4681,i don't know :s,0,-1,1,0.4937503933906555,0.9878022074699402,0.9917023777961732,,review,no_majority_disagreement
56864018,4681,"weird... then you can leave it as is or make it slightly shorter: `qstringlist(""qbittorrent.log.bak*"")`.",-1,-1,-1,0.9845204949378968,0.8936796188354492,0.9289016723632812,-1.0,accept,unanimous_agreement
56864566,4681,"thank you, but why to do that manually with two lines of code, if you can invoke `qdir::absolutefilepath()`?",1,1,1,0.7165152430534363,0.5366578698158264,0.6014460921287537,1.0,accept,unanimous_agreement
56865146,4681,"we share with the missing knowledge :) apparently, it's for this.",1,1,1,0.979684829711914,0.994657039642334,0.990011990070343,1.0,accept,unanimous_agreement
56865837,4681,yes,0,0,0,0.9564858078956604,0.9659429788589478,0.9686408638954164,0.0,accept,unanimous_agreement
56866366,4681,"ok, i'll drop the if block and use qdir::absolutefilepath() instead.",0,0,0,0.9885671138763428,0.9897462129592896,0.9939004182815552,0.0,accept,unanimous_agreement
56866574,4681,so is it ok to leave all these inside the namespace for visual clarity?,0,0,0,0.9861255288124084,0.9936748147010804,0.9928454756736756,0.0,accept,unanimous_agreement
56866973,4681,", i don't think that without namespace the code will be better. i, personally, like anonymous namespace because they make intents exceptionally clear. one will not think whether there are any `extern` declarations, declarations in a header file, or so.",0,0,0,0.9321126341819764,0.921658456325531,0.9048799276351928,0.0,accept,unanimous_agreement
56868075,4681,ok. i think we're wasting time talking more about this.,-1,0,-1,0.918257474899292,0.728179931640625,0.9749040603637696,-1.0,accept,majority_agreement
56882587,4681,"yes. but `#define` looks ugly here. anyway, it caught my eyes initially.",-1,-1,-1,0.9700859785079956,0.9876946210861206,0.9723300337791444,-1.0,accept,unanimous_agreement
64984317,5310,1. maybe faster & more bulletproof [code block] 2. for consistency use `++i`,0,0,0,0.9040608406066896,0.9873740077018738,0.9812428951263428,0.0,accept,unanimous_agreement
64984478,5310,"~~or use `qstringref` instead of `qstring` when manipulating.~~ bad idea, hard to use.",-1,-1,-1,0.9771361351013184,0.9914120435714722,0.9783775210380554,-1.0,accept,unanimous_agreement
64984546,5310,"~~minor thing~~ ah... forget it, you seem to use `_ip` all over the place. [code block]",0,-1,-1,0.935351550579071,0.4695934951305389,0.6533862352371216,-1.0,accept,majority_agreement
65273520,5310,"might be faster to put the parser outside of this function, which most likely will be inlined.",0,0,0,0.9863137006759644,0.993354082107544,0.9826343655586244,0.0,accept,unanimous_agreement
65273815,5310,parser version which returns bool didn't suit?,0,0,0,0.9870009422302246,0.991166651248932,0.988569438457489,0.0,accept,unanimous_agreement
65274119,5310,"you check for `start < data.size()`, but access `start + 1`th element. added: for these kinds of tasks it is better to allocate buffer of size n+1 (and to put 0 in the last element) when you are going to read n elements, instead of complicating checks. just one more argument to read by fixed size chunks.",0,0,0,0.9832866191864014,0.9926639795303344,0.9943293929100036,0.0,accept,unanimous_agreement
65275195,5310,"i have tested it, but it actually is slower (about 50-60 ms)!",0,0,0,0.8994956016540527,0.8171821236610413,0.9763982892036438,0.0,accept,unanimous_agreement
65275278,5310,i just had the older version lying around.,0,0,0,0.9766469597816468,0.7679072618484497,0.9560225009918212,0.0,accept,unanimous_agreement
65275349,5310,"the implementation of `parseipaddress()` above does not need trimmed from end string to parse the address. anyway, since the buffer is writable, you can just put zeroes in place of delimiters instead of copying the string.",0,0,0,0.9892619848251344,0.9939836859703064,0.9944021105766296,0.0,accept,unanimous_agreement
65275375,5310,`strsep()`,0,0,0,0.9849103093147278,0.9886395931243896,0.9928551316261292,0.0,accept,unanimous_agreement
65275383,5310,+1. i was sure i would be missing some checks.,0,0,0,0.8037733435630798,0.688569188117981,0.8029245734214783,0.0,accept,unanimous_agreement
65275529,5310,"can't understand: you check for `delimindices.size() > 0`, but access `delimindices[1]`",0,0,0,0.985947847366333,0.9843205213546752,0.9676562547683716,0.0,accept,unanimous_agreement
65275797,5310,your compiler does not inline `parseipaddress()`?,0,0,0,0.9872769713401794,0.9885787963867188,0.995129942893982,0.0,accept,unanimous_agreement
65279292,5310,on the second though this does not matter. creating datipv4parser is as simple as incrementing the stack pointer. it is not surprising therefore that the code with local variable performs better.,0,0,0,0.9800608158111572,0.9877147674560548,0.988801121711731,0.0,accept,unanimous_agreement
112802768,5310,redundant empty line?,0,0,0,0.9237290620803832,0.8267132639884949,0.7751052379608154,0.0,accept,unanimous_agreement
112802984,5310,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
112802988,5310,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
112803002,5310,fix coding style (spaces around `<=` operator).,0,0,0,0.9892538785934448,0.992530882358551,0.9931846261024476,0.0,accept,unanimous_agreement
112803013,5310,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
112803076,5310,i would move this empty line one line up (to separate break statement from the rest).,0,0,0,0.9869064092636108,0.978567898273468,0.9908286333084106,0.0,accept,unanimous_agreement
112803093,5310,too long line.,-1,-1,-1,0.8675811886787415,0.648794412612915,0.8303176760673523,-1.0,accept,unanimous_agreement
112803099,5310,too long line.,-1,-1,-1,0.8675811886787415,0.648794412612915,0.8303176760673523,-1.0,accept,unanimous_agreement
112803102,5310,split this line.,0,0,0,0.9790908098220824,0.9723474979400636,0.984650194644928,0.0,accept,unanimous_agreement
112803104,5310,split this line.,0,0,0,0.9790908098220824,0.9723474979400636,0.984650194644928,0.0,accept,unanimous_agreement
112803114,5310,add space after `catch`.,0,0,0,0.987516701221466,0.9884545803070068,0.9947636127471924,0.0,accept,unanimous_agreement
112803120,5310,too long line. isn't it?,0,0,-1,0.6984694004058838,0.5402441024780273,0.8909478187561035,0.0,accept,majority_agreement
112803129,5310,split this line too.,0,0,0,0.9833210706710817,0.9814983010292052,0.9921499490737916,0.0,accept,unanimous_agreement
112803142,5310,most of these lines (logger messages) are too long.,0,0,0,0.9082691669464112,0.7903173565864563,0.5961750745773315,0.0,accept,unanimous_agreement
112803156,5310,"too long line. unlike one line above, that can be joined with previous one.",0,0,0,0.8995696902275085,0.9579039216041564,0.5786672830581665,0.0,accept,unanimous_agreement
112803162,5310,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
112803174,5310,please add space after `catch`.,0,0,0,0.9871954917907716,0.9891799688339232,0.9959533214569092,0.0,accept,unanimous_agreement
112803260,5310,too long line.,-1,-1,-1,0.8675811886787415,0.648794412612915,0.8303176760673523,-1.0,accept,unanimous_agreement
112803296,5310,"although i've done it several times before, but now i doubt it. , is there any sense to forward declare templates?",0,0,0,0.6843185424804688,0.5009806752204895,0.924504816532135,0.0,accept,unanimous_agreement
112803321,5310,is it needed somewhere?,0,0,0,0.9835567474365234,0.9910005927085876,0.9935606718063354,0.0,accept,unanimous_agreement
112804082,5310,imo the `static` is redundant here.,0,0,0,0.9648557305336,0.9224882125854492,0.9815106987953186,0.0,accept,unanimous_agreement
112804169,5310,still need this?,0,0,0,0.977798879146576,0.9778027534484864,0.9906415343284608,0.0,accept,unanimous_agreement
112804202,5310,~~can you put a upper limit for this?~~ not relevant anymore.,0,0,0,0.8775897026062012,0.940305233001709,0.9784353971481324,0.0,accept,unanimous_agreement
112810799,5310,"for readability improvement this variable should be renamed, probably. what about `numberindex`?",0,0,0,0.9867968559265136,0.993419349193573,0.9935492873191832,0.0,accept,unanimous_agreement
112810809,5310,and might want to check `errno` here as well.,0,0,0,0.9889527559280396,0.992221176624298,0.9928291440010072,0.0,accept,unanimous_agreement
112810888,5310,"with `qbytearray` type of argument, you are copying the memory, right? does it make sense to use the read buffer then?",0,0,0,0.9877354502677916,0.9940033555030824,0.993661880493164,0.0,accept,unanimous_agreement
112810904,5310,"smart pointer, please.",0,0,0,0.9143981337547302,0.89544677734375,0.9710822105407716,0.0,accept,unanimous_agreement
112810914,5310,why this is needed?,0,0,0,0.96819669008255,0.9735194444656372,0.9896224737167358,0.0,accept,unanimous_agreement
112814474,5310,aren't you loosing here buffer[0:offset-1] part?,0,0,0,0.988227903842926,0.9928019046783448,0.9909762740135192,0.0,accept,unanimous_agreement
112818012,5310,why don't we log the exception message too?,0,0,0,0.9747974872589112,0.9850578904151917,0.9912360906600952,0.0,accept,unanimous_agreement
112833219,5310,i could write code without memory allocations. but just for fun and thus later.,0,1,0,0.6180814504623413,0.6259655356407166,0.9665803909301758,0.0,accept,majority_agreement
112849622,5310,i don't want to re-initialize the variable each time we parse the filter.,0,0,0,0.93308025598526,0.8706062436103821,0.9094346761703492,0.0,accept,unanimous_agreement
112849654,5310,in this case `errno` is only set if the value goes out of range. both limits are handled with the existing checks.,0,0,0,0.9883633255958556,0.9930500984191896,0.9941293001174928,0.0,accept,unanimous_agreement
112849719,5310,i couldn't figure out a way to make strtol (and address_v6::from_string) to look only in a portion of the buffer.,0,0,0,0.953767478466034,0.9613412618637084,0.8843093514442444,0.0,accept,unanimous_agreement
112849738,5310,shared_ptr doesn't seem to work with arrays out of the box. and i think i have covered all cases here for deleting the pointer.,0,0,0,0.983677864074707,0.9795148372650146,0.9911919236183168,0.0,accept,unanimous_agreement
112849813,5310,i can't remember the exact reason because this is part of my previous old attempt. i think i do just to make sure there aren't garbage data after our move of the remaining data to the front of the buffer. (in case the parsing goes past the end of the read data). i could remove it if you think this is superfluous.,0,0,0,0.8756211400032043,0.9697687029838562,0.9779098033905028,0.0,accept,unanimous_agreement
112849870,5310,"please explain in more detail. i can't understand what you mean by `buffer[0:offset-1]` keep in mind that i check the return value of ""file.read()"" which is `0` on file end and `-1` on error.",0,0,0,0.9832911491394044,0.987759530544281,0.988894820213318,0.0,accept,unanimous_agreement
112849919,5310,i am not what you mean exactly... the only memory allocations i see for this function is the std::vector and the ints that hold the indices.,0,-1,0,0.5139251947402954,0.6027682423591614,0.9582038521766664,0.0,accept,majority_agreement
112850021,5310,yes. without it i get: in the console during runtime.,0,0,0,0.985040843486786,0.8156378865242004,0.9936478734016418,0.0,accept,unanimous_agreement
112861848,5310,exactly. you use logger from another thread.,0,0,0,0.9889971017837524,0.9848459959030152,0.992668628692627,0.0,accept,unanimous_agreement
112862319,5310,"offtopic i would add `log()` function to ""logger.h"" and use logger::instance() there. and in the client code just do `log(message, type);`.",0,0,0,0.9876413941383362,0.9938283562660216,0.9927510023117064,0.0,accept,unanimous_agreement
112864086,5310,"with `static` or without, the variable is deemed to be optimized out by the compiler [a link] (case 1) [a link]",0,0,0,0.9881370663642884,0.990730345249176,0.9956088662147522,0.0,accept,unanimous_agreement
112892246,5310,"right, that is why i again suggest you to use `strsep()` first instead of collecting delimiter positions.",0,0,0,0.9861657619476318,0.991963028907776,0.989431858062744,0.0,accept,unanimous_agreement
112892948,5310,[code block] which might be replaced with [code block],0,0,0,0.988184690475464,0.9927444458007812,0.994974970817566,0.0,accept,unanimous_agreement
112893893,5310,"the line was making me think that there is something which i don't understand, because this part of the buffer will be overwritten below. i would ask for a note there, please, if you decide to keep this just in case.",0,0,0,0.9011146426200868,0.9229974746704102,0.9579994082450868,0.0,accept,unanimous_agreement
112896207,5310,"i think the following may happen: consider a file where the last line is not terminated with '\n'. then this line will go into this spillover, `qfile::read()` returns 0 and we ignore it. that is why i prefer to replace newline characters with '\0' as well. [a link] is an example. extracted from a component that reads and parses ascii tables of much larger size, however.",0,0,0,0.9859888553619384,0.9910220503807068,0.9882341623306274,0.0,accept,unanimous_agreement
112896375,5310,aren't you copy strings into `qbytearray`s?,0,0,0,0.9869024753570556,0.9943272471427916,0.994761288166046,0.0,accept,unanimous_agreement
112896621,5310,"i'm very late with this, of course, but wouldn't `log(type, message)` be a better signature?",-1,-1,-1,0.5738523602485657,0.5838320255279541,0.5006611943244934,-1.0,accept,unanimous_agreement
113093017,5310,after i do the .p2p refactoring i'll transfer this inside the anonymous namespace so it can be accessed by both parsing functions.,0,0,0,0.9879875183105468,0.9920712113380432,0.9930412769317628,0.0,accept,unanimous_agreement
113093115,5310,"having the type parameter last allows to have a default value, like logger::addmessage() does.",0,0,0,0.9867859482765198,0.9914622902870178,0.9932575225830078,0.0,accept,unanimous_agreement
113093270,5310,"this is a worst case scenario and will trigger only one reallocation during each parsing of the ""faulty"" file at the end of the file. i don't consider this scenario to be prevalent. do you have any other suggestion?",0,0,0,0.6844411492347717,0.7749797701835632,0.9586493968963624,0.0,accept,unanimous_agreement
113102068,5310,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
113146629,5310,this loop can be shortened into (not insisting): [code block],0,0,0,0.9850316047668456,0.9927558302879332,0.9944604635238647,0.0,accept,unanimous_agreement
113147832,5310,get it out of the loop (cleanliness and performance),0,0,0,0.9694814682006836,0.9861494302749634,0.9897080659866332,0.0,accept,unanimous_agreement
113148119,5310,"read buffer.size() -1 characters, make buffer[buffer.size() -1] = 0 from the very beginning.",0,0,0,0.9891923069953918,0.9879046678543092,0.99403977394104,0.0,accept,unanimous_agreement
363149053,11833,`files.size() < 11` this is a random constraint i put here.,0,0,0,0.9867717623710632,0.991614818572998,0.9935895204544068,0.0,accept,unanimous_agreement
363156038,11833,this shouldn't be static anyway. a static variable is going to reside in memory for the whole program lifetime.,0,0,0,0.9795442223548888,0.9868370294570924,0.9681345224380492,0.0,accept,unanimous_agreement
363156352,11833,the constructor seems redundant to me or use qstring::fromutf8.,0,0,0,0.9336256980895996,0.9053000211715698,0.973628044128418,0.0,accept,unanimous_agreement
363156695,11833,"maybe just me, i would rather not mix qt types with std types, i.e. just write `unsigned char` here.",0,0,0,0.983242392539978,0.9912710189819336,0.9586019515991212,0.0,accept,unanimous_agreement
363156758,11833,perhaps it is better to use `unsigned char` for this variable?,0,0,0,0.9880083799362184,0.9933695793151855,0.988146722316742,0.0,accept,unanimous_agreement
363156789,11833,redundant empty line here.,0,0,0,0.8769615292549133,0.9021413922309875,0.662513256072998,0.0,accept,unanimous_agreement
363157165,11833,you should make use of sizeof().,0,0,0,0.9869557619094848,0.9920591115951538,0.994688868522644,0.0,accept,unanimous_agreement
363157750,11833,"seeing checks for nullptr in every method is a bit annoying, can't you just throw exception in the constructor instead?",-1,-1,-1,0.9821817278862,0.9723246097564696,0.9769930839538574,-1.0,accept,unanimous_agreement
363158388,11833,this should be `int`. [a link],0,0,0,0.9885485172271729,0.9908249974250792,0.99516099691391,0.0,accept,unanimous_agreement
363158484,11833,here is the bad sign: need to cast unsigned int to signed int.,-1,-1,-1,0.8144853115081787,0.9778684377670288,0.9232641458511353,-1.0,accept,unanimous_agreement
363158888,11833,"on a second thought, maybe you should use qbytearray as the building block and not a char pointer. a qbytearray should be safer and have many convenience functions.",0,0,0,0.9758292436599731,0.9887518286705016,0.9870088696479796,0.0,accept,unanimous_agreement
363159092,11833,would be simpler if you just assigned `*ok = false;` at the top of this function.,0,0,0,0.9873462319374084,0.993109941482544,0.9899746775627136,0.0,accept,unanimous_agreement
363159127,11833,do you really need to store it between function calls?,0,0,0,0.986356258392334,0.9918553829193116,0.9888217449188232,0.0,accept,unanimous_agreement
363159397,11833,either put entire declaration into one line or split these braces too.,0,0,0,0.9865630865097046,0.9906007051467896,0.9920971393585204,0.0,accept,unanimous_agreement
363160131,11833,"many memory access operations use `char`, unless i'm wrong...",0,0,0,0.7328731417655945,0.807326078414917,0.9901695847511292,0.0,accept,unanimous_agreement
363183273,11833,never like these ugly c++ multiword type names.,-1,-1,-1,0.98365318775177,0.9802232980728148,0.993713676929474,-1.0,accept,unanimous_agreement
363238761,11833,"the purpose was to be efficient in initializing/allocating memory. this is what is alluded here: [a link] if the above doesn't really matter, then should i do this? [code block]",0,0,0,0.9832319021224976,0.988000214099884,0.9937605261802672,0.0,accept,unanimous_agreement
363239169,11833,see my rationale [a link],0,0,0,0.9849405884742736,0.9740692973136902,0.994130313396454,0.0,accept,unanimous_agreement
363240345,11833,"i don't want a unnecessary memory copies. if i had ""buffer view"" equivalent of std::string_view then i would use it.",0,0,0,0.9652025103569032,0.9339579939842224,0.9623147249221802,0.0,accept,unanimous_agreement
363241196,11833,edited previous comment.,0,0,0,0.9824663400650024,0.9773820042610168,0.9841453433036804,0.0,accept,unanimous_agreement
363255075,11833,i like the shorthand too. plus i changed to signed int to the other place. should i change this to (signed) char? or should i go full (signed) int here too?,1,1,1,0.9810423851013184,0.8696755766868591,0.7725504636764526,1.0,accept,unanimous_agreement
363255463,11833,`qbytearray:fromrawdata()` doesn't copy anything.,0,0,0,0.9813770651817322,0.9880451560020448,0.9924301505088806,0.0,accept,unanimous_agreement
363258986,11833,i would use int.,0,0,0,0.9882299900054932,0.9867645502090454,0.9933308959007264,0.0,accept,unanimous_agreement
363260512,11833,"hmm, correct. but as i see it, the only useful ""convenience"" function is `qbytearray::mid()`. should i proceed with qbytearray?",0,0,0,0.9851688146591188,0.9412989020347596,0.978008508682251,0.0,accept,unanimous_agreement
363263621,11833,"imo, it's not so good idea to copy some memory just to check for buffer end. why not perform integer calculations instead?",-1,-1,0,0.5631245374679565,0.5950728058815002,0.9382261633872986,-1.0,accept,majority_agreement
363264302,11833,"`qbytearray::size()` is very useful, isn't it? imo, yes.",0,0,1,0.5819939970970154,0.8803936243057251,0.8318970799446106,0.0,accept,majority_agreement
363267251,11833,"the other way i see it, is just loop in the buffer and check each byte for zero. but the so answers say that his might not be optimal/efficient. if there is another way, please give an example.",0,0,0,0.9789828062057496,0.9546833634376526,0.9888527393341064,0.0,accept,unanimous_agreement
363274482,11833,oops... it's `memcmp`! forget my previous comment.,-1,0,-1,0.9863189458847046,0.6333636045455933,0.985601007938385,-1.0,accept,majority_agreement
363279302,11833,"on another tought, what do you say about using `libtorrent::string_view` here? added benefit, it indicates to the caller ""dude keep the buffer alive"" and ensures no accidental memory copy. `libtorrent::string_view` basically uses boost's implementation.",0,0,0,0.9715576171875,0.9910249710083008,0.991634726524353,0.0,accept,unanimous_agreement
363290143,11833,we have `utils::bytearray::midview()`,0,0,0,0.9846434593200684,0.9913387298583984,0.9946192502975464,0.0,accept,unanimous_agreement
363300045,11833,"yeah. if using qbytearray you can use this constructor qbytearray::qbytearray(int size, char ch) and compare them with qbytearray::startswith(const qbytearray &ba) or `==`.",0,0,0,0.9786641597747804,0.9932934045791626,0.9809432625770568,0.0,accept,unanimous_agreement
363302310,11833,"seem yes, based on ""typeflag field"" definition on [a link] and wikipedia. weird that they used `char` as the type there.",-1,-1,-1,0.9850984811782836,0.9829242825508118,0.9851030707359314,-1.0,accept,unanimous_agreement
363304695,11833,"off-topic: imo string_view is more suitable for... well ""strings"" (ascii or utf-x variants). it is not the case here. here you operate on bytes which (i think) std::span in c++20 is the better matching counterpart.",0,0,0,0.9850923418998718,0.9878530502319336,0.9814980030059814,0.0,accept,unanimous_agreement
363318867,11833,"imo, it's fine if you use it as generic container (no string specific methods called) then, i could use `libtorrent::span`",0,0,0,0.582372784614563,0.9846120476722716,0.9884288907051086,0.0,accept,unanimous_agreement
363380220,11833,"imo, libtorrent utils (including the types meantioned above) can't be considered as stable enough from lifetime perspective. but if `libtorrent::span` has interface similar to c++20 one then we can use it so we can easily switch to c++20 in future just by changing `lt::` to `std::`. or we can even declare alias in our own namespace (e.g. `utils::span`) currently for libtorrent span and then change it to std span.",0,0,0,0.9874312877655028,0.9929609894752502,0.9856603145599364,0.0,accept,unanimous_agreement
363390607,11833,"i don't know if i understood you correctly, but libtorrent::span is public api and is used in other public api as a type. exactly and it does have similar interface. i was just ready to jump on using lt::span and then i realized we also support rc_1_1 :disappointed: (it isn't available there)",-1,-1,-1,0.9900972843170166,0.9323853850364684,0.9945271611213684,-1.0,accept,unanimous_agreement
363393598,11833,(it isn't available there) we can either drop rc_1_1 support or incorporate libtorrent span sources into qbittorrent sources for some time.,0,0,0,0.9896851778030396,0.9942224621772766,0.9922324419021606,0.0,accept,unanimous_agreement
363393807,11833,"i think i have a better alternative to test for eof (and possibly gracefully handle garbage archives/data): as mentioned, a tar archive looks like this `header+filedata+header+filedata+...+empty header+empty header` each time we are finished with a file we are expecting either a normal header or at least 2 empty ones. and the first field on a valid header is the filename field. so why not check if the 1st byte in the header is null, and if yes treat it as eof?",0,0,0,0.9708371758461,0.9876169562339784,0.9457418322563172,0.0,accept,unanimous_agreement
363393877,11833,or just use qbytearray.,0,0,0,0.987777292728424,0.9913763403892516,0.9930148124694824,0.0,accept,unanimous_agreement
363395181,11833,other types can be used in further versions of libtorrent so it stops to provide its own ones.,0,0,0,0.9850801825523376,0.988989531993866,0.9934108853340148,0.0,accept,unanimous_agreement
363398180,11833,"very strange way of indicating the end of the file. it is clear that the ""real"" end of the file could not be used, because it was designed for streaming media, but why two empty headers and not one? and what really about not empty header but just invalid?",-1,-1,-1,0.8972864151000977,0.9261667132377625,0.9566881656646729,-1.0,accept,unanimous_agreement
363399962,11833,at least we can use simplified algorithm. 1. if next byte is not null try to load header and so on... 2. if next byte is null stop processing (but check whether there's valid eof to distinguish between correct/broken files).,0,0,0,0.9882205724716188,0.9924627542495728,0.9688319563865662,0.0,accept,unanimous_agreement
363403430,11833,"even if next byte is not null, we can't really extract a filename from that. there isn't supposed to be padding* between filedata and the next header. *padding exists at the end of filedata to pad to full 512bytes block. hmm, this check needs to done inside `tarfile::filedata()`. but a variation of it. not detect null bytes but actually test that there is enough space left in the buffer for the filesize indicated by the header.",0,0,0,0.9853917956352234,0.9610835313796996,0.9899396300315856,0.0,accept,unanimous_agreement
363404337,11833,"yeah i am leaning with qbytearray too. btw, there are 3rd party span implementations that are header only. this is only for fyi. i am not advocating in including them just for this.",0,0,0,0.5062757730484009,0.8782078623771667,0.95256507396698,0.0,accept,unanimous_agreement
363412961,11833,"i mean first byte of (possible) next header. e.g.: 1. try to load header. 2. if there isn't enough data - error. 3. perform the ""optimize"" check for null in first byte of header. 4. if it is null, check for correct eof at this position. if there's no valid eof - error. 5. if it isn't null try to parse header and perform other checks on it. if header is invalid - error. 6. try to load file. 7. if there isn't enough data - error. 8. perform some checks on file data (e.g. checksum comparison). if it fails - error. 9. try to shift to next header (i.e. skip padding). if there's no enough data - error. 10. start from beginning. have i missed something? i didn't read full format specs.",0,0,0,0.98240065574646,0.9894277453422546,0.9860926270484924,0.0,accept,unanimous_agreement
364037825,11833,should i construct the qbytearray here using fromrawdata() for extra efficiency?,0,0,0,0.9875539541244508,0.9942102432250975,0.9944603443145752,0.0,accept,unanimous_agreement
364039847,11833,note to self: must check that there are `filesize` bytes in the buffer.,0,0,0,0.9865037202835084,0.993498921394348,0.992179036140442,0.0,accept,unanimous_agreement
364074319,11833,tar isn't compressor...,-1,0,0,0.5555202960968018,0.9069718718528748,0.9718815684318542,0.0,accept,majority_agreement
364074616,11833,redundant empty line.,0,0,-1,0.8240636587142944,0.797183632850647,0.7013556957244873,0.0,accept,majority_agreement
364075133,11833,i would use integral constant here instead: [code block],0,0,0,0.9877328872680664,0.9913773536682128,0.9944992065429688,0.0,accept,unanimous_agreement
364075300,11833,explicit,0,0,0,0.9819175601005554,0.890796959400177,0.979380428791046,0.0,accept,unanimous_agreement
364076258,11833,"i would prefer to see null character as 0 (unless you need to have it in some string literal alongside with regular characters, e.g. ""some text\0"").",0,0,0,0.9802858829498292,0.990809679031372,0.9873721599578856,0.0,accept,unanimous_agreement
364076746,11833,"`m_header.startswith(0)` looks better, imo.",0,0,0,0.5068159699440002,0.9428912997245787,0.8387128710746765,0.0,accept,unanimous_agreement
364078293,11833,"it's a bad practice to mix different kind of error handling in the same class. you should use either exceptions (i.e. don't allow to create invalid class at all) or ""valid"" property (but then you shouldn't throw in constructor).",-1,-1,-1,0.942937433719635,0.5732829570770264,0.5449486374855042,-1.0,accept,unanimous_agreement
364079937,11833,"isn't ""checksum"" field null in null header?",0,0,0,0.984012246131897,0.9940010905265808,0.9939905405044556,0.0,accept,unanimous_agreement
364087813,11833,redundant empty line.,0,0,-1,0.8240636587142944,0.797183632850647,0.7013556957244873,0.0,accept,majority_agreement
364089114,11833,it's wrong. here you just unpacking some tar archive (it's abstract utility function). you should perform any logging at the application level.,-1,-1,0,0.500219464302063,0.5257651209831238,0.6807925701141357,-1.0,accept,majority_agreement
364089615,11833,it's weird to see such limitation in abstract utility function... does tar format limit it in this way?,-1,-1,-1,0.9875879883766174,0.9900988936424256,0.9933192729949952,-1.0,accept,unanimous_agreement
364091591,11833,"maybe declare it as `utils::bytearray::strlen()`? anyway i dislike ""custom"" prefix here.",-1,0,0,0.8251367807388306,0.7453284859657288,0.941641330718994,0.0,accept,majority_agreement
364092345,11833,"it's better to use exceptions instead of ""ok"". then you can provide more error info to the caller side.",0,0,0,0.9860731363296508,0.9880365133285522,0.9916747212409972,0.0,accept,unanimous_agreement
364093739,11833,you can't (shouldn't) do it! then returned data is valid only until input data isn't disposed.,0,0,-1,0.8805423974990845,0.9361004829406738,0.9173599481582642,0.0,accept,majority_agreement
364122513,11833,when you split conditions operator should appear in next line,0,0,0,0.9877464771270752,0.9909058809280396,0.99394553899765,0.0,accept,unanimous_agreement
364125060,11833,"imo, log message in wrong place (under wrong condition). when user doesn't provide license key we shouldn't even trigger database update. the only valid error case is when user enables ""resolve peer country"" feature but there are no license key or db file provided.",0,0,0,0.9163653254508972,0.9526218771934508,0.903045892715454,0.0,accept,unanimous_agreement
364125378,11833,please enclose subexpressions.,0,0,0,0.981777012348175,0.9860398769378662,0.9940687417984008,0.0,accept,unanimous_agreement
364539040,11833,: according to 's comment on an earlier version of this code: **source:** [ ],0,0,0,0.9730643630027772,0.9793851375579834,0.9915939569473268,0.0,accept,unanimous_agreement
364546320,11833,", sorry, what do you want to say me? i saw that comment.",-1,-1,-1,0.9867578148841858,0.9909737706184388,0.9929049611091614,-1.0,accept,unanimous_agreement
364842125,11833,"i'm sorry, i can't understand what you're trying to explain to me... i understand the meaning of word ""random"" (and even what it means *in this context*), as well as what and why wants to do here. i'm just pointing out the fact that it was done in the wrong place (at the wrong level of logic). that's all.",-1,-1,-1,0.9874979257583618,0.9900972843170166,0.9920631051063538,-1.0,accept,unanimous_agreement
364843499,11833,also please read [a link],0,0,0,0.9819203019142152,0.982142210006714,0.9942493438720704,0.0,accept,unanimous_agreement
364935655,11833,renamed to `untar()`,0,0,0,0.984432578086853,0.9916813969612122,0.9918072819709778,0.0,accept,unanimous_agreement
364936431,11833,"other functions require passing the `'\0'` literal because of the compiler. it doesn't know which overload to call (eg for startswith()). furthermore, in the spec these are treated as ascii values, so for keeping things uniform, i will leave it as ascii nul.",0,0,0,0.9864705204963684,0.9919180274009703,0.99314683675766,0.0,accept,unanimous_agreement
364936679,11833,compiler considers it an ambiguous call.,0,0,0,0.8940624594688416,0.901492714881897,0.9362891912460328,0.0,accept,unanimous_agreement
364937415,11833,"i took another approach. please take a look. we need to differentiate between fully null entry and an malformed one. if you can come up with another way, let me hear it.",0,0,0,0.971071720123291,0.6795812249183655,0.966588854789734,0.0,accept,unanimous_agreement
364938905,11833,something that you might not know: when checksum is calculated the bytes belonging to the `checksum` header are considered to have each the value 32 (ascii space). so in a fully null header the `calculatedchecksum` variable will have the value (8 * 32) and the stored checksum in the checksum field (from `checksum` variable) will have the value 0.,0,0,0,0.9875575304031372,0.9949219822883606,0.9898359179496764,0.0,accept,unanimous_agreement
364939193,11833,"i removed this ""security"" constraint in the new code.",0,0,0,0.984188437461853,0.9898213148117064,0.9917646050453186,0.0,accept,unanimous_agreement
364939401,11833,i took another approach. have a look.,0,0,0,0.964526355266571,0.8796831965446472,0.9726871848106384,0.0,accept,unanimous_agreement
365057034,11833,"this is copying the data, you should avoid it. generally speaking, no-copy is the key for building fast applications and a requirement for modern apps imo.",0,0,0,0.95946604013443,0.991175889968872,0.9693692326545716,0.0,accept,unanimous_agreement
365057779,11833,i know this was discussed before. however i would still like the returned values to be qbytearray views. adding a comment about this function is returning a view (that the input `data` is required to be alive in client code in order for the returned value to be meaningful) would suffice for me. and then the return type will be expected to become `qhash `,0,0,0,0.9693812131881714,0.9629561901092528,0.9912903308868408,0.0,accept,unanimous_agreement
365058137,11833,this can be extracted to anonymous namespace. and `int strlen(const qbytearray &str)` too.,0,0,0,0.9890613555908204,0.994882345199585,0.995524287223816,0.0,accept,unanimous_agreement
365058298,11833,imo better differentiate the name with std::strlen() to avoid confusion. you can use full name `firststringlength()` or whatever something like that.,0,0,0,0.9872274398803712,0.993083119392395,0.990347146987915,0.0,accept,unanimous_agreement
365059054,11833,"regarding `m_null`, `m_valid`, `m_verified`. does these status intersect? i mean is it possible to have any two of them to be true at the same time? if not it is better to tie them together into a separate type.",0,0,0,0.9867910146713256,0.9935490489006042,0.9924660921096802,0.0,accept,unanimous_agreement
365137172,11833,"it also provides many opportunities for errors to occur. it is especially dangerous to return such ""references"" to the internal data of the class (this is generally unacceptable and is a design error, imo). one exception is when class instance operates on some outer data (so caller side owns this data and cares about its lifetime and lifetime of ""references"" into it). so if you really want to implement ""no-copy"" optimization you need to think a hundred times about all the details of the implementation, in order to protect the caller as much as possible.",0,0,0,0.6336302161216736,0.9308127164840698,0.7904084324836731,0.0,accept,unanimous_agreement
365138147,11833,i would make tarstreamreader public instead of (or in addition to) this wrapper.,0,0,0,0.9873900413513184,0.9921044111251832,0.9922050833702089,0.0,accept,unanimous_agreement
365140730,11833,tarentryheader is better name.,0,0,0,0.9756134152412416,0.9738876819610596,0.9845269918441772,0.0,accept,unanimous_agreement
365171623,11833,"these two method names are ambiguous. they should be ""filetype"" and ""filesize"".",0,0,0,0.9753631949424744,0.95728600025177,0.9167703986167908,0.0,accept,unanimous_agreement
365174840,11833,this class has inconsistent internal behavior. why do you parse header partially when create instance and then parse the rest on demand? i see no point in this.,0,0,0,0.5829106569290161,0.7914959192276001,0.6649764180183411,0.0,accept,unanimous_agreement
365185241,11833,"yes and i would hope/expect there will be nicely designed class interface to avoid that. offtopic i think is worth sharing, here is a library (in rust lang) that implements a tar reader: [a link] (ignore the `unwrap()` for easier reading) you can see a `file` object is passed to `tar::archive` constructor and thus (normally) the tar reader won't outlive the `file` lifetime. (more offtopic) and another nice thing that library has: from [a link]",1,1,0,0.8848207592964172,0.8051633238792419,0.806505560874939,1.0,accept,majority_agreement
365204571,11833,in case it wasn't clear: the buffer with the tarred data is given by the caller of `utils::tar::untar()`.,0,0,0,0.986370325088501,0.9949541687965392,0.9945911169052124,0.0,accept,unanimous_agreement
365205211,11833,"what do i do partially? you mean the chechsum check and null check? if i parse the rest on ctor, that means i would have to have extra member variables to hold a copy of the data.",0,0,0,0.9846506118774414,0.9842904210090636,0.9902427792549132,0.0,accept,unanimous_agreement
365206378,11833,maybe i could merge `m_valid` and `m_verified`. now `m_valid == true` only when the first byte isn't null. and `m_verified == true` when the checksum is correct. this allows to have more specific error output. but i could merge those 2 so `m_valid == true` only when 1st byte != null and checksum is correct. `m_null == true` when all bytes are null. it is used a special marker for eof. i don't think i can combine it with the other 2 bools.,0,0,0,0.9745202660560608,0.987552523612976,0.979262113571167,0.0,accept,unanimous_agreement
365282671,11833,"header can be either invalid, null or regular so you just need enum with 3 values.",0,0,0,0.9882698059082032,0.991171658039093,0.991579532623291,0.0,accept,unanimous_agreement
365286070,11833,what's the problem with it? if header is invalid (or null) they will be empty. if header is valid you still copy this data when access it from caller side (since it's pointless to create this object and then never access its fields).,0,0,0,0.9235267639160156,0.9556427597999572,0.9345173239707948,0.0,accept,unanimous_agreement
365338042,11833,there is no way to avoid that. you can only warn about the danger (in code comments) and hope that caller can correctly handle it.,0,0,0,0.8764685988426208,0.8844399452209473,0.7320195436477661,0.0,accept,unanimous_agreement
365339494,11833,file stream reading is different thing so let's not consider it here.,0,0,0,0.8795691132545471,0.9241324663162231,0.981902837753296,0.0,accept,unanimous_agreement
365400113,11833,increased class size. i want to stay with the parse-on-demand approach and not have unnecessary copies of data laying around. something akin to `bedecode_token/bedecode_node` (somewhat inspired by [a link] usually the user of the class will call only once each method and store the result. so why make the class also store a copy?,0,0,0,0.9718598127365112,0.9894191026687622,0.9862843751907348,0.0,accept,unanimous_agreement
365470599,11833,"i may be wrong, but in addition to leaving a code comment we could do this: [code block] this will ensure that the caller will have a non-temporary buffer. it will fail only if he does weird things in the calling site and its buffer goes out of scope before the return value. eg something like this: [code block]",0,0,0,0.5268481373786926,0.937939703464508,0.8582635521888733,0.0,accept,unanimous_agreement
365492628,11833,"that is just one instance of the `read` trait. imo the library is still valuable as a reference when designing class interface (more or less) as the essence isn't all that different. there is always ways to shoot oneself in the foot in c++ but a good interface will make it hard to do so. yeah, that will help a bit. although there are still easy ways to go wrong: [code block]",0,0,0,0.7281194925308228,0.4910599887371063,0.7115281224250793,0.0,accept,unanimous_agreement
365501411,11833,"no problem (unless you need to call some of them twice). but in this case the class itself becomes redundant (now it is like a ""thing in itself"" that only takes care of its own invariant in each method). you can easily apply any parsing function on header data separately.",0,0,0,0.9807530045509338,0.9865447878837584,0.9826085567474364,0.0,accept,unanimous_agreement
365531126,11833,"i would still insist on making this parser as more generic as possible (as long as it does not require excessive effort). just return ""type"" as is (maybe just expanding it to `int` as discussed earlier). let upper level decide whether it should care about some file type or not.",0,0,0,0.9826223850250244,0.9788079261779784,0.9854309558868408,0.0,accept,unanimous_agreement
365531624,11833,"looks suspicious. imo, you provide some kind of undefined behaviour. you should fail on really invalid characters. if spaces at beginning are acceptable (i.e. "" 354"" is valid octal number) you should skip spaces explicitly. but, e.g., ""gdi754"" is invalid octal number and it should cause an exception.",-1,-1,-1,0.8858513832092285,0.9718992114067078,0.901640772819519,-1.0,accept,unanimous_agreement
366191508,11833,sorry for the lack of activity. i'll probably push something the next days based on the various comments. on this particular one: iirc the specs calls that the field is an octal number padded with leading zeroes (all ascii chars). so i am going to interpret it this ways: [code block],-1,-1,-1,0.9892141222953796,0.9906702041625975,0.9863786697387696,-1.0,accept,unanimous_agreement
366264262,11833,"if it's true, then your current algorithm is correct, but it can be used only internally by tar parser (so we should never make it shareable). or you can split it into two functions: first (can be shareable util) parses valid octal notation (and breaks at any invalid character), second (private) skips leading invalid characters and apply the first one on the rest.",0,0,0,0.9865303635597228,0.9902111887931824,0.9930421113967896,0.0,accept,unanimous_agreement
366268379,11833,"your examples are too deliberate to make a mistake in this way (if someone has read the appropriate warning). there is a more plausible situation when you save the obtained data somewhere (especially implicitly, e.g. create some dynamically allocated object and pass it there via constructor or some setter) and then the function that owns the source buffer returns.",0,0,0,0.9730697870254515,0.8871486783027649,0.991269588470459,0.0,accept,unanimous_agreement
366273079,11833,"the problem is there are no differences at the class interface between qbytearray that owns the data and that doesn't. so if some class need accepts qbytearray to store it internally there is no way to prevent error case from this class. imo, the better design is when we have different classes for data and references to its parts (e.g. qstring and qstringref). so if caller side has qstringref and calling side accepts qstring we should convert it explicitly (making deep copy of referenced data). unfortunately we can't use qstring for raw data.",0,0,-1,0.9282845854759216,0.9460747241973876,0.539284348487854,0.0,accept,majority_agreement
366704009,11833,"there is `uint qstrnlen(const char *str, uint maxlen)` that you can use instead (or at least as underlying one).",0,0,0,0.9880945086479188,0.9946531057357788,0.9942123293876648,0.0,accept,unanimous_agreement
370465082,11833,"it's good practice to call such types using singular form. also we use camelcase names for member of ""enum class"".",0,0,0,0.9372305274009703,0.9864649772644044,0.9844717383384703,0.0,accept,unanimous_agreement
370465496,11833,camelcase,0,0,0,0.9789125323295592,0.9691299796104432,0.9723753333091736,0.0,accept,unanimous_agreement
370465875,11833,seems this class is private helper. please move it out of here.,0,0,0,0.9805344939231871,0.9665956497192384,0.9904797673225404,0.0,accept,unanimous_agreement
370466633,11833,why don't you go the common way? just return the status of successful reading as a bool. other information is meaningless at this point.,0,0,0,0.6643048524856567,0.8991413712501526,0.9870933890342712,0.0,accept,unanimous_agreement
370467004,11833,leftover,0,0,0,0.9792333245277404,0.9635342359542848,0.9850702285766602,0.0,accept,unanimous_agreement
370992855,11833,this one is neither satisfied nor even answered.,-1,0,-1,0.5093179941177368,0.982795774936676,0.527898907661438,-1.0,accept,majority_agreement
370993317,11833,"if you can't make a generic tar parser for some reason, just move it in ""geoipmanager.cpp"" and make it a ""private"" parser that can parse only particular subset of .tar files corresponding to geoip database distro.",0,0,0,0.9891248941421508,0.9946552515029908,0.9940453767776488,0.0,accept,unanimous_agreement
373807090,11833,"slightly unrelated to this pr but there are instances in geoipmanager where you can omit the null check here, [a link]. if you want to keep that seperate i'm more than happy to address that in a seperate pr.",1,0,0,0.7145999073982239,0.6723006367683411,0.738741934299469,0.0,accept,majority_agreement
373808602,11833,"disregard the previous comment, addressed in #11961",0,0,0,0.8854824900627136,0.99200701713562,0.9875699877738952,0.0,accept,unanimous_agreement
374056565,11833,"it should be ""filetype"".",0,0,0,0.9873244762420654,0.9912938475608826,0.9907017946243286,0.0,accept,unanimous_agreement
374057282,11833,"what ""reg"" prefix means? is it really needed (there are no types without it here)?",0,0,0,0.9839102029800416,0.9910953044891356,0.991233766078949,0.0,accept,unanimous_agreement
374058150,11833,you are the one that forbid such implementations in headers.,0,0,0,0.9518617391586304,0.8527140617370605,0.978425920009613,0.0,accept,unanimous_agreement
374067144,11833,how about this one?,0,0,0,0.976736307144165,0.981698513031006,0.9879279732704164,0.0,accept,unanimous_agreement
374067506,11833,add space between type name and `{`.,0,0,0,0.9864308834075928,0.9901130199432372,0.9942546486854552,0.0,accept,unanimous_agreement
374068308,11833,shouldn't you break the loop after you've found database file?,0,0,0,0.9645290970802308,0.9937997460365297,0.9938410520553588,0.0,accept,unanimous_agreement
374070649,11833,"i wouldn't use legacy configuration structure for new settings (it was bound to the options dialog layout). imo, it's better to have something like ""geoip/licensekey"".",0,0,0,0.9817282557487488,0.9822188019752502,0.9765149354934692,0.0,accept,unanimous_agreement
374075713,11833,"the type of the header can point to other things than files (eg symlink, directory, etc)",0,0,0,0.988581359386444,0.9915207028388976,0.9913923740386964,0.0,accept,unanimous_agreement
374076171,11833,regular file. this can be denoted by 2 separate values. either null or ascii zero. should i write it out fully? eg `regularfilenull`,0,0,0,0.9835927486419678,0.9925300478935242,0.9884046316146852,0.0,accept,unanimous_agreement
374076690,11833,and iirc you were the one that advocated that such simple instructions can be implemented in headers. and i think there is actually used in some headers now. am i wrong?,0,0,0,0.9274680614471436,0.9201529026031494,0.9842352867126464,0.0,accept,unanimous_agreement
374076702,11833,"but it's still not ""type of stream reader""... so maybe ""entrytype""?",0,0,0,0.9814976453781128,0.9910938143730164,0.9911808967590332,0.0,accept,unanimous_agreement
374077926,11833,"are there any other (non regular) files so you can't omit ""regular"" keyword? if there's one please use ""regular"" instead of ""reg"".",0,0,0,0.9856211543083192,0.9946764707565308,0.9946669340133668,0.0,accept,unanimous_agreement
374079404,11833,yes. and i still didn't change my mind. but i don't use it since it's forbidden by qbittorrent coding guidelines. maybe it's time to reconsider it?,0,0,0,0.5102624893188477,0.848612368106842,0.7964123487472534,0.0,accept,unanimous_agreement
374368773,11833,"sorry. i had the wrong idea in my head. apparently we only do member variable initializations in the header. i don't know if this is constrained to only structs and very simple classes. i don't know. i don't even remember my exact reasoning for being against this. the only thought i have for being against it now: consistency in a class. when you're looking at a .cpp you probably want to see all member function implementations there and not go hunting them down in the header. i admit this isn't a strong case, and personally i don't have a strong position on this.",-1,-1,-1,0.988397777080536,0.9925501346588136,0.9820104241371156,-1.0,accept,unanimous_agreement
374371211,11833,"hmm, i am not sure i agree with you. `managedatabaseupdate()` ""manages"" the db update. should calling code do the error checking for it? my position is that the error checking must be done by `managedatabaseupdate()` itself.",0,0,0,0.954157054424286,0.7592213749885559,0.6969400644302368,0.0,accept,unanimous_agreement
374468322,11833,also it is easier to read the function signatures (in header) if the function bodies are left out.,0,0,0,0.9869192242622375,0.994695484638214,0.9930822849273682,0.0,accept,unanimous_agreement
374471588,11833,"my comment is more about ""what we should consider as an error"" than ""what place in the code we should handle this error"".",0,0,0,0.8858073353767395,0.976387619972229,0.9771590828895568,0.0,accept,unanimous_agreement
374473040,11833,"possible algorithm (when ""resolve peer country"" is enabled): 1. if license key is set by user try to update database and log errors if they are. otherwise just skip database update step. 2. if database isn't loaded by previous step try to load it from file and log errors if they are.",0,0,0,0.9875246286392212,0.9952558875083924,0.9934375882148744,0.0,accept,unanimous_agreement
374480398,11833,"okay, whatever you want... i'm used to it.",1,0,0,0.6125447154045105,0.8710773587226868,0.7011935710906982,0.0,accept,majority_agreement
374999276,11833,now i understand your objection better. i pushed an update and hopefully manages things more fully and clearer. ps: the logic is to first load any existing db and then perform db update if possible and necessary.,0,0,0,0.694924533367157,0.7474637031555176,0.8695328831672668,0.0,accept,unanimous_agreement
375063936,11833,"""else"" is redundant.",0,0,0,0.8924068212509155,0.8865084052085876,0.9298587441444396,0.0,accept,unanimous_agreement
375172012,11833,"i would declare entrytype under ""utils::tar"".",0,0,0,0.91148442029953,0.993736743927002,0.9946647882461548,0.0,accept,unanimous_agreement
375283225,11833,"""else"" is redundant.",0,0,0,0.8924068212509155,0.8865084052085876,0.9298587441444396,0.0,accept,unanimous_agreement
375284185,11833,"you should either keep all expressions in one line or enclose ""if"" body with braces.",0,0,0,0.9866062998771667,0.9926169514656068,0.9928715825080872,0.0,accept,unanimous_agreement
375285593,11833,"move ""?"" to the next line.",0,0,0,0.9820981621742249,0.9889190793037416,0.9884231686592102,0.0,accept,unanimous_agreement
375286507,11833,"imo, ""fullname"" is better.",0,0,0,0.9114277958869934,0.9862101674079896,0.9790209531784058,0.0,accept,unanimous_agreement
375287792,11833,multiline condition requires body to be enclosed in braces.,0,0,0,0.9812195897102356,0.9892562627792358,0.9680547714233398,0.0,accept,unanimous_agreement
375289791,11833,"multiline ""if"" body requires to be enclosed in braces.",0,0,0,0.9873691201210022,0.9910023808479308,0.989304542541504,0.0,accept,unanimous_agreement
375292045,11833,"""("" shouldn't be cut from function name.",-1,0,-1,0.5504383444786072,0.8042904734611511,0.939845085144043,-1.0,accept,majority_agreement
375294302,11833,"is it possible when ""atend"" is false? it's inconsistent, imo.",0,-1,0,0.926056742668152,0.5784496068954468,0.9705913066864014,0.0,accept,majority_agreement
375313480,11833,seems weird...,-1,-1,-1,0.981933057308197,0.9899163842201232,0.9834582805633544,-1.0,accept,unanimous_agreement
375314207,11833,"""("" position issues.",0,0,0,0.6201539635658264,0.6622222661972046,0.9043042063713074,0.0,accept,unanimous_agreement
375750215,11833,"when readnext returns false it should be either error or end-of-file case, isn't it?",0,0,0,0.9846954941749572,0.9862398505210876,0.9862307906150818,0.0,accept,unanimous_agreement
375751493,11833,"""("" position issue.",0,-1,0,0.7317984700202942,0.6184327006340027,0.9757835268974304,0.0,accept,majority_agreement
375752770,11833,"""("" position issue.",0,-1,0,0.7317984700202942,0.6184327006340027,0.9757835268974304,0.0,accept,majority_agreement
375767670,11833,"this logic confuses me. current position should point to the point of stream from where you will read next data. so you should increase it just after you have read entry. currently your logic is inconsistent. you have the same ""pos"" both before first reading and after it. the need for m_hasparsingstarted field is also indicates the problem. it isn't needed if ""pos"" behaves correctly.",-1,-1,-1,0.6690660119056702,0.5676421523094177,0.771733283996582,-1.0,accept,unanimous_agreement
376216995,11833,"these conditions seem to be redundant. due to conditions in ""if"" above it was either disabled before (so m_geoipdatabase was nullptr) or it had different database url.",0,0,0,0.9485726952552797,0.9835129380226136,0.9929484128952026,0.0,accept,unanimous_agreement
377382565,11833,i didn't get into the specifics because the deleted check included `!m_geoipdatabase` already. of the top of my head i can't find a flow where it results that it was disabled but with non-nullptr pointer (m_geoipdatabase). maybe it was put there as an extra precaution? should i try to remove it? (and from the else if below it?),0,0,0,0.9330244064331056,0.9902082085609436,0.9824288487434388,0.0,accept,unanimous_agreement
377383613,11833,i know. it was either this `bool` or an `int` to hold the start position of the filedata. i chose bool in an effort to minimize class size in memory. but now i see that my last bool simply introduces padding at the end of the class. so instead of padding i'll use the `int` which should fit nicely there.,0,0,0,0.9759648442268372,0.981284201145172,0.9618163108825684,0.0,accept,unanimous_agreement
377383810,11833,how so? do you mean the formatting or what the code does?,0,0,0,0.982435405254364,0.9829602241516112,0.9901034832000732,0.0,accept,unanimous_agreement
377384396,11833,your comment helped me realize another solution. i dropped the `bool m_end` member variable. when the parser encounters the empty header (marker for eof) it sets `m_pos` to `m_data.size()`. and `atend()` tests for that.,0,0,0,0.94127756357193,0.9773513674736024,0.7038382291793823,0.0,accept,unanimous_agreement
377384818,11833,i would like to keep it this way. if i use a naked `if` then i'll have to introduce an empty line between the 2 tests for readability.,0,0,0,0.9791618585586548,0.9849231243133544,0.9805788397789,0.0,accept,unanimous_agreement
377384870,11833,same,0,0,0,0.9733930826187134,0.8844984173774719,0.9850570559501648,0.0,accept,unanimous_agreement
377476345,11833,is it a problem?,0,0,0,0.9008747935295104,0.950927734375,0.9760956764221193,0.0,accept,unanimous_agreement
377487480,11833,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
377488129,11833,it's invalid reason to make logic inconsistent.,0,-1,-1,0.6188207864761353,0.560512363910675,0.7221221327781677,-1.0,accept,majority_agreement
377491477,11833,it can be written as: [code block] without any other conditions. maybe... anyway we shouldn't handle it as regular case (unless we really want to keep database loaded after feature is disabled).,0,0,0,0.9712135195732116,0.9916409254074096,0.9888124465942384,0.0,accept,unanimous_agreement
280431630,10527,"api looks inconsistent. i would have the following set: [code block] with some ""extra"" value for ""tags"" parameter that could mean ""all tags"" (empty string or skipped parameter would be good idea). besides, you don't have method to get a list of tags. having this info in sync api isn't enough since some client (e.g.) doesn't want use sync api.",0,0,0,0.7341881990432739,0.777093231678009,0.8209168910980225,0.0,accept,unanimous_agreement
280661362,10527,pls use range-based for loop here and other places. `for (const auto &tag : asconst(session->tags()))`,0,0,0,0.985383689403534,0.9931723475456238,0.9933176040649414,0.0,accept,unanimous_agreement
280661446,10527,and omit curly braces for single line `for` body statements such as this one and at other places too.,0,0,0,0.9820672273635864,0.9918327331542968,0.994200885295868,0.0,accept,unanimous_agreement
280661605,10527,"`${version}` is renamed, see 49b57904f98f6cfd06f04daf49c46c714a71621a",0,0,0,0.987016260623932,0.9933845400810242,0.9942658543586732,0.0,accept,unanimous_agreement
280661748,10527,"you should use `const` or `let` whenever possible in place of `var`, this applies to everywhere else too.",0,0,0,0.9883135557174684,0.995042324066162,0.9927674531936646,0.0,accept,unanimous_agreement
281260083,10527,"although i approve ""hashes"" as param name since the rest of the methods historically use this name, but i would personally prefer to call it ""torrents"".",0,0,0,0.9857617616653442,0.987163782119751,0.9893948435783386,0.0,accept,unanimous_agreement
281261507,10527,maybe check tag name once before applying it to torrents?,0,0,0,0.985660195350647,0.995170533657074,0.9915137887001038,0.0,accept,unanimous_agreement
281263304,10527,"there's something odd about it... if a torrent has a tag, what can prevent you from deleting it? at least incorrect tag name isn't valid reason.",-1,-1,-1,0.612179160118103,0.8515897393226624,0.6906450986862183,-1.0,accept,unanimous_agreement
281264351,10527,"isn't empty string just ""incorrect tag name"" like below?",0,0,0,0.974617063999176,0.9287946820259094,0.9826986789703368,0.0,accept,unanimous_agreement
281265888,10527,i don't see any strong reason to keep it inconsistent with the method above. either createtag/deletetag or createtags/deletetags.,0,0,0,0.9134319424629213,0.8773960471153259,0.9642118215560912,0.0,accept,unanimous_agreement
281268827,10527,"just a note for other contributors. perhaps we should reconsider the indication of errors in the base classes. just ""return a bool"" is extremely uncomfortable. error codes or exceptions can greatly simplify their use.",-1,-1,-1,0.9659878015518188,0.9115739464759828,0.9659476280212402,-1.0,accept,unanimous_agreement
283188981,10527,it's to be in line with categories implementation.,0,0,0,0.9841116666793824,0.9925732612609864,0.993065059185028,0.0,accept,unanimous_agreement
283190631,10527,"for removal purposes, valid tag is any, that exists on current torrent.",0,0,0,0.9875050783157348,0.9937545657157898,0.9935048818588256,0.0,accept,unanimous_agreement
283190796,10527,it's checked in `torrenthandle::addtag` anyway.,0,0,0,0.9860325455665588,0.9950209856033324,0.9945043325424194,0.0,accept,unanimous_agreement
283285672,10527,"didn't you understand me? if torrent has a tag then this tag has correct name. so at ""incorrect tag name"" isn't valid reason of possible error here. so you only allow the removal of a set of tags that exist in each of these torrents? it looks uncomfortable to me.",-1,-1,-1,0.969227969646454,0.9720585942268372,0.955280900001526,-1.0,accept,unanimous_agreement
283374594,10527,this whole check is redundant and there should be plain `torrent->removetag(tag);`. do i understand you correctly?,0,0,0,0.975616693496704,0.9901392459869384,0.9806979894638062,0.0,accept,unanimous_agreement
287023829,10527,`asconst()` is redundant here as `tags` is already `const`. please remove it and at other places too.,0,0,0,0.9870633482933044,0.993698239326477,0.9942278861999512,0.0,accept,unanimous_agreement
287023957,10527,please replace `auto` with `qstring` and at other places too.,0,0,0,0.9876673221588136,0.9938119649887084,0.9949361085891724,0.0,accept,unanimous_agreement
287024600,10527,`&tag`? and at other similar places.,0,0,0,0.988017201423645,0.9918383955955504,0.990157663822174,0.0,accept,unanimous_agreement
287024995,10527,maybe append the offending tag name in exception?,0,0,0,0.9773319363594056,0.9924005270004272,0.9883785843849182,0.0,accept,unanimous_agreement
287026359,10527,please make it like: [code block],0,0,0,0.985594630241394,0.9916348457336426,0.9955495595932008,0.0,accept,unanimous_agreement
287027836,10527,i would omit this variable and inline it. this also applies to other similar instances.,0,0,0,0.9858108758926392,0.9893087148666382,0.9940277338027954,0.0,accept,unanimous_agreement
287030010,10527,don't you need to trim the `tag`?,0,0,0,0.9880593419075012,0.9924465417861938,0.9925593137741088,0.0,accept,unanimous_agreement
287031459,10527,please remove redundant curly brackets for if-else.,0,0,0,0.9834718704223632,0.9851078391075134,0.9936631917953492,0.0,accept,unanimous_agreement
287033421,10527,add parentheses to each predicate.,0,0,0,0.983725368976593,0.9827921986579896,0.9935854077339172,0.0,accept,unanimous_agreement
287033868,10527,`const tagexists` or some non-vague name.,0,0,0,0.9825666546821594,0.9913233518600464,0.9678586721420288,0.0,accept,unanimous_agreement
287034354,10527,wrong coding style.,-1,-1,-1,0.884105920791626,0.859097421169281,0.8037903904914856,-1.0,accept,unanimous_agreement
287034962,10527,`!==` ?,0,0,0,0.9740540385246276,0.986688196659088,0.9595745205879213,0.0,accept,unanimous_agreement
287035116,10527,add parentheses.,0,0,0,0.9810997843742372,0.9820353984832764,0.9929538369178772,0.0,accept,unanimous_agreement
287035276,10527,i would add an empty line below.,0,0,0,0.9825944304466248,0.9809079170227052,0.989237666130066,0.0,accept,unanimous_agreement
287037768,10527,i would add an empty line below.,0,0,0,0.9825944304466248,0.9809079170227052,0.989237666130066,0.0,accept,unanimous_agreement
287039629,10527,is it possible to replace `object.each()` with `for (let key in object)`?,0,0,0,0.9886966943740844,0.9944379329681396,0.9944443106651306,0.0,accept,unanimous_agreement
287041609,10527,changes like these don't match the commit message. you should separate it out.,0,0,0,0.8875148892402649,0.9550995826721193,0.9837397933006288,0.0,accept,unanimous_agreement
288243250,10527,"actually i should remove this exception, because it's a dead code due to `split` with `skipemptyparts`",0,0,0,0.978892982006073,0.9854142665863036,0.9907019138336182,0.0,accept,unanimous_agreement
288268872,10527,"it is. but why bother with keys, when we need values?",0,0,0,0.953177809715271,0.9700522422790528,0.985753893852234,0.0,accept,unanimous_agreement
288370878,10527,if i understand correctly `object.each()` comes from mootools which is considered [a link]. so i would like new code to stay away from it.,0,0,0,0.9509382843971252,0.9885027408599854,0.989315152168274,0.0,accept,unanimous_agreement
288371345,10527,"is it ok to use native `object.values()`, or we have to support legacy browsers?",0,0,0,0.9875341653823853,0.9943366646766664,0.993787944316864,0.0,accept,unanimous_agreement
288372032,10527,"check out src\webui\www\readme.md, there are requirements in there.",0,0,0,0.9860883355140686,0.9944899082183838,0.9948941469192504,0.0,accept,unanimous_agreement
288373780,10527,"ok, will do `for in`. omg, internet explorer...",0,-1,-1,0.984369158744812,0.4968452453613281,0.989452600479126,-1.0,accept,majority_agreement
288942968,10527,why is this unrelated change?,0,0,0,0.8138623833656311,0.8835495710372925,0.9864495396614076,0.0,accept,unanimous_agreement
289002157,10527,"-github you (probably) misunderstood of my [a link], i meant you should only remove it in the code you modified/added not the whole .cpp file.",0,0,0,0.9280341863632202,0.8179498314857483,0.9377846121788024,0.0,accept,unanimous_agreement
289592288,10527,`asconst(session->tags())`,0,0,0,0.9870033860206604,0.9931824803352356,0.9939655661582948,0.0,accept,unanimous_agreement
289592404,10527,i would omit this curly bracket.,0,0,0,0.9691110849380492,0.9654382467269896,0.9901114106178284,0.0,accept,unanimous_agreement
289592421,10527,`asconst(bittorrent::session::instance()->tags())`,0,0,0,0.9864591360092164,0.99361914396286,0.9939058423042296,0.0,accept,unanimous_agreement
289592531,10527,add an empty line above please.,0,0,0,0.9822874665260316,0.9869984984397888,0.992568016052246,0.0,accept,unanimous_agreement
289592620,10527,use camel case for all variables.,0,0,0,0.986693561077118,0.9903533458709716,0.9927266836166382,0.0,accept,unanimous_agreement
289592634,10527,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
289592670,10527,same here. we only use underscores for constants in uppercase.,0,0,0,0.9870036244392396,0.9881123900413512,0.9924464821815492,0.0,accept,unanimous_agreement
289592687,10527,give it a better name.,0,0,0,0.9285915493965148,0.981405794620514,0.9787742495536804,0.0,accept,unanimous_agreement
289592746,10527,empty line below.,0,0,0,0.9153064489364624,0.9854788780212402,0.9767862558364868,0.0,accept,unanimous_agreement
289592791,10527,personally i would write [code block],0,0,0,0.9812570810317992,0.9931377172470092,0.9925750494003296,0.0,accept,unanimous_agreement
289593013,10527,is using `hasownproperty()` really necessary?,0,0,0,0.9781277179718018,0.9932522177696228,0.9929221868515016,0.0,accept,unanimous_agreement
289593173,10527,where is `empty()` defined? and what does it do?,0,0,0,0.9812256693840028,0.9936144351959229,0.994579553604126,0.0,accept,unanimous_agreement
289596330,10527,"yep, it's mootools. fixed.",0,0,0,0.9642242193222046,0.9804531335830688,0.8984962701797485,0.0,accept,unanimous_agreement
289702409,10527,"there are a few `hasownproperty()` around, i presume you are sure that they are really required?",0,0,0,0.985531210899353,0.9918723702430724,0.9948434829711914,0.0,accept,unanimous_agreement
289703017,10527,"nitpick, i would strip the curly bracket here.",0,0,0,0.9868993759155272,0.9814768433570862,0.9911920428276062,0.0,accept,unanimous_agreement
289703040,10527,and here.,0,0,0,0.9781572222709656,0.9818605184555054,0.9887459874153136,0.0,accept,unanimous_agreement
290330959,10527,`if (i === 0)`,0,0,0,0.9865937232971193,0.990006685256958,0.9934549927711488,0.0,accept,unanimous_agreement
290338139,10527,please don't produce such long lines. split them all.,-1,0,-1,0.6362597942352295,0.5170588493347168,0.8595768809318542,-1.0,accept,majority_agreement
290339368,10527,it's a bad idea to trim it in each iteration.,-1,-1,-1,0.9781715869903564,0.9900132417678832,0.9806528091430664,-1.0,accept,unanimous_agreement
290339877,10527,the same as above.,0,0,0,0.981149673461914,0.988840878009796,0.9920604228973388,0.0,accept,unanimous_agreement
290342138,10527,what does const mean in javascript? it is modified in code below...,0,0,0,0.976342499256134,0.9895407557487488,0.993999481201172,0.0,accept,unanimous_agreement
290475479,10527,should i use concatenation or newline escaping to construct multiline literals?,0,0,0,0.9854635000228882,0.9929248094558716,0.9885531663894652,0.0,accept,unanimous_agreement
290498054,10527,"it means we can't change variable's value, the reference to array object instance. but we are free to call any of its methods or change its properties. there is no notion of const methods in js.",0,0,0,0.9837347269058228,0.981591820716858,0.9934513568878174,0.0,accept,unanimous_agreement
290855664,10527,i would use concatenation. ?,0,0,0,0.9858649969100952,0.9911723732948304,0.990532398223877,0.0,accept,unanimous_agreement
290860805,10527,"this is favorite way of - to produce additional (const) variables. i would just make `tag` changeable: [code block] however, i do not want to discuss this topic, so that it does not become an unnecessary obstacle here. another question (also not for this pr) is that i do not think ""trimming"" (frequently used in this api) is correct. for example: 1. if a tag with spaces at the edges is considered correct, why do we trim it? 2. otherwise, if a tag with spaces at the edges is considered incorrect, why we don't reject this ""bad request""?",0,0,0,0.8635950088500977,0.7338529825210571,0.95316880941391,0.0,accept,unanimous_agreement
290877347,10527,"not so precise, because it is clear what are the critical values in a piece of code. you don't even need to make it mutable! such as: [code block]",0,0,1,0.8878160715103149,0.9384984374046326,0.5087727308273315,0.0,accept,majority_agreement
290878207,10527,if using `\` doesn't break the indention so much... i'm fine with both way.,0,0,0,0.9465630054473876,0.920902132987976,0.9397321343421936,0.0,accept,unanimous_agreement
290881525,10527,"yeah, let's go back to the beginning. [a link]",0,0,0,0.977344572544098,0.960543155670166,0.9909364581108092,0.0,accept,unanimous_agreement
291838277,10527,-github please change this to: [code block],0,0,0,0.985686719417572,0.990269899368286,0.992834448814392,0.0,accept,unanimous_agreement
291838284,10527,here too.,0,0,0,0.9753128290176392,0.989098072052002,0.969845414161682,0.0,accept,unanimous_agreement
291838327,10527,i was reviewing these code recently and i think we should use `value()` method instead of `operator[]`. [code block],0,0,0,0.9839367866516112,0.9837453365325928,0.9864830374717712,0.0,accept,unanimous_agreement
291838345,10527,~~and here.~~,0,0,0,0.921780288219452,0.6764450669288635,0.9218276143074036,0.0,accept,unanimous_agreement
291838348,10527,~~here too.~~,1,0,0,0.5051025748252869,0.895033061504364,0.9197946190834044,0.0,accept,majority_agreement
291838354,10527,~~also here.~~,0,0,0,0.8790869116783142,0.9719722867012024,0.98241925239563,0.0,accept,unanimous_agreement
291838415,10527,~~could you be more clear about it? should we not trim or trim it in other places?~~,0,0,0,0.6470707058906555,0.983528733253479,0.9875352382659912,0.0,accept,unanimous_agreement
291839094,10527,"sorry about my previous note, you are free not making this change, i'm having second thought.",-1,-1,-1,0.987558364868164,0.9932656288146972,0.9909840822219848,-1.0,accept,unanimous_agreement
291840924,10527,", why do you suggest to trim it for each iteration instead of making it only once?",0,0,0,0.9731231927871704,0.983786165714264,0.9893894791603088,0.0,accept,unanimous_agreement
291841869,10527,"i have no idea what or how. please give your direct suggestion to -github about what to do. what do you mean by ""making it only once""?",-1,-1,-1,0.6996071934700012,0.7100367546081543,0.9053186178207396,-1.0,accept,unanimous_agreement
291842433,10527,", don't you follow this thread carefully? [a link] either leave it as is currently or change it to not produce extra variable (as suggested in [a link]",0,0,0,0.9828507900238036,0.9906435608863832,0.9920944571495056,0.0,accept,unanimous_agreement
291842838,10527,"~~i'm not sure what is the point here? what are we aiming to achieve? the trim happens only once for each items in `tags`, no?~~ ~~imo [a link] is even better than [a link] because there is one less variable, isn't?~~",0,0,0,0.8847240209579468,0.8203690052032471,0.6059797406196594,0.0,accept,unanimous_agreement
291842901,10527,"i understand it now, just leave it as-is.",0,0,0,0.9717980027198792,0.9800629615783693,0.9146764874458312,0.0,accept,unanimous_agreement
291901908,10527,"why save this function to the global context, rather than using `const`? i believe it's only called in this file.",0,0,0,0.9433444142341614,0.991474747657776,0.987470805644989,0.0,accept,unanimous_agreement
291901979,10527,same question here regarding `this` vs `const`.,0,0,0,0.9802311062812804,0.9936635494232178,0.989654302597046,0.0,accept,unanimous_agreement
291902829,10527,same `this` question for all of these. (documenting instances in case we decide to change it),0,0,0,0.9879418015480042,0.9890255331993104,0.994583547115326,0.0,accept,unanimous_agreement
291903392,10527,same `this` question for all instances of `this.current_hash`.,0,0,0,0.9876170754432678,0.9929593801498412,0.9942303895950316,0.0,accept,unanimous_agreement
291905384,10527,"all new api methods should have some sort of error handling (e.g. 404 if hash not found, 400 if tag doesn't exist). and ideally with some sort of error message (`invalid torrent`) per #10747. check `torrentscontroller::createcategoryaction` for an example of this.",0,0,0,0.9885395169258118,0.9952200055122375,0.9946203231811525,0.0,accept,unanimous_agreement
291907162,10527,i think we should check all tags and return a `409` if any already exist. only then should we create a tag.,0,0,0,0.9875267148017884,0.990860104560852,0.9870361685752868,0.0,accept,unanimous_agreement
291907437,10527,we should check the return value of this function and throw an error if `false`. otherwise a tag could silently fail the `session::isvalidtag()` check.,0,0,0,0.9882055521011353,0.9932102560997008,0.9939619898796082,0.0,accept,unanimous_agreement
291908703,10527,"we should also check the return value of this function and handle appropriately. maybe we throw an error immediately, or maybe we return a 200 if at least one `removetag` succeeded. then we can return the number of failures in the response body. i think we currently do the former in some cases, but i'm not sure it's the right approach. maybe it is- i'm not sure.",0,0,0,0.911257266998291,0.6979148983955383,0.9514999389648438,0.0,accept,unanimous_agreement
291910106,10527,we can replace iteration with built-in functions: [code block],0,0,0,0.9883657693862916,0.9912762641906738,0.99478018283844,0.0,accept,unanimous_agreement
291913792,10527,"despite this check i'm able to submit tags with a comma without getting an error alert (e.g. `testtag,`). but then again, multiple tags are allowed when separated by a comma. so this check confuses me a bit.",0,-1,-1,0.8194827437400818,0.5406064987182617,0.7542291283607483,-1.0,accept,majority_agreement
291914892,10527,what's the difference between this `typeof` check versus checking against `undefined` directly?,0,0,0,0.9783504009246826,0.991841197013855,0.9912257790565492,0.0,accept,unanimous_agreement
291915182,10527,"same question here about checking `undefined` directly, and any other uses.",0,0,0,0.9834649562835692,0.9895367622375488,0.988431751728058,0.0,accept,unanimous_agreement
291915751,10527,"not sure about including the space in the split string. it seems more common to split just on `,` and then trim the tag. but don't feel super strongly about this.",-1,-1,0,0.9014954566955566,0.5357669591903687,0.5981071591377258,-1.0,accept,majority_agreement
291916171,10527,is `combine` a mootools function? i'm not familiar with it.,0,-1,0,0.7019433975219727,0.4976418912410736,0.954094409942627,0.0,accept,majority_agreement
291916677,10527,"can you make this check more explicit? directly compare to undefined/null or whatever it would be in a failure case (i can't immediately tell, hence wanting the explicitness). same with while loop below.",0,0,0,0.988241970539093,0.9818939566612244,0.9934957027435304,0.0,accept,unanimous_agreement
291917034,10527,can this be a triple equals `===`?,0,0,0,0.9861381649971008,0.9927183389663696,0.9909669756889344,0.0,accept,unanimous_agreement
291917580,10527,can this be `const`?,0,0,0,0.9878508448600768,0.9923998713493348,0.994022786617279,0.0,accept,unanimous_agreement
291917689,10527,can this be `const`?,0,0,0,0.9878508448600768,0.9923998713493348,0.994022786617279,0.0,accept,unanimous_agreement
291917759,10527,can this be `const`?,0,0,0,0.9878508448600768,0.9923998713493348,0.994022786617279,0.0,accept,unanimous_agreement
291917857,10527,can this be `const`?,0,0,0,0.9878508448600768,0.9923998713493348,0.994022786617279,0.0,accept,unanimous_agreement
291918099,10527,can this be `const`?,0,0,0,0.9878508448600768,0.9923998713493348,0.994022786617279,0.0,accept,unanimous_agreement
291918462,10527,can this check be moved outside the for loop? seems we can call it if `sortedtags.length > 0`.,0,0,0,0.9882805347442628,0.9945665597915648,0.99490225315094,0.0,accept,unanimous_agreement
291918538,10527,use triple equals `===`,0,0,0,0.9859472513198853,0.9897021055221558,0.9908663630485536,0.0,accept,unanimous_agreement
291918994,10527,the double negative confuses my brain. can this be stored in a variable for clarity? like `const isnumber`?,-1,-1,-1,0.9328956604003906,0.7389911413192749,0.8596880435943604,-1.0,accept,unanimous_agreement
291919129,10527,nitpick: remove the space after `function`,0,0,0,0.9881097078323364,0.9930971264839172,0.9941306710243224,0.0,accept,unanimous_agreement
291919928,10527,"nitpick, but can we make this `const` using a ternary operator? `const tagname = ((taghash === 0) ? '' : taglist[taghash].name);` note that i've switched from double equals to triple equals, but please confirm this is valid.",0,0,0,0.9876930117607116,0.9898373484611512,0.993270218372345,0.0,accept,unanimous_agreement
291922507,10527,"how do i evoke this case from the webui? it seems set just calls `api/v2/torrents/addtags` or `api/v2/torrents/removetags` directly from `mocha-init.js`, rather than opening this dialog.",0,0,0,0.9890240430831908,0.9916813969612122,0.9936568140983582,0.0,accept,unanimous_agreement
291923899,10527,(the line above it),0,0,0,0.9801067113876344,0.9854795336723328,0.9903584122657776,0.0,accept,unanimous_agreement
291935160,10527,", we discussed error handlng in the early comments, please read them first. in a nutshell: since client-server interconnection is asynchronous, not all conflicts should cause an error, some can be safely ignored.",0,0,0,0.7180458307266235,0.9857007265090942,0.9773255586624146,0.0,accept,unanimous_agreement
291966613,10527,`,0,0,0,0.9363609552383424,0.971754789352417,0.7881692051887512,0.0,accept,unanimous_agreement
291970468,10527,"panels work mostly like popup windows above. the alternative is to declare `current_hash` only in client.js as it is really a global state variable, declared in multiple panels.",0,0,0,0.9874874353408812,0.9924513697624208,0.9942409992218018,0.0,accept,unanimous_agreement
292068150,10527,then we'll have to do even more work to find first tag element once more.,0,0,0,0.9800767302513124,0.974214255809784,0.9682775735855104,0.0,accept,unanimous_agreement
292081614,10527,you can do this via torrent context menu -> tags -> add...,0,0,0,0.9880256056785583,0.9909831285476683,0.9958577752113342,0.0,accept,unanimous_agreement
292098709,10527,this case evoked via left panel tag list context menu. only single tag is allowed there. it closely follows desktop version behavior.,0,0,0,0.9872719645500184,0.994394302368164,0.993974268436432,0.0,accept,unanimous_agreement
292115450,10527,"i couldn’t find any substantive conversation about this above. the client processes api responses asynchronously, but that doesn’t mean our api should swallow errors. we should report the errors and allow the client to decide how to handle them. to me, that means 409 if all fail, 200 if all pass, and 200 with more info if some pass and some fail.",0,0,0,0.9332653284072876,0.9414790272712708,0.9619816541671752,0.0,accept,unanimous_agreement
292116438,10527,"that seems reasonable. this is all pretty ugly, but that was the case well before your pr.",-1,-1,-1,0.9523775577545166,0.9124668836593628,0.9619156718254088,-1.0,accept,unanimous_agreement
292117592,10527,let’s go with your current approach and we can refactor the current_hash logic in a future pr.,0,0,0,0.9854384660720824,0.9852178692817688,0.9931341409683228,0.0,accept,unanimous_agreement
292284924,10527,that did it :thumbs_up: thanks. i wrote the original code for this with add categories and it *still* confuses me. probably not a sign of good code (on my part).,1,1,1,0.937698245048523,0.9892262816429138,0.9931727051734924,1.0,accept,unanimous_agreement
292284978,10527,was able to confirm this. thanks.,1,1,1,0.929785430431366,0.9626893997192384,0.9783905148506165,1.0,accept,unanimous_agreement
292285221,10527,"you're right, i overlooked the part where we create the element in the line directly above. you can ignore this.",0,0,0,0.9605514407157898,0.9728292226791382,0.9895017743110656,0.0,accept,unanimous_agreement
297257502,10527,"we should capture this function’s return value. if it’s false and the tag doesn’t exist (we should check), we should count that as an error. we should finish processing all other tags before reporting the error.",0,0,0,0.9838051199913024,0.9914643168449402,0.993388295173645,0.0,accept,unanimous_agreement
297259061,10527,"capture the return value of this function, report back an error if add fails and torrent doesn’t contain the tag. don’t report the error until all hashes and tags are processed.",0,0,0,0.9837177395820618,0.9813219308853148,0.9944635033607484,0.0,accept,unanimous_agreement
297259763,10527,"capture the return value of this function, report back an error if remove fails and torrent (still) contains the tag. trying to remove a nonexistent tag will return success. don’t report the error until all hashes and tags are processed.",0,0,0,0.9817548394203186,0.9792532920837402,0.9943760633468628,0.0,accept,unanimous_agreement
297260893,10527,"capture the return value of this function, report back an error if add fails and tag doesn’t exist. don’t report the error until all tags are processed.",0,0,0,0.9791002869606018,0.9778645634651184,0.994281530380249,0.0,accept,unanimous_agreement
297261274,10527,"capture the return value of this function, report back an error if remove fails and tag (still) exists. trying to remove a nonexistent tag will return success. don’t report the error until all tags are processed.",0,0,0,0.977096140384674,0.9798486828804016,0.9943027496337892,0.0,accept,unanimous_agreement
300825463,10527,"you don't need to call it ""errormessage"", since it's field of ""error"" object. just ""message"".",0,0,0,0.9876269698143004,0.9915406107902528,0.9939832091331482,0.0,accept,unanimous_agreement
300825583,10527,"there is incorrect place to handle this error. really we are handle error that is raised due to incorrect tag, isn't it? i would check each tag before applying it. otherwise you will get multiple error messages because of the same invalid tag.",0,0,0,0.7550802826881409,0.6061395406723022,0.9273537993431092,0.0,accept,unanimous_agreement
300825627,10527,the same as above. just check tag before trying to remove it.,0,0,0,0.987433135509491,0.9919907450675964,0.9949533343315125,0.0,accept,unanimous_agreement
300825694,10527,the previous action should not fail. why do you make this redundant checking and error handling?,0,0,0,0.9581146240234376,0.9161707758903505,0.980865478515625,0.0,accept,unanimous_agreement
300825886,10527,"i would change the order of conditionals. since c++ performs ""short circuit evaluation"" you will not try to create tag if it already exists. applied in all similar cases.",0,0,0,0.9884247779846193,0.9882673621177672,0.9924964904785156,0.0,accept,unanimous_agreement
300844136,10527,"if we follow this line of reasoning, then we don't need error checking at `removetag` and `removealltags` altogether. they are supposed to succeed when tag is valid and exists, do nothing for absent tags, and invalid tags should not be added in the first place. i believe what wants is a form of defensive programming, in case internal tags api would change in the future in a way, that would allow these operations to fail. if we won't put any checks and error reporting, web api would fail silently.",0,0,0,0.4989542961120605,0.984915256500244,0.9544086456298828,0.0,accept,unanimous_agreement
300850958,10527,"it's good idea in common case. but you have to have some common sense not to make it absurd. `removealltags` isn't supposed to fail by its meaning. it doesn't even have any error reporting. you're trying to make something up. as for `removetag` and others like it, you can insist on ""paranoid"" error handling like ""if a function may report an error, then we have to handle it anyway"". but it does not untie your hands to produce stupid logic, trying to perform obviously unsuccessful actions and reporting the same error many times (i mean you should check tag before trying to add/remove it).",-1,-1,-1,0.8702281713485718,0.6964965462684631,0.9719991087913512,-1.0,accept,unanimous_agreement
302384638,10527,"imo, these methods are incorrect. result of api method can contain not only ""errors"" field. you should build result object inside the method and call `setresult()` at the end. otherwise some other dev can be confused when it call `seterrors()` and its result will be overwritten. [code block]",0,0,0,0.966206431388855,0.9185464382171632,0.967698097229004,0.0,accept,unanimous_agreement
302390680,10527,"i'm fine with this format but prefer early returns (imo, not always justified) so he can insist on reformatting it: [code block]",0,0,0,0.9751306176185608,0.9155502915382384,0.959630250930786,0.0,accept,unanimous_agreement
305712810,10527,"that's exactly what i was aiming for in this pr. `torrenthandle::removealltags()` swallows the `false` return from `torrenthandle::removetag()`, repeatedly. by checking if the tags list is empty, we can catch this error. the `torrenthandle` api is pretty lax on error handling.",0,0,0,0.7877551913261414,0.9723531007766724,0.982975423336029,0.0,accept,unanimous_agreement
305714587,10527,i do agree that we should return early. i'm not sure what the point of this comment was.,-1,0,0,0.8024671673774719,0.6643016338348389,0.9210295081138612,0.0,accept,majority_agreement
305715784,10527,"i think we should merge this pr as it was previously, with less error handling. we can solve the larger web api error handling problem for all apis in a separate issue/pr. we shouldn't jam up feature development because of it.",0,0,0,0.9748138785362244,0.9797805547714232,0.9578441977500916,0.0,accept,unanimous_agreement
305724193,10527,":+1: we can merge it without the last commit for now. since error handling in entire web api is problem itself it should be discussed and solved separately (to not produce yet another inconsistencies). , what do you say?",0,0,0,0.8995580077171326,0.9568914175033568,0.534960925579071,0.0,accept,unanimous_agreement
306133677,10527,"[code block] because this variable is now scoped properly, you must redeclare `i` in the for loop just below.",0,0,0,0.9885923862457277,0.9894229769706726,0.9949212670326232,0.0,accept,unanimous_agreement
306135401,10527,`syntaxerror: redeclaration of const updatebypasssauthsettings` these may need to remain on `var` since they remain in the global scope after the preferences window is closed. reopening the preferences window triggers the above error.,0,0,0,0.9852710962295532,0.9913596510887146,0.9933093786239624,0.0,accept,unanimous_agreement
306649959,10527,", can you confirm that it's fixed now?",0,0,0,0.9829471707344056,0.9903380274772644,0.9857827425003052,0.0,accept,unanimous_agreement
306682740,10527,"i'm having some issues with my dev box, i'll need to test tomorrow.",-1,-1,-1,0.762747049331665,0.6010093092918396,0.772999107837677,-1.0,accept,unanimous_agreement
306719253,10527,"ok, was able to test again. all is working well for me.",1,0,1,0.8062612414360046,0.557957649230957,0.7745832204818726,1.0,accept,majority_agreement
41863828,3810,**dbus** only is not enough here?,0,0,0,0.9216680526733398,0.9562917947769164,0.9803588390350342,0.0,accept,unanimous_agreement
41870864,3810,"i'm not sure. dbus can be installed on mac, but desktop notifications will not work, afaik.",0,-1,0,0.6996763944625854,0.6933202743530273,0.735419511795044,0.0,accept,majority_agreement
41881294,3810,"well. in this case, the following would be correct: [code block] also note that there is no need for extra line breaks.",0,0,0,0.9874008297920228,0.9694506525993348,0.9928317070007324,0.0,accept,unanimous_agreement
41881657,3810,stick it to the rest of headers/sources sections above.,0,0,0,0.9864266514778136,0.9941898584365844,0.9945019483566284,0.0,accept,unanimous_agreement
41882044,3810,space after **if** (coding style). optional: drop redundant braces (coding style).,0,0,0,0.9875481128692628,0.9940815567970276,0.9859787821769714,0.0,accept,unanimous_agreement
41882788,3810,static variables (const) inside anonymous namespace is overkill. get rid of either namespace or static (preferable use static in this case).,0,0,0,0.873013436794281,0.9699814319610596,0.9214610457420348,0.0,accept,unanimous_agreement
41882857,3810,we don't use module name in qt includes.,0,0,0,0.9758564233779908,0.9861086010932922,0.9922905564308168,0.0,accept,unanimous_agreement
41883425,3810,"oh, yes. i forgot that now the code is in c++11 mode...",-1,0,0,0.5894272327423096,0.8607243895530701,0.9231808185577391,0.0,accept,majority_agreement
41884508,3810,"although using braces in such cases (single statement in block) is not forbidden, try to avoid this (if it does not matter for you).",0,0,0,0.96756774187088,0.9923396110534668,0.989426851272583,0.0,accept,unanimous_agreement
41884622,3810,and insert space after **if** of course.,0,0,0,0.9875625371932985,0.9925386309623718,0.9915766716003418,0.0,accept,unanimous_agreement
41884737,3810,space,0,0,0,0.968176543712616,0.971493363380432,0.7991176247596741,0.0,accept,unanimous_agreement
41884871,3810,line break before **else** (coding style).,0,0,0,0.9785856008529664,0.9891011118888856,0.990032196044922,0.0,accept,unanimous_agreement
41884948,3810,space,0,0,0,0.968176543712616,0.971493363380432,0.7991176247596741,0.0,accept,unanimous_agreement
41884992,3810,line break,0,0,0,0.9689909815788268,0.9392943978309632,0.987718939781189,0.0,accept,unanimous_agreement
41885069,3810,space,0,0,0,0.968176543712616,0.971493363380432,0.7991176247596741,0.0,accept,unanimous_agreement
41885142,3810,space,0,0,0,0.968176543712616,0.971493363380432,0.7991176247596741,0.0,accept,unanimous_agreement
41885442,3810,line break,0,0,0,0.9689909815788268,0.9392943978309632,0.987718939781189,0.0,accept,unanimous_agreement
41885614,3810,line break before brace,0,0,0,0.9824913144111632,0.9683918356895448,0.991179883480072,0.0,accept,unanimous_agreement
41885685,3810,4 spaces as indent,0,0,0,0.9787991046905518,0.9869486093521118,0.991205871105194,0.0,accept,unanimous_agreement
41885906,3810,line break before brace,0,0,0,0.9824913144111632,0.9683918356895448,0.991179883480072,0.0,accept,unanimous_agreement
41886060,3810,line break at end of file,0,0,0,0.9779493808746338,0.983254373073578,0.991077184677124,0.0,accept,unanimous_agreement
41886171,3810,line break,0,0,0,0.9689909815788268,0.9392943978309632,0.987718939781189,0.0,accept,unanimous_agreement
41886276,3810,why this file? delete it.,0,0,0,0.8655298352241516,0.9262336492538452,0.9685766696929932,0.0,accept,unanimous_agreement
41886393,3810,we don't use indentation for preprocessor directives.,0,0,0,0.97569340467453,0.967500865459442,0.986619472503662,0.0,accept,unanimous_agreement
41886863,3810,move this to .cpp and use forward declaration here.,0,0,0,0.989017367362976,0.9931521415710448,0.9953805208206176,0.0,accept,unanimous_agreement
41887865,3810,"wow, i'm tired. i will no longer show violations, like already mentioned. i hope you find them yourself and fix it. follow the rules of coding_guidelines.md and my comments above.",-1,-1,-1,0.9804758429527284,0.9926716089248656,0.9926168322563172,-1.0,accept,unanimous_agreement
41888351,3810,before it was different? it's one and the same for variables.,0,0,0,0.9821449518203736,0.9878992438316344,0.9791204929351808,0.0,accept,unanimous_agreement
41892567,3810,"in c++ 03 unnamed namespace did not mean internal linkage for symbols, while in c++11 it does.",0,0,0,0.9865889549255372,0.992557406425476,0.9900988936424256,0.0,accept,unanimous_agreement
41893274,3810,"in this case, what it's used for in c++03?",0,0,0,0.9887680411338806,0.9937300682067872,0.9927149415016174,0.0,accept,unanimous_agreement
41894995,3810,"in c++03, as i understand, [code block] is by definition equal to [code block] but symbols from it still can be used where external linkage is needed. here are more details: [a link]",0,0,0,0.984586238861084,0.9932396411895752,0.9939398765563964,0.0,accept,unanimous_agreement
42931224,3810,"why you need this function? in place of calling this function, there is always torrent (h != 0).",0,0,0,0.9847148060798644,0.9899029731750488,0.98965722322464,0.0,accept,unanimous_agreement
42931247,3810,rename all member variables in form of `m_variablename`.,0,0,0,0.9872938990592957,0.9922522902488708,0.9947821497917176,0.0,accept,unanimous_agreement
42931493,3810,"this struct is redundant. its **widget** field is always equal to mainwindow where it makes sense, so you can use dbusnotifier::mainwindow directly. and **torrent** can be used alone, not including in any structure. also unnecessary are all **widget** function parameters. offtopic: `0l` is an incorrect value for a null pointer, although not cause any compilation errors (as i said earlier). use either `0` or `nullptr`.",0,0,0,0.9661052823066713,0.9940117001533508,0.9162219166755676,0.0,accept,unanimous_agreement
42931594,3810,don't store torrenthandle pointer for future using. it's dangerous as torrenthandle object can be deleted before you will use it and you will not be able to check it out. either store qpointer or store torrent hash and then call session::findtorrent().,-1,0,0,0.8434022068977356,0.8586099743843079,0.53242027759552,0.0,accept,majority_agreement
42931645,3810,"this function does not make sense, because `qsystemtrayicon *systrayicon` not used by dbusnotifier constructor. just use the appropriate constructor in place of its call.",0,0,0,0.9698340892791748,0.9901644587516784,0.992336094379425,0.0,accept,unanimous_agreement
42931664,3810,"although qt_begin_namespace/qt_end_namespace are used in some previous code, it doesn't make sense, so don't use it.",0,0,0,0.9444870352745056,0.9575676918029784,0.9859923720359802,0.0,accept,unanimous_agreement
42935845,3810,why? do you force users to compile qt without the namespace?,0,0,0,0.9010725617408752,0.9691144227981568,0.981607973575592,0.0,accept,unanimous_agreement
42935935,3810,"no, ""search finished"" notification uses the search widget. if it is active, notification is not needed.",0,0,0,0.9867663383483888,0.9915634393692015,0.9917729496955872,0.0,accept,unanimous_agreement
42935967,3810,disagree. dbus notifications may be used without gui (from qbittorrent-nox). let's make this next step easier.,0,0,0,0.9640790224075316,0.9775450229644777,0.9468140006065368,0.0,accept,unanimous_agreement
42936005,3810,"well, if you say so. i wanted to be on the safe side.",0,0,0,0.913169801235199,0.9269578456878662,0.9728379845619202,0.0,accept,unanimous_agreement
42936039,3810,no. but qt_begin_namespace/qt_end_namespace are not enough to support qt namespace.,0,0,0,0.9283460974693298,0.9656407237052916,0.990845024585724,0.0,accept,unanimous_agreement
42936133,3810,where in the code it is used?,0,0,0,0.9851502776145936,0.9872960448265076,0.993947982788086,0.0,accept,unanimous_agreement
42936182,3810,it will not make the next step easier. it simply won't compile in this form for qbittorrent-nox. this will require a deeper rework.,0,0,0,0.689400315284729,0.918792963027954,0.933350682258606,0.0,accept,unanimous_agreement
42936357,3810,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
42936617,3810,"in dbusnotifier::actioninvoked(). when a notification is clicked, the corresponding widget should be activated.",0,0,0,0.9885759949684144,0.9926215410232544,0.9939956068992616,0.0,accept,unanimous_agreement
42936624,3810,"oh yes, thank you. but, actually, the problem persists with qpointer (and hash), since the handle can be deleted just between checking the qpointer (getting a handle from the session object) and accessing it. this is just one more example for my criticism of the new torrenthandle class. it is simply not a handle, because it does not have the owning and copying semantics.",1,1,1,0.888595700263977,0.8577741980552673,0.7692899107933044,1.0,accept,unanimous_agreement
42936697,3810,i understand that it will not compile. the idea behind this is that main window and parent are different objects.,0,0,0,0.8861596584320068,0.8403564095497131,0.9848849773406982,0.0,accept,unanimous_agreement
42936719,3810,the purpose of the function is to move all #ifdef-logic out of mainwindow.cpp,0,0,0,0.9894707202911376,0.993443489074707,0.99428528547287,0.0,accept,unanimous_agreement
42936885,3810,do activatewindow() change current tab to search tab?,0,0,0,0.9880964756011964,0.9939210414886476,0.9950370192527772,0.0,accept,unanimous_agreement
42937005,3810,"you did not understand the current model. your premise is incorrect. torrenthandle object is always relevant during the processing of single event. if you got a non-null pointer from the session, you can feel free to use it in current function and in all nested functions. you can call it just torrent if **handle** has a special meaning for you. torrenthandle is conventional name.",0,0,0,0.9377681612968444,0.9888689517974854,0.9087604880332948,0.0,accept,unanimous_agreement
42937087,3810,what's the point? `#ifdef`s tell you something disturbing?,0,0,-1,0.8713083267211914,0.7466946244239807,0.9510851502418518,0.0,accept,majority_agreement
42937116,3810,"and ""if"" too. the more they are localised and the smaller are in number the better i feel myself.",0,0,0,0.9598188996315002,0.9562203288078308,0.9077165722846984,0.0,accept,unanimous_agreement
42937153,3810,"this is not idea but just current implementation. if that's the idea, then answer the question - why can't it be the same object? for some imaginary universality? but we do not develop the library here.",0,0,0,0.9233450293540956,0.6321240067481995,0.9892953038215636,0.0,accept,unanimous_agreement
42937164,3810,if the main search tab is active,0,0,0,0.9880290627479552,0.9847780466079712,0.9928601384162904,0.0,accept,unanimous_agreement
42937242,3810,"ok, i don't care anymore. on 24 october 2015 at 21:06, vladimir golovnev notifications.com wrote:",-1,0,-1,0.9873921275138856,0.9610716104507446,0.5856848359107971,-1.0,accept,majority_agreement
42937305,3810,you're doing **objectively** wrong implementation to **subjectively** feel better. every thing should make sense. why to create dbusnotifier object you pass to function the system tray object? make you feel better?,-1,0,-1,0.808015763759613,0.8584186434745789,0.7435125708580017,-1.0,accept,majority_agreement
42937362,3810,"could you explain yourself, please? what is wrong? unused parameter in one of the if branches?",0,0,0,0.8876620531082153,0.961641788482666,0.9437366724014282,0.0,accept,unanimous_agreement
42937453,3810,"but you still pass it to a function! in case of dbusnotifier: [code block] this is quite normal, if we don't know how will be implemented the function in the place of invocation (e.g. when using signal/slot or event processing). but in this case it is not.",0,0,0,0.974833071231842,0.9751468300819396,0.970885932445526,0.0,accept,unanimous_agreement
42937505,3810,"sorry, but can not understand you still. consider the following example: [code block] is there anything wrong with it? if no, what is the critical difference between ""if"" anf ""#if"" inside of this function for mainwindow?",-1,-1,-1,0.9838825464248656,0.9826289415359496,0.9894974231719972,-1.0,accept,unanimous_agreement
42937551,3810,"yes, this is exactly what i was talking about from the very beginning: this is a class without ownership semantic. the handle for me, i guess, has common meaning: it is something that allow me to access an object while i own the handle. and the idea that handle may become invalid (and crash the program, actually) without my actions is kind of surprising, don't you agree? if we consider a remote resource, then any operation on its handle may fail, naturally. but this has to be stated in the operation semantic (say, throw a specified exception). however, there is no any error reporting in the torrenthandle semantic. that is why torrenthandle is not even a classical handle, not a classical smart pointer. what is it? can't it become better by gaining the proper ownership semantic? on 24 october 2015 at 20:53, vladimir golovnev notifications.com wrote:",0,-1,0,0.7368059158325195,0.6384737491607666,0.7550085783004761,0.0,accept,majority_agreement
42940101,3810,"look, you really don't understand the difference between if and #if? then i don't even know how to continue our discussion...",-1,-1,-1,0.9346423745155334,0.9124860167503356,0.9649695754051208,-1.0,accept,unanimous_agreement
42941784,3810,"do you really think that only ""classical"" handle or ""classical"" smart pointer are the right patterns? okay, i am forced to spend my time and explain everything from the beginning... that is torrent handle in libtorrent. i don't agree with this. this is one reason why i decided to abandon this architecture and to hide all interaction with libtorrent::torrent_handle inside our torrenthandle. libtorrent::torrent_handle may become invalid at any time even directly between calling is_valid() (returning true) and next method. the second reason we need to store any additional data in torrenthandle class. any libtorrent::torrent_handle method can throw an exception. if we promote a similar architecture to the upper levels of the application, the qbittorrent code will grow at the expense of having to use try-catch blocks everywhere. in this case, these blocks will not incur any benefit, in addition to suppression of exceptions (if you look, in which case torrent_handle may become invalid). so in current qbittorrent... session creates torrenthandle instances (one for each torrent) and **owns** them. the others can only obtain a pointer to one of these objects. no need of smart pointers here. the state of torrenthandle objects is updated ""discretely"", i.e. we assume that for some period of time the object remains unchanged. this greatly simplifies the interaction with the application bittorrent engine. more info can try to understand it yourself (read the code or ask some specific questions). if you're against using the name torrenthandle, you can create a relevant issue on this bugtracker.",0,-1,-1,0.6710371375083923,0.8281518220901489,0.908402144908905,-1.0,accept,majority_agreement
42943221,3810,"and yet (so you didn't pointed it out to me)... some details of session/torrenthandle classes implementation still need to be improved, but it should in no way affect its interface used by other application components, so i put it off for a while (i plan to finish it soon).",0,0,0,0.9617697596549988,0.9750808477401732,0.981706440448761,0.0,accept,unanimous_agreement
42944749,3810,i know that you know that i know the difference. encapsulation concept does not get any worse if it is a compile-time but not a run-time one.,0,0,0,0.9442030787467957,0.9356961846351624,0.938450574874878,0.0,accept,unanimous_agreement
42945505,3810,"ok. sorry. by the way, i do not think that your run-time example is correct in this case. i would agree with your arguments if we were talking about the problem, the correct solution of which would be so complex and ugly that we could allow some minor violations in favor of ease of implementation. but in this case the correct decision is no less simple than this. look yourself! your: [code block] correct (in mainwindow.cpp): [code block] the incorrectness of your implementation, you can prove by applying a semblance method of mathematical induction. suppose we have implemented another notifier (someothernotifier), which requires an instance of some widget (somewidget) and doesn't require mainwindow instance. then we get the following: your: [code block] correct (in mainwindow.cpp): [code block] and so on...",-1,-1,-1,0.9909906387329102,0.9916742444038392,0.990853488445282,-1.0,accept,unanimous_agreement
42945808,3810,"i would absolutely agree with you, but i had in mind notifications for gui-less qbittorrent. in that case this notifier creation code would be duplicated somewhere else, which is worse for me than non-strict interface of the creation function (which will change anyway for the gui-less version). also, we can apply such induction to the number of notifiers and inspect the train of #ifdefs and #includes in the mainwindows.cpp, which you omit in your example. do they make already huge file any better? when submitting this pr i decided to not stress the intention to make it work in no-gui mode, but to submit a code, suitable for such modification. instead, we can work on that right now and merge more changes at once.",0,0,0,0.7848292589187622,0.934722661972046,0.8605501651763916,0.0,accept,unanimous_agreement
42945893,3810,"thank you for the explanation! and i'm sorry that you night sleep was disturbed by me. i think it is time for me to point out that my intention is to make qbittorent better, as well as your. i already read the code, of course. you already pointed out the big difference between the handle in libtorrent and the torrenthandle class: libtorrent signals by throwing an exception if an operation was not completed, while torrenthandle does not. beginning with safe_call, which eats exceptions and ending with objects which can be deleted. i do not argue that the solution to the libtorrent handles (session + torrent objects with qt-ised interface) is bad, no! i'm arguing that there may be a better solution for the ownership problem. for instance, i would prefer non-copyable handle classes, given to clients by reference. on 25 october 2015 at 07:44, vladimir golovnev notifications.com wrote:",-1,-1,-1,0.5627854466438293,0.9377722144126892,0.8521100282669067,-1.0,accept,unanimous_agreement
42946246,3810,and what about this?,0,0,0,0.963481307029724,0.977644383907318,0.9742120504379272,0.0,accept,unanimous_agreement
42946338,3810,"this, frankly speaking, i do not understand. what is the problem? why does it need a special attention? if one needs to cache some data, associated with the torrent, why not? on 25 october 2015 at 16:50, vladimir golovnev notifications.com wrote:",-1,-1,-1,0.845372200012207,0.7415024042129517,0.923875629901886,-1.0,accept,unanimous_agreement
42946435,3810,"gui-less version will still require notifier creation in another place. gui-less version will still require more complex code rewriting so you shouldn't worry about it now. and yet... i'm more inclined to believe the conclusion that it would be better to use instances of different classes in different qbittorrent build variants. perhaps you should leave a common base class for them with some (really) common functionality in it (but only to prevent duplication of code), but use these objects through interfaces of subclasses (although it would require the use of ifdefs in the code). i don't think this pr for immediate merge. so you should think about non-gui code. perhaps this will put some things in their places.",0,0,0,0.8279451727867126,0.8925936222076416,0.9217658042907716,0.0,accept,unanimous_agreement
42946588,3810,"by the way, what would be the fundamental difference from the current implementation? imo, it will bring many intractable problems. i don't think qt containers can work with references, for example.",0,-1,0,0.9514172673225404,0.7350276708602905,0.8621883392333984,0.0,accept,majority_agreement
42946613,3810,"exactly! no one would be able to store the handle and wait until it gets invalid. on 25 october 2015 at 17:20, vladimir golovnev notifications.com wrote:",0,0,0,0.4466414451599121,0.7377485632896423,0.9634904265403748,0.0,accept,unanimous_agreement
42946763,3810,"but it required to store them in some places! it's not such a problem as you imagine. as i said, we can wrap the pointer in a qpointer if this really necessary. or just listen to the appropriate signal from the session (as it now is).",0,0,0,0.860826849937439,0.8726276755332947,0.954809069633484,0.0,accept,unanimous_agreement
42946824,3810,​> ​but it required to store them in some places why store handles but not hashes as you suggested to me?,0,0,0,0.9806313514709472,0.9721622467041016,0.991194486618042,0.0,accept,unanimous_agreement
42947692,3810,just to eliminate the need search torrent by hash (this is much slower than using an existing pointer).,0,0,0,0.9850162267684937,0.9791085124015808,0.9898215532302856,0.0,accept,unanimous_agreement
45620453,3810,"this implementation is not good enough! (i didn't watch the rest), the core must not in any way depend on a gui (just don't tell me some of the remnants of such a code, i haven't cleaned it all).",-1,-1,-1,0.9782951474189758,0.9548686742782592,0.9439957737922668,-1.0,accept,unanimous_agreement
60371305,3810,why not just **manager**? then full name is **notifications**::**manager**,0,0,0,0.9124041199684144,0.9937463998794556,0.9933057427406312,0.0,accept,unanimous_agreement
66014951,3810,don't use such common names for files. qmake compiles it in one directory so if we have `subfolder1/name.cpp` and `subfolder2/name.cpp` there is a conflict during compilation.,0,0,0,0.959042191505432,0.986452341079712,0.9857814908027648,0.0,accept,unanimous_agreement
66015113,3810,please rearder includes according to coding guidelines.,0,0,0,0.9872459173202516,0.987627387046814,0.9943819642066956,0.0,accept,unanimous_agreement
66015186,3810,q_assert,0,0,0,0.9863790273666382,0.978830873966217,0.9939908385276794,0.0,accept,unanimous_agreement
66015551,3810,as i said earlier if some file has implementation of namespace classes it's better to have `using namespace namespacename;` there.,0,0,0,0.987004816532135,0.99429190158844,0.9945095181465148,0.0,accept,unanimous_agreement
66015695,3810,redundant empty line,0,0,0,0.9393986463546752,0.8577157258987427,0.6371645927429199,0.0,accept,unanimous_agreement
66015812,3810,don't forget about naming style. we use camelcase.,0,0,0,0.9717496037483216,0.9483677744865416,0.9889763593673706,0.0,accept,unanimous_agreement
66015900,3810,did you forget to run uncrustify?,0,0,0,0.9588143229484558,0.9919942617416382,0.9808502793312072,0.0,accept,unanimous_agreement
66016128,3810,? you definitely forgot to run uncrustify. then i won't pay attention to this until you do it.,-1,0,0,0.828639805316925,0.8270753622055054,0.5300731658935547,0.0,accept,majority_agreement
66016314,3810,salt is salty... [code block],-1,-1,-1,0.949040710926056,0.8380895853042603,0.9747267961502076,-1.0,accept,unanimous_agreement
66016826,3810,"imo, bad interface (i mean mixing different string types here). you should have really important reason to have it.",-1,-1,-1,0.9845223426818848,0.98446923494339,0.9918256998062134,-1.0,accept,unanimous_agreement
66018280,3810,qobject::connect result is not of type bool.,0,0,0,0.9791502356529236,0.9858518838882446,0.9921954870224,0.0,accept,unanimous_agreement
66018460,3810,generally it's bad idea to have protected fields.,-1,-1,-1,0.9599338173866272,0.9887511134147644,0.8960824608802795,-1.0,accept,unanimous_agreement
66024181,3810,what does it mean?,0,0,0,0.9544900059700012,0.9790704250335692,0.9900947213172911,0.0,accept,unanimous_agreement
66024207,3810,and this too?,0,0,0,0.9797367453575134,0.9882076382637024,0.994128942489624,0.0,accept,unanimous_agreement
66237714,3810,"oh, qmake is so primitive...",-1,0,-1,0.9605699181556702,0.5941745042800903,0.9838061332702636,-1.0,accept,majority_agreement
66242117,3810,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
66242323,3810,"these parameters are indeed of different types: `id` is a sequence of characters, while `name` is a string, which is translatable and visible to a user.",0,0,0,0.9875435829162598,0.9924442172050476,0.9922037124633788,0.0,accept,unanimous_agreement
66242560,3810,can understand your point. i need a check that connection succeeds. the check works.,0,0,0,0.9385002255439758,0.9204786419868468,0.9629710912704468,0.0,accept,unanimous_agreement
66246756,3810,"the notifier object may need to store notification request, and hence move semantic may be of use.",0,0,0,0.9867847561836244,0.9924681782722472,0.991766393184662,0.0,accept,unanimous_agreement
66270351,3810,"qbytearray? std::string and qstring are from ""different worlds"".",0,0,0,0.9887292981147766,0.9868115782737732,0.9747200012207032,0.0,accept,unanimous_agreement
66271377,3810,"oh, that's right. **qmetaobject**::**connection** class has `operator bool()`.",0,0,0,0.9528763890266418,0.9849584102630616,0.979746162891388,0.0,accept,unanimous_agreement
66272046,3810,can you please explain this notation. not everyone here knows all the newfangled features.,0,0,0,0.9428489208221436,0.8856040239334106,0.9684904217720032,0.0,accept,unanimous_agreement
66274435,3810,"it's just the ""principle of relative names"". it is typically used for short. or do you like such long ugly signatures? it's like that you call your family members by full name (in your home).",-1,0,-1,0.7792515158653259,0.6857573986053467,0.5247137546539307,-1.0,accept,majority_agreement
66277083,3810,"can not reach the hands to fix it... in fact, mainwindow and systemtrayicon are sibling components.",0,0,0,0.8699889779090881,0.8058732151985168,0.8108728528022766,0.0,accept,unanimous_agreement
66278750,3810,i believe `notifier` param is redundant. manager creates its notifier. guimanager creates its notifier. why it can't use its own `createnotifier()` directly? (of course `createnotifier()` should be `static` in this case).,0,0,0,0.9822393655776978,0.9933039546012878,0.9740890860557556,0.0,accept,unanimous_agreement
66280633,3810,and it needs a way to pass that notifier object to its base class.,0,0,0,0.9822967648506165,0.9919082522392272,0.9917137622833252,0.0,accept,unanimous_agreement
66281856,3810,"your wording is fragile. if you do not want to read the `notifications::` prefix because it is too long, consider the following: [code block]",0,-1,0,0.6398224234580994,0.6657649874687195,0.7473601698875427,0.0,accept,majority_agreement
66282672,3810,or [code block],0,0,0,0.9859119057655334,0.9898264408111572,0.9949644804000854,0.0,accept,unanimous_agreement
66283275,3810,"not what i want because there is `qstring::qstring(const qbytearray &ba)`, which is not explicit. with `-dqt_no_cast_from_ascii` i would agree to use it.",0,0,0,0.9666982293128968,0.9879805445671082,0.9306616187095642,0.0,accept,unanimous_agreement
66286034,3810,do you request a source code comment?,0,0,0,0.9872832298278807,0.9931710958480836,0.9946840405464172,0.0,accept,unanimous_agreement
66295616,3810,no. i don't want to read notifications:: prefix in this file because it's redundant here.,0,0,0,0.8615719079971313,0.7154398560523987,0.948117196559906,0.0,accept,unanimous_agreement
66296236,3810,oops... reorder.,-1,-1,-1,0.960867404937744,0.9040173292160034,0.9588680267333984,-1.0,accept,unanimous_agreement
66296989,3810,no. just explain it here. or give me documentation link.,0,0,0,0.981097936630249,0.9736641049385072,0.988966166973114,0.0,accept,unanimous_agreement
66368037,3810,then my answer is the same: your approach is fragile and i would rather not do that.,-1,-1,0,0.8174605965614319,0.8946567177772522,0.8233726024627686,-1.0,accept,majority_agreement
66388096,3810,"please do not throw ""empty"" words. i always try to motivate my offers (even if it's just my opinion). and i want reasoned objections in response.",0,0,0,0.7169952988624573,0.8565995097160339,0.670444130897522,0.0,accept,unanimous_agreement
66388727,3810,ok. thanks. but according to this doc it makes no sense in your code (since in any case the same underlying code will be executed).,1,1,1,0.9606125950813292,0.8555792570114136,0.8469987511634827,1.0,accept,unanimous_agreement
66390005,3810,another explanation from me. the best option here is to write this: [code block] but this notation eats some space due to the indentation used (especially with nested namespaces). instead of doing this i propose just to do: [code block] to save the space.,0,0,0,0.9752587080001832,0.9866284132003784,0.9895652532577516,0.0,accept,unanimous_agreement
66423442,3810,why? `notifications::request::exec() &&` calls `notifier::shownotification(request&&)`,0,0,0,0.9844301342964172,0.9923880100250244,0.9925572872161864,0.0,accept,unanimous_agreement
66426899,3810,from [a link] so it doesn't call `notifier::shownotification(request&&)`,0,0,0,0.9860718846321106,0.994741439819336,0.9942976832389832,0.0,accept,unanimous_agreement
66436290,3810,oh! thanks! i have to add `std::move` here.,1,1,1,0.9719514846801758,0.9580855369567872,0.995967984199524,1.0,accept,unanimous_agreement
66481912,3810,"i mean the obvious fact that namespaces are open, and thus one can change declaration file, compile an implementation file with a using directive and find a lot of unresolved symbols at the end of the build. with class members it is not that likely, but with common names like ""manager"" and ""request"" a conflict is more likely.",0,0,0,0.976953148841858,0.971111536026001,0.9827932119369508,0.0,accept,unanimous_agreement
66489145,3810,"imo, you're fighting windmills. what prevents someone to do incorrect changes in your code?",-1,-1,-1,0.9523395895957948,0.9327248334884644,0.6843953728675842,-1.0,accept,unanimous_agreement
66498170,3810,do i? i do nothing except of using fully-qualified names and can not understand why should i change that for no profit and the potential problem?,-1,0,-1,0.8023735880851746,0.6840048432350159,0.8226361870765686,-1.0,accept,majority_agreement
66503824,3810,profit is the readability of the code. but apparently you see it differently...,0,1,0,0.8905492424964905,0.8178609013557434,0.9468878507614136,0.0,accept,majority_agreement
66504529,3810,absolutely. for me the situation with readability is just the opposite.,0,0,0,0.8989502191543579,0.6813634634017944,0.9283446669578552,0.0,accept,unanimous_agreement
66597996,3810,why do you like this overkill? why don't use `notifications::request` directly?,-1,-1,0,0.6434774398803711,0.5763370394706726,0.8263885974884033,-1.0,accept,majority_agreement
66599083,3810,using singleton this way is incorrect. the singleton is how some feature used in application. but the feature itself must not depends on how it's used.,0,0,0,0.8329883217811584,0.955333411693573,0.977416217327118,0.0,accept,unanimous_agreement
66600756,3810,pardon?,0,0,0,0.7543778419494629,0.8501777052879333,0.9331162571907043,0.0,accept,unanimous_agreement
66601315,3810,automatic generation of the stubs. i'll clean it.,0,0,0,0.9698811769485474,0.9870132803916932,0.9910043478012084,0.0,accept,unanimous_agreement
66605302,3810,some feature implementation (i mean either some single class or some class and its satellites) shouldn't depend on how it is used. it may have many instances or be a singleton. in your case request is internally purposed class (implementation detail of notifications feature). it should be initialized with some manager instance at creation time.,0,0,0,0.988222062587738,0.9912380576133728,0.9906994700431824,0.0,accept,unanimous_agreement
66605735,3810,or have `manager*` param in its `exec()` method.,0,0,0,0.987291932106018,0.9936984777450562,0.9950849413871764,0.0,accept,unanimous_agreement
66607194,3810,the only thing i think i managed to understand is that you want each time instead of [code block] write [code block] is it correct? update: or [code block],0,0,0,0.9796432852745056,0.9895257949829102,0.9899965524673462,0.0,accept,unanimous_agreement
66611204,3810,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
66612850,3810,"'request` is the api of the notifications subsystem. why would we force referencing the manager object each time? please note, that the class is used not only inside of the managers. what about the following: [code block] but, honestly, i'm thinking about moving the event handlers out of the manager classes.",0,0,0,0.9786442518234252,0.959004282951355,0.9752042889595032,0.0,accept,unanimous_agreement
66642002,3810,if we going to use some class as non-singleton (earlier used as singleton) we can just create its instance and it must work properly. if it's false then this class implemented incorrectly (it depends on some particular use case).,0,0,0,0.974756121635437,0.989459991455078,0.9871899485588074,0.0,accept,unanimous_agreement
66648307,3810,"please use more precise wording. what you've said on itself seems like a nonsense to me and, secondly, is barely applicable to the given use-case. i suspect that you are mixing the manager object and the notifier (for which it might make sense to have several of them). am i wrong? if you indeed are talking about possible several manager objects, i believe that the message routing has to be implemented inside of the manager object, but not creating more than one of the managers.",-1,-1,0,0.8049792051315308,0.6723096966743469,0.605008602142334,-1.0,accept,majority_agreement
66667901,3810,okay... probably have to leave this discussion unfinished. it resembles a conversation between the deaf and the blind...,-1,-1,-1,0.7192378640174866,0.8668614625930786,0.6375612616539001,-1.0,accept,unanimous_agreement
66669942,3810,it seems i was wrong. it is sad that you decided to abort the discussion.,-1,-1,-1,0.982652187347412,0.992727518081665,0.9898208379745485,-1.0,accept,unanimous_agreement
66703957,3810,"i agree. but you can do it in another way (not using singleton). imagine that we want to opt out of this ""controversial"" pattern. for example, we can access to application components through the application class properties. don't know how to explain it so you understand... now your code has the following sequence: the manager creates a request, invokes its method `exec()`, where the request refers to the some manager instance via `manager::instance()`, that in the general case can be another instance (not the one created this request).",0,0,0,0.9684619307518004,0.9558424353599548,0.9510003924369812,0.0,accept,unanimous_agreement
66708667,3810,"i still can't understand you. no matter what could be a way to get the manager instance, whether via explicit singleton pattern implementation, or via an implicit one, the `request` class can get an access to it. the only significant difference arises if we want to select a notification ""sink"" while creating notification request. but it would be better to use a sink id (or name) but not address the sink object directly. and this id → object instance mapping should then take place inside of the `request` class. as such, i see no reason to change its api. should we add different sinks, for sure there will be the default one, and thus `request(). ... .exec()` suits that use-case. it is likely that this will change. what is important that the an api has to map on the subject area. do you think that `request` api (with above mentioned remarks) does not represent the notifications workflow?",0,0,0,0.8832422494888306,0.9557439088821412,0.9139263033866882,0.0,accept,unanimous_agreement
67292463,3810,"don't forget ""code reusing"". use `arenotificationsenabled()` here.",0,0,0,0.983015477657318,0.9919764399528505,0.994371771812439,0.0,accept,unanimous_agreement
67303231,3810,"oh, that's great!.. mainwindow owns searchengine. moreover, it still creates searchengine instance regardless of whether you need it or not. it is really a good design decision! you love optimisation so much. somehow i don't see it here. p.s. sorry for my sarcasm.",1,1,1,0.9833104610443116,0.8623226284980774,0.9935141801834106,1.0,accept,unanimous_agreement
67313304,3810,"to immediately prevent unnecessary questions and objections, i'll tell you that i even understand why you did it: you need to connect to its (searchengine) signals. there are (generally) two options: have a permanent instance (as you did) or to track its creation in any way (this is not possible in the current design). but the problem here is different. when the current design has weaknesses preventing implement some feature correctly, we can choose one of two things: either fix the design or further degrade it. unfortunately, you chose the latter.",0,0,0,0.8313404321670532,0.9578693509101868,0.5998772382736206,0.0,accept,unanimous_agreement
67324337,3810,this frustrates me too. but i think that mentioned earlier intent ti get notification handlers out of the manager classes will solve this problem.,-1,-1,-1,0.970515251159668,0.6550626754760742,0.9865482449531556,-1.0,accept,unanimous_agreement
67331733,3810,"finally i checked the entire pr. and i found the cause of my discontent. here is the place! but i still thought, why are you doing these cross-dependencies between the manager and request? why is this method needed? (i mean `request::exec()`) here you made a mistake of not implementing all this using the ""observer"" pattern (as we decided before). but why? probably for the same reason you did another degradation i've noticed (i mean, searchengine in mainwindow). this leads me to believe that we have to solve such problems in a different way. and in this case it's easier than you may think about. mainwindow owns the searchwidget and this is normal relationship. to follow observer pattern notificationsmanager should recognize when the searchwidget is created and connect to its signals (and to searchengine signals too; searchwidget can own searchengine as it was before and it can have `searchwidget::searchengine()` property). how to do this? it's very simple. you just have to emit `mainwindow::searchwidgetcreated()` signal.",-1,-1,-1,0.9670960903167723,0.6517425775527954,0.7221997380256653,-1.0,accept,unanimous_agreement
67338409,3810,i forgot to add that there should also be some signal connected to the notifications manager here.,0,0,0,0.9748827815055848,0.9876554608345032,0.8133398294448853,0.0,accept,unanimous_agreement
67362428,3810,"the invocation of the notification here is direct because this notification has to be shown unconditionally. as you may see, all notifications, supplied via `notifications::manager::supportednotifications()` may be disabled by user. i did not want to complicate that code by adding an option to suppress disabling the notification.",0,0,0,0.962091863155365,0.9899189472198486,0.9918228983879088,0.0,accept,unanimous_agreement
67367589,3810,"unfortunately, we will not be able to have a productive dialogue while you're not going to be critical to your code.",-1,-1,-1,0.8950220942497253,0.9538691639900208,0.963556706905365,-1.0,accept,unanimous_agreement
67382752,3810,"we have both conditionally and unconditionally showed notifications in subject domain so model must reflect this circumstance but not to hide it by using some backdoors and breaking selected design pattern. your code is complicated now. but you don't want to see this, considering it excellent. if your model will fit the subject domain and you won't ""break"" the use of a single pattern in its implementation you will get rid of many unnecessary things and dependencies.",0,0,0,0.8060683012008667,0.848061740398407,0.55406254529953,0.0,accept,unanimous_agreement
67388312,3810,:d how could you know?,1,0,0,0.8191786408424377,0.9425770044326782,0.7241644859313965,0.0,accept,majority_agreement
67391230,3810,"elementary, my dear watson! ;)",1,1,1,0.9920156002044678,0.9953187108039856,0.9958414435386658,1.0,accept,unanimous_agreement
406103025,12458,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
406103193,12458,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
406104182,12458,"please use ""message"" instead of ""msg"" whenever possible.",0,0,0,0.9776395559310912,0.9925766587257384,0.9881960153579712,0.0,accept,unanimous_agreement
406106587,12458,seems you don't need fields for views.,0,0,0,0.9809666872024536,0.9839954972267152,0.9870771169662476,0.0,accept,unanimous_agreement
406115287,12458,"if i understand it correctly, by that logic i don't need to store logmessagemodel and logpeermodel as well, so i removed them as well",0,0,0,0.9846829771995544,0.9569881558418274,0.9901633858680724,0.0,accept,unanimous_agreement
406116456,12458,i think i need to put the braces in the new line. done.,0,0,0,0.9776561856269836,0.9549430012702942,0.9889940619468688,0.0,accept,unanimous_agreement
406116502,12458,i think i need to put the braces in the new line. done.,0,0,0,0.9776561856269836,0.9549430012702942,0.9889940619468688,0.0,accept,unanimous_agreement
406117368,12458,"changed the member function of `executionlogwidget`, do i need to change the member function of `mainwindow` as well (`mainwindow::setexecutionlogmsgtypes` and `mainwindow::executionlogmsgtypes` )",0,0,0,0.989477038383484,0.995064914226532,0.9948282837867736,0.0,accept,unanimous_agreement
406136030,12458,adding 1 otherwise selected item's text will be too close to focus rect [a link],0,0,0,0.9823071360588074,0.9825764894485474,0.9886793494224548,0.0,accept,unanimous_agreement
406139504,12458,i don't insist that you change anything except the ones you touch anyway.,0,0,0,0.8251648545265198,0.8429110646247864,0.8867067098617554,0.0,accept,unanimous_agreement
406159527,12458,you already included this header in executionlogwidget.h so you don't need it here.,0,0,0,0.977614402770996,0.9921958446502686,0.9951130747795104,0.0,accept,unanimous_agreement
406159891,12458,"it would be nice to also switch the parameters order: `executionlogwidget(log::msgtypes types, qwidget *parent);`",0,0,0,0.9619190096855164,0.9937585592269896,0.9909653663635254,0.0,accept,unanimous_agreement
406162845,12458,`static` is now redundant.,0,0,0,0.9635551571846008,0.9597680568695068,0.990932822227478,0.0,accept,unanimous_agreement
406164561,12458,"nitpick, please trim the whitespaces before the comment mark a bit..",0,0,0,0.9875281453132628,0.9605626463890076,0.9930455088615416,0.0,accept,unanimous_agreement
406165156,12458,this function can be `private` isn't?,0,0,0,0.9867204427719116,0.989575207233429,0.993130385875702,0.0,accept,unanimous_agreement
406165601,12458,i would extract the qstring into a variable to avoid this line becoming too long.,0,0,0,0.982527792453766,0.9820467233657836,0.991068959236145,0.0,accept,unanimous_agreement
406168895,12458,"this is not good enough, you should use circular buffer (same one from logger) as suggested before.",0,0,0,0.8239942193031311,0.847956657409668,0.9644894003868104,0.0,accept,unanimous_agreement
406172242,12458,use signed integer here.,0,0,0,0.9877190589904784,0.9899829030036926,0.9940589666366576,0.0,accept,unanimous_agreement
406173834,12458,"i think you should omit using move semantics to keep the code base consistent, qt data types use qt implicit sharing anyway.",0,0,0,0.9842312932014464,0.9897567629814148,0.9837708473205566,0.0,accept,unanimous_agreement
406174363,12458,and the parameter will become a const reference.,0,0,0,0.987554371356964,0.987859308719635,0.9956045150756836,0.0,accept,unanimous_agreement
406176387,12458,you should use the proper type for each field instead.,0,0,0,0.9863981604576112,0.9883962869644164,0.995050013065338,0.0,accept,unanimous_agreement
406183695,12458,doesn't that'll cause too much conversion in `baselogmodel::data` function,0,0,0,0.9727603793144226,0.9631955623626708,0.9873844385147096,0.0,accept,unanimous_agreement
406190049,12458,maybe we can stick to qt data types that are easily convertible to qvariant? [code block],0,0,0,0.9881489872932434,0.99527907371521,0.9916182160377502,0.0,accept,unanimous_agreement
406216681,12458,"boost::circular_buffer causing crash ![a link] can't seem to understand why, this happens at end i.e closing the main window, std::deque works fine.",0,0,-1,0.6464548707008362,0.7647721171379089,0.7690388560295105,0.0,accept,majority_agreement
406224584,12458,you should at least trace it to realize what code point couses the crash.,0,0,0,0.9783869981765748,0.9802573323249816,0.9876074194908142,0.0,accept,unanimous_agreement
406227183,12458,"i think qvariant does dynamic memory allocation and make copies, breaking implicit sharing for original data, i call it many times during painting and for sizehint as well, but i don't have any problem in changing if you insist.",0,0,0,0.9468087553977966,0.9577160477638244,0.967467486858368,0.0,accept,unanimous_agreement
406229989,12458,"removed seems like `base/global.h` was not needed too, removed as well.",0,0,0,0.9858571290969848,0.9948022365570068,0.992395043373108,0.0,accept,unanimous_agreement
406230074,12458,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
406230138,12458,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
406230233,12458,done?,0,0,0,0.9820621609687804,0.9815027713775636,0.9878233671188354,0.0,accept,unanimous_agreement
406230585,12458,"made private, turns out both paint and sizehint can be private.",0,0,0,0.9870184063911438,0.9906126260757446,0.9910236597061156,0.0,accept,unanimous_agreement
406232306,12458,"done,",0,0,0,0.975543737411499,0.7791813015937805,0.9896152019500732,0.0,accept,unanimous_agreement
406234411,12458,"i did trace it, it was here [a link] i spent an hour on this, only after that i posted here.",0,0,0,0.9809486865997314,0.9741863012313844,0.9927099943161012,0.0,accept,unanimous_agreement
406235153,12458,"please don't answer on each comment unless you really have to say something more meaningful than ""done"", ""removed"", ""fixed"" etc... you're clogging up this thread and our mailboxes.",-1,-1,-1,0.5593564510345459,0.6020707488059998,0.9525494575500488,-1.0,accept,unanimous_agreement
406238260,12458,"sorry, will not do anymore. :smiling_face_with_smiling_eyes:",-1,-1,-1,0.9890183210372924,0.990744650363922,0.9580711126327516,-1.0,accept,unanimous_agreement
406238690,12458,"also, please do not push the slightest changes to the github. when you do this every few minutes, travisci goes crazy! this also clogs our mailboxes with useless notifications.",-1,-1,-1,0.9832257628440856,0.9708885550498962,0.983995258808136,-1.0,accept,unanimous_agreement
406242831,12458,i suppose it's due to incorrect order of class destructions. first views should be destroyed and then models they use.,0,0,0,0.9480084180831908,0.9469274878501892,0.9542750120162964,0.0,accept,unanimous_agreement
406250220,12458,"aren't you able to achieve more depth? try setting breakpoints in your class destructors and see what happens, in what order they are removed, and how they interact with each other.",0,0,0,0.9659457206726074,0.985990822315216,0.9824480414390564,0.0,accept,unanimous_agreement
406251347,12458,hmm changing peer model and peer view initialization order seems to fixed it thanks.,1,1,1,0.6878176331520081,0.7693840861320496,0.6801019310951233,1.0,accept,unanimous_agreement
406265984,12458,"i've pushed changes with buffer implementation, i tested with setting max_log_messages=20 and other small values.",0,0,0,0.9848662614822388,0.986817181110382,0.9942067861557008,0.0,accept,unanimous_agreement
406279908,12458,"actually the real reason of crash was that i left some std::move calls, sorry for troubling you guys.",-1,-1,-1,0.9893607497215272,0.9850371479988098,0.9871679544448853,-1.0,accept,unanimous_agreement
406380152,12458,sep**a**rator,0,0,0,0.9559622406959534,0.8568222522735596,0.9857844710350036,0.0,accept,unanimous_agreement
406382560,12458,shouldn't you save pen just before this line?,0,0,0,0.9483565092086792,0.99096417427063,0.9919929504394532,0.0,accept,unanimous_agreement
406388282,12458,is it intentional behavior? what reason it does for?,0,0,0,0.7608924508094788,0.8893859386444092,0.9844520092010498,0.0,accept,unanimous_agreement
406393426,12458,i would have separator inside format string to avoid yet another argument insertion. ?,0,0,0,0.9882469773292542,0.9902693033218384,0.9891531467437744,0.0,accept,unanimous_agreement
406395430,12458,how about having less message count to be displayed and not follow logger limit? ?,0,0,0,0.9761770963668824,0.9414920806884766,0.9879156351089478,0.0,accept,unanimous_agreement
406395909,12458,messageindex,0,0,0,0.9883246421813964,0.9709591269493104,0.9860208630561828,0.0,accept,unanimous_agreement
406397828,12458,"index cannot be greater or equal to messages count due to expression above, isn't it?",0,0,0,0.9787846207618712,0.990871012210846,0.9905933737754822,0.0,accept,unanimous_agreement
406399989,12458,why do you use queuedconnection?,0,0,0,0.9792813062667848,0.9876915812492372,0.9935923218727112,0.0,accept,unanimous_agreement
406401599,12458,format string looks ugly.,-1,-1,-1,0.9815011024475098,0.9896180033683776,0.9920963048934937,-1.0,accept,unanimous_agreement
406403357,12458,explicit and i would preserve default value for parameter as qobject has it.,0,0,0,0.9888737201690674,0.989875078201294,0.9892577528953552,0.0,accept,unanimous_agreement
406404625,12458,"do you really need it to be declared as slot? if no, you even can omit q_object.",0,0,0,0.9843313097953796,0.9925172328948976,0.9941007494926452,0.0,accept,unanimous_agreement
406405830,12458,i don't see any strong reason to store it differently. qvariant is good choice for its job.,0,1,1,0.8553348779678345,0.6512405872344971,0.9272281527519226,1.0,accept,majority_agreement
406406701,12458,broken coding style (ampersand position).,0,0,0,0.740263819694519,0.8108482360839844,0.9939631819725036,0.0,accept,unanimous_agreement
406407672,12458,don't forget to add q_disable_copy to all qobject subclasses.,0,0,0,0.9827678799629213,0.9934664368629456,0.9938783049583436,0.0,accept,unanimous_agreement
406410850,12458,"seems you can extract ""build display text"" logic into function to avoid code duplication.",0,0,0,0.9875160455703736,0.9866181015968324,0.99033522605896,0.0,accept,unanimous_agreement
406412086,12458,"for the peer model we paint with default font color, i already changed the pen to `originalpen` for the painting of separator so when this condition fails the following message will be painted with the default font color. i think i should change it to // peermodel **will** give invalid foreground role",0,0,0,0.9862073659896852,0.9651069045066832,0.9903744459152222,0.0,accept,unanimous_agreement
406414024,12458,"the `newlogmessage` is emitted from `addmessage` which can be called from different threads, so i guess this way we don't need any synchronization.",0,0,0,0.9854965806007384,0.9913259148597716,0.9929903745651244,0.0,accept,unanimous_agreement
406417265,12458,i was told to do this way [a link],0,0,0,0.9709620475769044,0.9730603098869324,0.9930041432380676,0.0,accept,unanimous_agreement
406420574,12458,unfortunately the link above doesn't work for me...,-1,-1,-1,0.9669311046600342,0.9662802219390868,0.9408833980560304,-1.0,accept,unanimous_agreement
406423156,12458,"it works, anyway ![a link]",0,0,1,0.6579715609550476,0.562822699546814,0.9908955693244934,0.0,accept,majority_agreement
406426236,12458,ok it seems originally we paint peer messages with red color will change it accordingly,0,0,0,0.9831317663192748,0.9825779795646667,0.9894844889640808,0.0,accept,unanimous_agreement
406477772,12458,![a link],0,0,1,0.9475814700126648,0.9432068467140198,0.5592244863510132,0.0,accept,majority_agreement
406607563,12458,it would be nice to add some comment in code.,0,0,0,0.9068182110786438,0.9753795266151428,0.9714881777763368,0.0,accept,unanimous_agreement
406607826,12458,why this again?,-1,0,0,0.5450851321220398,0.9140751957893372,0.5195562243461609,0.0,accept,majority_agreement
406608717,12458,i don't insist to store in non-qvariant types in this struct. however i think it is important to specify what types do we intend to store in qvariant. i think maybe add some comment in code about the types or even use `q_assert(qvariant::type() == some_type)` to check the correctness.,0,0,0,0.9821189641952516,0.98782479763031,0.9871451258659364,0.0,accept,unanimous_agreement
406609121,12458,wrong order.,-1,-1,-1,0.9440091848373412,0.5554730296134949,0.7645806670188904,-1.0,accept,unanimous_agreement
406609294,12458,some of those can be `private` right?,0,0,0,0.9874635934829712,0.9921531081199646,0.9909760355949402,0.0,accept,unanimous_agreement
406609809,12458,"i think this was done to support html formatting else where (in loglistwidget, which is removed in this pr), this is not needed anymore, if not removed here, had to do unescape in model or delegate, what do we prefer?",0,0,0,0.9871166348457336,0.9928858876228333,0.9913833141326904,0.0,accept,unanimous_agreement
406610014,12458,gui widgets should have its own display limit. also i would prefer larger (around 50000) if it doesn't drag the performance.,0,0,0,0.9753772020339966,0.9854771494865416,0.9832952618598938,0.0,accept,unanimous_agreement
406610246,12458,coding style.,0,0,0,0.9849669337272644,0.9589239358901978,0.9877970814704896,0.0,accept,unanimous_agreement
406610820,12458,maybe change `const qpen originalpen` to `qpen coloredpen` and you can reuse it.,0,0,0,0.9859346151351928,0.9938964247703552,0.9885077476501464,0.0,accept,unanimous_agreement
406611238,12458,"now i think `qstyleditemdelegate::paint` should preserve the `painter` state (adhere to their own spec), so maybe we can swap it: [code block]",0,0,0,0.9835524559020996,0.9921575784683228,0.991329550743103,0.0,accept,unanimous_agreement
406611707,12458,"seems this doesn't need to be in class, it should be moved to anonymous namespace.",0,0,0,0.9853942394256592,0.9937068819999696,0.9899765849113464,0.0,accept,unanimous_agreement
406612012,12458,seems you don't really need to capture `this` into lambda.,0,0,0,0.9806035161018372,0.9844607710838318,0.9873806238174438,0.0,accept,unanimous_agreement
406612100,12458,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
406612462,12458,i *suspect* this isn't needed...,0,-1,0,0.717212975025177,0.5623074173927307,0.9825786352157592,0.0,accept,majority_agreement
406613134,12458,we need originalpen to paint separator,0,0,0,0.9837397933006288,0.9838449358940125,0.9934076070785522,0.0,accept,unanimous_agreement
406613369,12458,"it was made to avoid some attacks. iirc calling `tohtmlescaped()` here would mess up the saved log.txt right? if so, it is not preferable, we should not do that ~~and escape it at model.~~",0,0,0,0.9813581109046936,0.959717333316803,0.9878249168395996,0.0,accept,unanimous_agreement
406614185,12458,"this internally calls tr, and i was once asked to only call tr of concerned class not qobject::tr directly, otherwise my first thought was to make it free function as well.",0,0,0,0.973922610282898,0.9790034890174866,0.9922730326652528,0.0,accept,unanimous_agreement
406617749,12458,qobject::tr in free functuon is bad since it doesn't produce any meaningful context.,-1,-1,-1,0.974133551120758,0.9723082780838012,0.9620282053947448,-1.0,accept,unanimous_agreement
406618002,12458,isn't it supposed to be accessed from outside of the class?,0,0,0,0.9813641905784608,0.9861292243003844,0.9849902987480164,0.0,accept,unanimous_agreement
406618302,12458,"ok, forget it.",0,0,0,0.7091974020004272,0.9768239855766296,0.9293199777603148,0.0,accept,unanimous_agreement
406618477,12458,"sorry, i can't clearly understand what you're talking about... imo, it's incorrect to escape here.",-1,-1,-1,0.989701509475708,0.9927380681037904,0.992354154586792,-1.0,accept,unanimous_agreement
406619390,12458,maybe it would be better to make it configurable? anyway the good first step is just declare another const for gui stuff (even if it has the same value initially).,0,0,0,0.9626805782318116,0.9863759875297546,0.9826636910438538,0.0,accept,unanimous_agreement
406619812,12458,if you don't need to store original/default pen then maybe you don't need any additional variable?,0,0,0,0.9859267473220824,0.9904140830039978,0.9920143485069276,0.0,accept,unanimous_agreement
406620549,12458,"i would make it to be ""read only"" class that accept specific types in its constructor and store them as qvariant (getters are also of type qvariant).",0,0,0,0.9891557097434998,0.9918836355209352,0.992589831352234,0.0,accept,unanimous_agreement
406621679,12458,at least you can try to test it without this line.,0,0,0,0.9792842864990234,0.9896732568740844,0.983981430530548,0.0,accept,unanimous_agreement
406621737,12458,maybe in a later pr to avoid delaying this one... agreed.,0,0,0,0.96329265832901,0.978604793548584,0.9726601243019104,0.0,accept,unanimous_agreement
406622113,12458,but theoretically it should be here. otherwise rowcount() still returns incorrect value after you notify about removed row.,0,0,0,0.9807778000831604,0.9673685431480408,0.9877726435661316,0.0,accept,unanimous_agreement
406623430,12458,where should i have to add assert? one thing is that delegate assume the type of role provided by baselogmodel so maybe baselogmodel should be responsible as well. thus we need asserts in 'baselogmodel::addnewmessage',0,0,0,0.9843571782112122,0.9935877323150636,0.993198037147522,0.0,accept,unanimous_agreement
406625622,12458,"use my proposal is more reliable, imo. you'll get something like ""aggregate variant"". it will perform type checking at compile time.",0,0,0,0.8721036314964294,0.8695763945579529,0.9806296229362488,0.0,accept,unanimous_agreement
406631129,12458,i need originalpen to paint separator,0,0,0,0.984050452709198,0.9686292409896852,0.991954267024994,0.0,accept,unanimous_agreement
406631149,12458,"i just noticed the comment above, never mind here.",0,0,0,0.9234668016433716,0.918161392211914,0.9122900366783142,0.0,accept,unanimous_agreement
406632332,12458,what should be the const name? can't think of one. max_gui_log_messages?,0,0,0,0.985547423362732,0.98736971616745,0.9846047759056092,0.0,accept,unanimous_agreement
406637088,12458,disregard my comment.,-1,0,-1,0.9269578456878662,0.7053802609443665,0.7266855239868164,-1.0,accept,majority_agreement
406642384,12458,"i changed it to what it was originally in `executionlogwidget`, but don't know what to do further.",0,0,0,0.6405534148216248,0.9058935642242432,0.7011159658432007,0.0,accept,unanimous_agreement
406642945,12458,should i remove these changes and unescape at model or leave the changes?,0,0,0,0.97606360912323,0.9926262497901917,0.9915810227394104,0.0,accept,unanimous_agreement
406651086,12458,keep the the current changes. no need to make further changes.,0,0,0,0.9701180458068848,0.9872434735298156,0.9915786981582642,0.0,accept,unanimous_agreement
406652474,12458,max_visible_messages? also seems logger constant should be private.,0,0,0,0.9891703724861144,0.9922427535057068,0.992873191833496,0.0,accept,unanimous_agreement
406652989,12458,you should keep your changes here.,0,0,0,0.9808347821235656,0.9753457903862,0.9942818880081176,0.0,accept,unanimous_agreement
406654623,12458,why not store messages in the same order as they're displayed?,0,0,0,0.9734241366386414,0.972812294960022,0.9856025576591492,0.0,accept,unanimous_agreement
406656969,12458,"why not move it to anonymous namespace? ""private const"" seems to be useless unless it's initialized in class constructor. ""static private const"" seems to be useless completely. or am i wrong?",0,0,0,0.6267308592796326,0.8328521251678467,0.9833874702453612,0.0,accept,unanimous_agreement
406657970,12458,it means that fields should be private and have public getters to be sure they're still assigned using constructor.,0,0,0,0.9865374565124512,0.9927968382835388,0.9927718043327332,0.0,accept,unanimous_agreement
406675763,12458,"i would only use `constexpr` when you really need something complex to eval it at compile time, here `const` would be enough. and it should not be related to `max_log_messages`. give it a number.",0,0,0,0.987224578857422,0.9885868430137634,0.9920297861099244,0.0,accept,unanimous_agreement
406676279,12458,it should not have any default values.,0,0,0,0.9448298811912536,0.9763485193252563,0.984950065612793,0.0,accept,unanimous_agreement
406676697,12458,seems every one of them can be `const`,0,0,0,0.9832315444946288,0.989372193813324,0.9874945282936096,0.0,accept,unanimous_agreement
406676857,12458,"all of the parameters should take const references except the last one, last one should be the original type instead of qvariant.",0,0,0,0.987176477909088,0.9916352033615112,0.9952050447463988,0.0,accept,unanimous_agreement
406680157,12458,"i tried, circular buffer needs operator=",0,0,0,0.986079752445221,0.8158472776412964,0.9943517446517944,0.0,accept,unanimous_agreement
406681993,12458,"thanks, never mind then.",1,1,1,0.5280235409736633,0.9127973914146424,0.778529703617096,1.0,accept,unanimous_agreement
406684421,12458,suspicious...,-1,-1,-1,0.9509441256523132,0.9686457514762878,0.9173591136932372,-1.0,accept,unanimous_agreement
406734821,12458,"why didn't you make a specific name for this one (and all its stuff)? why not ""messagetyperole""?",0,0,0,0.9486481547355652,0.9770994782447816,0.9671101570129396,0.0,accept,unanimous_agreement
406735209,12458,"also the class members have inconsistent names. some of them have ""role"" suffix and the rest has no one.",0,0,0,0.9228840470314026,0.9551898241043092,0.8968300819396973,0.0,accept,unanimous_agreement
406735617,12458,please reformat this comment. the first line is too long while the secnd one is short.,0,0,0,0.9807317852973938,0.8657733798027039,0.9617681503295898,0.0,accept,unanimous_agreement
406737859,12458,really signal receiver should know nothing about emitter internals! you should use `qt::queuedconnection` directly only in case you want `queuedconnection` explicitly for some reason. in this case you can safetely use default `qt::autoconnection`. doc says about it: anyway you should remove the comment above because it creates the false impression that we have an incorrect application design.,0,0,-1,0.5208737254142761,0.9362094402313232,0.8682576417922974,0.0,accept,majority_agreement
406738194,12458,seems it isn't in use.,0,0,0,0.801794707775116,0.9382769465446472,0.9466372728347778,0.0,accept,unanimous_agreement
406738816,12458,"""log"" is incorrect name for this parameter. i would call it ""message"" and rename the next one to ""messagetext"".",0,0,0,0.9300165772438048,0.985942840576172,0.9709678888320924,0.0,accept,unanimous_agreement
406739455,12458,"format should be either ""%1 was blocked due to %2"" or ""%1 was blocked. reason: %2"".",0,0,0,0.9749345779418944,0.9884214401245116,0.9912242889404296,0.0,accept,unanimous_agreement
406744910,12458,`asconst` is used in constructors of logmessagemodel and logpeermodel.,0,0,0,0.9880605936050416,0.9940608143806458,0.9941381216049194,0.0,accept,unanimous_agreement
406767323,12458,"i removed suffixes from message class, this should make the class independent from ""role"" handling, i replaced ""datarole"" with ""messagetyperole"", which includes different values for type and foreground in addition to message and time. i included the foreground role in the enum as well since qstyleditemdelegate::paint shouldn't paint anything related to the foreground. typerole enum constant provides better information about the type of data as compared to the previously used value of qt::userrole, one side effect of that was that had to include `logmodel.h` in `logfiltermodel.cpp`, but that shouldn't be a problem since there is a clear dependency between these two classes.",0,0,0,0.9762632250785828,0.9939354062080384,0.987673819065094,0.0,accept,unanimous_agreement
406787735,12458,"oops... unfortunately, i didn't pay enough attention to this earlier. as a result, we got an incorrect dependency here. the model should not depend on any particular view/delegate. it must always return view-independent data at least for mandatory qdisplayrole (so that any view can display its data at least in simplified text format). you can, of course, object that we will never use this model with any other views, but this is an incorrect reason. there is also no point in using a custom foreground role. ""i included the foreground role in the enum as well since qstyleditemdelegate::paint shouldn't paint anything related to the foreground"" is an incorrect judgment. if you don't return qt::foregroundrole it just uses default value. if you want to prevent qstyleditemdelegate::paint from painting text you should clear text in passed parameters.",-1,-1,-1,0.9716987013816832,0.8838155269622803,0.9728543758392334,-1.0,accept,unanimous_agreement
406792581,12458,"by the way, we could give the user the option to select a simplified log view (just not using a custom delegate). this might improve performance a bit, right?",0,0,0,0.972736120223999,0.988206684589386,0.9871428608894348,0.0,accept,unanimous_agreement
406793863,12458,"that's the reason i'm not using displayrole, even returning for qt::foregroundrole will not do anything since displayrole is null and the foreground role we return does only make sense with our message. i can't return valid value for displayrole, since then qstyleditemdelegate will paint it with foreground, i want `qstyleditemdelegate` to only paint background since painting those myself was a headache and you guys would really not accept that code. if we were to return a full string with displayrole(time + message), it will be a useless effort to separate them. i don't understand this logic. probably i'm inexperience, but you yourself said, that ""model should prepare data and delegate should do the painting accordingly"" the whole purpose of the model is to store and provide data in ""convenience form"", i think you're trying to remove the dependency between model and delegate, but i don't think it is possible, they are made and build for each other(xd)",-1,-1,-1,0.8811253905296326,0.9382640719413756,0.7334527969360352,-1.0,accept,unanimous_agreement
406798490,12458,"i don't see any performance improvement with that, the only extra work we do is to paint part of a string separately, that doesn't involve any performance heavy calculation or something on that line.",0,0,0,0.9395416378974916,0.9405284523963928,0.9624047875404358,0.0,accept,unanimous_agreement
406801251,12458,"i think you're trying to remove the dependency between model and delegate well, it seems we have a misunderstanding of how qt model/view is supposed to work (ideally). it's time to make it clear (for me as well). i will try to do this when i find myself near something more convenient to comment on than my smartphone.",0,0,0,0.8592061996459961,0.6883010268211365,0.8504552245140076,0.0,accept,unanimous_agreement
406810713,12458,"imho, i think you want to have model return valid values for foregroundrole and displayrole, but this will just create unnecessary work, first, we will need to separate message and time. second, i want to use `qstyleitemdelegate::paint` but can't find a way to modify or create a new qmodelindex that fit our needs that is one without displayrole and foregroundrole, the second one is the biggest blocker and if we had to not use qstyleitemdelegate::paint, that'll just create unnecessary code which may or may not work everywhere. for the record, i tried `qstyle::ce_itemviewitem` it doesn't paint selection rectangle for items under the mouse and also paint selected item, wth too dark color opinions?",0,0,0,0.9109072089195251,0.8509370684623718,0.5446119904518127,0.0,accept,unanimous_agreement
406819979,12458,"guys, relax, so as not to imitate you, i will not insist on further improving the model/view architecture in this pr. in reality, we don't have a completely perfect implementation anywhere in the code. and it seems that this is not even always possible.",-1,-1,0,0.7513135671615601,0.6782093644142151,0.6699821352958679,-1.0,accept,majority_agreement
407019717,12458,"well, so why not save original pen immediately before you change it?",0,0,0,0.9820712208747864,0.98551207780838,0.9912257790565492,0.0,accept,unanimous_agreement
407030817,12458,afaik this automatic detection will only work when we use `qthread`,0,0,0,0.9897125959396362,0.9923490285873412,0.991357684135437,0.0,accept,unanimous_agreement
407317665,12458,"seems this is not the same gray, could you preserve the old value? it was `grey` before.",0,0,0,0.9821465611457824,0.9805766940116882,0.9910492897033693,0.0,accept,unanimous_agreement
407324826,12458,please try `qt::darkgray`.,0,0,0,0.9754628539085388,0.9920761585235596,0.9943576455116272,0.0,accept,unanimous_agreement
407330729,12458,omit `qsize` here: `return {...};`,0,0,0,0.9863018989562988,0.9937134385108948,0.9935585856437684,0.0,accept,unanimous_agreement
407330832,12458,too long.. use a variable for it. and add parentheses at proper places.,0,0,0,0.8994275331497192,0.7161838412284851,0.9821502566337584,0.0,accept,unanimous_agreement
408589969,12458,"`qsize(4, 4)` where does it come from? please add comment to code.",0,0,0,0.9884153604507446,0.9939832091331482,0.995153307914734,0.0,accept,unanimous_agreement
408590304,12458,"`const qsize margins = (defaultsize - fontsize).expandedto({0, 0});`",0,0,0,0.9844614863395692,0.9939438700675964,0.991248607635498,0.0,accept,unanimous_agreement
408591867,12458,"this sounds better to me: ""... else painter ..."" -> ""... otherwise painter ...""",-1,0,0,0.5426854491233826,0.8396936058998108,0.9494887590408324,0.0,accept,majority_agreement
408593803,12458,"this should be equivalent `painter->setfont(option.font);`, could you please test it again?",0,0,0,0.9797074794769288,0.9950143694877625,0.9955400824546814,0.0,accept,unanimous_agreement
408595926,12458,"seems the variable is badly named, i would use `separatorwidth`",0,0,0,0.931792676448822,0.8337944149971008,0.6651043891906738,0.0,accept,unanimous_agreement
408595950,12458,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
408598074,12458,"it is ""separatorleft"", and following one is ""messageleft""",0,0,0,0.9876323938369752,0.9922037124633788,0.9951280355453492,0.0,accept,unanimous_agreement
408599330,12458,"hmm... i see what you mean. but ""left"" isn't a meaningful thing, it is actually a coordinate.",0,-1,0,0.8989572525024414,0.742766797542572,0.939996302127838,0.0,accept,majority_agreement
408599556,12458,maybe `separatorcoordinatex`?,0,0,0,0.9867727160453796,0.9931609630584716,0.993892788887024,0.0,accept,unanimous_agreement
408614581,12458,"![a link] 175% scaling, as you can see the font size is not set correctly here if we were to use `painter->setfont(option.font);` , i can't find the reason though.",0,0,0,0.8776279091835022,0.90852153301239,0.9071469902992249,0.0,accept,unanimous_agreement
408819891,12458,why the `static`? it can be removed imo.,0,0,0,0.9850754737854004,0.9880118370056152,0.9905880689620972,0.0,accept,unanimous_agreement
408964013,12458,or declare it in anonymous namespace above...,0,0,0,0.9828458428382874,0.9925060868263244,0.9960145950317384,0.0,accept,unanimous_agreement
409263110,12458,"it still seems weird... if copy constructor doesn't produce the same ""value"" there is bug in it.",-1,-1,-1,0.985636591911316,0.9863878488540648,0.9848403334617616,-1.0,accept,unanimous_agreement
409266927,12458,"i couldn't get if i was doing something fishy, everything is const, so i don't think i can do anything here then i tried checking qt sources for qfont but they are using private impl so i didn't try to further delve into it.",0,-1,0,0.5202693343162537,0.6111456155776978,0.9793162941932678,0.0,accept,majority_agreement
409278995,12458,"i tried sanitizer, both master and this branch seems to be throwing same warnings (there were quite a number of warnings especially with thread sanitizer)",0,0,0,0.9765595197677612,0.9825586080551147,0.9853631258010864,0.0,accept,unanimous_agreement
409548871,12458,i wonder how qstyleditemdelegate draws the text?,0,0,0,0.7227767705917358,0.9619650840759276,0.9760595560073853,0.0,accept,unanimous_agreement
409551968,12458,but it's most likely a problem with qfont since an action that shouldn't have any effect still has it. just for fun... can you test the following? [code block],0,0,0,0.7739872336387634,0.5467665195465088,0.9825145602226256,0.0,accept,unanimous_agreement
409574322,12458,hmm it works scalling 150% ![a link] `q_assert(font.pointsize() != option.font.pointsize());` fails,-1,0,0,0.7089138031005859,0.9541380405426024,0.9450305104255676,0.0,accept,majority_agreement
58292381,4994,qvariantlist?,0,0,0,0.9857511520385742,0.9877344965934752,0.9926846027374268,0.0,accept,unanimous_agreement
58292391,4994,use camelcase since you fixing coding style.,0,0,0,0.9874204993247986,0.991535186767578,0.9938679337501526,0.0,accept,unanimous_agreement
58292425,4994,fix coding style! method definitions aren't allowed in header files.,0,-1,1,0.9712807536125184,0.5146878957748413,0.5539246797561646,,review,no_majority_disagreement
58292468,4994,fix these two enums. split into several lines.,0,0,0,0.982914388179779,0.9464723467826844,0.9920456409454346,0.0,accept,unanimous_agreement
58292480,4994,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
58292489,4994,dont forget to insert spaces around `=`.,0,0,0,0.972783625125885,0.9886375069618224,0.9906936287879944,0.0,accept,unanimous_agreement
58292495,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292501,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292519,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292541,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292552,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292561,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292574,4994,fix coding style! and in method body too.,0,0,1,0.8601725101470947,0.965260922908783,0.8544946312904358,0.0,accept,majority_agreement
58292582,4994,add spaces around `<`.,0,0,0,0.9847055077552797,0.9884657859802246,0.9925965070724488,0.0,accept,unanimous_agreement
58292590,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292606,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292609,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292612,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292618,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292625,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292635,4994,"do you mean parameter names? please note, that this not my code.",0,0,0,0.971844494342804,0.9788161516189576,0.990888237953186,0.0,accept,unanimous_agreement
58292645,4994,fix coding style! add space before `}`.,0,0,0,0.9839365482330322,0.9795977473258972,0.9924121499061584,0.0,accept,unanimous_agreement
58292646,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292648,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292651,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292652,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292655,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292657,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292660,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292672,4994,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
58292675,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292676,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292685,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292687,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292688,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292697,4994,fix coding style! next getters affected too.,0,0,0,0.9737935066223145,0.9810398817062378,0.8420019745826721,0.0,accept,unanimous_agreement
58292725,4994,"although i didn't see the implementation, but only that component itself takes care of how it is used, speaks of a bad design.",-1,-1,-1,0.9274330735206604,0.8649055361747742,0.9561449885368348,-1.0,accept,unanimous_agreement
58292739,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292744,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292745,4994,"i don't want to be an author from the git point of view for the whole files which i touch. git can ignore whitespace changes and thus i fixed indentation, but not more. what is the point in changing code which is not related to a functional changes of a given commit? this just spoils git history and makes history navigation a nightmare.",-1,-1,-1,0.9601659774780272,0.9519315361976624,0.9930197596549988,-1.0,accept,unanimous_agreement
58292747,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292749,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292752,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292757,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292761,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292766,4994,"no, i don't do what you call a ""fixing the coding style"". see my comment above.",0,0,0,0.9034667015075684,0.7823280692100525,0.9798449277877808,0.0,accept,unanimous_agreement
58292771,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292789,4994,"if you do ""follow project coding style"", you must do it completely.",0,0,0,0.983630359172821,0.9912159442901612,0.9833834767341614,0.0,accept,unanimous_agreement
58292824,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292831,4994,fix coding style! use camelcase.,0,0,0,0.9729371666908264,0.8422085642814636,0.9666010737419128,0.0,accept,unanimous_agreement
58292834,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292853,4994,fix coding style! brace enclosed initializers are allowed in list or aggregate contexts only. not for copy constructors.,0,0,1,0.9845085144042968,0.9861380457878112,0.8674013614654541,0.0,accept,majority_agreement
58292865,4994,fix coding style! and below too.,0,0,0,0.9425308108329772,0.711745023727417,0.8635098338127136,0.0,accept,unanimous_agreement
58292882,4994,fix coding style!,0,0,0,0.962407648563385,0.5764842629432678,0.9650169610977172,0.0,accept,unanimous_agreement
58292918,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292942,4994,fix coding style! move private declarations after public.,0,0,0,0.9795554280281068,0.9639136791229248,0.865591824054718,0.0,accept,unanimous_agreement
58292958,4994,fix coding style! use camelcase. all method affected.,0,0,0,0.9761419892311096,0.9489303827285768,0.8338396549224854,0.0,accept,unanimous_agreement
58292963,4994,static_cast,0,0,0,0.9860274791717528,0.9603849053382874,0.9938228130340576,0.0,accept,unanimous_agreement
58292974,4994,what's wrong here?,-1,0,-1,0.8845149278640747,0.8659144043922424,0.6395795941352844,-1.0,accept,majority_agreement
58292975,4994,add space before comment,0,0,0,0.9852519035339355,0.984188199043274,0.992711305618286,0.0,accept,unanimous_agreement
58292979,4994,this code is not mine.,0,0,0,0.5988443493843079,0.8741890788078308,0.9356917142868042,0.0,accept,unanimous_agreement
58292981,4994,static_cast,0,0,0,0.9860274791717528,0.9603849053382874,0.9938228130340576,0.0,accept,unanimous_agreement
58293009,4994,fix coding style! we require extra parenthesis in constructor initialization list. and also fix spaces in `{}`: [code block],0,0,0,0.9537007808685304,0.8871130347251892,0.9111224412918092,0.0,accept,unanimous_agreement
58293013,4994,"ok, i'll replace the commit title with ""fix indentation""",0,0,0,0.9890578389167786,0.9877088069915771,0.994949221611023,0.0,accept,unanimous_agreement
58293037,4994,please separate module includes from system/qt includes and from app includes using blank lines.,0,0,0,0.9866327047348022,0.9914675951004028,0.993501842021942,0.0,accept,unanimous_agreement
58293051,4994,add spaces around `<`.,0,0,0,0.9847055077552797,0.9884657859802246,0.9925965070724488,0.0,accept,unanimous_agreement
58293066,4994,get rid of these **auto**s. we make only limited use of **auto** keyword. see coding_guidelines.md,0,0,0,0.9761787056922911,0.9928929209709167,0.993526577949524,0.0,accept,unanimous_agreement
58293070,4994,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
58293074,4994,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
58293094,4994,fix coding style. no braces with copy constructor.,0,0,0,0.9861939549446106,0.9885552525520324,0.9930857419967652,0.0,accept,unanimous_agreement
58293097,4994,fix coding style. blank line before access specifier.,0,0,0,0.9859281778335572,0.9901914596557616,0.9932501316070556,0.0,accept,unanimous_agreement
58293107,4994,fix coding style. add spaces around arithmetic operators.,0,0,0,0.987332046031952,0.983941376209259,0.9922762513160706,0.0,accept,unanimous_agreement
58293115,4994,no **auto** here!,0,0,0,0.9363760352134703,0.8569647073745728,0.981474757194519,0.0,accept,unanimous_agreement
58293122,4994,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
58293146,4994,don't use **auto** here.,0,0,0,0.5123867988586426,0.9314351081848145,0.9813477993011476,0.0,accept,unanimous_agreement
58293229,4994,i hope that you read my previous response and i don't have to write it for each such your excuses. if you do something - do it completely.,0,0,1,0.689339816570282,0.6740831732749939,0.553165078163147,0.0,accept,majority_agreement
58293293,4994,really? and i think that is what your code! i didn't see this earlier (in deleted lines).,0,0,0,0.9006637334823608,0.8437197804450989,0.8987613320350647,0.0,accept,unanimous_agreement
58293354,4994,"then don't touch it at all! let me repeat: if you produce ""follow coding style"" commit, you should completely fix coding style and not just indentation.",-1,0,0,0.6915138363838196,0.4091571271419525,0.7341549396514893,0.0,accept,majority_agreement
58293421,4994,see coding_guidelines.md. we just limit the use of brace enclosed initializers.,0,0,0,0.987130343914032,0.99355149269104,0.9950231313705444,0.0,accept,unanimous_agreement
58293465,4994,better not produce such commits at all. this greatly complicates the inspection of your code.,-1,-1,0,0.6797642707824707,0.803528368473053,0.7797635197639465,-1.0,accept,majority_agreement
58293594,4994,what do you want then? to spoil the git history (forever) for the sake of a review (one time job)?,0,0,0,0.8886132836341858,0.8170041441917419,0.7506838440895081,0.0,accept,unanimous_agreement
58293615,4994,i'm not allowed to use the strict type checking?,0,0,0,0.8430127501487732,0.7376328706741333,0.9399515390396118,0.0,accept,unanimous_agreement
58293702,4994,"i suppose you mean the `local` parameter. i agree that this is not the best idea, but otherwise i can imagine only solution with two virtual functions, which is overkill as to me. the parameter is used to compose the tooltip text and to replace "".unwanted"" parts in the file names (i don't know whether the latter is still needed). see [a link] and [a link]. can you suggest a better solution?",0,0,0,0.9608889818191528,0.9372696280479432,0.9683791995048524,0.0,accept,unanimous_agreement
58293708,4994,"what do you mean? just do `pieceindextoimagepos transform(m_torrent, m_image);`",0,0,0,0.9873998165130616,0.9929952025413512,0.995278000831604,0.0,accept,unanimous_agreement
58293774,4994,"fix the coding style is not to spoil the story. this is the same change as any other (for example, as adding a new feature or bugfix). so either do it or don't do it at all.",0,0,0,0.9143462777137756,0.9602808356285096,0.9698662757873536,0.0,accept,unanimous_agreement
58293804,4994,i mean that curly braces gives better type checking. for what reason do you ban it?,0,0,0,0.9256786108016968,0.6570925712585449,0.9844937920570374,0.0,accept,unanimous_agreement
58293966,4994,"better type checking? what do you mean? if you're going to start telling me about the templates and stuff, you can not do this. nobody forbids to use something where it is really needed. but in a simple code, it only spoils the readability.",-1,-1,0,0.5021312832832336,0.5635179281234741,0.8556167483329773,-1.0,accept,majority_agreement
58294736,4994,"speak for yourself, please. `{}` style initialisation does not allow. for instance, narrowing conversions.",0,0,0,0.9774135947227478,0.9834527373313904,0.9741746187210084,0.0,accept,unanimous_agreement
58295485,4994,"i'm talking about the project coding style. when i asked you to discuss this rule, you arrogantly refused. and how it can help you here and in all similar code? didn't you read my comments above? it can be applied where it is really needed.",-1,-1,-1,0.6558343768119812,0.6239034533500671,0.954319417476654,-1.0,accept,unanimous_agreement
58296117,4994,"as for `filepath.replace(qlatin1string(""/.unwanted""), qstring());` - it can be done unconditionally. as for the second case - this logic belongs to subclasses actually. bad design is more wrong than your subjective fear of virtual functions here.",-1,-1,-1,0.8041844367980957,0.8395773768424988,0.6772434115409851,-1.0,accept,unanimous_agreement
58296255,4994,you just need to make one abstract method `tooltiptext()` (and implement it in subclasses) and call it from `showtooltip()`.,0,0,0,0.9890657663345336,0.99347323179245,0.9942556023597716,0.0,accept,unanimous_agreement
58296710,4994,"ok, i'll make the virtual functions.",0,0,0,0.986850917339325,0.9831690788269044,0.993775486946106,0.0,accept,unanimous_agreement
58297831,4994,"look, i just asked do you ban this particular feature or not. it helps when used systematically without thinking/decision. in the same way as you switch on a blinker before any turn and before even looking into a mirror, which helps you only when you make a mistake and overlook somebody in the mirror. i don't care about coding style of a particular project i'm contributing too as far as the project provides a tool (or a tool config) to ensure/enforce that style. whatever the style is, the main difficulties in understanding the another person code is not the number of spaces or position of braces, but, provided the code is well-written, different way of thinking of its authors. and this is unavoidable in oss projects. as for the banning particular language features, i don't understand this entirely. if one thinks that a language feature is not needed, then, perhaps, there are languages which suit better? i'm sorry that my refusal can be interpreted as a haughtiness, but in fact it was quite the opposite: i feel that i can do nothing on this subject. starting from the fact that i'm in ultra-right tabs party, so will not like the qbt code style without changing it completely.",-1,-1,0,0.7825497984886169,0.5635815262794495,0.8676431179046631,-1.0,accept,majority_agreement
58297975,4994,"i am familiar with the oss projects, the source code which can be read like a book. and that's what we should be!",1,1,1,0.6252436637878418,0.9341696500778198,0.8285697102546692,1.0,accept,unanimous_agreement
58298398,4994,i think it's like wearing a condom all day or live in a bunker (maybe it will save you once but this will cause trouble constantly). everything has its time and place!,0,1,0,0.4041610360145569,0.770748496055603,0.4937101900577545,0.0,accept,majority_agreement
58298419,4994,this helps completely forget how to think!,0,1,0,0.5889475345611572,0.4063635468482971,0.951220691204071,0.0,accept,majority_agreement
58303203,4994,ok. the code was written before you pushed those rules.,0,0,0,0.9829455614089966,0.9906050562858582,0.991432785987854,0.0,accept,unanimous_agreement
58377799,4994,you are welcome: issue #5075,1,1,1,0.5434792637825012,0.7963535189628601,0.6078633069992065,1.0,accept,unanimous_agreement
58475531,4994,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
58491163,4994,`qpair `,0,0,0,0.9767298102378844,0.9880887866020204,0.9926880598068236,0.0,accept,unanimous_agreement
115416405,4994,i would write [code block],0,0,0,0.9863618612289428,0.9900835752487184,0.9939483404159546,0.0,accept,unanimous_agreement
115416593,4994,`return (m_size > 0) ? m_availability : 0;`,0,0,0,0.9845784306526184,0.9921448826789856,0.9934584498405457,0.0,accept,unanimous_agreement
115416673,4994,you can remove curly brackets,0,0,0,0.986828625202179,0.9879172444343568,0.9947459697723388,0.0,accept,unanimous_agreement
115416824,4994,"if you want: `{filescount, -1.}`",0,0,0,0.9850806593894958,0.9939121007919312,0.991450846195221,0.0,accept,unanimous_agreement
115416918,4994,curly brackets...,0,0,0,0.958897054195404,0.8081159591674805,0.984375536441803,0.0,accept,unanimous_agreement
115417124,4994,won't hurt to add `qvector::reserve(filescount)`,0,0,0,0.9838046431541444,0.9539995789527892,0.9896833896636964,0.0,accept,unanimous_agreement
115417478,4994,this line isn't needed now.,0,0,0,0.9749137163162231,0.9719449281692504,0.9832157492637634,0.0,accept,unanimous_agreement
115417540,4994,add `const`,0,0,0,0.9864118099212646,0.9912808537483216,0.994657814502716,0.0,accept,unanimous_agreement
115443807,4994,"as i recall, this file has `using namespace bittorrent`.",0,0,0,0.9882020354270936,0.9904332160949708,0.9946640729904176,0.0,accept,unanimous_agreement
115444423,4994,"imo, this may confuse the readers since it looks like list of two items.",0,0,0,0.8988169431686401,0.8434000015258789,0.6634138226509094,0.0,accept,unanimous_agreement
115444993,4994,"please separate ""earlier return"" part from the rest by blank line.",0,0,0,0.984747588634491,0.9873765707015992,0.9915298223495485,0.0,accept,unanimous_agreement
115445542,4994,"imo, `int + bool` is bad practice.",-1,-1,-1,0.9744957089424132,0.8301215171813965,0.961355686187744,-1.0,accept,unanimous_agreement
115447189,4994,qt5 qstring constructor accepts utf8 data so ::fromutf8 waste space only.,0,0,0,0.9735625386238098,0.9884795546531676,0.9871949553489684,0.0,accept,unanimous_agreement
115447652,4994,&fa,0,0,0,0.9538471698760986,0.95597106218338,0.9876322746276855,0.0,accept,unanimous_agreement
115448206,4994,it looks like 2 spaces before `public`,0,0,0,0.9829245209693908,0.988352596759796,0.99297696352005,0.0,accept,unanimous_agreement
115448433,4994,*m_rootitem,0,0,0,0.9788749814033508,0.9728571772575378,0.993063509464264,0.0,accept,unanimous_agreement
115448771,4994,oh please... if it pleases you.,-1,0,0,0.5235181450843811,0.8173182606697083,0.6035362482070923,0.0,accept,majority_agreement
115448986,4994,there is appropriate constant in some file.,0,0,0,0.9859724044799804,0.9916197061538696,0.9941054582595824,0.0,accept,unanimous_agreement
115449083,4994,please...,0,0,0,0.71736079454422,0.9663545489311218,0.6299152374267578,0.0,accept,unanimous_agreement
115449376,4994,"of course, if you use some advanced editor/ide and this action is not so hard for you.",0,0,0,0.8040511608123779,0.9143736958503724,0.98591148853302,0.0,accept,unanimous_agreement
115449776,4994,move definition to cpp.,0,0,0,0.9881094098091124,0.990216851234436,0.9950946569442748,0.0,accept,unanimous_agreement
115450200,4994,here are exactly your changes break coding style.,0,0,0,0.9799728989601136,0.9516069293022156,0.99369615316391,0.0,accept,unanimous_agreement
115450327,4994,please...,0,0,0,0.71736079454422,0.9663545489311218,0.6299152374267578,0.0,accept,unanimous_agreement
115450428,4994,please do it.,0,0,0,0.9557684063911438,0.981872022151947,0.9513534903526306,0.0,accept,unanimous_agreement
115450652,4994,please fix it.,0,0,0,0.9713985323905944,0.9308723211288452,0.9141096472740172,0.0,accept,unanimous_agreement
115450880,4994,please don't forget to do it here.,0,0,0,0.9345417022705078,0.9593039155006408,0.9700947403907776,0.0,accept,unanimous_agreement
115451049,4994,please move definition in cpp.,0,0,0,0.986348271369934,0.9931127429008484,0.9916125535964966,0.0,accept,unanimous_agreement
115451180,4994,please do it here too.,0,0,0,0.9732006192207336,0.9880377054214478,0.9947158694267272,0.0,accept,unanimous_agreement
115451261,4994,"it would create a vector of two elements, don't it?",0,0,0,0.980354368686676,0.9840901494026184,0.991651713848114,0.0,accept,unanimous_agreement
115451336,4994,please.,0,0,0,0.9631050229072572,0.9658777713775636,0.8863160014152527,0.0,accept,unanimous_agreement
115451658,4994,"fixing style in cases like this is easier than typing ""this code is not mine."" :)",1,1,1,0.9480260014533995,0.98147451877594,0.9910104274749756,1.0,accept,unanimous_agreement
115451724,4994,please...,0,0,0,0.71736079454422,0.9663545489311218,0.6299152374267578,0.0,accept,unanimous_agreement
115454705,4994,"ah yes, got mixed up with something else.",-1,-1,0,0.5342121124267578,0.8917618989944458,0.84565669298172,-1.0,accept,majority_agreement
115491478,4994,and it is *not* used in 11 places. i would better do a separate pr eliminating all of those.,0,0,0,0.9813226461410522,0.9688642621040344,0.982597291469574,0.0,accept,unanimous_agreement
115493587,4994,"i would prefer to leave brackets here in place: with long lines they increase readability, imo.",0,0,0,0.9393476843833924,0.8646520972251892,0.971546232700348,0.0,accept,unanimous_agreement
115514206,4994,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
115532342,4994,missing redundant space between two ),0,0,0,0.9344682097434998,0.921043574810028,0.989906132221222,0.0,accept,unanimous_agreement
115532811,4994,redundant space between ( and tsize,0,0,0,0.945281982421875,0.9699172973632812,0.9815966486930848,0.0,accept,unanimous_agreement
115532943,4994,i mean you forget removing it.,0,0,0,0.962993323802948,0.9631694555282592,0.9829135537147522,0.0,accept,unanimous_agreement
115534424,4994,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
115534450,4994,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
115538039,4994,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
116256143,4994,submitted pr with this refactoring long time ago (#6330).,0,0,0,0.9846652150154114,0.9885402321815492,0.9931615591049194,0.0,accept,unanimous_agreement
706821644,15453,you shouldn't change icon names since it breaks existing custom themes.,0,0,0,0.9709704518318176,0.973806619644165,0.953171730041504,0.0,accept,unanimous_agreement
706826357,15453,"i had to as ""view-refresh"" icon is used for both force recheck and force reannounce icon. they server different purposes and thus, another icon was created with a new name. can you kindly make a patch in your theme bundle if changes were accepted?",0,0,0,0.9858104586601256,0.99310302734375,0.9922316074371338,0.0,accept,unanimous_agreement
706839219,15453,from this: ![a link] to this: ![a link],-1,0,1,0.8685763478279114,0.980807602405548,0.8406193852424622,,review,no_majority_disagreement
706847861,15453,what is the purpose of this??,0,0,0,0.919922947883606,0.9049007296562196,0.8175134062767029,0.0,accept,unanimous_agreement
706850117,15453,"linking, a useful tool for future reference. i am not going to do it. i have chosen colors that work both light and dark theme, but not perfectly. for that, two icon packs is needed. [a link] is a brilliant tool for that. i can remove it if you want, but someone might implement the feature in the future. it will definitely help.",1,1,1,0.9815064668655396,0.99318528175354,0.993402659893036,1.0,accept,unanimous_agreement
706850917,15453,or i can mention this under color that i have used this tool to find colors that work for both light and dark theme.,0,0,0,0.977931022644043,0.9834868907928468,0.9931871891021729,0.0,accept,unanimous_agreement
706853617,15453,"this would be better, imo imo i don't think that is totally necessary but i don't want to get into too much of a debate on that.",0,0,0,0.5355595350265503,0.5831835865974426,0.9083712697029114,0.0,accept,unanimous_agreement
706854866,15453,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
707587979,15453,"on the other hand, if it enriches the ui appearance, then we can allow such breaking changes. in addition, i would return to the issue of making custom themes ""unpacked"" in order to solve the compatibility problem between different qt versions. , are you ready to do this now in order to make all the breaking changes related to the custom themes in the same release?",0,0,0,0.9846842885017396,0.9908776879310608,0.987835705280304,0.0,accept,unanimous_agreement
707595066,15453,"have exams, will see if i get time, next month for sure :thumbs_up:",1,0,1,0.6506991386413574,0.5544891357421875,0.9940225481987,1.0,accept,majority_agreement
707685505,15453,it's too dark: ![a link],-1,-1,-1,0.9810739159584044,0.9753667712211608,0.9950835704803468,-1.0,accept,unanimous_agreement
707732583,15453,"on the stalled color text icon issues: rgb 44, 44, 44 (#2c2c2c) is not `gray` as comments suggest it is known as `night rider` ref.: [a link] suggestion: `dimgray` rgb 105, 105, 105 hex (#696969) ref.: [a link] i would probably also change line below to reflect where you got your colors from: [a link] i personally use: [a link] or when picking a variant/web safe color [a link] please amend all color comments accordingly where necessary.",0,0,0,0.979658842086792,0.991913676261902,0.9904592037200928,0.0,accept,unanimous_agreement
707877112,15453,i have mainly taken inspiration from the icon of google and microsoft. i have used [a link] resource to pick neutral color.,0,0,0,0.8847349286079407,0.9800087213516236,0.9783227443695068,0.0,accept,unanimous_agreement
729206030,15453,"to be fair, we don't promise any sort of ""api"" stability regarding icon names iirc, so we are free to change them at our own pace without worrying with what others are doing with them. of course it is not desirable to change icon names very frequently, but they haven't changed in a long time and i don't expect them to change again for a long time after such a comprehensive redesign such as this one is merged.",0,0,0,0.9412943124771118,0.8728585243225098,0.9449530243873596,0.0,accept,unanimous_agreement
729260481,15453,"anyway, icon names are currently part of ""ui theme support interface"", and it is a general rule for all interfaces that they should be as stable as possible. but as i mentioned above, we can allow such breaking changes from time to time.",0,0,0,0.9860854148864746,0.9915416836738586,0.9898932576179504,0.0,accept,unanimous_agreement
729263016,15453,"btw, `uithememanager::geticon()` allows you to set fallback icon so you can use it to provide backward compatibility with existing themes.",0,0,0,0.9886096715927124,0.9940059185028076,0.989891529083252,0.0,accept,unanimous_agreement
730056539,15453,"i think we are generally in agreement here, but i think this point you make, in particular, is quite conservative. we never made any documented promise about a versioned, let alone stable ""ui theme support interface"". we could do so _after_ this pr), but we are not bound by such a promise _right now_. this is in contrast with the webapi, for example, which has a versioned and documented ""contract"" that we cannot break once set. still, even for an undocumented api such as this one, i generally agree with an ""as stable as possible"" policy, because we know 3rd-parties are using it despite any lack of proper api ""contract"". we don't want to disturb the peace for no reason. i just don't think it should come at the price of delaying this pr even further (i.e., this is a ""not possible"" situation).",0,0,0,0.884516716003418,0.9299473762512208,0.7162413597106934,0.0,accept,unanimous_agreement
730273912,15453,wrong order,-1,0,-1,0.8185693025588989,0.6354040503501892,0.5811174511909485,-1.0,accept,majority_agreement
730274592,15453,"also the commit messages isn't up to the standard (mostly it is about the first commit), please revise it before you un-draft the pr. [a link]",0,0,0,0.9875432252883912,0.9890280961990356,0.995360553264618,0.0,accept,unanimous_agreement
730276595,15453,"i plan on merging the second commit only. first one will just serve as future reference. or, i can create a clean pr when it is done.",0,0,0,0.9692995548248292,0.9693016409873962,0.9868059158325196,0.0,accept,unanimous_agreement
110527293,6156,`override`'s instead of `virtual`? no class seems to inherit from this one.,0,0,0,0.9798181056976318,0.9892131686210632,0.9853979349136353,0.0,accept,unanimous_agreement
110528087,6156,"i just reformatted the code, that was written before c++11.",0,0,0,0.987231969833374,0.9844402074813844,0.9910247325897216,0.0,accept,unanimous_agreement
110528250,6156,"yea, was just wondering if you want to change it.",0,0,0,0.971968710422516,0.8107176423072815,0.9688184857368468,0.0,accept,unanimous_agreement
110528261,6156,"nope, sorry. not in this pr.",-1,-1,-1,0.9868578910827636,0.9902775883674622,0.988066792488098,-1.0,accept,unanimous_agreement
112502272,6156,"preferences is deprecated, did you forget it?",0,0,0,0.9702425003051758,0.9815680384635924,0.9811567664146424,0.0,accept,unanimous_agreement
112502776,6156,please use the same naming scheme as in c++ files: usefileiconscheckbox.,0,0,0,0.985270082950592,0.9953718781471252,0.994304358959198,0.0,accept,unanimous_agreement
114285231,6156,"please, describe this method logic in comments",0,0,0,0.9850550889968872,0.9884768724441528,0.9943462014198304,0.0,accept,unanimous_agreement
114285308,6156,move brace to next line.,0,0,0,0.9825854301452636,0.9867559671401978,0.9930818676948548,0.0,accept,unanimous_agreement
114285409,6156,move brace to next line.,0,0,0,0.9825854301452636,0.9867559671401978,0.9930818676948548,0.0,accept,unanimous_agreement
114285557,6156,redundant blank lines.,0,-1,0,0.8705456852912903,0.4976166188716888,0.5417125821113586,0.0,accept,majority_agreement
114286631,6156,your suggestion?,0,0,0,0.9825015664100648,0.9837324023246764,0.987618327140808,0.0,accept,unanimous_agreement
114287730,6156,"since you're still not keeping track of its changes, maybe just use settingsstorage directly? or create appropriate application property (since we have no separate gui component class).",0,0,0,0.9858424067497252,0.993299126625061,0.9910609126091005,0.0,accept,unanimous_agreement
114296659,6156,"frankly speaking, `preferences` deprecation seems to be a bit premature. i think we should either at least teach ""advanced"" settings page to accept settings from outside or agree on an interface for configurable components. because right now i have to uncover an implementation detail just to make it accessible for options dialog. imo, our current approach is best suited for applications that use context menus for configurations, but not the central options dialog. i will make the requested changes, through.",0,0,0,0.6247540712356567,0.782611072063446,0.7093120217323303,0.0,accept,unanimous_agreement
114301731,6156,"agree. the current (still not used everywhere) approach was not as good as i wanted it. the same old approach were bad. apparently, i moved it from one extreme to the other. i often ponder how to make it better.",-1,-1,-1,0.9048765897750854,0.9213746786117554,0.674057126045227,-1.0,accept,unanimous_agreement
114304382,6156,disagree: all the other members use this name style.,0,0,0,0.8602031469345093,0.9417999982833862,0.789884626865387,0.0,accept,unanimous_agreement
114305404,6156,"done with the changes, but don't feel satisfied with the code :(",-1,-1,-1,0.9882256984710692,0.9911393523216248,0.9954960346221924,-1.0,accept,unanimous_agreement
114355535,6156,"ok, leave it as is since we didn't still make refactoring of this ui file.",0,0,0,0.983098804950714,0.9915409684181212,0.9913694262504578,0.0,accept,unanimous_agreement
114356871,6156,"not sure whether i need to use `qdir::tonativeseparators()` here. can anybody from windows world tell, please, does `qfileinfo::absolutefilepath()` always uses native directory separators?",0,0,0,0.9846110939979552,0.9870769381523132,0.9216873049736024,0.0,accept,unanimous_agreement
118666634,6156,cachedsettingsvalue will help you avoid having this function and one extra variable.,0,0,0,0.9885249733924866,0.9844701290130616,0.9910262227058412,0.0,accept,unanimous_agreement
118682299,6156,thanks!,1,1,1,0.9308210611343384,0.9051083922386168,0.8631753921508789,1.0,accept,unanimous_agreement
118683091,6156,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
118820933,6156,since we don't support ansi winapi we shouldn't use compatibility layer. please use shgetfileinfow and lpcwstr directly. also your code wrong. you cast 8-bit char array to wchar_t array.,-1,0,0,0.5161219835281372,0.8652293682098389,0.9395702481269836,0.0,accept,majority_agreement
118821024,6156,`qchar` is 8-bit wide?,0,0,0,0.9888132214546204,0.993640959262848,0.994199514389038,0.0,accept,unanimous_agreement
118827552,6156,why didn't you use naming scheme for getter/setter (in case of bool it should be isusesystemfileicon/setusesystemfileicon)?,0,0,0,0.9864745736122132,0.9938808679580688,0.991777777671814,0.0,accept,unanimous_agreement
118827566,6156,usually we place methods before fields.,0,0,0,0.9839248657226562,0.990802764892578,0.9926180243492126,0.0,accept,unanimous_agreement
118830122,6156,"""is use""? is it just me or this does not make sense?",-1,0,0,0.5636703968048096,0.9643441438674928,0.9555923342704772,0.0,accept,majority_agreement
118833823,6156,it just has `is ` syntax. maybe `issystemfileiconsused/setsystemfileiconsused` will sound better?,0,0,0,0.9867442846298218,0.9936344623565674,0.9910140633583068,0.0,accept,unanimous_agreement
118837712,6156,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
118837721,6156,`aresystemfileiconsused()` and `setsystemfileiconsareused(bool)`,0,0,0,0.9819549918174744,0.9938941597938538,0.9944860339164734,0.0,accept,unanimous_agreement
118837882,6156,no. property name part of setter/getter must be the same. in this case `systemfileiconsused` is property name so `issystemfileiconsused()` and `setsystemfileiconsused(bool)` are proper setter/getter names. also `is` prefix used since it relates to property itself (i.e. is property set).,0,0,0,0.9863467812538148,0.9949380159378052,0.994293749332428,0.0,accept,unanimous_agreement
118838079,6156,"fine, i understand your point. but that is grammatically incorrect. i don't know how to keep it correct and satisfy that rule simultaneously. i see only one way out: [code block]",-1,0,0,0.5993393063545227,0.8669204115867615,0.5549623370170593,0.0,accept,majority_agreement
118838237,6156,"agree. but we write not english but c++ :) there is some difference. we can't have a proper english phrases everywhere. it's just qt naming convention which we use too: setter name is `set `, getter name is ` ` (or `is `/`has ` in case of bool type). i think it's too much. besides, where did the third value?",1,1,1,0.9814715385437012,0.9920952916145324,0.9653321504592896,1.0,accept,unanimous_agreement
118840021,6156,"can't agree that this might be a reason to convert meaningful word sequences into something unclear, that can be only memorised but not written again basing on its meaning. why? i'm pretty sure there will be people who want no icons at all. the second value is the current behaviour, and the third one is what this pr offers.",0,0,0,0.8095635175704956,0.8730872869491577,0.7481414079666138,0.0,accept,unanimous_agreement
118840924,6156,"but your suggestions are not so clear as you think about. first, setfileiconsmode should expect param of type named fileiconsmode. second, the values of enum should have more meaningful names for ""file icons mode"". in my opinion, you are again trying to counter your subjective opinion against the current rules.",0,0,0,0.8372654914855957,0.9243876338005066,0.7757577896118164,0.0,accept,unanimous_agreement
118841540,6156,"really, the naming of boolean getters is not so easy as of other. [code block] so according to above `systemfileiconsused()` and `setsystemfileiconsused(bool)` is better names.",0,0,0,0.7952010035514832,0.9878565073013306,0.978894591331482,0.0,accept,unanimous_agreement
118916081,6156,`showsystemfileicons()` + `setshowsystemfileicons(bool show)` ?,0,0,0,0.9857308268547058,0.9923099279403688,0.9945117235183716,0.0,accept,unanimous_agreement
118917364,6156,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
118918217,6156,show,0,0,0,0.9584444761276244,0.9171141982078552,0.8451502323150635,0.0,accept,unanimous_agreement
118918280,6156,please reorder includes.,0,0,0,0.9846031069755554,0.9827077984809875,0.993996262550354,0.0,accept,unanimous_agreement
118924675,6156,"ah! thanks, done.",1,1,1,0.9605739712715148,0.9860020875930786,0.9932302236557008,1.0,accept,unanimous_agreement
118931210,6156,"we didn't strict defined this in coding guidelines, but maybe it's better to layout like this: [code block] idea is separating out the common headers and the ones that are wrapped in conditions.",0,0,0,0.9776864051818848,0.9932143688201904,0.9880786538124084,0.0,accept,unanimous_agreement
118932409,6156,i would remove the curly braces (for single `if`) here and below.,0,0,0,0.987546980381012,0.9935272336006165,0.9929050803184508,0.0,accept,unanimous_agreement
118934035,6156,would testing on more primitive file types better? e.g. `txt` & `bmp`. what happens if the file exist? or it doesn't matter?,0,0,0,0.9855592250823976,0.9874275922775269,0.9875538349151612,0.0,accept,unanimous_agreement
118934616,6156,i would do [code block],0,0,0,0.986148238182068,0.9892773628234864,0.9939618706703186,0.0,accept,unanimous_agreement
118935631,6156,from [a link],0,0,0,0.9877101182937622,0.9874882698059082,0.9944632649421692,0.0,accept,unanimous_agreement
118936099,6156,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
118936874,6156,"if files exist the test logic fails, because we need it to work with non-existent files. i cab generate random filenames here, if that is your point.",0,0,0,0.9764176607131958,0.9662883281707764,0.989397406578064,0.0,accept,unanimous_agreement
118936926,6156,"as far as i know, qt initialises com for the main thread.",0,0,0,0.9892061948776244,0.990995466709137,0.9919686913490297,0.0,accept,unanimous_agreement
118939617,6156,and also test for it existence.,0,0,0,0.9833037853240968,0.9874804615974426,0.9940999150276184,0.0,accept,unanimous_agreement
118939622,6156,"searching qt sources proves that i'm wrong. but this code works on windows, i.e. com is initialised somewhere. maybe we should do this initialization in qbt globally, in the application class?",0,0,0,0.8318448662757874,0.925868272781372,0.9884776473045348,0.0,accept,unanimous_agreement
118939922,6156,"as i recall, we do it at application startup for some other purposes.",0,0,0,0.9870306849479676,0.9901708960533142,0.9909294247627258,0.0,accept,unanimous_agreement
118940402,6156,"i can see only one call to coinitializeex() in base/utils/misc.cpp, and that is not program-wide.",0,0,0,0.9858546853065492,0.9929913282394408,0.989786982536316,0.0,accept,unanimous_agreement
118943613,6156,in what place did you find it? maybe this code run near the program startup and we have its side effect?,0,0,0,0.973630428314209,0.9930100440979004,0.9923353791236876,0.0,accept,unanimous_agreement
118944241,6156,"[a link] but it calls counitializes() too, so no side effect is possible.",0,0,0,0.9825490713119508,0.9932302236557008,0.995226263999939,0.0,accept,unanimous_agreement
118947859,6156,can you test your code with counitialize just before shgetfileinfo?,0,0,0,0.9883447885513306,0.9947881698608398,0.99514502286911,0.0,accept,unanimous_agreement
118948109,6156,i doubt it since: it's thread local.,0,-1,0,0.9611495733261108,0.7201775312423706,0.9420953989028932,0.0,accept,majority_agreement
118951141,6156,choosing a (long) unique name might be enough? there should be no gain for messing up this detection. and what about this? will the result depends on desktop manager or installed de icons?,0,0,0,0.9753045439720154,0.9420706629753112,0.9878063797950744,0.0,accept,unanimous_agreement
118954503,6156,"it initializes com for main thread. what's the problem? if we need it in some other thread, we can do it there also.",0,0,0,0.9861003756523132,0.9835813045501708,0.992428719997406,0.0,accept,unanimous_agreement
118956363,6156,"so, i can add coinitializeex() call to winshellfileiconprovider constructor, or put it around application::application(). what should i choose?",0,0,0,0.9877609014511108,0.993746280670166,0.9946021437644958,0.0,accept,unanimous_agreement
118956774,6156,"something like /tmp/1a2cfb92-ecef-4c08-a1e2-0f3d6b8a1119.png? well, it depends on installed icon set, of course. but if the set does not contain icons for pdf and png, i doubt it contains anything useful, so it is not important then whether the qfileiconprovider::icon() method works or not.",0,0,0,0.9823417067527772,0.9479225873947144,0.9911852478981018,0.0,accept,unanimous_agreement
118958077,6156,"yeah, maybe something like: `/tmp/qbt_doesqfileiconproviderwork_ .png?` you're right, ok.",0,0,0,0.9499778151512146,0.9654244780540466,0.9759469032287598,0.0,accept,unanimous_agreement
118958115,6156,"i just debugged it. i think we found another bug here. `::coinitializeex(nullptr, coinit_multithreaded)` in misc.cpp returns rpc_e_changed_mode. it means the following: 1. coinitializeex was called before 2. coinitializeex was called with another thread mode",0,0,0,0.9822038412094116,0.9925792813301086,0.959801971912384,0.0,accept,unanimous_agreement
118959054,6156,"oh, good point! will use it.",1,1,1,0.9806169271469116,0.9861587882041932,0.9961307048797609,1.0,accept,unanimous_agreement
118959199,6156,can't you put a breakpoint to coinitializeex() (or is it imp_coinitializeex()?) and trace who does the initialisation?,0,0,0,0.9871039986610411,0.995369017124176,0.9935238361358644,0.0,accept,unanimous_agreement
119024619,6156,ok. i done it. qwindowscontextprivate calls oleinitialize which calls cominitialize. so we don't need to do it for main thread. and we should remove this function call from misc.cpp.,0,0,0,0.9425477385520936,0.8905090093612671,0.9765102863311768,0.0,accept,unanimous_agreement
119028282,6156,"and add a comment about the ""qwindowscontextprivate calls oleinitialize"" (in misc.cpp and here).",0,0,0,0.9874382615089417,0.994989812374115,0.9956015348434448,0.0,accept,unanimous_agreement
119068879,6156,'} else {' is used everywhere else.,0,0,0,0.9843050837516784,0.9918587803840636,0.9858385920524596,0.0,accept,unanimous_agreement
119068959,6156,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
119068986,6156,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
119069008,6156,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
119069464,6156,are there only two places where com initialisation is needed? will we append such comments everywhere? isn't an overkill?,0,0,0,0.9508764147758484,0.98554128408432,0.9895713329315186,0.0,accept,unanimous_agreement
119084380,6156,"of course, it would be better to have this information in one place, but i don't know where it should be.",0,0,0,0.8955409526824951,0.9799188375473022,0.9324129819869996,0.0,accept,unanimous_agreement
119332125,6156,"you shouldn't use both `:` and `{}`. the first is for single line statements, the second one is for multiline.",0,0,0,0.986465334892273,0.9916803240776062,0.9834955334663392,0.0,accept,unanimous_agreement
119332803,6156,corrected.,0,0,0,0.9739935398101808,0.9777404069900512,0.9540433287620544,0.0,accept,unanimous_agreement
125192409,6156,does it take the correct branch?,0,0,0,0.984723687171936,0.9926982522010804,0.9939026832580566,0.0,accept,unanimous_agreement
125279534,6156,is this a leftover?,0,0,0,0.9356472492218018,0.980036199092865,0.9889707565307616,0.0,accept,unanimous_agreement
125279705,6156,i think this is a leftover too.,0,0,0,0.9721693396568298,0.9555739164352416,0.981220841407776,0.0,accept,unanimous_agreement
125281938,6156,leftover,0,0,0,0.9792333245277404,0.9635342359542848,0.9850702285766602,0.0,accept,unanimous_agreement
125282285,6156,maybe this belongs to the previous commit?,0,0,0,0.9838099479675292,0.9919352531433104,0.9852557182312012,0.0,accept,unanimous_agreement
125284155,6156,"typo: ""ask""",0,0,0,0.9836536049842834,0.9891275763511658,0.9953704476356506,0.0,accept,unanimous_agreement
125290467,6156,i think both of us missed this.,-1,0,0,0.8592467904090881,0.8684642910957336,0.7013155221939087,0.0,accept,majority_agreement
125306557,6156,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
225180003,9704,i suppose 11 should be here.,0,0,0,0.9839369058609008,0.9751676917076112,0.9824025630950928,0.0,accept,unanimous_agreement
225226078,9704,isn't it be implemented in compatible way? i mean replace code but not create separate branch.,0,0,0,0.9861343502998352,0.9849047660827636,0.9911507368087769,0.0,accept,unanimous_agreement
225227928,9704,somehow i don't like `boost::lexical_cast`... this code does not indicate at all what kind of string we will get as a result (in contrast with `to_hex()`).,-1,-1,-1,0.9517630338668824,0.6487838625907898,0.9576974511146544,-1.0,accept,unanimous_agreement
225228196,9704,the same question about having one compatible branch.,0,0,0,0.9806016683578492,0.9584987759590148,0.9827505350112916,0.0,accept,unanimous_agreement
225228498,9704,is this boost version required now (by libtorrent 1.2)?,0,0,0,0.9887451529502868,0.9924423694610596,0.995318591594696,0.0,accept,unanimous_agreement
225232195,9704,or libtorrent 1.2 uses only string_view?,0,0,0,0.989167332649231,0.9938644766807556,0.9940894842147828,0.0,accept,unanimous_agreement
225235050,9704,"now probably `string_view` only. i'll change the condition, thanks.",1,1,1,0.8948436379432678,0.5846917033195496,0.6103676557540894,1.0,accept,unanimous_agreement
225235218,9704,please use static_cast.,0,0,0,0.9842742085456848,0.9918838739395142,0.9947591423988342,0.0,accept,unanimous_agreement
225237034,9704,`template <>`,0,0,0,0.9849297404289246,0.9889591932296752,0.9442448616027832,0.0,accept,unanimous_agreement
225237354,9704,"no, it is for the try_lexical_cast, but come on, 1.55 was released 5 (five) years ago.",0,0,0,0.9843341708183287,0.9902237057685852,0.8770933151245117,0.0,accept,unanimous_agreement
225237521,9704,we use `#pragma once` now.,0,0,0,0.988268494606018,0.9943970441818236,0.9935833811759948,0.0,accept,unanimous_agreement
225238047,9704,constexpr? and functions below.,0,0,0,0.989700436592102,0.9913679957389832,0.9949624538421632,0.0,accept,unanimous_agreement
225240791,9704,why is it?,0,0,0,0.8392701148986816,0.8993744254112244,0.9662171006202698,0.0,accept,unanimous_agreement
225241583,9704,personally i agree with increasing boost version (even much more).,0,0,0,0.8932816386222839,0.8260889649391174,0.9775375127792358,0.0,accept,unanimous_agreement
225247331,9704,let's keep `class` for class declarations and use `typename` for templates.,0,0,0,0.9887880682945251,0.9932392835617064,0.9930411577224731,0.0,accept,unanimous_agreement
225248031,9704,please reformat pointers and references.,0,0,0,0.983115017414093,0.983537256717682,0.9916975498199464,0.0,accept,unanimous_agreement
225414106,9704,we only need to do this a few times. why not just have two code branches in respective alert handlers? then it will be easier for us to get rid of the libtorrent-1.1 support when the time comes.,0,0,0,0.984034538269043,0.987752079963684,0.9924282431602478,0.0,accept,unanimous_agreement
225414681,9704,is counters type changed in libtorrent-1.2? why is `boost::numeric_cast ` needed? are you afraid it might not fit in `quint64`?,0,0,0,0.9673223495483398,0.994502067565918,0.9900842905044556,0.0,accept,unanimous_agreement
225415023,9704,i would name it `fromlibtorrentstring()`,0,0,0,0.9873489141464232,0.9937646389007568,0.9951075315475464,0.0,accept,unanimous_agreement
225416025,9704,couldn't `{}` fit in both cases? [code block],0,0,0,0.9854959845542908,0.9944605827331544,0.9927088022232056,0.0,accept,unanimous_agreement
225457427,9704,"in this specific case though, the issue is that `to_hex()` was removed from the libtorrent api. it was never really meant to be exposed. you should be able to use `lexical_cast` in both cases. `lexical_cast` is just shorthand for `std::stringstream s; s << m_nativehash; s.str()`. there are plenty of alternative ways to convert a binary blob to hex. like (untested): [code block]",0,0,0,0.97970712184906,0.9944638609886168,0.9906094670295716,0.0,accept,unanimous_agreement
225460333,9704,"i imagine you could have a `from_hex` function that looks like this (again, untested): [code block]",0,0,0,0.9861488342285156,0.9918083548545836,0.9894413948059082,0.0,accept,unanimous_agreement
225461118,9704,"i think `static_cast<>` is reasonable here. one thing to keep in mind is that an if-condition is a boolean context, which won't require the cast. so you could do this: `return (m_nativeinfo.source & libt::peer_info::dht) ? true : false` or just `return bool(m_nativeinfo.source & libt::peer_info::dht);`",0,0,0,0.9787120819091796,0.9890075922012328,0.967051923274994,0.0,accept,unanimous_agreement
225461590,9704,i think it would be reasonable to write this as: `return lt::file_index_t{index}`;,0,0,0,0.9868086576461792,0.9884123206138612,0.990222692489624,0.0,accept,unanimous_agreement
225462265,9704,can not be used as the right side of the '?' operator.,0,0,0,0.9622149467468262,0.9872120022773744,0.9862724542617798,0.0,accept,unanimous_agreement
225465375,9704,i don't think there's a good reason to take the `string_view` by const ref here. it's already a reference type,0,0,0,0.9583702683448792,0.9048652052879332,0.9745836853981018,0.0,accept,unanimous_agreement
225466004,9704,"perhaps i misremember, but the `0` in the top version is also the flags, and passing different flags will give you different behaviours in the different versions",0,0,0,0.9502522945404052,0.9486498236656188,0.8590672612190247,0.0,accept,unanimous_agreement
225467657,9704,"if you just want a duration of 0 minutes, you can also say `0min` (as long as you `using namespace std::chrono_literals`).",0,0,0,0.9891766905784608,0.9939938187599182,0.9940987825393676,0.0,accept,unanimous_agreement
225467945,9704,"putting ""inminutes"" in the variable name here smells a bit like hungarian notation now. it's already encoded in the type",0,0,0,0.9112660884857178,0.8923735618591309,0.8916627764701843,0.0,accept,unanimous_agreement
225468990,9704,"instead of `status_flags_t(0)`, i'm pretty sure you can just say `{}`, (in fact, that might work in both libtorrent 1.1.x and 1.2.x). however, keep in mind that a call to `status()` is quite expensive, since it's a round-trip to the libtorrent thread.",0,0,0,0.970783829689026,0.987259328365326,0.9839212894439696,0.0,accept,unanimous_agreement
225469920,9704,"these changes were long living as an unofficial patch in my fork. i did want to change as less as possible to simplify merging for me, and did not change the function name. that is why this pr is full of similar inappropriate for the mainline decisions. i hope to sort that out before merging.",0,-1,0,0.93106871843338,0.7848395705223083,0.8755428194999695,0.0,accept,majority_agreement
225470750,9704,qbittorrent coding style prohibits using function-style cast and implicit casting numbers to boolean.,0,0,0,0.9640297293663024,0.9886051416397096,0.9803375005722046,0.0,accept,unanimous_agreement
225470910,9704,"we still support c++11, there are no chrono literals there.",0,0,0,0.9854540824890136,0.9897538423538208,0.9928852915763856,0.0,accept,unanimous_agreement
225472318,9704,"with c++11 you should be able to just say: `{a->address, a->port}`",0,0,0,0.9870501756668092,0.9899166226387024,0.9930288195610046,0.0,accept,unanimous_agreement
225474743,9704,"counters returns a `span `, so you don't really need to take it by reference",0,0,0,0.987052857875824,0.988896906375885,0.992049515247345,0.0,accept,unanimous_agreement
225475155,9704,"i imagine there may be a conversion warning here, because the libtorrent counters are signed.",0,0,0,0.9883881211280824,0.9885538816452026,0.9757948517799376,0.0,accept,unanimous_agreement
225475330,9704,(which i think your counters should be too),0,0,0,0.984058678150177,0.9870855212211608,0.9919769167900084,0.0,accept,unanimous_agreement
225476088,9704,i added this header in late versions of 1.1.x as well actually,0,0,0,0.9897348880767822,0.9909313917160034,0.9915667176246644,0.0,accept,unanimous_agreement
225477144,9704,"technically, indices into arrays are `std::ptrdiff_t`, but i think standard containers got this wrong a long time ago. heh, in fact, i got this wrong in my `span<>` as well. i will try to fix that.",0,0,0,0.9528392553329468,0.7367689609527588,0.8630200028419495,0.0,accept,unanimous_agreement
225489373,9704,we try to use it only when it is impossible to use cached values.,0,0,0,0.9785608053207396,0.9880790114402772,0.9908314347267152,0.0,accept,unanimous_agreement
225490347,9704,"i don't think this is a duration, is it? it looks like it would be a `time_point`",0,0,0,0.9661168456077576,0.9794538617134094,0.9789733290672302,0.0,accept,unanimous_agreement
225490679,9704,"i think you can use this line for both version, right? `makepieceindex()` already provides the abstraction",0,0,0,0.9766362309455872,0.9916234612464904,0.9916492700576782,0.0,accept,unanimous_agreement
225490688,9704,if all supported libtorrent versions have the counters of signed type we should use qint64.,0,0,0,0.989409565925598,0.9947574138641356,0.9946770668029784,0.0,accept,unanimous_agreement
225491435,9704,unfortunately 1.1.x uses `std::uint64_t`,0,0,0,0.5505738854408264,0.9858174920082092,0.5786661505699158,0.0,accept,unanimous_agreement
225491542,9704,the standard containers are not arrays.,0,0,0,0.9769358038902284,0.9694650173187256,0.9916014075279236,0.0,accept,unanimous_agreement
225531465,9704,"the change to support multiple mappings per port seems orthogonal to the 1.2 update, no?",0,0,0,0.9843977093696594,0.9906381368637084,0.9913329482078552,0.0,accept,unanimous_agreement
225532206,9704,"you're not actually allowed to put things in the `std` namespace. i think a better way to do this is to put this template in your namespace and when building with c++17, just pull it in from `std` with `using` instead.",0,0,0,0.9866849780082704,0.9883757829666138,0.9900779724121094,0.0,accept,unanimous_agreement
225532997,9704,"these literals are from c++14, in case you wanted to still be compatible with c++11",0,0,0,0.98749977350235,0.9930588006973268,0.9926478862762452,0.0,accept,unanimous_agreement
225533501,9704,"duration has `operator%` which may be simpler, or at least more straight forward",0,0,0,0.9877712726593018,0.9933577179908752,0.991460919380188,0.0,accept,unanimous_agreement
225534606,9704,"i think it would be a lot nicer if `getmaxseedingminutes()` would return a duration instead. then it wouldn't even need to have `minutes` in its name. same thing goes for `setglobalmaxseeding`, since it takes a proper type now, it doesn't need `minutes` either",0,0,0,0.8325992226600647,0.9759194254875184,0.931648313999176,0.0,accept,unanimous_agreement
225535259,9704,i think a slightly safer way of doing this is to explicitly cast the duration to `minutes` before getting `count()`. otherwise you rely on the function to specifically return minutes. you can use `duration_cast ()`,0,0,0,0.985178291797638,0.986335039138794,0.9841085076332092,0.0,accept,unanimous_agreement
225535423,9704,"if literals are allowed, i think ` >= 0s` is nicer than calling `count()` (and below too)",0,0,0,0.9553619623184204,0.9786483645439148,0.9623538851737976,0.0,accept,unanimous_agreement
225536329,9704,"are you sure you know what unit `count()` returns? i thought `friendlyunit` would take any `duration`, in which case you don'y need to call `count()`. in fact, calling `count()` should be avoided generally, that's when you lose type safety. typically it's only required when interfacing with other apis (like qt)",0,0,0,0.98491770029068,0.9910872578620912,0.9914934635162354,0.0,accept,unanimous_agreement
225536442,9704,same thing goes for the change above,0,0,0,0.9855971932411194,0.9892553091049194,0.9907357096672058,0.0,accept,unanimous_agreement
225537690,9704,are you sure `max_eta` is the same unit as `etal` and `etar`? just calling count seems a bit dangerous,-1,-1,0,0.7821510434150696,0.5177960395812988,0.5330861806869507,-1.0,accept,majority_agreement
225537934,9704,i think a better approach would be to turn `etal` and `etar` into proper duration types. i.e. tell the reader what unit `left.data()` and `right.data()` returns.,0,0,0,0.9859774112701416,0.9907861948013306,0.9840880632400512,0.0,accept,unanimous_agreement
225538469,9704,", i will change the code with chrono types, of course. as i wrote you earlier, i'm porting these changes from a fork where i did want to change as little as possible. p.s. could you tell me, please, will you drop autoools from the 1.2 release?",0,0,0,0.9738277792930604,0.9739209413528442,0.9623924493789672,0.0,accept,unanimous_agreement
225875563,9704,notice `libtorrent::sha1_hash::size` became a function,0,0,0,0.9875625371932985,0.991596519947052,0.9945610165596008,0.0,accept,unanimous_agreement
225876855,9704,"seems like we do not use negative durations, thus `duration_cast` is enough, there is no need tor `floor`.",0,0,0,0.980535328388214,0.990214705467224,0.98975932598114,0.0,accept,unanimous_agreement
225878851,9704,but `std::chrono::days` is from c++20. or did i interpret the suggestion incorrectly?,0,0,0,0.9808499217033386,0.985912024974823,0.9913175106048584,0.0,accept,unanimous_agreement
226007051,9704,", please don't introduce any non required changes in this pr.",0,0,0,0.9409142136573792,0.9790185689926147,0.9827141165733336,0.0,accept,unanimous_agreement
226064552,9704,"the values come from ""marshaling"" via `qvariant` and type information is lost. what is worse, `qvariant` interface does not signal type mismatch when demarshaling, simply returning default value `t()`. thus i see no difference between using `count()` here or in would be cast from `qvariant` earlier.",0,0,0,0.879676103591919,0.9860390424728394,0.936719000339508,0.0,accept,unanimous_agreement
226065459,9704,"i remember i was making only compilation fixes in the commits used as sources for this pr, but let me check.",0,0,0,0.9851621985435486,0.97912859916687,0.9922518134117126,0.0,accept,unanimous_agreement
226107724,9704,"i'm suggesting you make `etar` and `etal` of type `std::duration`. that way, `operator>=` will do the right thing, regardless of the `max_eta` unit. right now, you rely on `max_eta` specifically being `std::minutes`, if you change the value of this constant to be specified in seconds, it breaks.",0,0,0,0.9821494221687316,0.9913705587387084,0.9883516430854796,0.0,accept,unanimous_agreement
226112823,9704,"but then i have to ensure that when i pack the duration into `qvariant` and unpack here, i use the same type. otherwise things break in a similar way. or i can put a rule that `qvariant` always contains seconds, which doe not differ significantly from what i have now, except that i can check in an ide that `max_eta` is indeed seconds.",0,0,0,0.9824687242507936,0.973988115787506,0.9825222492218018,0.0,accept,unanimous_agreement
226116189,9704,"i'm not familiar with `qvariant`, but right now it contains a raw integral, which the reader of this code needs to know the unit of. i'm suggesting that you ""unpack"" this integral into a chrono type. this will serve two purposes, it will increase the coverage of using proper types and improve type safety. it will also make it *explicit* that you are treating this raw integral as seconds or minutes (i forget which one it is), so it becomes easier for a reader to understand the intention or spot a bug if it's wrong. fundamentally though, it would probably be better to store a `chrono::duration` type in the variant too",0,0,0,0.9129372835159302,0.9497942924499512,0.9431257247924804,0.0,accept,unanimous_agreement
226116318,9704,"you're right that as long as the variant is a raw integral, you can still make a mistake of treating it as the wrong unit, but as the code is now, you have more opportunities to make that mistake",0,0,0,0.6466928124427795,0.9251589775085448,0.9818145632743835,0.0,accept,unanimous_agreement
226212904,9704,i mean use new code with both libtorrent versions: [code block],0,0,0,0.9867990612983704,0.9903969764709472,0.9939494132995604,0.0,accept,unanimous_agreement
226226716,9704,blank line above is redundant.,0,0,0,0.8709349632263184,0.9236006736755372,0.93453449010849,0.0,accept,unanimous_agreement
226228911,9704,how about join these two: [code block] and the second two: [code block],0,0,0,0.9873915314674376,0.991351842880249,0.9954524636268616,0.0,accept,unanimous_agreement
226229817,9704,please reformat all pointer and references: [code block],0,0,0,0.9880034923553468,0.9892751574516296,0.9943795800209044,0.0,accept,unanimous_agreement
226230252,9704,", please comment on it.",0,0,0,0.9775025248527528,0.9631528854370116,0.9868630170822144,0.0,accept,unanimous_agreement
226230629,9704,maybe comment it in the code why?,0,0,0,0.9675556421279908,0.9914972186088562,0.993575155735016,0.0,accept,unanimous_agreement
226236606,9704,it's weird that you don't use universal initialization...,-1,-1,-1,0.9857383966445924,0.9918308854103088,0.9945293068885804,-1.0,accept,unanimous_agreement
226237218,9704,what type of `libt::session::global_peer_class_id` in libtorrent-1.2?,0,0,0,0.9882623553276062,0.9953266382217408,0.9947939515113832,0.0,accept,unanimous_agreement
226238176,9704,i wouldn't duplicate `std::chrono::minutes` and just use `auto` at left side.,0,0,0,0.9842543601989746,0.987572431564331,0.9891477823257446,0.0,accept,unanimous_agreement
226238375,9704,why do you use `duration_cast` above and don't do it here?,0,0,0,0.9745931625366212,0.992839217185974,0.9892925024032592,0.0,accept,unanimous_agreement
226239222,9704,can we define literals of the same name and use them in c++11 mode?,0,0,0,0.988737940788269,0.9947184324264526,0.9952374696731568,0.0,accept,unanimous_agreement
226277021,9704,please don't remove blank line above.,0,0,0,0.9521785974502563,0.9796841144561768,0.9237785935401917,0.0,accept,unanimous_agreement
226316908,9704,is we indent `case` satatements?,0,0,0,0.9837679266929626,0.9928446412086488,0.9943538904190063,0.0,accept,unanimous_agreement
226317404,9704,i would use `alertsockettype(p)` in `switch` directly.,0,0,0,0.9891003966331482,0.9934090375900269,0.9950742125511168,0.0,accept,unanimous_agreement
226318451,9704,"either create variable or define separate helpers (one for extracting address, and the second one for port).",0,0,0,0.9880821704864502,0.9910436868667604,0.9941137433052064,0.0,accept,unanimous_agreement
226369530,9704,"how about create ""bittorrent/private/libtorrentfwd.h""?",0,0,0,0.9892026782035828,0.994628369808197,0.9950300455093384,0.0,accept,unanimous_agreement
226372318,9704,using `std::chrono` types outside libtorrent abstraction layer seems inconvenient to me. it only leads to numerous conversions between these types and the types we use elsewhere in the qbittorrent code.,-1,-1,-1,0.6675371527671814,0.9425456523895264,0.634568452835083,-1.0,accept,unanimous_agreement
226372985,9704,"just ""private/index.h""",0,0,0,0.9811951518058776,0.9907755255699158,0.9953511953353882,0.0,accept,unanimous_agreement
226376438,9704,"now i still came to the conclusion that ""std::chrono"" does not bring us any convenience. i only see the complexity of code and multiple type conversions. apparently, we should convert it immediately after we get it from libtorrent and before we pass it to libtorrent.",0,0,0,0.9738010764122008,0.8471575379371643,0.9526589512825012,0.0,accept,unanimous_agreement
226378845,9704,static_cast is redundant here.,0,0,0,0.9414862990379332,0.8606137633323669,0.9823243618011476,0.0,accept,unanimous_agreement
226379774,9704,why don't you cast to int?,0,0,0,0.974376380443573,0.9680049419403076,0.9929147958755492,0.0,accept,unanimous_agreement
226380395,9704,seems wrong. it constantly returns false. i would use some helper template: [code block] or just test them one by one: ```c++ return (m_nativestatus.flags & libt::torrent_flags::paused) && (m_nativestatus.flags & libt::torrent_flags::auto_managed);,0,0,-1,0.723595380783081,0.690299928188324,0.8211185336112976,0.0,accept,majority_agreement
226384611,9704,resume_data can be null,0,0,0,0.9875909090042114,0.9771634340286256,0.9909393787384032,0.0,accept,unanimous_agreement
226549007,9704,"i don't see these typedefs used anywhere. the comment mentions c++11, did you mean libtorrent-1.1.x?",0,0,0,0.9844834208488464,0.9880297780036926,0.988743782043457,0.0,accept,unanimous_agreement
226549427,9704,"it would be slightly longer names to use a template. however, instead of these functions, you could just construct `libt_file_index_t` objects directly (and in 1.1.x it would just construct an `int`)",0,0,0,0.9879712462425232,0.9942933917045592,0.9929149150848388,0.0,accept,unanimous_agreement
226549646,9704,"oh, c-style formatting. is the convention to also do: `std::vector ` (with the space)?",0,0,0,0.9855926632881165,0.980472981929779,0.9912830591201782,0.0,accept,unanimous_agreement
226550119,9704,there's a `peer_class_t`. using it in an ip filter is a bit of a wart unfortunately. i've been considering adding some utility functions to smoothen this out.,-1,-1,-1,0.5714136362075806,0.7963874936103821,0.5437753796577454,-1.0,accept,unanimous_agreement
226550435,9704,"sort of. user defined literals has to start with an underscore, so you could have `_s` and `_min` for seconds and minutes",0,0,0,0.9825137257575988,0.9901060461997986,0.9745404124259948,0.0,accept,unanimous_agreement
226550996,9704,"in fact, i would suggest not using the `minutes` type for any variables or data members, instead use the `duration` type of the clock you're using. for example: `lt::duration` (i realize you can't use that directly, since it wasn't there in 1.1.x). but for instance, you could make a typedef for `std::chrono::monotonic_clock::duration` and use that. all the unit conversions will be done (mostly) automatically",0,0,0,0.9815782308578492,0.99329936504364,0.9874665141105652,0.0,accept,unanimous_agreement
226551333,9704,i suspect you may save conditional code like this by creating a typedef to `download_priority_t`,0,0,0,0.9714365601539612,0.9869524240493774,0.991793692111969,0.0,accept,unanimous_agreement
226551559,9704,you can actually control the paused state with the flags too now,0,0,0,0.987875521183014,0.9898545145988464,0.9934062957763672,0.0,accept,unanimous_agreement
226551703,9704,"this doesn't look right. in the first version you add the upload mode flag, in the bottom one you remove the upload mode flag",0,0,0,0.753209114074707,0.7587441802024841,0.8072628974914551,0.0,accept,unanimous_agreement
226552650,9704,"or if it's ok to drop support for libtorrent 1.1.3 and earlier, it could be included unconditionally",0,0,0,0.9860140085220336,0.995029628276825,0.9929494857788086,0.0,accept,unanimous_agreement
226554675,9704,"i think the excessive conversions happen because the chrono types are fully embraced and slightly oddly used. the specific unit types `minutes`, `seconds`etc. are really meant to just be used when converting to and from raw integrals. functions and constants like this should just use the native `duration` type, and be initialized using a specific unit. like this: [code block] or better yet: [code block] btw, the ""convenience"" mostly comes in the type safety and *not* having time unit bugs",0,0,0,0.875461220741272,0.9509761333465576,0.9519081711769104,0.0,accept,unanimous_agreement
226555706,9704,is the inner `static_cast` really necessary?,0,0,0,0.987096905708313,0.9933664202690125,0.9930960536003112,0.0,accept,unanimous_agreement
226555864,9704,"as i've pointed out before, i think all these functions should return a `duration`, not a specific unit.",0,0,0,0.9850207567214966,0.9816317558288574,0.9885405898094176,0.0,accept,unanimous_agreement
226556161,9704,"is this duration cast necessary? if you would return a `duration` i don't think it would be (as long as you end up using the same clock as libtorrent, which i think you'd be likely to)",0,0,0,0.9843993186950684,0.9872358441352844,0.990170419216156,0.0,accept,unanimous_agreement
226556625,9704,"i think this will introduce a blocking call, where there didn't used to be one",0,0,0,0.9846441745758056,0.9379368424415588,0.973724365234375,0.0,accept,unanimous_agreement
226559612,9704,usually we have this space in new code. what's wrong with it?,-1,0,0,0.532379150390625,0.9483250975608826,0.941158413887024,0.0,accept,majority_agreement
226560765,9704,we discussed it before. you shouldn't introduce type names unacceptable by project coding style even if they are aliases for different style names.,0,0,0,0.965160310268402,0.970281422138214,0.9790193438529968,0.0,accept,unanimous_agreement
226563633,9704,"not very important obviously, i just think the `*` and `&` belongs together with the rest of the type. it's all good though",1,0,1,0.7809282541275024,0.665467381477356,0.7470739483833313,1.0,accept,majority_agreement
226607177,9704,what `duration` are you talking about? `std::chrono::duration` is just template and `std::chrono::minutes` (etc.) is its instantiation. or am i missing something?,0,0,0,0.9788848757743835,0.9867362380027772,0.9901915788650512,0.0,accept,unanimous_agreement
226611548,9704,"in this pr they are used in lambdas that take libtorrent indicies as parameters, and because of c++11 i can't write `auto` there.",0,0,0,0.9872409701347352,0.9931074976921082,0.9929916858673096,0.0,accept,unanimous_agreement
226612488,9704,"i agree that typedefs and functions are somewhat overlap. i used functions because i knew i can auto-type variables then. now, with c++11 it does not work always and typedefs are required. i will eliminate the overlapping.",0,0,0,0.969070553779602,0.9605171084403992,0.9765740633010864,0.0,accept,unanimous_agreement
226614948,9704,certain durations in qbt have resolution of minutes explicitly. i would not want tot loose that.,0,0,0,0.9434612393379213,0.8502477407455444,0.9537279009819032,0.0,accept,unanimous_agreement
226615415,9704,and that is why i would better switch to c++14 instead of creating slightly different copies of its content in qbt.,0,0,0,0.9851338863372804,0.9907763600349426,0.9929186701774596,0.0,accept,unanimous_agreement
226616632,9704,1.1.3? i find out the header was released for the first time in 1.1.8.,0,0,0,0.9884157180786132,0.9941072463989258,0.9909626841545104,0.0,accept,unanimous_agreement
226617068,9704,clock_type::duration typedef.,0,0,0,0.987430453300476,0.9924312829971312,0.9920101165771484,0.0,accept,unanimous_agreement
226617469,9704,why should i cast to int when i'm extracting the underlying index value (as it is written explicitly now)?,0,0,0,0.9758269786834716,0.989767611026764,0.9784098267555236,0.0,accept,unanimous_agreement
226691529,9704,"i'm sorry, but i'm too stupid and i don't understand how this affects qbittorrent code outside of the libtorrent abstraction layer. all we need there (except the interaction with libtorrent abstraction layer) is to get some duration value from the user through some control providing us with a raw integer, display this value on the screen through some control getting from us a raw integer.",-1,-1,-1,0.9885730743408204,0.9914167523384094,0.994963765144348,-1.0,accept,unanimous_agreement
226695227,9704,"i've seen lot's of code (in qbt) that does other things to durations too, comparing them for instance. what type safety buys you is to not have to name functions and variables with ""inminutes"" or ""inseconds"". it lowers cognitive load of the reader as there is no longer a concern of what unit a raw integer is.",0,0,0,0.9355700016021729,0.97117018699646,0.9716668725013732,0.0,accept,unanimous_agreement
226702195,9704,"maybe i don't like it at the moment because the new code isn't clean enough yet. really i like the pros of these types, but the code changes look like ""solid inconveniences."" although i've watched some not all. maybe the whole picture isn't so scary. as of using concrete types i agree with . we should use ""duration"" everywhere unless other type is required. i.e. function types and parameters, class fields and constants should be of type ""duration"" (we should add alias for it, e.g. ""bittorrent::duration"").",-1,1,-1,0.9801145195961,0.8419113159179688,0.599730908870697,-1.0,accept,majority_agreement
226706835,9704,seems like rebasing issue. firstoffset was changed to fileoffset in master some time ago.,0,0,0,0.985643982887268,0.9721684455871582,0.9840945601463318,0.0,accept,unanimous_agreement
226708100,9704,"let's use ""lt"" namespace. ""libtorrent"" is too long.",0,0,0,0.9741854071617126,0.9678488373756408,0.985218107700348,0.0,accept,unanimous_agreement
226817587,9704,"why not ""all of""?",0,0,0,0.9409475922584534,0.8710381984710693,0.9847967624664308,0.0,accept,unanimous_agreement
226817797,9704,you have these lines two times.,0,0,0,0.9836038947105408,0.9775174260139464,0.9820412397384644,0.0,accept,unanimous_agreement
226817942,9704,"based on the above proposals, it should be duration. also it will be enough to declare metatype for duration only.",0,0,0,0.9872152805328368,0.9903631806373596,0.9936417937278748,0.0,accept,unanimous_agreement
226818451,9704,why not instantiate days from chrono::duration?,0,0,0,0.9756292700767516,0.9900466799736024,0.9917789101600648,0.0,accept,unanimous_agreement
230548659,9704,", what's real benefit of having classes for indexes? i don't recall having any difficulty with the integers. now it requires frequent (and meaningless) type conversions.",0,0,-1,0.9177764654159546,0.7814590930938721,0.5860512256622314,0.0,accept,majority_agreement
230555424,9704,"this general concept is typically referred to as ""strong types"". it's become a very popular thing in the c++ community in the last 5 years or so (at least to talk about). personally i've employed it pervasively at my current and last job, with great success. first, to respond to the meaningless type conversions: if you store piece indices, file indices, download priorities, peer classes, etc. in variables of the specific type, you don't need the type conversion (and you gain the type-safety). the annoyance of the type conversions is a feature, to indicate that the parameter- or variable type should should be changed to match what you're passing in. a counter-question could be: why do you use an `int` to store a piece index? the vast majority of operations you can perform on an integer are not necessary and most likely bugs. in my experience, once you embrace the type system fully and make sure all your types match, or at least maximises the times they match, you really gain a lot of confidence that your code fits together correctly. (i would argue that the [a link] belongs in this category of errors). i also had a type related bug in code converting from internal file mode flags to os specific ones, where an operator precedence mistake caused the flags to be mixed with each other. sometimes embracing the type system requires you to get creative, to make sure that your argument types match. for example, `std::vector ::operator[a link]. in fact, i've done this for so many containers (`std::array`, `std::deque`) that i generalised the concept of [a link], specifying the index type. i've also wrapped [a link] (the version that holds an array) to allow specifying the index type. there are [a link] [a link] too. apart from interacting with containers, i think i/o is the other major hurdle to use specific types. the modern ways of printing has a much better story here, for instance implementing a templated `operator<<` and `operator>>` for iostream is pretty simple. or a hook for `fmtlib`. granted, if you stick to `printf()` you will need to cast. but i don't ascribe a lot of value to be compatible with something that's so unsafe to begin with anyway (it could be seen as a feature, to discourage use of `printf()`, and ellipsis in general). the third case i can think of is where you need some specific ""special"" operation. for instance find the piece index in the middle between two other indices, or find the range of pieces that represent a certain number of bytes. my approach to these kinds of operations is to wrap them in functions that have a type-safe interface, and then do the casting internally. i'm genuinely interested if you have cases where you're forced to cast that doesn't fit one of the categories i outlined (or if there's a case that's common but doesn't have a good solution for using strong types). i also recognise that converting an existing program to use strong types is quite a daunting task, and that it might not be super exciting to do.",0,1,1,0.7026078701019287,0.966408908367157,0.6931714415550232,1.0,accept,majority_agreement
230559129,9704,", thank you for detailed description. i'm just a hobbyist and i don't have enough experience to understand some concepts at once (i see how it's used here and it raises questions for me). although i think the code would look nicer if we didn't have to support both libtorrent versions. now i have food for thought. if i have more specific comments, i'll call you.",1,1,1,0.9230051040649414,0.9657279849052428,0.9834347367286682,1.0,accept,unanimous_agreement
233230226,9704,this constructor is explicit.,0,0,0,0.9855965971946716,0.9902315735816956,0.9956026077270508,0.0,accept,unanimous_agreement
233329869,9704,so `return std::chrono::minutes {m_globalmaxseedingminutes};` isn't allowed?,0,0,0,0.9818759560585022,0.9940032362937928,0.9937521815299988,0.0,accept,unanimous_agreement
233431541,9704,"oh, my bad. i mistaken that for `return {m_globalmaxseedingminutes};`.",-1,-1,-1,0.9888716340065002,0.9828317761421204,0.9929346442222596,-1.0,accept,unanimous_agreement
46769078,4266,use camelcase in new code. see coding_guidelines.md.,0,0,0,0.9861593842506408,0.994979441165924,0.994966208934784,0.0,accept,unanimous_agreement
46772378,4266,"ok, will do, but only half of the original code is camelcased. just the c++ source code right? javascript will be a mess if it's camelcased.",0,-1,0,0.8510709404945374,0.5824790000915527,0.7467923760414124,0.0,accept,majority_agreement
46775087,4266,rules have been developed recently. we use them in new code and changing old from time to time.,0,0,0,0.9826318025588988,0.9900306463241576,0.9913028478622437,0.0,accept,unanimous_agreement
59979032,4266,fix coding style. move `&&` operator to next line.,0,0,0,0.9882463812828064,0.9927774667739868,0.9931575655937196,0.0,accept,unanimous_agreement
59979110,4266,fix coding style in this method.,0,0,0,0.9865469932556152,0.9881604909896852,0.992441177368164,0.0,accept,unanimous_agreement
94861027,4266,coding style,0,0,0,0.9829461574554444,0.9000932574272156,0.9920753240585328,0.0,accept,unanimous_agreement
94861063,4266,coding style,0,0,0,0.9829461574554444,0.9000932574272156,0.9920753240585328,0.0,accept,unanimous_agreement
95137295,4266,this-> is not necessary.,0,0,0,0.9226083755493164,0.8929901123046875,0.9921974539756776,0.0,accept,unanimous_agreement
95137312,4266,this-> is not necessary.,0,0,0,0.9226083755493164,0.8929901123046875,0.9921974539756776,0.0,accept,unanimous_agreement
95137357,4266,"why limit it to a year? sure, probably noone will set it even to a year but it should be the user's choice.",0,0,0,0.9818474650382996,0.9722867608070374,0.957313597202301,0.0,accept,unanimous_agreement
95137403,4266,why not a reference? edit: never mind. couldn't find anything about this in the coding guidelines.,0,0,0,0.5734871029853821,0.6178386807441711,0.9831838011741638,0.0,accept,unanimous_agreement
95137451,4266,i doubt this will be accepted here. maybe it's better to make a new method with it and connect it with the checxkboxes somewhere in the constructor? [code block],0,0,0,0.8765713572502136,0.9838992357254028,0.9324843883514404,0.0,accept,unanimous_agreement
95141150,4266,"i would use `std::pair maxseedingtime()` and then the function would be: ```c++ std::pair torrenthandle::maxseedingtime() const { return m_seedingtimelimit != use_global_seeding_time ? std::make_pair(m_seedingtimelimit, false) : std::make_pair(m_session->globalmaxseedingminutes(), true); }",0,0,0,0.9812428951263428,0.9915720224380492,0.9928123354911804,0.0,accept,unanimous_agreement
95154232,4266,"true, that's the result of the search/replace from the previous implementation that used a global variable instead. i'll fix it.",0,0,0,0.987420618534088,0.9927021265029908,0.99315083026886,0.0,accept,unanimous_agreement
95154261,4266,"same, see above. i'll fix it.",0,0,0,0.9830296635627748,0.9828165769577026,0.991772711277008,0.0,accept,unanimous_agreement
95154335,4266,"i have to put a number in there, like the max ratio has one. i chose the first coherent option i could think of.",0,0,0,0.971560835838318,0.9549803733825684,0.9848119020462036,0.0,accept,unanimous_agreement
95154518,4266,"i tried to follow the same coding style that was already there. look for maxratio() and other similar functions that has the same implementation. remember this pr was already approved, but never merged. this is just a rebase actually, but i really appreciate your comments, they have been very helpful.",1,1,1,0.980834662914276,0.995039403438568,0.9938674569129944,1.0,accept,unanimous_agreement
95154600,4266,it was already accepted before (the whole pr was). i don't see a problem with this method.,0,0,0,0.9761193990707396,0.9701513648033142,0.9851970672607422,0.0,accept,unanimous_agreement
95208912,4266,"oh ok, i just found it strange to enable/disable that combo box every time something is changed in the options.",-1,-1,-1,0.739596426486969,0.7273795008659363,0.5202451944351196,-1.0,accept,unanimous_agreement
95209632,4266,"my bad, didn't look at the other methods.",-1,-1,-1,0.9790676832199096,0.9888656735420228,0.9938911199569702,-1.0,accept,unanimous_agreement
95225014,4266,":) that's because you haven't tried the pr, just read the code. if neither the option ""seed torrents until their ratio reaches"" nor ""seed torrents until their seeding time reaches"" are enabled, the action (where you select if you want to pause or remove the torrent) should be disabled. it's the same functionality than before but now you have to select either one of the options. originally if you select ""seed torrents until their ratio reaches"" enables the action drop-down field and if you unselect it, it disables it. same thing but now with two options. i welcome you to try the pr. it works great and it's a really useful feature :)",1,1,1,0.9583540558815002,0.9907007217407228,0.9846030473709106,1.0,accept,unanimous_agreement
95252929,4266,i did try it and understand what it does otherwise i wouldn't make a comment. i meant that you put it in `enableapplybutton()` which is executed when pretty much anything is changed in the options.,0,0,0,0.9738865494728088,0.9751274585723876,0.986971914768219,0.0,accept,unanimous_agreement
115940772,4266,parentheses `((initialratiovalue == -1) && (initialtimevalue == -1))`,0,0,0,0.9866061806678772,0.9932345747947692,0.9928357005119324,0.0,accept,unanimous_agreement
116003374,4266,why? there's no such thing in the code guidelines.,0,0,0,0.9277175068855286,0.737915575504303,0.9386193156242372,0.0,accept,unanimous_agreement
116007982,4266,heh you're right. it's for readability. i've seen it suggested so many times i thought it is for sure in the guidelines. either way i've seen at least one more and gonna point it out in a while. feel free to ignore them if noone else says something about it.,0,1,1,0.6761831641197205,0.9567373394966124,0.8047339916229248,1.0,accept,majority_agreement
116009034,4266,parentheses ((maxratiovalue < 0) && (maxseedingtimevalue < 0)),0,0,0,0.9868179559707642,0.9908689260482788,0.9927625060081482,0.0,accept,unanimous_agreement
116009241,4266,parentheses ((speed_average.upload > 0) && (maxratiovalue >= 0)),0,0,0,0.985663652420044,0.9900467991828918,0.9915346503257751,0.0,accept,unanimous_agreement
116013911,4266,+1,0,0,0,0.696722686290741,0.7702900171279907,0.9816582202911376,0.0,accept,unanimous_agreement
116022400,4266,+1,0,0,0,0.696722686290741,0.7702900171279907,0.9816582202911376,0.0,accept,unanimous_agreement
116518777,4266,you mistyped here. please fix `-1.` to `-1`.,0,0,0,0.9849022030830384,0.9629938006401062,0.980276107788086,0.0,accept,unanimous_agreement
116519516,4266,you should put this condition into one line (since it became not so long after your changes): [code block],0,0,0,0.9879604578018188,0.9916501045227052,0.9955915808677672,0.0,accept,unanimous_agreement
116520105,4266,this is meaningless since it always true here.,-1,0,0,0.5520837903022766,0.5115987658500671,0.878976583480835,0.0,accept,majority_agreement
116521156,4266,"it is preferable to log some events, but not actions (i.e. ""something done"" not ""doing something..."").",0,0,0,0.9834017753601074,0.9868796467781068,0.9909579753875732,0.0,accept,unanimous_agreement
116522159,4266,redundant indentation level. [code block],0,0,0,0.9734938144683838,0.9699832201004028,0.9828755855560304,0.0,accept,unanimous_agreement
116522516,4266,redundant indentation level. [code block],0,0,0,0.9734938144683838,0.9699832201004028,0.9828755855560304,0.0,accept,unanimous_agreement
116523688,4266,since all groups are equivalent you shouldn't enclose two of them: [code block],0,0,0,0.9848772287368774,0.9847254157066344,0.9935526847839355,0.0,accept,unanimous_agreement
116524917,4266,please use constant here (torrenthandle::use_global_seeding_time).,0,0,0,0.9875622987747192,0.9935331344604492,0.9950024485588074,0.0,accept,unanimous_agreement
116525456,4266,use predefined constants (e.g. torrenthandle::no_seeding_time_limit) here and in all similar places it's very good idea.,1,1,1,0.631800651550293,0.7506691813468933,0.957780659198761,1.0,accept,unanimous_agreement
116526004,4266,"i know this is not your code, but can you fix this name too?",0,0,0,0.9855532050132751,0.9863364696502686,0.991339385509491,0.0,accept,unanimous_agreement
116528342,4266,you don't need to have this mapping since there was no `preferences/bittorrent/maxseedingminutes` setting before.,0,0,0,0.9877796173095704,0.9917690753936768,0.994873344898224,0.0,accept,unanimous_agreement
116528509,4266,qreal,0,0,0,0.9822118878364564,0.6838659644126892,0.9820281267166138,0.0,accept,unanimous_agreement
116529205,4266,and you don't need to create this variable since simple getters should be done inline with a high probability. ?,0,0,0,0.984801709651947,0.9819673299789428,0.9934066534042358,0.0,accept,unanimous_agreement
116529277,4266,same as above.,0,0,0,0.9746477603912354,0.9857698678970336,0.9922299981117249,0.0,accept,unanimous_agreement
116533155,4266,"i also have not tested this, but i don't understand why the following code won't work? [code block] now you have it in the wrong place. if before no one noticed, that is no reason not to fix it.",0,0,0,0.7226824760437012,0.8199192881584167,0.884967029094696,0.0,accept,unanimous_agreement
116535105,4266,you should read the whole file not the diff. this is a copy/paste from the same section that process the ratio limit that's already there. i just tried to be consistent with the code that was already there. this is your code not mine: [code block] i just tried to be consistent in what was already there. **do not read just diffs read the whole file**,0,0,0,0.9420705437660216,0.9713261723518372,0.7898414731025696,0.0,accept,unanimous_agreement
116535373,4266,"read the whole file please, the original else is like that. i can fix my else though but it would be consistent with the rest of the file.",0,0,0,0.9704979658126832,0.9650925993919371,0.9660714268684388,0.0,accept,unanimous_agreement
116537240,4266,"but you have connected it to `enableapplybutton()` too, isn't it?",0,0,0,0.9882737398147584,0.9942453503608704,0.995726466178894,0.0,accept,unanimous_agreement
116578016,4266,"always true, you checked this two lines above.",0,0,0,0.9852264523506165,0.982595682144165,0.98540061712265,0.0,accept,unanimous_agreement
116578429,4266,identifier name in this line is confusing. suggest [code block],-1,0,-1,0.5283908843994141,0.6667178273200989,0.6780914068222046,-1.0,accept,majority_agreement
116579865,4266,negligible part of people use `-flto` with gcc and as such getter has to be defined in the header (inside of the class) to be inlined. but this is prohibited by the coding guidelines in this project.,0,0,0,0.8366159796714783,0.9919083714485168,0.926486313343048,0.0,accept,unanimous_agreement
116581806,4266,why these changes? maybe a rebase artifact?,0,0,0,0.93668133020401,0.9837438464164734,0.9884169697761536,0.0,accept,unanimous_agreement
116637757,4266,not sure to do that change: [code block] they all are like that,0,0,0,0.6953477263450623,0.6431028842926025,0.9537922143936156,0.0,accept,unanimous_agreement
116649267,4266,", there should be one name per line. , leave it as is unless you want to add yourself.",0,0,0,0.9801534414291382,0.9843159317970276,0.9908876419067384,0.0,accept,unanimous_agreement
116650305,4266,i left it as it is because i wasn't sure what to do.,-1,0,0,0.8477573394775391,0.7173758149147034,0.619137704372406,0.0,accept,majority_agreement
116660411,4266,fix curly brace position.,0,0,0,0.9865589141845704,0.9876911640167236,0.9924224019050598,0.0,accept,unanimous_agreement
116685626,4266,i wasn't gonna say anything because apparently you hate doing coding style but while you're at it reverse these: [code block],-1,-1,-1,0.9035794734954834,0.9078436493873596,0.970146656036377,-1.0,accept,unanimous_agreement
116797183,4266,redundant empty line and sorry for late review...,-1,-1,-1,0.989459991455078,0.9921423196792604,0.9944566488265992,-1.0,accept,unanimous_agreement
116799017,4266,please add parentheses,0,0,0,0.9794120192527772,0.9871538281440736,0.9947016835212708,0.0,accept,unanimous_agreement
116800047,4266,space between `use_global_seeding_time` and colon.,0,0,0,0.98725688457489,0.9924584031105042,0.9902026653289796,0.0,accept,unanimous_agreement
116800420,4266,"+1, please fix it too.",0,0,0,0.8894975185394287,0.893072247505188,0.9821512699127196,0.0,accept,unanimous_agreement
116800787,4266,"try find a parent to fill in, don't leave it 0",0,0,0,0.9699307680130004,0.939594566822052,0.9868146181106568,0.0,accept,unanimous_agreement
116809675,4266,"why it is redundant? it doesn't break any coding style rules here, but just separates loop.",0,0,0,0.9266462922096252,0.7598291039466858,0.9626129865646362,0.0,accept,unanimous_agreement
116810325,4266,"imo, for tiny code segment, the indention is enough for loop separation.",0,0,0,0.9871929883956908,0.983269453048706,0.9857564568519592,0.0,accept,unanimous_agreement
116818460,4266,"**this** can be used as parent, isn't it?",0,0,0,0.973642885684967,0.9909022450447084,0.994071900844574,0.0,accept,unanimous_agreement
116819532,4266,"it's a matter of taste, if it is not regulated by the rules so we can't demand to change these things (only express our opinion).",0,0,0,0.9126406908035278,0.9050785899162292,0.9239276647567748,0.0,accept,unanimous_agreement
116858685,4266,"remember, everything i have done is because somewhere else in the same file is like that and it would look inconsistent. the complete section is like this, only the second method is my code: [code block] and i think it looks better that way, like the original coder ;)",0,1,1,0.7641510963439941,0.9814671874046326,0.9846553802490234,1.0,accept,majority_agreement
116905571,4266,"this is exactly what i meant. to be clear, i'm not forcing a change here. personal thought: i think the inconsistent of style isn't that critical anyway, unless someone rewrite the old code, it probably will stay there forever, so just focus on making the new code nice is enough...",0,0,1,0.5498589277267456,0.5727353692054749,0.7776371240615845,0.0,accept,majority_agreement
496526715,13348,"i think this way you won't process the very first alert in m_alerts. also, you will dereference the end iterator.",0,0,0,0.9853231906890868,0.9821048378944396,0.9825899004936218,0.0,accept,unanimous_agreement
496530767,13348,i think you're wrong.,-1,-1,-1,0.8952732086181641,0.5087727308273315,0.8573455214500427,-1.0,accept,unanimous_agreement
496535631,13348,note that this is a **post** increment.,0,0,0,0.978222131729126,0.991337776184082,0.9923297762870787,0.0,accept,unanimous_agreement
496542439,13348,"idk, it seems at first m_nextalert is m_alerts.begin();, but here you're incrementing m_nextalert before processing it.",0,0,0,0.9868744015693665,0.9894005656242372,0.9871200323104858,0.0,accept,unanimous_agreement
496549649,13348,"oopsie, that bracket is confusing, sorry.",-1,-1,-1,0.9910649657249452,0.9934332370758056,0.9931923747062684,-1.0,accept,unanimous_agreement
496573682,13348,"without parentheses, it looks like the increment is applied to the dereferenced value... matter of taste.",0,0,0,0.9392372965812684,0.966942012310028,0.9828038215637208,0.0,accept,unanimous_agreement
194056887,9072,can $$target be used here?,0,0,0,0.9889500737190248,0.9935156106948853,0.994805634021759,0.0,accept,unanimous_agreement
194058235,9072,"for this function msdn [a link] ""include windows.h"". i'm wondering why do you prefer to manually list individual include files?",0,0,0,0.9796864986419678,0.9791347980499268,0.9901788234710692,0.0,accept,unanimous_agreement
194064062,9072,std::array?,0,0,0,0.9871151447296144,0.9881671071052552,0.994050920009613,0.0,accept,unanimous_agreement
194064297,9072,std::wstring,0,0,0,0.98086816072464,0.9793901443481444,0.988737940788269,0.0,accept,unanimous_agreement
194074284,9072,"qstring::tostdwstring(), qstring::utf16()",0,0,0,0.9854246973991394,0.9866776466369628,0.9927748441696168,0.0,accept,unanimous_agreement
194074563,9072,nullptr,0,0,0,0.9864813089370728,0.873803973197937,0.9746752977371216,0.0,accept,unanimous_agreement
194075041,9072,return res == error_success ? qstring::fromstdwstring(lpdata) : qstring();,0,0,0,0.9883312582969666,0.9874432682991028,0.9920498728752136,0.0,accept,unanimous_agreement
194075385,9072,std::wstring or qstring::utf16(),0,0,0,0.9809191823005676,0.9921833872795104,0.9937054514884948,0.0,accept,unanimous_agreement
194076689,9072,"[a link] or a custom raii wrapper class, please.",0,0,0,0.98650860786438,0.992316961288452,0.9941502213478088,0.0,accept,unanimous_agreement
194085011,9072,two identical functions below.,0,0,0,0.9820981621742249,0.983639657497406,0.9913588762283324,0.0,accept,unanimous_agreement
194085159,9072,two identical functions below.,0,0,0,0.9820981621742249,0.983639657497406,0.9913588762283324,0.0,accept,unanimous_agreement
194085836,9072,"raii handler, please.",0,0,0,0.987195611000061,0.9851673245429992,0.966444730758667,0.0,accept,unanimous_agreement
194085900,9072,raii,0,0,0,0.974240243434906,0.9749009013175964,0.9651007056236268,0.0,accept,unanimous_agreement
194085980,9072,raii,0,0,0,0.974240243434906,0.9749009013175964,0.9651007056236268,0.0,accept,unanimous_agreement
194086750,9072,boost::intrusive_ptr,0,0,0,0.9850896596908568,0.9891125559806824,0.990706741809845,0.0,accept,unanimous_agreement
194086854,9072,raii,0,0,0,0.974240243434906,0.9749009013175964,0.9651007056236268,0.0,accept,unanimous_agreement
194086957,9072,raii,0,0,0,0.974240243434906,0.9749009013175964,0.9651007056236268,0.0,accept,unanimous_agreement
194087048,9072,boost::intrusive_ptr,0,0,0,0.9850896596908568,0.9891125559806824,0.990706741809845,0.0,accept,unanimous_agreement
194089657,9072,"os, operatingsystem, or anything, please, that can't be read as a system of utilities or another system inside of the qbittorent project. if you very much want to keep this name, consider ""sys::utils"" instead.",0,0,0,0.9873383045196532,0.9912616014480592,0.9650893807411194,0.0,accept,unanimous_agreement
194128970,9072,"i'll ask you your own question: ""are you kidding?"" i just moved most of this code from other (inappropriate) place. i'm not going to change it!",-1,-1,-1,0.9825039505958556,0.5793862342834473,0.991822063922882,-1.0,accept,unanimous_agreement
194129509,9072,"especially since i'm not going to do your inappropriate whims. all this code is written in winapi style and it uses its types and definitions. it worked fine for many years before, so why touch it?",-1,-1,-1,0.8869770765304565,0.8438793420791626,0.7929118275642395,-1.0,accept,unanimous_agreement
194133893,9072,then the copyright in this new file lies.,0,0,0,0.7625812292098999,0.7155815958976746,0.9930014610290528,0.0,accept,unanimous_agreement
194138166,9072,"oh, sorry. i'll fix it. this pr is still quite unfinished...",-1,-1,-1,0.9904804825782776,0.9920700192451476,0.9946054816246032,-1.0,accept,unanimous_agreement
194139745,9072,as if it is something that has a right to live... :d,1,1,1,0.9782464504241944,0.9920796751976012,0.9892181158065796,1.0,accept,unanimous_agreement
194140437,9072,it's none of our business...,-1,0,-1,0.9489626884460448,0.8262104988098145,0.7618098855018616,-1.0,accept,majority_agreement
194141382,9072,"no. target is for binary name. it's ""qbittorrent"". but application brand name is ""qbittorrent""!",0,0,0,0.9811124801635742,0.9870327711105348,0.981656014919281,0.0,accept,unanimous_agreement
194143684,9072,that's pity...,-1,-1,-1,0.9883416295051576,0.9843712449073792,0.9948981404304504,-1.0,accept,unanimous_agreement
194146590,9072,"well, i guess i'll change the name so i don't waste time with useless arguments... last comments... so ""utils::fs"" can be read as ""filesystem of utilities or another filesystem inside of the qbittorent project"", ""utils::string"" as ""string of utilities or another string inside of the qbittorent project"" etc.? currently we have all utils are inside utils namespace divided into more concrete subgroups. so ""utils::sys"" is appropriate name for operating system related utilities. but if you don't understand context-dependent meaning of the ""system"" word i can replace it with ""utils::os"".",0,0,-1,0.9552664160728456,0.924942135810852,0.7141123414039612,0.0,accept,majority_agreement
194157718,9072,"no and no, because all the examples above are not consolidating (generalising) terms, unlike the ""system"".",0,0,0,0.96366548538208,0.9841902852058412,0.9565118551254272,0.0,accept,unanimous_agreement
194245822,9072,"these functions are very simple and do not intend further complication. why should i complicate it with raii handlers, intrusive_ptr etc.? the answers ""because it's cool!"", ""that's safe!"", ""you have to use them always and everywhere, because they are!"" don't suit me.",-1,0,-1,0.8231510519981384,0.3697309792041778,0.9078819751739502,-1.0,accept,majority_agreement
194247040,9072,"well, i did impleement them (for fun).",0,1,0,0.927087664604187,0.8580483794212341,0.9203900694847108,0.0,accept,majority_agreement
194247758,9072,"is there any other function except ""current""?",0,0,0,0.98501718044281,0.9902279376983644,0.994224727153778,0.0,accept,unanimous_agreement
194247779,9072,the same question here.,0,0,0,0.9775118827819824,0.9897056818008424,0.9882698059082032,0.0,accept,unanimous_agreement
194247833,9072,i think users deserve to know if action did not succeed.,0,0,0,0.7504658102989197,0.8919793963432312,0.9151251316070556,0.0,accept,unanimous_agreement
194247847,9072,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
194248042,9072,the last two parameters are wrongly ordered.,0,0,0,0.7455722689628601,0.725928008556366,0.7940685749053955,0.0,accept,unanimous_agreement
194248051,9072,the last two parameters are wrongly ordered.,0,0,0,0.7455722689628601,0.725928008556366,0.7940685749053955,0.0,accept,unanimous_agreement
194248323,9072,"ok, will change it.",0,0,0,0.9812626242637634,0.9870935082435608,0.9924370646476746,0.0,accept,unanimous_agreement
194248440,9072,what makes you think that?,0,0,0,0.9474008083343506,0.9424290657043456,0.9790006279945374,0.0,accept,unanimous_agreement
194248666,9072,"i was wrong, excuse me: though '0' is for `perror`.",-1,-1,-1,0.8681073188781738,0.6130707859992981,0.5708491802215576,-1.0,accept,unanimous_agreement
194248671,9072,and i was wrong here too.,-1,0,0,0.9240269660949708,0.8476554751396179,0.5769256949424744,0.0,accept,majority_agreement
194249389,9072,merge those 2 macros?,0,0,0,0.986786425113678,0.9904087781906128,0.9932507872581482,0.0,accept,unanimous_agreement
194249420,9072,`qbt_app_name`,0,0,0,0.9830477833747864,0.9920852780342102,0.9948011636734008,0.0,accept,unanimous_agreement
194249627,9072,`assocpanelwindows` and `assocpanelothers`?,0,0,0,0.9862627983093262,0.99441397190094,0.9937716126441956,0.0,accept,unanimous_agreement
194249689,9072,move one up.,0,0,0,0.9824228286743164,0.96749085187912,0.986142098903656,0.0,accept,unanimous_agreement
194249805,9072,do you mind hide it first?,0,0,0,0.9769003391265868,0.9888717532157898,0.9923304319381714,0.0,accept,unanimous_agreement
194249870,9072,wrong indention.,-1,-1,-1,0.9058247804641724,0.7818265557289124,0.6470064520835876,-1.0,accept,unanimous_agreement
194249977,9072,use `qmessagebox::standardbutton` instead of int?,0,0,0,0.989004909992218,0.9948205947875975,0.9954137206077576,0.0,accept,unanimous_agreement
194250092,9072,"if possible, please sort the list, alsoi would append `\` to the end of the list instead of another `libs +=`",0,0,0,0.9858486652374268,0.993458330631256,0.9950834512710572,0.0,accept,unanimous_agreement
194250148,9072,i find it confusing why there is a check for `ver >= win8`??,-1,-1,0,0.6034249663352966,0.663729727268219,0.6203257441520691,-1.0,accept,majority_agreement
194250395,9072,use `nullptr` or `null` instead of `0`?,0,0,0,0.9868707656860352,0.9943430423736572,0.9942097663879396,0.0,accept,unanimous_agreement
194250486,9072,"legacy code, just asking... would you prefer removing the default values?",0,0,0,0.9706382155418396,0.9215274453163148,0.9889123439788818,0.0,accept,unanimous_agreement
194250580,9072,"why do these two functions use different registry paths? is it true that setting a value in hkcu is reflected in hkey_classes_root? or there are two defaults, system-wide and per-user ones?",0,0,0,0.984254002571106,0.993463933467865,0.990748941898346,0.0,accept,unanimous_agreement
194251972,9072,"`hkey_local_machine\software\classes` contains global values, `hkey_current_user\software\classes` contains user overrides, hkey_classes_root merges it so i use it for reading (when no matter where they are actually stored).",0,0,0,0.9875137209892272,0.9943530559539796,0.9941429495811462,0.0,accept,unanimous_agreement
194254775,9072,"i see, thanks.",1,1,1,0.8815086483955383,0.755877673625946,0.6488677859306335,1.0,accept,unanimous_agreement
194381574,9072,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
194382348,9072,win8+ can't actually check whether it set as default program or not. so we just ask the user itself to set it on the first run and we never do it again.,0,0,0,0.9238559007644652,0.9714667797088624,0.9810039401054382,0.0,accept,unanimous_agreement
194383174,9072,this method returns `int`.,0,0,0,0.9874663949012756,0.9867375493049622,0.9950478076934814,0.0,accept,unanimous_agreement
194384038,9072,"ok, fixed.",0,0,0,0.982961356639862,0.933848202228546,0.9758327603340148,0.0,accept,unanimous_agreement
194384280,9072,"ok, reordered.",0,0,0,0.980607271194458,0.9649435877799988,0.9915539622306824,0.0,accept,unanimous_agreement
194384379,9072,"oops... it was ""sys.h"" initially.",-1,0,-1,0.9643514752388,0.8550928831100464,0.9424172043800354,-1.0,accept,majority_agreement
194384724,9072,no. they are both used on windows. anyway i've used different names now: assocpanel and defaultprogrampanel.,0,0,0,0.9817724227905272,0.9794245958328248,0.9866580367088318,0.0,accept,unanimous_agreement
194385007,9072,ok. renamed.,0,0,0,0.9823105335235596,0.9814223051071168,0.9864533543586732,0.0,accept,unanimous_agreement
194385488,9072,you think i made such a fool of me? otherwise we can't use `wide()` with macro as its argument.,-1,-1,-1,0.9666460752487184,0.5197297930717468,0.9773290753364564,-1.0,accept,unanimous_agreement
194389086,9072,of course.,0,0,0,0.9671178460121156,0.981129229068756,0.9627540707588196,0.0,accept,unanimous_agreement
194391116,9072,: [a link],0,0,0,0.9844269156455994,0.9864894151687622,0.98844575881958,0.0,accept,unanimous_agreement
194414083,9072,"thanks, hopefully this time it will stay in my memory longer.",1,1,1,0.8018295764923096,0.9058363437652588,0.9188497066497804,1.0,accept,unanimous_agreement
194414508,9072,it can also be `qmessagebox::standardbutton` [a link],0,0,0,0.9870381355285645,0.9942888021469116,0.9952358603477478,0.0,accept,unanimous_agreement
194613256,9072,are you sure this will work for official windows 32-bit binaries? the binary is expected to run on winxp to win10.,0,0,0,0.9886425137519836,0.9943888783454896,0.9942069053649902,0.0,accept,unanimous_agreement
195928604,9072,areassociationsset,0,0,0,0.9799787998199464,0.9858023524284364,0.988677144050598,0.0,accept,unanimous_agreement
195928901,9072,"the name of the function is cryptic for me. could you add a comment or, better, change the name? my problem is that the name is composed of very generic terms and i can't get what real action is invoked.",0,-1,-1,0.5181832313537598,0.9034351706504822,0.6974844336509705,-1.0,accept,majority_agreement
195928933,9072,why do these duplicate functions above? please merge the conditional blocks.,0,0,0,0.980526566505432,0.984811782836914,0.9824405312538148,0.0,accept,unanimous_agreement
195929182,9072,"please explain the intention behind `setxxxassoc(false)`. from my point of view such call is a way to a confusion. example: prog1 is associated with file a type. then prog2 is installed and takes over the association. now i want to set the associations back to prog1, and do that via a system control module or prog1 setting. then i need nothing in the prog2 to reset the association. additionally, is it correct that clearing the settings checkbox in qbt will clear the association even if it is set to another program?",0,0,0,0.9798977971076964,0.9859368205070496,0.9870907068252563,0.0,accept,unanimous_agreement
195932264,9072,it shows application association registration ui (as you can see from used interface name). i just shortened the name a little. do you think *showapplicationassociationregistrationui* is better name? or are you going to suggest something else?,0,0,0,0.9849217534065248,0.9878495335578918,0.9797415733337402,0.0,accept,unanimous_agreement
195932375,9072,"the functions above have parameter, so i don't want to produce unreadable mash from conditionals to merge it.",0,0,0,0.9795134663581848,0.9101390838623048,0.9801024794578552,0.0,accept,unanimous_agreement
195932845,9072,oops... i'm talking about other functions. these ones can be merged.,-1,-1,-1,0.9688177108764648,0.92606920003891,0.8979687094688416,-1.0,accept,unanimous_agreement
195933728,9072,please add to the top-level cmakelists.txt after the `project()` call (probably near the version-related stuff): [code block],0,0,0,0.988234043121338,0.99340558052063,0.9957610964775084,0.0,accept,unanimous_agreement
195934247,9072,ok!,0,1,0,0.9285968542099,0.7309839725494385,0.9387575387954712,0.0,accept,majority_agreement
195936154,9072,"yes, the long one looks better to me. at least i can understand it :) but it seems like you don't like that long name, and giving the macro name just above, i propose `showdefaultprogramselectionui()`. however, msdn says that the com interface is deprecated as of windows 10 and is replaced with ""default programs"". the macro name directly contradicts that. i think either the macro name has to be changed, or the implementation [a link] to support window 10.",1,1,1,0.9820355772972108,0.9938622713088988,0.9911243319511414,1.0,accept,unanimous_agreement
195936161,9072,"there is `#include ` in the header, can't these two be removed?",0,0,0,0.9883672595024108,0.994830310344696,0.9947351217269896,0.0,accept,unanimous_agreement
195936231,9072,i can't read the macro name. maybe you meant use**s**?,0,0,0,0.6921309232711792,0.9513790607452391,0.9613757133483888,0.0,accept,unanimous_agreement
195936244,9072,did not find linux implementations for these two.,0,0,0,0.6863805651664734,0.9705930948257446,0.9746818542480468,0.0,accept,unanimous_agreement
195936270,9072,*the* default programs dialog,0,0,0,0.9835245609283448,0.9893519282341005,0.9866928458213806,0.0,accept,unanimous_agreement
195936341,9072,"the first `this` is unnecessary, i believe, and i even wonder how did it pass compilation.",-1,0,0,0.7967071533203125,0.931481122970581,0.9809420108795166,0.0,accept,majority_agreement
195936365,9072,that is error but not a warning (the requested action failed completely).,0,0,0,0.943455159664154,0.979704976081848,0.9451633095741272,0.0,accept,unanimous_agreement
195936415,9072,"so, does it still remove associations unconditionally?",0,0,0,0.9778810739517212,0.993531048297882,0.9911421537399292,0.0,accept,unanimous_agreement
195936428,9072,thanks.,0,1,0,0.5150366425514221,0.5804154276847839,0.5270382761955261,0.0,accept,majority_agreement
195937648,9072,"maybe you would opt to add implementations instead of removing the functions. here is what needs to be done: 1. query associations: launch`xdg-mime query default `. should return ""qbittorrent.desktop"" if qbittorrent is the default. 2. to set the default launch: `xdg-mime default qbittorrent.desktop `. the mime types are application/x-bittorrent and x-scheme-handler/magnet",0,0,0,0.9859701991081238,0.9955782294273376,0.9900658130645752,0.0,accept,unanimous_agreement
196039121,9072,now it removes only qbittorrent associations.,0,0,0,0.9870563745498656,0.9926209449768066,0.9941921830177308,0.0,accept,unanimous_agreement
196039963,9072,why should it fails? ?,0,0,0,0.7396238446235657,0.91963529586792,0.8855748772621155,0.0,accept,unanimous_agreement
196043131,9072,do you mean qbittorrent? they are not here and never was! removing?.. what did i remove? not me. i think i've already answered your hints. some linux developer can do that. i don't have the ability to develop/test on linux now.,0,0,0,0.6532405018806458,0.5046198964118958,0.5576499104499817,0.0,accept,unanimous_agreement
196052355,9072,"then put them under `#ifdef`, please.",0,0,0,0.9877589344978333,0.9928332567214966,0.9893007874488832,0.0,accept,unanimous_agreement
196053911,9072,"because you wrote `connect(sender, signal, receiver, lambda)`, and moc has to generate a call similar to `(receiver->*lambda)()`, i.e. `(this->*lambda)` which is nonsense.",0,0,0,0.8913441300392151,0.6976106762886047,0.6797549724578857,0.0,accept,unanimous_agreement
196097072,9072,"hell, i'll just put them back.",-1,0,0,0.9565011858940125,0.9338980913162231,0.7039684653282166,0.0,accept,majority_agreement
196098965,9072,"can't. do you think ""windows.h"" includes all other winapi headers?",0,0,0,0.9853914380073548,0.9795286655426024,0.9843847751617432,0.0,accept,unanimous_agreement
196099163,9072,changed with win_has_default_programs_api.,0,0,0,0.9873724579811096,0.9948595762252808,0.9950686693191528,0.0,accept,unanimous_agreement
196110630,9072,"i wrote `connect(sender, signal, context, lambda)`: [code block]",0,0,0,0.9871048927307128,0.9914252758026124,0.9946513772010804,0.0,accept,unanimous_agreement
196113806,9072,"ugh, don't offer me that anymore! such perversions are not for me. the way the operating system offers is enough.",-1,-1,-1,0.9884291887283324,0.9856225848197936,0.9946040511131288,-1.0,accept,unanimous_agreement
196158845,9072,"oh, my bad. did not read this part of the qt documentation since qt 5.0.",-1,-1,-1,0.9886673092842102,0.985998511314392,0.9919135570526124,-1.0,accept,unanimous_agreement
196159797,9072,"no, just can't understand the logic behind that. for example, for `coinitializeex()` msdn says ""header objbase.h"", which is not on the includes list here. i conclude that it works via windows.h. hence was my question.",0,0,0,0.9549977779388428,0.8955166339874268,0.9777463674545288,0.0,accept,unanimous_agreement
196170789,9072,"`shlobj.h` is for `shchangenotify()`, `shobjidl.h` is for **iapplicationassociationregistration** and **iapplicationassociationregistrationui**. `windows.h` doesn't include `objbase.h`. maybe it's included via some qt header. anyway it's better to include it directly.",0,0,0,0.9832484722137452,0.9956081509590148,0.9922164678573608,0.0,accept,unanimous_agreement
196192174,9072,why does the condition repeat assertion in line 283?,0,0,0,0.968076467514038,0.9764042496681212,0.9889178276062012,0.0,accept,unanimous_agreement
196195177,9072,"if the first parameter named ""cls"" and not ""key"", the second one would better be named ""progid"".",0,0,0,0.9889005422592164,0.9940219521522522,0.9928291440010072,0.0,accept,unanimous_agreement
196197762,9072,why does the condition repeat the assert in line 256?,0,0,0,0.972255289554596,0.9844372272491456,0.9911919236183168,0.0,accept,unanimous_agreement
196198539,9072,"msdn states for `iapplicationassociationregistration` ""minimum supported client: windows vista"" , but the condition above seem to contradict that. how's that possible?",0,0,0,0.9872580170631408,0.9766389727592468,0.9923638105392456,0.0,accept,unanimous_agreement
196198942,9072,"i would create constants for strings ""qbittorrent.file.torrent"" and ""qbittorrent.url.magnet"". `src/base/global.h` already contains constant for the "".torrent"" literal.",0,0,0,0.9893555045127868,0.994869589805603,0.9945663213729858,0.0,accept,unanimous_agreement
196200455,9072,but it seems to be called from line 300 with the opposite condition.,0,0,0,0.982238233089447,0.965390682220459,0.9868898391723632,0.0,accept,unanimous_agreement
196202425,9072,"imo, these platform-dependent manipulations should be hid in the `os.cpp` file.",0,0,0,0.9900698065757751,0.994268536567688,0.991147756576538,0.0,accept,unanimous_agreement
196203276,9072,"and these too. i would ""export"" from the os.h file `qwidget* fileassociationswidget (qwidget* parent)` and enjoy clean header, would not introduce contents into the main program, and avoid macros in the header file.",0,0,0,0.9739227294921876,0.9869584441184998,0.973136305809021,0.0,accept,unanimous_agreement
196203557,9072,why not qapp->applicationname()?,0,0,0,0.982718825340271,0.9885525703430176,0.9928158521652222,0.0,accept,unanimous_agreement
196205626,9072,"pardon me, i think i asked this already, but can't find your answer, so i likely repeat: why can't qapp->applicationname() be used in those winapi calls?",-1,-1,0,0.8848852515220642,0.739079475402832,0.7597289681434631,-1.0,accept,majority_agreement
196767810,9072,typo. `>=` is supposed to be here.,0,0,0,0.985905647277832,0.9915908575057985,0.9907087087631226,0.0,accept,unanimous_agreement
196768273,9072,sure.,0,0,0,0.9536533951759338,0.9664214849472046,0.9824982285499572,0.0,accept,unanimous_agreement
196769678,9072,that's right.,0,0,0,0.967866599559784,0.973717451095581,0.98730206489563,0.0,accept,unanimous_agreement
196770191,9072,because of typo above ([a link],0,0,0,0.9645307660102844,0.984536349773407,0.9420300722122192,0.0,accept,unanimous_agreement
196772540,9072,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
196773093,9072,now with fixed typo above it should be right.,0,0,0,0.9819129705429076,0.9750497937202454,0.9886272549629213,0.0,accept,unanimous_agreement
196775485,9072,"we can't export any widget (or some other gui thing) from some base header. but we can implement it inside gui module. in any case, i don't want to waste time on it until this pr is generally approved by .",0,0,0,0.977735996246338,0.971633791923523,0.979878544807434,0.0,accept,unanimous_agreement
196775748,9072,changed.,0,0,0,0.9753402471542358,0.9758284687995912,0.9680466055870056,0.0,accept,unanimous_agreement
196778290,9072,you asked here: [a link],0,0,0,0.9842802286148072,0.9907302260398864,0.9955831170082092,0.0,accept,unanimous_agreement
196778968,9072,"aha, thanks. as you did not give an answer there, please explain here.",1,1,1,0.9097760915756226,0.8845464587211609,0.9879484176635742,1.0,accept,unanimous_agreement
196785702,9072,? doesn't [a link] answer suit you?,0,0,0,0.9670082330703736,0.9922882914543152,0.9897865056991576,0.0,accept,unanimous_agreement
196788139,9072,"exactly, i see no answer there.",0,0,0,0.8908661007881165,0.9697357416152954,0.9890736937522888,0.0,accept,unanimous_agreement
196789566,9072,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
196796435,9072,"this is the structure of the project! *base* should not be dependent on the gui. it should compile with `nogui=true` without any additional conditionals. predicting your causticity about this, i note at once that there are still a few legacy dependencies from gui (in `preferences.cpp` and `misc.cpp`), which have not yet reached the hands (apparently i need to move them to the right place soon).",0,0,0,0.966547191143036,0.960858166217804,0.9687893986701964,0.0,accept,unanimous_agreement
196798113,9072,why should we have unnecessary dependencies? why should this task depend on the qapplication *instance*? try to answer these questions and you (probably) will find my answer.,0,0,0,0.9660181403160096,0.961426556110382,0.9675970673561096,0.0,accept,unanimous_agreement
196801349,9072,but then you pull the same information from the compiler command line. why that is not a dependency?,0,0,0,0.9747226238250732,0.96757709980011,0.9929271340370178,0.0,accept,unanimous_agreement
196828702,9072,"why then, if a structure is so important, this chain of #idefss can not find its place in `src/gui/utils` directory?",0,0,0,0.9791668057441713,0.9708234667778016,0.979347288608551,0.0,accept,unanimous_agreement
198124602,9072,this should move up,0,0,0,0.98108172416687,0.9831695556640624,0.9918096661567688,0.0,accept,unanimous_agreement
198124659,9072,in this file too.,0,0,0,0.9853953123092652,0.9916232228279114,0.994494378566742,0.0,accept,unanimous_agreement
198125314,9072,"`istorrentfileassocset`, `ismagnetlinkassocset` are duplicates.",0,0,0,0.9869067668914796,0.9930599927902222,0.9907509684562684,0.0,accept,unanimous_agreement
198125806,9072,"also i would place similar functions together, for example `istorrentfileassocset` and `settorrentfileassoc`.",0,0,0,0.9885430335998536,0.994496762752533,0.9946423768997192,0.0,accept,unanimous_agreement
198128237,9072,i would place this block at the bottom of general tab section.,0,0,0,0.9868359565734864,0.9925069212913512,0.9916433095932008,0.0,accept,unanimous_agreement
198129804,9072,i would add const to `handle`.,0,0,0,0.9884697198867798,0.9892972111701964,0.9941701889038086,0.0,accept,unanimous_agreement
198129859,9072,here too.,0,0,0,0.9753128290176392,0.989098072052002,0.969845414161682,0.0,accept,unanimous_agreement
198130624,9072,"optional, i would use unique_ptr for it, and at other new/delete pairs.",0,0,0,0.9881690740585328,0.9936436414718628,0.994954526424408,0.0,accept,unanimous_agreement
198131382,9072,"just realize this is just moving the old code, so whatever you like...",0,0,0,0.9047337174415588,0.7483070492744446,0.988897144794464,0.0,accept,unanimous_agreement
198131715,9072,i wouldn't want to change this existing code in this pr. i just moved it here as is (i mean all python and windows registry related code).,0,0,0,0.9768370985984802,0.9777886271476746,0.9777504205703736,0.0,accept,unanimous_agreement
198132171,9072,"i suppose now this should be in foreignapps, maybe in later pr?",0,0,0,0.9871413707733154,0.9915892481803894,0.9888684749603271,0.0,accept,unanimous_agreement
198132733,9072,also i would stop any conversations here until pr will be generally approved by . i feel i make unnecessary work...,-1,-1,-1,0.9819207787513732,0.8733774423599243,0.9583425521850586,-1.0,accept,unanimous_agreement
198133669,9072,"ok, although i wish to see this merged.",0,0,0,0.978270411491394,0.952544927597046,0.9892082810401917,0.0,accept,unanimous_agreement
198134690,9072,"if this lands, i'm going to submit a pr adding cpack support to build windows installers (probably via wix) and mac os bundles.",0,0,0,0.9868964552879332,0.9867317080497742,0.9902979731559752,0.0,accept,unanimous_agreement
211212313,9375,"`const qstring working {qlatin1string(""working"")};` etc.",0,0,0,0.9868682622909546,0.989784300327301,0.991969883441925,0.0,accept,unanimous_agreement
213227471,9375,`qvariantlist trackerlist {getstickytrackers(torrent)};`,0,0,0,0.980413854122162,0.9924983382225036,0.993589162826538,0.0,accept,unanimous_agreement
213228540,9375,forward declare it instead: `class bittorrent::torrenthandle;` and revert this and also in cpp file.,0,0,0,0.9848828911781312,0.994619607925415,0.992073655128479,0.0,accept,unanimous_agreement
213228800,9375,`qvariantlist getstickytrackers(const bittorrent::torrenthandle* torrent) const;`,0,0,0,0.9844604134559632,0.9772841930389404,0.9932045936584472,0.0,accept,unanimous_agreement
213229031,9375,"remove `static`s, no point doing so imo.",0,0,0,0.697112500667572,0.934483528137207,0.7819273471832275,0.0,accept,unanimous_agreement
213230549,9375,not accustomed to list initialization? [code block],0,0,0,0.9660515189170836,0.9881949424743652,0.9909707307815552,0.0,accept,unanimous_agreement
213230881,9375,?? you're not using the constant defined above...,-1,-1,0,0.6457054615020752,0.6114466786384583,0.8030891418457031,-1.0,accept,majority_agreement
213231762,9375,also i would write it: [code block],0,0,0,0.986947536468506,0.9909487366676332,0.9956113696098328,0.0,accept,unanimous_agreement
213233085,9375,"move `stickytrackers` declaration above this line and initialize it, seems you're following c rules in modern c++ code... :\",-1,-1,-1,0.980217695236206,0.9851657152175904,0.9941874742507936,-1.0,accept,unanimous_agreement
213233658,9375,use range-based `for` loop.,0,0,0,0.9871588945388794,0.989582657814026,0.9927043914794922,0.0,accept,unanimous_agreement
213234478,9375,"not sure, how about: [code block]",0,0,0,0.9798395037651062,0.957170844078064,0.9586142301559448,0.0,accept,unanimous_agreement
213262727,9375,"tracker_received == ""num_peers"" ?",0,0,0,0.9874923229217528,0.9923917651176452,0.9929295182228088,0.0,accept,unanimous_agreement
213262899,9375,received count of what?,0,0,0,0.9804656505584716,0.942031741142273,0.9842849373817444,0.0,accept,unanimous_agreement
213286007,9375,const bittorrent::torrenthandle *torrent,0,0,0,0.983843982219696,0.9781429767608644,0.986507773399353,0.0,accept,unanimous_agreement
213286995,9375,"does this function depend on torrentscontroller? if not, it would be better to have it in an anonymous namespace instead.",0,0,0,0.9876335859298706,0.994720697402954,0.992362141609192,0.0,accept,unanimous_agreement
213287461,9375,please see my previous comment.,0,0,0,0.9756402969360352,0.953469216823578,0.9933403134346008,0.0,accept,unanimous_agreement
213372314,9375,"the value associated with this key is used to display the tracker ""received"" count, but for legacy reasons the key is `num_peers`. we can't change this without breaking the api.",0,0,0,0.9858967661857604,0.9902376532554626,0.9861257672309875,0.0,accept,unanimous_agreement
213487543,9375,"maybe you'd better add four new keys and leave ""num_peers"" for a deprecation later on?",0,0,0,0.9808151721954346,0.9942166805267334,0.9887006878852844,0.0,accept,unanimous_agreement
214396577,9375,i couldn't quite figure out the syntax for this. thanks!,1,1,1,0.9779480695724488,0.9893715381622314,0.9622530341148376,1.0,accept,unanimous_agreement
214397743,9375,definite goof on my end,-1,-1,-1,0.710600733757019,0.9769858717918396,0.987346351146698,-1.0,accept,unanimous_agreement
214400387,9375,will move it to an anonymous namespace,0,0,0,0.9880472421646118,0.9922490119934082,0.9945414662361144,0.0,accept,unanimous_agreement
214403841,9375,"not quite sure, but this is the nomenclature used in the gui. it looks like it might be the total number of other clients we're connected to.",0,0,0,0.9855557680130004,0.9637823104858398,0.9560092091560364,0.0,accept,unanimous_agreement
214414612,9375,"this change results in the `getstickytrackers` qlist being added as an element of `trackerlist`, rather than the elements of `getstickytrackers` being added.",0,0,0,0.987280011177063,0.9933323264122008,0.9939700365066528,0.0,accept,unanimous_agreement
214416507,9375,"oops, it is because using the braces, can you give it one last try: [code block]",-1,0,0,0.7089166641235352,0.8757112622261047,0.9253345131874084,0.0,accept,majority_agreement
214418270,9375,that worked!,1,1,1,0.8783136010169983,0.9782400727272034,0.961363971233368,1.0,accept,unanimous_agreement
214421608,9375,"seems these strings need to be translated, try `const qstring privatemsg {qcoreapplication::translate(""trackerlistwidget"", ""this torrent is private"")};` see if it works.",0,0,0,0.9857661724090576,0.9939228892326356,0.9940930008888244,0.0,accept,unanimous_agreement
214433569,9375,the translation works now.,0,0,0,0.985398769378662,0.9598760008811952,0.9630950689315796,0.0,accept,unanimous_agreement
214435360,9375,"hell, i really don't like the tendency of recent changes to return translated text from an api (and generally, return anything visible directly to the user). you generate unnecessary dependencies again. but i guess you all don't care...",-1,-1,-1,0.9891274571418762,0.9914475679397584,0.993936002254486,-1.0,accept,unanimous_agreement
214504192,9375,or maybe return some constant (integers?) here and do the translation at client side? however i'm not sure how to fetch translated strings at javascript... or this need some html tricks...,0,0,0,0.6657613515853882,0.7372341156005859,0.986200749874115,0.0,accept,unanimous_agreement
214506337,9375,javascript sources are translatable as well. you can easily create error code to description text mapping there.,0,0,0,0.9890905022621156,0.9896268844604492,0.9949181079864502,0.0,accept,unanimous_agreement
214514774,9375,"not only **error** codes. any kind of **status** codes. integers aren't required, of course. they can be some string codes (e.g. ""working"", ""paused"" etc.).",0,0,0,0.9858716130256652,0.9917548894882202,0.9864068627357484,0.0,accept,unanimous_agreement
214518212,9375,"i’m having trouble following, what is the actual recommendation here? unless someone feels very strongly, i’m inclined to leave these as is.",-1,-1,-1,0.9155858755111694,0.7380013465881348,0.9249101877212524,-1.0,accept,unanimous_agreement
214532308,9375,"the point is that the api is a data source and it should provide data in the form of their values, not their specific representation. client app handles received data and provide it to the user in form of particular representation (e.g. api provide tracker status as [working; disabled] and then client app show it as translated string, or some color, or icon etc.).",0,0,0,0.9865185618400574,0.9924457669258118,0.9889651536941528,0.0,accept,unanimous_agreement
214632475,9375,"i investigated further, it's the total number of peers the torrent is connected to. it's documented [a link] for `torrent_status::numpeers`.",0,0,0,0.9867837429046632,0.9900662899017334,0.9923385381698608,0.0,accept,unanimous_agreement
214988671,9375,why this overchecking? how can empty string be valid url? isn't `if (url.isvalid())` enough?,0,0,0,0.9673253893852234,0.9833905100822448,0.956205666065216,0.0,accept,unanimous_agreement
216627935,9375,"why do you need ""edit tracker"" abstraction? since there are no more properties of the tracker that determine its individuality among other trackers of the same torrent, it is enough to have only ""add"" and ""remove"" actions. let's compare set of integers and set of objects (having several properties). in tge first case we can just remove one int and add another (like in your case), but in the second case we should have separate ""edit"" action since ""remove"" + ""add"" can have different side effect.",0,0,0,0.9847248196601868,0.991349160671234,0.9861885905265808,0.0,accept,unanimous_agreement
216749576,9375,probably to make the change atomic.,0,0,0,0.9809522032737732,0.990039885044098,0.984706461429596,0.0,accept,unanimous_agreement
216754358,9375,"well, it can be acceptable reason in case of web api. but the correct name for this action is ""replace"". the more atomic action is replace current set of trackers with the new one.",0,0,0,0.987084686756134,0.9920126795768738,0.9934590458869934,0.0,accept,unanimous_agreement
217584092,9375,"this is an implementation detail that shouldn't be exposed to the user. to them, they're ""editing"" a specific tracker, which also aligns with the nomenclature in the gui.",0,0,0,0.9869914650917052,0.9048547744750975,0.9897476434707642,0.0,accept,unanimous_agreement
217597536,9375,"i don't think this naming is correct, see `num_peers`: [a link] it should be the number of peers from a tracker, so how about `col_tracker_peers`?",0,0,0,0.985042929649353,0.9865127801895142,0.9834521412849426,0.0,accept,unanimous_agreement
217599290,9375,`if (qurl(urlstr).isvalid())`,0,0,0,0.987644374370575,0.9927714467048644,0.99438214302063,0.0,accept,unanimous_agreement
217599324,9375,"this was changed because the column name ""received"" is confusing. no one knows what it means. libtorrent refers to this data as ""peers,"" but this is different than what a user normally thinks of as a ""peer."" what do you think a better name for this column could be? i'm honestly not sure. if we can't think of anything good it can always just remain as `received`.",-1,-1,-1,0.7339479327201843,0.8991394639015198,0.6031209230422974,-1.0,accept,unanimous_agreement
217599375,9375,add `const` to these vars.,0,0,0,0.9872832298278807,0.9925133585929872,0.9950910806655884,0.0,accept,unanimous_agreement
217599484,9375,`const` here,0,0,0,0.9842187762260436,0.9900168776512146,0.9938904047012328,0.0,accept,unanimous_agreement
217599744,9375,this can't be const because we modify `trackers`'s members,0,0,0,0.9856387972831726,0.9902428984642028,0.9929734468460084,0.0,accept,unanimous_agreement
217599981,9375,"imo `connections` could be wrongly read as on-going connection count, which is not true.",0,0,0,0.9641607403755188,0.9817943572998048,0.982781708240509,0.0,accept,unanimous_agreement
217600126,9375,"hmm, utorrent doesn't have this field...",0,-1,0,0.6703858375549316,0.6494183540344238,0.9500495791435242,0.0,accept,majority_agreement
217601070,9375,"nitpick, i would move this line above `newtracker` declaration.",0,0,0,0.9894644021987916,0.9906883239746094,0.9916308522224426,0.0,accept,unanimous_agreement
217607155,9375,the [a link] say that it fixes any mistakes on the string but you're passing the original string. isn't it possible that the qurl constructor will fix some problems that would make isvalid() false?,0,0,0,0.9752421975135804,0.9785305857658386,0.9924370646476746,0.0,accept,unanimous_agreement
217667712,9375,are we discussing the user interface? i think we're talking about api.,0,0,0,0.9828686714172364,0.9717345237731934,0.9905641078948976,0.0,accept,unanimous_agreement
217669420,9375,"i've noticed that you preserve tracker ""tier"" so let it be ""edit"" action.",0,0,0,0.9870757460594176,0.9871705174446106,0.9920908212661744,0.0,accept,unanimous_agreement
217890932,9375,the api is exposed to users as well...,0,0,0,0.9871793389320374,0.9919312596321106,0.9952464699745178,0.0,accept,unanimous_agreement
217891172,9375,"good point, i'll use the qurl string.",1,1,1,0.6257328391075134,0.5687691569328308,0.9544222354888916,1.0,accept,unanimous_agreement
217891744,9375,why is the format of this parameter different from the format of same parameter in addtrackersaction? i mean urls separator.,0,0,0,0.9738319516181946,0.9891854524612428,0.9894046783447266,0.0,accept,unanimous_agreement
217891803,9375,"wait, all of the apis in `torrentscontroller` already return translated strings. this is a non-issue. i will change the api back to return translated strings.",0,0,0,0.9836677312850952,0.9740995168685912,0.9903302192687988,0.0,accept,unanimous_agreement
217892111,9375,"`addtrackersaction` uses new line as a delimiter, which is pretty non-standard. almost all our apis use a pipe, including `removetrackersaction`.",0,0,0,0.9656482934951782,0.8666488528251648,0.9548206329345704,0.0,accept,unanimous_agreement
217892531,9375,"damn! this is an old issue. why not just fix old ones? we need to learn from other people's mistakes, not repeat them. well, if everyone else thinks my arguments are worthless, you can go on as you like. , , ?",-1,-1,-1,0.990767776966095,0.993043839931488,0.9954909682273864,-1.0,accept,unanimous_agreement
217892554,9375,"then wrong things should be fixed, isn't it?",-1,0,0,0.7279605269432068,0.6794062256813049,0.6077907681465149,0.0,accept,majority_agreement
217892923,9375,that’s a breaking api change not part of this pr.,0,0,0,0.8196612000465393,0.7932755351066589,0.9850860834121704,0.0,accept,unanimous_agreement
217893028,9375,"you really like jumping on my prs to report your issues with the general qbittorent architecture. please, open a separate pr fixing the issues that you see. it should not hold back new features that follow the existing architecture.",1,0,0,0.9092417359352112,0.8557502031326294,0.8753199577331543,0.0,accept,majority_agreement
217893053,9375,feel free to open a pr fixing it.,0,0,0,0.6807454824447632,0.7185630202293396,0.9878161549568176,0.0,accept,unanimous_agreement
217901128,9375,"but changing it now will surely break api... we should enforce correct design for new code, but the issue here is old, personally i would turn a blind eye for this specific case. just asking for your opinion here, what do you think about the idea (do i18n strings replacement in html file) in [a link] is it much hassle to do it?",-1,-1,-1,0.8771073222160339,0.7981067299842834,0.9287111759185792,-1.0,accept,unanimous_agreement
217901156,9375,`const qurl url {urlstr.trimmed()};`,0,0,0,0.9851028919219972,0.9921686053276062,0.9932386875152588,0.0,accept,unanimous_agreement
217901984,9375,"it's easy to do for static strings in html files, but more difficult to do for api responses. we end up with code that's very tightly coupled to specific api versions, such as [code block] i would think it's considered a feature that the current apis return translated string values.",0,0,0,0.981044352054596,0.9070346355438232,0.9854871034622192,0.0,accept,unanimous_agreement
217902252,9375,"thank you, i hope that doesn't mean impossible for api responses. i think it *might* be a feature if there are 2 seperate values returned, such as: [code block] my point is, if we ~~always~~ only return translated strings, then it is cumbersome to write code for the api, as one will need to take locale settings into consideration.",1,1,1,0.8170283436775208,0.8964338302612305,0.9613824486732484,1.0,accept,unanimous_agreement
217928329,9375,"i too am leaning towards `tracker peers` now. i think it's more clear, but maybe i've just been thinking about it too long. shall we give it some time and see if anyone objects?",0,0,0,0.7914486527442932,0.6108521819114685,0.9454876780509948,0.0,accept,unanimous_agreement
217943620,9375,lets proceed!,0,1,0,0.9437518119812012,0.6288221478462219,0.9882678389549256,0.0,accept,majority_agreement
217952075,9375,"i wonder if it's just me that think this is even more confusing than ""received"". i mean because there is already a peers column and people will wonder ""huh? why there are 2 peer columns and which is which. which is the one i want?""",-1,-1,0,0.8746257424354553,0.889985203742981,0.628328263759613,-1.0,accept,majority_agreement
217952677,9375,we changed these in e2b46f01bb19b7faba0f4b3dd050115562ac16c3,0,0,0,0.9799547791481018,0.981351375579834,0.994356095790863,0.0,accept,unanimous_agreement
218199001,9375,"disagree. we should not spawn such flaws where we have the ability to get around it without breaking api. and we have to seriously consider the need to get rid of this ""feature"" with the next more or less big api update. in this particular case let it be as is. it's nothing personal. this is our usual practice. unfortunately, our resources are too limited to allow us to make major architectural changes at a time. none of the project members knows exactly all the code (especially if it has a long history). we often detect some problems in some parts of the code affected by some (possible unrelated) changes. and we try to solve them along the way, if possible (usually offer to do it to the author of the affected pr).",-1,-1,-1,0.8435292840003967,0.7924882173538208,0.8763830661773682,-1.0,accept,unanimous_agreement
218285225,9375,"let's create issues for these large architectural changes, rather than holding up individual features. in certain cases it might be reasonable, but there's no point in holding back a new feature because we can't decide if the api should return translated strings. just one example, but the point being that we can still make incremental progress while acknowledging large changes that need to occur.",0,0,0,0.9662361145019532,0.9626412391662598,0.9858567714691162,0.0,accept,unanimous_agreement
218285647,9375,"i've implemented this change client side (in `prop-trackers.js`). it seems more reasonable to me that this api would return numbers rather than strings, but am open to discuss if you feel strongly.",0,0,0,0.9518972635269164,0.8545894622802734,0.9908711314201356,0.0,accept,unanimous_agreement
218286232,9375,"maybe `tracker connections`? but then this might mislead users into thinking they're connected to all of those peers. then again, `seeds` and `peers` should make it clear how many peers they're connected to. i think all of this confusion stems from the ambiguous use of `peers` to generally mean other bittorrent clients, and also to mean other users downloading the file (w/ <100% progress).",0,0,0,0.8685154914855957,0.9698615670204164,0.9826933145523072,0.0,accept,unanimous_agreement
218286707,9375,i suppose this still doesn't disambiguate an unconnected tracker from a connected tracker with 0 seeds/peers. i'll move the change to the api.,0,0,0,0.9866210222244264,0.9810428619384766,0.99162358045578,0.0,accept,unanimous_agreement
218287633,9375,"i know i'm going back and forth on this one, but now i'm thinking the right option is to return a number (with -1 representing not connected). it seems wrong that a ""count"" value would return a string.",0,0,0,0.8167205452919006,0.8116186857223511,0.7889915108680725,0.0,accept,unanimous_agreement
218287853,9375,"isn't ""leech"" mean that? ""peer"" is any client, afaik.",0,0,0,0.9826274514198304,0.9826762676239014,0.9895126223564148,0.0,accept,unanimous_agreement
218288495,9375,"yes, i couldn't think of this word but i think it solves this issue. i propose the columns should be `peers`, `seeds`, and `leeches`. it should resolve the confusion and is the most ""correct.""",0,0,0,0.9695614576339722,0.9203221797943116,0.7623698711395264,0.0,accept,unanimous_agreement
218303154,9375,"but _peers_ imply all the peers the tracker knows of, doesn't it? personally i can't think of something short and more descriptive than _received_ but i'm biased because i already know what it refers to...",-1,-1,0,0.8514375686645508,0.5493559837341309,0.7965800762176514,-1.0,accept,majority_agreement
218673983,9375,"libtorrent refers to this field as `num_peers`, describing it as ""the number of peers this torrent currently is connected to"" [a link]].",0,0,0,0.9863706827163696,0.9923967719078064,0.99399334192276,0.0,accept,unanimous_agreement
218681628,9375,"// tells how many peers the tracker returned in this response. this is // not expected to be greater than the ``num_want`` settings. these are not necessarily // all new peers, some of them may already be connected. int num_peers; [a link]",0,0,0,0.987217128276825,0.9924437403678894,0.992137372493744,0.0,accept,unanimous_agreement
219683664,9375,"can anyone else chime in on whether they find this confusing? i would like to go ahead with `peers`, `seeds`, and `leeches` but we can revisit if others disagree.",0,0,0,0.977163791656494,0.7804909944534302,0.9677254557609558,0.0,accept,unanimous_agreement
219699609,9375,i'm ok with peer/seeds/leeches. thx for this functionality!,1,1,1,0.7007932662963867,0.9773971438407898,0.9912780523300172,1.0,accept,unanimous_agreement
227036500,9375,please revert this change (and all the related changes). it's not required by your feature and it's questionable (absolutely meaningless for me personally) to apply it in passing.,-1,0,-1,0.6268216967582703,0.7985585331916809,0.8009623289108276,-1.0,accept,majority_agreement
227039996,9375,i don't see any reason we wouldn't want this change. in the future i'll move unrelated changes to their own pr; this commit is already a part of this so no point in moving now.,-1,0,0,0.8389851450920105,0.9249182343482972,0.9626629948616028,0.0,accept,majority_agreement
227087675,9375,"the reason is at least the changes in this line makes functor declaration to be confusing (having ""const"" applied to parameter passed by value in function declaration is meaningless and confusing). having ""const"" in the following places of this function has minimal meaning since the function code is too trivial and it isn't supposed to become any more complex in the future (but there are no errors formally and some adherents of the ""paranoid"" safety can insist on its use). the same can be said about the definition of methods that we pass in ""applytotorrents()"" when calling (usually it is some one-liner). well, i'm not going to insist on the revert of the formally correct changes, if others deem them acceptable. but i insist on never having ""const"" applied to ""byval"" parameters in function declaration.",0,0,0,0.6471653580665588,0.9656320810317992,0.9818328619003296,0.0,accept,unanimous_agreement
227198788,9375,"on this point we agree that's mainly my goal here. the point *can* be const, so why not enforce it.",0,0,0,0.9542670845985411,0.98047536611557,0.9870418310165404,0.0,accept,unanimous_agreement
227218191,9375,"ok, fix this one and let's proceed.",0,0,0,0.9762957096099854,0.968725323677063,0.9912106990814208,0.0,accept,unanimous_agreement
227436213,9375,"sorry, i don't follow. is your issue with this line `bittorrent::torrenthandle *const torrent`?",-1,-1,-1,0.9865686893463136,0.990581750869751,0.9889332056045532,-1.0,accept,unanimous_agreement
227450278,9375,"yes. ""std::function"" template argument is similar to function declaration so it should be affected by the restriction above.",0,0,0,0.9883708953857422,0.9936622381210328,0.992049276828766,0.0,accept,unanimous_agreement
227466889,9375,"but we aren't passing the torrent by value, we're passing a pointer to it.",0,0,0,0.9673153162002563,0.987698256969452,0.9902068972587584,0.0,accept,unanimous_agreement
227480438,9375,"yes. we're passing ""pointer to torrent"" by value.",0,0,0,0.9882653951644896,0.9857121109962464,0.9880427122116088,0.0,accept,unanimous_agreement
227502692,9375,ah i see. what would the syntax be to have the pointer passed by pointer/reference?,0,0,0,0.9386136531829834,0.9487106800079346,0.9920414090156556,0.0,accept,unanimous_agreement
227509526,9375,"pointer by reference: `torrenthandle *&torrent`. ""pointer by pointer"" is incorrect term. you can just have ""pointer to pointer"" (or even ""pointer to pointer to pointer ... to pointer"") and pass it either by value or by reference.",0,0,0,0.984119176864624,0.9916302561759948,0.9919344186782836,0.0,accept,unanimous_agreement
234105416,9375,"now the `""n/a""` strings can be translated by wrapping in qbt_tr",0,0,0,0.9871199131011964,0.9951633214950562,0.9945439100265504,0.0,accept,unanimous_agreement
234108825,9375,it seems we can make it a few lines shorter without sacrificing too much readability: [code block],0,0,0,0.9838961362838744,0.9844195246696472,0.98824942111969,0.0,accept,unanimous_agreement
234489874,9375,this version looks much cleaner. will change,0,0,0,0.6716539263725281,0.6488173604011536,0.8788613677024841,0.0,accept,unanimous_agreement
236225295,9375,a suboptimal combination of conditions leads to such repetitions (`if (peer.isseed())`). i would have carried it outside.,0,0,0,0.9769902229309082,0.9753370881080629,0.9787176847457886,0.0,accept,unanimous_agreement
236227238,9375,"well you will not convince me that this is the correct way! haha, it depends on the translations from the gui components!.. however, i don't want to open your eyes anymore so you can ignore this comment.",-1,-1,1,0.7161367535591125,0.9914385080337524,0.8406199812889099,-1.0,accept,majority_agreement
236228136,9375,do we support libtorrent < 1.0?,0,0,0,0.9883049726486206,0.9938092827796936,0.9956437349319458,0.0,accept,unanimous_agreement
236230228,9375,i would throw conflict error instead. the resource affected by this request is torrent. so it's correct to throw notfound error only in case of missing torrent.,0,0,0,0.9855934977531432,0.9782756567001344,0.9831663370132446,0.0,accept,unanimous_agreement
238122690,9375,pretty sure we don't actually. do you know?,0,0,0,0.9709188938140868,0.9368799924850464,0.9764235615730286,0.0,accept,unanimous_agreement
238125482,9375,definitely should be conflict. will update this.,0,0,0,0.914325475692749,0.6060499548912048,0.9753833413124084,0.0,accept,unanimous_agreement
238139410,9375,we don't support libtorrent < 1.0. i just thought you had the wrong version number here...,-1,-1,0,0.9052860736846924,0.7501682639122009,0.9362385272979736,-1.0,accept,majority_agreement
238145036,9375,this was copied over from `trackerlistwidget.cpp`. i'll remove that code too,0,0,0,0.9887902736663818,0.9935552477836608,0.9955096244812012,0.0,accept,unanimous_agreement
238145288,9375,"changed to check `peer.isseed()` before checking dht, pex, and lsd",0,0,0,0.9871190786361694,0.9947452545166016,0.994921624660492,0.0,accept,unanimous_agreement
238145472,9375,addressed this in my latest commit. translation of `status` is now done client-side. the `msg` is still translated server-side since in most cases it's not actually translated at all. it might even make sense to remove translation of the `msg` field entirely.,0,0,0,0.988815426826477,0.993226945400238,0.9931896328926086,0.0,accept,unanimous_agreement
238147525,9375,"i think this structure still leads to unnecessary checks, it should be: [code block] let's see if we modify the old code: [code block] personally i like the old code better: it groups the protocols together, not separated away by `isseed()` flag. and the number of checks done is essentially the same.",0,0,0,0.7367383241653442,0.9506348371505736,0.9083576798439026,0.0,accept,unanimous_agreement
238225641,9375,i wonder if the following is possible: [code block] can you test it?,0,0,0,0.9364846348762512,0.9867092967033386,0.9849980473518372,0.0,accept,unanimous_agreement
238227375,9375,"""conflict""",0,0,0,0.6112657785415649,0.9752402305603028,0.5542562007904053,0.0,accept,unanimous_agreement
238229898,9375,"real trackers can return untranslated messages so it doesn't make much sense to translate this message. otherwise, if you still want to do it, i wouldn't rely on translation from gui and have own one.",0,0,0,0.9674687385559082,0.9123181700706482,0.980022668838501,0.0,accept,unanimous_agreement
239321164,9375,i don't think it's worth sacrificing readability to save a couple lines,0,0,0,0.560064435005188,0.510360836982727,0.8128681182861328,0.0,accept,unanimous_agreement
239321755,9375,"are we certain that a peer cannot come from multiple sources here? maybe that doesn't make sense (please tell me), but the `peer_info` docs[0] state ""the flags indicating which sources a peer can have come from. a peer may have been seen from multiple sources"". it's very possible that doesn't include dht/lsd/pex, but just want to be certain. [0] [a link]",0,0,0,0.9826030731201172,0.9906028509140016,0.9864321351051332,0.0,accept,unanimous_agreement
239322199,9375,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
239389247,9375,"no, my example code is wrong.",-1,-1,0,0.7264598608016968,0.6967335343360901,0.8657780289649963,-1.0,accept,majority_agreement
239998933,9375,"`nativeentry()` is for internal use! if someone need these fields they should be provided via **bittorrent::trackerentry** interface. i can see that you just copied the code from gui, so the questions are not to you, but to who added it originally. you're free to not fixing it here.",0,0,0,0.9399794936180116,0.9380512833595276,0.9368765354156494,0.0,accept,unanimous_agreement
305440861,10948,rss,0,0,0,0.985757291316986,0.8913198709487915,0.8656577467918396,0.0,accept,unanimous_agreement
305443650,10948,"i would like more specific name, e.g. ""iconmapping.json"" or ""iconconfig.json""",0,0,0,0.943648636341095,0.9930485486984252,0.989038586616516,0.0,accept,unanimous_agreement
305565897,10948,or just `config.json` if it is supposed to be in `icons` directory.,0,0,0,0.9888864159584044,0.99489426612854,0.9946845173835754,0.0,accept,unanimous_agreement
305565938,10948,i mean all `rss` occurrences in icon ids.,0,0,0,0.987846314907074,0.9894081354141236,0.9921703934669496,0.0,accept,unanimous_agreement
310379086,10948,"i would use ""aboutdialog.logo"".",0,0,0,0.9882370829582214,0.9918821454048156,0.9905098080635072,0.0,accept,unanimous_agreement
310392568,10948,: it is my understanding that the same icon is used in multiple places (including the system tray). do you really want to name the icon based on only one of those components?,0,0,0,0.9701020121574402,0.9768623113632202,0.9897502064704896,0.0,accept,unanimous_agreement
310395736,10948,", if you had followed #10903, you might have understood my intentions... [a link]",0,0,0,0.9705399870872498,0.899296760559082,0.9625122547149658,0.0,accept,unanimous_agreement
312428426,10948,why do you need this extra scope?,0,0,0,0.9683115482330322,0.9746652841567992,0.9902098178863524,0.0,accept,unanimous_agreement
312576480,10948,seems like you should fallback to built-in icons in case of error here (e.g. set usecustomuitheme to false).,0,0,0,0.980897843837738,0.9911249279975892,0.988781750202179,0.0,accept,unanimous_agreement
312577761,10948,valid json document can be array so you need to check wether it is really object.,0,0,0,0.9876345992088318,0.986905038356781,0.9926803708076476,0.0,accept,unanimous_agreement
312601546,10948,you should check for empty icon path here since it is error case. also you should cache icon path for given icon id in m_iconmap to avoid searching by pattern next time.,0,0,0,0.9887264370918274,0.9945131540298462,0.9935423135757446,0.0,accept,unanimous_agreement
312603799,10948,seems this method has logical errors. i need to get a fresh look at it.,0,0,0,0.6603952646255493,0.6836754083633423,0.7057719826698303,0.0,accept,unanimous_agreement
312703135,10948,only here? what if the resource file doesn't have `iconconfig.json` or when some `iconid` can't be found in the custom `iconconfig.json`,0,0,0,0.9887730479240416,0.9918339252471924,0.9906235337257384,0.0,accept,unanimous_agreement
312734982,10948,do the code inside `if (m_usesystemtheme) {}` still work? it is important for linux users to use native icons.,0,0,0,0.9894375801086426,0.9940316081047058,0.9945559501647948,0.0,accept,unanimous_agreement
312925504,10948,i don't think it will work since the changes also include the id supplied to `geticonpath`,0,0,0,0.981930673122406,0.979616403579712,0.9638450145721436,0.0,accept,unanimous_agreement
312928272,10948,"as i understand it, ""native icons"" should be used (if enabled) no matter what theme is selected, built-in or custom?",0,0,0,0.9873364567756652,0.9937983155250548,0.993372678756714,0.0,accept,unanimous_agreement
312965549,10948,i think yes.,0,0,0,0.965730369091034,0.9288822412490844,0.967261016368866,0.0,accept,unanimous_agreement
313801422,10948,for this we can have another config file with system icons as mapped values,0,0,0,0.9857965111732484,0.9926655888557434,0.994658887386322,0.0,accept,unanimous_agreement
313901568,10948,i think something like that will be needed...,0,0,0,0.9426387548446656,0.9447778463363647,0.9806710481643676,0.0,accept,unanimous_agreement
319027868,10948,is it really good idea to reset preference?,0,0,0,0.9793204069137572,0.9657835960388184,0.9832817912101746,0.0,accept,unanimous_agreement
319028472,10948,else if,0,0,0,0.9654922485351562,0.916816234588623,0.9917526841163636,0.0,accept,unanimous_agreement
319028627,10948,else,0,0,0,0.975243330001831,0.8998281359672546,0.6129312515258789,0.0,accept,unanimous_agreement
319030652,10948,"it's meaningless. what can the user guess after seeing this message in the log? it should be something like ""invalid icon configuration file format. json object is expected.""",0,-1,-1,0.7164953351020813,0.918677031993866,0.6767323017120361,-1.0,accept,majority_agreement
319031277,10948,dot is missing in the end of message.,0,0,0,0.9418511986732484,0.9874476790428162,0.9729681015014648,0.0,accept,unanimous_agreement
319180314,10948,"i'm not sure that's right... does it make sense to override mapping for ""system theme"" icons in a custom theme? shouldn't there just be a three-state option (default-system-custom)? ?",0,0,0,0.506008505821228,0.6289629936218262,0.8118311762809753,0.0,accept,unanimous_agreement
319181586,10948,you should compare with mapped icon id to follow current logic. otherwise it's meaningless.,-1,0,0,0.5461388230323792,0.9290079474449158,0.9885692596435548,0.0,accept,majority_agreement
319187666,10948,"i strongly dislike it in this way. you need to merge `utils::gui::scaledpixmapsvg()` and `utils::gui::scaledpixmap()`. also the first parameter shouldn't be changed to iconid. you just should to call it as `utils::gui::scaledpixmapsvg(uithememanager::geticonpath(""aboutdialog.logo""), this, 32)`",-1,-1,-1,0.9263549447059632,0.8622041940689087,0.9840960502624512,-1.0,accept,unanimous_agreement
319191780,10948,also how do you suppose to provide fallback icon now? it seems that it should come from (system theme) icon mapping now.,0,0,0,0.9885268211364746,0.9936075210571288,0.9943884015083312,0.0,accept,unanimous_agreement
319193066,10948,shouldn't we cache flag icons too?,0,0,0,0.984321355819702,0.9934685230255128,0.9933040738105774,0.0,accept,unanimous_agreement
319355873,10948,i think not. i agree although i haven't checked how the gui should look like.,0,0,0,0.9535382986068726,0.9259875416755676,0.9655213952064514,0.0,accept,unanimous_agreement
319499580,10948,"or (even better, imo) keep `geticonpath()` private and implement `uithememanager::getpixmap()` that encapsulates all needed logic.",0,0,0,0.9882479310035706,0.9943127632141112,0.987147092819214,0.0,accept,unanimous_agreement
319500014,10948,shouldn't this one be immutable?,0,0,0,0.9531551599502563,0.9878058433532716,0.987575888633728,0.0,accept,unanimous_agreement
319505233,10948,[code block] instead of two lines of code.,0,0,0,0.9857032895088196,0.9905911087989808,0.9891184568405152,0.0,accept,unanimous_agreement
319509337,10948,will it repeat this message time this icon id is requested? or just empty icon is created and cached?,0,0,0,0.9883334636688232,0.992903172969818,0.9943444728851318,0.0,accept,unanimous_agreement
319598716,10948,"since missing id isn't really error case (as i said before this case can occur when new id is introduced in some qbittorrent version but theme is outdated yet) you should fallback to default theme icon. the real error cases are: 1. empty filename 2. file doesn't exist imo, we should reject such invalid theme at all (and show message to the user). i also think you can check theme for these errors once it is loaded (since loaded theme is immutable).",0,0,0,0.9835404753684998,0.9921757578849792,0.986922562122345,0.0,accept,unanimous_agreement
319728820,10948,"did you mean by following? [code block] if yes, then `scaledpixmapsvg` requires to have some key to cache, so will it be better to move `scaledpixmap` and `scaledpixmapsvg` both inside the `uithememanager`.",0,0,0,0.9895598888397216,0.9945735335350036,0.9957655668258668,0.0,accept,unanimous_agreement
319730473,10948,i mean you should implement only one of the following: [code block] the client code should know nothing about the type of some particular icon/pixmap (it can be different in different theme). so the function should determine it itself.,0,0,0,0.9862765073776244,0.991265594959259,0.9902225732803344,0.0,accept,unanimous_agreement
319732297,10948,i tried implementing `uithememanager::getpixmap` because then everything will be in one place.i implement this on the basis of scaledpixmapsvg. can you check now?,0,0,0,0.9799798727035522,0.9881761074066162,0.9926875829696656,0.0,accept,unanimous_agreement
319742929,10948,does it make sense that a `getpixmap` operation having a `qwidget` as one of the parameters? or maybe a more precise function name is in need?,0,0,0,0.9861328601837158,0.9953487515449524,0.9922776222229004,0.0,accept,unanimous_agreement
319743068,10948,"i haven't been following closely to this pr, so pardon if it doesn't make sense in advance. i think merging these functions within existing uithememanager methods is a bad idea, those are image scaling functions, it should be preserved in it own form (private functions in uithememanager is acceptable for me, and making it public when required). see how you load `mascot.png`, spilling all the unnecessary details of image scaling details into it.",-1,-1,-1,0.9491852521896362,0.7727598547935486,0.7779096364974976,-1.0,accept,unanimous_agreement
319743108,10948,"there is also a second consideration to be discussed, is it correct/preferable that a theme manager needs to be concerned about image scaling? sure it simplifies the code using it, but the big picture looks weird to me. of course we can have helper functions that provide such conveniences but they should be static functions of the theme manager class.",-1,-1,-1,0.9651946425437928,0.9852649569511414,0.9687527418136596,-1.0,accept,unanimous_agreement
319743641,10948,`uithememanager::applystylesheet` will fail then.,0,0,0,0.9739513397216796,0.9850062727928162,0.98368501663208,0.0,accept,unanimous_agreement
319743703,10948,uithememanager should provide icon (or pixmap) by its id. the client code (of uithememanager) should know nothing about theme details (e.g. real file types etc.). in some places we need to get scaled pixmap. currently we have two helpers to scale pixmap (depending on its file type). but we can't proceed to use this way considering the above. so i suggested moving this logic inside the uithememanager class. otherwise we can leave only one helper that will scale existing pixmap (not so optimal since we can't use svg optimization).,0,0,0,0.970086634159088,0.9673354029655457,0.9412065744400024,0.0,accept,unanimous_agreement
319743732,10948,getscaledpixmap?,0,0,0,0.9886361956596376,0.9930809140205384,0.993094563484192,0.0,accept,unanimous_agreement
319744043,10948,"i mean `uithememanager::applystylesheet` should be aware of the error, i can have an internal variable.",0,0,0,0.9873090386390686,0.9765491485595704,0.9920834302902222,0.0,accept,unanimous_agreement
319744123,10948,:+1:,0,0,0,0.7570654153823853,0.9166757464408876,0.9328674077987672,0.0,accept,unanimous_agreement
319744678,10948,i think this can work (a careless sketch up): [code block],0,0,0,0.9291247129440308,0.9209538698196412,0.9664584398269652,0.0,accept,unanimous_agreement
319747224,10948,"i think, yes. but uithememanager instance shouldn't call itself indirectly: [code block] also i wouldn't have `widget` as param but `scalingfactor` to be more abstract.",0,0,0,0.9852215647697448,0.9902111291885376,0.9883700609207152,0.0,accept,unanimous_agreement
319968524,10948,now?,0,0,0,0.9759780168533324,0.9796378016471864,0.9896223545074464,0.0,accept,unanimous_agreement
320282662,10948,now i have reset the changes inside `utils.cpp`. i don't do anything with `utils.*`. changed `getpixmap` to `getscaledpixmap` which calls `utils::gui::scaledpixmap` as you guys said.,0,0,0,0.9826539158821106,0.9932113885879515,0.9932965636253356,0.0,accept,unanimous_agreement
320312356,10948,"do you mean by - for every `iconid` which doesn't exist in iconmap, try finding that in defaulticonmap which means - 1. load both default iconconfig and custom iconconfig (if custom is enabled) in the constructor 2. reject custom theme if ""real error case"" exists, (should i check the default theme for errors too, but only show the error) 3. in `geticonpath`, for every `iconid` which doesn't exist in iconmap, try finding that in defaulticonmap",0,0,0,0.9826580882072448,0.9925945401191713,0.9935227632522584,0.0,accept,unanimous_agreement
320332439,10948,"generally, yes. but i think there is a better algorithm: 1. load default iconconfig. check it and show errors (or maybe don't check it at all?). 2. load custom iconconfig. check it and reject if ""real error case"" exists 3. join both iconconfigs (add unique and replace existing values in default config with the ones from custom config. 4. use resulting icon config.",0,0,0,0.9726316928863524,0.9866286516189576,0.9825147986412048,0.0,accept,unanimous_agreement
322019358,10948,"while checking should i load the icon directly i.e store the icons in something like `std::map `,",0,0,0,0.9889883399009703,0.9927625060081482,0.994021475315094,0.0,accept,unanimous_agreement
322330498,10948,ideally it should be private. is there any reason to keep it public?,0,0,0,0.972775399684906,0.9823908805847168,0.9880754947662354,0.0,accept,unanimous_agreement
322332166,10948,i would make it non-static and drop last parameter.,0,0,0,0.987141489982605,0.9777011871337892,0.9899904727935792,0.0,accept,unanimous_agreement
322333899,10948,i would create qstring constants to omit repeated conversions.,0,0,0,0.9838542342185974,0.9853973984718324,0.9920341372489928,0.0,accept,unanimous_agreement
322342020,10948,"on the other hand, it should be really class-independent (and it is actually used to load different files). then just put it in an anonymous namespace in .cpp. you will also have to change the error handling in it (throw runtime error in it and print log message in calling code). imo, using static methods in c++ is unjustified in most cases.",0,0,0,0.7723086476325989,0.8940015435218811,0.903491735458374,0.0,accept,unanimous_agreement
322564488,10948,it's actually used to provide icon path to html [a link],0,0,0,0.98869788646698,0.9934972524642944,0.9950829744338988,0.0,accept,unanimous_agreement
323868653,10948,i now have changed the fallback to fallbacksysthemeicon,0,0,0,0.9859350919723512,0.9844462275505066,0.9913762211799622,0.0,accept,unanimous_agreement
326881764,10948,"maybe ask the custom theme for absolute icon path, this way they are not just limited to qrc but reference icon from somewhere else also.",0,0,0,0.9870654344558716,0.9931400418281556,0.9859404563903807,0.0,accept,unanimous_agreement
328680429,10948,"now there is an internal variable `m_usecustomstylesheet` , loads custom stylesheet if available, not resets the preferences anymore.",0,0,0,0.9890016317367554,0.9937132000923156,0.9943125247955322,0.0,accept,unanimous_agreement
328681761,10948,"should i add separate icon id for fallback as well? i think there are only like 4 instances where fallback is actually used. well, it does make sense to add iconids for fallbacks as well. will replace direct references with icon ids.",0,0,0,0.9859561920166016,0.9845815300941468,0.9935867786407472,0.0,accept,unanimous_agreement
328682146,10948,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
329225783,10948,is there any real reason to allow custom flags? can they be different from the default ones?,0,0,0,0.9809026718139648,0.9884811639785768,0.992142915725708,0.0,accept,unanimous_agreement
329228044,10948,since these consts are supposed to be used in one .cpp file i would put them into .h instead and omit extern declaration (or even put them into corresponding .cpp directly).,0,0,0,0.9881452322006226,0.994321584701538,0.9933212399482728,0.0,accept,unanimous_agreement
329309703,10948,well i have seen people with custom flags but this will be very cumbersome for any one to do. so let me remove them for now.,-1,-1,0,0.8242847919464111,0.5594381093978882,0.8412602543830872,-1.0,accept,majority_agreement
329310353,10948,moved in uithememanager.cpp,0,0,0,0.9876564741134644,0.992572546005249,0.9943925738334656,0.0,accept,unanimous_agreement
329310359,10948,removed custom `m_flagsdir`,0,0,0,0.987064003944397,0.9931261539459229,0.9956560134887696,0.0,accept,unanimous_agreement
329423280,10948,`static` is redundant,0,0,0,0.9691893458366394,0.979473888874054,0.9933690428733826,0.0,accept,unanimous_agreement
329426186,10948,mainmenu.showrsstab and all the similar.,0,0,0,0.9866238832473756,0.968603491783142,0.9919472336769104,0.0,accept,unanimous_agreement
329427004,10948,"don't use ""gui/"" when include in sibling files.",0,0,0,0.9545458555221558,0.9858285188674928,0.9921769499778748,0.0,accept,unanimous_agreement
329429304,10948,"maybe we shouldn't add ""action"" suffix? now it seems superfluous. what do you think?",-1,-1,0,0.6030815243721008,0.7692463994026184,0.8724803328514099,-1.0,accept,majority_agreement
329430378,10948,"i would use `categoryfilter.contextmenu.subcategory.addaction`. don't remember if we discussed the real need to have ""contextmenu"" member... maybe omit it?",0,0,0,0.9845280051231384,0.9899592995643616,0.9916651844978333,0.0,accept,unanimous_agreement
329431681,10948,add new line after first `{`,0,0,0,0.9845037460327148,0.9890934228897096,0.9950542449951172,0.0,accept,unanimous_agreement
329432228,10948,you should enclose multiline block with `{}`,0,0,0,0.987692415714264,0.9925327897071838,0.9948849081993104,0.0,accept,unanimous_agreement
329433405,10948,"use `qobject::tr()` is bad since it produces translations in qobject context (really it belongs to ""uithememanager"" component). it's better to use `qcoreapplication::translate()` with needed context.",-1,0,0,0.8652622699737549,0.9433389902114868,0.9040125608444214,0.0,accept,majority_agreement
329434840,10948,redundant comma after `%2`. and below too.,0,0,0,0.9837065935134888,0.986810863018036,0.9404178261756896,0.0,accept,unanimous_agreement
329435557,10948,since we have only one possible icon config file we shouldn't show its name in such messages.,0,0,0,0.9370684027671814,0.9906479716300964,0.9879910349845886,0.0,accept,unanimous_agreement
329437660,10948,"now this function has no common meaning. i would return to the previous approach (make it uithememanager member). this should simplify thungs, isn't it?",0,0,0,0.9654935002326964,0.9626715183258056,0.9922311902046204,0.0,accept,unanimous_agreement
329439353,10948,i would initialize `m_usecustomstylesheet` in class definition.,0,0,0,0.9880306124687196,0.9911993145942688,0.9946494698524476,0.0,accept,unanimous_agreement
329442039,10948,leftover...,0,0,0,0.7518895268440247,0.955961048603058,0.960908055305481,0.0,accept,unanimous_agreement
329449440,10948,"this method interface is still contradicts the implemented model. as i said before fallback should be a part of mapping. client just want to call `geticon(""someiconid"")`. which icon is really used is determined by the current configuration.",0,0,0,0.985744059085846,0.9837493896484376,0.993893265724182,0.0,accept,unanimous_agreement
329451196,10948,"i would use something like ""rssview"" instead of ""rss"".",0,0,0,0.9887620806694032,0.9906383752822876,0.9905564785003662,0.0,accept,unanimous_agreement
329493448,10948,there are two `iconconfig.json` `systemiconconfig.json`,0,0,0,0.985722541809082,0.9925298094749452,0.9959917664527892,0.0,accept,unanimous_agreement
329494622,10948,"no it's loading the custom `systemiconconfig.json`, unlike `iconconfig.json` i don't merge the default and custom `systemiconconfig.json` here it loads the `systemiconconfig.json`",0,0,0,0.9870901703834534,0.994870901107788,0.9935196042060852,0.0,accept,unanimous_agreement
329538993,10948,"adding `show` prefix feels like an action, but the icon is used as the tab icon.",0,0,0,0.9825013279914856,0.9917335510253906,0.9858644008636476,0.0,accept,unanimous_agreement
329541121,10948,`mainmenu.rsstab` is used to provide icon for tab? then it is incorrect id.,0,0,0,0.9805698990821838,0.9873746037483216,0.9832321405410768,0.0,accept,unanimous_agreement
329542655,10948,there are actually only two such reference one is this one you mention and other is `src\gui\rss\articlelistwidget.cpp`. should i don't use this prefix even in `gui\rss` folder?,0,0,0,0.9868450164794922,0.9927701354026794,0.994558334350586,0.0,accept,unanimous_agreement
329542727,10948,hmm yes it does seem superfluous.,0,-1,0,0.7120044231414795,0.8109707832336426,0.8715842366218567,0.0,accept,majority_agreement
329545158,10948,"will remove ""contextmenu"".",0,0,0,0.9870691299438475,0.9904648065567015,0.992710828781128,0.0,accept,unanimous_agreement
329546090,10948,"also should i change ""categoryfilter.unused.removeaction"" to ""categoryfilter.unusedcatergories.removeaction""",0,0,0,0.9851619601249696,0.994527280330658,0.9959648847579956,0.0,accept,unanimous_agreement
329546377,10948,"didn't we decide to allow no custom ""system icon mapping""? what's the point to reimplement built-in mapping?",0,0,0,0.9732893705368042,0.9937533736228944,0.956655979156494,0.0,accept,unanimous_agreement
329547191,10948,just follow other include names style in the same file.,0,0,0,0.9861693382263184,0.9923394918441772,0.9955453872680664,0.0,accept,unanimous_agreement
329547203,10948,actually uncrustify removes it automatically.,0,0,0,0.9779095649719238,0.9713062644004822,0.988909900188446,0.0,accept,unanimous_agreement
329548161,10948,then uncrustify misconfigured. you should follow qbittorrent coding guidelines.,0,0,0,0.939279556274414,0.8272982239723206,0.984870195388794,0.0,accept,unanimous_agreement
329548205,10948,it should be a static member since it doesn't require anything from `uithememanager`.,0,0,0,0.9878870248794556,0.9943535327911376,0.9933051466941832,0.0,accept,unanimous_agreement
329550222,10948,sorry. i mean different things. if we really don't need different icon config files then you can change it to non static member function that don't return its result but just modify corresponding class fields. otherwise leave it as is (resolving other comments).,-1,-1,-1,0.9886853694915771,0.9910797476768494,0.9638245105743408,-1.0,accept,unanimous_agreement
329551353,10948,yeap. actually i used this scheme everywhere. f.e `mainmenu.searchtab`,0,0,0,0.955353319644928,0.9421940445899964,0.9872950911521912,0.0,accept,unanimous_agreement
329551597,10948,"it seems pointless to me to have several different ""system theme"" mappings. system theme has no different icons for the same thing.",-1,-1,-1,0.835666298866272,0.5508168339729309,0.879534125328064,-1.0,accept,unanimous_agreement
329552718,10948,mainmenu context is for main menu entries. for tabs you can use mainwindow context.,0,0,0,0.9887336492538452,0.9941296577453612,0.9935342073440552,0.0,accept,unanimous_agreement
329553165,10948,should i do it inplace since there is only one iconconfig?,0,0,0,0.983639121055603,0.9927588701248168,0.9918265342712402,0.0,accept,unanimous_agreement
329560453,10948,"seems it degrades the readability of the calling code. splitting into sub-functions is still useful in terms of code structuring. if some code portion does ""stand-alone"" job, it makes sense to put it in a separate method (unless it's really trivial).",0,0,0,0.8541647791862488,0.9709190726280212,0.9322215914726256,0.0,accept,unanimous_agreement
329560902,10948,"i think message lost its context without `error in iconconfig \""%1\""`, maybe replace it with `custom icon config json format error` or maybe something better?",0,0,0,0.972296178340912,0.9925822019577026,0.9896321296691896,0.0,accept,unanimous_agreement
329561572,10948,"`unusedcatergories` is better, imo.",0,0,0,0.9590342044830322,0.9734265208244324,0.9499053955078124,0.0,accept,unanimous_agreement
329565226,10948,i decided against it since this makes constructor too big.,0,-1,0,0.833777904510498,0.7022830843925476,0.7968341708183289,0.0,accept,majority_agreement
329570274,10948,maybe `icon configuration file format error: %1.`?,0,0,0,0.9759303331375122,0.9920822381973268,0.9935550093650818,0.0,accept,unanimous_agreement
329588075,10948,i have a habit of regularly formatting the file even while writing so it will be cumbersome to do it manually since on next format they're gone. so can i convert these in single liners instead?,-1,-1,0,0.961972177028656,0.7811906933784485,0.966400980949402,-1.0,accept,majority_agreement
329596263,10948,"what shall be the name? `mainmenu.fallback.configureaction` , `fallback.mainmenu.configureaction`, `mainmenu.configureaction.fallback`, `mainmenu.configureaction2`",0,0,0,0.9834650754928588,0.995329737663269,0.994950532913208,0.0,accept,unanimous_agreement
329597370,10948,i think we should recheck all ids at last step.,0,0,0,0.9811862707138062,0.979599118232727,0.984740436077118,0.0,accept,unanimous_agreement
329601242,10948,if the lines don't get too long. otherwise you can try to customize uncrustify config to follow our coding style more fully.,0,0,0,0.986192524433136,0.9872913956642152,0.9907187819480896,0.0,accept,unanimous_agreement
329608050,10948,"sorry, don't understand you. there is only one name for each iconid. but there should be the way to assign several mappings to it. you can use either ""multi map"" for system icon config or map each id to list of values.",-1,-1,-1,0.9872201681137084,0.9909810423851012,0.9741393327713012,-1.0,accept,unanimous_agreement
329618231,10948,"i am thinking to use ""multi map"". it should only be limited to the system icon config?",0,0,0,0.9839450716972352,0.9671573042869568,0.9915174245834352,0.0,accept,unanimous_agreement
329622965,10948,of course. in case of custom icon theme author should provide truly existed files so no fallback is needed.,0,0,0,0.98281729221344,0.992240071296692,0.9924846291542052,0.0,accept,unanimous_agreement
329627030,10948,"[a link] i think the above places require hardcoded path anyway, so i will remove the changes and make `geticonpath` private.",0,0,0,0.9879480004310608,0.9860600233078004,0.9950950145721436,0.0,accept,unanimous_agreement
329631015,10948,since system icon config is internal mapping does it make sense to not do pattern based searching here.,0,0,0,0.9741559624671936,0.9895308017730712,0.9891998767852784,0.0,accept,unanimous_agreement
329646417,10948,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
329647755,10948,i am not doing pattern-based searching for system icon map.,-1,0,0,0.7324654459953308,0.9680607914924622,0.9681614637374878,0.0,accept,majority_agreement
329648232,10948,may be `rsstab`?,0,0,0,0.988916516304016,0.9932445883750916,0.988685131072998,0.0,accept,unanimous_agreement
329649166,10948,"yes, at a first glance. but i need to look at the whole algorithm to answer exactly.",0,0,0,0.974116027355194,0.936471164226532,0.9865841269493104,0.0,accept,unanimous_agreement
329651641,10948,tabs is just a way to organise views/widgets in container (main window in this case).,0,0,0,0.988621175289154,0.9928151369094848,0.989792823791504,0.0,accept,unanimous_agreement
329669976,10948,okay sorry! i mixed it up with something else,-1,-1,-1,0.9881624579429626,0.9935548901557922,0.9946582913398744,-1.0,accept,unanimous_agreement
329683093,10948,"they're actually used in rss feed list so may be `rssfeedlist`, but `rssview` seems good to",0,0,0,0.7947500348091125,0.8820382356643677,0.9753013849258424,0.0,accept,unanimous_agreement
329684306,10948,where it is actually used? i mean i can't able to understand in which context this icon is actually used thats why such a weird name.,-1,-1,-1,0.9778860807418824,0.9540310502052308,0.9853663444519044,-1.0,accept,unanimous_agreement
219438512,9562,you might want to consider using `c_thin_space` here.,0,0,0,0.9871422052383424,0.9906678795814514,0.992455005645752,0.0,accept,unanimous_agreement
219438617,9562,"unit, bool, please.",0,0,0,0.909147322177887,0.9813505411148072,0.9793745875358582,0.0,accept,unanimous_agreement
219438807,9562,"whitespace between arguments, please.",0,0,0,0.986541986465454,0.9723625779151917,0.9340217113494872,0.0,accept,unanimous_agreement
219438878,9562,whitespace,0,0,0,0.98747456073761,0.9243230819702148,0.9755821228027344,0.0,accept,unanimous_agreement
219671701,9562,"i'm not sure i understood the code below completely, but wouldn't powers of 2 make the nicest scale since we use unit multiplicator value of 1024?",0,0,0,0.9078216552734376,0.9454420804977416,0.8601112961769104,0.0,accept,unanimous_agreement
219672791,9562,"according to [a link] here should be normal width space. anyway, c_non_breaking_space is already used in qbittorrent and i'm satisfied how it looks.",0,0,1,0.9651286005973816,0.979405164718628,0.6565937995910645,0.0,accept,majority_agreement
219673260,9562,"no, power of 2 does not fit good because if gives ""round values"" with many zeros in binary form, not in radix(10) human readable form. and labels having non-zero fractional part makes things even more complicated.",-1,-1,0,0.6185263395309448,0.6037320494651794,0.9557936191558838,-1.0,accept,majority_agreement
219673369,9562,"pardon me, i don't understand that. what fractional parts? how they could appear if we use unit prefixes? are you talking about scale for speeds up to a few bytes per second (when no prefixes are used)?",-1,-1,0,0.9214516878128052,0.9106201529502868,0.6053627133369446,-1.0,accept,majority_agreement
219673411,9562,"sure, but since we never show thousands we don't need a separator for them. i just wanted to save a bit of space, hence the suggestion.",0,0,0,0.953303873538971,0.9445945620536804,0.984012246131897,0.0,accept,unanimous_agreement
219673436,9562,"fixed all missed space mishaps. i just wonder, are there any rule for uncrustify for this?",-1,0,0,0.5223156809806824,0.702109694480896,0.892822265625,0.0,accept,majority_agreement
219673468,9562,"thanks! uncrustify should do that with the config from the repo, yes.",1,1,1,0.9280877113342284,0.963093400001526,0.9907346963882446,1.0,accept,unanimous_agreement
219673694,9562,i am talking about case when speed is in range 1kb/s- 4 kb/s or 1mb/s- 4 mb/s etc. here fractional part in intermediate labels is inevitable.,0,-1,0,0.9791208505630492,0.7497771978378296,0.98116135597229,0.0,accept,majority_agreement
219673799,9562,if we just step down to lower unit (mbit/s -> kbit/s for example) there will be to many non-zero digits in labels and no enhancement in appearance.,0,0,0,0.9853503704071044,0.9851786494255066,0.986857771873474,0.0,accept,unanimous_agreement
219674002,9562,"i'm using qbittorrent project's uncrustify.cfg, but if does not do this job for my bad luck. other formatting issues it fixes, but not that.",-1,-1,-1,0.9253939390182496,0.912738025188446,0.9896085858345032,-1.0,accept,unanimous_agreement
224760579,9562,"it's too pointless for me to have a function that just prepends some string with a space. but it makes sense to add ""isspeed"" parameter to ""unitstring()"".",-1,-1,0,0.6181950569152832,0.8930982351303101,0.9822168350219728,-1.0,accept,majority_agreement
224760930,9562,"please don't add ""::"" without strong reason.",-1,0,-1,0.9545166492462158,0.946114718914032,0.8885453343391418,-1.0,accept,majority_agreement
224761545,9562,don't use function-style cast. use appropriate c++ cast.,0,0,0,0.9706187844276428,0.9897719025611876,0.9899162650108336,0.0,accept,unanimous_agreement
224761664,9562,why not const?,0,0,0,0.9276886582374572,0.9673504829406738,0.9858160018920898,0.0,accept,unanimous_agreement
224813764,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224815031,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224837996,9562,"the main goal was to reuse already translated strings. also i thought that unit strings are always prepended by space to separate from numbers. so at first i changed existing `unitstring()` to use `isspeed` parameter (as you want) and do padding (to follow dry principle and so on). but build broke up. there is 8 usage point in src/gui/search/searchjobwidget.cpp on lines 319-325 which are ignored by qtcreator code parser ""find usages"" function (because of lack of utils::misc:: access specification) but are compilable nevertheless. (i think they should generate compile error, but they didn't). this forced me to resurrect old `unitstring()` and place a new function side by side. and this function is used in 4 places, so it is not so useless in spite of it's simplicity.",0,0,0,0.8552340865135193,0.926652491092682,0.9495354294776917,0.0,accept,unanimous_agreement
224847319,9562,"it doesn't generate compile errors due to [a link]. personally, i don't like the ""blind"" use of such things.",-1,-1,-1,0.9750012755393982,0.8733156323432922,0.9473055005073548,-1.0,accept,unanimous_agreement
224851089,9562,", you don't seem familiar with the qbittorrent coding style. maybe now is the time to get acquainted with it? i can't point to every obvious violation when most of the code below is broken.",0,-1,0,0.7914933562278748,0.7390069961547852,0.8841531276702881,0.0,accept,majority_agreement
224874537,9562,"that sounds lame... if it will be used some times in parentheses, will you add ""unitstringinparentheses()"" and so on? if you add default (false) value to isspeed param there shouldn't be problems with existing usages.",-1,-1,-1,0.9847565293312072,0.985361397266388,0.9903067350387572,-1.0,accept,unanimous_agreement
224950502,9562,unfortunately uncrustify fails to fix coding style completely. it even makes an opposite result in some cases.,-1,-1,-1,0.9054338932037354,0.9092074632644652,0.8242942690849304,-1.0,accept,unanimous_agreement
224950537,9562,there should be blank line between definitions.,0,0,0,0.970658242702484,0.9864017367362976,0.984446108341217,0.0,accept,unanimous_agreement
224950553,9562,this blank line isn't allowed since it separates nothing.,0,0,0,0.9365445375442504,0.8655573725700378,0.913347065448761,0.0,accept,unanimous_agreement
224950590,9562,there should not be any spaces between parentheses and their content.,0,0,0,0.9576314091682434,0.9694981575012208,0.9901666641235352,0.0,accept,unanimous_agreement
224950678,9562,"the following is more effective, isn't it? [code block]",0,0,0,0.9846577048301696,0.985324203968048,0.9937343001365662,0.0,accept,unanimous_agreement
224950742,9562,or even [code block],0,0,0,0.9862733483314514,0.9898061156272888,0.992935836315155,0.0,accept,unanimous_agreement
224950860,9562,please add blank line above.,0,0,0,0.9810636043548584,0.9878902435302734,0.9948902130126952,0.0,accept,unanimous_agreement
224950878,9562,please add blank line above.,0,0,0,0.9810636043548584,0.9878902435302734,0.9948902130126952,0.0,accept,unanimous_agreement
224950886,9562,please add blank line above.,0,0,0,0.9810636043548584,0.9878902435302734,0.9948902130126952,0.0,accept,unanimous_agreement
224950917,9562,this seems to be unreachable since you return in case of `value > 10`.,0,0,0,0.9440162777900696,0.9152047038078308,0.9929155111312866,0.0,accept,unanimous_agreement
224950945,9562,don't use function-style cast!,0,0,0,0.6140474677085876,0.6573989391326904,0.9444016218185424,0.0,accept,unanimous_agreement
224950965,9562,please add blank line above.,0,0,0,0.9810636043548584,0.9878902435302734,0.9948902130126952,0.0,accept,unanimous_agreement
224951158,9562,`else` should be in the next line. you can write it as `else if (...)` in this case.,0,0,0,0.9864416718482972,0.9945095181465148,0.9938344955444336,0.0,accept,unanimous_agreement
224951193,9562,remove `else`. it's meaningless since corresponding `if` ends with `return` statement.,0,0,0,0.9497049450874328,0.9617205262184144,0.9842349886894226,0.0,accept,unanimous_agreement
224951313,9562,`const double nicescale = getniceyscale(maxyvalue());`,0,0,0,0.9765413999557496,0.9914044141769408,0.9922035932540894,0.0,accept,unanimous_agreement
224951362,9562,you don't need cast to double since nicescale is double.,0,0,0,0.9825361967086792,0.9893585443496704,0.9940547347068788,0.0,accept,unanimous_agreement
224953746,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224953796,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224953800,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224953919,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224954613,9562,"in all this cycle variants there are 1 comparison and 2 arithmetical operations in cycle body. and in your variants also adds 1 operation after exit of the cycle. let's cout operations on starting value=2000 for example. 1. my variant. [code block] total is 2 comparisons and 2 operations. 2. your variant (both of them are identical in code structure). [code block] total is 2 comparisons and 4 operations. what about replacing arithmetic with shifts - modern compilers will do it itself, if it really gives some gain. and the age of 8 bit cpu when it gives significant profit has gone log time ago. anyway, this is not a hot spot code, where we should fight for every cycle. so really only maintainability considerations are applicable imho.",0,0,0,0.9018713235855104,0.937137484550476,0.982671856880188,0.0,accept,unanimous_agreement
224954693,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224954816,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224954891,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224955135,9562,"i just hate to see such suboptimal calculations in a loop. but here we will usually have 2-3 steps, so it is not so important. btw, it can be optimized even more than in my example.",-1,-1,-1,0.988593578338623,0.9890251755714417,0.9915663599967957,-1.0,accept,unanimous_agreement
224955159,9562,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
224955917,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224955924,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224955949,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224955976,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224955992,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224956184,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224957039,9562,at least i will consider to do this. :) removed paddedunitstring.,1,1,1,0.8349337577819824,0.9957687854766846,0.9964017868041992,1.0,accept,unanimous_agreement
224957317,9562,you should enclose loop body with braces (since it's multiline).,0,0,0,0.9881452322006226,0.9915811419487,0.9928760528564452,0.0,accept,unanimous_agreement
224957343,9562,you should enclose `if` body with braces (since it's multiline).,0,0,0,0.9887645244598388,0.9930740594863892,0.9937212467193604,0.0,accept,unanimous_agreement
224957373,9562,you forgot isspeed param.,0,0,0,0.8665772080421448,0.9607523083686828,0.9859775304794312,0.0,accept,unanimous_agreement
224957429,9562,`(rect.height() / nicescale)`,0,0,0,0.9782915115356444,0.9919819235801696,0.9908431768417358,0.0,accept,unanimous_agreement
224957537,9562,"please describe why these two can't be defined using ""utils::misc::friendlyunit()"".",0,0,0,0.9827751517295836,0.9928677082061768,0.994125247001648,0.0,accept,unanimous_agreement
224957552,9562,const,0,0,0,0.9770036339759828,0.9538535475730896,0.8837863802909851,0.0,accept,unanimous_agreement
224960137,9562,added braces. uncrustify wants to remove it.,0,0,0,0.9764017462730408,0.9869511127471924,0.9819068312644958,0.0,accept,unanimous_agreement
224960256,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224960582,9562,remove uncrustify! :),1,1,1,0.6124337315559387,0.9952057003974916,0.9782972931861876,1.0,accept,unanimous_agreement
224960644,9562,"omg, fixed",0,0,0,0.979500949382782,0.7402368783950806,0.9866918921470642,0.0,accept,unanimous_agreement
224960670,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
224962917,9562,what did you mean by the words _these two_ ? and by which one of two `utils::misc::friendlyunit()` functions? there are two overloaded functions with totally different semantics (this code is kind of rotten a bit for me).,-1,-1,-1,0.9251139760017396,0.9710211753845216,0.96807062625885,-1.0,accept,unanimous_agreement
225124111,9562,i mean these two return statements.,0,0,0,0.9844624996185304,0.9796711802482604,0.986735463142395,0.0,accept,unanimous_agreement
225124757,9562,"`nicelabel()` has a bit confusing definition and parameters. what is it supposed to be? why ""unit"" is non-const reference (aka output parameter)?",-1,0,0,0.530484676361084,0.7580568194389343,0.5724031925201416,0.0,accept,majority_agreement
225134097,9562,"well, may be some refactoring is already needed here. i'll try to do so. marking as wip meanwhile",0,0,0,0.9758510589599608,0.9877387285232544,0.9847362637519836,0.0,accept,unanimous_agreement
225178819,9562,"current code uses friendlyunit() for creating graph labels. iirc, you stop to use it since it uses predefined precision values. why not refactor it to accept precision as param?",0,0,0,0.9877585768699646,0.8698056936264038,0.9920459985733032,0.0,accept,unanimous_agreement
225186101,9562,"not only precision was a culprit. but the fact that ""unit"" is determined independently for consequent labels on the same scale leads to impossibility to create all labels ""nice looking"" when they are become sitting on different ""unit"" for example when speed is circa 1.2 mbytes/s than 100% label get mbytes/s unit and 0.75 and lower labels gets kbytes/s unit. and there is no way to align scale such that all labels are nice in this case. i was stuck trying different algorithms until i figured out that to make all labels looks nice i have to force them to be printed using the same unit for all labels. even if printed value is lesser then 1.0 on digital part.",-1,-1,-1,0.7671523690223694,0.6099533438682556,0.7187540531158447,-1.0,accept,unanimous_agreement
225390631,9562,coding style is broken here.,0,-1,0,0.9434237480163574,0.6790238618850708,0.903795599937439,0.0,accept,majority_agreement
225391159,9562,we must have only an integer number of bytes. is underlying function returns floating point number?,0,0,0,0.9879968762397766,0.9887590408325196,0.9935619831085204,0.0,accept,unanimous_agreement
225391444,9562,won't `++calculatedunit` work?,0,0,0,0.9855018854141236,0.9930744171142578,0.9939832091331482,0.0,accept,unanimous_agreement
225391632,9562,is explicit cast required here?,0,0,0,0.9872567653656006,0.9927592277526855,0.9930834770202636,0.0,accept,unanimous_agreement
225392000,9562,sizeunit is simple type. you don't need to pass it as const reference.,0,0,0,0.9859452843666076,0.9870558977127076,0.9894199371337892,0.0,accept,unanimous_agreement
225392275,9562,we don't accept such formatting.,-1,-1,0,0.7532598972320557,0.5488748550415039,0.8940979838371277,-1.0,accept,majority_agreement
225392730,9562,i think you should use `utils::string::fromdouble()` instead. apparently it has some project-wide improvements... ?,0,0,0,0.976595401763916,0.9574812650680542,0.9861590266227722,0.0,accept,unanimous_agreement
225450335,9562,"not sure, using utils::string::fromdouble could avoid code duplication if applicable.",0,0,0,0.974209487438202,0.9757856726646424,0.9569693803787231,0.0,accept,unanimous_agreement
225494583,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
225494616,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
225496036,9562,"no, direct arithmetic operation on enum type gives compilation error. `++x ; x+=1; x=x+1;` any of them does not pass.",0,0,0,0.9774930477142334,0.9877457022666932,0.9900439977645874,0.0,accept,unanimous_agreement
225497310,9562,without expicit cast there is a warning: [code block],0,0,0,0.9852169156074524,0.9857712984085084,0.9914584755897522,0.0,accept,unanimous_agreement
225497577,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
225497711,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
225499018,9562,"i deliberately did not use `utils::string::fromdouble()` because it rounds to `floor()`, and this rounding method does not fits here. i have tried to use it, but was not satisfied.",0,0,0,0.5377758741378784,0.9605188965797424,0.987631380558014,0.0,accept,unanimous_agreement
225787096,9562,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
225787579,9562,how about `++static_cast (calculatedunit);`?,0,0,0,0.987148940563202,0.9943970441818236,0.9948934316635132,0.0,accept,unanimous_agreement
225788320,9562,you can exclude 10 from roundingtable so it becomes a valid case (and you don't need to have this comment).,0,0,0,0.9875245094299316,0.9867495894432068,0.9949132204055786,0.0,accept,unanimous_agreement
225891457,9562,yes! did so.,0,0,1,0.7266702651977539,0.534254789352417,0.8992236852645874,0.0,accept,majority_agreement
225894107,9562,"well, leave it as is.",0,0,0,0.9796054363250732,0.9820588231086732,0.969962239265442,0.0,accept,unanimous_agreement
226541306,9562,i would add `const` to these parameters.,0,0,0,0.9877229928970336,0.9902189373970032,0.9940996170043944,0.0,accept,unanimous_agreement
226541405,9562,shouldn't we have namespace declaration at top of the file?,0,0,0,0.9847251772880554,0.9943476319313048,0.9933252334594728,0.0,accept,unanimous_agreement
226541518,9562,`const qint64 sizeinbytes`,0,0,0,0.98587566614151,0.9920462369918824,0.9937123656272888,0.0,accept,unanimous_agreement
226541638,9562,i don't think static_cast is required.,0,0,0,0.982164978981018,0.9140313863754272,0.9817537665367126,0.0,accept,unanimous_agreement
226542122,9562,it's existing code. see diff above.,0,0,0,0.9887505173683168,0.9914411306381226,0.9952036142349244,0.0,accept,unanimous_agreement
226542315,9562,"ok, forget it.",0,0,0,0.7091974020004272,0.9768239855766296,0.9293199777603148,0.0,accept,unanimous_agreement
226542567,9562,shouldn't we have namespace declaration at top of the file?,0,0,0,0.9847251772880554,0.9943476319313048,0.9933252334594728,0.0,accept,unanimous_agreement
226543064,9562,i would prefer to remove this and do: [code block],0,0,0,0.9758784174919128,0.9847536087036132,0.9942395687103271,0.0,accept,unanimous_agreement
226544684,9562,please add blank line.,0,0,0,0.979562520980835,0.9856352806091307,0.9946393370628356,0.0,accept,unanimous_agreement
226544915,9562,"please add parentheses: `formatlabel((0.xx * nicescale.arg), nicescale.unit)`",0,0,0,0.9817128777503968,0.9937080144882202,0.9954392313957214,0.0,accept,unanimous_agreement
226547376,9562,how is this table generated? so this pr makes the y label to have values that are multiple from this table?,0,0,0,0.9874058365821838,0.994641661643982,0.9945570230484008,0.0,accept,unanimous_agreement
226547881,9562,how about `getroundedyscale`?,0,0,0,0.9883412718772888,0.9931401610374452,0.9932957291603088,0.0,accept,unanimous_agreement
226548101,9562,seems you don't need this line... however i'm not sure...,0,-1,0,0.5814477205276489,0.6779351234436035,0.9784326553344728,0.0,accept,majority_agreement
226548429,9562,can we have a better name for it? maybe `value`?,0,0,0,0.9868941307067872,0.9941723942756652,0.9942356944084167,0.0,accept,unanimous_agreement
226589873,9562,"number from this table become 100% label and give ""nice looking"" 25% (and 50%, 75% consequently too) label(s).",0,0,0,0.8848726749420166,0.6813921928405762,0.980661392211914,0.0,accept,unanimous_agreement
226611006,9562,"here are too many `value` variables already. and they all are measured in bytes. i intentionally did not use that name to prevent confusion. so if you prefer another name, please suppose other than 'value'.",0,0,0,0.986045777797699,0.966231882572174,0.9435487389564514,0.0,accept,unanimous_agreement
226611979,9562,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
226612908,9562,"in the coding_guidelines.md there is nothing about that. anyway, moved to the top.",0,0,0,0.9877219796180724,0.989389955997467,0.992272973060608,0.0,accept,unanimous_agreement
226615380,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
226615600,9562,moved,0,0,0,0.980713427066803,0.9622819423675536,0.9507286548614502,0.0,accept,unanimous_agreement
226616579,9562,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
226616965,9562,", when you suggest to add const to parameter passed by value, please, don't forget to mention that it's applicable only to the function definition (and shouldn't affect its declaration).",0,0,0,0.9842253923416138,0.991036891937256,0.9745339751243592,0.0,accept,unanimous_agreement
226617249,9562,"not sure where did you mean it, added below.",0,0,0,0.571452260017395,0.9751476049423218,0.9431682229042052,0.0,accept,unanimous_agreement
226617634,9562,added,0,0,0,0.973513960838318,0.9267084002494812,0.8435775637626648,0.0,accept,unanimous_agreement
226618443,9562,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
226622451,9562,"if we remove that line, we can get strangely looking labels on low speeds. for example, starting calculation with 5 bytes/s , we will get such formatlabels() output: for 0 => 0 for 0.25 => 2 for 0.50 => 3 for 0.75 => 5 for 1.00 => 6 for preventing such awkward labels is this ""safety barrier"" placed here.",0,0,0,0.8871039152145386,0.7809823751449585,0.953174650669098,0.0,accept,unanimous_agreement
226827912,9562,"yes, thank you!",1,1,1,0.96035897731781,0.9727514982223512,0.9779707789421082,1.0,accept,unanimous_agreement
226828183,9562,thanks! [a link],1,1,1,0.9611113667488098,0.9574026465415956,0.9796048402786256,1.0,accept,unanimous_agreement
226828225,9562,"you forgot the space: `unit, const`",0,0,0,0.9588547348976136,0.9874863624572754,0.9916290044784546,0.0,accept,unanimous_agreement
226828343,9562,"the `const` need only be added to function definition, not declaration, so please remove the `const` here.",0,0,0,0.988058865070343,0.9943875670433044,0.9952576756477356,0.0,accept,unanimous_agreement
226847775,9562,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
226847982,9562,"it confuses me, but somehow gets compiled even without warnings.",-1,-1,-1,0.503525972366333,0.8784303069114685,0.8719925284385681,-1.0,accept,unanimous_agreement
341308565,11433,semicolon is redundant here.,0,0,0,0.958727777004242,0.8483091592788696,0.970672607421875,0.0,accept,unanimous_agreement
341312054,11433,getcolorbystate is redundant now so you should assign values directly. also please use field initializers instead of constructor body.,0,0,0,0.988941490650177,0.991117000579834,0.9948853850364684,0.0,accept,unanimous_agreement
341313581,11433,maybe try to inherit transferlistmodel from qwidget too?,0,0,0,0.9826490879058838,0.9947931170463562,0.9905884265899658,0.0,accept,unanimous_agreement
341316893,11433,i don't think multiple inheritance is allowed,0,0,0,0.9748639464378356,0.6272464394569397,0.9643539190292358,0.0,accept,unanimous_agreement
341317655,11433,"multiple states have the same color, that's why i did it this way. will convert to constructor body.",0,0,0,0.9842270016670228,0.985095202922821,0.9946275353431702,0.0,accept,unanimous_agreement
341318400,11433,i actually did spend almost an hour to figure out what's happening since qt docs never mention this [a link],0,0,0,0.9107426404953004,0.9283910989761353,0.927581250667572,0.0,accept,unanimous_agreement
341326536,11433,"either 1. rename it to transferlistcolors and drop ""color"" part from property names, or 2. drop ""textcolor"" part from property names.",0,0,0,0.9866822957992554,0.9954596161842346,0.9947853684425354,0.0,accept,unanimous_agreement
341436068,11433,wrong order.,-1,-1,-1,0.9440091848373412,0.5554730296134949,0.7645806670188904,-1.0,accept,unanimous_agreement
341436255,11433,you missed giving the function argument a name.,0,0,0,0.8911885619163513,0.9567251205444336,0.9207587838172911,0.0,accept,unanimous_agreement
341436330,11433,redundant space at end,0,0,0,0.9699574112892152,0.9344087839126588,0.9529320001602172,0.0,accept,unanimous_agreement
341436404,11433,probably add a default case here or where it makes sense.,0,0,0,0.9791914820671082,0.989245057106018,0.9869279265403748,0.0,accept,unanimous_agreement
341436470,11433,add `const` to `state`.,0,0,0,0.9873611927032472,0.9915437698364258,0.9945514798164368,0.0,accept,unanimous_agreement
341437131,11433,why convert `bittorrent::torrentstate` to `int` and back?,0,0,0,0.9768397212028505,0.992027223110199,0.9800434112548828,0.0,accept,unanimous_agreement
341437846,11433,maybe you only need to inherit qobject instead of qwidget?,0,0,0,0.985217273235321,0.9926704168319702,0.9875456690788268,0.0,accept,unanimous_agreement
341458997,11433,", see comment above.",0,0,0,0.9791879057884216,0.9888619780540466,0.9880025386810304,0.0,accept,unanimous_agreement
341464198,11433,to not include `bittorrent/torrenthandle.h` in `transferlistmodel.h`. should i include it?,0,0,0,0.987146019935608,0.9952316880226136,0.9925570487976074,0.0,accept,unanimous_agreement
341464324,11433,kill me xd.,-1,-1,-1,0.8940744400024414,0.974748432636261,0.5019964575767517,-1.0,accept,unanimous_agreement
341467776,11433,"initialization in the constructor line is done. should i remove the `getcolorbystate`? idk i prefer it this way since there is same color for multiple torrent states and color is itself based on two states(dark, light). but if you insist i will remove the `getcolorbystate`.",0,0,0,0.9854581356048584,0.9926809668540956,0.9919048547744752,0.0,accept,unanimous_agreement
341467802,11433,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
341467926,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
341467944,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
341467970,11433,done?,0,0,0,0.9820621609687804,0.9815027713775636,0.9878233671188354,0.0,accept,unanimous_agreement
341467995,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
341472775,11433,is it possible to use `const qcolor` here?,0,0,0,0.988614559173584,0.9951086640357972,0.9946499466896056,0.0,accept,unanimous_agreement
341472832,11433,constructor should come first (above `q_property`),0,0,0,0.9885215759277344,0.9927553534507751,0.9951743483543396,0.0,accept,unanimous_agreement
341473444,11433,you need to add a space `m_unknown {...}`,0,0,0,0.987467646598816,0.9936105608940125,0.9945710301399232,0.0,accept,unanimous_agreement
341474480,11433,i think yes.,0,0,0,0.965730369091034,0.9288822412490844,0.967261016368866,0.0,accept,unanimous_agreement
341474670,11433,nope compilation failes.,0,0,0,0.716926634311676,0.6750855445861816,0.9458242654800416,0.0,accept,unanimous_agreement
341475895,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
341475929,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
341475948,11433,done?,0,0,0,0.9820621609687804,0.9815027713775636,0.9878233671188354,0.0,accept,unanimous_agreement
341476697,11433,you didn't remove this line in transferlistmodel.cpp,0,0,0,0.9886681437492372,0.9940328001976012,0.9945131540298462,0.0,accept,unanimous_agreement
341476777,11433,and wrong order.,-1,-1,-1,0.9322026371955872,0.6552555561065674,0.9264978766441344,-1.0,accept,unanimous_agreement
341476979,11433,seems you also need to add `constant` to `q_property` entries.,0,0,0,0.9879294633865356,0.9937712550163268,0.992742657661438,0.0,accept,unanimous_agreement
341477387,11433,you misunderstood. look for examples in session.cpp. requirement for spaces are different for () and {}.,0,0,0,0.8787007331848145,0.761909544467926,0.6891820430755615,0.0,accept,unanimous_agreement
341478132,11433,i chose the latter. done?,0,0,0,0.9814566373825072,0.988262951374054,0.9917175769805908,0.0,accept,unanimous_agreement
341479264,11433,compiles but qss doesn't work anymore ![a link],0,0,-1,0.654336154460907,0.630145251750946,0.8174464702606201,0.0,accept,majority_agreement
341479293,11433,are those required to be `public`?,0,0,0,0.9844851493835448,0.9940584897994996,0.9928014278411864,0.0,accept,unanimous_agreement
341479403,11433,is it a good idea to use `qcolor operator(bittorrent::torrentstate state) const;`?,0,0,0,0.986200749874115,0.9936341047286988,0.9939606189727784,0.0,accept,unanimous_agreement
341479621,11433,ok forget it.,0,0,0,0.8788298964500427,0.9640007019042968,0.9499059319496156,0.0,accept,unanimous_agreement
341480861,11433,well making it private doesn't affect anything but doesn't property should always be public. as they are already modifying outside the class `setproperty`?,0,0,0,0.9797707200050354,0.9918346405029296,0.9874430298805236,0.0,accept,unanimous_agreement
341480976,11433,idk may be can say something.,0,0,0,0.9879785776138306,0.9856377243995668,0.9739806652069092,0.0,accept,unanimous_agreement
341481656,11433,now?,0,0,0,0.9759780168533324,0.9796378016471864,0.9896223545074464,0.0,accept,unanimous_agreement
341481788,11433,now?,0,0,0,0.9759780168533324,0.9796378016471864,0.9896223545074464,0.0,accept,unanimous_agreement
341481985,11433,"also, i think operator overloading is scarcely used throughout qbittorrent code.",0,0,0,0.8982522487640381,0.9884647130966188,0.9884223341941832,0.0,accept,unanimous_agreement
341482749,11433,this can be `const`.,0,0,0,0.9865938425064088,0.9913803935050964,0.9941993951797484,0.0,accept,unanimous_agreement
341508983,11433,this look otherwise: [a link] imo if it can be `private` then it shouldn't be `public`.,0,0,0,0.9881541728973388,0.9916302561759948,0.9913109540939332,0.0,accept,unanimous_agreement
341513617,11433,"just found out that you can forward declare `enum class torrentstate;` then you won't need to make this change. on a second thought, this will depends on the underlying type, so probably not a very foolproof way.",0,0,0,0.8075541853904724,0.9535192847251892,0.9626023769378662,0.0,accept,unanimous_agreement
341516231,11433,so should i do it?,0,0,0,0.974719762802124,0.9866699576377868,0.9886000156402588,0.0,accept,unanimous_agreement
341516774,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
341516879,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
341518616,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
341518725,11433,just leave it for now...,0,0,0,0.86769700050354,0.9733285903930664,0.9878211617469788,0.0,accept,unanimous_agreement
341519336,11433,"... but it is already used through out the code base, well, make your choice.",0,0,0,0.9670982360839844,0.9864119291305542,0.9865790009498596,0.0,accept,unanimous_agreement
341519562,11433,you marked this resolved so i am not reverting the commit.,0,0,0,0.9328317642211914,0.9824666976928712,0.9919036030769348,0.0,accept,unanimous_agreement
341520429,11433,"sorry, i pressed that button too quickly. i think i'll make another pr that prohibits forward declaring enum class. so it would be best that we make it right here.",-1,-1,-1,0.9850115776062012,0.9890222549438475,0.9699975848197936,-1.0,accept,unanimous_agreement
341521678,11433,"i think you meant to revert the commit, so i reverted it",0,0,0,0.9826116561889648,0.9641387462615968,0.9915298223495485,0.0,accept,unanimous_agreement
341521999,11433,my english skills are still not that good. i'm working on it :face_with_tears_of_joy::smiling_face_with_smiling_eyes:,-1,-1,1,0.842340350151062,0.9541496634483336,0.979678988456726,-1.0,accept,majority_agreement
341538136,11433,yes no worries :),1,1,1,0.9863395690917968,0.9948933124542236,0.9143827557563782,1.0,accept,unanimous_agreement
341631978,11433,"ok i did some test and i have cleared my confusion. in short, forward declaring enum class is okay since the compiler (gcc) will check whether the underlying type is the same. so sorry about the misleading discussion above. you can drop the `revert ""torrentstate""` commit and you also should not use const reference instead of plain value (see torrentcontentmodelfile.h for example).",-1,-1,-1,0.9876746535301208,0.987101912498474,0.9768320918083192,-1.0,accept,unanimous_agreement
341645102,11433,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
341657053,11433,`const bittorrent::torrentstate state`,0,0,0,0.9834080338478088,0.9926968216896056,0.9936395287513732,0.0,accept,unanimous_agreement
341666067,11433,sorry for such a stupid mistake again done.,-1,-1,-1,0.9879106283187866,0.993436872959137,0.9956385493278505,-1.0,accept,unanimous_agreement
358172907,11433,it's better to have some struct here (e.g. torrentstatecolors m_torrentstatecolors). or even `qhash ` since you want to access each color separately.,0,0,0,0.9868822693824768,0.9950321912765504,0.9929078817367554,0.0,accept,unanimous_agreement
358257096,11433,"i used `std::unordered_map`, qhash complains about missing qhash function.",0,0,0,0.8884423971176147,0.9210831522941588,0.9769490361213684,0.0,accept,unanimous_agreement
358296751,11433,all these properties aren't supposed to be changed in a regular way so i think you can declare them private,0,0,0,0.9873208999633788,0.9891033172607422,0.9890263676643372,0.0,accept,unanimous_agreement
358299136,11433,"looks a bit weird to me, how about this: [code block]",-1,-1,-1,0.9872888326644896,0.9885932207107544,0.9668743014335632,-1.0,accept,unanimous_agreement
358301956,11433,"i'm not sure, would sorting these functions (setters and getters and q_propertys) alphabetically makes it easier to maintain?",0,0,0,0.961647629737854,0.7872288227081299,0.9142636656761168,0.0,accept,unanimous_agreement
358305398,11433,"let's try using qhash here, what was the error message? fyi i can use `qhash m_stateforegroundcolors;` without providing a custom qhash() function.",0,0,0,0.9878345727920532,0.9934279322624208,0.9946053624153136,0.0,accept,unanimous_agreement
358311556,11433,these are defined in the order of torrentstate is defined and i am bad with sorting alphabetically :face_with_tongue:,-1,-1,-1,0.9855418801307678,0.94690203666687,0.990151345729828,-1.0,accept,unanimous_agreement
358322903,11433,weird... i only did 3 things in transferlistmodel.h to get it compile on gcc: 1. add `qhash m_stateforegroundcolors;` 2. add `enum class torrentstate;` forward declaration. 3. add `#include `,-1,-1,-1,0.9862879514694214,0.9779978394508362,0.9883657693862916,-1.0,accept,unanimous_agreement
358328975,11433,probably you don't need the `enum` here and below and in .cpp,0,0,0,0.9874858260154724,0.993505597114563,0.989413857460022,0.0,accept,unanimous_agreement
358336084,11433,nope not working. also tried directly including base/bittorrent/torrenthandle.h,0,0,0,0.9644286632537842,0.8792390823364258,0.9644834995269777,0.0,accept,unanimous_agreement
358339545,11433,"well, then at least add a comment about it: `// todo: use qhash when msvc doesn't complain about it anymore`",0,0,0,0.9254806041717528,0.9912959337234496,0.9926557540893556,0.0,accept,unanimous_agreement
358340094,11433,it's optional in c++ and we usually omit it.,0,0,0,0.9840296506881714,0.9910378456115724,0.9901195764541626,0.0,accept,unanimous_agreement
358342804,11433,then why not just declare appropriate qhash function? it's trivial. or use underlying integer type for qhash keys?,0,0,0,0.8263204097747803,0.9829905033111572,0.993353009223938,0.0,accept,unanimous_agreement
358343409,11433,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
358343569,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
358344587,11433,does using qt containers really that important. i saw some talk of one of qt developer and he himself advised to not use qt containers.,0,0,0,0.9176939129829408,0.908634066581726,0.8995570540428162,0.0,accept,unanimous_agreement
358347243,11433,"i think no, unless there are some benefits in some particular case. don't forget that qt containers are implicitly shared, for e.g..",0,0,0,0.9750508069992064,0.9672341346740724,0.9801912307739258,0.0,accept,unanimous_agreement
358348701,11433,"i considered using underlying type but then i have to use static_cast everywhere, especially using that in constructor will only produce useless noise.",0,0,0,0.9554013013839722,0.8860806822776794,0.7778251767158508,0.0,accept,unanimous_agreement
358349986,11433,it's no problem for me to use unordered_map here.,0,0,0,0.9746277928352356,0.9823787808418274,0.9861428141593932,0.0,accept,unanimous_agreement
358367431,11433,"i think the point is the coherency of container/data structure used through out the project. now there is a comment stating the reason of using std container, then i'm fine with it. i considered about it awhile ago but i think it is too much work for little/none gain for this project.",0,0,0,0.915260910987854,0.9528449773788452,0.9128760695457458,0.0,accept,unanimous_agreement
358375297,11433,"since std/qt containers are not complete substitutes for each other, such a question should never be raised. we only can choose default containers for project (qt containers currently) and use others when it has meaning.",0,0,0,0.9799110889434814,0.9871543645858764,0.9917508959770204,0.0,accept,unanimous_agreement
359704728,11433,strip `static`.,0,0,0,0.9860899448394777,0.9886977672576904,0.9936703443527222,0.0,accept,unanimous_agreement
359704968,11433,move this to .cpp file and don't forget the `const` to variables.,0,0,0,0.9827449917793274,0.9945932030677797,0.9947664737701416,0.0,accept,unanimous_agreement
359715174,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
359718665,11433,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1640344147,20951,whether a torrent is private isn't defined by its source. is disambiguation needed for this? i don't have any suggestions.,0,0,0,0.8362587690353394,0.7236304879188538,0.9704274535179138,0.0,accept,unanimous_agreement
1640344780,20951,[code block] same in all other places where you use `qstringliteral`,0,0,0,0.9878175854682922,0.9932830333709716,0.9954344630241394,0.0,accept,unanimous_agreement
1640345306,20951,[code block] strings are left aligned.,0,0,0,0.9864122867584229,0.9908883571624756,0.9946510195732116,0.0,accept,unanimous_agreement
1640389181,20951,"how about simply putting ""flags private torrents""?",0,0,0,0.9792290925979614,0.9852508306503296,0.9913732409477234,0.0,accept,unanimous_agreement
1640394331,20951,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1640419959,20951,sure.,0,0,0,0.9536533951759338,0.9664214849472046,0.9824982285499572,0.0,accept,unanimous_agreement
1640811952,20951,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1640831588,20951,maybe add `hidevalues`? [code block],0,0,0,0.9888395667076112,0.9930300116539,0.9954043626785278,0.0,accept,unanimous_agreement
1640832571,20951,"does it depend on metadata? if not, it should be moved out (above) of the if conditional.",0,0,0,0.9872620701789856,0.9941905736923218,0.9942460656166076,0.0,accept,unanimous_agreement
1640832953,20951,this check is redundant anyway: [code block],0,0,0,0.9658723473548888,0.9835835099220276,0.9541655778884888,0.0,accept,unanimous_agreement
1640833496,20951,keep it sorted: [code block],0,0,0,0.9874979257583618,0.9898995757102966,0.9950205087661744,0.0,accept,unanimous_agreement
1640836366,20951,try: [code block],0,0,0,0.98762845993042,0.9875604510307312,0.994643211364746,0.0,accept,unanimous_agreement
1640843881,20951,"imo it should be placed above ""info hash v1"". like so: [code block]",0,0,0,0.9868258833885192,0.9925780892372132,0.9936726093292236,0.0,accept,unanimous_agreement
1640851759,20951,this should be moved up and drop the `colspan`: [code block],0,0,0,0.9884875416755676,0.9946988821029664,0.9960695505142212,0.0,accept,unanimous_agreement
1640867755,20951,"afaik, we can't know whether torrent is private or not if there is no metadata available. so i would display ""n/a"" in case when there are no metadata available.",0,0,0,0.987782657146454,0.941373646259308,0.9867718815803528,0.0,accept,unanimous_agreement
1640974050,20951,maybe better [code block] it'll save space.,0,0,0,0.9729778170585632,0.9893787503242492,0.9747464060783386,0.0,accept,unanimous_agreement
1649705103,20951,"personally, i prefer order. if space is the issue, i would find it more logical to put the two hashes on to the same line, rather than hash v1 and private.",0,0,0,0.94920814037323,0.9914593696594238,0.9787281155586244,0.0,accept,unanimous_agreement
1649772243,20951,i would still prefer to keep the hash to two lines. do you have your own preferences?,0,0,0,0.9818760752677916,0.9749046564102172,0.9844117760658264,0.0,accept,unanimous_agreement
1649777148,20951,"shouldn't it be ""private"" instead of ""is_private""? or is it not the binding with the data returned by webapi?",0,0,0,0.9824108481407166,0.9941821694374084,0.9932477474212646,0.0,accept,unanimous_agreement
1649787260,20951,"- i moved the private flag up as per and left the hashes on two lines for now. screenshots of current implementation: [a link] i chose not to move the private flag to the same line as hash v1, since on small screens the hash may be longer than the first column, and hence if the private is in the 2nd column i felt it may visually not be appealing",0,0,0,0.9406748414039612,0.9673044085502625,0.9788137674331664,0.0,accept,unanimous_agreement
1649800977,20951,with the changes in the lambda above: [code block],0,0,0,0.9877505898475648,0.9903028607368468,0.9955833554267884,0.0,accept,unanimous_agreement
1649801653,20951,this already exists in line 327 (at the moment of writing). [a link] was referring to it. /off topic i can't help with api stuff.,0,0,0,0.7100281715393066,0.9423264265060424,0.9429602026939392,0.0,accept,unanimous_agreement
1649802489,20951,i don't have an opinion on this.,-1,-1,-1,0.9015402793884276,0.8980885744094849,0.7978404760360718,-1.0,accept,unanimous_agreement
1649934146,20951,"i believe it should display only ""yes"" values when `hidevalues` is `true`.",0,0,0,0.979029417037964,0.988805651664734,0.9898513555526732,0.0,accept,unanimous_agreement
1649935049,20951,"another idea. should we always display an empty string in ""private"" column for torrents w/o metadata (instead of ""n/a"")?",0,0,0,0.9877322912216188,0.9876761436462402,0.9837925434112548,0.0,accept,unanimous_agreement
1650096378,20951,thank you. fixed it.,1,1,1,0.8581738471984863,0.9406348466873168,0.9819362759590148,1.0,accept,unanimous_agreement
1650510013,20951,this is wrong. move it to just above of `transferlistmodel::tr_status`.,-1,0,0,0.617763876914978,0.9795743227005004,0.9854432344436646,0.0,accept,majority_agreement
1650514135,20951,"since you are creating a new key, i would insist getting the grammar right. for all new code, please replace `has_metadata` with `have_metadata` globally. [code block]",0,0,0,0.9822577834129332,0.9918301701545716,0.9946322441101074,0.0,accept,unanimous_agreement
1650516248,20951,also please bump `api_version` in webapplication.h,0,0,0,0.9825037121772766,0.9947786331176758,0.9940993785858154,0.0,accept,unanimous_agreement
1650550599,20951,"why ""have"" and not ""has""? while ""metadata"" is plural, it's the torrent (singular) that has (or does not have) metadata. thus ""has"" to me sounds grammatically correct?",0,0,0,0.9689289331436156,0.9790943264961244,0.9846161007881165,0.0,accept,unanimous_agreement
1650708250,20951,"from [a link] : the ""metadata"" is not a 'third-person' property/subject but a native property of a `torrent` object. or view it another way: the `torrent::hasmetadata()` is telling whether the `torrent` itself has metadata, it is not referring to a third-party object. it is like me saying ""i have a car"". as a counter example: [a link] static method has an `obj` parameter to refer to some 'third-party' object. thus it is correct to use `has` instead of `have` there.",0,0,0,0.9810171723365784,0.98959481716156,0.9884024262428284,0.0,accept,unanimous_agreement
1650726880,20951,"i understand that metadata is a native property, but in my view we describe ""the torrent"", which is the third person singular. it (""the torrent"") has properties. if the torrent described itself, it would say ""i have"" properties. but here we are the people describing, thus i'd argue we should say ""it has"", and in consequence stick with ""hasmetadata"". it would also be consistent with the torrent data model which uses ""hasmetadata()"" what do the others think?",0,0,0,0.9680616855621338,0.9796295762062072,0.979438304901123,0.0,accept,unanimous_agreement
1650745094,20951,"hmmm after some googling [a link] uses ""has"": well. it seems my opinion is not conclusive. please disregard it. sorry for the noise.",-1,-1,-1,0.9899452328681946,0.988907754421234,0.992660641670227,-1.0,accept,unanimous_agreement
1650787098,20951,"i believe that such naming rules based on ordinary wording, for example, ""torrent has metadata"". but qt naming convention is more abstract from natural language. they require not to use third from for verbs (`is` prefix is special case): i suggest not to dwell on it here, since we don't have clear rules about it.",0,0,0,0.8967923521995544,0.9865267872810364,0.9824586510658264,0.0,accept,unanimous_agreement
1651527672,20951,i think there is something off with this change; the linter complains about a curly bracket after the merge. do you spot it? else i will check it when i find the time,0,0,0,0.9765843749046326,0.8662596344947815,0.9837958812713624,0.0,accept,unanimous_agreement
1652005006,20951,this should address the ci error: [code block],0,0,0,0.984977126121521,0.9932873845100404,0.9956121444702148,0.0,accept,unanimous_agreement
1652752470,20951,"thx, that passes now",0,0,0,0.9767678380012512,0.8174132108688354,0.9900587201118468,0.0,accept,unanimous_agreement
1657005692,20951,"separate value corresponding to ""n/a"" state should be provided in order to sort by ""private"" column properly. i believe `-1` could do the job.",0,0,0,0.9601215720176696,0.994063436985016,0.9938613176345824,0.0,accept,unanimous_agreement
1657521544,20951,", however, i would still put it on one line. or so, if possible, then the hash would definitely not overlap [code block]",0,0,0,0.9866042733192444,0.9914172291755676,0.9898202419281006,0.0,accept,unanimous_agreement
1657525786,20951,"anyway, it's not that important, maybe some more information will take up the empty space in the future.",0,0,0,0.9224626421928406,0.9667079448699952,0.8651547431945801,0.0,accept,unanimous_agreement
1660136061,20951,thanks - would this work?[a link],1,1,1,0.6011679172515869,0.8585509061813354,0.5611019730567932,1.0,accept,unanimous_agreement
1660156281,20951,"no. did i suggest returning its string representation? isn't it obvious that `internalvalue()` should provide something else (except, of course, the cases when the data itself is string)? imo, i made it clear that it is only necessary to add some third value that would correspond to the case when the ""privateness"" is not available (due to the lack of metadata).",0,0,0,0.985181450843811,0.9912780523300172,0.9907758831977844,0.0,accept,unanimous_agreement
1660210836,20951,"it makes no sense to write obvious things in the comments, for example, **what** the code does (this is already clear from the code itself). if you want to explain it, then write down **why** it does it.",0,0,0,0.8633687496185303,0.9811822772026062,0.9571872353553772,0.0,accept,unanimous_agreement
1660211678,20951,p.s. below is an example of a completely meaningless comment. [code block],0,0,-1,0.9410160183906556,0.9291935563087464,0.6895041465759277,0.0,accept,majority_agreement
1660213206,20951,why to complicate it? [code block],0,0,0,0.894949734210968,0.9714760184288024,0.9727579355239868,0.0,accept,unanimous_agreement
1660213949,20951,seems more correct would be the following: [code block] ...and use appropriate comparison in sort model (that takes into account invalid values).,0,0,0,0.9871895909309388,0.9879053831100464,0.9893332123756408,0.0,accept,unanimous_agreement
1660308402,20951,thanks... i agree with you that the comment is superfluous. i only added it because the code that is already there has the same type of comments.. example: [a link],1,1,1,0.9650327563285828,0.9468100070953368,0.981960654258728,1.0,accept,unanimous_agreement
1660309641,20951,i implemented it: [a link],0,0,0,0.9863734245300292,0.910515069961548,0.9932863116264344,0.0,accept,unanimous_agreement
1660393068,20951,"ok. but you still haven't taken care of the second part: iirc, the following will not handle invalid values properly: [code block]",0,0,0,0.9747578501701356,0.9401081800460817,0.9888187050819396,0.0,accept,unanimous_agreement
1660405266,20951,"try to add the following function: [code block] ...and use it to compare ""privateness"": [code block]",0,0,0,0.9868689179420472,0.9932776093482972,0.9942147135734558,0.0,accept,unanimous_agreement
1660407491,20951,or maybe convert an existing one into a template: [code block],0,0,0,0.9868289828300476,0.991642951965332,0.994606077671051,0.0,accept,unanimous_agreement
1660511581,20951,"i am still not sure why we changed approach a) to approach b) with the first one, we always get an integer (1, 0, -1), since -1 is the fall-back and isprivate() is only 1 or 0. since we convert the arguments for the threewaycompare explicitly to int, shouldn't it work if we sticked with approach a)? [a link]",0,0,0,0.9200133085250854,0.9779632687568665,0.9171040058135986,0.0,accept,unanimous_agreement
1660666084,20951,"because it better (more explicitly) reflects its essence. it either returns the value of ""privateness"" itself (of type bool), or invalid if it is not available (via an uninitialized qvariant). another way is a workaround, since all values (both valid and not) are represented by another data type (integer). i.e. true/false/invalid vs 1/0/-1.",0,0,0,0.979575216770172,0.9929667711257936,0.9873861074447632,0.0,accept,unanimous_agreement
1660677839,20951,`internalvalue()` should just return internal/raw representation of data. it shouldn't really depend on some particular usage of it.,0,0,0,0.9868344664573668,0.9893445372581482,0.9924036264419556,0.0,accept,unanimous_agreement
1661513321,20951,"please forgive me for maybe being slow in understanding. in my latest commit, i simply moved the `case transferlistmodel::tr_private:` from a `threewaycompare` to a `customcompare`. however, i did not convert an existing function into a template, because i believe that is already existing?: [a link]",-1,-1,-1,0.8121256232261658,0.759077787399292,0.645909309387207,-1.0,accept,unanimous_agreement
1661523385,20951,"thank you for the explanation,",1,1,1,0.5397526621818542,0.6117381453514099,0.745954155921936,1.0,accept,unanimous_agreement
1662167173,20951,"oh, right, i overlooked it (it's not very convenient to do all this through a smartphone browser). unfortunately, it is limited only to arithmetic types. but it's not a problem to make a more generic template. you can delete all instances of `customcompare` except the one that accept `tagset` as parameters, and add the following code instead: [code block]",0,0,0,0.9529250860214232,0.8898938298225403,0.9261389374732972,0.0,accept,unanimous_agreement
1662878352,20951,"done - had to add a small refinement, since the 2nd template was also triggered for arithmetic types and the ci complained about template overloading. hope the refinement makes sense? [a link]",0,0,0,0.9696806073188782,0.7424679398536682,0.680990993976593,0.0,accept,unanimous_agreement
1662936902,20951,hmm... clang compiled this without a problem. `std::enable_if_t` looks cumbersome. i'd rather use a more modern approach with `if constexpr`: [code block],0,-1,0,0.7350629568099976,0.6705730557441711,0.8276069164276123,0.0,accept,majority_agreement
1662952269,20951,...or better add requirement to second template: [code block],0,0,0,0.9865819215774536,0.9895052313804626,0.9955560564994812,0.0,accept,unanimous_agreement
1662957483,20951,updated :check_mark: thanks for the code suggestion. [a link],1,1,1,0.8438615798950195,0.8348135948181152,0.9811909794807434,1.0,accept,unanimous_agreement
1662969751,20951,done - [a link],0,0,0,0.9870482087135316,0.931226134300232,0.9946527481079102,0.0,accept,unanimous_agreement
1662989357,20951,to keep them in alphabetical order?,0,0,0,0.9779560565948486,0.9929113984107972,0.99344664812088,0.0,accept,unanimous_agreement
1663655184,20951,wrong order.,-1,-1,-1,0.9440091848373412,0.5554730296134949,0.7645806670188904,-1.0,accept,unanimous_agreement
1663681247,20951,could you elaborate please?,0,0,0,0.9838309288024902,0.9890007972717284,0.989826798439026,0.0,accept,unanimous_agreement
1665125291,20951,please keep them in alphabetical order.,0,0,0,0.973363161087036,0.9896748661994934,0.99365895986557,0.0,accept,unanimous_agreement
1665125634,20951,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
1665138104,20951,"happy to change that order (done). but what about the other inclusions? they are not in alphabetical order either. [code block] just for my education and to understand how to do it ""the right way"" - is there a reason for that specific order?",1,1,1,0.9733148217201232,0.7904236316680908,0.9425123929977416,1.0,accept,unanimous_agreement
1665140240,20951,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1665148747,20951,"there are various reasons, some of which are objective, some of which are subjective - there are many discussions on this topic on the web. in general, we have drawn up our own rules based on them: [a link]",0,0,0,0.9217827916145324,0.947616457939148,0.992173671722412,0.0,accept,unanimous_agreement
1665153466,20951,"thx for sharing, will study those",0,0,1,0.946972668170929,0.9882135391235352,0.8244207501411438,0.0,accept,majority_agreement
1669878145,20951,"damn it, we've overlooked it after all. this is the wrong place because it is eventually compared as an integer. [code block] it should be moved outside of this group of cases and placed separately: [code block]",-1,-1,-1,0.9825656414031982,0.9871917963027954,0.9923163652420044,-1.0,accept,unanimous_agreement
1676758486,20951,"~~this new comparison logic isn't equivalent to the removed `int customcompare(const qdatetime &left, const qdatetime &right)`. the `if (!isleftvalid && !isrightvalid)` case would produce unexpected results.~~ furthermore, this `customcompare` was really intended for specific arithmetic types and not general use. by making them generic really hides the essence of how and what are they comparing. i would suggest reverting these changes in #21041.",0,0,0,0.9353041052818298,0.9785054922103882,0.9756382703781128,0.0,accept,unanimous_agreement
1676766456,20951,"i don't know how you define it, but this compare logic is really the same for all types for which we define the concept of ""invalid value"". the only difference is how the concept of ""invalid value"" is defined for a particular type.",0,0,0,0.9524859189987184,0.9458426237106324,0.9870439171791076,0.0,accept,unanimous_agreement
1676771615,20951,"done anyway. i don't want to waste my time on this issue anymore, it's already taken up too much of it.",-1,-1,-1,0.7280327677726746,0.5891497135162354,0.9180859327316284,-1.0,accept,unanimous_agreement
1676777116,20951,"for me, i would treat the comparison for each column as unique and it should be (easily) customizable. if some of them could share the same code then it is great and can be done. also generalization should not become the final goal as it would hide the salient comparison of the column values (and possibly introduce slower comparison code path).",1,0,0,0.7148422002792358,0.891870379447937,0.938608944416046,0.0,accept,majority_agreement
63577775,5264,this and next methods are equal except param type. why don't you implement template?,0,0,0,0.9859545826911926,0.9824966192245485,0.9939321875572203,0.0,accept,unanimous_agreement
63578757,5264,why too long? `version ` is enough.,0,0,0,0.9829319715499878,0.9728461503982544,0.9659323692321776,0.0,accept,unanimous_agreement
63578859,5264,"they differ in the very first line (`qlatin1char` vs `char`). i don't know how to express this difference in a single template, otherwise i would join them.",0,0,0,0.9600875973701476,0.9313635230064392,0.9531930685043336,0.0,accept,unanimous_agreement
63579146,5264,doesn't `char` work with qstring?,0,0,0,0.9726405143737792,0.994059681892395,0.9937390089035034,0.0,accept,unanimous_agreement
63579514,5264,maybe `std::array `?,0,0,0,0.9873099327087402,0.9936946034431458,0.9936662316322328,0.0,accept,unanimous_agreement
63579855,5264,or maybe `std::tuple`? it handles a lot of relational operators...,0,0,0,0.9721800088882446,0.992708146572113,0.9930461049079896,0.0,accept,unanimous_agreement
63580369,5264,take a look at the updated version. i think that is suitable.,0,0,0,0.8845694065093994,0.9818173050880432,0.8889363408088684,0.0,accept,unanimous_agreement
63580602,5264,"you don't believe in plugin writers? joking, of course.",-1,-1,0,0.8857876062393188,0.9608564376831056,0.5517646670341492,-1.0,accept,majority_agreement
63581015,5264,"isn't `return {0u, 0u};` enough?",0,0,0,0.9852109551429749,0.991846799850464,0.9934558272361756,0.0,accept,unanimous_agreement
63581847,5264,what i'm going to say maybe doesn't make sense (please bear with me): it is weird to have a ctor taking`qstring` as parameter. i would imagine having a list (or tuple) of numbers as parameters. and maybe provide a static method to convert `qstring` to list (or tuple) of numbers...,-1,-1,-1,0.9843186736106871,0.9551368951797484,0.9837390184402466,-1.0,accept,unanimous_agreement
63591900,5264,"could you elaborate, please?",0,0,0,0.9829531908035278,0.988714635372162,0.9868924021720886,0.0,accept,unanimous_agreement
63592256,5264,"there are no `unsigned short` literals, and thus, expressions like `{0u, 0u}` will result in narrowing conversion in constructor. i don't know a beautiful solution.",-1,-1,0,0.8304080963134766,0.8100298047065735,0.6244349479675293,-1.0,accept,majority_agreement
63593094,5264,maybe just return `pluginversion()`?,0,0,0,0.9879989624023438,0.9946349859237672,0.9927571415901184,0.0,accept,unanimous_agreement
63652026,5264,or even `{}` since we use default pluginversion here anyway.,0,0,0,0.9879773259162904,0.9938536882400512,0.993114411830902,0.0,accept,unanimous_agreement
63652089,5264,default constructed pluginversion is enough here.,0,0,0,0.9889802932739258,0.98955100774765,0.9955690503120422,0.0,accept,unanimous_agreement
63652417,5264,why don't you use `m_components.at(i)` directly?,0,0,0,0.98411363363266,0.9929452538490297,0.9937586784362792,0.0,accept,unanimous_agreement
63652642,5264,insert blank line before.,0,0,0,0.9734322428703308,0.9836996793746948,0.9860677123069764,0.0,accept,unanimous_agreement
63652871,5264,"separate declarations of different type (ie, methods, types, fields) by blank line.",0,0,0,0.9812569618225098,0.9871528744697572,0.9905279874801636,0.0,accept,unanimous_agreement
63653191,5264,"if you did this ""general"" version template, then put it in its own header. otherwise, what sense in it?",0,0,0,0.983086109161377,0.9928404092788696,0.983346462249756,0.0,accept,unanimous_agreement
63655822,5264,"the essence of `version` class is just a tuple of numbers, how could someone imagine he could construct a tuple of numbers via a qstring? so it would be more explicit to do something like: [code block]",0,0,0,0.9817894101142884,0.9933595061302184,0.991590976715088,0.0,accept,unanimous_agreement
63656994,5264,anyone had the interest to enlighten me is there any downside if use `std::tuple` here:question:,0,0,0,0.8797169923782349,0.9499539136886596,0.9522687792778016,0.0,accept,unanimous_agreement
63661534,5264,"from my point of view, a possibility to write a version as a text is an inherent property of it. that is why i added those constructors. following this path, `operator qstring` and `operator qbytearray` may be of use. your vision limits a version to an ordered number sequence which may be compared to another such sequence, as far as i understand. btw, repeating the argument type in the from- methods we just add unneeded noise, as to me. `fromstring` would be enough.",0,0,0,0.9606085419654846,0.9851059913635254,0.9798689484596252,0.0,accept,unanimous_agreement
63662371,5264,"thank you for the explanation, then so be it, i've already raised my concerns.",0,1,0,0.7319072484970093,0.7184996008872986,0.8310665488243103,0.0,accept,majority_agreement
63664801,5264,where would you suggest to put the file?,0,0,0,0.9860123991966248,0.9921899437904358,0.9945545196533204,0.0,accept,unanimous_agreement
63665636,5264,i replaced `tostring()` with `operator qstring` and that allowed to remove `qdebug` output operator.,0,0,0,0.988519251346588,0.9927156567573548,0.9942319989204408,0.0,accept,unanimous_agreement
63672093,5264,"in `base/`. but i have another look at it. why bother to use this template? why not just make one generic version class? we can have fixed format version: major.minor.release.patch. and we can represent it as follows: major[.minor[.release[.patch]]], where any omitted rest is equal to zero.",0,0,0,0.983722984790802,0.9886561632156372,0.9817564487457277,0.0,accept,unanimous_agreement
63672412,5264,"why? afaik, tuple is array with items of different type.",0,0,0,0.9825594425201416,0.8731800317764282,0.991111695766449,0.0,accept,unanimous_agreement
63672870,5264,why you add `{}` here? why not `pluginversion version;`?,0,0,0,0.9861769080162048,0.9939915537834167,0.9941082000732422,0.0,accept,unanimous_agreement
63673155,5264,"and don't forget about ""punctuation"" rule: `version `.",0,0,0,0.9817880392074584,0.9846155047416688,0.9941771030426024,0.0,accept,unanimous_agreement
63673291,5264,because a template allows describing the conception cleanly. how do you suggest to implement conversion to a string? omit zeroed components too?,0,0,0,0.9869307279586792,0.991038978099823,0.9925234913825988,0.0,accept,unanimous_agreement
63673386,5264,`n - 1`,0,0,0,0.973425269126892,0.9821610450744628,0.9792047142982484,0.0,accept,unanimous_agreement
63673419,5264,`n - 1`,0,0,0,0.973425269126892,0.9821610450744628,0.9792047142982484,0.0,accept,unanimous_agreement
63673614,5264,you don't catch exceptions...,0,-1,0,0.7387363910675049,0.8461542129516602,0.9888022541999816,0.0,accept,majority_agreement
63674247,5264,"btw, i forgot to reply to a previous comment. i use this->operator[] in order to encapsulate the implementation (`std::array`) and catch potential out of range errors.",0,0,0,0.9780198335647584,0.974671185016632,0.9845527410507202,0.0,accept,unanimous_agreement
63677801,5264,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
63678777,5264,"is it the problem? there is common way: minimum items (default to, for example, 2) + omit trailing zeros. omitting trailing zeros is a common practice. but your implementation disallow it.",0,0,0,0.9735476970672609,0.9797253012657166,0.9753366112709044,0.0,accept,unanimous_agreement
63678985,5264,wrong indentation.,-1,-1,-1,0.9131431579589844,0.8190920352935791,0.5286551713943481,-1.0,accept,unanimous_agreement
63679302,5264,why do you move these operators outside the class?,0,0,0,0.9721879363059998,0.9845506548881532,0.992240309715271,0.0,accept,unanimous_agreement
63679354,5264,"no, it does not. you just need to change `operator qstring()`, but i think that for the plugin versions we shall not do the omitting.",0,0,0,0.984818160533905,0.9869135022163392,0.9933278560638428,0.0,accept,unanimous_agreement
63679368,5264,`version `,0,0,0,0.9797256588935852,0.9868729710578918,0.9908258318901062,0.0,accept,unanimous_agreement
63679569,5264,"if you like, we can add another template parameter (number of mandatory printed digits) and change constructors and `operator qstring()` accordantly.",0,0,0,0.9868549108505248,0.991187572479248,0.9947726130485536,0.0,accept,unanimous_agreement
63680019,5264,because they do not need an access to the internal representation of the class.,0,0,0,0.9648568034172058,0.9880874156951904,0.9898567199707032,0.0,accept,unanimous_agreement
63680219,5264,i wish this worked in the usual way: it should parse version string with/without trailing zeros and it should print version in following format: min items count + trailing items unless the last item is zero.,0,0,0,0.8960380554199219,0.9673215746879578,0.8898332715034485,0.0,accept,unanimous_agreement
63680495,5264,it's not the reason.,-1,0,0,0.5146700739860535,0.6943780779838562,0.8583670258522034,0.0,accept,majority_agreement
63680633,5264,pardon?,0,0,0,0.7543778419494629,0.8501777052879333,0.9331162571907043,0.0,accept,unanimous_agreement
63681502,5264,"just for fun... we can do this either as an external function, or as a friend external function, or as a class method. what to choose? i'm more interested in the second and third option.",0,1,1,0.6140893697738647,0.933822512626648,0.5907061696052551,1.0,accept,majority_agreement
63681773,5264,of course the non-friend free external function: the less code has access to the class internals the better.,0,0,0,0.983281672000885,0.8536054491996765,0.9888728260993958,0.0,accept,unanimous_agreement
63681827,5264,"this won't matter if agrees on some fixed typedef: `typedef std::tuple version;` an ideal `version` type has the same mathematical properties as `std::tuple `. and mainly because `std::tuple` already handles the relational operators just as we wanted. all there's missing is some helper methods to do type conversions. the `version` class could be simpler, imo. but all of this doesn't matter now, see: [a link]",0,0,0,0.9714117646217346,0.9806057810783386,0.981483280658722,0.0,accept,unanimous_agreement
63683061,5264,`std::array` has comparison operators too.,0,0,0,0.9884713888168336,0.9924700260162354,0.9909634590148926,0.0,accept,unanimous_agreement
63685850,5264,"thanks, i didn't noticed that, but this leads to another question, why don't you utilize it directly?",0,1,1,0.8619888424873352,0.6053287982940674,0.8788817524909973,1.0,accept,majority_agreement
63687767,5264,i will in the next pr update. :) thank you for pointing me to them!,1,1,1,0.9931089878082277,0.9958731532096864,0.99733966588974,1.0,accept,unanimous_agreement
63688964,5264,:+1:,0,0,0,0.7570654153823853,0.9166757464408876,0.9328674077987672,0.0,accept,unanimous_agreement
63708415,5264,but if you need an access?,0,0,0,0.9877389073371888,0.9843350052833556,0.9927194118499756,0.0,accept,unanimous_agreement
63711095,5264,"it depends, as you probably know. for this class i prefer members: less typing, no profits from non-members.",0,0,0,0.8918407559394836,0.9495232701301576,0.9753817915916444,0.0,accept,unanimous_agreement
63927086,5264,add space after `while`.,0,0,0,0.986292839050293,0.9890912175178528,0.9946832060813904,0.0,accept,unanimous_agreement
63928561,5264,if this file is in `base/utils/` then put the template name in utils namespace.,0,0,0,0.9889010190963744,0.9952064156532288,0.9952202439308168,0.0,accept,unanimous_agreement
63929308,5264,"we can avoid using exceptions, if we add **valid** property (via `version::isvalid()`). what do you say about?",0,0,0,0.9864497780799866,0.9931894540786744,0.995079755783081,0.0,accept,unanimous_agreement
64200400,5264,"why would we want to? i'm objecting creating classes without an invariant. if you want to avoid try- blocks in the client code, we better add `version tryparse(astring s, const version &defaultversion)`. maybe make it static in the `version` class.",0,0,0,0.983915388584137,0.9879561066627502,0.9755098223686218,0.0,accept,unanimous_agreement
64238104,5264,"yes. ok. but, imo, it will be better to use another form: `bool parse(const qstring &str, version &version)` (i think we don't need any default version when parsing failed).",0,0,0,0.977827250957489,0.9399824142456056,0.975005030632019,0.0,accept,unanimous_agreement
64238542,5264,"of course, it should be static method in the version class.",0,0,0,0.9888168573379515,0.9941197633743286,0.99165278673172,0.0,accept,unanimous_agreement
65374407,5264,"why this operator isn't a method of the class `version`? since it's now using `std::array` relational operators, maybe [a link] doesn't hold any more.",0,0,0,0.983251929283142,0.9944649338722228,0.9878937602043152,0.0,accept,unanimous_agreement
65380138,5264,for the same reason: this function does not need an access to the class internal representation.,0,0,0,0.9844695329666138,0.985620379447937,0.9928081035614014,0.0,accept,unanimous_agreement
65394031,5264,"just curious, what is your opinion on this one? [code block] btw, maybe you should add a comment about it, you know it could leave some devs scratching their heads (or maybe just me :p)",1,1,1,0.9771102666854858,0.9319533109664916,0.9821122884750366,1.0,accept,unanimous_agreement
65396829,5264,"with this one it is needed to read the function body, while operator outside of the class suggests that it does not have access to the non-public members. i don't say that there are no friend operators, but you scan for friends declarations inside of a class when reading it, right? besides, i was thinking about [code block] and free function provides a symmetrical form.",0,0,0,0.9818091988563538,0.9774141311645508,0.9918971657752992,0.0,accept,unanimous_agreement
65398785,5264,", do you suggest to make it a class member? why, if so?",0,0,0,0.9676387310028076,0.9924185276031494,0.9928910732269288,0.0,accept,unanimous_agreement
65411454,5264,"and so is reading `==` and other relational operators, no? yes, but why this hint is important? it would make sense if implicit conversion are involved as i read here: [a link] or doing [a link] and `!=` is a `const` method, it clearly hints it won't modify anything. ## can't really say i have a special consideration. imo it's just simplicity. if i see a `==` in a class declaration, then naturally (for me) there should be a `!=` nearby, if it's declared outside of the class then it must be doing something special, but now, seems not.... and i don't think we need to have `==` operator for different template instances now... i'm lazy person (well, just a bit) so i'm found of [a link] principle. nice discussing with you though.",0,0,0,0.7614442110061646,0.9115887880325316,0.9674401879310608,0.0,accept,unanimous_agreement
65429432,5264,"another point which i did not realise rationally before now, is the following: when functions are inside of a class, the class declarations grows longer and psychologically i feel it as probably more complicated entity, while free functions are independent and thus do not increase the complexity level.",0,0,0,0.8256398439407349,0.9409829378128052,0.9678213596343994,0.0,accept,unanimous_agreement
66310765,5264,honest question: is there a technical reason to do `return {}` instead of `return pluginversion`? to me the 2nd one is more readable.,0,0,0,0.9155895113945008,0.8993902206420898,0.9472054839134216,0.0,accept,unanimous_agreement
66310913,5264,alphabetically this goes after qlist.,0,0,0,0.9745423197746276,0.9897055625915528,0.9940764904022216,0.0,accept,unanimous_agreement
66313037,5264,i think this should be `n >= 3`,0,0,0,0.9809765219688416,0.9833807945251464,0.987526834011078,0.0,accept,unanimous_agreement
66313079,5264,i think this should be `n >= 4`,0,0,0,0.982394278049469,0.9838323593139648,0.987628698348999,0.0,accept,unanimous_agreement
66313537,5264,no checks here?,0,0,0,0.9740832448005676,0.9829386472702026,0.991061806678772,0.0,accept,unanimous_agreement
66314038,5264,i would suggest `static version parse(const aqstring &s)` and always returning an empty version on error.,0,0,0,0.9877445101737976,0.9933575987815856,0.9931107759475708,0.0,accept,unanimous_agreement
66315451,5264,i confess that i am not good with template programming. it hurts my brain. and i suspect that in the above 2 lines you use c++11 features. can you explain to me what the 2 lines above do?,-1,-1,-1,0.9865018725395204,0.9857945442199708,0.984317183494568,-1.0,accept,unanimous_agreement
66315582,5264,is this necessary when you don't pass a value to the member variable?,0,0,0,0.985980987548828,0.9937992691993712,0.991922914981842,0.0,accept,unanimous_agreement
66315976,5264,"'mandatory' field isn't used in actual code yet, right?",0,0,0,0.9834305047988892,0.9053298234939576,0.9872156381607056,0.0,accept,unanimous_agreement
66322825,5264,"no, there is no difference. compiler substitutes '{}' with 'pluginversion()'.",0,0,0,0.9850521087646484,0.9899128675460817,0.993343472480774,0.0,accept,unanimous_agreement
66323150,5264,what do you mean? it is used when parsing string representation of the version and when generating the string representation.,0,0,0,0.9882283806800842,0.9877927899360656,0.9924254417419434,0.0,accept,unanimous_agreement
66323350,5264,afaik `std::array` behaves like a c array. i want to initialise it with zeroes.,0,0,0,0.9843894839286804,0.980932593345642,0.9905127882957458,0.0,accept,unanimous_agreement
66323605,5264,i mean i only saw this initialization(?) `utils::version ` not something like `utils::version ;`,0,0,0,0.9653518199920654,0.9930290579795836,0.9924450516700744,0.0,accept,unanimous_agreement
66323741,5264,"this is the variadic template, which can take variable number of arguments. this allows one to write: [code block] to get version ""3.3.5""",0,0,0,0.9862502813339232,0.9928626418113708,0.9951045513153076,0.0,accept,unanimous_agreement
66323902,5264,i think the error text is wrong here. mandatory components can be fewer than the total number of components.,-1,0,0,0.5610190629959106,0.6264656782150269,0.9407850503921508,0.0,accept,majority_agreement
66323944,5264,": and this line forwards those initialiser lists to the `std::array`, which checks its number and types.",0,0,0,0.9878458380699158,0.9888034462928772,0.9935042262077332,0.0,accept,unanimous_agreement
66324672,5264,stupid me. thanks!,-1,-1,-1,0.9889051914215088,0.9477003812789916,0.995547652244568,-1.0,accept,unanimous_agreement
66324796,5264,i will add `static_assert(n > 0)` then,0,0,0,0.9884690642356871,0.9854686856269836,0.9943829774856568,0.0,accept,unanimous_agreement
66325309,5264,why? what's the problem with the current code?,0,0,0,0.841590940952301,0.8002251982688904,0.8637175559997559,0.0,accept,unanimous_agreement
66326497,5264,i was merely suggesting a different approach(and name). i think most of qt follows the same paradigm. try to parse and then check the result if empty. (or special error() function if empty result is a valid state).,0,0,0,0.9827336072921752,0.9791404008865356,0.9893321990966796,0.0,accept,unanimous_agreement
66328282,5264,that's it: version 0 is the valid one.,0,0,0,0.9836379289627076,0.9829574227333068,0.9898421168327332,0.0,accept,unanimous_agreement
66329077,5264,but you still do this check elsewhere `version != pluginversion{}`! or is it a different state? (sorry i am confused by the abstraction of templates).,-1,-1,-1,0.9644789695739746,0.9713597297668456,0.9754496812820436,-1.0,accept,unanimous_agreement
66330050,5264,i guess you mean the code in `searchengine::parseversioninfo()`. in _that_ context empty version is not valid. but shall we assume this in general? what about the following signature: [code block] which throws if `ok == nullptr`?,0,0,0,0.9879049062728882,0.9925973415374756,0.987863838672638,0.0,accept,unanimous_agreement
66330492,5264,"hmm, is it easier for version to have an isvalid() method instead? qt has it and most of our base classes do too.",0,0,0,0.983549952507019,0.9895338416099548,0.9762337803840636,0.0,accept,unanimous_agreement
66333329,5264,i strongly object. classes without an invariant are hard to use and i don't understand for what sake we shall do that to this class which has a simple and very well defined invariant.,-1,0,-1,0.7579157948493958,0.5287938117980957,0.949781596660614,-1.0,accept,majority_agreement
66334065,5264,"ok. then use the ""ok"" signature you posted above if you want. or leave it as is. i just wanted to make it easier for checking. not add complexity.",0,0,0,0.9807189702987672,0.9783890843391418,0.9869438409805298,0.0,accept,unanimous_agreement
66343101,5264,"yes. asked to add support for mandatory < total, and it was fun to do that.",1,1,1,0.8791587948799133,0.9869022369384766,0.9946529865264891,1.0,accept,unanimous_agreement
66343466,5264,"will leave it as it is then, because with the 'ok' parameters it would be needed to rewrite the parsing/constructor relation the other way round.",0,0,0,0.9880727529525756,0.992833375930786,0.9927679300308228,0.0,accept,unanimous_agreement
66354319,5264,"i am not sure the behavior of this is desired. if someone enters a version of ""3.0.0"" then he surely expects ""3.0.0"" printed back and not just ""3"". even if ""mandatory == 1"". do you have any use-case that need the current behavior?",0,0,0,0.909723460674286,0.9091896414756776,0.8891158699989319,0.0,accept,unanimous_agreement
66364946,5264,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
66384975,5264,"omitting trailing zeros (down to mandatory size) is common version use case. so proper version parser shouldn't fail with such a reduced version representation. mandatory here is ""coding style"" for version string. so if some project have `mandatory = 2` ""3.0.0"" and ""3"" are incorrect for it, but ""3.0"", ""3.0.1"" and even ""3.0.0.1"" are correct.",0,0,0,0.9877432584762572,0.991160213947296,0.9854158759117126,0.0,accept,unanimous_agreement
94568981,5264,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
112528184,5264,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
112528749,5264,"imo, `class aqstring` is ugly. just use `class string`.",-1,-1,-1,0.6901815533638,0.9760766625404358,0.9909203052520752,-1.0,accept,unanimous_agreement
112528885,5264,why not qlatin1char is here?,0,0,0,0.9826168417930604,0.9910050630569458,0.9877183437347412,0.0,accept,unanimous_agreement
112529255,5264,shouldn't these two constructors be private and used indirectly via tryparse?,0,0,0,0.982363224029541,0.9942065477371216,0.992351233959198,0.0,accept,unanimous_agreement
112529324,5264,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
112529823,5264,i see you prefer `class` keyword in templates. why not `typename`? let's leave `class` for class declarations. (imo),0,0,0,0.9740371108055116,0.7229525446891785,0.988594651222229,0.0,accept,unanimous_agreement
112534084,5264,ok. `class` is simply shorter.,0,0,0,0.9816429018974304,0.9932021498680116,0.9915341734886168,0.0,accept,unanimous_agreement
112534371,5264,"~no, these ones are not used by `tryparse`. there is one private for that function.~ they are used, but i think they should be left public. `tryparse` just eats exception.",0,0,0,0.9830880761146544,0.9774353504180908,0.9913111925125122,0.0,accept,unanimous_agreement
112535367,5264,"so it can throw exception, iirc. please add appropriate comments to methods/constructors that can throw exception, but doesn't contain `throw` statement in its body directly.",0,0,0,0.9892043471336364,0.9926049709320068,0.994708776473999,0.0,accept,unanimous_agreement
112535565,5264,`qbytearray::split()` takes `char` argument.,0,0,0,0.987076222896576,0.9928725957870485,0.9949316382408142,0.0,accept,unanimous_agreement
112535828,5264,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
112536465,5264,"same here. just `stringlist`. it can be not only qstringlist, or not?",0,0,0,0.9886696338653564,0.992727756500244,0.9931493401527404,0.0,accept,unanimous_agreement
112607812,5264,inconsistent with line 684 !?,-1,-1,-1,0.6127008199691772,0.687559962272644,0.5675028562545776,-1.0,accept,unanimous_agreement
112608391,5264,indention.,-1,0,0,0.5147945880889893,0.9533103704452516,0.9895082712173462,0.0,accept,majority_agreement
112609056,5264,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
112609280,5264,it's usual behavior in cases like this one. e.g. qurl: `qurl(urlstr).tostring() == urlstr` isn't always true.,0,0,0,0.9808890223503112,0.993640124797821,0.9897434115409852,0.0,accept,unanimous_agreement
112628394,5264,"yes, , what's wrong with indentation here?",0,0,0,0.5481253266334534,0.7225233912467957,0.9772323966026306,0.0,accept,unanimous_agreement
112646128,5264,i misread.,-1,-1,-1,0.968309760093689,0.8847010731697083,0.97154700756073,-1.0,accept,unanimous_agreement
407078371,12480,why are these needed if you request c++ standard support? cmake knows what minimal compiler versions are required to fully support the requested standard version. you can use [compile-features]( [a link] if you want a finer control.,0,0,0,0.989310383796692,0.9904728531837464,0.9926576018333436,0.0,accept,unanimous_agreement
407078593,12480,just set `public` target feature for the base target. see [a link],0,0,0,0.9855327010154724,0.9932583570480348,0.9962873458862304,0.0,accept,unanimous_agreement
407080087,12480,"i thought about using that, but ultimately decided against it. for example, some gcc 4.x advertise c++14 support, but to check if it really has full c++support, i would have to check against the 4 c++14 features that were only added in 5.0. so i thought i might as well just check the version, since otherwise, the intent of checking for those specific features might not be immediately obvious.",0,0,0,0.9664385318756104,0.9855505228042604,0.9754579663276672,0.0,accept,unanimous_agreement
407081132,12480,i think you are wrong. cmake already maintains a table with minimal compiler versions for each standard level.,-1,0,0,0.7271380424499512,0.7380427718162537,0.9415243268013,0.0,accept,majority_agreement
407081794,12480,what's the advantage? and wouldn't i have to do that in the `cmakelists.txt` under `src/` instead?,0,0,0,0.9880900382995604,0.9903354644775392,0.9913610816001892,0.0,accept,unanimous_agreement
407084623,12480,"i tested with gcc/g++ 4.8.5 on ubuntu; without the version checks (i.e. everything inside the `if (""cxx_std_${qbittorrent_minimum_cxx_standard}"" in_list cmake_cxx_compile_features)`), the configure completes successfully, but the build then fails with `unknown flag -std=c++14`. the actual failure reason in this instance is because gcc 4.8 would expect something like `-std=c++1x`, but it also tells us gcc 4.8 passes cmake's `cxx_std_*` check, without actually having full c++14 support, according to the table at [a link] in other words, even if the `-std=` flag name was corrected to be the legacy one, the build would eventually fail as soon as a c++14 feature only introduced with gcc 5.0 were used.",0,0,0,0.9755624532699584,0.9922720193862916,0.9908745288848876,0.0,accept,unanimous_agreement
407088603,12480,"oh, sorry. you set it below. and you say it does not report an error at compile time?",-1,-1,-1,0.9887266755104064,0.9922357201576232,0.9844618439674376,-1.0,accept,unanimous_agreement
407089273,12480,"your code comment says you want to prevent user from overriding the standard value, which is very much understandable given the libtorrent standard-dependent abi. users can't override explicitly set target features.",0,0,0,0.9872610569000244,0.9791237115859984,0.9908259510993958,0.0,accept,unanimous_agreement
407109069,12480,"no error at _configure_ time (as in cmake's configuration). eventually an error occurs at compile time, since the required features are actually not all present, even though cmake thinks they are (because the compiler mislead it into thinking that).",0,0,0,0.9824880957603456,0.9930411577224731,0.970455288887024,0.0,accept,unanimous_agreement
407112642,12480,"ah, they advertise c++14 support for gcc 4.8.5, which has a bare minimum but provides a flag to turn it on. cmake defines the `cmake_cxx14_standard__has_full_support` variable when it presumes the compiler support the standard completely. maybe you can use that?",0,0,0,0.983786404132843,0.9914986491203308,0.9890581965446472,0.0,accept,unanimous_agreement
407116174,12480,", maybe you did not know: `${cmake_cxx${qbittorrent_minimum_cxx_standard}_standard__has_full_support}` is how weird it looks in cmake syntax.",-1,0,-1,0.9763046503067015,0.9127246737480164,0.9557003378868104,-1.0,accept,majority_agreement
407186524,12480,"thanks, your solution worked and greatly simplified the code, but the `if` condition became `cmake_cxx${qbittorrent_minimum_cxx_standard}_standard__has_full_support` (notice the lack of the outer-most `${}`), due to the way variable expansion occurs inside `if` statements.",1,1,1,0.8515663146972656,0.9103060960769652,0.9325658679008484,1.0,accept,unanimous_agreement
407186819,12480,do you want to consider c++ 98?,0,0,0,0.9866576790809632,0.9921568632125854,0.993845522403717,0.0,accept,unanimous_agreement
407187467,12480,"no, i just want to prevent the user from using a lower than minimum (default) value. for example, if the default value is `14`, the user is allowed to set `17` but not `11`.",0,0,0,0.9817367792129515,0.9852179884910583,0.9928592443466188,0.0,accept,unanimous_agreement
407188040,12480,"good catch, fixed.",1,1,1,0.9717488288879396,0.9774162769317628,0.9876664876937866,1.0,accept,unanimous_agreement
407499400,12480,i'd change this to function and pass the minimal standard value in argument,0,0,0,0.9874603748321532,0.9898248314857484,0.9932373762130736,0.0,accept,unanimous_agreement
407519155,12480,i wanted to suggest something similar... it would be good to define the minimal standard in the main (top level) project file.,0,0,0,0.9698580503463744,0.974045991897583,0.991718888282776,0.0,accept,unanimous_agreement
410903150,12480,", do you intend to finish it?",0,0,0,0.9773839712142944,0.986722469329834,0.9749444127082824,0.0,accept,unanimous_agreement
413925020,12480,"yes, sorry for the delay. i should have it ready in the following days.",-1,-1,-1,0.987964391708374,0.9898679256439208,0.9903082251548768,-1.0,accept,unanimous_agreement
414080870,12480,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
414083667,12480,errr.... what is that?,-1,-1,-1,0.9471442103385924,0.8705561757087708,0.688888669013977,-1.0,accept,unanimous_agreement
414083915,12480,"simply ""14""",0,0,0,0.9767783880233764,0.9910783171653748,0.991248607635498,0.0,accept,unanimous_agreement
414084316,12480,"you can select a much shorter name for the argument, for example ""_std""",0,0,0,0.982530415058136,0.9930514097213744,0.9937652349472046,0.0,accept,unanimous_agreement
414084527,12480,qbittorrent -> ${project_name},0,0,0,0.9867435693740844,0.985556662082672,0.9906076192855836,0.0,accept,unanimous_agreement
414084703,12480,project_name,0,0,0,0.984757661819458,0.9810097813606262,0.990794837474823,0.0,accept,unanimous_agreement
414214020,12480,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
414214086,12480,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
414214127,12480,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
414214275,12480,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
414214332,12480,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
414227647,12480,"the very last comment: a function is inside a file named ""macro"".",0,0,0,0.9870100021362304,0.9899712800979614,0.9947133660316468,0.0,accept,unanimous_agreement
414228715,12480,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
414232839,12480,"does it matter for the caller is it a function or a macro? if no, maybe just include(qbtcxxcompilerandmodecheck)?",0,0,0,0.9867885112762452,0.9947065711021424,0.9940205216407776,0.0,accept,unanimous_agreement
414460185,12480,"i would prefer it like this, since other files use the same convention, e. g. `functionreadversion.cmake`, `macroconfiguremsvcruntime.cmake`, etc.",0,0,0,0.9662050604820251,0.9933868050575256,0.98592609167099,0.0,accept,unanimous_agreement
414489129,12480,what's the point to have one function/macro per file?,0,0,0,0.9828580617904664,0.9874731302261353,0.8175936937332153,0.0,accept,unanimous_agreement
414500634,12480,cleaner separation? i don't know. it was already done this way.,0,0,0,0.9446048736572266,0.8212029933929443,0.963688313961029,0.0,accept,unanimous_agreement
414505492,12480,"well, it's separate task to cleanup it.",0,0,0,0.9825703501701356,0.9911304712295532,0.9876054525375366,0.0,accept,unanimous_agreement
414545239,12480,and here.,0,0,0,0.9781572222709656,0.9818605184555054,0.9887459874153136,0.0,accept,unanimous_agreement
414545678,12480,is parent_scope required here? the cmake_cxx_standard_required variable is global already.,0,0,0,0.9892789721488952,0.994902729988098,0.9945026636123656,0.0,accept,unanimous_agreement
414786961,12480,"through experimentation, i found it to be required.",0,0,0,0.964584231376648,0.9807586073875428,0.991853415966034,0.0,accept,unanimous_agreement
414787118,12480,same as [a link],0,0,0,0.9866743683815002,0.9871845841407776,0.9953129291534424,0.0,accept,unanimous_agreement
414816695,12480,"ah, good to know. apparently, those variables are not declared by default.",1,1,1,0.9202451705932616,0.8515217304229736,0.9561938047409058,1.0,accept,unanimous_agreement
414988377,12480,why is argument passed as string?,0,0,0,0.9632506370544434,0.9833800196647644,0.9930342435836792,0.0,accept,unanimous_agreement
415173420,12480,"well everything is a string in cmake anyway. but, it is better to unquote it i guess, since elsewhere i also use `98` without quotes. fixed.",0,0,0,0.977976143360138,0.9848278760910034,0.9730294942855836,0.0,accept,unanimous_agreement
416589173,12480,really i don't like this function. i would put all the necessary code directly in cmakelists.txt.,-1,-1,-1,0.984740436077118,0.9856581091880798,0.9924595952033995,-1.0,accept,unanimous_agreement
416590762,12480,what happens if you set cmake_cxx_standard to 14 without this check but compiler doesn't support it?,0,0,0,0.9658005833625792,0.9586331844329834,0.9855680465698242,0.0,accept,unanimous_agreement
416593883,12480,"the problem is that some compiler versions report that they ""support"" c++14, but it is not actually _full support_. so without this check, when using those compilers, the configure might complete successfully, but the build will fail later on.",0,0,0,0.9388588666915894,0.9830390214920044,0.8194600939750671,0.0,accept,unanimous_agreement
416599116,12480,"on another note, if we ever switch to c++17 we might not need full support c++17. for example, currently the c++17 full support check would probably fail for msvc2017, although we not use the extra features implemented in msvc2019. am i wrong? of course, this worry is a bit theoretical at this timepoint.",0,0,0,0.705089271068573,0.5624518394470215,0.6141735911369324,0.0,accept,unanimous_agreement
416622003,12480,"i would prefer to keep it sorted: `[autoconf, automake, cmake, colormake]`",0,0,0,0.98289293050766,0.9907402992248536,0.9901512861251832,0.0,accept,unanimous_agreement
416624836,12480,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
416637608,12480,that's the binary installer; the apt repo installs to `/usr/bin` as expected.,0,0,0,0.9892582297325134,0.9924132227897644,0.9952858090400696,0.0,accept,unanimous_agreement
416648064,12480,"in travis it prints out ""-- building in c++ mode.""",0,0,0,0.97998309135437,0.988563060760498,0.992706835269928,0.0,accept,unanimous_agreement
416655393,12480,fixed. i moved the informational message to top level because it seemed like the easiest and most obvious way to get it to print correctly regardless of whether or not the user passes the `-dcmake_cxx_standard` option in the command line.,0,0,0,0.9759970903396606,0.9834957718849182,0.9868599772453308,0.0,accept,unanimous_agreement
416664979,12480,"_currently_. i don't think we should constrain ourselves because of outdated/broken toolchains. if we switch to c++17 but continue to support toolchains without full support for it, people making future contributions after that would have to be constantly walking on eggshells to make sure they don't use anything that happens to be unsupported by those toolchains, which sounds like a huge pain. it won't be too harsh to require >=msvc2019 to build by the time we switch to c++17 imo, since that is still kind of in the distant future. by that time, qt6 will also be released, and that is also set to require full c++17 support minimum afaik. so people will have time and reasons to update their stuff (i am assuming, of course, that we will eventually want to transition to qt6).",-1,-1,-1,0.9602357745170592,0.8715773820877075,0.8289652466773987,-1.0,accept,unanimous_agreement
416678744,12480,"this type of code seems like the ideal candidate to be factored out to a function. it only does one thing, which is useful, but that most people don't care about the details (so the full code should not clutter the main script): it ensures qbittorrent will be built with the minimum required c++ version. i decided to change the name to `qbt_minimum_cxx_mode_check` to simplify it/make it more obvious, though.",0,0,0,0.9302075505256652,0.9500022530555724,0.8938653469085693,0.0,accept,unanimous_agreement
395194443,12205,get yourself the latest version here: [a link] (static binary),0,0,0,0.9852347373962402,0.98460590839386,0.9939634203910828,0.0,accept,unanimous_agreement
395195302,12205,"~~todo shouldn't appear in man pages, unless this is only temporary.~~ never mind.",1,-1,0,0.5311782360076904,0.5678567290306091,0.7711638808250427,,review,no_majority_disagreement
395196033,12205,i would appreciate if you also update the author and date too.,0,0,0,0.6229590177536011,0.8707638382911682,0.9636396169662476,0.0,accept,unanimous_agreement
395197190,12205,those software doesn't belong to this project. imo no point mentioning them in our man page and man page isn't a wiki...,-1,-1,-1,0.8992310166358948,0.7916810512542725,0.872974157333374,-1.0,accept,unanimous_agreement
395197673,12205,make it another pr please...,0,0,0,0.8954957127571106,0.7142207622528076,0.970066785812378,0.0,accept,unanimous_agreement
395207225,12205,i know. the point of the todos is to remind of what has to be done and for you and others to suggest what to do.,0,0,0,0.968080461025238,0.9652279615402222,0.9831117987632751,0.0,accept,unanimous_agreement
395210448,12205,"yeah but isn't the point of this section to mention related software that's potentially useful, even though it might not belong to the same project? it serves helps discoverability of related programs.",0,0,0,0.972634494304657,0.980465829372406,0.986657440662384,0.0,accept,unanimous_agreement
395216322,12205,"probably just me, i don't feel like promoting other programs and be held liable when they go wrong...",-1,-1,-1,0.972586154937744,0.880794107913971,0.9623036980628968,-1.0,accept,unanimous_agreement
395217729,12205,"i think `-h`, `-v` are already implied in the above `options`, maybe we don't need this?",0,0,0,0.9864245653152466,0.994086503982544,0.987443506717682,0.0,accept,unanimous_agreement
395218637,12205,probably worth mentioning that stdout and stderr will be attached to the console if starting from a console.,0,0,0,0.9829709529876708,0.9911285638809204,0.9876407980918884,0.0,accept,unanimous_agreement
395219907,12205,"no, it's a separate form: if you specify `-h` or `-v`, nothing else is allowed.",0,0,0,0.984321355819702,0.9879083037376404,0.9912596344947816,0.0,accept,unanimous_agreement
395220783,12205,"i'll update the date, but we should propbably remove the author altogether according to the recommendation in [a link]",0,0,0,0.985675811767578,0.989852488040924,0.9945927262306212,0.0,accept,unanimous_agreement
395223652,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
395223985,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
395227986,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
395264381,12205,iirc double dash would not render correctly in man page if not surrounded by code blocks.,0,0,0,0.9809061288833618,0.8306947946548462,0.9816818833351136,0.0,accept,unanimous_agreement
395321247,12205,bugs.qbittorrent.org doesn't serve https,0,0,0,0.6596494913101196,0.8635743260383606,0.9778640866279602,0.0,accept,unanimous_agreement
395381621,12205,"i can change that to [a link] if there are no objections or revert ,",0,0,0,0.9849929809570312,0.9844418168067932,0.9940392971038818,0.0,accept,unanimous_agreement
395381923,12205,"i suggested these ones because they are useful in general and very mature. but if you really, insist, i don't mind not including this.",0,0,1,0.6538209319114685,0.7465649843215942,0.7908872365951538,0.0,accept,majority_agreement
395382307,12205,the author is currently removed. let me know your opinion about this.,0,0,0,0.9788439869880676,0.9568569660186768,0.9851919412612916,0.0,accept,unanimous_agreement
395432399,12205,i believe would like to keep the old one.,0,0,0,0.8805574774742126,0.9479805827140808,0.976597011089325,0.0,accept,unanimous_agreement
395432509,12205,i'm ok with it.,0,0,0,0.9517855048179626,0.6832506060600281,0.7280279994010925,0.0,accept,unanimous_agreement
395450727,12205,bugs.qbittorrent.org is also referenced a lot across documentation so it wouldn't make sense to change it,0,0,0,0.8165743350982666,0.9122714400291444,0.9877111315727234,0.0,accept,unanimous_agreement
395533948,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
395534342,12205,"reverted url back to http. it's better to fix the underlying issue anyway. when the url is changed to https, we can change it here as well.",0,0,0,0.987096905708313,0.990141212940216,0.9941879510879515,0.0,accept,unanimous_agreement
395835958,12205,/geodb/dbip-country-lite.mmdb,0,0,0,0.981931447982788,0.9896933436393738,0.9829630851745604,0.0,accept,unanimous_agreement
395836012,12205,/geodb/dbip-country-lite.mmdb,0,0,0,0.981931447982788,0.9896933436393738,0.9829630851745604,0.0,accept,unanimous_agreement
395877200,12205,"you only need to review the `.md` file, this one is auto-generated from the `.md` file.",0,0,0,0.9891996383666992,0.9914894104003906,0.9954892992973328,0.0,accept,unanimous_agreement
395878001,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
396056984,12205,"note on coding style, i would prefer concatenate the stream together as much as possible: [code block]",0,0,0,0.9853450655937196,0.9880580902099608,0.9921900629997252,0.0,accept,unanimous_agreement
396057216,12205,"maybe change ""qbittorrent provides a familiar gui similar to utorrent's"" to ""qbittorrent provides a familiar gui comparable to utorrent's""? we don't actually try to be similar.",0,0,0,0.9778534770011902,0.9794551134109496,0.9743383526802064,0.0,accept,unanimous_agreement
396057265,12205,"kademelia -> kademelia ? ""kademelia dht (mainline)"" what does ""mainline"" means? maybe just omit it to avoid raising more questions?",0,0,0,0.9813773036003112,0.9938730001449584,0.991401731967926,0.0,accept,unanimous_agreement
396057524,12205,"i don't really launch qbt with arguments, i'll leave reviewing this part to others..",-1,0,0,0.5850171446800232,0.9074825644493104,0.9326961040496826,0.0,accept,majority_agreement
396057683,12205,"""hack"" seems to be scary and its way is informal, maybe rephrase it?",-1,-1,-1,0.9678127765655518,0.9831664562225342,0.7781654596328735,-1.0,accept,unanimous_agreement
396057822,12205,ughh.. why give out promise when there is no eta?,-1,-1,0,0.9465667605400084,0.8670424818992615,0.6295153498649597,-1.0,accept,majority_agreement
396057919,12205,"i see empty folders in it, not sure if that is true..",-1,-1,0,0.7058282494544983,0.7173827886581421,0.8551914691925049,-1.0,accept,majority_agreement
396058039,12205,"maybe omit mentioning the exact file, users knowing the folder existence is enough imo.",0,0,0,0.9848721027374268,0.9855153560638428,0.9704543948173524,0.0,accept,unanimous_agreement
396058349,12205,"lets add a note about that info hash is for ""ubuntu-18.04.4-live-server-amd64.iso""",0,0,0,0.9884517192840576,0.9913201928138732,0.9957523345947266,0.0,accept,unanimous_agreement
396058351,12205,here too.,0,0,0,0.9753128290176392,0.989098072052002,0.969845414161682,0.0,accept,unanimous_agreement
396058398,12205,i wouldn't meantion it at all.,0,0,0,0.7360669374465942,0.8330214619636536,0.7379469871520996,0.0,accept,unanimous_agreement
396058535,12205,you really need to rephrase it in a end user friendly manner (without digging into internals).,0,0,0,0.9801363945007324,0.9797240495681764,0.9771816730499268,0.0,accept,unanimous_agreement
396089772,12205,"fixed. changed `qbittorrent provides a familiar gui similar to utorrent's, and is fast, stable and light.` to `qbittorrent provides a familiar, easy-to-use gui, and is fast, stable and light.`",0,0,0,0.9455196857452391,0.9890996813774108,0.9197227358818054,0.0,accept,unanimous_agreement
396089813,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
396090825,12205,"see [a link] i think it is important to at least specify that ""mainline dht"" is the specific dht that we use. that it is kademelia-based is an implementation, which i supposed can be left out. i changed it to `dht (mainline)`.",0,0,0,0.9854527115821838,0.9913069605827332,0.9921276569366456,0.0,accept,unanimous_agreement
396091349,12205,"isn't the `""if you have to ask, you don't need this.""` disclaimer at the end sufficient? i think the usage of ""hack"" here is appropriate in this case. this is the same description that has been used in the `-h` output so far. also the official `git` documentation, for example, uses it extensively, so this is not really breaking precedent.",0,0,0,0.9660310745239258,0.9886089563369752,0.9717839360237122,0.0,accept,unanimous_agreement
396091979,12205,"yeah, probably best to just update the man page when it is fixed. fixed.",0,0,0,0.973257303237915,0.9823777675628662,0.9761263132095336,0.0,accept,unanimous_agreement
396092007,12205,"alright, fixed.",0,0,0,0.9674367308616638,0.9633927941322328,0.9881590008735656,0.0,accept,unanimous_agreement
396092416,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
396092436,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
396093701,12205,"imo, even name of this option is bad. really it stores file paths in relative form. the fact that qbittorrent uses .fastresume files to save some torrent settings is a temporary phenomenon even though it has been around for a very long time. we can change this at any time, but this will not affect the meaning of this option.",-1,-1,-1,0.9759472012519836,0.9391484260559082,0.984790861606598,-1.0,accept,unanimous_agreement
396106194,12205,so should i change the name of this option in this pr? imo it should be done in another one.,0,0,0,0.9784091711044312,0.9910737872123718,0.9876963496208192,0.0,accept,unanimous_agreement
396106923,12205,i think it should be done in separated pr. but the following should be here:,0,0,0,0.975567102432251,0.991061508655548,0.989432454109192,0.0,accept,unanimous_agreement
396108058,12205,i'd appreciate if you know anything about this and could confirm it.,0,0,1,0.6694025993347168,0.5928561687469482,0.5350081324577332,0.0,accept,majority_agreement
396108419,12205,"exact files are only mentioned if they are very significant on their own, otherwise just the directory is mentioned. for example, files inside the `nova3` directory are not listed. i think all of the files that are explicitly documented right now are relevant/interesting enough to justify that. but let me know if you have a different opinion.",0,0,0,0.974898636341095,0.9547261595726012,0.9765151739120485,0.0,accept,unanimous_agreement
396108756,12205,i don't.,0,0,-1,0.5475763082504272,0.6952977776527405,0.6271468997001648,0.0,accept,majority_agreement
396108933,12205,it is incorrect. it just changes profile directory path.,0,0,0,0.7137359976768494,0.6143049597740173,0.9911439418792723,0.0,accept,unanimous_agreement
396110255,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
396110533,12205,"the database name is not guaranteed to be stable (we will change it when the need arise) and as a user, i care less about the actual db name.",0,0,0,0.5697687864303589,0.9416092038154602,0.6573714017868042,0.0,accept,unanimous_agreement
396110719,12205,"then how exactly is ""portable mode"" enabled? maybe i should change that sentence to read `this functionally enables what is known as ""portable mode"".`? when i invoked qbittorrent with this option, it created a standalone config/data file directory. when i started it again with the same path as argument, it used those settings it created before. isn't that what ""portable mode"" is? you could send the folder to a friend and they would have the exact same config as you.",0,0,0,0.984904408454895,0.9880423545837402,0.9897733330726624,0.0,accept,unanimous_agreement
396137232,12205,"i applied the suggested change, with the caveat that i added an extra indentation level to `<< wraptext(...`s that are the description of the option name above them. this way it is easy to see where the lines corresponding to one option start and and end. let me know if this is undesirable in your opinion. in addition: - all lines have now length < 100 - there is an empty line separating logical groups of options (as before) - the first `<< '\n'` is always in the same line as other text. if there is a second consecutive one, it is in the next line (same as before, with the exception of the very last `<<\n;` which is on a line of its own to better follow your suggestion).",0,0,0,0.9586692452430724,0.9844433069229126,0.9652580618858336,0.0,accept,unanimous_agreement
396137965,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
399316302,12205,"lets also clean this up: `""\n""` -> `'\n'`",0,0,0,0.9856410026550292,0.989569365978241,0.99385404586792,0.0,accept,unanimous_agreement
399316591,12205,thanks! looks good to me.,1,1,1,0.9871699810028076,0.9917022585868835,0.9942384958267212,1.0,accept,unanimous_agreement
402518168,12205,"how about existing torrents? what does ""portable mode"" mean exactly? imo, it should allow you to take some folder containing the application binary and all its configuration files, transfer it to another computer, and run it without any additional effort. it doesn't seem to apply to qbittorrent. i never understood how qbittorrent could be really portable. even currently i would remove such ""feature"".",0,0,0,0.9599605798721312,0.8935694098472595,0.9460036754608154,0.0,accept,unanimous_agreement
402677331,12205,"good point. i'll change the text to mention this and it's implications. imo, it should allow you to take some folder containing the application binary and all its configuration files, transfer it to another computer, and run it without any additional effort. it doesn't seem to apply to qbittorrent. it's mostly a windows think. as far as i know, in windows land, a ""portable application""/""portable mode"" is almost a synonym of ""static build"", but it provides some additional guarantees. not only can it run from a standalone directory without depending on external libraries, it also stores its settings within the standalone directory. it does not store config files in %appdata% or use/set registry keys. thus, the application directory can be shared freely between systems, and it will work with exactly the same options. from what i can observe, using `--profile` makes qbittorrent fit this description, at least on windows. the official build is already static, and the `--profile` flag can be used to keep all the configuration/data files in any directory, including the same one as the binary. we could even provide an official ""portable"" release for windows - just a zipped folder with the files you'd usually find in an installation folder (`.exe`, `.pdb`, ...), plus a `qbittorrent.bat` folder that just does `qbittorrent.exe --profile=.\`. but it can also be useful for other platforms. for example, imagine you are trying to debug some issue and the user is using portable mode; they send you their ""profile"" folder, you run qbittorrent with `--profile` and the path to the user's profile and boom, you have a similar setup to that of the user just like that. or you could even just ask the user for the .conf, construct a profile folder manually, with that, and execute qbittorrent with `--profile`. so i think this it is indeed accurate to say ""this functionally enables what is known as ""portable mode"". but let me know if i misunderstood your point or some other detail.",1,1,1,0.8733317255973816,0.9543294906616212,0.9160678386688232,1.0,accept,unanimous_agreement
403306937,12205,i just confirmed the option precedence works as described.,0,0,0,0.989062249660492,0.9605913758277892,0.9873477220535278,0.0,accept,unanimous_agreement
403382294,12205,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
403446314,12205,"it is incorrect statement. most of dynamically linked windows applications come with their own library binaries (except the windows libraries and maybe vc runtime) so it is not so hard to turn it to so-called ""portable mode"". but it's off-topic here. it's almost the same as i said before. the main thing is when user has ""portable"" app it should be able to `run it without any additional effort` (as i said above). no. this option is the one that can help to provide ""portable mode"" but it isn't enough. the another one is ""--relative-fastresume"" that allows to transfer existing torrents with the app. but unfortunately it isn't enough too since it can't cover all the cases so user is still responsible for some additional cares. it is true. the ""--profile"" option itself is good for some purposes. but it only does what it does (it just ""allows you to specify custom profile path""). i don't want you to identify it with anything more. really you don't need to have any .bat. if you create ""profile"" folder near the application executable qbittorrent will detect it and enables ""relative fastresume"" for you. just call a spade a spade and don't give users too much hope. otherwise, we will have to be responsible for it. i don't want to maintain ""portable mode"". if someone want to do it you can ignore my comments and follow ""portable mode maintainer"" thoughts. , what do you say?",0,0,0,0.8905242085456848,0.8553197383880615,0.733431875705719,0.0,accept,unanimous_agreement
403447579,12205,"the another one is ""--relative-fastresume"" that allows to transfer existing torrents with the app. but unfortunately it isn't enough too since it can't cover all the cases so user is still responsible for some additional cares. `--profile` already implies `--relative-fastresume`. what are the ""additional cases"" that you refer to? you mean a folder literally named `profile`? i did not know of this. if someone want to do it you can ignore my comments and follow ""portable mode maintainer"" thoughts. i understand not wanting to maintain it, and i'm not pushing for it. i'm just trying to document the existing behavior/features as best as i can. in light of your comments, it is clear i need to reword the text to not mention ""portable"" mode explicitly, i just need to know more details about what i'm asking here.",-1,-1,0,0.8452070951461792,0.689993679523468,0.7249330878257751,-1.0,accept,majority_agreement
403448080,12205,what makes you think that?,0,0,0,0.9474008083343506,0.9424290657043456,0.9790006279945374,0.0,accept,unanimous_agreement
403451441,12205,[a link] and [a link],0,0,0,0.986448049545288,0.9889782071113586,0.9889005422592164,0.0,accept,unanimous_agreement
403453186,12205,you misunderstood it...,-1,-1,-1,0.9243623614311218,0.8506154417991638,0.885873019695282,-1.0,accept,unanimous_agreement
403463618,12205,how so? can you please clarify then? this is starting to get really confusing.,-1,-1,-1,0.9739648103713988,0.924574613571167,0.900736927986145,-1.0,accept,unanimous_agreement
403494564,12205,your example relates to the following:,0,0,0,0.9821898937225342,0.9880272150039672,0.9935356378555298,0.0,accept,unanimous_agreement
403495403,12205,"so let's get this straight: - specifying `--profile=some/path` with a name of some folder does not imply `--relative-fastresume`, so the `bt_backup` folder will not be portable between computers - specifying `--profile=some/path` and `--relative-fastresume` will make the bt_backup folder portable between computers - creating a folder named `profile` next to the application executable is effectively the same as using both `--profile=profile` and `--relative-fastresume` - in all three cases all other data/config files/folders are portable between computers. is this correct?",0,0,0,0.978939414024353,0.9944288730621338,0.9925999641418456,0.0,accept,unanimous_agreement
403495543,12205,additionally: an instance started as above will be able to work alongside another instance with a different `--profile` or `--configuration` so long as they don't listen on the same ports and things like that. yes?,0,0,0,0.98765367269516,0.9920117259025574,0.9931782484054564,0.0,accept,unanimous_agreement
403703988,12205,"yes. yes. but it will not work in case of path that cannot be represented in relative form (e.g. unc or path in different disk on windows). yes. and it won't work if you set another profile path via command line. afaik, other data isn't affected at all. so there can be conflicts if you run it on different computer. seems yes. at least it should...",0,0,0,0.9710410237312316,0.9552632570266724,0.8916202187538147,0.0,accept,unanimous_agreement
406261835,12205,"i have changed the documentation according to our discussion. is it accurate now? also some more questions: what is ""path"" referring to here? the one passed to the `--profile` option or the paths in the `.fastresume`s themselves? and it won't work if you set another profile path via command line. what exactly won't work? is qbittorrent not going to launch at all, or will it launch but not use the `profile` folder next to it as the profile? --- can `--relative-fastresume` be passed in without `--profile`? if so, what will the paths be relative to? the current working dir? if some torrents are initially saved with absolute paths, but then i change all config options to use relative paths and run qbittorrent with `--relative-fastresume`, will all the existing fastresumes be updated to use relative paths?",0,0,0,0.9770284295082092,0.9880337119102478,0.9890981912612916,0.0,accept,unanimous_agreement
407167092,12205,"in `.fastresume`. i can't imagine how it will react to such a path in the `--profile` option... if profile path is explicitly set via command line it wiil not perform ""profile"" folder autodetection. i don't know. try to find out for yourself from the code, if you want... i'm sorry, i don't know the answers to all these questions. i am annoyed by this topic. i always thought all these ""portable mode"", ""relative fastresume"" and so on were unacceptable and i was against it, so i don't want to be responsible for it. i am sure that it is implemented extremely superficially and unreliably, and in many cases it has undefined behavior. please don't rape me any more with this topic.",-1,-1,-1,0.990202009677887,0.9931502938270568,0.9914856553077698,-1.0,accept,unanimous_agreement
407178577,12205,"i'm sorry about the question spam, i just want to make sure i get everything right, to have a quality man page. i think i have enough information now, the rest i can figure out on my own if needed. i agree that this kind of stuff is implemented in a weird and finicky way - there seem to be a lot of edge cases and it is hard to explain them all. on top of this, the gain for having these features is dubious and it is not clear what kind of use case really needs this. qbittorrent's installer does not do any magic behind the scenes or pollute the registry or whatever - it just uses a bunch of config files in standard and predictable locations. `--configuration` is enough by itself imo. but until we all decide to remove `--profile` and friends, i think they should be documented as accurately as possible.",-1,-1,-1,0.9861082434654236,0.9920599460601808,0.9898292422294616,-1.0,accept,unanimous_agreement
407191655,12205,"only ""friends"". `--profile` isn't bad for itself. it can be used in testing purposes. i think no. at least on windows different kind of configuration/data files are placed inside different folders (i mean there are at least two qbittorrent folders in different places). so `--profile` allows you to keep them together. btw, it seems `--configuration` works incorrectly with default profile (on windows). for me `--configuration=test` creates ""cache_test"" inside ""qbittorrent"" instead of ""qbittorrent_test/cache"" as i expect.",0,0,0,0.7526898384094238,0.8974633812904358,0.9836120009422302,0.0,accept,unanimous_agreement
407203717,12205,"fair enough. if you mean ""different folders"" in the same way that on linux the config file and the logs are in different folders, i don't think that's a problem in and of itself. despite being different directories, they are _expected_; one would not expect the logs to be in `~/config`, after all. but like you said above, it's useful to keep everything together for testing purposes. does this _only_ happen with the `cache` folder? either way, i think it's ok to document the intended behavior, any deviation from it is another issue/pr.",0,1,0,0.9062764644622804,0.7599135637283325,0.5291397571563721,0.0,accept,majority_agreement
407273595,12205,"i figured out the answers to the 2 outstanding questions above: yes it can, and the path will be relative to the path specified by `$home` (usually the home directory). no. torrents previously added with absolute paths keep the absolute paths in the `.fastresume`s.",0,0,0,0.9748148322105408,0.9884827733039856,0.9864076375961304,0.0,accept,unanimous_agreement
407280560,12205,"i think i addressed everything about the `--configuration`, `--profile`, and `--relative-fastresume` options now. please confirm. if everything looks good, i can continue the copy-paste to the nox manpage and make the final adjustments to it. then i'll finally submit the pr for final review.",0,0,0,0.909375786781311,0.8287650346755981,0.6507693529129028,0.0,accept,unanimous_agreement
414907076,12205,"i know you don't like reviewing text walls, but it would be great if you could please address my comment above. it's just a small portion of the overall pr.",1,1,1,0.5351497530937195,0.9251227378845216,0.8591945171356201,1.0,accept,unanimous_agreement
414983642,12205,shouldn't it be `--profile`?,0,0,0,0.9858599305152892,0.9935590624809264,0.9929347634315492,0.0,accept,unanimous_agreement
414983950,12205,"""to instead create ..."" sounds wrong for me. although my english is bad...",-1,-1,-1,0.9894880056381226,0.989028811454773,0.9936667084693908,-1.0,accept,unanimous_agreement
414984549,12205,i'm not sure you're right here.,-1,-1,0,0.8672868013381958,0.7973204255104065,0.6206257343292236,-1.0,accept,majority_agreement
414985035,12205,"""directory"" - typo",0,0,0,0.9864215850830078,0.95786851644516,0.9734304547309875,0.0,accept,unanimous_agreement
415026878,12205,"google gives plenty of results for ""to instead create"" so i think it's legit.",0,0,0,0.9741920232772828,0.9607864022254944,0.9626083374023438,0.0,accept,unanimous_agreement
415034923,12205,i think it can confuse some users a bit. how about =,0,-1,0,0.9538214802742004,0.6572863459587097,0.947871744632721,0.0,accept,majority_agreement
415175275,12205,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
415175456,12205,"thanks for the suggestions, i went with `options will instruct qbittorrent to create/use configuration files in different locations, instead of the default ones.` in the end.",0,1,1,0.5138806700706482,0.884680449962616,0.9341111779212952,1.0,accept,majority_agreement
415175604,12205,"fixed. ps - you can review the markdown document, it's more readable. the manpage itself is autogenerated with pandoc.",0,0,0,0.9676114916801452,0.9743081331253052,0.9761856198310852,0.0,accept,unanimous_agreement
415176301,12205,"i'm quite certain of this. i tested with `$ qbittorrent --profile=qbt_profile_test --configuration=qbt_config_test`. the result was a full configuration under `~/qbt_profile_test`, as predicted (remember that if a relative path is specified in `--profile`, it will be relative to the user's home directory).",0,0,0,0.950891375541687,0.9609258770942688,0.9763131737709044,0.0,accept,unanimous_agreement
415350100,12205,"i'm quite certain of the opposite, after i tested it. i tested with `qbittorrent --profile=testprofile --configuration=test`. it creates `testprofile/qbittorrent_test` (i.e. it applies both `--profile` and `--configuration` parameters). my result also contradicts this. it is relative to the application's working directory (as the relative path usually behaves).",0,0,0,0.9547194242477416,0.9808164238929749,0.957915425300598,0.0,accept,unanimous_agreement
415355794,12205,"you're right, did not realize they were nested like that... yep, seems i was totally wrong about this. edit: the documentation for this was correct already. i was confusing with the case where `--relative-fastresume` is used without `--profile`.",-1,-1,0,0.6526330709457397,0.9816160202026368,0.4663713276386261,-1.0,accept,majority_agreement
415358629,12205,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
429049444,12205,"now it looks more like the truth (as far as i can tell about it). the only thing i don't like is that you put ""running multiple instances"" as the main purpose of both `--configuration` and `--profile` options (at least it looks like this due to first place in option description).",0,0,0,0.926715850830078,0.9733466506004332,0.8575342297554016,0.0,accept,unanimous_agreement
429197127,12205,"thanks for reviewing, looks like we're getting closer. well, what would you say is the main purpose of each option? just supporting different configs for different scenarios? if so, i could change it to something along the lines of: ""these options enable saving and using different conigurations. additionally, they can be leveraged to run multiple different instances of qbittorrent at the same time. however, in this case, one must take care to adjust settings that are inherently incompatible across multiple simultaneous instances if set to the same value, such as the listening port."". is this what you're looking for?",1,1,1,0.6711864471435547,0.849152684211731,0.9713483452796936,1.0,accept,unanimous_agreement
429890555,12205,"apparently, yes. but i can't confirm that you describe it in a better way. my english is too bad for that, and you are too verbose and informal for me to understand exactly everything... you can just prepend your current description with something like this one (i mean to say about ""supporting different configs for different scenarios"").",-1,-1,-1,0.9639752507209778,0.9651218056678772,0.6757513880729675,-1.0,accept,unanimous_agreement
433555823,12205,"i've pushed the change, i think it conveys the intended idea/usage case better now. about formality, was that comment directed at my example/sketch in the comment, or at the state of the pr in general? i'm trying to be as objective as possible with a reasonable level of formality for a man page. if you think the current text/tone is too informal/not objective enough (or too formal), can you please point to a specific instance (or several) and explain how you would fix it, and your reasoning for such changes?",0,0,1,0.8581385612487793,0.9520387053489684,0.5468482375144958,0.0,accept,majority_agreement
436243856,12205,"sorry, i have nothing to add. i just wanted to say that it is easier for me to understand strictly formalized wordings because of my poor english.",-1,-1,-1,0.987624168395996,0.9933192729949952,0.9897671341896056,-1.0,accept,unanimous_agreement
810476164,16485,this debug info is for testing purposes only. i will delete them before merging.,0,0,0,0.9861835241317748,0.9888849258422852,0.992919623851776,0.0,accept,unanimous_agreement
810482643,16485,"then the word ""process"" can also be omitted, imo.",0,0,0,0.9866587519645692,0.992053747177124,0.9895716905593872,0.0,accept,unanimous_agreement
810580757,16485,i have intention to make it available on linux so i would suggest using [a link] and please make adjustments for the option to be platform agnostic.,0,0,0,0.9759538173675536,0.96353679895401,0.9934142827987672,0.0,accept,unanimous_agreement
810581463,16485,`const int size`,0,0,0,0.9857776761054992,0.9867832660675048,0.9934925436973572,0.0,accept,unanimous_agreement
810581608,16485,those should be `int64_t`.,0,0,0,0.9881705045700072,0.9912915825843812,0.9941518902778624,0.0,accept,unanimous_agreement
810581885,16485,`error code: %1`,0,0,0,0.9805168509483336,0.989120364189148,0.9847297072410583,0.0,accept,unanimous_agreement
810582126,16485,"`failed to apply memory working set limit. reason: \""%1\""`",-1,0,0,0.9408318996429444,0.9883423447608948,0.9833959341049194,0.0,accept,majority_agreement
810582313,16485,memory working set limit is applied. value: %1 (%2 mb),0,0,0,0.9830804467201232,0.9909084439277648,0.9951927661895752,0.0,accept,unanimous_agreement
810582558,16485,"since you used `quota_limits_hardws_max_enable` the minimum size shouldn't matter, can't you just put some dummy value?",0,0,0,0.9877451062202454,0.9942208528518676,0.992966890335083,0.0,accept,unanimous_agreement
810582758,16485,ditto.,0,0,0,0.859873354434967,0.6705162525177002,0.9384599328041076,0.0,accept,unanimous_agreement
810582820,16485,"`failed to apply memory working set limit. reason: \""%1\""`",-1,0,0,0.9408318996429444,0.9883423447608948,0.9833959341049194,0.0,accept,majority_agreement
810582985,16485,this should not overwrite the error code but append after the code.,0,0,0,0.9639908671379088,0.987769901752472,0.994249701499939,0.0,accept,unanimous_agreement
810600035,16485,"does it matter to the user? i just used it as a fallback in case i couldn't get the appropriate message. if you insist on showing the error code anyway, what format should resulting message have? (so that i don't have to redo it multiple times)",0,0,0,0.9627089500427246,0.9814202189445496,0.9758776426315308,0.0,accept,unanimous_agreement
810600735,16485,"what adjustments? allow to set it in settings ui on any platform? but currently it is implemented only for windows. if someone implements it on some other platform, they can easily adjust the conditionals to make it available.",0,0,0,0.9885205626487732,0.989610195159912,0.9938242435455322,0.0,accept,unanimous_agreement
810601022,16485,those are assigned by/to unsigned types.,0,0,0,0.9866886734962464,0.9920861124992372,0.9886170029640198,0.0,accept,unanimous_agreement
810601171,16485,`reason: error code: 1234.` are you sure?,0,0,0,0.9694087505340576,0.9896864295005798,0.9928125739097596,0.0,accept,unanimous_agreement
810601491,16485,"64mb is dummy value. but, iirc, min value shouldn't be greater than max so there is adjustment.",0,0,0,0.9879136681556702,0.9742839336395264,0.9895528554916382,0.0,accept,unanimous_agreement
810794870,16485,"ok. another thing, are you able to add the webapi (or even webui) parts? afaik windows can build with nox/nogui option too.",0,0,0,0.9854995012283324,0.9735265970230104,0.9937268495559692,0.0,accept,unanimous_agreement
810795371,16485,(i don't insist) i will only convert to unsigned type at the very last moment.,0,0,0,0.8342118859291077,0.9590949416160583,0.9774898886680604,0.0,accept,unanimous_agreement
810796078,16485,"no, i mean: `failed to set memory working set limit. error code: 1234. error message: ""function failure blah blah""`",-1,0,0,0.9606422781944276,0.9837853908538818,0.971696138381958,0.0,accept,majority_agreement
810796568,16485,i mean a real dummy value such as `0`. i'm guessing `setprocessworkingsetsizeex` will ignore it. (i don't insist),0,0,0,0.964823842048645,0.951952874660492,0.9882922768592834,0.0,accept,unanimous_agreement
810796873,16485,let's move the discussion over here: [a link],0,0,0,0.9836339354515076,0.9803479313850404,0.9944207072257996,0.0,accept,unanimous_agreement
810797970,16485,sometimes i think this will help the developers when reading logs sent from users. we can look up the error code on msdn and not rely on localized error messages.,0,0,0,0.9744689464569092,0.9793609976768494,0.9478671550750732,0.0,accept,unanimous_agreement
810798441,16485,"on a second thought, operation success messages can be omitted because application is working as intended.",0,0,0,0.9859848022460938,0.9875116348266602,0.9890121221542358,0.0,accept,unanimous_agreement
810801660,16485,i will do this as soon as the main part is finished and approved.,0,0,0,0.977360725402832,0.981285810470581,0.9894288182258606,0.0,accept,unanimous_agreement
810802872,16485,so you would first conver input data coming from winapi from unsigned and pass to this function and then convert result to unsigned again?,0,0,0,0.9885285496711732,0.9925835132598876,0.9946779012680054,0.0,accept,unanimous_agreement
810803709,16485,i also came up with the same idea.,0,0,0,0.9837307929992676,0.957493245601654,0.9321858286857604,0.0,accept,unanimous_agreement
810804121,16485,"i did so initially, but it ended in failure.",0,0,0,0.870529055595398,0.984330713748932,0.8305726051330566,0.0,accept,unanimous_agreement
811617430,16485,i would leave this out. don't want to give users the impression that this value must be a multiple of 64.,0,-1,0,0.8028051257133484,0.6751798391342163,0.9771971106529236,0.0,accept,majority_agreement
811620630,16485,this is `int` now.,0,0,0,0.9870725274086,0.9874354600906372,0.9935017228126526,0.0,accept,unanimous_agreement
811623227,16485,"`, m_storememoryworkingsetlimit(settings_key(""memoryworkingsetlimit""), )`",0,0,0,0.9858630299568176,0.9941662549972534,0.9897979497909546,0.0,accept,unanimous_agreement
811623998,16485,"i would really add quotes around the error message from system, to avoid it blending in to our log message.",0,0,0,0.9858484268188475,0.9848766326904296,0.9836068153381348,0.0,accept,unanimous_agreement
811624089,16485,and therefore this can be omitted.,0,0,0,0.9658454060554504,0.984253466129303,0.9928638339042664,0.0,accept,unanimous_agreement
811635628,16485,"imo, `reason: incorrect parameter. error code: 87.` looks better than `error code: 87. error message: ""incorrect parameter.""` like you suggested. `:` is enough to provide good structure of messages in this case imo. but you want to complicate it, although at the same time you object to the use of quotation marks (and other ways) to highlight some special words and phrases to emphasize that they are not used in the usual sense, but refer to certain terms, etc.",0,0,0,0.8851775527000427,0.9840314984321594,0.954988420009613,0.0,accept,unanimous_agreement
811637374,16485,`settingvalue` constructor has only one parameter.,0,0,0,0.985762357711792,0.9911476373672484,0.9940052628517152,0.0,accept,unanimous_agreement
811648937,16485,"error code: 87. error message: ""incorrect parameter."" like you suggested. what if the system (or other sources) error message have more than one sentences? the result log format will be messed up. having it in quotes will clearly show the bounds of the `reason: ""msg"".` part. right, those aren't ""special"" enough imo. you don't see pompous highlighting on msdn doc or wikipedia entry or everywhere else. * [a link] * [a link]",-1,-1,0,0.6560348272323608,0.587162971496582,0.6460453271865845,-1.0,accept,majority_agreement
811653565,16485,`m_storememoryworkingsetlimit.get( )` i would even remove `std::max()` and let the system call deal with invalid parameters.,0,0,0,0.98881334066391,0.9904482960700988,0.9934548735618592,0.0,accept,unanimous_agreement
811674342,16485,"therefore, i doubt about the unconditional unification of messages. in some cases (like this), the formation of less formalized (but more human like) messages looks better. for example:",0,0,0,0.8515574932098389,0.9054644107818604,0.9704186916351318,0.0,accept,unanimous_agreement
811738635,16485,"btw, it is not some kind of ""message from the depths of the system"". it is just a string explanation of the error. we just use some predefined one provided by the winapi function instead of custom description.",0,0,0,0.978426158428192,0.9814746379852296,0.9899659156799316,0.0,accept,unanimous_agreement
811739350,16485,other comments should be addressed now.,0,0,0,0.9823781847953796,0.989116370677948,0.9882800579071044,0.0,accept,unanimous_agreement
811774516,16485,"i really don't want to argue about this part of the changes. if you insist, i will give in. but i would also like to hear other opinions (unless of course their waiting will not be long).",0,-1,-1,0.5792989730834961,0.9357782006263732,0.61734539270401,-1.0,accept,majority_agreement
813540934,16485,"since no other references it, i would move this to `application::memoryworkingsetlimit()`.",0,0,0,0.9888719916343688,0.9939190149307252,0.9947063326835632,0.0,accept,unanimous_agreement
813543149,16485,i'll let you decide it yourself. but now i would like to mention another issue of it. not every languages uses the (western?) punctuation marks. some languages of asia have their own (different) punctuation. for example: `。` instead of `.` and i'm not sure how many variances are there in the world. so here your detection (and formatting) won't be reliable for those languages.,0,0,0,0.9017675518989564,0.7537285089492798,0.9552250504493712,0.0,accept,unanimous_agreement
814585565,16485,sorry i gave the wrong suggestion before. this should store bytes and preferably use `qint64`. the ui can still use `mib`. and webapi will use bytes.,-1,-1,-1,0.9878596663475036,0.9884905815124512,0.9897019863128662,-1.0,accept,unanimous_agreement
814589668,16485,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
814658734,16485,so it is consistent with other settings (from the viewpoint of webapi and user-editable settings file and libtorrent api). `int` is ok if users thinks 4gib limit is acceptable.,0,0,0,0.9882178902626038,0.994211971759796,0.9934452772140504,0.0,accept,unanimous_agreement
814684320,16485,"no big deal but... 1. we clearly do not need such precision and it is unlikely that we will ever need it. 2. having an inconsistency of units between the config file and the ui, we will definitely receive complaints from some ""smart guys"". how should we handle the cases if there is more precise value is stored in config than we can represent in ui? if we just discard some less significant part (or round it up) the value will be rewritten n config when applying preference changes in ui.",-1,0,-1,0.5176252722740173,0.886441707611084,0.7959139347076416,-1.0,accept,majority_agreement
815270036,16485,it is all about being consistent... there was similar problems in the past and iirc this was the least problematic way. i don't remember there was such complaint. i would just round them. users will just have to live with it. :face_with_tongue:,-1,0,1,0.6694316267967224,0.7420035004615784,0.7943956255912781,,review,no_majority_disagreement
815295281,16485,i would complain if i edited the config file manually.,-1,0,0,0.7009084820747375,0.640398383140564,0.8527035713195801,0.0,accept,majority_agreement
815345557,16485,"after some consideration, i would still keep using megabytes ( yes, yes, i belong to the ""old school"", so i mean mebibytes, if you are more used to it). using bytes will not bring any benefit, but only problems (i don't see any benefit in consistency if it is an end in itself). maybe you know something that is not obvious to me?",0,0,0,0.9192371368408204,0.9041874408721924,0.865363597869873,0.0,accept,unanimous_agreement
815389438,16485,is it needed for something?,0,0,0,0.9779719114303588,0.9857518076896667,0.9931423664093018,0.0,accept,unanimous_agreement
815426578,16485,not anymore. deleted it.,0,0,0,0.761457085609436,0.939250648021698,0.6681801080703735,0.0,accept,unanimous_agreement
815427136,16485,inlined in `application::memoryworkingsetlimit()`.,0,0,0,0.9875701069831848,0.993770182132721,0.9954721927642822,0.0,accept,unanimous_agreement
816481447,16485,"now i see it's impossible since it is still os dependent and we discussed earlier that the api should be unified. in case you forgot, let me remind you that in the case of such platform-dependent things, we have two main ways: 1. do not provide them through the api, 3. use some stubs in the api. we can still, of course, have some kind of modifier in the api version, but it looks too troublesome. also, we may not hide the interface for platform-dependent functions, but simply do an implementation that does nothing where it is not available. for example, in the case of this option, we could just allow it to be get/set, but mark it as unsupported on such and such platforms.",-1,0,0,0.5890630483627319,0.7950928211212158,0.7594395279884338,0.0,accept,majority_agreement
816484849,16485,this. imo you can just merge this pr and i'll add the linux and webapi parts.,0,0,0,0.9336522817611694,0.8344610333442688,0.9925762414932252,0.0,accept,unanimous_agreement
817372500,16485,"i have bad news. the relevant system api (`rlimit_rss`) on linux has no effect on modern systems (only affects 2.4.x kernel versions) and there are no replacements. i reckon linux has no need of such tuning knob... the same api still might benefit bsd, macos but i don't use them and the user base on them are relatively small... so for those users, maybe i'll just publish my changes in a new pr and close it immediately (since the effectiveness is dubious)?",-1,-1,-1,0.9896766543388368,0.9779078364372252,0.9876339435577391,-1.0,accept,unanimous_agreement
817376446,16485,i'm not sure i understand exactly its meaning...,-1,-1,-1,0.9610899090766908,0.867444634437561,0.6898304224014282,-1.0,accept,unanimous_agreement
817377805,16485,this is to leave a mark in the sea of closed pr so that users finding it would able to find something...,0,0,0,0.9769361615180968,0.983084499835968,0.9907146692276,0.0,accept,unanimous_agreement
817552819,16485,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
818299986,16485,#16576.,0,0,0,0.976244568824768,0.987457811832428,0.9929678440093994,0.0,accept,unanimous_agreement
244918090,10099,"a bit unrelated to this pr, how about move this to the `sources` above (and also `headers`).",0,0,0,0.9756792187690736,0.9816166162490844,0.9916955828666688,0.0,accept,unanimous_agreement
244918149,10099,"wrong position, 1 line down.",-1,-1,-1,0.910086750984192,0.5959653854370117,0.6848402619361877,-1.0,accept,unanimous_agreement
244918262,10099,"although i don't care much about cmake, it is still nice if the components can be sorted alphabetically.",0,0,0,0.6353577375411987,0.5584884881973267,0.8431715965270996,0.0,accept,unanimous_agreement
244918441,10099,here too.,0,0,0,0.9753128290176392,0.989098072052002,0.969845414161682,0.0,accept,unanimous_agreement
244918675,10099,"this can be sorted too, i know i'm a bit obsessed but it makes it much easier to read/find.",-1,-1,1,0.9735319018363952,0.7423994541168213,0.8093282580375671,-1.0,accept,majority_agreement
244918966,10099,`qbytearray metadata() const;`,0,0,0,0.984847128391266,0.9927491545677184,0.9931769371032716,0.0,accept,unanimous_agreement
244919735,10099,"`tr(""resumedatasavingmanager couldn't save data in '%1'. error: %2"")`",0,0,0,0.9838979840278624,0.9819023609161376,0.9873106479644777,0.0,accept,unanimous_agreement
245039962,10099,"sure. i don't know the initial reason for this. maybe it was here because ""upgrade"" was a temporary solution. but now it pretty much is a stable part.",0,0,0,0.9211889505386353,0.9104482531547546,0.923862636089325,0.0,accept,unanimous_agreement
245040125,10099,i prefer keeping this in logical order. in the order we use them in the db.,0,0,0,0.9325071573257446,0.986735701560974,0.9866934418678284,0.0,accept,unanimous_agreement
245065045,10099,"there are no database related utilities in this file. it's just database configuration for some particular application component (bittorrent). so it should be under ""base/bittorrent"".",0,0,0,0.9888623356819152,0.9954202771186828,0.9943313598632812,0.0,accept,unanimous_agreement
245251694,10099,"it's bad idea to use default connection (even connection with name having common meaning). since other components will use sqlite in the future, this approach can lead to conflicts (at least, it will complicate the development).",-1,-1,-1,0.968469738960266,0.9545164108276368,0.6202370524406433,-1.0,accept,unanimous_agreement
245255043,10099,"do you really want to have database in bt_backup folder? why? not only it has the inappropriate name (we kept it for compatibility purposes only), a separate folder is not needed at all now.",0,0,0,0.9454400539398192,0.9786518216133118,0.9370244145393372,0.0,accept,unanimous_agreement
245387903,10099,", : perhaps you should make a new class to manage sqlite read/write operations? sort of like `settingsstorage`?",0,0,0,0.977376103401184,0.9706272482872008,0.9914029240608216,0.0,accept,unanimous_agreement
245464837,10099,do you mean there is some order between col_* fields? well... i suppose this isn't much important.,0,0,0,0.9209124445915222,0.8750213384628296,0.982311487197876,0.0,accept,unanimous_agreement
245506777,10099,are you sure you really want it?,0,0,0,0.9787569642066956,0.9758970141410828,0.976659893989563,0.0,accept,unanimous_agreement
245507437,10099,we're not going to support libtorrent < 1.1 in v4.2.,0,0,0,0.8790058493614197,0.9876798391342164,0.9767923951148988,0.0,accept,unanimous_agreement
245507601,10099,"since this upgrade applies entirely to bittorrent component, i would not extract this code deliberately into a separate file. this breaks the logic of the code structure.",0,0,0,0.583625316619873,0.9760531783103944,0.9818065166473388,0.0,accept,unanimous_agreement
245507774,10099,it can be done easier: [code block],0,0,0,0.9847959280014038,0.9866481423377992,0.995640754699707,0.0,accept,unanimous_agreement
245508270,10099,"invalid logic! a user who has never used older qbittorrent versions should not care about the old saving system. we need to implement more advanced version control. for example, store the current version somewhere in the application data. then newer versions will be able to know more precisely what needs to be updated, and older versions will be able to warn the user about possible conflicts as a result of downgrade. in addition, it will avoid conflicts as a result of multiple upgrades/downgrades, when it is difficult to estimate based on some artifacts and we will know exactly which version was installed before (e.g. when both fastresumes and database exist).",-1,0,-1,0.9075443148612976,0.6700565814971924,0.9660736918449402,-1.0,accept,majority_agreement
245508582,10099,you have to handle errors. e.g: [code block],0,0,0,0.969804584980011,0.989844799041748,0.9850257039070128,0.0,accept,unanimous_agreement
245521601,10099,"i'll have to see fist, but i don't think the db code (due to the nature of sql statements) can be abstracted away in to a class. any abstraction will be done last, because we need to agree on a format of storing data in the db.",0,0,0,0.9832742810249328,0.9770433306694032,0.983597695827484,0.0,accept,unanimous_agreement
245521648,10099,a reason i did it is because we have the lock file there which kinda guarantees that we have permission to read/write in that folder. which in turn will make exporting the torrents back to the all system more manageable. i open to suggestions for a new location. also for a better name for the db/table.,0,0,0,0.9652570486068726,0.97111177444458,0.8605397939682007,0.0,accept,unanimous_agreement
245521694,10099,yes. it shrinks the file small when removing torrents. why should we use it?,0,0,0,0.960289478302002,0.9554597735404968,0.9922916293144226,0.0,accept,unanimous_agreement
245521731,10099,this is moved around code. i am going to remove it all in a fell swoop in new pr dropping all rc_1_0 code.,0,0,0,0.6647042036056519,0.9831331372261048,0.9869189858436584,0.0,accept,unanimous_agreement
245521800,10099,we need to do this check before trying to do any kind of upgrade. the upgrade code assumes that the db exists and is accessible and that the table exists in it. the upgrade code is called before the session is constructed.,0,0,0,0.9874562621116638,0.9932942390441896,0.9942519664764404,0.0,accept,unanimous_agreement
245521962,10099,i think you misunderstood it here. at the current moment this tries to updrade from the non-db way to the db-way. so if a db exists we don't try to migrate older files (.torrents+.fastresumes). it is assumed that the upgrade was done already and the user dropped new files at a later date. unless you suggest that we should always input into the db any kind of .torrent/.fastresume we find during startup.,0,0,0,0.9749714732170104,0.965104043483734,0.9170859456062316,0.0,accept,unanimous_agreement
245521998,10099,sure. truth is i was in a hurry to make everything work and forgot to come back to this later.,-1,0,0,0.5586453676223755,0.5809167623519897,0.7478721141815186,0.0,accept,majority_agreement
245522352,10099,"also in case you missed it: each row has a `version` column. during startup if the version number is different from the supported one then that row isn't loaded. new versions will upgrade smaller version, while refusing to load bigger version.",0,0,0,0.9854227304458618,0.9932767152786256,0.9920194745063782,0.0,accept,unanimous_agreement
245522458,10099,"i mean the logical order we use when issuing the `create table` statement. for example, we logically think that the ""hash"" column is the first one when thinking about each row.",0,0,0,0.985241949558258,0.9885101914405824,0.9900367259979248,0.0,accept,unanimous_agreement
245522968,10099,"now, i realize that his approach has a drawback. if newer versions require another table name, or different number of columns, older versions might not be able to extract the version number. should we instead create a 2nd table named ""version"" with a single col+row that will hold the version of the whole db?",0,0,0,0.895259439945221,0.8081704378128052,0.9155371189117432,0.0,accept,unanimous_agreement
245670439,10099,"as i mentioned earlier (in other words), you should not interfere any extra logic with the basic one anywhere. the main way is to work with the new ""saving system"". that is, if we simply discard all additional import/export logic, then the main one should not be affected. the same applies to all user visible manifestations of the application. your current code assumes that user had previous qbittorrent version before. it's incorrect! you should check for it first and then select what you should do. the same folder where legacy bt_backup were placed. just something more specific than ""data."" e.g. ""torrents"". ""lock file"" logic should be dropped at all. it's meaningless in case of new ""saving system"". in addition, as it turned out, it is inefficient on *nix systems.",0,-1,0,0.8641678094863892,0.959595263004303,0.881740391254425,0.0,accept,majority_agreement
245673145,10099,"""dropping all rc_1_0 code"" is much easier job than current pr so i assume it will be done earlier and you still need to remove it here separately.",0,0,0,0.9251823425292968,0.9819112420082092,0.9897466897964478,0.0,accept,unanimous_agreement
245693567,10099,"i'm surprised at this answer. i even thought for a moment that i was debating with another person... this does not contradict the fact that this code should be in a different place. it's incorrect. at least it's done incorrectly. you ripped main session code as well. main session logic should be the following: 1. if database doesn't exist create it 2. load torrents from database and go ahead. when you add upgrade logic to it: 1. if database doesn't exist create it 2. if older version was used before this run try to import torrents from old ""saving system"" 3. load torrents from database and go ahead. all this logic should be done in session code! one thing that should be done before the session is created is asking the user for accept the upgrade. to do this, we do not need to know anything about the existence of the database. all you need to know is whether the old qbittorrent version was used just before the current application run. my main idea is ""not to break the basic logic of the application for the sake of some additional"".",-1,-1,-1,0.9315392971038818,0.9637625813484192,0.9727005958557128,-1.0,accept,unanimous_agreement
245703452,10099,"is it? here's your code: [code block] you ask the user for upgrade if the database doesn't exist. but it is incorrect if the database does not exist due to the fact that the user has never used qbittorrent (on this system). i've suggested correct logic in another comment. yes, it is. i think ""overall application versioning"" i suggested in other comment should fit us. there is no need to have separate versions for each thing.",0,0,0,0.9743551015853882,0.9729893207550048,0.9789121747016908,0.0,accept,unanimous_agreement
245749884,10099,is that really necessary? the empty pages can be reused further. additionally the doc says: maybe it's better to use vacuum command from time to time or allow user to perform it?,0,0,0,0.9847384691238404,0.994584023952484,0.9913424253463744,0.0,accept,unanimous_agreement
246750174,10099,bittorrent::db,0,0,0,0.923816442489624,0.9800822138786316,0.9874297976493835,0.0,accept,unanimous_agreement
246775003,10099,"if you still want to have version for particular database it's better to use ""user_version"" pragma.",0,0,0,0.9852266907691956,0.9944276809692384,0.9932760000228882,0.0,accept,unanimous_agreement
246846733,10099,"there are many discussions on this topic. personally, i prefer to use singular for table names (e.g. ""torrent""). since sql is a future of qbittorrent, let's make a project-wide rule about it.",0,0,0,0.9627932906150818,0.9876890182495116,0.9878005981445312,0.0,accept,unanimous_agreement
249251569,10099,are you sure about this? is this a qt sql limitation? that's not an issue for sqlite itself. see [a link] 1.2:,0,0,0,0.98711097240448,0.9926712512969972,0.9933086633682252,0.0,accept,unanimous_agreement
249251609,10099,"are you constantly executing these queries? if so, it's good to cache them, and then update the args using hte cache query in the future. it saves expensive costs in sqlite parsing and evaluating these strings. (note: only important if this is done a lot).",0,0,0,0.9600103497505188,0.984258770942688,0.9719232320785522,0.0,accept,unanimous_agreement
249251650,10099,"my other recommendation would be to encapsulate this behind some class that just exposes the operations you want to perform. u.e. ""updatehash"". that way you can change things behind the scenes, without having to update all these places. it also isolates you from leaking out the details of tehse tables/columns and whatnot to all this consumptive code.",0,0,0,0.97163188457489,0.9898352026939392,0.9815927147865297,0.0,accept,unanimous_agreement
249253105,10099,yes. it is qt limitation:,0,0,0,0.9686429500579834,0.9804143905639648,0.991214632987976,0.0,accept,unanimous_agreement
249253234,10099,"are you constantly deleting your torrents? i don't think you'll be able to do this so often that this code becomes really ""slow"".",-1,-1,0,0.6116651296615601,0.6928538680076599,0.9819143414497375,-1.0,accept,majority_agreement
249260786,10099,"i was talking in a general sense. not about this query in particular. for example, if you are constantly quering the db, it can help significantly to cache the query. for example, say a user has many thousand torrents and you're going to execute the same query back to back for each torrent, then this can help quite a bit. i agree it doesn't need to be done for something that happens rarely",0,0,0,0.8473900556564331,0.7602408528327942,0.951993763446808,0.0,accept,unanimous_agreement
249269911,10099,"sorry. i just saw this suggestion having a general meaning in your other comment. here it was attached to a specific place of the code, so it looks like it relates to this particular case. having prepared statement is a good idea in case of frequently invoked query.",-1,-1,-1,0.988997757434845,0.9898737668991088,0.9485377669334412,-1.0,accept,unanimous_agreement
251261749,10099,"now that i think about it, i should throw and stop executing here. the older version may have table/column names that may not exist in the newer version, so further program execution will become undefined.",0,0,0,0.9360135793685912,0.9328001141548156,0.840252161026001,0.0,accept,unanimous_agreement
251308962,10099,"backward compatibility must be ensured in some way, otherwise the user will not be able to update the application without the risk of losing their torrents or stopping the application. but this is only a matter of implementation, because we know exactly the structure of the database of previous versions. however, forward compatibility is generally an unattainable goal, so we must still limit the frequency of database format changes. we need to think about it as carefully as possible. i had a crazy idea how to provide the possibility of database downgrade that provide some kind of forward compatibility (but ""paranoid"" will strongly against due to possible security issues). it lies in the fact that we could put sql queries that perform a database downgrade in some special database table. then, if a newer database version is found by application, it could retrieve the corresponding sql queries and execute them.",-1,-1,0,0.6675708889961243,0.8583096861839294,0.591159999370575,-1.0,accept,majority_agreement
252589025,10099,"please do not overfill these methods interface with unnecessary parameters. that's all you can obtain from the ""torrent"" object.",0,0,0,0.9551646113395692,0.988723635673523,0.9726216793060304,0.0,accept,unanimous_agreement
252589763,10099,the same as similar methods above.,0,0,0,0.9856728315353394,0.9903720617294312,0.9919283390045166,0.0,accept,unanimous_agreement
252589993,10099,these two should be also moved to the following alert handlers and renamed accordingly.,0,0,0,0.987317144870758,0.9919385313987732,0.995414137840271,0.0,accept,unanimous_agreement
253380502,10099,torrenthandle::name() doesn't expose the same thing. nothing does.,-1,0,0,0.748031497001648,0.8017361164093018,0.9801862239837646,0.0,accept,majority_agreement
253381550,10099,i do it this way because `torrenthandle::hasfirstlastpiecepriority()` does a potentially expensive calculation.,0,0,0,0.9129368662834167,0.9894263744354248,0.98362535238266,0.0,accept,unanimous_agreement
253386544,10099,"i have commented not only on this particular method, but all similar changes. as for this particular case, i'd better change the handling of the torrent name inside torrenthandle class.",0,0,0,0.9859219193458556,0.988030731678009,0.992480993270874,0.0,accept,unanimous_agreement
253386864,10099,i'd better change its implementation inside torrenthandle class.,0,0,0,0.983143150806427,0.988353431224823,0.9831468462944032,0.0,accept,unanimous_agreement
254374139,10099,nothing inside this method indicates the layout of the query result. it would be better to use field names instead of indexes.,0,0,0,0.987545907497406,0.9921370148658752,0.9852787256240844,0.0,accept,unanimous_agreement
254378898,10099,"i wondered for a long time whether there were really good reasons to break the readability of sql queries like this. i've only found two possible reasons, but none of them seems to me to be strong enough: 1. an attempt to protect yourself from possible typos in queries. but it looks ridiculous, because the probability to make a typo in any other query word is not less than in the names of tables/fields. in addition, they all appear at the first test runs. 2. ability to easily change table/field names in the future. this is also doubtful... it may look useful only in the early stages, but once it reaches the first release (in fact, once it will be merged in master), it will become very difficult to change the database format, so it will become almost unclaimed.",-1,-1,-1,0.9672224521636964,0.975611925125122,0.97179913520813,-1.0,accept,unanimous_agreement
254478349,10099,": **off-topic**: the plural form of ""index"" is ""indices"".",0,0,0,0.9722148180007936,0.9912827014923096,0.9772311449050904,0.0,accept,unanimous_agreement
254540289,10099,aren't both forms acceptable? [a link],0,0,0,0.983939528465271,0.990761697292328,0.9951617121696472,0.0,accept,unanimous_agreement
254546183,10099,: from the same link (emphasis mine):,0,0,0,0.9757432341575624,0.984614372253418,0.9877161383628844,0.0,accept,unanimous_agreement
254550356,10099,"ok, thanks.",1,1,0,0.5829715132713318,0.7235771417617798,0.6576256155967712,1.0,accept,majority_agreement
257514804,10099,unforunately they don't correlate one-to-one. the index numbers are dependent on what you asked with your `select` statement.,0,0,0,0.8977457284927368,0.9584828019142152,0.9597685933113098,0.0,accept,unanimous_agreement
257515297,10099,"do you mean the inline c++ comments? i did it for readability and better reviewing of the appropriate var types chosen (in the sql context), since it involves many columns. then it will be used as quick reference each time we want to write a new sql statement. if you mean my general approach in other sql statements to split them: i just split them in their logical parts to increase readability. and when the line becomes too long.",0,0,0,0.9811527729034424,0.9811520576477052,0.984432578086853,0.0,accept,unanimous_agreement
257517528,10099,"do you really think that when i say about ""break the readability of sql queries"", i mean either comments or structural splitting that should improve the readability? i meant the fact that you separate all names from sql queries.",0,0,0,0.9716772437095642,0.9687236547470092,0.9773608446121216,0.0,accept,unanimous_agreement
257518087,10099,yes. but i can't see what you asked with your select statement since it is exist in somewhere else. but the field names speak for themselves (i mean field/column names from sql table).,0,0,0,0.9860316514968872,0.9784867763519288,0.98993319272995,0.0,accept,unanimous_agreement
257519072,10099,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
257519086,10099,i can't find a way to make it inexpensive,-1,-1,0,0.5230121612548828,0.7406460642814636,0.6601534485816956,-1.0,accept,majority_agreement
257519142,10099,"personally, i don't see this as a problem. do you want to provide a diff that implements this in the ""correct"" way?",0,0,0,0.8796531558036804,0.7769350409507751,0.9447430968284608,0.0,accept,unanimous_agreement
257519313,10099,`qsqlquery::value(const qstring &name)` the docs say that this method is inefficient. bear in mind that `preparetorrentdata()` is a helper function called from one place only. so the reader/reviewer can backtrack a little bit. is this sufficient to not seek out a more rigid solution? how about if i put comments to indicate which column each number represents?,0,0,0,0.9763827323913574,0.9709954261779784,0.9888625741004944,0.0,accept,unanimous_agreement
257519419,10099,"oh you mean the qstring substitutions? i did it to prevent typos and to ease refactoring of this pr, in case it is decided to use a different name for eg the table, before the pr is merged.",0,0,0,0.9875613451004028,0.9928410053253174,0.9910242557525636,0.0,accept,unanimous_agreement
257544343,10099,"minor note, it seems these variables are always converted to qstring, so you can store them in qstring instead and also initialize them with qstringliteral macro.",0,0,0,0.9842384457588196,0.991070032119751,0.9881148338317872,0.0,accept,unanimous_agreement
257589035,10099,then par. 2 (from my comment) is applicable to it:,0,0,0,0.9849178194999696,0.9828328490257264,0.9927534461021424,0.0,accept,unanimous_agreement
257590446,10099,"this is more or less clear as it is. there's another problem. do the indexes used match the correct columns? for example, you changed the query but forgot to change the indexes.",0,0,0,0.97398179769516,0.9715304970741272,0.9886767864227296,0.0,accept,unanimous_agreement
257591652,10099,i wonder why you're passing qsqlquery here. why not extract all needed data in outer method and pass it here as dictionary?,0,0,0,0.8194156289100647,0.9399270415306092,0.9576194882392884,0.0,accept,unanimous_agreement
257886521,10099,just ask yourself why do we need recalculate this property each time we're getting its value?,0,0,0,0.9328495860099792,0.9821743965148926,0.9871630072593688,0.0,accept,unanimous_agreement
257887076,10099,"then it will be easier to fix such things in the form of separate ""prerequisite"" prs.",0,0,0,0.9851897358894348,0.9908618927001952,0.9907225370407104,0.0,accept,unanimous_agreement
259590558,10099,"it seems unconventional to define global variables in a header file. if you end up including this in multiple translation units, you'll get multiply defined symbols. i would say these should either be put in the anonymous namespace and made `cons`, or they should be made `extern` and the values moved into a tu.",0,0,0,0.9300628304481506,0.9639602899551392,0.9645861387252808,0.0,accept,unanimous_agreement
399816475,12169,"before you guys go all out, just keep in mind that the original icon name has an advantage which is qbt will use the native icon from desktop environment (if they provided one), this makes the application having more uniform & native feel. [a link] imo we should use those standard icon names as much as possible and only use custom ones when the standard ones are not suitable.",0,0,0,0.9497403502464294,0.9682908654212952,0.9795861840248108,0.0,accept,unanimous_agreement
399819716,12169,i didn't know that. let me adjust using the icon specific name if possible.,0,0,0,0.9625527858734132,0.8239474296569824,0.9770324230194092,0.0,accept,unanimous_agreement
399821031,12169,i have checked the gnome-icon-theme. there is nothing that can replace `reannounce` and `tag` icon. i am going to change the `recheck` icon to `view-refresh` as they are very similar. great tip!,1,1,1,0.9928610920906068,0.9958472847938538,0.9959023594856262,1.0,accept,unanimous_agreement
399825995,12169,ah sorry these are not the same like the previous ones: [code block],-1,-1,-1,0.9894300699234008,0.9896035194396972,0.9948457479476928,-1.0,accept,unanimous_agreement
402155529,12169,"any files deleted (gear and gear32) must also be removed from this file, otherwise the compiler still looks for them.",0,0,0,0.98838472366333,0.992210865020752,0.9929832220077516,0.0,accept,unanimous_agreement
402205981,12169,thanks. i forgot about that file. made necessary changes.,1,1,1,0.8077417612075806,0.9649264216423036,0.9424439668655396,1.0,accept,unanimous_agreement
402217143,12169,are you sure they are not used in webui?,0,0,0,0.9877947568893432,0.9913167953491212,0.9930387139320374,0.0,accept,unanimous_agreement
402320329,12169,"error.svg should be in `qbt-theme` folder, not `skin` otherwise this won't work.",0,0,0,0.8362495303153992,0.9855003952980042,0.9620744585990906,0.0,accept,unanimous_agreement
402333717,12169,won't this change cause problem for other icons?,0,0,0,0.9654432535171508,0.9712525010108948,0.8741335868835449,0.0,accept,unanimous_agreement
402369602,12169,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
402402428,12169,you are right... you could undo what i suggested and change this line to [code block] but i don't know if this will be acceptable. better leave this comment unresolved until someone else confirms if this is the proper way. personally i don't understand why there are 2 folders. qbt-theme and skin. the icons contained in them seem randomly divided to me.,0,0,0,0.5920722484588623,0.6662729382514954,0.7220749855041504,0.0,accept,unanimous_agreement
402405029,12169,"exactly my thought. unifying them will actually be a really good solution. as i am not a programmer, i thought it may serve some special purposes. does a different folder serve any purpose? what do you guys think?",0,1,1,0.7436304688453674,0.8836773633956909,0.9681010246276855,1.0,accept,majority_agreement
402416578,12169,maybe some historical reason? no idea if it is important or not. differing to,0,0,0,0.6759349703788757,0.8613597750663757,0.7357273697853088,0.0,accept,unanimous_agreement
402418317,12169,i think the qbt-theme icons can be replaced with system icons on unix systems that's why there are rwo folders,0,0,0,0.985331654548645,0.9909031987190248,0.984786570072174,0.0,accept,unanimous_agreement
403092593,12169,i don't think so. it is the icon name that matter not the folder they are in.,0,0,0,0.9644001126289368,0.9348395466804504,0.9683618545532228,0.0,accept,unanimous_agreement
403102770,12169,[a link] haven't you noticed almost all system (or qbt-theme folders') icons are wrapped in `geticon` call,0,0,0,0.9877784848213196,0.9927278757095336,0.9950377345085144,0.0,accept,unanimous_agreement
403451592,12169,"you misunderstood me. i said in order to use icon-theme used by the linux operating system, i don't think the folder name doesn't matter. it is the real icon name like `error.svg` plays the most part.",-1,-1,0,0.5530222654342651,0.774621307849884,0.7925949692726135,-1.0,accept,majority_agreement
403451756,12169,i will make the changes as soon as i get an instruction from . until then i think changing the folder is a better solution than changing the code.,0,0,0,0.9593543410301208,0.9426881074905396,0.9865924715995787,0.0,accept,unanimous_agreement
403481082,12169,"definitely some history in there, but i don't recall the details. i'm not really sure what you guys are asking... about the suggested changes [a link], i don't think it is future-proof. there is some theming work going on and that change won't fit well, it would be better to load the icons via `uithememanager`. i would also suggest less changes to the .cpp code in this pr as it gets complicated and it is easy to overlook something. if changes to .cpp are required it would be best to do it in a follow-up pr.",0,0,0,0.7935181260108948,0.5682586431503296,0.9426248669624328,0.0,accept,unanimous_agreement
403482223,12169,"good point. i recommend unifying these icon in a single folder in future. i have found where `error.svg` is being used, by running following commands. how can we solve this now, following mike's suggestion? [code block] [code block]",1,1,1,0.9480394721031188,0.787963330745697,0.9720863103866576,1.0,accept,unanimous_agreement
403484809,12169,"-im i would now recommend just focusing on the icons themselves for this pr. that's done and can be delivered. if some icons keep strange names like ""document-edit-verify"" or if they are split across folders seemingly arbitrarily, that's something for another issue report/pr in the future, separate from this one.",0,0,0,0.9487702250480652,0.9853874444961548,0.9672657251358032,0.0,accept,unanimous_agreement
403485163,12169,i just want to fix just `error.svg` icon issue. with that this pr will be complete.,0,0,0,0.9835230708122252,0.95079106092453,0.9878292083740234,0.0,accept,unanimous_agreement
403497512,12169,"i have not been following the theming prs so i don't know how they will play out. i think is right. better keep changes in .cpp to a minimum in this pr (any renamed icons) and if i'm not mistaken this is the only thing remaining. keep the new icons in the pr but undo any changes in this line, this has been a problem for a long time so i suppose it doesn't matter if it stays a little more. such gui changes have to go through but he is busy most of the time so i hope you won't be discouraged if it takes a while. thanks for all this work.",0,1,1,0.6252545118331909,0.9678667783737184,0.98705393075943,1.0,accept,majority_agreement
403497961,12169,i haven't changed anything in .cpp file regarding `error.svg`. i just shifted it from `skin` folder to `qbt-theme`. what should i do now?,0,0,0,0.9457099437713624,0.9932044744491576,0.9879477620124816,0.0,accept,unanimous_agreement
403499527,12169,"change this line back and put it back in `skin` because as you said, it breaks the icon in other places.",0,0,0,0.9573041200637816,0.99050772190094,0.9900110363960266,0.0,accept,unanimous_agreement
403499627,12169,you should probably also revert the change a few lines below for the warning icon.,0,0,0,0.9855782389640808,0.9889467358589172,0.9879706501960754,0.0,accept,unanimous_agreement
403501517,12169,reverted changes.,0,0,0,0.9341665506362916,0.9610716104507446,0.9733482003211976,0.0,accept,unanimous_agreement
689845008,15330,"the previous one was ok (what is the problem) but if you want to change it, you shouldn't address the reporter directly.",0,0,0,0.9637266993522644,0.9763413667678832,0.976197063922882,0.0,accept,unanimous_agreement
689845364,15330,false,0,0,0,0.920915186405182,0.9263598322868348,0.9627262949943542,0.0,accept,unanimous_agreement
689847028,15330,"i don't know if this will be visible in the posted issue. if it is, i would remove it completely but if it isn't (and you insist on keeping it) i would make it more formal: ""thank you for taking the time to fill out this report.""",0,1,1,0.6868927478790283,0.6416844725608826,0.5490009784698486,1.0,accept,majority_agreement
689850410,15330,should be `false` here.,0,0,0,0.967216730117798,0.9890913963317872,0.9826295375823976,0.0,accept,unanimous_agreement
689850955,15330,"the titles from the previous template were adequate imo: ""suggestion"" ""use case"" and ""extra info/examples/attachments"".",0,0,0,0.9798081517219543,0.9838406443595886,0.95413476228714,0.0,accept,unanimous_agreement
689850995,15330,and in `browser name and version`,0,0,0,0.9861786365509032,0.9918453097343444,0.9957701563835144,0.0,accept,unanimous_agreement
689852036,15330,"otherwise add the `value` property after `description` with the `(linux os only)`. edit: you may also remove the `description`, in this case.",0,0,0,0.989285409450531,0.9945593476295472,0.9957214593887328,0.0,accept,unanimous_agreement
689852074,15330,you forgot to re-add this part: see [a link] if you're not sure where to find them.,0,0,0,0.9736112356185912,0.973566472530365,0.9882748126983644,0.0,accept,unanimous_agreement
689854507,15330,"no, it is not, ~~not the first one at the least.~~ ~~the `###` is superfluous.~~ no, it is not, sorry. :+1:",-1,-1,-1,0.980803906917572,0.9921597838401794,0.986413598060608,-1.0,accept,unanimous_agreement
690017945,15330,"i would take off the period of the label/title, especially when the label is followed by an input box. the period looks ok in description though.",0,0,0,0.9812359809875488,0.9919893145561218,0.9129096269607544,0.0,accept,unanimous_agreement
690019143,15330,"this shouldn't be ""linux os only"".",0,0,0,0.9695026278495787,0.9808201789855956,0.976815104484558,0.0,accept,unanimous_agreement
690019895,15330,"a single line input box for 2 version strings? imo the result would look bad, you should use `textarea` instead. please check other input fields.",-1,0,-1,0.7120593786239624,0.6962510347366333,0.9539957642555236,-1.0,accept,majority_agreement
690020095,15330,"if it is ""webui related only"", then this should be `false`.",0,0,0,0.9739006161689758,0.9932246804237366,0.9913129210472108,0.0,accept,unanimous_agreement
690020591,15330,"too many bold text and full uppercase words makes it hard to read (it looks like written by an edgy kid and put me off), please refrain from using it or use it scarcely. the same applies to other labels.",-1,0,-1,0.8413246273994446,0.5608148574829102,0.897711455821991,-1.0,accept,majority_agreement
690021695,15330,no need for parentheses imo.,0,0,0,0.9848873019218444,0.9809762835502625,0.9765719175338744,0.0,accept,unanimous_agreement
690021924,15330,no need for brackets,0,0,0,0.9813031554222108,0.9690432548522948,0.9931861162185668,0.0,accept,unanimous_agreement
690022508,15330,"i would prefer it is `false`. from my experience, it rarely help resolving issues.",-1,0,0,0.5524793267250061,0.97242534160614,0.9632251858711244,0.0,accept,majority_agreement
690024381,15330,"about the eol versions, i would state it as: ""we do not support any versions older than the current release series"" this is to avoid mentioning exact numbers which calls for regular maintenance for it.",0,0,0,0.9684489369392396,0.9882757663726808,0.9911504983901978,0.0,accept,unanimous_agreement
690027969,15330,too much indent. please check the indentation of the file thoroughly.,-1,0,0,0.7753714919090271,0.7737443447113037,0.8405433893203735,0.0,accept,majority_agreement
690035798,15330,why not separate input boxes?,0,0,0,0.9710170030593872,0.9648498296737672,0.9871343970298768,0.0,accept,unanimous_agreement
690224254,15330,this is what we use currently? if i merge some of the `input` fields......in to one `text` field will -> qbittorrent/qt/libtorrent-rasterbar versions and operating system. suffice?,0,0,0,0.9897010326385498,0.9879879951477052,0.992365539073944,0.0,accept,unanimous_agreement
690224959,15330,this `input` has been previously requested to be completely removed....,0,0,0,0.9822423458099364,0.9917978048324584,0.996068000793457,0.0,accept,unanimous_agreement
690229156,15330,it's not visible & i don't insist on keeping any of it - just added it in as other repos use similar. i will remove.,0,0,0,0.980176031589508,0.9139609932899476,0.9846428036689758,0.0,accept,unanimous_agreement
690229335,15330,will address,0,0,0,0.9842499494552612,0.9671050310134888,0.9908989667892456,0.0,accept,unanimous_agreement
690229579,15330,will address,0,0,0,0.9842499494552612,0.9671050310134888,0.9908989667892456,0.0,accept,unanimous_agreement
690473996,15330,what is the problem being experienced?,0,0,0,0.8691524863243103,0.9208695888519288,0.9859090447425842,0.0,accept,unanimous_agreement
690475990,15330,any issues with this? (un-bolded),0,0,0,0.971321940422058,0.9785969257354736,0.9809993505477904,0.0,accept,unanimous_agreement
690477683,15330,the same applies to other labels. most of the bold text words are just a copy&paste of our current template,0,0,0,0.9853516221046448,0.9870131611824036,0.9937955141067504,0.0,accept,unanimous_agreement
690478031,15330,this section is being removed,0,0,0,0.9813505411148072,0.9853041768074036,0.9927691221237184,0.0,accept,unanimous_agreement
690478348,15330,will address,0,0,0,0.9842499494552612,0.9671050310134888,0.9908989667892456,0.0,accept,unanimous_agreement
690478518,15330,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
690478787,15330,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
690482748,15330,example of `textarea` with a placeholder: ![a link],-1,0,0,0.642217755317688,0.9914790987968444,0.9925163388252258,0.0,accept,majority_agreement
690746578,15330,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
690781638,15330,`what problem is being experienced?`,0,0,0,0.8702667355537415,0.9735295176506042,0.9680715203285216,0.0,accept,unanimous_agreement
690782324,15330,"user should not be addressed, right? `(...) description of expected behaviour.`",0,0,0,0.9725828766822816,0.987244188785553,0.989576816558838,0.0,accept,unanimous_agreement
690788670,15330,"`please add the ""crash report"" (if encountered) or provide a clear and concise description of the problem.`",0,0,0,0.9817376136779784,0.9901622533798218,0.9908083081245422,0.0,accept,unanimous_agreement
690789364,15330,"vocabulary should be constant i think, i.e. if there has already been used the word ""problem"", it should be kept being used. [code block]",0,0,0,0.9848421812057496,0.9935990571975708,0.9882602691650392,0.0,accept,unanimous_agreement
690790889,15330,`please provide a reliable steps to reproduce the problem.`,0,0,0,0.9810402989387512,0.9883477091789246,0.9929091930389404,0.0,accept,unanimous_agreement
690794015,15330,"`(...) see [""where does qbittorrent save its settings""](link).`",0,0,0,0.9866613745689392,0.9946282505989076,0.994726836681366,0.0,accept,unanimous_agreement
690794299,15330,periods are still left. in several labels.,0,0,0,0.9842790961265564,0.9812001585960388,0.988189697265625,0.0,accept,unanimous_agreement
690800730,15330,"the reporter should know that this is not required, like the 3rd checkbox (optional).",0,0,0,0.986182451248169,0.9934144020080566,0.9931406378746032,0.0,accept,unanimous_agreement
690819884,15330,"this section bugs me. you are forcing the reporter to unconditionally mention qt and libtorrent versions but if they're on windows, there's a 99% chance it's whatever the official release uses. so i would move qt/libt to description: ""if (you are) on linux, mention your libtorrent-rasterbar and qt version."" i would prefer it if there was no placeholder text in this section so that the reporter can format it however they want but i don't insist on this as it is purely personal preference.",-1,0,-1,0.9263516664505004,0.7307314872741699,0.97459614276886,-1.0,accept,majority_agreement
690820354,15330,i think it's ok in the description because only the reporter can see this.,0,0,0,0.9818682670593262,0.9520295262336732,0.9143205881118774,0.0,accept,unanimous_agreement
690822714,15330,is this section really required to be filled? i would even question its usefulness because it's (almost?) always the opposite of the problem.,0,0,0,0.8517533540725708,0.9541301131248474,0.7120579481124878,0.0,accept,unanimous_agreement
690823329,15330,"typo: extra ""a"" before concise. personal opinion: ""suggestion"" and ""use case"" don't need a description.",0,0,0,0.9800240397453308,0.960024118423462,0.99293315410614,0.0,accept,unanimous_agreement
690826536,15330,"""operating system & qbittorrent"" i would also re-arrange these so qbittorrent comes first.",0,0,0,0.9888623356819152,0.9892237782478333,0.9952847361564636,0.0,accept,unanimous_agreement
690861599,15330,wrong indention: missing one whitespace. you can use [a link] to format the entire file (and feature_request.yml).,-1,0,0,0.738842248916626,0.870979368686676,0.8711123466491699,0.0,accept,majority_agreement
690862241,15330,"in prerequisites section there are still too many text in bold, i would remove bold from all of them.",0,0,0,0.9836336970329284,0.9600511193275452,0.9641135931015016,0.0,accept,unanimous_agreement
690865588,15330,"i suppose this could just become `qbittorrent & operating system versions` and mention the version requirements in the description: [code block] some notes: * i would prefer prefill the textarea to have consistent formatting. * theoretically 32, 64-bit shouldn't make a difference and since we are slowly moving away from 32-bit, i suggest omitting it in description.",0,0,0,0.9822694659233092,0.9922226071357728,0.9917269945144652,0.0,accept,unanimous_agreement
690869409,15330,add an empty line above please.,0,0,0,0.9822874665260316,0.9869984984397888,0.992568016052246,0.0,accept,unanimous_agreement
690878049,15330,the above 2 lines should have the same indent level as `#### advisory`.,0,0,0,0.987751841545105,0.9906181693077089,0.9946765899658204,0.0,accept,unanimous_agreement
698432044,15330,thank you for the tool,1,1,1,0.7701521515846252,0.7726171612739563,0.851495087146759,1.0,accept,unanimous_agreement
698433850,15330,"just a note on this, if it was prefilled - it would invalidate the true/false requirement. we could be left with just: qbittorrent: operating system: qt: libtorrent-rasterbar: i added a comment in description about how we would like it formatted & added them as a placeholder instead.",0,0,0,0.9888604283332824,0.9932255148887634,0.99447363615036,0.0,accept,unanimous_agreement
698608572,15330,"i would change ""qbittorrent.ini"" to ""qbittorrent settings|config|preferences file"" (pick one) because it's not "".ini"" in linux, it's "".conf"" (maybe mac too idk). why split the above checkbox from this one? seems superfluous.",0,-1,0,0.6486833691596985,0.5022305250167847,0.9541873931884766,0.0,accept,majority_agreement
698611821,15330,"honestly i'm not a fan of the creation of a whole section for what should be 1 checkbox (more scrolling...). who's ever going to check more than one of the ci test builds anyway? and if you say it's for our convenience, it's totally not. we'll know which ci build they tested by the user's os. in the end, i doubt we even care which os they tested it on.",-1,-1,-1,0.9803699254989624,0.9296778440475464,0.9788624048233032,-1.0,accept,unanimous_agreement
698641447,15330,"hmm, that makes sense. maybe 'optional prerequisites' section should be removed.",0,0,0,0.9842878580093384,0.9876697659492492,0.9695642590522766,0.0,accept,unanimous_agreement
698643807,15330,maybe= qbittorrent settings file (.ini/.conf/.idk),0,0,0,0.9874326586723328,0.9933913946151732,0.9924023151397704,0.0,accept,unanimous_agreement
698662947,15330,"i only included it in to it's own section as we had already asked about the ci builds, since we now have segregated os builds & to separate mandatory/optional. ref.: ____ i agree with general consensus to remove 'optional prerequisites' section & i will include the ci builds with the ""official qbittorrent version"" example: is this ok with you?",0,0,0,0.982864260673523,0.9319358468055724,0.9859447479248048,0.0,accept,unanimous_agreement
698667213,15330,will integrate. i will choose **qbittorrent preferences** as that's what's used if you follow [a link] example: will also change description under log(s) & settings file(s) to reflect same.,0,0,0,0.9848700761795044,0.990767538547516,0.9926820397377014,0.0,accept,unanimous_agreement
698734475,15330,i think the last part is a bit of a mouthful. how about this?? =,0,-1,-1,0.5207006931304932,0.9873931407928468,0.602360725402832,-1.0,accept,majority_agreement
698755339,15330,"ya, i'll go with this unless there's any objections from others. thanks",1,1,1,0.970454216003418,0.9718174934387208,0.9880504012107848,1.0,accept,unanimous_agreement
698780820,15330,there was nothing wrong with them being mixed since the optional one was denoted as such (maybe it's just me). that would make testing the ci builds mandatory. are we ok with that? i think it's too much but no strong opinion from me. if you go with that here's a shorter version (with spaces around the slashes to make it clear they are separate links):,0,0,0,0.9696146845817566,0.959896981716156,0.884172797203064,0.0,accept,unanimous_agreement
698797603,15330,"maybe we should go back to the old one (but updated) = i chose to keep ""build"" (thalieht chosed to remove it) because i feel it's more clear.",0,0,0,0.9724766612052916,0.9864444136619568,0.983737289905548,0.0,accept,unanimous_agreement
698843626,15330,"i don't have any strong opinion on it either what about one of these? (marked as not needing validation, of course!) unless anybody else thinks testing the master ci builds should be mandatory..... 1. * [a link]** / **[a link]** / **[a link] ""master"" builds. 2. * [a link]** / **[a link]** / **[a link] builds. will do same for ""feature request""",0,0,0,0.8861637711524963,0.8916944265365601,0.8530738353729248,0.0,accept,unanimous_agreement
698847389,15330,"it's also good :thumbs_up: not sure which one is better, nr 1 or 2. let's see what the others think.",1,1,1,0.9448718428611756,0.961683988571167,0.9942610263824464,1.0,accept,unanimous_agreement
698856948,15330,"i will also change the title from ""mandatory prerequisites"" to just ""prerequisites"" if we are going to go back & include the (optional but recommended) part.",0,0,0,0.9823861122131348,0.9907497763633728,0.9938220977783204,0.0,accept,unanimous_agreement
698857505,15330,:thumbs_up:,0,0,1,0.8380307555198669,0.9771975874900818,0.9533231854438782,0.0,accept,majority_agreement
698941146,15330,"imo, ""master"" has no meaning for regular users.",0,0,0,0.8002172112464905,0.9772160053253174,0.7941654920578003,0.0,accept,unanimous_agreement
698971585,15330,"maybe just me, if it is really necessary, i would use code blocks instead of bold text for ""`qbittorrent preferences file`/`qbittorrent.log` and `watched_folders.json`""",0,0,0,0.9865131974220276,0.9954038858413696,0.9815287590026855,0.0,accept,unanimous_agreement
699166801,15330,will omit.,0,0,0,0.905730128288269,0.9538945555686952,0.9864585995674132,0.0,accept,unanimous_agreement
699169797,15330,"it's not 100% necessary but it's a clearer visual (to me anyway) of what files are required, code blocks work too. i can omit any kind of formatting/highlighting on them if you prefer?",0,0,0,0.9817904233932496,0.958877682685852,0.98668110370636,0.0,accept,unanimous_agreement
699788918,15330,that will work for me too.,0,0,0,0.9022364020347596,0.9819276332855223,0.9759197235107422,0.0,accept,unanimous_agreement
706868367,15330,very last comment from me (same for the feature request form): [code block],0,0,0,0.982857346534729,0.9788237810134888,0.9946243166923524,0.0,accept,unanimous_agreement
706869127,15330,it's not in feature request section?! will change,0,0,-1,0.9694198369979858,0.6744593977928162,0.8603643774986267,0.0,accept,majority_agreement
706870871,15330,done (bug_report),0,0,0,0.94451105594635,0.9848694801330566,0.9845296144485474,0.0,accept,unanimous_agreement
706871704,15330,"oops, don't know what i was looking at, sorry.",-1,-1,-1,0.9900023937225342,0.9917884469032288,0.9927583932876588,-1.0,accept,unanimous_agreement
706872086,15330,just a nitpick (you don't have to do it). maybe the 'extra info/examples/attachments' section in feature_request.yml should also have = note: it's the user's responsibility to redact any sensitive information,0,0,0,0.9827228784561156,0.9900810122489928,0.9764992594718932,0.0,accept,unanimous_agreement
706882122,15330,"imo i don't think it's really required as more than likely it'll be screenshots, links or a wall of text of what the user wants......... but of course that doesn't mean i won't add it or am objecting it, if others also think it's a good idea to do so - it can even be added in the future if really required.",0,0,0,0.725464940071106,0.8016861081123352,0.9131118655204772,0.0,accept,unanimous_agreement
706982212,15330,is this comment still valid?,0,0,0,0.983016312122345,0.9903733730316162,0.9936402440071106,0.0,accept,unanimous_agreement
707119241,15330,"good catch! looks like i overlooked this, i will remove the descriptions completely instead of just the typo unless anybody else feels they should stay?! (i have no strong opinion either way)",1,1,1,0.9892619848251344,0.9849101901054382,0.993638813495636,1.0,accept,unanimous_agreement
707170615,15330,descriptions removed.,0,0,0,0.978224754333496,0.9821163415908812,0.9922356009483336,0.0,accept,unanimous_agreement
707171357,15330,all issues addressed i believe.,0,0,0,0.924134075641632,0.9813515543937684,0.9881397485733032,0.0,accept,unanimous_agreement
707171630,15330,addressed.,0,0,-1,0.9813690185546876,0.9869421124458312,0.8090953826904297,0.0,accept,majority_agreement
707172616,15330,section was removed.,0,0,0,0.9655327200889589,0.9889989495277404,0.9871777296066284,0.0,accept,unanimous_agreement
707173141,15330,it was removed.,0,0,0,0.9669169783592224,0.9894804954528807,0.991953670978546,0.0,accept,unanimous_agreement
707173360,15330,changed,0,0,0,0.9773849844932556,0.9270829558372498,0.7968646287918091,0.0,accept,unanimous_agreement
707174063,15330,used original (what is the problem?),0,0,0,0.98223477602005,0.9729113578796388,0.8790973424911499,0.0,accept,unanimous_agreement
707174671,15330,applied different approach,0,0,0,0.9793015718460084,0.9813193082809448,0.9918366074562072,0.0,accept,unanimous_agreement
707175876,15330,section removed.,0,0,0,0.961559236049652,0.9819185733795166,0.988453209400177,0.0,accept,unanimous_agreement
99532527,6186,why don't we put `= default` here and in `guiprovider`?,0,0,0,0.9828529953956604,0.9942043423652648,0.9931260347366332,0.0,accept,unanimous_agreement
99532784,6186,`qflags `?,0,0,0,0.9874287247657776,0.9926831126213074,0.9919589757919312,0.0,accept,unanimous_agreement
99533003,6186,"there should be only one from each pair (dark or light, large or small), because one can not have both set or cleared at a time.",0,0,0,0.9781202673912048,0.9867287278175354,0.9898810982704164,0.0,accept,unanimous_agreement
99534185,6186,why on every icon request? why don't you handle `qevent::palettechange`?,0,0,0,0.9796466827392578,0.9845980405807496,0.9878639578819276,0.0,accept,unanimous_agreement
99534794,6186,what was that?,0,0,0,0.8995609283447266,0.9643625617027284,0.9710831046104432,0.0,accept,unanimous_agreement
99535204,6186,here and the next line: why don't you use default parameters for the method in line 71?,0,0,0,0.980255961418152,0.9923667311668396,0.9932624697685242,0.0,accept,unanimous_agreement
99550745,6186,"i find this flag and setting name misleading. to me this mode produces border-less or, perhaps, expanded icons.",0,-1,-1,0.7860023975372314,0.636201798915863,0.5447114109992981,-1.0,accept,majority_agreement
99551277,6186,"could you put `qlatin1string(""literal"")` here and below, please?",0,0,0,0.9880613088607788,0.9948829412460328,0.9956336617469788,0.0,accept,unanimous_agreement
99551722,6186,this seems to be error-prone to me (the reference). i would merge this line into the next one.,-1,0,0,0.5573379993438721,0.834526777267456,0.9586910605430604,0.0,accept,majority_agreement
99554306,6186,"don't like this api. and don't like the fact that our icons are split onto two parts while they naturally form the single theme. unix users would benefit from merging them together and distributing them as individual files but not resources. perhaps we better merge these icons into the main theme right away (for instance into a subdir ""status"", as per fdo specification)? because the proposed api looks like it allows to mix icons from different themes, which shall not happen and certainly may not be encouraged by an api.",-1,-1,-1,0.981839954853058,0.983105480670929,0.9490625262260436,-1.0,accept,unanimous_agreement
99554389,6186,`= default` too?,0,0,0,0.9859315156936646,0.9915239810943604,0.9923012256622314,0.0,accept,unanimous_agreement
99560745,6186,your changes seem to need a rebasing on top of the current master (the signature of this function is old).,0,0,0,0.9857786893844604,0.9806782603263856,0.9898269176483154,0.0,accept,unanimous_agreement
99561247,6186,alphabetical order?,0,0,0,0.974755883216858,0.9807830452919006,0.9930419921875,0.0,accept,unanimous_agreement
99562003,6186,you are adding a bunch of libtorrent headers for the sake of what? those static functions below do not need access to the private members of the class. then why?,0,0,0,0.9667779803276062,0.7439466118812561,0.9516144394874572,0.0,accept,unanimous_agreement
99747234,6186,i don't understand. this was just a reformatting via uncrustify. same for other places you've mentioned this.,0,-1,0,0.8135836720466614,0.5463413000106812,0.5579651594161987,0.0,accept,majority_agreement
99747488,6186,"i wasn't intending to change the file layout at all, but there is already a `src/icons/flags/` directory, so there's precedence for doing this. do you want me to reorganise so there's a `src/icons/status/` directory?",0,0,0,0.9794979095458984,0.9898864030838012,0.9875245094299316,0.0,accept,unanimous_agreement
99747659,6186,"this was after rebasing, and i didn't see any changes. will become moot if wants me to reorganise the icon hierarchy.",0,0,0,0.9733278751373292,0.7976382970809937,0.972984492778778,0.0,accept,unanimous_agreement
99747839,6186,"because that's how the dark theme was detected previously, and i simply extended it. didn't know about `qevent::palettechange` - i tried to find some event that would indicate a theme change but didn't know what to look for. now i'll see about hooking into it.",0,0,0,0.9733012318611144,0.979643940925598,0.9881364107131958,0.0,accept,unanimous_agreement
99747978,6186,"reference to `pixmap` which may be reassigned to `colored` below, rather than unnecessarily copying objects. but i think i messed it up as `colored` goes out of scope ...",0,0,0,0.8552749752998352,0.7892153859138489,0.8701702952384949,0.0,accept,unanimous_agreement
99748003,6186,~~yep.~~ not exactly. i needed to be able to distinguish between not yet knowing the theme or icon size. but if i can hook into the events (configure does it for the icon size) then that's not an issue.,0,0,0,0.9402482509613036,0.5131696462631226,0.9176864624023438,0.0,accept,unanimous_agreement
99748032,6186,"again, didn't know what to look for. thanks.",1,1,1,0.7787672281265259,0.9406062960624696,0.9032030701637268,1.0,accept,unanimous_agreement
99748175,6186,the visible part of the icon is larger. everything that is removed is transparent. your opinion? how would you like the setting named?,0,0,0,0.9755403399467468,0.8594538569450378,0.9894486665725708,0.0,accept,unanimous_agreement
99748689,6186,"because the 2 functions need to call the third with different `ignorestate` flags. i could consolidate down to 2 functions, but that's allowing an implementation detail to intrude into the public api. this is a part of the api i've struggled with. i don't want to add an ""not applicable"" entry to the `torrentstate` enum, since that's not actually a state. but that means that i don't have a way to say that the icon doesn't actually correspond to a state (required for the `all` filter). hence the 2 public functions calling the private function.",0,-1,0,0.7576216459274292,0.5027472376823425,0.5175637602806091,0.0,accept,majority_agreement
99749199,6186,"what's the advantage? it's still going to then be copied to a new `qstring` to be returned, so there's no efficiency advantage. returning a `qlatin1string` would be incorrect since the `const char *` used to construct it isn't copied - unless we made the literals constants (in which case we could return a `const qstring &`). hmm - could also do that for the colours below.",0,0,0,0.9854127764701844,0.9797832369804382,0.9770520329475404,0.0,accept,unanimous_agreement
99749349,6186,i did that initially but found it to be too complicated. but i thought i'd removed the `&overrideicon` here as i don't think i use it anymore ... let me check.,0,0,0,0.7230449914932251,0.947977900505066,0.988716721534729,0.0,accept,unanimous_agreement
99749484,6186,so that `bittorrent::torrentstate` is a complete type. but i could get around that by the parameter instead being `const bittorrent::torrentstate &` - then a forward declaration would be enough. because `torrentstate` isn't actually an enum as i just realised ...,0,0,0,0.9515700936317444,0.9871897101402284,0.9927588701248168,0.0,accept,unanimous_agreement
99749732,6186,oh - ` ` is out of order - is that what you meant?,0,0,0,0.8735377788543701,0.9652786254882812,0.9617822170257568,0.0,accept,unanimous_agreement
99753709,6186,and i introduced a bug when i fixed up the `#ifdef` stuff so it didn't resize ...,-1,0,0,0.5880565047264099,0.7607434988021851,0.9638622403144836,0.0,accept,majority_agreement
99756353,6186,"not sure how to hook it. `guiiconprovider` doesn't have a parent, so it doesn't seem to receive events. i'm wondering if maybe `mainwindow` should notice `qevent::applicationpalettechange` and then forward it as a `preferences::changed()` signal - or maybe a new `preferences::themechanged` signal.",0,0,0,0.9457520842552184,0.8719692230224609,0.7577680945396423,0.0,accept,unanimous_agreement
99765259,6186,"oh, yes! pardon me, i forgot about the `all` case and overlooked this in the code. thank you for the explanation.",1,1,1,0.9143079519271852,0.7976904511451721,0.9872704744338988,1.0,accept,unanimous_agreement
99786121,6186,"my bad, this is another function.",-1,-1,-1,0.9873725771903992,0.990994155406952,0.9941086769104004,-1.0,accept,unanimous_agreement
99789637,6186,i would catch that event in the application object. like the `preferences::themechanged` signal.,0,0,0,0.9806773066520692,0.9929550290107728,0.9928765892982484,0.0,accept,unanimous_agreement
99789829,6186,"you use a reference to a temporary object, returned from `geticonid()`, don't you?",0,0,0,0.9874650239944458,0.9935205578804016,0.9943174719810486,0.0,accept,unanimous_agreement
99789955,6186,yep.,0,0,0,0.9806315898895264,0.8970574736595154,0.9245200753211976,0.0,accept,unanimous_agreement
99795155,6186,this is wrong in c++. one needs a pointer for this kind of things.,-1,-1,0,0.7313902378082275,0.7432668805122375,0.6126762628555298,-1.0,accept,majority_agreement
99795957,6186,"i was wondering are these function need to be in the class interface. btw, you may make `torrentstate` an `enum class` with explicit underlying type and then forward declare it, eliminating the include.",0,0,0,0.9876571893692015,0.9824888706207277,0.982332408428192,0.0,accept,unanimous_agreement
99797466,6186,"`qstring` constructor converts literals from utf-8, while via `qlatin1string` we specify that the literal is in latin1 encoding, which is more efficient. when we drop qt4, we will replace those with `qlatin1literal`, which will be even more memory efficient.",0,0,0,0.9851977229118348,0.9929435849189758,0.9915539622306824,0.0,accept,unanimous_agreement
99797623,6186,ok then.,0,0,0,0.978338062763214,0.9613435864448548,0.9870026111602784,0.0,accept,unanimous_agreement
99797896,6186,"yes, i understand this. but, you know, a ""larger"" is pointing to enlarging the object but not changing its internal structure.",0,0,0,0.9776474237442015,0.9711130857467652,0.9818972945213318,0.0,accept,unanimous_agreement
99798973,6186,"btw, a c++-ish approach to this would be the following: [code block]",0,0,0,0.9866812229156494,0.9914793968200684,0.9866042733192444,0.0,accept,unanimous_agreement
99924363,6186,"yes - as i updated my comment, i messed this up. a reference is actually usable for it - the problem was referencing (or pointing to) an object that went out of scope ... i've fixed this in my not-yet-pushed version.",-1,0,0,0.978024959564209,0.8609008193016052,0.9826531410217284,0.0,accept,majority_agreement
99926794,6186,"i've gone with the approach of making the literals `static const qlatin1string` and i can then return a `const qlatin1string &` reference. that could open up other optimisations such as having `guiiconprovider::getstatusicon` take a `const qlatin1string &`, but then it would still need to be converted to `qstring` internally (can't store `qlatin1string` in a hash as the `const char *` isn't copied). need to think about this some more.",0,0,0,0.987199366092682,0.9850739240646362,0.9857213497161864,0.0,accept,unanimous_agreement
99927113,6186,"my current prototype does that, except it's caught in `mainwindow::event()` which already existed.",0,0,0,0.9865315556526184,0.9895227551460266,0.9934530258178712,0.0,accept,unanimous_agreement
99927384,6186,`overrideiconid` is gone.,0,0,0,0.9724737405776978,0.9904674887657166,0.9912933707237244,0.0,accept,unanimous_agreement
99927986,6186,i see what you mean though - c++11 `= default`. still catching up on c++11 - much of this stuff wasn't around last time i used c++ (~10 years ago). and it's been over 20 years since i hung around on comp.std.c++ :),1,1,1,0.9595649838447572,0.981819748878479,0.9511684775352478,1.0,accept,unanimous_agreement
99929384,6186,"in c++ a reference can not be reassigned, that is what i wanted to say.",0,0,0,0.9863653182983398,0.961972177028656,0.99183452129364,0.0,accept,unanimous_agreement
99937370,6186,"yes - now i think about it further, which i think was happening is that `operator=()` was being called (hence safe, but no performance advantage). so many potential gotchas in c++ - it's no wonder i prefer python these days :)",1,1,1,0.9540089964866638,0.9922022819519044,0.8884058594703674,1.0,accept,unanimous_agreement
99982764,6186,"please don't over-complicate things... returning qstring is perfectly fine, either it will be optimized out by compiler rvo or it will just change qstring internal pointer, either way no real copy will be performed (if not modified).",0,0,0,0.8487737774848938,0.9786697626113892,0.6732680201530457,0.0,accept,unanimous_agreement
99994303,6186,i'm not a fan of that approach - it makes the call sites messy. i think overloads make more sense in this case.,-1,-1,-1,0.9704900979995728,0.9652222990989684,0.9184303879737854,-1.0,accept,unanimous_agreement
100032607,6186,had not found where this include is used in the code. is it needed at all?,0,0,0,0.9825479388237,0.987514853477478,0.991314709186554,0.0,accept,unanimous_agreement
100068257,6186,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
100068310,6186,`template struct qpair;`,0,0,0,0.9853202700614928,0.9925469756126404,0.9921287298202516,0.0,accept,unanimous_agreement
100072636,6186,does this little tune really belong to the main options page? i would put it into the advanced page (where we have some icons-related settings already).,0,0,0,0.9845660328865052,0.9929909706115724,0.9918251037597656,0.0,accept,unanimous_agreement
100073379,6186,all these new includes are unneeded. you can forward declare these classes and move the includes into the .cpp file.,0,0,0,0.989407241344452,0.991702139377594,0.9953303337097168,0.0,accept,unanimous_agreement
100074078,6186,unused,0,0,0,0.9405757188796996,0.9426007866859436,0.96555495262146,0.0,accept,unanimous_agreement
100165891,6186,whoops - forgot to remove this.,-1,-1,-1,0.8944716453552246,0.9343913793563844,0.943026065826416,-1.0,accept,unanimous_agreement
100166897,6186,leftover from my prototype.,0,0,0,0.9800804853439332,0.9659560918807985,0.9756622910499572,0.0,accept,unanimous_agreement
100166995,6186,leftover from my prototype.,0,0,0,0.9800804853439332,0.9659560918807985,0.9756622910499572,0.0,accept,unanimous_agreement
100167301,6186,"i thought about that, but the transfer list ui options seemed like an obvious place for it. it's about as significant as hiding zero and infinity values imo.",0,0,0,0.974618434906006,0.953725814819336,0.9292531609535216,0.0,accept,unanimous_agreement
100171949,6186,i was thinking that because they were being returned from functions they needed to be complete types. but you can declare functions which accept or return incomplete types. rusty c++. [a link],0,-1,0,0.9774355292320251,0.8532923460006714,0.9830082654953004,0.0,accept,majority_agreement
165281005,8347,disagree. the reports about bugs in upstream are also important.,0,0,0,0.8985734581947327,0.9190948605537416,0.7877249121665955,0.0,accept,unanimous_agreement
165340756,8347,"ok, how about:",0,0,0,0.9784882068634032,0.983559548854828,0.9905439615249634,0.0,accept,unanimous_agreement
165552043,8347,please add bullet point (and maybe boldface) for section titles,0,0,0,0.9679825901985168,0.9930522441864014,0.9943934679031372,0.0,accept,unanimous_agreement
165552094,8347,i would make it larger: `###`,0,0,0,0.9125840663909912,0.989644169807434,0.9913305044174194,0.0,accept,unanimous_agreement
165552385,8347,it's unusual for me to see semicolons here and below,0,0,0,0.9495381116867064,0.9039441347122192,0.9616447687149048,0.0,accept,unanimous_agreement
165552811,8347,"no need for another level, just use 3 spaces for indention, as such: - asking for specific builds of qbittorrent not currently officially available; if you really ...",0,0,0,0.9654127955436708,0.965893805027008,0.9939613938331604,0.0,accept,unanimous_agreement
165552926,8347,why insert 2 more spaces?,0,0,0,0.9555639028549194,0.9515225887298584,0.96174418926239,0.0,accept,unanimous_agreement
165553010,8347,too much empty lines here.,-1,0,-1,0.9154008626937866,0.6333946585655212,0.7045350670814514,-1.0,accept,majority_agreement
165553151,8347,the wiki & forum word can be a link for easier access.,0,0,0,0.98428475856781,0.9784762263298036,0.9928939938545228,0.0,accept,unanimous_agreement
165553378,8347,please add: update your network driver,0,0,0,0.9815394282341005,0.9810807108879088,0.9953404664993286,0.0,accept,unanimous_agreement
165553418,8347,capitalize?,0,0,0,0.9848594069480896,0.9839015603065492,0.992218017578125,0.0,accept,unanimous_agreement
165553533,8347,python word as a link,0,0,0,0.9861272573471068,0.9713574647903442,0.993498921394348,0.0,accept,unanimous_agreement
165553576,8347,and capitalize,0,0,0,0.9782801866531372,0.9727757573127748,0.9906062483787536,0.0,accept,unanimous_agreement
165553609,8347,links please,0,0,0,0.9726081490516664,0.978933334350586,0.9830312728881836,0.0,accept,unanimous_agreement
165554079,8347,first sentence incomplete?,0,0,0,0.7907459735870361,0.9597967267036438,0.9578211307525636,0.0,accept,unanimous_agreement
165554230,8347,"there was a undocumented policy here: do not upload illegal torrents here, but email to sledgehammer999 when he asked.",0,0,0,0.8643261194229126,0.5603535175323486,0.9765841960906982,0.0,accept,unanimous_agreement
165554368,8347,i would remove the boldface to move this point to the bottom of the list.,0,0,0,0.9817997217178344,0.988906741142273,0.9865293502807616,0.0,accept,unanimous_agreement
165554472,8347,"there is usually not a beta around. or say: check on the forum, see if there's already a alpha / beta version with that enhancement.",0,0,0,0.9870835542678832,0.9903742074966432,0.9887291193008424,0.0,accept,unanimous_agreement
165554576,8347,make sure you have consistency with the number of new lines within this document.,0,0,0,0.9785762429237366,0.9888999462127686,0.9914205074310304,0.0,accept,unanimous_agreement
165554615,8347,"double ""list""",0,0,0,0.9820746779441832,0.9872583746910096,0.9938177466392516,0.0,accept,unanimous_agreement
165554846,8347,"do you mean ""what is an actual bug report?"" ?",0,0,0,0.95558363199234,0.9891412258148192,0.9896615743637084,0.0,accept,unanimous_agreement
165555088,8347,enhancements => enhancements,0,0,0,0.9855633974075316,0.9773353338241576,0.9800097346305848,0.0,accept,unanimous_agreement
165555213,8347,this small section applies to all sections and can be placed on top of toc,0,0,0,0.9859722852706908,0.992474377155304,0.9944455623626708,0.0,accept,unanimous_agreement
165617032,8347,"the last sentence is redundant. if a user knows that he'll say it, it's common sense.",0,0,0,0.9302561283111572,0.9225291013717652,0.9471352100372314,0.0,accept,unanimous_agreement
165617390,8347,fix -> fixes,0,0,0,0.9876468181610109,0.9534279704093932,0.966525375843048,0.0,accept,unanimous_agreement
165618244,8347,others might _have_ already implemented your idea and _it_ is waiting to be merged (or _it_ got rejected already).,0,0,0,0.9826622009277344,0.9895631670951844,0.951833426952362,0.0,accept,unanimous_agreement
165621846,8347,"an example of a bad commit message, imo. however, we still don't have rules about it.",-1,-1,-1,0.9535502195358276,0.9384248852729796,0.9747890830039978,-1.0,accept,unanimous_agreement
165732028,8347,this was done to satisfy the linter i used while writing the file: [a link],0,0,0,0.9873730540275574,0.9912821054458618,0.9959927797317504,0.0,accept,unanimous_agreement
165733981,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165734026,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165735355,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165735392,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165735664,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165735759,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165735821,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165737371,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165737424,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165738564,8347,"ok, sentence is now: `the following are _not_ bug reports. **check the wiki, forum or other places for help and support for issues like these**:` also remove trailing `;` in all bullet points",0,0,0,0.9559690952301024,0.982107937335968,0.9901918172836304,0.0,accept,unanimous_agreement
165739291,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165739699,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165739915,8347,"nope, the second part that is capitalized is part of the sentence. is it too awkward?",-1,-1,-1,0.6966097950935364,0.873773455619812,0.7179857492446899,-1.0,accept,unanimous_agreement
165740240,8347,"i can add a rule to state that uploading a `.torrent` file is off limits, but what about linking (torrents and magnet links)? should that be email-only as well?",0,0,0,0.9876173138618468,0.9938780665397644,0.992461621761322,0.0,accept,unanimous_agreement
165740417,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165741580,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165741608,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165741736,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165741829,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165741894,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165742826,8347,another level is more consistent with the style of the rest of the document imo. plus i tried doing as you suggested and my markdown preview did not show it like that.,0,0,0,0.9785706400871276,0.7144249081611633,0.9748600125312804,0.0,accept,unanimous_agreement
165744211,8347,"ok, left at most one blank newline between others, except when absolutely necessary to preserve the wanted style",0,0,0,0.9848462343215942,0.9736868143081664,0.9674713015556335,0.0,accept,unanimous_agreement
165750254,8347,...can't _reproduce_ the problem...,-1,-1,-1,0.7827143669128418,0.6734466552734375,0.7277071475982666,-1.0,accept,unanimous_agreement
165779509,8347,"thanks, done",1,1,1,0.606985330581665,0.9224575757980348,0.8222284913063049,1.0,accept,unanimous_agreement
165804800,8347,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
165805304,8347,"as for the links, there is an alternative syntax in markdown, for example: [code block] --- in action: blah .... [link][link-url] ... [link-url]: [a link]",0,0,0,0.7850669622421265,0.9927102327346802,0.9922467470169068,0.0,accept,unanimous_agreement
165805324,8347,the official forum link is [a link],0,0,0,0.9840997457504272,0.9920329451560974,0.9945604205131532,0.0,accept,unanimous_agreement
165805353,8347,"pardon, i meant capitalize the first word: * restart qbittorrent * restart your pc not the whole sentence.",0,0,0,0.6372013092041016,0.9319332242012024,0.9844584465026855,0.0,accept,unanimous_agreement
165805372,8347,"capitalize the first word, not the sentence.",0,0,0,0.9686542749404908,0.9815034866333008,0.9863983988761902,0.0,accept,unanimous_agreement
165805478,8347,"reproduce requirement is quite strong, some bugs isn't easy to reproduce. or maybe say: report only if you run into the issue with an official stable release, a beta release... afaik there were some bugs in the portableapps.com version and we don't provide support for that.",0,0,0,0.8546589016914368,0.5345536470413208,0.9741289019584656,0.0,accept,unanimous_agreement
165806817,8347,"i disagree; i think we should be explicit in asking for this. providing this information may not be as obvious to non-developers and general users. in the best case, the user reads a superfluous sentence. in the worst, the issue requires a follow up (by one of us) to get this info.",-1,-1,0,0.7720115184783936,0.8378817439079285,0.892415463924408,-1.0,accept,majority_agreement
165806845,8347,do you have a suggestion of a better message? your original comment is neither helpful nor constructive.,-1,0,-1,0.5658438801765442,0.9681273102760316,0.7645796537399292,-1.0,accept,majority_agreement
165807245,8347,"geez, you guys need to learn respect the history, bashing it repetitively won't change anything, that was an example for **""close #xxxx""**, not an example for perfect commit log. and no, please find/write the perfect commit msg yourself. :\",-1,-1,-1,0.9876716136932372,0.9802129864692688,0.9958615899086,-1.0,accept,unanimous_agreement
165808512,8347,"i'm sorry if i offended someone, my intention was not that. what matters is not only that one message is better than another. but the fact that we do not adhere to one specific style in this, and our history looks like a dump. i have several times hinted that it would be nice to have some ""commit messaging"" rules (as part of our coding guidelines). [a link] topic contains some useful reflections on this subject, and we could take it as a basis.",-1,-1,-1,0.9860032200813292,0.9895784258842468,0.9794287085533142,-1.0,accept,unanimous_agreement
165810232,8347,"my apologies, i included you by mistake. my comment was in response to .",-1,-1,-1,0.9646396636962892,0.9834282994270324,0.9677327871322632,-1.0,accept,unanimous_agreement
165812346,8347,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
165812399,8347,"i see, but in that case, isn't it outside the scope of this pr?",0,0,0,0.9805220365524292,0.9904085397720336,0.989651620388031,0.0,accept,unanimous_agreement
165812482,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165812485,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165812755,8347,maybe is right but i have seen many issues that provide this information without being asked.,0,0,0,0.9396719932556152,0.934670388698578,0.971898078918457,0.0,accept,unanimous_agreement
165812979,8347,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
165813194,8347,"but if upgrading to the latest version fixes the bug, then it saves us and the user all the hassle. i think the way the sentence is worded now has a similar meaning to what you propose: `upgrade to latest version; problem still occurs ? file and issue : don't file an issue`. i didn't know about the portableapps.com builds. i will add a clause for that.",0,0,0,0.8434665203094482,0.8543179631233215,0.9633073806762696,0.0,accept,unanimous_agreement
165813883,8347,"i just don't want to see link to commit with incorrect (imo) message as an example of ""how it should be done"". until we have ""commit messaging"" rules.",0,0,0,0.5332010984420776,0.7937568426132202,0.7897337675094604,0.0,accept,unanimous_agreement
165817756,8347,"so should i withdraw the points about commit messages, leave them like they are now, or expand them in this pr?",0,0,0,0.9829134345054626,0.9908431768417358,0.9928693175315856,0.0,accept,unanimous_agreement
165817936,8347,"i would have removed the example, and the rest left as is. wait for other opinions.",0,0,0,0.8784886598587036,0.972046971321106,0.9792391657829284,0.0,accept,unanimous_agreement
165819094,8347,"right. but i don't see what is related to what i said. just to be clear, the ""reproduce"" here means ""able to trigger the bug repetitively"" and this shouldn't be a strong requirement to file an issue (as some bugs ain't easy to trigger). i think you shouldn't put a link to it (to avoid encouragement), just say we don't provide support out of official releases (on windows).",0,0,0,0.8650059700012207,0.7014886736869812,0.9702628254890442,0.0,accept,unanimous_agreement
165829334,8347,"just to be clear, the ""reproduce"" here means ""able to trigger the bug repetitively"" and this shouldn't be a strong requirement to file an issue (as some bugs ain't easy to trigger). i understand, will change. ok",0,0,0,0.960687816143036,0.749332070350647,0.8317457437515259,0.0,accept,unanimous_agreement
166402023,8347,you forgot to remove portableapps-url below.,0,0,0,0.9828432202339172,0.9895718097686768,0.9923874139785768,0.0,accept,unanimous_agreement
166478037,8347,"thanks, done",1,1,1,0.606985330581665,0.9224575757980348,0.8222284913063049,1.0,accept,unanimous_agreement
169185501,8347,ping,0,0,0,0.9714881777763368,0.9308286309242249,0.4991936683654785,0.0,accept,unanimous_agreement
170892902,8347,don't post _public_ or private....?,0,0,0,0.9412207007408142,0.947282373905182,0.9463958740234376,0.0,accept,unanimous_agreement
170893904,8347,"that first ""or"" shouldn't actually be there. fixed",0,0,0,0.9846787452697754,0.9794154167175292,0.9808838367462158,0.0,accept,unanimous_agreement
178922374,8347,please change double empty lines to one empty line and check other places below. imo you are free to squash the commits.,0,0,0,0.8754557371139526,0.9584720730781556,0.9934605360031128,0.0,accept,unanimous_agreement
178930393,8347,i was able to remove some empty lines without affecting the formatting. the others are necessary to maintain the desired layout; see the images below: ![a link] ![a link],0,0,0,0.745091438293457,0.992490828037262,0.9269726276397704,0.0,accept,unanimous_agreement
178930482,8347,is it ok now?,0,0,0,0.9811145663261414,0.9845274686813354,0.9858988523483276,0.0,accept,unanimous_agreement
178932421,8347,"typos: porvide, unoficial",0,0,0,0.9836800694465636,0.9838380813598632,0.9881921410560608,0.0,accept,unanimous_agreement
178932548,8347,"as per [a link] you should change ""fixed"" to ""fix"" (imperative mood and capitalize).",0,0,0,0.9793381690979004,0.9905806183815002,0.990276336669922,0.0,accept,unanimous_agreement
178936411,8347,"thanks, fixed",1,1,1,0.80034339427948,0.8649866580963135,0.7960073947906494,1.0,accept,unanimous_agreement
178936427,8347,"thanks, fixed",1,1,1,0.80034339427948,0.8649866580963135,0.7960073947906494,1.0,accept,unanimous_agreement
179018613,8347,this link points to the incorrect example (`closes ` clause should be in message body). please change it (e.g. [a link],0,0,0,0.9848433136940002,0.992495894432068,0.9937677383422852,0.0,accept,unanimous_agreement
179023281,8347,"yes, ~~btw i've noticed the issue when writing markdown, but never figured it out a solution, thanks!~~",1,1,1,0.9800828099250792,0.9932992458343506,0.9853748083114624,1.0,accept,unanimous_agreement
179024939,8347,"just fyi, see preview on github: [a link]",0,0,0,0.9787313938140868,0.9164277911186218,0.990386128425598,0.0,accept,unanimous_agreement
179025004,8347,its been so long that https has been deployed for this site.,0,0,0,0.9614117741584778,0.98673415184021,0.9695736765861512,0.0,accept,unanimous_agreement
183279316,8347,"seems is quite busy... i can fix this and mine comment and get this pr ready to merge, what do you say?",1,-1,0,0.5077552199363708,0.9766241908073424,0.7466829419136047,,review,no_majority_disagreement
183297894,8347,"i would merge it asap, so please fix it.",0,0,0,0.981795847415924,0.9845410585403442,0.9856871962547302,0.0,accept,unanimous_agreement
324883290,11241,"this ""if"" isn't needed because it's always ""torrent"" here but maybe it has some reason i don't know about?",0,0,0,0.9325900077819824,0.976511538028717,0.9819546937942504,0.0,accept,unanimous_agreement
324886028,11241,"something has to be done with this because it is shown even when `removedirrecursive` is used. i don't really know what ""smartremoveemptyfoldertree"" does so not sure if it should go in `if (tmpremovingtorrentdata.deleteoption == torrentandfiles)`. please advise.",0,0,0,0.9698058366775512,0.9689807891845704,0.9715012311935424,0.0,accept,unanimous_agreement
324969060,11241,`const deleteoption deleteoption` and at other places too.,0,0,0,0.9837851524353028,0.9936721324920654,0.98771995306015,0.0,accept,unanimous_agreement
324969382,11241,"`(const qstring &hash, deleteoption deleteoption = torrent)`",0,0,0,0.987476408481598,0.992785096168518,0.9940127730369568,0.0,accept,unanimous_agreement
324969645,11241,you should always put a `break;` in `case`.,0,0,0,0.9885060787200928,0.9920877814292908,0.9929736852645874,0.0,accept,unanimous_agreement
324972421,11241,i think it is more sensible to rename it to `torrentandrootfolder`.,0,0,0,0.976615309715271,0.9866325855255128,0.9864310622215272,0.0,accept,unanimous_agreement
324973242,11241,not your code but please help us add curly brackets to it and to the `else` cases too.,0,0,0,0.9879350662231444,0.9922263622283936,0.9942176342010498,0.0,accept,unanimous_agreement
324974040,11241,"will this remove folders outside the torrent? for example, a single-file torrent downloaded (without creating sub-folder) to `/my/path/torrent_file` and will this line remove `/my/path`? i hope it won't.",0,0,0,0.9828193783760072,0.99289870262146,0.9839090704917908,0.0,accept,unanimous_agreement
324975308,11241,i don't think `removedirrecursive` is guaranteed to succeed doing its job (currently there is no way to know) and this msg could still be needed. it removes folders and only when they do not contain any files. personally i think showing this log msg is not a very a big issue.,0,0,0,0.7567644119262695,0.9229400753974916,0.9211718440055848,0.0,accept,unanimous_agreement
324976726,11241,(not sure) i think the whole `if (m_removingtorrents.contains(infohash)) {}` isn't needed but the log msg below should be preserved. and this line should be removed too: [a link],0,0,0,0.9850489497184752,0.9931597709655762,0.9862356781959534,0.0,accept,unanimous_agreement
324977171,11241,i use `if (deleteoption == torrent)` here and switch the conditional bodies.,0,0,0,0.9876134395599364,0.9940754175186156,0.9941133856773376,0.0,accept,unanimous_agreement
325024977,11241,coding style or something else?,0,0,0,0.9835276007652284,0.9679762721061708,0.9811453223228456,0.0,accept,unanimous_agreement
325043903,11241,i'm saying you didn't place a `break;` below which you should add it.,0,0,0,0.9577963948249816,0.9820484519004822,0.9834871292114258,0.0,accept,unanimous_agreement
325044110,11241,we need the torrent name which is deleted by now for the msg.,0,0,0,0.9887220859527588,0.993282914161682,0.994192898273468,0.0,accept,unanimous_agreement
325048563,11241,no it won't. it was tested in the original pr and i tested it again to be sure.,0,0,0,0.9825289249420166,0.985451877117157,0.988069474697113,0.0,accept,unanimous_agreement
325051834,11241,"i got that, i'm asking whether it's for coding style or something else.",0,0,0,0.97488933801651,0.9758325815200806,0.9877570867538452,0.0,accept,unanimous_agreement
325053152,11241,it's good practice in case additional cases are added in the future. reduces the likelihood of an error,0,0,0,0.7706623673439026,0.9684139490127563,0.5172051191329956,0.0,accept,unanimous_agreement
325053548,11241,ah ok thanks.,1,1,0,0.5770021080970764,0.8680488467216492,0.5638400912284851,1.0,accept,majority_agreement
325054280,11241,ok swapped.,0,0,0,0.9824830293655396,0.97934091091156,0.9628305435180664,0.0,accept,unanimous_agreement
325054515,11241,we should bump the web api minor version since this value is changing from 2 to 4. so 2.2.0 -> 2.3.0,0,0,0,0.9848511815071106,0.9940113425254822,0.9940145611763,0.0,accept,unanimous_agreement
325054525,11241,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
325057904,11241,i would assign enum values explicitly to be sure they will not change accidentally. then you can also reorder them logically (to keep all delete options together).,0,0,0,0.9884470105171204,0.9911722540855408,0.9935677647590636,0.0,accept,unanimous_agreement
325058447,11241,i would use `enable super seeding for torrent` to match the other options.,0,0,0,0.9882001876831056,0.9937545657157898,0.993821620941162,0.0,accept,unanimous_agreement
325059967,11241,i think these should all be plural (i.e. `pause torrents`) given the sentence `seed torrents until their seeding time...`.,0,0,0,0.985231637954712,0.9913409352302552,0.9853310585021972,0.0,accept,unanimous_agreement
325064144,11241,"i find the differentiation between ""files"" and ""folder"" a bit non-obvious. i had to go back and look at the descriptions in the original pr to figure it out. i don't think ""folders"" and ""folders (force)"" is super obvious either (used in the original pr), but i believe it's the same nomenclature that utorrent uses.",0,0,0,0.9403611421585084,0.961040496826172,0.9529467225074768,0.0,accept,unanimous_agreement
325066272,11241,"sorry, but these changes totally incorrect. core component should know nothing about any top level components and their logic. bittorrent::session should operate with maxratioaction. all mapping should be done where it's needed.",-1,-1,-1,0.981021761894226,0.9906659722328186,0.9892472624778748,-1.0,accept,unanimous_agreement
325079153,11241,"the only reason i changed them is because ""delete torrents + folder"" would look weird imo.",-1,-1,-1,0.9681711792945862,0.867651641368866,0.9688416719436646,-1.0,accept,unanimous_agreement
325080714,11241,"ok, will restore plural form and use ""folders (force)"".",0,0,0,0.9885257482528688,0.9936676621437072,0.9945482611656188,0.0,accept,unanimous_agreement
325082550,11241,"please take your time, wait for other opinions.",0,0,0,0.8334519267082214,0.9234196543693542,0.9703879356384276,0.0,accept,unanimous_agreement
325105327,11241,oh ok,-1,0,0,0.5189074873924255,0.6482736468315125,0.8757970929145813,0.0,accept,majority_agreement
325110510,11241,any appropriate place to make functions for them or i just duplicate the code in optionsdialog and appcontroller?,0,0,0,0.9881247282028198,0.9939782619476318,0.9949500560760498,0.0,accept,unanimous_agreement
325112899,11241,"you don't need to change appcontroller, isn't it? it still should return serialized maxratioaction.",0,0,0,0.9881893396377563,0.9916192293167114,0.9942849278450012,0.0,accept,unanimous_agreement
325225326,11241,"how should it work for torrent that has no root folder? i suppose the main purpose of this option is not only remove torrent root folder but remove torrent with all folders belonging to it regardless of the fact that there are some 3rd party files exist in these folders. when you talk about the root folder, this is just a special case of the above behavior, isn't it?",0,0,0,0.9790380001068116,0.9777055382728576,0.9913771152496338,0.0,accept,unanimous_agreement
325232758,11241,sorry don't know what that means. i mean the following (and the equivalent in optionsdialog) diff [code block],-1,-1,-1,0.988048493862152,0.9887664914131165,0.9916987419128418,-1.0,accept,unanimous_agreement
325234787,11241,just don't touch appcontroller at all.,0,0,0,0.5060585141181946,0.9550123810768129,0.980926275253296,0.0,accept,unanimous_agreement
325236877,11241,also you shouldn't change maxratioaction/setmaxratioaction.,0,0,0,0.9879109859466552,0.9830085635185242,0.9920166730880736,0.0,accept,unanimous_agreement
325255522,11241,"yes you are right, i wasn't aware of the main idea behind it. however the final name should correlate with how we name it in the ui.",0,0,0,0.9764919877052308,0.9390391707420348,0.9853208661079408,0.0,accept,unanimous_agreement
325257457,11241,i see. then the `if ()` isn't necessary.,0,0,0,0.9854468107223512,0.9830563068389891,0.9922640323638916,0.0,accept,unanimous_agreement
325257462,11241,"if i am correct in my assumption of its purpose, it should be called ""delete torrent and folders"" in ui and torrentandfolders here.",0,0,0,0.9846972227096558,0.9883861541748048,0.9922541379928588,0.0,accept,unanimous_agreement
325258479,11241,"from the other side it deletes not only folders (some files can be outside any folder). maybe ""delete torrent, files and folders""?",0,0,0,0.9867782592773438,0.9927423000335692,0.9915803074836732,0.0,accept,unanimous_agreement
325259793,11241,:thumbs_up: this sounds better than other current alternatives.,0,0,1,0.8540647625923157,0.6671046614646912,0.9873175024986268,0.0,accept,majority_agreement
325269924,11241,"ok, i had other concerns. first one. if some torrent has the following structure: `b/c/d/e.txt` and is saved under `/a`. what is the expected behavior under this option? removing folder `/a/b/c/d`? or removing `/a/b`? i suppose it is the latter, right? second. i suspect it is not correct to use `utils::fs::removedirrecursive` to just remove one directory. it should instead remove the top level sub-folders one by one. for example a torrent saved under `/a` (with create subfolder option off) has `b/c/z1.txt`, `d/e/z2.txt`, `z3.txt`. then it should remove `a/b` and `a/d` folders.",0,0,0,0.6811468601226807,0.988985538482666,0.9245343208312988,0.0,accept,unanimous_agreement
325270076,11241,what? i reverted maxratioaction/setmaxratioaction but if i don't do anything in appcontroller it still saves/loads based on index. where am i supposed to do that mapping if not there?,0,0,0,0.984374701976776,0.9057086110115052,0.8853831887245178,0.0,accept,unanimous_agreement
325299960,11241,"yes. as for the rest, what i do know is that this stuff is out of my league and if it's required to do anything other than use `utils::fs::removedirrecursive` then i'll have to abandon ship.",-1,0,-1,0.886336624622345,0.6038984060287476,0.7452088594436646,-1.0,accept,majority_agreement
325320047,11241,"if ""files"" are mentioned people will wonder why this option deletes all files while the other only the torrent's files.",0,0,0,0.9183077216148376,0.9853137135505676,0.959044873714447,0.0,accept,unanimous_agreement
325320755,11241,"well, let's start from the beginning: 1. you need to add some new maxratioaction values. just add it there. you don't need to change anything else (except, of course, the logic that uses these new behaviors). maxratioaction/setmaxratioaction is still correct (if you didn't change internal values of existing maxratioaction values). also appcontroller is still valid since it send expected values for previously existing maxratioactions. 2. you need to add appropriate options in gui/webui. previously they use simplified way of using internal maxratioaction representation. now you don't want to use it since it causes unwanted order of options in appropriate controls. so you need to define some mapping between maxratioaction serialized representation values and ui representation values (in gui and webui).",0,0,0,0.974965274333954,0.9821593165397644,0.975159764289856,0.0,accept,unanimous_agreement
325323032,11241,"in fact, we often use some more or less simplified methods. if you like, i can describe this part of the logic to you from a general point of view.",0,0,0,0.9814323782920836,0.9769641757011414,0.9913299083709716,0.0,accept,unanimous_agreement
325341983,11241,could you point me to a few of them? please do.,0,0,0,0.9810969829559326,0.986072301864624,0.9879422783851624,0.0,accept,unanimous_agreement
325391328,11241,"if the following is correct for the gui, where do i do it for the webui? diff [code block]",0,0,0,0.987304151058197,0.9941125512123108,0.9950703382492064,0.0,accept,unanimous_agreement
325470762,11241,the first mapping is correct. the second one should be `qhash `. lookup for key is slow.,0,0,0,0.9678271412849426,0.9864760041236876,0.950817883014679,0.0,accept,unanimous_agreement
325475812,11241,"just assign appropriate values to ""option"" elements. isn't it enough?",0,0,0,0.9869624972343444,0.9895840287208556,0.9945114850997924,0.0,accept,unanimous_agreement
325481131,11241,"imo, this option raised more questions than answers from the very beginning. why is it even necessary? why should qbittorrent delete unrelated files? it looks like the original author just wanted to inject something subjective into the app's features. i still think ""delete torrent and files"" is the only thing that most affected users lack.",0,0,-1,0.7212734818458557,0.9485440850257874,0.8685939908027649,0.0,accept,majority_agreement
325485878,11241,"imo we shouldn't care about unrelated files, this way we can maintain less. after re-reading the reason in [a link] i agree with you. there are other ways to achieve what he wants and doesn't need this option. seems so, none of the issues in the opening post mentioned this option. i would suggest that we drop this option for now, it will be easier to finish this pr and we can pick it up later if some stronger/more valid arguments comes in.",0,0,0,0.7780123949050903,0.824445366859436,0.9231823086738586,0.0,accept,unanimous_agreement
325666424,11241,"it looks like the original author just wanted to inject something subjective into the app's features. i still think ""delete torrent and files"" is the only thing that most affected users lack. personally i don't care about it in the ratio options but if this option was available in regular delete, it would be the only option i would use. there is never a time i want to keep foreign stuff in the torrent folder. don't tell me you guys want to drop it only because of the name? if it's also because of `utils::fs::removedirrecursive` not being appropriate for it then ok. in any case here's another suggestion: ""delete torrents and their files"" ""delete torrents and their folder"".",-1,0,-1,0.9286430478096008,0.8827440142631531,0.4768050611019134,-1.0,accept,majority_agreement
325670083,11241,"omg this was the first thing i tried but i thought it didn't work... guess i forgot to restart qbt after compile. anyway, what doesn't work is preselecting the right index in the webui combobox when opening options. i'm trying to see if i can figure a way to do it in preferences.html but i don't know html and i'm not succeeding so far.",-1,-1,0,0.7986654043197632,0.705429196357727,0.6060842871665955,-1.0,accept,majority_agreement
325675958,11241,[a link] here is affected place. not sure if you can select `option` by `value` attribute value. then you have to perform mapping manually.,0,0,0,0.9770464301109314,0.988195300102234,0.9834961891174316,0.0,accept,unanimous_agreement
325678793,11241,"then why do you put ""foreign stuff"" there? i can't understand how it can come there under normal use?",0,0,0,0.837131142616272,0.9281848669052124,0.975887417793274,0.0,accept,unanimous_agreement
325683623,11241,"i still prefer singular form. the meaning is ""when (some) torrent reaches seeding time limit pause (delete etc.) it"". plural form sounds like ""when (several/all) torrents reache seeding time limit pause (delete etc.) them"" which is incorrect, imo.",0,0,0,0.8284134268760681,0.8647239804267883,0.9480026364326476,0.0,accept,unanimous_agreement
325689255,11241,"for me, that has nothing to do with the main reason (which is mentioned in my first sentence [a link]. this is part of the reason (for me), albeit a minor one. btw, i also found a bug (unrelated to this pr) that qbt will remove user created empty folders when using `shift + del` to remove torrent which should not happen.",0,0,0,0.9372420907020568,0.962504506111145,0.9758920669555664,0.0,accept,unanimous_agreement
325713829,11241,"ok i'll drop it. i can't understand how it can come there under normal use? temp stuff e.g. unzipped, subtitles etc.",0,0,0,0.9691935777664183,0.9684479236602784,0.931899905204773,0.0,accept,unanimous_agreement
325766017,11241,it's not changed after all.,0,0,0,0.9320740699768066,0.9515841007232666,0.9701655507087708,0.0,accept,unanimous_agreement
325774710,11241,thanks.,0,1,0,0.5150366425514221,0.5804154276847839,0.5270382761955261,0.0,accept,majority_agreement
326479629,11241,you should use the following: [code block],0,0,0,0.9865947961807252,0.9906156659126282,0.9959281086921692,0.0,accept,unanimous_agreement
326480000,11241,"here the mapping is duplicated, maybe you should move the mapping to the anonymous namespace at top of the file.",0,0,0,0.988937258720398,0.9895436763763428,0.9897436499595642,0.0,accept,unanimous_agreement
326482941,11241,"no, it is reversed here.",0,0,0,0.972350299358368,0.988397777080536,0.9891312122344972,0.0,accept,unanimous_agreement
326484140,11241,ok forget it.,0,0,0,0.8788298964500427,0.9640007019042968,0.9499059319496156,0.0,accept,unanimous_agreement
326584404,11241,"thanks, changed but i'm waiting for any more changes before i push again.",0,1,1,0.7465927004814148,0.8282960653305054,0.6620296239852905,1.0,accept,majority_agreement
326592509,11241,why did you remove this condition?,0,0,0,0.950203776359558,0.9791146516799928,0.9939864873886108,0.0,accept,unanimous_agreement
327052491,11241,are you sure? did you test it?,0,0,0,0.9786336421966552,0.9906991124153136,0.9924197793006896,0.0,accept,unanimous_agreement
327063705,11241,"i see the problem now, when the `if ()` here is omitted it *might* produce duplicated/confusing log messages, that is this message here and the ones in `session::handletorrentdeletedalert` & `session::handletorrentdeletefailedalert`. it should be tested.",0,0,0,0.986425757408142,0.9915332198143004,0.9810092449188232,0.0,accept,unanimous_agreement
327169240,11241,it should be reverted here since it's not part of this job.,0,0,0,0.9702017903327942,0.981581449508667,0.9831556081771852,0.0,accept,unanimous_agreement
327190595,11241,"it should be reverted anyway... didn't know that this alert was posted when also deleting the files and as a consequence of removing this `if ()`, the torrent's hash would be removed from `m_removingtorrents` and the stuff in `handletorrentdeletedalert/handletorrentdeletefailedalert` would never be executed. whew thanks for catching this.",1,1,1,0.9818536639213562,0.8098884224891663,0.9608802795410156,1.0,accept,unanimous_agreement
327325585,11241,reverted.,0,0,0,0.8778582215309143,0.9610875844955444,0.9197385907173156,0.0,accept,unanimous_agreement
327325777,11241,changed.,0,0,0,0.9753402471542358,0.9758284687995912,0.9680466055870056,0.0,accept,unanimous_agreement
327432741,11241,"maybe i'm completely wrong, but it should be like this = [code block] since it like that here = [code block]",-1,0,0,0.6777262091636658,0.9495683908462524,0.8805289268493652,0.0,accept,majority_agreement
327446274,11241,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
327457969,11241,do you mind also changing the webui? shouldn't be hard.,0,0,0,0.9597568511962892,0.7324321269989014,0.9924753308296204,0.0,accept,unanimous_agreement
327499899,11241,i knew this would be super confusing to someone who sees this without context... i'll leave a comment above the enum.,-1,-1,-1,0.9382145404815674,0.9241950511932372,0.938937246799469,-1.0,accept,unanimous_agreement
327501086,11241,oops totally forgot that.,-1,-1,-1,0.9810980558395386,0.9866504669189452,0.984702169895172,-1.0,accept,unanimous_agreement
328432446,11241,maybe combine them since `deletefiles` variable isn't much of use: [code block],0,0,0,0.9865900278091432,0.992500364780426,0.9919968247413636,0.0,accept,unanimous_agreement
328432651,11241,"not your code but since we are at it, i will change to `const bittorrent::torrenthandle *torrent`",0,0,0,0.97891366481781,0.9866909980773926,0.9929218888282776,0.0,accept,unanimous_agreement
328432736,11241,here,0,0,0,0.9784635901451112,0.9411950707435608,0.940010666847229,0.0,accept,unanimous_agreement
328432754,11241,and here,0,0,0,0.9779892563819884,0.968537986278534,0.9837828278541564,0.0,accept,unanimous_agreement
328442350,11241,"please don't add any dependencies from ui (or other client components), even in comments.",0,0,0,0.9697052836418152,0.9882841110229492,0.9786296486854552,0.0,accept,unanimous_agreement
328443400,11241,"suffice it to mention that the values of the enum items should remain unchanged when adding (inserting) new ones, so as not to break the existing user settings.",0,0,0,0.9875094294548036,0.9889756441116332,0.9917043447494508,0.0,accept,unanimous_agreement
328550150,11241,all done.,0,0,0,0.9703757166862488,0.9746243953704834,0.9762905836105348,0.0,accept,unanimous_agreement
328550267,11241,changed.,0,0,0,0.9753402471542358,0.9758284687995912,0.9680466055870056,0.0,accept,unanimous_agreement
360037341,11708,if we want to be totally const correct this should be `const qstyle *const style = blah`,0,0,0,0.6179948449134827,0.987790584564209,0.940811574459076,0.0,accept,unanimous_agreement
360044903,11708,"is that really what you want? i'm not that paranoid... so if you don't insist too much, i'd rather not go to extremes.",0,-1,0,0.4992625415325165,0.8399497270584106,0.5047528743743896,0.0,accept,majority_agreement
360059651,11708,does this mean it will show nothing if torrent was inactive for >100 days?,0,0,0,0.9739121198654176,0.9722342491149902,0.9859747290611268,0.0,accept,unanimous_agreement
360063329,11708,i don't know :s but doesn't the same logic apply for when we do `const` for non-pointers?,0,-1,1,0.9632065296173096,0.9543229937553406,0.6540090441703796,,review,no_majority_disagreement
360071277,11708,"it is dangerous to have write access for any pointer, so we use `const int *a;`. and it is *relatively* safe to read from any pointer address, thus (in my viewpoint) fixing a pointer address would be good but isn't strictly required (as it is not so hard to spot the code reassigning a pointer to another address).",0,0,0,0.792939305305481,0.8712331056594849,0.9883081316947936,0.0,accept,unanimous_agreement
360113702,11708,yeah. disregard my comment. i was reading the consts wrong. i forgot you essentially have to read them right-to-left in a pointer situation.,-1,-1,-1,0.9519832730293274,0.8066158294677734,0.8174766898155212,-1.0,accept,unanimous_agreement
360233059,11708,i didn't touch this logic. i just moved things into appropriated place.,-1,0,0,0.5912023186683655,0.9665572047233582,0.9820804595947266,0.0,accept,majority_agreement
360309865,11708,oops,-1,-1,0,0.8822687864303589,0.9215677976608276,0.6581283807754517,-1.0,accept,majority_agreement
360654974,11708,`const int column`,0,0,0,0.9857746362686156,0.9896370768547058,0.9939444661140442,0.0,accept,unanimous_agreement
360655056,11708,"since it returns something, it is better to explicitly write it out: [code block] this also applies to below similar lambdas.",0,0,0,0.9868212342262268,0.9852330088615416,0.9946581721305848,0.0,accept,unanimous_agreement
360655157,11708,"this is a little deep, i would use `if()` here.",0,0,0,0.980994462966919,0.9715498089790344,0.920466423034668,0.0,accept,unanimous_agreement
360655193,11708,please add parentheses after `:` i would also move the `else` case to another line.,0,0,0,0.9871600866317748,0.9937599301338196,0.99539315700531,0.0,accept,unanimous_agreement
360655204,11708,i would use `if()` here.,0,0,0,0.9874488711357116,0.993047297000885,0.9929147958755492,0.0,accept,unanimous_agreement
360655246,11708,`'*'` or `qlatin1char('*')`,0,0,0,0.9859994053840636,0.9901505708694458,0.9913241863250732,0.0,accept,unanimous_agreement
360655334,11708,you can strip the first parentheses pair.,0,0,0,0.9873688817024232,0.9894288182258606,0.9936283230781556,0.0,accept,unanimous_agreement
360655356,11708,"`qlatin1string(""100%"")`",0,0,0,0.984752118587494,0.9901517033576964,0.9931740164756776,0.0,accept,unanimous_agreement
360655384,11708,"`const int column, const bool alt`",0,0,0,0.98335599899292,0.9918678402900696,0.9932898879051208,0.0,accept,unanimous_agreement
360655443,11708,would just `return torrent->tags().values()` work here?,0,0,0,0.9878949522972108,0.9944012761116028,0.9933289289474488,0.0,accept,unanimous_agreement
360655508,11708,`(qt::userrole + 1)`,0,0,0,0.9831551313400269,0.990273416042328,0.9937189817428588,0.0,accept,unanimous_agreement
360655517,11708,can you define a constant/field name for `qt::userrole + 1`?,0,0,0,0.988913595676422,0.994521141052246,0.995538890361786,0.0,accept,unanimous_agreement
360655524,11708,"`(m_statusstrings[state] + "": "" + errormessage)`",0,0,0,0.9879359006881714,0.991957426071167,0.9932439923286438,0.0,accept,unanimous_agreement
360655583,11708,`const int sortcolumn`,0,0,0,0.9860806465148926,0.9904226064682008,0.9933932423591614,0.0,accept,unanimous_agreement
360655765,11708,i would prefer: [code block] and then use const references for `left` & `right` function parameters.,0,0,0,0.9878859519958496,0.9926111102104188,0.99428528547287,0.0,accept,unanimous_agreement
360661102,11708,"do you have a prejudice against such a notation? it's valid. i agree, it does not make sense in the general case. but when we need to call void function immediately followed by return statement, i find it very convenient to write `return voidfunction();`. in addition, it makes all similar ""delegation to another function"" cases look uniform.",0,0,0,0.9645955562591552,0.9454558491706848,0.9432002305984496,0.0,accept,unanimous_agreement
360661175,11708,return type deduction confuses you generally or in some special cases?,0,0,0,0.958120584487915,0.9024994373321532,0.9561138153076172,0.0,accept,unanimous_agreement
360661236,11708,then parentheses will have no meaning (at least for me).,0,0,0,0.946009397506714,0.931056022644043,0.9651009440422058,0.0,accept,unanimous_agreement
360661273,11708,ternary operator doesn't allow different types.,0,0,0,0.9522554874420166,0.902132511138916,0.9683315753936768,0.0,accept,unanimous_agreement
360662697,11708,for me it doesn't make sense in every cases.,-1,0,-1,0.6778569221496582,0.5066217184066772,0.552212655544281,-1.0,accept,majority_agreement
360662729,11708,"no, you write it out so the compiler could check for you if you returned the correct type and not something else.",0,0,0,0.9857719540596008,0.9897195100784302,0.987810492515564,0.0,accept,unanimous_agreement
360663073,11708,just different subjective opinions... so if you want to never use some kind of statement we need discuss it to forbid in our coding guidelines.,0,-1,0,0.8322469592094421,0.5872334241867065,0.8867650628089905,0.0,accept,majority_agreement
360663214,11708,"i trust myself in such trivial cases. but i will change this to make others feel safer ""under compiler protection"". the same goes for your comments about ""const"" in function parameters.",0,0,0,0.7273432016372681,0.7976247668266296,0.8721089959144592,0.0,accept,unanimous_agreement
360663310,11708,no. it returns `qlist ` that isn't implicitly convertible to qstringlist.,0,0,0,0.985883891582489,0.9815836548805236,0.98824280500412,0.0,accept,unanimous_agreement
360663375,11708,isn't it readable enough?,0,0,0,0.9748477935791016,0.9855581521987916,0.9915025234222412,0.0,accept,unanimous_agreement
360663444,11708,i wouldn't try to push to the extreme just to satisfy my taste if i were you but let us also hear what others think.,0,-1,0,0.8472124338150024,0.6655156016349792,0.8799858093261719,0.0,accept,majority_agreement
360663445,11708,isn't it structured enough?,0,0,0,0.9722246527671814,0.9900746941566468,0.9857875108718872,0.0,accept,unanimous_agreement
360663560,11708,"at least consider moving it to another line, easier to read (for me).",0,0,0,0.9631956815719604,0.9903186559677124,0.9766498804092408,0.0,accept,unanimous_agreement
360663695,11708,"even if that is true, this is a public project and others might trip over. thank you your majesty.",1,1,1,0.8808488249778748,0.9796598553657532,0.7623315453529358,1.0,accept,unanimous_agreement
360682660,11708,"btw, in case of lambda return type compiler will say you about something wrong anyway (e.g. in place where you call it). just for fun. how many times have we (qbittorrent project) encountered, for example, this terrible problem of ""unintentional variable change"" (before you start insisting on `const` everywhere)?",-1,-1,-1,0.5316022038459778,0.3965399861335754,0.5571858286857605,-1.0,accept,unanimous_agreement
360682744,11708,"yes, i can. then i should also do it for userrole too.",0,0,0,0.9785022735595704,0.9837559461593628,0.9910736680030824,0.0,accept,unanimous_agreement
360683145,11708,"yes, but that error message won't be pointing the fault at the lambda which is less correct. can't be sure, however when a variable is marked const it is greatly easier to track its state without worrying it has changed over a bunch of code. and btw, in rust language, every variable is const by default unless you explicitly add `mut` to it.",0,0,0,0.9804105162620544,0.9569911360740662,0.9790245294570924,0.0,accept,unanimous_agreement
360688077,11708,"it's good. but in c++ you're making me do extra low-effeciency work (add a bunch of ""const"" modifiers). but in many cases it's just a couple of lines (passing to another function or return statement) so i don't feel it's so serious that i can develop a habit to blindly add const everywhere. you'll have to remind me of that.",1,0,1,0.6712972521781921,0.6034780144691467,0.8553606867790222,1.0,accept,majority_agreement
360688182,11708,"lambda can be either correct or no. in first case compiler points to error in place of its incorrect use, in the second one compiler points to error in lambda. i don't understand what's the problem you worry about.",0,0,0,0.6395696997642517,0.5805767178535461,0.687129557132721,0.0,accept,unanimous_agreement
360691969,11708,"at the cost of you spent at most 2 more mins and ease other developers mind set reading your code... and you think it isn't worth it. funny. don't worry, i will. the same as you would write `auto somefunc() {}`. i think you should start writing in that way (automatic return type deduction since c++14). /s but seriously i can't understand why you would expect the lambdas to return other types than `qstring` here and also why merely adding `qstring` would lead to this much resistance? if you really think your code is just superior for everyone, then just say it! i'll blindly press the approve button for all of your pr from now on. i think i'll do selective review for project's pr from now on. i.e. no need to wait for me for prs that i didn't comment.",-1,-1,-1,0.3980244398117065,0.8591408133506775,0.9039390683174132,-1.0,accept,unanimous_agreement
360699906,11708,"no, that's why i'm discussing it. but if you take my arguments as a personal insult (if you really think your code is just superior for everyone), i will not continue this discussion and simply apply your recommendations. well, that will certainly help the project. many prs have every chance of never being merged if they have to wait for review. if this applies to my prs only, then it will be easier for me to stop them altogether (hopefully this is not what you're after). when i start discussing something, i want to learn something new for myself or correct my misconception (and do the same for an opponent). but it was never my purpose to offend anyone. so let's keep working on the project the way it's best for it.",-1,0,0,0.6761608719825745,0.5051527619361877,0.4962192475795746,0.0,accept,majority_agreement
360702606,11708,", pr updated. i hope i have corrected all my ""mistakes"".",0,1,1,0.9119296073913574,0.8315356969833374,0.9548199772834778,1.0,accept,majority_agreement
360725319,11708,"imo, since we can do: [code block] i can't find a particular reason to object to the same thing being done for function returning void. although i do agree that it looks rather weird.",-1,-1,-1,0.950863480567932,0.9761613011360168,0.9116681814193726,-1.0,accept,unanimous_agreement
360725510,11708,~i understand that you already pushed the change to the lambda. but shouldn't this be better addressed by **not** using `auto` in this case? the compiler would complain if the lambda didn't return a `qstring` object **and** the reader would know what the type of the variable is.~ sorry this was dumb comment.,-1,-1,-1,0.99055415391922,0.9911525845527648,0.9939365983009338,-1.0,accept,unanimous_agreement
360725612,11708,"are we even allowed to do that? i mean, sure, the language allows us to do that, but don't we run the risk of breaking in the future (assuming another qt release adds a role that uses that number).",0,0,0,0.9783292412757874,0.982301950454712,0.8825315237045288,0.0,accept,unanimous_agreement
360729161,11708,"ignore my previous comment. but, imo, it is too much to require to explicitly declare a return type for such small function. and any possible mismatch will be realized the moment we try to assign the return type to a 'qstring` and the compiler throws an error.",0,0,0,0.8324564695358276,0.9267032742500304,0.96002596616745,0.0,accept,unanimous_agreement
360756618,11708,"but you write out the exact return type for normal functions instead of plugging `auto` in there and why is that? and then trace the error back to the faulty lambda, why not just specify the type at lambda instead and compiler will point to the exact line that cause the error? (i'm talking about general cases) i may be a little inconsistent on this: for pod types i might not feel strongly the need to write it out, but for more complex types such as qt containers i think it is a must.",0,0,0,0.6290590167045593,0.6602609753608704,0.975286304950714,0.0,accept,unanimous_agreement
360883258,11708,"actually you may be right. for me it is about readability. so yeah, in lambas the compiler might be able to deduce types and eventually error out, but when a developer reads the lambda he should be able to know the return type from the signature, and not mentally parse the lambda body to understand what type is returned. almost same reason why we use `auto` [a link] in variable types",0,0,0,0.9360435605049132,0.8880090117454529,0.9812749028205872,0.0,accept,unanimous_agreement
360883337,11708,my previous comment may not be so important.,0,-1,0,0.8414463400840759,0.5058118104934692,0.9611371755599976,0.0,accept,majority_agreement
361243332,11708,"can you test if `lupdate` picks up the strings from this construct? if yes, just go ahead with the merge.",0,0,0,0.9888502955436708,0.993025541305542,0.995637595653534,0.0,accept,unanimous_agreement
361246104,11708,"curious, but why didn't you make this a lambda too?",0,0,0,0.8888764381408691,0.5339158177375793,0.9686041474342346,0.0,accept,unanimous_agreement
361246424,11708,"these 2 should be `return unitstring(torrent->uploadpayloadrate(), true);`",0,0,0,0.9868707060813904,0.9926551580429076,0.9957048296928406,0.0,accept,unanimous_agreement
361248419,11708,shouldn't we consider right-to-left locales? (aka reverse this?),0,0,0,0.9695753455162048,0.9931962490081788,0.9917439818382264,0.0,accept,unanimous_agreement
361248478,11708,i think this can be simplified to `newopt.text = index.data().tostring()`,0,0,0,0.9844547510147096,0.9890611171722412,0.9875471591949464,0.0,accept,unanimous_agreement
361256743,11708,i found this: `qt::alignabsolute` in [a link] so maybe it is already handled by qt? warrants a test to find out.,0,0,0,0.9879547357559204,0.994333028793335,0.9932584762573242,0.0,accept,unanimous_agreement
361267148,11708,leftover... changed.,0,0,-1,0.8293583989143372,0.9247894883155824,0.5202767252922058,0.0,accept,majority_agreement
361267439,11708,thank you. fixed!,1,1,1,0.9754047989845276,0.9943060278892516,0.9913151860237122,1.0,accept,unanimous_agreement
361267518,11708,i wouldn't want to touch it in this pr.,-1,0,0,0.4986254870891571,0.7099851369857788,0.5541924834251404,0.0,accept,majority_agreement
361268273,11708,:thumbs_up: fixed.,0,0,1,0.968038022518158,0.985926628112793,0.961927592754364,0.0,accept,majority_agreement
361280915,11708,maybe preserve the code comment?,0,0,0,0.9847950339317322,0.9918891787528992,0.99105703830719,0.0,accept,unanimous_agreement
361300890,11708,"most of the changes in this file belong conceptually to the previous commit. however, i am not insisting on changing this.",0,0,0,0.9127653241157532,0.9519412517547609,0.9844500422477722,0.0,accept,unanimous_agreement
361300944,11708,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
361304281,11708,i found a discrepancy here. notice this sample code: [code block] `i` holds the value 99. `var.toint()` returns value of 100.,0,0,0,0.988075077533722,0.9874637126922609,0.9928574562072754,0.0,accept,unanimous_agreement
361315200,11708,oops... i never test it. i thought it rounds in the same way (just performs static_cast). will change back.,-1,-1,-1,0.9741646647453308,0.9147788286209106,0.7762060165405273,-1.0,accept,unanimous_agreement
361315450,11708,"sorry, what do you mean exactly? the second commit includes only changing from qitemdelegate to qstyleditemdelegate and some code/style cleanups (including this one).",-1,-1,-1,0.982014000415802,0.9809151887893676,0.9798827767372132,-1.0,accept,unanimous_agreement
361317034,11708,"pragma/explicit/q_disable_copy could go to the previous commit, like it is done for the sort model (iirc). but it is ok. i am bothered to much by this.",-1,0,-1,0.9744846224784852,0.7905192971229553,0.9478676915168762,-1.0,accept,majority_agreement
361384237,11708,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
361470602,11708,this change surely belongs to the previous commit.,0,0,0,0.9863370060920716,0.9875861406326294,0.9822360277175904,0.0,accept,unanimous_agreement
361514823,11708,moved there.,0,0,0,0.9800971150398254,0.9853128790855408,0.9860351085662842,0.0,accept,unanimous_agreement
361591471,11708,"it is incorrect to put lambda in direct correspondence with the regular function. often the function signature is the only thing available (at least easily available). its implementation can be in another file, library, or available only in binary form. lambda was created primarily for ""inplace"" use, so that excessive detail here only reduces readability. if it is quite complex/large, then this is a good reason to turn it into regular function. almost same reason why we use auto sparingly in variable types personally i don't see any problems with identifying the return type in the lambda like the following: [code block] imo, it's better than the following ""readable"" signature: [code block]",0,0,0,0.9028719663619996,0.9409897327423096,0.9593095779418944,0.0,accept,unanimous_agreement
549009552,14054,"imho using timepoints seems a better idea, for example, previously 6-hour and 12-hour graphs were using the same resolution i.e 72 (divider_6hour == divider_12hour). using time points solves such bugs from happening.",0,0,0,0.97939270734787,0.9902412295341492,0.9566513895988464,0.0,accept,unanimous_agreement
549014551,14054,please do not mix the initialization styles.,0,0,0,0.9248685836791992,0.9683371782302856,0.9513786435127258,0.0,accept,unanimous_agreement
549014738,14054,please don't use post increment unless you really require it.,0,0,0,0.9466310739517212,0.9768585562705994,0.977268636226654,0.0,accept,unanimous_agreement
549020395,14054,it doesn't make any sense... why do you assign the same capacity that it already has?,-1,0,-1,0.6755117774009705,0.5758150219917297,0.8652004599571228,-1.0,accept,majority_agreement
549020980,14054,why do you still need to wrap it inside struct?,0,0,0,0.964949369430542,0.9739980697631836,0.990584433078766,0.0,accept,unanimous_agreement
549021257,14054,why such perversions? why not just `int m_counter = 0;`?,0,0,0,0.8679733872413635,0.9867536425590516,0.9845995306968688,0.0,accept,unanimous_agreement
549678933,14054,"iirc, there were some conflicts with `moc` and `boost/circular_buffer.hpp` header, so it was placed under this guard. i don't see the point in adding these new headers under this guard too. btw, perhaps it is no longer required at all.",0,0,0,0.9841517210006714,0.9476714134216307,0.9844242930412292,0.0,accept,unanimous_agreement
549680317,14054,"i think this make moc bit faster,",0,0,0,0.9737935066223145,0.5336384773254395,0.9644849896430968,0.0,accept,unanimous_agreement
549681067,14054,"i think we can/should use such std types directly (w/o aliases). of course, we can use it without full qualification, i.e.: [code block] ?",0,0,0,0.9858236312866212,0.9887542724609376,0.9899499416351318,0.0,accept,unanimous_agreement
549681726,14054,"inconsistent names of struct and its fields. i would expect to see `x,y` if it is `point`.",0,0,0,0.9258418083190918,0.9843685030937196,0.9773200750350952,0.0,accept,unanimous_agreement
549720843,14054,"wouldn't it be easier to have separate averagers for 1 and 5 min graphs? is there a real gain in sharing the same averager, but at the same time complicating it internally?",0,0,0,0.9442429542541504,0.9799407124519348,0.9674198627471924,0.0,accept,unanimous_agreement
549723170,14054,"no, this doesn't complicate anything imo, only place where it has any effect is this [a link] but that equation will be required anyway, plus since this pr improves the resolution for the 6-hour graph so, i was thinking of re-using the 6-hour averager to add a 3-hour graph by using `averager::setcurrentmaxduration`",0,0,0,0.9536784291267396,0.9672852158546448,0.9904072880744934,0.0,accept,unanimous_agreement
550167267,14054,"really? the presence of both `max duration` and `current max duration` in averager logic, makes it confusing. but most importantly, what is the advantage of this approach? why not just have a dedicated averager for each used interval?",0,-1,-1,0.7982197403907776,0.5119574069976807,0.8572700619697571,-1.0,accept,majority_agreement
550168721,14054,"i don't think it's really supposed to be used for this purpose. at least i don't recall that qt recommended enclosing all third-party inclusions in such a guard. seems it's just exceptional case when moc conflicts with some headers. , have you to say something about it?",0,-1,0,0.9554044604301452,0.5791467428207397,0.9616174101829528,0.0,accept,majority_agreement
550170659,14054,i would rename them: 1. pointdata -> sampledata 2. graphdata -> sample 3. y -> data,0,0,0,0.9755266308784484,0.9926223754882812,0.9915192723274232,0.0,accept,unanimous_agreement
550172041,14054,"let's call things more explicitly. otherwise, we have in the code a bunch of ""data"", ""current data"", etc., which actually refer to completely different things. so maybe call it `m_currentaverager`?",0,0,0,0.9846038222312928,0.9885076284408568,0.9869806170463562,0.0,accept,unanimous_agreement
550174682,14054,"can you explain in simple words what `viewablepointscount` is supposed to mean? what exactly does `viewable` mean in it? and why is it that the averager, which appears to be a computational and accumulative helper, is responsible for something related to `viewing`?",0,0,0,0.9826791286468506,0.9922933578491212,0.9923003911972046,0.0,accept,unanimous_agreement
550177846,14054,"again this jumble of similar names? what kind of `push` is meant? after all, it is resetted at the moment when the next sample is added. wouldn't it be clearer if you called it `m_lastsampletime`?",0,0,0,0.9834170937538148,0.9825220108032228,0.8361215591430664,0.0,accept,unanimous_agreement
550209138,14054,"with this you don't need to have another array for storing the values, saving memory, and then you don't have to run the average on every stat update, saving cpu resources.",0,0,0,0.98307067155838,0.970613956451416,0.9922035932540894,0.0,accept,unanimous_agreement
550213869,14054,"why then, based on the same assumptions, not have only one averager? what is the line that separates these cases?",0,0,0,0.9361050724983216,0.9702829122543336,0.9844977259635924,0.0,accept,unanimous_agreement
550215650,14054,"resolution (after how much duration averager averages) [a link] this increases with the duration of the target time period, it's a trick to decrease the memory usage. so 24-hour averager will accumulate data till the elapsed time < resolution {144s) and the average it and push it in the data queue [a link]",0,0,0,0.9797500371932985,0.9782705307006836,0.9945845007896424,0.0,accept,unanimous_agreement
550220881,14054,"i'm not familiar with it, probably best not relying on it whenever possible...",-1,-1,-1,0.8855176568031311,0.8090355396270752,0.5005605220794678,-1.0,accept,unanimous_agreement
550970604,14054,"this was used to guess the full size of the buffer when max duration is reached, on the latest push i've made the speedplotview fully duration based, removing the need for this function.",0,0,0,0.9882521033287048,0.99198979139328,0.9939354062080384,0.0,accept,unanimous_agreement
551324346,14054,it seems that now all these duration\_\* constants unambiguously correspond to the chrono literals with which they are set. i don't see the point of having them anymore. why not just use appropriate chrono literals directly?,0,0,0,0.9242167472839355,0.9480394721031188,0.947668731212616,0.0,accept,unanimous_agreement
551325531,14054,`std::min`?,0,0,0,0.9830744862556458,0.9940019249916076,0.9933265447616576,0.0,accept,unanimous_agreement
551330325,14054,`std::max`?,0,0,0,0.9856169819831848,0.9937121868133544,0.993069350719452,0.0,accept,unanimous_agreement
551332900,14054,`const datacircularbuffer &queue`,0,0,0,0.9863726496696472,0.990577220916748,0.9928966164588928,0.0,accept,unanimous_agreement
551335637,14054,`const datacircularbuffer &queue`,0,0,0,0.9863726496696472,0.990577220916748,0.9928966164588928,0.0,accept,unanimous_agreement
551337437,14054,please leave only circular buffer include inside `#ifndef q_moc_run`.,0,0,0,0.9881805181503296,0.9956843852996826,0.99564927816391,0.0,accept,unanimous_agreement
551340807,14054,please enclose subexpressions in parentheses. also i would prefer to see expressions in the right side of the inequality: [code block],0,0,0,0.9858432412147522,0.9906603693962096,0.9956666231155396,0.0,accept,unanimous_agreement
551346678,14054,don't you guys prefered qt functions?,0,0,0,0.9815579056739808,0.8300915360450745,0.9948785305023192,0.0,accept,unanimous_agreement
551347826,14054,"hmm, if i am not mistaken then if capacity is zero (i don't pre-reserve) and capacity() should return a size_t so in that case, this code will go boom.",0,-1,0,0.9539089798927308,0.7077195048332214,0.903326690196991,0.0,accept,majority_agreement
551348794,14054,"i've to use `using std::chrono_literals;` in the scope of file, would that be fine?",0,0,0,0.9836910963058472,0.9951711297035216,0.9952844977378844,0.0,accept,unanimous_agreement
551403796,14054,"well, then [code block]",0,0,0,0.9873228669166564,0.9893323183059692,0.9920570254325868,0.0,accept,unanimous_agreement
551408037,14054,"recently, i prefer to use standard c++ counterparts in the case where they are effectively equivalent to qt ones. the same applies to boost counterparts. don't forget that many of them (qt/boost) existed before their equivalents appeared in the standard c++, so they can prevail in our existing code. , what do you think?",0,0,0,0.9518882036209106,0.9360804557800292,0.9691030383110046,0.0,accept,unanimous_agreement
551408844,14054,why not?,0,0,0,0.8798903226852417,0.944366693496704,0.9634524583816528,0.0,accept,unanimous_agreement
551410157,14054,"just in case, i want to note that my comment above applies exactly to what is mentioned in it. no need to delete resolution\_\* constants.",0,0,0,0.9849902987480164,0.9864618182182312,0.992681324481964,0.0,accept,unanimous_agreement
551428815,14054,this policy wasn't really clear until now. i agree. we probably need to write it in our coding guidelines.,0,0,0,0.94772469997406,0.9622069597244264,0.9695795178413392,0.0,accept,unanimous_agreement
552154947,14054,"let's start small... where did this condition come from? if i am not mistaken, then you increase the capacity in two cases, either when the size is less by one than the current capacity, or when they are equal (since the size cannot be greater than the capacity). so why not just leave the only condition (size equals capacity), as in other case (the size is less than capacity) you can safely call `push_back()` (later in the code), without fear of losing the first item of queue (this is the condition for protection from loss of the first item of queue, am i right?).",0,0,0,0.9746753573417664,0.9725255966186525,0.982621133327484,0.0,accept,unanimous_agreement
552398808,14054,yes this condition can be `m_sink.size() == m_sink.capacity()`,0,0,0,0.9864504337310792,0.9892321825027466,0.9942027926445008,0.0,accept,unanimous_agreement
553896130,14054,so why isn't it still `else if (m_sink.size() == m_sink.capacity())`?,0,0,0,0.9805712699890136,0.9945979118347168,0.992629051208496,0.0,accept,unanimous_agreement
553908688,14054,"oh, i just wanted to point out that you should strive to reduce the overflow to a minimum, as you have already done. p.s. don't forget to correct the coding style in this line.",0,0,0,0.951648473739624,0.9333975315093994,0.941052496433258,0.0,accept,unanimous_agreement
553910198,14054,the one thing i dislike in `averager::push()` is playing with buffer capacity. i would make it static and pop/push items manually.,-1,-1,-1,0.6893796324729919,0.9031481742858888,0.533295214176178,-1.0,accept,unanimous_agreement
553911211,14054,"idk how that can be achieved, only push has the latest information to correctly set the buffer size",0,0,0,0.9886736273765564,0.9542891383171082,0.9835392236709596,0.0,accept,unanimous_agreement
553950244,14054,you can calculate max buffer size using duration and resolution (aka duration/resolution) and set capacity to it. since duration of each sample can't be less than resolution you will never overflow the buffer (if you manually pop outdated samples and then push new one like you do currently).,0,0,0,0.9872718453407288,0.9909349083900452,0.993640124797821,0.0,accept,unanimous_agreement
554143411,14054,2021,0,0,0,0.9301676154136658,0.957619607448578,0.8257036209106445,0.0,accept,unanimous_agreement
554145881,14054,so maybe it's better to reformat conditions? [code block],0,0,0,0.9853615164756776,0.9942731261253356,0.9926980137825012,0.0,accept,unanimous_agreement
554147165,14054,`currentdata()`,0,0,0,0.9843809604644777,0.9892265200614928,0.9937801957130432,0.0,accept,unanimous_agreement
554150651,14054,declaring `points` variable at this scope (as it was before) looks better.,0,0,0,0.9786983728408812,0.989031970500946,0.9831756353378296,0.0,accept,unanimous_agreement
554151521,14054,[code block] and below too.,0,0,0,0.9877262711524964,0.989578902721405,0.9951834082603456,0.0,accept,unanimous_agreement
554155298,14054,please use new style initialization: [code block] it's nothing hard to change one existing line too to keep it consistent.,0,0,0,0.9774923920631408,0.9897799491882324,0.9953919649124146,0.0,accept,unanimous_agreement
554161424,14054,huh then what was the missing coding guideline you mentioned here [a link],0,0,0,0.9839332103729248,0.8896098136901855,0.982631504535675,0.0,accept,unanimous_agreement
554161661,14054,it looks cool :p will change it :),1,1,1,0.9937625527381896,0.9962173104286194,0.9965159893035888,1.0,accept,unanimous_agreement
554290808,14054,space after `while`!,0,0,0,0.9860045313835144,0.9786520600318908,0.9868624210357666,0.0,accept,unanimous_agreement
554293499,14054,why `+ 1`? it doesn't contain values for some time points but for time intervals.,0,0,0,0.9797558784484864,0.9792973399162292,0.9839287996292114,0.0,accept,unanimous_agreement
554293630,14054,for peace of mind,0,0,1,0.5711991190910339,0.7150983214378357,0.9586834907531738,0.0,accept,majority_agreement
554294817,14054,:slightly_smiling_face: you don't still need to play it safe. the maximum size here is quite obvious (after a little analysis). but the extra `+ 1` can be confusing to future reviewers.,0,0,1,0.8952620625495911,0.7644851207733154,0.9516889452934264,0.0,accept,majority_agreement
554306985,14054,wouldn't it be better to store averagers in qhash (indexed by timeperiod) instead of separate class members? seems it can simplify code in several places.,0,0,0,0.983115017414093,0.99005389213562,0.9903889298439026,0.0,accept,unanimous_agreement
554307584,14054,"iirc, each period is drawn proportionally to its duration, am i right?",0,0,0,0.9659780263900756,0.8539500832557678,0.980529487133026,0.0,accept,unanimous_agreement
554308832,14054,"yes, and note that i am drawing backwards.",0,0,0,0.9814630746841432,0.9737371206283568,0.9898040294647216,0.0,accept,unanimous_agreement
554310046,14054,"qhash will add overhead and qhash will be used in two places, and for some graph, there is the same average so we have to add conditions for that to save for double push",0,0,0,0.979755163192749,0.9822254180908204,0.9847636818885804,0.0,accept,unanimous_agreement
554452595,14054,"it would be nice if adding another averager only required changes in one place, rather than four, as it is now. but it looks like it's a little more complicated than i thought. so i won't insist on it. in addition, adding/removing an averager is very rare.",0,0,0,0.9102706909179688,0.9088740944862366,0.6688013672828674,0.0,accept,unanimous_agreement
556269315,14054,please move this below forward declarations.,0,0,0,0.983201026916504,0.986690640449524,0.9942154288291932,0.0,accept,unanimous_agreement
556270353,14054,i would express the intention more directly: `int m_counter {0};`,0,0,0,0.987491488456726,0.9871233701705932,0.9919803142547609,0.0,accept,unanimous_agreement
556271387,14054,`milliseconds m_currentduration {milliseconds::zero()};`,0,0,0,0.9850838780403136,0.9919583797454834,0.9905145168304444,0.0,accept,unanimous_agreement
556279976,14054,seems you can initialize all of them in header file instead.,0,0,0,0.988086462020874,0.992190420627594,0.9921697974205016,0.0,accept,unanimous_agreement
556281017,14054,`milliseconds::zero()`,0,0,0,0.980684220790863,0.9871653318405152,0.992172122001648,0.0,accept,unanimous_agreement
556281491,14054,"`maxyvalue = std::max(maxyvalue, queue[i].data[id])`",0,0,0,0.9865440726280212,0.9937300682067872,0.991971492767334,0.0,accept,unanimous_agreement
556282186,14054,`milliseconds::zero()`,0,0,0,0.980684220790863,0.9871653318405152,0.992172122001648,0.0,accept,unanimous_agreement
556282901,14054,you can use `{}` initializer for both double vars.,0,0,0,0.9885490536689758,0.9928960204124452,0.9953395128250122,0.0,accept,unanimous_agreement
556283131,14054,please use `0` instead of `0.0`,0,0,0,0.9857090711593628,0.9932855367660522,0.9945269227027892,0.0,accept,unanimous_agreement
556283253,14054,`milliseconds::zero()`,0,0,0,0.980684220790863,0.9871653318405152,0.992172122001648,0.0,accept,unanimous_agreement
556283367,14054,add `const` for both variables.,0,0,0,0.9872152805328368,0.9922664761543274,0.9947739243507384,0.0,accept,unanimous_agreement
556292481,14054,yeah but then i have to declare resolution_* in header file. i don't like that,-1,-1,-1,0.9854462146759032,0.9843042492866516,0.9480029344558716,-1.0,accept,unanimous_agreement
556293478,14054,"yeah but `{}` is meant to initialize with zero, then why pollute code with obvious inferences.",0,0,0,0.8956712484359741,0.8366405367851257,0.960435390472412,0.0,accept,unanimous_agreement
556300208,14054,"you don't have to, you can put the literal directly to the constructor.",0,0,0,0.9860742092132568,0.988093078136444,0.9914251565933228,0.0,accept,unanimous_agreement
556301387,14054,maybe `0ms`? `milliseconds::zero()` is too long... or `auto duration = milliseconds::zero();`.,0,0,0,0.9830007553100586,0.9882479310035706,0.9875367283821106,0.0,accept,unanimous_agreement
556311152,14054,i prefer initializing with obvious literals over some programming language constructs whenever possible. you can wait for others comment before making a change here.,0,0,0,0.9542952179908752,0.9839170575141908,0.9894492626190186,0.0,accept,unanimous_agreement
556316393,14054,"isn't it time to discuss our preferred initialization method? it looks like we already have one approved aspect (we prefer to use braces instead of parentheses to initialize classes, although i think there may be exceptions). but personally, i feel it's acceptable to use assignment for initialization. even more than that, it looks more natural to me in many cases, especially when it comes to some numeric types (e.g. `int i = 10;` instead of `int i {10};`). anyway i don't mind if we adopt some stricter rules.",0,0,0,0.876387894153595,0.8455787301063538,0.6493794918060303,0.0,accept,unanimous_agreement
556333935,14054,[a link] how about still use `int m_counter = 0;` for numeric like types?,0,0,0,0.9888232350349426,0.9921284914016724,0.9952124357223512,0.0,accept,unanimous_agreement
556352833,14054,agree. perhaps we could agree on using assignment in initialization expressions when it comes to pod types.,0,0,0,0.9775547981262208,0.9927911758422852,0.9810086488723756,0.0,accept,unanimous_agreement
558462682,14054,why do guys insist on such rigid coding guidelines? i still haven't worked in a real company for programming. do companies follow such rigid and explicit coding guidelines?,-1,-1,-1,0.798795223236084,0.681779146194458,0.970302402973175,-1.0,accept,unanimous_agreement
558463627,14054,"resolution_* are very specific and not self-explanatory, imo they should remain as a constant either in header or source.",0,0,0,0.9858465790748596,0.986186385154724,0.9896742701530457,0.0,accept,unanimous_agreement
558463830,14054,i will prefer 0ms.,0,0,0,0.9733881950378418,0.9452725052833556,0.983223021030426,0.0,accept,unanimous_agreement
558824486,14054,"programming is not my main profession. i use it as an auxiliary tool in my life, and as a hobby. but for the sake of interest, you can take a look at [a link]. they are quite extensive.",0,0,0,0.6916409730911255,0.7046816349029541,0.613020658493042,0.0,accept,unanimous_agreement
559133652,14054,shouldn't you use `>=`?,0,0,0,0.9782528281211852,0.9937883019447328,0.9930319786071776,0.0,accept,unanimous_agreement
559134437,14054,`0ms`?,0,0,0,0.9856061339378356,0.9914703965187072,0.9931750893592834,0.0,accept,unanimous_agreement
559169215,14054,"imo, the `resolution_*` name doesn't carry any value of information that we don't already know. having a named constant that isn't used elsewhere other than at the constructor doesn't really add any value and can be considered to inline. just look at this snippet: [code block] it is easy to see `1s` is supposed to be some kind of ""resolution"" and its type is expected to be `milliseconds`. however if you really don't share the same vision, then forget it.",0,0,0,0.9721714854240416,0.9812626242637634,0.9763721823692322,0.0,accept,unanimous_agreement
559174548,14054,"seems you're right. at first i thought of some kind of configuration role, but it seems that it is also conveniently configured without these constants, just by changing the corresponding parameter in the initializer.",0,0,0,0.9708103537559508,0.9530797004699708,0.9649289846420288,0.0,accept,unanimous_agreement
559338437,14054,"ok, should i move all the member variable initialization in the headers, also note that i have to add `using std::chrono_literals` in the header in that case.",0,0,0,0.9889717698097228,0.9939340949058532,0.9946463704109192,0.0,accept,unanimous_agreement
559340922,14054,you can use it within `private` section.,0,0,0,0.9880279302597046,0.990024209022522,0.9958447813987732,0.0,accept,unanimous_agreement
560180858,14054,using namespace is not allowed in class.,0,0,0,0.9457453489303588,0.9842575788497924,0.99057275056839,0.0,accept,unanimous_agreement
560759099,14054,"imo, chrono literals is good enough thing to use it across the app so i see nothing bad to have such `using namespace` directive in global scope.",0,0,0,0.6811151504516602,0.876700758934021,0.7756575345993042,0.0,accept,unanimous_agreement
58912308,5090,preferences is deprecated in new code. don't forget it.,0,0,0,0.9651093482971193,0.9433605074882508,0.9799561500549316,0.0,accept,unanimous_agreement
58913135,5090,i can not imagine how to avoid duplicating of the settings keys constants. can you suggest anything?,0,0,0,0.930350124835968,0.7391955852508545,0.9348588585853576,0.0,accept,unanimous_agreement
58915262,5090,"well, maybe four static functions in the `torrentfileprocessignguard` will do the trick, but the class interface will look not that clean.",0,0,0,0.9612957239151,0.971782684326172,0.970042884349823,0.0,accept,unanimous_agreement
58920195,5090,"well, actually it's either bad design or these properties relate to the application as a whole (i.e. must belong to the application class).",-1,0,-1,0.667528510093689,0.9054799675941468,0.7131281495094299,-1.0,accept,majority_agreement
58949811,5090,the thing is there is no single function which does the torrent import (and **that** is bad design). hence the class to reuse the code. the preferences are in the `torrentfileprocessignguard` now.,0,0,0,0.5506139397621155,0.9140992164611816,0.702290415763855,0.0,accept,unanimous_agreement
58999000,5090,"i agree with you. i don't like it. but, in any case, now it is much better than it was before 3.3.x. it's a pretty complex case. i'm considering it a little from time to time. and i think i found some solution on this problem. if i'm not mistaken, i will publish it later. okay. at least it's good as a workaround.",1,1,1,0.5075356960296631,0.9646543264389038,0.7368320822715759,1.0,accept,unanimous_agreement
59324258,5090,"it is better to consider this class as a separate component and put it in its own *.h/*.cpp files (along with its base class or merge these two classes into one). utils must contain only simple logic routines that are independent from the logic of the application. p.s. you do not need to rush in search of that does not meet my approval. perhaps you will find it. as i have repeatedly said, we are constantly improving our code, but we can not change it all at once. therefore, there is still contains a lot of ""bad"" fragments which can not be regarded as examples to follow.",0,0,0,0.8737114667892456,0.8934153318405151,0.9687975645065308,0.0,accept,unanimous_agreement
59493420,5090,", ?",0,0,0,0.9499980211257936,0.9174843430519104,0.9702539443969728,0.0,accept,unanimous_agreement
59547602,5090,"sorry, can't understand your question.",-1,-1,-1,0.9873905181884766,0.9915443658828736,0.9920348525047302,-1.0,accept,unanimous_agreement
59553812,5090,move torrentfileprocessingguard class and its base class to `base/torrentfileprocessingguard.h`/`base/torrentfileprocessingguard.cpp` (and probably merge it with its base class). move these class names outside utils namespace.,0,0,0,0.9890416264533995,0.9955263733863832,0.9945594668388368,0.0,accept,unanimous_agreement
59566259,5090,"and maybe remove `processing` from class name? imo, **torrentfileguard** is enough.",0,0,0,0.9777631163597108,0.9937343001365662,0.992554008960724,0.0,accept,unanimous_agreement
59586749,5090,"ok, will move them into their own file.",0,0,0,0.9844840168952942,0.9902280569076538,0.9931723475456238,0.0,accept,unanimous_agreement
59602271,5090,then remove `auto_delete_` prefix from const names since it will become unneeded. it would be better if you will name it just like we did before (in other files): key_propertyname (if you have no objection in principle to such naming scheme). also fix settings_key from `downloads/` to `torrentfileguard/` since we use settings key names based on component names.,0,0,0,0.9879727363586426,0.9953786134719848,0.994495451450348,0.0,accept,unanimous_agreement
59602450,5090,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
59602632,5090,fix coding style for intializer: insert space before.,0,0,0,0.9884264469146729,0.9914173483848572,0.9939746260643004,0.0,accept,unanimous_agreement
59602784,5090,fix coding style for intializers: insert space before.,0,0,0,0.9883434176445008,0.9908904433250428,0.9936442375183104,0.0,accept,unanimous_agreement
59606219,5090,"disagree: the class name is an implementation detail, but not a component name. i don't think it shall be present in the configuration file.",0,0,0,0.958995521068573,0.9782671928405762,0.8486575484275818,0.0,accept,unanimous_agreement
59617826,5090,"uhm... i had to discuss this before, but what's the difference: [code block] why do you want space int the first case, but not in the second one?",0,0,0,0.9488120675086976,0.5712248086929321,0.930444359779358,0.0,accept,unanimous_agreement
59661961,5090,i agree with you partially. but... 1. objective correspondence between settings names and names of the components/properties is better than subjective separation into groups. 2. qbittorrent configuration file is mostly implementation detail and it isn't a user configuration interface.,0,0,0,0.9614627957344056,0.8213436007499695,0.9396865367889404,0.0,accept,unanimous_agreement
59663318,5090,"then why don't you use the second one? joke. old-style initializer has almost full compliance with the constructor call, so we use ""function call"" appearance. new-style initializer is used in more contexts, and in some of them it will look ugly and badly readable if you do not add a space. imo, without space before it looks ugly in all cases (for the most part due to the nature of the appearance of these characters itself).",-1,-1,-1,0.9755603075027466,0.9848586320877076,0.9882912039756776,-1.0,accept,unanimous_agreement
59672448,5090,i suggest do the following changes: [code block],0,0,0,0.9867216348648072,0.9899327754974364,0.9952924251556396,0.0,accept,unanimous_agreement
59672489,5090,i don't think you need to set a `buddy()`?,0,0,0,0.9810253977775574,0.9844361543655396,0.9921147227287292,0.0,accept,unanimous_agreement
59673200,5090,shouldn't you put this into `settings_group`? i.e. `torrent settings` groupbox.,0,0,0,0.9878582954406738,0.995726466178894,0.9959164261817932,0.0,accept,unanimous_agreement
59673419,5090,"~~why html tags here? is pure text not enough?~~ anyway, for me, `quot;` isn't replaced to `""` when i look at the tooltip",0,0,0,0.8386169075965881,0.6612260937690735,0.9547600746154784,0.0,accept,unanimous_agreement
59674357,5090,`quot;` isn't replaced properly. using qt designer to input the text does produce the well-formed string for me...,0,0,0,0.9366307258605956,0.9305689334869384,0.9933424592018129,0.0,accept,unanimous_agreement
59686233,5090,"`auto_delete_` is redundant, as i said before.",0,0,0,0.9677209854125975,0.9789656400680542,0.9861767888069152,0.0,accept,unanimous_agreement
59687015,5090,i see you know a lot of these new-fangled words!.. :),1,1,1,0.9782189726829528,0.9960954785346984,0.9956285953521729,1.0,accept,unanimous_agreement
59687291,5090,"imported? i don't remember that we used this term for it. why not ""added""?",0,0,0,0.9482228755950928,0.931136190891266,0.987934112548828,0.0,accept,unanimous_agreement
59703447,5090,i call it from a destructor and thus do not want a reader to worry.,0,0,0,0.9573714137077332,0.8648016452789307,0.9687107801437378,0.0,accept,unanimous_agreement
59703648,5090,"the word ""added"" has too many meanings, wanted to be more precise here.",0,0,0,0.5628001093864441,0.8674886226654053,0.8044953942298889,0.0,accept,unanimous_agreement
59703837,5090,"~~this text was produced by qt designer, version 5.6.0~~ ~~no, it is the editor which was used to remove `&` inserted by designer into every screen label.~~ again i'm wrong. my designer inserts `quot;` and shows them correctly.",-1,-1,0,0.8663986921310425,0.4862951040267944,0.9262394309043884,-1.0,accept,majority_agreement
59705620,5090,"ok. but ""import torrent"" is already being used in qbittorrent in another sense.",0,0,0,0.9861974120140076,0.9867143034934998,0.9921045303344728,0.0,accept,unanimous_agreement
59707342,5090,"i have to find another word then. ""add"" is meaningless.",-1,-1,0,0.8339484930038452,0.5469359755516052,0.5241217613220215,-1.0,accept,majority_agreement
59722543,5090,"context is ""add torrent to session"". or it isn't?",0,0,0,0.9803470373153688,0.9908905625343324,0.9881796836853028,0.0,accept,unanimous_agreement
59725165,5090,"exactly. the action which is done: the .torrent file was read and imported into the qbt. this action is called ""add torrent"" in the menu.",0,0,0,0.9870374202728271,0.993557870388031,0.9934219717979432,0.0,accept,unanimous_agreement
59726019,5090,"consider the following scenario, please: the `session` class is refactored and the `torrentfileguard` becomes unneeded. will you break the configuration, add a migration code or leave `torrentfileguard/` key in the `session` class?",0,0,0,0.988644242286682,0.994331121444702,0.9934108853340148,0.0,accept,unanimous_agreement
59726410,5090,": you just demonstrated the problem with ""added"". without knowing the context you can't understand what this is about.",0,0,0,0.6111987829208374,0.9305635690689088,0.9716417789459229,0.0,accept,unanimous_agreement
59728739,5090,"the same can be said about ""imported"". besides, as i said, ""import torrent"" has a different meaning in qbittorrent. maybe ""accepted""?",0,0,0,0.985694944858551,0.9943199157714844,0.9929375052452089,0.0,accept,unanimous_agreement
59730816,5090,"it makes sense. i agree. but then we have to create an elaborate grouping. `download` is also not suitable here. also the names of the options should be more ""descriptive"".",0,0,0,0.9707740545272828,0.961262822151184,0.9506828784942628,0.0,accept,unanimous_agreement
59732378,5090,"ok, i'll find a better name. but not the `torrentfileguard` :)",1,1,1,0.9378382563591005,0.9496645331382751,0.9742291569709778,1.0,accept,unanimous_agreement
59733685,5090,maybe put these options in 'application` group?,0,0,0,0.9874480366706848,0.9942728877067566,0.9940271377563475,0.0,accept,unanimous_agreement
59745743,5090,"""read"" is incorrect here, because we have read the file in any case, whether we added it to the session later or not.",0,0,0,0.882667064666748,0.9883453845977784,0.9872955679893494,0.0,accept,unanimous_agreement
59899002,5090,", : thank you for your suggestions! and the winner is... no, i just give up and propose `markasaddedtosession()`. what do you think?",1,1,1,0.9771388173103333,0.9900593757629396,0.9939152598381042,1.0,accept,unanimous_agreement
59908318,5090,ok. all ingenious is simple.,0,0,0,0.9528633952140808,0.439103364944458,0.488874077796936,0.0,accept,unanimous_agreement
60990443,5090,"i think according to our recent discussions this should under ""core/autodeletetorrents/"" to avoid multiple small modules in the conf file.",0,0,0,0.9865266680717468,0.9931747317314148,0.9886655807495116,0.0,accept,unanimous_agreement
60990641,5090,i think our style in this case uses: [code block] like you do at `torrentfileguard::torrentfileguard`,0,0,0,0.9862390160560608,0.990009605884552,0.9903103709220886,0.0,accept,unanimous_agreement
60991152,5090,also can you teach me on what this c++11 feature does: what do you do `m_path {path}` instead of `m_path(path)`?,0,0,0,0.9831013083457948,0.9929124712944032,0.994038701057434,0.0,accept,unanimous_agreement
60991555,5090,"prefix ""key_""",0,0,0,0.983030378818512,0.9874430298805236,0.994034230709076,0.0,accept,unanimous_agreement
60991810,5090,typo: accordingly,0,0,0,0.9788295030593872,0.9838142395019532,0.9927147030830384,0.0,accept,unanimous_agreement
60992214,5090,"`const qstring key_auto_delete_enabled = auto_delete_settings_key(""deleteaddedtorrents"");` ?",0,0,0,0.987403154373169,0.993776798248291,0.9949204325675964,0.0,accept,unanimous_agreement
60992227,5090,should the checkbox always be visible but its checked state be dependent on the setting?,0,0,0,0.986907124519348,0.993067979812622,0.9913173913955688,0.0,accept,unanimous_agreement
60992618,5090,better set this tooltip in the code in order to strip out the html tags and prevent translators from borking it. eg tooltip = start_tags + tr(tooltip plaintext) + end_tags;,0,0,0,0.9770623445510864,0.9923720359802246,0.9949958324432372,0.0,accept,unanimous_agreement
60992746,5090,i don't think the comma goes here.,0,0,0,0.9367083311080932,0.7365432977676392,0.9489420652389526,0.0,accept,unanimous_agreement
60992935,5090,same here. unless has a better alternative.,0,0,0,0.9662762880325316,0.9693202376365662,0.9861461520195008,0.0,accept,unanimous_agreement
60992974,5090,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
60993455,5090,i think you should add this too: [code block],0,0,0,0.9841797351837158,0.9828169345855712,0.9923151731491088,0.0,accept,unanimous_agreement
60993652,5090,and take care disabling it if `torrentfileguard::deleteaddedtorrents()` is false.,0,0,0,0.969251811504364,0.9929364323616028,0.9955021739006042,0.0,accept,unanimous_agreement
60993658,5090,"no, readability is not the most important point (however, it allows to find initialisations). there is no difference in this example between `()` and `{}`. as i pointed out in the discussion, mentioned by , this is done to make a habit.",0,0,0,0.9658361077308656,0.9817912578582764,0.9903094172477722,0.0,accept,unanimous_agreement
60994099,5090,"hmm, ok.",0,0,0,0.9473065733909608,0.8651443123817444,0.9299308061599731,0.0,accept,unanimous_agreement
60994242,5090,yes. and of course `key_auto_delete_cancelled_torrents` too.,0,0,0,0.988728165626526,0.9932331442832948,0.9924479722976683,0.0,accept,unanimous_agreement
60994634,5090,it would have been disabled if the option is not enabled. why take space by a disabled checkbox? the dialog is already quite complex.,0,0,0,0.909179985523224,0.7761680483818054,0.8311303853988647,0.0,accept,unanimous_agreement
60995524,5090,this is done in the .ui file.,0,0,0,0.988106608390808,0.9925647974014282,0.9954947233200072,0.0,accept,unanimous_agreement
60995780,5090,see above.,0,0,0,0.980058491230011,0.9828109741210938,0.9928240776062012,0.0,accept,unanimous_agreement
61000131,5090,"actually ""delete .torrent file afterwards"" should be a groupbox and ""also when addition is cancelled"" should be a child of it. and the warning label too. this is what we do with other options in that dialog.",0,0,0,0.985562801361084,0.9941149950027466,0.9920306205749512,0.0,accept,unanimous_agreement
61000566,5090,scratch that. you already do this. so just delete the above. i don't hiding options in that dialog. the groupbox should take care of enabling/disabling its children already.,0,0,0,0.9705683588981628,0.9773582220077516,0.961045742034912,0.0,accept,unanimous_agreement
61000653,5090,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
61043105,5090,ok. but `autodeletetorrentfile`. option names: `whenadded` and `whencancelled`.,0,0,0,0.9878976941108704,0.9938889741897584,0.9926984906196594,0.0,accept,unanimous_agreement
61090494,5090,"sorry, i'm lost. the checkbox in this dialog (add torrent) does not belong to any group. do you suggest to make it visible always, replacing the `setvisible()` call with `setenbaled()`?",-1,-1,-1,0.98789644241333,0.9855746030807496,0.9872625470161438,-1.0,accept,unanimous_agreement
61090782,5090,"this is not a torrent setting, but rather an app behaviour one. so i disagree.",-1,-1,0,0.8201382756233215,0.7906009554862976,0.9814811944961548,-1.0,accept,majority_agreement
61095918,5090,`core/autodeleteaddedtorrentfile` and the keys `enabled` and `ifcancelled`. what do you think?,0,0,0,0.9880659580230712,0.994784653186798,0.9927962422370912,0.0,accept,unanimous_agreement
61202950,5090,"omg, there is logical mistake here. we haven't really two options here but only one (autodeletetorrentfile) which can have one of three values: none, added, all (or never, ifadded, always).",0,-1,0,0.7166528701782227,0.508022129535675,0.909770667552948,0.0,accept,majority_agreement
61246269,5090,"but i leave two checkboxes in the settings page, ok? this is because enabling the `always` mode is really dangerous and i would like to make it an independent user action.",-1,-1,0,0.8682992458343506,0.9165385365486144,0.9214912056922911,-1.0,accept,majority_agreement
61287923,5090,it's ok for me unless controversial choice is possible.,0,0,0,0.9626062512397766,0.8979464173316956,0.9674972891807556,0.0,accept,unanimous_agreement
62433806,5090,delete space between function name and opening parentheses,0,0,0,0.9830986857414246,0.989019215106964,0.9896427989006042,0.0,accept,unanimous_agreement
62433865,5090,"since this tooltip doesn't have special html tags, put it in the .ui file.",0,0,0,0.9885979890823364,0.9910597205162048,0.9939576387405396,0.0,accept,unanimous_agreement
121317486,6952,"this one and the next 2 lines shall not be needed, as `target_link_libraries(... qt5::macextras)`, initiated by `list (append qbt_qt_components macextras)` call above should do the very same.",0,0,0,0.9893843531608582,0.9944620728492736,0.9946752786636353,0.0,accept,unanimous_agreement
121321423,6952,why this fails the compilation?,0,0,0,0.7195656895637512,0.93261456489563,0.9118128418922424,0.0,accept,unanimous_agreement
121324377,6952,there are already an `#if defined(q_os_mac)` block at line 210 you should move it there.,0,0,0,0.9894275069236756,0.9951074123382568,0.9948405623435974,0.0,accept,unanimous_agreement
121324976,6952,i would take out all entries in this `#ifndef` block and move it down to where you put [code block],0,0,0,0.9866431951522828,0.9940646290779114,0.994376301765442,0.0,accept,unanimous_agreement
121325238,6952,move this block under [code block],0,0,0,0.9882851839065552,0.992664873600006,0.9955430626869202,0.0,accept,unanimous_agreement
121325338,6952,and move [code block] to here,0,0,0,0.9884584546089172,0.9892399311065674,0.9955755472183228,0.0,accept,unanimous_agreement
121325495,6952,move this block 1 line up.,0,0,0,0.9872157573699952,0.9743436574935912,0.9908402562141418,0.0,accept,unanimous_agreement
121325909,6952,what its purpose?,0,0,0,0.9723078012466432,0.9551817774772644,0.9919506311416626,0.0,accept,unanimous_agreement
121327076,6952,is this equivalent? [code block],0,0,0,0.988140106201172,0.9920575022697448,0.9957477450370787,0.0,accept,unanimous_agreement
121327383,6952,change it to `#ifdef q_os_mac` and switch the code,0,0,0,0.9876435995101928,0.9946104288101196,0.9929927587509156,0.0,accept,unanimous_agreement
121327887,6952,change `tr` to `qstring`,0,0,0,0.986213207244873,0.9936036467552184,0.9944623112678528,0.0,accept,unanimous_agreement
121328622,6952,move this block down to under `void toolbarfollowsystem();`,0,0,0,0.9864365458488464,0.9943310022354126,0.994528830051422,0.0,accept,unanimous_agreement
121329121,6952,write `#ifdef q_os_mac` and switch code.,0,0,0,0.9885332584381104,0.9949029684066772,0.99347984790802,0.0,accept,unanimous_agreement
121332336,6952,move `{` to a newline.,0,0,0,0.985618531703949,0.9901818633079528,0.9940943121910096,0.0,accept,unanimous_agreement
121332393,6952,move { to a newline.,0,0,0,0.9777668714523317,0.9807277917861938,0.9931241869926452,0.0,accept,unanimous_agreement
121332788,6952,pls avoid using underscore in variable names.,0,0,0,0.8980995416641235,0.9829588532447816,0.9872369766235352,0.0,accept,unanimous_agreement
121354566,6952,"i don't know if it's any different in mac but in kde if you do this and enable `use subcategories` in options, any subcategories vanish from the sidepanel and there doesn't seem to be a way to show them because the expand icon isn't visible. i realize this is probably out of the scope of this pr, imo this should be used on all platforms but only when `use subcategories` is disabled and maybe reduce the indentation of branches (and the root as much as possible).",0,0,0,0.9482659101486206,0.9519404768943788,0.9778890609741212,0.0,accept,unanimous_agreement
121395401,6952,"i thought this myself, but actually it does not work. if i remove these lines, compilation will stop working. i could not explain the reason and simply hardcoded the variables. i think it is a bug in qt, because i saw other people doing similar things on the net.",-1,-1,0,0.6722510457038879,0.6705561876296997,0.9198680520057678,-1.0,accept,majority_agreement
121397780,6952,"you are right, i forgot that when we migrated from qt4, i replaced smart commands with direct component names. you have to mention qt5::macextras in target_link_libraries() directly. for instance: [code block] in src/gui/cmakelists.txt",0,0,0,0.9386382102966307,0.9887953996658324,0.9848235845565796,0.0,accept,unanimous_agreement
121458065,6952,"this removes vertical separators from the toolbar menu, they are invalid in macos design. as i said above, there is no such concept. one could have space separation or no separation. i replaced the separators with some extra space, but i think they are fine even if just removed.",0,0,0,0.9807097911834716,0.980391263961792,0.9375171065330504,0.0,accept,unanimous_agreement
121458598,6952,"m_systrayicon is undefined on mac, so one cannot write it this way.",0,0,0,0.9800469279289246,0.9233406782150269,0.9903995394706726,0.0,accept,unanimous_agreement
121458971,6952,are you sure this is a correct suggestion? e.g. in russian i would want to see %1/с not s. since seconds in russian are `секунды`.,0,0,0,0.9819211959838868,0.992607593536377,0.99028342962265,0.0,accept,unanimous_agreement
121461497,6952,"indeed, thanks.",1,1,0,0.678623616695404,0.5925155878067017,0.4980905055999756,1.0,accept,majority_agreement
121463116,6952,"actually i faield to find this option yesterday, and thus assumed that subcategories simply do not work on macos. now i found it, thanks :) i changed the indentation to not be disabled when they are off, but doing something like this for all the platforms is the job of a separate pull request indeed.",1,1,1,0.9898054599761964,0.9945598244667052,0.9948169589042664,1.0,accept,unanimous_agreement
121470551,6952,but if `use subcategories` is changed it would need a restart for the indentation to change. is that ok? if you can make it change without restart i would like to suggest to move this out of the `#if` so all platforms can have it. edit: on second thought moving it outside the `#if` wouldn't fit the pr name :),0,1,1,0.5149077773094177,0.9671401381492616,0.9763708114624025,1.0,accept,majority_agreement
121471835,6952,"after reading your explanation, obviously not. imo, it would be better to add this: [code block] and split the line please.",0,0,0,0.9792990684509276,0.9679422974586488,0.9287509918212892,0.0,accept,unanimous_agreement
121473590,6952,i think you missed this one.,0,0,0,0.5107291340827942,0.7574309706687927,0.83538818359375,0.0,accept,unanimous_agreement
121474613,6952,"alright, done",0,0,0,0.9634354114532472,0.8947353959083557,0.9867932200431824,0.0,accept,unanimous_agreement
121475109,6952,"of course i could fix it, and i have just done it. thanks for reminding. but you are right, if i change it outside the preprocessor macro, it wouldn't fit this pr. i have no development tools installed for the other platforms, but i think it should work fine for them. you or anybody else could submit a new pr removing the ifdefs once this gets merged :)",1,1,1,0.9890736937522888,0.9936965107917786,0.9956158399581908,1.0,accept,unanimous_agreement
121475207,6952,"yep, actually did. fixed it now.",0,0,0,0.972772777080536,0.9521498680114746,0.5058300495147705,0.0,accept,unanimous_agreement
121480618,6952,"ok, after searching for some osx toolbar screenshot on google, i get what you mean.",0,0,0,0.972938060760498,0.9594427943229676,0.9790074825286864,0.0,accept,unanimous_agreement
121481759,6952,"private variables should prepended with `m_`, thus `m_defaultindentation`",0,0,0,0.9872432947158812,0.9946272969245912,0.9952244758605956,0.0,accept,unanimous_agreement
121487651,6952,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
121565366,6952,"please do us a favor if you don't mind: remove the curly braces here, it isn't really needed.",0,0,0,0.9581342339515686,0.93677818775177,0.969755470752716,0.0,accept,unanimous_agreement
121567197,6952,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
121674323,6952,"sorry, but i am not very familiar with qt, and i do not even have qt creator installed. quick googling shows me this: [a link] and by looking at the syntax i am afraid all your code requires such changes, and not just the mac section. therefore it is pretty much outside of the scope of this pull request and is better to be done by a qt dev.",-1,-1,-1,0.9896490573883056,0.9919039607048036,0.9870232343673706,-1.0,accept,unanimous_agreement
121871290,6952,you can either do this change for all platform (no need or `#ifdef`) or change the options dialog default height (enlarge the number ` 591 ` in optionsdlg.ui),0,0,0,0.9873360991477966,0.9950043559074402,0.9957658052444458,0.0,accept,unanimous_agreement
121885787,6952,"hm, but will this be fine? i do not see many reasons to increase the total height, and i am not sure if reducing the size is ok on all the platforms.",0,0,0,0.8198413252830505,0.6496313810348511,0.9563201665878296,0.0,accept,unanimous_agreement
121888078,6952,"both way will be fine, imo increasing the dialog height is a safer way to go (if you only need adding little more height).",0,0,0,0.9656202793121338,0.968416392803192,0.964863896369934,0.0,accept,unanimous_agreement
121902835,6952,"to be honest, i do not think that increasing the dialogue height is a good idea. it already is 615 pixels tall here, plus 75 pixels for the dock and 25 for the menubar. this makes it pretty big already for smaller screens (e.g. when remoting from ipad, which has 1024x768 res). i reduced the icon size instead.",0,0,0,0.6626574397087097,0.944677233695984,0.6858986616134644,0.0,accept,unanimous_agreement
122570023,6952,`void paintevent(qpaintevent* event) override`,0,0,0,0.9845641851425172,0.9939163327217102,0.9941277503967284,0.0,accept,unanimous_agreement
122570033,6952,i would remove the curly brackets,0,0,0,0.9864280819892884,0.9850587844848632,0.9921293258666992,0.0,accept,unanimous_agreement
122570082,6952,"there is `m_ui->centralwidgetlayout->addwidget(m_tabs);` below, is it possible to move this block near to there?",0,0,0,0.9876281023025512,0.9956483244895936,0.995233118534088,0.0,accept,unanimous_agreement
122570338,6952,"oh, you actually do use override and this was not intentional... right, fixed for the rest as well.",0,0,0,0.955012023448944,0.902071177959442,0.9867197871208192,0.0,accept,unanimous_agreement
122570352,6952,maybe it is indeed more readable.,0,0,0,0.9712679386138916,0.9846065044403076,0.9640960097312928,0.0,accept,unanimous_agreement
125839578,6952,`target_link_libraries(qbt_gui qt5::macextras)` below is not enough?,0,0,0,0.9849356412887572,0.99455064535141,0.9942173957824708,0.0,accept,unanimous_agreement
125881716,6952,i would like to see the non-modal dialog on other systems as well.,0,0,0,0.9842735528945924,0.977320432662964,0.9721981883049012,0.0,accept,unanimous_agreement
125883279,6952,are those related [a link],0,0,0,0.9828885793685912,0.9859490990638732,0.9954232573509216,0.0,accept,unanimous_agreement
125883500,6952,"good idea, but definitely out of the scope of this pr, especially because i do not have the dev environment set for mac. i could imagine someone removing the ifdefs for both non-modal dialogues and subcategory padding =)",1,1,1,0.9837364554405212,0.9816887378692628,0.994840443134308,1.0,accept,unanimous_agreement
125886161,6952,"yes. `target_link_libraries(qbt_gui qt5::macextras)` provides ""-i"", ""-l"", and ""-l"" compiler switches.",0,0,0,0.9873693585395812,0.9950768351554872,0.9928284287452698,0.0,accept,unanimous_agreement
125940332,6952,"checked it, builds fine without this line. removed. thanks =)",1,1,1,0.9883024096488952,0.994964838027954,0.996588945388794,1.0,accept,unanimous_agreement
126939730,6952,why this is needed and why in gui build only?,0,0,0,0.9649254083633424,0.9887489080429076,0.9909939169883728,0.0,accept,unanimous_agreement
126942076,6952,"this is to workaround qt bugs, examples: [a link], [a link]. from what i can tell there are no proper solutions. it is necessary for [a link] in particular, which is gui only. without this define moc tries to generate systray functions, and even if i let it include qsystemtrayicon it will later fail with linking errors.",0,0,0,0.960516095161438,0.9451230764389038,0.9755185842514038,0.0,accept,unanimous_agreement
126942924,6952,but both bugs are marked as resolved. why do you care about qt < 5.9.0?,0,0,0,0.8165502548217773,0.9713351726531982,0.9856027364730836,0.0,accept,unanimous_agreement
126944328,6952,i mean homebrew installs the latest qt. how a user can get the old version?,0,0,0,0.9858230352401732,0.976995587348938,0.988157331943512,0.0,accept,unanimous_agreement
126949753,6952,"these bugs are marked as resolved, but they are not resolved as of qt 5.9.1 under our circumstances.",0,0,0,0.9825947880744934,0.9915848970413208,0.9870282411575316,0.0,accept,unanimous_agreement
126953339,6952,"i can not find the same define for qmake build. how does it build then? also, if this a fix for a specific file and bug, would it be possible to pass the flag for that file target only supplying a comment why the flag is needed?",0,0,0,0.9680361151695251,0.9640725255012512,0.9897624850273132,0.0,accept,unanimous_agreement
126955298,6952,"i suppose qt team fixed the bug for qmake actually (which could be the reason they closed the issue), or your custm qt build has patches from homebrew. it certainly fails with cmake though. the flag is specific for the header, so there are many cpp files. it is saner to define it for all the files, since this flag is defined everywhere but in moc for all macos sources, and not defining it may lead to undefined behaviour in other places. if you think a different comment is more descriptive, would you suggest anything? maybe adding some qt bug links?",0,0,0,0.944428563117981,0.98710036277771,0.9813457131385804,0.0,accept,unanimous_agreement
126959616,6952,"nevertheless, i would be as specific as possible. why don't you use [a link] variable? exactly. please, add such a comment.",0,0,0,0.9794334769248962,0.7075558304786682,0.9926210641860962,0.0,accept,unanimous_agreement
126963104,6952,"well, i was simply unaware of this feature. thanks for pointing it out, added.",1,1,1,0.726054847240448,0.8788773417472839,0.9655990600585938,1.0,accept,unanimous_agreement
127588900,6952,why don't you ifdef the whole switch here?,0,0,0,0.973437249660492,0.9746779799461364,0.992664098739624,0.0,accept,unanimous_agreement
127589137,6952,why did you change it to 62?,0,0,0,0.9505789279937744,0.987596035003662,0.9921922087669371,0.0,accept,unanimous_agreement
127589367,6952,"to let it fit the window without showing a vertical scrollbar. see [a link] i fixed the above one as well, was probably due to an automatic merge of some pr.",0,0,0,0.9879081845283508,0.9917448163032532,0.9943431615829468,0.0,accept,unanimous_agreement
127589417,6952,ok. the link doesn't work for me. merge the new commit into the **1st** one. and also rebase. then i can merge it.,0,0,0,0.970302402973175,0.9609342217445374,0.9914425015449524,0.0,accept,unanimous_agreement
127589448,6952,done =),0,1,0,0.629827618598938,0.9543501734733582,0.5235421657562256,0.0,accept,majority_agreement
130222233,6952,", could you test cmake 3.9 and without this define, please? as of version 3.9 cmake generates `moc_predefs.h` as qmake does.",0,0,0,0.9890649318695068,0.9950456619262696,0.9933264255523682,0.0,accept,unanimous_agreement
130224768,6952,"tested, exactly the same error. find reveals no such file `moc_predefs.h`.",0,0,0,0.9888774752616882,0.9898390769958496,0.9923730492591858,0.0,accept,unanimous_agreement
130245295,6952,thank you. the results is quite unexpected.,1,1,1,0.8484929203987122,0.8645706176757812,0.8521291613578796,1.0,accept,unanimous_agreement
57511382,4984,qbytearray::frompercentencoding has wrong behavior too?,-1,0,0,0.6061105132102966,0.9654792547225952,0.7760194540023804,0.0,accept,majority_agreement
58651052,4984,did you check whether it breaks the web app or not?,0,0,0,0.9845643043518066,0.9832746386528016,0.9925048351287842,0.0,accept,unanimous_agreement
58651097,4984,maybe `rawstringmap`?,0,0,0,0.9872960448265076,0.9934771656990052,0.9938738346099854,0.0,accept,unanimous_agreement
58651280,4984,"since we using c++11 now don't insert a space between two (three, four ...) brackets: [code block] and in other places too.",0,0,0,0.987941324710846,0.9931005239486694,0.9941494464874268,0.0,accept,unanimous_agreement
58651622,4984,"why don't you do ""frompercentencoding()"" here? or qurl doing it itself?",0,0,0,0.9630680680274964,0.9918501377105712,0.9936142563819884,0.0,accept,unanimous_agreement
58651901,4984,"get that out of here. if qbittorrent is not compiled you have, it is the problem of your build configuration.",0,0,0,0.908617377281189,0.9708864092826844,0.9904503226280212,0.0,accept,unanimous_agreement
58652025,4984,move this to other system includes and try to keep include list ordered (e.g. don't mix libtorrent/boost/qt includes).,0,0,0,0.988658607006073,0.9943299293518066,0.9933091402053832,0.0,accept,unanimous_agreement
58652071,4984,to return qt implicitly shared types as const reference is overkill.,0,0,0,0.9347221851348876,0.8711464405059814,0.854059636592865,0.0,accept,unanimous_agreement
58652229,4984,as well as use move semantics for it.,0,0,0,0.9879661202430724,0.9907221794128418,0.991665780544281,0.0,accept,unanimous_agreement
58653882,4984,"since you use peerbuilder to build a peer no need to implement peer as class at all. simple struct is enough here. as for this method (toentryforclient()), it has private meaning and can be simply transformed to module wide function `peertoentry()`. the main idea is to move all private things to .cpp.",0,0,0,0.9766095280647278,0.9929034113883972,0.9906715154647828,0.0,accept,unanimous_agreement
58653915,4984,it's pure private thing so move this into .cpp.,0,0,0,0.978209912776947,0.9849570989608764,0.99517160654068,0.0,accept,unanimous_agreement
58654004,4984,fix coding style for names. we use camelcase (prepended by `m_` prefix for private fields).,0,0,0,0.989096462726593,0.994975447654724,0.9905085563659668,0.0,accept,unanimous_agreement
58654372,4984,"we don't allow pure static classes, so you must use namespaces in such cases. but since here we have only module private functions, then just place it in an anonymous namespace in the .cpp file.",0,0,0,0.9874746203422546,0.9866243600845336,0.9943015575408936,0.0,accept,unanimous_agreement
58654794,4984,`m_` prefixed names is reserved for private class fields.,0,0,0,0.9866162538528442,0.9933388829231262,0.9926019310951232,0.0,accept,unanimous_agreement
58655051,4984,"please use shortcuts for unsigned types: `uchar`, `ulong` etc.",0,0,0,0.987861394882202,0.9946799874305724,0.9937268495559692,0.0,accept,unanimous_agreement
58655150,4984,please enclose subexpressions for more readability: [code block],0,0,0,0.9877315163612366,0.9864149689674376,0.9953848719596864,0.0,accept,unanimous_agreement
58655218,4984,fix coding style for one line function: [code block],0,0,0,0.9884321093559264,0.9906180500984192,0.9946005344390868,0.0,accept,unanimous_agreement
58655277,4984,camelcase,0,0,0,0.9789125323295592,0.9691299796104432,0.9723753333091736,0.0,accept,unanimous_agreement
58655340,4984,add space after `if` (coding style issue) and below too,0,0,0,0.9888030886650084,0.994203507900238,0.994211733341217,0.0,accept,unanimous_agreement
58657000,4984,shouldn't this be a `typedef`?,0,0,0,0.9814887642860411,0.9933003187179564,0.9920422434806824,0.0,accept,unanimous_agreement
58657800,4984,remove space after `(`.,0,0,0,0.9667720794677734,0.9900043606758118,0.9910770654678344,0.0,accept,unanimous_agreement
58657896,4984,use brackets for system includes.,0,0,0,0.986764430999756,0.98971688747406,0.9941644072532654,0.0,accept,unanimous_agreement
58660754,4984,"ok. i did some research. ideally, we should leave in the header only the following forward declarations (outside bittorrent namespace): [code block]",0,0,0,0.9722788333892822,0.9682050347328186,0.9886800050735474,0.0,accept,unanimous_agreement
58663086,4984,"and then it all makes the peerbuilder class superfluous! if you apply my suggestions, you will significantly reduce the amount of code.",-1,-1,0,0.9311309456825256,0.7901943325996399,0.9662023186683656,-1.0,accept,majority_agreement
58664040,4984,this is the same in c++11:,0,0,0,0.9857845902442932,0.9902486205101012,0.9948413968086244,0.0,accept,unanimous_agreement
58687481,4984,"thank you. from my view point, it comes down to whether you are going to define a type, which is also stated in what you quote: in this specific scenario, i interpret the author is defining a type, because `qbytearraymap` is used non locally. and another weaker argument, the `typedef` is just above it... mixing like this is weird imo.",-1,-1,-1,0.6730386018753052,0.6822677254676819,0.9350829124450684,-1.0,accept,unanimous_agreement
58688361,4984,[a link] seems `using` syntax is extended because of problems working with template.,0,0,0,0.974486768245697,0.9858156442642212,0.98926442861557,0.0,accept,unanimous_agreement
58927948,4984,now `requestparser.cpp` changes look good.,1,0,1,0.6734094023704529,0.8519648909568787,0.6615724563598633,1.0,accept,majority_agreement
58928302,4984,"just create request struct with `rawstringmap gets`. as there can be any binary data according to the standard, it is fully consistent with the model (no need to complicate it). as i said, parsing of these data is the task of the application. in our case, we can consider each action (eg. `action_query_torrents()`) as a separate application, so we should parse get params in these actions.",0,0,0,0.9860838055610656,0.9918228983879088,0.991763710975647,0.0,accept,unanimous_agreement
58928375,4984,more comments will be tomorrow.,0,0,0,0.9689866900444032,0.9803168773651124,0.99070006608963,0.0,accept,unanimous_agreement
58981512,4984,fix coding style. only one blank line allowed.,0,0,0,0.9866755604743958,0.9758285880088806,0.991827130317688,0.0,accept,unanimous_agreement
58981553,4984,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
58981607,4984,fix coding style. and in similar cases too.,0,0,0,0.986533522605896,0.9852344393730164,0.9911905527114868,0.0,accept,unanimous_agreement
58981652,4984,fix coding style for lambda body.,0,0,0,0.987399697303772,0.9888151288032532,0.9922888875007628,0.0,accept,unanimous_agreement
58981836,4984,"although it does not violate our rules (we just don't have anything for this), but it is better to enclose the subexpressions in parentheses. this improves readability and can save you from random errors if you mix up the precedence of operators. p.s. my ""general"" comments (like this one) relate not only to the linked line, but to all code.",0,0,0,0.949013650417328,0.9818858504295348,0.9793948531150818,0.0,accept,unanimous_agreement
58982017,4984,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
58982090,4984,fix coding style.,0,0,0,0.985585868358612,0.968950092792511,0.9817914962768556,0.0,accept,unanimous_agreement
58982288,4984,fix coding style. `m_` prefix is used for **private** fields only. also keep the fields together and methods (including operators) together.,0,0,0,0.9888662695884703,0.9945669174194336,0.9934086799621582,0.0,accept,unanimous_agreement
58982644,4984,"peer and trackerannouncerequest structs are used internally only so, as i said before, move its declarations to .cpp (not use anonymous namespace for it) and use forward declarations here (outside bittorrent namespace): [code block] also move peer methods definitions in struct itself (no need to separate it since we have it in .cpp).",0,0,0,0.9893704652786256,0.9947513937950134,0.994937300682068,0.0,accept,unanimous_agreement
58983009,4984,"i mean you shouldn't include ` ` here. if you can't build qbittorrent without this, you've incorrectly set up your build environment.",0,0,0,0.9239087104797364,0.9867025017738342,0.9678471684455872,0.0,accept,unanimous_agreement
59044271,4984,the problem turned out to be that some boost asio dynamic libraries could be compiled without rvalue reference move support. all travis-ci comilation attempts would fail without this inclusion. so i disabled the generation of moves. thanks for pointing it out.,1,0,1,0.7611867189407349,0.6862497925758362,0.936093270778656,1.0,accept,majority_agreement
59045597,4984,"fromutf8 meaning: we create qstring **from** utf-8 encoded data. besides, i don't think this shortcut is so necessary.",0,0,0,0.970267415046692,0.97295480966568,0.992921769618988,0.0,accept,unanimous_agreement
59046898,4984,`fromutf8()` only makes sense for the category. all other parameters have been designed to contain either numbers or latin-1 string. but you may leave it. also fix coding style in this line.,0,0,0,0.9880558252334596,0.99408358335495,0.994540512561798,0.0,accept,unanimous_agreement
59047021,4984,fromutf8() is meaningless here.,0,0,0,0.8434892892837524,0.6025999784469604,0.982023060321808,0.0,accept,unanimous_agreement
59047112,4984,fromutf8() is meaningless in these 2 lines.,0,0,0,0.8866426944732666,0.7493876814842224,0.9730650782585144,0.0,accept,unanimous_agreement
59047737,4984,i told you to move these declarations outside the bittorrent namespace. no need to put these **private** name here.,0,0,0,0.9831954836845398,0.9886114001274108,0.9934050440788268,0.0,accept,unanimous_agreement
59048445,4984,why method body isn't here?,0,0,0,0.9370586276054382,0.9842457175254822,0.979891836643219,0.0,accept,unanimous_agreement
59048941,4984,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
59064812,4984,"damn, i wanted to say that everything is ok... why do you complicate everything? why are you not doing just `qstring::fromutf8(gets[""category""])`?",-1,-1,-1,0.9856144785881042,0.9861412048339844,0.9958707690238952,-1.0,accept,unanimous_agreement
59066658,4984,"as far as i know, a general utf-8 byte sequence could contain null byte somewhere in the middle. so i decided to be a little cautious by supplying length. certainly a category could never contain contain such a symbol. i will remove the length.",0,0,0,0.9593968391418456,0.8658768534660339,0.9848970174789428,0.0,accept,unanimous_agreement
59067145,4984,i think the qt developers took that into consideration and qstring::fromutf8() works properly.,0,0,0,0.9730406999588012,0.9831408262252808,0.7864518761634827,0.0,accept,unanimous_agreement
59098870,4984,"in the correct utf-8 string null byte means end of string and can not appear as a part of another character, and that is one of the reasons why utf-8 is so popular.",0,0,0,0.97031432390213,0.9792401790618896,0.9903447031974792,0.0,accept,unanimous_agreement
59100020,4984,"i find this function useless and dangerous. it is used, as far as i see, for string parsing only. if (most likely) the length of the string is not larger than `std::numeric_limits ::max()` the check in it is useless. if it is larger, than it is useless nevertheless because truncating the string we reschedule problem, and it might occur at a place, little correlated with this function. should there be a `static_cast` anybody will feel that something can go wrong and easily find those places (and that would silence compiler as well).",-1,-1,-1,0.9328491687774658,0.8882280588150024,0.9191687703132628,-1.0,accept,unanimous_agreement
59100578,4984,on every usage this string is either converted to `std::string` or used in `qstring::arg()`. why then to store it in 2-byte encoding?,0,0,0,0.9886309504508972,0.9935872554779052,0.9865721464157104,0.0,accept,unanimous_agreement
59100861,4984,"this one is not used as `qstring` at all as far as i can see, and gets converted to `std::string` always.",0,0,0,0.9882610440254213,0.9922330379486084,0.992417812347412,0.0,accept,unanimous_agreement
59115328,4984,"when i was writing this i was concerned about the general case in which a conversion from 64-bit or 32-bit unsigned size_t to a signed 32-bit int could produce a negative number. if the receiving function does not have a proper check, then it could lead to something like undefined behavior. i chose the minimum of the two numbers just to get the program running in this case. thanks to another your comment, i eliminated all places where the conversion was necessary, hence problem doesn't really matter anymore. anyway, thanks for the advice.",0,1,1,0.5349718332290649,0.9026987552642822,0.9689860343933104,1.0,accept,majority_agreement
59115415,4984,"good point, i've converted ip strings to boost::asio::ip::addresses. it has allowed to remove some redundant conversion code.",1,1,1,0.8815454840660095,0.8632793426513672,0.962358295917511,1.0,accept,unanimous_agreement
59115437,4984,thanks for the insight!,1,1,1,0.9648070931434632,0.7008975148200989,0.8744099140167236,1.0,accept,unanimous_agreement
59136308,4984,"although i haven't tried it myself, qt5 documentation example for this function shows that characters from the `exclude` parameter are used as addition to the standard set of [a-za-z0-9] and ""-"" / ""."" / ""_"" / ""~"". thus, i believe, the call can be simplified: [code block]",0,0,0,0.9821510314941406,0.9874618649482728,0.9886921644210817,0.0,accept,unanimous_agreement
59136419,4984,the `toutf8()` call here confuses me. can a string consisting of an ip and a port number contain anything except ascii?,0,0,0,0.6031544208526611,0.69056636095047,0.8526554107666016,0.0,accept,unanimous_agreement
59136591,4984,but you know that toutf8() will produce the correct value here! or do you fundamentally want to have tolaton1() here?,0,0,0,0.9790192246437072,0.9732786417007446,0.9884862899780272,0.0,accept,unanimous_agreement
59136757,4984,"i want the code to be clean and to have an obvious meaning. `toutf8()` makes me think that this piece of the code might be a leftover from a refactoring, a part of string might be forgotten or something like that. this gives me a feeling that i simply don't understand this fragment. so, yes, i want either a comment or `tolatin1()`.",0,0,0,0.7434215545654297,0.9619606137275696,0.8841201663017273,0.0,accept,unanimous_agreement
59454213,4984,amended,0,0,0,0.9597204327583312,0.9808403849601746,0.9751940965652466,0.0,accept,unanimous_agreement
59454234,4984,corrected,0,0,0,0.9779807925224304,0.9229590892791748,0.9726625084877014,0.0,accept,unanimous_agreement
61909651,4984,keep in mind that i am not good with networking details but wouldn't be here to use the `announceipstr` instead of the `ipstr`. (in case 2 different peers come from inside the same nat).,0,0,0,0.9475576877593994,0.9761708378791808,0.9764888882637024,0.0,accept,unanimous_agreement
61910374,4984,"scratch that. i know realize that the nat's ip would be a public ip, but a peer from behind a nat would see/use a private ip.",0,0,0,0.9798881411552428,0.9785827398300172,0.967147707939148,0.0,accept,unanimous_agreement
61913298,4984,"unless i am mistaken, this is a totally unrelated change, right?",0,-1,0,0.6982088685035706,0.6763415932655334,0.9720852971076964,0.0,accept,majority_agreement
61913765,4984,"you need to save the external ip. currently the session_settings are reapplied if the user changes something in the settings window. thus, in that case the possibly empty announce_ip will override the external ip that you set here. take a look at `session::setsessionsettings()`.",0,0,0,0.988211452960968,0.9933564066886902,0.994224727153778,0.0,accept,unanimous_agreement
61915677,4984,i am bit confused here. i tracked back where `annoncereq.peer.ip` comes from and i think it is the ip of the client requesting the peer list. so why does `peertoentry()` potentially return his ip back?,-1,-1,0,0.8174116015434265,0.8017247319221497,0.4987038075923919,-1.0,accept,majority_agreement
61916274,4984,damnit. i messed up reading the code. ignore the above. i'll come back if i figure it out.,-1,-1,-1,0.9881734251976012,0.9915848970413208,0.9949712753295898,-1.0,accept,unanimous_agreement
61920359,4984,why should we care if the currently connected peer has a public ip?,0,0,0,0.9207704067230223,0.9641642570495604,0.970686972141266,0.0,accept,unanimous_agreement
61920554,4984,the same here. why should we care? the routable test should take of it.,0,0,0,0.9089215397834778,0.9856248497962952,0.9765093922615052,0.0,accept,unanimous_agreement
64151512,4984,"the pr changes the way get query parameters are decoded. requestparser used to convert them directly into qstring expecting the percent-encoded byte sequence to be utf-8. on the other hand, tracker announce url can contain arbitrary percent-encoded 20-byte sequences in info_hash and peer_id parameters that have no valid utf-8 representation. therefore requestparser is change to decode to qbytearray and anything that expects qstring should make a second conversion from qbytearray to qstring. qt4 makes implicit conversion to qstring using fromascii() and qt5 uses fromutf8(). that is why explicit qstring::fromutf8() is used for 'category'.",0,0,0,0.9871509075164796,0.9920061230659484,0.9928765892982484,0.0,accept,unanimous_agreement
64151519,4984,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
64151580,4984,"the purpose is to give external ip to external client and otherwise - connection ip. otherwise two local clients on the same network behind a nat router might not be able to share private torrents. if public ip is announced by default(inferred router's external ip and set in session::handleexternalipalert()) and tracker returns external announceip to local clients, then they will try to connect to the router and fail.",0,0,0,0.9813714623451232,0.9900766015052797,0.9939693212509156,0.0,accept,unanimous_agreement
64151583,4984,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
65786201,4984,"minor change: 192.168.0.1 is a lan ip, change it for a wan ip e.g. 87.125.203.161",0,0,0,0.9859241247177124,0.9915660619735718,0.9946618676185608,0.0,accept,unanimous_agreement
484021624,13327,i don't think setting project version for each build system configuration independently is a good idea.,0,0,0,0.8802136778831482,0.7514569759368896,0.8578959703445435,0.0,accept,unanimous_agreement
484022055,13327,this and related changes (removal of findlibtorrent file) seems quite trivial and independent so you can extract it into separate pr.,0,0,0,0.7782171368598938,0.9670329093933104,0.9893152713775636,0.0,accept,unanimous_agreement
484022428,13327,"i don't remember it being present the last time i reviewed it (or i didn't notice it because of other issues). it is very questionable (as well as current splitting into several libraries), so i would remove it before it becomes a new stumbling block here.",0,0,-1,0.619726300239563,0.6871552467346191,0.5727157592773438,0.0,accept,majority_agreement
484022659,13327,what is it for?,0,0,0,0.9822787046432496,0.9774468541145324,0.9935827851295472,0.0,accept,unanimous_agreement
484022849,13327,is it hard to extract this change into separate pr? i mean removing this file and using `feature_option` instead of `optional_compile_definitions`?,0,0,0,0.9799224138259888,0.9945070147514344,0.9935207962989808,0.0,accept,unanimous_agreement
484023029,13327,can't removing of this file and related changes be trivially extracted into separate pr?,0,0,0,0.9681744575500488,0.9946413040161132,0.9932261109352112,0.0,accept,unanimous_agreement
484023163,13327,isn't a good candidate for extracting?,0,0,0,0.9023473262786864,0.96780526638031,0.9787421226501464,0.0,accept,unanimous_agreement
484023376,13327,isn't a good candidate for extracting? you can extract all similar (more or less) trivial cleanups into separate pr.,0,0,0,0.980874001979828,0.9750584363937378,0.9927573204040528,0.0,accept,unanimous_agreement
484042374,13327,why do you change it to interface?,0,0,0,0.9690857529640198,0.9790894389152528,0.9933547973632812,0.0,accept,unanimous_agreement
484044674,13327,"what is `_default_source` intended for, and why is it not available in all unix-like environments?",0,0,0,0.9715014696121216,0.9921910166740416,0.992537558078766,0.0,accept,unanimous_agreement
484047224,13327,single blank line is enough.,0,0,0,0.9827286601066588,0.9866170883178712,0.9810689091682434,0.0,accept,unanimous_agreement
484047480,13327,`if (sns_support)`,0,0,0,0.98820298910141,0.9917703866958618,0.9950157999992372,0.0,accept,unanimous_agreement
484057074,13327,"imo, this comment isn't needed here.",0,0,0,0.9590008854866028,0.9790371656417848,0.9793418049812316,0.0,accept,unanimous_agreement
484057527,13327,i would still prefer this way since it clearly shows that it is feature-dependent declaration (as suggested for entire this approach).,0,0,0,0.9792434573173524,0.9814352989196776,0.958198606967926,0.0,accept,unanimous_agreement
484057729,13327,are you sure it isn't applicable on cygwin?,0,0,0,0.9867560863494872,0.9856541752815248,0.993164837360382,0.0,accept,unanimous_agreement
484058317,13327,why is it needed?,0,0,0,0.9596907496452332,0.9635456204414368,0.9891014695167542,0.0,accept,unanimous_agreement
484059182,13327,if you move private to the previous line you'll keep one indentation level. there is no other items except private ones.,0,0,0,0.9872681498527528,0.983773946762085,0.9938570857048036,0.0,accept,unanimous_agreement
484059237,13327,the same as above.,0,0,0,0.981149673461914,0.988840878009796,0.9920604228973388,0.0,accept,unanimous_agreement
484059658,13327,please don't use multiple spaces in such a way.,0,0,0,0.6463817358016968,0.9334210157394408,0.6238627433776855,0.0,accept,unanimous_agreement
484059767,13327,this too.,0,0,0,0.9670712351799012,0.9832770824432372,0.9919244647026062,0.0,accept,unanimous_agreement
484060743,13327,"please keep current name. just do as i ask, or extract it into separate pr and let's discuss it.",0,0,0,0.977196455001831,0.958113968372345,0.993603765964508,0.0,accept,unanimous_agreement
484061588,13327,i would still split platform and feature conditions even if it adds yet another indentation level.,0,0,0,0.985903799533844,0.9552844762802124,0.9808447360992432,0.0,accept,unanimous_agreement
484061957,13327,please explain the changes like this one.,0,0,0,0.9792490601539612,0.9819153547286988,0.9915658235549928,0.0,accept,unanimous_agreement
484062216,13327,i would move this and the next `if`s outside of outer one.,0,0,0,0.9857968688011168,0.9821627736091614,0.9914039373397828,0.0,accept,unanimous_agreement
485134005,13327,"in this new implementation, it has to be `interface` because `app` needs access to it. if you try building it with `private`, accessing the webui will just yield a web page saying ""not found"".",0,0,0,0.9885568618774414,0.9896173477172852,0.991358995437622,0.0,accept,unanimous_agreement
485140912,13327,"i mostly left it there because it was there previously. it's a glibc thing, i think it's ""common practice"" to define it. otherwise, gcc can complain about some implicit function declartions, if we use those certain functions. there is probably no problem in defining it in other systems i guess (they probably just ignore it). i wonder if it's a problem for linux systems using something like `musl` though. at the moment, we don't need it - i just tried building without it and got no warnings. should i remove it? i think this is mostly for c stuff anyway, not c++. more info: [a link] (also read the second answer) [a link]",0,0,0,0.7337857484817505,0.8677464127540588,0.8862684369087219,0.0,accept,unanimous_agreement
485144284,13327,"isn't this meant to replace qmake in the somewhat near future? i made this change because i didn't think it was a good idea to always read this from the `.pri` and therefore have the cmake buildsystem implicitly depending on the qmake one. in fact, it's not even a good idea to pass the project version as a compile definition, since it causes recompilation of everything. having it defined this way is the first step towards a minor version number-related refactor i have planned for the future that will solve this problem. in the meantime, it's one more number to change in commits that increment the version - not much more work, and i'll make sure to nag about it if anyone forgets.",0,0,0,0.898044228553772,0.9773436784744264,0.940300703048706,0.0,accept,unanimous_agreement
485144761,13327,"i don't think so. these are some of the most important changes in this pr, despite their apparent simplicity.",0,0,0,0.8981178998947144,0.8814134001731873,0.9121193289756776,0.0,accept,unanimous_agreement
485150854,13327,"`build_shared_libs` is a built-in cmake construct. it makes every ""naked"" `add_library()` call (i.ie., one that **does not** specify `static` or `shared`) act as `static` or `shared`, depending on whether it is `off` (default) or `on`, respectively. wrapping it in inside `feature_option()` is just a convenience to have its description printed out - it makes sense to me for it to be printed, since it provides such important functionality and is already there. when it's off (the default) it doesn't change anything that we were already doing. declaring libraries with ""naked"" `add_library()` is good for flexibility, because it gives the builder the choice via the simple meachanism of passing `-dbuild_shared_libs=on/off`. currently, qbittorrent does not build at all with `-dbuild_shared_libs=on` (hence the note about ""experimental development purposes""), but this may change in the future, unless we decide that there is no `add_library()` call in our codebase that would ever make sense to offer such flexibility. docs: [a link]",0,0,0,0.969952404499054,0.9920544624328612,0.9785822629928588,0.0,accept,unanimous_agreement
485152666,13327,"it's a replacement for the previous `alpha1` ""status version"" string (since we're no longer reading it from the `.pri` file). like previously, it is appended to the project version, so that it becomes something like `4.3.0.0dev`. i might flesh this out further or remove it in the future refactor mentioned in [a link]",0,0,0,0.9865320324897766,0.9947417974472046,0.9938442707061768,0.0,accept,unanimous_agreement
485154818,13327,"too complex to factor this out imo, if you don't want it too be changed at all in this pr. it actually sets global compile definitions via directory-level properties which is very incompatible with the new architecture.",0,-1,0,0.7784096598625183,0.8147953152656555,0.5581063032150269,0.0,accept,majority_agreement
485157109,13327,"imo, if we keep it in this pr, we signal the intent that it is used/will be used. since it is no longer used, from here on out, it is also removed at this point. it should definitely be its own separate commit though.",0,0,0,0.9794935584068298,0.9847041368484496,0.9881287217140198,0.0,accept,unanimous_agreement
485157340,13327,same reasoning as [a link],0,0,0,0.985501229763031,0.9865556955337524,0.9924559593200684,0.0,accept,unanimous_agreement
485157529,13327,same reasoning as [a link],0,0,0,0.985501229763031,0.9865556955337524,0.9924559593200684,0.0,accept,unanimous_agreement
485160366,13327,"i changed it for good reason - to not clash with the project name (the name passed in the call to `project()`). otherwise it is confusing and there may be surprises, because cmake defines variables based on the project name.",0,0,0,0.8532976508140564,0.9081851840019226,0.9844964742660522,0.0,accept,unanimous_agreement
485162868,13327,"similar reasoning to [a link] `app` needs access to this. in this new architecture, if this is `private`, you'll end up with missing/broken stuff in the `about` dialog.",0,0,0,0.9817469120025636,0.9876824021339417,0.9837805032730104,0.0,accept,unanimous_agreement
485165471,13327,"not sure, now that i really think about it. what do you think? should i enable it for cygwin?",0,0,-1,0.953805446624756,0.498319923877716,0.6935752630233765,0.0,accept,majority_agreement
485169670,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485169761,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485169844,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485169936,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485170148,13327,"fixed, and fixed all such cases of excessive indentation.",0,0,0,0.980183482170105,0.9840803742408752,0.9887996912002563,0.0,accept,unanimous_agreement
485170227,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485170312,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485170373,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485173818,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485175531,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485180317,13327,"if the package is found without pkg-config, we set the `type` to `required`, so that it displays correctly as a required package. this is all due to the fact that on linux, we first find libtorrent as a non-`required` package to give it a second chance with pkg-config.",0,0,0,0.9863619804382324,0.994956076145172,0.9941309094429016,0.0,accept,unanimous_agreement
485356593,13327,"i think it's more about a few years. most likely, we should make both systems equally ""official"" with the start of qt6 support. so i would not want edit several different files to change the project version, which can cause a lack of synchronization.",0,0,0,0.971760869026184,0.9799076318740844,0.9788561463356018,0.0,accept,unanimous_agreement
485363087,13327,"...that doesn't prevent it from separating from everything else. let me remind you again that my intention is to separate the easily understandable (separate) parts so that we can quickly review and merge them, which should simplify the reviewing of the remaining part. it really takes too much time to review all current pr every time you change it.",-1,-1,0,0.8922343254089355,0.5862897634506226,0.7264359593391418,-1.0,accept,majority_agreement
485372928,13327,"currently qbittorrent isn't supposed to be a set of several libraries. the fact that cmake project divides it into several (static) libraries can only be considered as a workaround that allows cmake to follow the file structure of the project's source code (perhaps due to some drawbacks that prevent it from being done in another way). you should not change this here, especially since the build as a set of shared libraries is not possible currently (at least on windows, it requires changes to the source code).",0,0,0,0.9773287177085876,0.9834849238395692,0.9900197982788086,0.0,accept,unanimous_agreement
485373935,13327,anyway we should use the same value in both build systems.,0,0,0,0.9853336215019226,0.9902358651161194,0.9885651469230652,0.0,accept,unanimous_agreement
485376993,13327,"when i suggest separating something from this pr into a separate one, i assume that it should be reviewed and merged before this one.",0,0,0,0.980021059513092,0.9858657121658324,0.9883232712745668,0.0,accept,unanimous_agreement
485378691,13327,at least you shouldn't separate different unix systems according to it. let either declare or remove it everywhere.,0,0,0,0.9830939769744872,0.9840574860572816,0.9847671389579772,0.0,accept,unanimous_agreement
485448304,13327,i think yes.,0,0,0,0.965730369091034,0.9288822412490844,0.967261016368866,0.0,accept,unanimous_agreement
485453351,13327,"the fact that cmake project divides it into several (static) libraries can only be considered as a workaround that allows cmake to follow the file structure of the project's source code (perhaps due to some drawbacks that prevent it from being done in another way). when shared libraries are out of the question, the professional cmake book still recommends building projects as a set of static libraries, as opposed to using plain `object` libraries, unless there is a special reason that requires its semantics. i did not change anything - like i said - `build_shared_libs` is something that always exists, even if you don't do anything, and it's `off` by default. like previously, the project is till built as a set of static libraries by default. yes, i know such a build is currently not possible, hence the ""(for experimental development purposes)"" part of the description. no one would normally turn the feature on. the question becomes: do you think such a build with shared libraries will never be possible, or that it doesn't make sense to indicate that one day it might be? if so, it is a good idea to remove this. otherwise, we can keep it in, it might encourage someone to investigate and submit patches to make it happen.",0,0,0,0.9557445049285888,0.9889060258865356,0.9920527935028076,0.0,accept,unanimous_agreement
485454736,13327,fixed (changed to `alpha1`). although i would have preferred changing both to `dev`... but that can be a discussion for another time.,0,0,0,0.9866220355033876,0.9897458553314208,0.9833415150642396,0.0,accept,unanimous_agreement
485459927,13327,"well, since you have no reasons for keeping it either, i've removed it.",0,0,0,0.97426038980484,0.971303939819336,0.9878012537956238,0.0,accept,unanimous_agreement
485475925,13327,"this not something that i have changed since the previous pr. in fact, this part has not changed since before i unmarked the other one as draft. this change in how libtorrent is found has always been one of the primary motivations for this whole thing. previously it was too complex and relied on a self-bundled find module that required maintenance, lest it become to outdated and cause problems. now it is really simple: - if not on ""unix"", find libtorrent as a `required` package just like every other package that's mandatory for compilation. - if on ""unix"", first find libtorrent as a non-`required` package, so that if it fails, there is the second chance of finding it with pkg-config. - in either case, set its properties indicate that it's a `required` package so that it shows up correctly in the feature summary output in the list of `required` packages. `cmake_find_package_prefer_config` is set to on so that cmake first tries to find packages by cmake config files, before trying to find them via `find ` modules. if a distro maintainer builds libtorrent in such a way that it doesn't provide cmake config files, and pkg-config is not desirable/available, they can still bundle their custom `findlibtorrent.cmake` module in the `cmake/modules` directory, and cmake will use that. finding packages via cmake config files supplied by the libraries themselves is the preferable way. for example, this is how qt5 packages are found.",0,0,0,0.9022944569587708,0.9025235772132874,0.8218332529067993,0.0,accept,unanimous_agreement
485482243,13327,"this is simply the price to pay for maintaining 2 different build systems like this. but it's not a very high one - it's just a single additional line change, and not very often. we're much worse off if we couple parts of one buildsystem's logic to the other imo. most likely, we should make both systems equally ""official"" with the start of qt6 support. oh god...",-1,-1,-1,0.9887996315956116,0.9802715182304382,0.993085503578186,-1.0,accept,unanimous_agreement
485500222,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
485502819,13327,"okay, it's not that much of a problem for me if others agree with you.",0,0,0,0.9185010194778442,0.888502299785614,0.9414461255073548,0.0,accept,unanimous_agreement
485507495,13327,", are you kidding me by writing such long comments? :thinking_face: you didn't add anything new to what was said about it earlier. but nevertheless, after reading this comment even for the first time, someone realizes that these changes are independent enough to become a separate pr. however, as you wish... if this insistence of yours increases the review time (there will be at least one other reviewer who is most likely not so familiar with the content of these changes), you are to blame.",-1,-1,-1,0.951251745223999,0.9782543182373048,0.9903477430343628,-1.0,accept,unanimous_agreement
485509524,13327,"don't count on me here. i'm not sure what it is, why it's needed, or whether we can safely remove it.",-1,-1,-1,0.8720755577087402,0.7323145866394043,0.8976014256477356,-1.0,accept,unanimous_agreement
485530481,13327,"i'm just trying to explain as clearly as possible, so that there is no misunderstanding (even for the benefit of others). if i really wanted to insult you, i would. i have already stated that i agree with separating into separate commits after the initial review is finished, but separating essential parts of the pr into separate prs doesn't make sense. i'm confused as to why this is posing a problem _now_, since it had previously been solved after extensive discussion.",-1,-1,-1,0.9137640595436096,0.8821151256561279,0.9680848121643066,-1.0,accept,unanimous_agreement
485537453,13327,"well, to be honest i don't really care enough about this change to keep pushing for it right now. its potential benefits for the near and medium term future are unclear, and if we do need such a change for the far future, its quite trivial anyway. so i reverted the internal libraries to be explicitly `static`, like previously, and removed the `build_shared_libs` description from the output.",-1,0,-1,0.9206367135047911,0.640889048576355,0.8357917070388794,-1.0,accept,majority_agreement
485538744,13327,"to the best of my knowledge right now, i think it is safe to remove it.",0,0,0,0.9240873456001282,0.906214952468872,0.9801546931266784,0.0,accept,unanimous_agreement
485548052,13327,"this change does not need to be further reviewed separately, _because it has already been reviewed_. everyone agreed with this change in the previous version of this pr. the new way of creating the macos bundle doesn't need this file at all. it has even been previously tested by kolcha before and verified to work (now you can also verify it yourself by inspecting the result of this build: [a link] this file was only needed because of the `install_qt5_executable` function, which was previously only called once by `qbittorrent/cmake/modules/bundle.cmake`, which in turn was a snippet of code called only once from here: [a link] which is not the way things work anymore.",0,0,0,0.9519913792610168,0.9586604833602904,0.9638565182685852,0.0,accept,unanimous_agreement
485553778,13327,:+1:,0,0,0,0.7570654153823853,0.9166757464408876,0.9328674077987672,0.0,accept,unanimous_agreement
485583480,13327,"i see it. i just don't understand why did you change it. why all web ui related stuff can't be built into corresponding library? well, maybe it's just that the splitting into libraries is still something inappropriate...",-1,-1,-1,0.93548321723938,0.812454342842102,0.6907069683074951,-1.0,accept,unanimous_agreement
485631450,13327,"actually, i just found out that for qt, only the main application component needs to know about the resource sources, regardless of what component they are used in. so i have corrected the code to the following: [code block]",0,0,0,0.983636438846588,0.9896417260169984,0.9923031330108644,0.0,accept,unanimous_agreement
485650380,13327,it doesn't seem quite logical that linking library is not enough to use it.,-1,0,0,0.68302983045578,0.6963329911231995,0.9557302594184875,0.0,accept,majority_agreement
485669159,13327,"library is not enough to use it. i don't know exactly why either, but that's not enough. probably due to some qt implementation detail.",-1,-1,0,0.5091078877449036,0.6384162306785583,0.8827894926071167,-1.0,accept,majority_agreement
485750344,13327,"then i would leave your original version to keep it where it comes from: [code block] so using the library will only require one instruction, as expected: [code block]",0,0,0,0.9872260689735411,0.9929048418998718,0.9957873225212096,0.0,accept,unanimous_agreement
486276483,13327,"ok, fixed.",0,0,0,0.982961356639862,0.933848202228546,0.9758327603340148,0.0,accept,unanimous_agreement
487359564,13327,how do you decide what to put in the list? i mean is there a compiled list or something like that?,0,0,0,0.9799181818962096,0.988467276096344,0.9893101453781128,0.0,accept,unanimous_agreement
487359881,13327,`if (` and please check globally.,0,0,0,0.981846272945404,0.9923805594444276,0.9951580166816713,0.0,accept,unanimous_agreement
487360125,13327,please remove this kind of comments. those are only suitable on github reviews.,0,0,0,0.9821834564208984,0.9841275811195374,0.9876909255981444,0.0,accept,unanimous_agreement
487360701,13327,"can you try compiling without the above 2 macros? if removing them does not produce additional compile warnings/errors then please remove them, as they are not present in winconf.pri either.",0,0,0,0.987910270690918,0.993842601776123,0.994873821735382,0.0,accept,unanimous_agreement
487399752,13327,"i went through [a link] and put in all those that had to do with c++14. recently i submitted a pr to improve cmake's documentation in this regard: [a link] the new result can be seen here, with features properly sorted by c++ standard: [a link] [a link] [a link]",0,0,0,0.9594695568084716,0.969673991203308,0.9483092427253724,0.0,accept,unanimous_agreement
487402274,13327,"just after typing this, i reviewed the sorted list in [a link] and realized i actually missed a couple. also i took the opportunity to sort them all alphabetically after `cxx_std_14`. fixed.",0,0,0,0.9454274773597716,0.9770119786262512,0.8608777523040771,0.0,accept,unanimous_agreement
487421627,13327,you should add an url link to the cmake document.,0,0,0,0.9877402186393738,0.989949107170105,0.996006190776825,0.0,accept,unanimous_agreement
489545061,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
489545212,13327,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
489545348,13327,fixed all instances.,0,0,0,0.9836167097091676,0.9818011522293092,0.9932589530944824,0.0,accept,unanimous_agreement
489882134,13327,"removed, compiled with no errors or warnings. i also learned the following: - it is not necessary to specify the value of `_win32_ie`, so i removed that, too. it is automatically set to the correct value in the `sdkddkver.h` windows header based on the version set in `_win32_winnt`. - with `_win32_winnt` defined, it is not necessary to define `win_ver`, it gets set automatically in the same header. - `ntddi_version` is useful for finer grained version control, but currently it does nothing, since there is no finer grain control possibie for windows 7 versions. it will come in handy when we need to distinguish among windows 10 versions. references: [a link] [a link] - `unicode` and `_unicode` should both be defined (as they are now) references: [a link] [a link]",0,0,0,0.8882866501808167,0.9853317141532898,0.9587205052375792,0.0,accept,unanimous_agreement
489916733,13327,"ok. you shouldn't do more changes than asked here. now you deviate from winconf.pri again, if you want `_win32_ie` (or anything) removed, you should propose in another pr. also the comment about `# windows 7` only adds maintenance burdens imo.",0,0,0,0.9432883858680724,0.9816903471946716,0.7803793549537659,0.0,accept,unanimous_agreement
489924418,13327,"alright, fixed.",0,0,0,0.9674367308616638,0.9633927941322328,0.9881590008735656,0.0,accept,unanimous_agreement
629834175,14959,why is it removed?,0,0,0,0.919741988182068,0.9843220114707948,0.991375744342804,0.0,accept,unanimous_agreement
629834349,14959,changes for this should have its own commit.,0,0,0,0.983453094959259,0.9895357489585876,0.987280011177063,0.0,accept,unanimous_agreement
629834428,14959,and adding quotes too.,0,0,0,0.9864445328712464,0.9865633249282836,0.993309736251831,0.0,accept,unanimous_agreement
629834512,14959,and bumping cmake version too.,0,0,0,0.9844416975975036,0.9907783269882202,0.9917627573013306,0.0,accept,unanimous_agreement
629834724,14959,"the current commit says: `improvements to windows builds`, but this is in unix scope.",0,0,0,0.9882680773735046,0.9942576885223388,0.992861807346344,0.0,accept,unanimous_agreement
629835661,14959,can you move it to cmake/modules?,0,0,0,0.9890262484550476,0.9949919581413268,0.996052861213684,0.0,accept,unanimous_agreement
629835928,14959,"maybe it is just me but i felt this renaming unnecessary, wait for others opinion...",-1,0,0,0.8389326930046082,0.5229703783988953,0.6365931630134583,0.0,accept,majority_agreement
629845089,14959,i'm not familiar with cmake subtleties... where is it supposed to be installed now?,-1,-1,0,0.7210624814033508,0.6790666580200195,0.7504755854606628,-1.0,accept,majority_agreement
629845667,14959,note: the commit title should be `cmake: improve windows builds`,0,0,0,0.9827714562416076,0.9936873316764832,0.9943795800209044,0.0,accept,unanimous_agreement
630125061,14959,"`cmake_install_full_bindir` is undefined and unused (and despite its name, it is not built-in cmake variable either), `expand_bindir` is unused. both are leftovers that were forgotten about and can be safely removed.",0,0,0,0.9874948859214784,0.9939631819725036,0.9919918179512024,0.0,accept,unanimous_agreement
630125687,14959,"i suppose it's better to move this change to its own commit, judging by your other review comments :)",1,1,0,0.9443249702453612,0.889205276966095,0.9695613384246826,1.0,accept,majority_agreement
630125959,14959,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
630126027,14959,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
630127828,14959,"yeah, my apologies, i just saw some low-hanging fruit, got carried away and documented the changes in the commit message body. i'll split these changes into separate commits, and fix the commit message.",-1,-1,-1,0.9427415728569032,0.969635546207428,0.96148681640625,-1.0,accept,unanimous_agreement
630128136,14959,"sure, that's probably a good idea.",1,0,1,0.9120262861251832,0.7906603813171387,0.6900905966758728,1.0,accept,majority_agreement
630137606,14959,"i'm also not a fan of encoding the variable type into its name so explicitly (it's an anti-pattern in most languages), but i feel it is necessary with cmake, where everything is ultimately just a string. imo it better conveys the intention and there is a benefit to readability and consistency: now, all other non-list variables are quoted when expanded, whereas this is never the case for list variables. when one is looking at the code now, there is no doubt whether something is a list or not, and whether it's expansion should be quoted or not (remember that in cmake, `somefunction(${some_list})` will call `somefunction` with each element of `some_list` as a separate argument). this change was made for the same reason it is preferable to first declare a variable that's intended to be a list with `list(append some_list ""foo"" ""bar"" ""baz"")` instead of plain `set` (as in `set(some_list ""foo"" ""bar"" ""baz""`), and also to use `list(append ...)` rather than `set(...)` to append elements.",-1,0,0,0.5001368522644043,0.5290859341621399,0.6781921982765198,0.0,accept,majority_agreement
630139641,14959,"well, bumping the version is inseparable from the part about about deploying the dlls, it is not a separate change. how about mentioning the bump in the commit message body for that particular commit?",0,0,0,0.9722201228141784,0.9823514819145204,0.9931161999702454,0.0,accept,unanimous_agreement
630176802,14959,"it will be installed in the same directory as the executable, same as previously. we don't need the extra `bin` folder in the path; following the standard unix fhs conventions doesn't make sense here. but thanks for pointing this out, i realize now that i had it right the first time in [a link] the destination should be `"".""`, not `""${project_name}""`. otherwise `cmake --install build` will install files to `c:/program files/qbittorrent/qbittorrent` (creating an unnecessary extra `qbittorrent` directory), because `cmake_install_prefix` ([a link] is set to `""c:/program files/${project_name}""` by default on windows.",0,0,1,0.6903700232505798,0.9827392101287842,0.8834794163703918,0.0,accept,majority_agreement
630203413,14959,latest msvc 16.9 still ships cmake 3.19,0,0,0,0.9708486199378968,0.9911791682243348,0.9892770051956176,0.0,accept,unanimous_agreement
630249604,14959,correct! **microsoft visual studio 2019 16.9.4 (16.9.31205.134)** `cmake version 3.19.20122902-msvc_2`,0,0,0,0.9468496441841124,0.9147861003875732,0.8878619074821472,0.0,accept,unanimous_agreement
630264316,14959,"not a problem, it's trivially easy to always use the latest version of cmake. they even have an installer for windows, but i prefer the manual method with the `.zip`, (it gives you the flexibility of easily managing several versions side-by-side, if you have special requirements): 1. download the latest version (right now it's this one: [a link] 2. extract the `cmake-3.20.2-windows-x86_64` contained in the zip to your preferred location (i like `c:\users\user\bin` myself) 3. (optional) add `c:\users\user\bin\cmake-3.20.2-windows-x86_64\bin` to your `path` (start menu -> search for ""edit the system environment variables"" and click it-> environment variables... -> system variables -> `path`). it should go near the top so that it will be prioritized over other cmake executables that may exist in the system. vs will also pick it up no problem. you can always just run the cmake binaries by using their absolute paths of course, if you don't want to add to `path`. whenever you need to upgrade, just delete the old folder, extract the new updated version, and edit the existing `path` component (e.g. `c:\users\user\bin\cmake-3.20.2-windows-x86_64\bin` -> `c:\users\user\bin\cmake-3.21.0-windows-x86_64\bin`) `vcpkg` and the github actions ci builders are already using the latest version, so there is no problem there either. as for linux is is similarly easy; but don't take my word for it, watch the video linked in the op, starting from that timestamp: [a link]",0,0,1,0.8435901403427124,0.8832182288169861,0.6735426187515259,0.0,accept,majority_agreement
630281452,14959,"just checked & `3.20` will be included in next official release/update #### visual studio 2019 **version** 16.10.0 **channel** preview 2.1 **release date** april 22, 2021 **microsoft visual studio 2019 16.10.0 (16.10.31220.234)** `cmake version 3.20.21032501-msvc_2`",0,0,0,0.9639838933944702,0.9909272193908693,0.9857389330863952,0.0,accept,unanimous_agreement
630684340,14959,it is in systemd/qbittorrent-nox@.service.in and it is supposed to be replaced.,0,0,0,0.9887018203735352,0.9944201111793518,0.9938966631889344,0.0,accept,unanimous_agreement
630684743,14959,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
631051521,14959,"oh yeah, good catch, i totally tunnel-visioned and missed the `configure_file()` call after it. i guess then there is a different bug on our hands: as stated before, `cmake_install_full_bindir` is not a built-in cmake variable ([a link] and we don't define it anywhere. so `expand_bindir` will be empty as well. i'll attempt to address this in a separate commit.",0,0,0,0.5146651268005371,0.7566518187522888,0.6181913614273071,0.0,accept,unanimous_agreement
631179786,14959,let user (of build system) decide whether it makes sense or not (by redefining of cmake_install_bindir).,0,0,0,0.9876145124435424,0.9935978651046752,0.993505597114563,0.0,accept,unanimous_agreement
631987742,14959,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
631987856,14959,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
631988360,14959,"resolved. i did end up creating a separate commit for this change, thanks for the suggestion.",1,1,1,0.7125961780548096,0.7350903153419495,0.9564220905303956,1.0,accept,unanimous_agreement
631989530,14959,"any more feedback about this? i lumped this change together with the quoting (see the commit message and body), do you have anything against it?",0,0,0,0.9411819577217102,0.9843920469284058,0.9927248954772948,0.0,accept,unanimous_agreement
631997123,14959,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
631998961,14959,the user can already achieve this in the standard way: either by setting `-dcmake_install_prefix=c:/some/dir/qbittorrent/bin` at configure-time or by passing `--prefix c:/some/dir/qbittorrent/bin` to the invocation of `cmake --install`.,0,0,0,0.9894465208053588,0.9945605397224426,0.994962215423584,0.0,accept,unanimous_agreement
632001928,14959,"resolved - deferred to another pr, for the reasons stated in [a link]",0,0,0,0.982227861881256,0.9772176146507264,0.985460102558136,0.0,accept,unanimous_agreement
632031723,14959,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
641919115,14959,i would drop checking for msvc_runtime_dynamic here.,0,0,0,0.9742395877838136,0.990145742893219,0.9901671409606934,0.0,accept,unanimous_agreement
643396072,14959,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
191643431,9007,i would move it on the previous line in all similar cases of this pr.,0,0,0,0.987058699131012,0.9909257888793944,0.9910390973091124,0.0,accept,unanimous_agreement
191643549,9007,it would be better if we can create session in paused state.,0,0,0,0.9839398860931396,0.992887794971466,0.9892332553863524,0.0,accept,unanimous_agreement
191643790,9007,please don't break the current style. just add `handletorrentaddedalert()` method.,0,0,0,0.979965329170227,0.9859904050827026,0.9948824644088744,0.0,accept,unanimous_agreement
191643827,9007,handlestartupfinished,0,0,0,0.988149881362915,0.9844971895217896,0.9759932160377502,0.0,accept,unanimous_agreement
191644548,9007,startupfinished,0,0,0,0.9788700342178344,0.9689514636993408,0.9736766815185548,0.0,accept,unanimous_agreement
191652715,9007,"add `qasconst()`? or use iterator to loop, this avoids redundant traverse over the container, although i like the use of values() :p",1,1,1,0.7841917872428894,0.9612929821014404,0.9294669032096864,1.0,accept,unanimous_agreement
192126023,9007,"from my experience, pushing to the max limit is rarely a good idea (you reported a libtorrent bug uncovered from this). personally i would use a smaller limit such as int_max/2 or (int_max - 100) to avoid hitting the edge case, final decision is up to you.",0,0,0,0.917311668395996,0.9509737491607666,0.9769944548606871,0.0,accept,unanimous_agreement
192300861,9007,is it still impossible to move it back to session constructor?,0,0,0,0.9740964770317078,0.991163730621338,0.989395797252655,0.0,accept,unanimous_agreement
192315049,9007,q_disabled_copy macro is also needed.,0,0,0,0.985401451587677,0.992910087108612,0.9908345937728882,0.0,accept,unanimous_agreement
192315309,9007,the name is confusing. it just loads the resume data. so resumedataloadingmanager is more appropriate name.,-1,-1,-1,0.8086248636245728,0.6169283390045166,0.7082990407943726,-1.0,accept,unanimous_agreement
192315492,9007,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
192315627,9007,application headers should be the last.,0,0,0,0.9860947132110596,0.9903226494789124,0.9944533705711364,0.0,accept,unanimous_agreement
192315994,9007,getresumedata or getpendingresumedata (since it's not property).,0,0,0,0.9880496859550476,0.9913783073425292,0.9838284254074096,0.0,accept,unanimous_agreement
192316267,9007,public slots should be before signals.,0,0,0,0.9843813180923462,0.991397261619568,0.9917110204696656,0.0,accept,unanimous_agreement
192316682,9007,i would name it resumedataready.,0,0,0,0.9863483905792236,0.99027681350708,0.9486384987831116,0.0,accept,unanimous_agreement
192317055,9007,"thread can be finished, but manager can't. it just can finish its job. so it should be something like loadingfinished.",0,0,0,0.9827117323875428,0.9892645478248596,0.9911933541297911,0.0,accept,unanimous_agreement
192317225,9007,wrong header order.,-1,0,-1,0.860617458820343,0.5913329720497131,0.5396329760551453,-1.0,accept,majority_agreement
192317942,9007,"afaik, qregularexpression constructor accepts qlatin1string so you don't have to use it explicitly.",0,0,0,0.9894497990608216,0.99099999666214,0.992279052734375,0.0,accept,unanimous_agreement
192318179,9007,i would use m_resumedataready name.,0,0,0,0.9878446459770204,0.9884373545646667,0.9891847372055054,0.0,accept,unanimous_agreement
192320159,9007,why qstring cast here? tr returns qstring.,0,0,0,0.9879462122917176,0.9905605912208556,0.9934208989143372,0.0,accept,unanimous_agreement
192320446,9007,"begin confuses. why not ""it""?",0,-1,-1,0.8744842410087585,0.928865134716034,0.5156405568122864,-1.0,accept,majority_agreement
192321093,9007,shouldn't you check for readyresumedata.count() here?,0,0,0,0.9857631921768188,0.9949228167533876,0.9945958256721495,0.0,accept,unanimous_agreement
192329374,9007,we don't want that. we have to have created the mainwindow (with its children) before we start emitting signals from the session.,-1,-1,0,0.6116153597831726,0.5410796403884888,0.9766390919685364,-1.0,accept,majority_agreement
192329421,9007,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
192329598,9007,"you're right. i was in a ""hurry"" to get the code working and i didn't give much thought to naming. (here and the other places you mentioned)",0,0,0,0.7959910035133362,0.6878693103790283,0.9636374115943908,0.0,accept,unanimous_agreement
192329624,9007,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
192329905,9007,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
192330300,9007,"this is just copied from previous code, we was from a pr chocobo1 merged a few hours ago... but, if i don't explicitly pass a qlatin1string string will the raw string be accepted as qlatin1string or qstring?",0,0,0,0.9883439540863036,0.9825453758239746,0.9910635948181152,0.0,accept,unanimous_agreement
192330336,9007,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
192330414,9007,"old code, will fix",0,0,0,0.9858062863349916,0.9693291187286376,0.9929903745651244,0.0,accept,unanimous_agreement
192330521,9007,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
192330959,9007,"maybe we have signaled it already but the other thread hasn't taken the data yet. so no need to signal it again. imo, readyresumedata.count() can't indicate that state",0,0,0,0.9838243722915648,0.9881210327148438,0.9790371656417848,0.0,accept,unanimous_agreement
192331041,9007,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
192331088,9007,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
192331115,9007,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
192331145,9007,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
192331165,9007,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
192344982,9007,oops... forgive. there is no such constructor in this class. i confused it with some other class i used recently.,-1,-1,-1,0.9846166372299194,0.9896650910377502,0.9335338473320008,-1.0,accept,unanimous_agreement
192345715,9007,i mean `(readyresumedata.count() > 0) && !m_signaledready`. otherwise it can emit signal in case when no data available.,0,0,0,0.9862706661224364,0.9934446811676024,0.9925028085708618,0.0,accept,unanimous_agreement
192345909,9007,"or you can emit it in the loop above. update: not so good idea. the previously suggested way is better, imo.",1,0,0,0.790074348449707,0.7432928681373596,0.9331547617912292,0.0,accept,majority_agreement
192379076,9007,you can use existing m_iothread for this purpose. why is yet another thread needed?,0,0,0,0.985207200050354,0.9936456680297852,0.9938429594039916,0.0,accept,unanimous_agreement
192551973,9007,you need to declare named constant for this value.,0,0,0,0.9868208765983582,0.9872023463249208,0.9944832921028136,0.0,accept,unanimous_agreement
192552048,9007,as i said before this additional signal isn't needed anymore.,0,0,0,0.979597270488739,0.9793025851249696,0.993359386920929,0.0,accept,unanimous_agreement
202547718,9007,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
202547760,9007,resumedataloadingmanager,0,0,0,0.9880566596984864,0.9800183176994324,0.9895875453948976,0.0,accept,unanimous_agreement
202547862,9007,m_ prefix is missing here and below.,0,0,0,0.9693459272384644,0.99142587184906,0.9840458631515504,0.0,accept,unanimous_agreement
202548183,9007,"this flag is confusing. it splits lifetime of session in 3 steps (uninitialized, starting, started), but we can handle only last two. it's better to use m_started flag (initially false and assigning true here).",-1,-1,-1,0.8289485573768616,0.7574600577354431,0.7080694437026978,-1.0,accept,unanimous_agreement
202548477,9007,"here you have some subsystems related gui (rss, search) that assume the handled subsystems are already initialized, but you still didn't do it. or i'm wrong?",0,0,0,0.847705066204071,0.9452030658721924,0.9670202732086182,0.0,accept,unanimous_agreement
202548581,9007,"but in your current implementation you don't emit any signals from startuptorrents directly. they will be emitted wgen message loop is started, i.e. when main window is created.",0,0,0,0.9890517592430116,0.9905471205711364,0.9945513606071472,0.0,accept,unanimous_agreement
202550683,9007,"good question. honestly, i can't remember why i wrote this. it is probably a leftover of an earlier version before i published the pr. i'll delete the comment.",1,1,1,0.9430298805236816,0.969736635684967,0.9552037715911864,1.0,accept,unanimous_agreement
202550959,9007,i think i know why i have this here. you need to look the previous commit [a link] there some gui widgets connect to the same signal in order to initialize themselves. eg the transferlist. we want them to do it first while they're disabled and then enable them,0,0,0,0.9761207699775696,0.9682181477546692,0.9740666151046752,0.0,accept,unanimous_agreement
202551205,9007,"the commit that introduced this was 21a72c651f4439352942bec3573f0325b99765e9 the explanation in its commit message seems still relevant. if i am missing something, please enlighten me.",0,0,0,0.9590831398963928,0.946506917476654,0.9852949380874634,0.0,accept,unanimous_agreement
202551326,9007,ok. that seems to work too.,0,0,0,0.963404655456543,0.8935928344726562,0.98101806640625,0.0,accept,unanimous_agreement
202551345,9007,do you mean the lambda? have it as a one liner?,0,0,0,0.9868974685668944,0.9929417371749878,0.992352306842804,0.0,accept,unanimous_agreement
202551362,9007,sure. i am still confused about those macros. eventually i'll get the hang of them.,-1,-1,-1,0.8802415728569031,0.9615843296051024,0.7297421097755432,-1.0,accept,unanimous_agreement
202551485,9007,look at `mainwindow::setenabledwidgets()`. i think i handle all the cases.,0,0,0,0.9746217131614684,0.9647879004478456,0.9930678606033324,0.0,accept,unanimous_agreement
202551510,9007,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
202551551,9007,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
202552083,9007,"i was quick to talk. previously the ui responded immediately for every change during startup. now it responds after the torrents have been loaded. so there's no chance of ""losing"" stuff. what i don't understand is this: why the fix worked? afaik, the mainloop doesn't start before `base::exec()`. so the signals from the session wouldn't be tried to be delivered. so the mainwindow would have done its connects before base::exec(). and after that the signals would have been delivered.",0,0,0,0.9277129769325256,0.9097474813461304,0.861392080783844,0.0,accept,unanimous_agreement
202552303,9007,"on 2nd thought, you probably mean only the capture clause and parameter list.",0,0,0,0.9878609776496888,0.9919735193252563,0.9914093613624572,0.0,accept,unanimous_agreement
202576465,9007,"i don't think this order is so important, because all these processes are taking place in a single event...",0,0,0,0.7231349945068359,0.7225157022476196,0.9339615106582642,0.0,accept,unanimous_agreement
202576731,9007,"okay, let's leave it alone for now...",0,0,0,0.8305284976959229,0.9733022451400756,0.9496392607688904,0.0,accept,unanimous_agreement
202577302,9007,you need also add: [code block] also i would move its initialization it `startuptorrents()` and make it local variable since it isn't needed anywhere else.,0,0,0,0.98932284116745,0.9950969815254213,0.996087908744812,0.0,accept,unanimous_agreement
202662683,9007,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
202665470,9007,i would add `session::isstarted() const { return m_started; }` getter and use it where needed instead of having separate variables.,0,0,0,0.9890273809432985,0.992906093597412,0.9928594827651978,0.0,accept,unanimous_agreement
202666020,9007,it's better to declare it private and connect to `session::startupfinished()` signal somewhere in mainwindow constructor.,0,0,0,0.989083170890808,0.9949945211410522,0.993221879005432,0.0,accept,unanimous_agreement
202666852,9007,you also need to prevent torrent addition in `session::addtorrent()`.,0,0,0,0.9886950850486756,0.993370532989502,0.995514452457428,0.0,accept,unanimous_agreement
202682499,9007,you missed searchwidget there.,0,0,0,0.7743743062019348,0.9655053615570068,0.9912755489349364,0.0,accept,unanimous_agreement
478322634,13288,"libtorrent: rc_1_2 head, 1.2.9 ci doesn't look useful enough to me if it doesn't care about the minimum supported versions of the libraries and tools. since the main contributors often use the latest versions, we risk to merge breaking changes accidentally. ?",0,0,0,0.7394798994064331,0.8012766242027283,0.8049975037574768,0.0,accept,unanimous_agreement
478325807,13288,"additionally, i don't know why we need more ci doing the same thing...",-1,-1,-1,0.574866533279419,0.6427403092384338,0.9594247937202454,-1.0,accept,unanimous_agreement
478349477,13288,"those versions in those comments are only relevant for the builds that use vcpkg (windows and macos). it's a comment that is meant to be updated every time `vcpkg_commit` is bumped - it's there as a convenience so that one does not have to go search for which versions of qt/libtorrent are available with this version of vcpkg. i don't understand this criticism though, because travis and appveyor currently do the same thing - windows and macos builds are built with recent versions of everything (now they are a bit old, but only because sledge hasn't been updating the dependency bundles as they usually do). releases for these operating systems use the latest versions, anyway. i think there was even a somewhat recent discussion where it was mentioned that it is in fact preferable that ci for these systems have recent versions of the libraries so that deprecations are caught early. ensuring qbittorrent works fine with older versions of libraries and toolchain is most relevant for linux, and more specifically, ubuntu and the like. precisely for this reason, there's ci jobs for the 2 currently supported lts releases, all using the default libraries and toolchain except for libtorrent. if you're wondering ""why use the most recent libtorrent release on the ubuntu ci?"", the reason is because even ubuntu 20.04 does not include _any_ 1.2.x version: [a link] the goal for this pr was to come up with a ci solution that at least matched what travis and appveyor are doing right now (builds for windows and macos with recent dependencies, builds for stock ubuntu 18.04 [except libtorrent]), but fix their most glaring issues (fix macos builds, provide ci for stock ubuntu 20.04 [except libtorrent], and get/build the most recent dependencies for windows/macos from official sources, rather than relying on a personally maintained bundle). if you want to add more jobs with older library versions for windows and macos, that can be done later. though i don't see why that would be desirable, given the reasons above. this pr is just meant to be a drop-in replacement for the current ci solutions. in case it wasn't clear: this is meant to replace both travis and appveyor.",-1,0,0,0.9038234949111938,0.8388291001319885,0.8992457985877991,0.0,accept,majority_agreement
479192106,13288,"if you take our current disadvantages as a basis, your changes won't do much good. as a result, we will trade bad for worse.",-1,-1,-1,0.8893498182296753,0.8036863207817078,0.8615102767944336,-1.0,accept,unanimous_agreement
479375117,13288,"what exactly is ""worse""? i believe i've presented a convincing case as to how and why this alternative matches and eventually exceeds our existing solutions capability-wise.",-1,0,0,0.7657544016838074,0.945600688457489,0.9743077754974364,0.0,accept,majority_agreement
491101319,13288,i dislike having explicit versions here and there. can't you default them to the latest version?,-1,-1,-1,0.9851590991020204,0.9783297181129456,0.9654054641723632,-1.0,accept,unanimous_agreement
491101540,13288,this one too.,0,0,0,0.9650936126708984,0.9861132502555848,0.987944483757019,0.0,accept,unanimous_agreement
491101825,13288,those comments would become outdated easily.,0,0,0,0.8544248938560486,0.7425694465637207,0.955994725227356,0.0,accept,unanimous_agreement
491101961,13288,those aren't suitable here.,0,0,0,0.7215790152549744,0.8052601218223572,0.8269174098968506,0.0,accept,unanimous_agreement
491102538,13288,"those are not portable at all (i meant for other distro users), there is no point to upload them.",0,0,0,0.9041779041290284,0.7417911887168884,0.9823890328407288,0.0,accept,unanimous_agreement
491103001,13288,"have you tested it? afaik without proper packaging, those are useless.",-1,-1,0,0.8761963844299316,0.9379791021347046,0.9726391434669496,-1.0,accept,majority_agreement
491103877,13288,imo building with libtorrent releases are pointless when you already build with some git branch rc_1_2.,-1,0,0,0.55098956823349,0.6697494983673096,0.9304514527320862,0.0,accept,majority_agreement
491105794,13288,why not `windows-latest`? so we don't need to bump it regularly.,0,0,0,0.9847025275230408,0.9892388582229614,0.9887174367904664,0.0,accept,unanimous_agreement
491106753,13288,`macos-latest`?,0,0,0,0.9863542914390564,0.9932951331138612,0.994904398918152,0.0,accept,unanimous_agreement
491108746,13288,"since the binary produced aren't portable, there is no sense to build in `ubuntu-18.04`.",0,0,0,0.9699861407279968,0.9882851839065552,0.987468719482422,0.0,accept,unanimous_agreement
491113329,13288,"that's not good practice, it has the potential to break our ci and will be difficult to track down - one would have to check recent updates to _all_ actions to figure out what changed. it is preferable to bump these every now and then. the ci itself will catch any breakage due to specific version bumps, and the whole situation becomes much easier to investigate and resolve, since we'll know immediately what changed.",0,0,0,0.8173907995223999,0.8717917799949646,0.6029270887374878,0.0,accept,unanimous_agreement
491114194,13288,"similar reasoning to [a link] especially because currently, vcpkg package versions depend on the vcpkg version itself. this is expected to change int the near future though, when they implement versioning support.",0,0,0,0.9853126406669616,0.993697226047516,0.9906484484672546,0.0,accept,unanimous_agreement
491114697,13288,"they are meant to be changed when one bumps the `vcpkg` version, for easy reference.",0,0,0,0.9885411262512208,0.9932634234428406,0.9943212270736694,0.0,accept,unanimous_agreement
491115431,13288,"this is something i wouldn't prefer, especially our codebase is not for ci itself. any opinion on this?",0,-1,-1,0.7923281788825989,0.7050691246986389,0.7583264112472534,-1.0,accept,majority_agreement
491115797,13288,"i disagree, it's a useful note for maintainers, and demystifies the purpose of the `force appleclang to compile libtorrent with c++14` step in the macos ci. once we drop libtorrent 1.2 support, and assuming libtorrent >= 2.x won't have similar abi issues (check the linked issue report), we can remove such comments.",0,0,0,0.9101961255073548,0.9559364318847656,0.9145379066467284,0.0,accept,unanimous_agreement
491119532,13288,"well, this artifact is clearly labeled ""ubuntu"" but anyway, the point of the artifacts produced by this workflow is not to be used as nightly builds for regular usage (for that, we can have a nightly builds workflows, like i have proposed in the past and am now developing an improved version of), but instead, for troubleshooting purposes. for example, you can run `ldd` on the generated executable, check the generated dependencies graph, the generated `compile_commands.json` compilation database, etc.",0,0,0,0.9815542697906494,0.9921436309814452,0.9905345439910888,0.0,accept,unanimous_agreement
491120351,13288,"well, i would argue if the maintainer doesn't know this, then he isn't really suitable for the job. i think this issue is widely known among the developers working on this project.",0,0,0,0.8121895790100098,0.8930519223213196,0.9629848003387452,0.0,accept,unanimous_agreement
491122527,13288,"had tested the macos builds during the development of the cmake pr, and found that cmake correctly generated the app bundle and that the executable ran. the relevant code hasn't been modified since, and the ci builds macos builds the same way as one would in their machine. plus, as mentioned in [a link] there are other things that are included in the artifact archive that are useful, not just the executable; and the executable generated by this workflow is not meant for general use, just for troubleshooting and smoke testing purposes (e.g. does it run?).",0,0,0,0.946835160255432,0.987699031829834,0.9884887337684632,0.0,accept,unanimous_agreement
491127378,13288,"no builds currently use `rc_1_2` head. that comment is just for reference to explain that, in the current version of vcpkg, passing `--head` when installing libtorrent would pull in `rc_1_2` head. as explained in [a link] these comments are meant to be adjusted as one bumps the vcpkg version.",0,0,0,0.9893330335617064,0.9952476620674132,0.9943554401397704,0.0,accept,unanimous_agreement
491128191,13288,"the ci is meant to test for specific platforms, right? we don't want those changing (too much) without notice beneath our feet. bumping versions in ci should be a conscious decision, not an automatic one. see also [a link] and similar comments.",0,0,0,0.9421088695526124,0.9649971127510072,0.9887562394142152,0.0,accept,unanimous_agreement
491129373,13288,"we need to build in `ubuntu-18.04`, to make sure no changes accidentally break support for it. when we decide that we're going to drop support for it, we'll do so as a conscious decision, and remove it from ci accordingly. as for the binaries not being portable, that is not an issue, see the earlier comment about that: [a link]",0,0,0,0.9779545068740844,0.9918225407600404,0.9903786182403564,0.0,accept,unanimous_agreement
491129590,13288,"i don't think you presented reasonable examples. why would one examine the binary generated for other distro than the user's one? and this is limited to ubuntu distro. i presume the user would be more interested in building the project himself in his distro and look at the result binary. why would one look at the dependencies graph from the ci? he should produce it on his own machine if he is really into it. same goes for the compile_commands.json you mentioned. i still don't think those will aid any troubleshooting. and those artifacts still seems very rarely used, i would still prefer not uploading them.",0,0,0,0.9496277570724488,0.9198063611984252,0.7271410822868347,0.0,accept,unanimous_agreement
491129720,13288,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
491133021,13288,"why make it harder for people to discover these kinds of things? prospecting contributors that are confused by the code that these comments refer to will have a much harder time making sense of it until they find on their own the information that is present in these comments currently. imagine being new to the project and wondering why the c++ standard is forced in the macos ci. without these comments, you'll waste much more time finding out the reason. plus, will you remember this issue easily without such comments 3-4 months for now? i won't. we all have more important stuff to do and remember. without such comments, it's much more effort to dig out the relevant details and reasons behind related changes in the future if we need to refer back to this issue.",-1,0,-1,0.6173956394195557,0.4961343705654144,0.8153891563415527,-1.0,accept,majority_agreement
491133703,13288,"this sounds like we are supporting/targeting a specific distro version, but i can tell you, we do not. we only list out the required lib versions for users/distros to follow. we also take into account the library version availability of the distros when bumping our lib requirements. wrong way of reasoning, if that were the case, we should be building & testing for every distro out there which is wrong.",-1,0,-1,0.9203556180000304,0.7511991858482361,0.9629974365234376,-1.0,accept,majority_agreement
491137998,13288,"those aren't special cases when working with c++ codebases. it is universally known that the dependencies *should* be compiled with the same compiler & c++ version mode, otherwise weird things ensues. at least you should move this comment near to the respective command and make it succinct that will fit in a single line.",0,0,0,0.5279900431632996,0.9596295952796936,0.9271817207336426,0.0,accept,unanimous_agreement
491139068,13288,"this extreme aversion to commits concerning ancillary tasks not directly related to source code changes (let me guess, such bumps ""pollute the git history"") is starting to seriously bother me. no, it does not make ""the codebase only about the ci itself"". these kinds of changes are as much part of the guaranteeing smooth sailing of the project as much as anything else. they **are** part of the project's development. i don't want to have ""fun"" trying to figure out which action version bump completely broke or changed something about our ci each time in the future, and neither do you for sure. if you have concerns that the git history has or will become too difficult to sort through, the right course of action is to find a proper solution for that, such as agreed-upon commit prefixes similar to what [a link] and other projects do, not fight every single proposed change with the ""git history pollution"" argument. hell, a lot of projects have bots automatically committing translation updates and other things and they do just fine.",-1,-1,-1,0.9847399592399596,0.9672040343284608,0.9721668362617492,-1.0,accept,unanimous_agreement
491146990,13288,"who knows how many minor version bumps for ci script are going to follow once this pr is merged? of course this is a major concern for the developers. i'm ok with explicit versions for vcpkg scripts under only one condition: don't **ever** change it if it ain't broke or without good reasoning. if you think that can uphold, then i have no issue with them.",-1,0,-1,0.5561907887458801,0.8443023562431335,0.7317913770675659,-1.0,accept,majority_agreement
491148882,13288,"the thing is, everything should also work fine if libtorrent is compiled with a lower c++ version than qbittorrent, and libtorrent's officially stated minimum c++ standard requirement is 11. a lot of people, including many official and community distro packages, have been building qbittorrent against c++11-built libtorrent. recently i have dealt with a torrent (heh) of issues from several users and official/community distro packages that were working but suddenly broke because they were neither building libtorrent with c++14 _or_ c++11 and defining `torrent_cxx11abi`. it is very easy to accidentally run into this issue, and it is not easy to figure out the root of the problem just from the ensuing error message at buildtime; hence why i think this needs a bit of explanation. the current explanation is only 2 more lines, and it's already incomplete (it does not mention the existence of a workaround when building libtorrent with c++11). plus, while currently only the macos build requires the workaround of forcing the compiler version in practice, the issue is universal and os-agnostic in principle, and it might be the case that in the future we may also need to apply the same workaround to other systems. that's why the comment is at the top.",0,0,0,0.6558614373207092,0.7137681841850281,0.7260081768035889,0.0,accept,unanimous_agreement
491149885,13288,"the libtorrent version is fixed to some git commit and requires regularly bumps to keep up with the latest development. are you fine with this? i know you already approved, so i'm just double checking.",0,0,0,0.9724016785621644,0.9679247736930848,0.9903726577758788,0.0,accept,unanimous_agreement
491151694,13288,your whole reasoning made me think ci script is (still) not the right place you want to put the info at.,-1,0,0,0.8079877495765686,0.8615120053291321,0.94097101688385,0.0,accept,majority_agreement
491157746,13288,"that is possible, but currently it is fixed to a tag (`libtorrent-1.2.10`), not a commit. though the case can be made to pin exclusively to commits, as tags are mutable (in the sense that it is possible to change the commit they point to) on the remote, commit hashes are not. there is no requirement to keep this regularly updated, though i think it is useful to bump whenever some important change lands in libtorrent that may have important implications in our ci, or when whenever we introduce patches that includes code of the form `if libtorrent_version >= 1.2.xx`, where `1.2.xxx` is greater than the current version in ci (yes, i will deal with libtorrent 2.0 later...). plus, being able to bump the version with just a single small change committed in a text file is very powerful, compared to having to manually preparing a custom build and hosting it on builds.shiki.hu.",0,0,0,0.9756186008453368,0.9914354681968688,0.9903643727302552,0.0,accept,unanimous_agreement
491158732,13288,"as little as possible, and as ""in bulk"" as possible. if you think that can uphold, then i have no issue with them we are in agreement then.",0,0,0,0.959046483039856,0.9375696182250975,0.961659610271454,0.0,accept,unanimous_agreement
491159105,13288,where do you suggest i put it instead?,0,0,0,0.980661392211914,0.9895025491714478,0.9947656393051147,0.0,accept,unanimous_agreement
491193412,13288,"maybe they happen to be working in a machine with a different distro, but are still interested in resolving a bug that's happening on ubuntu? and what about users and contributors who actually use ubuntu? this is certainly useful for them as a reference. if you want more ci jobs for more distros, that can be added later. why would one look at the dependencies graph from the ci? he should produce it on his own machine if he is really into it. same goes for the compile_commands.json you mentioned. ci is supposed to be the canonical reference; it's useful to compare to when troubleshooting. the `compile_commands.json` in particular is very useful to examine the actual command-lines used to compile the program, even for systems that you may not have access to in the moment or at all. you're not forced to download them or look at them if you think you don't need them, but why remove them if they can be useful for other people? there is nothing to lose, storage is free (and if it stops being free, we'll change it then).",0,0,0,0.9524085521697998,0.9827101230621338,0.9449877142906188,0.0,accept,unanimous_agreement
491199342,13288,"we only list out the required lib versions for users/distros to follow. we also take into account the library version availability of the distros when bumping our lib requirements. the most important distro to consider when evaluating library availablity is ubuntu lts (and also debian stable, to an extent). i was under the impression that we support the current lts ubuntu releases, if not the full 5 years, at least an honest attempt at that (3 years, which is what the flavors support, is good enough). how can we at lest not have that commitment? we still support windows 7, and it has been hell to argue for dropping support for it. how does that make any sense?? the bug handling team is already strained with having to deal with weird heisenbugs and issues with 10+ year old eol proprietary oses, that don't even have support for basic stuff like paths over 256 characters, and yet we can throw users of the most popular linux lts distro under the bus at any moment? seems like the priorities for os support are all wrong. same for the webui still supporting ie 11 (in a practical sense, and also in the sense that there is an official commitment to that: [a link] that's an implication that is not present in what i said. at the very least we should have ci for the most important configurations, which is what this pr achieves. and of course, if you want to add support ci for more distros (the more the better), that can be done later.",0,0,0,0.8855337500572205,0.9269222021102904,0.9618675112724304,0.0,accept,unanimous_agreement
491642889,13288,for the record: [a link],0,0,0,0.9854597449302672,0.9904003739356996,0.9952417612075806,0.0,accept,unanimous_agreement
491642953,13288,"where someone looks for info for compiling qbt, i suppose this would be the guide in our wiki. the ci script should mainly contain ci actions and comments about them, not detailed descriptions to some particular issue.",0,0,0,0.9828905463218688,0.9818000793457032,0.9922475814819336,0.0,accept,unanimous_agreement
491643150,13288,for the record: [a link],0,0,0,0.9854597449302672,0.9904003739356996,0.9952417612075806,0.0,accept,unanimous_agreement
491643159,13288,for the record: [a link],0,0,0,0.9854597449302672,0.9904003739356996,0.9952417612075806,0.0,accept,unanimous_agreement
491643951,13288,"eh... i won't be dreaming for unrealistic situations, lets be practical here, just remove it, now. if the need arises we can reintroduce it later. no, that is not what i meant. disagree, but lets leave it another time. how often is this file going to change between regular commits in qbt? seldom. then there is little point to store it for every commit. macos is an exception since no one on the team have access to it.",0,-1,0,0.7175927758216858,0.9635036587715148,0.7047329545021057,0.0,accept,majority_agreement
491645049,13288,"it only shows your opinion is still (currently) the less popular one, on user side and among the developers. you're getting derailed into os support discussion... that is not the point here. so you're installing some official packages from ubuntu, does the versions that offered in ubuntu-20.04 and ubuntu-18.04 differ that much?",-1,-1,-1,0.5114558339118958,0.7068707346916199,0.6123237013816833,-1.0,accept,unanimous_agreement
491680531,13288,"the main problem is boost and qt: - boost: - 18.04: [a link] - 20.04: [a link] - qt: - 18.04: [a link] - 20.04: [a link] you're getting derailed into os support discussion... that is not the point here. sad that apparently ""popularity"" trumps good maintenance practices and is more important than the bug reporting team. it's not even as popular as you might think. there's always a very vocal minority of semi tech illiterate pseudo power user lunatics holding on to old windows versions unreasonably long because of ""nostalgia"" or ""it worked better""/""i don't like the one"" (without providing valid objective reasons) or ""the new version spies more"" (lol). just look at how many people held on to windows xp well past what was reasonable. note that this is of course very different from keeping a secondary installation around (sometimes in a vm) for preservation purposes of some software/hardware that doesn't run reasonably anywhere else. my problem is when people make such arguments for their daily driver machines. if they want to run museum piece oses, they can use older qbittorrent versions. they just won't be able to install new ones. as far as devs/contributors go, i don't think anyone really minds dropping support for windows 7. their only concern also comes from this perceived ""popularity"" among the user base. it's logical that one doesn't want to unnecessarily disrupt the workflow of completely reasonable average joes. but that's exactly the flawed premise - nowadays, people who torrent holding on to windows 7 are not reasonable average joes, or ""power users"" worth catering to. let me be clear: i don't want to deal with issues relating to windows < 10 any longer (and i'm sure other contributors/active users who actually help solve windows issues don't either), and i don't think the lunatic vocal minority is more important than me or my contributions to the project. the team is already small enough. we have to make compromises. this is yet another thing that unnecessarily clutters the issue tracker and increases maintenance burden.",-1,-1,-1,0.986236572265625,0.9908673763275146,0.99079167842865,-1.0,accept,unanimous_agreement
491681973,13288,"this 3-line comment is not a ""detailed description about an issue"". i'd argue it falls precisely into the category of ""comments about ci actions"". does it not? maybe i can change the wording of the second line to make it really obvious that it has bearing on other things written in the file: ""\# **currently, in all ci jobs,** ~c~compilers that don't default to >= c++14 ~must be~ **are** overridden **to >= c++14 mode to avoid the issue.**"" seriously what do you have against little snippets of documentation in the code, to explain non-obvious decisions?",0,-1,0,0.5477729439735413,0.7053624391555786,0.772081196308136,0.0,accept,majority_agreement
491682776,13288,"you are being too narrow minded. just because _you_ don't see the benefits (or don't think _you_ will ever make use of them), does not mean they are not there. it does not cost you or anyone else anything extra to have this. why do you keep insisting on removing it? you don't pay (both figuratively and in the literal sense) for what you don't use here. but when it _does_ change, it is extremely useful and valuable. it saves a lot time in troubleshooting and may help catch issues earlier. so what exactly is ci supposed to be? it must be a guarantee that ""things work"" for certain standard setups/environments. what's the point of it if it has no bearing on reality? someone who builds qbittorrent on windows 10 should be able to look at the windows ci run and figure out ""hey, the ci is completing successfully, if i can't build, there must be a problem on my end - i'll use the ci as a reference/point of comparison to solve my issue"".",-1,1,-1,0.7609327435493469,0.6426466703414917,0.9287748336791992,-1.0,accept,majority_agreement
491684032,13288,"then present a real world useful example, not imaginary ones. i already said it can be introduced later when it really helps. [a link] those arguments doesn't really help here. you're here presenting a pr and trying to win the team members approval. if we can't compromise/converge our opinions then that is that..",0,0,-1,0.7406687140464783,0.5818850994110107,0.5638775825500488,0.0,accept,majority_agreement
491684430,13288,"20.04: 5.12.8+dfsg-0ubuntu1 now i think it is worth to test in both os versions, 18.04 for our minimum qt requirement and 20.04 for qt lts (obsoleted though). and i also suppose when we raise qt requirement to >= 5.12 we can drop building in 18.04. you presented your thoughts, ok.",0,0,0,0.9495015740394592,0.6591489911079407,0.9815545082092284,0.0,accept,unanimous_agreement
491688420,13288,"this is not imaginary. imagine any contributor wants to quickly check the artifacts produced for another system at any time. this gives us some flexibility. personally i have diagnosed windows compilation issues during my testing thanks to this. if this is valid for macos, why not for other systems? we shouldn't make assumptions about what systems contributors have available to them at any given time. the burden of proof is on you to explain why exactly it is better to _not_ make these artifacts available. again, i've explain how it is useful to others. just because they are not useful to you, that's not a good reason to remove this. i already explained it already really helps. what? my point is simply that the presence of these artifacts won't bother you in any way. they are useful for those who make use of them, and don't get in the way of anyone else. if you just want to look at the build logs, you just look at the build logs. you're withholding your approval for stupid reasons. seriously, i get the impression from this review that you didn't really bother to understand what is going on and why certain things are done in certain ways. have you even looked at the example run and its jobs? [a link] worse, you are actively dismissing other's workflows and pushing the for the removal of features that i have already proven to be useful.",-1,0,0,0.512255072593689,0.7195734977722168,0.8288248777389526,0.0,accept,majority_agreement
491689253,13288,"hopefully, not in the near future.",0,0,0,0.8935234546661377,0.8133578300476074,0.8583341836929321,0.0,accept,unanimous_agreement
491689884,13288,"oh, so you're trying to force/provoke me into approval!? and doubt a reviewer is not using his brain!? i already replied they are not: [a link] sigh, i cannot continue to work with you with such disrespectful tone... no point of me staying here any longer.",-1,-1,-1,0.9884512424468994,0.9849364161491394,0.9950827360153198,-1.0,accept,unanimous_agreement
491691854,13288,"see this [a link] franciscopombal disrespected my review/opinion and created a simplified version of my words to downplay my viewpoint (and presumably make fun of me along the way). really, i don't see why i should work with that guy anymore. given the situation now, i think i reserve the rights to ignore him and all of his work. if you still think this pr has any value, just go merge it instead. sorry, the way you acted is over the line, your [a link] with your tone is just within the limits but splattering your non-sense outside this pr is not. our collaboration ends here.",-1,-1,-1,0.9872653484344482,0.9907321333885192,0.9927559494972228,-1.0,accept,unanimous_agreement
491694579,13288,"get off your high horse. this whole review of yours is a tremendous disrespect to my work from the start. review comments such as [a link] prove you didn't bother to understand what was going on or the context up to this moment [a link] you never showed any initiative to solve the broken ci problem, which was an urgent matter to resolve, and now that i come here with everything already done, you post a review with stupid nonsensical nitpicks. additionally, you did very little to help expedite the prs that this one depended on. you just swoop in at the last minute, post comments that show you haven't been keeping up with discussions, and i have to repeat everything all over again. your attitude towards other contributors such as me and their opinions are incredibly dismissive. in the past few months i have made many important contributions for the project. i helped solve many important bug reports, some of which ended up directly contributing to uncovering important underlying issues in libtorrent. me and a few others are helping keep the issue tracker afloat in the current situation that the project is facing, and you just shit all over that with comments like [a link] ""you presented your opinions, ok""? what the fuck is that? me and others bust their asses off helping out people and solving bug reports, and you want to keep an unsustainable support policy for the project that results in us accruing technical debt, and making the issue tracker situation even more difficult than it already is. at the same time, you show little preoccupation in removing recent setups from ci (ubuntu 18.04) for no good reason, and i have to waste a lot of time explaining why that is a bad idea, or even just inconsistent with your other opinions about os support. seriously, who are you to say what is or isn't important in this ci script? you won't care about it, we all know it's gonna be me or others who are going to maintain it and fix it anyway. you're not gonna read users logs and help solve bugs. let others contribute to the project in the ways that you won't.",-1,-1,-1,0.989254117012024,0.9855440258979796,0.9880472421646118,-1.0,accept,unanimous_agreement
491694850,13288,you are free to point out how any of that is a misrepresentation of what you said.,0,0,0,0.8902699947357178,0.9304087162017822,0.936984121799469,0.0,accept,unanimous_agreement
491695453,13288,"bravo, now you showed your true self. well, unlike you my limited free time and motivation is a factor, but i guess you care less about that. well at least the currently missing maintainer asked me (and some others) to help doing the reviews and merge them if they are decent enough. i'm not obliged to review/comment on every pr/issue, that wasn't on the contract. please also take note of my viewpoint.",1,1,1,0.7052507996559143,0.6412807703018188,0.8956103324890137,1.0,accept,unanimous_agreement
491696335,13288,your disrespectfulness.,-1,-1,-1,0.9708024859428406,0.964364230632782,0.9878352284431458,-1.0,accept,unanimous_agreement
491697958,13288,"now _you_ just showed your true self. your free time is not more valuable than that of others. straw man. no one said that, and that was never the implication. --- let's get this back on topic, for the sake of the project. the artifacts are useful for some contributors, even if they are not useful to you. the comment about the libtorrent abi issue should be mentioned in compile guides, but it is also very relevant where it is in the ci script. it quickly makes it clear that the issue is universal, not just a workaround for the ci environments.",0,1,-1,0.5467367768287659,0.7793286442756653,0.7510554790496826,,review,no_majority_disagreement
491700734,13288,"[a link] straw man what? being led astray by your own imagination? you are free to believe what you like, but what i said is the fact, **there was no such rule on the contract/from the start** when i accepted this role. so keep your asses off me. for the sake of your precious time spent on pr i believe. you showed your rude attitude and now expect me to just get back and play along, wtf? my last [a link] still stands. i don't deny it and i already told you to [a link]. and... you asked me where is the better place, i [a link] and you ignored it, what, were you just asking for fun? seriously, what is the point of getting my approval as [a link]? i'll give you a hint that it is still possible to get this pr merged in the current form when the maintainer is present, that is, if you can persuade him, probably won't be hard.",-1,-1,-1,0.9894501566886902,0.9897009134292604,0.992612600326538,-1.0,accept,unanimous_agreement
491703132,13288,"? you are arguing about a point i never made, which is ""you're obliged to review/comment on every pr/issue"". just leave your grievances aside for a moment and get back on topic. i'm making an effort to brush aside your disrespect and abusive nitpicking, surely you can put up with my rude attitude. no, it doesn't. i have even stated that this is personally useful to _me_, if not for anyone else. is that not enough? if it caused you serious trouble to have this in, i would consider an alternative, or even removing it. but it doesn't, so why do you want to force me to remove something that is useful to me (and possibly to others)? contrary to what you might think now, i _would_ go out of my way to change it if it caused you trouble, because that is a way i show you respect. but you are not presenting valid reasons and forcing me to remove something that i make use of. that is something that i cannot respect, and which i interpret as disrespect toward me. do you mind giving a concrete suggestion? personally, i don't see a way to further compress the comment while preserving its intended usefulness, and i don't feel like trying to guess what you want. just state it clearly, if i disagree, i'll state clearly my alternative, and so forth until we reach an agreement. i don't disagree with adding it to somewhere in the wiki as well, i'll do it eventually. your approval is not worthless. the point of at least seeing these last discussions through is to expedite this is to improve the project, despite our own grievances and differences of opinion.",-1,-1,-1,0.9724569320678712,0.9815922379493712,0.9746121764183044,-1.0,accept,unanimous_agreement
491709624,13288,"i'm merely telling a fact which might be something you didn't realize before. alright, but i'm noting that each reviewer has their own focus area and lax area and no one except the maintainer is except from this process, and this is how the current review process goes. i see no harm (little inconvenience at most) in adding this functionality a bit later, from my pov why not hold it for a while and see how it goes? from my pov taking resources but not putting it into use is wasteful. i think i already explained myself clear enough. each person has their own mind and thoughts, it is not always possible to see reasoning from others mind, even trying very hard. i faced similar situation numerous time when submitting prs, i believe all team members have. i've learned not to take it personal as it is merely subjective opinions on matters. i think my previous suggestions are concrete enough, i'll add here that imo it is taking too many lines that it is distracting when reading the ci script and it should be moved near to the affected actions as said before. i hope you also agree that reviewer comments (especially from team members) are not worthless. fyi, when i propose a pr, i find it useless to keep insisting my own reasoning when sufficient information is presented and the reviewer still thinks otherwise, in that case i can only trust the reviewer is knowing what he is doing. an accepted yet compromised pr is still better than a never-to-be-merged pr which contributes nothing to the project. also as you probably already know, the current employed merge process requires 2 out of 3 approvals from selected team members, i believe this is deliberately designed to collect opinions from multiple trusted minds and have tighter quality control on the pr, this also means making compromises are not unexpected and in fact, happens very often.",-1,1,0,0.6674501895904541,0.524914562702179,0.5580382943153381,,review,no_majority_disagreement
491725039,13288,"i understand it. i realize there are certain unspoken ""partitions"" (some clearer than others) in the code base. for example, rss is glassez's domain, while front-end and other webui stuff is piccirello's, etc... is ci supposed to be your ""turf""? this has occurred organically, as far as i can tell. perhaps we should clarify these things internally. but that is a discussion for another time. well, from my pov, why not add this now, if it doesn't inconvenience anyone and is already useful for some. we'll see how it goes, and if there are problems, we remove it. there is nothing being ""wasted"", as a public project we have ""unlimited"" artifact storage (and it's not like the usage that will result from this workflow is abusive of that, it's not like 6 10 gib artifacts are uploaded each time) that does not interfere with other things. right, it is natural to have differences of opinion. the thing is, why should your subjective feeling that this could be added a bit later trump my objective arguments explaining that it is already useful and that there is no objective reason not to include it now? ok, i already explained why i think it makes more sense for this to be at the top, but i'm willing to compromise here. how about: [code block] on top of the `force appleclang ...` step? 1 line, doesn't extend past column 100 even when accounting for indentation. of course. i want to get this merged asap. the thing is - this comes back to the point i made above about my good, objective reason to include the artifact stuff now, rather than later, and the fact that there is no good reason not to do it. i already compromised in the matter of the comment, as there is some merit to your request - the usefulness of the comment diminishes a bit, but isn't completely lost by moving it and shortening it. however, in what concerns this discussion about artifacts, you must either accept that _i_ know what i'm doing, or present a good, objective reason why this shouldn't be included now. sorry, but i can't accept that the reason i remove it is purely ""because i had to appease chocobo1"". i don't think this sets a good precedent, and i don't think it is a healthy way of handling collaboration in a project. the design of the system is good, i agree. but this triumvirate has been broken as of late - as we all know, the merging process has been a 2-man show for the last several months. participation and input from 3 members with merging rights is essential; imo, it can avoid situations like these. i do realize that there is nothing that can be done about this in the near future at least.",0,0,0,0.7769556641578674,0.8933281898498535,0.688353955745697,0.0,accept,unanimous_agreement
491725291,13288,extracted from [a link] for visibility:,0,0,0,0.9881331324577332,0.9906551241874696,0.9956438541412354,0.0,accept,unanimous_agreement
491789106,13288,"ok. i reevaluated and now i think the ubuntu logs maybe are a bit useful, we should keep them, sorry for the inconveniences. my viewpoint on the ubuntu binaries are still the same, we should still keep them out in this pr. but here is another idea/compromise to improve the situation here, it probably won't be easy but it would justify uploading them from my pov and you probably would like to investigate it in a follow up pr (so this one gets merged quickly). this is about linking statically with all of our direct dependencies (zlib, openssl, qt, etc), in this way the binary is much more (still not entirely) portable across distros and the upside is the audiences would be larger than just the ubuntu community. as said before, you shouldn't make it personal, either on yourself or on others and this is really how the review process goes, by collecting everyone opinion (even the ones you take it personally) and both sides making compromises so the opinions may converge and the result quality is consistent/improved in the end.",-1,-1,-1,0.8365756869316101,0.7216924428939819,0.9827319979667664,-1.0,accept,unanimous_agreement
492077003,13288,"but here is another idea/compromise to improve the situation here, it probably won't be easy but it would justify uploading them from my pov and you probably would like to investigate it in a follow up pr (so this one gets merged quickly). this is about linking statically with all of our direct dependencies (zlib, openssl, qt, etc), in this way the binary is much more (still not entirely) portable across distros and the upside is the audiences would be larger than just the ubuntu community. something like this? [a link] i agree that it would be a nice addition, definitely worth investigating later. :+1: i also changed the comment now, in the latest force push.",0,1,1,0.8917335271835327,0.5574376583099365,0.7549999952316284,1.0,accept,majority_agreement
492086455,13288,"the libtorrent version is fixed to some git commit and requires regularly bumps to keep up with the latest development. are you fine with this? i know you already approved, so i'm just double checking. i don't mind being sticked to a specific libtorrent version. but as i've said many times, we need to stick to the versions of libraries/tools (of course, among the supported ones) that are least likely to be used by team members to make sure that we don't accidentally break their support. and since most of us prefer to use the fresh versions (the latest or close to the latest), in ci environment, we should use the minimum supported versions or the closest to them if possible.",0,0,0,0.9368560314178468,0.8513674736022949,0.7982456088066101,0.0,accept,unanimous_agreement
492173579,13288,"i think we should keep the builds simple by omitting this setting. who knows what (unexpected) impact would this setting bring in? also we don't use it in official releases, we shouldn't do it here either.",0,0,0,0.9674380421638488,0.9551368951797484,0.9632601737976074,0.0,accept,unanimous_agreement
492184455,13288,"fixed. also removed `arch`, since `x64` is the default anyway.",0,0,0,0.9889848232269288,0.994209885597229,0.9927098751068116,0.0,accept,unanimous_agreement
494483161,13288,"i don't think it's a good idea to build something on ci in a way that is unlikely to be used in real life. afaik, it is usually linked dynamically on linux. build artifacts are not the purpose for which ci works. this is just a by-product that can be useful to someone. personally, i don't mind having it here if it doesn't cost us anything. but don't want too much from it.",-1,0,0,0.7238082885742188,0.5512329936027527,0.5948217511177063,0.0,accept,majority_agreement
494499521,13288,"right, but the point is the current artifacts are only targeted to ubuntu users (and hardly useful to the point that i would prefer not uploading them). if we want something really useful and universal then the only way is static builds (uncommon but viable).",0,0,0,0.967482328414917,0.9507029056549072,0.9432554244995116,0.0,accept,unanimous_agreement
494512800,13288,"it's just a side effect of the fact that we use ubuntu here... what i'm really worried about is whether we'll miss build error by having a static linking here? well, that is, under some conditions, the static one is successful, but the dynamic one fails?",-1,0,-1,0.9549321532249452,0.8255760669708252,0.958360195159912,-1.0,accept,majority_agreement
494515701,13288,it would be very unlikely under normal conditions although it still depends on the build script.,0,0,0,0.9455626010894777,0.969519317150116,0.9554021954536438,0.0,accept,unanimous_agreement
1314166536,19542,it is incorrect to use it here.,0,-1,0,0.5500715970993042,0.5128386616706848,0.8406998515129089,0.0,accept,majority_agreement
1314174967,19542,"etc. where it is `class(constructor, params)` and there is no ambiguity during compilation.",0,0,0,0.9876731038093568,0.9925561547279358,0.9946552515029908,0.0,accept,unanimous_agreement
1314176882,19542,"also i would use more explicit variable names, e.g. `certpath` since it represents a path, not a certificate.",0,0,0,0.988498032093048,0.9924973249435424,0.9937636256217957,0.0,accept,unanimous_agreement
1314177923,19542,i would construct base path once and then reuse it: [code block],0,0,0,0.9873203039169312,0.9905959367752076,0.994668185710907,0.0,accept,unanimous_agreement
1316888285,19542,i feel `peers` is redundant in all such names.,0,0,0,0.9449834823608398,0.8027727007865906,0.9262221455574036,0.0,accept,unanimous_agreement
1324359212,19542,redundant empty line.,0,0,-1,0.8240636587142944,0.797183632850647,0.7013556957244873,0.0,accept,majority_agreement
1324360221,19542,cert file has no extension unlike other two files. is this done by intention?,0,0,0,0.9867076873779296,0.9886093139648438,0.9947086572647096,0.0,accept,unanimous_agreement
1324362056,19542,why is `.dh` file handled differently? is it valid use case when torrent uses its own cert and key files but default `.dh`?,0,0,0,0.9828041791915894,0.9931522607803344,0.990598738193512,0.0,accept,unanimous_agreement
1324401166,19542,"i didn't think much about it. i somehow just followed sub-conscientiously the fact of adding the suffix to the key file the same way haproxy does ([a link] do you think it's better to add a suffix? maybe having ` .cert.pem`, ` .key.pem` and ` .dh.pem` would be better for operating systems where the suffix actually matters. i'm too used working on linux.",-1,0,0,0.6015273332595825,0.8456028699874878,0.9481239318847656,0.0,accept,majority_agreement
1324402382,19542,"yes, the dh parameters aren't actually secret. it's not problematic at all to re-use the same parameters for all torrents. so having only one parameters file, but per-torrent cert/key is a valid use-case.",0,0,0,0.9872543215751648,0.9880451560020448,0.9891080856323242,0.0,accept,unanimous_agreement
1324412452,19542,"i re-named most variables to remove ""peers"". except `sslpeerscertificatesdirectory`, where it seems correct to keep it.",0,0,0,0.9879323840141296,0.9930041432380676,0.9923357367515564,0.0,accept,unanimous_agreement
1324456011,19542,"i don't think so. if `sslcertificatesdirectory` looks like it has too broad a meaning, then i would use `torrents` instead of `peers`. (after all, we are talking about per-torrent certificates, aren't we?)",0,0,0,0.8304517865180969,0.970710813999176,0.9685875177383424,0.0,accept,unanimous_agreement
1324467943,19542,i would just use `.crt` for certificate files without adding the same `.pem` extension for all the files.,0,0,0,0.9891875386238098,0.994677186012268,0.9919791221618652,0.0,accept,unanimous_agreement
1324481142,19542,"nevermind. i'm ok with your suggestion. iirc, `.pem` extension is often used for all such files.",0,0,1,0.9782382249832152,0.5889447331428528,0.6597325801849365,0.0,accept,majority_agreement
1324493717,19542,why not save certificate files on the disk to be reused after restart?,0,0,0,0.97967129945755,0.9887337684631348,0.9926377534866332,0.0,accept,unanimous_agreement
1324499500,19542,this is actually a good idea,1,1,1,0.9605985879898072,0.97804194688797,0.9936239719390868,1.0,accept,unanimous_agreement
1324921028,19542,added the logic to save certificates on disk and to clean up when the torrent is removed from the session.,0,0,0,0.9877793192863464,0.9936038851737976,0.9951581358909608,0.0,accept,unanimous_agreement
1349938761,19542,it would be nice to make sure that `sslport` is at least different from regular `port`.,0,0,0,0.9814605116844176,0.9906354546546936,0.9918718934059144,0.0,accept,unanimous_agreement
1350180401,19542,i believe this check is redundant.,0,0,0,0.6909947991371155,0.7235528230667114,0.9248053431510924,0.0,accept,unanimous_agreement
1350183837,19542,please place `sslcertificatesdirectory()` and `setsslcertificatesdirectory()` together.,0,0,0,0.9863492250442504,0.9940587282180786,0.9954684972763062,0.0,accept,unanimous_agreement
1350263623,19542,what's wrong with default permissions?,0,0,0,0.6013751029968262,0.9443276524543762,0.8673759698867798,0.0,accept,unanimous_agreement
1350266320,19542,i discourage creating such trivial wrappers in new contributions. just use `m_ui->spinsslport->value()` (etc.) in-place.,-1,0,0,0.8031582236289978,0.9829246401786804,0.9612361788749696,0.0,accept,majority_agreement
1350267266,19542,please prevent conflicts with regular port.,0,0,0,0.9820353984832764,0.9724628925323486,0.9884662628173828,0.0,accept,unanimous_agreement
1350270132,19542,wouldn't the following work? [code block],0,0,0,0.985877275466919,0.988905906677246,0.9954392313957214,0.0,accept,unanimous_agreement
1350275038,19542,"imo, the wrong type of error. everything is fine with the parameters. this is the very action that is not allowed, isn't it? on the other hand, why not allow it? ""ssl peers support"" can be enabled later.",0,-1,-1,0.5814889073371887,0.7582704424858093,0.8798914551734924,-1.0,accept,majority_agreement
1350277946,19542,i wouldn't expect that it throws exception. just add the warning message to the log.,0,0,0,0.98518306016922,0.9206275343894958,0.9668102860450744,0.0,accept,unanimous_agreement
1381629498,19542,"it's best (security) practice to only allow the owner read the secret key. other than that, it's not necessarily needed.",0,0,0,0.976767361164093,0.989437222480774,0.9891015887260436,0.0,accept,unanimous_agreement
1382507715,19542,"why is it here? shouldn't this be done after you've created the file? besides, it's there too... or did you intend to apply it to `basedir` here instead of `keypath`?",0,0,0,0.9832215309143066,0.993783473968506,0.9910902976989746,0.0,accept,unanimous_agreement
1382508829,19542,i would prefer it to be used written correctly as `ssl` in the public space: [code block],0,0,0,0.9838238954544068,0.9828396439552308,0.9935935139656068,0.0,accept,unanimous_agreement
1382528786,19542,do you meant: [code block] ?,0,0,0,0.9875802993774414,0.99369615316391,0.9937392473220824,0.0,accept,unanimous_agreement
1382537972,19542,i believe `p->message()` is irrelevant here.,0,0,0,0.972433626651764,0.9776582717895508,0.9889339208602904,0.0,accept,unanimous_agreement
1382529379,19542,"for new code, `id` should use camel case: [code block]",0,0,0,0.9881829619407654,0.9937866926193236,0.995203733444214,0.0,accept,unanimous_agreement
1382530021,19542,[code block] please change all `ssl` instances to `ssl`. i'm going omit mentioning this.,0,0,0,0.9789657592773438,0.9826864004135132,0.9953224062919616,0.0,accept,unanimous_agreement
1382530139,19542,camel case for variables: [code block] and apply it to other variables below too.,0,0,0,0.9881520867347716,0.9924214482307434,0.9936429262161256,0.0,accept,unanimous_agreement
1382554803,19542,"why would it be irrelevant? it might carry error message from os/libary, would it not?",0,0,0,0.9309041500091552,0.978820502758026,0.9752964973449708,0.0,accept,unanimous_agreement
1382558154,19542,"because it is not the reason of ""unable to set ssl certificates for torrent"". it is message from ""torrent_need_cert_alert"" so it should be about the fact that torrent needs ssl sertificate.",0,0,0,0.9684863090515136,0.9944264888763428,0.9893980026245116,0.0,accept,unanimous_agreement
1382559884,19542,"ok, ignore the `p->message()` part.",0,0,0,0.9632635712623596,0.9862856268882751,0.9936456680297852,0.0,accept,unanimous_agreement
1382915182,19542,are you sure about this one ? it seems to go against the current convention in the html file.,0,0,0,0.9891836643218994,0.991019070148468,0.9476335048675536,0.0,accept,unanimous_agreement
1382921037,19542,"doing it, but you have other parts of code which work with ssl certificates which use the `.*ssl.*` naming convention.",0,0,0,0.9883400201797484,0.9906318187713624,0.990373969078064,0.0,accept,unanimous_agreement
1382926237,19542,"would be good to update the code style document, as it's not clear enough about this point. i checked it on purpose when writing this code and i had the impression that `{}` are optional only for single-line `if` constructs (and are mandatory for loops). to confirm this, you asked me to change a a single-line `for` into the version with explicit brackets some time in the past :)",1,1,1,0.7630900740623474,0.9816038608551024,0.9687187075614928,1.0,accept,unanimous_agreement
1382927446,19542,"yes, i intended to use basedir",0,0,0,0.9855452179908752,0.975160539150238,0.993561625480652,0.0,accept,unanimous_agreement
1382968063,19542,"sorry i brought conflicts. i'm under the impression that we (major qbt contributors) prefer to omit the brackets for single line statement's body, unless there is if-else. yeah the coding style doc is a bit unclear about it.",-1,-1,-1,0.9882655143737792,0.9898186326026917,0.9820550084114076,-1.0,accept,unanimous_agreement
1382970638,19542,"yes. for now, new code (variables) should use camel case unless it is transmitted over the wire (for example the preference data).",0,0,0,0.9885103106498718,0.994856595993042,0.9914711117744446,0.0,accept,unanimous_agreement
1382972628,19542,i suppose they should be renamed at a later time...,0,0,0,0.9781926870346068,0.9846561551094056,0.986270785331726,0.0,accept,unanimous_agreement
1383038243,19542,"coding guidelines say: when the conditional statement in if/else has only one line and its body occupy only one line, this also applies to loops statements. notice that for a series of if - else branches, if one branch needs braces then all branches must add braces. imo, this clearly describes cases where brackets can be omitted. this is not a requirement (just ""acceptable conditions"" to do it this way), although we prefer to do it where possible.",0,0,0,0.9824054837226868,0.9862889051437378,0.9891504645347596,0.0,accept,unanimous_agreement
1383243065,19542,"fwiw we had a similar situation with the webui certificate. a long time ago it was the same as this, importing the data directly. however later it became a problem when the certificates expired and users need to reload them. it was suggested that qbt should record the cert file paths instead. this way users can just replace the cert files and restart the webui for it to take effect. i suppose we should follow that lesson here. also the folder/file creation in `torrentimpl::setsslcertificate()` (and therefore `m_sslcertificatesdirectory` too) seems to be doing things unrelated to torrenting and i would like to somehow simplify it. for example, one would have guessed that `torrentimpl::setsslcertificate` might be reading cert files and passing the data to libtorrent instead of saving certs to disk.",0,0,0,0.9697623252868652,0.9789575338363647,0.9574824571609496,0.0,accept,unanimous_agreement
1383252029,19542,excuse me i wasn't following the latest development and discussions. imo for every torrent the cert paths would need be designated separately. and of course we can have some default paths for non-specified torrent and users can opt to use it if they want.,0,-1,-1,0.9221618175506592,0.8559055328369141,0.5221158266067505,-1.0,accept,majority_agreement
1383283864,19542,i pushed the change to set certificates using their path. but i don't fully understand the suggestion about deporting the logic for creation of directories/certificates somewhere else. would it be better located in the m_session? on the last subject: is the configurable per-torrent certificate path something difficult to add later ? or is it desired in this initial implementation ?,0,0,0,0.9634997844696044,0.9882526993751526,0.9859247803688048,0.0,accept,unanimous_agreement
1383542398,19542,"just to be clear, i was suggesting that qbt don't handle the creation of directories/certificates. instead qbt will just take cert paths from user and pass it to libtorrent. the cert files will need to be placed on disk beforehand and this part is done manually by the user. also, regarding security, i suppose this is better since the certs aren't transmitted over the net and therefore we don't need top security for our web server/api implementation. not sure if you meant it is done. but i would expect more changes if that idea of ""pass cert path"" is accepted. i.e. the `setsslcertificateaction` will not accept cert data and only accept cert paths. (and rename it to `setsslcertificatepathaction`?) i don't think it will be too difficult: [code block] and i don't insist the ui side to be complete in this pr.",0,0,0,0.930669367313385,0.9550779461860656,0.9618490934371948,0.0,accept,unanimous_agreement
1384015178,19542,"i'm personally interested in the workflow where the actual certificate content is set via the api. it doesn't prevent us from implementing two separate actions: one for setting the certificates via path; the other using their content, but i would really like to see a variation of the current behavior implemented.",0,0,0,0.7655515670776367,0.7754027247428894,0.9438467621803284,0.0,accept,unanimous_agreement
1384022753,19542,"also, note that the code snippet which you proposed : [code block] doesn't encounter for the fact that m_nativehandle doesn't preserve the configuration across restarts. so we'll need to persist the paths passed to this function on qbittorrent side. on restart, libtorrent raises the `handletorrentneedcertalert` alert and qbittorrent would have to call `m_nativehandle.set_ssl_certificate` again with the paths it took care of preserving accross restarts.",0,0,0,0.9889726042747498,0.9937933683395386,0.9931855201721193,0.0,accept,unanimous_agreement
1384346903,19542,"as for setting certificates via paths, does it really make sense to make it more complicated than just limiting yourself to use pre-defined paths already implemented in this pr? i.e. ` / . `. otherwise it would require to implement the way of assigning/changing and storing such custom paths within torrent ""resume"" data.",0,0,0,0.9860808849334716,0.9934619665145874,0.989535629749298,0.0,accept,unanimous_agreement
1390054257,19542,"excuse my late reply, was busy in weekdays. personally i don't like this way. it doesn't scale well if the certs are many and qbt will be responsible for storing/managing them. in an ideal world, the paths would be stored in torrent resume data (and able to be manipulated in ui/api) like glassez said. however i don't oppose a 'simpler' implementation like glassez [a link] for now.",-1,-1,-1,0.9831946492195128,0.9849510192871094,0.80881267786026,-1.0,accept,unanimous_agreement
1390477068,19542,i clearly miss-understand the scalability issue which worries you. can you please be more specific in the explanation of your concerns?,-1,-1,-1,0.8066431283950806,0.8041344285011292,0.6796014904975891,-1.0,accept,unanimous_agreement
1411737575,19542,", i allow myself to re-iterate my question from the previous message: what are the scalability concerns for the current solution ?",0,0,0,0.9647689461708068,0.9847602248191832,0.983288824558258,0.0,accept,unanimous_agreement
1443656554,19542,sorry for (very) late reply. i intend get my hands on this pr in the near future. maybe i can clear things up when that time comes.,-1,-1,-1,0.987058699131012,0.9887444972991944,0.99118971824646,-1.0,accept,unanimous_agreement
1443657959,19542,"i believe that we should imagine a typical scenario of its use, so that in the end it does not turn out that we get a very reliable, scalable, etc., but at the same time a unusable feature.",0,0,0,0.93595153093338,0.9642711877822876,0.9654423594474792,0.0,accept,unanimous_agreement
1468551160,19542,"i have played with ssl torrents a bit and in the mean time, had a little discussion with other team members. i understand ssl torrents better than before. also i had a bit different idea/approach to support ssl torrents in qbt. i figure it would be easier for us that i submit my ideas in another pr for further discussions: #20338",1,0,1,0.5759544372558594,0.765073835849762,0.7667974829673767,1.0,accept,majority_agreement
232111372,9824,"i guess you won't need `copyasconst()` here, also you could use [a link] to help verify.",0,0,0,0.9886083602905272,0.983616590499878,0.9910418391227722,0.0,accept,unanimous_agreement
232111527,9824,and here,0,0,0,0.9779892563819884,0.968537986278534,0.9837828278541564,0.0,accept,unanimous_agreement
232111937,9824,seems need to add `qasconst` for both loops.,0,0,0,0.9727091789245604,0.9854162335395812,0.9894481897354126,0.0,accept,unanimous_agreement
232112194,9824,seems no need here,0,0,0,0.9796552658081056,0.9431426525115968,0.9883132576942444,0.0,accept,unanimous_agreement
232112392,9824,or you can just remove all the newly added `copyasconst` and only add them back when clazy complains :p,1,0,1,0.7881383299827576,0.456737756729126,0.9401201009750366,1.0,accept,majority_agreement
232113234,9824,"you should not replace the use of `torrents()` by `m_torrents`, those are different objects, or you should make another commit for it.",0,0,0,0.9841327667236328,0.9929956793785096,0.9939796924591064,0.0,accept,unanimous_agreement
232113688,9824,why remove the `&`?,0,0,0,0.9721091389656068,0.9875696301460266,0.983627438545227,0.0,accept,unanimous_agreement
232156962,9824,oops this was a copy paste mistake i'll revert these.,-1,-1,-1,0.9447169899940492,0.9713725447654724,0.9901195764541626,-1.0,accept,unanimous_agreement
232156976,9824,warning: loop variable 'hash' has type 'const bittorrent::infohash &' but is initialized with type 'const qstring' resulting in a copy use non-reference type 'bittorrent::infohash' to keep the copy or type 'const qstring &' to prevent copying,0,0,0,0.9875807762145996,0.9929755926132202,0.9854879975318908,0.0,accept,unanimous_agreement
232162467,9824,"ok, do you mind rename `hash` -> `info` (or `infohash`)? i find the old name easily mixed up with the element type of the container, and the ones below.",0,0,0,0.9877170920372008,0.9930917024612428,0.9944057464599608,0.0,accept,unanimous_agreement
232164803,9824,certainly.,0,0,0,0.9540490508079528,0.9294094443321228,0.9672027230262756,0.0,accept,unanimous_agreement
232167296,9824,this is one of the 4 warnings clazy complains.,0,0,0,0.5868071913719177,0.7968862652778625,0.9424563646316528,0.0,accept,unanimous_agreement
232167468,9824,this too.,0,0,0,0.9670712351799012,0.9832770824432372,0.9919244647026062,0.0,accept,unanimous_agreement
232184311,9824,but these are `std::vector` containers and this guy says: [a link] what am i missing?,0,0,0,0.9749892950057985,0.9439179301261902,0.9880073070526124,0.0,accept,unanimous_agreement
232194292,9824,i did it in the coding style commit.,0,0,0,0.9849284291267396,0.99047589302063,0.9917465448379515,0.0,accept,unanimous_agreement
232451334,9824,"i didn't realize they are not qt containers, so it's ok.",0,0,0,0.9687097668647766,0.938129425048828,0.5369033813476562,0.0,accept,unanimous_agreement
232912780,9824,"adding & adds another indirection which is not necessary here, also you should switch `auto const` -> `const auto`",0,0,0,0.9875403046607972,0.9944233298301696,0.9944104552268982,0.0,accept,unanimous_agreement
232913416,9824,can it be `const autodownloadrule &rule`?,0,0,0,0.9892756938934326,0.9954450130462646,0.9951500296592712,0.0,accept,unanimous_agreement
232913890,9824,please try `const qlist &trackers`,0,0,0,0.9869436025619508,0.9946231842041016,0.9955724477767944,0.0,accept,unanimous_agreement
232914572,9824,`const auto &rule`?,0,0,0,0.988243281841278,0.9932101368904114,0.9944266080856324,0.0,accept,unanimous_agreement
232914889,9824,please also change to `const bool b`,0,0,0,0.9854214191436768,0.9920682907104492,0.9959741234779358,0.0,accept,unanimous_agreement
232915583,9824,this should still be `qstring url`,0,0,0,0.9875904321670532,0.99327951669693,0.995511531829834,0.0,accept,unanimous_agreement
232918799,9824,"i think this change will have problems (crash), better: [code block]",0,0,0,0.9693363904953004,0.6516157388687134,0.8104534149169922,0.0,accept,unanimous_agreement
232919585,9824,or [code block],0,0,0,0.9859119057655334,0.9898264408111572,0.9949644804000854,0.0,accept,unanimous_agreement
232921218,9824,"also i think you need to take extra caution for every foreach -> for replacement: especially when the body of `for` loop are removing things, preferably test them to make sure they don't crash.",0,0,0,0.9715789556503296,0.963184416294098,0.9824838042259216,0.0,accept,unanimous_agreement
232946088,9824,i had a warning here: `warning: loop variable 'quote' of type 'const qchar' creates a copy from type 'const qchar' use reference type 'const qchar &' to prevent copying`,0,0,0,0.9858605861663818,0.9830130934715272,0.9934700727462769,0.0,accept,unanimous_agreement
232946145,9824,"no... 3 lines below for const: `error: 'this' argument to member function 'accepts' has type 'const rss::autodownloadrule', but function is not marked const` and 1 line below for reference: `error: binding value of type 'const rss::autodownloadrule' to reference to type 'rss::autodownloadrule' drops 'const' qualifier` i was wondering what's preferable here, keep the reference or use qasconst?",0,0,0,0.9692091345787048,0.9905925393104552,0.9831364750862122,0.0,accept,unanimous_agreement
232946208,9824,"i thought i had tried that but guess not, thanks it works.",1,1,1,0.9540430903434752,0.9788644313812256,0.9735032320022584,1.0,accept,unanimous_agreement
232946223,9824,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
232946244,9824,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
232946274,9824,"actually i have tested qasconst and what you said and it doesn't crash, also tested without any of them and naturally it crashed. if you still think i should do it i will.",0,0,0,0.956873655319214,0.8946439027786255,0.9733226895332336,0.0,accept,unanimous_agreement
232946875,9824,never mind it crashed when doing it to multiple torrents.,0,-1,0,0.856181800365448,0.5414185523986816,0.7614940404891968,0.0,accept,majority_agreement
232955781,9824,"i looked at all loops in case they modified the container but i couldn't find any other, they are too many though and maybe i missed them.",-1,0,0,0.6635217070579529,0.9121077060699464,0.9799177050590516,0.0,accept,majority_agreement
232972775,9824,i looked at all of them again and i only found this one. i'll make a copy of `m_sessions`.,0,0,0,0.9857791662216188,0.9814062118530272,0.9912857413291932,0.0,accept,unanimous_agreement
232973991,9824,"ok, just switch the order of ""auto"" & ""const"".",0,0,0,0.9868853092193604,0.9933673739433287,0.9935332536697388,0.0,accept,unanimous_agreement
232975247,9824,"i would avoid doing changes here, it is not legacy code.",0,0,0,0.8386385440826416,0.9732987880706788,0.9755280017852784,0.0,accept,unanimous_agreement
232982350,9824,"actually this line is more than 1.5 years old, before qasconst was introduced to qbt [a link] maybe can say if it should be changed.",0,0,0,0.9883878827095032,0.9890572428703308,0.9901829361915588,0.0,accept,unanimous_agreement
233041751,9824,"i found this too, `deletetorrent()` modifies m_torrents, i'll change `m_torrents` to `torrents()`",0,0,0,0.9852645993232728,0.9918062686920166,0.9943609833717346,0.0,accept,unanimous_agreement
234452425,9824,this change is incorrect. actual m_rules items should be modified inside this loop.,0,0,0,0.9519927501678468,0.9461749196052552,0.9745061993598938,0.0,accept,unanimous_agreement
234507218,9824,as for this change (and many other `copyasconst` usages): since `mid()` doesn't actually return shared copy of some container `detach()` will not do anything except checking for references count so it's more lightweight than copy constructor called from `copyasconst()`.,0,0,0,0.9870252013206482,0.9943221807479858,0.9910168647766112,0.0,accept,unanimous_agreement
234581211,9824,"i have no idea how you know what you said and consequently, how to spot the other copyasconst that aren't needed.",0,-1,-1,0.707974910736084,0.7347193956375122,0.8153164386749268,-1.0,accept,majority_agreement
236045718,9824,"as a rule, it obviously stems from the meaning of the function. e.g. `mid()` here creates new list containing some subset of elements of affected list. just try to examine the meaning of all other affected functions. if you're in doubt in a particular case, ask for my explanation. the problem of ""detach"" is greatly exaggerated. when we began to use range based for loop, we saw a warning that it can cause ""detach()"". and we blindly rushed to solve it, without going into details. but now it is obvious to me that in most cases this is not a problem at all. , don't you mind join this discussion?",-1,0,0,0.7123739719390869,0.7309347987174988,0.9162959456443788,0.0,accept,majority_agreement
236048647,9824,"there are a few existing copyasconst that seem to return a new container e.g. [a link] [a link] and [a link] are they correct or do i remove them? there is a case that returns a container that is returned from another function, it should keep copyasconst right? [a link]",0,0,0,0.9873915314674376,0.9931221604347228,0.99356210231781,0.0,accept,unanimous_agreement
236061134,9824,"if this isn't much work, it might be worth if we can make an non-exhaustive whitelist of situations (and put in coding guidelines) while reviewing this pr, specifying where `copyasconst()` can be omitted. for example: `mid()` function in qt types.",0,0,0,0.9880388379096984,0.9919639825820924,0.9853923916816713,0.0,accept,unanimous_agreement
236080496,9824,"are they correct or do i remove them? it should be removed in all 3 cases above. no in case if first function returns no copy of existing object (as in your example). in general, i came to the conclusion that the methods that return a newly created container (a copy of a temporary object, to be exact) are the vast majority. i do not even come to mind the opposite case (at least in qt), it needs a good look. as for qbittorrent own code, the best solution would be to change the type of those few methods that return a shared copy of the class internal container so that they return a constant reference instead (e.g. [a link] and remove `copyasconst` at all so it did not tempt us. if we still encounter the affected method somewhere in the third-party code (or in qt), we can always store its value in a pre-declared constant and iterate over it.",0,0,0,0.8781729936599731,0.8109111785888672,0.9824703335762024,0.0,accept,unanimous_agreement
236083919,9824,i thought copyasconst was introduced to avoid that? [a link],0,0,0,0.9881157875061036,0.9919726848602296,0.9906670451164246,0.0,accept,unanimous_agreement
236084491,9824,"yes, but we mistakenly thought that the problem was much bigger. it's not a problem to do so if it concerns isolated cases (at least for me). but if there are a lot of objections, you can keep `copyasconst` for that cases.",0,0,0,0.9757728576660156,0.9300800561904908,0.9717509746551514,0.0,accept,unanimous_agreement
236123260,9824,"now i suspect the [a link] returns. also ping , the same apply to your change at [a link]",0,0,0,0.9858894348144532,0.98403799533844,0.993202030658722,0.0,accept,unanimous_agreement
236129192,9824,we shouldn't modify containers inside range based `for` loop! in such case we should either iterate over its copy or use another way.,0,0,0,0.9737016558647156,0.9791545271873474,0.989283800125122,0.0,accept,unanimous_agreement
236135098,9824,"now i suspect ""return const reference for a few shared containers"" is not going the right way, it changes the whole semantics of the function... aren't we used to getting a new copy of container from qt functions? now we only get constant references, it is a big difference...",-1,0,-1,0.6354233026504517,0.5704905986785889,0.8258442282676697,-1.0,accept,majority_agreement
236136800,9824,"damn. you're right. so what are we supposed to do? there are two main options: 1. apply `copyasconst()` in a ""paranoid way"" to all rvalues. 2. apply `copyasconst()` only to the rvalues that produces shared copy of inner containers (if this follows from the meaning of such method, because we should not get into its implementation).",-1,-1,-1,0.968456208705902,0.9831935167312622,0.9893792271614076,-1.0,accept,unanimous_agreement
236154622,9824,will delete this commit.,0,0,0,0.9796721339225768,0.9838418960571288,0.9894718527793884,0.0,accept,unanimous_agreement
236842964,9824,i'm not entirely sure what's going on here to be honest. is this still needed? also should i remove `#include `? it's included in qtglobal.,-1,0,-1,0.7821820974349976,0.5695587396621704,0.7498145699501038,-1.0,accept,majority_agreement
236910981,9824,"you only need to rename the functions, ~~nothing else, also the removal of qt_version condition check is incorrect.~~",0,0,0,0.9671941995620728,0.9828816652297974,0.9900643229484558,0.0,accept,unanimous_agreement
236979078,9824,please remove also redundant blank line above.,0,0,0,0.9844475984573364,0.9877259135246276,0.9924280047416688,0.0,accept,unanimous_agreement
236979503,9824,"it's better to say something like ""forward rvalue as const"". we don't really copy it.",0,0,0,0.9527069926261902,0.9782080054283142,0.9889801740646362,0.0,accept,unanimous_agreement
236980461,9824,this comment has became incorrect now. we don't really prevent rvalues now. this deleted template actually prevents only arguments declared as `const container func(...)`.,0,0,0,0.8809621334075928,0.9287270307540894,0.9909077882766724,0.0,accept,unanimous_agreement
236980803,9824,i would move this deleted template to the end.,0,0,0,0.9854072332382202,0.9768335819244384,0.990908682346344,0.0,accept,unanimous_agreement
237022494,9824,// prevent const rvalue references ~~arguments~~ ?,0,0,0,0.9850504398345948,0.9861116409301758,0.9929981231689452,0.0,accept,unanimous_agreement
237030840,9824,"""prevent const rvalue arguments"" is more correct, iirc.",0,0,0,0.9871538281440736,0.9777474999427797,0.986208438873291,0.0,accept,unanimous_agreement
237041192,9824,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
237041272,9824,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
237041394,9824,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
237041478,9824,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
237052623,9824,why did you remove reference?,0,0,0,0.9575235247612,0.9850298762321472,0.9923436045646667,0.0,accept,unanimous_agreement
237161828,9824,why didn't you apply `asconst()` to all `torrents()` calls?,0,0,0,0.9766588807106018,0.9931262731552124,0.9902316927909852,0.0,accept,unanimous_agreement
237174189,9824,clazy doesn't complain about possible detachment on them.,0,-1,0,0.9179005026817322,0.5747667551040649,0.8381990194320679,0.0,accept,majority_agreement
237219956,9824,but it really does! and it is real detachment in this case (unlike of `mid()` which clazy complains about). clazy gives too many false positives and incorrect results for us to blindly believe it.,-1,-1,0,0.968818724155426,0.5746473670005798,0.7280649542808533,-1.0,accept,majority_agreement
237222439,9824,oh no... there are other places i haven't added asconst. do i just add it everywhere then?,0,0,0,0.5136751532554626,0.8440445065498352,0.9879255294799804,0.0,accept,unanimous_agreement
237227956,9824,"i'll go through them again manually, the question is whether i should add asconst to the ones that don't need it.",0,0,0,0.9804201126098632,0.9808345437049866,0.9893049001693726,0.0,accept,unanimous_agreement
237228164,9824,"i think yes, if you doubt it. , we came to this conclusion, right?",0,0,0,0.9452576637268066,0.9238011837005616,0.6978017091751099,0.0,accept,unanimous_agreement
237230726,9824,if you can identify them for sure... adding asconst to the ones that don't need it is less evil than skipping the ones that are prone to the detaching problem.,0,0,0,0.5743179321289062,0.7791362404823303,0.9128625392913818,0.0,accept,unanimous_agreement
237238214,9824,"i can, as you said if the container is created in the function then it's not shared. but if the function changes, the for() loops will surely be forgotten.",0,0,0,0.981653928756714,0.9814766049385072,0.990420401096344,0.0,accept,unanimous_agreement
237341924,9824,agree.,0,0,0,0.9730729460716248,0.9867860674858092,0.98495215177536,0.0,accept,unanimous_agreement
775107664,15888,just inline this logic into `uithememanager::uithememanager()` or turn it into class method that is called within the constructor and initializes `m_themesource` directly.,0,0,0,0.9890634417533876,0.9950520396232604,0.994474232196808,0.0,accept,unanimous_agreement
775108000,15888,i believe that adding couple of conditionals in existing code could be enough to add support for folder based themes instead of implementing these two classes which for the most part duplicate the same logic...,0,0,0,0.8732494711875916,0.9849064946174622,0.9857701063156128,0.0,accept,unanimous_agreement
775108464,15888,"imo, it isn't a good idea to create yet another translation context for such ""internal"" classes. it would be better either translate the strings using `uithememanager` context (i.e. `uithememanager::tr(""some text"")`) or just indicate error to caller side (e.g. by returning some kind of `nonstd::expected`) and produce log messages there.",0,0,0,0.9249175190925598,0.9850483536720276,0.977144420146942,0.0,accept,unanimous_agreement
775114392,15888,"idk but someone has said ""program to interfaces, not implementation""",0,0,0,0.987435221672058,0.9262586832046508,0.9912402033805848,0.0,accept,unanimous_agreement
775116989,15888,"use char array: `const char icons_dir[] = "":icons/"";`",0,0,0,0.986292839050293,0.9924073815345764,0.9940831065177916,0.0,accept,unanimous_agreement
775117484,15888,"this is actually a good thing and it makes the code easier to maintain and extensible. maybe you just need some things in their proper places (for example, move logging to a suitable place, as i mentioned earlier).",1,1,1,0.5296032428741455,0.6613366007804871,0.7987141013145447,1.0,accept,unanimous_agreement
775118032,15888,make it a static method of `uithemesource`?,0,0,0,0.9879961609840392,0.9950302839279176,0.9952994585037231,0.0,accept,unanimous_agreement
775119374,15888,make it `void uithememanager::createuithemesource()`.,0,0,0,0.9852060675621032,0.9923248291015624,0.9949808716773988,0.0,accept,unanimous_agreement
775119569,15888,why add this in the interface of uithememanager? i wanted to keep uithemesource and uithememanager independent,0,0,0,0.9822057485580444,0.9904925227165222,0.9905422329902648,0.0,accept,unanimous_agreement
775120226,15888,i don't talk about interface: [code block] or just keep it as is except error handling/logging. they're isn't independent. it's just that the dependency must be correct.,0,0,0,0.829633355140686,0.9084624648094176,0.9849563241004944,0.0,accept,unanimous_agreement
775120681,15888,"i've updated error handling, do check.",0,0,0,0.9860538840293884,0.979496419429779,0.9945163130760192,0.0,accept,unanimous_agreement
775518306,15888,[code block] `context` isn't really needed.,0,0,0,0.9846436977386476,0.9886343479156494,0.9924403429031372,0.0,accept,unanimous_agreement
775520991,15888,"you shouldn't check this setting in two places of `uithememanager` initialization. and this is not some kind of general-purpose function, so that you can argue that the specific context of its use is unknown here. just create `uithemesource` here (in case it is called) and let the `uithememanager` to decide whether it should be created or not.",0,0,0,0.9868736863136292,0.9906348586082458,0.9928480386734008,0.0,accept,unanimous_agreement
775525417,15888,"you should either create some kind of ""invalid"" `uithemesource` here (instead of returning `nullptr`) or handle the case when `m_themesource` is `nullptr` in `uithememanager` code.",0,0,0,0.9889784455299376,0.9930506944656372,0.9939648509025574,0.0,accept,unanimous_agreement
775528559,15888,why are these constants declared here and not in the same place as the others?,0,0,0,0.9639938473701476,0.9844762682914734,0.9796639680862428,0.0,accept,unanimous_agreement
775531844,15888,"they are not needed in the global scope, only to the concerned class.",0,0,0,0.9740648865699768,0.9918956160545348,0.9908946752548218,0.0,accept,unanimous_agreement
775567111,15888,`stylesheet_icons_dir` too.,0,0,0,0.9858917593955994,0.9930226802825928,0.9941587448120116,0.0,accept,unanimous_agreement
775569562,15888,i would throw away `qrc_icons_dir` (just use `qrc_theme_dir + theme_icons_dir` like in other similar cases) and make `qrc_theme_dir` global to avoid declaring the similar constant `stylesheet_icons_dir`.,0,0,0,0.9864221811294556,0.994249701499939,0.9928852915763856,0.0,accept,unanimous_agreement
776320786,15888,"stylesheet_icons_dir is global info, while qrc_* is local, also stylesheet_icons_dir and qrc_theme_dir should start with same pointer afaik",0,0,0,0.9875834584236144,0.9924191236495972,0.994429886341095,0.0,accept,unanimous_agreement
776388471,15888,"`stylesheet_icons_dir` it does not point to the icon folder. rather, it is some placeholder that replaces the name of the theme folder.",0,0,0,0.9859575629234314,0.993059515953064,0.9913109540939332,0.0,accept,unanimous_agreement
776388862,15888,"sorry , i don't understand what do you mean...",-1,-1,-1,0.9887459874153136,0.9919400811195374,0.9947555065155028,-1.0,accept,unanimous_agreement
776389791,15888,"and yes, these constants should be static, if they are the same for each class instance.",0,0,0,0.987212598323822,0.9924076795578004,0.993913471698761,0.0,accept,unanimous_agreement
776393944,15888,"its icons dir used by stylesheet.qss. it's as the name suggests stylesheet icons dir or stylesheet resource dir. there will only be one instance of theme source, and this class is instantiated conditionally, making these variables static doesn't add much value but increases memory consumption (it won't be much but ....)",0,0,0,0.9844312071800232,0.9864648580551147,0.9457730650901794,0.0,accept,unanimous_agreement
776394019,15888,add braces to `if` body.,0,0,0,0.987231969833374,0.9923789501190186,0.9938588738441468,0.0,accept,unanimous_agreement
776394761,15888,"`iconpath` will be called many times while other methods of the class where the string is dynamically created only called once, hence the separate variable for this specific method.",0,0,0,0.9877412915229796,0.9914414882659912,0.9909121990203856,0.0,accept,unanimous_agreement
776396032,15888,i thought you guys love affair with qlatin1string ended with qt6.,0,1,1,0.550233781337738,0.9781705737113952,0.895792543888092,1.0,accept,majority_agreement
776399234,15888,stylesheet_icons_dir is confusing. maybe stylesheet_resources_dir would be better?..,-1,-1,-1,0.9296572804450988,0.6934605240821838,0.8760548233985901,-1.0,accept,unanimous_agreement
776402020,15888,"the class itself knows nothing about its usage. well, at least delete these comments so as not to confuse anyone.",0,0,0,0.9662352204322816,0.924419403076172,0.9731632471084596,0.0,accept,unanimous_agreement
776402633,15888,?,0,0,0,0.9320514798164368,0.9557723999023438,0.9296892285346984,0.0,accept,unanimous_agreement
776403682,15888,"with the source code encoding being utf8, qlatin1string makes a lot less sense [a link]",0,0,0,0.9468268752098083,0.9880040884017944,0.970889449119568,0.0,accept,unanimous_agreement
776460678,15888,"really? it doesn't look like anything has changed much in qt6 since qt5. parsing of utf-8 strings is slower than one of so-called latin-1 strings (even if the utf-8 string actually contains only latin-1 characters, as in this case, the parser does not know about it, so it still has to check every character to understand what kind is it of). am i wrong?",0,0,-1,0.6724660396575928,0.630702793598175,0.8603811860084534,0.0,accept,majority_agreement
776462309,15888,so how about null m_themesource?,0,0,0,0.9844229817390442,0.9912922978401184,0.9929866194725036,0.0,accept,unanimous_agreement
776611011,15888,hmm i guess it's a little performance improvement in non-performance-critical code vs obscure casting everywhere,0,0,0,0.89915931224823,0.8546597957611084,0.9287496209144592,0.0,accept,unanimous_agreement
777023677,15888,moreover comparison with qlatin1string doesn't even produces qstring instance from it.,0,0,0,0.9843324422836304,0.921370565891266,0.9884657859802246,0.0,accept,unanimous_agreement
777087236,15888,i would sort them alphabetically.,0,0,0,0.9774602651596068,0.9872375726699828,0.9767395853996276,0.0,accept,unanimous_agreement
777087318,15888,why ditch `qstring`? seems you still use it everywhere.,0,0,0,0.9732630848884584,0.9736759662628174,0.9740856885910034,0.0,accept,unanimous_agreement
777087405,15888,are you going to use `stylesheet_resources_dir`?,0,0,0,0.9892635941505432,0.9942678213119508,0.9955803751945496,0.0,accept,unanimous_agreement
777087473,15888,those looks like they are `const` functions.,0,0,0,0.98446387052536,0.9920194745063782,0.9908355474472046,0.0,accept,unanimous_agreement
777087499,15888,`theme_icons_dir`?,0,0,0,0.9854804873466492,0.9924322366714478,0.9944303631782532,0.0,accept,unanimous_agreement
777087512,15888,also i would leave the slash out and add it only when forming a path. otherwise (in general) the code base ends up with uncertainty of the slash existence.,0,0,0,0.9741044044494628,0.9872337579727172,0.992361545562744,0.0,accept,unanimous_agreement
777087646,15888,`return {};`,0,0,0,0.9811363816261292,0.9889966249465942,0.9836598634719848,0.0,accept,unanimous_agreement
777089065,15888,"`return nullptr;` looks clearer, imo.",0,0,0,0.9515502452850342,0.9821879267692566,0.9729487895965576,0.0,accept,unanimous_agreement
777089322,15888,"slash is used everywhere, i imagined these variables such that *dir will end with a slash.",0,0,0,0.9833816289901732,0.9879400730133056,0.991818070411682,0.0,accept,unanimous_agreement
777089371,15888,there was clazy warning of using non-pod types as global objects.,0,0,0,0.9825558662414552,0.971704602241516,0.9740145802497864,0.0,accept,unanimous_agreement
777089417,15888,they are logically different.,0,0,0,0.8929798603057861,0.8144168257713318,0.916900873184204,0.0,accept,unanimous_agreement
777089435,15888,i like to leave these choices to derived classes.,0,0,0,0.9350703954696656,0.9674816727638244,0.9855960607528688,0.0,accept,unanimous_agreement
777089469,15888,this problem will go into oblivion as soon as i finish encapsulating path handling.,0,0,0,0.7754817605018616,0.775561511516571,0.9692355990409852,0.0,accept,unanimous_agreement
777089854,15888,what choices do you talk about?,0,0,0,0.935566246509552,0.9857236742973328,0.980136513710022,0.0,accept,unanimous_agreement
777089970,15888,these methods are clearly not mutators so they should be declared as `const`.,0,0,0,0.9839617013931274,0.9880613088607788,0.9933357238769532,0.0,accept,unanimous_agreement
777090231,15888,it seems like it would be nice to have explanations of what each constant refers to.,0,0,0,0.9442911744117736,0.951829433441162,0.9735233187675476,0.0,accept,unanimous_agreement
777090312,15888,damn clazy is infuriating with its moralizing.,-1,-1,-1,0.9843246936798096,0.9916649460792542,0.9946404099464417,-1.0,accept,unanimous_agreement
777092541,15888,"we don't know the working of derived classes, it may happen this will force derive classes to use `mutable variables` that will break constness contract what if they are caching the returned value?",0,0,0,0.9538878202438354,0.9703492522239684,0.9859886169433594,0.0,accept,unanimous_agreement
777093029,15888,caching isn't mutating.,0,0,0,0.7066438794136047,0.7765188217163086,0.9768623113632202,0.0,accept,unanimous_agreement
777093076,15888,well you're changing a internal variable (state) in a const method.,0,0,0,0.987324833869934,0.9911298751831056,0.986957848072052,0.0,accept,unanimous_agreement
777093231,15888,you clearly misunderstand what is the state of the object. not every internal variable is part of an object's state.,-1,0,0,0.7151086926460266,0.7673527598381042,0.6617820858955383,0.0,accept,majority_agreement
777093473,15888,one can't use qreadwritelock with such a code structure.,0,0,0,0.9709988832473756,0.9739199280738832,0.9647938013076782,0.0,accept,unanimous_agreement
777093804,15888,[a link] it isn't part of object state.,0,0,0,0.9772377610206604,0.9819783568382264,0.9921649694442748,0.0,accept,unanimous_agreement
777095177,15888,"but you're still changing a variable in a const method, wouldn't that violate the constness contract?",0,0,0,0.96757572889328,0.9708332419395448,0.9718573093414308,0.0,accept,unanimous_agreement
777096328,15888,constness is about externally visible state of object. see a (quick) explanation of `mutable` specifier at cppreference.com: [a link],0,0,0,0.9845534563064576,0.9813178181648254,0.994140088558197,0.0,accept,unanimous_agreement
777097066,15888,"but why mark a method const, if it's not *really* a const? what's the benefit? users of the class can't use qreadwritelock with such a class.",0,0,0,0.9489362835884094,0.9533815383911132,0.965800166130066,0.0,accept,unanimous_agreement
777097834,15888,"mutable is workaround the constness contract, using it in itself violates the constness contract",0,0,0,0.9744857549667358,0.9663387537002563,0.9870598316192628,0.0,accept,unanimous_agreement
777097934,15888,it's really a const. it's just that you still don't understand what constness is. they can. i even gave you an example of a similar class above.,0,0,0,0.5719562768936157,0.900615930557251,0.9793604612350464,0.0,accept,unanimous_agreement
777098515,15888,`mutable` isn't workaround as long as it is correctly used (i.e. class is correctly designed).,0,0,0,0.98186993598938,0.9925657510757446,0.99064964056015,0.0,accept,unanimous_agreement
777098681,15888,can you please tell me what i don't understand? by implementing a mechanism of locking to manually preserve constness. why give this extra work to classes that derive from an interface? the fewer assumptions in an interface the better.,0,0,0,0.9614768028259276,0.947999119758606,0.9266908764839172,0.0,accept,unanimous_agreement
777099087,15888,because interface and implementation are different things. interface shouldn't make any assumptions about particular implementations.,0,0,0,0.9173367619514464,0.8254758715629578,0.9823017120361328,0.0,accept,unanimous_agreement
777099189,15888,this thread is about marking method const in an interface.,0,0,0,0.984653890132904,0.9826095104217528,0.992116391658783,0.0,accept,unanimous_agreement
777100525,15888,"afaik there is a `qstring::operator =(const char*)`, so it shouldn't create a qstring in this case either.",0,0,0,0.9870993494987488,0.9901050925254822,0.9895058274269104,0.0,accept,unanimous_agreement
777106965,15888,then add the `const` at the implementation site if that is possible.,0,0,0,0.987700343132019,0.9929581880569458,0.995457410812378,0.0,accept,unanimous_agreement
777106982,15888,you should still use `qstring` here.,0,0,0,0.9889982342720032,0.9928961396217346,0.9942066669464112,0.0,accept,unanimous_agreement
777107396,15888,"i don't think that's possible, regardless all member variables of all derived classes are const.",0,0,0,0.9625986218452454,0.8420977592468262,0.9761625528335572,0.0,accept,unanimous_agreement
777107851,15888,"from [a link] : if your interface does not have `const`, then the implementation is free to make changes to the *observable state*. that is, you permit that may happen, is that how an implementation of this interface really should behave?",0,0,0,0.986211121082306,0.9918339252471924,0.9936841130256652,0.0,accept,unanimous_agreement
777113659,15888,"this is not quite correct. but it seems that you often stick to it, so we have disagreements. it should be stated as follows: the problem is that it is often unclear what is the observable state of some types. for example, for types representing some value (e.g. qstring), this is quite obvious. but what is real state of uithemesource? imo, it has no own properties so its observable state is immutable at all.",0,0,0,0.8937966823577881,0.7508738040924072,0.8463966250419617,0.0,accept,unanimous_agreement
777113975,15888,i suppose you mean `bool operator==(const char *other) const`. you could read the documentation: so it allocates memory for `other` qstring data and perform utf-8 to utf-16 conversion while `bool operator==(const qlatin1string &other) const` doesn't.,0,0,0,0.988165020942688,0.991872012615204,0.9915035963058472,0.0,accept,unanimous_agreement
777116233,15888,"just to be clear, almost every specifier in c++ is about intention. that quote is from the guidelines, not from me and ~~you should consider submit a reword for it (to help others to not be misguided).~~ well, after reread at the title of it, i suppose the guidelines means that it is easier (to write better code?) to assume a member function is `const` and relax it afterwards than doing it the other way around. this is not entirely correct (with regard to coder intention) but in most cases i think it does have its own merits. that make sense and i think it concludes it all.",0,1,0,0.8732682466506958,0.6953809857368469,0.7824645042419434,0.0,accept,majority_agreement
777122268,15888,"from the clazy docs: it's tolerated to have global statics in executables, however, clazy doesn't know if it's compiling an executable or a library, so it's your job to run this check only on libraries. it doesn't harm, though, to also remove global statics from executables, because they're usually evil. so the only ""valuable"" cons for using global qstring constants in qbittorrent is ""because they're usually evil"". should we really consider another way? or is there a way to disable this particular clazy warning project-wide?",0,0,0,0.7374056577682495,0.9074419736862184,0.9353477358818054,0.0,accept,unanimous_agreement
777123186,15888,"this is clearly not the way to write better code, imo. at least it won't teach you to design types/interfaces correctly. unfortunately c++ is ""implementation-oriented"" language. it doesn't make clear distinction between types/interfaces and their implementations.",-1,-1,-1,0.9176992177963256,0.8869485855102539,0.934072494506836,-1.0,accept,unanimous_agreement
777179526,15888,"i am not experienced enough to comment about objects states and relations. my argument is simple, marking a method const signals to users that the method is thread-safe and can be used without external locking. the problem with marking a method const in an interface is that it makes assumptions about the implementation but i've learned that the fewer assumptions in an interface the better.",-1,0,0,0.861566424369812,0.9435743689537048,0.8909342288970947,0.0,accept,majority_agreement
777184747,15888,"i think this would help you understand it better: [a link] please read it before further discussions. offtopic, compared to ""c++ core guidelines"", ""c++ super-faq"" looks better written. --- furthermore, now i think `qrcthemesource` and the other one should read-in the file contents at the constructor instead of at access time. i feel it that way is probably because of the naming of the functions. if you want it read-in at access time, then i suggest renaming them to something like `readstylesheet()` or `loadstylesheet()` so it would reflect its true action.",0,0,1,0.7653084993362427,0.8144352436065674,0.5199028253555298,0.0,accept,majority_agreement
777189182,15888,it has nothing to do with thread safety. you shouldn't make any assumptions about implementation. constness of methods is part of type interface. e.g. `human::name()` is intended to not change `human` state independently from any particular `human` implementation. and `human::setname()` is intended to change `human` state independently from any particular `human` implementation. so `human::setname()` should be non-const even if implementation stores data in external database and does not change any class variable when changing the name. but `human::name()` should be const even if implementation obtains the value from some external storage and cache it in class variable.,0,0,0,0.9751972556114196,0.9913380146026612,0.9834007620811462,0.0,accept,unanimous_agreement
777195673,15888,changed,0,0,0,0.9773849844932556,0.9270829558372498,0.7968646287918091,0.0,accept,unanimous_agreement
777201461,15888,"i don't think ""f.e"" is a valid abbreviation, just write out the full word.",0,0,0,0.9651250243186952,0.9576207995414734,0.9786065816879272,0.0,accept,unanimous_agreement
777201681,15888,sorry i wasn't specific enough in the last discussion. now the `read*` functions shouldn't be `const`. such as `qiodevice::readall()` isn't `const`. i/o operations is seldom `const` qualified. `iconpath(...) const` is ok.,-1,-1,-1,0.9764155745506288,0.9737297892570496,0.9664825201034546,-1.0,accept,unanimous_agreement
777204994,15888,i think it is but whatever,0,0,0,0.9749250411987304,0.8643867373466492,0.9694474935531616,0.0,accept,unanimous_agreement
777205046,15888,well `read*` shouldn't modify logical state since it's an verb but whatever,0,0,0,0.9826700687408448,0.9793054461479188,0.9804826974868774,0.0,accept,unanimous_agreement
777210647,15888,"perhaps simply because they change something like cursor, the position of which may be part of the qiodevice state. anyway, i don't want to delay it any longer. these are purely utilitarian classes used in a single place. in addition, the real ""state"" of uithemesource isn't so clear. although i am still convinced that none of its methods are intended to change its state and any of them would look correctly applicable to constant object.",0,0,0,0.905868411064148,0.8373820781707764,0.9692916870117188,0.0,accept,unanimous_agreement
220267117,9600,"need space beetwen the 2 parameter eg `m_averager6hour(divider6hour, m_data6hour)`",0,0,0,0.9872065782546996,0.9948326349258424,0.994403600692749,0.0,accept,unanimous_agreement
220267271,9600,space again,0,0,0,0.960560977458954,0.9522547125816344,0.9837818145751952,0.0,accept,unanimous_agreement
220267556,9600,space,0,0,0,0.968176543712616,0.971493363380432,0.7991176247596741,0.0,accept,unanimous_agreement
220268055,9600,multiline and i think the last semicolon is superfluous,0,0,0,0.978222131729126,0.9028159379959106,0.9839313626289368,0.0,accept,unanimous_agreement
220268485,9600,better do the class implementation in the `speedplotview.cpp` file and leave the class definition here.,0,0,0,0.9871543645858764,0.9941260814666748,0.9932154417037964,0.0,accept,unanimous_agreement
220269615,9600,as i see this is only used in push() where it is copied into a circular_buffer and then reset. why don't you just create it as local variable at the start of the push() function? it will also eliminate the need of the hacky implementation of the reset() function.,0,0,0,0.9878778457641602,0.9909404516220092,0.9681755304336548,0.0,accept,unanimous_agreement
220269673,9600,space,0,0,0,0.968176543712616,0.971493363380432,0.7991176247596741,0.0,accept,unanimous_agreement
220283402,9600,acc saves accumulated (summarized) data between sequential calls of push(). and only once in `divider` times there happens flushing of accumulated data into sink and zeroing.,0,0,0,0.9876351952552797,0.993490993976593,0.9814971685409546,0.0,accept,unanimous_agreement
220290793,9600,"oops. sorry, i misread it. once you address the other comments, i'll see it again.",-1,-1,-1,0.990403413772583,0.993625283241272,0.9933657050132751,-1.0,accept,unanimous_agreement
220290951,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
220291033,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
220291220,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
220291312,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
220291518,9600,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
220291814,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
220301798,9600,i think you could do `acc = {};` instead and drop reset(). but wait for others to confirm.,0,0,0,0.9885491728782654,0.9905197620391846,0.991184651851654,0.0,accept,unanimous_agreement
220301848,9600,blank line,0,0,0,0.9657909274101256,0.870745062828064,0.9861246347427368,0.0,accept,unanimous_agreement
220302258,9600,we name the private variables with the `m_` prefix. ([a link],0,0,0,0.9822430610656738,0.9904864430427552,0.9957429766654968,0.0,accept,unanimous_agreement
220306562,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
220306584,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
223043642,9600,we don't concatenate member declarations. please put them separately.,0,0,0,0.9775801301002502,0.9696087837219238,0.9879060983657836,0.0,accept,unanimous_agreement
223048967,9600,doesn't seem like it's really useful. doesn't `pointdatavar = {};` work? anyway we forbid method definitions in headers.,0,-1,-1,0.6037673950195312,0.538246750831604,0.5463305115699768,-1.0,accept,majority_agreement
223051316,9600,why are these two declared as public static class members? they're used only in constructor implementation. please either declare them in .cpp or (even better) use their right hand expressions directly. the constants above seem like private too.,0,0,0,0.9837252497673036,0.9917418956756592,0.986753225326538,0.0,accept,unanimous_agreement
223052277,9600,"declare it private. it's bad practice to have public class variables. although, it seems like pure private member. you don't need to directly access it outside the class implementation. better add some meaningful method, e.g. `done()` or `hasresult()` defined as `return (m_counter == 0);`",-1,-1,0,0.6428781151771545,0.6522963047027588,0.8595068454742432,-1.0,accept,majority_agreement
223057228,9600,"we prefer not to use abbreviations (unless it's common abbreviation like ""id"" or something very trivial like iterator variable, loop counter etc.). so please fix all such names.",0,0,0,0.9821964502334596,0.933588683605194,0.9876850843429564,0.0,accept,unanimous_agreement
223064775,9600,inline is meaningless here. please remove it.,0,-1,0,0.8030241131782532,0.5764523148536682,0.8123498558998108,0.0,accept,majority_agreement
223070202,9600,it should be const (or template parameter).,0,0,0,0.9882100820541382,0.9911664128303528,0.99293053150177,0.0,accept,unanimous_agreement
223171205,9600,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
223172257,9600,removed,0,0,0,0.9654131531715392,0.9801433682441713,0.9591778516769408,0.0,accept,unanimous_agreement
223172352,9600,names fixed. member hided.,0,0,0,0.986881136894226,0.9880810976028442,0.9910839796066284,0.0,accept,unanimous_agreement
223172460,9600,const applied,0,0,0,0.9844093918800354,0.9858443737030028,0.9896998405456544,0.0,accept,unanimous_agreement
223173034,9600,"looks like `pointdatavar = {};` do the thing. but is it guaranteed by standard zero init or just my gcc compiler's nice behavior? quick googling didn't help me to point this out. anyway, as it is the second complain abour `reset()`, i removed it.",0,0,0,0.940805733203888,0.900435745716095,0.9829201102256776,0.0,accept,unanimous_agreement
223174041,9600,divider_30min divider_6hour,0,0,0,0.9840567111968994,0.9871249794960022,0.9843595623970032,0.0,accept,unanimous_agreement
223174215,9600,why do you cast int to int?,0,0,0,0.974178910255432,0.9722663164138794,0.9933764338493348,0.0,accept,unanimous_agreement
223174309,9600,"remove inline, as i said before.",0,0,0,0.9810619950294496,0.981563925743103,0.9932894110679626,0.0,accept,unanimous_agreement
223174322,9600,`const pointdata &pointdata`,0,0,0,0.984014332294464,0.9927588701248168,0.9940714240074158,0.0,accept,unanimous_agreement
223174372,9600,don't forget to split method definitions with blank line.,0,0,0,0.9743711948394777,0.9758272171020508,0.9922685027122498,0.0,accept,unanimous_agreement
223174558,9600,please don't use `inline` at all. we prefer to trust the compiler to decide what should be inlined.,0,0,0,0.907840132713318,0.9865886569023132,0.9851502776145936,0.0,accept,unanimous_agreement
223174855,9600,add blank line above.,0,0,0,0.9799612164497375,0.9870219826698304,0.9924995303153992,0.0,accept,unanimous_agreement
223174877,9600,i would move it below m_sink.,0,0,0,0.985386848449707,0.9876898527145386,0.990616500377655,0.0,accept,unanimous_agreement
223175231,9600,"standard, fyi: [a link] notice the `struct t1` in example.",0,0,0,0.9884816408157348,0.9906885623931884,0.9911953210830688,0.0,accept,unanimous_agreement
223175653,9600,the cast is just leftover from times when *_buf_size were enum parts. removed.,0,0,0,0.9878025650978088,0.989504098892212,0.9939858913421632,0.0,accept,unanimous_agreement
223175868,9600,"it was meaningless even at that time, because enum declares constants of type int.",0,0,0,0.9710116982460022,0.934744954109192,0.9774777889251708,0.0,accept,unanimous_agreement
223175926,9600,"enum divide on enum gave me compiler warning. or error. anyway, i can not reproduce it in new place, so removed cast from enum too.",0,0,0,0.9744970202445984,0.6832274794578552,0.9854194521903992,0.0,accept,unanimous_agreement
223176158,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
223176184,9600,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
223176462,9600,"for me there is no difference, so i moved it there. but i'm curios what a difference it makes for you?",0,0,0,0.8722582459449768,0.8698199391365051,0.9636406898498536,0.0,accept,unanimous_agreement
223176664,9600,"just to have some logical order: immutable fields (so-called ""instance parameters"") goes first and then other fields.",0,0,0,0.9844974279403688,0.9904330968856812,0.9931822419166564,0.0,accept,unanimous_agreement
223177426,9600,"honestly, i don't understand why it was done in such an ""archaic"" way... not your issue.",-1,-1,-1,0.9434476494789124,0.9648188948631288,0.7854592800140381,-1.0,accept,unanimous_agreement
223177705,9600,it should be `bool isready() const;`,0,0,0,0.9796209931373596,0.9918373227119446,0.995341420173645,0.0,accept,unanimous_agreement
223177968,9600,i wonder if `constexpr int` will be more effective in all these cases?,0,0,0,0.9643309712409972,0.9852563142776488,0.9602809548377992,0.0,accept,unanimous_agreement
223178342,9600,can not imagine use case for const averager object. fixed anyway by formal reason.,0,0,0,0.9762560725212096,0.9593720436096193,0.9665178060531616,0.0,accept,unanimous_agreement
223178437,9600,"i guess it won't change a bit in output assembly, also personally i would reserve `constexpr` for more exotic usages.",0,0,0,0.9837656617164612,0.976065456867218,0.9802581071853638,0.0,accept,unanimous_agreement
223178444,9600,just `m_accumulator {}`?,0,0,0,0.9879307746887208,0.9942575693130492,0.9941370487213136,0.0,accept,unanimous_agreement
223178448,9600,"no, it would not. it is already compile-time calculated value. constexpr just makes wider the domain of expressions able to be compile time calculated, not increases performance.",0,0,0,0.9780805110931396,0.9880843758583068,0.989562451839447,0.0,accept,unanimous_agreement
223178479,9600,maybe it is better to add `pointdata::operator+=()`,0,0,0,0.9826070666313172,0.9942726492881776,0.9892951846122742,0.0,accept,unanimous_agreement
223178484,9600,also there is possible integer overflow here.,0,0,0,0.9880834221839904,0.9719101190567015,0.9896088242530824,0.0,accept,unanimous_agreement
223178557,9600,fixed. also uncrustify does not try to break this now. nice!,1,1,1,0.9855214953422546,0.9935668110847472,0.9942678213119508,1.0,accept,unanimous_agreement
223178824,9600,i think it not better. because this new method: 1. will be used only in 1 place; 2. too simple to hide something and make programmers' live easier; 3. adds function call overhead.,0,0,0,0.8083575367927551,0.8595418334007263,0.6866893172264099,0.0,accept,unanimous_agreement
223178938,9600,how about moving `m_data30min` into `m_averager30min`? this would simplify the objects relations.,0,0,0,0.9877222180366516,0.9939486980438232,0.992684841156006,0.0,accept,unanimous_agreement
223179017,9600,add space: `m_accumulator {}`,0,0,0,0.985986351966858,0.9926384687423706,0.9936959147453308,0.0,accept,unanimous_agreement
223179062,9600,i would write: [code block]`,0,0,0,0.9882556200027466,0.992356300354004,0.992377996444702,0.0,accept,unanimous_agreement
223179116,9600,offtopic: could you change the argement to const reference? and also to speedplotview::setviewablelastpoints() please.,0,0,0,0.9875534772872924,0.9948329925537108,0.9936315417289734,0.0,accept,unanimous_agreement
223179147,9600,old code was vulnerable to overflow too. as soon as download speeds get to 29826161 byte/s (30mbyte/s approximately) here (in new code) will be overflow. definitely it is time to do something. i think the best way is to change type of `pointdata.y` to double.,0,0,0,0.8669355511665344,0.845191478729248,0.845064103603363,0.0,accept,unanimous_agreement
223179222,9600,why a floating point type? what about qint64 or quint64?,0,0,0,0.971342384815216,0.9614721536636353,0.9901179671287536,0.0,accept,unanimous_agreement
223179283,9600,"also afaik the overflow only occurs at the accumulator, maybe just use quint64 for its type, for both `x`, `y` member.",0,0,0,0.9896252751350404,0.9928669929504396,0.9923884272575378,0.0,accept,unanimous_agreement
223179518,9600,"plot drawing code is accessing storage in m_data*** directly. averager class is averaging, not storing. for me this move will make things more complicated on drawing part. some storage will become accessible through proxy, other directly.",0,0,0,0.9670701026916504,0.935491144657135,0.9746869206428528,0.0,accept,unanimous_agreement
223179530,9600,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
223179653,9600,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
223179673,9600,"hmm, maybe it is just me that didn't expect to see such complications for such simple thing...",-1,-1,0,0.6388450264930725,0.7799418568611145,0.5311034917831421,-1.0,accept,majority_agreement
223179744,9600,"switch from int to double is really bad idea for ""increase performance"" patch.",-1,-1,-1,0.98488587141037,0.9866076707839966,0.990359902381897,-1.0,accept,unanimous_agreement
223179915,9600,"current design is acceptable for me. it can be changed, but it will require more changes than you think. so let it be as is.",0,0,0,0.9514951705932616,0.953881561756134,0.961555242538452,0.0,accept,unanimous_agreement
223181889,9600,"`speedplotview::pushpoint` changed. did not understand what did you mean to do with `speedplotview::setviewablelastpoints()` ? this method's argument type is enum, there is no profit in converting it to reference",0,0,0,0.9593930840492249,0.9805091619491576,0.9925695061683656,0.0,accept,unanimous_agreement
223182809,9600,"pardon, misread.",-1,-1,-1,0.9441251754760742,0.884710967540741,0.8358860611915588,-1.0,accept,unanimous_agreement
223182853,9600,looks like this extra `;` is failing lgtm check,0,0,0,0.9521180987358092,0.9588808417320251,0.983556032180786,0.0,accept,unanimous_agreement
223183074,9600,deleted,0,0,0,0.9476664662361144,0.9717172980308532,0.8444666862487793,0.0,accept,unanimous_agreement
223183467,9600,"i have seen posts on net that some people already have 10gbit/s connection on their premise. so not only the accumulator needs to be enlarged, but data storage too. the choice is of two options: double or qint64. modern processors are pretty fast with float arithmetic, thanks to billions of transistors on a dye. so i will do measurements and then choose. please, wait.",0,0,0,0.7661637663841248,0.8430463671684265,0.7922585010528564,0.0,accept,unanimous_agreement
223184857,9600,"hmm. it look a bit surprising, but double wins! after filtering out excesses due background processes, i got such results: with double - 8282 ticks. with qint64 - 8744 ticks. for measuring code look into corresponding commit.",1,-1,1,0.9479525089263916,0.944650411605835,0.9059136509895324,1.0,accept,majority_agreement
223185209,9600,i compile to 32bit app.,0,0,0,0.9874468445777892,0.9798842668533324,0.9934681057929992,0.0,accept,unanimous_agreement
223186867,9600,"64 bit application should calculate 64 bit integers more efficient, isn't it?",0,0,0,0.9835318326950072,0.9881455898284912,0.9900306463241576,0.0,accept,unanimous_agreement
223188374,9600,"i think so, but currently i have no 64bit build setup at hand. tomorrow i will try to install 64bit linux into a virtual machine and build in it.",0,0,0,0.9672624468803406,0.9409875869750975,0.9789482951164246,0.0,accept,unanimous_agreement
223200166,9600,", you can compare int vs int64 using 32bit app.",0,0,0,0.9883352518081664,0.990835666656494,0.9928271174430848,0.0,accept,unanimous_agreement
223218636,9600,finally managed to build 64bit version and make tests. double on 64bit use 5223 ticks. qint64 on 64bit use 6353 ticks. double wins here too for my surprise.,1,0,1,0.883558452129364,0.9129063487052916,0.8771764636039734,1.0,accept,majority_agreement
223220194,9600,made [a link] with measure code if somebody wants to play with it. removed code from here.,0,0,0,0.9836373925209044,0.9882017970085144,0.9943729639053344,0.0,accept,unanimous_agreement
223221128,9600,"qbt also runs on other platforms: embedded systems, arm, mips... it is always a good idea to avoid floating-point types if not really required.",0,0,0,0.8962939977645874,0.9725525379180908,0.9846621751785278,0.0,accept,unanimous_agreement
223221707,9600,"using a floating point type for integer data (inherently) is suspicious to me. even if your measurements show some gain in speed (in some particular cases), you clearly do not take into account other possible disadvantages.",-1,-1,-1,0.9147697687149048,0.9618985056877136,0.6510013937950134,-1.0,accept,unanimous_agreement
223343618,9600,"your counter argument about arm/mips looks solid enough. but is there arm/mips computers powerful enough to run qt5 gui on a gui-enabled os and in the same time having such a bad fpu abilities? afaik embedded systems usually run qbittorrent-nox. if this code is a part of qbittorrent-nox than we should consider to exclude it from there totally imho, not polishing float/int issues.. i agree with suspicions about float/integer data type exchange, but from my point of view this speed samples are more float than integer in their nature. they are calculated from difference of transferred data counter in subsequent time sampling points. this data counter is integer in nature and seems to provide exactly accurate readings with all bits full precision. and subtraction between two subsequent counter values inherits this exact precision. then we divide this by hardcoded ""precise"" interval of 1 second and think that we get all bits precise speed value. but we didn't get it. the culprit is in a multiprocessing and random execution delays of regular timer event due to the multiprocessing. exactly, real time interval between two shot of 1000msec qtimer can actually be from 970 to 1030 msec (+/-30msec deviation and even more on loaded system). so **time part** of `(x1-x0)/t` formula is actually ""non-precise"" constant value and brings a relative error of 3% on the input to formula, causing 3% of relative error of result of formula. and now there is no reason to store all the bits of this **approximate** +/-3% speed value. i would even prefer float32 type, which have enough precision and range and consumes less memory, creating less concurrence for l1/l2 precious cache memory.",0,0,0,0.5773846507072449,0.4412289261817932,0.8353078961372375,0.0,accept,unanimous_agreement
223354467,9600,"slowing going offtopic :\ i cannot say for sure, however a bad fpu is still a fpu, still usable, just not as fast as general-purpose registers. and remember there are arms that runs win10. back to the topic. i would adopt this algorithm instead: [a link] and use `quint64` for input & output, also change to integer division, will lose a bit precision but it is fine imo.",-1,-1,-1,0.8458195328712463,0.435842901468277,0.9945448637008668,-1.0,accept,unanimous_agreement
223362737,9600,very nice algorithm! 3 operations per iteration but elided overflow without using extended range types. well i'll go to quint64 just to stop discussion and make this pr accepted.,1,1,1,0.9923882484436036,0.9930213093757628,0.9941576719284058,1.0,accept,unanimous_agreement
223373404,9600,i don't take this algorithm because is is an overkill. for us the quint64 type is enough.,0,0,0,0.937099277973175,0.6289522051811218,0.8828911781311035,0.0,accept,unanimous_agreement
223415179,9600,"ok, then at least put a comment documenting the possible overflow and why quint64 is enough.",0,0,0,0.9876503348350524,0.9881520867347716,0.9918996095657348,0.0,accept,unanimous_agreement
223451337,9600,please fix typos: maximim -> maximum we hit overflow -> we get overflow pbytes/s this -> pbytes/s. this still -> \ ordinal -> ordinary,0,0,0,0.9859813451766968,0.9292946457862854,0.9832178354263306,0.0,accept,unanimous_agreement
223546982,9600,"fixed,thx.",0,0,0,0.9842363595962524,0.8529505133628845,0.9667997360229492,0.0,accept,unanimous_agreement
112806361,3235,preferences is deprecated now.,0,0,0,0.9853933453559875,0.9606991410255432,0.9372573494911194,0.0,accept,unanimous_agreement
112809505,3235,"this whole pr is outdated, i'm not even sure if would approve this...",-1,-1,-1,0.9786688089370728,0.8999454975128174,0.9574342370033264,-1.0,accept,unanimous_agreement
132817477,3235,i think most existing installations are working today with `prefer_tcp`. so i would say the default here should be `false`.,0,0,0,0.9883363842964172,0.9901719689369202,0.9903687834739684,0.0,accept,unanimous_agreement
132817512,3235,also the name should be `utpmixedmode`,0,0,0,0.9883825182914734,0.9942150712013244,0.9959115982055664,0.0,accept,unanimous_agreement
132817623,3235,space before return,0,0,0,0.9857593774795532,0.980729043483734,0.9889813661575316,0.0,accept,unanimous_agreement
132817644,3235,do you really need the blank lines before the comments?,0,0,0,0.981909155845642,0.9881276488304138,0.988493025302887,0.0,accept,unanimous_agreement
132817691,3235,`seed_choking_algorithm` is being set in the session constructor so you need to remove it from there too.,0,0,0,0.9790762662887572,0.9950311183929444,0.9947472214698792,0.0,accept,unanimous_agreement
132817777,3235,`kib`. also shouldn't it be non-translatable?,0,0,0,0.987173080444336,0.9837530851364136,0.9916391968727112,0.0,accept,unanimous_agreement
132818135,3235,"ok do you think we should also turn utp off by default? otherwise, with utp on + prefer_tcp, utp would be useless in theory.",0,0,0,0.9452025294303894,0.9853801131248474,0.9897178411483764,0.0,accept,unanimous_agreement
132818150,3235,"ok, thanks!",1,1,1,0.8985399603843689,0.9816162586212158,0.9544865489006042,1.0,accept,unanimous_agreement
132818160,3235,"fixed here, will push update later",0,0,0,0.9844014048576356,0.9901667833328248,0.9935973882675172,0.0,accept,unanimous_agreement
132818164,3235,will remove it.,0,0,0,0.9771601557731628,0.9828522801399232,0.9905731081962584,0.0,accept,unanimous_agreement
132818188,3235,"fixed, will also fix other locations.",0,0,0,0.9880444407463074,0.9908742904663086,0.9937660694122314,0.0,accept,unanimous_agreement
133000069,3235,why this string isn't translatable?,0,0,0,0.9215651750564576,0.8939242959022522,0.9705815315246582,0.0,accept,unanimous_agreement
133031289,3235,i would add blank line before this one like in another setters.,0,0,0,0.9849064946174622,0.9832705855369568,0.9917364716529846,0.0,accept,unanimous_agreement
133032047,3235,why do you provide originally enumerable setting as bool? the same question is about mixed mode algorithm.,0,0,0,0.9768349528312684,0.9903770089149476,0.990517556667328,0.0,accept,unanimous_agreement
133032626,3235,please use naming convention for bool properties: isguidedreadcacheused or isguidedreadcacheenabled. the same comment is for other bool properties.,0,0,0,0.987099587917328,0.993556559085846,0.9945560693740844,0.0,accept,unanimous_agreement
133055821,3235,"finding good names for the getter and setter of a bool property is always a special pain. should the getter be called checked() or ischecked()? scrollbarsenabled() or arescrollbarenabled()? ischecked() isdown() isempty() ismovingenabled() however, adjectives applying to a plural noun have no prefix: scrollbarsenabled(), not arescrollbarsenabled() verbs have no prefix and don't use the third person (-s): acceptdrops(), not acceptsdrops() allcolumnsshowfocus() nouns generally have no prefix: autocompletion(), not isautocompletion() boundarychecking() sometimes, having no prefix is misleading, in which case we prefix with is-: isopenglavailable(), not opengl() isdialog(), not dialog() (from a function called dialog(), we would normally expect that it returns a qdialog.) the name of the setter is derived from that of the getter by removing any is prefix and putting a set at the front of the name; for example, setdown() and setscrollbarsenabled(). the name of the property is the same as the getter, but without the is prefix. so `useoscache` kind of makes sense. even `guidedreadcache` can be used as bool property name.",-1,0,-1,0.8852854371070862,0.62591153383255,0.9526090025901794,-1.0,accept,majority_agreement
133056930,3235,", why?",0,0,0,0.7772337198257446,0.8252612948417664,0.6805352568626404,0.0,accept,unanimous_agreement
133063020,3235,it was a question. is it reasonable to have translatable units?,0,0,0,0.9673713445663452,0.944961965084076,0.989437460899353,0.0,accept,unanimous_agreement
133067735,3235,"at least some of the cyrillic languages use transliterated abbreviations (e.g. ""mіб"" for ""mib"" in ukrainian).",0,0,0,0.9569713473320008,0.99265456199646,0.990979552268982,0.0,accept,unanimous_agreement
133113283,3235,"ok, thanks, will fix it.",1,1,1,0.7423913478851318,0.722634494304657,0.6484400033950806,1.0,accept,unanimous_agreement
133120401,3235,apparently i jumped the gun here... the point is that if bool property has a name without is-/has- prefix it's not so clear it is correct or not. we need to check all new bool properties.,0,-1,0,0.941298246383667,0.6743335723876953,0.6261181235313416,0.0,accept,majority_agreement
133122094,3235,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
133124917,3235,both changed to int type.,0,0,0,0.98734712600708,0.9766061305999756,0.9943822622299194,0.0,accept,unanimous_agreement
133144826,3235,isguidedreadcacheenabled or useguidedreadcache or just guidedreadcache.,0,0,0,0.9875231385231018,0.9929990768432616,0.9930404424667358,0.0,accept,unanimous_agreement
133145105,3235,your switch statements break coding style. please add space after keywords.,0,0,0,0.7714985013008118,0.9276751279830932,0.8075040578842163,0.0,accept,unanimous_agreement
133145346,3235,issuggestmodeenabled.,0,0,0,0.9850097298622132,0.9903085827827454,0.9926818013191224,0.0,accept,unanimous_agreement
133146303,3235,you should check/normalize values when getting it from untrusted sources (e.g. from config file). property getter always should return valid value.,0,0,0,0.988397181034088,0.9910098314285278,0.9934940934181212,0.0,accept,unanimous_agreement
133179124,3235,`isguidedreadcacheenabled` that is.,0,0,0,0.9858964085578918,0.9935693740844728,0.994663953781128,0.0,accept,unanimous_agreement
133179201,3235,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
133179875,3235,"fixed now. i've added a helper function to do so, before you ask, `std::function ` is chosen because i want it to match `cachedsettingvalue::proxyfunc` signature, using a not matching signature will cause doing type erasure twice, incurring unnecessarily performance hits.",0,0,0,0.9653464555740356,0.9891363382339478,0.9917625188827516,0.0,accept,unanimous_agreement
133193421,3235,ok. then you don't need these switches at all.,0,0,0,0.9830074310302734,0.9698718786239624,0.9894780516624452,0.0,accept,unanimous_agreement
133193855,3235,i would use libtorrent constants instead of anonymous numbers.,0,0,0,0.9864147305488586,0.9847962856292723,0.9887940287590028,0.0,accept,unanimous_agreement
133194167,3235,"in all affected cases, of course.",0,0,0,0.9821292161941528,0.989120602607727,0.985121488571167,0.0,accept,unanimous_agreement
133209411,3235,"we are supporting both libtorrent 1.0 & 1.1, so it has different scopes for enum definitions, don't you think adding a `#if` condition is too much for it?",0,0,0,0.9831436276435852,0.9777048826217652,0.9903491735458374,0.0,accept,unanimous_agreement
133210016,3235,"will remove, except `m_chokingalgorithm` which i map `{0, 1} -> {0, 2}`, libtorrent `choking_algorithm_t` has no `1` defined.",0,0,0,0.983797013759613,0.9939192533493042,0.9939805269241332,0.0,accept,unanimous_agreement
133238645,3235,you should declare compatible enums (better enum classes) inside bittorrent namespace and use it. e.g.: [code block],0,0,0,0.9872329235076904,0.9931461811065674,0.9955173134803772,0.0,accept,unanimous_agreement
133238912,3235,and also use it in limiters.,0,0,0,0.9866979718208312,0.991357922554016,0.9949780106544496,0.0,accept,unanimous_agreement
133240895,3235,"i've restored my mind. we shouldn't use libtorrent names, types etc. outside compatibility layer. we should create our own names/types and use it.",0,0,0,0.7739018797874451,0.9741708040237428,0.5935083627700806,0.0,accept,unanimous_agreement
133246081,3235,so it become this? [code block],0,0,0,0.9860870242118835,0.9893279671669006,0.995128870010376,0.0,accept,unanimous_agreement
133250142,3235,and one more thing... since config file is user editable it is a really good idea to store enumerations by name (as strings) as introduced in one of his last prs. you can give example code there.,1,1,1,0.8294401168823242,0.8764219880104065,0.5263243317604065,1.0,accept,unanimous_agreement
133265126,3235,"just got it working, but the new declared enum must accompany with a `q_enum_ns(...)` macro which is only available on `qt >= 5.8`. also must add `q_namespace` to `namespace bittorrent` to support it. any comment?",0,0,0,0.9857154488563538,0.9914374947547911,0.9905042052268982,0.0,accept,unanimous_agreement
133267040,3235,"now i'm not so sure. as a developer, it's sure convenient. as a user, how is one going to know the only valid values are `fixedslotschoker, ratebasedchoker` without source code at hand? on the other way, if it's represented as an `int`, at least user can try putting numbers in it.",0,0,0,0.9329419136047364,0.9166107773780824,0.8000322580337524,0.0,accept,unanimous_agreement
133273727,3235,"oops... actually it needs a user manual, but we don't have it. don't know what to say now... i would still use a textual representation. apparently, used something different... maybe, just enums (not enum classes). i think, we can use his code as base for cases of enumerable settings.",-1,-1,-1,0.917994499206543,0.820837676525116,0.8964032530784607,-1.0,accept,unanimous_agreement
133274162,3235,you misunderstood it. we're talking about manual config editing. there is no problem in gui.,0,-1,0,0.7964192032814026,0.5616730451583862,0.9576971530914308,0.0,accept,majority_agreement
133274736,3235,", in any case we should use enums in the code.",0,0,0,0.9871273040771484,0.9915531277656556,0.989602267742157,0.0,accept,unanimous_agreement
133342017,3235,"ok, that is not the main point now, i just wanted to say it's still debatable imo. i tried both and it doesn't matter much which i use, combination of `enum, enum class, q_enum_ns, q_enum`. i looked it a bit more closely, at [a link] so it uses `qmetaenum::fromtype()` ""magic"" and qt doc states however, in this case the enum is in namespace scope, so should use `q_enum_ns` instead, but the requirement `qt >= 5.8` doesn't suit us now as i said before. ... unless i deploy some workaround like this: [code block] *is that acceptable?* this is the best i can do now...",0,0,0,0.9390344619750975,0.9717982411384584,0.9501827955245972,0.0,accept,unanimous_agreement
133356270,3235,"well, we say: ""tomorrow is another day!"". that's what happens in the end: 1. neither numbers nor words are meaningless to the user, because there is no available information about it. 2. if we had a user manual (or other source of information, eg. man), we could describe either numeric values or string values. 3. the use of numbers is much easier from the code pov, i.e. other things being equal, the use of numerical values in the configuration file is preferable. 4. the use of abstract numerical values in the code is a way to unmaintainable code, so we should prefer enums there. , what do you say?",0,0,0,0.6834598779678345,0.866205096244812,0.9604418873786926,0.0,accept,unanimous_agreement
133362622,3235,"i **agree** with the bullet points you listed (in sequence), but there is a strong assertion at point 2 which this app doesn't have currently... and i'm not looking for more work, i.e. creating the user manual. it's easier for users to edit the ini too, 2 key strokes at most for changing chokingalgorithm here. with string literals, users might get typos, uppercase lowercase issues especially when the user is not fluent in english. i don't oppose using enums (but there are technical difficulties here) and i just wanted to focus on getting this pr merged...",0,0,0,0.8099778294563293,0.883756160736084,0.6152146458625793,0.0,accept,unanimous_agreement
133377808,3235,i hope it's about using enums in config file and there are no objections on using it in the code (i can't imagine what objections can be).,0,0,0,0.9453818798065186,0.9161100387573242,0.9649599194526672,0.0,accept,unanimous_agreement
133411968,3235,"my 2 cents: long string constants (as comparing to short string constants like '0', '1', etc.) in a config file give more freedom when upgrading and replacing set of possible options. partially disagree: user can't get their options for the setting, but at least can guess what the current value means. it is much easier to spot a mistake in documentation or outdated part of it with long descriptive string constants. with string literals, users might get typos, uppercase lowercase issues especially when the user is not fluent in english. i seriously doubt that users with typing problems would want to edit config files manually. all in all, i do not reveal a secret here saying that short constants are simpler and easier for one-time setup or use, while long ones offer advantages over them when considering maintainability and long-term support. just as identifiers in source code.",-1,-1,0,0.8353100419044495,0.925377070903778,0.8101456165313721,-1.0,accept,majority_agreement
133426382,3235,", agree with you, but reports any problems with storing enums as strings, although i remember that you did it already. i am now limited in the ability to verify it all.",0,0,0,0.961654782295227,0.961965024471283,0.9689927697181702,0.0,accept,unanimous_agreement
133505417,3235,this is actually a good guideline when naming enum values for storing in ini!,1,0,1,0.7446308732032776,0.6458560228347778,0.9733019471168518,1.0,accept,majority_agreement
134002303,3235,"guys, are still considering the implementation or can i merge as-is? personally: i don't hold any strong preference about either one, but i tend to like numbers better than strings.",0,0,0,0.4912803471088409,0.6213768720626831,0.961602509021759,0.0,accept,unanimous_agreement
134003749,3235,the default value here should be `1`. it was a request in the past to use fastest_upload by default.,0,0,0,0.9887785315513612,0.9945447444915771,0.9940924048423768,0.0,accept,unanimous_agreement
134005416,3235,i insist at least on named constants (ie. enums) in the code.,0,0,0,0.9796102046966552,0.989059329032898,0.9854745864868164,0.0,accept,unanimous_agreement
134006092,3235,the default value here should be `1`. it was a request in the past to use fastest_upload by default.,0,0,0,0.9887785315513612,0.9945447444915771,0.9940924048423768,0.0,accept,unanimous_agreement
134006257,3235,"chockingalgorithm should be limited by 0 and 1, isn't it?",0,0,0,0.9757053256034852,0.9886273741722108,0.9919026494026184,0.0,accept,unanimous_agreement
134006345,3235,"yeah, i think this makes sense.",0,0,0,0.9532243609428406,0.9185293316841124,0.9186607003211976,0.0,accept,unanimous_agreement
134007369,3235,"and i think old style enums will be enough in this case, so type of the properties can be left as is (int).",0,0,0,0.988399624824524,0.9869576692581176,0.9918317198753356,0.0,accept,unanimous_agreement
134013922,3235,see `enum choking_algorithm_t` in libtorrent doc.,0,0,0,0.9885064363479614,0.9939274787902832,0.9952040910720824,0.0,accept,unanimous_agreement
134014397,3235,"let just consider a simple question, what do you think of the example code in [a link] is it acceptable?",0,0,0,0.9806159734725952,0.9839088320732116,0.988835871219635,0.0,accept,unanimous_agreement
134014537,3235,will fix,0,0,0,0.978933572769165,0.9097051620483398,0.9934358596801758,0.0,accept,unanimous_agreement
134015509,3235,but in earlier commit you chose to not expose `bittyrant_choker`. was there a reason?,0,0,0,0.9717530012130736,0.9922828078269958,0.993703067302704,0.0,accept,unanimous_agreement
134017038,3235,"however, it feels weird because peer which has better download speed will always have higher priority to be served.",-1,-1,-1,0.9722788333892822,0.9854088425636292,0.9818445444107056,-1.0,accept,unanimous_agreement
134019398,3235,you can't mix interface of components of an application with interface of underlying library. if you allow users only two choices then session::chockingalgorithm property has only two possible values independently of the way it really implemented.,0,0,0,0.9870932698249816,0.9777361750602722,0.988390564918518,0.0,accept,unanimous_agreement
134020116,3235,libtorrent states its incomplete & untested. also read `q: won’t bittyrant hurt overall bittorrent performance if everyone uses it?` in [a link],0,0,0,0.9807716012001038,0.979498028755188,0.9857448935508728,0.0,accept,unanimous_agreement
134020333,3235,also read q: won’t bittyrant hurt overall bittorrent performance if everyone uses it? in [a link] +1. don't forget to rebase.,0,0,0,0.9661858081817628,0.9785570502281188,0.9935644268989564,0.0,accept,unanimous_agreement
134020629,3235,that won't be a problem after enums are deployed.,0,0,0,0.9848307371139526,0.9830312728881836,0.9788058400154114,0.0,accept,unanimous_agreement
134041113,3235,"sorry, i can't open the link above in my smartphone browser. if you mean the following: [code block] i think yes (maybe except the name of setter param).",-1,-1,-1,0.986836314201355,0.9793004393577576,0.964735209941864,-1.0,accept,unanimous_agreement
134084607,3235,"... , this code can be useful in case we have decided store enums in config file as strings. but, iirc, and prefer to use numbers so such enum wrapping is unnecessary.",0,0,0,0.9768552780151368,0.9708950519561768,0.9856123924255372,0.0,accept,unanimous_agreement
134118829,3235,"if no objections, i'm going to use it and get this over with.",0,0,0,0.9710794687271118,0.9692028760910034,0.9367228746414183,0.0,accept,unanimous_agreement
134119084,3235,don't think you **wrapper** isn't appropriate name (too common)?,-1,0,0,0.5202027559280396,0.7800763249397278,0.9669480323791504,0.0,accept,majority_agreement
134119630,3235,"that name was just for the example, but frankly i can't think of anything better than `struct enumwrapper` or `struct chokingalgorithmwrapper` or `struct chokingalgorithmenum`, any suggestions?",0,0,0,0.8910696506500244,0.8730077147483826,0.9621862173080444,0.0,accept,unanimous_agreement
134119750,3235,"imo, chokingalgorithmwrapper is best from above.",0,0,0,0.9784343838691713,0.9886524081230164,0.96222186088562,0.0,accept,unanimous_agreement
134120432,3235,"but from the other side, we can put all needed enums into one wrapper so we need other name, like sessionsettingsenums...",0,0,0,0.9835129380226136,0.991527259349823,0.9942580461502076,0.0,accept,unanimous_agreement
134120493,3235,and introduce them into the containing namespace with the help of `using` directive.,0,0,0,0.9885262250900269,0.9873999357223512,0.9952298402786256,0.0,accept,unanimous_agreement
134217486,3235,do we have dependent default value here?,0,0,0,0.9860402345657348,0.9905319213867188,0.9942800998687744,0.0,accept,unanimous_agreement
134217962,3235,"imo, using ternary operator (instead of cast) would be more obvious.",0,0,0,0.9864488244056702,0.9909183979034424,0.9754281640052797,0.0,accept,unanimous_agreement
134220552,3235,"ah, damn it, i didn't realize until now... it doesn't need to depend on others. changed.",-1,-1,-1,0.9885032773017884,0.9879027009010316,0.9940229058265686,-1.0,accept,unanimous_agreement
213434179,9349,no need for curly braces,0,0,0,0.9862589836120604,0.9712182283401488,0.987519383430481,0.0,accept,unanimous_agreement
213434933,9349,maybe `qiodevice::text` too?,0,0,0,0.9814811944961548,0.994248628616333,0.9935234785079956,0.0,accept,unanimous_agreement
213501574,9349,just a suggestion: maybe make the qregularexpression a variable so it is easier to read?,0,0,0,0.985099732875824,0.98946613073349,0.9897639751434326,0.0,accept,unanimous_agreement
213502108,9349,**are** undefined,0,0,0,0.9811153411865234,0.8724972009658813,0.9580036997795104,0.0,accept,unanimous_agreement
213503774,9349,::getmodulefilenamew,0,0,0,0.9517862200737,0.9913443326950072,0.9942261576652528,0.0,accept,unanimous_agreement
213503918,9349,shouldn't you free the vector elements when it is about to go out of scope?,0,0,0,0.9804539084434508,0.9917912483215332,0.9927292466163636,0.0,accept,unanimous_agreement
213504395,9349,"sorry, but why is this include needed?",-1,-1,-1,0.9825103878974916,0.9858255982398988,0.98997163772583,-1.0,accept,unanimous_agreement
213670029,9349,"i don't know how to do that elegantly. there are many exit points and i'd have to add a raii guard here. but the heap memory will be freed anyway on process exit, so it is ok, imo, to leave that to the system.",0,0,0,0.9520525336265564,0.7861985564231873,0.9382792711257936,0.0,accept,unanimous_agreement
213682381,9349,added the shortest solution i could come up with in its own commit.,0,0,0,0.9781898856163024,0.9870566129684448,0.9941275119781494,0.0,accept,unanimous_agreement
213865493,9349,put 'size' inside the loop too.,0,0,0,0.9855851531028748,0.9918609857559204,0.994279146194458,0.0,accept,unanimous_agreement
213865604,9349,this also can go into the loop body.,0,0,0,0.9874526858329772,0.9929811954498292,0.9940286874771118,0.0,accept,unanimous_agreement
215916297,9349,"imo, it's completely unusual. why do you need to free this memory immediately before application exit?",-1,-1,0,0.8623850345611572,0.9017291069030762,0.503850519657135,-1.0,accept,majority_agreement
215916987,9349,"argsvector. although it is an alias for a name with a ""foreign"" naming it should use qbittorrent naming.",0,0,0,0.989780068397522,0.9924852252006532,0.98995178937912,0.0,accept,unanimous_agreement
215917992,9349,char *getexename,0,0,0,0.9809979796409608,0.9825747609138488,0.990037202835083,0.0,accept,unanimous_agreement
215918323,9349,move to the end of previous line.,0,0,0,0.9832289814949036,0.9852182269096376,0.9902340173721312,0.0,accept,unanimous_agreement
215931904,9349,if previous buffer deleted by reset?,0,0,0,0.9859039187431335,0.9918107986450196,0.992219090461731,0.0,accept,unanimous_agreement
215932301,9349,does linux use 8 bit encoding for filenames?,0,0,0,0.987885057926178,0.9914916157722472,0.993527352809906,0.0,accept,unanimous_agreement
215933087,9349,why do you just return empty string im case of error here but abort the app in case of another error inside getexename?,0,0,0,0.965531289577484,0.9438474774360656,0.9827350974082948,0.0,accept,unanimous_agreement
215935350,9349,usually utf-8.,0,0,0,0.9865463972091676,0.9861900806427002,0.9893862009048462,0.0,accept,unanimous_agreement
215948308,9349,"ok, removed the abort() call.",0,0,0,0.9836713671684264,0.9906914830207824,0.9933606386184692,0.0,accept,unanimous_agreement
215955747,9349,then why fromlocal8bit?,0,0,0,0.9804109930992126,0.9871642589569092,0.9920926690101624,0.0,accept,unanimous_agreement
215962243,9349,"excuse me, don't understand the question.",-1,-1,-1,0.9492636919021606,0.933894693851471,0.8498607873916626,-1.0,accept,unanimous_agreement
215968924,9349,"excuse me, i don't understand the question.",-1,-1,-1,0.9442902207374572,0.9381824135780334,0.818318784236908,-1.0,accept,unanimous_agreement
215972779,9349,you said the filenames are usually utf-8 encoded but you read it via fromlocal8bit instead of fromutf8... is it correct? or am i missing something?,0,0,0,0.9826490879058838,0.9550146460533142,0.992960512638092,0.0,accept,unanimous_agreement
215989776,9349,i'm not sure utf-8 qualifies as a 8-bit encoding but fromlocal8bit() works fine in this case (fromlocalmultibyte() would be a better name).,0,0,0,0.9859370589256288,0.980213463306427,0.9751989841461182,0.0,accept,unanimous_agreement
215994657,9349,"as long as the filename doesn't contain any non-latin1 character, i suppose.",0,0,0,0.987835705280304,0.9851742386817932,0.9890907406806946,0.0,accept,unanimous_agreement
215998802,9349,i suppose it uses mbstowcs() and as such works with utf-8.,0,0,0,0.9884430766105652,0.992422878742218,0.9883534908294678,0.0,accept,unanimous_agreement
216034785,9349,"you must be exhausted. otherwise, you could not confuse the 8-bit encoding with utf-8 (some kind of unicode). fromlocal8bit() loads 8-bit characters and decode them using some code page (e.g. cp1251, koi8-r, etc.). as long as the test filename contains only latin-1 characters it can be equally successfully decoded by any of fromlatin1(), fromlocal8bit() and fromutf8(). but when string contains some multibyte utf-8 character it will be decoded as some number of characters if you apply fromlocal8bit() to it. try the test code: [code block]",0,0,0,0.981337547302246,0.9894784092903136,0.9852305054664612,0.0,accept,unanimous_agreement
216036390,9349,"ok. here is it: it just a question. you could have just said ""it is pointless"" instead of doing this ""pointless"" thing.",-1,0,-1,0.8248448967933655,0.9001404643058777,0.6105772852897644,-1.0,accept,majority_agreement
216040800,9349,i decided then that without freeing the code would produce annoying false positives in memory analysers and went ahead adding the deleter.,0,0,0,0.9448195695877076,0.7199622988700867,0.5819380283355713,0.0,accept,unanimous_agreement
216043980,9349,you are wrong here. i already wrote that the qt's function name is confusing. it actually takes a multi-byte string in the current locale. p.s. and the sample outputs correct cyrillic string two times.,-1,-1,0,0.6705191135406494,0.7993836402893066,0.537487804889679,-1.0,accept,majority_agreement
216120409,9349,"from qstring document, it seems fromlocal8bit will depend on os locale/codepage, right? and i think you should use fromutf8 to avoid this.",0,0,0,0.9881884455680848,0.9880502820014954,0.9907329082489014,0.0,accept,unanimous_agreement
216123205,9349,"well, after reading several levels of qt docs i've suppose it's correct to use this method. but it really have confusing name. it should be ""fromlocalencoding()"" since it can decode not only 8-bit strings but also unicode. since all others should use the same locale on the same system it should work correctly. but fromutf8() will fails on systems with non-utf8 locale settings. (all above is not applicable to windows).",0,0,0,0.6951416730880737,0.6357807517051697,0.5764107704162598,0.0,accept,unanimous_agreement
216126420,9349,why not put this logic in getexename? i mean buffer asjusting. and why not create it of max_path size initially?,0,0,0,0.977038025856018,0.9858186841011048,0.9918272495269777,0.0,accept,unanimous_agreement
216126506,9349,"because max_path is purely windows limitation, and on unix most executable reside /usr/bin or /bin, thus making the first guess (32) work almost always.",0,0,0,0.9865434765815736,0.9843893647193908,0.9922595620155334,0.0,accept,unanimous_agreement
216126957,9349,"well, let not smart enough memory analyzers teach us to live?",0,-1,0,0.6496391892433167,0.5451384782791138,0.7508044838905334,0.0,accept,majority_agreement
216126994,9349,ok. first question is still actual.,0,0,0,0.9811354279518129,0.9797358512878418,0.989823281764984,0.0,accept,unanimous_agreement
233112330,9349,seems this could be `const`,0,0,0,0.984728217124939,0.9929942488670348,0.9923682808876038,0.0,accept,unanimous_agreement
233113120,9349,is it necessary to check its existence before opening?,0,0,0,0.9828662276268004,0.9934167861938475,0.9927067160606384,0.0,accept,unanimous_agreement
233122571,9349,"probably not, but i don't need the `qfile` object when the params file does not exists (i.e. most of the times).",0,0,0,0.9858340620994568,0.9871869087219238,0.9709876775741576,0.0,accept,unanimous_agreement
233126547,9349,you can open and read it inside local scope.,0,0,0,0.9872627854347228,0.9878679513931274,0.9952318072319032,0.0,accept,unanimous_agreement
233131357,9349,"sorry, i don't understand what do you suggest.",-1,-1,-1,0.9867154955863952,0.9897783398628236,0.9928541779518129,-1.0,accept,unanimous_agreement
233139307,9349,"sorry, i didn't see all affected code... but you just return in this case!",-1,-1,-1,0.9873086810112,0.9932276606559752,0.9936795234680176,-1.0,accept,unanimous_agreement
233142777,9349,i really don't know it is that unfavorable to have `qfile` unconditionally (might be more convincing if you elaborate a bit more)... at least please invert this `if ()` check to return early.,-1,0,0,0.848410427570343,0.7230865955352783,0.9161558747291564,0.0,accept,majority_agreement
233151370,9349,"sorry, still can't understand. i don't know what can i add. ""the `qfile` class provides an interface for reading from and writing to files"", quoting qt docs. a file does not exist, why would i need an object to access it? additionally, existing but unreadable files is an error, i must inform user about that. but then i would need a second `return {}`.",-1,-1,-1,0.9873241186141968,0.988820493221283,0.989193856716156,-1.0,accept,unanimous_agreement
233175117,9349,"ok. since in this particular case ""absence of file"" and ""corrupted/unreadable file"" have really different meaning you need to handle them differently. but debug message isn't for user. also i'm not sure it will be printed by ""release"" binary. maybe print it to the log?",0,0,0,0.9353870153427124,0.9454734325408936,0.9677196145057678,0.0,accept,unanimous_agreement
233213673,9349,"the application object is not created yet when this code is running, how can i access the log?",0,0,0,0.9811563491821288,0.97609543800354,0.9932088255882264,0.0,accept,unanimous_agreement
233216720,9349,but qdebug is not an option. std::cerr?,0,0,0,0.9802712798118592,0.97774738073349,0.9945310950279236,0.0,accept,unanimous_agreement
233306573,9349,"or much lightweight `fprintf(stderr, )`",0,0,0,0.982839047908783,0.98945951461792,0.9916811585426332,0.0,accept,unanimous_agreement
233329074,9349,i would even interrupt the app in this case. the user can rely on some parameters so that he can get an unexpected effect if the application starts without them.,0,0,0,0.978567123413086,0.9314033389091492,0.973640501499176,0.0,accept,unanimous_agreement
233431145,9349,this sounds reasonable. i'm going to replace qdebug with direct write to cerr and throw an exception after that. does anybody object?,0,0,0,0.983070194721222,0.864554226398468,0.9813320636749268,0.0,accept,unanimous_agreement
234522828,9349,"seems no one, let's try getting this into v4.1.5",0,0,0,0.9250707030296326,0.9836174249649048,0.9836709499359132,0.0,accept,unanimous_agreement
234987886,9349,"please rename it to ""paramsfilename"" and ""fn"" to ""paramsfile"".",0,0,0,0.9833104014396667,0.9938848614692688,0.9957200884819032,0.0,accept,unanimous_agreement
234989056,9349,please describe this regex.,0,0,0,0.9850731492042542,0.9847228527069092,0.9946902990341188,0.0,accept,unanimous_agreement
235041822,9349,seems like wrong assertion. we call it with `qcoreapplication::arguments()` as argument. from its documentation:,-1,0,0,0.7230987548828125,0.9267756938934326,0.7140217423439026,0.0,accept,majority_agreement
354655786,11592,redundant empty line here,0,0,0,0.9541817903518676,0.8903476595878601,0.8292669057846069,0.0,accept,unanimous_agreement
354655897,11592,`const auto checkandaddaddress `,0,0,0,0.987070858478546,0.9893798232078552,0.993787169456482,0.0,accept,unanimous_agreement
354656265,11592,i would prefer list captured variable explicitly instead of using `&`. here and other lambdas too.,0,0,0,0.9869372248649596,0.9905571937561036,0.9863617420196532,0.0,accept,unanimous_agreement
354656659,11592,maybe use: `void qcombobox::additems(const qstringlist &texts)`,0,0,0,0.9848280549049376,0.9944416880607604,0.9940872192382812,0.0,accept,unanimous_agreement
354656726,11592,`const auto populatecombo` and add `const` to other new lambdas.,0,0,0,0.9869326949119568,0.9921940565109252,0.9931881427764891,0.0,accept,unanimous_agreement
354658831,11592,do users really binds to link-local ip? is there some real world use case of that?,0,0,0,0.9816409945487976,0.9791825413703918,0.9911320805549622,0.0,accept,unanimous_agreement
354912331,11592,for what reason it can be empty?,0,0,0,0.948553740978241,0.9506512880325316,0.9800957441329956,0.0,accept,unanimous_agreement
354912919,11592,can't listeningips be empty list?,0,0,0,0.9777657389640808,0.9821330904960632,0.9859224557876588,0.0,accept,unanimous_agreement
355109661,11592,"you should have a variable for `endpoints.join(',');` and use it here instead of converting over and back. those are small places that eats performance little by little and can be easily overlooked.",0,0,0,0.9746264815330504,0.987307608127594,0.991716206073761,0.0,accept,unanimous_agreement
355110210,11592,is it possible to change `nextip` type to `qhostaddress` and change `getlisteningips()` to return `qvector `? so we can save this conversion and maybe other places too.,0,0,0,0.9886757135391236,0.9944069385528564,0.9942386150360109,0.0,accept,unanimous_agreement
355110233,11592,maybe rename `nextip` -> `ip`?,0,0,0,0.986890435218811,0.9945578575134276,0.9936174154281616,0.0,accept,unanimous_agreement
355110396,11592,imo the below code is long enough that should be moved to its own function.,0,0,0,0.9885923266410828,0.9883216023445128,0.9862287044525146,0.0,accept,unanimous_agreement
355112074,11592,"agree. `nextip` is invalid name for this function since the function knows about one ip only. `ip` is better name. but, iirc, it can contains not only ip... maybe there can be more appropriate name?",0,0,0,0.9725174903869628,0.98362135887146,0.95143461227417,0.0,accept,unanimous_agreement
355113325,11592,the return can't be `qhostaddress` because it might also return an interface name.,0,0,0,0.9884555339813232,0.9921655654907228,0.9923654198646544,0.0,accept,unanimous_agreement
355113521,11592,"probably! i'll rework this section again. truth is that the refactoring went ""backwards"". i started refactoring this code section first and then i realized that getlisteningips() had issues and refactored that too. but i never came back here to rethink yet again the logic.",0,0,0,0.823435366153717,0.7821975350379944,0.6416076421737671,0.0,accept,unanimous_agreement
355125552,11592,either i use wrong terminology or one of us is confused. users may choose (for whatever reason) to listen to a specific ipv6 local address of their network interface. they may want for traffic to go through only through that specific one.,-1,0,0,0.5320672392845154,0.8118807673454285,0.7917977571487427,0.0,accept,majority_agreement
355128400,11592,maybe name it `appendaddressstring` or `appendaddress`?,0,0,0,0.986749827861786,0.9947553873062134,0.9929599165916444,0.0,accept,unanimous_agreement
355128637,11592,"you already have the q_assert above so you can change this line to just `else` (without checking qabstractsocket::ipv6protocol). or alternatively, you should remove the q_assert above.",0,0,0,0.9887188673019408,0.9946337938308716,0.9950626492500304,0.0,accept,unanimous_agreement
355128724,11592,"maybe ""ipv6 address have multiple representations in text""?",0,0,0,0.986823558807373,0.991633415222168,0.9899458289146424,0.0,accept,unanimous_agreement
355128828,11592,`return addr;` and move `canonical` declaration to further below.,0,0,0,0.9881535172462464,0.9941301941871644,0.9945381283760072,0.0,accept,unanimous_agreement
355128907,11592,"nitpick, maybe use the full name: configurenetworkinterfaces?",0,0,0,0.9883520007133484,0.9935046434402466,0.9939246773719788,0.0,accept,unanimous_agreement
355129052,11592,i would add parentheses to the above 2 lines and to other appending cases.,0,0,0,0.9876041412353516,0.9893873929977416,0.9920473098754884,0.0,accept,unanimous_agreement
355129075,11592,redundant empty line here.,0,0,0,0.8769615292549133,0.9021413922309875,0.662513256072998,0.0,accept,unanimous_agreement
355129137,11592,you can use the shorter version: `const qhostaddress addr {ip};`,0,0,0,0.986336886882782,0.9934551119804382,0.9954268932342528,0.0,accept,unanimous_agreement
355129231,11592,this redundant level of indention can be eliminated by returning early on the opposite condition.,0,0,0,0.9729391932487488,0.9810749888420104,0.9917370676994324,0.0,accept,unanimous_agreement
355129426,11592,"maybe ""could not get guid of network interface: %1""? (and below too)",0,0,0,0.9807543754577636,0.9927748441696168,0.9838674068450928,0.0,accept,unanimous_agreement
355129599,11592,boolean `allipv4` & `allipv6` should be captured by value.,0,0,0,0.9879969954490662,0.9925290942192078,0.9943733215332032,0.0,accept,unanimous_agreement
355129644,11592,pls add parentheses to the first predicate,0,0,0,0.985354781150818,0.9883739948272704,0.9934048056602478,0.0,accept,unanimous_agreement
355129720,11592,"maybe just ""can not find the configured address \""%1\"" to listen on""?",0,0,0,0.9589845538139344,0.9905129671096802,0.9741113781929016,0.0,accept,unanimous_agreement
355129976,11592,"maybe just ""can not find the configured address ""%1"" to listen on""?",0,0,0,0.9726534485816956,0.9889005422592164,0.9746444821357728,0.0,accept,unanimous_agreement
355130087,11592,i see no point leaving this comment.,-1,0,-1,0.8505322933197021,0.8936462998390198,0.5316778421401978,-1.0,accept,majority_agreement
355176352,11592,"seems it's a ""one-level-up"" logic. it should be outside of this method: [code block]",0,0,0,0.9795840382575988,0.9909046292304992,0.9904118180274964,0.0,accept,unanimous_agreement
355176551,11592,maybe define some helper like: [code block],0,0,0,0.9819183349609376,0.993320882320404,0.9918975830078124,0.0,accept,unanimous_agreement
355177138,11592,canonicalipv6addr shouldn't return non-ipv6 address!,0,0,0,0.9067979454994202,0.7323459982872009,0.9890537261962892,0.0,accept,unanimous_agreement
355177264,11592,"i understand what you're saying, but isn't it safer for `configurenetinterfaces()` to do the self-check? although in this particular case nothing bad will happen if we re-run this function.",0,0,0,0.9774342775344848,0.97992604970932,0.9842803478240968,0.0,accept,unanimous_agreement
355177366,11592,so return a null qhostaddress?,0,0,0,0.984217405319214,0.9891258478164672,0.9950894713401794,0.0,accept,unanimous_agreement
355177468,11592,"nah, i don't think this is worth it. it is only 2-3 places where we make endpoints.",0,0,-1,0.5486049056053162,0.7529477477073669,0.5787969827651978,0.0,accept,majority_agreement
355182276,11592,typo: represantations -> representations,0,0,0,0.9865282773971558,0.9880111813545228,0.9937758445739746,0.0,accept,unanimous_agreement
355182563,11592,the white space placed wrong: `<<( ` -> `<< (`,0,0,0,0.7655024528503418,0.8843644261360168,0.9555714130401612,0.0,accept,unanimous_agreement
355377532,11592,"if applying this function to ipv4 address isn't valid ""use case"" you should prevent it in any way (at least add an appropriate assertion). otherwise it may allow logically incorrect code.",0,0,0,0.9549771547317504,0.977644383907318,0.9818772077560424,0.0,accept,unanimous_agreement
355379714,11592,maybe use some more ip-specific placeholders (e.g. `0.0.0.0` and `::0`) instead? it appears in configure file and can confuse the readers.,0,0,0,0.9856806993484496,0.9923175573349,0.985335111618042,0.0,accept,unanimous_agreement
355431664,11592,i am confused. how do i prevent it in any way? and won't the assertion work only in debug?,-1,-1,-1,0.9217801690101624,0.9407400488853456,0.9155991673469543,-1.0,accept,unanimous_agreement
355434092,11592,you can throw runtimeerror... or you can modify it to be valid for any ip (and rename it to `canonicalipaddr`).,0,0,0,0.9894841313362122,0.991430938243866,0.988658607006073,0.0,accept,unanimous_agreement
355434732,11592,or even it can return ipv6 representstion of ipv4... unless i am wrong it is possible.,0,0,0,0.8899698257446289,0.8972316384315491,0.9912502765655518,0.0,accept,unanimous_agreement
355444469,11592,[a link] seems to do the job. so it becomes: [code block],0,0,0,0.9848768711090088,0.9866509437561036,0.9940306544303894,0.0,accept,unanimous_agreement
355445883,11592,and also apply all remaining modifications.,0,0,0,0.9858824014663696,0.98845773935318,0.9955894947052002,0.0,accept,unanimous_agreement
355446358,11592,"or it already in ""canonical"" form?",0,0,0,0.9862096905708312,0.9929459691047668,0.9894691705703736,0.0,accept,unanimous_agreement
355455027,11592,"it can't be, because at this point it is ipv4. if you mean below, there is no way to know beforehand. so we convert unconditionally.",0,0,0,0.9749857783317566,0.9734587073326112,0.9877712726593018,0.0,accept,unanimous_agreement
355455260,11592,do you insist on this change?,0,0,0,0.9612088203430176,0.9605004787445068,0.9876936674118042,0.0,accept,unanimous_agreement
355455672,11592,just to clarify: i don't see a point to this so i am not going to implement it.,-1,0,0,0.8891335725784302,0.5322615504264832,0.9464015364646912,0.0,accept,majority_agreement
355456144,11592,"interesting. i'll take a look into the rest of the code and if it doesn't break something, i'll change it to your suggestion.",0,0,1,0.5124718546867371,0.9610784649848938,0.7497057914733887,0.0,accept,majority_agreement
355473730,11592,"i would implement another variant instead. i mean `canonicalipaddr` that returns ip of the same type as its argument. btw, we can use it unconditionally since it always returns valid result.",0,0,0,0.9883384704589844,0.9913498163223268,0.9937830567359924,0.0,accept,unanimous_agreement
355513549,11592,"this branch isn't needed anymore due to the way ""all addresses""/all ipv4/all ipv6 are returned by getlisteningips(). so all the code below is shifted one indentation level up.",0,0,0,0.9890992641448976,0.9928821325302124,0.9940158128738404,0.0,accept,unanimous_agreement
355514062,11592,ok. don't insist.,0,-1,0,0.8838226199150085,0.6936925649642944,0.94621342420578,0.0,accept,majority_agreement
355516590,11592,no.,0,0,0,0.8795708417892456,0.9381861686706544,0.9730188846588136,0.0,accept,unanimous_agreement
355519186,11592,"afaik you are duplicating the same string multiple times, i.e. every qstringliteral() you constructed is going to be distinct in the binary and thus boating it up. imo using qlatin1string() is suffice.",0,0,0,0.9889149069786072,0.9804505109786988,0.9790688157081604,0.0,accept,unanimous_agreement
355520218,11592,is the explicit constructor required? would this work: `return addr.toipv6address();`?,0,0,0,0.9870012998580932,0.9951438903808594,0.9953495860099792,0.0,accept,unanimous_agreement
355520601,11592,would this work: `session->setnetworkinterfaceaddress(ifaceaddr.isnull() ? {} : ifaceaddr.tostring());`? and the similar one below?,0,0,0,0.986947774887085,0.994131863117218,0.995132863521576,0.0,accept,unanimous_agreement
355521165,11592,imo you should always use `int` unless doing bits operations.,0,0,0,0.9889574646949768,0.9929728507995604,0.9853311777114868,0.0,accept,unanimous_agreement
355521407,11592,and add `const`.,0,0,0,0.987576961517334,0.988961398601532,0.995229959487915,0.0,accept,unanimous_agreement
355521682,11592,for 3-way or more cases better use a `switch()`.,0,0,0,0.9880992770195008,0.990323543548584,0.9935770630836488,0.0,accept,unanimous_agreement
355525234,11592,i wanted to avoid the extra space taken by the `break` statement on each branch.,0,0,0,0.9674633741378784,0.9859822988510132,0.978563904762268,0.0,accept,unanimous_agreement
355525551,11592,damn it. i forgot about const because i was trying something else initially.,-1,-1,-1,0.9883397817611694,0.99044668674469,0.9948949217796326,-1.0,accept,unanimous_agreement
355527338,11592,unfortunately no. gcc: [code block] msvc: [code block],-1,-1,-1,0.6907473206520081,0.6770362854003906,0.9016969799995422,-1.0,accept,unanimous_agreement
355530887,11592,no. that constructor is marked as explicit. and `return {addr.toipv6address()};` fails with: [code block],0,0,0,0.9840205907821656,0.9947001934051514,0.9933480620384216,0.0,accept,unanimous_agreement
355530995,11592,"on a second thought, the original code of this block should be preserved and should let webui return the ip address string because now the api doesn't make sense.",0,0,0,0.9351468682289124,0.9736180305480956,0.9696314930915833,0.0,accept,unanimous_agreement
355532301,11592,"and how will the webui user select ""i want all ipv4"" addresses for the network interface? (vs all address vs all ipv6 addresses vs specific address)",0,0,0,0.988740622997284,0.9924712181091307,0.994358479976654,0.0,accept,unanimous_agreement
355533007,11592,ps: the values here mirror the ones chosen for gui combobox. they represent the position of the 3 top items in the combobox list.,0,0,0,0.982396364212036,0.9929410219192504,0.9931666254997252,0.0,accept,unanimous_agreement
355543336,11592,"i guess some modification in js code is required, that is to mimic/follow the new combobox options in gui. you see the api key here is `current_interface_address`, so unless you document explicitly these magic values in webapi document, none of the users of webapi could guess what `1` or `2` means and not to mention this semantic change warrants a webapi version bump.",0,0,0,0.9851030707359314,0.9911841750144958,0.9828851222991944,0.0,accept,unanimous_agreement
355551731,11592,i can do that. just point me to the correct place. the webapi major version bump will happen anyway because i remove the `listen_on_ipv6_address` key,0,0,0,0.9832763671875,0.978775143623352,0.9932350516319276,0.0,accept,unanimous_agreement
355553276,11592,any comment on this discussion? [a link],0,0,0,0.983237624168396,0.986885905265808,0.9935010075569152,0.0,accept,unanimous_agreement
355567675,11592,"guys, i really don't understand why you can't accept it as it processed by app core (i.e. `0.0.0.0` and `::`)? why all these ""magic"" values of separate type?",-1,-1,-1,0.7903994917869568,0.8460769057273865,0.7486685514450073,-1.0,accept,unanimous_agreement
355627498,11592,"in this case `0.0.0.0` and `::` will be treated as magic values from the ui perspective. the ui must not show them as `0.0.0.0` and `::` but as `all ipv4` and `all ipv6` respectively. in this context they have special meaning. and we need another value that will indicate `all addresses` (could be an empty string). so it is a choice on the set of magic numbers. but in this case, don't we run the risk of web devs ignoring these special cases if we just send `0.0.0.0` and `::` ? (sending 0/1/2) will force them to take a better look (and their users will point that out) in any case, i am no expert in designing outward facing api nor do i care much about the webapi stuff. if you find a consensus on how it should be represented via the webapi, i'll happily oblige.",0,0,0,0.9706144332885742,0.98627370595932,0.9739133715629578,0.0,accept,unanimous_agreement
355836760,11592,"that is what i meant in the first post. an empty string for all address is fine for me or even better imo: `0.0.0.0,::` from os api perspective, these 2 values are not special, they just binds to any ipv4/ipv6 address respectively. and any one who ever worked with network sockets will recognize these values. or do you have other *special* meaning? i'm sorry to have to say this, you're touching webapi here and one mistake here is going to cause inconveniences for webapi devs/users for some period. `current_interface_address` can only expect an ipv4/ipv6 address string or an empty string. as for webui, (warning, pseudo code blow) here need to add an `if (item === '::') // add ""all ipv6"" option` to populate the entries: [a link] and here needs to modified to get the ip address value, probably something like: `if ($('optionalipaddresstobind').getproperty('value') === 'all ipv6') // set to ""::""` [a link]",-1,-1,-1,0.9708594083786012,0.9842706322669984,0.9826437830924988,-1.0,accept,unanimous_agreement
355838301,11592,"in any case it's a bad idea to blindly show any received data. ui level should make postprocessing and use appropriate representation. when magic values are documented there is no difference between numbers and ""special"" ips. but as i said before ""special"" ips are better for readers (for debugging purposes). so even some ""stupid"" ui shows it as is its better than see some really meaningless numbers. p.s. even if the others vote for the numbers and you decide to use them, you don't need to convert anything here, just compare them in string form.",-1,-1,-1,0.913601815700531,0.6405412554740906,0.610924482345581,-1.0,accept,unanimous_agreement
356189860,11592,"maybe `qmax(index, 0)`",0,0,0,0.983749270439148,0.9929230213165284,0.992000699043274,0.0,accept,unanimous_agreement
356191162,11592,"just a suggestion, it can be simplified to: [code block] assuming there won't be another ip version...",0,0,0,0.9835326671600342,0.9906612038612366,0.9913575649261476,0.0,accept,unanimous_agreement
356191312,11592,`const qhostaddress ifaceaddr`,0,0,0,0.9814437627792358,0.9939157366752625,0.9938068985939026,0.0,accept,unanimous_agreement
356230119,11592,"in theory there are other values to the protocol enum: [a link] practically it is unlikely to have one those other values. in any case, i am leaning at leaving it they way it is now.",0,0,0,0.8003723621368408,0.9828148484230042,0.98517644405365,0.0,accept,unanimous_agreement
356370135,11592,"the trailing `//`, is it leftover?",0,0,0,0.986294448375702,0.9885762333869934,0.9936989545822144,0.0,accept,unanimous_agreement
771102536,15793,maybe it is time to add `qlatin1string` to the key.,0,0,0,0.985181212425232,0.992964506149292,0.9887515902519226,0.0,accept,unanimous_agreement
771105527,15793,"imo path (in filesystem sense) should only have one form: don't end with a trailing slash. if this can be uphold through out the code base, then concatenating file path and file name is easy, just add slash (appropriate path separator) and append the file name and we don't need this helper.",0,0,0,0.981795847415924,0.9906110167503356,0.9897642135620116,0.0,accept,unanimous_agreement
771106234,15793,maybe it is best to use another variable instead of reusing `path`.,0,0,0,0.983242690563202,0.9922143816947936,0.9855515956878662,0.0,accept,unanimous_agreement
771106309,15793,maybe rename `path` to `relativepath`?,0,0,0,0.9872819781303406,0.99424546957016,0.993316650390625,0.0,accept,unanimous_agreement
771110054,15793,"if this function is commonly used and performance-related, then it might be wise to append to `qstring` directly and drop the last `','` manually.",0,0,0,0.9880471229553224,0.9941785335540771,0.992694854736328,0.0,accept,unanimous_agreement
771610641,15793,"this logic is just moved from another place. i don't want to change it in this pr. currently, i have unfinished changes that encapsulate the path handling in a separate class, which will save us from unnecessary cares throughout the code base. but this job requires a lot of routine code changes (due to the extensive use of paths in qbittorrent), so i decided to finish it after my currently opened prs are done.",0,0,0,0.7675973773002625,0.8645808696746826,0.928024172782898,0.0,accept,unanimous_agreement
771801201,15793,are you sure that it will be so much more optimal?,0,0,0,0.9760881662368774,0.9648203253746032,0.9863166213035583,0.0,accept,unanimous_agreement
771801373,15793,anyway trying to throw it away here...,-1,0,0,0.8879945874214172,0.9636741280555724,0.9325613975524902,0.0,accept,majority_agreement
771810374,15793,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
773412618,15793,"disable the label too: `m_ui->labeldownloadpath->setenabled(index == 1);` these 2 commands need to be called in constructor too or somewhere else on dialog creation. and while we're in this method, the ""path"" should be empty when the global temp path setting is disabled. i don't know about the rest of the method, i only noticed these.",0,0,0,0.975068747997284,0.9896278381347656,0.993891716003418,0.0,accept,unanimous_agreement
773584859,15793,"it depends on whether there are many elements in `columns`. however if the coding complexity is manageable, i would go for it anyway.",0,0,0,0.986099898815155,0.9915942549705504,0.9879195690155028,0.0,accept,unanimous_agreement
773586543,15793,should be fixed now.,0,0,0,0.9770104885101318,0.9794327020645142,0.994026780128479,0.0,accept,unanimous_agreement
773630412,15793,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
775362321,15793,it is possible to use `&newpath` (and at new code below too),0,0,0,0.9887890219688416,0.9940714240074158,0.9952675104141236,0.0,accept,unanimous_agreement
775364418,15793,is it possible to forward declare it?,0,0,0,0.9880216121673584,0.9935387969017028,0.9946411848068236,0.0,accept,unanimous_agreement
775367737,15793,add an empty line above?,0,0,0,0.9800955057144164,0.9920559525489808,0.9936854243278505,0.0,accept,unanimous_agreement
775368603,15793,"off topic, should we decide on one between `std::pair` and `qpair` in qbt codebase? i would favor `std::pair`.",0,0,0,0.9842997789382936,0.993024468421936,0.989819586277008,0.0,accept,unanimous_agreement
775370521,15793,revert it?,0,0,0,0.8697619438171387,0.9821718335151672,0.9854857921600342,0.0,accept,unanimous_agreement
775372118,15793,i would give `m_ui->checkusedownloadpath->checkstate()` a local variable since it is used twice.,0,0,0,0.9886758327484132,0.993614673614502,0.9928648471832277,0.0,accept,unanimous_agreement
775372245,15793,revert it?,0,0,0,0.8697619438171387,0.9821718335151672,0.9854857921600342,0.0,accept,unanimous_agreement
775372880,15793,why add it?,0,0,0,0.8761664628982544,0.9691979885101318,0.9886223673820496,0.0,accept,unanimous_agreement
775373561,15793,(optional) maybe use a local variable for `std::count_if` since the code is long.,0,0,0,0.988184094429016,0.993158996105194,0.9937947988510132,0.0,accept,unanimous_agreement
775383684,15793,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
775383753,15793,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
775384606,15793,doesn't matter to me. added.,0,0,0,0.896803081035614,0.9319725036621094,0.9253356456756592,0.0,accept,unanimous_agreement
775386434,15793,"i think we discussed similar issues (maybe in passing). i think we should use std types unless a similar qt type has obvious advantages (for example, implicit sharing).",0,0,0,0.9837650656700134,0.9826238751411438,0.983804166316986,0.0,accept,unanimous_agreement
775387401,15793,new widgets were added thus height is increased.,0,0,0,0.9815034866333008,0.9902892112731934,0.9938123226165771,0.0,accept,unanimous_agreement
775388645,15793,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
775389234,15793,size is changed due to new dialog layout (and new widgets added).,0,0,0,0.9839476346969604,0.9883965849876404,0.9932629466056824,0.0,accept,unanimous_agreement
775389726,15793,the remainder of some previous iteration... deleted it.,0,0,0,0.9273902177810668,0.964039385318756,0.986120104789734,0.0,accept,unanimous_agreement
775391284,15793,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
775412717,15793,you should include the header (` `) for std::pair.,0,0,0,0.9877372980117798,0.9936984777450562,0.9958828687667848,0.0,accept,unanimous_agreement
777085159,15793,maybe remove those?,0,0,0,0.9750208258628844,0.989454746246338,0.9853678345680236,0.0,accept,unanimous_agreement
777085307,15793,use `switch ()`?,0,0,0,0.9881410598754884,0.9933552742004396,0.9949826002120972,0.0,accept,unanimous_agreement
777085401,15793,seems it isn't frequently used so i would ditch it. (same in `torrentcategorydialog::usedownloadpathchanged`),0,0,0,0.9431573152542114,0.9934681057929992,0.9893203973770142,0.0,accept,unanimous_agreement
777086035,15793,seems `dirs` is redundant. you could just search and record the value with a loop.,0,0,0,0.9642184376716614,0.9551568627357484,0.9830841422080994,0.0,accept,unanimous_agreement
777086099,15793,is `qstringlist()` needed? it looks like it should work without it.,0,0,0,0.9858455657958984,0.9942440390586852,0.9936634302139282,0.0,accept,unanimous_agreement
777086485,15793,this parameter can be const ref now. the same to `setdownloadpath()`,0,0,0,0.9886699914932252,0.9941502213478088,0.9961376786231996,0.0,accept,unanimous_agreement
777086628,15793,an shorter alternative: [code block],0,0,0,0.984190821647644,0.9886147975921632,0.994899332523346,0.0,accept,unanimous_agreement
777086874,15793,is it leftover?,0,0,0,0.9812082052230836,0.9825963973999025,0.986117660999298,0.0,accept,unanimous_agreement
777117927,15793,"i would prefer not to use `switch` when there are only a couple of cases here, especially when we don't have to handle them all.",0,0,0,0.9570353031158448,0.9825833439826964,0.9371711015701294,0.0,accept,unanimous_agreement
777118071,15793,"we need to store `qstringlist` but `pathlist.mid(0, maxlength)` returns `qlist `.",0,0,0,0.9894024133682252,0.9926955699920654,0.9952765703201294,0.0,accept,unanimous_agreement
777118171,15793,"no. it is replacement for ""upgrade code"" above.",0,0,0,0.9835546612739564,0.9937912821769714,0.993761956691742,0.0,accept,unanimous_agreement
777119504,15793,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
777119779,15793,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
777119977,15793,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
777120479,15793,it is previously existing logic but i anyway changed it.,0,0,0,0.9849911332130432,0.9810665845870972,0.99174302816391,0.0,accept,unanimous_agreement
777120646,15793,sure.,0,0,0,0.9536533951759338,0.9664214849472046,0.9824982285499572,0.0,accept,unanimous_agreement
218729789,9541,give it a default `false`.,0,0,0,0.9812662601470948,0.9863415360450744,0.994732141494751,0.0,accept,unanimous_agreement
218730197,9541,"what if user set `priority == 999`, should you filter invalid values?",0,0,0,0.9861702919006348,0.984793484210968,0.9847809076309204,0.0,accept,unanimous_agreement
218730411,9541,"really, qstring isn't much longer to type than auto.",0,0,0,0.8632128238677979,0.8438334465026855,0.8052437901496887,0.0,accept,unanimous_agreement
218731720,9541,"maybe add a lambda function, so the code will be a bit shorter.",0,0,0,0.9828230738639832,0.9906472563743592,0.9840291142463684,0.0,accept,unanimous_agreement
218732832,9541,why invalid file id isn't bad param error? (unlike invalid prio),0,-1,0,0.8987815976142883,0.6486693024635315,0.8973156213760376,0.0,accept,majority_agreement
218733463,9541,"i would change param name, but it breaks api compatibility...",-1,-1,0,0.6319684982299805,0.547590434551239,0.7839285731315613,-1.0,accept,majority_agreement
219679376,9541,any benefit to using an explicit type vs `auto`?,0,0,0,0.9848076105117798,0.99313086271286,0.9921282529830932,0.0,accept,unanimous_agreement
219679943,9541,i want your thoughts: we add an optional `ids` param that takes priority over the `id` param. or we can change the name and bump the web api version.,0,0,0,0.9477206468582152,0.9840848445892334,0.9927248954772948,0.0,accept,unanimous_agreement
219681008,9541,"the `filepriority` enum is defined in `gui/torrentcontentmodelitem.h`, which we can't import into a web controller. any thoughts on where we should migrate this enum? i would think somewhere inside `base` but i don't know those classes very well.",0,0,0,0.9563366174697876,0.9812607765197754,0.9914941787719728,0.0,accept,unanimous_agreement
219687433,9541,i believe coding_guidelines has enough explaination: [a link],0,0,0,0.8637200593948364,0.907853066921234,0.9526511430740356,0.0,accept,unanimous_agreement
219688544,9541,file ids ?,0,0,0,0.9859301447868348,0.9920026063919068,0.9936475157737732,0.0,accept,unanimous_agreement
219688550,9541,`const int id : fileidsints`,0,0,0,0.986002802848816,0.9923732876777648,0.993960738182068,0.0,accept,unanimous_agreement
219688712,9541,"please keep the code succinct, with this var introduced `qstringlist fileids` is redundant now.",0,0,0,0.9856070280075072,0.9930208325386048,0.994447946548462,0.0,accept,unanimous_agreement
219688785,9541,"you should focus on whether the value will be accepted by `torrent->setfilepriority` or not. offtopic, it seems `torrent->setfilepriority` only changes 1 prio at a time which is inefficient when you invoke it in a loop.",0,0,0,0.9838712215423584,0.9829164147377014,0.9728214144706726,0.0,accept,unanimous_agreement
219688831,9541,"i didn't mean to make it so complicated. just check that they are all correct data type, otherwise it is clearly ""bad param"" error. p.s. please, don't remove your comments even if you change your mind later. just say about. otherwise it's hard to maintain the discussion.",-1,-1,-1,0.9542882442474364,0.9042046666145324,0.7861454486846924,-1.0,accept,unanimous_agreement
219688943,9541,"we shouldn't produce incompatible changes so frequently if possible. so maybe we should have some way to keep track of these ""non-urgent"" changes, and then make all the changes at once when we have the required changes?",0,0,0,0.9687505960464478,0.982036292552948,0.983526885509491,0.0,accept,unanimous_agreement
219706776,9541,"maybe keep the list of postponed changes near the api version declaration, e.g. ""when your changes require increasing of minor version you should also apply the following:"" and then list of changes. what do you say? ?",0,0,0,0.9864891171455384,0.9923630952835084,0.9858927130699158,0.0,accept,unanimous_agreement
219710472,9541,"i think you missed my point. the valid priority values are defined in `gui/torrentcontentmodelitem.h`, which is the list i can check against to see if the value will be accepted.",0,0,0,0.9362676739692688,0.9864902496337892,0.9710224866867064,0.0,accept,unanimous_agreement
219710573,9541,"we have two options: check that they're valid `int`s (which i'm already doing), or check that they're a valid `filepriority` values. no one removed comments. you replied to the wrong comment thread...",0,0,0,0.9387329816818236,0.8670524954795837,0.9325971603393556,0.0,accept,unanimous_agreement
219710600,9541,recommendations for modern c++ are to use `auto` quite liberally. we get no benefit from an explicit type here.,0,0,0,0.965004563331604,0.9468216896057128,0.987752079963684,0.0,accept,unanimous_agreement
219710608,9541,from the coding guidelines: `declarations for which one can gather enough information about the object interface (type) from its name or the usage pattern .. or the right part of the expression nicely fit here.` seems we can gather enough info about the type from the variable name `fileidsints`.,0,0,0,0.9765869975090028,0.9914592504501344,0.9864770174026488,0.0,accept,unanimous_agreement
219710633,9541,because the user can enter multiple.,0,0,0,0.9839606285095216,0.9804819226264954,0.9915159940719604,0.0,accept,unanimous_agreement
219711652,9541,"my latest commit modifies `torrenthandle::setfilepriority()`to take a list of indexes, since the controller code is the only place we call it.",0,0,0,0.9846610426902772,0.9921334981918336,0.99458646774292,0.0,accept,unanimous_agreement
219725458,9541,"i mean ""id"" in uppercase.",0,0,0,0.9782994985580444,0.9887976050376892,0.990455687046051,0.0,accept,unanimous_agreement
219725595,9541,"that is the gui part, but really who is consuming the priority values? libtorrent, you should check from there.",0,0,0,0.9867520332336426,0.981917440891266,0.9927279949188232,0.0,accept,unanimous_agreement
219726525,9541,"oh, i misunderstood. will update",-1,-1,0,0.9133995175361632,0.957580268383026,0.9067302942276,-1.0,accept,majority_agreement
219726559,9541,"source? imo you're using `auto` a bit too liberal. `auto` is more like a shortcut, not be used like `var` in javascript.",0,0,0,0.7716548442840576,0.7476145029067993,0.500022828578949,0.0,accept,unanimous_agreement
219727038,9541,from *item 5: prefer auto to explicit type declarations* in *effective modern c++* by scott meyers:,0,0,0,0.9784947633743286,0.9823625683784484,0.9739950299263,0.0,accept,unanimous_agreement
219727537,9541,"ah, thank you, however i don't see he mentions anything about readability, a google search gives a handful of debates about readability of using `auto`.",1,1,1,0.923374891281128,0.8173157572746277,0.9299041628837584,1.0,accept,unanimous_agreement
219728386,9541,"it's not just for the gui, because we use the same priority values in the webui. the values are defined in gui code because we have very little separation between gui logic and application code, but they really should be moved to base. libtorrent will accept a priority between 0-7 ([a link]; we currently only use 0, 1, 6, and 7. without the values in `gui/torrentcontentmodelitem.h`, users would be able to enter a value between 2-5. i'm moving the `prio` namespace to a new file `base/torrentpriority.h`. if we should move it, lmk.",0,0,0,0.9783399701118468,0.9889123439788818,0.9825881123542786,0.0,accept,unanimous_agreement
219728980,9541,"i don't think i get your idea. however i think the commit bumping api version should also include the api code changes, so it is possible to look up by reading git log.",0,0,0,0.9866936802864076,0.9507603645324708,0.971445620059967,0.0,accept,unanimous_agreement
219750660,9541,"when we discussed our rules about using `auto` keyword, we wanted to find a balance between faster code writing and readability. so don't abuse it, please.",0,0,0,0.7610217928886414,0.9519912600517272,0.6399101614952087,0.0,accept,unanimous_agreement
219752693,9541,the variable name does not matter. this paragraph means something completely different: [code block] or: [code block],0,0,0,0.9710347652435304,0.9869980812072754,0.989986002445221,0.0,accept,unanimous_agreement
219755702,9541,you shouldn't use libtorrent interface directly outside of abstraction layer (bittorrent:: types and functions). yes. torrent file priority enum should be declared in bittorrent namespace. maybe in torrenthandle.h file (i'm not sure there is separate file should exist).,0,0,0,0.9893811941146852,0.9927101135253906,0.9939600229263306,0.0,accept,unanimous_agreement
219909838,9541,", take this case for example. meaning of param 'id' was changed. now it provide list of file ids. it should cause changing of param name but it breaks api compatibility. it's really bad idea to make incompatible changes too frequently. we can proceed to use old name for some time and just mark it for future changing. when we make changes that cannot be made in a compatible way, we can add all pending changes with them.",-1,-1,-1,0.9722670316696168,0.9845049381256104,0.8776365518569946,-1.0,accept,unanimous_agreement
220051358,9541,"i don't object the idea, however i must say from my experience, revisiting an older code after some time takes much more time for the developer and outcome is usually not good enough quality. if is interested, we could try it out in this case (experiment).",0,0,0,0.907521426677704,0.8875245451927185,0.9109033346176147,0.0,accept,unanimous_agreement
220054344,9541,"so i suggest to keep list with postponed changes. we can have some instructions, where, what and how it should be changed. or we can even have commented changes inplace. well, i'm not insisting. i just thought we shouldn't break api too often.",0,0,0,0.9657361507415771,0.8939529657363892,0.9739360809326172,0.0,accept,unanimous_agreement
220064298,9541,"forgive. i just got an email notification, and it was like you answered my question in this thread. but then i didn't find your answer here.",-1,0,-1,0.9318695664405824,0.7119250893592834,0.9173005223274232,-1.0,accept,majority_agreement
220064988,9541,isn't `prioritizefiles()` enough?,0,0,0,0.9804278016090392,0.993310809135437,0.9937997460365297,0.0,accept,unanimous_agreement
220776339,9541,"i would be interested, maybe maintaining a separate branch with breaking api changes that can be merged pre-minor version bump.",0,0,0,0.9743927121162416,0.9858989715576172,0.9889373779296876,0.0,accept,unanimous_agreement
220777467,9541,we still have to do some extra accounting since `prioritizefiles()` wants a list of priorities for all files in the torrent. but i think that's very doable and will allow us to get rid of `torrenthandle::setfilepriority()` entirely.,0,0,1,0.8636701703071594,0.970359981060028,0.6177573800086975,0.0,accept,majority_agreement
220788066,9541,fileids,0,0,0,0.9859920144081116,0.908598244190216,0.9892784953117372,0.0,accept,unanimous_agreement
220789022,9541,and have opened pr for it. let's try something!,1,1,1,0.6413532495498657,0.9103698134422302,0.969456672668457,1.0,accept,unanimous_agreement
220799893,9541,"this namespace is redundant. it was a very outdated piece of code... either declare filepriority as enum class or move it to torrenthandle and use more meaningful names: ignoredfile, normalpriorityfile, etc. the second way will be easier for you, because it will require less changes to the existing code (enum class will require explicit cast to int).",0,0,0,0.7371073961257935,0.9528120756149292,0.682607889175415,0.0,accept,unanimous_agreement
220800063,9541,anyway coding style should be fixed. add spaces around `=`.,0,0,0,0.9868844747543336,0.9919775128364564,0.9930483102798462,0.0,accept,unanimous_agreement
221478357,9541,what's wrong with removing the `prio` namespace and keeping `filepriority` as an enum (non-class)?,0,0,0,0.8985581398010254,0.9878811836242676,0.958523452281952,0.0,accept,unanimous_agreement
221492139,9541,nothing wrong for me if we get meaningful names.,0,0,0,0.5057071447372437,0.8052391409873962,0.9414404034614564,0.0,accept,unanimous_agreement
221541773,9541,"to me, ‘bittorrent::filepriority::ignored’ is descriptive and meaningful, but i take it you don’t agree?",0,0,0,0.6779721975326538,0.9169939160346984,0.9844278693199158,0.0,accept,unanimous_agreement
221647272,9541,"yes, it's descriptive and meaningful. i'm ok with it if you'll use camel case: `bittorrent::filepriority::ignored`. but the question is, how are you going to get those names? old style enum doesn't produce its own namespace. so you either have to use the old ""perverse"" way of declaring it in an extra ""filepriority"" namespace, or you still have to use an enum class.",0,0,0,0.942662239074707,0.9444414973258972,0.663772702217102,0.0,accept,unanimous_agreement
226881611,9541,"i've moved the values into a `filepriority` class. this also allows us to support an `isvalidpriority()` function, which is needed to validate values from the webapi.",0,0,0,0.9892765283584596,0.994187831878662,0.9934271574020386,0.0,accept,unanimous_agreement
226992837,9541,very peculiar use of the class... you just use it as a namespace. i don't think that makes any sense.,-1,-1,-1,0.928393304347992,0.9708172082901,0.908644199371338,-1.0,accept,unanimous_agreement
226994149,9541,it's better to avoid using of qlist unless it's strongly required. use qvector instead. and reserve needed amount of items before fill it.,0,0,0,0.9833200573921204,0.993671178817749,0.991735339164734,0.0,accept,unanimous_agreement
226994818,9541,why not to merge this loop with the one above?,0,0,0,0.9410413503646852,0.9809888005256652,0.9870699644088744,0.0,accept,unanimous_agreement
227040668,9541,so then i'll go back to having an explicit namespace for this. an enum class alone doesn't satisfy my requirements of having an `isvalidpriority()` method.,0,0,0,0.9727168679237366,0.9717941880226136,0.990571916103363,0.0,accept,unanimous_agreement
227043710,9541,actually you have the same (explicit namespace for this) currently. additionally you use inappropriate language element to declare it. why not just declare it alongside with the affected enum class?,0,0,0,0.818905770778656,0.9853156805038452,0.9892383813858032,0.0,accept,unanimous_agreement
227199401,9541,"it made sense before, but can be refactored now that we use `prioritizefiles()`.",0,0,0,0.9882255792617798,0.9940868616104126,0.9930440783500672,0.0,accept,unanimous_agreement
227199421,9541,will be removed due to merging the two loops,0,0,0,0.9848249554634094,0.9831783175468444,0.9894874095916748,0.0,accept,unanimous_agreement
227874448,9541,now you should adjust used types to avoid multiple type cast (it should appear immediately after/before you need to use it as raw integer).,0,0,0,0.9885739088058472,0.9915255904197692,0.993963658809662,0.0,accept,unanimous_agreement
228022040,9541,"this has been implemented as an enum class now, with `isvalidfilepriority()` defined in an anonymous namespace inside `torrentscontroller.cpp`.",0,0,0,0.9888691902160645,0.9937185049057008,0.995509147644043,0.0,accept,unanimous_agreement
228046778,9541,this was lazy on my part. i just pushed a new commit trying to minimize this.,-1,-1,-1,0.9694675803184508,0.8843562602996826,0.932674527168274,-1.0,accept,unanimous_agreement
228051009,9541,i wouldn't create this var and just use `static_cast (prio)` inplace.,0,0,0,0.9825205206871032,0.9864518642425536,0.988689124584198,0.0,accept,unanimous_agreement
228051095,9541,the same as above.,0,0,0,0.981149673461914,0.988840878009796,0.9920604228973388,0.0,accept,unanimous_agreement
228052170,9541,the same as above.,0,0,0,0.981149673461914,0.988840878009796,0.9920604228973388,0.0,accept,unanimous_agreement
228053302,9541,seems like it would be better to have `m_priority` and all related methods (here and in child classes) of type filepriority. i don't insist that you change it in this pr if it's too much for you.,0,0,0,0.958026111125946,0.9891648888587952,0.982926607131958,0.0,accept,unanimous_agreement
232909485,9541,"i've switch this class and all subclasses from using `int` to `bittorrent::filepriority`, where appropriate",0,0,0,0.9890486001968384,0.9922128319740297,0.994258999824524,0.0,accept,unanimous_agreement
236032261,9541,`bool isvalidfilepriority(const bittorrent::filepriority priority)`,0,0,0,0.9848636984825134,0.9917336702346802,0.994787335395813,0.0,accept,unanimous_agreement
236060298,9541,added `const` to the parameter,0,0,0,0.9878007173538208,0.9920493960380554,0.9955108165740968,0.0,accept,unanimous_agreement
236082729,9541,seems like **filepriority** should be declared in its own header...,0,0,0,0.9574007987976074,0.9923254251480104,0.9874491691589355,0.0,accept,unanimous_agreement
236085819,9541,"do we want a new header file just for this one enum class? seems it might be overkill, but i don't feel strongly.",-1,0,0,0.9319937229156494,0.8916160464286804,0.8274891972541809,0.0,accept,majority_agreement
236086219,9541,"overkill is include entire ""torrenthandle.h"" when we need only filepriority class. , what do you say? if it's no problem feel free to merge it.",0,0,0,0.9591417908668518,0.978592336177826,0.7995268702507019,0.0,accept,unanimous_agreement
236086964,9541,"this idea actually has popped into my mind, it doesn't seem right that `torrenthandle` is exposed when we only need `filepriority`. i think there should be a file that has all these similar enum/struct defines (and their helper functions). maybe ""bitorrent/enums.{cpp, h}""?",0,0,0,0.8827962279319763,0.988633632659912,0.9732692837715148,0.0,accept,unanimous_agreement
236140230,9541,i would not combine different types in one header (unless they are very likely used adjacently).,0,0,0,0.9785119891166688,0.9497314095497132,0.9770544171333312,0.0,accept,unanimous_agreement
236944891,9541,i'll move the enum class to its own header file.,0,0,0,0.986767828464508,0.9860708117485046,0.993776798248291,0.0,accept,unanimous_agreement
238055014,9541,move is complete,0,0,0,0.980463683605194,0.972277820110321,0.9744929671287536,0.0,accept,unanimous_agreement
238055839,9541,please replace it with `#pragma once`,0,0,0,0.986010193824768,0.993895947933197,0.99483323097229,0.0,accept,unanimous_agreement
238055896,9541,conflict,0,0,-1,0.6017837524414062,0.7812255620956421,0.7617217898368835,0.0,accept,majority_agreement
238151687,9541,i think this should be in filepriority.cpp.,0,0,0,0.9874372482299804,0.9894104599952698,0.9905551075935364,0.0,accept,unanimous_agreement
239316261,9541,"agreed it should move to filepriority. but surely it can live inside the header file, no?",0,0,0,0.9823645949363708,0.9777592420578004,0.9928336143493652,0.0,accept,unanimous_agreement
239384295,9541,"the function will be inlined if placed in header, but it is only used in 1 place so ok.",0,0,0,0.9885293841362,0.9890947937965392,0.9830635190010072,0.0,accept,unanimous_agreement
239393469,9541,coding guidelines: this may change.,0,0,0,0.9745334982872008,0.9695754647254944,0.9835858345031738,0.0,accept,unanimous_agreement
239704356,9541,"i'm having some trouble with this. i've created a `filepriority.cpp` with the following contents, and included it in `base.pri` and the appropriate `cmakelists.txt` [code block] but i get this compiler error:",-1,0,-1,0.9640624523162842,0.85934978723526,0.8650841116905212,-1.0,accept,majority_agreement
239708260,9541,"1. you should declare it in ""filepriority.h"" and then define in ""filepriority.cpp"" 2. you have not use `static` with it. `static` declares functions with **internal linkage** (i.e. it can be referred to from all scopes in the *current translation unit* only). actually anonymous namespaces are used for the same purposes currently. but you do want to use it outside of ""filepriority.cpp""! so you don't need it to be internally linked.",0,0,0,0.979334831237793,0.9932792782783508,0.9892278909683228,0.0,accept,unanimous_agreement
239979119,9541,removing the `static` keyword fixed it,0,0,0,0.9888486862182616,0.9944518208503724,0.9938130378723145,0.0,accept,unanimous_agreement
239993001,9541,"oh, that `const` again... please hide your paranoia from others.",-1,-1,-1,0.7627809047698975,0.6062555909156799,0.9623669385910034,-1.0,accept,unanimous_agreement
240027178,9541,please remove the `const` here (header file) and we can merge.,0,0,0,0.987592875957489,0.99389910697937,0.995715320110321,0.0,accept,unanimous_agreement
240043813,9541,why just the header file? possibly some c++ specifics i don't know.,0,0,0,0.963199019432068,0.9008032083511353,0.9779216647148132,0.0,accept,unanimous_agreement
240043939,9541,how is this example any different than [a link]? the recommendations on passing by const value seem to be inconsistent. i only made this const because of that conversation.,0,0,0,0.838049054145813,0.8606356382369995,0.9270716905593872,0.0,accept,unanimous_agreement
240044289,9541,"this has been mentioned many times (including in conversations with you). it may make sense in function definition, but it is completely meaningless in the function declaration (moreover, it is misleading there).",0,0,0,0.9398243427276612,0.9488054513931274,0.7586399912834167,0.0,accept,unanimous_agreement
240083976,9541,"the usual advantages of using `const`. because it is a local variable, `const` or not is not relevant to the users of the the function, so we leave it out.",0,0,0,0.9869895577430724,0.9945812821388244,0.9893938899040222,0.0,accept,unanimous_agreement
240469383,9541,thanks for the explainer. i've pushed the change.,1,1,1,0.740548849105835,0.88824462890625,0.8278314471244812,1.0,accept,unanimous_agreement
1133281696,18645,"iirc, you're only compressing backups, right? then i would call it ""compressbackups"". and `m_storefileloggercompressbackups` accordingly.",0,0,0,0.9874520897865297,0.9917086958885192,0.9937938451766968,0.0,accept,unanimous_agreement
1133283535,18645,wrong coding style. use `app` instead.,-1,0,-1,0.8933941125869751,0.8554438352584839,0.6241879463195801,-1.0,accept,majority_agreement
1133284163,18645,why did you change it to use generic integer? i don't see enough reasons for that.,0,0,0,0.5882190465927124,0.8780254125595093,0.9764869809150696,0.0,accept,unanimous_agreement
1133399952,18645,"because the `filelogagetype` is only used in `deleteold` in fact and the underlying type `int` is used elsewhere. if you think this modification is unnecessary, i'll revert it.",0,0,0,0.9703320860862732,0.9937261939048768,0.9949321150779724,0.0,accept,unanimous_agreement
1133400039,18645,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
1135451337,18645,"yes, please. filelogagetype is essentially not generic integer but enumerable type. so it's preferred to be implemented accordingly.",0,0,0,0.98686021566391,0.9844879508018494,0.96384596824646,0.0,accept,unanimous_agreement
1137560220,18645,filelogagetype,0,0,0,0.9878466725349426,0.9473822116851808,0.9862040281295776,0.0,accept,unanimous_agreement
1137563063,18645,`const` is meaningless/confusing in declarations,-1,0,0,0.7106773257255554,0.6627342700958252,0.8731534481048584,0.0,accept,majority_agreement
1137570275,18645,it would be more efficient to add such guards in appropriate filelogger setters instead. settingvalue lookups value by string key among all the settings each time you access it.,0,0,0,0.986809015274048,0.9925454258918762,0.9915708303451538,0.0,accept,unanimous_agreement
1138350505,18645,or use `cachesettingvalue` instead?,0,0,0,0.9875051975250244,0.9947468638420104,0.9951972365379332,0.0,accept,unanimous_agreement
1138567907,18645,it is mostly intended for those settings that are read multiple times during regular runtime (i.e. when they aren't changed).,0,0,0,0.9865739941596984,0.9928521513938904,0.990497887134552,0.0,accept,unanimous_agreement
1140441434,18645,do you mean something like this? [code block],0,0,0,0.984432578086853,0.99257892370224,0.9949532151222228,0.0,accept,unanimous_agreement
1140613336,18645,"no, of course! 1. just keep corresponding setters of application as they were before (i.e. without any guards against setting values) 2. don't add any guards in those filelogger setters where you just assign value to variable but only if changing value immediately causes some more or less expensive logic to be executed.",0,0,0,0.9443983435630798,0.983900785446167,0.9196129441261292,0.0,accept,unanimous_agreement
1141372353,18645,reverted.,0,0,0,0.8778582215309143,0.9610875844955444,0.9197385907173156,0.0,accept,unanimous_agreement
1189845900,18645,you should avoid putting translations in object if there is essentially real context exist: [code block] it should be applied in all the similar cases below.,0,0,0,0.982750415802002,0.9942534565925598,0.9936874508857728,0.0,accept,unanimous_agreement
1189848987,18645,the function name must have a verb form (in the vast majority of cases). just `compressbackupfile()` or similar.,0,0,0,0.988009750843048,0.9941678047180176,0.9926559925079346,0.0,accept,unanimous_agreement
1229190899,18645,also i found `before` and `after` confusing. it's better to use something like `sourcepath` and `destpath`.,0,0,0,0.985734224319458,0.956937849521637,0.9774286150932312,0.0,accept,unanimous_agreement
1239944087,18645,please use `utils::io::savetofile`.,0,0,0,0.9843260645866394,0.9928763508796692,0.9955552220344543,0.0,accept,unanimous_agreement
1239945206,18645,please use `utils::io::readfile`.,0,0,0,0.9864081144332886,0.991985321044922,0.9952621459960938,0.0,accept,unanimous_agreement
1239953053,18645,"just pointing out. not sure what is the possible upper size limit of the log file, if the size is big (a few hundreds mb i guess) you are definitively going to see memory allocation failure reports coming in.",0,0,0,0.8940107226371765,0.6571395397186279,0.9382086396217346,0.0,accept,unanimous_agreement
1239961096,18645,also just pointing out (and wasn't looking closely at code). compression operation is slow so it is very preferable use its own thread.,0,0,0,0.9785471558570862,0.8876517415046692,0.9821653962135316,0.0,accept,unanimous_agreement
1239969143,18645,i added a function to compress files by qdatastream. what do you think about this? [a link],0,0,0,0.98482483625412,0.9640053510665894,0.9602425694465636,0.0,accept,unanimous_agreement
1239999612,18645,"streaming should be better. although i'm not sure `qdatastream` is suitable here, afaik it is not a pure streaming interface and it will inject its own data/serialization to the stream. also don't have time to comment on the code details.",0,0,0,0.9483673572540284,0.942733883857727,0.965543806552887,0.0,accept,unanimous_agreement
1240179083,18645,used `readrawdata()/writerawdata()` methods are intended for [a link].,0,0,0,0.9889645576477052,0.9914549589157104,0.9958095550537108,0.0,accept,unanimous_agreement
1240212910,18645,could you provide `decompress()` counterpart too? i would like to test them.,0,0,0,0.9785364270210266,0.9882931113243104,0.99518483877182,0.0,accept,unanimous_agreement
1240224181,18645,"also i perceive `qdatastream` as some kind of auxiliary tool, and i would prefer to see `qiodevice` in the interface of `compress()`/`decompress()` methods.",0,0,0,0.9833489656448364,0.9889019727706908,0.9920536279678344,0.0,accept,unanimous_agreement
1240653767,18645,superseded by stream read.,0,0,0,0.9668036103248596,0.9927627444267272,0.9930156469345092,0.0,accept,unanimous_agreement
1240658425,18645,the advantage of `qdatastream` is that it also be used to read from a byte array.,0,0,0,0.9865060448646544,0.9929064512252808,0.9912643432617188,0.0,accept,unanimous_agreement
1240660215,18645,there is `qbuffer` adaptor class to use `qbytearray` as `qiodevice`.,0,0,0,0.988438069820404,0.9939870834350586,0.994967520236969,0.0,accept,unanimous_agreement
1240660348,18645,added.,0,0,0,0.9763525128364564,0.9822506308555604,0.9917559623718262,0.0,accept,unanimous_agreement
1240842973,18645,"fyi, boost::iostream provides interface for gzip compression/decompression. it seems to be a good idea to utilize it (directly at where you need it) instead of creating our own generic streaming interface in utils/gzip.cpp [a link] [a link]",0,0,0,0.7449842095375061,0.943525493144989,0.5566463470458984,0.0,accept,unanimous_agreement
1240884903,18645,"this will introduce an additional dependency on boost-iostream. i think this issue can be discussed later. if necessary, we can implement `utils/gzip.cpp` with boost::iostream directly.",0,0,0,0.9879431128501892,0.99430650472641,0.992256999015808,0.0,accept,unanimous_agreement
1240898184,18645,"qbt already have dependency on boost. anyway, don't forget to modify/add test cases to [a link].",0,0,0,0.98818176984787,0.9867037534713744,0.9939206838607788,0.0,accept,unanimous_agreement
1240899421,18645,:+1:,0,0,0,0.7570654153823853,0.9166757464408876,0.9328674077987672,0.0,accept,unanimous_agreement
1240899773,18645,aren't the tests that already exist enough? they will use the new implementation indirectly anyway.,0,0,0,0.9818804264068604,0.9902499318122864,0.9792180061340332,0.0,accept,unanimous_agreement
1241037363,18645,"in fact, qbt only depends on boost's headless libraries. if boost::iostream is used, `with-iostreams` should be set when compiling boost. :thumbs_up:",0,0,1,0.8081942796707153,0.993371605873108,0.98241925239563,0.0,accept,majority_agreement
1241037390,18645,another concern. it seems windows 10 doesn't natively support opening .gz files with gui and at least 3rd-party app is required. so i would suggest you compress it to .zip files instead. note that windows 10 do support .gz files via native command line `tar` but i won't expect novice users to use it.,0,0,0,0.8487419486045837,0.974489152431488,0.9644650220870972,0.0,accept,unanimous_agreement
1241037620,18645,"when testing (at least to public helper functions), you should treat the functions as black box and shouldn't assume its implementation. this pr introduce new public function so i expect test cases for it.",0,0,0,0.9842570424079896,0.9886444807052612,0.9873579740524292,0.0,accept,unanimous_agreement
1241042799,18645,i thought boost.iostreams was header-only and it isn't the case. so forget that idea. [a link],-1,0,0,0.5875887274742126,0.9149661064147948,0.9573328495025636,0.0,accept,majority_agreement
1241095230,18645,"another dependency? in any case, i would not consider this idea as a requirement. in other words, `windows 10 doesn't natively support opening .gz files with gui and at least 3rd-party app is required` does not seem to me a sufficient reason to reject this feature in its current form. adding support for `zip` archives is a separate issue (while `gzip` is already supported).",0,0,0,0.961363971233368,0.9815605878829956,0.9800789952278136,0.0,accept,unanimous_agreement
1241144464,18645,"imo it is bad user experience. some novice user enabled compress log option (gui doesn't give any information about the format) and now cannot deal with it without googling or installing other tools. anyway i've already raised my concern. also since this option is off by default, i don't mind to turn a blind eye about it. yet i would still hope to see that the gui will inform the user about the format. offtopic: in linux world, there exist this tool: [a link] and it is prevalent. it seems to me that this pr does share part of the functionality with it (assuming logrotate can work with qbt logs) which more or less made me think that the point is moot for linux users.",-1,-1,-1,0.9869491457939148,0.9821735620498656,0.9803844094276428,-1.0,accept,unanimous_agreement
1241146644,18645,"imo, ""bad user experience"" is not the feature itself, but only ""gui doesn't give any information about the format"". so... :+1:",-1,-1,-1,0.9844851493835448,0.993459165096283,0.9907875657081604,-1.0,accept,unanimous_agreement
1241147258,18645,"well, this means that linux users may (possibly) have an alternative to this built-in functionality of qbittorrent.",0,0,0,0.986764430999756,0.9935094714164734,0.9918270111083984,0.0,accept,unanimous_agreement
1241179516,18645,"if using logrotate, the location of the log file should be specified manually. this is inconvenient for portable mode. besides, docker images may not provide logrotate. for qbittorrent-nox, if the location of the configuration file changes, the configuration of logrotate needs to be changed accordingly. if using [a link], the zip format support seems to be much more complicated than gzip. perhaps it should be considered in another pr.",0,0,0,0.9626029133796692,0.9600501656532288,0.9465330839157104,0.0,accept,unanimous_agreement
1241209802,18645,add a tooltip. [a link],0,0,0,0.986910045146942,0.9850333333015442,0.9954426288604736,0.0,accept,unanimous_agreement
1241211999,18645,"after reading such a statement, someone might think that the feature is not supported (not available) on windows without 3rd-party tools.",0,0,0,0.9664612412452698,0.9734386801719666,0.9766955971717834,0.0,accept,unanimous_agreement
1243117467,18645,"please move it to its own function (`testcompressqiodevice`). usually there is one-to-one mapping of private function in test class and the tested function. also you should thoroughly test it, for example: * `utils::gzip::compress(qiodevice(), buf);` * `utils::gzip::compress(buf, qiodevice());` * `utils::gzip::compress(qiodevice(), qiodevice());` to make promise that your function will handle invalid inputs gracefully without behaving bad. the same applies to `decompress` too.",0,0,0,0.9810830354690552,0.994047999382019,0.9916433095932008,0.0,accept,unanimous_agreement
1243125742,18645,"it seems that you are too biased about this. we are not writing a public library of utilities. maybe it would be worth limiting the requirements? even in public interfaces, the responsibility for the correctness of parameters is often left to the caller, so as not to bring matters to the point of absurdity, when a function devotes 90% of logic to checking parameters instead of useful work.",-1,-1,-1,0.8660426139831543,0.7553274631500244,0.610150933265686,-1.0,accept,unanimous_agreement
1243133298,18645,"have you ever thought thoroughly of writing tests and their meanings? or can you stop your bad habit of accusing? in fact, i consider the suggested tests to be crucial, others i may not care. as you can see from qt docs, the underlying device won't be available all the time and therefore the function is expected to handle it correctly. at the very least, the function should not crash and these tests ***will*** ensure it. i've seen too many instances of the developer being too much of himself and imagine his code is bulletproof and won't crash.",-1,0,0,0.7294813990592957,0.7700055241584778,0.6779606938362122,0.0,accept,majority_agreement
1243143826,18645,here is a counter example for you: [a link] note that the tests didn't cover it...,0,0,0,0.980883538722992,0.9848254323005676,0.9912585616111756,0.0,accept,unanimous_agreement
1243164539,18645,"i'm not accusing anyone, and even more so i don't have such a habit. sure. they need to make sure that the function (still) works as expected. but isn't it obvious that you first need to decide on what is ""works as expected"" in each specific case? that's what i was talking about. in this case, we could make an explicit separation of the input parameters into valid and invalid, and assign responsibility for this to the caller, and expect the function to work correctly only with valid parameters (so tests will follow only this expectation).",0,0,0,0.4979687333106994,0.753048300743103,0.5062635540962219,0.0,accept,unanimous_agreement
1243321499,18645,"it's just an example for me, not a ""counter example"". if `ok` parameter is purposely allowed to be ""omitted"" (i.e. `nullptr`), then it is expected that function correctly works in both cases, either with `ok` exised or not. so this aspect should be tested. see. but after all, it is not covered by tests of the existing function `utils::gzip::compress (qbytearray, qbytearray, bool*)`, isn't it? so it became possible to make changes to the implementation containing such a bug, and this was missed by the tests. but i definitely wouldn't expect passing null, uninitialized, not opened or opened in wrong mode `qiodevice` to be a valid use case. it can only exist if there is a logical error in the code. so it would be nice to first decide how to prevent such incorrect use, and only then do the tests. judging by your statements, you propose to handle all errors (including logical ones) in the same way and approve this as expected behavior by the presence of appropriate tests. (at least it looks that way to me. if i'm wrong, just correct me.) imo, it may make it harder to detect such logical errors if they appear in the future. therefore, i would simply add assertions to all the preconditions, and i would cover by tests only the correctness of the main work of the function, provided that the parameters are acceptable.",0,0,0,0.9735878109931946,0.9888211488723756,0.9855616688728333,0.0,accept,unanimous_agreement
1243398398,18645,"if ok parameter is purposely allowed to be ""omitted"" (i.e. nullptr), then it is expected that function correctly works in both cases, either with ok exised or not. so this aspect should be tested. to be clear, i was using the example to make a point that the interface should really be tested properly and it isn't ""bring matters to the point of absurdity, when a function devotes 90% of logic to checking parameters instead of useful work."" as you [a link]. even if such thing exists it probably means that interface is really important and needs to be tested. why make this assumption? under this (imo inappropriate) assumption you won't catch errors that could happen in the real world. for example the device is valid for some time but just closed before calling into the tested function. or it can even be closed when executing the function. i was thinking of using `std::expected` to report the errors when i wrote the reply. the concern of ""harder to detect logical errors"" is valid. but using assert makes it untestable (and remember no test means no guarantee that the code segment will be correct, you are relying on mere self confidence which doesn't mean much). throwing `std::logic_error` might be better since you can verify it with `qverify_throws_exception` and `qverify_throws_no_exception`. or perhaps `std::expected` can be utilized instead. i think you are only half correct about valid and invalid cases. the invalid cases are still important since you want the tested function to have a ""defined"" behavior when facing it. if invalid cases are not tested then you are basically saying the behavior is ""undefined"" which is no so great imo. therefore whenever possible, i would like to test it all even if ""defined"" behavior is crash, assertion or exception thrown, at least it is expected.",0,0,0,0.9299032688140868,0.953557014465332,0.8947590589523315,0.0,accept,unanimous_agreement
1243698597,18645,"in order to simplify the code. and this is a widely used approach used everywhere (do you really not understand what i'm talking about?). the only question is whether it is acceptable in this particular case or not. that is, what in this case is cheaper, more reliable, etc. - to do the processing of all the possible invalid parameters inside a function, or to respect some contract about acceptable parameters at the point of calling this function? i'm not sure exactly what this case is, so i keep debating about it.",0,0,0,0.6918264031410217,0.93515145778656,0.5624646544456482,0.0,accept,unanimous_agreement
1243711598,18645,"no, i'm talking specifically about the case when the function declaratively has ""undefined"" behavior in the case of invalid parameters. so (i repeat again) the question is whether this approach is acceptable in this particular case or not.",0,0,0,0.9593480229377748,0.9713020324707032,0.9824762344360352,0.0,accept,unanimous_agreement
1243722694,18645,at least i would strongly disapprove to combine both of them as error handling of the same function.,0,-1,-1,0.7498466968536377,0.7848547697067261,0.7023580074310303,-1.0,accept,majority_agreement
1243752392,18645,"that's exactly what i thought. but it doesn't really matter which method of error handling is chosen. i feel it questionable to handle logical errors in the same way as normal runtime errors. still, an error report like ""writing to the file failed because the file has read-only attribute"" makes sense for the user, but ""nullptr is an invalid value for some parameter"" - for the developer. although, i may be mistaken, and this is quite normal.",0,0,0,0.6054579615592957,0.5115437507629395,0.8274940848350525,0.0,accept,unanimous_agreement
1243789693,18645,"`qiodevice is abstract and cannot be instantiated, but it is common to use the interface it defines to provide device-independent i/o features.` which derived class do you want to test? i don't think they will make much difference...",0,0,0,0.9535775184631348,0.8360113501548767,0.9783437848091124,0.0,accept,unanimous_agreement
1243834587,18645,there should be no ambiguity now. [a link],0,0,0,0.9835360050201416,0.9226565361022948,0.9923906922340392,0.0,accept,unanimous_agreement
1243859274,18645,"tooltip looks good for me now. but i would change `compress log files with gzip when backing up` with `compress backup logs with gzip` to be consistent with other options about backups. btw, i think it's better to use `log backups` instead of `backup logs`.",1,1,1,0.8297523856163025,0.8869838714599609,0.501205563545227,1.0,accept,unanimous_agreement
1243939786,18645,:ok_hand:,0,0,0,0.976718246936798,0.8591973185539246,0.7940129041671753,0.0,accept,unanimous_agreement
1244601398,18645,"anyway, i add tests for invalid inputs. in fact, if the i/o device is invalid or can't be read or written to, the function will fail at these lines. [a link] [a link]",0,0,0,0.9743967652320862,0.9672408103942872,0.9930860996246338,0.0,accept,unanimous_agreement
1245587012,18645,i would like to ask to not update this function (`qbytearray compress(const qbytearray &...)`) internals as i have plans to minimize the buffer copy operations. this function is in hot path for webapi responses so it would make sense to optimize it imo.,0,0,0,0.9880284070968628,0.9756003618240356,0.9910229444503784,0.0,accept,unanimous_agreement
1245595593,18645,please preserve this comment.,0,0,0,0.9664632081985474,0.9861315488815308,0.9935277104377748,0.0,accept,unanimous_agreement
1245639428,18645,"imo if the function is local (reside in .cpp anonymous namespace or private function in some class) then it can be tailored, invalid parameters can be ignored or some preconditions/assertions can be made. however in our case here, the function is a bit more ""global"" so i would raise my expectation bar a bit higher. the (important) parameters should be properly checked and tested, since you cannot limit (or really know) which context it will reside. i don't understand. why not try ""define"" it instead of leaving it ""undefined""? btw depending on the context, intentionally leaving behavior undefined *might* lead to a software vulnerability... agree. perhaps the errors that are interesting for the users can be made into error status/messages, and other errors that are only interesting for the developers could be made as assertions (or exceptions)? in our case `qiodevice`, since a stable condition is not guaranteed (such as a unstable network drive). the function utilizing `qiodevice` should report the error to its caller (or user) when it happens imo. i would suggest to leave this ""error reporting"" work for another time as to avoid bogging down this pr.",0,0,0,0.965261697769165,0.5400292277336121,0.9098888039588928,0.0,accept,unanimous_agreement
1246187933,18645,please read line 46. [code block],0,0,0,0.9870348572731018,0.986799955368042,0.9945515990257264,0.0,accept,unanimous_agreement
1246214299,18645,fixed. thank you.,1,1,1,0.8864260911941528,0.9824450612068176,0.9910380840301514,1.0,accept,unanimous_agreement
1246245844,18645,reverted.,0,0,0,0.8778582215309143,0.9610875844955444,0.9197385907173156,0.0,accept,unanimous_agreement
1246246627,18645,added.,0,0,0,0.9763525128364564,0.9822506308555604,0.9917559623718262,0.0,accept,unanimous_agreement
1247537734,18645,the `const` will not be in .h but in .cpp only. [code block],0,0,0,0.9888209104537964,0.9948577880859376,0.9954577684402466,0.0,accept,unanimous_agreement
412644687,12574,i doubt maintainers are a fan of more things to maintain with versioning. why not: `- [a link]`,-1,0,0,0.8506834506988525,0.7833648920059204,0.9596582651138306,0.0,accept,majority_agreement
412645374,12574,"skipping contractions is probably better for the minimally english speaking crowd. regardless, your contraction usage is inconsistent, line 26 doesn't use contractions while the rest of your cases do.",0,0,0,0.963892936706543,0.951288878917694,0.9656227231025696,0.0,accept,unanimous_agreement
412645985,12574,should the location of the settings file be mentioned if we're requiring it now?,0,0,0,0.9873833060264589,0.994869589805603,0.9927391409873962,0.0,accept,unanimous_agreement
412861012,12574,"thanks, fixed",1,1,1,0.80034339427948,0.8649866580963135,0.7960073947906494,1.0,accept,unanimous_agreement
412861176,12574,"thanks, fixed.",1,1,1,0.6975147128105164,0.8492836356163025,0.8536084890365601,1.0,accept,unanimous_agreement
412861707,12574,"that information is already present in the wiki faq, which we assume the user has read before posting.",0,0,0,0.9874969720840454,0.9883577227592468,0.9940034747123718,0.0,accept,unanimous_agreement
413982559,12574,": fyi, not everyone on windows will be using the official builds. prior to the addition of official 64-bit builds, i was relying on the (now outdated) [ ] repository for my windows builds. so perhaps... ...would work better?",-1,-1,0,0.8577252626419067,0.6238743662834167,0.9612529277801514,-1.0,accept,majority_agreement
413986257,12574,"i would remove ""if on linux"" at all. i never remember what versions are used by official windows/macos builds.",0,0,0,0.7684267163276672,0.9684315323829652,0.990189015865326,0.0,accept,unanimous_agreement
413986966,12574,"there is an ongoing effort to make ""official"" nightly releases more easily available already: [a link] but it will still take a little while. when the time comes, we can make that adjustment in a separate pr. thanks for the reminder though.",1,0,1,0.8820847868919373,0.5776329040527344,0.9293414950370787,1.0,accept,majority_agreement
589716754,12574,"has there ever been an issue that was verified to be caused by a specific os version? unless you mean win 7 8 10 in which case ""version"" is redundant because it's always mentioned. i would change that to something that would make the reporter mention it if it's anything not standard. i wouldn't want to read in 95% of issues ""installed from the official site"".",0,0,0,0.9796661734580994,0.9011974334716796,0.9782702922821044,0.0,accept,unanimous_agreement
589719239,12574,"i would swap positions with ""what is the expected behavior"" (right above)",0,0,0,0.9830957055091858,0.9907089471817015,0.99234539270401,0.0,accept,unanimous_agreement
589719404,12574,maybe add [a link],0,0,0,0.98335200548172,0.9897123575210572,0.994706094264984,0.0,accept,unanimous_agreement
589720856,12574,i don't think that's desirable. not all prs close something.,0,-1,0,0.544349730014801,0.8565824031829834,0.8567021489143372,0.0,accept,majority_agreement
589931293,12574,wrong site,-1,-1,-1,0.7905672788619995,0.6274731159210205,0.6180506348609924,-1.0,accept,unanimous_agreement
597653718,12574,maybe not 100% by us directly **but** builds 1903/1909 are notorious for high cpu usage & high dpc latency issues. also there's been issues with vpn's up to build 1909. **version** - would possibly be insignificant if minimum os build is raised.....(qt6 etc.),0,0,0,0.8450665473937988,0.8771057724952698,0.7842079997062683,0.0,accept,unanimous_agreement
603598058,12574,"i very much wonder that many, even if they _will_ look through thousands of issues, would be able to come across a similar one. in my opinion here should also/only be enclosed link of [a link].",-1,-1,-1,0.8907523155212402,0.9220876097679138,0.6961883306503296,-1.0,accept,unanimous_agreement
639118058,12574,solved.,0,0,0,0.9782442450523376,0.9815964102745056,0.9867442846298218,0.0,accept,unanimous_agreement
639118135,12574,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
639118244,12574,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
639118376,12574,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
639118469,12574,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
639118609,12574,resolved.,0,0,0,0.9765522480010986,0.9865591526031494,0.9832034111022948,0.0,accept,unanimous_agreement
639146305,12574,"why does this need verification? ""mandatory"" is already written in the corresponding section.",0,0,0,0.983038067817688,0.9944270849227904,0.9888140559196472,0.0,accept,unanimous_agreement
639146992,12574,is it necessary to split them in 2 lines? i would just leave them as (type here). same above for version and os.,0,0,0,0.989043354988098,0.9944643378257751,0.9952883720397948,0.0,accept,unanimous_agreement
639147032,12574,link them to [a link],0,0,0,0.987891435623169,0.985176682472229,0.9957473874092102,0.0,accept,unanimous_agreement
639147111,12574,is this necessary?,0,0,0,0.9814280271530152,0.9865994453430176,0.990889608860016,0.0,accept,unanimous_agreement
639323127,12574,"i've seen people forget either one or the other quite often, in both cases. this way it's fullproof. users usually also use 2 lines for this, so there is really no difference in already having it right there.",0,0,0,0.934028387069702,0.9493333101272584,0.9580492973327636,0.0,accept,unanimous_agreement
639324397,12574,"indeed, probably not. addressed by noting in the comments that the user is expected to fill out all `(type here)` fields.",0,0,0,0.9868013858795166,0.9931944608688354,0.9874070286750792,0.0,accept,unanimous_agreement
639324472,12574,"thanks, fixed (in the corresponding checkbox, because stuff like this probably should not be part of a subsection title).",1,1,1,0.605318009853363,0.6920340061187744,0.9559609293937684,1.0,accept,unanimous_agreement
639325060,12574,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
639335596,12574,"rather excessive, no? what about simply `e.g.: [x]` to 25th line?",0,0,0,0.8227207660675049,0.8550286889076233,0.9514150023460388,0.0,accept,unanimous_agreement
639336996,12574,[code block] so it might be easier for user to distinguish this section as more important.,0,0,0,0.985094666481018,0.9913710355758668,0.99228036403656,0.0,accept,unanimous_agreement
639337431,12574,here too.,0,0,0,0.9753128290176392,0.989098072052002,0.969845414161682,0.0,accept,unanimous_agreement
639705574,12574,"thanks, fixed.",1,1,1,0.6975147128105164,0.8492836356163025,0.8536084890365601,1.0,accept,unanimous_agreement
639705682,12574,"thanks, fixed.",1,1,1,0.6975147128105164,0.8492836356163025,0.8536084890365601,1.0,accept,unanimous_agreement
639705765,12574,"thanks, fixed.",1,1,1,0.6975147128105164,0.8492836356163025,0.8536084890365601,1.0,accept,unanimous_agreement
686397553,12574,"after reading a few issues, these ""qbittorrent version:"" and ""operating system(s) where the issue occurs:"" are disrupting the flow of reading. i can't easily filter them to get to the juicy part and furthermore i think they are unnecessary. a simple ""(type here)"" is sufficient imo. same goes for the section below.",0,0,0,0.8882412314414978,0.8286063075065613,0.6574758291244507,0.0,accept,unanimous_agreement
1427713914,20118,we do not use `get` prefix (with rare exceptions) [code block],0,0,0,0.98613041639328,0.9923368096351624,0.9942147135734558,0.0,accept,unanimous_agreement
1427719814,20118,"how about changing ""detecting"" to ""n/a""? not all users have such large monitors as you, and among those who do, not all have the desire to stretch the qbittorrent window to the full screen and shake their heads left and right to view it.",0,0,0,0.9426003694534302,0.8075292110443115,0.9747145771980286,0.0,accept,unanimous_agreement
1427763930,20118,"of course, the ip address will still be longer. but in any case, all we can say about this is that the information about external address is currently ""not available"". imo, ""detecting"" looks speculative.",0,0,0,0.886229395866394,0.7757154703140259,0.9371598958969116,0.0,accept,unanimous_agreement
1428221443,20118,"i saw some other 'get' naming conventions used throughout the project (and non-'get'). some modern apis i've come across have begun to use 'get', so i figured i'd go with what is more recently used. your choice.",0,0,0,0.9691357016563416,0.9789612293243408,0.9820014834403992,0.0,accept,unanimous_agreement
1428226725,20118,"i don't know how that would differentiate between ""not available...*yet*"" and other states such as failed, but i do agree about 'detecting' sounding speculative. perhaps more information should be communicated to the frontend from the means that qbittorrent uses to detect. ""detecting/detection failed"" etc? as for how much space is used...at this rate it's looking like you want just external addresses printed and nothing else which, quite frankly, leaves me baffled as to what the information would be.",0,-1,-1,0.7052736282348633,0.8492366075515747,0.8552640080451965,-1.0,accept,majority_agreement
1428228292,20118,"ah yeah, forgot about that. when the naming for that get function is settled i'll address as a single commit.",0,0,0,0.9482532739639282,0.8775009512901306,0.9484553933143616,0.0,accept,unanimous_agreement
1428230999,20118,"i forgot to format, my bad. when the naming for that get function is settled i'll address this one into a single commit as well.",-1,-1,-1,0.9889224767684937,0.9706320762634276,0.9887506365776062,-1.0,accept,unanimous_agreement
1428695550,20118,doesn't look like you need to remove the `const`: [code block],0,0,0,0.9775960445404052,0.9382330179214478,0.993020236492157,0.0,accept,unanimous_agreement
1428696478,20118,"wrong order, keys are sorted alphabetically here.",0,0,0,0.910143494606018,0.8316438794136047,0.6447302103042603,0.0,accept,unanimous_agreement
1428697494,20118,copy paste error?,0,0,0,0.8918169736862183,0.9681540727615356,0.9150588512420654,0.0,accept,unanimous_agreement
1428698907,20118,"although unlikely, i would still suggest using other character for replacement specifier. maybe `$1`, `$2` see: [a link]",0,0,0,0.9848456382751464,0.9942877888679504,0.9874747395515442,0.0,accept,unanimous_agreement
1428701136,20118,... i didn't see anything that required it.,-1,-1,0,0.6696045994758606,0.6219630837440491,0.9416803121566772,-1.0,accept,majority_agreement
1428701455,20118,i thought i added that back with the latest commit.,0,0,0,0.9837438464164734,0.9852572083473206,0.993374764919281,0.0,accept,unanimous_agreement
1428702188,20118,i followed the previous conventions used by qbittorrent for other variables used similarly.,0,0,0,0.9881390929222108,0.9880911111831664,0.991205394268036,0.0,accept,unanimous_agreement
1428703171,20118,"yeah. -_-; too tired to address right now, will do later.",-1,-1,-1,0.9597345590591432,0.9916753768920898,0.9950563907623292,-1.0,accept,unanimous_agreement
1428703991,20118,"i didn't think any device was allowed to start with a number, so i didn't think there any chance of running into %[0-9] with %[0-9] being some interface. i could be wrong but i thought no device could start with [0-9].",0,0,0,0.785853922367096,0.8463816046714783,0.9852478504180908,0.0,accept,unanimous_agreement
1428708433,20118,"unfortunately, according to the linked article, windows will use %[0-9] format:",-1,0,-1,0.5731410384178162,0.8778972029685974,0.8884082436561584,-1.0,accept,majority_agreement
1428870495,20118,"for the webui, i believe it should work to do this in reverse-order. ex: `$('externaladdresses').set('html', last_external_addresses.replace(""%2"", last_external_address_v6).replace(""%1"", last_external_address_v4));` similarly i think the gui should do the same (reverse order) and always specifically replace *the first* occurrence only. edit: i'm away from rig for the day.",0,0,0,0.9065796732902528,0.9215903282165528,0.9850913882255554,0.0,accept,unanimous_agreement
1428877516,20118,"then again, some people use torrent clients on closed networks (so local ip address(es)), so maybe it can make sense.",0,0,0,0.9787852168083192,0.9816327095031738,0.9864860773086548,0.0,accept,unanimous_agreement
1476477359,20118,"i forgot to ask, does qb supply those interfacings or does qb just supply the ip address? if it's ip address then we don't need to account for which interface (unless interface is added to ip addresses). my only test case for this info has been linux.",0,0,0,0.9750338196754456,0.9858049750328064,0.970494031906128,0.0,accept,unanimous_agreement
1477338690,20118,i can see the interface parts in qbt under windows.,0,0,0,0.9874497652053832,0.9915515184402466,0.9935652613639832,0.0,accept,unanimous_agreement
1477338997,20118,"so the remote server that replies with an external address somehow knows which interface? it's a text reply from a get 200. this is why i'm confused as to why. (the external address is fetched from a remote server, not your local interface...) edit: i'm possibly not clear enough. qbittorrent uses a remote server to determine your external ip address, it's a third-party api/request... this is not at all about getting the local ip address even if it is your external, this is about reporting ""what the world sees"" as your external address (which will probably be your local address if it's a vpn/vps/local installation with a public ip address).",-1,-1,0,0.8977481126785278,0.8123412728309631,0.575909435749054,-1.0,accept,majority_agreement
1477349663,20118,"this is why i said it is ""unlikely"" in my [a link]. surely using a different placeholder character that would avoid all potential problems isn't a bad idea or even difficult, no?",0,-1,0,0.6640651822090149,0.5362281203269958,0.975361704826355,0.0,accept,majority_agreement
1477350006,20118,"i saw that but i think you might be confused. i certainly am with the reasoning behind this. qb does not ask windows for anything at all. it literally makes a web request to a remote server (think ""what's my ip address"" in a search engine query) and returns the result. there's no way for the remote end to know what interface...it only sees the address. the data returned would never have an interface. and no, qt doesn't support another parsing character besides percent.",0,-1,0,0.7918590307235718,0.7316359877586365,0.7818503975868225,0.0,accept,majority_agreement
1477350726,20118,what qt? here we are talking about javascript.,0,0,0,0.981650710105896,0.9682249426841736,0.9907482266426086,0.0,accept,unanimous_agreement
1477352128,20118,"""qbt_tr"" ... the backend is qt and this part uses qt parsing, for localization and such. plus the code exists in qt as well for the non-nox users.",0,0,0,0.9881965517997742,0.9926388263702391,0.994191825389862,0.0,accept,unanimous_agreement
1477365569,20118,that 'special annotation' has nothing to do with `%` or `$` or any character used for replacement purpose. i'll just provide the code: [code block] see the `.replace()`? here is the documentation: [a link],0,0,0,0.9877867102622986,0.9922322034835817,0.9950827360153198,0.0,accept,unanimous_agreement
1477366368,20118,"i don't intend you to change that. gui, webui have their own set of translation strings and here i'm only talking about webui.",0,0,0,0.8210803866386414,0.6904783248901367,0.9534929394721984,0.0,accept,unanimous_agreement
1477367506,20118,"\*facepalm\* my mind kept telling me ""qbt_tr"" was qt's localization. i think i kept the string the same as qt's to reduce how many duplicate translations of text were needed, old habit from single-ui development. i think your solution would work, yes. i don't have any of the src anymore since i went ahead to write a violentmonkey that gave me everything i needed.",0,0,0,0.6911431550979614,0.5504608750343323,0.4996841847896576,0.0,accept,unanimous_agreement
1484230609,20118,`libtorrent` gets the external addresses from trackers and peers. this is clearly stated in the documentation (and i can confirm this based on an inspection of the `libtorrent` code).,0,0,0,0.989186942577362,0.9919396042823792,0.9933682084083556,0.0,accept,unanimous_agreement
1484337632,20118,"i must've been thinking about another client then. still, there isn't any way for a peer or tracker to know which interface the client is using, so the entire point seems moot.",0,0,0,0.7051131129264832,0.7373580932617188,0.892174482345581,0.0,accept,unanimous_agreement
1484376540,20118,"sorry, i don't know much about ipv6. what exactly are you talking about when you mention the interface? about the zone identifier, e.g. `%eth0`?",-1,-1,-1,0.9867515563964844,0.9843602776527404,0.9797716736793518,-1.0,accept,unanimous_agreement
1484402773,20118,"somewhere on this long thread someone mentioned something about not using `%` in qt api calls because the ipv6 address might have the zone identifier reported and it'd break it but they're assuming that qbittorrent includes that information...when it gets that address from a remote server (peer/tracker/site). the remote endpoint wouldn't have a clue about which interface qbittorrent is using and won't report that. edit: there was also suggestion around modifying the javascript implementation of that string, i can't remember what it was. i've got too much to do and qbittorrent isn't a high priority. the initial src offering was fine but there's no way to please everyone, so i've stuck to my violentmonkey script which does exactly what i want. edit: too long a thread, unable to search and follow it anymore hardly.",0,-1,0,0.8787447214126587,0.7604348659515381,0.9108517169952391,0.0,accept,majority_agreement
1485592645,20118,"iirc, zone id is ""locally significant"" (enables us to define out which interface we want to send some traffic) and there is no point to send it to remote host as part if its ""external address"". but we still can't be sure that it isn't sent in such a way (with zone id) so the question is how is it handled by libtorrent, i.e. can it provide we ""external address"" that mistakenly contains such zone id.",0,0,0,0.9808024168014526,0.9572958946228028,0.991945207118988,0.0,accept,unanimous_agreement
1485592930,20118,"someone familiar with libtorrent's api should weigh in. i resorted to a vm script, so i'm fine and qbittorrent can do with this pr as they want.",0,0,0,0.9344520568847656,0.8650059700012207,0.9743771553039552,0.0,accept,unanimous_agreement
141928986,7522,i hope this comment (and the ones below) could stay (here and in conf.pri.*). for me it's easier to track which defines belongs to whom.,0,0,0,0.8650038838386536,0.7404115796089172,0.8969261050224304,0.0,accept,unanimous_agreement
141930268,7522,not related to this pr: i find these comments (point this to ...) somewhat redundant. imo just one at the top saying `point to the include folder` and another below `point to the lib folder` is enough.,0,0,0,0.8985286951065063,0.6117138266563416,0.8862758278846741,0.0,accept,unanimous_agreement
141930847,7522,isn't it obvious that the definition like boost_* belongs to boost?,0,0,0,0.9766178131103516,0.99155992269516,0.9927278757095336,0.0,accept,unanimous_agreement
141931484,7522,"this and the next files encourage to install each library into its own directory. i have no idea what are the advantages of this method, but it is certainly more complicated than installing everything into a single directory. why should we ""advertise"" the complicated approach? what are the advantages?",0,0,0,0.8351292014122009,0.7874768972396851,0.5142418146133423,0.0,accept,unanimous_agreement
141931584,7522,"yes, i think either there is a comment for each lib or an empty line separating each lib (in conf.pri.*).",0,0,0,0.9882653951644896,0.9924631118774414,0.9900700449943542,0.0,accept,unanimous_agreement
141931798,7522,maybe we can again discuss dropping the xp support?,0,0,0,0.9795101284980774,0.9918209314346312,0.9862849712371826,0.0,accept,unanimous_agreement
141932074,7522,this was said already ten lines earlier.,0,0,0,0.9859967827796936,0.992077887058258,0.9856656193733216,0.0,accept,unanimous_agreement
141932221,7522,duplicates too.,0,0,0,0.9853556752204896,0.9323674440383912,0.9085003733634948,0.0,accept,unanimous_agreement
141932359,7522,doesn't boost use automatic linking on msvc?,0,0,0,0.9855589866638184,0.9921951293945312,0.9927735924720764,0.0,accept,unanimous_agreement
141932731,7522,this and a few lines below duplicate lines 35 -- 39,0,0,0,0.9842036962509156,0.9824405312538148,0.9918063879013062,0.0,accept,unanimous_agreement
141932994,7522,"for me, **iff** it doesn't trade off something & it's easy to support it, i won't bother.",0,0,-1,0.4562325775623321,0.513295590877533,0.88508141040802,0.0,accept,majority_agreement
141937594,7522,don't try to turn windows into unix :) on windows everything usually installs into separated directory.,1,1,1,0.9708823561668396,0.9901286959648132,0.9915063977241516,1.0,accept,unanimous_agreement
141937975,7522,oops... i'll remove duplicates.,-1,-1,-1,0.9770962595939636,0.9098073840141296,0.960877537727356,-1.0,accept,unanimous_agreement
141938200,7522,"as i recall, i had problems with it earlier.",0,0,0,0.6489085555076599,0.9405820965766908,0.9512329697608948,0.0,accept,unanimous_agreement
141938468,7522,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
141940337,7522,what is the purpose of `boost_system_static_link=1` above?,0,0,0,0.9880808591842652,0.9956167936325072,0.9932872653007508,0.0,accept,unanimous_agreement
141999290,7522,"iirc, currently build-time support mostly needed. so it's headache... although, as i recall, we still have some code associated with the xp support. in any case, i'm not against it as long as it does not impede the further development of the project.",-1,-1,0,0.9802380800247192,0.9687650203704834,0.5094611644744873,-1.0,accept,majority_agreement
141999321,7522,"i don't know exactly. it's something to do with static linking, so personally i don't use it in my configuration (because of dynamic linking there).",-1,0,0,0.5783742070198059,0.7975534200668335,0.9638953804969788,0.0,accept,majority_agreement
141999811,7522,i'll try it later.,0,0,0,0.969161570072174,0.9829809665679932,0.9727722406387328,0.0,accept,unanimous_agreement
142000414,7522,"well, for some reason `boost_all_no_lib` is used to prevent auto-linking. i've moved it to the user config example file so somebody can use auto-linking. btw, boost isn't support visual studio 2017 for now so it can't auto-link libraries build with this compiler version.",0,0,0,0.9785788655281068,0.9923754334449768,0.9896809458732604,0.0,accept,unanimous_agreement
142001958,7522,rc_0_16? are you sure?,0,0,0,0.9788402318954468,0.9907810091972352,0.992084801197052,0.0,accept,unanimous_agreement
142001965,7522,same here.,0,0,0,0.9813250303268432,0.9755119681358336,0.9916109442710876,0.0,accept,unanimous_agreement
142001978,7522,"please change the defaults because this pr will be merged in 3.4, which will b built with libtorrent 1.1 by default.",0,0,0,0.9879796504974364,0.9936800003051758,0.995306432247162,0.0,accept,unanimous_agreement
142002019,7522,"this controls dynamic linking. please, move it to the boost libs section and add a comment explaining that either explicit library names can be given together with `boost_all_no_lib` definition, or library names can be controlled via this definition.",0,0,0,0.9888990521430968,0.9941872358322144,0.99613356590271,0.0,accept,unanimous_agreement
142002033,7522,1.1 is the default for 3.4. please uncomment the next line and change the comment appropriately.,0,0,0,0.9860817193984984,0.9931820034980774,0.9945687055587769,0.0,accept,unanimous_agreement
142002062,7522,why does this template file list not all required boost librariees?,0,0,0,0.9757295846939088,0.9866928458213806,0.9892694354057312,0.0,accept,unanimous_agreement
142002290,7522,"i just moved this (yes, yes, outdated) code... of course, i can update it incidentally if you want.",0,0,0,0.9808484315872192,0.977146565914154,0.9700535535812378,0.0,accept,unanimous_agreement
142002307,7522,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
142002347,7522,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
142002668,7522,"what other libraries are required? afaik, boost.system is only directly required boost library. in my config i also have the line for boost.datetime (compilation fails without it). some other libraries (chrono, filesystem, random, thread) are also linked indirectly. i have not delved much, why is it...",0,0,0,0.7810996770858765,0.9105559587478638,0.7640566825866699,0.0,accept,unanimous_agreement
142002836,7522,i think we can omit this definition since it is default: [a link],0,0,0,0.9815754890441896,0.9797365069389344,0.9909638166427612,0.0,accept,unanimous_agreement
142007526,7522,"nitpick though, `libtorrent` in place of `rc_1_1` is more clear. also i would use `boost` in place of `boost_1_64_0`.",0,0,0,0.989417850971222,0.9923989176750184,0.989912211894989,0.0,accept,unanimous_agreement
142007559,7522,`-lc:/qbittorrent/rc_1_1/lib` ?,0,0,0,0.9877451062202454,0.9933041930198668,0.9945406317710876,0.0,accept,unanimous_agreement
142007590,7522,"the capitalized z bothers me... these are just some changes i would do, you can decide yourself.",-1,-1,-1,0.9369000792503356,0.960768699645996,0.9231392741203308,-1.0,accept,unanimous_agreement
142009871,7522,"when i have enabled this with libtorrent 1.1.4, qbt crashes during strat.",0,0,0,0.9763342142105104,0.942939043045044,0.8607860803604126,0.0,accept,unanimous_agreement
142011092,7522,"guys i have delved into this and see my patch and discussion here: [a link] short summary: if we're in c++11 mode only boost.system is needed. however, autotools/bjam doesn't reflect that. but if we ommit them during qbt linking it does work. ps: i assume libtorrent's cmake is also broken.",0,0,0,0.9678410291671752,0.9191861748695374,0.9588220715522766,0.0,accept,unanimous_agreement
142011160,7522,"if we install under same base dir we have: `c:/qbittorrent/include` <--- libtorrent and other ""normal libs"" `c:/qbittorrent/include/boost_1_64_0` <---- boost includes but yeah, removing version info is better imo",0,0,0,0.9779540300369264,0.9417012929916382,0.9733558893203736,0.0,accept,unanimous_agreement
142011595,7522,"this are mandatory system libraries, can be moved to winconf.pri, with mingw system libraries too and use condition, like: [code block] or if i think about that, they can be moved all to winconf.pri, here can be problem, that openssl 1.1 has other names for library files. or libeay32.lib and ssleay32.lib can stay in example conf.pri.msvc",0,0,0,0.9840036034584044,0.9913922548294068,0.9853663444519044,0.0,accept,unanimous_agreement
142012333,7522,"ok, good idea. done.",1,1,1,0.9109253883361816,0.94751638174057,0.9713564515113832,1.0,accept,unanimous_agreement
142012341,7522,of course. done.,0,0,1,0.9235202670097352,0.9484851956367492,0.554148256778717,0.0,accept,majority_agreement
142012348,7522,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
142012401,7522,i think yes.,0,0,0,0.965730369091034,0.9288822412490844,0.967261016368866,0.0,accept,unanimous_agreement
142012469,7522,both libtorrent and qbittorrent should be built with this flag enabled (or disabled). i'll disable it here by default and put appropriate comment.,0,0,0,0.9874984622001648,0.9936164617538452,0.9952446818351746,0.0,accept,unanimous_agreement
142019086,7522,the boost.filesystem and boost.thread aren't needed in either branch. they are leftover dependencies from pre-rc_0_16 era. i didn't bother to update mingw conf in the repo.,0,0,0,0.985047459602356,0.9784120917320251,0.9932211637496948,0.0,accept,unanimous_agreement
142025317,7522,ok. fixed.,0,0,0,0.981415629386902,0.9449908137321472,0.9841457009315492,0.0,accept,unanimous_agreement
142025488,7522,"i'm confused by this line. isn't it should be `config(release, debug|release)`?",-1,-1,-1,0.8848171234130859,0.579147458076477,0.9257678985595704,-1.0,accept,unanimous_agreement
142025624,7522,"""for using"" or ""to use""",0,0,0,0.9352622032165528,0.9907113909721376,0.9924936294555664,0.0,accept,unanimous_agreement
142025644,7522,"""this"" in each line is unneeded, imo.",0,0,0,0.9828470945358276,0.8654012084007263,0.9816665649414062,0.0,accept,unanimous_agreement
142026041,7522,"you can simply try it, put `message(im in)` into this block, i tried it and that block is doing nothing, is executed in debug and in release too. anyway, `qmake_cxxflags_release += -zi` this flag is used only in release build, so it doesn't matter. question is, if we want to generate debug info for debug and release builds, it is described [a link] we have to options, call it like this, without the `release {` block: [code block] or: [code block] and here is the scope syntax [a link] i think that author of this `release {` block, intended to run this block only in release builds",0,0,0,0.951556384563446,0.98580139875412,0.9913102388381958,0.0,accept,unanimous_agreement
142026278,7522,"this `release {` block was added by in `git show 1f0d4ce871292199b4c1ea082ef14f27a96fc1ba`, this block was intended to run only in release build ( by comments ), i checked it in deepgit :), but is more relevant to tell... :)",1,1,1,0.8913283944129944,0.9946876764297484,0.9916553497314452,1.0,accept,unanimous_agreement
142056784,7522,"conf.pri doesn't exist by default right? if that so, then it might be better to: [code block]",0,0,0,0.9826149940490724,0.9945088028907776,0.9904740452766418,0.0,accept,unanimous_agreement
142056912,7522,why don't you use `win32-g++* {} else {}` here?,0,0,0,0.9852331280708312,0.9908766150474548,0.9917125701904296,0.0,accept,unanimous_agreement
142057080,7522,"or both `win32-msvc*`, `win32-g++*`...",0,0,0,0.9851611852645874,0.9930971264839172,0.9927129149436952,0.0,accept,unanimous_agreement
142057449,7522,this is just example config. user will edit it and remove unneeded lines.,0,0,0,0.9891023635864258,0.9852902889251708,0.9934499859809875,0.0,accept,unanimous_agreement
142057515,7522,i thought about it. need to try...,0,0,0,0.6147563457489014,0.841902494430542,0.8237654566764832,0.0,accept,unanimous_agreement
142057911,7522,and what about adding `conf.pri` to .gitignore ?,0,0,0,0.9871708750724792,0.9942653775215148,0.9949524402618408,0.0,accept,unanimous_agreement
142058115,7522,"it's clearer for me to have `win32- {}` block, so i know immediately where i need to modify, just saying. (not a change request)",0,0,0,0.9626126289367676,0.9850080013275146,0.990190863609314,0.0,accept,unanimous_agreement
142058586,7522,it's already there.,0,0,0,0.9837296605110168,0.9861506819725036,0.9890215992927552,0.0,accept,unanimous_agreement
142058667,7522,really i would have only one example branch.,0,0,0,0.9653536081314088,0.9779353141784668,0.9606534242630004,0.0,accept,unanimous_agreement
142106797,7522,ok. fixed.,0,0,0,0.981415629386902,0.9449908137321472,0.9841457009315492,0.0,accept,unanimous_agreement
142106835,7522,removed.,0,0,0,0.9311882257461548,0.9782117605209352,0.9612457156181335,0.0,accept,unanimous_agreement
142109681,7522,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
142139484,7522,"no need for this comment. tested, it works as intended.",0,0,0,0.9665492177009584,0.9701242446899414,0.5502014756202698,0.0,accept,unanimous_agreement
142163427,7522,sure. copy-paste issue...,0,0,0,0.9766533970832824,0.977638065814972,0.9835013747215272,0.0,accept,unanimous_agreement
142172045,7522,"qmake_cxxflags_release, qmake_lflags_release used now instead of `release` scope.",0,0,0,0.9897037148475648,0.9955169558525084,0.9944016337394714,0.0,accept,unanimous_agreement
142177981,7522,wouldn't using `qmake_lflags` here more suitable? since we always want debug info.,0,0,0,0.986752986907959,0.9926277995109558,0.9879856705665588,0.0,accept,unanimous_agreement
142178124,7522,both line can be collapsed to `qmake_cxxflags`,0,0,0,0.987539529800415,0.994147539138794,0.9959420561790466,0.0,accept,unanimous_agreement
142178165,7522,both line can be collapsed to `qmake_cxxflags`,0,0,0,0.987539529800415,0.994147539138794,0.9959420561790466,0.0,accept,unanimous_agreement
142178732,7522,would use `win32-msvc*` here,0,0,0,0.9875313639640808,0.9942595958709716,0.9953969120979308,0.0,accept,unanimous_agreement
142178937,7522,"would use `win32-msvc*` here... overall it's pretty good, if you don't wish to change anymore, i'll give my approval.",1,1,1,0.7054963111877441,0.9007957577705384,0.9454611539840698,1.0,accept,unanimous_agreement
142444485,7522,"`built with this flag defined`, do not understand this line",0,0,0,0.7201653718948364,0.9889847040176392,0.9925521612167358,0.0,accept,unanimous_agreement
142451402,7522,this line is just a continuation of the previous one. this flag should be defined if you link with libtorrent compiled with this flag defined.,0,0,0,0.989349126815796,0.994150161743164,0.9949840307235718,0.0,accept,unanimous_agreement
142478746,7522,"ohh yes, got it thx",1,0,0,0.584097683429718,0.8381422758102417,0.8196104168891907,0.0,accept,majority_agreement
18224500,1984,"`winver` is detected/defined during compile time, don't use it. just rely on `getprocaddress` to ensure that function is present in the library.",0,0,0,0.9850599765777588,0.9926935434341432,0.993697464466095,0.0,accept,unanimous_agreement
18224739,1984,why qt5-only restriction? if `installnativeeventfilter` only works in qt5 maybe we can just ignore windows native events altogether and always defer shutdown from qbtsession destructor?,0,0,0,0.986198902130127,0.994400918483734,0.9884379506111144,0.0,accept,unanimous_agreement
18241569,1984,"well, first of all i wanted to be as much conservative as possible avoiding to inject code which i would not been able to test. in second instance because i was not completely sure (i only made a fast search) qabstractnativeeventfilter and installnativeeventfilter were fully supported on qt prior to 5. now i googled better and i understand qabstractnativeeventfilter is supported while installnativeeventfilter is not supported (if i understand correctly the qt documentation, i need to reimplement qcoreapplication::wineventfilter instead). no we cannot. i tried that way but i found it is only working when you shutdown just after closing qbt. it doesn't works if you shutdown without closing qbt. i will try to write down the two implementations for 5.x and 4.x (7 or 8)...",0,0,0,0.9237420558929444,0.8984990119934082,0.9551079273223876,0.0,accept,unanimous_agreement
18241861,1984,"this is exactly the way i would like to follow too. but, instead to rely directly on getprocaddress success, i would like to implement a specific check using getversion fuction or something similar. this, at least, should avoid a failure debug message where it is not a real failure.",0,0,0,0.9778995513916016,0.986769437789917,0.9714250564575196,0.0,accept,unanimous_agreement
25558602,1984,"explicitly use unicode version of winapi functions and wchar_t string constants with it (eg. getmodulehandlew(l""user32.dll"") and so on).",0,0,0,0.9889772534370422,0.994817316532135,0.9940000772476196,0.0,accept,unanimous_agreement
25558615,1984,use simple 0 as null-pointer constant.,0,0,0,0.9865270256996156,0.9915157556533812,0.99264258146286,0.0,accept,unanimous_agreement
25558639,1984,use `true` and `false` as bool constants (true and false is of type int).,0,0,0,0.9860504269599916,0.9915769100189208,0.9939779043197632,0.0,accept,unanimous_agreement
25558655,1984,from qt docs:,0,0,0,0.9874996542930604,0.9917805790901184,0.9861897826194764,0.0,accept,unanimous_agreement
25558827,1984,better do `if (!shutdownbrcreate)`,0,0,0,0.9764883518218994,0.9927825927734376,0.9928132891654968,0.0,accept,unanimous_agreement
25559755,1984,can you give a screenshot of this situation? i cannot understand on which dialog you are refering to.,0,0,0,0.9098097681999208,0.94685959815979,0.971362292766571,0.0,accept,unanimous_agreement
25589543,1984,"after a few seconds you have chosen to shutdown/log-off, a dialog with a progress bar appears, if you wait the progress bar to complete, another dialog appears offering you to ""end now"" or ""cancel"" the shutdown. i'm referring to this latest dialog (here is the screenshot) ![a link] without this pr the ""end now"" and ""cancel"" button have exactly the same behavior: suddenly kill the application.",-1,0,0,0.6940196752548218,0.9330105185508728,0.9394479393959044,0.0,accept,majority_agreement
503008062,13498,this should be moved into the prior #ifndef disable_gui check,0,0,0,0.9890066385269164,0.994510531425476,0.9952534437179564,0.0,accept,unanimous_agreement
503008223,13498,also needs to be guarded,0,0,0,0.9803984761238098,0.9815257787704468,0.9930919408798218,0.0,accept,unanimous_agreement
503008529,13498,"the old !(params.nosplash || preferences::instance()->issplashscreendisabled()) check is removed entirely, so splash screen is displayed regardless of preferences, as xavier mentioned.",0,0,0,0.9819540977478028,0.9935032725334167,0.9944732785224916,0.0,accept,unanimous_agreement
61680155,5195,is it possible to use qt's hash here?,0,0,0,0.9877646565437316,0.994956910610199,0.9945749044418336,0.0,accept,unanimous_agreement
61680297,5195,"if i read correctly, this statement could be simplified: [code block] so you won't need to include ` `",0,0,0,0.9861528873443604,0.9859262704849244,0.9911596179008484,0.0,accept,unanimous_agreement
61690404,5195,[code block] ?,0,0,0,0.988338053226471,0.9873912930488586,0.9939754605293274,0.0,accept,unanimous_agreement
61721347,5195,will be very readable! (i hope you understand that i don't think so),1,1,1,0.9852736592292786,0.9863229990005492,0.994090735912323,1.0,accept,unanimous_agreement
61721393,5195,you save the lines?,0,0,0,0.9843115210533142,0.9889618754386902,0.9952412843704224,0.0,accept,unanimous_agreement
61723471,5195,"indeed. how should i know? with `if`: dangling variable declaration, `= false` is meaningless, then when one starts to read the `if` construction it's impossible to predict immediately what is inside. frome the other hand, my one-liner shows from the very beginning that its is an initialisation, and that value depends on a condition. what functions are called to get the values is not so important. and, if you like, it can be written, for instance, as follows: [code block] so i propose not to break declaration and initialisation.",0,0,0,0.8741487860679626,0.847944974899292,0.9683391451835632,0.0,accept,unanimous_agreement
62428944,5195,why do you remove this assertion?,0,0,0,0.9586929082870485,0.9788803458213806,0.9931748509407043,0.0,accept,unanimous_agreement
62428954,5195,group this (and .cpp) with other rss files.,0,0,0,0.9857636094093324,0.9917210340499878,0.994263231754303,0.0,accept,unanimous_agreement
62428979,5195,we use qbt_uses_qt5 instead of explicit version check.,0,0,0,0.9893752336502076,0.9937466382980348,0.9941607117652892,0.0,accept,unanimous_agreement
62429006,5195,"since this file is in ""base/rss"" directory you should omit it in include statements.",0,0,0,0.9852373003959656,0.9939886331558228,0.9950982928276062,0.0,accept,unanimous_agreement
62433655,5195,"because it seemed unnecessary and gets triggered in certain cases with my changes. the logic right below it is already wrapped in the same condition, so having the assert as well just reduces the usefulness of this function.",0,0,0,0.8738809823989868,0.9860742688179016,0.9257813692092896,0.0,accept,unanimous_agreement
62433665,5195,"i can, but why? this is a qtcreator project file, what's the point in managing it by hand?",0,0,0,0.980172336101532,0.9855878353118896,0.9697660207748412,0.0,accept,unanimous_agreement
62434293,5195,but we should not have two files (feeds or folders) with the same id here! i have not yet checked your changes completely but i still think it looks like a mistake.,-1,0,-1,0.9665051102638244,0.4929447770118713,0.8767949938774109,-1.0,accept,majority_agreement
62434308,5195,"it's **qmake** project file! we manage this in different ways, and often manually.",0,1,0,0.9218721389770508,0.5855355858802795,0.9783867597579956,0.0,accept,majority_agreement
62434331,5195,"if you call this with an existing item, the if statement right below it will prevent it from being added, resulting in the function call being a no-op. imo, that is the correct behavior, and what i would expect to happen. the fact that it causes a crash in debug mode i think is pointless. if you add an item to a set that already has the item, it doesn't cause the program to crash, it just silently ignores it. it's the same idea here.",-1,0,0,0.771416425704956,0.5968475937843323,0.7500168681144714,0.0,accept,majority_agreement
62434430,5195,it is a good idea. but are you sure that the caller is consistent?,1,1,1,0.9479315280914308,0.9750323295593262,0.9299397468566896,1.0,accept,unanimous_agreement
62434541,5195,"consistent in what way? looking at all usages of the function, i can at least say that none of them actually make use of the returned boolean, they all just blindly add. while looking at the usages though, i did find a couple places in rss_imp i missed updating when i created the addfeed helper. so fixing those may also fix the cases that were triggering the assertion. even so though i still believe it would be better off removed.",0,0,0,0.888534665107727,0.9655334949493408,0.976567804813385,0.0,accept,unanimous_agreement
62434717,5195,i only remind you that you have to carefully check everything.,0,0,0,0.9319435954093932,0.9254737496376038,0.9768818020820618,0.0,accept,unanimous_agreement
62475425,5195,"for example, when resolving a merge conflict.",0,0,0,0.977605402469635,0.9832830429077148,0.9824820756912231,0.0,accept,unanimous_agreement
62661212,5195,delete space before `ui->listrules->count()`.,0,0,0,0.985489547252655,0.9915869235992432,0.9934231638908386,0.0,accept,unanimous_agreement
62677677,5195,you should prepend a license.,0,0,0,0.9869804978370668,0.9884275794029236,0.9946529865264891,0.0,accept,unanimous_agreement
62677722,5195,and a license here too.,0,0,0,0.9813903570175172,0.985509753227234,0.9949824213981628,0.0,accept,unanimous_agreement
62887177,5195,loadpath,0,0,0,0.9877817630767822,0.9468462467193604,0.991293489933014,0.0,accept,unanimous_agreement
62943398,5195,"i assume you want me to fix `save_path` a few lines up as well then? i don't mind making these changes, but i'd appreciate it if somebody would give me a single comprehensive review so that i don't have to keep pushing these small commits every couple days to fix style issues that were introduced by somebody else.",0,1,0,0.7514382004737854,0.6929503679275513,0.8885442614555359,0.0,accept,majority_agreement
62944446,5195,"there is no comprehensive explanation, but you can refer [a link] and remember that insists on correcting every line you touch :)",1,1,1,0.7189834117889404,0.9706271290779114,0.972150981426239,1.0,accept,unanimous_agreement
62946304,5195,"i've read the style guide, i was just trying to minimize my changes to existing code except where absolutely necessary. if the your policy is to fix the style of anything you have to touch, i'll make another pass over my changes and cleanup any pre-existing style issues as well. before i do another push though, does anybody have additional non-style related concerns? i'd like to address all remaining issues with my next push if possible.",0,0,0,0.9480530023574828,0.9649381637573242,0.9192765355110168,0.0,accept,unanimous_agreement
62966385,5195,yes. i will comment asap (when i have some spare time).,0,0,0,0.9800220131874084,0.9705398678779602,0.9798863530158995,0.0,accept,unanimous_agreement
63016395,5195,please please change those to raw literals!,0,0,0,0.9437075853347778,0.963615357875824,0.97967267036438,0.0,accept,unanimous_agreement
63016958,5195,why do you need the test here?,0,0,0,0.9701085090637208,0.9840217232704164,0.9914246797561646,0.0,accept,unanimous_agreement
63021536,5195,"""qbittorrent"" what? ""qbittorrent rules""? same question to the constants in `automatedrssdownloader::on_importbtn_clicked()`",0,0,0,0.9871475100517272,0.9949476718902588,0.9947115182876588,0.0,accept,unanimous_agreement
63028089,5195,"change what exactly? sorry, i don't understand what you're asking for.",-1,-1,-1,0.9872738122940063,0.9855425357818604,0.9929087162017822,-1.0,accept,unanimous_agreement
63029006,5195,"`(?<=^|\\|)\\*+|\\*+(?=$|\\|)` →`r""((?<=^|\|)\*+|\*+(?=$|\|))""`",0,0,0,0.980355143547058,0.986665904521942,0.9622582197189332,0.0,accept,unanimous_agreement
63029107,5195,"turns out i don't. i had thought i needed it in my original implementation of this class, and forgot to remove it after refactoring. it's been a while since i've done c++, i forgot it was safe to delete null pointers.",0,0,0,0.863165557384491,0.9712509512901306,0.9628944993019104,0.0,accept,unanimous_agreement
63029378,5195,"`(?<=^|\\|)\\*+|\\*+(?=$|\\|)` →`r""((?<=^|\|)\*+|\*+(?=$|\|))""`",0,0,0,0.980355143547058,0.986665904521942,0.9622582197189332,0.0,accept,unanimous_agreement
63029595,5195,"find 10 differences! just kidding, of course, only one is.",-1,-1,1,0.8729912638664246,0.9059706926345824,0.5821746587753296,-1.0,accept,majority_agreement
63029616,5195,"oh, well that's convenient. thanks",1,1,1,0.9605326056480408,0.9862111806869508,0.986028492450714,1.0,accept,unanimous_agreement
63276027,5195,you should use anonymous namespace here.,0,0,0,0.9879148006439208,0.9896140694618224,0.9948428273200988,0.0,accept,unanimous_agreement
65862390,5195,method definitions aren't allowed in header files,0,0,0,0.9822414517402648,0.9794484972953796,0.9927268028259276,0.0,accept,unanimous_agreement
65863153,5195,coding guidelines par. 2b,0,0,0,0.9800570011138916,0.9793034791946412,0.9940328001976012,0.0,accept,unanimous_agreement
65863413,5195,"imo, it's better to leave only one constructor here (with default second param): [code block]",0,0,0,0.9853009581565856,0.9869313836097716,0.9937704205513,0.0,accept,unanimous_agreement
65863674,5195,[code block] coding guidelines par. 1d,0,0,0,0.9848780035972596,0.9854334592819214,0.9942665696144104,0.0,accept,unanimous_agreement
65863887,5195,break these `if`s.,0,0,0,0.972277045249939,0.9686164855957032,0.9635888934135436,0.0,accept,unanimous_agreement
65864279,5195,remove this extra `private:`. use only one blank line between methods and fields (variables).,0,0,0,0.9828559756278992,0.9915037751197816,0.9932210445404052,0.0,accept,unanimous_agreement
65864543,5195,use our `utils::fs::tonativepath()` instead.,0,0,0,0.9871327877044678,0.9934628009796144,0.9947249293327332,0.0,accept,unanimous_agreement
65864591,5195,change to camelcase.,0,0,0,0.9842596650123596,0.9856624007225036,0.9906168580055236,0.0,accept,unanimous_agreement
65987227,5195,"per 1a, empty bodies are {}. does that not apply to constructors? or only apply when on a single line? not trying to argue, just asking.",0,0,0,0.9745997190475464,0.9240772724151612,0.9572253227233888,0.0,accept,unanimous_agreement
65999775,5195,"this one was intentional. i'll change it if you insist, but i find it significantly harder to read the other way.",0,0,0,0.5384145975112915,0.8079304099082947,0.9631576538085938,0.0,accept,unanimous_agreement
66014160,5195,yes. we force multiline for constructors with initialization list and therefore we split its body braces.,0,0,0,0.9869943261146544,0.9892569184303284,0.9932680726051332,0.0,accept,unanimous_agreement
66014462,5195,"i just mean: [code block] personally, i prefer to have it in one line in a larger number of cases, but the qbittorrent coding style rules restricts it stronger.",0,0,0,0.9702418446540833,0.9794730544090272,0.9808161854743958,0.0,accept,unanimous_agreement
66014735,5195,could you add 2160p? (aka 4k or uhd) i never saw 2160i. examples => [a link],0,0,0,0.98727685213089,0.9729952216148376,0.9941385984420776,0.0,accept,unanimous_agreement
66169742,5195,"this project is only for importing settings from utorrent, it has nothing to do with the type of content that is actually available. utorrent only has those 5 options.",0,0,0,0.9887075424194336,0.98594331741333,0.9886522889137268,0.0,accept,unanimous_agreement
66169855,5195,"fair enough, i'll update this as well.",0,0,0,0.9688226580619812,0.8993668556213379,0.9822147488594056,0.0,accept,unanimous_agreement
340029486,11354,"well, i've just done some code review. this flag is cleared in `handletorrentpausedalert()` so it seems you don't really need to clear it here.",0,0,0,0.9855393171310424,0.9901235699653624,0.989577054977417,0.0,accept,unanimous_agreement
340031990,11354,reverted.,0,0,0,0.8778582215309143,0.9610875844955444,0.9197385907173156,0.0,accept,unanimous_agreement
340055634,11354,seems to handle the second case we just need to set `m_startupstate` to `started` under this condition.,0,0,0,0.9882087707519532,0.9927324652671814,0.991422474384308,0.0,accept,unanimous_agreement
340117946,11354,[code block] or [code block],0,0,0,0.9869166612625122,0.9860919117927552,0.9944918155670166,0.0,accept,unanimous_agreement
340205119,11354,"[code block] but, seems, you need to move it to the end of the method.",0,0,0,0.9874591827392578,0.9928038716316224,0.9917508959770204,0.0,accept,unanimous_agreement
340267237,11354,"done, thanks.",1,1,1,0.727206826210022,0.6998467445373535,0.5576635599136353,1.0,accept,unanimous_agreement
340270401,11354,":+1: now can you cause ""checking on startup"" case for some paused torrent to test it? probably you need to trigger rechecking of some paused torrent and then close the app before it's done.",0,0,0,0.6541820764541626,0.9755139350891112,0.9178797602653505,0.0,accept,unanimous_agreement
340299793,11354,"when i do it to a seeding torrent, recheck->close qbt before it finishes->start qbt and pause rechecking torrent->resume/force resume after the recheck finishes, the torrent becomes paused. shouldn't it go back to seeding?",0,0,0,0.986178994178772,0.9837509989738464,0.9928103685379028,0.0,accept,unanimous_agreement
340595343,11354,sure. you don't pause it before recheck? then it is a different kind of (related) issue.,0,0,0,0.9849618673324584,0.9329479336738586,0.981738030910492,0.0,accept,unanimous_agreement
340614449,11354,"rechecking paused torrent doesn't have any problems, works as expected.",0,0,0,0.9809730052947998,0.9563097953796388,0.811823844909668,0.0,accept,unanimous_agreement
340643363,11354,"we do talk about ability to pause (and then resume) checking torrents, don't it? so starting state is ""checking"" torrent. really we have 4 starting (sub)states that should be tested: 1. forced checking torrent (torrent was resumed when user triggers force recheck); 2. forced checking paused torrent (torrent was paused when user triggers force recheck); 3. startup checking torrent (torrent is added/restored as resumed, e.g. it was resumed when app is closed last time); 4. startup checking paused torrent (torrent is added/restored as paused, e.g. it was paused when app is closed last time). in any of these cases the torrent should remain resumed after checking has done when user (pauses and then) resumes it explicitly. , do you understand what i'm talking about? if so can you please test and report all of these cases above?",0,0,0,0.95421302318573,0.9914715886116028,0.989617884159088,0.0,accept,unanimous_agreement
340687369,11354,"i thought the idea was to return it to its prior state when manually resuming the torrent we paused during recheck, but if that's how it should be then only the 1st case resumes the torrent, in all the other cases the torrent gets paused after the recheck.",0,0,0,0.9861970543861388,0.9880896210670472,0.986548125743866,0.0,accept,unanimous_agreement
341709138,11354,", can you add here the following: [code block] and check 4 cases we discussed earlier?",0,0,0,0.9867972135543824,0.98995041847229,0.993992269039154,0.0,accept,unanimous_agreement
341744137,11354,1. resumed (initial resumed) 2. resumed (initial paused) 3. paused (initial resumed on startup) 4. resumed (initial paused on startup) but [code block] 1. resumed (initial resumed) 2. paused (initial paused) 3. resumed (initial resumed on startup) 4. paused (initial paused on startup) have we decided whether it should or shouldn't resume in all cases?,0,0,0,0.9817578196525574,0.9946371912956238,0.9942666888237,0.0,accept,unanimous_agreement
341799655,11354,still no. but we can find both solutions and then just apply the chosen one.,0,0,0,0.977260410785675,0.9853276014328004,0.9584870934486388,0.0,accept,unanimous_agreement
341799776,11354,can you also test the following? [code block],0,0,0,0.9895328283309937,0.9906499981880188,0.996142566204071,0.0,accept,unanimous_agreement
341807017,11354,resumes in all cases.,0,0,0,0.9832465052604676,0.96814227104187,0.9919249415397644,0.0,accept,unanimous_agreement
343190620,11354,"well, since no one is active in the survey, i choose ""return to previous state"" (as the path of least resistance). we can change this behavior later if there are user requests. i rethought the solution once again: seems you should just revert entire 87d9840 plus remove `if (m_startupstate != started) return;` from `torrenthandle::resume()`.",0,0,0,0.9824877381324768,0.9892966151237488,0.9915136694908142,0.0,accept,unanimous_agreement
476526090,13266,please rename it to `findtrackerentry` or `trackerentrybyurl`.,0,0,0,0.9865053296089172,0.9943966865539552,0.995707869529724,0.0,accept,unanimous_agreement
476529440,13266,it's not optimal to convert each `tracker.url`. i would convert `trackerurl` to `std::string` once and then compare with it. seems you can even use some standard algorithm in that case.,0,0,0,0.987323760986328,0.9321590065956116,0.9862431883811952,0.0,accept,unanimous_agreement
476535195,13266,you shouldn't have class definition in header.,0,0,0,0.9430766105651855,0.9822073578834534,0.9758515357971193,0.0,accept,unanimous_agreement
476540635,13266,"also i would modify trackerentry class to have ""valid"" property (i.e. default constructed instance is invalid). then this method can have simpler signature, i.e. accept url and return trackerentry.",0,0,0,0.9891014695167542,0.993535041809082,0.99517560005188,0.0,accept,unanimous_agreement
476778763,13266,"after my recent changes it is again used only in one place, i removed it.",0,0,0,0.9801982045173644,0.9812834858894348,0.9925734996795654,0.0,accept,unanimous_agreement
476797066,13266,"sometimes it is better to inline some things like that, but i respect classic structure you have here, moved to separate files.",0,0,0,0.9579574465751648,0.9827128648757936,0.9482097625732422,0.0,accept,unanimous_agreement
477014753,13266,"libtorrent provides `#include `, you should use it.",0,0,0,0.9889833331108092,0.993103802204132,0.9943516254425048,0.0,accept,unanimous_agreement
477016838,13266,i would use a variable to avoid calling `is_working()` twice.,0,0,0,0.9844202399253844,0.9898993372917176,0.9887840747833252,0.0,accept,unanimous_agreement
477019340,13266,you can use `empty()`.,0,0,0,0.988101363182068,0.9912870526313782,0.9951962828636168,0.0,accept,unanimous_agreement
477019510,13266,`++failed`,0,0,0,0.9599541425704956,0.9627686142921448,0.8992141485214233,0.0,accept,unanimous_agreement
477019865,13266,use `qvector` instead. also don't forget to call `qvector<>::reserve()`.,0,0,0,0.9864213466644288,0.9936647415161132,0.9950886368751526,0.0,accept,unanimous_agreement
477020433,13266,`const bittorrent::trackerstatus status`,0,0,0,0.9836599826812744,0.9919747710227966,0.9937505125999452,0.0,accept,unanimous_agreement
477021714,13266,i think you should just write the concrete type out (`trackerlistcolumn col`?) to be more readable.,0,0,0,0.9882866740226746,0.9908580183982848,0.984031081199646,0.0,accept,unanimous_agreement
477022137,13266,please write out the return type for all new lambdas except the case of returning `void`.,0,0,0,0.9865697026252748,0.9926074743270874,0.9948157668113708,0.0,accept,unanimous_agreement
477022438,13266,`const qlonglong val`,0,0,0,0.9777063727378844,0.985410213470459,0.9912978410720824,0.0,accept,unanimous_agreement
477436999,13266,"it is redundant anyway, removed. anyway it is inline function, compiler would optimize it out.",0,0,0,0.9833231568336488,0.9904666543006896,0.9926487803459167,0.0,accept,unanimous_agreement
477437157,13266,nice,1,1,1,0.8361793160438538,0.9342552423477172,0.7884483337402344,1.0,accept,unanimous_agreement
477666895,13266,this and `setrootisdecorated` defaults to `true` and they can be removed instead.,0,0,0,0.9858469367027284,0.9948464632034302,0.9954147338867188,0.0,accept,unanimous_agreement
478084518,13266,"this class doesn't represent any abstract ""endpoint"" but particular ""endpoint of tracker entry"" so it should be `trackerentryendpoint`.",0,0,0,0.9878718852996826,0.9941148161888124,0.9933931231498718,0.0,accept,unanimous_agreement
478088674,13266,i'm not sure it's safe to store reference here.,-1,-1,-1,0.861691951751709,0.8723475933074951,0.6614742279052734,-1.0,accept,unanimous_agreement
478092637,13266,i think this extra state is redundant.,0,-1,0,0.9040687680244446,0.6423404812812805,0.7469865083694458,0.0,accept,majority_agreement
478095255,13266,why do you assign such a meaningless alias? why not `trackerurl`?,0,0,0,0.8092753291130066,0.9706986546516418,0.950576663017273,0.0,accept,unanimous_agreement
478097640,13266,coding style is broken. you should move `{` to the next line. and please check all the similar code.,0,0,0,0.903780162334442,0.8920794129371643,0.7934121489524841,0.0,accept,unanimous_agreement
478326674,13266,numfailed or failedcount,0,0,0,0.9757177233695984,0.8672569394111633,0.963119626045227,0.0,accept,unanimous_agreement
478327879,13266,broken coding style. you should add braces around `if` body.,-1,0,0,0.5700583457946777,0.961547315120697,0.9587037563323976,0.0,accept,majority_agreement
478330430,13266,"getting all messages without associating them with appropriate endpoints doesn't seem useful to me. imo, it would be better if caller side operates with endpoints directly.",0,0,0,0.8684911727905273,0.9073615074157716,0.733883261680603,0.0,accept,unanimous_agreement
479760292,13266,"done. it is kind of mouthful, but i will follow the naming scheme.",0,-1,-1,0.7217941880226135,0.9594345688819884,0.4677640795707702,-1.0,accept,majority_agreement
479760319,13266,it is. this class is not intended to store any state or be stored anywhere. it is intended only as a temporary view for announce entry.,0,0,0,0.9866808652877808,0.990154504776001,0.9933927655220032,0.0,accept,unanimous_agreement
479760426,13266,"it is useful for trackerentry user decision whether it should care or not about the messages, without checking them. and also system message sometime show non-errors, so there is disambiguation. and before my changes tracker warning messages were always hidden, even tho there is `warning` torrent status.",0,0,0,0.9829244017601012,0.9866371154785156,0.989391565322876,0.0,accept,unanimous_agreement
479760448,13266,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
479760552,13266,"trackerentry class only purpose is to reduces state of all endpoints to single state. i merely follow this pattern and it works well to show the message per tracker, not only per endpoints. moving this responsibility to caller site should be done not only for messages if anything.",0,0,0,0.9760160446166992,0.9854905605316162,0.9900858402252196,0.0,accept,unanimous_agreement
479803692,13266,"older version of qt doesn't have in place initialization in qvector. and by design this class is not default constructable, so need to have move semantic to work. works fine with qvector on newer qt version, but to keep compatibility qlist is the way to go.",0,0,0,0.980583906173706,0.9863488674163818,0.986646056175232,0.0,accept,unanimous_agreement
480072661,13266,"it seems to be optional info so i really disagree to create any extra state based on it. doesn't you just hide some logic from trackerentry user so there is ""checking for messages"" always performed (to create this extra state) even if user don't need it? you don't require extra state to fix this error.",-1,0,0,0.8475732803344727,0.5803975462913513,0.6390495300292969,0.0,accept,majority_agreement
480074284,13266,not all endpoint properties can be merged without losing their usefulness.,0,0,0,0.968212068080902,0.8528826832771301,0.9673625230789183,0.0,accept,unanimous_agreement
480079997,13266,"in fact, this is just an intermediate stage of development to facilitate the transition from the previous libtorrent version, when it did not provide any per-endpoint info.",0,0,0,0.9871740341186525,0.9919443130493164,0.9930972456932068,0.0,accept,unanimous_agreement
480081727,13266,but you do store it in container and make it accessible via public interface of trackerentry.,0,0,0,0.9894774556159972,0.993928074836731,0.9951861500740052,0.0,accept,unanimous_agreement
480083748,13266,"sorry, i can't find in your answer any strong reason that prevents from using qvector here (it's mostly unrelated).",-1,-1,-1,0.9844768643379213,0.9854458570480348,0.989027976989746,-1.0,accept,unanimous_agreement
480089368,13266,"disagree. i am always against overly long names as long as there is no ambiguity. but here we are dealing with a term that is often used throughout the program, and it has a different meaning in itself (for example, we do not use the term tracker here, but trackerentry). in such cases, it is often convenient to use nested names (e.g. `trackerentry::endpoint`) to use its short part in an internal context where it possible has no ambiguity.",0,0,-1,0.8065183758735657,0.982736110687256,0.5005608797073364,0.0,accept,majority_agreement
480369373,13266,"for one it doesn't compile. i made this class default constructible and compatible with old qvector, i'm tired.",-1,-1,-1,0.9797525405883788,0.9900874495506288,0.9936530590057372,-1.0,accept,unanimous_agreement
480370033,13266,"ok, please don't tell me now that you want this implementation in separate compilation unit.",0,0,0,0.9675273299217224,0.9624673128128052,0.9116626977920532,0.0,accept,unanimous_agreement
480376939,13266,"but as long as trackerentry lives those will live too. and you need to think how would anyone use this. copy or not `lt::announce_endpoint` you would keep, you want to peek into it and throw away. if you copy, state would not even change so what would be the point of storing it? i mean you can't simply say storing reference in class is __always__ unsafe, because everything have assumptions and restrictions.",0,0,0,0.8869872093200684,0.9329334497451782,0.9140661358833312,0.0,accept,unanimous_agreement
480380596,13266,"well it is useful to see message without expanding list of endpoints. tracker responses are common for endpoints and those are most important for user as far as torrent is main concern. specific endpoint errors are less important if some of them are communication with tracker. sure, but i'm not concerned about this ""intermediate stage"" in this pr. i only want to see responses from tracker, which i can't with upstream version.",0,0,0,0.7628509998321533,0.9367611408233644,0.8794434070587158,0.0,accept,unanimous_agreement
480732901,13266,so handle it at the level of logic where it (perhaps) makes some sense. i've suggested this before: i only ask you not to justify the disadvantages of your changes by existing disadvantages in the upstream. we are trying to get rid of all the obvious flaws before it is merged for the first time.,0,0,0,0.9597044587135316,0.983184278011322,0.974665105342865,0.0,accept,unanimous_agreement
480756604,13266,"there may be something not so obvious here... for example, get list of endpoints from a temporary and then process it. yes, i can't. and i don't. here is one of the special cases. it's unclear from trackerentry interface that there's list of some temporaries.",0,0,0,0.9674400687217712,0.61027592420578,0.9797217845916748,0.0,accept,unanimous_agreement
480765726,13266,"well, seems i didn't understand your previous answer... for me, when you say ""this"" you refer to previously mentioned thing (qvector) but seems you don't.",0,-1,0,0.8171204924583435,0.5880407094955444,0.9229592680931092,0.0,accept,majority_agreement
482346151,13266,"i didn't justify anything. i disagree that they are flaws, except for you personal preference bias. there are two users of this method, both uses the data in the same way. aggregating those messages without knowing inner logic of lt is not obvious. and would require duplicating the code. it is not just list of messages of endpoints. and `trackerentry` encapsulates this logic for ease of use. this is my patch and i think your proposed change is not applicable.",-1,-1,0,0.6568781137466431,0.6161513924598694,0.6656754016876221,-1.0,accept,majority_agreement
482419167,13266,"there's no point in aggregating these messages at all, that's what i want to tell you. especially in such a confusing way as you do: if only one endpoint out of several returns a warning, what is the point of ""seeing"" this warning without knowing where it comes from? if multiple endpoints return warnings, what's the point of ""seeing"" them all without linking to their endpoints? if only one of the endpoints was working and then broke down, then you ""send"" a bunch of messages at once, as if all these errors happened together now - isn't that confusing?",-1,-1,-1,0.6052905321121216,0.805340051651001,0.917043924331665,-1.0,accept,unanimous_agreement
482469159,13266,can't there be messages here when it's not working (if it was working before)?,0,0,0,0.9679530262947084,0.9732869267463684,0.9868403673171996,0.0,accept,unanimous_agreement
482477652,13266,why not include qcontainerfwd like you've done above?,0,0,0,0.9759173393249512,0.9896968603134156,0.9940203428268432,0.0,accept,unanimous_agreement
482484803,13266,"i would call it ""tostring"" as well but it's impossible in case of variables.",0,0,0,0.9776265621185304,0.9914542436599731,0.974478006362915,0.0,accept,unanimous_agreement
482486105,13266,static_cast in all similar places,0,0,0,0.9856282472610474,0.9901995062828064,0.9931381344795228,0.0,accept,unanimous_agreement
506782512,13266,lt updates this message whether it failed or succeeded to contact tracker. so it will be updated or empty.,0,0,0,0.9868146181106568,0.992979109287262,0.994097113609314,0.0,accept,unanimous_agreement
506783010,13266,changed,0,0,0,0.9773849844932556,0.9270829558372498,0.7968646287918091,0.0,accept,unanimous_agreement
506791001,13266,it confuses... what does this comment mean?,-1,-1,-1,0.8546551465988159,0.96153461933136,0.9245157241821288,-1.0,accept,unanimous_agreement
728625787,13266,"are you sure these terms (dht, lsd, pex) should be translated? even if it is, then you should exclude the entire decoration from the translated string: [code block]",0,0,0,0.9883188009262084,0.9931701421737672,0.995368480682373,0.0,accept,unanimous_agreement
728908010,13266,"please don't shorten the code in this way. booleans should be used as booleans, even if it will look longer.",0,0,0,0.9294231534004213,0.9808993339538574,0.9507876038551332,0.0,accept,unanimous_agreement
728926315,13266,extracting endpoint name should be done outside of this function to not duplicate it for each infohash variant.,0,0,0,0.9877517223358154,0.9934099316596984,0.9933897256851196,0.0,accept,unanimous_agreement
728926926,13266,wrong coding style.,-1,-1,-1,0.884105920791626,0.859097421169281,0.8037903904914856,-1.0,accept,unanimous_agreement
728972895,13266,"it seems that adding/filling this field is the only thing you had to do at a core level to achieve your goal (even deleting ""deprecated"" fields is not necessary at all and could be postponed for a later time to facilitate the review and merging of the main changes). but your pr contains too many changes to perform the job, some of which are very doubtful or obviously incorrect. i would recommend limiting yourself to the minimum required number of changes to core level code. if you want to ""improve"" something else, then please do it in a separate pr. otherwise, the review may take a long time and get bogged down in correcting side errors.",0,0,0,0.935107409954071,0.966448962688446,0.9349806308746338,0.0,accept,unanimous_agreement
734985053,13266,"this is lambda, you cannot specify type like that. i can do [code block] to make return type explicit, redundant, but more readable. as for arguments time it is precisely auto to support both libtorrent v1 and v2. they are different type depending on the version.",0,0,0,0.9843832850456238,0.9910933375358582,0.9927593469619752,0.0,accept,unanimous_agreement
734985063,13266,"oops, fixed.",0,0,-1,0.8505692481994629,0.5780893564224243,0.9114224314689636,0.0,accept,majority_agreement
734985215,13266,"microptimizations are bad for readibility, it is not performance critical code, it is done twice instead of one time and reduces code duplication.",-1,-1,-1,0.9085389971733092,0.8838109970092773,0.580930233001709,-1.0,accept,unanimous_agreement
734985688,13266,"hehe, they are used as boolens. this is precisely why it works, because they are boolen :) fixed.",1,1,1,0.8971479535102844,0.9923191666603088,0.9951098561286926,1.0,accept,unanimous_agreement
734985828,13266,"reverted this. i feel like strings like that shouldn't be hardcoded, but i guess they can be in this case.",0,0,0,0.5589607357978821,0.9092103242874146,0.9836593866348268,0.0,accept,unanimous_agreement
734987875,13266,"this pr is performing it's job just fine, it changes how trackers and endpoints are displayed and make it consistent, instead adding another change on top old as you called them ""deprecated"" filed which would make it even more convoluted that it is now. have i deduplicated some code, instead of changing the same thing in two places? yes, does it require another pr. no. i can make it in separate commits if it will make it better for you to understand and review them. have you pointed them out in the review? `very doubtful or obviously incorrect` are quite a strong words to throw around without backing them out. i'd love to fix and/or discuss your concerns.",0,0,-1,0.8197728991508484,0.791006326675415,0.651625394821167,0.0,accept,majority_agreement
735000592,13266,"e.g., you've changed the following code: [code block] ...with the following one: [code block] what is the meaning of this change? i wouldn't have such concerns if this pr contained only the required changes, or at least you kept such additional improvements in a separate commits, so at least you had to provide explanations for it. of course, it may be some small thing, but a large number of such little things makes us dig into them, trying to figure out if there are any regressions here, which greatly distracts from the review of the main logic. as i mentioned above, all you needed was to implement the `name` field, then we could quickly deal with the implementation of the main purpose of this pr.",0,0,0,0.8249223232269287,0.9524491429328918,0.7572652697563171,0.0,accept,unanimous_agreement
735000982,13266,what duplication you talk about? i see the single place where the name can be extracted.,0,0,0,0.9696372151374816,0.9816566109657288,0.992170751094818,0.0,accept,unanimous_agreement
735001140,13266,oops... my bad. i misread it.,-1,-1,-1,0.9900211691856384,0.9921250939369202,0.9946526288986206,-1.0,accept,unanimous_agreement
1292781792,13266,it looks like it doesn't match the previous condition (because of `protocolstats.status != bittorrent::trackerentry::working`).,0,0,0,0.9853384494781494,0.989922821521759,0.9908366203308104,0.0,accept,unanimous_agreement
1292782852,13266,also please don't put all this code in `if` condition directly but assign to some variable.,0,0,0,0.9839714169502258,0.992764174938202,0.9927685260772704,0.0,accept,unanimous_agreement
168918665,8427,"imo, if you need to enclose code under some ""switch case"" it's strong reason to extract it into separate function.",0,0,0,0.9770678281784058,0.9881895780563354,0.9766470193862916,0.0,accept,unanimous_agreement
168918685,8427,"there is no code after ""switch"" so you should use ""break"" here and below.",0,0,0,0.983585000038147,0.9936291575431824,0.9938475489616394,0.0,accept,unanimous_agreement
168918797,8427,"why not original string? if string doesn't contain separator it should rerurned as is. if separator is empty, the string never contains it.",0,0,0,0.9787741303443908,0.9702609181404114,0.9894455075263976,0.0,accept,unanimous_agreement
168918802,8427,coding style.,0,0,0,0.9849669337272644,0.9589239358901978,0.9877970814704896,0.0,accept,unanimous_agreement
168918871,8427,isn't it redundant?,0,0,0,0.971676230430603,0.9598464965820312,0.9343189597129822,0.0,accept,unanimous_agreement
168918953,8427,"please omit ""else"" after ""return"".",0,0,0,0.953539788722992,0.9907428622245787,0.9944977164268494,0.0,accept,unanimous_agreement
168919584,8427,"this check is redundant. it hides some kind of bad request. if content length header is 0, then only requests with empty body is valid, isn't it?",-1,0,-1,0.7648295164108276,0.5438288450241089,0.9390016794204712,-1.0,accept,majority_agreement
168919681,8427,can we omit data copying here using qbytearray::fromrawdata()?,0,0,0,0.9837213158607484,0.9950324296951294,0.995381236076355,0.0,accept,unanimous_agreement
168919728,8427,can we omit unnecessary data copying here?,0,0,0,0.971282422542572,0.9896891117095948,0.9933449029922484,0.0,accept,unanimous_agreement
168919756,8427,request which uses `lf` for newline is bad request!,-1,-1,-1,0.9835196137428284,0.9928547739982604,0.9900320768356324,-1.0,accept,unanimous_agreement
168919903,8427,you perform tolower multiple times.,0,0,0,0.9868282079696656,0.9515674114227296,0.9877017140388488,0.0,accept,unanimous_agreement
168920005,8427,then add braces to other branches.,0,0,0,0.9839327335357666,0.9879733324050904,0.9942506551742554,0.0,accept,unanimous_agreement
168920565,8427,"i don't feel the same way, but i can change it if you insist.",0,-1,0,0.8481729626655579,0.6393226385116577,0.9038192629814148,0.0,accept,majority_agreement
168920610,8427,"`break` will only jump out the `switch`, so it is not enough and `return` is a strong meaning: i wish to stop further parsing/processing.",0,0,0,0.5125446915626526,0.952382266521454,0.9908915162086488,0.0,accept,unanimous_agreement
168920665,8427,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
168920686,8427,"afaik some program provides compatibility, but we don't, should i change the comment?",0,0,0,0.9873409867286682,0.977869987487793,0.9809937477111816,0.0,accept,unanimous_agreement
168920709,8427,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
168920791,8427,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
168920892,8427,you mean the `m_request` initialization?,0,0,0,0.9872475862503052,0.9938953518867492,0.9938389658927916,0.0,accept,unanimous_agreement
168921056,8427,i haven't found a way.,-1,0,-1,0.7816756963729858,0.6164725422859192,0.6770039200782776,-1.0,accept,majority_agreement
168921467,8427,"~~yes, thanks!~~",1,1,1,0.9809771180152892,0.9947932362556458,0.9921585321426392,1.0,accept,unanimous_agreement
168921497,8427,i added a variable for it.,0,0,0,0.9854576587677002,0.9819828271865844,0.9918985366821288,0.0,accept,unanimous_agreement
168921603,8427,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
168921823,8427,"no, i need to check i don't read over bound, from qbytearray::mid():",0,0,0,0.9745861291885376,0.970097541809082,0.9855350255966188,0.0,accept,unanimous_agreement
168921868,8427,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
168921883,8427,~~good catch! i'll update this part.~~,1,1,1,0.9918501377105712,0.9958821535110474,0.9961044788360596,1.0,accept,unanimous_agreement
168921894,8427,"using `qstring::fromlatin1(const char *str, int size = -1)` overload.",0,0,0,0.988886535167694,0.9930208325386048,0.9947912693023682,0.0,accept,unanimous_agreement
168922558,8427,isn't explicitly initializing all class members a good practice?,0,0,0,0.9583616852760316,0.9842463731765748,0.987821400165558,0.0,accept,unanimous_agreement
168922662,8427,"ok, thanks!",1,1,1,0.8985399603843689,0.9816162586212158,0.9544865489006042,1.0,accept,unanimous_agreement
168922950,8427,"now i read again, the situation is, with http persistence connection, a series of requests could be concatenated & received together. currently i choose the easy way to parse: if the packet is malformed (`contentlength == 0` + body), parsing will succeed for the 1st round but will fail at the 2nd round (now the packet is malformed the connection will be closed) or later. given the above, this check is actually skipping over unneeded processing when possible.",0,0,0,0.9798628687858582,0.9874272346496582,0.989559769630432,0.0,accept,unanimous_agreement
168926553,8427,shouldn't we send response before (e.g. bad request)?,0,0,0,0.7607825994491577,0.9853990077972412,0.9410219192504884,0.0,accept,unanimous_agreement
168926644,8427,at least fix indentation.,0,0,0,0.986841082572937,0.9743738770484924,0.9903140664100648,0.0,accept,unanimous_agreement
168926856,8427,"it doesn't make any sense to me. same thing to do like `class obj = class();` instead of `class obj;`. initializing makes sense in the following cases: 1. simple types (like bool, int, double etc.) which may remain uninitialized in other case. 2. non-default initialization of class types. 3. initialization based on some parameters.",0,0,0,0.9483342170715332,0.986746609210968,0.9395682215690612,0.0,accept,unanimous_agreement
168927126,8427,it looks like we're sorry we don't support the malformed requests.,-1,-1,-1,0.9833590388298036,0.9893019795417786,0.9861162304878236,-1.0,accept,unanimous_agreement
168927164,8427,why parseheaderline can't access m_request.headers directly?,0,0,0,0.9800155758857728,0.9647075533866882,0.9879677295684814,0.0,accept,unanimous_agreement
168927205,8427,request line has very simple format. isn't using regular expressions too wasteful to parse it?,0,0,0,0.8060036301612854,0.9472835659980774,0.563327968120575,0.0,accept,unanimous_agreement
168928581,8427,"no, this is `incomplete` case, means the data we have is incomplete, need to wait until more data comes in and then we try to parse again.",0,0,0,0.963801383972168,0.9720679521560668,0.9862209558486938,0.0,accept,unanimous_agreement
168928610,8427,will remove.,0,0,0,0.9759372472763062,0.9741621017456056,0.9920058846473694,0.0,accept,unanimous_agreement
168928795,8427,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
168928820,8427,"i'll remove the ""for simplicity""",0,0,0,0.9871354699134828,0.980647623538971,0.9924212098121644,0.0,accept,unanimous_agreement
168928864,8427,parseheaderline is used 2 times with different parameters.,0,0,0,0.9878231287002563,0.976571559906006,0.9923772811889648,0.0,accept,unanimous_agreement
168929053,8427,"maybe, but i don't want to fight with all kinds of invalid inputs, imo if the input data can match this regex then we take it.",0,0,0,0.9684707522392272,0.8177968263626099,0.9194900393486024,0.0,accept,unanimous_agreement
168940546,8427,but you're closing the socket here!..,-1,-1,0,0.6575434803962708,0.8201400637626648,0.9757080674171448,-1.0,accept,majority_agreement
168940662,8427,it seems like wrong logic in this method.,-1,-1,-1,0.9495872259140016,0.6907325387001038,0.943409025669098,-1.0,accept,unanimous_agreement
168940798,8427,"it closes **only** when the unparsed data accumulates too much (over `bufferlimit`), otherwise it waits for more data comes in.",0,0,0,0.9809066653251648,0.9827430248260498,0.9921446442604064,0.0,accept,unanimous_agreement
168941281,8427,"i added a helper function `qbytearray viewmid(const qbytearray ∈, const int pos, const int len = -1)` which will return a view of `in`.",0,0,0,0.9891470670700072,0.9919695258140564,0.9938616752624512,0.0,accept,unanimous_agreement
168952047,8427,shouldn't it return const qbytearray? otherwise it allows to modify const object (in qbytearray is const).,0,0,0,0.9884539246559144,0.98945552110672,0.9930455088615416,0.0,accept,unanimous_agreement
168952193,8427,"shouldn't we have something like qstring::splitref here, to avoid unnecessary data copying? e.g.: [code block]",0,0,0,0.972661018371582,0.9945175051689148,0.9915868043899536,0.0,accept,unanimous_agreement
168953856,8427,"but why it closes silently, without ""bad request"" response?",0,0,0,0.6975772380828857,0.8847541213035583,0.899188220500946,0.0,accept,unanimous_agreement
168953992,8427,"shouldn't max_request_size be applicable to the entire request, but not just to its content?",0,0,0,0.9834728240966796,0.9919680953025818,0.9910334944725036,0.0,accept,unanimous_agreement
168954291,8427,now i've found something else. when request is too long requestparser returns badrequest even it is still incomplete so this condition never be true.,0,0,0,0.8836719989776611,0.9284444451332092,0.9726256132125854,0.0,accept,unanimous_agreement
168954328,8427,"this condition cannot be true since viewmid returns max contentlength bytes, isn't it?",0,0,0,0.9846961498260498,0.9870325326919556,0.9930657148361206,0.0,accept,unanimous_agreement
168954574,8427,"then it can be defined outside requestparser class. unless i'm wrong, it's independent from this class.",0,0,0,0.9769766926765442,0.9673270583152772,0.9919661283493042,0.0,accept,unanimous_agreement
168955695,8427,"i'll send ""413 payload too large"". it could be true for a malformed request that has a lot of headers (not included in contentlength) that exceeds this limit and the body has yet arrived.",0,0,0,0.9886903166770936,0.940121591091156,0.9881505966186525,0.0,accept,unanimous_agreement
168955763,8427,"yes, fixed.",0,0,0,0.981860339641571,0.953544020652771,0.9571782946586608,0.0,accept,unanimous_agreement
168956055,8427,"i'll rename to `max_content_size`. under normal usage, limiting content size is the main target here.",0,0,0,0.9886040687561036,0.9936060905456544,0.9940590858459472,0.0,accept,unanimous_agreement
168956114,8427,then i'll repeat my other question. why don't you apply the max_request_size to the entire request in requestparser? this would avoid to re-do the check here. i.e. is request with 19 mb content and 19 mb headers valid for you (when max_request_size is 20 mb)?,0,0,0,0.9872817397117616,0.9898062348365784,0.9931719303131104,0.0,accept,unanimous_agreement
168956245,8427,"yes, i'll remove this.",0,0,0,0.984002649784088,0.9851012229919434,0.9922260046005248,0.0,accept,unanimous_agreement
168956670,8427,move to namespace above?,0,0,0,0.9883054494857788,0.9925750494003296,0.9950002431869508,0.0,accept,unanimous_agreement
168957017,8427,"you mean like `if (data.size() > max_request_size) return {parsestatus::badrequest, request(), 0};` ? no, because `data` could have multiple requests concatenated together so by definition that would be wrong. it should be valid, but the header size is unrealistic so if it got dropped is also acceptable imo.",0,0,0,0.9413927793502808,0.9740388989448548,0.985068380832672,0.0,accept,unanimous_agreement
168957091,8427,yes.,0,0,0,0.969875693321228,0.98186594247818,0.9851860404014589,0.0,accept,unanimous_agreement
168957164,8427,"no, because data could have multiple requests concatenated together so by definition that would be wrong. no. i mean `if ((headersize + contentlength) > max_request_size) return {parsestatus::badrequest, request(), 0};`",0,0,0,0.9624255299568176,0.9712015986442566,0.9455391764640808,0.0,accept,unanimous_agreement
168957452,8427,"let me say it in another way, as i said, we should limit the content length directly because we want to control the post payload size. if we limit by (headersize + contentlength), i don't like this because there is no sensible limit on how large the header can be and from recent trends, header gets larger than ever.",-1,0,-1,0.943686306476593,0.5742439031600952,0.776542603969574,-1.0,accept,majority_agreement
168957725,8427,"i'll try. i imagine that would be possible, however my intention was to write clear code first, performance later. that said, i don't wish to optimize to the extreme in this pr, are you interested to do it later?",0,0,0,0.8216217160224915,0.9567092061042786,0.8878143429756165,0.0,accept,unanimous_agreement
168957733,8427,but you still limit it by 10% from content. just append it to max_request_size. why? in my case it can be at most max_request_size. in your case it can be at most 1.1*max_request_size.,0,0,0,0.9885076284408568,0.9562565088272096,0.9936734437942504,0.0,accept,unanimous_agreement
168957826,8427,nicely. just do something that doesn't make you too hard. it'll still be better than nothing. i'll add the rest to my to-do list.,0,1,1,0.6188194751739502,0.9771459102630616,0.9900659322738647,1.0,accept,majority_agreement
168985918,8427,"well... it seems that if we do not introduce a separate limit for the size of headers, the remaining ways are reduced to the same. so do whatever you want. but i still handled it in one place (in requestparser).",0,0,0,0.9816251397132874,0.9707696437835692,0.9820379018783568,0.0,accept,unanimous_agreement
169527772,8427,"i'll keep it for now, at least i want to make sure `m_receiveddata` size won't explode.",0,0,0,0.9842960834503174,0.98781418800354,0.9855610728263856,0.0,accept,unanimous_agreement
169528226,8427,"done. but there is a limitation in qlist: that means i cannot use `qlist ` here, thus it's still `qlist `.",0,0,0,0.9860039353370668,0.9661619067192078,0.986587941646576,0.0,accept,unanimous_agreement
169593717,8427,"you forget to remove ""for simplicity""",0,0,0,0.9777445197105408,0.9834346175193788,0.9804046750068665,0.0,accept,unanimous_agreement
169594222,8427,"you use ""delimiter"" as qbytearray in every cases. it's better to declare it as qbytearray.",0,0,0,0.988018274307251,0.9919809103012084,0.9940588474273682,0.0,accept,unanimous_agreement
169595250,8427,the idea is requestparser is used for different web applications (webui and embedded tracker) that can require different limits on content length.,0,0,0,0.9875812530517578,0.9821012616157532,0.9916316866874696,0.0,accept,unanimous_agreement
169595865,8427,", as i remember, you introduced this statement earlier. where can i get the source of this info?",0,0,0,0.986227571964264,0.9809558987617492,0.9892765283584596,0.0,accept,unanimous_agreement
169633876,8427,i didn't see other application than webui using `requestparser` ... maybe change this in later pr?,0,0,0,0.9760661125183104,0.9795380234718324,0.9914246797561646,0.0,accept,unanimous_agreement
169635241,8427,"oops, fixed.",0,0,-1,0.8505692481994629,0.5780893564224243,0.9114224314689636,0.0,accept,majority_agreement
169636814,8427,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
169700837,8427,"i don't mind. besides, i don't remember how exactly it was designed right now.",-1,-1,0,0.6072777509689331,0.5224260687828064,0.4953478574752807,-1.0,accept,majority_agreement
249533042,10175,why did you change it?,0,0,0,0.9136137962341307,0.9820460677146912,0.992887318134308,0.0,accept,unanimous_agreement
249630563,10175,"in short, i was hitting compile / missing include errors: [code block] reading the error message i think `qhostaddress` should be included here instead of in client code.",0,0,0,0.9380464553833008,0.9438573718070984,0.9845373630523682,0.0,accept,unanimous_agreement
249636350,10175,"isn't that the usual behavior when using the forward declaration? we forward declare something and then we include an appropriate header in place where it is really used (i.e. in ""preferences.cpp"" in this case).",0,0,0,0.9880515336990356,0.9951849579811096,0.9905775785446168,0.0,accept,unanimous_agreement
249638074,10175,"i would move these two to ""utils::net"". they're not server jobs.",0,0,0,0.9812090992927552,0.9878981709480286,0.9899821877479552,0.0,accept,unanimous_agreement
249638445,10175,"yes, it would be reasonable for function declarations, but it is very unintuitive in this case, here is the error point: [a link] a analogy would be qstringlist, they include qsting in their header, so users don't have to: [a link]",0,0,0,0.8876450657844543,0.9292789101600648,0.6513127088546753,0.0,accept,unanimous_agreement
249736449,10175,"okay, then. but it really confused me why we use this ""impersonal"" type (qpair) as subnet. it's good for using in template algorithms, but here i'd rather see some structure with meaningful field names.",0,-1,0,0.79865962266922,0.8271667957305908,0.6624434590339661,0.0,accept,majority_agreement
249751738,10175,"utils::net is for networking related stuff, certificate/key is more of security thing, so i'll prefer moving it to utils::misc.",-1,0,0,0.8010624051094055,0.9852333664894104,0.9849085807800292,0.0,accept,majority_agreement
249767890,10175,"i just thought it wasn't just some unrelated certificates/keys, it was network-related ssl certificates/keys.",0,0,0,0.9754419922828674,0.9838044047355652,0.9726689457893372,0.0,accept,unanimous_agreement
249771942,10175,please move constants above the functions.,0,0,0,0.9846937656402588,0.992262840270996,0.9944774508476256,0.0,accept,unanimous_agreement
249773140,10175,"authentication have nothing to do with networking, or perhaps a new file utils/ssl.cpp?",0,0,0,0.9859089255332948,0.991558074951172,0.9901586174964904,0.0,accept,unanimous_agreement
249774171,10175,using these helpers you parse certificates/keys data twice in this method. i would refactor it.,0,0,0,0.98702734708786,0.9787092208862304,0.9899388551712036,0.0,accept,unanimous_agreement
249781116,10175,i think using boost::optional would be a perfect fit here.,0,0,0,0.6681401133537292,0.9725005626678468,0.7053507566452026,0.0,accept,unanimous_agreement
249833027,10175,"isn't ssl a ""networking related stuff""?",0,0,0,0.9789894223213196,0.9866390228271484,0.986164927482605,0.0,accept,unanimous_agreement
249870233,10175,"i just realize ""utils/ssl.cpp"" is not good either... ssl is a type of socket that utilize certificate so it is networking stuff, however certificate itself isn't tied to socket or any networking stuff: [a link] if you look at qsslkey & qsslcertificate classes you won't find any method that is related to networking. and finding a good place to place it is hard... just let it be utils::net for now although i don't really like it and can't think of a better place.",-1,-1,-1,0.9754977822303772,0.8499314188957214,0.9784597158432008,-1.0,accept,unanimous_agreement
249873262,10175,"by the way, a small offtopic. according to wikipedia ssl is deprecated now in favor of tls. can you say something about?",0,0,0,0.985204577445984,0.9049001336097716,0.9879092574119568,0.0,accept,unanimous_agreement
249873830,10175,don't understand how you want use it...,-1,-1,-1,0.94584321975708,0.8577399849891663,0.8195298910140991,-1.0,accept,unanimous_agreement
249875374,10175,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
249878268,10175,"they are more or less the same thing (excluding the details), you can think they rename ssl to tls for political reasons. [a link]",0,0,0,0.980535089969635,0.9822720289230348,0.9898937344551086,0.0,accept,unanimous_agreement
249879221,10175,"pr updated, this way the cert/key loading code can keep in just one function.",0,0,0,0.988387644290924,0.988575518131256,0.990523397922516,0.0,accept,unanimous_agreement
250049984,10175,i would omit wrapping it in `boost::optional`. i don't like this approach. i would either trow an error or just return empty list.,-1,-1,-1,0.9720906615257264,0.9586941003799438,0.883844792842865,-1.0,accept,unanimous_agreement
250050156,10175,"the same comment as above. either throw an error or return ""empty"" qsslkey.",0,0,0,0.9867197871208192,0.9937376976013184,0.994743585586548,0.0,accept,unanimous_agreement
250050906,10175,"also i strongly dislike function names like ""trydosomething()"". ""try"" is totally meaningless prefix. it is clear that some functions may not be successful. it follows from their meaning (loading, parsing etc. routines), it is not necessary to specify it in addition.",-1,-1,-1,0.9779304265975952,0.964057981967926,0.9671676754951476,-1.0,accept,unanimous_agreement
250060271,10175,"why? compared with your suggestions the only overhead of `optional` is 1 byte bool and the code calling this function is easier to read. this is a bit overkill, we are calling this function directly not through a chain of function calls, i.e. we can/should check its error status directly. then the client code (such as in optionsdialog.cpp) will be forced to know about the type ` ` of `optional ` which is unnecessary for whom only wish to know success/failure of the function call.",0,0,-1,0.9371538162231444,0.9402426481246948,0.501013457775116,0.0,accept,majority_agreement
250060343,10175,will remove the prefix.,0,0,0,0.983451008796692,0.9853639006614684,0.9936528205871582,0.0,accept,unanimous_agreement
250227015,10175,"the traditional way would have a signature like `bool loadsslcertificate(const qbytearray &data, qlist *outputlist)`, without going into the details you can already see how messy its internal is going to be compared to the current code (and also the code using it).",0,0,0,0.9801434874534608,0.9915526509284972,0.9689344167709352,0.0,accept,unanimous_agreement
250285814,10175,"""class template optional is a wrapper for representing 'optional' (or 'nullable') objects who may not (yet) contain a valid value."" both result types already have this feature (can represent its ""nullability"" or ""emptyness"") so wrapping it in `boost::optional` is the real overkill. i don't know how directly calling a function conflicts with being able to throw an exception... in addition, a particular use case should not affect either the implementation of the function or its interface. interface/implementation should reflect only its meaning/job. this is not a valid reason to use such a workaround. in fact, all i offered was to get rid of the double parsing. i didn't think it would drive your mind into such a jungle. the solution is simpler, it will provide readable code. what we need? to load the ssl key: [code block] you can use it where you need its result (e.g. in server code). if you need only check its result without propagating type info to the calling code you just need a simple helper: [code block]",0,-1,0,0.779392659664154,0.6759284138679504,0.954906165599823,0.0,accept,majority_agreement
250467600,10175,"this is a valid point, i agree with it more or less. yes, however the way i see it, `optional` is just a convenient interface that we get to write less code, with only a low price to pay. i'm not going to insist anymore so i'll add the helper function. pr updated.",0,0,1,0.9312482476234436,0.6909951567649841,0.7574931383132935,0.0,accept,majority_agreement
250861108,10175,i would use `std::any_of()` here.,0,0,0,0.9878381490707396,0.992976188659668,0.9930496215820312,0.0,accept,unanimous_agreement
250861343,10175,"you can omit using additional variables here, isn't it? just assign m_key/m_certs directly.",0,0,0,0.9888878464698792,0.9910600781440736,0.9949374198913574,0.0,accept,unanimous_agreement
250861592,10175,this part of condition is redundant.,0,0,0,0.933436155319214,0.8104548454284668,0.9673936367034912,0.0,accept,unanimous_agreement
250863373,10175,every time i make sure that the use of `bool` parameters leads to confusing code in most cases (as mentioned in qt coding guidelines).,0,0,0,0.905984342098236,0.9858092665672302,0.9902998208999634,0.0,accept,unanimous_agreement
250868722,10175,"please make a named constant at top of ""webui.cpp"".",0,0,0,0.9876396059989928,0.9932628273963928,0.9955975413322448,0.0,accept,unanimous_agreement
250869098,10175,shouldn't we track whether the files were changed from last loading?,0,0,0,0.9799777865409852,0.9913716316223145,0.9932270646095276,0.0,accept,unanimous_agreement
250870111,10175,"just moving code to here, maybe in later pr.",0,0,0,0.9826490879058838,0.988899827003479,0.9948471784591676,0.0,accept,unanimous_agreement
250870591,10175,"imo the current way avoids changing the member variable states unless it is ready (also easier to debug/inspection), i'll change if you really insist.",0,0,0,0.9836634397506714,0.97917902469635,0.987350046634674,0.0,accept,unanimous_agreement
250870675,10175,"no, check the empty case of any_of()",0,0,0,0.959950625896454,0.99391770362854,0.993587851524353,0.0,accept,unanimous_agreement
250870965,10175,what for?,0,0,0,0.976090967655182,0.9638357758522034,0.9811010360717772,0.0,accept,unanimous_agreement
250871334,10175,are you sure? this is in a lambda function.,0,0,0,0.987559735774994,0.9918368458747864,0.994105577468872,0.0,accept,unanimous_agreement
250871737,10175,i don't think i can do better here.,-1,-1,-1,0.8964059352874756,0.7142245769500732,0.8249112367630005,-1.0,accept,unanimous_agreement
250878584,10175,"there are at least two ways: 1. (qt) use enum in case when bool is unclear. then the method call will be `webuihttpscertchanged(""/home/user/cert_file"", showerror)`. 2. split it into two functions. one does main job and reports error in same way (e.g. throws exception). second is wrapper that calls the first one and show error message. then you can use first function directly in case when you don't need to report errors.",0,0,0,0.984700083732605,0.9942126870155334,0.9925756454467772,0.0,accept,unanimous_agreement
250879712,10175,why do you need keeping previous key/cert if you stop using them? i don't insist if you really want it.,0,0,0,0.9489763975143432,0.7074283361434937,0.9691182374954224,0.0,accept,unanimous_agreement
250879993,10175,is it a special case here?,0,0,0,0.9812519550323486,0.9874365329742432,0.9860132336616516,0.0,accept,unanimous_agreement
250880624,10175,"does it bother? this number has a ""configuration"" value (aka maxsslfilesize). now i see it used in several files so it should be in some shared place to prevent its independent changing.",0,0,0,0.9799541234970092,0.988365888595581,0.9844363927841188,0.0,accept,unanimous_agreement
250881027,10175,to prevent reloading of the same data. just small optimization. no big deal.,0,1,0,0.8695123195648193,0.4827122390270233,0.9027635455131532,0.0,accept,majority_agreement
250893190,10175,that's it! so `return certs;` just returns empty list as expected. but if you want to distinguish this case explicitly leave it as is.,0,0,0,0.960869073867798,0.9710983633995056,0.8202986717224121,0.0,accept,unanimous_agreement
250893612,10175,i chose the enum way.,0,0,0,0.976654887199402,0.9878156781196594,0.9915838241577148,0.0,accept,unanimous_agreement
250893692,10175,added uilts::net::maxsslfilesize,0,0,0,0.9814311265945436,0.9922007918357848,0.9939938187599182,0.0,accept,unanimous_agreement
250893723,10175,let's keep it simple for now.,0,0,0,0.9701247811317444,0.9740039706230164,0.948401153087616,0.0,accept,unanimous_agreement
250894283,10175,"ok, will simplify.",0,0,0,0.983287751674652,0.9256771206855774,0.990874409675598,0.0,accept,unanimous_agreement
250962966,10175,it should be max_ssl_file_size to be consistent with currently used (de-facto) coding style.,0,0,0,0.9868091344833374,0.9934839606285096,0.9935728311538696,0.0,accept,unanimous_agreement
251186673,10175,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
251379346,10175,move into anonymous namespace.,0,0,0,0.9854812026023864,0.9901868104934692,0.9940600991249084,0.0,accept,unanimous_agreement
251381162,10175,you just ignore error cases. isn't there a better way?,0,0,0,0.9184331893920898,0.8878604173660278,0.9264166355133056,0.0,accept,unanimous_agreement
251400881,10175,"i'm particular bad at error recovery, is there a better way? i hope it is not too excessive.",-1,-1,-1,0.9767234325408936,0.9790509939193726,0.9908547401428224,-1.0,accept,unanimous_agreement
251675607,10175,remove it from the end of the file,0,0,0,0.9767674803733826,0.9873989820480348,0.9943103790283204,0.0,accept,unanimous_agreement
251675917,10175,maybe use the removed `useracceptsupgrade()` function only to inform(not ask) the user of the change? or maybe place a log entry?,0,0,0,0.9845922589302064,0.9951699376106262,0.9929639101028442,0.0,accept,unanimous_agreement
251684446,10175,"i feel that is a bit too much for this simple migrate process. ok, done.",-1,0,0,0.8093287944793701,0.6766654849052429,0.742314875125885,0.0,accept,majority_agreement
251684921,10175,"qbittorrent is designed in such a way that the ability to read/write some folders (i.e. config/data) is its requirement. if there are any problems with this, it cannot function correctly. in any such case, it must interrupt its execution. console/log message should be produced.",0,0,0,0.988433301448822,0.9856583476066588,0.9876991510391236,0.0,accept,unanimous_agreement
251691577,10175,"now i understand your concern. however in this case, it is just simple migration, i don't think failing it is severe enough to stop execution. will add log msg for failing cases.",0,0,0,0.8721837401390076,0.9374932646751404,0.9151614904403688,0.0,accept,unanimous_agreement
251702883,10175,"i see no difference with the other cases. really the case is the same. just ask yourself, what could possibly cause an error here? it is necessary, but it is not enough. try looking at it from a user perspective. qbittorrent will behave in the same way as without any migration code. the user will not be able to access web ui for non-obvious reasons, because the application will work (in addition, access via http will be open, which is completely undesirable from a security point of view). another thing is if the application can not start. this should prompt the user to find out the reason.",0,0,0,0.8887857794761658,0.913818895816803,0.8101751804351807,0.0,accept,unanimous_agreement
251703651,10175,"by the way, this also applies to the current behavior if certificates/keys cannot be loaded. once a user has configured a secure connection, the application should not allow insecure access for any reason, right? , what do you think?",0,0,0,0.9785590171813964,0.9846254587173462,0.9854335784912108,0.0,accept,unanimous_agreement
251723539,10175,"read-only config folder, but i still don't think it should halt program when failed to migrate configs. and there is already log msgs. if it is the ""read-only config folder"" case, then qbt will not be working correctly with/without the upgrade... could you explain the *security* issue? i'm not aware of it. due to webui upgrade code? i must be crazy reading this. apparently there are different viewpoints of how important is the upgrade code... your thoughts?",-1,-1,0,0.9713900685310364,0.9653478264808656,0.6602745056152344,-1.0,accept,majority_agreement
251762369,10175,"for what purpose does the user set up https? does it forbid an access via non-secure http? or am i wrong? really i'm not a web ui user. so i can be wrong about some things. i just express the doubts that arise when viewed from outside. not. but due to invalid execution environment. as i said before qbittorrent is designed assuming the config/data folders is readable/writable. it does not matter when it detects the impossibility of fulfilling this requirement. sorry, nothing personal. it's just that your migration code touched on a fundamental qbittorrent problem that i've been thinking about lately. inability to read/write config/data files means inability to keep running correctly, so qbittorrent must terminate once it faces such problem. well, i've made my point, and you decide whether it matters or not.",-1,-1,-1,0.9693082571029664,0.9850465059280396,0.9661813974380492,-1.0,accept,unanimous_agreement
251802262,10175,"it is not my concern how ""migration code errors"" or ""read-only config folder"" should be handled, it is non-trivial topic itself. but requiring pr authors in a not-so-related topic to fulfill the blueprints in your mind is just not fair and not justified, this behavior not only slows down the development momentum but also wears down the passion to contribute, in the worst case, throwing away invested efforts. if you must insist that every pr should provide a fully complete solution to everything it touches, then at least you should be involved in it, such as filling in the things (with exact code) that are not within the pr topic, just throwing expectations and requirements for others to fulfill is not enough.",-1,-1,-1,0.8440497517585754,0.6152920722961426,0.8451328873634338,-1.0,accept,unanimous_agreement
251823189,10175,"that is why i do not insist on my vision of the global problem. if it doesn't look serious to others, just report this fact and keep ignoring it. , i'm sorry if my thoroughness offends you. that wasn't my goal.",-1,-1,-1,0.9814173579216005,0.9932476282119752,0.9772327542304992,-1.0,accept,unanimous_agreement
252539491,10175,"it's alright now, lets just move on.",0,0,1,0.8730650544166565,0.9111169576644896,0.612652599811554,0.0,accept,majority_agreement
266227691,10384,you forgot to add to cmake's list.,0,0,0,0.971059024333954,0.968941569328308,0.9538788199424744,0.0,accept,unanimous_agreement
266227747,10384,you can assign the default `nullptr` to these 2 right here.,0,0,0,0.9897392392158508,0.9932669401168824,0.995091199874878,0.0,accept,unanimous_agreement
266227918,10384,i would write the signatures like this instead: [code block],0,0,0,0.9854307174682616,0.9930574893951416,0.9940906167030334,0.0,accept,unanimous_agreement
266227975,10384,(i don't feel strongly just want to point out) that log::msgtypes will fit into an `int` so you can treat it as a normal variable.,0,0,0,0.646996259689331,0.9493030905723572,0.957639753818512,0.0,accept,unanimous_agreement
266228018,10384,to keep up with latest trend :\\ `const int sourcerow` `const qmodelindex index ` `const log::msgtype type `,0,0,-1,0.9041708707809448,0.9875198602676392,0.9865593910217284,0.0,accept,majority_agreement
266228135,10384,"i think this is not a a very friendly constructor, just take the usual const reference or use move semantics `&&` & `std::move()`.",0,0,0,0.95209002494812,0.9722349047660828,0.7527775168418884,0.0,accept,unanimous_agreement
266228151,10384,`const int role`,0,0,0,0.9850067496299744,0.9889841675758362,0.9944605827331544,0.0,accept,unanimous_agreement
266228303,10384,"2 things here: 1. you can use `qt::blue` 2. [a link] using `qt::green` and qcolor::setnamedcolor(""green"") could result in different colors, you sure about this change?",0,0,0,0.9736897349357604,0.9945911765098572,0.987733006477356,0.0,accept,unanimous_agreement
266228367,10384,"nitpick, no need to chain it with `else if`: [code block]",0,0,0,0.9886621832847596,0.9871780872344972,0.9949340224266052,0.0,accept,unanimous_agreement
266228471,10384,`void logview::copyselection() const`?,0,0,0,0.9845389723777772,0.9923433661460876,0.9949291944503784,0.0,accept,unanimous_agreement
266228501,10384,`const qaction *res`,0,0,0,0.9833774566650392,0.9910483956336976,0.9933783411979676,0.0,accept,unanimous_agreement
266228530,10384,seems this is redundant since you already set the parent pointer to `this`.,0,0,0,0.9526148438453674,0.986578643321991,0.9869884252548218,0.0,accept,unanimous_agreement
266228579,10384,why not add `this` as the second parameter?,0,0,0,0.975860834121704,0.9931859970092772,0.9912493228912354,0.0,accept,unanimous_agreement
266230104,10384,"guys, think! why all this trouble (`swap()`, `move()`, ...)? why not just initialize `m_items` from const ref parameter?",0,-1,0,0.6601024866104126,0.9004102349281311,0.7529308199882507,0.0,accept,majority_agreement
266230158,10384,add `q_disable_copy`.,0,0,0,0.9852457642555236,0.9926806092262268,0.9943960905075072,0.0,accept,unanimous_agreement
266230272,10384,i would use struct instead of pair.,0,0,0,0.9841991662979126,0.9896414875984192,0.9886550903320312,0.0,accept,unanimous_agreement
266230373,10384,to all qobject subclasses.,0,0,0,0.987275004386902,0.9914393424987792,0.9937986731529236,0.0,accept,unanimous_agreement
266233596,10384,won't this induce a copy?,0,0,0,0.9764899015426636,0.9788873195648192,0.993221640586853,0.0,accept,unanimous_agreement
266233897,10384,did you forget qt basics? consider [a link] again.,0,0,0,0.9870685338974,0.9937443137168884,0.9870540499687196,0.0,accept,unanimous_agreement
266234143,10384,"in old code these colors were written as named colors aka `qcolor(""blue"")`, which used the svg standard definition to convert them. in new code, i use the rgb constructor using the same values as the svg standard. plus, imo, it is faster code to use this constructor.",0,0,0,0.9780028462409972,0.9861412048339844,0.980533003807068,0.0,accept,unanimous_agreement
266241536,10384,"imo, i like it with the `else if` because logically they belong together.",1,0,0,0.9285256266593932,0.5073396563529968,0.7229224443435669,0.0,accept,majority_agreement
266241622,10384,"the new struct would need to be seen by 3-4 different classes. i prefer qpair, since it is easier to use in this case. i don't need to investigate in which header to declare the new struct to be seen by all other classes.",0,0,0,0.976291298866272,0.9872095584869384,0.990114450454712,0.0,accept,unanimous_agreement
266241839,10384,then do it without `return` (just assing local var and then return it at the end).,0,0,0,0.9870655536651612,0.9925605058670044,0.9941773414611816,0.0,accept,unanimous_agreement
266242132,10384,"you can produce its own header. that's why it's bad! using such abstract things as a pair in interfaces will lead to poorly readable (and maintainable) code. isn't it? pair is good in some general algorithms (algorithm templates). although, you can just brush me off here...",-1,-1,-1,0.9724536538124084,0.9885795712471008,0.9659249186515808,-1.0,accept,unanimous_agreement
266242360,10384,"essentially it is **logmessage** class/struct (which consists of the message itself and its type). you can also use it in some other places, e.g. in `void logmodel::appendline(const qstring &line, const log::msgtype &type);`",0,0,0,0.9874797463417052,0.993813157081604,0.9928945899009703,0.0,accept,unanimous_agreement
266242526,10384,"to be consistent with qt naming scheme it should be **logwidget**. **view** is a widget that display content of model in a specific way (e.g. qtreeview, qlistview etc.). when some view is bound with model then it has widget suffix (e.g. qlistwidget, qtreewidget).",0,0,0,0.9858011603355408,0.9952213168144226,0.9933972358703612,0.0,accept,unanimous_agreement
266242936,10384,ok. i understand. will be renamed.,0,0,0,0.9728264808654784,0.9638805389404296,0.9821881651878356,0.0,accept,unanimous_agreement
266247043,10384,"should i keep nagging about `const`? honest question. i would add them myself, but i find it a bit disturbing to keep mentioning it...",-1,-1,-1,0.9761556386947632,0.980640172958374,0.9904000163078308,-1.0,accept,unanimous_agreement
266247104,10384,`logger->getmessages()` returns a variable not a reference.,0,0,0,0.9857577085494996,0.9910829067230223,0.9938115477561952,0.0,accept,unanimous_agreement
266247331,10384,"now it is an usual variable, you should strip out the `const` -> `log::msgtypes types = log::all` and below too.",0,0,0,0.9870684146881104,0.9950140118598938,0.9947863817214966,0.0,accept,unanimous_agreement
266247393,10384,you missed here: `log::msgtype type = log::normal`,0,0,0,0.9652169942855836,0.9928604960441588,0.9946520328521729,0.0,accept,unanimous_agreement
266247430,10384,and here `log::msgtype type = log::normal`,0,0,0,0.9762566089630128,0.9924141764640808,0.995100438594818,0.0,accept,unanimous_agreement
266247702,10384,"ok, i'm just think that someone would likely to replace `qcolor(0, 0, 255)` with `qt::blue` and call it a cleanup (while it is not), to make it more explicit, you could define `const qrgb cssblue = 0x0000ff;` and use `qcolor(cssblue);` here.",0,0,0,0.9855660796165466,0.9903802871704102,0.9915097951889038,0.0,accept,unanimous_agreement
266247823,10384,"i would even use `switch (role)` here, just sharing my thought not insisting.",0,0,0,0.9793749451637268,0.9673251509666444,0.9893518090248108,0.0,accept,unanimous_agreement
266249469,10384,"imo, too much work.",-1,-1,-1,0.9453407526016236,0.942891240119934,0.9660152792930604,-1.0,accept,unanimous_agreement
266249501,10384,which is what i ended up doing locally before looking again here.,0,0,0,0.9720479846000672,0.9164997935295104,0.9908521771430968,0.0,accept,unanimous_agreement
266251263,10384,i have seen many cases in our current code that local variables are const reference initialized. did we change views on that practice? since this involves an implicitly shared container it doesn't matter much in this case.,0,0,0,0.9717499613761902,0.95720773935318,0.987152636051178,0.0,accept,unanimous_agreement
266251326,10384,"honest question: since i am not an expert, why `const` isn't favored in this case?",0,0,0,0.5893179178237915,0.6989004611968994,0.957217574119568,0.0,accept,unanimous_agreement
266251961,10384,"sorry. now i think i got all of them. if not, don't hesitate to leave a comment.",-1,-1,-1,0.9883143901824952,0.9934841990470886,0.9892035126686096,-1.0,accept,unanimous_agreement
266251993,10384,irrelevant in new code,0,0,0,0.7360728979110718,0.9696266055107116,0.931425929069519,0.0,accept,unanimous_agreement
266252001,10384,irrelevant in new code,0,0,0,0.7360728979110718,0.9696266055107116,0.931425929069519,0.0,accept,unanimous_agreement
266252338,10384,i introduced a struct.,0,0,0,0.9839552044868468,0.9753035306930542,0.9867074489593506,0.0,accept,unanimous_agreement
266253542,10384,": you could add a line-note clarifying that you deliberately hard-coded the colors for performance reasons. that should at least discourage users from carelessly ""simplifying"" the color definitions.",0,0,0,0.923559308052063,0.9821001887321472,0.9836227297782898,0.0,accept,unanimous_agreement
266401453,10384,"don't recall anything. afaik we only do ""const reference initialize"" when the function returns a const reference, for anything else a normal variable.",0,0,0,0.9836703538894652,0.987528681755066,0.99216228723526,0.0,accept,unanimous_agreement
266402504,10384,"the gist is, the header file is like a contract for the clients using the code and declaring `const` for a local variable means nothing to the clients, it only has meaning in function definition (in .cpp file).",0,0,0,0.9869136214256288,0.9866364598274232,0.9860413670539856,0.0,accept,unanimous_agreement
266471845,10384,i left a comment,0,0,0,0.9833316802978516,0.7836785316467285,0.98492032289505,0.0,accept,unanimous_agreement
266472228,10384,"i removed it from the header file, but left it in the cpp. is that ok? ps: i did in a couple other places too.",0,0,0,0.9767799973487854,0.9891663193702698,0.9922043085098268,0.0,accept,unanimous_agreement
266742655,10384,that is correct.,0,0,0,0.976578950881958,0.986262023448944,0.9920891523361206,0.0,accept,unanimous_agreement
266742807,10384,`const int role = qt::displayrole` -> `int role = qt::displayrole`,0,0,0,0.98385751247406,0.9921007752418518,0.9896048307418824,0.0,accept,unanimous_agreement
266742936,10384,`const int sourcerow` -> `int sourcerow`,0,0,0,0.9866952896118164,0.9905920624732972,0.989042103290558,0.0,accept,unanimous_agreement
268506810,10384,redundant blank line.,0,0,0,0.8875429630279541,0.6260964274406433,0.8117470145225525,0.0,accept,unanimous_agreement
272827723,10384,"is it safe to return a const reference in this context? since both the logger and the models run on the same thread we don't run the risk of the circular buffer deleting the returned item, correct?",0,0,0,0.9859508872032166,0.9886012673377992,0.994066834449768,0.0,accept,unanimous_agreement
273339219,10384,"you can write the shorthand `{-1, -1};` and below.",0,0,0,0.9867515563964844,0.9935681223869324,0.994222104549408,0.0,accept,unanimous_agreement
273339728,10384,`m_itemrange`?,0,0,0,0.9876708984375,0.9929896593093872,0.994080126285553,0.0,accept,unanimous_agreement
273340462,10384,"`at()` method will do boundary checks and throw exception if not valid, since you already validates the index why not use `operator[]`?",0,0,0,0.9891645312309264,0.9944894313812256,0.9938532114028932,0.0,accept,unanimous_agreement
273340653,10384,i would add parentheses here.,0,0,0,0.9827587008476256,0.9865198135375975,0.9920702576637268,0.0,accept,unanimous_agreement
273341001,10384,`++m_items.first` and below,0,0,0,0.978403091430664,0.9942282438278198,0.993713915348053,0.0,accept,unanimous_agreement
273341578,10384,"`m_items = {-1, -1};` and below.",0,0,0,0.9861751794815063,0.9928597211837769,0.992064654827118,0.0,accept,unanimous_agreement
273342301,10384,no need for this `else`,0,0,0,0.9844604134559632,0.9838839173316956,0.9879943132400512,0.0,accept,unanimous_agreement
273343451,10384,"i would use `std::max` and combine into: `m_items = {std::max(m_items.first, msg.id), msg.id};`",0,0,0,0.9864766597747804,0.9937573671340942,0.9946916699409484,0.0,accept,unanimous_agreement
273350230,10384,parentheses: `(count - 1)`,0,0,0,0.9829829931259156,0.9916400909423828,0.9927639365196228,0.0,accept,unanimous_agreement
273352903,10384,"can't resist, i would write it as: [code block]",0,0,0,0.979574978351593,0.9431648254394532,0.7598365545272827,0.0,accept,unanimous_agreement
273358023,10384,"imo it is really hard to catch up with its logic, maybe it is better to have 2 functions: 1. `std::pair logger::getmessagesrange() const`: that simply return {start, end} id ranges of `m_messages`. 2. helper function `std::pair getvalidmessagesrange(const int lastknownid) const` this could be at logfiltermodel.cpp (outside of logger.cpp), that computes valid ranges by taking `logger::getmessagesrange()` and `lastknownid` into consideration. same applies to the peers part.",0,0,0,0.8892518281936646,0.9164485335350036,0.9331758618354796,0.0,accept,unanimous_agreement
273839724,10384,it's incorrect thinking at all. you shouldn't rely on some particular use case(s) when you implement any interface.,-1,-1,0,0.5033813118934631,0.8811631798744202,0.721716582775116,-1.0,accept,majority_agreement
274520612,10384,there is error here. you must not return reference to temporary!,0,-1,-1,0.585319459438324,0.5504810810089111,0.6481452584266663,-1.0,accept,majority_agreement
275168432,10384,then return a temporary instead? honestly i can't think of a way around it. i mean: i don't know how to allow external access to the saved items without copying them and without locking the circular buffer.,-1,-1,0,0.853602945804596,0.8247016072273254,0.8847296237945557,-1.0,accept,majority_agreement
275168490,10384,you're correct. i initially wrote the function to return a temporary.,0,0,0,0.9860657453536988,0.8745995759963989,0.991111695766449,0.0,accept,unanimous_agreement
275168565,10384,this returns the valid messages from a known last id. (or none id if you want all the range). it is basically the counterpart of `getmessages()`,0,0,0,0.9885085225105286,0.991142511367798,0.9947391152381896,0.0,accept,unanimous_agreement
275168743,10384,"that's not the same. a negative value is an invalid id and indicates an uninitialized log buffer. after the first message, `first` should be less than `second`.",0,0,0,0.937831461429596,0.981497049331665,0.9909934401512146,0.0,accept,unanimous_agreement
275168800,10384,"imo, it is more clear now.",0,0,0,0.9052342176437378,0.9785404205322266,0.9778018593788148,0.0,accept,unanimous_agreement
275626302,10384,there is no thread-safe way to do it. so if you want logger to be thread-safe you can't return references to internal data. you should lock it every time you read/write it. i.e. you still should lock it here.,0,0,0,0.9801453351974488,0.982231080532074,0.9886653423309326,0.0,accept,unanimous_agreement
276004388,10384,"i know all that. but since you advised on not actually duplicating the log messages in a vector/list in the model, what's the alternative here? let this function return a `log::msg` instead? this function is used by the model multiple times in row when the model responds to the various `qt::roles` via `model::data()`. even when you only hover the cursor up and down on the view's items. is it a good idea to continually create such short-lived small objects? (i mean the `log::msg` returned by the function).",0,0,0,0.961292803287506,0.9816779494285583,0.9819242358207704,0.0,accept,unanimous_agreement
276102390,10384,"it isn't the logger problem. it should have valid interface and implementation according to its own subject domain. it there is a performance problem with logmodel-to-logger data exchange due to its thread-safity it should be solved in logmodel. although i remind you once again that you should measure the extent of its impact on performance, because it may be insignificant for gui. otherwise the caching data in the logmodel is probably required to solve it.",0,0,0,0.964562714099884,0.9874041080474854,0.983755350112915,0.0,accept,unanimous_agreement
393073639,10384,"consider the definition of log::msg [code block] it contains ints with aggregate size not much more than the size of pointer and qstring which are internally reference counted, so is this really an issue?",0,0,0,0.9760712385177612,0.9930723309516908,0.9897475242614746,0.0,accept,unanimous_agreement
393088866,10384,i meant by performance implication due to which we're trying to return a reference,0,0,0,0.9795418977737428,0.9789156317710876,0.9821932315826416,0.0,accept,unanimous_agreement
1143006946,18735,"it doesn't look expected to me. in addition, i would refrain from unrelated changes that may slow down the review of main pr changes.",0,0,0,0.9614585041999816,0.7351892590522766,0.979693591594696,0.0,accept,unanimous_agreement
1143008263,18735,please be consistent with existing names: [code block],0,0,0,0.987195074558258,0.9895256757736206,0.9945822358131408,0.0,accept,unanimous_agreement
1143041750,18735,"we don't exit app when web ui port is changed via command line. is there any strong reason to behave differently in this case? if not, then i would also move username/password processing to application class next to the webui port processing.",0,0,0,0.9828975796699524,0.992572546005249,0.9931683540344238,0.0,accept,unanimous_agreement
1143042479,18735,i would declare constants for default username/password.,0,0,0,0.9882936477661132,0.9879754185676576,0.994117021560669,0.0,accept,unanimous_agreement
1145269721,18735,i would just use qbytearray for the type if possible. [code block],0,0,0,0.9889560341835022,0.992262363433838,0.9933294057846068,0.0,accept,unanimous_agreement
1145511804,18735,"fyi, `qbytearray` can't be `constexpr`.",0,0,0,0.9871777296066284,0.9701846241950988,0.9884077906608582,0.0,accept,unanimous_agreement
1145662797,18735,i don't think `constexpr` is important in this case.,0,0,0,0.9566295742988586,0.9004374742507935,0.9755696058273317,0.0,accept,unanimous_agreement
1145695583,18735,no need to obsess with constexpr when it is already compile-time: [a link],0,0,0,0.9854109287261964,0.973387897014618,0.9915325045585632,0.0,accept,unanimous_agreement
32374258,2757,this hooks into classes you're more familiar with. do you have any objections with this commit?,0,0,0,0.979884386062622,0.9408473372459412,0.9906689524650574,0.0,accept,unanimous_agreement
32374329,2757,move all implementation code into .cpp,0,0,0,0.9885035157203674,0.9928703904151917,0.9937157034873962,0.0,accept,unanimous_agreement
32374337,2757,move them into the .cpp,0,0,0,0.9888573288917542,0.992923140525818,0.993779718875885,0.0,accept,unanimous_agreement
32374339,2757,same here,0,0,0,0.982987642288208,0.9628711938858032,0.99204421043396,0.0,accept,unanimous_agreement
32374343,2757,member variables should be named `m_xxx` eg `m_xdata` or `m_properties`,0,0,0,0.9862813353538512,0.9946725964546204,0.995430827140808,0.0,accept,unanimous_agreement
32374349,2757,no underscores. `m_maxcapacity` (for all variables),0,0,0,0.9879097938537598,0.989388108253479,0.9932153224945068,0.0,accept,unanimous_agreement
32374366,2757,if possible forward declare the classes instead.,0,0,0,0.9885249733924866,0.9909749627113342,0.992771565914154,0.0,accept,unanimous_agreement
32374370,2757,if possible forward declare as much as possible.,0,0,0,0.9881247282028198,0.9820745587348938,0.9823335409164428,0.0,accept,unanimous_agreement
32374374,2757,`onperiodchange(int perioed)` etc,0,0,0,0.986580729484558,0.9937835931777954,0.9949813485145568,0.0,accept,unanimous_agreement
32374393,2757,i think all these settings (`m_plot->blah blah`) could be moved inside the constructor of `qspeedplotview`,0,0,0,0.9835482239723206,0.9928298592567444,0.9863250851631165,0.0,accept,unanimous_agreement
32374403,2757,this way you might remove setgraphname/setgraphpen if they're not needed.,0,0,0,0.9880084991455078,0.9923354983329772,0.993413507938385,0.0,accept,unanimous_agreement
32374412,2757,to avoid possible confusion with the qt classes rename the class to `speedplotview`,0,0,0,0.9854279160499572,0.9940675497055054,0.9946591258049012,0.0,accept,unanimous_agreement
32374424,2757,"add another entry at the end named ""nb_columns"". read my other comment on why.",0,0,0,0.9825557470321656,0.9873642325401306,0.9954238533973694,0.0,accept,unanimous_agreement
32374443,2757,"after you append nb_columns then you change this to `for (int id = up; id < nb_columns; ++id)`. if in the future another id is added, it will not be needed to come here and change the code.",0,0,0,0.9887232780456544,0.9923882484436036,0.9946367144584656,0.0,accept,unanimous_agreement
32380233,2757,move open brace to next line. see [a link].,0,0,0,0.9869858622550964,0.9929510354995728,0.9955177903175354,0.0,accept,unanimous_agreement
32380438,2757,agree. setgraphxxx() make sense only if these properties changing at run time also makes sense.,0,0,0,0.9833990335464478,0.992440938949585,0.9906327724456788,0.0,accept,unanimous_agreement
32380457,2757,all qobject children will be deleted automatically (in qobject destructor).,0,0,0,0.9870380163192748,0.9924240112304688,0.9945310950279236,0.0,accept,unanimous_agreement
32380958,2757,get rid of that signal. the signals belong to the external interface of the class. call graphupdate() directly from this thread and via qmetaobject::invokemethod from other.,0,0,0,0.9881784319877625,0.9945470094680786,0.9931922554969788,0.0,accept,unanimous_agreement
32382615,2757,private,0,0,0,0.9634302258491516,0.9257339835166932,0.923453152179718,0.0,accept,unanimous_agreement
32382635,2757,private slots,0,0,0,0.9843136072158812,0.9682527780532836,0.9929043650627136,0.0,accept,unanimous_agreement
32893925,2757,"i don't understand what you mean, can you advise me?",-1,-1,-1,0.6869277954101562,0.83864825963974,0.6595017313957214,-1.0,accept,unanimous_agreement
32894026,2757,but i wouldn't to split declaration of graphs to different files.,0,0,0,0.9815911054611206,0.8018919229507446,0.9769479036331176,0.0,accept,unanimous_agreement
32895566,2757,"you may want to google for ""c++ forward declaration"". first let's assume you move all the implementation code below into a .cpp file and leave this header clean. instead of doing here `#include ` you can do this simple thing: `class qpen;` <-- this is the forward declaration then in the .cpp you must do `#include ` note: this isn't possible for all headers. basic rules can be found [a link] from those 3 includes i think qpen, qqueue and qmap can be forward declared. if you get weird compilation errors. about this comment and i'll help you.",0,-1,0,0.7287645936012268,0.8354911208152771,0.9493024349212646,0.0,accept,majority_agreement
32895629,2757,here you set a lot of properties on the `m_plot` object which is of type `qspeedplotview`. and most of these setgraphxxx() are only called here and only once. so it makes a lot of sense to setup these properties when constructing the `m_plot` object instead. this means you should initialize the various stuff inside `qspeedplotview::qspeedplotview() directly` what do you say?,0,0,0,0.9665659070014954,0.9921581745147704,0.9892336130142212,0.0,accept,unanimous_agreement
32895645,2757,"ok, i understand what you mean, i use forward declaration before, but only for fix circular dependency errors.",0,0,0,0.9844267964363098,0.9625040888786316,0.9788005948066713,0.0,accept,unanimous_agreement
32895706,2757,"just so you know another reason it is useful: for a project with many .h/.cpp files, forward declaration reduces the time needed for compilation. the compiler doesn't need to open the included headers for every place your header gets included in your code. headers are small files but filesystem **access** is tremendously slow compared to the speed our cpus can compile stuff.",0,0,0,0.8550271987915039,0.9097059965133668,0.970032036304474,0.0,accept,unanimous_agreement
32895746,2757,[code block] only for qpen without errors. i think that because qmap and qqueue are templates.,0,0,0,0.9868870377540588,0.9909083247184752,0.9928406476974488,0.0,accept,unanimous_agreement
32895803,2757,try doing the declaration this way: [code block],0,0,0,0.9842237830162048,0.9925172328948976,0.9941173791885376,0.0,accept,unanimous_agreement
32895821,2757,no i am wrong. you use those 2 for declaring member variables. those cannot be forward declared.,0,0,0,0.5767412185668945,0.6142953634262085,0.979173183441162,0.0,accept,unanimous_agreement
32895837,2757,move this struct declaration into the .cpp file. and just do here `struct graphproperties`. i hope this forward declaration works.,0,1,0,0.6119111776351929,0.5234705805778503,0.9196560978889464,0.0,accept,majority_agreement
32371912,3150,"i suppose this forward declaration doesn't work and you needed to include peerinfo,h, correct? if yes, remove this then. otherwise remove the include.",0,0,0,0.9800018668174744,0.9885259866714478,0.9937204122543336,0.0,accept,unanimous_agreement
32371948,3150,you don't need to do this. it is called automatically.,0,0,0,0.9779611825942992,0.9868195056915284,0.9864923357963562,0.0,accept,unanimous_agreement
32371971,3150,logger message instead. normal type?,0,0,0,0.9869151711463928,0.9905035495758056,0.9836392998695374,0.0,accept,unanimous_agreement
32371973,3150,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
32371983,3150,forget this. i saw that you use a qmessagebox to inform the user.,-1,0,-1,0.5610160827636719,0.9729474782943726,0.6260154247283936,-1.0,accept,majority_agreement
32371996,3150,`m_peerslist` or `m_peers`,0,0,0,0.9859282970428468,0.992701292037964,0.9936803579330444,0.0,accept,unanimous_agreement
32372039,3150,don't you need to first extract the ip/port and then remove the brackets(`[]`) ? if the user hasn't specified a port for the ipv6 address you'll extract the last bit as a port...,0,0,0,0.9849355220794678,0.9934881925582886,0.9954522252082824,0.0,accept,unanimous_agreement
32372041,3150,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
32372051,3150,indentation,0,0,0,0.982236921787262,0.822169840335846,0.9911677837371826,0.0,accept,unanimous_agreement
32372056,3150,indentation for these 3 lines too.,0,0,0,0.9873908162117004,0.9879070520401,0.9934545755386353,0.0,accept,unanimous_agreement
32372115,3150,"reset the translatable option in qt creator. it will delete the above lines. since the textedit is empty, the translators will not have anything to translate anyway.",0,0,0,0.9876113533973694,0.9922353625297546,0.993736982345581,0.0,accept,unanimous_agreement
32372126,3150,"imo, it should have the same text as the label.",0,0,0,0.9841095805168152,0.9898260831832886,0.9860986471176147,0.0,accept,unanimous_agreement
32372790,3150,header must be moved to peersadditiondlg.cpp,0,0,0,0.988906979560852,0.9940793514251708,0.995163917541504,0.0,accept,unanimous_agreement
32372799,3150,"i mean `#include ""core/bittorrent/peerinfo.h""`.",0,0,0,0.9840881824493408,0.993645191192627,0.9934868812561036,0.0,accept,unanimous_agreement
32372828,3150,unless qlist<> doesn't work with forward declaration.,0,0,0,0.9596424698829652,0.9762349128723145,0.991775393486023,0.0,accept,unanimous_agreement
32372855,3150,this method has been implemented too complicated.,-1,0,0,0.5607169270515442,0.5863713026046753,0.8375006914138794,0.0,accept,majority_agreement
32372872,3150,i don't mind but i need a clear answer.,0,-1,0,0.9145798683166504,0.4951693713665008,0.8861069679260254,0.0,accept,majority_agreement
32372894,3150,"sorry for being ambiguous. yes, please make it have the same text/example as the label.",-1,-1,-1,0.9881423115730286,0.9918980598449708,0.9918748736381532,-1.0,accept,unanimous_agreement
32373002,3150,it is called automatically only if it's in the .ui file.,0,0,0,0.9871342778205872,0.9926422238349916,0.993921995162964,0.0,accept,unanimous_agreement
32373017,3150,you're correct. then you don't need to change this.,0,0,0,0.9783651828765868,0.8619770407676697,0.977130889892578,0.0,accept,unanimous_agreement
32373043,3150,i can't do that. [code block],0,0,0,0.76788729429245,0.8579113483428955,0.8386597037315369,0.0,accept,unanimous_agreement
32373057,3150,i'm finishing this. what i should do?,0,-1,-1,0.70833820104599,0.5059457421302795,0.6683387160301208,-1.0,accept,majority_agreement
32373072,3150,i'm finishing this. what i should do?,0,-1,-1,0.70833820104599,0.5059457421302795,0.6683387160301208,-1.0,accept,majority_agreement
32373096,3150,didn't i answer you? `format: ipv4:port / [ipv6]:port`,0,0,0,0.984214723110199,0.9923325777053832,0.9932996034622192,0.0,accept,unanimous_agreement
32373153,3150,"typically, such connections are created in the ui. why this is here?",0,0,0,0.9824026823043824,0.9877374172210692,0.9911404252052308,0.0,accept,unanimous_agreement
32373167,3150,i suspect he just copied the code from `peeraddition.cpp`,0,0,0,0.9840377569198608,0.9935684204101562,0.9867051243782043,0.0,accept,unanimous_agreement
32373174,3150,because i copied it from the addtrackers window (with the old code not yours) and it was a mess... i'm doing in ui now.,-1,-1,-1,0.9809476137161256,0.94177508354187,0.9523589611053468,-1.0,accept,unanimous_agreement
32373178,3150,i can try with regex. any suggestion?,0,0,0,0.9780378341674804,0.9882607460021972,0.9918676018714904,0.0,accept,unanimous_agreement
32373263,3150,"i didn't mean that! at least, peer parsing should be done in a separate function.",0,0,-1,0.5029308795928955,0.7298241853713989,0.9378071427345276,0.0,accept,majority_agreement
32374175,3150,the opening bracket must be in the beginning.,0,0,0,0.979967474937439,0.988140344619751,0.9925429821014404,0.0,accept,unanimous_agreement
32374198,3150,"what happens if user enters just and ipv6 ip without a port? eg `2001:0db8:85a3:0000:0000:8a2e:0370:7334` i think it is better to check if there is a dot, which means ipv4. if not treat the ip as ipv6 (and try to detect brackets)",0,0,0,0.9862030744552612,0.989823043346405,0.99234277009964,0.0,accept,unanimous_agreement
32374214,3150,"not according to this, only in the else: [a link]",0,0,0,0.97866553068161,0.9898227453231812,0.9944422841072084,0.0,accept,unanimous_agreement
32374236,3150,i made the port always compulsory (as it's in the format label) because there isn't a default port. each client has his own default port and most of them chose the port randomly.,0,0,0,0.98441481590271,0.9878833889961244,0.9893022179603576,0.0,accept,unanimous_agreement
32374297,3150,i think you misunderstood me. an ipv6 ip with port will always begin with an opening bracket(`[`). so instead test if the first character is an opening bracket in the string.,0,0,0,0.8262142539024353,0.5292895436286926,0.9544038772583008,0.0,accept,unanimous_agreement
32374322,3150,done. about the other comment?,0,0,0,0.9808173179626464,0.9884757995605468,0.9913778305053712,0.0,accept,unanimous_agreement
32374481,3150,don't perform the split twice. just save in a temp var.,0,0,0,0.9641714692115784,0.9721301198005676,0.9933397173881532,0.0,accept,unanimous_agreement
32374486,3150,same here,0,0,0,0.982987642288208,0.9628711938858032,0.99204421043396,0.0,accept,unanimous_agreement
32376787,3150,unneeded variable.,0,0,0,0.9478458166122437,0.9299520254135132,0.9745022654533386,0.0,accept,unanimous_agreement
32376801,3150,get rid of that.,0,0,0,0.875664472579956,0.9624907970428468,0.8660299181938171,0.0,accept,unanimous_agreement
32394535,3150,fix braces in if-else block.,0,0,0,0.9861987829208374,0.9892036318778992,0.9926934242248536,0.0,accept,unanimous_agreement
32394690,3150,explicit test is needed only if empty list is special case.,0,0,0,0.9863170981407166,0.9927722811698914,0.9913440942764282,0.0,accept,unanimous_agreement
32394858,3150,why tostring()?,0,0,0,0.922212779521942,0.9811455607414246,0.988570511341095,0.0,accept,unanimous_agreement
32395135,3150,it's for display the msgbox only if not empty. [code block],0,0,0,0.988851010799408,0.9930391907691956,0.9957606196403505,0.0,accept,unanimous_agreement
32395259,3150,"ok. but then there is one problem. it may happen that the list is not empty, but no peer was added.",0,0,0,0.9769574403762816,0.8777638077735901,0.9665676951408386,0.0,accept,unanimous_agreement
32395441,3150,"true but i think it never goin to happen because the ip/port are valid at this point. i don't know what are the reasons to not be accepted, maybe in the ip filter list? i tried with a lot of weird things and never fails. any suggestion?",-1,-1,-1,0.9237083792686462,0.8888095021247864,0.6160242557525635,-1.0,accept,unanimous_agreement
32396318,3150,1. leave it as is. 2. don't show message box at all. 3. to track whether peers were really added.,0,0,0,0.97536700963974,0.9935830235481262,0.9918676018714904,0.0,accept,unanimous_agreement
32886402,3150,"where does `15` come from? according to [a link] ipv6 addresses can be shortened so eg `::1` is a valid ipv6 address. i propose searching for the presence of dots instead, which will denote ipv4.",0,0,0,0.9879312515258788,0.9940810799598694,0.9944820404052734,0.0,accept,unanimous_agreement
32886485,3150,"this could ugly if the user has pasted a bunch of bad ips. i propose here you just leave a logger message of type warning. also setting a flag eg `bool invalidpeers`. then when outside the loop check the flag a post this messagebox saying ""some peers couldn't be added. check the log for details.""",-1,-1,-1,0.7796921730041504,0.8337075114250183,0.5878131985664368,-1.0,accept,unanimous_agreement
32895100,3150,this should be `else if` to avoid both messages to appear for the same input.,0,0,0,0.982550084590912,0.9910336136817932,0.9922900795936584,0.0,accept,unanimous_agreement
403821902,12434,you misuse log::critical. it should only be used when qbt cannot continue to operate normally.,0,0,0,0.5036255121231079,0.9376679062843324,0.712431013584137,0.0,accept,unanimous_agreement
403822556,12434,i don't see why you need to use raw string literal.,0,0,0,0.933832585811615,0.8903196454048157,0.9538400173187256,0.0,accept,unanimous_agreement
403822877,12434,perhaps we should allow exception messages to be translated.,0,0,0,0.9853184223175048,0.9926445484161376,0.9798827767372132,0.0,accept,unanimous_agreement
403823082,12434,do we really have to do this?,0,0,0,0.8765601515769958,0.9639614820480348,0.8670159578323364,0.0,accept,unanimous_agreement
403823546,12434,i don't see why you need a field in this struct.,0,0,0,0.9284793734550476,0.8686503171920776,0.9530069231987,0.0,accept,unanimous_agreement
403823734,12434,why? i don't think this make sense.,-1,-1,-1,0.7396712303161621,0.7180418372154236,0.7947049140930176,-1.0,accept,unanimous_agreement
403824792,12434,:\ this won't do you anything good.,-1,-1,-1,0.98948073387146,0.972424566745758,0.9878560900688172,-1.0,accept,unanimous_agreement
403825232,12434,"you call logmsg here and at exception handler, what a mess... at this point this pr is beyond my comprehension, sorry.",-1,-1,-1,0.9901670217514038,0.9912021160125732,0.995672345161438,-1.0,accept,unanimous_agreement
404054151,12434,"using raw string literals prevents escape hell. it's more consistent to use it everywhere, if we already use it once. what are the disadvantages?",-1,-1,-1,0.9276754260063172,0.9758281111717224,0.6520204544067383,-1.0,accept,unanimous_agreement
404055242,12434,"ok, i guess i can make everything a `warning` or `info` instead.",0,0,0,0.9874956011772156,0.976379930973053,0.9739055633544922,0.0,accept,unanimous_agreement
404057360,12434,"sure i could make it a variable because in this pr specifically it is only used in one scope. but in terms of design, and for future modifications, doesn't it make sense that the port number be part of this struct? the address is already there as well.",0,0,0,0.9863855242729188,0.9922473430633544,0.9888190627098083,0.0,accept,unanimous_agreement
404058554,12434,why not? why is more leniency here not desirable? a warning will still be logged.,0,0,0,0.8829476833343506,0.8912590742111206,0.8508618474006653,0.0,accept,unanimous_agreement
404058849,12434,"again, why is more leniency here not desirable? a warning will still be logged.",0,0,0,0.9187713861465454,0.7846024632453918,0.8201084733009338,0.0,accept,unanimous_agreement
404062939,12434,"this is not constructive criticism. do you mean i should remove this logging statement specifically, or should i remove the `logmsg` call from the `httperror` exception handling, or both? if so, why?",0,-1,-1,0.5674981474876404,0.807087242603302,0.7615231275558472,-1.0,accept,majority_agreement
404067633,12434,fixed.,0,0,0,0.9810503125190736,0.979083240032196,0.9905837774276732,0.0,accept,unanimous_agreement
404068316,12434,downvotes without explanation are not helpful.,-1,-1,-1,0.8372102975845337,0.6296022534370422,0.7049708962440491,-1.0,accept,unanimous_agreement
404068945,12434,"probably a good idea, will handle that after the raw string literals question is resolved.",1,0,1,0.4977292418479919,0.7600933313369751,0.9326196908950806,1.0,accept,majority_agreement
404074317,12434,"this is a very destructive idea, imo. everything must have its place and time. it is not designed as a replacement for regular string literals.",-1,-1,-1,0.9797934293746948,0.9785171151161194,0.9807989597320556,-1.0,accept,unanimous_agreement
404075698,12434,then they would be useless...,-1,-1,-1,0.9569531083106996,0.946980595588684,0.9524160027503968,-1.0,accept,unanimous_agreement
404091421,12434,"imo ~~we~~ you are wasting cpu cycles on something that has no effect (except your mind of ""more leniency"")...",-1,-1,-1,0.933330774307251,0.8649795651435852,0.9850785732269288,-1.0,accept,unanimous_agreement
404092415,12434,"what if i really want to set it to a negative value and does not want any peer in list? then you would give the unexpected result, no?",0,0,0,0.9289044141769408,0.5351244211196899,0.97223961353302,0.0,accept,unanimous_agreement
404096282,12434,"no, at least not in this pr.",0,0,0,0.957839846611023,0.975505828857422,0.9586371183395386,0.0,accept,unanimous_agreement
404097957,12434,i don't think you really answered my question...,-1,-1,-1,0.8567184209823608,0.7697320580482483,0.9294818639755248,-1.0,accept,unanimous_agreement
404100075,12434,"sorry, all of this is over my head, i couldn't even give a proper response...",-1,-1,-1,0.9899292588233948,0.9927635788917542,0.9958537817001344,-1.0,accept,unanimous_agreement
404106287,12434,is this behavior a part of protocol standard? if no i strongly object to encourage invalid clients! all invalid requests should be dropped.,0,0,-1,0.6617216467857361,0.9179105162620544,0.9687482118606568,0.0,accept,majority_agreement
404109000,12434,"on a second thought, maybe this does make sense, i mean to adhere to bep. this is not a constructive response. i see you're even lazy to state your reason for the change.",-1,-1,-1,0.9273329973220824,0.660114586353302,0.9410038590431212,-1.0,accept,unanimous_agreement
404110171,12434,if negative value isn't acceptable here then the entire request is invalid (unless any fallback is defined by protocol).,0,0,0,0.9518547058105468,0.9811091423034668,0.977609395980835,0.0,accept,unanimous_agreement
404111089,12434,it is better to use `peeriditer->left(20)` on previous line.,0,0,0,0.987626850605011,0.9943413734436036,0.993143916130066,0.0,accept,unanimous_agreement
404114763,12434,"well, the standard is really obscure on this, imo this gives room for interpretation. personally i would treat negative value as-is and return no peer. edit: apparently i was preferring to treat it as invalid request in the past.",-1,-1,0,0.8235836625099182,0.9255775213241576,0.7063673138618469,-1.0,accept,majority_agreement
404116723,12434,"bep 3 does not specify what should be done in the case of an invalid value for this parameter (i.e. it does not explicitly say ""a request containing any other values should/must be considered invalid""). so i think it is better to be lenient, and just log a warning.otherwise, we can just keep the logging statement explaining that the request was dropped.",0,0,0,0.9870805144309998,0.9818022847175598,0.9856534600257874,0.0,accept,unanimous_agreement
404116979,12434,"in that case you just set numwant = 0, same as before. the difference now is that negative values will not result in an error. [a link]",0,0,0,0.984179675579071,0.9907904863357544,0.9954610466957092,0.0,accept,unanimous_agreement
404121638,12434,"only if we start acting like redditors, which i hope doesn't happen. but for these specific usages, what is the problem? by everywhere, i meant ""everywhere in the embedded tracker code"", changing it everywhere in the code base might indeed not be desirable, but that's out of scope of this pr anyway. i can understand undoing this change here if you are of the opinion that ""changing to raw string literals where it makes sense should be done at once for the whole code base in another pr"". is that the case?",0,0,0,0.8539261221885681,0.978312373161316,0.9165802001953124,0.0,accept,unanimous_agreement
404123519,12434,"is it really that hard to understand that people/hackers will try to use any value here? now you give unexpected results (""falling back to default"", what??) and you just hand waving my concerns? (you do it all the time) i'm sorry i cannot continue any more. do as you want, this has nothing to do with me.",-1,-1,-1,0.9824767112731934,0.9873448014259338,0.9941353797912598,-1.0,accept,unanimous_agreement
404123976,12434,"i mean, am i doing something really bad or what? i just wanted a bit more logging overall, am i doing it in the wrong places in general? in this specific place and the `httperror` exception handling, the behavior doesn't change at all, the only difference is the logging statements.",-1,-1,0,0.8060293793678284,0.5932979583740234,0.5969122052192688,-1.0,accept,majority_agreement
404128839,12434,it doesn't change my answer. no. i just mean that use of raw string literal has no sense in case of simple string like this one. and some kind of unification is not appropriate here.,-1,0,0,0.6284120678901672,0.9143093228340148,0.9664851427078248,0.0,accept,majority_agreement
404134964,12434,"not lazy, i only linked the response because the response would have been the exact same as for other similar comments... would you rather i had copy-pasted the exact same thing multiple times? these are all instances of apparently not-so-compliant cases where the spec does not explicitly mandate the request to fail, and where we can default to a reasonable lenient behavior. but just to be extremely clear in this specific case: the spec says the length is 20, so we truncate to that internally (while still logging if this happens), which is a reasonable lenient alternative to just not processing the request at all if the length is not 20, because the spec does not explicitly say ""if `peer_id` is not 20 bytes in length, the request should/must fail"". in fact, it does not explicitly state what to do at all when the length is not 20.",0,0,-1,0.935183048248291,0.8393046259880066,0.7805953025817871,0.0,accept,majority_agreement
404142252,12434,"fine by me. out of curiosity, what are the benefits?",0,1,0,0.9434853196144104,0.5138241052627563,0.6804295778274536,0.0,accept,majority_agreement
404143101,12434,"ok, since you insist, and i really don't have a specific more compelling reason to do it the other way, i'll change it.",0,0,0,0.9589529633522034,0.9376073479652404,0.958528697490692,0.0,accept,unanimous_agreement
404151497,12434,"calm down please, i'm not hand waving anything. the `numwant` field defaults to `50`, so if we don't reassign it, it stays at 50, which is safe. previous behavior: - `num_want > 0`: success. - `num_want == 0`: success (no peer list returned). - `num_want < 0`: failure for the announcer and silent failure for the tracker ""admin"". new behavior: - `num_want > 0`: same as before. - `num_want == 0`: same as before. - `num_want < 0`: success for the announcer, using our default value for `numwant` of `50`. the tracker ""admin"" is warned that an announcer has supplied an invalid number, but a default value was used instead to still be able to service the request. would you rather i change the text ""falling back to default"" to ""using default value instead"" or ""using default value of 50 instead"" or ""using default value of 50""?",0,0,-1,0.8467962741851807,0.9630489349365234,0.6399545073509216,0.0,accept,majority_agreement
404156569,12434,"ok, i'll change it to normal literals where it is not needed.",0,0,0,0.9845937490463256,0.9907734394073486,0.9916864037513732,0.0,accept,unanimous_agreement
404158762,12434,"fixed, by the way.",0,0,0,0.9820832014083862,0.9749801158905028,0.9690816402435304,0.0,accept,unanimous_agreement
404160723,12434,"just to clarify my stance on this, is right, invalid parameter should stop processing (to avoid wasting more resources) and send back the error message to the peer.",0,0,0,0.976629674434662,0.917507827281952,0.9787867665290833,0.0,accept,unanimous_agreement
404163036,12434,"fixed, and i also changed an instance of `ushort` to `quint16`, since that's what we use elsewhere.",0,0,0,0.9892517924308776,0.9945397973060608,0.9924494028091432,0.0,accept,unanimous_agreement
404163318,12434,isn't it obvious? so it would copy a shorter array instead of a potentially longer one.,0,0,0,0.9865585565567015,0.9852978587150574,0.9874889254570008,0.0,accept,unanimous_agreement
404169207,12434,"i retract this, error message for peers should stay in english.",0,0,0,0.910203456878662,0.8808672428131104,0.9045979380607604,0.0,accept,unanimous_agreement
404170511,12434,"ok, now raw string literals are only used when the strings contain `""`. do you think i should revert to using escaped strings also in that case?",0,0,0,0.981253445148468,0.9923557043075562,0.9924039244651794,0.0,accept,unanimous_agreement
406265305,12434,"the thing is, while the protocol does not define a specific fallback, it does not say the requests should immediately be dropped either.",0,0,0,0.9812259674072266,0.9890658855438232,0.9754676222801208,0.0,accept,unanimous_agreement
410252911,12434,"can we get your opinion on this matter? in this case, and also the `numwant` discussion below, is it better to be lenient and attempt serve the request if possible, falling back to a sane default, or to drop the request altogether?",0,0,0,0.9678618907928468,0.9923269152641296,0.99079167842865,0.0,accept,unanimous_agreement
410254316,12434,"ping, like i said, raw string literals are now only used when justifiable (i.e. when the string itself also contains `""`). is this acceptable, or do you really want me to revert to using escaped strings all around?",0,0,0,0.9716868996620178,0.9835445284843444,0.9889940619468688,0.0,accept,unanimous_agreement
410284320,12434,"without having thought about this case very much, generally i think it's a good default to be strict. (imagine if all bittorrent clients had required bencoded dictionaries to be sorted correctly for instance, clients wouldn't have to go out of their way to support invalid encodings as they do today). maybe some relevant questions for this case. (1) a client that sends an invalid request to the tracker, is it likely to be a correct about other arguments, say the info-hash? (2) is it the kind of peer that a tracker should hand out to ther peers?",0,0,0,0.9127941131591796,0.984163224697113,0.8048874139785767,0.0,accept,unanimous_agreement
410286404,12434,"it's not obvious to me that `&numwant=-1` is any more correct (or should be accepted to any greater degree) than `&numwant=foo`. as far as i can tell (but i haven't thought too much about this either), the only useful values for `numwant` is `0` or a *positive* number. clients will generally want as many peers as possible, or 0 (if they are stopping for instance). and the actual number to send has to be up to the tracker to decide.",0,0,0,0.976584255695343,0.9822824001312256,0.9787389636039734,0.0,accept,unanimous_agreement
410349543,12434,"i see. 1, 2 - probably not, on both counts. so i guess being strict is the better option. but in any case, shouldn't the spec be updated to be more strict? at least the v2 spec, as updating the original one is not meaningful at this point. if the spec is not strict enough, it allows implementations to make assumptions that could lead to ossification of the protocol - the most well-known case of this is tls 1.x -> 1.3 i think. isn't it desirable to prevent that?",0,0,0,0.9631938934326172,0.976526975631714,0.9598590731620787,0.0,accept,unanimous_agreement
410407273,12434,"alright, i removed the leniency changes.",0,0,0,0.9812909364700316,0.9856744408607484,0.991305649280548,0.0,accept,unanimous_agreement
410684864,12434,due to comment above this message is incorrect to be here since this place can be reached in case of plain ipv4 address.,0,0,0,0.8278356790542603,0.9889724850654602,0.9865289926528932,0.0,accept,unanimous_agreement
410687737,12434,"this message is supposed to be printed every time anything _except_ a **plain ipv6** is used. this includes the case of a **plain ipv4**. in other words, this message prints ""if address is indeed ipv4 or if it is an ipv4-mapped ipv6 address"", which is what the comment above says. the point of this is to help track and diagnose connectivity issues with the embedded tracker when ipv4-mapped ipv6 addresses are used and possibly other cases.",0,0,0,0.9871187210083008,0.9945240020751952,0.988793671131134,0.0,accept,unanimous_agreement
410690047,12434,but it is a trivial case. why should it be logged (unlike plain ipv6)?,0,0,0,0.5453187823295593,0.8566531538963318,0.971917450428009,0.0,accept,unanimous_agreement
410690648,12434,because i did not find an easy way to exclude it.,-1,0,0,0.8295650482177734,0.7863775491714478,0.957097589969635,0.0,accept,majority_agreement
410695303,12434,can't you check whether it was ipv4 in the first place (before it was adjusted)?,0,0,0,0.9858134388923644,0.993884027004242,0.9912420511245728,0.0,accept,unanimous_agreement
410698738,12434,"of course i can. brain freeze, sorry. it's fixed now.",-1,-1,-1,0.9893609881401062,0.992384433746338,0.9947431087493896,-1.0,accept,unanimous_agreement
410712058,12434,"log::warning is misused. any error from client isn't relevant to qbt normal operations. or another viewpoint, the user hasn't do anything wrong related to the warning, so it is a debug level msg or info level msg at best.",-1,0,0,0.6931385397911072,0.7775534987449646,0.8375533223152161,0.0,accept,majority_agreement
410712235,12434,coding style.,0,0,0,0.9849669337272644,0.9589239358901978,0.9877970814704896,0.0,accept,unanimous_agreement
412378551,12434,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
412378648,12434,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
1629871916,20833,i would name it `setprivate`.,0,0,0,0.98786860704422,0.9906243681907654,0.9946972131729126,0.0,accept,unanimous_agreement
1629872295,20833,i would name it `matchprivate`.,0,0,0,0.9873742461204528,0.9889824986457824,0.9941565990447998,0.0,accept,unanimous_agreement
1629873562,20833,i would name it `anyprivate`.,0,0,0,0.9874136447906494,0.9878841042518616,0.9938123226165771,0.0,accept,unanimous_agreement
1629875108,20833,i would name it `m_private`.,0,0,0,0.9880924224853516,0.9902453422546388,0.9933043122291564,0.0,accept,unanimous_agreement
1629877039,20833,i would name it `private`.,0,0,0,0.9875998497009276,0.988828182220459,0.993665099143982,0.0,accept,unanimous_agreement
1629877360,20833,i would name it `anyprivate`.,0,0,0,0.9874136447906494,0.9878841042518616,0.9938123226165771,0.0,accept,unanimous_agreement
1629878085,20833,i would name it `private`.,0,0,0,0.9875998497009276,0.988828182220459,0.993665099143982,0.0,accept,unanimous_agreement
1629878226,20833,i would name it `private`.,0,0,0,0.9875998497009276,0.988828182220459,0.993665099143982,0.0,accept,unanimous_agreement
1629879311,20833,i would name it `private`.,0,0,0,0.9875998497009276,0.988828182220459,0.993665099143982,0.0,accept,unanimous_agreement
1630845246,20833,i would strongly expect that we use the same names like the ones within returned dictionary.,0,0,0,0.9823832511901855,0.9862852096557616,0.987204134464264,0.0,accept,unanimous_agreement
1630960999,20833,"same view here. to my understanding, that is as it is currently implemented.",0,0,0,0.9715632200241088,0.976603865623474,0.9929170608520508,0.0,accept,unanimous_agreement
1631250940,20833,ok it is less problematic for this one.,0,0,0,0.8571282625198364,0.8389133810997009,0.965669333934784,0.0,accept,unanimous_agreement
1631291936,20833,but it still needs to be changed. it is called `is_private` in another dictionary: [a link] so i would change it to `private` in both places.,0,0,0,0.9866443276405334,0.994231343269348,0.994415283203125,0.0,accept,unanimous_agreement
1631315770,20833,`anyprivate` looks confusing. now since we use `std::optional` these constants don't do much good. we can use `std::nullopt` directly and not bother to come up with names for these constants.,-1,-1,-1,0.7139845490455627,0.8680428266525269,0.6386672258377075,-1.0,accept,unanimous_agreement
1631909518,20833,:thumbs_up:,0,0,1,0.8380307555198669,0.9771975874900818,0.9533231854438782,0.0,accept,majority_agreement
1639661396,20833,i wouldn't consider this resolved. please rename all patterns of `isprivate` to `private` in both torrentfilter.h and torrentfilter.cpp,0,0,0,0.9832034111022948,0.9900091886520386,0.9879751801490784,0.0,accept,unanimous_agreement
1639665115,20833,"this change and line 114 in torrentscontroller.cpp is backwards incompatible for the webapi/webui. are we sure to introduce disruptions for the downstream projects? regardless, you should increment `api_version` in webapplication.h due to other changes.",0,0,0,0.982414186000824,0.979229211807251,0.9891520738601683,0.0,accept,unanimous_agreement
1639686029,20833,"it was added in ""info"" quite recently and has not yet been released, so i do not consider it a problem to change it now as a hotfix. but in ""properties"" it has been there for a long time. so we have several solutions: 1. still change it to ""private"" in an incompatible way, 2. add a new ""private"" field, leaving the old ""is_private"" as deprecated for compatibility, 3. do not change ""properties"", and use inconsistent names, 4. use ""is_private"" everywhere. i would vote for 1. or 2.",0,0,0,0.8885945677757263,0.9888756275177002,0.9040735363960266,0.0,accept,unanimous_agreement
1639726027,20833,"- i have renamed the patterns where possible. i can't rename all to ""private"", since the word ""private"" is reserved in c++. is the updated version fine with you?",0,0,0,0.9836117625236512,0.9920527935028076,0.9884397983551024,0.0,accept,unanimous_agreement
1639729766,20833,both are acceptable to me. i'll leave it to the pr author to decide.,0,0,0,0.9668457508087158,0.9765839576721193,0.9685777425765992,0.0,accept,unanimous_agreement
1639733566,20833,"i am not sure of the ramifications of that decision. personally i am totally fine to merge it as it is (i.e. it's becoming ""private"" on the properties api as well) but i don't know how much that will break. what would be your advice?",-1,0,-1,0.9245012402534484,0.5603660345077515,0.9003517627716064,-1.0,accept,majority_agreement
1639815985,20833,"yes, it is alright now. [a link] and third-party services (for example sonarr if i'm not mistaken) whom shows private torrent status will possibly stop working until they switch to the new value. and they probably need to maintain backward compatibility for previous qbt versions.",0,0,0,0.9763079881668092,0.9605554938316344,0.8956485986709595,0.0,accept,unanimous_agreement
1639839171,20833,implemented 2. for maintaining backward compatibility.,0,0,0,0.9817282557487488,0.9911529421806335,0.9917993545532228,0.0,accept,unanimous_agreement
1639947353,20833,"shouldn't it be the following instead? [code block] now it doesn't introduce breaking changes, does it?",0,0,0,0.97487211227417,0.9929003715515136,0.989539921283722,0.0,accept,unanimous_agreement
1640034105,20833,"yes, it should.",0,0,0,0.9723069071769714,0.9853257536888124,0.9838722348213196,0.0,accept,unanimous_agreement
1640036923,20833,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
22760398,2389,"1. `qvariant` в имени функции - лишнее. просто `gettranserinfomap`. 2. если только один параметр и он выходной, то проще его заменить на возвращаемое значение: [code block] тогда и код выше можно сократить: [code block] [code block]",0,0,0,0.9142704606056212,0.9882323145866394,0.960796356201172,0.0,accept,unanimous_agreement
22760418,2389,скобки вокруг `tomap(torrent)` лишние.,0,0,0,0.9206380248069764,0.989015519618988,0.8539357781410217,0.0,accept,unanimous_agreement
22761682,2389,"чтобы предотвратить пересылку всех данных при сетевых ошибках, нужно сделать следующее: 1. хранить два предыдущих ответа - один тот, который мы отправили в прошлый раз, а другой, получение которого подтвердил клиент. 2. клиент должен повторно отсылать один и тот же `rid`, пока не получит ответ (в тех случаях, когда есть проблемы с сетью и ответ до клиента не доходит). вот как это реализовать здесь: [code block]",0,0,0,0.6460340619087219,0.9807257056236268,0.612472653388977,0.0,accept,unanimous_agreement
22766342,2389,"ок. теперь необходимо сделать так, чтобы любые запросы (с любым значением `rid`) обрабатывались корректно (ошибки могут быть и в реализации клиентов - мы же не рассчитываем только на какой-то конкретный): [code block] так при `rid <= 0` будут передаваться все данные, как и при неверном значении `rid`. еще одно замечание по этой функции (и по остальным тоже) - переменная haschanges не используется, так что ее можно убрать и отсюда и из сигнатуры всех остальных функций.",0,0,-1,0.6498550176620483,0.9687735438346864,0.6530683636665344,0.0,accept,majority_agreement
22766382,2389,"замени `partial` на `syncdata`, раз уж мы используем теперь такую терминологию. и в других методах.",0,0,0,0.94063800573349,0.9837489128112792,0.7480282783508301,0.0,accept,unanimous_agreement
22766429,2389,"здесь тоже можно поменять термины: `generatepartialresponse` => `generatesyncdata`, `response` => `data`, `lastacceptedresponse` => `lastaccepteddata`, `lastresponse` => `lastdata`.",0,0,0,0.9835891723632812,0.9937512278556824,0.98067444562912,0.0,accept,unanimous_agreement
22766450,2389,так же и здесь и в других местах.,0,0,0,0.8313162922859192,0.9748343229293824,0.5451372265815735,0.0,accept,unanimous_agreement
22766472,2389,можно использовать более короткую запись в стиле qt: [code block],0,0,0,0.9463186860084534,0.9881026148796082,0.9219821095466614,0.0,accept,unanimous_agreement
22766632,2389,"это бессмысленно, т.к. если `!changes` верно, то `partial` и так не содержит этого ключа.",0,0,0,0.9084760546684264,0.9860462546348572,0.8037910461425781,0.0,accept,unanimous_agreement
22766761,2389,эту часть тоже можно упростить: [code block],0,0,0,0.96701580286026,0.9898179173469543,0.8608750104904175,0.0,accept,unanimous_agreement
22766778,2389,"кстати, можно по аналогии сделать функцию `processlist()`.",0,0,0,0.9541643857955932,0.9843257665634156,0.6423501372337341,0.0,accept,unanimous_agreement
22766855,2389,это излишне. все и так работает.,0,0,-1,0.8585349917411804,0.9792715907096864,0.5196849703788757,0.0,accept,majority_agreement
22768580,2389,"не трогай это. пусть будет просто структурой, чтобы подчеркнуть ее назначение.",0,0,-1,0.795027494430542,0.9755281805992126,0.4818034172058105,0.0,accept,majority_agreement
22768587,2389,здесь тоже нужно заменить `response` на `data`.,0,0,0,0.9764946103096008,0.989250659942627,0.8928666710853577,0.0,accept,unanimous_agreement
22768600,2389,"должен быть пробел после `for`, `while`, `if`` и т.п.",0,0,0,0.9428465962409972,0.9879279732704164,0.864363968372345,0.0,accept,unanimous_agreement
22768806,2389,"не используйте `int` и другие целочисленные типы в качестве `bool`. это работает, но не отражает явно логику алгоритма. а в некоторых ситуациях (не в этой) может вообще быть ошибочно, т.к. отрицательные значения приводятся к `true`.",0,0,0,0.7513857483863831,0.9804450273513794,0.5150570869445801,0.0,accept,unanimous_agreement
22768908,2389,"ок. теперь необходимо сделать так, чтобы любые запросы (с любым значением rid) обрабатывались корректно (ошибки могут быть и в реализации клиентов - мы же не рассчитываем только на какой-то конкретный): [code block] так при `rid <= 0` будут передаваться все данные, как и при неверном значении `rid`. p.s. я уже это писал ранее. не спеши обновлять pr, пока не прочитал все строковые комментарии.",0,0,-1,0.6113249063491821,0.9591933488845824,0.5761126279830933,0.0,accept,majority_agreement
22768932,2389,в ветке `default` не нужен `brake`.,0,0,0,0.9714657664299012,0.9895262718200684,0.8408411741256714,0.0,accept,unanimous_agreement
22885271,2389,лишний пробел перед `[]`.,0,0,0,0.946177065372467,0.9851763248443604,0.7211755514144897,0.0,accept,unanimous_agreement
22885408,2389,"нужно вставить предварительные объявления всех внутренних (не btjson::) функций в этом месте, а сами функции разместить в конце файла.",0,0,0,0.7601842880249023,0.9779003262519836,0.6464993953704834,0.0,accept,unanimous_agreement
22885507,2389,"по аналогии, из этой функции нужно возвращать просто `syncdata`, а в json кодировать в btjson:: функции, из которой она вызывается.",0,0,0,0.8559687733650208,0.9862272143363952,0.870592474937439,0.0,accept,unanimous_agreement
22885830,2389,"эта функция теперь не нужна в `btjson`. нужно ее описать так, как и остальные внутренние функции - предварительное объявление вверху (после констант), а само тело после `btjson::` функций. и, если не сложно, сделай то же с функцией `tomap()`.",0,0,0,0.7304460406303406,0.985328733921051,0.7493389844894409,0.0,accept,unanimous_agreement
22886351,2389,"здесь можно вставить комментарий с форматом выдаваемых данных, как перед `gettorrents`.",0,0,0,0.94351065158844,0.986447811126709,0.8172102570533752,0.0,accept,unanimous_agreement
23264914,2389,"i may be a little sleepy, but i didn't see you editing `prevdata` and `data` in any of these functions. so wouldn't it be clearer to pass them by const reference(`const &`)?",-1,0,0,0.6506773829460144,0.6212882399559021,0.8776516914367676,0.0,accept,majority_agreement
23264992,2389,is this particular comment line valid?,0,0,0,0.9865155220031738,0.991058886051178,0.9917690753936768,0.0,accept,unanimous_agreement
23282952,2389,wrote this comment. apparently it is valid.,0,0,0,0.982343316078186,0.9443731307983398,0.991929054260254,0.0,accept,unanimous_agreement
23283581,2389,copy of `prevdata` data is edited into the functions. qt using implicit data sharing (see [a link]. i think that such the functions declaration is also appropriate.,0,0,0,0.9880490899086,0.9917718768119812,0.9941831231117249,0.0,accept,unanimous_agreement
23284651,2389,"this is because, apparently, that we discussed some things in russian. 'll take a small piece:",0,0,0,0.981200873851776,0.957616686820984,0.9868546724319458,0.0,accept,unanimous_agreement
192586409,9026,"these are legit uses of `qstringliteral`, why remove it?",0,0,0,0.9817776679992676,0.9916826486587524,0.9900034070014954,0.0,accept,unanimous_agreement
192586427,9026,i think you messed up the indention here and below.,-1,0,-1,0.8738353848457336,0.8181977272033691,0.780878484249115,-1.0,accept,majority_agreement
192586476,9026,"i would put the translations in www/locale folder. and ""www"" prefix isn't really good, why not just ""webui""?",0,-1,0,0.9735852479934692,0.6117181181907654,0.9878743290901184,0.0,accept,majority_agreement
192586512,9026,this is python3 right? please put `#!/usr/bin/env python` at top so linux users can execute it directly.,0,0,0,0.9881486296653748,0.9936997890472412,0.994694173336029,0.0,accept,unanimous_agreement
192586561,9026,(i haven't check this) and please make sure the file is executable: [a link],0,0,0,0.9783103466033936,0.9650092124938964,0.9942883253097534,0.0,accept,unanimous_agreement
192595884,9026,"sorry, it was rebase artifact. will be fixed.",-1,-1,-1,0.986947774887085,0.991740584373474,0.9930411577224731,-1.0,accept,unanimous_agreement
192595986,9026,outdated qtcreator broke it.,-1,-1,0,0.6063129305839539,0.5547478795051575,0.8743712902069092,-1.0,accept,majority_agreement
192596090,9026,"ageed with ""www -> webui"". but why ""locale"" is better name? it's not so obvious for me.",0,0,0,0.6973156332969666,0.8523419499397278,0.9807518720626832,0.0,accept,unanimous_agreement
192596415,9026,ok,0,0,0,0.9667208194732666,0.8787186145782471,0.9233372807502748,0.0,accept,unanimous_agreement
192619054,9026,i think locale is the more widely-accepted verbiage. from the wikipedia page for [a link]:,0,0,0,0.9820194840431212,0.960517644882202,0.9856823086738586,0.0,accept,unanimous_agreement
192633620,9026,"but here are the translation files for some languages. so it turns out, the most correct name is ""translations"". but it's just an internal folder, so i don't really care what it's called. if you insist on ""locale"", then i will use it without further objection.",-1,0,0,0.7045186758041382,0.9694857001304626,0.922037959098816,0.0,accept,majority_agreement
192676163,9026,"minor thing, i would use ""webui switching to locale: %1."" and for below: ""webui invalid locale selected: %1, falling back to default: en""",0,0,0,0.9776355624198914,0.9657697081565856,0.847346305847168,0.0,accept,unanimous_agreement
192679046,9026,you should also remove this file from repo?,0,0,0,0.988326370716095,0.994225800037384,0.9958840012550354,0.0,accept,unanimous_agreement
192680447,9026,"personal preference, i would prefer using the full name, e.g. os.path.join .... i think it is easier to read.",0,0,0,0.9428234100341796,0.9739696979522704,0.982636570930481,0.0,accept,unanimous_agreement
192680676,9026,"i would expect a list, a bit strange to see a tuple is used.",0,-1,-1,0.6230146288871765,0.8998733162879944,0.9019916653633118,-1.0,accept,majority_agreement
192681407,9026,also i think .css & .js can be excluded?,0,0,0,0.9876708984375,0.9938032627105712,0.9941185712814332,0.0,accept,unanimous_agreement
192682913,9026,"nitpick, redundant space at end of string",0,-1,0,0.9797511696815492,0.708716094493866,0.9882274270057678,0.0,accept,majority_agreement
192683394,9026,"did i forget to do that? hell, it's a cost of development ""on the knee"".",-1,-1,-1,0.9493451118469238,0.9465522170066832,0.9847962856292723,-1.0,accept,unanimous_agreement
192686063,9026,"if the exception is unexpected... i think the pythonic way is not catching it, just let the program terminates. otherwise you should catch the specific exception. ps. this also applies to the try...catch above.",0,0,0,0.959881067276001,0.9465730786323548,0.985146939754486,0.0,accept,unanimous_agreement
192700353,9026,"i just use existing messages from application class. webui invalid locale selected imo, it's incorrect. the event is ""translation for selected locale loaded or failed to load"". so how about ""webui translation for selected locale (%1) successfully loaded."" and ""couldn't load webui translation for selected locale (%1), falling back to default (en).""?",0,0,0,0.9686970114707948,0.9811636805534364,0.9687572717666626,0.0,accept,unanimous_agreement
192703692,9026,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
192708506,9026,"i'm not python developer. i use it very rarely... i only used tuple because it's immutable. but apparently it doesn't matter, and the list is more appropriate (from use cases pov).",0,0,0,0.8239779472351074,0.8577545881271362,0.9411001205444336,0.0,accept,unanimous_agreement
192710145,9026,why? .js files contain translatable strings even in builtin webui. and i think .css can contain it for some purposes in altrernative webui.,0,0,0,0.9884276986122132,0.9752537608146667,0.981872260570526,0.0,accept,unanimous_agreement
192712914,9026,"why should i allow the program to terminate in case it is impossible to write some specific file for some reason? and yes, i'm not at all interested in that reason. i don't want to make a monster out of this simple helper script. it is not intended for general use, but only for developers. p.s. if someone does not have enough problems in the main qbittorrent code base, or someone will find here some critical (in his opinion) shortcomings, he can spend his time and bring it to perfection later.",-1,-1,-1,0.7647744417190552,0.929840087890625,0.5929908752441406,-1.0,accept,unanimous_agreement
192713704,9026,"now i see... so you mean this script can be also used for alternative webui translations? i would let this script cover only built-in webui translations, let alternative webui provide their own i18n solution. imo it is not really sane to have translation in css files, but who knows?",0,-1,0,0.4999859929084778,0.5323946475982666,0.894824206829071,0.0,accept,majority_agreement
192715387,9026,"bad wording from me, ignore that reasoning. problem is you're catching all exceptions, you should only catch the ones you need: [a link]",-1,-1,-1,0.9784653186798096,0.9159740805625916,0.975066602230072,-1.0,accept,unanimous_agreement
192716743,9026,pr updated!,0,0,0,0.8126835227012634,0.5312401652336121,0.8246697783470154,0.0,accept,unanimous_agreement
192732210,9026,"in general case, yes. but as i said before: i don't know what exceptions there can be and i don't want to know it exactly. i just want to skip it and try to continue. it works without errors under normal conditions. i don't want to complicate it trying to handle abnormal environment state. i assume the developer who encounter some error will be able to handle it.",0,0,0,0.7961716055870056,0.6768198609352112,0.9071625471115112,0.0,accept,unanimous_agreement
192738129,9026,"you must have forgotten how it all started... it is not particularly useful to do this only for the built-in web interface. the idea is to provide an abstract translation mechanism that, on the one hand, does not require changes to the qbittorrent binary (e.g., as it was with additional messages in the ""extra_translations.h"" file), and on the other hand, allows web interface to use its own strings and not only the ones already used in the qbittorrent gui. without having the dynamic server-side content, the javascript code is the only place to do it. but in any case, why should we limit the use of this simple method hjust insert qbt_tr and place appropriate .qm files into ""translations"" folder)? besides, it doesn't prevent them from using some other way if they want it.",0,0,0,0.9033656120300292,0.9787879586219788,0.8060150146484375,0.0,accept,unanimous_agreement
192817839,9026,"personally i don't want to put this burden on the qbt server when there are client side solutions (maybe like [a link] ?). iirc this has been discussed before, i'll stop here, lets not delve into it more.",0,0,0,0.6402021646499634,0.942992091178894,0.7601456046104431,0.0,accept,unanimous_agreement
192819085,9026,"then maybe try block is not really needed and can be omitted? however as i probably won't be the one using the script, you can disregard my suggestion.",0,0,0,0.9389022588729858,0.9792455434799194,0.987792670726776,0.0,accept,unanimous_agreement
192826125,9026,"you didn't still understand desired behavior? skip any error (only print message about it) and try to process the rest files. i can't implement it without try-catch. of course, i can omit try-catch in this place, since error here usually means some external problem breaking the correct execution of the script. but i can't omit it above, since there can be some particular invalid file which can be skipped.",0,0,0,0.9632489085197448,0.9788908362388612,0.9889127612113952,0.0,accept,unanimous_agreement
192828661,9026,"""for doing"" or ""to do""",0,0,0,0.7878742814064026,0.9860498309135436,0.9740415215492249,0.0,accept,unanimous_agreement
192828815,9026,"i don't understand your pov. this logic is already here (on qbt server side). i just changed it a bit to don't use gui translations. or do you suggest to remove it at all and use client side translation for all possible web ui? imo, a very strange offer in the absence of active web developers in our team. , you should read this discussion when you'll review this since it contains different povs on the overall problem.",-1,-1,-1,0.8748579025268555,0.9690945148468018,0.9847550988197328,-1.0,accept,unanimous_agreement
192829807,9026,redundant.,0,-1,0,0.6300452947616577,0.8949145078659058,0.6917503476142883,0.0,accept,majority_agreement
192830124,9026,"seems like the variable does not need to be global, since you only pass it to a function called from main().",0,0,0,0.9722713232040404,0.991811990737915,0.9887160658836364,0.0,accept,unanimous_agreement
192830433,9026,"omg, returning function values via a global variable...",0,0,0,0.9868215918540956,0.9820214509963988,0.9915400147438048,0.0,accept,unanimous_agreement
193846866,9026,"really? i don't know english well, so i just adopted the existing wording from `src/update_qrc_files.py` (""small script to update qrc files""). ?",0,0,0,0.9380233883857728,0.9440348744392396,0.70808345079422,0.0,accept,unanimous_agreement
193847075,9026,why?,0,0,0,0.6633803844451904,0.8699262738227844,0.9622438549995422,0.0,accept,unanimous_agreement
193848214,9026,"i take it as a plain script. i can do without ""main"" function at all, can't i? these values are script configuration defaults so i want it in global place.",0,0,0,0.9870738983154296,0.9879282116889954,0.9932559728622437,0.0,accept,unanimous_agreement
193850428,9026,"you offer a little more (without any benefit) complicate this plain script? really, it's easier to get rid of these functions!",0,0,0,0.7137380242347717,0.7897894382476807,0.8577016592025757,0.0,accept,unanimous_agreement
194091783,9026,"if it is python3, the shebang should read #!/usr/bin/env python3",0,0,0,0.9843941330909728,0.993552565574646,0.9940987825393676,0.0,accept,unanimous_agreement
194093160,9026,because it is used only inside main(),0,0,0,0.9793767929077148,0.9917600750923156,0.994382619857788,0.0,accept,unanimous_agreement
194139284,9026,"well, there is no main() now since it was so confusing you.",0,0,0,0.8069449067115784,0.6077249646186829,0.5674210786819458,0.0,accept,unanimous_agreement
194139392,9026,"ok, changed.",0,0,0,0.973672330379486,0.9650750756263732,0.992104172706604,0.0,accept,unanimous_agreement
202558156,9026,"""building **webui** translations failed"". --> to differentiate from gui translations and be able to accurately debug. i wonder if we should add the failing locale name in both situations.",0,-1,0,0.7143307328224182,0.807578444480896,0.9522973299026488,0.0,accept,majority_agreement
202558550,9026,true question: why isn't the regex like this? (look at the last capture group) [code block],0,0,0,0.9787918329238892,0.9862964153289796,0.99284029006958,0.0,accept,unanimous_agreement
202574676,9026,"ok. fixed. it's not necessary since error message appears immediatelly after line with its name: ""processing "".",0,0,0,0.9852398633956908,0.950018048286438,0.867996871471405,0.0,accept,unanimous_agreement
202574908,9026,"to follow c++ (and many other languages) identifier format: ""identifier cannot start with number"". but if you want we can use softer rules here.",0,0,0,0.985289752483368,0.9902681708335876,0.9935380816459656,0.0,accept,unanimous_agreement
202575052,9026,i see. just leave it as it is.,0,0,0,0.9802354574203492,0.9698868989944458,0.9837055206298828,0.0,accept,unanimous_agreement
202681226,9026,consider pathlib.path,0,0,0,0.988577961921692,0.9873588681221008,0.9928750991821288,0.0,accept,unanimous_agreement
202685988,9026,`with ....`,0,0,0,0.9624617695808412,0.9902563095092772,0.9846620559692384,0.0,accept,unanimous_agreement
202689946,9026,", as i said before, i'm not going to change this script unless it contains critical errors. you can improve it later if you want. i do not use python on a daily basis, and it makes no sense for me to comprehend its subtleties. when i'll want to learn it i ask you for best practices :)",1,1,1,0.871839165687561,0.9841220378875732,0.9812281727790833,1.0,accept,unanimous_agreement
202692199,9026,you even can do it by pushing commit into this branch while pr is still unmerged.,0,0,0,0.9882656335830688,0.9919909834861756,0.9943133592605592,0.0,accept,unanimous_agreement
202693953,9026,[code block] or [code block] assuming root is `pathlib.path`,0,0,0,0.9888496994972228,0.993719220161438,0.9956587553024292,0.0,accept,unanimous_agreement
202694226,9026,"actual value of nfiles is unneded, why it is not a bool then?",0,0,0,0.9761471152305604,0.9831337332725524,0.9924309849739076,0.0,accept,unanimous_agreement
203775334,9026,"a bit offtopic, after we moved this `include()` here, i noticed qt is building translations multiple times when i run `qmake src.pro` in windows. i suspect the qmake needs to generate different configurations (debug, release) and built the translations when doing so, so maybe we should move it back to qbittorrent.pro ?",0,0,0,0.9622372388839722,0.9904831647872924,0.9644585847854614,0.0,accept,unanimous_agreement
203807444,9026,"yes. at least it should fix this regression, isn't? this extra delay required to generate .qm files every time i build a project is very annoying to me personally. it would be better to completely get rid of this ""intrusive service"", whose convenience is very doubtful. it would be better to have some (very simple) script to generate these files so the developer can run it when it is really needed. what do you say? ?",-1,-1,-1,0.9845072031021118,0.9835261702537536,0.9701812267303468,-1.0,accept,unanimous_agreement
203933292,9026,"yeah, imo it is the baseline we should do if the situation cannot be improved. i've thought about it, i find it very hard to have a portable script on all platforms/oss without adding additional build dependency (python, cmake).",0,0,0,0.6583048105239868,0.8653154969215393,0.9619984030723572,0.0,accept,unanimous_agreement
204154153,9026,"imo, it will increase the probability that i'll forget to run it before a release and have stale translations. although i suspect it would be possible to integrate it as a step inside `make tarball` (<--- current way of making release tarballs). but that means we will distribute .qm files too now on each release.",0,0,0,0.9680346846580504,0.9882341623306274,0.9526947736740112,0.0,accept,unanimous_agreement
1746626748,21300,what is the different between these two? i'm under the impression that they are eventually the same.,-1,0,0,0.701805830001831,0.9345889687538148,0.9815146327018738,0.0,accept,majority_agreement
1746658319,21300,"not even close, they are completely different under the hood. posix has horrendous performance, uses synchronous i/o, don't support files preallocation etc.",-1,-1,-1,0.6657623648643494,0.8516659140586853,0.9885699152946472,-1.0,accept,unanimous_agreement
1746663564,21300,ok. do you know what functions do they call? obviously one is pread/pwrite and the other?,0,0,0,0.9875204563140868,0.9879187941551208,0.9940184354782104,0.0,accept,unanimous_agreement
1746670336,21300,btw it seems the old posix option has a bad name now because pread/pwrite is also defined in posix standard.,-1,-1,0,0.8781900405883789,0.7163500189781189,0.7238115072250366,-1.0,accept,majority_agreement
1746673960,21300,[a link] and [a link]. that's how libtorrent calls it. :woman_shrugging:,-1,0,1,0.9686414003372192,0.8239173889160156,0.58341383934021,,review,no_majority_disagreement
1746686821,21300,thank you!,1,1,1,0.9661415219306946,0.9148550629615784,0.9448403120040894,1.0,accept,unanimous_agreement
1746693669,21300,"maybe we could rename the `pread` option to `mmap fallback`? the new name will not be confused with ""posix-compliant"". also, the pread could be an implementation detail that we shouldn't advertise.",0,0,0,0.9879066944122314,0.9939901828765868,0.9868083596229552,0.0,accept,unanimous_agreement
1746699347,21300,"maybe. i named it accounting future changes from arvidn/libtorrent#7013, as said above: again, that's how libtorrent calls it. but i don't mind the naming here.",0,0,0,0.935512125492096,0.9612793326377868,0.8998544812202454,0.0,accept,unanimous_agreement
1746712918,21300,"imo, `mmap fallback` is completely meaningless/confusing to be used here. its meaning is precisely that it does not use memory mapping at all, so why mention it?",-1,0,0,0.8601422905921936,0.6932507753372192,0.5194862484931946,0.0,accept,majority_agreement
1746719931,21300,"in my old commit made to test a new disk io subsystem, i named the corresponding option more abstractly from the implementation details ""multi-threaded file read/write"". i would use something like it.",0,0,0,0.9860087037086488,0.9886158108711244,0.9925002455711364,0.0,accept,unanimous_agreement
1746725249,21300,"[a link] 1. to differentiate it with ""posix-compliant"" option. 2. the pread could be an implementation detail that we shouldn't advertise. by only looking at its name, some users might be mistaken that the current option is the unfinished pread-disk-io. and when we switched it to pread-disk-io under the hood, some users might still think it is the old one. either we add more info/rename the ""posix-compliant"" one or use some obscure name like ""mmap fallback"".",0,0,0,0.9809929728507996,0.986884832382202,0.9889461398124696,0.0,accept,unanimous_agreement
1746725784,21300,"yeah, shared constructor/code with the mmap backend is an implementation detail. it tells nothing about its nature. and could change in the future. so it should be something different. i don't have any particular ideas though.",0,0,0,0.7599648833274841,0.7746440768241882,0.9762883186340332,0.0,accept,unanimous_agreement
1746740206,21300,"or both. such as ""posix-compliant (fread/fwrite)"" and ""mmap fallback (pread/pwrite)"". as for pread-disk-io it would be just ""pread"" as libtorrent calls it [a link]",0,0,0,0.9887481927871704,0.995662271976471,0.9924094676971436,0.0,accept,unanimous_agreement
1746740548,21300,"and when we switched it to pread-disk-io under the hood, some users might still think it is the old one. so we talk only about ui option name or internal name too?",0,0,0,0.9856134057044984,0.991068959236145,0.994116187095642,0.0,accept,unanimous_agreement
1746755362,21300,"i don't think users are interested in underlying functions. and `posix-compliant` name is already widely used. new option should not contain ""mmap"" word imo, as it is misleading. better to call it something like `fallback io`.",0,0,0,0.9662747383117676,0.9823160767555236,0.9551500082015992,0.0,accept,unanimous_agreement
1746757942,21300,both. imo they should be distinctively named. you have to have something first before fallback to something else. it could be a compromise if nothing else is better.,0,0,0,0.9372836351394652,0.9472962617874146,0.9375415444374084,0.0,accept,unanimous_agreement
1746789528,21300,`diskiotype::mmapfallback` works for internal name i think. as for user-facing name... maybe we make it straight: `disable memory mapped files`. it nicely summarizes the whole thing to the user.,0,0,0,0.9738532304763794,0.9910264611244202,0.9591164588928224,0.0,accept,unanimous_agreement
1746793145,21300,":thumbs_up: i strongly insist to not use ""mmap"" in its name.",0,0,1,0.4973482489585876,0.97074156999588,0.906292200088501,0.0,accept,majority_agreement
1746797155,21300,this name kinda implies that other options don't support multithreading. which is not true of course. and the amount of threads is controlled by respective option (`asynchronous i/o threads`). if you set it to 1 it is not multithreaded anymore.,0,0,0,0.9757966995239258,0.9651228189468384,0.957894504070282,0.0,accept,unanimous_agreement
1746809364,21300,"what about negation? ""not mmap"" aka ""disable memory mapped files""?",0,0,0,0.9653543829917908,0.9810251593589784,0.9895610809326172,0.0,accept,unanimous_agreement
1746869717,21300,"or maybe something neutral. ""simple io"", ""regular io"", ""basic io"", ""standard io"", ""normal io"", ""conventional io"" ...?",0,0,0,0.9765730500221252,0.9895771741867064,0.981881022453308,0.0,accept,unanimous_agreement
1747044834,21300,"in fact, it's hard to avoid mentioning some internal details in the name of these options, because they are essentially low-level settings. i would just not mention the unimportant details, like the fact that we use the same thing to provide different types of i/o. by enabling/disabling memory mapping, we essentially get two different i/o types (mmap based and pread/pwrite based). we do not say that there is a one-to-one correspondence with some low-level subsystem of libtorrent. there is always an opportunity to be misleading when it comes to some advanced settings. in any case, we cannot provide all information through the option name. details can be specified somewhere in documentation, in option tooltip, in the feature announcement on the official website, etc. when we replace it with a new pread/pwrite based implementation, we can present it as an improvement of the old one.",0,0,0,0.933871567249298,0.9459789395332336,0.961661159992218,0.0,accept,unanimous_agreement
1747124730,21300,"soo, effectively you are saying to keep it as is? and what about the internal name?",0,0,0,0.973892331123352,0.9810889959335328,0.9921039342880248,0.0,accept,unanimous_agreement
1747193097,21300,"then i would just call the new option ""customized"" and explain the details in the tooltip. the old one is not a proper disk io type. it is mmap type's fallback/special case behavior. present the new one as an improvement would be false advertising as they are different things. the whole naming issue arose is because it is modifying something instead of a proper disk io type itself. if obscure names such as ""customized"" is still objected. then the only way forward is to present the `mmap_file_size_cutoff` and `disk_write_mode` options instead of disguising them as a new disk io type.",0,0,0,0.965794026851654,0.8908835053443909,0.9723585247993468,0.0,accept,unanimous_agreement
1747224149,21300,"i like that variant actually. i see a problem with that, as stated above. [a link]",1,1,1,0.91960346698761,0.8294445872306824,0.7282127141952515,1.0,accept,unanimous_agreement
1747242040,21300,"this is exactly ""proper disk io type"" from an external point of view. you just can't abstract away from the unimportant implementation details of to accept it. i can just copy its code, hardcodely disable memory mapping (and even delete all related code), what would you call it in that case? a ""proper disk io type"" or not?",0,0,0,0.9806484580039978,0.9627828001976012,0.9838632345199584,0.0,accept,unanimous_agreement
1747248126,21300,"i'll reply here: it depends on how the option is named/presented and also, most of the time the options in advanced settings are just fields for power users to access libtorrent knobs. it doesn't target the novice/average users.",0,0,0,0.9831882119178772,0.9880529642105104,0.9920220375061036,0.0,accept,unanimous_agreement
1747498596,21300,if you provided another `disk_io_constructor_type` then it is a genuine disk io type. for our case here it is just modified mmap: mmap disk io with customized behavior.,0,0,0,0.989492893218994,0.9937561750411988,0.9941693544387816,0.0,accept,unanimous_agreement
1747521805,21300,maybe call it that? `modified memory mapped files (minimal use)`,0,0,0,0.986277163028717,0.9942532181739808,0.9911205172538756,0.0,accept,unanimous_agreement
1747547528,21300,"the thing is, the mmap is disabled completely, there is no minimal use. that's why i and insist on not including mmap into the description. on the other hand, i don't think users are very interested in internals. so we might as well simply lie about its true nature and call it something like `memory mapped files (optimized)`.",0,0,0,0.9286516904830932,0.9637594819068908,0.946041226387024,0.0,accept,unanimous_agreement
1747553295,21300,"i still think this is the best compromise here. maybe even `custom optimized`? very neutral wording, then we could explain what exactly it does in the docs. and use `diskiotype::mmapfallback` internally.",0,0,0,0.9693418741226196,0.9714635610580444,0.7503696084022522,0.0,accept,unanimous_agreement
1747556218,21300,"`optimized` doesn't sound very accurate as it's not clear which way the optimization is going, `minimal use` is closer to that. after all, these are really parameters for power users.",0,0,0,0.8954783082008362,0.9761210680007936,0.95216566324234,0.0,accept,unanimous_agreement
1747577642,21300,memory mapping based thing that doesn't use memory mapping completely is nonsense.,-1,-1,-1,0.96817946434021,0.8110244274139404,0.868751585483551,-1.0,accept,unanimous_agreement
1747578539,21300,"yeah, that's a valid point. but in that case, i don't see how `minimal use` is better than plain simple `disabled` though. also true. i personally don't mind how it's called. but the more concise name we pick, the easier it will be to talk with people about it.",0,0,0,0.6737966537475586,0.847535252571106,0.8618647456169128,0.0,accept,unanimous_agreement
1747590207,21300,or `custom simplified`? as it is reduced from mmap + fallback to only fallback.,0,0,0,0.9885712265968324,0.9943126440048218,0.9905842542648317,0.0,accept,unanimous_agreement
1747590421,21300,"and if we still want to expose some technical details, i would say `force pread/pwrite` sounds good to me. sounds reasonable too.",1,0,0,0.7668696641921997,0.6255746483802795,0.8152527809143066,0.0,accept,majority_agreement
1747592231,21300,"`modified memory mapped files (disabled)` as an option, yes, but it sounds really weird.",-1,-1,-1,0.9809429049491882,0.9897512197494508,0.967774212360382,-1.0,accept,unanimous_agreement
1747607016,21300,i could settle on this. at least it is implying it has tweaked behavior.,0,0,0,0.979397475719452,0.944524586200714,0.979897916316986,0.0,accept,unanimous_agreement
1747617055,21300,"ok then, `diskiotype::mmapfallback` + `force pread/pwrite`.",0,0,0,0.9862789511680604,0.9940317273139954,0.9939464926719666,0.0,accept,unanimous_agreement
1747624155,21300,"if you want to refer to these two io types as the same, but with enabled/disabled memory mapping, the main part of name should not contain ""memory mapping"", for example: 1. regular (memory mapping enabled) 2. regular (memory mapping disabled) (""regular"" is just an example.)",0,0,0,0.9878805875778198,0.9950373768806458,0.9903141856193542,0.0,accept,unanimous_agreement
1747632951,21300,i guess that's outside of the scope of this pr.,0,0,0,0.803016185760498,0.96269690990448,0.9371148347854614,0.0,accept,unanimous_agreement
1747984035,21300,"i really don't understand that. one option uses memory mapping, another uses pread/pwrite. why mention the negligent details? as about `diskiotype::mmapfallback`. what life cycle do you think for this option? should it be replaced by a new one when it becomes available? or you want to leave both? in any case, this is a user-visible string used in the configuration file so i wouldn't use `mmap` in it as well.",-1,-1,-1,0.6143030524253845,0.659672737121582,0.673378586769104,-1.0,accept,unanimous_agreement
1747992748,21300,what do you suggest then? something closer to the user-visible string? --- p.s. this discussion reminds me a famous quote :grinning_face_with_sweat:,-1,0,0,0.8922467827796936,0.5507497787475586,0.6940022706985474,0.0,accept,majority_agreement
1749131302,21300,"yes, until it is known that the new one don't have nasty bugs or the old one is inferior than the new one in every way.",-1,0,0,0.5238298177719116,0.5594516396522522,0.7308870553970337,0.0,accept,majority_agreement
1749241842,21300,"i just want the names of the options to reflect their distinctive features (one type of i/o uses memory mapped files, the other uses regular i/o feature), and not unimportant details (like the fact that both are provided by the same libtorrent classes). the mention of memory mapping in the name of the discussed i/o type (both ui and internal), which does not involve the use of such nemory mapping, is unacceptable.",-1,0,-1,0.5516883134841919,0.9763516187667848,0.7461661696434021,-1.0,accept,majority_agreement
1749244417,21300,understood. i'll make them in sync then. it's not like we have technical restrictions about it.,0,0,0,0.9077831506729126,0.8980407118797302,0.8846487998962402,0.0,accept,unanimous_agreement
1759022303,21300,"and yet, why it is ""**force** pread/pwrite""? is there any other ""pread/pwrite"" based type available that isn't ""force"" unlike this one?",0,0,0,0.9770854711532592,0.9944827556610109,0.9670904278755188,0.0,accept,unanimous_agreement
1759089524,21300,it would be in the future.,0,0,0,0.9707983136177064,0.9889215230941772,0.9872495532035828,0.0,accept,unanimous_agreement
1759939340,21300,"in general, you can't know anything about it. we need to name this type only based on its distinctive features (relative to current types). but since in this case we know about the new io backend being developed, which may be added as a separate io type in the future, we could immediately take this into account when naming. but anyway, is the current type (added by this pr) different from the new one in such a way that we can describe this difference with the word ""force""? i don't believe it's appropriate. so i would just name it ""pread/pwrite"" (""preadpwrite"" internally) since this says enough about its features relative to the rest of the existing io types, and think about the name of the new type when it becomes available.",0,0,0,0.816412091255188,0.961493968963623,0.9711960554122924,0.0,accept,unanimous_agreement
1759991567,21300,"so i would just name it ""pread/pwrite"" (""preadpwrite"" internally) since this says enough about its features relative to the rest of the existing io types, and think about the name of the new type when it becomes available. there are some minor differences between the two approaches. if they are the same, then arvidn should be able to get it done quickly, isn't? currently, it is like driving a hybrid car with batteries disabled. it will run but it isn't in the best condition. i would really like to have differentiate between these two and not impersonating the fallback mode as a native one.",0,0,0,0.7813272476196289,0.9279791116714478,0.9317901134490968,0.0,accept,unanimous_agreement
1759998304,21300,"the point is how it is presented at the user level. you're talking about a case where the battery on/off switch is available to the user of a hybrid car. but in this case, we are talking about the case when the car is assembled from the same parts as the hybrid, but the batteries are not mounted at all. what's the point of talking about it as a hybrid if it can only work in one single mode? this low-level information could only be of interest to a very advanced user in the same way as the information that different processors with different numbers of cores and cache size are actually created from the same crystals, physically having the same number of cores, cache size, etc. p.s. perhaps using ""force pread/pwrite"" name would be acceptable if the existing type was called like ""hybrid (mmap, pread/pwrite)"".",0,0,0,0.9453524947166444,0.9654439091682434,0.9745627045631408,0.0,accept,unanimous_agreement
1780220309,21300,"i think we should resolve this. it is very frustrating to be blocked for such insignificant reason. people want that functionality, the naming could be changed later.",-1,-1,-1,0.981317698955536,0.9917929768562316,0.9884240031242372,-1.0,accept,unanimous_agreement
1780927126,21300,"it's not a problem to change name in ui. but if this internal option name leaks into the release, then in order to change it, we will either have to maintain both names (old and new), or add an update code replacing it in the configuration file. agree. my reasoning is still looks valid for me. i appeal you to think again about whether `forcepreadpwrite` is really better than `preadpwrite`. answer the question, then what will you name the new option so that it reflects its difference from this one? if everything suits you, then i give in, you can do it your own way - your responsibility.",1,1,0,0.5265699625015259,0.9454845190048218,0.7425821423530579,1.0,accept,majority_agreement
1780932658,21300,"ps. for me, the following names look acceptable (both having only one option and both): 1. preadpwrite, preadpwrite2 (simplest case) 2. preadpwrite, advancedpreadpwrite 3. preadpwrite, bufferedpreadpwrite 4. simplepreadpwrite, preadpwrite",0,0,0,0.9638940691947936,0.9211331009864808,0.9096508026123048,0.0,accept,unanimous_agreement
1781119507,21300,"this is related to the code and config file, right? i could agree on option 4 (or `simplifiedpreadpwrite, preadpwrite`). i don't mind the ui also use it, although it is a little strange.",0,0,0,0.9050982594490052,0.7662915587425232,0.9068557620048524,0.0,accept,unanimous_agreement
1781142617,21300,"yes. as i mentioned above, it is not difficult to change the text in the ui if the original version is later found unsuitable. i think ""simplified pread/pwrite"" would be acceptable first approach (at least it much better than ""force pread/pwrite"".",0,0,0,0.9709354043006896,0.9789282083511353,0.961676061153412,0.0,accept,unanimous_agreement
1781182436,21300,"honestly, the word `simplified` brings more associations with simplified chinese for me. :eyes: anyway, waiting for a final decision.",-1,-1,1,0.6215376853942871,0.6412310600280762,0.9174533486366272,-1.0,accept,majority_agreement
1781301505,21300,"`simplified`, `simple` i don't have strong opinion on one. you can just pick one.",0,0,0,0.8935866355895996,0.8307732939720154,0.9309237599372864,0.0,accept,unanimous_agreement
1781345672,21300,"ok, i hope we agree on it.",0,0,1,0.8820523619651794,0.7439377903938293,0.6971202492713928,0.0,accept,majority_agreement
355178640,11614,add them in alphabetical order. [a link],0,0,0,0.9844247102737428,0.9823593497276306,0.9948716163635254,0.0,accept,unanimous_agreement
355178764,11614,curly braces aren't needed in this if statement. [a link],0,0,0,0.9864718317985536,0.992046594619751,0.993117332458496,0.0,accept,unanimous_agreement
355183109,11614,there is src/base/profile.cpp file so this declaration should not be here.,0,0,0,0.968414843082428,0.9929746389389038,0.993002712726593,0.0,accept,unanimous_agreement
355201651,11614,added this because there is same piece here: [a link] should i try to move it all to src/base/profile.cpp ?,0,0,0,0.9893592596054076,0.9942135214805604,0.99554705619812,0.0,accept,unanimous_agreement
355203186,11614,"maybe yes, at least it should try to fit in the helper functions that file provides. let us wait for others opinion.",0,0,0,0.972015917301178,0.9860917925834656,0.9774953722953796,0.0,accept,unanimous_agreement
355258117,11614,"imo, it's not ""command line options"" job.",0,0,0,0.9711028933525084,0.9808295965194702,0.9676086902618408,0.0,accept,unanimous_agreement
355382543,11614,"agreed, checking some folder for existence is not related to command line parsing. i suggest to do that after command line parsing",0,0,0,0.98309326171875,0.95814311504364,0.98614501953125,0.0,accept,unanimous_agreement
355580028,11614,do you mean it's better to add folder check here: [a link] ? should i also add folder checks here: [a link] and here: [a link] or these two places are ok to check only for `m_commandlineargs.portablemode`?,0,0,0,0.9885989427566528,0.9941920638084412,0.9949040412902832,0.0,accept,unanimous_agreement
355874543,11614,"just do it in only one place, right exactly before the line you posted first. just set `m_commandlineargs.portablemode` to `true` in case if folder exists, and leave everything as is. it must work",0,0,0,0.9829676747322084,0.9893988370895386,0.9915966391563416,0.0,accept,unanimous_agreement
355894506,11614,"spoofing command line parameters doesn't seem like the better solution. ideally, it should be checked in the place where the final decision is made.",0,0,0,0.7390945553779602,0.9684131741523744,0.9457714557647704,0.0,accept,unanimous_agreement
356205458,11614,i think it's better to set `m_commandlineargs.portablemode` to `true` before [a link] because in this case we can still get useful messages from [a link] updated pull request.,0,0,0,0.9879981279373168,0.992584764957428,0.985045611858368,0.0,accept,unanimous_agreement
356516591,11614,you are checking the profile folder every time you call this function! you should only do that once.,0,0,0,0.8771159648895264,0.9527449011802672,0.917189598083496,0.0,accept,unanimous_agreement
356596447,11614,replaced function call with `m_portablemodeenabled`: [a link],0,0,0,0.9884861707687378,0.9882752895355223,0.9962169528007508,0.0,accept,unanimous_agreement
356636306,11614,maybe we should remove this check completely? because if there is `profile` folder in app dir and user wants to specify different profile with `--profile=` command line argument then app will not start at all.,0,0,0,0.986402690410614,0.9949274063110352,0.9842475652694702,0.0,accept,unanimous_agreement
356642554,11614,removed.,0,0,0,0.9311882257461548,0.9782117605209352,0.9612457156181335,0.0,accept,unanimous_agreement
356653528,11614,also here we seems to need `&& m_commandlineargs.profiledir.isempty()` because else `profile` folder will be used instead of `m_commandlineargs.profiledir`.,0,0,0,0.9870612621307372,0.994992196559906,0.9943243265151978,0.0,accept,unanimous_agreement
356949649,11614,"nitpick, i would use ""using config directory: %1""",0,0,0,0.9630087018013,0.988551378250122,0.9950487017631532,0.0,accept,unanimous_agreement
356950969,11614,please help us fix the coding style by adding parentheses to the last parameter: `(m_commandlineargs.relativefastresumepaths || m_portablemodeenabled)`,0,0,0,0.981031060218811,0.9945034980773926,0.9956538677215576,0.0,accept,unanimous_agreement
356951194,11614,"not your code, please help us fix the coding style by adding `const` to function: `void application::validatecommandlineparameters() const`",0,0,0,0.9829749464988708,0.9937048554420472,0.9945634007453918,0.0,accept,unanimous_agreement
356954587,11614,please rename it to reflect its actual meaning: m_defaultprofilefolderfound. current name confuses.,0,0,0,0.9517056941986084,0.9814810752868652,0.9936506152153016,0.0,accept,unanimous_agreement
356990500,11614,"seems like wrong logic here. iirc, if user specifies profile dir via command line it will used even if default profile dir is found. but if user doesn't specify ""relative fastresume"" param then it doesn't want it to use. i would change workflow to the following: 1. process profile related command-line parameters first. if no one is used then 2. try to find default profile folder.",-1,-1,0,0.6122401356697083,0.5003219246864319,0.586301863193512,-1.0,accept,majority_agreement
357140174,11614,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
357140264,11614,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
357140389,11614,changed.,0,0,0,0.9753402471542358,0.9758284687995912,0.9680466055870056,0.0,accept,unanimous_agreement
357144974,11614,"not sure if i understand what the logic should be with this `relativefastresumepaths` command line parameter. as i understand `portable` mode should always use `relativefastresumepaths`, but specifying `--profile=` command line parameter doesn't mean that `relativefastresumepaths` should be used if it's not specified. is that correct? if so, then maybe moving check `&& m_commandlineargs.profiledir.isempty()` from [a link] to [a link] would do it?",0,0,0,0.9855532050132751,0.991576611995697,0.8597245216369629,0.0,accept,unanimous_agreement
357888976,11614,"ok, moved `m_commandlineargs.profiledir.isempty()` check to the top. let me know if i should change anything else.",0,0,0,0.9839709401130676,0.9915077686309814,0.9864364266395568,0.0,accept,unanimous_agreement
357905732,11614,"maybe it's not that important to you, but i would prefer to have explicit logic (this makes the code easier to read/maintain). [code block] also ""relative fastresume"" option has no meaning without ""profile"" option so it should be validated accordingly. i think we should throw exception in case when it is specified without ""profile"" option. [code block] then you even can use `m_commandlineargs.relativefastresumepaths` instead of `!m_commandlineargs.profiledir.isempty() && m_commandlineargs.relativefastresumepaths` in the code above.",0,0,0,0.9663829803466796,0.9893903136253356,0.9802300930023192,0.0,accept,unanimous_agreement
357908804,11614,"sorry, it seems i'm wrong. it can have a meaning even with default profile (not portable). so now your code seems to be correct, but `m_defaultprofilefolderfound` now has other meaning (default portable profile folder is found and isn't overriden by command-line parameters, so ""portable mode enabled"").",-1,-1,-1,0.9850984811782836,0.9826647639274596,0.9875563979148864,-1.0,accept,unanimous_agreement
357909268,11614,"i would add [code block] also i would move appropriate check from ""validatecommandlineparameters"" here (since it doesn't really validate command-line parameters themselves) so log messages will in correct order (""portable mode enabled"" and then ""relative fastresume is implied""). also we will have no additional member variable.",0,0,0,0.988351047039032,0.9898223876953124,0.9947808384895324,0.0,accept,unanimous_agreement
357943051,11614,"thanks for the suggestions. i changed the code, please let me know if i should change anything else.",1,1,1,0.8701778650283813,0.736565113067627,0.965065062046051,1.0,accept,unanimous_agreement
357943224,11614,"moved check from ""validatecommandlineparameters"" here added additional log message. please let me know if i should change anything else.",0,0,0,0.9848273992538452,0.9909718036651612,0.9729079604148864,0.0,accept,unanimous_agreement
357952371,11614,please make this inside `if (portablemodeenabled)`. [code block],0,0,0,0.988783061504364,0.9944075345993042,0.9961685538291932,0.0,accept,unanimous_agreement
357952494,11614,"will this work? `tr(""running in portable mode. auto detected profile folder at: %1"").arg(profiledir)`",0,0,0,0.983249306678772,0.9915021657943726,0.9948807954788208,0.0,accept,unanimous_agreement
357953550,11614,it will show almost the same path as message above. are you sure we need both of them?,0,0,0,0.979458749294281,0.978744626045227,0.9943565726280212,0.0,accept,unanimous_agreement
357953689,11614,"i don't insist on that. but the point is `(auto detected)` has not enough information to users, they won't know what path is auto detected.",0,0,0,0.8027313351631165,0.7166594862937927,0.95037043094635,0.0,accept,unanimous_agreement
357953744,11614,or maybe: [code block],0,0,0,0.9847508668899536,0.992775559425354,0.9918781518936156,0.0,accept,unanimous_agreement
417068144,12557,"alas, we can't yet use arrow functions while we support ie11. i'd love to drop ie11 support (as bootstrap 5 has [a link], but we've collectively decided to support it for a bit longer.",1,0,0,0.4826050996780395,0.5846609473228455,0.860626220703125,0.0,accept,majority_agreement
417068210,12557,please use triple equals `===` throughout,0,0,0,0.9872204661369324,0.99151611328125,0.993221402168274,0.0,accept,unanimous_agreement
417068732,12557,what does `imp` stand for in `invisibleimp`? maybe there's a more descriptive name that can be used instead.,0,0,0,0.980225384235382,0.9926629066467284,0.9871578812599182,0.0,accept,unanimous_agreement
417070580,12557,can you extract this conditional to a named variable to better document its purpose (e.g. `const tabsinititalized = `),0,0,0,0.989138662815094,0.994266927242279,0.9949742555618286,0.0,accept,unanimous_agreement
417071551,12557,this is really hard to understand. can you document what each of these conditionals means?,-1,-1,-1,0.9079930186271667,0.963755190372467,0.9761096239089966,-1.0,accept,unanimous_agreement
417072357,12557,you can move the `addrule` line out of the conditionals since it's the same for all three cases.,0,0,0,0.9882004261016846,0.991766393184662,0.9940662384033204,0.0,accept,unanimous_agreement
417073168,12557,nit: put a space between comment syntax and the actual comment [code block],0,0,0,0.9881747961044312,0.9919748902320862,0.994281530380249,0.0,accept,unanimous_agreement
417074405,12557,"typo on ""content""",0,0,0,0.9876463413238524,0.9875341653823853,0.995050847530365,0.0,accept,unanimous_agreement
417074716,12557,i'd prefer if you replaced most of this inline styling with rules defined in the `,0,0,0,0.9840150475502014,0.9890540838241576,0.9887407422065736,0.0,accept,unanimous_agreement
417076939,12557,"please provide a `break` statement in the last case. it reduces the likelihood that someone will forget to add it, should they ever add additional cases.",0,0,0,0.985256850719452,0.9943495392799376,0.9941944479942322,0.0,accept,unanimous_agreement
417081859,12557,please move the interval duration to a top-level variable. i also think we should bump it `1500` for consistency with our main data sync.,0,0,0,0.9869861006736756,0.9936404824256896,0.9946011304855348,0.0,accept,unanimous_agreement
417218919,12557,imp stands for the css `!important` modifier. but since it's bad form anyway i changed things to make the normal `invisible` class work.,0,0,0,0.8686821460723877,0.6335554122924805,0.7745457887649536,0.0,accept,unanimous_agreement
417226401,12557,as far as i could tell ie11 support had already (unintentionally) been dropped. since the refactor from 4.2.0 ie doesn't load the page correctly. if you still want i can replace all arrow functions.,0,0,0,0.9869765639305116,0.9794418811798096,0.9882999658584596,0.0,accept,unanimous_agreement
417227921,12557,changed things for `rss.html` and `rssdownloader.html`. i think for the dialog boxes the inline styling is okay.,0,0,0,0.9544087648391724,0.9854514598846436,0.9242315888404846,0.0,accept,unanimous_agreement
417248679,12557,+1 for officially dropping support for ie 11. i think it has been long enough anyway.,1,0,1,0.7854186296463013,0.8559913039207458,0.9273535013198853,1.0,accept,majority_agreement
417760989,12557,`path ? (path + '\\' + feedurl) : ''`,0,0,0,0.9833834767341614,0.9932987093925476,0.9807685017585754,0.0,accept,unanimous_agreement
417761352,12557,curly brackets should be omitted when the if-body only consist of a single line.,0,0,0,0.982262909412384,0.988186538219452,0.99133563041687,0.0,accept,unanimous_agreement
417762213,12557,is `httpserver` the right context?,0,0,0,0.9863218069076538,0.9932053089141846,0.995185911655426,0.0,accept,unanimous_agreement
417763101,12557,maybe create a rss folder for them?,0,0,0,0.9826809763908386,0.9940966367721558,0.9923629760742188,0.0,accept,unanimous_agreement
417764409,12557,"i'm not sure, will this work? `initializetabs` is defined later.",0,0,-1,0.9620999097824096,0.8721925020217896,0.5597708821296692,0.0,accept,majority_agreement
417765151,12557,please add parentheses,0,0,0,0.9794120192527772,0.9871538281440736,0.9947016835212708,0.0,accept,unanimous_agreement
417765472,12557,better use `math.max()`,0,0,0,0.9730367064476012,0.9926515221595764,0.9936112761497498,0.0,accept,unanimous_agreement
417765629,12557,typo: singel,0,0,0,0.985539972782135,0.9784663319587708,0.9903095364570618,0.0,accept,unanimous_agreement
417765821,12557,i would use a `switch ()` instead.,0,0,0,0.9879438877105712,0.9918415546417236,0.9906449317932128,0.0,accept,unanimous_agreement
417766020,12557,`switch ()` here too.,0,0,0,0.9874638319015504,0.9905495047569276,0.9941741824150084,0.0,accept,unanimous_agreement
417915552,12557,"works because `initializetabs` isn't actually called there. it's only called on click so after initialization. though since there was quite a bit of duplicate code i moved things around and renamed the function to `updatetabdisplay` to better reflect its purpose. i also removed the adding and removing of the tabs event listeners , i think it's fine to have those three event listeners even when the buttons are not displayed. please take a look.",0,0,0,0.9225042462348938,0.946801781654358,0.9185703992843628,0.0,accept,unanimous_agreement
417922114,12557,the string is already used in `rename_file.html` and so already translated to some languages.,0,0,0,0.9889005422592164,0.99492210149765,0.995166540145874,0.0,accept,unanimous_agreement
417923906,12557,i think all the dialog html files kind of clutter the directory. should i move all dialogs to `private/dialogs` and all rss specific dialogs to `private/dialogs/rss`?,0,0,0,0.985770344734192,0.9103875160217284,0.9185134768486024,0.0,accept,unanimous_agreement
417988508,12557,"i think you should limit to the newly added files. it is not a good idea to include too many changes in a pr, especially in one that already has 2000+ lines addition...",-1,0,0,0.9672891497612,0.8623024821281433,0.9197706580162048,0.0,accept,majority_agreement
418013392,12557,do you think in general moving the dialogs to a separate folder is a good idea? i would create a new pr moving them.,0,0,0,0.9552499651908876,0.9832642674446106,0.9907139539718628,0.0,accept,unanimous_agreement
418023325,12557,"seems every html file except index.html is a dialog, if so, then i don't have strong feelings for it.",-1,-1,-1,0.9313408732414246,0.8631342053413391,0.6550920009613037,-1.0,accept,unanimous_agreement
418256120,12557,"all html files in the root of the ""private"" directory are ""full"" html pages. as pointed out, they're mostly dialogs that are displayed in iframes. anything in the ""views"" directly is a partial page that's meant to be added to an existing page. i think for now this pr should stick to this same basic principle, and then we can target reorganizing the webui files in a separate pr.",0,0,0,0.9752951264381408,0.9907482266426086,0.9849621057510376,0.0,accept,unanimous_agreement
425189621,12557,id should use camelcase.,0,0,0,0.986013889312744,0.9904532432556152,0.9871482253074646,0.0,accept,unanimous_agreement
425192325,12557,don't you prefer using `let`?,0,0,0,0.9469788670539856,0.9933692812919616,0.9932108521461488,0.0,accept,unanimous_agreement
425195169,12557,"either use the old `function(){}` or use arrow functions, at least it should be consistent in a pr.",0,0,0,0.9879526495933532,0.9943552017211914,0.9946126937866212,0.0,accept,unanimous_agreement
425198125,12557,is it required to escape the characters? did you tried not escaping them?,0,0,0,0.9636104702949524,0.9913792610168456,0.9875409007072448,0.0,accept,unanimous_agreement
425202876,12557,please use parentheses consistently to arrow functions.,0,0,0,0.98191499710083,0.9934757351875304,0.9906340837478638,0.0,accept,unanimous_agreement
425206172,12557,is it possible to give them a default value?,0,0,0,0.985499382019043,0.9934306740760804,0.9930700659751892,0.0,accept,unanimous_agreement
425290280,12557,you are totally right this shouldn't be escaped. i copied the strings from the .ts file without checking if replacement actually works.,0,0,0,0.8037629127502441,0.9267343282699584,0.9650991559028624,0.0,accept,unanimous_agreement
425307317,12557,the context menus didn't need to be in this scope so i moved them in to the init function. for `feeddata` and `pathbyfeedid` i provided a default. for `feedrefreshtimer` i don't think there is a good default. while at it i also removed the exports that weren't being used.,0,0,0,0.982157826423645,0.9874540567398072,0.9880032539367676,0.0,accept,unanimous_agreement
709728642,15452,i would prefer they are in this order: [code block],0,0,0,0.9815385341644288,0.9833970665931702,0.9926447868347168,0.0,accept,unanimous_agreement
709729126,15452,maybe add an empty line above.,0,0,0,0.9791669845581056,0.9876483678817748,0.987019658088684,0.0,accept,unanimous_agreement
709731260,15452,this should be reset to default.,0,0,0,0.9846696853637696,0.9827179312705994,0.9937058091163636,0.0,accept,unanimous_agreement
709731446,15452,"and set ""horizontal policy"" to ""expanding"".",0,0,0,0.9839710593223572,0.9928542971611024,0.994665265083313,0.0,accept,unanimous_agreement
709788977,15452,can't we simplify this code with something like [code block] maybe also see `std::equal`,0,0,0,0.9775658845901488,0.9924097061157228,0.9929988384246826,0.0,accept,unanimous_agreement
710046164,15452,all comments addressed so far.,0,0,0,0.981353521347046,0.9888222217559814,0.9882395267486572,0.0,accept,unanimous_agreement
710046352,15452,maybe it's simplified for those who can read that :). i'm not familiar with std and i wouldn't know how to change/fix something like that (if asked to).,1,-1,1,0.8382576107978821,0.7534331679344177,0.9753859639167786,1.0,accept,majority_agreement
712695872,15452,the following will look more consistent: [code block] i am also sure that you should not change state of `m_ui->checkautotmm` until all the torrents are checked.,0,0,0,0.9869188666343688,0.9726808667182922,0.9943706393241882,0.0,accept,unanimous_agreement
712697165,15452,the same is about other similar checkboxes. you should set these states only after all torrents are traversed: [code block],0,0,0,0.9873154163360596,0.9929577112197876,0.9950652718544006,0.0,accept,unanimous_agreement
712699344,15452,"shouldn't you also show automatically assigned save path here? don't remember how ""add new torrent"" dialog does it...",0,0,0,0.8394896388053894,0.9829332828521729,0.991534411907196,0.0,accept,unanimous_agreement
714672893,15452,all done.,0,0,0,0.9703757166862488,0.9746243953704834,0.9762905836105348,0.0,accept,unanimous_agreement
716150126,15452,please keep the old values.,0,0,0,0.9830213785171508,0.9811756014823914,0.9938296675682068,0.0,accept,unanimous_agreement
716150192,15452,wrong order,-1,0,-1,0.8185693025588989,0.6354040503501892,0.5811174511909485,-1.0,accept,majority_agreement
716150555,15452,"you should remove `#include ""base/utils/fs.h""` from this file.",0,0,0,0.9877166152000428,0.9944226145744324,0.9955620765686036,0.0,accept,unanimous_agreement
716150823,15452,"these 2 lines should move above `q_assert()`. or another way, move `q_assert()` to the top of this function block.",0,0,0,0.9889472723007202,0.9934293627738952,0.993327498435974,0.0,accept,unanimous_agreement
716151899,15452,"preferably these should follow the order on ui, so this line should be atop of the previous line.",0,0,0,0.986517071723938,0.987692892551422,0.9938504695892334,0.0,accept,unanimous_agreement
716152322,15452,`const qstring savepath`,0,0,0,0.9867934584617616,0.98993319272995,0.9937548637390136,0.0,accept,unanimous_agreement
716152772,15452,you can omit these 2 lines and refactor it further: [code block],0,0,0,0.9877666234970092,0.9895283579826356,0.9952284097671508,0.0,accept,unanimous_agreement
716226028,15452,"i added the ""download sequential"" checkboxes which increased the minimum width and the same goes for height from the other options. the other comments are addressed.",0,0,0,0.9883771538734436,0.9915539622306824,0.9948813915252686,0.0,accept,unanimous_agreement
716575685,15452,why is checking for `!m_ui->combocategory->currenttext().isempty()` needed?,0,0,0,0.9821017384529114,0.9912533164024352,0.9903433322906494,0.0,accept,unanimous_agreement
716807195,15452,because it would show the default save path if it's empty.,0,0,0,0.9838362336158752,0.9872766137123108,0.991028130054474,0.0,accept,unanimous_agreement
716823007,15452,"and what do you expect to see in this case? ""auto managed"" torrents with ""empty"" category are saved under default save path, aren't they?",0,0,0,0.9876844882965088,0.9943195581436156,0.9937129616737366,0.0,accept,unanimous_agreement
716869444,15452,empty category also means mixed categories (in this dialog) so i missed that case. i'll pass `allsamecategory` to `handletmmchanged()` and use that instead.,0,0,0,0.9706573486328124,0.990448534488678,0.9925010800361632,0.0,accept,unanimous_agreement
716875935,15452,doesn't seem to work with connect(). should i make `allsamecategory` member var or maybe there is another way?,0,0,0,0.9598922729492188,0.9845667481422424,0.9902156591415404,0.0,accept,unanimous_agreement
716883018,15452,why not? but i would make it in a slightly different way. i would declare `m_commoncategory` member as `std::optional ` and use it for both common category name and indicator of its presence. do you understand what i mean?,0,0,0,0.9825787544250488,0.9675856828689576,0.9870731830596924,0.0,accept,unanimous_agreement
716888033,15452,"on the other hand, it's not a problem to get the name of a common category, just knowing that it exists (we still have a list of all torrents), so a boolean member variable is enough. offtopic: i just generally dislike the existing names like `allsamexxx`.",-1,0,-1,0.969666600227356,0.931347906589508,0.7719036340713501,-1.0,accept,majority_agreement
717042383,15452,"yep, now that i've read up a little on std::optional. i think the bool is simpler though so i used that. i'm open to suggestions... that don't involve refactoring.",0,0,0,0.8335556387901306,0.9002806544303894,0.8380816578865051,0.0,accept,unanimous_agreement
720772591,15452,typo: isfirsttorrent**l**sequentialenabled [code block],0,0,0,0.9858734607696532,0.9846352338790894,0.9956218600273132,0.0,accept,unanimous_agreement
720796356,15452,fixed,0,0,0,0.975196123123169,0.9281549453735352,0.920660674571991,0.0,accept,unanimous_agreement
723747312,15452,"yet another case i didn't consider. this change won't be enough. i thought about setting the current index of the category combobox to -1 for mixed and then check for it on `accept()` but this doesn't cover when someone wants to set ""no category"" with the keyboard in the lineedit (by removing whatever is in it which can't be done when it's empty). they'd have to select the empty item from the dropdown list. when every string can be a category, what can be put in the lineedit to denote mixed categories? a conundrum...",0,-1,-1,0.916814386844635,0.6446159482002258,0.8913224339485168,-1.0,accept,majority_agreement
732887437,15452,you can refactor the following statement to avoid checking the same variable twice: [code block],0,0,0,0.9876720905303956,0.9927685260772704,0.9948634505271912,0.0,accept,unanimous_agreement
742918457,15452,"do we really need to handle this case here? if autotmm is mixed then ""save path"" should be already empty and disabled, shouldn't it?",0,0,0,0.9800254106521606,0.989484965801239,0.9903614521026612,0.0,accept,unanimous_agreement
743092218,15452,does `ischecked()` return `true` in case check box is partially checked?,0,0,0,0.988110899925232,0.9945090413093568,0.9952127933502196,0.0,accept,unanimous_agreement
743634921,15452,anyway you should use `checkstate()` here to avoid confusion.,0,0,0,0.986125648021698,0.990568220615387,0.9935929179191588,0.0,accept,unanimous_agreement
743792794,15452,yes but consider the case of mixed autotmm and same category. i had to do this somewhere but apparently this is the wrong place. moved it to `handletmmchanged()`,0,0,0,0.9697276949882508,0.9602848887443542,0.9918699264526368,0.0,accept,unanimous_agreement
743792877,15452,"yes, i only found out about it in this pr, which is why i started using `checkstate()`. everything i've done in this dialog was under the assumption that `ischecked()` is true only for checked. fortunately it doesn't seem to matter in other cases (by chance). done.",0,0,0,0.96031653881073,0.9693724513053894,0.6899962425231934,0.0,accept,unanimous_agreement
743887657,15452,generally it doesn't mean that all the torrents have same save path.,0,0,0,0.9569727778434752,0.980967342853546,0.9820506572723388,0.0,accept,unanimous_agreement
744071489,15452,"maybe this can be initialized at the top: just below `, m_storedialogsize {settings_key(""size"")}` [code block]",0,0,0,0.9881272912025452,0.9940534234046936,0.9923022985458374,0.0,accept,unanimous_agreement
744071602,15452,"this is an empty item, is it correct? if it is intended, then try `m_ui->combocategory->additem(qstring());`",0,0,0,0.986979842185974,0.994621753692627,0.9956140518188475,0.0,accept,unanimous_agreement
744071828,15452,try `m_ui->combocategory->lineedit()->setplaceholdertext({});` or ``m_ui->combocategory->lineedit()->setplaceholdertext(qstring());``,0,0,0,0.9841905236244202,0.9939135909080504,0.9943523406982422,0.0,accept,unanimous_agreement
744071924,15452,try `m_ui->savepath->setselectedpath({});` or `m_ui->savepath->setselectedpath(qstring());`,0,0,0,0.9853973984718324,0.9943727254867554,0.9938907623291016,0.0,accept,unanimous_agreement
744071986,15452,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
744071989,15452,ditto,0,0,0,0.8428916931152344,0.9222367405891418,0.9754701256752014,0.0,accept,unanimous_agreement
744072078,15452,i would swap the predicates (check for nullptr first): `if (currentradio && (currentradio == m_previousradio))`,0,0,0,0.9872937202453612,0.9923713207244872,0.9940615296363832,0.0,accept,unanimous_agreement
744072313,15452,"this is unusual, please add some comment within this block about why this is required.",0,0,0,0.9581212401390076,0.9833496809005736,0.9811469316482544,0.0,accept,unanimous_agreement
744111312,15452,"all comments addressed. yes, for ""no category"".",0,0,0,0.9705018997192384,0.9778050184249878,0.9914315938949584,0.0,accept,unanimous_agreement
933762453,17389,i would calculate in floating point. performance isn't worth for risking overflow imo.,0,-1,-1,0.8115683197975159,0.7811163663864136,0.5476464033126831,-1.0,accept,majority_agreement
933765153,17389,`application` isn't `qwidget` but parent of `qwidget` is `qwidget`.,0,0,0,0.9882381558418274,0.9915342926979064,0.993343949317932,0.0,accept,unanimous_agreement
933772556,17389,"overflow is hardly achievable in practice. this is only possible if there are more torrents than (max int64 / 100). this is hardly possible. so your proposal is akin to an offer to live in a bunker for all of your life because of the possible threat of a nuclear strike. are you still going to insist on this? of course, it's not a big deal to make the startup acceleration a little slower...",-1,-1,0,0.8403458595275879,0.5458289980888367,0.7302127480506897,-1.0,accept,majority_agreement
933777565,17389,"if you really don't want floating point then you should put a `q_assert(context->finishedresumedatacount <= (std::numeric_limits ::max() / 100))` to show the allowed/intended maximum size. you always talked about it but what is the reality? [a link] [a link] [a link] didn't found data on arm architecture... but i assume that if the cpu is powerful enough to run qbt then there is high chance to include an fpu. of course, (in general) keeping calculations to integer is a good practice but it is only acceptable when there are no safety concerns in the edge cases, otherwise i won't hesitate to use floating point.",0,0,0,0.9611283540725708,0.9507564902305604,0.982566237449646,0.0,accept,unanimous_agreement
933778063,17389,~~`progressdialog` should be a class variable.~~ can you set `qt::wa_deleteonclose` on it? i'm concerned that its memory isn't correctly freed on exit.,0,0,-1,0.6701257824897766,0.9193094968795776,0.6870172619819641,0.0,accept,majority_agreement
933792958,17389,"yes, you're right. division is the weak side of integer calculations (unless it is division by a power of two).",0,0,0,0.9569083452224731,0.950006663799286,0.9827370643615724,0.0,accept,unanimous_agreement
933795490,17389,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
933795512,17389,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
933928415,17389,maybe use `float` instead of `double`: [code block],0,0,0,0.9883883595466614,0.9938773512840272,0.9935004115104676,0.0,accept,unanimous_agreement
933929102,17389,`desktopintegrationmenu` should set `qt::wa_deleteonclose` and remove `delete m_desktopintegration->menu();`,0,0,0,0.9845440983772278,0.9941951632499696,0.9951722025871276,0.0,accept,unanimous_agreement
933929882,17389,if would be nice if you can also change it to: [code block],0,0,0,0.9528720378875732,0.9551901817321776,0.9144869446754456,0.0,accept,unanimous_agreement
933930089,17389,this is also set on line 681. maybe merge them?,0,0,0,0.9883085489273072,0.9941468238830566,0.9929682612419128,0.0,accept,unanimous_agreement
933930718,17389,"what is the reason not to use the default type, provided that you don't care about the insignificant performance tuning?",0,0,0,0.9493011832237244,0.961100161075592,0.9884787201881408,0.0,accept,unanimous_agreement
933930935,17389,"then the menu will be deleted after the first use, or am i wrong?",0,0,0,0.6308135986328125,0.9309770464897156,0.9779084324836732,0.0,accept,unanimous_agreement
933931017,17389,is it the same? note that i just copied the key sequence from existing code in mainwindow.,0,0,0,0.989084780216217,0.9919060468673706,0.9952329993247986,0.0,accept,unanimous_agreement
933931824,17389,how would you suggest to do it? note that createstartupprogressdialog should create it with 0 duration by default to connect it with desktop integration signal.,0,0,0,0.9897823333740234,0.9932877421379088,0.9955230951309204,0.0,accept,unanimous_agreement
933937313,17389,"ok, forget it.",0,0,0,0.7091974020004272,0.9768239855766296,0.9293199777603148,0.0,accept,unanimous_agreement
933937563,17389,"i read it wrong, it is good here.",0,0,1,0.5851574540138245,0.6051774024963379,0.9557909369468688,0.0,accept,majority_agreement
933937738,17389,not for windows: [a link] i suppose this is the reason of not using `qkeysequence::quit` in mainwindow... forget this.,-1,0,0,0.9643771648406982,0.969720423221588,0.9879981279373168,0.0,accept,majority_agreement
933937922,17389,"ok, maybe add a bit of comment in code so future reviewers will know why it is needed.",0,0,0,0.9832808375358582,0.9876147508621216,0.9897486567497252,0.0,accept,unanimous_agreement
934146875,17389,i would use another ctor [a link] that can take more arguments at once.,0,0,0,0.9879967570304872,0.9894189834594728,0.9877094030380248,0.0,accept,unanimous_agreement
934149866,17389,why this?,0,0,0,0.6024207472801208,0.8648593425750732,0.883537232875824,0.0,accept,unanimous_agreement
934151833,17389,if you don't mind [code block],0,0,0,0.977730631828308,0.9606634378433228,0.9836445450782776,0.0,accept,unanimous_agreement
934153779,17389,seems it can be omitted now?,0,0,0,0.9835371375083924,0.9938209652900696,0.9942781925201416,0.0,accept,unanimous_agreement
934158010,17389,ok.,0,0,0,0.9735831022262572,0.9740158319473268,0.980760931968689,0.0,accept,unanimous_agreement
934163901,17389,"but i will prefer to add `windowminimizebuttonhint` flag separately. otherwise, i would have to specify all the necessary flags in the constructor, which looks unnecessarily cumbersome.",-1,0,0,0.6380667686462402,0.8539263606071472,0.9795479774475098,0.0,accept,majority_agreement
934164071,17389,yes. done.,0,0,0,0.9706167578697203,0.819446325302124,0.910619020462036,0.0,accept,unanimous_agreement
934168274,17389,"i just copied the existing logic from the `mainwindow`. it doesn't provide `exit` action in the case of macos (don't force me to figure out why it's done this way!), and since there are no more actions here, we don't need to create the menu itself, do we?",0,0,0,0.9611252546310424,0.9876515865325928,0.9910485744476318,0.0,accept,unanimous_agreement
1468888786,20314,wouldn't it be better to use `qdir::entrylist()` instead?,0,0,0,0.9865310788154602,0.9942469596862792,0.9928501844406128,0.0,accept,unanimous_agreement
1468907016,20314,"it doesn't matter that much, but using entrylist makes code shorter. it looks a bit nicer now",1,0,0,0.7576988339424133,0.4887811541557312,0.9100102186203004,0.0,accept,majority_agreement
1476978108,20314,you should at least reject special paths that are: 1. empty 2. paths starting with `:` character.,0,0,0,0.9800383448600768,0.9870042204856871,0.9898971319198608,0.0,accept,unanimous_agreement
1477033249,20314,only absolute paths should be accepted.,0,0,0,0.980034112930298,0.9875197410583496,0.9881029725074768,0.0,accept,unanimous_agreement
1477111525,20314,why some paths could start with `:`?,0,0,0,0.959147036075592,0.9836311340332032,0.990045130252838,0.0,accept,unanimous_agreement
1477119501,20314,once again: [code block],0,0,0,0.986527979373932,0.989797830581665,0.993544340133667,0.0,accept,unanimous_agreement
1477119689,20314,"i would consider non-absolute path as ""bad params"".",-1,0,0,0.909787654876709,0.8411054611206055,0.7144775390625,0.0,accept,majority_agreement
1477129803,20314,"oh, i forgot about this mechanism",-1,-1,0,0.6354522109031677,0.8008154034614563,0.9449713230133056,-1.0,accept,majority_agreement
1477306239,20314,i added this check.,0,0,0,0.9854429960250854,0.970405340194702,0.9929376244544984,0.0,accept,unanimous_agreement
1477306271,20314,it seems reasonable,0,0,0,0.9581378698349,0.9443748593330384,0.9813337922096252,0.0,accept,unanimous_agreement
1477313903,20314,"wrong order. put it just above `""../webapplication.h""`",-1,0,0,0.6728524565696716,0.9770498275756836,0.9091364145278932,0.0,accept,majority_agreement
1477314199,20314,here using `apierrortype::notfound` is wrong. it maps to http 404 error which is incorrect for this case. just combine it with the above: [code block],0,0,0,0.93239825963974,0.97386634349823,0.9884074330329896,0.0,accept,unanimous_agreement
1477314640,20314,i would avoid redundant temporary string list by using: [code block],0,0,0,0.9861955642700196,0.989529550075531,0.994484007358551,0.0,accept,unanimous_agreement
1477315928,20314,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1477317531,20314,are you sure it will compile? (returning value in the void method),0,0,0,0.9889255166053772,0.9923273921012878,0.9951059818267822,0.0,accept,unanimous_agreement
1477317715,20314,"oops, i fixed it.",-1,-1,-1,0.5115299224853516,0.638531506061554,0.894694983959198,-1.0,accept,unanimous_agreement
1477318089,20314,"since you haven't replied to [a link] i'll ask here. in the future, wouldn't there be expectations of listing files under some directory? would you consider making this api endpoint more generic by having a 'mode' parameter? ('file mode' or 'dir mode'). or there should be another api endpoint just for listing files? but isn't these 2 endpoints similar and it would be cumbersome for the webapi user to differentiate them? (compared to using a 'mode' parameter) if we go with the generic endpoint, then you should add the 'dir mode' parameter in this pr. also the api name should be modified accordingly (for example `getfspaths`).",0,0,0,0.9798637628555298,0.9911653399467468,0.9903438091278076,0.0,accept,unanimous_agreement
1477318443,20314,"don't you think there should be a different response from server when we give wrong parameter (something, starting with `:` or not path at all) and when we give a proper path, but to a nonexistent location?",0,0,0,0.9546177387237548,0.9826866388320924,0.9851287603378296,0.0,accept,unanimous_agreement
1477319237,20314,"i think that it is a good idea. adding a mode would make using much easier in cases when we would like to get directories and files. (there should be 3 modes: `files`, `directories` and `all`).",1,0,1,0.7543620467185974,0.7042708396911621,0.9749442934989928,1.0,accept,majority_agreement
1477319265,20314,"i believe it should be. they are obviously different cases. if you don't like it to be ""not found"" then it could be ""conflict"".",0,0,0,0.8546096086502075,0.9128246307373048,0.9701586961746216,0.0,accept,unanimous_agreement
1477320567,20314,"~~'conflict' is http error 409 which is also inappropriate.~~ it should be ok. yes, i would still use `badparams` (http error 400) but provide different message in `message` field: [a link]",0,0,0,0.7792705297470093,0.9804704189300536,0.9677259922027588,0.0,accept,unanimous_agreement
1477324819,20314,"but ""bad params"" is inappropriate in this case, isn't it? parameter is valid.",-1,0,0,0.9413262605667114,0.9515495896339417,0.956092119216919,0.0,accept,majority_agreement
1477329573,20314,"the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",0,0,0,0.944233238697052,0.971968114376068,0.9689104557037354,0.0,accept,unanimous_agreement
1477330840,20314,"the server cannot find the requested resource. in the browser, this means the url is not recognized. in an api, this can also mean that the endpoint is valid but **the resource itself does not exist**. isn't it the case?",0,0,0,0.9795729517936708,0.9799447059631348,0.9898352026939392,0.0,accept,unanimous_agreement
1477333033,20314,based on these descriptions: [a link] [a link] i think `!dir.exists()` should return 5xx error code since the error is on server side not the client. maybe error `500` would suffice? [a link],0,0,0,0.9832021594047546,0.9938259720802308,0.9928592443466188,0.0,accept,unanimous_agreement
1477336699,20314,or if we still can't agree on 4xx (client error) or 5xx (server error). then maybe just return `200 ok` with an empty list for `!dir.exists()` case.,0,0,0,0.9877540469169616,0.99370676279068,0.9937734007835388,0.0,accept,unanimous_agreement
1477367014,20314,"this looks confusing, as this response is expected for an existing empty directory. 500 code with the corresponding message looks acceptable to me.",-1,-1,-1,0.8612642884254456,0.945315957069397,0.6234756708145142,-1.0,accept,unanimous_agreement
1486379338,20314,"**to sum up**. you think the response codes should look like this: - proper path returns `200` (even when directory is empty) - not path (string which is not a path) returns `400` (bad request) - path to a non-existent directory `500` (internal server error) in my opinion, returning 500 is unacceptable and messy, because it means, that something went wrong/we have unhandled error. this is a bit too generic crash response. i think `404` (not found) is the best option for this case, because we make a query to a non-existent directory. so in this case this is the best option, because server did not find a directory to make query. implementation on the client side would be also more readable, when we handle not found than exception [code block]",-1,-1,-1,0.7542540431022644,0.6060373783111572,0.9474430680274964,-1.0,accept,unanimous_agreement
1488498906,20314,i don't insist on my opinion anymore. i don't mind you use it.,0,-1,0,0.780240535736084,0.5572940111160278,0.5523813962936401,0.0,accept,majority_agreement
1490000364,20314,"this code does not compile [code block] moreover, it makes code much less readable. i don't think this is a problem. the compiler should take care of this variable.",0,0,0,0.9432838559150696,0.9343369603157043,0.9473426938056946,0.0,accept,unanimous_agreement
1490335655,20314,it's because you didn't include corresponding header (where `qdiriterator` is declared).,0,0,0,0.9861366748809814,0.9944791793823242,0.9911221265792848,0.0,accept,unanimous_agreement
1490603779,20314,:person_facepalming:,0,0,0,0.9838271141052246,0.9871838092803956,0.9812792539596558,0.0,accept,unanimous_agreement
1490604594,20314,"but i still find this code messy, less readable and not much better optimized.",-1,-1,-1,0.9391254782676696,0.8414323925971985,0.958286702632904,-1.0,accept,unanimous_agreement
1490846304,20314,"i would make ""mode"" optional and default to ""all"".",0,0,0,0.9865579009056092,0.9887190461158752,0.992689311504364,0.0,accept,unanimous_agreement
1490870961,20314,"it is ok you don't do it. i can do a follow up commit later. fyi i've already submitted a similar 'clean up' within this commit: [a link] to be really sure, you'll need to look at the generated assembly. anyway i don't really think c++ compilers is able/capable of doing that.",0,0,0,0.7833033800125122,0.8925504088401794,0.93704491853714,0.0,accept,unanimous_agreement
1490942665,20314,i would avoid testing visibility value twice: [code block],0,0,0,0.9489182233810424,0.989866316318512,0.990151822566986,0.0,accept,unanimous_agreement
1490949739,20314,and even extract it into function: [code block],0,0,0,0.9884039163589478,0.990730345249176,0.9951778650283812,0.0,accept,unanimous_agreement
1492166549,20314,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1493251272,20314,"you don't really need it to be a class member. just put it as ""free"" function into unnamed namespace above `appcontroller` definitions in `appcontroller.cpp`.",0,0,0,0.987312078475952,0.9947303533554076,0.9947412014007568,0.0,accept,unanimous_agreement
1493298285,20314,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1493327467,20314,"neither ""into unnamed namespace"" nor ""above appcontroller definitions"" are done.",0,0,0,0.984924852848053,0.9918773174285888,0.992278814315796,0.0,accept,unanimous_agreement
1493344133,20314,qbt enable translations for api error messages: [code block] and to ensure proper scope for `tr()` i suggest you make this helper function a lambda within `getdirectorycontentaction()` if there are no plans to reuse it. otherwise move it to `appcontroller` class private function.,0,0,0,0.9895752668380736,0.993886411190033,0.9947848916053772,0.0,accept,unanimous_agreement
1493345982,20314,hmm... if api error messages need to be translated then my previous [a link] should be rejected.,0,0,0,0.9006783366203308,0.7957555651664734,0.941395938396454,0.0,accept,unanimous_agreement
1493349309,20314,otherwise you cannot use `tr()` in this helper function,0,0,0,0.9875501990318298,0.9935945868492126,0.9941617846488952,0.0,accept,unanimous_agreement
1518552589,20314,"i don't know what do you mean, i did not work with qt translations and i have no idea how to write lambda which will initialize context.",-1,-1,-1,0.7469109296798706,0.8337711095809937,0.5514887571334839,-1.0,accept,unanimous_agreement
1538009531,20314,"first, apply the suggested change above. (from the first post of this thread) then: [code block]",0,0,0,0.987327754497528,0.9892617464065552,0.9950939416885376,0.0,accept,unanimous_agreement
1548638572,20314,done,0,0,0,0.976450741291046,0.8974218964576721,0.8682363629341125,0.0,accept,unanimous_agreement
1564606759,20314,we require explicit return type: [code block],0,0,0,0.9879209995269777,0.9921309351921082,0.9954991936683656,0.0,accept,unanimous_agreement
1564606915,20314,`qobject::` is redundant: [code block],0,0,0,0.97040456533432,0.9908697009086608,0.9923351407051086,0.0,accept,unanimous_agreement
1564610859,20314,"not sure this was mentioned before, try: [code block] after applying [a link]",0,0,0,0.9747621417045592,0.9931175708770752,0.9825563430786132,0.0,accept,unanimous_agreement
1564620546,20314,really? although in this case it makes sense.,0,0,0,0.9545419216156006,0.8529090881347656,0.9058923125267028,0.0,accept,unanimous_agreement
1566057391,20314,this one should be caught by your ci.,0,0,0,0.9840081930160522,0.9882577061653136,0.991718053817749,0.0,accept,unanimous_agreement
1574599451,20314,"`all, dirs, files` should not be translated.",0,0,0,0.9540640115737916,0.9917595982551576,0.991781771183014,0.0,accept,unanimous_agreement
588827943,14465,`const qstringview` (and other replacements of `const qstring &`) there exist `qstringview::chop()` which could modify the view.,0,0,0,0.983256459236145,0.9941365718841552,0.9926881790161132,0.0,accept,unanimous_agreement
589381530,14465,i hope i fixed it everywhere it isn't supposed to be modified.,0,0,0,0.9301537275314332,0.8628796339035034,0.8569071888923645,0.0,accept,unanimous_agreement
631675660,14465,does someone know why this line causes the following warnings? warning: plug-in qt6::qsvgplugin is not known to the current qt installation.,0,0,0,0.9759712815284728,0.984162449836731,0.9927238821983336,0.0,accept,unanimous_agreement
631699751,14465,maybe this helps?? :confused_face: [a link],-1,0,-1,0.5815572738647461,0.8907651305198669,0.993019163608551,-1.0,accept,majority_agreement
631703529,14465,"i noticed this bug report. unfortunately, i don't see any useful information there. in addition, it belongs to a statically linked qt.",-1,0,0,0.6192852854728699,0.8675318360328674,0.5769484043121338,0.0,accept,majority_agreement
631706522,14465,"just found in qt docs: on shared builds, it does nothing",0,0,0,0.915393054485321,0.9890017509460448,0.9926519989967346,0.0,accept,unanimous_agreement
631708987,14465,i had fixed those warnings in [a link] ...,0,0,0,0.9819651246070862,0.9874827861785888,0.9941089153289796,0.0,accept,unanimous_agreement
631716816,14465,doesn't seem that adding `not msvc_runtime_dynamic` condition is correct way to fix it.,0,0,0,0.8546426296234131,0.9195117354393004,0.970544695854187,0.0,accept,unanimous_agreement
631728128,14465,"why? ok, maybe it fails in the corner case where you're building with static libraries (including qt) but using `-md`, is that it (such as the case with `vcpkg`'s unofficial `x64-windows-static-md` triplet)? if that's the case, to fix it fully we need a way to ask qt itself if it was built statically or not (i think this should be easy, i'll look into it). my fix was based on the assumption that if you're building with `msvc_runtime_dynamic=off` you're also building with static libraries, which i think is fair, but yeah, it leaves out that corner case.",0,0,0,0.9640129208564758,0.978291630744934,0.986603856086731,0.0,accept,unanimous_agreement
631746699,14465,could [a link] help?,0,0,0,0.9874227046966552,0.991819143295288,0.994211971759796,0.0,accept,unanimous_agreement
631941482,14465,"thanks, the `type` solution is confirmed to work (both with and without `vcpkg`). it is now implemented in [a link]",1,1,1,0.5917897820472717,0.6113930344581604,0.9125745296478271,1.0,accept,unanimous_agreement
720314841,14465,is it possible to add a space? [code block],0,0,0,0.9888082146644592,0.9926913380622864,0.995684027671814,0.0,accept,unanimous_agreement
720639686,14465,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1372228789,19777,is -> are,0,0,0,0.9713870286941528,0.9594843983650208,0.9774608612060548,0.0,accept,unanimous_agreement
1372247010,19777,why? doesn't this just take unnecessary memory space? imo it would be preferable to just make the option strongly typed instead. eg something like this: [code block] but i would vote for staying with `bool` type and not having a variable defined for a special value. the constructor's parameter name is sufficient.,0,0,0,0.9783014059066772,0.9823249578475952,0.5843753814697266,0.0,accept,unanimous_agreement
1372561091,19777,it is enough inside the class itself. i care about the place of its use. compare the following: [code block] of course i can use `enum` instead.,0,0,0,0.9276338815689088,0.9770923852920532,0.99135160446167,0.0,accept,unanimous_agreement
1372601222,19777,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1374762900,19777,"[code block] we probably should clean up all ""web ui"" to ""webui"" at some point (not necessarily in this pr).",0,0,0,0.9881945848464966,0.9935044050216676,0.9929948449134828,0.0,accept,unanimous_agreement
1374771473,19777,i would suggest to not use view as you'll unnecessary deep copy it instead of implicit sharing. [code block] the same for `void authcontroller::setpasswordhash(const qbytearray &passwordhash)`,0,0,0,0.9887147545814514,0.9937676191329956,0.9935343265533448,0.0,accept,unanimous_agreement
1374779717,19777,i couldn't find where it is used.,0,0,0,0.7204082012176514,0.774604082107544,0.8550097942352295,0.0,accept,unanimous_agreement
1374780409,19777,[code block] now i wonder what benefit does a view brings. it doesn't seem useful when there is implicit sharing where you can avoid a deep copy most of the time.,0,0,0,0.8099844455718994,0.9579088687896729,0.8209242820739746,0.0,accept,unanimous_agreement
1374787948,19777,i would name it: [code block],0,0,0,0.986050546169281,0.9891519546508788,0.9950554370880128,0.0,accept,unanimous_agreement
1374794226,19777,which `arg` overload is in use here? shouldn't you write: [code block],0,0,0,0.985037624835968,0.9929938912391664,0.9950248599052428,0.0,accept,unanimous_agreement
1374797309,19777,it is a red flag that you keep the clear text password in memory. you should avoid doing so and use other means. ~~also ideally this field should be allocated on the stack instead of on the heap.~~ note that securely erasing a string isn't even easy! [a link] [a link],0,0,0,0.8098600506782532,0.4515784382820129,0.8665873408317566,0.0,accept,unanimous_agreement
1374865641,19777,do you really believe that we should take care of those cases when someone malicious has sufficient access to a computer to read its memory? how can we counteract it in any way effectively?,0,0,0,0.8348519802093506,0.950877606868744,0.9177407026290894,0.0,accept,unanimous_agreement
1374932604,19777,"i think it is incorrect to use ""update"" in this case. do not forget that the password has not yet been set by the user, so that there is something to update.",0,0,0,0.9173391461372375,0.947393238544464,0.9647299647331238,0.0,accept,unanimous_agreement
1375177735,19777,yes. it may not be local access to the computer. it could be remote access/tampering with out-of-bound memory read/write (assuming there are undiscovered vulnerability either in 3rd party libraries or qbt code).,0,0,0,0.9839491248130798,0.9794468879699708,0.9874316453933716,0.0,accept,unanimous_agreement
1375177856,19777,then: `you should set your own password in program preferences.`,0,0,0,0.9603402018547058,0.9936760067939758,0.9942417144775392,0.0,accept,unanimous_agreement
1375200493,19777,seems i've just misused it. `qstringview` is useful when the function isn't intended to store provided string but to process/parse it in some way.,0,0,0,0.9348410367965698,0.9692028760910034,0.9635995030403136,0.0,accept,unanimous_agreement
1375227756,19777,it is used in the place where webui is constructed: [a link],0,0,0,0.9845678806304932,0.9936041235923768,0.996092975139618,0.0,accept,unanimous_agreement
1375377651,19777,shouldn't you use it here too: [code block],0,0,0,0.903390109539032,0.9924291968345642,0.9951784610748292,0.0,accept,unanimous_agreement
1375391396,19777,"i didn't intend to make a full-fledged type out of it, just a named constant to improve the readability of the code. p.s. `temppasswordenabled = disable_temp_password` looks weird/ugly.",-1,-1,-1,0.978246569633484,0.984862208366394,0.9926896691322328,-1.0,accept,unanimous_agreement
1375392108,19777,this code will most likely gone when refactoring to avoid store plain text password.,0,0,0,0.9866016507148744,0.9880414009094238,0.992511510848999,0.0,accept,unanimous_agreement
1382522322,19777,seems you don't need this.,0,0,0,0.972187340259552,0.9504141211509703,0.9783381819725036,0.0,accept,unanimous_agreement
1382525691,19777,you're right. this is a forgotten remnant from one of the previous implementations. deleted it.,0,0,0,0.9707611203193665,0.9561920762062072,0.9892326593399048,0.0,accept,unanimous_agreement
1382612085,19777,shouldn't this be: [code block] ??,0,0,0,0.9668734073638916,0.986219882965088,0.9732561707496644,0.0,accept,unanimous_agreement
1382618499,19777,"~1. the arg() signature is wrong. as had mentioned it should be:~ [code block] 2. secondly, even for a temporary password, i don't consider the generated one as sufficiently secure based on this method. i would propose something like this: [code block]",0,0,0,0.8984164595603943,0.9765281081199646,0.94998961687088,0.0,accept,unanimous_agreement
1382623571,19777,you got it wrong. i just chose another valid overload that has less ambiguous in recognizing parameter types. your example is wrong.,-1,-1,-1,0.9124579429626464,0.7573010921478271,0.936089813709259,-1.0,accept,unanimous_agreement
1382624144,19777,i just took advantage of what was suggested in the early discussions. i can do that if also approve it. i don't want to get stuck here.,-1,0,0,0.8166887760162354,0.9016667604446412,0.7876375913619995,0.0,accept,majority_agreement
1382627852,19777,your example is wrong. +1 qstring::number() returns a qstring and i was looking at the wrong overload signatures.,-1,-1,0,0.5153336524963379,0.50466388463974,0.7004073262214661,-1.0,accept,majority_agreement
1382817782,19777,"sure it is harder to brute force but it also might be a bit troublesome for users to input. regarding to brute force, webui already has mechanism to filter that so i won't worry about this attack. i don't have strong preference here.",0,0,0,0.5558791160583496,0.5588164329528809,0.8610462546348572,0.0,accept,unanimous_agreement
1382861597,19777,no. we has no password in input field when editing settings (since it is unknown). writing empty password to settings is prevented in other place of code.,0,0,0,0.976246416568756,0.9919079542160034,0.9914336204528807,0.0,accept,unanimous_agreement
1382887336,19777,"then it could be something like: [code block] imo, having a numeric only password is not good enough for something exposed to the internet.",-1,0,0,0.5269180536270142,0.9565549492836,0.9722110033035278,0.0,accept,majority_agreement
1382964348,19777,"ok, i don't mind it.",0,-1,0,0.7560157179832458,0.5878825783729553,0.6302255988121033,0.0,accept,majority_agreement
1383240880,19777,"ps: the characters `0`, `o`, `o`, `1`, `l`, `i` should be dropped as look-alikes",0,0,0,0.9885188937187196,0.993808090686798,0.9939547181129456,0.0,accept,unanimous_agreement
1383245245,19777,done.,0,0,0,0.975940763950348,0.9640594124794006,0.9897913336753844,0.0,accept,unanimous_agreement
1383278059,19777,"i was hoping not to see this... this function (set/get webui username/password) should be moved to webui class. and i was hoping that preferences class would only handle the save/load of values, not validating data nor data transforms.",0,0,0,0.8789870738983154,0.6694307327270508,0.7074421644210815,0.0,accept,unanimous_agreement
1383310011,19777,"reverted. i'll leave it to someone else. as i said above, i would like to limit myself to the necessary minimum of changes. this topic is outside the scope of my interests. now credentials are being checked in the ui layers (gui and webui). as for webapi, it should first of all be redesigned in order to have a separate entry point for changing credentials, and not accept them together with the regular settings (yes, these are just regular settings from the gui's point of view, but this is not the case for the webui).",0,0,0,0.9609781503677368,0.982487142086029,0.9355008602142334,0.0,accept,unanimous_agreement
1383313309,19777,this will require deeper changes to the webui initialization process (i mean the case when we have to determine whether a temporary password is needed).,0,0,0,0.9854621887207032,0.9891945123672484,0.9858330488204956,0.0,accept,unanimous_agreement
1383345388,19777,"as far as i can tell `optionsdialog::webuiauthenticationok()` is a way to force certain traits on the admin/pass before closing the options window. currently, we don't enforce a non-empty password in the options window if the webui is enabled. aka we don't tell the user to fix it. only if the admin/password is short. maybe it is a bug that the calling sites of `webuiauthenticationok()` don't check if webui is enabled?",0,0,0,0.937721312046051,0.9709538221359252,0.9860506653785706,0.0,accept,unanimous_agreement
1383378765,19777,"as i said above we don't know the password when editing the settings. empty password just means ""password was not changed"" so nothing is written in settings: [a link]",0,0,0,0.9675307869911194,0.984829604625702,0.9942335486412048,0.0,accept,unanimous_agreement
1383390168,19777,"let me rephrase my issue: if user has opened the preferences dialog, enabled the webui and not set a password*, we shouldn't let him close the dialog while the webui setting is checked. silently failing is not a good approach in this case. *i mean no password either on disk or in the input box. could this be implemented without much refactoring?",0,0,0,0.5417637825012207,0.8360108137130737,0.9841808080673218,0.0,accept,unanimous_agreement
1383428764,19777,maybe a 3rd check? [code block],0,0,0,0.9876107573509216,0.9928925037384032,0.9921568632125854,0.0,accept,unanimous_agreement
1383448503,19777,"or be a throwaway lambda at the calling site... personally, i don't require this for this pr.",0,0,0,0.8655923008918762,0.885297954082489,0.9910706281661988,0.0,accept,unanimous_agreement
1383512939,19777,"ah, i get it now... i'll think about it.",0,0,1,0.868367612361908,0.9029123187065125,0.7731541991233826,0.0,accept,majority_agreement
1383518076,19777,"otherwise, application will have to read the password hash from the settings directly, bypassing the corresponding webui accessor.",0,0,0,0.9865569472312928,0.9909035563468932,0.9906604886054992,0.0,accept,unanimous_agreement
1384476951,19777,"well, i fixed it in gui. i don't know how best to do the same on the webui. i should at least send there information about whether there is password configured at the moment (aka `has_webui_password_configured`).",0,0,0,0.9610419869422911,0.9770325422286988,0.990395724773407,0.0,accept,unanimous_agreement
1386073599,19777,"well, seems there is no such problem for webui. after all, in order to change these settings from the webui, the user must be logged in, i.e. some password is configured in any case (or a temporary one is used).",0,0,0,0.982601523399353,0.9900847673416138,0.9857073426246644,0.0,accept,unanimous_agreement
1374428077,19801,i would suggest using a proper data type: [code block],0,0,0,0.9869786500930786,0.9913841485977172,0.9943885207176208,0.0,accept,unanimous_agreement
1374436465,19801,fix coding style: [code block],0,0,0,0.9888399243354796,0.9911673665046692,0.9939800500869752,0.0,accept,unanimous_agreement
1374439011,19801,rename local variable to avoid name clash with `session::fetchdelay()`: [code block],0,0,0,0.9875457882881165,0.9944772124290466,0.9952303767204284,0.0,accept,unanimous_agreement
1374439970,19801,new code should use camel case for `id`: [code block],0,0,0,0.9883537292480468,0.9913839101791382,0.9960469603538512,0.0,accept,unanimous_agreement
1374441746,19801,"remove this, you don't need it.",0,0,0,0.9751034379005432,0.948074758052826,0.9841267466545104,0.0,accept,unanimous_agreement
1374558202,19801,"as i see it, you went the wrong way and introduced an unacceptable dependency. rss subsystem is a client of download manager, so download manager should not depend on rss subsystem. if you don't have any ideas how to fix it, i can help with that later. the first thing that comes to mind is to set a delay during sequential service registration (via `registersequentialservice()`). this will also allow you to set a separate delay for each site, if a single one for everyone is not enough (by the way, why not do it initially?).",0,0,0,0.7163411378860474,0.9551097750663756,0.5657007098197937,0.0,accept,unanimous_agreement
1382176714,19801,"after looking at this i think i get the issue with the dependency of download manager by rss. i think using `registersequentialservice` is a great idea and can present flexibility for future growth and avoid the problematic dependency between rss and download manager. i think i could overload the function `registersequentialservice` and allow a second parameter as the delay time, then add a qhash with the delays linked to the serviceid, a better way might be to change the serviceid struct and add the delay to it. please let me know what you think so i can make another commit or a rebase to make those changes.",1,0,1,0.6474886536598206,0.7459465861320496,0.9650479555130004,1.0,accept,majority_agreement
1382195760,19801,"it looks great, more readable and safer, didn't know std had chrono. i will add those suggestions.",1,1,1,0.9103424549102784,0.966575801372528,0.991037368774414,1.0,accept,unanimous_agreement
1427672869,19801,[code block] or [code block],0,0,0,0.9869166612625122,0.9860919117927552,0.9944918155670166,0.0,accept,unanimous_agreement
1427676023,19801,"imo, having yet another field is redundant. i would just modify existing one: [code block]",0,0,0,0.94014972448349,0.977769374847412,0.9663546681404114,0.0,accept,unanimous_agreement
1427690754,19801,"imo, it's redundant. i would just use `cachedsettingvalue ` than add all these additional types `std::chrono::seconds`, `std::chrono::milliseconds` etc. here.",0,0,0,0.971738874912262,0.9817724227905272,0.9480066299438475,0.0,accept,unanimous_agreement
1427692272,19801,"imo, it's redundant. i would just use `cachedsettingvalue ` than add all these additional types `std::chrono::seconds`, `std::chrono::milliseconds` etc. here.",0,0,0,0.971738874912262,0.9817724227905272,0.9480066299438475,0.0,accept,unanimous_agreement
1427696358,19801,these changes look unnecessary/redundant.,0,-1,-1,0.7637248039245605,0.5796798467636108,0.8072484731674194,-1.0,accept,majority_agreement
1427697822,19801,the changes in this file look messy. please remake it manually to avoid unnecessary changes.,-1,0,-1,0.8708857297897339,0.8424037098884583,0.9857662916183472,-1.0,accept,majority_agreement
1427699567,19801,wouldn't `delay requests to same host` be more clear?,0,0,0,0.9832932949066162,0.9923970103263856,0.989379107952118,0.0,accept,unanimous_agreement
1428458076,19801,resolved at a4eb01b6a8b808441f97b3e624f691945f2a4ed0,0,0,0,0.986262023448944,0.9856783747673036,0.9941840767860411,0.0,accept,unanimous_agreement
1428458414,19801,resolved at a4eb01b6a8b808441f97b3e624f691945f2a4ed0,0,0,0,0.986262023448944,0.9856783747673036,0.9941840767860411,0.0,accept,unanimous_agreement
1428459567,19801,resolved at 590c53dbb22e7d8f9703423259d3a167748ed56c,0,0,0,0.9858696460723876,0.9885472059249878,0.9941459894180298,0.0,accept,unanimous_agreement
1428459854,19801,resolved at 590c53dbb22e7d8f9703423259d3a167748ed56c,0,0,0,0.9858696460723876,0.9885472059249878,0.9941459894180298,0.0,accept,unanimous_agreement
1428460600,19801,"sounds good, i made those changes at 9eb1dc23062def333d7db4e16fb21decffa878ed",1,1,1,0.8442730903625488,0.7168360948562622,0.791588544845581,1.0,accept,unanimous_agreement
1428461903,19801,resolved at 59c3025013775268e4e66e3509bf7b33924879b5,0,0,0,0.9838904738426208,0.9883068203926086,0.9943420886993408,0.0,accept,unanimous_agreement
1428463690,19801,i made a new commit at 59c3025013775268e4e66e3509bf7b33924879b5 to make the diff for this pr more readable manually. didn't notice that qt designer shifted them,0,0,0,0.969987154006958,0.9785733819007874,0.9894952178001404,0.0,accept,unanimous_agreement
1428464879,19801,ended up renaming it to `same host request delay` as its a bit shorter. at 3e91435acd2b343a8ed5c1f48c0285c509ecc1a5,0,0,0,0.9842001795768738,0.989197075366974,0.9904037714004515,0.0,accept,unanimous_agreement
1428476287,19801,"i think its better to keep it that way, so it can be reused in other places that reference time because i think it might be safer to keep the types as time types and keep the conversion abstract for the developer. i might suggest even pushing more into using chrono types, for example changing cachedsettingvalue for other intervals into chrono types: example: change m_storerefreshinterval type to min [code block] into [code block] let me know if you accept or reject this so i know if i should make another update to this pr.",0,0,0,0.9695841073989868,0.9683149456977844,0.9692885875701904,0.0,accept,unanimous_agreement
1428476394,19801,"i think its better to keep it that way, so it can be reused in other places that reference time because i think it might be safer to keep the types as time types and keep the conversion abstract for the developer. i might suggest even pushing more into using chrono types, for example changing cachedsettingvalue for other intervals into chrono types: example: change m_storerefreshinterval type to min [code block] into [code block] let me know if you accept or reject this so i know if i should make another update to this pr.",0,0,0,0.9695841073989868,0.9683149456977844,0.9692885875701904,0.0,accept,unanimous_agreement
1429225776,19801,it does exactly the same as `registersequentialservice()` does.,0,0,0,0.9860090613365172,0.9929169416427612,0.9949040412902832,0.0,accept,unanimous_agreement
1429954146,19801,"you need to check whether this url is actually registered as a sequential service. at least, you shouldn't use `operator[]` below, because it will unexpectedly add this url in sequential services registry if it wasn't there.",0,0,0,0.9878140687942504,0.9938865303993224,0.9932239055633544,0.0,accept,unanimous_agreement
1429956270,19801,at least not in this pr.,0,0,0,0.9627208113670348,0.9857023358345032,0.9540385603904724,0.0,accept,unanimous_agreement
1430595047,19801,"i fixed as requested at [a link] , i might draft a separate pr for that in the future",0,0,0,0.9844954609870912,0.9858202934265136,0.9938318729400636,0.0,accept,unanimous_agreement
1430603588,19801,fixed with c62f38abca02a0396b6371d2d215d0bc01c53951 i removed setsequentialservicedelay and replace refrences with registersequentialservice. didn't notice qhash insert updates value if key already exists,0,0,0,0.9891932606697084,0.9948673248291016,0.9923918843269348,0.0,accept,unanimous_agreement
1430619202,19801,"good notice, fixed with 7f6556f1703d81227435d7ef755c2bba39315d60 i added both a check for containing the key to avoid unneeded timers. also added default 0s value in any case.",0,1,1,0.7906222343444824,0.8165213465690613,0.982930600643158,1.0,accept,majority_agreement
1431272652,19801,wouldn't it work without repeating result type? [code block],0,0,0,0.9867150187492372,0.9922459721565248,0.9941359758377076,0.0,accept,unanimous_agreement
1431756318,19801,last comment from me. i would put all this handling into `handledownloadfinished` instead (since it seems to be more logically correct to delay processing the next request instead of handling previous one finishing): [code block],0,0,0,0.9851523637771606,0.9925606846809388,0.9935020804405212,0.0,accept,unanimous_agreement
1431928755,19801,"should work, but less explicit. i don't object as this is a short function.",0,0,0,0.949976086616516,0.752758264541626,0.9790480732917786,0.0,accept,unanimous_agreement
1431933640,19801,surprisingly it did not work [code block] explicit is required by the constructor reverting [a link] please consider keeping the syntax as is.,0,0,0,0.9788797497749328,0.98970627784729,0.9796298742294312,0.0,accept,unanimous_agreement
1431957319,19801,"that's a great idea, cleaner and more logical, also `handledownloadfinished` already checks if the service is registered making it more compact.",1,1,1,0.9205306768417358,0.7992207407951355,0.9898717999458312,1.0,accept,unanimous_agreement
1431959467,19801,solved with [a link],0,0,0,0.986173152923584,0.9884814023971558,0.9955129027366638,0.0,accept,unanimous_agreement
1443949066,19801,lets use the integer type that won't ever clip the values: [code block],0,0,0,0.9887297749519348,0.990999400615692,0.9950965046882628,0.0,accept,unanimous_agreement
1443949527,19801,if possible i would allow the maximum value to avoid potential user complaints about some artificial limit: [code block],0,0,0,0.9835844039916992,0.9724981784820556,0.9908287525177002,0.0,accept,unanimous_agreement
1443952595,19801,"speculative question, should `disconnect()` happens after `processrequest()` or it doesn't matter? [code block]",0,0,0,0.983405351638794,0.9936538934707642,0.9869873523712158,0.0,accept,unanimous_agreement
1443956820,19801,it is connected to be removed from waiting jobs queue in case it is destroyed before finished (e.g. when cancelled by user side). so it should be disconnected once we explicitly removed it from queue. seems it is ok to disconnect after processrequest. the main thing is to do it before handler is deleted.,0,0,0,0.975430965423584,0.9854353666305542,0.9873555302619934,0.0,accept,unanimous_agreement
1444073623,19801,didn't think about the edge case of users going that high with the delay. fixed with [a link],0,0,0,0.953151285648346,0.7430530786514282,0.9785626530647278,0.0,accept,unanimous_agreement
1444073639,19801,fixed with [a link],0,0,0,0.9881686568260192,0.9873253107070924,0.9951316118240356,0.0,accept,unanimous_agreement
1444073769,19801,it won't hurt anyone having the freedom to set high values. looks like good practice to think of that case fixed with [a link],1,1,1,0.8708710670471191,0.5099911689758301,0.7956324219703674,1.0,accept,unanimous_agreement
1451659256,19801,"1. as you might have noticed, we are adding new copyrights to the top. 2. if you don't want to provide your real email, just don't do it, you don't need to use such ""noreply"" address.",0,0,0,0.9746252298355104,0.9861000180244446,0.9858940839767456,0.0,accept,unanimous_agreement
1451789312,19801,fixed at 8f6218e,0,0,0,0.9843016862869264,0.9896416068077089,0.9944463968276978,0.0,accept,unanimous_agreement
1460663183,19801,"this line breaks webui options window. when opening the options, values in `web ui` and `advanced` tabs do not load. the script throws [code block] this is a typo obviously. [code block]",0,0,0,0.9828609228134156,0.975451648235321,0.8867952823638916,0.0,accept,unanimous_agreement
1465434261,19801,"oddly i run this branch and i just tested and able to open advanced, but i do get other issues that don't show up as errors. maybe that's related to running on linux? but this should be fixed, good call. i will push a fix.",0,0,1,0.4992340505123138,0.6151719689369202,0.98488587141037,0.0,accept,majority_agreement
1465440513,19801,"the tab does open, but values do not load, the fields there are empty. this error was captured in firefox, i am fairly sure js runs the same regardless of os. but yeah, the typo is obviously there anyway.",0,0,0,0.9825440049171448,0.8561413288116455,0.98069030046463,0.0,accept,unanimous_agreement
1465444404,19801,"i see, in js, by bad, i was looking for errors in the debug terminal, didn't realize i should look at the js as well.",0,-1,-1,0.7308530211448669,0.9511347413063048,0.9290473461151124,-1.0,accept,majority_agreement
1465454262,19801,"opened a pr #20326 with commit ee5a93145dfd889776fbfbb136b63056dc40d236 to solve this, as this pr is already merged",0,0,0,0.9875943660736084,0.9923989176750184,0.9944804906845092,0.0,accept,unanimous_agreement
356942737,11637,this will take up too much memory than the user expectation and they will complain.,-1,-1,-1,0.9254854917526244,0.5986762046813965,0.5916860699653625,-1.0,accept,unanimous_agreement
357072606,11637,"which one, specifically? if the diskcachesize is on auto, the os will manage it as needed as cached memory and free it for application that needed as far as i know, so there should be no problem. if user complains are something like [a link], it is not an issue. as for checkingmemusagesize, on systems with very low available memory like the early/less powerful rpis (256 - 512 mib), i can see this being the straw that breaks the camel's back. but isn't it a one-time cost, since qbittorrent only checks one torrent at a time? also i would argue that early model pis fall into the ""extreme end"" of lower performance machines, i would not say they are part of the common case, but then again, i don't have data to back this up, it is just an opinion. what about simply raising it to 32 mib instead, as a compromise?",0,0,0,0.9215804934501648,0.9378399848937988,0.9053939580917358,0.0,accept,unanimous_agreement
357473163,11637,"that is not quite right, see this: [a link] [a link] lol ok for me.",0,1,1,0.6560889482498169,0.9774808883666992,0.9855260848999025,1.0,accept,majority_agreement
357474481,11637,"there was some unsettled discussion in another thread, i don't think there is conscious to change this yet.",-1,0,0,0.8413761854171753,0.7279344201087952,0.9398118257522584,0.0,accept,majority_agreement
357474838,11637,... you do realize the two numbers above will be multiplied by 1024 when passed to libtorrent?,0,0,0,0.9847367405891418,0.9824041724205016,0.987556517124176,0.0,accept,unanimous_agreement
357583668,11637,"what's funny? did you see the link? i am simply saying that users complaining about memory that is ""used"", but actually available for other programs is not a problem. however, as you pointed out, it seems i was wrong about the nature of libtorrent's memory allocation for the disk cache. still, having looked at the source code you linked, the actual allocated values in auto mode seem quite reasonable: [code block] some examples: - 512 mib ram: 512/10 = ~51,2 mib allocated for the disk cache (actually a bit smaller than the current default, which with this little ram is probably a good thing) - 1 gib ram: 1024/10 = ~100 mib (only slightly bigger) - 2 gib ram: 2048/30 = ~68 mib (about on par) - 4 gib ram: 4096/30 = ~136 mib (bigger, not unreasonable) - 8 gib ram: 8192/40 = ~200 mib (bigger, not unreasonable) - 16 gib ram: 16384/40 = ~400 mib (bigger, not unreasonable) ... for 2 gib and less, the values are actually similar to the current default. for higher amounts, the values are bigger, but still a rather small percentage vs. total system memory, while providing a nice performance boost. additionally, it is 1000x better than the snake-oil amounts i see users allocate manually, due to perceiving the default of 64 mib as ""small"". i have seen many issues/comments here about users trying to optimize read/write performance, by allocating silly values like 1 gib, 2 gib, 3 gib or more to the cache which at best is just wasteful and at worst is actually detrimental to performance.",-1,0,-1,0.7659719586372375,0.6867858171463013,0.9552335739135742,-1.0,accept,majority_agreement
357589246,11637,"what are to pros/cons, potential problems, can you link the relevant thread please? i couldn't find it by searching.",0,0,0,0.93939471244812,0.9261251091957092,0.9805917143821716,0.0,accept,unanimous_agreement
357590607,11637,"~mistake, will fix~ actually, this was my intention; 1600 -> 1600 * 1024 = 1 638 400 bytes = 1,5625 mib 16384 -> 16384 * 1024 = 16 777 216 bytes = 16 mib too high?",0,-1,-1,0.6799996495246887,0.9723147749900818,0.8705092072486877,-1.0,accept,majority_agreement
357598794,11637,"i hope you're not really offended... i was referring to the top picture in the link. but seriously i don't see many people complain that on our issue tracker. seems reasonable. also if any low-end system run into problem, i think i'll simply redirect the complain to libtorrent to revise their formula.",0,-1,1,0.7240947484970093,0.417375236749649,0.5059688091278076,,review,no_majority_disagreement
357600204,11637,"i don't know, since you're tweaking it, you should give reasons to justify the change.",0,0,0,0.8078391551971436,0.9490338563919068,0.9170302748680116,0.0,accept,unanimous_agreement
357604898,11637,"i didn't take anything personally, i realized that if you hadn't seen the link by accident, the whole sentence sounded like ""it is not a problem if users complain about qbt using more memory"" which is a bit silly without context. me neither so far, let's hope it stays that way. ok. the current formula seems fair for low-end systems (though there is that outlier ""jump"" @ 1 gib). i'd actually be more concerned with the fact that there is no additional branch in the formula beyond 4 gib. users with higher end machines with 32 gib, 64 gib or higher will get caches of 800 mib, 1.6 gib and beyond, which is almost certainly wasteful. though with that much total system memory, that is very much a first-world problem, and like you said, a problem to be solved on libtorrent's side anyway.",-1,-1,0,0.5355033874511719,0.7244447469711304,0.492597371339798,-1.0,accept,majority_agreement
357607397,11637,"see my comment above: [a link] these values have been working fine for me even in machines with only 2 gib ram, though in my use case it is fine if qbit consumes 700+ mibs which is probably not ok in the general case, and i don't know how much of that memory usage is due to these settings. i am certain that increasing the values from the current defaults is the right thing to do, i am just not sure by _how much_ they should be increased. even in my use cases, i might already be in snake-oil territory, but i can't be sure. that's why i need help figuring out a way to come up with reasonable values.",-1,0,0,0.6022038459777832,0.8403497934341431,0.903987467288971,0.0,accept,majority_agreement
357613518,11637,"thanks, i read through the issue and came to the following conclusion: it is better to enable both settings (announcetoalltiers, which is already enabled by default, and this one), since it maximizes peer discoverability, at the cost of a tiny violation of the spec. it follows the principle of least surprise: nowadays users expect all trackers to be contacted always, since the reason they add them in the first place is to find more peers, regardless of the intention and motivation behind the original multi tracker spec. plus, it is always possible to toggle the setting off to strictly follow the spec. but for the average user, in 2020, i think this is the better default.",1,1,1,0.6356214880943298,0.7474337816238403,0.9241110682487488,1.0,accept,unanimous_agreement
357615229,11637,"by the way, i think the one of the main issues with multiple trackers/adding new trackers in qbt is sumarised in this comment: [a link] there is no fine-grain control of which tier a tracker should be added to and how many tiers there should be.",0,0,0,0.9829831123352052,0.9884912967681884,0.9741371870040894,0.0,accept,unanimous_agreement
