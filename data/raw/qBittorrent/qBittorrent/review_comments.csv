id,pr_number,user,created_at,body
816050553,15769,thalieht,2022-02-28T16:28:07Z,"Too dark for dark themes IMO

![173026](https://user-images.githubusercontent.com/6451685/156011067-8c1e9ebd-6b35-4f23-a8cc-e3eb291543c1.png)

Also not to comment in another line, completed and active seeding have the exact same color (blue).

"
816110274,15769,Mazino-Urek,2022-02-28T17:39:00Z,Checkout changes.
816193153,15769,thalieht,2022-02-28T19:37:06Z,"Now Completed has the same color as Downloading... Other than that, everything LGTM."
816822440,15769,Mazino-Urek,2022-03-01T14:32:55Z,Good Eye!
816975572,15769,thalieht,2022-03-01T17:10:41Z,It's used for Downloading in light theme. Pick a color not used somewhere else.
817046450,15769,Mazino-Urek,2022-03-01T18:45:03Z,"I think I did something bad, but check it out. I just couldn't find a yellow color that works on white."
817088415,15769,thalieht,2022-03-01T19:46:00Z,"I don't see anything bad. I like yellow on dark but... isn't it a flashy color for a state that's supposed to be ""this is finished, forget it, let it fade in the background""? Maybe i'm nitpicking."
817093620,15769,xavier2k6,2022-03-01T19:53:27Z,">isn't it a flashy color for a state that's supposed to be ""this is finished, forget it, let it fade in the background""?

I agree, @now-im please leave colors alone etc. until others provide more feedback & looks like you'll also now have to wait for maintainer approval.

Only thing I can suggest you do is keep re-basing periodically to avoid any conflicts going forward."
817097307,15769,Mazino-Urek,2022-03-01T19:58:48Z,I will figure something out. After that I am leaving the PR as is.
835512014,15769,thalieht,2022-03-25T18:17:33Z,"```suggestion
        , this, [this]() { setSelectionCategory(u""""_qs); });
```

Otherwise it won't compile. That is how it is in master."
835531506,15769,Mazino-Urek,2022-03-25T18:47:07Z,Fixed.
846570392,15769,Chocobo1,2022-04-09T03:53:30Z,"Wrong order. In case I haven't mention it, you can use https://sortmylist.com/ to help sorting the list."
846584398,15769,Mazino-Urek,2022-04-09T06:43:49Z,Fixed.
846657056,15769,Mazino-Urek,2022-04-09T16:50:57Z,Check the pause icon now.
884073887,15769,Chocobo1,2022-05-28T05:20:11Z,"Maybe rename it to `filter-inactive`?
And other `filter*` icons too."
884074144,15769,Chocobo1,2022-05-28T05:23:14Z,"It would be great if you can help update it to https and latest link:
```suggestion
Icons were based on the [Font-Awesome](https://fontawesome.com/icons) icon set.
```"
884074150,15769,Chocobo1,2022-05-28T05:23:22Z,"Add an empty line:
```suggestion

## Redesign
```"
884074159,15769,Chocobo1,2022-05-28T05:23:36Z,"```suggestion

## Color Reference
```"
884075000,15769,Chocobo1,2022-05-28T05:33:23Z,"I think this comment is redundant, I would suggest removing it."
884075295,15769,Chocobo1,2022-05-28T05:36:19Z,"The code looks suspicious... try this:
```suggestion
        return QColorConstants::Svg::green;
```
The same to all other similar instances below."
884086530,15769,Chocobo1,2022-05-28T07:20:57Z,"I would suggest removing this, it creates another horizontal line when rendered and now there are 2 horizontal lines.
"
884086558,15769,Chocobo1,2022-05-28T07:21:15Z,Please remove this empty line too.
884174750,15769,thalieht,2022-05-28T20:20:40Z,Revert this line. It causes a crash.
884266820,15769,Mazino-Urek,2022-05-29T12:54:09Z,@xavier2k6 How to handle this?
885198041,15769,Chocobo1,2022-05-31T04:44:20Z,"Was it an intended change? If not then just change `m_trackers[NULL_HOST] = {};` back to `m_trackers[NULL_HOST] = {{}, noTracker};`"
885268243,15769,Mazino-Urek,2022-05-31T06:58:34Z,"It was intended, we `tracker-warning` icon is required there."
885277947,15769,glassez,2022-05-31T07:10:56Z,"> It was intended, we `tracker-warning` icon is required there.

But what does the discussed line have to do with it?"
885283277,15769,Mazino-Urek,2022-05-31T07:17:18Z,"As per my understanding, it adds an icon when no tracker is found. It was added by @xavier2k6 ."
885781059,15769,Mazino-Urek,2022-05-31T15:22:47Z,@xavier2k6 Only this issue remains.
885888279,15769,xavier2k6,2022-05-31T17:00:54Z,"> Was it an intended change?

No!,

@now-im this seems to be an issue with `rebasing`.

`m_trackers[NULL_HOST] = {};` was changed to `m_trackers[NULL_HOST] = {{}, noTracker};` via https://github.com/qbittorrent/qBittorrent/commit/7e0cd223fd7fa6f1b374c1863bb21c600f93e506

It should be below
```
    warningTracker->setData(Qt::DecorationRole, UIThemeManager::instance()->getIcon(u""trackers-warning""_qs));

    m_trackers[NULL_HOST] = {{}, noTracker};
```

Not!
```
    warningTracker->setData(Qt::DecorationRole, UIThemeManager::instance()->getIcon(u""trackers-warning""_qs));
    m_trackers[NULL_HOST] = {};
```


See (Lines 375 to 377) in my repo for reference

https://github.com/xavier2k6/qBittorrent/blob/GUI_Overhaul/src/gui/transferlistfilterswidget.cpp#L375-L377

@thalieht when these changes are made can you test to see if it still then crashes for you?"
885915363,15769,Mazino-Urek,2022-05-31T17:32:00Z,Committed the change in the PR.
885926824,15769,thalieht,2022-05-31T17:43:23Z,">@thalieht when these changes are made can you test to see if it still then crashes for you?

I already have, that's how i know this was causing it 👍 "
886338837,15769,Chocobo1,2022-06-01T05:48:20Z,Please remove this empty line too.
886689691,15769,Mazino-Urek,2022-06-01T11:22:14Z,I will fix that.
886709688,15769,xavier2k6,2022-06-01T11:46:54Z,"Yes, it should be Qt"
889487931,15769,Chocobo1,2022-06-04T05:30:22Z,"In case you need more updates, this empty line should be removed too."
889494195,15769,Mazino-Urek,2022-06-04T06:32:57Z,Done.
145721746,7610,zeule,2017-10-19T14:44:20Z,"These two new options should be merged. Probably with a ""Set default"" button in the UI."
145723946,7610,glassez,2017-10-19T14:51:01Z,"Initially I have only one option. But someone might want to turn ""Alternative UI"" off, but save the path for further use. Besides, I accept the idea that other settings can appear under ""Alternative UI""."
145726502,7610,zeule,2017-10-19T14:58:29Z,"The path can be saved elsewhere, what's the problem with that?"
145730578,7610,glassez,2017-10-19T15:11:07Z,"Can't follow your thoughts...
We need one setting to enable/disable Alt UI, and the second one to store path.
How to disable it but store save path using only one setting?"
145731526,7610,zeule,2017-10-19T15:14:15Z,"IMO, there is no need to save the path. Those who need it, can save it as they like. Or, even better, you may give them a list to choose from. Then there will be no need to save and re-type that path. "
145734277,7610,glassez,2017-10-19T15:22:48Z,">Or, even better, you may give them a list to choose from.

Where do I get this list, without saving anything?
>Then there will be no need to save and re-type that path.

It is not clear at all. I save it in order not to re-type it again next time user enable Alt UI."
145735615,7610,zeule,2017-10-19T15:27:22Z,"> Where do I get this list, without saving anything?

As far as I can see, the alternative UI path is relative. Contents of its parent directory is the list you need."
145736342,7610,glassez,2017-10-19T15:29:49Z,">As far as I can see, the alternative UI path is relative.

You misunderstood this (what could bring you that idea?). It can be any path."
145738252,7610,zeule,2017-10-19T15:35:30Z,"> It can be any path.

Exceptionally bad decision (opens a wide way to security problems). Please change that."
145739455,7610,glassez,2017-10-19T15:39:11Z,">Exceptionally bad decision (opens a wide way to security problems). Please change that.

Why???
User should decide himself where he want to put his files!
When you install e.g. Apache, does it forbid you to specify `www` folder you want?"
145742271,7610,zeule,2017-10-19T15:48:18Z,Wrong analogy. What you propose isto to change that path via HTTP request.
145742874,7610,glassez,2017-10-19T15:50:32Z,">What you propose is to to change that path via HTTP request.

What do you mean?"
145742972,7610,Chocobo1,2017-10-19T15:50:52Z,It is possible to move `www/favicon.ico` to cpp code? it's quite hard to find here.
145743308,7610,Chocobo1,2017-10-19T15:52:03Z,or move it to HTML?
145743422,7610,Chocobo1,2017-10-19T15:52:31Z,Can you put an upper limit for it?
145743711,7610,Chocobo1,2017-10-19T15:53:34Z,the assignment is redundant.
145743975,7610,Chocobo1,2017-10-19T15:54:30Z,hope you don't find marking it a `const` function
145744249,7610,glassez,2017-10-19T15:55:31Z,">It is possible to move www/favicon.ico to cpp code?

It was previous behavior.
>or move it to HTML?

What do you mean?"
145744399,7610,Chocobo1,2017-10-19T15:56:05Z,and should be possible to use `QStringRef` if you like.
145744831,7610,glassez,2017-10-19T15:57:42Z,Ok.
145744959,7610,Chocobo1,2017-10-19T15:58:08Z,">What do you mean?

https://en.wikipedia.org/wiki/Favicon#How_to_use
"
145745037,7610,glassez,2017-10-19T15:58:24Z,"Can't follow you...
This is `static` method."
145745453,7610,Chocobo1,2017-10-19T15:59:40Z,"sorry, didn't saw it."
145745872,7610,glassez,2017-10-19T16:01:01Z,">and should be possible to use QStringRef if you like.

Don't see any sense. It will be converted to QString later."
145746435,7610,Chocobo1,2017-10-19T16:03:10Z,"When converted to QString this will print `2.0.0` right?
If so, then it will break all existing usage/detection.
"
145747013,7610,Chocobo1,2017-10-19T16:05:10Z,personally I prefer using `=` for string...
145749637,7610,Chocobo1,2017-10-19T16:14:35Z,"Just asking, isn't `pathItems.contains(""."")` redundant? It's basically the current/same path, why should it be prohibited?"
145751463,7610,glassez,2017-10-19T16:21:34Z,I don't know. It's very legacy code. Should I change it?
145752044,7610,glassez,2017-10-19T16:23:44Z,I would prefer leave it as it is now.
145753015,7610,Chocobo1,2017-10-19T16:27:36Z,"I think we should not allow a requester to get anything they want when they are not authenticated, i.e. they should only be allow to get the login page resources."
145753250,7610,Chocobo1,2017-10-19T16:28:32Z,">Should I change it?

We both unsure, then just leave it."
145753821,7610,Chocobo1,2017-10-19T16:30:47Z,should this be placed under previous `if` scope?
145754271,7610,Chocobo1,2017-10-19T16:32:40Z,`const QString &type`?
145755047,7610,Chocobo1,2017-10-19T16:35:50Z,upper limit please.
145755308,7610,Chocobo1,2017-10-19T16:36:52Z,cashing -> caching
145756860,7610,Chocobo1,2017-10-19T16:42:58Z,"Is it possible `getVersion()` & `getAppVersion()` to be not `PUBLIC_API`?
"
145757439,7610,Chocobo1,2017-10-19T16:45:24Z,">It will be converted to QString later.

OK and I'll continue the review later."
145757537,7610,glassez,2017-10-19T16:45:49Z,"Well, the points of incompatibility creation should be it the development process, otherwise we will always have to live with the mistakes previously...
Really, there should not be a big problem since it a major update and old clients can't work with it anyway (because of changed API method names/paths)."
145758636,7610,Chocobo1,2017-10-19T16:50:22Z,">Really, there should not be a big problem since it a major update and old clients can't work with it anyway (because of changed API method names/paths).

OK, then we **should** inform the public the changes beforehand, making an announcement on the qbt website news page when this PR is merged, and this should be as early as possible as we have a lot of users using webAPI.
@sledgehammer999 "
145759383,7610,glassez,2017-10-19T16:53:03Z,"What about images/scripts/css used in login page?
Anyway html files are useless without API access."
145761034,7610,glassez,2017-10-19T16:59:10Z,It's meaningless at least for api version. Client should know it to understand how to authenticate (authentication can be changed in some future version).
145761361,7610,glassez,2017-10-19T17:00:25Z,type is output parameter here.
145762646,7610,glassez,2017-10-19T17:05:16Z,"We didn't have it later. What's the purpose? Shouldn't user control itself what it have in its www root, IMO."
145763502,7610,zeule,2017-10-19T17:08:37Z,It is (or will be) possible to set alternative UI path via Web API. As such it is possible to load any file into qBt and compromise the machine it is running on.
145771521,7610,glassez,2017-10-19T17:39:15Z,">It is (or will be) possible to set alternative UI path via Web API.

It isn't possible now and, of course, I wouldn't provide such a possibility anytime.
>it is possible to load any file into qBt and compromise the machine it is running on.

Any real scenario? I can't imagine it unless the machine is already compromised."
145776575,7610,glassez,2017-10-19T17:57:56Z,"And the next question. From your POV, what accepted path set can be here, that prevents possible security problems?"
145778025,7610,glassez,2017-10-19T18:02:39Z,"In any case, I'm not a fan of ""wipe the user ass"". If something does not prevent the program to work logically, the user can decide how to use it."
145782681,7610,zeule,2017-10-19T18:19:20Z,"> Any real scenario?

Already here: https://github.com/qbittorrent/qBittorrent/pull/7610/files#diff-d00d2fcfdbe6ae0c443a24c3cccad6dbR205

> It isn't possible now and, of course, I wouldn't provide such a possibility anytime.

But how then users of the headless system should choose a web theme?

>  From your POV, what accepted path set can be here, that prevents possible security problems?

The most important here is that the paths set has to be limited and not include anything like /tmp and /var or any other directory, that can be populated during a normal system' workflow. It also may not include current directory (or app should set its working directory to the file system root dir). Also you can consider supplying this path via command line parameter (and then it may be an absolute path). "
145791178,7610,glassez,2017-10-19T18:50:14Z,"> the paths set has to be limited and not include anything like /tmp and /var or any other directory, that can be populated during a normal system' workflow. It also may not include current directory (or app should set its working directory to the file system root dir).

IMO, it's up to the user, isn't it? Why it's ""Wrong analogy"" with the ordinary web-server app? I still can set it up to use any folder as `www` root (e.g. `/tmp` and so on, if I'm not right in the head or I have other good reasons to do it). Nobody forbids me to do it. That's my concern, if it will hurt the security of my machine.
Honestly, I don't want to mess with this. As soon as you start to do something like that, immediately there is someone who says: ""Why do you tie my hands? It is very important for me (and for many others) to use that folder!""."
145791922,7610,glassez,2017-10-19T18:53:14Z,"In any case, if you have more supporters, and you offer some reasonable way to limit this (or even better, implement it yourself), I won't fight it.
@sledgehammer999, @Chocobo1, @qbittorrent/webdev, @WolfganP?"
145796135,7610,zeule,2017-10-19T19:10:49Z,"> ""Why do you tie my hands? It is very important for me (and for many others) to use that folder!"".

As I answered already, pass that directory via a command line parameter."
145797389,7610,zeule,2017-10-19T19:16:12Z,@Chocobo1: how a creator of an alternative UI would get the true icon name?
145813127,7610,Chocobo1,2017-10-19T20:23:38Z,">@Chocobo1: how a creator of an alternative UI would get the true icon name?

Now I think we should properly introduce an ICO format favicon instead of creating an alias of the png.
We can do it later if you won't handle it now."
145814844,7610,Chocobo1,2017-10-19T20:30:03Z,">What's the purpose? 

It's reading like: hey I'm going to read a file and I don't care how big it is and I want it all in the memory NOW.
It's a bad practice for an app to grant users unlimited resources.
"
145816402,7610,Chocobo1,2017-10-19T20:36:23Z,">What about images/scripts/css used in login page?

I was thinking of a tighter control scheme but it's not beneficial with user's webUI, so whatever."
145817209,7610,Chocobo1,2017-10-19T20:39:21Z,"@glassez 
I was thinking this should start following [Semantic Versioning](http://semver.org/).
If so, this should go `{<old API_VERSION> + 1, 0, 0};`, what do you think?"
145817250,7610,zeule,2017-10-19T20:39:33Z,"Excellent security hole, BTW! Right from a textbook..."
145871552,7610,glassez,2017-10-20T03:24:08Z,"Look, stop being sarcastic! In your comments some emotions, there is no useful information. What is the problem here?"
145871807,7610,glassez,2017-10-20T03:26:58Z,But what is a reasonable limit? And what status to return if you exceed this size?
145873977,7610,glassez,2017-10-20T03:50:24Z,">how a creator of an alternative UI would get the true icon name?

He just add the icon he want into his www folder..."
145874665,7610,glassez,2017-10-20T03:59:19Z,"I follow it but in another way. I try to follow qBittorrent main versioning rule when we change major version only on some very big changes. So I interpret old version as 1.x.y in new scheme and just perform major update on it.
But if most of you guys prefer ""to be measured penises"" (as Firefox and Chrome do), then I'll change it to the option you proposed."
145875186,7610,glassez,2017-10-20T04:06:35Z,">I was thinking of a tighter control scheme but it's not beneficial with user's webUI, so whatever.

We can implement it. But it should be user-configurable thing.
There are specific proposals? Or just wait for the requests from real users of this feature?"
145875764,7610,glassez,2017-10-20T04:14:17Z,"Can you describe your point of view entirely, and not throw some broken up words?
And stop to answer only the part of question that is meaningless without the rest."
145878400,7610,glassez,2017-10-20T04:54:52Z,Fixed.
145883683,7610,glassez,2017-10-20T05:59:42Z,"Well, now limited to 1MB and send 500 (Internal server error) when exceeded. Waiting for your suggestions."
145885791,7610,glassez,2017-10-20T06:20:45Z,"@Chocobo1, `<link rel=""icon"" type=""image/png"" href=""images/skin/qbittorrent16.png"">` is used now."
145888931,7610,glassez,2017-10-20T06:48:44Z,"My POV is:
The program is incorrect if it produces the incorrect output for correct input and settings. I'm willing (try) to correct the mistakes of this kind. But all you've presented so far, was as follows: ""If the user set inappropriate folder as www root this will lead to errors"". You propose to introduce any restrictions, but what? To try to ""fix user brains"" is ""fight with windmills"", IMO. Which folders should we ban? Only the user can know how exactly his filesystem is used. The only (more or less) reasonable restriction is to have only one predefined www folder (e.g. inside qBittorrent data dir)."
145923144,7610,Chocobo1,2017-10-20T09:55:51Z,"Thank you! I was considering 1MB or 10MB, either is fine."
145924980,7610,Chocobo1,2017-10-20T10:05:32Z,"* Using Semantic Versioning is one thing, we can start practicing it if the majority agrees.
  IMO Semantic Versioning is invented just for this situation.
* The `{2, 0, 0};` you proposed is another, problem is: with the current `/version/api GET` it returns an integer `15`, but after this PR it drops back to `2.0.0` which is a confusion for our users.
  So from a user perspective I would recommend using `16.0.0` (even we don't follow Semantic Versioning).
  Also why not use `Utils::Version<int, 3, 3>`?
  https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-Documentation#get-api-version"
145925181,7610,zeule,2017-10-20T10:06:38Z,"> Look, stop being sarcastic! 

Sarcasm is one of the few ways I have after your ignorance. The problem is: if UI dir is set to filesystem root, one can get contents of any file readable by qBt. "
145925862,7610,Chocobo1,2017-10-20T10:10:24Z,OK thank you!
145940574,7610,glassez,2017-10-20T11:37:38Z,">it returns an integer 15, but after this PR it drops back to 2.0.0 which is a confusion for our users.

It's not a problem, IMO. But I'll do whatever the team decides.
>Also why not use Utils::Version<int, 3, 3>?

Personally I prefer the way when zeros after minor version are truncated. Waiting other reviewers."
146022192,7610,glassez,2017-10-20T17:27:45Z,">Sarcasm is one of the few ways I have after your ignorance.

If someone read our discussion, it will be pretty obvious that you're dissembling in this comment.
I haven't ignored any of your comments, although you consistently repeat the same thing, despite my responses that you don't even try to understand.
On the contrary, you persist in ignoring my comments either completely oblivious to them or just clinging to some part, taken out of context (carefully avoiding things inconvenient for you).
I'll quote something for you:
>My POV is:
The program is incorrect if it produces the incorrect output for correct input and settings. I'm willing (try) to correct the mistakes of this kind. But all you've presented so far, was as follows: ""If the user set inappropriate folder as www root this will lead to errors"". You propose to introduce any restrictions, but what? To try to ""fix user brains"" is ""fight with windmills"", IMO. Which folders should we ban? Only the user can know how his filesystem is used exactly. The only (more or less) reasonable restriction is to have only one predefined www folder (e.g. inside qBittorrent data dir).

>IMO, it's up to the user, isn't it? Why it's ""Wrong analogy"" with the ordinary web-server app? I still can set it up to use any folder as www root (e.g. /tmp and so on, if I'm not right in the head or I have other good reasons to do it). Nobody forbids me to do it. That's my concern, if it will hurt the security of my machine.


@evsh:
>The problem is: if UI dir is set to filesystem root, one can get contents of any file readable by qBt.
You can put the most reliable lock in the world, but it will not save you if you leave the door open!

To make it easier to understand, I'll explain something else. I see this feature purely as server-side configurable option (i.e. only owner of running qBittorrent instance can change the path to the alternative UI www root, and it can do it only on the same machine the app running either via GUI Options dialog or via configuration file). 
If to allow to configure this feature remotely, then I do not see any way to guarantee any security. But again I ask the question: **why is it needed**?

P.S. @evsh, if you don't switch to a constructive dialogue, then I don't want to waste my precious time in this."
146027900,7610,Chocobo1,2017-10-20T17:52:53Z,did you missed to removed this redundant assignment?
146028827,7610,Chocobo1,2017-10-20T17:56:47Z,"is translation really needed? I think no.
also please add `maxAllowedFilesize()` to the message."
146029554,7610,Chocobo1,2017-10-20T17:59:46Z,"just curious, why make it `virtual`?"
146032015,7610,Chocobo1,2017-10-20T18:10:46Z,For strictness I would use `file.read(maxAllowedFilesize())`.
146033472,7610,Chocobo1,2017-10-20T18:17:01Z,"Is it possible to declare all these as const methods?
e.g. `void logout() const;`"
146037481,7610,glassez,2017-10-20T18:34:38Z,Is it possible to read more than size() bytes? Can the file be changed after we've opened it?
146039014,7610,Chocobo1,2017-10-20T18:41:51Z,">There are specific proposals? Or just wait for the requests from real users of this feature?

It's just still a primitive idea in my head, *it might not make full sense*.
I was thinking there should always be 2 folders under a user specified path (also applies for built-in UI), name them `public` & `private`.
* The public folder contains resources that anyone can freely access, html files, js files, or even some API.
  Then we can put every resources that is needed for login in this folder.
* The private folder contains other resources that is only accessible after login.

The reason for this, is that I want to minimize the exposure to the public.
Why? Because the first step of web security penetration is reconnaissance, i.e. knowing what software & which version it is running, thus reducing information leakage is important IMO.

---

Also replying https://github.com/qbittorrent/qBittorrent/pull/7610#discussion_r145761034 here.
>It's meaningless at least for api version. Client should know it to understand how to authenticate (authentication can be changed in some future version).

Given the above idea, I think the api version is not a critical info at the authentication stage, webAPI users can simply try another login scheme when the previous failed, assuming we aren't inventing a login scheme every year."
146039444,7610,glassez,2017-10-20T18:43:54Z,"Base class method returns some predefined default value, the subclasses can redefine it (even has it configurable)."
146039662,7610,glassez,2017-10-20T18:44:52Z,Why not? I'll try to do it later.
146040064,7610,Chocobo1,2017-10-20T18:46:41Z,">Can the file be changed after we've opened it?

Good point, I missed it."
146040663,7610,glassez,2017-10-20T18:49:20Z,Oops... I recall I have it done... Apparently there are two similar places with this code was later.
146041000,7610,glassez,2017-10-20T18:51:03Z,"Apparently, no. But it's translated in all similar places."
146049174,7610,WolfganP,2017-10-20T19:32:47Z,"I'm supporting the freewill on webui root folder location, as I expect it will be used by somehow advanced users and the location may vary according to the setups (ie my qB is running in a headless raspi2, so most likely the webui files will end up in some ramdisk location after boot). 
Others may need a per user interface, and may choose /home/<somepath>..."
146097780,7610,glassez,2017-10-21T06:07:16Z,"Something like that used in the current (current master) implementation, but it is somehow flawed... so I decided to abandon it in favor of simplicity. But I can return to it if I can see a complete picture of what is what.
>Then we can put every resources that is needed for login in this folder.

AFAIK, all common resources (js, css, images) are public in web apps (I mean images used in page formatting etc.)."
146100514,7610,Chocobo1,2017-10-21T08:47:27Z,">AFAIK, all common resources (js, css, images) are public in web apps (I mean images used in page formatting etc.).

Ideally **only** login-related resources should be in public folder, everything else should go in private folder.
And login-related resources should be independent from other resources, some resource might get duplicated but it's a very small cost IMO.

And as a side effect (bonus?) of this model, you can turn qbt into a dumb public file server by placing any file (with max file size limitation though) in the public folder."
146101438,7610,glassez,2017-10-21T09:28:27Z,"I don't like to have private/public in request paths. I have idea to make it transparent for the client side, i.e. when client send request with `/page.html` path we search for `page.html` in public subfolder if client isn't authorized, otherwise we search in both private/public subfolders (in this order). This approach allows to avoid resources duplicating."
146104115,7610,glassez,2017-10-21T12:08:46Z,Oops... They call non-const base members.
146110930,7610,Chocobo1,2017-10-21T17:38:22Z,">I don't like to have private/public in request paths. 

Me too, yet I haven't consider how to implement it.

>I have idea to make it transparent for the client side

👍  seems probable."
146128133,7610,zeule,2017-10-22T10:58:09Z,A path may end with a space. Why do you reject that? 
146128273,7610,zeule,2017-10-22T11:04:34Z,"> The program is incorrect if it produces the incorrect output for correct input and settings.

I'm talking not about correctness of the program, because it is correctly implemented to contain the designed security hole."
146129587,7610,glassez,2017-10-22T12:04:24Z,"Technically, Yes. But as soon as to have a space at the beginning or end of a phrase is grammatically incorrect, more likely it's just a typo.
Similar corrections are found everywhere in our code, so I just did it the same way. It doesn't matter much for me, so if you insist, I'll change it."
146129872,7610,glassez,2017-10-22T12:16:14Z,"""Allow the user to do what he has a right"" is a security hole?"
146354185,7610,Piccirello,2017-10-23T18:30:38Z,"If a user is authenticated and passes a correct CSRF token with the request, what's the issue with allowing them to set the webui directory? At that point they have full control over the webui anyway, including the option to specify ANY external program to execute upon torrent completion."
146359864,7610,glassez,2017-10-23T18:51:51Z,"@Piccirello, shhh... If @evsh reads this, you'd be anathematized and burned at the stake!"
146545820,7610,Chocobo1,2017-10-24T12:41:19Z,"About the `if... else if ... else`, I would use 3 `if ()`, its clearer to me this way."
146559100,7610,zeule,2017-10-24T13:29:39Z,"Yes, any binary can be downloaded to the target system and executed via post-download command. Yet I strongly believe that presence of a mistake or design flaw in a program may not be used as an excuse for adding more problems. "
146559422,7610,zeule,2017-10-24T13:30:48Z,I think that trimming file paths is counter-intuitive and we shall not do this.
146611180,7610,glassez,2017-10-24T16:04:47Z,Code reformatted.
146612171,7610,glassez,2017-10-24T16:08:14Z,Ok. Let users to be careful.
146660915,7610,zeule,2017-10-24T19:01:31Z,What if this is symlink to a symlink?
146663236,7610,zeule,2017-10-24T19:10:35Z,Please rename the function to `isXXXFile` or `testFileIsXXX`
146745671,7610,Chocobo1,2017-10-25T03:11:42Z,"why not reject all symlink?
"
146759472,7610,glassez,2017-10-25T05:44:04Z,"Why not? (Since we went the way of restrictions.) I think, there shouldn't be serious reasons to use symbolic links here."
147100348,7610,Chocobo1,2017-10-26T10:19:05Z,"I just checked them now and most of them are fine except this line (there are 2 instance of it):
`status(400, tr(""Incorrect category name""));`
I think you should use `""Bad Request""` (without translation) and add `print(tr(""Incorrect category name""));` below."
147100704,7610,Chocobo1,2017-10-26T10:20:41Z,I would move this group above dynamic DNS group (under Authentication group).
147104836,7610,Chocobo1,2017-10-26T10:41:12Z,"This lookup table is not enough for alternative UI use.
Please add the following types:
* jpg & jpeg: `image/jpeg`
* bmp: `image/bmp`
* txt: `text/plain`
* not found in table: `application/octet-stream`
"
147105622,7610,Chocobo1,2017-10-26T10:45:30Z,"some 1920x1080 png wallpapers exceeds this limit, maybe 10MB is enough"
147106867,7610,Chocobo1,2017-10-26T10:51:31Z,"I think re-authentication should be required when users switched this option.
I.e. previous saved sessionID should be cleared."
147107562,7610,Chocobo1,2017-10-26T10:54:54Z,"@lgallard 
what do you think about the suggestion in: https://github.com/qbittorrent/qBittorrent/pull/7610/files#r145924980"
147138695,7610,glassez,2017-10-26T13:21:54Z,No problem to do it. But what is the exact cause?
147149250,7610,glassez,2017-10-26T13:58:10Z,"There is also `status(400, ""Incorrect torrent hash or name"");`"
147152352,7610,glassez,2017-10-26T14:08:54Z,"Is `Bad Request` correct in these cases?
As said in the doc:
>The HTTP 400 Bad Request response status code indicates that the server could not understand the request due to invalid syntax.

The syntax is correct but the requested resource id isn't. Maybe `404 Not Found`?"
147154001,7610,glassez,2017-10-26T14:14:01Z,Ok.
147155893,7610,glassez,2017-10-26T14:20:24Z,Well. Done.
147165733,7610,glassez,2017-10-26T14:48:57Z,"Besides, I don't know how to solve it client-side. It'll just start to recieve `403 Forbidden` to all its API requests."
147319270,7610,Chocobo1,2017-10-27T04:01:34Z,">No problem to do it. But what is the exact cause?

I was thinking the following example: a user use the built-in webUI and is authenticated, now he switch to alternative UI, should he expect to login again or not?
"
147320321,7610,Chocobo1,2017-10-27T04:17:39Z,"is `QMetaObject::invokeMethod()` possible to call to class methods? e.g. `doProcessRequest`.
If yes, it's a security issue."
147320604,7610,glassez,2017-10-27T04:21:58Z,"Technically there is no problem to keep current session, IIRC.
From the other side, as I said before, I don't know how to handle session break at client side."
147320990,7610,glassez,2017-10-27T04:27:34Z,"Only Invocable methods, i.e. slots and marked as Q_INVOCABLE. I can also mark all API methods by some TAG (as I've done for public)."
147320993,7610,Chocobo1,2017-10-27T04:27:35Z,">I don't know how to handle session break at client side.

No problem just letting them receive error 403 and let them proceed to login manually.

>I was thinking the following example: a user use the built-in webUI and is authenticated, now he switch to alternative UI, should he expect to login again or not?

Does this scenario really make sense?"
147321823,7610,Chocobo1,2017-10-27T04:39:26Z,">Maybe 404 Not Found?

Yes, I was blindly following the old code."
147322740,7610,Chocobo1,2017-10-27T04:52:15Z,I think it's safer to use a private TAG instead of using slots for private APIs.
147324713,7610,glassez,2017-10-27T05:19:09Z,">I think it's safer to use a private TAG instead of using slots for private APIs.

I don't understand what you mean.
I still need to call it via invokeMethod so it should be either slot or Q_INVOKABLE."
147328544,7610,Chocobo1,2017-10-27T06:02:33Z,">I don't understand what you mean.

Sorry, I misunderstood something. What I really meant is checking done in `if (!isPublicAPI(methodName) && !sessionActive())` is not enough, you need to also check whether the `methodName` is a valid private API name.
"
147328958,7610,Chocobo1,2017-10-27T06:07:28Z,"Becuase exposing all function in `slots` section for webAPI is error prone, therefore adding a TAG for private API is easier (for us developers) to differentiate which is webAPI and which is normal function."
147330438,7610,glassez,2017-10-27T06:22:10Z,But I still have to be sure that the base class method will not be invoked. I'll think of something.
147403657,7610,glassez,2017-10-27T12:58:12Z,">therefore adding a TAG for private API is easier

But it requires add both PRIVATE/PUBLIC tag and Q_INVOKABLE if we declare it not it slots section:
```c++
WEBAPI_PUBLIC Q_INVOKABLE void login();
```"
147408371,7610,glassez,2017-10-27T13:19:16Z,"WebUI can be changed at a time when some session is open. It is quite possible scenario.
So should I drop the current sessions at this point?"
147408991,7610,glassez,2017-10-27T13:21:46Z,"Maybe just have TAGGED methods under slots section? E.g.:
```c++
private slots:
    WEBAPI_PUBLIC void login();
    WEBAPI_PRIVATE void logout();
    WEBAPI_PRIVATE void shutdown();
```"
147434631,7610,Chocobo1,2017-10-27T15:00:41Z,">Maybe just have TAGGED methods under slots section? 

Agree."
147435597,7610,Chocobo1,2017-10-27T15:04:41Z,">So should I drop the current sessions at this point?

I thought again, if one can authenticate with qbt now, he can also do it later, so there is no point dropping the sessionID in this case.
Lets keep the current way for simplicity."
147464955,7610,glassez,2017-10-27T17:07:23Z,Done.
147581345,7610,zeule,2017-10-29T13:34:19Z,"It is not clear what does ""source"" mean here. I suggest something like ""Choose Alternative UI files location""."
147581377,7610,zeule,2017-10-29T13:35:23Z,Are all of these width changes really required?
147581412,7610,zeule,2017-10-29T13:36:33Z,Why plain text to HTML changes are needed?
147581427,7610,zeule,2017-10-29T13:37:14Z,This label has to correlate with file dialog title.
147581486,7610,zeule,2017-10-29T13:39:18Z,Why don't you use QMimeDatabase here?
147581552,7610,zeule,2017-10-29T13:41:39Z,"AFAIR, this was already asked by @Chocobo1, but I can't find that discussion. So I repeat, sorry: why  not 413 status code (Payload Too Large)?"
147581632,7610,zeule,2017-10-29T13:44:18Z,What's the point of converting the tag to QLatin1String explicitly?
147581724,7610,zeule,2017-10-29T13:48:23Z,Can't understand what does this line do.
147581759,7610,zeule,2017-10-29T13:50:00Z,m_publicAPIs list is shorter. Why don't you test it first?
147581971,7610,zeule,2017-10-29T13:58:16Z,I believe parameters marshaling can be done here as well. Motivation: API functions would contain parameters in its signatures (documenting themselves) and Remote API would be one step away from becoming protocol-agnostic.  
147583121,7610,Chocobo1,2017-10-29T14:34:58Z,I noticed the change made by qt designer as well.
147583173,7610,Chocobo1,2017-10-29T14:36:22Z,"No I didn't and quoting RFC 7231:
>The 413 (Payload Too Large) status code indicates that the server is
   refusing to process a request because the request payload is larger
   than the server is willing or able to process

I.e. the request itself is too large not the response."
147583414,7610,zeule,2017-10-29T14:45:33Z,"Thanks, @Chocobo1! "
147583670,7610,Chocobo1,2017-10-29T14:53:34Z,"is `500 ""Internal Server Error""` more suitable here?"
147584065,7610,Chocobo1,2017-10-29T15:04:34Z,you're welcome!
147587106,7610,glassez,2017-10-29T16:48:13Z,">The 500 (Internal Server Error) status code indicates that the server
   encountered an unexpected condition that prevented it from fulfilling
   the request.

We hasn't ""unexpected condition"" here.
In fact, the HTTP has not appropriate codes for some of our situations.
I imply once we do not support paths with `.` and `..` in it, we have no resources with these paths, so any such resources are ""Not Found""."
147587197,7610,glassez,2017-10-29T16:51:57Z,"The another situation is what we should return, for example, when user request the creation of something?
1. the resource with same id is already exists
2. unsupported id or another data"
147587708,7610,glassez,2017-10-29T17:13:30Z,"This is legacy code from Qt4 epoch.
Will use QMimeDatabase now."
147587796,7610,glassez,2017-10-29T17:16:09Z,Reset QFileInfo object to another path (parent path of current file).
147587937,7610,glassez,2017-10-29T17:22:27Z,The public paths requested much less frequently. Don't forget that `syncMaindata` (private path) can be requested very frequently.
147588006,7610,glassez,2017-10-29T17:24:52Z,">I believe parameters marshaling can be done here as well. Motivation: API functions would contain parameters in its signatures (documenting themselves) and Remote API would be one step away from becoming protocol-agnostic.

I also think about it. But there are some difficulties here. Let me think about it after this PR."
147588473,7610,Chocobo1,2017-10-29T17:44:34Z,">I imply once we do not support paths with . and .. in it, we have no resources with these paths, so any such resources are ""Not Found"".

My concern is returning 404 when the resource is indeed there is confusing (e.g. `./image.jpg`, web servers like apache, nginx does not have this limit), so IMO 500 (or 403) is more explicit to the user that we don't accept `.` or `..`.
I'll let you decide this.

>the resource with same id is already exists

Depends on the context... 200 OK (if we are following RESTful style), or 409

> unsupported id or another data

Hard to find an answer without context here, 404, 403?
"
147593251,7610,zeule,2017-10-29T20:23:11Z,OK.
147620631,7610,glassez,2017-10-30T05:33:50Z,">The another situation is what we should return, for example, when user request the creation of something?
1. the resource with same id is already exists
2. unsupported id or another data

@Chocobo1, I mean, e.g., addCategory: 1. when category with the given name is already exists; 2. when request has unacceptable category name (e.g. empty).

Can you also revise all statuses returned from WebApplication and give your suggestions."
147694312,7610,Chocobo1,2017-10-30T12:57:59Z,"
>Can you also revise all statuses returned from WebApplication and give your suggestions.

`409 Conflict`: increasePrio(), decreasePrio(), topPrio(), bottomPrio(), the first error in rename(), setCategory(), addCategory()

Also please change to use the standard status name e.g.`Not Found` in `status()` and use `print()` to embed the specific error."
147926296,7610,glassez,2017-10-31T08:58:07Z,Done.
147952234,7610,zeule,2017-10-31T10:40:30Z,@glassez?
147957255,7610,zeule,2017-10-31T11:01:17Z,"And after testing for symlinks, please check that the path does not point to a special file (socket, device, etc). As Qt does not cover that, here is a snippet for POSIX (or you can use boost::filesystem):
```c++
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include <string.h> // for strerror()

bool isRegularFile(const char* path)
{
     struct ::stat st;
     if (!::stat(path, &st)) {
            //  analyse erno and log the error
           const auto err = errno;
           qDebug() << ""Could not get file stats for path'"" << path << ""'. Error: "" << strerror(err);
           return false;
     }
     return (st.st_mode & S_IFMT) == S_IFREG;
}
```"
147957960,7610,zeule,2017-10-31T11:03:31Z,What kind of difficulties?
147958114,7610,Chocobo1,2017-10-31T11:03:56Z,"Now built-in WebUI is broken, FF initiates a download instead of opening the page.
The returned http content-type is `application/x-extension-html`, weird.

Also tested `QMimeDatabase::MatchDefault` doesn't help much, still parsing error in FF due to translate strings not being replaced."
147960588,7610,zeule,2017-10-31T11:16:33Z,Works fine here. 
147961355,7610,glassez,2017-10-31T11:21:07Z,Oops... I fixed it below but forgot to do it here.
147961913,7610,glassez,2017-10-31T11:24:29Z,"@evsh, does your test function cover all cases on UNIX? I mean, should we still checking for symlinks separately?"
147969033,7610,Chocobo1,2017-10-31T11:49:35Z,">please check that the path does not point to a special file (socket, device, etc). 

is it really necessary? why?"
147969758,7610,Chocobo1,2017-10-31T11:53:39Z,">Works fine here.

Your Qt version?
Qt 5.9.2 here."
147970122,7610,zeule,2017-10-31T11:55:41Z,"> is it really necessary?

Sure, one can put there a device file for a whole disk or keyboard and read them."
147971931,7610,zeule,2017-10-31T12:04:58Z,"> @evsh, does your test function cover all cases on UNIX?

It is written in accordance to POSIX, thus all compatible systems (all *NIXEs) should be covered. 

> I mean, should we still checking for symlinks separately?

You do check for directory symlinks above, while this snippet tests files only. If you want to test for directories, S_IFDIR is the flag:
```c++
((st.st_mode & S_IFMT) == S_IFREG) || ((st.st_mode & S_IFMT) == S_IFDIR)
```
There are helper macros:
```c++
S_ISREG(st.st_mode) || S_ISDIR(st.st_mode)
```
that do exactly the same, but they were introduced in 1997 or something like that. So if you don't want to target older systems, they are useful (BTW, there is also  similar S_ISLNK macro that test for symbolic links)."
147977510,7610,Chocobo1,2017-10-31T12:34:51Z,">Sure, one can put there a device file for a whole disk or keyboard and read them.

I'm really interested in this :)
AFAIK:
You'll need higher privilege than a normal user to create a block/char file, but there is no point in doing so, you still need to access `/dev` to read the hardware.
As for named pipes, you'll need to feed it from somewhere else; if this is the case, then the attacker can already issue shell commands (to create the pipe), no point defending it either.

There is no harm for checking more strictly, I won't insist not adding it."
147986103,7610,zeule,2017-10-31T12:57:21Z,"One can give many such files to you in a web UI archive. If one of them contains a proper device numbers, an intruder can use it."
147986431,7610,zeule,2017-10-31T12:58:44Z,"5.9.2 too, but I think the key component here is the actual mime database. Do you use the bundled one or does your system provide the mime database?"
147997978,7610,glassez,2017-10-31T13:40:00Z,5.9.1 works correctly.
148004473,7610,Chocobo1,2017-10-31T14:02:23Z,">Do you use the bundled one or does your system provide the mime database?

I guess the system one. I can see the shared database is installed correctly.
I wonder if this is a package issue..."
148014142,7610,glassez,2017-10-31T14:34:28Z,"I don't think unsolvable. I have already tried something.
But it is still beyond the scope of this PR, so I would prefer to do it separately."
148017288,7610,glassez,2017-10-31T14:43:55Z,"By the way, preventing possible claims at the expense of performance...
>It is perfectly OK to create an instance of QMimeDatabase every time you need to
    perform a lookup.
    The parsing of mimetypes is done on demand (when shared-mime-info is installed)
    or when the very first instance is constructed (when parsing XML files directly)."
148055594,7610,Chocobo1,2017-10-31T16:42:35Z,">If one of them contains a proper device numbers, an intruder can use it.

OK, but one must be insane to let these files have root permission..."
148056337,7610,Chocobo1,2017-10-31T16:45:03Z,"Another problem, built-in webUI won't load because it won't pass this check. 
I got the ""Unacceptable file type."" msg in my browser."
148056947,7610,zeule,2017-10-31T16:47:13Z,"Even reading from such files would create a security problem, so root permission is not needed. "
148057482,7610,zeule,2017-10-31T16:48:59Z,Maybe the function is used with Qt resources?
148058124,7610,glassez,2017-10-31T16:50:55Z,"In fact, all these checks are unnecessary for the builtin UI.
Will be fixed later.
@evsh, or we shouldn't trust ourself as well?"
148058937,7610,zeule,2017-10-31T16:53:29Z,"> @evsh, or we shouldn't trust ourself as well?

:D"
148059386,7610,Chocobo1,2017-10-31T16:54:50Z,">Even reading from such files would create a security problem, so root permission is not needed.

No, you need root to create/copy such file.
"
148063485,7610,zeule,2017-10-31T17:08:03Z,"Yes, but is it impossible to convince to convince somebody to unpack with sudo? Or install such a file by other means? "
148064870,7610,Chocobo1,2017-10-31T17:12:33Z,">Yes, but is it impossible to convince to convince somebody to unpack with sudo? Or install such a file by other means?

That's what I mean by ""OK"" in my post above ;)"
148072978,7610,Chocobo1,2017-10-31T17:39:25Z,missing closing `/`
148077409,7610,Chocobo1,2017-10-31T17:54:57Z,"Just noting down what is happening so far:
* with `QMimeDatabase::MatchExtension`, qbt is returning `application/x-extension-html`, so my browser initiates download.
  Weird mime type, don't know why.
* with `QMimeDatabase::MatchDefault`, qbt returns `application/xhtml+xml`, this is correct as the file is in xhtml format.
  But this mime type creates another problem, FF starts using XML parser to parse the HTML file and since the HTML is not well-formed XML, FF is spitting out errors and refuse to render the page.
  Force using `text/html` might workaround this, yet I've not found a way to construct such QMimeType type."
148259585,7610,glassez,2017-11-01T13:30:38Z,Fixed.
148259803,7610,glassez,2017-11-01T13:31:38Z,"@Chocobo1, try it now!"
148261292,7610,glassez,2017-11-01T13:38:00Z,"Now matches both filename and content. It returns ""text/html"" for me.

>FF starts using XML parser to parse the HTML file

It's correct behavior for strict XHTML files.
>since the HTML is not well-formed XML, FF is spitting out errors and refuse to render the page.

Strict XHTML should be well-formed XML, but some our Web UI sources aren't. It needs to correct it to follow either XHTML or HTML5 standard."
148263538,7610,glassez,2017-11-01T13:47:03Z,"Besides, to make it really protocol-agnostic, we need to implement additional abstraction layer. Need to develop some requirements (e.g. the format of the input and output data, status, etc.)."
148265756,7610,Chocobo1,2017-11-01T13:54:36Z,"Thanks, now I can pass this check."
148266073,7610,Chocobo1,2017-11-01T13:55:55Z,"`stat()` returns int type, so it should be `if (::stat(path, &st) != 0)`"
148267775,7610,Chocobo1,2017-11-01T14:02:23Z,">It's correct behavior for strict XHTML files.

Yeah, from what I've read, it's bad for web development, pages break too easily.

>It needs to correct it to follow either XHTML or HTML5 standard.

I would chose HTML5.
Also this issue should be solved if QMimeDatabase is being used.
"
148268208,7610,Chocobo1,2017-11-01T14:04:02Z,"maybe: Unacceptable file type, only regular file is allowed."
148268522,7610,Chocobo1,2017-11-01T14:05:10Z,"Users won't know what is ""WWW root folder"", so ""Symlinks inside alternative UI folder are forbidden."""
148509789,7610,Chocobo1,2017-11-02T11:52:42Z,you should use only the first 2 chars to conform to the standard.
148512468,7610,Chocobo1,2017-11-02T12:06:33Z,"This breaks the interface in IE11, please revert.
see: [screenshot](https://user-images.githubusercontent.com/9395168/32325259-372b403c-c009-11e7-8a5c-d9a8a7747713.png)
"
148512755,7610,Chocobo1,2017-11-02T12:07:43Z,"This one is fine and you can also remove it.
"
148513450,7610,Chocobo1,2017-11-02T12:10:20Z,"If possible, you can remove all these mime types now."
149073534,7610,zeule,2017-11-06T13:07:17Z,"They has ""1""  and ""2"" in the names, suggesting that others might follow. Then what about possible parameter changes? Also, the old object paths denote possibility to export several objects. Quite a valuable possibility!"
149074646,7610,zeule,2017-11-06T13:13:01Z,"> the old object paths denote possibility to export several objects

For example, you could export the RSS subsytem in its own sub-path. While now everything is at the same level potentially creating a mess.

P.S. Take a look at QDBusAbstractAdaptor documentation and http://doc.qt.io/qt-5/usingadaptors.html to get an idea what Web API implementation might look like."
149080233,7610,glassez,2017-11-06T13:39:28Z,">They has ""1"" and ""2"" in the names, suggesting that others might follow. Then what about possible parameter changes? Also, the old object paths denote possibility to export several objects. Quite a valuable possibility!

@evsh, I can't say I understand what you mean. This is only ""old-name to new-name"" mapping tables. I have two since they are used in a different way (because of old API inconsistency).
Or are you just looking to the future, and you want to use something like that for the different things? In this case, do not be lazy to give detailed examples of expected use cases.
Will reading QDBusAbstractAdaptor documentation be enough to understand you?"
149082823,7610,zeule,2017-11-06T13:50:18Z,"Yes, this is about future developments (although API sub-paths would make sense in any case). The idea behind QDBusAbstractAdaptor is very simple: you provide a QObject and a path to publish it, and then all its slots and properties (here you additionally mark them as PUBLIC_API and PRIVATE_API, but that doesn't matter) become available at that path. Qt DBus documentation can explain details.

It would be nice to achieve the same for HTTP, especially taking into account that you are already only a step away. "
149085081,7610,zeule,2017-11-06T13:59:44Z,"Sorry, forgot to comment on the first part.

> @evsh, I can't say I understand what you mean. This is only ""old-name to new-name"" mapping tables. I have two since they are used in a different way (because of old API inconsistency).

I'm thinking of possible parameters change between APIs. The maps we are talking about might contain not name → name pairs, but name → function to handle parameter change. Or such changes in the API are impossible or quite unlikely?"
149085684,7610,zeule,2017-11-06T14:02:31Z,"Quick follow-up: supposing the proposed object publishing way is adopted, we could just publish an object for the old API and avoid new on old sub-system dependency (look and the hash parameter handling in the current PR code). "
149092026,7610,glassez,2017-11-06T14:28:17Z,">you provide a QObject and a path to publish it, and then all its slots and properties (here you additionally mark them as PUBLIC_API and PRIVATE_API, but that doesn't matter) become available at that path. 

Hmm... Interesting idea. I'll try to go there...
>although API sub-paths would make sense in any case

Agree. As I said before I got rid from sub-paths since they're currently confused/messed and I went a short ways (no ""subpaths"" is better than wrong ""subpaths""). However, now I wonder to use it again.
However, I don't want to delay thi PR, because there are other goals. Due to the fact that the compatibility layer is implemented, we can have a old API as main and new one as experimental feature for some time. Then we can change the API paths safe for the end user. What do you say?
I'm just not sure I can quite quickly develop the consistent API paths and names. However, you @Chocobo1, you too) can help me with this. You can post your suggestions in this PR topic."
149092788,7610,glassez,2017-11-06T14:31:09Z,"Everything is clear with the RSS, of course: `/api/rss/processingEnabled` and so on."
149102960,7610,Chocobo1,2017-11-06T15:06:47Z,">I'm just not sure I can quite quickly develop the consistent API paths and names. However, you @Chocobo1, you too) can help me with this. You can post your suggestions in this PR topic.

You are talking about sub-paths under `/api` right?
Take a look, WebAPIs is not much: https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-Documentation
I can only think of `/api/torrent`: for APIs fetching single torrent data, `/api/global`: for APIs like ""Get global download limit"" and everything else still under `/api` because no other sub-path fits.

>Then we can change the API paths safe for the end user.

I don't think end users cares much about it (as long as webUI still work), it's 3rd-party software developers whom are related to these changes: https://github.com/SickGear/SickGear/issues/979#issuecomment-341169007
I'm not saying that is the golden rule, but we something we should bear in mind.
"
149105823,7610,zeule,2017-11-06T15:16:18Z,Maybe `api/session` for bits like the global download limit? Login/logout might also fit into the session sub-object.
149110136,7610,Chocobo1,2017-11-06T15:29:40Z,">Login/logout might also fit into the session sub-object.

sound redundant, users are logging into a web session, not a libtorrent session.
"
149114472,7610,glassez,2017-11-06T15:42:15Z,Agree. From the WebAPI POV Session is Web session. Globals can be under `app/` (or some other) subpath.
149115245,7610,zeule,2017-11-06T15:44:40Z,Obvious remark: if we are going to move to object publishing approach (see above) we need a sub-path for each API entry. 
149291740,7610,glassez,2017-11-07T07:51:49Z,">if we are going to move to object publishing approach

Not so fast, I think... I tried to imagine it myself, and I have a lot of questions now (and very little time for this).
So I plan to implement API paths another (more simple) way in this PR so as not to delay it. Are there any strong objections against this?"
149322129,7610,JackDandy,2017-11-07T10:11:39Z,"Hi, a note on behalf of existing users and developers of this API [here](https://github.com/qbittorrent/qBittorrent/pull/7610#issuecomment-342182931)
"
149328116,7610,zeule,2017-11-07T10:35:51Z,"> Are there any strong objections against this?

No objections at all."
149334079,7610,zeule,2017-11-07T11:00:46Z,"@JackDandy:  currently this PR does provide complete compatibility with the old AP (except maybe for a version string, I'm not sure about that). Thanks for your concerns! "
149348619,7610,Chocobo1,2017-11-07T12:12:11Z,"@glassez 
Can you please add a `warning` http header (via `ResponseBuilder::header()`) when the client uses the old api path?
see: https://stackoverflow.com/a/29623798

and example value:
`Deprecated API : use new API under path /api. Old API will be removed in v4.0.2`"
149350136,7610,Chocobo1,2017-11-07T12:19:14Z,"please use a named variable for this line, to ease documentation work (easier to track)."
149350218,7610,Chocobo1,2017-11-07T12:19:39Z,here too and the next line.
155918324,7610,Chocobo1,2017-12-09T10:20:28Z,"instead of moving to `WebApplication`, why not move to `protected` section of `AbstractWebApplication`?

And use `operator()` for const get, and `*_` for setting value."
155918952,7610,glassez,2017-12-09T10:56:53Z,"@Chocobo1, this PR has currently some unfinished/intermediate changes. Please don't review until I finish it."
159116943,7610,Chocobo1,2017-12-30T04:56:44Z,`for (const auto &rule : RSS::AutoDownloader::instance()->rules())` ?
159116952,7610,Chocobo1,2017-12-30T04:57:46Z,use a one or two tmp variable for easier reading?
159116955,7610,Chocobo1,2017-12-30T04:58:03Z,use tmp variable?
159116991,7610,Chocobo1,2017-12-30T05:01:36Z,the above 2 are unix-only headers right? should  you move them in `#ifdef Q_OS_UNIX`?
159116996,7610,Chocobo1,2017-12-30T05:02:01Z,"this one should move to top, above `#include <QDebug>`"
159117021,7610,Chocobo1,2017-12-30T05:05:19Z,"`Choose alternative Web UI folder`, as the files are always placed in some specific folder right?"
159117047,7610,Chocobo1,2017-12-30T05:07:11Z,`Folder location:`
159117068,7610,Chocobo1,2017-12-30T05:10:00Z,"I'm not against it, but I think you should add a rule in our coding guidelines about it."
159117140,7610,Chocobo1,2017-12-30T05:19:19Z,"can't tell why, but I expected to see `std::string` as parameter."
159117164,7610,Chocobo1,2017-12-30T05:22:46Z,Is it possible to initialize the above 2 here? using `constexpr` if necessary.
159117284,7610,Chocobo1,2017-12-30T05:26:44Z,maybe use a tmp variable?
159117506,7610,glassez,2017-12-30T05:48:06Z,"I use here the wording proposed by some another reviewer (@evsh, unless I'm wrong). I would prefer to leave it as is (at least in this PR)."
159117533,7610,Chocobo1,2017-12-30T05:51:17Z,"`optionalParams`: what does this variable mean? if it's optional then it shouldn't throw any error at all (when not exists).
Maybe omit this field and let the respective function/method handle its existence?"
159117536,7610,glassez,2017-12-30T05:52:03Z,Files location is path of its parent folder. But folder location is the place where the folder is located (i.e.its parent folder path). So current wording is correct.
159117540,7610,Chocobo1,2017-12-30T05:53:24Z,please specify return types here and `findAPICall `
159117555,7610,glassez,2017-12-30T05:55:15Z,">the above 2 are unix-only headers right? 

No. Otherwise the code couldn't compile on Windows."
159117594,7610,Chocobo1,2017-12-30T05:59:52Z,">No. Otherwise the code couldn't compile on Windows.

I just saw MSVC have this header... then it should move up, above `#if defined(Q_OS_WIN)` section."
159117679,7610,glassez,2017-12-30T06:06:42Z,"The meaning of this check: all required params must be presented, any of optional param may or may not be presented, any other params are forbidden (except the GET request, where any extra params are allowed)."
159117681,7610,Chocobo1,2017-12-30T06:07:17Z,"I see you made `hashes` optional here and I'm not sure this change is necessary... do you have specific use case?
I've no reason to object, just asking."
159117861,7610,Chocobo1,2017-12-30T06:25:55Z,">any other params are forbidden 

Isn't that a bit too strict? IMO we should be tolerant about it.
And also save some processing power."
159120417,7610,glassez,2017-12-30T10:15:13Z,"I think the same way. We shouldn't check it at all and just take the params we need. Initially there was no checks. But someone add it for some reason (I don't remember who done it).
In this PR I just allow optional params in addition to required."
159120478,7610,glassez,2017-12-30T10:21:51Z,"Some methods can apply its action to one or more torrents. It's too expensive to send all hashes if you want to apply it to all torrents. Some of this methods have optimized alternatives earlier (e.g. pause/pauseAll). I start to transform it to uniform methods with optional ""hashes"" param."
159124420,7610,glassez,2017-12-30T15:50:40Z,"The current situation is no one is against that, but most developers (except me, generally) use include guards (maybe just habit?). Should we require ""pragma once"" by creating the appropriate rules? Then the dispute between supporters and opponents may inevitably arise. I'm afraid if I try to insist on this, it will generally be prohibited in favor of the include guard."
159124531,7610,glassez,2017-12-30T15:58:24Z,"I see no reason to do it.
Ths is a class declared/defined in Qt application, it will be used together with other Qt types include QString as well. The fact it extends std class and uses std::string internally shouldn't forbid us to have convenient interface with all Qt world outside it."
159133586,7610,Chocobo1,2017-12-31T04:17:32Z,">I'm afraid if I try to insist on this, it will generally be prohibited in favor of the include guard.

Okay, just to be clear, my viewpoint is, having different include guards in the same project is distributing, having a rule for it will clear the confusion. 

>Then the dispute between supporters and opponents may inevitably arise.

I think the worst scenario is just we make a vote/decision and we move on, me at least won't bother fight hard for it.
"
159152868,7610,glassez,2018-01-01T10:30:58Z,"Ok, just removed it here for now to not slow this PR. Let it be another issue."
159448254,7610,Chocobo1,2018-01-03T15:18:23Z,"is it possible to do?
```c++
const QRegularExpression m_apiLegacyPathPattern {QLatin1String(/*regex*/)};
```"
159449819,7610,Chocobo1,2018-01-03T15:23:27Z,">Initially there was no checks. But someone add it for some reason 

I just think checking the **required** params is needed and is a common pattern (not sure this can be small enough to inline into each function), however the **optional** params shouldn't be checked at all.
What do you think?"
159450832,7610,Chocobo1,2018-01-03T15:27:28Z,">It's too expensive to send all hashes if you want to apply it to all torrents. 

I agree.
Or how about use a special string for *all* operation? e.g. `hashes=""all""` will change all torrent settings instead of omitting it? and also `hash` will become a required param.
Just an idea."
159457651,7610,glassez,2018-01-03T15:52:47Z,It's possible. I'll change it.
159487303,7610,glassez,2018-01-03T17:56:38Z,"The existing code allows no unexpected params, I only implemented optional params as close as possible. But, as I said, this strictness not so important to me. Maybe leave it for separate issue?"
159580092,7610,Chocobo1,2018-01-04T04:39:12Z,">Maybe leave it for separate issue?

OK."
159672098,7610,glassez,2018-01-04T15:01:34Z,"Ok.
Please consider my additional commit. I've done it there (and some other improvements)."
159672317,7610,glassez,2018-01-04T15:02:26Z,Done.
160023041,7610,Chocobo1,2018-01-06T10:50:55Z,"nitpick, `const` here and below is a bit redundant IMO."
160023209,7610,glassez,2018-01-06T11:01:06Z,Of course. Just a copy-paste here...
160023308,7610,Chocobo1,2018-01-06T11:07:38Z,">Please consider my additional commit. I've done it there (and some other improvements).

The result is pretty neat.
I can approve the current form after commit squash."
160034184,7610,Piccirello,2018-01-06T20:28:02Z,Will the minimum supported version of IE now officially be 10?
160038293,7610,Piccirello,2018-01-07T00:47:00Z,"On compile I get an error

```
webui/webapplication.cpp: In member function ‘void WebApplication::rssItemsAction()’:
webui/webapplication.cpp:1013:33: error: ‘const class std::initializer_list<const QJsonValue>’ has no member named ‘toObject’
     print(QJsonDocument(jsonVal.toObject()).toJson(), Http::CONTENT_TYPE_JSON);
                                 ^
webui/webapplication.cpp: In member function ‘void WebApplication::rssSetRuleAction()’:
webui/webapplication.cpp:1024:104: error: no matching function for call to ‘RSS::AutoDownloadRule::fromJsonObject(const std::initializer_list<const QJsonObject>&, const QString&)’
     RSS::AutoDownloader::instance()->insertRule(RSS::AutoDownloadRule::fromJsonObject(jsonObj, ruleName));
                                                                                                        ^
webui/webapplication.cpp:1024:104: note: candidate is:
In file included from webui/webapplication.cpp:61:0:
./base/rss/rss_autodownloadrule.h:86:33: note: static RSS::AutoDownloadRule RSS::AutoDownloadRule::fromJsonObject(const QJsonObject&, const QString&)
         static AutoDownloadRule fromJsonObject(const QJsonObject &jsonObj, const QString &name = """");
                                 ^
./base/rss/rss_autodownloadrule.h:86:33: note:   no known conversion for argument 1 from ‘const std::initializer_list<const QJsonObject>’ to ‘const QJsonObject&’
```"
160043848,7610,glassez,2018-01-07T08:55:42Z,"AFAIK, this directive is not for defining minimum supported version. It's for using legacy renderer in modern IE versions.
@Chocobo1?"
160044107,7610,Chocobo1,2018-01-07T09:12:23Z,">Will the minimum supported version of IE now officially be 10?

IIRC it doesn't event work with IE version < 10.
So yes, kinda.
"
160059158,7610,Piccirello,2018-01-07T20:19:38Z,"In my testing it appears to work (mostly) well in IE9. IE8 doesn't work at all, which I'm rather ok with.

We ought to document this somewhere because it really does dictate what JaveScript features I can use when developing. Maybe on the qBittorrent [download](https://www.qbittorrent.org/download.php) page? @sledgehammer999 "
160866189,7610,Piccirello,2018-01-11T05:09:19Z,@glassez Still getting this error with the latest commits
160875612,7610,glassez,2018-01-11T06:46:26Z,"Not sure with the last one... 
Travis compiles it without errors now, so either you have outdated code version, or you're not doing a clean build."
160885690,7610,Piccirello,2018-01-11T08:04:17Z,This include isn't needed
160897570,7610,glassez,2018-01-11T09:10:20Z,Doubtful... Do I have to look into each included header to see that it includes other headers (and do this recursively)? I'm sure not.
161270350,7610,Piccirello,2018-01-12T16:44:00Z,Remove the header and build the project. It's trivial to verify.
161279903,7610,glassez,2018-01-12T17:26:23Z,"What is your logic?
1. Don't include any header and try to compile
2. Add missing headers and try to compile again
3. Repeat Step 2 until no more error occurred.
4. Have compilation errors each time some 3rd party header was changed and the header you need was removed there,
???

IMO, if I use some class declared in some header I can include this header (even if it included indirectly). What's wrong here?"
161301205,7610,Piccirello,2018-01-12T19:02:39Z,I'm not sure what the issue is here. You include a header that you don't use. I don't know why removing it results in so much pushback.
161368881,7610,glassez,2018-01-13T10:04:01Z,">You include a header that you don't use.

Really?
Let's see the following lines:
```c++
const auto jsonVal = RSS::Session::instance()->rootFolder()->toJsonValue(withData);
setResult(jsonVal.toObject());
```
They require class QJsonValue to be complete (i.e. fully defined) so I include the header where it is declared. For some reason this header is also included indirectly via other header (QJsonDocument) but why should I care about it?"
164289386,7610,Chocobo1,2018-01-28T05:24:50Z,"IIRC this is widely used, maybe move to it to some top-level header?"
164289413,7610,Chocobo1,2018-01-28T05:26:51Z,note: it's 2018 now.
164289448,7610,Chocobo1,2018-01-28T05:30:46Z,`enum class ErrorType`?
164289554,7610,Chocobo1,2018-01-28T05:37:32Z,"what does the ""i"" mean? maybe add a comment?"
164289606,7610,Chocobo1,2018-01-28T05:43:28Z,possible to move keys to cpp file?
164289690,7610,Chocobo1,2018-01-28T05:48:19Z,"I don't really understand this line, what is it for?"
164295532,7610,glassez,2018-01-28T10:28:48Z,"Really??? :)
Actually, some of files was created in 2017, the others in 2018."
164295571,7610,glassez,2018-01-28T10:30:49Z,"IMO, it's too wasteful to have a separate file just for one alias."
164295641,7610,glassez,2018-01-28T10:34:28Z,Changed all new to 2018.
164295771,7610,glassez,2018-01-28T10:41:27Z,I don't see much sense to have a separate namespace in this case (this type isn't shared to have it outside APIError; having names like APIError::ErrorType::NotFound seems too complex for me). Have you serious reasons to change it?
164295977,7610,glassez,2018-01-28T10:50:58Z,"It's a common practice for interface naming (I've seen it happen somewhere).
ISession has no implemented any methods, it's a pure Interface."
164296037,7610,glassez,2018-01-28T10:53:42Z,See **Inheriting constructors** at http://en.cppreference.com/w/cpp/language/using_declaration
164296343,7610,glassez,2018-01-28T11:08:02Z,Some keys are used in controllers.
164301181,7610,Chocobo1,2018-01-28T14:38:34Z,">Have you serious reasons to change it?

Nothing much except modern practice and some type safety/correctness...
Personally I would prefer `enum class` whenever possible."
164301209,7610,Chocobo1,2018-01-28T14:39:39Z,well ok... the cleanup can be done later.
164303769,7610,glassez,2018-01-28T16:13:30Z,"Ok, use `enum class` now."
170721899,7610,Piccirello,2018-02-26T20:16:55Z,This should be `QString::number(COMPAT_API_VERSION)`
170721973,7610,Piccirello,2018-02-26T20:17:12Z,Use `QString::number`
419148054,12746,jagannatharjun,2020-05-03T19:27:43Z,"I think we still don't agree we should drop it and you should leave these decisions to maintainers, they will drop it themselves when they think they will not maintain it. so please don't argue with this and also same for boost. these core library decision should be left on those who actually maintain it"
419148201,12746,jagannatharjun,2020-05-03T19:28:58Z,I think we require space between if and following bracket `if (UNIX)`
419148952,12746,jagannatharjun,2020-05-03T19:34:45Z,I think -frtti and -fexceptions are both enabled by default.
419149029,12746,jagannatharjun,2020-05-03T19:35:24Z,all these defined will be added automatically
419154854,12746,FranciscoPombal,2020-05-03T20:22:15Z,"Indeed. Also I checked the documentation for all of the flags, and came to the following conclusions:
- `Wno-long-long` is also useless for us
- I noticed `Wnon-virtual-dtor` is part of a larger `Weffc++` suite of errors in GCC. I tried enabling that instead, but got spammed with errors. Perhaps we could benefit from the suggested fixes, but it does not seem worth it to enable `Weffc++` globally by default, so I just left `Wnon-virtual-dtor`."
419155663,12746,FranciscoPombal,2020-05-03T20:28:43Z,"Fixed all remaining instances of this (although I'm personally not a fan of this convention, since it is different that `endif` and `elseif`)."
419155955,12746,FranciscoPombal,2020-05-03T20:31:09Z,"Like I said in the OP:
> Revise and possibly undo some dependency version bumps that for now are just here to simplify things.

I was running into problems with vcpkg rejecting packages with incompatible minor versions. This was the simplest way I found to ""fix"" the problem for now, while I focus on everything else. Once other things are ready, this will be revisited, and I'll see what are the minimum set of changes required to support both series if needed."
419156583,12746,FranciscoPombal,2020-05-03T20:35:57Z,"@jagannatharjun 
Are you sure? My impression is that unless you specify `NTDDI_VERSION`, `_WIN32_WINNT` and `_WIN32_IE` manually with the appropriate version, then it is not guaranteed that the executable will work all the way back to Windows 7. But I may be wrong or there may be a better way to do this. Do you happen to know how?

Regarding the other definitions, how can I check if they are being added automatically without trial-and-error?"
419227401,12746,glassez,2020-05-04T06:08:24Z,"Let follow the following style:
```cmake
if (condition)
elseif (condition)
else()
endif()
```"
419227730,12746,glassez,2020-05-04T06:09:43Z,Let use consistent names for options (either with or without QBT_ prefix).
419228616,12746,glassez,2020-05-04T06:13:28Z,Why did you drop `optional_compile_definitions` use? It adds corresponding compiler definition as well.
419514727,12746,FranciscoPombal,2020-05-04T15:17:43Z,fixed
419515049,12746,FranciscoPombal,2020-05-04T15:18:10Z,fixed (now nothing uses the QBT prefix)
419517707,12746,FranciscoPombal,2020-05-04T15:21:53Z,"@glassez 
Because I wanted to decouple the logic of adding compile definitions from the top-level CMake file. Now the compile definitions are added in the relevant places, depending on the feature. This makes it easier to migrate to a more target-based approach later across all components (e.g using `target_compile_definitions` instead of `add_compile_definitions`)."
419787497,12746,NotTsunami,2020-05-04T23:30:24Z,"Is this one of your temporary changes or so you can remove the checks for versions under 1.60? If this is not a temporary change, this should be in a seperate PR that updates the build requirement here, other scripts and READMEs."
419788949,12746,NotTsunami,2020-05-04T23:35:16Z,`elseif (MSVC)`
419790973,12746,NotTsunami,2020-05-04T23:41:59Z,"Nit: If this stays in a large patch, I'd prefer the variable name here to match the casing that the library uses:
requiredOpensslVersion -> requiredOpenSSLVersion

This is my personal preference though, so probably wait for a maintainer comment first."
419791541,12746,NotTsunami,2020-05-04T23:43:50Z,"~I would also prefer correct/consistent casing here too, so either use Zlib as the package name (I'm not sure if a lowercase first letter would violate any 'standards', but I would propose to use zlib if it doesn't) or match the case in the requiredZlibVersion variable.~"
419794518,12746,NotTsunami,2020-05-04T23:53:56Z,"~Shouldn't this be true already?~

~https://cmake.org/cmake/help/latest/variable/WIN32.html~ Ignore."
419796974,12746,NotTsunami,2020-05-05T00:02:38Z,"This condition is too broad, you should be checking against MSVC. I would also move this to its own if block."
419797831,12746,NotTsunami,2020-05-05T00:05:05Z,Why did these move from the top CMake file?
419801768,12746,FranciscoPombal,2020-05-05T00:18:37Z,"It's temporary, like all other version bumps."
419802959,12746,FranciscoPombal,2020-05-05T00:22:42Z,"Here, this is a compile definition, it's passed as `-DWIN32` to the compiler."
419803525,12746,FranciscoPombal,2020-05-05T00:24:45Z,"Part of the effort to decouple anything related to adding compile definitions, adding compile options, include directories, etc. from the top-level file. This should make the transition to `target_*` commands in the future simpler."
419804104,12746,NotTsunami,2020-05-05T00:26:46Z,"Right, totally did not realize where this was."
419805885,12746,FranciscoPombal,2020-05-05T00:33:08Z,fixed.
419806013,12746,FranciscoPombal,2020-05-05T00:33:33Z,for now I decided to make the casing consistent like you said.
419806057,12746,FranciscoPombal,2020-05-05T00:33:44Z,"for now I decided to make the casing consistent like you said. EDIT: actually, I have to leave it as is because it does not work otherwise."
419806126,12746,FranciscoPombal,2020-05-05T00:33:56Z,fixed.
420558482,12746,glassez,2020-05-06T05:51:43Z,I don't think power-management should be optional in case when DBUS is available.
420558610,12746,glassez,2020-05-06T05:52:17Z,Seems it should be another `if` block.
420641552,12746,NotTsunami,2020-05-06T08:59:01Z,I made the same suggestion earlier
420732177,12746,jagannatharjun,2020-05-06T11:54:22Z,"you really don't think you need `/MP` here, I never tried looking for this particular flag in build files but all cmake generators supporting parallel compilation works out of the box without any problem"
420733848,12746,jagannatharjun,2020-05-06T11:57:39Z,"`UNICODE` may be helpful, but I don't really you think we need other flags anyway"
420873722,12746,FranciscoPombal,2020-05-06T15:15:55Z,"@jagannatharjun 

> parallel compilation works out of the box without any problem

If you mean that CMake sets the ""flag that enables parallel jobs int the build tool"" to the optimum value automatically based on the the number of logical processors of the machine, that's correct. However, for VS generators that refers to the `/m` flag of MSBuild, which just means multiple projects will be built at the same time, not multiple compilation units. `/MP` must be passed to the compiler directly, not the build tool, for multiple compilation units to be compiled simultaneously.

See the relevant section: https://docs.microsoft.com/en-us/cpp/build/reference/mp-build-with-multiple-processes?view=vs-2019#visual-studio-project-settings

This is corroborated by my own benchmarking (these durations are only meaningful for relative comparison):

- VS 2019 generator with `/MP` forced: ~3:35 minutes
- NMake JOM generator: ~3:10 minutes (note how it's still a touch faster than the VS generator; but this could be related to the fact that I called it on cmd vs powershell 7, where there could be extra overhead. On cmd, even the cmake configure invocation, testing compilers, etc seemed to be snappier/faster)
- VS 2019 generator (no matter the value set in `--parallel` in the cmake build command line/): 8+ minutes

When using `/MP` vs not using it, I can see the difference in duration, in the CPU usage, in the number of simultaneously spawned compiler processes, and even the sound the PC fan makes.

I encourage you to try it out for yourself, maybe I'm doing something wrong. Here are the commands I use (in a Windows 10 VM with the latest VS2019 toolchain):

```
cmake -S . -B build -G ""Visual Studio 16 2019"" -A x64 -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static
cmake --build .\build\ --config RelWithDebInfo # if no config specified, defaults to Debug
```"
420878943,12746,FranciscoPombal,2020-05-06T15:22:56Z,"@glassez @NotTsunami 
I did it this way initially because I thought `if/elseif` makes more sense than `if/if` since these are mutually exclusive and related to the same thing (the features available on different platforms)."
420880243,12746,FranciscoPombal,2020-05-06T15:24:43Z,"@glassez 
Currently it's optional, but turned on by default (as long as DBUS is also ON, if DBUS is OFF, it's always turned off). Why not give the users the possibility to turn it off? Everything else seems to be in place for that."
420978823,12746,glassez,2020-05-06T17:49:27Z,What's the point to make such subfeatures to be optional? What's benefit in disabling it in compile time?
421122715,12746,FranciscoPombal,2020-05-06T22:12:28Z,"@glassez 
Because this is what the script was doing before, but through ""spooky action at a distance"" - I just made it a user-configurable option.

https://github.com/qbittorrent/qBittorrent/blob/fb7774705d379a07440586762c6fc057654d5f67/src/gui/CMakeLists.txt#L213

Do you think in this case the choice does not make sense at all?"
421248079,12746,glassez,2020-05-07T05:29:49Z,">I just made it a user-configurable option.
Do you think in this case the choice does not make sense at all?

I think it doesn't make sense. This option should be always enabled when all necessary stuff (e.g. DBUS) is available.

Here is my general opinion.
You need to distinguish between different types of ""optional"" features.
Some of them are optional because it makes sense to disable them at the user's choice (for example, GUI mode).
Some others are optional because they require some additional dependencies, but we can do without them if these dependencies cannot be satisfied for some reason (e.g. ""power management"").

>Because this is what the script was doing before, but through ""spooky action at a distance"" 

You must be mistaken. It simply disabled the feature if there were unsatisfied dependencies."
422512866,12746,FranciscoPombal,2020-05-09T15:59:30Z,"@glassez Understood, fixed."
422513230,12746,zeule,2020-05-09T16:01:26Z,The X11 package is probably not required. I was mislead by the source file names.
422514665,12746,FranciscoPombal,2020-05-09T16:10:35Z,"@zeule 
So it would seem. I looked at the files and they only `#include` Qt stuff."
422514734,12746,glassez,2020-05-09T16:10:56Z,">The X11 package is probably not required. I was mislead by the source file names.

Source file names were probably borrowed when I ported this feature from other soft (I don't remember from which one). It looks like they should have a different suffix (`dbus`)."
422517715,12746,FranciscoPombal,2020-05-09T16:37:50Z,"Fixed.

@glassez 
Also fixed and include that was causing the build to fail: https://github.com/qbittorrent/qBittorrent/pull/12746/commits/5a87306617372aea941dd2e1338bcbf90bc388d3

Backport here: https://github.com/qbittorrent/qBittorrent/pull/12790"
422518454,12746,FranciscoPombal,2020-05-09T16:44:47Z,"@jagannatharjun 
After reading up on it some more, looks like at least `WIN32` (automatically added by CMake) and `_WIN32` (automatically added by MSVC compiler - https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=vs-2019) are redundant, so I removed them."
423648919,12746,jagannatharjun,2020-05-12T11:06:12Z,"Docs says
>  the /MP compiler option can build multiple compilation units at the same time

it will not affect any other ""normal"" generators like jom, nmake or ninja, since they do individually call compiler for each unit

as far as VS generator is concerned one can add this through the visual studio's option box, let the user handle it.  "
423975234,12746,FranciscoPombal,2020-05-12T19:19:50Z,"@jagannatharjun 

> Docs says
> 
> > the /MP compiler option can build multiple compilation units at the same time
> 
> it will not affect any other ""normal"" generators like jom, nmake or ninja, since they do individually call compiler for each unit
> 
> as far as VS generator is concerned one can add this through the visual studio's option box, let the user handle it.

I'd rather not rely on the VS GUI - right now it's possible to fully build the project with VS generators without using the GUI at all. I guess I'll add an exception for VS generators. The advantage of VS generators on Windows is that they seem to ""just work"" with any shell, whereas ninja/nmake/jom only work if I specifically use the ""developer command prompt"" or otherwise add all relevant paths (for `cl.exe`, for example) manually to `PATH`."
424079594,12746,zeule,2020-05-12T22:55:14Z,"This is unsafe, `list(APPEND` is the right choice. 

It is unsafe because you need to prefer system-supplied modules, because distributions can patch them to account for distribution- or even site-specific peculiarities."
424079816,12746,zeule,2020-05-12T22:55:53Z,This was the correct way to go.
424080609,12746,FranciscoPombal,2020-05-12T22:58:12Z,"@zeule 
~It's currently `set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules)` right at the top of the file.
you expect qBittorrent to need more than one module directory?~ https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r424080864"
424080638,12746,zeule,2020-05-12T22:58:15Z,"Consider moving that below replacing with `message(STATUS ""Project version is: ${PROJECT_VERSION}""). Will be shorter. "
424080864,12746,FranciscoPombal,2020-05-12T22:58:51Z,"@zeule 
Ah, I see."
424081532,12746,FranciscoPombal,2020-05-12T23:00:34Z,Fixed.
424084056,12746,FranciscoPombal,2020-05-12T23:07:58Z,"@zeule 
They are slightly different. The `$PROJECT_VERSION` cannot include `(${QBT_VER_STATUS})`. To be fair, this is something I would change about qBittorrent, along with the `QBT_VERSION_2`/`QBT_VERSION` ""duplicate"" defines, but that's not up to me, at least not in this PR."
424368345,12746,FranciscoPombal,2020-05-13T11:35:27Z,"Ok, now `/MP` only gets appended to the compile options when using VS generators."
426101657,12746,zeule,2020-05-16T01:04:31Z,Sorry for repeating; this chunk has to be packed in a FindLibtorrentRasterbar.cmake file and put in the Modules dir. Distributions should be able to provide their own version of Find packages. 
426102331,12746,FranciscoPombal,2020-05-16T01:11:02Z,"@zeule in that case, will it still be used preferentially over any other `FindLibtorrentRasterbar.cmake` in the system unless the user overrides that? Or is there something more that I must do to obtain that behaviour?"
426102716,12746,zeule,2020-05-16T01:15:10Z,"No, that the point: the system one has to be preferred."
426104632,12746,FranciscoPombal,2020-05-16T01:36:06Z,"@zeule

> the system one has to be preferred.

I don't see why. This code does not do anything special to find the package, it just finds the config file and lets that do the magic. The system is free to provide/give preference to whatever `LibtorrentRasterbarConfig.cmake` it sees fit. I think this is the sanest way: do as little as possible, trust the provided config files (because this is most likely the best for the system).

So IMO our way of _finding_ should be the default. The system's way of finding should be the fallback (automatically), but the user should also be able to override this order and prefer the system's way of finding regradless, via a variable or possibly a feature.

The fallback is useful for cases when, for example, libtorrent is not built with CMake."
426105939,12746,zeule,2020-05-16T01:49:54Z,"Libtorrent might be built with b2, autotools or cmake. The config file will be installed only by the latter one, but that's a side note. 

For a distribution it is much easier to patch the Find module file which comes with the libtorrent itself then duplicate required changes in each client package. If you want to make their life easier (in other words: if you want them to prefer CMake build for qBt) you put the _whole_  find chunk into a module and leave only a single `find_package()` call in the build script."
426150056,12746,zeule,2020-05-16T12:38:03Z,Why not `file(COPY`?
426150380,12746,glassez,2020-05-16T12:42:17Z,">Distributions should be able to provide their own version of Find packages.

Seems reasonable. Distribution can provide more reliable way to find its packages."
426202595,12746,FranciscoPombal,2020-05-17T00:13:13Z,@zeule Because it is my impression that it cannot use generator expressions? But please correct me if I'm wrong.
426202894,12746,zeule,2020-05-17T00:18:40Z,"Ah, yes, you are right... But why do you need `$<CONFIG>` there?"
426276211,12746,eli-schwartz,2020-05-17T15:54:28Z,"I don't understand this whole thing. The system FindLibtorrentRasterbar.cmake is already being used, this code merely says ""if FindLibtorrentRasterbar.cmake isn't found, try to use pkg-config instead"".

Why is this objectionable? When does this prevent the distribution from providing their own FindLibtorrentRasterbar.cmake or patching the system one?"
426282201,12746,glassez,2020-05-17T16:56:45Z,">I don't understand this whole thing. The system FindLibtorrentRasterbar.cmake is already being used, this code merely says ""if FindLibtorrentRasterbar.cmake isn't found, try to use pkg-config instead"".

The point is that all ""find libtorrent"" logic should be encapsulated in FindLibtorrentRasterbar.cmake (either system or project, user etc.) so there is single find_package call should be in project file."
426285763,12746,eli-schwartz,2020-05-17T17:33:55Z,"This is some pretty abstract, confusing logic. If I understand you correctly, then these lines here:

```
find_package(Boost ${requiredBoostVersion} REQUIRED COMPONENTS system)
find_package(OpenSSL ${requiredOpenSSLVersion} REQUIRED)
find_package(ZLIB ${requiredZlibVersion} REQUIRED)
```

Should be moved to modules called e.g.
```
$ cat FindZLIB.cmake
find_package(ZLIB ${requiredZlibVersion} REQUIRED)
```

and invoked as find_package(ZLIB) to resolve ./cmake/Modules/FindZLIB.cmake which in turn resolves /usr/share/cmake-3.17/Modules/FindZLIB.cmake. But in that case, find_package(ZLIB) is also a module lookup functionality, so it too should be moved to a module in cmake/modules/. How many times do we recursively factor this out? What's the objective in doing so repeatedly? What's the objective in your proposal to do so even once?

If the objective here is to make distros able to override the functionality, then since a FindLibtorrentRasterbar.cmake is *always* used, they just provide one and have done with. You can factor this out *zero* times as in the current PR and it still works as expected.

If you're introducing additional motivations that @zeule doesn't have, please say so as I'm a bit confused here."
426286364,12746,zeule,2020-05-17T17:40:53Z," > The point is that all ""find libtorrent"" logic should be encapsulated

This. "
426287306,12746,eli-schwartz,2020-05-17T17:52:23Z,"So just to be clear:

> Distributions should be able to provide their own version of Find packages.

> No, that the point: the system one has to be preferred.

> For a distribution it is much easier to patch the Find module file which comes with the libtorrent itself then duplicate required changes in each client package. If you want to make their life easier (in other words: if you want them to prefer CMake build for qBt) you put the whole find chunk into a module and leave only a single find_package() call in the build script.

is all actually completely wrong and you're retracting those statements? i.e. This is about the neatness of factoring internal logic into separate, composable files?

Meanwhile anyone who is interested in changing how qbittorrent is detecting libtorrent-rasterbar will NOT be modifying `./cmake/modules/*.cmake`, they will be modifying `/usr/share/cmake-3.17/Modules/*.cmake`? or somewhere else on the cmake modules path which is external to qbittorrent?"
426287887,12746,zeule,2020-05-17T17:58:34Z,"> Distributions should be able to provide their own version of Find packages.

True.

> …the system one has to be preferred.

True.

> For a distribution it is much easier to patch the Find module file which comes with the libtorrent…

True.

> all the ""find libtorrent"" logic should be encapsulated

True.

> Meanwhile anyone who is interested in changing how qbittorrent is detecting libtorrent-rasterbar … will be modifying … cmake modules path which is external to qbittorrent?

True."
426326833,12746,FranciscoPombal,2020-05-18T00:58:41Z,"@zeule because of:

```cmake
set_target_properties(qBittorrent
    PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/$<CONFIG>""
)
```

in `src/app` CML. It is super convenient for single- and multi-config generators alike. Binaries produced by different configs end up in separate folders for each config. `qt.conf` is supposed to be in the same directory as the executable."
426332927,12746,FranciscoPombal,2020-05-18T01:38:08Z,"@zeule @eli-schwartz 

> For a distribution it is much easier to patch the Find module file which comes with the libtorrent itself then duplicate required changes in each client package.

Am I missing something? You don't need to duplicate changes. I see 2 cases:

- the distro can provide a single `FindLibtorrentRasterbar.cmake` for all possible client packages. It does not matter if it is patched or not or shoots fireworks. This code will find it and use it.
- the distro has to provide a certain way of finding libtorrent for package A, and a different, possibly mutually exclusive way, for finding it for package B, independently of the default way. In that case, wouldn't they have to put each of the different `FindLibtorrentRasterbar.cmake` into each package's CMake modules dir, so that it gets picked up in preference to the system's?
This code will find it in the project's CMake modules and use it preferentially.

In either case if finding fails at first, `pkgconfig` is tried next."
426337954,12746,zeule,2020-05-18T02:08:01Z,"@FranciscoPombal if you do not understand why encapsulation is important I see a little sense to interfere. To give you a hint, that bullshit which you wrote with faked packages will scary off sane persons and it does not even work properly."
426356491,12746,glassez,2020-05-18T03:50:47Z,">In either case if finding fails at first, pkgconfig is tried next.

Why do you separate it? `pkgconfig` is yet another ""find package"" way. ""finding fails"" means (should mean!) CMake cannot find package in all defined ways (including `pkgconfig` way if it is supposed to be used)."
426752944,12746,FranciscoPombal,2020-05-18T16:31:18Z,"@zeule

>To give you a hint, that bullshit which you wrote with faked packages will scary off sane persons and it does not even work properly.

First off, maybe other people you know write bullshit, I don't. I'm human though, so sometimes I make mistakes or do things in a sub-optimal way. When that happens, I expect people to provide constructive criticism, so that I may learn with the mistake and do better next time. So far I have solved every review you posted, and taken your suggestions into account. Sometimes I was doing things the wrong way, you suggested a better one, I recognized it, and did it that way (the `ALIAS` thing, for example). That's how it is supposed to work.

So how about actually explaining calmly what is wrong with that part? In my testing it seemed to work well. My instinct does tell me it feels rather hacky, but it is the simplest way I found to get `libtorrent` to show up in the feature summary when found by pkgconfig. Otherwise, the only indication that pkgconfig gives that it found `libtorrent` is a single output line in the beginning (near the ""Found working compiler"" noise that ""disappears"" into scrollback). So please, explain where/when exactly it does not work and/or how it can be done better, instead of insulting, because I think nobody wants to go down that road.

> if you do not understand why encapsulation is important I see a little sense to interfere. 

Again, unnecessary insult.
I do understand encapsulation and want to move towards it. If this is still about our previous discussion, I have already told you that truly encapsulating the logic in qBittorrent's CMake scripts will happen in a later PR. There are enough changes as it is for now, it will already be a pain in the ass to organize this neatly into separate commits just to have a clean and clear structure of commits. That being said, it's not like this PR doesn't move towards more encapsulated logic at all, anyway, it does. It's just that the big push for it has to come later, after a solid foundation is laid out.

If you're convinced that I don't understand the principle of encapsulation, then I'm convinced you don't understand the principle of least surprise. Originally, you defended the ""find package X -> enable feature Y as a side-effect"" practice by claiming that's how KDE (or some other high-profile project using Qt + CMake) does it (for example, ẁith the `Qt5Widgets` package and a GUI feature).
It's good to take inspiration from ""authoritative"" sources, but one must always consider some ""done things"" may not be best practices even in these projects. All projects have technical debt, and sometimes they survive and thrive in spite of certain design decisions, not because of them. I believe this is the case for ""features by package found side-effect"".
qBittorrent's CML is moving on from that paradigm, and I believe everyone is convinced it is technically the better option. Even in libtorrent, recently, the topic resurfaced, and is to be handled at a later date.
It is obvious you have great experience with CMake, but you are not impervious to making mistakes.
In the example `FindLibtorrentRasterbar.cmake` file you wrote (in the libtorrent repo), there is this:

```cmake
		# Without pkg-config, we can't possibly figure out the correct build flags.
		# libtorrent is very picky about those. Let's take a set of defaults and
		# hope that they apply. If not, you the user are on your own.
		set(LibtorrentRasterbar_DEFINITIONS
			-DTORRENT_USE_OPENSSL
			-DTORRENT_DISABLE_GEO_IP
			-DBOOST_ASIO_ENABLE_CANCELIO
			-D_FILE_OFFSET_BITS=64)
```

More surprises. The user doesn't even get warned that this happened. They would have to go look up this comment. IMO the more sane option would be to fail and inform the user that they should manually pass something like `-DLibtorrentDefs=...` and just check for the existence of that variable. Or just tell them to fix their pkgconfig config/CMake config files and try again.

@glassez 

Why do you separate it? `pkgconfig` is yet another ""find package"" way. ""finding fails"" means (should mean!) CMake cannot find package in all defined ways (including `pkgconfig` way if it is supposed to be used).

The goal is to only use the CMake config files like `LibtorrentRasterbar.config` first, and then pkgconfig if necessary. If the distro has a special need not covered by this they are free to write their own `FindLibtorrentRasterbar.cmake`, put it in the cmake/Modules folder, and that will be used instead. I don't think _we_ should concern ourselves with that.

And besides, what exactly is the case where a distro packages libtorrent, but in such a way that it does not include the CMake config file _and_ doesn't work with pkgbuild, anyway?"
426782808,12746,glassez,2020-05-18T17:24:22Z,">The goal is to only use the CMake config files like LibtorrentRasterbar.config first, and then pkgconfig if necessary. 

I'm sorry, I'm tired of standing in one place... I really don't understand why you don't want to encapsulate all this logic in single module as it's expected?"
426799326,12746,FranciscoPombal,2020-05-18T17:54:58Z,"@glassez I would also rather not be stuck in this discussion, but here we are.

> I really don't understand why you don't want to encapsulate all this logic in single module as it's expected?

I don't see what logic there is to encapsulate. The current code just trusts whatever `LibtorrentRasberbar.config` or `FindLibtorrentRasterbar.cmake` it finds in the system. Those are the files that do the actual heavy lifting in the sense of encapsulating the logic of finding out definitions, compile options, etc, and other metadata of the library that's needed to successfully link to it.

Presumably, a distribution will include `LibtorrentRasberbarConfig,cmake` in their libtorrent package, so that will be used. If they have special needs, they can provide a specific `FindLibtorrentRasterbar.cmake` with the qBittorrent package, and that will be used instead. If none of the previous two cases applies, pkgconfig is used to discover the required metadata.

The current code is not a find script nor pretends to be one; it just says ""try to use an actual find script/config, and if that does not work, try pkgbuild"". At most, this code could be factored out to a separate macro or function. Calling it and treating it like find script logic is misleading IMO.

Furthermore, here is what I think, related to my second bullet point here: https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r426332927, which has not been addressed thus far: Imagine if every client package of `libtorrent` provided their separate `FindLibtorrentRasterbar.cmake`. Over time, they would diverge, some would be somewhat unmaintained, and it would be hell for the distro maintainer to try to figure out how exactly to package libtorrent in such a way that no client package breaks. Or they'd have to patch all the find scripts, carefully. On the other hand, if the onus of providing a good and flexible `LibtorrentRasberbarConfig,cmake` or pkgconfig metadata falls on the library itself, the logic on the client packages can be much simpler (boils down to ""trust the cmake config files/pkgconfig metadata you find in the system""), and the maintenance burden is lightened. The maintainer just has to patch the client packages that don't work with what the library provides by default.
Fortunately, I find that as far as libtorrent is concerned, the generated CMake config files/pkgconfig metadata are quite good."
426804066,12746,eli-schwartz,2020-05-18T18:03:43Z,"@glassez,

pkg_check_modules() is an **alternative** to find_package(), they're two completely different ways to define a cmake ""imported target"". Either one under the hood simply calls add_library(... IMPORTED) and sets interface properties on it.

While it could, I suppose, be `include()`d from cmake/Modules/, it doesn't seem unambiguously obvious to do so, and this entire discussion is explicitly about distributing it as a ""Find"" package anyway."
426805881,12746,zeule,2020-05-18T18:07:25Z,", everyone, I believe, has a right to produce bullshit and name their own or somebody else one to their liking.

> So how about actually explaining calmly what is wrong with that part? 

It fails if PkgConfig finds no libtorrent package, it fails if libtorrent version is too new and unsupported. What's wrong with it is that it creates problems because you don't want to follow the standard way for locating packages.

I maybe don't have enough experience with large software built with CMake, but what I learned from more than 10 years of running Gentoo on my laptops is that a FOSS project build system is not the place to exercise abilities to create and invent. Builds happen in unpredictable environments and fail more often that developers think. Those who install software have no time or crave to study another non-standard build script to compile that piece of software when something does not work. Because this is not the type of think explained in a wiki or readme (unlike build options). If projects follow similar patterns life of those who install software can be much easier. Find modules for CMake is one of the strongest patterns of that kind.


> ...it is the simplest way I found to get `libtorrent` to show up in the feature summary when found by pkgconfig.

Find module + `find_package_handle_standard_args()` is the simplest way.

> I do understand encapsulation and want to move towards it. 

Then do it, please.

> I have already told you that truly encapsulating the logic in qBittorrent's CMake scripts will happen in a later PR. There are enough changes as it is for now, 

... ruining encapsulation :)

> If you're convinced that I don't understand the principle of encapsulation, then I'm convinced you don't understand the principle of least surprise.

Totally controlled by ones preexisting experience. I built KDE for god knows how many times, that had its impact, perhaps. 
 
> ```cmake
> 		# Without pkg-config, we can't possibly figure out the correct build flags.
> 		# libtorrent is very picky about those. Let's take a set of defaults and
> 		# hope that they apply. If not, you the user are on your own.
> 		set(LibtorrentRasterbar_DEFINITIONS
> 			-DTORRENT_USE_OPENSSL
> 			-DTORRENT_DISABLE_GEO_IP
> 			-DBOOST_ASIO_ENABLE_CANCELIO
> 			-D_FILE_OFFSET_BITS=64)
> ```
> 
> More surprises. 

Well, I use Windows only to launch Steam. Have no idea what are the best practices there.


"
426808317,12746,eli-schwartz,2020-05-18T18:12:20Z,"@zeule You're doing a truly terrible job of communicating your intentions.

I told you I was interpreting your statements as mutually contradictory, asked you to clarify your meaning as to what ""the point"" is, and you simply replied with some ""True. True. True."" gimmick which I can only assume is supposed to be terribly witty.

And apparently you also cannot stand to explain yourself to @FranciscoPombal either, so once again instead of taking the opportunity of having a discussion to, well, ""discuss"" things, you just smear insults across the screen. I'm left wondering why you bother to be here.

...

I still do not understand your first argument in favor of splitting out the ""try to find an external provider of libtorrent-rasterbar"" logic, because you say it is in aid of linux distributions (or other consumers, one must suppose) replacing the logic with their own logic. This is, to my understanding, nonsense, because anything used to replace said logic would trigger the find_package() invocation. On the other hand, it is nonsense anyway, because I AM A LINUX DISTRIBUTION (I package qbittorrent, among other things, for @archlinux) and I assure you if we're modifying detection logic for any sort of dependency we are going to do it in the exported interface of the dependency itself. With a strong preference for pkg-config, but if we absolutely must use `*.cmake` files, we're going to ship it with the dependency itself, NOT with qbittorrent's sources. We also have a strong expectation that if a package provides both `*.cmake` files and pkg-config files, either one must be sufficient to link to it.

So please don't tell me that your advice to refactor these lines into their own file is motivated by your desire to do me a personal favor. It's completely pointless because we don't care one way or the other, and never will.
Please don't even tell me that's *one* of your motivations."
426901309,12746,FranciscoPombal,2020-05-18T21:24:46Z,"@zeule 

> , everyone, I believe, has a right to produce bullshit and name their own or somebody else one to their liking.

You have the right to say whatever you want. But what you said was uncalled for in the context/moment that you said it. Thus far we had a nice back-and-forth going, where I have been listening to every single criticism. Then you took a piece of code that you had never indicated you had a problem with previously, and called it ""bullshit you wrote"", without even asking what the motivation for it could have been or suggesting changes beforehand. It came across as a hostile action, which will can only be met with hostility.

> > I do understand encapsulation and want to move towards it.
> 
> Then do it, please.

Ok. How many times do I have to tell you that will be done **after this PR**?

> > I have already told you that truly encapsulating the logic in qBittorrent's CMake scripts will happen in a later PR. There are enough changes as it is for now,
> 
> ... ruining encapsulation :)

Do you think it will be harder to move towards more encapsulated logic _after_ these changes? How can that be? Previously there was even global `CXX_FLAGS` manipulation going on, how were the previous scripts easier to work with for this future purpose?

> > More surprises.
>
> Well, I use Windows only to launch Steam. Have no idea what are the best practices there.

Same here. There is only one machine where I have Windows installed on bare metal, and even then it's a dual-boot configuration with Ubuntu. I use that Windows install just for certain games that don't run well (or at all) with Proton/DXVK. But recently I also setup a Windows VM in Ubuntu, as a clean environment for building and testing qBittorrent on Windows. This is because I recognize that the majority of qBittorrent's user base is on Windows, and so whether we like it or not, improving the building process, release automation, etc for that OS is essential for the project. So, in addition to testing these changes on Linux, I'm doing my best to test them thoroughly on Windows.

But this is, in principle, not a potential problem exclusive to Windows anyway. Pulling definitions out of thin air and not telling the user if that happens, as if they had been found normally, is for sure a bad practice no matter the system. Especially when the library in question is so picky about them, as is the case with `libtorrent`.

> > So how about actually explaining calmly what is wrong with that part?
> 
> It fails if PkgConfig finds no libtorrent package,

That's exactly what is supposed to happen if no suitable pkgconfig file is found, but the ""fake package"" code is not even reached in that case anyhow, the build fails right at `pkg_check_modules`:

```
-- Found PkgConfig: /usr/bin/pkg-config (found version ""0.29.1"") 
-- Checking for module 'libtorrent-rasterbar>=1.2.0'
--   No package 'libtorrent-rasterbar' found
CMake Error at /usr/share/cmake-3.17/Modules/FindPkgConfig.cmake:467 (message):
  A required package was not found
Call Stack (most recent call first):
  /usr/share/cmake-3.17/Modules/FindPkgConfig.cmake:647 (_pkg_check_modules_internal)
  src/CMakeLists.txt:6 (pkg_check_modules)
```

> it fails if libtorrent version is too new and unsupported.

Good, qBittorrent does not support libtorrent >1.2.x at the moment (in fact, in practice it _only_ supports 1.2.x at the moment). In the future this can be changed of course, as the supported versions change.

> What's wrong with it is that it creates problems because you don't want to follow the standard way for locating packages.

I'm relying on finding a suitable `LibtorrentRasterbarConfig.cmake`, which is as standard as it gets, no? The pkgconfig fallback is a convenience for linux distros that don't build libtorent with CMake (which means no `LibtorrentRasterbarConfig.cmake` is produced), because they will almost for sure have pkgconfig at least. And even still, the user may place a custom `FindLibtorrentRasterbar.cmake` in the project's module directory and that will be used instead.

In fact,the pkgconfig fallback was added at the request of @eli-schwartz (https://github.com/qbittorrent/qBittorrent/pull/12746#issuecomment-623749679). It seemed reasonable enough, and to be honest, I think if an actual package maintainer from a ""big""/""mainstream"" distribution (who actually packages qBIttorrent, no less) agrees that this is the right way to do it (and further justifies why this is, https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r426808317, because one should not blindly follow/trust an ""authoritative"" source), you'll need to provide really convincing counter-arguments to go against that, or find another package maintainer who can do so."
426909671,12746,zeule,2020-05-18T21:44:13Z,"> @zeule You're doing a truly terrible job of communicating your intentions.

Sorry for that.
> I told you I was interpreting your statements as mutually contradictory, asked you to clarify your meaning as to what ""the point"" is, and you simply replied with some ""True. True. True."" gimmick which I can only assume is supposed to be terribly witty.

I see no contradiction and I thought from my reply it was clear.

> And apparently you also cannot stand to explain yourself to @FranciscoPombal either, so once again instead of taking the opportunity of having a discussion to, well, ""discuss"" things, you just smear insults across the screen.

For a discussion to take place the subject has to be of interest for both sides

> I'm left wondering why you bother to be here.

The Internet is full of vagabonds, why can't I be one of them?

> This is, to my understanding, nonsense, because anything used to replace said logic would trigger the find_package() invocation.

Let me recollect what we were talking about. There are two points that are related to the topic: 1) append local module path to the directory list and 2) put the whole chunk of the ""find installed libtorrent and create imported target"" into a special file, called ""FindLibtorrentRasterbar.cmake"".

The first one is reasoned by the replacement logic, because otherwise local files will be used, and I can still find a dozen of packages in the Gentoo tree that require actual removing of their in-tree Find modules in order to compile.

The second point is rational due to the general principles of managing things in software, because of the way the find_package is implemented in CMake, and because that way is the simplest for distribution. A Find module in CMake, despite the fact that it is usually implemented as a plain code file, is, in fact, a function with the convention about its interface. Its input parameters are well defined, and its output for CMake is also standard (albeit extensible). The body of this function, except trivial cases, is rather complex because it has to handle a lot of nuances. Most of these nuances arise from various distribution methods, naturally, and are a dead-weight in any given case. Therefore this code has to be encapsulated under the well defined interface of `find_package()`.  Why is this helpful for distributions too? Because the place where you need to look for dependencies looks clean and simple.

> On the other hand, it is nonsense anyway, because I AM A LINUX DISTRIBUTION (I package qbittorrent, among other things, for @archlinux) and I assure you if we're modifying detection logic for any sort of dependency we are going to do it in the exported interface of the dependency itself.

Yes, I understand that and just a few days ago submitted a PR to libtorrent to make it install its Find module. 

> So please don't tell me that your advice to refactor these lines into their own file is motivated by your desire to do me a personal favor.

As you wish, but I use the Linux ecosytem too, and care for it.

> It's completely pointless because we don't care one way or the other, and never will.

Yeah, it shows. The ABS is the least functional package build system I ever used. But again, after Portage and Exheres nothing impresses."
426923593,12746,zeule,2020-05-18T22:20:21Z,"@FranciscoPombal 
>  But what you said was uncalled for in the context/moment that you said it. 

If you take that personal, I beg your pardon.

> Then you took a piece of code that you had never indicated you had a problem with previously, and called it ""bullshit you wrote""…

This is not true, you were told by me and @glassez to wrap that part into a file (where you, so to say,  took it from).

> …which will can only be met with hostility.

I see no problem in that. You are not going to kill somebody because of that, right?

> Ok. How many times do I have to tell you that will be done **after this PR**?

PR are supposed to bring improvements, right? But here it is a step back in this regard for no reason.

> Do you think it will be harder to move towards more encapsulated logic _after_ these changes? How can that be? Previously there was even global `CXX_FLAGS` manipulation going on, how were the previous scripts easier to work with for this future purpose?

I do not defend that code. I just see no reason to destroy other things when you don't have to.

> > Well, I use Windows only to launch Steam. Have no idea what are the best practices there.
> 
> Same here. There is only one machine where I have Windows installed on bare metal, and even then it's a dual-boot configuration with Ubuntu. I use that Windows install just for certain games that don't run well (or at all) with Proton/DXVK. But recently I also setup a Windows VM in Ubuntu, as a clean environment for building and testing qBittorrent on Windows. This is because I recognize that the majority of qBittorrent's user base is on Windows, and so whether we like it or not, improving the building process, release automation, etc for that OS is essential for the project. So, in addition to testing these changes on Linux, I'm doing my best to test them thoroughly on Windows.

This is great, of course. I'm absolutely ignorant with regard to development trends in the Windows word and no VM can help me...

> But this is, in principle, not a potential problem exclusive to Windows anyway. Pulling definitions out of thin air and not telling the user if that happens, as if they had been found normally, is for sure a bad practice no matter the system. Especially when the library in question is so picky about them, as is the case with `libtorrent`.

Exactly because of that there was this line in the Find module:
```cmake
message(STATUS ""libtorrent definitions: ${LibtorrentRasterbar_DEFINITIONS}"")
```
> That's exactly what is supposed to happen if no suitable pkgconfig file is found, but the ""fake package"" code is not even reached in that case anyhow, the build fails right at `pkg_check_modules`:
> 
> ```
> -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.29.1"") 
> -- Checking for module 'libtorrent-rasterbar>=1.2.0'
> --   No package 'libtorrent-rasterbar' found
> CMake Error at /usr/share/cmake-3.17/Modules/FindPkgConfig.cmake:467 (message):
>   A required package was not found
> Call Stack (most recent call first):
>   /usr/share/cmake-3.17/Modules/FindPkgConfig.cmake:647 (_pkg_check_modules_internal)
>   src/CMakeLists.txt:6 (pkg_check_modules)
> ```

Exactly. What to do in that case? Windows users have no pkg-config and might have no LibtorrentRaterbarConfig.cmake. MacOS too. 

> I'm relying on finding a suitable `LibtorrentRasterbarConfig.cmake`, which is as standard as it gets, no?

Yes, but it's implementation is what is non-standard in case of libtorrent.

> And even still, the user may place a custom `FindLibtorrentRasterbar.cmake` in the project's module directory and that will be used instead.

I don't think it's a way to go. Why do I need to write such a file from scratch when there are only three bits are required: library location, includes location, the set of configuration defines? You can easily provide a template for this case.

> In fact,the pkgconfig fallback was added 

It was there, you deleted it first to add later.

> at the request of @eli-schwartz ([#12746 (comment)](https://github.com/qbittorrent/qBittorrent/pull/12746#issuecomment-623749679)). It seemed reasonable enough, and to be honest, I think if an actual package maintainer from a ""big""/""mainstream"" distribution (who actually packages qBIttorrent, no less) agrees that this is the right way to do it (and further justifies why this is, [#12746 (comment)](https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r426808317), because one should not blindly follow/trust an ""authoritative"" source), you'll need to provide really convincing counter-arguments to go against that, or find another package maintainer who can do so.

May I skip this, please? Thankfully, libtorrent will install a proper find module with pkg-config check.


"
426954644,12746,FranciscoPombal,2020-05-18T23:57:40Z,"@zeule 

> @FranciscoPombal
> 
> > But what you said was uncalled for in the context/moment that you said it.
> 
> If you take that personal, I beg your pardon.
> 
> > Then you took a piece of code that you had never indicated you had a problem with previously, and called it ""bullshit you wrote""…
> 
> This is not true, you were told by me and @glassez to wrap that part into a file (where you, so to say, took it from).
> 
> > …which will can only be met with hostility.
> 
> I see no problem in that. You are not going to kill somebody because of that, right?

So funny xD. Sad to see a classic ""I'm sorry, BUT..."". We both know when you told me to ""wrap it in a find module"", `it` referred to the whole chunk of code. The ""fake package"" part is just a cosmetic part of it (ultimately not really needed), that makes the information that pkgconfig actually found the package more visible to the user. Otherwise, the pkgconfig output disappears in the scrollback. You then claimed it did not work in 2 cases, and I have proved that those are not a concern (and not a consequence of the ""fake package"" code itself anyway).

> > Ok. How many times do I have to tell you that will be done **after this PR**?
> 
> PR are supposed to bring improvements, right? But here it is a step back in this regard for no reason.

> > Do you think it will be harder to move towards more encapsulated logic _after_ these changes? How can that be? Previously there was even global `CXX_FLAGS` manipulation going on, how were the previous scripts easier to work with for this future purpose?
> 
> I do not defend that code. I just see no reason to destroy other things when you don't have to.

There are no steps backward in terms of encapsulation in this PR. If anything, there are steps forward (for example, previously, the function for ""adding features"" also added compile definitions at the source directory level as a result, which is a clear violation of encapsulation in my book; this is no longer the case). But it wouldn't even matter if there were no ""steps forward"". This PR could very well be just a side-grade in terms of encapsulation. The whole point of it is to simplify the whole foundation so that further encapsulation work is made easier for later.

> This is great, of course. I'm absolutely ignorant with regard to development trends in the Windows word and no VM can help me...

In case you ever need this, here goes some advice from what I have learned so far: Microsoft provides ready-to-go VMs for development/""evaluation"" free of charge with all the relevant development software pre-installed (VS, WSL, ...). You may need to use the VS GUI to install some toolchain packages/customize the toolchain packages, but after that, you don't need to use VS or any GUI at all if you don't need it for developing/building. Granted, using the VS dev console (which is just a shortcut that opens a cmd window with all of the relevant PATHs pre-set) is not the best experience, but it does the job. Hopefully in the future they will flesh out Powershell Core (there is already some support for plain Powershell as the dev console) + Windows Terminal support. For (much) better build performance, I recommend fully disabling the anti-virus (there are tutorials online for this; requires fiddling with the group policy editor, turning it off in the anti-virus GUI is of course not enough and it just turns itself back on next boot anyway because it knows better than you) and the search indexer (searching in the explorer GUI sucks anyway, and you can use classic Linux tools via WSL or even powershell for all your searching needs).

> Exactly because of that there was this line in the Find module:
> 
> ```cmake
> message(STATUS ""libtorrent definitions: ${LibtorrentRasterbar_DEFINITIONS}"")
> ```

Better than nothing for sure, but in my option, I would go more in the direction of:

```cmake
message(WARNING ""Failed to obtain library interface metadata for libtorrent, falling back to a default set of libtorrent definitions: ${LibtorrentRasterbar_DEFINITIONS}\nThese definitions may not be (entirely) appropriate for your case! Override by doing xyz ... etc ..."")
```

or even fail the build and force the user to pass an option allowing it to continue (as well as overrides to the default set, optionally).

> 
> > That's exactly what is supposed to happen if no suitable pkgconfig file is found, but the ""fake package"" code is not even reached in that case anyhow, the build fails right at `pkg_check_modules`:
>
> Exactly. What to do in that case? Windows users have no pkg-config and might have no LibtorrentRaterbarConfig.cmake. MacOS too.

Windows users have no incentive not to build with CMake if there is a choice, especially with stuff like `vcpkg` nowadays. Windows users have to compile everything from source anyway, what is the difference if they see the CMake way in the wiki page vs. the b2 way? They are just going to follow the steps. Both Windows and macOS decided to be special snowflakes in a lot of ways when it comes to building software especially, it is perfectly reasonable to just force users of those systems to ""just do it this way, it's what works"".

> > I'm relying on finding a suitable `LibtorrentRasterbarConfig.cmake`, which is as standard as it gets, no?
> 
> Yes, but it's implementation is what is non-standard in case of libtorrent.

Can you please elaborate on this? I have found it to work quite well, providing the expected information.

> > And even still, the user may place a custom `FindLibtorrentRasterbar.cmake` in the project's module directory and that will be used instead.
> 
> I don't think it's a way to go. Why do I need to write such a file from scratch when there are only three bits are required: library location, includes location, the set of configuration defines? You can easily provide a template for this case.

You don't need to write a basic template yourself. You just landed a PR in libtorrent that makes it so whichever way libtorrent is installed, the example find module is installed as well: so that will be used if nothing else works (I don't think you even need to copy it over manually to qBittorrent's module directory).

> > In fact, the pkgconfig fallback was added
> 
> It was there, you deleted it first to add later.

True, but more importantly, I only added the pkgconfig back later, not everything else in the find script as well.
"
428023191,12746,zeule,2020-05-20T13:45:36Z,"> So funny xD. Sad to see a classic ""I'm sorry, BUT..."". We both know when you told me to ""wrap it in a find module"", `it` referred to the whole chunk of code.

Well, if you want to play that game...

https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r426101657
https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r426282201
https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r426286364
https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r426782808

The fake package"" part is the result of your decision to put the find- logic into the main script. 

> You then claimed it did not work in 2 cases, and I have proved that those are not a concern.

You just rejected those cases without any rationale.

> In case you ever need this, here goes some advice from what I have learned so far…

Thank you.

> Better than nothing for sure, but in my option, I would go more in the direction of:

Perfect.

> Windows users have no incentive not to build with CMake…

Let me summarize: there was a working build script that was able to handle various environments and build the project on all the three major OSes. You propose to replace that with a new one that is unable to handle MacOS (can't create bundles), limits Windows users to a single installation method, complicates structure of the main build scrip. Does it gove something in return? I can't see anything. Am I missing something?

> True, but more importantly, I only added the pkgconfig back later, not everything else in the find script as well.

And that's the problem."
428055909,12746,glassez,2020-05-20T14:25:19Z,">pkg_check_modules() is an **alternative** to find_package(), they're two completely different ways to define a cmake ""imported target"".

Although I am not an advanced CMake user, it seems obvious and logical to me that `pkg_check_modules()`  is one of the ways of finding a certain package and getting information about it, whereas `find_package()`  is a generalized interface between the main build script and the implementation of searching for a specific package (which can have arbitrarily complex logic and use different methods, including pkgconfig).
But if CMake really involves using several (so-called) alternative methods (each of which is not able to do all the work on its own) then I'm even more disappointed in CMake."
428082853,12746,FranciscoPombal,2020-05-20T14:59:30Z,"@zeule 

> The fake package"" part is the result of your decision to put the find- logic into the main script.

Do you just want me to remove the ""fake pakage logic"" completely?

> > You then claimed it did not work in 2 cases, and I have proved that those are not a concern.
> 
> You just rejected those cases without any rationale.

https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r426901309

> Let me summarize: there was a working build script that was able to handle various environments and build the project on all the three major OSes. You propose to replace that with a new one that is unable to handle MacOS (can't create bundles), limits Windows users to a single installation method, complicates structure of the main build scrip. Does it gove something in return? I can't see anything. Am I missing something?

- Structure of the main buildscript is much simpler now overall. In fact, in what concerns ""finding libtorrent"", it would just be a one-liner if it did not have the pkgconfig fallback.
- Windows users were already limited to a single (worse) installation method in practice. See the current ""Windows compilation"" tutorial in the wiki. Plus it's not my fault that Windows does not use `pkgbuild`, otherwise it would not be limited to a single installation method with the new script.
- It works just fine in macOS: see this comment, and previous related ones: https://github.com/qbittorrent/qBittorrent/pull/12746#issuecomment-627300664

> > True, but more importantly, I only added the pkgconfig back later, not everything else in the find script as well.
> 
> And that's the problem.

I did this because I found the previous find script problematic, for the reasons repeated above multiple times. Including a fin script with qBittorrent is just more maintenance burden. We will have to keep it updated with the upstream ourselves. Seems worse than just automatically trusting the `LibtorrentRasterbarConfig.cmake` or pkgcofig files from upstream.

---

Do you think we should include our own `FIndOpenSSL.cmake` as well? Because that makes as much sense as what you're asking for. The current code already accommodates all of the common cases:

1. CMake will first try to find `libtorrent` in `CONFIG` mode, because of `set(CMAKE_FIND_PACKAGE_PREFER_CONFIG ON)` in the top level CML. This means it will try to use auto-generated `LibtorrentRasterbarConfig.cmake` first if possible, which is what we want.
2. If that fails, it re-tries in `MODULE` mode, which means it will use whatever `FindLibtorrentRasterbar.cmake` scripts it can find (if available). This could be an entirely custom one, or a default one provided by `libtorrent` itself, _that we don't have to worry about maintaining_.
3. If that fails, it tries the `pkgconfig` method if available, because it is so commonly available in Linux distros.

Now you might ask, ""since the default `FindLibtorrentRasterbar.cmake` already happens to search with `pkgconfig`, isn't the 3rd step redundant?"". The answer is yes, it is redundant, but only if you happen to use the default `FindLibtorrentRasterbar.cmake`, or a custom one that does the the `pkgconfig` search. Such a script might not be available, however, or the user may not want to write it, so the `pkgconfig` method serves as a convenience fallback on Linux.

We're doing exactly the same procedure with OpenSSL, except that since `FindOpenSSL.cmake` is guaranteed to exist and suit our needs, we just need to `find_package(OpenSSL)`, which really means we only follow the first 2 steps listed above."
428086629,12746,zeule,2020-05-20T15:04:12Z,"Becasue FindOpenSSL.cmake is guaranteed to exist, while FindLibtorrentRasterbar.cmake will appear with libtorrent 1.2.7 (?). When the minimal required libtorrent version for qBittorrent  increases to 1.2.7 or newer, you can drop the local copy of FindLibtorrentRasterbar.cmake. So simple."
428093865,12746,FranciscoPombal,2020-05-20T15:13:48Z,"@glassez 

> Although I am not an advanced CMake user, it seems obvious and logical to me that `pkg_check_modules()` is one of the ways of finding a certain package and getting information about it, whereas `find_package()` is a generalized interface between the main build script and the implementation of searching for a specific package (which can have arbitrarily complex logic and use different methods, including pkgconfig).
> But if CMake really involves using several (so-called) alternative methods (each of which is not able to do all the work on its own) then I'm even more disappointed in CMake.

I also think it makes sense to abstract  `pkg_check_modules()` away in a find script, so that it all happens behind the scenes with a single call to `find_package()`, but one must be aware of the trade-offs/consequences:

- It is either guaranteed that the `FindPakcageXYZ.cmake` script will always be available
or
- You, as the client package, take up the burden and technical debt of bringing along and keeping up-to-date a (possibly customized) copy of some reference `FindPakcageXYZ.cmake`. Or if there is no reference, roll your own.

For libtorrent, we have the following case:
- It is not guaranteed that `FindLibtorrentRasterbar.cmake` exists everywhere.
- I don't think we should carry our own copy of `FindLibtorrentRasterbar.cmake` and worry about it.

That's why I think it's reasonable to follow the 3 steps listed in https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r428082853."
428100052,12746,FranciscoPombal,2020-05-20T15:22:11Z,"@zeule 

> Becasue FindOpenSSL.cmake is guaranteed to exist, 

Yes, that's what I said.

> while FindLibtorrentRasterbar.cmake will appear with libtorrent 1.2.7 (?). When the minimal required libtorrent version for qBittorrent increases to 1.2.7 or newer, you can drop the local copy of FindLibtorrentRasterbar.cmake. So simple.

This code works great with or without libtorrent >=1.2.7. I don't want to wait until the minimum required version is 1.2.7."
431213529,12746,FranciscoPombal,2020-05-27T15:05:50Z,"So, @glassez, what is your verdict? I want to merge this and move on."
431223365,12746,glassez,2020-05-27T15:19:03Z,"I didn't review it completely... will do it later.
But this place seems bad to me. Maybe, of course, this is how it should be in CMake... (I'm not an advanced CMake user)."
431722129,12746,glassez,2020-05-28T10:01:49Z,"You will have to change this logic when we start switching to C++17, because we can't require full support here (due to MSVC limitations)."
431870543,12746,glassez,2020-05-28T14:18:40Z,Isn't it needed anymore?
431871712,12746,glassez,2020-05-28T14:20:14Z,"```cmake
if (UNIX)
    if (NOT LibtorrentRasterbar_FOUND)
```"
431881632,12746,glassez,2020-05-28T14:31:50Z,"Should you move ""find package"" for all common packages into qbt_base?"
433543462,12746,FranciscoPombal,2020-06-01T23:36:56Z,"@glassez looks like the situation is worse than expected; with C++17, this won't even work with GCC or Clang either: https://gitlab.kitware.com/search?project_id=541&repository_ref=master&search=CMAKE_CXX17_STANDARD__HAS_FULL_SUPPORT.

Honestly at this point it would just be better to hard-code minimum supported versions (e.g. for C++14 that is GCC >= 5.0, clang >= 5.0, MSVC >= 19.11.25505).

I would prefer if we could postpone this discussion until we're actually migrating to C++17, but let me know if you would prefer this change right here."
433546411,12746,FranciscoPombal,2020-06-01T23:47:51Z,"@glassez 

Nope. This file was a hack used to map the cmake defines to qBittorrent defines.

As an example, it had stuff like:

```cpp
#ifndef QBT_USE_GUI
#define DISABLE_GUI
#define DISABLE_COUNTRIES_RESOLUTION
#endif
```

So if `QBT_USE_GUI` was not set to `ON` in cmake, `DISABLE_GUI` and `DISABLE_COUNTRIES_RESOLUTION` would be defined for the purposes of C++ files preprocessing/compilation.


Now we just do:

```cmake
if (NOT GUI)
    add_compile_definitions(DISABLE_GUI) # ideally will be target_compile_definitions() for separate targets in the future
```"
433547261,12746,FranciscoPombal,2020-06-01T23:50:48Z,@glassez fixed.
433549825,12746,FranciscoPombal,2020-06-02T00:00:08Z,"@glassez do you mean into the CML file at `src/base`, or just the top-level CML file?

I did it this way initially because:
- Both `src/base` and `src/app` need some of these packages
- Seemed awkward to have `find_package()` calls in the top-level CML, since everywhere else the calls are only made as-needed, which I think is a good thing. For example, having the `find_package()` calls to the GUI stuff in the `src/gui` CML simplifies the logic in the parent CMLs (no need for `if(GUI) find_package() ...`)."
439839146,12746,jagannatharjun,2020-06-14T15:08:51Z,"can you add `/wd4127` here 
it produces too much useless noise in the builds 
<details>
```
       ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QString,char>,QString>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QString,char>,QString>::operator QString(void) const'
..\src\gui\mainwindow.cpp(1151): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QString,char>,QString>::operator QString(void) const' being compiled
..\src\gui\mainwindow.cpp(1153): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QString,char>,QString>' being compiled
C:\Users\Prince\Desktop\Projects\qBittorrent\src\gui\mainwindow.cpp(1298) : warning C4702: unreachable code
[133/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\properties\peersadditiondialog.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(796): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(796): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(789): note: while compiling class template member function 'void QVector<BitTorrent::PeerAddress>::append(const T &)'
        with
        [
            T=BitTorrent::PeerAddress
        ]
..\src\gui\properties\peersadditiondialog.cpp(69): note: see reference to function template instantiation 'void QVector<BitTorrent::PeerAddress>::append(const T &)' being compiled
        with
        [
            T=BitTorrent::PeerAddress
        ]
C:\Users\Prince\Desktop\Projects\qBittorrent\src\gui\properties\peersadditiondialog.h(57): note: see reference to class template instantiation 'QVector<BitTorrent::PeerAddress>' being compiled
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(802): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(802): note: consider using 'if constexpr' statement instead
[134/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\search\searchlistdelegate.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const'
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(144): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const' being compiled
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(146): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>' being compiled
[135/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\properties\peerlistwidget.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QString,char>,QString>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QString,char>,QString>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QString,char>,QString>::operator QString(void) const'
..\src\gui\properties\peerlistwidget.cpp(323): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QString,char>,QString>::operator QString(void) const' being compiled
..\src\gui\properties\peerlistwidget.cpp(323): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QString,char>,QString>' being compiled
[136/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\search\searchsortmodel.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const'
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(144): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const' being compiled
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(146): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>' being compiled
[137/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\optionsdialog.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QString,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QString,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QString,QLatin1String>::operator QString(void) const'
..\src\gui\optionsdialog.cpp(470): note: see reference to function template instantiation 'QStringBuilder<QString,QLatin1String>::operator QString(void) const' being compiled
..\src\gui\optionsdialog.cpp(470): note: see reference to class template instantiation 'QStringBuilder<QString,QLatin1String>' being compiled
[138/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\search\pluginselectdialog.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(796): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(796): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(789): note: while compiling class template member function 'void QVector<QTreeWidgetItem *>::append(const T &)'
        with
        [
            T=QTreeWidgetItem *
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(293): note: see reference to function template instantiation 'void QVector<QTreeWidgetItem *>::append(const T &)' being compiled
        with
        [
            T=QTreeWidgetItem *
        ]
..\src\gui\search\pluginselectdialog.cpp(242): note: see reference to class template instantiation 'QVector<QTreeWidgetItem *>' being compiled
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(802): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(802): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QString,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QString,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QString,QLatin1String>::operator QString(void) const'
..\src\gui\search\pluginselectdialog.cpp(363): note: see reference to function template instantiation 'QStringBuilder<QString,QLatin1String>::operator QString(void) const' being compiled
..\src\gui\search\pluginselectdialog.cpp(366): note: see reference to class template instantiation 'QStringBuilder<QString,QLatin1String>' being compiled
[139/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\properties\propertieswidget.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QString,char>,QString>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QString,char>,QString>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QString,char>,QString>::operator QString(void) const'
..\src\gui\properties\propertieswidget.cpp(380): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QString,char>,QString>::operator QString(void) const' being compiled
..\src\gui\properties\propertieswidget.cpp(380): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QString,char>,QString>' being compiled
[140/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\shutdownconfirmdialog.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QString,char>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QString,char>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QString,char>::operator QString(void) const'
..\src\gui\shutdownconfirmdialog.cpp(139): note: see reference to function template instantiation 'QStringBuilder<QString,char>::operator QString(void) const' being compiled
..\src\gui\shutdownconfirmdialog.cpp(139): note: see reference to class template instantiation 'QStringBuilder<QString,char>' being compiled
[141/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\search\searchwidget.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const'
C:\Qt\5.14.1\msvc2017_64\include\QtCore\qregularexpression.h(144): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const' being compiled
C:\Qt\5.14.1\msvc2017_64\include\QtCore\qregularexpression.h(146): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>' being compiled
[143/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\properties\speedwidget.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const'
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(144): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const' being compiled
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(146): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>' being compiled
[144/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\tagfilterproxymodel.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const'
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(144): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const' being compiled
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(146): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>' being compiled
[145/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\speedlimitdialog.cpp.obj
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(120): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: see reference to function template instantiation 'T QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::convertTo<QString>(void) const' being compiled
        with
        [
            T=QString
        ]
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qstringbuilder.h(131): note: while compiling class template member function 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const'
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(144): note: see reference to function template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>::operator QString(void) const' being compiled
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qregularexpression.h(146): note: see reference to class template instantiation 'QStringBuilder<QStringBuilder<QLatin1String,QString>,QLatin1String>' being compiled
[146/298] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\properties\trackerlistwidget.cpp.obj
..\src\gui\properties\trackerlistwidget.cpp(366): warning C4458: declaration of 'data' hides class member
C:\Qt\5.14.1\msvc2017_64\include\QtWidgets/qwidget.h(747): note: see declaration of 'QWidget::data'
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(796): warning C4127: conditional expression is constant
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(796): note: consider using 'if constexpr' statement instead
C:\Qt\5.14.1\msvc2017_64\include\QtCore/qvector.h(789): note: while compiling class template member function 'void QVector<T>::append(const T &)'
```
</details>"
439844062,12746,Chocobo1,2020-06-14T16:03:43Z,"@jagannatharjun 
I think it is sensible to have both build systems using the same flags, i.e. you might want to submit a PR changing the qmake part first so that this PR can follow."
439844456,12746,jagannatharjun,2020-06-14T16:07:44Z,"qmake uses /W3, which has c4127 already disabled

so maybe make it /W3 then. "
439844560,12746,Chocobo1,2020-06-14T16:09:11Z,I think it is caused by `/W4` which isn't present in qmake build. I would suggest to remove it and rely on the default.
439924716,12746,Chocobo1,2020-06-15T04:28:19Z,">so maybe make it /W3 then.

Agreed. MSVC IDE defaults to `/W3` too. 
https://docs.microsoft.com/en-us/cpp/build/reference/compiler-option-warning-level?view=vs-2019"
439951415,12746,glassez,2020-06-15T06:19:20Z,"Well, I finally found the time to test it... and I failed it! More precisely, my test failed from the first steps. I found another drawback of these changes that is ""blocking issue"" for me.
Your patch broke my development scenario. I need to do parallel development of qBittorrent and libtorrent (I'm making changes to both projects), so I don't have an ""installed"" libtorrent, but only a configured project in the IDE (QtCreator) so my main project depends on it and build it first. It's very easy to configure there (especially in the case of QMake, nothing else is required).
The initial problem with CMake was that It didn't allow you to configure projects because it couldn't find libtorrent. For the current CMake script, it was easy to get around this inconvenience, I only had to set a couple of CMake variables in the project settings (LibtorrentRasterbar_INCLUDE_DIR and LibtorrentRasterbar_LIBRARY), so it didn't search for the package, but just used these values. With this changes I can't use this solution. I get the following message:
>D:\Users\glassez\Documents\Projects\qbittorrent\qBittorrent\src\CMakeLists.txt:21: error: By not providing ""FindLibtorrentRasterbar.cmake"" in CMAKE_MODULE_PATH this project has asked CMake to find a package configuration file provided by ""LibtorrentRasterbar"", but CMake did not find one. Could not find a package configuration file provided by ""LibtorrentRasterbar"" (requested version 1.2.0) with any of the following names: LibtorrentRasterbarConfig.cmake libtorrentrasterbar-config.cmake Add the installation prefix of ""LibtorrentRasterbar"" to CMAKE_PREFIX_PATH or set ""LibtorrentRasterbar_DIR"" to a directory containing one of the above files.  If ""LibtorrentRasterbar"" provides a separate development package or SDK, be sure it has been installed.

I'm sorry, I can't approve of it until it is fixed or another solution is presented."
439986841,12746,glassez,2020-06-15T07:43:52Z,"<del>Well, seems it is possible to make libtorrent a part of qBittorrent project itself just by include it. Am I right? Then we just need to introduce some variable, e.g. LibtorrentRasterbar_PROJECT_DIR, and handle it (when it's set skip package searching and include libtorrent project).
Can you investigate into it? Or do you think about another solution? (I can test it when I have time.)</del>

Unfortunately the above won't work..."
440038720,12746,jagannatharjun,2020-06-15T09:14:47Z,"> Unfortunately the above won't work...

have you considered https://cmake.org/cmake/help/latest/module/ExternalProject.html"
440093013,12746,glassez,2020-06-15T10:54:14Z,">have you considered

No. I don't know much about CMake. And I don't have enough time to study it in detail.
I can try it, of course, but I'm not sure it will work easily. Judging by the amount of documentation, it is not so easy to configure... in addition, this is the job of someone who broke the handling of the use case I described above (""satellite projects"" development)."
440094145,12746,zeule,2020-06-15T10:56:24Z,"Assuming Libtorrent is built with cmake too, one can supply `LibtorrentRasterbar_DIR` variable when configuring qBt. The variable has to point to the directory containing the LibtorrentRasterbarConfig.cmake file (`<build dir>/LibtorrentRasterbar`). This works with any CMake `find_package()` call (https://cmake.org/cmake/help/latest/command/find_package.html#search-procedure)."
440126875,12746,glassez,2020-06-15T12:03:43Z,">one can supply LibtorrentRasterbar_DIR variable when configuring qBt. The variable has to point to the directory containing the LibtorrentRasterbarConfig.cmake file

It won't work in described use case.
What I need is the ability to tell CMake that some dependent package is not installed at the time of project configuration, but should be compiled from sources before building the project (or at least trick CMake into believing that the package was found, as I did earlier, and allow QtCreator to handle dependency between projects)."
440137984,12746,zeule,2020-06-15T12:24:59Z,"I can re-assure you it works exactly as you want, but you need to run configure for libtorrent manually for the first time."
440149244,12746,glassez,2020-06-15T12:45:58Z,">you need to run configure for libtorrent manually for the first time.

I know it already but it's exactly what I don't want!
I just want to perform ""Build"" on qBittorrent project and allow my IDE to resolve its dependencies. This is something that works perfectly with the native Qt build system (QMake). And it should continue to work with CMake on the same principle (configured and forgot)."
440151777,12746,zeule,2020-06-15T12:50:11Z,"libtorrent does not provide qmake build script. If the build works for in the way you describe, you must have wrote a qmake rule to build libtorrent. If so, why don't you do the same for CMake, the mainstream C++ build system?"
440390709,12746,FranciscoPombal,2020-06-15T19:14:59Z,"@Chocobo1 @jagannatharjun 

Hmm, I have set it to `/W3` for now, but looking through https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warnings-c4000-through-c4199 and https://docs.microsoft.com/en-us/cpp/preprocessor/compiler-warnings-that-are-off-by-default, there seem to be some level 4 warnings that would be nice to have when building on Windows, such as https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-4-c4189.

I think that ideally, we'd use `/W4 /Wall`, and then blacklist those that produce too much noise. However, _where_ the noise is coming from is also important. For example, I'd actually like to have warning `C4127`, but only for our code - is there a way to tell that to the compiler? e.g. ""if this warning comes from Qt code, ignore it""?"
440598537,12746,glassez,2020-06-16T05:43:08Z,"I don't think you understand what I'm talking about...
Here is a description of my workflow (two ways, common things are omitted):
1. Create ""Solution"" in QtCreator and add two ""Project"": CMake-based ""libtorrent"" and ""qBittorrent"" (either QMake or Cmake based).
2. Configure ""qBittorrent"" to use ""libtorrent"" include dir and built library (using appropriate variables in QMake based project or LibtorrentRasterbar_INCLUDE_DIR/LibtorrentRasterbar_LIBRARY in CMake based project - before this PR it also prevents CMake to search for libtorrent package).
3. Set ""libtorrent"" project as dependency for ""qBittorrent"" project (in QtCreator project settings). So from now on QtCreator handle this dependency.

A piece of cake! And I want it to stay that way."
440780062,12746,zeule,2020-06-16T11:29:49Z,"I can't see how that differs from the workflow with PackageName_DIR that I proposed to you above. As an illustration here was my setup with KDevelop:
1. Add libtorrent cmake project to a new session or a session with qBt project.
2. Configure the libtorrent project to make it generate export targets and package config files in the LibtorrentRasterbar subdir of its build dir.
3. If the qBt project was already configured and picked the system libtorrent up, either remove Libtorrent variables from the project cmake cache or delete the cache or build dir altogether.
4. (Re-)Configure the qBt project passing `-DLibtorrentRasterbar_DIR=<libtorrent_build_dir/LibtorrentRasterbar/>`
5. Ensure libtorrent is placed earlier than qBt In the session build target list.

Looks pretty match the same for me. Or you can go the formal way and create a superbuild project using the ExternalProject commands, as it was already suggested in the thread."
441875422,12746,FranciscoPombal,2020-06-17T22:50:01Z,"@glassez 

Sorry for not responding earlier, but this thread has gotten quite long and this particular comment chain is starting to get buried, so I only saw this now.

As mentioned, if you've built libtorrent with CMake, it is quite easy to use it when building qBittorrent with CMake, whether you ""install"" it or not. According to what I understood of your workflow, you  want to build libtorrent and use the files directly from the build dir without ""installing it"". To accomplish this, you can simply point `LibtorrentRasterbar_DIR` to the libtorrent build dir.

For example, if you've built libtorrent like so:

```
$ cd libtorrent
$ cmake -S . -B cmake-build-dir -DCMAKE_CXX_STANDARD=14 -DCMAKE_BUILD_TYPE=RelWithDebInfo -Ddeprecated-functions=FALSE
```

All the build files will go to `libtorrent/cmake-build-dir`, and will be usable in this state (including the CMake config/target scripts), even before you issue the install command.
In particular, `LibtorrentRasterbarConfig.cmake` will be inside `libtorrent/cmake-build-dir/LibtorrentRasterbar`

So, when building qBittorrent, you just need to add: `-DLibtorrentRasterbar_DIR=""/absolute/path/to/libtorrent/cmake-build-dir/LibtorrentRasterbar""` to its CMake configure command line.

I imagine setting it up like this in QtCreator should be no problem."
442004443,12746,glassez,2020-06-18T06:50:39Z,">I imagine setting it up like this in QtCreator should be no problem.

It's not a problem. The problem is that I require some additional manual actions since this PR... although it's not so big deal. Seems Qt Creator has its own drawbacks (about integration with CMake), so maybe I need to send a couple of bug reports there first.

Well, even if you don't look at it Qt Creator integration, there is a more general/serious problem here, which is the inability to use it on Windows if libtorrent isn't built with CMake (please correct me if I'm wrong)."
442135507,12746,FranciscoPombal,2020-06-18T10:43:30Z,"@glassez 

> It's not a problem. The problem is that I require some additional manual actions since this PR... although it's not so big deal. Seems Qt Creator has its own drawbacks (about integration with CMake), so maybe I need to send a couple of bug reports there first.

Yes, conceptually it's not even a big deal; it's just ""when building CMake project X (qBittorrent) with some specified options, build CMake project Y (libtorrent) first with some specified options"". Since Qt itself is moving to CMake very soon, I would expect a basic flow like this to be easily configurable, if not today, then in the near future.

> Well, even if you don't look at it Qt Creator integration, there is a more general/serious problem here, which is the inability to use it on Windows if libtorrent isn't built with CMake (please correct me if I'm wrong).

I'm not sure how libtorrent built with `b2` was propagating usage requirements to qBittorrent's qmake build previously. But now, I think the best solution for this is to have libtorrent generate/bundle CMake config files even when built with `b2`, so that it can easily be used in any CMake project. libtorrent is very sensitive to the flags used in its compilation and dependent projects, so automatic usage requirement resolution and propagation is a must. I honestly don't expect anyone building qBittorrent (or any C++ project based on libtorrent) to want to add libtorrent's libdir, include dir, compile flags, defines, etc manually.

An existing example of this, actually relevant to us: right now, Qt is built with qmake, but it still generates/bundles proper CMake config files. That's why you can build Qt yourself (like in the wiki, with qmake) and have it still ""just work"" in CMake projects:

> - Compiled qBittorrent itself using the manually-built [following the wiki procedure] dependencies:
    ```
    cd qBittorrent
    cmake -S . -B build -DVERBOSE_CONFIGURE=ON -DCMAKE_PREFIX_PATH=G:\QBITTORRENT\install_msvc64\base -DBoost_ROOT=G:\QBITTORRENT\boost_1_72_0\stage -DBoost_USE_STATIC_RUNTIME=ON -DQt5_DIR=G:\QBITTORRENT\install_msvc64\qt5\lib\cmake\Qt5
    cmake --build .\build\ --config RelWithDebInfo
    ```
>
>and... it worked! (...)

Note the `-DQt5_DIR=G:\QBITTORRENT\install_msvc64\qt5\lib\cmake\Qt5`.

But yes, at present, you're right. Until libtorrent's `b2` build generates CMake config files, it is not feasible to build qBittorrent on Windows with CMake if libtorrent wasn't also built with CMake."
442146582,12746,zeule,2020-06-18T11:05:53Z,"> But yes, at present, you're right. Until libtorrent's `b2` build generates CMake config files, it is not feasible to build qBittorrent on Windows with CMake if libtorrent wasn't also built with CMake.

Because you broke that in this very PR. LOL"
442152987,12746,glassez,2020-06-18T11:19:14Z,">I'm not sure how libtorrent built with b2 was propagating usage requirements to qBittorrent's qmake build previously. 
...
libtorrent is very sensitive to the flags used in its compilation and dependent projects, so automatic usage requirement resolution and propagation is a must. I honestly don't expect anyone building qBittorrent (or any C++ project based on libtorrent) to want to add libtorrent's libdir, include dir, compile flags, defines, etc manually.

You seem to be exaggerating... there is no such big problem here (at least for developers). I've always done it manually. What's the problem with using the same settings to build these two projects?
Actually, CMake gave me more trouble when I had to make it work correctly (e.g. when it failed to find Boost in the folder where it was without any helpful error messages).

In any case, I see no serious reason to break supporting libtorrent that is built with something other than CMake (at least as part of current changes)."
442165238,12746,FranciscoPombal,2020-06-18T11:44:57Z,"@zeule

Let's see what I ""broke"" (quote from the FindLibtorrentRasterbar.cmake file deleted by this PR):

>```cmake
># Without pkg-config, we can't possibly figure out the correct build flags.
># libtorrent is very picky about those. Let's take a set of defaults and
># hope that they apply. If not, you the user are on your own.
>```

Which is of course an excellent idea - set some important parameters to some values and hope for the best silently, without even informing/warning the user.

Moving to an objectively better solution is not ""breaking"", it's ""improving"". It just so happens that an improvement is also necessary in libtorrent's side (`b2` builds need to generate CMake config files).

I'd like to hear how asking for a library to generate config files for the standard C++ build system  when using another build system is not preferable to the previous solution. Perhaps we should also open a bug report on Qt's bug tracker saying ""hey guys, you know that thing you were doing with the qmake build generating proper, usable cmake config files? scratch that, just publish a findQt5.cmake file, tell everyone that they are expected to copy paste it in their projects (and to keep an eye out for changes :)). Oh, and make sure to silently set important variables to arbitrary values to what you think are sane when whatever automatic detection methods you have in place fail, without warning the user.""."
442172825,12746,zeule,2020-06-18T11:59:48Z,"There are two calls in the FindLibtorrentRasterbar.cmake file that make it possible to use it if you are on Windows and libtorrent is built with boost build (or in any other situation when the cmake way could not work): `find_path()` and `find_library()` with hints. 

If you do not understand the purpose of the code are you throwing out, maybe it's time to pause for a while and think a little bit?

As to your comment about random libtorrent flags, I can only say it is unrelated to the topic. The closest related think is the`LibtorrentRasterbar_CUSTOM_DEFINITIONS` variable in the same file."
442207877,12746,glassez,2020-06-18T13:01:35Z,"At least current (master) approach allows you to use any libtorrent distribution and I don't think this is a flaw that needs to be fixed.
Please extract this change into separate PR if you want to continue this discussion."
442215549,12746,FranciscoPombal,2020-06-18T13:13:54Z,"@zeule 

> There are two calls in the FindLibtorrentRasterbar.cmake file that make it possible to use it if you are on Windows and libtorrent is built with boost build (or in any other situation when the cmake way could not work): `find_path()` and `find_library()` with hints.
> 
> If you do not understand the purpose of the code are you throwing out, maybe it's time to pause for a while and think a little bit?

I never claimed there was no way of finding libtorrent before, I claimed that my changes move towards a better way of doing it, that will also require changes on the libtorrent side. If these changes land before the required ones in libtorrent, then yes, there will be a period of time where building libtorrent without CMake on Windows won't work for building qBittorrent. But who cares? Window users can just build it with CMake in the meantime! CMake comes bundled with VS so most people interested in building on Windows already have it, and even if it didn't, Windows users are no strangers to the simple task of downloading an exe from the official website (and optionally adding it to PATH). Not to mention that in the future, they'll have to have CMake anyway already to build qBittorrent. Using CMake to build both projects is the most practical way already.

You have already submitted a PR in libtorrent that touched some `b2` files, so you probably have some experience with that. Additionally, you also recognize the importance of CMake in the C++ ecosystem. So, instead of arguing with me here, why not spend that time implementing the better solution over there (making libtorrent `b2` builds generating CMake config files)? Personally, I have no interest in doing that myself, I'm happy to just tell Windows users ""just build it with CMake"", and I doubt the vast majority would take issue with that or let it bother them.

> As to your comment about random libtorrent flags, I can only say it is unrelated to the topic. The closest related think is the`LibtorrentRasterbar_CUSTOM_DEFINITIONS` variable in the same file.

It is relevant. In the old code:

- On Windows, `PC_LIBTORRENT_RASTERBAR_FOUND` will be false (because no `pkgconfig`), leading to the `if(LibtorrentRasterbar_CUSTOM_DEFINITIONS) ... else()` conditional.
    - If the user manually specifies `LibtorrentRasterbar_CUSTOM_DEFINITIONS`, that will be used. But this is not only tedious and error-prone, it is unlikely that the user will even know about `LibtorrentRasterbar_CUSTOM_DEFINITIONS` in the first place, since it's ""documentation"" is a comment in the script.
    - If the `else()` branch is taken, we fall into the part I mentioned above: `# Without pkg-config, we can't possibly figure out the correct build flags. (...)`, where flags that may not work are set without warning.
- After that, nothing noteworthy happens to `LibtorrentRasterbar_DEFINITIONS`. It is used to determine if OpenSSL is needed or not. Additionally, a few more things may get appended if `LibtorrentRasterbar_USE_STATIC_LIBS` (another important variable documented by comment) is not set.
- It is then added to the target properties. May not work, hope for the best."
442228697,12746,FranciscoPombal,2020-06-18T13:33:12Z,"@glassez 

> You seem to be exaggerating...

Exaggerating about what? `libtorrent is very sensitive to the flags (...)` is no exaggeration.

> there is no such big problem here (at least for developers). I've always done it manually. What's the problem with using the same settings to build these two projects?

You think having to set libtorrent's libdir, include dir, compile flags, defines, etc manually is a good way of doing things? Same with the official qmake build procedure in the wiki (https://github.com/qbittorrent/qBittorrent/wiki/Compiling:-MSVC-2019-(static-linkage)#Compiling_qBittorrent), having to manually edit the build script just to build is insane. Maybe it does not bother you because you've been doing it for a long time, but don't let that cloud your judgement.

> Actually, CMake gave me more trouble when I had to make it work correctly (e.g. when it failed to find Boost in the folder where it was without any helpful error messages).

It's difficult to be simpler than this (unless using something like `vcpkg` providing a toolchain file):

```
cd libtorrent
cmake -S . -B cmake-build-dir -DCMAKE_CXX_STANDARD=14 -Ddeveloper-options=ON -Ddeprecated-functions=OFF -Dstatic_runtime=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_PREFIX_PATH=G:\QBITTORRENT\install_msvc64\base -DBoost_ROOT=G:\QBITTORRENT\boost_1_72_0\stage -DCMAKE_INSTALL_PREFIX=G:\QBITTORRENT\install_msvc64\base
cmake --build .\cmake-build-dir\ --config RelWithDebInfo && cmake --install .\cmake-build-dir\ --config RelWithDebInfo

cd qBittorrent
cmake -S . -B build -DVERBOSE_CONFIGURE=ON -DCMAKE_PREFIX_PATH=G:\QBITTORRENT\install_msvc64\base -DBoost_ROOT=G:\QBITTORRENT\boost_1_72_0\stage -DBoost_USE_STATIC_RUNTIME=ON -DQt5_DIR=G:\QBITTORRENT\install_msvc64\qt5\lib\cmake\Qt5
cmake --build .\build\ --config RelWithDebInfo
```

It works for everyone with the same files (no need to edit them), each person just has to change paths like `-DBoost_ROOT=...` to what they're using at the command line. Scriptable, automation-friendly and doesn't require a GUI. If you're missing any important `-D.*_{ROOT,DIR}` option, you'll get a helpful message like this for each of them (example for boost):

```
error (...)
Please set BOOST_ROOT to the root
directory containing Boost or BOOST_INCLUDEDIR to the directory containing
Boost's headers.
(...)
```

No idea why it failed without a helpful message in your case. Perhaps something wrong with your boost installation?

> In any case, I see no serious reason to break supporting libtorrent that is built with something other than CMake (at least as part of current changes).

It's not a serious problem to break it temporarily (and only on Windows), until libtorrent's `b2` build is capable of generating the required files. The workaround/alternative, which is ""just build it with CMake"" is more than sufficient and acceptable IMO."
444373419,12746,glassez,2020-06-23T17:00:47Z,"@FranciscoPombal
Are you still going to slow down the entire PR because of this unresolved issue, or are you going to separate it?

There is nothing too problematic for me personally, just some inconveniences...
But can this create problems for users of some more ""exotic"" systems? I mean, how likely is it that some distribution has installed libraries without both CMake and PkgConfig configuration files?
Do we need to hear more opinions about this particular change?

P.S. I am ready to approve it as soon as my last questions are satisfied (as well as when the pending changes are completed and the commits are squashed).
@Chocobo1?"
445095326,12746,FranciscoPombal,2020-06-24T18:39:27Z,"@glassez 

> But can this create problems for users of some more ""exotic"" systems? I mean, how likely is it that some distribution has installed libraries without both CMake and PkgConfig configuration files?

As far as I know, both of libtorrent's buildsystems produce at least the pkgconfig configuration files. You could argue ""what happens in distros that don't have pkgconfig?"" - but is this really an issue? I'd say it's very unlikely that there exists a relevant modern distro that doesn't have pkgconfig (although if anyone has hard evidence to the contrary, please enlighten me).

Anyway, what I'm advocating for (making libtorrent's b2 build method also produce CMake configuration files) makes the ""not having pkgconfig"" problem a non-issue.

Of course, this whole discussion has an even simpler solution: just don't have 2 different buildsystems. That way we wouldn't even have to worry about having the libtorrent b2 build producing CMake config files. Why does libtorrent have to have 2 buildsystems? I suppose it still has both because it started out with b2 and never really dropped it completely, even up to now. If it could only be built with CMake, we would not be having this discussion, everyone would build it happily just fine and no one would complain. But since it happens to be able to be built a different way (which currently does not generate the required config files for the other buildsystem), everyone is sort of forced to support both, because any distro may to decide to use either one.(1)

Supporting 2 different buildsystems is just a waste of time. It's ok to have 2 during some kind of ""transition phase"" when moving from one to the other, but to keep supporting both indefinitely? Just wasteful.(2) Ultimately, a decision has to be made in favor of one for the project, and then everyone should ""get with the program"".

(1) We can always just ignore this, pretend libtorrent built with b2 doesn't exist, and say ""your libtorrent distro package was built with b2 and it did not produce CMake config files? How terrible. Grab the libtorrent source and compile from source yourself"".

(2) There is an an exception to this: when one of the platforms the application must support absolutely requires using a different specific buildsystem than the rest. I don't think that's the case for libtorrent, qBittorrent, or similar projects. Modern CMake alone is more than adequate for these projects.

> P.S. I am ready to approve it as soon as my last questions are satisfied

Besides this one, can you please remind me of the other unresolved concerns you have?

> Are you still going to slow down the entire PR because of this unresolved issue, or are you going to separate it?

We don't have to slow down for this. We could just do it this way. If there are too many complaints, we can backtrack and re-add the package find file. But I doubt there will be many, if any complaints. The only complaint so far about this solution being worse is hypothetical (I'm not referring to this one https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r442152987 of yours, which I don't think is complaint about this idea in general, you just had separate issue with boost). Everyone else is either indifferent to this find package change (which is a good thing, it means it ""just works""), or actively supporting it (an actual Arch Linux package maintainer, no less). I would consider making package maintainers' lives easier a nice bonus."
445118655,12746,glassez,2020-06-24T19:22:51Z,">Besides this one, can you please remind me of the other unresolved concerns you have?

No, I meant the questions from my previous comment only."
445127494,12746,FranciscoPombal,2020-06-24T19:40:01Z,"@glassez 

This one? https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r442207877

> At least current (master) approach allows you to use any libtorrent distribution and I don't think this is a flaw that needs to be fixed.
Please extract this change into separate PR if you want to continue this discussion.

You can still use any libtorrent distribution, as long as you have pkgconfig or CMake."
449520397,12746,glassez,2020-07-03T10:53:05Z,"There is error on Windows using MinGW:
```
CMake Error:
  Error evaluating generator expression:

    $<TARGET_PDB_FILE:qBittorrent>

  TARGET_PDB_FILE is not supported by the target linker.
```

Please fix it!"
449530032,12746,glassez,2020-07-03T11:18:03Z,"@FranciscoPombal
Finally, I have completed my research on this issue.
Fortunately, your ""totalitarian"" tendencies will not be satisfied, and it still allows you to use any libtorrent source via `FindLibtorrentRasterbar.cmake` script installed in the system (or provided to CMake in any possible way). It looks for CMake configuration files first, and if it fails at this, it still tries to find `FindLibtorrentRasterbar.cmake` file and use it. IMO, it works now even better than it did before, so I am satisfied and this issue is closed for me."
449537172,12746,glassez,2020-07-03T11:36:21Z,"> do you mean into the CML file at src/base,

Yes. Shouldn't `qbt_base` care about required packages? Then it can provide all common libraries/definitions as part of its interface (IIRC, it already does this job except finding packages).
>Both `src/base` and `src/app` need some of these packages

But `qbt_app` depends on `qbt_base` so it shouldn't be a problem to obtain all needed stuff via `qbt_base` interface.
(I think you understand what ""interface"" means in context of CMake imported targets)"
449569447,12746,glassez,2020-07-03T12:55:37Z,"On the other hand, we can have all these ""find_package"" calls in one place (and GUI-related too, to be consistent). In addition, splitting the project into multiple targets (static libraries) still doesn't look certain to me.

>For example, having the `find_package()` calls to the GUI stuff in the `src/gui` CML simplifies the logic in the parent CMLs (no need for `if(GUI) find_package() ...`).

But you still have `if(GUI)` to include GUI stuff, isn't it? So it can just be written as:
```cmake
if (GUI) 
    find_package(SOME_GUI_PACKAGE)
    include(gui)
endif()
```

"
449575510,12746,glassez,2020-07-03T13:09:33Z,"Such strings (not CMake code but output strings) break my eyes. I would reformat it:
```cmake
string(CONCAT _desc ""${_description}"" "" (default: "" ""${_default})"")
```"
449575983,12746,glassez,2020-07-03T13:10:43Z,"The same as above:
```cmake
string(CONCAT _desc ""${_description}"" "" (default: "" ""${_default_opt}"" ""; depends on condition: "" ""${_dependency})"")
```"
449632268,12746,FranciscoPombal,2020-07-03T15:21:47Z,"@glassez 

Hmm, actually, I haven't touched `winconf-mingw.cmake` nor tested with building with MinGW at all. I'll fix this one error with a simple `AND NOT MINGW` in that conditional, but I would appreciate suggestions on how to improve the MinGW configuration in general - currently, it's still use stuff like `LibtorrentRasterbar_CUSTOM_DEFINITIONS`. Or at least, can you please show me how to setup an environment similar to what you're using, so that I can test properly myself? I have never used MinGW before."
449634383,12746,FranciscoPombal,2020-07-03T15:27:34Z,@glassez  fixed.
449634436,12746,FranciscoPombal,2020-07-03T15:27:42Z,@glassez fixed.
449636339,12746,eli-schwartz,2020-07-03T15:33:17Z,"I'm confused... wasn't the *entire* point of this change, that it first looks for  `FindLibtorrentRasterbar.cmake`, wherever or however you produce one (e.g. by a system libtorrent-rasterbar install, or if you so wish by providing your own)?

That was why I objected to moving this `find_package()` into a qBittorrent `cmake/Modules/FindLibtorrentRasterbar.cmake`, because then you would have recursion issues."
449666622,12746,glassez,2020-07-03T17:28:58Z,">That was why I objected to moving this `find_package()` into a qBittorrent `cmake/Modules/FindLibtorrentRasterbar.cmake`, because then you would have recursion issues.

Did someone suggest to move `find_package()` there? Perhaps this is some kind of misunderstanding... I suggested to move all ""find libtorrent"" related stuff there so we have only one call to `find_package(libtorrent)` in main script. Even now I think it is good idea to have it this way (to have only one call to `find_package(libtorrent)` and let someone else to provide some specific way via FindLibtorrentRasterbar.cmake if needed.
>wasn't the entire point of this change, that it first looks for FindLibtorrentRasterbar.cmake

`find_package()` by default tries to find and use corresponding FindPackage.cmake module and if there is no such module it falls back to find and use corresponding CMake configuration files. But it is changed to opposite direction in this PR."
449670708,12746,eli-schwartz,2020-07-03T17:50:04Z,"> Did someone suggest to move `find_package()` there? Perhaps this is some kind of misunderstanding... 

It is quite literally the review comment by zeule which started this discussion, so yes, someone did indeed suggest precisely that.

> I suggested to move all ""find libtorrent"" related stuff there

Including the find_package(), which I objected to because of namespacing issues.

> so we have only one call to `find_package(libtorrent)` in main script. Even now I think it is good idea to have it this way (to have only one call to `find_package(libtorrent)` and let someone else to provide some specific way via FindLibtorrentRasterbar.cmake if needed.

There is no difference to people interested in providing some FindLibtorrentRasterbar.cmake if needed. Moving this code to find_package(libtorrent) as opposed to leaving it right here merely runs the same exact code via an included macro of cmake function calls. There is no technical advantage to having it in its own file, there is only a readability advantage.

But naming it ""Libtorrent"" instead of ""LibtorrentRasterbar"" may avoid the namespacing/recursion issue I raised, however, it instead opens up the amusing possibility the https://github.com/rakshasa/libtorrent project might add a FindLibtorrent.cmake, and result in possibly finding the wrong thing.

""Naming is hard."""
449671235,12746,eli-schwartz,2020-07-03T17:53:00Z,"If it is that important to move a few lines somewhere else, I suggest `QbtLibtorrentImpl.cmake` and `include(QbtLibtorrentImpl)`."
449677621,12746,glassez,2020-07-03T18:26:34Z,"@eli-schwartz, sorry, I can't understand your reasoning. What do you want from it?
IIRC, this new configuration allows you to use any libtorrent package that provide CMake configuration files or other kind of libtorrent distribution if there is FindLibtorrentRasterbar.cmake exists in any known location (or using pkgconfig as 3rd attempt). We can remove pkgconfig way from our script but it can be added by libtorrent/CMake distributors to their FindLibtorrentRasterbar.cmake.
>There is no technical advantage to having it in its own file, there is only a readability advantage.

Are you sure? Having second find_package call for the same package only to make script failed isn't readability issue for me. Looks like workaround.
>Including the find_package(),

No."
449679750,12746,glassez,2020-07-03T18:38:25Z,Anyway I suggest to continue this discussion in separate thread unless there is something blocking here.
449727849,12746,FranciscoPombal,2020-07-04T01:38:29Z,"@glassez 

> Yes. Shouldn't `qbt_base` care about required packages? Then it can provide all common libraries/definitions as part of its interface (IIRC, it already does this job except finding packages).

> But `qbt_app` depends on `qbt_base` so it shouldn't be a problem to obtain all needed stuff via `qbt_base` interface.
> (I think you understand what ""interface"" means in context of CMake imported targets)

> In addition, splitting the project into multiple targets (static libraries) still doesn't look certain to me.

Do you propose every target (gui, webui, ...) should be an ""Interface Library"" (e.g `add_library(xyz INTERFACE)`)? If I understand correctly, using static libraries gives us more control with the transitivity of dependencies (can use PRIVATE, PUBLIC, INTERFACE). Furthermore, just for fun I tried making ""qbt_base"" an Interface Library, but the configure generates 3x repeated compile commands for each file of it - one per target that depends on it (qbt_gui, qbt_app and qbt_webui). So, for example, `src/base/bittorrent/resumedatasavingmanager.cpp` would be compiled 3x. This makes sense because Interface libraries don't generate build output, so each dependent must generate the build outputs themselves.

> On the other hand, we can have all these ""find_package"" calls in one place (and GUI-related too, to be consistent).

> But you still have `if(GUI)` to include GUI stuff, isn't it? So it can just be written as:
> 
> ```cmake
> if (GUI) 
>     find_package(SOME_GUI_PACKAGE)
>     include(gui)
> endif()
> ```

I suppose this is reasonable :+1:"
449742600,12746,glassez,2020-07-04T05:46:57Z,">Do you propose every target (gui, webui, ...) should be an ""Interface Library"" 

No."
449743353,12746,glassez,2020-07-04T05:59:29Z,">I'll fix this one error with a simple AND NOT MINGW in that conditional

Maybe replace the condition above with `if (MSVC)`?
> I have never used MinGW before.

I have to use MinGW environment on my tablet PC (when I'm away from one of my computers), because there's very little storage to keep the Visual Studio installed. I don't care much about the productivity of this environment, just that qBittorrent is compiled and run for testing.
>can you please show me how to setup an environment similar to what you're using, so that I can test properly myself? 

I just install everything needed using official Qt installer. The only thing left for me to build myself (apart from libtorrent and qBittorrent) is a Boost.System (this is not much different from the build using MSVC)."
449749481,12746,glassez,2020-07-04T07:39:37Z,"Shouldn't it be somewhere in winconf? Or in ""src"" subdirectory? Or at least below MSVC_RUNTIME_DYNAMIC feature option declaration?"
449753855,12746,glassez,2020-07-04T08:47:31Z,"Wouldn't the following work?
```cmake
set(_desc ""${_description} (default: ${_default})"")
```"
449754355,12746,glassez,2020-07-04T08:54:54Z,"Why did you change it from predefined variables (APPLE, WIN32, UNIX)?"
449754457,12746,glassez,2020-07-04T08:56:03Z,Aren't other \*nix systems supported?
449754651,12746,glassez,2020-07-04T08:59:07Z,The same thing. If we're decided to have all find_package at top level you should move this one there (and place it before include this file).
449754930,12746,glassez,2020-07-04T09:02:39Z,It confuses me? Why it's really needed? And if it's needed why only for Libtorrent?
449755863,12746,glassez,2020-07-04T09:16:23Z,">I suppose this is reasonable 👍

Then all find_package calls should be moved in this script (src/CMakeLists.txt) in the same way."
449756807,12746,Chocobo1,2020-07-04T09:29:15Z,Seems the version numbers still hasn't reverted.
449757990,12746,Chocobo1,2020-07-04T09:46:16Z,"I think this line is redundant given the recent conscious about requiring the latest version of cmake.
The specific `3.16` doesn't really mean anything specific for that cmake version, isn't? Then it is better to remove this line altogether instead of having a dummy number that will mislead one thinking there is something special with it.
IMO it would be suitable to have a message that tells users to always upgrade their cmake installation to latest at here instead.
"
449761379,12746,FranciscoPombal,2020-07-04T10:35:02Z,"@Chocobo1 

> I think this line is redundant given the recent conscious about requiring the latest version of cmake.

I don't think that was the decision. We all settled with `3.16` as a compromise, for now. Besides, every CMake project should begin with `cmake_minimum_required`. Otherwise, users will be able to run the script with any version, but will get all sorts of errors and/or strange behavior if the version is not actually suitable.

When I proposed ""always use the latest possible version"", it really means ""update `cmake_minimum_required` periodically, as it becomes convenient to make use of features/policy revisions introduced in newer versions, without regard for the versions available in distro repositories"".
"
449763564,12746,glassez,2020-07-04T11:05:18Z,">It is unsafe because you need to prefer system-supplied modules

Docs say that CMAKE_MODULE_PATH is `a search path for CMake modules to be loaded by the include() or find_package() commands before checking the default modules that come with CMake`. So the modules that come from there are always preferred against the ones that come with CMake.
Also CMake docs say `CMAKE_MODULE_PATH is empty by default and it  is intended to be set by project` so it is intended to set this list instead of append to it.
Or CMAKE_MODULE_PATH  is usually used in different way?
"
449763793,12746,glassez,2020-07-04T11:08:37Z,https://github.com/qbittorrent/qBittorrent/pull/12746#discussion_r449763564
449764139,12746,Chocobo1,2020-07-04T11:13:45Z,"Is `3.16` really the required minimum version? a slightly older version won't work? If the answer is no for the first question, then I haven't seen you address my concern about it, quoting myself:
> ... mislead one thinking there is something special with it.

... otherwise I misunderstood and please disregard this post.

>We all settled with 3.16 as a compromise, for now. 
>as it becomes convenient to make use of features/policy revisions introduced in newer versions

Well I don't care how recent version we are using however I think it is a really bad compromise when the version doesn't really reflect the reality. I just want to point it out that maybe this can be overlooked for now but it *will* be a concern (at least from me) when we promote cmake build as officially supported.
"
449767515,12746,glassez,2020-07-04T12:03:44Z,"This one makes it unusable. It cannot be run from Qt Creator since it is unable to find installed Qt components.
Why do you really need to copy it there? It's needed to in install directory only."
449768225,12746,glassez,2020-07-04T12:13:56Z,">Binaries produced by different configs end up in separate folders for each config. 

The convenience is questionable, since we are only talking about the resulting binary. Intermediate files are still created in the same directory, so if I need to support multiple configurations at the same time, I still have to set the different build directory per configuration manually, and this only adds an unnecessary subfolder inside, for example ""qBittorrent-build/debug/Debug""."
449775320,12746,glassez,2020-07-04T13:55:00Z,"The ideal option from my point of view is that cmake_minimum_required really reflects the minimum supported version of CMake (but I do not strictly insist on this until CMake is the main build system of the project so I don't want to waste my time on this topic), otherwise the user may find itself in a situation where we require it to install a version really larger than the one that could successfully process our project (it may already have a suitable version installed, but it will fail due to this unreasonable restriction)."
449776923,12746,Chocobo1,2020-07-04T14:17:49Z,">but I do not strictly insist on this until CMake is the main build system of the project

Agree.

>otherwise the user may find itself in a situation where we require it to install a version really larger than the one that could successfully process our project 

Agree.
"
449908039,12746,FranciscoPombal,2020-07-05T18:59:02Z,@glassez fixed
449908046,12746,FranciscoPombal,2020-07-05T18:59:13Z,@glassez fixed
449908243,12746,FranciscoPombal,2020-07-05T19:01:17Z,@glassez It was needed to fix a problem with reconfiguration with `ccmake` mentioned a few comments up. Refer to the back-and-forth spanning from https://github.com/qbittorrent/qBittorrent/pull/12746#issuecomment-645636277 to https://github.com/qbittorrent/qBittorrent/pull/12746#issuecomment-652453467
449928512,12746,FranciscoPombal,2020-07-05T23:05:41Z,"@glassez 

Might be. But I haven't tested, and neither has anyone else (that I know of). The lazy way would be to replace all instances of `if(CMAKE_SYSTEM_NAME MATCHES ""Linux"")` with `if(UNIX AND (NOT APPLE))` and hope for the best, but this doesn't actually guarantee anything - we might be misleading the users into thinking that the support is in good standing. I think if someone wants to make it work in those systems, they can test and submit patches later with the required changes."
449928740,12746,FranciscoPombal,2020-07-05T23:08:30Z,"@glassez 

https://gitlab.kitware.com/cmake/community/-/wikis/doc/tutorials/How-To-Write-Platform-Checks#platform-checking

> A cleaner and more cross-compiling-compatible way to check the current platform is through the CMAKE_SYSTEM variables."
449930193,12746,FranciscoPombal,2020-07-05T23:25:28Z,"@glassez 

> Maybe replace the condition above with `if (MSVC)`?

:+1:

> I have to use MinGW environment on my tablet PC (when I'm away from one of my computers), because there's very little storage to keep the Visual Studio installed. I don't care much about the productivity of this environment, just that qBittorrent is compiled and run for testing.

Right, I don't need more justifications, clearly you find this useful and important. I'm just stating that I have no prior experience with it.

> > can you please show me how to setup an environment similar to what you're using, so that I can test properly myself?
> 
> I just install everything needed using official Qt installer. The only thing left for me to build myself (apart from libtorrent and qBittorrent) is a Boost.System (this is not much different from the build using MSVC).

I was expecting more of a step-by-step, but I'll give it a shot anyway."
449935158,12746,FranciscoPombal,2020-07-06T00:15:10Z,"@glassez with the latest fixups, all package used under the `src/` tree are found with `find_package` calls in `src`'s CML. There is only one remaining `find_package` call, in the CML in `dist/unix/`. But `dist/` is not a subdir of `src` (they're at the same hierarchical level), so I think it's ok for that `find_package` call to remain where it is, or at most go up one level to `dist/`."
449941772,12746,FranciscoPombal,2020-07-06T01:08:39Z,"@glassez 

> Fortunately, your ""totalitarian"" tendencies will not be satisfied,

Not sure what you mean by this... my goal was to have the search procedure working with _at least_ 1) CMake config files and 2) pkg-config. If, in addition, it became possible to use an external `FindLibtorrentRasterbar.cmake` to drive the search procedure, then great (as you confirmed, this is the case), but otherwise, no problem.

What I did not want, in essence, was for us to provide our own `FindLibtorrentRasterbar.cmake` in the repository.

So I guess we all got what we wanted in the end?

> Anyway I suggest to continue this discussion in separate thread unless there is something blocking here.

Agreed, it has become unwieldy to continue the conversation in this thread. Any interested parties can open a new dedicated thread for discussion after this PR is merged, I'll mark this one as resolved now. Thanks for the input."
450057330,12746,glassez,2020-07-06T08:17:00Z,">But I haven't tested, and neither has anyone else (that I know of).

AFAIK, qBittorrent is used at least on FreeBSD. But even if someone does not know this clearly, it does not mean that it does not exist...
There are no such big differences between different \*nix systems (and there is support in the source code), so it can be configured and built there even if no one has explicitly taken care of it.
You don't have to break it here. It will still be possible to run this script on the mentioned systems, and it will be a shame if it fails just because of such changes.
@Chocobo1, what do you think?"
450058229,12746,glassez,2020-07-06T08:18:39Z,"Well, but you accidentally changed the related conditions that isn't good in all cases."
450084739,12746,glassez,2020-07-06T09:04:47Z,https://github.com/qbittorrent/qBittorrent/pull/12746/files#discussion_r449767515 is blocking issue.
450176432,12746,FranciscoPombal,2020-07-06T12:09:07Z,"I'll consider this resolved for now. Apparently what we want is MSVC's `external` include directives. We can later discuss if we really benefit from `/W4` or `/Wall`. I should note that at the time of writing, CMake does not natively support this MSVC feature. That is being tracked here: https://gitlab.kitware.com/cmake/cmake/-/issues/17904"
450180446,12746,Chocobo1,2020-07-06T12:17:01Z,">@Chocobo1, what do you think?

Unless proven to work reliably, I would choose the conservative way to avoid unnecessary breaking."
450181175,12746,Chocobo1,2020-07-06T12:18:31Z,"@glassez 
Do you agree with this change?
https://github.com/qbittorrent/qBittorrent/pull/12746/files#r419148054
https://github.com/qbittorrent/qBittorrent/pull/12746/files#r449756807"
450184249,12746,FranciscoPombal,2020-07-06T12:24:44Z,"@glassez 

> The convenience is questionable, since we are only talking about the resulting binary. Intermediate files are still created in the same directory, so if I need to support multiple configurations at the same time, I still have to set the different build directory per configuration manually, and this only adds an unnecessary subfolder inside, for example ""qBittorrent-build/debug/Debug"".

You're right. Next fixup commit will change this back (so that the executable ends up under `src/app/` like before).

> Why do you really need to copy it there? It's needed to in install directory only.

The point of copying `qt.conf` to the same location as the executable in the build tree is so that those options are still applied when quickly building and testing running the executable from the build tree without installing."
450191499,12746,glassez,2020-07-06T12:38:49Z,">The point of copying qt.conf to the same location as the executable in the build tree is so that those options are still applied when quickly building and testing running the executable from the build tree without installing.

But really it breaks ""running the executable from the build tree""!
What do you think the purpose of this file is?
>You're right. Next fixup commit will change this back (so that the executable ends up under src/app/ like before).

You're wrong! Currently (before your patch) it is placed in root of build tree (this was changed lately from the place you mentioned above)."
450193144,12746,FranciscoPombal,2020-07-06T12:41:55Z,"@Chocobo1 @glassez

The landscape has changed a bit since this PR was opened, most notably, support for `RC_1_1` was officially dropped from master.

As for the remaining dependencies: Ubuntu is basically our lower bound, and the minimum requirement of Qt 5.9 means it also does not make sense to _not_ bump versions up to 18.04 versions, e.g. zlib up to 1.2.11, boost up to 1.65 and OpenSLL up to 1.1.1 (plus OpenSSL 1.1.1 is actually mandatory in Qt >= 5.15, so at least this bump makes things easier)."
450198292,12746,glassez,2020-07-06T12:51:21Z,"If you didn't understand, placing qt.conf near the qBittorrent executable in output directory is problem."
450199053,12746,Chocobo1,2020-07-06T12:52:45Z,">so at least this bump makes things easier).

But your opinion doesn't really comply to what we established before (before you join) and I still see no point of your reasoning. I don't have much free time and I would just say this much."
450202394,12746,glassez,2020-07-06T12:58:41Z,"If you want us to seriously consider CMake as something approaching the official build system, you must follow the official project requirements. If you want to change them you should open separate Issue. Usually we discuss it before upcoming minor/major release."
450206389,12746,glassez,2020-07-06T13:05:40Z,These definitions have project-wide meaning generally. Don't understand why you moved it there.
450271642,12746,FranciscoPombal,2020-07-06T14:44:32Z,"@glassez 

> You're wrong! Currently (before your patch) it is placed in root of build tree (this was changed lately from the place you mentioned above).

Ok, fixed for real this time. I must have got confused with autotools or something.

> But really it breaks ""running the executable from the build tree""!
What do you think the purpose of this file is?

I thought the purpose of the file was to override certain Qt parameters at runtime. If we're shipping like that, why not also build like that? That file looks like it changes a setting relating to DPI, for instance. Imagine you are trying to reproduce a user report/testing out some patches relating to DPI/scaling problems. If it never occurs to you to actually install the executable, you will probably fix the wrong problem, since if you don't have the file in the build tree, your environment will be different than the user's. Lately, I have seen many reports about scaling/DPI, hopefully this makes fixing those on Windows a bit easier.

> If you didn't understand, placing qt.conf near the qBittorrent executable in output directory is problem.

What am I missing, given the reasons above? I can run the executable just fine either way."
450382026,12746,glassez,2020-07-06T17:44:05Z,">But it looks like simply adding the type makes it work: cmake -DLibtorrentRasterbar_DIR:PATH=~/build/libtorrent/LibtorrentRasterbar ~/qbittorrent_sources. I investigated the generated CMake cache in both cases, and it seems the problem is the CMake GUIs don't expose UNINITIALIZED variables for the user to change.
I pushed a new commit to make it so that CMake always knows LibtorrentRasterbar_DIR is a PATH, by setting it as a CACHE variable. Now, even if you don't specify the type in the command line, the variable will always show up and be configurable in a GUI such as ccmake.

Doesn't seem like a problem that should be fixed in this way. You just need to set variable with a type. If it's unexpected/undocumented behavior it's definitely CMake issue."
450534156,12746,FranciscoPombal,2020-07-06T23:42:08Z,"@glassez 
> You just need to set variable with a type.

Exactly, that's what this line does - ensures the variable has a type. It initializes the variable in the cache with no value (empty string), but with `PATH` type. Nothing else is affected by this, and this allows `ccmake` to work correctly.

From the CMake docs (https://cmake.org/cmake/help/v3.16/command/set.html):

>  Since cache entries are meant to provide user-settable values this does not overwrite existing cache entries by default.

(...)

> It is possible for the cache entry to exist prior to the call but have no type set if it was created on the `cmake(1)` command line by a user through the `-D<var>=<value>` option without specifying a type. In this case the set command will add the type. Furthermore, if the `<type>` is `PATH` or `FILEPATH` and the `<value>` provided on the command line is a relative path, then the set command will treat the path as relative to the current working directory and convert it to an absolute path."
450613327,12746,glassez,2020-07-07T05:07:34Z,"Still doesn't seem good for me.
I can't understand what you're doing with this. Is this the intended way? Or is this a mistake (of CMake) you're trying to workaround? Or is it a ""feature"" when you cache a variable that wasn't originally intended to be cached?
Anyway, it looks strange to affect a variable that isn't even used directly in your script. And then it turns out that in general case you should do the same with all possible variables that can ever be set via the command line... it looks terrible.
Is there no other way?"
450778523,12746,glassez,2020-07-07T10:54:54Z,">I thought the purpose of the file was to override certain Qt parameters at runtime.

Qt Docs:
>You can use the qt.conf file to **override paths** or to specify arguments to be passed to the platform plugins.

>What am I missing, given the reasons above? 

Qt Docs:
>The qt.conf file can be used to override the hard-coded paths that are compiled into the Qt library. These paths are accessible using the QLibraryInfo class. Without qt.conf, the functions in QLibraryInfo return these hard-coded paths; otherwise they return the paths as specified in qt.conf.

Without `qt.conf` application knows about Qt components that installed on developer machine since their paths are hard-coded. With `qt.conf` application tries to find Qt components using paths that are specified there, in our case in the application executable folder, it is correct on target machine but incorrect on developer one).

>I can run the executable just fine either way.

You use statically linked executable so you aren't affected by path of Qt plugins etc. and you probably didn't pay attention to the Qt translations."
451067689,12746,FranciscoPombal,2020-07-07T18:39:26Z,"@glassez 

To be honest, I also get the feeling that this is simply a workaround for cmake GUIs like (`ccmake`, in particular). This is a workaround for the case where the user initially specifies a variable in the command line without a type (I would says it's uncommon for CMake users to specify variables _with_ a type in the command line invocation) and then later would like to change the variable's value with `ccmake`. It will not be possible, because `ccmake` does not allow you to change variables that don't have a specified type.

I have found that some tools that invoke CMake, such as the CMake Tools extension for VS Code, add a variable type to all command-line entries, side-stepping this problem entirely.

As for, ""why have this `set(CACHE)` call for `LibtorrentRasterbar_DIR` and not others?"", I would say this is the one variable that's not used directly that will be changed most often, and also this way the workflow of a contributor isn't broken. But if we go down this route, then yes, it might become justifiable to do this for other variables as well. But that would be done in another PR.
I guess it comes down to whether or not you want to leave this workaround in to better support CMake GUI users. Unless you know of a better way to achieve the same thing.
"
453198206,12746,FranciscoPombal,2020-07-11T14:03:07Z,"@glassez this particular problem has been fixed, but I'm still not able to build successfully with MinGW. I'll mark this as resolved, let's continue solving the remaining problem in the comments at the bottom."
453198327,12746,FranciscoPombal,2020-07-11T14:04:41Z,"@glassez I've reviewed and tested the changes (not on Apple/macOS, but that is the most idempotent change anyway), and I'm quite certain everything is correct now."
453198653,12746,FranciscoPombal,2020-07-11T14:08:12Z,"@glassez It's `QBT_VERSION` and `QBT_VERSION_2` that are ubiquitous. These particular ones only have meaning for ""base"" and ""app"", so I created a specific interface for that, to isolate it. In the future, I'd like to propose some versioning changes to prevent these kind of inconsistencies, but that's a matter for another time."
453579958,12746,FranciscoPombal,2020-07-13T11:21:51Z,"@Chocobo1 @glassez 

> Unless proven to work reliably, I would choose the conservative way to avoid unnecessary breaking.

`CMAKE_SYSTEM_NAME MATCHES ""Linux""` works reliably to mean ""Linux only"".

I took a closer look at the scripts, and figured out that even now, the build should work on the BSDs. Currently, there are 4 places in the code that could be changed from that to `UNIX AND NOT APPLE AND NOT CYGWIN`:

- finding libtorrent through pkg-config (finding via cmake config files should work fine anyway)
- the script in the `dist folder`, that only handles the installation of man pages, icons, etc (thus, not relevant for building only; are the current installation directories for these ancillary files also correct for the BSDs?)
- the addition of the `_DEFAULT_SOURCE` compile definition to all targets
- the availability of the DBus and SystemD features (is it relevant to the BSDs?)

The latter item can remain disabled on non-Linux for now, and the others enabled without affecting anything else. Then, at least a basic build without the `SYSTEMD` and `DBUS` features should work. The installation will also work; if any of the installation directories need to be changed, some BSD user can later submit a patch for that.

I'll make the change."
453594905,12746,FranciscoPombal,2020-07-13T11:52:19Z,"Right, I understand now. Will remove the the build-time copying of this file."
462026052,12746,Chocobo1,2020-07-29T04:08:00Z,msvc warning flags was intentionally dropped in a recent commit. you shouldn't reintroduce it.
462027031,12746,Chocobo1,2020-07-29T04:12:22Z,Is this file required? I think we have enough files in the project root directory. Maybe move it into cmake folder.
462234991,12746,FranciscoPombal,2020-07-29T11:41:03Z,"Right, fixed."
462236148,12746,FranciscoPombal,2020-07-29T11:43:33Z,"@Chocobo1 

It's used for configuring the images produced by the `--graphviz` flag, such as https://github.com/qbittorrent/qBittorrent/pull/12746#issuecomment-623537587. The default settings are pretty bad for our use case.

According to the CMake docs (https://cmake.org/cmake/help/latest/module/CMakeGraphVizOptions.html),

> This file is first searched in CMAKE_BINARY_DIR, and then in CMAKE_SOURCE_DIR. If found, the variables set in it are used to adjust options for the generated Graphviz files.

I would also prefer if CMake searched for it in the cmake modules location natively, but oh well.
So just leaving it in `CMAKE_SOURCE_DIR` is the easiest way, vs. placing the file in the cmake modules folder and copying it to `CMAKE_BINARY_DIR` at configure-time (not sure how easy it is to do and don't really want to do it, at least now), or something like this: https://marc.info/?l=kde-commits&m=149150989601551&w=2.

I too worry about the excessive number of files at the root of the project.
These are the ones that can be removed in the near-future, and are a much bigger problem than a single additional CMake-related file:

- Replaced by a `.clang-format` file:
    `.editorconfig`, `uncrustify.cfg`, `codingStyleQtCreator.xml` (contributors may configure their text editor/IDE how they like, then run clang-format before commiting; I doubt any other tools is better/more consistent than clang-format, since it is backed by the infrastructure of one of the major C++ compilers)
- Replaced by a GH Actions workflow (maybe; I'll give this a try soon-ish), which goes in inside the `.github` directory:
    `.travis.yml`, `.appveyor.yml`
- Simply removed:
    `TODO`, `INSTALL` (basic instructions to build can be in the README + a link to the wiki for the rest)
- Simply removed due to dropping `qmake + autotools` as a build system:
    `bootstrap.sh`, `conf.pri.in`, `conf.pri.windows`, `configure`, `configure.ac`, `macxconf.pri`, `qbittorrent.pro`, `unixconf.pri`, `version.pri`, `winconf.pri`

That's a reduction of 14 or 16 files, depending on whether we actually move to GH Actions for CI, or 10 by just dropping `qmake + autotools` alone.

Here's my proposal for compromise, and a start to truly solving the ""bloated root"" problem: https://github.com/qbittorrent/qBittorrent/pull/13208/"
462930126,12746,glassez,2020-07-30T11:26:05Z,"@Chocobo1, are you okay with this monstrous notation instead of human readable one like the following?
```cmake
if (UNIX AND NOT APPLE AND NOT CYGWIN)
        target_compile_definitions(qbt_common_cfg INTERFACE _DEFAULT_SOURCE)
endif()
```
(in all similar cases)"
462933054,12746,glassez,2020-07-30T11:32:16Z,"It is overkill to split it into several lines, it isn't that long:
```cmake
target_compile_options(qbt_common_cfg INTERFACE /MP)
```"
462933625,12746,glassez,2020-07-30T11:33:34Z,It's one more overkill...
462934188,12746,glassez,2020-07-30T11:34:43Z,Shouldn't you indent this line?
462935524,12746,glassez,2020-07-30T11:37:38Z,"You should add one more indentation level to this and folloving lines (until the end of ""message"" parameter list)."
462937614,12746,glassez,2020-07-30T11:41:53Z,:-1: to split it
462938290,12746,glassez,2020-07-30T11:43:29Z,:-1: to split it (and all other short fragments).
462952139,12746,Chocobo1,2020-07-30T12:13:18Z,">It's used for configuring the images produced by the --graphviz flag, such as #12746 (comment). The default settings are pretty bad for our use case.

It looks like a not-so-useful feature to me and I would still prefer it to be dropped.
@glassez what do you think?"
462952917,12746,Chocobo1,2020-07-30T12:14:47Z,"I'm not familiar with the usage of generator expression, maybe FranciscoPombal can provide the reasons of using them."
462967854,12746,glassez,2020-07-30T12:42:55Z,At least it should be dropped from this already bloated PR.
462984926,12746,FranciscoPombal,2020-07-30T13:12:06Z,"@glassez @Chocobo1 

Well, I guess there is no reason why this cannot be a separate PR, so I'll remove it from this one."
462989909,12746,FranciscoPombal,2020-07-30T13:19:45Z,"@glassez @Chocobo1 

The reasoning for using generator expressions was outlined in part of this comment (https://github.com/qbittorrent/qBittorrent/pull/12746#issuecomment-657070063):

> While attempting to solve compilation with MinGW I also made everything more target-based with the help of generator expressions (that commit is not squashed, for now). As a side-effect, the platform-specific requirements for each target are much clearer now; where possible, all the information is conveyed in single `target_*` calls, instead of having to navigate through multiple, scattered, possibly nested `if ()` chains that affect targets everywhere. Note: the only exception is one `include_directories()` statement. I think that's the only directory-scope command left, but I'm ok with that for now.

and further expanded upon in this whole comment: https://github.com/qbittorrent/qBittorrent/pull/12746#issuecomment-657476593.

Basically, though the syntax is a bit ugly, I think that is an acceptable price to pay for the benefits this change yields.
To be fair, `$<$<AND:$<BOOL:${UNIX}>,$<NOT:$<BOOL:${APPLE}>>,$<NOT:$<BOOL:${CYGWIN}>>>:_DEFAULT_SOURCE>` is a bit of a worst-case scenario, all things considered. It can't (or at least shouldn't) get worse than that."
463059668,12746,jagannatharjun,2020-07-30T14:58:03Z,"CMake is my default build system but I never use generator expression, they're are not build for humans c++ is already hard why're you trying to make build system hard too, I'll personally like you to not use them at all.

If() statements may seem redundant but they tend too be much more readable."
463096427,12746,glassez,2020-07-30T15:50:15Z,"My opinion is avoid generator expressions whenever possible. I prefer more readability friendly code.
In addition, ""overusing generator expressions"" is something that fell on our heads after this PR was almost completed, and we were trying to finish it. Well, now here's another controversial thing that could have had its own PR rather than slowing this one down."
465084976,12746,FranciscoPombal,2020-08-04T14:18:18Z,"@glassez @jagannatharjun 

> CMake is my default build system but I never use generator expression, they're are not build for humans c++ is already hard why're you trying to make build system hard too, I'll personally like you to not use them at all.
>
> If() statements may seem redundant but they tend too be much more readable.

> My opinion is avoid generator expressions whenever possible. I prefer more readability friendly code.

Did you even read my previous posts explaining the benefits? You guys are arguing ""don't use this nice feature of modern CMake because I don't understand it"". Despite the somewhat ugly syntax, generator expressions are the best (and often the only easy correct way, see video below) to do certain things. Generator expressions _is_ more friendly code, once you look past the syntax.

There are many nice videos on YT explaining modern CMake (mostly from C++ conferences from 2017 to present) and generator expressions, including what they are used for and why they're needed and better than the alternative. I encourage you to watch at least this ~10 minute part explaining genexps of this particular talk about modern CMake, https://youtu.be/mn1ZnO3MtVk?t=2055, starting at 34:15 through 45:11 (the link already includes the correct timestamp).

Some highlights:

- 35:44 - ""Abstraction targets"" - what I attempted to do with the `qbt_common_cfg` and `qbt_version_definitions` targets inside `MacroQbtCommonConfig.cmake`
- 38:49 - Relevant example of generator expressions preventing buggy and non-portable `if ()`-based code
- 43:08 - Relevant example of an imperative, non-modern CMake logic snippet being modernized and simplified with genexps.

> In addition, ""overusing generator expressions"" is something that fell on our heads after this PR was almost completed, and we were trying to finish it. Well, now here's another controversial thing that could have had its own PR rather than slowing this one down.

The original motivation to also switch to use more generator expressions was to also tackle the MinGW build logic, which I originally intended to not even touch (perhaps leaving that to a later PR). I noticed it was becoming too hard to easily reason about target and platfom requirements with all the `if ()`s and scattered imperative logic, so I turned it all to targets + genexp. It made everything about different multiplatform requirements easier to reason about and conclude that currently, there isn't even any special logic required to build with MinGW. The previous logic was even kind of dangerous, as it included old-style calls to `target_link_libraries()`, if I'm not mistaken.

The whole build system is now easy to understand, change and extend, no matter the platform/OS (okay, probably excluding the translations part in `app`, which is still somewhat messy, but as I said before, there is little we can do about it for now), as long as one takes the time to understand genexps. It's a small investment, and not doing so is like saying ""I want to read/write modern C++, but I don't want to learn anything new about C++ >= 11"".
I think we are on the same page concerning the desire (and a need actually, considering the upcoming deprecation of qmake) to move to CMake as our build system - we should understand the tools that we use."
465145779,12746,FranciscoPombal,2020-08-04T15:41:03Z,"The point was to make it consistent with all the other such statements. But sure, I think the case where there's only one small element can be the exception."
465153798,12746,FranciscoPombal,2020-08-04T15:52:49Z,All such instances fixed.
465153892,12746,FranciscoPombal,2020-08-04T15:52:58Z,All such instances fixed.
465154074,12746,FranciscoPombal,2020-08-04T15:53:15Z,@glassez All such instances fixed.
465154169,12746,FranciscoPombal,2020-08-04T15:53:24Z,@glassez All such instances fixed.
465154308,12746,FranciscoPombal,2020-08-04T15:53:38Z,All such instances fixed.
465154687,12746,FranciscoPombal,2020-08-04T15:54:14Z,Done (forgot to actually do it before).
42972660,3989,glassez,2015-10-26T09:35:09Z,"while (
"
42973082,3989,glassez,2015-10-26T09:40:13Z,"Maybe friendlyValue?
"
42973107,3989,glassez,2015-10-26T09:40:37Z,"And old is friendlyUnit (as always)
"
42973387,3989,glassez,2015-10-26T09:44:47Z,"Placing each condition in the parentheses improves the readability of the code, IMO.

``` c++
while ((rawVal >= 1024.) && (i < 4))
```
"
42973868,3989,glassez,2015-10-26T09:50:32Z,"Place enum declaration on top of (all) function declarations.
"
42974258,3989,glassez,2015-10-26T09:55:00Z,"if (
"
42974334,3989,glassez,2015-10-26T09:55:53Z,"#include ""searchsortmodel.h""
"
42974419,3989,glassez,2015-10-26T09:56:55Z,"One initializer per line (Coding Style).
"
42974525,3989,glassez,2015-10-26T09:58:20Z,"No blank lines in empty function body.
"
42974682,3989,glassez,2015-10-26T10:00:02Z,"Simple `foreach`
"
42974855,3989,glassez,2015-10-26T10:02:11Z,"We accepts one line for return (etc.) statements:

``` c++
if (condition) return;
if (condition) return val;
if (condition) continue;
if (condition) break;
```
"
42974892,3989,glassez,2015-10-26T10:02:33Z,"Space after >=
"
42975093,3989,glassez,2015-10-26T10:04:56Z,"Here (and in similar places) are not that long to divide them into two lines.
"
42975255,3989,glassez,2015-10-26T10:06:46Z,"We doesn't accept member implementation in headers. Move to .cpp.
"
42981387,3989,zeule,2015-10-26T11:20:11Z,"Pardon? What do you suggest?
"
42981576,3989,zeule,2015-10-26T11:22:56Z,"I prefer to highlight the symmetry
"
42982600,3989,zeule,2015-10-26T11:37:03Z,"OK, but why?
"
42988105,3989,glassez,2015-10-26T12:46:07Z,"By the way, since you began to use **enum class**, you can even put it outside Utils::Misc namespace (Utils child namespaces are intended for the functions - that was the idea). 
It will be fine. Just SizeUnit::Byte etc.
"
42988493,3989,glassez,2015-10-26T12:51:01Z,"Use friendlyValue for your new function.
The same names should be used to really overloaded functions, and these two are not (by the meaning), as do different (albeit related) things.
"
42988666,3989,glassez,2015-10-26T12:52:51Z,"Ok.
"
42989367,3989,zeule,2015-10-26T13:01:13Z,"They are overloaded functions, in fact: the first one just converts result from the second one to string.
"
42989587,3989,glassez,2015-10-26T13:03:43Z,"in order to not mix the functions and types...
just such a convention.
"
42992120,3989,glassez,2015-10-26T13:29:53Z,"Technically, Yes, but not in meaning. The meaning of overloaded functions is to do the same thing for different params. For example:

``` c++
int add(int a, int b) { return a + b; }
double add(double a, double b) { return a + b; }
```

these are overloaded functions (by definition and by meaning).
In your case one function reduces the number up to a certain order, and another converts a number to a string in some way.
"
42993129,3989,glassez,2015-10-26T13:38:57Z,"I don't insist that to do so is generally impossible. Sometimes, on the contrary, it is useful to have functions with identical names but with different access specifiers in a class. But if we put something in the interface, then it must have a clear meaning.
"
42999913,3989,zeule,2015-10-26T14:32:20Z,"I would name both of them humanReadableSize(), but since there was the functions before, I simply named the second one identically.
"
43013117,3989,glassez,2015-10-26T16:04:47Z,"qreal is wrong input type for this function. We expect there some amount of bytes that shouldn't be neither fractional nor negative. So qlonglong will be right here. And return void, of course.
"
43015355,3989,Chocobo1,2015-10-26T16:20:48Z,"~~I've opened another PR which is related to this function, if possible please use the new code:
https://github.com/qbittorrent/qBittorrent/pull/3908/files#diff-aed1f63858bd7b8e14180e4bebde4a30~~
"
43016061,3989,DoumanAsh,2015-10-26T16:26:06Z,"Did you mean `quint64`?
"
43016322,3989,Chocobo1,2015-10-26T16:27:55Z,"Qt4 -> Qt
"
43016599,3989,Chocobo1,2015-10-26T16:30:08Z,"Ah, nevermind.
"
43018101,3989,zeule,2015-10-26T16:41:00Z,"I guess there are negative sizes somewhere, and they are used to represent unknown size, because someone even created a translatable string for this case.  For the same reason the function has to signal about incorrect size, so it returns `bool`. 
The very first action of this function will be the conversion of integral input into floating point value, but since everybody want cleaner interface, let's change both function signatures to `qint64`. 
"
43018501,3989,DoumanAsh,2015-10-26T16:44:15Z,"But does `double` has any meaning for this function at all?
It is just being used as `qint64` and so it is not really has any meaning since you're passing `qint64` in all cases?
"
43018839,3989,zeule,2015-10-26T16:46:56Z,"I guess `qreal` was used for parameter to avoid declaring a local variable
"
43021786,3989,glassez,2015-10-26T17:07:02Z,"> Did you mean quint64?

Yes. I made a typo. I mean **qulonglong**, which is the same.

> But does double has any meaning for this function at all?

We can't have a fractional number of bytes, but we can have fractional number of kibibytes, etc. So return type of **qreal** is correct.

> I guess there are negative sizes somewhere, and they are used to represent unknown size

This logic should be placed where it is required. Not here!
"
43152279,3989,glassez,2015-10-27T17:05:05Z,"Another proof that this is not the place for this: we did not complicate the calling code by removing it from here, however, we achieve the purity of this logic.
"
43155955,3989,zeule,2015-10-27T17:29:49Z,"Can not understand your point. According to QtCreator, this function is called from 48 places to get string representation of a size or a speed. Where the message should be placed?
"
43158696,3989,glassez,2015-10-27T17:47:18Z,"I mean wrong size processing only. That don't belong in this function.
"
43159659,3989,zeule,2015-10-27T17:53:19Z,"Did you mean

``` c++
void Utils::Misc::friendlyUnit(quint64 sizeInBytes, qreal &val, Utils::Misc::SizeUnit &unit);
```

but still signed int in

``` c++
QString Utils::Misc::friendlyUnit(qint64 val, bool is_speed);
```

?
"
43162995,3989,glassez,2015-10-27T18:14:23Z,"Yes!
"
43183765,3989,zeule,2015-10-27T20:42:50Z,"So you want one of the overloaded functions to check whether the input data is in range, while the other one not? Not _this_ type of difference everybody expects from overloaded functions, I would say.  

Now I begin to understand why did you think about them as not overloads.
"
43225612,3989,glassez,2015-10-28T07:58:35Z,"Try to explain again...
These functions are overloaded because you have decided to give them the same name. But actually, they perform different roles. Old function converts the numeric representation of the size in a string, and it is quite normal to introduce such concept as ""wrong"" size. It processes this in the usual way, i.e. generates its string representation. Your function, as I said, reduces the number to a certain order. It does not handle the ""wrong"" size in the usual way, because it is incorrect input for this function, and reports an error (returns false).
In this case, you knowingly allow a function to accept an incorrect input value (using a signed type for input argument), and then ""fighting"" with this inside it. This is illogical. This behavior is permissible only in cases where passing of incorrect input values into the function cannot be prevented (for example, the input parameter is a string).
"
54537047,3989,glassez,2016-03-01T08:50:24Z,"Isn't there an implicit cast?
"
54537131,3989,glassez,2016-03-01T08:51:22Z,"You pay for the number of code lines?

``` c++
if (sizeInBytes < 0) return false;
```
"
54537224,3989,glassez,2016-03-01T08:52:23Z,"Why not `SizeUnit`?
"
54537331,3989,glassez,2016-03-01T08:53:35Z,"Fix `is_speed` to camelCase.
"
54537438,3989,glassez,2016-03-01T08:54:48Z,"Use `SizeUnit` for loop counter.
"
54537775,3989,glassez,2016-03-01T08:58:44Z,"It's better (more readable) to move `&&` on the next line.
"
54570399,3989,glassez,2016-03-01T14:08:18Z,"Why cast here?
"
54571470,3989,glassez,2016-03-01T14:15:59Z,"camelCase
"
54571980,3989,glassez,2016-03-01T14:19:51Z,"`||` to next line.
"
54572406,3989,glassez,2016-03-01T14:22:34Z,"Fix indentation
"
54583754,3989,zeule,2016-03-01T15:35:21Z,"Is there a `operator ++` for `enum class`?
"
54584374,3989,zeule,2016-03-01T15:39:00Z,"Want to be explicit for narrowing conversions.
"
54584524,3989,zeule,2016-03-01T15:39:49Z,"OK
"
54584576,3989,zeule,2016-03-01T15:40:04Z,"OK
"
54585233,3989,zeule,2016-03-01T15:43:42Z,"Again, `operator++`.  Either `static_cast` will be here, or two of them in the next statement.
"
54585570,3989,zeule,2016-03-01T15:45:34Z,"OK
"
54586402,3989,zeule,2016-03-01T15:50:48Z,"Because there is no qin64 literal, AFAIK. 
"
54586545,3989,zeule,2016-03-01T15:51:39Z,"This is a  function override. I strongly object to changing parameters names for it.
"
54587368,3989,zeule,2016-03-01T15:56:32Z,"OK
"
54587470,3989,zeule,2016-03-01T15:57:12Z,"Thanks.
"
54588416,3989,glassez,2016-03-01T16:02:47Z,"Oh, right. This is `enum class`.
"
54589311,3989,glassez,2016-03-01T16:08:32Z,"But there is implicit cast here!
Why to make it complicated where it is not needed?
"
54589575,3989,glassez,2016-03-01T16:10:03Z,"> This is a function override.

What function do you override? (I mean its base class)
"
54589810,3989,glassez,2016-03-01T16:11:30Z,"The names of the parameters have value only for the body of this function. You can even call them something different in the Declaration of this function.
"
54590409,3989,glassez,2016-03-01T16:15:25Z,"Weird. `QSortFilterProxyModel::filterAcceptsRow()` really has such parameter names, which is not typical for Qt...
"
54590519,3989,glassez,2016-03-01T16:16:04Z,"blank line before access specifiers
"
54590569,3989,zeule,2016-03-01T16:16:20Z,"Pardon me, I don't understand you. Here is a cut:

```
$ grep filterAcceptsRow /usr/include/qt5/QtCore/qsortfilterproxymodel.h
 virtual bool filterAcceptsRow(int source_row, const QModelIndex &source_parent) const;
```
"
54590600,3989,glassez,2016-03-01T16:16:28Z,"blank line
"
54591266,3989,glassez,2016-03-01T16:20:21Z,"You use `using namespace Utils::Misc;` above so omit Utils::Misc here.
"
54591645,3989,glassez,2016-03-01T16:22:41Z,"Don't use this. I already wrote somewhere here that it is meaningless (I mean, this is still not enough, so there is no need to clutter up the code).
"
54591801,3989,glassez,2016-03-01T16:23:39Z,"Use the same style for declarations.
"
54592204,3989,glassez,2016-03-01T16:26:06Z,"It is preferable to use aggregation, not private inheritance from Ui classes. This eliminates naming conflicts and some of the other shortcomings.
"
54592296,3989,glassez,2016-03-01T16:26:45Z,"Move `{` to the separate line
"
54592468,3989,glassez,2016-03-01T16:27:35Z,"blank line between methods and variables.
"
54593215,3989,glassez,2016-03-01T16:31:44Z,"Duplicate file. Delete it!!!
"
54594162,3989,glassez,2016-03-01T16:36:57Z,"I mean `QSortFilterProxyModel::filterAcceptsRow()` really has `source_row` and `source_parent` param names, but these names are not typical for Qt (Qt uses camelCase).
And most importantly, I want to say that you can change the names of the parameters in an absolutely free and safely.
"
54596739,3989,zeule,2016-03-01T16:51:27Z,"And here we return to the first point: I strongly object. If it is a suggestion, I reject it. If you are going to maintain this code and want to have camelCased parameter names, I''ll change them, of course, no problem here.
"
54596857,3989,zeule,2016-03-01T16:52:13Z,"OK
"
54597018,3989,zeule,2016-03-01T16:53:14Z,"Indeed.
"
54597217,3989,zeule,2016-03-01T16:54:25Z,"OK
"
54598235,3989,zeule,2016-03-01T17:00:37Z,"OK
"
54598251,3989,zeule,2016-03-01T17:00:43Z,"OK
"
54598319,3989,zeule,2016-03-01T17:01:10Z,"OK
"
54600779,3989,glassez,2016-03-01T17:17:22Z,"> And here we return to the first point: I strongly object. If it is a suggestion, I reject it.

It isn't suggestion, it's our coding style rule.
"
54605410,3989,zeule,2016-03-01T17:48:50Z,"Oh, my god... What a stupid mistake!
"
54605696,3989,zeule,2016-03-01T17:51:04Z,"But it is effectively not your code, not a code from qBittorent project, I mean.
"
54606393,3989,glassez,2016-03-01T17:56:07Z,"Base class method - YES. But this method is part of qBittorrent.
You misunderstood something... Or too busy working :)
"
54607327,3989,glassez,2016-03-01T18:02:43Z,"Or do you mean that YOUR code contributed to qBittorrent is NOT part of qBittorrent?
"
54608034,3989,zeule,2016-03-01T18:07:39Z,"My compiler (GCC 5.3) does not agree with you. I shall either write:
`std::max(0ll, minSize)`, which does not seem nice to me, since `long long` could be not `int64`, or something like
`std::max(quint64{0}, minSize)`, which does not differ much from `static_cast`.

Maybe later, when Qt will provide literals for its types, there will be an ideal notation.
"
54609005,3989,glassez,2016-03-01T18:14:14Z,"Ok. Then leave it as is.
"
54610088,3989,glassez,2016-03-01T18:21:34Z,"Apparently, this is due to the fact that std::max is a template. For interest - what prints your compiler about it?
"
54610926,3989,glassez,2016-03-01T18:26:34Z,"Didn't you think to assign appropriate values to SizeUnit members and just do `size *= unit`?
"
54611187,3989,zeule,2016-03-01T18:28:12Z,"Here is the output, please, with intermediate paths stripped by me:

```
compiling ../../src/gui/search/searchsortmodel.cpp
../../src/gui/search/searchsortmodel.cpp: In member function 'void SearchSortModel::setSizeFilter(qint64, qint64)':
../../src/gui/search/searchsortmodel.cpp:62:36: error: no matching function for call to 'max(int, qint64&)'
     m_minSize = std::max(0, minSize);
                                    ^
In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/algorithm:61:0,
                 ...
                 from ../../src/gui/search/searchsortmodel.cpp:29:
/usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/bits/stl_algobase.h:219:5: note: candidate: template<class _Tp> const _Tp& std::max(const _Tp&, const _Tp&)
     max(const _Tp& __a, const _Tp& __b)
     ^
/usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/bits/stl_algobase.h:219:5: note:   template argument deduction/substitution failed:
../../src/gui/search/searchsortmodel.cpp:62:36: note:   deduced conflicting types for parameter 'const _Tp' ('int' and 'qint64 {aka long long int}')
     m_minSize = std::max(0, minSize);
                                    ^
In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/algorithm:61:0,
                 ...
                 from ../../src/gui/search/searchsortmodel.cpp:29:
/usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/bits/stl_algobase.h:265:5: note: candidate: template<class _Tp, class _Compare> const _Tp& std::max(const _Tp&, const _Tp&, _Compare)
     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
     ^
/usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/bits/stl_algobase.h:265:5: note:   template argument deduction/substitution failed:
../../src/gui/search/searchsortmodel.cpp:62:36: note:   deduced conflicting types for parameter 'const _Tp' ('int' and 'qint64 {aka long long int}')
     m_minSize = std::max(0, minSize);
                                    ^
In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/algorithm:62:0,
                 ...
                 from ../../src/gui/search/searchsortmodel.cpp:29:
/usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/bits/stl_algo.h:3457:5: note: candidate: template<class _Tp> _Tp std::max(std::initializer_list<_Tp>)
     max(initializer_list<_Tp> __l)
     ^
/usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/bits/stl_algo.h:3457:5: note:   template argument deduction/substitution failed:
../../src/gui/search/searchsortmodel.cpp:62:36: note:   mismatched types 'std::initializer_list<_Tp>' and 'int'
     m_minSize = std::max(0, minSize);
                                    ^
In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/algorithm:62:0,
                 ...
                 from ../../src/gui/search/searchsortmodel.cpp:29:
/usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/bits/stl_algo.h:3463:5: note: candidate: template<class _Tp, class _Compare> _Tp std::max(std::initializer_list<_Tp>, _Compare)
     max(initializer_list<_Tp> __l, _Compare __comp)
     ^
/usr/lib/gcc/x86_64-pc-linux-gnu/5.3.0/include/g++-v5/bits/stl_algo.h:3463:5: note:   template argument deduction/substitution failed:
../../src/gui/search/searchsortmodel.cpp:62:36: note:   mismatched types 'std::initializer_list<_Tp>' and 'int'
     m_minSize = std::max(0, minSize);
                                    ^
```
"
54612664,3989,glassez,2016-03-01T18:37:31Z,"Ok. I thought so... Gcc can't deduce template parameter types. But you can just (try to) do `std::max<qint64>(0, minSize)`.
"
54617402,3989,zeule,2016-03-01T19:06:15Z,"I meant that the function signature and parameter names are part of Qt code, not qBittorrent. The overrides will become hardly untraceable if everyone change parameters names. Or I can add `override` keyword. Then the fact of overriding will be explicit.
"
54621569,3989,zeule,2016-03-01T19:32:24Z,"GCC is right, AFAIK, because promotions are applied _after_ template parameters have been determined. 
"
54680036,3989,glassez,2016-03-02T05:03:46Z,"> GCC is right

Yes. It just can't deduce template parameter (as I said above) since it has two candidates: `int` and `qint64`. But if we set template parameter explicitly it's OK - compiler instantiates function `std::max(qint64, qint64)` and pass `0` and `minSize` to it and it uses implicit cast from `int` to `qint64` in this case.
So you can leave it as is or use `std::max<qint64>` instead.
"
54680337,3989,glassez,2016-03-02T05:09:53Z,"> Or I can add `override` keyword.

You can do this if you will be easier. By the way, use `override` for overriden methods is a really good idea (not only here). It really can prevent some errors in contrast to redundant re-use of `virtual` keyword.
"
54692377,3989,glassez,2016-03-02T08:29:02Z,"Broken indentation here.
"
54692468,3989,glassez,2016-03-02T08:30:02Z,"Broken indentation 
"
54692644,3989,glassez,2016-03-02T08:32:17Z,"Broken indentation as above. Missing spaces before || and extra space after it.
"
54692744,3989,glassez,2016-03-02T08:33:22Z,"Same here
"
54699582,3989,glassez,2016-03-02T09:39:04Z,"Please, no need to invent anything. Just fix the indentation.
It would also be more readable if you separate the subexpression (by enclosing them in parentheses).

``` c++
if (((m_minSeeds > 0) && (seeds < m_minSeeds))
    || ((m_maxSeeds > 0) && (seeds > m_maxSeeds))) {
    // do something
}
```
"
54699929,3989,glassez,2016-03-02T09:42:06Z,"Forgot to say earlier... We start the names of complex types with a capital letter. The same applies to the aliases (etc.) of such types. So there must be `Base` (although I don't see much point to use this alias).
"
54700106,3989,glassez,2016-03-02T09:43:37Z,"What this does?
"
54700752,3989,glassez,2016-03-02T09:49:28Z,"Fix coding style
"
54706261,3989,glassez,2016-03-02T10:37:31Z,"Only one blank line.
"
54720841,3989,zeule,2016-03-02T13:20:26Z,"OK, but what's wrong with it?
"
54720901,3989,zeule,2016-03-02T13:20:58Z,"OK
"
54721203,3989,zeule,2016-03-02T13:24:02Z,"Those are standard methods generated by uic. They create widgets and set translated UI strings.
"
54721590,3989,zeule,2016-03-02T13:27:15Z,"I need at least a verb, please, to understand what did you want to say.
"
54722087,3989,zeule,2016-03-02T13:31:52Z,"Weren't it you who asked to move `||`? Look, was so nicely aligned :

``` C++
if ((m_minSize > 0 && size < m_minSize) ||
    (m_maxSize > 0 && size > m_maxSize)) {
```

:D
"
54722538,3989,zeule,2016-03-02T13:36:05Z,"I had to stress my eyes to get the difference between two conditions. When they were co-aligned it was so much easier.
"
54723483,3989,zeule,2016-03-02T13:44:20Z,"Think of it as a kind of the language keyword? The sense is the following. If base class changes, then compiler warns you in the constructor body that you do not call the constructor of  the new base class. You correct one type alias and voilà, all base virtual function calls are correct. Plus you SCM does not show any text changes where there were no semantic changes (you still call base class virtual method, no matter what base class is).
"
54728149,3989,glassez,2016-03-02T14:22:28Z,"`{` to the next line
We use `{` in the same line only after control statements (if, else, for, while, switch etc.). See CODING_GUIDELINES.md.
"
54728494,3989,glassez,2016-03-02T14:24:50Z,"But you have to fix it here. I meant to insert a blank line before access specifiers.
"
54729602,3989,glassez,2016-03-02T14:32:58Z,"It does not require such alignment (we can't strive to do so in the General case; in this particular case you simply have the variable names of the same length).
You just need to keep (our) rules for Boolean expressions splitting (they have to split before operators) and rules of indentation (4 spaces as indent).
"
54730563,3989,glassez,2016-03-02T14:39:17Z,"The same answer. I'm not going to argue about this. We have such rules. No need to break them. If they don't like me, can try to make a proposal with the best rules. But not here. This is a separate issue. I also do not like some rules. But the absence of any rules it is a great evil which makes the code unreadable. Let's never return to this question in this way.
"
54731513,3989,glassez,2016-03-02T14:45:50Z,"> Think of it as a kind of the language keyword?

I've seen this somewhere... C# or Java (or something like that). I won't focus on this.

> You correct one type alias and voilà, all base virtual function calls are correct

...unless new base class has the same functions :)
Okay, let it be. Anyway all is not provided.
"
54732661,3989,zeule,2016-03-02T14:52:45Z,"Oh, these names were carefully selected, you know :), in order to align such statements. But if you, guys, want it the other way, I'll change the alignment, of course.
"
54733788,3989,zeule,2016-03-02T14:59:46Z,"> I've seen this somewhere... C# or Java (or something like that). I won't focus on this.

This keyword was proposed for C++ too, and during discussion what to do with the multiple inheritance somebody came up with such a `typedef`, which solved the problem.

> ...unless new base class has the same functions :)

Yes, of course it has to have the same functions with the same signatures. Qt's model classes are a good example of such base classes.
"
54733925,3989,zeule,2016-03-02T15:00:42Z,"It is here already, isn't it?
"
54734961,3989,zeule,2016-03-02T15:07:39Z,"That is why I use `static_cast` for the parameter: we define types for the parameters, and then the compiler can find the best function it has, I don't want to limit it. 
"
54735600,3989,zeule,2016-03-02T15:12:07Z,"Well, I doubt this will be much simpler. Sure, in one way we can do like

``` C++
  return size * (1ll << static_cast<int>(unit)*10);
```

But in the reverse way we have to find the most significant bit of a float number, and I don't know compiler- and platform-independent way to do this. Do you? Otherwise, I believe, there is no much sense to expel this simple loop.
"
54735730,3989,glassez,2016-03-02T15:12:51Z,"Yes. I already wrote this: you already corrected it. GitHub just shows the old comment until now (probably because it is linked to the previous line).
"
54737353,3989,glassez,2016-03-02T15:23:18Z,"> we define types for the parameters, and then the compiler can find the best function it has

Not so. The compiler has nothing to choose with the deduction of the template parameters. If there is ambiguity, it leads to error.
"
54737936,3989,glassez,2016-03-02T15:26:55Z,"Ok.
"
54738272,3989,glassez,2016-03-02T15:29:18Z,"> Those are standard methods

`setupUi()` - yes. But not `retranslateUi()`. `retranslateUi()` called internally from `setupUi()`.
"
54740311,3989,zeule,2016-03-02T15:41:37Z,"Sorry, I don't understand you. The third sentence is clear, but what mean the second one?
"
54746390,3989,glassez,2016-03-02T16:15:51Z,"Deduction of the parameters succeeds only if it gives an unambiguous result.
"
54748384,3989,zeule,2016-03-02T16:26:52Z,"To my sadness, I still can not understand what do you want to tell me.
My point is the following. I know there has to be a function `max()` which accepts two objects of the same type. I don't know whether the best match is provided by a function template or there is a regular  overloaded function. To allow a compiler to include regular functions into the resolution list, I do not use template qualification, instead I cast the parameter.
"
54749589,3989,glassez,2016-03-02T16:33:50Z,"> To allow a compiler to include regular functions into the resolution list, I do not use template qualification, instead I cast the parameter.

Oh well, that's understandable. I did not include here the regular functions (only templates)... Although I'm pretty sure in this case they (regular functions `std::max`) are not exist, but let it remain as is.
"
55392420,3989,glassez,2016-03-08T17:17:39Z,"Why do you remove this?
"
55393504,3989,zeule,2016-03-08T17:24:27Z,"Long story short, this is where all the history has started. We move unconditional filtering from here into the qBt GUI and make it conditional. You can read explanations from @ngosang in the issue #3812.
"
55478614,3989,glassez,2016-03-09T06:56:46Z,"Ok. Thank you.
"
58002706,3989,glassez,2016-03-31T05:29:00Z,"`QChar('""')` isn't enough here?
"
58002818,3989,glassez,2016-03-31T05:31:24Z,"Why do you use comments in this format?
"
58002942,3989,glassez,2016-03-31T05:34:25Z,"Fix coding style.
"
58003091,3989,glassez,2016-03-31T05:37:36Z,"Maybe use `widthList.size()` here directly and remove redundant variable?
"
58003101,3989,glassez,2016-03-31T05:37:44Z,"Why not QString constant?
"
58003326,3989,glassez,2016-03-31T05:42:18Z,"Please describe this META-magic. This is really necessary here?
"
58003390,3989,glassez,2016-03-31T05:43:39Z,"Same question as above.
"
58060032,3989,zeule,2016-03-31T14:13:37Z,"This is to save enum names instead of combobox index in the config file and, at the same time, to not duplicate those names in the code which does saving/loading. So the config file record reads:

```
FilteringMode=Everywhere
```

instead of 

```
FilteringModeIndex=1
```

I believe that this is better with respect to config file readability and possible further modifications. Perhaps I have to add comment to the enum which would warn that name changes will break config reading. 
"
58062444,3989,zeule,2016-03-31T14:25:55Z,"These are [Doxygen](http://www.doxygen.org/) comments. Since you work on Windows you might know C# XML comments which appear in generated documentation and in the IDE tooltips. These serve the same purpose: Doxygen can generate documentation and good IDEs show these comments. For instance: 
![kdevelop](https://cloud.githubusercontent.com/assets/394621/14178868/dea05888-f75c-11e5-8114-cba21e8ee74e.png)
"
58062934,3989,zeule,2016-03-31T14:28:25Z,"To marginally decrease memory consumption.
"
58095251,3989,glassez,2016-03-31T17:37:53Z,"It may be better to have this enum in the global namespace and to keep here only the functions (i.e., utilities)?
"
58096321,3989,glassez,2016-03-31T17:44:29Z,"I think it's a good practice to name the UI elements with the Class name suffix. For example: `filterModeCombo`.
"
58096745,3989,glassez,2016-03-31T17:47:07Z,"Why not `currentIndexChanged` here?
"
58096924,3989,glassez,2016-03-31T17:48:06Z,"`widthList.size()` is of type `int` AFAIK.
"
58097463,3989,glassez,2016-03-31T17:51:13Z,"Fix coding style!
Delete space after `(`.
"
58098001,3989,glassez,2016-03-31T17:54:26Z,"Fix coding style!
We starts new line with comma only in constructor initialization list.
"
58098155,3989,glassez,2016-03-31T17:55:09Z,"IMO, `this` is redundant if it's not strongly required.
"
58098775,3989,glassez,2016-03-31T17:58:25Z,"Please fix param name to `parent` (not your mistake);
"
58099318,3989,glassez,2016-03-31T18:01:40Z,"Why this method is `public slot`? Just `private` is enough for it.
"
58101608,3989,zeule,2016-03-31T18:15:37Z,"This will break ADL. What is the advantage?
"
58102070,3989,zeule,2016-03-31T18:18:07Z,"I don't remember why I wanted to have the possibility to reapply the filter.
"
58102369,3989,zeule,2016-03-31T18:19:59Z,"Not my code therefore I did not touch it.
"
58102877,3989,zeule,2016-03-31T18:22:52Z,"Technically yes, it is not needed. I've put it here to show the relation between the enum and the class.
"
58103487,3989,zeule,2016-03-31T18:26:27Z,"The `slot` is a leftover. It used to be a receiver of the model signal. I'll remove that. But it has to be public because `SearchWidget` calls it too.
"
58316286,3989,sledgehammer999,2016-04-03T19:42:27Z,"Too bad Qt Creator doesn't do this. I am a bit skeptical of this. It might lead to loss of readability. But anyway, don't change this. This isn't a big problem for me ATM.
"
58316418,3989,sledgehammer999,2016-04-03T19:51:24Z,"NItpicking: You could use QString::startsWith()/endsWith() but anyway. No need to change it.
"
58316517,3989,sledgehammer999,2016-04-03T19:57:18Z,"You can move the closing brace one line above and have the same base return outside the brace.
"
58316587,3989,sledgehammer999,2016-04-03T20:02:16Z,"I think it is more correct to do:

``` c++
QString name = sourceModel()->data(sourceModel()->index(sourceRow, NAME, sourceParent)).toString();
```
"
58316611,3989,sledgehammer999,2016-04-03T20:03:36Z,"same here
"
58316613,3989,sledgehammer999,2016-04-03T20:03:42Z,"and here
"
58316654,3989,sledgehammer999,2016-04-03T20:06:39Z,"The correct plural of the word leech is ""leeches"". Please correct all variations of it.
"
58316666,3989,sledgehammer999,2016-04-03T20:07:45Z,"and of course add the source parent.
Btw, wouldn't it be beneficial to hold the sourceModel() in a tmp variable at the top of the function? (for optimization and readability purposes).
"
58316756,3989,sledgehammer999,2016-04-03T20:12:38Z,"You can forward declare this.
"
58316927,3989,sledgehammer999,2016-04-03T20:22:15Z,"Is `this` really needed here?
"
58317022,3989,sledgehammer999,2016-04-03T20:29:05Z,"I think you should load/save the values of the other filters too.
"
58317080,3989,sledgehammer999,2016-04-03T20:33:11Z,"If you indeed elect to save/load the other values too then please convert to the way we already do things. eg Look at the top of application.cpp

``` c++
#define SETTINGS_KEY(name) ""Search/"" name

const QString KEY_FILTER_MODE_SETTING_NAME = SETTINGS_KEY(""FilteringMode"");
```

But in any case prefix this with `KEY_`
"
58317126,3989,sledgehammer999,2016-04-03T20:36:18Z,"I assume if you elect to save/load the other values too, it makes sense to do it inside updateFilter() instead.
"
58317197,3989,sledgehammer999,2016-04-03T20:40:25Z,"Unfortunately I think you need to break this up in multiple sub strings for 2 reasons.
1. Any change in the html code will break all translations
2. Some translator might forget an html tag and make the whole thing render weirdly. Or worse insert his own tags.
"
58317312,3989,zeule,2016-04-03T20:48:23Z,"I'll take it because there will be many changes anyway.
"
58317359,3989,zeule,2016-04-03T20:52:32Z,"Sure.
"
58317381,3989,zeule,2016-04-03T20:54:52Z,"> The correct plural of the word leech is ""leeches"". Please correct all variations of it.

I probably wanted to follow the enumerator identifier. Let's correct that too?
"
58317429,3989,zeule,2016-04-03T20:58:01Z,"BTW, we can think about using doxygen for generating a .qch file for Qt Creator... 
"
58317438,3989,zeule,2016-04-03T20:58:49Z,"Agree.
"
58317451,3989,sledgehammer999,2016-04-03T20:59:46Z,"Yes. From a quick look these need correction:
1. LEECHS
2. m_minLeechs
3. m_maxLeechs
4. leechs
5. setLeechsFilter (and doxygen comments)
6. search is your friend :p
"
58317484,3989,zeule,2016-04-03T21:02:18Z,"I'm afraid that the following situation may lead to a confusion:
1. Search foe a small file, set size filter for that.
2. Forget about item 1.
3. Perform a search for a large file, see no results.
"
58317501,3989,zeule,2016-04-03T21:03:48Z,"OK
"
58317506,3989,zeule,2016-04-03T21:04:11Z,"OK.
"
58317512,3989,sledgehammer999,2016-04-03T21:04:34Z,"You can leave it for now. But I predict, after I release this, users will want the application to remember their ""defaults"".
"
58317556,3989,ngosang,2016-04-03T21:07:38Z,"I think by now we should save only ""search in"" combo.
"
58318619,3989,zeule,2016-04-03T22:15:49Z,"What a nice bug! It exists, but does not expose itself. Wish they all learn from this one.
"
58318785,3989,sledgehammer999,2016-04-03T22:25:30Z,"Do you mean you should assign and not append? I admit I didn't catch too :S
"
58319867,3989,zeule,2016-04-03T23:39:28Z,"Yes. Obviously, the list was flooded with the copy of this word :)

On 4 April 2016 at 00:25, sledgehammer999 notifications@github.com wrote:

> In src/gui/search/searchsortmodel.cpp
> https://github.com/qbittorrent/qBittorrent/pull/3989#discussion_r58318785
> :
> 
> >  {
> >  }
> > 
> > +void SearchSortModel::enableNameFilter(bool enable)
> > +{
> > -    m_isNameFilterEnabled = enable;
> >   +}
> >   +
> >   +void SearchSortModel::setNameFilter(const QString &searchTerm)
> >   +{
> > -    m_searchTerm = searchTerm;
> > -    if (searchTerm.length() > 2
> > -        && searchTerm.at(0) == QLatin1Char('""') && searchTerm.at(searchTerm.length() - 1) == QLatin1Char('""')) {
> > -        m_searchTermWords.append(m_searchTerm.mid(1, m_searchTerm.length() - 2));
> 
> Do you mean you should assign and not append? I admit I didn't catch too :S
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/qbittorrent/qBittorrent/pull/3989/files/e5b9855c7860a6ea54383758200bbb7f91116e04#r58318785
"
58329215,3989,glassez,2016-04-04T05:22:07Z,"Then maybe it is better to use QDoc? Or would you call it ""deadborn"" too?
"
175494434,8584,glassez,2018-03-19T16:16:09Z,"When the user specifies ""Skip checking"", it means that qBittorrent will not check the files, but will begin to seed them, assuming they already exist. This comment means ""it would be nice to check the files existence before"".
Your changes is meaningless since qBittorrent creates save folder when add torrent to session."
175539211,8584,Piccirello,2018-03-19T18:24:59Z,"In the WebUI the user can specify whatever path they'd like. There's no guarantee that the path will actually exist- and that it isn't complete gibberish- so that's what this check is for. This has nothing to do with the ""Skip checking"" option."
175797710,8584,glassez,2018-03-20T14:57:37Z,">This has nothing to do with the ""Skip checking"" option.

Why did you delete this comment? It's just about ""Skip checking"" option.

>There's no guarantee that the path will actually exist- and that it isn't complete gibberish- so that's what this check is for.

Then you should try to create it, but not check for its existence. As I said, it's allowed case when path doesn't exist before we add torrent."
175892869,8584,Piccirello,2018-03-20T19:21:57Z,"> Then you should try to create it, but not check for its existence. As I said, it's allowed case when path doesn't exist before we add torrent.

I think you're describing the case where the last directory doesn't exist. I'm focusing on the issue where the user specifies a path `/mnt1/Disk/Torrents/Downloads` where `/mnt1` doesn't exist. Surely in this case we shouldn't create that entire path, but throw an error."
175893317,8584,Piccirello,2018-03-20T19:23:41Z,I don't want this commit to be the focus of this PR. If it's that contentious a change I'll gladly remove it.
176006620,8584,glassez,2018-03-21T08:24:44Z,">I don't want this commit to be the focus of this PR.

Me too. I just wanted to clear the space for the main review.
>If it's that contentious a change I'll gladly remove it.

It is not as unambiguous as it may seem at first glance. It is better to move it in a separate PR.
>I think you're describing the case where the last directory doesn't exist.

No, I'm describing common case. It should create save path even if it multilevel."
176224543,8584,Piccirello,2018-03-21T20:19:25Z,"> It is not as unambiguous as it may seem at first glance. It is better to move it in a separate PR.

I'll move it to a separate PR.

> No, I'm describing common case. It should create save path even if it multilevel.

In the case I described (`/mnt1/Disk/Torrents/Downloads`) would you expect qBittorrent to create all directories, or would you expect an error for `/mnt1` not existing? I personally would expect the latter."
176320369,8584,glassez,2018-03-22T06:43:49Z,"I didn't say what I expected. I was talking about how it works now.
But, IMO, this behavior is quite expected, otherwise users (especially, remote users) will get a hell of a headache (it breaks some automations).

P.S. Let's continue this discussion in its own topic."
176481583,8584,Chocobo1,2018-03-22T16:15:21Z,"can you omit these? 
If there are any messages should print out, it should go through `Logger`."
176483905,8584,Chocobo1,2018-03-22T16:22:23Z,"```c++
const QJsonObject result = QJsonObject::fromVariantMap({ {""status"", ""Ok.""}, {""id"", id} });
```
should be possible..."
176484296,8584,Chocobo1,2018-03-22T16:23:27Z,I would omit curly braces here and other places.
176484810,8584,Chocobo1,2018-03-22T16:25:05Z,"~~Please refactor, use a variable or two here.~~"
176485678,8584,Chocobo1,2018-03-22T16:27:37Z,and use `{}` replacing `QList<SearchResult>()`
176486292,8584,glassez,2018-03-22T16:29:24Z,Why do you need this intermediate object? I mean QVariantMap.
176487106,8584,Chocobo1,2018-03-22T16:31:46Z,use range-based `for()`
176487321,8584,glassez,2018-03-22T16:32:29Z,"""Plugin is not supported."" without any particular information is quite meaningless message."
176487649,8584,Chocobo1,2018-03-22T16:33:26Z,`QSet<QString>`?
176488815,8584,Chocobo1,2018-03-22T16:36:59Z,Can you explain your plan? or just remove it.
176489242,8584,Chocobo1,2018-03-22T16:38:14Z,"Please use range-based `for`, this applies to all similar instances."
176490448,8584,Chocobo1,2018-03-22T16:41:47Z,"~~I think this is wrong (in webapplication.cpp too), the `do while()` should be replaced by `if()`~~

Nevermind."
176491257,8584,Chocobo1,2018-03-22T16:44:11Z,"```c++
searchResultsVariantList += QMap<QString, QVariant> {
    { ""fileName"", searchResult.fileName }
    //...
};

// or alternative
const QMap<QString, QVariant> searchResultMap {
    { ""fileName"", searchResult.fileName }
    //...
};

searchResultsVariantList << searchResultMap;
```"
176491637,8584,Chocobo1,2018-03-22T16:45:22Z,"```c++
const QMap<QString, QVariant> resultMap = {
   {""status"", ((isSearchActive) || (queueSize > 0)) ? ""Loading."" : ""Done.""}
   // ...
};
```"
176491751,8584,Chocobo1,2018-03-22T16:45:39Z,`const QStringList &plugins`
176491856,8584,Chocobo1,2018-03-22T16:45:53Z,`const QList<SearchResult> &searchResults`
176492056,8584,Chocobo1,2018-03-22T16:46:31Z,Same as https://github.com/qbittorrent/qBittorrent/pull/8584/files#r176491257
176492310,8584,Chocobo1,2018-03-22T16:47:20Z,"base headers should go first, please move up"
176492590,8584,Chocobo1,2018-03-22T16:48:13Z,remove?
176492856,8584,Chocobo1,2018-03-22T16:49:00Z,`++i`
176494266,8584,Chocobo1,2018-03-22T16:52:55Z,"QQueue inherits from QList, if you used `QList m_stdoutQueue` instead, you can just `return m_stdoutQueue;` below."
176494864,8584,Chocobo1,2018-03-22T16:54:44Z,"Or if you can predict some upper bound of the size of `m_stdoutQueue`, you should use `QVector` + `QVector::reserve()`"
176495217,8584,Chocobo1,2018-03-22T16:55:39Z,`bool WebSearchHandler::isActive() const`
176495924,8584,Chocobo1,2018-03-22T16:57:29Z,`WebSearchHandler::getSearchResults() const`?
176498224,8584,Chocobo1,2018-03-22T17:04:02Z,"@glassez 
Off topic, now C++ Core Guidelines actually has a recommendation for this:
http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#sf8-use-include-guards-for-all-h-files"
176504796,8584,glassez,2018-03-22T17:23:41Z,"There are very abstract fears about `#pragma once`. All compilers supported by qBittorrent project support this directive, so I don't see any problem with it. Its ""non-standard"" was well known at the stage of discussion, however, the decision was made in its favor."
176625136,8584,Piccirello,2018-03-23T02:33:12Z,"> If there are any messages should print out, it should go through Logger.

`qDebug` and `Logger` are both used pretty extensively in the codebase. Is the `qDebug` way of logging deprecated?

"
176626608,8584,Piccirello,2018-03-23T02:47:13Z,"> should be possible...

I didn't know about this inline form. Thanks.

> Why do you need this intermediate object? I mean QVariantMap.

Because I don't know of another way. I'm still very new to C++, so when pointing out that there are other ways, suggestions are welcome."
176631260,8584,Piccirello,2018-03-23T03:32:33Z,"I get this error when compiling with `+=` and `<<`

`
webui/api/searchcontroller.cpp:233:34: error: no match for ‘operator+=’ (operand types are ‘QVariantList {aka QList<QVariant>}’ and ‘<brace-enclosed initializer list>’)
`"
176631344,8584,Piccirello,2018-03-23T03:33:32Z,"> QQueue inherits from QList, if you used QList m_stdoutQueue instead, you can just return m_stdoutQueue; below.

I limit the number of results to 500 (arbitrary number) so that the response isn't too large. Though I'm switching to using `QList::mid()` for this."
176632860,8584,Piccirello,2018-03-23T03:45:38Z,I haven't thought of a good way of handling this. Removing.
176638520,8584,Chocobo1,2018-03-23T04:47:54Z,">Is the qDebug way of logging deprecated?

IMO yes, we don't need to distribute these code/messages unless we want users to help debug something, even so, we can provide a discrete build for them instead of using qDebug.
"
176640382,8584,Piccirello,2018-03-23T05:10:17Z,I'll use the logger so that they'll be visible when the Log is added to the webui. I'll also do this for when plugin updates fail - though this is admittedly a poor solution.
176640731,8584,glassez,2018-03-23T05:14:32Z,">suggestions are welcome

You should use QJson types directly, unless you already have data in different format.
QJsonObject has similar interface with QHash/QMap.
QJsonArray has similar interface with QList.

You can do either:
```c++
const QJsonObject result = {{""status"", ""Ok.""}, {""id"", id}};
setResult(result);
```
or (if you don't need intermediate variable):
```c++
setResult(QJsonObject {{""status"", ""Ok.""}, {""id"", id}});
```

So please don't create QVariantXXX types only to convert it to QJsonXXX types (everywhere in this code)."
176641219,8584,glassez,2018-03-23T05:19:44Z,"IMO, qDebug is still usefull for dev-eyes-only messages (e.g. to indicate some important execution points etc.). Also you free to use it as you want when you test some new code, but many of them are redundant in result and should be removed."
176642339,8584,Chocobo1,2018-03-23T05:33:01Z,"> I get this error when compiling with += and <<

pardon, I updated the code above."
176644048,8584,glassez,2018-03-23T05:50:56Z,">pardon, I updated the code above.

As I requested before, it should be QJsonObject/QJsonArray here too."
176928114,8584,Piccirello,2018-03-25T04:05:14Z,"QSet doesn't maintain order of its elements, which is required for the webui implementation of categories. "
176928189,8584,glassez,2018-03-25T04:11:30Z,"Actually, each search job is identified by SearchHandler instance so you can use its pointer as ID. Just serialize it."
176932383,8584,Piccirello,2018-03-25T08:08:26Z,There are potential security implications to exposing the pointer's memory address to the WebUI. I prefer the current process of pseudo-random id generation.
176940731,8584,Chocobo1,2018-03-25T13:38:37Z,"What about just using a counter and increment it every time?
I reckon this id doesn't really need to be strongly protected, or it should be?
"
176957814,8584,Piccirello,2018-03-25T23:02:01Z,"I don't think it needs to be strongly protected, since it's only useful once the user has authenticated. I considered the counter approach but that's an additional state we'd have to track."
176977672,8584,Chocobo1,2018-03-26T04:13:03Z,If you don't need order in `m_searches` use QHash
176986854,8584,Piccirello,2018-03-26T06:01:14Z,Order isn't needed here. I've swapped the `QMap` with `QHash`.
177165966,8584,glassez,2018-03-26T17:07:31Z,`const QJsonObject result = {`
194682200,8584,glassez,2018-06-12T10:03:10Z,"If you want to print all these messages in a log, you have to make them more meaningful. Look at it through the eyes of the user. It must understand what is at stake."
194683476,8584,glassez,2018-06-12T10:07:53Z,"SearchPluginManager already initializes it in its constructor, so this additional method isn't needed. Just call `new SearchPluginManager;` in place you want to initialize it (e.g. https://github.com/qbittorrent/qBittorrent/blob/master/src/app/application.cpp#L518)."
194684984,8584,glassez,2018-06-12T10:14:08Z,Wrong! The param is correct itself. The more appropriate error is Not Found (since there is no such search job with the given id).
194686174,8584,glassez,2018-06-12T10:19:28Z,NotFound
194686674,8584,glassez,2018-06-12T10:21:40Z,NotFound
194686915,8584,glassez,2018-06-12T10:22:44Z,When are you going to delete its instance?
194687596,8584,glassez,2018-06-12T10:25:17Z,"The query like ""search/categories?name=somename"" is confusing. What does name mean? Shouldn't it be ""pluginName""?"
194689480,8584,glassez,2018-06-12T10:33:06Z,"This is redundant info in all similar responses since it is always ""Ok""."
195283875,8584,Piccirello,2018-06-14T01:51:30Z,I see now our existing apis all use Not Found for this. I'll change the error(s).
195288918,8584,Piccirello,2018-06-14T02:38:39Z,It'll get deleted here (will change this line) and also after a timer expires. I'm thinking 30 min.
195677673,8584,glassez,2018-06-15T09:21:32Z,You forgot to remove this method.
195678000,8584,glassez,2018-06-15T09:22:53Z,You can use `LogMsg()` function instead.
195679333,8584,glassez,2018-06-15T09:28:20Z,Many of these log messages are just a trash. I would leave only really necessary ones.
195680052,8584,glassez,2018-06-15T09:31:11Z,You also need remove the line `delete SearchPluginManager::instance();` from destructor and put it into appropriate place in Application class.
195680962,8584,glassez,2018-06-15T09:35:01Z,"It doesn't seem to be required here. Please remind me, what is it for?"
195681433,8584,glassez,2018-06-15T09:36:59Z,Only forward references are required here for these types (except the QHash). Includes should be moved to .cpp
195681864,8584,glassez,2018-06-15T09:38:47Z,Fix typo in Engine
195810239,8584,glassez,2018-06-15T17:19:40Z,"I would use ""status"" here."
195812755,8584,glassez,2018-06-15T17:29:27Z,Please don't use `const` in function declaration with non-pointer/non-reference types. It's useless and confusing. Leave it in function definition only.
195887277,8584,Piccirello,2018-06-16T00:21:33Z,These messages are valuable for knowing what happens after triggering an action. But maybe the log isn't the right place for them. I think I might have to handle this in the webui...
195888742,8584,Piccirello,2018-06-16T00:54:41Z,It's for `PluginVersion`
195889225,8584,Piccirello,2018-06-16T01:05:48Z,Is it not standard to put the include in the header file when the type is used in a function definition?
195899849,8584,glassez,2018-06-16T10:17:40Z,"Here are function declarations only. They're defined in .cpp.

Type definition isn't needed for the compiler when it just passed into function by pointer or by reference, or returned from function (it even unneeded if we use the pointer/reference without accessing to its content). So we can just forward declare it before."
195899904,8584,glassez,2018-06-16T10:21:22Z,Please don't produce unnecessary changes (especially where you don't know)! RSS::AutoDownloader depends from RSS::Session so it should be created after RSS::Session.
195899946,8584,glassez,2018-06-16T10:24:31Z,"And more... In most cases, the application components must be removed in reverse order. So if you create it:
```c++
new RSS::Session; // create RSS::Session singleton
new RSS::AutoDownloader; // create RSS::AutoDownloader singleton
new SearchPluginManager;
```
you should remove it:
```c++
delete SearchPluginManager::instance();
delete RSS::AutoDownloader::instance();
delete RSS::Session::instance();
```"
195899973,8584,glassez,2018-06-16T10:26:44Z,"I said:
>Please don't use `const` in function **declaration** with non-pointer/non-reference types. It's useless and confusing. Leave it in function definition only.

So you can leave it here."
195900063,8584,glassez,2018-06-16T10:32:43Z,"The messages like ""I'm going to do something..."", ""I started doing something..."", ""I'm doing something..."" is useless in the Log in most cases. It is much more important to have here messages about the result of some actions, for example ""Plugin *plugin_name* has been successfully updated."""
196048367,8584,Chocobo1,2018-06-18T11:47:27Z,const QString &plugin
196048542,8584,Chocobo1,2018-06-18T11:48:11Z,const SearchResult &searchResult 
196048813,8584,Chocobo1,2018-06-18T11:49:32Z,QRegularExpression
196049324,8584,Chocobo1,2018-06-18T11:51:47Z,(optional) I would use `LogMsg()` instead of `Logger::instance()->addMessage()` everywhere.
196049807,8584,Chocobo1,2018-06-18T11:53:58Z,"`.arg(id, sessionId)`  and please check other similar instances, combine multiple .arg() whenever possible. "
196049984,8584,Chocobo1,2018-06-18T11:54:55Z,"`','`"
196050751,8584,Chocobo1,2018-06-18T11:58:01Z,please make it a single line.
196051302,8584,Chocobo1,2018-06-18T12:00:28Z,"Please give the body a new line:
```c++
if (pluginsLower == ""all"")
    pluginsToUse = SearchPluginManager::instance()->allPlugins();
```"
196051570,8584,Chocobo1,2018-06-18T12:01:42Z,"Since it only has 1 instance, I would prefer inline it."
196146936,8584,glassez,2018-06-18T16:42:41Z,"You should use the Session to store your searches (I think I already talked about this earlier).
`ISession::getData()` and `ISession::setData()` should help you. See SyncController code for example."
196197375,8584,Piccirello,2018-06-18T19:29:47Z,"I initially attempted this, but faced some confusion. Do we want to store the entire `SearchHandler` object in the `ISession`? How do we store this as a QVariant?

I wasn't sure how to do this without adding additional methods to `ISession`, which didn't seem like the right approach."
196394222,8584,glassez,2018-06-19T11:58:34Z,"E.g.:

```c++
using SearchHandlerPtr = QSharedPointer<SearchHandler>;
using SearchHandlerDict = QHash<QString, SearchHandlerPtr>;
// ...

void SearchController::startAction()
{
    // ...
    const QString id = generateSearchId( sessionManager()->session()->id());
    auto searchHandlers = sessionManager()->session()->getData(QLatin1String(""searchHandlers"")).value<SearchHandlerDict >();
    SearchHandlerPtr searchHandler {SearchPluginManager::instance()->startSearch(pattern, category, pluginsToUse)};
    searchHandlers.insert(id, searchHandler);
    sessionManager()->session()->setData(QLatin1String(""searchHandlers""), QVariant::fromValue(searchHandlers));
}
```"
197621225,8584,Piccirello,2018-06-23T19:54:44Z,I wasn't aware this could differ between the function declaration and definition.
197621380,8584,Piccirello,2018-06-23T20:06:01Z,I'm adding back some messages and removing others. Let me know if you think there are some that should still be removed.
197621641,8584,Piccirello,2018-06-23T20:19:38Z,I didn't understand the implications of changing this. I'll change it back.
197631714,8584,glassez,2018-06-24T08:08:05Z,">RSS::AutoDownloader depends from RSS::Session so it should be created after RSS::Session.

This means that RSS::AutoDownloader uses RSS::Session and assumes that it already exists. So we need create RSS::Session before RSS::AutoDownloader and delete in reverse order (RSS::AutoDownloader can call RSS::Session methods in its constructor and destructor)."
197631802,8584,glassez,2018-06-24T08:11:16Z,I still don't see you removing that code from the destructor.
197631840,8584,glassez,2018-06-24T08:13:08Z,Fix `value<SearchHandlerDict >()` => `value<SearchHandlerDict>()`
197631902,8584,glassez,2018-06-24T08:15:56Z,I don't see any valid reason to do it.
197632029,8584,glassez,2018-06-24T08:20:55Z,It's overthinking. You can just remove it from Collection. QSharedPointer will do the rest.
197632056,8584,glassez,2018-06-24T08:21:53Z,Please return it as JSON too.
197632085,8584,glassez,2018-06-24T08:22:43Z,Everywhere in this PR!
197667854,8584,Piccirello,2018-06-25T02:44:54Z,"This is to clean up the search job after a timeout. We don't want all jobs around for the life of the session, do we? If this isn't a concern I can remove it."
197714083,8584,glassez,2018-06-25T08:23:16Z,"Client side should control job lifetime within session boundaries.

>We don't want all jobs around for the life of the session

Yes. It can be a problem in case of wrong use. But the timeout isn't the solution. It would be better to have max jobs limit."
197715374,8584,glassez,2018-06-25T08:28:12Z,"@Piccirello, why are you once again ignoring this comment?"
197846454,8584,Piccirello,2018-06-25T15:47:47Z,"Sorry about that, I subsequently missed this comment when reviewing on GitHub."
197852519,8584,Piccirello,2018-06-25T16:05:41Z,"> It can be a problem in case of wrong use.

We can't rely on the web session calling delete on each search job. I don't foresee the webui doing this at all unless the user takes explicit action (e.g. closing the search tab), which very likely wouldn't happen.

I think a clean up timer is our best option. I don't think a max jobs limit solves for this same issue. Max jobs would prevent someone from maliciously spawning a bunch of jobs to try using all system resources. If a user has a long-lived webui session, and does many searches over time, should they suddenly no longer be allowed to run a new search?"
197859279,8584,glassez,2018-06-25T16:27:44Z,">We can't rely on the web session calling delete on each search job. 

Why? What do you think it's for?
When the session ends it destroys all session data.
>If a user has a long-lived webui session, and does many searches over time, should they suddenly no longer be allowed to run a new search?

Did I suggest to prevent it from start a new search? Apparently, it wasn't clear enough... I meant delete the old search when the user starts a new one and the limit is exceeded."
197900110,8584,Piccirello,2018-06-25T18:39:45Z,"> Why? What do you think it's for?

It exists in the API for obvious reasons, but doesn't cleanly fit into the actual webui usage. Unless the user takes an explicit action, like closing a search tab (as the current GUI `SearchWidget` does). In general I don't expect a user to close their search tabs- they may just close the browser tab entirely.

> When the session ends it destroys all session data.

Of course, this is still a valid way to delete the search jobs. But we should also account for long-lived sessions.

> Did I suggest to prevent it from start a new search? Apparently, it wasn't clear enough... I meant delete the old search when the user starts a new one and the limit is exceeded.

Thanks for clarifying. I still fail to see why we would set an arbitrary limit on this, when this limit doesn't also exist in the GUI (please correct me if this is wrong). My goal with the timer is to *eventually* delete the search job when the user session is long-lived and the user doesn't explicitly delete it. Maybe all this is unnecessary and we just wait until the session is deleted to delete all search jobs."
201880294,8584,Piccirello,2018-07-12T00:39:29Z,"I've increased this timeout to 1 hour. I still firmly believe a timer is a good idea, but also welcome other input. @Chocobo1 @sledgehammer999 

Web sessions are never deleted until the user clicks log out. Which I strongly doubt any users actually do."
201930553,8584,Chocobo1,2018-07-12T07:13:49Z,"I guess `SearchController::startAction()` could be invoked as many times as user want, the problem is QTimer could be a limited resource on some OS, from qtimer doc:
>Some operating systems limit the number of timers that may be used; Qt tries to work around these limitations.

So maybe it is better to have a QMap that records the (id, start time) pair and have a single qtimer *private variable in class* that fires every hour.

"
201962657,8584,glassez,2018-07-12T09:09:13Z,">Web sessions are never deleted until the user clicks log out. Which I strongly doubt any users actually do.

@Piccirello, if you don't know something and you're not able to learn it from the code yourself, just ask next time. Session inactive time is 15 minutes. It will be deleted after (in fact, it won't be deleted exactly in 15 minutes, as I avoid (over-)using timers where possible; actually it will be deleted on next sessions-related action, i.e. when user access this (outdated) session or try to start the new one).
Sessions ensure that resources are freed when the session is closed (by the user or as a result of a timeout). I agree that this is not enough in some cases. Each search start causes the allocation of resources, so we need to make sure that it is not excessive.
But what do we really want to prevent? What's wrong with having a user have one or more active searches throughout the session (even if it's active for a few hours)? On the other hand, what can we prevent by having a timeout for each search? Nothing! How many searches can I run during this time? Not even during hour, but just during couple of minutes?..
So I repeat again, we should limit the number of existing searches instead."
201963302,8584,glassez,2018-07-12T09:11:33Z,"@Chocobo1, please see https://github.com/qbittorrent/qBittorrent/pull/8584#discussion_r201962657"
202086359,8584,Piccirello,2018-07-12T15:49:30Z,">  Session inactive time is 15 minutes. It will be deleted after

Could you point me to where this happens in the code? I couldn't find it when I looked last night.

> What's wrong with having a user have one or more active searches throughout the session (even if it's active for a few hours)?

If the session is cleared so aggressively then I'm less concerned about it. I should disable my IP whitelist rule so that I can see how often the session is recreated. It just happens in the background for me, without any auth prompt, so it appears to be one long session.

> What's wrong with having a user have one or more active searches throughout the session (even if it's active for a few hours)?

The concern was around a long-lived (e.g. multi-day) session. I'll test to confirm, but this seems more unlikely now.

> So I repeat again, we should limit the number of existing searches instead.

I still don't think this is the right approach. The concern isn't concurrent sessions, it's sessions not being cleared over a long time period."
202117887,8584,glassez,2018-07-12T17:33:19Z,">I still don't think this is the right approach. 

I.e. do you want to allow a remote user to start unlimited number of searches?
>The concern isn't concurrent sessions, it's sessions not being cleared over a long time period.

Why should session be cleared when it's active (i.e. actually used)?

Please provide me an example of use case when long lived ""searches"" bring real problems (assuming there is max searches count limit exists)."
202129554,8584,glassez,2018-07-12T18:09:54Z,">Could you point me to where this happens in the code? I couldn't find it when I looked last night.

You can search for INACTIVE_TIME constant usages in WebApplication code."
202528254,8584,Piccirello,2018-07-15T00:16:20Z,"> I.e. do you want to allow a remote user to start unlimited number of searches?

What limit would you impose?

> Why should session be cleared when it's active (i.e. actually used)?

My point is that a search job may exist long after it's actually ""active,"" simply because the webui does not provide a good means of setting the search job as inactive. This is just a byproduct of how people use webpages.

I really don't care to belabor this point any longer. If someone else wants to provide input, please do. Otherwise I plan to have a search job timer (following @Chocobo1's suggestion to use a single timer)."
202529732,8584,Piccirello,2018-07-15T02:35:12Z,"Now that I'm thinking about implementation, I'm inclined to set a limit of 10 concurrent searches.  It would protect against hitting the QTimer limit and was already being suggested."
204228006,8584,Chocobo1,2018-07-22T05:02:12Z,"This isn't needed IMO, marking it `static` will make it reside in memory at all times.

There more suitable one for marking static is MAX_CONCURRENT_SEARCHES.
"
204230610,8584,Piccirello,2018-07-22T07:26:36Z,"> There more suitable one for marking static is MAX_CONCURRENT_SEARCHES.

But won't this variable only get initialized once anyway?"
204233454,8584,Chocobo1,2018-07-22T09:14:29Z,">But won't this variable only get initialized once anyway?

Yes, but also that the same memory/object of MAX_CONCURRENT_SEARCHES will be shared by different `SearchController` instances (not that you really need them anyway...)."
204356229,8584,zeule,2018-07-23T10:42:15Z,"The variable names says ""correct"" while the message refer to its value as ""incorrect"""
204366773,8584,zeule,2018-07-23T11:27:57Z,"Python version uses unsigned int, please change the comparison to `==`"
204368868,8584,zeule,2018-07-23T11:36:06Z,`plugins` is not a list? Can't understand with respect to line 65 (below).
204371527,8584,zeule,2018-07-23T11:46:50Z,Duplicates `searchFinished()` (both as text and execution flow). 
204373112,8584,zeule,2018-07-23T11:53:21Z,Seems to be a bad decision to me. Adds a counter-intuitive special case. I would use -1 instead. That would require to change line 138.
204374892,8584,zeule,2018-07-23T12:00:48Z,duplicates `searchFinished()`
204375908,8584,zeule,2018-07-23T12:05:04Z,Redundant variable.
204375954,8584,zeule,2018-07-23T12:05:13Z,Redundant variable.
204375993,8584,zeule,2018-07-23T12:05:21Z,Redundant variable.
204376240,8584,zeule,2018-07-23T12:06:22Z,Maybe return a confirmation?
204376425,8584,zeule,2018-07-23T12:07:09Z,Duplicates `seachFinished()`
204377499,8584,zeule,2018-07-23T12:11:19Z,Can I reach DoS state invoking this frequently enough?
204377694,8584,zeule,2018-07-23T12:12:04Z,Can I reach DoS state invoking this frequently enough?
204382185,8584,zeule,2018-07-23T12:29:08Z,"~Consider~
```c++
for (const auto &plugin : updateInfo) {
    pluginManager->updatePlugin(plugin.key());
}
```
Impossible because iterators in Qt dictionaries returns value but not a pair when dereferenced.
"
204382702,8584,zeule,2018-07-23T12:31:07Z,Doesn't seem to differ from `searchFinished()`
204383866,8584,zeule,2018-07-23T12:35:28Z,Why do you test in line 311 without removing these characters?
204396404,8584,glassez,2018-07-23T13:17:07Z,What type of `plugin` do you expect?
204398251,8584,zeule,2018-07-23T13:23:03Z,"Oh, sorry. Stupid Qt dictionaries... "
204472831,8584,glassez,2018-07-23T16:34:04Z,"What do you mean exactly?
And what do you suggest to change in line 138: `int limit = params()[""limit""].toInt();`

The idea is treat `limit <= 0` as unlimited. But if we pass 0 to `QList::mid()` we will get empty result, since **QList** use 0 as is."
204481146,8584,zeule,2018-07-23T17:00:41Z,"I suggest to use only negative number as absence of the limit: `int limit = params().value(""limit"", ""-1"").toInt()`.

> …we will get empty result…

That's right. I would expect exactly that. As a side note, ""limit"" seems to me a bad choice for the parameter name, which is ""count"". ""Limit"" could mean ""offset"" + ""count"", the last index, and maybe something else."
204485253,8584,zeule,2018-07-23T17:13:44Z,"@glassez, what exactly is wrong here? You have to copy keys into a dedicated container to iterate over them. Is it not stupid?"
204486020,8584,glassez,2018-07-23T17:16:16Z,">As a side note, ""limit"" seems to me a bad choice for the parameter name, which is ""count"". ""Limit"" could mean ""offset"" + ""count"", the last index, and maybe something else.

You've probably never dealt with SQL? Limit means ""upper bound on the number of rows returned by the entire SELECT statement"" there. But you're certainly going to say something like ""Stupid SQL..."".
IMO, the ""limit"" term is better than ""count"", since it means ""at most N values"" but not ""exactly N values"" and that's exactly what we want here.
>That's right. I would expect exactly that.

Or let the user request a deliberately empty result subset is a good idea for you? Then explain why you need it."
204488483,8584,zeule,2018-07-23T17:24:16Z,"Have no idea what are you referring to, `SELECT blah-blah LIMIT 0` returns empty dataset.

> Then explain why you need it.

Don't need it right away, of course, but can easily imagine scripting using the API and then 0 with a special meaning would add needless tests."
204490414,8584,glassez,2018-07-23T17:30:41Z,">Have no idea what are you referring to

I only referred to it to show this term might mean not only `""offset"" + ""count"", the last index, and maybe something else`...
>can easily imagine scripting using the API and then 0 with a special meaning would add needless tests.

OK."
204491322,8584,glassez,2018-07-23T17:33:27Z,Why don't use another way to iterate over it?
204492317,8584,zeule,2018-07-23T17:36:33Z,Return to using iterators explicitly? Or what did you suggest?
204494724,8584,zeule,2018-07-23T17:43:59Z,"> I only referred to it to show this term might mean not only 

That's exactly my point: ""limit"" might mean various things. Probably not a big deal for SQL, where one works with a particular dialect for years, but might be not so good for yet another application with its own API."
204495499,8584,glassez,2018-07-23T17:46:17Z,">Return to using iterators explicitly?

Why not? Or is it no longer fashionable?"
204496691,8584,zeule,2018-07-23T17:50:01Z,"Sure, everyone fancies the range based for loop. Explicit iterators are so old-styled."
204498482,8584,glassez,2018-07-23T17:55:28Z,"IMO, there is no place for fashion in programming. We should select the appropriate tool in each case."
204607903,8584,Piccirello,2018-07-24T02:33:53Z,"Good catch, will fix this."
204608552,8584,Piccirello,2018-07-24T02:39:21Z,I'll also update the usage in `searchwidget.cpp`
204609918,8584,Piccirello,2018-07-24T02:51:41Z,"`plugins` is either a single plugin, `all`, `enabled`, or `multi` (carry over from GUI that means `enabled`).

This api should probably support a comma/pipe separated list of plugins to use."
204610637,8584,Piccirello,2018-07-24T02:57:56Z,Will refactor
204610839,8584,Piccirello,2018-07-24T02:59:40Z,"`pluginManager->checkForUpdates()` doesn't return anything, so this would be a larger refactor."
204610968,8584,Piccirello,2018-07-24T03:00:44Z,Is this function more vulnerable than any other api endpoint?
204614437,8584,Chocobo1,2018-07-24T03:32:28Z,`if (!Utils::ForeignApps::pythonInfo().isValid())` would be better.
204709748,8584,zeule,2018-07-24T10:51:48Z,"%1 *out* of %2, probably"
204710465,8584,zeule,2018-07-24T10:54:25Z,"I don't quite understand why do you call `removeActiveSearch()` here, as it looks to me that `SearchHandler::cancelSearch()` will emit the `searchFinished()` signal, thus calling `SearchController::searchFinished()` via the lambda defined above."
204710719,8584,zeule,2018-07-24T10:55:33Z,"@Piccirello, could you comment on this, please? "
204711345,8584,zeule,2018-07-24T10:57:57Z,"`QList::append()` will concatenate lists, as well as `QList::operator<<(const QList&)`, so you can drop the looping."
204711887,8584,zeule,2018-07-24T10:59:58Z,"Could you, please, declare these keys as constants? I.e.:
```c++
namespace
{
     const QLatin1String activeSearches = QLatin1String(""activeSearches"");
     const QLatin1String searchHandlers = QLatin1String(""searchHandlers"");
    ...
}
```"
204712682,8584,zeule,2018-07-24T11:03:19Z,"With as few as max 5 elements and string keys, `QMap` will be faster."
204714705,8584,zeule,2018-07-24T11:11:30Z,"Those two functions (update and install) consume resources and free them only after downloading (successfully or not) a file. If downloading speed is low, the resources can be acquires as many times as the API calls were made.   "
204976952,8584,Piccirello,2018-07-25T04:18:01Z,"> Don't need it right away, of course, but can easily imagine scripting using the API and then 0 with a special meaning would add needless tests.
 
That's why I left the `limit` parameter as optional. You only need to send it if you explicitly want to impose a limit.

> IMO, the ""limit"" term is better than ""count"", since it means ""at most N values"" but not ""exactly N values""

I have to agree with this. I think count will be too confusing when the API returns fewer results."
204978395,8584,Piccirello,2018-07-25T04:32:14Z,"It would trigger downstream, but I like the removal to be explicit. It's also a fairly cheap operation "
204981204,8584,Piccirello,2018-07-25T04:56:43Z,"In that case I suppose it's theoretically possible, though these APIs are CSRF-protected POSTs. Only the user can invoke them."
206154589,8584,zeule,2018-07-30T14:29:33Z,"I beg your pardon for slowpoking, but the plural form has to be used here. Could you, correct, please?
`Incorrect update data were received for %1 out of %2 plugins.`"
206156829,8584,zeule,2018-07-30T14:35:14Z,For maintenance it would be cool to relocate the code for creating these values somewhere nearby (just a note). 
206162538,8584,zeule,2018-07-30T14:43:14Z,OK
206167287,8584,zeule,2018-07-30T14:48:50Z,"I would add
```c++
template <class T>
T getData(const QString &id) const {
    return this->getData(id).value<T>();
}
```
to the `ISession` class to shorten all the similar calls."
206231180,8584,zeule,2018-07-30T16:08:47Z,"Why does this need to be so complicated? Why is the id string first of all? Could you explain, please, why a simple interger number does not suit here?"
206264207,8584,Chocobo1,2018-07-30T17:52:38Z,`for (const QString &pluginName : copyAsConst(updateInfo.keys())) {`
206264317,8584,Chocobo1,2018-07-30T17:52:59Z,`for (const QString &searchId : copyAsConst(searchHandlers.keys())) {`
206264499,8584,Chocobo1,2018-07-30T17:53:33Z,`for (const QString &category : copyAsConst(SearchPluginManager::instance()->getPluginCategories(name)))`
206280172,8584,glassez,2018-07-30T18:43:43Z,`copyAsConst` seems to be required only when the method returns a copy of an existing container rather than creating it.
209106710,8584,Piccirello,2018-08-09T23:17:02Z,I think it sounds weird with the plural form. Easy fix though: remove was/were entirely :)
209107501,8584,Piccirello,2018-08-09T23:21:30Z,This code was recycled from the WebUI session id generation.
209241193,8584,zeule,2018-08-10T12:24:13Z,How does this address the question?
209245307,8584,Piccirello,2018-08-10T12:40:41Z,"> Why is the id string first of all?

I was responding to this question."
209246271,8584,zeule,2018-08-10T12:44:17Z,"Errrr... Thank you, of course, but why does the Id need to be that complicated?"
211088720,8584,Piccirello,2018-08-19T00:39:51Z,I've switched the id over to using an integer.
213193796,8584,Chocobo1,2018-08-28T06:11:59Z,"I skimmed through, just one last thing from me:
```c++
const QList<int> searchIds {(id == 0) ? searchHandlers.keys() : QList<int> {id}};
// I was wrong, you can omit copyAsConst here
```"
214377567,8584,Piccirello,2018-08-31T14:45:31Z,Can I also omit the `copyAsConst` from line 293: `for (const QString &pluginName : copyAsConst(updateInfo.keys())) {`? `updateInfo` is already const.
214383713,8584,Chocobo1,2018-08-31T15:04:31Z,"Yes, but not because it is already const."
216555790,8584,glassez,2018-09-11T06:17:13Z,Coding style is broken.
216556074,8584,glassez,2018-09-11T06:19:23Z,Redundant empty line.
218335003,8584,glassez,2018-09-18T08:10:51Z,">these APIs are CSRF-protected POSTs. Only the user can invoke them.

It's wrong assumption.
There are no POST, GET, etc. on this app level. It's not Web API. It's just ""serial"" API, that gets serialized data, process it and returns serialized result.
If you need some WebAPI related limitations you need to implement them one level up."
218477760,8584,glassez,2018-09-18T15:21:01Z,I just thought you were focusing on the request method...
120285247,6911,zeule,2017-06-06T07:46:38Z,"This is shorter:
```c++
std::copy(list.begin(), list.end(), std::inserter(set));
``` "
120285632,6911,zeule,2017-06-06T07:48:55Z,"`template whitespace < `, please."
120285877,6911,zeule,2017-06-06T07:50:08Z,"You may write
```c++
return {};
```"
120286617,6911,zeule,2017-06-06T07:54:15Z,"camelCase, please, for both parameters."
120287162,6911,zeule,2017-06-06T07:57:33Z,Why are these two condition pairs not joined under a single `if`?
120287628,6911,zeule,2017-06-06T07:59:55Z,"camelCase, please (`setToEntryDict()`)"
120307178,6911,zeule,2017-06-06T09:38:01Z,isn't `(QString() == QString()) == true` and as such this and the next comparisons are redundant?
120404363,6911,glassez,2017-06-06T16:04:03Z,Use `QSet::fromList()` and `QSet::toList()`.
120405768,6911,glassez,2017-06-06T16:09:14Z,Redundant blank line.
120405800,6911,glassez,2017-06-06T16:09:24Z,Redundant blank line.
120407826,6911,glassez,2017-06-06T16:16:30Z,"It's better not to use such ""silently ignore wrong type"" approach.
Put `Q_ASSERT(entry.type() == Entry::dict_t)` at start of this function.
You should perform checking at caller side (ie where you call `entryDictToSet()`)."
120412911,6911,glassez,2017-06-06T16:37:18Z,Qt containers are implicitly shared so you don't need return const reference. Use `QSet<QString> Session::tags() const`.
120413397,6911,glassez,2017-06-06T16:38:59Z,isEmpty
120414157,6911,glassez,2017-06-06T16:41:47Z,`QSet::remove()` returns `bool` so drop `> 0`.
120414947,6911,glassez,2017-06-06T16:45:05Z,What's the point of these (torrentTagAdded and torrentTagRemoved) signals?
120415740,6911,glassez,2017-06-06T16:48:12Z,setToEntryDict
120416563,6911,glassez,2017-06-06T16:50:53Z,Why dou you store tags as dictionary? Why not as list?
120416734,6911,glassez,2017-06-06T16:51:34Z,"```c++
QSet<QString> TorrentHandle::tags() const
```"
120417022,6911,glassez,2017-06-06T16:52:42Z,Why not `isValidTag()`?
120419672,6911,glassez,2017-06-06T17:03:09Z,Why would you say it's not like the existing names? E.g. `AnyTag`.
120420238,6911,glassez,2017-06-06T17:05:44Z,You should change it with your name/email.
120420511,6911,glassez,2017-06-06T17:06:35Z,"Move this include one line up (before ""base/bittorrent/torrenthandle.h"")."
120420952,6911,glassez,2017-06-06T17:08:29Z,"Fix coding style:
```c++
{
}
```
`{}` is for empty methods (like destructor below)."
120424166,6911,glassez,2017-06-06T17:21:53Z,"You should check invariant here.
Use `Q_ASSERT(m_torrentsCount >= 0);`"
120424341,6911,glassez,2017-06-06T17:22:29Z,Or `Q_ASSERT(m_torrentsCount > 0);` at method start.
120424594,6911,glassez,2017-06-06T17:23:25Z,Please use Qt5 connect syntax in new code.
120424926,6911,glassez,2017-06-06T17:24:38Z,"In QtCreator you can use ""Refactor -> Convert connect() to Qt 5 Style""."
120425215,6911,glassez,2017-06-06T17:25:44Z,Fix variable name according to qBittorrent coding style: `m_tagItems`.
120426664,6911,glassez,2017-06-06T17:31:14Z,"Use either
```c++
if (index.column() == 0) {
    if (role == Qt::DecorationRole)
        return ...;
     if (role == Qt::DisplayRole)
        return ...;
     if (role == Qt::UserRole)
        return ...;
}
```
or
```c++
if (index.column() != 0) return QVariant();
```"
120427031,6911,glassez,2017-06-06T17:32:48Z,`m_tagRows`
120427616,6911,glassez,2017-06-06T17:34:52Z,Check for item existence before!
120428658,6911,glassez,2017-06-06T17:39:02Z,`QString TagFilterModel::getSpecialAllTag()`
120435045,6911,glassez,2017-06-06T18:02:30Z,Why do you use pointers for AL_TAG and UNTAGGED_TAG?
120435483,6911,glassez,2017-06-06T18:03:55Z,"IIRC, `BitTorrent::Session::isValidTag()` returns **true** for both AL_TAG and UNTAGGED_TAG."
120435756,6911,glassez,2017-06-06T18:04:51Z,untaggedCount
120435890,6911,glassez,2017-06-06T18:05:21Z,`[](Torrent *torrent)`
120436152,6911,glassez,2017-06-06T18:06:31Z,`Torrent *torrent`
120437204,6911,glassez,2017-06-06T18:10:27Z,"```c++
if (item)
    items.push_back(item);
```"
120438021,6911,glassez,2017-06-06T18:13:05Z,Move methods at top of fields.
120438741,6911,glassez,2017-06-06T18:15:01Z,Isn't this method redundant? `QMap::value` does the same.
120517572,6911,tgregerson,2017-06-07T01:35:09Z,Done.
120517580,6911,tgregerson,2017-06-07T01:35:15Z,Done.
120517610,6911,tgregerson,2017-06-07T01:35:34Z,"Done. FYI, this line was inserted by uncrustify, so the script may need fixing."
120517615,6911,tgregerson,2017-06-07T01:35:39Z,Done. Again uncrustify.
120517626,6911,tgregerson,2017-06-07T01:35:48Z,Thanks for pointing that out. I read up on Qt's containers after reading your comments.
120517630,6911,tgregerson,2017-06-07T01:35:52Z,isValidTag() is fine. Done.
120517640,6911,tgregerson,2017-06-07T01:35:59Z,Done.
120517655,6911,tgregerson,2017-06-07T01:36:12Z,"The tag filter has a special ""Untagged"" filter for torrents that have 0 tags assigned to them. Any time you add a tag to a torrent that was previously Untagged, you need to remove it from the that filter. Any time you remove the last tag from a torrent, you need to add it to that filter. This is why a count of the number of tags is passed with the signal."
120517682,6911,tgregerson,2017-06-07T01:36:29Z,Dictionary keys seemed more semantically similar to a set. Not a strong preference though. It would be fine to switch it to a list if that's what you want.
120517701,6911,tgregerson,2017-06-07T01:36:40Z,Done
120517714,6911,tgregerson,2017-06-07T01:36:46Z,Done
120518046,6911,tgregerson,2017-06-07T01:40:39Z,"Yeah, I went back and forth on whether to call it AnyTag. This issue is that what these things functionally mean is ""select all torrents regardless of hash / category / tag"".

AnyHash is an accurate name because all torrents have a hash.
AnyTag is not accurate because not all torrents have tags. Thus this filter would also include torrents that do not have ""any tag"".

Perhaps it would be better if they were all changed to *FilteringDisabled to be consistent."
120518060,6911,tgregerson,2017-06-07T01:40:48Z,Done.
120518069,6911,tgregerson,2017-06-07T01:40:54Z,Done
120518082,6911,tgregerson,2017-06-07T01:40:59Z,Done.
120518091,6911,tgregerson,2017-06-07T01:41:05Z,Done
120518098,6911,tgregerson,2017-06-07T01:41:09Z,Done.
120518107,6911,tgregerson,2017-06-07T01:41:14Z,Done
120518123,6911,tgregerson,2017-06-07T01:41:18Z,Done.
120518147,6911,tgregerson,2017-06-07T01:41:22Z,Done.
120518155,6911,tgregerson,2017-06-07T01:41:26Z,Done.
120518165,6911,tgregerson,2017-06-07T01:41:34Z,Done.
120518181,6911,tgregerson,2017-06-07T01:41:47Z,"This is a design pattern for safely using objects with static storage duration. Allocating them inside a function ensures thread-safe initialization with well-defined order. By allocating them with new and never destroying them (hence the pointers), you avoid potential race conditions caused by the fact that the C++ compiler only provides weak guarantees on destructor ordering for static objects.

There is no specific issue with this code that requires it, it's just good general practice to avoid bugs being introduced later.

You are right about isValidTag - good catch. It was missing a call to trimmed() on the string to catch whitespace-only tags."
120518211,6911,tgregerson,2017-06-07T01:42:11Z,Done.
120518243,6911,tgregerson,2017-06-07T01:42:35Z,Done.
120518248,6911,tgregerson,2017-06-07T01:42:38Z,Done.
120518264,6911,tgregerson,2017-06-07T01:42:49Z,"It's probably worth keeping as a convenience wrapper since it gets called a lot, but I used QMap::value to make it a little more succinct."
120518277,6911,tgregerson,2017-06-07T01:42:54Z,Done.
120518284,6911,tgregerson,2017-06-07T01:42:57Z,Done.
120528391,6911,Chocobo1,2017-06-07T03:39:03Z,https://github.com/qbittorrent/qBittorrent/pull/6911#discussion_r120404363
120528822,6911,Chocobo1,2017-06-07T03:43:24Z,"minor thing: `!tag.contains(',')`"
120528880,6911,Chocobo1,2017-06-07T03:44:14Z,`bool hasTag(const QString &tag) const;`
120528974,6911,Chocobo1,2017-06-07T03:45:38Z,"use camel case for `new_tag_count`
and below"
120529148,6911,Chocobo1,2017-06-07T03:47:28Z,you should use camel case for variable names (pls check the whole PR).
120529537,6911,Chocobo1,2017-06-07T03:52:02Z,"I would prefer doing checks in 2 steps:
```c++
if (!Session::isValidTag(tag))
    return false;

if (!hasTag(tag)) {
}

return false;
```"
120530323,6911,Chocobo1,2017-06-07T04:01:32Z,pls move to below of `TORRENT_ADDED_NOTIFICATIONS`
120530472,6911,Chocobo1,2017-06-07T04:03:46Z,add empty line before and after 
120530500,6911,Chocobo1,2017-06-07T04:04:08Z,add empty line before and after if you want.
120530765,6911,Chocobo1,2017-06-07T04:07:47Z,`QStringList::join`?
120530873,6911,Chocobo1,2017-06-07T04:09:29Z,"pls use Qt5 connect syntax, everywhere pls."
120531078,6911,Chocobo1,2017-06-07T04:12:10Z,"~~you can omit this last parameter.~~
Update: don't change it"
120531152,6911,Chocobo1,2017-06-07T04:13:13Z,"combine
```c++
QMessageBox::StandardButton response = QMessageBox::question( //...
```
and split line if too long"
120531330,6911,Chocobo1,2017-06-07T04:15:44Z,"no need for `pref`, pls inline"
120531662,6911,Chocobo1,2017-06-07T04:19:45Z,"`tr(dialog_title.toStdString().c_str())` this is not translatable.
and why not just use `dialog_title` here?"
120531726,6911,Chocobo1,2017-06-07T04:20:27Z,`bool ok = false;`
120531809,6911,Chocobo1,2017-06-07T04:21:37Z,pls give a default value 
120531954,6911,Chocobo1,2017-06-07T04:23:28Z,"`tr(error.toStdString().c_str())` won't work, use e.g.
`tr(""abc %1 %2"").arg(""first"").arg(""second"")`"
120532088,6911,Chocobo1,2017-06-07T04:25:00Z,"also, I would prefer `while () {}` if possible."
120562150,6911,glassez,2017-06-07T08:21:16Z,"The interface of the object should be meaningful regardless of who uses it and how. In your case, the Session ""says"": my torrent added (removed) tag, but does not indicate on this torrent. Look at other similar signals and do your same. Besides, you must omit ""new tag count"" parameter, because the observer can obtain it from the torrent itself (`torrent->tags().count()`)."
120562627,6911,glassez,2017-06-07T08:23:39Z,"@tgregerson, I hope I don't need to comment all points with same issues. If I comment something you should deal with other similar code too."
120562876,6911,glassez,2017-06-07T08:24:53Z,"And it would be better to enclose this expression:
```c++
return (!tag.trimmed().isEmpty() && !tag.contains("",""));
```"
120563143,6911,glassez,2017-06-07T08:26:16Z,"As I said above it should be changed to `void handleTorrentTagAdded(TorrentHandle *const torrent, const QString &tag)`."
120564222,6911,glassez,2017-06-07T08:31:41Z,">It would be fine to switch it to a list

Please do it. I don't see any serious reasons not to."
120587708,6911,glassez,2017-06-07T10:21:48Z,">This issue is that what these things functionally mean is ""select all torrents regardless of hash / category / tag"".

In other words it means ""filter accepts torrents with any hash/category/tag"" (""any tag"" means any tag or any set of tag or no tag, there is nothing wrong) so current names are valid."
120588599,6911,glassez,2017-06-07T10:26:12Z,Shouldn't we have a more strict rule for tags? I would allow only alphanumeric characters and perhaps spaces. Also I would limit the maximum length of the tag.
120687412,6911,glassez,2017-06-07T17:07:48Z,No. QSet::fromList is shorter.
120687680,6911,glassez,2017-06-07T17:08:51Z,No. QSet::toList is shorter.
120687763,6911,zeule,2017-06-07T17:09:14Z,I forgot to remove outdated comments :(
120688541,6911,glassez,2017-06-07T17:12:24Z,"See comment in the code above. The problem is `QString() == QString("""")` is true."
120784873,6911,tgregerson,2017-06-08T01:59:05Z,"Yeah, that makes sense. Done."
120784954,6911,tgregerson,2017-06-08T01:59:51Z,"I switched it back to AnyTag and added a comment explaining that ""any"" means any permutation rather than any individual item."
120785004,6911,tgregerson,2017-06-08T02:00:24Z,"I appreciate your patience, and apologize to the reviewers for not catching more of these minor style issues before sending the PR. I went through the diffs again and tried to apply all the general comments. Sorry if I have missed anything."
120785065,6911,tgregerson,2017-06-08T02:01:01Z,"String-to-char: Done.

Curious, why do you prefer wrapping the return statement?

About strict tags, I would really prefer not restricting characters too much. When using similar systems in other torrent clients, I have often found it useful to be able to include non-alphanum symbols. Just as one example, there is a band named ""!!!"". I can see the motivation for restricting the maximum length because super long tags could cause issues with the UI. Do you have a specific value in mind? I don't see any limit on category lengths, but maybe I am missing it."
120785088,6911,tgregerson,2017-06-08T02:01:11Z,Done
120785102,6911,tgregerson,2017-06-08T02:01:23Z,Fixed as above.
120785206,6911,tgregerson,2017-06-08T02:02:27Z,"Yeah, sorry for making you guys point this minor style guide stuff out. I have to use the other style all day at work, so it is a battle against my instincts."
120785213,6911,tgregerson,2017-06-08T02:02:32Z,Done.
120785229,6911,tgregerson,2017-06-08T02:02:38Z,Done.
120785239,6911,tgregerson,2017-06-08T02:02:43Z,Done.
120785254,6911,tgregerson,2017-06-08T02:02:48Z,Done.
120785264,6911,tgregerson,2017-06-08T02:02:52Z,Good call.
120785270,6911,tgregerson,2017-06-08T02:03:01Z,I figured consistent syntax should be used within a file. I went ahead and ported all the old code's calls to Qt5 as well so the file would be consistent.
120785291,6911,tgregerson,2017-06-08T02:03:11Z,Done
120785300,6911,tgregerson,2017-06-08T02:03:17Z,Done.
120785310,6911,tgregerson,2017-06-08T02:03:24Z,I moved the tr()'s to the call sites. There are actually only two possible values for the title.
120785327,6911,tgregerson,2017-06-08T02:03:32Z,Done
120785336,6911,tgregerson,2017-06-08T02:03:37Z,Done.
120785342,6911,tgregerson,2017-06-08T02:03:42Z,Done.
120785350,6911,tgregerson,2017-06-08T02:03:49Z,No problem.
120785377,6911,tgregerson,2017-06-08T02:04:03Z,Done.
120785390,6911,tgregerson,2017-06-08T02:04:10Z,Done.
120785412,6911,tgregerson,2017-06-08T02:04:16Z,Rendered obsolete.
120786517,6911,tgregerson,2017-06-08T02:14:57Z,"It needs to be separate because there are 3 different cases here:
- Both torrent and session have the tag already (do nothing).
- The session has the tag but the torrent doesn't (add the tag to the torrent).
- Neither the session nor the torrent has the tag (add the tag to both of them).

...and I have actually split these conditionals up further at the request of another review comment."
120786631,6911,tgregerson,2017-06-08T02:15:58Z,Done.
121074241,6911,zeule,2017-06-09T08:30:34Z,Redundant variable.
121074539,6911,zeule,2017-06-09T08:32:28Z,"You might want to shorten this into a single `return` statement:
```c++
return entry ? entryListToSetImpl(*entry) : {};
```"
121074835,6911,zeule,2017-06-09T08:34:10Z,"You might want to shorten this into a single statement:
```c++
return isValidTag(tag) ? m_tags.contains(tag) : false;
```"
121075321,6911,zeule,2017-06-09T08:36:37Z,Can be shortened to a single `return` statement.
121115770,6911,zeule,2017-06-09T12:40:16Z,"I don't see any sense in keeping twice the data for two special cases. IMO, a function `QString tagDisplayName(const QString &tag)` would be a better choice."
121116045,6911,zeule,2017-06-09T12:41:49Z,Unneeded line break.
121118559,6911,zeule,2017-06-09T12:53:58Z,"Plasma icons themes contain special icons for tags. It might make sense to use them here (optionally). For example:
```c++
return GuiIconProvider::instance()->getIcon(""tag-folder"", ""inode-directory"");
```"
121119372,6911,zeule,2017-06-09T12:57:59Z,You do search second time here (the first was two lines above).
121119437,6911,zeule,2017-06-09T12:58:20Z,Same here (search twice for the same item).
121119513,6911,zeule,2017-06-09T12:58:41Z,... and here
121119787,6911,zeule,2017-06-09T13:00:11Z,Why pointer?
121120034,6911,zeule,2017-06-09T13:01:32Z,Why not `using BitTorrent::TorrentHandle`? Why did you change the name?
121120610,6911,zeule,2017-06-09T13:04:29Z,And if `item == nullptr` what does it mean? Dis-synchronization between the model and actual tags? Shouldn't it be reported to log or in another way?
121120992,6911,zeule,2017-06-09T13:06:43Z,"Questionable decision, IMO."
121125841,6911,zeule,2017-06-09T13:29:18Z,"move comma to the previous line, please."
121126139,6911,zeule,2017-06-09T13:30:39Z,"`getIcon(""tag-new"", ""list-add"")`"
121126277,6911,zeule,2017-06-09T13:31:19Z,"`getIcon(""tag-delete"", ""list-remove"")`"
121126537,6911,zeule,2017-06-09T13:32:27Z,Maybe it would be better to show this action disabled? For consistency.
121142932,6911,zeule,2017-06-09T14:39:59Z,"Move comma to the previous line, please."
121144262,6911,zeule,2017-06-09T14:45:04Z,"The action text is not consistent with the two actions above. Consider removing "" tags"" from those two actions. Also consider ""tag-add"" and ""tag-delete"" icons, please."
121174494,6911,glassez,2017-06-09T16:58:10Z,"This is a subjective opinion (I don't remember that we had something about this in the coding style, though there is something similar in the initialization list of constructors). Personally last time I prefer to start all line breaks from the operator or comma."
121176350,6911,glassez,2017-06-09T17:07:08Z,"IIRC, this is common behavior of all torrent filter widgets. It looks like one widget composed of several full-sized subwidgets."
121179980,6911,zeule,2017-06-09T17:24:29Z,"Right, but (a) tag list can become long and (b) user might want to correlate tags with trackers and categories."
121183509,6911,glassez,2017-06-09T17:42:04Z,"Maybe this is really not appropriate place for tags widget?

I still think we should leave basic tags support in this PR and start any advanced investigations later."
121194691,6911,zeule,2017-06-09T18:34:36Z,OK.
121551284,6911,tgregerson,2017-06-12T23:23:41Z,Done.
121551297,6911,tgregerson,2017-06-12T23:23:47Z,"Done, but I had to replace the braces with a direct call to the container constructor, because the compiler cannot deduce the correct type from braces in a conditional."
121551309,6911,tgregerson,2017-06-12T23:23:52Z,Done.
121551315,6911,tgregerson,2017-06-12T23:23:56Z,Done.
121551323,6911,tgregerson,2017-06-12T23:24:01Z,Done.
121551348,6911,tgregerson,2017-06-12T23:24:05Z,Done.
121551541,6911,tgregerson,2017-06-12T23:25:31Z,"OK. Maybe it's because I don't have any additional themes installed on my development machine, but it looks the same as before."
121551585,6911,tgregerson,2017-06-12T23:25:50Z,"Yes, this is as intended. They are searching for different items. The first one searches for the special ""Untagged"" entry, the second one searches for the tag that was just added."
121551602,6911,tgregerson,2017-06-12T23:25:59Z,As above.
121551622,6911,tgregerson,2017-06-12T23:26:08Z,As above.
121551667,6911,tgregerson,2017-06-12T23:26:25Z,"https://isocpp.org/wiki/faq/ctors#construct-on-first-use-v2

This is the second question I've gotten on this, so if people feel this idiom is too obscure and hurts readability, we can get rid of the static and just create a new string object on every call."
121551723,6911,tgregerson,2017-06-12T23:26:44Z,"IIRC, it was like this in the code I copied over from the CategoryFilterModel. If you don't like it, I'm happy to change it."
121551747,6911,tgregerson,2017-06-12T23:26:59Z,"Yes, that would indicate some sort of internal inconsistency. I added a QWarning."
121551840,6911,tgregerson,2017-06-12T23:27:38Z,"The leading comma seems like a somewhat unusual style to me too, but AFAICT, it seems like a common thing to do in the code I've seen. I am just trying to stay consistent. If there is a style recommendation one way or another, I'm happy to follow it."
121551873,6911,tgregerson,2017-06-12T23:27:59Z,Done.
121551881,6911,tgregerson,2017-06-12T23:28:03Z,"I was going for consistency with Categories, which also omits the ""Remove Category"" option from All / Uncategorized. So if one is changed, we should probably change both."
121551894,6911,tgregerson,2017-06-12T23:28:07Z,Done.
121551911,6911,tgregerson,2017-06-12T23:28:17Z,Done.
121686869,6911,glassez,2017-06-13T14:02:59Z,"Why not 
```c++
m_storedTags = m_tags.toList();
```
as you did below?"
121689847,6911,glassez,2017-06-13T14:13:16Z,"IMO, check for valid tag here (and in `Session::hasTag()` too) is overkill."
121692942,6911,glassez,2017-06-13T14:23:14Z,">>Unneeded line break.
>
>Done.

Done?..
It's still here!"
121699582,6911,glassez,2017-06-13T14:44:31Z,"These two functions do not require access to private members of the TagFilterModel class, then why make them class methods? Why not just put them in .cpp?"
121700345,6911,glassez,2017-06-13T14:46:48Z,No `else` branch if `if` ends with `return`.
121700902,6911,glassez,2017-06-13T14:48:41Z,"parent cannot be valid in list model index, isn't it? So we don't need to check it."
121703395,6911,glassez,2017-06-13T14:56:58Z,Invalid indentation for brace enclosed case. See Coding guidelines.
121703470,6911,glassez,2017-06-13T14:57:10Z,Invalid indentation for brace enclosed case. See Coding guidelines.
121704695,6911,glassez,2017-06-13T15:01:06Z,Do you really need the casts below? Has TransferListFiltersWidget overloads for `tracker*` signals?
122320548,6911,tgregerson,2017-06-15T21:45:58Z,Done.
122321719,6911,tgregerson,2017-06-15T21:52:08Z,There's no particular reason for them to be member functions. I moved them to anonymous namespace in the cpp.
122321747,6911,tgregerson,2017-06-15T21:52:18Z,Done
122321762,6911,tgregerson,2017-06-15T21:52:23Z,Done.
122321785,6911,tgregerson,2017-06-15T21:52:30Z,Fixed.
122321815,6911,tgregerson,2017-06-15T21:52:34Z,Fixed
122321827,6911,tgregerson,2017-06-15T21:52:39Z,"Yes, it does not compile without the cast. Each signal also has a method with the same name and different arguments that it uses to emit the signal. Apparently connect() cannot use the fact that only one is declared as a signal to disambiguate."
122321859,6911,tgregerson,2017-06-15T21:52:48Z,Removed.
122401532,6911,glassez,2017-06-16T09:25:10Z,"Now you have wrong indentation inside this anonymous namespace (and, IMO, redundant leading and trailing blank lines)."
122485199,6911,glassez,2017-06-16T16:47:40Z,"The my main objections are related to `setData()` method:
1. I don't know why `Qt::DisplayRole` expected here (this is very old code) although `Qt::EditRole` should be used for simple editing purposes.
2. I do not see the point of supporting `setData()` at all, because we do not use the standard Qt Model/View editing features. We can refer directly to underlying model from the caller code. It will also spare us from having to convert data to/from QVariant.
I'm not asking you to edit existing code, but you should get rid of your code here."
122496359,6911,zeule,2017-06-16T17:44:29Z,This member can be declared as `const`.
122496909,6911,zeule,2017-06-16T17:47:00Z,"Don't understand why this one is needed. If you keep it, consider declaring is as `= default` instead of providing an empty body. "
122536609,6911,tgregerson,2017-06-16T21:24:05Z,"Are there guidelines about blank lines somewhere? One of the previous reviews kept asking me to add more, so I'm having trouble figuring out what the expectations are."
122536631,6911,tgregerson,2017-06-16T21:24:11Z,"OK, I removed the indirection to setData for the tags code and left the old code alone."
122568338,6911,glassez,2017-06-17T13:03:00Z,"Here we are dealing with a known valid indices, isn't it? Therefore, we assume that each of them corresponds to a valid torrent unless some errors in code. So we should use `Q_ASSERT(torrent);` instead of `if-else`."
122568432,6911,glassez,2017-06-17T13:07:56Z,"Please use the same coding style rules for function type as for function declaration, type should be separated by space: `void (BitTorrent::TorrentHandle *const)`.
Also in header."
122568965,6911,tgregerson,2017-06-17T13:40:48Z,Done.
122568968,6911,tgregerson,2017-06-17T13:40:55Z,Done.
122569231,6911,Chocobo1,2017-06-17T13:58:21Z,`const QString &tag`?
122569242,6911,Chocobo1,2017-06-17T13:59:36Z,I would move this comment to cpp file
122569499,6911,Chocobo1,2017-06-17T14:17:44Z,pls add parentheses around `operator==` parameters
122569640,6911,Chocobo1,2017-06-17T14:24:24Z,"since line 613 doesn't have curly braces, you should remove it here."
122569693,6911,Chocobo1,2017-06-17T14:27:55Z,I would use a `switch (){}` here
122569710,6911,Chocobo1,2017-06-17T14:28:56Z,remove `QStringLiteral`?
122569815,6911,Chocobo1,2017-06-17T14:33:47Z,`bool Session::isValidTag(const QString &tag) const`
122569896,6911,Chocobo1,2017-06-17T14:38:21Z,I would use `emplace_back()` if possible.
122569958,6911,Chocobo1,2017-06-17T14:42:03Z,"this is very minor, do you mind add
```
items.reserve(tags.size());
```"
122570496,6911,glassez,2017-06-17T15:09:12Z,Then replace it with `QLatin1String`.
122570534,6911,glassez,2017-06-17T15:11:01Z,"No, it's static."
122838698,6911,tgregerson,2017-06-19T22:15:36Z,Done
122838716,6911,tgregerson,2017-06-19T22:15:41Z,Probably it can just be removed since this is a private method.
122838728,6911,tgregerson,2017-06-19T22:15:46Z,Done
122838745,6911,tgregerson,2017-06-19T22:15:51Z,Done
122838759,6911,tgregerson,2017-06-19T22:15:55Z,Done.
122838789,6911,tgregerson,2017-06-19T22:16:05Z,Done.
122838809,6911,tgregerson,2017-06-19T22:16:11Z,Done.
122838839,6911,tgregerson,2017-06-19T22:16:15Z,Done.
123005493,6911,zeule,2017-06-20T15:13:31Z,"Don't understand why this list is needed.

UPDATE: Don't understand why this list of strings is needed."
123119954,6911,tgregerson,2017-06-20T23:15:33Z,Deleted.
123119981,6911,tgregerson,2017-06-20T23:15:44Z,Done.
123119992,6911,tgregerson,2017-06-20T23:15:49Z,The order of the strings corresponds to their row in the model. So it allows lookup of model row by tag and vice versa.
123121381,6911,zeule,2017-06-20T23:25:51Z,But why strings? Why not  list of `const TagModelItem*`? I'm continuing to ask why do you search for every item twice.
123125249,6911,tgregerson,2017-06-20T23:54:59Z,"Once I did a clean build, I noticed that this change caused my icons to disappear.

![tags-ui-update](https://user-images.githubusercontent.com/6699718/27360702-5aa01fa0-55e8-11e7-831b-3bfedb7d1cd9.png)

This is with a stock Linux Mint 18.1. I am not sure why it is not using the 'fallback' icon if the tags icons are not there. But I decided to revert back to the original icons I was using to avoid any problems."
123129687,6911,tgregerson,2017-06-21T00:30:30Z,"Sure, that is fine too. Done."
123217387,6911,tgregerson,2017-06-21T11:00:45Z,"No, it was committed, but I just now reverted the change. When I was doing final checks of the GUI, I noticed that this had caused icons to disappear:

![tags-ui-update](https://user-images.githubusercontent.com/6699718/27380865-61603cb8-5646-11e7-9805-ba7e9b566f13.png)

This is on my test system, which is a stock Linux Mint 18.1 (no additional icon packs installed). I'm surprised, since the icon provider was supposed to fall back to the original icon if the tag-specific icon was not present, but that doesn't seem to work."
123449447,6911,zeule,2017-06-22T08:30:47Z,"If you decided to drop that tag_name -> item dictionary, there is no need in pointer here, a straightforward list `QList<TagModelItem> m_tagItems;` should be better?"
123658449,6911,tgregerson,2017-06-23T01:53:22Z,Done.
123702502,6911,zeule,2017-06-23T09:00:23Z,Thanks!
123786505,6911,glassez,2017-06-23T16:04:50Z,"@evsh, what improvements do you expect from these changes? Or you again driven by the fear of pointers? :)"
123789035,6911,zeule,2017-06-23T16:17:52Z,Again double lookup. Consider `void  removeFromModel(const QModelIndex& index);` instead
123789581,6911,zeule,2017-06-23T16:20:27Z,Explicit destructor is unneeded now. 
123790257,6911,glassez,2017-06-23T16:23:56Z,Or `void removeFromModel(int row);`
123790494,6911,zeule,2017-06-23T16:25:04Z,"@glassez, we got less complex code already. And yes, I avoid pointers when possible not only because C++ provides better ways to manage objects (but that's the main reason), but also because of data locality, which is important for qBt too, not because it needs all the performance of the CPU cache, but because programs like this one are active in background and provokes cache misses for other processes."
123790819,6911,glassez,2017-06-23T16:26:39Z,Fix coding style!
123792205,6911,glassez,2017-06-23T16:33:51Z,"Then we should seriously consider the need to avoid using QList where possible.
>`QVector` should be your default first choice. `QVector<T>` will usually give better performance than `QList<T>`, because `QVector<T>` always stores its items sequentially in memory, where `QList<T>` will allocate its items on the heap unless `sizeof(T) <= sizeof(void*)` and `T` has been declared to be either a `Q_MOVABLE_TYPE` or a `Q_PRIMITIVE_TYPE` using `Q_DECLARE_TYPEINFO`.

See http://doc.qt.io/qt-5/qlist.html#details for more info."
123794238,6911,tgregerson,2017-06-23T16:44:25Z,It is needed as a consequence of your request to store TagModelItem as objects instead of pointers. The alternative is moving TagModelItem's declaration to the header rather than forward-declaring it.
123795505,6911,zeule,2017-06-23T16:50:21Z,"Right, pardon me. But nevertheless why don't you save a couple of lines and declarre it as default then? "
123849861,6911,tgregerson,2017-06-23T21:40:33Z,Done.
123849889,6911,tgregerson,2017-06-23T21:40:43Z,Done.
123849934,6911,tgregerson,2017-06-23T21:40:57Z,Done.
123870045,6911,glassez,2017-06-24T04:19:57Z,Why we need to search for special items? They always have const indexes.
123870089,6911,glassez,2017-06-24T04:22:00Z,m_tagItems[1]
123870121,6911,glassez,2017-06-24T04:23:30Z,Or just add two const methods returning these two special items.
123870132,6911,glassez,2017-06-24T04:24:17Z,m_tagItems[0]
123870139,6911,glassez,2017-06-24T04:24:40Z,m_tagItems[1]
123870146,6911,glassez,2017-06-24T04:25:04Z,m_tagItems[0]
123870151,6911,glassez,2017-06-24T04:25:14Z,m_tagItems[1]
123880525,6911,tgregerson,2017-06-24T16:29:39Z,"Methods aren't const, since they return non-const member pointers, but otherwise done (here and elsewhere)."
123413260,6779,glassez,2017-06-22T03:12:35Z,Shouldn't be OR in this place?
123413432,6779,glassez,2017-06-22T03:14:44Z,There are many conditions here so it would be better to have two helper functions: isLoopbackAddress and isLANAddress.
123510924,6779,Piccirello,2017-06-22T13:35:07Z,"> Shouldn't be OR in this place?

The LAN conditionals return true if the address isn't localhost OR if local auth is enabled. Therefore if an OR is used and a user connects with a LAN ip, the function would return true regardless of the LAN conditionals. 

That being said, development is still underway, so don't start picking apart my changes just yet ;) 

Once I'm finished I'll squash the changes and update this PR."
123891138,6779,Chocobo1,2017-06-25T06:08:24Z,I would prefer `const QHostAddress &clientAddress`
123891141,6779,Chocobo1,2017-06-25T06:08:29Z,I would prefer `const QHostAddress &clientAddress`
123891279,6779,Chocobo1,2017-06-25T06:18:30Z,These 2 can move to `src\base\utils\net` if you want
123891344,6779,glassez,2017-06-25T06:24:15Z,At least it shouldn't be member of AbstractWebApplication.
123891372,6779,Chocobo1,2017-06-25T06:26:32Z,"please use:
```c++
if ()
else if ()
else
```"
123891410,6779,glassez,2017-06-25T06:28:56Z,"No. Don't do it!
It is considered ""bad form"" to use `else` after `return`."
123891468,6779,Chocobo1,2017-06-25T06:33:09Z,"OK, but at least it should be 
```c++
if ()
  return ...
else if ()
  return ...
return true;
```
to save 1 comparison."
123891802,6779,glassez,2017-06-25T06:54:04Z,You are again mistaken. It saves nothing.
123891834,6779,glassez,2017-06-25T06:56:23Z,"The second comparison will be executed only if the first returns false, because otherwise we will just return from the function."
123891861,6779,Chocobo1,2017-06-25T06:57:09Z,`0a00`
123891986,6779,Chocobo1,2017-06-25T07:04:18Z,">You are again mistaken. It saves nothing.

You're right. I my head was obsessed with something else."
123892025,6779,Piccirello,2017-06-25T07:06:01Z,Done.
123892026,6779,Piccirello,2017-06-25T07:06:04Z,Done.
123892028,6779,Piccirello,2017-06-25T07:06:08Z,Done.
123892084,6779,Piccirello,2017-06-25T07:08:50Z,[0a00](https://www.ultratools.com/tools/ipv6CIDRToRangeResult?ipAddress=%3A%3Affff%3A0a00%3A0%2F104) and [a00](https://www.ultratools.com/tools/ipv6CIDRToRangeResult?ipAddress=%3A%3Affff%3Aa00%3A0%2F104) are equivalent.
123892118,6779,Chocobo1,2017-06-25T07:10:51Z,"use `isInSubnet(const QHostAddress &subnet, int netmask)`?
i.e. `isInSubnet(QLatin1String(""10.0.0.0""), 8)`
and below"
123892133,6779,Chocobo1,2017-06-25T07:11:43Z,"I know, the suggestion is for clarity."
123892143,6779,Piccirello,2017-06-25T07:12:22Z,Why? They are equivalent.
123892231,6779,Chocobo1,2017-06-25T07:19:11Z,">They are equivalent.

to save 1 function call in our code?"
123892275,6779,Chocobo1,2017-06-25T07:21:48Z,"`clientAddress` -> `addr` or some other name
there is no concept of ""client"" in these 2 helper functions"
123892515,6779,Piccirello,2017-06-25T07:36:13Z,"> isInSubnet(QLatin1String(""10.0.0.0""), 8)

What's the purpose of using QLatin1String in this instance? It's not currently used for creating the ipv6 mapped 127.0.0.1 address."
123892601,6779,Piccirello,2017-06-25T07:41:46Z,Done.
123892617,6779,Chocobo1,2017-06-25T07:43:00Z,"there are non-trivial computation in this func, maybe it make sense to add the following?
```c++
if (clientAddress.isInSubnet(QLatin1String(""0.0.0.0""), 0)) {
  // ipv4
}
else {
  // ipv6
}
```

UPDATE: example updated."
123892750,6779,Chocobo1,2017-06-25T07:50:47Z,">What's the purpose of using QLatin1String in this instance? 

QHostAddress is constructed via `QHostAddress(const QString &address)` and then from http://doc.qt.io/qt-5/qlatin1string.html#details :
>This is a bit longer to type, but it provides exactly the same benefits as the first version of the code, and is faster than converting the Latin-1 strings using QString::fromLatin1()."
123892762,6779,Chocobo1,2017-06-25T07:51:46Z,example updated
123893183,6779,Piccirello,2017-06-25T08:21:30Z,Done.
123893290,6779,Piccirello,2017-06-25T08:28:14Z,Done.
123893531,6779,Chocobo1,2017-06-25T08:42:38Z,"we use implicit type conversion in our codebase, so I'll say there is no need for explicit `QHostAddress()` construction here."
123893749,6779,Piccirello,2017-06-25T08:54:11Z,"I can't compile without explicitly passing `QHostAddress`

```
base/utils/net.cpp:51:60: error: no matching function for call to ‘QHostAddress::isInSubnet(QLatin1String, int) const’
             if (addr.isInSubnet(QLatin1String(""0.0.0.0""), 0)) {
                                                            ^
base/utils/net.cpp:51:60: note: candidates are:
In file included from /opt/qt55/include/QtNetwork/QHostAddress:1:0,
                 from base/utils/net.cpp:30:
/opt/qt55/include/QtNetwork/qhostaddress.h:116:10: note: bool QHostAddress::isInSubnet(const QHostAddress&, int) const
     bool isInSubnet(const QHostAddress &subnet, int netmask) const;
          ^
/opt/qt55/include/QtNetwork/qhostaddress.h:116:10: note:   no known conversion for argument 1 from ‘QLatin1String’ to ‘const QHostAddress&’
/opt/qt55/include/QtNetwork/qhostaddress.h:117:10: note: bool QHostAddress::isInSubnet(const QPair<QHostAddress, int>&) const
     bool isInSubnet(const QPair<QHostAddress, int> &subnet) const;
          ^
/opt/qt55/include/QtNetwork/qhostaddress.h:117:10: note:   candidate expects 1 argument, 2 provided
base/utils/net.cpp:62:9: warning: control reaches end of non-void function [-Wreturn-type]
         }
         ^
```"
123893798,6779,Chocobo1,2017-06-25T08:56:31Z,"hmmm, OK then."
123895124,6779,glassez,2017-06-25T10:12:44Z,Please drop `else` branch and place return statement outside it.
123895134,6779,glassez,2017-06-25T10:13:45Z,">Done.

I still see ""clientAddress""..."
123895162,6779,glassez,2017-06-25T10:15:30Z,Move this include to .cpp
123899738,6779,Chocobo1,2017-06-25T14:13:20Z,the indention looks wrong to me.
123907984,6779,Piccirello,2017-06-25T20:18:46Z,I used the same indentation as the [original](https://github.com/qbittorrent/qBittorrent/blob/master/src/webui/abstractwebapplication.cpp#L310) isAuthNeeded() implementation.
123912548,6779,Chocobo1,2017-06-25T23:58:11Z,"the `}` should have 4 less spaces right?
https://github.com/Piccirello/qBittorrent/blob/ea336e45804229c3cad5b4e82faf4a56e2cc8d21/src/base/utils/net.cpp#L62"
123923362,6779,Piccirello,2017-06-26T03:38:16Z,Good catch.
125306907,6779,Chocobo1,2017-07-03T14:51:57Z,"just stumbled upon this, there is a simpler check for this:
```c++
if (addr.protocol() == QAbstractSocket::IPv4Protocol)
```
http://doc.qt.io/qt-5/qhostaddress.html#protocol

pls test if it works"
125348690,6779,Piccirello,2017-07-03T19:41:35Z,Nice find! Tested and it works 👍 
125364435,6779,zeule,2017-07-03T22:38:30Z,Bypass authentication for clients on LAN?
125364658,6779,zeule,2017-07-03T22:42:09Z,Shouldn't we test that server and client are in the same sub-net?
125369775,6779,Piccirello,2017-07-04T00:13:28Z,"""Bypass authentication for localhost"" is used now. Replace both (for consistency)?"
125370074,6779,Piccirello,2017-07-04T00:18:45Z,"I'm not sold on the benefits of doing so. Reserved local ips aren't routable over the internet anyway, so adding that additional check would break the feature for some client environments."
125397543,6779,Chocobo1,2017-07-04T06:32:29Z,"BTW, maybe changing to `isPrivateAddress` would be more accurate.
"
125430333,6779,Piccirello,2017-07-04T09:34:11Z,Agreed && updated.
125431567,6779,zeule,2017-07-04T09:39:51Z,"> so adding that additional check would break the feature for some client environments. 

As well as now it is unusable for others. For instance, your guesthouse gives IPs from sub-net 10.0.0.0/24. You set up a router in your room and assign to your laptop, phone and tablet IPs from 192.168.0.0/16. But you can't disable authentication for LAN clients, because all the guesthouse will be able to use your qBt instance."
125431954,6779,zeule,2017-07-04T09:41:55Z,"Then both are incorrect, IMO, and have to be corrected."
125439638,6779,Chocobo1,2017-07-04T10:18:23Z,">Shouldn't we test that server and client are in the same sub-net?

I don't think we need this check, different clients in different subnets won't be able to talk to each other directly, well... unless someone explicitly set it up...

>For instance, your guesthouse gives IPs from sub-net 10.0.0.0/24

In this example, I would say if someone on 10.0.0.0/24 is able to connect to 192.168.0.0/16 freely, then that router has serious security flaw (routing table or firewall had been tampered), I don't think is the common case.
"
125440254,6779,zeule,2017-07-04T10:21:09Z,"No, you set up a port forwarding for your qBt, of course, so the router works as expected. "
125443393,6779,zeule,2017-07-04T10:39:16Z,"> …then that router has serious security flaw…

Security flaw is what this PR is going to merge: unlimited access for unknown and uncontrolled hosts for the sake of (imaginary?) convenience. IMO, you should not invent a wheel but implement this in the common way: give user a way to provide a list of sub-nets. Probably with a a button (""Add localhost and LAN addresses"") for a convenience with a message like ""This list is provided for convenience purposes only. Please remove all unneeded addresses"" "
125444576,6779,Chocobo1,2017-07-04T10:46:56Z,">No, you set up a port forwarding for your qBt, of course, so the router works as expected.

I still don't find this scenario make sense, why enable WebUI port forwarding when you don't want outside to access it?

>give user a way to provide a list of sub-nets. 

IIRC, its called access control list (ACL), that would work too."
125444770,6779,zeule,2017-07-04T10:48:13Z,"> I still don't find this scenario make sense, why enable WebUI port forwarding when you don't want outside to access it?

I want to have access from outside, but with authentication."
125446136,6779,zeule,2017-07-04T10:56:58Z,"BTW, if your router does not perform ingress filtering, you will be extremely vulnerable to address spoofing, because any LAN address will bypass authentication. "
125447125,6779,Chocobo1,2017-07-04T11:03:33Z,">I want to have access from outside, but with authentication.

It make sense now, thanks!"
125447767,6779,Piccirello,2017-07-04T11:08:00Z,"> As well as now it is unusable for others. For instance, your guesthouse gives IPs from sub-net 10.0.0.0/24. You set up a router in your room and assign to your laptop, phone and tablet IPs from 192.168.0.0/16. But you can't disable authentication for LAN clients, because all the guesthouse will be able to use your qBt instance.
 
This bypass feature is geared towards convenience. It's up to your network firewall to control what information can pass between subnets. Your host should also be running a firewall with additional rules. Anyone who needs additional control should turn towards one of these proven methods for enforcing network security."
125450543,6779,zeule,2017-07-04T11:25:02Z,@Piccirello: did you read everything written above?
125529128,6779,Piccirello,2017-07-04T20:58:23Z,"> did you read everything written above?

I did, but I think that would make for a bad user experience. As I stated, for finer control this should be handled by a firewall, either at the router or the host."
125529619,6779,zeule,2017-07-04T21:05:43Z,"If you rely on a firewall, why bother with IP addresses at all? In that case a simple option ""Disable authentication"" will be much simpler and clearer."
125529976,6779,Piccirello,2017-07-04T21:11:00Z,"How is the IPv4 handling of this any different than the IPv6 implementation? With IPv6 all private IPs are allowed, including many trillions+ outside of the user's subnet. Once again, private IPs aren't routable over the internet. Even if a router allowed such a packet through, the nature of a TCP connection wouldn't allow the source of the spoofed IP to receive the reply."
125530162,6779,Piccirello,2017-07-04T21:13:42Z,Done.
125813536,6779,Piccirello,2017-07-06T05:25:43Z,"Thinking through this more, the only way I see to solve the IPv6 issue is to implement the ACL you mentioned earlier. I don't think this method will be easy for newbies but for more advanced users it'll be great."
126339541,6779,Piccirello,2017-07-10T05:56:00Z,The updated code has been pushed.
126404658,6779,glassez,2017-07-10T12:16:24Z,Utils shouldn't depend on application preferences!
126405279,6779,glassez,2017-07-10T12:19:52Z,"This ""include"" is in wrong place."
126405438,6779,glassez,2017-07-10T12:20:45Z,Is it valid copyright?
126405788,6779,glassez,2017-07-10T12:22:32Z,Is it valid copyright?
126406178,6779,glassez,2017-07-10T12:24:06Z,We prefer `nullptr` in new code.
126406260,6779,glassez,2017-07-10T12:24:32Z,Invalid comment.
126406565,6779,glassez,2017-07-10T12:25:54Z,`// have to call dialog window`
126409626,6779,zeule,2017-07-10T12:40:30Z,"`getWebUiAuthBypassIPs()`? Also, wouldn't `QPair<QHostAddress, int>` result type be a better choice? Motivation: textual representation (list of strings) is an implementation detail."
126418516,6779,Piccirello,2017-07-10T13:19:43Z,Would you rather the `QStringList` of subnets was explicitly passed to the function as an argument? Or is there another way of accomplishing this without the pref import?
126438487,6779,glassez,2017-07-10T14:32:14Z,"""Module"" header should be the first, then system and Qt headers, then all other application headers (according to Coding Guidelines)."
126440741,6779,zeule,2017-07-10T14:39:29Z,And then what? Parse again a few lines later?
126441706,6779,zeule,2017-07-10T14:42:44Z,"This operation would be simpler with a state-full object:
```c++
class Subnets {
public:
     Subnets(); // loads config
     bool contains(const QHostAddress&) const;
private:
   QVector<QPair<QHostAddress, int>> m_subnets;
};"
126442421,6779,glassez,2017-07-10T14:44:56Z,"Now `isIPInAuthBypassSubnet` function isn't ""utility"" so just move it to AbstractWebApplication (e.g. `AbstractWebApplication::isClientInAuthBypassSubnet()`).
You can, of course, modify this function to turn it in ""utility"" again (ie to get rid from Preferences dependency), but in this case it would be better to have consistent interface (ie, both test address and subnets should have the same format - either QHostAddress or QString)."
126443442,6779,glassez,2017-07-10T14:48:31Z,"@evsh, IMO, it's just moving code from one place to another..."
126444099,6779,Chocobo1,2017-07-10T14:50:38Z,headers should be sorted alphabetically.
126446402,6779,Chocobo1,2017-07-10T14:58:29Z,"the default works as well, pls remove it.
IMO, only property value that is different than the default should be saved, otherwise you won't know if it's really needed.
There is a small arrow on the right side of property setting in Qt Designer, use it to reset to default.
And please recheck all those properties that are explicitly set."
126448436,6779,Chocobo1,2017-07-10T15:05:22Z,`\n`
126449082,6779,Chocobo1,2017-07-10T15:07:27Z,I prefer default off
126452907,6779,Chocobo1,2017-07-10T15:18:25Z,"It might make sense to disable/enable the whitelist button when unchecking/checking the checkbox.

Also after editing the whitelist, the apply button should be enabled if the list has changed."
126523882,6779,zeule,2017-07-10T20:12:24Z,"And aside from any preferences, default values must maintain current behavior."
126697209,6779,glassez,2017-07-11T14:02:13Z,"Once you have decided to sort it, then do it right. Headers should be in alphabetical order within each group so move ""logger.h"" and ""settingsstorage.h"" on top of ""utils/fs.h""."
126697628,6779,glassez,2017-07-11T14:03:41Z,"Remove unneeded space between `>`: `QList<QPair<QHostAddress, int>>` in all your code."
126698087,6779,glassez,2017-07-11T14:05:13Z,You renamed method names to but forgot to rename keys: `AuthBypassIP` -> `AuthBypassSubnets`.
126698561,6779,glassez,2017-07-11T14:06:54Z,"Also this variable is redundant. You can use value(""Preferences/WebUI/AuthBypassIP"").toStringList() in loop condition directly."
126702378,6779,glassez,2017-07-11T14:20:04Z,Why this var is outside the loop?
126702690,6779,glassez,2017-07-11T14:21:06Z,`toUtf8()` is redundant here!
126704187,6779,glassez,2017-07-11T14:25:36Z,Please describe this!
126704752,6779,glassez,2017-07-11T14:27:29Z,"As I asked earlier, please make the interface consistent. Use either QHostAddress or QString in  all of the parameters."
126705389,6779,glassez,2017-07-11T14:29:18Z,"As this function began to have a more General meaning, please change it name accordingly (remove AuthBypass)."
126706436,6779,glassez,2017-07-11T14:32:36Z,No need to declare it outside the loop.
126706931,6779,glassez,2017-07-11T14:34:18Z,Initialize this var.
126707183,6779,glassez,2017-07-11T14:35:15Z,It seems that this branch is not used...
126707695,6779,glassez,2017-07-11T14:36:49Z,"Please add space after `template` keyword: `template <typename T, typename U> struct QPair;`."
126708476,6779,glassez,2017-07-11T14:39:23Z,This var is redundant.
126708540,6779,glassez,2017-07-11T14:39:36Z,Move to the loop.
126709151,6779,glassez,2017-07-11T14:41:37Z,`const auto &i`
126709272,6779,glassez,2017-07-11T14:42:03Z,Redundant variable.
126710553,6779,glassez,2017-07-11T14:45:52Z,"Please add also `Q_DISABLE_COPY(MyClass)` to all your QObject subclasses.
>Instances of subclasses of QObject should not be thought of as values that can be copied or assigned, but as unique identities. This means that when you create your own subclass of QObject (director or indirect), you should not give it a copy constructor or an assignment operator. However, it may not enough to simply omit them from your class, because, if you mistakenly write some code that requires a copy constructor or an assignment operator (it's easy to do), your compiler will thoughtfully create it for you. You must do more."
126711197,6779,glassez,2017-07-11T14:47:39Z,"You can decrease this code:
```c++
IPSubnetWhitelistOptions(this).exec();
```"
126711965,6779,glassez,2017-07-11T14:49:58Z,Redundant var.
126712022,6779,glassez,2017-07-11T14:50:09Z,Move to the loop.
126712391,6779,glassez,2017-07-11T14:51:01Z,Redundant var.
126712756,6779,glassez,2017-07-11T14:52:02Z,Why do you allow two data formats here?
126853518,6779,Piccirello,2017-07-12T02:44:51Z,"> Once you have decided to sort it, then do it right.

You come across as extremely rude. Do you really think I intentionally messed up the order? People make mistakes; you need to act in a way that _encourages_ open source contributions, not in such a way that deters them."
126867241,6779,glassez,2017-07-12T05:33:55Z,I'm sorry if I hurt you. I didn't want to.
127773160,6779,zeule,2017-07-17T17:39:11Z,"I don't understand why is the conversion to UTF-8 needed. Could you explain, please? "
127773513,6779,zeule,2017-07-17T17:40:04Z,The function will be shorter with `std::transform()`.
127884136,6779,glassez,2017-07-18T05:16:50Z,He can't... it just overthinking.
128133903,6779,Piccirello,2017-07-19T01:20:28Z,I don't think it hurts to support multiple input formats.
128134007,6779,Piccirello,2017-07-19T01:21:29Z,This is done for readability. There's no coding guideline on it.
128135918,6779,Piccirello,2017-07-19T01:41:04Z,"I get this error when declaring inside the loop

```
base/preferences.cpp:478:54: error: macro ""Q_FOREACH"" passed 3 arguments, but takes just 2
     foreach (QPair<QHostAddress, int> subnet, subnets)
```"
128136688,6779,Piccirello,2017-07-19T01:48:16Z,Thanks for the reference. I've added it.
128137211,6779,Piccirello,2017-07-19T01:52:53Z,"In the qt5 [source](https://code.woboq.org/qt5/qtbase/src/network/kernel/qhostaddress.cpp.html#1108) `parseSubnet` returns `qMakePair(QHostAddress(), -1)` for invalid subnets."
128149727,6779,Piccirello,2017-07-19T04:18:41Z,I don't follow. Do you mean because of the comment?
128173827,6779,glassez,2017-07-19T07:41:49Z,"Oh, that's right! This is a limitation of Qt `foreach`. But that is no reason to have an extra variable. You can define an alias for this type: `using Subnet = QPair<QHostAddress, int>>`. Or, even better, use C++ range-based `for` (AFAIK, Qt has deprecated its `foreach` now)."
128177030,6779,glassez,2017-07-19T07:57:04Z,">There's no coding guideline on it.

We can't set all the rules verbatim! There are some things in common... for Example, we don't usually put spaces inside the parentheses (in this case, the brackets have similar semantics). At least the brackets here are pairs of things, and they should look flipped relative to their content (i.e. no whitespace after the opening bracket then must not be before the closing).

But if some things not so obvious, we can add some new rules in Coding Guidelines.
>This is done for readability

IMO, this is against the readability."
128177173,6779,glassez,2017-07-19T07:57:46Z,Redundant blank line.
128177431,6779,glassez,2017-07-19T07:58:56Z,Wrong order.
128178402,6779,Chocobo1,2017-07-19T08:04:18Z,">There's no coding guideline on it.

we have uncrustify.cfg that helps more or less."
128179441,6779,glassez,2017-07-19T08:09:34Z,protocolEquivalentAddress is used only when isIPv4MappedAddress is true but here is always false.
136747940,6779,Piccirello,2017-09-04T05:53:03Z,This was a logic bug. Good catch.
136748831,6779,Piccirello,2017-09-04T06:03:53Z,I switched over to using the range-based for.
138982619,6779,zeule,2017-09-14T18:59:01Z,Seems like there is no need in conversion when `addr.isInSubnet(subnet)` returns true.
138983853,6779,zeule,2017-09-14T19:04:46Z,Why not `m_ui->IPSubnetWhitelistButton->setEnabled(checked);`?
138984137,6779,zeule,2017-09-14T19:06:06Z,Bypass authentication for clients in whitelisted IP subnets?
139165131,6779,zeule,2017-09-15T14:33:46Z,My point was that the white list contains not clients but sub-nets.
139180713,6779,Piccirello,2017-09-15T15:32:32Z,"That's correct, but we'd have to first iterate through all subnets to determine if the conversion is needed. Are you proposing having two loops?"
139284983,6779,zeule,2017-09-16T12:06:12Z,"Well, I would write as follows:
```c++
QHostAddress probe = addr;
const auto isInSubnet = [&probe](const QPair<QHostAddress, int>& subnet)
{
    return probe.isInSubnet(subnet);
};

if (std::find_if(subnets.begin(), subnets.end(), isInSubnet) != subnets.end()) 
    return true;

bool addrConversionSuccessful = true;
probe = (addr.protocol() == QAbstractSocket::IPv4Protocol) ?
          // always succeeds
￼         QHostAddress(addr.toIPv6Address()) :
￼         // only succeeds when addr is an ipv4-mapped ipv6 address
￼         QHostAddress(addr.toIPv4Address(&addrConversionSuccessful));
if (!addrConversionSuccessful) return false;
return std::find_if(subnets.begin(), subnets.end(), isInSubnet) != subnets.end();
```
To me this reads easier. But decide yourself, whether you want to change the code. The whole point is not critical, of course. "
139297691,6779,Piccirello,2017-09-16T23:47:56Z,"Maybe this is my inexperience with C++ talking, but that code looks far more opaque to me 🤷‍♂️ . It doesn't appear to be more performant, so I'll stick what what I have now."
139302137,6779,glassez,2017-09-17T05:28:07Z,"This function handles only one specific case of invalid subnet so it shouldn't be in Utils. BTW, it has small piece of trivial code so you can use it inplace."
139302164,6779,glassez,2017-09-17T05:30:27Z,"This function handles only one specific case of invalid subnet so it shouldn't be in Utils. BTW, it has small piece of trivial code so you can use it inplace."
139302360,6779,glassez,2017-09-17T05:42:04Z,"IMO, I would have it another way. I would have isIPInSubnet() function here since it more common, and use it in loop where it needed."
139302428,6779,glassez,2017-09-17T05:47:17Z,"I would define Subnet type in this namespace and use it instead:
```c++
using Subnet = QPair<QHostAddress, int>;
```"
139302516,6779,glassez,2017-09-17T05:53:16Z,It should be IPSubnetWhitelistOptionsDialog.
139304262,6779,Piccirello,2017-09-17T07:57:35Z,"`QHostAddress::isInSubnet` already handles that functionality. This is a bespoke method that abstracts away the ipv4/ipv6 conversion and whether it was successful, while only performing the conversion once for the entire list. If anything this should probably be moved out of utils."
139304294,6779,Piccirello,2017-09-17T07:59:04Z,Where should this function be moved to? This code is used in multiple places so I think it makes sense as a net util.
139304533,6779,zeule,2017-09-17T08:10:31Z,"If you want to care about performance, one can replace QList with vector."
139315024,6779,glassez,2017-09-17T16:34:22Z,">only performing the conversion once for the entire list.

Ok. Let it be as-is."
139315120,6779,glassez,2017-09-17T16:37:29Z,Please use Utils::Net::Subnet everywhere in your new code.
139315154,6779,glassez,2017-09-17T16:39:11Z,And use `subnets` as var name here. subnetPair confuses in any case.
139315433,6779,glassez,2017-09-17T16:52:19Z,">Where should this function be moved to? This code is used in multiple places so I think it makes sense as a net util.

You use it to check result of `QHostAddress::parseSubnet()` only so you will only need to do the following:
```c++
if (!QHostAddress::parseSubnet(subnetStr).first.isNull()) {
    // do something with valid subnet...
}
```
Or change this function to handle all possible invalid subnets and leave it here..."
139315532,6779,glassez,2017-09-17T16:56:52Z,"When I asked to rename this class I implied you will guess to rename the corresponding files to follow this name. Unfortunately, you have not guessed, so I'm asking you to do it."
139322303,6779,Piccirello,2017-09-17T21:58:07Z,I've renamed the function so it more accurately reflects the intended purpose.
139335352,6779,glassez,2017-09-18T04:17:50Z,"I don't understand your perseverance. Why this function? Why would you create a couple and compare the parameter with it, if it is known that only the first items are compared?
Maybe I'm picky... I don't see any sense in this function. @qbittorrent/demigods, judge us, please."
139339561,6779,Piccirello,2017-09-18T05:43:21Z,"[QHostAddress::parseSubnet](https://code.woboq.org/qt5/qtbase/src/network/kernel/qhostaddress.cpp.html#1120) returns that pair when invalid parameters are passed to it. Therefore I am checking directly against the expected ""invalid"" value."
142449492,6779,Piccirello,2017-10-03T16:15:32Z,Thoughts? I'd like to move this PR forward.
142653657,6779,glassez,2017-10-04T12:19:21Z,Invalid indentation here.
142712215,6779,glassez,2017-10-04T15:51:22Z,"The one of valid solutions is implementing the following wrapper:
```c++
bool parseSubnet(const QString &subnetStr, Subnet &subnet)
{
    const Subnet invalid = qMakePair(QHostAddress(), -1);
    subnet = QHostAddress::parseSubnet(subnetStr);
    return subnet != invalid;
}
```"
142851272,6779,Piccirello,2017-10-05T05:40:23Z,I still haven't figured out how to do either of these things. Could you point me in the right direction?
142878315,6779,Chocobo1,2017-10-05T08:33:57Z,"For the first one, use Qt signal/slots, connect qcheckbox toggled signal to qbutton setEnabled slot.
For the second, after closing edit dialog, if the list has changed then call enableApplyButton."
143224206,6779,Piccirello,2017-10-06T15:40:49Z,"Can you point to an existing example in the codebase that connects a qcheckbox and qbutton? I can't find how ""Web User Interface"", ""Use HTTPS instead of HTTP"", or any of the other checkboxes implement it."
143262019,6779,glassez,2017-10-06T18:18:10Z,"Since this function does not give us the parsed subnet, I would name it `canParseSubnet`. IMO, use overloads is incorrect in this case."
143324773,6779,Chocobo1,2017-10-07T07:12:33Z,"try
```c++
connect(m_ui->checkBypassAuthIPSubnet, &QCheckBox::toggled, m_ui->IPSubnetWhitelistButton, &QPushButton::setEnabled);
```
ps. I didn't test"
143632255,6779,Piccirello,2017-10-10T05:23:03Z,Thanks for the help. I've implemented both features for the whitelist. I've also updated the IP Ban List- in a separate commit- so it too implements the Apply button functionality.
145911288,6779,glassez,2017-10-20T09:00:24Z,const &
145911335,6779,glassez,2017-10-20T09:00:37Z,const &
145917519,6779,glassez,2017-10-20T09:29:32Z,const &
145918214,6779,glassez,2017-10-20T09:33:15Z,I would return subnets as string and convert it when it's really needed. Now it is irrational. In most use cases you convert it back in strings.
145918832,6779,glassez,2017-10-20T09:36:11Z,Add space before colon too.
145923507,6779,glassez,2017-10-20T09:57:45Z,Is this method really needed?
145923815,6779,glassez,2017-10-20T09:59:18Z,"I can't see, where it is used."
145970675,6779,Piccirello,2017-10-20T14:00:32Z,It's used on line 439.
145975431,6779,Piccirello,2017-10-20T14:19:27Z,"We're already parsing the user's text input into Subnets to verify if they're valid before saving. The downstream functions that call `getWebUiAuthBypassSubnets` don't always keep them as Subnets, but it makes a lot of sense that the function to get the subnets would return items of type Subnet."
145981427,6779,Piccirello,2017-10-20T14:41:17Z,It's still needed to disable the Whitelist button when the Subnet Bypass option is initially unchecked upon opening Preferences.
146008007,6779,glassez,2017-10-20T16:23:05Z,"I mean why do you need this separate method? Why don't do the following:
```c++
m_ui->IPSubnetWhitelistButton->setEnabled(m_ui->checkBypassAuthIPSubnet->isChecked());
```"
146009581,6779,glassez,2017-10-20T16:30:12Z,">but it makes a lot of sense that the function to get the subnets would return items of type Subnet.

What's the point? I don't see any sense. After all, you even do not check data loaded from config. Do not forget that it can be changed manually."
146097182,6779,Piccirello,2017-10-21T05:25:39Z,"> What's the point? I don't see any sense.

The code is self documenting. The return type matches what you'd expect based on the name of the function (ie. a function to get a list of subnets would return a list of objects of type Subnet). Would we also return a list of integers as Strings?

> After all, you even do not check data loaded from config. Do not forget that it can be changed manually.

Subnet whitelist entries are checked before they're saved. A user can circumvent the process by editing the config manually, but who's going to do this? And why do we care? I really don't see how this point is relevant."
146097335,6779,glassez,2017-10-21T05:38:32Z,">who's going to do this? And why do we care?

The manual config editing is the only way when qBittorrent built without GUI. And Yes, we should care about it just as you take care of the data entered via the appropriate dialog in GUI."
146097748,6779,Piccirello,2017-10-21T06:05:45Z,"I don't see this as a valid use case. Can you point me to another preference that's validated upon load, rather than at save?"
146098293,6779,glassez,2017-10-21T06:40:49Z,"Unfortunately, it may be absent in most legacy code. But lately I constantly remind to all contributors that we should check the input data from any external sources."
146098623,6779,Piccirello,2017-10-21T07:01:50Z,Done.
146110344,6779,WolfganP,2017-10-21T17:12:27Z,"FOA, thx a lot for this functionality @Piccirello, very interesting for a qb-nox+webui user as myself. 
Beyond all input validations and formatting, what will the end entry in the preferences file to define the pre-authenticated subnet? Something like 192.168.0.0/24 or anything different?"
146114411,6779,Piccirello,2017-10-21T20:05:21Z,"Each entered subnet is ""normalized"" by passing it through `QHostAddress::parseSubnet()`. Then the entire list (excluding any invalid subnets) is saved to the preferences file.

For example, my whitelist contains these entries:
```
192.168.10/24
192.168.50/24
```

and my `qBittorrent.conf` contains this line:
```
WebUI\AuthSubnetWhitelist=192.168.10.0/24, 192.168.50.0/24
```"
146116179,6779,WolfganP,2017-10-21T21:39:50Z,Perfect @Piccirello. Thx again for this feature. As soon as it's accepted I'll test it against the altWebUI stuff recently implemented.
146802864,6779,zeule,2017-10-25T09:39:51Z,The function name is misleading. From the name it's unclear what does is test: whether the IP is in any of the subnets (which it actually does) or does it belong to all of them.
146803830,6779,zeule,2017-10-25T09:43:02Z,"Maybe this is an error, but not warning (desired action is impossible)?"
147160189,6779,Piccirello,2017-10-26T14:31:33Z,What would you propose renaming it to?
147314972,6779,glassez,2017-10-27T03:07:01Z,Maybe `isIPInRange()`?
147319604,6779,Piccirello,2017-10-27T04:07:02Z,Updated.
147547231,6779,Chocobo1,2017-10-28T06:02:36Z,I think you want `const Preferences *pref `
147547296,6779,Chocobo1,2017-10-28T06:08:13Z,"This is a primitive type IMO, why forward declare it instead of including the header?"
147547367,6779,Chocobo1,2017-10-28T06:11:57Z,please add parentheses around each `operator==` statements
147547414,6779,Chocobo1,2017-10-28T06:15:44Z,"weird, why have 2 similar functions?
can someone point me to the discussion if there were any?"
147547465,6779,Chocobo1,2017-10-28T06:20:08Z,`const Utils::Net::Subnet &subnet`
147547562,6779,Chocobo1,2017-10-28T06:25:18Z,"is it possible to use `QSortFilterProxyModel::data()`?
"
147547572,6779,glassez,2017-10-28T06:26:05Z,"This one should be `parseSubnet()`.
The function above is for convenience (to avoid declaring redundant variable in place we need just test subnet string representation)."
147547584,6779,Chocobo1,2017-10-28T06:27:02Z,"also I would write:
```c++
const QString subnet = m_sortFilter->index(i, 0).data().toString();
```"
147547595,6779,glassez,2017-10-28T06:27:52Z,https://github.com/qbittorrent/qBittorrent/pull/6779#discussion_r143262019
147547698,6779,Chocobo1,2017-10-28T06:36:19Z,"~~can we omit `addrConversionOk`?~~
~~Because if `toIPv4Address()` fails, I image it will return an invalid address and there is no harm passing it to `isInSubnet()`.~~

Never mind."
147547842,6779,Chocobo1,2017-10-28T06:45:23Z,"I guess you're missing an ampersand in the 2nd parameter...
`bool parseSubnet(const QString &subnetStr, Subnet &subnet)` makes more sense to me."
147547907,6779,Chocobo1,2017-10-28T06:49:45Z,"please write:
```c++
bool addrConversionOk = false;

if (addr.protocol() == QAbstractSocket::IPv4Protocol) {
    protocolEquivalentAddress = QHostAddress(addr.toIPv6Address());
    addrConversionOk = true;
}
else {
    // only succeeds when addr is an ipv4-mapped ipv6 address
    protocolEquivalentAddress = QHostAddress(addr.toIPv4Address(&addrConversionOk));
}
```"
147547951,6779,Piccirello,2017-10-28T06:52:33Z,"> This one should be parseSubnet().

I think it's confusing for `parseSubnet` not to return a subnet. Especially so when it somehow returns a boolean. Now `canParseSubnet()` is overloaded, with one variant returning the parsed subnet. This is similar to [QHostAddress::toIPv4Address](https://doc.qt.io/archives/qt-5.5/qhostaddress.html#toIPv4Address)."
147547956,6779,glassez,2017-10-28T06:52:47Z,"The doc says nothing about returned value in this case, so we can get undefined behavior instead.
>This value is valid if the protocol() is IPv4Protocol, or if the protocol is IPv6Protocol, and the IPv6 address is an IPv4 mapped address. (RFC4291). In those cases, ok will be set to true. Otherwise, it will be set to false."
147548022,6779,glassez,2017-10-28T06:57:24Z,">I think it's confusing for parseSubnet not to return a subnet.

In this case it's better to have:
```c++
Subnet parseSubnet(const QString &subnetStr, bool *ok = nullptr);
```"
147548061,6779,Chocobo1,2017-10-28T06:59:55Z,"please apply this patch
```patch
--- a/src/gui/ipsubnetwhitelistoptionsdialog.ui
+++ b/src/gui/ipsubnetwhitelistoptionsdialog.ui
@@ -16,15 +16,6 @@
   <layout class=""QVBoxLayout"" name=""verticalLayout"">
    <item>
     <widget class=""QFrame"" name=""whitelistedIPSubnetBox"">
-     <property name=""enabled"">
-      <bool>true</bool>
-     </property>
-     <property name=""sizePolicy"">
-      <sizepolicy hsizetype=""Expanding"" vsizetype=""Expanding"">
-       <horstretch>0</horstretch>
-       <verstretch>0</verstretch>
-      </sizepolicy>
-     </property>
      <property name=""autoFillBackground"">
       <bool>true</bool>
      </property>
@@ -34,21 +25,9 @@
      <property name=""frameShadow"">
       <enum>QFrame::Raised</enum>
      </property>
-     <property name=""lineWidth"">
-      <number>1</number>
-     </property>
-     <property name=""midLineWidth"">
-      <number>0</number>
-     </property>
      <layout class=""QVBoxLayout"" name=""verticalLayout_21"">
       <item>
        <widget class=""QTreeView"" name=""whitelistedIPSubnetList"">
-        <property name=""sizePolicy"">
-         <sizepolicy hsizetype=""Expanding"" vsizetype=""Expanding"">
-          <horstretch>0</horstretch>
-          <verstretch>0</verstretch>
-         </sizepolicy>
-        </property>
         <property name=""rootIsDecorated"">
          <bool>false</bool>
         </property>
```

NOTE: updated 1."
147548076,6779,Piccirello,2017-10-28T07:00:40Z,~~There's no harm but it's a bit inefficient compared to checking `addrConversionOk`. I don't mind the variable but if you feel strongly I'll update it.~~
147548127,6779,Piccirello,2017-10-28T07:03:14Z,There was an explicit reason I had to default this to false but I can't remember it now. Let me mull this one over.
147548349,6779,Chocobo1,2017-10-28T07:15:11Z,"Please put an example in this widget's `placeholderText` property.

Also I tried to put `192.168.1.0/24` but all I get is `/0`"
147548364,6779,Chocobo1,2017-10-28T07:16:25Z,don't forget to remove `<QPair>` in net.cpp
147548382,6779,Piccirello,2017-10-28T07:18:03Z,"This function doesn't really do any of the parsing; it just checks the result of `QHostAddress::parseSubnet` against the `invalid` subnet. In 3/4 of this function's uses, the return is directly used in a conditional. In the 4th use, the result is passed as the sole parameter to `setEnabled`. Thus I think a function that returns a boolean has more utility."
147548419,6779,Chocobo1,2017-10-28T07:21:16Z,"Also please start with the word ""Example: "" followed by 1 IPv4 example and 1 IPv6 example.

The same with the widget in WebUI."
147548445,6779,Chocobo1,2017-10-28T07:24:28Z,">In this case it's better to have:
Subnet parseSubnet(const QString &subnetStr, bool *ok = nullptr);

+1"
147548484,6779,glassez,2017-10-28T07:28:26Z,"@Piccirello
```c++
Subnet parseSubnet(const QString &subnetStr, bool *ok = nullptr);
bool canParseSubnet(const QString &subnetStr);
```"
147548532,6779,glassez,2017-10-28T07:32:15Z,"@Piccirello, don't produce meaningless overloads.
The test functions (with names like `isSomething`, `hasSomething`, `canSomething` and so on) usually don't have any side results.
The conversion functions can have additional result of type bool if its return value can't indicate conversion error."
147548663,6779,Chocobo1,2017-10-28T07:42:16Z,">The conversion functions can have additional result of type bool if its return value can't indicate conversion error.

On a second thought, `Subnet parseSubnet(const QString &subnetStr, bool *ok = nullptr);` can indicate conversion error, then the `bool ok` is redundant?"
147548834,6779,glassez,2017-10-28T07:52:33Z,Initially I propose to have this wrapper around QHostAddress::parseSubnet to get rid from incorrect in Utils space `isValidSubnet(Subnet subnet)` function.
147548854,6779,glassez,2017-10-28T07:54:27Z,It seems we can use `QHostAddress::parseSubnet` directly in case we don't need to check its result and have `canParseSubnet` for check-only cases.
147588934,6779,Chocobo1,2017-10-29T18:00:13Z,"please use `env()` (and below), it's better because it's guaranteed to be read-only."
147601130,6779,Piccirello,2017-10-30T00:21:21Z,"> On a second thought, Subnet parseSubnet(const QString &subnetStr, bool *ok = nullptr); can indicate conversion error, then the bool ok is redundant?
 
It can only indicate a conversion error via the invalid subnet being returned, which is the entire purpose of this function.

> It seems we can use QHostAddress::parseSubnet directly in case we don't need to check its result and have canParseSubnet for check-only cases.

Any code that doesn't need to check the validity of the result already uses `QHostAddress::parseSubnet` directly."
147618599,6779,Piccirello,2017-10-30T05:03:36Z,"> Also I tried to put 192.168.1.0/24 but all I get is /0

I just tested that subnet in the gui and it's working normally for me. Can you re-try with the latest build?"
147896813,6779,Chocobo1,2017-10-31T05:08:06Z,`bool ok = false;`
147896878,6779,Chocobo1,2017-10-31T05:08:55Z,`if (ok) *ok = (subnet != invalid);`
147897000,6779,Chocobo1,2017-10-31T05:10:30Z,`bool ok = false;`
147897107,6779,Chocobo1,2017-10-31T05:11:54Z,"up to you, but I will add `const` here."
147897144,6779,Chocobo1,2017-10-31T05:12:24Z,`bool ok = false;`
147897156,6779,Chocobo1,2017-10-31T05:12:40Z,same here.
148343323,6779,Piccirello,2017-11-01T18:24:16Z,"Will implement this change. But for my own info, what's the purpose of checking `ok` before assigning it?"
148344501,6779,glassez,2017-11-01T18:28:40Z,It can be `nullptr` if user don't want to know status.
148535318,6779,zeule,2017-11-02T13:42:53Z,"Everything seems settled down, so could you, please, make the same changes to src/gui/CMakeLists.txt?"
148710927,6779,Piccirello,2017-11-03T05:02:14Z,Updated CMakeLists.txt (and squashed).
149589036,6779,glassez,2017-11-08T07:08:46Z,Wrong curly brace position.
149589329,6779,glassez,2017-11-08T07:11:43Z,Inconsistent `else` block. Curly braces are required because of curly braces in `if`.
162117841,6779,glassez,2018-01-17T17:12:28Z,"Unfortunately I noticed it only now... Why have you chosen this out-of-context way to encode this list? We should send it as (json) list, isn't it? I'm sure this should be fixed soon."
114750802,6698,glassez,2017-05-04T11:28:05Z,"Why we need ""Preferences"" in these paths? Why not just ""Appearance/useSystemIconTheme"" and so on?"
114750963,6698,glassez,2017-05-04T11:29:34Z,This and the following lines are unrelated here!
114751385,6698,glassez,2017-05-04T11:32:39Z,Move these includes on bottom of Qt includes.
114751612,6698,glassez,2017-05-04T11:34:25Z,"IMO, it is time to create explicit GUI component."
114751767,6698,glassez,2017-05-04T11:35:26Z,App includes should be after system/Qt includes.
114752015,6698,glassez,2017-05-04T11:36:59Z,`enum MsgType: int;`
114752586,6698,glassez,2017-05-04T11:40:47Z,wrong brace location
114752691,6698,glassez,2017-05-04T11:41:31Z,You should have it in next indentation level.
114752767,6698,glassez,2017-05-04T11:42:05Z,Redundant blank line.
114752848,6698,glassez,2017-05-04T11:42:39Z,Move brace to next line
114752869,6698,glassez,2017-05-04T11:42:47Z,Brace
114752982,6698,glassez,2017-05-04T11:43:28Z,Redundant blank line
114753135,6698,glassez,2017-05-04T11:44:28Z,Redundant blank line
114753541,6698,glassez,2017-05-04T11:47:28Z,Why not in declaration?
114753623,6698,glassez,2017-05-04T11:48:00Z,Too long line.
114753641,6698,glassez,2017-05-04T11:48:09Z,Too long line
114753702,6698,glassez,2017-05-04T11:48:32Z,Redundant blank line
114753954,6698,glassez,2017-05-04T11:50:05Z,Redundant blank line
114754038,6698,glassez,2017-05-04T11:50:39Z,Redundant blank line
114754077,6698,glassez,2017-05-04T11:50:52Z,Redundant blank line
114754169,6698,glassez,2017-05-04T11:51:33Z,Redundant blank line
114754325,6698,glassez,2017-05-04T11:52:25Z,Shift indentation
114754458,6698,glassez,2017-05-04T11:53:19Z,Redundant blank line
114754616,6698,zeule,2017-05-04T11:54:20Z,"I don't know, inherited code."
114754786,6698,glassez,2017-05-04T11:55:36Z,Brace issue
114754882,6698,glassez,2017-05-04T11:56:23Z,Brace
114754903,6698,glassez,2017-05-04T11:56:31Z,Brace
114754921,6698,glassez,2017-05-04T11:56:39Z,Brace
114755042,6698,glassez,2017-05-04T11:57:23Z,Why not in declaration?
114755106,6698,glassez,2017-05-04T11:57:48Z,Redundant blank line
114755146,6698,glassez,2017-05-04T11:58:03Z,"Brace
"
114755182,6698,glassez,2017-05-04T11:58:17Z,Redundant blank line
114755200,6698,glassez,2017-05-04T11:58:23Z,Redundant blank line
114755585,6698,zeule,2017-05-04T12:00:53Z,"@glassez , probably you suggest to replace names here?"
114757213,6698,zeule,2017-05-04T12:11:36Z,"OK ,but I still think that it is better to place them in the following order:
1. corresponding header file
2. app includes
3. Qt include
4. STL and other standard includes

Why? Because standard library includes are of less importance, everybody knows what is inside , but what is much more important is app modules inter-dependencies, showed by  app includes."
114757610,6698,zeule,2017-05-04T12:13:50Z,"Second point: system includes are usually not sensitive to the include order, while app includes might have implicit dependencies. Listing them closer to the start of the includes list helps to find such dependencies if any."
114757828,6698,zeule,2017-05-04T12:15:12Z,"Will fix, but, BTW, also disagree: indented namespaces in fact discourage namespace usage. "
114758070,6698,zeule,2017-05-04T12:16:41Z,"Otherwise it would be inlined, and we do not want it, right?"
114774205,6698,zeule,2017-05-04T13:37:00Z,This comment should belong to #6375
114787072,6698,zeule,2017-05-04T14:26:22Z,"Do you mean something like:
`src/base/ui.h`:
```c++
struct UI
{
    virtual void show() = 0;
}
```
and in `src/gui/gui.h'
```c++
#include ""base/ui.h""
class GraphicalUI: public UI
{
  void show() override {
      MainWindow::show();
}
};
```"
114835520,6698,glassez,2017-05-04T17:08:02Z,This is good point.
114835920,6698,glassez,2017-05-04T17:09:49Z,These lines was in this place earlier but they were removed in current master.
114836729,6698,glassez,2017-05-04T17:13:14Z,"Not in this PR, of course...
I didn't think about implementation, I have the idea itself. Now we have MainWindow as GUI manager, but this is wrong approach."
114838339,6698,zeule,2017-05-04T17:20:41Z,"Hm... Mistake during rebasing then, I guess.... Thanks. "
115128389,6698,thalieht,2017-05-06T20:34:10Z,"""Could not find theme file""?"
115128546,6698,thalieht,2017-05-06T20:42:47Z,This section should be at the end and _base_ should be on top according to the guidelines.
115128637,6698,thalieht,2017-05-06T20:48:15Z,Redundant extra line.
115128660,6698,thalieht,2017-05-06T20:49:36Z,One line up.
115128808,6698,thalieht,2017-05-06T21:03:23Z,One line up.
115128957,6698,thalieht,2017-05-06T21:13:36Z,2 lines down.
115128982,6698,thalieht,2017-05-06T21:15:16Z,One line up.
115129037,6698,thalieht,2017-05-06T21:17:27Z,One line up.
115129044,6698,thalieht,2017-05-06T21:17:45Z,The bracket here and a few lines below empty line before `private:`
115129046,6698,thalieht,2017-05-06T21:17:50Z,One line up.
115129550,6698,zeule,2017-05-06T21:45:12Z,Done.
115129552,6698,zeule,2017-05-06T21:45:19Z,Done.
115129625,6698,zeule,2017-05-06T21:48:27Z,"No, themes are addressed by theme name."
115130185,6698,thalieht,2017-05-06T22:20:29Z,"How about ""Could not find a theme file named""? I could be wrong but 
`file theme` doesn't seem right, `theme file` seems more correct. Anyway in the current one you forgot ""Could not _find_ file theme named""? Unless the class name is deceiving."
115130295,6698,zeule,2017-05-06T22:25:47Z,"Ah, right! Thanks! There is a typo. Has to be ""Could not find theme named""."
115968618,6698,zeule,2017-05-11T11:45:22Z,"`setValue(post, preValue);`"
116801952,6698,Chocobo1,2017-05-16T17:10:44Z,redundant line
116802326,6698,Chocobo1,2017-05-16T17:12:21Z,"huh, so you like adding these... I can go either way, I'll let others decide."
116803046,6698,zeule,2017-05-16T17:15:25Z,"Please note, the first two commits are authored by @magao and are taken from PR #6375"
116803439,6698,Chocobo1,2017-05-16T17:16:55Z,I would remove the extra comma
116804627,6698,Chocobo1,2017-05-16T17:21:49Z,I think you should adhere to coding guidelines till it changes...
116804994,6698,Chocobo1,2017-05-16T17:23:22Z,`const auto &pair`
116805169,6698,Chocobo1,2017-05-16T17:24:01Z,"`m_entries.emplace_back(pair.first, pair.second);` ?"
116805508,6698,Chocobo1,2017-05-16T17:25:16Z,and I would remove `{}` 
116805840,6698,Chocobo1,2017-05-16T17:26:31Z,pls add parentheses
116806442,6698,Chocobo1,2017-05-16T17:28:52Z,"instead of casting inside, why not pass in `size_t` directly?"
116806607,6698,Chocobo1,2017-05-16T17:29:34Z,I would add parentheses 
116807074,6698,Chocobo1,2017-05-16T17:31:23Z,I would remove `{}`
116807408,6698,Chocobo1,2017-05-16T17:32:40Z,I would remove `{}`
116810810,6698,Chocobo1,2017-05-16T17:46:26Z,"just curious, why create a namespace?"
116829572,6698,zeule,2017-05-16T19:02:20Z,"No, impossible:
```
/usr/lib/gcc/x86_64-pc-linux-gnu/7.1.0/include/g++-v7/ext/new_allocator.h:136:4: error: no matching function for call to ‘{anonymous}::ThemeInfoListModel::Entry::Entry(const Theme::ThemeInfo&, const QString&)’
```"
116831695,6698,zeule,2017-05-16T19:11:46Z,Because `QAbstractItemModel` interface uses `int` and replacing parameter type we get casts in `data()` then.
116832796,6698,zeule,2017-05-16T19:16:35Z,To show that these constants are local.
117098066,6698,thalieht,2017-05-17T20:09:42Z,No big deal imo but i think `LogMessageType` should not be abbreviated because no other section is.
117103499,6698,thalieht,2017-05-17T20:35:47Z,deser i alize
117105617,6698,thalieht,2017-05-17T20:45:42Z,To freely mix objects from different sources within a theme?
117107447,6698,thalieht,2017-05-17T20:54:09Z,typo: correspondign
117108245,6698,thalieht,2017-05-17T20:57:54Z,"""This function handles theme inheritance""?"
117110310,6698,thalieht,2017-05-17T21:07:14Z,Seriali z ation
117110759,6698,thalieht,2017-05-17T21:09:26Z,Thees -> This?
117110975,6698,thalieht,2017-05-17T21:10:27Z,Deescription: one extra e
117112697,6698,thalieht,2017-05-17T21:19:00Z,Swap with above.
117113321,6698,thalieht,2017-05-17T21:22:09Z,"them -> theme? Also ""color"" 2 lines above."
117113450,6698,thalieht,2017-05-17T21:22:47Z,firs -> first
117114296,6698,thalieht,2017-05-17T21:27:18Z,One line up.
117114607,6698,thalieht,2017-05-17T21:28:38Z,Why so lonely?
117115841,6698,thalieht,2017-05-17T21:35:32Z,wasLoadedSucces s fu l ly
117117196,6698,thalieht,2017-05-17T21:42:37Z,"Some lines above you use variable name xOk but here xOK. Personally i don't care, actually i prefer the second in this case but coding style.. 
If it matters i've seen at least one more somewhere else."
117117935,6698,thalieht,2017-05-17T21:46:22Z,out -> our?
117118422,6698,thalieht,2017-05-17T21:48:55Z,Capital x in EXtension.
117120886,6698,thalieht,2017-05-17T22:02:49Z,"Not an error but you use ""colors"" everywhere else. Same 2 lines up."
117122030,6698,thalieht,2017-05-17T22:09:30Z,You forward declare this a few lines below.
117124561,6698,thalieht,2017-05-17T22:24:48Z,triple fff in effect.
117124918,6698,thalieht,2017-05-17T22:27:23Z,serialise -> serialize 
117202149,6698,glassez,2017-05-18T09:34:42Z,I would use format string and `QString::arg()`.
117203963,6698,glassez,2017-05-18T09:42:44Z,Fix coding style.
117204052,6698,glassez,2017-05-18T09:43:12Z,Coding Style.
117204258,6698,glassez,2017-05-18T09:44:05Z,Fix coding style: add blank line before `private` section.
117204690,6698,glassez,2017-05-18T09:45:59Z,Fix coding style. Lambda should be indented as function so mave curly brace to next line.
117204941,6698,glassez,2017-05-18T09:47:10Z,Fix coding style.
117225243,6698,glassez,2017-05-18T11:42:14Z,Explicit QVariant isn't needed here and below.
117225596,6698,glassez,2017-05-18T11:43:58Z,Redundant blank line.
117225723,6698,glassez,2017-05-18T11:44:40Z,I would remove braces in these two loops.
117227383,6698,glassez,2017-05-18T11:53:17Z,Don't need it anymore. Leave Qt5 branch only.
117227679,6698,glassez,2017-05-18T11:54:22Z,Oops. This comment is related to other line.
117227785,6698,glassez,2017-05-18T11:55:01Z,Don't need it anymore. Leave Qt5 branch only.
117228093,6698,glassez,2017-05-18T11:56:54Z,Fix coding style.
117228234,6698,glassez,2017-05-18T11:57:47Z,Coding style.
117228684,6698,glassez,2017-05-18T12:00:41Z,It's bad idea using unrelated operators even if it's shorter.
117228880,6698,glassez,2017-05-18T12:01:50Z,Unused branch.
117229068,6698,glassez,2017-05-18T12:03:04Z,Need space after if.
117229607,6698,glassez,2017-05-18T12:06:12Z,Need blank lines between enum declarations.
117230124,6698,glassez,2017-05-18T12:09:11Z,It is unix only. Move to unixconf.pri
117410823,6698,glassez,2017-05-19T06:29:01Z,Isn't Plasma integration Unix only feature?
117419709,6698,glassez,2017-05-19T07:31:07Z,Why is it separate from other color providers?
117419914,6698,glassez,2017-05-19T07:32:17Z,"IMO, all this theme initialization should be in Application."
117420546,6698,glassez,2017-05-19T07:35:32Z,Aren't `registerFontProviders` and `registerColorProviders` enough? (without `Gui` part) Or there could be non-GUI providers?
117421486,6698,glassez,2017-05-19T07:40:49Z,I wouldn't create these variables.
117421527,6698,zeule,2017-05-19T07:41:05Z,"Theoretically no, but practically yes."
117422104,6698,glassez,2017-05-19T07:44:44Z,"Why on activated? Isn't ""current item changed"" better choice?"
117438134,6698,zeule,2017-05-19T09:14:32Z,I had an impression that they are re-used somewhere... 
117454067,6698,zeule,2017-05-19T10:46:13Z,Maybe `active()` would be better?
117466720,6698,zeule,2017-05-19T12:15:23Z,Maybe somebody wants to re-apply a theme. Last time it was me tuning the Plasma colors.
117475840,6698,zeule,2017-05-19T13:08:08Z,"Could you elaborate, please?"
117477694,6698,zeule,2017-05-19T13:17:43Z,Done.
117671085,6698,LordNyriox,2017-05-22T06:43:33Z,@evsh:  See `&=`.  
117714322,6698,glassez,2017-05-22T10:38:36Z,"Yes. `&=` is bitwise operator and not logical. Correct code:
```c++
allReadsOK = allReadsOK && singleReadOK;
```
C++ compilers (still) accept this code as such as using integers in logical expressions but IMO (and I hope not only IMO) it's a bad idea mixing it."
117715864,6698,zeule,2017-05-22T10:48:32Z,"Section 4.7.4 of the standard is explicit on this subject and the code is correct. However, if you want that change, probably it means that the taken approach does not please everyone and I better refactor this fragment to return early after the first read error.   "
117737927,6698,glassez,2017-05-22T12:57:07Z,"I don't know why this was done, apparently, for backward compatibility. IMO, implicit conversion between boolean and numeric types is evil.
>I better refactor this fragment to return early after the first read error.

It would be better independently of the discussed issue unless you need to read it all in any case."
117778888,6698,zeule,2017-05-22T15:43:38Z,Replaced with exceptions.
118046397,6698,zeule,2017-05-23T16:53:21Z,"So the question boils down to ""does theme actively change application or is it used by the app?"" If so, then theme the themes are passive entities. "
118909066,6698,zeule,2017-05-29T10:22:44Z,OK.
119870868,6698,glassez,2017-06-02T14:30:04Z,Some headers are in SOURCES section. Please fix.
119871861,6698,glassez,2017-06-02T14:33:45Z,Use `static_cast` unless you check casting result.
119901052,6698,glassez,2017-06-02T16:40:05Z,Shouldn't you capture `this` here? You use `tr` method inside this lambda.
119901330,6698,glassez,2017-06-02T16:41:38Z,DeserializationError &ex
125428067,6698,zeule,2017-07-04T09:23:21Z,`tr()` is static.
125743103,6698,zeule,2017-07-05T20:03:13Z,This partially solves #2934.
128436030,6698,glassez,2017-07-20T06:45:04Z,I have long wanted to say this: I extremely do not like this approach! Why are you making the theme dependent on its users? Why not make an abstract interface? E.g.: `QColor ColorTheme::color(ColorID id) const`. Then we won't need to change it every time we want to add support for those in some other application component.
128464641,6698,zeule,2017-07-20T09:19:55Z,"Because different parts of the colours set require a bit different handling. Torrent state colours require fast access and as such are backed by a cache, while others do not need this. These three functions give a simple interface for clients and of course one can do:
```c++
class ColorTheme {
public:
    enum class Element {
       //...
       // long list
       // 
    };
protected:
   static Element mapToThemeElement(BitTorrent::TorrentState state);
   static Element mapToThemeElement(Log::MsgType messageType);
   static Element mapToThemeElement(DownloadProgressBarElement messageType);
   virtual QColor color (Element element, bool cached) const = 0;
   virtual void cacheElement(Element element);
public:
  QColor color(BitTorrent::TorrentState state) const {
      return color(mapToElement(state), true);
  }
  QColor color(Log::MsgType messageType) const {
      return color(mapToElement(state), false);
  }
};
```
> Then we won't need to change it every time we want to add support for those in some other application component.

Sorry, I can't see how adding an enum member is better or simpler than adding a virtual function. 
"
128470361,6698,glassez,2017-07-20T09:45:01Z,"Okay, okay, I won't criticize your solutions, they are certainly correct!..

But if I leave the sarcasm aside, I meant a little more.
I meant more abstract interface. The  ColorTheme class simply parses the file and allows you to request a color by its [string] key. Caching and other specific handling can (should) be done on the client side."
128483811,6698,zeule,2017-07-20T10:53:49Z,"But nothing in the interface says that `ColorTheme::color()` might be slow, therefore a cache at the client side seems to be illogical. From the other side, you are absolutely right: the client only can decide what is slow for it and what is not."
128569838,6698,glassez,2017-07-20T16:47:34Z,">But nothing in the interface says that `ColorTheme::color()` might be slow

Did someone once specifies it in the interface? For example, `ColorTheme::getColorSlowly()`?
>From the other side, you are absolutely right: the client only can decide what is slow for it and what is not.

This is what I want: each application layer is responsible for its task and has no incorrect dependencies."
140826712,6698,zeule,2017-09-25T16:25:16Z,@glassez: please take a look at the last commit (Refactor theme serialization). I've tried to implement your recommendations.
140833898,6698,glassez,2017-09-25T16:53:20Z,"Well, I'll look into it ASAP."
393258675,12144,glassez,2020-03-16T19:19:46Z,I would declare it as static const INVALID in appropriate struct.
393261985,12144,glassez,2020-03-16T19:26:38Z,Invalid coding style.
393263785,12144,glassez,2020-03-16T19:30:29Z,There are no lines in model. There are items.
393270060,12144,glassez,2020-03-16T19:43:40Z,"I would call it ""onNewMessage"" or ""handleNewMessage""."
393439897,12144,jagannatharjun,2020-03-17T04:33:24Z,done
393439938,12144,jagannatharjun,2020-03-17T04:33:31Z,done?
393439972,12144,jagannatharjun,2020-03-17T04:33:38Z,done
393459962,12144,jagannatharjun,2020-03-17T06:01:55Z,I think this was done because of the use of HTML based formatting in `LogWidget` which is not required anymore.
393460109,12144,jagannatharjun,2020-03-17T06:02:38Z,will `m_msgCount` make more sense?
393645667,12144,Chocobo1,2020-03-17T12:34:19Z,"We shouldn't use `exec()` anymore, take a look at `void TrackerFiltersList::showMenu(const QPoint &)` to see how to do it in an async way."
393680905,12144,jagannatharjun,2020-03-17T13:32:36Z,"should I combine both views under `BasicLogView`, I mean all they have different is model, which can be added seperately"
393696721,12144,glassez,2020-03-17T13:55:55Z,"As I said before you can use generic View. All things you're doing in view constructors you can apply from outside it. Seems one exception is key press event handler, so you can implement generic CopiableListView and use it with your models (although you can use basic ListView and set external event handler)."
393700490,12144,jagannatharjun,2020-03-17T14:01:26Z,"both have the same key events (is am missing something)

I was doing it this way implement `LogListView`, set model and filter seperately in executionlogwidget i.e create two instance and setModel accordingly, they both seem to have only this much difference"
393702370,12144,jagannatharjun,2020-03-17T14:04:04Z,"problem is Model, they seem to do the same think but I can't seem to find an acceptable way to combine them. "
393708367,12144,glassez,2020-03-17T14:12:30Z,Seems the only way is using templates.
393712177,12144,glassez,2020-03-17T14:17:43Z,Although seems it isn't good idea to use templates with QObject based types so we can leave two models.
393712701,12144,jagannatharjun,2020-03-17T14:18:24Z,"signals will not work in template

how about this 
```
class BaseLogModel : public QAbstractListModel 
{
    Q_OBJECT
    Q_DISABLE_COPY(BaseLogModel)

public:
    explicit BaseLogModel(QObject *parent = nullptr);

    int rowCount(const QModelIndex &parent = {}) const override;
    int columnCount(const QModelIndex &parent = {}) const override;
    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
    void reset();

protected:
    struct Message {
        QString text;
        QColor foregroundColor;
    };
    void addMessage(const Message& msg);

private:
    QVector<Message> m_msgs;
};
```

but it will duplicate data"
393717737,12144,glassez,2020-03-17T14:25:07Z,">but it will duplicate data

What do you mean?

Also vector isn't good choice for collecting messages since when it is full each new message will need its shifting."
393727954,12144,jagannatharjun,2020-03-17T14:38:45Z,"



> What do you mean?

We currently directly query the message from the logger with this we're maintaining our own  message queue.
 

> Also vector isn't good choice for collecting messages since when it is full each new message will need its shifting.

stack?"
393730223,12144,jagannatharjun,2020-03-17T14:41:50Z,"I think you were saying to limit the number of messages in msglist, so maybe this can be considered with this we're caching the message also as you said."
393739770,12144,glassez,2020-03-17T14:55:03Z,">We currently directly query the message from the logger 

Currently in this PR, I suppose...
>with this we're maintaining our own message queue.

Yes. But already converted in display friendly form. Otherwise we need to obtain and convert it regularly."
393745528,12144,jagannatharjun,2020-03-17T15:02:43Z,"setting up was small, so I didn't make separate classes "
393760683,12144,jagannatharjun,2020-03-17T15:23:35Z,"well now I'm implementing `BaseLogModel`, but just for the discussion, isn't it will create performance implication on a large number of messages. which was the original problem. 
also, the display functions are only called for the items in the view so it can't be a much of a problem

neither std::stack or QStack provides iteration so I'm using QVector as a stack,"
393766134,12144,glassez,2020-03-17T15:30:48Z,"> but just for the discussion, isn't it will create performance implication on a large number of messages. which was the original problem

We need to make a choice.
Seems we need to compare performance of both ways.

Anyway both models contain many duplicated code so BaseLogModel will probably relevant in both cases."
393768956,12144,glassez,2020-03-17T15:34:35Z,">neither std::stack or QStack provides iteration so I'm using QVector as a stack,

There are ""circular buffer"" types. As far as I remember @sledgehammer999 tried to use one of them in Logger (in original PR)."
393823147,12144,Chocobo1,2020-03-17T16:48:58Z,"why you need 3 lines to do the same thing? why not just:
```c++
const QAction *copyAct = menu->addAction(UIThemeManager::instance()->getIcon(""edit-copy""), tr(""Copy""));
connect(copyAct, &QAction::triggered, this, &LogListView::copySelection);
```"
393836560,12144,Chocobo1,2020-03-17T17:08:53Z,this should be `return m_types.testFlag(type);`
393844606,12144,Chocobo1,2020-03-17T17:21:45Z,I think it is a bad idea to use `std::pair` all over the place. Maybe you can use `IndexRange<int>` or `IndexInterval<int>` if the first one doesn't fit well.
393854457,12144,glassez,2020-03-17T17:37:02Z,"IMO, it seems to be redundant at all.

Why one needs to know this range before it obtain messages for the first time?"
393895971,12144,glassez,2020-03-17T18:45:27Z,"Seems ""retrieve by demand"" approach still needs some kind of this info.
Although I would reimplement single message retrieving to be index based (real index instead of id). We just need to provide ""Logger::messageCount()"" method. This way we avoid multiple index-to-id mappings (currently this PR need two mappings to access any message and additional calculations/checkings to get messages count).
So I suggest that ""Logger::getMessage(int index)"" just means ""get Nth message from current set""."
393898162,12144,glassez,2020-03-17T18:49:15Z,We still need to maintain id (as timepoint alternative) so async client (e.g. WebAPI user) can access messages subset starting from some timepoint.
394363252,12144,jagannatharjun,2020-03-18T13:55:06Z,used QCache
394363379,12144,jagannatharjun,2020-03-18T13:55:18Z,done
394363472,12144,jagannatharjun,2020-03-18T13:55:26Z,done
394363564,12144,jagannatharjun,2020-03-18T13:55:31Z,done?
394569747,12144,Chocobo1,2020-03-18T18:52:19Z,Seems this can go private.
394570569,12144,Chocobo1,2020-03-18T18:53:45Z,later date should be on top.
394571173,12144,Chocobo1,2020-03-18T18:54:54Z,"`QObject::` is redundant isn't?
You should really read closely to the code samples I gave..."
394571436,12144,Chocobo1,2020-03-18T18:55:25Z,is this header in use?
394571694,12144,Chocobo1,2020-03-18T18:55:55Z,this can be `const QAction *` can't it?
394572427,12144,Chocobo1,2020-03-18T18:57:12Z,seems this is not needed here.
394574532,12144,Chocobo1,2020-03-18T19:00:47Z,`const QModelIndex &index` as it seems to be some complex type to me.
394577671,12144,Chocobo1,2020-03-18T19:06:40Z,`Logger::message()` and `Logger::peer()` read data from different source so they should have different lock.
394579751,12144,Chocobo1,2020-03-18T19:10:45Z,seems this project prefers each variable to have its own line. check other places too!
394581398,12144,glassez,2020-03-18T19:14:01Z,And don't appent these extra spaces inside this line (between name and email).
394593541,12144,jagannatharjun,2020-03-18T19:36:58Z,done
394593571,12144,jagannatharjun,2020-03-18T19:37:03Z,done
394594156,12144,jagannatharjun,2020-03-18T19:38:15Z,done
394594215,12144,jagannatharjun,2020-03-18T19:38:23Z,removed
394594267,12144,jagannatharjun,2020-03-18T19:38:30Z,done
394594343,12144,jagannatharjun,2020-03-18T19:38:38Z,removed
394594434,12144,jagannatharjun,2020-03-18T19:38:48Z,done
394594524,12144,jagannatharjun,2020-03-18T19:38:57Z,done
394594831,12144,jagannatharjun,2020-03-18T19:39:37Z,"seems like they're not needed to explicitly store, so I removed them as member variables."
395110899,12144,Chocobo1,2020-03-19T15:24:26Z,done? you didn't change anything here...
395112121,12144,Chocobo1,2020-03-19T15:26:09Z,what does this do? better add a comment in code because it is not really obvious.
395112858,12144,Chocobo1,2020-03-19T15:27:09Z,constructor & destructor should be placed together.
395117947,12144,jagannatharjun,2020-03-19T15:33:51Z,"they should be private slots, displayListmenu is connected to context menu requested and copy selection is connected to copy action"
395119986,12144,Chocobo1,2020-03-19T15:36:39Z,I mean shouldn't `keyPressEvent()` be private?
395124028,12144,jagannatharjun,2020-03-19T15:42:10Z,"sorry, done"
395124274,12144,jagannatharjun,2020-03-19T15:42:30Z,added a comment please check.
395124424,12144,jagannatharjun,2020-03-19T15:42:39Z,done.
395182950,12144,Chocobo1,2020-03-19T17:05:21Z,please add `explicit`
395183719,12144,Chocobo1,2020-03-19T17:06:27Z,https://github.com/qbittorrent/qBittorrent/pull/12144#discussion_r394579751
395185646,12144,Chocobo1,2020-03-19T17:09:13Z,Do you mean now it is all plain text and no more coloring for different `MsgType`?
395187618,12144,Chocobo1,2020-03-19T17:12:17Z,move the declaration lower to just where it is needed.
395190369,12144,Chocobo1,2020-03-19T17:16:34Z,If possible try moving #ifndef block to the bottom of this function block.
395191304,12144,Chocobo1,2020-03-19T17:17:54Z,Should this be renamed to `setMsgTypes()`?
395196371,12144,jagannatharjun,2020-03-19T17:25:27Z,"coloring is handled by model, so we don't do HTML formatting any more, previously we're using QLabel with html formatting."
395200282,12144,jagannatharjun,2020-03-19T17:31:04Z,done.
395200353,12144,jagannatharjun,2020-03-19T17:31:10Z,done
395200404,12144,jagannatharjun,2020-03-19T17:31:16Z,done
395200469,12144,jagannatharjun,2020-03-19T17:31:22Z,done
395200529,12144,jagannatharjun,2020-03-19T17:31:27Z,done
395445996,12144,Chocobo1,2020-03-20T05:35:40Z,Seems a good idea to me to turn msgModel->reset() into a public slot and you can invoke it without the lambda.
395447869,12144,Chocobo1,2020-03-20T05:46:34Z,"https://stackoverflow.com/questions/12437241/c-always-use-explicit-constructor
>So I'd say get into the habit of using explicit for unary constructors, and those only."
395448317,12144,Chocobo1,2020-03-20T05:48:43Z,https://github.com/qbittorrent/qBittorrent/pull/12144#discussion_r394579751 Would you please check your code thoroughly?
395449143,12144,Chocobo1,2020-03-20T05:53:30Z,Can't this be private?
395449384,12144,Chocobo1,2020-03-20T05:54:51Z,redundant empty line isn't?
395451673,12144,Chocobo1,2020-03-20T06:07:28Z,"`QString::fromLatin1(""%1 - "")`"
395451833,12144,Chocobo1,2020-03-20T06:08:15Z,Those parameters can be `const`.
395451920,12144,Chocobo1,2020-03-20T06:08:40Z,use a `switch()` or return on negated condition.
395452256,12144,Chocobo1,2020-03-20T06:10:32Z,"I would use this form:
```c++
text.append(peer.blocked
    ? //...
    : //... );
```
and then why not merge it with the declaration of `text`?
"
395452618,12144,Chocobo1,2020-03-20T06:12:32Z,we need an empty line at EOF please.
395455969,12144,glassez,2020-03-20T06:29:24Z,"""lastKnownId"" is meaningless name in terms of Logger itself (Logger knows any existing id). I would change it to accept parameter that has some consistent meaning, e.g. ""sinceID"". Even more... as I said before we really has no IDs but some ""synthetic"" timepoints (to be sure they are unique) so I would rename all ID related stuff accordingly."
395456469,12144,glassez,2020-03-20T06:31:52Z,"Also I would rename ""msg"" to ""message"" in all (or at least in all public) names. @Chocobo1?"
395457075,12144,glassez,2020-03-20T06:34:40Z,"Why did you remove reference from ""types"" parameter?"
395459726,12144,glassez,2020-03-20T06:46:55Z,`explicit` should be always used if constructor can be used with single parameter and we don't want to use it implicitly. If you remove `explicit` here you will be able to write `LogFilterModel model = Log::ALL` but it is incorrect.
395464319,12144,glassez,2020-03-20T07:05:20Z,"It's incorrect usage of signals. Signals should be used to inform about some events, but not to encourage something external to take some action."
395467471,12144,glassez,2020-03-20T07:17:18Z,Why these two are static? If you need to store them between method calls you should make them class members.
395470221,12144,glassez,2020-03-20T07:26:19Z,Is it correct? Shouldn't `+=` be here?
395470768,12144,glassez,2020-03-20T07:28:03Z,Also I don't see where they're used...
395472503,12144,glassez,2020-03-20T07:34:14Z,Why don't you return `Item` here? Otherwise you need to call Logger three times at once.
395472640,12144,Chocobo1,2020-03-20T07:34:46Z,"Agreed, at least in all public names."
395473398,12144,Chocobo1,2020-03-20T07:37:10Z,"`Log::MsgTypes` is actually `QFlags<>`, I suspect it is small enough to be passed by value, I don't think it make sense that it will be larger than the underlying enum size."
395475265,12144,glassez,2020-03-20T07:43:05Z,"Ok, seems you're right."
395530487,12144,jagannatharjun,2020-03-20T09:50:09Z,yeap you're right
395532977,12144,jagannatharjun,2020-03-20T09:54:58Z,"My first thought was ->
```
void LogListView::resetModel() {
  auto model = qobject_cast<BaseLogModel *>(model());
  model->resetModel();
}
```
but this will not work, because we have a filter mode inside MessageView, will have to add another check from FilterModel and then cast its model to baselogmodel, doesn't it will spill the implementation detail everywhere, any suggestion?"
395618715,12144,Chocobo1,2020-03-20T12:58:56Z,Do you really need the dummy parameter?
395619605,12144,Chocobo1,2020-03-20T13:00:36Z,fix coding style please.
395621386,12144,Chocobo1,2020-03-20T13:04:11Z,"`QString::fromLatin1(""%1 - %2"")`"
395621680,12144,Chocobo1,2020-03-20T13:04:48Z,Please add an empty line between every switch cases.
395625320,12144,Chocobo1,2020-03-20T13:11:34Z,is it guaranteed that `id` will always be valid and will not read outside of `m_peers`? This looks very unsafe to me.
395629041,12144,Chocobo1,2020-03-20T13:18:08Z,I think we should add `case Log::NORMAL:` here to be explicit. The `default` case should be only used for catching unexpected cases.
395633106,12144,Chocobo1,2020-03-20T13:25:14Z,"`m_msgCount` can be implied from m_cache size, isn't?"
395641695,12144,glassez,2020-03-20T13:39:23Z,"It isn't guaranteed that start index is 0. You should initialize it alongside with initial message count from Logger. E.g. if message count is 0 then start index is 0, otherwise start index should be obtained from first message."
395642611,12144,glassez,2020-03-20T13:40:56Z,Are you just messing around here?
399827482,12144,jagannatharjun,2020-03-29T17:25:12Z,"WebUI functions also take parameters at lastKnownId, should I change them too?

PS: this PR doesn't touch those function, should I really have to touch these?"
399828540,12144,jagannatharjun,2020-03-29T17:33:37Z,"`BaseLogModel::data` does the checking, I don't think both inherited classes can do boundary checking (they don't know indexes)"
399828927,12144,jagannatharjun,2020-03-29T17:36:45Z,"I got this through hard testing 😂

PS: will change to 64, or is there any other number? "
399829115,12144,jagannatharjun,2020-03-29T17:38:24Z,should I leave it? I think the maximum number of visible messages in the current view should be around this number anyway.
399847726,12144,jagannatharjun,2020-03-29T20:16:32Z,removed
399847753,12144,jagannatharjun,2020-03-29T20:16:43Z,fixed
399847791,12144,jagannatharjun,2020-03-29T20:16:57Z,done?
399847915,12144,jagannatharjun,2020-03-29T20:17:45Z,maybe `getMessagedFrom(int lastKnownId)`?
399922535,12144,Chocobo1,2020-03-30T04:36:13Z,please remove it.
399962238,12144,Chocobo1,2020-03-30T06:52:33Z,functions should be listed before variables.
399966381,12144,Chocobo1,2020-03-30T07:02:16Z,same here.
399966740,12144,Chocobo1,2020-03-30T07:03:06Z,Please add an empty line above this.
399968853,12144,jagannatharjun,2020-03-30T07:07:46Z,"nope cache size is fixed, it will fill up to the size specified in the BaseLogModel constructor (64 for now) and then start deleting the least recently used "
399968930,12144,glassez,2020-03-30T07:07:56Z,">m_msgCount can be implied from m_cache size, isn't?

We cache no all messages but several recent ones (in current PR implementation)."
399970101,12144,Chocobo1,2020-03-30T07:10:20Z,`const QString time = QDateTime::fromMSecsSinceEpoch(msg.timestamp).toString(Qt::SystemLocaleShortDate);`
399970948,12144,Chocobo1,2020-03-30T07:12:14Z,"Please try `return {text};` or `return {text, {}, {}};`"
399972211,12144,Chocobo1,2020-03-30T07:14:45Z,"```c++
const QString time = QDateTime::fromMSecsSinceEpoch(peer.timestamp).toString(Qt::SystemLocaleShortDate);
const QString text = QString::fromLatin1(""%1 - %2"").arg(time, (peer.blocked
        ? tr(""%1 was blocked %2"", ""x.y.z.w was blocked"").arg(peer.ip, peer.reason)
        : tr(""%1 was banned"", ""x.y.z.w was banned"").arg(peer.ip)));
```"
399972674,12144,Chocobo1,2020-03-30T07:15:42Z,I would still add an `break;` here
399975016,12144,Chocobo1,2020-03-30T07:20:45Z,move this empty line below `item` declaration.
399975236,12144,Chocobo1,2020-03-30T07:21:12Z,`const int index`
399975755,12144,Chocobo1,2020-03-30T07:22:18Z,What do you mean by using `&&` here?? or you should use `Q_ASSERT_X`
399992350,12144,jagannatharjun,2020-03-30T07:53:49Z,"done..
extra ident is added by uncrusitify should I keep it?"
399992475,12144,jagannatharjun,2020-03-30T07:54:03Z,done
399992551,12144,jagannatharjun,2020-03-30T07:54:10Z,done.
399992596,12144,jagannatharjun,2020-03-30T07:54:15Z,done
399992829,12144,jagannatharjun,2020-03-30T07:54:38Z,removed the string 
399993248,12144,jagannatharjun,2020-03-30T07:55:25Z,"changed to later one, clang-tidy is complaining about missing initializer for the first one. "
399993397,12144,jagannatharjun,2020-03-30T07:55:39Z,done.
399993455,12144,jagannatharjun,2020-03-30T07:55:46Z,done
399993505,12144,jagannatharjun,2020-03-30T07:55:52Z,done.
399993541,12144,jagannatharjun,2020-03-30T07:55:57Z,done.
399993718,12144,jagannatharjun,2020-03-30T07:56:19Z,changed to 64
400000784,12144,jagannatharjun,2020-03-30T08:08:45Z,"I think there were two new lines at the end of the file, you're referring to that right?

removed."
400071195,12144,Chocobo1,2020-03-30T10:02:36Z,These two can be const function.
400073327,12144,Chocobo1,2020-03-30T10:06:10Z,I think it is better to use a lambda instead of defining another function.
400073388,12144,Chocobo1,2020-03-30T10:06:18Z,here too.
400074685,12144,Chocobo1,2020-03-30T10:08:33Z,">done.

Really?"
400077045,12144,Chocobo1,2020-03-30T10:12:33Z,can `view` & `model` be `const T *`?
400215571,12144,jagannatharjun,2020-03-30T14:01:34Z,done please have a look.
400216253,12144,jagannatharjun,2020-03-30T14:02:27Z,I moved the contextmenuhandling in executionlogwidget please have a look..
400631202,12144,Chocobo1,2020-03-31T04:07:33Z,"no, it is too long."
401792559,12144,jagannatharjun,2020-04-01T17:38:14Z,yes. changed the pointers to const
401792696,12144,jagannatharjun,2020-04-01T17:38:28Z,replace with lambda version
401792820,12144,jagannatharjun,2020-04-01T17:38:38Z,changed with lambda versions
401792985,12144,jagannatharjun,2020-04-01T17:38:53Z,functions are removed
401793086,12144,jagannatharjun,2020-04-01T17:39:03Z,ok replaced.
401793295,12144,jagannatharjun,2020-04-01T17:39:27Z,"sorry, somehow missed.
please check again."
402031403,12144,Chocobo1,2020-04-02T03:27:10Z,"I don't think this should have `mutable`, it can but seems it isn't really needed."
402032789,12144,Chocobo1,2020-04-02T03:32:58Z,Why do you omit the `context` parameter? IMO it is good practice to always specify `context` https://doc.qt.io/qt-5/qobject.html#connect-5
402032853,12144,Chocobo1,2020-04-02T03:33:14Z,here too.
402034183,12144,Chocobo1,2020-04-02T03:38:51Z,`const int initialSize`
402034598,12144,Chocobo1,2020-04-02T03:40:42Z,isn't this redundant? `m_startIndex` already defaults to `0`
402035087,12144,Chocobo1,2020-04-02T03:42:46Z,When will this condition happen? I don't understand.
402037462,12144,Chocobo1,2020-04-02T03:53:28Z,Does it help if this is enlarged to `128` or `256`? Also please add a comment of the criteria of setting this value.
402040130,12144,Chocobo1,2020-04-02T04:05:13Z,"this variable name is too vague, can it be renamed to `msgIndex`?"
402073749,12144,jagannatharjun,2020-04-02T06:15:02Z,please see https://github.com/qbittorrent/qBittorrent/pull/12144#issuecomment-607643160
402074601,12144,jagannatharjun,2020-04-02T06:17:43Z,"please see https://github.com/qbittorrent/qBittorrent/pull/12144#discussion_r395641695


sorry I remember initializing m_startIndex to -1, but I somehow missed to push the changes, extremely sorry."
402079895,12144,jagannatharjun,2020-04-02T06:31:50Z,the insert used in `BaseLogModel::data() const` is not a const data member of `QCache`
402080039,12144,jagannatharjun,2020-04-02T06:32:15Z,added
402080134,12144,jagannatharjun,2020-04-02T06:32:30Z,added
402080168,12144,jagannatharjun,2020-04-02T06:32:35Z,done
402080423,12144,jagannatharjun,2020-04-02T06:33:18Z,done
404286627,12144,Chocobo1,2020-04-06T18:04:25Z,">please see #12144 (comment)

OK, but I mean leaving a comment in code."
404287287,12144,Chocobo1,2020-04-06T18:05:27Z,">sorry I remember initializing m_startIndex to -1, but I somehow missed to push the changes, extremely sorry.

`m_startIndex` still default to `0` in header file, do you intend to change it to `-1` or not?"
404290529,12144,Chocobo1,2020-04-06T18:11:09Z,add whitespace: `new Item {rowData(msgIndex)};`
404299269,12144,jagannatharjun,2020-04-06T18:26:02Z,sorry😢
404309615,12144,jagannatharjun,2020-04-06T18:43:28Z,actually `m_startIndex=-1` causes crashes hmmmmmm
404313727,12144,jagannatharjun,2020-04-06T18:50:28Z,"m_startIndex should be zero here, as the `initialSize` is provided from the derived classes which obtain this value by calling `messageCount` and `peerCount` so `m_startIndex` is guaranteed to be zero here

we need `initialSize` as we'll miss some log message emitted during start up since GUI is initialized after core classes 

the index in `BaseLogModel::addNewMessage(int index)` will be the index of the new message after GUI is initialized but we need previous messages in the view as well(?)"
404936583,12144,Chocobo1,2020-04-07T16:15:11Z,"The last parameter `1` is the same as the default value, you can omit it if you want."
404938188,12144,Chocobo1,2020-04-07T16:17:27Z,"I think this is a better idea: I would omit checking `m_msgCount == 0` above and do boundary check on `msgIndex` instead. To me this seems to be safer.
`if ((m_msgCount < 0) || (m_msgCount > some_upper_limit)) return {};`"
404940523,12144,Chocobo1,2020-04-07T16:20:49Z,"IIRC I suggested this change, now I feel silly... apologies, you are free to omit the empty lines in this `switch()` block if you want."
404942993,12144,Chocobo1,2020-04-07T16:24:17Z,you need to add curly brackets here since the loop consist of multi-lines.
404943759,12144,Chocobo1,2020-04-07T16:25:17Z,`QString::fromLatin1`
404944240,12144,Chocobo1,2020-04-07T16:25:53Z,please move it into the anonymous namespace below.
404947004,12144,Chocobo1,2020-04-07T16:29:34Z,seems this can be `const`
404947213,12144,Chocobo1,2020-04-07T16:29:51Z,`(timeWidth + fontMetrics.width(SEPERATOR))`
404947840,12144,Chocobo1,2020-04-07T16:30:41Z,"I'm not sure, is this required?"
404950805,12144,Chocobo1,2020-04-07T16:35:02Z,"I think this should be at top of this function:
```c++
thisFunc {
    const QPen originalPen = painter->pen();
    painter->save();

    QStyledItemDelegate::paint(painter, option, index);
    // ...
    painter->restore();
}
```"
404952228,12144,Chocobo1,2020-04-07T16:37:14Z,doesn't it reset the pen properties? I mean shouldn't you call `QPen::setColor` instead?
405293696,12144,jagannatharjun,2020-04-08T06:47:11Z,"how about this
`if (!((msgIndex >= m_startIndex) && (msgIndex < m_msgCount))) return {};`"
405296167,12144,jagannatharjun,2020-04-08T06:52:56Z,"this paints background, focus rect and other things except for text, the reason why display role is null is to make this call work correctly "
405297563,12144,jagannatharjun,2020-04-08T06:55:59Z,"it's guaranteed that `QStyledItemDelegate` will return painter in original state(https://doc.qt.io/qt-5/qstyleditemdelegate.html#paint), it may also call `QPainter::save` and I don't know if overlapping save command to Painter will work"
405311629,12144,jagannatharjun,2020-04-08T07:25:18Z,removed
405311901,12144,jagannatharjun,2020-04-08T07:25:52Z,done
405311974,12144,jagannatharjun,2020-04-08T07:25:59Z,done
405312014,12144,jagannatharjun,2020-04-08T07:26:04Z,done
405312080,12144,jagannatharjun,2020-04-08T07:26:12Z,done
405312377,12144,jagannatharjun,2020-04-08T07:26:47Z,done
405312606,12144,jagannatharjun,2020-04-08T07:27:14Z,done
405316829,12144,Chocobo1,2020-04-08T07:35:17Z,I would prefer not having `!` in the statement.
405318105,12144,jagannatharjun,2020-04-08T07:37:37Z,`if ((msgIndex < m_startIndex) || (msgIndex >= m_msgCount))` ?
405319750,12144,Chocobo1,2020-04-08T07:40:41Z,"Off topic:
IIRC we are having issues on progress bar here: https://github.com/qbittorrent/qBittorrent/blob/master/src/gui/transferlistdelegate.cpp#L51 
Could be related..."
405321624,12144,jagannatharjun,2020-04-08T07:44:10Z,done
405328817,12144,jagannatharjun,2020-04-08T07:56:32Z,"Hmm may be you're right, but the issues are mainly on linux based systems and i don't have linux machine to test on."
405353903,12144,glassez,2020-04-08T08:38:14Z,">I don't know if overlapping save command to Painter will work

Docs clearly state that Painter pushes its state onto ""stack"" so it will work."
405622962,12144,glassez,2020-04-08T15:42:35Z,">maybe getMessagedFrom(int lastKnownId)?

No. As I said before this name is meaningless from Logger perspective (since it knows all its messages). It can be just `getMessages(int startId)` which literally means ""give me all the messages starting with some specific ID""."
287553240,10702,glassez,2019-05-25T06:35:53Z,Tracking changes in the style file is too much!.. Dissaproved.
287554349,10702,jagannatharjun,2019-05-25T07:25:41Z,"Helps when making new style file, helped me myself when i was testing this.

Think about the designer, don't have to restart qbittorrent again and again

Though I am ready to remove this if you insist"
287556131,10702,glassez,2019-05-25T08:45:02Z,"My belief is that minor features that are not directly related to the main purpose of the application should be implemented as less expensive as possible. Interface customizing is minor feature and ""Helps when making new style file, helped me myself when i was testing this"" is even more minor (qBittorrent isn't Style design studio).
>Think about the designer, don't have to restart qbittorrent again and again

Reloading the style file on demand (when applying application settings) is more than enough."
287556156,10702,glassez,2019-05-25T08:46:21Z,"We don't use ""get"" prefix in getter names."
287563413,10702,glassez,2019-05-25T13:49:08Z,Please don't produce such a long lines. You can place comment before affected code and split it into several lines.
287597553,10702,glassez,2019-05-26T13:12:42Z,Shouldn't you apply it to QApplication instead?
289048502,10702,zywo,2019-05-30T15:43:36Z,"If I'm not wrong, this data member is never used."
289061060,10702,jagannatharjun,2019-05-30T16:12:39Z,Xd I thought i removed it long time ago
291899853,10702,glassez,2019-06-10T07:01:05Z,Please init it before main window (i.e. one line up).
291900208,10702,glassez,2019-06-10T07:02:53Z,Coding Style issue: opening brace for functions/lambdas should be on its own line.
291900319,10702,glassez,2019-06-10T07:03:29Z,Coding Style issue: missing space after comma.
291901560,10702,glassez,2019-06-10T07:10:03Z,Move this line up (so initialization order follows items order).
291902946,10702,glassez,2019-06-10T07:16:05Z,"Why first parameter is ""nullptr""?"
291903475,10702,glassez,2019-06-10T07:18:24Z,I don't know what you're trying to prevent here. Please explain.
291904727,10702,glassez,2019-06-10T07:23:58Z,"Please don't check int as bool:
```c++
m_qssFilePath.size() > 0
// or
m_qssFilePath.isEmpty()
```"
291905211,10702,glassez,2019-06-10T07:25:59Z,The same as above.
291905894,10702,glassez,2019-06-10T07:28:43Z,We put all internal functions in anonymous namespace.
291906227,10702,glassez,2019-06-10T07:30:08Z,Please implement constructor and make initialization there.
291906755,10702,glassez,2019-06-10T07:32:27Z,"""New"" is redundant in such names."
291907798,10702,glassez,2019-06-10T07:36:31Z,"This name implies that class instance represents some Theme instance. But it realy manages Themes so it still should be called UIThemeManager.
Please note ""UI"" instead of ""Ui"" in used names (to be a correctly written abbreviation)."
291981933,10702,jagannatharjun,2019-06-10T11:56:51Z,"on successful `getopenfilename`, I am inserting a ""Custom"" in ComboBox but this `insert` call calls this function recursively with the 'select' as current text, and we get infinite `getopenfilename` calls "
292278722,10702,glassez,2019-06-11T05:06:53Z,Redundant blank line.
292285812,10702,glassez,2019-06-11T05:48:42Z,"I don't see the need to reinitialize it.
I do not understand why you chose a text-based methods to manage it. Since you have a predetermined number of items, you know their indexes, so it is better to use more efficient index-based methods. Besides, all these functions (fromThemeStr, themeStr) are unnecessary.
```c++
m_ui->comboTheme->addItem(tr(""Default""));
if (UIThemeManager::instance()->isCustomAvailable())
    m_ui->comboTheme->addItem(tr(""Custom""));
m_ui->comboTheme->insertSeparator(m_ui->comboTheme->count());
m_ui->comboTheme->addItem(tr(""Select...""));
m_ui->comboTheme->setCurrentIndex(UIThemeManager::instance()->theme() == UIThemeManager::Theme::Default ? 0 : 1);

connect(m_ui->comboTheme, qOverload<int>(&QComboBox::currentIndexChanged), [&](int index)
{
    if (index == (m_ui->comboTheme->count() - 1)) {
        m_qssFilePath = QFileDialog::getOpenFileName(this, tr(""Select Qss File""), """", tr(""Style File (*.qss)""));
        if (!m_qssFilePath.isEmpty()) {
            m_ui->comboTheme->blockSignals(true);
            if (m_ui->comboTheme->count() == 3)
                m_ui->comboTheme->insertItem(1, tr(""Custom""));
            m_ui->comboTheme->setCurrentIndex(1);
            m_ui->comboTheme->blockSignals(false);
        }
    }
});
```"
292562239,10702,jagannatharjun,2019-06-11T17:00:11Z,"thanks, didn't know about `blockSignals`, still learning XD."
292562698,10702,glassez,2019-06-11T17:01:09Z,"Redundant action in destructor, isn't it?"
292564074,10702,glassez,2019-06-11T17:03:54Z,"Ok, it is reasonable.
Also you can move block/unblock signals outside if/else to prevent unnecessary signal here."
292564483,10702,jagannatharjun,2019-06-11T17:04:52Z,"idk, it's done in `saveoptions` called with every `accept`?"
292565110,10702,jagannatharjun,2019-06-11T17:06:12Z,"well before some commit I was using empty `m_qssFilePath` as some sort of flag, now it's not necessary. "
292565311,10702,glassez,2019-06-11T17:06:37Z,"Sorry, I misread it."
294034162,10702,Chocobo1,2019-06-15T04:19:19Z,Can this be moved into `MainWindow` constructor?
294034250,10702,Chocobo1,2019-06-15T04:23:43Z,This is more suitable at `UIThemeManager::installTheme`
294034282,10702,Chocobo1,2019-06-15T04:25:24Z,"This can be inlined to `UIThemeManager::theme()` and then you don't even need a state for UIThemeManager, isn't?"
294034470,10702,jagannatharjun,2019-06-15T04:35:23Z,glassez said it better to change the stylesheet for the `main application`
294034634,10702,Chocobo1,2019-06-15T04:43:25Z,"No, I mean move it into MainWindow and change qapplication stylesheet from there.
https://doc.qt.io/qt-5/qapplication.html#qApp

styleSheet operations doesn't belong to application class IMO."
294034724,10702,Chocobo1,2019-06-15T04:48:39Z,Better way is create get/set methods in Preference class and use it.
294034821,10702,jagannatharjun,2019-06-15T04:52:59Z,This way I only do it once else we it will do it with every installtheme
294034838,10702,glassez,2019-06-15T04:54:09Z,It can be also done in UIThemeManager class itself.
294035274,10702,Chocobo1,2019-06-15T05:17:47Z,">This way I only do it once else we it will do it with every installtheme

yeah, but what if user removed that folder (by accident or not), unless he recreates it manually he will have to restart app to get it appeared."
294042393,10702,jagannatharjun,2019-06-15T10:23:08Z,How about I create a separate signal `stylechanged` in Preference class and listen for it in `UIThemeManager`
294042473,10702,glassez,2019-06-15T10:26:35Z,"Bad idea. Preferences already has general signal for ""changed"" event. See other classes that use Preferences."
294043483,10702,glassez,2019-06-15T11:02:13Z,Too many blank lines. Only one in a row is acceptable.
294043534,10702,glassez,2019-06-15T11:04:00Z,m_uiThemeFilePath.
294043924,10702,jagannatharjun,2019-06-15T11:21:02Z,done
294043930,10702,jagannatharjun,2019-06-15T11:21:20Z,done
294043936,10702,jagannatharjun,2019-06-15T11:21:31Z,maybe done.
294043940,10702,jagannatharjun,2019-06-15T11:21:41Z,maybe done.
294044252,10702,Chocobo1,2019-06-15T11:35:47Z,"I would place these functions just below `void setLocale(const QString &locale);`, similar to the layout of the option dialog.
And also in .cpp file too."
294044293,10702,Chocobo1,2019-06-15T11:37:02Z,"you are casting `theme` to `int` eventually, you should just make the parameter `int` type."
294044333,10702,Chocobo1,2019-06-15T11:37:47Z,wrong order here and at other places too.
294044376,10702,Chocobo1,2019-06-15T11:39:44Z,`setGUIThemeSelection`
294044382,10702,Chocobo1,2019-06-15T11:39:59Z,`getGUIThemeSelection`
294044468,10702,Chocobo1,2019-06-15T11:43:00Z,This should be a function `applyTheme()` and `UIThemeManager` class should become `GUITheme` namespace.
294044823,10702,jagannatharjun,2019-06-15T11:57:32Z,then what's the point of using `enum class`
294044950,10702,Chocobo1,2019-06-15T12:04:52Z,"Ha, I should be the one asking that problem. Joking aside, this specific function is feeding to/from `m_ui->comboTheme`. The combobox only understands `int` and thus it doesn't need to know (or use) your customized enum class, isn't?
Plugging enum into the middle of it feels unnatural for me."
294049276,10702,jagannatharjun,2019-06-15T14:34:35Z,`setGUITheme`?
294049756,10702,jagannatharjun,2019-06-15T14:50:14Z,"```
 enum Theme
 {
         Default,
         Custom
 };

 ...

 m_ui->comboTheme->setCurrentIndex(Preferences::instance()->theme());
```

isn't above looks more cryptic as compared to this

```
m_ui->comboTheme->setCurrentIndex(
             Preferences::instance()->theme() == UIThemeManager::Theme::Default 
             ? 0 : 1);
```

sure less code, but the latter is not intituitive."
294055354,10702,Chocobo1,2019-06-15T18:12:08Z,"If I were to do it:
```c++
m_ui->comboTheme->setCurrentIndex((Preferences::instance()->getGUIThemeSelection() == 0) ? 0 : 1);
```
Also you introduced a *potential* undefined behavior by `static_cast<UIThemeManager::Theme>` in `Preferences::theme()` which occurs when the value is large to an extent. That's why I prefer making getters/setters as simple as possible and move the logic of verifying the value validness outside of it instead.

>but the latter is not intituitive.

defying your own idea...!?"
294064104,10702,jagannatharjun,2019-06-16T01:17:11Z,"Then I have to write some where what 0 and 1 means in this context.
IMHO I like ""current"" way, but will change if you insist. You're the boss XD"
294064257,10702,jagannatharjun,2019-06-16T01:28:45Z,"Oh ho that what `selection` implies here.
Ok now I understood."
294067229,10702,Chocobo1,2019-06-16T04:27:07Z,"Or perhaps in the current context you can work around by using `bool`:
`void Preferences::setGUIUseCustomTheme(bool)`. It is either custom or not (the default).
"
294086579,10702,jagannatharjun,2019-06-16T14:20:28Z,"I personally like named constants in my code. This way clearly shows the intent.
Having an enum cleanly defines different types of `themes` available. 
IMHO I find you're both suggested ways more complicated. I myself took some time to understand what you meant by `selection` but maybe I'm a little dumb.
idk maybe I'm wrong. @glassez?  "
300320649,10702,glassez,2019-07-04T09:46:44Z,"Why this one is really needed?
I would do its job in UIThemeManager constructor."
300352040,10702,glassez,2019-07-04T11:12:59Z,"It's good idea (and widely used practice) to use custom format name and file extension in such case, IMO. We don't expect any RCC file here but some preformatted content packed in it."
300352939,10702,jagannatharjun,2019-07-04T11:15:43Z,"with latest commit, it is `m_rccFilePath`"
300355855,10702,jagannatharjun,2019-07-04T11:24:08Z,"I don't have any problem, suggestions? "
300363766,10702,glassez,2019-07-04T11:49:17Z,"""Select qBittorrent theme file"" for message.
.qbtheme or something like it for file extension."
300675511,10702,glassez,2019-07-05T13:06:04Z,"We've discussed this already. It must be initialized before the MainWindow. Why did you move it? I only asked you to get rid of the unnecessary method ""applyTheme"", but not to move this one.
You really don't understand why it has to be in this order?"
300676624,10702,glassez,2019-07-05T13:09:52Z,"CustomUIThemePath
And other names accordingly"
300689521,10702,glassez,2019-07-05T13:45:20Z,"IMO, Selection suffix isn't so appropriate. It sounds like state of some control but the option means the UI theme mode (default/custom that is used by the application. So I would use something like UIThemeMode. Or even make it to be boolean option ""UseCustomUITheme"""
300692746,10702,glassez,2019-07-05T13:53:51Z,Settings in the configuration file can be in inconsistent state (custom theme is used but the path is not set) so you should handle this case.
300695121,10702,glassez,2019-07-05T14:00:11Z,Why not log this message?
300696447,10702,glassez,2019-07-05T14:04:06Z,Why did you leave these two methods public? They're not supposed to be accessed outside of the class implementation.
300715498,10702,jagannatharjun,2019-07-05T14:56:28Z,"![image](https://user-images.githubusercontent.com/34717789/60730139-0f129c00-9f62-11e9-9413-12aec073a896.png)
![image](https://user-images.githubusercontent.com/34717789/60730434-bd1e4600-9f62-11e9-85f1-98d8e9e53534.png)
If called before, the main window is not initialized with the previously set theme, idk why,
"
300723197,10702,glassez,2019-07-05T15:20:18Z,"This is weird... how is `-stylesheet`  command line parameter supposed to work in this case?..
I wish I had time to debug it.
Anyway, if you can't figure out what the problem is, you're gonna have to go the other way. I'm looking into the future when the theme will contain icons and other resources, so it should be initialized before creating the GUI."
300727082,10702,jagannatharjun,2019-07-05T15:32:44Z,registerResource in the constructor and `applyStyleSheet` after mainwindow initialization?
300734799,10702,glassez,2019-07-05T15:59:35Z,Looks like we're gonna have to do it this way.
300753968,10702,jagannatharjun,2019-07-05T17:23:28Z,now?
300754137,10702,jagannatharjun,2019-07-05T17:24:16Z,now?
300826544,10702,glassez,2019-07-06T09:50:04Z,"There is the same problem with inconsistent/incorrect settings here.
You should never trust to the configuration file since it can be corrupted for some reason. So you should check/fix the config values before use them."
300826604,10702,glassez,2019-07-06T09:53:05Z,"Please move ""&&"" to the next line.
```c++
if (!m_uiThemeFilePath.isEmpty()
    && (m_ui->comboTheme->currentIndex() == 1))
```"
300826649,10702,glassez,2019-07-06T09:54:10Z,@Chocobo1 will ask you to add `const` here.
300826739,10702,glassez,2019-07-06T09:57:28Z,You should add curly braces since the content of `if` is multiline. (See qBittorrent Coding Guidelines)
300826771,10702,glassez,2019-07-06T09:58:56Z,Please use `LogMsg()` helper.
300826836,10702,glassez,2019-07-06T10:01:39Z,Add `Q_DISABLE_COPY(UIThemeManager)` after it.
300833708,10702,Chocobo1,2019-07-06T14:57:46Z,`const bool use`
300833727,10702,Chocobo1,2019-07-06T14:58:28Z,add `const` to function signature.
300833729,10702,Chocobo1,2019-07-06T14:58:33Z,add `const` to function signature.
300833765,10702,Chocobo1,2019-07-06T15:00:01Z,no default value for UseCustomUITheme? really?
300833778,10702,Chocobo1,2019-07-06T15:00:50Z,still placing in wrong order.
300833833,10702,Chocobo1,2019-07-06T15:03:25Z,wrong comma placement.
300833871,10702,Chocobo1,2019-07-06T15:04:23Z,I don't really insist that you can instead return early on `!Preferences::instance()->useCustomUITheme()` condition.
300833893,10702,Chocobo1,2019-07-06T15:05:18Z,wrong comma placement.
300833987,10702,Chocobo1,2019-07-06T15:09:00Z,Do you need this function? seems not to me as you can inline within `applyStyleSheet`.
300834019,10702,Chocobo1,2019-07-06T15:10:35Z,you should put in the var name.
300834092,10702,Chocobo1,2019-07-06T15:13:33Z,"you should put in the var name... why do I even need to point this (and many other small coding style defectives) out... this is easily seen not in line with rest of file, isn't?"
300834152,10702,Chocobo1,2019-07-06T15:16:13Z,please fill in the 3rd parameter `this`.
300834173,10702,Chocobo1,2019-07-06T15:17:14Z,`const int index`
300834213,10702,Chocobo1,2019-07-06T15:18:29Z,"I would replace """" with {}"
300834627,10702,Chocobo1,2019-07-06T15:34:41Z,please add an empty line above this line.
300834637,10702,Chocobo1,2019-07-06T15:35:12Z,please add an empty line above this line.
300835073,10702,jagannatharjun,2019-07-06T15:48:12Z,This is to handle I/O error in opening of stylesheet
300835179,10702,jagannatharjun,2019-07-06T15:50:40Z,sorry
300851053,10702,Chocobo1,2019-07-07T06:01:05Z,why is it required?
300851072,10702,Chocobo1,2019-07-07T06:02:05Z,"Only in header, remove the `const` in variable."
300851077,10702,Chocobo1,2019-07-07T06:02:13Z,~~here too.~~ never mind.
300851110,10702,Chocobo1,2019-07-07T06:03:35Z,wrap it in `tr()`
300851136,10702,Chocobo1,2019-07-07T06:04:53Z,"and use `.arg()` to concatenate strings, it is better for translators."
300851241,10702,Chocobo1,2019-07-07T06:08:01Z,I would prefer return early on opposite condition. You produced a needless block of indention currently.
300851379,10702,Chocobo1,2019-07-07T06:15:48Z,What is the point of giving an error message about you can't open an internal path? What do you expect the users to react upon seeing this error?
300851408,10702,Chocobo1,2019-07-07T06:17:18Z,"you shouldn't call `readAll` when `open` is failed in any case, it is beyond common sense even if it produces expected behavior."
300851442,10702,Chocobo1,2019-07-07T06:19:18Z,"Now it make sense (to me) to return early: `if (!Preferences::instance()->useCustomUITheme()) {/*setStyleSheet && return*/}`
because you can save an indention in a long block."
300851509,10702,Chocobo1,2019-07-07T06:22:12Z,"This line is too long, please split at the start of &&"
300851528,10702,Chocobo1,2019-07-07T06:23:04Z,And add parentheses around the returned expression.
300851798,10702,Chocobo1,2019-07-07T06:33:19Z,"backticks usually encloses code. Using `""""` is more proper."
300851824,10702,Chocobo1,2019-07-07T06:34:21Z,I would prefer placing functions before variables.
300851913,10702,Chocobo1,2019-07-07T06:37:52Z,this can be `const` too.
300852051,10702,Chocobo1,2019-07-07T06:43:33Z,is it necessary to registerResource in constructor? can't you do it in `applyStyleSheet`?
300852634,10702,glassez,2019-07-07T07:02:33Z,"You didn't follow my previous comments? Just look a little into the future. It is assumed that the themes will contain icons and other resources. So it has to be loaded before we create GUI.
But `applyStyleSheet` doesn't work before GUI (MainWindow) is created (as reported by @jagannatharjun) so we have to apply it after."
300852746,10702,glassez,2019-07-07T07:07:05Z,"Agree.
But error message still needed. I would reformat it to be more user-friendly, e.g. ""Couldn't apply theme stylesheet. Perhaps theme file is invalid. Reason: """
300852801,10702,glassez,2019-07-07T07:09:36Z,As we usually do :+1:
300852977,10702,Chocobo1,2019-07-07T07:15:48Z,understood.
300853042,10702,jagannatharjun,2019-07-07T07:17:46Z,Will remove it.
300853092,10702,Chocobo1,2019-07-07T07:19:19Z,shouldn't you produce a warning (in log) when the path is invalid or register action failed?
300853199,10702,Chocobo1,2019-07-07T07:22:25Z,"At least it should guide users/theme creators to the right direction, about the expected file name."
300853261,10702,glassez,2019-07-07T07:24:27Z,`registerResource()` returns false in case of error. It should be logged in this case.
301174242,10702,jagannatharjun,2019-07-08T15:59:04Z,"#1
```
void UIThemeManager::applyStyleSheet()
{
    QFile qssFile("":uitheme/stylesheet.qss"");
    if (!Preferences::instance()->useCustomUITheme() || !qssFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qApp->setStyleSheet({}); // use default stylesheet
        return;
    }
    qApp->setStyleSheet(qssFile.readAll());
}
```
#2
```
void UIThemeManager::applyStyleSheet()
{
    if (!Preferences::instance()->useCustomUITheme()) {
        qApp->setStyleSheet({});
        return;
    }
    QFile qssFile("":uitheme/stylesheet.qss"");
    if (qssFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qApp->setStyleSheet(qssFile.readAll());
        return;
    }
    LogMsg(QString(tr(""Can't open :/uitheme/stylesheet.qss, error: %1"")).arg(qssFile.errorString())
           , Log::WARNING);
    qApp->setStyleSheet({});
}
```

which one?"
301385835,10702,Chocobo1,2019-07-09T03:47:36Z,"neither
```c++
void UIThemeManager::applyStyleSheet()
{
    if (!Preferences::instance()->useCustomUITheme()) {
        qApp->setStyleSheet({});
        return;
    }

    QFile qssFile("":uitheme/stylesheet.qss"");
    if (!qssFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qApp->setStyleSheet({});
        LogMsg(QString(tr(""Can't open :/uitheme/stylesheet.qss, error: %1"")).arg(qssFile.errorString())
            , Log::WARNING);
        return;
    }

    qApp->setStyleSheet(qssFile.readAll());
}
```"
301386485,10702,Chocobo1,2019-07-09T03:52:12Z,"I would write: `""Failed to register .qbtheme file. Path: \""%1\""""`"
301386821,10702,Chocobo1,2019-07-09T03:54:45Z,"You can also create a const variable to `Preferences::instance()`, code will be much shorter."
301387324,10702,Chocobo1,2019-07-09T03:58:03Z,"`error: \""%1\""`"
301387495,10702,Chocobo1,2019-07-09T03:58:56Z,shouldn't it belong to Log::WARNING?
301492522,10702,glassez,2019-07-09T09:41:43Z,"I would produce more user-friendly Log messages (unless some internals are required to be described there): `Failed to load UI theme from file \""%1\""`. There is enough information to understand what we are talking about both for the user and for the developer."
301494231,10702,glassez,2019-07-09T09:45:48Z,I still don't see the point in showing the application internals in this message...
301535897,10702,jagannatharjun,2019-07-09T11:32:00Z,"maybe the creator miss spell the file and these are for the creator anyway, more information is always good :stuck_out_tongue_winking_eye:

any suggestions for another message."
301539952,10702,glassez,2019-07-09T11:43:45Z,">maybe the creator miss spell the file and these are for the creator anyway, more information is always good 

Yes. But you still should print file path related to theme source root but not to the internal path used by qBittorrent.

>any suggestions for another message

`Couldn't apply theme stylesheet. stylesheet.qss couldn't be opened. Reason: %1`. IMO, the message like this is both user-friendly and informative for the theme creator."
301542508,10702,glassez,2019-07-09T11:50:03Z,"The message should give the user a clear understanding of what is at stake. It should also contain a minimum of information for the developer, sufficient to match the problem with the application code, if necessary."
301571751,10702,Chocobo1,2019-07-09T13:00:11Z,redundant QString
63430288,4936,sledgehammer999,2016-05-16T21:35:56Z,"Are we inventing new ways to use every possible feature of the C++ language in qbittorrent? I would do it in a for loop here.
PS: I don't want you to change it. Just a remark.
"
63433818,4936,sledgehammer999,2016-05-16T22:00:16Z,"delete newline
"
63433823,4936,zeule,2016-05-16T22:00:18Z,"Perhaps it's just me, but `std::transform` shows the purpose more clearly because the STL algorithms are declarative.
"
63433862,4936,sledgehammer999,2016-05-16T22:00:33Z,"delete newline
"
63434494,4936,sledgehammer999,2016-05-16T22:05:40Z,"Repeat the macro because of https://stackoverflow.com/questions/19854371/repeating-q-disable-copy-in-qobject-derived-classes
"
63434820,4936,sledgehammer999,2016-05-16T22:08:11Z,"I think it is better to organize it this way:

``` c++
public:
    explicit PiecesBar(QWidget *parent = nullptr);

    void setTorrent(BitTorrent::TorrentHandle *torrent);
    void setColors(const QColor &background, const QColor &border, const QColor &complete);

    virtual void clear();
    // QObject interface
    virtual bool event(QEvent *) override;
```
"
63435518,4936,sledgehammer999,2016-05-16T22:14:57Z,"Another point is that templates usually bloat the binary size. (again not saying you should change it)
"
63436458,4936,zeule,2016-05-16T22:23:08Z,"Should we have 

``` C++
template <class T>
A complexFunction(T v)
{
...
}
```

and call it like

``` C++
int i; short s;
complexFunction(i);
complexFunction(s);
```

the binary size will increase comparing to

``` C++
A complexFunction(int v)
{
...
}

int i; short s;
complexFunction(i);
complexFunction(s);
```

But here? Why?
"
63437448,4936,sledgehammer999,2016-05-16T22:31:50Z,"It was a general comment.
"
63437895,4936,sledgehammer999,2016-05-16T22:36:37Z,"potential division by zero if `m_piecesCount == 1` or `m_imageWidth == 1`
"
63437916,4936,sledgehammer999,2016-05-16T22:36:50Z,"same here
"
63438437,4936,sledgehammer999,2016-05-16T22:41:42Z,"Do you really need to initialize explicitly `m_image`, `m_pieceColors` and `m_highlitedRegion`? 
"
63440356,4936,zeule,2016-05-16T23:00:23Z,"Well, the code is certainly not clean here and relies on the fact that when we cast float infinity to int, we receive `-MAX_INT` and this value is discarded in the next checks.
"
63440517,4936,sledgehammer999,2016-05-16T23:01:51Z,"I think this should go to the top like the other class.
"
63440540,4936,sledgehammer999,2016-05-16T23:02:05Z,"`QTextStream &stream`
"
63440691,4936,zeule,2016-05-16T23:02:54Z,"But I will fix the code, of course.
"
63440734,4936,sledgehammer999,2016-05-16T23:03:07Z,"I think you have to wording wrong here. It should be:
`files.count() > 1 ? tr(""File in this piece:"") : tr(""Files in this piece:""));`
"
63440931,4936,sledgehammer999,2016-05-16T23:04:11Z,"What is the purpose of this if you're always going to return the same value? For exposing it in the future via a setting?
"
63440997,4936,zeule,2016-05-16T23:04:57Z,"We highlight several pieces if a file is stretched over them.
"
63441000,4936,sledgehammer999,2016-05-16T23:04:57Z,"Shouldn't you drop the exclamation mark here?
"
63441143,4936,zeule,2016-05-16T23:06:21Z,"And only a single piece if it contains more than one file.
"
63441355,4936,zeule,2016-05-16T23:08:37Z,"I must have made a mistake in `isFileNameCorrectionNeeded()` because the generated tooltip texts are correct.
"
63441415,4936,sledgehammer999,2016-05-16T23:09:13Z,"for the same reason I think you should repeat this macro here too
"
63441768,4936,zeule,2016-05-16T23:12:44Z,"The function is virtual, and the overrided one in `PieceAvailabilityBar` returns `true`.
"
63441996,4936,zeule,2016-05-16T23:15:04Z,"Or not :)
"
63442097,4936,zeule,2016-05-16T23:16:04Z,"We do not want to see "".unwanted"" in the `PiecesAvailiabilityBar` (remote files), right?
"
63442147,4936,sledgehammer999,2016-05-16T23:16:37Z,"But here you test ""files.count()"" which doesn't tell you if the file spans multiple pieces.
"
63442389,4936,zeule,2016-05-16T23:18:53Z,"This is the number of files in the piece under the mouse pointer. If the files size is not exactly equal to the piece size, this works.
"
63442412,4936,sledgehammer999,2016-05-16T23:19:08Z,"No we don't. But the name of the function indicates that you don't need the exclamation mark. So you need to changed the returned values or the function name to avoid confusions.
"
63442636,4936,zeule,2016-05-16T23:21:10Z,"OK
"
63442806,4936,sledgehammer999,2016-05-16T23:23:03Z,"Shit I was reading the comparison wrong. But it still can lead to weird outputs. For example one file that occupies one whole piece. The tooltip will read ""Files in these pieces"" which is wrong.
"
63442888,4936,zeule,2016-05-16T23:23:51Z,"Then the negation has to be removed (and the function name is correct).
"
63443322,4936,sledgehammer999,2016-05-16T23:28:04Z,"Now that I am thinking it, is there really a situation where we want to output the "".unwanted"" folder? I think not.
"
63443558,4936,sledgehammer999,2016-05-16T23:30:07Z,"Why this define? I see the different code paths, but why do they achieve?
Is the random user that compiler supposed to know about this define and define/undefine it himself?
"
63443727,4936,zeule,2016-05-16T23:31:44Z,"I think for the ""Progress"" bar (local files) we should output exactly what is on the drive, i.e. including "".unwanted"".  
"
63444051,4936,sledgehammer999,2016-05-16T23:35:02Z,"Yeah. You're right. I am sleepy. I can't think straight.
"
63444139,4936,zeule,2016-05-16T23:36:03Z,"Then I add a check for the files size if `files.count() == 1`
"
63444714,4936,zeule,2016-05-16T23:41:46Z,"I was not sure which layout to use for tooltips and asked people to compare. You may do this too, but after some recent adjustments to the table layout it is almost perfect and before merging I will delete the define and unused code path.
"
63444732,4936,sledgehammer999,2016-05-16T23:41:59Z,"Should I add more pedantry?
Three strings:
1. ""File in this piece"" -> one file that occupies only one whole piece
2. ""Files in these pieces"" -> more than one file that occupy one piece
3. ""File in these pieces"" -> one file that occupies multiple pieces

What happens if user hovers over a piece that has 2 files one of which spans to the next(or previous) piece? Do you highlight those pieces too?
"
63445197,4936,zeule,2016-05-16T23:46:24Z,"> Three strings:

OK

> What happens if user hovers over a piece that has 2 files one of which spans to the next(or previous) piece? Do you highlight those pieces too?

No, I don't. Only the piece under the cursor is highlighted.
"
63447109,4936,sledgehammer999,2016-05-17T00:05:32Z,"And I was wondering from where these came from(I was looking at the 2nd commit diff only).
These don't belong in this commit.
"
63447153,4936,sledgehammer999,2016-05-17T00:06:00Z,"This also doesn't belong in this commit.
"
63447354,4936,zeule,2016-05-17T00:08:23Z,"Ups...
"
63512058,4936,zeule,2016-05-17T12:25:25Z,"Like to be explicit.
"
63599846,4936,sledgehammer999,2016-05-17T20:42:46Z,"remove newline
"
63600704,4936,sledgehammer999,2016-05-17T20:47:50Z,"you need to check for `m_piecesCount` too. Remember it is multiplication and any zero makes the whole multiplicaiton zero.
"
63600743,4936,sledgehammer999,2016-05-17T20:48:06Z,"you need to check for `m_imageWidth` too. Remember it is multiplication and any zero makes the whole multiplicaiton zero.
"
63601164,4936,sledgehammer999,2016-05-17T20:50:32Z,"Lets leverage the language and not be very verbose with no reason. If it has a default constructor don't empty initialize it. So pelase delete those 3.
"
63601404,4936,zeule,2016-05-17T20:51:49Z,"Apparently, there is need for brackets here, because I read this expression incorrectly yesterday too. `m_imageWidth` is in nominator.
"
63601477,4936,zeule,2016-05-17T20:52:15Z,"Same here.
"
63601546,4936,zeule,2016-05-17T20:52:34Z,"OK
"
63601854,4936,sledgehammer999,2016-05-17T20:54:21Z,"You're right. Division and multiplication have the same priority and you go from left to right. But better put the parentheses to be sure.
"
63604633,4936,zeule,2016-05-17T21:09:51Z,"Wouldn't it be more readable to replace `m_imageWidth` and `m_piecesCount` with `float m_pixelsPerPiece`?
"
63605362,4936,sledgehammer999,2016-05-17T21:14:22Z,"Yes, but why float? You can't have eg half a pixel.
"
63606205,4936,zeule,2016-05-17T21:19:41Z,"But we need to store ratio with precision of about 1e-3 (size of a typical display) in order to transform piece index to pixel with 1-pixel precision. If a torrent contains less than 1000 pieces, integer ratio is not enough.
"
63607884,4936,sledgehammer999,2016-05-17T21:30:23Z,"I am probably confused on how you calculate pixelsPerPiece. How do you do it?
"
63608861,4936,zeule,2016-05-17T21:36:33Z,"~~`torrent->info().piecesCount() / image.width()`~~ No, of course no. That was piecesPerPixel. `image.width() / torrent->info().piecesCount()`
"
63610988,4936,sledgehammer999,2016-05-17T21:51:45Z,"Then yes float makes sense.
Remember 2 special cases:
1. The last piece might be smaller than piece_size
2. I can't explain it well. But take into consideration that due to rounding errors the edges (first/last piece) might be off by some pixels. Not too important.
"
63715540,4936,glassez,2016-05-18T14:41:34Z,"Fix coding style for lambda. If you need split it you should use same style as for other functions:

``` c++
[]()
{
    // body
}
```
"
63715744,4936,glassez,2016-05-18T14:42:26Z,"**this** isn't required here.
"
63715974,4936,glassez,2016-05-18T14:43:31Z,"``` c++
std::transform(fileIndices.begin(), fileIndices.end(), std::back_inserter(res), [this](int i)
{
    return filePath(i);
});
```
"
63716223,4936,glassez,2016-05-18T14:44:38Z,"Remove `BitTorrent::` prefix from newly added methods.
"
63716416,4936,glassez,2016-05-18T14:45:33Z,"Fix coding style as I described above.
"
63717022,4936,glassez,2016-05-18T14:48:24Z,"Minor. Do you remember QDebug stream output adds spaces so you will get `Filename ' file ' was not found in torrent ' torrent name '`.
"
63717814,4936,glassez,2016-05-18T14:51:54Z,"You can use `libt` shorthand in BitTorrent *.cpp files.
"
63718539,4936,glassez,2016-05-18T14:55:17Z,"`QPair<int, int>`
Doesn't your uncrustify know this?
"
63718741,4936,glassez,2016-05-18T14:56:07Z,"Fix coding style for initializers.
"
63719373,4936,zeule,2016-05-18T14:58:58Z,"It can not process just two lines.
"
63719809,4936,glassez,2016-05-18T15:00:55Z,"Fix `m_pieces` => `pieces`.
"
63720071,4936,glassez,2016-05-18T15:02:09Z,"Fix coding style.
"
63720395,4936,glassez,2016-05-18T15:03:51Z,"_virtual_ is redundant here!
"
63720598,4936,glassez,2016-05-18T15:04:51Z,"Insert space befor `*`.
"
63721069,4936,glassez,2016-05-18T15:07:03Z,"Fix coding style for initializers.
"
63721683,4936,glassez,2016-05-18T15:09:57Z,"And please don't use uncrustify now unless you sure it will not produce another coding style violations. But you can use discovered violations to upgrade uncrustify.cfg later.
"
63722301,4936,glassez,2016-05-18T15:12:44Z,"Insert space before `&`.
"
63722477,4936,glassez,2016-05-18T15:13:35Z,"Of course, you can use `QVector<QRgb>` instead of const reference.
"
63722581,4936,glassez,2016-05-18T15:14:02Z,"Fix `ratio_n` name.
"
63722815,4936,glassez,2016-05-18T15:14:57Z,"Maybe `return` after to avoid too long `else`?
"
63723580,4936,glassez,2016-05-18T15:18:22Z,"If you're going to use it in a functional context, it is better to give it a verbal name: render.
But, IMO, I would change its `operator()` to `void render()`.
"
63723883,4936,glassez,2016-05-18T15:19:37Z,"Fix `QPair<int,int>` => `QPair<int, int>`
"
63724381,4936,glassez,2016-05-18T15:22:07Z,"Are you sure it should be public?
"
63724770,4936,glassez,2016-05-18T15:23:55Z,"private virtual/abstract methods??? Tear out my eyes!
"
63725195,4936,zeule,2016-05-18T15:26:00Z,"?
"
63726034,4936,zeule,2016-05-18T15:30:10Z,"Well, it is public in `QObject`, so there is no big difference...
"
63727004,4936,glassez,2016-05-18T15:35:10Z,"Why not `protected`?
I don't see much point in making virtual methods private. It only confuses people.
"
63727306,4936,glassez,2016-05-18T15:36:30Z,"Then OK.
"
63728506,4936,zeule,2016-05-18T15:42:28Z,"Because a descendant does not need (and thus disallowed) to call it.

Update: yes, I understand that it _can_ call it. This just shows that the method is not designed for that.
"
63730041,4936,glassez,2016-05-18T15:50:50Z,"Okay. Although they are still abstract.
"
63735814,4936,zeule,2016-05-18T16:23:48Z,"Herb Sutter once wrote a nice [blog](http://www.gotw.ca/publications/mill18.htm) on this subject.
"
63736859,4936,glassez,2016-05-18T16:30:15Z,"I mean insert `return` here and then drop `else` and put its content one indentation level up.
"
63737367,4936,glassez,2016-05-18T16:33:30Z,"If you moved it that way (not the way I showed), you could do it in one line:

``` c++
std::transform(fileIndices.begin(), fileIndices.end(), std::back_inserter(res), 
    [this](int i) { return filePath(i); });
```
"
63737430,4936,zeule,2016-05-18T16:33:57Z,"Does that mean ""create two functions out of this one""?
"
63739160,4936,glassez,2016-05-18T16:43:49Z,"You forget to fix this issue.
"
63739304,4936,glassez,2016-05-18T16:44:38Z,"And what is your comment about this? 
"
63739463,4936,zeule,2016-05-18T16:45:38Z,"It's not my code, but OK.
"
63739539,4936,glassez,2016-05-18T16:46:07Z,"Ok. Forget it. Now I'll see there is some code after `if-else`.
"
63739941,4936,zeule,2016-05-18T16:48:37Z,"I do not want to change the names. The object _is_ renderer, and `operator()` is its natural ""do the only thing you can"" method.
"
63740384,4936,glassez,2016-05-18T16:51:33Z,"Okay, let it remain as is.
"
63740567,4936,sledgehammer999,2016-05-18T16:52:50Z,"I think it is better to leave it. If one is reading he should know immediately that it is virtual.
"
63741156,4936,glassez,2016-05-18T16:56:17Z,"non-virtual CANNOT BE override. In other words: override implies virtual.
"
63741509,4936,sledgehammer999,2016-05-18T16:58:31Z,"I missed ""override"".
"
63786158,4936,zeule,2016-05-18T21:31:39Z,"@sledgehammer999, I think that with this we avoid floating-point arithmetic, but please check. 
"
64022439,4936,glassez,2016-05-20T10:47:15Z,"Remove extra space between last parentheses.
"
64720949,4936,zeule,2016-05-26T10:04:12Z,"Decided to remove `constexpr` for now. Waiting for C++14.
"
64725578,4936,glassez,2016-05-26T10:44:51Z,"Please describe it in short. What changes in C++14 do you wait? 
"
64726799,4936,zeule,2016-05-26T10:57:01Z,"The relaxed `constexpr` restrictions, of course.
"
64732018,4936,glassez,2016-05-26T11:48:25Z,"I thought so. But another question - will it be enough?
"
64733107,4936,zeule,2016-05-26T11:59:35Z,"Sorry, I don't understand you. I just want to put an assertion into a constexpr function. One needs C++14 for that.
"
64742589,4936,glassez,2016-05-26T13:16:50Z,"I'm not sure these relaxation will be enough to use Q_ASSERT in `constexpr` methods.
"
65109630,4936,sledgehammer999,2016-05-30T22:58:48Z,"Forward declaring indexrange the same way, doesn't work?
"
65109908,4936,zeule,2016-05-30T23:09:51Z,"It works, of course. Decided that the file is so tiny that such optimisation is not significant, while, naturally, this way it is more easy to use this header.
"
65110296,4936,sledgehammer999,2016-05-30T23:19:33Z,"I don't know why calculations seem off. Example:
**torrent size** = 9 **bytes**
**piece size** = 2 bytes
**image width** = 500 pixels
**bytesPerPixel** = 0.018

Assuming you want piece 5 (last one) then you get:
(5 \* 2 + 2 / 2) / 0.0.18 = 11 / 0.018 = 611.111!!!
"
65110314,4936,sledgehammer999,2016-05-30T23:20:35Z,"What if the file size is smaller than the image? Extreme case. Look at my example below.
"
65110430,4936,zeule,2016-05-30T23:24:45Z,"the idea behind switching to bytes is that there will be no torrent with size in bytes less than ten times size of screen in pixels. 
"
65110574,4936,zeule,2016-05-30T23:29:58Z,"It will render incorrectly if `image.width() > torrentInfo.totalSize()`, but I thought that this will never happen. And the relative precision of the computations is `image.width() / torrentInfo.totalSize() * 100%`
"
65110604,4936,sledgehammer999,2016-05-30T23:31:27Z,"Sorry I made a mistake. The piece index for the last piece would be 4 not 5. Which gives an answer of 500. But since the image is so much bigger than the torrent size should one byte occupy several pixels?
Shouldn't bytesPerPixel = width / size ?
"
65110699,4936,sledgehammer999,2016-05-30T23:35:08Z,"Don't use curly braces. Use the parentheses.
"
65110704,4936,sledgehammer999,2016-05-30T23:35:21Z,"same here.
"
65110894,4936,sledgehammer999,2016-05-30T23:43:28Z,"and I don't check this one until the first one is resolved.
"
65110983,4936,zeule,2016-05-30T23:45:46Z,"In your example `m_bytesPerPixel == 0` (and see my comment above). If you think that probability to encounter a torrent with size less than 1000 bytes is not zero, or you just don't want to leave any chance to it, I will rewrite this with floating-point numbers.
"
65111049,4936,sledgehammer999,2016-05-30T23:48:14Z,"And I think I get wrong results for this example too:
**torrent size** = 10 MiB
**piece size** = 2 MiB
**image width** = 500 pixels
**bytesPerPixel** = 10240 / 500 = 20.48 = 20

Pos for piece 4 (last one):
(4 \* 2048 + 2048 / 2) / 20 = 9216 / 20 = 460.80

That means that about 40px are allocated for each piece. So 5 pieces occupy 200px. Where do the rest 300px go?
"
65111644,4936,zeule,2016-05-31T00:11:15Z,"I suppose that you meant KiB, not MiB, for the sizes, then bytesPerPixel = 20.

Let's compute pixels per piece: pixelsPerPiece = totalPixels / numberOfPieces = totalPixels / ceil(torrrentSize / pieceSize); In this example numberOfPieces = 5 and pixelsPerPiece = 100. The method computes image positions for the center of the given piece. Exact number is 450, while computation gave 460. The error is 10/450 =  2.2%.

The estimation of the error is: `image.width() / torrentInfo.totalSize() * 100%` = 500 / 10240 *100% = 4.9%;

However, taking a torrent of size 10 MiB we get error value of approx 1920 / (10 \* 2^20) \* 100% =  0.02% and thus a typical error will be 1920*0.02% = 0.384 px.

Should we want precise pointing, we need to compute two image positions: for the beginning of a piece and for the end. Perhaps that would make computations clearer, I don't know. Testing on you showed that I have to either put the approximation used into a comment or rewrite the code using two ends and, perhaps, floating point arithmetic.
"
65112294,4936,sledgehammer999,2016-05-31T00:35:10Z,"Oops you're right. I messed up the units. 

Anyway, I didn't realize you wanted to calculate the position at the center. I think your explanation is enough and IMO the error rate is acceptable.
More comments on what the algos do are welcome for future reference.

And I suppose torrents smaller than the image are so improbable that we shouldn't worry about them.
"
65112442,4936,zeule,2016-05-31T00:40:24Z,"I will add the comment then.
"
65113853,4936,zeule,2016-05-31T01:19:07Z,"The function works incorrectly (don't know details yet), but in multi-file torrent it highlights exactly in the first half of the progress bar.

It is strange that I had not noticed that for a few days.
"
65116531,4936,zeule,2016-05-31T02:21:11Z,"It was an integer overflow when computing value inside of the braces. Will make `m_pieceSize` of type `qlonglong` too,
"
65117432,4936,zeule,2016-05-31T02:36:13Z,"OK, but this is how C++ code will look like in the very near future.
"
65124251,4936,glassez,2016-05-31T05:08:17Z,"But we did accept using it!
Let's be consistent in our actions.

@evsh You agreed to this so easily? After you have fought for this opportunity? You surprise me (not to say otherwise).
"
65153706,4936,sledgehammer999,2016-05-31T09:59:03Z,"I went back and read the relevant issue. Ok, I understand why you want it(to narrow the implicit type conversions). I mistakenly thought that it was only to initialize elements of lists (eg vector, map, hash).
You can leave them then. I guess old habits make my eyes hurt by seeing this ""unusual/different"" invocation.
"
65155861,4936,zeule,2016-05-31T10:15:02Z,"Added a comment which explains the used approximation and qDebug log for a case when it is coarse.
"
65156041,4936,zeule,2016-05-31T10:16:27Z,"Thank you, @glassez 
"
65188017,4936,zeule,2016-05-31T14:08:47Z,"Just realised that using the `PieceRange` abstraction I can make the interface of this class cleaner and remove one of the approximations (for the piece center).
"
65192496,4936,zeule,2016-05-31T14:31:20Z,"@sledgehammer999, @glassez 
Take a look, please. As to me the new functions is more correct and cleaner.
"
65194125,4936,zeule,2016-05-31T14:39:08Z,"The `IndexRange` type seems to be too general to be a member of the `BitTorrent` namespace? 
"
65207857,4936,glassez,2016-05-31T15:41:07Z,"Of course. Move it into global namespace and its file in `base/` directly.
"
65208026,4936,glassez,2016-05-31T15:42:03Z,"I don't like the use **class** keyword in this context.
"
65208634,4936,glassez,2016-05-31T15:45:05Z,"Some incorrect indentation...
"
65209909,4936,glassez,2016-05-31T15:51:19Z,"The use of ternary operator with such cumbersome constructions inside looks horrible.
IMO, in this case it's better (more readable) to use ""earlier return"" or `if-else`:

``` c++
if (m_bytesPerPixel < 0) return makeInterval(0, 0);

return makeInterval<ImageRange::IndexType>(
    (static_cast<qlonglong>(pieces.first()) * m_torrentInfo.pieceLength()) / m_bytesPerPixel,
    (static_cast<qlonglong>(pieces.last()) * m_torrentInfo.pieceLength() + m_torrentInfo.pieceLength(pieces.last() - 1)) / m_bytesPerPixel);
```

```
```
"
65216509,4936,zeule,2016-05-31T16:26:23Z,"class → typename
"
65216630,4936,zeule,2016-05-31T16:26:56Z,"Simplified. What's wrong with the indentation?
"
65218017,4936,glassez,2016-05-31T16:35:47Z,"Now here is the extra space...
"
65218415,4936,glassez,2016-05-31T16:38:09Z,"> What's wrong with the indentation?

Next indentation level should be more indented than previous one.
"
65220088,4936,zeule,2016-05-31T16:48:15Z,"Isn't it the case here?
"
65223258,4936,glassez,2016-05-31T17:08:19Z,"> Isn't it the case here?

Your previous code was:

``` c++
return m_bytesPerPixel < 0
       ? BitTorrent::makeInterval(0, 0)
       : BitTorrent::makeInterval<ImageRange::IndexType>(
    (static_cast<qlonglong>(pieces.first()) * m_torrentInfo.pieceLength()) / m_bytesPerPixel,
    (static_cast<qlonglong>(pieces.last()) * m_torrentInfo.pieceLength() + m_torrentInfo.pieceLength(pieces.last() - 1)) / m_bytesPerPixel);
```

The last two lines should be more indented than 
`: BitTorrent::makeInterval<ImageRange::IndexType>(`
"
65225281,4936,zeule,2016-05-31T17:20:48Z,"Oh, I see. Thanks!
"
65469602,4936,sledgehammer999,2016-06-02T00:58:52Z,"Question: since begin() is the same as first() shouldn't end() be the same as last()?
I am under the impression you offer those for compatibility, right?
"
65536695,4936,zeule,2016-06-02T13:17:15Z,"You are right, this id for compatibility, and as such, end() must point to one after the last element.
"
65552916,4936,sledgehammer999,2016-06-02T14:43:11Z,"I suppose you mean last() and end() are both correct as they are now, right?
"
65553778,4936,zeule,2016-06-02T14:47:43Z,"Yes.
"
778597745,15915,glassez,2022-01-05T07:30:30Z,Note for myself: this line is incorrect.
781161531,15915,Chocobo1,2022-01-10T12:46:53Z,"You can remove those unused headers:
```
#include <QMimeDatabase>
```"
781182424,15915,Chocobo1,2022-01-10T13:17:32Z,I would move comparison operators out of class if possible. Or at least make them `friend`.
781183175,15915,Chocobo1,2022-01-10T13:18:38Z,"Those operators without assignment (`/`, `+`) should be out of class if possible. Or at least make them `friend`."
781185169,15915,Chocobo1,2022-01-10T13:21:29Z,"I would rename the variables to `from, to`. 
The same to `renameFile()`"
781188890,15915,Chocobo1,2022-01-10T13:26:22Z,I would either rename it to `forceRemoveFile(const Path &path)` or merge it with `removeFile()` (try usual remove first then adjust permission if failed).
781191909,15915,Chocobo1,2022-01-10T13:30:24Z,It might be a good idea to sort this block alphabetically so that functions with similar prefixes will be placed next to each other.
781195799,15915,Chocobo1,2022-01-10T13:35:34Z,"This should answer you:
https://man7.org/linux/man-pages/man2/fstatfs64.2.html
>path is the pathname of any file within the mounted filesystem.

Therefore it can't be the mount point IIRC (or it can? well you have to test it to be sure...)

Well I don't really expected to see such comments in code, those can be asked on the net instead..."
781199929,15915,Chocobo1,2022-01-10T13:41:03Z,Can't you do these operations on `Path` instead of on `QString`?
781203795,15915,Chocobo1,2022-01-10T13:45:59Z,"Since this looks like a shim, I would write it:
```c++
return operator()(left.toString(), right.toString());
```
The same applies to other new functions in this file."
781205591,15915,Chocobo1,2022-01-10T13:48:19Z,"maybe?
```c++
const Path watchedFolder {it.key()};
```

And other similar instances in this file (where `auto` or `auto&` is used)"
781209326,15915,Chocobo1,2022-01-10T13:53:03Z,maybe use \`path\` to denote the variable and not the type.
781232347,15915,glassez,2022-01-10T14:21:02Z,"> I would move comparison operators out of class if possible. Or at least make them `friend`.

Please remind me why it is better?"
781243225,15915,glassez,2022-01-10T14:33:26Z,"> path is the pathname of any file within the mounted filesystem.

But both `some/path/.` and `some/path` point to the same place, don't they?"
781244849,15915,glassez,2022-01-10T14:35:18Z,"> Can't you do these operations on `Path` instead of on `QString`?

No, since `Path` don't store unclean/redundant paths like `some/path/.`"
781248193,15915,Chocobo1,2022-01-10T14:39:04Z,"IIRC it was for implicit type conversion and/or more degree of freedom on the right hand side when doing comparisons. Maybe `Path` doesn't allow/need it, but it is still a good idea to follow it generally."
781344767,15915,Chocobo1,2022-01-10T16:22:27Z,"On a second thought, adding `Path` to `Utils::Compare` might be a bad idea.
IMO there will be 2 types of comparison for a path type. The first is actual path comparison where the case sensitivity of the file system (or perhaps operating system) will be taken into consideration. The second is comparing the path on a string level where the case sensitivity is always true when comparing.
And this is not clear which kind of comparison `Utils::Compare` is doing. For string-like comparison, I would just convert the path to string at the usage site instead."
781348377,15915,Chocobo1,2022-01-10T16:26:44Z,"I suppose not, otherwise I would have update it if I found the opportunity.

Anyway, the point is to remove the simplify the following `if()` block if Path won't ever contain trailing slash."
781352179,15915,Chocobo1,2022-01-10T16:31:01Z,`toNative()`
781352658,15915,Chocobo1,2022-01-10T16:31:33Z,ditto.
781356990,15915,Chocobo1,2022-01-10T16:36:46Z,"```c++
const QString sharedMemoryKey = (instancePath / Path(""shared-memory"")).toString();
```"
781360771,15915,Chocobo1,2022-01-10T16:40:58Z,toNative()?
781362278,15915,Chocobo1,2022-01-10T16:42:42Z,both toNative()?
781363982,15915,Chocobo1,2022-01-10T16:44:30Z,"toNative()?
My conclusion so far is that only when passing value to Qt functions or qbt internal functions can use toString(), otherwise it is toNative()."
781381635,15915,glassez,2022-01-10T17:05:28Z,If scope of this class is limited only to string comparison it should probably be moved in `utils/string/compare.h` as `Utils::String::Compare`.
781386923,15915,glassez,2022-01-10T17:12:18Z,">For string like comparison, I would just convert the path to string at the usage site instead.

If I remember correctly it is used in some kind of sort algorithms so I will need to implement another Compare for Path class and just duplicate all the logic from existing Compare to compare paths in the same way as it was done previously... Have you any better idea?"
781778709,15915,glassez,2022-01-11T05:58:38Z,Done.
781779834,15915,glassez,2022-01-11T06:01:43Z,"> Anyway, the point is to remove the simplify the following `if()` block if Path won't ever contain trailing slash.

Done."
781787516,15915,glassez,2022-01-11T06:23:11Z,">merge it with removeFile() (try usual remove first then adjust permission if failed).

Done."
781792384,15915,glassez,2022-01-11T06:35:50Z,"> I would rename the variables to `from, to`. The same to `renameFile()`

Done."
781793232,15915,glassez,2022-01-11T06:38:02Z,Removed QMimeDatabase. I'm not sure what another headers are unused...
781794734,15915,glassez,2022-01-11T06:41:34Z,">more degree of freedom on the right hand side when doing comparisons.

Seems it's about left side. Any right side can be used when comparators are class members, e.g.:
```c++
bool operator!=(const QString &otherPathStr) const;
```"
781853470,15915,glassez,2022-01-11T08:09:21Z,Changed anyway.
781855417,15915,glassez,2022-01-11T08:11:02Z,Slightly reordered declarations but still using logical relations.
781869218,15915,glassez,2022-01-11T08:23:58Z,"Seems it is used in only one place so I ended up with removing this operators from Compare, and now I process paths as strings there."
782756639,15915,Chocobo1,2022-01-12T06:55:58Z,"`QLatin1String` is still useful here, isn't?"
782758726,15915,Chocobo1,2022-01-12T07:00:29Z,toNative?
782759392,15915,Chocobo1,2022-01-12T07:01:51Z,I think you should still add path header to this file and to searchhandler.cpp too.
782761181,15915,Chocobo1,2022-01-12T07:05:52Z,for function parameter it should be `const char *rhs`. This applies to other similar instances.
782762397,15915,Chocobo1,2022-01-12T07:08:37Z,Is it a good idea to provide this stream operator? it only provides `toString()`.
782764175,15915,Chocobo1,2022-01-12T07:12:29Z,"If it isn't too much trouble for you, I would split it to 2 lines as it is easier to read (for me)."
782766006,15915,Chocobo1,2022-01-12T07:16:26Z,"Not sure why you did it this way.
IIRC the comparison functions is supposed to compare the salient feature of the type. I would do it like this:
```c++
bool operator==(const Path &lhs, const Path &rhs)
{
    return (lhs.toString() == rhs.toString());
}
```"
782768766,15915,Chocobo1,2022-01-12T07:21:45Z,"(for `/`, `+`) Since you already have `friend` version of it, you can just ditch this and declare `friend` version as public."
782772962,15915,Chocobo1,2022-01-12T07:28:19Z,"Seems the outer `Path()` is redundant.
The same in `std::string` overload."
782773461,15915,Chocobo1,2022-01-12T07:29:24Z,`return !(lhs == rhs);`
782775098,15915,Chocobo1,2022-01-12T07:32:34Z,I would rename `rootFolder` to `newRoot` or `newRootFolder`.
782783619,15915,Chocobo1,2022-01-12T07:47:55Z,"Could the path ever be empty?
What about making `Path` always non-empty? (make this an invariant of the type)"
782784616,15915,Chocobo1,2022-01-12T07:49:41Z,maybe name it `root`?
782784750,15915,Chocobo1,2022-01-12T07:49:54Z,maybe just `parent`?
782789814,15915,Chocobo1,2022-01-12T07:58:11Z,"Is it a good idea to expose this signature instead?
```c++
int Path::compare(const Path &other, const Qt::CaseSensitivity caseSensitivity) const
```"
782821026,15915,glassez,2022-01-12T08:41:44Z,It is useful in some scenarios. Of course it could be done differently but I would prefer postpone this to further optimization.
782824267,15915,glassez,2022-01-12T08:45:59Z,But it seems disallow empty paths will add a hell lot of headaches. You even can't provide non-throwing constructor to create Path from string.
782836123,15915,glassez,2022-01-12T08:55:40Z,"> My conclusion so far is that only when passing value to Qt functions or qbt internal functions can use toString(), otherwise it is toNative()

It's quite the opposite. It makes sense to convert paths to a native form only when it is really necessary, i.e. when we call third-party functions or show them to the user. Everything else is extra heat generation (don't forget that they are stored in uniform format).

Note, that I try to avoid changing format in WebAPI etc.(although they are used inconsistently there)."
782840320,15915,glassez,2022-01-12T08:58:25Z,"But I just emphasize that shared memory key isn't a path. It is just based on some path.
I can change it anyway, if you feel it is better."
782845919,15915,glassez,2022-01-12T09:03:37Z,"> for function parameter it should be `const char *rhs`.

It is intention to use `const char[]` since it should be applicable to string literals written in the code only. Any other char arrays shouldn't be treated as latin1 strings."
782929789,15915,glassez,2022-01-12T10:28:16Z,It is needed for QVariant.
782936779,15915,glassez,2022-01-12T10:37:20Z,"> Is it a good idea to expose this signature instead?

It seems to me that the concept of greaterThan/lessThan is not very applicable to the path. Only the concept of equal (not equal) makes sense.
Anyway, as I said above, `It does not pretend to be general purpose solution`. If such a method is really required in the future we'll add it."
782938345,15915,glassez,2022-01-12T10:39:21Z,"> I would rename `rootFolder` to `newRoot`

<del>Then method would be `addRoot()`?</del>

`new` prefix is associated with some kind of changing for me (e.g. replace something old with new counterpart)."
783034240,15915,glassez,2022-01-12T12:35:47Z,"One more time... There is no point in converting it to a native format in order to transfer it to another qBittorrent instance, where it will be converted back to uniform format inside Path."
783035550,15915,glassez,2022-01-12T12:37:44Z,"Apparently, I hooked it by accident. Reverted. "
783038975,15915,glassez,2022-01-12T12:42:28Z,"> I think you should still add path header to this file and to searchhandler.cpp too.

Done."
783040524,15915,glassez,2022-01-12T12:44:44Z,"> If it isn't too much trouble for you, I would split it to 2 lines as it is easier to read (for me).

Ok."
783043821,15915,glassez,2022-01-12T12:49:03Z,Why do you think so? `Path(const QString &)` constructor is explicit.
783045328,15915,glassez,2022-01-12T12:51:05Z,">`return !(lhs == rhs);`

Do you think indirection is better? Just to reduce the number of friend functions?"
783049239,15915,glassez,2022-01-12T12:56:22Z,"> maybe name it `root`?

I would still emphasize that it is single path item. Isn't it useful?"
783050847,15915,glassez,2022-01-12T12:58:25Z,"> maybe just `parent`?

I'm used to `parent` being related specifically to the object model in Qt. Here it is the parent part of the path."
785392593,15915,Chocobo1,2022-01-16T05:23:26Z,never mind.
785392903,15915,Chocobo1,2022-01-16T05:29:11Z,"If I read correct, those will be write to file on disk, right? And since the file is human readable (or even editable) then it should show the correct path separator."
785393174,15915,Chocobo1,2022-01-16T05:33:15Z,">Any other char arrays shouldn't be treated as latin1 strings.

Or is it possible to use `QLatin1String` as the parameter instead?
Using `char[]` or `char*` can't really guard against misuse (non latin1 strings/literals)."
785393324,15915,Chocobo1,2022-01-16T05:36:25Z,"Sorry, I misread."
785393418,15915,Chocobo1,2022-01-16T05:38:11Z,"Or it can be simplified (based on existing code path, so the surface to the internals is smaller):
```c++
return lhs + QString::fromLatin1(rhs);
```
The same applies to `Path operator+(const Path &lhs, const std::string &rhs)`"
785393774,15915,Chocobo1,2022-01-16T05:44:15Z,"I wanted to reduce access to internal/private variables (here is `m_pathStr`) and build functions on a smaller set of *core functions.

>Just to reduce the number of friend functions?

Therefore this is achievable."
785394125,15915,Chocobo1,2022-01-16T05:49:16Z,"OK, we can leave it to later. It is just a wild thought anyway."
785394351,15915,Chocobo1,2022-01-16T05:53:31Z,never mind.
785394375,15915,Chocobo1,2022-01-16T05:54:12Z,"Well I saw `std::filesystem::path` has used the same naming, then never mind."
785394708,15915,Chocobo1,2022-01-16T05:59:55Z,"As a user, it is a bit confusing to see both `isEqualTo()` and `operator==()` exists side by side. Maybe just make this function always compare case insensitively?"
785394801,15915,Chocobo1,2022-01-16T06:01:05Z,wrong indent format used.
785395040,15915,Chocobo1,2022-01-16T06:04:55Z,same here.
785395157,15915,Chocobo1,2022-01-16T06:06:38Z,"toNative()
I think this error message could be shown to the user."
785396254,15915,Chocobo1,2022-01-16T06:24:08Z,"Now I have rethink (back to the basics) about the `Path` class. Now I think the `Path` has only one true form, it is `toNative()`.
`toString()` is actually an (qbt/Qt) artificial/internal thing that provide a faster code path for some operations.

Therefore I would rename `toString()` to something else, maybe `toGenericString()` (idea taken from `std::filesystem::path::generic_string`) and rename `toNative()` to `toString()`. It is also possible to provide a `operator QString()` to show this intention.
"
785396622,15915,Chocobo1,2022-01-16T06:29:26Z,"I might be drifting off... so I'll ask. What kind of path does it support?
I can see absolute path is ok, what about relative path?

Do you intend to support the following usage? (note this is related to security in WebUI/WebAPI usage)
```c++
Path(""/a/b"") / Path(""../"");
Path(""/a/b"") + QString(""/.."");
```"
785397145,15915,glassez,2022-01-16T06:37:47Z,"> If I read correct, those will be write to file on disk, right? And since the file is human readable (or even editable) then it should show the correct path separator.

Well, in this case, apparently you're right. But at a minimum, this will require additional tests to make sure that it does not break, since it wrote with uniform separators initially. And it will definitely break the possibility of a ""painless"" downgrade."
785397412,15915,Chocobo1,2022-01-16T06:40:27Z,">since it wrote with uniform separators initially

If uniform separators were used from the start, then just keep it as is. No need to break things now...
Maybe a comment a code saying this is intended would help developers in the future."
785412915,15915,glassez,2022-01-16T09:24:09Z,"> Maybe just make this function always compare case insensitively?

Then it will be wrong on case sensitive systems. Wouldn't it be better to make it system dependent?
Really we need both comparison way:
1. Accurate comparison (always case sensitive)
2. System dependent comparison (case insensitive on appropriate systems)

We should use system dependent comparison everywhere we need to know whether two paths point to the same file/folder.
Accurate comparison is still useful when we compare old and new paths before moving/renaming since it is valid to change only case of filename even on case insensitive systems.
So question is which of them should be an `operator==()`, and which an additional function?"
785413368,15915,glassez,2022-01-16T09:27:53Z,"> If uniform separators were used from the start, then just keep it as is. No need to break things now...

It will most likely break downgrade.
We can provide additional patch to v4.4.1 that will make it separator independent."
785431330,15915,glassez,2022-01-16T12:03:49Z,"> toNative()
> I think this error message could be shown to the user.

Done."
785432930,15915,glassez,2022-01-16T12:16:46Z,">I can see absolute path is ok, what about relative path?

Of course, the relative paths are supported as well (a relative path is not only the one that contains `.` or `..`).
As I have already said, my intention (at least at the first stage) is not to introduce anything new, but only to improve the current use case (i.e. to save the caller from having to take care of separators where it does not concern it, and from the basic cleaning of paths from redundant elements). This is basically a routine but very extensive code transformation, which should preserve the current logic (except in cases where obvious bugs are noticed, which can be easily eliminated without breaking anything else). Something more advanced requires additional research, so it can be added later in separate PRs.


> note this is related to security in WebUI/WebAPI usage

It may be better to handle such cases outside of the Path class, so as not to make normal use inconvenient."
785434097,15915,glassez,2022-01-16T12:27:29Z,"> rename `toNative()` to `toString()`. It is also possible to provide a `operator QString()` to show this intention.

I can agree with this part of your proposal, but I really don't like the other part of it:


> Therefore I would rename `toString()` to something else, maybe `toGenericString()` (idea taken from `std::filesystem::path::generic_string`)

I really dislike `toGenericString()`. Firstly, I would like to keep it short, since it is too heavily used throughout the code and a long name will really infuriate. Secondly, I still feel like having it more expressive about its essence (that it doesn't transform path into something other, but just returns internal data, to prevent from suggestions to store it in a separate variable if it is used multiple times). I would really call it `data()`."
785435756,15915,glassez,2022-01-16T12:40:44Z,Done.
785435814,15915,glassez,2022-01-16T12:41:14Z,">Or it can be simplified

Done."
785436422,15915,glassez,2022-01-16T12:46:07Z,">IIRC the comparison functions is supposed to compare the salient feature of the type. 

User-friendly representation of type's value isn't always correctly comparable in terms of this type. Apparently we should keep discuss it in https://github.com/qbittorrent/qBittorrent/pull/15915/files#r785412915"
785437837,15915,glassez,2022-01-16T12:57:56Z,"> is it possible to use `QLatin1String` as the parameter instead?

No. Unless you want to go back to where we started:
```c++
Path(QLatin1String(""some/predefined/path""))
```
Even in this case it's enough to have overloads with `QString` parameter.

> Using `char[]` or `char*` can't really guard against misuse (non latin1 strings/literals).

`QLatin1String` doesn't do it either. This is just a way to make the conversion easier/faster when the developer is aware that the string is latin1. In other words, the `Path` class provides some contract in the interface that it assumes `latin-1` to be the encoding of the string literal (unlike QString, which uses UTF-8 for string literals and char arrays)."
785684697,15915,glassez,2022-01-17T07:07:13Z,"> So question is which of them should be an `operator==()`, and which an additional function?

I think `operator==()` should compare in platform dependent way. If we need accurate comparison we can compare them as strings."
786441689,15915,Chocobo1,2022-01-18T06:15:59Z,">the Path class provides some contract in the interface that it assumes latin-1 to be the encoding of the string literal 

I was hoping it can be enforced either at compile-time or run-time (under debug mode)..."
786445182,15915,Chocobo1,2022-01-18T06:25:18Z,">I would really call it data().

OK for me."
786448696,15915,Chocobo1,2022-01-18T06:33:56Z,">which should preserve the current logic (except in cases where obvious bugs are noticed, which can be easily eliminated without breaking anything else). 

This is the concerning part. If this part (relative paths) isn't well-defined, it might cause problems when part of the Path is taking inputs from user/outside world. And I can't be 100% sure whether this is happening now due to bulk changes..
"
786451448,15915,glassez,2022-01-18T06:40:54Z,"> If this part (relative paths) isn't well-defined

It is well-defined. Path class support relative path. It just remove redundancies that doesn't affect the meaning of path (ref. `QDir::cleanPath()`)."
795202961,15915,Chocobo1,2022-01-30T15:28:46Z,"I feel unsafe when reading this part, can you refactor it more to:
```c++
    closeLogFile();

    m_path = newPath / Path(""qbittorrent.log"");
    m_logFile.setFileName(m_path.data());

    Utils::Fs::mkpath(newPath);
    openLogFile();
```

And maybe keep the `if (tmpPath != m_path)` comparison?"
795204960,15915,Chocobo1,2022-01-30T15:43:49Z,"This is removed, is it correct?"
795205926,15915,Chocobo1,2022-01-30T15:51:20Z,will `QFileInfo::exists()`  return true on folders?
795207667,15915,Chocobo1,2022-01-30T16:04:07Z,"I think it is reasonable to provide this if there are any usage of it:
```c++
bool Path::hasExtension() const
{
    return extension().isEmpty();
}
```"
795208523,15915,Chocobo1,2022-01-30T16:10:25Z,Those look like `const` vars.
795208839,15915,Chocobo1,2022-01-30T16:12:57Z,`u'/'`
795210203,15915,Chocobo1,2022-01-30T16:24:03Z,can those (and other default functions) be removed? under C++ rule of zero.
795211524,15915,Chocobo1,2022-01-30T16:34:44Z,You should include the path header.
795211687,15915,Chocobo1,2022-01-30T16:36:22Z,please add `reserve()`
795211756,15915,Chocobo1,2022-01-30T16:37:07Z,`PathList`?
795211851,15915,Chocobo1,2022-01-30T16:38:01Z,"Those errors might be presented to user, so `toString()`"
795212289,15915,Chocobo1,2022-01-30T16:41:15Z,"optional, maybe rename it to `paths` as it isn't a list..."
795212571,15915,Chocobo1,2022-01-30T16:43:51Z,"optional, if possible I would use `{}` as it isn't interesting of the type.
Also in similar code below."
795213142,15915,Chocobo1,2022-01-30T16:48:04Z,`destPath += C_TORRENT_FILE_EXTENSION);`?
795949888,15915,Chocobo1,2022-01-31T18:27:43Z,I think you should revert it.
795954126,15915,Chocobo1,2022-01-31T18:33:18Z,I think those should be `toString()` (and other `data()` instances in this function).
795954577,15915,Chocobo1,2022-01-31T18:33:55Z,`PathList`?
795955061,15915,Chocobo1,2022-01-31T18:34:35Z,`toString()` too.
795956447,15915,Chocobo1,2022-01-31T18:36:26Z,I would include Path class header.
795960319,15915,Chocobo1,2022-01-31T18:41:41Z,Either you should revert `QStringLiteral` back or use `Path` class.
795962569,15915,Chocobo1,2022-01-31T18:44:51Z,Include Path header.
795966521,15915,Chocobo1,2022-01-31T18:49:02Z,`/rss` -> `rss`?
795967438,15915,Chocobo1,2022-01-31T18:50:09Z,wrong order.
795969425,15915,Chocobo1,2022-01-31T18:52:48Z,You should probably recheck all .cpp files whether the Path header is included...
795970845,15915,Chocobo1,2022-01-31T18:54:45Z,please add `reserve()`.
795971941,15915,Chocobo1,2022-01-31T18:56:03Z,is `torrent->hasMetadata()` check redundant now?
795975088,15915,Chocobo1,2022-01-31T19:00:13Z,IMO `toString()` is more accurate even if it doesn't contain path separators.
795977379,15915,Chocobo1,2022-01-31T19:03:26Z,"duplicate... you could also try reviewing your own PR, it is useful."
795980681,15915,Chocobo1,2022-01-31T19:08:00Z,I would use `Path`.
795984512,15915,Chocobo1,2022-01-31T19:13:30Z,I think it should be `toString()`.
795984704,15915,Chocobo1,2022-01-31T19:13:45Z,ditto.
795985048,15915,Chocobo1,2022-01-31T19:14:19Z,`const Path decodedPath { ....`
795985649,15915,Chocobo1,2022-01-31T19:15:12Z,redundant?
795989107,15915,Chocobo1,2022-01-31T19:20:02Z,why change it?
795998054,15915,Chocobo1,2022-01-31T19:30:30Z,"I would like this empty line removed, those are a sequence of non-breakable actions IMO."
796001454,15915,Chocobo1,2022-01-31T19:35:13Z,"maybe call it `isParentOf`?
"
796003365,15915,Chocobo1,2022-01-31T19:38:02Z,"Also it feels a bit weird that it is done this way. I would expect something like `Path::hasParent(path)` instead of other way around.
"
796005655,15915,Chocobo1,2022-01-31T19:41:13Z,"off topic, I think it would be faster by not using replacement: `Path(idString + QLatin1String("".torrent""))`"
796006203,15915,Chocobo1,2022-01-31T19:42:01Z,`toString()`
796007236,15915,Chocobo1,2022-01-31T19:43:32Z,ditto.
796007393,15915,Chocobo1,2022-01-31T19:43:44Z,ditto.
796008842,15915,Chocobo1,2022-01-31T19:45:44Z,"still it should store in native path, no? bencoded file is editable with an editor..."
796009707,15915,Chocobo1,2022-01-31T19:46:56Z,ditto.
796010018,15915,Chocobo1,2022-01-31T19:47:23Z,`const Path resumeFilename(...)`
796012209,15915,Chocobo1,2022-01-31T19:50:35Z,`Path` since it isn't clear what type it returns.
796014264,15915,Chocobo1,2022-01-31T19:53:40Z,"I think it should return `QString` instead.
This can avoid (IMO) confusing code pattern of `filename().data()`"
796018990,15915,Chocobo1,2022-01-31T20:00:11Z,IMO you should use `toString()` in upper code and omit this conversion. The code would be less uncertain due to less `data()`.
796022536,15915,Chocobo1,2022-01-31T20:05:15Z,ditto.
796022873,15915,Chocobo1,2022-01-31T20:05:48Z,ditto.
796023000,15915,Chocobo1,2022-01-31T20:05:56Z,ditto.
796024324,15915,Chocobo1,2022-01-31T20:07:47Z,ditto.
796026761,15915,Chocobo1,2022-01-31T20:11:18Z,`PathList`?
796027592,15915,Chocobo1,2022-01-31T20:12:30Z,"`const Path path`
and the reset of this file."
796030360,15915,Chocobo1,2022-01-31T20:16:39Z,ditto.
796266396,15915,Chocobo1,2022-02-01T05:07:17Z,declaration style..
796267102,15915,Chocobo1,2022-02-01T05:09:50Z,looks like `toString()` since we cannot be certain what processing follows it.
796267544,15915,Chocobo1,2022-02-01T05:11:24Z,"ditto.
and in all other `LogMsg()` instances."
796268963,15915,Chocobo1,2022-02-01T05:16:11Z,`toString()`
796269450,15915,Chocobo1,2022-02-01T05:17:48Z,"declaration style
seems you never review it again your selves after you code it..."
796270696,15915,Chocobo1,2022-02-01T05:22:09Z,you sure this logic is correct? I would stick with the previous logic to be safe.
796271389,15915,Chocobo1,2022-02-01T05:24:02Z,ditto.
796475925,15915,glassez,2022-02-01T10:53:59Z,"> will `QFileInfo::exists()` return true on folders?

Yes."
796540291,15915,glassez,2022-02-01T12:21:14Z,"> And maybe keep the `if (tmpPath != m_path)` comparison?

Then we have to compare them in ""case sensitive"" way, otherwise user won't be able to change only case of some path element."
796678071,15915,glassez,2022-02-01T14:54:38Z,"> This is removed, is it correct?

Yes. It was mistakenly assigned twice.
https://github.com/qbittorrent/qBittorrent/blob/d83f6436997c939bc96e931684e91669370035b9/src/base/bittorrent/dbresumedatastorage.cpp#L316"
797405001,15915,glassez,2022-02-02T09:17:57Z,"> I think it is reasonable to provide this if there are any usage of it:

It is never used."
797405796,15915,glassez,2022-02-02T09:18:52Z,"> Those look like `const` vars.

Applied."
797406996,15915,glassez,2022-02-02T09:20:23Z,"> can those (and other default functions) be removed?

Yes. Except `Path() = default;`.
Done."
797407997,15915,glassez,2022-02-02T09:21:33Z,"> You should include the path header.

Done."
797410579,15915,glassez,2022-02-02T09:24:38Z,"> please add `reserve()`

Added."
797436089,15915,glassez,2022-02-02T09:54:58Z,"Ok, although I don't treat it as a type indication, so it's ok for me to have it as is."
797438203,15915,glassez,2022-02-02T09:57:20Z,"> optional, if possible I would use `{}` as it isn't interesting of the type. Also in similar code below.

Done."
797500340,15915,glassez,2022-02-02T11:13:15Z,"> I think you should revert it.

Accidentally hooked by ""Find and Replace"".
Reverted."
797510991,15915,glassez,2022-02-02T11:27:42Z,"> I think those should be `toString()` (and other `data()` instances in this function).

Initially I returned ""native"" paths only where `toNative()` was used explicitly. Should I change it in entire API to return ""native"" paths?
Is it generally a good idea to make API results dependent on the server platform? I would use uniform paths instead."
797519150,15915,glassez,2022-02-02T11:38:52Z,"> You should probably recheck all .cpp files whether the Path header is included...

You're doing it better. Probably because it's not a problem for me to have indirect inclusions (at least for such global things)."
797526165,15915,glassez,2022-02-02T11:48:43Z,"> is `torrent->hasMetadata()` check redundant now?

""Invalid"" TorrentInfo returns empty list (as it was even previously). So we don't check it almost anywhere in the code."
797528743,15915,glassez,2022-02-02T11:52:20Z,"> IMO `toString()` is more accurate even if it doesn't contain path separators.

Ok, if you don't care about the excessive search for separators that it will cause."
797531353,15915,glassez,2022-02-02T11:55:53Z,"> you could also try reviewing your own PR, it is useful

I've done this several times... Such little things usually go unnoticed in their own code. Especially when there are a hell of a lot of changes that have already been revised and changed several times."
797537047,15915,glassez,2022-02-02T12:03:47Z,"These data (as well as many other similar data related to the GUI state) are saved to the main configuration file only due to a very long-ago mistake that there is still no one to fix. They are not really intended for the user. If someone still climbs here, he should be scared of other things, not ""non-native"" paths. Why should we apply unnecessary transformations in such cases?"
797543734,15915,glassez,2022-02-02T12:12:55Z,"It makes code cleaner, IMO.
Why all caller code should care of what platform is supported currently? It should implement its (upper level) logic. If, for example, support of detecting network file systems on Haiku is added, it will affect only the place that directly depends on it.

This change is in this PR only because I made it along the way."
797548571,15915,glassez,2022-02-02T12:19:39Z,"> maybe call it `isParentOf`?

`Parent` is used in the meaning of the `direct parent`. This method checks for any base path, i.e. if other is `/home/john/music/jazz` it will return true for `/home/john/music`, `/home/john`, `/home` and `/`."
797554168,15915,glassez,2022-02-02T12:27:06Z,">bencoded file is editable with an editor...

It is editable but **it isn't intended** to be edited in a regular way. It is for internal use by torrent applications. So why to do it less efficiently?

P.S. Any binary file ""is editable with an editor"" (hex or even text one) but we don't care..."
797558368,15915,glassez,2022-02-02T12:32:35Z,">I think it should return `QString` instead.

Filename component of path is still path, isn't it? We can easily do something like `Path path = someDirPath / otherPath.filename();`

> This can avoid (IMO) confusing code pattern of `filename().data()`

Ok. I'll try to check whether it add other confusing code instead."
797563008,15915,glassez,2022-02-02T12:38:58Z,"> IMO you should use `toString()` in upper code and omit this conversion. The code would be less uncertain due to less `data()`.

Ok."
797566671,15915,glassez,2022-02-02T12:43:43Z,"> looks like `toString()` since we cannot be certain what processing follows it.

`Path::findRootFolder` returns single-element path. Why to search separators in it?"
797568333,15915,glassez,2022-02-02T12:45:49Z,">seems you never review it again your selves after you code it...

It was redesigned several times even before I published PR... It was something like `const auto newFilePath = Path::fromString(QString(p->new_name()));` previously."
797571221,15915,glassez,2022-02-02T12:49:31Z,The logic is just adjusted to fit using new Path class.
797648275,15915,glassez,2022-02-02T14:15:20Z,"> I feel unsafe when reading this part, can you refactor it more to:

Done."
797650107,15915,glassez,2022-02-02T14:17:07Z,Included here.
799387884,15915,Chocobo1,2022-02-04T11:33:09Z,">Is it generally a good idea to make API results dependent on the server platform?

In this case I think so, because it is referring to some file on the server.

>Should I change it in entire API to return ""native"" paths?

For this PR it should just preserve the original outcomes. So for all other non related, maybe later."
799397970,15915,Chocobo1,2022-02-04T11:48:49Z,"IMO the main reason is consistency, that is, the users saw the paths on gui is saved the same (native separators) on file."
799402196,15915,Chocobo1,2022-02-04T11:55:36Z,">> This method checks for any base path, i.e. if other is `/home/john/music/jazz` it will return true for `/home/john/music`, `/home/john`, `/home` and `/`.

I see. Then I would suggest `bool Path::hasAncestor(const Path &other)`.

>I would expect something like Path::hasParent(path) instead of other way around.

To elaborate a bit. IMO a class function should have `this` as the protagonist and do comparisons with others, e.g. it should provide usage like `Path(""/main/a/b/c"").hasAncestor(Path(""/others""))`.

"
799407445,15915,Chocobo1,2022-02-04T12:04:09Z,">Filename component of path is still path, isn't it? 

IMO file name is more (naturally) like a string. That string can become `Path` but then it gains additional meaning: it is a relative path to a filename. So I would let users explicitly convert to `Path` from string if they really need it.
"
799413215,15915,Chocobo1,2022-02-04T12:13:04Z,">Why to search separators in it?

I still hold the same viewpoint: `data()` is a shortcut and it should only be used if the following code is able to consume it. Otherwise (or if uncertain) it is always `toString()`. I consider this way to be safe even if it is sacrificing some performance."
799415200,15915,glassez,2022-02-04T12:16:18Z,"> IMO the main reason is consistency, that is, the users saw the paths on gui is saved the same (native separators) on file.

Even if file is intended for internal use?"
799417676,15915,Chocobo1,2022-02-04T12:20:10Z,"on the other side, user might want it in uniform style so they can transfer over different OS... so leave it as is.
"
799418327,15915,glassez,2022-02-04T12:21:14Z,"> you sure this logic is correct? I would stick with the previous logic to be safe.

In fact, it even fixes a bug in the old logic, since it explicitly uses `.!qB` extension, not just its length."
799426700,15915,Chocobo1,2022-02-04T12:33:40Z,"The `oldParentPath` is already a full path, isn't? So is `actualStorageLocation()` still needed?"
799439217,15915,glassez,2022-02-04T12:52:39Z,"> The `oldParentPath` is already a full path, isn't?

No, it isn't. Why did you think so?"
799441211,15915,Chocobo1,2022-02-04T12:55:30Z,">Even if file is intended for internal use?

Currently it is unfortunate the file of the context here is still for manual editing... If the file is truly not intended for hand editing, then it would not matter."
799449552,15915,Chocobo1,2022-02-04T13:07:50Z,never mind.
805550642,15915,jagannatharjun,2022-02-14T07:01:41Z,"This causes performance regression during startup
![image](https://user-images.githubusercontent.com/34717789/153815587-6cf51733-f4f7-4df8-a348-1999796c9077.png)

"
805619425,15915,glassez,2022-02-14T08:53:06Z,"> This causes performance regression during startup ![image](https://user-images.githubusercontent.com/34717789/153815587-6cf51733-f4f7-4df8-a348-1999796c9077.png)

#16444 should improve it."
805641875,15915,jagannatharjun,2022-02-14T09:20:02Z,"Is it necessary to use `QMimeDataBase::suffixForFileName` for extension? Maybe leave that to the user if they require a MIME base suffix, they can call it by themselves."
85654958,5877,thalieht,2016-10-30T08:18:32Z,"Coding style is camelCase but it doesn't matter in this case because this method seems to be changed/removed in #5310.
If you could change it back to avoid rebasing #5310 that would be great.
"
85654979,5877,thalieht,2016-10-30T08:19:53Z,"Spaces around `<`
"
85655067,5877,thalieht,2016-10-30T08:22:56Z,"Space before `//` and in the next line.
Typo `bannig`
"
85655179,5877,thalieht,2016-10-30T08:29:45Z,"Parenthesis around `(m_filterPath != newFilterPath)` for clarity. There is no rule for this but i was corrected once if i remember correctly.
"
85655636,5877,dzmat,2016-10-30T09:01:12Z,"fixed
"
85655640,5877,dzmat,2016-10-30T09:01:21Z,"fixed
"
85655641,5877,dzmat,2016-10-30T09:01:29Z,"fixed
"
85655642,5877,dzmat,2016-10-30T09:01:38Z,"fixed
"
88067085,5877,Chocobo1,2016-11-15T17:21:52Z,"Giving `0` by default is bad style IMO, because everyone just ignore it.
You should make use of it when you instantiate the class/variable.
"
88068089,5877,Chocobo1,2016-11-15T17:26:31Z,"Headers are sorted alphabetically, move up 1 line
"
88071948,5877,Chocobo1,2016-11-15T17:45:12Z,"`const` for QStringList is redundant.
You should instead:

``` c++
QStringList Session::getBannedIPList() const;
```
"
88224504,5877,dzmat,2016-11-16T12:13:34Z,"fixed
"
88224785,5877,dzmat,2016-11-16T12:15:26Z,"fixed
"
88229827,5877,dzmat,2016-11-16T12:53:01Z,"Can not give any rationale except that it is autogenerated code by Qt creator. And of course I ignored that parameter when instantiated object that class. I read documentation and and found that NULL parameter is fully legal for QDialog, but creates distinct taskbar entry for window of dialog. So now I pass a parent when creating an object. But I not sure, should I change autogenerated cod of constructor declaration. Also I doubt that this dialog will be used by somebody more somewhere else.
"
91743774,5877,zeule,2016-12-09T16:08:12Z,Redundant variable.
91743958,5877,zeule,2016-12-09T16:09:16Z,Redundant variable.
91744491,5877,zeule,2016-12-09T16:11:01Z,"""...may not be empty."" "
91744730,5877,zeule,2016-12-09T16:12:11Z,Why not `for`?
91745213,5877,zeule,2016-12-09T16:14:38Z,`modified` → `m_modified`
91745432,5877,zeule,2016-12-09T16:15:57Z,Suggest `options_banlist` → `BanListOptions` change.
91746275,5877,zeule,2016-12-09T16:20:36Z,"The text says that you've banned a list. Perhaps,  ""Manually banned IPs"" would be better?. Otherwise, please provide disambiguation for translators (what the list is)."
91746873,5877,zeule,2016-12-09T16:23:45Z,"Same here (banned list of IPs, but not list of banned IPs) ."
91747410,5877,zeule,2016-12-09T16:26:31Z,"What is a ""normal IP""? Actually, what is an ""unnormal IP""? :)"
91748236,5877,zeule,2016-12-09T16:30:48Z,"Please format the initialisation list as follows:
```C++
: base()
, m_memb1()
, m_memb2()
```"
91748333,5877,zeule,2016-12-09T16:31:19Z,Redundant comment
91748784,5877,zeule,2016-12-09T16:33:40Z,"`QMessageBox::warning(..., tr(""Error""),...)` So, is this a warning or an error?"
91749398,5877,zeule,2016-12-09T16:36:38Z,"Everywhere except this title you use ""manual"" term and only here ""user"". Why?"
91753994,5877,dzmat,2016-12-09T17:01:00Z,fixed
91754210,5877,dzmat,2016-12-09T17:02:10Z,fixed
91757003,5877,dzmat,2016-12-09T17:17:19Z,fixed
91757023,5877,dzmat,2016-12-09T17:17:26Z,fixed
91761817,5877,dzmat,2016-12-09T17:46:01Z,"Yes, it's warning, not error. Also I reworded message, please check. "
91762472,5877,dzmat,2016-12-09T17:50:14Z,"**foreach** is widely  used in this program, what is wrong with it? Different lists and foreach iteration looks much better than c++ iterator style for()"
91762506,5877,zeule,2016-12-09T17:50:26Z,"The message is even more cryptic now, as far as I'm concerned. Maybe it would be better to disable the button when the text box is empty?"
91763578,5877,dzmat,2016-12-09T17:57:10Z,fixed
91763841,5877,zeule,2016-12-09T17:58:48Z,"Also, why don't we check the input string here, in the dialog? You may use a validator and get a cleaner UI in addition to a more elegant code."
91764191,5877,zeule,2016-12-09T18:01:22Z,I meant the C++11 range-based `for`. 
91765168,5877,dzmat,2016-12-09T18:07:51Z,"fix type to ""Manually banned IP list"""
91766147,5877,dzmat,2016-12-09T18:13:57Z,"May be ""List of banned IPs"" would be better wording? My English skill is not perfect. "
91768666,5877,zeule,2016-12-09T18:30:10Z,This one is semantically correct.
91833936,5877,dzmat,2016-12-10T11:44:36Z,fixed
91833939,5877,dzmat,2016-12-10T11:44:43Z,"It is consequence of ""copy paste"" from provided here mockups :) Fixed."
91835303,5877,dzmat,2016-12-10T13:33:45Z,"Reworded to ""List of banned IP addresses""."
91835378,5877,dzmat,2016-12-10T13:40:04Z,"normal IP == not malformed. Anyway it was redundant comment, I remove it."
91849185,5877,dzmat,2016-12-11T06:46:04Z,"I read some comparisons and it looks like for() gives slightly more perfomance than Qt foreach(), so I change it to for()"
91853972,5877,dzmat,2016-12-11T11:39:37Z,"Following your logic we should also rename existing methods like  `session::getBannedIPList()` to something like `session::getListOfManuallyBannedIPAdresses()`. It will be fully semantically correct, but I'm not sure that such rename will resolve more problems than create. What other men would  say? "
91854414,5877,dzmat,2016-12-11T12:08:28Z,Renamed class name. Should I also rename file names?
91855392,5877,zeule,2016-12-11T13:04:58Z,"It would be good. Follow the scheme of the surrounding files, please."
91855544,5877,zeule,2016-12-11T13:12:45Z,"Agree with you: ""list"" is unneeded in `getBannedIPList()` because the function signature encodes this piece of information (in the return type). The same is true for the setter. Moreover, this project does not use ""get"" prefix. Hence I would make function signatures as follows:
`QStringList bannedIPs() const;
void setBannedIPs(const QStringList &ips);
`"
91856499,5877,dzmat,2016-12-11T14:04:33Z,"I will do it later, because it will screw up all reviews here."
91857143,5877,zeule,2016-12-11T14:41:58Z,"In ""saving list"" pair the gerund does not pose an action. An article is needed between them, i.e. ""saving the list"". Consider
""'%1' is not a valid IP address and was rejected while applying the list of banned addresses."""
91857246,5877,zeule,2016-12-11T14:47:16Z,"Do not know about performance side of this comparison; my point is that all the code tools like debuggers, formatters, etc. understand what `for()` is out of the box, but you have to teach them (if it is possible) what a custom macro is. "
91940777,5877,dzmat,2016-12-12T12:54:04Z,"Accepted your variant, fixed."
91947708,5877,dzmat,2016-12-12T13:40:11Z,"Reworded message again. Also added validator, so ""Ban IP"" is disabled until valid IP address is entered."
91961879,5877,dzmat,2016-12-12T14:57:00Z,I got curios and roughly counted getSmth() style function declarations. `./src/base/preferences.h` have 71 such declarations and whole project nearly 179. Looks like the train has left the station.
91987289,5877,zeule,2016-12-12T16:48:05Z,"qBt follows Qt style, so, please, remove ""get"" at least."
91990260,5877,zeule,2016-12-12T17:00:35Z,"""Dialog"" → ""Manually banned IPs"" or whatever"
91990826,5877,zeule,2016-12-12T17:03:00Z,"remove ""get"", and maybe remove ""List"" too."
91991226,5877,zeule,2016-12-12T17:04:53Z,camelCase
91992605,5877,zeule,2016-12-12T17:11:17Z,"""arg1""? Why ""1""? And I'm curious why not a `QValidator`? A validator can prevent entering a wrong text, and that is a waybetter than checking what is wrong with the input."
92396444,5877,dzmat,2016-12-14T13:55:01Z,fixed
92396825,5877,dzmat,2016-12-14T13:56:51Z,renamed to `BannedIPs()`
92397101,5877,dzmat,2016-12-14T13:58:12Z,also renamed `setBannedIPList()` --> `setBannedIPs()`
92399060,5877,dzmat,2016-12-14T14:08:23Z,"Oops. Fixed and removed redundant group title. 
![_2016-12-14_21-06-24](https://cloud.githubusercontent.com/assets/14874367/21184977/65abe158-c241-11e6-9186-550cbb548fca.png)
"
92407770,5877,dzmat,2016-12-14T14:50:21Z,"1. renamed arg1 to ip. 
2. QRegExpValidator does not fits good here. Custom validator will be just more complicated wrapping around `libtorrent::address::from_string` than my code.
Also i dislike UI designs when input field suddenty drop my input when it does not pass intermediate validator check. It is enough that action button is disabled while there is wrong value in input, but edit is not blocked. 

Use case: I copy IP that I want to ban from somewhere and also copied some letters to the left of IP. (May be I was in a hurry, or there is selection problems.) I want to paste it into qbittorent, cut off wrong letters and ban it, but ta-da - validator does not allow me to paste because is will be wrong value, and it force me to use intermediate text editor paste-strip-copy steps. 

Also don't forget about maintaining complicated custom validator code, and such principles like KISS and YAGNI"
92408917,5877,dzmat,2016-12-14T14:55:33Z,fixed.
92410194,5877,zeule,2016-12-14T15:01:18Z,"camelCase, please (""bannedIPs"")"
92410621,5877,zeule,2016-12-14T15:03:29Z,"```C++ 
return ec ? false : true;
```
if you like (just to save a line)."
92411311,5877,zeule,2016-12-14T15:06:30Z,What if `bannedIPLis` contains this IP already? Related question: shouldn't `bannedIPList` be sorted?
92411533,5877,zeule,2016-12-14T15:07:26Z,Redundant variable 
92411941,5877,zeule,2016-12-14T15:09:08Z,"`static`? Or move it out of the class completely.  Also, a bit of code earlier would look clearer if you rename this function:
```C++
 m_ui->pb_BanIP->setEnabled(isValidIP(ip));
```"
92412536,5877,zeule,2016-12-14T15:11:29Z,"Again can't understand why ""List of"" is here."
92415092,5877,zeule,2016-12-14T15:22:08Z,camelCase (banListButton)
92417406,5877,zeule,2016-12-14T15:31:55Z,"Are you a member of List Admirers Society? :)  Seriously, do you think ""list"" adds anything useful to the meaning of the identifier?  To me it means presence of several entities only, but there is the plural form in the language exactly for that. Is there anything else that I'm missing?"
92418257,5877,zeule,2016-12-14T15:35:34Z,"A caprice, perhaps, but maybe it is better to pad this to the right a bit?  "
92418678,5877,zeule,2016-12-14T15:37:17Z,"May this happen? The button has to be disabled if the text is empty, right? Then why the check is here? "
92418959,5877,zeule,2016-12-14T15:38:29Z,Does this empty line mean something?
92608596,5877,dzmat,2016-12-15T13:31:22Z,fixed
92611250,5877,dzmat,2016-12-15T13:48:00Z,fixed
92611306,5877,dzmat,2016-12-15T13:48:19Z,fixed
92611393,5877,dzmat,2016-12-15T13:48:49Z,fixed
92611603,5877,dzmat,2016-12-15T13:50:06Z,fixed
92618385,5877,dzmat,2016-12-15T14:28:12Z,"Is there such a Society? I would like to _enlist_ in it 😃.
I have put List everywhere because in my brain all processing I have coded is spinning around structured in List entities, not just scattered multiple entities. Briefly, I'm working with List here, not with IPs. 
Anyway I rename it as you wish."
92619054,5877,dzmat,2016-12-15T14:31:39Z,Added 2 indent steps. Not sure that it will survive after Uncrustify run.
92619652,5877,dzmat,2016-12-15T14:35:03Z,"No, fixed it."
92621800,5877,zeule,2016-12-15T14:45:04Z,Thank you.
92622556,5877,zeule,2016-12-15T14:48:53Z,"Please, 
```C++
namespace
{
```"
92624104,5877,zeule,2016-12-15T14:56:36Z,"Not sure about this include. There were efforts to isolate libtorrent inside of `src/base/bittorrent`. To follow that way I would add a helper function there (in fact, just move `isValidIP()`). @sledgehammer999 , what do you think?"
92635589,5877,dzmat,2016-12-15T15:49:05Z,"Not so necessary, because this function is declared locally in cpp file. Nobody should `#include *.cpp`, so it should not contaminate global namespace, if your concerns about it.
Also I thought about static function declaration to exclude it from linkage tables."
92636722,5877,dzmat,2016-12-15T15:53:58Z,"Added static, will wait for helper function relocation decision."
92637546,5877,zeule,2016-12-15T15:57:01Z,"Right, but doing so you are making it very clear that there is no available declaration of this function anywhere, period. I'm concerned about clear reading of the author intentions in the first place."
92641414,5877,dzmat,2016-12-15T16:13:23Z,"I had some thoughts about code for alternative IP addition variant, circumventing disabled ""Ban IP"" button. OnReturnPressed() for example. So I had not still removed this obviously redundant checks."
92643513,5877,dzmat,2016-12-15T16:22:23Z,"Yes, I will implement it. But it rises question what to do with duplicates presented via webgui. May be it would be better to write that code in common save path at `Session::setBannedIPs()` ?"
92655655,5877,dzmat,2016-12-15T17:16:44Z,"Read stackoverflow. Folks say that static and anonymous namespace are pretty the same thing for function declaration.
Run grep through project and found only 1 existing anonymous namespace: `./base/preferences.cpp:727:namespace {` 
Also found 16 static functions declarations. Look like people does not care about such things.
Stay confused. 😕 
"
92657688,5877,zeule,2016-12-15T17:26:43Z,"This is because formatting rules for this project make it look as follows:
```C++
namespace
{
```
when I grep for 'namespace$', I get 24 matches "
92662728,5877,zeule,2016-12-15T17:51:57Z,You may use `QHostAddress` to test for IP validity and suppose that it gives the same result as the function from libtorrent. 
92786485,5877,dzmat,2016-12-16T10:22:07Z,"Tested it. With `namespace` GCC gives better error message than `static` in case of conflict. 
Fixed it."
92798337,5877,zeule,2016-12-16T11:43:58Z,"Sorry, I do not know what to do with the Web UI. But why that stops you from making this UI better? "
92808539,5877,zeule,2016-12-16T13:08:25Z,"May I suggest
```C++
return !QHostAddress(ip).isNull();
```
?"
92808567,5877,zeule,2016-12-16T13:08:38Z,Redundant variable
92808682,5877,zeule,2016-12-16T13:09:32Z,"`s, Qt::MatchExactly` (whitespace)"
92808855,5877,zeule,2016-12-16T13:10:57Z,"""The entered..."" should be clearer, as to me."
92808933,5877,zeule,2016-12-16T13:11:50Z,Why do we need this line?
92809176,5877,zeule,2016-12-16T13:14:07Z,Is this a leftover?
92809531,5877,zeule,2016-12-16T13:17:14Z,The return value is not used so far. WIP?
92921591,5877,dzmat,2016-12-17T13:22:12Z,fixed
92921593,5877,dzmat,2016-12-17T13:22:21Z,fixed
92921617,5877,dzmat,2016-12-17T13:24:16Z,"hmm, unscrustify does not fix it automatically. Fixed ."
92921730,5877,dzmat,2016-12-17T13:31:20Z,"`addr` is not a redundant variable. For example  `QHostAddres(""1.2"").toString()` returns ""1.0.0.2"". Also ""0:0:0:0:0::1"" -> ""::1"".
E.g. there is probability of change of the IP string to normalized state using such a trick."
92921830,5877,dzmat,2016-12-17T13:37:06Z,yes. fixed
92922025,5877,dzmat,2016-12-17T13:52:01Z,it's leftover. fixed.
92922210,5877,dzmat,2016-12-17T14:06:46Z,"I am in doubt. Your approach will return false for a ""0.0.0.0"" string, But mine will return true. Would we like to allow user ban ""0.0.0.0"" or to disallow ? "
92922463,5877,zeule,2016-12-17T14:25:23Z,"""0.0.0.0"" may not point to any host eligible for banning. Why would one want to ban it?"
92922475,5877,zeule,2016-12-17T14:26:13Z,"thanks, I will look into it."
92922619,5877,zeule,2016-12-17T14:36:17Z,`#include <QString>`
92922627,5877,zeule,2016-12-17T14:36:49Z,`#include <QHostAddress>`
92922632,5877,zeule,2016-12-17T14:37:51Z,"```C++
return QHostAddress().setAddress(ip)
```
?
Yet `isNull()` check seems to me to be more appropriate."
92925078,5877,dzmat,2016-12-17T17:12:07Z,fixed
92925184,5877,dzmat,2016-12-17T17:18:02Z,Autocomplite let me down. Fixed.
92925189,5877,dzmat,2016-12-17T17:18:13Z,Fixed.
92925557,5877,zeule,2016-12-17T17:37:07Z,"Please, place it between other utils/ headers"
92925564,5877,zeule,2016-12-17T17:37:27Z,"Please, place it between other utils/ sources"
92934179,5877,dzmat,2016-12-18T05:29:02Z,fixed
92934180,5877,dzmat,2016-12-18T05:29:05Z,fixed
92941018,5877,zeule,2016-12-18T13:05:54Z,"I'm really sorry for being such a nasty reviewer, but you misplaced this by one line, so move it one line downward, please (it has to be after misc.cpp, just like you did it with the header file)."
92941634,5877,dzmat,2016-12-18T13:41:24Z,"Fixed. BTW, what to do in case of gui.pri, where I have added files too, but alphabet order is already broken?"
92941805,5877,zeule,2016-12-18T13:49:39Z,"You do not need to fix this unless you want to. If so, leave the fix in its own commit, please."
93216137,5877,zeule,2016-12-20T11:09:08Z,Redundant variable.
93216880,5877,zeule,2016-12-20T11:14:19Z,"I would put the intention of this conversion here, e.g. (my imagination of the author's idea):
```C++
QString s = QHostAddress(ip).toString(); // the same IPv6 addresses could be written in different forms; QHostAddress::toString() result format follows RFC5952; thus we avoid duplicate entries pointing to the same address"
93242378,5877,dzmat,2016-12-20T14:05:16Z,Accept it including comment.
97159338,5877,sledgehammer999,2017-01-20T21:28:56Z,leave a license notice. Copy one from our files. And adjust your name/year/email.
97159480,5877,sledgehammer999,2017-01-20T21:29:42Z,leave a license notice. Copy one from our files. And adjust your name/year/email.
97159732,5877,sledgehammer999,2017-01-20T21:31:13Z,"Disregarding the comment about license, is this really useful? Why not use it directly?"
97160026,5877,sledgehammer999,2017-01-20T21:33:01Z,"No need for the include just forward declare it(and include the header in the .cpp)
Forwards declare it this way:
```c++
class QString;
```"
97160231,5877,sledgehammer999,2017-01-20T21:34:06Z,"Unless, you copied code from some other place in our repo, Dumez isn't a contributor in this file."
97160566,5877,sledgehammer999,2017-01-20T21:36:07Z,same here
97161241,5877,sledgehammer999,2017-01-20T21:39:59Z,"I know that you need the underscores for automatic connection, but you don't need them for the middle part.
eg `on_pb_BanIP_clicked()` -> `on_pbBanIP_clicked()`
Also as a convention we use ""button"" to refer to pushbuttons so the above become `on_buttonBanIP_clicked()`"
97163415,5877,sledgehammer999,2017-01-20T21:53:35Z,`QDialog::accept();`
97164032,5877,sledgehammer999,2017-01-20T21:57:30Z,"This function is private and not used somewhere else. So convert it to a private slot which doesn't take parameter. Just query the IP text inside this function.
And connect it manually in the constructor if you don't want to rename it for autoconnecting."
97164080,5877,sledgehammer999,2017-01-20T21:57:50Z,Redundant. see my comment above.
97164629,5877,sledgehammer999,2017-01-20T22:01:14Z,"As I said above this wrapper isn't necessary, and you don't obtain any space from it.
Also in this particular case in this function you create 2 temporary QHostAddress objects from the same data. One that checks for validity and one that asks a string representation. You should use the same object to do it."
97164889,5877,sledgehammer999,2017-01-20T22:03:02Z,Also conventionally we prefix QLineEdit names with `txt`. So `ed_IP` -> `txtIP`.
97165347,5877,sledgehammer999,2017-01-20T22:05:49Z,"```c++
m_ui->pb_BanIP->setEnabled(false);
```"
97165447,5877,sledgehammer999,2017-01-20T22:06:29Z,`txtIP`
97165504,5877,sledgehammer999,2017-01-20T22:06:44Z,`buttonBanIP`
97165581,5877,sledgehammer999,2017-01-20T22:07:15Z,`buttonDeleteIP`
97165854,5877,sledgehammer999,2017-01-20T22:08:58Z,Why this newline?
97165953,5877,sledgehammer999,2017-01-20T22:09:41Z,`Manually banned IPs`
97166225,5877,sledgehammer999,2017-01-20T22:11:30Z,@qbittorrent/qbittorrent-frequent-contributors should we join the multiple IPs(ipv4+ipv6) using newlines or some other delimiter like `|`? Do we have any informal convention on this?
97166366,5877,sledgehammer999,2017-01-20T22:12:26Z,`Manually banned IPs`
97167297,5877,sledgehammer999,2017-01-20T22:18:55Z,"Due to this we must ensure that the lists are ALWAYS sorted.
I would suggest to do this in the widget for `newList`, but his may come from the web api too.
So `newList` must be sorted here first.
`m_bannedIPs` must be sorted during loading. The type of `m_bannedIPs` is of `CachedSettingValue<>`. This template takes a lamda in the constructor as an argument to manipulate the loaded data. If you can't figure out what to do sort it, then leave a message and I'll help you. (or some other one).
"
97167527,5877,sledgehammer999,2017-01-20T22:20:29Z,Why not use QHostAddress like you do in the widget?
97167961,5877,sledgehammer999,2017-01-20T22:23:23Z,"`""%1 is not a valid IP and was rejected while applying the list of banned IPs.""`"
97168117,5877,sledgehammer999,2017-01-20T22:24:24Z,`Log::WARNING`
97171540,5877,sledgehammer999,2017-01-20T22:48:58Z,"Unless I am mistaken the above 2 lines are useless. All they do is re-parse the ip_filter file and apply it. The new `bannedIPs` aren't applied.
This is done in `Session::processBannedIPs()` which isn't called. But it isn't enough to call it here and be done with it. There is subtle bug in this whole logic. Consider the following:
1. The logic of `Session::processBannedIPs()` is to ask **libtorrent** for the current filter and then append to it the bannedIPs.
2. User has banned 3 IPs.
3. Edits the list, removes one and adds two more.
4. Due to the logic of `Session::processBannedIPs()` we won't unban the deleted IP.

I have a proposal on how to resolve this:
1. If `newList` and `m_bannedIPs` are different, then find the difference(what was deleted from m_bannedIPs).
2. Extend `Session::processBannedIPs()` to take a QStringList argument with a default value of an empty list.
3. Then inside there, if the list isn't empty apply the rules for that list with `0` instead of `libt::ip_filter::blocked` as a flag."
97194992,5877,dzmat,2017-01-21T09:28:59Z,"If I deabbreviate your version, it sounds like a ""manually banned Internet Protocols"". It looks bad.
I know that for a network programmer ""IP"" and ""IP address"" became kind of synonyms, but it is different things.
Of course, if your insist, I will change this name to whatever you want. But we already have done several iterations of renaming with __evsh__ and __thalieht__."
97195171,5877,dzmat,2017-01-21T09:42:09Z,"I had a plan to implement additional filtering in `Session::setBannedIPs()` and this function `isValidIP()` shoud be useful there. It was a cause to create net.cpp and move only one function there. And at that time `isValidIP()` was more complicated. It happened later to became so simple, thanks to __evsh__ ."
97195184,5877,dzmat,2017-01-21T09:42:45Z,fixed
97195197,5877,dzmat,2017-01-21T09:42:59Z,fixed
97195275,5877,dzmat,2017-01-21T09:48:54Z,"Fixed, but I think it is kind of a dirty hack and premature optimization (which is a root of all evil (c) )."
97195280,5877,dzmat,2017-01-21T09:49:23Z,fixed
97195473,5877,dzmat,2017-01-21T10:02:10Z,fixed
97195475,5877,dzmat,2017-01-21T10:02:16Z,fixed
97195480,5877,dzmat,2017-01-21T10:02:50Z,fixed
97195494,5877,dzmat,2017-01-21T10:03:52Z,fixed
97195498,5877,dzmat,2017-01-21T10:04:16Z,fixed
97195653,5877,dzmat,2017-01-21T10:16:20Z,"I argued upped  - it is ""protocol"" vs ""address"" choice. I obviously prefer ""address""."
97195685,5877,dzmat,2017-01-21T10:18:42Z,fixed
97195784,5877,dzmat,2017-01-21T10:27:19Z,fixed
97197152,5877,sledgehammer999,2017-01-21T12:09:34Z,"So, now which is it? I mean now that you simplified it, do you still think it will be useful as wrapping one thing only?"
97197159,5877,sledgehammer999,2017-01-21T12:10:02Z,">Fixed, but I think it is kind of a dirty hack and premature optimization (which is a root of all evil (c) ).

Actually we do this to improve compilation times."
97197176,5877,sledgehammer999,2017-01-21T12:12:04Z,OK I understand. Then feel free to add address/addresses to my proposed string changes.
97197216,5877,sledgehammer999,2017-01-21T12:16:01Z,ok. But you have a leftover backtick after the percentage sign.
97199850,5877,dzmat,2017-01-21T15:13:58Z,deleted `BanListOptions::banIP()` and moved all functionality to `BanListOptions::on_buttonBanIP_clicked()`
97200020,5877,dzmat,2017-01-21T15:22:27Z,It will slightly increase performance in rarely used function and considerable decrease  maintainability of that code IMHO. So I prefer to left it as is.
97200238,5877,dzmat,2017-01-21T15:29:48Z,It is unnecessary because it is done in `BanListOptions::on_txtIP_textChanged()` event handler called because of  `m_ui->txtIP->clear();` call.
97200469,5877,dzmat,2017-01-21T15:40:32Z,"Fixed. I just wonder what is a point in implicit ancestor method calling, if we already call the same method because it is not overridden in banlistoptions widget?"
97200490,5877,sledgehammer999,2017-01-21T15:41:27Z,"FYI, Qt has [qSort(Container & container)](https://doc.qt.io/qt-4.8/qtalgorithms.html#qSort-3) or if you wish use one of the std sorts..."
97200548,5877,sledgehammer999,2017-01-21T15:44:01Z,I want it explicit so a reader can understand immediately that we call the base method.
97200877,5877,Chocobo1,2017-01-21T16:01:35Z,"""Starting with Qt 5.0, you are instead encouraged to use directly the implementations available in the STL""
http://doc.qt.io/qt-5/qtalgorithms.html#qt-and-the-stl-algorithms"
97201348,5877,sledgehammer999,2017-01-21T16:25:44Z,"But my proposal doesn't account for one corner-case bug:
1. User has manually banned an IP that is also included in the IP filter file.
2. Then he deletes it from the manually banned IPs list.

In my proposal step 2 would result in allowing that IP even though the ip_filter includes it(until the user restarts the application).
So would it be wise, to reparse the ip_filter file, add the bannedIPs and set that whole list in libtorrent, discarding the old one?"
97215262,5877,dzmat,2017-01-22T07:27:17Z,"I think that building ip_filter from scratch (reparse file and add manual part ) will be less error prone and more maintainable way to do it. Performance penalty does not matter because it will be not frequent operation, I think."
97892396,5877,sledgehammer999,2017-01-25T22:19:03Z,"These 2 should be moved at the top before the check:
```c++
if (newList == m_bannedIPs)
return; // do nothing
```

Also remove the commented out lines."
98333794,5877,dzmat,2017-01-28T16:17:01Z,"Rewrote more code. Now it double checks for inequality of lists. Also added code for recreation of internal libtorrent ip filter from scratch to implement ""unban"" case.
But i found that manual ban list is enforced to ipfilterlist even when IPFiltering checkbox is disabled. I sink it is an error, isn't it?"
99666237,5877,sledgehammer999,2017-02-06T19:39:26Z,"I think the correct word is ""ensure"""
99666773,5877,sledgehammer999,2017-02-06T19:41:39Z,"```c++
// this method creates ban list from scratch combining user ban list and 3rd party ban list file
```"
99672853,5877,sledgehammer999,2017-02-06T20:09:14Z,typo: 3rd party
99672926,5877,sledgehammer999,2017-02-06T20:09:38Z,typo: 3rd party
99673442,5877,sledgehammer999,2017-02-06T20:12:17Z,It would be a good idea to sort here too. So the first check in setBannedIPs has actually a change to match.
99674248,5877,sledgehammer999,2017-02-06T20:16:28Z,Here I meant to change it to `Manually banned IP addresses...`
99674394,5877,sledgehammer999,2017-02-06T20:17:22Z,`Manually banned IP addresses...`
99823791,5877,dzmat,2017-02-07T13:43:45Z,"It will give us no new functionality but only a twice sort and compare sequence. It is an unnecessary overhead. BTW it is presumed here, that `IPList` is created already in sorted order, because entries in `m_ui->bannedIPList` are maintained in such an order."
99827280,5877,sledgehammer999,2017-02-07T14:00:04Z,">because entries in m_ui->bannedIPList are maintained in such an order.

OK, I didn't know that.

"
61945041,5214,zeule,2016-05-03T19:56:53Z,"It might make sense to make this variable static. However, I can't imagine qBt changing this environment variable at run time.
"
61993662,5214,glassez,2016-05-04T06:19:57Z,"Change this in runtime will cause undefined behaviour or even crash the program. So it must be initialized at program startup and do not change further.
"
61993875,5214,glassez,2016-05-04T06:24:22Z,"This function, like some other (cacheLocation, QDesktopServices*) , needs to be moved to another place, because they sense are not file system utilities. These are shell or environment utilities.
"
61994121,5214,glassez,2016-05-04T06:28:48Z,"SettingsStorage is not the only class that requires modifications. There are some other classes that store all their settings/state/data in the same place. Although it may be enough changes in QDesktopServicesDataLocation for them.
"
62826678,5214,glassez,2016-05-11T10:44:31Z,"Singleton**g**?
"
62827506,5214,glassez,2016-05-11T10:52:18Z,"Why do you leave these ugly wrappers?
Why shouldn't we use Environment utils directly?
"
62827805,5214,glassez,2016-05-11T10:54:44Z,"using namespace Utils::Environment is good idea!
"
62830833,5214,zeule,2016-05-11T11:24:52Z,"OK.
"
62831258,5214,zeule,2016-05-11T11:29:49Z,"I don't understand this function and thus left it as is.
"
62843023,5214,Chocobo1,2016-05-11T13:01:32Z,"Is include guard omitted on purpose?
"
62844932,5214,Chocobo1,2016-05-11T13:14:20Z,"You can add `const` here.
"
62846204,5214,Chocobo1,2016-05-11T13:22:47Z,"maybe just me, you could use a temporary QString to hold the QDir::absoluteFilePath(), will be easier to read.
"
62847648,5214,Chocobo1,2016-05-11T13:31:42Z,"``` c++
const QString dataDirName = QLatin1String(""data"");  // Why not this?
```
"
62848725,5214,Chocobo1,2016-05-11T13:38:33Z,"This `catch` is quite away from the `throw`s, is it a good idea to move up?
"
62849024,5214,Chocobo1,2016-05-11T13:40:37Z,"can you share the reason of handling error by exceptions? I'm curious about it.
"
62850051,5214,Chocobo1,2016-05-11T13:45:58Z,"`const SpecialFolder folder`?
"
62853925,5214,zeule,2016-05-11T14:06:12Z,"Two reasons: I had to signal error from `Application::Application()` and `main()` had many repeative calls to `displayBadArgMessage()` with `return EXIT_FAILURE` (that is in `catch` clause now). 
"
62854902,5214,zeule,2016-05-11T14:11:33Z,"No, it was a mistake. Thanks!
"
62855317,5214,zeule,2016-05-11T14:13:54Z,"Agree, the body of `main()` is too long, we better split it onto several functions.
"
62867711,5214,zeule,2016-05-11T15:17:20Z,"Sorry, can not understand why it would be better with `const`. 
"
62872084,5214,Chocobo1,2016-05-11T15:40:23Z,"By reading the method signature I would suspect `folder` will somehow change to other value, but it didn't.
Well this is a habit of mine...
"
62873297,5214,glassez,2016-05-11T15:46:37Z,"> By reading the method signature I would suspect folder will somehow change to other value, but it didn't.

You read the method signature incorrectly! The `folder` cannot be changed since it passed by value. The method free to change its `folder` copy.
"
62877620,5214,Chocobo1,2016-05-11T16:10:39Z,"> You read the method signature incorrectly! 

You must have misunderstood me.
I meant I suspect the local copy `folder` will somehow change to other value but it didn't.
"
62880615,5214,glassez,2016-05-11T16:28:57Z,"Passing param by value as const creates hard dependency between function signature and its implementation. If in the future we will need to do some preprocessing of this param, we will either have to change the method signature or use some tricks (create additional variables, etc.).
"
62881424,5214,zeule,2016-05-11T16:33:53Z,"I hope that even with this polemic you guys will find a time to look at `QIniSettings` and think whether we can drop it completely, please? :)
"
62884040,5214,Chocobo1,2016-05-11T16:49:41Z,"@glassez 
That sounds like you don't like to add `const` for pass-by-value parameters!?
"
62887959,5214,glassez,2016-05-11T17:14:36Z,"> That sounds like you don't like to add const for pass-by-value parameters!?

Yes. Except some really special cases.
"
62897582,5214,glassez,2016-05-11T18:10:21Z,"It returns the cache dir path and create this directory if it doesn't exist which is overkill. So you may drop this function and use your Environment utils directly.
"
62910921,5214,zeule,2016-05-11T19:30:02Z,"But why it was written? Apparently, somebody encountered a situation when the cache directory was missing. Should we create them all the directories when we create the `SpecialFoldersImpl` object?
"
62923227,5214,zeule,2016-05-11T20:44:47Z,"> Should we create them all the directories when we create the SpecialFoldersImpl object?

After some thinking I like this approach. In `Utils::Envrironment::SpecialFolders::initialize()` we ensure that all paths exist in the same way as we do in `Utils::Envrironment::impl::SpecialFoldersImplCustom::SpecialFoldersImplCustom` and remove all the `QDir::mkpath()` calls from the individual functions. The program can not run without the config, cache, and data directories. As for the downloads directory, we already create it now anyway.
"
63026362,5214,glassez,2016-05-12T14:09:08Z,"Maybe remove `QProcessEnvironment` from constructor params and us `QProcessEnvironment::systemEnvironment()` in constructor body? You don't like yourself the extra things in the interface!
"
63026651,5214,glassez,2016-05-12T14:10:45Z,"There are still some messages? Why such verbosity? Why not just `message`?
"
63027199,5214,zeule,2016-05-12T14:13:38Z,"I wanted to point out that default values are loaded from environment.
"
63027818,5214,zeule,2016-05-12T14:16:51Z,"Usually, exception texts are for developers, that is why.
"
63274950,5214,glassez,2016-05-14T11:38:15Z,"Fix coding style:

``` c++
QString profileDir = m_commandLineArgs.portableMode
        ? QDir(QCoreApplication::applicationDirPath()).absoluteFilePath(QLatin1String(""profile""))
        : m_commandLineArgs.profileDir;
```
"
63274968,5214,zeule,2016-05-14T11:39:41Z,"Are  you thinking that '?' on the next line adds readability?
"
63274985,5214,glassez,2016-05-14T11:41:03Z,"It's better to split such long lines.
"
63275151,5214,glassez,2016-05-14T11:59:23Z,"I am thinking we should following the coding guidelines.
I am thinking the code uniformity adds readability.
"
63275227,5214,glassez,2016-05-14T12:05:43Z,"Why do you love to violate the order? The copyright notice should be placed in reverse chronological order and be as follows:

```
Copyright (C) 2016  Eugene Shalygin <your_email>
```

You can see how it's done!
"
63275282,5214,glassez,2016-05-14T12:08:42Z,"Fix coding style!
"
63275323,5214,glassez,2016-05-14T12:13:27Z,"Why `protected`?
"
63275358,5214,glassez,2016-05-14T12:16:53Z,"Please add parenthesis around `s.size() >= 2` too.
"
63275403,5214,glassez,2016-05-14T12:19:51Z,"Fix coding style!
"
63275406,5214,glassez,2016-05-14T12:20:32Z,"Fix coding style!
"
63275441,5214,glassez,2016-05-14T12:23:30Z,"Please fix param name (use camelCase).
I understand that most likely it got you inherited, but I hope it's not too much trouble you.
"
63275449,5214,glassez,2016-05-14T12:24:18Z,"Insert blank line after.
"
63275515,5214,glassez,2016-05-14T12:28:46Z,"Add space before `*`.
"
63275550,5214,glassez,2016-05-14T12:31:50Z,"This file is an implementation of the classes in the `Utils::Environment` namespace. To use `using namespace Utils::Environment` is a good idea here.
"
63275597,5214,glassez,2016-05-14T12:36:07Z,"Base MUST be independent from App, GUI etc.
"
63275648,5214,glassez,2016-05-14T12:39:58Z,"As I mentioned above, better to remove `Utils::Environment` and `Utils::Environment::Impl` from these names, than so to be perverted here.
"
63275663,5214,glassez,2016-05-14T12:41:02Z,"Please don't mix initializer styles.
"
63275690,5214,glassez,2016-05-14T12:43:21Z,"As **Profile** is abstract class you may have public constructor here.
"
63275700,5214,glassez,2016-05-14T12:44:28Z,"This isn't needed.
"
63276658,5214,zeule,2016-05-14T14:03:31Z,"I might misunderstand you, but there is no public constructor because this is an abstract class.
"
63276688,5214,zeule,2016-05-14T14:05:33Z,"Who then can initialize this singleton, if not Application?
"
63276741,5214,glassez,2016-05-14T14:09:02Z,"I mean you can have public constructor in abstract class. No need extra (protected) section here.
"
63276793,5214,glassez,2016-05-14T14:14:44Z,"Application initializes (almost) all current singletons, but they are independent from it. Just do `initialize()` public.
"
63276809,5214,zeule,2016-05-14T14:16:49Z,"You probably mean that it is impossible to create and instance with pure virtual functions anyway. IMO,  protected constructor in such case is better for documentation/hint reasons. 
"
63276861,5214,zeule,2016-05-14T14:22:00Z,"Bad idea. IMO, a friend declaration, in this case, is not a dependence. Consider the following example:

``` C++
class A {
private:
   friend int main(int, char**);
   static void initialize();
};
```

Does `A` depend on `main()`? No, it utilises the idea that there _has_ to be the `main()` function and only it can initialise the class. The same is here: everyone knows that there has to be an `Application` class in Qt application.
"
63276943,5214,glassez,2016-05-14T14:30:49Z,"Okay, probably you're right here...
"
63276959,5214,zeule,2016-05-14T14:32:24Z,"Glad that you agree.
"
63276965,5214,glassez,2016-05-14T14:32:49Z,"> IMO, protected constructor in such case is better for documentation/hint reasons. 

Okay, if so.
"
63280068,5214,zeule,2016-05-14T18:27:41Z,"@glassez: could you check these changes, please?
"
63280072,5214,zeule,2016-05-14T18:28:03Z,"@glassez: and here too, please.
"
63280264,5214,zeule,2016-05-14T18:43:51Z,"`BoolOption` is an exception (with  its public inheritance). But probably I just need to move `Option::usage()` from `Option` to `BoolOption`.
"
63280543,5214,Chocobo1,2016-05-14T19:06:40Z,"I wasn't going to question it anymore, but I can't hold myself :P
Please, just for once; could you explain (convince) me that this implementation will work fine in my scenario in: https://github.com/qbittorrent/qBittorrent/pull/5214#issuecomment-218716346

I believe that is a very common usage scenario.
Or let me know why my scenario might be invalid.
"
63280594,5214,zeule,2016-05-14T19:11:10Z,"I guess you imply `--portable` switch set. Things will not work in this scenario (obviously). That is why we split the portable mode onto two options.
"
63285751,5214,Chocobo1,2016-05-15T03:48:03Z,"> That is why we split the portable mode onto two options.

I am confused, how do `--configuration` & `--profile` help for this scenario?
"
63288523,5214,zeule,2016-05-15T08:57:05Z,"There are four options added by this PR. Two of them turn on independent features of the portable mode: `--profile` and `--relative-fastresume`. There is one option for configurations (`--configuration) and there is a shortcut`--profile`which is equal to`----profile=$EXE_DIR/profile`and`--elative-fastresume`.

For the use-case noted by @chocobo1 one needs just `--profile` option. Those who use a portable drive for qbt and downloads need both options.
"
63294895,5214,glassez,2016-05-15T17:13:00Z,"IMO, ""relative fastresume"" is wrong wording.
"
63531253,5214,zeule,2016-05-17T14:25:00Z,"Done.
"
63535447,5214,zeule,2016-05-17T14:45:56Z,"Done.
"
63761145,5214,glassez,2016-05-18T18:55:37Z,"Remove this blank line.
"
63762663,5214,glassez,2016-05-18T19:05:17Z,"You seem to misunderstand the QLatin1String meaning, once you use it for the wrong purpose. Re-read the documentation.
"
63763510,5214,glassez,2016-05-18T19:10:28Z,"This applies not only to this line.
"
63764264,5214,glassez,2016-05-18T19:15:44Z,"The same issue with method names as in another PR.
"
63764772,5214,glassez,2016-05-18T19:19:08Z,"It's better to have blank line after earlier return.
"
63767102,5214,glassez,2016-05-18T19:33:58Z,"When I suggested Utils::Environment, I proceeded from the sense of the old functions. Environment is something external to the application, but the Profile is not. So you shouldn't put it to Utils::Environment namespace. Let it be in global namespace and its files in `base/` directly.
"
63786509,5214,zeule,2016-05-18T21:33:50Z,"> Re-read the documentation.

Done. Your turn :)
"
63789555,5214,zeule,2016-05-18T21:55:41Z,"While I certainly agree with you that the code does not fall exactly into the ""environment"" group, it makes an individual unit and I think it would be nice to highlight that by using a proper place in the files hierarchy. Can not find a word right away.
"
63873396,5214,glassez,2016-05-19T13:02:51Z,"Ok. Let's go.

> Many of QString's member functions are overloaded to accept const char * instead of QString. [...] These functions are usually optimized to avoid constructing a QString object for the const char * data.
> 
> Applications that define QT_NO_CAST_FROM_ASCII don't have access to QString's const char * API. To provide an efficient way of specifying constant Latin-1 strings, Qt provides the QLatin1String, which is just a very thin wrapper around a const char *. 
> 
> **Note:** If the function you're calling with a QLatin1String argument isn't actually overloaded to take QLatin1String, the implicit conversion to QString will trigger a memory allocation, which is usually what you want to avoid by using QLatin1String in the first place. In those cases, using QStringLiteral may be the better option.
"
63891614,5214,zeule,2016-05-19T14:46:31Z,"Sorry, @LordNyriox, those are good names for the entity which is currently named `class Profile`, but we are looking for a name for the namespace (and the corresponding directory), which contains this entity, its various implementations and other things which control how the qBt is localised within a filesystem at run-time.
"
63892152,5214,zeule,2016-05-19T14:49:02Z,"Sorry, I've told you already that I did read the documentation. You see, I don't understand what is wrong. Either explain that or give a hint suggesting the right code fragment, please.
"
63915606,5214,glassez,2016-05-19T16:58:09Z,"> Sorry, I've told you already that I did read the documentation. You see, I don't understand what is wrong. Either explain that 

Since we don't use QT_NO_CAST_FROM_ASCII using QLatin1String in our code is at least useless (really this leads to unnecessary cost).

> or give a hint suggesting the right code fragment, please

Please. For this particular case:

``` c++
const QString DDASH(""--"");

// ...

QString fullParameter() const
{
    return DDASH + m_name;
}
```
"
63916068,5214,glassez,2016-05-19T17:01:10Z,"For other case:

``` c++
bool value(const QProcessEnvironment &env) const
{
    QString val = env.value(envVarName());
    // we accept ""1"" and ""true"" (upper or lower cased) as boolean 'true' values
     return ((val == ""1"") || (val.toUpper() == ""TRUE""));
}
```
"
63916330,5214,glassez,2016-05-19T17:02:49Z,"Some other case:

``` c++
QString envVarName() const
{
    return QString(""QBT_"") + QString(m_name).toUpper().replace('-', '_');
}
```
"
63927984,5214,zeule,2016-05-19T18:13:13Z,"Your code has the following shortcomings:
1. Global `QString` constants lead to `QString` constructor calls at module loading time. Static variables in functions would be a bit better. 
2.  Both local static and global `QString` variables need twice the memory comparing to `char` arrays (permanent usage, is never freed).
3. An expression like `QString(""a literal"")` requires more computing resources as comparing to `QLatin1String(""the same literal"")` because UTF-8 to UTF-16 decoder is more complex than ASCII to UTF-16.

And what are the advantages? 

> Since we don't use QT_NO_CAST_FROM_ASCII using QLatin1String in our code is at least useless (really this leads to unnecessary cost).

What costs?
"
63931548,5214,glassez,2016-05-19T18:34:27Z,"> Global QString constants lead to QString constructor calls at module loading time. Static variables in functions would be a bit better. 

I don't mean global constant. I mean some constant, for example class-wide.

> Both local static and global QString variables need twice the memory comparing to char arrays (permanent usage, is never freed).

If you feel so sorry for the two bytes, you can do so:

``` c++
QString fullParameter() const
{
    return QString(""--"") + m_name;
}
```

> An expression like QString(""a literal"") requires more computing resources as comparing to QLatin1String(""the same literal"") because UTF-8 to UTF-16 decoder is more complex than ASCII to UTF-16.

Agree. But you don't understand the following:
    `QString(""str1"") + ""str2""` = 2 QString ctor + 1 operator+
    `QLatin1String(""str1"") + QLatin1String(""str2"")` = 2 QLatin1String ctor + 2 QString ctor + 1 operator+

> What costs?
1. Performance: additional (and redundant) QLatin1String constructor calls
2. Visual: additional (and redundant) QLatin1String in code
"
63954036,5214,zeule,2016-05-19T21:01:58Z,"The thing is QLatin1String ctor +  QString ctor is not more work than QString ctor(char literal), because we remove information about encoding. I suggest you read `QLatin1String` class definition, it is quite short. And the general note: it is usually not possible to make something more optimal removing the information, but the inverse case (more optimal with additional information) is more likely. I bet the compiler generates not significantly different code for `QString::fromLatin1(""a literal"")` and `QString(QLatin1String(""a literal""))`.
"
64063420,5214,glassez,2016-05-20T15:48:48Z,"Damn. Unfortunately Qt5 documentation is outdated and contains incorrect and conflicting information. It turns out that QString's **const char** * API is no longer so lightweight and optimized as described.
"
64064921,5214,zeule,2016-05-20T15:58:53Z,"I don't know what you are talking about but they say in the documentation that `setCodecForCString()` was removed and all `const char*` strings are assumed to be in UTF-8. Do they hide anything else?
"
64065318,5214,glassez,2016-05-20T16:01:33Z,"But the following is wrong:

> Many of QString's member functions are overloaded to accept const char \* instead of QString. [...] These functions are usually optimized to avoid constructing a QString object for the const char \* data.
"
64065651,5214,zeule,2016-05-20T16:03:32Z,"Done.
"
64125286,5214,zeule,2016-05-21T01:13:32Z,"With this PR we are adding options to control were qBt stores its configuration and data files (like the fast resume files or the RSS cache) and we called this entity ""Profile"". Thank you for the willingness to help. 
"
64177748,5214,glassez,2016-05-23T07:20:31Z,"@LordNyriox Profile is usual name for such a thing. Why do you propose changing it?
"
64265540,5214,glassez,2016-05-23T18:34:09Z,"Things under Utils namespace are helpers, wrappers (and so on) for different purposes. But Profile is more important, so I see it as the application component (albeit small). Therefore, I propose to put it in the global namespace.
"
64387582,5214,zeule,2016-05-24T13:14:16Z,"Maybe it will be better to leave implementation classes in namespace Impl?  Perhaps we can create `base/private` or `base/impl` directory and put those files there?
"
64389072,5214,glassez,2016-05-24T13:24:14Z,"Agree.
`base/private` and `Private` namespace (as done in BitTorrent).
"
110687948,5214,sledgehammer999,2017-04-10T15:31:37Z,you already check this in `parseCommandLine()`
110688795,5214,sledgehammer999,2017-04-10T15:34:47Z,what happens if it is malformed? No 2 parts?
110688993,5214,sledgehammer999,2017-04-10T15:35:32Z,what happens if it is malformed? No 2 parts?
110769375,5214,zeule,2017-04-10T21:36:38Z,"This test meant to show whether the port number is set by user, or has its default value of -1. Probably should change the condition to `!= -1`?"
110789530,5214,sledgehammer999,2017-04-10T23:58:36Z,Oops. You're correct. I forgot that this might be unset. In this case this check can stay as it is.
110790296,5214,sledgehammer999,2017-04-11T00:05:20Z,"I don't know if this intended or not. This is just a reminder. You might want to leave an email beside your name.
If yes, add it on every other place you put your name."
110791229,5214,zeule,2017-04-11T00:14:21Z,At the time of writing I did not want to leave e-mail there.  Probably I'll insert the e-mail during the next round of changes.
110792148,5214,sledgehammer999,2017-04-11T00:22:43Z,"Sure. Whatever you want. It was just just a reminder.
(I am continuing with the review)"
110792623,5214,sledgehammer999,2017-04-11T00:27:39Z,I think this is a remnant of Qt4 support.
110793803,5214,sledgehammer999,2017-04-11T00:34:48Z,"Do you have any reference to this?
EDIT: You probably infer it from Qt docs about NativeFormat. I hope it stays the same for IniFormat. Unfortunately the docs don't have an example. I'll check the macOS machine to see if it indeed saves it there."
110795539,5214,sledgehammer999,2017-04-11T00:52:37Z,"According to the docs IniFormat forces the use of `.ini` extension on all platforms. So why override it and use `.conf` instead?
I think we should stay close to how Qt works."
110796525,5214,sledgehammer999,2017-04-11T01:02:53Z,I see it will stay empty so it will fallback to using the DefaultProfile.
110796850,5214,sledgehammer999,2017-04-11T01:05:57Z,"OK, defaults are used if empty"
110804394,5214,sledgehammer999,2017-04-11T02:31:48Z,"The `--portable` documentation should be updated to indicate that it also implies `--relative-fastresume`
Also the result of this test isn't a little too harsh? IMO, we should silently ignore `--relative-fastresume` in this case."
110807130,5214,sledgehammer999,2017-04-11T03:05:46Z,Usage doesn't seem to be documented
110861556,5214,zeule,2017-04-11T10:00:42Z,"Disagree with you: current files have '.conf' extension, and if we use '.ini' in the custom profiles, we make a custom profile dir incompatible with the current one, while otherwise profile dirs can be copied one into another.  "
110886219,5214,sledgehammer999,2017-04-11T12:16:25Z,">current files have '.conf' extension

Partially true. The old code has an ifdef when creating the QSettings object. In linux it uses NativeFormat, which are ini files with `.conf` extension. On Windows+macOS it uses IniFormat which forces `.ini` as extension."
110887971,5214,sledgehammer999,2017-04-11T12:26:27Z,Shouldn't the arguments be reversed here? (I am talking about the bool check)
110890682,5214,zeule,2017-04-11T12:39:45Z,"> IMO, we should silently ignore...

Wouldn't that create an impression that `--relative-fastresume` is used somehow? Let's print a warning instead?"
110892170,5214,sledgehammer999,2017-04-11T12:46:52Z,"Well, if they read the documenation they should have that impression. But I am ok with a warning."
71085636,5532,glassez,2016-07-17T17:03:22Z,"Having both add-started and add-paused params is bad idea. One of them is redundant.
"
71085696,5532,glassez,2016-07-17T17:07:23Z,"Here and in similar places you break coding style rule. You must insert spaces around arithmetic operators.
"
81368647,5532,wiiaboo,2016-09-30T16:07:23Z,"You should also remove the trailing spaces in this and other lines.
"
81371163,5532,briankendall,2016-09-30T16:22:32Z,"It is done.
"
112675708,5532,zeule,2017-04-21T12:25:57Z,I would avoid such a general name for the parameter. Who knows what other path we would add in the future?
112675782,5532,zeule,2017-04-21T12:26:21Z,Same here.
112676794,5532,zeule,2017-04-21T12:32:48Z,"Either remove ""started"" and ""paused"" from the translatable string or make it clear for a translator that they have to be kept as is."
112677283,5532,zeule,2017-04-21T12:35:57Z,"Don't quite understand why we can pass `WRAP_AT_COLUMN` as default value, but can not do the same with `USAGE_TEXT_COLUMN`? "
112722324,5532,glassez,2017-04-21T16:02:19Z,"We use ""add paused"" term in this meaning, so it should be ""add-paused"" here."
112722398,5532,glassez,2017-04-21T16:02:41Z,"We use ""save path"" term in this meaning, so it should be ""save-path"" here."
112722854,5532,briankendall,2017-04-21T16:05:09Z,Good point. I'll change it to save-path unless you have a different suggestion. edit: Apparently I forgot to refresh this page before commenting and missed the above discussion. save-path it is.
112722898,5532,briankendall,2017-04-21T16:05:20Z,Similarly will change it to torrent-status
112723563,5532,glassez,2017-04-21T16:08:23Z,"IMO, ""status"" is incorrect in this context."
112727419,5532,zeule,2017-04-21T16:27:42Z,"I would use bool option `--add-paused`, which will be shorter without the value part than `--status=paused`. Are there any more statuses except these two?"
112737102,5532,briankendall,2017-04-21T17:20:08Z,"@evsh `--add-paused` doesn't give the option of someone adding a torrent unpaused when the app is configured to add all torrents paused by default, so it ought to include both options."
112737453,5532,zeule,2017-04-21T17:22:26Z,Maybe we better extend the `BoolOption` class to accept a value? To make it possible to pass `--add-paused=false`.
112738339,5532,briankendall,2017-04-21T17:27:21Z,"I spent some time thinking about what the name of this option should be, and settled on `status` (now `torrent-status`) because I can't find any other terminology used elsewhere in the app that refers to the attribute of a torrent that distinguishes whether it's paused or not in the way that we need.

In the add torrent dialog, there is a check box that reads ""Start torrent"", but since we're overriding the default behavior with this command line option, a simple toggle isn't good enough. The user needs to specify one of three states: use default settings, pause torrent, start torrent. The `torrent-status` approach allows for all three.

The actual setting in the preferences for specifying the default behavior is ""Do not start the download automatically"" which doesn't really help for coming up with an intuitive command line option either.

In the main window, whether a torrent is paused or running is indicated in the status column.

So I eventually settled with `torrent-status`. I originally set it up so that there was an `--add-paused` and `--add-started` option but a while back @glassez suggested that was redundant and I'm inclined to agree. I think `torrent-status=paused|started` is the way to go.
"
112738690,5532,briankendall,2017-04-21T17:29:13Z,Good catch. I think `started` and `paused` had better remain consistent regardless of system language otherwise scripts that execute in one language will fail in another.
112741386,5532,glassez,2017-04-21T17:42:40Z,">I think `torrent-status=paused|started` is the way to go.

But what not `--add-paused=true|false`?"
112742978,5532,briankendall,2017-04-21T17:50:36Z,"@glassez Yes, that could work. I originally discounted that as BoolOption doesn't current allow a way to specify a value, and I don't think it should since it's implementing a specific common kind of command line option. Instead I could continue using StringOption and checking its value, requiring it to be true or false. That would be the easiest and fastest change.

Alternatively, I could add a new Option-derived class called something like TriStateBoolOption, that requires explicitly specifying a value. That would allow some flexibility in how the value is specified, i.e. true, false, 1, 0, on, and off could all be valid values."
112743805,5532,briankendall,2017-04-21T17:54:20Z,"I'll simplify things so that there's just one function, `wrapText`."
112745582,5532,zeule,2017-04-21T18:02:54Z,"I would model `BoolOption` after the same entity in `boost::program_options`, i.e. give it ability to parse supplied value and set an implicit one, which is taken when no explicit value is provided.
If  you, @briankendall, do not want to do that or wait for such implementation, IMO `StringOption` with a custom check would be fine. Let's just avoid option name change in the future.  
"
112750483,5532,briankendall,2017-04-21T18:28:17Z,"@evsh I don't mind implementing this, as I do prefer doing things ""the right way"". That said I don't think doing something like `boost::program_options` like you describe will work here, as I need an unspecified option to have a value that explicitly means it was undefined rather than an implicit true / false value. So think it would be better to utilize the existing `TriStateBool` class (which exists for exactly that purpose) and create a new kind of option based on that."
112751675,5532,zeule,2017-04-21T18:34:26Z,"@briankendall, excuse me, don't understand yet why do you need the third value. Why just absent parameter in the command line does not work? Sure, you need the tri-state value further on, but why it is needed in the command line?"
112754959,5532,briankendall,2017-04-21T18:51:48Z,"@evsh It's mainly because, without having an `Option`-derived class that can return a tri-state bool, the mechanism where options can be specified using environment variables no longer works.

When initializing a value in the constructor of `QBtCommandLineParameters` you need to use something like: `addPaused(PAUSED_OPTION.value(env))`

With `BoolOption`, this will necessarily initialize the variable `addPaused` to either true or false. So if we don't get a value from the corresponding environment variable, `addPaused` is initialized to false rather than to undefined. And now we don't know whether the user actually specified false in the environment variable or didn't specify anything at all. Using `TriStateBoolOption` fixes this.

On top of that, and perhaps even more importantly, I think having a separate class called `TriStateBoolOption` is *conceptually* correct as it provides a different function (namely the ability to have an undefined state) in comparison to `BoolOption`. Better to make that explicit in the definition of an option than to have its behavior not come from its definition but its implementation details. You don't want people to have to check the code carefully to know that `add-paused` behaves differently than every other `BoolOption`."
112756920,5532,glassez,2017-04-21T19:03:11Z,"I agree with @briankendall we need some way for ""use application default value for addPaused"". If user omit corresponding parameter this shouldn't mean ""false""."
112763304,5532,zeule,2017-04-21T19:45:08Z,"It is still ""path"" here."
112763388,5532,zeule,2017-04-21T19:45:42Z,Why this is still here?
112763578,5532,zeule,2017-04-21T19:46:54Z,Please use `QLatin1String`
112763625,5532,zeule,2017-04-21T19:47:15Z,Will this go into Transifex?
112763814,5532,zeule,2017-04-21T19:48:27Z,`QLatin1String`
112763898,5532,zeule,2017-04-21T19:49:00Z,Will this go into Transifex?
112764385,5532,zeule,2017-04-21T19:52:11Z,"I don't understand why `BoolOption` is OK here, but `TriStateBoolOption` is needed for 'add-paused'? Don't they behave identically in terms of absent values? I.e. when value in command line is absent, program setting has to be used. "
112764464,5532,zeule,2017-04-21T19:52:39Z,"""path"""
112764945,5532,zeule,2017-04-21T19:55:26Z,"So, continuing, my idea is: only `result.addPaused` has to be of type `TriStateBool`. The option itself is a bool option which accepts value and can be omitted. The third case is here already, in this very test."
112766304,5532,briankendall,2017-04-21T20:04:44Z,"Because utilizing any of the command line options relating to adding a torrent prevents the ""Add new torrent"" dialog from opening."
112766403,5532,briankendall,2017-04-21T20:05:19Z,I haven't used Transifex before so I'm not sure. But this is the officially supported way of adding comments to translatable strings according to Qt's documentation. Is there another method I should use?
112766574,5532,briankendall,2017-04-21T20:06:28Z,"There is no setting for ""download first and last piece first"" in the application-wide preferences. It always defaults to off so therefore there's no need for a tri-state bool."
112767115,5532,briankendall,2017-04-21T20:09:56Z,"You're forgetting about environment variables being used to specify options. It's definitely necessary to have `TriStateBoolOption` in order for that to work. Not to mention there's my earlier comment about how using `TriStateBoolOption` unambiguously informs people reading the code that it behaves differently than the other bool options, which I think vastly improves comprehensibility."
112769588,5532,zeule,2017-04-21T20:25:03Z,OK.
112769829,5532,zeule,2017-04-21T20:26:32Z,"You are right, option object with optional value (sorry) is certainly a cleaner solution then.   "
112769974,5532,zeule,2017-04-21T20:27:30Z,Why this assignment is still present?
112770311,5532,zeule,2017-04-21T20:29:46Z,Will this go into Transifex? Why don't you use the second argument of `QObject::tr()`?
112770341,5532,zeule,2017-04-21T20:29:55Z,Same here.
112771937,5532,briankendall,2017-04-21T20:38:46Z,Because specifying a save path prevents the new torrent dialog from opening.
112773087,5532,briankendall,2017-04-21T20:45:04Z,"The second argument of `QObject::tr()` is meant for disambiguation, like when you have two strings that are the same in English but might need to be translated differently in another language. You're supposed to use the `//:` comment notation for notes to the translator. See [this section of the Qt docs on translations](http://doc.qt.io/qt-5/i18n-source-translation.html#translator-comments)"
112774376,5532,zeule,2017-04-21T20:52:07Z,"Can't agree with you. IMO, it would be perfectly fine to supply a save path, a magnet uri and expect to see the dialog. And that is why I asked you to add the option to control it. It is perfectly fine to skip the dialog by default, but where is `skipTorrentDialog = false` then?"
112775179,5532,zeule,2017-04-21T20:56:42Z,"Does anybody know will this comment go into Transifex? @briankendall, maybe it is worth to write is simply as:
```c++
QObject::tr(""Parameter '%1' must follow syntax '%1=%2'"").arg(fullParameter()).arg(QLatin1String(""<true|false>""));
```
?"
112776017,5532,briankendall,2017-04-21T21:01:23Z,Good idea
112778952,5532,briankendall,2017-04-21T21:20:26Z,"I see what you're getting at. Unfortunately the save dialog currently has no facility for passing in torrent options. Meaning if I use command line arguments such as `--save-path`, `--category`, `--start-paused` and so on, those options are not reflected in the save dialog and end up having no effect. They only work when adding a torrent using `BitTorrent::Session::instance()->addTorrent()`.

The thing is that these command line arguments are mainly intended to be used for automating qBittorrent. In those instances it's not desirable to have the save dialog open, hence why I set it up so that specifying any of them prevents it from opening.

I thought adding a `--skip-dialog` option was useful, though, because someone might want to add a torrent, skip the dialog, and use the application settings without overriding anything, which wasn't possible previously.

In order to accomplish what you're talking about, I'd have to make significant changes to `AddNewTorrentDialog` so that it can accept an optional `BitTorrent::AddTorrentParams` parameter and properly pass those settings on when adding the torrent, even the ones that can't be specified by the dialog itself. I'm not very familiar with `AddNewTorrentDialog` so it would take some work and have the potential for introducing new bugs. I'd prefer not to do that unless there's a compelling reason for it."
112779490,5532,zeule,2017-04-21T21:23:55Z,Ah! What a pity! Could you leave a comment or TODO marker somewhere then regarding this problem?
112781196,5532,briankendall,2017-04-21T21:35:20Z,Sure.
112781350,5532,zeule,2017-04-21T21:36:30Z,Thank you!
112783042,5532,briankendall,2017-04-21T21:48:13Z,"Actually this may require some future proofing. If someone were to make the change we're discussing, it would change the behavior of these command line arguments from preventing the ""Add new torrent"" dialog from opening to not preventing it. I think it's bad form to have a potential future version of the app change the behavior of command line arguments in that dramatic of a fashion.

So how about this: I'll add the TODO and change the `--skip-dialog` to be a tri-state bool. This already makes sense because there is actually an application-wide setting for whether the add torrent dialog should be opened, so being able to say `--skip-dialog=false` might be useful in some cases. For now I'll make a note in the command line usage text that using `--skip-dialog=false` in conjunction with the other command line arguments I've added is currently unsupported.

But that way if in a future version someone follows up on the TODO and changes `AddNewTorrentDialog` so that you can override its settings with these command line arguments, we can start allowing using them in conjunction with `--skip-dialog=false` to allow someone to pop open the dialog, override its settings, all while not change the existing behavior of the other command line arguments. Sound good?"
112792464,5532,zeule,2017-04-21T23:20:30Z,"Sorry, I don't understand your point. I thought that it would be sufficient just add the option and in case of `--skip-dialog=false` and any of the new options set just abort and show that this combination of options is not yet implemented."
112802403,5532,glassez,2017-04-22T04:23:14Z,"This param won't affect if we add magnet, isn't it?"
112802452,5532,glassez,2017-04-22T04:28:18Z,"Use TriStateBool for skipDialog is a really good idea. And, of course, we should implement overriding of AddNewTorrentDialog initial values (IMO, it should be done before these changes go to release)."
112803541,5532,briankendall,2017-04-22T05:54:44Z,Well being that I have a hard time implementing features that aren't quite finished or don't quite do *The Right Thing* I went ahead and modified `AddNewTorrentDialog` so that it works with my new command line options.
112804166,5532,briankendall,2017-04-22T06:47:54Z,"@glassez You're right, it doesn't have an effect in that case. I'm not sure why, but the issue seems to be somewhere within `BitTorrent::Session::addTorrent()` and/or everything it calls into. I don't think I'm the right person to debug this one."
112804181,5532,briankendall,2017-04-22T06:50:13Z,"@LordNyriox It was for a redundant ""Start torrent"" checkbox. It seemed to be the result of a copy/paste mistake someone made. It's not referenced anywhere in the code, and it obscured the real ""Start torrent"" checkbox, causing bugs."
112804892,5532,glassez,2017-04-22T07:45:32Z,It's not a bug. We can't prioritize something since we haven't any torrent metadata in case we add it using magnet link. We can do it deferred when metadata has to be loaded. Please put TODO comment near corresponding AddTorrentParams member.
112841007,5532,briankendall,2017-04-23T18:21:57Z,"OK. Adding a magnet link / torrent URL does work with the ""download in sequential order"" feature. I'll see if I can't figure out how to get it to work with ""first and last piece priority"" and failing that I'll add the TODO."
112863429,5532,glassez,2017-04-24T04:24:14Z,You forgot `const`.
112901575,5532,glassez,2017-04-24T09:29:50Z,This is not enough. You also need store it in torrent resume data as we do for addForced/addPaused (only if it is true). User can close qBittorrent when metadata isn't loaded.
112903705,5532,glassez,2017-04-24T09:40:50Z,"IMO, `m_hasFirstLastPiecePriority` is better name. User can change it at any time so you should change this field in `setFirstLastPiecePriority()` unconditionally (before return)."
112904089,5532,glassez,2017-04-24T09:42:48Z,"else ???
I mean, if Undefined"
112904212,5532,glassez,2017-04-24T09:43:21Z,Duplicate line.
112904293,5532,glassez,2017-04-24T09:43:45Z,`createSubfolder` is TriStateBool now.
112904505,5532,glassez,2017-04-24T09:44:52Z,Forward declare AddTorrentParams instead of this line.
112904645,5532,glassez,2017-04-24T09:45:33Z,`QWidget *parent = 0` like in next `show()`.
112904844,5532,glassez,2017-04-24T09:46:36Z,We use `m_` prefix for all private fields.
112905061,5532,glassez,2017-04-24T09:47:43Z,`TriStateBool skipTorrentDialog;` is enough since Undefined is default value for TriStateBool.
112906823,5532,glassez,2017-04-24T09:56:35Z,Don't abuse with `continue`! Replace it with `if - else if`.
112908406,5532,glassez,2017-04-24T10:04:10Z,"It's better to split lines according to subexpressions:
```c++
bool showDialogForThisTorrent =
    ((AddNewTorrentDialog::isEnabled() || skipTorrentDialog == TriStateBool::False)
    && skipTorrentDialog != TriStateBool::True);
```"
112908675,5532,glassez,2017-04-24T10:05:40Z,Why it's here? It's unused at this file.
112908821,5532,glassez,2017-04-24T10:06:33Z,`const` is static by default so you can omit `static` keyword in these lines.
112921920,5532,zeule,2017-04-24T11:26:12Z,"IMO, it i much easier to read this kind of looping with `continue`. What's wrong with it from your point of view?"
112922223,5532,zeule,2017-04-24T11:28:06Z,There is an unnamed namespace right below. These constants would fit there perfectly.
112922831,5532,zeule,2017-04-24T11:31:57Z,"`const bool`, please."
112923124,5532,zeule,2017-04-24T11:33:43Z,Why do you need the named variable?
112923371,5532,zeule,2017-04-24T11:35:20Z,"This can be moved after the `if` and you can remove lines 436-437 then:
```C++
if (existingIndex < 0) {
   // New path, prepend to combo box
    ui->savePathComboBox->insertItem(0, Utils::Fs::toNativePath(newPath), newPath);
    existingIndex = 0;
}
ui->savePathComboBox->setCurrentIndex(existingIndex);
￼onSavePathChanged(existingIndex);
```"
112923997,5532,zeule,2017-04-24T11:39:29Z,"Ah, you just borrowed this piece from the code below..."
112924431,5532,zeule,2017-04-24T11:42:09Z,"If there is a member, it has to be initialised in the constructor, but not in `show()` function."
112924775,5532,zeule,2017-04-24T11:44:03Z,"And what if the category is absent? Say, user mistype it in the command line? I would prefer a program that tells me about that. But here is a bad time to check that, although I did not find the check elsewhere."
112925382,5532,zeule,2017-04-24T11:48:05Z,Please no. Unparented dialogue windows are showed on the first screen always in Plasma and maybe in any X session regardless of the main window position. 
112927673,5532,glassez,2017-04-24T12:02:50Z,"I suggested this to preserve signature similarity.
Then remove it from next `show()` too."
112929331,5532,glassez,2017-04-24T12:12:49Z,"It's not only my point of view.
The normal continuation/completion of the loop should be described in the appropriate place (as loop condition). `break` and `continue` instructions are for non-standard/emergency interruption of the loop (or loop iteration). Or, in exceptional cases, to avoid too much code (when other methods do not help or are ineffective).
I don't think that in the case of the use of `else if` this code will become less readable. Besides, it will become three times shorter!"
112939216,5532,zeule,2017-04-24T13:02:41Z,"Nonsense, `break` and `continue` are different in this sense: `continue` has nothing to do with loop condition."
112942599,5532,glassez,2017-04-24T13:17:19Z,"Of course. I just said that `break` breaks loop, and `continue` breaks current loop iteration.

I don't insist on changing this."
112944492,5532,zeule,2017-04-24T13:25:13Z,You are saying this as if everybody likes to read a loop body to the end to check whether there is anything after a sheet of `if`s.
112946990,5532,glassez,2017-04-24T13:35:42Z,"Since it consists only of these same blocks, I do not insist on the change. In another case it could be otherwise..."
112952522,5532,briankendall,2017-04-24T13:58:41Z,"@glassez If it's `Undefined` then we leave the checkbox as is, since we fall back on the application setting. So nothing to do in that case, hence no `else` clause."
112956146,5532,briankendall,2017-04-24T14:12:52Z,"@glassez I was trying to avoid using that flag as the canonical indicator as to whether a torrent has first/last piece priority set, since then we need to worry about it going out of sync with the actual state of the torrent. (Note that the current implementation of `hasFirstLastPiecePriority()` doesn't use such a flag but instead checks if the first and last pieces actually have the correct priority set, so there's nothing to get out of sync.)

However, if we need to store it in the resume data I do believe we'll need to use a flag that way.

Also, we need to be careful about setting the flag unconditionally, because we don't want the torrent to have first/last priority if it doesn't contain any media files that support it. So I'll maintain that behavior in how `m_hasFirstLastPiecePriority` is set."
112956668,5532,glassez,2017-04-24T14:14:46Z,"You probably want to tell me: dude, look at another place where I set some value for this. I answer: it must be concentrated in one place."
112957566,5532,glassez,2017-04-24T14:18:28Z,"You need to place all this logic here and modify constructor to accept AddTorrentParams as parameter, then call this function from it."
112977903,5532,briankendall,2017-04-24T15:27:42Z,"Sequential download also needs to be saved with the resume data, so I'll fix that too."
112979293,5532,briankendall,2017-04-24T15:32:23Z,I'll keep as is. I agree with @evsh in this case that it is more readable with `continue`.
112979672,5532,briankendall,2017-04-24T15:33:46Z,Accidentally left it in from a previous (now squashed) commit
112980912,5532,briankendall,2017-04-24T15:38:02Z,"I like being explicit in the intent of a line of code, and using the named variable makes it more clear what I'm doing in this version of `AddNewTorrentDialog::show`. However I can see how it's being more explicit than is strictly necessary so I will remove the variable."
112983465,5532,zeule,2017-04-24T15:47:54Z,"> Since it consists only of these same blocks, I do not insist on the change. In another case it could be otherwise...

I'm pretty sure in that case the current fragment would evolve into a function containing only this switch-like structure."
112986245,5532,briankendall,2017-04-24T15:58:17Z,"I thought the reasonable behavior in this case is for it to create a new category. Note that the user can type in any category they want into `categoryComboBox` and if it doesn't exist, qBittorrent will create it. So the command line argument should behave the same way as providing a value for the combo box. This means it's the responsibility of the user to get the category name right, but that's always been the case."
112988220,5532,briankendall,2017-04-24T16:05:47Z,Not possible due to `AddNewTorrentDialog` having a member variable of type `BitTorrent::AddTorrentParams`.
112988495,5532,zeule,2017-04-24T16:06:56Z,"I don't think this relation is correct now. In the GUI user actions are explicit, they know that the new category is created, but here this is done implicitly. To make these two cases equivalent, we should add to the command line help a note that category will be created if it does not exist. "
112989992,5532,zeule,2017-04-24T16:13:13Z,We should probably refactor  `AddTorrentParams` into its own file...
113002220,5532,zeule,2017-04-24T17:06:12Z,torrents → files
113024590,5532,glassez,2017-04-24T18:40:43Z,"Or we can just get rid of this member. In fact we don't need it at all. We just use a parameter of this type to initialize the dialog, and then just create the object of this type for passing to the Session. Why we need to store it?"
113041666,5532,briankendall,2017-04-24T19:59:53Z,"@glassez Well, we do need it, or something like it. Not every option in `BitTorrent::AddTorrentParams` is represented by UI in `AddNewTorrentDialog`. In particular, `firstLastPiecePriority` and `sequential`, both of which can be specified from the command line, do not have options in the dialog. But we still want them to be enabled if the user adds the torrent from the command line and specifies them using `--first-and-last` or `--sequential`, regardless of whether the dialog is invoked or not.

I opted to have `BitTorrent::AddTorrentParams` be a member variable because that was the safest way to ensure every option it specifies gets used when the torrent is actually added when `BitTorrent::Session::instance()->addTorrent()` is called by `accept()`. This is particularly relevant in case someone adds more fields to `BitTorrent::AddTorrentParams`, because those will be respected too -- it gives us a degree of future proofing and is less error prone.

That said, it is true that currently the only options we care about passing through the dialog *right now* that don't have a control in its UI are `firstLastPiecePriority` and `sequential`. In order to eliminate `m_torrentParams` we could add boolean member variables to `AddNewTorrentDialog` that just store those values, and then construct a new `BitTorrent::AddTorrentParams` in the `accept()` method.

However if the only reason to eliminate `m_torrentParams` is to remove an `#include` from the header file, I don't think it's a net win given that keeping it around has the benefits I listed above. But I'm not wedded to either approach. If you want me to eliminate `m_torrentParams` I'll do it."
113131853,5532,glassez,2017-04-25T08:18:15Z,">I'm pretty sure in that case the current fragment would evolve into a function containing only this switch-like structure.

+1"
113132212,5532,glassez,2017-04-25T08:20:14Z,Maybe later.
113132786,5532,glassez,2017-04-25T08:23:24Z,"Why did you break it?
Please revert it. And don't change unrelated things (at least without announcing)!"
113141732,5532,glassez,2017-04-25T09:05:08Z,It has done in TorrentHandle constructor.
113141789,5532,glassez,2017-04-25T09:05:22Z,It has done in TorrentHandle constructor.
113145523,5532,glassez,2017-04-25T09:23:25Z,How about Se
113147117,5532,glassez,2017-04-25T09:30:26Z,"It becomes incorrect when the user changes the priorities in a different way. 

Why did you change it, you're not going to do it? So you're never going to finish this PR."
113147319,5532,glassez,2017-04-25T09:31:25Z,How about Sequential here?
113202796,5532,briankendall,2017-04-25T14:01:26Z,"What other way? The only way I'm aware of for these specific priorities to be set is to use the `setFirstLastPiecePriority` function.

Also, this was discussed earlier. I had originally introduced a member variable called `m_needsToSetFirstLastPiecePriority` to handle when a torrent is added with the `firstLastPiecePriority` option before it has downloaded its metadata, but I was asked to change it to `m_hasFirstLastPiecePriority`. That means that new flag is the canonical indicator as to whether a torrent has this option set, and it's no longer valid to check the actual priority of the pieces because it could be set before the torrent's metadata is available. What would you suggest I do otherwise?"
113203003,5532,briankendall,2017-04-25T14:02:09Z,Not necessary. We can set sequential downloading on a torrent before we have its metadata. Not so for first / last piece priority.
113203283,5532,briankendall,2017-04-25T14:03:07Z,"This is strange, and I'm not sure how I made that edit. Sorry! I've corrected it."
113206845,5532,zeule,2017-04-25T14:16:32Z,"> What other way? 

Any manipulation with file priorities resets first-last priority mode, AFAIK. that is why the mode is tracked via piece priorities but not via a flag."
113206983,5532,briankendall,2017-04-25T14:17:09Z,"Ah I see, the resume data sets it as well. I don't think it makes sense for us to have this flag. I think my earlier approach of using `m_needsToSetFirstLastPiecePriority` was better."
113211522,5532,zeule,2017-04-25T14:32:32Z,"Oh, no, pardon me: my information is outdated."
113223003,5532,glassez,2017-04-25T15:10:32Z,Then we really should place AddTorrentParams in its own header.
113225590,5532,glassez,2017-04-25T15:18:38Z,">Oh, no, pardon me: my information is outdated.

What do you mean?
>Any manipulation with file priorities resets first-last priority mode

This isn't true?"
113226094,5532,glassez,2017-04-25T15:20:11Z,Then don't store it in resume data.
113227041,5532,zeule,2017-04-25T15:23:22Z,"You decoupled firs-last mode from sequential mode in  67e90d8d, but setting file priorities still reset piece priorities, right?"
113228456,5532,glassez,2017-04-25T15:27:47Z,">but setting file priorities still reset piece priorities, right?

AFAIK, yes!"
113230129,5532,glassez,2017-04-25T15:33:28Z,">but I was asked to change it to m_hasFirstLastPiecePriority. That means that new flag is the canonical indicator as to whether a torrent has this option set, and it's no longer valid to check the actual priority of the pieces because it could be set before the torrent's metadata is available.

You was asked to change field name only.
>I think my earlier approach of using m_needsToSetFirstLastPiecePriority was better.

Let it be. Otherwise this changes will never be released.
@evsh? IMO, we should omit changing internals here."
113232980,5532,zeule,2017-04-25T15:43:24Z,"But how to resume this mode then? Frankly speaking, I lost both of you in this discussion couple of iterations ago. IMO, the implementation has to be simple:
- add a member flag to `TorrentHandle`: `bool m_needApplyFirstLastPriorityMode;`
- in `TorrentHandle::setFirstLastPiecePriority()` if there are no metadata, set this flag, otherwise proceed as usual and reset the flag;
- in `TorrentHandle::handleMetadataReceivedAlert()` check the flag:  call  `setFirstLastPiecePriority(true);` when it is set.
- save the flag to resume data ~(probably only if it is set)~.

Update: the flag has to be serialised always, of course, otherwise we would read it as set from the resume file always. 
"
113236480,5532,zeule,2017-04-25T15:55:41Z,See my comment below: https://github.com/qbittorrent/qBittorrent/pull/5532#discussion_r113232980
113243335,5532,briankendall,2017-04-25T16:21:29Z,"> You was asked to change field name only.

I see that now. I'm very used to variable names being inextricably linked to their purpose. I do think that I need to reverse this change as it's introduced new bugs, and go back to the method @evsh outlined. Sorry about that -- I swear I'm not trying to make extra work for all of you! I very much want to see this PR completed."
113244516,5532,zeule,2017-04-25T16:26:18Z,"> I very much want to see this PR completed.

Me too."
113249465,5532,glassez,2017-04-25T16:46:13Z,"I agree. 
This was done almost the same until the author decided to get into the inside.

>Update: the flag has to be serialised always, of course, otherwise we would read it as set from the resume file always.

Disagree. We should write this flag to resume data only if torrent hasn't metadata (as we do for addPaused/addForced)."
113253275,5532,briankendall,2017-04-25T17:01:53Z,"@glassez I discovered that, similar to first/last piece priority, if a magnet link is added with sequential download but qBittorrent quits before its metadata is retrieved, then `sequential` is not saved. So I added some code to save `sequential` in the resume data when a torrent's metadata isn't retrieved yet to fix the bug."
113257289,5532,glassez,2017-04-25T17:19:28Z,Ok. Then we need appropriate comment. Otherwise someone may break it.
113268347,5532,zeule,2017-04-25T18:04:07Z,Can not find where is it used.
113270742,5532,zeule,2017-04-25T18:14:11Z,Quite a strange replacement.
113271406,5532,zeule,2017-04-25T18:16:54Z,Default value for parent does not make sense when the corresponding default gets removed from `show()`.
113273897,5532,briankendall,2017-04-25T18:27:21Z,An artifact of an older version of the function. Will remove.
113274622,5532,briankendall,2017-04-25T18:30:14Z,"Not technically a replacement. The code for setting `ui->createSubfolderCheckBox` is higher up in the function now so that it is grouped with similarly structured code for setting `ui->startTorrentCheckBox`, and `ui->skipCheckingCheckBox` is an addition now that `BitTorrent::AddTorrentParams` is a parameter the constructor.

I do agree with you that this would be much easier to follow if commits weren't being squashed. Let me know if you don't want me to do that any longer."
114047881,5532,Chocobo1,2017-04-29T07:18:43Z,no need of `QString()` here.
114047884,5532,Chocobo1,2017-04-29T07:18:49Z,no need of `QString()` here.
114048031,5532,Chocobo1,2017-04-29T07:22:19Z,"if it's not critical, please remove `inline`, I prefer to trust the compiler decision."
114048040,5532,Chocobo1,2017-04-29T07:22:53Z,no need of `QString()` here and below.
114048136,5532,Chocobo1,2017-04-29T07:28:34Z,"minor thing, you can remove the curly braces here if you want."
114048369,5532,Chocobo1,2017-04-29T07:47:17Z,"this is causing some padding bytes in the struct.
if you want to fix it (as this is not directly related to this PR), you can follow the style in `gui/advancedsettings.h`."
114055917,5532,zeule,2017-04-29T15:42:31Z,Now it does not make any sense since AddTorrentParams class is in `base/bittorrent/addtorrentparams.h`
114055946,5532,zeule,2017-04-29T15:44:08Z,"If you don't mind to spare another couple of minutes, please change this now to
```c++
if (param.startsWith(QLatin1String(""@savePath=""))) {
```"
114058951,5532,briankendall,2017-04-29T18:23:33Z,"I'll make this change in a little while when I'm free, but I'm curious: what's the advantage of using QLatin1String instead of a string literal? Does it make any difference when you're just dealing with ASCII characters?"
114059185,5532,zeule,2017-04-29T18:34:00Z,"> I'll make this change in a little while when I'm free…

Thanks you!
>…but I'm curious: what's the advantage of using QLatin1String instead of a string literal? Does it make any difference when you're just dealing with ASCII characters?

Apart from indicating for a reader an untranslatable string literal, it also gives a hint to QString that conversion to Unicode 16 has to be done from Latin-1 but not from UTF-8, which is more efficient."
114077463,5532,sledgehammer999,2017-04-30T15:06:41Z,Typo. `There're` or `There are`
114077537,5532,zeule,2017-04-30T15:11:20Z,@briankendall: you forgot to add `QLatin1String` here.
114077729,5532,briankendall,2017-04-30T15:19:54Z,@evsh Got it
114077767,5532,sledgehammer999,2017-04-30T15:21:04Z,"IMO, @evsh initial comment is right. I don't understand why `--add-paused` and `--skip-dialog` need an explicit value. Their verb indicates ""pause"" or ""skip"" in the absence of value."
114079322,5532,sledgehammer999,2017-04-30T16:39:07Z,"Typos:
1. `quits`
2. `are retrieved`
"
114079345,5532,sledgehammer999,2017-04-30T16:40:53Z,Curly braces aren't needed in these 3 if-blocks
114079448,5532,sledgehammer999,2017-04-30T16:46:53Z,Curly braces aren't needed in these 3 if-blocks
114079480,5532,sledgehammer999,2017-04-30T16:48:55Z,"I think the check should be:
```c++
((AddNewTorrentDialog::isEnabled() && skipTorrentDialog == TriStateBool::Undefined)
 || skipTorrentDialog == TriStateBool::False);
```

It is more clear that way."
114079866,5532,sledgehammer999,2017-04-30T17:11:29Z,Does anyone know why we don't print this on Windows? It seems like a mistake.
114080689,5532,sledgehammer999,2017-04-30T17:57:26Z,"`metadata` should be treated the same as `data`. They are in plural. And I like my oldschool (and correct) English!!!
1. http://www.dictionary.com/browse/data
2. http://www.dictionary.com/browse/metadata"
114080744,5532,briankendall,2017-04-30T18:00:32Z,I agree!
114080809,5532,briankendall,2017-04-30T18:04:17Z,"I didn't write the original version of that line, so I don't know. From my perspective I don't see any reason not to include it in Windows, though. If you'd like me to remove the `#ifndef Q_OS_WIN` I can do that."
114080850,5532,briankendall,2017-04-30T18:06:32Z,"I'm generally a descriptivist when it comes to language and I think at this point ""data"" and ""metadata"" can both be used as singular words as it's undeniably become a common usage. But regardless I'll make the change."
114081051,5532,zeule,2017-04-30T18:17:11Z,A datum? Is it not used nova days?
114081080,5532,sledgehammer999,2017-04-30T18:19:05Z,"If it isn't too much trouble for you, please do."
114081095,5532,briankendall,2017-04-30T18:19:50Z,"@sledgehammer999 What about cases where qBittorrent's application-wide settings are configured to a) add torrents paused by default or b) skip the dialog by default? There should be a way to override the application settings from the command line and force adding a torrent in a started state or force showing the ""Add new torrent"" dialog, hence the ability to specify `--add-paused=false` or `--skip-dialog=false`.

We eventually settled on having a tri-state bool command line option since it seemed like the best solution, especially since the options for whether a new torrent should be started or paused are mutually exclusive."
114081155,5532,sledgehammer999,2017-04-30T18:23:44Z,"Maybe I have misunderstood the code or my comment was incomplete.
Why isn't it possible for user to use `--add-paused`, `--add-paused=true`, `--add-paused=false`?
In this case the omission of a value should be equal to `true`. And if the user doesn't use the command switch the application wide setting should apply."
114081231,5532,briankendall,2017-04-30T18:28:11Z,"Oh, I see what you're getting at. You're correct, we could make it legal to omit a value, and have it default to what the option's name implies.

I could implement that by adding an additional argument to the constructor of `TriStateBoolOption` that specifies what it defaults to without a value and then change it to not  throw an error and use that value when no argument is specified."
114081326,5532,briankendall,2017-04-30T18:32:46Z,"That said, I don't think it's the end of the world to require a value, and I am keen to see this PR completed! Changing `TriStateBoolOption` option to work that way isn't a trivial amount of work."
114082208,5532,sledgehammer999,2017-04-30T19:23:54Z,"Okay, I'll merge it then. I'll try to make the change myself today. If you see nothing by tomorrow, feel free to open a followup PR."
111361333,6627,zeule,2017-04-13T10:51:05Z,"According to the destructor code below, the class owns `lockFile` object. Why don't you say this in the signature? Or make this constructor private."
111362196,6627,zeule,2017-04-13T10:56:31Z,Would swap this line and the next one.
111363296,6627,zeule,2017-04-13T11:04:45Z,And where is locking itself?
111365172,6627,zeule,2017-04-13T11:17:29Z,"And if file operation fails later on, then what?"
111366129,6627,zeule,2017-04-13T11:24:05Z,Why so many new files have underscore in names?
111366416,6627,zeule,2017-04-13T11:25:55Z,Registration function seems to be called more than once. Is it needed?
111366725,6627,zeule,2017-04-13T11:27:38Z,You schedule parsing job for the main thread? Why?
111368997,6627,zeule,2017-04-13T11:43:44Z,Why not a constructor?
111369573,6627,zeule,2017-04-13T11:47:44Z,"Cosmetic: as of time of writing there are  27 log messages with ""could not"" and 17 with ""couldn't"". Could we choose a single style?"
111370651,6627,zeule,2017-04-13T11:55:28Z,The following piece is partially shared with `AutoDownloader::setProcessingEnabled(bool enabled)`.  Wouldn't it be nicer to refactor the common code into a function?
111370888,6627,zeule,2017-04-13T11:57:03Z,`setRule()` does extend a collection? Quite confusing!
111371264,6627,zeule,2017-04-13T11:59:14Z,Would swap this line and the next one.
111371300,6627,zeule,2017-04-13T11:59:27Z,Same here.
111371452,6627,zeule,2017-04-13T12:00:26Z,Wounded comment :)
111372614,6627,zeule,2017-04-13T12:07:43Z,"Consider iterators or `std::hash` to avoid unnecessary look-ups. Or, better, forget already about Q containers..."
111372655,6627,zeule,2017-04-13T12:08:00Z,?
111372855,6627,zeule,2017-04-13T12:08:59Z,which -> that
111373164,6627,zeule,2017-04-13T12:10:19Z,"Consider
```C++
if (auto feed = Session::instance()->feedByURL(job->feedURL)) {
```"
111373628,6627,zeule,2017-04-13T12:13:07Z,"Consider renaming `RulesFile` into `RulesFileName`, because now this line looks confusing."
111373731,6627,zeule,2017-04-13T12:13:38Z,Redundant call.
111374452,6627,zeule,2017-04-13T12:18:01Z,Such a strange lone change! Where is the code that requires this include?
111374901,6627,zeule,2017-04-13T12:20:53Z,Uhm... A simple short class depends on JSON object? Are you sure?
111375207,6627,zeule,2017-04-13T12:22:35Z,"""Undefined"" is not semantically equal to ""incorrect"" , but you seems to use ""Undefined"" in this way. All in all, I'm against this operator because there is no real conversion between a JSON value and bool value and it is illogical to pretend the other way. "
111375698,6627,zeule,2017-04-13T12:25:13Z,What was wrong with constants???
111376090,6627,zeule,2017-04-13T12:27:49Z,The variable name matches nor its value nor usage. `isURLScheme`? 
111376942,6627,zeule,2017-04-13T12:32:32Z,"This is not a FDO correct icon name. The only one that can be use here and be consistent with FDO scheme is `application-rss+xml` AFAIK. So, suggest the following change:
```c++
m_ui->tabSelection->item(TAB_RSS)->setIcon(GuiIconProvider::instance()->getIcon(""application-rss+xml"", ""rss-config""));
```"
111395425,6627,Chocobo1,2017-04-13T13:56:42Z,">Why don't you say this in the signature? 

please explain

>the class owns lockFile object

what about using `m_lockFile->setParent(this);`?"
111397992,6627,zeule,2017-04-13T14:07:40Z,"The standard way in C++ to say that a function takes ownership of an object, passed by pointer, is to take it as `std::unique_ptr<T>`."
111406488,6627,Chocobo1,2017-04-13T14:43:23Z,"If you are concerned about performance you might want to use `QRegularExpression` instead of making it `static`.

>The QRegularExpression class introduced in Qt 5 is a big improvement upon QRegExp, in terms of APIs offered, supported pattern syntax and speed of execution. "
111411394,6627,Chocobo1,2017-04-13T15:03:17Z,"wanna ask, is this class serves the same purpose as `boost::optional<bool>`?

ps. `boost::optional` is header only
pps. c++17 has `std::optional`"
111413802,6627,Chocobo1,2017-04-13T15:12:46Z,"just looked up `QStringLiteral`.
from http://blog.qt.io/blog/2014/06/13/qt-weekly-13-qstringliteral/
>If you use QStringLiteral you should avoid declaring the same literal in multiple places: This furthermore blows up the binary sizes"
111414487,6627,Chocobo1,2017-04-13T15:15:44Z,would you want to use `QLockFile` ?
111414568,6627,zeule,2017-04-13T15:16:03Z,or there is `experimental/optional`. Don't know what compilers have this file.
111415301,6627,Chocobo1,2017-04-13T15:19:20Z,">forget already about Q containers...

you mean using the counterparts in std lib right?
is there a catch doing so? if none, I'm all for it."
111415581,6627,thalieht,2017-04-13T15:20:31Z,One line up.
111421609,6627,Chocobo1,2017-04-13T15:46:06Z,"Not sure I understand thoroughly,
I see `mutex.lock()` everywhere, why not:
```c++
QHash<QString, QByteArray> temp;
m_jobsMutex.lock();
m_jobs.swap(temp);
m_jobsMutex.unlock();

// start operations with temp
```
and no more locking after that."
111425864,6627,thalieht,2017-04-13T16:04:27Z,Something's wrong with the spacing.
111425995,6627,thalieht,2017-04-13T16:05:07Z,I don't think Visibled is a word. Maybe you meant Visible.
111426075,6627,thalieht,2017-04-13T16:05:32Z,In `Parser::parseRssArticle` you change `link` to `tmp` but not here.
111434677,6627,glassez,2017-04-13T16:46:28Z,Maybe I just chose the wrong name? This is not IPC LockFile. Here I used the same approach as in Bittorrent::Session before. It's just a way to block certain folder from deletion while program run.
111434927,6627,glassez,2017-04-13T16:47:39Z,See my comment below.
111435540,6627,glassez,2017-04-13T16:50:37Z,">Or make this constructor private.

It's private."
111435903,6627,glassez,2017-04-13T16:52:20Z,">what about using m_lockFile->setParent(this);?

AFAIK, QFile isn't QObject."
111445711,6627,Chocobo1,2017-04-13T17:40:39Z,but it is... [QFile::QFile(QObject *parent)](http://doc.qt.io/qt-5/qfile.html#QFile-2)
111445824,6627,zeule,2017-04-13T17:41:10Z,"> It's private.

Indeed, pardon me. My next question: why do you need that `create()` function when you throw an exception if returned object is `nullptr`?"
111445873,6627,glassez,2017-04-13T17:41:24Z,"In addition to the asynchronous files write another optimization of this class is the following: when someone tries to write the same file (of course with amended contents) repeatedly in a time when a thread is busy (writing another file), only its latest version will be writte. In other words, if we add the job in the queue for file we already have an existing job, we replaced it. 
So your proposal is not appropriate here."
111447318,6627,glassez,2017-04-13T17:48:29Z,">but it is... QFile::QFile(QObject *parent)

Oops... Apparently I was too sleepy when I wrote these lines of code. But I think in this case it is not so important to do `m_lockFile->setParent(this);` or `delete m_lockFile`."
111447392,6627,zeule,2017-04-13T17:48:52Z,"Aha, this makes better sense then. But it will not work in the UNIX world. You have to set immutable flag on the file.
Example: http://stackoverflow.com/questions/32488017/how-do-i-chattr-i-an-open-file-descriptor-in-c"
111448550,6627,glassez,2017-04-13T17:54:09Z,">My next question: why do you need that create() function when you throw an exception if returned object is nullptr?

I do it (break program run) at a higher level. It's too simple (utility) class to do this. It should have a wider scope (for example, somewhere we may need to select a different folder, if we can't ""block"" some one)."
111449845,6627,glassez,2017-04-13T17:59:50Z,"We can delete folder with opened for writing files on UNIX? Damn, how to live with it? And what happens with this file from the point of view of the writing process?"
111451174,6627,glassez,2017-04-13T18:06:12Z,Fixed.
111451445,6627,glassez,2017-04-13T18:07:30Z,AsyncFileStorage emit `failed` signal.
111451713,6627,zeule,2017-04-13T18:08:49Z,"> Damn, how to live with it?

Very conveniently. This is the same type of possibility as overwriting running executable.

> And what happens with this file from the point of view of the writing process?

Nothing. It continues to exist until closing."
111452559,6627,glassez,2017-04-13T18:12:42Z,"To separate an additional prefix from the base name of the file (which usually matches the name of the class). Should I remind you why we use these additional prefixes for files in subdirectories of the project? Since we can have the same file names in different subfolders, it can lead to conflict when you build using qmake (because it builds everything in one folder)."
111453224,6627,glassez,2017-04-13T18:16:08Z,"I just didn't want to do it in some external class. Admittedly, it's not the best solution. Best to fix it. Tell me please the best way. Maybe some static initializer?"
111454006,6627,glassez,2017-04-13T18:19:50Z,Why for the main thread? Queued slots are called in thread of its object. In case the parser is in another thread it will be called there. Now we use parsers in another thread (`Session::workingThread()`).
111454258,6627,glassez,2017-04-13T18:21:03Z,"We can't create a valid object, if we do not get access to the folder."
111454555,6627,glassez,2017-04-13T18:22:25Z,A question of the project level. We mix it everywhere.
111455108,6627,zeule,2017-04-13T18:25:11Z,"Thanks, the reminder was needed."
111455270,6627,zeule,2017-04-13T18:25:58Z,"Yes, I would go with a static initialiser."
111455320,6627,glassez,2017-04-13T18:26:12Z,Ok. Done.
111455522,6627,zeule,2017-04-13T18:27:07Z,"Ah, Qt's thread magic... Good."
111455627,6627,zeule,2017-04-13T18:27:35Z,So `thow`then. Why not?
111456511,6627,zeule,2017-04-13T18:31:24Z,"But this is exactly the point why use exceptions! They pass error information to the level where it can be adequately processed, and if this processing is just logging or re-throwing."
111457839,6627,zeule,2017-04-13T18:37:14Z,But I meant that you removed the object from `m_jobs`. and it was not serialised.
111460947,6627,glassez,2017-04-13T18:50:28Z,"In the General case, Yes. But how can you be here? To replace this with `addRule()` - `changeRule()`? This will lead to a lot of checks (e.g., adding a rule with a used name, changing the rule, which is still missing)."
111532456,6627,glassez,2017-04-14T05:50:15Z,"Maybe I'm behind the times (because I'm just hobbyist), but two equivalent approach existed previously: the use of exceptions or the function return codes/results. It was a matter of taste which to use. I never liked exceptions. If you have no objective arguments, then let it remain as it is."
111532703,6627,glassez,2017-04-14T05:54:38Z,The write fails only in exceptional situations. I don't think we need this data after. The caller decides what to do in case of failure.
111561064,6627,zeule,2017-04-14T11:01:46Z,"I, of course, disagree with you :) They are not equivalent and never were: exception handles... well, an exceptional case, clearly separating in the code a regular branch and the case of an error. I hope some time you agree with this vision. In any case, I do not insists on replacing this function with constructor + exception. "
111561290,6627,zeule,2017-04-14T11:04:55Z,"My question is as follows: it is very easy to provide here the strong guarantee, and why don't you do that? Use cases might include network attached drives."
111572451,6627,glassez,2017-04-14T13:20:36Z,"I dare say that you're probably wrong. Once in the professional environment there is no consensus on this matter, it is impossible to objectively recognize one of these approaches is undoubtedly the best."
111577779,6627,glassez,2017-04-14T14:09:03Z,What do you mean exactly? Should we re-add job into queue if it fails? How many times do we have to try to repeat it in case of failure?
111578693,6627,glassez,2017-04-14T14:16:13Z,"What?
If you confusing with commented lines here I do a some optimization (see below), but I leave old code commented here to undo my changes if it is not approved."
111579397,6627,glassez,2017-04-14T14:21:39Z,"I'll just change it with `foreach` by value. Please, no start holy war here!"
111580114,6627,glassez,2017-04-14T14:26:25Z,"I forgot to remove it after some testing.
By the way, if you're interested, I found one unpleasant thing in qsettings (apparently it refers to INI format)."
111580967,6627,glassez,2017-04-14T14:32:50Z,"We have constants now but in another way. The old approach had problems with comparison operators.
What do you think, will it be better to use `boost::optional<bool>` instead?"
111581911,6627,glassez,2017-04-14T14:39:28Z,"I just made it to be `static const` since it is unchangeable inside method and between its calls.
This is a simple change (like changing the case of characters in a variable name). I don't want to be distracted by outside things in this big PR. So if something is wrong with it, I'll just take it as it was."
111582276,6627,glassez,2017-04-14T14:41:36Z,"We already have `application-rss+xml` icon, but it isn't I need. It has different color with other options dialog icons. What I can do in this case?"
111582697,6627,glassez,2017-04-14T14:44:25Z,Ok. I'll turn them into static constants.
111582886,6627,glassez,2017-04-14T14:45:38Z,Reverted there.
111618629,6627,glassez,2017-04-14T18:48:43Z,">Nothing. It continues to exist until closing.

I don't understand it now. I mean, I can write to a file which no longer exists on disk? Okay, have to fill in the gaps in my knowledge of Unix. 
In any case, I'm incompetent to do anything more advanced with this, so I'll leave it as is. Maybe later someone will come up with a reliable way to solve this..."
111620024,6627,glassez,2017-04-14T18:58:28Z,Done.
111620230,6627,glassez,2017-04-14T18:59:59Z,Done.
111620251,6627,glassez,2017-04-14T19:00:08Z,Done.
111620391,6627,glassez,2017-04-14T19:01:19Z,Fixed.
111621983,6627,glassez,2017-04-14T19:14:03Z,"No, will not work. After all, I need links to the rules... Will use c++11 `for`."
111622054,6627,glassez,2017-04-14T19:14:43Z,Fixed.
111622205,6627,glassez,2017-04-14T19:16:00Z,Fixed.
111622337,6627,glassez,2017-04-14T19:17:08Z,Ok. Removed.
111622476,6627,glassez,2017-04-14T19:18:10Z,Remove it here.
111622838,6627,glassez,2017-04-14T19:20:59Z,"But I need to store TriStateBool in JSON and I also need failsafe conversion from QJsonValue.
Moved it from here to another place."
111650276,6627,thalieht,2017-04-14T23:38:14Z,"You forgot to change these names along the filename change.
Also i noticed you use `#pragma once` in half the header files but include guards in the other half."
111658378,6627,glassez,2017-04-15T04:34:06Z,"Will be fixed.

>Also i noticed you use `#pragma once` in half the header files but include guards in the other half.

Almost all the files under *base/rss* have been heavily rewritten (or rather, they were created from scratch using the old code) and I decided to use `#pragma once` there. My goal was not to change it everywhere."
111671321,6627,zeule,2017-04-15T19:02:57Z,"Well... Qt names this `insert()`, STL `insert_or_assign()`. IMO, both names are fine."
111671359,6627,zeule,2017-04-15T19:04:39Z,As you like.
111671399,6627,zeule,2017-04-15T19:08:14Z,"Strong guarantee means that state of the object does not change in case of error. Thus, try write an object, `throw` or `emit` when it fails or remove the object from collection when writing succeeded.  Then, At the upper level, you may ask user shall we try again. Because maybe he will put cable back in the socket and the problem is solved?"
111671463,6627,zeule,2017-04-15T19:12:38Z,"Could you leave a comment in the source code, please? "
111671531,6627,zeule,2017-04-15T19:17:49Z,"Sorry, I mistyped. The correct code:
```C++
m_ui->tabSelection->item(TAB_RSS)->setIcon(GuiIconProvider::instance()->getIcon(""rss-config"", ""application-rss+xml""));
```
It will try to load icon ""rss-config"" from the current theme, this icon will not be found and it will try ""application-rss+xml"" (also from theme). This will be found. When system icon theme is disabled, the first one will be found. "
111671752,6627,glassez,2017-04-15T19:32:35Z,"But this class was designed as non interactive. It's mostly for writing data with short lifetime. Instructed and forgotten. Write error in this case is just a coincidence (which is very unlikely), or serious problems with the hardware, the OS (or brain) of the user. In the first case, it is sufficient to ignore this error and continue working (well, maybe to repeat the task if it has not yet been reset). In the second case, actually, the normal operation of the program impossible, but it is beyond the scope of this PR."
111671823,6627,glassez,2017-04-15T19:36:55Z,The comment below isn't enough? Or I should put it here instead?
111672468,6627,zeule,2017-04-15T20:14:07Z,"I feel a strong temptation to copy this answer and use it next time I get a review like

> For a starters, fix coding style.

Would you find that appropriate, Sir?"
111672576,6627,zeule,2017-04-15T20:23:16Z,"I believe the comment would be placed better right where the question arises. Although, in my code I usually use `#ifdef` in such cases:
```c++
#if USE_OPTIMIZED_CODE_FOR_FEATURE_X
 blah-blah optimized
#else
 vanilla blah-blah
#endif
```
  "
111674466,6627,mgziminsky,2017-04-15T22:30:36Z,"You should use `hasRule` here, and all the other places you are doing `m_rules.contains`

You should use `ruleByName` for the else if below as well."
111674532,6627,mgziminsky,2017-04-15T22:35:25Z,"You can combine this `if` with its parent.
```
if (feed && auto article = feed->articleByGUID(job->articleGUID))
```"
111674744,6627,mgziminsky,2017-04-15T22:46:20Z,"You can't set this here. It needs to be moved to either before the return below, or after this `if` block. Setting it here means rules with `ignoreDays` could be ignored forever. You should only be updating the last match if all match conditions, including `ignoreDays`, match.

I prefer you set it after the `if`, because I find it useful to know when a rule last matched, even when I'm not using ignored days."
111674789,6627,mgziminsky,2017-04-15T22:50:06Z,There are a lot of places in your code where you nest `if` statements like this. I think you should merge them all into single statements and use `&&`
111674952,6627,mgziminsky,2017-04-15T23:05:40Z,"Why not give these a more human friendly name? Maybe `m_url.replace(QRegulareExpression(""\\W+""), ""_"")`"
111675128,6627,mgziminsky,2017-04-15T23:17:23Z,This should be using the same scheme as the feed url for the icon. This is an existing bug that I had fixed in one of my PRs. https://github.com/qbittorrent/qBittorrent/pull/6368/files#diff-5890b862f225705b8036dc3fbfc71f79L321
111675194,6627,mgziminsky,2017-04-15T23:24:19Z,"Answer: Yes

RSS feeds should always be ordered by date"
111675284,6627,mgziminsky,2017-04-15T23:32:27Z,You should be using `Item::PathSeparator` here
111675400,6627,mgziminsky,2017-04-15T23:40:06Z,"This seems a bit lenient. How about just restricting it to word characters (\w), dash (-), and dot (.)?

Also, should use `Item::PathSeparator`

So: `QString(R""(\A\w+(%1\w+)*\z)"").arg(Item::PathSeparator)`"
111677988,6627,glassez,2017-04-16T04:56:54Z,"Well, it's a matter of taste... Maybe I'll rework it in places where it will not break readability."
111678164,6627,glassez,2017-04-16T05:16:08Z,What do you mean? Did I break some coding style here?
111678224,6627,glassez,2017-04-16T05:22:48Z,">Setting it here means rules with ignoreDays could be ignored forever.

Please re-read the code. You're wrong.
>I prefer you set it after the if, because I find it useful to know when a rule last matched, even when I'm not using ignored days.

...as it was before.
Ok. I'll produce two compile time branches (as @evsh suggested) and use old behavior by default."
111678266,6627,glassez,2017-04-16T05:28:37Z,Why do you need human friendly name for these files? It's not for user editing (and even reading in most cases). Are you sure you really want it?
111678298,6627,glassez,2017-04-16T05:32:30Z,"I mean, the sorting is presentation layer job, isn't it? Someone may need other sorting..."
111678361,6627,glassez,2017-04-16T05:36:06Z,"We should not limit this greatly. After all, we assume URL as the last Feed path item."
111682764,6627,glassez,2017-04-16T11:33:25Z,Or even otherwise. We can skip the immediate rules file overwrite if a rule does not use ignoreDays. It will be updated later. What do you think?
111684168,6627,zeule,2017-04-16T13:27:26Z,"This universal answer caught my attention:

>  I don't want to be distracted by outside things in this big PR. So if something is wrong with it, I'll just take it as it was."
111684170,6627,mgziminsky,2017-04-16T13:27:39Z,"> You're wrong.

I'm pretty certain I'm not. I'll walk you through what your code is doing now.
Say I have a rule that matches once per day, and `ignoreDays = 2`. It should match every other day, but with yours, the following will happen.

Day 0 - Should download:
 ` rule.lastMatch() = null`
  `rule.setLastMatch(0)`
  `if (null.isValid())` is false. Match success and download. **OK**

Day 1 - Should ignore:
  `rule.lastMatch() = 0`
  `rule.setLastMatch(1)`
  `if (0.isValid())` is true
  `if (1 < (0 + 2))` is true. Skip. **OK**

Day 2 - Should Download:
  `rule.lastMatch() = 1`
  `rule.setLastMatch(2)`
  `if (1.isValid())` is true
  `if (2 < (1 + 2))` is true. Skip. **WRONG**. This will continue forever"
111684306,6627,mgziminsky,2017-04-16T13:36:52Z,"Actually, I also just noticed that you are using `currentDateTime` for the match date, which is also incorrect. You should be using the date from the article."
111684934,6627,glassez,2017-04-16T14:14:25Z,"Sorry, I wrote the last comment without seeing the code (I remember it was supposed to work, so I thought that this is the case). You're right. I fixed it. Also I defer all kinds of optimization yet...
>Actually, I also just noticed that you are using currentDateTime for the match date, which is also incorrect. You should be using the date from the article.

This is legacy behavior.
Fixed now."
111695561,6627,mgziminsky,2017-04-17T00:46:50Z,"True, if you were to just do the sorting in the UI that would be fine also. How it is now though, the UI doesn't let you sort manually. I also noticed they are in the reverse order while I was testing.

So either enable sorting in the current UI, with newest at the top being the default, or leave the sorting here and reverse the order."
111695690,6627,mgziminsky,2017-04-17T00:53:07Z,"Right, I forgot about that. In that case, you can still greatly simplify the regex to my suggestion, just replace both `\w` with `[^%1]`"
111695884,6627,mgziminsky,2017-04-17T00:59:58Z,"If you don't intend for a person to be able to read and modify them, don't store them in json. Personally, there have been several times where I have wanted to view and edit this data, so I think you should store them as you are now, but make the filenames more friendly."
111696338,6627,mgziminsky,2017-04-17T01:18:50Z,"I think you should use the `SpecialFolder::Config` for this and make `ConfFolder = ""rss""` and `ItemsFile = ""feeds.json""`. I also think you should place the download rules in the same location. Only the articles should in the data folder.

Speaking of the config storage overall, I think you should change some of the folder names as well. Here is what I think makes the most sense:
`CONFIG_PATH/rss/feeds.json`
`CONFIG_PATH/rss/download_rules.json`
`DATA_PATH/rss/articles/NORMALIZED_FEED_NAME.json`"
111702886,6627,glassez,2017-04-17T03:46:57Z,Ok. I'll do it.
111703250,6627,glassez,2017-04-17T03:56:12Z,"Sorting is still here. Or this comment so annoying to you that I should remove it? 
As for the order... You have several times accused me for things I didn't do. This is the existing logic. If you want me to fix something in passing, make a reservation to that effect, why should I do so (why the old logic is incorrect)."
111703365,6627,glassez,2017-04-17T03:59:11Z,"My regex mean ""have no separator at start and at end and have no two or more separators together"". Do your regex mean the same?"
111703806,6627,glassez,2017-04-17T04:08:57Z,"Ok. This makes sense.
The one thing I don't like (in general) download rules file contains not only configuration data but also some ""state"" data that, moreover, are updated frequently (I mean lastMatch field)."
111704592,6627,mgziminsky,2017-04-17T04:28:49Z,"First off, I apologize if my comments seemed accusatory, that wasn't my intention. I'm just trying to describe the expected behavior, and where I found that behavior doesn't align while testing. 

I'm aware that the sorting is still happening in the code below, I just wanted to describe why the sorting was desired. I agree with your response that performing the sorting during presentation would actually be preferred. That isn't currently what is happening though, so it is either necessary to leave the sorting below, or you could remove it from here and add it to the UI.

Because this diff shows everything as added code, it is extremely hard to tell which parts are new, and which parts are unchanged from before. That being said, the article list in the UI is definitely reversed in this version compared to the main version, so something must have changed somewhere."
111704783,6627,mgziminsky,2017-04-17T04:33:46Z,"Effectively, yes. Mine is ""Start with 1 or more non-separators, followed by 0 or more sets of 1 separator then 1 or more non-separators."""
111705341,6627,mgziminsky,2017-04-17T04:47:25Z,"True, but why is that a problem? We already store various other state data in the main settings that are potentially changed frequently, such as UI dimensions. 

It's also potentially useful to treat the lastMatch as config data as well. For instance, it could be useful to be able to clear and/or modifying that value when also using ignore days to manipulate the next time a match will occur."
111708166,6627,glassez,2017-04-17T05:46:36Z,"I always thought this is incorrect, and I have repeatedly offered to separate settings and states. 
But here you are right (I thought about this too), lastMatch can be considered as settings as well."
111708425,6627,glassez,2017-04-17T05:51:17Z,"The old code had an inconsistent structure, and I may have misunderstood something. How it needs to be sorted from the user's point of view (in the UI)?"
111708743,6627,glassez,2017-04-17T05:56:08Z,One more question: how articles are usually sorted in feed xml (retrieved from server)?
111731259,6627,glassez,2017-04-17T11:13:36Z,"@evsh, your memory is strange... 
>For a starters, fix coding style.

Don't forget that when you publish your own PR. In addition, the adherence of coding style is not something external, but an integral part of each coding job in the project.
As for this place, I rewrote it (because it is faster than arguing here with you).
>If you are concerned about performance you might want to use QRegularExpression instead of making it static.

@Chocobo1, I leave it as static const. I don't see any reason why it shouldn't be static. What do you think?"
111732321,6627,glassez,2017-04-17T11:29:18Z,"When it comes to collections, I agree `insert` is correct name. But AutoDownloader is not a collection of rules, it just contains a collection of rules, so `insert` here is incorrect to. But since I can't find a more appropriate name, I change it on `insertRule`, since it is more like you. Although, maybe `useRule` will be better?"
111736289,6627,glassez,2017-04-17T12:32:08Z,"@evsh, if I change my mind and I decide to use exceptions here, how should I do this? Do I need to create `AsyncFileStorageError` inherited from `std::runtime_error`?"
111740826,6627,Chocobo1,2017-04-17T13:23:31Z,">I don't see any reason why it shouldn't be static. What do you think?

I'll let you decide, since I can't argue the slowness of `QRegExp` is at construction or `QRegExp.exactMatch()` (hence the suggestion above).
"
111744860,6627,mgziminsky,2017-04-17T13:58:54Z,"The user expects to see the newest articles at the top, which is also typically the order they appear in the feed."
111759228,6627,glassez,2017-04-17T15:31:58Z,"Hell, one small typo can become a major headache. Fixed it. Thank you for testing!"
111762260,6627,Chocobo1,2017-04-17T15:51:04Z,2017.
111765910,6627,zeule,2017-04-17T16:12:56Z,@glassez: exactly.
111767259,6627,zeule,2017-04-17T16:20:47Z,"Assuming your explanation, why signal serialisation error then? Aren't you want to do this to let your client to do something about the error?"
111767669,6627,glassez,2017-04-17T16:23:04Z,Fixed.
111771118,6627,glassez,2017-04-17T16:44:03Z,"Really, I don't know what to do in this situation. Signal to display a message in the log, while this is the only way. 
All the rest of the application assumes that the data/configuration folders is OK, or just trying to create them every time they want to write the file.
Have you any ideas (not violating the desired behavior in this class)? "
111806741,6627,zeule,2017-04-17T19:50:11Z,"I would forward the decision to the user (human). I.e. I would, as I wrote earlier, implement the strong guarantee, and then ask user whether to try again or not. And remove the key that leads to error in the latter case."
111848348,6627,sledgehammer999,2017-04-18T00:10:54Z,Don't you need `Q_DISABLE_COPY(Session)` too?
111848518,6627,sledgehammer999,2017-04-18T00:12:34Z,Isn't it a good idea to keep these things similar? All of our other singletons use the initInstance()/freeInstance()/instance() triplet. Unless you want to solve a technical problem...
111848672,6627,sledgehammer999,2017-04-18T00:14:20Z,"Why not keep the old names? Does the data format change here?
(same to the others)"
111850069,6627,sledgehammer999,2017-04-18T00:28:38Z,should be initialized in the constructor
111869235,6627,glassez,2017-04-18T04:33:20Z,"It will be initialized in every constructor that does not initialize it explicitly.
This new syntax ensures that the field will be initialized and we can not worry that we will forget to do it in some constructor. I would strongly not recommend to ignore this initializer form and/or to prohibit it."
111870087,6627,glassez,2017-04-18T04:45:39Z,This is my new approach to make singletons initialization more clear. The first created object become global instance (similar approach is used in QApplication). Since all our singletons must be initialized by Application there is no problem. It allow to initialize singletons using its constructors. It will allow to clearly initialize inherited singletons (like GuiIconProvider; we just call `new GuiIconProvider`and then use `IconProvider::instance()` in base code).
111872974,6627,glassez,2017-04-18T05:21:33Z,"I had some conflicts with my new config options (because of some strange/specific/buggy QSettings behavior I found). I prefer rename old options to proper names instead of trying to fit the new names.
This will break only RSS GUI settings and make it invisible again. But it would further indicate to the user that there is now a new (revised) RSS subsystem."
111879918,6627,glassez,2017-04-18T06:33:26Z,"That's a very good theoretical idea ;) But from a practical point of view, it causes a lot of questions seem to require a separate task to solve them."
111886263,6627,glassez,2017-04-18T07:24:33Z,"Strong guarantee. 
Perhaps the most simple in itself. If we leave the job in the queue in case of failure, we simply overwrite it as you normally would, if updated data become available.

User interaction. 
We can't implement this for non-interactive component. We can only delegate it in the interactive layer, but how? Now we do not have a suitable notifications subsystem so that it will require to spoil the interfaces of the affected classes by ugly inappropriate signals/methods.

One more question.
Let's say we have the ability to communicate with the user. What can he do in this case? As I said, it's either some kind of temporary glitch that does not require any response, except, perhaps, fix this event in the log and attempts to repeat writing some time ago (agree, I have to implement it), or there is a serious malfunction of the whole system (what to do in this case?).

In General, if you don't have a ready solution (not abstract advice), let's leave this for a separate topic. It doesn't break current application behavior."
111958102,6627,sledgehammer999,2017-04-18T13:51:05Z,I didn't notice that these are for GUI settings. So it is ok to break them IMO.
111958598,6627,sledgehammer999,2017-04-18T13:52:44Z,"Comment about consistency: IIRC the rest of the settings(in settingstorage too) use ""Enabled"" to denote the visibility of gui element. I am just mentioning it. Do as you please here. It isn't a hard requirement for me."
111959452,6627,sledgehammer999,2017-04-18T13:55:57Z,"So is this even better than doing it the initializer list?
I think you have only one constructor here.
Just so you know, this design decision will result in recompilations of stuff that include this header in case we want to change the value of the variable. (I am talking about local testing. Releasing requires clean builds anyway)."
111968471,6627,glassez,2017-04-18T14:29:13Z,">Just so you know, this design decision will result in recompilations of stuff that include this header in case we want to change the value of the variable. 

But this is only the default value! It does not change practically never. In any case, much less than the other members of the class.
"
111978253,6627,sledgehammer999,2017-04-18T15:03:50Z,"Ok leave as it is. I am not going to argue for this particular variable. Under normal circumstances this value won't ever change, so further discussion is moot."
112011015,6627,zeule,2017-04-18T17:12:27Z,"I don't like that this resource is created not in the constructor, but is freed in the destructor. AFAIK,  local throw/catch in 
`AsyncFileStorage::create()` but with all the invariant set up code in the constructor would be better."
112011098,6627,zeule,2017-04-18T17:12:52Z,"If you are not going to implement the lock for UNIX filesystems, please leave a `// TODO:` comment or anything like that."
112011996,6627,zeule,2017-04-18T17:16:42Z,"Maybe an implementation via a critical section would be a cleaner one? Just asking, did try to implement."
112020867,6627,glassez,2017-04-18T17:53:23Z,Ok. I'll redo it using constructor+exceptions.
112021204,6627,glassez,2017-04-18T17:54:46Z,"Ok. I'll do it.
One question on the future. Is there a portable way to do this is for all UNIX systems? Or it depends on the file system?"
112023158,6627,glassez,2017-04-18T18:02:15Z,">I want to simplify AsyncDataStorage by removing jobs rewriting. I want optimize the RSS classes to perform delayed data saving

So this ""concurrency"" code will be unneeded. 
Think of it as a temporary solution. I'll change it, perhaps even along with this PR. Either directly after it. As I wrote, I don't want to delay it, because the basic functionality is ready and it is required for other tasks that need to be on top of it (I mean so long-awaited web interface)."
112031761,6627,glassez,2017-04-18T18:38:08Z,Fixed.
112042192,6627,sledgehammer999,2017-04-18T19:26:42Z,"Hmm, interesting. I didn't know that.
So just a heads up: Any solution applied here should be applied to the ""BT_backup"" lockfile too."
112046431,6627,glassez,2017-04-18T19:46:27Z,Of course.
112095291,6627,mgziminsky,2017-04-19T00:38:27Z,"shouldn't this be `path.isEmpty() || !re.match(path).hasMatch()`
or do we actually want to allow empty paths?"
112096316,6627,mgziminsky,2017-04-19T00:50:17Z,"Sorry, I just realized the regex I gave you is broken. The path separator needs escaped. the correct one is `R""(\A[^\%1]+(\%1[^\%1]+)*\z)""`

It also wouldn't hurt to set `DontCaptureOption` and `OptimizeOnFirstUsageOption`"
61475406,5196,glassez,2016-04-28T18:11:16Z,"Why not `QStringList`?
And fix coding style for brace-enclosed initializer.
"
61475829,5196,glassez,2016-04-28T18:13:49Z,"1. Don't abuse **auto**.
2. IMO, it will be easier using QDirIterator.
"
61476509,5196,glassez,2016-04-28T18:17:24Z,"Please do not overuse the meaningless names. `torrentFile` (or just `file`) is better.
"
61476566,5196,glassez,2016-04-28T18:17:47Z,"As above.
"
61477371,5196,glassez,2016-04-28T18:22:39Z,"@sledgehammer999 what we decided on the placement of state settings? Which group to put them, `State` or `GUI`?
"
61477433,5196,glassez,2016-04-28T18:22:50Z,"inline
"
61477674,5196,glassez,2016-04-28T18:24:14Z,"Move `?` to the start of next line
"
61478081,5196,glassez,2016-04-28T18:26:34Z,"branchPath
"
61478294,5196,glassez,2016-04-28T18:27:43Z,"Is it used outside the class?
"
61478882,5196,glassez,2016-04-28T18:31:14Z,"In this case, all these functions below are overkill. These one-line methods are only used inside the class and only once.
"
61489863,5196,zeule,2016-04-28T19:39:38Z,"Isn't  the ""Setting"" word in a configuration file superfluous? What else may be there?
"
61489986,5196,zeule,2016-04-28T19:40:39Z,"Don't believe in all-mighty Compiler?
"
61490906,5196,zeule,2016-04-28T19:46:36Z,"Can't understand why do you convert path separators back and forth.
"
61491022,5196,zeule,2016-04-28T19:47:19Z,"Same here (path separators).
"
61491876,5196,zeule,2016-04-28T19:53:25Z,"Why don't you make a constant for the file extension?
"
61492103,5196,zeule,2016-04-28T19:55:00Z,"I would pass `QString::SkipEmptyParts` here.
"
61492232,5196,zeule,2016-04-28T19:55:51Z,"And perhaps trim  the comment.
"
61511583,5196,Chocobo1,2016-04-28T22:15:40Z,"Fixed. But end up using QDirIterator instead...
"
61513935,5196,Chocobo1,2016-04-28T22:37:57Z,"> IMO, it will be easier using QDirIterator.

Yes, funny that I forgot about it.
"
61514677,5196,Chocobo1,2016-04-28T22:45:00Z,"fixed.
"
61514687,5196,Chocobo1,2016-04-28T22:45:04Z,"fixed.
"
61514933,5196,Chocobo1,2016-04-28T22:47:39Z,"Fixed.
"
61515119,5196,Chocobo1,2016-04-28T22:49:38Z,"Fixed.
"
61515239,5196,Chocobo1,2016-04-28T22:50:53Z,"Nope, fixed.
"
61515343,5196,Chocobo1,2016-04-28T22:52:17Z,"striped ""Setting"" prefix.
"
61515772,5196,Chocobo1,2016-04-28T22:57:22Z,"apparently I didn't clean it up aggressively...
"
61516120,5196,Chocobo1,2016-04-28T23:00:20Z,"Fixed.
"
61516171,5196,Chocobo1,2016-04-28T23:00:57Z,"this should be a app-wide constant, but where should it be?
"
61516641,5196,Chocobo1,2016-04-28T23:06:03Z,"It appear to do some tricks at: https://github.com/qbittorrent/qBittorrent/blob/master/src/base/bittorrent/torrentcreatorthread.cpp#L121
"
61516831,5196,Chocobo1,2016-04-28T23:08:22Z,"No, people might want to put ASCII arts in it lol
"
61524310,5196,Chocobo1,2016-04-29T00:46:15Z,"I feel stupid when creating them...
I add a new commit which add a template helper to avoid repeating the same boilerplate code.
"
61525083,5196,zeule,2016-04-29T00:58:50Z,"~~Can't understand how the default parameter value is supposed to work: can you call `QVariant::value<T>()` for an empty `QVariant`? What will it return?~~ Did read the documentation for `QVariant`.  But still:  wouldn't it be better to rephrase it in the following way:

``` C++
T get (const T &defauleValue = T())
```
"
61525322,5196,zeule,2016-04-29T01:02:31Z,"Is it needed to keep UTF-16 here? I would use `QLatin1String`.
"
61525990,5196,Chocobo1,2016-04-29T01:13:35Z,"> can you call QVariant::value<T>() for an empty QVariant? 

From Qt doc: http://doc.qt.io/qt-4.8/qvariant.html#value

> If the value cannot be converted, default-constructed value will be returned.

That's the worst case, so I think it will work fine.

## 

> Would it be better to rephrase it in the following way:

I think no, its probably better to try matching the `QVariant` ctor signature earlier rather than later, in case of an incompatible type results in incomprehensible compiler message.
"
61526030,5196,Chocobo1,2016-04-29T01:14:18Z,"~~Fixed.~~
"
61526088,5196,zeule,2016-04-29T01:15:37Z,"The next step is to rename the class into `StorableValue`, add `operator T` and `operator =(T)` and just read and write them lol
"
61526151,5196,zeule,2016-04-29T01:17:09Z,"I mean use them at the left and right sides of an assignment operator.
"
61526291,5196,zeule,2016-04-29T01:19:37Z,"Thank you for the reply. Excuse me, I should have read the manual before typing.
"
61526446,5196,zeule,2016-04-29T01:22:27Z,"`QLatin1String` here too, please. ~~Replace or add a second constructor.~~ No, replace, please. Since we state that the key is an ASCII sequence, `QString` should not be used here. Albeit it might make sense to add the second constructor with a `const char*` parameter. 
"
61528205,5196,Chocobo1,2016-04-29T02:00:41Z,"Changed, it looks better now. Thanks.
"
61528338,5196,Chocobo1,2016-04-29T02:03:18Z,"I just can't get QLatin1String to work here, try it yourself. :\
"
61529164,5196,zeule,2016-04-29T02:23:30Z,"``` C++
template <class T>
class A {
public:
    A(const QLatin1String& s)
        : s_(s) {
    }
    A(const char* s)
        : s_(s) {
    }
private:
    QLatin1String s_;
};

A<int> a(QLatin1String(""dgfdg""));
A<int> b(""dgfdg"");
```

works here. But of course, it's dangerous because `Qlatin1String` does not copy the data. 
"
61529409,5196,zeule,2016-04-29T02:29:01Z,"Maybe we should add one more template parameter?

``` C++
emplate <class T, class KeyStorageType>
class A {
public:
    A(const KeyStorageType& s)
        : s_(s) {
    }
    A(const char* s)
        : s_(s) {
    }
private:
    KeyStorageType s_;
};

template <class T>
using A1 = A<T, QString>;

template <class T>
using A2 = A<T, QLatin1String>;
```
"
61529957,5196,zeule,2016-04-29T02:43:09Z,"And I would add 

``` C++
operator T() const
{
    return this->operator();
}
```

anyway.
"
61530129,5196,zeule,2016-04-29T02:46:52Z,"I like the result too, thank you for the idea!
"
61536626,5196,glassez,2016-04-29T05:55:09Z,"IMO, it's overkill.
"
61540919,5196,glassez,2016-04-29T07:08:33Z,"This class has an inconsistency. We set the value using using it as variable, but get the value using it as function:

``` c++
someOption = value;
var = someOption();
```

Also you pass default value when get its value. But, IMO, the default value is life-time constant for object of this class.
"
61541239,5196,Chocobo1,2016-04-29T07:13:35Z,"I think just use `QString` to get the job done.
"
61541421,5196,glassez,2016-04-29T07:16:40Z,"I think we should have `base/global.h` for such cases.
"
61551103,5196,Chocobo1,2016-04-29T09:08:16Z,"> This class has an inconsistency

Agree. How about like this:

``` c++
void set(const T &value) const
T operator() (const QVariant &defaultValue = QVariant()) const  // get
```

> But, IMO, the default value is life-time constant for object of this class.

This will depend on its scope, for example, see `storeDialogSize`.
It's possible to expand the template like this:

``` c++
template<typename T>
class StorableValue
{
public:
    explicit StorableValue(const QString &keyName, const QVariant &defaultValue = QVariant())
        : m_keyName(keyName)
        , m_defaultValue(defaultValue)
    {
    }

    void set(const T &value) const
    {
        // set
        SettingsStorage::instance()->storeValue(m_keyName, value);
    }

    T operator() (const QVariant &defaultValue = QVariant()) const
    {
        // get
        QVariant defValue = defaultValue.isValid() ? defaultValue : m_defaultValue;
        return SettingsStorage::instance()->loadValue(m_keyName, defValue).template value<T>();
    }

private:
    QString m_keyName;
    QVariant m_defaultValue;
};
```
"
61551357,5196,Chocobo1,2016-04-29T09:10:34Z,"How about `StorageUnit`? Is it any better?
"
61553959,5196,Chocobo1,2016-04-29T09:36:36Z,"Done. I'll update later.
"
61559630,5196,glassez,2016-04-29T10:37:14Z,"> This will depend on its scope, for example, see  storeDialogSize.

This sounds like a bad design in General. But in this case you have another error. Since we use this helper, we need to make these objects to be members of the class whose settings they handle.

> Agree. How about like this:

void set(const T &value) const
T operator() (const QVariant &defaultValue = QVariant()) const  // get

IMO, it's better to use `operator=()` and `operator T()` so we can use it as variable:

``` c++
m_settingDialogSize = QSize(20, 20);
someVar = m_settingDialogSize;
```
"
61562877,5196,glassez,2016-04-29T11:17:14Z,"`SettingsStorage` -> `Setting` (or `SettingValue`)
"
61569140,5196,Chocobo1,2016-04-29T12:30:07Z,"> IMO, it's better to use operator=() and operator T() so we can use it as variable:

Done.
"
61570794,5196,zeule,2016-04-29T12:44:08Z,"> IMO, it's overkill.

For me, overkill is the storing ASCII text in UTF-16, overkill is the usege of `QVariant` (two words) when in the overwhelming majority of cases the value is either `bool` or a number. A bit of additional work for compiler is not an overkill.
"
61572002,5196,zeule,2016-04-29T12:54:53Z,"Besides, whould there be `T m_defaultValue` we can add a bit of reflection and store enum identifiers.
"
61572232,5196,zeule,2016-04-29T12:56:12Z,"The `const` here looks fun. BTW, you can declare m_keyValue as `const`.
"
61573221,5196,Chocobo1,2016-04-29T13:05:24Z,"How about I use

``` c++
const char *m_keyName;
const T m_defaultValue;
```
"
61573302,5196,Chocobo1,2016-04-29T13:06:00Z,"what? what fun? why m_keyValue as const?
"
61573773,5196,zeule,2016-04-29T13:10:21Z,"> what? what fun?

We write a value into an object (which we can read back) via a const-function. Isn't it fun?

> why m_keyValue as const?

Why not? It does not change.
"
61574386,5196,zeule,2016-04-29T13:15:34Z,"And maybe, the constructor has to have the following signature:

``` C++
template <std::size_t N
StorableValue(const char (&)[N], T)
```

This is my naíve attempt to protect from the code like

``` C++
std::string s;
StorableValue v<int>(s.c_str())
s = ""boom!""
```
"
61574428,5196,Chocobo1,2016-04-29T13:15:57Z,"> Why not? It does not change.

Oh, I see it now. I really don't write templates much :\
"
61577294,5196,Chocobo1,2016-04-29T13:27:38Z,"> This is my naíve attempt to protect from the code like

But that is not likely to happen...

what about like this, is there going to be any problems?

``` c++
explicit StorableValue(const std::string &keyName, const QVariant &defaultValue = QVariant())
        : m_keyName(keyName) {}
const std::string m_keyName;
```
"
61577953,5196,zeule,2016-04-29T13:33:02Z,"Looks good to me. `SettingStorage::loadValue(const char*,...)` and `SettingStorage::storeValue(const char*, ...)` would be a valuable addition.

``` C++
explicit StorableValue(std::string &&keyName, const QVariant &defaultValue = QVariant())
```

would be nice to have too.
"
61578612,5196,zeule,2016-04-29T13:38:21Z,"> `SettingStorage::loadValue(const char*,...)` and `SettingStorage::storeValue(const char*, ...)` would be a valuable addition.

No, with `QVariantMap` inside this just does not make any sense.
"
61579057,5196,glassez,2016-04-29T13:42:04Z,"> And maybe, the constructor has to have the following signature:

``` c++
template <std::size_t N
StorableValue(const char (&)[N], T)
```

???
Do you mean the following?

``` c++
template <std::size_t N, typename T>
StorableValue(const char (&)[N], T)
```
"
61579340,5196,zeule,2016-04-29T13:44:22Z,"Oh, I forgot to close the template brackets.
I meant:

``` C++
template <std::size_t N>
StorableValue(const char (&)[N], T)
```
"
61580896,5196,zeule,2016-04-29T13:55:44Z,"I still don't understand your concerns about `QVariant` and `T` conversion. If the type is not registered, `QVariant` triggers a nice `static_assert`. Could you explain, please, what is the advantage of your approach?
"
61581289,5196,glassez,2016-04-29T13:57:49Z,"You know how to bring everything to the absurd! Are you trying to save a few bytes in the string, but you're going to generate a bunch of classes (template instances).
"
61582125,5196,Chocobo1,2016-04-29T14:03:33Z,"don't know if this make sense:
if I wrote `explicit StorableValue(const std::string &keyName, const T &defaultValue = T())`
then I'll have to worry about if `T()` exists or not.
"
61582378,5196,zeule,2016-04-29T14:05:26Z,"Aren't you relying on the same `T()` when you pass an empty `QVariant` to `QVariant::value()`?
"
61582750,5196,zeule,2016-04-29T14:07:59Z,"But what is the overhead from a class in the application? This is not a library, we don't export RTTI.
"
61583368,5196,Chocobo1,2016-04-29T14:12:13Z,"Let me express it in another way:
`SettingsStorage::storeValue(const QString &key, const QVariant &value);`
it uses `QVariant` so I just forward it to here. So another dev won't have to track back to `SettingsStorage` to find it only accept `QVariant` type.
"
61686796,5196,glassez,2016-05-01T13:00:11Z,"Why didn't you change these variables to class members?
"
61861124,5196,Chocobo1,2016-05-03T10:12:00Z,"if moving these to the header file, it could look like this

``` c++
private:
#define SETTINGS_KEY(name) ""TorrentCreator/"" name
    StorableValue<QSize> storeDialogSize(SETTINGS_KEY(""Dimension""));
    // ... others
#undef SETTINGS_KEY  // Ugly undef here!
```
"
61861757,5196,zeule,2016-05-03T10:19:36Z,"A PIMPL may be the solution you are looking for.
"
61863208,5196,glassez,2016-05-03T10:38:25Z,"@evsh you love to complicate everything!

@Chocobo1 you don't need to have `#define SETTINGS_KEY(name) ""TorrentCreator/"" name` in the header!
torrentcreatordlg.h:

``` c++
private:
    StorableValue<QSize> m_settingDialogSize;
    // ... others
```

torrentcreatordlg.cpp:

``` c++
#define SETTINGS_KEY(name) ""TorrentCreator/"" name

// ...

TorrentCreatorDlg::TorrentCreatorDlg(QWidget *parent, const QString &defaultPath)
    : QDialog(parent)
    , ui(new Ui::TorrentCreatorDlg)
    , m_creatorThread(new BitTorrent::TorrentCreatorThread(this))
    , m_settingDialogSize(SETTINGS_KEY(""Dimension""))
    // ... others
```
"
61865735,5196,zeule,2016-05-03T11:08:54Z,"> @evsh you love to complicate everything!

No, it is not the case. Nor the `StorableValue` instances  nor `settingstorage.h` include are parts of the class interface.
"
61871195,5196,glassez,2016-05-03T12:15:17Z,"Don't forget about Forward Declaration.
"
61874926,5196,glassez,2016-05-03T12:52:39Z,"Oh, I'm sorry, we don't use pointers here (and it would be extremely inconvenient), so Forward Declaration is not suitable here.
But in this case PIMPL is overkill too.
"
62015345,5196,Chocobo1,2016-05-04T09:56:46Z,"Done. 
we can refactor this later if needed.
"
62016784,5196,glassez,2016-05-04T10:10:50Z,"Don't forget about the coding style! We use `m_` prefix for private fields.
I have used it in my examples, but you didn't see it... :(
"
62017254,5196,Chocobo1,2016-05-04T10:16:11Z,"I'm sorry, the style is fixed now.
"
62438540,5196,sledgehammer999,2016-05-08T21:12:48Z,"We didn't decide under what name to put the state settings. My opinion is to put them under `State` and each class should use a generic name for their name. For example `State\TorrentCreator\dimensions` and not `State\TorrentCreatorDlg\dimensions`
"
62438686,5196,sledgehammer999,2016-05-08T21:22:38Z,"You don't need the braces.
"
62438700,5196,sledgehammer999,2016-05-08T21:23:31Z,"Why this check? Can't the user drop both kinds of files simultaneously?
"
62448678,5196,Chocobo1,2016-05-09T04:06:11Z,"2 reasons that I can think of:
1. the user might be confused when he saw 2 different dialogs pop up at the same time, he might want to download or upload but not 2 at the same time, I doubt anyone will want to mix download/upload together.
2. the AddNewTorrentDialog is a modal dialog which could be a problem (dialogs overlap and user cannot switch to another) when multiple dialogs pop up at the same time.
"
62448764,5196,Chocobo1,2016-05-09T04:08:21Z,"Fixed, I'll push later.
"
64773952,5196,Chocobo1,2016-05-26T16:09:49Z,"PR updated.
"
64776464,5196,glassez,2016-05-26T16:24:45Z,"Remove space between `=` and `(`
"
64777808,5196,Chocobo1,2016-05-26T16:32:30Z,"Fixed
"
64863958,5196,glassez,2016-05-27T06:55:08Z,"Fix this method signature too. No spaces between name and start `(`.

``` c++
T operator()(const QVariant &defaultValue) const
```
"
64869956,5196,Chocobo1,2016-05-27T08:01:09Z,"Done.
"
116289958,5196,zeule,2017-05-12T18:01:03Z,"Since @glassez already added `CachedSettingValue`, I think this PR has to use that class."
116290693,5196,zeule,2017-05-12T18:04:49Z,"Do not insist, but I would use `std::partition()` here without explicit loop and two additional containers."
116291146,5196,zeule,2017-05-12T18:06:48Z,"How does it differ from
```c++
if (otherFiles.size()) createTorrentTriggered(otherFiles[0]);
```"
116298545,5196,Chocobo1,2017-05-12T18:41:38Z,"IIRC, the 2 classes are different in some ways... I don't wish to muddle into it again... 😵 "
116300031,5196,Chocobo1,2017-05-12T18:48:49Z,"this is a stub that *might* (or not) expand later to create many torrents at once (if there is an option for it)...
"
116301345,5196,Chocobo1,2017-05-12T18:55:50Z,"it's not performance critical and the current ways are easier to read IMO.
I will keep the current code."
116305672,5196,glassez,2017-05-12T19:17:24Z,But **CachedSettingValue** is enough. Why to create one more class?
116310163,5196,zeule,2017-05-12T19:44:26Z,Sure. But the readability is exactly what I meant here :)
116310258,5196,zeule,2017-05-12T19:45:06Z,"Could you add a comment on this topic to the code then, please? "
116353879,5196,Chocobo1,2017-05-13T08:37:57Z,ok
116354470,5196,Chocobo1,2017-05-13T09:17:28Z,">But CachedSettingValue is enough. 

No, it's not, at least not in current form, see `m_storeDialogSize` in this PR.
I'll need to add:
```c++
/*
      // forget this, won't work!
T CachedSettingValue::operator()(const T &defaultValue) const
{
  if (m_value == T()) {
    m_value = defaultValue;
    SettingsStorage::instance()->storeValue(m_keyName, m_value);
  }
  return m_value;
}
*/
```
~~**UPDATED2**~~  **This won't work in this case**
"
116355272,5196,glassez,2017-05-13T10:05:39Z,"You're fixated on your current implementation. Look at the world wider. Why do you need setting a default value every time? Why do you need storing the default value in the config file?
Just do the following in TorrentCreatorDlg constructor initializer list:
```c++
, m_storeDialogSize(SETTINGS_KEY(""Dimension""), size())
```"
116355698,5196,Chocobo1,2017-05-13T10:34:46Z,">You're fixated on your current implementation. 

And you ignore/forget that the `size()` here gives not the preferred size specified in .ui files.
Here it returns {100, 30} which is too small.

>Why do you need setting a default value every time?

Not I want that, only because the true `size` value is populated then.

>Why do you need storing the default value in the config file?

what default value? the `size()` below returns the dialog size *after* the user resizes!
"
116357246,5196,Chocobo1,2017-05-13T12:18:23Z,"or initialize it later...
```c++
// .h
CachedSettingValue *m_storeDialogSize;
// .cpp
m_storeDialogSize = new CachedSettingValue(SETTINGS_KEY(""Dimension""), size());
```"
116357719,5196,glassez,2017-05-13T12:48:39Z,">And you ignore/forget that the size() here gives not the preferred size specified in .ui files.
Here it returns {100, 30} which is too small.

Oops... Really, I forgot it.
>or initialize it later...

Using pointer to **CachedSettingValue** breaks its goals (we can't use `var = m_settingValue` etc.).
But you can use it the following way:
```c++
, m_storeDialogSize(SETTINGS_KEY(""Dimension""))
```
in constructor and then:
```c++
if (m_storeDialogSize.value().isValid())
    resize(m_storeDialogSize);
```"
116358551,5196,Chocobo1,2017-05-13T13:36:33Z,"Sorry, I was misleading in my previous code snippet, 
that doesn't work since `size().isValid()` returns `true` in member initializer list.

>But you can use it the following way: ... in constructor and then:

So this suggestion won't work too.

>Using pointer to CachedSettingValue breaks its goals (we can't use var = m_settingValue etc.).

you still can by dereferencing the pointer...
It's a bit ugly but this (`m_storeDialogSize`) is a special case , other class variables can use `CachedSettingValue` with no modifications.
IMO using a CachedSettingValue pointer is the easiest way now.
"
116358864,5196,glassez,2017-05-13T13:56:16Z,">So this suggestion won't work too.

Why? `m_storeDialogSize(SETTINGS_KEY(""Dimension""))` uses default constructed QSize which is invalid."
116361033,5196,Chocobo1,2017-05-13T15:48:28Z,"You are right, I'll update it."
116377062,5196,glassez,2017-05-14T09:59:18Z,How about constant from globals.h?
116377182,5196,glassez,2017-05-14T10:05:55Z,ui -> m_ui
116377219,5196,glassez,2017-05-14T10:07:52Z,Can you also fix the names from ui?
116377474,5196,glassez,2017-05-14T10:23:57Z,terminate() isn't working on some platforms.
116379888,5196,Chocobo1,2017-05-14T12:39:25Z,"what do you mean? or what do you suggest?
As you can see, here I meant to force stopping the torrent creating process."
116386174,5196,zeule,2017-05-14T17:32:57Z,"If @glassez did not mean that there is no way to terminate another thread in general case, I would like to point this out. And If it is not joinable after calling `m_creatorThread->abortCreation()`, there is no much one can do with a hanged thread."
116413922,5196,Chocobo1,2017-05-15T05:45:46Z,"I shall review the torrent creating thread, its termination is not working as I thought..."
116421600,5196,Chocobo1,2017-05-15T07:00:47Z,done.
116431823,5196,Chocobo1,2017-05-15T08:10:04Z,"Added 1 new commit, I've removed `terminate()` as I thought it can force stop a busy operation but in reality, it cannot."
116717883,5196,glassez,2017-05-16T11:29:17Z,"No, it still not done. Or you misunderstood me. I mean the names inside Ui::TorrentCreatorDlg class (I.e. inside .ui file)."
116998596,5196,Chocobo1,2017-05-17T13:24:38Z,">I mean the names inside Ui::TorrentCreatorDlg class (I.e. inside .ui file).

I've only replaced the variables that appears in .cpp file.
"
117005591,5196,glassez,2017-05-17T13:49:48Z,Then the line above isn't needed too.
117024432,5196,Chocobo1,2017-05-17T14:53:43Z,Removed.
99811018,5287,Chocobo1,2017-02-07T12:30:51Z,the `if()` looks redundant to me.
99811073,5287,Chocobo1,2017-02-07T12:31:07Z,`const QString &matchedEpisode`?
99811161,5287,Chocobo1,2017-02-07T12:31:36Z,coding style.
99811265,5287,Chocobo1,2017-02-07T12:32:07Z,`return QString();`
99811882,5287,Chocobo1,2017-02-07T12:35:42Z,"not a merge blocker here, just too many indentation... is it possible to refactor it?
something like `if (episodeStr.isEmpty()) return false;` style..."
99812067,5287,Chocobo1,2017-02-07T12:36:36Z,`if (!m_smartFilter) return;`
99812465,5287,Chocobo1,2017-02-07T12:39:01Z,should use `foreach()`
99812533,5287,Chocobo1,2017-02-07T12:39:24Z,`foreach` here too
99812616,5287,Chocobo1,2017-02-07T12:39:50Z,"`nullptr`, don't mind the old code."
99812764,5287,Chocobo1,2017-02-07T12:40:42Z,add space: `QMessageBox::Yes | QMessageBox::No`
99813585,5287,Chocobo1,2017-02-07T12:45:39Z,strip out html headers
99814846,5287,Chocobo1,2017-02-07T12:53:55Z,"and pardon for doing reviews at the last minute, I only noticed this PR and no dev commented on it."
99831896,5287,sledgehammer999,2017-02-07T14:21:41Z,"Also here is a better string with no grammatical or syntax errors.
```
Smart Episode Filter will check the episode number to prevent downloading of duplicates. Supports the formats: S01E01, 1x1 and 2017.01.01
```"
99865110,5287,briankendall,2017-02-07T16:33:45Z,"I don't think changing this to a reference makes any real difference, as either way its initializing one `QString` using the given c string. However I could see a point to making it `static const QString` just to make sure it doesn't accidentally leak into any other file."
99866301,5287,zeule,2017-02-07T16:38:16Z,Or even `return {}`;
99867001,5287,zeule,2017-02-07T16:40:43Z,of range-based `for`
99868175,5287,zeule,2017-02-07T16:44:57Z,`// See` (whitespace)
99868227,5287,zeule,2017-02-07T16:45:12Z,whitespace
99870010,5287,zeule,2017-02-07T16:51:39Z,"The code here would not differ significantly from checks in `DownloadRule::matches()` then. Probably, it has to be refactored into a function."
99910502,5287,zeule,2017-02-07T19:43:00Z,This line and the next one have to be joined.
99910730,5287,zeule,2017-02-07T19:43:57Z,whitespace
99910847,5287,briankendall,2017-02-07T19:44:27Z,"Though the `QRegExp` that yields the value of `matchedEpisode` is case insensitive, this test will still erroneously fail if the episode number in the article name is using lower case letters, e.g. `s01e01`."
99911276,5287,briankendall,2017-02-07T19:46:17Z,This `QRegExp` should also be case insensitive.
99911525,5287,briankendall,2017-02-07T19:47:07Z,This `QRegExp` should also also be case insensitive.
99914351,5287,zeule,2017-02-07T19:58:40Z,"I don't use RSS rules and have no idea about common episode naming rules, but here are my two cents: wouldn't it be easier to convert the article name to uppercase before matching and keep regexps simpler? "
99917394,5287,zeule,2017-02-07T20:11:55Z,"> and keep regexps simpler?

No, this is rubbish, because  `QRegExp` has case insensitivity option."
113849597,5287,glassez,2017-04-28T04:27:11Z,These two lines is redundant. This method is for import old rules settings (not containing your new fields).
113849934,5287,glassez,2017-04-28T04:28:52Z,Is the method above not enough?
113854390,5287,glassez,2017-04-28T05:26:27Z,"```c++
if (item && (item != m_currentRuleItem))
```"
113855462,5287,glassez,2017-04-28T05:41:56Z,"Why do you have it outside matches() method? At least, this method has inappropriate name, since it's unclear what we're doing at this point."
113855605,5287,glassez,2017-04-28T05:44:31Z,"Is ""mark as unread"" is useful from user point of view? When might we need it?"
113855689,5287,glassez,2017-04-28T05:45:32Z,"Change to ""previouslyMatchedEpisodes""."
113855747,5287,glassez,2017-04-28T05:46:20Z,"IIRC, we use QRegularExpression in new code."
113984678,5287,elFarto,2017-04-28T17:50:00Z,"Right, but I had old settings that needed importing, and anyone who's been using this patch will also have settings that they might like importing (since remembering what's been downloaded is the point of this patch), it would be nice if this can be kept."
113984947,5287,elFarto,2017-04-28T17:51:30Z,"I wrote it to make testing easier, but it is the only way to undo an accidental Mark All Read."
113985728,5287,elFarto,2017-04-28T17:55:27Z,"The code can't go in matches as that is called from many places, and we have to know when a match caused a download, so we need a way for the downloader to tell the rule it has matched an episode and it will be downloaded so the rule can add that article to the previously matched episodes.

What's a more appropriate name, articleMatched? ruleMatched?"
113993177,5287,glassez,2017-04-28T18:32:44Z,"Why we need to undo it? It breaks the application logic, isn't it?
@mgziminsky, what do you say about it?"
113994578,5287,glassez,2017-04-28T18:39:32Z,"We shouldn't add this code to mainstream. This is nonsense to add backward compatibility with never existing things (from the point of view of mainstream code). Those who were able to use your changes, will be able to import this in some way."
113996894,5287,briankendall,2017-04-28T18:51:18Z,"Speaking as someone who's been using a build of qBT with an older version of this PR merged in, I don't mind if I have to set up smart filters again or if it loses track of which episodes have downloaded when this feature is part of an official build. I pretty much figured that would happen at least once when I started testing the feature out."
113997290,5287,elFarto,2017-04-28T18:53:34Z,"Ok, I'll remove it"
114008173,5287,mgziminsky,2017-04-28T19:57:02Z,"I actually think this is a useful feature. It is something I had been considering adding as well, so I don't mind it being added as part of this."
114009913,5287,mgziminsky,2017-04-28T20:08:18Z,Do we actually want to consider the previous matches for equality? I think we shouldn't.
114010283,5287,mgziminsky,2017-04-28T20:10:32Z,"Also, make `episodeRegex` an actual `QRegularExpression` object, don't initialize it here every time. You should also set `ExtendedPatternSyntaxOption` and break your pattern onto multiple lines to make it easier to read. "
114023879,5287,mgziminsky,2017-04-28T21:33:24Z,"I think you should rework the episodeRegex to used named capture groups for the season and episode portions of each pattern. Then you can get rid of this entire `if/else if` construct and extract the values directly from the match object. It would be something like:
`(?<season>S\d+)(?<ep>E\d+)|(?<season>\d+)x(?<ep>\d+)|...`

You should also set the `DontCaptureOption` in this case so you can use clarifying parens without them interfering with the captures"
114024010,5287,zeule,2017-04-28T21:34:19Z,"1. Why is is const, could it be useful for a user to make a change to it?
2. Suggest to use raw string literal here and with other regexes too."
114024258,5287,zeule,2017-04-28T21:36:09Z,"Case insensitivity is quite a voluntaristic decision, isn't it?"
114024994,5287,mgziminsky,2017-04-28T21:41:14Z,use `useSmartFilter()` instead of accessing `m_dataPtr` directly. Same everywhere else that is accessing values directly through `m_dataPtr` instead of the getter.
114025226,5287,mgziminsky,2017-04-28T21:42:55Z,"Agreed. Since this is done via full assignment, and not modified with add/remove, not much is gained by having an explicit clear method."
114025877,5287,mgziminsky,2017-04-28T21:47:10Z,"If the article is being disconnected after being marked read, it would need to be reconnected here."
114027138,5287,zeule,2017-04-28T21:56:46Z,Now why this comparison is not case insensitive?
114028135,5287,zeule,2017-04-28T22:04:11Z,"Redundant variable:
```c++
if (m_unreadCount != m_articles.size()) {
￼    m_unreadCount = m_articles.size();
    ...
￼}
```"
114029142,5287,zeule,2017-04-28T22:12:31Z,"The question is not strictly clear, as to me. I would add ""list"" to point out that there is a list of episodes and the list will be cleared, not episodes themselves."
114029480,5287,zeule,2017-04-28T22:15:40Z,I can't find this icon in the qBt built-in theme.
114030165,5287,zeule,2017-04-28T22:21:42Z,Isn't this marker present already in `AutoDownloadRule::matches()`?
114031843,5287,zeule,2017-04-28T22:37:44Z,"> Also, make episodeRegex an actual QRegularExpression object, don't initialize it here every time.

Disagree: those who do not use this feature shall not pay for it with their memory."
114042659,5287,mgziminsky,2017-04-29T01:33:03Z,"I actually think it should be a `static const` defined inside the function. That would prevent it from using any memory for those that don't use it, and avoid the large overhead of constantly rebuilding and executing a complicated regex that hasn't been compiled."
114046330,5287,glassez,2017-04-29T05:02:48Z,Since this feature implemented incorrectly.
114046350,5287,glassez,2017-04-29T05:04:46Z,"In any case, it is implemented incorrectly now. So if this is a really useful feature, we have two options: 
1. I quickly implement it in compliance with the current design of RSS subsystem 
2. I'll leave it to the author of this PR (I'm not sure he'll do it correctly at once)"
114110622,5287,elFarto,2017-05-01T09:02:34Z,"I just tried doing this with named groups, but it seems that duplicate named groups are not allowed. This means I'd need to use 5 separate groups and a bunch of if/else if to extract the correct one. I remember having the issue with normal groups, hence how the code is written at the moment.

I'll see if I can rewrite that method to be simpler."
114232045,5287,mgziminsky,2017-05-02T00:57:47Z,"Well that's unfortunate. That being the case, how about one of these options?
1. Use captured groups for each component and identify the match by the `lastCapturedIndex()`. Since you are always capturing in pairs, episode should always be `lastCapturedIndex()` and season `lastCapturedIndex() - 1` 
2. Use an array of patterns using named captures and take the first that matches. This would likely be the cleanest in terms of code readability and maintenance , but has a high overhead."
117911607,5287,glassez,2017-05-23T06:52:35Z,"Please don't produce such long lines.
Split this line into two."
117912063,5287,glassez,2017-05-23T06:56:15Z,Wouldn't `clearSelectedRuleDownloadedEpisodes()` be more correct?
117913612,5287,glassez,2017-05-23T07:06:56Z,"Please use another indentation. E.g.:
```c++
static const QRegularExpression episodeRegex(
                ""(?:^|[^A-Za-z0-9""

                //Format 1: s01e01
                ""(?:s(\\d{1,})e(\\d{1,}))|""

                // and so on...
```
You have too much empty space on the left."
117913714,5287,glassez,2017-05-23T07:07:52Z,Our coding style require split lines before operators.
117914291,5287,glassez,2017-05-23T07:11:50Z,"Although not mandatory, but it is better to omit the curly braces if there is only one line (exactly, one statement) inside.

UPD: this comment affects some other places in your code too."
117914998,5287,glassez,2017-05-23T07:16:01Z,I don't see definition of this method.
117918520,5287,glassez,2017-05-23T07:36:16Z,"There is some incorrect logic. Why is `computeEpisodeName()` called twice for the same article?
Here is my solution:
1. Create `mutable` field in **AutoDownloadRuleData** struct named *lastEpisodeName*
2. Store last episode name inside `AutoDownloadRule::matches()`
3. Create the following method (instead of your `AutoDownloadRule::matched()`):
```c++
void AutoDownloadRule::storeLastMatch(const QDateTime &matchTime)
{
    setLastMatch(matchTime);
    
    if (useSmartFilter() && !m_dataPtr->lastEpisodeName.isEmpty()) {
        // TODO: probably need to add a marker for PROPER/REPACK to avoid duplicate downloads
        m_dataPtr->previouslyMatchedEpisodes.append(m_dataPtr->lastEpisodeName);
        m_dataPtr->lastEpisodeName.clear();
    }
}
```
4. Call `rule.storeLastMatch(job->articleDate);` instead of `rule.setLastMatch(job->articleDate); rule.matched(job->articleTitle);`

What do you say?"
117919099,5287,glassez,2017-05-23T07:37:57Z,Move these fields to the other non-`mutable` fields.
117919584,5287,glassez,2017-05-23T07:40:14Z,Move these property getters/setters to the other getters/setters.
118100016,5287,elFarto,2017-05-23T20:36:32Z,"That method seems like it would be very easy for lastEpisodeName to be leaked at some point. And it's a lot of effort to go to, just to avoid a duplicate call to computeEpisodeName(), which only happens when there is a match."
118433983,5287,glassez,2017-05-25T07:35:37Z,">And it's a lot of effort to go to, just to avoid a duplicate call to computeEpisodeName(), which only happens when there is a match.

Yes. This ""duplicate call"" is maybe not so bad in itself, but it indicates wrong logic in the code.
>That method seems like it would be very easy for lastEpisodeName to be leaked at some point. 

Agree. It was not a good example. I thought about it. Then we just need to achieve a consistent interface and behavior. We just need to do some things explicitly:
1. keeping last matched episode name is correct behavior
2. get last matched episode name is correct interface (like in regular expressions, we can get some matched data)
3. having `appendPreviouslyMatchedEpisode()` is good idea (and correct interface)
We get the following:
```c++
// autodownloadrule.cpp
void AutoDownloadRule::appendPreviouslyMatchedEpisode(const QString &episodeName)
{
    if (!episodeName.isEmpty() && !m_dataPtr->previouslyMatchedEpisodes.contains(episodeName))
        m_dataPtr->previouslyMatchedEpisodes.append(episodeName);
}

// autodownloader.cpp
rule.setLastMatch(job->articleDate);
rule.appendPreviouslyMatchedEpisode(rule.matchedEpisode());
```"
118434989,5287,glassez,2017-05-25T07:44:11Z,"Another thing I don't like are ""previously matched episode"" word combination in interface method names (as well as currently used ""last match""). One gets the impression that we fit in class internals. It would be nice to use a more appropriate concept. I'm not forcing you to do it here - it's just my thoughts. 
Maybe something like ""exclude episode name""..."
119472957,5287,elFarto,2017-05-31T21:01:46Z,"I've just been trying to implement this, but I came across the fact the matches method is const, and can't have side effects. That makes saving the computed episode name impossible. I think the correct solution is to have the matches method return an instance of a new object if it does match (which is what the regular expression class does), but I'm not sure changing the interface for the matches method is worth it for just the episode name."
119579640,5287,glassez,2017-06-01T10:27:55Z,">I've just been trying to implement this, but I came across the fact the matches method is const, and can't have side effects. That makes saving the computed episode name impossible.

If you don't pay attention, I offered to create `mutable` field which can be modified by const methods.
Having something like AutoDownloadRuleMatch is another way."
119985540,5287,thalieht,2017-06-03T12:12:49Z,"This is just preference, i'm just saying it in case you didn't know.
You can use `\\W` which is equivalent to `[^A-Za-z0-9_]` (IF you don't want the underscore ( _ )).
Also you can use `+` in place of `{1,}`

I don't know if format 3 is a standard but would there be any chance that it might say e.g `2015.3.15` (omit leading zeros)? Also could it use slashes or minus/dash instead of dots?"
119991334,5287,briankendall,2017-06-03T18:00:40Z,"As much as I don't want to suggest delaying this PR as I very much want it to be merged, I have to agree with @thalieht about format 3. There is no standard at all with torrents, so I'd expect at some point this would fail to match something in someone's feed.

A better regex is probably: `(\d{4}[_.\-x]\d{1,2}[_.\-x]\d{1,2}|\d{1,2}[_.\-x]\d{1,2}[_.\-x]\d{4})`
or `(\\d{4}[_.\\-x]\\d{1,2}[_.\\-x]\\d{1,2}|\\d{1,2}[_.\\-x]\\d{1,2}[_.\\-x]\\d{4})` if it's escaped properly.

That will match things like `2014.05.03`, `5.3.2014`, `2014_05_03`, `3-5-2014`, `2014x05x03` and so on. I think that's a good balance between being lenient enough to be unlikely to miss something and not so lenient as to match someone erroneously."
119991881,5287,elFarto,2017-06-03T18:27:02Z,"While using the + is probably better, using \W probably isn't, as I just want to make sure the season/episode number isn't matching within something else, and fields might be separated by '_'s.

As for adding more date formats, I'm not sure making the regex that lenient without at least some requirement to be dubious at best. And it also raises the question, should we interpret/reformat the date when we store it (like we do the episode numbers) so that we can continue to match if the format changes?"
119992121,5287,briankendall,2017-06-03T18:40:38Z,"@elFarto I don't think that regex is too lenient. It's really unlikely to match anything other than date, especially since either the first or last group of numbers has to be four digits long. If you wanted you could modify it to exclude `_` and perhaps `x` as a separator character. I think it's likely that there will be dates separated with hyphens since that's standard in a lot of parts of the world.

As for reformatting it... the Correct™ solution probably **is** to reformat the date into a canonical format. Eventually there will be two torrents with the same date in two different formats for someone. But that's a pretty unlikely edge case, and on top of that, there's cases where it's ambiguous what the date actually is. (e.g. does 01.02.2017 mean January 2 or February 1?) So I don't think this is actually necessary."
120590403,5287,glassez,2017-06-07T10:36:12Z,">Now why this comparison is not case insensitive?

@elFarto, you still didn't answer on this question."
120614910,5287,Chocobo1,2017-06-07T12:48:58Z,add spaces: `lastCapturedIndex - 1`
120616461,5287,Chocobo1,2017-06-07T12:56:01Z,"I would leave `static` out, `QRegularExpression` isn't very expensive to construct."
120617648,5287,Chocobo1,2017-06-07T13:01:32Z,"add curly braces:
```c++
else {
  foreach ()
    // ...
}
```"
120619759,5287,Chocobo1,2017-06-07T13:10:58Z,"I would add a '\n' if possible.
```
... downloading of duplicates.\nSupports the formats ...
```"
120620377,5287,glassez,2017-06-07T13:13:28Z,Have you any strong reason to construct the same object each time the method called?
120623297,5287,Chocobo1,2017-06-07T13:24:43Z,"actually no, but if there is no performance bottleneck, I would like to keep the code simple (and avoid premature optimization), I'm talking about personal preference here.
"
120641309,5287,glassez,2017-06-07T14:29:12Z,"Then **if** branch must be enclosed with curly braces too.

P.S. Personally I like curent form, but if it doesn't follow qBittorrent coding style it should be fixed."
120981611,5287,elFarto,2017-06-08T19:47:25Z,"Hmm, that's odd. I entered \n into Qt Creator, and I that's what it wrote to the .ui file. I tried forcing \n in the file and it doesn't work, the tooltip shows a literal '\n'. I tried using <br> instead, but that starts wrapping the text on multiple lines. It seems you either have to use an actual newline in the .ui, or some weird <nobr> nonsense."
121060534,5287,Chocobo1,2017-06-09T07:02:46Z,"Just use the following:
```
<string>Smart Episode Filter will check the episode number to prevent downloading of duplicates.
Supports the formats: S01E01, 1x1 and 2017.01.01</string>
```
Seems qtcreator converts '\n' to a real newline and it is alright."
164360858,5287,glassez,2018-01-29T08:33:30Z,"Can you explain this regex, please."
164363208,5287,glassez,2018-01-29T08:44:42Z,Don't you know exactly what index you need?
164363532,5287,glassez,2018-01-29T08:46:21Z,Please explain what this function produces for different episode format.
164511490,5287,elFarto,2018-01-29T17:57:03Z,"This regex combines all of the smart episode filters the user enters in the settings, and searches for them between non-alphanumeric characters, or the start/end of the article title."
164513172,5287,elFarto,2018-01-29T18:03:10Z,"Usually this function will join all the matching groups of the above regular expression with the 'x' character. This means for a regular expression that matches S01E02, it will produce the string '1x2'. "
164514339,5287,elFarto,2018-01-29T18:07:24Z,"No, I won't know the index. Due to the way the regular expression matching occurs, every capturing group in the regex has a corresponding group index even when that group wasn't matched. So the regex: ""([0-9]+)|([A-Z]+) has 2 groups at index 1 and 2 respectively, even though only one of them will ever be populated at once.

With the move to user supplied regexs for episode filtering, I don't know how many groups there will be at compile time. I have to iterate through all the groups, check to see if they're populated, and append it to the episode name. "
164647087,5287,glassez,2018-01-30T05:56:35Z,"I asked because I doubted that this regex is exactly what you want... And I was right.
>searches for them between non-alphanumeric characters, or the start/end of the article title

It searches between non-(latin lower-case letters or numbers) characters only. I don't think this behavior is consistent with the public use of this feature.
What about `\b(?:%1)\b`?"
164668152,5287,elFarto,2018-01-30T08:25:48Z,"One small point, the regex is created as case-insensitive, so it does get upper case as well, but yes your point stands, it matches latin characters only. \b isn't a good choice, and is something I looked at early on, since it includes the '_' character which is something I would want to be a boundary. Also, \b is just boundaries between [A-Za-z0-9_], which is only one character different to what I've got.

If I had examples of non-latin based articles I could make a better choice, but I feel this is fine for a first attempt."
164677509,5287,glassez,2018-01-30T09:08:25Z,">it includes the '' character which is something I would want to be a boundary

Unfortunately, I don't understand this.
>Also, \b is just boundaries between [A-Za-z0-9], which is only one character different to what I've got.

\b is boundary between any ""word"" character (i.e. \w) and non-""word"" character (including start/end of line). When you enable Unicode support in QRegularExpression \w includes also non-latin alphanumeric characters."
164695025,5287,glassez,2018-01-30T10:14:00Z,"The main disadvantage is \w includes underscore so it will not match, e.g., ""Some_series_name_s01e03"". `(?<=^|[\W_])s(\d+)e(\d+)(?=[\W_]|$)` should match."
164778638,5287,briankendall,2018-01-30T15:32:29Z,"I'd like to suggest: `(?:^|[\W_])(?:%1)(?:[\W_]|$)`

That should match the pattern between any word boundary characters as well as underscore. Be sure to include `QRegularExpression::UseUnicodePropertiesOption` when constructing the `QRegularExpression` so that `\W` will properly match unicode word boundaries."
164783876,5287,glassez,2018-01-30T15:47:01Z,"@briankendall, your suggestion is almost the same as mine above (except I have example only for some particular format)."
164789768,5287,briankendall,2018-01-30T16:02:49Z,"@glassez I thought `\b` matches a backspace character?

edit: nevermind, it depends on regex implementation, at for Qt it does probably match a word boundary. Using `[\b_]` and `[\W_]` are probably equivalent. The most important bit is including the underscore, though."
164838640,5287,elFarto,2018-01-30T18:39:55Z,"> Unfortunately, I don't understand this.
There was meant to be an underscore between the quotes, but I had forgotten that was a markdown character.

I've played around with it a bit, and settled on `(?:[_]|\b)`, with Unicode support enabled. `\b` isn't a character class so you can't place it inside [ ]."
164840582,5287,glassez,2018-01-30T18:47:05Z,"My last example I talk about isn't contain `\b`:
`(?<=^|[\W_])s(\d+)e(\d+)(?=[\W_]|$)`
>Using `[\b_]` and `[\W_]` are probably equivalent.

IIRC, `\b` doesn't work in this case (at least, as you expect)."
164842524,5287,glassez,2018-01-30T18:53:47Z,">I've played around with it a bit, and settled on (?:[_]|\b), with Unicode support enabled. \b isn't a character class so you can't place it inside [ ].

`(?<=^|[\W_])(?:%1)(?=[\W_]|$)` is what you need. Do try it on https://regexr.com/ (don't forget to select PCRE as RegEx Engine).

P.S. `[_]` is a perversion, you don't need `[]` for a single character."
165289404,5287,glassez,2018-02-01T08:49:23Z,"This is C++ so you don't need use `this` everywhere, just in case of name conflicts."
165289471,5287,glassez,2018-02-01T08:49:44Z,const
165289665,5287,glassez,2018-02-01T08:50:45Z,const
165289833,5287,glassez,2018-02-01T08:51:51Z,And so on... in every place you don't have to modify variable.
165290414,5287,glassez,2018-02-01T08:54:47Z,"You can set all options once you create regex object (in AutoDownloader constructor) and update only pattern here, isn't it?"
165290623,5287,glassez,2018-02-01T08:55:57Z,"We don't use ""get"" prefix."
165290933,5287,glassez,2018-02-01T08:57:17Z,Wrong order of headers. See CODING GUIDELINES.
165291102,5287,glassez,2018-02-01T08:58:07Z,Curly brace in wrong place.
165291683,5287,glassez,2018-02-01T09:01:02Z,You have many unrelated changes in .ui files (probably created by QtCreator). Please undo it.
165296195,5287,glassez,2018-02-01T09:21:18Z,"It's not so obvious for user to add outer non-capturing group (as well as to have any captures here). It can type just, e.g., ""sn\d+ep\d+"" and wonder why it not works properly. Actually, the user should understand how it works to set valid regex.
"
165297005,5287,glassez,2018-02-01T09:24:39Z,"IIRC, it allows to download many PROPER/REPACK copies of the same episode."
165453864,5287,elFarto,2018-02-01T18:57:50Z,"No, The regex also needs to be updated if the smart episode filter option is changed in the options dialog."
165460307,5287,elFarto,2018-02-01T19:21:32Z,I've tweaked the regex creation to insert a non-capturing group around each item. I was meaning to do that anyway. I've also modified these rules to not include a redundant non-capturing group.
165463414,5287,elFarto,2018-02-01T19:31:55Z,"I'm not quite sure what you mean. I suppose we could keep track of the repacks aswell, but you usually want to always download these."
165592587,5287,glassez,2018-02-02T09:15:39Z,"You do not understand what I mean?
Just do:
```c++
m_smartEpisodeRegex.setPatternOptions(/* your options */);
```
once `smartEpisodeRegex ` created (e.g. in AutoDownloader constructor).
Then just do here the following:
```c++
m_smartEpisodeRegex.setPattern(regex);
```"
165614775,5287,glassez,2018-02-02T10:52:29Z,">I'm not quite sure what you mean.

Let's imagine the following articles sequence:
1. Some title s01e03
2. Some title s01e03
3. Some title s01e03 REPACK
4. Some title s01e03 REPACK
5. Some title s01e03 REPACK

It downloads 1st torrent, skips the 2nd (as expected), and download 3, 4 and 5th torrents. Is this behavior expected?"
165615906,5287,glassez,2018-02-02T10:57:46Z,"@elFarto, why this breaking coding style change? Revert it back!"
165617147,5287,glassez,2018-02-02T11:03:25Z,It's still here.
165693593,5287,briankendall,2018-02-02T16:34:10Z,"I can pitch in and say yes, that is expected. The convention is that torrents labeled REPACK include some kind of fix that means it supersedes the previous torrent, and should always be downloaded."
165719383,5287,glassez,2018-02-02T18:18:34Z,">it supersedes the previous torrent

Even other repacks?"
165735015,5287,elFarto,2018-02-02T19:18:42Z,"> Even other repacks?

Yes, I've just been testing with one where this has happened."
165808797,5287,glassez,2018-02-03T08:30:17Z,">Yes, I've just been testing with one where this has happened.

I didn't understand what do you mean.
I was just asking is it normal (expected) that it downloads all Repack/Proper episode variants?"
165809021,5287,glassez,2018-02-03T08:43:03Z,"Is header inclusion order (from qBittorrent Coding Guidelines) too difficult? Why do you constantly produce such ""invalid"" changes?"
165810457,5287,elFarto,2018-02-03T09:56:13Z,">I was just asking is it normal (expected) that it downloads all Repack/Proper episode variants?

Yes, it is expected behaviour."
165814979,5287,glassez,2018-02-03T13:45:47Z,">Yes, it is expected behaviour.

Why?

@elFarto, the main problem of this PR is your reluctance (or inability) to provide a detailed description (in some example) of the incident, processed by this feature, to not involved people could clearly understand the meaning of this process. Why duplicate episodes typically occur? Why, in contrast to the ""normal"" episodes, we don't have to skip repeated ""REPACK/PROPER"" episodes?
Now this feature is more like a ""personal use"" than the ""public use""."
165816685,5287,glassez,2018-02-03T14:56:27Z,"@elFarto, forgive my boredom in this issue, I just don't want to answer such questions of users (when we release this feature), not realizing why it works this way and not otherwise."
165818463,5287,briankendall,2018-02-03T16:21:16Z,"@glassez I'll chime in again and try to help explain it in detail. Hopefully you'll find this satisfactory:

The labels ""REPACK"" and ""PROPER"" are common conventions used among release groups providing episodes of TV shows, as well as other media. These conventions are used among pretty much every bittorrent tracker that distributes these files. [Here is one link that goes into description of these various labels](https://www.dslreports.com/faq/10705), but in summary, ""REPACK"" means a rerelease of a previous episode, likely by the same group, meant to correct an error in the first copy. ""PROPER"" can mean the same thing, or more specifically a release by another group meant to correct an error from the first group.

These specific meanings may not be consistent among releases, but you always want to download torrents labeled PROPER or REPACK because they, quite consistently, only appear when the episode you've *already downloaded* contains an error. For example, the few times it's happened since I've been using this PR by @elFarto, the original file that was downloaded was broken to the point of being unplayable. But I didn't need to do anything or worry about it because the PROPER / REPACK version was also automatically downloaded. And as @elFarto has said, sometimes there's more than one because it takes the release groups a few tries to fix an error.

It's also worth mentioning that other torrent clients or RSS downloaders with a ""smart episode"" feature do this exact same thing. If you're concerned about users nagging you for support requests, then this will save you many questions from people asking for this exact feature."
165821973,5287,glassez,2018-02-03T18:45:00Z,"Well, I got the following picture:
1. There are several releasers (release groups) on some tracker.
2. They release the same episodes independently so there are duplicates can appear (otherwise this issue can't exist).
3. There is no acceptable (or reliable) way to separate the episodes of the various relisers (using download rules), or we don't want (unable) to do so for some other reason.
4. When some error is detected in the release the releaser publish fixed release (marked as REPACK or PROPER). There also can be some PROPER/REPACK release fixing error in previous PROPER/REPACK release (isn't it?).
5. Since we can't distinguish releases from different releasers (because of the same reasons as in Item 3) we have only to download them all.

What I am mistaken?"
165822488,5287,briankendall,2018-02-03T19:04:41Z,"@glassez That's mostly correct, but the whole picture is a little different than that.

1. Release groups are usually not associated with any particular tracker. It's the tracker's users that obtain the release and make it available on the tracker.
2. This is correct. Additionally, sometimes the users of a tracker make their own rip of an episode and make it available, alongside the scene releases.
3. This completely depends on the tracker in question. Some of them are very, very tightly organized and you can easily distinguish different releases from the RSS post's title. Other times this is not the case at all. In the end it is still the responsibility of the qBittorrent user to create a good rule definition in the RSS downloader so that it only considers torrents they want, even when using the smart episode filter.
4. This is correct. Additionally, a tracker's users can also create their own fixed version of a torrent. Either way, the torrent's title should have PROPER or REPACK in its title, as per convention.
5. Again, this depends on the tracker and how well organized it is, but generally the best way to make sure a good version of an episode is downloaded is first use the user's rule definition in the RSS downloader to figure out which episodes are candidates for downloading, then extract out the season/episode number from the RSS post and ensure it only downloads one copy. The exception of course is when PROPER or REPACK appears. It is technically possible that too many copies of the episode could be downloaded, but in practice this almost never happens and the feature works correctly.

I've been using this smart episode feature for over a year now, granted the version of the PR I merged in and compiled doesn't include the option to change or add regex's. However it has been working flawlessly, including when PROPER or REPACK torrents are downloaded."
165822979,5287,strigona,2018-02-03T19:26:08Z,"I'm going to chime in and say that - as a user, this is exactly what I'd want & expect. I came from uTorrent and that's how their smart episode filter works (granted they don't have the options for custom regex)."
166017318,5287,Chocobo1,2018-02-05T16:00:23Z,"initialize it:
```c++
QStringList filters = {
    ""regex""
};
```"
166017728,5287,Chocobo1,2018-02-05T16:01:31Z,up one line
166018050,5287,Chocobo1,2018-02-05T16:02:25Z,`++i`
166018537,5287,Chocobo1,2018-02-05T16:03:43Z,`if (cap.isEmpty()) continue;`
166018605,5287,Chocobo1,2018-02-05T16:03:57Z,`bool isInt = false;`
166018767,5287,Chocobo1,2018-02-05T16:04:24Z,use `?:` operator
166019361,5287,Chocobo1,2018-02-05T16:06:20Z,if possible use c++11 range-based `for()`
166020656,5287,Chocobo1,2018-02-05T16:10:24Z,This property block is redundant.
166020979,5287,Chocobo1,2018-02-05T16:11:21Z,add `const`
533058890,13885,glassez,2020-12-01T04:02:34Z,"Inappropriate parameter name, don't you think?"
533059416,13885,glassez,2020-12-01T04:04:36Z,"I would rename all these to `isXXXDisabled()`, `setXXXDisabled()`"
533060557,13885,glassez,2020-12-01T04:09:16Z,"Please don't mix initialisation styles:
```c++
auto dialog {new SpeedLimitDialog {this}};
```
Also the following looks more familiar for me:
```c++
auto dialog = new SpeedLimitDialog {this};
```"
533209656,13885,thalieht,2020-12-01T09:24:50Z,ok
533209810,13885,thalieht,2020-12-01T09:24:56Z,ok
533209939,13885,thalieht,2020-12-01T09:25:01Z,Indeed :)
533319144,13885,Chocobo1,2020-12-01T10:56:17Z,"I don't think this line has any useful effect now, try removing it."
533328004,13885,glassez,2020-12-01T11:11:36Z,Is this member variable really needed?
533332070,13885,glassez,2020-12-01T11:18:46Z,"I would move these two lines in constructor and keep only limit-related assignments here. Otherwise, I don't understand based on what concept you extracted this code from the constructor. "
533335790,13885,glassez,2020-12-01T11:25:16Z,As I suggested before you can extract all speed limits related code into separate widget class and use it in your dialogs (there are at least 3 places where the same widget can be used) and in options dialog too.
533352755,13885,glassez,2020-12-01T11:55:20Z,Or maybe leave it for a separate PR (if it can cause difficulties for you)?
533364098,13885,glassez,2020-12-01T12:15:19Z,Braces required.
533370066,13885,glassez,2020-12-01T12:26:08Z,final
533372773,13885,glassez,2020-12-01T12:31:05Z,It's a bad idea to store TorrentHandle pointers. Some of them can be deleted while the dialog is being shown. You should either store torrent hashes and query torrents in `accept()` (and other places after dialog is constructed) or handle torrent deletion events to adjust this list accordingly.
533374508,13885,glassez,2020-12-01T12:34:14Z,"Critical message is too much, IMO."
533375432,13885,glassez,2020-12-01T12:35:54Z,Also I would just disable OK button if control values have inconsistent states.
533421513,13885,thalieht,2020-12-01T13:51:45Z,"I thought so but, from this comment, i guess there is no problem using session::instance() where needed."
533494595,13885,thalieht,2020-12-01T15:19:45Z,Don't know how and it sounds like too much trouble. I won't do it.
533495348,13885,thalieht,2020-12-01T15:20:39Z,Can't see why it matters but sure.
533510205,13885,glassez,2020-12-01T15:39:27Z,You can declare local variable if you need to access it several times per function.
533513901,13885,glassez,2020-12-01T15:44:03Z,">Can't see why it matters but sure.

You have some initialization code in the constructor directly and some other is separated into this method. I'm sorry, but I didn't see any pattern on which it is based (maybe I just didn't understand it). But then what's the point? Why not put all the code in the constructor? Or Vice versa, in this method?"
533547330,13885,thalieht,2020-12-01T16:26:19Z,">Why not put all the code in the constructor? Or Vice versa, in this method?

No particular reason. It was this way initially in this dialog and i just continued it. Want me to move everything in the constructor? It will have to be a new commit though because i'm not wasting my time resolving conflicts between existing commits or trying to figure out what goes where."
533552828,13885,thalieht,2020-12-01T16:33:42Z,">Critical message is too much, IMO.

Note that i just moved this here. About critical: which of the other options convey ""You can't proceed until...""?

>Also I would just disable OK button if control values have inconsistent states.

If it was right after performing an invalid action i'd agree but here it's because an extra action is needed."
533554586,13885,glassez,2020-12-01T16:36:08Z,">It will have to be a new commit though because i'm not wasting my time resolving conflicts between existing commits or trying to figure out what goes where.

It contradicts our rules. We do not merge PRs that have a dirty history. You will have to apply any required changes to the corresponding commits. Or just squash all your commits into one in the end (even now, it doesn't look like all of them are independent enough)."
533578062,13885,thalieht,2020-12-01T17:08:04Z,">Or just squash all your commits into one in the end (even now, it doesn't look like all of them are independent enough).

Thank god. I'll squash the last 3 for ""Torrent options"" at least and we'll see from there.

>Want me to move everything in the constructor?

Well?"
533675151,13885,thalieht,2020-12-01T19:43:06Z,I hope i did it right (fixup commit).
533675182,13885,thalieht,2020-12-01T19:43:10Z,"Indeed, removed."
534011713,13885,glassez,2020-12-02T09:20:58Z,">>Want me to move everything in the constructor?
>>
>Well?

I want this to be a logical separation, if necessary (for example, you can extract the initialization code for control values from the current Session property values, and leave everything else in the constructor). Or you can extract the code that is called from several places (but this is not the case here).
If in doubt, just put everything in the constructor, because the current split is only confusing."
534012892,13885,glassez,2020-12-02T09:22:42Z,"Well, I guess you're right. Don't stop there."
534016244,13885,glassez,2020-12-02T09:27:26Z,override
534017996,13885,glassez,2020-12-02T09:29:50Z,"m_torrentHashes or m_infoHashes
""selected"" is irrelevant in this context (because there are no other torrents for this class)."
534447639,13885,thalieht,2020-12-02T20:05:27Z,I moved everything.
535194733,13885,glassez,2020-12-03T12:40:24Z,">I hope i did it right (fixup commit).

Not very. I told you:
>It's a bad idea to **store** TorrentHandle pointers.

But you can (as before) get them as an input parameter. This will save you from unnecessary lookups in the constructor. Then you can store their hashes."
535487382,13885,thalieht,2020-12-03T18:40:23Z,Done.
535501450,13885,glassez,2020-12-03T19:00:41Z,"You still don't understand me.
You shouldn't check it here (they are valid unless caller side has bugs). And you shouldn't unnecessarily lookup for torrents in constructor. You should store hashes only to use them later (since some torrent can be deleted while dialog is shown)."
535526058,13885,thalieht,2020-12-03T19:33:41Z,">And you shouldn't unnecessarily lookup for torrents in constructor. You should store hashes only to use them later (since some torrent can be deleted while dialog is shown).

I don't understand what the problem is. I thought that's what i'm doing."
535543343,13885,glassez,2020-12-03T19:56:54Z,">I don't understand what the problem is.

The problem is that you lookup for each torrent by its hash next in this constructor which is unnecessary since you already have valid torrent handles here."
535547880,13885,thalieht,2020-12-03T20:04:03Z,Dang! I'm so...
536018299,13885,glassez,2020-12-04T11:03:44Z,Why not add this line to the loop below?
536021588,13885,glassez,2020-12-04T11:09:31Z,disablePEX
536114974,13885,glassez,2020-12-04T13:53:52Z,I would put many of trivial slots like this one directly in `connect()` invocation as lambdas.
536147292,13885,thalieht,2020-12-04T14:41:51Z,Done.
536148298,13885,thalieht,2020-12-04T14:43:13Z,"I forgot that's possible thanks.

/off topic
Do ""fixup"" commits help reviewing or nah?"
536180027,13885,glassez,2020-12-04T15:27:39Z,">/off topic
Do ""fixup"" commits help reviewing or nah?

I do not care. I'm looking at PR changes in its entirety, so do as you like. If I need any changes to be made in a separate commit, I will ask for it explicitly."
536187928,13885,glassez,2020-12-04T15:39:04Z,Shouldn't they be checked+disabled for private torrents?
536189636,13885,glassez,2020-12-04T15:41:33Z,Shouldn't you have they enabled only if all torrents aren't private? Otherwise what happens if user uncheck some of them having some private torrents selected?
536191697,13885,glassez,2020-12-04T15:44:28Z,Is this a valid copyright now?
536210940,13885,thalieht,2020-12-04T16:12:13Z,">Otherwise what happens if user uncheck some of them having some private torrents selected?

Nothing
```
void TorrentOptionsDialog::accept()
...
        if (!torrent->isPrivate())
        {
            if (m_ui->checkDisableDHT->checkState() != Qt::PartiallyChecked)
                torrent->setDHTDisabled(isDisableDHTChecked());
...
```

Why shouldn't users be allowed to change these settings if even 1 public torrent is selected? Private ones won't be affected.
"
536211112,13885,thalieht,2020-12-04T16:12:28Z,"And provide the illusion that these settings are applied to private torrents? But on the other hand, checked will be more intuitive for users i guess. Will change."
536211160,13885,thalieht,2020-12-04T16:12:35Z,Sure i don't care.
536339813,13885,zywo,2020-12-04T19:46:26Z,Why not simply ```disableXXX(bool disable)``` for the setters?
536357408,13885,thalieht,2020-12-04T20:20:31Z,I guess set... is easier to search for. Assuming all setters start with it (i didn't look).
536364267,13885,zywo,2020-12-04T20:34:33Z,"Yes, you're right."
536530829,13885,glassez,2020-12-05T06:56:03Z,"Maybe add notification ""Private torrents won't be affected by these settings""?"
536587939,13885,thalieht,2020-12-05T09:13:14Z,Uhh sure.
537052496,13885,jagannatharjun,2020-12-06T14:43:05Z,"```suggestion
    m_ui->labelGlobalSpeedIcon->setPixmap(Utils::Gui::scaledPixmap(UIThemeManager::instance()->getIcon(QLatin1String(""slow_off"")), this, style()->pixelMetric(QStyle::PM_SmallIconSize, nullptr, this)));
```

or maybe a better way is to have the icon in the group box text rather"
538301304,13885,thalieht,2020-12-08T12:16:43Z,I'll change it when i fix that dialog.
539328091,13885,jagannatharjun,2020-12-09T13:59:14Z,"imho, ""Torrent Options"" doesn't seem right here, the dialog that follows doesn't actually include a majority of torrent options."
539340631,13885,glassez,2020-12-09T14:15:13Z,Any suggestions?
539342020,13885,glassez,2020-12-09T14:17:02Z,"Anyway menu item that shows dialog should have name with ""..."" in the end."
539346869,13885,jagannatharjun,2020-12-09T14:22:49Z,"> Any suggestions?

""Torrent Speed Management"" or ""Share options"", Idk I'm not good with naming."
539373673,13885,glassez,2020-12-09T14:54:50Z,"But there may be different types of options. Maybe something less specific, like ""Other options... "" or ""More options...""?"
539403702,13885,ArcticGems,2020-12-09T15:29:15Z,"I think we should keep the current name.

If you really want to change the name, what about ""Torrent **Health** Options""??"
539415648,13885,glassez,2020-12-09T15:43:09Z,">what about ""Torrent Health Options""??

Because of the same reason  as in https://github.com/qbittorrent/qBittorrent/pull/13885#discussion_r539373673. There may be options of different kind."
539489814,13885,ArcticGems,2020-12-09T17:11:45Z,"> 
> 
> Maybe something less specific, like ""Other options... "" or ""More options...""?

To me those titles are for minor/miscellaneous options and I personally don't consider current options (speed,share & DHT/PeX/LSD) as minor for a torrent.

Maybe we should keep the current title??

"
539974552,13885,Chocobo1,2020-12-10T08:37:21Z,"Wrong order, move it one line up."
539975841,13885,Chocobo1,2020-12-10T08:39:34Z,Looks like this is `const` now: `void capSpeed() const;`
539977423,13885,Chocobo1,2020-12-10T08:42:01Z,Try `void setTorrentOptions() const;`
539978718,13885,Chocobo1,2020-12-10T08:43:57Z,try `void on_actionSetGlobalSpeedLimits_triggered() const;`
539984226,13885,Chocobo1,2020-12-10T08:52:16Z,wrong order.
539984658,13885,Chocobo1,2020-12-10T08:52:52Z,`const QVector<BitTorrent::TorrentHandle *> &torrents`
539985608,13885,Chocobo1,2020-12-10T08:54:28Z,I would give the default values here instead of in .cpp file.
539986473,13885,Chocobo1,2020-12-10T08:55:48Z,"You can also consider using `{}` to initialize values, for example: `QDialog {parent}`"
540067520,13885,thalieht,2020-12-10T10:49:29Z,"Can't, `parent` argument for TorrentOptionsDialog would have to be const and then i can't init `QDialog` with it..."
540087878,13885,thalieht,2020-12-10T11:20:50Z,All of them or just here?
540102555,13885,Chocobo1,2020-12-10T11:45:01Z,all of them of course.
540130946,13885,thalieht,2020-12-10T12:31:06Z,">of course

Just to be clear, ""just here"" i mean the initialization list."
540349087,13885,thalieht,2020-12-10T17:15:18Z,"Same as https://github.com/qbittorrent/qBittorrent/pull/13885#discussion_r540067520
>Can't, parent argument for TorrentOptionsDialog would have to be const and then i can't init QDialog with it..."
540349363,13885,thalieht,2020-12-10T17:15:42Z,"Same as https://github.com/qbittorrent/qBittorrent/pull/13885#discussion_r540067520
>Can't, parent argument for TorrentOptionsDialog would have to be const and then i can't init QDialog with it..."
540349714,13885,thalieht,2020-12-10T17:16:11Z,Done.
540351701,13885,thalieht,2020-12-10T17:18:54Z,"I only did it to the list for now. Personally i find  `{}` less readable but hey, you're the one looking at the code base most, so if you want me to change everything i'll do it."
540907486,13885,Chocobo1,2020-12-11T12:18:31Z,Please also change to: `class SpeedLimitDialog final : public QDialog`
540910849,13885,Chocobo1,2020-12-11T12:25:02Z,"Personally I would like to do it this way:
```c++
{
    auto session = BitTorrent::Session::instance();

    session->setGlobalUploadSpeedLimit(getUploadSpeedLimit() * 1024);
    session->setGlobalDownloadSpeedLimit(getDownloadSpeedLimit() * 1024);
    //....
}
```"
540913363,13885,Chocobo1,2020-12-11T12:29:37Z,"I would suggest we use a helper function here:
```c++
{
    const auto updateSlider = [](QSlider &slider, const int value, const int maximum)
    {
        slider.setValue(value);
        slider.setMaximum(maximum);
    };

    const int uploadVal = qMax(0, (BitTorrent::Session::instance()->globalUploadSpeedLimit() / 1024));
    // const int downloadVal ...
    updateSlider(m_ui->sliderUploadLimit, uploadVal, maxUpload);
    // updateSlider(...
}
```"
540915288,13885,Chocobo1,2020-12-11T12:33:23Z,">Just to be clear, ""just here"" i mean the initialization list.

OK and that is exactly what I meant."
541074961,13885,thalieht,2020-12-11T16:36:04Z,Done thanks.
541075609,13885,thalieht,2020-12-11T16:37:02Z,Done. I'm not sure why you commented on this line though.
541512780,13885,Chocobo1,2020-12-12T06:12:49Z,Github doesn't allow me to place comment there... Also `final` will benefit functions that has `override`.
541513347,13885,Chocobo1,2020-12-12T06:16:36Z,I meant applying the changes to `SpeedLimitDialog::accept()` too.
543967511,13885,Chocobo1,2020-12-16T05:16:31Z,Please add `m_torrentHashes.reserve(torrents.size());` before the for loop.
543971458,13885,Chocobo1,2020-12-16T05:21:14Z,"Those update functions has the same pattern so it would be recommended to abstract it:
```c++
namespace 
{
    void updateSliderValue(QSlider *slider, const int value)
    {
        if (value > slider->maximum())
            slider->setMaximum(value);
        slider->setValue(value);
    }
}

void SpeedLimitDialog::updateDownloadSliderValue(const int value)
{
    updateSliderValue(m_ui->sliderDownloadLimit, value);
}

// or just where you need it:
connect(m_ui->spinDownloadLimit, qOverload<int>(&QSpinBox::valueChanged)
            , this, [this](const int value) { updateSliderValue(m_ui->sliderDownloadLimit, value); });
```"
543981370,13885,Chocobo1,2020-12-16T05:34:21Z,can you drop the decimal point?
543983570,13885,Chocobo1,2020-12-16T05:37:14Z,you can drop this curly braces to make the code more concise.
543984462,13885,Chocobo1,2020-12-16T05:38:22Z,`const bool isAltLimitEnabled = session->isAltGlobalSpeedLimitEnabled();`
543984999,13885,Chocobo1,2020-12-16T05:39:06Z,Please move this up to the group of `bool` vars.
543985847,13885,Chocobo1,2020-12-16T05:40:06Z,I think you should handle the case when `torrents` is empty.
543989075,13885,Chocobo1,2020-12-16T05:44:42Z,"seems possible to rewrite:
```c++
const bool useGlobalValue = allSameRatio && allSameSeedingTime
    && (torrents[0]->ratioLimit() == BitTorrent::TorrentHandle::USE_GLOBAL_RATIO)
    && (torrents[0]->seedingTimeLimit() == BitTorrent::TorrentHandle::USE_GLOBAL_SEEDING_TIME);
```"
543989720,13885,Chocobo1,2020-12-16T05:45:48Z,curly braces can be removed.
543990859,13885,Chocobo1,2020-12-16T05:47:16Z,`for (const BitTorrent::InfoHash &hash : asConst(m_torrentHashes()`
543993124,13885,Chocobo1,2020-12-16T05:50:05Z,"Please move this down to near `m_ui`.
Also you should rewrite it:
```c++
struct 
{
//  fields
} m_initialValues;
```"
543994691,13885,Chocobo1,2020-12-16T05:52:12Z,"If the order isn't important, I would rearrange them (to be more efficient in memory layout):
```c++
{
    qreal ratio;
    int upSpeedLimit;
    // others
}
```"
544517309,13885,thalieht,2020-12-16T18:14:19Z,"Sorry what am i supposed to do?
Also https://github.com/qbittorrent/qBittorrent/pull/13885#discussion_r535501450? (that was in constructor)"
544519566,13885,thalieht,2020-12-16T18:17:41Z,"But it's supposed to be a `qreal`. e.g.
https://github.com/qbittorrent/qBittorrent/blob/7c48ba2f1934d1f1fc280a3fcb2a98b4e46e85e7/src/base/bittorrent/torrenthandle.cpp#L45

Maybe you meant this for `getSeedingTime()`? It slipped by me. Removed from there."
544621895,13885,thalieht,2020-12-16T21:04:38Z,Done.
544622121,13885,thalieht,2020-12-16T21:04:58Z,"I chose the first, thanks."
544622252,13885,thalieht,2020-12-16T21:05:13Z,Done.
544622346,13885,thalieht,2020-12-16T21:05:23Z,Sure done.
544622473,13885,thalieht,2020-12-16T21:05:32Z,"Forgot about that, thanks."
544622530,13885,thalieht,2020-12-16T21:05:38Z,Done.
544622588,13885,thalieht,2020-12-16T21:05:43Z,Done.
544623781,13885,thalieht,2020-12-16T21:07:51Z,I check for emptiness in caller side.
544754493,13885,Chocobo1,2020-12-17T01:59:42Z,">But it's supposed to be a qreal. e.g.

I get it, but unless the compiler complains I would still prefer not having it (decimal point) in this case.
Coercion from `int` to floating point types shouldn't produce any warnings IIRC."
544758649,13885,Chocobo1,2020-12-17T02:11:43Z,">Sorry what am i supposed to do?

I think adding `Q_ASSERT(!torrents.empty());` above `session` variable declaration should suffice.

>Also #13885 (comment)? (that was in constructor)

Seems not related to me.

>I check for emptiness in caller side.

Sure.
By having `Q_ASSERT()` here shows we expect this (unusual) condition to hold."
545002037,13885,thalieht,2020-12-17T11:03:49Z,Done.
546193570,13885,Chocobo1,2020-12-19T05:14:44Z,"Is it worth to change this behavior? why not use the default behavior from Qt? We can have less code then.
"
546194063,13885,Chocobo1,2020-12-19T05:19:30Z,"I think it is better to place a vertical spacer above the `QDialogButtonBox`, like in torrentoptionsdialog.ui."
546194527,13885,Chocobo1,2020-12-19T05:25:29Z,"Please simplify the grid as done in this picture: ![pic](https://user-images.githubusercontent.com/9395168/102681590-922ebd00-41fd-11eb-87e0-456ea8192eb3.png)
"
546228361,13885,thalieht,2020-12-19T11:37:26Z,"I don't follow. If i don't do this, `PartiallyChecked` will be available to users when toggling the checkbox, if that's the checkbox's startup state. Or you're saying there's an easier way to do this?"
546228798,13885,thalieht,2020-12-19T11:43:18Z,"Thanks, i didn't know about it."
546228813,13885,thalieht,2020-12-19T11:43:23Z,Done.
546316634,13885,Chocobo1,2020-12-20T03:47:43Z,">If i don't do this, PartiallyChecked will be available to users when toggling the checkbox, if that's the checkbox's startup state. 

Yes, is there a reason to avoid this behavior? If a user misclicked a checkbox, at least he will have the chance to revert it instead of close/reopen the dialog."
546363968,13885,thalieht,2020-12-20T11:33:29Z,I didn't imagine someone would want this but i guess you're right. Changed it back to default.
548017618,13885,glassez,2020-12-23T15:37:50Z,"Why not print `Disabled for this torrent` in case of **private** torrents?
I would rearrange conditions in the following way:
```c++
    if (!BitTorrent::Session::instance()->isDHTEnabled())
        m_DHTItem->setText(COL_STATUS, disabled);
    else if (torrent->isDHTDisabled() || torrent->isPrivate())
        m_DHTItem->setText(COL_STATUS, torrentDisabled);
    else
        m_DHTItem->setText(COL_STATUS, working);
```
Or if it's important to see that DHT is disabled for this particular torrent even when it is globally disabled:
```c++
    if (torrent->isDHTDisabled() || torrent->isPrivate())
        m_DHTItem->setText(COL_STATUS, torrentDisabled);
    else if (!BitTorrent::Session::instance()->isDHTEnabled())
        m_DHTItem->setText(COL_STATUS, disabled); 
    else
        m_DHTItem->setText(COL_STATUS, working);
```"
548021958,13885,glassez,2020-12-23T15:47:21Z,"Do you really need all these `updateXXXValue()` methods? 
Why don't use `m_ui->xxx->setValue()` directly?"
548023335,13885,glassez,2020-12-23T15:50:20Z,The same question is about all these `getXXXSpeedLimit()` methods...
548026601,13885,glassez,2020-12-23T15:57:28Z,Redundant space after &&
548028481,13885,glassez,2020-12-23T16:01:44Z,`else` is redundant after `return`
548029142,13885,glassez,2020-12-23T16:03:14Z,`else` is redundant after `return`
548182454,13885,thalieht,2020-12-23T19:51:08Z,">Why not print `Disabled for this torrent` in case of **private** torrents?

No reason. I just hope people won't be confused when they see it and think they can enable DHT etc for private torrents. But then again the same can be said about the global setting. Changed.

>Or if it's important to see that DHT is disabled for this particular torrent even when it is globally disabled:

It is important because the global setting is irrelevant if it's disabled for the torrent.
"
548182484,13885,thalieht,2020-12-23T19:51:11Z,"Fine, fine. I inlined all one-liners except for
```
int TorrentOptionsDialog::getDownloadSpeedLimit() const
{
    return qMax(0, m_ui->spinDownloadLimit->value());
}
```"
548388600,13885,glassez,2020-12-24T05:29:38Z,">`return qMax(0, m_ui->spinDownloadLimit->value());`

Is it intended to have negative values?"
548534955,13885,thalieht,2020-12-24T13:47:05Z,"Intended? No, hence the qMax. It is -1 when torrents limits are different but it won't reach the call sites (anymore). Removed qMax and inlined them."
548862191,13885,glassez,2020-12-25T11:51:02Z,"In this case (and several cases below) using lambda is redundant:
```c++
connect(m_ui->sliderUploadLimit, &QSlider::valueChanged, m_ui->spinUploadLimit, &QSpinBox::setValue);
```"
548863226,13885,glassez,2020-12-25T11:59:37Z,You can connect `QSlider::valueChanged` with `QSpinBox::setValue` directly.
548864031,13885,glassez,2020-12-25T12:06:56Z,You can connect `QCheckBox::toggled` with `QSpinBox::setEnabled` directly.
548864296,13885,glassez,2020-12-25T12:09:33Z,Please add blank line above.
548864312,13885,glassez,2020-12-25T12:09:45Z,Please add blank line above.
548864822,13885,glassez,2020-12-25T12:15:02Z,I would declare constant MIXED_RATIOS to indicate it instead of using numbers directly.
548864985,13885,glassez,2020-12-25T12:16:15Z,Please add blank line above.
548865089,13885,glassez,2020-12-25T12:16:57Z,Please add blank line above.
548900896,13885,thalieht,2020-12-25T18:39:20Z,"Thanks, changed all of these."
548901018,13885,thalieht,2020-12-25T18:41:19Z,I declared MIXED_SHARE_LIMITS that is used for both ratio and seeding time. I can change it to 2 constants if that's confusing.
552936718,13885,sledgehammer999,2021-01-06T20:05:45Z,wtf? Why was the **deletion** of other people's copyright years allowed? Was the file rewritten so much that their code isn't here anymore?
552948489,13885,glassez,2021-01-06T20:34:36Z,"Seems git incorrectly show this file as rewritten `updownratiodialog.h`. Looking at its diff and diffs of the accompanying .`cpp`/`.ui` files, it is clear that this is something created from scratch (am I wrong?).
The question is why the author did not want to indicate himself in the copyright, but indicated Christophe Dumez. We did not focus on this...
To be honest, I do not understand the intricacies of copyright, and we do not have any declared policy about it to be guided by it."
884455202,16840,Chocobo1,2022-05-30T06:18:31Z,"Might be faster to use a loop directly.
Currently it needs to construct a QSet first and then throw it away after use."
884460444,16840,Chocobo1,2022-05-30T06:27:10Z,"Based on https://stackoverflow.com/a/45814404
`m_loadedResumeData.clear()` might be faster than `m_loadedResumeData = {};`, and the latter might change memory location (which is undesired IMO) if I understand correctly."
884461601,16840,Chocobo1,2022-05-30T06:29:06Z,"```suggestion
    const QMutexLocker locker {&m_loadedResumeDataMutex};
```
Since we don't mutate it in its lifetime."
884465942,16840,Chocobo1,2022-05-30T06:36:09Z,"off topic
What is rule for deciding which form to use now? I can't see a pattern here."
884467192,16840,Chocobo1,2022-05-30T06:38:11Z,"If I read correctly:
```suggestion
        const LoadResumeDataResult loadResumeDataResult = load(torrentID);
```
Or just inline the call into the next line."
884469461,16840,Chocobo1,2022-05-30T06:41:46Z,"It would be nice to break it into smaller parts:
```c++
    while (true)
    {
        const auto line = QString::fromLatin1(queueFile.readLine().trimmed());
        if (line.isEmpty())
            break;
        
        // ...
    }
```"
884471990,16840,Chocobo1,2022-05-30T06:45:49Z,Is it possible to have a less generic name?
884474272,16840,Chocobo1,2022-05-30T06:49:15Z,"Currently we haven't dropped Qt5, should we still prefer `QVector`?"
884650961,16840,glassez,2022-05-30T09:58:55Z,"> Is it possible to have a less generic name?

What, for example? It's a private name, so I didn't care much. Besides, I really can't think of anything more suitable for storing parameters."
884653416,16840,glassez,2022-05-30T10:01:33Z,"> Currently we haven't dropped Qt5, should we still prefer `QVector`?

It was a list before that, so I don't see the point in changing it on the threshold of Qt6. We don't even know its size to reserve."
884658143,16840,glassez,2022-05-30T10:06:48Z,"When I studied programming, loops without a condition like `while (true)` were considered as something like `goto`."
884664465,16840,glassez,2022-05-30T10:13:43Z,Currently everything is moved. Without `std::exchange` it will copy at least once.
884720700,16840,glassez,2022-05-30T11:21:37Z,"> What is rule for deciding which form to use now?

When we discussed this last time, we agreed that in the case of a constructor call, curly braces should be used only in extreme cases, namely, either when it is necessary to eliminate ambiguity, or when the list of parameters follows directly after the variable name:
```c++
Type name {param1, param2};
// but
Type *name = new Type(param1, param2);
```"
884767163,16840,glassez,2022-05-30T12:14:32Z,"> Might be faster to use a loop directly.
> Currently it needs to construct a QSet first and then throw it away after use.

Changed."
884767753,16840,glassez,2022-05-30T12:15:20Z,"> Since we don't mutate it in its lifetime.

Fixed."
884768864,16840,glassez,2022-05-30T12:16:37Z,"> Or just inline the call into the next line.

Done."
884937546,16840,Chocobo1,2022-05-30T15:28:48Z,">Without std::exchange it will copy at least once.

I don't think so.
```c++
const QVector<> ret = std::move(m_loadedResumeData);  // move once
m_loadedResumeData.clear();  // should do almost nothing
return ret; // NRVO, no copy. https://stackoverflow.com/a/56426413
```

Test case 1:
```c++
    QVector<int> a = {0, 0};
    a.reserve(10000);
    printf(""addr1: %p\n"", &a[0]);
    printf(""cap1: %lld\n"", a.capacity());

    std::exchange(a, {});  // or a = {};

    a.push_back(0);
    printf(""addr2: %p\n"", &a[0]);
    printf(""cap2: %lld\n"", a.capacity());
/*
results:
addr1: 0x55c633db0980
cap1: 10000
addr2: 0x55c633da04f0  // bad, unnecessary memory relocation, could lead to memory fragmentation
cap2: 4
*/
```

Test case 2:
```c++
    QVector<int> a = {0, 0};
    a.reserve(10000);
    printf(""addr1: %p\n"", &a[0]);
    printf(""cap1: %lld\n"", a.capacity());

    a.clear();

    a.push_back(0);
    printf(""addr2: %p\n"", &a[0]);
    printf(""cap2: %lld\n"", a.capacity());
/*
results:
addr1: 0x5623763498f0
cap1: 10000
addr2: 0x5623763498f0
cap2: 10000
*/
```"
884938105,16840,Chocobo1,2022-05-30T15:29:33Z,"```suggestion
    const QReadLocker locker {&m_dbLock};
```"
884948582,16840,Chocobo1,2022-05-30T15:43:53Z,">When I studied programming, loops without a condition like while (true) were considered as something like goto.

I wouldn't take it as a dogma. https://stackoverflow.com/questions/6850380/are-whiletrue-loops-so-bad
IMO `while (true)` is the form that has the most freedom to express any idea. I usually start with it and refactor into other forms whenever possible (without bending the statements too much), otherwise it would just stay in the `while (true)` form.

Anyway, decide it yourself."
884966449,16840,Chocobo1,2022-05-30T16:11:17Z,"To name a few: `ProgramParameters`, `AppParameters`, `CmdlineParameters`, `TorrentStartupParams`..."
884967684,16840,Chocobo1,2022-05-30T16:13:26Z,Seems this can be moved out of class.
884970895,16840,Chocobo1,2022-05-30T16:19:08Z,"```suggestion
    ResumeDataStorage *startupStorage = nullptr;
```"
884973785,16840,Chocobo1,2022-05-30T16:24:21Z,I would add `#ifdef QT_DEBUG` around it or remove it entirely.
884974665,16840,Chocobo1,2022-05-30T16:26:02Z,I would try to make `50` a named constant.
884975754,16840,Chocobo1,2022-05-30T16:28:16Z,"This while loop is big! would it be possible to break it into smaller pieces with lambda functions?
I don't insist it be done in this PR but it would be great if you can do it.."
884976664,16840,Chocobo1,2022-05-30T16:29:57Z,it should have a `reserve()`.
885222393,16840,glassez,2022-05-31T05:44:40Z,"> Test case 2:

It is not so correct. You forgot to add `QVector<int> b = std::move(a);`. Otherwize the result is the same as when use `std::exchange()` but the code takes 3 lines instead of just 1."
885228278,16840,glassez,2022-05-31T05:56:29Z,"> Seems this can be moved out of class.

Then I need either make Application::Params public (but it is intended for private use only) or make the function friend. I dislike both of them."
885244906,16840,glassez,2022-05-31T06:25:31Z,What size should I reserve? Should I traverse alerts one more time to count add_torrent_alert?
885245094,16840,glassez,2022-05-31T06:25:49Z,"> I would try to make `50` a named constant.

Done."
885271172,16840,glassez,2022-05-31T07:02:31Z,">To name a few: `ProgramParameters`, `AppParameters`...

It is already `Application::Params` so `Program`, `App` etc. are redundant.
>`TorrentStartupParams`

IMO, `Startup` part is confusing.
Maybe `Application::AddTorrentParams`?"
885285862,16840,Chocobo1,2022-05-31T07:20:25Z,">It is not so correct. You forgot to add QVector<int> b = std::move(a);. Otherwize the result is the same as when use std::exchange() but the code takes 3 lines instead of just 1.

Not sure that is relevant.
The point is: with `m_loadedResumeData.clear()`, `m_loadedResumeData` still uses the same memory address. While `m_loadedResumeData = {};` or `std::exchange(m_loadedResumeData , {});` it will have the bad effect."
885286918,16840,Chocobo1,2022-05-31T07:21:41Z,">Maybe Application::AddTorrentParams?

OK."
885289637,16840,Chocobo1,2022-05-31T07:24:38Z,An approximated value is better than nothing. I would choose `1024` or even `alerts.size()`...
885292657,16840,glassez,2022-05-31T07:27:56Z,"> the point is after `m_loadedResumeData.clear()`, `m_loadedResumeData` still uses the same memory address.

It doesn't using both `std::move` and `std::exchange`.
Only copy could preserve it but it is bad alternative, IMO."
885302159,16840,glassez,2022-05-31T07:38:25Z,"And, BTW, I don't see any particular point in ""use the same memory address"" (of course, if we can't trivially avoid it)."
885304047,16840,glassez,2022-05-31T07:40:31Z,"> An approximated value is better than nothing. I would choose `1024` or even `alerts.size()`...

Seems it can be the same as MAX_PROCESSING_RESUMEDATA_COUNT."
885317073,16840,Chocobo1,2022-05-31T07:54:36Z,"OK, I saw my error.

Another thing, can `m_loadedResumeData` have a `reserve()`? probably with an estimated value.

If `reserve()` is added then `std::exchange` will reset the capacity and you'll need to reserve it again.
If you used `clear()`, since QVector is implicitly shared there should be no copy but a detachment, and detachment don't reset the capacity.

Of course if `m_loadedResumeData` is small then this issue can be neglected but I'm not sure about it."
885518810,16840,glassez,2022-05-31T11:25:26Z,"> Another thing, can `m_loadedResumeData` have a `reserve()`? probably with an estimated value.

Done.


> If you used `clear()`, since QVector is implicitly shared there should be no copy but a detachment, and detachment don't reset the capacity.

Ok, changed to copy+clear. QVector turned out to be smart enough to copy nothing when detaching due to `clear()`. It still changes the memory address but preserves original capacity."
885661028,16840,glassez,2022-05-31T13:46:38Z,"> This while loop is big! would it be possible to break it into smaller pieces with lambda functions?

Refactored into several methods."
886344996,16840,Chocobo1,2022-06-01T06:01:22Z,"maybe
```suggestion
    if (!isRestored())
```"
886359844,16840,Chocobo1,2022-06-01T06:28:20Z,is this rescheduling itself? won't it keep reschedule forever?
886374240,16840,glassez,2022-06-01T06:50:49Z,"> is this rescheduling itself? won't it keep reschedule forever?

It is inside conditional statement. It reschedules itself until all the resume data are loaded and startup process is finished."
886403452,16840,glassez,2022-06-01T07:29:03Z,"> maybe

Done"
889059075,16840,glassez,2022-06-03T15:36:59Z,"Well, redundant scheduling still turned out to be possible under certain conditions (not the ones I originally thought of). So now I'm really tracking whether it was already scheduled."
901059694,16840,Chocobo1,2022-06-19T07:16:02Z,seems not in use?
901060593,16840,Chocobo1,2022-06-19T07:24:13Z,"This is quite bad usability, maybe just disable `m_ui->checkStartSeeding` checkbox in the constructor if Session isn't ready and add a tooltip about why it isn't available.

Then there is no need for this message."
901061108,16840,Chocobo1,2022-06-19T07:28:11Z,Those disabled entries should have a tooltip telling why.
901061537,16840,Chocobo1,2022-06-19T07:31:57Z,"The title should say the current action (Downloading torrents) failed.

This applies to other similar messages."
901061738,16840,Chocobo1,2022-06-19T07:33:10Z,">Adding new torrents is impossible.

It should mention when it is possible, i.e. ""Adding new torrents is prohibited until session is restored.""

This applies to other similar messages.
"
901062054,16840,Chocobo1,2022-06-19T07:36:15Z,"(Globally) would it be possible to just disable the GUI widgets/elements instead of needing this message?
I think it is too intrusive... the message doesn't closely related to the action performed and the failing is unexpected for users.

IMO this is quite a big change... now is adding/enforcing a new *step* (restoring torrents) when starting up and when processing this step all session related operations are halted.
Maybe instead of enable/disable widgets here and there maybe present a new modal dialog on top of mainwindow which shows the restore progress (a progressbar with cancel button?), since the GUI doesn't have much functionality without session ready anyway...

Also what about webapi/webui users? How would they know when the session is ready?"
901082546,16840,glassez,2022-06-19T10:25:10Z,"> now is adding/enforcing a new _step_ (restoring torrents) when starting up and when processing this step all session related operations are halted.

It's only about adding torrents. Most of the other operations are still available. And I highly doubt that earlier you would have been able to successfully add a torrent before resuming the session, given that the application was almost completely unresponsive during this period.
>Maybe instead of enable/disable widgets here and there maybe present a new modal dialog on top of mainwindow which shows the restore progress (a progressbar with cancel button?), since the GUI doesn't have much functionality without session ready anyway...

I really don't want to redo everything for now.  In addition, I believe that we will not understand how it would be better until it gets into production and we begin to receive real feedbacks.
>Also what about webapi/webui users? How would they know when the session is ready?

Please, just don't make me get into Web UI. Poking around there is beyond my strength. Honestly, it's easier for me to give it all up..."
901082897,16840,glassez,2022-06-19T10:27:52Z,">the message doesn't closely related to the action performed and the failing is unexpected for users.

Maybe just silently ignore ""double click"" until the session is restored?"
901091851,16840,glassez,2022-06-19T11:38:51Z,Done.
901303571,16840,Chocobo1,2022-06-20T06:41:09Z,">Please, just don't make me get into Web UI. Poking around there is beyond my strength. Honestly, it's easier for me to give it all up...

I don't insist on webui. As for webapi, I'm not saying it is a hard requirement for this PR but it is something to think about (as to avoid redesigning the internals).

>Maybe just silently ignore ""double click"" until the session is restored?

I don't think users would like that.

>In fact, a UI that is unavailable during startup, displaying only the progress of execution, could get rid of most possible conflicts, and would speed up the startup itself.

(just providing ideas)
On top of the transferlist there could be a modal dialog like this (without the Close button):
![screenshot](https://docs.microsoft.com/en-us/windows/win32/uxguide/images/progress-bars-image4.png)
The transferlist won't be populated when this dialog is running.

To be honest, I don't really like disabling menu items/widgets due to session not ready so I'm finding alternative ways."
902162858,16840,glassez,2022-06-21T04:58:35Z,"> I don't really like disabling menu items/widgets due to session not ready

Yes, it looks quite cumbersome and poorly scalable.
So a modal dialog would be a better alternative. But I am not sure that this will work correctly in the case of starting hidden in the tray (without displaying the main window). I must try...
Other alternatives I'm thinking of:
1. Don't create any regular content of main window until session is restored and just display startup progress,
2. Don't create main window until session is restored and display startup progress in its own window."
902213764,16840,Chocobo1,2022-06-21T06:37:21Z,">Don't create any regular content of main window until session is restored and just display startup progress,

I'm would prefer this (show the mainwindow but leave the transferlist empty or disabled) and this way would be simpler to implement I presume?"
902228240,16840,glassez,2022-06-21T06:58:46Z,"> > Don't create any regular content of main window until session is restored and just display startup progress,
> 
> I'm would prefer this (show the mainwindow but leave the transferlist empty or disabled) and this way would be simpler to implement I presume?

You don't seem to understand this option of mine that you commented on. I mean to create Main window that doesn't contain any regular controls, toolbox, menus etc. but only temporary controls needed to display startup progress. After session is restored the main window will expose its regular layout.
Otherwise we need either disable all regular controls or show modal dialog to make them unavailable. "
902264742,16840,Chocobo1,2022-06-21T07:42:02Z,">I mean to create Main window that doesn't contain any regular controls, toolbox, menus etc. but only temporary controls needed to display startup progress. After session is restored the main window will expose its regular layout.

Then the mainwindow will have different layouts depending on the state of session, which is more coding work.

>The transferlist won't be populated when this dialog is running.

To clarify what I said before.
I meant on startup, the mainwindow is shown entirely (all menus, widgets) but the transferlist is empty. Next the session restore modal dialog is shown automatically (and closed automatically when done). Note that this dialog is modal so users cannot interact with mainwindow to do other things. While the session restore procedure runs, the transferlist remains empty (maybe make it in disabled state?), only when the procedure is finished/canceled then the transferlist will populate the contents.
Would this be possible? will there be downsides? I imagine this way would be easier than other options.
"
902274581,16840,Chocobo1,2022-06-21T07:52:21Z,">So a modal dialog would be a better alternative. But I am not sure that this will work correctly in the case of starting hidden in the tray (without displaying the main window). I must try...

(On Windows) currently dialogs (about, options, etc.) remains on screen when mainwindow is minimized to tray, so maybe just show the modal dialog anyway (at least for this first version, we can tweak it later)."
902277563,16840,oorzkws,2022-06-21T07:54:57Z,"> > So a modal dialog would be a better alternative. But I am not sure that this will work correctly in the case of starting hidden in the tray (without displaying the main window). I must try...
> 
> (On Windows) currently dialogs (about, options, etc.) remains on screen when mainwindow is minimized to tray, so maybe just show the modal dialog anyway (at least for this first version, we can tweak it later).

I'm against windows showing when minimized to tray, as Qt sometimes crashes on monitor disconnect if it's drawing *any* windows (so I always make sure qbit is minimized to tray before I turn my screen off for the night)"
902331540,16840,glassez,2022-06-21T08:38:35Z,"> (On Windows) currently dialogs (about, options, etc.) remains on screen when mainwindow is minimized to tray, so maybe just show the modal dialog anyway (at least for this first version, we can tweak it later).

I wouldn't consider it as acceptable solution. If users select to start qBittorrent minimized to tray they clearly don't want to see anything on the screen.


> Then the mainwindow will have different layouts depending on the state of session, which is more coding work.

Not very much. The creation of a regular layout could simply be placed in a separate method called when the session is restored."
50686029,4681,glassez,2016-01-25T12:09:21Z,"Extra blank line.
"
50690961,4681,glassez,2016-01-25T13:10:06Z,"This subsystem (file logger) is not part of Base. It's part of App which uses Base service Logger (like <del>LogListWidget</del> ExecutionLog is part of GUI and it also uses Logger).
"
50691483,4681,glassez,2016-01-25T13:16:17Z,"Isn't that a little wasteful? Maybe it's better to save one value and interpret it as a set of flags?
"
50691919,4681,glassez,2016-01-25T13:21:01Z,"What about default values for constructor params?
"
50692813,4681,glassez,2016-01-25T13:29:44Z,"Please use the same rule for names as in c++ files. `menuLog`, `actionExecutionLogs`, etc.
Existing names in MainWindow I fixed in one of my last PRs.
"
50693280,4681,glassez,2016-01-25T13:35:01Z,"By and large, this class should not contain any logic associated with handling log messages (and only the initialization/configuration of interface elements). This should be moved to the appropriate widget code.
"
50693556,4681,glassez,2016-01-25T13:37:38Z,"To call widget classes in the form of  `<Something>Widget` (eg.  ExecutionLogWidget) is a good thing.
"
50802792,4681,glassez,2016-01-26T07:45:10Z,"> By and large, this class should not contain any logic associated with handling log messages (and only the initialization/configuration of interface elements). This should be moved to the appropriate widget code

Forget it if you want. Actually, I understand why you're using this proxy code. You just want to have a simple widget (LogListWidget) that would operate only with some abstract string messages and their categories. I just somewhat confused by the fact that categories aren't used to working with peers... Nothing. Just do the default values for constructor parameters.
"
50809688,4681,sledgehammer999,2016-01-26T09:14:19Z,"Ok, I'll move it. I generally had in my mind base == non-gui and had forgotten about the other places.
"
50809905,4681,sledgehammer999,2016-01-26T09:16:29Z,"Sure. Can you recommend a type? I am thinking `char` and setting its first 4bits to on/off. (needs extra code though)
"
50810254,4681,sledgehammer999,2016-01-26T09:20:12Z,"Exactly. The only ""optimization"" I could do is move the 2 formatting functions from `ExecutionLog` into the `LogListWidget` class as slots. Then in `ExecutionLog` connect the correct instance to the correct signal/slot.
So it is a tradeoff: A simple `ExecutionLog` or a simple `LogListWidget`. I don't really care which.
"
50810331,4681,sledgehammer999,2016-01-26T09:21:04Z,"Sure. That name was auto generated by QtDesigner...
"
50815490,4681,glassez,2016-01-26T10:08:59Z,"Maybe you should try QFlags?
"
50817762,4681,sledgehammer999,2016-01-26T10:30:07Z,"Good idea but QVariant doesn't have a constructor for that. I am thinking of a QBitArray.
"
50819244,4681,glassez,2016-01-26T10:45:19Z,"QVariant has generic fromValue(). QFlags is better since it allows to use something like Log::Normal | Log::Warning.
"
51356190,4681,Chocobo1,2016-01-31T06:44:11Z,"Take this diff as you please.
Besides moving to the same line, some changes:
- I removed the translatable property for  `...` string.
- Use `QToolButton` in place of `QPushButton`

``` diff
diff --git a/src/gui/options.ui b/src/gui/options.ui
index 86fe030..fa6c605 100644
--- a/src/gui/options.ui
+++ b/src/gui/options.ui
@@ -161,9 +161,9 @@
            <property name=""geometry"">
             <rect>
              <x>0</x>
-             <y>-191</y>
-             <width>454</width>
-             <height>733</height>
+             <y>-236</y>
+             <width>480</width>
+             <height>774</height>
             </rect>
            </property>
            <layout class=""QVBoxLayout"" name=""verticalLayout_9"">
@@ -488,6 +488,9 @@
               <property name=""checkable"">
                <bool>true</bool>
               </property>
+              <property name=""checked"">
+               <bool>true</bool>
+              </property>
               <layout class=""QVBoxLayout"" name=""verticalLayout_11"">
                <item>
                 <layout class=""QHBoxLayout"" name=""horizontalLayout_7"">
@@ -502,87 +505,83 @@
                   <widget class=""QLineEdit"" name=""textFileLogPath""/>
                  </item>
                  <item>
-                  <widget class=""QPushButton"" name=""browseFileLogDir"">
-                   <property name=""sizePolicy"">
-                    <sizepolicy hsizetype=""Fixed"" vsizetype=""Fixed"">
-                     <horstretch>0</horstretch>
-                     <verstretch>0</verstretch>
-                    </sizepolicy>
-                   </property>
-                   <property name=""maximumSize"">
+                  <widget class=""QToolButton"" name=""browseFileLogDir"">
+                   <property name=""minimumSize"">
                     <size>
-                     <width>25</width>
-                     <height>16777215</height>
+                     <width>0</width>
+                     <height>25</height>
                     </size>
                    </property>
                    <property name=""text"">
-                    <string>...</string>
+                    <string notr=""true"">...</string>
                    </property>
                   </widget>
                  </item>
                 </layout>
                </item>
                <item>
-                <widget class=""QGroupBox"" name=""checkFileLogManage"">
-                 <property name=""title"">
-                  <string>Manage File Size</string>
+                <layout class=""QHBoxLayout"" name=""horizontalLayout_8"">
+                 <property name=""topMargin"">
+                  <number>0</number>
                  </property>
-                 <property name=""checkable"">
-                  <bool>true</bool>
-                 </property>
-                 <layout class=""QHBoxLayout"" name=""horizontalLayout"">
-                  <item>
-                   <widget class=""QLabel"" name=""label_11"">
+                 <item>
+                  <widget class=""QCheckBox"" name=""checkFileLogManage"">
+                   <property name=""text"">
+                    <string>Manage file size:</string>
+                   </property>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class=""QLabel"" name=""label_11"">
+                   <property name=""text"">
+                    <string comment=""After 10 MB backup the log file"">After</string>
+                   </property>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class=""QSpinBox"" name=""spinFileLog"">
+                   <property name=""suffix"">
+                    <string> MB</string>
+                   </property>
+                   <property name=""minimum"">
+                    <number>1</number>
+                   </property>
+                   <property name=""maximum"">
+                    <number>1000</number>
+                   </property>
+                   <property name=""value"">
+                    <number>10</number>
+                   </property>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class=""QComboBox"" name=""comboFileLog"">
+                   <item>
                     <property name=""text"">
-                     <string comment=""After 10 MB backup the log file"">After</string>
-                    </property>
-                   </widget>
-                  </item>
-                  <item>
-                   <widget class=""QSpinBox"" name=""spinFileLog"">
-                    <property name=""suffix"">
-                     <string> MB</string>
-                    </property>
-                    <property name=""minimum"">
-                     <number>1</number>
+                     <string comment=""After 10 MB Backup the log file"">Backup</string>
                     </property>
-                    <property name=""maximum"">
-                     <number>1000</number>
-                    </property>
-                    <property name=""value"">
-                     <number>10</number>
-                    </property>
-                   </widget>
-                  </item>
-                  <item>
-                   <widget class=""QComboBox"" name=""comboFileLog"">
-                    <property name=""sizePolicy"">
-                     <sizepolicy hsizetype=""MinimumExpanding"" vsizetype=""Fixed"">
-                      <horstretch>0</horstretch>
-                      <verstretch>0</verstretch>
-                     </sizepolicy>
-                    </property>
-                    <item>
-                     <property name=""text"">
-                      <string comment=""After 10 MB Backup the log file"">Backup</string>
-                     </property>
-                    </item>
-                    <item>
-                     <property name=""text"">
-                      <string comment=""After 10 MB Delete the log file"">Delete</string>
-                     </property>
-                    </item>
-                   </widget>
-                  </item>
-                  <item>
-                   <widget class=""QLabel"" name=""label_12"">
+                   </item>
+                   <item>
                     <property name=""text"">
-                     <string comment=""After 10 MB backup the log file"">the log file</string>
+                     <string comment=""After 10 MB Delete the log file"">Delete</string>
                     </property>
-                   </widget>
-                  </item>
-                 </layout>
-                </widget>
+                   </item>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class=""QLabel"" name=""label_12"">
+                   <property name=""sizePolicy"">
+                    <sizepolicy hsizetype=""Expanding"" vsizetype=""Preferred"">
+                     <horstretch>0</horstretch>
+                     <verstretch>0</verstretch>
+                    </sizepolicy>
+                   </property>
+                   <property name=""text"">
+                    <string comment=""After 10 MB backup the log file"">the log file</string>
+                   </property>
+                  </widget>
+                 </item>
+                </layout>
                </item>
               </layout>
              </widget>

```
"
51617011,4681,glassez,2016-02-02T19:02:16Z,"Move up. Before `Logger::freeInstance();` since FileLogger uses Logger.
"
51617135,4681,glassez,2016-02-02T19:03:01Z,"`m_fileLogEnabled` is redundant variable.
"
51617736,4681,glassez,2016-02-02T19:07:14Z,"Here you open/write/close log file several times in a row. I think that is wasteful.
"
51618084,4681,glassez,2016-02-02T19:09:25Z,"Maybe it would be better to use string array indexed by message type?
"
51618516,4681,glassez,2016-02-02T19:12:29Z,"Isn't `Q_DECLARE_OPERATORS_FOR_FLAGS` supposed to be placed outside the `Log` namespace?
"
51619354,4681,glassez,2016-02-02T19:17:38Z,"It is better to divide the system and local includes. Use `""` with local.
"
51619461,4681,glassez,2016-02-02T19:18:23Z,"Coding Style!!!
"
51619698,4681,glassez,2016-02-02T19:20:00Z,"camel Case
"
51619841,4681,glassez,2016-02-02T19:20:53Z,"This variable is redundant.
"
51620634,4681,glassez,2016-02-02T19:25:47Z,"Maybe add `ALL = -1` here and use it later?
"
51621525,4681,sledgehammer999,2016-02-02T19:31:32Z,"Yes, but it never accesses logger directly, only in construction to setup the signal/slots. My intention was to leave it last in order to catch all messages to file.
Do you still want to move it?
"
51621693,4681,sledgehammer999,2016-02-02T19:32:39Z,"true. I'll remove.
"
51621989,4681,glassez,2016-02-02T19:34:59Z,"I don't think you can lose some messages here. Better change it.
"
51622006,4681,sledgehammer999,2016-02-02T19:35:06Z,"I was thinking this when I was implementing it. I was going to discuss about this but I forgot.
My other thought was: Have the file as member var and keep it open for eg 5secs of inactivity(timer). Then close it again.
Or keep it open indefinitely and close on object destruction?
"
51622243,4681,sledgehammer999,2016-02-02T19:36:41Z,"like we did recently with the SIGTERM etc signals?
That is a good thought.
"
51622490,4681,sledgehammer999,2016-02-02T19:37:58Z,"I have no idea... The docs aren't very detailed there. Plus it seems to work on the other places where I use bitwise operations.
But I can move it if you want.
"
51622620,4681,sledgehammer999,2016-02-02T19:38:42Z,"Sorry. My mistake.
"
51622636,4681,glassez,2016-02-02T19:38:48Z,"> keep it open indefinitely and close on object destruction?

Yes. And do flush() from time to time.
"
51623114,4681,glassez,2016-02-02T19:41:53Z,"I can't read docs at this time but I think it is clear about this.
"
51623976,4681,sledgehammer999,2016-02-02T19:46:53Z,"I feel ashamed.
"
51624061,4681,sledgehammer999,2016-02-02T19:47:35Z,":+1: 
"
51624161,4681,sledgehammer999,2016-02-02T19:48:18Z,"not my code but ok.
"
51624477,4681,sledgehammer999,2016-02-02T19:50:46Z,"OK. Should I put it first or last?
"
51624627,4681,sledgehammer999,2016-02-02T19:51:38Z,"ok
"
51625049,4681,sledgehammer999,2016-02-02T19:54:12Z,"ok another timer... What timeout do you suggest?
"
51628278,4681,glassez,2016-02-02T20:17:10Z,"Maybe just to use 0 timeout? Do you understand what I mean? If timer isn't active we call single shot with 0 timeout in addLogMessage and store that timer is active.
"
51628494,4681,glassez,2016-02-02T20:18:46Z,"No matter.
"
51636521,4681,sledgehammer999,2016-02-02T21:17:38Z,"So if the control doesn't return to mainloop we continue to output stuff to the file. But when control returns to mainloop it means that it is unlikely to have other stuff to write immediately, the slot is called and the file is closed.
Nice idea, but IMO we will have almost the same problem with the warning messages about the trackers.(when retrieving favicons that don't exist)
"
51677674,4681,glassez,2016-02-03T04:32:43Z,"> we will have almost the same problem with the warning messages about the trackers.(when retrieving favicons that don't exist)

What's the problem you're talking about?
"
51975231,4681,glassez,2016-02-05T04:13:56Z,"Shouldn't we start from new file here?
"
52033116,4681,sledgehammer999,2016-02-05T15:56:55Z,"When application is started it tries to download the favicons for the torrents' trackers. There are quite a few trackers that don't return a favicon and we output warning messages to the log. Just check your log to see the orange text.
These messages are being logged one after the other at the first few seconds(or minute) of startup.
So if I have timer with a 0 timeout to close the filelog file: The file will be opened again after the next mainloop iteration. Then closed again and then open agian etc. So we are back to the original problem.
"
52033396,4681,sledgehammer999,2016-02-05T15:58:47Z,"I don't follow. What do you mean?
"
52038627,4681,glassez,2016-02-05T16:32:05Z,"No. I think it's a problem of different level. Here you are trying to do this in a loop (with delays in a few micro or even nano seconds). And in another case the delay is much more. Besides the messages about favicons not so much (theoretically, their may not be). I also suggest not to open/close the file and keep it open and periodically do flush().
"
52039771,4681,glassez,2016-02-05T16:40:14Z,"Imagine this situation: when we run the program, we have some log file (almost complete), remaining after the previous session. We adding some number of messages, it fills up, we remove it and start writing to a new file. We may lose some interesting messages, for example, torrents resuming, ports allocation, etc.
"
52043184,4681,sledgehammer999,2016-02-05T17:04:22Z,"> periodically do flush().

I forgot this. I had in my mind close(). Then I am ok.
"
52043885,4681,sledgehammer999,2016-02-05T17:10:08Z,"To be honest, I have seen the GUI options other apps have that allow delete/backup for X size. But I have never used them to actually know how they handle that situation(your use case).
Do you have any proposal here?
And isn't it a bit dangerous anyway to select ""delete after X size""? I mean the user probably accepts the risk.
PS: I thought of an idea:
1. Allow to only backup after X size and
2. Allow to delete **backup** logs that are X days old?
"
52048809,4681,glassez,2016-02-05T17:51:08Z,"> Do you have any proposal here?

At least start writing to new file when we start qBittorrent. And let the rest up to the user.
"
52048941,4681,glassez,2016-02-05T17:52:11Z,"> Allow to delete backup logs that are X days old

It's good idea. In addition to corresponding option.
"
52051468,4681,sledgehammer999,2016-02-05T18:13:11Z,"> At least start writing to new file when we start qBittorrent. And let the rest up to the user.

No. That will fill up the log folder with too much small log files in a matter of days.
"
52053069,4681,glassez,2016-02-05T18:25:51Z,"I mean case when we delete files. We just delete the old file and starts writing to new one.
"
52055534,4681,sledgehammer999,2016-02-05T18:44:30Z,"Well there are a lot of bugs reported where older log entries would have helped in faster debugging.
Anyway, I'll implement the delete after X days and be done with it.
"
55310887,4681,zeule,2016-03-08T03:05:22Z,"Why not  `QScoopedPointer`? The `Application` object owns the `m_fileLogger` object, doesn't it?
"
55311320,4681,zeule,2016-03-08T03:13:44Z,"Since you've put file size check after writing the current message, a `str.flush()` call would be logical in between.
"
55311992,4681,zeule,2016-03-08T03:24:59Z,"I would move the tests and the file manipulation towards the beginning of the function, before the place where the current message is written. Then the call to `flush()`, mentioned above is not needed, of course. 
"
55312508,4681,zeule,2016-03-08T03:36:17Z,"And `mkpath()` will again check does the path exist.
"
55312612,4681,zeule,2016-03-08T03:38:18Z,"I would write here

``` C++
m_path = dir.absoluteFilePath(""qbittorrent.log"")
```

and remove `endsWith()` check above.
"
55312724,4681,zeule,2016-03-08T03:40:11Z,"`time` is redundant variable unless you want to debug the `QDateTime::fromMSecsSinceEpoch()` call.
"
55312794,4681,zeule,2016-03-08T03:41:50Z,"Perhaps it is possible to write into the log window a note about this fiasco?
"
55313303,4681,zeule,2016-03-08T03:51:51Z,"You better read its source code ;) It has to be placed inside of the namespace for C++ overload rules to work as expected. And `Log::` can be omitted, I guess.
"
55313727,4681,zeule,2016-03-08T03:59:57Z,"`else` is redundant
"
55313806,4681,zeule,2016-03-08T04:01:34Z,"``` C++
return (val < 0 || val > 1) ? 0 : val;
```
"
55313865,4681,zeule,2016-03-08T04:03:20Z,"``` C++
setValue(""Preferences/FileLog/Action"", action < 0 || action > 1 ? 0: action)
```

is more explicit
"
55314023,4681,zeule,2016-03-08T04:07:31Z,"Questionable, but...

``` C++
setValue(""Preferences/FileLog/MaxSize"", size < 1 ? 1 : size > 1000 ? 1000 : size);
```

or

``` C++
setValue(""Preferences/FileLog/MaxSize"", std::min(std::max(size, 1), 1000));
```
"
55314387,4681,Chocobo1,2016-03-08T04:15:05Z,"or just use `min()` & `max()` to clamp its value, just a matter of preference...
"
55324835,4681,glassez,2016-03-08T07:31:46Z,"And get an infinite loop here?
"
55325246,4681,glassez,2016-03-08T07:39:14Z,"But we have to add a message to the file, and only then check whether it has exceeded the limit, and decide what to do with it.
"
55325456,4681,glassez,2016-03-08T07:42:15Z,"Qt Example:

``` c++
class MyClass
{
public:
    enum Option {
        NoOptions = 0x0,
        ShowTabs = 0x1,
        ShowAll = 0x2,
        SqueezeBlank = 0x4
    };
    Q_DECLARE_FLAGS(Options, Option)
    ...
};

Q_DECLARE_OPERATORS_FOR_FLAGS(MyClass::Options)
```
"
55325761,4681,glassez,2016-03-08T07:46:59Z,"Q_DECLARE_FLAGS is inside namespace.
Q_DECLARE_OPERATORS_FOR_FLAGS is outside namespace (but it uses full qualified type name).
"
55325868,4681,glassez,2016-03-08T07:48:47Z,"> else is redundant

And how are you going to return a value between 1 and 1000?
"
55325972,4681,glassez,2016-03-08T07:50:41Z,"``` c++
setValue(""Preferences/FileLog/MaxSize"", size < 1 ? 1 : size > 1000 ? 1000 : size);
```

It's unreadable.

``` c++
setValue(""Preferences/FileLog/MaxSize"", std::min(std::max(size, 1), 1000));
```

It's better.
"
55326114,4681,glassez,2016-03-08T07:52:33Z,"Recall that **Preferences** is deprecated in new code.
"
55349442,4681,zeule,2016-03-08T11:55:05Z,"That is why I wrote ""perhaps""
"
55349607,4681,zeule,2016-03-08T11:57:04Z,"So what can be wrong if we chech that before the next write?
"
55349693,4681,zeule,2016-03-08T11:58:04Z,"Fine, but where is a namespace?
"
55349787,4681,zeule,2016-03-08T11:59:10Z,"See below.
"
55350354,4681,glassez,2016-03-08T12:05:42Z,"Hmm... Maybe you're right.
"
55350902,4681,glassez,2016-03-08T12:11:24Z,"You disappoint me... What a class is different from the namespace in this context?
"
55351167,4681,zeule,2016-03-08T12:13:52Z,"I mean that only the keyword `else` is redundant, but not the `else` clause.
"
55351614,4681,glassez,2016-03-08T12:19:22Z,"I don't understand what do you mean.
We have three cases:
val <= 1: we should return 1
1 < val <= 1000: we should return val itself
val > 1000: we should return 1000
and we have three branches in code which corresponds to three cases above. What is redundant?
"
55351972,4681,zeule,2016-03-08T12:23:34Z,"``` C++
if (val < 1)
    return 1;
if (val > 1000)
    return 1000;
return val;
```

You don't put `break` after `return` in `switch`, right? The same is here.
"
55352488,4681,zeule,2016-03-08T12:29:37Z,"For operators the lookup mechanism checks for an user-provided version in the namespaces where its arguments are declared. Therefore there is no need to pollute the global namespace. 
"
55352504,4681,glassez,2016-03-08T12:29:45Z,"> I mean that only the keyword else is redundant, but not the else clause.

You should be more specific. Then other explanations need not.
"
55353178,4681,zeule,2016-03-08T12:36:47Z,"So, I would add a flag to the `FileLogger` class, say `m_ignoreMessages`, set it here, fire a log message and in the very beginning of the function I'll check:

``` C++
if (m_ignoreMessages)
    return;
```

And reset the flag in `FileLogger::configure()` after everything is set up. As a bonus `FileLogger` will become almost ready for multi-thread usage.
"
55354549,4681,glassez,2016-03-08T12:52:29Z,"Are you going again across the universe... Who (or what) will set this flag? FileLogger is a Logger client, do not forget about it.
But something to do is still possible... for Example, the FileLogger can ignore messages on any (hardcoded) attribute.
"
55354557,4681,glassez,2016-03-08T12:52:39Z,"Ah, now I see. I'm sorry, I didn't know about it (apparently, Qt developers too).
For followers: [Argument-dependent lookup](http://en.cppreference.com/w/cpp/language/adl)
"
55355158,4681,zeule,2016-03-08T13:00:02Z,"This function can set it directly here:

``` C++
if (!log.open(QIODevice::WriteOnly | QIODevice::Append | QIODevice::Text)) {
    m_ignoreMessages = true;
    sendWarningMessageToTheLog(logFileOpenOperationHasFailedMessage());
    return;
}
```

Also, if `Utils::Fs::forceRemove()` call below fails, we can do the similar things.
"
55357762,4681,glassez,2016-03-08T13:26:59Z,"It makes sense (we can safely assume that if we are unable to open the file once, we will not be able to do it next). Although it is better to name the flag something more suitable (`m_invalid` or something similar).
"
55357865,4681,glassez,2016-03-08T13:28:01Z,"But better to release it first without this feature.
"
55362682,4681,glassez,2016-03-08T14:10:17Z,"Besides, there will be no problem, if you leave it as is.

> Therefore there is no need to pollute the global namespace.

Says it's too loud. This won't hurt it.
"
55404376,4681,zeule,2016-03-08T18:33:51Z,"Since there is a default value for the log file name, I would like to see here a call to `QFile::setPermissions(QFile::ReadOwner|QFile::WriteOwner)`
"
55938801,4681,sledgehammer999,2016-03-13T15:38:00Z,"We do cleanup in Application::cleanup() instead of destructor. The reason is we need to control the shutdown process on Windows otherwise windows kills us aka unclean exit.
"
55940699,4681,zeule,2016-03-13T17:42:34Z,"I see. Thank you for the reply.

On 13 March 2016 at 16:38, sledgehammer999 notifications@github.com wrote:

> In src/app/application.h
> https://github.com/qbittorrent/qBittorrent/pull/4681#discussion_r55938801
> :
> 
> > @@ -103,6 +106,10 @@ private slots:
> >      QPointer<WebUI> m_webui;
> >  #endif
> > -    // FileLog
> > -    bool m_fileLogEnabled;
> > -    QPointer<FileLogger> m_fileLogger;
> 
> We do cleanup in Application::cleanup() instead of destructor. The reason
> is we need to control the shutdown process on Windows otherwise windows
> kills us aka unclean exit.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/qbittorrent/qBittorrent/pull/4681/files#r55938801.
"
56590764,4681,zeule,2016-03-17T22:49:31Z,"The variable may be removed, perhaps. `str << ""(I) ""` does not look worse than  `type = ""(I) ""`
"
56591131,4681,zeule,2016-03-17T22:53:10Z,"Shouldn't one call `str.flush()` here or delete the `str` object?
"
56591246,4681,zeule,2016-03-17T22:54:18Z,"'filelog'? a typo, perhaps?
"
56593180,4681,zeule,2016-03-17T23:14:31Z,"Why I'm not allowed to indent with tabs in this project? I like them so much!
"
56596867,4681,sledgehammer999,2016-03-17T23:57:53Z,"Hmm, you're probably right. I'll fix it.
"
56596935,4681,sledgehammer999,2016-03-17T23:58:40Z,"No. I want to indicate the file on disk. Do you have a better word?
"
56596980,4681,sledgehammer999,2016-03-17T23:59:20Z,"Because we have decided a long ago in 4-spaces indentation.
"
56639489,4681,zeule,2016-03-18T10:49:16Z,"Yes, I know, of course. Was joking after I've seen tab indentation in your code.
"
56740252,4681,sledgehammer999,2016-03-19T00:56:06Z,"Nope. That's 2 more spaces to make it 4 spaces in total.
"
56749151,4681,zeule,2016-03-19T13:32:25Z,"Oh, I was wrong. Excuse me my stupid joke, please.
"
56749253,4681,zeule,2016-03-19T13:43:36Z,"Agree with @LordNyriox , ""log file"" is perfectly fine.
"
56767950,4681,sledgehammer999,2016-03-20T17:17:17Z,"According to docs `endl` flushes the stream too.
"
56769315,4681,Chocobo1,2016-03-20T18:38:45Z,"maybe just pass-by-value? (for simple/primitive types)
"
56769517,4681,glassez,2016-03-20T18:52:38Z,"This always surprises me too.
"
56771230,4681,sledgehammer999,2016-03-20T20:22:34Z,"I can fix this. Is this the only thing about the PR?
"
56781110,4681,glassez,2016-03-21T04:11:21Z,"I haven't reviewed it after your last changes. I'll do it ASAP.
"
56781272,4681,zeule,2016-03-21T04:17:08Z,"What if `value == true` but `m_fileLogger != nullptr`?
"
56782151,4681,zeule,2016-03-21T04:44:12Z,"What this black magic is all about? Why not just:

``` C++
QDir dir (newPath);
dir.mkpath(newPath);
QString tmpPath = Utils::Fs::fromNativePath(dir.absoluteFilePath(""qbittorrent.log""));
```

?
"
56783458,4681,glassez,2016-03-21T05:24:17Z,"Why do you use non-Qt naming? Just `executionLogMsgTypes` as we usually did. This affects all this PR.
"
56783635,4681,glassez,2016-03-21T05:29:10Z,"+1
But `newPath` in first and second statements.
"
56783747,4681,glassez,2016-03-21T05:32:38Z,"+1
`else if (!value)`
"
56789229,4681,glassez,2016-03-21T07:57:28Z,"It is not necessary to put constants in an anonymous namespace.
"
56789320,4681,glassez,2016-03-21T07:59:00Z,"Just `Utils::Fs::QDesktopServicesDataLocation() + LOG_FOLDER` isn't enough here?
"
56789696,4681,glassez,2016-03-21T08:05:11Z,"Can you try `{ ""qbittorrent.log.bak*"" }` instead of `QStringList() << ""qbittorrent.log.bak*""`?
"
56790125,4681,glassez,2016-03-21T08:13:01Z,"Wouldn't it be easier if you put the file creation here, and deleting in `closeLogFile()`?
I know that in one place it will lead to we create it immediately after removal. For me, it's a small problem.
"
56790265,4681,glassez,2016-03-21T08:15:26Z,"`Log::ERROR` is defined by libtorrent?
"
56790375,4681,glassez,2016-03-21T08:17:06Z,"Why not in one line? It isn't so long.
"
56790467,4681,glassez,2016-03-21T08:18:52Z,"explicit isn't needed.

I'm sorry. Mobile GitHub is not working lately. All my comments are added in the wrong place.
"
56790626,4681,glassez,2016-03-21T08:21:15Z,"Log::ALL?
"
56816431,4681,zeule,2016-03-21T12:51:17Z,"But it saves one from typing 'static' in each line.
"
56821092,4681,zeule,2016-03-21T13:30:39Z,"@glassez: thank you, I'll fix the comment above.
"
56822742,4681,glassez,2016-03-21T13:42:08Z,"It is not necessary to prepend constants with `static`. Constants use internal linkage by default.
"
56856676,4681,sledgehammer999,2016-03-21T16:52:59Z,"I think it is cleaner this way, so I am leaving it.
"
56857036,4681,sledgehammer999,2016-03-21T16:55:07Z,"But since I am creating `inline SettingsStorage *settings()` I opted to put everything here too to reduce visual clutter.
I am leaving it as is.
"
56857131,4681,sledgehammer999,2016-03-21T16:55:33Z,"Oops. I am going to fix it.
"
56857312,4681,zeule,2016-03-21T16:56:42Z,"@glassez : Thank you!
"
56858445,4681,sledgehammer999,2016-03-21T17:02:49Z,"I am not sure what you guys are talking about. There is an agreed rule to use internally paths with ""/"" instead of ""\"" even if the called functions understand both(like QDir). Or are you talking about something else entirely?
"
56858691,4681,sledgehammer999,2016-03-21T17:04:28Z,"+1 I think I just blindly copied it from something else in Preferences.
"
56859066,4681,zeule,2016-03-21T17:06:39Z,"I'm talking about lines 66 – 71 (6 in total). They can be replaced with 3 lines. And I do not understand what is is reason behind lines 67 and 68. 
"
56859184,4681,sledgehammer999,2016-03-21T17:07:22Z,"I changed it to:

``` c++
foreach (const QFileInfo file, dir.entryInfoList({ ""qbittorrent.log.bak*"" }, QDir::Files | QDir::Writable, QDir::Time | QDir::Reversed)) {
        if (file.lastModified() < date)
            break;
        Utils::Fs::forceRemove(file.absoluteFilePath());
    }
```

But I get:

> src\app\filelogger.cpp:101: error: C1075: the left brace '{' was unmatched at the end of the file
"
56859308,4681,sledgehammer999,2016-03-21T17:07:55Z,"I ignored this, but ok I'll do it.
"
56860089,4681,sledgehammer999,2016-03-21T17:19:23Z,"I thought you were right and this was a leftover from my initial implementation. But after changing it I get these cryptic messages from msvc:

```
src\base\logger.h:19: error: C2059: syntax error: 'constant'
src\base\logger.h:19: error: C3805: 'constant': unexpected token, expected either '}' or a ','
```
"
56860208,4681,sledgehammer999,2016-03-21T17:20:11Z,"OK. It was something else before. I am changing it.
"
56860428,4681,sledgehammer999,2016-03-21T17:21:49Z,"I think I had a dirty build dir before. Now a clean build give me this error:

```
src\app\application.cpp:148: error: C2664: 'QVariant SettingsStorage::loadValue(const QString &,const QVariant &) const': cannot convert argument 2 from 'QStringBuilder<QString,QString>' to 'const QVariant &'
src\app\application.cpp:148: error: C2228: left of '.toString' must have class/struct/union
```
"
56860559,4681,sledgehammer999,2016-03-21T17:22:39Z,"OK, I'll remove it.
"
56860857,4681,sledgehammer999,2016-03-21T17:24:26Z,"Oops. That was before I added the Log::ALL.
PS: I should remove the `explicit` keyowrd too, right?
"
56860969,4681,sledgehammer999,2016-03-21T17:24:59Z,"ok
"
56861558,4681,glassez,2016-03-21T17:28:08Z,"> I should remove the explicit keyowrd too, right?

No. Not here, because we have the ability to call the constructor with one parameter.
"
56861980,4681,sledgehammer999,2016-03-21T17:30:24Z,"> @glassez : Thank you!

!?!?!

If you guys think it is better, I can leave them out of the namespace...
"
56862042,4681,glassez,2016-03-21T17:30:48Z,"Apparently, the constant from libtorrent still interferes here.
"
56862621,4681,sledgehammer999,2016-03-21T17:33:48Z,"Line 66 makes the path look as ""c:/test"" instead of ""c:\test"". The user might have edited the ini file and put the path with ""\"" characters. So I am enforcing here the rule I talked about previously.
Lines 67-68 append missing ""/"" because at line 71 we append the filename.
"
56862882,4681,glassez,2016-03-21T17:35:26Z,"Weird. What does `QStringBuilder<QString,QString>`? `operator+(const QString &, const QString &)` must return `const QString()` according to the documentation.
"
56863659,4681,sledgehammer999,2016-03-21T17:39:39Z,"I don't know :S
"
56864018,4681,glassez,2016-03-21T17:41:49Z,"Weird... Then you can leave it as is or make it slightly shorter: `QStringList(""qbittorrent.log.bak*"")`.
"
56864566,4681,zeule,2016-03-21T17:44:58Z,"Thank you, but why to do that manually with two lines of code, if you can invoke `QDir::absoluteFilePath()`?
"
56865146,4681,glassez,2016-03-21T17:48:12Z,"> @glassez : Thank you!

We share with @evsh the missing knowledge :) Apparently, it's for this.
"
56865837,4681,zeule,2016-03-21T17:52:26Z,"Yes
"
56866366,4681,sledgehammer999,2016-03-21T17:55:12Z,"Ok, I'll drop the if block and use QDir::absoluteFilePath() instead.
"
56866574,4681,sledgehammer999,2016-03-21T17:56:21Z,"So is it ok to leave all these inside the namespace for visual clarity?
"
56866973,4681,zeule,2016-03-21T17:58:24Z,"@sledgehammer999 , I don't think that without namespace the code will be better. I, personally, like anonymous namespace because they make intents exceptionally clear. One will not think whether there are any `extern` declarations, declarations in a header file, or so.
"
56868075,4681,sledgehammer999,2016-03-21T18:04:13Z,"OK. I think we're wasting time talking more about this.
"
56882587,4681,glassez,2016-03-21T19:34:00Z,"> So is it ok to leave all this inside the namespace for visual clarity?

Yes. But `#define` looks ugly here. Anyway, it caught my eyes initially.
"
64984317,5310,Chocobo1,2016-05-28T05:21:18Z,"1. maybe faster & more bulletproof
   
   ``` c++
   QString &octet = octets[i];
   octet.remove(0, octet.size() - 3);  // just to be safe if someone manually edit the list and made a mistake
   ```
2. for consistency use `++i`
"
64984478,5310,Chocobo1,2016-05-28T05:39:03Z,"~~or use `QStringRef` instead of `QString` when manipulating.~~
bad idea, hard to use.
"
64984546,5310,Chocobo1,2016-05-28T05:49:35Z,"~~minor thing~~ ah... forget it, you seem to use `_ip` all over the place.

``` c++
bool parseIPAddress(const QString &_ip, libt::address &address)
{
    // ...
    QStringList octets = _ip.trimmed().split('.', QString::SkipEmptyParts);
    ...
}
```
"
65273520,5310,zeule,2016-05-31T22:19:44Z,"Might be faster to put the parser outside of this function, which most likely will be inlined. 
"
65273815,5310,zeule,2016-05-31T22:21:50Z,"Parser version which returns bool didn't suit?
"
65274119,5310,zeule,2016-05-31T22:24:32Z,"You check for `start < data.size()`, but access `start + 1`th element.

Added: for these kinds of tasks it is better to allocate buffer of size n+1 (and to put 0 in the last element) when you are going to read n elements, instead of complicating checks. Just one more argument to read by fixed size chunks.
"
65275195,5310,sledgehammer999,2016-05-31T22:34:30Z,"I have tested it, but it actually is slower (about 50-60 ms)!!!
"
65275278,5310,sledgehammer999,2016-05-31T22:35:09Z,"I just had the older version lying around.
"
65275349,5310,zeule,2016-05-31T22:35:50Z,"The implementation of `parseIPAddress()` above does not need trimmed from end string to parse the address. Anyway, since the buffer is writable, you can just put zeroes in place of delimiters instead of copying the string.
"
65275375,5310,zeule,2016-05-31T22:36:05Z,"`strsep()`
"
65275383,5310,sledgehammer999,2016-05-31T22:36:11Z,"+1. I was sure I would be missing some checks.
"
65275529,5310,zeule,2016-05-31T22:37:38Z,"Can't understand: you check for `delimIndices.size() > 0`, but access `delimIndices[1]`
"
65275797,5310,zeule,2016-05-31T22:40:18Z,"Your compiler does not inline `parseIPAddress()`?
"
65276118,5310,zeule,2016-05-31T22:43:13Z,"[main.zip](https://github.com/qbittorrent/qBittorrent/files/292320/main.zip)
"
65279292,5310,zeule,2016-05-31T23:17:00Z,"On the second though this does not matter. Creating DATIPv4Parser is as simple as  incrementing the stack pointer. It is not surprising therefore that the code with local variable performs better.
"
112802768,5310,Chocobo1,2017-04-22T04:55:21Z,redundant empty line?
112802984,5310,glassez,2017-04-22T05:13:25Z,Fix coding style.
112802988,5310,glassez,2017-04-22T05:13:45Z,Fix coding style.
112803002,5310,glassez,2017-04-22T05:14:56Z,Fix coding style (spaces around `<=` operator).
112803013,5310,glassez,2017-04-22T05:15:40Z,Fix coding style.
112803076,5310,glassez,2017-04-22T05:19:19Z,I would move this empty line one line up (to separate break statement from the rest).
112803093,5310,glassez,2017-04-22T05:20:37Z,Too long line.
112803099,5310,glassez,2017-04-22T05:21:09Z,Too long line.
112803102,5310,glassez,2017-04-22T05:21:49Z,Split this line.
112803104,5310,glassez,2017-04-22T05:22:04Z,Split this line.
112803114,5310,glassez,2017-04-22T05:23:07Z,Add space after `catch`.
112803120,5310,glassez,2017-04-22T05:23:25Z,Too long line. Isn't it?
112803129,5310,glassez,2017-04-22T05:24:12Z,Split this line too.
112803142,5310,glassez,2017-04-22T05:25:04Z,Most of these lines (logger messages) are too long.
112803156,5310,glassez,2017-04-22T05:26:17Z,"Too long line. Unlike one line above, that can be joined with previous one."
112803162,5310,glassez,2017-04-22T05:26:49Z,Same here.
112803174,5310,glassez,2017-04-22T05:28:07Z,Please add space after `catch`.
112803260,5310,glassez,2017-04-22T05:34:42Z,Too long line.
112803296,5310,glassez,2017-04-22T05:37:19Z,"Although I've done it several times before, but now I doubt it. @evsh, is there any sense to forward declare templates?"
112803321,5310,glassez,2017-04-22T05:38:40Z,Is it needed somewhere?
112804082,5310,Chocobo1,2017-04-22T06:39:47Z,IMO the `static` is redundant here.
112804169,5310,Chocobo1,2017-04-22T06:48:07Z,still need this?
112804202,5310,Chocobo1,2017-04-22T06:51:50Z,~~can you put a upper limit for this?~~ not relevant anymore.
112810799,5310,zeule,2017-04-22T14:26:27Z,"For readability improvement this variable should be renamed, probably. What about `numberIndex`?"
112810809,5310,zeule,2017-04-22T14:27:01Z,And might want to check `errno` here as well.
112810888,5310,zeule,2017-04-22T14:31:24Z,"With `QByteArray` type of argument, you are copying the memory, right? Does it make sense to use the read buffer then?"
112810904,5310,zeule,2017-04-22T14:32:10Z,"Smart pointer, please."
112810914,5310,zeule,2017-04-22T14:32:43Z,Why this is needed?
112814474,5310,zeule,2017-04-22T17:34:01Z,Aren't you loosing here buffer[0:offset-1] part?
112818012,5310,zeule,2017-04-22T20:24:55Z,Why don't we log the exception message too?
112833219,5310,zeule,2017-04-23T12:56:56Z,I could  write code without memory allocations. But just for fun and thus later.
112849622,5310,sledgehammer999,2017-04-24T00:41:23Z,I don't want to re-initialize the variable each time we parse the filter.
112849654,5310,sledgehammer999,2017-04-24T00:42:45Z,In this case `errno` is only set if the value goes out of range. Both limits are handled with the existing checks.
112849719,5310,sledgehammer999,2017-04-24T00:44:37Z,I couldn't figure out a way to make strtol (and address_v6::from_string) to look only in a portion of the buffer.
112849738,5310,sledgehammer999,2017-04-24T00:45:20Z,shared_ptr doesn't seem to work with arrays out of the box. And I think I have covered all cases here for deleting the pointer.
112849813,5310,sledgehammer999,2017-04-24T00:47:19Z,"I can't remember the exact reason because this is part of my previous old attempt. I think I do just to make sure there aren't garbage data after our move of the remaining data to the front of the buffer. (In case the parsing goes past the end of the read data).
I could remove it if you think this is superfluous."
112849870,5310,sledgehammer999,2017-04-24T00:48:49Z,"Please explain in more detail. I can't understand what you mean by `buffer[0:offset-1]`
Keep in mind that I check the return value of ""file.read()"" which is `0` on file end and `-1` on error."
112849919,5310,sledgehammer999,2017-04-24T00:50:24Z,"I am not what you mean exactly...
The only memory allocations I see for this function is the std::vector and the ints that hold the indices."
112850021,5310,sledgehammer999,2017-04-24T00:53:42Z,"Yes. Without it I get:
>QObject::connect: Cannot queue arguments of type 'Log::Msg'

in the console during runtime."
112861848,5310,glassez,2017-04-24T04:02:03Z,Exactly. You use logger from another thread.
112862319,5310,glassez,2017-04-24T04:11:14Z,"OFFTOPIC
I would add `Log()` function to ""logger.h"" and use Logger::instance() there. And in the client code just do `Log(message, type);`."
112864086,5310,Chocobo1,2017-04-24T04:36:34Z,"with `static` or without, the variable is deemed to be optimized out by the compiler

http://stackoverflow.com/a/27466684  (case 1)
https://en.wikipedia.org/wiki/Constant_folding
"
112892246,5310,zeule,2017-04-24T08:42:40Z,"Right, that is why I again suggest you to use `strsep()`  first instead of collecting delimiter positions."
112892948,5310,zeule,2017-04-24T08:46:27Z,"```c++
std::unique_ptr<char[]> buffer(new char[bufferSize]);
```
which might be replaced with
```c++
std::vector<char> buffer(0, bufferSize);
```
"
112893893,5310,zeule,2017-04-24T08:51:19Z,"The line was making me think that there is something which I don't understand, because this part of the buffer will be overwritten below. I would ask for a note there, please, if you decide to keep this just in case."
112896207,5310,zeule,2017-04-24T09:02:29Z,"I think the following may happen: consider a file where the last line is not terminated with '\n'. Then this line will go into this spillover, `QFile::read()` returns 0 and we ignore it. That is why I prefer to replace newline characters with '\0' as well. [Here](https://gist.github.com/evsh/5b3b6f65c8127e759cd6db329a4ab214) is an example. Extracted from a component that reads and parses ASCII tables of much larger size, however. "
112896375,5310,zeule,2017-04-24T09:03:22Z,Aren't you copy strings into `QByteArray`s?
112896621,5310,zeule,2017-04-24T09:04:25Z,"I'm very late with this, of course, but wouldn't `Log(type, message)` be a better signature?"
113093017,5310,sledgehammer999,2017-04-25T01:49:48Z,After I do the .p2p refactoring I'll transfer this inside the anonymous namespace so it can be accessed by both parsing functions.
113093115,5310,sledgehammer999,2017-04-25T01:51:14Z,"having the type parameter last allows to have a default value, like Logger::addMessage() does."
113093270,5310,sledgehammer999,2017-04-25T01:53:19Z,"This is a worst case scenario and will trigger only one reallocation during each parsing of the ""faulty"" file at the end of the file.
I don't consider this scenario to be prevalent.

Do you have any other suggestion?"
113102068,5310,Chocobo1,2017-04-25T03:49:57Z,ok
113146629,5310,zeule,2017-04-25T09:28:27Z,"This loop can be shortened into (not insisting):
```c++
buffer[dataSize] = 0; // will do no harm anyway
char* end = &buffer.front();
::strsep(end, ""\n"");
endOfLine = end - &buffer.front(); // which is hardly needed
```"
113147832,5310,zeule,2017-04-25T09:33:43Z,Get it out of the loop (cleanliness and performance)
113148119,5310,zeule,2017-04-25T09:35:07Z,"Read buffer.size() -1 characters, make buffer[buffer.size() -1] = 0 from the very beginning."
363149053,11833,sledgehammer999,2020-01-06T03:41:07Z,`files.size() < 11` this is a random constraint I put here.
363156038,11833,Chocobo1,2020-01-06T04:37:25Z,This shouldn't be static anyway. A static variable is going to reside in memory for the whole program lifetime.
363156352,11833,Chocobo1,2020-01-06T04:40:04Z,The constructor seems redundant to me or use QString::fromUtf8.
363156695,11833,Chocobo1,2020-01-06T04:42:59Z,"maybe just me, I would rather not mix qt types with std types, i.e. just write `unsigned char` here."
363156758,11833,Chocobo1,2020-01-06T04:43:35Z,perhaps it is better to use `unsigned char` for this variable?
363156789,11833,Chocobo1,2020-01-06T04:43:49Z,redundant empty line here.
363157165,11833,Chocobo1,2020-01-06T04:47:37Z,you should make use of sizeof().
363157750,11833,Chocobo1,2020-01-06T04:51:45Z,"Seeing checks for nullptr in every method is a bit annoying, can't you just throw exception in the constructor instead?"
363158388,11833,Chocobo1,2020-01-06T04:56:52Z,"this should be `int`. 
https://www.reddit.com/r/cpp/comments/7y0o6r/is_it_a_good_practice_to_use_unsigned_values/ductv0f/"
363158484,11833,Chocobo1,2020-01-06T04:57:48Z,here is the bad sign: need to cast unsigned int to signed int.
363158888,11833,Chocobo1,2020-01-06T05:01:13Z,"On a second thought, maybe you should use QByteArray as the building block and not a char pointer. A QByteArray should be safer and have many convenience functions."
363159092,11833,Chocobo1,2020-01-06T05:02:42Z,would be simpler if you just assigned `*ok = false;` at the top of this function.
363159127,11833,glassez,2020-01-06T05:02:56Z,Do you really need to store it between function calls?
363159397,11833,glassez,2020-01-06T05:05:03Z,Either put entire declaration into one line or split these braces too.
363160131,11833,glassez,2020-01-06T05:10:35Z,"Many memory access operations use `char`, unless I'm wrong..."
363183273,11833,glassez,2020-01-06T07:28:01Z,">just write unsigned char here.

Never like these ugly c++ multiword type names."
363238761,11833,sledgehammer999,2020-01-06T10:31:50Z,"The purpose was to be efficient in initializing/allocating memory.
This is what is alluded here: https://stackoverflow.com/questions/6938219/how-to-check-whether-all-bytes-in-a-memory-block-are-zero

If the above doesn't really matter, then should I do this?
```c++
const char testBlock[2 * TAR_HEADER_SIZE] = {};
```"
363239169,11833,sledgehammer999,2020-01-06T10:33:08Z,See my rationale https://github.com/qbittorrent/qBittorrent/pull/11833/files#r363238761
363240345,11833,sledgehammer999,2020-01-06T10:36:39Z,">maybe you should use QByteArray as the building block and not a char pointer

I don't want a unnecessary memory copies. If I had ""buffer view"" equivalent of std::string_view then I would use it."
363241196,11833,sledgehammer999,2020-01-06T10:39:08Z,Edited previous comment.
363255075,11833,sledgehammer999,2020-01-06T11:23:15Z,I like the shorthand too. Plus I changed to signed int to the other place. Should I change this to (signed) char? Or should I go full (signed) int here too?
363255463,11833,glassez,2020-01-06T11:24:48Z,`QByteArray:fromRawData()` doesn't copy anything.
363258986,11833,glassez,2020-01-06T11:35:57Z,I would use int.
363260512,11833,sledgehammer999,2020-01-06T11:41:36Z,">QByteArray:fromRawData() doesn't copy anything.

Hmm, correct. But as I see it, the only useful ""convenience"" function is `QByteArray::mid()`.
Should I proceed with QByteArray?"
363263621,11833,glassez,2020-01-06T11:51:44Z,"<del>IMO, it's not so good idea to copy some memory just to check for buffer end. Why not perform integer calculations instead?</del>"
363264302,11833,glassez,2020-01-06T11:54:01Z,">the only useful ""convenience"" function is `QByteArray::mid()`.

 `QByteArray::size()` is very useful, isn't it?
>Should I proceed with QByteArray?

IMO, Yes."
363267251,11833,sledgehammer999,2020-01-06T12:04:47Z,"The other way I see it, is just loop in the buffer and check each byte for zero. But the SO answers say that his might not be optimal/efficient.

If there is another way, please give an example."
363274482,11833,glassez,2020-01-06T12:30:49Z,Oops... It's `memcmp`! Forget my previous comment.
363279302,11833,sledgehammer999,2020-01-06T12:47:16Z,"on another tought, what do you say about using `libtorrent::string_view` here? Added benefit, it indicates to the caller ""dude keep the buffer alive"" and ensures no accidental memory copy.

`libtorrent::string_view` basically uses boost's implementation."
363290143,11833,Chocobo1,2020-01-06T13:22:01Z,">I don't want a unnecessary memory copies. If I had ""buffer view"" equivalent of std::string_view then I would use it.

We have `Utils::ByteArray::midView()`"
363300045,11833,Chocobo1,2020-01-06T13:49:54Z,">If the above doesn't really matter, then should I do this?

Yeah. 
If using QbyteArray you can use this constructor QByteArray::QByteArray(int size, char ch) and compare them with QByteArray::startsWith(const QByteArray &ba) or `==`."
363302310,11833,Chocobo1,2020-01-06T13:55:45Z,">Should I change this to (signed) char?

Seem yes, based on ""typeflag field"" definition on https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html and wikipedia.
Weird that they used `char` as the type there."
363304695,11833,Chocobo1,2020-01-06T14:01:44Z,">on another tought, what do you say about using libtorrent::string_view here? 

Off-topic:
IMO string_view is more suitable for... well ""strings"" (ascii or utf-x variants). It is not the case here.
Here you operate on bytes which (I think) std::span in c++20 is the better matching counterpart."
363318867,11833,sledgehammer999,2020-01-06T14:37:15Z,">IMO string_view is more suitable for... well ""strings"" (ascii or utf-x variants). It is not the case here.

IMO, it's fine if you use it as generic container (no string specific methods called)

>Here you operate on bytes which (I think) std::span in c++20 is the better matching counterpart.

Then, I could use `libtorrent::span`"
363380220,11833,glassez,2020-01-06T16:49:49Z,"IMO, libtorrent utils (including the types meantioned above) can't be considered as stable enough from lifetime perspective. But if `libtorrent::span` has interface similar to c++20 one then we can use it so we can easily switch to c++20 in future just by changing `lt::` to `std::`. Or we can even declare alias in our own namespace (e.g. `Utils::Span`) currently for libtorrent span and then change it to std span."
363390607,11833,sledgehammer999,2020-01-06T17:13:17Z,">IMO, libtorrent utils (including the types meantioned above) can't be considered as stable enough from lifetime perspective.

I don't know if I understood you correctly, but libtorrent::span is public API and is used in other public API as a type.

>But if libtorrent::span has interface similar to c++20 one then we can use it so we can easily switch to c++20 in future just by changing lt:: to std::

Exactly and it does have similar interface.

I was just ready to jump on using lt::span and then I realized we also support RC_1_1 :disappointed: 
(it isn't available there)"
363393598,11833,glassez,2020-01-06T17:20:42Z,">I was just ready to jump on using lt::span and then I realized we also support RC_1_1 😞
(it isn't available there)

We can either drop RC_1_1 support or incorporate libtorrent span sources into qBittorrent sources for some time."
363393807,11833,sledgehammer999,2020-01-06T17:21:14Z,"I think I have a better alternative to test for EOF (and possibly gracefully handle garbage archives/data):

As mentioned, a tar archive looks like this `header+filedata+header+filedata+...+empty header+empty header`
Each time we are finished with a file we are expecting either a normal header or at least 2 empty ones. And the first field on a valid header is the filename field.
So why not check if the 1st byte in the header is null, and if yes treat it as EOF?"
363393877,11833,glassez,2020-01-06T17:21:24Z,Or just use QByteArray.
363395181,11833,glassez,2020-01-06T17:24:36Z,">I don't know if I understood you correctly, but libtorrent::span is public API and is used in other public API as a type.

Other types can be used in further versions of libtorrent so it stops to provide its own ones."
363398180,11833,glassez,2020-01-06T17:32:15Z,">As mentioned, a tar archive looks like this `header+filedata+header+filedata+...+empty header+empty header`

Very strange way of indicating the end of the file. It is clear that the ""real"" end of the file could not be used, because it was designed for streaming media, but why two empty headers and not one? And what really about not empty header but just invalid?"
363399962,11833,glassez,2020-01-06T17:37:01Z,">So why not check if the 1st byte in the header is null, and if yes treat it as EOF?

At least we can use simplified algorithm.
1. If next byte is not null try to load header and so on...
2. If next byte is null stop processing (but check whether there's valid EOF to distinguish between correct/broken files)."
363403430,11833,sledgehammer999,2020-01-06T17:46:23Z,">If next byte is not null try to load header and so on...

Even if next byte is not null, we can't really extract a filename from that. There isn't supposed to be padding* between filedata and the next header.

*padding exists at the end of filedata to pad to full 512bytes block.

>but check whether there's valid EOF to distinguish between correct/broken files

Hmm, this check needs to done inside `TarFile::fileData()`. But a variation of it. Not detect null bytes but actually test that there is enough space left in the buffer for the filesize indicated by the header."
363404337,11833,sledgehammer999,2020-01-06T17:48:41Z,"Yeah I am leaning with QByteArray too.
Btw, there are 3rd party span implementations that are header only. This is only for FYI. I am not advocating in including them just for this."
363412961,11833,glassez,2020-01-06T18:10:43Z,">Even if next byte is not null, we can't really extract a filename from that. 

I mean first byte of (possible) next header.
E.g.:
1. Try to load header.
2. If there isn't enough data - error.
3. Perform the ""optimize"" check for null in first byte of header.
4. If it is null, check for correct EOF at this position. If there's no valid EOF - error.
5. If it isn't null try to parse header and perform other checks on it. If header is invalid - error.
6. Try to load file.
7. If there isn't enough data - error.
8. Perform some checks on file data (e.g. checksum comparison). If it fails - error.
9. Try to shift to next header (i.e. skip padding). If there's no enough data - error.
10. Start from beginning.

Have I missed something? I didn't read full format specs."
364037825,11833,sledgehammer999,2020-01-08T02:13:10Z,Should I construct the QByteArray here using fromRawData() for extra efficiency?
364039847,11833,sledgehammer999,2020-01-08T02:23:06Z,Note to self: Must check that there are `fileSize` bytes in the buffer.
364074319,11833,glassez,2020-01-08T05:58:41Z,Tar isn't compressor...
364074616,11833,glassez,2020-01-08T06:00:23Z,Redundant empty line.
364075133,11833,glassez,2020-01-08T06:03:30Z,"I would use integral constant here instead:
```c++
REG_FILE_NULL = 0,
```"
364075300,11833,glassez,2020-01-08T06:04:23Z,explicit 
364076258,11833,glassez,2020-01-08T06:09:21Z,"I would prefer to see null character as 0 (unless you need to have it in some string literal alongside with regular characters, e.g. ""some text\0"")."
364076746,11833,glassez,2020-01-08T06:12:12Z,"`m_header.startsWith(0)` looks better, IMO."
364078293,11833,glassez,2020-01-08T06:20:24Z,"It's a bad practice to mix different kind of error handling in the same class. You should use either exceptions (i.e. don't allow to create invalid class at all) or ""valid"" property (but then you shouldn't throw in constructor)."
364079937,11833,glassez,2020-01-08T06:29:03Z,"Isn't ""checksum"" field null in null header?"
364087813,11833,glassez,2020-01-08T07:07:03Z,Redundant empty line.
364089114,11833,glassez,2020-01-08T07:12:22Z,It's wrong. Here you just unpacking some tar archive (it's abstract utility function). You should perform any logging at the application level.
364089615,11833,glassez,2020-01-08T07:14:25Z,It's weird to see such limitation in abstract utility function... does tar format limit it in this way?
364091017,11833,glassez,2020-01-08T07:20:29Z,"```c++
const int len = str.indexOf(0);
return (len >= 0) ? len : str.length();
```"
364091591,11833,glassez,2020-01-08T07:22:37Z,"Maybe declare it as `Utils::ByteArray::strlen()`?
Anyway I dislike ""custom"" prefix here."
364092345,11833,glassez,2020-01-08T07:25:45Z,"It's better to use exceptions instead of ""ok"". Then you can provide more error info to the caller side."
364093739,11833,glassez,2020-01-08T07:31:15Z,You can't (shouldn't) do it! Then returned data is valid only until input data isn't disposed.
364122513,11833,glassez,2020-01-08T08:59:02Z,When you split conditions operator should appear in next line
364125060,11833,glassez,2020-01-08T09:05:11Z,"IMO, log message in wrong place (under wrong condition). When user doesn't provide license key we shouldn't even trigger database update.
The only valid error case is when user enables ""resolve peer country"" feature but there are no license key or db file provided."
364125378,11833,glassez,2020-01-08T09:06:00Z,Please enclose subexpressions.
364126542,11833,glassez,2020-01-08T09:08:52Z,"```c++
if ((m_enabled == enabled) && (m_dbCompleteUrl == dbCompleteUrl))
     return;
```"
364539040,11833,LordNyriox,2020-01-09T02:51:53Z,"@glassez:  According to @sledgehammer999's comment on an earlier version of this code: 

> `files.size() < 11` this is a random constraint I put here. 

**Source:**  [<https://github.com/qbittorrent/qBittorrent/pull/11833#discussion_r363149053>] "
364546320,11833,glassez,2020-01-09T03:34:07Z,"@LordNyriox, sorry, what do you want to say me? I saw that comment."
364842125,11833,glassez,2020-01-09T16:38:08Z,"I'm sorry, I can't understand what you're trying to explain to me...
I understand the meaning of word ""random"" (and even what it means *in this context*), as well as what and why @sledgehammer999 wants to do here. I'm just pointing out the fact that it was done in the wrong place (at the wrong level of logic). That's all."
364843499,11833,glassez,2020-01-09T16:40:39Z,Also please read https://github.com/qbittorrent/qBittorrent/pull/11833#issuecomment-571931231.
364935655,11833,sledgehammer999,2020-01-09T20:04:30Z,renamed to `untar()`
364936431,11833,sledgehammer999,2020-01-09T20:06:26Z,"Other functions require passing the `'\0'` literal because of the compiler. It doesn't know which overload to call (eg for startsWith()).
Furthermore, in the spec these are treated as ASCII values, so for keeping things uniform, I will leave it as ASCII NUL. "
364936679,11833,sledgehammer999,2020-01-09T20:07:00Z,compiler considers it an ambiguous call.
364937415,11833,sledgehammer999,2020-01-09T20:08:49Z,"I took another approach. Please take a look.
We need to differentiate between fully Null entry and an malformed one.
If you can come up with another way, let me hear it."
364938905,11833,sledgehammer999,2020-01-09T20:12:30Z,"Something that you might not know: When checksum is calculated the bytes belonging to the `checksum` header are considered to have each the value 32 (ASCII space).
So in a fully null header the `calculatedChecksum` variable will have the value (8 * 32) AND the stored checksum in the checksum field (from `checkSum` variable) will have the value 0."
364939193,11833,sledgehammer999,2020-01-09T20:13:16Z,"I removed this ""security"" constraint in the new code."
364939401,11833,sledgehammer999,2020-01-09T20:13:51Z,I took another approach. Have a look.
365057034,11833,Chocobo1,2020-01-10T03:12:51Z,"This is copying the data, you should avoid it.
Generally speaking, no-copy is the key for building fast applications and a requirement for modern apps IMO."
365057779,11833,Chocobo1,2020-01-10T03:17:11Z,"I know this was discussed before. However I would still like the returned values to be QByteArray views.
Adding a comment about this function is returning a view (that the input `data` is required to be alive in client code in order for the returned value to be meaningful) would suffice for me. And then the return type will be expected to become `QHash<QString, const QByteArray>`"
365058137,11833,Chocobo1,2020-01-10T03:19:19Z,"This can be extracted to anonymous namespace.
And `int strlen(const QByteArray &str)` too."
365058298,11833,Chocobo1,2020-01-10T03:20:29Z,"IMO better differentiate the name with std::strlen() to avoid confusion.
You can use full name `firstStringLength()` or whatever something like that."
365059054,11833,Chocobo1,2020-01-10T03:24:44Z,"Regarding `m_null`, `m_valid`, `m_verified`. Does these status intersect? I mean is it possible to have any two of them to be true at the same time?
If not it is better to tie them together into a separate type."
365137172,11833,glassez,2020-01-10T09:18:27Z,">no-copy is the key for building fast applications and a requirement for modern apps IMO.

It also provides many opportunities for errors to occur.
It is especially dangerous to return such ""references"" to the internal data of the class (this is generally unacceptable and is a design error, IMO). One exception is when class instance operates on some outer data (so caller side owns this data and cares about its lifetime and lifetime of ""references"" into it).
So if you really want to implement ""no-copy"" optimization you need to think a hundred times about all the details of the implementation, in order to protect the caller as much as possible."
365138147,11833,glassez,2020-01-10T09:20:59Z,I would make TarStreamReader public instead of (or in addition to) this wrapper.
365140730,11833,glassez,2020-01-10T09:26:56Z,TarEntryHeader is better name.
365171623,11833,glassez,2020-01-10T10:37:01Z,"These two method names are ambiguous. They should be ""fileType"" and ""fileSize""."
365174840,11833,glassez,2020-01-10T10:44:27Z,This class has inconsistent internal behavior. Why do you parse header partially when create instance and then parse the rest on demand? I see no point in this.
365185241,11833,Chocobo1,2020-01-10T11:11:14Z,">It also provides many opportunities for errors to occur.

Yes and I would hope/expect there will be nicely designed class interface to avoid that.

Offtopic I think is worth sharing, here is a library (in rust lang) that implements a tar reader: https://github.com/alexcrichton/tar-rs#reading-an-archive (ignore the `unwrap()` for easier reading)
You can see a `File` object is passed to `tar::Archive` constructor and thus (normally) the tar reader won't outlive the `File` lifetime.

(more offtopic) And another nice thing that library has:
From https://docs.rs/tar
>Great strides are taken to ensure that an archive is never required to be fully resident in memory, and all objects provide largely a streaming interface to read bytes from."
365204571,11833,sledgehammer999,2020-01-10T12:07:19Z,">One exception is when class instance operates on some outer data (so caller side owns this data and cares about its lifetime and lifetime of ""references"" into it).

In case it wasn't clear: The buffer with the tarred data is given by the caller of `Utils::Tar::untar()`."
365205211,11833,sledgehammer999,2020-01-10T12:09:19Z,">Why do you parse header partially when create instance and then parse the rest on demand?

What do I do partially? You mean the chechsum check and null check?

If I parse the rest on ctor, that means I would have to have extra member variables to hold a copy of the data."
365206378,11833,sledgehammer999,2020-01-10T12:13:05Z,"Maybe I could merge `m_valid` and `m_verified`. Now `m_valid == true` only when the first byte isn't null. And `m_verified == true` when the checksum is correct. This allows to have more specific error output. But I could merge those 2 so `m_valid == true` only when 1st byte != null AND checksum is correct.

`m_null == true` when all bytes are null. It is used a special marker for EOF. I don't think I can combine it with the other 2 bools."
365282671,11833,glassez,2020-01-10T15:17:38Z,"Header can be either Invalid, Null or Regular so you just need enum with 3 values."
365286070,11833,glassez,2020-01-10T15:24:33Z,">If I parse the rest on ctor, that means I would have to have extra member variables to hold a copy of the data.

What's the problem with it? If header is invalid (or null) they will be empty. If header is valid you still copy this data when access it from caller side (since it's pointless to create this object and then never access its fields)."
365338042,11833,glassez,2020-01-10T17:09:02Z,">Yes and I would hope/expect there will be nicely designed class interface to avoid that.

There is no way to avoid that. You can only warn about the danger (in code comments) and hope that caller can correctly handle it."
365339494,11833,glassez,2020-01-10T17:12:11Z,">You can see a File object is passed to tar::Archive constructor and thus (normally) the tar reader won't outlive the File lifetime.

File stream reading is different thing so let's not consider it here."
365400113,11833,sledgehammer999,2020-01-10T19:41:27Z,">What's the problem with it?

Increased class size.
I want to stay with the parse-on-demand approach and not have unnecessary copies of data laying around. Something akin to `bedecode_token/bedecode_node` (somewhat inspired by [this](https://blog.libtorrent.org/2015/03/bdecode-parsers/))

Usually the user of the class will call only once each method and store the result. So why make the class also store a copy?"
365470599,11833,sledgehammer999,2020-01-10T23:31:36Z,"I may be wrong, but in addition to leaving a code comment we could do this:
```c++
QHash<QString, QByteArray> untar(const QByteArray &&, QString &) = delete;
```

This will ensure that the caller will have a non-temporary buffer. It will fail only if he does weird things in the calling site and its buffer goes out of scope before the return value. eg something like this:
```c++
void callingSite()
{
    QHash<QString, QByteArray> files;

    {
        QString error;
        const QByteArray tarred = getTarredData();
        files = Utils::Tar::untar(tarred, error);
    }

    write_to_disk(files.at(0)); // undefined behavior
}
```"
365492628,11833,Chocobo1,2020-01-11T02:34:24Z,">File stream reading is different thing so let's not consider it here.

That is just one instance of the `Read` trait. IMO the library is still valuable as a reference when designing class interface (more or less) as the essence isn't all that different.

>>Yes and I would hope/expect there will be nicely designed class interface to avoid that.
>
>There is no way to avoid that. 

There is always ways to shoot oneself in the foot in c++ but a good interface will make it hard to do so.

>I may be wrong, but in addition to leaving a code comment we could do this:

Yeah, that will help a bit. Although there are still easy ways to go wrong:
```c++
QByteArray *tarred = new QByteArray();  // quite insane...
getTarredData(tarred);

QString error;
QHash<QString, QByteArray> files = Utils::Tar::untar(*tarred, error);

delete tarred;
write_to_disk(files.at(0));  // undefined behavior
```
"
365501411,11833,glassez,2020-01-11T05:31:10Z,">Usually the user of the class will call only once each method and store the result.

No problem (unless you need to call some of them twice).
But in this case the class itself becomes redundant (now it is like a ""thing in itself"" that only takes care of its own invariant in each method). You can easily apply any parsing function on header data separately."
365531126,11833,glassez,2020-01-11T16:54:55Z,"I would still insist on making this parser as more generic as possible (as long as it does not require excessive effort). Just return ""type"" as is (maybe just expanding it to `int` as discussed earlier). Let upper level decide whether it should care about some file type or not."
365531624,11833,glassez,2020-01-11T17:05:42Z,"Looks suspicious. IMO, you provide some kind of undefined behaviour.
You should fail on really invalid characters.
If spaces at beginning are acceptable (i.e. ""   354"" is valid octal number) you should skip spaces explicitly. But, e.g., ""gdi754"" is invalid octal number and it should cause an exception."
366191508,11833,sledgehammer999,2020-01-14T07:52:41Z,"Sorry for the lack of activity. I'll probably push something the next days based on the various comments. On this particular one:
IIRC the specs calls that the field is an octal number padded with leading zeroes (all ASCII chars). So I am going to interpret it this ways:
```c++
int octalToDec(const QByteArray &data) const
{
int fileSize = 0;

  for (int i=0; i < data.size(); ++i) {
    char byte = data.at(i);
      if (byte < '0' || byte > '7') // skip trailing invalid bytes
        break;

    fileSize = (8 * fileSize) + (byte - '0');
  }

return fileSize;
}
```"
366264262,11833,glassez,2020-01-14T10:36:43Z,">IIRC the specs calls that the field is an octal number padded with leading zeroes (all ASCII chars).

If it's true, then your current algorithm is correct, but it can be used only internally by tar parser (so we should never make it shareable). Or you can split it into two functions: first (can be shareable util) parses valid octal notation (and breaks at any invalid character), second (private) skips leading invalid characters and apply the first one on the rest."
366268379,11833,glassez,2020-01-14T10:45:26Z,"Your examples are too deliberate to make a mistake in this way (if someone has read the appropriate warning).
There is a more plausible situation when you save the obtained data somewhere (especially implicitly, e.g. create some dynamically allocated object and pass it there via constructor or some setter) and then the function that owns the source buffer returns."
366273079,11833,glassez,2020-01-14T10:55:23Z,"The problem is there are no differences at the class interface between QByteArray that owns the data and that doesn't. So if some class need accepts QByteArray to store it internally there is no way to prevent error case from this class.
IMO, the better design is when we have different classes for data and references to its parts (e.g. QString and QStringRef). So if caller side has QStringRef and calling side accepts QString we should convert it explicitly (making deep copy of referenced data).
Unfortunately we can't use QString for raw data."
366704009,11833,glassez,2020-01-15T05:44:50Z,"There is `uint qstrnlen(const char *str, uint maxlen)` that you can use instead (or at least as underlying one)."
370465082,11833,glassez,2020-01-24T03:56:51Z,"It's good practice to call such types using singular form. Also we use CamelCase names for member of ""enum class""."
370465496,11833,glassez,2020-01-24T03:59:47Z,CamelCase
370465875,11833,glassez,2020-01-24T04:02:31Z,Seems this class is private helper. Please move it out of here.
370466633,11833,glassez,2020-01-24T04:07:05Z,Why don't you go the common way? Just return the status of successful reading as a bool. Other information is meaningless at this point.
370467004,11833,glassez,2020-01-24T04:09:41Z,Leftover
370992855,11833,glassez,2020-01-26T11:51:33Z,This one is neither satisfied nor even answered.
370993317,11833,glassez,2020-01-26T11:59:28Z,">I would still insist on making this parser as more generic as possible 

If you can't make a generic tar parser for some reason, just move it in ""geoipmanager.cpp"" and make it a ""private"" parser that can parse only particular subset of .tar files corresponding to geoip database distro."
373807090,11833,NotTsunami,2020-02-01T22:55:38Z,"Slightly unrelated to this PR but there are instances in geoipmanager where you can omit the null check here, [delete in c++ is a noop on null pointers](https://isocpp.org/wiki/faq/freestore-mgmt#delete-handles-null). If you want to keep that seperate I'm more than happy to address that in a seperate PR."
373808602,11833,NotTsunami,2020-02-01T23:34:37Z,"Disregard the previous comment, addressed in #11961"
374056565,11833,glassez,2020-02-03T11:40:51Z,"It should be ""FileType""."
374057282,11833,glassez,2020-02-03T11:42:33Z,"What ""Reg"" prefix means? Is it really needed (there are no types without it here)?"
374058150,11833,glassez,2020-02-03T11:44:37Z,You are the one that forbid such implementations in headers.
374067144,11833,glassez,2020-02-03T12:08:01Z,How about this one?
374067506,11833,glassez,2020-02-03T12:08:57Z,Add space between type name and `{`.
374068308,11833,glassez,2020-02-03T12:10:59Z,Shouldn't you break the loop after you've found database file?
374070649,11833,glassez,2020-02-03T12:17:04Z,"I wouldn't use legacy configuration structure for new settings (it was bound to the Options dialog layout). IMO, it's better to have something like ""GeoIP/LicenseKey""."
374075713,11833,sledgehammer999,2020-02-03T12:29:55Z,"The type of the header can point to other things than files (eg symlink, directory, etc)"
374076171,11833,sledgehammer999,2020-02-03T12:31:06Z,"Regular file. This can be denoted by 2 separate values. Either null or ascii zero.
Should I write it out fully? eg `RegularFileNull`"
374076690,11833,sledgehammer999,2020-02-03T12:32:29Z,And IIRC you were the one that advocated that such simple instructions can be implemented in headers. And I think there is actually used in some headers now. Am I wrong?
374076702,11833,glassez,2020-02-03T12:32:30Z,"But it's still not ""type of Stream Reader""...
So maybe ""EntryType""?"
374077926,11833,glassez,2020-02-03T12:35:47Z,"Are there any other (non regular) files so you can't omit ""regular"" keyword? If there's one please use ""Regular"" instead of ""Reg""."
374079404,11833,glassez,2020-02-03T12:39:38Z,">you were the one that advocated that such simple instructions can be implemented in headers.

Yes. And I still didn't change my mind. But I don't use it since it's forbidden by qBittorrent Coding Guidelines. Maybe it's time to reconsider it?"
374368773,11833,sledgehammer999,2020-02-03T22:07:30Z,"Sorry. I had the wrong idea in my head. Apparently we only do member variable initializations in the header. I don't know if this is constrained to only structs and very simple classes.

>Maybe it's time to reconsider it?

I don't know. I don't even remember my exact reasoning for being against this. The only thought I have for being against it now: Consistency in a class. When you're looking at a .cpp you probably want to see all member function implementations there and not go hunting them down in the header. I admit this isn't a strong case, and personally I don't have a strong position on this."
374371211,11833,sledgehammer999,2020-02-03T22:12:58Z,"Hmm, I am not sure I agree with you. `manageDatabaseUpdate()` ""manages"" the db update. Should calling code do the error checking for it? My position is that the error checking must be done by `manageDatabaseUpdate()` itself."
374468322,11833,Chocobo1,2020-02-04T04:23:46Z,">Consistency in a class. When you're looking at a .cpp you probably want to see all member function implementations there and not go hunting them down in the header. 

Also it is easier to read the function signatures (in header) if the function bodies are left out.
"
374471588,11833,glassez,2020-02-04T04:41:53Z,"My comment is more about ""what we should consider as an error"" than ""what place in the code we should handle this error""."
374473040,11833,glassez,2020-02-04T04:49:40Z,"Possible algorithm (when ""resolve peer country"" is enabled):
1. If license key is set by user try to update database and log errors if they are. Otherwise just skip database update step.
2. If database isn't loaded by previous step try to load it from file and log errors if they are."
374480398,11833,glassez,2020-02-04T05:27:45Z,"Okay, whatever you want... I'm used to it."
374999276,11833,sledgehammer999,2020-02-05T00:25:08Z,"Now I understand your objection better. I pushed an update and hopefully manages things more fully and clearer.
PS: The logic is to first load any existing db and then perform db update if possible and necessary."
375063936,11833,glassez,2020-02-05T05:21:00Z,"""else"" is redundant."
375172012,11833,glassez,2020-02-05T10:24:03Z,"I would declare EntryType under ""Utils::Tar""."
375283225,11833,glassez,2020-02-05T14:22:45Z,"""else"" is redundant."
375284185,11833,glassez,2020-02-05T14:24:18Z,"You should either keep all expressions in one line or enclose ""if"" body with braces."
375285593,11833,glassez,2020-02-05T14:26:34Z,"Move ""?"" to the next line."
375286507,11833,glassez,2020-02-05T14:27:58Z,"IMO, ""fullName"" is better."
375287792,11833,glassez,2020-02-05T14:29:55Z,Multiline condition requires body to be enclosed in braces.
375289791,11833,glassez,2020-02-05T14:33:01Z,"Multiline ""if"" body requires to be enclosed in braces."
375292045,11833,glassez,2020-02-05T14:36:33Z,"""("" shouldn't be cut from function name."
375294302,11833,glassez,2020-02-05T14:40:20Z,"Is it possible when ""atEnd"" is false? It's inconsistent, IMO."
375313480,11833,glassez,2020-02-05T15:10:40Z,Seems weird...
375314207,11833,glassez,2020-02-05T15:11:46Z,"""("" position issues."
375750215,11833,glassez,2020-02-06T10:20:59Z,"When readNext returns false it should be either error or end-of-file case, isn't it?"
375751493,11833,glassez,2020-02-06T10:23:30Z,"""("" position issue."
375752770,11833,glassez,2020-02-06T10:25:59Z,"""("" position issue."
375767670,11833,glassez,2020-02-06T10:56:18Z,"This logic confuses me.
Current position should point to the point of stream from where you will read next data. So you should increase it just after you have read entry.
Currently your logic is inconsistent. You have the same ""pos"" both before first reading and after it. The need for m_hasParsingStarted field is also indicates the problem. It isn't needed if ""pos"" behaves correctly."
376216995,11833,glassez,2020-02-07T05:10:26Z,"These conditions seem to be redundant.
Due to conditions in ""if"" above it was either disabled before (so m_geoIPDatabase was nullptr) or it had different database url."
377382565,11833,sledgehammer999,2020-02-10T23:41:19Z,">either disabled before (**so m_geoIPDatabase was nullptr**)

I didn't get into the specifics because the deleted check included `!m_geoIPDatabase` already. Of the top of my head I can't find a flow where it results that it was disabled but with non-nullptr pointer (m_geoIPDatabase). Maybe it was put there as an extra precaution?

Should I try to remove it? (and from the else if below it?)"
377383613,11833,sledgehammer999,2020-02-10T23:44:52Z,"I know.
It was either this `bool` or an `int` to hold the start position of the filedata. I chose bool in an effort to minimize class size in memory. But now I see that my last bool simply introduces padding at the end of the class. So instead of padding I'll use the `int` which should fit nicely there."
377383810,11833,sledgehammer999,2020-02-10T23:45:35Z,How so? Do you mean the formatting or what the code does?
377384396,11833,sledgehammer999,2020-02-10T23:47:38Z,Your comment helped me realize another solution. I dropped the `bool m_end` member variable. When the parser encounters the empty header (marker for EOF) it sets `m_pos` to `m_data.size()`. And `atEnd()` tests for that.
377384818,11833,sledgehammer999,2020-02-10T23:49:02Z,I would like to keep it this way. If I use a naked `if` then I'll have to introduce an empty line between the 2 tests for readability.
377384870,11833,sledgehammer999,2020-02-10T23:49:12Z,same
377476345,11833,glassez,2020-02-11T07:33:16Z,"> I'll have to introduce an empty line between the 2 tests for readability.

Is it a problem?"
377487480,11833,glassez,2020-02-11T08:11:53Z,">Do you mean the formatting 

Yes."
377488129,11833,glassez,2020-02-11T08:13:47Z,"> I chose bool in an effort to minimize class size in memory. 

It's invalid reason to make logic inconsistent."
377491477,11833,glassez,2020-02-11T08:22:59Z,">Should I try to remove it? (and from the else if below it?)

It can be written as:
```c++
if (m_enabled) {
}
else {
}
```
without any other conditions.
>Maybe it was put there as an extra precaution?

Maybe...
Anyway we shouldn't handle it as regular case (unless we really want to keep database loaded after feature is disabled)."
280431630,10527,glassez,2019-05-02T13:59:41Z,"API looks inconsistent.
I would have the following set:
```
createTag(name);
deleteTag(name);
addTags(torrents, tags);
removeTags(torrents, tags);
```
with some ""extra"" value for ""tags"" parameter that could mean ""all tags"" (empty string or skipped parameter would be good idea).

Besides, you don't have method to get a list of tags. Having this info in Sync API isn't enough since some client (e.g.) doesn't want use Sync API."
280661362,10527,Chocobo1,2019-05-03T04:31:13Z,"pls use range-based for loop here and other places.
`for (const auto &tag : asConst(session->tags()))`"
280661446,10527,Chocobo1,2019-05-03T04:32:10Z,and omit curly braces for single line `for` body statements such as this one and at other places too.
280661605,10527,Chocobo1,2019-05-03T04:34:27Z,"`${VERSION}` is renamed, see 49b57904f98f6cfd06f04daf49c46c714a71621a"
280661748,10527,Chocobo1,2019-05-03T04:36:22Z,"you should use `const` or `let` whenever possible in place of `var`, this applies to everywhere else too."
281260083,10527,glassez,2019-05-06T16:32:18Z,"Although I approve ""hashes"" as param name since the rest of the methods historically use this name, but I would personally prefer to call it ""torrents""."
281261507,10527,glassez,2019-05-06T16:36:28Z,Maybe check tag name once before applying it to torrents?
281263304,10527,glassez,2019-05-06T16:42:08Z,"There's something odd about it... If a torrent has a tag, what can prevent you from deleting it? At least incorrect tag name isn't valid reason."
281264351,10527,glassez,2019-05-06T16:45:04Z,"Isn't empty string just ""incorrect tag name"" like below?"
281265888,10527,glassez,2019-05-06T16:49:26Z,I don't see any strong reason to keep it inconsistent with the method above. Either createTag/deleteTag or createTags/deleteTags.
281268827,10527,glassez,2019-05-06T16:57:22Z,"Just a note for other contributors.
Perhaps we should reconsider the indication of errors in the base classes. Just ""return a bool"" is extremely uncomfortable. Error codes or exceptions can greatly simplify their use."
283188981,10527,fusioneer-GitHub,2019-05-13T05:09:56Z,It's to be in line with categories implementation.
283190631,10527,fusioneer-GitHub,2019-05-13T05:23:33Z,"For removal purposes, valid tag is any, that exists on current torrent."
283190796,10527,fusioneer-GitHub,2019-05-13T05:25:05Z,It's checked in `TorrentHandle::addTag` anyway.
283285672,10527,glassez,2019-05-13T10:39:58Z,"Didn't you understand me?
If torrent has a tag then this tag has correct name. So At ""incorrect tag name"" isn't valid reason of possible error here.

>For removal purposes, valid tag is any, that exists on current torrent.

So you only allow the removal of a set of tags that exist in each of these torrents? It looks uncomfortable to me."
283374594,10527,fusioneer-GitHub,2019-05-13T14:29:54Z,This whole check is redundant and there should be plain `torrent->removeTag(tag);`. Do I understand you correctly?
287023829,10527,Chocobo1,2019-05-23T16:11:03Z,`asConst()` is redundant here as `tags` is already `const`. Please remove it and at other places too.
287023957,10527,Chocobo1,2019-05-23T16:11:23Z,Please replace `auto` with `QString` and at other places too.
287024600,10527,Chocobo1,2019-05-23T16:13:01Z,"`&tag`?
And at other similar places."
287024995,10527,Chocobo1,2019-05-23T16:14:04Z,maybe append the offending tag name in exception?
287026359,10527,Chocobo1,2019-05-23T16:17:31Z,"Please make it like:
```c++
if (tags.empty()) {
}
else {
}
```
"
287027836,10527,Chocobo1,2019-05-23T16:21:21Z,I would omit this variable and inline it. This also applies to other similar instances.
287030010,10527,Chocobo1,2019-05-23T16:27:03Z,don't you need to trim the `tag`?
287031459,10527,Chocobo1,2019-05-23T16:30:33Z,Please remove redundant curly brackets for if-else.
287033421,10527,Chocobo1,2019-05-23T16:35:49Z,add parentheses to each predicate.
287033868,10527,Chocobo1,2019-05-23T16:37:04Z,`const tagExists` or some non-vague name.
287034354,10527,Chocobo1,2019-05-23T16:38:21Z,wrong coding style.
287034962,10527,Chocobo1,2019-05-23T16:39:54Z,`!==` ?
287035116,10527,Chocobo1,2019-05-23T16:40:20Z,add parentheses.
287035276,10527,Chocobo1,2019-05-23T16:40:45Z,I would add an empty line below.
287037768,10527,Chocobo1,2019-05-23T16:47:15Z,I would add an empty line below.
287039629,10527,Chocobo1,2019-05-23T16:52:19Z,Is it possible to replace `Object.each()` with `for (let key in object)`?
287041609,10527,Chocobo1,2019-05-23T16:57:37Z,Changes like these don't match the commit message. You should separate it out.
288243250,10527,fusioneer-GitHub,2019-05-28T18:29:24Z,"Actually I should remove this exception, because it's a dead code due to `split` with `SkipEmptyParts`"
288268872,10527,fusioneer-GitHub,2019-05-28T19:37:01Z,"It is. But why bother with keys, when we need values?"
288370878,10527,Chocobo1,2019-05-29T02:26:24Z,If I understand correctly `Object.each()` comes from mootools which is considered [deprecated](https://github.com/mootools/mootools-core/issues/2798). So I would like new code to stay away from it.
288371345,10527,fusioneer-GitHub,2019-05-29T02:29:26Z,"Is it ok to use native `Object.values()`, or we have to support legacy browsers?"
288372032,10527,Chocobo1,2019-05-29T02:34:10Z,"check out src\webui\www\Readme.md, there are requirements in there."
288373780,10527,fusioneer-GitHub,2019-05-29T02:46:00Z,"Ok, will do `for in`. Omg, Internet Explorer..."
288942968,10527,glassez,2019-05-30T10:44:05Z,Why is this unrelated change?
289002157,10527,Chocobo1,2019-05-30T14:00:29Z,"@fusioneer-GitHub
You (probably) misunderstood of my [previous comment](https://github.com/qbittorrent/qBittorrent/pull/10527#discussion_r287023829), I meant you should only remove it in the code you modified/added not the whole .cpp file."
289592288,10527,Chocobo1,2019-06-01T04:46:45Z,`asConst(session->tags())`
289592404,10527,Chocobo1,2019-06-01T04:50:50Z,I would omit this curly bracket.
289592421,10527,Chocobo1,2019-06-01T04:51:36Z,`asConst(BitTorrent::Session::instance()->tags())`
289592531,10527,Chocobo1,2019-06-01T04:55:54Z,add an empty line above please.
289592620,10527,Chocobo1,2019-06-01T05:00:08Z,use camel case for all variables.
289592634,10527,Chocobo1,2019-06-01T05:01:01Z,same here.
289592670,10527,Chocobo1,2019-06-01T05:02:20Z,Same here. We only use underscores for constants in uppercase.
289592687,10527,Chocobo1,2019-06-01T05:03:05Z,give it a better name.
289592746,10527,Chocobo1,2019-06-01T05:05:29Z,empty line below.
289592791,10527,Chocobo1,2019-06-01T05:06:54Z,"personally I would write
```js
for (let i = 0; i < children.length; ++i) 
    children[i].className = (children[i].id == selected_tag) ? ""selectedFilter"" : """";
```"
289593013,10527,Chocobo1,2019-06-01T05:16:43Z,is using `hasOwnProperty()` really necessary? 
289593173,10527,Chocobo1,2019-06-01T05:24:09Z,where is `empty()` defined? and what does it do?
289596330,10527,fusioneer-GitHub,2019-06-01T07:37:09Z,"Yep, it's mootools. Fixed."
289702409,10527,Chocobo1,2019-06-03T06:33:09Z,"there are a few `hasOwnProperty()` around, I presume you are sure that they are really required?"
289703017,10527,Chocobo1,2019-06-03T06:36:17Z,"nitpick, I would strip the curly bracket here."
289703040,10527,Chocobo1,2019-06-03T06:36:25Z,and here.
290330959,10527,Chocobo1,2019-06-04T14:37:16Z,`if (i === 0)`
290338139,10527,glassez,2019-06-04T14:50:21Z,Please don't produce such long lines. Split them all.
290339368,10527,glassez,2019-06-04T14:52:21Z,It's a bad idea to trim it in each iteration.
290339877,10527,glassez,2019-06-04T14:53:20Z,The same as above.
290342138,10527,glassez,2019-06-04T14:57:21Z,What does const mean in JavaScript? It is modified in code below...
290475479,10527,fusioneer-GitHub,2019-06-04T20:09:16Z,Should I use concatenation or newline escaping to construct multiline literals?
290498054,10527,fusioneer-GitHub,2019-06-04T21:08:10Z,"It means we can't change variable's value, the reference to array object instance. But we are free to call any of its methods or change its properties. There is no notion of const methods in JS."
290855664,10527,glassez,2019-06-05T17:39:16Z,I would use concatenation. @Chocobo1?
290860805,10527,glassez,2019-06-05T17:51:40Z,"This is favorite way of @Chocobo1 - to produce additional (const) variables. I would just make `tag` changeable:
```c++
for (QString tag : tags) {
        tag = tag.trimmed();
```
However, I do not want to discuss this topic, so that it does not become an unnecessary obstacle here.

Another question (also not for this PR) is that I do not think ""trimming"" (frequently used in this API) is correct.
For example:
1. if a tag with spaces at the edges is considered correct, why do we trim it?
2. otherwise, if a tag with spaces at the edges is considered incorrect, why we don't reject this ""bad request""?"
290877347,10527,Chocobo1,2019-06-05T18:31:31Z,">This is favorite way of @Chocobo1 - to produce additional (const) variables. 

Not so precise, because it is clear what are the critical values in a piece of code.

>I would just make tag changeable:

You don't even need to make it mutable! such as:
```c++
for (const QString &tag : tags) {
    applyToTorrents(hashes, [&tag](BitTorrent::TorrentHandle *const torrent)
    {
        torrent->addTag(tag.trimmed());
    });
}
```"
290878207,10527,Chocobo1,2019-06-05T18:33:27Z,If using `\` doesn't break the indention so much... I'm fine with both way.
290881525,10527,glassez,2019-06-05T18:42:14Z,">You don't even need to make it mutable! such as:

Yeah, let's go back to the beginning.
https://github.com/qbittorrent/qBittorrent/pull/10527#discussion_r290877347"
291838277,10527,Chocobo1,2019-06-09T14:15:20Z,"@fusioneer-GitHub 
Please change this to:
```c++
for (const QString &tag : tags) {
    applyToTorrents(hashes, [&tag](BitTorrent::TorrentHandle *const torrent)
    {
        torrent->addTag(tag.trimmed());
    });
}
```"
291838284,10527,Chocobo1,2019-06-09T14:15:30Z,here too.
291838327,10527,Chocobo1,2019-06-09T14:17:14Z,"I was reviewing these code recently and I think we should use `value()` method instead of `operator[]`.
```c++
const QStringList hashes {params().value(""hashes"").split('|')};
const QStringList tags {params().value(""tags"").split(',', QString::SkipEmptyParts)};
```"
291838345,10527,Chocobo1,2019-06-09T14:17:57Z,~~and here.~~
291838348,10527,Chocobo1,2019-06-09T14:18:05Z,~~here too.~~
291838354,10527,Chocobo1,2019-06-09T14:18:16Z,~~also here.~~
291838415,10527,Chocobo1,2019-06-09T14:20:24Z,~~Could you be more clear about it? Should we not trim or trim it in other places?~~
291839094,10527,Chocobo1,2019-06-09T14:45:48Z,"Sorry about my previous note, you are free not making this change, I'm having second thought."
291840924,10527,glassez,2019-06-09T15:46:36Z,"@Chocobo1, why do you suggest to trim it for each iteration instead of making it only once?"
291841869,10527,Chocobo1,2019-06-09T16:29:02Z,">@Chocobo1, why do you suggest to trim it for each iteration instead of making it only once?

I have no idea what or how.
Please give your direct suggestion to @fusioneer-GitHub about what to do.

What do you mean by ""making it only once""?"
291842433,10527,glassez,2019-06-09T16:52:19Z,"@Chocobo1, don't you follow this thread carefully? https://github.com/qbittorrent/qBittorrent/pull/10527#discussion_r290860805

>Please give your direct suggestion to @fusioneer-GitHub about what to do.

Either leave it as is currently or change it to not produce extra variable (as suggested in https://github.com/qbittorrent/qBittorrent/pull/10527#discussion_r290860805)."
291842838,10527,Chocobo1,2019-06-09T17:06:24Z,"~~I'm not sure what is the point here? What are we aiming to achieve? The trim happens only once for each items in `tags`, no?~~
~~IMO https://github.com/qbittorrent/qBittorrent/pull/10527#discussion_r291838277 is even better than https://github.com/qbittorrent/qBittorrent/pull/10527#discussion_r290860805 because there is one less variable, isn't?~~"
291842901,10527,Chocobo1,2019-06-09T17:08:44Z,"I understand it now, just leave it as-is."
291901908,10527,Piccirello,2019-06-10T07:11:34Z,"Why save this function to the global context, rather than using `const`? I believe it's only called in this file."
291901979,10527,Piccirello,2019-06-10T07:11:58Z,Same question here regarding `this` vs `const`.
291902829,10527,Piccirello,2019-06-10T07:15:38Z,Same `this` question for all of these. (documenting instances in case we decide to change it)
291903392,10527,Piccirello,2019-06-10T07:18:00Z,Same `this` question for all instances of `this.current_hash`.
291905384,10527,Piccirello,2019-06-10T07:26:36Z,"All new api methods should have some sort of error handling (e.g. 404 if hash not found, 400 if tag doesn't exist). And ideally with some sort of error message (`Invalid torrent`) per #10747. Check `TorrentsController::createCategoryAction` for an example of this."
291907162,10527,Piccirello,2019-06-10T07:33:56Z,I think we should check all tags and return a `409` if any already exist. Only then should we create a tag.
291907437,10527,Piccirello,2019-06-10T07:35:01Z,We should check the return value of this function and throw an error if `false`. Otherwise a tag could silently fail the `Session::isValidTag()` check.
291908703,10527,Piccirello,2019-06-10T07:40:11Z,"We should also check the return value of this function and handle appropriately. Maybe we throw an error immediately, or maybe we return a 200 if at least one `removeTag` succeeded. Then we can return the number of failures in the response body. I think we currently do the former in some cases, but I'm not sure it's the right approach. Maybe it is- I'm not sure."
291910106,10527,Piccirello,2019-06-10T07:45:45Z,"We can replace iteration with built-in functions:

```
const QStringList tags = BitTorrent::Session::instance()->tags().toList();
setResult(QJsonArray::fromStringList(tags));
```"
291913792,10527,Piccirello,2019-06-10T08:00:19Z,"Despite this check I'm able to submit tags with a comma without getting an error alert (e.g. `testtag,`). But then again, multiple tags are allowed when separated by a comma. So this check confuses me a bit."
291914892,10527,Piccirello,2019-06-10T08:04:25Z,What's the difference between this `typeof` check  versus checking against `undefined` directly?
291915182,10527,Piccirello,2019-06-10T08:05:23Z,"Same question here about checking `undefined` directly, and any other uses."
291915751,10527,Piccirello,2019-06-10T08:07:18Z,"Not sure about including the space in the split string. It seems more common to split just on `,` and then trim the tag. But don't feel super strongly about this."
291916171,10527,Piccirello,2019-06-10T08:08:50Z,Is `combine` a mootools function? I'm not familiar with it.
291916677,10527,Piccirello,2019-06-10T08:10:36Z,"Can you make this check more explicit? Directly compare to undefined/null or whatever it would be in a failure case (I can't immediately tell, hence wanting the explicitness). Same with while loop below."
291917034,10527,Piccirello,2019-06-10T08:11:48Z,Can this be a triple equals `===`?
291917580,10527,Piccirello,2019-06-10T08:13:36Z,Can this be `const`?
291917689,10527,Piccirello,2019-06-10T08:13:59Z,Can this be `const`?
291917759,10527,Piccirello,2019-06-10T08:14:11Z,Can this be `const`?
291917857,10527,Piccirello,2019-06-10T08:14:31Z,Can this be `const`?
291918099,10527,Piccirello,2019-06-10T08:15:23Z,Can this be `const`?
291918462,10527,Piccirello,2019-06-10T08:16:35Z,Can this check be moved outside the for loop? Seems we can call it if `sortedTags.length > 0`.
291918538,10527,Piccirello,2019-06-10T08:16:48Z,Use triple equals `===`
291918994,10527,Piccirello,2019-06-10T08:18:20Z,The double negative confuses my brain. Can this be stored in a variable for clarity? Like `const isNumber`?
291919129,10527,Piccirello,2019-06-10T08:18:47Z,Nitpick: remove the space after `function`
291919928,10527,Piccirello,2019-06-10T08:21:25Z,"Nitpick, but can we make this `const` using a ternary operator?

`const tagName  = ((tagHash === 0) ? '' : tagList[tagHash].name);`

Note that I've switched from double equals to triple equals, but please confirm this is valid."
291922507,10527,Piccirello,2019-06-10T08:30:12Z,"How do I evoke this case from the WebUI? It seems set just calls `api/v2/torrents/addTags` or `api/v2/torrents/removeTags` directly from `mocha-init.js`, rather than opening this dialog."
291923899,10527,Piccirello,2019-06-10T08:34:43Z,(the line above it)
291935160,10527,glassez,2019-06-10T09:09:55Z,"@Piccirello, we discussed error handlng in the early comments, please read them first. In a nutshell: since client-server interconnection is asynchronous, not all conflicts should cause an error, some can be safely ignored."
291966613,10527,fusioneer-GitHub,2019-06-10T10:56:52Z,"`<script>` tags are evaluated each time popup is opened. `var` is ok with redeclaration, while `const` or `let` are stricter and produce exception. `var` and `this.` both end up in global context regardless. I thought that declaration by `this.` is more explicit and intuitive indication of global context than by `var`.
While it's possible to refactor these cases to `const`, this would be a lot more extensive change."
291970468,10527,fusioneer-GitHub,2019-06-10T11:11:29Z,"Panels work mostly like popup windows above. The alternative is to declare `current_hash` only in client.js as it is really a global state variable, declared in multiple panels."
292068150,10527,fusioneer-GitHub,2019-06-10T15:44:15Z,Then we'll have to do even more work to find first tag element once more.
292081614,10527,fusioneer-GitHub,2019-06-10T16:17:53Z,You can do this via torrent context menu -> Tags -> Add...
292098709,10527,fusioneer-GitHub,2019-06-10T17:01:46Z,This case evoked via left panel tag list context menu. Only single tag is allowed there. It closely follows desktop version behavior.
292115450,10527,Piccirello,2019-06-10T17:45:31Z,"I couldn’t find any substantive conversation about this above. The client processes API responses asynchronously, but that doesn’t mean our API should swallow errors. We should report the errors and allow the client to decide how to handle them. To me, that means 409 if all fail, 200 if all pass, and 200 with more info if some pass and some fail."
292116438,10527,Piccirello,2019-06-10T17:48:00Z,"That seems reasonable. This is all pretty ugly, but that was the case well before your PR."
292117592,10527,Piccirello,2019-06-10T17:50:47Z,Let’s go with your current approach and we can refactor the current_hash logic in a future PR.
292284924,10527,Piccirello,2019-06-11T05:43:44Z,That did it 👍  thanks. I wrote the original code for this with add categories and it *still* confuses me. Probably not a sign of good code (on my part).
292284978,10527,Piccirello,2019-06-11T05:44:02Z,Was able to confirm this. Thanks.
292285221,10527,Piccirello,2019-06-11T05:45:28Z,"You're right, I overlooked the part where we create the element in the line directly above. You can ignore this."
297257502,10527,Piccirello,2019-06-25T15:41:15Z,"We should capture this function’s return value. If it’s false and the tag doesn’t exist (we should check), we should count that as an error. We should finish processing all other tags before reporting the error."
297259061,10527,Piccirello,2019-06-25T15:44:25Z,"Capture the return value of this function, report back an error if add fails and torrent doesn’t contain the tag. Don’t report the error until all hashes and tags are processed."
297259763,10527,Piccirello,2019-06-25T15:45:49Z,"Capture the return value of this function, report back an error if remove fails and torrent (still) contains the tag. Trying to remove a nonexistent tag will return success. Don’t report the error until all hashes and tags are processed."
297260893,10527,Piccirello,2019-06-25T15:48:04Z,"Capture the return value of this function, report back an error if add fails and tag doesn’t exist. Don’t report the error until all tags are processed.
"
297261274,10527,Piccirello,2019-06-25T15:48:44Z,"Capture the return value of this function, report back an error if remove fails and tag (still) exists. Trying to remove a nonexistent tag will return success. Don’t report the error until all tags are processed."
300825463,10527,glassez,2019-07-06T09:05:56Z,"You don't need to call it ""errorMessage"", since it's field of ""error"" object. Just ""message""."
300825583,10527,glassez,2019-07-06T09:11:05Z,"There is incorrect place to handle this error. Really we are handle error that is raised due to incorrect tag, isn't it? I would check each tag before applying it. Otherwise you will get multiple error messages because of the same invalid tag."
300825627,10527,glassez,2019-07-06T09:12:43Z,The same as above. Just check tag before trying to remove it.
300825694,10527,glassez,2019-07-06T09:15:39Z,The previous action should not fail. Why do you make this redundant checking and error handling?
300825886,10527,glassez,2019-07-06T09:22:40Z,"I would change the order of conditionals.
Since C++ performs ""Short circuit evaluation"" you will not try to create tag if it already exists.

Applied in all similar cases."
300844136,10527,fusioneer-GitHub,2019-07-06T22:41:43Z,"If we follow this line of reasoning, then we don't need error checking at `removeTag` and `removeAllTags` altogether. They are supposed to succeed when tag is valid and exists, do nothing for absent tags, and invalid tags should not be added in the first place. I believe what @Piccirello wants is a form of defensive programming, in case internal tags API would change in the future in a way, that would allow these operations to fail. If we won't put any checks and error reporting, web API would fail silently."
300850958,10527,glassez,2019-07-07T05:56:55Z,">I believe what @Piccirello wants is a form of defensive programming, in case internal tags API would change in the future in a way, that would allow these operations to fail.

It's good idea in common case. But you have to have some common sense not to make it absurd.
`removeAllTags` isn't supposed to fail by its meaning. It doesn't even have any error reporting. You're trying to make something up.
As for `removeTag` and others like it, you can insist on ""paranoid"" error handling like ""if a function may report an error, then we have to handle it anyway"". But it does not untie your hands to produce stupid logic, trying to perform obviously unsuccessful actions and reporting the same error many times (I mean you should check tag before trying to add/remove it)."
302384638,10527,glassez,2019-07-11T06:43:15Z,"IMO, these methods are incorrect. Result of API method can contain not only ""errors"" field. You should build result object inside the method and call `setResult()` at the end. Otherwise some other dev can be confused when it call `setErrors()` and its result will be overwritten.
```c++
setResult(QJsonObject {""errors"", errors});
```"
302390680,10527,glassez,2019-07-11T07:03:28Z,"I'm fine with this format but @Chocobo1 prefer early returns (IMO, not always justified) so he can insist on reformatting it:
```c++
if (!BitTorrent::Session::instance()->isValidTag(tagTrimmed)) {
    // add error
    continue;
}

// applyToTorrents
```"
305712810,10527,Piccirello,2019-07-22T07:50:57Z,">  in case internal tags API would change in the future in a way, that would allow these operations to fail. If we won't put any checks and error reporting, web API would fail silently

That's exactly what I was aiming for in this PR.

> removeAllTags isn't supposed to fail by its meaning. It doesn't even have any error reporting. You're trying to make something up.

`TorrentHandle::removeAllTags()` swallows the `false` return from `TorrentHandle::removeTag()`, repeatedly. By checking if the tags list is empty, we can catch this error. The `TorrentHandle` api is pretty lax on error handling."
305714587,10527,Piccirello,2019-07-22T07:55:41Z,"I do agree that we should return early.

> I'm fine with this format but @Chocobo1 prefer early returns (IMO, not always justified) so he can insist on reformatting it:

I'm not sure what the point of this comment was."
305715784,10527,Piccirello,2019-07-22T07:59:01Z,"I think we should merge this PR as it was previously, with less error handling. We can solve the larger Web API error handling problem for all APIs in a separate issue/PR. We shouldn't jam up feature development because of it."
305724193,10527,glassez,2019-07-22T08:22:14Z,">I think we should merge this PR as it was previously, with less error handling.

:+1:
We can merge it without the last commit for now.
>We can solve the larger Web API error handling problem for all APIs in a separate issue/PR.

Since error handling in entire Web API is problem itself it should be discussed and solved separately (to not produce yet another inconsistencies).

@Chocobo1, what do you say?"
306133677,10527,Piccirello,2019-07-23T05:26:49Z,"```ReferenceError: assignment to undeclared variable i - dynamicTable.js:386:14```

Because this variable is now scoped properly, you must redeclare `i` in the for loop just below."
306135401,10527,Piccirello,2019-07-23T05:36:41Z,"`SyntaxError: redeclaration of const updateBypasssAuthSettings`

These may need to remain on `var` since they remain in the global scope after the Preferences window is closed. Reopening the preferences window triggers the above error."
306649959,10527,glassez,2019-07-24T06:46:36Z,"@Piccirello, can you confirm that it's fixed now?"
306682740,10527,Piccirello,2019-07-24T08:17:29Z,"I'm having some issues with my dev box, I'll need to test tomorrow."
306719253,10527,Piccirello,2019-07-24T09:39:14Z,"Ok, was able to test again. All is working well for me."
41863828,3810,glassez,2015-10-13T13:19:35Z,"**dbus** only is not enough here?
"
41870864,3810,zeule,2015-10-13T14:18:57Z,"I'm not sure. DBus can be installed on Mac, but desktop notifications will not work, AFAIK.
"
41881294,3810,glassez,2015-10-13T15:25:12Z,"Well. In this case, the following would be correct:

``` qmake
unix:!macx:dbus {
    include(notifications/qtnotify/qtnotify.pri)
    HEADERS += $$PWD/notifications/dbusnotifier.h
    SOURCES += $$PWD/notifications/dbusnotifier.cpp
} else {
    HEADERS += $$PWD/notifications/systemtraynotifier.h
    SOURCES += $$PWD/notifications/systemtraynotifier.cpp
}
```

Also note that there is no need for extra line breaks.
"
41881657,3810,glassez,2015-10-13T15:27:20Z,"Stick it to the rest of HEADERS/SOURCES sections above.
"
41882044,3810,glassez,2015-10-13T15:29:41Z,"Space after **if** (Coding Style).
Optional: drop redundant braces (Coding Style).
"
41882788,3810,glassez,2015-10-13T15:34:32Z,"static variables (const) inside anonymous namespace is overkill. Get rid of either namespace or static (preferable use static in this case).
"
41882857,3810,glassez,2015-10-13T15:34:58Z,"We don't use module name in Qt includes.
"
41883425,3810,zeule,2015-10-13T15:38:34Z,"Oh, yes. I forgot that now the code is in C++11 mode...
"
41884508,3810,glassez,2015-10-13T15:45:57Z,"Although using braces in such cases (single statement in block) is not forbidden, try to avoid this (if it does not matter for you).
"
41884622,3810,glassez,2015-10-13T15:46:40Z,"And insert space after **if** of course.
"
41884737,3810,glassez,2015-10-13T15:47:32Z,"space
"
41884871,3810,glassez,2015-10-13T15:48:27Z,"line break before **else** (coding style).
"
41884948,3810,glassez,2015-10-13T15:49:03Z,"space
"
41884992,3810,glassez,2015-10-13T15:49:18Z,"line break
"
41885069,3810,glassez,2015-10-13T15:49:52Z,"space
"
41885142,3810,glassez,2015-10-13T15:50:19Z,"space
"
41885442,3810,glassez,2015-10-13T15:52:36Z,"line break
"
41885614,3810,glassez,2015-10-13T15:53:43Z,"line break before brace
"
41885685,3810,glassez,2015-10-13T15:54:13Z,"4 spaces as indent
"
41885906,3810,glassez,2015-10-13T15:55:28Z,"line break before brace
"
41886060,3810,glassez,2015-10-13T15:56:32Z,"line break at end of file
"
41886171,3810,glassez,2015-10-13T15:57:19Z,"line break
"
41886276,3810,glassez,2015-10-13T15:58:09Z,"Why this file?
Delete it.
"
41886393,3810,glassez,2015-10-13T15:58:55Z,"We don't use indentation for preprocessor directives.
"
41886863,3810,glassez,2015-10-13T16:02:12Z,"move this to .cpp and use forward declaration here.
"
41887865,3810,glassez,2015-10-13T16:09:27Z,"> Was not able to find out the coding style violations. Could you point out exact locations, please?

Wow, I'm tired. I will no longer show violations, like already mentioned. I hope you find them yourself and fix it. Follow the rules of CODING_GUIDELINES.md and my comments above.
"
41888351,3810,glassez,2015-10-13T16:13:09Z,"Before it was different?
It's one and the same for variables.
"
41892567,3810,zeule,2015-10-13T16:47:22Z,"In C++ 03 unnamed namespace did not mean internal linkage for symbols, while in C++11 it does.
"
41893274,3810,glassez,2015-10-13T16:53:30Z,"In this case, what it's used for in C++03?
"
41894995,3810,zeule,2015-10-13T17:08:04Z,"in C++03, as I understand, 

``` c++
namespace {}
```

is by definition equal to 

``` c++
namespace RandomUniqueName {}
using namespace RandomUniqueName;
```

But symbols from it still can be used where external linkage is needed.
Here are more details: http://www.comeaucomputing.com/techtalk/#nostatic
"
42931224,3810,glassez,2015-10-24T06:48:30Z,"Why you need this function? 
In place of calling this function, there is always torrent (h != 0).
"
42931247,3810,glassez,2015-10-24T06:53:20Z,"Rename all member variables in form of `m_variableName`.
"
42931271,3810,glassez,2015-10-24T07:00:41Z,"``` c++
DBusNotifier::DBusNotifier(QWidget *mainWindow)
    : Notifier(mainWindow)
    , mainWindow(mainWindow)
```
"
42931493,3810,glassez,2015-10-24T07:31:46Z,"This struct is redundant. Its **widget** field is always equal to mainWindow where it makes sense, so you can use DBusNotifier::mainWindow directly. And **torrent** can be used alone, not including in any structure.
Also unnecessary are all **widget** function parameters.

OFFTOPIC: `0L` is an incorrect value for a null pointer, although not cause any compilation errors (as I said earlier). Use either `0` or `nullptr`.
"
42931594,3810,glassez,2015-10-24T07:42:32Z,"Don't store TorrentHandle pointer for future using. It's dangerous as TorrentHandle object can be deleted before you will use it and you will not be able to check it out. Either store QPointer<TorrentHandle> or store torrent hash and then call Session::findTorrent().
"
42931645,3810,glassez,2015-10-24T07:48:45Z,"This function does not make sense, because `QSystemTrayIcon *systrayIcon` not used by DBusNotifier constructor. Just use the appropriate constructor in place of its call.
"
42931664,3810,glassez,2015-10-24T07:51:15Z,"Although QT_BEGIN_NAMESPACE/QT_END_NAMESPACE are used in some previous code, it doesn't make sense, so don't use it.
"
42935845,3810,zeule,2015-10-24T16:58:15Z,"Why? Do you force users to compile Qt without  the namespace?
"
42935935,3810,zeule,2015-10-24T17:06:23Z,"No, ""search finished"" notification uses the search widget. If it is active, notification is not needed. 
"
42935967,3810,zeule,2015-10-24T17:11:34Z,"Disagree. DBus notifications may be used without GUI  (from qbittorrent-nox). Let's make this next step easier.
"
42936005,3810,zeule,2015-10-24T17:15:59Z,"Well, if you say so. I wanted to be on the safe side.
"
42936039,3810,glassez,2015-10-24T17:21:04Z,"No. But QT_BEGIN_NAMESPACE/QT_END_NAMESPACE are not enough to support Qt namespace.
"
42936133,3810,glassez,2015-10-24T17:31:46Z,"Where in the code it is used?
"
42936182,3810,glassez,2015-10-24T17:36:15Z,"It will not make the next step easier. It simply won't compile in this form for qbittorrent-nox. This will require a deeper rework.
"
42936357,3810,zeule,2015-10-24T17:50:50Z,"OK.
"
42936617,3810,zeule,2015-10-24T18:16:29Z,"In DBusNotifier::actionInvoked(). When a notification is clicked, the corresponding widget should be activated.
"
42936624,3810,zeule,2015-10-24T18:16:59Z,"Oh yes, thank you. But, actually, the problem persists with QPointer (and hash), since the handle can be deleted just between checking the QPointer (getting a handle from the session object) and accessing it. This is just one more example for my criticism of the new TorrentHandle class. It is simply not a handle, because it does not have  the owning and copying semantics. 
"
42936697,3810,zeule,2015-10-24T18:24:10Z,"I understand that it will not compile. The idea behind this is that main window and parent are different objects.
"
42936719,3810,zeule,2015-10-24T18:26:52Z,"The purpose of the function is to move all #ifdef-logic out of mainwindow.cpp
"
42936885,3810,glassez,2015-10-24T18:40:05Z,"Do activateWindow() change current tab to search tab?
"
42937005,3810,glassez,2015-10-24T18:53:49Z,"> But, actually, the problem persists with QPointer (and hash), since the handle can be deleted just between checking the QPointer (getting a handle from the session object) and accessing it. This is just one more example for my criticism of the new TorrentHandle class.

You did not understand the current model. Your premise is incorrect. TorrentHandle object is always relevant during the processing of single event. If you got a non-null pointer from the Session, you can feel free to use it in current function and in all nested functions.

> It is simply not a handle, because it does not have the owning and copying semantics. 

You can call it just Torrent if **handle** has a special meaning for you. TorrentHandle is conventional name.
"
42937087,3810,glassez,2015-10-24T19:00:36Z,"What's the point? `#ifdef`s tell you something disturbing?
"
42937116,3810,zeule,2015-10-24T19:03:02Z,"and ""if"" too. The more they are localised and the smaller are in number the better I feel myself.
"
42937153,3810,glassez,2015-10-24T19:06:28Z,"> The idea behind this is that main window and parent are different objects.

This is not idea but just current implementation. If that's the idea, then answer the question - why can't it be the same object? For some imaginary universality? But we do not develop the library here.
"
42937164,3810,zeule,2015-10-24T19:07:29Z,"If the main search tab is active
"
42937242,3810,zeule,2015-10-24T19:13:09Z,"OK, I don't care anymore.

On 24 October 2015 at 21:06, Vladimir Golovnev notifications@github.com
wrote:

> In src/gui/notifications/dbusnotifier.cpp
> https://github.com/qbittorrent/qBittorrent/pull/3810#discussion_r42937153
> :
> 
> > +#include <QWidget>
> > +#include <QDBusConnection>
> > +
> > +
> > +namespace
> > +{
> > -    const QLatin1String ACTION_NAME_DEFAULT(""activate-context"");
> > -    const QLatin1String ACTION_NAME_OPEN_FINISHED_TORRENT(""document-open""); // it must be named as the corresponding FDO icon
> > -    const QLatin1String DBUS_SERVICE_NAME(""org.freedesktop.Notifications"");
> > -    const QLatin1String DBUS_INTERFACE_NAME(""org.freedesktop.Notifications"");
> > -    const QLatin1String DBUS_PATH(""/org/freedesktop/Notifications"");
> >   +}
> >   +
> >   +DBusNotifier::DBusNotifier(QWidget *mainWindow, QObject *parent)
> > -    : Notifier(parent)
> > -    , mainWindow(mainWindow)
> 
> The idea behind this is that main window and parent are different objects.
> 
> This is not idea but just current implementation. If that's the idea, then
> answer the question - why can't it be the same object? For some imaginary
> universality? But we do not develop the library here.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/qbittorrent/qBittorrent/pull/3810/files#r42937153.
"
42937305,3810,glassez,2015-10-24T19:18:57Z,"You're doing **objectively** wrong implementation to **subjectively** feel better.
Every thing should make sense. Why to create DBusNotifier object you pass to function the system tray object? Make you feel better?
"
42937362,3810,zeule,2015-10-24T19:23:35Z,"Could you explain yourself, please? What is wrong? Unused parameter in one of the if branches?
"
42937453,3810,glassez,2015-10-24T19:31:41Z,"But you still pass it to a function!
In case of DBusNotifier:

``` c++
Notifier *createNotifier(QWidget *mainWindow, QSystemTrayIcon *systrayIcon)
{
    Q_UNUSED(systrayIcon)
    return new DBusNotifier(mainWindow, mainWindow);
}
```

This is quite normal, if we don't know how will be implemented the function in the place of invocation (e.g. when using signal/slot or event processing). But in this case it is not.
"
42937505,3810,zeule,2015-10-24T19:37:30Z,"Sorry, but can not understand you still. Consider the following example:

``` c++
Notifier *createNotifier(QWidget *mainWindow, QSystemTrayIcon *systrayIcon)
{
    if (Configuration::instance().useDBusNotifications()) {
        return new DBusNotifier(mainWindow, mainWindow);
    }
    else {
        return SystemTrayNotification(mainWindow,systrayIcon);
    }
}
```

Is there anything wrong with it? If no, what is the critical difference between ""if"" anf ""#if"" inside of this function for MainWindow?
"
42937551,3810,zeule,2015-10-24T19:43:09Z,"Yes, this is exactly what I was talking about from the very beginning: this
is a class without ownership semantic. The handle for me, I guess, has
common meaning: it is something that allow me to access an object while I
own the handle. And the idea that handle may become invalid (and crash the
program, actually) without my actions is kind of surprising, don't you
agree? If we consider a remote resource, then any operation on its handle
may fail, naturally. But this has to be stated in the operation semantic
(say, throw a specified exception). However, there is no any error
reporting in the TorrentHandle semantic. That is why TorrentHandle is not
even a classical handle, not a classical smart pointer. What is it? Can't
it become better by gaining the proper ownership semantic?

On 24 October 2015 at 20:53, Vladimir Golovnev notifications@github.com
wrote:

> In src/gui/notifications/dbusnotifier.cpp
> https://github.com/qbittorrent/qBittorrent/pull/3810#discussion_r42937005
> :
> 
> > -         break;
> > -    default:
> > -        break;
> > -    }
> > -    const QString APPLICATION_NAME = QLatin1String(""qBittorrent"");
> > -    hints[QLatin1String(""desktop-entry"")] = APPLICATION_NAME;
> >   +
> > -    QDBusPendingReply<uint> reply = notificationsService->Notify(APPLICATION_NAME, 0, QLatin1String(""qbittorrent""), // icon name
> > -                    title, message, actions, hints, timeout);
> > -    reply.waitForFinished();
> > -    if (storeNotification && reply.value() != 0) {
> > -        Context ctx = context ? *context : Context();
> > -        if (!ctx.widget) {
> > -            ctx.widget = mainWindow;
> > -        }
> > -        activeNotifications.insert(reply.value(), ctx);
> 
> But, actually, the problem persists with QPointer (and hash), since the
> handle can be deleted just between checking the QPointer (getting a handle
> from the session object) and accessing it. This is just one more example
> for my criticism of the new TorrentHandle class.
> 
> You did not understand the current model. Your premise is incorrect.
> TorrentHandle object is always relevant during the processing of single
> event. If you got a non-null pointer from the Session, you can feel free to
> use it in current function and in all nested functions.
> 
> It is simply not a handle, because it does not have the owning and copying
> semantics.
> 
> You can call it just Torrent if _handle_ has a special meaning for you.
> TorrentHandle is conventional name.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/qbittorrent/qBittorrent/pull/3810/files#r42937005.
"
42940101,3810,glassez,2015-10-25T01:59:50Z,"Look, you really don't understand the difference between if and #if? Then I don't even know how to continue our discussion...
"
42941784,3810,glassez,2015-10-25T06:44:33Z,"> That is why TorrentHandle is not even a classical handle, not a classical smart pointer. What is it? Can't it become better by gaining the proper ownership semantic?

Do you really think that only ""classical"" handle or ""classical"" smart pointer are the right patterns?
Okay, I am forced to spend my time and explain everything from the beginning...

> The handle for me, I guess, has common meaning: it is something that allow me to access an object while I own the handle.

That is torrent handle in libtorrent.

> And the idea that handle may become invalid (and crash the program, actually) without my actions is kind of surprising, don't you agree?

I don't agree with this.
This is one reason why I decided to abandon this architecture and to hide all interaction with libtorrent::torrent_handle inside our TorrentHandle. libtorrent::torrent_handle may become invalid at any time even directly between calling is_valid() (returning true) and next method.
The second reason we need to store any additional data in TorrentHandle class.

> If we consider a remote resource, then any operation on its handle may fail, naturally. But this has to be stated in the operation semantic (say, throw a specified exception). However, there is no any error reporting in the TorrentHandle semantic.

Any libtorrent::torrent_handle method can throw an exception. If we promote a similar architecture to the upper levels of the application, the qBittorrent code will grow at the expense of having to use try-catch blocks everywhere. In this case, these blocks will not incur any benefit, in addition to suppression of exceptions (if you look, in which case torrent_handle may become invalid).

So in current qBittorrent...
Session creates TorrentHandle instances (one for each torrent) and **owns** them. The others can only obtain a pointer to one of these objects. No need of smart pointers here.
The state of TorrentHandle  objects is updated ""discretely"", i.e. we assume that for some period of time the object remains unchanged. This greatly simplifies the interaction with the application BitTorrent engine.
More info can try to understand it yourself (read the code or ask some specific questions).

If you're against using the name TorrentHandle, you can create a relevant Issue on this bugtracker.
"
42943221,3810,glassez,2015-10-25T10:04:13Z,"And yet (so you didn't pointed it out to me)...
Some details of  Session/TorrentHandle classes implementation still need to be improved, but it should in no way affect its interface used by other application components, so I put it off for a while (I plan to finish it soon).
"
42944749,3810,zeule,2015-10-25T13:21:40Z,"I know that you know that I know the difference. Encapsulation concept does not get any worse if it  is a compile-time but not a run-time one.
"
42945505,3810,glassez,2015-10-25T14:39:28Z,"> I know that you know that I know the difference.

Ok. Sorry.
By the way, I do not think that your run-time example is correct in this case. I would agree with your arguments if we were talking about the problem, the correct solution of which would be so complex and ugly that we could allow some minor violations in favor of ease of implementation. But in this case the correct decision is no less simple than this. Look yourself!
Your:

``` c++
Notifier *createNotifier(QWidget *mainWindow, QSystemTrayIcon *systrayIcon)
{
#if (defined(Q_OS_UNIX) && !defined(Q_OS_MAC)) && defined(QT_DBUS_LIB)
    Q_UNUSED(systrayIcon)
    return new DBusNotifier(mainWindow, mainWindow);
#else
    return new SystemTrayNotifier(mainWindow, systrayIcon);
#endif
}
```

Correct (in mainwindow.cpp):

``` c++
#if (defined(Q_OS_UNIX) && !defined(Q_OS_MAC)) && defined(QT_DBUS_LIB)
    notifier = new DBusNotifier(mainWindow, mainWindow);
#else
    notifier =  new SystemTrayNotifier(mainWindow, systrayIcon);
#endif
```

The incorrectness of your implementation, you can prove by applying a semblance method of mathematical induction. Suppose we have implemented another notifier (SomeOtherNotifier), which requires an instance of some widget (SomeWidget) and doesn't require MainWindow instance. Then we get the following:
Your:

``` c++
Notifier *createNotifier(QWidget *mainWindow, QSystemTrayIcon *systrayIcon, SomeWidget *someWidget)
{
#if (defined(Q_OS_UNIX) && !defined(Q_OS_MAC)) && defined(QT_DBUS_LIB)
    Q_UNUSED(systrayIcon)
    Q_UNUSED(someWidget)
    return new DBusNotifier(mainWindow, mainWindow);
#else if (some_condition)
    Q_UNUSED(mainWindow)
    Q_UNUSED(systrayIcon)
    return new SomeOtherNotifier(someWidget);
#else
    Q_UNUSED(someWidget)
    return new SystemTrayNotifier(mainWindow, systrayIcon);
#endif
}
```

Correct (in mainwindow.cpp):

``` c++
#if (defined(Q_OS_UNIX) && !defined(Q_OS_MAC)) && defined(QT_DBUS_LIB)
    notifier = new DBusNotifier(mainWindow, mainWindow);
#else if (some_condition)
    notifier = new SomeOtherNotifier(someWidget);
#else
    notifier = new SystemTrayNotifier(mainWindow, systrayIcon);
#endif
```

And so on...
"
42945808,3810,zeule,2015-10-25T15:07:46Z,"I would absolutely agree with you, but I had in mind notifications for GUI-less qBittorrent. In that case this notifier creation code would be duplicated somewhere else, which  is worse for me than non-strict interface of the creation function (which will change anyway for the GUI-less version).
Also, we can apply such induction to the number of notifiers and inspect the train of #ifdefs and #includes in the mainwindows.cpp, which you omit in your example. Do they make already huge file any better?

When submitting this PR I decided to not stress the intention to make it work in no-gui mode, but to submit a code, suitable for such modification. Instead, we can work on that right now and merge more changes at once.
"
42945893,3810,zeule,2015-10-25T15:14:09Z,"Thank you for the explanation! And I'm sorry that you night sleep was
disturbed by me. I think it is time for me to point out that my intention
is to make qBittorent better, as well as your.

I already read the code, of course. You already pointed out the big
difference between the handle in libtorrent and the TorrentHandle class:
libtorrent signals by throwing an exception if an operation was not
completed, while TorrentHandle does not. Beginning with SAFE_CALL, which
eats exceptions and ending with objects which can be deleted.

I do not argue that the solution to the libtorrent handles (Session +
torrent objects with Qt-ised interface) is bad, no! I'm arguing that there
may be a better solution for the ownership problem. For instance, I would
prefer non-copyable handle classes, given to clients by reference.

On 25 October 2015 at 07:44, Vladimir Golovnev notifications@github.com
wrote:

> In src/gui/notifications/dbusnotifier.cpp
> https://github.com/qbittorrent/qBittorrent/pull/3810#discussion_r42941784
> :
> 
> > -         break;
> > -    default:
> > -        break;
> > -    }
> > -    const QString APPLICATION_NAME = QLatin1String(""qBittorrent"");
> > -    hints[QLatin1String(""desktop-entry"")] = APPLICATION_NAME;
> >   +
> > -    QDBusPendingReply<uint> reply = notificationsService->Notify(APPLICATION_NAME, 0, QLatin1String(""qbittorrent""), // icon name
> > -                    title, message, actions, hints, timeout);
> > -    reply.waitForFinished();
> > -    if (storeNotification && reply.value() != 0) {
> > -        Context ctx = context ? *context : Context();
> > -        if (!ctx.widget) {
> > -            ctx.widget = mainWindow;
> > -        }
> > -        activeNotifications.insert(reply.value(), ctx);
> 
> That is why TorrentHandle is not even a classical handle, not a classical
> smart pointer. What is it? Can't it become better by gaining the proper
> ownership semantic?
> 
> Do you really think that only ""classical"" handle or ""classical"" smart
> pointer are the right patterns?
> Okay, I am forced to spend my time and explain everything from the
> beginning...
> 
> The handle for me, I guess, has common meaning: it is something that allow
> me to access an object while I own the handle.
> 
> That is torrent handle in libtorrent.
> 
> And the idea that handle may become invalid (and crash the program,
> actually) without my actions is kind of surprising, don't you agree?
> 
> I don't agree with this.
> This is one reason why I decided to abandon this architecture and to hide
> all interaction with libtorrent::torrent_handle inside our TorrentHandle.
> libtorrent::torrent_handle may become invalid at any time even directly
> between calling is_valid() (returning true) and next method.
> The second reason we need to store any additional data in TorrentHandle
> class.
> 
> If we consider a remote resource, then any operation on its handle may
> fail, naturally. But this has to be stated in the operation semantic (say,
> throw a specified exception). However, there is no any error reporting in
> the TorrentHandle semantic.
> 
> Any libtorrent::torrent_handle method can throw an exception. If we
> promote a similar architecture to the upper levels of the application, the
> qBittorrent code will grow at the expense of having to use try-catch blocks
> everywhere. In this case, these blocks will not incur any benefit, in
> addition to suppression of exceptions (if you look, in which case
> torrent_handle may become invalid).
> 
> So in current qBittorrent...
> Session creates TorrentHandle instances (one for each torrent) and _owns_
> them. The others can only obtain a pointer to one of these objects. No need
> of smart pointers here.
> The state of TorrentHandle objects is updated ""discretely"", i.e. we assume
> that for some period of time the object remains unchanged. This greatly
> simplifies the interaction with the application BitTorrent engine.
> More info can try to understand it yourself (read the code or ask some
> specific questions).
> 
> If you're against using the name TorrentHandle, you can create a relevant
> Issue on this bugtracker.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/qbittorrent/qBittorrent/pull/3810/files#r42941784.
"
42946246,3810,glassez,2015-10-25T15:50:30Z,"> For instance, I would prefer non-copyable handle classes, given to clients by reference.

And what about this?

> The second reason we need to store any additional data in TorrentHandle class.
"
42946338,3810,zeule,2015-10-25T15:58:28Z,"This, frankly speaking, I do not understand. What is the problem? Why does
it need a special attention? If one needs to cache some data, associated
with the torrent, why not?

On 25 October 2015 at 16:50, Vladimir Golovnev notifications@github.com
wrote:

> In src/gui/notifications/dbusnotifier.cpp
> https://github.com/qbittorrent/qBittorrent/pull/3810#discussion_r42946246
> :
> 
> > -         break;
> > -    default:
> > -        break;
> > -    }
> > -    const QString APPLICATION_NAME = QLatin1String(""qBittorrent"");
> > -    hints[QLatin1String(""desktop-entry"")] = APPLICATION_NAME;
> >   +
> > -    QDBusPendingReply<uint> reply = notificationsService->Notify(APPLICATION_NAME, 0, QLatin1String(""qbittorrent""), // icon name
> > -                    title, message, actions, hints, timeout);
> > -    reply.waitForFinished();
> > -    if (storeNotification && reply.value() != 0) {
> > -        Context ctx = context ? *context : Context();
> > -        if (!ctx.widget) {
> > -            ctx.widget = mainWindow;
> > -        }
> > -        activeNotifications.insert(reply.value(), ctx);
> 
> For instance, I would prefer non-copyable handle classes, given to clients
> by reference.
> 
> And what about this?
> 
> The second reason we need to store any additional data in TorrentHandle
> class.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/qbittorrent/qBittorrent/pull/3810/files#r42946246.
"
42946435,3810,glassez,2015-10-25T16:08:07Z,"GUI-less version will still require notifier creation in another place.
GUI-less version will still require more complex code rewriting so you shouldn't worry about it now.

And yet... I'm more inclined to believe the conclusion that it would be better to use instances of different classes in different qBittorrent build variants. Perhaps you should leave a common base class for them with some (really) common functionality in it (but only to prevent duplication of code), but use these objects through interfaces of subclasses (although it would require the use of ifdefs in the code).

> When submitting this PR I decided to not stress the intention to make it work in no-gui mode, but to submit a code, suitable for such modification. Instead, we can work on that right now and merge more changes at once.

I don't think this PR for immediate merge. So you should think about non-GUI code. Perhaps this will put some things in their places.
"
42946588,3810,glassez,2015-10-25T16:20:29Z,"> For instance, I would prefer non-copyable handle classes, given to clients by reference.

By the way, what would be the fundamental difference from the current implementation?
IMO, it will bring many intractable problems. I don't think Qt containers can work with references, for example.
"
42946613,3810,zeule,2015-10-25T16:23:08Z,"Exactly! No one would be able to store the handle and wait until it gets
invalid.

On 25 October 2015 at 17:20, Vladimir Golovnev notifications@github.com
wrote:

> In src/gui/notifications/dbusnotifier.cpp
> https://github.com/qbittorrent/qBittorrent/pull/3810#discussion_r42946588
> :
> 
> > -         break;
> > -    default:
> > -        break;
> > -    }
> > -    const QString APPLICATION_NAME = QLatin1String(""qBittorrent"");
> > -    hints[QLatin1String(""desktop-entry"")] = APPLICATION_NAME;
> >   +
> > -    QDBusPendingReply<uint> reply = notificationsService->Notify(APPLICATION_NAME, 0, QLatin1String(""qbittorrent""), // icon name
> > -                    title, message, actions, hints, timeout);
> > -    reply.waitForFinished();
> > -    if (storeNotification && reply.value() != 0) {
> > -        Context ctx = context ? *context : Context();
> > -        if (!ctx.widget) {
> > -            ctx.widget = mainWindow;
> > -        }
> > -        activeNotifications.insert(reply.value(), ctx);
> 
> For instance, I would prefer non-copyable handle classes, given to clients
> by reference.
> 
> By the way, what would be the fundamental difference from the current
> implementation?
> IMO, it will bring many intractable problems. I don't think Qt containers
> can work with references, for example.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/qbittorrent/qBittorrent/pull/3810/files#r42946588.
"
42946763,3810,glassez,2015-10-25T16:34:51Z,"But it required to store them in some places!

> and wait until it gets invalid.

It's not such a problem as you imagine. As I said, we can wrap the pointer in a QPointer if this really necessary. Or just listen to the appropriate signal from the Session (as it now is).
"
42946824,3810,zeule,2015-10-25T16:38:28Z,"​> ​But it required to store them in some places

Why store handles but not hashes as you suggested to me?
"
42947692,3810,glassez,2015-10-25T17:49:27Z,"Just to eliminate the need search torrent by hash (this is much slower than using an existing pointer).
"
45620453,3810,glassez,2015-11-23T16:01:18Z,"This implementation is not good enough! (I didn't watch the rest), the Core MUST NOT in any way depend on a GUI (just don't tell me some of the remnants of such a code, I haven't cleaned it all).
"
60371305,3810,glassez,2016-04-20T08:49:17Z,"Why not just **Manager**? Then full name is **Notifications**::**Manager**
"
66014951,3810,glassez,2016-06-07T06:13:48Z,"Don't use such common names for files. qmake compiles it in one directory so if we have `subfolder1/name.cpp` and `subfolder2/name.cpp` there is a conflict during compilation.
"
66015113,3810,glassez,2016-06-07T06:15:43Z,"Please rearder includes according to coding guidelines.
"
66015186,3810,glassez,2016-06-07T06:16:32Z,"Q_ASSERT
"
66015551,3810,glassez,2016-06-07T06:19:51Z,"As I said earlier if some file has implementation of namespace classes it's better to have `using namespace NamespaceName;` there.
"
66015695,3810,glassez,2016-06-07T06:21:36Z,"redundant empty line
"
66015812,3810,glassez,2016-06-07T06:23:08Z,"Don't forget about naming style. We use camelCase.
"
66015900,3810,glassez,2016-06-07T06:24:16Z,"Did you forget to run uncrustify?
"
66016128,3810,glassez,2016-06-07T06:27:29Z,"???
You definitely forgot to run uncrustify. Then I won't pay attention to this until you do it.
"
66016314,3810,glassez,2016-06-07T06:30:01Z,"Salt is salty...

``` c++
class DummyNotifier: public Notifier
```
"
66016826,3810,glassez,2016-06-07T06:36:04Z,"IMO, bad interface (I mean mixing different string types here). You should have really important reason to have it.
"
66018280,3810,glassez,2016-06-07T06:52:37Z,"QObject::connect result is not of type bool.
"
66018460,3810,glassez,2016-06-07T06:55:02Z,"Generally it's bad idea to have protected fields.
"
66024181,3810,glassez,2016-06-07T07:52:33Z,"What does it mean?
"
66024207,3810,glassez,2016-06-07T07:52:47Z,"And this too?
"
66237714,3810,zeule,2016-06-08T11:21:49Z,"Oh, qmake is so primitive... 
"
66242117,3810,zeule,2016-06-08T12:01:57Z,"Why?
"
66242323,3810,zeule,2016-06-08T12:03:41Z,"These parameters are indeed of different types: `id` is a sequence of characters, while   `name` is a string, which is translatable and visible to a user.
"
66242560,3810,zeule,2016-06-08T12:05:33Z,"Can understand your point. I need a check that connection succeeds. The check works.
"
66246756,3810,zeule,2016-06-08T12:38:37Z,"The notifier object may need to store notification request, and hence move semantic may be of use.
"
66270351,3810,glassez,2016-06-08T14:49:55Z,"> id is a sequence of characters

QByteArray?
std::string and QString are from ""different worlds"".
"
66271377,3810,glassez,2016-06-08T14:54:08Z,"> I need a check that connection succeeds. The check works.

Oh, that's right. **QMetaObject**::**Connection** class has `operator bool()`.
"
66272046,3810,glassez,2016-06-08T14:57:25Z,"Can you please explain this notation. Not everyone here knows all the newfangled features.
"
66274435,3810,glassez,2016-06-08T15:09:13Z,"It's just the ""principle of relative names"". It is typically used for short.
Or do you like such long ugly signatures? It's like that you call your family members by full name (in your home).
"
66277083,3810,glassez,2016-06-08T15:22:56Z,"Can not reach the hands to fix it... In fact, MainWindow and SystemTrayIcon are sibling components.
"
66278750,3810,glassez,2016-06-08T15:31:21Z,"I believe `notifier` param is redundant. Manager creates its notifier. GuiManager creates its notifier. Why it can't use its own `createNotifier()` directly? (of course `createNotifier()` should be `static` in this case).
"
66280633,3810,zeule,2016-06-08T15:40:28Z,"> GuiManager creates its notifier. 

And it needs a way to pass that notifier object to its base class.
"
66281856,3810,zeule,2016-06-08T15:45:56Z,"Your wording is fragile. If you do not want to read the `Notifications::` prefix because it is too long, consider the following:

``` c++
namespace NF = Notifications;

NF::DBusNotifier::DBusNotifier(QObject *parent)
```
"
66282672,3810,zeule,2016-06-08T15:50:22Z,"Or

``` c++
using Notifications::DBusNotifier;

DBusNotifier::DBusNotifier(QObject *parent)
```
"
66283275,3810,zeule,2016-06-08T15:53:27Z,"Not what I want because there is `QString::QString(const QByteArray &ba)`, which is not explicit. With `-DQT_NO_CAST_FROM_ASCII` I would agree to use it.
"
66286034,3810,zeule,2016-06-08T16:07:23Z,"Do you request a source code comment?
"
66295616,3810,glassez,2016-06-08T17:01:42Z,"> If you do not want to read the  Notifications::  prefix because it is too long

No. I don't want to read Notifications::  prefix in this file because it's redundant here.
"
66296236,3810,glassez,2016-06-08T17:05:30Z,"Oops... Reorder.
"
66296989,3810,glassez,2016-06-08T17:10:13Z,"No. Just explain it here. Or give me documentation link.
"
66297999,3810,zeule,2016-06-08T17:15:45Z,"http://en.cppreference.com/w/cpp/language/member_functions
"
66368037,3810,zeule,2016-06-09T01:01:56Z,"Then my answer is the same: your approach is fragile and I would rather not do that.
"
66388096,3810,glassez,2016-06-09T06:18:32Z,"> your approach is fragile

Please do not throw ""empty"" words. I always try to motivate my offers (even if it's just my opinion). And I want reasoned objections in response.
"
66388727,3810,glassez,2016-06-09T06:26:01Z,"Ok. Thanks.
But according to this doc it makes no sense in your code (since in any case the same underlying code will be executed).
"
66390005,3810,glassez,2016-06-09T06:40:40Z,"Another explanation from me.
The best option here is to write this:

``` c++
namespace Notifications
{
    // Notifications classes/functions implementation
}
```

But this notation eats some space due to the indentation used (especially with nested namespaces).
Instead of doing this I propose just to do:

``` c++
using namespace Notications;
```

to save the space.
"
66423442,3810,zeule,2016-06-09T11:22:00Z,"Why? `Notifications::Request::exec() &&` calls `Notifier::showNotification(Request&&)`
"
66426899,3810,glassez,2016-06-09T11:54:37Z,"From http://en.cppreference.com/w/cpp/language/member_functions

> Note: unlike cv-qualification, ref-qualification does not change the properties of the this pointer: within a rvalue ref-qualified function, *this remains an lvalue expression. 

so it doesn't call `Notifier::showNotification(Request&&)`
"
66436290,3810,zeule,2016-06-09T13:06:52Z,"Oh! Thanks! I have to add `std::move` here.
"
66481912,3810,zeule,2016-06-09T17:11:48Z,"I mean the obvious fact that namespaces are open, and thus one can change declaration file, compile an implementation file with a using directive and find a lot of unresolved symbols at the end of the build. With class members it is not that likely, but with common names like ""Manager"" and ""Request"" a conflict is more likely.
"
66489145,3810,glassez,2016-06-09T17:53:45Z,"IMO, You're fighting windmills.
What prevents someone to do incorrect changes in your code?
"
66498170,3810,zeule,2016-06-09T18:41:39Z,"Do I? I do nothing except of using fully-qualified names and can not understand why should I change that for no profit and the potential problem?
"
66503824,3810,glassez,2016-06-09T19:14:53Z,"Profit is the readability of the code. But apparently you see it differently...
"
66504529,3810,zeule,2016-06-09T19:18:20Z,"Absolutely. For me the situation with readability is just the opposite.
"
66597996,3810,glassez,2016-06-10T11:18:50Z,"Why do you like this overkill? Why don't use `Notifications::Request` directly?
"
66599083,3810,glassez,2016-06-10T11:30:08Z,"Using Singleton this way is incorrect.
The Singleton is how some feature used in application. But the feature itself must not depends on how it's used.
"
66600756,3810,zeule,2016-06-10T11:46:49Z,"Pardon?
"
66601315,3810,zeule,2016-06-10T11:51:56Z,"Automatic generation of the stubs. I'll clean it.
"
66605302,3810,glassez,2016-06-10T12:32:24Z,"Some feature implementation (I mean either some single class or some class and its satellites) shouldn't depend on how it is used. It may have many instances or be a singleton.
In your case Request is internally purposed class (implementation detail of notifications feature). It should be initialized with some Manager instance at creation time.
"
66605735,3810,glassez,2016-06-10T12:36:13Z,"> It should be initialized with some Manager instance at creation time.

Or have `Manager*` param in its `exec()` method.
"
66607194,3810,zeule,2016-06-10T12:48:59Z,"The only thing I think I managed to understand is that you want each time instead of 

``` c++
Request()
```

write 

``` c++
Request(Mnager::instance())
```

Is it correct?

Update: or 

``` c++
Request(this)
```
"
66611204,3810,glassez,2016-06-10T13:20:05Z,"> Update: or `Request(this)`

Yes.
"
66612850,3810,zeule,2016-06-10T13:32:11Z,"'Request` is the API of the notifications subsystem. Why would we force referencing the manager object each time? Please note, that the class is used not only inside of the managers. 
What about the following:

``` c++
class Request {
public:
  Request()
    : m_manager(Manager::instance()) {
  }
private:
  friend class Manager;
  Request(Manager& m)
    : m_manager(m) {
  }
  Manager &m_manager;
};
```

But, honestly, I'm thinking about moving the event handlers out of the manager classes.
"
66642002,3810,glassez,2016-06-10T16:25:32Z,"If we going to use some class as non-singleton (earlier used as singleton) we can just create its instance and it must work properly. If it's false then this class implemented incorrectly (it depends on some particular use case).
"
66648307,3810,zeule,2016-06-10T17:11:34Z,"Please use more precise wording. What you've said on itself seems like a nonsense to me and, secondly, is barely applicable to the given use-case. I suspect that you are mixing the Manager object and the notifier (for which it might make sense to have several of them). Am I wrong? If you indeed are talking about possible several Manager objects, I believe that the message routing has to be implemented inside of the Manager object, but not creating more than one of the managers.  
"
66667901,3810,glassez,2016-06-10T19:23:09Z,"Okay... Probably have to leave this discussion unfinished. It resembles a conversation between the deaf and the blind...
"
66669942,3810,zeule,2016-06-10T19:39:44Z,"It seems I was wrong. It is sad that you decided to abort the discussion. 
"
66703957,3810,glassez,2016-06-11T09:51:14Z,"> but not creating more than one of the managers.

I agree. But you can do it in another way (not using singleton).
Imagine that we want to opt out of this ""controversial"" pattern. For example, we can access to application components through the Application class properties.

Don't know how to explain it so you understand... Now your code has the following sequence: the Manager creates a request, invokes its method `exec()`, where the request refers to the some Manager instance via `Manager::instance()`, that in the General case can be another instance (not the one created this request).
"
66708667,3810,zeule,2016-06-11T17:01:01Z,"I still can't understand you. No matter what could be a way to get the manager instance, whether via explicit singleton pattern implementation, or via an implicit one, the `Request` class can get an access to it. The only significant difference arises if we want to select a notification ""sink"" while creating notification request. But it would be better to use  a sink ID (or name) but not address the sink object directly. And this ID → object instance mapping should then take place inside of the `Request` class. As such, I see no reason to change its API. Should we add different sinks, for sure there will be the default one, and thus `Request(). … .exec()` suits that use-case.  

> Now your code has the following sequence: …

It is likely that this will change. What is important that the an API has to map on the subject area. Do you think that `Request` API (with above mentioned remarks) does not  represent the notifications workflow?
"
67292463,3810,glassez,2016-06-16T06:23:16Z,"Don't forget ""code reusing"". Use `areNotificationsEnabled()` here.
"
67303231,3810,glassez,2016-06-16T08:10:57Z,"Oh, that's great!.. MainWindow owns SearchEngine. Moreover, it still creates SearchEngine instance regardless of whether you need it or not. It is really a good design decision!
You love optimisation so much. Somehow I don't see it here.

P.S. Sorry for my sarcasm.
"
67313304,3810,glassez,2016-06-16T09:22:28Z,"To immediately prevent unnecessary questions and objections, I'll tell you that I even understand why you did it: you need to connect to its (SearchEngine) signals. There are (generally) two options: have a permanent instance (as you did) or to track its creation in any way (this is not possible in the current design).
But the problem here is different. When the current design has weaknesses preventing implement some feature correctly, we can choose one of two things: either fix the design or further degrade it. Unfortunately, you chose the latter.
"
67324337,3810,zeule,2016-06-16T10:49:44Z,"This frustrates me too. But I think that mentioned earlier intent ti get notification handlers out of the manager classes will solve this problem.
"
67331733,3810,glassez,2016-06-16T12:00:19Z,"Finally I checked the entire PR. And I found the cause of my discontent. Here is the place!
But I still thought, why are you doing these cross-dependencies between the Manager and Request? Why is this method needed? (I mean `Request::exec()`)
Here you made a mistake of not implementing all this using the ""Observer"" pattern (as we decided before).
But why? Probably for the same reason you did another degradation I've noticed (I mean, SearchEngine in MainWindow).
This leads me to believe that we have to solve such problems in a different way. And in this case it's easier than you may think about.
MainWindow owns the SearchWidget and this is normal relationship. To follow Observer pattern NotificationsManager should recognize when the SearchWidget is created and connect to its signals (and to SearchEngine signals too; SearchWidget can own SearchEngine as it was before and it can have `SearchWidget::searchEngine()` property). How to do this? It's very simple. You just have to emit `MainWindow::searchWidgetCreated()` signal.
"
67338409,3810,glassez,2016-06-16T12:54:19Z,"I forgot to add that there should also be some signal connected to the Notifications Manager here.
"
67362428,3810,zeule,2016-06-16T15:07:41Z,"The invocation of the notification here is direct because this notification has to be shown unconditionally. As you may see, all notifications, supplied via `Notifications::Manager::supportedNotifications()` may be disabled by user. I did not want to complicate that code by adding an option to suppress disabling the notification.
"
67367589,3810,glassez,2016-06-16T15:32:32Z,"Unfortunately, we will not be able to have a productive dialogue while you're not going to be critical to your code.
"
67382752,3810,glassez,2016-06-16T16:55:39Z,"> The invocation of the notification here is direct because this notification has to be shown unconditionally

We have both conditionally and unconditionally showed notifications in Subject Domain so model must reflect this circumstance but not to hide it by using some backdoors and breaking selected design pattern.

> I did not want to complicate that code by adding an option to suppress disabling the notification.

Your code is complicated now. But you don't want to see this, considering it excellent.
If your model will fit the subject domain and you won't ""break"" the use of a single pattern in its implementation you will get rid of many unnecessary things and dependencies.
"
67388312,3810,zeule,2016-06-16T17:29:17Z,">  But you don't want to see this, considering it excellent.

:D How could you know?
"
67391230,3810,glassez,2016-06-16T17:45:15Z,"Elementary, My dear Watson! ;)
"
406103025,12458,glassez,2020-04-09T10:15:41Z,Fix coding style.
406103193,12458,glassez,2020-04-09T10:16:02Z,Fix coding style.
406104182,12458,glassez,2020-04-09T10:17:59Z,"Please use ""message"" instead of ""msg"" whenever possible."
406106587,12458,glassez,2020-04-09T10:22:34Z,Seems you don't need fields for views.
406115287,12458,jagannatharjun,2020-04-09T10:39:27Z,"If I understand it correctly, by that logic I don't need to store LogMessageModel and LogPeerModel as well, so I removed them as well"
406116456,12458,jagannatharjun,2020-04-09T10:41:49Z,"I think I need to put the braces in the new line.
done."
406116502,12458,jagannatharjun,2020-04-09T10:41:55Z,"I think I need to put the braces in the new line.
done."
406117368,12458,jagannatharjun,2020-04-09T10:43:37Z,"changed the member function of `ExecutionLogWidget`, do I need to change the member function of `MainWindow` as well (`MainWindow::setExecutionLogMsgTypes` and `MainWindow::executionLogMsgTypes` )"
406136030,12458,jagannatharjun,2020-04-09T11:23:01Z,"adding 1
otherwise selected item's text will be too close to focus rect

https://github.com/qt/qtbase/blob/c9b2528a9d60561e3050a3dadd86b893cd35349d/src/widgets/styles/qcommonstyle.cpp#L1019
"
406139504,12458,glassez,2020-04-09T11:30:05Z,I don't insist that you change anything except the ones you touch anyway.
406159527,12458,Chocobo1,2020-04-09T12:11:35Z,you already included this header in executionlogwidget.h so you don't need it here.
406159891,12458,Chocobo1,2020-04-09T12:12:14Z,"It would be nice to also switch the parameters order: `ExecutionLogWidget(Log::MsgTypes types, QWidget *parent);`"
406162845,12458,Chocobo1,2020-04-09T12:17:48Z,`static` is now redundant.
406164561,12458,Chocobo1,2020-04-09T12:21:18Z,"nitpick, please trim the whitespaces before the comment mark a bit.."
406165156,12458,Chocobo1,2020-04-09T12:22:28Z,this function can be `private` isn't?
406165601,12458,Chocobo1,2020-04-09T12:23:19Z,I would extract the QString into a variable to avoid this line becoming too long.
406168895,12458,Chocobo1,2020-04-09T12:29:15Z,"This is not good enough, you should use circular buffer (same one from logger) as suggested before."
406172242,12458,Chocobo1,2020-04-09T12:35:30Z,use signed integer here.
406173834,12458,Chocobo1,2020-04-09T12:38:33Z,"I think you should omit using move semantics to keep the code base consistent, Qt data types use Qt implicit sharing anyway."
406174363,12458,Chocobo1,2020-04-09T12:39:30Z,And the parameter will become a const reference.
406176387,12458,Chocobo1,2020-04-09T12:43:16Z,You should use the proper type for each field instead.
406183695,12458,jagannatharjun,2020-04-09T12:56:36Z,doesn't that'll cause too much conversion in `BaseLogModel::data` function
406190049,12458,Chocobo1,2020-04-09T13:07:41Z,"Maybe we can stick to Qt data types that are easily convertible to QVariant?
```c++
QString time;
QString message;
QColor foregroundRole;
MsgType userRole;  // same as `Msg::MsgType`, seems unavoidable 
```"
406216681,12458,jagannatharjun,2020-04-09T13:47:44Z,"boost::circular_buffer causing crash
![image](https://user-images.githubusercontent.com/34717789/78901916-a62ef600-7a96-11ea-9bd2-b402b6252140.png)

can't seem to understand why, this happens at end i.e closing the main window, std::deque works fine."
406224584,12458,glassez,2020-04-09T13:58:55Z,">can't seem to understand why

You should at least trace it to realize what code point couses the crash."
406227183,12458,jagannatharjun,2020-04-09T14:02:47Z,"I think QVariant does dynamic memory allocation and make copies, breaking implicit sharing for original data, I call it many times during painting and for sizeHint as well, but I don't have any problem in changing if you insist."
406229989,12458,jagannatharjun,2020-04-09T14:06:46Z,"removed seems like `base/global.h` was not needed too, removed as well."
406230074,12458,jagannatharjun,2020-04-09T14:06:54Z,done.
406230138,12458,jagannatharjun,2020-04-09T14:07:00Z,removed
406230233,12458,jagannatharjun,2020-04-09T14:07:10Z,done?
406230585,12458,jagannatharjun,2020-04-09T14:07:38Z,"made private, turns out both paint and sizehint can be private."
406232306,12458,jagannatharjun,2020-04-09T14:09:57Z,"done,"
406234411,12458,jagannatharjun,2020-04-09T14:12:56Z,"I did trace it, it was here 
https://github.com/qbittorrent/qBittorrent/blob/43e5e242ff31da009c67e4365925e11604131980/src/gui/mainwindow.cpp#L792

I spent an hour on this, only after that I posted here."
406235153,12458,glassez,2020-04-09T14:14:01Z,"Please don't answer on each comment unless you really have to say something more meaningful than ""done"", ""removed"", ""fixed"" etc... You're clogging up this thread and our mailboxes."
406238260,12458,jagannatharjun,2020-04-09T14:18:17Z,"sorry, will not do anymore. 😊"
406238690,12458,glassez,2020-04-09T14:18:53Z,"Also, please do not push the slightest changes to the github. When you do this every few minutes, TravisCI goes crazy! This also clogs our mailboxes with useless notifications."
406242831,12458,glassez,2020-04-09T14:24:57Z,I suppose it's due to incorrect order of class destructions. First views should be destroyed and then models they use.
406250220,12458,glassez,2020-04-09T14:34:59Z,"Aren't you able to achieve more depth? Try setting breakpoints in your class destructors and see what happens, in what order they are removed, and how they interact with each other."
406251347,12458,jagannatharjun,2020-04-09T14:36:34Z,hmm changing peer model and peer view initialization order seems to fixed it thanks.
406265984,12458,jagannatharjun,2020-04-09T14:56:09Z,"I've pushed changes with buffer implementation, I tested with setting MAX_LOG_MESSAGES=20 and other small values."
406279908,12458,jagannatharjun,2020-04-09T15:16:20Z,"Actually the real reason of crash was that I left some std::move calls, sorry for troubling you guys."
406380152,12458,glassez,2020-04-09T18:00:15Z,SEP**A**RATOR
406382560,12458,glassez,2020-04-09T18:04:38Z,Shouldn't you save Pen just before this line?
406388282,12458,glassez,2020-04-09T18:14:59Z,">// peermodel may give invalid foreground role

Is it intentional behavior? What reason it does for?"
406393426,12458,glassez,2020-04-09T18:23:59Z,I would have separator inside format string to avoid yet another argument insertion. @Chocobo1?
406395430,12458,glassez,2020-04-09T18:27:28Z,"How about having less message count to be displayed and not follow Logger limit?
@Chocobo1?"
406395909,12458,glassez,2020-04-09T18:28:13Z,messageIndex
406397828,12458,glassez,2020-04-09T18:31:34Z,"Index cannot be greater or equal to messages count due to expression above, isn't it?"
406399989,12458,glassez,2020-04-09T18:35:22Z,Why do you use QueuedConnection?
406401599,12458,glassez,2020-04-09T18:38:02Z,Format string looks ugly.
406403357,12458,glassez,2020-04-09T18:41:21Z,"explicit

And I would preserve default value for parameter as QObject has it."
406404625,12458,glassez,2020-04-09T18:43:37Z,"Do you really need it to be declared as slot? If no, you even can omit Q_OBJECT."
406405830,12458,glassez,2020-04-09T18:45:51Z,I don't see any strong reason to store it differently. QVariant is good choice for its job.
406406701,12458,glassez,2020-04-09T18:47:27Z,Broken coding style (ampersand position).
406407672,12458,glassez,2020-04-09T18:49:05Z,Don't forget to add Q_DISABLE_COPY to all QObject subclasses.
406410850,12458,glassez,2020-04-09T18:55:02Z,"Seems you can extract ""build display text"" logic into function to avoid code duplication."
406412086,12458,jagannatharjun,2020-04-09T18:57:17Z,"for the peer model we paint with default font color, I already changed the pen to `originalPen` for the painting of Separator so when this condition fails the following message will be painted with the default font color.

I think I should change it to 
// peermodel **will** give invalid foreground role"
406414024,12458,jagannatharjun,2020-04-09T19:00:55Z,"the `newLogMessage` is emitted from `addMessage` which can be called from different threads, so I guess this way we don't need any synchronization. "
406417265,12458,jagannatharjun,2020-04-09T19:07:14Z,I was told to do this way https://github.com/qbittorrent/qBittorrent/pull/12144#discussion_r404950805
406420574,12458,glassez,2020-04-09T19:13:53Z,Unfortunately the link above doesn't work for me...
406423156,12458,jagannatharjun,2020-04-09T19:18:52Z,"it works, anyway
![image](https://user-images.githubusercontent.com/34717789/78932396-06d52780-7ac5-11ea-92c0-f3b5ed424a31.png)
"
406426236,12458,jagannatharjun,2020-04-09T19:25:21Z,ok it seems originally we paint peer messages with red color will change it accordingly
406477772,12458,jagannatharjun,2020-04-09T21:07:09Z,"![image](https://user-images.githubusercontent.com/34717789/78940860-2a539e80-7ad4-11ea-9e19-03c1d573fa5e.png)
"
406607563,12458,Chocobo1,2020-04-10T05:23:49Z,It would be nice to add some comment in code.
406607826,12458,Chocobo1,2020-04-10T05:24:57Z,why this again?
406608717,12458,Chocobo1,2020-04-10T05:29:26Z,I don't insist to store in non-QVariant types in this struct. However I think it is important to specify what types do we intend to store in QVariant. I think maybe add some comment in code about the types or even use `Q_Assert(QVariant::type()  == some_type)` to check the correctness.
406609121,12458,Chocobo1,2020-04-10T05:31:09Z,wrong order.
406609294,12458,Chocobo1,2020-04-10T05:31:56Z,some of those can be `private` right?
406609809,12458,jagannatharjun,2020-04-10T05:34:12Z,"I think this was done to support html formatting else where (in LogListWidget, which is removed in this PR), this is not needed anymore, if not removed here, had to do unescape in model or delegate, what do we prefer?"
406610014,12458,Chocobo1,2020-04-10T05:34:51Z,"GUI widgets should have its own display limit.
Also I would prefer larger (around 50000) if it doesn't drag the performance."
406610246,12458,Chocobo1,2020-04-10T05:36:07Z,coding style.
406610820,12458,Chocobo1,2020-04-10T05:38:59Z,Maybe change `const QPen originalPen` to `QPen coloredPen` and you can reuse it.
406611238,12458,Chocobo1,2020-04-10T05:40:51Z,"Now I think `QStyledItemDelegate::paint` should preserve the `painter` state (adhere to their own spec), so maybe we can swap it:
```c++
{ // function start
QStyledItemDelegate::paint(painter, option, index); // paints background, focus rect and selection rect

QPen coloredPen = painter->pen();
painter->save();
// ...
```"
406611707,12458,Chocobo1,2020-04-10T05:43:12Z,"Seems this doesn't need to be in class, it should be moved to anonymous namespace."
406612012,12458,Chocobo1,2020-04-10T05:44:32Z,seems you don't really need to capture `this` into lambda.
406612100,12458,Chocobo1,2020-04-10T05:45:02Z,same here.
406612462,12458,Chocobo1,2020-04-10T05:46:56Z,I *suspect* this isn't needed...
406613134,12458,jagannatharjun,2020-04-10T05:49:53Z,We need originalPen to paint separator
406613369,12458,Chocobo1,2020-04-10T05:51:11Z,"It was made to avoid some attacks. IIRC calling `toHtmlEscaped()` here would mess up the saved log.txt right? If so, it is not preferable, we should not do that ~~and escape it at model.~~"
406614185,12458,jagannatharjun,2020-04-10T05:54:34Z,"This internally calls tr, and I was once asked to only call tr of concerned class not QObject::tr directly, otherwise my first thought was to make it free function as well."
406617749,12458,glassez,2020-04-10T06:10:07Z,QObject::tr in free functuon is bad since it doesn't produce any meaningful context.
406618002,12458,glassez,2020-04-10T06:11:16Z,Isn't it supposed to be accessed from outside of the class?
406618302,12458,Chocobo1,2020-04-10T06:12:33Z,"ok, forget it."
406618477,12458,glassez,2020-04-10T06:13:17Z,"Sorry, I can't clearly understand what you're talking about...
IMO, it's incorrect to escape here."
406619390,12458,glassez,2020-04-10T06:17:25Z,">Also I would prefer larger (around 50000) if it doesn't drag the performance.

Maybe it would be better to make it configurable?
Anyway the good first step is just declare another const for GUI stuff (even if it has the same value initially)."
406619812,12458,glassez,2020-04-10T06:18:56Z,If you don't need to store original/default pen then maybe you don't need any additional variable?
406620549,12458,glassez,2020-04-10T06:22:03Z,"I would make it to be ""read only"" class that accept specific types in its constructor and store them as QVariant (getters are also of type QVariant)."
406621679,12458,glassez,2020-04-10T06:26:21Z,At least you can try to test it without this line.
406621737,12458,Chocobo1,2020-04-10T06:26:39Z,">Maybe it would be better to make it configurable?

Maybe in a later PR to avoid delaying this one...

>Anyway the good first step is just declare another const for GUI stuff (even if it has the same value initially).

Agreed."
406622113,12458,glassez,2020-04-10T06:28:00Z,But theoretically it should be here. Otherwise rowCount() still returns incorrect value after you notify about removed row.
406623430,12458,jagannatharjun,2020-04-10T06:33:16Z,Where should I have to add assert? One thing is that delegate assume the type of role provided by baselogmodel so maybe baselogmodel should be responsible as well. Thus we need asserts in 'BaseLogModel::addNewMessage'
406625622,12458,glassez,2020-04-10T06:41:34Z,"Use my proposal is more reliable, IMO. You'll get something like ""aggregate variant"". It will perform type checking at compile time."
406631129,12458,jagannatharjun,2020-04-10T07:01:08Z,I need originalPen to paint separator
406631149,12458,Chocobo1,2020-04-10T07:01:13Z,"I just noticed the comment above, never mind here."
406632332,12458,jagannatharjun,2020-04-10T07:05:27Z,What should be the const name? Can't think of one. MAX_GUI_LOG_MESSAGES?
406637088,12458,Chocobo1,2020-04-10T07:20:33Z,disregard my comment.
406642384,12458,jagannatharjun,2020-04-10T07:37:08Z,"I changed it to what it was originally in `ExecutionLogWidget`, but don't know what to do further."
406642945,12458,jagannatharjun,2020-04-10T07:38:40Z,Should I remove these changes and unescape at Model or leave the changes?
406651086,12458,Chocobo1,2020-04-10T08:02:25Z,keep the the current changes. no need to make further changes.
406652474,12458,glassez,2020-04-10T08:06:37Z,"MAX_VISIBLE_MESSAGES?
Also seems Logger constant should be private."
406652989,12458,glassez,2020-04-10T08:08:12Z,You should keep your changes here.
406654623,12458,glassez,2020-04-10T08:12:51Z,Why not store messages in the same order as they're displayed?
406656969,12458,glassez,2020-04-10T08:19:48Z,"Why not move it to anonymous namespace? ""private const"" seems to be useless unless it's initialized in class constructor. ""static private const"" seems to be useless completely. Or am I wrong?"
406657970,12458,glassez,2020-04-10T08:22:45Z,">I would make it to be ""read only"" class 

It means that fields should be private and have public getters to be sure they're still assigned using constructor."
406675763,12458,Chocobo1,2020-04-10T09:12:32Z,"I would only use `constexpr` when you really need something complex to eval it at compile time, here `const` would be enough.
And it should not be related to `MAX_LOG_MESSAGES`. Give it a number."
406676279,12458,Chocobo1,2020-04-10T09:13:55Z,it should not have any default values.
406676697,12458,Chocobo1,2020-04-10T09:15:09Z,seems every one of them can be `const`
406676857,12458,Chocobo1,2020-04-10T09:15:37Z,"All of the parameters should take const references except the last one, last one should be the original type instead of QVariant."
406680157,12458,jagannatharjun,2020-04-10T09:25:04Z,"I tried, circular buffer needs operator="
406681993,12458,Chocobo1,2020-04-10T09:30:17Z,"thanks, never mind then."
406684421,12458,Chocobo1,2020-04-10T09:37:27Z,suspicious... 
406734821,12458,glassez,2020-04-10T12:25:15Z,"Why didn't you make a specific name for this one (and all its stuff)? Why not ""MessageTypeRole""?"
406735209,12458,glassez,2020-04-10T12:26:36Z,"Also the class members have inconsistent names. Some of them have ""role"" suffix and the rest has no one."
406735617,12458,glassez,2020-04-10T12:27:52Z,Please reformat this comment. The first line is too long while the secnd one is short.
406737859,12458,glassez,2020-04-10T12:34:50Z,"Really signal receiver should know nothing about emitter internals!
You should use `Qt::QueuedConnection` directly only in case you want `QueuedConnection` explicitly for some reason. In this case you can safetely use default `Qt::AutoConnection`. Doc says about it:
>If the receiver lives in the thread that emits the signal, `Qt::DirectConnection` is used. Otherwise, `Qt::QueuedConnection` is used. The connection type is determined when the signal is emitted.

Anyway you should remove the comment above because it creates the false impression that we have an incorrect application design."
406738194,12458,Chocobo1,2020-04-10T12:35:54Z,Seems it isn't in use.
406738816,12458,glassez,2020-04-10T12:37:54Z,"""log"" is incorrect name for this parameter. I would call it ""message"" and rename the next one to ""messageText""."
406739455,12458,glassez,2020-04-10T12:39:40Z,"Format should be either ""%1 was blocked due to %2"" or ""%1 was blocked. Reason: %2""."
406744910,12458,jagannatharjun,2020-04-10T12:55:23Z,`asConst` is used in constructors of LogMessageModel and LogPeerModel.
406767323,12458,jagannatharjun,2020-04-10T13:53:23Z,"I removed suffixes from Message class, this should make the class independent from ""role"" handling,
I replaced ""DataRole"" with ""MessageTypeRole"", which includes different values for type and foreground in addition to message and time. I included the foreground role in the enum as well since QStyledItemDelegate::paint shouldn't paint anything related to the foreground. TypeRole enum constant provides better information about the type of data as compared to the previously used value of Qt::UserRole, one side effect of that was that had to include `logModel.h` in `logFilterModel.cpp`, but that shouldn't be a problem since there is a clear dependency between these two classes. "
406787735,12458,glassez,2020-04-10T14:40:31Z,"Oops... unfortunately, I didn't pay enough attention to this earlier. As a result, we got an incorrect dependency here.
The model should not depend on any particular view/delegate. It must always return view-independent data at least for mandatory QDisplayRole (so that any view can display its data at least in simplified text format). You can, of course, object that we will never use this model with any other views, but this is an incorrect reason.
There is also no point in using a custom foreground role. ""I included the foreground role in the enum as well since QStyledItemDelegate::paint shouldn't paint anything related to the foreground""  is an incorrect judgment. If you don't return Qt::ForegroundRole it just uses default value. If you want to prevent QStyledItemDelegate::paint from painting text you should clear text in passed parameters."
406792581,12458,glassez,2020-04-10T14:51:40Z,">You can, of course, object that we will never use this model with any other views

By the way, we could give the user the option to select a simplified log view (just not using a custom delegate). This might improve performance a bit, right?"
406793863,12458,jagannatharjun,2020-04-10T14:54:23Z,"> If you want to prevent QStyledItemDelegate::paint from painting text you should clear text in passed parameters.

That's the reason I'm not using DisplayRole, even returning for Qt::ForegroundRole will not do anything since DisplayRole is null and the foreground role we return does only make sense with our message.
I can't return valid value for DisplayRole, since then QStyledItemDelegate will paint it with Foreground, I want `QStyledItemDelegate` to only paint background since painting those myself was a headache and you guys would really not accept that code. 
If we were to return a full string with DisplayRole(time + message), it will be a useless effort to separate them. 

> The model should not depend on any particular view/delegate.

I don't understand this logic. Probably I'm inexperience, but you yourself said, that ""model should prepare data and delegate should do the painting accordingly""
the whole purpose of the model is to store and provide data in ""convenience form"", 
I think you're trying to remove the dependency between model and delegate, but I don't think it is possible, they are made and build for each other(XD)"
406798490,12458,jagannatharjun,2020-04-10T15:04:51Z,">By the way, we could give the user the option to select a simplified log view (just not using a custom delegate). This might improve performance a bit, right?


I don't see any performance improvement with that, the only extra work we do is to paint part of a string separately, that doesn't involve any performance heavy calculation or something on that line. "
406801251,12458,glassez,2020-04-10T15:11:23Z,">the whole purpose of the model is to store and provide data in ""convenience form"",
I think you're trying to remove the dependency between model and delegate

Well, it seems we have a misunderstanding of how Qt Model/View is supposed to work (ideally). It's time to make it clear (for me as well). I will try to do this when I find myself near something more convenient to comment on than my smartphone."
406810713,12458,jagannatharjun,2020-04-10T15:32:33Z,"IMHO, I think you want to have model return valid values for ForegroundRole and DisplayRole, but this will just create unnecessary work, first, we will need to separate message and time. Second, I want to use `QStyleItemDelegate::paint` but can't find a way to modify or create a new QModelIndex that fit our needs that is one without DisplayRole and ForegroundRole, 
the second one is the biggest blocker and if we had to not use QStyleItemDelegate::paint, that'll just create unnecessary code which may or may not work everywhere. 
For the record, I tried `QStyle::CE_ItemViewItem` it doesn't paint selection rectangle for items under the mouse and also paint selected item, wth too dark color
@Chocobo1 opinions?
"
406819979,12458,glassez,2020-04-10T15:53:48Z,"Guys, relax, so as not to imitate you, I will not insist on further improving the Model/View architecture in this PR. In reality, we don't have a completely perfect implementation anywhere in the code. And it seems that this is not even always possible."
407019717,12458,glassez,2020-04-11T05:16:04Z,"Well, so why not save original pen immediately before you change it?"
407030817,12458,jagannatharjun,2020-04-11T07:34:42Z,AFAIK this automatic detection will only work when we use `QThread`
407317665,12458,Chocobo1,2020-04-13T04:52:38Z,"Seems this is not the same gray, could you preserve the old value? It was `grey` before."
407324826,12458,Chocobo1,2020-04-13T05:28:17Z,Please try `Qt::darkGray`.
407330729,12458,Chocobo1,2020-04-13T05:54:50Z,omit `QSize` here: `return {...};` 
407330832,12458,Chocobo1,2020-04-13T05:55:18Z,Too long.. use a variable for it. And add parentheses at proper places.
408276901,12458,jagannatharjun,2020-04-14T16:35:18Z,https://github.com/qbittorrent/qBittorrent/pull/12458#issuecomment-613523552
408589969,12458,Chocobo1,2020-04-15T05:31:24Z,"`QSize(4, 4)` where does it come from? Please add comment to code."
408590304,12458,Chocobo1,2020-04-15T05:32:46Z,"`const QSize margins = (defaultSize - fontSize).expandedTo({0, 0});`"
408591867,12458,Chocobo1,2020-04-15T05:38:13Z,"This sounds better to me: ""... else painter ..."" -> ""... otherwise painter ..."""
408593803,12458,Chocobo1,2020-04-15T05:44:02Z,"This should be equivalent `painter->setFont(option.font);`, could you please test it again?"
408595926,12458,Chocobo1,2020-04-15T05:51:07Z,"seems the variable is badly named, I would use `separatorWidth`"
408595950,12458,Chocobo1,2020-04-15T05:51:13Z,same here.
408598074,12458,jagannatharjun,2020-04-15T05:58:05Z,"It is ""separatorleft"", and following one is ""messageLeft"""
408599330,12458,Chocobo1,2020-04-15T06:02:04Z,"Hmm... I see what you mean. But ""left"" isn't a meaningful thing, it is actually a coordinate."
408599556,12458,Chocobo1,2020-04-15T06:02:47Z,maybe `separatorCoordinateX`?
408614581,12458,jagannatharjun,2020-04-15T06:44:15Z,"![image](https://user-images.githubusercontent.com/34717789/79306288-9722ca80-7f12-11ea-825b-070a38f6be1a.png)
175% scaling, as you can see the font size is not set correctly here if we were to use `painter->setFont(option.font);` , I can't find the reason though."
408819891,12458,Chocobo1,2020-04-15T12:56:40Z,why the `static`? It can be removed IMO.
408964013,12458,glassez,2020-04-15T16:11:54Z,Or declare it in anonymous namespace above...
409263110,12458,glassez,2020-04-16T03:42:54Z,"It still seems weird... if copy constructor doesn't produce the same ""value"" there is bug in it."
409266927,12458,jagannatharjun,2020-04-16T03:58:15Z,"I couldn't get if I was doing something fishy, everything is const, so I don't think I can do anything here then
I tried checking qt sources for qfont but they are using private impl so I didn't try to further delve into it."
409278995,12458,jagannatharjun,2020-04-16T04:46:53Z,"I tried sanitizer, both master and this branch seems to be throwing same warnings (there were quite a number of warnings especially with thread sanitizer)"
409548871,12458,glassez,2020-04-16T13:19:11Z,I wonder how QStyledItemDelegate draws the text?
409551968,12458,glassez,2020-04-16T13:23:42Z,"But it's most likely a problem with QFont since an action that shouldn't have any effect still has it.
Just for fun... can you test the following?
```c++
font.setPointSize(font.pointSize());
```"
409574322,12458,jagannatharjun,2020-04-16T13:53:48Z,"hmm it works 
scalling 150%
![image](https://user-images.githubusercontent.com/34717789/79464484-bce5c780-8017-11ea-9733-83405299b002.png)

`Q_ASSERT(font.pointSize() != option.font.pointSize());`  fails"
58292381,4994,glassez,2016-04-02T12:05:11Z,"QVariantList?
"
58292391,4994,glassez,2016-04-02T12:06:20Z,"Use camelCase since you fixing coding style.
"
58292425,4994,glassez,2016-04-02T12:10:14Z,"Fix coding style!
Method definitions aren't allowed in header files.
"
58292468,4994,glassez,2016-04-02T12:15:23Z,"Fix these two enums. Split into several lines.
"
58292480,4994,glassez,2016-04-02T12:15:48Z,"Fix coding style.
"
58292489,4994,glassez,2016-04-02T12:16:21Z,"Dont forget to insert spaces around `=`.
"
58292495,4994,glassez,2016-04-02T12:16:42Z,"Fix coding style!
"
58292501,4994,glassez,2016-04-02T12:17:27Z,"Fix coding style!
"
58292519,4994,glassez,2016-04-02T12:19:14Z,"Fix coding style!
"
58292541,4994,glassez,2016-04-02T12:19:26Z,"Fix coding style!
"
58292552,4994,glassez,2016-04-02T12:20:29Z,"Fix coding style!
"
58292561,4994,glassez,2016-04-02T12:21:18Z,"Fix coding style!
"
58292574,4994,glassez,2016-04-02T12:22:09Z,"Fix coding style!
And in method body too.
"
58292582,4994,glassez,2016-04-02T12:22:42Z,"Add spaces around `<`.
"
58292590,4994,glassez,2016-04-02T12:23:02Z,"Fix coding style!
"
58292606,4994,glassez,2016-04-02T12:23:50Z,"Fix coding style!
"
58292609,4994,glassez,2016-04-02T12:23:58Z,"Fix coding style!
"
58292612,4994,glassez,2016-04-02T12:24:20Z,"Fix coding style!
"
58292618,4994,glassez,2016-04-02T12:24:56Z,"Fix coding style!
"
58292625,4994,glassez,2016-04-02T12:25:24Z,"Fix coding style!
"
58292635,4994,zeule,2016-04-02T12:27:02Z,"Do you mean parameter names? Please note, that this not my code.
"
58292645,4994,glassez,2016-04-02T12:27:44Z,"Fix coding style!
Add space before `}`.
"
58292646,4994,zeule,2016-04-02T12:27:47Z,"This code is not mine.
"
58292648,4994,zeule,2016-04-02T12:27:54Z,"This code is not mine.
"
58292651,4994,zeule,2016-04-02T12:28:01Z,"This code is not mine.
"
58292652,4994,zeule,2016-04-02T12:28:12Z,"This code is not mine.
"
58292655,4994,zeule,2016-04-02T12:28:30Z,"This code is not mine.
"
58292657,4994,zeule,2016-04-02T12:28:40Z,"This code is not mine.
"
58292660,4994,zeule,2016-04-02T12:28:53Z,"This code is not mine.
"
58292672,4994,zeule,2016-04-02T12:30:04Z,"OK
"
58292675,4994,zeule,2016-04-02T12:30:13Z,"This code is not mine.
"
58292676,4994,zeule,2016-04-02T12:30:21Z,"This code is not mine.
"
58292685,4994,zeule,2016-04-02T12:31:00Z,"This code is not mine.
"
58292687,4994,zeule,2016-04-02T12:31:11Z,"This code is not mine.
"
58292688,4994,zeule,2016-04-02T12:31:25Z,"This code is not mine.
"
58292697,4994,glassez,2016-04-02T12:32:15Z,"Fix coding style!
Next getters affected too.
"
58292725,4994,glassez,2016-04-02T12:35:41Z,"Although I didn't see the implementation, but only that component itself takes care of how it is used, speaks of a bad design.
"
58292739,4994,glassez,2016-04-02T12:36:58Z,"Fix coding style!
"
58292744,4994,glassez,2016-04-02T12:37:35Z,"Fix coding style!
"
58292745,4994,zeule,2016-04-02T12:37:45Z,"I don't want to be an author from the Git point of view for the whole files which I touch. Git can ignore whitespace changes and thus I fixed indentation, but not more. What is the point in changing code which is not related to a functional changes of a given commit? This just spoils git history and makes history navigation a nightmare. 
"
58292747,4994,glassez,2016-04-02T12:38:00Z,"Fix coding style!
"
58292749,4994,zeule,2016-04-02T12:38:09Z,"This code is not mine.
"
58292752,4994,glassez,2016-04-02T12:38:31Z,"Fix coding style!
"
58292757,4994,glassez,2016-04-02T12:38:50Z,"Fix coding style!
"
58292761,4994,glassez,2016-04-02T12:38:59Z,"Fix coding style!
"
58292766,4994,zeule,2016-04-02T12:39:32Z,"No, I don't do what you call a ""fixing the coding style"". See my comment above. 
"
58292771,4994,zeule,2016-04-02T12:39:46Z,"This code is not mine.
"
58292789,4994,glassez,2016-04-02T12:40:53Z,"If you do ""Follow project coding style"", you must do it completely.
"
58292824,4994,glassez,2016-04-02T12:42:54Z,"Fix coding style!
"
58292831,4994,glassez,2016-04-02T12:43:22Z,"Fix coding style! Use camelCase.
"
58292834,4994,glassez,2016-04-02T12:43:42Z,"Fix coding style!
"
58292853,4994,glassez,2016-04-02T12:45:34Z,"Fix coding style!
Brace enclosed initializers are allowed in list or aggregate contexts only. Not for copy constructors.
"
58292865,4994,glassez,2016-04-02T12:47:05Z,"Fix coding style!
And below too.
"
58292882,4994,glassez,2016-04-02T12:47:54Z,"Fix coding style!
"
58292918,4994,zeule,2016-04-02T12:49:33Z,"This code is not mine.
"
58292942,4994,glassez,2016-04-02T12:51:52Z,"Fix coding style!
Move private declarations after public.
"
58292958,4994,glassez,2016-04-02T12:53:31Z,"Fix coding style! Use camelCase. All method affected.
"
58292963,4994,glassez,2016-04-02T12:54:27Z,"static_cast
"
58292974,4994,zeule,2016-04-02T12:55:33Z,"What's wrong here?
"
58292975,4994,glassez,2016-04-02T12:55:43Z,"add space before comment
"
58292979,4994,zeule,2016-04-02T12:56:04Z,"This code is not mine.
"
58292981,4994,glassez,2016-04-02T12:56:13Z,"static_cast
"
58293009,4994,glassez,2016-04-02T12:59:30Z,"Fix coding style!
We require extra parenthesis in constructor initialization list.
And also fix spaces in `{}`:

``` c++
    , m_dlPieceColor({ 0, 0xd0, 0 })
```
"
58293013,4994,zeule,2016-04-02T13:00:16Z,"OK, I'll replace the commit title with ""Fix indentation"" 
"
58293037,4994,glassez,2016-04-02T13:01:36Z,"Please separate module includes from system/Qt includes and from app includes using blank lines.
"
58293051,4994,glassez,2016-04-02T13:02:41Z,"Add spaces around `<`.
"
58293066,4994,glassez,2016-04-02T13:04:44Z,"Get rid of these **auto**s. We make only limited use of **auto** keyword. See CODING_GUIDELINES.md
"
58293070,4994,glassez,2016-04-02T13:05:09Z,"Fix coding style.
"
58293074,4994,glassez,2016-04-02T13:06:02Z,"Fix coding style.
"
58293094,4994,glassez,2016-04-02T13:07:55Z,"Fix coding style. No braces with copy constructor.
"
58293097,4994,glassez,2016-04-02T13:08:32Z,"Fix coding style.
Blank line before access specifier.
"
58293107,4994,glassez,2016-04-02T13:09:40Z,"Fix coding style. Add spaces around arithmetic operators.
"
58293115,4994,glassez,2016-04-02T13:10:24Z,"No **auto** here!
"
58293122,4994,glassez,2016-04-02T13:10:48Z,"Fix coding style.
"
58293146,4994,glassez,2016-04-02T13:12:01Z,"Don't use **auto** here.
"
58293229,4994,glassez,2016-04-02T13:18:44Z,"I hope that you read my previous response and I don't have to write it for each such your excuses.
If you do something - do it completely.
"
58293293,4994,glassez,2016-04-02T13:25:09Z,"Really? And I think that is what your code! I didn't see this earlier (in deleted lines).
"
58293354,4994,glassez,2016-04-02T13:30:21Z,"Then don't touch it at all! 
Let me repeat: if you produce ""Follow coding style"" commit, you should completely fix coding style and not just indentation.
"
58293421,4994,glassez,2016-04-02T13:35:18Z,"See CODING_GUIDELINES.md.
We just limit the use of brace enclosed initializers.
"
58293465,4994,glassez,2016-04-02T13:39:16Z,"Better not produce such commits at all. This greatly complicates the inspection of your code.
"
58293594,4994,zeule,2016-04-02T13:51:05Z,"What do you want then? To spoil the git history (forever) for the sake of a review (one time job)?
"
58293615,4994,zeule,2016-04-02T13:53:17Z,"I'm not allowed to use the strict type checking?
"
58293702,4994,zeule,2016-04-02T13:58:48Z,"I suppose you mean the `local` parameter. I agree that this is not the best idea, but otherwise I can imagine only solution with two virtual functions, which is overkill as to me. The parameter is used to compose the tooltip text and to replace "".unwanted"" parts in the file names (I don't know whether the latter is still needed). See  [here](https://github.com/qbittorrent/qBittorrent/pull/4994/files/e60d62acaaff0d4240e9c7a95b52d871aa8dea83#diff-b7bfdef2b8809f9a2f1e5265783255f8R235) and [here](https://github.com/qbittorrent/qBittorrent/pull/4994/files/e60d62acaaff0d4240e9c7a95b52d871aa8dea83#diff-b7bfdef2b8809f9a2f1e5265783255f8R260). Can you suggest a better solution?
"
58293708,4994,glassez,2016-04-02T13:59:07Z,"What do you mean?
Just do `PieceIndexToImagePos transform(m_torrent, m_image);`
"
58293774,4994,glassez,2016-04-02T14:03:42Z,"Fix the coding style is not to spoil the story. This is the same change as any other (for example, as adding a new feature or bugfix). So either do it or don't do it at all.
"
58293804,4994,zeule,2016-04-02T14:05:33Z,"I mean that curly braces gives better type checking. For what reason do you ban it?
"
58293966,4994,glassez,2016-04-02T14:17:40Z,"BETTER type checking???
What do you mean?
If you're going to start telling me about the templates and stuff, you can not do this. Nobody forbids to use something where it is really needed. But in a simple code, it only spoils the readability.
"
58294736,4994,zeule,2016-04-02T15:21:55Z,"> it only spoils the readability.

Speak for yourself, please.
`{}` style initialisation does not allow. for instance, narrowing conversions.
"
58295485,4994,glassez,2016-04-02T16:09:41Z,"> Speak for yourself, please.

I'm talking about the project coding style. When I asked you to discuss this rule, you arrogantly refused.

> {} style initialisation does not allow. for instance, narrowing conversions.

And how it can help you here and in all similar code?
Didn't you read my comments above? It can be applied where it is REALLY needed.
"
58296117,4994,glassez,2016-04-02T16:53:30Z,"As for `filePath.replace(QLatin1String(""/.unwanted""), QString());` - it can be done unconditionally.
As for the second case - this logic belongs to subclasses actually. Bad design is more wrong than your subjective fear of virtual functions here.
"
58296255,4994,glassez,2016-04-02T17:03:14Z,"You just need to make one abstract method `toolTipText()` (and implement it in subclasses) and call it from `showToolTip()`.
"
58296710,4994,zeule,2016-04-02T17:29:33Z,"OK, I'll make the virtual functions.
"
58297831,4994,zeule,2016-04-02T18:42:43Z,"Look, I just asked do you ban this particular feature or not. 

> And how it can help you here and in all similar code?

It helps when used systematically without thinking/decision. In the same way as you switch on a blinker before any turn and before even looking into a mirror, which helps you only when you make a mistake and overlook somebody in  the mirror. 

> When I asked you to discuss this rule, you arrogantly refused.

I don't care about coding style of a particular project I'm contributing too as far as the project provides a tool (or a tool config) to ensure/enforce that style. Whatever the style is, the main difficulties in understanding the another person code is not the number of spaces or position of braces, but, provided the code is well-written, different way of thinking of its authors. And this is unavoidable in OSS projects. 

As for the banning particular language features, I don't understand this entirely. If one thinks that a language feature is not needed, then, perhaps, there are languages which suit better?

I'm sorry that my refusal can be interpreted as a haughtiness, but in fact it was quite the opposite: I feel that I can do nothing on this subject. Starting from the fact that I'm in ultra-right tabs party, so will not like the qBt code style without changing it completely.
"
58297975,4994,glassez,2016-04-02T18:53:07Z,"> And this is unavoidable in OSS projects. 

I am familiar with the OSS projects, the source code which can be read like a book. And that's what we should be!
"
58298398,4994,glassez,2016-04-02T19:29:00Z,"> It helps when used systematically without thinking/decision. In the same way as you switch on a blinker before any turn and before even looking into a mirror, which helps you only when you make a mistake and overlook somebody in the mirror. 

I think it's like wearing a condom all day or live in a bunker (maybe it will save you once but this will cause trouble constantly). Everything has its time and place!
"
58298419,4994,glassez,2016-04-02T19:31:03Z,"> It helps when used systematically without thinking/decision.

This helps completely forget how to think!
"
58303203,4994,zeule,2016-04-03T02:22:44Z,"OK. The code was written before you pushed those rules.
"
58377799,4994,zeule,2016-04-04T13:50:22Z,"You are welcome: issue #5075
"
58475531,4994,zeule,2016-04-05T01:29:50Z,"done
"
58491163,4994,glassez,2016-04-05T06:13:12Z,"`QPair<int, int>`
"
115416405,4994,Chocobo1,2017-05-09T06:36:23Z,"I would write
```c++
if (child->priority() == prio::IGNORED)
    continue;
```"
115416593,4994,Chocobo1,2017-05-09T06:38:03Z,`return (m_size > 0) ? m_availability : 0;`
115416673,4994,Chocobo1,2017-05-09T06:38:52Z,you can remove curly brackets
115416824,4994,Chocobo1,2017-05-09T06:39:41Z,"if you want: `{filesCount, -1.}`"
115416918,4994,Chocobo1,2017-05-09T06:40:29Z,curly brackets...
115417124,4994,Chocobo1,2017-05-09T06:42:07Z,won't hurt to add `QVector::reserve(filesCount)`
115417478,4994,Chocobo1,2017-05-09T06:44:57Z,this line isn't needed now.
115417540,4994,Chocobo1,2017-05-09T06:45:32Z,add `const`
115443807,4994,glassez,2017-05-09T09:21:00Z,"As I recall, this file has `using namespace BitTorrent`."
115444423,4994,glassez,2017-05-09T09:24:20Z,">if you want: `{filesCount, -1.}`

IMO, this may confuse the readers since it looks like list of two items."
115444993,4994,glassez,2017-05-09T09:27:07Z,"Please separate ""earlier return"" part from the rest by blank line."
115445542,4994,glassez,2017-05-09T09:29:38Z,"IMO, `int + bool` is bad practice."
115447189,4994,glassez,2017-05-09T09:37:44Z,Qt5 QString constructor accepts utf8 data so ::fromUtf8 waste space only.
115447652,4994,glassez,2017-05-09T09:40:06Z,&fa
115448206,4994,glassez,2017-05-09T09:42:56Z,It looks like 2 spaces before `public`
115448433,4994,glassez,2017-05-09T09:44:08Z,*m_rootItem
115448771,4994,glassez,2017-05-09T09:45:48Z,Oh please... if it pleases you.
115448986,4994,glassez,2017-05-09T09:46:44Z,There is appropriate constant in some file.
115449083,4994,glassez,2017-05-09T09:47:18Z,Please...
115449376,4994,glassez,2017-05-09T09:48:30Z,"Of course, if you use some advanced editor/ide and this action is not so hard for you."
115449776,4994,glassez,2017-05-09T09:50:30Z,Move definition to cpp.
115450200,4994,glassez,2017-05-09T09:52:43Z,Here are exactly your changes break coding style.
115450327,4994,glassez,2017-05-09T09:53:27Z,Please...
115450428,4994,glassez,2017-05-09T09:54:00Z,Please do it.
115450652,4994,glassez,2017-05-09T09:55:16Z,Please fix it.
115450880,4994,glassez,2017-05-09T09:56:28Z,Please don't forget to do it here.
115451049,4994,glassez,2017-05-09T09:57:22Z,Please move definition in cpp.
115451180,4994,glassez,2017-05-09T09:58:03Z,Please do it here too.
115451261,4994,zeule,2017-05-09T09:58:27Z,"It would create a vector of two elements, don't it?"
115451336,4994,glassez,2017-05-09T09:58:50Z,Please.
115451658,4994,glassez,2017-05-09T10:00:40Z,"Fixing style in cases like this is easier than typing ""This code is not mine."" :)"
115451724,4994,glassez,2017-05-09T10:01:00Z,Please...
115454705,4994,Chocobo1,2017-05-09T10:17:32Z,">It would create a vector of two elements, don't it?

ah yes, got mixed up with something else."
115491478,4994,zeule,2017-05-09T13:40:35Z,And it is *not* used in 11 places. I would better do a separate PR eliminating all of those.
115493587,4994,zeule,2017-05-09T13:48:49Z,"I would prefer to leave brackets here in place: with long lines they increase readability, IMO."
115514206,4994,glassez,2017-05-09T15:06:10Z,Ok.
115532342,4994,glassez,2017-05-09T16:12:36Z,Missing redundant space between two )
115532811,4994,glassez,2017-05-09T16:14:30Z,Redundant space between ( and tSize
115532943,4994,glassez,2017-05-09T16:15:09Z,I mean you forget removing it.
115534424,4994,zeule,2017-05-09T16:21:17Z,Done
115534450,4994,zeule,2017-05-09T16:21:23Z,Done.
115538039,4994,Chocobo1,2017-05-09T16:36:47Z,ok
116256143,4994,zeule,2017-05-12T15:18:38Z,@Chocobo1 submitted PR with this refactoring long time ago (#6330).
706821644,15453,glassez,2021-09-12T11:20:49Z,You shouldn't change icon names since it breaks existing custom themes.
706826357,15453,Mazino-Urek,2021-09-12T11:57:51Z,"I had to as ""view-refresh"" icon is used for both Force recheck and Force reannounce Icon. They server different purposes and thus, another icon was created with a new name.
@jagannatharjun Can you kindly make a patch in your theme bundle if changes were accepted? 

"
706839219,15453,Mazino-Urek,2021-09-12T13:35:34Z,"From this:
![image](https://user-images.githubusercontent.com/22009014/132989657-68bfa40f-e36d-4f45-b92a-bc2634e48048.png)
To this:
![image](https://user-images.githubusercontent.com/22009014/132989698-70ef2495-a384-4d6f-890c-6e7f3202e8bb.png)
"
706847861,15453,xavier2k6,2021-09-12T14:40:11Z,What is the purpose of this??
706850117,15453,Mazino-Urek,2021-09-12T14:57:50Z,"Linking, a useful tool for future reference. I am not going to do it. I have chosen colors that work both light and dark theme, but not perfectly. For that, two icon packs is needed. 
[Material](https://material.io/resources/color/) is a brilliant tool for that. I can remove it if you want, but someone might implement the feature in the future. It will definitely help."
706850917,15453,Mazino-Urek,2021-09-12T15:04:11Z,Or I can mention this under color that I have used this tool to find colors that work for both light and dark theme. 
706853617,15453,xavier2k6,2021-09-12T15:24:52Z,">Or I can mention this under color that I have used this tool to find colors that work for both light and dark theme.

This would be better, IMO

>two icon packs is needed.

IMO I don't think that is totally necessary but I don't want to get into too much of a debate on that."
706854866,15453,Mazino-Urek,2021-09-12T15:34:33Z,Done.
707587979,15453,glassez,2021-09-13T18:38:14Z,"On the other hand, if it enriches the UI appearance, then we can allow such breaking changes. 
In addition, I would return to the issue of making custom themes ""unpacked"" in order to solve the compatibility problem between different Qt versions. @jagannatharjun, are you ready to do this now in order to make all the breaking changes related to the custom themes in the same release?"
707595066,15453,jagannatharjun,2021-09-13T18:49:09Z,"> are you ready to do this now in order to make all the breaking changes related to the custom themes in the same release

Have exams, Will see if I get time, next month for sure 👍"
707685505,15453,thalieht,2021-09-13T21:13:42Z,"It's too dark:

![color](https://user-images.githubusercontent.com/6451685/133152790-d09f382c-fd0d-4629-a725-c2094fb24283.JPG)
"
707732583,15453,xavier2k6,2021-09-13T22:01:39Z,"On the stalled color text icon issues:

RGB 44, 44, 44 (#2C2C2C) is not `GRAY` as comments suggest it is known as `NIGHT RIDER`
Ref.: https://www.htmlcsscolor.com/hex/2C2C2C

Suggestion:
`DimGray`
RGB 105, 105, 105
Hex (#696969)
Ref.: https://www.htmlcsscolor.com/hex/696969

I would probably also change line below to reflect where you got your colors from:
https://github.com/qbittorrent/qBittorrent/blob/407471c5ba49d63a3ce2e71d2498ec793ff8451f/src/gui/transferlistmodel.cpp#L702

I personally use: https://www.htmlcsscolor.com/html-color-names or when picking a variant/web safe color  https://www.htmlcsscolor.com/

Please amend all color comments accordingly where necessary."
707877112,15453,Mazino-Urek,2021-09-14T03:18:41Z,I have mainly taken inspiration from the icon of Google and Microsoft. I have used [this](https://material.io/resources/color/) resource to pick neutral color. 
729206030,15453,FranciscoPombal,2021-10-14T17:40:50Z,"> You shouldn't change icon names since it breaks existing custom themes.
> On the other hand, if it enriches the UI appearance, then we can allow such breaking changes.

@glassez To be fair, we don't promise any sort of ""API"" stability regarding icon names IIRC, so we are free to change them at our own pace without worrying with what others are doing with them.

Of course it is not desirable to change icon names very frequently, but they haven't changed in a long time and I don't expect them to change again for a long time after such a comprehensive redesign such as this one is merged."
729260481,15453,glassez,2021-10-14T18:59:46Z,">To be fair, we don't promise any sort of ""API"" stability regarding icon names IIRC, so we are free to change them at our own pace without worrying with what others are doing with them.

Anyway, icon names are currently part of ""UI theme support interface"", and it is a general rule for all interfaces that they should be as stable as possible.
But as I mentioned above, we can allow such  breaking changes from time to time."
729263016,15453,glassez,2021-10-14T19:03:33Z,"BTW, `UIThemeManager::getIcon()` allows you to set fallback icon so you can use it to provide backward compatibility with existing themes."
730056539,15453,FranciscoPombal,2021-10-15T19:05:09Z,"@glassez 

> Anyway, icon names are currently part of ""UI theme support interface"", and it is a general rule for all interfaces that they should be as stable as possible.

I think we are generally in agreement here, but I think this point you make, in particular, is quite conservative. We never made any documented promise about a versioned, let alone stable ""UI theme support interface"". We could do so _after_ this PR), but we are not bound by such a promise _right now_. This is in contrast with the WebAPI, for example, which has a versioned and documented ""contract"" that we cannot break once set.

Still, even for an undocumented API such as this one, I generally agree with an ""as stable as possible"" policy, because we know 3rd-parties are using it despite any lack of proper API ""contract"". We don't want to disturb the peace for no reason.
I just don't think it should come at the price of delaying this PR even further (i.e., this is a ""not possible"" situation)."
730273912,15453,Chocobo1,2021-10-16T14:59:45Z,wrong order
730274592,15453,Chocobo1,2021-10-16T15:06:10Z,"Also the commit messages isn't up to the standard (mostly it is about the first commit), please revise it before you un-draft the PR.
https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#10-git-commit-message
"
730276595,15453,Mazino-Urek,2021-10-16T15:23:38Z,"I plan on merging the second commit only. First one will just serve as future reference. Or, I can create a clean PR when it is done."
110527293,6156,thalieht,2017-04-08T21:00:00Z,`override`'s instead of `virtual`? No class seems to inherit from this one.
110528087,6156,zeule,2017-04-08T21:46:49Z,"I just reformatted the code, that was written before C++11."
110528250,6156,thalieht,2017-04-08T21:58:37Z,"Yea, was just wondering if you want to change it."
110528261,6156,zeule,2017-04-08T21:59:36Z,"Nope, sorry. Not in this PR."
112502272,6156,glassez,2017-04-20T16:44:03Z,"Preferences is deprecated, did you forget it?"
112502776,6156,glassez,2017-04-20T16:46:17Z,Please use the same naming scheme as in c++ files: useFileIconsCheckBox.
114285231,6156,glassez,2017-05-02T09:58:39Z,"Please, describe this method logic in comments"
114285308,6156,glassez,2017-05-02T09:59:04Z,Move brace to next line.
114285409,6156,glassez,2017-05-02T09:59:34Z,Move brace to next line.
114285557,6156,glassez,2017-05-02T10:00:34Z,Redundant blank lines.
114286631,6156,zeule,2017-05-02T10:07:43Z,Your suggestion?
114287730,6156,glassez,2017-05-02T10:15:25Z,"Since you're still not keeping track of its changes, maybe just use SettingsStorage directly?
Or create appropriate Application property (since we have no separate GUI component class)."
114296659,6156,zeule,2017-05-02T11:19:36Z,"Frankly speaking, `Preferences` deprecation seems to be a bit premature. I think we should either at least teach ""Advanced"" settings page to accept settings from outside or agree on an interface for configurable components. Because right now I have to uncover an implementation detail just to make it accessible for  options dialog. IMO, our current approach is best suited for applications that use context menus for configurations, but not the central options dialog. I will make the requested changes, through. "
114301731,6156,glassez,2017-05-02T11:58:24Z,">IMO, our current approach is best suited for applications that use context menus for configurations, but not the central options dialog. I will make the requested changes, through.

Agree. The current (still not used everywhere) approach was not as good as I wanted it. The same old approach were bad. Apparently, I moved it from one extreme to the other. I often ponder how to make it better."
114304382,6156,zeule,2017-05-02T12:16:17Z,Disagree: all the other members use this name style.
114305404,6156,zeule,2017-05-02T12:22:23Z,"Done with the changes, but don't feel satisfied with the code :("
114355535,6156,glassez,2017-05-02T16:00:57Z,"Ok, leave it as is since we didn't still make refactoring of this ui file."
114356871,6156,zeule,2017-05-02T16:06:23Z,"Not sure whether I need to use `QDir::toNativeSeparators()` here. Can anybody from Windows world tell, please, does `QFileInfo::absoluteFilePath()` always uses native directory separators?"
118666634,6156,glassez,2017-05-26T09:31:47Z,CachedSettingsValue will help you avoid having this function and one extra variable.
118682299,6156,zeule,2017-05-26T11:22:10Z,Thanks!
118683091,6156,zeule,2017-05-26T11:27:56Z,Done.
118820933,6156,glassez,2017-05-27T13:35:29Z,"Since we don't support ANSI WinAPI we shouldn't use compatibility layer. Please use SHGetFileInfoW and LPCWSTR directly.
Also your code wrong. You cast 8-bit char array to wchar_t array."
118821024,6156,zeule,2017-05-27T13:41:13Z,`QChar` is 8-bit wide?
118827552,6156,glassez,2017-05-27T19:33:11Z,Why didn't you use naming scheme for getter/setter (in case of bool it should be isUseSystemFileIcon/setUseSystemFileIcon)?
118827566,6156,glassez,2017-05-27T19:34:00Z,Usually we place methods before fields.
118830122,6156,zeule,2017-05-27T22:28:31Z,"""Is use""? Is it just me or this does not make sense?"
118833823,6156,glassez,2017-05-28T06:20:00Z,"It just has `is<propertyName>` syntax.
Maybe `isSystemFileIconsUsed/setSystemFileIconsUsed` will sound better?"
118837712,6156,zeule,2017-05-28T10:07:41Z,Done.
118837721,6156,zeule,2017-05-28T10:08:14Z,`areSystemFileIconsUsed()` and `setSystemFileIconsAreUsed(bool)`
118837882,6156,glassez,2017-05-28T10:19:33Z,">`areSystemFileIconsUsed()` and `setSystemFileIconsAreUsed(bool)`

No. Property name part of setter/getter must be the same. In this case `systemFileIconsUsed` is property name so `isSystemFileIconsUsed()` and `setSystemFileIconsUsed(bool)` are proper setter/getter names. Also `is` prefix used since it relates to property itself (i.e. is property set)."
118838079,6156,zeule,2017-05-28T10:32:23Z,"Fine, I understand your point. But that is grammatically incorrect. I don't know how to keep it correct and satisfy that rule simultaneously. I see only one way out:
```c++
enum class FileIcons
{
    No,
    Fixed,
    ByType
};

FileIcons fileIconsMode();
void setFileIconsMode(FileIcons mode);
``` "
118838237,6156,glassez,2017-05-28T10:41:01Z,">Fine, I understand your point. But that is grammatically incorrect. I don't know how to keep it correct and satisfy that rule simultaneously.

Agree. But we write not English but C++ :) There is some difference. We can't have a proper English phrases everywhere. It's just Qt naming convention which we use too: setter name is `set<property_name>`, getter name is `<property_name>` (or `is<property_name>`/`has<property_name>` in case of bool type).
>enum class FileIcons

I think it's too much. Besides, where did the third value?"
118840021,6156,zeule,2017-05-28T12:23:35Z,"> But we write not English but C++ :)

Can't agree that this might be a reason to convert meaningful word sequences into something unclear, that can be only memorised but not written again basing on its meaning.

> I think it's too much. Besides, where did the third value?

Why? I'm pretty sure there will be people who want no icons at all. The second value is the current behaviour, and the third one is what this PR offers."
118840924,6156,glassez,2017-05-28T13:11:49Z,">Can't agree that this might be a reason to convert meaningful word sequences into something unclear, that can be only memorised but not written again basing on its meaning.

But your suggestions are not so clear as you think about. First, setFileIconsMode should expect param of type named FileIconsMode. Second, the values of enum should have more meaningful names for ""file icons mode"".
In my opinion, you are again trying to counter your subjective opinion against the current rules."
118841540,6156,glassez,2017-05-28T13:47:35Z,"Really, the naming of boolean getters is not so easy as of other.
```
Naming Boolean Getters, Setters, and Properties
Finding good names for the getter and setter of a bool property is always a special pain. Should the getter be called checked() or isChecked()? scrollBarsEnabled() or areScrollBarEnabled()?
In Qt 4, we used the following guidelines for naming the getter function:
Adjectives are prefixed with is-. Examples:
isChecked()
isDown()
isEmpty()
isMovingEnabled()
However, adjectives applying to a plural noun have no prefix:
scrollBarsEnabled(), not areScrollBarsEnabled()
Verbs have no prefix and don't use the third person (-s):
acceptDrops(), not acceptsDrops()
allColumnsShowFocus()
Nouns generally have no prefix:
autoCompletion(), not isAutoCompletion()
boundaryChecking()
Sometimes, having no prefix is misleading, in which case we prefix with is-:
isOpenGLAvailable(), not openGL()
isDialog(), not dialog()
(From a function called dialog(), we would normally expect that it returns a QDialog.)
The name of the setter is derived from that of the getter by removing any is prefix and putting a set at the front of the name; for example, setDown() and setScrollBarsEnabled(). The name of the property is the same as the getter, but without the is prefix.
```
So according to above `systemFileIconsUsed()` and `setSystemFileIconsUsed(bool)` is better names."
118916081,6156,zeule,2017-05-29T11:15:06Z,`showSystemFileIcons()` + `setShowSystemFileIcons(bool show)` ?
118917364,6156,glassez,2017-05-29T11:24:49Z,Ok.
118918217,6156,glassez,2017-05-29T11:31:22Z,show
118918280,6156,glassez,2017-05-29T11:31:48Z,Please reorder includes.
118924675,6156,zeule,2017-05-29T12:16:53Z,"Ah! Thanks, done."
118931210,6156,Chocobo1,2017-05-29T12:58:05Z,"We didn't strict defined this in coding guidelines, but maybe it's better to layout like this:
```
// headers that are needed in all conditions
#include <QFileIconProvider>

// header inclusion with conditions
#ifdef Q_OS_WIN
#include <Windows.h>
#endif

// project headers
#include ""guiiconprovider.h""
```
Idea is separating out the common headers and the ones that are wrapped in conditions."
118932409,6156,Chocobo1,2017-05-29T13:04:58Z,I would remove the curly braces (for single `if`) here and below.
118934035,6156,Chocobo1,2017-05-29T13:14:42Z,"would testing on more primitive file types better? e.g. `txt` & `bmp`.

>two icons for probably absent files

what happens if the file exist? or it doesn't matter?"
118934616,6156,Chocobo1,2017-05-29T13:18:45Z,"I would do
```
}
else {
```"
118935631,6156,Chocobo1,2017-05-29T13:24:47Z,"From https://msdn.microsoft.com/en-us//library/windows/desktop/bb762179(v=vs.85).aspx:
>You must initialize Component Object Model (COM) with CoInitialize or OleInitialize prior to calling SHGetFileInfo.

"
118936099,6156,zeule,2017-05-29T13:27:52Z,OK.
118936874,6156,zeule,2017-05-29T13:32:20Z,"If files exist the test logic fails, because we need it to work with non-existent files. I cab generate random filenames here, if that is your point."
118936926,6156,zeule,2017-05-29T13:32:44Z,"As far as I know, Qt initialises COM for the main thread."
118939617,6156,glassez,2017-05-29T13:47:35Z,And also test for it existence.
118939622,6156,zeule,2017-05-29T13:47:37Z,"Searching Qt sources proves that I'm wrong. But this code works on Windows, i.e. COM is initialised somewhere. Maybe we should do this initialization in qBt globally, in the Application class? "
118939922,6156,glassez,2017-05-29T13:49:16Z,"As I recall, we do it at application startup for some other purposes."
118940402,6156,zeule,2017-05-29T13:51:54Z,"I can see only one call to CoInitializeEx() in base/utils/misc.cpp, and that is not program-wide."
118943613,6156,glassez,2017-05-29T14:09:57Z,In what place did you find it? Maybe this code run near the program startup and we have its side effect?
118944241,6156,zeule,2017-05-29T14:13:36Z,"https://github.com/qbittorrent/qBittorrent/blob/master/src/base/utils/misc.cpp#L592
But it calls CoUnitializes() too, so no side effect is possible."
118947859,6156,glassez,2017-05-29T14:34:13Z,Can you test your code with CoUnitialize just before SHGetFileInfo?
118948109,6156,Chocobo1,2017-05-29T14:35:43Z,">Maybe we should do this initialization in qBt globally, in the Application class?

I doubt it since:
>CoInitialize function
>Initializes the COM library on the current thread ...

It's thread local."
118951141,6156,Chocobo1,2017-05-29T14:54:35Z,">I cab generate random filenames here, if that is your point.

choosing a (long) unique name might be enough? there should be no gain for messing up this detection.

>would testing on more primitive file types better? e.g. txt & bmp.

And what about this? will the result depends on desktop manager or installed DE icons?
"
118954503,6156,glassez,2017-05-29T15:16:04Z,"It initializes COM for main thread. What's the problem? If we need it in some other thread, we can do it there also."
118956363,6156,zeule,2017-05-29T15:29:40Z,"So, I can add CoInitializeEx() call to WinShellFileIconProvider constructor, or put it around Application::Application(). What should I choose? "
118956774,6156,zeule,2017-05-29T15:33:03Z,"> choosing a (long) unique name might be enough? there should be no gain for messing up this detection.

Something like /tmp/1a2cfb92-ecef-4c08-a1e2-0f3d6b8a1119.png? 

> will the result depends on desktop manager or installed DE icons?

Well, it depends on installed icon set, of course. But if the set does not contain icons for pdf and png, I doubt it contains anything useful, so it is not important then whether the QFileIconProvider::icon() method works or not. "
118958077,6156,Chocobo1,2017-05-29T15:42:13Z,">Something like /tmp/1a2cfb92-ecef-4c08-a1e2-0f3d6b8a1119.png?

yeah, maybe something like: `/tmp/qbt_doesQFileIconProviderWork_<guid or something>.png?`

>But if the set does not contain icons for pdf and png, I doubt it contains anything useful

You're right, ok."
118958115,6156,glassez,2017-05-29T15:42:30Z,"I just debugged it. I think we found another bug here. `::CoInitializeEx(nullptr, COINIT_MULTITHREADED)` in misc.cpp returns RPC_E_CHANGED_MODE. It means the following:
1. CoInitializeEx was called before
2. CoInitializeEx was called with another thread mode"
118959054,6156,zeule,2017-05-29T15:48:49Z,"> yeah, maybe something like: `/tmp/qbt_doesQFileIconProviderWork_<guid or something>.png`?

Oh, good point! Will use it."
118959199,6156,zeule,2017-05-29T15:50:01Z,Can't you put a breakpoint to CoInitializeEx() (or is it imp_CoInitializeEx()?) and trace who does the initialisation?
119024619,6156,glassez,2017-05-30T07:08:01Z,Ok. I done it. QWindowsContextPrivate calls OleInitialize which calls ComInitialize.  So we don't need to do it for main thread. And we should remove this function call from misc.cpp.
119028282,6156,Chocobo1,2017-05-30T07:31:56Z,">And we should remove this function call from misc.cpp.

And add a comment about the ""QWindowsContextPrivate calls OleInitialize"" (in misc.cpp and here)."
119068879,6156,zeule,2017-05-30T11:00:04Z,'} else {' is used everywhere else.
119068959,6156,zeule,2017-05-30T11:00:28Z,Done.
119068986,6156,zeule,2017-05-30T11:00:38Z,Done.
119069008,6156,zeule,2017-05-30T11:00:46Z,Done.
119069464,6156,zeule,2017-05-30T11:03:37Z,Are there only two places where COM initialisation is needed? Will we append such comments everywhere? Isn't an overkill? 
119084380,6156,glassez,2017-05-30T12:27:13Z,"Of course, it would be better to have this information in one place, but I don't know where it should be."
119332125,6156,glassez,2017-05-31T11:19:55Z,"You shouldn't use both `:` and `{}`. The first is for single line statements, the second one is for multiline."
119332803,6156,zeule,2017-05-31T11:24:06Z,Corrected.
125192409,6156,zeule,2017-07-02T20:57:11Z,@sledgehammer999  Does it take the correct branch?
125279534,6156,sledgehammer999,2017-07-03T12:39:47Z,Is this a leftover?
125279705,6156,sledgehammer999,2017-07-03T12:40:45Z,I think this is a leftover too.
125281938,6156,sledgehammer999,2017-07-03T12:52:56Z,leftover
125282285,6156,sledgehammer999,2017-07-03T12:54:49Z,maybe this belongs to the previous commit?
125284155,6156,sledgehammer999,2017-07-03T13:04:12Z,"Typo: ""ask"""
125290467,6156,sledgehammer999,2017-07-03T13:34:27Z,I think both of us missed this.
125306557,6156,zeule,2017-07-03T14:50:16Z,Done.
225180003,9704,glassez,2018-10-15T14:10:45Z,I suppose 11 should be here.
225226078,9704,glassez,2018-10-15T16:08:30Z,Isn't it be implemented in compatible way? I mean replace code but not create separate branch.
225227928,9704,glassez,2018-10-15T16:13:49Z,"Somehow I don't like `boost::lexical_cast`... this code does not indicate at all what kind of string we will get as a result (in contrast with `to_hex()`).

"
225228196,9704,glassez,2018-10-15T16:14:37Z,The same question about having one compatible branch.
225228498,9704,glassez,2018-10-15T16:15:29Z,Is this boost version required now (by libtorrent 1.2)?
225232195,9704,glassez,2018-10-15T16:26:57Z,Or libtorrent 1.2 uses only string_view?
225235050,9704,zeule,2018-10-15T16:35:56Z,"Now probably `string_view` only. I'll change the condition, thanks."
225235218,9704,glassez,2018-10-15T16:36:35Z,Please use static_cast.
225237034,9704,glassez,2018-10-15T16:42:44Z,`template <>`
225237354,9704,zeule,2018-10-15T16:43:38Z,"No, it is for the try_lexical_cast, but come on, 1.55 was released 5 (five) years ago."
225237521,9704,glassez,2018-10-15T16:44:00Z,We use `#pragma once` now.
225238047,9704,glassez,2018-10-15T16:45:48Z,"constexpr?
And functions below."
225240791,9704,glassez,2018-10-15T16:54:47Z,Why is it?
225241583,9704,glassez,2018-10-15T16:57:17Z,Personally I agree with increasing boost version (even much more).
225247331,9704,glassez,2018-10-15T17:13:54Z,Let's keep `class` for class declarations and  use `typename` for templates.
225248031,9704,glassez,2018-10-15T17:16:27Z,Please reformat pointers and references.
225414106,9704,glassez,2018-10-16T06:43:45Z,We only need to do this a few times. Why not just have two code branches in respective alert handlers? Then it will be easier for us to get rid of the libtorrent-1.1 support when the time comes.
225414681,9704,glassez,2018-10-16T06:46:10Z,Is counters type changed in libtorrent-1.2? Why is `boost::numeric_cast<quint64>` needed? Are you afraid it might not fit in `quint64`?
225415023,9704,glassez,2018-10-16T06:47:45Z,I would name it `fromLibtorrentString()`
225416025,9704,glassez,2018-10-16T06:52:14Z,"Couldn't `{}` fit in both cases?
```c++
libt::create_torrent newTorrent(fs, m_params.pieceSize, -1
    , (m_params.isAlignmentOptimized ? libt::create_torrent::optimize_alignment : {}));
```"
225457427,9704,arvidn,2018-10-16T09:10:30Z,"in this specific case though, the issue is that `to_hex()` was removed from the libtorrent API. It was never really meant to be exposed. you should be able to use `lexical_cast` in both cases. `lexical_cast` is just shorthand for `std::stringstream s; s << m_nativeHash; s.str()`. There are plenty of alternative ways to convert a binary blob to hex. Like (untested):

```
std::string to_hex(lt::sha1_hash const& hash) {
   std::stringstream s;
   s << std::hex;
   for (auto const c : hash) s << c;
   return s.str();
}
```"
225460333,9704,arvidn,2018-10-16T09:18:50Z,"I imagine you could have a `from_hex` function that looks like this (again, untested):

```
lt::sha1_hash from_hex(std::string const& str) {
   std::stringstream s(str);
   s >> std::hex;
   lt::sha1_hash ret;
   for (auto& c : ret) s >> c;
   return ret;
}
```"
225461118,9704,arvidn,2018-10-16T09:21:09Z,"I think `static_cast<>` is reasonable here. One thing to keep in mind is that an if-condition is a boolean context, which won't require the cast. So you could do this:

`return (m_nativeInfo.source & libt::peer_info::dht) ? true : false`

or just `return bool(m_nativeInfo.source & libt::peer_info::dht);`"
225461590,9704,arvidn,2018-10-16T09:22:29Z,I think it would be reasonable to write this as: `return lt::file_index_t{index}`;
225462265,9704,zeule,2018-10-16T09:24:21Z,can not be used as the right side of the '?' operator.
225465375,9704,arvidn,2018-10-16T09:33:04Z,I don't think there's a good reason to take the `string_view` by const ref here. it's already a reference type
225466004,9704,arvidn,2018-10-16T09:34:55Z,"Perhaps I misremember, but the `0` in the top version is also the flags, and passing different flags will give you different behaviours in the different versions"
225467657,9704,arvidn,2018-10-16T09:39:06Z,"if you just want a duration of 0 minutes, you can also say `0min` (as long as you `using namespace std::chrono_literals`)."
225467945,9704,arvidn,2018-10-16T09:39:56Z,"putting ""InMinutes"" in the variable name here smells a bit like hungarian notation now. It's already encoded in the type"
225468990,9704,arvidn,2018-10-16T09:42:55Z,"instead of `status_flags_t(0)`, I'm pretty sure you can just say `{}`, (in fact, that might work in both libtorrent 1.1.x and 1.2.x).

However, keep in mind that a call to `status()` is quite expensive, since it's a round-trip to the libtorrent thread."
225469920,9704,zeule,2018-10-16T09:45:41Z,"These changes were long living as an unofficial patch in my fork. I did want to change as less as possible to simplify merging for me, and did not change the function name. That is why this PR is full of similar inappropriate for the mainline decisions. I hope to sort that out before merging."
225470750,9704,glassez,2018-10-16T09:48:16Z,qBittorrent Coding style prohibits using function-style cast and implicit casting numbers to boolean.
225470910,9704,zeule,2018-10-16T09:48:46Z,"We still support C++11, there are no chrono literals there."
225472318,9704,arvidn,2018-10-16T09:52:43Z,"with C++11 you should be able to just say: `{a->address, a->port}`"
225474743,9704,arvidn,2018-10-16T09:59:52Z,"counters returns a `span<std::int64_t const>`, so you don't really need to take it by reference"
225475155,9704,arvidn,2018-10-16T10:01:07Z,"I imagine there may be a conversion warning here, because the libtorrent counters are signed."
225475330,9704,arvidn,2018-10-16T10:01:40Z,(which I think your counters should be too)
225476088,9704,arvidn,2018-10-16T10:04:03Z,I added this header in late versions of 1.1.x as well actually
225477144,9704,arvidn,2018-10-16T10:07:22Z,"technically, indices into arrays are `std::ptrdiff_t`, but I think standard containers got this wrong a long time ago. Heh, in fact, I got this wrong in my `span<>` as well. I will try to fix that."
225489373,9704,glassez,2018-10-16T10:48:48Z,">However, keep in mind that a call to status() is quite expensive, since it's a round-trip to the libtorrent thread.

We try to use it only when it is impossible to use cached values."
225490347,9704,arvidn,2018-10-16T10:52:17Z,"I don't think this is a duration, is it? It looks like it would be a `time_point`"
225490679,9704,arvidn,2018-10-16T10:53:29Z,"I think you can use this line for both version, right? `makePieceIndex()` already provides the abstraction"
225490688,9704,glassez,2018-10-16T10:53:31Z,If all supported libtorrent versions have the counters of signed type we should use qint64.
225491435,9704,arvidn,2018-10-16T10:56:14Z,unfortunately 1.1.x uses `std::uint64_t`
225491542,9704,zeule,2018-10-16T10:56:40Z,The standard containers are not arrays.
225531465,9704,arvidn,2018-10-16T13:10:24Z,"the change to support multiple mappings per port seems orthogonal to the 1.2 update, no?"
225532206,9704,arvidn,2018-10-16T13:12:33Z,"you're not actually allowed to put things in the `std` namespace. I think a better way to do this is to put this template in your namespace and when building with C++17, just pull it in from `std` with `using` instead."
225532997,9704,arvidn,2018-10-16T13:14:34Z,"these literals are from C++14, in case you wanted to still be compatible with C++11"
225533501,9704,arvidn,2018-10-16T13:15:55Z,"duration has `operator%` which may be simpler, or at least more straight forward"
225534606,9704,arvidn,2018-10-16T13:18:09Z,"I think it would be a lot nicer if `getMaxSeedingMinutes()` would return a duration instead. Then it wouldn't even need to have `Minutes` in its name. Same thing goes for `setGlobalMaxSeeding`, since it takes a proper type now, it doesn't need `Minutes` either"
225535259,9704,arvidn,2018-10-16T13:19:45Z,I think a slightly safer way of doing this is to explicitly cast the duration to `minutes` before getting `count()`. Otherwise you rely on the function to specifically return minutes. you can use `duration_cast<minutes>()`
225535423,9704,arvidn,2018-10-16T13:20:10Z,"if literals are allowed, I think ` >= 0s` is nicer than calling `count()` (and below too)"
225536329,9704,arvidn,2018-10-16T13:22:32Z,"are you sure you know what unit `count()` returns? I thought `friendlyUnit` would take any `duration`, in which case you don'y need to call `count()`. In fact, calling `count()` should be avoided generally, that's when you lose type safety. Typically it's only required when interfacing with other APIs (like QT)"
225536442,9704,arvidn,2018-10-16T13:22:49Z,same thing goes for the change above
225537690,9704,arvidn,2018-10-16T13:26:01Z,are you sure `MAX_ETA` is the same unit as `etaL` and `etaR`? just calling count seems a bit dangerous
225537934,9704,arvidn,2018-10-16T13:26:40Z,I think a better approach would be to turn `etaL` and `etaR` into proper duration types. i.e. tell the reader what unit `left.data()` and `right.data()` returns.
225538469,9704,zeule,2018-10-16T13:28:05Z,"@arvidn, I will change the code with chrono types, of course. As I wrote you earlier, I'm porting these changes from a fork where I did  want to change as little as possible.

P.S. Could you tell me, please, will you drop autoools from the 1.2 release? "
225875563,9704,zeule,2018-10-17T10:55:00Z,Notice `libtorrent::sha1_hash::size` became a function
225876855,9704,zeule,2018-10-17T10:59:18Z,"Seems like we do not use negative durations, thus `duration_cast` is enough, there is no need tor `floor`."
225878851,9704,zeule,2018-10-17T11:06:01Z,But `std::chrono::days` is from C++20. Or did I interpret the suggestion incorrectly? 
226007051,9704,glassez,2018-10-17T16:34:55Z,"@zeule, please don't introduce any non required changes in this PR."
226064552,9704,zeule,2018-10-17T19:26:06Z,"The values come from ""marshaling"" via `QVariant` and type information is lost. What is worse, `QVariant` interface does not signal type mismatch when demarshaling, simply returning default value `T()`. Thus I see no difference between using `count()` here or  in would be cast from `QVariant` earlier. "
226065459,9704,zeule,2018-10-17T19:29:28Z,"I remember I was making only compilation fixes in the commits used as sources for this PR, but let me check."
226107724,9704,arvidn,2018-10-17T21:53:18Z,"I'm suggesting you make `etaR` and `etaL` of type `std::duration`. That way, `operator>=` will do the right thing, regardless of the `MAX_ETA` unit.

right now, you rely on `MAX_ETA` specifically being `std::minutes`, if you change the value of this constant to be specified in seconds, it breaks."
226112823,9704,zeule,2018-10-17T22:15:51Z,"But then I have to ensure that when I pack the duration into `QVariant` and unpack here, I use the same type. Otherwise things break in a similar way. Or I can put a rule that `QVariant` always contains seconds, which doe not differ significantly from what I have now, except that I can check in an IDE that `MAX_ETA` is indeed seconds."
226116189,9704,arvidn,2018-10-17T22:31:58Z,"I'm not familiar with `QVariant`, but right now it contains a raw integral, which the reader of this code needs to know the unit of. I'm suggesting that you ""unpack"" this integral into a chrono type. This will serve two purposes, it will increase the coverage of using proper types and improve type safety. It will also make it *explicit* that you are treating this raw integral as seconds or minutes (I forget which one it is), so it becomes easier for a reader to understand the intention or spot a bug if it's wrong.

fundamentally though, it would probably be better to store a `chrono::duration` type in the variant too"
226116318,9704,arvidn,2018-10-17T22:32:39Z,"you're right that as long as the variant is a raw integral, you can still make a mistake of treating it as the wrong unit, but as the code is now, you have more opportunities to make that mistake"
226212904,9704,glassez,2018-10-18T08:30:32Z,"I mean use new code with both libtorrent versions:
```c++
m_hashString = QString::fromStdString(boost::lexical_cast<std::string>(m_nativeHash));
```"
226226716,9704,glassez,2018-10-18T09:08:47Z,Blank line above is redundant.
226228911,9704,glassez,2018-10-18T09:14:35Z,"How about join these two:
```c++
template <typename IndexType>
inline constexpr IndexType makeNativeIndex(IndexType::underlying_type index)
{
    return IndexType {index};
}
```
And the second two:
```c++
template <typename IndexType>
inline constexpr IndexType::underlying_type nativeIndexValue(IndexType index)
{
    return static_cast<IndexType::underlying_type>(index);
}
```"
226229817,9704,glassez,2018-10-18T09:16:55Z,"Please reformat all pointer and references:
```c++
Type &ref;
Type *ptr;
Type *funcname();
// etc.
```"
226230252,9704,glassez,2018-10-18T09:18:18Z,"@zeule, please comment on it."
226230629,9704,glassez,2018-10-18T09:19:26Z,Maybe comment it in the code why?
226236606,9704,glassez,2018-10-18T09:37:49Z,It's weird that you don't use universal initialization...
226237218,9704,glassez,2018-10-18T09:39:51Z,What type of `libt::session::global_peer_class_id` in libtorrent-1.2?
226238176,9704,glassez,2018-10-18T09:42:35Z,I wouldn't duplicate `std::chrono::minutes` and just use `auto` at left side.
226238375,9704,glassez,2018-10-18T09:43:15Z,Why do you use `duration_cast` above and don't do it here?
226239222,9704,glassez,2018-10-18T09:45:31Z,Can we define literals of the same name and use them in c++11 mode?
226277021,9704,glassez,2018-10-18T12:04:12Z,Please don't remove blank line above.
226316908,9704,glassez,2018-10-18T14:01:54Z,Is we indent `case` satatements?
226317404,9704,glassez,2018-10-18T14:03:09Z,I would use `alertSocketType(p)` in `switch` directly.
226318451,9704,glassez,2018-10-18T14:05:41Z,"Either create variable or define separate helpers (one for extracting address, and the second one for port)."
226369530,9704,glassez,2018-10-18T16:07:44Z,"How about create ""bittorrent/private/libtorrentfwd.h""?"
226372318,9704,glassez,2018-10-18T16:15:25Z,Using `std::chrono` types outside libtorrent abstraction layer seems inconvenient to me. It only leads to numerous conversions between these types and the types we use elsewhere in the qBittorrent code.
226372985,9704,glassez,2018-10-18T16:17:18Z,"Just ""private/index.h"""
226376438,9704,glassez,2018-10-18T16:27:04Z,"Now I still came to the conclusion that ""std::chrono"" does not bring us any convenience. I only see the complexity of code and multiple type conversions. Apparently, we should convert it immediately after we get it from libtorrent and  before we pass it to libtorrent."
226378845,9704,glassez,2018-10-18T16:32:39Z,static_cast is redundant here.
226379774,9704,glassez,2018-10-18T16:35:29Z,Why don't you cast to int?
226380395,9704,glassez,2018-10-18T16:37:26Z,"Seems wrong. It constantly returns false.
I would use some helper template:
```c++
template <typename Flags>
inline constexpr bool testFlags(Flags f1, Flags f2)
{
    return (f1 & f2) == f2;
}
```
Or just test them one by one:
```c++
return (m_nativeStatus.flags & libt::torrent_flags::paused)
    && (m_nativeStatus.flags & libt::torrent_flags::auto_managed);"
226384611,9704,glassez,2018-10-18T16:51:13Z,resume_data can be null
226549007,9704,arvidn,2018-10-19T06:58:27Z,"I don't see these typedefs used anywhere. the comment mentions C++11, did you mean libtorrent-1.1.x?"
226549427,9704,arvidn,2018-10-19T07:00:50Z,"It would be slightly longer names to use a template. However, instead of these functions, you could just construct `libt_file_index_t` objects directly (and in 1.1.x it would just construct an `int`)"
226549646,9704,arvidn,2018-10-19T07:02:00Z,"oh, C-style formatting. Is the convention to also do: `std::vector<char *>` (with the space)?"
226550119,9704,arvidn,2018-10-19T07:04:41Z,there's a `peer_class_t`. using it in an ip filter is a bit of a wart unfortunately. I've been considering adding some utility functions to smoothen this out.
226550435,9704,arvidn,2018-10-19T07:06:17Z,"sort of. user defined literals has to start with an underscore, so you could have `_s` and `_min` for seconds and minutes"
226550996,9704,arvidn,2018-10-19T07:09:07Z,"In fact, I would suggest not using the `minutes` type for any variables or data members, instead use the `duration` type of the clock you're using. for example: `lt::duration` (I realize you can't use that directly, since it wasn't there in 1.1.x). But for instance, you could make a typedef for `std::chrono::monotonic_clock::duration` and use that. All the unit conversions will be done (mostly) automatically"
226551333,9704,arvidn,2018-10-19T07:11:02Z,I suspect you may save conditional code like this by creating a typedef to `download_priority_t`
226551559,9704,arvidn,2018-10-19T07:12:14Z,you can actually control the paused state with the flags too now
226551703,9704,arvidn,2018-10-19T07:13:04Z,"This doesn't look right. in the first version you ADD the upload mode flag, in the bottom one you REMOVE the upload mode flag"
226552650,9704,arvidn,2018-10-19T07:18:10Z,"or if it's OK to drop support for libtorrent 1.1.3 and earlier, it could be included unconditionally"
226554675,9704,arvidn,2018-10-19T07:27:33Z,"I think the excessive conversions happen because the chrono types are fully embraced and slightly oddly used.
the specific unit types `minutes`, `seconds`etc. are really meant to just be used when converting to and from raw integrals. Functions and constants like this should just use the native `duration` type, and be initialized using a specific unit. like this:

```
const duration TorrentHandle::USE_GLOBAL_SEEDING_TIME = minutes(-2);
```

or better yet:
```
const duration TorrentHandle::USE_GLOBAL_SEEDING_TIME = -2_min;
```

Btw, the ""convenience"" mostly comes in the type safety and *not* having time unit bugs"
226555706,9704,arvidn,2018-10-19T07:32:35Z,is the inner `static_cast` really necessary?
226555864,9704,arvidn,2018-10-19T07:33:20Z,"As I've pointed out before, I think all these functions should return a `duration`, not a specific unit."
226556161,9704,arvidn,2018-10-19T07:34:31Z,"is this duration cast necessary? if you would return a `duration` I don't think it would be (as long as you end up using the same clock as libtorrent, which I think you'd be likely to)"
226556625,9704,arvidn,2018-10-19T07:36:33Z,"I think this will introduce a blocking call, where there didn't used to be one"
226559612,9704,glassez,2018-10-19T07:50:04Z,Usually we have this space in new code. What's wrong with it?
226560765,9704,glassez,2018-10-19T07:54:50Z,We discussed it before. You shouldn't introduce type names unacceptable by project coding style even if they are aliases for different style names.
226563633,9704,arvidn,2018-10-19T08:05:56Z,"not very important obviously, I just think the `*` and `&` belongs together with the rest of the type. It's all good though"
226607177,9704,glassez,2018-10-19T10:53:58Z,"What `duration` are you talking about?
`std::chrono::duration` is just template and `std::chrono::minutes` (etc.) is its instantiation.
Or am I missing something?"
226611548,9704,zeule,2018-10-19T11:13:39Z,"In this PR they are used in lambdas that take libtorrent indicies as parameters, and because of C++11 I can't write `auto` there."
226612488,9704,zeule,2018-10-19T11:18:00Z,"I agree that typedefs and functions are somewhat overlap. I used functions because I knew I can auto-type variables then. Now, with C++11 it does not work always and typedefs are required. I will eliminate the overlapping."
226614948,9704,zeule,2018-10-19T11:28:53Z,Certain durations in qBt have resolution of minutes explicitly. I would not want tot loose that.
226615415,9704,zeule,2018-10-19T11:31:03Z,And that is why I would better switch to C++14 instead of creating slightly different copies of its content in qBt.
226616632,9704,zeule,2018-10-19T11:36:41Z,1.1.3? I find out the header was released for the first time in 1.1.8.
226617068,9704,zeule,2018-10-19T11:39:01Z,"> What duration are you talking about?

clock_type::duration typedef."
226617469,9704,zeule,2018-10-19T11:40:44Z,Why should I cast to int when I'm extracting the underlying index value (as it is written explicitly now)? 
226691529,9704,glassez,2018-10-19T15:38:51Z,">type safety and not having time unit bugs

I'm sorry, but I'm too stupid and I don't understand how this affects qBittorrent code outside of the libtorrent abstraction layer. All we need there (except the interaction with libtorrent abstraction layer) is to get some duration value from the user through some control providing us with a raw integer, display this value on the screen through some control getting from us a raw integer."
226695227,9704,arvidn,2018-10-19T15:50:21Z,"I've seen lot's of code (in qbt) that does other things to durations too, comparing them for instance.
What type safety buys you is to not have to name functions and variables with ""InMinutes"" or ""InSeconds"". It lowers cognitive load of the reader as there is no longer a concern of what unit a raw integer is."
226702195,9704,glassez,2018-10-19T16:12:53Z,"Maybe I don't like it at the moment because the new code isn't clean enough yet. 
Really I like the pros of these types, but the code changes look like ""solid inconveniences."" Although I've watched some not all. Maybe the whole picture isn't so scary.

As of using concrete types I agree with @arvidn. We should use ""duration"" everywhere unless other type is required. I.e. function types and parameters, class fields and constants should be of type ""duration"" (we should add alias for it, e.g. ""BitTorrent::Duration"")."
226706835,9704,glassez,2018-10-19T16:29:06Z,Seems like rebasing issue. firstOffset was changed to fileOffset in master some time ago.
226708100,9704,glassez,2018-10-19T16:33:23Z,"Let's use ""lt"" namespace. ""libtorrent"" is too long."
226817587,9704,glassez,2018-10-20T05:52:05Z,"Why not ""all of""?"
226817797,9704,glassez,2018-10-20T06:03:38Z,You have these lines two times.
226817942,9704,glassez,2018-10-20T06:10:16Z,"Based on the above proposals, it should be Duration. Also it will be enough to declare metatype for Duration only. "
226818451,9704,glassez,2018-10-20T06:42:01Z,Why not instantiate days from chrono::duration?
230548659,9704,glassez,2018-11-03T08:28:07Z,"@arvidn, what's real benefit of having classes for indexes?
I don't recall having any difficulty with the integers. Now it requires frequent (and meaningless) type conversions."
230555424,9704,arvidn,2018-11-03T13:40:12Z,"This general concept is typically referred to as ""strong types"". It's become a very popular thing in the C++ community in the last 5 years or so (at least to talk about). Personally I've employed it pervasively at my current and last job, with great success.

First, to respond to the meaningless type conversions: if you store piece indices, file indices, download priorities, peer classes, etc. in variables of the specific type, you don't need the type conversion (and you gain the type-safety). The annoyance of the type conversions is a feature, to indicate that the parameter- or variable type should should be changed to match what you're passing in.

A counter-question could be: Why do you use an `int` to store a piece index? The vast majority of operations you can perform on an integer are not necessary and most likely bugs.

In my experience, once you embrace the type system fully and make sure all your types match, or at least maximises the times they match, you really gain a lot of confidence that your code fits together correctly. (I would argue that the [mars climate orbiter crash](https://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure) belongs in this category of errors). I also had a type related bug in code converting from internal file mode flags to OS specific ones, where an operator precedence mistake caused the flags to be mixed with each other.

Sometimes embracing the type system requires you to get creative, to make sure that your argument types match. For example, `std::vector<T>::operator[]` takes a `std::size_t` as the index. If you want to pass in a `piece_index_t`, what do you do? You can create a new template, that derives from `std::vector` but replaces all index types with a template parameter. (That's what I typically [do](https://github.com/arvidn/libtorrent/blob/master/include/libtorrent/aux_/vector.hpp#L43)). In fact, I've done this for so many containers (`std::array`, `std::deque`) that I generalised the concept of [wrapping a cointainer](https://github.com/arvidn/libtorrent/blob/master/include/libtorrent/aux_/container_wrapper.hpp), specifying the index type. I've also wrapped [`std::unique_ptr<>`](https://github.com/arvidn/libtorrent/blob/master/include/libtorrent/aux_/unique_ptr.hpp) (the version that holds an array) to allow specifying the index type. There are [other](https://github.com/arvidn/libtorrent/blob/master/include/libtorrent/aux_/typed_span.hpp#L45) [examples](https://github.com/arvidn/libtorrent/blob/master/include/libtorrent/bitfield.hpp#L268) too.

Apart from interacting with containers, I think I/O is the other major hurdle to use specific types.
The modern ways of printing has a much better story here, for instance implementing a templated `operator<<` and `operator>>` for iostream is pretty simple. Or a hook for `fmtlib`.

Granted, if you stick to `printf()` you will need to cast. But I don't ascribe a lot of value to be compatible with something that's so unsafe to begin with anyway (it could be seen as a feature, to discourage use of `printf()`, and ellipsis in general).

The third case I can think of is where you need some specific ""special"" operation. For instance find the piece index in the middle between two other indices, or find the range of pieces that represent a certain number of bytes. My approach to these kinds of operations is to wrap them in functions that have a type-safe interface, and then do the casting internally.

I'm genuinely interested if you have cases where you're forced to cast that doesn't fit one of the categories I outlined (or if there's a case that's common but doesn't have a good solution for using strong types).

I also recognise that converting an existing program to use strong types is quite a daunting task, and that it might not be super exciting to do."
230559129,9704,glassez,2018-11-03T15:44:22Z,"@arvidn, thank you for detailed description. I'm just a hobbyist and I don't have enough experience to understand some concepts at once (I see how it's used here and it raises questions for me). Although I think the code would look nicer if we didn't have to support both libtorrent versions.
Now I have food for thought. If I have more specific comments, I'll call you."
233230226,9704,zeule,2018-11-13T21:34:23Z,This constructor is explicit.
233329869,9704,glassez,2018-11-14T06:50:41Z,So `return std::chrono::minutes {m_globalMaxSeedingMinutes};` isn't allowed?
233431541,9704,zeule,2018-11-14T12:46:38Z,"Oh, my bad. I mistaken that for `return {m_globalMaxSeedingMinutes};`."
46769078,4266,glassez,2015-12-06T11:15:58Z,"Use camelCase in new code. See CODING_GUIDELINES.md.
"
46772378,4266,naikel,2015-12-06T16:21:30Z,"Ok, will do, but only half of the original code is camelCased.  Just the C++ source code right? JavaScript will be a mess if it's camelCased.
"
46775087,4266,glassez,2015-12-06T20:04:56Z,"> but only half of the original code is camelCased

Rules have been developed recently. We use them in new code and changing old from time to time.
"
59979032,4266,glassez,2016-04-17T06:40:27Z,"Fix coding style. Move `&&` operator to next line.
"
59979110,4266,glassez,2016-04-17T06:47:27Z,"Fix coding style in this method.
"
94861027,4266,thalieht,2017-01-05T22:01:10Z,Coding style
94861063,4266,thalieht,2017-01-05T22:01:21Z,Coding style
95137295,4266,thalieht,2017-01-09T11:14:44Z,this-> is not necessary.
95137312,4266,thalieht,2017-01-09T11:14:50Z,this-> is not necessary.
95137357,4266,thalieht,2017-01-09T11:15:18Z,"Why limit it to a year? Sure, probably noone will set it even to a year but it should be the user's choice."
95137403,4266,thalieht,2017-01-09T11:15:37Z,"Why not a reference?

EDIT: Never mind. Couldn't find anything about this in the coding guidelines."
95137451,4266,thalieht,2017-01-09T11:15:58Z,"I doubt this will be accepted here. Maybe it's better to make a new method with it and connect it with the checxkboxes somewhere in the constructor?

```
connect(m_ui->checkMaxRatio, SIGNAL(toggled(bool)), this, SLOT(toggleComboRatioLimitAct()));
connect(m_ui->checkMaxSeedingMinutes, SIGNAL(toggled(bool)), this, SLOT(toggleComboRatioLimitAct()));

void OptionsDialog::toggleComboRatioLimitAct()
{
    m_ui->comboRatioLimitAct->setEnabled(m_ui->checkMaxRatio->isChecked() || m_ui->checkMaxSeedingMinutes->isChecked());
}
```

 "
95141150,4266,zeule,2017-01-09T11:45:30Z,"I would use `std::pair<int, bool> maxSeedingTime()` and then the function would be:
```C++
std::pair<int, bool> TorrentHandle::maxSeedingTime() const
{
    return m_seedingTimeLimit != USE_GLOBAL_SEEDING_TIME ?
        std::make_pair(m_seedingTimeLimit, false) :
        std::make_pair(m_session->globalMaxSeedingMinutes(), true);
}"
95154232,4266,naikel,2017-01-09T13:27:26Z,"True, that's the result of the search/replace from the previous implementation that used a global variable instead.  I'll fix it."
95154261,4266,naikel,2017-01-09T13:27:35Z,"Same, see above.  I'll fix it."
95154335,4266,naikel,2017-01-09T13:28:13Z,"I have to put a number in there, like the max ratio has one.  I chose the first coherent option I could think of."
95154518,4266,naikel,2017-01-09T13:29:31Z,"I tried to follow the same coding style that was already there.  Look for maxRatio() and other similar functions that has the same implementation.  Remember this PR was already approved, but never merged.  This is just a rebase actually, but I really appreciate your comments, they have been very helpful."
95154600,4266,naikel,2017-01-09T13:30:12Z,It was already accepted before (the whole PR was).  I don't see a problem with this method.
95208912,4266,thalieht,2017-01-09T17:57:22Z,"Oh ok, i just found it strange to enable/disable that combo box every time something is changed in the options."
95209632,4266,thalieht,2017-01-09T18:00:52Z,"My bad, didn't look at the other methods."
95225014,4266,naikel,2017-01-09T19:14:15Z,":) That's because you haven't tried the PR, just read the code.  If neither the option ""Seed torrents until their ratio reaches"" nor  ""Seed torrents until their seeding time reaches"" are enabled, the action (where you select if you want to Pause or Remove the torrent) should be disabled.  It's the same functionality than before but now you have to select either one of the options.  

Originally if you select ""Seed torrents until their ratio reaches"" enables the Action drop-down field and if you unselect it, it disables it.  Same thing but now with two options.

I welcome you to try the PR.  It works great and it's a really useful feature :)"
95252929,4266,thalieht,2017-01-09T21:43:01Z,I did try it and understand what it does otherwise i wouldn't make a comment. I meant that you put it in `enableApplyButton()` which is executed when pretty much anything is changed in the options.
115940772,4266,thalieht,2017-05-11T09:12:30Z,"Parentheses
`((initialRatioValue == -1) && (initialTimeValue == -1))`"
116003374,4266,naikel,2017-05-11T14:23:38Z,Why? there's no such thing in the code guidelines.
116007982,4266,thalieht,2017-05-11T14:39:50Z,Heh you're right. It's for readability. I've seen it suggested so many times i thought it is for sure in the guidelines. Either way i've seen at least one more and gonna point it out in a while. Feel free to ignore them if noone else says something about it.
116009034,4266,thalieht,2017-05-11T14:43:29Z,"Parentheses
((maxRatioValue < 0) && (maxSeedingTimeValue < 0))"
116009241,4266,thalieht,2017-05-11T14:44:09Z,"Parentheses
((speed_average.upload > 0) && (maxRatioValue >= 0))"
116013911,4266,Chocobo1,2017-05-11T14:59:43Z,">It's for readability. 

+1"
116022400,4266,glassez,2017-05-11T15:29:32Z,+1
116518777,4266,glassez,2017-05-15T15:15:30Z,You mistyped here. Please fix `-1.` to `-1`.
116519516,4266,glassez,2017-05-15T15:18:02Z,"You should put this condition into one line (since it became not so long after your changes):
```c++
if (torrent->isSeed() && !torrent->isForced()) {
```"
116520105,4266,glassez,2017-05-15T15:20:04Z,This is meaningless since it always true here.
116521156,4266,glassez,2017-05-15T15:23:42Z,"It is preferable to log some events, but not actions (i.e. ""something done"" not ""doing something..."")."
116522159,4266,glassez,2017-05-15T15:27:12Z,"Redundant indentation level.
```c++
else if (!torrent->isPaused()) {
    // Pause it
```"
116522516,4266,glassez,2017-05-15T15:28:29Z,"Redundant indentation level.
```c++
else if (!torrent->isPaused()) {
    // Pause it
```"
116523688,4266,glassez,2017-05-15T15:32:26Z,"Since all groups are equivalent you shouldn't enclose two of them:
```c++
    if ((globalMaxRatio() == -1) && !hasPerTorrentRatioLimit()
        && (globalMaxSeedingMinutes() == -1) && !hasPerTorrentSeedingTimeLimit()) {
```"
116524917,4266,glassez,2017-05-15T15:36:38Z,Please use constant here (TorrentHandle::USE_GLOBAL_SEEDING_TIME).
116525456,4266,glassez,2017-05-15T15:38:29Z,Use predefined constants (e.g. TorrentHandle::NO_SEEDING_TIME_LIMIT) here and in all similar places it's very good idea.
116526004,4266,glassez,2017-05-15T15:40:30Z,"I know this is not your code, but can you fix this name too?"
116528342,4266,glassez,2017-05-15T15:48:56Z,You don't need to have this mapping since there was no `Preferences/Bittorrent/MaxSeedingMinutes` setting before.
116528509,4266,glassez,2017-05-15T15:49:36Z,qreal
116529205,4266,glassez,2017-05-15T15:52:10Z,And you don't need to create this variable since simple getters should be done inline with a high probability. @evsh?
116529277,4266,glassez,2017-05-15T15:52:33Z,Same as above.
116533155,4266,glassez,2017-05-15T16:08:13Z,">That's because you haven't tried the PR, just read the code.

I also have not tested this, but I don't understand why the following code won't work?
```c++
connect(m_ui->checkMaxRatio, SIGNAL(toggled(bool)), this, SLOT(toggleComboRatioLimitAct()));
connect(m_ui->checkMaxSeedingMinutes, SIGNAL(toggled(bool)), this, SLOT(toggleComboRatioLimitAct()));

void OptionsDialog::toggleComboRatioLimitAct()
{
    m_ui->comboRatioLimitAct->setEnabled(m_ui->checkMaxRatio->isChecked() || m_ui->checkMaxSeedingMinutes->isChecked());
}
```
Now you have it in the wrong place. If before no one noticed, that is no reason not to fix it."
116535105,4266,naikel,2017-05-15T16:16:02Z,"You should read the whole file not the diff.  This is a copy/paste from the same section that process the ratio limit that's already there.  I just tried to be consistent with the code that was already there.

This is YOUR code not mine:
```
                        if (m_maxRatioAction == Remove) {
                            logger->addMessage(tr(""'%1' reached the maximum ratio you set. Removing..."").arg(torrent->name()));
                            deleteTorrent(torrent->hash());
                        }
```
I just tried to be consistent in what was already there.  **DO NOT READ JUST DIFFS READ THE WHOLE FILE**"
116535373,4266,naikel,2017-05-15T16:17:19Z,"Read the whole file please, the original else is like that.  I can fix MY else though but it would be consistent with the rest of the file."
116537240,4266,glassez,2017-05-15T16:25:11Z,">Because it won't reenable the Apply button if you modify the seeding limit, just the comboRatioLimitAct, and then you wouldn't be able to apply your changes.

But you have connected it to `enableApplyButton()` too, isn't it?"
116578016,4266,zeule,2017-05-15T19:18:53Z,"Always true, you checked this two lines above."
116578429,4266,zeule,2017-05-15T19:20:54Z,"Identifier name in this line is confusing. Suggest
```
const int seedingTimeInMinutes = torrent->seedingTime() / 60;
```"
116579865,4266,zeule,2017-05-15T19:27:44Z,Negligible part of people use `-flto` with GCC and as such getter has to be defined in the header (inside of the class) to be inlined. But this is prohibited by the coding guidelines in this project.
116581806,4266,zeule,2017-05-15T19:36:38Z,Why these changes? Maybe a rebase artifact?
116637757,4266,naikel,2017-05-16T01:34:01Z,"Not sure to do that change:
```
$ grep -r Kandeler
src/gui/updownratiodlg.cpp: * Copyright (C) 2011  Christian Kandeler, Christophe Dumez
src/gui/updownratiodlg.h: * Copyright (C) 2011  Christian Kandeler, Christophe Dumez
src/base/scanfoldersmodel.h: * Copyright (C) 2010  Christian Kandeler, Christophe Dumez
src/base/scanfoldersmodel.cpp: * Copyright (C) 2010  Christian Kandeler, Christophe Dumez
```
They all are like that"
116649267,4266,glassez,2017-05-16T03:35:00Z,"@LordNyriox, there should be one name per line.
@naikel, leave it as is unless you want to add yourself."
116650305,4266,naikel,2017-05-16T03:48:41Z,I left it as it is because I wasn't sure what to do.
116660411,4266,glassez,2017-05-16T06:00:25Z,Fix curly brace position.
116685626,4266,thalieht,2017-05-16T08:45:19Z,"I wasn't gonna say anything because apparently you hate doing coding style but while you're at it reverse these: 
```
#include ""updownratiodlg.h""

#include <QMessageBox>
```
"
116797183,4266,Chocobo1,2017-05-16T16:50:14Z,"redundant empty line

and sorry for late review..."
116799017,4266,Chocobo1,2017-05-16T16:57:52Z,please add parentheses
116800047,4266,Chocobo1,2017-05-16T17:02:03Z,space between `USE_GLOBAL_SEEDING_TIME` and colon.
116800420,4266,Chocobo1,2017-05-16T17:03:39Z,"+1, please fix it too."
116800787,4266,Chocobo1,2017-05-16T17:05:22Z,"try find a parent to fill in, don't leave it 0"
116809675,4266,glassez,2017-05-16T17:42:01Z,"Why it is redundant?
It doesn't break any coding style rules here, but just separates loop."
116810325,4266,Chocobo1,2017-05-16T17:44:27Z,">but just separates loop.

IMO, for tiny code segment, the indention is enough for loop separation.
"
116818460,4266,glassez,2017-05-16T18:17:13Z,"**this** can be used as parent, isn't it?"
116819532,4266,glassez,2017-05-16T18:21:23Z,"It's a matter of taste, if it is not regulated by the rules so we can't demand to change these things (only express our opinion)."
116858685,4266,naikel,2017-05-16T21:10:06Z,"Remember, everything I have done is because somewhere else in the same file is like that and it would look inconsistent.  The complete section is like this, only the second method is my code:
```
bool Session::hasPerTorrentRatioLimit() const
{
    foreach (TorrentHandle *const torrent, m_torrents)
        if (torrent->ratioLimit() >= 0) return true;

    return false;
}

bool Session::hasPerTorrentSeedingTimeLimit() const
{
    foreach (TorrentHandle *const torrent, m_torrents)
        if (torrent->seedingTimeLimit() >= 0) return true;

    return false;
}
```
And I think it looks better that way, like the original coder ;)"
116905571,4266,Chocobo1,2017-05-17T03:54:53Z,">(only express our opinion).

This is exactly what I meant.

>Remember, everything I have done is because somewhere else in the same file is like that and it would look inconsistent. 

To be clear, I'm not forcing a change here.
Personal thought: I think the inconsistent of style isn't that critical anyway, unless someone rewrite the old code, it probably will stay there forever, so just focus on making the new code nice is enough...
"
496526715,13348,jagannatharjun,2020-09-29T08:28:29Z,"I think this way you won't process the very first alert in m_alerts. Also, you will dereference the end iterator."
496530767,13348,glassez,2020-09-29T08:32:21Z,I think you're wrong.
496535631,13348,glassez,2020-09-29T08:36:41Z,Note that this is a **post** increment.
496542439,13348,jagannatharjun,2020-09-29T08:42:57Z,"IDK, it seems at first m_nextAlert is m_alerts.begin();, but here you're incrementing m_nextAlert before processing it."
496549649,13348,jagannatharjun,2020-09-29T08:52:41Z,"oopsie, that bracket is confusing, Sorry. "
496573682,13348,glassez,2020-09-29T09:28:50Z,"Without parentheses, it looks like the increment is applied to the dereferenced value... Matter of taste."
194056887,9072,zeule,2018-06-08T13:27:45Z,Can $$TARGET be used here?
194058235,9072,zeule,2018-06-08T13:32:42Z,"For this function MSDN [says](https://msdn.microsoft.com/en-us/library/windows/desktop/ms724902(v=vs.85).aspx) ""include Windows.h"". I'm wondering why do you prefer to manually list individual include files?"
194064062,9072,zeule,2018-06-08T13:52:31Z,std::array?
194064297,9072,zeule,2018-06-08T13:53:11Z,std::wstring
194074284,9072,zeule,2018-06-08T14:25:07Z,"QString::toStdWString(), QString::utf16()"
194074563,9072,zeule,2018-06-08T14:26:03Z,nullptr
194075041,9072,zeule,2018-06-08T14:27:39Z,return res == ERROR_SUCCESS ? QString::fromStdWString(lpData) : QString();
194075385,9072,zeule,2018-06-08T14:28:42Z,std::wstring or QString::utf16()
194076689,9072,zeule,2018-06-08T14:32:53Z,"https://stackoverflow.com/questions/5735753/win-api-wrapper-classes-for-handles or a custom RAII wrapper class, please."
194085011,9072,zeule,2018-06-08T14:57:40Z,Two identical functions below.
194085159,9072,zeule,2018-06-08T14:58:08Z,Two identical functions below.
194085836,9072,zeule,2018-06-08T15:00:07Z,"RAII handler, please."
194085900,9072,zeule,2018-06-08T15:00:17Z,RAII
194085980,9072,zeule,2018-06-08T15:00:31Z,RAII
194086750,9072,zeule,2018-06-08T15:02:48Z,boost::intrusive_ptr
194086854,9072,zeule,2018-06-08T15:03:03Z,RAII
194086957,9072,zeule,2018-06-08T15:03:18Z,RAII
194087048,9072,zeule,2018-06-08T15:03:33Z,boost::intrusive_ptr
194089657,9072,zeule,2018-06-08T15:11:24Z,"OS, OperatingSystem, or anything, please, that can't be read as a system of utilities or another system inside of the qBittorent project. If you very much want to keep this name, consider ""Sys::Utils"" instead."
194128970,9072,glassez,2018-06-08T17:31:51Z,"I'll ask you your own question: ""Are you kidding?"" I just moved most of this code from other (inappropriate) place. I'm not going to change it!"
194129509,9072,glassez,2018-06-08T17:33:59Z,"Especially since I'm not going to do your inappropriate whims. All this code is written in WinAPI style and it uses its types and definitions. It worked fine for many years before, so why touch it?"
194133893,9072,zeule,2018-06-08T17:50:10Z,"> I just moved most of this code from other (inappropriate) place

Then the copyright in this new file lies."
194138166,9072,glassez,2018-06-08T18:04:04Z,"Oh, sorry. I'll fix it. 
This PR is still quite unfinished..."
194139745,9072,zeule,2018-06-08T18:09:39Z,"> All this code is written in WinAPI style...

As if it is something that has a right to live... :D"
194140437,9072,glassez,2018-06-08T18:12:08Z,">As if it is something that has a right to live...

It's none of our business..."
194141382,9072,glassez,2018-06-08T18:15:50Z,"No. TARGET is for binary name. It's ""qbittorrent"". But application brand name is ""qBittorrent""!"
194143684,9072,zeule,2018-06-08T18:24:17Z,that's pity...
194146590,9072,glassez,2018-06-08T18:34:57Z,"Well, I guess I'll change the name so I don't waste time with useless arguments...

Last comments...
>or anything, please, that can't be read as a system of utilities or another system inside of the qBittorent project.

So ""Utils::Fs"" can be read as ""filesystem of utilities or another filesystem inside of the qBittorent project"", ""Utils::String"" as ""string of utilities or another string inside of the qBittorent project"" etc.?
Currently we have all utils are inside Utils namespace divided into more concrete subgroups. So ""Utils::Sys"" is appropriate name for Operating System related utilities.
But if you don't understand context-dependent meaning of the ""System"" word I can replace it with ""Utils::OS""."
194157718,9072,zeule,2018-06-08T19:21:17Z,"No and no, because all the examples above are not consolidating (generalising) terms, unlike the ""System""."
194245822,9072,glassez,2018-06-10T05:25:13Z,"These functions are very simple and do not intend further complication. Why should I complicate it with RAII handlers, intrusive_ptr etc.?
The answers ""Because it's cool!"",  ""That's safe!"", ""You have to use them always and everywhere, because they are!"" don't suit me."
194247040,9072,glassez,2018-06-10T06:31:35Z,"Well, I did impleement them (for fun)."
194247758,9072,zeule,2018-06-10T07:01:22Z,"Is there any other function except ""Current""?"
194247779,9072,zeule,2018-06-10T07:02:12Z,The same question here. 
194247833,9072,zeule,2018-06-10T07:04:22Z,I think users deserve to know if action did not succeed.
194247847,9072,zeule,2018-06-10T07:04:56Z,Same here.
194248042,9072,zeule,2018-06-10T07:14:09Z,The last two parameters are wrongly ordered.
194248051,9072,zeule,2018-06-10T07:14:22Z,The last two parameters are wrongly ordered.
194248323,9072,glassez,2018-06-10T07:27:35Z,"Ok, will change it."
194248440,9072,glassez,2018-06-10T07:33:11Z,What makes you think that?
194248666,9072,zeule,2018-06-10T07:39:46Z,"I was wrong, excuse me: though '0' is for `pError`. "
194248671,9072,zeule,2018-06-10T07:39:59Z,And I was wrong here too.
194249389,9072,Chocobo1,2018-06-10T08:11:16Z,merge those 2 macros?
194249420,9072,Chocobo1,2018-06-10T08:12:46Z,`QBT_APP_NAME`
194249627,9072,Chocobo1,2018-06-10T08:21:42Z,`assocPanelWindows` and `assocPanelOthers`?
194249689,9072,Chocobo1,2018-06-10T08:24:31Z,move one up.
194249805,9072,Chocobo1,2018-06-10T08:29:02Z,do you mind hide it first?
194249870,9072,Chocobo1,2018-06-10T08:31:36Z,"wrong indention.
"
194249977,9072,Chocobo1,2018-06-10T08:36:08Z,use `QMessageBox::StandardButton` instead of int?
194250092,9072,Chocobo1,2018-06-10T08:42:14Z,"if possible, please sort the list, alsoI would append `\` to the end of the list instead of another `LIBS +=`"
194250148,9072,Chocobo1,2018-06-10T08:44:48Z,I find it confusing why there is a check for `ver >= win8`??
194250395,9072,Chocobo1,2018-06-10T08:54:40Z,use `nullptr` or `NULL` instead of `0`?
194250486,9072,Chocobo1,2018-06-10T08:58:47Z,"legacy code, just asking... would you prefer removing the default values?"
194250580,9072,zeule,2018-06-10T09:03:10Z,"Why do these two functions use different registry paths? Is it true that setting a value in HKCU is reflected in HKEY_CLASSES_ROOT? Or there are two defaults, system-wide and per-user ones?"
194251972,9072,glassez,2018-06-10T10:09:19Z,"`HKEY_LOCAL_MACHINE\Software\Classes` contains global values, `HKEY_CURRENT_USER\Software\Classes` contains user overrides, HKEY_CLASSES_ROOT merges it so I use it for reading (when no matter where they are actually stored)."
194254775,9072,zeule,2018-06-10T11:52:58Z,"I see, thanks."
194381574,9072,glassez,2018-06-11T12:12:36Z,Yes.
194382348,9072,glassez,2018-06-11T12:15:49Z,Win8+ can't actually check whether it set as default program or not. So we just ask the user itself to set it on the first run and we never do it again.
194383174,9072,glassez,2018-06-11T12:19:16Z,This method returns `int`.
194384038,9072,glassez,2018-06-11T12:22:56Z,"Ok, fixed."
194384280,9072,glassez,2018-06-11T12:23:57Z,"Ok, reordered."
194384379,9072,glassez,2018-06-11T12:24:19Z,"Oops... it was ""sys.h"" initially."
194384724,9072,glassez,2018-06-11T12:25:47Z,No. They are both used on Windows. Anyway I've used different names now: assocPanel and defaultProgramPanel.
194385007,9072,glassez,2018-06-11T12:26:48Z,Ok. Renamed.
194385488,9072,glassez,2018-06-11T12:28:32Z,You think I made such a fool of me? Otherwise we can't use `WIDE()` with macro as its argument.
194389086,9072,glassez,2018-06-11T12:41:47Z,Of course.
194391116,9072,zeule,2018-06-11T12:48:52Z,@Chocobo1: https://gcc.gnu.org/onlinedocs/cpp/Argument-Prescan.html
194414083,9072,Chocobo1,2018-06-11T14:00:03Z,"@zeule 
Thanks, hopefully this time it will stay in my memory longer."
194414508,9072,Chocobo1,2018-06-11T14:01:01Z,"It can also be `QMessageBox::StandardButton`
http://doc.qt.io/qt-5/qmessagebox.html#question"
194613256,9072,Chocobo1,2018-06-12T04:41:48Z,"Are you sure this will work for official windows 32-bit binaries?
the binary is expected to run on winXP to win10."
195928604,9072,zeule,2018-06-17T12:43:58Z,areAssociationsSet
195928901,9072,zeule,2018-06-17T12:55:04Z,"The name of the function is cryptic for me. Could you add a comment or, better, change the name? My problem is that the name is composed of very generic terms and I can't get what real action is invoked.  "
195928933,9072,zeule,2018-06-17T12:56:06Z,Why do these duplicate functions above? Please merge the conditional blocks.
195929182,9072,zeule,2018-06-17T13:06:01Z,"Please explain the intention behind `setXXXAssoc(false)`. From my point of view such call is a way to a confusion. Example: Prog1 is associated with file a type. Then Prog2 is installed and takes over the association. Now I want to set the associations back to Prog1, and do that via a system control module or Prog1 setting. Then I need nothing in the Prog2 to reset the association. Additionally, is it correct that clearing the settings checkbox in qBt will clear the association even if it is set to another program? "
195932264,9072,glassez,2018-06-17T14:59:28Z,It shows Application Association Registration UI (as you can see from used interface name). I just shortened the name a little. Do you think *showApplicationAssociationRegistrationUI* is better name? Or are you going to suggest something else?
195932375,9072,glassez,2018-06-17T15:02:55Z,"The functions above have parameter, so I don't want to produce unreadable mash from conditionals to merge it."
195932845,9072,glassez,2018-06-17T15:21:37Z,Oops... I'm talking about other functions. These ones can be merged.
195933728,9072,zeule,2018-06-17T15:57:45Z,"Please add to the top-level CMakeLists.txt after the `project()` call (probably near the version-related stuff):
```cmake
add_definitions(-DQBT_APP_NAME=""${CMAKE_PROJECT_NAME}"")
```"
195934247,9072,glassez,2018-06-17T16:19:41Z,Ok!
195936154,9072,zeule,2018-06-17T17:34:37Z,"Yes, the long one looks better to me. At least I can understand it :) But it seems like you don't like that long name, and giving the macro name just above, I propose `showDefaultProgramSelectionUI()`. However, MSDN says that the COM interface is deprecated as of Windows 10 and is replaced with ""Default programs"". The macro name directly contradicts that. I think either the macro name has to be changed, or the implementation [extended](https://stackoverflow.com/questions/32178986/windows-10-equivalent-of-launchadvancedassociationui/35675098) to support Window 10."
195936161,9072,zeule,2018-06-17T17:34:59Z,"There is `#include <Windows.h>` in the header, can't these two be removed? "
195936231,9072,zeule,2018-06-17T17:37:49Z,I can't read the macro name. Maybe you meant USE**S**? 
195936244,9072,zeule,2018-06-17T17:38:25Z,Did not find Linux implementations for these two.
195936270,9072,zeule,2018-06-17T17:39:22Z,*the* Default Programs dialog
195936341,9072,zeule,2018-06-17T17:42:40Z,"The first `this` is unnecessary, I believe, And I even wonder how did it pass compilation."
195936365,9072,zeule,2018-06-17T17:43:54Z,That is error but not a warning (the requested action failed completely). 
195936415,9072,zeule,2018-06-17T17:45:30Z,"So, does it still remove associations unconditionally?"
195936428,9072,zeule,2018-06-17T17:46:13Z,Thanks.
195937648,9072,zeule,2018-06-17T18:43:32Z,"Maybe you would opt to add implementations instead of removing the functions. Here is what needs to be done:
1. Query associations: launch`xdg-mime query default <mime type>`. Should return ""qbittorrent.desktop"" if qBittorrent is the default.
2. To set the default launch: `xdg-mime default qbittorrent.desktop  <mime types> `.

The mime types are application/x-bittorrent and x-scheme-handler/magnet"
196039121,9072,glassez,2018-06-18T11:05:01Z,Now it removes only qBittorrent associations.
196039963,9072,glassez,2018-06-18T11:08:59Z,">And I even wonder how did it pass compilation.

Why should it fails?
>The first this is unnecessary, I believe,

???"
196043131,9072,glassez,2018-06-18T11:23:32Z,">Did not find Linux implementations for these two.

Do you mean qBittorrent? They are not here and never was!
>...instead of removing the functions. 

Removing?.. What did I remove?
>Maybe you would opt to add implementations

Not me.
I think I've already answered your hints. Some Linux developer can do that. I don't have the ability to develop/test on Linux now."
196052355,9072,zeule,2018-06-18T12:05:00Z,"Then put them under `#ifdef`, please.  "
196053911,9072,zeule,2018-06-18T12:11:07Z,"Because you wrote `connect(sender, signal, receiver, lambda)`, and moc has to generate a call similar to `(receiver->*lambda)()`, i.e. `(this->*lambda)` which is nonsense.
"
196097072,9072,glassez,2018-06-18T14:24:07Z,"Hell, I'll just put them back."
196098965,9072,glassez,2018-06-18T14:28:44Z,"Can't.
Do you think ""Windows.h"" includes all other WinAPI headers?"
196099163,9072,glassez,2018-06-18T14:29:14Z,Changed with WIN_HAS_DEFAULT_PROGRAMS_API.
196110630,9072,glassez,2018-06-18T14:59:10Z,">Because you wrote `connect(sender, signal, receiver, lambda)`

I wrote `connect(sender, signal, context, lambda)`:
```c++
static QMetaObject::Connection QObject::connect(const QObject *sender, PointerToMemberFunction signal, const QObject *context, Functor functor, Qt::ConnectionType type = Qt::AutoConnection);
```"
196113806,9072,glassez,2018-06-18T15:07:24Z,">or the implementation extended to support Window 10.

Ugh, don't offer me that anymore! Such perversions are not for me. The way the operating system offers is enough."
196158845,9072,zeule,2018-06-18T17:22:00Z,"Oh, my bad. Did not read this part of the Qt documentation since Qt 5.0."
196159797,9072,zeule,2018-06-18T17:25:17Z,"No, just can't understand the logic behind that. For example, for `CoInitializeEx()` MSDN says ""Header Objbase.h"", which is not on the includes list here. I conclude that it works via Windows.h. Hence was my question."
196170789,9072,glassez,2018-06-18T17:59:34Z,"`shlobj.h` is for `SHChangeNotify()`, `shobjidl.h` is for **IApplicationAssociationRegistration** and **IApplicationAssociationRegistrationUI**.
`windows.h` doesn't include `objbase.h`. Maybe it's included via some Qt header. Anyway it's better to include it directly."
196192174,9072,zeule,2018-06-18T19:10:29Z,Why does the condition repeat assertion in line 283?
196195177,9072,zeule,2018-06-18T19:21:54Z,"If the first parameter named ""cls"" and not ""key"", the second one would better be named ""progId""."
196197762,9072,zeule,2018-06-18T19:31:09Z,Why does the condition repeat the assert in line 256?
196198539,9072,zeule,2018-06-18T19:34:15Z,"MSDN states for `IApplicationAssociationRegistration` ""Minimum supported client: Windows Vista"" , but the condition above seem to contradict that. How's that possible?"
196198942,9072,zeule,2018-06-18T19:35:52Z,"I would create constants for strings ""qBittorrent.File.Torrent"" and ""qBittorrent.Url.Magnet"". `src/base/global.h` already contains constant for the "".torrent"" literal."
196200455,9072,zeule,2018-06-18T19:41:54Z,But it seems to be called from line 300 with the opposite condition.
196202425,9072,zeule,2018-06-18T19:48:52Z,"IMO, these platform-dependent manipulations should be hid in the `os.cpp` file."
196203276,9072,zeule,2018-06-18T19:52:10Z,"And these too. I would ""export"" from the os.h file `QWidget* fileAssociationsWidget (QWidget* parent)` and enjoy clean header, would not introduce <Windows.h> contents into the main program, and avoid macros in the header file. "
196203557,9072,zeule,2018-06-18T19:53:25Z,Why not qApp->applicationName()?
196205626,9072,zeule,2018-06-18T20:00:28Z,"Pardon me, I think I asked this already, but can't find your answer, so I likely repeat: why can't qApp->applicationName() be used in those WinAPI calls?"
196767810,9072,glassez,2018-06-20T13:04:57Z,Typo. `>=` is supposed to be here.
196768273,9072,glassez,2018-06-20T13:06:13Z,Sure.
196769678,9072,glassez,2018-06-20T13:10:04Z,That's right.
196770191,9072,glassez,2018-06-20T13:11:22Z,Because of typo above (https://github.com/qbittorrent/qBittorrent/pull/9072#discussion_r196767810).
196772540,9072,glassez,2018-06-20T13:18:33Z,Ok.
196773093,9072,glassez,2018-06-20T13:20:14Z,Now with fixed typo above it should be right.
196775485,9072,glassez,2018-06-20T13:27:10Z,"We can't export any widget (or some other GUI thing) from some base header. But we can implement it inside GUI module.
In any case, I don't want to waste time on it until this PR is generally approved by @sledgehammer999."
196775748,9072,glassez,2018-06-20T13:27:58Z,Changed.
196778290,9072,glassez,2018-06-20T13:34:59Z,You asked here: https://github.com/qbittorrent/qBittorrent/pull/9057#discussion_r193153039
196778968,9072,zeule,2018-06-20T13:36:56Z,"Aha, thanks. As you did not give an answer there, please explain here."
196785702,9072,glassez,2018-06-20T13:48:24Z,">As you did not give an answer there

???
Doesn't [this](https://github.com/qbittorrent/qBittorrent/pull/9057#discussion_r194046885) answer suit you?"
196788139,9072,zeule,2018-06-20T13:54:27Z,"Exactly, I see no answer there."
196789566,9072,zeule,2018-06-20T13:58:24Z,"> We can't export any widget (or some other GUI thing) from some base header. 

Why?"
196796435,9072,glassez,2018-06-20T14:16:44Z,"This is the structure of the project!
*Base* should not be dependent on the GUI. It should compile with `nogui=true` without any additional conditionals.
Predicting your causticity about this, I note at once that there are still a few legacy dependencies from GUI (in `preferences.cpp` and `misc.cpp`), which have not yet reached the hands (apparently I need to move them to the right place soon)."
196798113,9072,glassez,2018-06-20T14:21:14Z,Why should we have unnecessary dependencies? Why should this task depend on the QApplication *instance*? Try to answer these questions and you (probably) will find my answer.
196801349,9072,zeule,2018-06-20T14:29:31Z,But then you pull the same information from the compiler command line.  Why that is not a dependency?
196828702,9072,zeule,2018-06-20T15:31:27Z,"Why then, if a structure is so important, this chain of #idefss can not find its place in `src/gui/utils` directory?"
198124602,9072,Chocobo1,2018-06-26T12:33:10Z,this should move up
198124659,9072,Chocobo1,2018-06-26T12:33:19Z,in this file too.
198125314,9072,Chocobo1,2018-06-26T12:35:36Z,"`isTorrentFileAssocSet`, `isMagnetLinkAssocSet` are duplicates."
198125806,9072,Chocobo1,2018-06-26T12:37:15Z,"also I would place similar functions together, for example `isTorrentFileAssocSet` and `setTorrentFileAssoc`."
198128237,9072,Chocobo1,2018-06-26T12:45:33Z,I would place this block at the bottom of general tab section.
198129804,9072,Chocobo1,2018-06-26T12:50:44Z,I would add const to `handle`.
198129859,9072,Chocobo1,2018-06-26T12:50:53Z,here too.
198130624,9072,Chocobo1,2018-06-26T12:53:18Z,"optional, I would use unique_ptr for it, and at other new/delete pairs."
198131382,9072,Chocobo1,2018-06-26T12:55:52Z,"just realize this is just moving the old code, so whatever you like..."
198131715,9072,glassez,2018-06-26T12:56:42Z,I wouldn't want to change this existing code in this PR. I just moved it here as is (I mean all python and windows registry related code).
198132171,9072,Chocobo1,2018-06-26T12:58:15Z,"I suppose now this should be in foreignapps, maybe in later PR?"
198132733,9072,glassez,2018-06-26T13:00:03Z,Also I would stop any conversations here until PR will be generally approved by @sledgehammer999. I feel I make unnecessary work...
198133669,9072,Chocobo1,2018-06-26T13:03:05Z,"ok, although I wish to see this merged.
"
198134690,9072,zeule,2018-06-26T13:06:12Z,"If this lands, I'm going to submit a PR adding CPack support to build Windows installers (probably via Wix) and Mac OS bundles.    "
211212313,9375,glassez,2018-08-20T10:24:04Z,"`const QString working {QLatin1String(""Working"")};`
Etc.
"
213227471,9375,Chocobo1,2018-08-28T08:37:48Z,`QVariantList trackerList {getStickyTrackers(torrent)};`
213228540,9375,Chocobo1,2018-08-28T08:41:28Z,Forward declare it instead: `class BitTorrent::TorrentHandle;` and revert this and also in cpp file.
213228800,9375,Chocobo1,2018-08-28T08:42:24Z,`QVariantList getStickyTrackers(const BitTorrent::TorrentHandle* torrent) const;`
213229031,9375,Chocobo1,2018-08-28T08:43:13Z,"Remove `static`s, no point doing so IMO."
213230549,9375,Chocobo1,2018-08-28T08:48:16Z,"Not accustomed to list initialization? 
```c++
QVariantMap dht = {
    {KEY_TRACKER_URL, ""** [DHT] **""},
    // ...
};
```"
213230881,9375,Chocobo1,2018-08-28T08:49:20Z,?? you're not using the constant defined above...
213231762,9375,Chocobo1,2018-08-28T08:52:05Z,"also I would write it:
```c++
dht[KEY_TRACKER_STATUS] = (BitTorrent::Session::instance()->isDHTEnabled() && !torrent->isPrivate())
    ? ""Working""
    : ""Disabled"";
```"
213233085,9375,Chocobo1,2018-08-28T08:56:01Z,"move `stickyTrackers` declaration above this line and initialize it, seems you're following C rules in modern C++ code... :\
"
213233658,9375,Chocobo1,2018-08-28T08:57:38Z,use range-based `for` loop.
213234478,9375,Chocobo1,2018-08-28T09:00:04Z,"Not sure, how about: 
```javascript
var row = [
    tracker.tier,
    // ...
];
```"
213262727,9375,zeule,2018-08-28T10:35:04Z,"TRACKER_RECEIVED == ""num_peers"" ? "
213262899,9375,zeule,2018-08-28T10:35:53Z,Received count of what?
213286007,9375,glassez,2018-08-28T12:06:24Z,const BitTorrent::TorrentHandle *torrent
213286995,9375,glassez,2018-08-28T12:10:20Z,"Does this function depend on TorrentsController? If not, it would be better to have it in an anonymous namespace instead."
213287461,9375,glassez,2018-08-28T12:12:17Z,Please see my previous comment.
213372314,9375,Piccirello,2018-08-28T15:53:32Z,"The value associated with this key is used to display the tracker ""Received"" count, but for legacy reasons the key is `num_peers`. We can't change this without breaking the api."
213487543,9375,zeule,2018-08-28T22:03:39Z,"Maybe you'd better add four new keys and leave ""num_peers"" for a deprecation later on?"
214396577,9375,Piccirello,2018-08-31T15:45:58Z,I couldn't quite figure out the syntax for this. Thanks!
214397743,9375,Piccirello,2018-08-31T15:49:48Z,Definite goof on my end
214400387,9375,Piccirello,2018-08-31T15:58:43Z,Will move it to an anonymous namespace
214403841,9375,Piccirello,2018-08-31T16:11:20Z,"Not quite sure, but this is the nomenclature used in the GUI. It looks like it might be the total number of other clients we're connected to."
214414612,9375,Piccirello,2018-08-31T16:53:37Z,"This change results in the `getStickyTrackers` QList being added as an element of `trackerList`, rather than the elements of `getStickyTrackers` being added."
214416507,9375,Chocobo1,2018-08-31T17:00:50Z,"oops, it is because using the braces, can you give it one last try: 
```c++
QVariantList trackerList = getStickyTrackers(torrent);
```"
214418270,9375,Piccirello,2018-08-31T17:08:08Z,That worked!
214421608,9375,Chocobo1,2018-08-31T17:20:50Z,"Seems these strings need to be translated, try `const QString privateMsg {QCoreApplication::translate(""TrackerListWidget"", ""This torrent is private"")};` see if it works.
"
214433569,9375,Piccirello,2018-08-31T18:04:48Z,The translation works now.
214435360,9375,glassez,2018-08-31T18:11:33Z,"Hell, I really don't like the tendency of recent changes to return translated text from an API (and generally, return anything visible directly to the user). You generate unnecessary dependencies again. But I guess you all don't care..."
214504192,9375,Chocobo1,2018-09-01T04:16:51Z,"@Piccirello 
Or maybe return some constant (integers?) here and do the translation at client side? However I'm not sure how to fetch translated strings at javascript... or this need some html tricks..."
214506337,9375,glassez,2018-09-01T06:45:42Z,">However I'm not sure how to fetch translated strings at javascript...

JavaScript sources are translatable as well. You can easily create error code to description text mapping there."
214514774,9375,glassez,2018-09-01T14:06:28Z,">create error code to description text mapping

Not only **error** codes. Any kind of **status** codes.
>Or maybe return some constant (integers?) 

Integers aren't required, of course. They can be some string codes (e.g. ""working"", ""paused"" etc.)."
214518212,9375,Piccirello,2018-09-01T16:46:17Z,"I’m having trouble following, what is the actual recommendation here? Unless someone feels very strongly, I’m inclined to leave these as is."
214532308,9375,glassez,2018-09-02T08:06:14Z,"The point is that the API is a data source and it should provide data in the form of their values, not their specific representation. Client app handles received data and provide it to the user in form of particular representation (e.g. API provide tracker status as [working; disabled] and then client app show it as translated string, or some color, or icon etc.)."
214632475,9375,Piccirello,2018-09-03T09:47:49Z,"I investigated further, it's the total number of peers the torrent is connected to. It's documented [here](https://libtorrent.org/include/libtorrent/torrent_status.hpp) for `torrent_status::numPeers`."
214988671,9375,glassez,2018-09-04T16:48:48Z,Why this overchecking? How can empty string be valid URL? Isn't `if (url.isValid())` enough?
216627935,9375,glassez,2018-09-11T11:01:15Z,"Why do you need ""edit tracker"" abstraction? Since there are no more properties of the tracker that determine its individuality among other trackers of the same torrent, it is enough to have only ""add"" and ""remove"" actions.
Let's compare set of integers and set of objects (having several properties). In tge first case we can just remove one int and add another (like in your case), but in the second case we should have separate ""edit"" action since ""remove"" + ""add"" can have different side effect."
216749576,9375,zeule,2018-09-11T17:15:33Z,Probably to make the change atomic. 
216754358,9375,glassez,2018-09-11T17:31:14Z,">Probably to make the change atomic.

Well, it can be acceptable reason in case of Web API. But the correct name for this action is ""replace"".
The more atomic action is replace  current set of trackers with the new one."
217584092,9375,Piccirello,2018-09-14T02:08:23Z,"> But the correct name for this action is ""replace"".

This is an implementation detail that shouldn't be exposed to the user. To them, they're ""editing"" a specific tracker, which also aligns with the nomenclature in the GUI."
217597536,9375,Chocobo1,2018-09-14T04:22:33Z,"I don't think this naming is correct, see `num_peers`: https://www.libtorrent.org/reference-Alerts.html#tracker_reply_alert
It should be the number of peers from a tracker, so how about `COL_TRACKER_PEERS`?"
217599290,9375,Chocobo1,2018-09-14T04:40:16Z,`if (QUrl(urlStr).isValid())`
217599324,9375,Piccirello,2018-09-14T04:40:35Z,"This was changed because the column name ""Received"" is confusing. No one knows what it means.

libtorrent refers to this data as ""peers,"" but this is different than what a user normally thinks of as a ""peer."" What do you think a better name for this column could be? I'm honestly not sure.

If we can't think of anything good it can always just remain as `Received`."
217599375,9375,Chocobo1,2018-09-14T04:41:05Z,add `const` to these vars.
217599484,9375,Chocobo1,2018-09-14T04:42:00Z,`const` here
217599744,9375,Piccirello,2018-09-14T04:44:39Z,This can't be const because we modify `trackers`'s members
217599981,9375,Chocobo1,2018-09-14T04:47:38Z,"IMO `connections` could be wrongly read as on-going connection count, which is not true."
217600126,9375,Chocobo1,2018-09-14T04:49:05Z,"Hmm, utorrent doesn't have this field..."
217601070,9375,Chocobo1,2018-09-14T04:58:22Z,"nitpick, I would move this line above `newTracker` declaration."
217607155,9375,thalieht,2018-09-14T05:54:55Z,The [QUrl docs](http://doc.qt.io/qt-5/qurl.html#QUrl-2) say that it fixes any mistakes on the string but you're passing the original string. Isn't it possible that the QUrl constructor will fix some problems that would make isValid() false?
217667712,9375,glassez,2018-09-14T10:20:44Z,">This is an implementation detail that shouldn't be exposed to the user. 

Are we discussing the user interface? I think we're talking about API."
217669420,9375,glassez,2018-09-14T10:28:38Z,"I've noticed that you preserve tracker ""tier"" so let it be ""edit"" action."
217890932,9375,Piccirello,2018-09-15T17:40:44Z,The API is exposed to users as well...
217891172,9375,Piccirello,2018-09-15T17:48:46Z,"Good point, I'll use the QUrl string."
217891744,9375,glassez,2018-09-15T18:12:17Z,Why is the format of this parameter different from the format of same parameter in addTrackersAction? I mean URLs separator.
217891803,9375,Piccirello,2018-09-15T18:15:50Z,"Wait, all of the APIs in `torrentscontroller` already return translated strings. This is a non-issue.

I will change the API back to return translated strings."
217892111,9375,Piccirello,2018-09-15T18:32:31Z,"`addTrackersAction` uses new line as a delimiter, which is pretty non-standard. Almost all our APIs use a pipe, including `removeTrackersAction`."
217892531,9375,glassez,2018-09-15T18:49:26Z,">Wait, all of the APIs in torrentscontroller already return translated strings. This is a non-issue.

Damn! This is an old issue.
>I will change the API back to return translated strings.

Why not just fix old ones? We need to learn from other people's mistakes, not repeat them.

Well, if everyone else thinks my arguments are worthless, you can go on as you like. @Chocobo1, @zeule, @thalieht?"
217892554,9375,glassez,2018-09-15T18:50:42Z,"Then wrong things should be fixed, isn't it?"
217892923,9375,Piccirello,2018-09-15T19:04:24Z,That’s a breaking API change not part of this PR.
217893028,9375,Piccirello,2018-09-15T19:08:48Z,"You really like jumping on my PRs to report your issues with the general qbittorent architecture. Please, open a separate PR fixing the issues that you see. It should not hold back new features that follow the existing architecture."
217893053,9375,Piccirello,2018-09-15T19:09:34Z,Feel free to open a PR fixing it.
217901128,9375,Chocobo1,2018-09-16T03:39:41Z,">Why not just fix old ones? We need to learn from other people's mistakes, not repeat them.

But changing it now will surely break API... We should enforce correct design for new code, but the issue here is old, personally I would turn a blind eye for this specific case.

@Piccirello 
Just asking for your opinion here, what do you think about the idea (do i18n strings replacement in HTML file) in https://github.com/qbittorrent/qBittorrent/pull/9375#issuecomment-421228476, is it much hassle to do it?"
217901156,9375,Chocobo1,2018-09-16T03:42:04Z,`const QUrl url {urlStr.trimmed()};`
217901984,9375,Piccirello,2018-09-16T04:47:21Z,"It's easy to do for static strings in HTML files, but more difficult to do for api responses. We end up with code that's very tightly coupled to specific api versions, such as

```
var status;
switch (tracker.status) {
    case ""Working"":
        status = ""QBT_TR(Working)QBT_TR[CONTEXT=TrackerListWidget]"";
        break;
    case ""Disabled"":
        status = ""QBT_TR(Disabled)QBT_TR[CONTEXT=TrackerListWidget]"";
        break;
    case ""This torrent is private"":
        status = ""QBT_TR(This torrent is private)QBT_TR[CONTEXT=TrackerListWidget]"";
        break;
    default:
        status = tracker.status;
}
```

I would think it's considered a feature that the current APIs return translated string values."
217902252,9375,Chocobo1,2018-09-16T05:06:09Z,">It's easy to do for static strings in HTML files, but more difficult to do for api responses. 

Thank you, I hope that doesn't mean impossible for api responses.

>I would think it's considered a feature that the current APIs return translated string values.

I think it *might* be a feature if there are 2 seperate values returned, such as:
```
tracker.status = ""working""
tracker.statusI18N = ""<translated string>""
```
My point is, if we ~~always~~ only return translated strings, then it is cumbersome to write code for the API, as one will need to take locale settings into consideration."
217928329,9375,Piccirello,2018-09-16T21:26:17Z,"I too am leaning towards `Tracker Peers` now. I think it's more clear, but maybe I've just been thinking about it too long. Shall we give it some time and see if anyone objects?"
217943620,9375,Chocobo1,2018-09-17T03:31:02Z,">Shall we give it some time and see if anyone objects?

lets proceed!"
217952075,9375,thalieht,2018-09-17T05:38:36Z,"I wonder if it's just me that think this is even more confusing than ""Received"". I mean because there is already a Peers column and people will wonder ""huh? why there are 2 peer columns and which is which. Which is the one i want?"""
217952677,9375,thalieht,2018-09-17T05:46:52Z,We changed these in e2b46f01bb19b7faba0f4b3dd050115562ac16c3
218199001,9375,glassez,2018-09-17T19:35:00Z,">I would think it's considered a feature that the current APIs return translated string values.

Disagree.
We should not spawn such flaws where we have the ability to get around it without breaking API. And we have to seriously consider the need to get rid of this ""feature"" with the next more or less big API update.

In this particular case let it be as is.

>You really like jumping on my PRs to report your issues with the general qbittorent architecture. Please, open a separate PR fixing the issues that you see. It should not hold back new features that follow the existing architecture.

It's nothing personal. This is our usual practice.
Unfortunately, our resources are too limited to allow us to make major architectural changes at a time. None of the project members knows exactly all the code (especially if it has a long history). We often detect some problems in some parts of the code affected by some (possible unrelated) changes. And we try to solve them along the way, if possible (usually offer to do it to the author of the affected PR)."
218285225,9375,Piccirello,2018-09-18T02:45:01Z,"Let's create issues for these large architectural changes, rather than holding up individual features. In certain cases it might be reasonable, but there's no point in holding back a new feature because we can't decide if the API should return translated strings. Just one example, but the point being that we can still make incremental progress while acknowledging large changes that need to occur."
218285647,9375,Piccirello,2018-09-18T02:48:26Z,"I've implemented this change client side (in `prop-trackers.js`). It seems more reasonable to me that this API would return numbers rather than strings, but am open to discuss if you feel strongly."
218286232,9375,Piccirello,2018-09-18T02:53:33Z,"Maybe `Tracker Connections`? But then this might mislead users into thinking they're connected to all of those peers. Then again, `Seeds` and `Peers` should make it clear how many peers they're connected to.

I think all of this confusion stems from the ambiguous use of `peers` to generally mean other bittorrent clients, and also to mean other users downloading the file (w/ <100% progress)."
218286707,9375,Piccirello,2018-09-18T02:57:36Z,I suppose this still doesn't disambiguate an unconnected tracker from a connected tracker with 0 seeds/peers. I'll move the change to the API.
218287633,9375,Piccirello,2018-09-18T03:06:34Z,"I know I'm going back and forth on this one, but now I'm thinking the right option is to return a number (with -1 representing not connected). It seems wrong that a ""count"" value would return a string."
218287853,9375,glassez,2018-09-18T03:08:26Z,">users downloading the file (w/ <100% progress).

Isn't ""leech"" mean that?
""Peer"" is any client, AFAIK."
218288495,9375,Piccirello,2018-09-18T03:14:21Z,"> Isn't ""leech"" mean that?

YES, I couldn't think of this word but I think it solves this issue.

I propose the columns should be `peers`, `seeds`, and `leeches`. It should resolve the confusion and is the most ""correct."""
218303154,9375,thalieht,2018-09-18T05:34:55Z,"But _peers_ imply all the peers the tracker knows of, doesn't it? Personally i can't think of something short and more descriptive than _Received_ but i'm biased because i already know what it refers to..."
218673983,9375,Piccirello,2018-09-19T05:41:10Z,"libtorrent refers to this field as `num_peers`, describing it as ""the number of peers this torrent currently is connected to"" [[source](https://github.com/arvidn/libtorrent/blob/master/include/libtorrent/torrent_status.hpp#L328)].
"
218681628,9375,thalieht,2018-09-19T06:31:19Z,"// tells how many peers the tracker returned in this response. This is
		// not expected to be greater than the ``num_want`` settings. These are not necessarily
		// all new peers, some of them may already be connected.
		int num_peers;

https://github.com/arvidn/libtorrent/blob/8cc93e9855eb863ad2ed82a80f661e120860ee30/include/libtorrent/alert_types.hpp#L597"
219683664,9375,Piccirello,2018-09-22T22:30:52Z,"Can anyone else chime in on whether they find this confusing? I would like to go ahead with `peers`, `seeds`, and `leeches` but we can revisit if others disagree."
219699609,9375,WolfganP,2018-09-23T13:47:37Z,I'm OK with peer/seeds/leeches. Thx for this functionality!
227036500,9375,glassez,2018-10-22T16:04:24Z,Please revert this change (and all the related changes). It's not required by your feature and it's questionable (absolutely meaningless for me personally) to apply it in passing.
227039996,9375,Piccirello,2018-10-22T16:14:27Z,I don't see any reason we wouldn't want this change. In the future I'll move unrelated changes to their own PR; this commit is already a part of this so no point in moving now.
227087675,9375,glassez,2018-10-22T18:36:57Z,">I don't see any reason we wouldn't want this change. 

The reason is at least the changes in this line makes functor declaration to be confusing (having ""const"" applied to parameter passed by value in function declaration is meaningless and confusing).
Having ""const"" in the following places of this function has minimal meaning since the function code is too trivial and it isn't supposed to become any more complex in the future (but there are no errors formally and some adherents of the ""paranoid"" safety can insist on its use). The same can be said about the definition of methods that we pass in ""applyToTorrents()"" when calling (usually it is some one-liner).
Well, I'm not going to insist on the revert of the formally correct changes, if others deem them acceptable. But I insist on never having ""const"" applied to ""byval"" parameters in function declaration."
227198788,9375,Piccirello,2018-10-23T02:09:49Z,"> But I insist on never having ""const"" applied to ""byval"" parameters in function declaration.

On this point we agree

> but there are no errors formally and some adherents of the ""paranoid"" safety can insist on its use

That's mainly my goal here. The point *can* be const, so why not enforce it."
227218191,9375,glassez,2018-10-23T04:13:59Z,"Ok, fix this one and let's proceed."
227436213,9375,Piccirello,2018-10-23T15:05:35Z,"Sorry, I don't follow. Is your issue with this line `BitTorrent::TorrentHandle *const torrent`? "
227450278,9375,glassez,2018-10-23T15:37:51Z,"Yes.
""std::function"" template argument is similar to function declaration so it should be affected by the restriction above."
227466889,9375,Piccirello,2018-10-23T16:19:58Z,"But we aren't passing the torrent by value, we're passing a pointer to it."
227480438,9375,glassez,2018-10-23T16:58:53Z,">we're passing a pointer to it

Yes. We're passing ""pointer to torrent"" by value."
227502692,9375,Piccirello,2018-10-23T18:01:48Z,Ah I see. What would the syntax be to have the pointer passed by pointer/reference?
227509526,9375,glassez,2018-10-23T18:20:38Z,"Pointer by reference: `TorrentHandle *&torrent`.
""Pointer by pointer"" is incorrect term. You can just have ""pointer to pointer"" (or even ""pointer to pointer to pointer ... to pointer"") and pass it either by value or by reference."
234105416,9375,Chocobo1,2018-11-16T06:56:10Z,"Now the `""N/A""` strings can be translated by wrapping in QBT_TR"
234108825,9375,Chocobo1,2018-11-16T07:18:09Z,"It seems we can make it a few lines shorter without sacrificing too much readability:
```c++
    QVariantList getStickyTrackers(const BitTorrent::TorrentHandle *const torrent)
    {
        uint seedsDHT = 0, seedsPeX = 0, seedsLSD = 0, leechesDHT = 0, leechesPeX = 0, leechesLSD = 0;
        for (const BitTorrent::PeerInfo &peer : torrent->peers()) {
            if (peer.isConnecting()) continue;

            if (peer.fromDHT()) {
                if (peer.isSeed())
                    ++seedsDHT;
                else
                    ++leechesDHT;
            }
            if (peer.fromPeX()) {
                if (peer.isSeed())
                    ++seedsPeX;
                else
                    ++leechesPeX;
            }
            if (peer.fromLSD()) {
                if (peer.isSeed())
                    ++seedsLSD;
                else
                    ++leechesLSD;
            }
        }

        const QString working {QCoreApplication::translate(""TrackerListWidget"", ""Working"")};
        const QString disabled {QCoreApplication::translate(""TrackerListWidget"", ""Disabled"")};
        const QString privateMsg {QCoreApplication::translate(""TrackerListWidget"", ""This torrent is private"")};

        const QVariantMap dht {
            {KEY_TRACKER_URL, ""** [DHT] **""},
            {KEY_TRACKER_TIER, """"},
            {KEY_TRACKER_MSG, (torrent->isPrivate() ? privateMsg : """")},
            {KEY_TRACKER_STATUS, ((BitTorrent::Session::instance()->isDHTEnabled() && !torrent->isPrivate()) ? working : disabled)},
            {KEY_TRACKER_PEERS_COUNT, 0},
            {KEY_TRACKER_DOWNLOADED_COUNT, 0},
            {KEY_TRACKER_SEEDS_COUNT, seedsDHT},
            {KEY_TRACKER_LEECHES_COUNT, leechesDHT}
        };

        const QVariantMap pex {
            {KEY_TRACKER_URL, ""** [PeX] **""},
            {KEY_TRACKER_TIER, """"},
            {KEY_TRACKER_MSG, (torrent->isPrivate() ? privateMsg : """")},
            {KEY_TRACKER_STATUS, ((BitTorrent::Session::instance()->isPeXEnabled() && !torrent->isPrivate()) ? working : disabled)},
            {KEY_TRACKER_PEERS_COUNT, 0},
            {KEY_TRACKER_DOWNLOADED_COUNT, 0},
            {KEY_TRACKER_SEEDS_COUNT, seedsPeX},
            {KEY_TRACKER_LEECHES_COUNT, leechesPeX}
        };

        const QVariantMap lsd {
            {KEY_TRACKER_URL, ""** [LSD] **""},
            {KEY_TRACKER_TIER, """"},
            {KEY_TRACKER_MSG, (torrent->isPrivate() ? privateMsg : """")},
            {KEY_TRACKER_STATUS, ((BitTorrent::Session::instance()->isLSDEnabled() && !torrent->isPrivate()) ? working : disabled)},
            {KEY_TRACKER_PEERS_COUNT, 0},
            {KEY_TRACKER_DOWNLOADED_COUNT, 0},
            {KEY_TRACKER_SEEDS_COUNT, seedsLSD},
            {KEY_TRACKER_LEECHES_COUNT, leechesLSD}
        };

        return QVariantList {dht, pex, lsd};
    }
```"
234489874,9375,Piccirello,2018-11-19T04:13:48Z,This version looks much cleaner. Will change
236225295,9375,glassez,2018-11-26T11:56:42Z,A suboptimal combination of conditions leads to such repetitions (`if (peer.isSeed())`). I would have carried it outside.
236227238,9375,glassez,2018-11-26T12:03:12Z,"Well you will not convince me that this is the correct way! Haha, it depends on the translations from the GUI components!.. However, I don't want to open your eyes anymore so you can ignore this comment."
236228136,9375,glassez,2018-11-26T12:06:29Z,Do we support libtorrent < 1.0?
236230228,9375,glassez,2018-11-26T12:13:52Z,I would throw Conflict error instead. The resource affected by this request is torrent. So it's correct to throw NotFound error only in case of missing torrent.
238122690,9375,Piccirello,2018-12-03T00:24:38Z,Pretty sure we don't actually. Do you know?
238125482,9375,Piccirello,2018-12-03T01:19:31Z,Definitely should be Conflict. Will update this.
238139410,9375,glassez,2018-12-03T03:56:46Z,">Do you know?

We don't support libtorrent < 1.0.
I just thought you had the wrong version number here..."
238145036,9375,Piccirello,2018-12-03T05:00:04Z,This was copied over from `trackerlistwidget.cpp`. I'll remove that code too
238145288,9375,Piccirello,2018-12-03T05:02:39Z,"Changed to check `peer.isSeed()` before checking dht, pex, and lsd"
238145472,9375,Piccirello,2018-12-03T05:05:00Z,Addressed this in my latest commit. Translation of `status` is now done client-side. The `msg` is still translated server-side since in most cases it's not actually translated at all. It might even make sense to remove translation of the `msg` field entirely.
238147525,9375,Chocobo1,2018-12-03T05:26:52Z,"I think this structure still leads to unnecessary checks, it should be:
```c++
if (peer.isSeed()) {
    if (peer.fromDHT())
        ++seedsDHT;
    else if (peer.fromPeX())
        ++seedsPeX;
    else if (peer.fromLSD())
        ++seedsLSD;
}
else {
    if (peer.fromDHT())
        ++leechesDHT;
    else if (peer.fromPeX())
        ++leechesPeX;
    else if (peer.fromLSD())
        ++leechesLSD;
}
```
Let's see if we modify the old code:
```c++
if (peer.fromDHT()) {
    if (peer.isSeed())
        ++seedsDHT;
    else
        ++leechesDHT;
}
else if (peer.fromPeX()) {
    if (peer.isSeed())
        ++seedsPeX;
    else
        ++leechesPeX;
}
else if (peer.fromLSD()) {
    if (peer.isSeed())
        ++seedsLSD;
    else
        ++leechesLSD;
}
```
Personally I like the old code better: it groups the protocols together, not separated away by `isSeed()` flag. And the number of checks done is essentially the same."
238225641,9375,glassez,2018-12-03T11:04:47Z,"I wonder if the following is possible:
```c++
if (peer.fromDHT())
    ++(peer.isSeed()? seedsDHT : leechesDHT);
```
Can you test it?"
238227375,9375,glassez,2018-12-03T11:10:54Z,"""Conflict"""
238229898,9375,glassez,2018-12-03T11:19:45Z,">It might even make sense to remove translation of the msg field entirely.

Real trackers can return untranslated messages so it doesn't make much sense to translate this message.
Otherwise, if you still want to do it, I wouldn't rely on translation from GUI and have own one."
239321164,9375,Piccirello,2018-12-06T03:53:05Z,@glassez I don't think it's worth sacrificing readability to save a couple lines
239321755,9375,Piccirello,2018-12-06T03:58:33Z,"@Chocobo1 Are we certain that a peer cannot come from multiple sources here? Maybe that doesn't make sense (please tell me), but the `peer_info` docs[0] state ""the flags indicating which sources a peer can have come from. A peer may have been seen from multiple sources"". It's very possible that doesn't include dht/lsd/pex, but just want to be certain.

[0] https://www.libtorrent.org/include/libtorrent/peer_info.hpp"
239322199,9375,glassez,2018-12-06T04:01:35Z,">I don't think it's worth sacrificing readability to save a couple lines

Ok."
239389247,9375,Chocobo1,2018-12-06T09:55:12Z,">@Chocobo1 Are we certain that a peer cannot come from multiple sources here? 

No, my example code is wrong."
239998933,9375,glassez,2018-12-08T09:09:19Z,"`nativeEntry()` is for internal use! If someone need these fields they should be provided via **BitTorrent::TrackerEntry** interface.
I can see that you just copied the code from GUI, so the questions are not to you, but to who added it originally.
You're free to not fixing it here."
305440861,10948,glassez,2019-07-19T16:53:32Z,RSS
305443650,10948,glassez,2019-07-19T17:01:14Z,"I would like more specific name, e.g. ""iconmapping.json"" or ""iconconfig.json"""
305565897,10948,glassez,2019-07-20T03:34:06Z,Or just `config.json` if it is supposed to be in `icons` directory.
305565938,10948,glassez,2019-07-20T03:36:01Z,I mean all `RSS` occurrences in icon IDs.
310379086,10948,glassez,2019-08-04T09:42:51Z,"I would use ""AboutDialog.Logo""."
310392568,10948,LordNyriox,2019-08-04T15:38:11Z,"@glassez:  It is my understanding that the same icon is used in multiple places (including the system tray). 

Do you really want to name the icon based on only one of those components? "
310395736,10948,glassez,2019-08-04T17:06:56Z,"@LordNyriox, if you had followed #10903, you might have understood my intentions...
https://github.com/qbittorrent/qBittorrent/issues/10903#issuecomment-510820381"
312428426,10948,glassez,2019-08-09T10:55:21Z,Why do you need this extra scope?
312576480,10948,glassez,2019-08-09T17:24:15Z,Seems like you should fallback to built-in icons in case of error here (e.g. set useCustomUITheme to false).
312577761,10948,glassez,2019-08-09T17:27:30Z,Valid JSON document can be Array so you need to check wether it is really Object.
312580015,10948,glassez,2019-08-09T17:33:33Z,"```c++
QString iconPath = (iter != m_iconMap.end()) ? iter->toString() : QString {};
```"
312601546,10948,glassez,2019-08-09T18:33:06Z,"You should check for empty icon path here since it is error case.
Also you should cache icon path for given icon id in m_iconMap to avoid searching by pattern next time."
312603799,10948,glassez,2019-08-09T18:39:27Z,Seems this method has logical errors. I need to get a fresh look at it.
312703135,10948,jagannatharjun,2019-08-10T13:35:05Z,only here? what if the resource file doesn't have `iconconfig.json` or when some `iconid` can't be found in the custom `iconconfig.json` 
312734982,10948,Chocobo1,2019-08-11T11:37:20Z,Do the code inside `if (m_useSystemTheme) {}` still work? It is important for linux users to use native icons.
312925504,10948,jagannatharjun,2019-08-12T13:31:44Z,I don't think it will work since the changes also include the id supplied to `getIconPath`
312928272,10948,glassez,2019-08-12T13:37:54Z,">It is important for linux users to use native icons.

As I understand it, ""native icons"" should be used (if enabled) no matter what theme is selected, built-in or custom?"
312965549,10948,Chocobo1,2019-08-12T14:51:03Z,">As I understand it, ""native icons"" should be used (if enabled) no matter what theme is selected, built-in or custom?

I think yes."
313801422,10948,jagannatharjun,2019-08-14T10:13:14Z,For this we can have another config file with system icons as mapped values
313901568,10948,glassez,2019-08-14T14:21:49Z,I think something like that will be needed...
319027868,10948,glassez,2019-08-29T11:55:35Z,Is it really good idea to reset preference?
319028472,10948,glassez,2019-08-29T11:57:18Z,else if
319028627,10948,glassez,2019-08-29T11:57:45Z,else
319030652,10948,glassez,2019-08-29T12:03:25Z,"It's meaningless. What can the user guess after seeing this message in the log?
It should be something like ""Invalid icon configuration file format. JSON object is expected."""
319031277,10948,glassez,2019-08-29T12:04:51Z,Dot is missing in the end of message.
319180314,10948,glassez,2019-08-29T17:13:33Z,"I'm not sure that's right... Does it make sense to override mapping for ""system theme"" icons in a custom theme? Shouldn't there just be a three-state option (default-system-custom)? @Chocobo1?"
319181586,10948,glassez,2019-08-29T17:16:39Z,You should compare with mapped icon id to follow current logic. Otherwise it's meaningless.
319187666,10948,glassez,2019-08-29T17:31:02Z,"I strongly dislike it in this way.
You need to merge `Utils::Gui::scaledPixmapSvg()` and `Utils::Gui::scaledPixmap()`. Also the first parameter shouldn't be changed to iconId. You just should to call it as `Utils::Gui::scaledPixmapSvg(UIThemeManager::getIconPath(""AboutDialog.Logo""), this, 32)`"
319191780,10948,glassez,2019-08-29T17:40:51Z,Also how do you suppose to provide fallback icon now? It seems that it should come from (system theme) icon mapping now.
319193066,10948,glassez,2019-08-29T17:43:52Z,Shouldn't we cache flag icons too?
319355873,10948,Chocobo1,2019-08-30T04:52:16Z,">Does it make sense to override mapping for ""system theme"" icons in a custom theme?

I think not.

>Shouldn't there just be a three-state option (default-system-custom)?

I agree although I haven't checked how the GUI should look like."
319499580,10948,glassez,2019-08-30T12:57:11Z,"Or (even better, IMO) keep `getIconPath()` private and implement `UIThemeManager::getPixmap()` that encapsulates all needed logic."
319500014,10948,glassez,2019-08-30T12:58:23Z,Shouldn't this one be immutable?
319505233,10948,glassez,2019-08-30T13:12:07Z,"```c++
QString iconPath = m_iconMap.value(iconId);
```
instead of two lines of code."
319509337,10948,glassez,2019-08-30T13:22:16Z,Will it repeat this message time this icon id is requested? Or just empty icon is created and cached?
319598716,10948,glassez,2019-08-30T17:00:03Z,"Since missing ID isn't really error case (as I said before this case can occur when new ID is introduced in some qBittorrent version but theme is outdated yet) you should fallback to default theme icon.

The real error cases are:
1. Empty filename
2. File doesn't exist

IMO, we should reject such invalid theme at all (and show message to the user).

I also think you can check theme for these errors once it is loaded (since loaded theme is immutable)."
319728820,10948,jagannatharjun,2019-08-31T16:07:54Z,"Did you mean by following?
```
QPixmap scaledPixmap(const QPixmap& pixmap, const QWidget *widget, int height = 0);
QPixmap scaledPixmapSvg(const QPixmap &pixmap, const QWidget *widget, int baseHeight);
```

If yes, then `scaledPixmapSvg` requires to have some key to cache, so will it be better to move `scaledPixmap` and `scaledPixmapSvg` both inside the `UIThemeManager`.  "
319730473,10948,glassez,2019-08-31T17:01:56Z,"I mean you should implement only one of the following:
```c++
QPixmap UIThemeManager::getPixmap(const QString &id, const QWidget *widget, int baseHeight);
QPixmap Utils::Gui::scaledPixmap(const QPixmap &pixmap, const QWidget *widget, int baseHeight);
```

The client code should know nothing about the type of some particular icon/pixmap (it can be different in different theme). So the function should determine it itself."
319732297,10948,jagannatharjun,2019-08-31T18:14:02Z,I tried implementing `UIThemeManager::getPixmap` because then everything will be in one place.I implement this on the basis of scaledPixmapSvg. Can you check now?
319742929,10948,Chocobo1,2019-09-01T04:01:21Z,Does it make sense that a `getPixmap` operation having a `QWidget` as one of the parameters? or maybe a more precise function name is in need?
319743068,10948,Chocobo1,2019-09-01T04:12:03Z,"I haven't been following closely to this PR, so pardon if it doesn't make sense in advance.
I think merging these functions within existing uithememanager methods is a bad idea, those are image scaling functions, it should be preserved in it own form (private functions in uithememanager is acceptable for me, and making it public when required). See how you load `mascot.png`, spilling all the unnecessary details of image scaling details into it.
"
319743108,10948,Chocobo1,2019-09-01T04:15:56Z,"There is also a second consideration to be discussed, is it correct/preferable that a theme manager needs to be concerned about image scaling? Sure it simplifies the code using it, but the big picture looks weird to me. Of course we can have helper functions that provide such conveniences but they should be static functions of the theme manager class."
319743641,10948,jagannatharjun,2019-09-01T04:55:20Z,`UIThemeManager::applyStylesheet` will fail then.
319743703,10948,glassez,2019-09-01T04:58:53Z,">I haven't been following closely to this PR

UIThemeManager should provide icon (or pixmap) by its ID.
The client code (of UIThemeManager) should know nothing about theme details (e.g. real file types etc.).
In some places we need to get scaled pixmap. Currently we have two helpers to scale pixmap (depending on its file type). But we can't proceed to use this way considering the above. So I suggested moving this logic inside the UIThemeManager class. Otherwise we can leave only one helper that will scale existing pixmap (not so optimal since we can't use SVG optimization)."
319743732,10948,glassez,2019-09-01T05:00:46Z,">or maybe a more precise function name is in need?

getScaledPixmap?"
319744043,10948,jagannatharjun,2019-09-01T05:24:16Z,"I mean `UIThemeManager::applyStylesheet` should be aware of the error, I can have an internal variable."
319744123,10948,glassez,2019-09-01T05:31:56Z,">I can have an internal variable.

:+1:"
319744678,10948,Chocobo1,2019-09-01T06:06:52Z,"I think this can work (a careless sketch up):
```c++
QPixmap UIThemeManager::getScaledPixmap(const QString &iconId, const QWidget *widget, int baseHeight) const
{
    const QString iconPath = UIThemeManager::instance()->getIconPath(iconId);
    return Utils::Gui::scaledPixmap(iconPath, widget, baseHeight);  // IMO this function has nothing to do with theme manager
}

QPixmap Utils::Gui::scaledPixmap(const QString &iconPath, const QWidget *widget, const int baseHeight)
{
    const int scaledHeight = baseHeight * Utils::Gui::screenScalingFactor(widget);
    const QString normalizedKey = iconPath + '@' + QString::number(scaledHeight);

    QPixmap pm;
    QPixmapCache cache;
    if (!cache.find(normalizedKey, &pm)) {
        pm = QIcon(iconPath).pixmap(scaledHeight);     
        cache.insert(normalizedKey, pm);
    }
    return pm;
}
```"
319747224,10948,glassez,2019-09-01T07:36:44Z,">I think this can work (a careless sketch up):

I think, Yes.
But UIThemeManager instance shouldn't call itself indirectly:
```c++
QPixmap UIThemeManager::getScaledPixmap(const QString &iconId, const QWidget *widget, int baseHeight) const
{
    const QString iconPath = getIconPath(iconId);
    return Utils::Gui::scaledPixmap(iconPath, widget, baseHeight);
}
```

Also I wouldn't have `widget` as param but `scalingFactor` to be more abstract."
319968524,10948,jagannatharjun,2019-09-02T13:55:17Z,now?
320282662,10948,jagannatharjun,2019-09-03T13:50:39Z,Now I have reset the changes inside `utils.cpp`.  I don't do anything with `utils.*`.  Changed `getPixmap` to `getScaledPixmap` which calls `Utils::Gui::scaledPixmap` as you guys said. 
320312356,10948,jagannatharjun,2019-09-03T14:44:07Z,"Do you mean by  - for every `iconId` which doesn't exist in iconMap, try finding that in defaultIconMap which means - 
1. Load both default iconconfig and custom iconconfig (if custom is enabled) in the constructor
2. Reject custom theme if ""real error case"" exists, (should I check the default Theme for errors too, but only show the error)
3. In `getIconPath`, for every `iconId` which doesn't exist in iconMap, try finding that in defaultIconMap"
320332439,10948,glassez,2019-09-03T15:20:05Z,">for every iconId which doesn't exist in iconMap, try finding that in defaultIconMap

Generally, Yes.
But I think there is a better algorithm:
1. Load default iconconfig. Check it and show errors (or maybe don't check it at all?).
2. Load custom iconconfig. Check it and reject if ""real error case"" exists
3. Join both iconconfigs (add unique and replace existing values in default config with the ones from custom config.
4. Use resulting icon config."
322019358,10948,jagannatharjun,2019-09-08T17:02:28Z,"While checking should I load the icon directly i.e store the icons in something like `std::map<QString, QIcon>`, "
322330498,10948,glassez,2019-09-09T16:13:47Z,Ideally it should be private. Is there any reason to keep it public?
322332166,10948,glassez,2019-09-09T16:17:33Z,I would make it non-static and drop last parameter.
322333899,10948,glassez,2019-09-09T16:21:21Z,I would create QString constants to omit repeated conversions.
322342020,10948,glassez,2019-09-09T16:40:07Z,"On the other hand, it should be really class-independent (and it is actually used to load different files). Then just put it in an anonymous namespace in .cpp. You will also have to change the error handling in it (throw Runtime Error in it and print log message in calling code).

IMO, using static methods in C++ is unjustified in most cases."
322564488,10948,jagannatharjun,2019-09-10T06:03:23Z,"It's actually used to provide icon path to html

https://github.com/jagannatharjun/qBittorrent/blob/d799c7df2029cd17c134d2e66cda874f78bf8af9/src/gui/mainwindow.cpp#L1524-L1536"
323868653,10948,jagannatharjun,2019-09-12T17:45:43Z,I now have changed the fallback to fallbackSysThemeIcon
326881764,10948,jagannatharjun,2019-09-22T03:38:00Z,"Maybe ask the custom theme for absolute icon path, this way they are not just limited to qrc but reference icon from somewhere else also."
328680429,10948,jagannatharjun,2019-09-26T15:27:49Z,"Now there is an internal variable `m_useCustomStylesheet` , loads custom stylesheet if available, not resets the preferences anymore."
328681761,10948,jagannatharjun,2019-09-26T15:30:18Z,"Should I add separate icon id for fallback as well? I think there are only like 4 instances where fallback is actually used.

Well, It does make sense to add IconIds for fallbacks as well. Will replace direct references with Icon ids. "
328682146,10948,jagannatharjun,2019-09-26T15:31:00Z,Done.
329225783,10948,glassez,2019-09-27T19:47:01Z,Is there any real reason to allow custom flags? Can they be different from the default ones?
329228044,10948,glassez,2019-09-27T19:53:53Z,Since these consts are supposed to be used in one .cpp file I would put them into .h instead and omit extern declaration (or even put them into corresponding .cpp directly).
329309703,10948,jagannatharjun,2019-09-28T13:07:08Z,well I have seen people with custom flags but this will be very cumbersome for any one to do. So let me remove them for now.
329310353,10948,jagannatharjun,2019-09-28T13:26:55Z,moved in uithememanager.cpp
329310359,10948,jagannatharjun,2019-09-28T13:27:19Z,removed custom `m_flagsdir`
329423280,10948,glassez,2019-09-30T06:28:16Z,`static` is redundant
329426186,10948,glassez,2019-09-30T06:41:11Z,"MainMenu.ShowRSSTab

And all the similar."
329427004,10948,glassez,2019-09-30T06:45:00Z,"Don't use ""gui/"" when include in sibling files."
329429304,10948,glassez,2019-09-30T06:54:24Z,"Maybe we shouldn't add ""Action"" suffix? Now it seems superfluous. What do you think?"
329430378,10948,glassez,2019-09-30T06:58:32Z,"I would use `CategoryFilter.ContextMenu.Subcategory.AddAction`.

Don't remember if we discussed the real need to have ""ContextMenu"" member... maybe omit it?"
329431681,10948,glassez,2019-09-30T07:03:38Z,Add new line after first `{`
329432228,10948,glassez,2019-09-30T07:05:50Z,You should enclose multiline block with `{}`
329433405,10948,glassez,2019-09-30T07:10:04Z,"Use `QObject::tr()` is bad since it produces translations in QObject context (really it belongs to ""UIThemeManager"" component). It's better to use `QCoreApplication::translate()` with needed context."
329434840,10948,glassez,2019-09-30T07:14:51Z,Redundant comma after `%2`. And below too.
329435557,10948,glassez,2019-09-30T07:17:19Z,Since we have only one possible icon config file we shouldn't show its name in such messages.
329437660,10948,glassez,2019-09-30T07:24:48Z,"Now this function has no common meaning. I would return to the previous approach (make it UIThemeManager member). This should simplify thungs, isn't it?"
329439353,10948,glassez,2019-09-30T07:30:01Z,I would initialize `m_useCustomStylesheet` in class definition.
329442039,10948,glassez,2019-09-30T07:38:38Z,Leftover...
329449440,10948,glassez,2019-09-30T08:00:34Z,"This method interface is still contradicts the implemented model. As I said before fallback should be a part of mapping. Client just want to call `getIcon(""SomeIconId"")`. Which icon is really used is determined by the current configuration."
329451196,10948,glassez,2019-09-30T08:05:09Z,"I would use something like ""RSSView"" instead of ""RSS""."
329493448,10948,jagannatharjun,2019-09-30T09:47:06Z,There are two `iconconfig.json` `systemiconconfig.json`
329494622,10948,jagannatharjun,2019-09-30T09:49:53Z,"no It's loading the custom `systemiconconfig.json`, Unlike `iconconfig.json` I don't merge the default and custom `systemiconconfig.json`

Here it loads the `systemiconconfig.json`"
329538993,10948,jagannatharjun,2019-09-30T11:59:57Z,"Adding `Show` prefix feels like an action, but the icon is used as the Tab Icon."
329541121,10948,glassez,2019-09-30T12:06:44Z,">the icon is used as the Tab Icon.

`MainMenu.RSSTab` is used to provide icon for Tab? Then it is incorrect ID."
329542655,10948,jagannatharjun,2019-09-30T12:11:27Z,There are actually only two such reference one is this one you mention and other is `src\gui\rss\articlelistwidget.cpp`. should I don't use this prefix even in `gui\rss` folder?
329542727,10948,jagannatharjun,2019-09-30T12:11:42Z,Hmm yes It does seem superfluous.
329545158,10948,jagannatharjun,2019-09-30T12:18:35Z,"Will remove ""ContextMenu""."
329546090,10948,jagannatharjun,2019-09-30T12:21:03Z,"Also should I change ""CategoryFilter.Unused.RemoveAction"" to ""CategoryFilter.UnusedCatergories.RemoveAction"""
329546377,10948,glassez,2019-09-30T12:21:52Z,"Didn't we decide to allow no custom ""system icon mapping""?
What's the point to reimplement built-in mapping?"
329547191,10948,glassez,2019-09-30T12:24:01Z,Just follow other include names style in the same file.
329547203,10948,jagannatharjun,2019-09-30T12:24:03Z,actually uncrustify removes it automatically.
329548161,10948,glassez,2019-09-30T12:26:43Z,Then uncrustify misconfigured. You should follow qBittorrent Coding Guidelines.
329548205,10948,jagannatharjun,2019-09-30T12:26:49Z,It should be a static member since It doesn't require anything from `uithememanager`. 
329550222,10948,glassez,2019-09-30T12:31:56Z,"Sorry. I mean different things.
If we really don't need different icon config files then you can change it to non static member function that don't return its result but just modify corresponding class fields. Otherwise leave it as is (resolving other comments)."
329551353,10948,jagannatharjun,2019-09-30T12:34:42Z,"> MainMenu.RSSTab is used to provide icon for Tab?

yeap.

Actually I used this scheme everywhere. f.e `MainMenu.SearchTab`
"
329551597,10948,glassez,2019-09-30T12:35:25Z,"It seems pointless to me to have several different ""system theme"" mappings. System theme has no different icons for the same thing."
329552718,10948,glassez,2019-09-30T12:38:11Z,MainMenu context is for Main menu entries. For tabs you can use MainWindow context.
329553165,10948,jagannatharjun,2019-09-30T12:39:05Z,should I do it inplace since there is only one iconconfig? 
329560453,10948,glassez,2019-09-30T12:55:38Z,"Seems it degrades the readability of the calling code.
Splitting into sub-functions is still useful in terms of code structuring. If some code portion does ""stand-alone"" job, it makes sense to put it in a separate method (unless it's really trivial)."
329560902,10948,jagannatharjun,2019-09-30T12:56:42Z,"I think message lost its context without `Error in iconconfig \""%1\""`,
maybe replace it with `custom icon config json format error` or maybe something better?"
329561572,10948,glassez,2019-09-30T12:58:18Z,"`UnusedCatergories` is better, IMO."
329565226,10948,jagannatharjun,2019-09-30T13:06:28Z,"> should I do it inplace since there is only one iconconfig?

I decided against it since this makes constructor too big."
329570274,10948,glassez,2019-09-30T13:17:30Z,Maybe `Icon configuration file format error: %1.`?
329588075,10948,jagannatharjun,2019-09-30T13:51:43Z,I have a habit of regularly formatting the file even while writing so it will be cumbersome to do it manually since on next format they're gone. So Can I convert these in single liners instead?
329596263,10948,jagannatharjun,2019-09-30T14:07:00Z,"What shall be the name?
`MainMenu.Fallback.ConfigureAction` ,
`Fallback.MainMenu.ConfigureAction`,
`MainMenu.ConfigureAction.Fallback`,
`MainMenu.ConfigureAction2`
"
329597370,10948,glassez,2019-09-30T14:08:57Z,I think we should recheck all IDs at last step.
329601242,10948,glassez,2019-09-30T14:16:03Z,">So Can I convert these in single liners instead?

If the lines don't get too long.
Otherwise you can try to customize uncrustify config to follow our coding style more fully."
329608050,10948,glassez,2019-09-30T14:28:19Z,">What shall be the name?

Sorry, don't understand you.
There is only one name for each IconID. But there should be the way to assign several mappings to it. You can use either ""multi map"" for system icon config or map each id to list of values."
329618231,10948,jagannatharjun,2019-09-30T14:45:50Z,"I am thinking to use ""multi map"".
it should only be limited to the system icon config?"
329622965,10948,glassez,2019-09-30T14:53:34Z,Of course. In case of custom icon theme author should provide truly existed files so no fallback is needed.
329627030,10948,jagannatharjun,2019-09-30T15:00:03Z,"https://github.com/jagannatharjun/qBittorrent/blob/d799c7df2029cd17c134d2e66cda874f78bf8af9/src/gui/mainwindow.cpp#L1524-L1536

I think the above places require hardcoded path anyway, so I will remove the changes and make `getIconPath` private."
329631015,10948,jagannatharjun,2019-09-30T15:07:16Z,since system icon config is internal mapping does it make sense to not do pattern based searching here.
329646417,10948,glassez,2019-09-30T15:35:29Z,">I think the above places require hardcoded path anyway

Why?"
329647755,10948,jagannatharjun,2019-09-30T15:38:05Z,I am not doing pattern-based searching for system icon map.
329648232,10948,jagannatharjun,2019-09-30T15:38:59Z,May be `RSSTab`?
329649166,10948,glassez,2019-09-30T15:40:51Z,"Yes, at a first glance.
But I need to look at the whole algorithm to answer exactly."
329651641,10948,glassez,2019-09-30T15:45:43Z,Tabs is just a way to organise Views/Widgets in container (Main window in this case).
329669976,10948,jagannatharjun,2019-09-30T16:24:55Z,okay sorry! I mixed it up with something else
329683093,10948,jagannatharjun,2019-09-30T16:55:46Z,"They're actually used in RSS Feed List so may be `RSSFeedList`, but `RSSView` seems good to"
329684306,10948,jagannatharjun,2019-09-30T16:58:27Z,Where it is actually used? I mean I can't able to understand in which context this icon is actually used thats why such a weird name.
219438512,9562,zeule,2018-09-21T09:32:15Z,You might want to consider using `C_THIN_SPACE` here.
219438617,9562,zeule,2018-09-21T09:32:41Z,"unit, <whitespace> bool, please."
219438807,9562,zeule,2018-09-21T09:33:20Z,"Whitespace between arguments, please."
219438878,9562,zeule,2018-09-21T09:33:34Z,Whitespace
219671701,9562,zeule,2018-09-22T13:27:55Z,"I'm not sure I understood the code below completely, but wouldn't powers of 2 make the nicest scale since we use unit multiplicator value of 1024?"
219672791,9562,dzmat,2018-09-22T14:10:25Z,"According to [Formatting values of quantities](https://en.wikipedia.org/wiki/Whitespace_character#Formatting_values_of_quantities) here should be normal width space.
Anyway, C_NON_BREAKING_SPACE is already used in qbittorrent and I'm satisfied how it looks."
219673260,9562,dzmat,2018-09-22T14:29:21Z,"No, power of 2 does not fit good because if gives ""round values"" with many zeros in binary form, not in radix(10) human readable form. And labels having non-zero fractional part makes things even more complicated."
219673369,9562,zeule,2018-09-22T14:34:04Z,"Pardon me, I don't understand that. What fractional parts? How they could appear if we use unit prefixes? Are you talking about scale for speeds up to a few bytes per second (when no prefixes are used)?"
219673411,9562,zeule,2018-09-22T14:36:02Z,"Sure, but since we never show thousands we don't need a separator for them. I just wanted to save a bit of space, hence the suggestion."
219673436,9562,dzmat,2018-09-22T14:37:14Z,"Fixed all missed space mishaps. I just wonder, are there any rule for uncrustify for this?"
219673468,9562,zeule,2018-09-22T14:39:07Z,"Thanks! uncrustify should do that with the config from the repo, yes."
219673694,9562,dzmat,2018-09-22T14:49:59Z,I am talking about case when speed is in range 1kb/s- 4 kb/s or 1mb/s- 4 mb/s etc. Here fractional part in intermediate labels is inevitable.
219673799,9562,dzmat,2018-09-22T14:54:12Z,If we just step down to lower unit (mbit/s -> kbit/s for example) there will be to many non-zero digits in labels and no enhancement in appearance.
219674002,9562,dzmat,2018-09-22T15:02:42Z,"I'm using qbittorrent project's uncrustify.cfg, but if does not do this job for my bad luck. Other formatting issues it fixes, but not that."
224760579,9562,glassez,2018-10-12T11:59:53Z,"It's too pointless for me to have a function that just prepends some string with a space. But it makes sense to add ""isSpeed"" parameter to ""unitString()""."
224760930,9562,glassez,2018-10-12T12:01:28Z,"Please don't add ""::"" without strong reason."
224761545,9562,glassez,2018-10-12T12:04:15Z,Don't use function-style cast. Use appropriate c++ cast.
224761664,9562,glassez,2018-10-12T12:04:53Z,Why not const?
224813764,9562,dzmat,2018-10-12T14:56:28Z,fixed
224815031,9562,dzmat,2018-10-12T14:59:45Z,fixed
224837996,9562,dzmat,2018-10-12T16:04:53Z,"The main goal was to reuse already translated strings. Also I thought that unit strings are always prepended by space to separate from numbers. So at first I changed existing `unitString()` to use `isSpeed` parameter (as you want) and do padding (to follow DRY principle and so on). But build broke up. There is 8 usage point in src/gui/search/searchjobwidget.cpp on lines 319-325 which are ignored by qtcreator code parser ""find usages"" function (because of lack of Utils::Misc:: access specification) but are  compilable nevertheless. (I think they should generate compile error, but they didn't).
This forced me to resurrect old  `unitString()` and place a new function side by side. And this function is used in 4 places, so it is not so useless in spite of it's simplicity. "
224847319,9562,glassez,2018-10-12T16:37:35Z,"It doesn't generate compile errors due to [ADL](https://en.cppreference.com/w/cpp/language/adl). Personally, I don't like the ""blind"" use of such things."
224851089,9562,glassez,2018-10-12T16:51:48Z,"@dzmat,  you don't seem familiar with the qBittorrent Coding Style. Maybe now is the time to get acquainted with it? I can't point to every obvious violation when most of the code below is broken."
224874537,9562,glassez,2018-10-12T18:17:22Z,">And this function is used in 4 places, so it is not so useless in spite of it's simplicity.

That sounds lame...
If it will be used some times in parentheses, will you add ""unitStringInParentheses()"" and so on?
>So at first I changed existing unitString() to use isSpeed parameter (as you want) and do padding (to follow DRY principle and so on). But build broke up. There is 8 usage point in src/gui/search/searchjobwidget.cpp on lines 319-325 which are ignored by qtcreator code parser ""find usages"" function 

If you add default (false) value to  isSpeed param there shouldn't be problems with existing usages."
224950502,9562,glassez,2018-10-13T05:42:42Z,Unfortunately uncrustify fails to fix coding style completely. It even makes an opposite result in some cases.
224950537,9562,glassez,2018-10-13T05:45:18Z,There should be blank line between definitions.
224950553,9562,glassez,2018-10-13T05:46:15Z,This blank line isn't allowed since it separates nothing.
224950590,9562,glassez,2018-10-13T05:48:30Z,There should not be any spaces between parentheses and their content.
224950616,9562,glassez,2018-10-13T05:50:19Z,"```c++
int roundedValue = static_cast<int>(value / 40) * 40;
```"
224950678,9562,glassez,2018-10-13T05:54:21Z,"The following is more effective, isn't it?
```c++
qint64 scale = 1;
while (value > (scale * 1024))
    scale *= 1024;
value /= scale;
```"
224950742,9562,glassez,2018-10-13T05:58:30Z,"Or even
```c++
qint64 scale = 1;
while (value > (scale << 10))
    scale <<= 10;
value /= scale;
```"
224950860,9562,glassez,2018-10-13T06:05:26Z,Please add blank line above.
224950878,9562,glassez,2018-10-13T06:06:14Z,Please add blank line above.
224950886,9562,glassez,2018-10-13T06:07:08Z,Please add blank line above.
224950917,9562,glassez,2018-10-13T06:09:02Z,This seems to be unreachable since you return in case of `value > 10`.
224950945,9562,glassez,2018-10-13T06:11:01Z,Don't use function-style cast!
224950965,9562,glassez,2018-10-13T06:11:57Z,Please add blank line above.
224951081,9562,glassez,2018-10-13T06:19:51Z,"```c++
for (const auto &roundedValue : roundingTable) {
    if (value <= roundedValue)
         // return what you need
}
```"
224951158,9562,glassez,2018-10-13T06:23:24Z,"`else` should be in the next line.
You can write it as `else if (...)` in this case."
224951193,9562,glassez,2018-10-13T06:24:59Z,Remove `else`. It's meaningless since corresponding `if` ends with `return` statement.
224951313,9562,glassez,2018-10-13T06:29:28Z,`const double niceScale = getNiceYScale(maxYValue());`
224951362,9562,glassez,2018-10-13T06:31:22Z,You don't need cast to double since niceScale is double.
224953746,9562,dzmat,2018-10-13T08:38:10Z,fixed
224953796,9562,dzmat,2018-10-13T08:40:54Z,fixed
224953800,9562,dzmat,2018-10-13T08:41:11Z,fixed
224953919,9562,dzmat,2018-10-13T08:47:07Z,fixed
224954613,9562,dzmat,2018-10-13T09:15:35Z,"In all this cycle variants there are 1 comparison and 2 arithmetical operations in cycle body. And in your variants also adds 1 operation after exit of the cycle. Let's cout operations on starting value=2000 for example.
1. My variant.  
```
//condition calculation
- comparison
//body
- operation
- operation
//condition calculation
- comparison
//cycle exit
```

Total is 2 comparisons and 2 operations.

2. Your variant (both of them are identical in code structure).
```
//condition calculation
- operation
- comparison
//body
- operation
//condition calculation
- operation
- comparison
//cycle exit
- operation
```
Total is 2 comparisons and 4 operations.

What about replacing arithmetic with shifts - modern compilers will do it itself, if it really gives some gain. And the age of 8 bit CPU when it gives significant profit has gone log time ago.
Anyway, this is not a hot spot code, where we should fight for every cycle. So really only maintainability considerations are applicable IMHO. "
224954693,9562,dzmat,2018-10-13T09:18:38Z,fixed
224954816,9562,dzmat,2018-10-13T09:24:25Z,fixed
224954891,9562,dzmat,2018-10-13T09:28:07Z,fixed
224955135,9562,glassez,2018-10-13T09:38:44Z,"I just hate to see such suboptimal calculations in a loop. But here we will usually have 2-3 steps, so it is not so important.

BTW, it can be optimized even more than in my example."
224955159,9562,dzmat,2018-10-13T09:40:12Z,Fixed. 
224955917,9562,dzmat,2018-10-13T10:11:26Z,fixed
224955924,9562,dzmat,2018-10-13T10:11:35Z,fixed
224955949,9562,dzmat,2018-10-13T10:12:58Z,fixed
224955976,9562,dzmat,2018-10-13T10:14:04Z,fixed
224955992,9562,dzmat,2018-10-13T10:14:27Z,fixed
224956184,9562,dzmat,2018-10-13T10:22:47Z,fixed
224957039,9562,dzmat,2018-10-13T11:09:01Z,"> will you add ""unitStringInParentheses()"" 

At least I will consider to do this. :)
Removed paddedUnitString."
224957317,9562,glassez,2018-10-13T11:21:59Z,You should enclose loop body with braces (since it's multiline).
224957343,9562,glassez,2018-10-13T11:23:27Z,You should enclose `if` body with braces (since it's multiline).
224957373,9562,glassez,2018-10-13T11:24:38Z,You forgot isSpeed param.
224957429,9562,glassez,2018-10-13T11:27:33Z,`(rect.height() / niceScale)`
224957537,9562,glassez,2018-10-13T11:32:53Z,"Please describe why these two can't be defined using ""Utils::Misc::friendlyUnit()""."
224957552,9562,glassez,2018-10-13T11:33:37Z,const
224960137,9562,dzmat,2018-10-13T13:23:59Z,Added braces. Uncrustify wants to remove it.
224960256,9562,dzmat,2018-10-13T13:30:24Z,fixed
224960582,9562,glassez,2018-10-13T13:47:49Z,Remove Uncrustify! :)
224960644,9562,dzmat,2018-10-13T13:49:57Z,"Omg, fixed"
224960670,9562,dzmat,2018-10-13T13:50:45Z,fixed
224962917,9562,dzmat,2018-10-13T15:24:49Z,what did you mean by the words _these two_ ?  And by which one of two `Utils::Misc::friendlyUnit()` functions? There are two overloaded functions with totally different semantics (this code is kind of rotten a bit for me).
225124111,9562,glassez,2018-10-15T11:05:38Z,">what did you mean by the words these two ?

I mean these two return statements."
225124757,9562,glassez,2018-10-15T11:08:25Z,"`niceLabel()` has a bit confusing definition and parameters. What is it supposed to be? Why ""unit"" is non-const reference (aka output parameter)?"
225134097,9562,dzmat,2018-10-15T11:45:19Z,"Well, may be some refactoring is already needed here. I'll try to do so. Marking as WIP meanwhile"
225178819,9562,glassez,2018-10-15T14:07:26Z,"Current code uses friendlyUnit() for creating graph labels. IIRC, you stop to use it since it uses predefined precision values. Why not refactor it to accept precision as param?"
225186101,9562,dzmat,2018-10-15T14:26:47Z,"Not only precision was a culprit. But the fact that ""unit"" is determined independently for consequent labels on the same scale leads to impossibility to create all labels ""nice looking"" when they are become sitting on different ""unit"" For example when speed is circa 1.2 MBytes/s than 100% label get Mbytes/s unit and 0.75 and lower labels gets KBytes/s unit. 
And there is no way to align scale such that all labels are nice in this case. 
I was stuck trying different algorithms until I figured out that to make all labels looks nice I have to force them to be printed using the same unit for all labels. Even if printed value is lesser then 1.0 on digital part."
225390631,9562,glassez,2018-10-16T04:06:12Z,Coding style is broken here.
225391159,9562,glassez,2018-10-16T04:08:38Z,We must have only an integer number of bytes. Is underlying function returns floating point number?
225391444,9562,glassez,2018-10-16T04:10:30Z,Won't `++calculatedUnit` work?
225391632,9562,glassez,2018-10-16T04:11:41Z,Is explicit cast required here?
225392000,9562,glassez,2018-10-16T04:14:48Z,SizeUnit is simple type. You don't need to pass it as const reference.
225392275,9562,glassez,2018-10-16T04:16:25Z,We don't accept such formatting.
225392730,9562,glassez,2018-10-16T04:20:23Z,I think you should use `Utils::String::fromDouble()` instead. Apparently it has some project-wide improvements... @Chocobo1?
225450335,9562,Chocobo1,2018-10-16T08:49:52Z,"not sure, using Utils::String::fromDouble could avoid code duplication if applicable."
225494583,9562,dzmat,2018-10-16T11:07:37Z,fixed
225494616,9562,dzmat,2018-10-16T11:07:46Z,fixed
225496036,9562,dzmat,2018-10-16T11:13:28Z,"No, Direct arithmetic operation on enum type gives compilation error. `++x ; x+=1; x=x+1;` any of them does not pass."
225497310,9562,dzmat,2018-10-16T11:18:45Z,"Without expicit cast there is a warning:
```
C:\work\qbt_build_tree\qBittorrent\src\gui\properties\speedplotview.cpp:239: warning: narrowing conversion of 'roundedValue' from 'int' to 'double' inside { } [-Wnarrowing]
             return {roundedValue, calculatedUnit};
                                                   ^
```"
225497577,9562,dzmat,2018-10-16T11:19:58Z,fixed
225497711,9562,dzmat,2018-10-16T11:20:31Z,fixed
225499018,9562,dzmat,2018-10-16T11:26:08Z,"I deliberately did not use `Utils::String::fromDouble()` because it rounds to `floor()`, and this rounding method does not fits here. I have tried to use it, but was not satisfied."
225787096,9562,glassez,2018-10-17T05:48:45Z,Ok.
225787579,9562,glassez,2018-10-17T05:52:23Z,How about `++static_cast<int>(calculatedUnit);`?
225788320,9562,glassez,2018-10-17T05:57:35Z,You can exclude 10 from roundingTable so it becomes a valid case (and you don't need to have this comment).
225891134,9562,dzmat,2018-10-17T11:49:43Z,"```
C:\work\qbt_build_tree\qBittorrent\src\gui\properties\speedplotview.cpp:233: error: assignment to cast is illegal, lvalue casts are not supported
..\..\qBittorrent\src\gui\properties\speedplotview.cpp:233:46: error: lvalue required as increment operand
             ++static_cast<int>(calculatedUnit);
                                              ^
```"
225891457,9562,dzmat,2018-10-17T11:50:50Z,Yes! Did so.
225894107,9562,glassez,2018-10-17T11:59:35Z,"Well, leave it as is."
226541306,9562,Chocobo1,2018-10-19T06:08:53Z,I would add `const` to these parameters.
226541405,9562,Chocobo1,2018-10-19T06:09:49Z,shouldn't we have namespace declaration at top of the file?
226541518,9562,Chocobo1,2018-10-19T06:10:57Z,`const qint64 sizeInBytes`
226541638,9562,Chocobo1,2018-10-19T06:12:08Z,I don't think static_cast is required.
226542122,9562,glassez,2018-10-19T06:16:04Z,It's existing code. See diff above.
226542315,9562,Chocobo1,2018-10-19T06:17:23Z,"ok, forget it."
226542567,9562,Chocobo1,2018-10-19T06:18:30Z,shouldn't we have namespace declaration at top of the file?
226543064,9562,Chocobo1,2018-10-19T06:21:58Z,"I would prefer to remove this and do:
```c++
struct SplittedValue { Utils::Misc::SizeUnit unit; // .... }

SplittedValue getNiceYScale(double value)
{ using Utils::Misc::SizeUnit; // ... }

QString formatLabel(const double argValue, const Utils::Misc::SizeUnit unit)
{// ...}

```"
226544684,9562,Chocobo1,2018-10-19T06:32:22Z,please add blank line.
226544915,9562,Chocobo1,2018-10-19T06:33:34Z,"please add parentheses: `formatLabel((0.xx * niceScale.arg), niceScale.unit)`"
226547376,9562,Chocobo1,2018-10-19T06:48:44Z,"How is this table generated?
So this PR makes the Y label to have values that are multiple from this table?"
226547881,9562,Chocobo1,2018-10-19T06:51:28Z,how about `getRoundedYScale`?
226548101,9562,Chocobo1,2018-10-19T06:52:34Z,seems you don't need this line... however I'm not sure...
226548429,9562,Chocobo1,2018-10-19T06:54:40Z,can we have a better name for it? maybe `value`?
226589873,9562,dzmat,2018-10-19T09:43:03Z,"Number from this table become 100% label and give ""nice looking"" 25% (and 50%, 75% consequently too) label(s)."
226611006,9562,dzmat,2018-10-19T11:11:06Z,"Here are too many `value` variables already. and they all are measured in bytes. I intentionally did not use that name to prevent confusion. So if you prefer another name, please suppose other than 'value'."
226611979,9562,dzmat,2018-10-19T11:15:34Z,done
226612908,9562,dzmat,2018-10-19T11:19:55Z,"In the CODING_GUIDELINES.md there is nothing about that. Anyway, moved to the top."
226615380,9562,dzmat,2018-10-19T11:30:54Z,fixed
226615600,9562,dzmat,2018-10-19T11:31:55Z,moved
226616579,9562,dzmat,2018-10-19T11:36:29Z,done
226616965,9562,glassez,2018-10-19T11:38:28Z,"@Chocobo1, when you suggest to add const to parameter passed by value, please, don't forget to mention that it's applicable only to the function definition (and shouldn't affect its declaration)."
226617249,9562,dzmat,2018-10-19T11:39:52Z,"Not sure where did you mean it, added below."
226617634,9562,dzmat,2018-10-19T11:41:40Z,Added
226618443,9562,dzmat,2018-10-19T11:45:06Z,done
226622451,9562,dzmat,2018-10-19T12:03:48Z,"If we remove that line, we can get strangely looking labels on low speeds. For example, starting calculation with 5 bytes/s , we will get such formatLabels() output:
for 0 => 0
for 0.25 => 2
for 0.50 => 3
for 0.75 => 5
for 1.00 => 6
For preventing such awkward labels is this ""safety barrier"" placed here."
226827912,9562,Chocobo1,2018-10-20T13:57:29Z,"Yes, thank you!"
226828183,9562,Chocobo1,2018-10-20T13:59:17Z,"Thanks! [;)](https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#11-not-covered-above)
"
226828225,9562,Chocobo1,2018-10-20T14:01:18Z,"you forgot the space: `unit, const`"
226828343,9562,Chocobo1,2018-10-20T14:05:59Z,"The `const` need only be added to function definition, not declaration, so please remove the `const` here."
226847775,9562,dzmat,2018-10-21T05:08:41Z,fixed
226847982,9562,dzmat,2018-10-21T05:21:55Z,"It confuses me, but somehow gets compiled even without warnings."
341308565,11433,glassez,2019-10-31T18:43:52Z,Semicolon is redundant here.
341312054,11433,glassez,2019-10-31T18:51:43Z,getColorByState is redundant now so you should assign values directly. Also please use field initializers instead of constructor body.
341313581,11433,glassez,2019-10-31T18:55:12Z,Maybe try to inherit TransferListModel from QWidget too?
341316893,11433,jagannatharjun,2019-10-31T19:02:37Z,I don't think multiple inheritance is allowed
341317655,11433,jagannatharjun,2019-10-31T19:04:32Z,"multiple states have the same color, that's why I did it this way.

Will convert to constructor body."
341318400,11433,jagannatharjun,2019-10-31T19:06:24Z,"I actually did spend almost an hour to figure out what's happening since Qt docs never mention this

https://www.man42.net/blog/2011/09/qt-stylesheet-custom-q_property/"
341326536,11433,glassez,2019-10-31T19:26:27Z,"Either
1. rename it to TransferListColors and drop ""Color"" part from property names, or 
2. drop ""TextColor"" part from property names."
341436068,11433,Chocobo1,2019-11-01T02:55:35Z,wrong order.
341436255,11433,Chocobo1,2019-11-01T02:56:49Z,you missed giving the function argument a name.
341436330,11433,Chocobo1,2019-11-01T02:57:13Z,redundant space at end
341436404,11433,Chocobo1,2019-11-01T02:57:40Z,probably add a default case here or where it makes sense.
341436470,11433,Chocobo1,2019-11-01T02:58:07Z,add `const` to `state`.
341437131,11433,Chocobo1,2019-11-01T03:02:09Z,Why convert `BitTorrent::TorrentState` to `int` and back?
341437846,11433,Chocobo1,2019-11-01T03:07:19Z,Maybe you only need to inherit QObject instead of QWidget?
341458997,11433,glassez,2019-11-01T05:53:55Z,"@Chocobo1, see comment above."
341464198,11433,jagannatharjun,2019-11-01T06:29:54Z,to not include `bittorrent/torrenthandle.h` in `transferlistmodel.h`. Should I include it?
341464324,11433,jagannatharjun,2019-11-01T06:30:39Z,kill me XD.
341467776,11433,jagannatharjun,2019-11-01T06:52:18Z,"Initialization in the constructor line is done.

Should I remove the `getColorByState`? 
IDK I prefer it this way since there is same color for multiple torrent states and color is itself based on two states(dark, light). but if you insist I will remove the `getColorByState`."
341467802,11433,jagannatharjun,2019-11-01T06:52:26Z,done.
341467926,11433,jagannatharjun,2019-11-01T06:53:16Z,done
341467944,11433,jagannatharjun,2019-11-01T06:53:23Z,done
341467970,11433,jagannatharjun,2019-11-01T06:53:31Z,done?
341467995,11433,jagannatharjun,2019-11-01T06:53:42Z,done
341472775,11433,Chocobo1,2019-11-01T07:21:03Z,Is it possible to use `const QColor` here?
341472832,11433,Chocobo1,2019-11-01T07:21:24Z,constructor should come first (above `Q_PROPERTY`)
341473444,11433,Chocobo1,2019-11-01T07:25:02Z,you need to add a space `m_unknown {...}`
341474480,11433,Chocobo1,2019-11-01T07:30:41Z,I think yes.
341474670,11433,jagannatharjun,2019-11-01T07:31:40Z,nope compilation failes.
341475895,11433,jagannatharjun,2019-11-01T07:37:57Z,done
341475929,11433,jagannatharjun,2019-11-01T07:38:07Z,done
341475948,11433,jagannatharjun,2019-11-01T07:38:13Z,done?
341476697,11433,Chocobo1,2019-11-01T07:41:46Z,you didn't remove this line in transferlistmodel.cpp
341476777,11433,Chocobo1,2019-11-01T07:42:05Z,And wrong order.
341476979,11433,Chocobo1,2019-11-01T07:42:59Z,seems you also need to add `CONSTANT` to `Q_PROPERTY` entries.
341477387,11433,Chocobo1,2019-11-01T07:44:52Z,you misunderstood. Look for examples in session.cpp. Requirement for spaces are different for () and {}.
341478132,11433,jagannatharjun,2019-11-01T07:48:32Z,I chose the latter. done?
341479264,11433,jagannatharjun,2019-11-01T07:54:21Z,"compiles but qss doesn't work anymore
![image](https://user-images.githubusercontent.com/34717789/68010547-e77ed680-fcaa-11e9-85c4-bf91bd640756.png)
"
341479293,11433,Chocobo1,2019-11-01T07:54:29Z,Are those required to be `public`?
341479403,11433,Chocobo1,2019-11-01T07:55:01Z,Is it a good idea to use `QColor operator(BitTorrent::TorrentState state) const;`?
341479621,11433,Chocobo1,2019-11-01T07:55:42Z,OK forget it.
341480861,11433,jagannatharjun,2019-11-01T08:01:59Z,Well making it private doesn't affect anything but doesn't property should always be public. As they are already modifying outside the class `setProperty`? 
341480976,11433,jagannatharjun,2019-11-01T08:02:35Z,IDK may be @glassez  can say something.
341481656,11433,jagannatharjun,2019-11-01T08:05:41Z,now?
341481788,11433,jagannatharjun,2019-11-01T08:06:22Z,now?
341481985,11433,jagannatharjun,2019-11-01T08:07:23Z,"Also, I think operator overloading is scarcely used throughout qbittorrent code."
341482749,11433,Chocobo1,2019-11-01T08:11:07Z,This can be `const`.
341508983,11433,Chocobo1,2019-11-01T09:48:32Z,"This look otherwise: https://doc.qt.io/qt-5/properties.html#a-simple-example
IMO if it can be `private` then it shouldn't be `public`."
341513617,11433,Chocobo1,2019-11-01T10:04:11Z,"just found out that you can forward declare `enum class TorrentState;` then you won't need to make this change.
On a second thought, this will depends on the underlying type, so probably not a very foolproof way."
341516231,11433,jagannatharjun,2019-11-01T10:13:03Z,So should I do it?
341516774,11433,jagannatharjun,2019-11-01T10:14:58Z,done
341516879,11433,jagannatharjun,2019-11-01T10:15:20Z,done
341518616,11433,jagannatharjun,2019-11-01T10:21:32Z,done
341518725,11433,Chocobo1,2019-11-01T10:21:53Z,just leave it for now...
341519336,11433,Chocobo1,2019-11-01T10:24:00Z,"... but it is already used through out the code base, well, make your choice."
341519562,11433,jagannatharjun,2019-11-01T10:24:49Z,You marked this resolved so I am not reverting the commit.
341520429,11433,Chocobo1,2019-11-01T10:27:47Z,"Sorry, I pressed that button too quickly.
I think I'll make another PR that prohibits forward declaring enum class. So it would be best that we make it right here."
341521678,11433,jagannatharjun,2019-11-01T10:32:35Z,"I think you meant to revert the commit, so I reverted it"
341521999,11433,jagannatharjun,2019-11-01T10:33:43Z,my English skills are still not that good. I'm working on it 😂😊
341538136,11433,Chocobo1,2019-11-01T11:32:50Z,">I think you meant to revert the commit, so I reverted it

yes

>my English skills are still not that good. I'm working on it 

no worries :)"
341631978,11433,Chocobo1,2019-11-01T15:46:04Z,"OK I did some test and I have cleared my confusion. In short, forward declaring enum class is okay since the compiler (gcc) will check whether the underlying type is the same. So sorry about the misleading discussion above. You can drop the `Revert ""TorrentState""` commit and you also should not use const reference instead of plain value (see torrentcontentmodelfile.h for example)."
341645102,11433,jagannatharjun,2019-11-01T16:16:38Z,done.
341657053,11433,Chocobo1,2019-11-01T16:47:07Z,`const BitTorrent::TorrentState state`
341666067,11433,jagannatharjun,2019-11-01T17:09:46Z,"sorry for such a stupid mistake again
done."
358172907,11433,glassez,2019-12-16T11:04:21Z,"It's better to have some struct here (e.g. TorrentStateColors m_torrentStateColors). Or even `QHash<TorrentState, QColor>` since you want to access each color separately."
358257096,11433,jagannatharjun,2019-12-16T14:19:44Z,"I used `std::unordered_map`, QHash complains about missing qHash function."
358296751,11433,glassez,2019-12-16T15:28:58Z,All these properties aren't supposed to be changed in a regular way so I think you can declare them private
358299136,11433,Chocobo1,2019-12-16T15:32:55Z,"Looks a bit weird to me, how about this:
```c++
, m_stateForegroundColors {
    {BitTorrent::TorrentState::Unknown, getColorByState(BitTorrent::TorrentState::Unknown)},
    // ...
}
```"
358301956,11433,Chocobo1,2019-12-16T15:37:46Z,"I'm not sure, would sorting these functions (setters and getters and Q_PROPERTYs) alphabetically makes it easier to maintain?"
358305398,11433,Chocobo1,2019-12-16T15:43:31Z,"Let's try using QHash here, what was the error message? FYI I can use `QHash<BitTorrent::TorrentState, QColor> m_stateForegroundColors;` without providing a custom qHash() function."
358311556,11433,jagannatharjun,2019-12-16T15:53:55Z,These are defined in the order of TorrentState is defined and I am bad with sorting alphabetically 😛
358316715,11433,jagannatharjun,2019-12-16T16:02:32Z,"```
[9/17] Building CXX object src\gui\CMakeFiles\qbt_gui.dir\transferlistmodel.cpp.obj
FAILED: src/gui/CMakeFiles/qbt_gui.dir/transferlistmodel.cpp.obj
E:\Cpp\VS\2019\VC\Tools\MSVC\14.24.28314\bin\Hostx64\x64\cl.exe  /nologo /TP -DBOOST_ALL_NO_LIB -DNOMINMAX -DNTDDI_VERSION=0x06010000 -DQBT_VERSION=\""v4.3.0alpha1\"" -DQBT_VERSION_2=\""4.3.0alpha1\"" -DQBT_VERSION_BUGFIX=0 -DQBT_VERSION_BUILD=0 -DQBT_VERSION_MAJOR=4 -DQBT_VERSION_MINOR=3 -DQT_CORE_LIB -DQT_DEPRECATED_WARNINGS -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_NO_CAST_TO_ASCII -DQT_STRICT_ITERATORS -DQT_USE_QSTRINGBUILDER -DQT_WIDGETS_LIB -DQT_WINEXTRAS_LIB -DQT_XML_LIB -DSTACKTRACE -DUNICODE -DWIN32 -DWIN32_LEAN_AND_MEAN -D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE -D_UNICODE -D_WIN32 -D_WIN32_IE=0x0601 -D_WIN32_WINNT=0x0601 -Isrc\gui\qbt_gui_autogen\include -I..\src -I..\src\gui\..\app -I..\src\gui -I..\src\gui\powermanagement -I..\src\gui\properties -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\.\mkspecs\win32-msvc -IE:\Cpp\Sources\libtorrent\include -IE:\Cpp\Sources\OpenSSL-Win64\include -IE:\Cpp\Sources\boost\boost_1_71_0 -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtNetwork -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtXml -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtGui -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtANGLE -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtWidgets -IE:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtWinExtras /DWIN32 /D_WINDOWS /W3 /GR /EHsc -wd4290 -wd4275 -wd4251 /W4 /MDd /Zi /Ob0 /Od /RTC1   -DBOOST_ASIO_DISABLE_CONNECTEX -DBOOST_EXCEPTION_DISABLE -DTORRENT_USE_LIBCRYPTO -DTORRENT_USE_OPENSSL -DTORRENT_DISABLE_RESOLVE_COUNTRIES -DTORRENT_DEBUG -DTORRENT_LINKING_SHARED -DBOOST_SYSTEM_DYN_LINK -std:c++14 /showIncludes /Fosrc\gui\CMakeFiles\qbt_gui.dir\transferlistmodel.cpp.obj /Fdsrc\gui\CMakeFiles\qbt_gui.dir\qbt_gui.pdb /FS -c ..\src\gui\transferlistmodel.cpp
cl : Command line warning D9025 : overriding '/W3' with '/W4'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(117): error C2665: 'BitTorrent::qHash': none of the 32 overloads could convert all the argument types
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtGui/qtransform.h(205): note: could be 'uint qHash(const QTransform &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtGui/qmatrix.h(143): note: or       'uint qHash(const QMatrix &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qdatetime.h(414): note: or       'uint qHash(const QTime &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qdatetime.h(413): note: or       'uint qHash(const QDate &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qdatetime.h(412): note: or       'uint qHash(const QDateTime &,uint)'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qlocale.h(62): note: or       'uint qHash(const QLocale &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qabstractitemmodel.h(467): note: or       'uint qHash(const QModelIndex &) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qabstractitemmodel.h(153): note: or       'uint qHash(const QPersistentModelIndex &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qregexp.h(56): note: or       'uint qHash(const QRegExp &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(107): note: or       'uint qHash(std::nullptr_t,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(104): note: or       'uint qHash(QLatin1String,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(103): note: or       'uint qHash(const QBitArray &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(102): note: or       'uint qHash(QStringView,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(100): note: or       'uint qHash(const QStringRef &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(99): note: or       'uint qHash(const QString &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(97): note: or       'uint qHash(const QByteArray &,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(96): note: or       'uint qHash(const QChar,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(94): note: or       'uint qHash(long double,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(92): note: or       'uint qHash(double,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(91): note: or       'uint qHash(float,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(90): note: or       'uint qHash(qint64,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(86): note: or       'uint qHash(quint64,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(85): note: or       'uint qHash(long,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(79): note: or       'uint qHash(ulong,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(78): note: or       'uint qHash(int,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(77): note: or       'uint qHash(uint,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(76): note: or       'uint qHash(short,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(75): note: or       'uint qHash(ushort,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(74): note: or       'uint qHash(signed char,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(73): note: or       'uint qHash(uchar,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(72): note: or       'uint qHash(char,uint) noexcept'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(117): note: while trying to match the argument list '(const T)'
        with
        [
            T=BitTorrent::TorrentState
        ]
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(116): note: see reference to function template instantiation 'uint qHash<Key>(const T &,uint) noexcept(<expr>)' being compiled
        with
        [
            Key=BitTorrent::TorrentState,
            T=BitTorrent::TorrentState
        ]
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qhash.h(930): note: while compiling class template member function 'QHashNode<Key,T> **QHash<Key,T>::findNode(const Key &,uint *) const'
        with
        [
            Key=BitTorrent::TorrentState,
            T=QColor
        ]
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qhash.h(758): note: see reference to function template instantiation 'QHashNode<Key,T> **QHash<Key,T>::findNode(const Key &,uint *) const' being compiled
        with
        [
            Key=BitTorrent::TorrentState,
            T=QColor
        ]
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qhash.h(881): note: while compiling class template member function 'void QHash<BitTorrent::TorrentState,QColor>::reserve(int)'
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore\qhash.h(248): note: see reference to function template instantiation 'void QHash<BitTorrent::TorrentState,QColor>::reserve(int)' being compiled
E:\Cpp\Projects\bittorent\qBittorrent\src\gui\transferlistmodel.h(115): note: see reference to class template instantiation 'QHash<BitTorrent::TorrentState,QColor>' being compiled
E:\Cpp\Qt\5.13.0\5.13.0\msvc2017_64\include\QtCore/qhashfunctions.h(117): error C2056: illegal expression
ninja: build stopped: subcommand failed.
```
"
358322903,11433,Chocobo1,2019-12-16T16:12:45Z,"Weird...
I only did 3 things in transferlistmodel.h to get it compile on gcc:
1. Add `QHash<BitTorrent::TorrentState, QColor> m_stateForegroundColors;`
2. Add `enum class TorrentState;` forward declaration.
3. Add `#include <QColor>`"
358328975,11433,Chocobo1,2019-12-16T16:22:31Z,probably you don't need the `enum` here and below and in .cpp
358336084,11433,jagannatharjun,2019-12-16T16:34:40Z,nope not working. also tried directly including base/bittorrent/torrenthandle.h
358339545,11433,Chocobo1,2019-12-16T16:40:35Z,"Well, then at least add a comment about it: 
`// TODO: use QHash when MSVC doesn't complain about it anymore`"
358340094,11433,glassez,2019-12-16T16:41:37Z,It's optional in C++ and we usually omit it.
358342804,11433,glassez,2019-12-16T16:46:30Z,"Then why not just declare appropriate qHash function? It's trivial.
Or use underlying integer type for QHash keys?"
358343409,11433,jagannatharjun,2019-12-16T16:47:36Z,done.
358343569,11433,jagannatharjun,2019-12-16T16:47:50Z,done
358344587,11433,jagannatharjun,2019-12-16T16:49:39Z,Does using qt containers really that important. I saw some talk of one of Qt developer and he himself advised to not use Qt Containers.
358347243,11433,glassez,2019-12-16T16:53:59Z,">Does using qt containers really that important.

I think No, unless there are some benefits in some particular case. Don't forget that Qt containers are Implicitly shared, for e.g.."
358348701,11433,jagannatharjun,2019-12-16T16:56:32Z,"I considered using underlying type but then I have to use static_cast everywhere, especially using that in constructor will only produce useless noise. "
358349986,11433,glassez,2019-12-16T16:58:52Z,It's no problem for me to use unordered_map here.
358367431,11433,Chocobo1,2019-12-16T17:31:58Z,">Does using qt containers really that important.

I think the point is the coherency of container/data structure used through out the project. Now there is a comment stating the reason of using std container, then I'm fine with it.

>I saw some talk of one of Qt developer and he himself advised to not use Qt Containers.

I considered about it awhile ago but I think it is too much work for little/none gain for this project."
358375297,11433,glassez,2019-12-16T17:48:51Z,"Since std/Qt containers are not complete substitutes for each other, such a question should never be raised. We only can choose default containers for project (Qt containers currently) and use others when it has meaning."
359704728,11433,Chocobo1,2019-12-19T06:33:11Z,Strip `static`.
359704968,11433,Chocobo1,2019-12-19T06:34:25Z,move this to .cpp file and don't forget the `const` to variables.
359715174,11433,jagannatharjun,2019-12-19T07:16:48Z,"done
"
359718665,11433,jagannatharjun,2019-12-19T07:30:23Z,done
1639687553,20951,github-advanced-security[bot],2024-06-14T11:30:24Z,"## Unused variable, import, function or class

Unused variable isPrivate.

[Show more details](https://github.com/qbittorrent/qBittorrent/security/code-scanning/388)"
1640344147,20951,thalieht,2024-06-14T20:48:42Z,Whether a torrent is private isn't defined by its source. Is disambiguation needed for this? I don't have any suggestions.
1640344780,20951,thalieht,2024-06-14T20:49:21Z,"```suggestion
        return tr(""No"");
```

Same in all other places where you use `QStringLiteral`"
1640345306,20951,thalieht,2024-06-14T20:50:03Z,"```suggestion
```
Strings are left aligned."
1640389181,20951,ManiMatter,2024-06-14T22:01:45Z,"How about simply putting ""Flags private torrents""?"
1640394331,20951,ManiMatter,2024-06-14T22:11:15Z,Done
1640419959,20951,thalieht,2024-06-14T22:49:25Z,Sure.
1640811952,20951,ManiMatter,2024-06-15T06:33:38Z,Done
1640831588,20951,Chocobo1,2024-06-15T07:00:57Z,"Maybe add `hideValues`?
```suggestion
    const auto privateString = [hideValues](const bool isPrivate) -> QString
    {
        if (hideValues && !isPrivate)
            return {};
        return isPrivate ? : tr(""Yes"") : tr(""No"");
    };
```"
1640832571,20951,Chocobo1,2024-06-15T07:02:12Z,"Does it depend on metadata? If not, it should be moved out (above) of the if conditional."
1640832953,20951,Chocobo1,2024-06-15T07:02:42Z,"This check is redundant anyway:
```suggestion

        // Private
        m_ui->labelPrivateVal->setText(m_torrent->isPrivate() ? tr(""Yes"") : tr(""No""));
```"
1640833496,20951,Chocobo1,2024-06-15T07:03:27Z,"Keep it sorted:
```suggestion
    case TransferListModel::TR_PRIVATE:
    case TransferListModel::TR_SAVE_PATH:
    case TransferListModel::TR_TRACKER:
```"
1640835072,20951,Chocobo1,2024-06-15T07:05:36Z,"```suggestion
                    const isPrivate = data.private
                        ? ""QBT_TR(Yes)QBT_TR[CONTEXT=PropertiesWidget]""
                        : ""QBT_TR(No)QBT_TR[CONTEXT=PropertiesWidget]"";
                    $(""private"").set(""html"", isPrivate);
```"
1640835927,20951,Chocobo1,2024-06-15T07:07:01Z,"```suggestion
                const isPrivate = (this.getRowValue(row) === true);
                const string = isPrivate ? ""QBT_TR(Yes)QBT_TR[CONTEXT=PropertiesWidget]"" : ""QBT_TR(No)QBT_TR[CONTEXT=PropertiesWidget]"";
```"
1640836366,20951,Chocobo1,2024-06-15T07:07:40Z,"Try:
```suggestion
            this.newColumn(""private"", """", ""QBT_TR(Private)QBT_TR[CONTEXT=TransferListModel]"", 100, false);
```"
1640836457,20951,Chocobo1,2024-06-15T07:07:48Z,"```suggestion
            this.columns[""private""].updateTd = (td, row) => {
```"
1640843881,20951,Chocobo1,2024-06-15T07:18:46Z,"IMO it should be placed above ""Info Hash v1"".
Like so:
```
...
Added On: | Completed On: | Created On:
Private:
Info Hash v1:
...
```"
1640851759,20951,Chocobo1,2024-06-15T07:30:03Z,"This should be moved up and drop the `colspan`:
```suggestion
            <tr>
                <td class=""generalLabel"">QBT_TR(Private:)QBT_TR[CONTEXT=PropertiesWidget]</td>
                <td id=""private""></td>
            </tr>
```"
1640867755,20951,glassez,2024-06-15T07:49:59Z,"> Does it depend on metadata? If not, it should be moved out (above) of the if conditional.

AFAIK, we can't know whether torrent is private or not if there is no metadata available. So I would display ""N/A"" in case when there are no metadata available."
1640974050,20951,stalkerok,2024-06-15T10:00:32Z,"Maybe better 
```
...
Added On: | Completed On: | Created On:
Info Hash v1: | Private:
...
```
it'll save space."
1649705103,20951,ManiMatter,2024-06-22T14:08:18Z,"Personally, I prefer @Chocobo1 order. If space is the issue, I would find it more logical to put the two hashes on to the same line, rather than Hash v1 and Private."
1649772243,20951,stalkerok,2024-06-22T19:10:48Z,"@ManiMatter I would still prefer to keep the hash to two lines.
@thalieht @glassez do you have your own preferences?"
1649777148,20951,glassez,2024-06-22T19:29:20Z,"Shouldn't it be ""private"" instead of ""is_private""? Or is it not the binding with the data returned by WebAPI?"
1649787260,20951,ManiMatter,2024-06-22T20:29:25Z,"@stalkerok - I moved the private flag up as per @Chocobo1 and left the hashes on two lines for now. 
Screenshots of current implementation: https://github.com/qbittorrent/qBittorrent/pull/20951#issuecomment-2184175736

I chose not to move the private flag to the same line as Hash v1, since on small screens the hash may be longer than the first column, and hence if the private is in the 2nd column I felt it may visually not be appealing"
1649800317,20951,thalieht,2024-06-22T21:56:52Z,">3. Torrents without metadata return ""No"" in the GUI in the table
```suggestion
    const auto privateString = [hideValues](const bool isPrivate, const bool hasMetadata) -> QString
    {
        if (hideValues && !isPrivate)
            return {};
        if (hasMetadata)
            return isPrivate ? tr(""Yes"") : tr(""No"");
        else
            return tr(""N/A"");
    };
```"
1649800977,20951,thalieht,2024-06-22T22:01:54Z,"With the changes in the lambda above:
```suggestion
        return privateString(torrent->isPrivate(), torrent->hasMetadata());
```"
1649801653,20951,thalieht,2024-06-22T22:05:24Z,">4. The bug that does not reset the private flag in the properties section of the GUI for torrents without metadata is still there.

This already exists in line 327 (at the moment of writing). https://github.com/qbittorrent/qBittorrent/pull/20951#issuecomment-2184100600 was referring to it.

/off topic
I can't help with API stuff."
1649802489,20951,thalieht,2024-06-22T22:11:02Z,I don't have an opinion on this.
1649934146,20951,glassez,2024-06-23T05:51:18Z,"I believe it should display only ""Yes"" values when `hideValues` is `true`."
1649935049,20951,glassez,2024-06-23T05:56:37Z,"Another idea. Should we always display an empty string in ""Private"" column for torrents w/o metadata (instead of ""N/A"")?"
1650096378,20951,ManiMatter,2024-06-23T15:08:18Z,Thank you. Fixed it.
1650491966,20951,Chocobo1,2024-06-24T07:33:03Z,"```suggestion
                    if (data.has_metadata) {
                        $(""private"").set(""html"", (data.private ? ""QBT_TR(Yes)QBT_TR[CONTEXT=PropertiesWidget]"" : ""QBT_TR(No)QBT_TR[CONTEXT=PropertiesWidget]""));
                    }
                    else {
                        $(""private"").set(""html"", ""QBT_TR(N/A)QBT_TR[CONTEXT=PropertiesWidget]"");
                    }
```"
1650499842,20951,Chocobo1,2024-06-24T07:39:21Z,"```suggestion
            this.columns[""private""].updateTd = function(td, row) {
                const hasMetadata = row[""full_data""].has_metadata;
                const isPrivate = this.getRowValue(row);
                const string = hasMetadata
                    ? (isPrivate
                        ? ""QBT_TR(Yes)QBT_TR[CONTEXT=PropertiesWidget]""
                        : ""QBT_TR(No)QBT_TR[CONTEXT=PropertiesWidget]"")
                    : ""QBT_TR(N/A)QBT_TR[CONTEXT=PropertiesWidget]"";
                td.set(""text"", string);
                td.set(""title"", string);
            };
```"
1650510013,20951,Chocobo1,2024-06-24T07:47:00Z,This is wrong. Move it to just above of `TransferListModel::TR_STATUS`.
1650514135,20951,Chocobo1,2024-06-24T07:49:16Z,"Since you are creating a new key, I would insist getting the grammar right.
For all new code, please replace `has_metadata` with `have_metadata` globally.

```suggestion
inline const QString KEY_TORRENT_HAVE_METADATA = u""have_metadata""_s;
```"
1650516248,20951,Chocobo1,2024-06-24T07:50:28Z,Also please bump `API_VERSION` in webapplication.h
1650522820,20951,Chocobo1,2024-06-24T07:55:37Z,"```suggestion
        // Private
        m_ui->labelPrivateVal->setText(m_torrent->isPrivate() ? tr(""Yes"") : tr(""No""));
    }
    else
    {
```"
1650529093,20951,Chocobo1,2024-06-24T08:00:22Z,"```suggestion
                 <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
```"
1650530498,20951,Chocobo1,2024-06-24T08:01:31Z,"```suggestion
```"
1650550599,20951,ManiMatter,2024-06-24T08:16:07Z,"Why ""have"" and not ""has""? While ""metadata"" is plural, it's the torrent (singular) that has (or does not have) metadata. Thus ""has"" to me sounds grammatically correct?"
1650708250,20951,Chocobo1,2024-06-24T09:44:28Z,"From https://preply.com/en/blog/has-vs-have/ :
>The main difference between “has” and “have” lies in which subjects they use. “Has” is used with the third-person singular subjects “he,” “she,” and “it,” or a singular noun. “Have” is used with first-person (“I,” “we”), second-person (“you”), and third-person plural (“they”) subjects.

The ""metadata"" is not a 'third-person' property/subject but a native property of a `torrent` object.
Or view it another way: the `Torrent::hasMetadata()` is telling whether the `torrent` itself has metadata, it is not referring to a third-party object. It is like me saying ""I have a car"".
As a counter example: [`Object.hasOwn()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn) static method has an `obj` parameter to refer to some 'third-party' object. Thus it is correct to use `has` instead of `have` there."
1650726880,20951,ManiMatter,2024-06-24T09:55:40Z,"I understand that metadata is a native property, but in my view we describe ""the torrent"", which is the third person singular. It (""the torrent"") has properties. 

If the torrent described itself, it would say ""I have"" properties. But here we are the people describing, thus I'd argue we should say ""It has"", and in consequence stick with ""hasMetadata"". It would also be consistent with the torrent data model which uses ""hasMetadata()""

What do the others think? @thalieht @stalkerok  @glassez "
1650745094,20951,Chocobo1,2024-06-24T10:04:31Z,"Hmmm after some googling [.NET naming guidelines](https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members?redirectedfrom=MSDN) uses ""has"":
>Optionally, you can also prefix Boolean properties with ""Is"", ""Can"", or ""Has"", but only where it adds value.

Well. It seems my opinion is not conclusive. Please disregard it. Sorry for the noise."
1650787098,20951,glassez,2024-06-24T10:36:56Z,"> Hmmm after some googling [.NET naming guidelines](https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members?redirectedfrom=MSDN) uses ""has"":
> 
> > Optionally, you can also prefix Boolean properties with ""Is"", ""Can"", or ""Has"", but only where it adds value.
> 
> Well. It seems my opinion is not conclusive. Please disregard it. Sorry for the noise.

I believe that such naming rules based on ordinary wording, for example, ""torrent has metadata"".
But Qt naming convention is more abstract from natural language. They require not to use third from for verbs (`is` prefix is special case):
>Verbs have no prefix and don't use the third person (-s)

I suggest not to dwell on it here, since we don't have clear rules about it."
1651527672,20951,ManiMatter,2024-06-24T19:36:42Z,I think there is something off with this change; the linter complains about a curly bracket after the merge. Do you spot it? Else I will check it when I find the time
1652005006,20951,Chocobo1,2024-06-25T05:25:28Z,"This should address the CI error:
```suggestion
                    if (data.has_metadata) {
                        $(""private"").set(""text"", (data.private
                            ? ""QBT_TR(Yes)QBT_TR[CONTEXT=PropertiesWidget]""
                            : ""QBT_TR(No)QBT_TR[CONTEXT=PropertiesWidget]""));
                    }
                    else {
                        $(""private"").set(""text"", ""QBT_TR(N/A)QBT_TR[CONTEXT=PropertiesWidget]"");
                    }
```"
1652006230,20951,Chocobo1,2024-06-25T05:27:12Z,"```suggestion
```"
1652752470,20951,ManiMatter,2024-06-25T12:44:33Z,"Thx, that passes now"
1656992555,20951,glassez,2024-06-27T11:51:40Z,"```suggestion
```"
1656992889,20951,glassez,2024-06-27T11:51:55Z,"```suggestion
        return tr(""N/A"");
```"
1657005692,20951,glassez,2024-06-27T11:58:07Z,"Separate value corresponding to ""n/a"" state should be provided in order to sort by ""Private"" column properly. I believe `-1` could do the job."
1657521544,20951,stalkerok,2024-06-27T17:25:00Z,"@ManiMatter, however, I would still put it on one line. Or so, if possible, then the hash would definitely not overlap
```
...
Added On: | Completed On: | Created On:
Info Hash v1: | <empty> | Private:
...
```"
1657525786,20951,stalkerok,2024-06-27T17:28:23Z,"Anyway, it's not that important, maybe some more information will take up the empty space in the future."
1660136061,20951,ManiMatter,2024-06-30T10:24:08Z,Thanks - would this work?https://github.com/qbittorrent/qBittorrent/pull/20951/commits/4595dda2ef8be3d99033e91f17e8144b56d428ec
1660156281,20951,glassez,2024-06-30T11:09:17Z,"> Thanks - would this work?[4595dda](https://github.com/qbittorrent/qBittorrent/commit/4595dda2ef8be3d99033e91f17e8144b56d428ec)

No.
Did I suggest returning its string representation?
Isn't it obvious that `internalValue()` should provide something else (except, of course, the cases when the data itself is string)?
IMO, I made it clear that it is only necessary to add some third value that would correspond to the case when the ""privateness"" is not available (due to the lack of metadata)."
1660209857,20951,glassez,2024-06-30T16:16:46Z,"```suggestion
```"
1660209974,20951,glassez,2024-06-30T16:17:40Z,"```suggestion
```"
1660210836,20951,glassez,2024-06-30T16:23:03Z,"It makes no sense to write obvious things in the comments, for example, **what** the code does (this is already clear from the code itself). If you want to explain it, then write down **why** it does it."
1660211678,20951,glassez,2024-06-30T16:26:53Z,"P.S. Below is an example of a completely meaningless comment.
```c++
// Load dynamic data
loadDynamicData();
``` "
1660213206,20951,glassez,2024-06-30T16:31:38Z,"Why to complicate it?
```suggestion
        return (torrent->hasMetadata() ? torrent->isPrivate() : -1);
```"
1660213949,20951,glassez,2024-06-30T16:36:25Z,"Seems more correct would be the following:
```c++
return (torrent->hasMetadata() ? torrent->isPrivate() : QVariant());
```
...and use appropriate comparison in sort model (that takes into account invalid values)."
1660308402,20951,ManiMatter,2024-06-30T21:04:08Z,"Thanks... I agree with you that the comment is superfluous. I only added it because the code that is already there has the same type of comments.. 

Example: https://github.com/qbittorrent/qBittorrent/blob/d60c77ca6ab57e9f973db67ad4b55a14598b3827/src/gui/properties/propertieswidget.cpp#L321-L339"
1660309641,20951,ManiMatter,2024-06-30T21:14:02Z,"> Seems more correct would be the following:
> 
> ```c++
> return (torrent->hasMetadata() ? torrent->isPrivate() : QVariant());
> ```
> 
> ...and use appropriate comparison in sort model (that takes into account invalid values).

I implemented it:
https://github.com/qbittorrent/qBittorrent/blob/f565c33a1576de8f62a50cef2b254a7a58555052/src/gui/transferlistmodel.cpp#L528
"
1660393068,20951,glassez,2024-07-01T02:48:02Z,"> I implemented it:
> 
> https://github.com/qbittorrent/qBittorrent/blob/f565c33a1576de8f62a50cef2b254a7a58555052/src/gui/transferlistmodel.cpp#L528

OK.
But you still haven't taken care of the second part:
>...and use appropriate comparison in sort model (that takes into account invalid values).

IIRC, the following will not handle invalid values properly:
```c++
threeWayCompare(leftValue.toInt(), rightValue.toInt());
``` "
1660405266,20951,glassez,2024-07-01T03:17:23Z,"Try to add the following function:
```c++
    int customCompare(const QVariant &left, const QVariant &right)
    {
        const bool isLeftValid = left.isValid();
        const bool isRightValid = right.isValid();

        if (isLeftValid == isRightValid)
            return threeWayCompare(left, right);
        return isLeftValid ? -1 : 1;
    }
``` 

...and use it to compare ""privateness"":
```c++
case TransferListModel::TR_PRIVATE:
    return customCompare(leftValue, rightValue);
``` "
1660407491,20951,glassez,2024-07-01T03:21:51Z,"> Try to add the following function:
> 
> ```c++
>     int customCompare(const QVariant &left, const QVariant &right)
>     {
>         const bool isLeftValid = left.isValid();
>         const bool isRightValid = right.isValid();
> 
>         if (isLeftValid == isRightValid)
>             return threeWayCompare(left, right);
>         return isLeftValid ? -1 : 1;
>     }
> ```

Or maybe convert an existing one into a template:
```c++
// this
int customCompare(const QDateTime &left, const QDateTime &right)
// into
template <typename T>
int customCompare(const T &left, const T &right)
``` "
1660511581,20951,ManiMatter,2024-07-01T06:05:55Z,"

I am still not sure why we changed 
approach a)
> return (torrent->hasMetadata() ? torrent->isPrivate() : -1);

to approach b)
> return (torrent->hasMetadata() ? torrent->isPrivate() : QVariant());

With the first one, we always get an integer (1, 0, -1), since -1 is the fall-back and isPrivate() is only 1 or 0.
Since we convert the arguments for the threewaycompare explicitly to int, shouldn't it work if we sticked with approach a)?
https://github.com/qbittorrent/qBittorrent/blob/f565c33a1576de8f62a50cef2b254a7a58555052/src/gui/transferlistsortmodel.cpp#L204
"
1660666084,20951,glassez,2024-07-01T08:25:49Z,"> I am still not sure why we changed approach a)
> 
> > return (torrent->hasMetadata() ? torrent->isPrivate() : -1);
> 
> to approach b)
> 
> > return (torrent->hasMetadata() ? torrent->isPrivate() : QVariant());

Because it better (more explicitly) reflects its essence. It either returns the value of ""privateness"" itself (of type bool), or invalid if it is not available (via an uninitialized QVariant). Another way is a workaround, since all values (both valid and not) are represented by another data type (integer). I.e. true/false/invalid vs 1/0/-1."
1660677839,20951,glassez,2024-07-01T08:34:56Z,"> Since we convert the arguments for the threewaycompare explicitly to int

`internalValue()` should just return internal/raw representation of data. It shouldn't really depend on some particular usage of it."
1661513321,20951,ManiMatter,2024-07-01T20:34:06Z,"Please forgive me for maybe being slow in understanding.

In my latest commit, I simply moved the `case TransferListModel::TR_PRIVATE:` from a `threeWayCompare` to a `customCompare`. 

However, I did not convert an existing function into a template, because I believe that is already existing?:

https://github.com/qbittorrent/qBittorrent/blob/698f8dcb9cacf36a1e42ce7abfa7ac3d80df6476/src/gui/transferlistsortmodel.cpp#L72-L85"
1661523385,20951,ManiMatter,2024-07-01T20:45:30Z,"Thank you for the explanation, @glassez "
1662167173,20951,glassez,2024-07-02T09:15:32Z,"> However, I did not convert an existing function into a template, because I believe that is already existing?:

Oh, right, I overlooked it (it's not very convenient to do all this through a smartphone browser).
Unfortunately, it is limited only to arithmetic types.
But it's not a problem to make a more generic template. You can delete all instances of `customCompare` except the one that accept `TagSet` as parameters, and add the following code instead:
```c++
    // consider negative values as invalid
    template <typename T>
        requires std::is_arithmetic_v<T>
    bool isValid(const T value)
    {
        return (value >= 0);
    }

    template <typename T>
    bool isValid(const T &value)
    {
        return value.isValid();
    }

    template <typename T>
    int customCompare(const T &left, const T &right)
    {
        const bool isLeftValid = isValid(left);
        const bool isRightValid = isValid(right);

        if (isLeftValid && isRightValid)
            return threeWayCompare(left, right);
        if (!isLeftValid && !isRightValid)
            return 0;
        return isLeftValid ? -1 : 1;
    }
``` "
1662878352,20951,ManiMatter,2024-07-02T16:59:20Z,"Done - had to add a small refinement, since the 2nd template was also triggered for arithmetic types and the CI complained about template overloading. Hope the refinement makes sense?

[d486622](https://github.com/qbittorrent/qBittorrent/pull/20951/commits/d486622ad8a104657cb24aabc6226d272d7b41a6)
"
1662936902,20951,glassez,2024-07-02T17:47:03Z,"> CI complained about template overloading.

Hmm... Clang compiled this without a problem.
`std::enable_if_t` looks cumbersome. I'd rather use a more modern approach with `if constexpr`:
```c++
    template <typename T>
    bool isValid(const T &value)
    {
        if constexpr (std::is_arithmetic_v<T>)
            return (value >= 0); // consider negative values as invalid
        else
            return value.isValid();
    }
``` "
1662952269,20951,glassez,2024-07-02T17:57:46Z,"...or better add requirement to second template:
```c++
    #include <concepts> 

    // ...

    template <typename T>
    concept Validateable = requires (T t) { {t.isValid()} -> std::same_as<bool>; };

    template <Validateable T>
    bool isValid(const T &value)
    {
        return value.isValid();
    }

    // consider negative values as invalid
    template <typename T>
        requires std::is_arithmetic_v<T>
    bool isValid(const T value)
    {
        return (value >= 0);
    }
``` "
1662957483,20951,ManiMatter,2024-07-02T18:02:50Z,"updated ✔ 
thanks for the code suggestion.

https://github.com/qbittorrent/qBittorrent/pull/20951/commits/05c4f171d553e40dcdddf4b6db120531476134e4"
1662969751,20951,ManiMatter,2024-07-02T18:14:29Z,done - https://github.com/qbittorrent/qBittorrent/pull/20951/commits/83c3c96193206a4d5aa484ee7805db9af44fa5fd
1662987406,20951,glassez,2024-07-02T18:30:50Z,"```suggestion
#include <concepts>
#include <type_traits>
```"
1662989357,20951,ManiMatter,2024-07-02T18:32:46Z,To keep them in alphabetical order?
1663655184,20951,Chocobo1,2024-07-03T07:21:18Z,wrong order.
1663681247,20951,ManiMatter,2024-07-03T07:37:14Z,Could you elaborate please?
1665125291,20951,Chocobo1,2024-07-04T05:07:16Z,Please keep them in alphabetical order.
1665125634,20951,Chocobo1,2024-07-04T05:07:50Z,">To keep them in alphabetical order?

yes."
1665138104,20951,ManiMatter,2024-07-04T05:21:44Z,"Happy to change that order (done). But what about the other inclusions? They are not in alphabetical order either.

```
#include ""transferlistsortmodel.h""

#include <concepts>
#include <type_traits>

#include <QDateTime>

#include ""base/bittorrent/infohash.h""
#include ""base/bittorrent/torrent.h""
#include ""transferlistmodel.h""
```

Just for my education and to understand how to do it ""the right way"" - Is there a reason for that specific order?"
1665140240,20951,ManiMatter,2024-07-04T05:25:07Z,done.
1665148747,20951,glassez,2024-07-04T05:37:51Z,"> Just for my education and to understand how to do it ""the right way"" - Is there a reason for that specific order?

There are various reasons, some of which are objective, some of which are subjective - there are many discussions on this topic on the web. In general, we have drawn up our own rules based on them:
https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#7-header-inclusion-order"
1665153466,20951,ManiMatter,2024-07-04T05:44:46Z,"Thx for sharing, will study those"
1666386020,20951,Chocobo1,2024-07-05T06:35:27Z,"```suggestion
    case TransferListModel::TR_PRIVATE:
    case TransferListModel::TR_QUEUE_POSITION:
```"
1669878145,20951,glassez,2024-07-09T07:17:09Z,">There seems to be something wrong with the sorting

Damn it, we've overlooked it after all. This is the wrong place because it is eventually compared as an integer.
```c++
return customCompare(leftValue.toInt(), rightValue.toInt());
``` 
It should be moved outside of this group of cases and placed separately:
```c++
case TransferListModel::TR_PRIVATE:
    return customCompare(leftValue, rightValue);
``` "
1676758486,20951,Chocobo1,2024-07-13T05:14:57Z,"@glassez 
~~This new comparison logic isn't equivalent to the removed `int customCompare(const QDateTime &left, const QDateTime &right)`.
The `if (!isLeftValid && !isRightValid)` case would produce unexpected results.~~

Furthermore, this `customCompare` was really intended for specific arithmetic types and not general use. By making them generic really hides the essence of how and what are they comparing.
I would suggest reverting these changes in #21041."
1676766456,20951,glassez,2024-07-13T05:57:11Z,"> Furthermore, this `customCompare` was really intended for specific arithmetic types and not general use.

I don't know how you define it, but this compare logic is really the same for all types for which we define the concept of ""invalid value"". The only difference is how the concept of ""invalid value"" is defined for a particular type."
1676771615,20951,glassez,2024-07-13T06:39:33Z,"> I would suggest reverting these changes in #21041.

Done anyway. I don't want to waste my time on this issue anymore, it's already taken up too much of it."
1676777116,20951,Chocobo1,2024-07-13T07:22:59Z,">I don't know how you define it, but this compare logic is really the same for all types for which we define the concept of ""invalid value"". The only difference is how the concept of ""invalid value"" is defined for a particular type.

For me, I would treat the comparison for each column as unique and it should be (easily) customizable. If some of them could share the same code then it is great and can be done. Also generalization should not become the final goal as it would hide the salient comparison of the column values (and possibly introduce slower comparison code path)."
63577775,5264,glassez,2016-05-17T18:29:04Z,"This and next methods are equal except param type. Why don't you implement template?
"
63578757,5264,glassez,2016-05-17T18:34:32Z,"Why too long? `Version<uchar, 2>` is enough.
"
63578859,5264,zeule,2016-05-17T18:35:03Z,"They differ In the very first line  (`QLatin1Char` vs `char`). I don't know how to express this difference in a single template, otherwise I would join them.
"
63579146,5264,glassez,2016-05-17T18:36:43Z,"Doesn't `char` work with QString?
"
63579514,5264,glassez,2016-05-17T18:38:47Z,"Maybe `std::array<T, N>`?
"
63579855,5264,Chocobo1,2016-05-17T18:40:39Z,"or maybe `std::tuple`?
it handles a lot of relational operators...
"
63580369,5264,zeule,2016-05-17T18:43:39Z,"Take a look at the updated version. I think that is suitable.
"
63580602,5264,zeule,2016-05-17T18:44:58Z,"You don't believe in plugin writers? joking, of course.
"
63581015,5264,glassez,2016-05-17T18:47:17Z,"Isn't `return {0u, 0u};` enough?
"
63581847,5264,Chocobo1,2016-05-17T18:52:26Z,"What I'm going to say maybe doesn't make sense (please bear with me):
It is weird to have a ctor taking`QString` as parameter. I would imagine having a list (or tuple) of numbers as parameters.
And maybe provide a static method to convert `QString` to list (or tuple) of numbers...
"
63591900,5264,zeule,2016-05-17T19:54:49Z,"Could you elaborate, please?
"
63592256,5264,zeule,2016-05-17T19:57:09Z,"There are no `unsigned short` literals, and thus, expressions like `{0u, 0u}` will result in narrowing conversion in constructor. I don't know a beautiful solution. 
"
63593094,5264,zeule,2016-05-17T20:02:33Z,"Maybe just return `PluginVersion()`? 
"
63652026,5264,glassez,2016-05-18T06:35:22Z,"Or even `{}` since we use default PluginVersion here anyway.
"
63652089,5264,glassez,2016-05-18T06:35:52Z,"Default constructed PluginVersion is enough here.
"
63652417,5264,glassez,2016-05-18T06:39:29Z,"Why don't you use `m_components.at(i)` directly?
"
63652642,5264,glassez,2016-05-18T06:42:04Z,"Insert blank line before.
"
63652871,5264,glassez,2016-05-18T06:44:32Z,"Separate declarations of different type (ie, methods, types, fields) by blank line.
"
63653191,5264,glassez,2016-05-18T06:47:43Z,"If you did this ""general"" Version template, then put it in its own header. Otherwise, what sense in it?
"
63655822,5264,Chocobo1,2016-05-18T07:16:36Z,"> It is weird to have a ctor takingQString as parameter

The essence of `Version` class is just a tuple of numbers, how could someone imagine he could construct a tuple of numbers via a QString?

So it would be more explicit to do something like:

``` c++
class Version
{
    static Version fromQString(const QString &s) {/* parsing work */}
    static Version fromQByteArray(const QByteArray &s) {/* parsing work */}
    // and a static method for every other types that Version class should handle
}

Version ver = Version::fromQString(QString(""1.2.3""));
```
"
63656994,5264,Chocobo1,2016-05-18T07:28:17Z,"anyone had the interest to enlighten me is there any downside if use `std::tuple` here:question:
"
63661534,5264,zeule,2016-05-18T08:07:33Z,"From my point of view, a possibility to write a  version as a text is an inherent property of it. That is why I added those constructors. Following this path, `operator QString` and `operator QByteArray` may be of use. Your vision limits a version to an ordered number sequence which may be compared to another such sequence, as far as I understand. 

BTW, repeating the argument type in the  from- methods we just add unneeded noise, as to me. `fromString` would be enough. 
"
63662371,5264,Chocobo1,2016-05-18T08:14:44Z,"Thank you for the explanation, then so be it, I've already raised my concerns.
"
63664801,5264,zeule,2016-05-18T08:34:47Z,"Where would you suggest to put the file?
"
63665636,5264,zeule,2016-05-18T08:40:32Z,"I replaced `toString()` with `operator QString` and that allowed to remove `QDebug` output operator. 
"
63672093,5264,glassez,2016-05-18T09:29:16Z,"In `base/`.
But I have another look at it. Why bother to use this template? Why not just make one generic Version class?
We can have fixed format version: major.minor.release.patch. And we can represent it as follows: major[.minor[.release[.patch]]], where any omitted rest is equal to zero.
"
63672412,5264,glassez,2016-05-18T09:31:45Z,"Why? AFAIK, tuple is array with items of different type.
"
63672870,5264,glassez,2016-05-18T09:35:21Z,"Why you add `{}` here? Why not `PluginVersion version;`?
"
63673155,5264,glassez,2016-05-18T09:37:07Z,"And don't forget about ""punctuation"" rule: `Version<T, N>`.
"
63673291,5264,zeule,2016-05-18T09:38:15Z,"Because a template allows describing the conception cleanly. How do you suggest to implement conversion to a string? Omit zeroed components too?  
"
63673386,5264,glassez,2016-05-18T09:39:03Z,"`N - 1`
"
63673419,5264,glassez,2016-05-18T09:39:15Z,"`N - 1`
"
63673614,5264,glassez,2016-05-18T09:40:54Z,"You don't catch exceptions...
"
63674247,5264,zeule,2016-05-18T09:45:50Z,"BTW, I forgot to reply to a previous comment. I use this->operator[] in order to encapsulate the implementation (`std::array`) and catch potential out of range errors.
"
63677801,5264,zeule,2016-05-18T10:12:14Z,"> n `base/`.

Done.
"
63678777,5264,glassez,2016-05-18T10:19:58Z,"> How do you suggest to implement conversion to a string? Omit zeroed components too?

Is it the problem? There is common way: minimum items (default to, for example, 2) + omit trailing zeros.

Omitting trailing zeros is a common practice. But your implementation disallow it.
"
63678985,5264,glassez,2016-05-18T10:22:01Z,"Wrong indentation.
"
63679302,5264,glassez,2016-05-18T10:24:42Z,"Why do you move these operators outside the class?
"
63679354,5264,zeule,2016-05-18T10:25:16Z,"No, it does not. You just need to change `operator QString()`, but I think that for the plugin versions we shall not do the omitting.
"
63679368,5264,glassez,2016-05-18T10:25:25Z,"`Version<T, N>`
"
63679569,5264,zeule,2016-05-18T10:26:56Z,"If you like, we can add another template parameter (number of mandatory printed digits) and change constructors and `operator QString()` accordantly. 
"
63680019,5264,zeule,2016-05-18T10:31:12Z,"Because they do not need an access to the internal representation of the class.
"
63680219,5264,glassez,2016-05-18T10:33:08Z,"I wish this worked in the usual way: it should parse version string with/without trailing zeros and it should print version in following format: min items count + trailing items unless the last item is zero.
"
63680495,5264,glassez,2016-05-18T10:35:12Z,"It's not the reason.
"
63680633,5264,zeule,2016-05-18T10:36:24Z,"Pardon?
"
63681502,5264,glassez,2016-05-18T10:44:31Z,"Just for fun... We can do this either as an external function, or as a friend external function, or as a class method. What to choose? I'm more interested in the second and third option.
"
63681773,5264,zeule,2016-05-18T10:47:14Z,"Of course the non-friend free external function: the less code has access to the class internals the better.
"
63681827,5264,Chocobo1,2016-05-18T10:47:54Z,"> AFAIK, tuple is array with items of different type.

This won't matter if agrees on some fixed typedef:
`typedef std::tuple<int, int, int, Int> Version;`

> Why?

An ideal `Version` type has the same mathematical properties as `std::tuple<int, int, int, int>`.
And mainly because `std::tuple` already handles the relational operators just as we wanted. All there's missing is some helper methods to do type conversions.
The `Version` class could be simpler, IMO.

But all of this doesn't matter now, see: https://github.com/qbittorrent/qBittorrent/pull/5264#discussion_r63661534
"
63683061,5264,zeule,2016-05-18T10:58:26Z,"`std::array` has comparison operators too.
"
63685850,5264,Chocobo1,2016-05-18T11:24:09Z,"> std::array has comparison operators too.

Thanks, I didn't noticed that, but this leads to another question, why don't you utilize it directly?
"
63687767,5264,zeule,2016-05-18T11:41:01Z,"I will in the next PR update. :) Thank you for pointing me to them!
"
63688964,5264,Chocobo1,2016-05-18T11:52:23Z,":+1: 
"
63708415,5264,glassez,2016-05-18T14:05:51Z,"> Of course the non-friend free external function: the less code has access to the class internals the better.

But if you need an access?
"
63711095,5264,zeule,2016-05-18T14:19:52Z,"It depends, as you probably know. For this class I prefer members: less typing, no profits from non-members.
"
63927086,5264,glassez,2016-05-19T18:07:52Z,"Add space after `while`.
"
63928561,5264,glassez,2016-05-19T18:16:32Z,"If this file is in `base/utils/` then put the template name in Utils namespace.
"
63929308,5264,glassez,2016-05-19T18:20:50Z,"@evsh We can avoid using exceptions, if we add **valid** property (via `Version::isValid()`).
@sledgehammer999 what do you say about?
"
64200400,5264,zeule,2016-05-23T10:29:21Z,"Why would we want to? I'm objecting creating classes without an invariant. If you want to avoid try- blocks in the client code, we better add `Version tryParse(AString s, const Version &defaultVersion)`. Maybe make it static in the `Version` class.
"
64238104,5264,glassez,2016-05-23T15:07:18Z,"> If you want to avoid try- blocks in the client code

Yes.

> we better add `Version tryParse(AString s, const Version &defaultVersion)`. Maybe make it static in the Version class.

Ok.
But, IMO, it will be better to use another form: `bool parse(const QString &str, Version &version)` (I think we don't need any default version when parsing failed).
"
64238542,5264,glassez,2016-05-23T15:11:38Z,"Of course, it should be static method in the Version class.
"
65374407,5264,Chocobo1,2016-06-01T14:45:44Z,"why this operator isn't a method of the class `Version`?
Since it's now using `std::array` relational operators, maybe https://github.com/qbittorrent/qBittorrent/pull/5264#discussion_r63681773 doesn't hold any more.
"
65380138,5264,zeule,2016-06-01T15:10:54Z,"For the same reason: this function does not need an access to the class internal representation.
"
65394031,5264,Chocobo1,2016-06-01T16:20:12Z,"Just curious, what is your opinion on this one?

``` c++
bool operator!=(const ThisType &other) const
{
    return !(*this == other);
}
```

Btw, maybe you should add a comment about it, you know it could leave some devs scratching their heads (or maybe just me :P)
"
65396829,5264,zeule,2016-06-01T16:35:36Z,"With this one it is needed to read the function body, while operator outside of the class suggests that it does not have access to the non-public members. I don't say that there are no friend operators, but you scan for friends declarations inside of a class when reading it, right?

Besides, I was thinking about

``` C++
template <class TL, class TR, std::size_t NL, std::size_t TR, std::size_t MandatoryL, std::size_t ManadatoryR>
inline bool operator == (const Version<TL, NL, MandatoryL> &left, const Version<TR, NR, MandatoryR> &right)
```

and free function provides a symmetrical form.
"
65398785,5264,zeule,2016-06-01T16:47:35Z,"@Chocobo1, do you suggest to make it a class member? Why, if so?
"
65411454,5264,Chocobo1,2016-06-01T18:00:42Z,"> With this one it is needed to read the function body,

and so is reading `==` and other relational operators, no?

> while operator outside of the class suggests that it does not have access to the non-public members.

Yes, but why this hint is important? It would make sense if implicit conversion are involved as I read here: http://stackoverflow.com/a/9554578, or doing https://github.com/qbittorrent/qBittorrent/pull/5264#discussion_r65396829.
And `!=` is a `const` method, it clearly hints it won't modify anything.

## 

> @Chocobo1, do you suggest to make it a class member? Why, if so?

Can't really say I have a special consideration. IMO it's just simplicity.
If I see a `==` in a class declaration, then naturally (for me) there should be a `!=` nearby, if it's declared outside of the class then it must be doing something special, but now, seems not....
and I don't think we need to have `==` operator for different template instances now...

I'm lazy person (well, just a bit) so I'm found of [You Arent Gonna Need It](http://c2.com/xp/YouArentGonnaNeedIt.html) principle.
Nice discussing with you though.
"
65429432,5264,zeule,2016-06-01T19:48:04Z,"Another point which I did not realise rationally before now, is the following: when functions are inside of a class, the class declarations grows longer and psychologically I feel it as probably more complicated entity, while free functions are independent and thus do not increase the complexity level. 
"
66310765,5264,sledgehammer999,2016-06-08T18:21:30Z,"Honest question: Is there a technical reason to do `return {}` instead of `return PluginVersion`?
To me the 2nd one is more readable.
"
66310913,5264,sledgehammer999,2016-06-08T18:22:16Z,"Alphabetically this goes after QList.
"
66313037,5264,sledgehammer999,2016-06-08T18:32:30Z,"I think this should be `N >= 3`
"
66313079,5264,sledgehammer999,2016-06-08T18:32:43Z,"I think this should be `N >= 4`
"
66313537,5264,sledgehammer999,2016-06-08T18:35:16Z,"No checks here?
"
66314038,5264,sledgehammer999,2016-06-08T18:37:47Z,"I would suggest `static Version parse(const AQString &s)` and always returning an empty Version on error.
"
66315451,5264,sledgehammer999,2016-06-08T18:45:22Z,"I confess that I am not good with template programming. It hurts my brain. And I suspect that in the above 2 lines you use c++11 features.
Can you explain to me what the 2 lines above do?
"
66315582,5264,sledgehammer999,2016-06-08T18:45:53Z,"Is this necessary when you don't pass a value to the member variable?
"
66315976,5264,sledgehammer999,2016-06-08T18:48:02Z,"'Mandatory' field isn't used in actual code yet, right?
"
66322825,5264,zeule,2016-06-08T19:27:56Z,"No, there is no difference. Compiler substitutes '{}' with 'PluginVersion()'. 
"
66323150,5264,zeule,2016-06-08T19:29:56Z,"What do you mean? It is used when parsing string representation of the version and when generating the string representation.
"
66323350,5264,zeule,2016-06-08T19:31:20Z,"AFAIK `std::array` behaves like a C array. I want to initialise it with zeroes.
"
66323605,5264,sledgehammer999,2016-06-08T19:32:58Z,"I mean I only saw this initialization(?) `Utils::Version<unsigned short, 2>` not something like `Utils::Version<unsigned short, 2, 3>;`
"
66323741,5264,zeule,2016-06-08T19:33:52Z,"This is the variadic template, which can take variable number of arguments. This allows one to write:

``` c++
Version<3> v = {3, 3, 5};
```

to get version ""3.3.5"" 
"
66323902,5264,sledgehammer999,2016-06-08T19:35:06Z,"I think the error text is wrong here. Mandatory components can be fewer than the total number of components.
"
66323944,5264,zeule,2016-06-08T19:35:23Z,"@sledgehammer999:  and this line forwards those initialiser lists to the `std::array`, which checks its number and types.
"
66324672,5264,zeule,2016-06-08T19:40:12Z,"Stupid me. Thanks!
"
66324796,5264,zeule,2016-06-08T19:41:01Z,"I will add `static_assert(N > 0)` then
"
66325309,5264,zeule,2016-06-08T19:44:19Z,"Why? What's the problem with the current code?
"
66326497,5264,sledgehammer999,2016-06-08T19:51:21Z,"I was merely suggesting a different approach(and name). I think most of Qt follows the same paradigm. Try to parse and then check the result if empty. (or special error() function if empty result is a valid state).
"
66328282,5264,zeule,2016-06-08T20:01:00Z,"That's it: version 0 is the valid one.
"
66329077,5264,sledgehammer999,2016-06-08T20:03:56Z,"But you still do this check elsewhere `version != PluginVersion{}`! Or is it a different state? (sorry I am confused by the abstraction of templates).
"
66330050,5264,zeule,2016-06-08T20:09:49Z,"I guess you mean the code in `SearchEngine::parseVersionInfo()`. In _that_ context empty version is not valid. But shall we assume this in general? What about the following signature:

``` c++
 static Version parse(const AQString &s, bool* ok = nullptr)
```

which throws if `ok == nullptr`?
"
66330492,5264,sledgehammer999,2016-06-08T20:12:25Z,"Hmm, is it easier for Version to have an isValid() method instead?
Qt has it and most of our base classes do too.
"
66333329,5264,zeule,2016-06-08T20:28:42Z,"I strongly object. Classes without an invariant are hard to use and I don't understand for what sake we shall do that to this class which has a simple and very well defined invariant.
"
66334065,5264,sledgehammer999,2016-06-08T20:33:05Z,"Ok. Then use the ""ok"" signature you posted above if you want. Or leave it as is. I just wanted to make it easier for checking. Not add complexity.
"
66343101,5264,zeule,2016-06-08T21:25:16Z,"Yes. @glassez asked to add support for mandatory < total, and it was fun to do that.
"
66343466,5264,zeule,2016-06-08T21:27:32Z,"Will leave it as it is then, because with the 'ok' parameters it would be needed to rewrite the parsing/constructor relation the other way round. 
"
66354319,5264,sledgehammer999,2016-06-08T22:47:37Z,"I am not sure the behavior of this is desired. If someone enters a version of ""3.0.0"" then he surely expects ""3.0.0"" printed back and not just ""3"". Even if ""Mandatory == 1"".

Do you have any use-case that need the current behavior?
"
66364946,5264,zeule,2016-06-09T00:21:37Z,"@glassez ?
"
66384975,5264,glassez,2016-06-09T05:34:28Z,"Omitting trailing zeros (down to mandatory size) is common Version use case. So proper version parser shouldn't fail with such a reduced version representation.
Mandatory here is ""coding style"" for version string. So if some project have `mandatory = 2` ""3.0.0"" and ""3"" are incorrect for it, but ""3.0"", ""3.0.1"" and even ""3.0.0.1"" are correct.
"
94568981,5264,zeule,2017-01-04T11:39:13Z,done
112528184,5264,glassez,2017-04-20T18:31:14Z,Redundant blank line.
112528749,5264,glassez,2017-04-20T18:33:49Z,"IMO, `class AQString` is ugly. Just use `class String`."
112528885,5264,glassez,2017-04-20T18:34:29Z,Why not QLatin1Char is here?
112529255,5264,glassez,2017-04-20T18:36:17Z,Shouldn't these two constructors be private and used indirectly via tryParse?
112529324,5264,glassez,2017-04-20T18:36:36Z,Redundant blank line.
112529823,5264,glassez,2017-04-20T18:38:55Z,I see you prefer `class` keyword in templates. Why not `typename`? Let's leave `class` for class declarations. (IMO)
112534084,5264,zeule,2017-04-20T18:57:12Z,OK. `class` is simply shorter.
112534371,5264,zeule,2017-04-20T18:58:28Z,"~No, these ones are not used by `tryParse`. There is one private for that function.~
They are used, but I think they should be left public. `tryParse` just eats exception."
112535367,5264,glassez,2017-04-20T19:03:08Z,"So it can throw exception, IIRC.
Please add appropriate comments to methods/constructors that can throw exception, but doesn't contain `throw` statement in its body directly. "
112535565,5264,zeule,2017-04-20T19:04:02Z,`QByteArray::split()` takes `char` argument.
112535828,5264,glassez,2017-04-20T19:05:09Z,Ok.
112536465,5264,glassez,2017-04-20T19:08:13Z,"Same here. Just `StringList`. It can be not only QStringList, or not?"
112607812,5264,Chocobo1,2017-04-21T04:38:13Z,"inconsistent with line 684 !?
"
112608391,5264,Chocobo1,2017-04-21T04:47:05Z,indention.
112609056,5264,glassez,2017-04-21T04:56:32Z,?
112609280,5264,glassez,2017-04-21T04:59:58Z,">I am not sure the behavior of this is desired. If someone enters a version of ""3.0.0"" then he surely expects ""3.0.0"" printed back and not just ""3"". Even if ""Mandatory == 1"".

It's usual behavior in cases like this one. E.g. QUrl: `QUrl(urlStr).toString() == urlStr` isn't always true."
112628394,5264,zeule,2017-04-21T07:48:07Z,"Yes, @Chocobo1, what's wrong with indentation here?"
112646128,5264,Chocobo1,2017-04-21T09:13:53Z,I misread.
407078371,12480,zeule,2020-04-11T15:44:10Z,Why are these needed if you request C++ standard support? CMake knows what minimal compiler versions are required to fully support the requested standard version. You can use [compile-features]( https://cmake.org/cmake/help/git-master/manual/cmake-compile-features.7.html) if you want a finer control. 
407078593,12480,zeule,2020-04-11T15:46:25Z,Just set `PUBLIC` target feature for the base target. See https://github.com/arvidn/libtorrent/blob/RC_1_2/cmake/Modules/LibtorrentMacros.cmake#L66
407080087,12480,FranciscoPombal,2020-04-11T16:01:29Z,"I thought about using that, but ultimately decided against it. For example, some GCC 4.x advertise C++14 support, but to check if it really has full C++support, I would have to check against the 4 C++14 features that were only added in 5.0. So I thought I might as well just check the version, since otherwise, the intent of checking for those specific features might not be immediately obvious."
407081132,12480,zeule,2020-04-11T16:11:59Z,I think you are wrong. CMake already maintains a table with minimal compiler versions for each standard level.
407081794,12480,FranciscoPombal,2020-04-11T16:18:37Z,What's the advantage? And wouldn't I have to do that in the `CMakeLists.txt` under `src/` instead?
407084623,12480,FranciscoPombal,2020-04-11T16:45:16Z,"@zeule 
I tested with GCC/G++ 4.8.5 on Ubuntu; without the version checks (i.e. everything inside the `if (""cxx_std_${QBITTORRENT_MINIMUM_CXX_STANDARD}"" IN_LIST CMAKE_CXX_COMPILE_FEATURES)`), the configure completes successfully, but the build then fails with `unknown flag -std=c++14`.

The actual failure reason in this instance is because GCC 4.8 would expect something like `-std=c++1x`, but it also tells us GCC 4.8 passes CMake's `cxx_std_*` check, without actually having full C++14 support, according to the table at https://gcc.gnu.org/projects/cxx-status.html#cxx14. In other words, even if the `-std=` flag name was corrected to be the legacy one, the build would eventually fail as soon as a C++14 feature only introduced with GCC 5.0 were used."
407087974,12480,zeule,2020-04-11T17:18:34Z,https://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD_REQUIRED.html#prop_tgt:CXX_STANDARD_REQUIRED
407088603,12480,zeule,2020-04-11T17:24:28Z,"Oh, sorry. You set it below. And you say it does not report an error at compile time?"
407089273,12480,zeule,2020-04-11T17:30:46Z,"Your code comment says you want to prevent user from overriding the standard value, which is very much understandable given the libtorrent standard-dependent ABI. Users can't override explicitly set target features. "
407109069,12480,FranciscoPombal,2020-04-11T20:45:09Z,"@zeule 
> Oh, sorry. You set it below. And you say it does not report an error at compile time?

No error at _configure_ time (as in CMake's configuration). Eventually an error occurs at compile time, since the required features are actually not all present, even though CMake thinks they are (because the compiler mislead it into thinking that)."
407112642,12480,zeule,2020-04-11T21:25:36Z,"Ah, they advertise C++14 support for GCC 4.8.5, which has a bare minimum but provides a flag to turn it on.  CMake defines the `CMAKE_CXX14_STANDARD__HAS_FULL_SUPPORT` variable when it presumes the compiler support the standard completely. Maybe you can use that? "
407116174,12480,zeule,2020-04-11T22:08:44Z,"@FranciscoPombal, maybe you did not know:  
`${CMAKE_CXX${QBITTORRENT_MINIMUM_CXX_STANDARD}_STANDARD__HAS_FULL_SUPPORT}` is how weird it looks in CMake syntax.
"
407186524,12480,FranciscoPombal,2020-04-12T11:45:16Z,"@zeule
Thanks, your solution worked and greatly simplified the code, but the `IF` condition became `CMAKE_CXX${QBITTORRENT_MINIMUM_CXX_STANDARD}_STANDARD__HAS_FULL_SUPPORT` (notice the lack of the outer-most `${}`), due to the way variable expansion occurs inside `IF` statements."
407186819,12480,zeule,2020-04-12T11:47:47Z,do you want to consider c++ 98?
407187467,12480,FranciscoPombal,2020-04-12T11:53:15Z,"@zeule 
> Your code comment says you want to prevent user from overriding the standard value,

No, I just want to prevent the user from using a lower than minimum (default) value. For example, if the default value is `14`, the user is allowed to set `17` but not `11`."
407188040,12480,FranciscoPombal,2020-04-12T11:58:42Z,"Good catch, fixed."
407499400,12480,zeule,2020-04-13T14:14:39Z,I'd change this to function and pass the minimal standard value in argument 
407519155,12480,glassez,2020-04-13T14:52:25Z,I wanted to suggest something similar... It would be good to define the minimal standard in the main (top level) project file.
410903150,12480,glassez,2020-04-19T13:17:47Z,"@FranciscoPombal, do you intend to finish it?"
413925020,12480,FranciscoPombal,2020-04-23T16:03:54Z,"@glassez Yes, sorry for the delay. I should have it ready in the following days."
414080870,12480,FranciscoPombal,2020-04-23T19:53:46Z,@glassez @zeule fixed.
414083667,12480,zeule,2020-04-23T19:58:12Z,Errr.... What is that?
414083915,12480,zeule,2020-04-23T19:58:36Z,"simply ""14"""
414084316,12480,zeule,2020-04-23T19:59:15Z,"you can select a much shorter name for the argument, for example ""_std"""
414084527,12480,zeule,2020-04-23T19:59:35Z,qBittorrent -> ${PROJECT_NAME}
414084703,12480,zeule,2020-04-23T19:59:53Z,PROJECT_NAME
414214020,12480,FranciscoPombal,2020-04-24T00:34:12Z,fixed
414214086,12480,FranciscoPombal,2020-04-24T00:34:22Z,fixed
414214127,12480,FranciscoPombal,2020-04-24T00:34:30Z,fixed
414214275,12480,FranciscoPombal,2020-04-24T00:34:59Z,fixed
414214332,12480,FranciscoPombal,2020-04-24T00:35:07Z,fixed
414227647,12480,zeule,2020-04-24T01:21:43Z,"The very last comment: a function is inside a file named ""Macro""."
414228715,12480,FranciscoPombal,2020-04-24T01:25:35Z,@zeule fixed.
414232839,12480,zeule,2020-04-24T01:40:02Z,"Does it matter for the caller is it a function or a macro? If no, maybe just include(QbtCXXCompilerAndModeCheck)?"
414460185,12480,FranciscoPombal,2020-04-24T10:12:57Z,"@zeule 
I would prefer it like this, since other files use the same convention, e. g. `FunctionReadVersion.cmake`, `MacroConfigureMSVCRuntime.cmake`, etc."
414489129,12480,glassez,2020-04-24T11:03:46Z,What's the point to have one function/macro per file?
414500634,12480,FranciscoPombal,2020-04-24T11:24:30Z,Cleaner separation? I don't know. It was already done this way.
414505492,12480,glassez,2020-04-24T11:33:29Z,">I don't know. It was already done this way.

Well, it's separate task to cleanup it."
414545239,12480,zeule,2020-04-24T12:41:44Z,And here.
414545678,12480,zeule,2020-04-24T12:42:28Z,Is PARENT_SCOPE required here? The CMAKE_CXX_STANDARD_REQUIRED variable is global already.
414786961,12480,FranciscoPombal,2020-04-24T18:42:51Z,"> Is PARENT_SCOPE required here? 

Through experimentation, I found it to be required."
414787118,12480,FranciscoPombal,2020-04-24T18:43:05Z,same as https://github.com/qbittorrent/qBittorrent/pull/12480#discussion_r414786961
414816695,12480,zeule,2020-04-24T19:37:14Z,"Ah, good to know. Apparently, those variables are not declared by default."
414988377,12480,glassez,2020-04-25T05:46:58Z,Why is argument passed as string?
415173420,12480,FranciscoPombal,2020-04-26T00:09:39Z,"Well everything is a string in CMake anyway. But, it is better to unquote it I guess, since elsewhere I also use `98` without quotes. Fixed."
416589173,12480,glassez,2020-04-28T12:55:42Z,Really I don't like this function. I would put all the necessary code directly in CMakeLists.txt.
416590762,12480,glassez,2020-04-28T12:58:04Z,What happens if you set CMAKE_CXX_STANDARD to 14 without this check but compiler doesn't support it?
416593883,12480,FranciscoPombal,2020-04-28T13:02:39Z,"@glassez The problem is that some compiler versions report that they ""support"" C++14, but it is not actually _full support_. So without this check, when using those compilers, the configure might complete successfully, but the build will fail later on."
416599116,12480,sledgehammer999,2020-04-28T13:10:08Z,"On another note, if we ever switch to c++17 we might not need full support c++17. For example, currently the c++17 full support check would probably fail for msvc2017, although we not use the extra features implemented in msvc2019. Am I wrong?
Of course, this worry is a bit theoretical at this timepoint."
416622003,12480,Chocobo1,2020-04-28T13:41:02Z,"I would prefer to keep it sorted: `[autoconf, automake, cmake, colormake]`"
416624836,12480,FranciscoPombal,2020-04-28T13:44:39Z,"@Chocobo1
Fixed."
416637608,12480,FranciscoPombal,2020-04-28T14:00:54Z,@sledgehammer999 that's the binary installer; the apt repo installs to `/usr/bin` as expected.
416648064,12480,zeule,2020-04-28T14:14:21Z,"In travis it prints out ""-- Building in C++ mode."""
416655393,12480,FranciscoPombal,2020-04-28T14:23:33Z,@zeule fixed. I moved the informational message to top level because it seemed like the easiest and most obvious way to get it to print correctly regardless of whether or not the user passes the `-DCMAKE_CXX_STANDARD` option in the command line.
416664979,12480,FranciscoPombal,2020-04-28T14:35:14Z,"@sledgehammer999 
> although we not use the extra features

_currently_.

I don't think we should constrain ourselves because of outdated/broken toolchains. If we switch to C++17 but continue to support toolchains without full support for it, people making future contributions after that would have to be constantly walking on eggshells to make sure they don't use anything that happens to be unsupported by those toolchains, which sounds like a huge pain.

It won't be too harsh to require >=MSVC2019 to build by the time we switch to C++17 IMO, since that is still kind of in the distant future. By that time, Qt6 will also be released, and that is also set to require full C++17 support minimum AFAIK. So people will have time and reasons to update their stuff (I am assuming, of course, that we will eventually want to transition to Qt6)."
416678744,12480,FranciscoPombal,2020-04-28T14:52:03Z,"@glassez

This type of code seems like the ideal candidate to be factored out to a function. It only does one thing, which is useful, but that most people don't care about the details (so the full code should not clutter the main script): it ensures qBittorrent will be built with the minimum required C++ version.

I decided to change the name to `qbt_minimum_cxx_mode_check` to simplify it/make it more obvious, though."
395194443,12205,Chocobo1,2020-03-19T17:22:38Z,"Get yourself the latest version here: https://github.com/jgm/pandoc/releases/tag/2.9.2 (static binary)
"
395195302,12205,Chocobo1,2020-03-19T17:23:52Z,"~~TODO shouldn't appear in man pages, unless this is only temporary.~~
Never mind."
395196033,12205,Chocobo1,2020-03-19T17:24:56Z,I would appreciate if you also update the author and date too.
395197190,12205,Chocobo1,2020-03-19T17:26:37Z,Those software doesn't belong to this project. IMO no point mentioning them in our man page and man page isn't a wiki...
395197673,12205,Chocobo1,2020-03-19T17:27:19Z,Make it another PR please...
395207225,12205,FranciscoPombal,2020-03-19T17:41:44Z,I know. The point of the TODOs is to remind of what has to be done and for you and others to suggest what to do.
395210448,12205,FranciscoPombal,2020-03-19T17:46:48Z,"Yeah but isn't the point of this section to mention related software that's potentially useful, even though it might not belong to the same project? It serves helps discoverability of related programs."
395216322,12205,Chocobo1,2020-03-19T17:56:28Z,"Probably just me, I don't feel like promoting other programs and be held liable when they go wrong..."
395217729,12205,Chocobo1,2020-03-19T17:58:41Z,"I think `-h`, `-v` are already implied in the above `OPTIONS`, maybe we don't need this?"
395218637,12205,Chocobo1,2020-03-19T18:00:09Z,Probably worth mentioning that stdout and stderr will be attached to the console if starting from a console.
395219907,12205,FranciscoPombal,2020-03-19T18:02:14Z,"No, it's a separate form: if you specify `-h` or `-v`, nothing else is allowed."
395220783,12205,FranciscoPombal,2020-03-19T18:03:41Z,"I'll update the date, but we should propbably remove the author altogether according to the recommendation in http://man7.org/linux/man-pages/man7/man-pages.7.html"
395223652,12205,FranciscoPombal,2020-03-19T18:08:36Z,Fixed.
395223985,12205,FranciscoPombal,2020-03-19T18:09:10Z,Fixed.
395227986,12205,FranciscoPombal,2020-03-19T18:16:17Z,fixed.
395262759,12205,Chocobo1,2020-03-19T19:17:44Z,>Dates should be written in the form YYYY-MM-DD.
395264381,12205,Chocobo1,2020-03-19T19:20:45Z,IIRC double dash would not render correctly in man page if not surrounded by code blocks.
395321247,12205,NotTsunami,2020-03-19T21:09:57Z,bugs.qbittorrent.org doesn't serve HTTPS
395381621,12205,FranciscoPombal,2020-03-19T23:53:08Z,"I can change that to https://github.com/qbittorrent/qBittorrent/issues if there are no objections or revert @Chocobo1, @glassez "
395381923,12205,FranciscoPombal,2020-03-19T23:54:10Z,"I suggested these ones because they are useful in general and very mature. But if you really, insist, I don't mind not including this."
395382307,12205,FranciscoPombal,2020-03-19T23:55:35Z,The author is currently removed. Let me know your opinion about this.
395432399,12205,Chocobo1,2020-03-20T04:13:23Z,I believe @sledgehammer999 would like to keep the old one.
395432509,12205,Chocobo1,2020-03-20T04:14:00Z,I'm ok with it.
395450727,12205,NotTsunami,2020-03-20T06:02:07Z,bugs.qbittorrent.org is also referenced a lot across documentation so it wouldn't make sense to change it 
395533948,12205,FranciscoPombal,2020-03-20T09:56:54Z,FIxed.
395534342,12205,FranciscoPombal,2020-03-20T09:57:44Z,"Reverted URL back to HTTP. It's better to fix the underlying issue anyway. When the URL is changed to HTTPS, we can change it here as well."
395835958,12205,thalieht,2020-03-20T19:01:27Z,/GeoDB/dbip-country-lite.mmdb
395836012,12205,thalieht,2020-03-20T19:01:33Z,/GeoDB/dbip-country-lite.mmdb
395877200,12205,FranciscoPombal,2020-03-20T20:34:55Z,"You only need to review the `.md` file, this one is auto-generated from the `.md` file."
395878001,12205,FranciscoPombal,2020-03-20T20:36:51Z,Fixed.
396056984,12205,Chocobo1,2020-03-22T05:43:49Z,"note on coding style, I would prefer concatenate the stream together as much as possible:
```c++
steam << //.. no need to end this expression with ';'
    << //.. more
    << /* end */ ;
```"
396057216,12205,Chocobo1,2020-03-22T05:48:38Z,"maybe change ""qBittorrent provides a familiar GUI similar to uTorrent's"" to ""qBittorrent provides a familiar GUI comparable to uTorrent's""? We don't actually try to be similar."
396057265,12205,Chocobo1,2020-03-22T05:50:14Z,"kademelia -> Kademelia ?
""kademelia DHT (Mainline)"" what does ""Mainline"" means? maybe just omit it to avoid raising more questions?"
396057524,12205,Chocobo1,2020-03-22T05:55:01Z,"I don't really launch qbt with arguments, I'll leave reviewing this part to others.."
396057683,12205,Chocobo1,2020-03-22T05:57:42Z,"""Hack"" seems to be scary and its way is informal, maybe rephrase it?"
396057822,12205,Chocobo1,2020-03-22T06:00:39Z,ughh.. why give out promise when there is no ETA?
396057919,12205,Chocobo1,2020-03-22T06:01:53Z,">(currently unused)

I see empty folders in it, not sure if that is true.."
396058039,12205,Chocobo1,2020-03-22T06:03:52Z,"maybe omit mentioning the exact file, users knowing the folder existence is enough IMO."
396058111,12205,Chocobo1,2020-03-22T06:05:34Z,http://wiki.qbittorrent.org/
396058349,12205,Chocobo1,2020-03-22T06:10:56Z,"Lets add a note about that info hash is for ""ubuntu-18.04.4-live-server-amd64.iso"""
396058351,12205,Chocobo1,2020-03-22T06:11:04Z,here too.
396058398,12205,glassez,2020-03-22T06:12:26Z,">We don't actually try to be similar.

I wouldn't meantion it at all."
396058535,12205,glassez,2020-03-22T06:14:52Z,">maybe rephrase it?

You really need to rephrase it in a end user friendly manner (without digging into internals)."
396089772,12205,FranciscoPombal,2020-03-22T12:47:50Z,"Fixed. Changed `qBittorrent provides a familiar GUI similar to uTorrent's, and is fast, stable and light.` to `qBittorrent provides a familiar, easy-to-use GUI, and is fast, stable
and light.`"
396089813,12205,FranciscoPombal,2020-03-22T12:48:20Z,Fixed.
396090825,12205,FranciscoPombal,2020-03-22T12:59:13Z,"See https://en.wikipedia.org/wiki/Mainline_DHT. I think it is important to at least specify that ""Mainline DHT"" is the specific DHT that we use. That it is Kademelia-based is an implementation, which I supposed can be left out.

I changed it to `DHT (Mainline)`."
396091349,12205,FranciscoPombal,2020-03-22T13:04:39Z,"@Chocobo1
@glassez 
Isn't the `""If you have to ask, you don't need this.""` disclaimer at the end sufficient?
I think the usage of ""hack"" here is appropriate in this case. This is the same description that has been used in the `-h` output so far.

Also the official `git` documentation, for example, uses it extensively, so this is not really breaking precedent."
396091979,12205,FranciscoPombal,2020-03-22T13:11:25Z,"Yeah, probably best to just update the man page when it is fixed. Fixed."
396092007,12205,FranciscoPombal,2020-03-22T13:11:43Z,"Alright, fixed."
396092416,12205,FranciscoPombal,2020-03-22T13:15:45Z,FIxed.
396092436,12205,FranciscoPombal,2020-03-22T13:15:55Z,Fixed.
396093701,12205,glassez,2020-03-22T13:28:07Z,"IMO, even name of this option is bad.
Really it stores file paths in relative form.
The fact that qBittorrent uses .fastresume files to save some torrent settings is a temporary phenomenon even though it has been around for a very long time. We can change this at any time, but this will not affect the meaning of this option."
396106194,12205,FranciscoPombal,2020-03-22T15:28:11Z,@glassez so should I change the name of this option in this PR? IMO it should be done in another one.
396106923,12205,glassez,2020-03-22T15:34:39Z,">should I change the name of this option in this PR? 

I think it should be done in separated PR.
But the following should be here:
>You really need to rephrase it in an end user friendly manner (without digging into internals)."
396108058,12205,FranciscoPombal,2020-03-22T15:45:23Z,@glassez @thalieht I'd appreciate if you know anything about this and could confirm it.
396108419,12205,FranciscoPombal,2020-03-22T15:48:43Z,"@Chocobo1
Exact files are only mentioned if they are very significant on their own, otherwise just the directory is mentioned. For example, files inside the `nova3` directory are not listed. I think all of the files that are explicitly documented right now are relevant/interesting enough to justify that.

But let me know if you have a different opinion."
396108756,12205,thalieht,2020-03-22T15:52:05Z,I don't.
396108933,12205,glassez,2020-03-22T15:53:26Z,">This enables what is known as ""portable mode"".

It is incorrect. It just changes profile directory path."
396110255,12205,FranciscoPombal,2020-03-22T16:05:10Z,Fixed.
396110533,12205,Chocobo1,2020-03-22T16:07:34Z,"The database name is not guaranteed to be stable (we will change it when the need arise) and as a user, I care less about the actual db name."
396110719,12205,FranciscoPombal,2020-03-22T16:09:07Z,"@glassez 
Then how exactly is ""portable mode"" enabled?

Maybe I should change that sentence to read `This functionally enables what is known as ""portable mode"".`?

When I invoked qbittorrent with this option, it created a standalone config/data file directory. When I started it again with the same path as argument, it used those settings it created before. Isn't that what ""portable mode"" is? You could send the folder to a friend and they would have the exact same config as you."
396137232,12205,FranciscoPombal,2020-03-22T20:28:12Z,"@Chocobo1
I applied the suggested change, with the caveat that I added an extra indentation level to `<< wrapText(...`s that are the description of the option name above them. This way it is easy to see where the lines corresponding to one option start and and end. Let me know if this is undesirable in your opinion.

In addition:
- all lines have now length < 100
- there is an empty line separating logical groups of options (as before)
- The first `<< '\n'` is always in the same line as other text. If there is a second consecutive one, it is in the next line (same as before, with the exception of the very last `<<\n;` which is on a line of its own to better follow your suggestion)."
396137965,12205,FranciscoPombal,2020-03-22T20:36:49Z,Fixed.
399316302,12205,Chocobo1,2020-03-27T14:44:37Z,"lets also clean this up: `""\n""` -> `'\n'`"
399316591,12205,Chocobo1,2020-03-27T14:45:00Z,Thanks! looks good to me.
402518168,12205,glassez,2020-04-02T18:17:31Z,">You could send the folder to a friend and they would have the exact same config as you.

How about existing torrents?
>Then how exactly is ""portable mode"" enabled?

What does ""portable mode"" mean exactly?
IMO, it should allow you to take some folder containing the application binary and all its configuration files, transfer it to another computer, and run it without any additional effort. It doesn't seem to apply to qBittorrent.
I never understood how qBittorrent could be really portable. Even currently I would remove such ""feature""."
402677331,12205,FranciscoPombal,2020-04-03T00:51:05Z,"@glassez 
> How about existing torrents?

Good point. I'll change the text to mention this and it's implications.

>What does ""portable mode"" mean exactly?
IMO, it should allow you to take some folder containing the application binary and all its configuration files, transfer it to another computer, and run it without any additional effort. It doesn't seem to apply to qBittorrent.

It's mostly a Windows think. As far as I know, in Windows land, a ""portable application""/""portable mode"" is almost a synonym of ""static build"", but it provides some additional guarantees. Not only can it run from a standalone directory without depending on external libraries, it also stores its settings within the standalone directory. It does not store config files in %APPDATA% or use/set registry keys. Thus, the application directory can be shared freely between systems, and it will work with exactly the same options.

From what i can observe, using `--profile` makes qBIttorrent fit this description, at least on Windows. The official build is already static, and the `--profile` flag can be used to keep all the configuration/data files in any directory, including the same one as the binary.

We could even provide an official ""portable"" release for Windows - just a zipped folder with the files you'd usually find in an installation folder (`.exe`, `.pdb`, ...), plus a `qbittorrent.bat` folder that just does `qbittorrent.exe --profile=.\`.

But it can also be useful for other platforms. For example, imagine you are trying to debug some issue and the user is using portable mode; they send you their ""profile"" folder, you run qBittorrent with `--profile` and the path to the user's profile and boom, you have a similar setup to that of the user just like that. Or you could even just ask the user for the .conf, construct a profile folder manually, with that, and execute qbittorrent with `--profile`.

So I think this it is indeed accurate to say ""This functionally enables what is known as ""portable mode"". But let me know if I misunderstood your point or some other detail."
403306937,12205,FranciscoPombal,2020-04-03T20:25:25Z,I just confirmed the option precedence works as described.
403382294,12205,FranciscoPombal,2020-04-03T23:26:52Z,Fixed.
403446314,12205,glassez,2020-04-04T09:07:22Z,">As far as I know, in Windows land, a ""portable application""/""portable mode"" is almost a synonym of ""static build""

It is incorrect statement. Most of dynamically linked Windows applications come with their own library binaries (except the Windows libraries and maybe VC runtime) so it is not so hard to turn it to so-called ""portable mode"".
But it's off-topic here.
>but it provides some additional guarantees. Not only can it run from a standalone directory without depending on external libraries, it also stores its settings within the standalone directory. It does not store config files in %APPDATA% or use/set registry keys. Thus, the application directory can be shared freely between systems, and it will work with exactly the same options.

It's almost the same as I said before.
The main thing is when user has ""portable"" app it should be able to `run it without any additional effort` (as I said above).
>From what i can observe, using --profile makes qBIttorrent fit this description, at least on Windows.

No. This option is the one that can help to provide ""portable mode"" but it isn't enough.
The another one is ""--relative-fastresume"" that allows to transfer existing torrents with the app. But unfortunately it isn't enough too since it can't cover all the cases so user is still responsible for some additional cares.
>But it can also be useful for other platforms. [...]

It is true. The ""--profile"" option itself is good for some purposes. But it only does what it does (it just ""allows you to specify custom profile path""). I don't want you to identify it with anything more.
>We could even provide an official ""portable"" release for Windows - just a zipped folder with the files you'd usually find in an installation folder (.exe, .pdb, ...), plus a qbittorrent.bat folder that just does qbittorrent.exe --profile=.\.

Really you don't need to have any .bat. If you create ""profile"" folder near the application executable qBittorrent will detect it and enables ""relative fastresume"" for you.
>But let me know if I misunderstood your point or some other detail.

Just call a spade a spade and don't give users too much hope. Otherwise, we will have to be responsible for it.

I don't want to maintain ""portable mode"".
If someone want to do it you can ignore my comments and follow ""portable mode maintainer"" thoughts.

@Chocobo1, what do you say?"
403447579,12205,FranciscoPombal,2020-04-04T09:20:25Z,"@glassez 

>No. This option is the one that can help to provide ""portable mode"" but it isn't enough.
The another one is ""--relative-fastresume"" that allows to transfer existing torrents with the app. But unfortunately it isn't enough too since it can't cover all the cases so user is still responsible for some additional cares.

`--profile` already implies `--relative-fastresume`. What are the ""additional cases"" that you refer to?

> If you create ""profile"" folder near the application executable qBittorrent will detect it and enables ""relative fastresume"" for you.

You mean a folder literally named `profile`? I did not know of this.

> I don't want to maintain ""portable mode"".
If someone want to do it you can ignore my comments and follow ""portable mode maintainer"" thoughts.

I understand not wanting to maintain it, and I'm not pushing for it. I'm just trying to document the existing behavior/features as best as I can. In light of your comments, it is clear I need to reword the text to not mention ""portable"" mode explicitly, I just need to know more details about what I'm asking here."
403448080,12205,glassez,2020-04-04T09:26:17Z,">--profile already implies --relative-fastresume.

What makes you think that?"
403451441,12205,FranciscoPombal,2020-04-04T10:01:26Z,"@glassez 

https://github.com/qbittorrent/qBittorrent/blob/a10cee0f2be2b57b8550e5a02cbeb6ae703cd910/src/app/application.cpp#L160

and

https://github.com/qbittorrent/qBittorrent/blob/a10cee0f2be2b57b8550e5a02cbeb6ae703cd910/src/app/application.cpp#L184"
403453186,12205,glassez,2020-04-04T10:21:15Z,You misunderstood it...
403463618,12205,FranciscoPombal,2020-04-04T12:17:31Z,@glassez How so? Can you please clarify then? This is starting to get really confusing.
403494564,12205,glassez,2020-04-04T17:27:13Z,"Your example relates to the following:
>If you create ""profile"" folder near the application executable qBittorrent will detect it and enables ""relative fastresume"" for you."
403495403,12205,FranciscoPombal,2020-04-04T17:35:16Z,"@glassez 
So let's get this straight:

- Specifying `--profile=some/path` with a name of some folder does not imply `--relative-fastresume`, so the `BT_backup` folder will not be portable between computers
- Specifying `--profile=some/path` and `--relative-fastresume` will make the BT_backup folder portable between computers
- Creating a folder named `profile` next to the application executable is effectively the same as using both `--profile=profile` and `--relative-fastresume`
- In all three cases all other data/config files/folders are portable between computers.

Is this correct?"
403495543,12205,FranciscoPombal,2020-04-04T17:36:38Z,Additionally: an instance started as above will be able to work alongside another instance with a different `--profile` or `--configuration` so long as they don't listen on the same ports and things like that. Yes?
403703988,12205,glassez,2020-04-05T13:45:08Z,">Specifying `--profile=some/path` with a name of some folder does not imply `--relative-fastresume`, so the `BT_backup` folder will not be portable between computers

Yes.
>Specifying `--profile=some/path` and `--relative-fastresume` will make the BT_backup folder portable between computers

Yes. But it will not work in case of path that cannot be represented in relative form (e.g. UNC or path in different disk on Windows).
>Creating a folder named `profile` next to the application executable is effectively the same as using both `--profile=profile` and `--relative-fastresume`

Yes.
And it won't work if you set another profile path via command line.
>In all three cases all other data/config files/folders are portable between computers.

AFAIK, other data isn't affected at all. So there can be conflicts if you run it on different computer.
>an instance started as above will be able to work alongside another instance with a different --profile or --configuration so long as they don't listen on the same ports and things like that. Yes?

Seems Yes. At least it should..."
406261835,12205,FranciscoPombal,2020-04-09T14:50:50Z,"@glassez I have changed the documentation according to our discussion. Is it accurate now?
Also some more questions:

> Yes. But it will not work in case of path that cannot be represented in relative form (e.g. UNC or path in different disk on Windows).

What is ""path"" referring to here? the one passed to the `--profile` option or the paths in the `.fastresume`s themselves?

> Yes.
And it won't work if you set another profile path via command line.

What exactly won't work? Is qBittorrent not going to launch at all, or will it launch but not use the `profile` folder next to it as the profile?

---

Can `--relative-fastresume` be passed in without `--profile`? if so, what will the paths be relative to? The current working dir?

If some torrents are initially saved with absolute paths, but then I change all config options to use relative paths and run qBittorrent with `--relative-fastresume`, will all the existing fastresumes be updated to use relative paths?"
407167092,12205,glassez,2020-04-12T08:43:10Z,"> > Yes. But it will not work in case of path that cannot be represented in relative form (e.g. UNC or path in different disk on Windows).
> 
> What is ""path"" referring to here? the one passed to the `--profile` option or the paths in the `.fastresume`s themselves?

In `.fastresume`. I can't imagine how it will react to such a path in the `--profile` option...
> > Yes.
> > And it won't work if you set another profile path via command line.
> 
> What exactly won't work? Is qBittorrent not going to launch at all, or will it launch but not use the `profile` folder next to it as the profile?

If profile path is explicitly set via command line it wiil not perform ""profile"" folder autodetection.
> Can `--relative-fastresume` be passed in without `--profile`? if so, what will the paths be relative to? The current working dir?

I don't know. Try to find out for yourself from the code, if you want...
> If some torrents are initially saved with absolute paths, but then I change all config options to use relative paths and run qBittorrent with `--relative-fastresume`, will all the existing fastresumes be updated to use relative paths?

I'm sorry, I don't know the answers to all these questions.
I am annoyed by this topic. I always thought all these ""portable mode"", ""relative fastresume"" and so on were unacceptable and I was against it, so I don't want to be responsible for it. I am sure that it is implemented extremely superficially and unreliably, and in many cases it has undefined behavior.
Please don't rape me any more with this topic.

"
407178577,12205,FranciscoPombal,2020-04-12T10:29:28Z,"@glassez I'm sorry about the question spam, I just want to make sure I get everything right, to have a quality man page. I think I have enough information now, the rest I can figure out on my own if needed.

I agree that this kind of stuff is implemented in a weird and finicky way - there seem to be a lot of edge cases and it is hard to explain them all. On top of this, the gain for having these features is dubious and it is not clear what kind of use case really needs this. qBittorrent's installer does not do any magic behind the scenes or pollute the registry or whatever - it just uses a bunch of config files in standard and predictable locations. `--configuration` is enough by itself IMO. But until we all decide to remove `--profile` and friends, I think they should be documented as accurately as possible."
407191655,12205,glassez,2020-04-12T12:31:20Z,">But until we all decide to remove `--profile` and friends,

Only ""friends"".
 `--profile` isn't bad for itself. It can be used in testing purposes.
>`--configuration` is enough by itself IMO.

I think No. At least on Windows different kind of configuration/data files are placed inside different folders (I mean there are at least two qBittorrent folders in different places). So `--profile` allows you to keep them together. BTW, it seems `--configuration` works incorrectly with default profile (on Windows). For me `--configuration=test` creates ""cache_test"" inside ""qBittorrent"" instead of ""qBittorrent_test/cache"" as I expect."
407203717,12205,FranciscoPombal,2020-04-12T14:10:38Z,"@glassez 
> > But until we all decide to remove `--profile` and friends,
> 
> Only ""friends"".
> `--profile` isn't bad for itself. It can be used in testing purposes.

Fair enough.

> > `--configuration` is enough by itself IMO.
> 
> I think No. At least on Windows different kind of configuration/data files are placed inside different folders (I mean there are at least two qBittorrent folders in different places). So `--profile` allows you to keep them together.

If you mean ""different folders"" in the same way that on Linux the config file and the logs are in different folders, I don't think that's a problem in and of itself. Despite being different directories, they are _expected_; one would not expect the logs to be in `~/config`, after all. But like you said above, it's useful to keep everything together for testing purposes.

> BTW, it seems `--configuration` works incorrectly with default profile (on Windows). For me `--configuration=test` creates ""cache_test"" inside ""qBittorrent"" instead of ""qBittorrent_test/cache"" as I expect.

Does this _only_ happen with the `cache` folder? Either way, I think it's ok to document the intended behavior, any deviation from it is another issue/PR."
407273595,12205,FranciscoPombal,2020-04-13T00:44:42Z,"@glassez 
I figured out the answers to the 2 outstanding questions above:

> Can `--relative-fastresume` be passed in without `--profile`?
> if so, what will the paths be relative to? The current working dir?

Yes it can, and the path will be relative to the path specified by `$HOME` (usually the home directory).

>If some torrents are initially saved with absolute paths, but then I change all config options to use relative paths and run qBittorrent with `--relative-fastresume`, will all the existing `.fastresume`s be updated to use relative paths?

No. Torrents previously added with absolute paths keep the absolute paths in the `.fastresume`s."
407280560,12205,FranciscoPombal,2020-04-13T01:35:15Z,"@glassez I think I addressed everything about the `--configuration`, `--profile`, and `--relative-fastresume` options now. Please confirm. If everything looks good, I can continue the copy-paste to the nox manpage and make the final adjustments to it. Then I'll finally submit the PR for final review."
414907076,12205,FranciscoPombal,2020-04-24T22:56:37Z,"@glassez I know you don't like reviewing text walls, but it would be great if you could please address my comment above. It's just a small portion of the overall PR."
414983642,12205,glassez,2020-04-25T05:20:26Z,Shouldn't it be `--profile`?
414983950,12205,glassez,2020-04-25T05:22:32Z,"""to instead create ..."" sounds wrong for me. Although my English is bad..."
414984549,12205,glassez,2020-04-25T05:26:35Z,I'm not sure you're right here.
414985035,12205,glassez,2020-04-25T05:29:18Z,"""directory"" - typo"
415026878,12205,thalieht,2020-04-25T09:48:15Z,"google gives plenty of results for ""to instead create"" so i think it's legit."
415034923,12205,ArcticGems,2020-04-25T10:37:04Z,"I think it can confuse some users a bit. How about =

> options will **instead** instruct qBittorrent to create/use configuration files in different places."
415175275,12205,FranciscoPombal,2020-04-26T00:22:11Z,fixed
415175456,12205,FranciscoPombal,2020-04-26T00:23:43Z,"Thanks for the suggestions, I went with `options will instruct qBittorrent to create/use configuration files in different locations, instead of the default ones.` in the end."
415175604,12205,FranciscoPombal,2020-04-26T00:24:35Z,"@glassez fixed. PS - you can review the markdown document, it's more readable. the manpage itself is autogenerated with pandoc."
415176301,12205,FranciscoPombal,2020-04-26T00:29:16Z,"@glassez I'm quite certain of this. I tested with `$ qbittorrent --profile=qbt_profile_test --configuration=qbt_config_test`. The result was a full configuration under `~/qbt_profile_test`, as predicted (remember that if a relative path is specified in `--profile`, it will be relative to the user's home directory)."
415350100,12205,glassez,2020-04-26T16:42:25Z,">I'm quite certain of this.

I'm quite certain of the opposite, after I tested it.
I tested with `qbittorrent --profile=testProfile --configuration=test`. It creates `testProfile/qBittorrent_test` (i.e. it applies both `--profile` and `--configuration` parameters).
>remember that if a relative path is specified in `--profile`, it will be relative to the user's home directory

My result also contradicts this. It is relative to the application's working directory (as the relative path usually behaves)."
415355794,12205,FranciscoPombal,2020-04-26T17:12:36Z,"@glassez 

> I'm quite certain of the opposite, after I tested it.
> I tested with `qbittorrent --profile=testProfile --configuration=test`. It creates `testProfile/qBittorrent_test` (i.e. it applies both `--profile` and `--configuration` parameters).

You're right, did not realize they were nested like that...

> My result also contradicts this. It is relative to the application's working directory (as the relative path usually behaves).

Yep, seems I was totally wrong about this. EDIT: the documentation for this was correct already. I was confusing with the case where `--relative-fastresume` is used without `--profile`."
415358629,12205,FranciscoPombal,2020-04-26T17:26:50Z,@glassez fixed
429049444,12205,glassez,2020-05-22T05:28:26Z,">Please confirm. 

Now it looks more like the truth (as far as I can tell about it).
The only thing I don't like is that you put ""running multiple instances"" as the main purpose of both `--configuration` and `--profile` options (at least it looks like this due to first place in option description)."
429197127,12205,FranciscoPombal,2020-05-22T11:39:22Z,"@glassez Thanks for reviewing, looks like we're getting closer.

> The only thing I don't like is that you put ""running multiple instances"" as the main purpose of both `--configuration` and `--profile` options (at least it looks like this due to first place in option description).

Well, what would you say is the main purpose of each option? Just supporting different configs for different scenarios?

If so, I could change it to something along the lines of: ""These options enable saving and using different conigurations. Additionally, they can be leveraged to run multiple different instances of qBittorrent at the same time. However, in this case, one must take care to adjust settings that are inherently incompatible across multiple simultaneous instances if set to the same value, such as the listening port."". Is this what you're looking for?"
429890555,12205,glassez,2020-05-25T11:43:32Z,">Is this what you're looking for?

Apparently, Yes. But I can't confirm that you describe it in a better way. My English is too bad for that, and you are too verbose and informal for me to understand exactly everything...

>Well, what would you say is the main purpose of each option? Just supporting different configs for different scenarios?

You can just prepend your current description with something like this one (I mean to say about ""supporting different configs for different scenarios"")."
433555823,12205,FranciscoPombal,2020-06-02T00:22:03Z,"@glassez 

> Apparently, Yes. But I can't confirm that you describe it in a better way. My English is too bad for that, and you are too verbose and informal for me to understand exactly everything...

I've pushed the change, I think it conveys the intended idea/usage case better now.

About formality, was that comment directed at my example/sketch in the comment, or at the state of the PR in general? I'm trying to be as objective as possible with a reasonable level of formality for a man page. If you think the current text/tone is too informal/not objective enough (or too formal), can you please point to a specific instance (or several) and explain how you would fix it, and your reasoning for such changes?"
436243856,12205,glassez,2020-06-06T06:32:28Z,"Sorry, I have nothing to add. I just wanted to say that it is easier for me to understand strictly formalized wordings because of my poor English."
810476164,16485,glassez,2022-02-19T10:40:25Z,This debug info is for testing purposes only. I will delete them before merging.
810482643,16485,glassez,2022-02-19T11:55:06Z,"> Maybe name it as ""Process physical memory(RAM) limit""

Then the word ""Process"" can also be omitted, IMO."
810580757,16485,Chocobo1,2022-02-20T07:13:31Z,"I have intention to make it available on linux so I would suggest using https://en.wikipedia.org/wiki/Working_set
And please make adjustments for the option to be platform agnostic."
810581463,16485,Chocobo1,2022-02-20T07:21:12Z,`const int size`
810581608,16485,Chocobo1,2022-02-20T07:23:13Z,Those should be `int64_t`.
810581885,16485,Chocobo1,2022-02-20T07:25:52Z,`Error code: %1`
810582126,16485,Chocobo1,2022-02-20T07:27:32Z,"`Failed to apply memory working set limit. Reason: \""%1\""`"
810582313,16485,Chocobo1,2022-02-20T07:29:36Z,Memory working set limit is applied. Value: %1 (%2 MB)
810582558,16485,Chocobo1,2022-02-20T07:31:54Z,"Since you used `QUOTA_LIMITS_HARDWS_MAX_ENABLE` the minimum size shouldn't matter, can't you just put some dummy value?"
810582758,16485,Chocobo1,2022-02-20T07:33:29Z,ditto.
810582820,16485,Chocobo1,2022-02-20T07:34:06Z,"`Failed to apply memory working set limit. Reason: \""%1\""`"
810582985,16485,Chocobo1,2022-02-20T07:35:54Z,This should not overwrite the error code but append after the code.
810600035,16485,glassez,2022-02-20T10:04:13Z,"> This should not overwrite the error code but append after the code.

Does it matter to the user? I just used it as a fallback in case I couldn't get the appropriate message. If you insist on showing the error code anyway, what format should resulting message have? (so that I don't have to redo it multiple times)"
810600735,16485,glassez,2022-02-20T10:09:30Z,"> And please make adjustments for the option to be platform agnostic.

What adjustments? Allow to set it in settings UI on any platform? But currently it is implemented only for Windows. If someone implements it on some other platform, they can easily adjust the conditionals to make it available."
810601022,16485,glassez,2022-02-20T10:11:20Z,"> Those should be `int64_t`.

Those are assigned by/to unsigned types."
810601171,16485,glassez,2022-02-20T10:12:38Z,"> `Error code: %1`

`Reason: Error code: 1234.` are you sure?"
810601491,16485,glassez,2022-02-20T10:15:36Z,"> the minimum size shouldn't matter, can't you just put some dummy value?

64MB is dummy value.
But, IIRC, min value shouldn't be greater than max so there is adjustment."
810794870,16485,Chocobo1,2022-02-21T05:46:31Z,"OK.
Another thing, are you able to add the webapi (or even webui) parts? AFAIK windows can build with nox/nogui option too."
810795371,16485,Chocobo1,2022-02-21T05:47:52Z,(I don't insist) I will only convert to unsigned type at the very last moment.
810796078,16485,Chocobo1,2022-02-21T05:49:52Z,"No, I mean: `Failed to set Memory Working Set limit. Error code: 1234. Error message: ""function failure blah blah""`"
810796568,16485,Chocobo1,2022-02-21T05:51:16Z,"I mean a real dummy value such as `0`. I'm guessing `SetProcessWorkingSetSizeEx` will ignore it.
(I don't insist)"
810796873,16485,Chocobo1,2022-02-21T05:52:09Z,Let's move the discussion over here: https://github.com/qbittorrent/qBittorrent/pull/16485#discussion_r810796078
810797970,16485,Chocobo1,2022-02-21T05:55:07Z,">If you insist on showing the error code anyway

Sometimes I think this will help the developers when reading logs sent from users. We can look up the error code on msdn and not rely on localized error messages."
810798441,16485,Chocobo1,2022-02-21T05:56:32Z,"On a second thought, operation success messages can be omitted because application is working as intended."
810801660,16485,glassez,2022-02-21T06:05:28Z,"> OK. Another thing, are you able to add the webapi (or even webui) parts? AFAIK windows can build with nox/nogui option too.

I will do this as soon as the main part is finished and approved."
810802872,16485,glassez,2022-02-21T06:08:48Z,"> (I don't insist) I will only convert to unsigned type at the very last moment.

So you would first conver input data coming from WinAPI from unsigned and pass to this function and then convert result to unsigned again?"
810803709,16485,glassez,2022-02-21T06:10:48Z,"> On a second thought, operation success messages can be omitted because application is working as intended.

I also came up with the same idea."
810804121,16485,glassez,2022-02-21T06:11:52Z,">I mean a real dummy value such as 0.

I did so initially, but it ended in failure."
811617430,16485,Chocobo1,2022-02-22T06:37:48Z,I would leave this out. Don't want to give users the impression that this value must be a multiple of 64.
811620630,16485,Chocobo1,2022-02-22T06:44:29Z,this is `int` now.
811623227,16485,Chocobo1,2022-02-22T06:49:43Z,"`, m_storeMemoryWorkingSetLimit(SETTINGS_KEY(""MemoryWorkingSetLimit""), <default value>)`"
811623998,16485,Chocobo1,2022-02-22T06:51:14Z,"I would really add quotes around the error message from system, to avoid it blending in to our log message."
811624089,16485,Chocobo1,2022-02-22T06:51:27Z,And therefore this can be omitted.
811635628,16485,glassez,2022-02-22T07:14:02Z,"IMO, `Reason: Incorrect parameter. Error code: 87.` looks better than
`Error code: 87. Error message: ""Incorrect parameter.""` like you suggested. 
`:` is enough to provide good structure of messages in this case IMO. But you want to complicate it, although at the same time you object to the use of quotation marks (and other ways) to highlight some special words and phrases to emphasize that they are not used in the usual sense, but refer to certain terms, etc."
811637374,16485,glassez,2022-02-22T07:17:06Z,`SettingValue` constructor has only one parameter.
811648937,16485,Chocobo1,2022-02-22T07:36:03Z,">IMO, Reason: Incorrect parameter. Error code: 87. looks better than
Error code: 87. Error message: ""Incorrect parameter."" like you suggested.

What if the system (or other sources) error message have more than one sentences? the result log format will be messed up. Having it in quotes will clearly show the bounds of the `Reason: ""msg"".` part.

>you object to the use of quotation marks (and other ways) to highlight some special words and phrases to emphasize that they are not used in the usual sense

Right, those aren't ""special"" enough IMO. You don't see pompous highlighting on msdn doc or wikipedia entry or everywhere else.
* https://en.wikipedia.org/wiki/Capitalization_in_English#When_to_capitalize
  >with some nouns and adjectives, usually if a noun indicates a **proper noun**
* https://en.wikipedia.org/wiki/Quotation_marks_in_English
  >They also sometimes appear to be used as a means of adding emphasis, although this usage is usually considered incorrect.
"
811653565,16485,Chocobo1,2022-02-22T07:43:19Z,"`m_storeMemoryWorkingSetLimit.get(<default value>)`
I would even remove `std::max()` and let the system call deal with invalid parameters."
811674342,16485,glassez,2022-02-22T08:12:53Z,"> What if the system (or other sources) error message have more than one sentences? the result log format will be messed up. Having it in quotes will clearly show the bounds of the `Reason: ""msg"".` part.

Therefore, I doubt about the unconditional unification of messages. In some cases (like this), the formation of less formalized (but more human like) messages looks better. For example:
>Failed to set physical memory (RAM) usage limit. Error code 87. Invalid parameter. Some additional error description."
811738635,16485,glassez,2022-02-22T09:27:17Z,"BTW, it is not some kind of ""message from the depths of the system"". It is just a string explanation of the error. We just use some predefined one provided by the WinAPI function instead of custom description."
811739350,16485,glassez,2022-02-22T09:28:01Z,Other comments should be addressed now.
811774516,16485,glassez,2022-02-22T10:05:01Z,"I really don't want to argue about this part of the changes. If you insist, I will give in. But I would also like to hear other opinions (unless of course their waiting will not be long)."
813540934,16485,Chocobo1,2022-02-24T04:41:52Z,"Since no other references it, I would move this to `Application::memoryWorkingSetLimit()`."
813543149,16485,Chocobo1,2022-02-24T04:48:17Z,">I really don't want to argue about this part of the changes. If you insist, I will give in.

I'll let you decide it yourself.

But now I would like to mention another issue of it.
Not every languages uses the (western?) punctuation marks. Some languages of Asia have their own (different) punctuation. For example: `。` instead of `.` and I'm not sure how many variances are there in the world. So here your detection (and formatting) won't be reliable for those languages."
814585565,16485,Chocobo1,2022-02-25T08:56:22Z,Sorry I gave the wrong suggestion before. This should store bytes and preferably use `qint64`. The UI can still use `MiB`. And webapi will use bytes.
814589668,16485,glassez,2022-02-25T09:02:09Z,"> This should store bytes and preferably use `qint64`.

Why?"
814658734,16485,Chocobo1,2022-02-25T10:35:02Z,So it is consistent with other settings (from the viewpoint of webapi and user-editable settings file and libtorrent API). `int` is ok if users thinks 4GiB limit is acceptable.
814684320,16485,glassez,2022-02-25T11:13:42Z,"No big deal but... 

1. We clearly do not need such precision and it is unlikely that we will ever need it.
2. Having an inconsistency of units between the config file and the UI, we will definitely receive complaints from some ""smart guys"".

How should we handle the cases if there is more precise value is stored in config than we can represent in UI? If we just discard some less significant part (or round it up) the value will be rewritten n config when applying preference changes in UI."
815270036,16485,Chocobo1,2022-02-26T05:16:18Z,">We clearly do not need such precision and it is unlikely that we will ever need it.

It is all about being consistent... There was similar problems in the past and IIRC this was the least problematic way.

>Having an inconsistency of units between the config file and the UI, we will definitely receive complaints from some ""smart guys"".

I don't remember there was such complaint.

>How should we handle the cases if there is more precise value is stored in config than we can represent in UI? If we just discard some less significant part (or round it up) the value will be rewritten n config when applying preference changes in UI.

I would just round them. Users will just have to live with it. 😛"
815295281,16485,thalieht,2022-02-26T10:21:03Z,"> > Having an inconsistency of units between the config file and the UI, we will definitely receive complaints from some ""smart guys"".
> 
> I don't remember there was such complaint.

I would complain if i edited the config file manually.


"
815345557,16485,glassez,2022-02-26T19:28:31Z,"@Chocobo1 
After some consideration, I would still keep using megabytes (@an0n666 yes, yes, I belong to the ""old school"", so I mean mebibytes, if you are more used to it). Using bytes will not bring any benefit, but only problems (I don't see any benefit in consistency if it is an end in itself). Maybe you know something that is not obvious to me?"
815389438,16485,Chocobo1,2022-02-27T05:12:46Z,Is it needed for something?
815426578,16485,glassez,2022-02-27T11:34:03Z,"> Is it needed for something?

Not anymore. Deleted it."
815427136,16485,glassez,2022-02-27T11:39:32Z,"> Since no other references it, I would move this to `Application::memoryWorkingSetLimit()`.

Inlined in `Application::memoryWorkingSetLimit()`."
816481447,16485,glassez,2022-03-01T06:27:04Z,"> > OK. Another thing, are you able to add the webapi (or even webui) parts? AFAIK windows can build with nox/nogui option too.
> 
> I will do this as soon as the main part is finished and approved.

Now I see it's impossible since it is still OS dependent and we discussed earlier that the API should be unified.
In case you forgot, let me remind you that in the case of such platform-dependent things, we have two main ways: 
1. do not provide them through the API, 
3. Use some stubs in the API.

We can still, of course, have some kind of modifier in the API version, but it looks too troublesome.
Also, we may not hide the interface for platform-dependent functions, but simply do an implementation that does nothing where it is not available. For example, in the case of this option, we could just allow it to be get/set, but mark it as unsupported on such and such platforms."
816484849,16485,Chocobo1,2022-03-01T06:35:11Z,">Also, we may not hide the interface for platform-dependent functions, but simply do an implementation that does nothing where it is not available. 

This.

IMO you can just merge this PR and I'll add the linux and webapi parts. "
817372500,16485,Chocobo1,2022-03-02T06:02:04Z,">IMO you can just merge this PR and I'll add the linux and webapi parts.

I have bad news. The relevant system API (`RLIMIT_RSS`) on linux has no effect on modern systems (only affects 2.4.x kernel versions) and there are no replacements. I reckon linux has no need of such tuning knob...
The same API still might benefit BSD, macOS but I don't use them and the user base on them are relatively small...
So for those users, maybe I'll just publish my changes in a new PR and close it immediately (since the effectiveness is dubious)?"
817376446,16485,glassez,2022-03-02T06:11:58Z,"> So for those users, maybe I'll just publish my changes in a new PR and close it immediately (since the effectiveness is dubious)?

I'm not sure I understand exactly its meaning..."
817377805,16485,Chocobo1,2022-03-02T06:15:22Z,">I'm not sure I understand exactly its meaning...

This is to leave a mark in the sea of closed PR so that users finding it would able to find something..."
817552819,16485,glassez,2022-03-02T10:25:34Z,">This is to leave a mark in the sea of closed PR so that users finding it would able to find something...

Ok."
818299986,16485,Chocobo1,2022-03-03T04:14:39Z,"> > This is to leave a mark in the sea of closed PR so that users finding it would able to find something...
> 
> Ok.

#16576."
244918090,10099,Chocobo1,2019-01-03T06:21:58Z,"a bit unrelated to this PR, how about move this to the `SOURCES` above (and also `HEADERS`)."
244918149,10099,Chocobo1,2019-01-03T06:22:45Z,"wrong position, 1 line down."
244918262,10099,Chocobo1,2019-01-03T06:24:17Z,"although I don't care much about cmake, it is still nice if the components can be sorted alphabetically."
244918441,10099,Chocobo1,2019-01-03T06:26:10Z,here too.
244918675,10099,Chocobo1,2019-01-03T06:28:40Z,"this can be sorted too, I know I'm a bit obsessed but it makes it much easier to read/find."
244918966,10099,Chocobo1,2019-01-03T06:32:08Z,`QByteArray metadata() const;`
244919735,10099,Chocobo1,2019-01-03T06:41:10Z,"`tr(""ResumeDataSavingManager couldn't save data in '%1'. Error: %2"")`"
245039962,10099,sledgehammer999,2019-01-03T15:43:48Z,"Sure.
I don't know the initial reason for this. Maybe it was here because ""upgrade"" was a temporary solution. But now it pretty much is a stable part."
245040125,10099,sledgehammer999,2019-01-03T15:44:20Z,I prefer keeping this in logical order. In the order we use them in the DB.
245065045,10099,glassez,2019-01-03T16:58:42Z,"There are no database related utilities in this file. It's just database configuration for some particular application component (BitTorrent). So it should be under ""base/bittorrent""."
245251694,10099,glassez,2019-01-04T09:44:52Z,"It's bad idea to use default connection (even connection with name having common meaning). Since other components will use SQLite in the future, this approach can lead to conflicts (at least, it will complicate the development)."
245255043,10099,glassez,2019-01-04T10:00:20Z,"Do you really want to have database in BT_backup folder? Why? Not only it has the inappropriate name (we kept it for compatibility purposes only), a separate folder is not needed at all now."
245387903,10099,LordNyriox,2019-01-04T18:55:02Z,"@sledgehammer999, @glassez:  

Perhaps you should make a new class to manage SQLite read/write operations? 

Sort of like `SettingsStorage`? "
245464837,10099,Chocobo1,2019-01-05T03:16:20Z,">In the order we use them in the DB.

Do you mean there is some order between COL_* fields?
Well... I suppose this isn't much important."
245506777,10099,glassez,2019-01-06T12:29:00Z,Are you sure you really want it?
245507437,10099,glassez,2019-01-06T12:47:38Z,We're not going to support libtorrent < 1.1 in v4.2.
245507601,10099,glassez,2019-01-06T12:52:41Z,"Since this upgrade applies entirely to BitTorrent component, I would not extract this code deliberately into a separate file. This breaks the logic of the code structure."
245507774,10099,glassez,2019-01-06T12:59:11Z,"It can be done easier:
```c++
if (db.tables().contains(TABLE_NAME))
    return;
```"
245508270,10099,glassez,2019-01-06T13:14:14Z,"Invalid logic!
A user who has never used older qBittorrent versions should not care about the old saving system.

We need to implement more advanced version control. For example, store the current version somewhere in the application data. Then newer versions will be able to know more precisely what needs to be updated, and older versions will be able to warn the user about possible conflicts as a result of downgrade. In addition, it will avoid conflicts as a result of multiple upgrades/downgrades, when it is difficult to estimate based on some artifacts and we will know exactly which version was installed before (e.g. when both fastresumes and database exist)."
245508582,10099,glassez,2019-01-06T13:22:55Z,"You have to handle errors. E.g:
```c++
if (!db.transaction())
    throw RuntimeError(db.lastError().text());  // or return error status
try {
    // ...
    bool ok = query.prepare(""..."");
    if (!ok)
        throw RuntimeError(query.lastError().text());
    // and so on...
    if (!db.commit())
        throw RuntimeError(db.lastError().text()); 
}
catch (const RuntimeError &err) {
    db.rollback();
    thow err; // or return error status
}
```"
245521601,10099,sledgehammer999,2019-01-06T20:41:55Z,"@LordNyriox I'll have to see fist, but I don't think the DB code (due to the nature of SQL statements) can be abstracted away in to a class.
Any abstraction will be done last, because we need to agree on a format of storing data in the db."
245521648,10099,sledgehammer999,2019-01-06T20:43:33Z,"A reason I did it is because we have the lock file there which kinda guarantees that we have permission to read/write in that folder. Which in turn will make exporting the torrents back to the all system more manageable.
I open to suggestions for a new location. Also for a better name for the DB/table."
245521694,10099,sledgehammer999,2019-01-06T20:44:12Z,Yes. It shrinks the file small when removing torrents. Why should we use it?
245521731,10099,sledgehammer999,2019-01-06T20:45:12Z,This is moved around code. I am going to remove it all in a fell swoop in new PR dropping all RC_1_0 code.
245521800,10099,sledgehammer999,2019-01-06T20:47:38Z,"We need to do this check before trying to do any kind of upgrade. The upgrade code assumes that the db exists and is accessible and that the table exists in it.
The upgrade code is called before the Session is constructed."
245521962,10099,sledgehammer999,2019-01-06T20:50:53Z,"I think you misunderstood it here.
At the current moment this tries to updrade from the non-db way to the db-way. So if a db exists we don't try to migrate older files (.torrents+.fastresumes). It is assumed that the upgrade was done already and the user dropped new files at a later date.
Unless you suggest that we should always input into the db any kind of .torrent/.fastresume we find during startup."
245521998,10099,sledgehammer999,2019-01-06T20:51:52Z,Sure. Truth is I was in a hurry to make everything work and forgot to come back to this later.
245522352,10099,sledgehammer999,2019-01-06T21:02:17Z,"Also in case you missed it: Each row has a `version` column. During startup if the version number is different from the supported one then that row isn't loaded. New versions will upgrade smaller version, while refusing to load bigger version."
245522458,10099,sledgehammer999,2019-01-06T21:05:58Z,">Do you mean there is some order between COL_* fields?

I mean the logical order we use when issuing the `CREATE TABLE` statement. For example, we logically think that the ""hash"" column is the first one when thinking about each row."
245522968,10099,sledgehammer999,2019-01-06T21:25:36Z,">Also in case you missed it: Each row has a `version` column. During startup if the version number is different from the supported one then that row isn't loaded. New versions will upgrade smaller version, while refusing to load bigger version.

Now, I realize that his approach has a drawback. If newer versions require another table name, or different number of columns, older versions might not be able to extract the version number.

Should we instead create a 2nd table named ""version"" with a single col+row that will hold the version of the whole db?"
245670439,10099,glassez,2019-01-07T14:28:19Z,"As I mentioned earlier (in other words), you should not interfere any extra logic with the basic one anywhere. The main way is to work with the new ""saving system"". That is, if we simply discard all additional import/export logic, then the main one should not be affected. The same applies to all user visible manifestations of the application.
Your current code assumes that user had previous qBittorrent version before. It's incorrect! You should check for it first and then select what you should do.
>I open to suggestions for a new location. 

The same folder where legacy BT_backup were placed.
>Also for a better name for the DB/table.

Just something more specific than ""data."" E.g. ""torrents"".
>A reason I did it is because we have the lock file there which kinda guarantees that we have permission to read/write in that folder.

""Lock file"" logic should be dropped at all. It's meaningless in case of new ""saving system"". In addition, as it turned out, it is inefficient on *nix systems."
245673145,10099,glassez,2019-01-07T14:37:04Z,"""dropping all RC_1_0 code"" is much easier job than current PR so I assume it will be done earlier and you still need to remove it here separately."
245693567,10099,glassez,2019-01-07T15:33:52Z,"I'm surprised at this answer. I even thought for a moment that I was debating with another person...
>The upgrade code assumes that the db exists and is accessible and that the table exists in it.

This does not contradict the fact that this code should be in a different place.
>The upgrade code is called before the Session is constructed.

It's incorrect. At least it's done incorrectly. You ripped main Session code as well.

Main Session logic should be the following:
1. If database doesn't exist create it
2. Load torrents from database and go ahead.

When you add upgrade logic to it:
1. If database doesn't exist create it
2. If older version was used before this run try to import torrents from old ""saving system""
3. Load torrents from database and go ahead.

All this logic should be done in Session code!

One thing that should be done before the Session is created is asking the user for accept the upgrade. To do this, we do not need to know anything about the existence of the database. All you need to know is whether the old qBittorrent version was used just before the current application run.

My main idea is ""not to break the basic logic of the application for the sake of some additional"". "
245703452,10099,glassez,2019-01-07T15:59:35Z,">I think you misunderstood it here.

Is it? Here's your code: 
```c++
                    // If db exists don't try to upgrade
		    if (QFile::exists(dbPath)) {
		        initiliazeDB(dbPath);
		        return true;
		    }
		    else {
		        if (ask && !userAcceptsUpgrade()) return false;
		    }
```

You ask the user for upgrade if the database doesn't exist. But it is incorrect if the database does not exist due to the fact that the user has never used qBittorrent (on this system).

I've suggested correct logic in another comment.
>Now, I realize that his approach has a drawback. 

Yes, it is.
>Should we instead create a 2nd table named ""version"" with a single col+row that will hold the version of the whole db?

I think ""overall application versioning"" I suggested in other comment should fit us. There is no need to have separate versions for each thing."
245749884,10099,glassez,2019-01-07T18:20:16Z,">It shrinks the file small when removing torrents. 

Is that really necessary? The empty pages can be reused further. Additionally the doc says:
>However, using auto_vacuum can lead to extra database file fragmentation. And auto_vacuum does not compact partially filled pages of the database

Maybe it's better to use VACUUM command from time to time or allow user to perform it?"
246750174,10099,glassez,2019-01-10T13:04:52Z,BitTorrent::DB
246775003,10099,glassez,2019-01-10T14:19:12Z,"If you still want to have version for particular database it's better to use ""user_version"" pragma."
246846733,10099,glassez,2019-01-10T17:14:45Z,"There are many discussions on this topic. Personally, I prefer to use singular for table names (e.g. ""torrent""). Since SQL is a future of qBittorrent, let's make a project-wide rule about it."
249251569,10099,CyrusNajmabadi,2019-01-19T17:30:06Z,"are you sure about this?  is this a qt sql limitation?  That's not an issue for sqlite itself.  See https://www.sqlite.org/threadsafe.html 1.2:

> Multi-thread. In this mode, SQLite can be safely used by multiple threads provided that no single database connection is used simultaneously in two or more threads.

"
249251609,10099,CyrusNajmabadi,2019-01-19T17:31:42Z,"are you constantly executing these queries?  if so, it's good to cache them, and then update the args using hte cache query in the future.  it saves expensive costs in sqlite parsing and evaluating these strings. (note: only important if this is done a lot).  "
249251650,10099,CyrusNajmabadi,2019-01-19T17:33:20Z,"my other recommendation would be to encapsulate this behind some class that just exposes the operations you want to perform.  u.e. ""updateHash"".  That way you can change things behind the scenes, without having to update all these places.  It also isolates you from leaking out the details of tehse tables/columns and whatnot to all this consumptive code."
249253105,10099,glassez,2019-01-19T18:25:46Z,"Yes. It is Qt limitation:
>A connection can only be used from within the thread that created it. Moving connections between threads or creating queries from a different thread is not supported."
249253234,10099,glassez,2019-01-19T18:30:00Z,">are you constantly executing these queries?

Are you constantly deleting your torrents? I don't think you'll be able to do this so often that this code becomes really ""slow""."
249260786,10099,CyrusNajmabadi,2019-01-19T23:44:04Z,"I was talking in a general sense. Not about this query in particular.  For example, if you are constantly quering the DB, it can help significantly to cache the query.  

For example, say a user has many thousand torrents and you're going to execute the same query back to back for each torrent, then this can help quite a bit.

I agree it doesn't need to be done for something that happens rarely"
249269911,10099,glassez,2019-01-20T09:04:10Z,">I was talking in a general sense. Not about this query in particular.

Sorry. I just saw this suggestion having a general meaning in your other comment. Here it was attached to a specific place of the code, so it looks like it relates to this particular case.

Having prepared statement is a good idea in case of frequently invoked query."
251261749,10099,sledgehammer999,2019-01-28T00:23:43Z,"Now that I think about it, I should throw and stop executing here.
The older version may have table/column names that may not exist in the newer version, so further program execution will become undefined."
251308962,10099,glassez,2019-01-28T08:00:13Z,"Backward compatibility must be ensured in some way, otherwise the user will not be able to update the application without the risk of losing their torrents or stopping the application. But this is only a matter of implementation, because we know exactly the structure of the database of previous versions.
However, forward compatibility is generally an unattainable goal, so we must still limit the frequency of database format changes. We need to think about it as carefully as possible.

I had a crazy idea how to provide the possibility of database downgrade that provide some kind of forward compatibility (but ""paranoid"" will strongly against due to possible security issues). It lies in the fact that we could put SQL queries that perform a database downgrade in some special database table. Then, if a newer database version is found by application, it could retrieve the corresponding SQL queries and execute them."
252589025,10099,glassez,2019-01-31T09:25:39Z,"Please do not overfill these methods interface with unnecessary parameters. That's all you can obtain from the ""torrent"" object."
252589763,10099,glassez,2019-01-31T09:27:25Z,The same as similar methods above.
252589993,10099,glassez,2019-01-31T09:27:59Z,These two should be also moved to the following alert handlers and renamed accordingly.
253380502,10099,sledgehammer999,2019-02-04T08:45:34Z,TorrentHandle::name() doesn't expose the same thing. Nothing does.
253381550,10099,sledgehammer999,2019-02-04T08:49:07Z,I do it this way because `TorrentHandle::hasFirstLastPiecePriority()` does a potentially expensive calculation.
253386544,10099,glassez,2019-02-04T09:05:44Z,"I have commented not only on this particular method, but all similar changes.
As for this particular case, I'd better change the handling of the torrent name inside TorrentHandle class."
253386864,10099,glassez,2019-02-04T09:06:58Z,I'd better change its implementation inside TorrentHandle class.
254374139,10099,glassez,2019-02-06T17:35:28Z,Nothing inside this method indicates the layout of the query result. It would be better to use field names instead of indexes.
254378898,10099,glassez,2019-02-06T17:48:31Z,"I wondered for a long time whether there were really good reasons to break the readability of SQL queries like this. I've only found two possible reasons, but none of them seems to me to be strong enough:
1. An attempt to protect yourself from possible typos in queries. But it looks ridiculous, because the probability to make a typo in any other query word is not less than in the names of tables/fields. In addition, they all appear at the first test runs.
2. Ability to easily change table/field names in the future. This is also doubtful... It may look useful only in the early stages, but once it reaches the first release (in fact, once it will be merged in master), it will become very difficult to change the database format, so it will become almost unclaimed."
254478349,10099,LordNyriox,2019-02-06T22:28:20Z,"@glassez:  **Off-Topic**:  The plural form of ""index"" is ""indices"". "
254540289,10099,glassez,2019-02-07T03:59:20Z,"Aren't both forms acceptable?
https://grammarist.com/usage/indexes-indices/"
254546183,10099,LordNyriox,2019-02-07T04:47:53Z,"@glassez:  From the same link (emphasis mine): 

>Meanwhile, **indices is generally preferred in mathematical, financial, and technical contexts**, while indexes is relatively common in general usage. "
254550356,10099,glassez,2019-02-07T05:22:45Z,"OK, thanks."
257514804,10099,sledgehammer999,2019-02-17T17:32:44Z,"> It would be better to use field names instead of indexes.

Unforunately they don't correlate one-to-one. The index numbers are dependent on what you asked with your `SELECT` statement."
257515297,10099,sledgehammer999,2019-02-17T17:45:29Z,"Do you mean the inline C++ comments? I did it for readability and better reviewing of the appropriate var types chosen (in the SQL context), since it involves many columns. Then it will be used as quick reference each time we want to write a new SQL statement.

If you mean my general approach in other SQL statements to split them: I just split them in their logical parts to increase readability. And when the line becomes too long."
257517528,10099,glassez,2019-02-17T18:45:21Z,"Do you really think that when I say about ""break the readability of SQL queries"", I mean either comments or structural splitting that should improve the readability?
I meant the fact that you separate all names from SQL queries."
257518087,10099,glassez,2019-02-17T18:58:25Z,">The index numbers are dependent on what you asked with your SELECT statement.

Yes. But I can't see what you asked with your SELECT statement since it is exist in somewhere else. But the field names speak for themselves (I mean field/column names from SQL table)."
257519072,10099,sledgehammer999,2019-02-17T19:25:37Z,Done
257519086,10099,sledgehammer999,2019-02-17T19:26:04Z,I can't find a way to make it inexpensive
257519142,10099,sledgehammer999,2019-02-17T19:27:45Z,"Personally, I don't see this as a problem.
Do you want to provide a diff that implements this in the ""correct"" way?"
257519313,10099,sledgehammer999,2019-02-17T19:32:53Z,">(I mean field/column names from SQL table).

`QSqlQuery::value(const QString &name)` the docs say that this method is inefficient.

Bear in mind that `prepareTorrentData()` is a helper function called from one place only. So the reader/reviewer can backtrack a little bit. Is this sufficient to not seek out a more rigid solution?
How about if I put comments to indicate which column each number represents?
"
257519419,10099,sledgehammer999,2019-02-17T19:35:53Z,"Oh you mean the QString substitutions? I did it to prevent typos and to ease refactoring of this PR, in case it is decided to use a different name for eg the table, before the PR is merged."
257544343,10099,Chocobo1,2019-02-18T02:50:13Z,"Minor note, it seems these variables are always converted to QString, so you can store them in QString instead and also initialize them with QStringLiteral macro."
257589035,10099,glassez,2019-02-18T08:09:53Z,"> I did it to prevent typos and to ease refactoring of this PR, in case it is decided to use a different name for eg the table, before the PR is merged.

Then par. 2 (from my comment) is applicable to it:
>Ability to easily change table/field names in the future. This is also doubtful... It may look useful only in the early stages, but once it reaches the first release (in fact, once it will be merged in master), it will become very difficult to change the database format, so it will become almost unclaimed."
257590446,10099,glassez,2019-02-18T08:15:06Z,">How about if I put comments to indicate which column each number represents?

This is more or less clear as it is. There's another problem. Do the indexes used match the correct columns? For example, you changed the query but forgot to change the indexes."
257591652,10099,glassez,2019-02-18T08:19:33Z,">Bear in mind that `prepareTorrentData()` is a helper function called from one place only.

I wonder why you're passing QSqlQuery here. Why not extract all needed data in outer method and pass it here as dictionary?"
257886521,10099,glassez,2019-02-19T04:24:18Z,">I can't find a way to make it inexpensive

Just ask yourself why do we need recalculate this property each time we're getting its value?"
257887076,10099,glassez,2019-02-19T04:29:18Z,">Do you want to provide a diff that implements this in the ""correct"" way?

Then it will be easier to fix such things in the form of separate ""prerequisite"" PRs."
259590558,10099,arvidn,2019-02-23T19:40:59Z,"it seems unconventional to define global variables in a header file. if you end up including this in multiple translation units, you'll get multiply defined symbols.

I would say these should either be put in the anonymous namespace and made `cons`, or they should be made `extern` and the values moved into a TU."
399816475,12169,Chocobo1,2020-03-29T15:53:56Z,"Before you guys go all out, just keep in mind that the original icon name has an advantage which is qbt will use the native icon from desktop environment (if they provided one), this makes the application having more uniform & native feel. https://developer.gnome.org/icon-naming-spec/
IMO we should use those standard icon names as much as possible and only use custom ones when the standard ones are not suitable."
399819716,12169,Mazino-Urek,2020-03-29T16:19:14Z,I didn't know that. Let me adjust using the icon specific name if possible.
399821031,12169,Mazino-Urek,2020-03-29T16:29:51Z,"I have checked the gnome-icon-theme. There is nothing that can replace `reannounce` and `tag` icon. 
I am going to change the `recheck` icon to `view-refresh` as they are very similar. Great tip!"
399825995,12169,thalieht,2020-03-29T17:12:46Z,"Ah sorry these are not the same like the previous ones:
```suggestion
    errorTracker->setData(Qt::DecorationRole, UIThemeManager::instance()->getIcon(""error""));
```"
402155529,12169,NotTsunami,2020-04-02T08:55:47Z,"Any files deleted (gear and gear32) must also be removed from this file, otherwise the compiler still looks for them."
402205981,12169,Mazino-Urek,2020-04-02T10:19:36Z,Thanks. I forgot about that file. Made necessary changes.
402217143,12169,jagannatharjun,2020-04-02T10:39:40Z,are you sure they are not used in WebUI?
402320329,12169,thalieht,2020-04-02T13:39:45Z,"error.svg should be in `qBt-theme` folder, not `skin` otherwise this won't work."
402333717,12169,Mazino-Urek,2020-04-02T13:57:27Z,Won't this change cause problem for other icons?
402369602,12169,Mazino-Urek,2020-04-02T14:44:12Z,Done.
402402428,12169,thalieht,2020-04-02T15:25:49Z,"You are right... you could undo what i suggested and change this line to
```suggestion
    errorTracker->setData(Qt::DecorationRole, QIcon(QLatin1String("":/icons/skin/error.svg"")));
```
But i don't know if this will be acceptable. Better leave this comment unresolved until someone else confirms if this is the proper way.

Personally i don't understand why there are 2 folders. qBt-theme and skin. The icons contained in them seem randomly divided to me."
402405029,12169,Mazino-Urek,2020-04-02T15:29:11Z,"Exactly my thought. Unifying them will actually be a really good solution. As I am not a programmer, I thought It may serve some special purposes.
@FranciscoPombal @Chocobo1 Does a different folder serve any purpose? What do you guys think?"
402416578,12169,FranciscoPombal,2020-04-02T15:45:12Z,Maybe some historical reason? No idea if it is important or not. Differing to @Chocobo1
402418317,12169,jagannatharjun,2020-04-02T15:47:39Z,I think the qbt-theme icons can be replaced with system icons on unix systems that's why there are rwo folders
403092593,12169,Mazino-Urek,2020-04-03T15:37:02Z,@jagannatharjun I don't think so. It is the icon name that matter not the folder they are in.
403102770,12169,jagannatharjun,2020-04-03T15:53:18Z,"https://github.com/qbittorrent/qBittorrent/blob/4b409700b0809f82b8aa853b5b936623100bc22a/src/base/iconprovider.cpp#L61

haven't you noticed almost all system  (or qbt-theme folders') icons are wrapped in `getIcon` call"
403451592,12169,Mazino-Urek,2020-04-04T10:03:05Z,"@jagannatharjun You misunderstood me. I said in order to use icon-theme used by the Linux Operating System, I don't think the folder name doesn't matter. It is the real icon name like `error.svg` plays the most part."
403451756,12169,Mazino-Urek,2020-04-04T10:04:44Z,@thalieht I will make the changes as soon as I get an instruction from @Chocobo1. Until then I think changing the folder is a better solution than changing the code.
403481082,12169,Chocobo1,2020-04-04T15:15:20Z,">Maybe some historical reason? 

Definitely some history in there, but I don't recall the details.

I'm not really sure what you guys are asking... about the suggested changes [here](https://github.com/qbittorrent/qBittorrent/pull/12169#discussion_r402402428), I don't think it is future-proof. There is some theming work going on and that change won't fit well, it would be better to load the icons via `UIThemeManager`.

I would also suggest less changes to the .cpp code in this PR as it gets complicated and it is easy to overlook something. If changes to .cpp are required it would be best to do it in a follow-up PR."
403482223,12169,Mazino-Urek,2020-04-04T15:26:32Z,"@Chocobo1 Good point. I recommend unifying these icon in a single folder in future.
@thalieht I have found where `error.svg` is being used, by running following commands. How can we solve this now, following Mike's suggestion? 

```
grep -rnw -e 'error.svg'
transferlistfilterswidget.cpp:200:    errored->setData(Qt::DecorationRole, QIcon("":/icons/skin/error.svg""));
transferlistmodel.cpp:754:    static QIcon cached = QIcon("":/icons/skin/error.svg"");

```

```
grep -rnw -e 'getIcon(""error"")'
transferlistfilterswidget.cpp:290:    errorTracker->setData(Qt::DecorationRole, UIThemeManager::instance()->getIcon(""error""));
```
"
403484809,12169,FranciscoPombal,2020-04-04T15:50:58Z,"@now-im

I would now recommend just focusing on the icons themselves for this PR. That's done and can be delivered.

If some icons keep strange names like ""document-edit-verify"" or if they are split across folders seemingly arbitrarily, that's something for another issue report/PR in the future, separate from this one."
403485163,12169,Mazino-Urek,2020-04-04T15:54:23Z,@FranciscoPombal I just want to fix just `error.svg` icon issue. With that this PR will be complete. 
403497512,12169,thalieht,2020-04-04T17:55:46Z,"I have not been following the theming PRs so i don't know how they will play out. I think @Chocobo1 is right. Better keep changes in .cpp to a minimum in this PR (any renamed icons) and if i'm not mistaken this is the only thing remaining. Keep the new icons in the PR but undo any changes in this line, this has been a problem for a long time so i suppose it doesn't matter if it stays a little more.

Such GUI changes have to go through @sledgehammer999 but he is busy most of the time so i hope you won't be discouraged if it takes a while. 
Thanks for all this work."
403497961,12169,Mazino-Urek,2020-04-04T18:00:21Z,@thalieht I haven't changed anything in .cpp file regarding `error.svg`. I just shifted it from `skin` folder to `qbt-theme`. What should I do now?
403499527,12169,thalieht,2020-04-04T18:13:35Z,"Change this line back and put it back in `skin` because as you said, it breaks the icon in other places."
403499627,12169,thalieht,2020-04-04T18:14:21Z,You should probably also revert the change a few lines below for the warning icon.
403501517,12169,Mazino-Urek,2020-04-04T18:32:37Z,@thalieht Reverted changes.
689845008,15330,thalieht,2021-08-16T20:41:11Z,"The previous one was ok (What is the problem) but if you want to change it, you shouldn't address the reporter directly."
689845364,15330,thalieht,2021-08-16T20:41:46Z,false
689847028,15330,thalieht,2021-08-16T20:44:37Z,"I don't know if this will be visible in the posted issue. If it is, i would remove it completely but if it isn't (and you insist on keeping it) i would make it more formal: 
""Thank you for taking the time to fill out this report.""
"
689850410,15330,sakkamade,2021-08-16T20:50:15Z,Should be `false` here.
689850955,15330,thalieht,2021-08-16T20:51:12Z,"The titles from the previous template were adequate IMO: ""Suggestion"" ""Use case"" and ""Extra info/examples/attachments""."
689850995,15330,sakkamade,2021-08-16T20:51:16Z,And in `Browser name and version`
689852036,15330,sakkamade,2021-08-16T20:53:05Z,"Otherwise add the `value` property after `description` with the `(Linux OS Only)`.

EDIT: You may also remove the `description`, in this case."
689852074,15330,thalieht,2021-08-16T20:53:08Z,"You forgot to re-add this part:
See [this wiki page](https://github.com/qbittorrent/qBittorrent/wiki/Frequently-Asked-Questions#Where_does_qBittorrent_save_its_settings) if you're not sure where to find them."
689854507,15330,sakkamade,2021-08-16T20:57:26Z,"> I don't know if this will be visible in the posted issue

No, it is not, ~~not the first one at the least.~~
~~The `###` is superfluous.~~ No, it is not, sorry.

> ""Thank you for taking the time to fill out this report.""

:+1: "
690017945,15330,Chocobo1,2021-08-17T04:05:46Z,"I would take off the period of the label/title, especially when the label is followed by an input box.
The period looks ok in description though."
690019143,15330,Chocobo1,2021-08-17T04:09:48Z,"This shouldn't be ""Linux OS Only""."
690019895,15330,Chocobo1,2021-08-17T04:12:15Z,"A single line input box for 2 version strings? IMO the result would look bad, you should use `textarea` instead.
Please check other input fields."
690020095,15330,Chocobo1,2021-08-17T04:13:03Z,"If it is ""WebUI related Only"", then this should be `false`."
690020591,15330,Chocobo1,2021-08-17T04:14:42Z,"Too many bold text and full uppercase words makes it hard to read (it looks like written by an edgy kid and put me off), please refrain from using it or use it scarcely.

The same applies to other labels."
690021695,15330,Chocobo1,2021-08-17T04:18:29Z,No need for parentheses IMO.
690021924,15330,Chocobo1,2021-08-17T04:19:22Z,No need for brackets
690022508,15330,Chocobo1,2021-08-17T04:21:21Z,"I would prefer it is `false`.
From my experience, it rarely help resolving issues."
690024381,15330,Chocobo1,2021-08-17T04:27:48Z,"About the EOL versions, I would state it as:
""We do not support any versions older than the current release series""
This is to avoid mentioning exact numbers which calls for regular maintenance for it.
"
690027969,15330,Chocobo1,2021-08-17T04:39:18Z,Too much indent. Please check the indentation of the file thoroughly.
690035798,15330,glassez,2021-08-17T05:00:50Z,">A single line input box for 2 version strings? IMO the result would look bad, you should use `textarea` instead.

Why not separate input boxes?"
690224254,15330,xavier2k6,2021-08-17T10:05:05Z,">If on Linux, libtorrent-rasterbar and Qt versions

This is what we use currently?

If I merge some of the `input` fields......in to one `text` field

Will -> qBittorrent/Qt/libtorrent-rasterbar versions and Operating system. suffice?"
690224959,15330,xavier2k6,2021-08-17T10:06:06Z,This `input` has been previously requested to be completely removed....
690229156,15330,xavier2k6,2021-08-17T10:12:09Z,"It's not visible & I don't insist on keeping any of it - just added it in as other repos use similar.
I will remove."
690229335,15330,xavier2k6,2021-08-17T10:12:24Z,will address
690229579,15330,xavier2k6,2021-08-17T10:12:47Z,will address
690473996,15330,xavier2k6,2021-08-17T15:18:18Z,What is the problem being experienced?
690475990,15330,xavier2k6,2021-08-17T15:20:31Z,">or **3rd party/forked versions** e.g. `portableapps`/`Enhanced Edition`etc.

Any issues with this? (un-bolded)"
690477683,15330,xavier2k6,2021-08-17T15:22:17Z,">Too many bold text and full uppercase words makes it hard to read (it looks like written by an edgy kid and put me off), please refrain from using it or use it scarcely.

The same applies to other labels.

Most of the bold text words are just a copy&paste of our current template"
690478031,15330,xavier2k6,2021-08-17T15:22:40Z,this section is being removed
690478348,15330,xavier2k6,2021-08-17T15:22:56Z,will address
690478518,15330,xavier2k6,2021-08-17T15:23:08Z,ok
690478787,15330,xavier2k6,2021-08-17T15:23:28Z,ok
690482748,15330,xavier2k6,2021-08-17T15:27:53Z,">Will -> qBittorrent/Qt/libtorrent-rasterbar versions and Operating system. suffice?

example of `textarea` with a placeholder:
![textarea with placeholder](https://user-images.githubusercontent.com/42386382/129755037-9c3bffdd-b510-4dbe-aaec-b3ceb812dd85.png)

"
690746578,15330,xavier2k6,2021-08-17T21:48:01Z,Fixed.
690781638,15330,sakkamade,2021-08-17T23:06:33Z,`What problem is being experienced?`
690782324,15330,sakkamade,2021-08-17T23:08:18Z,"User should not be addressed, right?

`(...) description of expected behaviour.`"
690788670,15330,sakkamade,2021-08-17T23:24:28Z,"`Please add the ""crash report"" (if encountered) or provide a clear and concise description of the problem.`"
690789364,15330,sakkamade,2021-08-17T23:26:34Z,"Vocabulary should be constant I think, i.e. if there has already been used the word ""problem"", it should be kept being used.
```
A screenshots, screencasts, etc. 
(Anything that will provide more detailed description of the problem.)
```"
690790889,15330,sakkamade,2021-08-17T23:30:53Z,`Please provide a reliable steps to reproduce the problem.`
690794015,15330,sakkamade,2021-08-17T23:39:30Z,"`(...) See [""Where does qBittorrent save its settings""](link).`"
690794299,15330,sakkamade,2021-08-17T23:40:22Z,Periods are still left. in several labels.
690800730,15330,thalieht,2021-08-17T23:58:22Z,"The reporter should know that this is not required, like the 3rd checkbox (optional)."
690819884,15330,thalieht,2021-08-18T00:45:19Z,"This section bugs me. You are forcing the reporter to unconditionally mention Qt and libtorrent versions but if they're on Windows, there's a 99% chance it's whatever the official release uses. So i would move Qt/libt to description:
""If (you are) on linux, mention your libtorrent-rasterbar and Qt version.""

I would prefer it if there was no placeholder text in this section so that the reporter can format it however they want but i don't insist on this as it is purely personal preference."
690820354,15330,thalieht,2021-08-18T00:47:02Z,">User should not be addressed, right?

I think it's ok in the description because only the reporter can see this."
690822714,15330,thalieht,2021-08-18T00:54:10Z,Is this section really required to be filled? I would even question its usefulness because it's (almost?) always the opposite of the problem.
690823329,15330,thalieht,2021-08-18T00:55:56Z,"Typo: extra ""a"" before concise.

Personal opinion: ""Suggestion"" and ""Use case"" don't need a description."
690826536,15330,thalieht,2021-08-18T01:06:42Z,"""Operating System & qBittorrent""
I would also re-arrange these so qBittorrent comes first."
690861599,15330,Chocobo1,2021-08-18T02:54:27Z,"Wrong indention: missing one whitespace.
You can use [this tool](https://prettier.io/playground/#N4Igxg9gdgLgprEAuEUCGBbOSAEAhAVwHMcAlOABwgCcYAdKAEzgGcxqBLCmD6XAMQ4AbODjQ4ARsRzVKNGDhgQcACzhCKODhgrUIAN1EBHPBxhLqs2DgIs41HHAAeFexwRg4AOgYSIjAE8kBhwcAFpFANdcDDRqAGtGCAB3KBDQsXNOKXgWYKgM0P00IQJsHAAfdMKAYjqanABBABEANQBJAGUAeVIATWrCuhAAdVEknCgIBRYCCipaMSgAnENqFl4oFhwIIWYHGBU0AsPRMAJLBAVZETQ7HDtOVmGdhwBmakYcCjiYAIB6ABmNHicC+aw20G23iIXhwAAMFjA0BJbvMWPD-vCAKJQI5QTxfbGMMybeFwGBgHwFQqhdoKDjbU4yVhULYcCTCMwrCCAxRqGyPRTKABUItkjDQYAUxxWdnZPEMWigwOosR40DFypwQggRBY-0gKo4JEBwlY1NpoXSET+0RwYDUYHificzxpoTQWQ5BFy+StQhR6lwAAVZLIjARGWZ3VbmGxONxNrgqh7CgAVZTUAgiHa+5XFIQcL6M2asAA0DugZrVSy+jrgzscUpUOygol5-NEEajEodTpdEDdLEttIgSah-tpEUDEmDOHaqjQStkaC+zLFpbKLKRHCgJDs0s2Wr3XZwAG0jTBsr69yQiFHmEX2ywALoAChU5goeX+-yIZgqAQEheJAGD-EYnLmDQVgwBBpjQZcsD-KiEASP8sQsPA1D-AAwt0ABy6akO0eAAKrpu0BEAOJeBgjAAJSViwyiLvEUzJKoKTCg8wEYGYYg4EQED+JI0iyEiODJIBZ49hwfZ7qq6qbKOVpyRKuDXmUgyhDOQZCLgi5HEqawcGaYL8l6Z6biwZZaNsUwKGabpfMcJbbBJeiMAQYAciIJ4nAKYrnoGuQKBCmwfl+MA-kgf7JAlXiQWYFiwV4NBEP8SSpLqa5eBQKgUAxXhijpGTqWCmnZnAZV6XOBk4O+44augQhidcjYQBgWBMGCDELkuJluOZ65HAoG4iluoiMpM0w4M5FlufZO5eT5flwAF1kiiFXqsAouGLlIwiMFF36-v+gHAaBXUQVBqVXPBKUwQ9UotQayQgoCurJAavleAEmBCAA-JG9gBAAvBI1DHI6ACkbyNJh2EANRwIYsDw40FC2CoxWlWmhQVYwuCAiUdi1Tq+mGYNohig2zoWcy56Aj2D1gRg0D2WW2xFlhp0xedAGHFdYG3U9SFwSY4uwf8ugQAAVo2MAGgATAxWpLWKdhxA2jBasyU2KNDDMOKqDzaMIcRiSQEnyNs757mApQkvuDq6nYXzQKw-VikoYj6BAxbfBAWF3oJ3kUEWYC7SVIplaERNVdpBPhJT9W4OmKgzbbiwzWKjmCbM8zyCyoNYa8OBly1YqVn4hw7HyyRZ46YiyJIFLYbxMZfGbcCAfYZ7niSbC2JCWwPErkWfmdcUXcLIGi8liEy1Ly8PcP5y2ZsLBMReqoEBg-OxX+kH7xgI4sFn8QcF4QH-LvNAXrMUNgiSMBH+dCXJF4Epv9d4E4VXvdZCxUcCZ1EOeaS18P6zyFkBBeN0l7AMlghZB-woEcH6iSL4BcrxoFPOIWYZgUS5hYqUFqjh+7UFUrSRORtk5WjqvOIyy5RDIlBAURyHY+QTXfC0DoPR+jqxFDgAAZFoPkNw0bHHGsoQ2j8zJiBYKCL4EgVjiF9nATAOAsAYDnNQLU0khBtTXKNUQdhzB3m2GaXMS1dREHfDvbUE0AAyeptjiIsTwfc1jzSOOERPI8nMrLMjrkoDADdZJyFoHCTocAIGHBmhg74aAiBwBgX+OBItEF3WeshIBeS4IYP+PwVmsAhABDCI0ZRYIwgAEUyihyhDUEYahZAAH0kisHaQUiW7SWCsPaWYFg-SO5WP6oogIEACAAHI24F1mG3Ju9g2HKDNEwLsGAaGEzgJGeSlV5pkxqmkGktoojlHgE4ZEq5BhemvD6P0ZVZzzm6K4aG3iSCdACFhOAETxG9Ngjgf4OA6kKGBUWCQyCwjQx+dQCQVsIpQjKvGdgXAWqhluPcFgrhfKAhWJM6ZrdRC2DDm8FWYQEIVwAGwABYKVmG2d8QMngVC7H2CmeOldUGFNwDSrwbwvAAHYcBOFpZy0FuAACsXgACM0qVacohVCmF2F4XUFwDKrwKtZU0s5d0TouARh7mytsGVAAGHAYZlAqxlQACRlf8FWZqzUAE4RVirTIWYsXpt5TnKrs3sBytLHJtJEe0lzrlaNud6HIrA-UZGeQ1VpVkZrMjlqiX57cw7ODee4AkYIgbItYKiicUAMVaPuKYnAwx2B3FbDnegIBGqKI8NM2AKzGIVwAkqcQTstEOCWkaXy9wUWJgoZ2UJxB-hTRoV6yUb142l0DcTehIbTlhouc4SNaBo33NjXkJ5VMcCdHgD+Hinl-A+W8EWhMaLkyWsxaIZIJR4iCn5HoYgrYBLSXrr224A6NlDsZOMYtY6VJlUjlKOArK9j2A5SnUImqcCCHWDMU9nLtXHs6hsn5FBOUCrrA8ZQ0AvCkcGHOn1k4dJ0NJkIcmJzdIbs0luuIUa0x3JvI8lOibDVjWWsyHNSsLJzmMrwaghaU6jrvXwB9FbRDdtEH+-thGgMjtA9JgonYm5WSmQQRwLghPrmUEceYCBZ0lG9Qu6jAb9kruDQwUNdpN1XNYzu9jMbfRxsPenJojA36bBKFWdtVzGVSdLbgRofmHjsHiVsVlytHCUjhHw5YiTXaHCskYtqCm30czbleLdYg-D5gNrZbcumiWOAJG27Cd4ACEDFyMWfnb66zeyNKHLo2uxjTnmMuZue5vdnmD3caPW4kgnixk+Pmn4neoX1Phdk3cRTUXmReKsTN2xGyrKYvGgKDm5dZCeGsPY2J8SLyJO2Mkn4aSMlz3gf-MWa98ncolugjg18SllJgBUqpNTGD1MaW9FpbS4CdIgN0gFVx+mDOGaMyxPiJl8l03M0QCyLhPtBzxdZZitlNaLC1qjBMaNHIYCAcsIBmrb2QKAOIehkghlY1sZAIASjPu+eTkAUMpSghgJ0H4vl9zIGDRT35c4-NghcccB8qS4D8BoOqD5LO0C+ggJzr8GAhCtJjNiqDcSFQcH0NyFnYBbKc73I8GAYZUmxGQLRuwFP5YsCcHgY2vPOiYDgC4vccA7dHMd87zod4RANOmL7pA9u4AU5+OsewLOAaa857oPcMAjWMEOMgAAHGa6Peg7AjGhhQFnuhWD2EMJzyMYerU-mVywMI7YwRgk5xVa3RBbcR-9yAOw-FhfVQpxsfcIeCBh7911inyIJBp4z0gFW4-oZcn3LhLq7eQCsElZz2wcB0wohYKPh3IB9BlHaL1WAnQS0wEaEwE9AQRB77gAAX3v0AA) to format the entire file (and feature_request.yml)."
690862241,15330,Chocobo1,2021-08-18T02:56:18Z,"In Prerequisites section there are still too many text in bold, I would remove bold from all of them."
690865588,15330,Chocobo1,2021-08-18T03:06:43Z,"I suppose this could just become `qBittorrent & operating system versions` and mention the version requirements in the description:
```
- type: textarea
  attributes:
    label: qBittorrent & operating system versions
    description: |
      Qt and libtorrent-rasterbar versions are required when: 1. You are using linux. 2. You are not using an official build downloaded from our website.
      Example: 
        qBittorrent: 4.3.7 x64
        Operating system: Windows 10 Pro 21H1/2009 x64
        Qt: 5.15.2
        libtorrent-rasterbar: 1.2.14
    value: |
      qBittorrent:
      Operating system:
      Qt:
      libtorrent-rasterbar:
```

Some notes:
* I would prefer prefill the textarea to have consistent formatting.
* Theoretically 32, 64-Bit shouldn't make a difference and since we are slowly moving away from 32-bit, I suggest omitting it in description.
"
690869409,15330,Chocobo1,2021-08-18T03:17:48Z,Add an empty line above please.
690878049,15330,Chocobo1,2021-08-18T03:45:42Z,The above 2 lines should have the same indent level as `#### ADVISORY`.
698432044,15330,xavier2k6,2021-08-30T12:10:37Z,Thank you for the tool
698433850,15330,xavier2k6,2021-08-30T12:13:22Z,">I would prefer prefill the textarea to have consistent formatting.

Just a note on this, If it was prefilled - it would invalidate the true/false requirement.

We could be left with just:
      qBittorrent:
      Operating system:
      Qt:
      libtorrent-rasterbar:

I added a comment in description about how we would like it formatted & added them as a placeholder instead."
698608572,15330,thalieht,2021-08-30T15:56:44Z,"I would change ""qBittorrent.ini"" to ""qBittorrent settings|config|preferences file"" (pick one) because it's not "".ini"" in linux, it's "".conf"" (maybe mac too idk).

Why split the above checkbox from this one? Seems superfluous."
698611821,15330,thalieht,2021-08-30T16:01:04Z,"Honestly i'm not a fan of the creation of a whole section for what should be 1 checkbox (more scrolling...). Who's ever going to check more than one of the CI test builds anyway? And if you say it's for our convenience, it's totally not. We'll know which CI build they tested by the user's OS. In the end, i doubt we even care which OS they tested it on."
698641447,15330,ArcticGems,2021-08-30T16:42:39Z,"Hmm, that makes sense. Maybe 'Optional prerequisites' section should be removed."
698643807,15330,ArcticGems,2021-08-30T16:45:57Z,"Maybe=
qBittorrent settings file (.ini/.conf/.idk)"
698662947,15330,xavier2k6,2021-08-30T17:14:20Z,">Honestly i'm not a fan of the creation of a whole section for what should be 1 checkbox (more scrolling...). Who's ever going to check more than one of the CI test builds anyway? And if you say it's for our convenience, it's totally not. We'll know which CI build they tested by the user's OS. In the end, i doubt we even care which OS they tested it on.

I only included it in to it's own section as we had already asked about the CI builds, since we now have segregated OS builds & to separate mandatory/optional.

ref.:
> - [ ] (optional but recommended) I have verified that the **issue is not fixed and is reproducible** in the **[latest CI build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci.yaml?query=branch%3Amaster+event%3Apush)**
____

I agree with general consensus to remove 'Optional prerequisites' section & I will include the CI builds with the ""official qBittorrent version""

Example:
>I have verified that the issue is not fixed and is reproducible in the **[latest official qBittorrent version](https://www.qbittorrent.org/download.php)** or in any of the relevant **[latest CI macOS build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)**/**[latest CI Ubuntu build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)**/**[latest CI Windows build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush).**

@thalieht Is this ok with you?"
698667213,15330,xavier2k6,2021-08-30T17:21:00Z,">Why split the above checkbox from this one? Seems superfluous.

Will integrate.

>I would change ""qBittorrent.ini"" to ""qBittorrent settings|config|preferences file"" (pick one) because it's not "".ini"" in linux, it's "".conf"" (maybe mac too idk).

I will choose **qBittorrent preferences** as that's what's used if you follow [Where does qBittorrent save its settings?](https://github.com/qbittorrent/qBittorrent/wiki/Frequently-Asked-Questions#Where_does_qBittorrent_save_its_settings)

Example:
>I understand that it is the responsibility of the user to **redact any sensitive information** in log(s)/config file(s) & if relevant to issue/when asked, I must provide these files: **qBittorrent preferences file**/**qBittorrent.log** and **watched_folders.json** (if using ""Watched Folders"" feature). See **[Where does qBittorrent save its settings?](https://github.com/qbittorrent/qBittorrent/wiki/Frequently-Asked-Questions#Where_does_qBittorrent_save_its_settings)**

Will also change description under Log(s) & settings file(s) to reflect same."
698734475,15330,ArcticGems,2021-08-30T19:05:05Z,"> I have verified that the issue is not fixed and is reproducible in the **[latest official qBittorrent version](https://www.qbittorrent.org/download.php)** or in any of the relevant **[latest CI macOS build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)**/**[latest CI Ubuntu build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)**/**[latest CI Windows build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush).**
> 

I think the last part is a bit of a mouthful. How about this?? =

> 
> I have verified that the issue is not fixed and is reproducible in the **[latest official qBittorrent version](https://www.qbittorrent.org/download.php)** or in any of the relevant latest CI builds  (**[macOS build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)**/**[Ubuntu build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)**/**[Windows build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush)**).
"
698755339,15330,xavier2k6,2021-08-30T19:38:45Z,">I think the last part is a bit of a mouthful. How about this?? =

> 
> I have verified that the issue is not fixed and is reproducible in the **[latest official qBittorrent version](https://www.qbittorrent.org/download.php)** or in any of the relevant latest CI builds  (**[macOS build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)**/**[Ubuntu build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)**/**[Windows build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush)**).

Ya, I'll go with this unless there's any objections from others.

Thanks @ArcticGems"
698780820,15330,thalieht,2021-08-30T20:20:45Z,">& to separate mandatory/optional.

There was nothing wrong with them being mixed since the optional one was denoted as such (maybe it's just me).

>& I will include the CI builds with the ""official qBittorrent version""
>
>Example:
>
>>    I have verified that the issue is not fixed and is reproducible in the latest official qBittorrent version or in any of the relevant latest CI macOS build/latest CI Ubuntu build/latest CI Windows build.

That would make testing the CI builds mandatory. Are we ok with that? I think it's too much but no strong opinion from me.
If you go with that here's a shorter version (with spaces around the slashes to make it clear they are separate links):
>I have verified that the issue is not fixed and is reproducible in the latest official qBittorrent version or in the latest CI build (macOS / Ubuntu / Windows).

>

"
698797603,15330,ArcticGems,2021-08-30T20:48:18Z,"Maybe we should go back to the old one (but updated) =
> 
> * [ ]  (optional but recommended) I have verified that the issue is not fixed and is reproducible in the relevant latest CI build  (**[macOS build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)**/**[Ubuntu build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)**/**[Windows build](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush)**).

I chose to keep ""build"" (thalieht chosed to remove it) because I feel it's more clear."
698843626,15330,xavier2k6,2021-08-30T22:13:26Z,">There was nothing wrong with them being mixed since the optional one was denoted as such (maybe it's just me).

I don't have any strong opinion on it either

>Maybe we should go back to the old one (but updated) =

What about one of these? (marked as not needing validation, of course!)

Unless anybody else thinks testing the master CI builds should be mandatory.....

1. * [ ]  (optional but recommended) I have verified that the issue is not fixed and is reproducible in the latest CI (**[macOS](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)** / **[Ubuntu](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)** / **[Windows](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush)**) ""master"" builds.

2. * [ ]  (optional but recommended) I have verified that the issue is not fixed and is reproducible in the latest ""master"" CI (**[macOS](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)** / **[Ubuntu](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)** / **[Windows](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush)**) builds.

Will do same for ""feature request"""
698847389,15330,ArcticGems,2021-08-30T22:21:39Z,"> 
> What about this? (marked as not needing validation, of course!)
> 
>  >   1. * [ ]   (optional but recommended) I have verified that the issue is not fixed and is reproducible in the latest CI (**[macOS](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)** / **[Ubuntu](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)** / **[Windows](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush)**) ""master"" builds.
> >
>  >   2. * [ ]   (optional but recommended) I have verified that the issue is not fixed and is reproducible in the latest ""master"" CI (**[macOS](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_macos.yaml?query=branch%3Amaster+event%3Apush)** / **[Ubuntu](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_ubuntu.yaml?query=branch%3Amaster+event%3Apush)** / **[Windows](https://github.com/qbittorrent/qBittorrent/actions/workflows/ci_windows.yaml?query=branch%3Amaster+event%3Apush)**) builds.

It's also good 👍  

Not sure which one is better, nr 1 or 2.

Let's see what the others think.

"
698856948,15330,xavier2k6,2021-08-30T22:43:35Z,"I will also change the title from ""Mandatory prerequisites"" to just ""Prerequisites"" if we are going to go back & include the (optional but recommended) part."
698857505,15330,ArcticGems,2021-08-30T22:45:01Z,"> 
> 
> I will also change the title from ""Mandatory prerequisites"" to just ""Prerequisites"" if we are going to go back & include the (optional but recommended) part.

 👍 "
698941146,15330,glassez,2021-08-31T02:43:12Z,">What about one of these?

IMO, ""master"" has no meaning for regular users."
698971585,15330,Chocobo1,2021-08-31T04:22:49Z,"Maybe just me, if it is really necessary, I would use code blocks instead of bold text for ""`qBittorrent preferences file`/`qBittorrent.log` and `watched_folders.json`"""
699166801,15330,xavier2k6,2021-08-31T09:53:24Z,"> IMO, ""master"" has no meaning for regular users.

Will omit."
699169797,15330,xavier2k6,2021-08-31T09:57:13Z,"It's not 100% necessary but It's a clearer visual (to me anyway) of what files are required, code blocks work too.

I can omit any kind of formatting/highlighting on them if you prefer?"
699788918,15330,Chocobo1,2021-09-01T02:02:13Z,">I can omit any kind of formatting/highlighting on them if you prefer?

That will work for me too."
706868367,15330,thalieht,2021-09-12T17:28:16Z,"Very last comment from me (same for the feature request form):
```suggestion
        #### Note: It's the user's responsibility to redact any sensitive information
```"
706869127,15330,xavier2k6,2021-09-12T17:34:52Z,">Very last comment from me (same for the feature request form):

It's not in feature request section?!

>#### Note: It's the user's responsibility to redact any sensitive information

will change"
706870871,15330,xavier2k6,2021-09-12T17:50:18Z,@thalieht done (bug_report)
706871704,15330,thalieht,2021-09-12T17:56:34Z,">It's not in feature request section?!

Oops, don't know what i was looking at, sorry."
706872086,15330,ArcticGems,2021-09-12T17:59:23Z,"Just a nitpick (you don't have to do it).

Maybe the 'Extra info/examples/attachments' section in feature_request.yml should also have =

Note: It's the user's responsibility to redact any sensitive information"
706882122,15330,xavier2k6,2021-09-12T19:27:37Z,"@ArcticGems IMO I don't think it's really required as more than likely it'll be screenshots, links or a wall of text of what the user wants......... but of course that doesn't mean I won't add it or am objecting it, if others also think it's a good idea to do so - it can even be added in the future if really required."
706982212,15330,Chocobo1,2021-09-13T03:33:57Z,"@xavier2k6 @thalieht 
Is this comment still valid?"
707119241,15330,xavier2k6,2021-09-13T08:34:16Z,">Is this comment still valid?

Good catch!

Looks like I overlooked this, I will remove the descriptions completely instead of just the typo unless anybody else feels they should stay?! (I have no strong opinion either way)"
707170615,15330,xavier2k6,2021-09-13T09:39:21Z,descriptions removed.
707171357,15330,xavier2k6,2021-09-13T09:40:15Z,all issues addressed I believe.
707171630,15330,xavier2k6,2021-09-13T09:40:36Z,addressed.
707172616,15330,xavier2k6,2021-09-13T09:41:51Z,section was removed.
707173141,15330,xavier2k6,2021-09-13T09:42:29Z,it was removed.
707173360,15330,xavier2k6,2021-09-13T09:42:44Z,changed
707174063,15330,xavier2k6,2021-09-13T09:43:41Z,Used original (What is the problem?)
707174671,15330,xavier2k6,2021-09-13T09:44:29Z,applied different approach
707175876,15330,xavier2k6,2021-09-13T09:46:07Z,section removed.
99532527,6186,zeule,2017-02-06T08:09:08Z,Why don't we put `= default` here and in `GuiProvider`?
99532784,6186,zeule,2017-02-06T08:10:51Z,`QFlags<ThemeFlags>`?
99533003,6186,zeule,2017-02-06T08:12:35Z,"There should be only one from each pair (Dark or Light, Large or Small), because one can not have both set or cleared at a time."
99534185,6186,zeule,2017-02-06T08:22:03Z,Why on every icon request? Why don't you handle `QEvent::PaletteChange`?
99534794,6186,zeule,2017-02-06T08:27:06Z,what was that?
99535204,6186,zeule,2017-02-06T08:30:10Z,Here and the next line: why don't you use default parameters for the method in line 71? 
99550745,6186,zeule,2017-02-06T10:02:39Z,"I find this flag and setting name misleading. To me this mode produces border-less or, perhaps, expanded icons."
99551277,6186,zeule,2017-02-06T10:04:36Z,"Could you put `Qlatin1String(""literal"")` here and below, please?"
99551722,6186,zeule,2017-02-06T10:06:49Z,This seems to be error-prone to me (the reference). I would merge this line into the next one.
99554306,6186,zeule,2017-02-06T10:20:25Z,"Don't like this API. And don't like the fact that our icons are split onto two parts while they naturally form the single theme. UNIX users would benefit from merging them together and distributing them as individual files but not resources. Perhaps we better merge these icons into the main theme right away (for instance into a subdir ""status"", as per FDO specification)? Because the proposed API looks like it allows to mix icons from different themes, which shall not happen and certainly may not be encouraged by an API. "
99554389,6186,zeule,2017-02-06T10:20:51Z,`= default` too?
99560745,6186,zeule,2017-02-06T10:54:14Z,Your changes seem to need a rebasing on top of the current master (the signature of this function is old).
99561247,6186,zeule,2017-02-06T10:57:02Z,Alphabetical order?
99562003,6186,zeule,2017-02-06T11:01:42Z,You are adding a bunch of libtorrent headers for the sake of what? Those static functions below do not need access to the private members of the class. Then why?
99747234,6186,magao,2017-02-07T05:18:08Z,I don't understand. This was just a reformatting via uncrustify. Same for other places you've mentioned this.
99747488,6186,magao,2017-02-07T05:22:00Z,"I wasn't intending to change the file layout at all, but there is already a `src/icons/flags/` directory, so there's precedence for doing this.

@sledgehammer999 Do you want me to reorganise so there's a `src/icons/status/` directory?"
99747659,6186,magao,2017-02-07T05:24:44Z,"This was after rebasing, and I didn't see any changes. Will become moot if @sledgehammer999 wants me to reorganise the icon hierarchy."
99747839,6186,magao,2017-02-07T05:26:56Z,"Because that's how the dark theme was detected previously, and I simply extended it. Didn't know about `QEvent::PaletteChange` - I tried to find some event that would indicate a theme change but didn't know what to look for.

Now I'll see about hooking into it."
99747978,6186,magao,2017-02-07T05:28:44Z,"Reference to `pixmap` which may be reassigned to `colored` below, rather than unnecessarily copying objects. But I think I messed it up as `colored` goes out of scope ..."
99748003,6186,magao,2017-02-07T05:28:58Z,~~Yep.~~ Not exactly. I needed to be able to distinguish between not yet knowing the theme or icon size. But if I can hook into the events (configure does it for the icon size) then that's not an issue.
99748032,6186,magao,2017-02-07T05:29:18Z,"Again, didn't know what to look for. Thanks."
99748175,6186,magao,2017-02-07T05:31:03Z,"The visible part of the icon is larger. Everything that is removed is transparent.

@sledgehammer999 Your opinion? How would you like the setting named?"
99748689,6186,magao,2017-02-07T05:37:12Z,"Because the 2 functions need to call the third with different `ignoreState` flags. I could consolidate down to 2 functions, but that's allowing an implementation detail to intrude into the public API.

This is a part of the API I've struggled with. I don't want to add an ""not applicable"" entry to the `TorrentState` enum, since that's not actually a state. But that means that I don't have a way to say that the icon doesn't actually correspond to a state (required for the `All` filter). Hence the 2 public functions calling the private function."
99749199,6186,magao,2017-02-07T05:43:28Z,"What's the advantage? It's still going to then be copied to a new `QString` to be returned, so there's no efficiency advantage.

Returning a `QLatin1String` would be incorrect since the `const char *` used to construct it isn't copied - unless we made the literals constants (in which case we could return a `const QString &`). Hmm - could also do that for the colours below."
99749349,6186,magao,2017-02-07T05:44:57Z,I did that initially but found it to be too complicated. But I thought I'd removed the `&overrideIcon` here as I don't think I use it anymore ... let me check.
99749484,6186,magao,2017-02-07T05:46:33Z,So that `BitTorrent::TorrentState` is a complete type. But I could get around that by the parameter instead being `const BitTorrent::TorrentState &` - then a forward declaration would be enough. Because `TorrentState` isn't actually an enum as I just realised ...
99749696,6186,magao,2017-02-07T05:49:13Z,https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#8-header-inclusion-order
99749732,6186,magao,2017-02-07T05:49:40Z,Oh - `<QList>` is out of order - is that what you meant?
99753709,6186,magao,2017-02-07T06:34:07Z,And I introduced a bug when I fixed up the `#ifdef` stuff so it didn't resize ...
99756353,6186,magao,2017-02-07T07:04:41Z,"Not sure how to hook it. `GuiIconProvider` doesn't have a parent, so it doesn't seem to receive events.

I'm wondering if maybe `mainwindow` should notice `QEvent::ApplicationPaletteChange` and then forward it as a `Preferences::changed()` signal - or maybe a new `Preferences::themeChanged` signal."
99765259,6186,zeule,2017-02-07T08:19:28Z,"Oh, yes! Pardon me, I forgot about the `All` case and overlooked this in the code. Thank you for the explanation."
99786121,6186,zeule,2017-02-07T10:11:51Z,"My bad, this is another function. "
99789637,6186,zeule,2017-02-07T10:28:40Z,I would catch that event in the application object. Like the `Preferences::themeChanged` signal.
99789829,6186,zeule,2017-02-07T10:29:45Z,"You use a reference to a temporary object, returned from `getIconId()`, don't you? "
99789955,6186,zeule,2017-02-07T10:30:22Z,Yep.
99795155,6186,zeule,2017-02-07T10:58:09Z,"> which may be reassigned to colored below, rather than unnecessarily copying objects. 

This is wrong in C++. One needs a pointer for this kind of things."
99795957,6186,zeule,2017-02-07T11:02:08Z,"I was wondering are these function need to be in the class interface. BTW, you may make `TorrentState` an `enum class` with explicit underlying type and then forward declare it, eliminating the include."
99797466,6186,zeule,2017-02-07T11:10:02Z,"`QString` constructor converts literals from UTF-8, while via `Qlatin1String` we specify that the literal is in Latin1 encoding, which is more efficient. When we drop Qt4, we will replace those with `QLatin1Literal`, which will be even more memory efficient."
99797623,6186,zeule,2017-02-07T11:10:55Z,OK then.
99797896,6186,zeule,2017-02-07T11:12:36Z,"Yes, I understand this. But, you know, a ""larger"" is pointing to enlarging the object but not changing its internal structure."
99798973,6186,zeule,2017-02-07T11:18:46Z,"BTW, a C++-ish approach to this would be the following:
```C++
struct FuncArgs {
  FuncArgs() {
  // set defaults
  }
  FuncArgs& arg1(Type1 val) {
   m_val1 = val;
   return *this;
  }

  FuncArgs& arg2(Type2 val) {
   m_val2 = val;
   return *this;
  }

private:
    Type1 m_val1;
    Type2 m_val2;
};

void func(const FuncArgs& args = FuncArgs());

func();
func(FuncArgs().arg1(val).arg2(val2));
```"
99924363,6186,magao,2017-02-07T20:44:39Z,"Yes - as I updated my comment, I messed this up. A reference is actually usable for it - the problem was referencing (or pointing to) an object that went out of scope ... I've fixed this in my not-yet-pushed version."
99926794,6186,magao,2017-02-07T20:55:48Z,"I've gone with the approach of making the literals `static const QLatin1String` and I can then return a `const QLatin1String &` reference. That could open up other optimisations such as having `GuiIconProvider::getStatusIcon` take a `const QLatin1String &`, but then it would still need to be converted to `QString` internally (can't store `QLatin1String` in a hash as the `const char *` isn't copied). Need to think about this some more."
99927113,6186,magao,2017-02-07T20:57:13Z,"My current prototype does that, except it's caught in `MainWindow::event()` which already existed."
99927384,6186,magao,2017-02-07T20:58:35Z,`overrideIconId` is gone.
99927986,6186,magao,2017-02-07T21:01:33Z,I see what you mean though - c++11 `= default`. Still catching up on c++11 - much of this stuff wasn't around last time I used c++ (~10 years ago). And it's been over 20 years since I hung around on comp.std.c++ :)
99929384,6186,zeule,2017-02-07T21:08:23Z,"In C++ a reference can not be reassigned, that is what I wanted to say."
99937370,6186,magao,2017-02-07T21:44:50Z,"Yes - now I think about it further, which I think was happening is that `operator=()` was being called (hence safe, but no performance advantage).

So many potential gotchas in C++ - it's no wonder I prefer python these days :)"
99982764,6186,Chocobo1,2017-02-08T02:57:03Z,">and I can then return a const QLatin1String & reference...

please don't over-complicate things...
returning QString is perfectly fine, either it will be optimized out by compiler RVO or it will just change QString internal pointer, either way no real copy will be performed (if not modified)."
99994303,6186,magao,2017-02-08T05:30:01Z,I'm not a fan of that approach - it makes the call sites messy. I think overloads make more sense in this case.
100032607,6186,zeule,2017-02-08T10:20:12Z,Had not found where this include is used in the code. Is it needed at all?
100068257,6186,zeule,2017-02-08T13:49:38Z,Unused
100068310,6186,zeule,2017-02-08T13:49:54Z,"`template <class T, class U> struct QPair;`"
100072636,6186,zeule,2017-02-08T14:10:28Z,Does this little tune really belong to the main options page? I would put it into the advanced page (where we have some icons-related settings already).
100073379,6186,zeule,2017-02-08T14:14:06Z,All these new includes are unneeded. You can forward declare these classes and move the includes into the .cpp file.
100074078,6186,zeule,2017-02-08T14:17:36Z,Unused
100165891,6186,magao,2017-02-08T20:47:08Z,Whoops - forgot to remove this.
100166897,6186,magao,2017-02-08T20:51:46Z,Leftover from my prototype.
100166995,6186,magao,2017-02-08T20:52:17Z,Leftover from my prototype.
100167301,6186,magao,2017-02-08T20:53:43Z,"I thought about that, but the transfer list UI options seemed like an obvious place for it. It's about as significant as hiding zero and infinity values IMO."
100171949,6186,magao,2017-02-08T21:16:11Z,"I was thinking that because they were being returned from functions they needed to be complete types. But you can declare functions which accept or return incomplete types. Rusty C++.

https://stackoverflow.com/questions/553682/when-can-i-use-a-forward-declaration"
165281005,8347,glassez,2018-02-01T08:01:23Z,Disagree. The reports about bugs in upstream are also important.
165340756,8347,FranciscoPombal,2018-02-01T12:22:35Z,"@glassez Ok, how about:
> **Report only if you can reproduce the issue with an official stable release, a beta release, or with the most recent upstream changes (in this last case specify the specific commit you are on).** Beta testing is encouraged :smile:."
165552043,8347,Chocobo1,2018-02-02T03:37:06Z,Please add bullet point (and maybe boldface) for section titles
165552094,8347,Chocobo1,2018-02-02T03:37:39Z,I would make it larger: `###`
165552385,8347,Chocobo1,2018-02-02T03:40:50Z,it's unusual for me to see semicolons here and below
165552811,8347,Chocobo1,2018-02-02T03:45:06Z,"no need for another level, just use 3 spaces for indention, as such:

- Asking for specific builds of qBittorrent not currently officially available;
   If you really ..."
165552926,8347,Chocobo1,2018-02-02T03:46:17Z,why insert 2 more spaces?
165553010,8347,Chocobo1,2018-02-02T03:47:10Z,too much empty lines here.
165553151,8347,Chocobo1,2018-02-02T03:48:56Z,the wiki & forum word can be a link for easier access.
165553378,8347,Chocobo1,2018-02-02T03:51:28Z,please add: update your network driver
165553418,8347,Chocobo1,2018-02-02T03:52:02Z,Capitalize?
165553533,8347,Chocobo1,2018-02-02T03:53:22Z,python word as a link
165553576,8347,Chocobo1,2018-02-02T03:53:54Z,And capitalize
165553609,8347,Chocobo1,2018-02-02T03:54:19Z,links please
165554079,8347,Chocobo1,2018-02-02T03:59:37Z,first sentence incomplete? 
165554230,8347,Chocobo1,2018-02-02T04:01:35Z,"There was a undocumented policy here: do not upload illegal torrents here, but email to sledgehammer999 when he asked."
165554368,8347,Chocobo1,2018-02-02T04:03:27Z,I would remove the boldface to move this point to the bottom of the list.
165554472,8347,Chocobo1,2018-02-02T04:04:52Z,"there is usually not a beta around.
or say: Check on the forum, see if there's already a alpha / beta version with that enhancement."
165554576,8347,Chocobo1,2018-02-02T04:06:18Z,make sure you have consistency with the number of new lines within this document.
165554615,8347,Chocobo1,2018-02-02T04:06:52Z,"double ""list"""
165554846,8347,Chocobo1,2018-02-02T04:09:29Z,"do you mean ""What is an actual bug report?"" ?"
165555088,8347,Chocobo1,2018-02-02T04:12:37Z,Enhancements => enhancements 
165555213,8347,Chocobo1,2018-02-02T04:14:08Z,This small section applies to all sections and can be placed on top of TOC
165617032,8347,thalieht,2018-02-02T11:02:49Z,"The last sentence is redundant. If a user knows that he'll say it, it's common sense."
165617390,8347,thalieht,2018-02-02T11:04:48Z,fix -> fixes
165618244,8347,thalieht,2018-02-02T11:09:12Z,Others might _have_ already implemented your idea and _it_ is waiting to be merged (or _it_ got rejected already).
165621846,8347,glassez,2018-02-02T11:27:44Z,"An example of a bad commit message, IMO. However, we still don't have rules about it."
165732028,8347,FranciscoPombal,2018-02-02T19:07:04Z,"@Chocobo1 
This was done to satisfy the linter I used while writing the file: https://github.com/remarkjs/remark-lint"
165733981,8347,FranciscoPombal,2018-02-02T19:14:31Z,Ok
165734026,8347,FranciscoPombal,2018-02-02T19:14:42Z,Ok
165735355,8347,FranciscoPombal,2018-02-02T19:20:11Z,Ok
165735392,8347,FranciscoPombal,2018-02-02T19:20:21Z,Ok
165735664,8347,FranciscoPombal,2018-02-02T19:21:23Z,Ok
165735759,8347,FranciscoPombal,2018-02-02T19:21:45Z,Ok
165735821,8347,FranciscoPombal,2018-02-02T19:22:01Z,Ok
165737371,8347,FranciscoPombal,2018-02-02T19:28:23Z,Ok
165737424,8347,FranciscoPombal,2018-02-02T19:28:39Z,Ok
165738564,8347,FranciscoPombal,2018-02-02T19:33:28Z,"Ok, sentence is now:
`The following are _not_ bug reports. **Check the wiki, forum or other places for help and support for issues like these**:`

Also remove trailing `;` in all bullet points"
165739291,8347,FranciscoPombal,2018-02-02T19:36:33Z,Ok
165739699,8347,FranciscoPombal,2018-02-02T19:38:24Z,Ok
165739915,8347,FranciscoPombal,2018-02-02T19:39:17Z,"Nope, the second part that is capitalized is part of the sentence. Is it too awkward?"
165740240,8347,FranciscoPombal,2018-02-02T19:40:42Z,"I can add a rule to state that uploading a `.torrent` file is off limits, but what about linking (torrents and magnet links)? Should that be email-only as well?"
165740417,8347,FranciscoPombal,2018-02-02T19:41:29Z,Ok
165741580,8347,FranciscoPombal,2018-02-02T19:46:17Z,Ok
165741608,8347,FranciscoPombal,2018-02-02T19:46:23Z,Ok
165741736,8347,FranciscoPombal,2018-02-02T19:46:52Z,Ok
165741829,8347,FranciscoPombal,2018-02-02T19:47:15Z,Ok
165741894,8347,FranciscoPombal,2018-02-02T19:47:29Z,Ok
165742826,8347,FranciscoPombal,2018-02-02T19:51:12Z,Another level is more consistent with the style of the rest of the document IMO. Plus I tried doing as you suggested and my markdown preview did not show it like that.
165744211,8347,FranciscoPombal,2018-02-02T19:56:03Z,"Ok, left at most one blank newline between others, except when absolutely necessary to preserve the wanted style"
165750254,8347,thalieht,2018-02-02T20:22:10Z,...can't _reproduce_ the problem...
165779509,8347,FranciscoPombal,2018-02-02T22:41:38Z,"@thalieht Thanks, done"
165804800,8347,Chocobo1,2018-02-03T04:40:05Z,@sledgehammer999 ?
165805304,8347,Chocobo1,2018-02-03T05:07:07Z,"as for the links, there is an alternative syntax in markdown, for example:
```
Blah .... [link][link-url] ...

[link-url]: http://google.com
```
---
In action:
Blah .... [link][link-url] ...

[link-url]: http://google.com
"
165805324,8347,Chocobo1,2018-02-03T05:08:51Z,"The official forum link is http://forum.qbittorrent.org/
"
165805353,8347,Chocobo1,2018-02-03T05:10:42Z,"Pardon, I meant capitalize the first word:
* Restart qBittorrent
* Restart your PC

not the whole sentence."
165805372,8347,Chocobo1,2018-02-03T05:11:27Z,"Capitalize the first word, not the sentence."
165805478,8347,Chocobo1,2018-02-03T05:18:14Z,"reproduce requirement is quite strong, some bugs isn't easy to reproduce.
or maybe say: Report only if you run into the issue with an official stable release, a beta release... 

AFAIK there were some bugs in the PortableApps.com version and we don't provide support for that."
165806817,8347,Piccirello,2018-02-03T06:37:32Z,"I disagree; I think we should be explicit in asking for this. Providing this information may not be as obvious to non-developers and general users.

In the best case, the user reads a superfluous sentence. In the worst, the issue requires a follow up (by one of us) to get this info."
165806845,8347,Piccirello,2018-02-03T06:39:29Z,"> An example of a bad commit message, IMO. However, we still don't have rules about it.

@Chocobo1 Do you have a suggestion of a better message? Your original comment is neither helpful nor constructive."
165807245,8347,Chocobo1,2018-02-03T06:56:05Z,">An example of a bad commit message, IMO. However, we still don't have rules about it.
>
>@Chocobo1 Do you have a suggestion of a better message? Your original comment is neither helpful nor constructive.

Geez, you guys need to learn respect the history, bashing it repetitively won't change anything, that was an example for **""Close #XXXX""**, NOT an example for perfect commit log.
And no, please find/write the perfect commit msg yourself. :\"
165808512,8347,glassez,2018-02-03T08:11:19Z,"I'm sorry if I offended someone, my intention was not that. 
What matters is not only that one message is better than another. But the fact that we do not adhere to one specific style in this, and our history looks like a dump. I have several times hinted that it would be nice to have some ""commit messaging"" rules (as part of our Coding Guidelines).
[This](https://chris.beams.io/posts/git-commit/) topic contains some useful reflections on this subject, and we could take it as a basis."
165810232,8347,Piccirello,2018-02-03T09:45:45Z,"@Chocobo1 My apologies, I included you by mistake. My comment was in response to @glassez."
165812346,8347,FranciscoPombal,2018-02-03T11:30:20Z,@Chocobo1 @thalieht ?
165812399,8347,FranciscoPombal,2018-02-03T11:32:55Z,"@glassez 
> I have several times hinted that it would be nice to have some ""commit messaging"" rules (as part of our Coding Guidelines).

I see, but in that case, isn't it outside the scope of this PR?"
165812482,8347,FranciscoPombal,2018-02-03T11:38:03Z,Ok
165812485,8347,FranciscoPombal,2018-02-03T11:38:09Z,Ok
165812755,8347,thalieht,2018-02-03T11:52:23Z,Maybe @Piccirello is right but i have seen many issues that provide this information without being asked.
165812979,8347,FranciscoPombal,2018-02-03T12:03:20Z,Ok
165813194,8347,FranciscoPombal,2018-02-03T12:13:27Z,"@Chocobo1 
> reproduce requirement is quite strong, some bugs isn't easy to reproduce.

But if upgrading to the latest version fixes the bug, then it saves us and the user all the hassle.
I think the way the sentence is worded now has a similar meaning to what you propose:
`Upgrade to latest version; Problem still occurs ? file and issue : don't file an issue`.

I didn't know about the PortableApps.com builds. I will add a clause for that."
165813883,8347,glassez,2018-02-03T12:52:55Z,"I just don't want to see link to commit with incorrect (IMO) message as an example of ""how it should be done"". Until we have ""commit messaging"" rules."
165817756,8347,FranciscoPombal,2018-02-03T15:51:37Z,"@glassez So should I withdraw the points about commit messages, leave them like they are now, or expand them in this PR?"
165817936,8347,glassez,2018-02-03T15:57:33Z,"I would have removed the Example, and the rest left as is.
Wait for other opinions."
165819094,8347,Chocobo1,2018-02-03T16:48:18Z,">But if upgrading to the latest version fixes the bug, then it saves us and the user all the hassle.

Right. But I don't see what is related to what I said.
Just to be clear, the ""reproduce"" here means ""able to trigger the bug repetitively"" and this shouldn't be a strong requirement to file an issue (as some bugs ain't easy to trigger).

>I didn't know about the PortableApps.com builds. I will add a clause for that.

I think you shouldn't put a link to it (to avoid encouragement), just say we don't provide support out of official releases (on Windows)."
165829334,8347,FranciscoPombal,2018-02-04T00:09:49Z,"@Chocobo1 
> Right. But I don't see what is related to what I said.
Just to be clear, the ""reproduce"" here means ""able to trigger the bug repetitively"" and this shouldn't be a strong requirement to file an issue (as some bugs ain't easy to trigger).

I understand, will change.

> I think you shouldn't put a link to it (to avoid encouragement), just say we don't provide support out of official releases (on Windows).

Ok
"
166402023,8347,Chocobo1,2018-02-06T18:41:29Z,you forgot to remove portableapps-url below.
166478037,8347,FranciscoPombal,2018-02-06T23:37:52Z,"@Chocobo1 Thanks, done"
169185501,8347,FranciscoPombal,2018-02-19T22:52:38Z,@sledgehammer999 ping
170892902,8347,thalieht,2018-02-27T11:31:02Z,Don't post _public_ or private....?
170893904,8347,FranciscoPombal,2018-02-27T11:35:10Z,"@thalieht 
That first ""or"" shouldn't actually be there. Fixed"
178922374,8347,Chocobo1,2018-04-03T18:36:26Z,"Please change double empty lines to one empty line and check other places below.

IMO you are free to squash the commits."
178930393,8347,FranciscoPombal,2018-04-03T19:05:28Z,"I was able to remove some empty lines without affecting the formatting. The others are necessary to maintain the desired layout; see the images below:
![a](https://user-images.githubusercontent.com/17580742/38270009-0608a3ee-377a-11e8-8a61-285bf4c9f8f7.png)
![b](https://user-images.githubusercontent.com/17580742/38270013-07e938f4-377a-11e8-8306-aa7428d885c7.png)
"
178930482,8347,FranciscoPombal,2018-04-03T19:05:48Z,"@Chocobo1 
Is it ok now?"
178932421,8347,thalieht,2018-04-03T19:13:09Z,"Typos: porvide, unoficial"
178932548,8347,thalieht,2018-04-03T19:13:43Z,"As per [the new rule about commit messages](https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#10-git-commit-message)
you should change ""fixed"" to ""Fix"" (imperative mood and capitalize)."
178936411,8347,FranciscoPombal,2018-04-03T19:29:14Z,"Thanks, fixed"
178936427,8347,FranciscoPombal,2018-04-03T19:29:17Z,"Thanks, fixed"
179018613,8347,glassez,2018-04-04T03:29:42Z,This link points to the incorrect example (`Closes <issue>` clause should be in message body).  Please change it (e.g. https://github.com/qbittorrent/qBittorrent/commit/c07cd440cd46345297debb47cb260f8688975f50).
179023281,8347,Chocobo1,2018-04-04T04:19:26Z,"Yes, ~~btw I've noticed the issue when writing markdown, but never figured it out a solution, thanks!~~"
179024939,8347,Chocobo1,2018-04-04T04:37:06Z,">The others are necessary to maintain the desired layout

Just FYI, see preview on github: https://github.com/FranciscoPombal/qBittorrent/blob/02fda4ccd4ebd2fb9c721f4b092a512927bca7b3/CONTRIBUTING.md#table-of-contents
"
179025004,8347,Chocobo1,2018-04-04T04:37:53Z,its been so long that https has been deployed for this site.
183279316,8347,Chocobo1,2018-04-23T05:26:04Z,"Seems @FranciscoPombal is quite busy... I can fix this and mine comment and get this PR ready to merge, what do you say?"
183297894,8347,glassez,2018-04-23T07:30:59Z,"I would merge it ASAP, so please fix it."
324883290,11241,thalieht,2019-09-16T21:00:16Z,"This ""if"" isn't needed because it's always ""Torrent"" here but maybe it has some reason i don't know about?"
324886028,11241,thalieht,2019-09-16T21:06:50Z,"Something has to be done with this because it is shown even when `removeDirRecursive` is used. I don't really know what ""smartRemoveEmptyFolderTree"" does so not sure if it should go in `if (tmpRemovingTorrentData.deleteOption == TorrentAndFiles)`. Please advise."
324969060,11241,Chocobo1,2019-09-17T03:41:22Z,`const DeleteOption deleteOption` and at other places too.
324969382,11241,Chocobo1,2019-09-17T03:43:10Z,"`(const QString &hash, DeleteOption deleteOption = Torrent)`"
324969645,11241,Chocobo1,2019-09-17T03:44:47Z,you should always put a `break;` in `case`.
324972421,11241,Chocobo1,2019-09-17T04:02:18Z,I think it is more sensible to rename it to `TorrentAndRootFolder`.
324973242,11241,Chocobo1,2019-09-17T04:07:22Z,not your code but please help us add curly brackets to it and to the `else` cases too.
324974040,11241,Chocobo1,2019-09-17T04:12:29Z,"Will this remove folders outside the torrent? For example, a single-file torrent downloaded (without creating sub-folder) to `/my/path/torrent_file` and will this line remove `/my/path`? I hope it won't."
324975308,11241,Chocobo1,2019-09-17T04:20:57Z,">Something has to be done with this because it is shown even when removeDirRecursive is used. 

I don't think `removeDirRecursive` is guaranteed to succeed doing its job (currently there is no way to know) and this msg could still be needed.

>I don't really know what ""smartRemoveEmptyFolderTree"" does 

It removes folders and only when they do not contain any files.

Personally I think showing this log msg is not a very a big issue."
324976726,11241,Chocobo1,2019-09-17T04:29:51Z,"(Not sure) I think the whole `if (m_removingTorrents.contains(infoHash)) {}` isn't needed but the log msg below should be preserved.
And this line should be removed too: https://github.com/qbittorrent/qBittorrent/blob/e741e353618a90915fc1352830787402193c9757/src/base/bittorrent/session.cpp#L1658"
324977171,11241,Chocobo1,2019-09-17T04:33:03Z,I use `if (deleteOption == Torrent)` here and switch the conditional bodies.
325024977,11241,thalieht,2019-09-17T07:48:25Z,Coding style or something else?
325043903,11241,Chocobo1,2019-09-17T08:34:42Z,I'm saying you didn't place a `break;` below which you should add it.
325044110,11241,thalieht,2019-09-17T08:35:07Z,">(Not sure) I think the whole if (m_removingTorrents.contains(infoHash)) {} isn't needed but the log msg below should be preserved.

We need the torrent name which is deleted by now for the msg."
325048563,11241,thalieht,2019-09-17T08:45:11Z,No it won't. It was tested in the original PR and i tested it again to be sure.
325051834,11241,thalieht,2019-09-17T08:52:20Z,"I got that, i'm asking whether it's for coding style or something else."
325053152,11241,Piccirello,2019-09-17T08:55:04Z,"> Coding style or something else?

It's good practice in case additional cases are added in the future. Reduces the likelihood of an error"
325053548,11241,thalieht,2019-09-17T08:55:56Z,Ah ok thanks.
325054280,11241,thalieht,2019-09-17T08:57:25Z,Ok swapped.
325054515,11241,Piccirello,2019-09-17T08:57:59Z,We should bump the web api minor version since this value is changing from 2 to 4. So 2.2.0 -> 2.3.0
325054525,11241,thalieht,2019-09-17T08:58:00Z,Done.
325057904,11241,glassez,2019-09-17T09:05:33Z,I would assign enum values explicitly to be sure they will not change accidentally. Then you can also reorder them logically (to keep all delete options together).
325058447,11241,Piccirello,2019-09-17T09:06:47Z,I would use `Enable super seeding for torrent` to match the other options.
325059967,11241,Piccirello,2019-09-17T09:10:14Z,"I think these should all be plural (i.e. `Pause torrents`) given the sentence `Seed torrents until their seeding time...`.
"
325064144,11241,Piccirello,2019-09-17T09:19:04Z,"I find the differentiation between ""files"" and ""folder"" a bit non-obvious. I had to go back and look at the descriptions in the original PR to figure it out. I don't think ""folders"" and ""folders (force)"" is super obvious either  (used in the original PR), but I believe it's the same nomenclature that uTorrent uses."
325066272,11241,glassez,2019-09-17T09:23:32Z,"Sorry, but these changes totally incorrect. Core component should know nothing about any top level components and their logic. BitTorrent::Session should operate with MaxRatioAction. All mapping should be done where it's needed."
325079153,11241,thalieht,2019-09-17T09:52:02Z,"The only reason i changed them is because ""Delete torrents + folder"" would look weird IMO."
325080714,11241,thalieht,2019-09-17T09:55:42Z,"Ok, will restore plural form and use ""folders (force)""."
325082550,11241,glassez,2019-09-17T09:59:56Z,"Please take your time, wait for other opinions."
325105327,11241,thalieht,2019-09-17T11:00:00Z,Oh ok
325110510,11241,thalieht,2019-09-17T11:15:08Z,Any appropriate place to make functions for them or i just duplicate the code in optionsdialog and appcontroller?
325112899,11241,glassez,2019-09-17T11:22:12Z,"You don't need to change appcontroller, isn't it? It still should return serialized MaxRatioAction."
325225326,11241,glassez,2019-09-17T15:09:30Z,"How should it work for torrent that has no root folder?
I suppose the main purpose of this option is not only remove torrent root folder but remove torrent with all folders belonging to it regardless of the fact that there are some 3rd party files exist in these folders. When you talk about the root folder, this is just a special case of the above behavior, isn't it?"
325232758,11241,thalieht,2019-09-17T15:22:29Z,">It still should return serialized MaxRatioAction.

Sorry don't know what that means. I mean the following (and the equivalent in optionsdialog)
<details><summary>diff</summary>

```
--- a/src/base/bittorrent/session.cpp
+++ b/src/base/bittorrent/session.cpp
@@ -3320,37 +3323,23 @@ bool Session::isListening() const
     return m_nativeSession->is_listening();
 }
 
-int Session::maxRatioActionIndex() const
+MaxRatioAction Session::maxRatioAction() const
 {
-    switch (m_maxRatioAction) {
-    case Pause: return 0;
-    case Remove: return 1;
-    case DeleteFiles: return 2;
-    case DeleteFolder: return 3;
-    case EnableSuperSeeding: return 4;
-    default: return 0;
-    default: return 0;
-    }
+    return static_cast<MaxRatioAction>(m_maxRatioAction.value());
 }
 
-void Session::setMaxRatioAction(const int comboIndex)
+void Session::setMaxRatioAction(const MaxRatioAction act)
 {
-    switch (comboIndex) {
-    case 0:
-    default:
-        m_maxRatioAction = Pause;
-        break;
-    case 1:
-        m_maxRatioAction = Remove;
-        break;
-    case 2:
-        m_maxRatioAction = DeleteFiles;
-        break;
-    case 3:
-        m_maxRatioAction = DeleteFolder;
-        break;
-    case 4:
-        m_maxRatioAction = EnableSuperSeeding;
-    }
+    m_maxRatioAction = static_cast<int>(act);
 }
 
 // If this functions returns true, we cannot add torrent to session,
--- a/src/webui/api/appcontroller.cpp
+++ b/src/webui/api/appcontroller.cpp
@@ -208,7 +208,27 @@ void AppController::preferencesAction()
     data[""max_ratio""] = session->globalMaxRatio();
     data[""max_seeding_time_enabled""] = (session->globalMaxSeedingMinutes() >= 0.);
     data[""max_seeding_time""] = session->globalMaxSeedingMinutes();
-    data[""max_ratio_act""] = session->maxRatioActionIndex();
+
+    const MaxRatioAction maxRatioAction = session->maxRatioAction();
+    int index = 0;
+    switch (maxRatioAction) {
+    case Pause:
+        index = 0;
+        break;
+    case Remove:
+        index = 1;
+        break;
+    case DeleteFiles:
+        index = 2;
+        break;
+    case DeleteRootFolder:
+        index = 3;
+        break;
+    case EnableSuperSeeding:
+        index = 4;
+        break;
+    }
+
+    data[""max_ratio_act""] = index;
     // Add trackers
     data[""add_trackers_enabled""] = session->isAddTrackersEnabled();
     data[""add_trackers""] = session->additionalTrackers();
@@ -547,8 +567,29 @@ void AppController::setPreferencesAction()
         else
             session->setGlobalMaxSeedingMinutes(-1);
     }
-    if (hasKey(""max_ratio_act""))
-        session->setMaxRatioAction(it.value().toInt());
+    if (hasKey(""max_ratio_act"")) {
+        const int comboCurrentIndex = it.value().toInt();
+        MaxRatioAction maxRatioAction;
+        switch (comboCurrentIndex) {
+        case 0:
+        default:
+            maxRatioAction = Pause;
+            break;
+        case 1:
+            maxRatioAction = Remove;
+            break;
+        case 2:
+            maxRatioAction = DeleteFiles;
+            break;
+        case 3:
+            maxRatioAction = DeleteRootFolder;
+            break;
+        case 4:
+            maxRatioAction = EnableSuperSeeding;
+            break;
+        }
+
+        session->setMaxRatioAction(maxRatioAction);
+    }
     // Add trackers
     session->setAddTrackersEnabled(m[""add_trackers_enabled""].toBool());
     session->setAdditionalTrackers(m[""add_trackers""].toString());

```
</details>"
325234787,11241,glassez,2019-09-17T15:26:11Z,">Sorry don't know what that means.

Just don't touch AppController at all."
325236877,11241,glassez,2019-09-17T15:29:39Z,Also you shouldn't change maxRatioAction/setMaxRatioAction.
325255522,11241,Chocobo1,2019-09-17T16:04:48Z,"Yes you are right, I wasn't aware of the main idea behind it.
However the final name should correlate with how we name it in the UI."
325257457,11241,Chocobo1,2019-09-17T16:08:50Z,">We need the torrent name which is deleted by now for the msg.

I see. Then the `if ()` isn't necessary."
325257462,11241,glassez,2019-09-17T16:08:50Z,"If I am correct in my assumption of its purpose, it should be called ""Delete torrent and folders"" in UI and TorrentAndFolders here."
325258479,11241,glassez,2019-09-17T16:10:47Z,"From the other side it deletes not only folders (some files can be outside any folder). Maybe ""Delete torrent, files and folders""?"
325259793,11241,Chocobo1,2019-09-17T16:13:24Z,">From the other side it deletes not only folders (some files can be outside any folder). Maybe ""Delete torrent, files and folders""?

👍  This sounds better than other current alternatives."
325269924,11241,Chocobo1,2019-09-17T16:34:44Z,"OK, I had other concerns.
First one. If some torrent has the following structure: `b/c/d/e.txt` and is saved under `/a`. What is the expected behavior under this option? Removing folder `/a/b/c/d`? or removing `/a/b`? I suppose it is the latter, right?

Second. I suspect it is not correct to use `Utils::Fs::removeDirRecursive` to just remove one directory. It should instead remove the top level sub-folders one by one. For example a torrent saved under `/a` (with create subfolder option off) has `b/c/z1.txt`, `d/e/z2.txt`, `z3.txt`. Then it should remove `a/b` and `a/d` folders.
"
325270076,11241,thalieht,2019-09-17T16:35:05Z,What? I reverted maxRatioAction/setMaxRatioAction but if i don't do anything in appcontroller it still saves/loads based on index. Where am i supposed to do that mapping if not there?
325299960,11241,thalieht,2019-09-17T17:43:01Z,">Removing folder /a/b/c/d? or removing /a/b? I suppose it is the latter, right?

Yes. As for the rest, what i do know is that this stuff is out of my league and if it's required to do anything other than use `Utils::Fs::removeDirRecursive` then i'll have to abandon ship."
325320047,11241,thalieht,2019-09-17T18:27:28Z,">""Delete torrent, files and folders""

If ""files"" are mentioned people will wonder why this option deletes all files while the other only the torrent's files."
325320755,11241,glassez,2019-09-17T18:29:07Z,"Well, let's start from the beginning:
1. You need to add some new MaxRatioAction values. Just add it there. You don't need to change anything else (except, of course, the logic that uses these new behaviors). maxRatioAction/setMaxRatioAction is still correct (if you didn't change internal values of existing MaxRatioAction values). Also AppController is still valid since it send expected values for previously existing MaxRatioActions.
2. You need to add appropriate options in GUI/WebUI. Previously they use simplified way of using internal MaxRatioAction representation. Now you don't want to use it since it causes unwanted order of options in appropriate controls. So you need to define some mapping between MaxRatioAction serialized representation values and UI representation values (in GUI and WebUI)."
325323032,11241,glassez,2019-09-17T18:34:10Z,"In fact, we often use some more or less simplified methods. If you like, I can describe this part of the logic to you from a General point of view."
325341983,11241,thalieht,2019-09-17T19:18:58Z,">In fact, we often use some more or less simplified methods. 

Could you point me to a few of them?

>If you like, I can describe this part of the logic to you from a General point of view.

Please do.


"
325391328,11241,thalieht,2019-09-17T21:21:02Z,">So you need to define some mapping between MaxRatioAction serialized representation values and UI representation values (in GUI and WebUI).

If the following is correct for the GUI, where do i do it for the WebUI?
<details><summary>diff</summary>

```
--- a/src/gui/optionsdialog.cpp
+++ b/src/gui/optionsdialog.cpp
@@ -747,7 +747,15 @@ void OptionsDialog::saveOptions()
     session->setAdditionalTrackers(m_ui->textTrackers->toPlainText());
     session->setGlobalMaxRatio(getMaxRatio());
     session->setGlobalMaxSeedingMinutes(getMaxSeedingMinutes());
-    session->setMaxRatioAction(static_cast<MaxRatioAction>(m_ui->comboRatioLimitAct->currentIndex()));
+
+    const QHash <int, MaxRatioAction> actIndex = {
+        {0, Pause},
+        {1, Remove},
+        {2, DeleteFiles},
+        {3, DeleteRootFolder},
+        {4, EnableSuperSeeding}
+    };
+    session->setMaxRatioAction(actIndex.value(m_ui->comboRatioLimitAct->currentIndex()));
     // End Bittorrent preferences
 
     // Misc preferences
@@ -1130,7 +1138,15 @@ void OptionsDialog::loadOptions()
         m_ui->spinMaxSeedingMinutes->setEnabled(false);
     }
     m_ui->comboRatioLimitAct->setEnabled((session->globalMaxSeedingMinutes() >= 0) || (session->globalMaxRatio() >= 0.));
-    m_ui->comboRatioLimitAct->setCurrentIndex(session->maxRatioActionIndex());
+
+    const QHash <int, MaxRatioAction> actIndex = {
+        {0, Pause},
+        {1, Remove},
+        {2, DeleteFiles},
+        {3, DeleteRootFolder},
+        {4, EnableSuperSeeding}
+    };
+    m_ui->comboRatioLimitAct->setCurrentIndex(actIndex.key(session->maxRatioAction()));
     // End Bittorrent preferences
 
     // Web UI preferences
```
</details>
"
325470762,11241,glassez,2019-09-18T03:41:13Z,">If the following is correct for the GUI

The first mapping is correct. The second one should be `QHash<MaxRatioAction, int>`. Lookup for key is slow."
325475812,11241,glassez,2019-09-18T04:14:00Z,">where do i do it for the WebUI?

Just assign appropriate values to ""option"" elements. Isn't it enough?"
325481131,11241,glassez,2019-09-18T04:50:46Z,">why this option deletes all files while the other only the torrent's files.

IMO, this option raised more questions than answers from the very beginning.
Why is it even necessary? Why should qBittorrent delete unrelated files?
It looks like the original author just wanted to inject something subjective into the app's features.
I still think ""delete torrent and files"" is the only thing that most affected users lack."
325485878,11241,Chocobo1,2019-09-18T05:20:07Z,">Why should qBittorrent delete unrelated files?

IMO we shouldn't care about unrelated files, this way we can maintain less.

>It looks like the original author just wanted to inject something subjective into the app's features.

After re-reading the reason in https://github.com/qbittorrent/qBittorrent/pull/8671#discussion_r178464345 I agree with you. There are other ways to achieve what he wants and doesn't need this option.

>I still think ""delete torrent and files"" is the only thing that most affected users lack.

Seems so, none of the issues in the opening post mentioned this option.

@thalieht 
I would suggest that we drop this option for now, it will be easier to finish this PR and we can pick it up later if some stronger/more valid arguments comes in."
325666424,11241,thalieht,2019-09-18T13:12:48Z,">Why is it even necessary? Why should qBittorrent delete unrelated files?
It looks like the original author just wanted to inject something subjective into the app's features.
I still think ""delete torrent and files"" is the only thing that most affected users lack.

Personally i don't care about it in the ratio options but if this option was available in regular delete, it would be the only option i would use. There is never a time i want to keep foreign stuff in the torrent folder.

Don't tell me you guys want to drop it only because of the name? If it's also because of `Utils::Fs::removeDirRecursive` not being appropriate for it then ok. In any case here's another suggestion: ""Delete torrents and their files"" ""Delete torrents and their folder"".
"
325670083,11241,thalieht,2019-09-18T13:20:07Z,">Just assign appropriate values to ""option"" elements.

OMG this was the first thing i tried but i thought it didn't work... guess i forgot to restart qBt after compile. Anyway, what doesn't work is preselecting the right index in the WebUI combobox when opening options. I'm trying to see if i can figure a way to do it in preferences.html but i don't know html and i'm not succeeding so far."
325675958,11241,glassez,2019-09-18T13:30:35Z,">Anyway, what doesn't work is preselecting the right index in the WebUI combobox when opening options.

https://github.com/thalieht/qBittorrent/blob/e741e353618a90915fc1352830787402193c9757/src/webui/www/private/views/preferences.html#L1626
Here is affected place. Not sure if you can select `option` by `value` attribute value. Then you have to perform mapping manually."
325678793,11241,glassez,2019-09-18T13:35:56Z,">There is never a time i want to keep foreign stuff in the torrent folder.

Then why do you put ""foreign stuff"" there?
I can't understand how it can come there under normal use?"
325683623,11241,glassez,2019-09-18T13:44:53Z,"I still prefer singular form. The meaning is ""When (some) torrent reaches seeding time limit pause (delete etc.) it"". Plural form sounds like ""When (several/all) torrents reache seeding time limit pause (delete etc.) them"" which is incorrect, IMO."
325689255,11241,Chocobo1,2019-09-18T13:54:44Z,">Don't tell me you guys want to drop it only because of the name?

For me, that has nothing to do with the main reason (which is mentioned in my first sentence [above](https://github.com/qbittorrent/qBittorrent/pull/11241#discussion_r325485878)).

>If it's also because of Utils::Fs::removeDirRecursive not being appropriate for it then ok.

This is part of the reason (for me), albeit a minor one.

BTW, I also found a bug (unrelated to this PR) that qbt will remove user created empty folders when using `shift + del` to remove torrent which should not happen.
"
325713829,11241,thalieht,2019-09-18T14:36:56Z,"Ok i'll drop it.
>Then why do you put ""foreign stuff"" there?
I can't understand how it can come there under normal use?

Temp stuff e.g. unzipped, subtitles etc.
 "
325766017,11241,thalieht,2019-09-18T16:10:18Z,It's not changed after all.
325774710,11241,thalieht,2019-09-18T16:29:17Z,Thanks.
326479629,11241,Chocobo1,2019-09-20T05:53:31Z,"You should use the following:
```c++
const QVector<MaxRatioAction> actIndex = {
    Pause,
    Remove,
    DeleteFiles,
    EnableSuperSeeding
};
```"
326480000,11241,Chocobo1,2019-09-20T05:55:34Z,"Here the mapping is duplicated, maybe you should move the mapping to the anonymous namespace at top of the file."
326482941,11241,glassez,2019-09-20T06:10:53Z,">Here the mapping is duplicated

No, it is reversed here."
326484140,11241,Chocobo1,2019-09-20T06:16:38Z,ok forget it.
326584404,11241,thalieht,2019-09-20T11:22:38Z,"Thanks, changed but i'm waiting for any more changes before i push again."
326592509,11241,glassez,2019-09-20T11:51:21Z,Why did you remove this condition?
326597352,11241,thalieht,2019-09-20T12:07:22Z,https://github.com/qbittorrent/qBittorrent/pull/11241#discussion_r324883290
327052491,11241,glassez,2019-09-23T10:55:30Z,">This ""if"" isn't needed because it's always ""Torrent"" here

Are you sure? Did you test it?"
327063705,11241,Chocobo1,2019-09-23T11:29:29Z,"I see the problem now, when the `if ()` here is omitted it *might* produce duplicated/confusing log messages, that is this message here and the ones in `Session::handleTorrentDeletedAlert` & `Session::handleTorrentDeleteFailedAlert`. It should be tested."
327169240,11241,glassez,2019-09-23T15:07:10Z,">It should be tested.

It should be reverted here since it's not part of this job."
327190595,11241,thalieht,2019-09-23T15:45:18Z,"It should be reverted anyway... didn't know that this alert was posted when also deleting the files and as a consequence of removing this `if ()`, the torrent's hash would be removed from `m_removingTorrents` and the stuff in `handleTorrentDeletedAlert/handleTorrentDeleteFailedAlert` would never be executed. Whew thanks for catching this."
327325585,11241,thalieht,2019-09-23T20:55:59Z,Reverted.
327325777,11241,thalieht,2019-09-23T20:56:24Z,Changed.
327432741,11241,ArcticGems,2019-09-24T05:30:47Z,"Maybe I'm completely wrong, but it should be like this =
```
    Pause = 0,
    Remove = 1,
    DeleteFiles = 2,
    EnableSuperSeeding = 3
```
Since it like that here =
```
    const QHash<MaxRatioAction, int> actIndex = {
        {Pause, 0},
        {Remove, 1},
        {DeleteFiles, 2},
        {EnableSuperSeeding, 3}
    };
```"
327446274,11241,glassez,2019-09-24T06:31:59Z,">Maybe I'm completely wrong

Yes."
327457969,11241,Chocobo1,2019-09-24T07:09:28Z,Do you mind also changing the WebUI? shouldn't be hard.
327499899,11241,thalieht,2019-09-24T08:53:32Z,I knew this would be super confusing to someone who sees this without context... i'll leave a comment above the enum.
327501086,11241,thalieht,2019-09-24T08:56:17Z,Oops totally forgot that.
328432446,11241,Chocobo1,2019-09-26T04:42:27Z,"maybe combine them since `deleteFiles` variable isn't much of use:
```c++
const DeleteOption deleteOption = parseBool(params()[""deleteFiles""], false)
    ? TorrentAndFiles : Torrent;
```"
328432651,11241,Chocobo1,2019-09-26T04:43:37Z,"not your code but since we are at it, I will change to `const BitTorrent::TorrentHandle *torrent`"
328432736,11241,Chocobo1,2019-09-26T04:44:09Z,here
328432754,11241,Chocobo1,2019-09-26T04:44:20Z,and here
328442350,11241,glassez,2019-09-26T05:42:57Z,"Please don't add any dependencies from UI (or other client components), even in comments."
328443400,11241,glassez,2019-09-26T05:48:24Z,"Suffice it to mention that the values of the enum items should remain unchanged when adding (inserting) new ones, so as not to break the existing user settings."
328550150,11241,thalieht,2019-09-26T10:34:53Z,All done.
328550267,11241,thalieht,2019-09-26T10:35:15Z,Changed.
360037341,11708,sledgehammer999,2019-12-19T19:19:45Z,If we want to be totally const correct this should be `const QStyle *const style = blah`
360044903,11708,glassez,2019-12-19T19:28:24Z,"Is that really what you want?
I'm not that paranoid... So if you don't insist too much, I'd rather not go to extremes."
360059651,11708,thalieht,2019-12-19T19:45:40Z,">|| (value >= MAX_ETA)))

Does this mean it will show nothing if torrent was inactive for >100 days?"
360063329,11708,sledgehammer999,2019-12-19T19:49:38Z,"I don't know :S 
But doesn't the same logic apply for when we do `const` for non-pointers?"
360071277,11708,Chocobo1,2019-12-19T19:58:17Z,"It is dangerous to have write access for any pointer, so we use `const int *a;`. And it is *relatively* safe to read from any pointer address, thus (in my viewpoint) fixing a pointer address would be good but isn't strictly required (as it is not so hard to spot the code reassigning a pointer to another address)."
360113702,11708,sledgehammer999,2019-12-19T20:58:22Z,Yeah. Disregard my comment. I was reading the consts wrong. I forgot you essentially have to read them right-to-left in a pointer situation.
360233059,11708,glassez,2019-12-20T05:32:34Z,I didn't touch this logic. I just moved things into appropriated place.
360309865,11708,thalieht,2019-12-20T10:18:49Z,oops
360654841,11708,Chocobo1,2019-12-21T15:40:25Z,"```c++
{
    QStyledItemDelegate::paint(painter, option, index);
    return;
}
```"
360654974,11708,Chocobo1,2019-12-21T15:43:05Z,`const int column`
360655056,11708,Chocobo1,2019-12-21T15:45:32Z,"Since it returns something, it is better to explicitly write it out:
```c++
const auto availabilityString = [hideValues](const qreal value) -> QString
{
    // ...
};
```

This also applies to below similar lambdas."
360655157,11708,Chocobo1,2019-12-21T15:47:25Z,"This is a little deep, I would use `if()` here."
360655193,11708,Chocobo1,2019-12-21T15:48:12Z,"please add parentheses after `:`
I would also move the `else` case to another line."
360655204,11708,Chocobo1,2019-12-21T15:48:36Z,I would use `if()` here.
360655246,11708,Chocobo1,2019-12-21T15:49:11Z,`'*'` or `QLatin1Char('*')`
360655334,11708,Chocobo1,2019-12-21T15:51:14Z,you can strip the first parentheses pair.
360655356,11708,Chocobo1,2019-12-21T15:51:55Z,"`QLatin1String(""100%"")`"
360655384,11708,Chocobo1,2019-12-21T15:52:41Z,"`const int column, const bool alt`"
360655443,11708,Chocobo1,2019-12-21T15:54:33Z,would just `return torrent->tags().values()` work here?
360655508,11708,Chocobo1,2019-12-21T15:55:36Z,`(Qt::UserRole + 1)`
360655517,11708,Chocobo1,2019-12-21T15:56:23Z,can you define a constant/field name for `Qt::UserRole + 1`?
360655524,11708,Chocobo1,2019-12-21T15:56:48Z,"`(m_statusStrings[state] + "": "" + errorMessage)`"
360655583,11708,Chocobo1,2019-12-21T15:58:10Z,`const int sortColumn`
360655765,11708,Chocobo1,2019-12-21T16:00:56Z,"I would prefer:
```c++
const QVariant leftValue = left.sibling(left.row(), sortColumn).data(Qt::UserRole);
const QVariant rightValue = right.sibling(right.row(), sortColumn).data(Qt::UserRole);
```
And then use const references for `left` & `right` function parameters."
360661102,11708,glassez,2019-12-21T18:08:17Z,"Do you have a prejudice against such a notation? It's valid. 
I agree, it does not make sense in the general case. But when we need to call void function immediately followed by return statement, I find it very convenient to write `return voidFunction();`. In addition, it makes all similar ""delegation to another function"" cases look uniform."
360661175,11708,glassez,2019-12-21T18:10:19Z,Return type deduction confuses you generally or in some special cases?
360661236,11708,glassez,2019-12-21T18:11:50Z,">I would also move the else case to another line.

Then parentheses will have no meaning (at least for me)."
360661273,11708,glassez,2019-12-21T18:12:54Z,Ternary operator doesn't allow different types.
360662697,11708,Chocobo1,2019-12-21T18:48:52Z,">it does not make sense in the general case. 

For me it doesn't make sense in every cases."
360662729,11708,Chocobo1,2019-12-21T18:49:49Z,"No, you write it out so the compiler could check for you if you returned the correct type and not something else."
360663073,11708,glassez,2019-12-21T18:58:21Z,"Just different subjective opinions...
So if you want to never use some kind of statement we need discuss it to forbid in our Coding Guidelines."
360663214,11708,glassez,2019-12-21T19:02:03Z,"I trust myself in such trivial cases.
But I will change this to make others feel safer ""under compiler protection"". The same goes for your comments about ""const"" in function parameters.
"
360663310,11708,glassez,2019-12-21T19:04:08Z,No. It returns `QList<QString>` that isn't implicitly convertible to QStringList.
360663375,11708,glassez,2019-12-21T19:05:17Z,Isn't it readable enough?
360663444,11708,Chocobo1,2019-12-21T19:06:48Z,"I wouldn't try to push to the extreme just to satisfy my taste if I were you but let us also hear what others think.
"
360663445,11708,glassez,2019-12-21T19:06:49Z,Isn't it structured enough?
360663560,11708,Chocobo1,2019-12-21T19:09:52Z,"At least consider moving it to another line, easier to read (for me)."
360663695,11708,Chocobo1,2019-12-21T19:14:20Z,">I trust myself in such trivial cases.

Even if that is true, this is a public project and others might trip over.

>But I will change this to make others feel safer ""under compiler protection"". The same goes for your comments about ""const"" in function parameters.

Thank you your majesty."
360682660,11708,glassez,2019-12-22T05:07:05Z,"BTW, in case of lambda return type compiler will say you about something wrong anyway (e.g. in place where you call it).
>Even if that is true, this is a public project and others might trip over.

Just for fun. How many times have we (qBittorrent project) encountered, for example, this terrible problem of ""unintentional variable change"" (before you start insisting on `const` everywhere)?"
360682744,11708,glassez,2019-12-22T05:09:42Z,"Yes, I can. Then I should also do it for UserRole too."
360683145,11708,Chocobo1,2019-12-22T05:24:24Z,">BTW, in case of lambda return type compiler will say you about something wrong anyway (e.g. in place where you call it).

Yes, but that error message won't be pointing the fault at the lambda which is less correct.

>How many times have we (qBittorrent project) encountered, for example, this terrible problem of ""unintentional variable change

Can't be sure, however when a variable is marked const it is greatly easier to track its state without worrying it has changed over a bunch of code. And BTW, in Rust language, every variable is const by default unless you explicitly add `mut` to it.
"
360688077,11708,glassez,2019-12-22T07:45:00Z,">in Rust language, every variable is const by default unless you explicitly add mut to it.

It's good.
But in C++ you're making me do extra low-effeciency work (add a bunch of ""const"" modifiers).
>it has changed over a bunch of code.

But in many cases it's just a couple of lines (passing to another function or return statement) so I don't feel it's so serious that I can develop a habit to blindly add const everywhere. You'll have to remind me of that."
360688182,11708,glassez,2019-12-22T07:48:33Z,">Yes, but that error message won't be pointing the fault at the lambda which is less correct.

Lambda can be either correct or no. In first case compiler points to error in place of its incorrect use, in the second one compiler points to error in lambda. I don't understand what's the problem you worry about."
360691969,11708,Chocobo1,2019-12-22T09:06:23Z,">But in C++ you're making me do extra low-effeciency work (add a bunch of ""const"" modifiers).

At the cost of you spent at most 2 more mins and ease other developers mind set reading your code... and you think it isn't worth it. Funny.

>You'll have to remind me of that.

Don't worry, I will.

>In first case compiler points to error in place of its incorrect use, in the second one compiler points to error in lambda. I don't understand what's the problem you worry about.

The same as you would write `auto someFunc() {}`. I think you should start writing in that way (automatic return type deduction since c++14). /s
But seriously I can't understand why you would expect the lambdas to return other types than `QString` here and also why merely adding `QString` would lead to this much resistance?

If you really think your code is just superior for everyone, then just say it! I'll blindly press the Approve button for all of your PR from now on.

@sledgehammer999 
I think I'll do selective review for project's PR from now on. I.e. no need to wait for me for PRs that I didn't comment.
"
360699906,11708,glassez,2019-12-22T11:39:02Z,">If you really think your code is just superior for everyone, then just say it!

No, that's why I'm discussing it. But if you take my arguments as a personal insult (If you really think YOUR code is just superior for everyone), I will not continue this discussion and simply apply your recommendations.
>I think I'll do selective review for project's PR from now on. I.e. no need to wait for me for PRs that I didn't comment.

Well, that will certainly help the project. Many PRs have every chance of never being merged if they have to wait for @sledgehammer999 review. If this applies to my PRs only, then it will be easier for me to stop them altogether (hopefully this is not what you're after).

When I start discussing something, I want to learn something new for myself or correct my misconception (and do the same for an opponent). But it was never my purpose to offend anyone. So let's keep working on the project the way it's best for it."
360702606,11708,glassez,2019-12-22T12:32:10Z,"@Chocobo1, PR updated. I hope I have corrected all my ""mistakes""."
360725319,11708,sledgehammer999,2019-12-22T19:52:19Z,"IMO, since we can do:
```c++
bool doSomething()
{
  return didSomethingElse();
}
```

I can't find a particular reason to object to the same thing being done for function returning void. Although I do agree that it looks rather weird."
360725510,11708,sledgehammer999,2019-12-22T19:57:03Z,"~I understand that you already pushed the change to the lambda. But shouldn't this be better addressed by **not** using `auto` in this case? The compiler would complain if the lambda didn't return a `QString` object **and** the reader would know what the type of the variable is.~

Sorry this was dumb comment."
360725612,11708,sledgehammer999,2019-12-22T19:59:42Z,"Are we even allowed to do that? I mean, sure, the language allows us to do that, but don't we run the risk of breaking in the future (assuming another Qt release adds a role that uses that number)."
360729161,11708,sledgehammer999,2019-12-22T21:16:12Z,"Ignore my previous comment. But, IMO, it is too much to require to explicitly declare a return type for such small function.
And any possible mismatch will be realized the moment we try to assign the return type to a 'QString` and the compiler throws an error."
360756618,11708,Chocobo1,2019-12-23T03:29:29Z,">But, IMO, it is too much to require to explicitly declare a return type for such small function.

But you write out the exact return type for normal functions instead of plugging `auto` in there and why is that?

>And any possible mismatch will be realized the moment we try to assign the return type to a 'QString` and the compiler throws an error.

And then trace the error back to the faulty lambda, why not just specify the type at lambda instead and compiler will point to the exact line that cause the error? (I'm talking about general cases)
I may be a little inconsistent on this: for POD types I might not feel strongly the need to write it out, but for more complex types such as Qt containers I think it is a must."
360883258,11708,sledgehammer999,2019-12-23T13:15:22Z,">But you write out the exact return type for normal functions instead of plugging auto in there and why is that?

Actually you may be right. For me it is about readability.
So yeah, in lambas the compiler might be able to deduce types and eventually error out, but when a developer reads the lambda he should be able to know the return type from the signature, and not mentally parse the lambda body to understand what type is returned.

Almost same reason why we use `auto` [sparingly](https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#9-misc) in variable types"
360883337,11708,sledgehammer999,2019-12-23T13:15:41Z,My previous comment may not be so important.
361243332,11708,sledgehammer999,2019-12-25T02:30:28Z,"Can you test if `lupdate` picks up the strings from this construct?
If yes, just go ahead with the merge."
361246104,11708,sledgehammer999,2019-12-25T03:00:16Z,"Curious, but why didn't you make this a lambda too?"
361246424,11708,sledgehammer999,2019-12-25T03:04:02Z,"These 2 should be `return unitString(torrent->uploadPayloadRate(), true);`"
361248419,11708,sledgehammer999,2019-12-25T03:25:51Z,Shouldn't we consider right-to-left locales? (aka reverse this?)
361248478,11708,sledgehammer999,2019-12-25T03:27:03Z,I think this can be simplified to `newopt.text = index.data().toString()`
361256743,11708,Chocobo1,2019-12-25T05:12:11Z,I found this: `Qt::AlignAbsolute` in https://doc.qt.io/qt-5/qt.html so maybe it is already handled by Qt? Warrants a test to find out.
361267148,11708,glassez,2019-12-25T06:53:00Z,leftover... changed.
361267439,11708,glassez,2019-12-25T06:55:37Z,Thank you. Fixed!
361267518,11708,glassez,2019-12-25T06:56:18Z,I wouldn't want to touch it in this PR.
361268273,11708,glassez,2019-12-25T07:02:09Z,"👍 
Fixed."
361280915,11708,sledgehammer999,2019-12-25T08:37:04Z,Maybe preserve the code comment?
361300890,11708,sledgehammer999,2019-12-25T11:16:21Z,"Most of the changes in this file belong conceptually to the previous commit.
However, I am not insisting on changing this."
361300944,11708,sledgehammer999,2019-12-25T11:17:00Z,ok
361304281,11708,sledgehammer999,2019-12-25T11:52:33Z,"I found a discrepancy here. Notice this sample code:
```c++
qreal r = 99.9;
QVariant var {r};
int i = static_cast<int>(var.toReal());
```

`i` holds the value 99.
`var.toInt()` returns value of 100."
361315200,11708,glassez,2019-12-25T14:00:46Z,"Oops... I never test it. I thought it rounds in the same way (just performs static_cast).
Will change back."
361315450,11708,glassez,2019-12-25T14:04:05Z,"Sorry, what do you mean exactly?
The second commit includes only changing from QItemDelegate to QStyledItemDelegate and some code/style cleanups (including this one)."
361317034,11708,sledgehammer999,2019-12-25T14:23:26Z,"pragma/explicit/Q_DISABLE_COPY could go to the previous commit, like it is done for the sort model (IIRC).
But it is ok. I am bothered to much by this."
361384237,11708,glassez,2019-12-26T07:01:36Z,Ok
361470602,11708,sledgehammer999,2019-12-26T14:50:03Z,This change surely belongs to the previous commit.
361514823,11708,glassez,2019-12-26T19:05:26Z,Moved there.
361591471,11708,glassez,2019-12-27T06:24:31Z,">But you write out the exact return type for normal functions instead of plugging auto in there and why is that?

It is incorrect to put lambda in direct correspondence with the regular function.
Often the function signature is the only thing available (at least easily available). Its implementation can be in another file, library, or available only in binary form.
Lambda was created primarily for ""inplace"" use, so that excessive detail here only reduces readability. If it is quite complex/large, then this is a good reason to turn it into regular function.

>when a developer reads the lambda he should be able to know the return type from the signature, and not mentally parse the lambda body to understand what type is returned.
Almost same reason why we use auto sparingly in variable types

Personally I don't see any problems with identifying the return type in the lambda like the following:
```c++
[](int param1, bool param2)
{
    return param2 ? QString {} : QString::number(param1);
}
```
IMO, it's better than the following ""readable"" signature:
```c++
[](const int param1, const bool param2) -> QString
{
    return param2 ? QString {} : QString::number(param1);
}
```"
549009552,14054,jagannatharjun,2020-12-26T16:41:13Z,"IMHO using timepoints seems a better idea, for example, previously 6-hour and 12-hour graphs were using the same resolution i.e 72 (DIVIDER_6HOUR == DIVIDER_12HOUR). using time points solves such bugs from happening."
549014551,14054,glassez,2020-12-26T17:44:28Z,Please do not mix the initialization styles.
549014738,14054,glassez,2020-12-26T17:46:14Z,Please don't use post increment unless you really require it.
549020395,14054,glassez,2020-12-26T18:56:44Z,It doesn't make any sense... Why do you assign the same capacity that it already has?
549020980,14054,glassez,2020-12-26T19:04:42Z,Why do you still need to wrap it inside struct?
549021257,14054,glassez,2020-12-26T19:07:15Z,Why such perversions? Why not just `int m_counter = 0;`?
549678933,14054,glassez,2020-12-29T12:02:08Z,"IIRC, there were some conflicts with `moc` and `boost/circular_buffer.hpp` header, so it was placed under this guard. I don't see the point in adding these new headers under this guard too.
BTW, perhaps it is no longer required at all."
549680317,14054,jagannatharjun,2020-12-29T12:06:49Z,"I think this make moc bit faster,"
549681067,14054,glassez,2020-12-29T12:09:28Z,"I think we can/should use such std types directly (w/o aliases). Of course, we can use it without full qualification, i.e.:
```c++
using std::chrono::milliseconds;
```
@Chocobo1?"
549681726,14054,glassez,2020-12-29T12:12:07Z,"Inconsistent names of struct and its fields. I would expect to see `x,y` if it is `point`."
549720843,14054,glassez,2020-12-29T14:17:25Z,"Wouldn't it be easier to have separate averagers for 1 and 5 min graphs? Is there a real gain in sharing the same averager, but at the same time complicating it internally?"
549723170,14054,jagannatharjun,2020-12-29T14:24:32Z,"no, this doesn't complicate anything imo, only place where it has any effect is this https://github.com/qbittorrent/qBittorrent/pull/14054/files#diff-989e95031bfc96747860213bce0a55b9cf1d2175cbe3de0db42190945398ba91R180

but that equation will be required anyway, plus since this PR improves the resolution for the 6-hour graph So, I was thinking of re-using the 6-hour averager to add a 3-hour graph by using `Averager::setCurrentMaxDuration`"
550167267,14054,glassez,2020-12-30T11:48:39Z,">no, this doesn't complicate anything imo

Really? The presence of both `max duration` and `current max duration` in averager logic, makes it confusing. But most importantly, what is the advantage of this approach? Why not just have a dedicated averager for each used interval?"
550168721,14054,glassez,2020-12-30T11:54:30Z,"I don't think it's really supposed to be used for this purpose. At least I don't recall that Qt recommended enclosing all third-party inclusions in such a guard. Seems it's just exceptional case when moc conflicts with some headers.
@Chocobo1, have you to say something about it?"
550170659,14054,glassez,2020-12-30T12:01:53Z,"I would rename them:
1. PointData -> SampleData
2. GraphData -> Sample
3. y -> data"
550172041,14054,glassez,2020-12-30T12:06:47Z,"Let's call things more explicitly. Otherwise, we have in the code a bunch of ""data"", ""current data"", etc., which actually refer to completely different things.
So maybe call it `m_currentAverager`?"
550174682,14054,glassez,2020-12-30T12:16:27Z,"Can you explain in simple words what `viewablePointsCount` is supposed to mean? What exactly does `viewable` mean in it? And why is it that the Averager, which appears to be a computational and accumulative helper, is responsible for something related to `viewing`?"
550177846,14054,glassez,2020-12-30T12:27:07Z,"Again this jumble of similar names? What kind of `push` is meant?
After all, it is resetted at the moment when the next sample is added. Wouldn't it be clearer if you called it `m_lastSampleTime`? "
550209138,14054,jagannatharjun,2020-12-30T14:16:10Z,"> Really? The presence of both max duration and current max duration in averager logic, makes it confusing. But most importantly, what is the advantage of this approach? Why not just have a dedicated averager for each used interval

With this you don't need to have another array for storing the values, saving memory, and then you don't have to run the average on every stat update, saving cpu resources."
550213869,14054,glassez,2020-12-30T14:31:18Z,">With this you don't need to have another array for storing the values, saving memory, and then you don't have to run the average on every stat update, saving cpu resources.

Why then, based on the same assumptions, not have only one Averager? What is the line that separates these cases?"
550215650,14054,jagannatharjun,2020-12-30T14:36:41Z," > Why then, based on the same assumptions, not have only one Averager? What is the line that separates these cases?

resolution (after how much duration Averager averages) https://github.com/qbittorrent/qBittorrent/pull/14054/files#diff-989e95031bfc96747860213bce0a55b9cf1d2175cbe3de0db42190945398ba91R57 this increases with the duration of the target time period, it's a trick to decrease the memory usage. So 24-hour averager will accumulate data till the elapsed time < resolution {144s) and the average it and push it in the data queue https://github.com/qbittorrent/qBittorrent/pull/14054/files#diff-989e95031bfc96747860213bce0a55b9cf1d2175cbe3de0db42190945398ba91R135"
550220881,14054,Chocobo1,2020-12-30T14:52:28Z,"I'm not familiar with it, probably best not relying on it whenever possible..."
550970604,14054,jagannatharjun,2021-01-03T07:53:09Z,"This was used to guess the full size of the buffer when max duration is reached, on the latest push I've made the SpeedPlotView fully duration based, removing the need for this function."
551324346,14054,glassez,2021-01-04T13:44:35Z,It seems that now all these DURATION\_\* constants unambiguously correspond to the chrono literals with which they are set. I don't see the point of having them anymore. Why not just use appropriate chrono literals directly?
551325531,14054,glassez,2021-01-04T13:46:43Z,`std::min`?
551330325,14054,glassez,2021-01-04T13:56:02Z,`std::max`?
551332900,14054,glassez,2021-01-04T14:00:45Z,`const DataCircularBuffer &queue`
551335637,14054,glassez,2021-01-04T14:06:06Z,`const DataCircularBuffer &queue`
551337437,14054,glassez,2021-01-04T14:09:36Z,Please leave only circular buffer include inside `#ifndef Q_MOC_RUN`.
551340807,14054,glassez,2021-01-04T14:15:39Z,"Please enclose subexpressions in parentheses.
Also I would prefer to see expressions in the right side of the inequality:
```c++
else if (m_sink.size() >= (m_sink.capacity() - 1))
```"
551346678,14054,jagannatharjun,2021-01-04T14:25:30Z,don't you guys prefered qt functions?
551347826,14054,jagannatharjun,2021-01-04T14:27:22Z,"> else if (m_sink.size() >= (m_sink.capacity() - 1))

hmm, if I am not mistaken then if capacity is zero (I don't pre-reserve) and capacity() should return a size_t so in that case, this code will go boom."
551348794,14054,jagannatharjun,2021-01-04T14:29:00Z,"I've to use `using std::chrono_literals;` in the scope of file, would that be fine?"
551403796,14054,glassez,2021-01-04T15:58:07Z,"Well, then
```c++
else if (m_sink.capacity() <= (m_sink.size() + 1))
```"
551408037,14054,glassez,2021-01-04T16:05:09Z,"Recently, I prefer to use standard c++ counterparts in the case where they are effectively equivalent to Qt ones. The same applies to Boost counterparts. Don't forget that many of them (Qt/Boost) existed before their equivalents appeared in the standard c++, so they can prevail in our existing code.
@Chocobo1, what do you think?"
551408844,14054,glassez,2021-01-04T16:06:34Z,Why not?
551410157,14054,glassez,2021-01-04T16:08:45Z,"Just in case, I want to note that my comment above applies exactly to what is mentioned in it. No need to delete RESOLUTION\_\* constants."
551428815,14054,Chocobo1,2021-01-04T16:37:01Z,">don't you guys prefered qt functions?

This policy wasn't really clear until now.

>@Chocobo1, what do you think?

I agree. We probably need to write it in our coding guidelines."
552154947,14054,glassez,2021-01-05T19:45:43Z,"Let's start small...

Where did this condition come from?
If I am not mistaken, then you increase the capacity in two cases, either when the size is less by one than the current capacity, or when they are equal (since the size cannot be greater than the capacity). So why not just leave the only condition (size equals capacity), as in other case (the size is less than capacity) you can safely call `push_back()` (later in the code), without fear of losing the first item of queue (this is the condition for protection from loss of the first item of queue, am I right?)."
552398808,14054,jagannatharjun,2021-01-06T06:46:42Z,yes this condition can be `m_sink.size() == m_sink.capacity()`
553896130,14054,glassez,2021-01-08T11:39:57Z,So why isn't it still `else if (m_sink.size() == m_sink.capacity())`?
553908688,14054,glassez,2021-01-08T12:10:06Z,"Oh, I just wanted to point out that you should strive to reduce the overflow to a minimum, as you have already done. 

P.S. Don't forget to correct the coding style in this line."
553910198,14054,glassez,2021-01-08T12:13:52Z,The one thing I dislike in `Averager::push()` is playing with buffer capacity. I would make it static and pop/push items manually.
553911211,14054,jagannatharjun,2021-01-08T12:16:11Z,"> The one thing I dislike in Averager::push() is playing with buffer capacity. I would make it static and pop/push items manually.

IDK how that can be achieved, only push has the latest information to correctly set the buffer size"
553950244,14054,glassez,2021-01-08T13:43:17Z,You can calculate max buffer size using duration and resolution (aka duration/resolution) and set capacity to it. Since duration of each sample can't be less than resolution you will never overflow the buffer (if you manually pop outdated samples and then push new one like you do currently).
554143178,14054,glassez,2021-01-08T19:20:38Z,"```c++
while (!m_sink.empty()
```"
554143411,14054,glassez,2021-01-08T19:21:15Z,2021
554145881,14054,glassez,2021-01-08T19:26:26Z,"So maybe it's better to reformat conditions?
```c++
if (averager->push(point))
{
    if (m_currentAverager == averager)
        viewport()->update();
}
```"
554147165,14054,glassez,2021-01-08T19:29:06Z,`currentData()`
554150651,14054,glassez,2021-01-08T19:36:38Z,Declaring `points` variable at this scope (as it was before) looks better.
554151521,14054,glassez,2021-01-08T19:38:31Z,"```c++
rect.right() - (duration.count() * xTickSize)
```
and below too."
554155298,14054,glassez,2021-01-08T19:46:44Z,"Please use new style initialization:
```c++
m_averager5Min {5min, RESOLUTION_MIN5}
```

It's nothing hard to change one existing line too to keep it consistent."
554161424,14054,jagannatharjun,2021-01-08T20:00:03Z,huh then what was the missing coding guideline you mentioned here https://github.com/qbittorrent/qBittorrent/pull/14054#discussion_r553908688?
554161661,14054,jagannatharjun,2021-01-08T20:00:35Z,it looks cool :P will change it :)
554290808,14054,glassez,2021-01-09T04:46:55Z,">huh then what was the missing coding guideline you mentioned here https://github.com/qbittorrent/qBittorrent/pull/14054#discussion_r553908688?

Space after `while`!"
554293499,14054,glassez,2021-01-09T05:17:08Z,Why `+ 1`? It doesn't contain values for some time points but for time intervals.
554293630,14054,jagannatharjun,2021-01-09T05:18:41Z,for peace of mind
554294817,14054,glassez,2021-01-09T05:33:56Z,">for peace of mind

🙂
You don't still need to play it safe. The maximum size here is quite obvious (after a little analysis). But the extra `+ 1` can be confusing to future reviewers."
554306985,14054,glassez,2021-01-09T07:55:14Z,Wouldn't it be better to store averagers in QHash (indexed by TimePeriod) instead of separate class members? Seems it can simplify code in several places.
554307584,14054,glassez,2021-01-09T08:02:22Z,"IIRC, each period is drawn proportionally to its duration, am I right?"
554308832,14054,jagannatharjun,2021-01-09T08:16:38Z,"yes, and note that I am drawing backwards."
554310046,14054,jagannatharjun,2021-01-09T08:30:05Z,"QHash will add overhead and QHash will be used in two places, and for some graph, there is the same average so we have to add conditions for that to save for double push"
554452595,14054,glassez,2021-01-09T17:43:36Z,"It would be nice if adding another Averager only required changes in one place, rather than four, as it is now. But it looks like it's a little more complicated than I thought. So I won't insist on it. In addition, adding/removing an Averager is very rare."
556269315,14054,Chocobo1,2021-01-13T05:22:22Z,please move this below forward declarations.
556270353,14054,Chocobo1,2021-01-13T05:26:04Z,I would express the intention more directly: `int m_counter {0};`
556271387,14054,Chocobo1,2021-01-13T05:29:44Z,`milliseconds m_currentDuration {milliseconds::zero()};`
556279976,14054,Chocobo1,2021-01-13T05:59:06Z,seems you can initialize all of them in header file instead.
556281017,14054,Chocobo1,2021-01-13T06:02:43Z,`milliseconds::zero()`
556281491,14054,Chocobo1,2021-01-13T06:04:12Z,"`maxYValue = std::max(maxYValue, queue[i].data[id])`"
556282186,14054,Chocobo1,2021-01-13T06:06:28Z,`milliseconds::zero()`
556282901,14054,Chocobo1,2021-01-13T06:08:28Z,you can use `{}` initializer for both double vars.
556283131,14054,Chocobo1,2021-01-13T06:09:09Z,please use `0` instead of `0.0`
556283253,14054,Chocobo1,2021-01-13T06:09:33Z,`milliseconds::zero()`
556283367,14054,Chocobo1,2021-01-13T06:09:57Z,add `const` for both variables.
556292481,14054,jagannatharjun,2021-01-13T06:38:26Z,yeah but then I have to declare RESOLUTION_* in header file. I don't like that
556293478,14054,jagannatharjun,2021-01-13T06:41:22Z,"yeah but `{}` is meant to initialize with zero, then why pollute code with obvious inferences. "
556293532,14054,jagannatharjun,2021-01-13T06:41:34Z,https://github.com/qbittorrent/qBittorrent/pull/14054#discussion_r556293478
556293635,14054,jagannatharjun,2021-01-13T06:41:53Z,https://github.com/qbittorrent/qBittorrent/pull/14054#discussion_r556293478
556300208,14054,Chocobo1,2021-01-13T07:00:19Z,">I have to declare RESOLUTION_* in header file

You don't have to, you can put the literal directly to the constructor."
556301387,14054,glassez,2021-01-13T07:03:34Z,">`milliseconds::zero()`

Maybe `0ms`? `milliseconds::zero()` is too long... Or `auto duration = milliseconds::zero();`."
556311152,14054,Chocobo1,2021-01-13T07:27:38Z,"I prefer initializing with obvious literals over some programming language constructs whenever possible.
You can wait for others comment before making a change here."
556316393,14054,glassez,2021-01-13T07:39:04Z,">you can use `{}` initializer for both double vars.

Isn't it time to discuss our preferred initialization method?
It looks like we already have one approved aspect (we prefer to use braces instead of parentheses to initialize classes, although I think there may be exceptions).
But personally, I feel it's acceptable to use assignment for initialization. Even more than that, it looks more natural to me in many cases, especially when it comes to some numeric types (e.g. `int i = 10;` instead of `int i {10};`).

Anyway I don't mind if we adopt some stricter rules."
556333935,14054,glassez,2021-01-13T08:14:47Z,"https://github.com/qbittorrent/qBittorrent/pull/14054#discussion_r549021257

How about still use `int m_counter = 0;` for numeric like types?"
556352833,14054,Chocobo1,2021-01-13T08:48:07Z,">It looks like we already have one approved aspect (we prefer to use braces instead of parentheses to initialize classes, although I think there may be exceptions).

Agree.

>it looks more natural to me in many cases, especially when it comes to some numeric types (e.g. int i = 10; instead of int i {10};).

Perhaps we could agree on using assignment in initialization expressions when it comes to POD types."
558462682,14054,jagannatharjun,2021-01-15T17:40:09Z,"> it looks more natural to me in many cases, especially when it comes to some numeric types (e.g. int i = 10; instead of int i {10};).
>Perhaps we could agree on using assignment in initialization expressions when it comes to POD types.

why do guys insist on such rigid coding guidelines? I still haven't worked in a real company for programming. Do companies follow such rigid and explicit coding guidelines?"
558463627,14054,jagannatharjun,2021-01-15T17:41:56Z,"RESOLUTION_* are very specific and not self-explanatory, IMO they should remain as a constant either in header or source. "
558463830,14054,jagannatharjun,2021-01-15T17:42:20Z,I will prefer 0ms.
558824486,14054,glassez,2021-01-16T08:12:45Z,"> I still haven't worked in a real company for programming. Do companies follow such rigid and explicit coding guidelines?

Programming is not my main profession. I use it as an auxiliary tool in my life, and as a hobby. But for the sake of interest, you can take a look at [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html). They are quite extensive."
559133652,14054,glassez,2021-01-17T10:18:27Z,Shouldn't you use `>=`?
559134437,14054,glassez,2021-01-17T10:19:45Z,`0ms`?
559169215,14054,Chocobo1,2021-01-17T11:44:02Z,">RESOLUTION_* are very specific and not self-explanatory, IMO they should remain as a constant either in header or source.

IMO, the `RESOLUTION_*` name doesn't carry any value of information that we don't already know. Having a named constant that isn't used elsewhere other than at the constructor doesn't really add any value and can be considered to inline.
Just look at this snippet:
```c++
const milliseconds RESOLUTION_5MIN {1s};
m_averager5Min {5min, RESOLUTION_5MIN}

// vs

// Averager(milliseconds duration, milliseconds resolution);
Averager m_averager5Min {5min, 1s};
```
It is easy to see `1s` is supposed to be some kind of ""resolution"" and its type is expected to be `milliseconds`.

However if you really don't share the same vision, then forget it."
559174548,14054,glassez,2021-01-17T12:28:41Z,">Having a named constant that isn't used elsewhere other than at the constructor doesn't really add any value and can be considered to inline.

Seems you're right.
At first I thought of some kind of configuration role, but it seems that it is also conveniently configured without these constants, just by changing the corresponding parameter in the initializer."
559338437,14054,jagannatharjun,2021-01-18T06:21:27Z,"ok, should I move all the member variable initialization in the headers, also note that I have to add `using std::chrono_literals` in the header in that case."
559340922,14054,Chocobo1,2021-01-18T06:30:02Z,">also note that I have to add using std::chrono_literals in the header in that case.

You can use it within `private` section."
560180858,14054,jagannatharjun,2021-01-19T13:39:03Z,"> You can use it within private section.

using namespace is not allowed in class."
560759099,14054,glassez,2021-01-20T08:24:05Z,"IMO, chrono literals is good enough thing to use it across the app so I see nothing bad to have such `using namespace` directive in global scope."
58912308,5090,glassez,2016-04-07T17:34:25Z,"Preferences is deprecated in new code. Don't forget it.
"
58913135,5090,zeule,2016-04-07T17:39:15Z,"I can not imagine how to avoid duplicating of the settings keys constants. Can you suggest anything?
"
58915262,5090,zeule,2016-04-07T17:51:34Z,"Well, maybe four static functions in the `TorrentFileProcessignGuard`  will do the trick, but the class interface will look not that clean.
"
58920195,5090,glassez,2016-04-07T18:22:12Z,"Well, actually it's either bad design or these properties relate to the application as a whole (i.e. must belong to the Application class).
"
58949811,5090,zeule,2016-04-07T21:39:16Z,"The thing is there is no single function which does the torrent import (and **that** is bad design).  Hence the class to reuse the code. The preferences are in the `TorrentFileProcessignGuard` now.
"
58999000,5090,glassez,2016-04-08T09:11:39Z,"> The thing is there is no single function which does the torrent import (and that is bad design). 

I agree with you. I don't like it. But, in any case, now it is much better than it was before 3.3.x. It's a pretty complex case. I'm considering it a little from time to time. And I think I found some solution on this problem. If I'm not mistaken, I will publish it later.

> Hence the class to reuse the code. The preferences are in the TorrentFileProcessignGuard now.

Okay. At least it's good as a workaround.
"
59324258,5090,glassez,2016-04-12T05:59:00Z,"It is better to consider this class as a separate component and put it in its own *.h/*.cpp files (along with its base class or merge these two classes into one). Utils must contain only simple logic routines that are independent from the logic of the application.

P.S. You do not need to rush in search of that does not meet my approval. Perhaps you will find it. As I have repeatedly said, we are constantly improving our code, but we can not change it all at once. Therefore, there is still contains a lot of ""bad"" fragments which can not be regarded as examples to follow.
"
59493420,5090,glassez,2016-04-13T05:11:01Z,"@evsh, ???
"
59547602,5090,zeule,2016-04-13T13:32:54Z,"Sorry, can't understand your question.
"
59553812,5090,glassez,2016-04-13T14:08:01Z,"Move TorrentFileProcessingGuard class and its base class to `base/torrentfileprocessingguard.h`/`base/torrentfileprocessingguard.cpp`  (and probably merge it with its base class). Move these class names outside Utils namespace.
"
59566259,5090,glassez,2016-04-13T15:11:35Z,"And maybe remove `processing` from class name? IMO, **TorrentFileGuard** is enough.
"
59586749,5090,zeule,2016-04-13T17:10:39Z,"OK, will move them into their own file.
"
59602271,5090,glassez,2016-04-13T18:39:05Z,"Then remove `AUTO_DELETE_` prefix from const names since it will become unneeded. It would be better if you will name it just like we did before (in other files): KEY_PROPERTYNAME (if you have no objection in principle to such naming scheme).
Also fix SETTINGS_KEY from `Downloads/` to `TorrentFileGuard/` since we use settings key names based on component names.
"
59602450,5090,glassez,2016-04-13T18:40:04Z,"Fix coding style.
"
59602632,5090,glassez,2016-04-13T18:41:00Z,"Fix coding style for intializer: insert space before.
"
59602784,5090,glassez,2016-04-13T18:41:46Z,"Fix coding style for intializers: insert space before.
"
59606219,5090,zeule,2016-04-13T19:02:28Z,"> Also fix SETTINGS_KEY from `Downloads/` to `TorrentFileGuard/` since we use settings key names based on component names.

Disagree: the class name is an implementation detail, but not a component name. I don't think it shall be present in the configuration file.
"
59617826,5090,zeule,2016-04-13T20:19:26Z,"Uhm... I had to discuss this before, but what's the difference:

``` C++
m_member1{value1}
m_member2(value2)
```

Why do you want space int the first case, but not in the second one?
"
59661961,5090,glassez,2016-04-14T04:27:41Z,"I agree with you partially. But...
1. Objective correspondence between settings names and names of the components/properties is better than subjective separation into groups.
2. qBittorrent configuration file is mostly implementation detail and it isn't a user configuration interface.
"
59663318,5090,glassez,2016-04-14T04:57:25Z,"Then why don't you use the second one? 
Joke.

Old-style initializer has almost full compliance with the constructor call, so we use ""function call"" appearance.
New-style initializer is used in more contexts, and in some of them it will look ugly and badly readable if you do not add a space. IMO, without space before it looks ugly in all cases (for the most part due to the nature of the appearance of these characters itself).
"
59672448,5090,Chocobo1,2016-04-14T07:24:59Z,"I suggest do the following changes:

``` diff
@@ -749,24 +749,15 @@
                     <item>
                      <widget class=""QLabel"" name=""deleteTorrentWarningIcon"">
                       <property name=""sizePolicy"">
-                       <sizepolicy hsizetype=""Minimum"" vsizetype=""Preferred"">
+                       <sizepolicy hsizetype=""Fixed"" vsizetype=""Preferred"">
                         <horstretch>0</horstretch>
                         <verstretch>0</verstretch>
                        </sizepolicy>
                       </property>
-                      <property name=""text"">
-                       <string>I</string>
-                      </property>
                      </widget>
                     </item>
                     <item>
                      <widget class=""QLabel"" name=""deleteTorrentWarningLabel"">
-                      <property name=""sizePolicy"">
-                       <sizepolicy hsizetype=""MinimumExpanding"" vsizetype=""Preferred"">
-                        <horstretch>0</horstretch>
-                        <verstretch>0</verstretch>
-                       </sizepolicy>
-                      </property>
                       <property name=""toolTip"">
```
"
59672489,5090,Chocobo1,2016-04-14T07:25:19Z,"I don't think you need to set a `buddy()`?
"
59673200,5090,Chocobo1,2016-04-14T07:31:14Z,"shouldn't you put this into `settings_group`?
i.e. `Torrent settings` groupbox.
"
59673419,5090,Chocobo1,2016-04-14T07:33:46Z,"~~why html tags here? Is pure text not enough?~~
anyway, for me, `quot;` isn't replaced to `""` when I look at the toolTip
"
59674357,5090,Chocobo1,2016-04-14T07:43:56Z,"`quot;` isn't replaced properly.

Using Qt Designer to input the text does produce the well-formed string for me...
"
59686233,5090,glassez,2016-04-14T09:19:24Z,"`AUTO_DELETE_` is redundant, as I said before.
"
59687015,5090,glassez,2016-04-14T09:26:08Z,"I see you know a lot of these new-fangled words!.. :)
"
59687291,5090,glassez,2016-04-14T09:28:25Z,"Imported???
I don't remember that we used this term for it.
Why not ""Added""?
"
59703447,5090,zeule,2016-04-14T11:50:26Z,"I call it from a destructor and thus do not want a reader to worry. 
"
59703648,5090,zeule,2016-04-14T11:52:24Z,"The word ""added"" has too many meanings, wanted to be  more precise here.
"
59703837,5090,zeule,2016-04-14T11:54:13Z,"~~This text was produced by Qt Designer, version 5.6.0~~
~~No, it is the editor which was used to remove `&amp;` inserted by Designer into every screen label.~~

Again I'm wrong. My Designer inserts `quot;` and shows them correctly.
"
59705620,5090,glassez,2016-04-14T12:09:57Z,"OK. But ""Import torrent"" is already being used in qBittorrent in another sense.
"
59707342,5090,zeule,2016-04-14T12:24:13Z,"I have to find another word then. ""Add"" is meaningless. 
"
59722543,5090,glassez,2016-04-14T14:05:43Z,"Context is ""Add torrent to session"". Or it isn't?
"
59725165,5090,zeule,2016-04-14T14:19:31Z,"> Context is ""Add torrent to session"". Or it isn't?

Exactly. The action which is done: the .torrent file was read and imported into the qBt. This action is called ""Add torrent"" in the menu.
"
59726019,5090,zeule,2016-04-14T14:24:13Z,"Consider the following scenario, please: 
The `Session` class is refactored and the `TorrentFileGuard` becomes unneeded. Will you break the configuration, add a migration code or leave `TorrentFileGuard/` key in the `Session` class?
"
59726410,5090,zeule,2016-04-14T14:26:01Z,"@LordNyriox: you just demonstrated the problem with ""Added"". Without knowing the context you can't understand what this is about. 
"
59728739,5090,glassez,2016-04-14T14:39:07Z,"The same can be said about ""Imported"". Besides, as I said, ""Import torrent"" has a different meaning in qBittorrent.
Maybe ""Accepted""?
"
59730816,5090,glassez,2016-04-14T14:49:58Z,"It makes sense. I agree. But then we have to create an elaborate grouping. `Download` is also not suitable here. Also the names of the options should be more ""descriptive"".
"
59732378,5090,zeule,2016-04-14T14:57:44Z,"OK, I'll find a better name. But not the `TorrentFileGuard` :)
"
59733685,5090,glassez,2016-04-14T15:04:51Z,"Maybe put these options in 'Application` group?
"
59745743,5090,glassez,2016-04-14T16:14:05Z,"""Read"" is incorrect here, because we have read the file in any case, whether we added it to the session later or not.
"
59899002,5090,zeule,2016-04-15T16:10:10Z,"@LordNyriox, @glassez: thank you for your suggestions! And the winner is... No, I just give up and propose `markAsAddedToSession()`. What do you think?  
"
59908318,5090,glassez,2016-04-15T17:16:39Z,"Ok. All ingenious is simple.
"
60990443,5090,sledgehammer999,2016-04-25T21:12:57Z,"I think according to our recent discussions this should under ""Core/AutoDeleteTorrents/"" to avoid multiple small modules in the conf file.
@glassez 
"
60990641,5090,sledgehammer999,2016-04-25T21:14:14Z,"I think our style in this case uses:

``` c++
FileGuard::FileGuard(const QString &path)
    : m_path {path}
    , m_remove {true}
{
}
```

like you do at `TorrentFileGuard::TorrentFileGuard`
"
60991152,5090,sledgehammer999,2016-04-25T21:17:25Z,"Also can you teach me on what this C++11 feature does: What do you do `m_path {path}` instead of `m_path(path)`?
"
60991555,5090,sledgehammer999,2016-04-25T21:20:12Z,"prefix ""KEY_""
"
60991810,5090,sledgehammer999,2016-04-25T21:22:03Z,"Typo: accordingly
"
60992214,5090,zeule,2016-04-25T21:25:01Z,"`const QString KEY_AUTO_DELETE_ENABLED = AUTO_DELETE_SETTINGS_KEY(""DeleteAddedTorrents"");` ?
"
60992227,5090,sledgehammer999,2016-04-25T21:25:10Z,"Should the Checkbox always be visible but its checked state be dependent on the setting?
"
60992618,5090,sledgehammer999,2016-04-25T21:27:53Z,"Better set this Tooltip in the code in order to strip out the html tags and prevent translators from borking it.
eg Tooltip = start_tags + tr(tooltip plaintext) + end_tags;
"
60992746,5090,sledgehammer999,2016-04-25T21:28:47Z,"I don't think the comma goes here.
"
60992935,5090,sledgehammer999,2016-04-25T21:30:12Z,"same here.
Unless @Chocobo1 has a better alternative.
"
60992974,5090,sledgehammer999,2016-04-25T21:30:21Z,"Same here.
"
60993455,5090,sledgehammer999,2016-04-25T21:33:53Z,"I think you should add this too:

``` c++
connect(deleteTorrentBox, SIGNAL(toggled(bool)), deleteCancelledTorrentBox, SLOT(setEnabled(bool)));
```
"
60993652,5090,sledgehammer999,2016-04-25T21:35:04Z,"And take care disabling it if `TorrentFileGuard::deleteAddedTorrents()` is false.
"
60993658,5090,zeule,2016-04-25T21:35:09Z,"No, readability is not the most important point (however, it allows to find initialisations).  There is no difference in this example between `()` and `{}`. As I pointed out in the discussion, mentioned by @LordNyriox, this is done to make a habit.
"
60994099,5090,sledgehammer999,2016-04-25T21:38:10Z,"Hmm, ok.
"
60994242,5090,sledgehammer999,2016-04-25T21:39:05Z,"Yes. And of course `KEY_AUTO_DELETE_CANCELLED_TORRENTS` too.
"
60994634,5090,zeule,2016-04-25T21:41:31Z,"It would have been disabled if the option is not enabled. Why take space by a disabled checkbox? The dialog is  already quite complex.
"
60995524,5090,zeule,2016-04-25T21:47:20Z,"This is done in the .ui file.
"
60995780,5090,zeule,2016-04-25T21:49:10Z,"See above.
"
61000131,5090,sledgehammer999,2016-04-25T22:21:33Z,"Actually ""Delete .torrent file afterwards"" should be a GroupBox and ""Also when addition is cancelled"" should be a child of it. And the warning label too. This is what we do with other options in that dialog.
"
61000566,5090,sledgehammer999,2016-04-25T22:24:49Z,"> Actually ""Delete .torrent file afterwards"" should be a GroupBox and ""Also when addition is cancelled"" should be a child of it. And the warning label too. This is what we do with other options in that dialog.

Scratch that. You already do this. So just delete the above. I don't hiding options in that dialog. The GroupBox should take care of enabling/disabling its children already.
"
61000653,5090,sledgehammer999,2016-04-25T22:25:26Z,"ok
"
61043105,5090,glassez,2016-04-26T08:03:00Z,"Ok. 
But `AutoDeleteTorrentFile`.
Option names: `WhenAdded` and `WhenCancelled`.
"
61090494,5090,zeule,2016-04-26T14:02:37Z,"Sorry, I'm lost. The checkbox in this dialog (Add Torrent) does not belong to any group. Do you suggest to make it visible always, replacing the `setVisible()` call with `setEnbaled()`?
"
61090782,5090,zeule,2016-04-26T14:04:05Z,"This is not a torrent setting, but rather an app behaviour one. So I disagree.
"
61095918,5090,zeule,2016-04-26T14:31:11Z,"`Core/AutoDeleteAddedTorrentFile` and the keys `Enabled` and `IfCancelled`. What do you think?
"
61202950,5090,glassez,2016-04-27T04:36:12Z,"OMG, there is logical mistake here. We haven't really two options here but only one (AutoDeleteTorrentFile) which can have one of three values: None, Added, All (or Never, IfAdded, Always).
"
61246269,5090,zeule,2016-04-27T12:11:49Z,"But I leave two checkboxes in the settings page, OK? This is because enabling the `Always` mode is really dangerous and I would like to make it an independent user action.
"
61287923,5090,glassez,2016-04-27T16:13:21Z,"It's OK for me unless controversial choice is possible.
"
62433806,5090,sledgehammer999,2016-05-08T15:37:29Z,"delete space between function name and opening parentheses
"
62433865,5090,sledgehammer999,2016-05-08T15:41:44Z,"Since this tooltip doesn't have special html tags, put it in the .ui file.
"
121317486,6952,zeule,2017-06-12T06:28:59Z,"This one and the next 2 lines shall not be needed, as `target_link_libraries(... Qt5::MacExtras)`, initiated by `list (APPEND QBT_QT_COMPONENTS MacExtras)` call above should do the very same."
121321423,6952,Chocobo1,2017-06-12T07:05:41Z,why this fails the compilation?
121324377,6952,Chocobo1,2017-06-12T07:28:15Z,"there are already an `#if defined(Q_OS_MAC)` block at line 210
you should move it there."
121324976,6952,Chocobo1,2017-06-12T07:32:23Z,"I would take out all entries in this `#ifndef` block and move it down to where you put
```c++
#ifndef Q_OS_MAC
     TrayIcon::Style trayIconStyle() const;
```"
121325238,6952,Chocobo1,2017-06-12T07:33:59Z,"move this block under
```
#include ""mainwindow.h""
```"
121325338,6952,Chocobo1,2017-06-12T07:34:43Z,"and move
```c++
#include <QtMac>
#include <QtMacExtras>
```
to here"
121325495,6952,Chocobo1,2017-06-12T07:35:38Z,move this block 1 line up.
121325909,6952,Chocobo1,2017-06-12T07:38:24Z,what its purpose?
121327076,6952,Chocobo1,2017-06-12T07:46:06Z,"is this equivalent? 
```c++
    if (!m_systrayIcon) {
        // Make sure the Window is visible if we don't have a tray icon
        if (pref->startMinimized()) {
            showMinimized();
        }
        else {
            show();
            activateWindow();
            raise();
        }
    }
#ifndef Q_OS_MAC
    else {
        if (!(pref->startMinimized() || m_uiLocked)) {
            show();
            activateWindow();
            raise();
        }
        else if (pref->startMinimized()) {
            showMinimized();
            if (pref->minimizeToTray())
                hide();
        }
    }
#endif
```"
121327383,6952,Chocobo1,2017-06-12T07:48:04Z,change it to `#ifdef Q_OS_MAC` and switch the code
121327887,6952,Chocobo1,2017-06-12T07:50:49Z,change `tr` to `QString`
121328622,6952,Chocobo1,2017-06-12T07:55:03Z,move this block down to under `void toolbarFollowSystem();`
121329121,6952,Chocobo1,2017-06-12T07:57:37Z,write `#ifdef Q_OS_MAC` and switch code.
121332145,6952,Chocobo1,2017-06-12T08:14:56Z,"```c++
if (!appInst) 
  return;

dockMainWindowHandle = this;
// and so on...
```"
121332336,6952,Chocobo1,2017-06-12T08:16:02Z,"move `{` to a newline.
"
121332393,6952,Chocobo1,2017-06-12T08:16:18Z,move { to a newline.
121332788,6952,Chocobo1,2017-06-12T08:18:37Z,pls avoid using underscore in variable names.
121354566,6952,thalieht,2017-06-12T10:06:16Z,"I don't know if it's any different in mac but in KDE if you do this and enable `Use Subcategories` in options, any subcategories vanish from the sidepanel and there doesn't seem to be a way to show them because the expand icon isn't visible.

I realize this is probably out of the scope of this PR, IMO this should be used on all platforms but only when `Use Subcategories` is disabled and maybe reduce the indentation of branches (and the root as much as possible)."
121395401,6952,vit9696,2017-06-12T13:43:59Z,"I thought this myself, but actually it does not work. If I remove these lines, compilation will stop working.
I could not explain the reason and simply hardcoded the variables. I think it is a bug in Qt, because I saw other people doing similar things on the net."
121397780,6952,zeule,2017-06-12T13:52:48Z,"You are right, I forgot that when we migrated from Qt4, I replaced smart commands with direct component names. You have to mention Qt5::MacExtras in target_link_libraries() directly. For instance:
```cmake
if (APPLE)
	target_link_libraries(qbt_gui Qt5::MacExtras)
endif()
```
in src/gui/CMakeLists.txt"
121458065,6952,vit9696,2017-06-12T16:15:21Z,"This removes vertical separators from the toolbar menu, they are invalid in macOS design. As I said above, there is no such concept. One could have space separation or no separation.

I replaced the separators with some extra space, but I think they are fine even if just removed."
121458598,6952,vit9696,2017-06-12T16:17:26Z,"m_systrayIcon is undefined on mac, so one cannot write it this way."
121458971,6952,vit9696,2017-06-12T16:19:10Z,Are you sure this is a correct suggestion? E.g. in Russian I would want to see %1/с not s. Since seconds in Russian are `секунды`.
121461497,6952,vit9696,2017-06-12T16:30:21Z,"Indeed, thanks."
121463116,6952,vit9696,2017-06-12T16:37:15Z,"@thalieht actually I faield to find this option yesterday, and thus assumed that subcategories simply do not work on macOS. Now I found it, thanks :)

I changed the indentation to not be disabled when they are off, but doing something like this for all the platforms is the job of a separate pull request indeed."
121470551,6952,thalieht,2017-06-12T17:08:26Z,"But if `Use Subcategories` is changed it would need a restart for the indentation to change. Is that ok?
If you can make it change without restart i would like to suggest to move this out of the `#if` so all platforms can have it.

Edit: On second thought moving it outside the `#if` wouldn't fit the PR name :)"
121471835,6952,Chocobo1,2017-06-12T17:13:58Z,">Are you sure this is a correct suggestion?

After reading your explanation, obviously not.
IMO, it would be better to add this:
```c++
QtMac::setBadgeLabelText(tr(""%1/s"", ""s is shorthand for seconds"")
    .arg(Utils::Misc::friendlyUnit(status.payloadDownloadRate)));
```
and split the line please.
"
121473590,6952,Chocobo1,2017-06-12T17:21:22Z,">pls avoid using underscore in variable names.

@vit9696 
I think you missed this one."
121474613,6952,vit9696,2017-06-12T17:24:59Z,"Alright, done"
121475109,6952,vit9696,2017-06-12T17:27:03Z,"Of course I could fix it, and I have just done it. Thanks for reminding. But you are right, if I change it outside the preprocessor macro, it wouldn't fit this PR.

I have no development tools installed for the other platforms, but I think it should work fine for them. You or anybody else could submit a new PR removing the ifdefs once this gets merged :)"
121475207,6952,vit9696,2017-06-12T17:27:30Z,"Yep, actually did. Fixed it now."
121480618,6952,Chocobo1,2017-06-12T17:49:14Z,"OK, after searching for some osx toolbar screenshot on google, I get what you mean."
121481759,6952,Chocobo1,2017-06-12T17:53:39Z,"private variables should prepended with `m_`,
thus `m_defaultIndentation`"
121487651,6952,vit9696,2017-06-12T18:17:07Z,Fixed
121565366,6952,Chocobo1,2017-06-13T01:32:29Z,"please do us a favor if you don't mind: remove the curly braces here, it isn't really needed."
121567197,6952,vit9696,2017-06-13T01:52:14Z,ok
121674323,6952,vit9696,2017-06-13T13:18:19Z,"Sorry, but I am not very familiar with Qt, and I do not even have Qt Creator installed.

Quick googling shows me this: https://wiki.qt.io/New_Signal_Slot_Syntax, and by looking at the syntax I am afraid all your code requires such changes, and not just the mac section.

Therefore it is pretty much outside of the scope of this pull request and is better to be done by a Qt dev."
121871290,6952,Chocobo1,2017-06-14T07:21:00Z,"you can either do this change for all platform (no need or `#ifdef`)
or change the options dialog default height (enlarge the number `<height>591</height>` in optionsdlg.ui)"
121885787,6952,vit9696,2017-06-14T08:33:07Z,"Hm, but will this be fine? I do not see many reasons to increase the total height, and I am not sure if reducing the size is ok on all the platforms."
121888078,6952,Chocobo1,2017-06-14T08:43:17Z,"both way will be fine, IMO increasing the dialog height is a safer way to go (if you only need adding little more height)."
121902835,6952,vit9696,2017-06-14T09:47:07Z,"To be honest, I do not think that increasing the dialogue height is a good idea. It already is 615 pixels tall here, plus 75 pixels for the Dock and 25 for the menubar. This makes it pretty big already for smaller screens (e.g. when remoting from iPad, which has 1024x768 res). I reduced the icon size instead."
122570023,6952,Chocobo1,2017-06-17T14:46:57Z,`void paintEvent(QPaintEvent* event) override`
122570033,6952,Chocobo1,2017-06-17T14:47:18Z,I would remove the curly brackets
122570082,6952,Chocobo1,2017-06-17T14:50:16Z,"there is `m_ui->centralWidgetLayout->addWidget(m_tabs);` below, is it possible to move this block near to there?"
122570338,6952,vit9696,2017-06-17T15:02:21Z,"Oh, you actually do use override and this was not intentional… Right, fixed for the rest as well."
122570352,6952,vit9696,2017-06-17T15:02:50Z,Maybe it is indeed more readable.
125839578,6952,zeule,2017-07-06T08:29:03Z,`target_link_libraries(qbt_gui Qt5::MacExtras)` below is not enough?
125881716,6952,zeule,2017-07-06T12:15:20Z,I would like to see the non-modal dialog on other systems as well.
125883279,6952,vit9696,2017-07-06T12:22:52Z,Are those related https://github.com/qbittorrent/qBittorrent/pull/6952#pullrequestreview-43354865?
125883500,6952,vit9696,2017-07-06T12:23:58Z,"Good idea, but definitely out of the scope of this PR, especially because I do not have the dev environment set for mac. I could imagine someone removing the ifdefs for both non-modal dialogues and subcategory padding =)"
125886161,6952,zeule,2017-07-06T12:37:34Z,"Yes. `target_link_libraries(qbt_gui Qt5::MacExtras)` provides ""-I"", ""-L"", and ""-l"" compiler switches."
125940332,6952,vit9696,2017-07-06T15:51:30Z,"Checked it, builds fine without this line. Removed. Thanks =)"
126939730,6952,zeule,2017-07-12T12:29:08Z,Why this is needed and why in GUI build only?
126942076,6952,vit9696,2017-07-12T12:40:12Z,"This is to workaround Qt bugs, examples: [one](https://bugreports.qt.io/browse/QTBUG-52687), [two](https://bugreports.qt.io/browse/QTBUG-58325). From what I can tell there are no proper solutions.

It is necessary for [this file](https://github.com/qbittorrent/qBittorrent/pull/6952/files#diff-cd08514626207f11a4741106092c8404R37) in particular, which is GUI only. Without this define MOC tries to generate systray functions, and even if I let it include QSystemTrayIcon it will later fail with linking errors."
126942924,6952,zeule,2017-07-12T12:44:23Z,But both bugs are marked as resolved. Why do you care about Qt < 5.9.0?
126944328,6952,zeule,2017-07-12T12:50:33Z,I mean Homebrew installs the latest Qt. How a user can get the old version?
126949753,6952,vit9696,2017-07-12T13:13:25Z,"These bugs are marked as resolved, but they are not resolved as of Qt 5.9.1 under our circumstances."
126953339,6952,zeule,2017-07-12T13:27:48Z,"I can not find the same define for qmake build. How does it build then? Also, if this a fix for a specific file and bug, would it be possible to pass the flag for that file target only supplying a comment why the flag is needed?"
126955298,6952,vit9696,2017-07-12T13:35:18Z,"I suppose Qt team fixed the bug for qmake actually (which could be the reason they closed the issue), or your custm Qt build has patches from HomeBrew. It certainly fails with cmake though.

The flag is specific for the header, so there are many cpp files. It is saner to define it for all the files, since this flag is defined everywhere but in MOC for all macOS sources, and not defining it may lead to undefined behaviour in other places.

If you think a different comment is more descriptive, would you suggest anything? Maybe adding some Qt bug links?"
126959616,6952,zeule,2017-07-12T13:52:19Z,"> It is saner to define it for all the files, since this flag is defined everywhere but in MOC for all macOS sources, and not defining it may lead to undefined behaviour in other places.

Nevertheless, I would be as specific as possible. Why don't you use [CMAKE_AUTOMOC_MOC_OPTIONS](https://cmake.org/cmake/help/v3.9/variable/CMAKE_AUTOMOC_MOC_OPTIONS.html#variable:CMAKE_AUTOMOC_MOC_OPTIONS) variable?

> If you think a different comment is more descriptive, would you suggest anything? Maybe adding some Qt bug links?

Exactly. Please, add such a comment."
126963104,6952,vit9696,2017-07-12T14:05:09Z,"Well, I was simply unaware of this feature. Thanks for pointing it out, added."
127588900,6952,sledgehammer999,2017-07-15T17:23:26Z,Why don't you ifdef the whole switch here?
127589137,6952,sledgehammer999,2017-07-15T17:34:45Z,Why did you change it to 62?
127589367,6952,vit9696,2017-07-15T17:45:53Z,"To let it fit the window without showing a vertical scrollbar. See https://github.com/qbittorrent/qBittorrent/pull/6952/files/8f48837ed9fe4799c9f917ff22eab6226371d03d#diff-2c91a19e5c2af0562178cfdaacafa3ec.
I fixed the above one as well, was probably due to an automatic merge of some PR."
127589417,6952,sledgehammer999,2017-07-15T17:48:34Z,"OK.
The link doesn't work for me.
Merge the new commit into the **1st** one. And also rebase.
Then I can merge it."
127589448,6952,vit9696,2017-07-15T17:50:11Z,Done =)
130222233,6952,zeule,2017-07-29T15:01:32Z,"@vit9696, could you test CMake 3.9 and without this define, please? As of version 3.9 CMake generates `moc_predefs.h` as qmake does. "
130224768,6952,vit9696,2017-07-29T17:28:52Z,"Tested, exactly the same error. Find reveals no such file `moc_predefs.h`."
130245295,6952,zeule,2017-07-30T15:33:56Z,Thank you. The results is quite unexpected. 
57511382,4984,glassez,2016-03-26T09:18:35Z,"QByteArray::fromPercentEncoding has wrong behavior too?
"
58651052,4984,glassez,2016-04-06T04:54:04Z,"Did you check whether it breaks the web app or not?
"
58651097,4984,glassez,2016-04-06T04:55:02Z,"Maybe `RawStringMap`?
"
58651280,4984,glassez,2016-04-06T04:58:45Z,"Since we using c++11 now don't insert a space between two (three, four ...) brackets:

``` c++
QListIterator<QPair<QByteArray, QByteArray>> i(url.encodedQueryItems());
```

And in other places too.
"
58651622,4984,glassez,2016-04-06T05:06:01Z,"Why don't you do ""fromPercentEncoding()"" here? Or QUrl doing it itself?
"
58651901,4984,glassez,2016-04-06T05:11:48Z,"Get that out of here. If qBittorrent is not compiled you have, it is the problem of your build configuration.
"
58652025,4984,glassez,2016-04-06T05:14:13Z,"Move this to other system includes and try to keep include list ordered (e.g. don't mix libtorrent/boost/Qt includes).
"
58652071,4984,glassez,2016-04-06T05:15:17Z,"To return Qt implicitly shared types as const reference is overkill.
"
58652229,4984,glassez,2016-04-06T05:18:24Z,"> To return Qt implicitly shared types as const reference is overkill.

as well as use move semantics for it.
"
58653882,4984,glassez,2016-04-06T05:51:12Z,"Since you use PeerBuilder to build a peer no need to implement Peer as class at all. Simple struct is enough here.
As for this method (toEntryForClient()), it has private meaning and can be simply transformed to module wide function `peerToEntry()`. The main idea is to move all private things to .cpp.
"
58653915,4984,glassez,2016-04-06T05:51:50Z,"It's pure private thing so move this into .cpp.
"
58654004,4984,glassez,2016-04-06T05:53:07Z,"Fix coding style for names. We use camelCase (prepended by `m_` prefix for private fields).
"
58654372,4984,glassez,2016-04-06T05:57:31Z,"We don't allow pure static classes, so you must use namespaces in such cases.
But since here we have only module private functions, then just place it in an anonymous namespace in the .cpp file.
"
58654794,4984,glassez,2016-04-06T06:00:26Z,"`m_` prefixed names is reserved for private class fields.
"
58655051,4984,glassez,2016-04-06T06:02:52Z,"Please use shortcuts for unsigned types: `uchar`, `ulong` etc.
"
58655150,4984,glassez,2016-04-06T06:04:36Z,"Please enclose subexpressions for more readability:

``` c++
return ((addr[0] >> 1) == (0xFC >> 1))
```
"
58655218,4984,glassez,2016-04-06T06:05:41Z,"Fix coding style for one line function:

``` c++
{ return a == 0; }
```
"
58655277,4984,glassez,2016-04-06T06:06:42Z,"camelCase
"
58655340,4984,glassez,2016-04-06T06:07:29Z,"Add space after `if` (coding style issue)
And below too
"
58657000,4984,Chocobo1,2016-04-06T06:32:20Z,"shouldn't this be a `typedef`?
"
58657800,4984,glassez,2016-04-06T06:41:13Z,"Remove space after `(`.
"
58657896,4984,glassez,2016-04-06T06:42:20Z,"Use brackets for system includes.
"
58660754,4984,glassez,2016-04-06T07:15:55Z,"OK. I did some research. Ideally, we should leave in the header only the following forward declarations (outside BitTorrent namespace):

``` c++
struct Peer;
struct TrackerAnnounceRequest;

typedef QHash<QString, Peer> PeerList;
typedef QHash<QString, PeerList> TorrentList;
```
"
58663086,4984,glassez,2016-04-06T07:39:50Z,"And then it all makes the PeerBuilder class superfluous!
If you apply my suggestions, you will significantly reduce the amount of code.
"
58664040,4984,glassez,2016-04-06T07:49:07Z,"This is the same in c++11:

> A typedef-name can also be introduced by an alias-declaration. The identifier following the using keyword becomes a typedef-name and the optional attribute-specifier-seq following the identifier appertains to that typedef-name. It has the same semantics as if it were introduced by the typedef specifier. In particular, it does not define a new type and it shall not appear in the type-id.
"
58687481,4984,Chocobo1,2016-04-06T11:08:52Z,"> This is the same in c++11:

Thank you.
From my view point, it comes down to whether you are going to define a type, which is also stated in what you quote:

> it does not define a new type and ...

In this specific scenario, I interpret the author is defining a type, because `QByteArrayMap` is used non locally.
And another weaker argument, the `typedef` is just above it... mixing like this is weird IMO.
"
58688361,4984,Chocobo1,2016-04-06T11:18:21Z,"https://stackoverflow.com/questions/10747810/what-is-the-difference-between-typedef-and-using-in-c11#comment25929444_10748056
seems `using` syntax is extended because of problems working with template.
"
58927948,4984,glassez,2016-04-07T19:10:51Z,"Now `requestparser.cpp` changes look good.
"
58928302,4984,glassez,2016-04-07T19:13:05Z,"Just create Request struct with `RawStringMap gets`. As there can be any binary data according to the standard, it is fully consistent with the model (no need to complicate it). As I said, parsing of these data is the task of the application. In our case, we can consider each Action (eg. `action_query_torrents()`) as a separate application, so we should parse GET params in these actions.
"
58928375,4984,glassez,2016-04-07T19:13:35Z,"More comments will be tomorrow.
"
58981512,4984,glassez,2016-04-08T05:24:58Z,"Fix coding style.
Only one blank line allowed.
"
58981553,4984,glassez,2016-04-08T05:26:02Z,"Fix coding style.
"
58981607,4984,glassez,2016-04-08T05:27:18Z,"Fix coding style.
And in similar cases too.
"
58981652,4984,glassez,2016-04-08T05:28:30Z,"Fix coding style for lambda body.
"
58981836,4984,glassez,2016-04-08T05:32:24Z,"Although it does not violate our rules (we just don't have anything for this), but it is better to enclose the subexpressions in parentheses. This improves readability and can save you from random errors if you mix up the precedence of operators.

P.S. My ""general"" comments (like this one) relate not only to the linked line, but to all code.
"
58982017,4984,glassez,2016-04-08T05:35:51Z,"Redundant blank line.
"
58982090,4984,glassez,2016-04-08T05:37:21Z,"Fix coding style.
"
58982288,4984,glassez,2016-04-08T05:41:34Z,"Fix coding style.
`m_` prefix is used for **private** fields only.

Also keep the fields together and methods (including operators) together.
"
58982644,4984,glassez,2016-04-08T05:49:46Z,"> I guess I didn't quite get what you mean by moving pure private thing to .cpp. I would appreciate if you could clarify this matter.

Peer and TrackerAnnounceRequest structs are used internally only so, as I said before, move its declarations to .cpp (not use anonymous namespace for it)  and use forward declarations here (outside BitTorrent namespace):

``` c++
struct Peer;
struct TrackerAnnounceRequest;

typedef QHash<QString, Peer> PeerList;
typedef QHash<QString, PeerList> TorrentList;

namespace BitTorrent
{
```

Also move Peer methods definitions in struct itself (no need to separate it since we have it in .cpp).
"
58983009,4984,glassez,2016-04-08T05:57:02Z,"I mean you shouldn't include `<boost/asio/impl/src.hpp>` here. If you can't build qBittorrent without this, you've incorrectly set up your build environment.
"
59044271,4984,SeigneurSerpent,2016-04-08T15:37:27Z,"@glassez 
The problem turned out to be that some boost asio dynamic libraries could be compiled without rvalue reference move support. All Travis-ci comilation attempts would fail without this inclusion. So I disabled the generation of moves. Thanks for pointing it out.
"
59045597,4984,glassez,2016-04-08T15:45:48Z,"fromUtf8
Meaning: we create QString **from** UTF-8 encoded data.
Besides, I don't think this shortcut is so necessary. 
"
59046898,4984,glassez,2016-04-08T15:54:27Z,"`fromUtf8()` only makes sense for the category. All other parameters have been designed to contain either numbers or latin-1 string. But you may leave it.

Also fix coding style in this line.
"
59047021,4984,glassez,2016-04-08T15:55:25Z,"fromUtf8() is meaningless here.
"
59047112,4984,glassez,2016-04-08T15:56:05Z,"fromUtf8() is meaningless in these 2 lines.
"
59047737,4984,glassez,2016-04-08T16:00:37Z,"I told you to move these declarations outside the BitTorrent namespace. No need to put these **private** name here.
"
59048445,4984,glassez,2016-04-08T16:05:41Z,"Why method body isn't here?
"
59048941,4984,glassez,2016-04-08T16:09:08Z,"Redundant blank line.
"
59064812,4984,glassez,2016-04-08T17:57:35Z,"Damn, I wanted to say that everything is OK... Why do you complicate everything? Why are you not doing just `QString::fromUtf8(gets[""category""])`?
"
59066658,4984,SeigneurSerpent,2016-04-08T18:11:13Z,"As far as I know, a general Utf-8 byte sequence could contain null byte somewhere in the middle. So I decided to be a little cautious by supplying length. Certainly a category could never contain contain such a symbol.
I will remove the length.
"
59067145,4984,glassez,2016-04-08T18:14:17Z,"I think the Qt developers took that into consideration and QString::fromUtf8() works properly.
"
59098870,4984,zeule,2016-04-08T22:39:44Z,"In the correct UTF-8 string null byte means end of string and can not appear as a part of another character, and that is one of the reasons why UTF-8 is so popular.
"
59100020,4984,zeule,2016-04-08T22:55:28Z,"I find this function useless and dangerous. It is used, as far as I see, for string parsing only. If (most likely) the length of the string is not larger than `std::numeric_limits<int>::max()`  the check in it is useless. If it is larger, than it is useless nevertheless because truncating the string we reschedule problem, and it might occur at a place, little correlated with this function. Should there be a `static_cast` anybody will feel that something can go wrong and easily find those places (and that would silence compiler as well).
"
59100578,4984,zeule,2016-04-08T23:02:54Z,"On every usage this string is either converted to `std::string` or used in `QString::arg()`. Why then to store it in 2-byte encoding? 
"
59100861,4984,zeule,2016-04-08T23:06:30Z,"This one is not used as `QString` at all as far as I can see, and gets converted to `std::string` always.
"
59115328,4984,SeigneurSerpent,2016-04-09T13:37:31Z,"When I was writing this I was concerned about the general case in which a conversion from 64-bit or 32-bit unsigned size_t to a signed 32-bit int could produce a negative number. If the receiving function does not have a proper check, then it could lead to something like undefined behavior. I chose the minimum of the two numbers just to get the program running in this case. Thanks to another your comment, I eliminated all places where the conversion was necessary, hence problem doesn't really matter anymore. Anyway, thanks for the advice. 
"
59115415,4984,SeigneurSerpent,2016-04-09T13:48:28Z,"Good point, I've converted ip strings to boost::asio::ip::addresses. It has allowed to remove some redundant conversion code.
"
59115437,4984,SeigneurSerpent,2016-04-09T13:50:05Z,"Thanks for the insight!
"
59136308,4984,zeule,2016-04-10T16:00:20Z,"Although I haven't tried it myself, Qt5 documentation example for this function shows that characters from the `exclude` parameter are used as addition to the standard set of [a-zA-Z0-9] and ""-"" / ""."" / ""_"" / ""~"". Thus, I believe, the call can be simplified:

``` C++
QByteArray encoded = str.toPercentEncoding(""!()*"");
```
"
59136419,4984,zeule,2016-04-10T16:06:59Z,"The `toUtf8()` call here confuses me. Can a string consisting of an IP and a port number contain anything except ASCII?
"
59136591,4984,glassez,2016-04-10T16:18:09Z,"But you know that toUtf8() will produce the correct value here! Or do you fundamentally want to have toLaton1() here?
"
59136757,4984,zeule,2016-04-10T16:30:08Z,"I want the code to be clean and to have an obvious meaning. `toUtf8()` makes me think that this piece of the code might be a leftover from a refactoring, a part of string might be forgotten or something like that. This gives me a feeling that I simply don't understand this fragment. So, yes, I want either a comment or `toLatin1()`.
"
59454213,4984,SeigneurSerpent,2016-04-12T21:09:21Z,"Amended
"
59454234,4984,SeigneurSerpent,2016-04-12T21:09:31Z,"Corrected
"
61909651,4984,sledgehammer999,2016-05-03T16:14:28Z,"Keep in mind that I am not good with networking details but wouldn't be here to use the `announceIpStr` instead of the `ipStr`. (In case 2 different peers come from inside the same NAT).
"
61910374,4984,sledgehammer999,2016-05-03T16:19:26Z,"Scratch that. I know realize that the NAT's ip would be a public ip, but a peer from behind a NAT would see/use a private ip.
"
61913298,4984,sledgehammer999,2016-05-03T16:38:16Z,"Unless I am mistaken, this is a totally unrelated change, right?
"
61913765,4984,sledgehammer999,2016-05-03T16:41:41Z,"You need to save the external ip. Currently the session_settings are reapplied if the user changes something in the settings window. Thus, in that case the possibly empty announce_ip will override the external ip that you set here.
Take a look at `Session::setSessionSettings()`.
"
61915677,4984,sledgehammer999,2016-05-03T16:54:28Z,"I am bit confused here. I tracked back where `annonceReq.peer.ip` comes from and I think it is the IP of the client requesting the peer list. So why does `peerToEntry()` potentially return his IP back?
"
61916274,4984,sledgehammer999,2016-05-03T16:58:12Z,"> I am bit confused here. I tracked back where annonceReq.peer.ip comes from and I think it is the IP of the client requesting the peer list. So why does peerToEntry() potentially return his IP back?

Damnit. I messed up reading the code. Ignore The above. I'll come back if I figure it out.
"
61920359,4984,sledgehammer999,2016-05-03T17:23:55Z,"Why should we care if the currently connected peer has a public IP?
"
61920554,4984,sledgehammer999,2016-05-03T17:25:03Z,"The same here. Why should we care? The routable test should take of it.
"
64151512,4984,SeigneurSerpent,2016-05-22T15:29:18Z,"The PR changes the way GET query parameters are decoded. RequestParser used to convert them directly into QString expecting the percent-encoded byte sequence to be UTF-8. On the other hand, tracker announce url can contain arbitrary percent-encoded 20-byte sequences in info_hash and peer_id parameters that have no valid UTF-8 representation. Therefore RequestParser is change to decode to QByteArray and anything that expects QString should make a second conversion from QByteArray to QString. Qt4 makes implicit conversion to QString using  fromAscii() and Qt5 uses fromUtf8(). That is why explicit QString::fromUtf8() is used for 'category'.
"
64151519,4984,SeigneurSerpent,2016-05-22T15:29:41Z,"Fixed
"
64151580,4984,SeigneurSerpent,2016-05-22T15:33:18Z,"The purpose is to give external ip to external client and otherwise - connection ip. Otherwise two local clients on the same network behind a NAT router might not be able to share private torrents. If public ip is announced by default(inferred router's external ip and set in Session::handleExternalIPAlert()) and tracker returns external announceIp to local clients, then they will try to connect to the router and fail. 
"
64151583,4984,SeigneurSerpent,2016-05-22T15:33:32Z,"Fixed
"
65786201,4984,ngosang,2016-06-03T22:43:20Z,"Minor change: 192.168.0.1 is a LAN IP, change it for a WAN IP e.g. 87.125.203.161
"
484021624,13327,glassez,2020-09-06T04:56:28Z,I don't think setting project version for each build system configuration independently is a good idea.
484022055,13327,glassez,2020-09-06T05:02:27Z,This and related changes (removal of FindLibtorrent file) seems quite trivial and independent so you can extract it into separate PR.
484022428,13327,glassez,2020-09-06T05:07:41Z,"I don't remember it being present the last time I reviewed it (or I didn't notice it because of other issues).
It is very questionable (as well as current splitting into several libraries), so I would remove it before it becomes a new stumbling block here."
484022659,13327,glassez,2020-09-06T05:10:36Z,What is it for?
484022849,13327,glassez,2020-09-06T05:13:33Z,"Is it hard to extract this change into separate PR?
I mean removing this file and using `feature_option` instead of `optional_compile_definitions`?"
484023029,13327,glassez,2020-09-06T05:15:57Z,Can't removing of this file and related changes be trivially extracted into separate PR?
484023163,13327,glassez,2020-09-06T05:17:50Z,Isn't a good candidate for extracting?
484023376,13327,glassez,2020-09-06T05:20:45Z,"Isn't a good candidate for extracting?
You can extract all similar (more or less) trivial cleanups into separate PR."
484042374,13327,glassez,2020-09-06T08:51:36Z,Why do you change it to INTERFACE?
484044674,13327,glassez,2020-09-06T09:14:54Z,"What is `_DEFAULT_SOURCE` intended for, and why is it not available in all Unix-like environments?"
484047224,13327,glassez,2020-09-06T09:40:55Z,Single blank line is enough.
484047480,13327,glassez,2020-09-06T09:42:45Z,`if (SNS_SUPPORT)`
484057074,13327,glassez,2020-09-06T11:21:43Z,"IMO, this comment isn't needed here."
484057527,13327,glassez,2020-09-06T11:26:43Z,I would still prefer this way since it clearly shows that it is feature-dependent declaration (as suggested for entire this approach).
484057729,13327,glassez,2020-09-06T11:29:07Z,Are you sure it isn't applicable on Cygwin?
484058317,13327,glassez,2020-09-06T11:34:46Z,Why is it needed?
484059182,13327,glassez,2020-09-06T11:42:59Z,If you move PRIVATE to the previous line you'll keep one indentation level. There is no other items except private ones.
484059237,13327,glassez,2020-09-06T11:43:35Z,The same as above.
484059658,13327,glassez,2020-09-06T11:47:01Z,Please don't use multiple spaces in such a way.
484059767,13327,glassez,2020-09-06T11:48:02Z,This too.
484060743,13327,glassez,2020-09-06T11:56:55Z,"Please keep current name.
Just do as I ask, or extract it into separate PR and let's discuss it."
484061588,13327,glassez,2020-09-06T12:04:32Z,I would still split Platform and Feature conditions even if it adds yet another indentation level.
484061957,13327,glassez,2020-09-06T12:07:50Z,Please explain the changes like this one.
484062216,13327,glassez,2020-09-06T12:10:24Z,I would move this and the next `if`s outside of outer one.
485134005,13327,FranciscoPombal,2020-09-08T19:02:16Z,"In this new implementation, it has to be `INTERFACE` because `app` needs access to it. If you try building it with `PRIVATE`, accessing the WebUI will just yield a web page saying ""Not Found""."
485140912,13327,FranciscoPombal,2020-09-08T19:15:48Z,"@glassez 

I mostly left it there because it was there previously. It's a glibc thing, I think it's ""common practice"" to define it. Otherwise, gcc can complain about some implicit function declartions, if we use those certain functions.

There is probably no problem in defining it in other systems I guess (they probably just ignore it). I wonder if it's a problem for Linux systems using something like `musl` though.

At the moment, we don't need it - I just tried building without it and got no warnings. Should I remove it? I think this is mostly for C stuff anyway, not C++.

More info: 

https://stackoverflow.com/questions/29201515/what-does-d-default-source-do (also read the second answer)
https://www.gnu.org/software/libc/manual/html_node/Feature-Test-Macros.html."
485144284,13327,FranciscoPombal,2020-09-08T19:22:20Z,"@glassez 

Isn't this meant to replace qmake in the somewhat near future? I made this change because I didn't think it was a good idea to always read this from the `.pri` and therefore have the CMake buildsystem implicitly depending on the qmake one. In fact, it's not even a good idea to pass the project version as a compile definition, since it causes recompilation of everything. Having it defined this way is the first step towards a minor version number-related refactor I have planned for the future that will solve this problem.

In the meantime, it's one more number to change in commits that increment the version - not much more work, and I'll make sure to nag about it if anyone forgets."
485144761,13327,FranciscoPombal,2020-09-08T19:23:16Z,"@glassez I don't think so. These are some of the most important changes in this PR, despite their apparent simplicity."
485150854,13327,FranciscoPombal,2020-09-08T19:35:16Z,"@glassez 

`BUILD_SHARED_LIBS` is a built-in CMake construct. It makes every ""naked"" `add_library()` call (i.ie., one that **does not** specify `STATIC` or `SHARED`) act as `STATIC` or `SHARED`, depending on whether it is `OFF` (default) or `ON`, respectively. Wrapping it in inside `feature_option()` is just a convenience to have its description printed out - it makes sense to me for it to be printed, since it provides such important functionality and is already there.

When it's off (the default) it doesn't change anything that we were already doing.

Declaring libraries with ""naked"" `add_library()` is good for flexibility, because it gives the builder the choice via the simple meachanism of passing `-DBUILD_SHARED_LIBS=ON/OFF`. Currently, qBittorrent does not build at all with `-DBUILD_SHARED_LIBS=ON` (hence the note about ""experimental development purposes""), but this may change in the future, unless we decide that there is no `add_library()` call in our codebase that would ever make sense to offer such flexibility.

Docs: https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html"
485152666,13327,FranciscoPombal,2020-09-08T19:38:57Z,"@glassez 

It's a replacement for the previous `alpha1` ""status version"" string (since we're no longer reading it from the `.pri` file). Like previously, it is appended to the project version, so that it becomes something like `4.3.0.0dev`. I might flesh this out further or remove it in the future refactor mentioned in https://github.com/qbittorrent/qBittorrent/pull/13327#discussion_r485144284."
485154818,13327,FranciscoPombal,2020-09-08T19:43:09Z,"@glassez 

Too complex to factor this out IMO, if you don't want it too be changed at all in this PR. It actually sets global compile definitions via directory-level properties which is very incompatible with the new architecture."
485157109,13327,FranciscoPombal,2020-09-08T19:47:18Z,"@glassez 

IMO, if we keep it in this PR, we signal the intent that it is used/will be used. Since it is no longer used, from here on out, it is also removed at this point. It should definitely be its own separate commit though."
485157340,13327,FranciscoPombal,2020-09-08T19:47:46Z,@glassez same reasoning as  https://github.com/qbittorrent/qBittorrent/pull/13327#discussion_r485157109.
485157529,13327,FranciscoPombal,2020-09-08T19:48:07Z,@glassez same reasoning as  https://github.com/qbittorrent/qBittorrent/pull/13327#discussion_r485157109.
485160366,13327,FranciscoPombal,2020-09-08T19:53:48Z,"@glassez I changed it for good reason - to not clash with the project name (the name passed in the call to `PROJECT()`). Otherwise it is confusing and there may be surprises, because CMake defines variables based on the project name."
485162868,13327,FranciscoPombal,2020-09-08T19:58:36Z,"Similar reasoning to https://github.com/qbittorrent/qBittorrent/pull/13327#discussion_r485134005. `app` needs access to this. In this new architecture, if this is `PRIVATE`, you'll end up with missing/broken stuff in the `About` dialog."
485165471,13327,FranciscoPombal,2020-09-08T20:03:45Z,"@glassez Not sure, now that I really think about it. What do you think? Should I enable it for Cygwin?"
485169670,13327,FranciscoPombal,2020-09-08T20:12:14Z,@glassez fixed.
485169761,13327,FranciscoPombal,2020-09-08T20:12:25Z,@glassez fixed.
485169844,13327,FranciscoPombal,2020-09-08T20:12:36Z,@glassez fixed.
485169936,13327,FranciscoPombal,2020-09-08T20:12:46Z,@glassez fixed.
485170148,13327,FranciscoPombal,2020-09-08T20:13:14Z,"@glassez fixed, and fixed all such cases of excessive indentation."
485170227,13327,FranciscoPombal,2020-09-08T20:13:24Z,@glassez fixed.
485170312,13327,FranciscoPombal,2020-09-08T20:13:35Z,@glassez fixed.
485170373,13327,FranciscoPombal,2020-09-08T20:13:43Z,@glassez fixed.
485173818,13327,FranciscoPombal,2020-09-08T20:20:28Z,@glassez fixed.
485175531,13327,FranciscoPombal,2020-09-08T20:23:59Z,@glassez fixed.
485180317,13327,FranciscoPombal,2020-09-08T20:33:52Z,"@glassez 

If the package is found without pkg-config, we set the `TYPE` to `REQUIRED`, so that it displays correctly as a required package. This is all due to the fact that on Linux, we first find libtorrent as a non-`REQUIRED` package to give it a second chance with pkg-config."
485356593,13327,glassez,2020-09-09T05:59:28Z,">Isn't this meant to replace qmake in the somewhat near future? 

I think it's more about a few years.
Most likely, we should make both systems equally ""official"" with the start of Qt6 support. So I would not want edit several different files to change the project version, which can cause a lack of synchronization."
485363087,13327,glassez,2020-09-09T06:17:43Z,">These are some of the most important changes in this PR

...that doesn't prevent it from separating from everything else.
Let me remind you again that my intention is to separate the easily understandable (separate) parts so that we can quickly review and merge them, which should simplify the reviewing of the remaining part. It really takes too much time to review all current PR every time you change it."
485372928,13327,glassez,2020-09-09T06:40:59Z,"Currently qBittorrent isn't supposed to be a set of several libraries.
The fact that CMake project divides it into several (static) libraries can only be considered as a workaround that allows CMake to follow the file structure of the project's source code (perhaps due to some drawbacks that prevent it from being done in another way).
You should not change this here, especially since the build as a set of shared libraries is not possible currently (at least on Windows, it requires changes to the source code)."
485373935,13327,glassez,2020-09-09T06:43:17Z,Anyway we should use the same value in both build systems.
485376993,13327,glassez,2020-09-09T06:49:30Z,">if we keep it in this PR, we signal the intent that it is used/will be used

When I suggest separating something from this PR into a separate one, I assume that it should be reviewed and merged before this one."
485378691,13327,glassez,2020-09-09T06:52:59Z,At least you shouldn't separate different Unix systems according to it. Let either declare or remove it everywhere.
485448304,13327,glassez,2020-09-09T08:52:44Z,">Should I enable it for Cygwin?

I think Yes. "
485453351,13327,FranciscoPombal,2020-09-09T09:00:09Z,"@glassez 

> Currently qBittorrent isn't supposed to be a set of several libraries.
The fact that CMake project divides it into several (static) libraries can only be considered as a workaround that allows CMake to follow the file structure of the project's source code (perhaps due to some drawbacks that prevent it from being done in another way).

When shared libraries are out of the question, the Professional CMake book still recommends building projects as a set of static libraries, as opposed to using plain `OBJECT` libraries, unless there is a special reason that requires its semantics.

> You should not change this here,

I did not change anything - like I said - `BUILD_SHARED_LIBS` is something that always exists, even if you don't do anything, and it's `OFF` by default. Like previously, the project is till built as a set of static libraries by default.

> especially since the build as a set of shared libraries is not possible currently (at least on Windows, it requires changes to the source code).

Yes, I know such a build is currently not possible, hence the ""(for experimental development purposes)"" part of the description. No one would normally turn the feature on.

The question becomes: do you think such a build with shared libraries will never be possible, or that it doesn't make sense to indicate that one day it might be? If so, it is a good idea to remove this. Otherwise, we can keep it in, it might encourage someone to investigate and submit patches to make it happen."
485454736,13327,FranciscoPombal,2020-09-09T09:02:10Z,@glassez Fixed (changed to `alpha1`). Although I would have preferred changing both to `dev`... but that can be a discussion for another time.
485459927,13327,FranciscoPombal,2020-09-09T09:09:44Z,"@glassez Well, since you have no reasons for keeping it either, I've removed it."
485475925,13327,FranciscoPombal,2020-09-09T09:34:17Z,"@glassez 

> It really takes too much time to review all current PR every time you change it.

This not something that I have changed since the previous PR. In fact, this part has not changed since before I unmarked the other one as draft. This change in how libtorrent is found has always been one of the primary motivations for this whole thing. Previously it was too complex and relied on a self-bundled find module that required maintenance, lest it become to outdated and cause problems.

Now it is really simple:

- If not on ""Unix"", find libtorrent as a `REQUIRED` package just like every other package that's mandatory for compilation.
- If on ""Unix"", first find libtorrent as a non-`REQUIRED` package, so that if it fails, there is the second chance of finding it with pkg-config.
    - In either case, set its properties indicate that it's a `REQUIRED` package so that it shows up correctly in the feature summary output in the list of `REQUIRED` packages.

`CMAKE_FIND_PACKAGE_PREFER_CONFIG` is set to on so that CMake first tries to find packages by CMake config files, before trying to find them via `Find<Pkg>` modules. If a distro maintainer builds libtorrent in such a way that it doesn't provide CMake config files, and pkg-config is not desirable/available, they can still bundle their custom `FindLibtorrent.cmake` module in the `cmake/Modules` directory, and CMake will use that.
Finding packages via CMake config files supplied by the libraries themselves is the preferable way. For example, this is how Qt5 packages are found."
485482243,13327,FranciscoPombal,2020-09-09T09:45:03Z,"@glassez 

> So I would not want edit several different files to change the project version

This is simply the price to pay for maintaining 2 different build systems like this. But it's not a very high one - it's just a single additional line change, and not very often. We're much worse off if we couple parts of one buildsystem's logic to the other IMO.

>I think it's more about a few years.
Most likely, we should make both systems equally ""official"" with the start of Qt6 support.

Oh god..."
485500222,13327,FranciscoPombal,2020-09-09T10:15:17Z,@glassez fixed.
485502819,13327,glassez,2020-09-09T10:20:17Z,">This is simply the price to pay for maintaining 2 different build systems like this. But it's not a very high one - it's just a single additional line change, and not very often

Okay, it's not that much of a problem for me if others agree with you."
485507495,13327,glassez,2020-09-09T10:29:11Z,"@FranciscoPombal, are you kidding me by writing such long comments? 🤔
You didn't add anything new to what was said about it earlier.
But nevertheless, after reading this comment even for the first time, someone realizes that these changes are independent enough to become a separate PR. However, as you wish... if this insistence of yours increases the review time (there will be at least one other reviewer who is most likely not so familiar with the content of these changes), you are to blame."
485509524,13327,glassez,2020-09-09T10:33:08Z,">@glassez Well, since you have no reasons for keeping it either, I've removed it.

Don't count on me here. I'm not sure what it is, why it's needed, or whether we can safely remove it."
485530481,13327,FranciscoPombal,2020-09-09T11:13:58Z,"@glassez 

> @FranciscoPombal, are you kidding me by writing such long comments? 🤔
> You didn't add anything new to what was said about it earlier.

I'm just trying to explain as clearly as possible, so that there is no misunderstanding (even for the benefit of others). If I really wanted to insult you, I would.

> But nevertheless, after reading this comment even for the first time, someone realizes that these changes are independent enough to become a separate PR. 

I have already stated that I agree with separating into separate commits after the initial review is finished, but separating essential parts of the PR into separate PRs doesn't make sense.

> However, as you wish... if this insistence of yours increases the review time (there will be at least one other reviewer who is most likely not so familiar with the content of these changes), you are to blame.

 I'm confused as to why this is posing a problem _now_, since it had previously been solved after extensive discussion."
485537453,13327,FranciscoPombal,2020-09-09T11:27:58Z,"@glassez 

Well, to be honest I don't really care enough about this change to keep pushing for it right now. Its potential benefits for the near and medium term future are unclear, and if we do need such a change for the far future, its quite trivial anyway. So I reverted the internal libraries to be explicitly `STATIC`, like previously, and removed the `BUILD_SHARED_LIBS` description from the output."
485538744,13327,FranciscoPombal,2020-09-09T11:30:36Z,"@glassez To the best of my knowledge right now, I think it is safe to remove it."
485548052,13327,FranciscoPombal,2020-09-09T11:48:09Z,"@glassez 

This change does not need to be further reviewed separately, _because it has already been reviewed_. Everyone agreed with this change in the previous version of this PR. The new way of creating the macOS bundle doesn't need this file at all. It has even been previously tested by Kolcha before and verified to work (now you can also verify it yourself by inspecting the result of this build: https://github.com/FranciscoPombal/qBittorrent/actions/runs/223928661).

This file was only needed because of the `install_qt5_executable` function, which was previously only called once by `qBittorrent/cmake/Modules/bundle.cmake`, which in turn was a snippet of code called only once from here:

https://github.com/qbittorrent/qBittorrent/blob/defdd5121c940dfc3b807401338e15f66adfd671/src/app/CMakeLists.txt#L161

which is not the way things work anymore."
485553778,13327,glassez,2020-09-09T11:58:37Z,">So I reverted the internal libraries to be explicitly STATIC, like previously, and removed the BUILD_SHARED_LIBS description from the output.

:+1:"
485583480,13327,glassez,2020-09-09T12:48:26Z,"> because app needs access to it

I see it. I just don't understand why did you change it. Why all web UI related stuff can't be built into corresponding library?
Well, maybe it's just that the splitting into libraries is still something inappropriate..."
485631450,13327,FranciscoPombal,2020-09-09T13:55:38Z,"@glassez 

Actually, I just found out that for Qt, only the main application component needs to know about the resource sources, regardless of what component they are used in. So I have corrected the code to the following:

```diff
diff --git a/src/app/CMakeLists.txt b/src/app/CMakeLists.txt
index d01dfaeb4..567a617cb 100644
--- a/src/app/CMakeLists.txt
+++ b/src/app/CMakeLists.txt
@@ -140,6 +140,7 @@ endif()
 
 if (GUI)
     set_target_properties(qbt_app PROPERTIES OUTPUT_NAME qbittorrent)
+    target_sources(qbt_app PRIVATE ""${qBittorrent_SOURCE_DIR}/src/gui/about.qrc"")
     target_link_libraries(qbt_app PRIVATE qbt_gui)
 else()
     set_target_properties(qbt_app PROPERTIES OUTPUT_NAME qbittorrent-nox)
@@ -147,6 +148,7 @@ endif()
 
 if (WEBUI)
     target_sources(qbt_app PRIVATE
+        ""${qBittorrent_SOURCE_DIR}/src/webui/www/webui.qrc""
         ${QBT_WEBUI_QM_FILES}
         ${qBittorrent_BINARY_DIR}/src/webui/www/translations/webui_translations.qrc # yes, it's supposed to be ""*_BINARY_DIR""
     )
diff --git a/src/gui/CMakeLists.txt b/src/gui/CMakeLists.txt
index e8595ce2f..b8188f52c 100644
--- a/src/gui/CMakeLists.txt
+++ b/src/gui/CMakeLists.txt
@@ -188,8 +188,6 @@ add_library(qbt_gui STATIC
     updownratiodialog.ui
 )
 
-target_sources(qbt_gui INTERFACE about.qrc)
-
 target_link_libraries(qbt_gui
     PRIVATE
         qbt_base
diff --git a/src/webui/CMakeLists.txt b/src/webui/CMakeLists.txt
index 51cdfe489..a0d14a70f 100644
--- a/src/webui/CMakeLists.txt
+++ b/src/webui/CMakeLists.txt
@@ -33,6 +33,4 @@ add_library(qbt_webui STATIC
     webui.cpp
 )
 
-target_sources(qbt_webui INTERFACE www/webui.qrc)
-
 target_link_libraries(qbt_webui PRIVATE qbt_base)

```"
485650380,13327,glassez,2020-09-09T14:20:06Z,">Actually, I just found out that for Qt, only the main application component needs to know about the resource sources, regardless of what component they are used in

It doesn't seem quite logical that linking 
library is not enough to use it."
485669159,13327,FranciscoPombal,2020-09-09T14:44:13Z,"@glassez 

> It doesn't seem quite logical that linking
library is not enough to use it.

I don't know exactly why either, but that's not enough. Probably due to some Qt implementation detail."
485750344,13327,glassez,2020-09-09T16:27:23Z,">I don't know exactly why either, but that's not enough. Probably due to some Qt implementation detail.

Then I would leave your original version to keep it where it comes from:
```cmake
target_sources(qbt_webui INTERFACE www/webui.qrc)
```
so using the library will only require one instruction, as expected:
```cmake
target_link_libraries(qbt_app PRIVATE qbt_webui)
```
"
486276483,13327,FranciscoPombal,2020-09-10T11:53:56Z,"@glassez ok, fixed."
487359564,13327,Chocobo1,2020-09-12T03:08:36Z,How do you decide what to put in the list? I mean is there a compiled list or something like that?
487359881,13327,Chocobo1,2020-09-12T03:12:13Z,`if (` and please check globally.
487360125,13327,Chocobo1,2020-09-12T03:15:01Z,Please remove this kind of comments. Those are only suitable on github reviews.
487360701,13327,Chocobo1,2020-09-12T03:21:37Z,"Can you try compiling without the above 2 macros? If removing them does not produce additional compile warnings/errors then please remove them, as they are not present in winconf.pri either."
487399752,13327,FranciscoPombal,2020-09-12T11:26:24Z,"@Chocobo1 

> How do you decide what to put in the list?

I went through https://cmake.org/cmake/help/v3.16/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#individual-features-from-c-14 and put in all those that had to do with C++14.

> I mean is there a compiled list or something like that?

Recently I submitted a PR to improve CMake's documentation in this regard: https://gitlab.kitware.com/cmake/cmake/-/merge_requests/5151/diffs.
The new result can be seen here, with features properly sorted by C++ standard:

https://cmake.org/cmake/help/git-master/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#high-level-meta-features-indicating-c-standard-support
https://cmake.org/cmake/help/git-master/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#low-level-individual-compile-features
https://cmake.org/cmake/help/git-master/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#individual-features-from-c-14"
487402274,13327,FranciscoPombal,2020-09-12T11:57:04Z,"@Chocobo1 Just after typing this, I reviewed the sorted list in https://cmake.org/cmake/help/git-master/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#individual-features-from-c-14 and realized I actually missed a couple. Also I took the opportunity to sort them all alphabetically after `cxx_std_14`. Fixed."
487421627,13327,Chocobo1,2020-09-12T15:42:17Z,">Just after typing this, I reviewed the sorted list in https://cmake.org/cmake/help/git-master/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html#individual-features-from-c-14 and realized I actually missed a couple. Also I took the opportunity to sort them all alphabetically after cxx_std_14. Fixed.

You should add an URL link to the cmake document."
489545061,13327,FranciscoPombal,2020-09-16T15:51:34Z,fixed.
489545212,13327,FranciscoPombal,2020-09-16T15:51:44Z,fixed.
489545348,13327,FranciscoPombal,2020-09-16T15:51:57Z,fixed all instances.
489882134,13327,FranciscoPombal,2020-09-17T02:11:38Z,"Removed, compiled with no errors or warnings.

I also learned the following:

- It is not necessary to specify the value of `_WIN32_IE`, so I removed that, too. It is automatically set to the correct value in the `sdkddkver.h` Windows header based on the version set in `_WIN32_WINNT`.

- With `_WIN32_WINNT` defined, it is not necessary to define `WIN_VER`, it gets set automatically in the same header.

- `NTDDI_VERSION` is useful for finer grained version control, but currently it does nothing, since there is no finer grain control possibie for Windows 7 versions. It will come in handy when we need to distinguish among Windows 10 versions.

References:
https://docs.microsoft.com/en-us/windows/win32/WinProg/using-the-windows-headers
https://docs.microsoft.com/en-us/cpp/porting/modifying-winver-and-win32-winnt

- `UNICODE` and `_UNICODE` should both be defined (as they are now)

References:
https://docs.microsoft.com/en-us/cpp/text/unicode-programming-summary
https://docs.microsoft.com/en-us/windows/win32/learnwin32/working-with-strings

> Be careful: Some headers use the preprocessor symbol `UNICODE`, others use `_UNICODE` with an underscore prefix. Always define both symbols. Visual C++ sets them both by default when you create a new project."
489916733,13327,Chocobo1,2020-09-17T03:06:29Z,">Removed, compiled with no errors or warnings.

OK.

>It is not necessary to specify the value of _WIN32_IE, so I removed that, too. It is automatically set to the correct value in the sdkddkver.h Windows header based on the version set in _WIN32_WINNT.

You shouldn't do more changes than asked here. Now you deviate from winconf.pri again, if you want `_WIN32_IE` (or anything) removed, you should propose in another PR.

Also the comment about `# Windows 7` only adds maintenance burdens IMO."
489924418,13327,FranciscoPombal,2020-09-17T03:19:08Z,"@Chocobo1 Alright, fixed."
629834175,14959,Chocobo1,2021-05-11T04:17:43Z,why is it removed?
629834349,14959,Chocobo1,2021-05-11T04:18:21Z,changes for this should have its own commit.
629834428,14959,Chocobo1,2021-05-11T04:18:35Z,and adding quotes too.
629834512,14959,Chocobo1,2021-05-11T04:18:52Z,and bumping cmake version too.
629834724,14959,Chocobo1,2021-05-11T04:19:53Z,"the current commit says: `improvements to Windows builds`, but this is in unix scope.
"
629835661,14959,Chocobo1,2021-05-11T04:23:17Z,Can you move it to cmake/modules?
629835928,14959,Chocobo1,2021-05-11T04:24:28Z,"maybe it is just me but I felt this renaming unnecessary, wait for others opinion..."
629845089,14959,glassez,2021-05-11T04:56:02Z,I'm not familiar with CMake subtleties... Where is it supposed to be installed now?
629845667,14959,glassez,2021-05-11T04:57:48Z,Note: The commit title should be `CMake: improve Windows builds`
630125061,14959,FranciscoPombal,2021-05-11T12:35:34Z,"`CMAKE_INSTALL_FULL_BINDIR` is undefined and unused (and despite its name, it is not built-in CMake variable either), `EXPAND_BINDIR` is unused. Both are leftovers that were forgotten about and can be safely removed."
630125687,14959,FranciscoPombal,2021-05-11T12:36:27Z,"I suppose it's better to move this change to its own commit, judging by your other review comments :)"
630125959,14959,FranciscoPombal,2021-05-11T12:36:48Z,OK.
630126027,14959,FranciscoPombal,2021-05-11T12:36:53Z,OK.
630127828,14959,FranciscoPombal,2021-05-11T12:39:32Z,"Yeah, my apologies, I just saw some low-hanging fruit, got carried away and documented the changes in the commit message body. I'll split these changes into separate commits, and fix the commit message."
630128136,14959,FranciscoPombal,2021-05-11T12:39:57Z,"Sure, that's probably a good idea."
630137606,14959,FranciscoPombal,2021-05-11T12:52:24Z,"@Chocobo1

I'm also not a fan of encoding the variable type into its name so explicitly (it's an anti-pattern in most languages), but I feel it is necessary with CMake, where everything is ultimately just a string.

IMO it better conveys the intention and there is a benefit to readability and consistency: now, all other non-list variables are quoted when expanded, whereas this is never the case for list variables. When one is looking at the code now, there is no doubt whether something is a list or not, and whether it's expansion should be quoted or not (remember that in CMake, `someFunction(${SOME_LIST})` will call `someFunction` with each element of `SOME_LIST` as a separate argument).

This change was made for the same reason it is preferable to first declare a variable that's intended to be a list with `list(APPEND SOME_LIST ""foo"" ""bar"" ""baz"")` instead of plain `set` (as in `set(SOME_LIST ""foo"" ""bar"" ""baz""`), and also to use `list(APPEND ...)` rather than `set(...)` to append elements."
630139641,14959,FranciscoPombal,2021-05-11T12:54:56Z,"Well, bumping the version is inseparable from the part about about deploying the DLLs, it is not a separate change. How about mentioning the bump in the commit message body for that particular commit?"
630176802,14959,FranciscoPombal,2021-05-11T13:39:40Z,"@glassez 

It will be installed in the same directory as the executable, same as previously.

We don't need the extra `bin` folder in the path; following the standard Unix FHS conventions doesn't make sense here. 

But thanks for pointing this out, I realize now that I had it right the first time in https://github.com/glassez/qBittorrent/pull/1, the DESTINATION should be `"".""`, not `""${PROJECT_NAME}""`. Otherwise `cmake --install build` will install files to `C:/Program Files/qBittorrent/qBittorrent` (creating an unnecessary extra `qBittorrent` directory), because `CMAKE_INSTALL_PREFIX` (https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html?highlight=cmake_install_prefix) is set to `""C:/Program Files/${PROJECT_NAME}""` by default on Windows."
630203413,14959,jagannatharjun,2021-05-11T14:09:11Z,latest msvc 16.9 still ships cmake 3.19
630249604,14959,xavier2k6,2021-05-11T14:54:14Z,"> latest msvc 16.9 still ships cmake 3.19

Correct!

**Microsoft Visual Studio 2019 16.9.4 (16.9.31205.134)**
`cmake version 3.19.20122902-MSVC_2`"
630264316,14959,FranciscoPombal,2021-05-11T15:08:43Z,"@jagannatharjun 

> latest msvc 16.9 still ships cmake 3.19

Not a problem, it's trivially easy to always use the latest version of CMake. They even have an installer for Windows, but I prefer the manual method with the `.zip`, (it gives you the flexibility of easily managing several versions side-by-side, if you have special requirements):

1. download the latest version (right now it's this one: https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2-windows-x86_64.zip)
2. extract the `cmake-3.20.2-windows-x86_64` contained in the zip to your preferred location (I like `C:\Users\User\bin` myself)
3. (optional) add `C:\Users\User\bin\cmake-3.20.2-windows-x86_64\bin` to your `PATH` (Start menu -> search for ""Edit the system environment variables"" and click it-> Environment variables... -> System variables -> `Path`). It should go near the top so that it will be prioritized over other CMake executables that may exist in the system. VS will also pick it up no problem.

You can always just run the CMake binaries by using their absolute paths of course, if you don't want to add to `PATH`.

Whenever you need to upgrade, just delete the old folder, extract the new updated version, and edit the existing `PATH` component (e.g. `C:\Users\User\bin\cmake-3.20.2-windows-x86_64\bin` -> `C:\Users\User\bin\cmake-3.21.0-windows-x86_64\bin`)

`vcpkg` and the Github Actions CI builders are already using the latest version, so there is no problem there either.

As for Linux is is similarly easy; but don't take my word for it, watch the video linked in the OP, starting from that timestamp: https://youtu.be/_yFPO1ofyF0?t=45"
630281452,14959,xavier2k6,2021-05-11T15:25:49Z,"@jagannatharjun @FranciscoPombal 

Just checked & `3.20` will be included in next official release/update

#### Visual Studio 2019
**Version**
16.10.0
**Channel**
Preview 2.1
**Release date**
April 22, 2021

**Microsoft Visual Studio 2019 16.10.0 (16.10.31220.234)**
`cmake version 3.20.21032501-MSVC_2`"
630684340,14959,Chocobo1,2021-05-12T02:37:00Z,">EXPAND_BINDIR is unused...

It is in systemd/qbittorrent-nox@.service.in and it is supposed to be replaced."
630684743,14959,Chocobo1,2021-05-12T02:38:26Z,">How about mentioning the bump in the commit message body for that particular commit?

OK."
631051521,14959,FranciscoPombal,2021-05-12T13:40:41Z,"@Chocobo1 

> It is in systemd/qbittorrent-nox@.service.in and it is supposed to be replaced.

Oh yeah, good catch, I totally tunnel-visioned and missed the `configure_file()` call after it.

I guess then there is a different bug on our hands: as stated before, `CMAKE_INSTALL_FULL_BINDIR` is not a built-in CMake variable (https://cmake.org/cmake/help/latest/search.html?q=CMAKE_INSTALL_FULL_BINDIR), and we don't define it anywhere. So `EXPAND_BINDIR` will be empty as well. I'll attempt to address this in a separate commit.
"
631179786,14959,glassez,2021-05-12T16:00:27Z,">We don't need the extra bin folder in the path; following the standard Unix FHS conventions doesn't make sense here.

Let user (of build system) decide whether it makes sense or not (by redefining of CMAKE_INSTALL_BINDIR)."
631987742,14959,FranciscoPombal,2021-05-13T17:43:30Z,Resolved.
631987856,14959,FranciscoPombal,2021-05-13T17:43:40Z,Resolved.
631988360,14959,FranciscoPombal,2021-05-13T17:44:27Z,"Resolved. I did end up creating a separate commit for this change, thanks for the suggestion."
631989530,14959,FranciscoPombal,2021-05-13T17:46:14Z,"@Chocobo1 any more feedback about this? I lumped this change together with the quoting (see the commit message and body), do you have anything against it?"
631997123,14959,FranciscoPombal,2021-05-13T17:58:02Z,Resolved.
631998961,14959,FranciscoPombal,2021-05-13T18:00:56Z,@glassez The user can already achieve this in the standard way: either by setting `-DCMAKE_INSTALL_PREFIX=C:/some/dir/qBittorrent/bin` at configure-time or by passing `--prefix C:/some/dir/qBittorrent/bin` to the invocation of `cmake --install`.
632001928,14959,FranciscoPombal,2021-05-13T18:05:54Z,"Resolved - deferred to another PR, for the reasons stated in https://github.com/qbittorrent/qBittorrent/pull/14959#issuecomment-840733187."
632031723,14959,FranciscoPombal,2021-05-13T18:54:14Z,Resolved.
641919115,14959,glassez,2021-05-29T10:07:35Z,I would drop checking for MSVC_RUNTIME_DYNAMIC here.
643396072,14959,FranciscoPombal,2021-06-01T18:45:50Z,fixed.
191643431,9007,glassez,2018-05-30T05:08:49Z,I would move it on the previous line in all similar cases of this PR.
191643549,9007,glassez,2018-05-30T05:09:42Z,It would be better if we can create session in paused state.
191643790,9007,glassez,2018-05-30T05:11:45Z,Please don't break the current style. Just add `handleTorrentAddedAlert()` method.
191643827,9007,glassez,2018-05-30T05:12:10Z,handleStartUpFinished
191644548,9007,glassez,2018-05-30T05:18:56Z,startupFinished
191652715,9007,Chocobo1,2018-05-30T06:19:27Z,"add `qAsConst()`?
or use iterator to loop, this avoids redundant traverse over the container, although I like the use of values() :P"
192126023,9007,Chocobo1,2018-05-31T14:49:27Z,"From my experience, pushing to the max limit is rarely a good idea (you reported a libtorrent bug uncovered from this).
Personally I would use a smaller limit such as INT_MAX/2 or (INT_MAX - 100) to avoid hitting the edge case, final decision is up to you."
192300861,9007,glassez,2018-06-01T05:26:29Z,Is it still impossible to move it back to Session constructor?
192315049,9007,glassez,2018-06-01T07:19:32Z,Q_DISABLED_COPY macro is also needed.
192315309,9007,glassez,2018-06-01T07:20:56Z,The name is confusing. It just loads the resume data. So ResumeDataLoadingManager is more appropriate name.
192315492,9007,glassez,2018-06-01T07:22:03Z,Redundant blank line.
192315627,9007,glassez,2018-06-01T07:22:52Z,application headers should be the last.
192315994,9007,glassez,2018-06-01T07:24:43Z,getResumeData or getPendingResumeData (since it's not property).
192316267,9007,glassez,2018-06-01T07:26:18Z,Public slots should be before signals.
192316682,9007,glassez,2018-06-01T07:28:38Z,I would name it resumeDataReady.
192317055,9007,glassez,2018-06-01T07:30:49Z,"Thread can be finished, but Manager can't. It just can finish its job. So it should be something like loadingFinished. "
192317225,9007,glassez,2018-06-01T07:31:45Z,Wrong header order.
192317942,9007,glassez,2018-06-01T07:35:33Z,"AFAIK, QRegularExpression constructor accepts QLatin1String so you don't have to use it explicitly."
192318179,9007,glassez,2018-06-01T07:36:44Z,I would use m_resumeDataReady name.
192320159,9007,glassez,2018-06-01T07:47:24Z,Why QString cast here? tr returns QString.
192320446,9007,glassez,2018-06-01T07:48:45Z,"begin confuses. Why not ""it""?"
192321093,9007,glassez,2018-06-01T07:51:49Z,Shouldn't you check for readyResumeData.count() here?
192329374,9007,sledgehammer999,2018-06-01T08:29:32Z,We don't want that. We have to have created the mainwindow (with its children) before we start emitting signals from the Session.
192329421,9007,sledgehammer999,2018-06-01T08:29:43Z,ok
192329598,9007,sledgehammer999,2018-06-01T08:30:29Z,"You're right. I was in a ""hurry"" to get the code working and I didn't give much thought to naming. (here and the other places you mentioned)"
192329624,9007,sledgehammer999,2018-06-01T08:30:38Z,ok
192329905,9007,sledgehammer999,2018-06-01T08:32:06Z,will fix
192330300,9007,sledgehammer999,2018-06-01T08:33:52Z,"This is just copied from previous code, we was from a PR Chocobo1 merged a few hours ago...
But, if I don't explicitly pass a QLatin1String string will the raw string be accepted as QLatin1String or QString?"
192330336,9007,sledgehammer999,2018-06-01T08:34:02Z,will fix
192330414,9007,sledgehammer999,2018-06-01T08:34:23Z,"old code, will fix"
192330521,9007,sledgehammer999,2018-06-01T08:34:53Z,will fix
192330959,9007,sledgehammer999,2018-06-01T08:36:44Z,"Maybe we have signaled it already but the other thread hasn't taken the data yet. So no need to signal it again.
IMO, readyResumeData.count() can't indicate that state"
192331041,9007,sledgehammer999,2018-06-01T08:37:06Z,will fix
192331088,9007,sledgehammer999,2018-06-01T08:37:19Z,will fix
192331115,9007,sledgehammer999,2018-06-01T08:37:27Z,will fix
192331145,9007,sledgehammer999,2018-06-01T08:37:36Z,will fix
192331165,9007,sledgehammer999,2018-06-01T08:37:43Z,will fix
192344982,9007,glassez,2018-06-01T09:34:30Z,Oops... forgive. There is no such constructor in this class. I confused it with some other class I used recently.
192345715,9007,glassez,2018-06-01T09:37:11Z,">IMO, readyResumeData.count() can't indicate that state

I mean `(readyResumeData.count() > 0) && !m_signaledReady`.
Otherwise it can emit signal in case when no data available."
192345909,9007,glassez,2018-06-01T09:38:02Z,"Or you can emit it in the loop above.

UPDATE: Not so good idea. The previously suggested way is better, IMO."
192379076,9007,glassez,2018-06-01T12:23:53Z,You can use existing m_ioThread for this purpose. Why is yet another thread needed?
192551973,9007,glassez,2018-06-02T06:41:16Z,You need to declare named constant for this value.
192552048,9007,glassez,2018-06-02T06:43:27Z,As I said before this additional signal isn't needed anymore.
202547718,9007,glassez,2018-07-15T16:37:30Z,Why?
202547760,9007,glassez,2018-07-15T16:40:25Z,resumedataloadingmanager
202547862,9007,glassez,2018-07-15T16:46:22Z,m_ prefix is missing here and below.
202548183,9007,glassez,2018-07-15T17:01:36Z,"This flag is confusing. It splits lifetime of Session in 3 steps (uninitialized, starting, started), but we can handle only last two.
It's better to use m_started flag (initially false and assigning true here)."
202548477,9007,glassez,2018-07-15T17:14:59Z,"Here you have some subsystems related GUI (RSS, Search) that assume the handled subsystems are already initialized, but you still didn't do it. Or I'm wrong?"
202548581,9007,glassez,2018-07-15T17:20:00Z,"But in your current implementation you don't emit any signals from startUpTorrents directly. They will be emitted wgen message loop is started, i.e. when main window is created."
202550683,9007,sledgehammer999,2018-07-15T18:49:37Z,"Good question. Honestly, I can't remember why I wrote this.
It is probably a leftover of an earlier version before I published the PR.
I'll delete the comment."
202550959,9007,sledgehammer999,2018-07-15T19:03:17Z,"I think I know why I have this here.
You need to look the previous commit https://github.com/qbittorrent/qBittorrent/pull/9007/commits/bc8e4f8e946a170bb1803012133150c0685ad23c
There some GUI widgets connect to the same signal in order to initialize themselves. eg the transferlist.
We want them to do it first while they're disabled and then enable them"
202551205,9007,sledgehammer999,2018-07-15T19:12:59Z,"The commit that introduced this was 21a72c651f4439352942bec3573f0325b99765e9
The explanation in its commit message seems still relevant. If I am missing something, please enlighten me."
202551326,9007,sledgehammer999,2018-07-15T19:16:30Z,OK. That seems to work too.
202551345,9007,sledgehammer999,2018-07-15T19:17:14Z,Do you mean the lambda? Have it as a one liner?
202551362,9007,sledgehammer999,2018-07-15T19:17:50Z,Sure. I am still confused about those macros. Eventually I'll get the hang of them.
202551485,9007,sledgehammer999,2018-07-15T19:21:09Z,Look at `MainWindow::setEnabledWidgets()`. I think I handle all the cases.
202551510,9007,sledgehammer999,2018-07-15T19:22:06Z,ok
202551551,9007,sledgehammer999,2018-07-15T19:23:52Z,ok
202552083,9007,sledgehammer999,2018-07-15T19:42:34Z,">The explanation in its commit message seems still relevant. If I am missing something, please enlighten me.

I was quick to talk. Previously the UI responded immediately for every change during startup. Now it responds after the torrents have been loaded. So there's no chance of ""losing"" stuff.

What I don't understand is this: Why the fix worked? AFAIK, the mainloop doesn't start before `Base::exec()`. So the signals from the session wouldn't be tried to be delivered. So the mainwindow would have done its connects before Base::exec(). And after that the signals would have been delivered."
202552303,9007,sledgehammer999,2018-07-15T19:49:40Z,"On 2nd thought, you probably mean only the capture clause and parameter list."
202576465,9007,glassez,2018-07-16T05:32:10Z,"I don't think this order is so important, because all these processes are taking place in a single event..."
202576731,9007,glassez,2018-07-16T05:36:18Z,">Why the fix worked?

Okay, let's leave it alone for now..."
202577302,9007,glassez,2018-07-16T05:44:37Z,"You need also add:
```c++
connect(m_resumeDataLoadingManager, &ResumeDataLoadingManager::loadingFinished, m_resumeDataLoadingManager, &QObject::deleteLater);
```

Also I would move its initialization it `startUpTorrents()` and make it local variable since it isn't needed anywhere else."
202662683,9007,glassez,2018-07-16T12:23:14Z,">On 2nd thought, you probably mean only the capture clause and parameter list.

Yes."
202665470,9007,glassez,2018-07-16T12:34:05Z,I would add `Session::isStarted() const { return m_started; }` getter and use it where needed instead of having separate variables.
202666020,9007,glassez,2018-07-16T12:36:09Z,It's better to declare it private and connect to `Session::startupFinished()` signal somewhere in MainWindow constructor.
202666852,9007,glassez,2018-07-16T12:39:10Z,You also need to prevent torrent addition in `Session::addTorrent()`.
202682499,9007,glassez,2018-07-16T13:31:58Z,You missed SearchWidget there.
478322634,13288,glassez,2020-08-27T10:39:11Z,">Qt: 5.15.0
 libtorrent: RC_1_2 HEAD, 1.2.9

CI doesn't look useful enough to me if it doesn't care about the minimum supported versions of the libraries and tools. Since the main contributors often use the latest versions, we risk to merge breaking changes accidentally.
@Chocobo1?"
478325807,13288,Chocobo1,2020-08-27T10:45:50Z,"@glassez 
Additionally, I don't know why we need more CI doing the same thing..."
478349477,13288,FranciscoPombal,2020-08-27T11:35:11Z,"@glassez 

> CI doesn't look useful enough to me if it doesn't care about the minimum supported versions of the libraries and tools. Since the main contributors often use the latest versions, we risk to merge breaking changes accidentally.

Those versions in those comments are only relevant for the builds that use vcpkg (Windows and macOS). It's a comment that is meant to be updated every time `VCPKG_COMMIT` is bumped - it's there as a convenience so that one does not have to go search for which versions of Qt/libtorrent are available with this version of vcpkg.

I don't understand this criticism though, because Travis and AppVeyor currently do the same thing - Windows and macOS builds are built with recent versions of everything (now they are a bit old, but only because sledge hasn't been updating the dependency bundles as they usually do). Releases for these operating systems use the latest versions, anyway. I think there was even a somewhat recent discussion where it was mentioned that it is in fact preferable that CI for these systems have recent versions of the libraries so that deprecations are caught early.

Ensuring qBittorrent works fine with older versions of libraries and toolchain is most relevant for Linux, and more specifically, Ubuntu and the like. Precisely for this reason, there's CI jobs for the 2 currently supported LTS releases, all using the default libraries and toolchain except for libtorrent. If you're wondering ""why use the most recent libtorrent release on the Ubuntu CI?"", the reason is because even Ubuntu 20.04 does not include _any_ 1.2.x version: https://packages.ubuntu.com/search?suite=focal&arch=any&searchon=names&keywords=libtorrent-rasterbar.

The goal for this PR was to come up with a CI solution that at least matched what Travis and AppVeyor are doing right now (builds for Windows and macOs with recent dependencies, builds for stock Ubuntu 18.04 [except libtorrent]), but fix their most glaring issues (fix macOS builds, provide CI for stock Ubuntu 20.04 [except libtorrent], and get/build the most recent dependencies for Windows/macOS from official sources, rather than relying on a personally maintained bundle).

If you want to add more jobs with older library versions for Windows and macOS, that can be done later. Though I don't see why that would be desirable, given the reasons above. This PR is just meant to be a drop-in replacement for the current CI solutions.

@Chocobo1 

> Additionally, I don't know why we need more CI doing the same thing...

In case it wasn't clear: this is meant to replace both Travis and AppVeyor."
479192106,13288,glassez,2020-08-28T11:54:06Z,">because Travis and AppVeyor currently do the same thing

If you take our current disadvantages as a basis, your changes won't do much good. As a result, we will trade bad for worse."
479375117,13288,FranciscoPombal,2020-08-28T15:23:03Z,"@glassez 

What exactly is ""worse""? I believe I've presented a convincing case as to how and why this alternative matches and eventually exceeds our existing solutions capability-wise."
491101319,13288,Chocobo1,2020-09-18T17:47:07Z,I dislike having explicit versions here and there. Can't you default them to the latest version?
491101540,13288,Chocobo1,2020-09-18T17:47:31Z,This one too.
491101825,13288,Chocobo1,2020-09-18T17:48:03Z,Those comments would become outdated easily.
491101961,13288,Chocobo1,2020-09-18T17:48:23Z,Those aren't suitable here.
491102538,13288,Chocobo1,2020-09-18T17:49:38Z,"Those are not portable at all (I meant for other distro users), there is no point to upload them."
491103001,13288,Chocobo1,2020-09-18T17:50:35Z,"Have you tested it? AFAIK without proper packaging, those are useless."
491103877,13288,Chocobo1,2020-09-18T17:52:24Z,IMO building with libtorrent releases are pointless when you already build with some git branch RC_1_2.
491105794,13288,Chocobo1,2020-09-18T17:56:12Z,why not `windows-latest`? so we don't need to bump it regularly.
491106753,13288,Chocobo1,2020-09-18T17:58:05Z,`macos-latest`?
491108746,13288,Chocobo1,2020-09-18T18:02:18Z,"Since the binary produced aren't portable, there is no sense to build in `ubuntu-18.04`."
491113329,13288,FranciscoPombal,2020-09-18T18:11:58Z,"@Chocobo1 

That's not good practice, it has the potential to break our CI and will be difficult to track down - one would have to check recent updates to _all_ actions to figure out what changed. It is preferable to bump these every now and then. The CI itself will catch any breakage due to specific version bumps, and the whole situation becomes much easier to investigate and resolve, since we'll know immediately what changed."
491114194,13288,FranciscoPombal,2020-09-18T18:13:59Z,"@Chocobo1 

Similar reasoning to https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491113329.

>That's not good practice, it has the potential to break our CI and will be difficult to track down - one would have to check recent updates to _all_ actions to figure out what changed. It is preferable to bump these every now and then. The CI itself will catch any breakage due to specific version bumps, and the whole situation becomes much easier to investigate and resolve, since we'll know immediately what changed.

Especially because currently, vcpkg package versions depend on the vcpkg version itself. This is expected to change int the near future though, when they implement versioning support."
491114697,13288,FranciscoPombal,2020-09-18T18:15:01Z,"@Chocobo1 they are meant to be changed when one bumps the `vcpkg` version, for easy reference."
491115431,13288,Chocobo1,2020-09-18T18:16:32Z,">It is preferable to bump these every now and then. 

This is something I wouldn't prefer, especially our codebase is not for CI itself.

@glassez 
Any opinion on this?"
491115797,13288,FranciscoPombal,2020-09-18T18:17:21Z,"@Chocobo1 I disagree, it's a useful note for maintainers, and demystifies the purpose of the `force AppleClang to compile libtorrent with C++14` step in the macOS CI. Once we drop libtorrent 1.2 support, and assuming libtorrent >= 2.x won't have similar ABI issues (check the linked issue report), we can remove such comments."
491119532,13288,FranciscoPombal,2020-09-18T18:24:29Z,"@Chocobo1 

Well, this artifact is clearly labeled ""Ubuntu"" But anyway, the point of the artifacts produced by this workflow is not to be used as nightly builds for regular usage (for that, we can have a nightly builds workflows, like I have proposed in the past and am now developing an improved version of), but instead, for troubleshooting purposes.

For example, you can run `ldd` on the generated executable, check the generated dependencies graph, the generated `compile_commands.json` compilation database, etc."
491120351,13288,Chocobo1,2020-09-18T18:25:39Z,">I disagree, it's a useful note for maintainers

Well, I would argue if the maintainer doesn't know this, then he isn't really suitable for the job.
I think this issue is widely known among the developers working on this project."
491122527,13288,FranciscoPombal,2020-09-18T18:29:57Z,"@Chocobo1 

@Kolcha had tested the macOS builds during the development of the CMake PR, and found that CMake correctly generated the app bundle and that the executable ran.
The relevant code hasn't been modified since, and the CI builds macOS builds the same way as one would in their machine.

Plus, as mentioned in https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491119532, there are other things that are included in the artifact archive that are useful, not just the executable; and the executable generated by this workflow is not meant for general use, just for troubleshooting and smoke testing purposes (e.g. does it run?)."
491127378,13288,FranciscoPombal,2020-09-18T18:40:20Z,"@Chocobo1 No builds currently use `RC_1_2` HEAD. That comment is just for reference to explain that, in the current version of vcpkg, passing `--head` when installing libtorrent would pull in `RC_1_2` HEAD. As explained in https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491114697, these comments are meant to be adjusted as one bumps the vcpkg version."
491128191,13288,FranciscoPombal,2020-09-18T18:42:05Z,"The CI is meant to test for specific platforms, right? We don't want those changing (too much) without notice beneath our feet. Bumping versions in CI should be a conscious decision, not an automatic one. See also https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491113329 and similar comments."
491128301,13288,FranciscoPombal,2020-09-18T18:42:21Z,"@Chocobo1 

https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491128191"
491129373,13288,FranciscoPombal,2020-09-18T18:44:45Z,"@Chocobo1 

We need to build in `ubuntu-18.04`, to make sure no changes accidentally break support for it. When we decide that we're going to drop support for it, we'll do so as a conscious decision, and remove it from CI accordingly.

As for the binaries not being portable, that is not an issue, see the earlier comment about that: https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491119532."
491129590,13288,Chocobo1,2020-09-18T18:45:12Z,">For example, you can run ldd on the generated executable, check the generated dependencies graph, the generated compile_commands.json compilation database, etc.

I don't think you presented reasonable examples.
Why would one examine the binary generated for other distro than the user's one? and this is limited to ubuntu distro. I presume the user would be more interested in building the project himself in his distro and look at the result binary.
Why would one look at the dependencies graph from the CI? He should produce it on his own machine if he is really into it. 
Same goes for the compile_commands.json you mentioned.

>but instead, for troubleshooting purposes.

I still don't think those will aid any troubleshooting. And those artifacts still seems very rarely used, I would still prefer not uploading them."
491129720,13288,Chocobo1,2020-09-18T18:45:30Z,OK.
491133021,13288,FranciscoPombal,2020-09-18T18:52:38Z,"@Chocobo1 

Why make it harder for people to discover these kinds of things? Prospecting contributors that are confused by the code that these comments refer to will have a much harder time making sense of it until they find on their own the information that is present in these comments currently. Imagine being new to the project and wondering why the C++ standard is forced in the macOS CI. Without these comments, you'll waste much more time finding out the reason.

Plus, will you remember this issue easily without such comments 3-4 months for now? I won't. We all have more important stuff to do and remember. Without such comments, it's much more effort to dig out the relevant details and reasons behind related changes in the future if we need to refer back to this issue."
491133703,13288,Chocobo1,2020-09-18T18:54:13Z,">We need to build in ubuntu-18.04, to make sure no changes accidentally break support for it.

This sounds like we are supporting/targeting a specific distro version, but I can tell you, we do not.
We only list out the required lib versions for users/distros to follow. We also take into account the library version availability of the distros when bumping our lib requirements.

>When we decide that we're going to drop support for it, we'll do so as a conscious decision, and remove it from CI accordingly.

Wrong way of reasoning, if that were the case, we should be building & testing for every distro out there which is wrong."
491137998,13288,Chocobo1,2020-09-18T19:03:29Z,">Why make it harder for people to discover these kinds of things? 

Those aren't special cases when working with C++ codebases. It is universally known that the dependencies *should* be compiled with the same compiler & C++ version mode, otherwise weird things ensues.
At least you should move this comment near to the respective command and make it succinct that will fit in a single line."
491139068,13288,FranciscoPombal,2020-09-18T19:05:52Z,"@Chocobo1 

> This is something I wouldn't prefer, especially our codebase is not for CI itself.

This extreme aversion to commits concerning ancillary tasks not directly related to source code changes (let me guess, such bumps ""pollute the git history"") is starting to seriously bother me. 
No, it does not make ""the codebase only about the CI itself"". These kinds of changes are as much part of the guaranteeing smooth sailing of the project as much as anything else. They **are** part of the project's development.

I don't want to have ""fun"" trying to figure out which Action version bump completely broke or changed something about our CI each time in the future, and neither do you for sure.

If you have concerns that the git history has or will become too difficult to sort through, the right course of action is to find a proper solution for that, such as agreed-upon commit prefixes similar to what https://github.com/doitsujin/dxvk and other projects do, not fight every single proposed change with the ""git history pollution"" argument. Hell, a lot of projects have bots automatically committing translation updates and other things and they do just fine."
491146990,13288,Chocobo1,2020-09-18T19:22:53Z,">This extreme aversion to commits concerning ancillary tasks not directly related to source code changes (let me guess, such bumps ""pollute the git history"") is starting to seriously bother me.

Who knows how many minor version bumps for CI script are going to follow once this PR is merged? Of course this is a major concern for the developers.

>I don't want to have ""fun"" trying to figure out which Action version bump completely broke or changed something about our CI each time in the future, and neither do you for sure.

I'm OK with explicit versions for vcpkg scripts under only one condition: don't **ever** change it if it ain't broke or without good reasoning.
If you think that can uphold, then I have no issue with them."
491148882,13288,FranciscoPombal,2020-09-18T19:27:08Z,"@Chocobo1 

The thing is, everything should also work fine if libtorrent is compiled with a lower C++ version than qBittorrent, and libtorrent's officially stated minimum C++ standard requirement is 11. A lot of people, including many official and community distro packages, have been building qBittorrent against C++11-built libtorrent.

Recently I have dealt with a torrent (heh) of issues from several users and official/community distro packages that were working but suddenly broke because they were neither building libtorrent with C++14 _or_ C++11 and defining `TORRENT_CXX11ABI`.

It is very easy to accidentally run into this issue, and it is not easy to figure out the root of the problem just from the ensuing error message at buildtime; hence why I think this needs a bit of explanation.
The current explanation is only 2 more lines, and it's already incomplete (it does not mention the existence of a workaround when building libtorrent with C++11).

Plus, while currently only the macOS build requires the workaround of forcing the compiler version in practice, the issue is universal and OS-agnostic in principle, and it might be the case that in the future we may also need to apply the same workaround to other systems. That's why the comment is at the top."
491149885,13288,Chocobo1,2020-09-18T19:29:23Z,"@glassez 
The libtorrent version is fixed to some git commit and requires regularly bumps to keep up with the latest development.
Are you fine with this? I know you already approved, so I'm just double checking."
491151694,13288,Chocobo1,2020-09-18T19:33:29Z,">Plus, while currently only the macOS build requires the workaround of forcing the compiler version in practice, the issue is universal and OS-agnostic in principle, and it might be the case that in the future we may also need to apply the same workaround to other systems. That's why the comment is at the top.

Your whole reasoning made me think CI script is (still) not the right place you want to put the info at."
491157746,13288,FranciscoPombal,2020-09-18T19:47:55Z,"@Chocobo1 

>The libtorrent version is fixed to some git commit

That is possible, but currently it is fixed to a tag (`libtorrent-1.2.10`), not a commit. Though the case can be made to pin exclusively to commits, as tags are mutable (in the sense that it is possible to change the commit they point to) on the remote, commit hashes are not.

> and requires regularly bumps to keep up with the latest development.

There is no requirement to keep this regularly updated, though I think it is useful to bump whenever some important change lands in libtorrent that may have important implications in our CI, or when whenever we introduce patches that includes code of the form `if LIBTORRENT_VERSION >= 1.2.XX`, where `1.2.XXX` is greater than the current version in CI (yes, I will deal with libtorrent 2.0 later...).

Plus, being able to bump the version with just a single small change committed in a text file is very powerful, compared to having to manually preparing a custom build and hosting it on builds.shiki.hu."
491158732,13288,FranciscoPombal,2020-09-18T19:50:26Z,"@Chocobo1 

>Who knows how many minor version bumps for CI script are going to follow once this PR is merged? Of course this is a major concern for the developers.

As little as possible, and as ""in bulk"" as possible.

>I'm OK with explicit versions for vcpkg scripts under only one condition: don't ever change it if it ain't broke or without good reasoning.
If you think that can uphold, then I have no issue with them

We are in agreement then."
491159105,13288,FranciscoPombal,2020-09-18T19:51:21Z,"@Chocobo1 

Where do you suggest I put it instead?"
491193412,13288,FranciscoPombal,2020-09-18T21:13:28Z,"@Chocobo1 

> Why would one examine the binary generated for other distro than the user's one?

Maybe they happen to be working in a machine with a different distro, but are still interested in resolving a bug that's happening on Ubuntu? And what about users and contributors who actually use Ubuntu? This is certainly useful for them as a reference.

> and this is limited to ubuntu distro.

If you want more CI jobs for more distros, that can be added later.

> I presume the user would be more interested in building the project himself in his distro and look at the result binary.
Why would one look at the dependencies graph from the CI? He should produce it on his own machine if he is really into it.
Same goes for the compile_commands.json you mentioned.

CI is supposed to be the canonical reference; it's useful to compare to when troubleshooting. The `compile_commands.json` in particular is very useful to examine the actual command-lines used to compile the program, even for systems that you may not have access to in the moment or at all.

> I still don't think those will aid any troubleshooting. And those artifacts still seems very rarely used, I would still prefer not uploading them.

You're not forced to download them or look at them if you think you don't need them, but why remove them if they can be useful for other people? There is nothing to lose, storage is free (and if it stops being free, we'll change it then)."
491199342,13288,FranciscoPombal,2020-09-18T21:29:56Z,"@Chocobo1 

>This sounds like we are supporting/targeting a specific distro version, but I can tell you, we do not.
We only list out the required lib versions for users/distros to follow. We also take into account the library version availability of the distros when bumping our lib requirements.

The most important distro to consider when evaluating library availablity is Ubuntu LTS (and also Debian stable, to an extent).
I was under the impression that we support the current LTS Ubuntu releases, if not the full 5 years, at least an honest attempt at that (3 years, which is what the flavors support, is good enough).
How can we at lest not have that commitment?

We still support Windows 7, and it has been hell to argue for dropping support for it.
How does that make any sense?? The bug handling team is already strained with having to deal with weird heisenbugs and issues with 10+ year old EOL proprietary OSes, that don't even have support for basic stuff like paths over 256 characters, and yet we can throw users of the most popular Linux LTS distro under the bus at any moment?
Seems like the priorities for OS support are all wrong.
Same for the WebUI still supporting IE 11 (in a practical sense, and also in the sense that there is an official commitment to that: https://github.com/qbittorrent/qBittorrent/blob/master/src/webui/www/README.md).

> Wrong way of reasoning, if that were the case, we should be building & testing for every distro out there which is wrong.

That's an implication that is not present in what I said. At the very least we should have CI for the most important configurations, which is what this PR achieves.
And of course, if you want to add support CI for more distros (the more the better), that can be done later.
"
491642889,13288,Chocobo1,2020-09-20T02:22:31Z,For the record: https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491158732
491642953,13288,Chocobo1,2020-09-20T02:23:36Z,">Where do you suggest I put it instead?

Where someone looks for info for compiling qbt, I suppose this would be the guide in our wiki.

The CI script should mainly contain CI actions and comments about them, not detailed descriptions to some particular issue."
491643150,13288,Chocobo1,2020-09-20T02:26:02Z,For the record: https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491158732
491643159,13288,Chocobo1,2020-09-20T02:26:10Z,For the record: https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491158732
491643951,13288,Chocobo1,2020-09-20T02:38:23Z,">>Why would one examine the binary generated for other distro than the user's one?
>
>Maybe they happen to be working in a machine with a different distro, but are still interested in resolving a bug that's happening on Ubuntu? And what about users and contributors who actually use Ubuntu? This is certainly useful for them as a reference.

Eh... I won't be dreaming for unrealistic situations, lets be practical here, just remove it, now. If the need arises we can reintroduce it later.

>and this is limited to ubuntu distro.
>
>If you want more CI jobs for more distros, that can be added later.

No, that is not what I meant.

>CI is supposed to be the canonical reference;

Disagree, but lets leave it another time.

>it's useful to compare to when troubleshooting. The compile_commands.json in particular is very useful to examine the actual command-lines used to compile the program, even for systems that you may not have access to in the moment or at all.

How often is this file going to change between regular commits in qbt? Seldom. Then there is little point to store it for every commit. macOS is an exception since no one on the team have access to it."
491645049,13288,Chocobo1,2020-09-20T02:55:52Z,">We still support Windows 7, and it has been hell to argue for dropping support for it.

It only shows your opinion is still (currently) the less popular one, on user side and among the developers.
You're getting derailed into OS support discussion... that is not the point here.

So you're installing some official packages from ubuntu, does the versions that offered in ubuntu-20.04 and ubuntu-18.04 differ that much?
"
491680531,13288,FranciscoPombal,2020-09-20T11:07:44Z,"@Chocobo1 

> So you're installing some official packages from ubuntu, does the versions that offered in ubuntu-20.04 and ubuntu-18.04 differ that much?

The main problem is boost and Qt:

- boost:
    - 18.04: [1.65.1.0ubuntu1](https://packages.ubuntu.com/bionic/libboost-all-dev)
    - 20.04: [1.71.0.0ubuntu2](https://packages.ubuntu.com/focal/libboost-all-dev)

- Qt:
    - 18.04: [5.9.5+dfsg-0ubuntu2.5](https://packages.ubuntu.com/bionic-updates/qt5-default)
    - 20.04: [5.12.8+dfsg-0ubuntu1](https://packages.ubuntu.com/focal/qt5-default)

> It only shows your opinion is still (currently) the less popular one, on user side and among the developers.
You're getting derailed into OS support discussion... that is not the point here.

Sad that apparently ""popularity"" trumps good maintenance practices and is more important than the bug reporting team. It's not even as popular as you might think. There's always a very vocal minority of semi tech illiterate pseudo power user lunatics holding on to old Windows versions unreasonably long because of ""nostalgia"" or ""it worked better""/""I don't like the one"" (without providing valid objective reasons) or ""the new version spies more"" (lol). Just look at how many people held on to Windows XP well past what was reasonable. Note that this is of course very different from keeping a secondary installation around (sometimes in a VM) for preservation purposes of some software/hardware that doesn't run reasonably anywhere else. My problem is when people make such arguments for their daily driver machines. If they want to run museum piece OSes, they can use older qBittorrent versions. They just won't be able to install new ones.

As far as devs/contributors go, I don't think anyone really minds dropping support for Windows 7. Their only concern also comes from this perceived ""popularity"" among the user base. It's logical that one doesn't want to unnecessarily disrupt the workflow of completely reasonable average joes. But that's exactly the flawed premise - nowadays, people who torrent holding on to Windows 7 are not reasonable average joes, or ""power users"" worth catering to.

Let me be clear: I don't want to deal with issues relating to Windows < 10 any longer (and I'm sure other contributors/active users who actually help solve Windows issues don't either), and I don't think the lunatic vocal minority is more important than me or my contributions to the project. The team is already small enough. We have to make compromises. This is yet another thing that unnecessarily clutters the issue tracker and increases maintenance burden."
491681973,13288,FranciscoPombal,2020-09-20T11:26:47Z,"@Chocobo1 

> The CI script should mainly contain CI actions and comments about them, not detailed descriptions to some particular issue.

This 3-line comment is not a ""detailed description about an issue"". I'd argue it falls precisely into the category of ""comments about CI actions"". Does it not?

Maybe I can change the wording of the second line to make it really obvious that it has bearing on other things written in the file:

""\# **Currently, in all CI jobs,** ~C~compilers that don't default to >= C++14 ~must be~ **are** overridden **to >= C++14 mode to avoid the issue.**""

Seriously what do you have against little snippets of documentation in the code, to explain non-obvious decisions?"
491682776,13288,FranciscoPombal,2020-09-20T11:37:00Z,"@Chocobo1 

> Eh... I won't be dreaming for unrealistic situations, lets be practical here, just remove it, now. If the need arises we can reintroduce it later.

> How often is this file going to change between regular commits in qbt? Seldom. Then there is little point to store it for every commit. macOS is an exception since no one on the team have access to it.

You are being too narrow minded. Just because _you_ don't see the benefits (or don't think _you_ will ever make use of them), does not mean they are not there. It does not cost you or anyone else anything extra to have this. Why do you keep insisting on removing it? You don't pay (both figuratively and in the literal sense) for what you don't use here.

> How often is this file going to change between regular commits in qbt? Seldom.

But when it _does_ change, it is extremely useful and valuable. It saves a lot time in troubleshooting and may help catch issues earlier.

>> CI is supposed to be the canonical reference;
>Disagree, but lets leave it another time.

So what exactly is CI supposed to be? It must be a guarantee that ""things work"" for certain standard setups/environments. What's the point of it if it has no bearing on reality? Someone who builds qBittorrent on Windows 10 should be able to look at the Windows CI run and figure out ""hey, the CI is completing successfully, if I can't build, there must be a problem on my end - I'll use the CI as a reference/point of comparison to solve my issue""."
491683672,13288,Chocobo1,2020-09-20T11:48:29Z,">Seriously what do you have against little snippets of documentation in the code, to explain non-obvious decisions?

https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491151694"
491684032,13288,Chocobo1,2020-09-20T11:53:28Z,">Just because you don't see the benefits (or don't think you will ever make use of them), does not mean they are not there. 

Then present a real world useful example, not imaginary ones.

>But when it does change, it is extremely useful and valuable. It saves a lot time in troubleshooting and may help catch issues earlier.

I already said it can be introduced later when it really helps. https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491643951

>Why do you keep insisting on removing it? You don't pay (both figuratively and in the literal sense) for what you don't use here.

Those arguments doesn't really help here. You're here presenting a PR and trying to win the team members approval. If we can't compromise/converge our opinions then that is that.."
491684430,13288,Chocobo1,2020-09-20T11:58:21Z,">18.04: 5.9.5+dfsg-0ubuntu2.5
20.04: 5.12.8+dfsg-0ubuntu1

Now I think it is worth to test in both OS versions, 18.04 for our minimum Qt requirement and 20.04 for Qt LTS (obsoleted though). And I also suppose when we raise Qt requirement to >= 5.12 we can drop building in 18.04.

>Sad that apparently ""popularity"" trumps good maintenance practices and is more important than the bug reporting team.... 

You presented your thoughts, OK."
491688420,13288,FranciscoPombal,2020-09-20T12:47:33Z,"@Chocobo1 

> Then present a real world useful example, not imaginary ones.

This is not imaginary. Imagine any contributor wants to quickly check the artifacts produced for another system at any time. This gives us some flexibility. Personally I have diagnosed Windows compilation issues during my testing thanks to this. If this is valid for macOS, why not for other systems? We shouldn't make assumptions about what systems contributors have available to them at any given time.

The burden of proof is on you to explain why exactly it is better to _not_ make these artifacts available. Again, I've explain how it is useful to others. Just because they are not useful to you, that's not a good reason to remove this.

>I already said it can be introduced later when it really helps. #13288 (comment)

I already explained it already really helps.

> Those arguments doesn't really help here. You're here presenting a PR and trying to win the team members approval. If we can't compromise/converge our opinions then that is that..

What? My point is simply that the presence of these artifacts won't bother you in any way. They are useful for those who make use of them, and don't get in the way of anyone else. If you just want to look at the build logs, you just look at the build logs.

You're withholding your approval for stupid reasons. Seriously, I get the impression from this review that you didn't really bother to understand what is going on and why certain things are done in certain ways. Have you even looked at the example run and its jobs? https://github.com/FranciscoPombal/qBittorrent/actions/runs/223928661. Worse, you are actively dismissing other's workflows and pushing the for the removal of features that I have already proven to be useful."
491689253,13288,FranciscoPombal,2020-09-20T12:58:08Z,"> And I also suppose when we raise Qt requirement to >= 5.12 we can drop building in 18.04.

Hopefully, not in the near future."
491689884,13288,Chocobo1,2020-09-20T13:06:03Z,">You're withholding your approval for stupid reasons. 

Oh, so you're trying to force/provoke me into approval!?

>Seriously, I get the impression from this review that you didn't really bother to understand what is going on and why certain things are done in certain ways. Have you even looked at the example run and its jobs? https://github.com/FranciscoPombal/qBittorrent/actions/runs/223928661. 

And doubt a reviewer is not using his brain!?

>Worse, you are actively dismissing other's workflows and pushing the for the removal of features that I have already proven to be useful.

I already replied they are not: https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491129590

Sigh, I cannot continue to work with you with such disrespectful tone... no point of me staying here any longer."
491691854,13288,Chocobo1,2020-09-20T13:30:52Z,"@glassez
See this https://github.com/qbittorrent/qBittorrent/pull/13414#issuecomment-695784163?
FranciscoPombal disrespected my review/opinion and created a simplified version of my words to downplay my viewpoint (and presumably make fun of me along the way).
Really, I don't see why I should work with that guy anymore. Given the situation now, I think I reserve the rights to ignore him and all of his work. If you still think this PR has any value, just go merge it instead.

@FranciscoPombal 
Sorry, the way you acted is over the line, your [last reply](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491688420) with your tone is just within the limits but splattering your non-sense outside this PR is not. Our collaboration ends here."
491694579,13288,FranciscoPombal,2020-09-20T14:02:43Z,"@Chocobo1 

Get off your high horse. This whole review of yours is a tremendous disrespect to my work from the start. Review comments such as https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491103877 prove you didn't bother to understand what was going on or the context up to this moment https://github.com/qbittorrent/qBittorrent/pull/13070.

You never showed any initiative to solve the broken CI problem, which was an urgent matter to resolve, and now that I come here with everything already done, you post a review with stupid nonsensical nitpicks. Additionally, you did very little to help expedite the PRs that this one depended on. You just swoop in at the last minute, post comments that show you haven't been keeping up with discussions, and I have to repeat everything all over again.

Your attitude towards other contributors such as me and their opinions are incredibly dismissive. In the past few months I have made many important contributions for the project. I helped solve many important bug reports, some of which ended up directly contributing to uncovering important underlying issues in libtorrent. Me and a few others are helping keep the issue tracker afloat in the current situation that the project is facing, and you just shit all over that with comments like https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491684430.

""You presented your opinions, OK""? What the FUCK is that? Me and others bust their asses off helping out people and solving bug reports, and you want to keep an unsustainable support policy for the project that results in us accruing technical debt, and making the issue tracker situation even more difficult than it already is. At the same time, you show little preoccupation in removing recent setups from CI (Ubuntu 18.04) for no good reason, and I have to waste a lot of time explaining why that is a bad idea, or even just inconsistent with your other opinions about OS support.

Seriously, who are you to say what is or isn't important in this CI script? You won't care about it, we all know it's gonna be me or others who are going to maintain it and fix it anyway. You're not gonna read users logs and help solve bugs. Let others contribute to the project in the ways that you won't."
491694850,13288,FranciscoPombal,2020-09-20T14:05:41Z,"@Chocobo1 

>FranciscoPombal disrespected my review/opinion and created a simplified version of my words to downplay my viewpoint (and presumably make fun of me along the way).

You are free to point out how any of that is a misrepresentation of what you said."
491695453,13288,Chocobo1,2020-09-20T14:12:49Z,">Get off your high horse. This whole review of yours is a tremendous disrespect to my work from the start...

Bravo, now you showed your true self.

>You never showed any initiative to solve the broken CI problem, which was an urgent matter to resolve, 

Well, unlike you my limited free time and motivation is a factor, but I guess you care less about that.

>Seriously, who are you to say what is or isn't important in this CI script? 

Well at least the currently missing maintainer asked me (and some others) to help doing the reviews and merge them if they are decent enough. I'm not obliged to review/comment on every PR/issue, that wasn't on the contract. @glassez please also take note of my viewpoint."
491696335,13288,Chocobo1,2020-09-20T14:21:54Z,">You are free to point out how any of that is a misrepresentation of what you said.

Your disrespectfulness."
491697958,13288,FranciscoPombal,2020-09-20T14:41:08Z,"@Chocobo1 

> Well, unlike you my limited free time and motivation is a factor, but I guess you care less about that.

Now _you_ just showed your true self. Your free time is not more valuable than that of others.

> I'm not obliged to review/comment on every PR/issue, that wasn't on the contract. 

Straw man. No one said that, and that was never the implication.

---

Let's get this back on topic, for the sake of the project. The artifacts are useful for some contributors, even if they are not useful to you. The comment about the libtorrent ABI issue should be mentioned in compile guides, but it is also very relevant where it is in the CI script. It quickly makes it clear that the issue is universal, not just a workaround for the CI environments."
491700734,13288,Chocobo1,2020-09-20T15:11:09Z,">>Well, unlike you my limited free time and motivation is a factor, but I guess you care less about that.
>
>Now you just showed your true self. Your free time is not more valuable than that of others.

[I guessed right, you don't care.](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491695453)

>>I'm not obliged to review/comment on every PR/issue, that wasn't on the contract.
>
>Straw man. No one said that, and that was never the implication.

Straw man what? Being led astray by your own imagination?
You are free to believe what you like, but what I said is the fact, **there was no such rule on the contract/from the start** when I accepted this role. So keep your asses off me.

>Let's get this back on topic, for the sake of the project. 

For the sake of your precious time spent on PR I believe. You showed your rude attitude and now expect me to just get back and play along, WTF?

>The artifacts are useful for some contributors, even if they are not useful to you. 

My last [comment](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491684032) still stands.

>The comment about the libtorrent ABI issue should be mentioned in compile guides, but it is also very relevant where it is in the CI script.

I don't deny it and I already told you to [make it shorter](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491137998). And... you asked me where is the better place, I [replied](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491642953) and you ignored it, what, were you just asking for fun?

Seriously, what is the point of getting my approval as [my role is worthless to you](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491694579)? I'll give you a hint that it is still possible to get this PR merged in the current form when the maintainer is present, that is, if you can persuade him, probably won't be hard.
"
491703132,13288,FranciscoPombal,2020-09-20T15:37:51Z,"@Chocobo1 
> [I guessed right, you don't care.](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491695453)

???

> Straw man what? Being led astray by your own imagination?
> You are free to believe what you like, but what I said is the fact, **there was no such rule on the contract/from the start** when I accepted this role. So keep your asses off me.

You are arguing about a point I never made, which is ""you're obliged to review/comment on every PR/issue"".

> > Let's get this back on topic, for the sake of the project.
> 
> For the sake of your precious time spent on PR I believe. You showed your rude attitude and now expect me to just get back and play along, WTF?

Just leave your grievances aside for a moment and get back on topic. I'm making an effort to brush aside your disrespect and abusive nitpicking, surely you can put up with my rude attitude.

> 
> > The artifacts are useful for some contributors, even if they are not useful to you.
> 
> My last [comment](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491684032) still stands.

No, it doesn't. I have even stated that this is personally useful to _me_, if not for anyone else. Is that not enough? If it caused you serious trouble to have this in, I would consider an alternative, or even removing it. But it doesn't, so why do you want to force me to remove something that is useful to me (and possibly to others)?

Contrary to what you might think now, I _would_ go out of my way to change it if it caused you trouble, because that is a way I show you respect. But you are not presenting valid reasons and forcing me to remove something that I make use of. That is something that I cannot respect, and which I interpret as disrespect toward me.

> > The comment about the libtorrent ABI issue should be mentioned in compile guides, but it is also very relevant where it is in the CI script.
> 
> I don't deny it and I already told you to [make it shorter](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491137998). And... you asked me where is the better place, I [replied](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491642953) and you ignored it, what, were you just asking for fun?

Do you mind giving a concrete suggestion? Personally, I don't see a way to further compress the comment while preserving its intended usefulness, and I don't feel like trying to guess what you want. Just state it clearly, if I disagree, I'll state clearly my alternative, and so forth until we reach an agreement.

I don't disagree with adding it to somewhere in the wiki as well, I'll do it eventually.

> Seriously, what is the point of getting my approval as [my role is worthless to you](https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491694579)? I'll give you a hint that it is still possible to get this PR merged in the current form when the maintainer is present, that is, if you can persuade him, probably won't be hard.

Your approval is not worthless. The point of at least seeing these last discussions through is to expedite this is to improve the project, despite our own grievances and differences of opinion."
491709624,13288,Chocobo1,2020-09-20T16:46:41Z,">You are arguing about a point I never made, which is ""you're obliged to review/comment on every PR/issue"".

I'm merely telling a fact which might be something you didn't realize before.

>Just leave your grievances aside for a moment and get back on topic. I'm making an effort to brush aside your disrespect and abusive nitpicking, surely you can put up with my rude attitude.

Alright, but I'm noting that each reviewer has their own focus area and lax area and no one except the maintainer is except from this process, and this is how the current review process goes.

>No, it doesn't. I have even stated that this is personally useful to me, if not for anyone else. Is that not enough? 

I see no harm (little inconvenience at most) in adding this functionality a bit later, from my POV why not hold it for a while and see how it goes? 
From my POV taking resources but not putting it into use is wasteful.

>But you are not presenting valid reasons and forcing me to remove something that I make use of. That is something that I cannot respect, and which I interpret as disrespect toward me.

I think I already explained myself clear enough.
Each person has their own mind and thoughts, it is not always possible to see reasoning from others mind, even trying very hard. I faced similar situation numerous time when submitting PRs, I believe all team members have. I've learned not to take it personal as it is merely subjective opinions on matters. 

>>I don't deny it and I already told you to make it shorter. And... you asked me where is the better place, I replied and you ignored it, what, were you just asking for fun?
>
>Do you mind giving a concrete suggestion? 

I think my previous suggestions are concrete enough, I'll add here that IMO it is taking too many lines that it is distracting when reading the CI script and it should be moved near to the affected actions as said before.

>Your approval is not worthless. The point of at least seeing these last discussions through is to expedite this is to improve the project, despite our own grievances and differences of opinion.

I hope you also agree that reviewer comments (especially from team members) are not worthless. 
FYI, when I propose a PR, I find it useless to keep insisting my own reasoning when sufficient information is presented and the reviewer still thinks otherwise, in that case I can only trust the reviewer is knowing what he is doing. An accepted yet compromised PR is still better than a never-to-be-merged PR which contributes nothing to the project.
Also as you probably already know, the current employed merge process requires 2 out of 3 approvals from selected team members, I believe this is deliberately designed to collect opinions from multiple trusted minds and have tighter quality control on the PR, this also means making compromises are not unexpected and in fact, happens very often.
"
491725039,13288,FranciscoPombal,2020-09-20T19:26:37Z,"@Chocobo1 

> I'm merely telling a fact which might be something you didn't realize before.

I understand it.
 
> Alright, but I'm noting that each reviewer has their own focus area and lax area and no one except the maintainer is except from this process, and this is how the current review process goes.

I realize there are certain unspoken ""partitions"" (some clearer than others) in the code base. For example, RSS is glassez's domain, while front-end and other WebUI stuff is Piccirello's, etc... Is CI supposed to be your ""turf""? This has occurred organically, as far as I can tell. Perhaps we should clarify these things internally. But that is a discussion for another time.

> > No, it doesn't. I have even stated that this is personally useful to me, if not for anyone else. Is that not enough?
> 
> I see no harm (little inconvenience at most) in adding this functionality a bit later, from my POV why not hold it for a while and see how it goes?
> From my POV taking resources but not putting it into use is wasteful.

Well, from my POV, why not add this now, if it doesn't inconvenience anyone and is already useful for some. We'll see how it goes, and if there are problems, we remove it.

There is nothing being ""wasted"", as a public project we have ""unlimited"" artifact storage (and it's not like the usage that will result from this workflow is abusive of that, it's not like 6 10 GiB artifacts are uploaded each time) that does not interfere with other things.

> I think I already explained myself clear enough.
> Each person has their own mind and thoughts, it is not always possible to see reasoning from others mind, even trying very hard. I faced similar situation numerous time when submitting PRs, I believe all team members have. I've learned not to take it personal as it is merely subjective opinions on matters.

Right, it is natural to have differences of opinion. The thing is, why should your subjective feeling that this could be added a bit later trump my objective arguments explaining that it is already useful and that there is no objective reason not to include it now?

> > Do you mind giving a concrete suggestion?
> 
> I think my previous suggestions are concrete enough, I'll add here that IMO it is taking too many lines that it is distracting when reading the CI script and it should be moved near to the affected actions as said before.

OK, I already explained why I think it makes more sense for this to be at the top, but I'm willing to compromise here. How about:

```
# NOTE: Avoids a libtorrent ABI issue. See https://github.com/arvidn/libtorrent/issues/4965
```

on top of the `Force AppleClang ...` step? 1 line, doesn't extend past column 100 even when accounting for indentation.

> I hope you also agree that reviewer comments (especially from team members) are not worthless.

Of course.

> FYI, when I propose a PR, I find it useless to keep insisting my own reasoning when sufficient information is presented and the reviewer still thinks otherwise, in that case I can only trust the reviewer is knowing what he is doing. An accepted yet compromised PR is still better than a never-to-be-merged PR which contributes nothing to the project.

I want to get this merged ASAP.

The thing is - this comes back to the point I made above about my good, objective reason to include the artifact stuff now, rather than later, and the fact that there is no good reason not to do it. I already compromised in the matter of the comment, as there is some merit to your request - the usefulness of the comment diminishes a bit, but isn't completely lost by moving it and shortening it. However, in what concerns this discussion about artifacts, you must either accept that _I_ know what I'm doing, or present a good, objective reason why this shouldn't be included now.

Sorry, but I can't accept that the reason I remove it is purely ""because I had to appease Chocobo1"". I don't think this sets a good precedent, and I don't think it is a healthy way of handling collaboration in a project.

> Also as you probably already know, the current employed merge process requires 2 out of 3 approvals from selected team members, I believe this is deliberately designed to collect opinions from multiple trusted minds and have tighter quality control on the PR, this also means making compromises are not unexpected and in fact, happens very often.

The design of the system is good, I agree. But this triumvirate has been broken as of late - as we all know, the merging process has been a 2-man show for the last several months. Participation and input from 3 members with merging rights is essential; IMO, it can avoid situations like these. I do realize that there is nothing that can be done about this in the near future at least."
491725291,13288,FranciscoPombal,2020-09-20T19:28:34Z,"@Chocobo1 

Extracted from https://github.com/qbittorrent/qBittorrent/pull/13288#discussion_r491725039, for visibility:

>OK, I already explained why I think it makes more sense for this to be at the top, but I'm willing to compromise here. How about:
>
>```
># NOTE: Avoids a libtorrent ABI issue. See https://github.com/arvidn/libtorrent/issues/4965
>```
>
>on top of the `Force AppleClang ...` step? 1 line, doesn't extend past column 100 even when accounting for indentation."
491789106,13288,Chocobo1,2020-09-21T04:31:38Z,">How about:# NOTE: Avoids a libtorrent ABI issue. See https://github.com/arvidn/libtorrent/issues/4965
>
>on top of the Force AppleClang ... step? 1 line, doesn't extend past column 100 even when accounting for indentation.

OK.

I reevaluated and now I think the ubuntu logs maybe are a bit useful, we should keep them, sorry for the inconveniences.

My viewpoint on the ubuntu binaries are still the same, we should still keep them out in this PR. 
But here is another idea/compromise to improve the situation here, it probably won't be easy but it would justify uploading them from my POV and you probably would like to investigate it in a follow up PR (so this one gets merged quickly). This is about linking statically with all of our direct dependencies (zlib, openssl, qt, etc), in this way the binary is much more (still not entirely) portable across distros and the upside is the audiences would be larger than just the ubuntu community.

>Sorry, but I can't accept that the reason I remove it is purely ""because I had to appease Chocobo1"". I don't think this sets a good precedent, and I don't think it is a healthy way of handling collaboration in a project.

As said before, you shouldn't make it personal, either on yourself or on others and this is really how the review process goes, by collecting everyone opinion (even the ones you take it personally) and both sides making compromises so the opinions may converge and the result quality is consistent/improved in the end."
492077003,13288,FranciscoPombal,2020-09-21T14:11:42Z,"@Chocobo1 

> My viewpoint on the ubuntu binaries are still the same, we should still keep them out in this PR.
But here is another idea/compromise to improve the situation here, it probably won't be easy but it would justify uploading them from my POV and you probably would like to investigate it in a follow up PR (so this one gets merged quickly). This is about linking statically with all of our direct dependencies (zlib, openssl, qt, etc), in this way the binary is much more (still not entirely) portable across distros and the upside is the audiences would be larger than just the ubuntu community.

Something like this? https://github.com/qbittorrent/qBittorrent/wiki/Compiliation:-Fully-static-binaries-on-Linux-(glibc-or-musl)
I agree that it would be a nice addition, definitely worth investigating later.

> As said before, you shouldn't make it personal, either on yourself or on others and this is really how the review process goes, by collecting everyone opinion (even the ones you take it personally) and both sides making compromises so the opinions may converge and the result quality is consistent/improved in the end.

:+1: 

I also changed the comment now, in the latest force push."
492086455,13288,glassez,2020-09-21T14:20:24Z,">@glassez
The libtorrent version is fixed to some git commit and requires regularly bumps to keep up with the latest development.
Are you fine with this? I know you already approved, so I'm just double checking.

I don't mind being sticked to a specific libtorrent version.
But as I've said many times, we need to stick to the versions of libraries/tools (of course, among the supported ones) that are least likely to be used by team members to make sure that we don't accidentally break their support. And since most of us prefer to use the fresh versions (the latest or close to the latest), in CI environment, we should use the minimum supported versions or the closest to them if possible."
492173579,13288,Chocobo1,2020-09-21T15:59:00Z,"I think we should keep the builds simple by omitting this setting. Who knows what (unexpected) impact would this setting bring in? Also we don't use it in official releases, we shouldn't do it here either."
492184455,13288,FranciscoPombal,2020-09-21T16:15:28Z,"@Chocobo1 Fixed. Also removed `arch`, since `x64` is the default anyway."
494483161,13288,glassez,2020-09-24T17:17:33Z,">linking statically with all of our direct dependencies (zlib, openssl, qt, etc), in this way the binary is much more (still not entirely) portable across distros and the upside is the audiences would be larger than just the ubuntu community.

I don't think it's a good idea to build something on CI in a way that is unlikely to be used in real life. AFAIK, it is usually linked dynamically on Linux.
Build artifacts are not the purpose for which CI works. This is just a by-product that can be useful to someone.
Personally, I don't mind having it here if it doesn't cost us anything. But don't want too much from it."
494499521,13288,Chocobo1,2020-09-24T17:44:56Z,">I don't think it's a good idea to build something on CI in a way that is unlikely to be used in real life. AFAIK, it is usually linked dynamically on Linux.

Right, but the point is the current artifacts are only targeted to ubuntu users (and hardly useful to the point that I would prefer not uploading them). If we want something really useful and universal then the only way is static builds (uncommon but viable).
"
494512800,13288,glassez,2020-09-24T18:08:10Z,">current artifacts are only targeted to ubuntu users

It's just a side effect of the fact that we use Ubuntu here...
What I'm really worried about is whether we'll miss build error by having a static linking here? Well, that is, under some conditions, the static one is successful, but the dynamic one fails?"
494515701,13288,Chocobo1,2020-09-24T18:13:21Z,">What I'm really worried about is whether we'll miss build error by having a static linking here? Well, that is, under some conditions, the static one is successful, but the dynamic one fails?

It would be very unlikely under normal conditions although it still depends on the build script."
1314166536,19542,glassez,2023-09-03T08:04:38Z,It is incorrect to use it here.
1314172339,19542,glassez,2023-09-03T08:19:54Z,"```suggestion
    const QString torrentID = TorrentID(p->handle.info_hash()).toString();
```"
1314172619,19542,glassez,2023-09-03T08:20:47Z,"```suggestion
    if (!torrent) [[unlikely]]
```"
1314172949,19542,glassez,2023-09-03T08:21:42Z,"```suggestion
        Path cert = baseDir / Path(torrentID);
```"
1314174967,19542,glassez,2023-09-03T08:26:53Z,"etc. where it is `Class(constructor, params)` and there is no ambiguity during compilation."
1314176882,19542,glassez,2023-09-03T08:31:44Z,"Also I would use more explicit variable names, e.g. `certPath` since it represents a path, not a certificate."
1314177923,19542,glassez,2023-09-03T08:34:44Z,"I would construct base path once and then reuse it:
```suggestion
        const Path basePath = baseDir / Path(torrentID);
        const Path keyPath = basePath + u"".key""_s;
```"
1316888285,19542,glassez,2023-09-06T07:57:42Z,I feel `Peers` is redundant in all such names.
1316894351,19542,glassez,2023-09-06T08:02:46Z,"```suggestion
    if (path != m_sslPeersCertificatesDirectory)
        m_sslPeersCertificatesDirectory = path;
```"
1322519832,19542,glassez,2023-09-12T06:43:25Z,"```suggestion
    m_ui->spinSslPort->setValue(session->sslPeersPort());
    m_ui->groupSslPeers->setChecked(session->isSslPeersEnabled());
```"
1322520233,19542,glassez,2023-09-12T06:43:53Z,"```suggestion
    connect(m_ui->spinSslPort, qSpinBoxValueChanged, this, &ThisType::enableApplyButton);
    connect(m_ui->groupSslPeers, &QGroupBox::toggled, this, &ThisType::enableApplyButton);
```"
1322523817,19542,glassez,2023-09-12T06:46:10Z,"```suggestion
                   <widget class=""QLabel"" name=""lblSSLPort"">
```"
1322525576,19542,glassez,2023-09-12T06:47:32Z,"```suggestion
    for (const auto &file: QList<QString> {u""certificate""_s, u""privateKey""_s, u""dhParams""_s})
    {
        if (!data().contains(file))
            throw APIError(APIErrorType::BadData);
    }
```"
1322529017,19542,glassez,2023-09-12T06:50:59Z,"```suggestion
            torrent->nativeHandle().set_ssl_certificate(certPath.toString().toStdString()
                    , keyPath.toString().toStdString()
                    , dhPath.toString().toStdString());
```"
1324359212,19542,glassez,2023-09-13T11:16:30Z,Redundant empty line.
1324360221,19542,glassez,2023-09-13T11:17:24Z,Cert file has no extension unlike other two files. Is this done by intention?
1324362056,19542,glassez,2023-09-13T11:19:17Z,Why is `.dh` file handled differently? Is it valid use case when torrent uses its own cert and key files but default `.dh`?
1324401166,19542,rcarpa,2023-09-13T11:57:37Z,"I didn't think much about it. I somehow just followed sub-conscientiously the fact of adding the suffix to the key file the same way haproxy does (https://docs.haproxy.org/2.6/configuration.html#5.1-crt). Do you think it's better to add a suffix? 

Maybe having `<name>.cert.pem`, `<name>.key.pem` and `<name>.dh.pem` would be better for operating systems where the suffix actually matters. I'm too used working on linux. "
1324402382,19542,rcarpa,2023-09-13T11:58:49Z,"Yes, the DH parameters aren't actually secret. It's not problematic at all to re-use the same parameters for all torrents. So having only one parameters file, but per-torrent cert/key is a valid use-case. "
1324412452,19542,rcarpa,2023-09-13T12:07:30Z,"I re-named most variables to remove ""Peers"". Except `sslPeersCertificatesDirectory`, where it seems correct to keep it."
1324456011,19542,glassez,2023-09-13T12:43:52Z,"> Except `sslPeersCertificatesDirectory`, where it seems correct to keep it.

I don't think so.
If `sslCertificatesDirectory` looks like it has too broad a meaning, then I would use `Torrents` instead of `Peers`. (After all, we are talking about per-torrent certificates, aren't we?)"
1324467943,19542,glassez,2023-09-13T12:53:14Z,"> Maybe having `<name>.cert.pem`, `<name>.key.pem` and `<name>.dh.pem` would be better for operating systems where the suffix actually matters.

I would just use `.crt` for certificate files without adding the same `.pem` extension for all the files."
1324481142,19542,glassez,2023-09-13T13:03:19Z,"> > Maybe having `<name>.cert.pem`, `<name>.key.pem` and `<name>.dh.pem` would be better for operating systems where the suffix actually matters.
> 
> I would just use `.crt` for certificate files without adding the same `.pem` extension for all the files.

Nevermind.
I'm OK with your suggestion. IIRC, `.pem` extension is often used for all such files."
1324493717,19542,glassez,2023-09-13T13:11:07Z,Why not save certificate files on the disk to be reused after restart?
1324499500,19542,rcarpa,2023-09-13T13:15:27Z,This is actually a good idea
1324921028,19542,rcarpa,2023-09-13T18:36:54Z,Added the logic to save certificates on disk and to clean up when the torrent is removed from the session. 
1349936375,19542,glassez,2023-10-09T07:22:41Z,"```suggestion
    , m_sslEnabled(BITTORRENT_SESSION_KEY(u""SSL/Enabled""_s), false)
```"
1349936508,19542,glassez,2023-10-09T07:22:52Z,"```suggestion
    , m_sslPort(BITTORRENT_SESSION_KEY(u""SSL/Port""_s), -1)
```"
1349936719,19542,glassez,2023-10-09T07:23:09Z,"```suggestion
    , m_sslCertificatesDirectory(BITTORRENT_SESSION_KEY(u""SSL/CertificatesDir""_s), specialFolderLocation(SpecialFolder::Config) / Path(u""SSLTorrentsCertificates""_s))
```"
1349938761,19542,glassez,2023-10-09T07:25:33Z,It would be nice to make sure that `sslPort` is at least different from regular `port`.
1350180401,19542,glassez,2023-10-09T11:27:32Z,I believe this check is redundant.
1350181280,19542,glassez,2023-10-09T11:28:29Z,"```suggestion
void SessionImpl::setSslEnabled(const bool enabled)
```"
1350183837,19542,glassez,2023-10-09T11:31:14Z,Please place `sslCertificatesDirectory()` and `setSslCertificatesDirectory()` together.
1350188778,19542,glassez,2023-10-09T11:36:37Z,"```suggestion
    TorrentImpl *const torrent = m_torrents.value(torrentID);
```"
1350260960,19542,glassez,2023-10-09T12:45:15Z,"```suggestion
    for (const auto &[path, content] : {std::pair {certPath, certificate}, {keyPath, privateKey}, {dhPath, dhParams}})
```"
1350261421,19542,glassez,2023-10-09T12:45:40Z,"```suggestion
    const auto [certPath, keyPath, dhPath] = m_session->sslCertificatesPathsForTorrent(id());
```"
1350263623,19542,glassez,2023-10-09T12:47:37Z,What's wrong with default permissions?
1350266320,19542,glassez,2023-10-09T12:50:00Z,I discourage creating such trivial wrappers in new contributions. Just use `m_ui->spinSslPort->value()` (etc.) in-place.
1350267266,19542,glassez,2023-10-09T12:50:51Z,Please prevent conflicts with regular port.
1350270132,19542,glassez,2023-10-09T12:53:19Z,"Wouldn't the following work?
```suggestion
    for (const auto &file: {u""certificate""_s, u""privateKey""_s, u""dhParams""_s})
```"
1350275038,19542,glassez,2023-10-09T12:57:46Z,"IMO, the wrong type of error. Everything is fine with the parameters. This is the very action that is not allowed, isn't it?
On the other hand, why not allow it? ""SSL peers support"" can be enabled later."
1350277946,19542,glassez,2023-10-09T13:00:23Z,I wouldn't expect that it throws exception. Just add the warning message to the log.
1381629498,19542,rcarpa,2023-11-03T12:45:01Z,"It's best (security) practice to only allow the owner read the secret key. Other than that, it's not necessarily needed. "
1382440686,19542,glassez,2023-11-04T18:28:15Z,"```suggestion
    while ((sslPort() < 0) || (port() == sslPort()))
```"
1382506350,19542,glassez,2023-11-05T04:50:02Z,"```suggestion
            for (const QString &portString : asConst(portStrings))
```"
1382506403,19542,glassez,2023-11-05T04:50:33Z,"```suggestion
                for (const QString &portString : asConst(portStrings))
```"
1382506424,19542,glassez,2023-11-05T04:50:53Z,"```suggestion
                for (const QString &portString : asConst(portStrings))
```"
1382506436,19542,glassez,2023-11-05T04:51:14Z,"```suggestion
            for (const QString &portString : asConst(portStrings))
```"
1382506673,19542,glassez,2023-11-05T04:54:35Z,"```suggestion
    if (const Path baseDir = sslCertificatesDirectory(); baseDir.exists())
```"
1382507715,19542,glassez,2023-11-05T05:07:34Z,"Why is it here? Shouldn't this be done after you've created the file? Besides, it's there too...
Or did you intend to apply it to `baseDir` here instead of `keyPath`?"
1382508113,19542,glassez,2023-11-05T05:11:10Z,"```suggestion
    int sslPort = 0;
    while ((sslPort == getPort()) || (sslPort <= 0))
```"
1382508829,19542,glassez,2023-11-05T05:17:31Z,"I would prefer it to be used written correctly as `SSL` in the public space:
```suggestion
    void setSSLCertificateAction();
```"
1382508882,19542,glassez,2023-11-05T05:17:53Z,"```suggestion
void TorrentsController::setSSLCertificateAction()
```"
1382525926,19542,Chocobo1,2023-11-05T07:56:12Z,"```suggestion
        Utils::Fs::removeFile(path);
```"
1382526313,19542,Chocobo1,2023-11-05T07:58:47Z,"```suggestion
        m_sslPort = Utils::Random::rand(1024, 65535);
```"
1382526991,19542,Chocobo1,2023-11-05T09:03:39Z,"```suggestion
    LogMsg(tr(""Unable to set SSL certificates for torrent. Torrent: \""%1\"". Reason: \""%2\"""").arg(torrent->name(), QString::fromStdString(p->message())), Log::WARNING);
```"
1382527084,19542,Chocobo1,2023-11-05T09:04:44Z,"```suggestion
            torrent->nativeHandle().set_ssl_certificate(certPath.toString().toStdString()
                , keyPath.toString().toStdString()
                , dhPath.toString().toStdString());
```"
1382528503,19542,Chocobo1,2023-11-05T09:15:24Z,"```suggestion
            LogMsg(tr(""Cannot save SSL certificates. Torrent: \""%1\"". Reason: \""%2\"""").arg(name(), result.error()), Log::WARNING);
```"
1382528786,19542,Chocobo1,2023-11-05T09:17:27Z,"Do you meant:
```suggestion
        QFile(baseDir.data()).setPermissions(QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner | QFile::ReadUser | QFile::WriteUser | QFile::ExeUser);
```
?"
1382528995,19542,Chocobo1,2023-11-05T09:19:06Z,"```suggestion
        sslPort = Utils::Random::rand(1024, 65535);
```"
1382529124,19542,Chocobo1,2023-11-05T09:20:03Z,"```suggestion
        session->setSslEnabled(it.value().toBool());
```"
1382529151,19542,Chocobo1,2023-11-05T09:20:11Z,"```suggestion
        session->setSslPort(it.value().toInt());
```"
1382537972,19542,glassez,2023-11-05T09:20:26Z,I believe `p->message()` is irrelevant here.
1382529379,19542,Chocobo1,2023-11-05T09:22:14Z,"For new code, `id` should use camel case:
```suggestion
                <input type=""checkbox"" id=""sslEnabledCheckbox"" onclick=""qBittorrent.Preferences.updateSslSettings();"" />
                <label for=""sslEnabledCheckbox"">QBT_TR(Enable SSL torrents)QBT_TR[CONTEXT=OptionsDialog]</label>
```
"
1382529583,19542,Chocobo1,2023-11-05T09:23:41Z,"```suggestion
                <widget class=""QGroupBox"" name=""groupSSL"">
```"
1382529614,19542,Chocobo1,2023-11-05T09:23:55Z,"```suggestion
                   <widget class=""QSpinBox"" name=""spinSSLPort"">
```"
1382529646,19542,Chocobo1,2023-11-05T09:24:07Z,"```suggestion
                   <widget class=""QPushButton"" name=""randomSSLButton"">
```"
1382529802,19542,Chocobo1,2023-11-05T09:25:20Z,"```suggestion
                <label for=""sslPortValue"">QBT_TR(Port used for incoming SSL connections:)QBT_TR[CONTEXT=OptionsDialog]</label>
                <input type=""text"" id=""sslPortValue"" style=""width: 4em;"" title=""QBT_TR(Set to 0 to let your system pick an unused port)QBT_TR[CONTEXT=OptionsDialog]"" />
                <button type=""button"" id=""sslRandomPortButton"" style=""margin-left: 1em;"" onclick=""qBittorrent.Preferences.generateRandomSslPort();"">QBT_TR(Random)QBT_TR[CONTEXT=OptionsDialog]</button>
```"
1382530021,19542,Chocobo1,2023-11-05T09:26:46Z,"```suggestion
        const generateRandomSSLlPort = function() {
```
Please change all `Ssl` instances to `SSL`. I'm going omit mentioning this."
1382530139,19542,Chocobo1,2023-11-05T09:27:29Z,"Camel case for variables:
```suggestion
            const sslEnabled = $('ssl_enabled_checkbox').getProperty('checked');
```
and apply it to other variables below too."
1382554803,19542,Chocobo1,2023-11-05T11:13:52Z,">I believe p->message() is irrelevant here.

Why would it be irrelevant? It might carry error message from OS/libary, would it not?"
1382558154,19542,glassez,2023-11-05T11:36:48Z,"> Why would it be irrelevant?

Because it is not the reason of ""Unable to set SSL certificates for torrent"". It is message from ""torrent_need_cert_alert"" so it should be about the fact that torrent needs SSL sertificate."
1382559884,19542,Chocobo1,2023-11-05T11:47:55Z,"Ok, ignore the `p->message()` part."
1382896142,19542,github-advanced-security[bot],2023-11-06T07:59:25Z,"## Unused variable, import, function or class

Unused variable generateRandomSSLlPort.

[Show more details](https://github.com/qbittorrent/qBittorrent/security/code-scanning/322)"
1382896145,19542,github-advanced-security[bot],2023-11-06T07:59:25Z,"## Unused variable, import, function or class

Unused variable sslEnabled.

[Show more details](https://github.com/qbittorrent/qBittorrent/security/code-scanning/323)"
1382915182,19542,rcarpa,2023-11-06T08:19:22Z,Are you sure about this one ? it seems to go against the current convention in the HTML file. 
1382921037,19542,rcarpa,2023-11-06T08:24:52Z,"Doing it, but you have other parts of code which work with SSL certificates which use the `.*Ssl.*` naming convention. "
1382926237,19542,rcarpa,2023-11-06T08:29:36Z,"Would be good to update the code style document, as it's not clear enough about this point. I checked it on purpose when writing this code and I had the impression that `{}` are optional only for single-line `if` constructs (and are mandatory for loops). To confirm this, you asked me to change a a single-line `for` into the version with explicit brackets some time in the past :) "
1382927446,19542,rcarpa,2023-11-06T08:30:44Z,"yes, I intended to use baseDir"
1382968063,19542,Chocobo1,2023-11-06T09:03:09Z,"Sorry I brought conflicts. I'm under the impression that we (major qbt contributors) prefer to omit the brackets for single line statement's body, unless there is if-else. Yeah the coding style doc is a bit unclear about it."
1382970638,19542,Chocobo1,2023-11-06T09:05:26Z,"Yes. For now, new code (variables) should use camel case unless it is transmitted over the wire (for example the preference data)."
1382972628,19542,Chocobo1,2023-11-06T09:07:11Z,I suppose they should be renamed at a later time...
1383038243,19542,glassez,2023-11-06T09:55:00Z,"> Yeah the coding style doc is a bit unclear about it.

Coding guidelines say:
>**Acceptable conditions to omit braces**
When the conditional statement in if/else has only one line and its body occupy only one line, this also applies to loops statements.
Notice that for a series of if - else branches, if one branch needs braces then all branches must add braces.

IMO, this clearly describes cases where brackets can be omitted.
This is not a requirement (just ""acceptable conditions"" to do it this way), although we prefer to do it where possible."
1383132329,19542,Chocobo1,2023-11-06T11:07:20Z,"```suggestion
    , m_sslCertificatesDirectory(BITTORRENT_SESSION_KEY(u""SSL/CertificatesDir""_s)
        , (specialFolderLocation(SpecialFolder::Config) / Path(u""SSLTorrentsCertificates""_s)))
```"
1383243065,19542,Chocobo1,2023-11-06T12:17:26Z,"FWIW we had a similar situation with the webui certificate. A long time ago it was the same as this, importing the data directly. However later it became a problem when the certificates expired and users need to reload them. It was suggested that qbt should record the cert file paths instead. This way users can just replace the cert files and restart the webui for it to take effect. I suppose we should follow that lesson here.
Also the folder/file creation in `TorrentImpl::setSSLCertificate()` (and therefore `m_sslCertificatesDirectory` too) seems to be doing things unrelated to torrenting and I would like to somehow simplify it. For example, one would have guessed that `TorrentImpl::setSSLCertificate` might be reading cert files and passing the data to libtorrent instead of saving certs to disk."
1383252029,19542,Chocobo1,2023-11-06T12:26:01Z,"Excuse me I wasn't following the latest development and discussions.

>The certificates from that path will be automatically added to affected torrents when torrent_need_cert_alert is raised. Certificates have to be stored in that path with pre-defined file names.

IMO for every torrent the cert paths would need be designated separately. And of course we can have some default paths for non-specified torrent and users can opt to use it if they want."
1383283864,19542,rcarpa,2023-11-06T12:53:04Z,I pushed the change to set certificates using their path. But I don't fully understand the suggestion about deporting the logic for creation of directories/certificates somewhere else. Would it be better located in the m_session? On the last subject: Is the configurable per-torrent certificate path something difficult to add later ? Or is it desired in this initial implementation ? 
1383542398,19542,Chocobo1,2023-11-06T15:42:18Z,">But I don't fully understand the suggestion about deporting the logic for creation of directories/certificates somewhere else. Would it be better located in the m_session? 

Just to be clear, I was suggesting that qbt don't handle the creation of directories/certificates. Instead qbt will just take cert paths from user and pass it to libtorrent. The cert files will need to be placed on disk beforehand and this part is done manually by the user.
Also, regarding security, I suppose this is better since the certs aren't transmitted over the net and therefore we don't need top security for our web server/api implementation.

>I pushed the change to set certificates using their path. 

Not sure if you meant it is done. But I would expect more changes if that idea of ""pass cert path"" is accepted. I.e. the `setSSLCertificateAction` will not accept cert data and only accept cert paths. (and rename it to `setSSLCertificatePathAction`?)

>On the last subject: Is the configurable per-torrent certificate path something difficult to add later ? Or is it desired in this initial implementation ?

I don't think it will be too difficult:
```c++
void TorrentImpl::setSSLCertificate(const Path &certificatePath, const Path &privateKeyPath, const Path &dhParamsPath)
{
    // if required, check cert validness of certificatePath, privateKeyPath, dhParamsPath and log error if any
    m_nativeHandle.set_ssl_certificate(certificatePath.toString(), privateKeyPath.toString(), dhParamsPath.toString());
}
```
And I don't insist the UI side to be complete in this PR."
1384015178,19542,rcarpa,2023-11-06T21:28:22Z,"I'm personally interested in the workflow where the actual certificate content is set via the API. 

It doesn't prevent us from implementing two separate actions: one for setting the certificates via path; the other using their content, but I would really like to see a variation of the current behavior implemented. "
1384022753,19542,rcarpa,2023-11-06T21:35:08Z,"Also, note that the code snippet which you proposed : 
```
void TorrentImpl::setSSLCertificate(const Path &certificatePath, const Path &privateKeyPath, const Path &dhParamsPath)
{
    // if required, check cert validness of certificatePath, privateKeyPath, dhParamsPath and log error if any
    m_nativeHandle.set_ssl_certificate(certificatePath.toString(), privateKeyPath.toString(), dhParamsPath.toString());
}
``` 
doesn't encounter for the fact that m_nativeHandle doesn't preserve the configuration across restarts. So we'll need to persist the paths passed to this function on qbittorrent side. On restart, libtorrent raises the `handleTorrentNeedCertAlert` alert and qbittorrent would have to call `m_nativeHandle.set_ssl_certificate` again with the paths it took care of preserving accross restarts."
1384346903,19542,glassez,2023-11-07T04:05:42Z,"As for setting certificates via paths, does it really make sense to make it more complicated than just limiting yourself to use pre-defined paths already implemented in this PR? I.e. `<configured_certificates_for>/<info_hash>.<ext>`. Otherwise it would require to implement the way of assigning/changing and storing such custom paths within torrent ""resume"" data."
1390054257,19542,Chocobo1,2023-11-11T00:17:24Z,"Excuse my late reply, was busy in weekdays.

>the other using their content

Personally I don't like this way. It doesn't scale well if the certs are many and qbt will be responsible for storing/managing them.

>So we'll need to persist the paths passed to this function on qbittorrent side. On restart, libtorrent raises the handleTorrentNeedCertAlert alert and qbittorrent would have to call m_nativeHandle.set_ssl_certificate again with the paths it took care of preserving accross restarts.

In an ideal world, the paths would be stored in torrent resume data (and able to be manipulated in UI/API) like glassez said. However I don't oppose a 'simpler' implementation like glassez [suggestion](https://github.com/qbittorrent/qBittorrent/pull/19542#discussion_r1384346903) for now."
1390477068,19542,rcarpa,2023-11-12T20:30:37Z,I clearly miss-understand the scalability issue which worries you. Can you please be more specific in the explanation of your concerns? 
1411737575,19542,rcarpa,2023-12-01T07:55:03Z,"@Chocobo1 , I allow myself to re-iterate my question from the previous message: what are the scalability concerns for the current solution ? "
1443656554,19542,Chocobo1,2024-01-06T07:55:35Z,">@Chocobo1 , I allow myself to re-iterate my question from the previous message: what are the scalability concerns for the current solution ?

Sorry for (very) late reply. I intend get my hands on this PR in the near future. Maybe I can clear things up when that time comes.
"
1443657959,19542,glassez,2024-01-06T08:06:20Z,"I believe that we should imagine a typical scenario of its use, so that in the end it does not turn out that we get a very reliable, scalable, etc., but at the same time a unusable feature."
1468551160,19542,Chocobo1,2024-01-27T18:40:42Z,"@rcarpa 
I have played with SSL torrents a bit and in the mean time, had a little discussion with other team members. I understand SSL torrents better than before. Also I had a bit different idea/approach to support SSL torrents in qbt. I figure it would be easier for us that I submit my ideas in another PR for further discussions: #20338"
232111372,9824,Chocobo1,2018-11-09T00:41:51Z,"I guess you won't need `copyAsConst()` here, also you could use [clazy](https://github.com/KDE/clazy) to help verify."
232111527,9824,Chocobo1,2018-11-09T00:42:44Z,and here
232111937,9824,Chocobo1,2018-11-09T00:44:36Z,seems need to add `qAsConst` for both loops.
232112194,9824,Chocobo1,2018-11-09T00:45:53Z,seems no need here
232112392,9824,Chocobo1,2018-11-09T00:47:06Z,or you can just remove all the newly added `copyAsConst` and only add them back when clazy complains :P
232113234,9824,Chocobo1,2018-11-09T00:52:01Z,"you should not replace the use of `torrents()` by `m_torrents`, those are different objects, or you should make another commit for it."
232113688,9824,Chocobo1,2018-11-09T00:54:30Z,why remove the `&`?
232156962,9824,thalieht,2018-11-09T06:57:30Z,Oops this was a copy paste mistake i'll revert these.
232156976,9824,thalieht,2018-11-09T06:57:33Z,"warning: loop variable 'hash' has type 'const BitTorrent::InfoHash &' but is initialized with type 'const QString' resulting in a copy
use non-reference type 'BitTorrent::InfoHash' to keep the copy or type 'const QString &' to prevent copying"
232162467,9824,Chocobo1,2018-11-09T07:36:02Z,"ok, do you mind rename `hash` -> `info` (or `infoHash`)? I find the old name easily mixed up with the element type of the container, and the ones below."
232164803,9824,thalieht,2018-11-09T07:50:15Z,Certainly.
232167296,9824,thalieht,2018-11-09T08:03:08Z,This is one of the 4 warnings Clazy complains.
232167468,9824,thalieht,2018-11-09T08:03:56Z,This too.
232184311,9824,thalieht,2018-11-09T09:13:44Z,"But these are `std::vector` containers and this guy says:
>Avoiding Detaching
>
>If your container is a std:: container or QVarLengthArray, you replace the `Q_FOREACH(a, b)` with `for (a : b)` and you are done. Arguably, Q_FOREACH should never, ever have been used on such a container, since copying those always copies all elements (deep copy).

https://www.kdab.com/goodbye-q_foreach/

What am i missing?

"
232194292,9824,thalieht,2018-11-09T09:47:26Z,I did it in the coding style commit.
232451334,9824,Chocobo1,2018-11-10T12:54:53Z,"I didn't realize they are not Qt containers, so it's OK."
232912780,9824,Chocobo1,2018-11-13T06:41:56Z,"adding & adds another indirection which is not necessary here, also you should switch `auto const` -> `const auto`"
232913416,9824,Chocobo1,2018-11-13T06:44:58Z,can it be `const AutoDownloadRule &rule`?
232913890,9824,Chocobo1,2018-11-13T06:47:46Z,please try `const QList<TrackerEntry> &trackers`
232914572,9824,Chocobo1,2018-11-13T06:51:29Z,`const auto &rule`?
232914889,9824,Chocobo1,2018-11-13T06:53:22Z,please also change to `const bool b`
232915583,9824,Chocobo1,2018-11-13T06:57:06Z,this should still be `QString url`
232918799,9824,Chocobo1,2018-11-13T07:15:14Z,"I think this change will have problems (crash), better:
```c++
const QSet<QString> tags {m_tags};
for (const QString &tag : tags)
    removeTag(tag);
```"
232919585,9824,Chocobo1,2018-11-13T07:19:14Z,"or
```c++
for (const QString &tag : tags())
    removeTag(tag);
```"
232921218,9824,Chocobo1,2018-11-13T07:27:25Z,"Also I think you need to take extra caution for every foreach -> for replacement: especially when the body of `for` loop are removing things, preferably test them to make sure they don't crash."
232946088,9824,thalieht,2018-11-13T09:00:32Z,"I had a warning here:
`warning: loop variable 'quote' of type 'const QChar' creates a copy from type 'const QChar'
use reference type 'const QChar &' to prevent copying`"
232946145,9824,thalieht,2018-11-13T09:00:45Z,"No... 3 lines below for const:
`error: 'this' argument to member function 'accepts' has type 'const RSS::AutoDownloadRule', but function is not marked const`
and 1 line below for reference:
`error: binding value of type 'const RSS::AutoDownloadRule' to reference to type 'RSS::AutoDownloadRule' drops 'const' qualifier`

I was wondering what's preferable here, keep the reference or use qAsConst?
"
232946208,9824,thalieht,2018-11-13T09:00:56Z,"I thought i had tried that but guess not, thanks it works."
232946223,9824,thalieht,2018-11-13T09:00:59Z,ok
232946244,9824,thalieht,2018-11-13T09:01:04Z,ok
232946274,9824,thalieht,2018-11-13T09:01:09Z,"Actually i have tested qAsConst and what you said and it doesn't crash, also tested without any of them and naturally it crashed. If you still think i should do it i will."
232946875,9824,thalieht,2018-11-13T09:02:55Z,Never mind it crashed when doing it to multiple torrents.
232955781,9824,thalieht,2018-11-13T09:27:58Z,"I looked at all loops in case they modified the container but i couldn't find any other, they are too many though and maybe i missed them."
232972775,9824,thalieht,2018-11-13T10:12:19Z,I looked at all of them again and i only found this one. I'll make a copy of `m_sessions`.
232973991,9824,Chocobo1,2018-11-13T10:15:42Z,"ok, just switch the order of ""auto"" & ""const""."
232975247,9824,Chocobo1,2018-11-13T10:19:24Z,">I was wondering what's preferable here, keep the reference or use qAsConst?

I would avoid doing changes here, it is not legacy code."
232982350,9824,thalieht,2018-11-13T10:38:37Z,"Actually this line is more than 1.5 years old, before qAsConst was introduced to qBt
https://github.com/qbittorrent/qBittorrent/commit/989a70fe60bb28c5c6bfdce86d6bec5949a833f0#diff-576c6aa10c20e1e0d491fd5cf5b81426R234
Maybe @glassez can say if it should be changed."
233041751,9824,thalieht,2018-11-13T13:44:29Z,"I found this too, `deleteTorrent()` modifies m_torrents, i'll change `m_torrents` to `torrents()`"
234452425,9824,glassez,2018-11-18T16:45:21Z,This change is incorrect. Actual m_rules items should be modified inside this loop.
234507218,9824,glassez,2018-11-19T06:43:01Z,"As for this change (and many other `copyAsConst` usages):
Since `mid()` doesn't actually return shared copy of some container `detach()` will not do anything except checking for references count so it's more lightweight than copy constructor called from `copyAsConst()`."
234581211,9824,thalieht,2018-11-19T11:18:47Z,"I have no idea how you know what you said and consequently, how to spot the other copyAsConst that aren't needed."
236045718,9824,glassez,2018-11-24T15:34:20Z,"As a rule, it obviously stems from the meaning of the function.
E.g. `mid()` here creates new list containing some subset of elements of affected list.
Just try to examine the meaning of all other affected functions. If you're in doubt in a particular case, ask for my explanation.

The problem of ""detach"" is greatly exaggerated. When we began to use range based for loop, we saw a warning that it can cause ""detach()"". And we blindly rushed to solve it, without going into details. But now it is obvious to me that in most cases this is not a problem at all.
@Chocobo1, don't you mind join this discussion?"
236048647,9824,thalieht,2018-11-24T17:35:28Z,"There are a few existing copyAsConst that seem to return a new container e.g. https://github.com/qbittorrent/qBittorrent/blob/master/src/gui/ipsubnetwhitelistoptionsdialog.cpp#L49, https://github.com/qbittorrent/qBittorrent/blob/master/src/base/bittorrent/tracker.cpp#L139 and https://github.com/qbittorrent/qBittorrent/blob/master/src/webui/api/appcontroller.cpp#L205
Are they correct or do i remove them?
There is a case that returns a container that is returned from another function, it should keep copyAsConst right? https://github.com/qbittorrent/qBittorrent/blob/master/src/gui/properties/trackerlistwidget.cpp#L397"
236061134,9824,Chocobo1,2018-11-25T05:35:02Z,"If this isn't much work, it might be worth if we can make an non-exhaustive whitelist of situations (and put in coding guidelines) while reviewing this PR, specifying where `copyAsConst()` can be omitted. For example: `mid()` function in Qt types.
"
236080496,9824,glassez,2018-11-25T16:41:51Z,">There are a few existing copyAsConst that seem to return a new container...
Are they correct or do i remove them?

It should be removed in all 3 cases above.
>There is a case that returns a container that is returned from another function, it should keep copyAsConst right?

No in case if first function returns no copy of existing object (as in your example).

In General, I came to the conclusion that the methods that return a newly created container (a copy of a temporary object, to be exact) are the vast majority. I do not even come to mind the opposite case (at least in Qt), it needs a good look. As for qBittorrent own code, the best solution would be to change the type of those few methods that return a shared copy of the class internal container so that they return a constant reference instead (e.g. https://github.com/qbittorrent/qBittorrent/pull/9883/files#diff-b369e532eff50253387c9d203da4b928R453) and remove `copyAsConst` at all so it did not tempt us. If we still encounter the affected method somewhere in the third-party code (or in Qt), we can always store its value in a pre-declared constant and iterate over it."
236083919,9824,thalieht,2018-11-25T18:06:59Z,">we can always store its value in a pre-declared constant and iterate over it.

I thought copyAsConst was introduced to avoid that? https://github.com/qbittorrent/qBittorrent/pull/8325#discussion_r164265321"
236084491,9824,glassez,2018-11-25T18:27:07Z,"Yes, but we mistakenly thought that the problem was much bigger.
It's not a problem to do so if it concerns isolated cases (at least for me). But if there are a lot of objections, you can keep `copyAsConst` for that cases."
236123260,9824,Chocobo1,2018-11-26T05:12:12Z,"@thalieht 
Now I suspect the [problem](https://github.com/qbittorrent/qBittorrent/pull/9824#discussion_r232918799) returns.

Also ping @glassez, the same apply to your change at https://github.com/qbittorrent/qBittorrent/pull/9883/files#diff-b369e532eff50253387c9d203da4b928R453"
236129192,9824,glassez,2018-11-26T05:53:58Z,We shouldn't modify containers inside range based `for` loop! In such case we should either iterate over its copy or use another way.
236135098,9824,Chocobo1,2018-11-26T06:34:31Z,"Now I suspect ""Return const reference for a few shared containers"" is not going the right way, it changes the whole semantics of the function... aren't we used to getting a new copy of container from Qt functions? Now we only get constant references, it is a big difference..."
236136800,9824,glassez,2018-11-26T06:45:29Z,">aren't we used to getting a new copy of container from Qt functions? Now we only get constant references, it is a big difference...

Damn. You're right.
So what are we supposed to do? There are two main options:
1. Apply `copyAsConst()` in a ""paranoid way"" to all rvalues.
2. Apply `copyAsConst()` only to the rvalues that produces shared copy of inner containers (if this follows from the meaning of such method, because we should not get into its implementation)."
236154622,9824,thalieht,2018-11-26T08:18:25Z,Will delete this commit.
236842964,9824,thalieht,2018-11-27T20:57:33Z,"I'm not entirely sure what's going on here to be honest. Is this still needed?
Also should i remove `#include <type_traits>`? It's included in QtGlobal."
236910981,9824,Chocobo1,2018-11-28T01:25:45Z,"you only need to rename the functions, ~~nothing else, also the removal of QT_VERSION condition check is incorrect.~~"
236979078,9824,glassez,2018-11-28T08:23:07Z,Please remove also redundant blank line above.
236979503,9824,glassez,2018-11-28T08:24:37Z,"It's better to say something like ""Forward rvalue as const"". We don't really copy it."
236980461,9824,glassez,2018-11-28T08:27:37Z,This comment has became incorrect now. We don't really prevent rvalues now. This deleted template actually prevents only arguments declared as `const Container func(...)`.
236980803,9824,glassez,2018-11-28T08:28:56Z,I would move this deleted template to the end.
237022494,9824,thalieht,2018-11-28T10:24:52Z,// prevent const rvalue references ~~arguments~~ ?
237030840,9824,glassez,2018-11-28T10:47:40Z,"""prevent const rvalue arguments"" is more correct, IIRC."
237041192,9824,thalieht,2018-11-28T11:18:51Z,Done.
237041272,9824,thalieht,2018-11-28T11:19:03Z,Done.
237041394,9824,thalieht,2018-11-28T11:19:28Z,Done.
237041478,9824,thalieht,2018-11-28T11:19:47Z,Done.
237052623,9824,glassez,2018-11-28T11:57:23Z,Why did you remove reference?
237161828,9824,glassez,2018-11-28T16:31:09Z,Why didn't you apply `asConst()` to all `torrents()` calls?
237173997,9824,thalieht,2018-11-28T16:58:42Z,https://github.com/qbittorrent/qBittorrent/pull/9824#discussion_r232156976
237174189,9824,thalieht,2018-11-28T16:59:10Z,Clazy doesn't complain about possible detachment on them.
237219956,9824,glassez,2018-11-28T19:05:00Z,">Clazy doesn't complain about possible detachment on them.

But it REALLY does! And it is REAL detachment in this case (unlike of `mid()` which Clazy complains about).
Clazy gives too many false positives and incorrect results for us to blindly believe it."
237222439,9824,thalieht,2018-11-28T19:12:17Z,Oh no... there are other places i haven't added asConst. Do i just add it everywhere then?
237227956,9824,thalieht,2018-11-28T19:28:36Z,"I'll go through them again manually, the question is whether i should add asConst to the ones that don't need it."
237228164,9824,glassez,2018-11-28T19:29:09Z,">Do i just add it everywhere then?

I think Yes, if you doubt it.
@Chocobo1, we came to this conclusion, right?"
237230726,9824,glassez,2018-11-28T19:36:32Z,">whether i should add asConst to the ones that don't need it.

If you can identify them for sure...
Adding asConst to the ones that don't need it is less evil than skipping the ones that are prone to the detaching problem."
237238214,9824,thalieht,2018-11-28T19:55:30Z,"I can, as you said if the container is created in the function then it's not shared. But if the function changes, the for() loops will surely be forgotten."
237341924,9824,Chocobo1,2018-11-29T03:22:00Z,">Adding asConst to the ones that don't need it is less evil than skipping the ones that are prone to the detaching problem.

Agree."
775107664,15888,glassez,2021-12-25T04:59:45Z,Just inline this logic into `UIThemeManager::UIThemeManager()` or turn it into class method that is called within the constructor and initializes `m_themeSource` directly.
775108000,15888,glassez,2021-12-25T05:05:08Z,I believe that adding couple of conditionals in existing code could be enough to add support for folder based themes instead of implementing these two classes which for the most part duplicate the same logic...
775108464,15888,glassez,2021-12-25T05:11:55Z,"IMO, it isn't a good idea to create yet another translation context for such ""internal"" classes. It would be better either translate the strings using `UIThemeManager` context (i.e. `UIThemeManager::tr(""Some text"")`) or just indicate error to caller side (e.g. by returning some kind of `nonstd::expected`) and produce log messages there."
775114392,15888,jagannatharjun,2021-12-25T06:53:25Z,"IDK but someone has said ""Program to interfaces, not implementation"""
775116989,15888,Chocobo1,2021-12-25T07:36:09Z,"Use char array: `const char ICONS_DIR[] = "":icons/"";`"
775117484,15888,glassez,2021-12-25T07:43:03Z,">IDK but someone has said ""Program to interfaces, not implementation""

This is actually a good thing and it makes the code easier to maintain and extensible. Maybe you just need some things in their proper places (for example, move logging to a suitable place, as I mentioned earlier)."
775117541,15888,glassez,2021-12-25T07:44:16Z,"```suggestion
    virtual QString iconPath(const QString &iconId) = 0;
```"
775118032,15888,jagannatharjun,2021-12-25T07:51:20Z,make it a static method of `UIThemeSource`?
775119374,15888,glassez,2021-12-25T08:11:14Z,Make it `void UIThemeManager::createUIThemeSource()`.
775119569,15888,jagannatharjun,2021-12-25T08:15:04Z,why add this in the interface of UIThemeManager? I wanted to keep UIThemeSource and UIThemeManager independent
775120226,15888,glassez,2021-12-25T08:25:04Z,"> Make it `void UIThemeManager::createUIThemeSource()`.

I don't talk about interface:
```c++
private:
    void UIThemeManager::createUIThemeSource();
```

Or just keep it as is except error handling/logging.

> I wanted to keep UIThemeSource and UIThemeManager independent

They're isn't independent. It's just that the dependency must be correct."
775120681,15888,jagannatharjun,2021-12-25T08:32:07Z,">  just keep it as is except error handling/logging

I've updated error handling, do check."
775156309,15888,glassez,2021-12-25T17:23:14Z,"```suggestion
 * Copyright (C) 2019, 2021  Prince Gupta <jagannatharjun11@gmail.com>
```"
775518306,15888,glassez,2021-12-27T14:21:52Z,"```suggestion
    std::unique_ptr<UIThemeSource> createUIThemeSource()
```
`context` isn't really needed."
775520991,15888,glassez,2021-12-27T14:29:22Z,"You shouldn't check this setting in two places of `UIThemeManager` initialization.
And this is not some kind of general-purpose function, so that you can argue that the specific context of its use is unknown here. Just create `UIThemeSource` here (in case it is called) and let the `UIThemeManager` to decide whether it should be created or not."
775525417,15888,glassez,2021-12-27T14:40:46Z,"You should either create some kind of ""invalid"" `UIThemeSource` here (instead of returning `nullptr`) or handle the case when `m_themeSource` is `nullptr` in `UIThemeManager` code."
775527483,15888,glassez,2021-12-27T14:46:06Z,"```suggestion
        QFile file {fileName};
```"
775528559,15888,glassez,2021-12-27T14:48:59Z,Why are these constants declared here and not in the same place as the others?
775528811,15888,glassez,2021-12-27T14:49:38Z,"```suggestion
    class FolderThemeSource final : public UIThemeSource
```"
775529086,15888,glassez,2021-12-27T14:50:18Z,"```suggestion
        explicit FolderThemeSource(const QString &path)
```"
775529305,15888,glassez,2021-12-27T14:50:52Z,"```suggestion
    class QRCThemeSource final : public UIThemeSource
```"
775531844,15888,jagannatharjun,2021-12-27T14:57:55Z,"they are not needed in the global scope, only to the concerned class. "
775567111,15888,glassez,2021-12-27T16:29:03Z,"> they are not needed in the global scope, only to the concerned class.

`STYLESHEET_ICONS_DIR` too."
775569562,15888,glassez,2021-12-27T16:36:53Z,I would throw away `QRC_ICONS_DIR` (just use `QRC_THEME_DIR + THEME_ICONS_DIR` like in other similar cases) and make `QRC_THEME_DIR` global to avoid declaring the similar constant `STYLESHEET_ICONS_DIR`.
776320786,15888,jagannatharjun,2021-12-29T13:15:47Z,"STYLESHEET_ICONS_DIR is global info, while QRC_* is local, also STYLESHEET_ICONS_DIR and QRC_THEME_DIR should start with same pointer AFAIK"
776388471,15888,glassez,2021-12-29T15:48:36Z,"`STYLESHEET_ICONS_DIR` it does not point to the icon folder. Rather, it is some placeholder that replaces the name of the theme folder."
776388862,15888,glassez,2021-12-29T15:49:33Z,"> STYLESHEET_ICONS_DIR and QRC_THEME_DIR should start with same pointer

Sorry , I don't understand what do you mean..."
776389791,15888,glassez,2021-12-29T15:51:47Z,"And Yes, these constants should be static, if they are the same for each class instance."
776390505,15888,glassez,2021-12-29T15:53:30Z,"```suggestion
        static const QString QRC_THEME_DIR {QStringLiteral("":/uitheme/"")};
```"
776391164,15888,glassez,2021-12-29T15:54:57Z,"```suggestion
            return findIcon(iconId, (QRC_THEME_DIR + THEME_ICONS_DIR));
```"
776393484,15888,glassez,2021-12-29T16:00:21Z,"```suggestion
        if ((themeInfo.suffix() == QLatin1String(""qbtheme""))
```"
776393767,15888,glassez,2021-12-29T16:01:06Z,"```suggestion
                && QResource::registerResource(themePath, QLatin1String(""/uitheme"")))
```"
776393944,15888,jagannatharjun,2021-12-29T16:01:31Z,"> STYLESHEET_ICONS_DIR it does not point to the icon folder

Its icons dir used by stylesheet.qss. it's as the name suggests stylesheet icons dir or stylesheet resource dir.

> And Yes, these constants should be static, if they are the same for each class instance.

there will only be one instance of theme source, and this class is instantiated conditionally, making these variables static doesn't add much value but increases memory consumption (it won't be much but ....)"
776394019,15888,glassez,2021-12-29T16:01:40Z,Add braces to `if` body.
776394761,15888,jagannatharjun,2021-12-29T16:03:21Z,"`iconPath` will be called many times while other methods of the class where the string is dynamically created only called once, hence the separate variable for this specific method."
776396032,15888,jagannatharjun,2021-12-29T16:06:25Z,I thought you guys love affair with QLatin1String ended with qt6.
776399234,15888,glassez,2021-12-29T16:14:04Z,"> > STYLESHEET_ICONS_DIR it does not point to the icon folder
> 
> Its icons dir used by stylesheet.qss. it's as the name suggests stylesheet icons dir or stylesheet resource dir.

STYLESHEET_ICONS_DIR is confusing. Maybe STYLESHEET_RESOURCES_DIR would be better?.."
776402020,15888,glassez,2021-12-29T16:20:28Z,"> > And Yes, these constants should be static, if they are the same for each class instance.
> 
> there will only be one instance of theme source

The class itself knows nothing about its usage.

> making these variables static doesn't add much value but increases memory consumption

Well, at least delete these comments so as not to confuse anyone."
776402633,15888,glassez,2021-12-29T16:22:05Z,"> I thought you guys love affair with QLatin1String ended with qt6.

???"
776403682,15888,jagannatharjun,2021-12-29T16:24:25Z,"With the source code encoding being utf8, QLatin1String makes a lot less sense https://lists.qt-project.org/pipermail/development/2020-May/039455.html"
776460678,15888,glassez,2021-12-29T19:07:33Z,"> With the source code encoding being utf8, QLatin1String makes a lot less sense

Really? It doesn't look like anything has changed much in Qt6 since Qt5. Parsing of UTF-8 strings is slower than one of so-called Latin-1 strings (even if the UTF-8 string actually contains only Latin-1 characters, as in this case, the parser does not know about it, so it still has to check every character to understand what kind is it of). Am I wrong?"
776462309,15888,glassez,2021-12-29T19:13:20Z,So how about null m_themeSource?
776611011,15888,jagannatharjun,2021-12-30T08:04:06Z,hmm I guess it's a little performance improvement in non-performance-critical code vs obscure casting everywhere
777023677,15888,glassez,2021-12-31T15:33:17Z,Moreover comparison with QLatin1String doesn't even produces QString instance from it.
777087236,15888,Chocobo1,2022-01-01T06:42:17Z,I would sort them alphabetically.
777087318,15888,Chocobo1,2022-01-01T06:44:51Z,Why ditch `QString`? Seems you still use it everywhere.
777087405,15888,Chocobo1,2022-01-01T06:46:02Z,Are you going to use `STYLESHEET_RESOURCES_DIR`?
777087473,15888,Chocobo1,2022-01-01T06:47:08Z,Those looks like they are `const` functions.
777087499,15888,Chocobo1,2022-01-01T06:47:33Z,`THEME_ICONS_DIR`?
777087512,15888,Chocobo1,2022-01-01T06:48:28Z,Also I would leave the slash out and add it only when forming a path. Otherwise (in general) the code base ends up with uncertainty of the slash existence.
777087646,15888,Chocobo1,2022-01-01T06:51:05Z,`return {};`
777089065,15888,glassez,2022-01-01T07:19:20Z,"`return nullptr;` looks clearer, IMO."
777089322,15888,jagannatharjun,2022-01-01T07:24:44Z,"slash is used everywhere, I imagined these variables such that *Dir will end with a slash."
777089371,15888,jagannatharjun,2022-01-01T07:25:45Z,there was clazy warning of using non-pod types as global objects.
777089417,15888,jagannatharjun,2022-01-01T07:26:15Z,they are logically different.
777089435,15888,jagannatharjun,2022-01-01T07:26:47Z,I like to leave these choices to derived classes.
777089469,15888,glassez,2022-01-01T07:27:23Z,This problem will go into oblivion as soon as I finish encapsulating path handling.
777089854,15888,glassez,2022-01-01T07:35:19Z,">I like to leave these choices to derived classes.

What choices do you talk about?
"
777089970,15888,glassez,2022-01-01T07:38:10Z,These methods are clearly not mutators so they should be declared as `const`.
777090231,15888,glassez,2022-01-01T07:42:08Z,It seems like it would be nice to have explanations of what each constant refers to.
777090312,15888,glassez,2022-01-01T07:44:51Z,"> there was clazy warning of using non-pod types as global objects.

Damn Clazy is infuriating with its moralizing."
777092541,15888,jagannatharjun,2022-01-01T08:27:49Z,"> What choices do you talk about?

we don't know the working of derived classes, it may happen this will force derive classes to use `mutable variables` that will break constness contract

> These methods are clearly not mutators so they should be declared as const.

what if they are caching the returned value?"
777093029,15888,glassez,2022-01-01T08:36:48Z,"> > These methods are clearly not mutators so they should be declared as const.
> 
> what if they are caching the returned value?

Caching isn't mutating."
777093076,15888,jagannatharjun,2022-01-01T08:38:19Z,"> Caching isn't mutating.

well you're changing a internal variable (state) in a const method."
777093231,15888,glassez,2022-01-01T08:40:15Z,"> > Caching isn't mutating.
> 
> well you're changing a internal variable (state) in a const method.

You clearly misunderstand what is the state of the object.
Not every internal variable is part of an object's state."
777093473,15888,jagannatharjun,2022-01-01T08:43:41Z,"> You clearly misunderstand what is the state of the object.

one can't use QReadWriteLock with such a code structure."
777093804,15888,glassez,2022-01-01T08:50:48Z,"> > You clearly misunderstand what is the state of the object.
> 
> one can't use QReadWriteLock with such a code structure.

https://github.com/qbittorrent/qBittorrent/blob/master/src/base/settingsstorage.h
It isn't part of object state."
777095177,15888,jagannatharjun,2022-01-01T09:14:39Z,"> Not every internal variable is part of an object's state.

but you're still changing a variable in a const method, wouldn't that violate the constness contract?"
777096328,15888,glassez,2022-01-01T09:34:45Z,"Constness is about externally visible state of object.
See a (quick) explanation of `mutable` specifier at cppreference.com: https://en.cppreference.com/w/cpp/language/cv"
777097066,15888,jagannatharjun,2022-01-01T09:48:17Z,"but why mark a method const, if it's not *really* a const? what's the benefit? Users of the class can't use QReadWriteLock with such a class."
777097834,15888,jagannatharjun,2022-01-01T10:02:17Z,"> See a (quick) explanation of mutable specifier at cppreference.com

mutable is workaround the constness contract, using it in itself violates the constness contract"
777097934,15888,glassez,2022-01-01T10:03:58Z,">but why mark a method const, if it's not really a const? 

It's really a const. It's just that you still don't understand what constness is.


> Users of the class can't use QReadWriteLock with such a class.

They can. I even gave you an example of a similar class above."
777098515,15888,glassez,2022-01-01T10:12:45Z,"> > See a (quick) explanation of mutable specifier at cppreference.com
> 
> mutable is workaround constness contract, using it in itself violates the constness contract

`mutable` isn't workaround as long as it is correctly used (i.e. class is correctly designed)."
777098681,15888,jagannatharjun,2022-01-01T10:16:03Z,"> It's really a const. It's just that you still don't understand what constness is.

can you please tell me what I don't understand?

>  I even gave you an example of a similar class above.

by implementing a mechanism of locking to manually preserve constness. Why give this extra work to classes that derive from an interface? The fewer assumptions in an interface the better."
777099087,15888,glassez,2022-01-01T10:23:34Z,"> Why give this extra work to classes that derive from an interface? The fewer assumptions in an interface the better.

Because interface and implementation are different things. Interface shouldn't make any assumptions about particular implementations."
777099189,15888,jagannatharjun,2022-01-01T10:25:00Z,"> Because interface and implementation are different things. Interface shouldn't make any assumptions about particular implementations.

This thread is about marking method const in an interface."
777100525,15888,jagannatharjun,2022-01-01T10:47:43Z,"AFAIK there is a `QString::operator =(const char*)`, so it shouldn't create a QString in this case either."
777106965,15888,Chocobo1,2022-01-01T12:42:24Z,">This thread is about marking method const in an interface.

Then add the `const` at the implementation site if that is possible."
777106982,15888,Chocobo1,2022-01-01T12:42:49Z,"@jagannatharjun 
You should still use `QString` here."
777107396,15888,jagannatharjun,2022-01-01T12:50:14Z,"> Then add the const at the implementation site if that is possible.

I don't think that's possible, regardless all member variables of all derived classes are const."
777107851,15888,Chocobo1,2022-01-01T12:58:16Z,"From https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#con2-by-default-make-member-functions-const :
>A member function should be marked const unless it changes the object’s observable state.

If your interface does not have `const`, then the implementation is free to make changes to the *observable state*. That is, you permit that may happen, is that how an implementation of this interface really should behave?"
777113659,15888,glassez,2022-01-01T14:36:43Z,">A member function should be marked const unless it changes the object’s observable state.

This is not quite correct. But it seems that you often stick to it, so we have disagreements. It should be stated as follows:
>A member function should be marked `const` if it **isn't intended to change** the object’s observable state.

The problem is that it is often unclear what is the observable state of some types. For example, for types representing some value (e.g.  QString), this is quite obvious. But what is real state of UIThemeSource? IMO, it has no own properties so its observable state is immutable at all."
777113975,15888,glassez,2022-01-01T14:41:29Z,"> AFAIK there is a `QString::operator =(const char*)`, so it shouldn't create a QString in this case either.

I suppose you mean `bool	operator==(const char *other) const`. You could read the documentation:
>This function overloads `operator==()`.
>
>The other const char pointer is converted to a `QString` using the `fromUtf8()` function.

So it allocates memory for `other` QString data and perform UTF-8 to UTF-16 conversion while `bool	operator==(const QLatin1String &other) const` doesn't."
777116233,15888,Chocobo1,2022-01-01T15:17:51Z,">This is not quite correct. But it seems that you often stick to it, so we have disagreements. It should be stated as follows:

Just to be clear, almost every specifier in C++ is about intention. That quote is from the guidelines, not from me and ~~you should consider submit a reword for it (to help others to not be misguided).~~
Well, after reread at the title of it, I suppose the guidelines means that it is easier (to write better code?) to assume a member function is `const` and relax it afterwards than doing it the other way around. This is not entirely correct (with regard to coder intention) but in most cases I think it does have its own merits.

>IMO, it has no own properties so its observable state is immutable at all.

That make sense and I think it concludes it all."
777122268,15888,glassez,2022-01-01T16:50:54Z,"From the Clazy docs:
>CTORS from globals are run before main, on library load, slowing down startup. This is more a problem for libraries, since usually the app won't use every feature the library provides, so it's a waste of resources to initialize CTORs from unused features.
It's tolerated to have global statics in executables, however, clazy doesn't know if it's compiling an executable or a library, so it's your job to run this check only on libraries. It doesn't harm, though, to also remove global statics from executables, because they're usually evil.

So the only ""valuable"" CONS for using global QString constants in qBittorrent is ""because they're usually evil"".
Should we really consider another way?
Or is there a way to disable this particular Clazy warning project-wide?"
777123186,15888,glassez,2022-01-01T17:04:56Z,">I suppose the guidelines means that it is easier (to write better code?) to assume a member function is const and relax it afterwards than doing it the other way around.

This is clearly not the way to write better code, IMO. At least it won't teach you to design types/interfaces correctly. Unfortunately C++ is ""implementation-oriented"" language. It doesn't make clear distinction between types/interfaces and their implementations."
777179526,15888,jagannatharjun,2022-01-02T08:18:35Z,"I am not experienced enough to comment about objects states and relations. My argument is simple, marking a method const signals to users that the method is thread-safe and can be used without external locking. The problem with marking a method const in an interface is that it makes assumptions about the implementation but I've learned that the fewer assumptions in an interface the better."
777184747,15888,Chocobo1,2022-01-02T09:13:10Z,">can you please tell me what I don't understand?

@jagannatharjun 
I think this would help you understand it better:
https://isocpp.org/wiki/faq/const-correctness#logical-vs-physical-const
Please read it before further discussions.

Offtopic, compared to ""C++ Core Guidelines"", ""C++ Super-FAQ"" looks better written.

--- 
Furthermore, now I think `QRCThemeSource` and the other one should read-in the file contents at the constructor instead of at access time. I feel it that way is probably because of the naming of the functions. If you want it read-in at access time, then I suggest renaming them to something like `readStyleSheet()` or `loadStyleSheet()` so it would reflect its true action."
777189182,15888,glassez,2022-01-02T09:56:05Z,"> marking a method const signals to users that the method is thread-safe and can be used without external locking.

It has nothing to do with thread safety.

> The problem with marking a method const in an interface is that it makes assumptions about the implementation

You shouldn't make any assumptions about implementation. Constness of methods is part of type interface.
E.g. `Human::name()` is intended to not change `Human` state independently from any particular `Human` implementation. And `Human::setName()` is intended to change `Human` state independently from any particular `Human` implementation. So `Human::setName()` should be non-const even if implementation stores data in external database and does not change any class variable when changing the name. But  `Human::name()` should be const even if implementation obtains the value from some external storage and cache it in class variable."
777195673,15888,jagannatharjun,2022-01-02T11:03:02Z,changed
777201461,15888,Chocobo1,2022-01-02T12:00:47Z,"I don't think ""f.e"" is a valid abbreviation, just write out the full word."
777201681,15888,Chocobo1,2022-01-02T12:02:09Z,"Sorry I wasn't specific enough in the last discussion. Now the `read*` functions shouldn't be `const`. Such as `QIODevice::readAll()` isn't `const`. I/O operations is seldom `const` qualified.

`iconPath(...) const` is ok."
777204994,15888,jagannatharjun,2022-01-02T12:33:19Z,I think it is but whatever
777205046,15888,jagannatharjun,2022-01-02T12:33:52Z,well `read*` shouldn't modify logical state since it's an verb but whatever
777210647,15888,glassez,2022-01-02T13:26:11Z,"> `QIODevice::readAll()` isn't `const`. I/O operations is seldom const qualified.

Perhaps simply because they change something like Cursor, the position of which may be part of the QIODevice state.

Anyway, I don't want to delay it any longer. These are purely utilitarian classes used in a single place. In addition, the real ""state"" of UIThemeSource isn't so clear. Although I am still convinced that none of its methods are intended to change its state and any of them would look correctly applicable to constant object."
220267117,9600,sledgehammer999,2018-09-25T16:37:16Z,"Need space beetwen the 2 parameter eg `m_averager6Hour(divider6Hour, m_data6Hour)`"
220267271,9600,sledgehammer999,2018-09-25T16:37:43Z,space again
220267556,9600,sledgehammer999,2018-09-25T16:38:39Z,space
220268055,9600,sledgehammer999,2018-09-25T16:40:09Z,"multiline
And I think the last semicolon is superfluous"
220268485,9600,sledgehammer999,2018-09-25T16:41:36Z,Better do the class implementation in the `speedplotview.cpp` file and leave the class definition here.
220269615,9600,sledgehammer999,2018-09-25T16:45:07Z,"As I see this is only used in push() where it is copied into a circular_buffer and then reset.
Why don't you just create it as local variable at the start of the push() function? It will also eliminate the need of the hacky implementation of the reset() function."
220269673,9600,sledgehammer999,2018-09-25T16:45:19Z,space
220283402,9600,dzmat,2018-09-25T17:26:38Z,acc saves accumulated (summarized) data between sequential calls of push().  And only once in `divider` times there happens flushing of accumulated data into sink and zeroing.
220290793,9600,sledgehammer999,2018-09-25T17:47:24Z,"Oops. Sorry, I misread it.
Once you address the other comments, I'll see it again."
220290951,9600,dzmat,2018-09-25T17:47:49Z,fixed
220291033,9600,dzmat,2018-09-25T17:48:02Z,fixed
220291220,9600,dzmat,2018-09-25T17:48:35Z,fixed
220291312,9600,dzmat,2018-09-25T17:48:52Z,fixed
220291518,9600,dzmat,2018-09-25T17:49:32Z,Done
220291814,9600,dzmat,2018-09-25T17:50:26Z,fixed
220301798,9600,sledgehammer999,2018-09-25T18:19:12Z,"I think you could do `acc = {};` instead and drop reset().
But wait for others to confirm."
220301848,9600,sledgehammer999,2018-09-25T18:19:22Z,blank line
220302258,9600,sledgehammer999,2018-09-25T18:20:42Z,We name the private variables with the `m_` prefix. ([link](https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#c-private-member-variable-names))
220306562,9600,dzmat,2018-09-25T18:33:51Z,fixed
220306584,9600,dzmat,2018-09-25T18:33:55Z,fixed
223043642,9600,glassez,2018-10-05T15:16:11Z,We don't concatenate member declarations. Please put them separately.
223048967,9600,glassez,2018-10-05T15:30:34Z,"Doesn't seem like it's really useful. Doesn't `pointDataVar = {};` work?
Anyway we forbid method definitions in headers."
223051316,9600,glassez,2018-10-05T15:37:21Z,"Why are these two declared as public static class members? They're used only in constructor implementation. Please either declare them in .cpp or (even better) use their right hand expressions directly.

The constants above seem like private too."
223052277,9600,glassez,2018-10-05T15:40:06Z,"Declare it private. It's bad practice to have public class variables.
Although, it seems like pure private member. You don't need to directly access it outside the class implementation. Better add some meaningful method, e.g. `done()` or `hasResult()` defined as `return (m_counter == 0);`"
223057228,9600,glassez,2018-10-05T15:54:47Z,"We prefer not to use abbreviations (unless it's common abbreviation like ""ID"" or something very trivial like iterator variable, loop counter etc.). So please fix all such names."
223064775,9600,glassez,2018-10-05T16:21:38Z,inline is meaningless here. Please remove it.
223070202,9600,glassez,2018-10-05T16:40:51Z,It should be const (or template parameter).
223171205,9600,dzmat,2018-10-06T04:24:51Z,done
223172257,9600,dzmat,2018-10-06T05:15:06Z,Removed
223172352,9600,dzmat,2018-10-06T05:21:06Z,Names fixed. Member hided.
223172460,9600,dzmat,2018-10-06T05:27:16Z,const applied
223173034,9600,dzmat,2018-10-06T06:03:49Z,"Looks like `pointDataVar = {};` do the thing. But is it guaranteed by standard zero init  or just my GCC compiler's nice behavior? Quick googling didn't help me to point this out.
Anyway, as it is the second complain abour `reset()`, I removed it."
223174041,9600,glassez,2018-10-06T07:02:32Z,"DIVIDER_30MIN
DIVIDER_6HOUR"
223174215,9600,glassez,2018-10-06T07:04:33Z,Why do you cast int to int?
223174309,9600,glassez,2018-10-06T07:05:58Z,"remove inline, as I said before."
223174322,9600,glassez,2018-10-06T07:06:39Z,`const PointData &pointData`
223174372,9600,glassez,2018-10-06T07:09:50Z,Don't forget to split method definitions with blank line.
223174558,9600,glassez,2018-10-06T07:19:43Z,Please don't use `inline` at all. We prefer to trust the compiler to decide what should be inlined.
223174855,9600,glassez,2018-10-06T07:34:46Z,Add blank line above.
223174877,9600,glassez,2018-10-06T07:35:57Z,I would move it below m_sink.
223175231,9600,Chocobo1,2018-10-06T07:53:06Z,"Standard, FYI: https://en.cppreference.com/w/cpp/language/value_initialization 
Notice the `struct T1` in example."
223175653,9600,dzmat,2018-10-06T08:08:39Z,The cast is just leftover from times when *_BUF_SIZE were enum parts. Removed.
223175868,9600,glassez,2018-10-06T08:13:34Z,"It was meaningless even at that time, because enum declares constants of type int."
223175926,9600,dzmat,2018-10-06T08:16:35Z,"Enum divide on enum gave me compiler warning. Or error. Anyway, I can not reproduce it in new place, so removed cast from enum too."
223176158,9600,dzmat,2018-10-06T08:26:30Z,fixed
223176184,9600,dzmat,2018-10-06T08:27:57Z,fixed
223176462,9600,dzmat,2018-10-06T08:45:23Z,"For me there is no difference, so I moved it there. But I'm curios what a difference it makes for you?"
223176664,9600,glassez,2018-10-06T08:55:10Z,"Just to have some logical order: immutable fields (so-called ""instance parameters"") goes first and then other fields."
223177426,9600,glassez,2018-10-06T09:35:09Z,"Honestly, I don't understand why it was done in such an ""archaic"" way...
Not your issue."
223177705,9600,glassez,2018-10-06T09:49:32Z,It should be `bool isReady() const;`
223177968,9600,glassez,2018-10-06T10:01:36Z,I wonder if `constexpr int` will be more effective in all these cases?
223178342,9600,dzmat,2018-10-06T10:25:35Z,Can not imagine use case for const Averager object. Fixed anyway by formal reason.
223178437,9600,Chocobo1,2018-10-06T10:30:44Z,"I guess it won't change a bit in output assembly, also personally I would reserve `constexpr` for more exotic usages."
223178444,9600,Chocobo1,2018-10-06T10:31:18Z,Just `m_accumulator {}`?
223178448,9600,dzmat,2018-10-06T10:31:38Z,"No, it would not. It is already compile-time calculated value. Constexpr just makes wider the domain of expressions able to be compile time calculated, not increases performance. "
223178479,9600,Chocobo1,2018-10-06T10:33:22Z,Maybe it is better to add `PointData::operator+=()`
223178484,9600,Chocobo1,2018-10-06T10:33:47Z,also there is possible integer overflow here.
223178557,9600,dzmat,2018-10-06T10:37:58Z,Fixed. Also uncrustify does not try to break this now. Nice!
223178824,9600,dzmat,2018-10-06T10:50:14Z,"I think it not better. Because this new method:
1.  will be used only in 1 place;
2.  too simple to hide something and make programmers' live easier;
3.  adds function call overhead."
223178938,9600,Chocobo1,2018-10-06T10:56:15Z,"How about moving `m_data30Min` into `m_averager30Min`?
This would simplify the objects relations."
223179017,9600,Chocobo1,2018-10-06T10:59:43Z,add space: `m_accumulator {}`
223179062,9600,Chocobo1,2018-10-06T11:02:42Z,"I would write:
```c++
if (m_counter > 0)
    return;
// do things below
````"
223179116,9600,Chocobo1,2018-10-06T11:05:52Z,"offtopic: could you change the argement to const reference?
and also to SpeedPlotView::setViewableLastPoints() please.
"
223179147,9600,dzmat,2018-10-06T11:07:07Z,Old code was vulnerable to overflow too. As soon as download speeds get to 29826161 byte/s (30Mbyte/s approximately) here (in new code) will be overflow. Definitely it is time to do something. I think the best way is to change type of `PointData.y` to double. 
223179222,9600,Chocobo1,2018-10-06T11:10:34Z,"> I think the best way is to change type of PointData.y to double.

Why a floating point type? what about qint64 or quint64?"
223179283,9600,Chocobo1,2018-10-06T11:12:47Z,"Also AFAIK the overflow only occurs at the accumulator, maybe just use quint64 for its type, for both `x`, `y` member."
223179518,9600,dzmat,2018-10-06T11:20:14Z,"Plot drawing code is accessing storage in m_data*** directly. Averager class is averaging, not storing. For me this move will make things more complicated on drawing part. Some storage will become accessible through proxy, other directly."
223179530,9600,dzmat,2018-10-06T11:20:47Z,done
223179653,9600,dzmat,2018-10-06T11:26:50Z,done
223179673,9600,Chocobo1,2018-10-06T11:27:55Z,"Hmm, maybe it is just me that didn't expect to see such complications for such simple thing..."
223179744,9600,glassez,2018-10-06T11:32:00Z,"Switch from int to double is really bad idea for ""increase performance"" patch."
223179915,9600,glassez,2018-10-06T11:39:37Z," Current design is acceptable for me. It can be changed, but it will require more changes than you think. So let it be as is."
223181889,9600,dzmat,2018-10-06T13:04:15Z,"`SpeedPlotView::pushPoint` changed.
Did not understand what did you mean to do with `SpeedPlotView::setViewableLastPoints()` ? This method's argument type is enum, there is no profit in converting it to reference"
223182809,9600,Chocobo1,2018-10-06T13:52:34Z,">This method's argument type is enum, there is no profit in converting it to reference

Pardon, misread."
223182853,9600,Chocobo1,2018-10-06T13:53:50Z,looks like this extra `;` is failing lgtm check
223183074,9600,dzmat,2018-10-06T14:01:38Z,deleted
223183467,9600,dzmat,2018-10-06T14:17:39Z,"I have seen posts on net that some people already have 10Gbit/s connection on their premise. So not only the accumulator needs to be enlarged, but data storage too. 
The choice is of two options: double or qint64. 
Modern processors are pretty fast with float arithmetic, thanks to billions of transistors on a dye. So I will do measurements and then choose. Please, wait."
223184857,9600,dzmat,2018-10-06T15:05:28Z,"Hmm. it look a bit surprising, but double wins! After filtering out excesses due background processes, I got such results:
With double - 8282 ticks.
with qint64 - 8744 ticks. 
For measuring code look into corresponding commit."
223185209,9600,dzmat,2018-10-06T15:18:50Z,I compile to 32bit app. 
223186867,9600,glassez,2018-10-06T16:20:07Z,"64 bit application should calculate 64 bit integers more efficient, isn't it?"
223188374,9600,dzmat,2018-10-06T17:24:34Z,"I think so, but currently I have no 64bit build setup at hand.  Tomorrow I will try to install 64bit linux into a virtual machine and build in it."
223200166,9600,glassez,2018-10-07T04:06:37Z,"@dzmat, you can compare int vs int64 using 32bit app."
223218636,9600,dzmat,2018-10-07T16:01:52Z,"Finally managed to build 64bit version and make tests. 
Double on 64bit use 5223 ticks.
qint64  on 64bit use 6353 ticks.
Double wins here too for my surprise."
223220194,9600,dzmat,2018-10-07T16:48:24Z,Made [branch](https://github.com/dzmat/qBittorrent/tree/averager_instrumented) with measure code if somebody wants to play with it. Removed code from here.
223221128,9600,Chocobo1,2018-10-07T17:19:53Z,"@dzmat 
qbt also runs on other platforms: embedded systems, ARM, MIPS... It is always a good idea to avoid floating-point types if not really required."
223221707,9600,glassez,2018-10-07T17:40:24Z,"Using a floating point type for integer data (inherently) is suspicious to me. Even if your measurements show some gain in speed (in some particular cases), you clearly do not take into account other possible disadvantages."
223343618,9600,dzmat,2018-10-08T12:23:12Z,"@Chocobo1 your counter argument about ARM/MIPS looks solid enough. But is there ARM/MIPS computers powerful enough to run qt5 gui on a GUI-enabled  OS and in the same time having such a bad FPU abilities?
AFAIK  embedded systems usually run qbittorrent-nox. If this code is a part of qbittorrent-nox than we should consider to exclude it from there totally IMHO, not polishing float/int issues..

@glassez I agree with suspicions about float/integer data type exchange, but from my point of view this speed samples are more float than integer in their nature. 
They are calculated from difference of transferred data counter in subsequent time sampling points. This data counter is integer in nature and seems to provide exactly accurate readings with all bits full precision. And subtraction between two subsequent counter values inherits this exact precision. Then we divide this by hardcoded ""precise"" interval of 1 second and think that we get all bits precise speed value. 
But we didn't get it. 
The culprit is in a multiprocessing and random execution delays of regular timer event due to the multiprocessing. Exactly, real time interval between two shot of 1000msec QTimer can actually be from 970 to 1030 msec (+/-30msec deviation and even more on loaded system). So **time part** of `(x1-x0)/t` formula is actually ""non-precise"" constant value and brings a relative error of 3% on the input to formula, causing 3% of relative error of result of formula. 
And now there is no reason to store all the bits of this **approximate** +/-3% speed value. 
I would even prefer float32 type, which have enough precision and range and consumes less memory, creating less concurrence for L1/L2 precious cache memory."
223354467,9600,Chocobo1,2018-10-08T13:01:57Z,"Slowing going offtopic :\ 
>But is there ARM/MIPS computers powerful enough to run qt5 gui on a GUI-enabled OS and in the same time having such a bad FPU abilities?

I cannot say for sure, however a bad FPU is still a FPU, still usable, just not as fast as general-purpose registers. And remember there are ARMs that runs Win10.

Back to the topic.
I would adopt this algorithm instead: https://stackoverflow.com/a/1934266 
and use `quint64` for input & output, also change to integer division, will lose a bit precision but it is fine IMO."
223362737,9600,dzmat,2018-10-08T13:28:05Z,"Very nice algorithm! 3 operations per iteration but elided overflow without using extended range types. 
Well I'll go to quint64 just to stop discussion and make this PR accepted."
223373404,9600,dzmat,2018-10-08T13:58:52Z,I don't take this algorithm because is is an overkill. For us the quint64 type is enough.
223415179,9600,Chocobo1,2018-10-08T15:54:28Z,"OK, then at least put a comment documenting the possible overflow and why quint64 is enough."
223451337,9600,Chocobo1,2018-10-08T18:03:46Z,"please fix typos:
Maximim -> Maximum 
we hit overflow -> we get overflow
PBytes/s This -> PBytes/s. This 
still -> \<remove\>
ordinal -> ordinary"
223546982,9600,dzmat,2018-10-09T02:43:44Z,"Fixed,thx."
112806361,3235,glassez,2017-04-22T09:36:23Z,Preferences is deprecated now.
112809505,3235,Chocobo1,2017-04-22T13:12:04Z,"This whole PR is outdated, I'm not even sure if @sledgehammer999 would approve this..."
132817477,3235,sledgehammer999,2017-08-12T12:55:03Z,I think most existing installations are working today with `prefer_tcp`. So I would say the default here should be `false`.
132817512,3235,sledgehammer999,2017-08-12T12:56:57Z,Also the name should be `uTPMixedMode`
132817623,3235,sledgehammer999,2017-08-12T13:02:42Z,space before return
132817644,3235,sledgehammer999,2017-08-12T13:03:45Z,do you really need the blank lines before the comments?
132817691,3235,sledgehammer999,2017-08-12T13:06:30Z,`seed_choking_algorithm` is being set in the session constructor so you need to remove it from there too.
132817777,3235,sledgehammer999,2017-08-12T13:12:29Z,"`KiB`.
Also shouldn't it be non-translatable?"
132818135,3235,Chocobo1,2017-08-12T13:35:44Z,">Also the name should be uTPMixedMode

OK

>So I would say the default here should be false.

Do you think we should also turn uTP off by default? otherwise, with uTP on + prefer_tcp, uTP would be useless in theory."
132818150,3235,Chocobo1,2017-08-12T13:36:08Z,"OK, thanks!"
132818160,3235,Chocobo1,2017-08-12T13:36:38Z,"fixed here, will push update later"
132818164,3235,Chocobo1,2017-08-12T13:36:53Z,will remove it.
132818188,3235,Chocobo1,2017-08-12T13:38:33Z,">Also shouldn't it be non-translatable?

fixed, will also fix other locations."
133000069,3235,glassez,2017-08-14T16:44:25Z,Why this string isn't translatable?
133031289,3235,glassez,2017-08-14T18:52:06Z,I would add blank line before this one like in another setters.
133032047,3235,glassez,2017-08-14T18:54:59Z,"Why do you provide originally enumerable setting as bool?
The same question is about mixed mode algorithm."
133032626,3235,glassez,2017-08-14T18:57:04Z,"Please use naming convention for bool properties: isGuidedReadCacheUsed or isGuidedReadCacheEnabled.
The same comment is for other bool properties."
133055821,3235,glassez,2017-08-14T20:42:10Z,">**Naming Boolean Getters, Setters, and Properties**
Finding good names for the getter and setter of a bool property is always a special pain. Should the getter be called checked() or isChecked()? scrollBarsEnabled() or areScrollBarEnabled()?
>
>In Qt 4, we used the following guidelines for naming the getter function:
>
>Adjectives are prefixed with is-. Examples:
isChecked()
isDown()
isEmpty()
isMovingEnabled()
However, adjectives applying to a plural noun have no prefix:
scrollBarsEnabled(), not areScrollBarsEnabled()
Verbs have no prefix and don't use the third person (-s):
acceptDrops(), not acceptsDrops()
allColumnsShowFocus()
Nouns generally have no prefix:
autoCompletion(), not isAutoCompletion()
boundaryChecking()
Sometimes, having no prefix is misleading, in which case we prefix with is-:
isOpenGLAvailable(), not openGL()
isDialog(), not dialog()
(From a function called dialog(), we would normally expect that it returns a QDialog.)
The name of the setter is derived from that of the getter by removing any is prefix and putting a set at the front of the name; for example, setDown() and setScrollBarsEnabled(). The name of the property is the same as the getter, but without the is prefix.

So `useOSCache` kind of makes sense. Even `guidedReadCache` can be used as bool property name."
133056930,3235,glassez,2017-08-14T20:46:36Z,">@glassez: This was requested by @sledgehammer999 

@sledgehammer999, why?"
133063020,3235,sledgehammer999,2017-08-14T21:12:55Z,"It was a question.
Is it reasonable to have translatable units?"
133067735,3235,zeule,2017-08-14T21:34:32Z,"At least some of the Cyrillic languages use transliterated abbreviations (e.g. ""MіБ"" for ""MiB"" in Ukrainian)."
133113283,3235,Chocobo1,2017-08-15T04:05:55Z,"OK, thanks, will fix it."
133120401,3235,glassez,2017-08-15T05:46:26Z,Apparently I jumped the gun here... the point is that if bool property has a name without is-/has- prefix it's not so clear it is correct or not. We need to check all new bool properties.
133122094,3235,Chocobo1,2017-08-15T06:08:29Z,done.
133124917,3235,Chocobo1,2017-08-15T06:38:50Z,both changed to int type.
133144826,3235,glassez,2017-08-15T08:52:39Z,isGuidedReadCacheEnabled or useGuidedReadCache or just guidedReadCache.
133145105,3235,glassez,2017-08-15T08:54:20Z,Your switch statements break coding style. Please add space after keywords.
133145346,3235,glassez,2017-08-15T08:55:46Z,isSuggestModeEnabled.
133146303,3235,glassez,2017-08-15T09:01:09Z,You should check/normalize values when getting it from untrusted sources (e.g. from config file). Property getter always should return valid value.
133179124,3235,Chocobo1,2017-08-15T12:39:04Z,`isGuidedReadCacheEnabled` that is.
133179201,3235,Chocobo1,2017-08-15T12:39:32Z,fixed.
133179875,3235,Chocobo1,2017-08-15T12:43:55Z,">Your switch statements break coding style. Please add space after keywords.

fixed now.

>Property getter always should return valid value.

I've added a helper function to do so, before you ask, `std::function<T (const T&)>` is chosen because I want it to match `CachedSettingValue::ProxyFunc` signature, using a not matching signature will cause doing type erasure twice, incurring unnecessarily performance hits."
133193421,3235,glassez,2017-08-15T13:48:20Z,Ok. Then you don't need these switches at all.
133193855,3235,glassez,2017-08-15T13:50:06Z,I would use libtorrent constants instead of anonymous numbers.
133194167,3235,glassez,2017-08-15T13:51:22Z,"In all affected cases, of course."
133209411,3235,Chocobo1,2017-08-15T14:49:43Z,">I would use libtorrent constants instead of anonymous numbers.

We are supporting both libtorrent 1.0 & 1.1, so it has different scopes for enum definitions, don't you think adding a `#if` condition is too much for it?
"
133210016,3235,Chocobo1,2017-08-15T14:51:56Z,">Then you don't need these switches at all.

will remove, except `m_chokingAlgorithm` which I map `{0, 1} -> {0, 2}`, libtorrent `choking_algorithm_t` has no `1` defined."
133238645,3235,glassez,2017-08-15T16:40:22Z,"You should declare compatible enums (better enum classes) inside BitTorrent namespace and use it. E.g.:
```c++
enum class ChokingAlgorithm
{
    FixedSlotsChoker,
    RateBasedChoker
};
// and then...
switch (chokingAlgorithm()) {
case ChokingAlgorithm::FixedSlotsChoker:
    settingsPack.set_int(libt::settings_pack::choking_algorithm, libt::settings_pack::fixed_slots_choker);
    break;
case ChokingAlgorithm::RateBasedChoker:
    settingsPack.set_int(libt::settings_pack::choking_algorithm, libt::settings_pack::rate_based_choker);
    break;
}
```"
133238912,3235,glassez,2017-08-15T16:41:28Z,And also use it in limiters.
133240895,3235,glassez,2017-08-15T16:49:57Z,">I would use libtorrent constants instead of anonymous numbers.

I've restored my mind. We shouldn't use libtorrent names, types etc. outside compatibility layer. We should create our own names/types and use it."
133246081,3235,Chocobo1,2017-08-15T17:11:08Z,">You should declare compatible enums (better enum classes) inside BitTorrent namespace and use it. E.g.:

So it become this?
```c++
ChokingAlgorithm chokingAlgorithm() const;
void setChokingAlgorithm(int mode); 
```"
133250142,3235,glassez,2017-08-15T17:27:31Z,"And one more thing...
Since config file is user editable it is a really good idea to store enumerations by name (as strings) as @evsh introduced in one of his last PRs. You can give example code there."
133265126,3235,Chocobo1,2017-08-15T18:25:31Z,">Since config file is user editable it is a really good idea to store enumerations by name (as strings) as @evsh introduced in one of his last PRs

just got it working, but the new declared enum must accompany with a `Q_ENUM_NS(...)` macro which is only available on `Qt >= 5.8`.  Also must add `Q_NAMESPACE` to `namespace BitTorrent` to support it.
Any comment?"
133267040,3235,Chocobo1,2017-08-15T18:32:28Z,">Since config file is user editable it is a really good idea to store enumerations by name 

Now I'm not so sure. As a developer, it's sure convenient.
As a user, how is one going to know the only valid values are `FixedSlotsChoker, RateBasedChoker` without source code at hand?
On the other way, if it's represented as an `int`, at least user can try putting numbers in it.
"
133273727,3235,glassez,2017-08-15T18:57:41Z,">As a user, how is one going to know the only valid values are FixedSlotsChoker, RateBasedChoker without source code at hand?

Oops... actually it needs a user manual, but we don't have it. Don't know what to say now... I would still use a textual representation.
>just got it working, but the new declared enum must accompany with a Q_ENUM_NS(...) macro which is only available on Qt >= 5.8. Also must add Q_NAMESPACE to namespace BitTorrent to support it.

Apparently, @evsh used something different... maybe, just enums (not enum classes). I think, we can use his code as base for cases of enumerable settings.
"
133274162,3235,glassez,2017-08-15T18:59:29Z,">Why not use a combobox in the Advanced Options GUI instead of a text-box?

You misunderstood it. We're talking about manual config editing. There is no problem in GUI."
133274736,3235,glassez,2017-08-15T19:01:41Z,"@Chocobo1, in any case we should use enums in the code."
133342017,3235,Chocobo1,2017-08-16T01:31:55Z,">Don't know what to say now... I would still use a textual representation.

OK, that is not the main point now, I just wanted to say it's still debatable IMO.

>Apparently, @evsh used something different... maybe, just enums (not enum classes). I think, we can use his code as base for cases of enumerable settings.

I tried both and it doesn't matter much which I use, combination of `enum, enum class, Q_ENUM_NS, Q_ENUM`.

I looked it a bit more closely, at
https://github.com/qbittorrent/qBittorrent/blob/master/src/base/settingvalue.h#L99
so it uses `QMetaEnum::fromType()` ""magic"" and Qt doc states 
>The enum needs to be declared with Q_ENUM.

However, in this case the enum is in namespace scope, so should use `Q_ENUM_NS` instead, but the requirement `Qt >= 5.8` doesn't suit us now as I said before.

... unless I deploy some workaround like this:
```c++
struct Wrapper{
  enum class ChokingAlgorithm : int
  {
    FixedSlotsChoker = 0,
    RateBasedChoker = 1
  };
  Q_ENUM(ChokingAlgorithm)
};
using ChokingAlgorithm = Wrapper::ChokingAlgorithm;
```
*Is that acceptable?* this is the best I can do now... "
133356270,3235,glassez,2017-08-16T04:19:28Z,"Well, we say: ""tomorrow is another day!"". That's what happens in the end: 
1. Neither numbers nor words are meaningless to the user, because there is no available information about it.
2. If we had a user manual (or other source of information, eg. man), we could describe either numeric values or string values. 
3. The use of numbers is much easier from the code POV, i.e. other things being equal, the use of numerical values in the configuration file is preferable.
4. The use of abstract numerical values in the code is a way to unmaintainable code, so we should prefer enums there.

@Chocobo1, what do you say?"
133362622,3235,Chocobo1,2017-08-16T05:45:19Z,"I **agree** with the bullet points you listed (in sequence), but there is a strong assertion at point 2 which this app doesn't have currently... and I'm not looking for more work, i.e. creating the user manual.

>The use of numbers is much easier from the code POV

It's easier for users to edit the ini too, 2 key strokes at most for changing ChokingAlgorithm here.
With string literals, users might get typos, uppercase lowercase issues especially when the user is not fluent in English.

I don't oppose using enums (but there are technical difficulties here) and I just wanted to focus on getting this PR merged... "
133377808,3235,glassez,2017-08-16T07:39:01Z,">but there are technical difficulties here

I hope it's about using enums in config file and there are no objections on using it in the code (I can't imagine what objections can be)."
133411968,3235,zeule,2017-08-16T10:22:59Z,"My 2 cents: long string constants (as comparing to short string constants like '0', '1', etc.) in a config file give more freedom when upgrading and replacing set of possible options. 

> 1. Neither numbers nor words are meaningless to the user, because there is no available information about it.

Partially disagree: user can't get their options for the setting, but at least can guess what the current value means.

> 2. If we had a user manual (or other source of information, eg. man), we could describe either numeric values or string values.

It is much easier to spot a mistake in documentation or outdated part of it with long descriptive string constants.  

>It's easier for users to edit the ini too, 2 key strokes at most for changing ChokingAlgorithm here.
With string literals, users might get typos, uppercase lowercase issues especially when the user is not fluent in English.

I seriously doubt that users with typing problems would want to edit config files manually.

All in all, I do not reveal a secret here saying that short constants are simpler and easier for one-time setup or use, while long ones offer advantages over them when considering maintainability and long-term support. Just as identifiers in source code. "
133426382,3235,glassez,2017-08-16T11:46:10Z,"@evsh, agree with you, but @Chocobo1 reports any problems with storing enums as strings, although I remember that you did it already. I am now limited in the ability to verify it all."
133505417,3235,Chocobo1,2017-08-16T16:50:15Z,">I do not reveal a secret here saying that short constants are simpler and easier for one-time setup or use

This is actually a good guideline when naming enum values for storing in ini!
"
134002303,3235,sledgehammer999,2017-08-18T16:36:42Z,"Guys, are still considering the implementation or can I merge as-is?

Personally: I don't hold any strong preference about either one, but I tend to like numbers better than strings."
134003749,3235,sledgehammer999,2017-08-18T16:44:11Z,The default value here should be `1`. It was a request in the past to use fastest_upload by default.
134005416,3235,glassez,2017-08-18T16:52:53Z,I insist at least on named constants (ie. enums) in the code.
134006092,3235,sledgehammer999,2017-08-18T16:56:11Z,The default value here should be `1`. It was a request in the past to use fastest_upload by default.
134006257,3235,glassez,2017-08-18T16:57:00Z,"ChockingAlgorithm should be limited by 0 and 1, isn't it?"
134006345,3235,sledgehammer999,2017-08-18T16:57:27Z,">I insist at least on named constants (ie. enums) in the code.

Yeah, I think this makes sense."
134007369,3235,glassez,2017-08-18T17:02:36Z,"And I think old style enums will be enough in this case, so type of the properties can be left as is (int)."
134013922,3235,Chocobo1,2017-08-18T17:36:04Z,see `enum choking_algorithm_t` in libtorrent doc.
134014397,3235,Chocobo1,2017-08-18T17:38:17Z,"Let just consider a simple question, what do you think of the example code in https://github.com/qbittorrent/qBittorrent/pull/3235#discussion_r133342017? Is it acceptable? "
134014537,3235,Chocobo1,2017-08-18T17:38:58Z,will fix
134015509,3235,sledgehammer999,2017-08-18T17:43:45Z,"But in earlier commit you chose to not expose `bittyrant_choker`.
Was there a reason?"
134017038,3235,Chocobo1,2017-08-18T17:50:27Z,">will fix

However, it feels weird because peer which has better download speed will always have higher priority to be served."
134019398,3235,glassez,2017-08-18T18:00:14Z,You can't mix interface of components of an application with interface of underlying library. If you allow users only two choices then Session::chockingAlgorithm property has only two possible values independently of the way it really implemented.
134020116,3235,Chocobo1,2017-08-18T18:03:22Z,">Was there a reason?

libtorrent states its incomplete & untested.
Also read `Q: Won’t BitTyrant hurt overall BitTorrent performance if everyone uses it?`
in http://bittyrant.cs.washington.edu/"
134020333,3235,sledgehammer999,2017-08-18T18:04:20Z,">libtorrent states its incomplete & untested.
Also read Q: Won’t BitTyrant hurt overall BitTorrent performance if everyone uses it?
in http://bittyrant.cs.washington.edu/

+1.
Don't forget to rebase."
134020629,3235,Chocobo1,2017-08-18T18:05:34Z,">You can't mix interface of components of an application with interface of underlying library

That won't be a problem after enums are deployed."
134041113,3235,glassez,2017-08-18T19:46:27Z,"Sorry, I can't open the link above in my smartphone browser. If you mean the following:
```c++
ChokingAlgorithm chokingAlgorithm() const;
void setChokingAlgorithm(int mode); 
```
I think Yes (maybe except the name of setter param)."
134084607,3235,glassez,2017-08-19T06:45:03Z,">Actually, the link points to:
...

@LordNyriox, this code can be useful in case we have decided store enums in config file as strings. But, IIRC, @sledgehammer999 and @Chocobo1 prefer to use numbers so such enum wrapping is unnecessary."
134118829,3235,Chocobo1,2017-08-20T15:34:48Z,">this code can be useful in case we have decided store enums in config file as strings. 

If no objections, I'm going to use it and get this over with."
134119084,3235,glassez,2017-08-20T15:45:37Z,">If no objections

Don't think you **Wrapper** isn't appropriate name (too common)?"
134119630,3235,Chocobo1,2017-08-20T16:07:17Z,">Don't think you Wrapper isn't appropriate name (too common)?

That name was just for the example, but frankly I can't think of anything better than `struct  EnumWrapper` or `struct ChokingAlgorithmWrapper` or `struct ChokingAlgorithmEnum`, any suggestions? "
134119750,3235,glassez,2017-08-20T16:12:08Z,"IMO, ChokingAlgorithmWrapper is best from above."
134120432,3235,glassez,2017-08-20T16:40:36Z,"But from the other side, we can put all needed enums into one wrapper so we need other name, like SessionSettingsEnums..."
134120493,3235,zeule,2017-08-20T16:43:28Z,And introduce them into the containing namespace with the help of `using` directive.
134217486,3235,glassez,2017-08-21T12:18:00Z,Do we have dependent default value here?
134217962,3235,glassez,2017-08-21T12:20:33Z,"IMO, using ternary operator (instead of cast) would be more obvious."
134220552,3235,Chocobo1,2017-08-21T12:34:10Z,">Do we have dependent default value here?

Ah, damn it, I didn't realize until now... it doesn't need to depend on others.
Changed."
213434179,9349,sledgehammer999,2018-08-28T18:57:58Z,no need for curly braces
213434933,9349,sledgehammer999,2018-08-28T19:00:34Z,Maybe `QIODevice::Text` too?
213501574,9349,sledgehammer999,2018-08-28T23:13:48Z,Just a suggestion: Maybe make the QRegularExpression a variable so it is easier to read?
213502108,9349,sledgehammer999,2018-08-28T23:16:53Z,**are** undefined
213503774,9349,sledgehammer999,2018-08-28T23:26:41Z,::GetModuleFileNameW
213503918,9349,sledgehammer999,2018-08-28T23:27:33Z,Shouldn't you free the vector elements when it is about to go out of scope?
213504395,9349,sledgehammer999,2018-08-28T23:30:54Z,"Sorry, but why is this include needed?"
213670029,9349,zeule,2018-08-29T13:13:39Z,"I don't know how to do that elegantly. There are many exit points and I'd have to add a RAII guard here. But the heap memory will be freed anyway on process exit, so it is OK, IMO, to leave that to the system."
213682381,9349,zeule,2018-08-29T13:44:18Z,Added the shortest solution I could come up with in its own commit.
213865493,9349,zeule,2018-08-29T23:29:41Z,Put 'size' inside the loop too.
213865604,9349,zeule,2018-08-29T23:30:19Z,This also can go into the loop body.
215916297,9349,glassez,2018-09-07T10:29:49Z,"IMO, it's completely unusual. Why do you need to free this memory immediately before application exit?"
215916987,9349,glassez,2018-09-07T10:33:01Z,"ArgsVector. Although it is an alias for a name with a ""foreign"" naming it should use qBittorrent naming."
215917992,9349,glassez,2018-09-07T10:37:22Z,"char *getExeName

"
215918323,9349,glassez,2018-09-07T10:39:04Z,Move to the end of previous line.
215931904,9349,glassez,2018-09-07T11:41:22Z,If previous buffer deleted by reset?
215932301,9349,glassez,2018-09-07T11:43:17Z,Does Linux use 8 bit encoding for filenames?
215933087,9349,glassez,2018-09-07T11:46:56Z,Why do you just return empty string im case of error here but abort the app in case of another error inside getexename?
215934579,9349,zeule,2018-09-07T11:54:16Z,https://en.cppreference.com/w/cpp/memory/unique_ptr/reset
215935350,9349,zeule,2018-09-07T11:58:07Z,Usually UTF-8.
215945536,9349,zeule,2018-09-07T12:42:30Z,https://github.com/qbittorrent/qBittorrent/pull/9349#discussion_r213503918
215948308,9349,zeule,2018-09-07T12:53:30Z,"OK, removed the abort() call. "
215955747,9349,glassez,2018-09-07T13:21:10Z,Then why fromLocal8Bit?
215962243,9349,zeule,2018-09-07T13:42:23Z,"Excuse me, don't understand the question."
215968924,9349,zeule,2018-09-07T14:02:43Z,"Excuse me, I don't understand the question."
215972779,9349,glassez,2018-09-07T14:14:42Z,You said the filenames are usually utf-8 encoded but you read it via fromLocal8Bit instead of fromUtf8... is it correct? Or am I missing something?
215989776,9349,zeule,2018-09-07T15:03:57Z,I'm not sure UTF-8 qualifies as a 8-bit encoding but fromLocal8Bit() works fine in this case (fromLocalMultiByte() would be a better name).
215994657,9349,glassez,2018-09-07T15:18:45Z,">but fromLocal8Bit() works fine in this case

As long as the filename doesn't contain any non-latin1 character, I suppose."
215998802,9349,zeule,2018-09-07T15:31:01Z,"> As long as the filename doesn't contain any non-latin1 character, I suppose.

I suppose it uses mbstowcs() and as such works with UTF-8."
216034785,9349,glassez,2018-09-07T17:39:12Z,"You must be exhausted. Otherwise, you could not confuse the 8-bit encoding with UTF-8 (some kind of Unicode).
fromLocal8Bit() loads 8-bit characters and decode them using some code page (e.g. cp1251, koi8-r, etc.).
As long as the test filename contains only latin-1 characters it can be equally successfully decoded by any of fromLatin1(), fromLocal8Bit() and fromUtf8(). But when string contains some multibyte utf-8 character it will be decoded as some number of characters if you apply fromLocal8Bit() to it.
Try the test code:
```c++
const char buf[] = ""Строка с нелатинскими символами"";
const QString str1 = QString::fromUtf8(buf);
qDebug() << str1; // will print ""Строка с нелатинскими символами""
const QString str2 = QString::fromLocal8Bit(buf);
qDebug() << str2; // will print some kind of bullshit
```"
216036390,9349,glassez,2018-09-07T17:44:32Z,">#9349 (comment)

OK. Here is it:
>Shouldn't you free the vector elements when it is about to go out of scope?

It just a question. You could have just said ""it is pointless"" instead of doing this ""pointless"" thing."
216040800,9349,zeule,2018-09-07T17:59:05Z,I decided then that without freeing the code would produce annoying false positives in memory analysers and went ahead adding the deleter.  
216043980,9349,zeule,2018-09-07T18:10:34Z,"You are wrong here. I already wrote that the Qt's function name is confusing. It actually takes a multi-byte string in the current locale.

P.S.  And the sample outputs correct Cyrillic string two times."
216120409,9349,Chocobo1,2018-09-08T04:21:15Z,">It actually takes a multi-byte string in the current locale.

From QString document, it seems fromLocal8Bit will depend on OS locale/codepage, right?
And I think you should use fromUtf8 to avoid this."
216123205,9349,glassez,2018-09-08T07:13:44Z,">From QString document, it seems fromLocal8Bit will depend on OS locale/codepage, right?

Well, after reading several levels of Qt docs I've suppose it's correct to use this method. But it really have confusing name. It should be ""fromLocalEncoding()"" since it can decode not only 8-bit strings but also Unicode.
Since all others should use the same locale on the same system it should work correctly. But fromUtf8() will fails on systems with non-utf8 locale settings.
(All above is not applicable to Windows)."
216126420,9349,glassez,2018-09-08T09:48:31Z,"Why not put this logic in getExeName? I mean buffer asjusting.
And why not create it of MAX_PATH size initially?"
216126506,9349,zeule,2018-09-08T09:54:15Z,"Because MAX_PATH is purely Windows limitation, and on UNIX most executable reside /usr/bin or /bin, thus making the first guess (32) work almost always."
216126957,9349,glassez,2018-09-08T10:21:11Z,"Well, let not smart enough memory analyzers teach us to live?"
216126994,9349,glassez,2018-09-08T10:22:48Z,"Ok.
First question is still actual."
233112330,9349,Chocobo1,2018-11-13T16:11:32Z,seems this could be `const`
233113120,9349,Chocobo1,2018-11-13T16:12:49Z,Is it necessary to check its existence before opening?
233122571,9349,zeule,2018-11-13T16:34:14Z,"Probably not, but I don't need the `QFile` object when the params file does not exists (i.e. most of the times)."
233126547,9349,glassez,2018-11-13T16:43:23Z,You can open and read it inside local scope.
233131357,9349,zeule,2018-11-13T16:53:56Z,"Sorry, I don't understand what do you suggest."
233139307,9349,glassez,2018-11-13T17:11:48Z,"Sorry, I didn't see all affected code...
>I don't need the QFile object when the params file does not exists (i.e. most of the times).

But you just return in this case!"
233142777,9349,Chocobo1,2018-11-13T17:21:02Z,">Probably not, but I don't need the QFile object when the params file does not exists (i.e. most of the times).

I really don't know it is that unfavorable to have `QFile` unconditionally (might be more convincing if you elaborate a bit more)... at least please invert this `if ()` check to return early."
233151370,9349,zeule,2018-11-13T17:41:47Z,">  But you just return in this case!

Sorry, still can't understand.

> it is that unfavorable to have QFile unconditionally (might be more convincing if you elaborate a bit more)

I don't know what can I add. ""The `QFile` class provides an interface for reading from and writing to files"", quoting Qt docs. A file does not exist, why would I need an object to access it? Additionally, existing but unreadable files is an error, I must inform user about that.

> please invert this if () check to return early.

But then I would need a second `return {}`."
233175117,9349,glassez,2018-11-13T18:48:25Z,">existing but unreadable files is an error, ...

Ok. Since in this particular case ""absence of file"" and ""corrupted/unreadable file"" have really different meaning you need to handle them differently.
>I must inform user about that.

But debug message isn't for user. Also I'm not sure it will be printed by ""release"" binary.
Maybe print it to the log?"
233213673,9349,zeule,2018-11-13T20:41:09Z,"The application object is not created yet when this code is running, how can I access the log?"
233216720,9349,zeule,2018-11-13T20:51:16Z,But qDebug is not an option. std::cerr?
233306573,9349,Chocobo1,2018-11-14T03:49:44Z,"or much lightweight `fprintf(stderr, )`"
233329074,9349,glassez,2018-11-14T06:45:46Z,I would even interrupt the app in this case. The user can rely on some parameters so that he can get an unexpected effect if the application starts without them.
233431145,9349,zeule,2018-11-14T12:45:10Z,This sounds reasonable. I'm going to replace qDebug with direct write to cerr and throw an exception after that. Does anybody object?
234522828,9349,Chocobo1,2018-11-19T08:11:07Z,">Does anybody object?

Seems no one, let's try getting this into v4.1.5"
234987886,9349,glassez,2018-11-20T12:47:48Z,"Please rename it to ""paramsFileName"" and ""fn"" to ""paramsFile""."
234989056,9349,glassez,2018-11-20T12:51:33Z,Please describe this regex.
235041822,9349,glassez,2018-11-20T15:12:51Z,"Seems like wrong assertion. 
We call it with `QCoreApplication::arguments()` as argument. From its documentation:
>On Windows, the list is built from the argc and argv parameters only if modified argv/argc parameters are passed to the constructor. In that case, encoding problems might occur.
>
>Otherwise, the arguments() are constructed from the return value of GetCommandLine(). As a result of this, the string given by arguments().at(0) might not be the program name on Windows, depending on how the application was started."
354655786,11592,Chocobo1,2019-12-06T03:50:04Z,redundant empty line here
354655897,11592,Chocobo1,2019-12-06T03:50:44Z,`const auto checkAndAddAddress `
354656265,11592,Chocobo1,2019-12-06T03:52:49Z,I would prefer list captured variable explicitly instead of using `&`. Here and other lambdas too.
354656659,11592,Chocobo1,2019-12-06T03:55:10Z,Maybe use: `void QComboBox::addItems(const QStringList &texts)`
354656726,11592,Chocobo1,2019-12-06T03:55:33Z,`const auto populateCombo` and add `const` to other new lambdas.
354658831,11592,Chocobo1,2019-12-06T04:09:08Z,Do users really binds to link-local IP? Is there some real world use case of that?
354912331,11592,glassez,2019-12-06T16:16:53Z,For what reason it can be empty?
354912919,11592,glassez,2019-12-06T16:18:04Z,Can't listeningIPs be empty list?
355109661,11592,Chocobo1,2019-12-07T08:50:46Z,"you should have a variable for `endpoints.join(',');` and use it here instead of converting over and back. Those are small places that eats performance little by little and can be easily overlooked."
355110210,11592,Chocobo1,2019-12-07T09:03:07Z,Is it possible to change `nextIP` type to `QHostAddress` and change `getListeningIPs()` to return `QVector<QHostAddress>`? so we can save this conversion and maybe other places too.
355110233,11592,Chocobo1,2019-12-07T09:03:52Z,maybe rename `nextIP` -> `IP`?
355110396,11592,Chocobo1,2019-12-07T09:07:22Z,IMO the below code is long enough that should be moved to its own function.
355112074,11592,glassez,2019-12-07T09:42:01Z,"Agree. `nextIP` is invalid name for this function since the function knows about one ip only. `ip` is better name. But, IIRC, it can contains not only IP... Maybe there can be more appropriate name?"
355113325,11592,sledgehammer999,2019-12-07T10:10:31Z,The return can't be `QHostAddress` because it might also return an interface name.
355113521,11592,sledgehammer999,2019-12-07T10:14:42Z,"Probably! I'll rework this section again. Truth is that the refactoring went ""backwards"". I started refactoring this code section first AND then I realized that getListeningIPs() had issues and refactored that too. But I never came back here to rethink yet again the logic."
355125552,11592,sledgehammer999,2019-12-07T14:50:54Z,Either I use wrong terminology or one of us is confused. Users may choose (for whatever reason) to listen to a specific IPv6 local address of their network interface. They may want for traffic to go through only through that specific one.
355128400,11592,Chocobo1,2019-12-07T15:47:02Z,maybe name it `appendAddressString` or `appendAddress`?
355128637,11592,Chocobo1,2019-12-07T15:51:06Z,"You already have the Q_ASSERT above so you can change this line to just `else` (without checking QAbstractSocket::IPv6Protocol). Or alternatively, you should remove the Q_ASSERT above."
355128724,11592,Chocobo1,2019-12-07T15:52:51Z,"maybe ""IPv6 address have multiple representations in text""?"
355128828,11592,Chocobo1,2019-12-07T15:55:10Z,`return addr;` and move `canonical` declaration to further below.
355128907,11592,Chocobo1,2019-12-07T15:56:45Z,"nitpick, maybe use the full name: configureNetworkInterfaces?"
355129052,11592,Chocobo1,2019-12-07T15:59:09Z,I would add parentheses to the above 2 lines and to other appending cases.
355129075,11592,Chocobo1,2019-12-07T15:59:44Z,redundant empty line here.
355129137,11592,Chocobo1,2019-12-07T16:00:37Z,you can use the shorter version: `const QHostAddress addr {ip};`
355129231,11592,Chocobo1,2019-12-07T16:02:30Z,This redundant level of indention can be eliminated by returning early on the opposite condition.
355129426,11592,Chocobo1,2019-12-07T16:06:17Z,"maybe ""Could not get GUID of network interface: %1""? (and below too)"
355129599,11592,Chocobo1,2019-12-07T16:09:14Z,boolean `allIPv4` & `allIPv6` should be captured by value.
355129644,11592,Chocobo1,2019-12-07T16:10:00Z,pls add parentheses to the first predicate
355129720,11592,Chocobo1,2019-12-07T16:11:21Z,"maybe just ""Can not find the configured address \""%1\"" to listen on""?"
355129976,11592,Chocobo1,2019-12-07T16:16:26Z,"maybe just ""Can not find the configured address ""%1"" to listen on""?"
355130087,11592,Chocobo1,2019-12-07T16:18:20Z,I see no point leaving this comment.
355176352,11592,glassez,2019-12-08T10:38:07Z,"Seems it's a ""one-level-up"" logic. It should be outside of this method:
```c++
if (!m_listenInterfaceConfigured)
    configureNetInterfaces(settings);
```"
355176551,11592,glassez,2019-12-08T10:42:18Z,"Maybe define some helper like:
```c++
QString makeEndpointString(QHostAddress ip, int port);
```"
355177138,11592,glassez,2019-12-08T10:53:28Z,canonicalIPv6Addr shouldn't return non-IPv6 address!
355177264,11592,sledgehammer999,2019-12-08T10:56:04Z,"@glassez I understand what you're saying, but isn't it safer for `configureNetInterfaces()` to do the self-check? Although in this particular case nothing bad will happen if we re-run this function."
355177366,11592,sledgehammer999,2019-12-08T10:57:58Z,So return a null QHostAddress?
355177468,11592,sledgehammer999,2019-12-08T11:00:12Z,"Nah, I don't think this is worth it. It is only 2-3 places where we make endpoints."
355182276,11592,Chocobo1,2019-12-08T12:21:21Z,typo: represantations -> representations
355182563,11592,Chocobo1,2019-12-08T12:26:01Z,the white space placed wrong: `<<( ` -> `<< (`
355377532,11592,glassez,2019-12-09T10:44:30Z,"If applying this function to IPv4 address isn't valid ""use case"" you should prevent it in any way (at least add an appropriate assertion). Otherwise it may allow logically incorrect code."
355379714,11592,glassez,2019-12-09T10:49:08Z,Maybe use some more IP-specific placeholders (e.g. `0.0.0.0` and `::0`) instead? It appears in configure file and can confuse the readers.
355431664,11592,sledgehammer999,2019-12-09T12:52:33Z,"I am confused. How do I prevent it in any way?
And won't the assertion work only in debug?"
355434092,11592,glassez,2019-12-09T12:58:29Z,">How do I prevent it in any way?


You can throw RuntimeError...

Or you can modify it to be valid for any IP (and rename it to `canonicalIPAddr`)."
355434732,11592,glassez,2019-12-09T13:00:08Z,Or even it can return IPv6 representstion of IPv4... unless I am wrong it is possible.
355444469,11592,sledgehammer999,2019-12-09T13:22:56Z,"[QHostAddress::toIPv6Address()](https://doc.qt.io/qt-5/qhostaddress.html#toIPv6Address) seems to do the job. So it becomes:
```c++
if (addr.protocol() != QAbstractSocket::IPv6Protocol)
                return {addr.toIPv6Address()};
```"
355445883,11592,glassez,2019-12-09T13:25:45Z,And also apply all remaining modifications.
355446358,11592,glassez,2019-12-09T13:26:32Z,"Or it already in ""canonical"" form?"
355455027,11592,sledgehammer999,2019-12-09T13:43:23Z,">Or it already in ""canonical"" form?

It can't be, because at this point it is IPv4.
If you mean below, there is no way to know beforehand. So we convert unconditionally."
355455260,11592,sledgehammer999,2019-12-09T13:43:56Z,Do you insist on this change?
355455672,11592,sledgehammer999,2019-12-09T13:44:35Z,Just to clarify: I don't see a point to this so I am not going to implement it.
355456144,11592,sledgehammer999,2019-12-09T13:45:31Z,"Interesting. I'll take a look into the rest of the code and if it doesn't break something, I'll change it to your suggestion."
355473730,11592,glassez,2019-12-09T14:19:12Z,"I would implement another variant instead. I mean `canonicalIPAddr` that returns IP of the same type as its argument.
BTW, we can use it unconditionally since it always returns valid result."
355513549,11592,sledgehammer999,2019-12-09T15:27:46Z,"This branch isn't needed anymore due to the way ""All addresses""/All Ipv4/All IPv6 are returned by getListeningIPs().
So all the code below is shifted one indentation level up."
355514062,11592,glassez,2019-12-09T15:28:44Z,Ok. Don't insist.
355516590,11592,glassez,2019-12-09T15:33:05Z,No.
355519186,11592,Chocobo1,2019-12-09T15:37:41Z,"AFAIK you are duplicating the same string multiple times, i.e. every QStringLiteral() you constructed is going to be distinct in the binary and thus boating it up. IMO using QLatin1String() is suffice."
355520218,11592,Chocobo1,2019-12-09T15:39:37Z,is the explicit constructor required? would this work: `return addr.toIPv6Address();`?
355520601,11592,Chocobo1,2019-12-09T15:40:15Z,would this work: `session->setNetworkInterfaceAddress(ifaceAddr.isNull() ? {} : ifaceAddr.toString());`? and the similar one below?
355521165,11592,Chocobo1,2019-12-09T15:41:23Z,IMO you should always use `int` unless doing bits operations.
355521407,11592,Chocobo1,2019-12-09T15:41:50Z,And add `const`.
355521682,11592,Chocobo1,2019-12-09T15:42:19Z,for 3-way or more cases better use a `switch()`.
355525234,11592,sledgehammer999,2019-12-09T15:48:21Z,I wanted to avoid the extra space taken by the `break` statement on each branch.
355525551,11592,sledgehammer999,2019-12-09T15:48:54Z,Damn it. I forgot about const because I was trying something else initially.
355527338,11592,sledgehammer999,2019-12-09T15:51:58Z,"Unfortunately no.
gcc:
```
error: expected primary-expression before '{' token
```
msvc:
```
syntax error: '{'
```"
355530887,11592,sledgehammer999,2019-12-09T15:58:00Z,">would this work: return addr.toIPv6Address();

No. That constructor is marked as explicit.

And `return {addr.toIPv6Address()};` fails with:
```
error: converting to 'QHostAddress' from initializer list would use explicit constructor
```"
355530995,11592,Chocobo1,2019-12-09T15:58:11Z,"On a second thought, the original code of this block should be preserved and should let webUI return the ip address string because now the API doesn't make sense."
355532301,11592,sledgehammer999,2019-12-09T16:00:20Z,"And how will the Webui user select ""I want all IPv4"" addresses for the network interface? (vs all address vs all ipv6 addresses vs specific address)"
355533007,11592,sledgehammer999,2019-12-09T16:01:31Z,PS: The values here mirror the ones chosen for GUI combobox. They represent the position of the 3 top items in the combobox list.
355543336,11592,Chocobo1,2019-12-09T16:18:52Z,">And how will the Webui user select ""I want all IPv4"" addresses for the network interface? 

I guess some modification in js code is required, that is to mimic/follow the new combobox options in GUI.

>The values here mirror the ones chosen for GUI combobox. They represent the position of the 3 top items in the combobox list.

You see the api key here is `current_interface_address`, so unless you document explicitly these magic values in WebAPI document, none of the users of WebAPI could guess what `1` or `2` means and not to mention this semantic change warrants a webapi version bump."
355551731,11592,sledgehammer999,2019-12-09T16:33:18Z,">so unless you document explicitly these magic values in WebAPI document

I can do that. Just point me to the correct place.

>warrants a webapi version bump.

The webapi major version bump will happen anyway because I remove the `listen_on_ipv6_address` key
"
355553276,11592,Chocobo1,2019-12-09T16:35:58Z,"@Piccirello 
Any comment on this discussion? https://github.com/qbittorrent/qBittorrent/pull/11592#discussion_r355530995"
355567675,11592,glassez,2019-12-09T17:00:35Z,"Guys, I really don't understand why you can't accept it as it processed by app core (i.e. `0.0.0.0` and `::`)? Why all these ""magic"" values of separate type?"
355627498,11592,sledgehammer999,2019-12-09T19:03:28Z,"In this case `0.0.0.0` and `::` will be treated as magic values from the UI perspective. The UI must not show them as `0.0.0.0` and `::` but as `All IPv4` and `All IPv6` respectively. In this context they have special meaning. And we need another value that will indicate `All addresses` (could be an empty string).

So it is a choice on the set of magic numbers. But in this case, don't we run the risk of web devs ignoring these special cases if we just send `0.0.0.0` and `::` ? (sending 0/1/2) will force them to take a better look (and their users will point that out)

In any case, I am no expert in designing outward facing API nor do I care much about the webapi stuff.
If you find a consensus on how it should be represented via the WebAPI, I'll happily oblige."
355836760,11592,Chocobo1,2019-12-10T04:13:20Z,">Guys, I really don't understand why you can't accept it as it processed by app core (i.e. 0.0.0.0 and ::)? 

That is what I meant in the first post.

>And we need another value that will indicate All addresses (could be an empty string).

An empty string for all address is fine for me or even better IMO: `0.0.0.0,::`

>But in this case, don't we run the risk of web devs ignoring these special cases if we just send 0.0.0.0 and :: ? 

From OS API perspective, these 2 values are not special, they just binds to any IPv4/IPv6 address respectively. And any one who ever worked with network sockets will recognize these values. Or do you have other *special* meaning?

>In any case, I am no expert in designing outward facing API nor do I care much about the webapi stuff.

I'm sorry to have to say this, you're touching webapi here and one mistake here is going to cause inconveniences for webAPI devs/users for some period.

>If you find a consensus on how it should be represented via the WebAPI, I'll happily oblige.

`current_interface_address` can only expect an IPV4/IPv6 address string or an empty string.

As for WebUI, (warning, pseudo code blow)
Here need to add an `if (item === '::') // add ""all ipv6"" option` to populate the entries:
https://github.com/qbittorrent/qBittorrent/blob/975b44d05ffceb147523cc99f878ce8a5a43920e/src/webui/www/private/views/preferences.html#L1442

And here needs to modified to get the ip address value, probably something like: `if ($('optionalIPAddressToBind').getProperty('value') === 'all ipv6') // set to ""::""`
https://github.com/qbittorrent/qBittorrent/blob/975b44d05ffceb147523cc99f878ce8a5a43920e/src/webui/www/private/views/preferences.html#L2095
"
355838301,11592,glassez,2019-12-10T04:22:06Z,">So it is a choice on the set of magic numbers. But in this case, don't we run the risk of web devs ignoring these special cases if we just send `0.0.0.0` and `::`?

In any case it's a bad idea to blindly show any received data. UI level should make postprocessing and use appropriate representation. When magic values are documented there is no difference between numbers and ""special"" IPs. But as I said before ""special"" IPs are better for readers (for debugging purposes). So even some ""stupid"" UI shows it as is its better than see some really meaningless numbers.

P.S. Even if the others vote for the numbers and you decide to use them, you don't need to convert anything here, just compare them in string form."
356189860,11592,Chocobo1,2019-12-10T17:57:27Z,"maybe `qMax(index, 0)`"
356191162,11592,Chocobo1,2019-12-10T18:00:09Z,"Just a suggestion, it can be simplified to:
```c++
const QString str = (addr.protocol() == QAbstractSocket::IPv4Protocol)
    ? addr.toString()
    : Utils::Net::canonicalIPv6Addr(addr).toString();
m_comboBoxInterfaceAddress.addItem(str, str);
```
Assuming there won't be another IP version... "
356191312,11592,Chocobo1,2019-12-10T18:00:30Z,`const QHostAddress ifaceAddr`
356230119,11592,sledgehammer999,2019-12-10T19:22:26Z,"In theory there are other values to the protocol enum: https://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum
Practically it is unlikely to have one those other values.
In any case, I am leaning at leaving it they way it is now."
356370135,11592,Chocobo1,2019-12-11T01:55:30Z,"the trailing `//`, is it leftover?"
771102536,15793,Chocobo1,2021-12-17T04:51:30Z,maybe it is time to add `QLatin1String` to the key.
771105527,15793,Chocobo1,2021-12-17T05:02:13Z,"IMO path (in filesystem sense) should only have one form: don't end with a trailing slash.
If this can be uphold through out the code base, then concatenating file path and file name is easy, just add slash (appropriate path separator) and append the file name and we don't need this helper."
771106234,15793,Chocobo1,2021-12-17T05:04:33Z,maybe it is best to use another variable instead of reusing `path`.
771106309,15793,Chocobo1,2021-12-17T05:04:51Z,maybe rename `path` to `relativePath`?
771110054,15793,Chocobo1,2021-12-17T05:17:29Z,"If this function is commonly used and performance-related, then it might be wise to append to `QString` directly and drop the last `','` manually."
771610641,15793,glassez,2021-12-17T18:33:23Z,"This logic is just moved from another place. I don't want to change it in this PR.
Currently, I have unfinished changes that encapsulate the path handling in a separate class, which will save us from unnecessary cares throughout the code base. But this job requires a lot of routine code changes (due to the extensive use of paths in qBittorrent), so I decided to finish it after my currently opened PRs are done."
771801201,15793,glassez,2021-12-18T08:44:18Z,"> If this function is commonly used and performance-related, then it might be wise to append to `QString` directly and drop the last `','` manually.

Are you sure that it will be so much more optimal?"
771801373,15793,glassez,2021-12-18T08:46:18Z,Anyway trying to throw it away here...
771810374,15793,glassez,2021-12-18T10:34:32Z,"> maybe it is time to add `QLatin1String` to the key.

Ok."
773412618,15793,thalieht,2021-12-21T20:06:37Z,"Disable the label too:
`m_ui->labelDownloadPath->setEnabled(index == 1);`

These 2 commands need to be called in constructor too or somewhere else on dialog creation. 
And while we're in this method, the ""Path"" should be empty when the global temp path setting is disabled. I don't know about the rest of the method, i only noticed these."
773584859,15793,Chocobo1,2021-12-22T04:01:47Z,">Are you sure that it will be so much more optimal?

It depends on whether there are many elements in `columns`.
However if the coding complexity is manageable, I would go for it anyway."
773586543,15793,glassez,2021-12-22T04:08:34Z,Should be fixed now.
773630412,15793,glassez,2021-12-22T06:28:40Z,">However if the coding complexity is manageable, I would go for it anyway.

Done."
775362321,15793,Chocobo1,2021-12-27T06:54:38Z,it is possible to use `&newPath` (and at new code below too)
775364418,15793,Chocobo1,2021-12-27T07:02:37Z,is it possible to forward declare it?
775367737,15793,Chocobo1,2021-12-27T07:14:58Z,add an empty line above?
775368603,15793,Chocobo1,2021-12-27T07:17:59Z,"off topic, should we decide on one between `std::pair` and `QPair` in qbt codebase?
I would favor `std::pair`."
775370521,15793,Chocobo1,2021-12-27T07:24:52Z,revert it?
775372118,15793,Chocobo1,2021-12-27T07:30:28Z,I would give `m_ui->checkUseDownloadPath->checkState()` a local variable since it is used twice.
775372245,15793,Chocobo1,2021-12-27T07:30:57Z,revert it?
775372880,15793,Chocobo1,2021-12-27T07:33:04Z,why add it?
775373561,15793,Chocobo1,2021-12-27T07:35:23Z,(optional) maybe use a local variable for `std::count_if` since the code is long.
775383684,15793,glassez,2021-12-27T08:07:20Z,"> it is possible to use `&newPath` (and at new code below too)

Yes."
775383753,15793,glassez,2021-12-27T08:07:30Z,"> is it possible to forward declare it?

Yes."
775384606,15793,glassez,2021-12-27T08:10:04Z,"> add an empty line above?

Doesn't matter to me. Added."
775386434,15793,glassez,2021-12-27T08:15:15Z,"> off topic, should we decide on one between `std::pair` and `QPair` in qbt codebase? I would favor `std::pair`.

I think we discussed similar issues (maybe in passing). I think we should use std types unless a similar Qt type has obvious advantages (for example, implicit sharing)."
775387401,15793,glassez,2021-12-27T08:17:48Z,">revert it?

New widgets were added thus height is increased."
775388645,15793,glassez,2021-12-27T08:21:26Z,"> I would give `m_ui->checkUseDownloadPath->checkState()` a local variable since it is used twice.

Ok."
775389234,15793,glassez,2021-12-27T08:23:11Z,"> revert it?

Size is changed due to new dialog layout (and new widgets added)."
775389726,15793,glassez,2021-12-27T08:24:31Z,"> why add it?

The remainder of some previous iteration... Deleted it."
775391284,15793,glassez,2021-12-27T08:28:43Z,"> (optional) maybe use a local variable for `std::count_if` since the code is long.

Ok."
775412717,15793,Chocobo1,2021-12-27T09:25:57Z,you should include the header (`<utility>`) for std::pair.
777085159,15793,Chocobo1,2022-01-01T06:01:27Z,maybe remove those?
777085307,15793,Chocobo1,2022-01-01T06:03:49Z,use `switch ()`?
777085401,15793,Chocobo1,2022-01-01T06:06:29Z,Seems it isn't frequently used so I would ditch it. (same in `TorrentCategoryDialog::useDownloadPathChanged`)
777086035,15793,Chocobo1,2022-01-01T06:18:01Z,seems `dirs` is redundant. you could just search and record the value with a loop.
777086099,15793,Chocobo1,2022-01-01T06:19:25Z,is `QStringList()` needed? it looks like it should work without it.
777086485,15793,Chocobo1,2022-01-01T06:27:19Z,This parameter can be const ref now. The same to `setDownloadPath()`
777086628,15793,Chocobo1,2022-01-01T06:31:17Z,"an shorter alternative:
```c++
const auto legacyCategories = SettingValue<QVariantMap>(""BitTorrent/Session/Categories"").get();
```"
777086874,15793,Chocobo1,2022-01-01T06:35:03Z,is it leftover?
777117927,15793,glassez,2022-01-01T15:45:50Z,"> use `switch ()`?

I would prefer not to use `switch` when there are only a couple of cases here, especially when we don't have to handle them all."
777118071,15793,glassez,2022-01-01T15:48:09Z,"We need to store `QStringList` but `pathList.mid(0, maxLength)` returns `QList<QString>`."
777118171,15793,glassez,2022-01-01T15:49:44Z,"No. It is replacement for ""upgrade code"" above."
777119504,15793,glassez,2022-01-01T16:10:11Z,"> you should include the header (`<utility>`) for std::pair.

Done."
777119779,15793,glassez,2022-01-01T16:14:13Z,"> Seems it isn't frequently used so I would ditch it. (same in `TorrentCategoryDialog::useDownloadPathChanged`)

Ok."
777119977,15793,glassez,2022-01-01T16:16:59Z,"> This parameter can be const ref now. The same to `setDownloadPath()`

Done."
777120479,15793,glassez,2022-01-01T16:24:23Z,"> seems `dirs` is redundant. you could just search and record the value with a loop.

It is previously existing logic but I anyway changed it."
777120646,15793,glassez,2022-01-01T16:26:39Z,"> maybe remove those?

Sure."
218729789,9541,Chocobo1,2018-09-19T09:20:49Z,give it a default `false`.
218730197,9541,Chocobo1,2018-09-19T09:22:15Z,"what if user set `priority == 999`, should you filter invalid values?"
218730411,9541,Chocobo1,2018-09-19T09:22:58Z,"really, QString isn't much longer to type than auto."
218730777,9541,Chocobo1,2018-09-19T09:24:08Z,"```
if (negate condition)
    return;
// continue processing
```"
218731720,9541,Chocobo1,2018-09-19T09:27:04Z,"maybe add a lambda function, so the code will be a bit shorter."
218732832,9541,glassez,2018-09-19T09:30:23Z,Why invalid file id isn't bad param error? (Unlike invalid prio)
218733463,9541,glassez,2018-09-19T09:32:24Z,"I would change param name, but it breaks API compatibility..."
219679376,9541,Piccirello,2018-09-22T18:46:54Z,Any benefit to using an explicit type vs `auto`?
219679943,9541,Piccirello,2018-09-22T19:12:06Z,I want your thoughts: we add an optional `ids` param that takes priority over the `id` param. Or we can change the name and bump the web api version. 
219681008,9541,Piccirello,2018-09-22T19:59:59Z,"The `FilePriority` enum is defined in `gui/torrentcontentmodelitem.h`, which we can't import into a web controller. Any thoughts on where we should migrate this enum? I would think somewhere inside `base` but I don't know those classes very well."
219687433,9541,Chocobo1,2018-09-23T03:36:27Z,I believe CODING_GUIDELINES has enough explaination: https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#9-misc
219688544,9541,Chocobo1,2018-09-23T04:56:44Z,File IDs ?
219688550,9541,Chocobo1,2018-09-23T04:57:13Z,`const int id : fileIdsInts`
219688712,9541,Chocobo1,2018-09-23T05:12:47Z,"please keep the code succinct, with this var introduced `QStringList fileIDs` is redundant now."
219688785,9541,Chocobo1,2018-09-23T05:19:31Z,"You should focus on whether the value will be accepted by `torrent->setFilePriority` or not.
offtopic, it seems `torrent->setFilePriority` only changes 1 prio at a time which is inefficient when you invoke it in a loop."
219688831,9541,glassez,2018-09-23T05:25:24Z,">The FilePriority enum is defined in gui/torrentcontentmodelitem.h, which we can't import into a web controller. Any thoughts on where we should migrate this enum? I would think somewhere inside base but I don't know those classes very well.

I didn't mean to make it so complicated. Just check that they are all correct data type, otherwise it is clearly  ""bad param"" error.

P.S. please, don't remove your comments even if you change your mind later. Just say about. Otherwise it's hard to maintain the discussion."
219688943,9541,glassez,2018-09-23T05:38:31Z,"We shouldn't produce incompatible changes so frequently if possible.
So maybe we should have some way to keep track of these ""non-urgent"" changes, and then make all the changes at once when we have the required changes?"
219706776,9541,glassez,2018-09-23T18:10:38Z,"Maybe keep the list of postponed changes near the API version declaration, e.g. ""When your changes require increasing of minor version you should also apply the following:"" and then list of changes.
What do you say? @Chocobo1?"
219710472,9541,Piccirello,2018-09-23T20:30:34Z,"I think you missed my point. The valid priority values are defined in `gui/torrentcontentmodelitem.h`, which is the list I can check against to see if the value will be accepted."
219710573,9541,Piccirello,2018-09-23T20:34:01Z,"> Just check that they are all correct data type

We have two options: check that they're valid `int`s (which I'm already doing), or check that they're a valid `FilePriority` values.

> P.S. please, don't remove your comments even if you change your mind later. Just say about. Otherwise it's hard to maintain the discussion.

No one removed comments. You replied to the wrong comment thread..."
219710600,9541,Piccirello,2018-09-23T20:35:00Z,Recommendations for modern C++ are to use `auto` quite liberally. We get no benefit from an explicit type here.
219710608,9541,Piccirello,2018-09-23T20:35:17Z,"From the coding guidelines:

`Declarations for which one can gather enough information about the object interface (type) from its name or the usage pattern .. or the right part of the expression nicely fit here.`

Seems we can gather enough info about the type from the variable name `fileIdsInts`."
219710633,9541,Piccirello,2018-09-23T20:36:14Z,Because the user can enter multiple.
219711652,9541,Piccirello,2018-09-23T21:10:42Z,"> offtopic, it seems torrent->setFilePriority only changes 1 prio at a time which is inefficient when you invoke it in a loop.
 
My latest commit modifies `TorrentHandle::setFilePriority()`to take a list of indexes, since the controller code is the only place we call it."
219725458,9541,Chocobo1,2018-09-24T03:44:15Z,"I mean ""ID"" in uppercase."
219725595,9541,Chocobo1,2018-09-24T03:46:42Z,">The valid priority values are defined in gui/torrentcontentmodelitem.h, which is the list I can check against to see if the value will be accepted.

That is the gui part, but really who is consuming the priority values? libtorrent, you should check from there."
219726525,9541,Piccirello,2018-09-24T04:01:56Z,"Oh, I misunderstood. Will update"
219726559,9541,Chocobo1,2018-09-24T04:02:31Z,">Recommendations for modern C++ are to use auto quite liberally. 

Source?
IMO you're using `auto` a bit too liberal. `auto` is more like a shortcut, not be used like `var` in javascript.
"
219727038,9541,Piccirello,2018-09-24T04:09:30Z,"From *Item 5: Prefer auto to explicit type declarations* in *Effective Modern C++* by Scott Meyers:

> Using [*auto*] saves typing, sure, but it also prevents correctness and performance issues that can bedevil manual type declaration ... There are thus several reasons to prefer *auto* over explicit type declarations ... The fact of the matter is that writing types explicitly often does little more than introduce opportunities for subtle errors, either in correctness or efficiency or both."
219727537,9541,Chocobo1,2018-09-24T04:17:15Z,"Ah, thank you, however I don't see he mentions anything about readability, a google search gives a handful of debates about readability of using `auto`."
219728386,9541,Piccirello,2018-09-24T04:30:53Z,"It's not just for the gui, because we use the same priority values in the webui. The values are defined in gui code because we have very little separation between gui logic and application code, but they really should be moved to base.

libtorrent will accept a priority between 0-7 ([source](https://www.libtorrent.org/reference-Core.html#piece-priority-prioritize-pieces-piece-priorities)); we currently only use 0, 1, 6, and 7. Without the values in `gui/torrentcontentmodelitem.h`, users would be able to enter a value between 2-5.

I'm moving the `prio` namespace to a new file `base/torrentpriority.h`. If we should move it, lmk."
219728980,9541,Chocobo1,2018-09-24T04:40:48Z,">What do you say? @Chocobo1?

I don't think I get your idea.

However I think the commit bumping API version should also include the api code changes, so it is possible to look up by reading git log."
219750660,9541,glassez,2018-09-24T07:56:24Z,"When we discussed our rules about using `auto` keyword, we wanted to find a balance between faster code writing and readability. So don't abuse it, please."
219752693,9541,glassez,2018-09-24T08:03:49Z,"The variable name does not matter. This paragraph means something completely different:
```c++
auto *varName = static_cast<RSS::Feed *>(rssItemPtr);
```
Or:
```c++
auto *session = BitTorrent::Session::instance();
```"
219755702,9541,glassez,2018-09-24T08:12:45Z,">That is the gui part, but really who is consuming the priority values? libtorrent, you should check from there.

You shouldn't use libtorrent interface directly outside of abstraction layer (BitTorrent:: types and functions).
>If we should move it, lmk.

Yes. Torrent file priority enum should be declared in BitTorrent namespace. Maybe in torrenthandle.h file (I'm not sure there is separate file should exist)."
219909838,9541,glassez,2018-09-24T16:51:58Z,">I don't think I get your idea.

@Chocobo1, take this case for example.
Meaning of param 'id' was changed. Now it provide list of file IDs. It should cause changing of param name but it breaks API compatibility. It's really bad idea to make incompatible changes too frequently.
We can proceed to use old name for some time and just mark it for future changing.
When we make changes that cannot be made in a compatible way, we can add all pending changes with them."
220051358,9541,Chocobo1,2018-09-25T03:44:24Z,">We can proceed to use old name for some time and just mark it for future changing.

I don't object the idea, however I must say from my experience, revisiting an older code after some time takes much more time for the developer and outcome is usually not good enough quality.
If @Piccirello is interested, we could try it out in this case (experiment)."
220054344,9541,glassez,2018-09-25T04:15:20Z,">however I must say from my experience, revisiting an older code after some time takes much more time for the developer and outcome is usually not good enough quality.

So I suggest to keep list with postponed changes. We can have some instructions, where, what and how it should be changed. Or we can even have commented changes inplace.

Well, I'm not insisting. I just thought we shouldn't break API too often."
220064298,9541,glassez,2018-09-25T05:46:39Z,">No one removed comments. You replied to the wrong comment thread...

Forgive. I just got an email notification, and it was like you answered my question in this thread. But then I didn't find your answer here."
220064988,9541,glassez,2018-09-25T05:51:12Z,">My latest commit modifies `TorrentHandle::setFilePriority()` to take a list of indexes, since the controller code is the only place we call it.

Isn't `prioritizeFiles()` enough?"
220776339,9541,Piccirello,2018-09-27T02:17:49Z,"I would be interested, maybe maintaining a separate branch with breaking api changes that can be merged pre-minor version bump."
220777467,9541,Piccirello,2018-09-27T02:27:41Z,We still have to do some extra accounting since `prioritizeFiles()` wants a list of priorities for all files in the torrent. But I think that's very doable and will allow us to get rid of `TorrentHandle::setFilePriority()` entirely.
220788066,9541,glassez,2018-09-27T04:04:30Z,fileIDs
220789022,9541,glassez,2018-09-27T04:14:02Z,">maybe maintaining a separate branch with breaking api changes that can be merged pre-minor version bump.

And have opened PR for it.
Let's try something!"
220799893,9541,glassez,2018-09-27T05:49:05Z,"This namespace is redundant. It was a very outdated piece of code...
Either declare FilePriority as enum class or move it to TorrentHandle and use more meaningful names: IgnoredFile, NormalPriorityFile, etc. The second way will be easier for you, because it will require less changes to the existing code (enum class will require explicit cast to int)."
220800063,9541,glassez,2018-09-27T05:50:20Z,Anyway coding style should be fixed. Add spaces around `=`.
221478357,9541,Piccirello,2018-09-30T23:56:54Z,What's wrong with removing the `prio` namespace and keeping `FilePriority` as an enum (non-class)?
221492139,9541,glassez,2018-10-01T04:06:07Z,Nothing wrong for me if we get meaningful names.
221541773,9541,Piccirello,2018-10-01T09:17:52Z,"To me, ‘BitTorrent::FilePriority::IGNORED’ is descriptive and meaningful, but I take it you don’t agree?"
221647272,9541,glassez,2018-10-01T15:13:01Z,"Yes, it's descriptive and meaningful. I'm OK with it if you'll use camel case: `BitTorrent::FilePriority::Ignored`.
But the question is, how are you going to get those names? Old style enum doesn't produce its own namespace. So you either have to use the old ""perverse"" way of declaring it in an extra ""FilePriority"" namespace, or you still have to use an enum class."
226881611,9541,Piccirello,2018-10-21T22:49:11Z,"I've moved the values into a `FilePriority` class. This also allows us to support an `isValidPriority()` function, which is needed to validate values from the WebAPI."
226992837,9541,glassez,2018-10-22T13:47:57Z,Very peculiar use of the class... You just use it as a namespace. I don't think that makes any sense.
226994149,9541,glassez,2018-10-22T13:53:09Z,It's better to avoid using of QList unless it's strongly required. Use QVector instead. And reserve needed amount of items before fill it.
226994818,9541,glassez,2018-10-22T13:55:47Z,Why not to merge this loop with the one above?
227040668,9541,Piccirello,2018-10-22T16:16:34Z,So then I'll go back to having an explicit namespace for this. An enum class alone doesn't satisfy my requirements of having an `isValidPriority()` method.
227043710,9541,glassez,2018-10-22T16:25:49Z,">So then I'll go back to having an explicit namespace for this.

Actually you have the same (explicit namespace for this) currently. Additionally you use inappropriate language element to declare it.
>An enum class alone doesn't satisfy my requirements of having an isValidPriority() method.

Why not just declare it alongside with the affected enum class?"
227199401,9541,Piccirello,2018-10-23T02:13:34Z,"It made sense before, but can be refactored now that we use `prioritizeFiles()`."
227199421,9541,Piccirello,2018-10-23T02:13:45Z,Will be removed due to merging the two loops
227874448,9541,glassez,2018-10-24T16:54:41Z,Now you should adjust used types to avoid multiple type cast (it should appear immediately after/before you need to use it as raw integer).
228022040,9541,Piccirello,2018-10-25T03:05:51Z,"This has been implemented as an enum class now, with `isValidFilePriority()` defined in an anonymous namespace inside `torrentscontroller.cpp`."
228046778,9541,Piccirello,2018-10-25T06:24:26Z,This was lazy on my part. I just pushed a new commit trying to minimize this.
228051009,9541,glassez,2018-10-25T06:47:09Z,I wouldn't create this var and just use `static_cast<int>(prio)` inplace.
228051095,9541,glassez,2018-10-25T06:47:34Z,The same as above.
228052094,9541,glassez,2018-10-25T06:52:39Z,"```c++
switch (static_cast<BitTorrent::FilePriority>(index.data().toInt())) {
case BitTorrent::FilePriority::Mixed:
// ... and so on
}
```"
228052170,9541,glassez,2018-10-25T06:53:01Z,The same as above.
228053302,9541,glassez,2018-10-25T06:58:24Z,"Seems like it would be better to have `m_priority` and all related methods (here and in child classes) of type FilePriority.
I don't insist that you change it in this PR if it's too much for you."
232909485,9541,Piccirello,2018-11-13T06:22:56Z,"I've switch this class and all subclasses from using `int` to `BitTorrent::FilePriority`, where appropriate"
236032261,9541,Chocobo1,2018-11-24T04:40:56Z,`bool isValidFilePriority(const BitTorrent::FilePriority priority)`
236060298,9541,Piccirello,2018-11-25T04:25:25Z,Added `const` to the parameter
236082729,9541,glassez,2018-11-25T17:36:41Z,Seems like **FilePriority** should be declared in its own header...
236085819,9541,Piccirello,2018-11-25T19:07:54Z,"Do we want a new header file just for this one enum class? Seems it might be overkill, but I don't feel strongly."
236086219,9541,glassez,2018-11-25T19:20:35Z,"Overkill is include entire ""torrenthandle.h"" when we need only FilePriority class. @Chocobo1, what do you say? If it's no problem feel free to merge it."
236086964,9541,Chocobo1,2018-11-25T19:41:43Z,"This idea actually has popped into my mind, it doesn't seem right that `TorrentHandle` is exposed when we only need `FilePriority`.
I think there should be a file that has all these similar enum/struct defines (and their helper functions). Maybe ""bitorrent/enums.{cpp, h}""?
"
236140230,9541,glassez,2018-11-26T07:05:58Z,">I think there should be a file that has all these similar enum/struct defines (and their helper functions). Maybe ""bitorrent/enums.{cpp, h}""?

I would not combine different types in one header (unless they are very likely used adjacently)."
236944891,9541,Piccirello,2018-11-28T05:32:25Z,I'll move the enum class to its own header file.
238055014,9541,Piccirello,2018-12-01T07:01:34Z,Move is complete
238055839,9541,glassez,2018-12-01T07:46:26Z,Please replace it with `#pragma once`
238055896,9541,glassez,2018-12-01T07:50:32Z,Conflict
238151687,9541,Chocobo1,2018-12-03T06:00:21Z,"I think this should be in filepriority.cpp.
"
239316261,9541,Piccirello,2018-12-06T03:14:05Z,"Agreed it should move to filepriority. But surely it can live inside the header file, no?"
239384295,9541,Chocobo1,2018-12-06T09:41:23Z,"The function will be inlined if placed in header, but it is only used in 1 place so OK."
239393469,9541,glassez,2018-12-06T10:07:18Z,"Coding Guidelines:
>Method definitions aren't allowed in header files

> but it is only used in 1 place so OK

This may change."
239704356,9541,Piccirello,2018-12-07T06:17:30Z,"I'm having some trouble with this. I've created a `filepriority.cpp` with the following contents, and included it in `base.pri` and the appropriate `CMakeLists.txt`

```
#include ""filepriority.h""

namespace BitTorrent
{
    static bool isValidFilePriority(const BitTorrent::FilePriority priority)
    {
        switch (priority) {
        case BitTorrent::FilePriority::Ignored:
        case BitTorrent::FilePriority::Normal:
        case BitTorrent::FilePriority::High:
        case BitTorrent::FilePriority::Maximum:
        case BitTorrent::FilePriority::Mixed:
            return true;
        default:
            return false;
        }
    }
}

```

but I get this compiler error:
> webui/api/torrentscontroller.cpp:570:10: error: ‘isValidFilePriority’ is not a member of ‘BitTorrent’"
239708260,9541,glassez,2018-12-07T06:47:14Z,"1. You should declare it in ""filepriority.h"" and then define in ""filepriority.cpp""
2. You have not use `static` with it. `static` declares functions with **internal linkage** (i.e. it can be referred to from all scopes in the *current translation unit* only). Actually anonymous namespaces are used for the same purposes currently. But you do want to use it outside of ""filepriority.cpp""! So you don't need it to be internally linked."
239979119,9541,Piccirello,2018-12-07T23:58:13Z,Removing the `static` keyword fixed it
239993001,9541,glassez,2018-12-08T04:20:56Z,"Oh, that `const` again... Please hide your paranoia from others."
240027178,9541,Chocobo1,2018-12-09T07:59:01Z,"@Piccirello 
Please remove the `const` here (header file) and we can merge."
240043813,9541,Piccirello,2018-12-09T16:34:28Z,@Chocobo1 Why just the header file? Possibly some C++ specifics I don't know.
240043939,9541,Piccirello,2018-12-09T16:38:28Z,@glassez how is this example any different than [this](https://github.com/qbittorrent/qBittorrent/pull/9799#discussion_r230601668)? The recommendations on passing by const value seem to be inconsistent. I only made this const because of that conversation.
240044289,9541,glassez,2018-12-09T16:50:09Z,">how is this example any different than this?

This has been mentioned many times (including in conversations with you).
It may make sense in function definition, but it is completely meaningless in the function declaration (moreover, it is misleading there)."
240083976,9541,Chocobo1,2018-12-10T04:51:18Z,"@Piccirello 
>It may make sense in function definition

The usual advantages of using `const`.

>but it is completely meaningless in the function declaration 

Because it is a local variable, `const` or not is not relevant to the users of the the function, so we leave it out."
240469383,9541,Piccirello,2018-12-11T04:21:31Z,Thanks for the explainer. I've pushed the change.
1133281696,18645,glassez,2023-03-12T16:07:56Z,"IIRC, you're only compressing backups, right? Then I would call it ""CompressBackups"". And `m_storeFileLoggerCompressBackups` accordingly."
1133283535,18645,glassez,2023-03-12T16:18:08Z,Wrong Coding Style. Use `app` instead.
1133284163,18645,glassez,2023-03-12T16:22:18Z,Why did you change it to use generic integer? I don't see enough reasons for that.
1133399952,18645,brvphoenix,2023-03-13T02:54:37Z,"> Why did you change it to use generic integer?

Because the `FileLogAgeType` is only used in `deleteOld` in fact and the underlying type `int` is used elsewhere. If you think this modification is unnecessary, I'll revert it."
1133400039,18645,brvphoenix,2023-03-13T02:54:50Z,OK.
1135451337,18645,glassez,2023-03-14T12:15:11Z,">If you think this modification is unnecessary, I'll revert it.

Yes, please.
FileLogAgeType is essentially not generic integer but enumerable type. So it's preferred to be implemented accordingly."
1137560220,18645,glassez,2023-03-15T18:12:10Z,FileLogAgeType 
1137563063,18645,glassez,2023-03-15T18:14:06Z,`const` is meaningless/confusing in declarations
1137570275,18645,glassez,2023-03-15T18:19:48Z,It would be more efficient to add such guards in appropriate FileLogger setters instead. SettingValue lookups value by string key among all the settings each time you access it. 
1137571251,18645,glassez,2023-03-15T18:20:46Z,"```suggestion
        m_fileLogger = new FileLogger(fileLoggerPath(), isFileLoggerBackup()
                , fileLoggerMaxSize(), isFileLoggerDeleteOld(), fileLoggerAge()
                , static_cast<FileLogger::FileLogAgeType>(fileLoggerAgeType())
                , isFileLoggerCompressBackups());
```"
1138350505,18645,brvphoenix,2023-03-16T09:21:42Z,"> It would be more efficient to add such guards in appropriate FileLogger setters instead.

Or use `CacheSettingValue` instead?
"
1138567907,18645,glassez,2023-03-16T12:20:59Z,"> Or use `CacheSettingValue` instead?

It is mostly intended for those settings that are read multiple times during regular runtime (i.e. when they aren't changed)."
1140441434,18645,brvphoenix,2023-03-17T16:19:37Z,"> It would be more efficient to add such guards in appropriate FileLogger setters instead.

Do you mean something like this?
``` 
FileLogger::setBackup(bool value, SettingValue<bool> &setting)
{
    if (value != m_backup)
    {
        m_backup = value;
        setting = value;
    }
}
```
"
1140613336,18645,glassez,2023-03-17T19:10:36Z,"> Do you mean something like this?

No, of course!
1. Just keep corresponding setters of Application as they were before (i.e. without any guards against setting values)
2. Don't add any guards in those FileLogger setters where you just assign value to variable but only if changing value immediately causes some more or less expensive logic to be executed."
1141372353,18645,brvphoenix,2023-03-19T14:09:46Z,Reverted.
1189813245,18645,glassez,2023-05-10T12:10:34Z,"```suggestion
    {
        m_fileLogger = new FileLogger(fileLoggerPath(), isFileLoggerBackup()
                , fileLoggerMaxSize(), isFileLoggerDeleteOld(), fileLoggerAge()
                , static_cast<FileLogger::FileLogAgeType>(fileLoggerAgeType())
                , isFileLoggerCompressBackups());
    }
```"
1189816179,18645,glassez,2023-05-10T12:11:19Z,"```suggestion
    {
        m_fileLogger = new FileLogger(fileLoggerPath(), isFileLoggerBackup()
                , fileLoggerMaxSize(), isFileLoggerDeleteOld(), fileLoggerAge()
                , static_cast<FileLogger::FileLogAgeType>(fileLoggerAgeType())
                , isFileLoggerCompressBackups());
    }
    else if (!value)
    {
        delete m_fileLogger;
    }
```"
1189817380,18645,glassez,2023-05-10T12:12:19Z,"```suggestion
        switch (ageType)
```"
1189840502,18645,glassez,2023-05-10T12:31:38Z,"```suggestion
        QFile source {before.data()};
        if (!source.open(QIODevice::ReadOnly))
        {
            msg = FileLogger::tr(""Can't open %1!"").arg(before.data());
            return false;
        }

        QFileInfo info {source};
        const QDateTime atime = info.lastRead();
        const QDateTime mtime = info.lastModified();
        // It seems the created time can't be modified on UNIX.
        const QDateTime ctime = info.birthTime();
        const QDateTime mctime = info.metadataChangeTime();
```"
1189843740,18645,glassez,2023-05-10T12:34:23Z,"```suggestion
            QFile dest {after.data()};
```"
1189845900,18645,glassez,2023-05-10T12:36:14Z,"You should avoid putting translations in Object if there is essentially real context exist:
```suggestion
            msg = FileLogger::tr(""Can't open %1!"").arg(before.data());
```
It should be applied in all the similar cases below."
1189848987,18645,glassez,2023-05-10T12:38:56Z,The function name must have a verb form (in the vast majority of cases). Just `compressBackupFile()` or similar.
1189851009,18645,glassez,2023-05-10T12:40:13Z,"```suggestion
    if (isObsolete(QFileInfo(m_path.data()), m_ageType, m_age))
```"
1189854240,18645,glassez,2023-05-10T12:42:54Z,"```suggestion
            if (!isObsolete(file, m_ageType, m_age))
            {
                skipCheck = true;
            }
```"
1189855773,18645,glassez,2023-05-10T12:44:05Z,"```suggestion
        if (oldName == newName)
            continue;

        if (!newName.exists())
        {
            Utils::Fs::renameFile(oldName, newName);
        }
```"
1229188462,18645,glassez,2023-06-14T08:03:56Z,"```suggestion
        QFileInfo info {before.data()};
```"
1229190899,18645,glassez,2023-06-14T08:05:50Z,Also I found `before` and `after` confusing. It's better to use something like `sourcePath` and `destPath`.
1239944087,18645,Chocobo1,2023-06-23T15:14:48Z,please use `Utils::IO::saveToFile`.
1239945206,18645,Chocobo1,2023-06-23T15:15:51Z,Please use `Utils::IO::readFile`.
1239953053,18645,Chocobo1,2023-06-23T15:23:31Z,"Just pointing out. Not sure what is the possible upper size limit of the log file, if the size is big (a few hundreds MB I guess) you are definitively going to see memory allocation failure reports coming in."
1239961096,18645,Chocobo1,2023-06-23T15:31:27Z,Also just pointing out (and wasn't looking closely at code). Compression operation is slow so it is very preferable use its own thread.
1239969143,18645,brvphoenix,2023-06-23T15:39:25Z,"I added a function to compress files by QDataStream. What do you think about this?
https://github.com/brvphoenix/qBittorrent/blob/529ce9178db16f3bf0af3ca8cb8e3180521998dc/src/base/utils/gzip.cpp#L44-L97"
1239999612,18645,Chocobo1,2023-06-23T16:08:39Z,"Streaming should be better. Although I'm not sure `QDataStream` is suitable here, AFAIK it is not a pure streaming interface and it will inject its own data/serialization to the stream. Also don't have time to comment on the code details.
"
1240179083,18645,glassez,2023-06-23T18:44:43Z,"> AFAIK it is not a pure streaming interface and it will inject its own data/serialization to the stream.

Used `readRawData()/writeRawData()` methods are intended for [Reading and Writing Raw Binary Data](https://doc.qt.io/qt-6/qdatastream.html#raw)."
1240212910,18645,glassez,2023-06-23T19:10:32Z,"> I added a function to compress files by QDataStream. What do you think about this? https://github.com/brvphoenix/qBittorrent/blob/529ce9178db16f3bf0af3ca8cb8e3180521998dc/src/base/utils/gzip.cpp#L44-L97

Could you provide `decompress()` counterpart too? I would like to test them."
1240224181,18645,glassez,2023-06-23T19:21:43Z,"Also I perceive `QDataStream` as some kind of auxiliary tool, and I would prefer to see `QIODevice` in the interface of `compress()`/`decompress()` methods."
1240653767,18645,brvphoenix,2023-06-24T09:16:22Z,Superseded by stream read.
1240658425,18645,brvphoenix,2023-06-24T09:24:55Z,"> Also I perceive `QDataStream` as some kind of auxiliary tool, and I would prefer to see `QIODevice` in the interface of `compress()`/`decompress()` methods.

The advantage of `QDataStream` is that it also be used to read from a byte array."
1240660215,18645,glassez,2023-06-24T09:28:10Z,There is `QBuffer` adaptor class to use `QByteArray` as `QIODevice`.
1240660348,18645,brvphoenix,2023-06-24T09:28:42Z,"> Could you provide decompress() counterpart too? I would like to test them.

Added."
1240842973,18645,Chocobo1,2023-06-24T15:08:34Z,"FYI, boost::iostream provides interface for gzip compression/decompression. It seems to be a good idea to utilize it (directly at where you need it) instead of creating our own generic streaming interface in utils/gzip.cpp
https://techoverflow.net/2020/01/13/how-to-gzip-compress-on-the-fly-in-c-using-boostiostreams/
https://www.boost.org/doc/libs/1_75_0/libs/iostreams/doc/classes/gzip.html#examples"
1240884903,18645,brvphoenix,2023-06-24T16:27:59Z,"This will introduce an additional dependency on boost-iostream. I think this issue can be discussed later. If necessary, we can implement `utils/gzip.cpp` with boost::iostream directly.
"
1240898184,18645,Chocobo1,2023-06-24T16:53:02Z,">This will introduce an additional dependency on boost-iostream. 

qbt already have dependency on boost.

Anyway, don't forget to modify/add test cases to [testutilsgzip.cpp](https://github.com/qbittorrent/qBittorrent/blob/master/test/testutilsgzip.cpp)."
1240899421,18645,glassez,2023-06-24T16:56:50Z,"> I think this issue can be discussed later.

:+1:"
1240899773,18645,glassez,2023-06-24T16:59:57Z,"> Anyway, don't forget to modify/add test cases to [testutilsgzip.cpp](https://github.com/qbittorrent/qBittorrent/blob/master/test/testutilsgzip.cpp).

Aren't the tests that already exist enough? They will use the new implementation indirectly anyway."
1241037363,18645,brvphoenix,2023-06-25T05:17:15Z,"> qbt already have dependency on boost.

In fact, qbt only depends on boost's headless libraries. If boost::iostream is used, `with-iostreams` should be set when compiling boost.



> > Anyway, don't forget to modify/add test cases to [testutilsgzip.cpp](https://github.com/qbittorrent/qBittorrent/blob/master/test/testutilsgzip.cpp).
> 
> Aren't the tests that already exist enough? They will use the new implementation indirectly anyway.

👍"
1241037390,18645,Chocobo1,2023-06-25T05:17:33Z,"Another concern. It seems Windows 10 doesn't natively support opening .gz files with GUI and at least 3rd-party app is required. So I would suggest you compress it to .zip files instead.

Note that windows 10 do support .gz files via native command line `tar` but I won't expect novice users to use it."
1241037620,18645,Chocobo1,2023-06-25T05:19:27Z,">Aren't the tests that already exist enough? They will use the new implementation indirectly anyway.

When testing (at least to public helper functions), you should treat the functions as black box and shouldn't assume its implementation. This PR introduce new public function so I expect test cases for it."
1241042799,18645,Chocobo1,2023-06-25T05:40:41Z,"I thought boost.iostreams was header-only and it isn't the case. So forget that idea.
https://www.boost.org/doc/libs/1_82_0/more/getting_started/windows.html#header-only-libraries"
1241095230,18645,glassez,2023-06-25T08:46:57Z,"> So I would suggest you compress it to .zip files instead.

Another dependency?
In any case, I would not consider this idea as a requirement. In other words, `Windows 10 doesn't natively support opening .gz files with GUI and at least 3rd-party app is required` does not seem to me a sufficient reason to reject this feature in its current form.
Adding support for `zip` archives is a separate issue (while `gzip` is already supported)."
1241144464,18645,Chocobo1,2023-06-25T11:31:44Z,">In any case, I would not consider this idea as a requirement. In other words, Windows 10 doesn't natively support opening .gz files with GUI and at least 3rd-party app is required does not seem to me a sufficient reason to reject this feature in its current form.

IMO it is bad user experience. Some novice user enabled compress log option (GUI doesn't give any information about the format) and now cannot deal with it without googling or installing other tools.

Anyway I've already raised my concern. Also since this option is off by default, I don't mind to turn a blind eye about it. Yet I would still hope to see that the GUI will inform the user about the format.

Offtopic: in linux world, there exist this tool: [logrotate](https://linux.die.net/man/8/logrotate) and it is prevalent. It seems to me that this PR does share part of the functionality with it (assuming logrotate can work with qbt logs) which more or less made me think that the point is moot for linux users.
"
1241146644,18645,glassez,2023-06-25T11:43:27Z,"> IMO it is bad user experience. Some novice user enabled compress log option (GUI doesn't give any information about the format) and now cannot deal with it without googling or installing other tools.

IMO, ""bad user experience"" is not the feature itself, but only ""GUI doesn't give any information about the format"". So...


> I would still hope to see that the GUI will inform the user about the format.

:+1:"
1241147258,18645,glassez,2023-06-25T11:46:38Z,"> in linux world, there exist this tool: [logrotate](https://linux.die.net/man/8/logrotate) and it is prevalent. It seems to me that this PR does share part of the functionality with it (assuming logrotate can work with qbt logs) which more or less made me think that the point is moot for linux users.

Well, this means that Linux users may (possibly) have an alternative to this built-in functionality of qBittorrent."
1241179516,18645,brvphoenix,2023-06-25T13:36:37Z,"> Offtopic: in linux world, there exist this tool: [logrotate](https://linux.die.net/man/8/logrotate) and it is prevalent.

If using logrotate, the location of the log file should be specified manually. This is inconvenient for portable mode. Besides, docker images may not provide logrotate. For qbittorrent-nox, if the location of the configuration file changes, the configuration of logrotate needs to be changed accordingly.

If using [zlib](https://github.com/madler/zlib/tree/master/contrib/minizip), the zip format support seems to be much more complicated than gzip. Perhaps it should be considered in another PR."
1241209802,18645,brvphoenix,2023-06-25T14:42:50Z,"> I would still hope to see that the GUI will inform the user about the format.

Add a tooltip.
https://github.com/qbittorrent/qBittorrent/blob/80bfb5153384d9cf7967ea1d980ca9957ccf5eb3/src/gui/optionsdialog.ui#L760-L762"
1241211999,18645,glassez,2023-06-25T14:49:18Z,"After reading such a statement, someone might think that the feature is not supported (not available) on Windows without 3rd-party tools."
1243117467,18645,Chocobo1,2023-06-27T04:10:21Z,"Please move it to its own function (`testCompressQIODevice`). Usually there is one-to-one mapping of private function in test class and the tested function.

Also you should thoroughly test it, for example:
* `Utils::Gzip::compress(QIODevice(), buf);`
* `Utils::Gzip::compress(buf, QIODevice());`
* `Utils::Gzip::compress(QIODevice(), QIODevice());`

To make promise that your function will handle invalid inputs gracefully without behaving bad.

The same applies to `decompress` too."
1243125742,18645,glassez,2023-06-27T04:26:05Z,"@Chocobo1 
It seems that you are too biased about this. We are not writing a public library of utilities. Maybe it would be worth limiting the requirements? Even in public interfaces, the responsibility for the correctness of parameters is often left to the caller, so as not to bring matters to the point of absurdity, when a function devotes 90% of logic to checking parameters instead of useful work."
1243133298,18645,Chocobo1,2023-06-27T04:41:06Z,">It seems that you are too biased about this.

Have you ever thought thoroughly of writing tests and their meanings? Or can you stop your bad habit of accusing?

>Maybe it would be worth limiting the requirements? 

In fact, I consider the suggested tests to be crucial, others I may not care. As you can see from qt docs, the underlying device won't be available all the time and therefore the function is expected to handle it correctly. At the very least, the function should not crash and these tests ***will*** ensure it.
I've seen too many instances of the developer being too much of himself and imagine his code is bulletproof and won't crash.
"
1243143826,18645,Chocobo1,2023-06-27T05:02:38Z,">Even in public interfaces, the responsibility for the correctness of parameters is often left to the caller, so as not to bring matters to the point of absurdity, when a function devotes 90% of logic to checking parameters instead of useful work.

Here is a counter example for you: https://github.com/qbittorrent/qBittorrent/blob/ad491652336e24f04be9c874acf5b338d96b492b/src/base/utils/gzip.cpp#L121-L122
Note that the tests didn't cover it..."
1243164539,18645,glassez,2023-06-27T05:37:10Z,"> can you stop your bad habit of accusing?

I'm not accusing anyone, and even more so I don't have such a habit.
>Have you ever thought thoroughly of writing tests and their meanings? 

Sure. They need to make sure that the function (still) works as expected. But isn't it obvious that you first need to decide on what is ""works as expected"" in each specific case? That's what I was talking about.
In this case, we could make an explicit separation of the input parameters into valid and invalid, and assign responsibility for this to the caller, and expect the function to work correctly only with valid parameters (so tests will follow only this expectation)."
1243321499,18645,glassez,2023-06-27T08:13:56Z,"> Here is a counter example for you

It's just an example for me, not a ""counter example"".
If `ok` parameter is purposely allowed to  be ""omitted"" (i.e. `nullptr`), then it is expected that function correctly works in both cases, either with `ok` exised or not. So this aspect should be tested.


> Note that the tests didn't cover it...

See. But after all, it is not covered by tests of the existing function `Utils::Gzip::compress (QByteArray, QByteArray, bool*)`, isn't it? So it became possible to make changes to the implementation containing such a bug, and this was missed by the tests.

But I definitely wouldn't expect passing null, uninitialized, not opened or opened in wrong mode `QIODevice` to be a valid use case. It can only exist if there is a logical error in the code. So it would be nice to first decide how to prevent such incorrect use, and only then do the tests. Judging by your statements, you propose to handle all errors (including logical ones) in the same way and approve this as expected behavior by the presence of appropriate tests. (At least it looks that way to me. If I'm wrong, just correct me.) IMO, it may make it harder to detect such logical errors if they appear in the future. Therefore, I would simply add assertions to all the preconditions, and I would cover by tests only the correctness of the main work of the function, provided that the parameters are acceptable."
1243398398,18645,Chocobo1,2023-06-27T09:07:48Z,">It's just an example for me, not a ""counter example"".
If ok parameter is purposely allowed to be ""omitted"" (i.e. nullptr), then it is expected that function correctly works in both cases, either with ok exised or not. So this aspect should be tested.

To be clear, I was using the example to make a point that the interface should really be tested properly and it isn't ""bring matters to the point of absurdity, when a function devotes 90% of logic to checking parameters instead of useful work."" as you [claimed](https://github.com/qbittorrent/qBittorrent/pull/18645#discussion_r1243125742). Even if such thing exists it probably means that interface is really important and needs to be tested.

>But I definitely wouldn't expect passing null, uninitialized, not opened or opened in wrong mode QIODevice to be a valid use case. 

Why make this assumption? Under this (IMO inappropriate) assumption you won't catch errors that could happen in the real world. For example the device is valid for some time but just closed before calling into the tested function. Or it can even be closed when executing the function.

>Judging by your statements, you propose to handle all errors (including logical ones) in the same way and approve this as expected behavior by the presence of appropriate tests. 

I was thinking of using `std::expected` to report the errors when I wrote the reply.

>IMO, it may make it harder to detect such logical errors if they appear in the future. Therefore, I would simply add assertions to all the preconditions, and I would cover by tests only the correctness of the main work of the function, provided that the parameters are acceptable.

The concern of ""harder to detect logical errors"" is valid. But using assert makes it untestable (and remember no test means no guarantee that the code segment will be correct, you are relying on mere self confidence which doesn't mean much). Throwing `std::logic_error` might be better since you can verify it with `QVERIFY_THROWS_EXCEPTION` and `QVERIFY_THROWS_NO_EXCEPTION`. Or perhaps `std::expected` can be utilized instead.

>we could make an explicit separation of the input parameters into valid and invalid, and assign responsibility for this to the caller, and expect the function to work correctly only with valid parameters (so tests will follow only this expectation).

I think you are only half correct about valid and invalid cases. The invalid cases are still important since you want the tested function to have a ""defined"" behavior when facing it. If invalid cases are not tested then you are basically saying the behavior is ""undefined"" which is no so great IMO. Therefore whenever possible, I would like to test it all even if ""defined"" behavior is crash, assertion or exception thrown, at least it is expected."
1243698597,18645,glassez,2023-06-27T13:01:45Z,"> Why make this assumption?

In order to simplify the code. And this is a widely used approach used everywhere (do you really not understand what I'm talking about?). The only question is whether it is acceptable in this particular case or not. That is, what in this case is cheaper, more reliable, etc. - to do the processing of all the possible invalid parameters inside a function, or to respect some contract about acceptable parameters at the point of calling this function? I'm not sure exactly what this case is, so I keep debating about it."
1243711598,18645,glassez,2023-06-27T13:10:36Z,"> The invalid cases are still important since you want the tested function to have a ""defined"" behavior when facing it.

No, I'm talking specifically about the case when the function declaratively has ""undefined"" behavior in the case of invalid parameters. So (I repeat again) the question is whether this approach is acceptable in this particular case or not."
1243722694,18645,glassez,2023-06-27T13:17:35Z,"> Throwing `std::logic_error` might be better since you can verify it with `QVERIFY_THROWS_EXCEPTION` and `QVERIFY_THROWS_NO_EXCEPTION`. Or perhaps `std::expected` can be utilized instead.

At least I would strongly disapprove to combine both of them as error handling of the same function."
1243752392,18645,glassez,2023-06-27T13:34:35Z,"> I was thinking of using `std::expected` to report the errors when I wrote the reply.

That's exactly what I thought. But it doesn't really matter which method of error handling is chosen. I feel it questionable to handle logical errors in the same way as normal runtime errors. Still, an error report like ""writing to the file failed because the file has read-only attribute"" makes sense for the user, but ""nullptr is an invalid value for some parameter"" - for the developer. Although, I may be mistaken, and this is quite normal."
1243789693,18645,brvphoenix,2023-06-27T13:54:07Z,"> * `Utils::Gzip::compress(QIODevice(), buf);`
> * `Utils::Gzip::compress(buf, QIODevice());`
> * `Utils::Gzip::compress(QIODevice(), QIODevice());`

`QIODevice is abstract and cannot be instantiated, but it is common to use the interface it defines to provide device-independent I/O features.`

Which derived class do you want to test? I don't think they will make much difference..."
1243834587,18645,brvphoenix,2023-06-27T14:20:37Z,"> After reading such a statement, someone might think that the feature is not supported (not available) on Windows without 3rd-party tools.

There should be no ambiguity now.
https://github.com/qbittorrent/qBittorrent/blob/9842428ea07ff9590ecc58009968a692e8eae7d7/src/gui/optionsdialog.ui#L756-L762"
1243859274,18645,glassez,2023-06-27T14:35:07Z,"> There should be no ambiguity now.

Tooltip looks good for me now. But I would change `Compress log files with gzip when backing up` with `Compress backup logs with gzip` to be consistent with other options about backups.

BTW, I think it's better to use `log backups` instead of `backup logs`."
1243939786,18645,brvphoenix,2023-06-27T15:23:24Z,"> Tooltip looks good for me now. But I would change `Compress log files with gzip when backing up` with `Compress backup logs with gzip` to be consistent with other options about backups.
> 
> BTW, I think it's better to use `log backups` instead of `backup logs`.

👌"
1244601398,18645,brvphoenix,2023-06-28T02:50:24Z,"@Chocobo1 
Anyway, I add tests for invalid inputs. In fact, if the I/O device is invalid or can't be read or written to, the function will fail at these lines.

https://github.com/qbittorrent/qBittorrent/blob/b1864039807c2fec702a6ead065db310f569fcfe/src/base/utils/gzip.cpp#L65-L66

https://github.com/qbittorrent/qBittorrent/blob/b1864039807c2fec702a6ead065db310f569fcfe/src/base/utils/gzip.cpp#L86"
1245582703,18645,Chocobo1,2023-06-28T18:04:28Z,"```suggestion
bool Utils::Gzip::compress(QIODevice &source, QIODevice &dest, const int level)
```"
1245587012,18645,Chocobo1,2023-06-28T18:09:17Z,"I would like to ask to not update this function (`QByteArray compress(const QByteArray &...)`) internals as I have plans to minimize the buffer copy operations. This function is in hot path for webapi responses so it would make sense to optimize it IMO.
"
1245595593,18645,Chocobo1,2023-06-28T18:18:49Z,please preserve this comment.
1245639428,18645,Chocobo1,2023-06-28T19:05:29Z,">The only question is whether it is acceptable in this particular case or not. That is, what in this case is cheaper, more reliable, etc. - to do the processing of all the possible invalid parameters inside a function, or to respect some contract about acceptable parameters at the point of calling this function? 

IMO if the function is local (reside in .cpp anonymous namespace or private function in some class) then it can be tailored, invalid parameters can be ignored or some preconditions/assertions can be made. However in our case here, the function is a bit more ""global"" so I would raise my expectation bar a bit higher. The (important) parameters should be properly checked and tested, since you cannot limit (or really know) which context it will reside.

>No, I'm talking specifically about the case when the function declaratively has ""undefined"" behavior in the case of invalid parameters. 

I don't understand. Why not try ""define"" it instead of leaving it ""undefined""? BTW depending on the context, intentionally leaving behavior undefined *might* lead to a software vulnerability...

>At least I would strongly disapprove to combine both of them as error handling of the same function.

Agree.

>Still, an error report like ""writing to the file failed because the file has read-only attribute"" makes sense for the user, but ""nullptr is an invalid value for some parameter"" - for the developer. 

Perhaps the errors that are interesting for the users can be made into error status/messages, and other errors that are only interesting for the developers could be made as assertions (or exceptions)? In our case `QIODevice`, since a stable condition is not guaranteed (such as a unstable network drive). The function utilizing `QIODevice` should report the error to its caller (or user) when it happens IMO.

@brvphoenix I would suggest to leave this ""error reporting"" work for another time as to avoid bogging down this PR.
"
1246187933,18645,Chocobo1,2023-06-29T06:50:50Z,"Please read line 46.
```suggestion
        QVERIFY(!compressedData_s1.empty());
```"
1246214299,18645,brvphoenix,2023-06-29T07:15:54Z,"> Please read line 46.

Fixed. Thank you."
1246245844,18645,brvphoenix,2023-06-29T07:42:55Z,Reverted.
1246246627,18645,brvphoenix,2023-06-29T07:43:35Z,Added.
1247537734,18645,Chocobo1,2023-06-30T07:33:54Z,"The `const` will not be in .h but in .cpp only.
```suggestion
    bool compress(QIODevice &source, QIODevice &dest, int level = 6);
```
"
412644687,12574,NotTsunami,2020-04-22T03:37:56Z,"I doubt maintainers are a fan of more things to maintain with versioning.

Why not:
`- [ ] I've verified that **the issue is not fixed and is reproducible** in the [latest version](https://www.qbittorrent.org/download.php)`"
412645374,12574,NotTsunami,2020-04-22T03:40:20Z,"Skipping contractions is probably better for the minimally English speaking crowd. Regardless, your contraction usage is inconsistent, line 26 doesn't use contractions while the rest of your cases do."
412645985,12574,NotTsunami,2020-04-22T03:42:12Z,Should the location of the settings file be mentioned if we're requiring it now?
412861012,12574,FranciscoPombal,2020-04-22T10:24:19Z,"Thanks, fixed"
412861176,12574,FranciscoPombal,2020-04-22T10:24:35Z,"Thanks, fixed."
412861707,12574,FranciscoPombal,2020-04-22T10:25:30Z,"That information is already present in the Wiki FAQ, which we assume the user has read before posting."
413982559,12574,LordNyriox,2020-04-23T17:22:25Z,"@FranciscoPombal:  FYI, not everyone on Windows will be using the official builds.  Prior to the addition of official 64-bit builds, I was relying on the (now outdated) [<https://github.com/Gelmir/qBittorrent/releases>] repository for my Windows builds. 

So perhaps… 

> If on Linux **or using unofficial builds**, 

…would work better? "
413986257,12574,glassez,2020-04-23T17:27:44Z,"I would remove ""If on Linux"" at all. I never remember what versions are used by official Windows/MacOS builds."
413986966,12574,FranciscoPombal,2020-04-23T17:28:40Z,"There is an ongoing effort to make ""official"" nightly releases more easily available already: https://github.com/qbittorrent/qBittorrent/issues/12357. But it will still take a little while. When the time comes, we can make that adjustment in a separate PR. Thanks for the reminder though."
589716754,12574,thalieht,2021-03-08T20:12:49Z,">and operating system **version**

Has there ever been an issue that was verified to be caused by a specific OS version? Unless you mean win 7 8 10 in which case ""version"" is redundant because it's always mentioned.

 >install method (installer, compiled from git, ...)

I would change that to something that would make the reporter mention it IF it's anything not standard. I wouldn't want to read in 95% of issues ""Installed from the official site""."
589719239,12574,thalieht,2021-03-08T20:17:16Z,"I would swap positions with
 ""What is the expected behavior"" (right above)"
589719404,12574,thalieht,2021-03-08T20:17:30Z,Maybe add https://github.com/qbittorrent/qBittorrent/discussions/categories/q-a?
589720856,12574,thalieht,2021-03-08T20:19:59Z,I don't think that's desirable. Not all PRs close something.
589931293,12574,Chocobo1,2021-03-09T04:25:08Z,wrong site
597653718,12574,xavier2k6,2021-03-19T12:53:27Z,"> Has there ever been an issue that was verified to be caused by a specific OS version?

Maybe not 100% by us directly **BUT** Builds 1903/1909 are notorious for HIGH CPU Usage & HIGH DPC Latency issues.

Also there's been issues with VPN's up to build 1909.

**Version** - would possibly be insignificant if Minimum OS Build is raised.....(Qt6 etc.)"
603598058,12574,sakkamade,2021-03-29T20:39:46Z,"I very much wonder that many, even if they _will_ look through thousands of issues, would be able to come across a similar one. 
In my opinion here should also/only be  enclosed link of [frequent issues](https://github.com/qbittorrent/qBittorrent/projects)."
639118058,12574,FranciscoPombal,2021-05-25T19:19:29Z,solved.
639118135,12574,FranciscoPombal,2021-05-25T19:19:37Z,resolved.
639118244,12574,FranciscoPombal,2021-05-25T19:19:50Z,resolved.
639118376,12574,FranciscoPombal,2021-05-25T19:20:05Z,resolved.
639118469,12574,FranciscoPombal,2021-05-25T19:20:13Z,resolved.
639118609,12574,FranciscoPombal,2021-05-25T19:20:26Z,resolved.
639146305,12574,thalieht,2021-05-25T20:06:05Z,"Why does this need verification? ""mandatory"" is already written in the corresponding section."
639146992,12574,thalieht,2021-05-25T20:07:21Z,Is it necessary to split them in 2 lines? I would just leave them as (type here). Same above for version and OS. 
639147032,12574,thalieht,2021-05-25T20:07:25Z,Link them to https://github.com/qbittorrent/qBittorrent/wiki/Frequently-Asked-Questions#Where_does_qBittorrent_save_its_settings?
639147111,12574,thalieht,2021-05-25T20:07:32Z,Is this necessary?
639323127,12574,FranciscoPombal,2021-05-26T00:37:19Z,"@thalieht I've seen people forget either one or the other quite often, in both cases. This way it's fullproof. Users usually also use 2 lines for this, so there is really no difference in already having it right there."
639324397,12574,FranciscoPombal,2021-05-26T00:41:11Z,"Indeed, probably not. Addressed by noting in the comments that the user is expected to fill out all `(type here)` fields."
639324472,12574,FranciscoPombal,2021-05-26T00:41:23Z,"thanks, fixed (in the corresponding checkbox, because stuff like this probably should not be part of a subsection title)."
639325060,12574,FranciscoPombal,2021-05-26T00:43:15Z,Fixed.
639335596,12574,sakkamade,2021-05-26T01:16:57Z,"Rather excessive, no? 
What about simply `e.g.: [x]` to 25th line?"
639336996,12574,sakkamade,2021-05-26T01:21:43Z,"```
1. (step one)
2. (step two)
3. (etc.)
```
So it might be easier for user to distinguish this section as more important."
639337431,12574,sakkamade,2021-05-26T01:23:07Z,Here too.
639705574,12574,FranciscoPombal,2021-05-26T13:04:56Z,"Thanks, fixed."
639705682,12574,FranciscoPombal,2021-05-26T13:05:05Z,"Thanks, fixed."
639705765,12574,FranciscoPombal,2021-05-26T13:05:12Z,"Thanks, fixed."
686397553,12574,thalieht,2021-08-10T23:58:42Z,"After reading a few issues, these ""qBittorrent version:"" and ""Operating system(s) where the issue occurs:"" are disrupting the flow of reading. I can't easily filter them to get to the juicy part and furthermore i think they are unnecessary. A simple ""(type here)"" is sufficient IMO.
Same goes for the section below."
1427713914,20118,glassez,2023-12-15T08:52:30Z,"We do not use `get` prefix (with rare exceptions)

```suggestion
        virtual QString lastExternalIPv6Address() const = 0;
        virtual QString lastExternalIPv4Address() const = 0;
```"
1427719814,20118,glassez,2023-12-15T08:58:21Z,"How about changing ""Detecting"" to ""N/A""?
Not all users have such large monitors as you, and among those who do, not all have the desire to stretch the qBittorrent window to the full screen and shake their heads left and right to view it."
1427726391,20118,glassez,2023-12-15T09:03:24Z,"```suggestion
    const QString lastExternalIPv4Address = BitTorrent::Session::instance()->getLastExternalIPv4Address();
    const QString lastExternalIPv6Address = BitTorrent::Session::instance()->getLastExternalIPv6Address();
```"
1427728271,20118,glassez,2023-12-15T09:05:14Z,"```suggestion
        if (!lastExternalIPv4Address.isEmpty() && !lastExternalIPv6Address.isEmpty())
        {
            addressText = tr(""External Addresses: %1, %2"")
                    .arg(BitTorrent::Session::instance()->getLastExternalIPv4Address())
                    .arg(BitTorrent::Session::instance()->getLastExternalIPv6Address());
        }
        else
        {
            addressText = tr(""External Address: %1%2"")
                    .arg(BitTorrent::Session::instance()->getLastExternalIPv4Address())
                    .arg(BitTorrent::Session::instance()->getLastExternalIPv6Address());
        }
```"
1427763930,20118,glassez,2023-12-15T09:39:23Z,"Of course, the IP address will still be longer. But in any case, all we can say about this is that the information about external address is currently ""not available"". IMO, ""Detecting"" looks speculative."
1428221443,20118,OdinVex,2023-12-15T17:08:17Z,"I saw some other 'get' naming conventions used throughout the project (and non-'get'). Some modern APIs I've come across have begun to use 'get', so I figured I'd go with what is more recently used. Your choice."
1428226725,20118,OdinVex,2023-12-15T17:13:24Z,"I don't know how that would differentiate between ""Not available...*yet*"" and other states such as failed, but I do agree about 'Detecting' sounding speculative. Perhaps more information should be communicated to the frontend from the means that qBittorrent uses to detect. ""Detecting/Detection failed"" etc? As for how much space is used...at this rate it's looking like you want just external addresses printed and nothing else which, quite frankly, leaves me baffled as to what the information would be."
1428228292,20118,OdinVex,2023-12-15T17:14:57Z,"Ah yeah, forgot about that. When the naming for that get function is settled I'll address as a single commit."
1428230999,20118,OdinVex,2023-12-15T17:16:42Z,"I forgot to format, my bad. When the naming for that get function is settled I'll address this one into a single commit as well."
1428695550,20118,Chocobo1,2023-12-16T05:17:29Z,"Doesn't look like you need to remove the `const`:
```suggestion
    const QString externalIP {toString(p->external_address)};
```"
1428696478,20118,Chocobo1,2023-12-16T05:21:39Z,"Wrong order, keys are sorted alphabetically here."
1428697083,20118,Chocobo1,2023-12-16T05:24:25Z,"```suggestion
        const last_external_address_v4 = serverState.last_external_address_v4;
        const last_external_address_v6 = serverState.last_external_address_v6;
```"
1428697234,20118,Chocobo1,2023-12-16T05:25:00Z,"```suggestion
        if ((last_external_address_v4 !== """") || (last_external_address_v6 !== """"))
        {
            if ((last_external_address_v4 !== """") && (last_external_address_v6 !== """"))
```"
1428697494,20118,Chocobo1,2023-12-16T05:26:00Z,copy paste error?
1428698907,20118,Chocobo1,2023-12-16T05:32:48Z,"Although unlikely, I would still suggest using other character for replacement specifier. Maybe `$1`, `$2`
See: https://en.wikipedia.org/wiki/IPv6_address#Scoped_literal_IPv6_addresses_(with_zone_index)"
1428701136,20118,OdinVex,2023-12-16T05:42:42Z,... I didn't see anything that required it.
1428701455,20118,OdinVex,2023-12-16T05:43:41Z,I thought I added that back with the latest commit.
1428702188,20118,OdinVex,2023-12-16T05:46:36Z,I followed the previous conventions used by qBittorrent for other variables used similarly.
1428703171,20118,OdinVex,2023-12-16T05:51:00Z,"Yeah. -_-; Too tired to address right now, will do later."
1428703991,20118,OdinVex,2023-12-16T05:54:54Z,"I didn't think any device was allowed to start with a number, so I didn't think there any chance of running into %[0-9] with %[0-9] being some interface. I could be wrong but I thought no device could start with [0-9]."
1428708433,20118,Chocobo1,2023-12-16T06:13:41Z,"Unfortunately, according to the linked article, Windows will use %[0-9] format:
>The latter (using an interface number) is the standard syntax on Microsoft Windows ..."
1428870495,20118,OdinVex,2023-12-16T17:39:25Z,"For the WebUI, I believe it should work to do this in reverse-order. Ex:

`$('externalAddresses').set('html', last_external_addresses.replace(""%2"", last_external_address_v6).replace(""%1"", last_external_address_v4));`

Similarly I think the GUI should do the same (reverse order) and always specifically replace *the first* occurrence only. Edit: I'm away from rig for the day."
1428877516,20118,OdinVex,2023-12-16T18:10:32Z,"Then again, some people use torrent clients on closed networks (so local IP address(es)), so maybe it can make sense."
1476477359,20118,OdinVex,2024-02-02T17:48:55Z,"I forgot to ask, does qB supply those interfacings or does qB just supply the IP address? If it's IP address then we don't need to account for which interface (unless interface is added to IP addresses). My only test case for this info has been Linux."
1477338690,20118,Chocobo1,2024-02-04T14:55:45Z,I can see the interface parts in qbt under Windows.
1477338997,20118,OdinVex,2024-02-04T14:57:21Z,"So the remote server that replies with an external address somehow knows which interface? It's a text reply from a GET 200. This is why I'm confused as to why. (The External Address is fetched from a remote server, not your local interface...) Edit: I'm possibly not clear enough. qBittorrent uses a remote server to determine your external IP address, it's a third-party API/request... This is not at all about getting the local IP address even if it is your external, this is about reporting ""what the world sees"" as your external address (which will probably be your local address if it's a VPN/VPS/local installation with a public IP address)."
1477349663,20118,Chocobo1,2024-02-04T16:03:12Z,">This is not at all about getting the local IP address even if it is your external, this is about reporting ""what the world sees"" as your external address (which will probably be your local address if it's a VPN/VPS/local installation with a public IP address).

This is why I said it is ""unlikely"" in my [first post](https://github.com/qbittorrent/qBittorrent/pull/20118/files#r1428698907). Surely using a different placeholder character that would avoid all potential problems isn't a bad idea or even difficult, no?"
1477350006,20118,OdinVex,2024-02-04T16:05:22Z,"I saw that but I think you might be confused. I certainly am with the reasoning behind this. qB does not ask Windows for anything at all. It literally makes a web request to a remote server (think ""what's my ip address"" in a search engine query) and returns the result. There's no way for the remote end to know what interface...it only sees the address. The data returned would never have an interface. And no, Qt doesn't support another parsing character besides percent."
1477350726,20118,Chocobo1,2024-02-04T16:09:47Z,">And no, Qt doesn't support another parsing character besides percent.

What Qt? Here we are talking about javascript."
1477352128,20118,OdinVex,2024-02-04T16:18:22Z,"""QBT_TR"" ... The backend is Qt and this part uses Qt parsing, for localization and such. Plus the code exists in Qt as well for the non-nox users."
1477365569,20118,Chocobo1,2024-02-04T16:32:50Z,">""QBT_TR"" ... The backend is Qt and this part uses Qt parsing, for localization and such.

That 'special annotation' has nothing to do with `%` or `$` or any character used for replacement purpose.

I'll just provide the code:
```js
last_external_addresses = 'QBT_TR(External Addresses: $1, $2)QBT_TR[CONTEXT=HttpServer]';
// ...
$('externalAddresses').set('html', last_external_addresses.replace(""$1"", last_external_address_v4).replace(""$2"", last_external_address_v6));
```
See the `.replace()`? here is the documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"
1477366368,20118,Chocobo1,2024-02-04T16:38:11Z,">Plus the code exists in Qt as well for the non-nox users.

I don't intend you to change that. GUI, WebUI have their own set of translation strings and here I'm only talking about WebUI."
1477367506,20118,OdinVex,2024-02-04T16:45:14Z,"\*facepalm\* My mind kept telling me ""QBT_TR"" was Qt's localization. I think I kept the string the same as Qt's to reduce how many duplicate translations of text were needed, old habit from single-UI development. I think your solution would work, yes. I don't have any of the src anymore since I went ahead to write a ViolentMonkey that gave me everything I needed."
1484230609,20118,glassez,2024-02-09T12:00:38Z,"> It literally makes a web request to a remote server (think ""what's my ip address"" in a search engine query) and returns the result.

`libtorrent` gets the external addresses from trackers and peers. This is clearly stated in the documentation (and I can confirm this based on an inspection of the `libtorrent` code)."
1484337632,20118,OdinVex,2024-02-09T13:46:23Z,"I must've been thinking about another client then. Still, there isn't any way for a peer or tracker to know which interface the client is using, so the entire point seems moot."
1484376540,20118,glassez,2024-02-09T14:13:53Z,"> Still, there isn't any way for a peer or tracker to know which interface the client is using,

Sorry, I don't know much about IPv6. What exactly are you talking about when you mention the interface? About the zone identifier, e.g. `%eth0`?"
1484402773,20118,OdinVex,2024-02-09T14:33:34Z,"Somewhere on this long thread someone mentioned something about not using `%` in Qt API calls because the IPv6 address might have the zone identifier reported and it'd break it but they're assuming that qBittorrent includes that information...when it gets that address from a remote server (peer/tracker/site). The remote endpoint wouldn't have a clue about which interface qBittorrent is using and won't report that. Edit: There was also suggestion around modifying the JavaScript implementation of that string, I can't remember what it was. I've got too much to do and qBittorrent isn't a high priority. The initial src offering was fine but there's no way to please everyone, so I've stuck to my ViolentMonkey script which does exactly what I want.

Edit: Too long a thread, unable to search and follow it anymore hardly."
1485592645,20118,glassez,2024-02-11T13:13:56Z,"> the IPv6 address might have the zone identifier reported

IIRC, Zone ID is ""locally significant"" (enables us to define out which interface we want to send some traffic) and there is no point to send it to remote host as part if its ""external address"". But we still can't be sure that it isn't sent in such a way (with Zone ID) so the question is how is it handled by libtorrent, i.e. can it provide we ""external address"" that mistakenly contains such Zone ID."
1485592930,20118,OdinVex,2024-02-11T13:15:54Z,"Someone familiar with libtorrent's API should weigh in. I resorted to a VM script, so I'm fine and qBittorrent can do with this PR as they want."
141928986,7522,Chocobo1,2017-09-29T17:56:55Z,"I hope this comment (and the ones below) could stay (here and in conf.pri.*).
For me it's easier to track which defines belongs to whom.
"
141930268,7522,Chocobo1,2017-09-29T18:02:40Z,"Not related to this PR: I find these comments (Point this to ...) somewhat redundant.
IMO just one at the top saying `Point to the include folder` and another below `Point to the lib folder` is enough."
141930847,7522,glassez,2017-09-29T18:05:31Z,Isn't it obvious that the definition like BOOST_* belongs to Boost?
141931484,7522,zeule,2017-09-29T18:08:26Z,"This and the next files encourage to install each library into its own directory. I have no idea what are the advantages of this method, but it is certainly more complicated than installing everything into a single directory. Why should we ""advertise"" the complicated approach? What are the advantages? "
141931584,7522,Chocobo1,2017-09-29T18:08:55Z,"yes, I think either there is a comment for each lib or an empty line separating each lib (in conf.pri.*)."
141931798,7522,zeule,2017-09-29T18:10:02Z,Maybe we can again discuss dropping the XP support?
141932074,7522,zeule,2017-09-29T18:11:08Z,This was said already ten lines earlier.
141932221,7522,zeule,2017-09-29T18:11:51Z,Duplicates too.
141932359,7522,zeule,2017-09-29T18:12:34Z,Doesn't boost use automatic linking on MSVC? 
141932731,7522,zeule,2017-09-29T18:14:13Z,This and a few lines below duplicate lines 35 -- 39
141932994,7522,Chocobo1,2017-09-29T18:15:20Z,"for me, **iff** it doesn't trade off something & it's easy to support it, I won't bother."
141937594,7522,glassez,2017-09-29T18:35:18Z,"Don't try to turn Windows into Unix :)
On Windows everything usually installs into separated directory."
141937975,7522,glassez,2017-09-29T18:37:08Z,Oops... I'll remove duplicates.
141938200,7522,glassez,2017-09-29T18:38:08Z,"As I recall, I had problems with it earlier."
141938468,7522,glassez,2017-09-29T18:39:31Z,Ok.
141940337,7522,zeule,2017-09-29T18:47:46Z,What is the purpose of `BOOST_SYSTEM_STATIC_LINK=1` above?
141999290,7522,glassez,2017-09-30T06:17:34Z,"IIRC, currently build-time support mostly needed. So it's @sledgehammer999 headache... Although, as I recall, we still have some code associated with the XP support. In any case, I'm not against it as long as it does not impede the further development of the project."
141999321,7522,glassez,2017-09-30T06:20:29Z,">What is the purpose of BOOST_SYSTEM_STATIC_LINK=1 above?

I don't know exactly. It's something to do with static linking, so personally I don't use it in my configuration (because of dynamic linking there)."
141999811,7522,glassez,2017-09-30T06:52:19Z,">Doesn't boost use automatic linking on MSVC?

I'll try it later."
142000414,7522,glassez,2017-09-30T07:26:16Z,"Well, for some reason `BOOST_ALL_NO_LIB` is used to prevent auto-linking. I've moved it to the user config example file so somebody can use auto-linking.
BTW, boost isn't support Visual Studio 2017 for now so it can't auto-link libraries build with this compiler version."
142001958,7522,zeule,2017-09-30T08:56:15Z,RC_0_16? Are you sure?
142001965,7522,zeule,2017-09-30T08:56:34Z,Same here.
142001978,7522,zeule,2017-09-30T08:57:27Z,"Please change the defaults because this PR will be merged in 3.4, which will b built with libtorrent 1.1 by default."
142002019,7522,zeule,2017-09-30T09:00:56Z,"This controls dynamic linking. Please, move it to the boost LIBS section and add a comment explaining that either explicit library names can be given together with `BOOST_ALL_NO_LIB` definition, or library names can be controlled via this definition."
142002033,7522,zeule,2017-09-30T09:01:58Z,1.1 is the default for 3.4. Please uncomment the next line and change the comment appropriately.
142002062,7522,zeule,2017-09-30T09:03:24Z,Why does this template file list not all required boost librariees?
142002290,7522,glassez,2017-09-30T09:17:42Z,"I just moved this (yes, yes, outdated) code...
Of course, I can update it incidentally if you want."
142002307,7522,glassez,2017-09-30T09:19:05Z,OK.
142002347,7522,glassez,2017-09-30T09:21:49Z,OK.
142002668,7522,glassez,2017-09-30T09:38:47Z,"What other libraries are required?
AFAIK, boost.system is only directly required boost library.
In my config I also have the line for boost.datetime (compilation fails without it). Some other libraries (chrono, filesystem, random, thread) are also linked indirectly. I have not delved much, why is it..."
142002836,7522,glassez,2017-09-30T09:51:06Z,I think we can omit this definition since it is default: http://www.boost.org/doc/libs/1_65_1/boost/system/config.hpp
142007526,7522,Chocobo1,2017-09-30T14:43:49Z,"nitpick though, `libtorrent` in place of `RC_1_1` is more clear.
Also I would use `boost` in place of `boost_1_64_0`.
"
142007559,7522,Chocobo1,2017-09-30T14:45:06Z,`-LC:/qBittorrent/RC_1_1/lib` ?
142007590,7522,Chocobo1,2017-09-30T14:46:14Z,"the capitalized Z bothers me...
These are just some changes I would do, you can decide yourself."
142009871,7522,silverqx,2017-09-30T16:40:39Z,"When I have enabled this with libtorrent 1.1.4, qbt crashes during strat."
142011092,7522,sledgehammer999,2017-09-30T17:31:55Z,"Guys I have delved into this and see my patch and discussion here: https://github.com/arvidn/libtorrent/pull/2321

Short summary: If we're in c++11 mode only boost.system is needed. However, autotools/bjam doesn't reflect that. But if we ommit them during qbt linking it does work.
PS: I assume libtorrent's cmake is also broken."
142011160,7522,sledgehammer999,2017-09-30T17:33:49Z,"If we install under same base dir we have:
`C:/qBittorrent/include` <--- libtorrent and other ""normal libs""
`C:/qBittorrent/include/boost_1_64_0` <---- boost includes

But yeah, removing version info is better imo"
142011595,7522,silverqx,2017-09-30T17:55:27Z,"This are mandatory system libraries, can be moved to winconf.pri, with mingw system libraries too and use condition, like:
```js
win32-g++* {
    LIBS += libadvapi32 libshell32 libuser32 libole32 libpowrprof
    LIBS += libcrypto libssl libwsock32 libws2_32 libz libiconv
}
win32-msvc* {
    LIBS += advapi32.lib shell32.lib crypt32.lib User32.lib ole32.lib PowrProf.lib
}
```

Or if I think about that, they can be moved all to winconf.pri, here can be problem, that openssl 1.1 has other names for library files.
Or libeay32.lib and ssleay32.lib can stay in example conf.pri.msvc"
142012333,7522,glassez,2017-09-30T18:36:09Z,"Ok, good idea. Done."
142012341,7522,glassez,2017-09-30T18:36:28Z,Of course. Done.
142012348,7522,glassez,2017-09-30T18:36:48Z,Fixed.
142012401,7522,glassez,2017-09-30T18:39:11Z,">libeay32.lib and ssleay32.lib can stay in example

I think Yes."
142012469,7522,glassez,2017-09-30T18:44:01Z,"Both libtorrent and qBittorrent should be built with this flag enabled (or disabled).
I'll disable it here by default and put appropriate comment."
142019086,7522,sledgehammer999,2017-10-01T02:19:42Z,"The boost.filesystem and boost.thread aren't needed in either branch.
They are leftover dependencies from pre-RC_0_16 era. I didn't bother to update mingw conf in the repo."
142025317,7522,glassez,2017-10-01T09:45:15Z,Ok. Fixed.
142025488,7522,glassez,2017-10-01T09:53:59Z,"I'm confused by this line.
Isn't it should be `CONFIG(release, debug|release)`?"
142025624,7522,zeule,2017-10-01T10:04:50Z,"""for using"" or ""to use"""
142025644,7522,zeule,2017-10-01T10:06:04Z,"""this"" in each line is unneeded, IMO. "
142026041,7522,silverqx,2017-10-01T10:31:31Z,"You can simply try it, put `message(im in)` into this block, i tried it and that block is doing nothing, is executed in debug and in release too.

Anyway, `QMAKE_CXXFLAGS_RELEASE += -Zi` this flag is used only in release build, so it doesn't matter.
Question is, if we want to generate debug info for debug and release builds, it is described [here](https://docs.microsoft.com/en-us/cpp/build/reference/debug-generate-debug-info)

We have to options, call it like this, without the `release {` block:
```
QMAKE_CXXFLAGS_RELEASE += -Zi
QMAKE_LFLAGS += ""/DEBUG""
```

Or:
```
QMAKE_CXXFLAGS_RELEASE += -Zi
QMAKE_LFLAGS_RELEASE += ""/DEBUG""
```

And here is the scope syntax http://doc.qt.io/qt-5/qmake-language.html#scopes I think that author of this `release {` block, intended to run this block only in release builds"
142026278,7522,silverqx,2017-10-01T10:43:05Z,"This `release {` block was added by @sledgehammer999 in `git show 1f0d4ce871292199b4c1ea082ef14f27a96fc1ba`, this block was intended to run only in release build ( by comments ), I checked it in deepgit :), but @sledgehammer999 is more relevant to tell... :)"
142056784,7522,Chocobo1,2017-10-02T04:33:14Z,"conf.pri doesn't exist by default right?
If that so, then it might be better to:
```
exists(conf.pri) {
  // ....
}
else {    // not sure this will work 
  error(""FAILED: conf.pri does not exist\n"")
  error(""See an example configuration in conf.pri.windows"")
}
```"
142056912,7522,Chocobo1,2017-10-02T04:36:17Z,why don't you use `win32-g++* {} else {}` here?
142057080,7522,Chocobo1,2017-10-02T04:39:49Z,"or both `win32-msvc*`, `win32-g++*`..."
142057449,7522,glassez,2017-10-02T04:48:23Z,This is just example config. User will edit it and remove unneeded lines.
142057515,7522,glassez,2017-10-02T04:50:15Z,I thought about it. Need to try...
142057911,7522,Chocobo1,2017-10-02T04:59:49Z,and what about adding `conf.pri` to .gitignore ? 
142058115,7522,Chocobo1,2017-10-02T05:04:22Z,"It's clearer for me to have `win32-<compiler> {}` block, so I know immediately where I need to modify, just saying.
(not a change request)
"
142058586,7522,glassez,2017-10-02T05:12:56Z,It's already there.
142058667,7522,glassez,2017-10-02T05:14:29Z,Really I would have only one example branch.
142106797,7522,glassez,2017-10-02T10:47:49Z,Ok. Fixed.
142106835,7522,glassez,2017-10-02T10:48:03Z,Removed.
142109681,7522,glassez,2017-10-02T11:01:24Z,Done.
142139484,7522,Chocobo1,2017-10-02T13:33:20Z,"no need for this comment.
tested, it works as intended."
142163427,7522,glassez,2017-10-02T14:59:20Z,">no need for this comment.

Sure.
Copy-Paste issue..."
142172045,7522,glassez,2017-10-02T15:28:16Z,"QMAKE_CXXFLAGS_RELEASE, QMAKE_LFLAGS_RELEASE used now instead of `release` scope."
142177981,7522,Chocobo1,2017-10-02T15:48:15Z,Wouldn't using `QMAKE_LFLAGS` here more suitable? since we always want debug info.
142178124,7522,Chocobo1,2017-10-02T15:48:46Z,both line can be collapsed to `QMAKE_CXXFLAGS`
142178165,7522,Chocobo1,2017-10-02T15:48:56Z,both line can be collapsed to `QMAKE_CXXFLAGS`
142178732,7522,Chocobo1,2017-10-02T15:50:49Z,would use `win32-msvc*` here
142178937,7522,Chocobo1,2017-10-02T15:51:34Z,"would use `win32-msvc*` here...

Overall it's pretty good, if you don't wish to change anymore, I'll give my approval."
142444485,7522,silverqx,2017-10-03T15:56:34Z,"`built with this flag defined`, do not understand this line"
142451402,7522,glassez,2017-10-03T16:22:46Z,"This line is just a continuation of the previous one.
This flag should be defined if you link with libtorrent compiled with this flag defined."
142478746,7522,silverqx,2017-10-03T18:09:38Z,"ohh yes, got it thx"
18224500,1984,Gelmir,2014-09-30T15:28:36Z,"`WINVER` is detected/defined during compile time, don't use it. Just rely on `GetProcAddress` to ensure that function is present in the library.
"
18224739,1984,Gelmir,2014-09-30T15:31:27Z,"Why Qt5-only restriction? If `installNativeEventFilter` only works in Qt5 maybe we can just ignore windows native events altogether and always defer shutdown from qbtsession destructor?
"
18241569,1984,paolo-sz,2014-09-30T19:40:28Z,"> Why Qt5-only restriction?

Well, first of all I wanted to be as much conservative as possible avoiding to inject code which I would not been able to test.
In second instance because I was not completely sure (I only made a fast search) QAbstractNativeEventFilter and installNativeEventFilter were fully supported on Qt prior to 5.
Now I googled better and I understand QAbstractNativeEventFilter is supported while installNativeEventFilter is not supported (If I understand correctly the Qt documentation, I need to reimplement QCoreApplication::winEventFilter instead).

> If installNativeEventFilter only works in Qt5 maybe we can just ignore windows native events altogether and always defer shutdown from qbtsession destructor?

No we cannot. I tried that way but I found it is only working when you shutdown just after closing qbt. It doesn't works if you shutdown without closing qbt.
I will try to write down the two implementations for 5.x and 4.x (7 or 8)...
"
18241861,1984,paolo-sz,2014-09-30T19:45:33Z,"This is exactly the way I would like to follow too. But, instead to rely directly on GetProcAddress success, I would like to implement a specific check using GetVersion fuction or something similar. This, at least, should avoid a failure debug message where it is not a real failure.
"
25558602,1984,glassez,2015-02-28T16:12:47Z,"Explicitly use Unicode version of WinAPI functions and wchar_t string constants with it (eg. GetModuleHandleW(L""User32.dll"") and so on).
"
25558615,1984,glassez,2015-02-28T16:14:57Z,"Use simple 0 as null-pointer constant.
"
25558639,1984,glassez,2015-02-28T16:17:42Z,"Use `true` and `false` as bool constants (TRUE and FALSE is of type int).
"
25558655,1984,glassez,2015-02-28T16:20:01Z,"From Qt docs:

> You should not exit the application within this signal. Instead, the session manager may or may not do this afterwards, depending on the context.
"
25558827,1984,sledgehammer999,2015-02-28T16:41:55Z,"better do `if (!shutdownBRCreate)`
"
25559755,1984,sledgehammer999,2015-02-28T18:20:56Z,"Can you give a screenshot of this situation? I cannot understand on which dialog you are refering to.
"
25589543,1984,paolo-sz,2015-03-02T10:39:17Z,"After a few seconds you have chosen to shutdown/log-off, a dialog with a progress bar appears, if you wait the progress bar to complete, another dialog appears offering you to ""end now"" or ""cancel"" the shutdown. I'm referring to this latest dialog (here is the screenshot)
![qbt_cancel_shutdown_screenshot](https://cloud.githubusercontent.com/assets/7062844/6439169/7bc640ce-c0d0-11e4-846e-75c2d3386d2e.jpg)

without this PR the ""end now"" and ""cancel"" button have exactly the same behavior: suddenly kill the application.
"
503008062,13498,NotTsunami,2020-10-12T02:28:39Z,This should be moved into the prior #ifndef DISABLE_GUI check
503008223,13498,NotTsunami,2020-10-12T02:29:26Z,Also needs to be guarded
503008529,13498,NotTsunami,2020-10-12T02:30:57Z,"The old !(params.noSplash || Preferences::instance()->isSplashScreenDisabled()) check is removed entirely, so splash screen is displayed regardless of preferences, as xavier mentioned."
503356959,13498,glassez,2020-10-12T15:02:43Z,https://github.com/qbittorrent/qBittorrent/pull/13498#issuecomment-706839330
61680155,5195,Chocobo1,2016-05-01T05:52:13Z,"is it possible to use Qt's hash here?
"
61680297,5195,Chocobo1,2016-05-01T06:05:58Z,"if I read correctly, this statement could be simplified:

``` c++
QHash<int, QString> importedFeedUrls;  // or QMap
// ...
QStringList urls = importedFeedUrls.values()
```

so you won't need to include `<functional>`
"
61690404,5195,zeule,2016-05-01T18:01:13Z,"``` C++
bool  success = selectedFilter == QBITTORRENT_RULES ?  m_editableRuleList->unserialize(load_path) : importFromUTorrent(load_path);
```

?
"
61721347,5195,glassez,2016-05-02T09:49:27Z,"Will be very readable!!! (I hope you understand that I don't think so)
"
61721393,5195,glassez,2016-05-02T09:50:10Z,"You save the lines?
"
61723471,5195,zeule,2016-05-02T10:16:11Z,"> Will be very readable!!!

Indeed.

>  (I hope you understand that I don't think so)

How should I know?

> You save the lines?

With `if`: dangling variable declaration, `= false` is meaningless, then when one  starts to read the `if` construction it's impossible to predict immediately what is inside. Frome the other hand, my one-liner shows from the very beginning that its is an initialisation, and that value depends on a condition. What functions are called to get the values is not so important. And, if you like, it can be written, for instance, as follows:

``` C++
 bool  success = selectedFilter == QBITTORRENT_RULES ?  
                 m_editableRuleList->unserialize(load_path) : 
                 importFromUTorrent(load_path);
```

So I propose not to break declaration and initialisation.
"
62428944,5195,glassez,2016-05-08T08:41:02Z,"Why do you remove this assertion?
"
62428954,5195,glassez,2016-05-08T08:42:02Z,"Group this (and .cpp) with other RSS files.
"
62428979,5195,glassez,2016-05-08T08:44:07Z,"We use QBT_USES_QT5 instead of explicit version check.
"
62429006,5195,glassez,2016-05-08T08:46:43Z,"Since this file is in ""base/rss"" directory you should omit it in include statements.
"
62433655,5195,mgziminsky,2016-05-08T15:27:10Z,"Because it seemed unnecessary and gets triggered in certain cases with my changes. The logic right below it is already wrapped in the same condition, so having the assert as well just reduces the usefulness of this function.
"
62433665,5195,mgziminsky,2016-05-08T15:28:03Z,"I can, but why? This is a QtCreator project file, what's the point in managing it by hand?
"
62434293,5195,glassez,2016-05-08T16:12:46Z,"But we should not have two files (feeds or folders) with the same ID here!
I have not yet checked your changes completely but I still think it looks like a mistake.
"
62434308,5195,glassez,2016-05-08T16:14:21Z,"It's **qmake** project file! We manage this in different ways, and often manually.
"
62434331,5195,mgziminsky,2016-05-08T16:16:32Z,"If you call this with an existing item, the if statement right below it will prevent it from being added, resulting in the function call being a no-op. IMO, that is the correct behavior, and what I would expect to happen. The fact that it causes a crash in debug mode I think is pointless. If you add an item to a Set that already has the item, it doesn't cause the program to crash, it just silently ignores it. It's the same idea here.
"
62434430,5195,glassez,2016-05-08T16:23:31Z,"> If you add an item to a Set that already has the item, it doesn't cause the program to crash, it just silently ignores it. It's the same idea here.

It is a good idea. But are you sure that the caller is consistent?
"
62434541,5195,mgziminsky,2016-05-08T16:35:06Z,"Consistent in what way? Looking at all usages of the function, I can at least say that none of them actually make use of the returned boolean, they all just blindly add. 

While looking at the usages though, I did find a couple places in rss_imp I missed updating when I created the addFeed helper. So fixing those may also fix the cases that were triggering the assertion. Even so though I still believe it would be better off removed.
"
62434717,5195,glassez,2016-05-08T16:48:37Z,"I only remind you that you have to carefully check everything.
"
62475425,5195,zeule,2016-05-09T10:01:40Z,"For example, when resolving a merge conflict.
"
62661212,5195,glassez,2016-05-10T12:24:16Z,"delete space before `ui->listRules->count()`.
"
62677677,5195,Chocobo1,2016-05-10T14:09:31Z,"You should prepend a license.
"
62677722,5195,Chocobo1,2016-05-10T14:09:47Z,"and a license here too.
"
62887177,5195,glassez,2016-05-11T17:09:31Z,"loadPath
"
62943398,5195,mgziminsky,2016-05-11T23:21:09Z,"I assume you want me to fix `save_path` a few lines up as well then?

I don't mind making these changes, but I'd appreciate it if somebody would give me a single comprehensive review so that I don't have to keep pushing these small commits every couple days to fix style issues that were introduced by somebody else.
"
62944446,5195,zeule,2016-05-11T23:30:44Z,"There is no comprehensive explanation, but you can refer [here](https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md) and remember that @glassez insists on correcting every line you touch :)
"
62946304,5195,mgziminsky,2016-05-11T23:50:40Z,"I've read the style guide, I was just trying to minimize my changes to existing code except where absolutely necessary. If the your policy is to fix the style of anything you have to touch, I'll make another pass over my changes and cleanup any pre-existing style issues as well.

Before I do another push though, does anybody have additional non-style related concerns? I'd like to address all remaining issues with my next push if possible.
"
62966385,5195,glassez,2016-05-12T05:22:46Z,"> does anybody have additional non-style related concerns?

Yes. I will comment ASAP (when I have some spare time).
"
63016395,5195,zeule,2016-05-12T13:09:33Z,"Please please change those to raw literals!
"
63016958,5195,zeule,2016-05-12T13:13:01Z,"Why do you need the test here?
"
63021536,5195,zeule,2016-05-12T13:42:17Z,"""qBittorrent"" what? ""qBittorrent rules""? Same question to the constants in  `AutomatedRssDownloader::on_importBtn_clicked()`
"
63028089,5195,mgziminsky,2016-05-12T14:18:21Z,"Change what exactly? Sorry, I don't understand what you're asking for.
"
63028881,5195,glassez,2016-05-12T14:22:39Z,"``` c++
R""((?<=^|\|)\*+|\*+(?=$|\|))""
```
"
63029006,5195,zeule,2016-05-12T14:23:21Z,"`(?<=^|\\|)\\*+|\\*+(?=$|\\|)` →`R""((?<=^|\|)\*+|\*+(?=$|\|))""`
"
63029107,5195,mgziminsky,2016-05-12T14:23:58Z,"Turns out I don't. I had thought I needed it in my original implementation of this class, and forgot to remove it after refactoring. It's been a while since I've done C++, I forgot it was safe to delete null pointers.
"
63029378,5195,glassez,2016-05-12T14:25:36Z,"@evsh 
`(?<=^|\\|)\\*+|\\*+(?=$|\\|)` →`R""((?<=^|\|)\*+|\*+(?=$|\|))""`
"
63029595,5195,glassez,2016-05-12T14:26:53Z,"@evsh Find 10 differences! Just kidding, of course, only one is.
"
63029616,5195,mgziminsky,2016-05-12T14:27:00Z,"Oh, well that's convenient. Thanks
"
63276027,5195,glassez,2016-05-14T13:13:11Z,"You should use anonymous namespace here.
"
65862390,5195,glassez,2016-06-06T09:39:34Z,"Method definitions aren't allowed in header files
"
65862701,5195,glassez,2016-06-06T09:41:26Z,"``` c++
{
}
```
"
65863064,5195,glassez,2016-06-06T09:43:31Z,"``` c++
if (m_manager)
    m_manager->forwardFeedIconChanged(m_url, m_icon);
```
"
65863153,5195,glassez,2016-06-06T09:44:13Z,"Coding Guidelines par. 2b
"
65863413,5195,glassez,2016-06-06T09:46:02Z,"IMO, it's better to leave only one constructor here (with default second param):

``` c++
explicit Feed(const QString &url, Manager *manager = nullptr);
```
"
65863674,5195,glassez,2016-06-06T09:47:55Z,"``` c++
int POSTPONE_OPTS[] = {0, 0, 0, 1, 2, 3, 4, 7, 14, 21, 30};
```

Coding Guidelines par. 1d
"
65863887,5195,glassez,2016-06-06T09:48:57Z,"Break these `if`s.
"
65863922,5195,glassez,2016-06-06T09:49:18Z,"``` c++
{
}
```
"
65864279,5195,glassez,2016-06-06T09:51:58Z,"Remove this extra `private:`. Use only one blank line between methods and fields (variables).
"
65864415,5195,glassez,2016-06-06T09:52:53Z,"``` c++
#include ""base/rss/utorrentrssdata.h""
```
"
65864543,5195,glassez,2016-06-06T09:54:05Z,"Use our `Utils::Fs::toNativePath()` instead.
"
65864591,5195,glassez,2016-06-06T09:54:26Z,"Change to camelCase.
"
65864759,5195,glassez,2016-06-06T09:55:43Z,"``` c++
if (Rss::ManagerPtr manager = m_manager.toStrongRef()) {
```
"
65864807,5195,glassez,2016-06-06T09:56:10Z,"``` c++
for (const Rss::FeedPtr &feed : manager->rootFolder()->getAllFeeds()) {
```
"
65864848,5195,glassez,2016-06-06T09:56:31Z,"``` c++
item->setFlags(item->flags() | Qt::ItemIsUserCheckable);
```
"
65865008,5195,glassez,2016-06-06T09:57:48Z,"``` c++
for (const Rss::FeedPtr &feed : feeds) {
```
"
65865090,5195,glassez,2016-06-06T09:58:26Z,"``` c++
if (!rssParent)
    rssParent = m_rssManager->rootFolder();
```
"
65987227,5195,mgziminsky,2016-06-06T23:25:24Z,"per 1a, empty bodies are {}. Does that not apply to constructors? or only apply when on a single line?

Not trying to argue, just asking.
"
65999775,5195,mgziminsky,2016-06-07T01:59:57Z,"This one was intentional. I'll change it if you insist, but I find it significantly harder to read the other way.
"
66014160,5195,glassez,2016-06-07T06:02:20Z,"> or only apply when on a single line?

Yes.
We force multiline for constructors with initialization list and therefore we split its body braces.
"
66014462,5195,glassez,2016-06-07T06:07:04Z,"I just mean:

``` c++
if (quality != QUALITY_ALL) {
    if (quality & QUALITY_480p)
        qualityList << ""480p"";
    if (quality & QUALITY_480p)
        qualityList << ""480p"";
    if (quality & QUALITY_720p)
        qualityList << ""720p"";
    if (quality & QUALITY_1080i)
        qualityList << ""1080i"";
    if (quality & QUALITY_1080p)
        qualityList << ""1080p"";
}
```

Personally, I prefer to have it in one line in a larger number of cases, but the qBittorrent coding style rules restricts it stronger.
"
66014735,5195,ngosang,2016-06-07T06:10:58Z,"Could you add 2160p? (AKA 4K or UHD) I never saw 2160i.
Examples => https://rarbg.to/torrents.php?search=2160p&category[]=14&category[]=48&category[]=17&category[]=44&category[]=45&category[]=47&category[]=42&category[]=46&category[]=18&category[]=41&category[]=23&category[]=25&category[]=27&category[]=28&category[]=40&category[]=32&category[]=33
"
66169742,5195,mgziminsky,2016-06-07T23:20:11Z,"This project is only for importing settings from uTorrent, it has nothing to do with the type of content that is actually available. uTorrent only has those 5 options.
"
66169855,5195,mgziminsky,2016-06-07T23:21:25Z,"Fair enough, I'll update this as well.
"
340029486,11354,glassez,2019-10-29T11:50:32Z,"Well, I've just done some code review. This flag is cleared in `handleTorrentPausedAlert()` so it seems you don't really need to clear it here."
340031990,11354,thalieht,2019-10-29T11:56:54Z,Reverted.
340055634,11354,glassez,2019-10-29T12:54:39Z,Seems to handle the second case we just need to set `m_startupState` to `Started` under this condition.
340117946,11354,thalieht,2019-10-29T14:41:24Z,"```
 void TorrentHandle::pause()
 {
-    if (m_startupState != Started) return;
     if (isPaused()) return;
 
+    m_startupState = Started;
     setAutoManaged(false);
     m_nativeHandle.pause();
```
or
```
 void TorrentHandle::pause()
 {
-    if (m_startupState != Started) return;
+    if (m_startupState != Started) {
+        if (isChecking())
+            m_startupState = Started;
+        else
+            return;
+    }
     if (isPaused()) return;
 
     setAutoManaged(false);
```"
340205119,11354,glassez,2019-10-29T16:59:35Z,"```c++
if (m_startupState != Started)
    m_startupState = Started;
```

But, seems, you need to move it to the end of the method."
340267237,11354,thalieht,2019-10-29T18:55:54Z,"Done, thanks."
340270401,11354,glassez,2019-10-29T19:02:17Z,":+1:
Now can you cause ""checking on startup"" case for some paused torrent to test it? Probably you need to trigger rechecking of some paused torrent and then close the app before it's done."
340299793,11354,thalieht,2019-10-29T20:10:59Z,"When i do it to a seeding torrent, recheck->close qBt before it finishes->start qBt and pause rechecking torrent->resume/force resume
After the recheck finishes, the torrent becomes paused. Shouldn't it go back to seeding?"
340595343,11354,glassez,2019-10-30T12:54:39Z,">Shouldn't it go back to seeding?

Sure.
>recheck->close qBt before it finishes

You don't pause it before recheck? Then it is a different kind of (related) issue."
340614449,11354,thalieht,2019-10-30T13:33:49Z,"Rechecking paused torrent doesn't have any problems, works as expected."
340643363,11354,glassez,2019-10-30T14:21:41Z,">Rechecking paused torrent 

We do talk about ability to pause (and then resume) checking torrents, don't it? So starting state is ""checking"" torrent.
Really we have 4 starting (sub)states that should be tested:
1. Forced checking torrent (torrent was resumed when user triggers force recheck);
2. Forced checking paused torrent  (torrent was paused when user triggers force recheck);
3. Startup checking torrent (torrent is added/restored as resumed, e.g. it was resumed when app is closed last time);
4. Startup checking paused torrent (torrent is added/restored as paused, e.g. it was paused when app is closed last time).

In any of these cases the torrent should remain resumed after checking has done when user (pauses and then) resumes it explicitly.

@thalieht, do you understand what I'm talking about? If so can you please test and report all of these cases above?"
340687369,11354,thalieht,2019-10-30T15:27:44Z,">In any of these cases the torrent should remain resumed after checking has done when user (pauses and then) resumes it explicitly.

I thought the idea was to return it to its prior state when manually resuming the torrent we paused during recheck, but if that's how it should be then only the 1st case resumes the torrent, in all the other cases the torrent gets paused after the recheck."
341709138,11354,glassez,2019-11-01T18:56:31Z,"@thalieht, can you add here the following:
```c++
if (m_pauseWhenReady) {
#if (LIBTORRENT_VERSION_NUM < 10200)
        m_nativeHandle.stop_when_ready(false);
#else
        m_nativeHandle.unset_flags(lt::torrent_flags::stop_when_ready);
#endif
        m_pauseWhenReady = false;
}
```
and check 4 cases we discussed earlier?"
341744137,11354,thalieht,2019-11-01T20:43:37Z,"1. Resumed (initial Resumed)
2. Resumed (initial Paused)
3. Paused (initial Resumed on startup)
4. Resumed (initial Paused on startup)

But
```
-  if (m_pauseWhenReady) {
+  if (!m_pauseWhenReady) {
   #if (LIBTORRENT_VERSION_NUM < 10200)
       m_nativeHandle.stop_when_ready(false);
   #else
       m_nativeHandle.unset_flags(lt::torrent_flags::stop_when_ready);
   #endif
-      m_pauseWhenReady = false;
   }
```

1. Resumed (initial Resumed)
2. Paused (initial Paused)
3. Resumed (initial Resumed on startup)
4. Paused (initial Paused on startup)

Have we decided whether it should or shouldn't resume in all cases?"
341799655,11354,glassez,2019-11-02T05:20:42Z,">Have we decided whether it should or shouldn't resume in all cases?

Still no.
But we can find both solutions and then just apply the chosen one."
341799776,11354,glassez,2019-11-02T05:26:01Z,"Can you also test the following?
```c++
#if (LIBTORRENT_VERSION_NUM < 10200)
        m_nativeHandle.stop_when_ready(false);
#else
        m_nativeHandle.unset_flags(lt::torrent_flags::stop_when_ready);
#endif
        m_pauseWhenReady = false;
```"
341807017,11354,thalieht,2019-11-02T10:56:46Z,Resumes in all cases.
343190620,11354,glassez,2019-11-06T16:19:44Z,"Well, since no one is active in the survey, I choose ""return to previous state"" (as the path of least resistance). We can change this behavior later if there are user requests.
I rethought the solution once again: seems  you should just revert entire 87d9840 plus remove `if (m_startupState != Started) return;` from `TorrentHandle::resume()`."
476526090,13266,glassez,2020-08-25T15:11:34Z,Please rename it to `findTrackerEntry` or `trackerEntryByURL`.
476529440,13266,glassez,2020-08-25T15:16:09Z,It's not optimal to convert each `tracker.url`. I would convert `trackerUrl` to `std::string` once and then compare with it. Seems you can even use some standard algorithm in that case.
476535195,13266,glassez,2020-08-25T15:24:12Z,You shouldn't have class definition in header.
476540635,13266,glassez,2020-08-25T15:31:25Z,"Also I would modify TrackerEntry class to have ""valid"" property (i.e. default constructed instance is invalid). Then this method can have simpler signature, i.e. accept URL and return TrackerEntry."
476778763,13266,kasper93,2020-08-25T21:59:55Z,"After my recent changes it is again used only in one place, I removed it. "
476797066,13266,kasper93,2020-08-25T22:23:57Z,"Sometimes it is better to inline some things like that, but I respect classic structure you have here, moved to separate files."
477014753,13266,Chocobo1,2020-08-26T03:42:22Z,"libtorrent provides `#include <libtorrent/fwd.hpp>`, you should use it."
477016838,13266,Chocobo1,2020-08-26T03:50:18Z,I would use a variable to avoid calling `is_working()` twice.
477019340,13266,Chocobo1,2020-08-26T04:00:15Z,you can use `empty()`.
477019510,13266,Chocobo1,2020-08-26T04:00:52Z,`++failed`
477019865,13266,Chocobo1,2020-08-26T04:02:25Z,"use `QVector` instead.
also don't forget to call `QVector<>::reserve()`."
477020433,13266,Chocobo1,2020-08-26T04:04:36Z,`const BitTorrent::TrackerStatus status`
477021714,13266,Chocobo1,2020-08-26T04:09:15Z,I think you should just write the concrete type out (`TrackerListColumn col`?) to be more readable.
477022137,13266,Chocobo1,2020-08-26T04:10:48Z,Please write out the return type for all new lambdas except the case of returning `void`.
477022438,13266,Chocobo1,2020-08-26T04:12:02Z,`const qlonglong val`
477025352,13266,Chocobo1,2020-08-26T04:23:35Z,https://travis-ci.org/github/qbittorrent/qBittorrent/jobs/721160395#L1428
477436999,13266,kasper93,2020-08-26T16:37:53Z,"It is redundant anyway, removed. Anyway it is inline function, compiler would optimize it out. "
477437157,13266,kasper93,2020-08-26T16:37:59Z,Nice
477666895,13266,Chocobo1,2020-08-26T23:24:15Z,This and `setRootIsDecorated` defaults to `true` and they can be removed instead.
478084518,13266,glassez,2020-08-27T04:14:02Z,"This class doesn't represent any abstract ""endpoint"" but particular ""endpoint of tracker entry"" so it should be `TrackerEntryEndpoint`."
478088674,13266,glassez,2020-08-27T04:18:35Z,I'm not sure it's safe to store reference here.
478092637,13266,glassez,2020-08-27T04:22:47Z,I think this extra state is redundant.
478095255,13266,glassez,2020-08-27T04:25:31Z,Why do you assign such a meaningless alias? Why not `trackerURL`?
478097640,13266,glassez,2020-08-27T04:28:05Z,"Coding style is broken. You should move `{` to the next line.
And please check all the similar code."
478326674,13266,glassez,2020-08-27T10:47:44Z,numFailed or failedCount
478327879,13266,glassez,2020-08-27T10:50:25Z,Broken Coding style. You should add braces around `if` body.
478330430,13266,glassez,2020-08-27T10:55:51Z,"Getting all messages without associating them with appropriate endpoints doesn't seem useful to me. IMO, it would be better if caller side operates with endpoints directly."
479760292,13266,kasper93,2020-08-30T11:52:40Z,"Done. It is kind of mouthful, but I will follow the naming scheme.
"
479760319,13266,kasper93,2020-08-30T11:52:49Z,"It is. This class is not intended to store any state or be stored anywhere. It is intended only as a temporary view for announce entry. 
"
479760426,13266,kasper93,2020-08-30T11:53:49Z,"It is useful for TrackerEntry user decision whether it should care or not about the messages, without checking them. And also system message sometime show non-errors, so there is disambiguation. And before my changes tracker warning messages were always hidden, even tho there is `Warning` torrent status.
"
479760448,13266,kasper93,2020-08-30T11:54:01Z,Done
479760552,13266,kasper93,2020-08-30T11:54:51Z,"TrackerEntry class only purpose is to reduces state of all endpoints to single state. I merely follow this pattern and it works well to show the message per tracker, not only per endpoints. Moving this responsibility to caller site should be done not only for messages if anything.
"
479803692,13266,kasper93,2020-08-30T18:56:15Z,"Older version of Qt doesn't have in place initialization in QVector. And by design this class is not default constructable, so need to have move semantic to work. Works fine with QVector on newer Qt version, but to keep compatibility QList is the way to go. "
480072661,13266,glassez,2020-08-31T11:38:46Z,"It seems to be optional info so I really disagree to create any extra state based on it.
>It is useful for TrackerEntry user decision whether it should care or not about the messages, without checking them.

Doesn't you just hide some logic from TrackerEntry user so there is ""checking for messages"" always performed (to create this extra state) even if user don't need it?
>before my changes tracker warning messages were always hidden, even tho there is Warning torrent status.

You don't require extra state to fix this error."
480074284,13266,glassez,2020-08-31T11:42:44Z,">TrackerEntry class only purpose is to reduces state of all endpoints to single state. 

Not all endpoint properties can be merged without losing their usefulness."
480079997,13266,glassez,2020-08-31T11:54:38Z,">TrackerEntry class only purpose is to reduces state of all endpoints to single state.

In fact, this is just an intermediate stage of development to facilitate the transition from the previous libtorrent version, when it did not provide any per-endpoint info."
480081727,13266,glassez,2020-08-31T11:58:21Z,"> This class is not intended to store any state or be stored anywhere.

But you do store it in container and make it accessible via public interface of TrackerEntry."
480083748,13266,glassez,2020-08-31T12:02:52Z,"Sorry, I can't find in your answer any strong reason that prevents from using QVector here (it's mostly unrelated)."
480089368,13266,glassez,2020-08-31T12:14:47Z,"> It is kind of mouthful

Disagree.
I am always against overly long names as long as there is no ambiguity. But here we are dealing with a term that is often used throughout the program, and it has a different meaning in itself (for example, we do not use the term Tracker here, but TrackerEntry).
In such cases, it is often convenient to use nested names (e.g. `TrackerEntry::Endpoint`) to use its short part in an internal context where it possible has no ambiguity."
480369373,13266,kasper93,2020-08-31T20:05:27Z,"> strong reason

For one it doesn't compile. I made this class default constructible and compatible with old QVector, I'm tired."
480370033,13266,kasper93,2020-08-31T20:06:42Z,"> `TrackerEntry::Endpoint`

Ok, please don't tell me now that you want this implementation in separate compilation unit."
480376939,13266,kasper93,2020-08-31T20:20:43Z,"But as long as TrackerEntry lives those will live too. And you need to think how would anyone use this. Copy or not  `lt::announce_endpoint` you would keep, you want to peek into it and throw away. If you copy, state would not even change so what would be the point of storing it? I mean you can't simply say storing reference in class is __always__ unsafe, because everything have assumptions and restrictions. "
480380596,13266,kasper93,2020-08-31T20:28:05Z,"> Not all endpoint properties can be merged without losing their usefulness.

Well it is useful to see message without expanding list of endpoints. Tracker responses are common for endpoints and those are most important for user as far as torrent is main concern. Specific endpoint errors are less important if some of them are communication with tracker.

> In fact, this is just an intermediate stage of development to facilitate the transition from the previous libtorrent version, when it did not provide any per-endpoint info.

Sure, but I'm not concerned about this ""intermediate stage"" in this PR. I only want to see responses from tracker, which I can't with upstream version. "
480732901,13266,glassez,2020-09-01T03:52:41Z,">Well it is useful to see message without expanding list of endpoints. 

So handle it at the level of logic where it (perhaps) makes some sense. I've suggested this before:
>it would be better if caller side operates with endpoints directly.

>Sure, but I'm not concerned about this ""intermediate stage"" in this PR. I only want to see responses from tracker, which I can't with upstream version.

I only ask you not to justify the disadvantages of your changes by existing disadvantages in the upstream. We are trying to get rid of all the obvious flaws before it is merged for the first time."
480756604,13266,glassez,2020-09-01T04:09:59Z,">If you copy, state would not even change so what would be the point of storing it? 

There may be something not so obvious here... For example, get list of endpoints from a temporary and then process it.
> I mean you can't simply say storing reference in class is always unsafe

Yes, I can't. And I don't. Here is one of the special cases. It's unclear from TrackerEntry interface that there's list of some temporaries."
480765726,13266,glassez,2020-09-01T04:16:49Z,">For one it doesn't compile.

Well, seems I didn't understand your previous answer... For me, when you say ""this"" you refer to previously mentioned thing (QVector) but seems you don't."
482346151,13266,kasper93,2020-09-02T19:33:59Z,"> I only ask you not to justify the disadvantages 

I didn't justify anything. I disagree that they are flaws, except for you personal preference bias. 

There are two users of this method, both uses the data in the same way. Aggregating those messages without knowing inner logic of lt is not obvious. And would require duplicating the code. It is not just list of messages of endpoints. And `TrackerEntry` encapsulates this logic for ease of use. This is my patch and I think your proposed change is not applicable."
482419167,13266,glassez,2020-09-02T20:28:35Z,">Aggregating those messages without knowing inner logic of lt is not obvious. 

There's no point in aggregating these messages at all, that's what I want to tell you. Especially in such a confusing way as you do:
If only one endpoint out of several returns a warning, what is the point of ""seeing"" this warning without knowing where it comes from? 
If multiple endpoints return warnings, what's the point of ""seeing"" them all without linking to their endpoints? 
If only one of the endpoints was working and then broke down, then you ""send"" a bunch of messages at once, as if all these errors happened together now - isn't that confusing?"
482469159,13266,glassez,2020-09-02T21:05:42Z,Can't there be messages here when it's not working (if it was working before)?
482477652,13266,glassez,2020-09-02T21:13:32Z,Why not include QContainerFwd like you've done above?
482484803,13266,glassez,2020-09-02T21:22:00Z,"I would call it ""toString"" as well but it's impossible in case of variables."
482486105,13266,glassez,2020-09-02T21:23:26Z,static_cast in all similar places
506782512,13266,kasper93,2020-10-17T02:16:33Z,LT updates this message whether it failed or succeeded to contact tracker. So it will be updated or empty. 
506783010,13266,kasper93,2020-10-17T02:22:17Z,changed
506791001,13266,glassez,2020-10-17T04:08:42Z,"> // or NotContacted

It confuses...
What does this comment mean?"
728625787,13266,glassez,2021-10-14T04:28:47Z,"Are you sure these terms (DHT, LSD, PeX) should be translated?
Even if it is, then you should exclude the entire decoration from the translated string:
```suggestion
    m_DHTItem = new QTreeWidgetItem({ QLatin1String(""** ["") + tr(""DHT"") + QLatin1String(""] **"") });
```"
728908010,13266,glassez,2021-10-14T11:56:12Z,"Please don't shorten the code in this way. Booleans should be used as booleans, even if it will look longer."
728926315,13266,glassez,2021-10-14T12:21:26Z,Extracting endpoint name should be done outside of this function to not duplicate it for each infohash variant.
728926926,13266,glassez,2021-10-14T12:22:15Z,Wrong coding style.
728931124,13266,glassez,2021-10-14T12:27:27Z,"```suggestion
        const TrackerEntry::EndpointStats makeEndpoint = [&](const lt::announce_endpoint &endpoint, const lt::announce_infohash &infoHash)
```"
728972895,13266,glassez,2021-10-14T13:17:33Z,"@kasper93
It seems that adding/filling this field is the only thing you had to do at a core level to achieve your goal (even deleting ""deprecated"" fields is not necessary at all and could be postponed for a later time to facilitate the review and merging of the main changes).
But your PR contains too many changes to perform the job, some of which are very doubtful or obviously incorrect. I would recommend limiting yourself to the minimum required number of changes to core level code. If you want to ""improve"" something else, then please do it in a separate PR. Otherwise, the review may take a long time and get bogged down in correcting side errors."
734985053,13266,kasper93,2021-10-23T15:57:07Z,"This is lambda, you cannot specify type like that. 

I can do
``` cpp
const auto makeEndpoint = [&](const auto &endpoint, const auto &infoHash) -> TrackerEntry::EndpointStats
```
to make return type explicit, redundant, but more readable. As for arguments time it is precisely auto to support both libtorrent v1 and v2. They are different type depending on the version."
734985063,13266,kasper93,2021-10-23T15:57:15Z,"oops, fixed."
734985215,13266,kasper93,2021-10-23T15:58:52Z,"Microptimizations are bad for readibility, it is not performance critical code, it is done twice instead of one time and reduces code duplication."
734985688,13266,kasper93,2021-10-23T16:03:10Z,"hehe, they are used as boolens. This is precisely why it works, because they are boolen :) Fixed."
734985828,13266,kasper93,2021-10-23T16:04:20Z,"Reverted this. I feel like strings like that shouldn't be hardcoded, but I guess they can be in this case."
734987875,13266,kasper93,2021-10-23T16:26:23Z,"> But your PR contains too many changes to perform the job

This PR is performing it's job just fine, it changes how trackers and endpoints are displayed and make it consistent, instead adding another change on top old as you called them ""deprecated"" filed which would make it even more convoluted that it is now. Have I deduplicated some code, instead of changing the same thing in two places? Yes, does it require another PR. No. I can make it in separate commits if it will make it better for you to understand and review them.

> some of which are very doubtful or obviously incorrect.

Have you pointed them out in the review? `very doubtful or obviously incorrect` are quite a strong words to throw around without backing them out. I'd love to fix and/or discuss your concerns."
735000592,13266,glassez,2021-10-23T18:35:41Z,">Have you pointed them out in the review? `very doubtful or obviously incorrect` are quite a strong words to throw around without backing them out. I'd love to fix and/or discuss your concerns.

E.g., you've changed the following code:
```c++
QString::fromLocal8Bit(endpoint.last_error.message().c_str())
```
...with the following one:
```c++
QString::fromStdString(infoHash.last_error.message())
```
What is the meaning of this change?

I wouldn't have such concerns if this PR contained only the required changes, or at least you kept such additional improvements in a separate commits, so at least you had to provide explanations for it.
Of course, it may be some small thing, but a large number of such little things makes us dig into them, trying to figure out if there are any regressions here, which greatly distracts from the review of the main logic. As I mentioned above, all you needed was to implement the `name` field, then we could quickly deal with the implementation of the main purpose of this PR."
735000982,13266,glassez,2021-10-23T18:39:32Z,">reduces code duplication.

What duplication you talk about? I see the single place where the name can be extracted."
735001140,13266,glassez,2021-10-23T18:40:56Z,">This is lambda, you cannot specify type like that.

Oops... my bad. I misread it."
1292776854,13266,glassez,2023-08-13T12:24:28Z,"```suggestion
                        trackerEndpoint.message = QString::fromLocal8Bit(infoHash.last_error.message());
```"
1292777905,13266,glassez,2023-08-13T12:30:49Z,"```suggestion
                trackerEndpoint.message = QString::fromLocal8Bit(endpoint.last_error.message());
```"
1292778919,13266,glassez,2023-08-13T12:33:22Z,"```suggestion
        switch (status)
        {
```"
1292779472,13266,glassez,2023-08-13T12:35:41Z,"```suggestion
                QTreeWidgetItem *child = (index < item->childCount())
                        ? item->child(index) : new QTreeWidgetItem(item);
```"
1292781792,13266,glassez,2023-08-13T12:46:33Z,It looks like it doesn't match the previous condition (because of `protocolStats.status != BitTorrent::TrackerEntry::Working`).
1292782852,13266,glassez,2023-08-13T12:51:28Z,Also please don't put all this code in `if` condition directly but assign to some variable.
1293124885,13266,glassez,2023-08-14T08:07:40Z,"```suggestion
            const bool hasNoWarningMessages = std::all_of(trackerEntry.stats.cbegin(), trackerEntry.stats.cend(), [](const auto &endpoint)
            {
                  return std::all_of(endpoint.cbegin(), endpoint.cend()
                          , [](const BitTorrent::TrackerEntry::EndpointStats &protocolStats)
                  {
                      return protocolStats.message.isEmpty() || (protocolStats.status != BitTorrent::TrackerEntry::Working);
                  });
            });
            if (hasNoWarningMessages)
```"
168918665,8427,glassez,2018-02-17T10:42:07Z,"IMO, if you need to enclose code under some ""switch case"" it's strong reason to extract it into separate function."
168918685,8427,glassez,2018-02-17T10:43:59Z,"There is no code after ""switch"" so you should use ""break"" here and below."
168918797,8427,glassez,2018-02-17T10:50:57Z,"Why not original string?
If string doesn't contain separator it should rerurned as is. If separator is empty, the string never contains it."
168918802,8427,glassez,2018-02-17T10:51:29Z,Coding style.
168918871,8427,glassez,2018-02-17T10:54:51Z,Isn't it redundant?
168918953,8427,glassez,2018-02-17T10:58:57Z,"Please omit ""else"" after ""return""."
168919584,8427,glassez,2018-02-17T11:33:06Z,"This check is redundant. It hides some kind of bad request. If content length header is 0, then only requests with empty body is valid, isn't it?"
168919681,8427,glassez,2018-02-17T11:36:56Z,Can we omit data copying here using QByteArray::fromRawData()?
168919728,8427,glassez,2018-02-17T11:39:22Z,Can we omit unnecessary data copying here?
168919756,8427,glassez,2018-02-17T11:40:34Z,request which uses `LF` for newline is bad request!
168919903,8427,glassez,2018-02-17T11:48:27Z,You perform toLower multiple times.
168920005,8427,glassez,2018-02-17T11:52:11Z,Then add braces to other branches.
168920565,8427,Chocobo1,2018-02-17T12:17:24Z,"I don't feel the same way, but I can change it if you insist.
"
168920610,8427,Chocobo1,2018-02-17T12:19:51Z,"`break` will only jump out the `switch`, so it is not enough and `return` is a strong meaning: I wish to stop further parsing/processing."
168920665,8427,Chocobo1,2018-02-17T12:22:20Z,ok
168920686,8427,Chocobo1,2018-02-17T12:23:53Z,"AFAIK some program provides compatibility, but we don't, should I change the comment?"
168920709,8427,Chocobo1,2018-02-17T12:25:01Z,fixed.
168920791,8427,Chocobo1,2018-02-17T12:28:25Z,fixed
168920892,8427,Chocobo1,2018-02-17T12:33:02Z,you mean the `m_request` initialization? 
168921056,8427,Chocobo1,2018-02-17T12:40:31Z,I haven't found a way.
168921467,8427,Chocobo1,2018-02-17T13:08:11Z,"~~yes, thanks!~~"
168921497,8427,Chocobo1,2018-02-17T13:10:20Z,I added a variable for it.
168921603,8427,Chocobo1,2018-02-17T13:18:14Z,fixed.
168921823,8427,Chocobo1,2018-02-17T13:29:53Z,"No, I need to check I don't read over bound, from QByteArray::mid():
>If len is -1 (the default), or pos + len >= size(), returns a byte array containing all bytes starting at position pos until the end of the byte array.

"
168921868,8427,glassez,2018-02-17T13:31:47Z,Yes.
168921883,8427,Chocobo1,2018-02-17T13:32:21Z,">If content length header is 0, then only requests with empty body is valid, isn't it?

~~Good catch! I'll update this part.~~"
168921894,8427,glassez,2018-02-17T13:32:46Z,"Using `QString::fromLatin1(const char *str, int size = -1)` overload."
168922558,8427,Chocobo1,2018-02-17T14:05:35Z,isn't explicitly initializing all class members a good practice?
168922662,8427,Chocobo1,2018-02-17T14:11:28Z,"ok, thanks!"
168922950,8427,Chocobo1,2018-02-17T14:26:51Z,">If content length header is 0, then only requests with empty body is valid, isn't it?

Now I read again, the situation is, with http persistence connection, a series of requests could be concatenated & received together.
Currently I choose the easy way to parse: if the packet is malformed (`contentLength == 0` + body), parsing will succeed for the 1st round but will fail at the 2nd round (now the packet is malformed the connection will be closed) or later.

>This check is redundant. 

Given the above, this check is actually skipping over unneeded processing when possible."
168926553,8427,glassez,2018-02-17T16:44:42Z,Shouldn't we send response before (e.g. Bad Request)?
168926644,8427,glassez,2018-02-17T16:49:34Z,At least fix indentation.
168926856,8427,glassez,2018-02-17T16:59:49Z,"It doesn't make any sense to me. Same thing to do like `Class obj = Class();` instead of `Class obj;`.
Initializing makes sense in the following cases:
1. Simple types (like bool, int, double etc.) which may remain uninitialized in other case.
2. Non-default initialization of class types.
3. Initialization based on some parameters."
168927051,8427,glassez,2018-02-17T17:08:19Z,"```c++
const int remainingLength = data.size() - headerLength;
if (remainingLength < contentLength)
    return {ParseStatus::Incomplete, Request(), 0};
if (remainingLength != contentLength) {
     return {ParseStatus::BadRequest, Request(), 0};

const QByteArray httpBody = QByteArray::fromRawData(data.constData() + headerLength, contentLength);
```"
168927126,8427,glassez,2018-02-17T17:10:17Z,It looks like we're sorry we don't support the malformed requests.
168927164,8427,glassez,2018-02-17T17:12:21Z,Why parseHeaderLine can't access m_request.headers directly?
168927205,8427,glassez,2018-02-17T17:14:22Z,Request line has very simple format. Isn't using regular expressions too wasteful to parse it?
168928581,8427,Chocobo1,2018-02-17T18:07:29Z,"No, this is `Incomplete` case, means the data we have is incomplete, need to wait until more data comes in and then we try to parse again.
"
168928610,8427,Chocobo1,2018-02-17T18:08:45Z,will remove.
168928795,8427,Chocobo1,2018-02-17T18:15:46Z,">At least fix indentation.

OK"
168928820,8427,Chocobo1,2018-02-17T18:16:41Z,"I'll remove the ""for simplicity"""
168928864,8427,Chocobo1,2018-02-17T18:18:56Z,parseHeaderLine is used 2 times with different parameters.
168929053,8427,Chocobo1,2018-02-17T18:28:05Z,">Isn't using regular expressions too wasteful to parse it?

Maybe, but I don't want to fight with all kinds of invalid inputs, IMO if the input data can match this regex then we take it."
168940546,8427,glassez,2018-02-18T05:44:23Z,">try to parse again.

But you're closing the socket here!.."
168940662,8427,glassez,2018-02-18T05:51:07Z,It seems like wrong logic in this method.
168940798,8427,Chocobo1,2018-02-18T05:57:54Z,">But you're closing the socket here!..

It closes **only** when the unparsed data accumulates too much (over `bufferLimit`), otherwise it waits for more data comes in."
168941281,8427,Chocobo1,2018-02-18T06:36:45Z,"I added a helper function `QByteArray viewMid(const QByteArray &in, const int pos, const int len = -1)` which will return a view of `in`."
168952047,8427,glassez,2018-02-18T13:41:16Z,Shouldn't it return const QByteArray? Otherwise it allows to modify const object (in QByteArray is const).
168952193,8427,glassez,2018-02-18T13:45:52Z,"Shouldn't we have something like QString::splitRef here, to avoid unnecessary data copying? E.g.:
```c++
QList<const QByteArray> splitIntoViews(const QByteArray &in, const QByteArray &sep, const QString::SplitBehavior behavior = QString::KeepEmptyParts)
```"
168953856,8427,glassez,2018-02-18T14:41:51Z,">It closes only when the unparsed data accumulates too much (over bufferLimit), otherwise it waits for more data comes in.

But why it closes silently, without ""Bad Request"" response?"
168953992,8427,glassez,2018-02-18T14:46:21Z,"Shouldn't MAX_REQUEST_SIZE be applicable to the entire request, but not just to its content?"
168954291,8427,glassez,2018-02-18T14:55:14Z,"Now I've found something else.
When request is too long RequestParser returns BadRequest even it is still incomplete so this condition never be true."
168954328,8427,glassez,2018-02-18T14:56:58Z,"This condition cannot be true since viewMid returns max contentLength bytes, isn't it?"
168954574,8427,glassez,2018-02-18T15:06:26Z,"Then it can be defined outside RequestParser class. Unless I'm wrong, it's independent from this class."
168955695,8427,Chocobo1,2018-02-18T15:39:57Z,">But why it closes silently, without ""Bad Request"" response?

I'll send ""413 Payload Too Large"".

>When request is too long RequestParser returns BadRequest even it is still incomplete so this condition never be true.

It could be true for a malformed request that has a lot of headers (not included in contentLength) that exceeds this limit and the body has yet arrived.
"
168955763,8427,Chocobo1,2018-02-18T15:41:46Z,"yes, fixed."
168956055,8427,Chocobo1,2018-02-18T15:51:56Z,"I'll rename to `MAX_CONTENT_SIZE`.
Under normal usage, limiting content size is the main target here.
"
168956114,8427,glassez,2018-02-18T15:53:39Z,"Then I'll repeat my other question. Why don't you apply the MAX_REQUEST_SIZE to the entire request in RequestParser? This would avoid to re-do the check here.
I.e. is request with 19 MB content and 19 MB headers valid for you (when MAX_REQUEST_SIZE is 20 MB)?"
168956245,8427,Chocobo1,2018-02-18T15:58:52Z,"yes, I'll remove this."
168956670,8427,Chocobo1,2018-02-18T16:14:28Z,">Then it can be defined outside RequestParser class. 

Move to namespace above?"
168957017,8427,Chocobo1,2018-02-18T16:25:42Z,">Why don't you apply the MAX_REQUEST_SIZE to the entire request in RequestParser? 

you mean like `if (data.size() > MAX_REQUEST_SIZE) return {ParseStatus::BadRequest, Request(), 0};` ?
No, because `data` could have multiple requests concatenated together so by definition that would be wrong.

>I.e. is request with 19 MB content and 19 MB headers valid for you (when MAX_REQUEST_SIZE is 20 MB)?

It should be valid, but the header size is unrealistic so if it got dropped is also acceptable IMO.
"
168957091,8427,glassez,2018-02-18T16:27:51Z,Yes.
168957164,8427,glassez,2018-02-18T16:29:42Z,">you mean like if (data.size() > MAX_REQUEST_SIZE) return {ParseStatus::BadRequest, Request(), 0}; ?
No, because data could have multiple requests concatenated together so by definition that would be wrong.

No. I mean `if ((headerSize + contentLength) > MAX_REQUEST_SIZE) return {ParseStatus::BadRequest, Request(), 0};`"
168957452,8427,Chocobo1,2018-02-18T16:38:21Z,">No. I mean if ((headerSize + contentLength) > MAX_REQUEST_SIZE) return {ParseStatus::BadRequest, Request(), 0};

Let me say it in another way, as I said, we should limit the content length directly because we want to control the POST payload size.
If we limit by (headerSize + contentLength), I don't like this because there is no sensible limit on how large the header can be and from recent trends, header gets larger than ever."
168957725,8427,Chocobo1,2018-02-18T16:46:32Z,"I'll try.

>unless I'm wrong, we can process only original data views in all cases until we require to save some of them or convert to another format (e.g. QString).

I imagine that would be possible, however my intention was to write clear code first, performance later. That said, I don't wish to optimize to the extreme in this PR, are you interested to do it later?"
168957733,8427,glassez,2018-02-18T16:46:45Z,"> I don't like this because there is no sensible limit on how large the header can be

But you still limit it by 10% from content. Just append it to MAX_REQUEST_SIZE.
>header gets larger than ever

Why?
In my case it can be at most MAX_REQUEST_SIZE. In your case it can be at most 1.1*MAX_REQUEST_SIZE."
168957826,8427,glassez,2018-02-18T16:49:22Z,Nicely. Just do something that doesn't make you too hard. It'll still be better than nothing. I'll add the rest to my to-do list.
168985918,8427,glassez,2018-02-19T04:23:36Z,"Well... It seems that if we do not introduce a separate limit for the size of headers, the remaining ways are reduced to the same. So do whatever you want. But I still handled it in one place (in RequestParser)."
169527772,8427,Chocobo1,2018-02-21T03:32:56Z,">So do whatever you want. But I still handled it in one place (in RequestParser).

I'll keep it for now, at least I want to make sure `m_receivedData` size won't explode."
169528226,8427,Chocobo1,2018-02-21T03:38:16Z,"Done. But there is a limitation in QList: 
>QList's value type must be an assignable data type

That means I cannot use `QList<const QByteArray>` here, thus it's still `QList<QByteArray>`."
169593717,8427,glassez,2018-02-21T10:33:40Z,"You forget to remove ""for simplicity"""
169594222,8427,glassez,2018-02-21T10:35:53Z,"You use ""delimiter"" as QByteArray in every cases. It's better to declare it as QByteArray."
169595250,8427,glassez,2018-02-21T10:39:52Z,The idea is RequestParser is used for different web applications (WebUI and embedded Tracker) that can require different limits on content length.
169595865,8427,glassez,2018-02-21T10:42:19Z,"@Chocobo1, as I remember, you introduced this statement earlier. Where can I get the source of this info?"
169633876,8427,Chocobo1,2018-02-21T13:23:31Z,I didn't see other application than webUI using `RequestParser` ... maybe change this in later PR?
169635000,8427,Chocobo1,2018-02-21T13:27:36Z,"https://en.wikipedia.org/wiki/Newline#In_programming_languages
"
169635241,8427,Chocobo1,2018-02-21T13:28:20Z,"oops, fixed."
169636814,8427,Chocobo1,2018-02-21T13:34:25Z,ok
169700837,8427,glassez,2018-02-21T16:42:54Z,"I don't mind. Besides, I don't remember how exactly it was designed right now."
249533042,10175,glassez,2019-01-21T17:30:43Z,Why did you change it?
249630563,10175,Chocobo1,2019-01-22T03:21:49Z,"In short, I was hitting compile / missing include errors:
```
../../src/base/preferences.cpp:509:34:   required from here
/usr/include/qt/QtCore/qpair.h:96:8: error: ‘QPair<T1, T2>::first’ has incomplete type
     T1 first;
        ^~~~~
In file included from ../../src/base/preferences.h:41,
                 from ../../src/base/preferences.cpp:30:
../../src/base/utils/net.h:37:7: note: forward declaration of ‘class QHostAddress’
 class QHostAddress;
       ^~~~~~~~~~~~
```

Reading the error message I think `QHostAddress` should be included here instead of in client code.
"
249636350,10175,glassez,2019-01-22T04:08:55Z,"Isn't that the usual behavior when using the forward declaration?
We forward declare something and then we include an appropriate header in place where it is really used (i.e. in ""preferences.cpp"" in this case)."
249638074,10175,glassez,2019-01-22T04:25:46Z,"I would move these two to ""Utils::Net"". They're not Server jobs."
249638445,10175,Chocobo1,2019-01-22T04:28:55Z,">Isn't that the usual behavior when using the forward declaration?

Yes, it would be reasonable for function declarations, but it is very unintuitive in this case, here is the error point:
https://github.com/qbittorrent/qBittorrent/blob/b2b3244e1b31ea909a15ce6b4c637956f9a41d4d/src/base/preferences.cpp#L509

A analogy would be QStringList, they include QSting in their header, so users don't have to:
https://code.woboq.org/qt5/qtbase/src/corelib/tools/qstringlist.h.html"
249736449,10175,glassez,2019-01-22T11:12:09Z,"Okay, then.
But it really confused me why we use this ""impersonal"" type (QPair) as Subnet. It's good for using in template algorithms, but here I'd rather see some structure with meaningful field names."
249751738,10175,Chocobo1,2019-01-22T12:02:48Z,"Utils::Net is for networking related stuff, certificate/key is more of security thing, so I'll prefer moving it to utils::misc."
249767890,10175,glassez,2019-01-22T12:57:22Z,"I just thought it wasn't just some unrelated certificates/keys, it was Network-related SSL certificates/keys."
249771942,10175,glassez,2019-01-22T13:10:02Z,Please move constants above the functions.
249773140,10175,Chocobo1,2019-01-22T13:13:53Z,">it was Network-related SSL certificates/keys.

Authentication have nothing to do with networking, or perhaps a new file utils/ssl.cpp?"
249774171,10175,glassez,2019-01-22T13:17:08Z,Using these helpers you parse certificates/keys data twice in this method. I would refactor it.
249781116,10175,Chocobo1,2019-01-22T13:37:37Z,">I would refactor it.

I think using boost::optional would be a perfect fit here."
249833027,10175,glassez,2019-01-22T15:37:59Z,"Isn't SSL a ""networking related stuff""?
>Secure Sockets Layer (SSL) is cryptographic protocols designed to provide communications security over a computer network."
249870233,10175,Chocobo1,2019-01-22T16:55:20Z,">Isn't SSL a ""networking related stuff""?

I just realize ""utils/ssl.cpp"" is not good either...
SSL is a type of socket that utilize certificate so it is networking stuff, however certificate itself isn't tied to socket or any networking stuff: https://en.wikipedia.org/wiki/Public_key_certificate
If you look at QSslKey & QSslCertificate classes you won't find any method that is related to networking.
And finding a good place to place it is hard... just let it be Utils::Net for now although I don't really like it and can't think of a better place."
249873262,10175,glassez,2019-01-22T17:02:09Z,"By the way, a small offtopic. According to Wikipedia SSL is deprecated now in favor of TLS. Can you say something about?"
249873830,10175,glassez,2019-01-22T17:03:32Z,Don't understand how you want use it...
249875374,10175,Chocobo1,2019-01-22T17:07:28Z,Done.
249878268,10175,Chocobo1,2019-01-22T17:14:37Z,">Can you say something about?

They are more or less the same thing (excluding the details), you can think they rename SSL to TLS for political reasons.
http://tim.dierks.org/2014/05/security-standards-and-name-changes-in.html"
249879221,10175,Chocobo1,2019-01-22T17:17:07Z,"PR updated, this way the cert/key loading code can keep in just one function."
250049984,10175,glassez,2019-01-23T04:07:26Z,I would omit wrapping it in `boost::optional`. I don't like this approach. I would either trow an error or just return empty list.
250050156,10175,glassez,2019-01-23T04:08:56Z,"The same comment as above. Either throw an error or return ""empty"" QSslKey."
250050906,10175,glassez,2019-01-23T04:14:56Z,"Also I strongly dislike function names like ""tryDoSomething()"". ""try"" is totally meaningless prefix. It is clear that some functions may not be successful. It follows from their meaning (loading, parsing etc. routines), it is not necessary to specify it in addition."
250060271,10175,Chocobo1,2019-01-23T05:33:40Z,">I don't like this approach.

Why? Compared with your suggestions the only overhead of `optional` is 1 byte bool and the code calling this function is easier to read.

>I would either trow an error

This is a bit overkill, we are calling this function directly not through a chain of function calls, i.e. we can/should check its error status directly.

>just return empty list.

Then the client code (such as in optionsdialog.cpp) will be forced to know about the type `<T>` of `optional<T>` which is unnecessary for whom only wish to know success/failure of the function call."
250060343,10175,Chocobo1,2019-01-23T05:34:11Z,will remove the prefix.
250227015,10175,Chocobo1,2019-01-23T14:53:51Z,"The traditional way would have a signature like `bool loadSSLCertificate(const QByteArray &data, QList<QSslCertificate> *outputList)`, without going into the details you can already see how messy its internal is going to be compared to the current code (and also the code using it)."
250285814,10175,glassez,2019-01-23T17:03:14Z,">Why? Compared with your suggestions the only overhead of optional is 1 byte bool  is 1 byte bool and the code calling this function is easier to read.

""Class template optional is a wrapper for representing 'optional' (or 'nullable') objects who may not (yet) contain a valid value.""
Both result types already have this feature (can represent its ""nullability"" or ""emptyness"") so wrapping it in `boost::optional` is the real overkill.

>This is a bit overkill, we are calling this function directly not through a chain of function calls, i.e. we can/should check its error status directly.

I don't know how directly calling a function conflicts with being able to throw an exception...
In addition, a particular use case should not affect either the implementation of the function or its interface. Interface/implementation should reflect only its meaning/job.

>Then the client code (such as in optionsdialog.cpp) will be forced to know about the type <T> of optional<T> which is unnecessary for whom only wish to know success/failure of the function call.

This is not a valid reason to use such a workaround.

In fact, all I offered was to get rid of the double parsing. I didn't think it would drive your mind into such a jungle.
The solution is simpler, it will provide readable code. What we need? To load the SSL key:
```c++
QSslKey loadSSLKey(const QByteArray &data)
{
    // try different formats
    QSslKey key {data, QSsl::Rsa};
    if (key.isNull())
        return QSslKey(data, QSsl::Ec);
}
```
You can use it where you need its result (e.g. in Server code).
If you need only check its result without propagating type info to the calling code you just need a simple helper:
```c++
bool isValidSSLKey(const QByteArray &data)
{
    return !loadSSLKey(data).isNull();
}
```"
250467600,10175,Chocobo1,2019-01-24T05:06:35Z,">Both result types already have this feature (can represent its ""nullability"" or ""emptyness"") so wrapping it in boost::optional is the real overkill.

This is a valid point, I agree with it more or less.

>If you need only check its result without propagating type info to the calling code you just need a simple helper

Yes, however the way I see it, `optional` is just a convenient interface that we get to write less code, with only a low price to pay.

I'm not going to insist anymore so I'll add the helper function.
PR updated."
250861108,10175,glassez,2019-01-25T04:09:22Z,I would use `std::any_of()` here.
250861343,10175,glassez,2019-01-25T04:11:49Z,"You can omit using additional variables here, isn't it? Just assign m_key/m_certs directly."
250861592,10175,glassez,2019-01-25T04:14:17Z,This part of condition is redundant.
250863373,10175,glassez,2019-01-25T04:24:52Z,Every time I make sure that the use of `bool` parameters leads to confusing code in most cases (as mentioned in Qt coding guidelines).
250868722,10175,glassez,2019-01-25T05:11:59Z,"Please make a named constant at top of ""webui.cpp""."
250869098,10175,glassez,2019-01-25T05:14:45Z,Shouldn't we track whether the files were changed from last loading?
250870111,10175,Chocobo1,2019-01-25T05:23:34Z,"Just moving code to here, maybe in later PR."
250870591,10175,Chocobo1,2019-01-25T05:27:23Z,"IMO the current way avoids changing the member variable states unless it is ready (also easier to debug/inspection), I'll change if you really insist."
250870675,10175,Chocobo1,2019-01-25T05:28:06Z,"No, check the empty case of any_of()"
250870965,10175,Chocobo1,2019-01-25T05:30:40Z,what for? 
250871334,10175,Chocobo1,2019-01-25T05:33:56Z,Are you sure? this is in a lambda function.
250871737,10175,Chocobo1,2019-01-25T05:37:06Z,I don't think I can do better here.
250878584,10175,glassez,2019-01-25T06:29:37Z,"There are at least two ways:
1. (Qt) Use enum in case when bool is unclear. Then the method call will be `webUIHttpsCertChanged(""/home/user/cert_file"", ShowError)`.
2. Split it into two functions. One does main job and reports error in same way (e.g. throws exception). Second is wrapper that calls the first one and show error message. Then you can use first function directly in case when you don't need to report errors."
250879712,10175,glassez,2019-01-25T06:38:10Z,">the current way avoids changing the member variable states unless it is ready (also easier to debug/inspection)

Why do you need keeping previous key/cert if you stop using them?
>I'll change if you really insist.

I don't insist if you really want it."
250879993,10175,glassez,2019-01-25T06:40:24Z,Is it a special case here?
250880624,10175,glassez,2019-01-25T06:45:25Z,"Does it bother?
This number has a ""configuration"" value (aka MaxSSLFileSize). Now I see it used in several files so it should be in some shared place to prevent its independent changing."
250881027,10175,glassez,2019-01-25T06:48:16Z,To prevent reloading of the same data. Just small optimization. No big deal.
250890808,10175,Chocobo1,2019-01-25T07:47:15Z,">true if unary predicate returns true for at least one element in the range, false otherwise. Returns false if the range is empty."
250893190,10175,glassez,2019-01-25T07:59:25Z,">Returns false if the range is empty.

That's it! So `return certs;` just returns empty list as expected.
But if you want to distinguish this case explicitly leave it as is."
250893612,10175,Chocobo1,2019-01-25T08:01:36Z,I chose the enum way.
250893692,10175,Chocobo1,2019-01-25T08:01:53Z,added Uilts::Net::MaxSSLFileSize
250893723,10175,Chocobo1,2019-01-25T08:01:59Z,let's keep it simple for now.
250894283,10175,Chocobo1,2019-01-25T08:04:46Z,"OK, will simplify.
"
250962966,10175,glassez,2019-01-25T12:08:09Z,It should be MAX_SSL_FILE_SIZE to be consistent with currently used (de-facto) coding style.
251186673,10175,Chocobo1,2019-01-26T03:35:05Z,Done.
251379346,10175,glassez,2019-01-28T11:37:07Z,Move into anonymous namespace.
251381162,10175,glassez,2019-01-28T11:43:17Z,You just ignore error cases. Isn't there a better way?
251400881,10175,Chocobo1,2019-01-28T12:51:01Z,"I'm particular bad at error recovery, is there a better way? I hope it is not too excessive."
251675607,10175,sledgehammer999,2019-01-29T02:53:35Z,Remove it from the end of the file
251675917,10175,sledgehammer999,2019-01-29T02:55:36Z,"Maybe use the removed `userAcceptsUpgrade()` function only to inform(not ask) the user of the change?
Or maybe place a log entry?"
251684446,10175,Chocobo1,2019-01-29T03:56:34Z,">Maybe use the removed userAcceptsUpgrade() function only to inform(not ask) the user of the change?

I feel that is a bit too much for this simple migrate process.

>Or maybe place a log entry?

OK, done."
251684921,10175,glassez,2019-01-29T04:00:08Z,"qBittorrent is designed in such a way that the ability to read/write some folders (i.e. config/data) is its requirement. If there are any problems with this, it cannot function correctly. In any such case, it must interrupt its execution. Console/Log message should be produced."
251691577,10175,Chocobo1,2019-01-29T04:55:13Z,"Now I understand your concern.
However in this case, it is just simple migration, I don't think failing it is severe enough to stop execution.
Will add log msg for failing cases."
251702883,10175,glassez,2019-01-29T06:13:06Z,">However in this case, it is just simple migration, I don't think failing it is severe enough to stop execution.

I see no difference with the other cases. Really the case is the same. Just ask yourself, what could possibly cause an error here?
>Will add log msg for failing cases.

It is necessary, but it is not enough. Try looking at it from a user perspective. qBittorrent will behave in the same way as without any migration code. The user will not be able to access Web UI for non-obvious reasons, because the application will work (in addition, access via http will be open, which is completely undesirable from a security point of view). Another thing is if the application can not start. This should prompt the user to find out the reason."
251703651,10175,glassez,2019-01-29T06:17:26Z,">in addition, access via http will be open, which is completely undesirable from a security point of view

By the way, this also applies to the current behavior if certificates/keys cannot be loaded. Once a user has configured a secure connection, the application should not allow insecure access for any reason, right? @Piccirello, what do you think?"
251723539,10175,Chocobo1,2019-01-29T07:58:11Z,">Really the case is the same. Just ask yourself, what could possibly cause an error here?

Read-only config folder, but I still don't think it should halt program when failed to migrate configs. And there is already log msgs.

>Try looking at it from a user perspective. qBittorrent will behave in the same way as without any migration code. The user will not be able to access Web UI for non-obvious reasons, because the application will work 

If it is the ""read-only config folder"" case, then qbt will not be working correctly with/without the upgrade...

>in addition, access via http will be open, which is completely undesirable from a security point of view

Could you explain the *security* issue? I'm not aware of it.

>Another thing is if the application can not start. This should prompt the user to find out the reason.

Due to WebUI upgrade code? I must be crazy reading this.
Apparently there are different viewpoints of how important is the upgrade code... @sledgehammer999 your thoughts?
"
251762369,10175,glassez,2019-01-29T09:56:45Z,">Could you explain the security issue? I'm not aware of it.

For what purpose does the user set up HTTPS? Does it forbid an access via non-secure HTTP? Or am I wrong?
Really I'm not a Web UI user. So I can be wrong about some things. I just express the doubts that arise when viewed from outside.

>Due to WebUI upgrade code? I must be crazy reading this.

Not. But due to invalid execution environment. As I said before qBittorrent is designed assuming the config/data folders is readable/writable. It does not matter when it detects the impossibility of fulfilling this requirement. 

Sorry, nothing personal. It's just that your migration code touched on a fundamental qBittorrent problem that I've been thinking about lately. Inability to read/write config/data files means inability to keep running correctly, so qBittorrent MUST terminate once it faces such problem.

Well, I've made my point, and you decide whether it matters or not."
251802262,10175,Chocobo1,2019-01-29T11:56:51Z,">It's just that your migration code touched on a fundamental qBittorrent problem that I've been thinking about lately.

It is not my concern how ""migration code errors"" or ""read-only config folder"" should be handled, it is non-trivial topic itself.
But requiring PR authors in a not-so-related topic to fulfill the blueprints in your mind is just not fair and not justified, this behavior not only slows down the development momentum but also wears down the passion to contribute, in the worst case, throwing away invested efforts.
If you must insist that every PR should provide a fully complete solution to everything it touches, then at least you should be involved in it, such as filling in the things (with exact code) that are not within the PR topic, just throwing expectations and requirements for others to fulfill is not enough.
"
251823189,10175,glassez,2019-01-29T13:05:26Z,">But requiring PR authors in a not-so-related topic to fulfill the blueprints in your mind is just not fair and not justified, this behavior not only slows down the development momentum but also wears down the passion to contribute, in the worst case, throwing away invested efforts.

That is why I do not insist on my vision of the global problem. If it doesn't look serious to others, just report this fact and keep ignoring it.

@Chocobo1, I'm sorry if my thoroughness offends you. That wasn't my goal."
252539491,10175,Chocobo1,2019-01-31T05:29:57Z,"It's alright now, lets just move on."
266227691,10384,Chocobo1,2019-03-17T07:39:10Z,you forgot to add to cmake's list.
266227747,10384,Chocobo1,2019-03-17T07:41:31Z,you can assign the default `nullptr` to these 2 right here.
266227918,10384,Chocobo1,2019-03-17T07:48:15Z,"I would write the signatures like this instead: 
```c++
namespace
{
    QList<QPair<QString, Log::MsgType>> bulkLogMessages();
    QList<QPair<QString, Log::MsgType>> bulkPeerMessages();
}
```"
266227975,10384,Chocobo1,2019-03-17T07:50:57Z,(I don't feel strongly just want to point out) that Log::MsgTypes will fit into an `int` so you can treat it as a normal variable.
266228018,10384,Chocobo1,2019-03-17T07:52:48Z,"to keep up with latest trend :\\
`const int sourceRow`
`const QModelIndex index `
`const Log::MsgType type `"
266228135,10384,Chocobo1,2019-03-17T07:56:55Z,"I think this is not a a very friendly constructor, just take the usual const reference or use move semantics `&&` & `std::move()`."
266228151,10384,Chocobo1,2019-03-17T07:57:24Z,`const int role`
266228303,10384,Chocobo1,2019-03-17T08:02:42Z,"2 things here:
1. you can use `Qt::blue`
2. https://doc.qt.io/qt-5/qcolor.html#setNamedColor
  Using `Qt::green` and QColor::setNamedColor(""green"") could result in different colors, you sure about this change?"
266228367,10384,Chocobo1,2019-03-17T08:05:19Z,"nitpick, no need to chain it with `else if`:
```c++
if (role == Qt::DisplayRole) {
    return item.first;
}
if (role == Qt::UserRole) {
    return item.second;
}
if (role == Qt::ForegroundRole) {
    // ...
}
```"
266228471,10384,Chocobo1,2019-03-17T08:08:13Z,`void LogView::copySelection() const`?
266228501,10384,Chocobo1,2019-03-17T08:09:17Z,`const QAction *res`
266228530,10384,Chocobo1,2019-03-17T08:11:04Z,seems this is redundant since you already set the parent pointer to `this`.
266228579,10384,Chocobo1,2019-03-17T08:13:03Z,why not add `this` as the second parameter?
266230104,10384,glassez,2019-03-17T09:02:20Z,"Guys, think! Why all this trouble (`swap()`, `move()`, ...)? Why not just initialize `m_items` from const ref parameter?"
266230158,10384,glassez,2019-03-17T09:03:48Z,Add `Q_DISABLE_COPY`.
266230272,10384,glassez,2019-03-17T09:06:57Z,I would use struct instead of pair.
266230373,10384,glassez,2019-03-17T09:09:42Z,To all QObject subclasses.
266233596,10384,sledgehammer999,2019-03-17T10:40:56Z,">Why not just initialize m_items from const ref parameter?

Won't this induce a copy?"
266233897,10384,glassez,2019-03-17T10:51:33Z,Did you forget Qt basics? Consider [Implicit Sharing](https://doc.qt.io/Qt-5/implicit-sharing.html) again.
266234143,10384,sledgehammer999,2019-03-17T10:59:28Z,"In old code these colors were written as named colors aka `QColor(""blue"")`, which used the SVG standard definition to convert them.
In new code, I use the RGB constructor using the same values as the SVG standard. Plus, IMO, it is faster code to use this constructor."
266241536,10384,sledgehammer999,2019-03-17T14:16:05Z,"IMO, I like it with the `else if` because logically they belong together."
266241622,10384,sledgehammer999,2019-03-17T14:18:11Z,"The new struct would need to be seen by 3-4 different classes.
I prefer QPair, since it is easier to use in this case. I don't need to investigate in which header to declare the new struct to be seen by all other classes."
266241839,10384,glassez,2019-03-17T14:23:07Z,Then do it without `return` (just assing local var and then return it at the end).
266242132,10384,glassez,2019-03-17T14:30:03Z,"> I don't need to investigate in which header to declare the new struct to be seen by all other classes.

You can produce its own header.
>The new struct would need to be seen by 3-4 different classes.

That's why it's bad! Using such abstract things as a pair in interfaces will lead to poorly readable (and maintainable) code. Isn't it? Pair is good in some general algorithms (algorithm templates).

Although, you can just brush me off here..."
266242360,10384,glassez,2019-03-17T14:35:31Z,"Essentially it is **LogMessage** class/struct (which consists of the message itself and its type).
You can also use it in some other places, e.g. in `void LogModel::appendLine(const QString &line, const Log::MsgType &type);`"
266242526,10384,glassez,2019-03-17T14:39:36Z,"To be consistent with Qt naming scheme it should be **LogWidget**. **View** is a widget that display content of model in a specific way (e.g. QTreeView, QListView etc.). When some view is bound with model then it has Widget suffix (e.g. QListWidget, QTreeWidget)."
266242936,10384,sledgehammer999,2019-03-17T14:49:04Z,OK. I understand. Will be renamed.
266247043,10384,Chocobo1,2019-03-17T16:19:21Z,"Should I keep nagging about `const`? honest question.
I would add them myself, but I find it a bit disturbing to keep mentioning it..."
266247104,10384,Chocobo1,2019-03-17T16:20:47Z,`logger->getMessages()` returns a variable not a reference.
266247331,10384,Chocobo1,2019-03-17T16:27:36Z,"now it is an usual variable, you should strip out the `const` -> `Log::MsgTypes types = Log::ALL`
and below too."
266247393,10384,Chocobo1,2019-03-17T16:29:12Z,you missed here: `Log::MsgType type = Log::NORMAL`
266247430,10384,Chocobo1,2019-03-17T16:30:12Z,and here `Log::MsgType type = Log::NORMAL`
266247702,10384,Chocobo1,2019-03-17T16:36:45Z,"OK, I'm just think that someone would likely to replace `QColor(0, 0, 255)` with `Qt::blue` and call it a cleanup (while it is not), to make it more explicit, you could define `const QRgb cssBlue = 0x0000FF;` and use `QColor(cssBlue);` here."
266247823,10384,Chocobo1,2019-03-17T16:39:04Z,"I would even use `switch (role)` here, just sharing my thought not insisting."
266249469,10384,sledgehammer999,2019-03-17T17:20:03Z,"IMO, too much work."
266249501,10384,sledgehammer999,2019-03-17T17:20:40Z,">I would even use switch (role)

Which is what I ended up doing locally before looking again here."
266251263,10384,sledgehammer999,2019-03-17T18:01:25Z,"I have seen many cases in our current code that local variables are const reference initialized. Did we change views on that practice?

Since this involves an implicitly shared container it doesn't matter much in this case."
266251326,10384,sledgehammer999,2019-03-17T18:03:07Z,"Honest question: Since I am not an expert, why `const` isn't favored in this case?"
266251961,10384,sledgehammer999,2019-03-17T18:16:20Z,"Sorry. Now I think I got all of them. If not, don't hesitate to leave a comment."
266251993,10384,sledgehammer999,2019-03-17T18:17:00Z,Irrelevant in new code
266252001,10384,sledgehammer999,2019-03-17T18:17:13Z,Irrelevant in new code
266252338,10384,sledgehammer999,2019-03-17T18:23:56Z,I introduced a struct.
266253542,10384,LordNyriox,2019-03-17T18:51:31Z,"@sledgehammer999:  You could add a line-note clarifying that you deliberately hard-coded the colors for performance reasons.  That should at least discourage users from carelessly ""simplifying"" the color definitions. "
266401453,10384,Chocobo1,2019-03-18T11:42:59Z,">Did we change views on that practice?

Don't recall anything. AFAIK we only do ""const reference initialize"" when the function returns a const reference, for anything else a normal variable."
266402504,10384,Chocobo1,2019-03-18T11:46:44Z,"The gist is, the header file is like a contract for the clients using the code and declaring `const` for a local variable means nothing to the clients, it only has meaning in function definition (in .cpp file)."
266471845,10384,sledgehammer999,2019-03-18T14:39:32Z,I left a comment
266472228,10384,sledgehammer999,2019-03-18T14:40:17Z,"I removed it from the header file, but left it in the cpp. Is that ok?
PS: I did in a couple other places too."
266742655,10384,Chocobo1,2019-03-19T06:10:52Z,">I removed it from the header file, but left it in the cpp. Is that ok?

That is correct."
266742807,10384,Chocobo1,2019-03-19T06:11:45Z,`const int role = Qt::DisplayRole` -> `int role = Qt::DisplayRole`
266742936,10384,Chocobo1,2019-03-19T06:12:35Z,`const int sourceRow` -> `int sourceRow`
268506810,10384,glassez,2019-03-25T07:00:05Z,Redundant blank line.
272827723,10384,sledgehammer999,2019-04-07T10:22:24Z,"Is it safe to return a const reference in this context?
Since both the Logger and the models run on the same thread we don't run the risk of the circular buffer deleting the returned item, correct?"
273339219,10384,Chocobo1,2019-04-09T06:19:57Z,"you can write the shorthand `{-1, -1};` and below."
273339728,10384,Chocobo1,2019-04-09T06:22:20Z,`m_itemRange`?
273340462,10384,Chocobo1,2019-04-09T06:25:32Z,"`at()` method will do boundary checks and throw exception if not valid, since you already validates the index why not use `operator[]`?"
273340653,10384,Chocobo1,2019-04-09T06:26:19Z,I would add parentheses here.
273341001,10384,Chocobo1,2019-04-09T06:27:53Z,`++m_items.first` and below
273341578,10384,Chocobo1,2019-04-09T06:30:28Z,"`m_items = {-1, -1};` and below."
273342301,10384,Chocobo1,2019-04-09T06:33:27Z,no need for this `else`
273343451,10384,Chocobo1,2019-04-09T06:38:13Z,"I would use `std::max`

and combine into: `m_items = {std::max(m_items.first, msg.id), msg.id};`"
273350230,10384,Chocobo1,2019-04-09T07:04:43Z,parentheses: `(count - 1)`
273352903,10384,Chocobo1,2019-04-09T07:14:06Z,"can't resist, I would write it as:
```c++
const QString text = QString(""%1 - "").arg(time.toString(Qt::SystemLocaleShortDate))
    + (peer.blocked ? tr(""%1 was blocked %2"", ""x.y.z.w was blocked"").arg(peer.ip, peer.reason)
                    : tr(""%1 was banned"", ""x.y.z.w was banned"").arg(peer.ip));

        
```"
273358023,10384,Chocobo1,2019-04-09T07:31:15Z,"IMO it is really hard to catch up with its logic, maybe it is better to have 2 functions:
1. `std::pair<int, int> Logger::getMessagesRange() const`: that simply return {start, end} ID ranges of `m_messages`.
2. Helper function `std::pair<int, int> getValidMessagesRange(const int lastKnownId) const` this could be at logfiltermodel.cpp (outside of logger.cpp), that computes valid ranges by taking `Logger::getMessagesRange()` and `lastKnownId` into consideration.

Same applies to the Peers part."
273839724,10384,glassez,2019-04-10T08:18:07Z,">Since both the Logger and the models run on the same thread we don't run the risk of the circular buffer deleting the returned item, correct?

It's incorrect thinking at all. You shouldn't rely on some particular use case(s) when you implement any interface."
274520612,10384,glassez,2019-04-11T16:50:07Z,There is error here. You must not return reference to temporary!
275168432,10384,sledgehammer999,2019-04-14T18:27:44Z,"Then return a temporary instead?
Honestly I can't think of a way around it. I mean: I don't know how to allow external access to the saved items without copying them AND without locking the circular buffer."
275168490,10384,sledgehammer999,2019-04-14T18:29:12Z,You're correct. I initially wrote the function to return a temporary.
275168565,10384,sledgehammer999,2019-04-14T18:31:26Z,"This returns the valid messages from a known last ID. (or none ID if you want all the range).
It is basically the counterpart of `getMessages()`"
275168743,10384,sledgehammer999,2019-04-14T18:36:10Z,"That's not the same. A negative value is an invalid ID and indicates an uninitialized log buffer. After the first message, `first` should be less than `second`."
275168800,10384,sledgehammer999,2019-04-14T18:37:31Z,"IMO, it is more clear now."
275626302,10384,glassez,2019-04-16T04:34:23Z,">I don't know how to allow external access to the saved items without copying them

There is no thread-safe way to do it. So if you want Logger to be thread-safe you can't return references to internal data.
>without locking the circular buffer.

You should lock it every time you read/write it. I.e. you still should lock it here."
276004388,10384,sledgehammer999,2019-04-16T21:41:44Z,"I know all that.
But since you advised on not actually duplicating the log messages in a vector/list in the Model, what's the alternative here? Let this function return a `Log::Msg` instead?
This function is used by the Model multiple times in row when the Model responds to the various `Qt::roles` via `Model::data()`. Even when you only hover the cursor up and down on the View's items.
Is it a good idea to continually create such short-lived small objects? (I mean the `Log::Msg` returned by the function)."
276102390,10384,glassez,2019-04-17T06:58:27Z,">This function is used by the Model multiple times in row when the Model responds to the various `Qt::roles` via `Model::data()`. Even when you only hover the cursor up and down on the View's items.

It isn't the Logger problem. It should have valid interface and implementation according to its own subject domain. It there is a performance problem with LogModel-to-Logger data exchange due to its thread-safity it should be solved in LogModel. Although I remind you once again that you should measure the extent of its impact on performance, because it may be insignificant for GUI. Otherwise the caching data in the LogModel is probably required to solve it."
393073639,10384,jagannatharjun,2020-03-16T14:38:03Z,"consider the definition of Log::Msg
```
    struct Msg
    {
        int id;
        qint64 timestamp;
        MsgType type;
        QString message;
    };
```
It contains ints with aggregate size not much more than the size of pointer and QString which are internally reference counted, so is this really an issue?"
393088866,10384,jagannatharjun,2020-03-16T14:59:03Z,I meant by performance implication due to which we're trying to return a reference
1143006946,18735,glassez,2023-03-21T08:09:11Z,"It doesn't look expected to me.
In addition, I would refrain from unrelated changes that may slow down the review of main PR changes."
1143008263,18735,glassez,2023-03-21T08:10:42Z,"Please be consistent with existing names:
```suggestion
    constexpr const StringOption WEBUI_USERNAME_OPTION {""webui-username""};
    constexpr const StringOption WEBUI_PASSWORD_OPTION {""webui-password""};
```"
1143008901,18735,glassez,2023-03-21T08:11:27Z,"```suggestion
        + wrapText(QObject::tr(""Change the Web UI username""))
```"
1143009086,18735,glassez,2023-03-21T08:11:40Z,"```suggestion
        + wrapText(QObject::tr(""Change the We bUI password""))
```"
1143010063,18735,glassez,2023-03-21T08:12:50Z,"```suggestion
    QString webUiUsername;
    QString webUiPassword;
```"
1143022945,18735,glassez,2023-03-21T08:26:41Z,"```suggestion
        if (const bool username = !params.changeWebuiUsername.isEmpty()
            , password = !params.changeWebuiPassword.isEmpty()
            ; username || password)
```"
1143041750,18735,glassez,2023-03-21T08:45:30Z,"We don't exit app when Web UI port is changed via command line. Is there any strong reason to behave differently in this case?
If not, then I would also move username/password processing to Application class next to the WebUI port processing."
1143042479,18735,glassez,2023-03-21T08:46:11Z,I would declare constants for default username/password.
1143047783,18735,glassez,2023-03-21T08:50:32Z,"```suggestion
        LogMsg(tr(""WebAPI login failure. Reason: Remote connection with the default credentials is prohibited."")
            , Log::WARNING);
        throw APIError(APIErrorType::AccessDenied
            , tr(""Remote connection with the default credentials is prohibited. Change the default credentials by connecting from the local network, or by using the %1 and/or %2 command line parameters.""
                , ""Remote connection with the default credentials is prohibited. Change the default credentials by connecting from the local network, or by using the '--change-webui-username' and/or '--change-webui-password' command line parameters."")
                    .arg(u""'--webui-username'""_qs, u""'--webui-password'""_qs));
```"
1145269721,18735,Chocobo1,2023-03-22T18:50:57Z,"I would just use QByteArray for the type if possible.
```suggestion
    inline const QByteArray defaultPassword = QByteArrayLiteral(""ARQ77eY1NUZaQsuDHbIMCA==:0WMRkYTUWVT9wVvdDtHAjU9b3b7uB8NR1Gur2hmQCvCDpm39Q+PsJRJPaCU51dEiz+dTzh8qbPsL8WkFljQYFQ=="");
```"
1145511804,18735,sledgehammer999,2023-03-22T23:27:08Z,"FYI, `QByteArray` can't be `constexpr`."
1145662797,18735,glassez,2023-03-23T04:18:33Z,I don't think `constexpr` is important in this case.
1145695583,18735,Chocobo1,2023-03-23T05:29:36Z,"no need to obsess with constexpr when it is already compile-time:
https://doc.qt.io/qt-6/qbytearray.html#QByteArrayLiteral
>The macro generates the data for a [QByteArray](https://doc.qt.io/qt-6/qbytearray.html) out of the string literal ba at compile time. Creating a [QByteArray](https://doc.qt.io/qt-6/qbytearray.html) from it is free in this case, and the generated byte array data is stored in the read-only segment of the compiled object file."
32374258,2757,sledgehammer999,2015-06-13T21:53:16Z,"@glassez this hooks into classes you're more familiar with. Do you have any objections with this commit?
"
32374329,2757,sledgehammer999,2015-06-13T22:02:31Z,"Move all implementation code into .cpp
"
32374337,2757,sledgehammer999,2015-06-13T22:03:19Z,"Move them into the .cpp
"
32374339,2757,sledgehammer999,2015-06-13T22:03:25Z,"same here
"
32374343,2757,sledgehammer999,2015-06-13T22:04:32Z,"member variables should be named `m_XXX` eg `m_xData` or `m_properties`
"
32374349,2757,sledgehammer999,2015-06-13T22:05:07Z,"No underscores. `m_maxCapacity` (for all variables)
"
32374366,2757,sledgehammer999,2015-06-13T22:07:55Z,"If possible forward declare the classes instead.
"
32374370,2757,sledgehammer999,2015-06-13T22:08:25Z,"If possible forward declare as much as possible.
"
32374374,2757,sledgehammer999,2015-06-13T22:09:05Z,"`onPeriodChange(int perioed)` etc
"
32374393,2757,sledgehammer999,2015-06-13T22:12:09Z,"I think all these settings (`m_plot->blah blah`) could be moved inside the constructor of `QSpeedPlotView`
"
32374403,2757,sledgehammer999,2015-06-13T22:13:58Z,"This way you might remove setGraphName/setGraphPen if they're not needed.
"
32374412,2757,sledgehammer999,2015-06-13T22:15:27Z,"To avoid possible confusion with the Qt classes rename the class to `SpeedPlotView`
"
32374424,2757,sledgehammer999,2015-06-13T22:17:23Z,"add another entry at the end named ""NB_COLUMNS"". Read my other comment on why.
"
32374443,2757,sledgehammer999,2015-06-13T22:19:12Z,"After you append NB_COLUMNS then you change this to `for (int id = UP; id < NB_COLUMNS; ++id)`.
If in the future another ID is added, it will not be needed to come here and change the code.
"
32380233,2757,glassez,2015-06-14T14:33:47Z,"Move open brace to next line. See [Coding style](https://github.com/qbittorrent/qBittorrent/wiki/Coding-style).
"
32380438,2757,glassez,2015-06-14T14:47:55Z,"Agree. setGraphXXX() make sense only if these properties changing at run time also makes sense.
"
32380457,2757,glassez,2015-06-14T14:50:23Z,"All QObject children will be deleted automatically (in QObject destructor).
"
32380958,2757,glassez,2015-06-14T15:46:55Z,"Get rid of that signal. The signals belong to the external interface of the class.
Call graphUpdate() directly from this thread and via QMetaObject::invokeMethod from other.
"
32382615,2757,glassez,2015-06-14T18:22:43Z,"private
"
32382635,2757,glassez,2015-06-14T18:24:26Z,"private slots
"
32893925,2757,onto,2015-06-21T14:28:33Z,"I don't understand what you mean, can you advise me?
"
32894026,2757,onto,2015-06-21T14:42:31Z,"But I wouldn't to split declaration of graphs to different files.
"
32895566,2757,sledgehammer999,2015-06-21T17:51:46Z,"You may want to google for ""c++ forward declaration"".
First let's assume you move all the implementation code below into a .cpp file and leave this header clean.
Instead of doing here `#include <QPen>` you can do this simple thing: `class QPen;`  <-- this is the forward declaration
Then in the .cpp you must do `#include <QPen>`
NOTE: This isn't possible for all headers. Basic rules can be found [here](https://stackoverflow.com/a/553869)

From those 3 includes I think QPen, QQueue and QMap can be forward declared. If you get weird compilation errors. About this comment and I'll help you.
"
32895629,2757,sledgehammer999,2015-06-21T17:58:08Z,"Here you set a lot of properties on the `m_plot` object which is of type `QSpeedPlotView`.
And most of these setGraphXXX() are only called here and only once.
So it makes a lot of sense to setup these properties when constructing the `m_plot` object instead. This means you should initialize the various stuff inside `QSpeedPlotView::QSpeedPlotView() directly`
What do you say?
"
32895645,2757,onto,2015-06-21T18:00:20Z,"Ok, i understand what you mean, i use forward declaration before, but only for fix circular dependency errors.
"
32895706,2757,sledgehammer999,2015-06-21T18:05:58Z,"> but only for fix circular dependency errors.

Just so you know another reason it is useful: For a project with many .h/.cpp files, forward declaration reduces the time needed for compilation. The compiler doesn't need to open the included headers for every place YOUR header gets included in YOUR code.
Headers are small files but filesystem **access** is tremendously slow compared to the speed our CPUs can compile stuff.
"
32895746,2757,onto,2015-06-21T18:10:32Z,"```
In file included from gui/properties/speedplotview.cpp:1:0:
gui/properties/speedplotview.h:6:7: error: template argument required for 'class QMap'
 class QMap;
       ^
gui/properties/speedplotview.h:41:5: error: 'QQueue' is not a template
     QQueue<double> m_xData;
     ^
gui/properties/speedplotview.h:41:20: error: field 'm_xData' has incomplete type 'QQueue'
     QQueue<double> m_xData;
                    ^
gui/properties/speedplotview.h:42:15: error: 'QQueue' is not a template
     QMap<int, QQueue<double> > m_yData;
....
```

Only for QPen without errors. I think that because QMap and QQueue are templates.
"
32895803,2757,sledgehammer999,2015-06-21T18:14:26Z,"Try doing the declaration this way:

``` c++
class QQueue<double>;
class QMap<int, QQueue<double> >;
```
"
32895821,2757,sledgehammer999,2015-06-21T18:15:54Z,"No I am wrong. You use those 2 for declaring member variables. Those cannot be forward declared.
"
32895837,2757,sledgehammer999,2015-06-21T18:18:12Z,"Move this struct declaration into the .cpp file.
And just do here `struct GraphProperties`. I hope this forward declaration works.
"
32371912,3150,sledgehammer999,2015-06-13T16:49:41Z,"I suppose this forward declaration doesn't work and you needed to include peerinfo,h, correct? If yes, remove this then. Otherwise remove the include.
"
32371948,3150,sledgehammer999,2015-06-13T16:53:50Z,"You don't need to do this. It is called automatically.
"
32371971,3150,sledgehammer999,2015-06-13T16:59:04Z,"logger message instead. NORMAL type?
"
32371973,3150,sledgehammer999,2015-06-13T16:59:20Z,"indentation
"
32371983,3150,sledgehammer999,2015-06-13T17:00:34Z,"Forget this. I saw that you use a QMessageBox to inform the user.
"
32371996,3150,sledgehammer999,2015-06-13T17:02:15Z,"`m_peersList` or `m_peers`
"
32372039,3150,sledgehammer999,2015-06-13T17:06:21Z,"Don't you need to first extract the ip/port and then remove the brackets(`[]`) ? If the user hasn't specified a port for the IPv6 address you'll extract the last bit as a port...
"
32372041,3150,sledgehammer999,2015-06-13T17:06:49Z,"indentation
"
32372051,3150,sledgehammer999,2015-06-13T17:07:24Z,"indentation
"
32372056,3150,sledgehammer999,2015-06-13T17:07:51Z,"indentation for these 3 lines too.
"
32372115,3150,sledgehammer999,2015-06-13T17:12:27Z,"Reset the translatable option in Qt Creator. It will delete the above lines.
Since the textedit is empty, the translators will not have anything to translate anyway.
"
32372126,3150,sledgehammer999,2015-06-13T17:14:02Z,"IMO, it should have the same text as the label.
"
32372790,3150,glassez,2015-06-13T18:47:07Z,"Header must be moved to peersadditiondlg.cpp
"
32372799,3150,glassez,2015-06-13T18:48:23Z,"I mean `#include ""core/bittorrent/peerinfo.h""`.
"
32372828,3150,sledgehammer999,2015-06-13T18:54:32Z,"Unless QList<> doesn't work with forward declaration.
"
32372855,3150,glassez,2015-06-13T18:55:34Z,"This method has been implemented too complicated.
"
32372872,3150,ngosang,2015-06-13T18:57:21Z,"I don't mind but I need a clear answer.
"
32372894,3150,sledgehammer999,2015-06-13T18:59:51Z,"Sorry for being ambiguous. Yes, please make it have the same text/example as the label.
"
32373002,3150,ngosang,2015-06-13T19:15:36Z,"It is called automatically only if it's in the .ui file.
"
32373017,3150,sledgehammer999,2015-06-13T19:17:26Z,"You're correct. Then you don't need to change this.
"
32373043,3150,ngosang,2015-06-13T19:21:08Z,"@glassez I can't do that.

```
In file included from moc_peersadditiondlg.cpp:9:0:
gui/properties/peersadditiondlg.h:45:18: error: ‘BitTorrent’ no se declaró en este ámbito
     static QList<BitTorrent::PeerAddress> askForPeersEndpoints();
                  ^
gui/properties/peersadditiondlg.h:45:41: error: el argumento de plantilla 1 es inválido
     static QList<BitTorrent::PeerAddress> askForPeersEndpoints();
                                         ^
gui/properties/peersadditiondlg.h:46:11: error: ‘BitTorrent’ no se declaró en este ámbito
     QList<BitTorrent::PeerAddress> m_peersList;
           ^
gui/properties/peersadditiondlg.h:46:34: error: el argumento de plantilla 1 es inválido
     QList<BitTorrent::PeerAddress> m_peersList;
```
"
32373057,3150,ngosang,2015-06-13T19:22:42Z,"@sledgehammer999 I'm finishing this. What I should do?
"
32373072,3150,ngosang,2015-06-13T19:23:30Z,"@sledgehammer999 I'm finishing this. What I should do?
"
32373096,3150,sledgehammer999,2015-06-13T19:27:59Z,"Didn't I answer you? `Format: IPv4:port / [IPv6]:port`
"
32373153,3150,glassez,2015-06-13T19:35:36Z,"> It is called automatically only if it's in the .ui file.

Typically, such connections are created in the ui. Why this is here?
"
32373167,3150,sledgehammer999,2015-06-13T19:38:26Z,"I suspect he just copied the code from `peeraddition.cpp`
"
32373174,3150,ngosang,2015-06-13T19:38:45Z,"Because I copied it from the addTrackers window (with the old code not yours) and it was a mess... I'm doing in ui now.
"
32373178,3150,ngosang,2015-06-13T19:39:52Z,"@glassez I can try with RegEx. Any suggestion?
"
32373263,3150,glassez,2015-06-13T19:50:24Z,"I didn't mean that!
At least, peer parsing should be done in a separate function.
"
32374175,3150,sledgehammer999,2015-06-13T21:42:33Z,"The opening bracket must be in the beginning.
"
32374198,3150,sledgehammer999,2015-06-13T21:46:15Z,"What happens if user enters just and IPv6 ip without a port? eg `2001:0db8:85a3:0000:0000:8a2e:0370:7334`
I think it is better to check if there is a dot, which means IPv4. If not treat the IP as IPv6 (and try to detect brackets)
"
32374214,3150,ngosang,2015-06-13T21:48:30Z,"Not according to this, only in the else: https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#a-multiple-tests
"
32374236,3150,ngosang,2015-06-13T21:50:52Z,"I made the port always compulsory (as it's in the format label) because there isn't a default port. Each client has his own default port and most of them chose the port randomly.
"
32374297,3150,sledgehammer999,2015-06-13T21:57:53Z,"I think you misunderstood me. An IPv6 ip with port will always begin with an opening bracket(`[`). So instead test if the first character is an opening bracket in the string.
"
32374322,3150,ngosang,2015-06-13T22:01:26Z,"Done. About the other comment?
"
32374481,3150,sledgehammer999,2015-06-13T22:24:52Z,"Don't perform the split twice. Just save in a temp var.
"
32374486,3150,sledgehammer999,2015-06-13T22:25:24Z,"same here
"
32376787,3150,glassez,2015-06-14T06:22:57Z,"Unneeded variable.
"
32376801,3150,glassez,2015-06-14T06:24:00Z,"Get rid of that.
"
32394535,3150,glassez,2015-06-15T06:42:32Z,"Fix braces in if-else block.
"
32394690,3150,glassez,2015-06-15T06:46:20Z,"Explicit test is needed only if empty list is special case.
"
32394858,3150,glassez,2015-06-15T06:50:31Z,"Why toString()???
"
32395135,3150,ngosang,2015-06-15T06:56:31Z,"@glassez It's for display the MsgBox only if not empty.

```
QMessageBox::information(0, tr(""Peer addition""), tr(""The peers were added to this torrent.""));
```
"
32395259,3150,glassez,2015-06-15T06:59:41Z,"Ok. But then there is one problem. It may happen that the list is not empty, but no peer was added.
"
32395441,3150,ngosang,2015-06-15T07:04:35Z,"@glassez True but I think It never goin to happen because the IP/port are valid at this point. I don't know what are the reasons to not be accepted, maybe in the ip filter list? I tried with a lot of weird things and never fails. Any suggestion?
"
32396318,3150,glassez,2015-06-15T07:24:35Z,"1. Leave it as is.
2. Don't show message box at all.
3. To track whether peers were really added.
"
32886402,3150,sledgehammer999,2015-06-20T17:44:45Z,"Where does `15` come from? According to [this](https://en.wikipedia.org/wiki/IPv6#Address_representation) IPv6 addresses can be shortened so eg `::1` is a valid IPv6 address.
I propose searching for the presence of dots instead, which will denote IPv4.
"
32886485,3150,sledgehammer999,2015-06-20T17:55:44Z,"This could ugly if the user has pasted a bunch of bad IPs. I propose here you just leave a logger message of type warning. Also setting a flag eg `bool invalidPeers`. Then when outside the loop check the flag a post this MessageBox saying ""Some peers couldn't be added. Check the Log for details.""
"
32895100,3150,sledgehammer999,2015-06-21T16:58:25Z,"this should be `else if` to avoid both messages to appear for the same input.
"
403821902,12434,Chocobo1,2020-04-06T04:19:43Z,You misuse Log::CRITICAL. It should only be used when qbt cannot continue to operate normally.
403822556,12434,Chocobo1,2020-04-06T04:22:55Z,I don't see why you need to use raw string literal.
403822877,12434,Chocobo1,2020-04-06T04:24:20Z,perhaps we should allow exception messages to be translated.
403823082,12434,Chocobo1,2020-04-06T04:25:28Z,do we really have to do this?
403823546,12434,Chocobo1,2020-04-06T04:27:51Z,I don't see why you need a field in this struct.
403823734,12434,Chocobo1,2020-04-06T04:28:52Z,why? I don't think this make sense.
403824792,12434,Chocobo1,2020-04-06T04:33:55Z,:\ This won't do you anything good.
403825232,12434,Chocobo1,2020-04-06T04:36:12Z,"You call LogMsg here and at exception handler, what a mess...
At this point this PR is beyond my comprehension, sorry."
404054151,12434,FranciscoPombal,2020-04-06T12:32:50Z,"Using raw string literals prevents escape hell. It's more consistent to use it everywhere, if we already use it once. What are the disadvantages?"
404055242,12434,FranciscoPombal,2020-04-06T12:34:39Z,"Ok, I guess I can make everything a `WARNING` or `INFO` instead."
404057360,12434,FranciscoPombal,2020-04-06T12:38:27Z,"Sure I could make it a variable because in this PR specifically it is only used in one scope. But in terms of design, and for future modifications, doesn't it make sense that the port number be part of this struct? The address is already there as well."
404058554,12434,FranciscoPombal,2020-04-06T12:40:21Z,Why not? Why is more leniency here not desirable? A warning will still be logged.
404058849,12434,FranciscoPombal,2020-04-06T12:40:50Z,"Again, why is more leniency here not desirable? A warning will still be logged."
404062939,12434,FranciscoPombal,2020-04-06T12:47:35Z,"This is not constructive criticism. Do you mean I should remove this logging statement specifically, or should I remove the `LogMsg` call from the `HTTPError` exception handling, or both? If so, why?"
404063403,12434,FranciscoPombal,2020-04-06T12:48:27Z,https://github.com/qbittorrent/qBittorrent/pull/12434/files#r404058554
404067633,12434,FranciscoPombal,2020-04-06T12:55:29Z,Fixed.
404068316,12434,FranciscoPombal,2020-04-06T12:56:35Z,Downvotes without explanation are not helpful.
404068945,12434,FranciscoPombal,2020-04-06T12:57:36Z,"Probably a good idea, will handle that after the raw string literals question is resolved."
404074317,12434,glassez,2020-04-06T13:05:52Z,">It's more consistent to use it everywhere, if we already use it once.

This is a very destructive idea, IMO. Everything must have its place and time. It is not designed as a replacement for regular string literals."
404075698,12434,glassez,2020-04-06T13:07:58Z,">Downvotes without explanation are not helpful.

Then they would be useless..."
404091421,12434,Chocobo1,2020-04-06T13:30:46Z,"IMO ~~we~~ you are wasting CPU cycles on something that has no effect (except your mind of ""more leniency"")..."
404092415,12434,Chocobo1,2020-04-06T13:32:10Z,"What if I really want to set it to a negative value and does not want any peer in list? then you would give the unexpected result, no?"
404096282,12434,Chocobo1,2020-04-06T13:37:41Z,">doesn't it make sense that the port number be part of this struct? 

No, at least not in this PR."
404097957,12434,Chocobo1,2020-04-06T13:39:54Z,I don't think you really answered my question...
404100075,12434,Chocobo1,2020-04-06T13:42:52Z,"Sorry, all of this is over my head, I couldn't even give a proper response..."
404106287,12434,glassez,2020-04-06T13:51:10Z,">Invalid ""event"" parameter, assuming ""empty""

Is this behavior a part of protocol standard? If no I strongly object to encourage invalid clients! All invalid requests should be dropped."
404109000,12434,Chocobo1,2020-04-06T13:54:43Z,"On a second thought, maybe this does make sense, I mean to adhere to BEP. 

>https://github.com/qbittorrent/qBittorrent/pull/12434/files#r404058554

This is not a constructive response. I see you're even lazy to state your reason for the change."
404110171,12434,glassez,2020-04-06T13:56:03Z,If negative value isn't acceptable here then the entire request is invalid (unless any fallback is defined by protocol).
404111089,12434,Chocobo1,2020-04-06T13:57:10Z,it is better to use `peerIdIter->left(20)` on previous line.
404114763,12434,Chocobo1,2020-04-06T14:01:53Z,">If negative value isn't acceptable here then the entire request is invalid (unless any fallback is defined by protocol).

Well, the standard is really obscure on this, IMO this gives room for interpretation. Personally I would treat negative value as-is and return no peer.
EDIT: apparently I was preferring to treat it as invalid request in the past.
"
404116723,12434,FranciscoPombal,2020-04-06T14:04:26Z,"@glassez BEP 3 does not specify what should be done in the case of an invalid value for this parameter (i.e. it does not explicitly say ""a request containing any other values should/must be considered invalid""). So I think it is better to be lenient, and just log a warning.Otherwise, we can just keep the logging statement explaining that the request was dropped."
404116979,12434,FranciscoPombal,2020-04-06T14:04:47Z,"@Chocobo1
In that case you just set numwant = 0, same as before. The difference now is that negative values will not result in an error.

@glassez 
https://github.com/qbittorrent/qBittorrent/pull/12434#discussion_r404116723"
404121638,12434,FranciscoPombal,2020-04-06T14:11:07Z,"@glassez 
> > Downvotes without explanation are not helpful.
> 
> Then they would be useless...

Only if we start acting like redditors, which I hope doesn't happen.

> This is a very destructive idea, IMO. Everything must have its place and time. It is not designed as a replacement for regular string literals.

But for these specific usages, what is the problem? By everywhere, I meant ""everywhere in the embedded tracker code"", changing it everywhere in the code base might indeed not be desirable, but that's out of scope of this PR anyway.

I can understand undoing this change here if you are of the opinion that ""changing to raw string literals where it makes sense should be done at once for the whole code base in another PR"". Is that the case?"
404123519,12434,Chocobo1,2020-04-06T14:13:27Z,">In that case you just set numwant = 0, same as before. 

Is it really that hard to understand that people/hackers will try to use any value here? Now you give unexpected results (""falling back to default"", what??) and you just hand waving my concerns? (you do it all the time)
I'm sorry I cannot continue any more. Do as you want, this has nothing to do with me.
"
404123976,12434,FranciscoPombal,2020-04-06T14:14:04Z,"@Chocobo1

I mean, am I doing something really bad or what? I just wanted a bit more logging overall, am I doing it in the wrong places in general?

In this specific place and the `HTTPError` exception handling, the behavior doesn't change at all, the only difference is the logging statements."
404128839,12434,glassez,2020-04-06T14:19:56Z,"> By everywhere, I meant ""everywhere in the embedded tracker code""

It doesn't change my answer.
>I can understand undoing this change here if you are of the opinion that ""changing to raw string literals where it makes sense should be done at once for the whole code base in another PR"". Is that the case?

No.
I just mean that use of raw string literal has no sense in case of simple string like this one. And some kind of unification is not appropriate here."
404134964,12434,FranciscoPombal,2020-04-06T14:27:46Z,"@Chocobo1
> This is not a constructive response. I see you're even lazy to state your reason for the change.

Not lazy, I only linked the response because the response would have been the exact same as for other similar comments... would you rather I had copy-pasted the exact same thing multiple times? These are all instances of apparently not-so-compliant cases where the spec does not explicitly mandate the request to fail, and where we can default to a reasonable lenient behavior.

But just to be extremely clear in this specific case:
The spec says the length is 20, so we truncate to that internally (while still logging if this happens), which is a reasonable lenient alternative to just not processing the request at all if the length is not 20, because the spec does not explicitly say ""if `peer_id` is not 20 bytes in length, the request should/must fail"". In fact, it does not explicitly state what to do at all when the length is not 20."
404142252,12434,FranciscoPombal,2020-04-06T14:36:57Z,"@Chocobo1

> it is better to use `peerIdIter->left(20)` on previous line.

Fine by me. Out of curiosity, what are the benefits?"
404143101,12434,FranciscoPombal,2020-04-06T14:37:59Z,"Ok, since you insist, and I really don't have a specific more compelling reason to do it the other way, I'll change it."
404151497,12434,FranciscoPombal,2020-04-06T14:48:47Z,"@Chocobo1

Calm down please, I'm not hand waving anything. The `numwant` field defaults to `50`, so if we don't reassign it, it stays at 50, which is safe.

Previous behavior:

- `num_want > 0`: success.
- `num_want == 0`: success (no peer list returned).
- `num_want < 0`: failure for the announcer and silent failure for the tracker ""admin"".


New behavior:

- `num_want > 0`: same as before.
- `num_want == 0`: same as before.
- `num_want < 0`: success for the announcer, using our default value for `numwant` of `50`. The tracker ""admin"" is warned that an announcer has supplied an invalid number, but a default value was used instead to still be able to service the request.

Would you rather I change the text ""falling back to default"" to ""using default value instead"" or ""using default value of 50 instead"" or ""using default value of 50""?"
404156569,12434,FranciscoPombal,2020-04-06T14:55:06Z,"@glassez Ok, I'll change it to normal literals where it is not needed."
404158762,12434,FranciscoPombal,2020-04-06T14:57:53Z,"Fixed, by the way."
404160723,12434,Chocobo1,2020-04-06T15:00:15Z,">If negative value isn't acceptable here then the entire request is invalid (unless any fallback is defined by protocol).

Just to clarify my stance on this, @glassez is right, invalid parameter should stop processing (to avoid wasting more resources) and send back the error message to the peer."
404163036,12434,FranciscoPombal,2020-04-06T15:03:21Z,"Fixed, and I also changed an instance of `ushort` to `quint16`, since that's what we use elsewhere."
404163318,12434,Chocobo1,2020-04-06T15:03:41Z,Isn't it obvious? so it would copy a shorter array instead of a potentially longer one.
404169207,12434,Chocobo1,2020-04-06T15:11:40Z,"I retract this, error message for peers should stay in English."
404170511,12434,FranciscoPombal,2020-04-06T15:13:22Z,"Ok, now raw string literals are only used when the strings contain `""`. Do you think I should revert to using escaped strings also in that case?"
406265305,12434,FranciscoPombal,2020-04-09T14:55:14Z,"The thing is, while the protocol does not define a specific fallback, it does not say the requests should immediately be dropped either."
410252911,12434,FranciscoPombal,2020-04-17T14:16:50Z,"@arvidn Can we get your opinion on this matter? In this case, and also the `numwant` discussion below, is it better to be lenient and attempt serve the request if possible, falling back to a sane default, or to drop the request altogether?"
410254316,12434,FranciscoPombal,2020-04-17T14:19:11Z,"@glassez ping, like I said, raw string literals are now only used when justifiable (i.e. when the string itself also contains `""`). Is this acceptable, or do you really want me to revert to using escaped strings all around?"
410284320,12434,arvidn,2020-04-17T15:05:24Z,"without having thought about this case very much, generally I think it's a good default to be strict. (imagine if all bittorrent clients had required bencoded dictionaries to be sorted correctly for instance, clients wouldn't have to go out of their way to support invalid encodings as they do today).

Maybe some relevant questions for this case. (1) a client that sends an invalid request to the tracker, is it likely to be a correct about other arguments, say the info-hash? (2) is it the kind of peer that a tracker should hand out to ther peers?"
410286404,12434,arvidn,2020-04-17T15:08:53Z,"it's not obvious to me that `&numwant=-1` is any more correct (or should be accepted to any greater degree) than `&numwant=foo`.

As far as I can tell (but I haven't thought too much about this either), the only useful values for `numwant` is `0` or a *positive* number.  Clients will generally want as many peers as possible, or 0 (if they are stopping for instance). And the actual number to send has to be up to the tracker to decide."
410349543,12434,FranciscoPombal,2020-04-17T16:55:15Z,"@arvidn I see.
1, 2 - Probably not, on both counts. So I guess being strict is the better option.

But in any case, shouldn't the spec be updated to be more strict? At least the V2 spec, as updating the original one is not meaningful at this point. If the spec is not strict enough, it allows implementations to make assumptions that could lead to ossification of the protocol - the most well-known case of this is TLS 1.x -> 1.3 I think. Isn't it desirable to prevent that?"
410407273,12434,FranciscoPombal,2020-04-17T18:46:47Z,"Alright, I removed the leniency changes."
410684864,12434,glassez,2020-04-18T11:18:22Z,Due to comment above this message is incorrect to be here since this place can be reached in case of plain IPv4 address.
410687737,12434,FranciscoPombal,2020-04-18T11:48:19Z,"@glassez 
This message is supposed to be printed every time anything _except_ a **plain IPv6** is used. This includes the case of a **plain IPv4**.
In other words, this message prints ""if address is indeed IPv4 or if it is an IPv4-mapped IPv6 address"", which is what the comment above says.

The point of this is to help track and diagnose connectivity issues with the embedded tracker when IPv4-mapped IPv6 addresses are used and possibly other cases."
410690047,12434,glassez,2020-04-18T12:13:17Z,">This includes the case of a plain IPv4.

But it is a trivial case. Why should it be logged (unlike plain IPv6)?"
410690648,12434,FranciscoPombal,2020-04-18T12:19:05Z,@glassez because I did not find an easy way to exclude it.
410695303,12434,glassez,2020-04-18T12:58:32Z,Can't you check whether it was IPv4 in the first place (before it was adjusted)?
410698738,12434,FranciscoPombal,2020-04-18T13:28:39Z,"@glassez Of course I can. Brain freeze, sorry. It's fixed now."
410712058,12434,Chocobo1,2020-04-18T15:27:39Z,"Log::WARNING is misused. Any error from client isn't relevant to qbt normal operations. Or another viewpoint, the user hasn't do anything wrong related to the warning, so it is a debug level msg or info level msg at best."
410712235,12434,Chocobo1,2020-04-18T15:28:45Z,coding style.
412378551,12434,FranciscoPombal,2020-04-21T18:07:26Z,fixed
412378648,12434,FranciscoPombal,2020-04-21T18:07:34Z,fixed
1603320701,20833,glassez,2024-05-16T13:13:26Z,"```suggestion
    TorrentFilter(Type type
              , const std::optional<TorrentIDSet> &idSet = AnyID
```"
1603321047,20833,glassez,2024-05-16T13:13:39Z,"```suggestion
    TorrentFilter(const QString &filter
              , const std::optional<TorrentIDSet> &idSet = AnyID
```"
1603321683,20833,glassez,2024-05-16T13:14:03Z,"```suggestion
    bool setIsPrivate(const std::optional<bool> &isPrivate);

    bool match(const BitTorrent::Torrent *torrent) const;
```"
1603323045,20833,glassez,2024-05-16T13:14:56Z,"```suggestion

```"
1603324297,20833,glassez,2024-05-16T13:15:43Z,"```suggestion
//   - offset (int): set offset (if less than 0 - offset from end)
void TorrentsController::infoAction()
```"
1603326288,20833,glassez,2024-05-16T13:17:03Z,"```suggestion

TorrentFilter::TorrentFilter(const QString &filter, const std::optional<TorrentIDSet> &idSet
```"
1603326614,20833,glassez,2024-05-16T13:17:16Z,"```suggestion
}

bool TorrentFilter::setIsPrivate(const std::optional<bool> &isPrivate)
```"
1603326884,20833,glassez,2024-05-16T13:17:28Z,"```suggestion
}

bool TorrentFilter::match(const Torrent *const torrent) const
```"
1629864098,20833,Chocobo1,2024-06-06T16:39:35Z,"```suggestion
inline const QString KEY_TORRENT_IS_PRIVATE = u""is_private""_s;

```"
1629864967,20833,Chocobo1,2024-06-06T16:39:46Z,"```suggestion
        {KEY_TORRENT_IS_PRIVATE, torrent.isPrivate()},
        
```"
1629865586,20833,Chocobo1,2024-06-06T16:40:13Z,"```suggestion
    bool setIsPrivate(std::optional<bool> isPrivate);
```"
1629866382,20833,Chocobo1,2024-06-06T16:40:34Z,"```suggestion
            , std::optional<bool> isPrivate = AnyIsPrivate);
```"
1629866709,20833,Chocobo1,2024-06-06T16:40:45Z,"```suggestion
            , std::optional<bool> isPrivate = AnyIsPrivate);
```"
1629867337,20833,Chocobo1,2024-06-06T16:41:09Z,"```suggestion
bool TorrentFilter::setIsPrivate(const std::optional<bool> isPrivate)
```"
1629867558,20833,Chocobo1,2024-06-06T16:41:19Z,"```suggestion
        , const std::optional<QString> &category, const std::optional<Tag> &tag, const std::optional<bool> isPrivate)
```"
1629867735,20833,Chocobo1,2024-06-06T16:41:27Z,"```suggestion
        , const std::optional<QString> &category, const std::optional<Tag> &tag, const std::optional<bool> isPrivate)
```"
1629871916,20833,Chocobo1,2024-06-06T16:44:25Z,I would name it `setPrivate`.
1629872295,20833,Chocobo1,2024-06-06T16:44:48Z,I would name it `matchPrivate`.
1629873562,20833,Chocobo1,2024-06-06T16:45:58Z,I would name it `AnyPrivate`.
1629875108,20833,Chocobo1,2024-06-06T16:47:19Z,I would name it `m_private`.
1629877039,20833,Chocobo1,2024-06-06T16:49:01Z,I would name it `private`.
1629877360,20833,Chocobo1,2024-06-06T16:49:17Z,I would name it `AnyPrivate`.
1629878085,20833,Chocobo1,2024-06-06T16:49:53Z,I would name it `private`.
1629878226,20833,Chocobo1,2024-06-06T16:49:59Z,I would name it `private`.
1629879311,20833,Chocobo1,2024-06-06T16:50:59Z,I would name it `private`.
1630845246,20833,glassez,2024-06-07T08:32:59Z,I would strongly expect that we use the same names like the ones within returned dictionary.
1630960999,20833,ManiMatter,2024-06-07T09:51:11Z,"Same view here. To my understanding, that is as it is currently implemented."
1631250940,20833,Chocobo1,2024-06-07T13:50:11Z,">I would strongly expect that we use the same names like the ones within returned dictionary.

OK it is less problematic for this one."
1631291936,20833,glassez,2024-06-07T14:17:16Z,"> > I would strongly expect that we use the same names like the ones within returned dictionary.
> 
> OK it is less problematic for this one.

But it still needs to be changed. It is called `is_private` in another dictionary:
https://github.com/qbittorrent/qBittorrent/blob/47c05fd3a47295c3dabe241e19d2cfa031ad21c3/src/webui/api/serialize/serialize_torrent.h#L96

So I would change it to `private` in both places."
1631315770,20833,glassez,2024-06-07T14:34:12Z,"`AnyPrivate` looks confusing.

Now since we use `std::optional` these constants don't do much good. We can use `std::nullopt` directly and not bother to come up with names for these constants."
1631909518,20833,Chocobo1,2024-06-08T06:41:41Z,">We can use std::nullopt directly and not bother to come up with names for these constants.

👍 "
1638316930,20833,glassez,2024-06-13T14:25:36Z,"```suggestion
```"
1638650146,20833,glassez,2024-06-13T17:37:55Z,"```suggestion
```"
1638650907,20833,glassez,2024-06-13T17:38:40Z,"```suggestion
            , std::optional<bool> isPrivate = {});
```"
1638651179,20833,glassez,2024-06-13T17:38:58Z,"```suggestion
            , std::optional<bool> isPrivate = {});
```"
1638656328,20833,glassez,2024-06-13T17:43:44Z,"```suggestion
        {KEY_TORRENT_PRIVATE, torrent.isPrivate()},
```"
1638656549,20833,glassez,2024-06-13T17:43:57Z,"```suggestion
inline const QString KEY_TORRENT_PRIVATE = u""private""_s;
```"
1638657349,20833,glassez,2024-06-13T17:44:41Z,"```suggestion
        {KEY_PROP_PRIVATE, torrent->isPrivate()},
```"
1638657665,20833,glassez,2024-06-13T17:45:00Z,"```suggestion
const QString KEY_PROP_PRIVATE = u""private""_s;
```"
1638657932,20833,glassez,2024-06-13T17:45:18Z,"```suggestion
//   - private (bool): filter torrents that are from private trackers (true) or not (false). Empty means any torrent (no filtering)
```"
1638658379,20833,glassez,2024-06-13T17:45:40Z,"```suggestion
    const std::optional<bool> isPrivate = parseBool(params()[u""private""_s]);
```"
1639661396,20833,Chocobo1,2024-06-14T11:05:11Z,"@ManiMatter 
I wouldn't consider this resolved. Please rename all patterns of `isprivate` to `private` in both torrentfilter.h and torrentfilter.cpp"
1639665115,20833,Chocobo1,2024-06-14T11:08:29Z,"This change and line 114 in torrentscontroller.cpp is backwards incompatible for the WebAPI/WebUI.
Are we sure to introduce disruptions for the downstream projects?

Regardless, you should increment `API_VERSION` in webapplication.h due to other changes."
1639686029,20833,glassez,2024-06-14T11:28:49Z,"> This change and line 114 in torrentscontroller.cpp is backwards incompatible for the WebAPI/WebUI.
> Are we sure to introduce disruptions for the downstream projects?

It was added in ""info"" quite recently and has not yet been released, so I do not consider it a problem to change it now as a hotfix.
But in ""properties"" it has been there for a long time. So we have several solutions:
1. still change it to ""private"" in an incompatible way,
2. add a new ""private"" field, leaving the old ""is_private"" as deprecated for compatibility,
3. do not change ""properties"", and use inconsistent names,
4. use ""is_private"" everywhere.

I would vote for 1. or 2."
1639726027,20833,ManiMatter,2024-06-14T12:08:55Z,"@Chocobo1 - I have renamed the patterns where possible. I can't rename all to ""private"", since the word ""private"" is reserved in C++. Is the updated version fine with you?"
1639729766,20833,Chocobo1,2024-06-14T12:12:35Z,">I would vote for 1. or 2.

Both are acceptable to me. I'll leave it to the PR author to decide."
1639733566,20833,ManiMatter,2024-06-14T12:16:14Z,"> > I would vote for 1. or 2.
> 
> Both are acceptable to me. I'll leave it to the PR author to decide.

I am not sure of the ramifications of that decision. Personally I am totally fine to merge it as it is (i.e. it's becoming ""private"" on the properties API as well) but I don't know how much that will break. What would be your advice?"
1639815985,20833,Chocobo1,2024-06-14T13:17:32Z,">@Chocobo1 - I have renamed the patterns where possible. I can't rename all to ""private"", since the word ""private"" is reserved in C++. Is the updated version fine with you?

Yes, it is alright now.

>I am not sure of the ramifications of that decision. Personally I am totally fine to merge it as it is (i.e. it's becoming ""private"" on the properties API as well) but I don't know how much that will break. 

[Third-party UIs](https://github.com/qbittorrent/qBittorrent/wiki/List-of-known-alternate-WebUIs) and third-party services (for example sonarr if I'm not mistaken) whom shows private torrent status will possibly stop working until they switch to the new value. And they probably need to maintain backward compatibility for previous qbt versions.
"
1639831488,20833,glassez,2024-06-14T13:27:57Z,"```suggestion
const QString KEY_PROP_IS_PRIVATE = u""is_private""_s; // deprecated, ""private"" should be used instead
const QString KEY_PROP_PRIVATE = u""private""_s;
```"
1639834452,20833,glassez,2024-06-14T13:30:06Z,"```suggestion
        {KEY_PROP_IS_PRIVATE, torrent->isPrivate()}, // used for maintaining backward compatibility
        {KEY_PROP_PRIVATE, torrent->isPrivate()},
```"
1639839171,20833,glassez,2024-06-14T13:33:41Z,Implemented 2. for maintaining backward compatibility.
1639947353,20833,glassez,2024-06-14T14:49:24Z,"@Chocobo1
Shouldn't it be the following instead?
```suggestion
inline const Utils::Version<3, 2> API_VERSION {2, 11, 1};
```
Now it doesn't introduce breaking changes, does it?"
1640034105,20833,Chocobo1,2024-06-14T16:02:37Z,"yes, it should."
1640036923,20833,ManiMatter,2024-06-14T16:05:24Z,done.
1640753978,20833,glassez,2024-06-15T04:51:43Z,"```suggestion
            , const std::optional<TorrentIDSet> &idSet = AnyID
            , const std::optional<QString> &category = AnyCategory
```"
1640754086,20833,glassez,2024-06-15T04:51:59Z,"```suggestion
            , const std::optional<TorrentIDSet> &idSet = AnyID
            , const std::optional<QString> &category = AnyCategory
```"
22760398,2389,glassez,2015-01-10T17:16:41Z,"1. `QVariant`  в имени функции - лишнее. Просто `getTranserInfoMap`.
2. Если только один параметр и он выходной, то проще его заменить на возвращаемое значение:

``` c++
QVariantMap btjson::getTranserInfoMap()
```

Тогда и код выше можно сократить:

``` c++
return json::toJson(getTranserInfoMap()); 
```

``` c++
response[""server_state""] = getTranserInfoMap();
```
"
22760418,2389,glassez,2015-01-10T17:19:12Z,"Скобки вокруг `toMap(torrent)` лишние.
"
22761682,2389,glassez,2015-01-10T20:25:10Z,"Чтобы предотвратить пересылку всех данных при сетевых ошибках, нужно сделать следующее:
1. Хранить два предыдущих ответа - один тот, который мы отправили в прошлый раз, а другой, получение которого подтвердил клиент.
2. Клиент должен повторно отсылать один и тот же `rid`, пока не получит ответ (в тех случаях, когда есть проблемы с сетью и ответ до клиента не доходит).
Вот как это реализовать здесь:

``` c++
QByteArray generatePartialResponse(int processedResponseId, QVariantMap response, QVariantMap &lastAcceptedResponse, QVariantMap &lastResponse)
{
    QVariantMap partialResponse;
    int lastResponseId = lastResponse[KEY_RESPONSE_ID].toInt();

    if (lastResponseId == processedResponseId)
        // подтвердили получение предыдущего ответа
        lastAcceptedResponse = lastResponse;

    int lastAcceptedResponseId = lastAcceptedResponse[KEY_RESPONSE_ID].toInt();
    if (lastAcceptedResponseId == processedResponseId) {
        // вычисляем отличия от подтвержденного ответа
        processMap(lastAcceptedResponse, response, partialResponse, hasChanges);
        lastResponseId = (lastResponseId + 1) % 1000000 ; // cycle between 0 and 999999
        lastResponse = response;
        lastResponse[KEY_RESPONSE_ID] = lastResponseId;
    }
    else {
        // либо генерируем полный ответ
        QVariant var1, var2(response);
        var1 = QVariantMap();
        copyDataToPartialResponse(var1, var2);
        partialResponse = var1.toMap();
        partialResponse[KEY_FULL_UPDATE] = true;
    }

    partialResponse[KEY_RESPONSE_ID] = lastResponseId;

    return json::toJson(partialResponse);
}
```
"
22766342,2389,glassez,2015-01-11T12:22:50Z,"Ок. Теперь необходимо сделать так, чтобы любые запросы (с любым значением `rid`) обрабатывались корректно (ошибки могут быть и в реализации клиентов - мы же не рассчитываем только на какой-то конкретный):

``` c++
QByteArray generatePartialResponse(int processedResponseId, QVariantMap response, QVariantMap &lastAcceptedResponse, QVariantMap &lastResponse)
{
    QVariantMap partialResponse;
    bool hasChanges = false;
    bool fullUpdate = true;
    int lastResponseId = 0;
    if (processedResponseId > 0) {
        lastResponseId = lastResponse[KEY_RESPONSE_ID].toInt();

        if (lastResponseId == processedResponseId)
            lastAcceptedResponse = lastResponse;

        int lastAcceptedResponseId = lastAcceptedResponse[KEY_RESPONSE_ID].toInt();

        if (lastAcceptedResponseId == processedResponseId) {
            processMap(lastAcceptedResponse, response, partialResponse, hasChanges);
            fullUpdate = false;
        }
    }

    if (fullUpdate) {
        lastAcceptedResponse.clear();
        partialResponse = response;
        partialResponse[KEY_FULL_UPDATE] = true;
    }

    lastResponseId = lastResponseId % 1000000 + 1; // cycle between 1 and 1000000
    lastResponse = response;
    lastResponse[KEY_RESPONSE_ID] = lastResponseId;
    partialResponse[KEY_RESPONSE_ID] = lastResponseId;

    return json::toJson(partialResponse);
}
```

Так при `rid <= 0` будут передаваться все данные, как и при неверном значении `rid`.

Еще одно замечание по этой функции (и по остальным тоже) - переменная hasChanges не используется, так что ее можно убрать и отсюда и из сигнатуры всех остальных функций.
"
22766382,2389,glassez,2015-01-11T12:29:40Z,"Замени `partial` на `syncData`, раз уж мы используем теперь такую терминологию.
И в других методах.
"
22766429,2389,glassez,2015-01-11T12:34:21Z,"Здесь тоже можно поменять термины: `generatePartialResponse` => `generateSyncData`, `response` => `data`, `lastAcceptedResponse` => `lastAcceptedData`, `lastResponse` => `lastData`.
"
22766450,2389,glassez,2015-01-11T12:35:56Z,"Так же и здесь и в других местах.
"
22766472,2389,glassez,2015-01-11T12:39:32Z,"Можно использовать более короткую запись в стиле Qt:

``` c++
foreach (QString key, data.keys()) {
    // ...
}
```
"
22766632,2389,glassez,2015-01-11T13:03:45Z,"Это бессмысленно, т.к. если `!changes` верно, то `partial` и так не содержит этого ключа.
"
22766761,2389,glassez,2015-01-11T13:22:04Z,"Эту часть тоже можно упростить:

``` c++
QVariantList list = data[key].toList();
QVariantList prevList = prevData[key].toList();
QVariantList syncList;

foreach (QVariant item, list) {
    if (!prevList.contains(item))
        // новое значение
        syncList.append(item);
    else
        // существующее значение
        prevList.removeOne(item);
}

if (syncList.count() > 0)
    partial[key] = syncList;

if (prevList.count() > 0)
    // в prevList остались только удаленные значения
    partial[key + KEY_SUFFIX_REMOVED] = prevList;
```
"
22766778,2389,glassez,2015-01-11T13:24:59Z,"Кстати, можно по аналогии сделать функцию `processList()`.
"
22766855,2389,buinsky,2015-01-11T13:43:55Z,"Это излишне. Все и так работает.
"
22768580,2389,glassez,2015-01-11T18:10:50Z,"Не трогай это. Пусть будет просто структурой, чтобы подчеркнуть ее назначение.
"
22768587,2389,glassez,2015-01-11T18:13:35Z,"Здесь тоже нужно заменить `response` на `data`.
"
22768600,2389,glassez,2015-01-11T18:16:21Z,"Должен быть пробел после `for`, `while`, `if`` и т.п.
"
22768806,2389,glassez,2015-01-11T18:45:55Z,"Не используйте `int` и другие целочисленные типы в качестве `bool`. Это работает, но не отражает явно логику алгоритма. А в некоторых ситуациях (не в этой) может вообще быть ошибочно, т.к. отрицательные значения приводятся к `true`.
"
22768908,2389,glassez,2015-01-11T18:56:04Z,"Ок. Теперь необходимо сделать так, чтобы любые запросы (с любым значением rid) обрабатывались корректно (ошибки могут быть и в реализации клиентов - мы же не рассчитываем только на какой-то конкретный):

``` c++
QByteArray generatePartialResponse(int acceptedResponseId, QVariantMap data, QVariantMap &lastAcceptedData, QVariantMap &lastData)
{
    QVariantMap syncData;
    bool hasChanges = false;
    bool fullUpdate = true;
    int lastResponseId = 0;
    if (acceptedResponseId> 0) {
        lastResponseId = lastData[KEY_RESPONSE_ID].toInt();

        if (lastResponseId == acceptedResponseId)
            lastAcceptedData = lastData;

        int lastAcceptedResponseId = lastAcceptedData[KEY_RESPONSE_ID].toInt();

        if (lastAcceptedResponseId == acceptedResponseId) {
            processMap(lastAcceptedData, data, syncData, hasChanges);
            fullUpdate = false;
        }
    }

    if (fullUpdate) {
        lastAcceptedData.clear();
        syncData = data;
        syncData [KEY_FULL_UPDATE] = true;
    }

    lastResponseId = lastResponseId % 1000000 + 1; // cycle between 1 and 1000000
    lastData = data;
    lastData [KEY_RESPONSE_ID] = lastResponseId;
    syncData[KEY_RESPONSE_ID] = lastResponseId;

    return json::toJson(syncData);
}
```

Так при `rid <= 0` будут передаваться все данные, как и при неверном значении `rid`.

P.S. Я уже это писал ранее. Не спеши обновлять PR, пока не прочитал все строковые комментарии.
"
22768932,2389,glassez,2015-01-11T18:59:45Z,"В ветке `default` не нужен `brake`.
"
22885271,2389,glassez,2015-01-13T19:03:49Z,"Лишний пробел перед `[]`.
"
22885408,2389,glassez,2015-01-13T19:05:44Z,"Нужно вставить предварительные объявления всех внутренних (не btjson::) функций в этом месте, а сами функции разместить в конце файла.
"
22885507,2389,glassez,2015-01-13T19:07:12Z,"По аналогии, из этой функции нужно возвращать просто `syncData`, а в JSON кодировать в btjson:: функции, из которой она вызывается.
"
22885830,2389,glassez,2015-01-13T19:11:42Z,"Эта функция теперь не нужна в `btjson`. Нужно ее описать так,  как и остальные внутренние функции - предварительное объявление вверху (после констант), а само тело после `btjson::` функций.
И, если не сложно, сделай то же с функцией `toMap()`.
"
22886351,2389,glassez,2015-01-13T19:18:09Z,"Здесь можно вставить комментарий с форматом выдаваемых данных, как перед `getTorrents`.
"
23264914,2389,sledgehammer999,2015-01-20T23:04:44Z,"I may be a little sleepy, but I didn't see you editing `prevData` and `data` in any of these functions. So wouldn't it be clearer to pass them by const reference(`const &`)?
"
23264992,2389,sledgehammer999,2015-01-20T23:06:02Z,"Is this particular comment line valid?
"
23282952,2389,buinsky,2015-01-21T07:55:15Z,"> Is this particular comment line valid?

@glassez wrote this comment. Apparently it is valid.
"
23283581,2389,buinsky,2015-01-21T08:12:26Z,"> So wouldn't it be clearer to pass them by const reference(`const &`)?

@sledgehammer999 Copy of `prevData` data is edited into the functions. Qt using implicit data sharing (see [here](http://qt-project.org/doc/qt-4.8/implicit-sharing.html)). I think that such the functions declaration is also appropriate.
"
23284651,2389,glassez,2015-01-21T08:41:44Z,"This is because, apparently, that we discussed some things in Russian. 'll take a small piece:

> The main idea here is that we should not operate with some abstract QVariantList, QVariantHash and QVariantMap - we've got just a way of representing, respectively, the list of simple data, list of structured data and the structured data itself.
"
192586409,9026,Chocobo1,2018-06-03T11:38:44Z,"These are legit uses of `QStringLiteral`, why remove it?"
192586427,9026,Chocobo1,2018-06-03T11:39:16Z,I think you messed up the indention here and below.
192586476,9026,Chocobo1,2018-06-03T11:41:06Z,"I would put the translations in www/locale folder.
And ""www"" prefix isn't really good, why not just ""webui""?"
192586512,9026,Chocobo1,2018-06-03T11:42:20Z,"this is python3 right?
Please put `#!/usr/bin/env python` at top so linux users can execute it directly."
192586561,9026,Chocobo1,2018-06-03T11:44:09Z,"(I haven't check this) and please make sure the file is executable:
https://stackoverflow.com/questions/21691202/how-to-create-file-execute-mode-permissions-in-git-on-windows"
192595884,9026,glassez,2018-06-03T16:48:37Z,"Sorry, it was rebase artifact. Will be fixed."
192595986,9026,glassez,2018-06-03T16:52:18Z,Outdated QtCreator broke it.
192596090,9026,glassez,2018-06-03T16:56:35Z,"Ageed with ""www -> webui"".
But why ""locale"" is better name? It's not so obvious for me."
192596415,9026,glassez,2018-06-03T17:07:48Z,Ok
192619054,9026,Piccirello,2018-06-04T03:12:07Z,"I think locale is the more widely-accepted verbiage. From the Wikipedia page for [locale](https://en.wikipedia.org/wiki/Locale_(computer_software)):

> In computing, a locale is a set of parameters that defines the user's language, region and any special variant preferences that the user wants to see in their user interface. Usually a locale identifier consists of at least a language identifier and a region identifier."
192633620,9026,glassez,2018-06-04T06:06:43Z,"But here are the translation files for some languages. So it turns out, the most correct name is ""translations"". 
But it's just an internal folder, so I don't really care what it's called. If you insist on ""locale"", then I will use it without further objection."
192676163,9026,Chocobo1,2018-06-04T09:21:14Z,"Minor thing, I would use ""WebUI switching to locale: %1.""
And for below: ""WebUI invalid locale selected: %1, falling back to default: en""
"
192679046,9026,Chocobo1,2018-06-04T09:31:30Z,you should also remove this file from repo?
192680447,9026,Chocobo1,2018-06-04T09:36:27Z,"personal preference, I would prefer using the full name, e.g. os.path.join ....
I think it is easier to read."
192680676,9026,Chocobo1,2018-06-04T09:37:16Z,"I would expect a list, a bit strange to see a tuple is used."
192681407,9026,Chocobo1,2018-06-04T09:40:01Z,Also I think .css & .js can be excluded?
192682913,9026,Chocobo1,2018-06-04T09:45:39Z,"nitpick, redundant space at end of string"
192683394,9026,glassez,2018-06-04T09:47:32Z,"Did I forget to do that? Hell, it's a cost of development ""on the knee""."
192686063,9026,Chocobo1,2018-06-04T09:56:47Z,"If the exception is unexpected... I think the pythonic way is not catching it, just let the program terminates. Otherwise you should catch the specific exception.
ps. this also applies to the try...catch above."
192700353,9026,glassez,2018-06-04T10:51:58Z,"I just use existing messages from Application class.

>WebUI switching to locale
WebUI invalid locale selected

IMO, it's incorrect. The event is ""Translation for selected locale loaded or failed to load"".
So how about ""WebUI translation for selected locale (%1) successfully loaded."" and ""Couldn't load WebUI translation for selected locale (%1), falling back to default (en).""?"
192703692,9026,Chocobo1,2018-06-04T11:07:03Z,ok.
192708506,9026,glassez,2018-06-04T11:27:25Z,"I'm not python developer. I use it very rarely...
I only used tuple because it's immutable. But apparently it doesn't matter, and the list is more appropriate (from use cases POV)."
192710145,9026,glassez,2018-06-04T11:34:27Z,">Also I think .css & .js can be excluded?

Why?
.js files contain translatable strings even in builtin WebUI. And I think .css can contain it for some purposes in altrernative WebUI."
192712914,9026,glassez,2018-06-04T11:46:33Z,">If the exception is unexpected... I think the pythonic way is not catching it, just let the program terminates.

Why should I allow the program to terminate in case it is impossible to write some specific file for some reason? And Yes, I'm not at all interested in that reason. I don't want to make a monster out of this simple helper script. It is not intended for general use, but only for developers.

P.S. If someone does not have enough problems in the main qBittorrent code base, or someone will find here some critical (in his opinion) shortcomings, he can spend his time and bring it to perfection later."
192713704,9026,Chocobo1,2018-06-04T11:49:56Z,">.js files contain translatable strings even in builtin WebUI. 

Now I see... 

>And I think .css can contain it for some purposes in alternative WebUI.

So you mean this script can be also used for alternative WebUI translations?
I would let this script cover only built-in WebUI translations, let alternative WebUI provide their own i18n solution.
IMO it is not really sane to have translation in css files, but who knows?
"
192715387,9026,Chocobo1,2018-06-04T11:56:56Z,">Why should I allow the program to terminate in case it is impossible to write some specific file for some reason? 

Bad wording from me, ignore that reasoning.

Problem is you're catching all exceptions, you should only catch the ones you need:
https://stackoverflow.com/a/736029"
192716743,9026,glassez,2018-06-04T12:02:23Z,PR updated!
192732210,9026,glassez,2018-06-04T13:01:21Z,">Problem is you're catching all exceptions, you should only catch the ones you need

In general case, Yes. But as I said before:

> And Yes, I'm not at all interested in that reason.

I don't know what exceptions there can be and I don't want to know it exactly. I just want to skip it and try to continue.
It works without errors under normal conditions. I don't want to complicate it trying to handle abnormal environment state. I assume the developer who encounter some error will be able to handle it."
192738129,9026,glassez,2018-06-04T13:21:39Z,">I would let this script cover only built-in WebUI translations, let alternative WebUI provide their own i18n solution.

You must have forgotten how it all started... 
It is not particularly useful to do this only for the built-in web interface.
The idea is to provide an abstract translation mechanism that, on the one hand, does not require changes to the qBittorrent binary (e.g., as it was with additional messages in the ""extra_translations.h"" file), and on the other hand, allows web interface to use its own strings and not only the ones already used in the qBittorrent GUI.

>let alternative WebUI provide their own i18n solution

Without having the dynamic server-side content, the JavaScript code is the only place to do it.
But in any case, why should we limit the use of this simple method hjust insert QBT_TR and place appropriate .qm files into ""translations"" folder)?
Besides, it doesn't prevent them from using some other way if they want it."
192817839,9026,Chocobo1,2018-06-04T17:19:27Z,">why should we limit the use of this simple method hjust insert QBT_TR and place appropriate .qm files into ""translations"" folder)?

Personally I don't want to put this burden on the qbt server when there are client side solutions (maybe like http://airbnb.io/polyglot.js/ ?).
IIRC this has been discussed before, I'll stop here, lets not delve into it more.
"
192819085,9026,Chocobo1,2018-06-04T17:23:59Z,">It works without errors under normal conditions. 

Then maybe try block is not really needed and can be omitted?
However as I probably won't be the one using the script, you can disregard my suggestion."
192826125,9026,glassez,2018-06-04T17:48:24Z,">Then maybe try block is not really needed and can be omitted?

You didn't still understand desired behavior? Skip any error (only print message about it) and try to process the rest files. I can't implement it without try-catch.
Of course, I can omit try-catch in this place, since error here usually means some external problem breaking the correct execution of the script. But I can't omit it above, since there can be some particular invalid file which can be skipped."
192828661,9026,zeule,2018-06-04T17:56:58Z,"""for doing"" or ""to do"" "
192828815,9026,glassez,2018-06-04T17:57:31Z,">Personally I don't want to put this burden on the qbt server when there are client side solutions

I don't understand your POV. This logic is already here (on qbt server side). I just changed it a bit to don't use GUI translations. Or do you suggest to remove it at all and use client side translation for all possible web ui? IMO, a very strange offer in the absence of active web developers in our team.

@sledgehammer999, you should read this discussion when you'll review this since it contains different POVs on the overall problem."
192829807,9026,zeule,2018-06-04T18:00:51Z,Redundant.
192830124,9026,zeule,2018-06-04T18:02:03Z,"Seems like the variable does not need to be global, since you only pass it to a function called from main()."
192830433,9026,zeule,2018-06-04T18:03:08Z,"OMG, returning function values via a global variable..."
193846866,9026,glassez,2018-06-07T18:29:02Z,"Really? I don't know English well, so I just adopted the existing wording from `src/update_qrc_files.py` (""Small script to update qrc files"").
@LordNyriox?"
193847075,9026,glassez,2018-06-07T18:29:44Z,Why?
193848214,9026,glassez,2018-06-07T18:33:38Z,"I take it as a plain script. I can do without ""main"" function at all, can't I?
These values are script configuration defaults so I want it in global place."
193850428,9026,glassez,2018-06-07T18:41:13Z,"You offer a little more (without any benefit) complicate this plain script?
Really, it's easier to get rid of these functions!"
194091783,9026,zeule,2018-06-08T15:18:13Z,"If it is python3, the shebang should read #!/usr/bin/env python3"
194093160,9026,zeule,2018-06-08T15:22:49Z,Because it is used only inside main()
194139284,9026,glassez,2018-06-08T18:07:58Z,"Well, there is no main() now since it was so confusing you."
194139392,9026,glassez,2018-06-08T18:08:20Z,"Ok, changed."
202558156,9026,sledgehammer999,2018-07-15T23:22:40Z,"""Building **WebUI** translations failed"". --> To differentiate from GUI translations and be able to accurately debug.
I wonder if we should add the failing locale name in both situations."
202558550,9026,sledgehammer999,2018-07-15T23:35:53Z,"True question: Why isn't the regex like this? (look at the last capture group)
```
""QBT_TR\\((([^\\)]|\\)(?!QBT_TR))+)\\)QBT_TR\\[CONTEXT=([a-zA-Z0-9_]*)\\]""
```"
202574676,9026,glassez,2018-07-16T05:03:50Z,">""Building WebUI translations failed"". --> To differentiate from GUI translations and be able to accurately debug.

Ok. Fixed.
>I wonder if we should add the failing locale name in both situations.

It's not necessary since error message appears immediatelly after line with its name: ""Processing <locale_name>""."
202574908,9026,glassez,2018-07-16T05:07:35Z,"To follow C++ (and many other languages) identifier format: ""identifier cannot start with number"". But if you want we can use softer rules here."
202575052,9026,sledgehammer999,2018-07-16T05:09:53Z,"I see.
Just leave it as it is."
202679566,9026,zeule,2018-07-16T13:22:50Z,"```python
with open(filename, encoding = 'utf-8', mode = 'r') as file:
```"
202681226,9026,zeule,2018-07-16T13:28:01Z,Consider pathlib.Path
202684187,9026,zeule,2018-07-16T13:36:58Z,"```python
from collections import defaultdict
sources = defaultdict(set())

sources[context].add(string)
```
"
202685988,9026,zeule,2018-07-16T13:41:52Z,`with ....`
202689946,9026,glassez,2018-07-16T13:52:51Z,"@zeule, as I said before, I'm not going to change this script unless it contains critical errors. You can improve it later if you want. I do not use Python on a daily basis, and it makes no sense for me to comprehend its subtleties. When I'll want to learn it I ask you for best practices :)"
202692199,9026,glassez,2018-07-16T13:59:03Z,">You can improve it later if you want.

You even can do it by pushing commit into this branch while PR is still unmerged."
202693953,9026,zeule,2018-07-16T14:03:53Z,"```python
for file in [f for f in files if os.path.splitext(f)[-1] in accepted_exts]:
```
or
```python
[parseSource(root / f, source_ts) for f in files if os.path.splitext(f)[-1] in accepted_exts]
```
assuming root is `pathlib.Path`"
202694226,9026,zeule,2018-07-16T14:04:36Z,"Actual value of nfiles is unneded, why it is not a bool then?"
203775334,9026,Chocobo1,2018-07-19T15:39:03Z,"A bit offtopic, after we moved this `include()` here, I noticed Qt is building translations multiple times when I run `qmake src.pro` in windows.
I suspect the qmake needs to generate different configurations (debug, release) and built the translations when doing so, so maybe we should move it back to qbittorrent.pro ?"
203807444,9026,glassez,2018-07-19T17:21:07Z,">so maybe we should move it back to qbittorrent.pro ?

Yes. At least it should fix this regression, isn't?

This extra delay required to generate .qm files every time I build a project is very annoying to me personally. It would be better to completely get rid of this ""intrusive service"", whose convenience is very doubtful. It would be better to have some (very simple) script to generate these files so the developer can run it when it is really needed. What do you say? @sledgehammer999?"
203933292,9026,Chocobo1,2018-07-20T04:07:25Z,">Yes. At least it should fix this regression, isn't?

yeah, IMO it is the baseline we should do if the situation cannot be improved.

>It would be better to have some (very simple) script to generate these files so the developer can run it when it is really needed. 

I've thought about it, I find it very hard to have a portable script on all platforms/OSs without adding additional build dependency (python, cmake). 
"
204154153,9026,sledgehammer999,2018-07-20T19:58:07Z,">It would be better to have some (very simple) script to generate these files so the developer can run it when it is really needed. What do you say? @sledgehammer999?

IMO, it will increase the probability that I'll forget to run it before a release and have stale translations.
Although I suspect it would be possible to integrate it as a step inside `make tarball` (<--- current way of making release tarballs). But that means we will distribute .qm files too now on each release."
1746626748,21300,Chocobo1,2024-09-06T07:21:33Z,What is the different between these two? I'm under the impression that they are eventually the same.
1746658319,21300,HanabishiRecca,2024-09-06T07:46:45Z,"Not even close, they are completely different under the hood.
Posix has horrendous performance, uses synchronous I/O, don't support files preallocation etc.
"
1746663564,21300,Chocobo1,2024-09-06T07:51:02Z,OK. Do you know what functions do they call? Obviously one is pread/pwrite and the other?
1746670336,21300,Chocobo1,2024-09-06T07:56:26Z,BTW it seems the old POSIX option has a bad name now because pread/pwrite is also defined in POSIX standard.
1746673960,21300,HanabishiRecca,2024-09-06T07:59:19Z,"> Do you know what functions do they call?

[`std::fread`](https://github.com/arvidn/libtorrent/blob/2ab8fedabb7716947edc77958da6d0b5e1040df9/src/posix_storage.cpp#L208) and [`std::fwrite`](https://github.com/arvidn/libtorrent/blob/2ab8fedabb7716947edc77958da6d0b5e1040df9/src/posix_storage.cpp#L271C36-L271C47).

> BTW it seems the old POSIX option has a bad name

That's how libtorrent calls it. 🤷‍♀️"
1746686821,21300,Chocobo1,2024-09-06T08:10:07Z,"> > Do you know what functions do they call?
> 
> [`std::fread`](https://github.com/arvidn/libtorrent/blob/2ab8fedabb7716947edc77958da6d0b5e1040df9/src/posix_storage.cpp#L208) and [`std::fwrite`](https://github.com/arvidn/libtorrent/blob/2ab8fedabb7716947edc77958da6d0b5e1040df9/src/posix_storage.cpp#L271C36-L271C47).

Thank you!
"
1746693669,21300,Chocobo1,2024-09-06T08:15:44Z,"> > BTW it seems the old POSIX option has a bad name
> 
> That's how libtorrent calls it. 🤷‍♀️

Maybe we could rename the `Pread` option to `Mmap fallback`? The new name will not be confused with ""POSIX-compliant"". Also, the pread could be an implementation detail that we shouldn't advertise."
1746699347,21300,HanabishiRecca,2024-09-06T08:20:27Z,"> Maybe we could rename `Pread` option to `Mmap fallback`?

Maybe. I named it accounting future changes from arvidn/libtorrent#7013, as said above:

> This option also could be repurposed in the future, when the actual pread-disk-io would be in production.

Again, that's how libtorrent calls it. But I don't mind the naming here."
1746712918,21300,glassez,2024-09-06T08:30:56Z,"> Maybe we could rename the `Pread` option to `Mmap fallback`?

IMO, `Mmap fallback` is completely meaningless/confusing to be used here. Its meaning is precisely that it does not use memory mapping at all, so why mention it?"
1746719931,21300,glassez,2024-09-06T08:36:38Z,"In my old commit made to test a new disk IO subsystem, I named the corresponding option more abstractly from the implementation details ""Multi-threaded file read/write"". I would use something like it."
1746725249,21300,Chocobo1,2024-09-06T08:40:46Z,">so why mention it?

https://github.com/qbittorrent/qBittorrent/pull/21300#discussion_r1746670336
1. To differentiate it with ""POSIX-compliant"" option.
2. The pread could be an implementation detail that we shouldn't advertise.

>This option also could be repurposed in the future, when the actual pread-disk-io would be in production.

By only looking at its name, some users might be mistaken that the current option is the unfinished pread-disk-io.
And when we switched it to pread-disk-io under the hood, some users might still think it is the old one.

Either we add more info/rename the ""POSIX-compliant"" one or use some obscure name like ""Mmap fallback""."
1746725784,21300,HanabishiRecca,2024-09-06T08:41:09Z,"Yeah, shared constructor/code with the mmap backend is an implementation detail. It tells nothing about its nature. And could change in the future.
So it should be something different. I don't have any particular ideas though."
1746740206,21300,Chocobo1,2024-09-06T08:52:16Z,">Either we add more info/rename the ""POSIX-compliant"" one or use some obscure name like ""Mmap fallback"".

Or both. Such as ""POSIX-compliant (fread/fwrite)"" and ""Mmap fallback (pread/pwrite)"".
As for pread-disk-io it would be just ""Pread"" as libtorrent calls it https://github.com/arvidn/libtorrent/pull/7013/files#diff-a5b3e85fb91ec27c5c24aff0a6756978bc0cbacaf78333c902ee63afb641b25dR886"
1746740548,21300,HanabishiRecca,2024-09-06T08:52:33Z,"> By only looking at its name, some users might be mistaken that the current option is the unfinished pread-disk-io.
And when we switched it to pread-disk-io under the hood, some users might still think it is the old one.

So we talk only about UI option name or internal name too?"
1746755362,21300,HanabishiRecca,2024-09-06T09:01:01Z,"> Such as ""POSIX-compliant (fread/fwrite)"" and ""Mmap fallback (pread/pwrite)""

I don't think users are interested in underlying functions. And `POSIX-compliant` name is already widely used.

New option should not contain ""mmap"" word imo, as it is misleading. Better to call it something like `Fallback IO`."
1746757942,21300,Chocobo1,2024-09-06T09:02:00Z,">So we talk only about UI option name or internal name too?

Both. IMO they should be distinctively named.

>New option should not contain ""mmap"" word imo, as it is misleading. Better to call it something like Fallback IO.

You have to have something first before fallback to something else.

>I named the corresponding option more abstractly from the implementation details ""Multi-threaded file read/write"". I would use something like it.

It could be a compromise if nothing else is better."
1746789528,21300,HanabishiRecca,2024-09-06T09:12:50Z,"`DiskIOType::MMapFallback` works for internal name I think.

As for user-facing name... maybe we make it straight: `Disable memory mapped files`. It nicely summarizes the whole thing to the user."
1746793145,21300,glassez,2024-09-06T09:15:22Z,"> New option should not contain ""mmap"" word imo, as it is misleading.

👍 
I strongly insist to not use ""mmap"" in its name."
1746797155,21300,HanabishiRecca,2024-09-06T09:18:19Z,"> ""Multi-threaded file read/write""

This name kinda implies that other options don't support multithreading. Which is not true of course.
And the amount of threads is controlled by respective option (`Asynchronous I/O threads`). If you set it to 1 it is not multithreaded anymore."
1746809364,21300,HanabishiRecca,2024-09-06T09:27:44Z,"> I strongly insist to not use ""mmap"" in its name.

What about negation? ""Not mmap"" aka ""Disable memory mapped files""?"
1746869717,21300,HanabishiRecca,2024-09-06T10:01:27Z,"Or maybe something neutral. ""Simple IO"", ""Regular IO"", ""Basic IO"", ""Standard IO"", ""Normal IO"", ""Conventional IO"" ...?"
1747044834,21300,glassez,2024-09-06T12:29:57Z,"> The pread could be an implementation detail that we shouldn't advertise.

In fact, it's hard to avoid mentioning some internal details in the name of these options, because they are essentially low-level settings. I would just not mention the unimportant details, like the fact that we use the same thing to provide different types of I/O. By enabling/disabling memory mapping, we essentially get two different I/O types (mmap based and pread/pwrite based).

> > This option also could be repurposed in the future, when the actual pread-disk-io would be in production.
>
>By only looking at its name, some users might be mistaken that the current option is the unfinished pread-disk-io.

We do not say that there is a one-to-one correspondence with some low-level subsystem of libtorrent. There is always an opportunity to be misleading when it comes to some advanced settings. In any case, we cannot provide all information through the option name. Details can be specified somewhere in documentation, in option tooltip, in the feature announcement on the official website, etc.

>And when we switched it to pread-disk-io under the hood, some users might still think it is the old one.

When we replace it with a new pread/pwrite based implementation, we can present it as an improvement of the old one."
1747124730,21300,HanabishiRecca,2024-09-06T13:25:24Z,"Soo, effectively you are saying to keep it as is? And what about the internal name?"
1747193097,21300,Chocobo1,2024-09-06T14:10:59Z,">In any case, we cannot provide all information through the option name. Details can be specified somewhere in documentation, in option tooltip, in the feature announcement on the official website, etc.

Then I would just call the new option ""Customized"" and explain the details in the tooltip.

>When we replace it with a new pread/pwrite based implementation, we can present it as an improvement of the old one.

The old one is not a proper disk io type. It is mmap type's fallback/special case behavior. Present the new one as an improvement would be false advertising as they are different things.

The whole naming issue arose is because it is modifying something instead of a proper disk io type itself. If obscure names such as ""Customized"" is still objected. Then the only way forward is to present the `mmap_file_size_cutoff` and `disk_write_mode` options instead of disguising them as a new disk io type.
"
1747224149,21300,HanabishiRecca,2024-09-06T14:32:21Z,"> ""Customized""

I like that variant actually.

> Then the only way forward is to present the `mmap_file_size_cutoff` and `disk_write_mode` options instead of disguising them as a new disk io type.

I see a problem with that, as stated above. https://github.com/qbittorrent/qBittorrent/pull/21300#issuecomment-2332279378"
1747242040,21300,glassez,2024-09-06T14:45:41Z,"> The whole naming issue arose is because it is modifying something instead of a proper disk io type itself.

This is exactly ""proper disk io type"" from an external point of view. You just can't abstract away from the unimportant implementation details of to accept it. I can just copy its code, hardcodely disable memory mapping (and even delete all related code), what would you call it in that case? A ""proper disk io type"" or not?"
1747248126,21300,Chocobo1,2024-09-06T14:49:28Z,">I see a problem with that, as stated above. https://github.com/qbittorrent/qBittorrent/pull/21300#issuecomment-2332279378

I'll reply here:

>Exposing the raw int field is not very useful imo. Because some arbitrary values don't really mean anything. And advising people with mmap problems to set it to something like 2147483647 would be weird.

It depends on how the option is named/presented and also, most of the time the options in advanced settings are just fields for power users to access libtorrent knobs. It doesn't target the novice/average users.
"
1747498596,21300,Chocobo1,2024-09-06T17:40:44Z,">This is exactly ""proper disk io type"" from an external point of view. You just can't abstract away from the unimportant implementation details of to accept it. I can just copy its code, hardcodely disable memory mapping (and even delete all related code), what would you call it in that case? A ""proper disk io type"" or not?

If you provided another `disk_io_constructor_type` then it is a genuine disk io type. For our case here it is just modified Mmap: mmap disk io with customized behavior."
1747521805,21300,stalkerok,2024-09-06T17:59:51Z,Maybe call it that? `Modified memory mapped files (minimal use)`
1747547528,21300,HanabishiRecca,2024-09-06T18:22:12Z,"> `Modified memory mapped files (minimal use)`

The thing is, the mmap is disabled completely, there is no minimal use. That's why I and @glassez insist on not including mmap into the description.

On the other hand, I don't think users are very interested in internals. So we might as well simply lie about its true nature and call it something like `Memory mapped files (optimized)`.
"
1747553295,21300,HanabishiRecca,2024-09-06T18:27:28Z,"> > ""Customized""
> 
> I like that variant actually.

I still think this is the best compromise here. Maybe even `Custom optimized`?
Very neutral wording, then we could explain what exactly it does in the docs.

And use `DiskIOType::MMapFallback` internally."
1747556218,21300,stalkerok,2024-09-06T18:30:21Z,"`optimized` doesn't sound very accurate as it's not clear which way the optimization is going, `minimal use` is closer to that. After all, these are really parameters for power users."
1747577642,21300,glassez,2024-09-06T18:50:03Z,"> The thing is, the mmap is disabled completely, there is no minimal use. That's why I and @glassez insist on not including mmap into the description.

Memory mapping based thing that doesn't use memory mapping completely is nonsense."
1747578539,21300,HanabishiRecca,2024-09-06T18:50:37Z,"> `optimized` doesn't sound very accurate as it's not clear which way the optimization is going,

Yeah, that's a valid point.

> `minimal use` is closer to that.

But in that case, I don't see how `minimal use` is better than plain simple `disabled` though.

> After all, these are really parameters for power users.

Also true. I personally don't mind how it's called.
But the more concise name we pick, the easier it will be to talk with people about it.
"
1747590207,21300,Chocobo1,2024-09-06T18:59:07Z,">Maybe even Custom optimized?
>
>minimal use is closer to that. After all, these are really parameters for power users.

Or `Custom simplified`? as it is reduced from mmap + fallback to only fallback."
1747590421,21300,HanabishiRecca,2024-09-06T18:59:18Z,"> Memory mapping based thing that doesn't use memory mapping completely is nonsense.

And if we still want to expose some technical details, I would say `Force pread/pwrite` sounds good to me.

> Or `Custom simplified`? as it is reduced from mmap + fallback to only fallback.

Sounds reasonable too.
"
1747592231,21300,stalkerok,2024-09-06T19:00:57Z,"`Modified memory mapped files (disabled)` as an option, yes, but it sounds really weird."
1747607016,21300,Chocobo1,2024-09-06T19:14:55Z,">I would say Force pread/pwrite sounds good to me.

I could settle on this. At least it is implying it has tweaked behavior."
1747617055,21300,HanabishiRecca,2024-09-06T19:25:03Z,"Ok then, `DiskIOType::MMapFallback` + `Force pread/pwrite`.
"
1747624155,21300,glassez,2024-09-06T19:32:03Z,"If you want to refer to these two IO types as the same, but with enabled/disabled memory mapping, the main part of name should not contain ""memory mapping"", for example:
1. Regular (memory mapping enabled)
2. Regular (memory mapping disabled)

(""Regular"" is just an example.)"
1747632951,21300,HanabishiRecca,2024-09-06T19:40:49Z,I guess that's outside of the scope of this PR.
1747984035,21300,glassez,2024-09-07T07:05:47Z,"> > I would say Force pread/pwrite sounds good to me.
> 
> I could settle on this. At least it is implying it has tweaked behavior.

I really don't understand that. One option uses memory mapping, another uses pread/pwrite. Why mention the negligent details?

As about `DiskIOType::MMapFallback`.
What life cycle do you think for this option? Should it be replaced by a new one when it becomes available? Or you want to leave both?
In any case, this is a user-visible string used in the configuration file so I wouldn't use `mmap` in it as well."
1747992748,21300,HanabishiRecca,2024-09-07T07:39:11Z,"> In any case, this is a user-visible string used in the configuration file so I wouldn't use `mmap` in it as well.

What do you suggest then? Something closer to the user-visible string?

---
P.S. This discussion reminds me a famous quote 😅
> There are only two hard things in Computer Science: cache invalidation and naming things."
1749131302,21300,Chocobo1,2024-09-08T08:12:59Z,">Or you want to leave both?

Yes, until it is known that the new one don't have nasty bugs or the old one is inferior than the new one in every way."
1749241842,21300,glassez,2024-09-08T13:54:14Z,"> > In any case, this is a user-visible string used in the configuration file so I wouldn't use `mmap` in it as well.
> 
> What do you suggest then? Something closer to the user-visible string?

I just want the names of the options to reflect their distinctive features (one type of I/O uses memory mapped files, the other uses regular I/O feature), and not unimportant details (like the fact that both are provided by the same libtorrent classes). The mention of memory mapping in the name of the discussed I/O type (both UI and internal), which does not involve the use of such nemory mapping, is unacceptable."
1749244417,21300,HanabishiRecca,2024-09-08T14:02:42Z,Understood. I'll make them in sync then. It's not like we have technical restrictions about it.
1759022303,21300,glassez,2024-09-13T14:56:55Z,"And yet, why it is ""**force** pread/pwrite""? Is there any other ""pread/pwrite"" based type available that isn't ""force"" unlike this one?"
1759089524,21300,HanabishiRecca,2024-09-13T15:39:56Z,It would be in the future.
1759939340,21300,glassez,2024-09-15T01:35:46Z,"> It would be in the future.

In general, you can't know anything about it. We need to name this type only based on its distinctive features (relative to current types).
But since in this case we know about the new IO backend being developed, which may be added as a separate IO type in the future, we could immediately take this into account when naming. But anyway, is the current type (added by this PR) different from the new one in such a way that we can describe this difference with the word ""force""? I don't believe it's appropriate.
So I would just name it ""Pread/Pwrite"" (""PreadPwrite"" internally) since this says enough about its features relative to the rest of the existing IO types, and think about the name of the new type when it becomes available."
1759991567,21300,Chocobo1,2024-09-15T08:11:11Z,">But anyway, is the current type (added by this PR) different from the new one in such a way that we can describe this difference with the word ""force""? I don't believe it's appropriate.
So I would just name it ""Pread/Pwrite"" (""PreadPwrite"" internally) since this says enough about its features relative to the rest of the existing IO types, and think about the name of the new type when it becomes available.

There are some minor differences between the two approaches. If they are the same, then arvidn should be able to get it done quickly, isn't? Currently, it is like driving a hybrid car with batteries disabled. It will run but it isn't in the best condition.
I would really like to have differentiate between these two and not impersonating the fallback mode as a native one.
"
1759998304,21300,glassez,2024-09-15T08:49:18Z,"The point is how it is presented at the user level.
You're talking about a case where the battery on/off switch is available to the user of a hybrid car. But in this case, we are talking about the case when the car is assembled from the same parts as the hybrid, but the batteries are not mounted at all. What's the point of talking about it as a hybrid if it can only work in one single mode? This low-level information could only be of interest to a very advanced user in the same way as the information that different processors with different numbers of cores and cache size are actually created from the same crystals, physically having the same number of cores, cache size, etc.

P.S. perhaps using ""Force pread/pwrite"" name would be acceptable if the existing type was called like ""Hybrid (Mmap, Pread/Pwrite)""."
1780220309,21300,HanabishiRecca,2024-09-30T00:15:03Z,"I think we should resolve this. It is very frustrating to be blocked for such insignificant reason. People want that functionality, the naming could be changed later.
"
1780927126,21300,glassez,2024-09-30T11:22:07Z,"> the naming could be changed later.

It's not a problem to change name in UI. But if this internal option name leaks into the release, then in order to change it, we will either have to maintain both names (old and new), or add an update code replacing it in the configuration file.
>I think we should resolve this.

Agree.
@Chocobo1 
My reasoning is still looks valid for me. I appeal you to think again about whether `ForcePreadPwrite` is really better than `PreadPwrite`. Answer the question, then what will you name the new option so that it reflects its difference from this one? If everything suits you, then I give in, you can do it your own way - your responsibility."
1780932658,21300,glassez,2024-09-30T11:26:42Z,"PS. For me, the following names look acceptable (both having only one option and both):
1. PreadPwrite, PreadPwrite2 (simplest case)
2. PreadPwrite, AdvancedPreadPwrite
3. PreadPwrite, BufferedPreadPwrite
4. SimplePreadPwrite, PreadPwrite
"
1781119507,21300,Chocobo1,2024-09-30T13:20:32Z,">     1. PreadPwrite, PreadPwrite2 (simplest case)
> 
>     2. PreadPwrite, AdvancedPreadPwrite
> 
>     3. PreadPwrite, BufferedPreadPwrite
> 
>     4. SimplePreadPwrite, PreadPwrite

This is related to the code and config file, right? I could agree on option 4 (or `SimplifiedPreadPwrite, PreadPwrite`).
I don't mind the UI also use it, although it is a little strange.
"
1781142617,21300,glassez,2024-09-30T13:33:26Z,"> This is related to the code and config file, right?

Yes.
As I mentioned above, it is not difficult to change the text in the UI if the original version is later found unsuitable.


> I don't mind the UI also use it, although it is a little strange.

I think ""Simplified pread/pwrite"" would be acceptable first approach (at least it much better than ""Force pread/pwrite""."
1781182436,21300,HanabishiRecca,2024-09-30T13:54:07Z,"Honestly, the word `Simplified` brings more associations with Simplified Chinese for me. 👀
Anyway, waiting for a final decision.
"
1781301505,21300,Chocobo1,2024-09-30T14:57:15Z,"`Simplified`, `Simple` I don't have strong opinion on one. You can just pick one."
1781345672,21300,HanabishiRecca,2024-09-30T15:26:59Z,"Ok, I hope we agree on it."
355178640,11614,sledgehammer999,2019-12-08T11:21:05Z,"Add them in alphabetical order.
https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#7-header-inclusion-order"
355178764,11614,sledgehammer999,2019-12-08T11:22:54Z,"Curly braces aren't needed in this if statement.
https://github.com/qbittorrent/qBittorrent/blob/master/CODING_GUIDELINES.md#e-single-statement-if-blocks"
355183109,11614,Chocobo1,2019-12-08T12:34:58Z,There is src/base/profile.cpp file so this declaration should not be here.
355201651,11614,Tester798,2019-12-08T17:27:57Z,"Added this because there is same piece here: https://github.com/qbittorrent/qBittorrent/blob/a7bd68a2c7cab2ef5b5ed2e2ce2f2a2548226573/src/app/application.cpp#L118

Should I try to move it all to src/base/profile.cpp ?"
355203186,11614,Chocobo1,2019-12-08T17:53:16Z,">Should I try to move it all to src/base/profile.cpp ?

Maybe yes, at least it should try to fit in the helper functions that file provides. Let us wait for others opinion."
355258117,11614,glassez,2019-12-09T04:21:29Z,"IMO, it's not ""Command line options"" job."
355382543,11614,Kolcha,2019-12-09T10:55:18Z,"Agreed, checking some folder for existence is not related to command line parsing. I suggest to do that after command line parsing"
355580028,11614,Tester798,2019-12-09T17:24:56Z,"Do you mean it's better to add folder check here: https://github.com/qbittorrent/qBittorrent/blob/565eb4cdc8631ce0e8a999bd1234d5ce67baf990/src/app/application.cpp#L149-L151 ?

Should I also add folder checks here:
https://github.com/qbittorrent/qBittorrent/blob/565eb4cdc8631ce0e8a999bd1234d5ce67baf990/src/app/application.cpp#L743-L744 and here:
https://github.com/qbittorrent/qBittorrent/blob/565eb4cdc8631ce0e8a999bd1234d5ce67baf990/src/app/application.cpp#L746-L747 or these two places are ok to check only for `m_commandLineArgs.portableMode`?"
355874543,11614,Kolcha,2019-12-10T07:17:36Z,"just do it in only one place, right exactly before the line you posted first. just set `m_commandLineArgs.portableMode` to `true` in case if folder exists, and leave everything as is. it must work"
355894506,11614,glassez,2019-12-10T08:19:32Z,">just set m_commandLineArgs.portableMode to true

Spoofing command line parameters doesn't seem like the better solution. Ideally, it should be checked in the place where the final decision is made."
356205458,11614,Tester798,2019-12-10T18:30:55Z,"I think it's better to set `m_commandLineArgs.portableMode` to `true` before https://github.com/qbittorrent/qBittorrent/blob/565eb4cdc8631ce0e8a999bd1234d5ce67baf990/src/app/application.cpp#L147 because in this case we can still get useful messages from https://github.com/qbittorrent/qBittorrent/blob/565eb4cdc8631ce0e8a999bd1234d5ce67baf990/src/app/application.cpp#L741-L748
Updated pull request."
356516591,11614,Chocobo1,2019-12-11T10:29:27Z,you are checking the profile folder every time you call this function! you should only do that once.
356596447,11614,Tester798,2019-12-11T13:26:30Z,"Replaced function call with `m_portableModeEnabled`:
https://github.com/Tester798/qBittorrent/blob/46b028841ebdb7f4e613f68b2b59a16cc8c0c095/src/app/application.cpp#L147"
356636306,11614,Tester798,2019-12-11T14:41:35Z,Maybe we should remove this check completely? Because if there is `profile` folder in app dir and user wants to specify different profile with `--profile=` command line argument then app will not start at all.
356642554,11614,Tester798,2019-12-11T14:51:58Z,Removed.
356653528,11614,Tester798,2019-12-11T15:10:44Z,Also here we seems to need `&& m_commandLineArgs.profileDir.isEmpty()` because else `profile` folder will be used instead of `m_commandLineArgs.profileDir`.
356949649,11614,Chocobo1,2019-12-12T04:02:22Z,"nitpick, I would use ""Using config directory: %1"""
356950969,11614,Chocobo1,2019-12-12T04:10:06Z,"Please help us fix the coding style by adding parentheses to the last parameter:
`(m_commandLineArgs.relativeFastresumePaths || m_portableModeEnabled)`"
356951194,11614,Chocobo1,2019-12-12T04:11:35Z,"Not your code, please help us fix the coding style by adding `const` to function:
`void Application::validateCommandLineParameters() const`"
356954587,11614,glassez,2019-12-12T04:32:49Z,Please rename it to reflect its actual meaning: m_defaultProfileFolderFound. Current name confuses.
356990500,11614,glassez,2019-12-12T07:24:27Z,"Seems like wrong logic here.
IIRC, if user specifies profile dir via command line it will used even if default profile dir is found. But if user doesn't specify ""relative fastresume"" param then it doesn't want it to use.
I would change workflow to the following:
1. Process profile related command-line parameters first. If no one is used then
2. Try to find default profile folder."
357140174,11614,Tester798,2019-12-12T13:20:46Z,Done.
357140264,11614,Tester798,2019-12-12T13:20:57Z,Done.
357140389,11614,Tester798,2019-12-12T13:21:13Z,Changed.
357144974,11614,Tester798,2019-12-12T13:31:00Z,"Not sure if I understand what the logic should be with this `relativeFastresumePaths` command line parameter. As I understand `portable` mode should always use `relativeFastresumePaths`, but specifying `--profile=` command line parameter doesn't mean that `relativeFastresumePaths` should be used if it's not specified. Is that correct? If so, then maybe moving check `&& m_commandLineArgs.profileDir.isEmpty()` from https://github.com/Tester798/qBittorrent/blob/e707748f7a56999697e6314ba60efdbc6198289a/src/app/application.cpp#L151 to https://github.com/Tester798/qBittorrent/blob/e707748f7a56999697e6314ba60efdbc6198289a/src/app/application.cpp#L147 would do it?"
357888976,11614,Tester798,2019-12-14T01:51:14Z,"Ok, moved `m_commandLineArgs.profileDir.isEmpty()` check to the top.
Let me know if I should change anything else."
357905732,11614,glassez,2019-12-14T08:53:26Z,"Maybe it's not that important to you, but I would prefer to have explicit logic (this makes the code easier to read/maintain).
```c++
const bool defaultProfileFolderFound = QDir(QCoreApplication::applicationDirPath()).exists(DEFAULT_PORTABLE_MODE_PROFILE_DIR);
const bool relativeFastresumePaths = (!m_commandLineArgs.profileDir.isEmpty() && m_commandLineArgs.relativeFastresumePaths) || defaultProfileFolderFound;
const QString profileDir = m_defaultProfileFolderFound && m_commandLineArgs.profileDir.isEmpty()
		        ? QDir(QCoreApplication::applicationDirPath()).absoluteFilePath(DEFAULT_PORTABLE_MODE_PROFILE_DIR)
		        : m_commandLineArgs.profileDir;
Profile::initialize(profileDir, m_commandLineArgs.configurationName, relativeFastresumePaths);
```

Also ""relative fastresume"" option has no meaning without ""profile"" option so it should be validated accordingly. I think we should throw exception in case when it is specified without ""profile"" option.
```c++
    if (m_commandLineArgs.relativeFastresumePaths && m_commandLineArgs.profileDir.isEmpty())
		        throw CommandLineParameterError(tr(""Relative fastresume option can't be used if profile path isn't explicitly set""));
```
Then you even can use `m_commandLineArgs.relativeFastresumePaths` instead of `!m_commandLineArgs.profileDir.isEmpty() && m_commandLineArgs.relativeFastresumePaths` in the code above."
357908804,11614,glassez,2019-12-14T10:07:34Z,">Also ""relative fastresume"" option has no meaning without ""profile"" option

Sorry, it seems I'm wrong. It can have a meaning even with default profile (not portable).

So now your code seems to be correct, but `m_defaultProfileFolderFound` now has other meaning (default portable profile folder is found and isn't overriden by command-line parameters, so ""portable mode enabled"")."
357909268,11614,glassez,2019-12-14T10:18:17Z,"I would add
```c++
if (portableModeEnabled)
    LogMsg(tr(""Running in portable mode (auto detected)""));
```
Also I would move appropriate check from ""validateCommandLineParameters"" here (since it doesn't really validate command-line parameters themselves) so log messages will in correct order (""portable mode enabled"" and then ""relative fastresume is implied""). Also we will have no additional member variable."
357943051,11614,Tester798,2019-12-14T23:04:17Z,"Thanks for the suggestions. I changed the code, please let me know if I should change anything else."
357943224,11614,Tester798,2019-12-14T23:10:34Z,"Moved check from ""validateCommandLineParameters"" here added additional log message. Please let me know if I should change anything else."
357952371,11614,Chocobo1,2019-12-15T04:15:58Z,"Please make this inside `if (portableModeEnabled)`.
```c++
if (portableModeEnabled) {
    Logger::instance()->addMessage(tr(""Running in portable mode (auto detected)""));
    if (m_commandLineArgs.relativeFastresumePaths)
        Logger::instance()->addMessage(tr(""Portable mode implies relative fastresume""), Log::WARNING);
}
```
"
357952494,11614,Chocobo1,2019-12-15T04:20:24Z,"will this work?
`tr(""Running in portable mode. Auto detected profile folder at: %1"").arg(profileDir)`
"
357952600,11614,Chocobo1,2019-12-15T04:23:54Z,"```c++
tr(""Redundant command line flag detected: \""%1\"". Portable mode implies relative fastresume."").arg(""--relative-fastresume"")`  // to avoid translating the `--relative-fastresume` string
```"
357953550,11614,glassez,2019-12-15T04:54:56Z,It will show almost the same path as message above. Are you sure we need both of them?
357953689,11614,Chocobo1,2019-12-15T04:59:10Z,">Are you sure we need both of them?

I don't insist on that. But the point is `(auto detected)` has not enough information to users, they won't know what path is auto detected."
357953744,11614,Chocobo1,2019-12-15T05:00:42Z,"Or maybe:
```c++
if (portableModeEnabled) {
    // ...
}
else {
    Logger::instance()->addMessage(tr(""Using config directory: %1"").arg(Profile::instance().location(SpecialFolder::Config)));
}
```"
417068144,12557,Piccirello,2020-04-29T05:02:53Z,"Alas, we can't yet use arrow functions while we support IE11. I'd love to drop IE11 support (as Bootstrap 5 has [now done](https://twitter.com/getbootstrap/status/1245090015597580288)), but we've collectively decided to support it for a bit longer."
417068210,12557,Piccirello,2020-04-29T05:03:10Z,Please use triple equals `===` throughout
417068732,12557,Piccirello,2020-04-29T05:05:29Z,What does `Imp` stand for in `invisibleImp`? Maybe there's a more descriptive name that can be used instead.
417070580,12557,Piccirello,2020-04-29T05:13:09Z,Can you extract this conditional to a named variable to better document its purpose (e.g. `const tabsInititalized = `)
417071551,12557,Piccirello,2020-04-29T05:17:18Z,This is really hard to understand. Can you document what each of these conditionals means?
417072357,12557,Piccirello,2020-04-29T05:20:32Z,You can move the `addRule` line out of the conditionals since it's the same for all three cases.
417073168,12557,Piccirello,2020-04-29T05:23:16Z,"nit: put a space between comment syntax and the actual comment
```suggestion
                        // RSS Tab
```"
417074300,12557,Piccirello,2020-04-29T05:27:34Z,"```suggestion
            <button id=""rssDownloaderButton"" class=""alignRight"" onclick=""qBittorrent.Rss.openRssDownloader()"">QBT_TR(RSS Downloader...)QBT_TR[CONTEXT=RSSWidget]</button>
```"
417074405,12557,Piccirello,2020-04-29T05:27:58Z,"Typo on ""Content"""
417074716,12557,Piccirello,2020-04-29T05:29:13Z,I'd prefer if you replaced most of this inline styling with rules defined in the `<style>` element above
417076939,12557,Piccirello,2020-04-29T05:37:40Z,"Please provide a `break` statement in the last case. It reduces the likelihood that someone will forget to add it, should they ever add additional cases."
417081859,12557,Piccirello,2020-04-29T05:55:44Z,Please move the interval duration to a top-level variable. I also think we should bump it `1500` for consistency with our main data sync.
417218919,12557,seproDev,2020-04-29T10:36:18Z,Imp stands for the css `!important` modifier. But since it's bad form anyway I changed things to make the normal `invisible` class work.
417226401,12557,seproDev,2020-04-29T10:51:05Z,"As far as I could tell IE11 support had already (unintentionally) been dropped. Since the refactor from 4.2.0 IE doesn't load the page correctly.

If you still want I can replace all arrow functions."
417227921,12557,seproDev,2020-04-29T10:54:02Z,Changed things for `rss.html` and `rssDownloader.html`. I think for the dialog boxes the inline styling is okay.
417248679,12557,FranciscoPombal,2020-04-29T11:36:34Z,+1 for officially dropping support for IE 11. I think it has been long enough anyway.
417760989,12557,Chocobo1,2020-04-30T05:26:54Z,`path ? (path + '\\' + feedURL) : ''`
417761352,12557,Chocobo1,2020-04-30T05:28:25Z,curly brackets should be omitted when the if-body only consist of a single line.
417762213,12557,Chocobo1,2020-04-30T05:31:16Z,Is `HttpServer` the right context?
417763101,12557,Chocobo1,2020-04-30T05:34:33Z,Maybe create a rss folder for them?
417764409,12557,Chocobo1,2020-04-30T05:39:03Z,"I'm not sure, will this work? `initializeTabs` is defined later."
417765151,12557,Chocobo1,2020-04-30T05:41:44Z,please add parentheses
417765472,12557,Chocobo1,2020-04-30T05:42:59Z,better use `Math.max()`
417765629,12557,Chocobo1,2020-04-30T05:43:35Z,typo: singel 
417765821,12557,Chocobo1,2020-04-30T05:44:14Z,I would use a `switch ()` instead.
417766020,12557,Chocobo1,2020-04-30T05:44:52Z,`switch ()` here too.
417915552,12557,seproDev,2020-04-30T10:36:26Z,"Works because `initializeTabs` isn't actually called there. It's only called on click so after initialization.

Though since there was quite a bit of duplicate code I moved things around and renamed the function to `updateTabDisplay` to better reflect its purpose.

I also removed the adding and removing of the tabs event listeners , I think it's fine to have those three event listeners even when the buttons are not displayed. Please take a look."
417922114,12557,seproDev,2020-04-30T10:48:32Z,The string is already used in `rename_file.html` and so already translated to some languages.
417923906,12557,seproDev,2020-04-30T10:52:05Z,I think all the dialog html files kind of clutter the directory. Should I move all dialogs to `private/dialogs` and all rss specific dialogs to `private/dialogs/rss`?
417988508,12557,Chocobo1,2020-04-30T12:56:46Z,"I think you should limit to the newly added files. It is not a good idea to include too many changes in a PR, especially in one that already has 2000+ lines addition..."
418013392,12557,seproDev,2020-04-30T13:34:50Z,Do you think in general moving the dialogs to a separate folder is a good idea? I would create a new PR moving them.
418023325,12557,Chocobo1,2020-04-30T13:48:21Z,"seems every html file except index.html is a dialog, if so, then I don't have strong feelings for it."
418256120,12557,Piccirello,2020-04-30T20:01:47Z,"All html files in the root of the ""private"" directory are ""full"" html pages. As @Chocobo1 pointed out, they're mostly dialogs that are displayed in iframes. Anything in the ""views"" directly is a partial page that's meant to be added to an existing page. I think for now this PR should stick to this same basic principle, and then we can target reorganizing the webui files in a separate PR."
425189621,12557,Chocobo1,2020-05-14T14:39:56Z,id should use camelcase. 
425192325,12557,Chocobo1,2020-05-14T14:43:26Z,don't you prefer using `let`?
425195169,12557,Chocobo1,2020-05-14T14:47:07Z,"Either use the old `function(){}` or use arrow functions, at least it should be consistent in a PR.
"
425198125,12557,Chocobo1,2020-05-14T14:51:00Z,is it required to escape the characters? did you tried not escaping them?
425202876,12557,Chocobo1,2020-05-14T14:57:00Z,Please use parentheses consistently to arrow functions.
425206172,12557,Chocobo1,2020-05-14T15:00:59Z,is it possible to give them a default value?
425290280,12557,seproDev,2020-05-14T16:57:15Z,You are totally right this shouldn't be escaped. I copied the strings from the .ts file without checking if replacement actually works.
425307317,12557,seproDev,2020-05-14T17:23:55Z,"The context menus didn't need to be in this scope so I moved them in to the init function. For `feedData` and `pathByFeedId` I provided a default. For `feedRefreshTimer` I don't think there is a good default.

While at it I also removed the exports that weren't being used."
709727524,15452,Chocobo1,2021-09-16T03:41:11Z,"```suggestion
      <string>Automatic mode means that various torrent properties (e.g. save path) will be decided by the associated category</string>
```"
709728642,15452,Chocobo1,2021-09-16T03:44:57Z,"I would prefer they are in this order:
```c++
QString savePath;
qreal ratio;
int seedingTime;
int upSpeedLimit;
int downSpeedLimit;
Qt::CheckState autoTMM;
Qt::CheckState disableDHT;
//...
```"
709729126,15452,Chocobo1,2021-09-16T03:46:30Z,maybe add an empty line above.
709731260,15452,Chocobo1,2021-09-16T03:53:04Z,This should be reset to default.
709731446,15452,Chocobo1,2021-09-16T03:53:39Z,"And set ""Horizontal policy"" to ""Expanding""."
709788977,15452,jagannatharjun,2021-09-16T05:27:06Z,"can't we simplify this code with something like 

```diff
diff --git a/src/gui/torrentoptionsdialog.cpp b/src/gui/torrentoptionsdialog.cpp
index 49ac52cf7..09eddc0af 100644
--- a/src/gui/torrentoptionsdialog.cpp
+++ b/src/gui/torrentoptionsdialog.cpp
@@ -53,6 +53,24 @@ namespace
             slider->setMaximum(value);
         slider->setValue(value);
     }
+
+    template<typename C, typename F>
+    bool allSame(const C &container, const F &unary)
+    {
+        auto b = std::begin(container);
+        const auto e = std::end(container);
+
+        if (b == e) return true;
+
+        const auto v = std::invoke(unary, *b++);
+        while (b != e)
+        {
+            if (v != std::invoke(unary, *b++))
+                return false;
+        }
+
+        return true;
+    }
 }

 TorrentOptionsDialog::TorrentOptionsDialog(QWidget *parent, const QVector<BitTorrent::Torrent *> &torrents)
@@ -64,7 +82,7 @@ TorrentOptionsDialog::TorrentOptionsDialog(QWidget *parent, const QVector<BitTor

     Q_ASSERT(!torrents.empty());
     const auto *session = BitTorrent::Session::instance();
-    bool allSameUpLimit = true, allSameDownLimit = true, allSameRatio = true, allSameSeedingTime = true
+    bool allSameUpLimit = allSame(torrents, &BitTorrent::Torrent::uploadLimit), allSameDownLimit = true, allSameRatio = true, allSameSeedingTime = true
             , allTorrentsArePrivate = true, allSameDHT = true, allSamePEX = true,  allSameLSD = true;

     const int firstTorrentUpLimit = qMax(0, torrents[0]->uploadLimit());
```

maybe also see `std::equal`"
710046164,15452,thalieht,2021-09-16T11:55:26Z,All comments addressed so far.
710046352,15452,thalieht,2021-09-16T11:55:43Z,">can't we simplify this code with something like

Maybe it's simplified for those who can read that :). I'm not familiar with std and i wouldn't know how to change/fix something like that (if asked to)."
712376734,15452,glassez,2021-09-20T17:34:59Z,"```suggestion
        if (!m_ui->checkAutoTMM->isChecked() && (m_initialValues.savePath != savePath))
```"
712695872,15452,glassez,2021-09-21T05:01:26Z,"The following will look more consistent:

```suggestion
    if (allSameAutoTMM)
```

I am also sure that you should not change state of `m_ui->checkAutoTMM` until all the torrents are checked."
712697165,15452,glassez,2021-09-21T05:05:35Z,">I am also sure that you should not change state of `m_ui->checkAutoTMM` until all the torrents are checked.

The same is about other similar checkboxes. You should set these states only after all torrents are traversed:
```c++
if (allSameAutoTMM)
    m_ui->checkAutoTMM->setChecked(isFirstTorrentAutoTMMEnabled);
else
    m_ui->checkAutoTMM->setCheckState(Qt::PartiallyChecked);
```"
712699344,15452,glassez,2021-09-21T05:11:48Z,"Shouldn't you also show automatically assigned save path here? Don't remember how ""Add new torrent"" dialog does it..."
714672893,15452,thalieht,2021-09-23T10:41:13Z,All done.
716150126,15452,Chocobo1,2021-09-26T06:25:50Z,please keep the old values.
716150192,15452,Chocobo1,2021-09-26T06:26:39Z,wrong order
716150555,15452,Chocobo1,2021-09-26T06:29:16Z,"you should remove `#include ""base/utils/fs.h""` from this file."
716150823,15452,Chocobo1,2021-09-26T06:31:06Z,"These 2 lines should move above `Q_ASSERT()`.
Or another way, move `Q_ASSERT()` to the top of this function block."
716151899,15452,Chocobo1,2021-09-26T06:39:44Z,"preferably these should follow the order on UI, so this line should be atop of the previous line."
716152322,15452,Chocobo1,2021-09-26T06:42:49Z,`const QString savePath`
716152772,15452,Chocobo1,2021-09-26T06:47:16Z,"you can omit these 2 lines and refactor it further:
```c++
if ((m_ui->checkAutoTMM->checkState() == Qt::Checked) && !m_ui->comboCategory->currentText().isEmpty())
{
    const QString savePath = BitTorrent::Session::instance()->categorySavePath(m_ui->comboCategory->currentText());
    m_ui->savePath->setSelectedPath(Utils::Fs::toNativePath(savePath));
}
```"
716226028,15452,thalieht,2021-09-26T16:08:19Z,"I added the ""Download sequential"" checkboxes which increased the minimum width and the same goes for height from the other options.

The other comments are addressed."
716575685,15452,glassez,2021-09-27T10:49:03Z,Why is checking for `!m_ui->comboCategory->currentText().isEmpty()` needed?
716807195,15452,thalieht,2021-09-27T15:30:57Z,Because it would show the default save path if it's empty.
716823007,15452,glassez,2021-09-27T15:48:56Z,"> Because it would show the default save path if it's empty.

And what do you expect to see in this case?
""Auto managed"" torrents with ""empty"" category are saved under default save path, aren't they?"
716869444,15452,thalieht,2021-09-27T16:45:59Z,Empty category also means mixed categories (in this dialog) so i missed that case. I'll pass `allSameCategory` to `handleTMMChanged()` and use that instead.
716875935,15452,thalieht,2021-09-27T16:54:21Z,"> I'll pass `allSameCategory` to `handleTMMChanged()` and use that instead.

Doesn't seem to work with connect(). Should i make `allSameCategory` member var or maybe there is another way?"
716883018,15452,glassez,2021-09-27T17:03:51Z,"> Should i make allSameCategory member var or maybe there is another way?

Why not?
But I would make it in a slightly different way. I would declare `m_commonCategory` member as `std::optional<QString>` and use it for both common category name and indicator of its presence. Do you understand what I mean?"
716888033,15452,glassez,2021-09-27T17:10:59Z,"On the other hand, it's not a problem to get the name of a common category, just knowing that it exists (we still have a list of all torrents), so a Boolean member variable is enough.

Offtopic: I just generally dislike the existing names like `allSameXXX`."
717042383,15452,thalieht,2021-09-27T21:01:01Z,">Do you understand what I mean?

Yep, now that i've read up a little on std::optional. I think the bool is simpler though so i used that.

>Offtopic: I just generally dislike the existing names like allSameXXX.

I'm open to suggestions... that don't involve refactoring."
720772591,15452,glassez,2021-10-03T05:34:41Z,"Typo: isFirstTorrent**L**SequentialEnabled
```suggestion
    const bool isFirstTorrentSequentialEnabled = torrents[0]->isSequentialDownload();
```"
720796356,15452,thalieht,2021-10-03T09:05:38Z,Fixed
723193361,15452,glassez,2021-10-06T12:31:00Z,"```suggestion
    if (m_ui->checkAutoTMM->checkState() == Qt::Checked)
```"
723747312,15452,thalieht,2021-10-06T23:27:39Z,">An even bigger problem may be if it prevents someone from changing ""different categories"" to ""no category"".

Yet another case i didn't consider. This change won't be enough. I thought about setting the current index of the category combobox to -1 for mixed and then check for it on `accept()` but this doesn't cover when someone wants to set ""no category""  with the keyboard in the lineedit (by removing whatever is in it which can't be done when it's empty). They'd have to select the empty item from the dropdown list. When every string can be a category, what can be put in the lineedit to denote mixed categories? A conundrum..."
732887437,15452,glassez,2021-10-20T15:16:00Z,"You can refactor the following statement to avoid checking the same variable twice:
```suggestion
    if (!m_allSameCategory)
    {
        m_ui->comboCategory->addItem(m_currentCategoriesString);
        m_ui->comboCategory->clearEditText();
        m_ui->comboCategory->lineEdit()->setPlaceholderText(m_currentCategoriesString);
    }
    else if (!firstTorrentCategory.isEmpty())
    {
        m_ui->comboCategory->setCurrentText(firstTorrentCategory);
        m_ui->comboCategory->addItem(firstTorrentCategory);
    }
```"
742918457,15452,glassez,2021-11-04T14:56:05Z,"Do we really need to handle this case here? If AutoTMM is mixed then ""save path"" should be already empty and disabled, shouldn't it?"
743092218,15452,glassez,2021-11-04T18:13:59Z,Does `isChecked()` return `true` in case check box is partially checked?
743634921,15452,glassez,2021-11-05T12:52:20Z,Anyway you should use `checkState()` here to avoid confusion.
743792794,15452,thalieht,2021-11-05T16:07:01Z,">If AutoTMM is mixed then ""save path"" should be already empty and disabled, shouldn't it?

Yes but consider the case of mixed autoTMM and same category. I had to do this somewhere but apparently this is the wrong place. Moved it to `handleTMMChanged()`"
743792877,15452,thalieht,2021-11-05T16:07:09Z,">Does isChecked() return true in case check box is partially checked?

Yes, i only found out about it in this PR, which is why i started using `checkState()`. Everything i've done in this dialog was under the assumption that `isChecked()` is true only for checked. Fortunately it doesn't seem to matter in other cases (by chance).

>Anyway you should use checkState() here to avoid confusion.

Done."
743887657,15452,glassez,2021-11-05T18:21:18Z,"> but consider the case of mixed autoTMM and same category

Generally it doesn't mean that all the torrents have same save path."
744071489,15452,Chocobo1,2021-11-06T03:59:01Z,"Maybe this can be initialized at the top: just below `, m_storeDialogSize {SETTINGS_KEY(""Size"")}`
```c++
, m_storeDialogSize {SETTINGS_KEY(""Size"")}
, m_currentCategoriesString {QString::fromLatin1(""--%1--"").arg(tr(""Currently used categories""))}
```"
744071602,15452,Chocobo1,2021-11-06T04:00:53Z,"This is an empty item, is it correct?
If it is intended, then try `m_ui->comboCategory->addItem(QString());`"
744071828,15452,Chocobo1,2021-11-06T04:03:42Z,"try `m_ui->comboCategory->lineEdit()->setPlaceholderText({});`
or
``m_ui->comboCategory->lineEdit()->setPlaceholderText(QString());``"
744071924,15452,Chocobo1,2021-11-06T04:05:03Z,"try `m_ui->savePath->setSelectedPath({});`
or
`m_ui->savePath->setSelectedPath(QString());`"
744071986,15452,Chocobo1,2021-11-06T04:06:29Z,ditto
744071989,15452,Chocobo1,2021-11-06T04:06:33Z,ditto
744072078,15452,Chocobo1,2021-11-06T04:07:45Z,I would swap the predicates (check for nullptr first): `if (currentRadio && (currentRadio == m_previousRadio))`
744072313,15452,Chocobo1,2021-11-06T04:10:18Z,"This is unusual, please add some comment within this block about why this is required."
744111312,15452,thalieht,2021-11-06T10:49:24Z,"All comments addressed.
>This is an empty item, is it correct?

Yes, for ""no category""."
933762453,17389,Chocobo1,2022-07-30T06:45:39Z,I would calculate in floating point. Performance isn't worth for risking overflow IMO.
933762907,17389,Chocobo1,2022-07-30T06:50:30Z,"```suggestion
    auto *progressDialog = new QProgressDialog(this);
```"
933765153,17389,glassez,2022-07-30T07:14:20Z,`Application` isn't `QWidget` but parent of `QWidget` is `QWidget`.
933772556,17389,glassez,2022-07-30T08:30:20Z,"> Performance isn't worth for risking overflow IMO.

Overflow is hardly achievable in practice. This is only possible if there are more torrents than (max int64 / 100). This is hardly possible. So your proposal is akin to an offer to live in a bunker for all of your life because of the possible threat of a nuclear strike.
Are you still going to insist on this? Of course, it's not a big deal to make the startup acceleration a little slower..."
933777565,17389,Chocobo1,2022-07-30T09:21:46Z,"If you really don't want floating point then you should put a `Q_ASSERT(context->finishedResumeDataCount  <= (std::numeric_limits<int64_t>::max() / 100))` to show the allowed/intended maximum size.

>Of course, it's not a big deal to make the startup acceleration a little slower...

You always talked about it but what is the reality?

https://stackoverflow.com/a/41570985
https://stackoverflow.com/a/36397764
https://stackoverflow.com/questions/55832817/why-float-division-is-faster-than-integer-division-in-c
Didn't found data on ARM architecture... but I assume that if the CPU is powerful enough to run qbt then there is high chance to include an FPU.

Of course, (in general) keeping calculations to integer is a good practice but it is only acceptable when there are no safety concerns in the edge cases, otherwise I won't hesitate to use floating point."
933778063,17389,Chocobo1,2022-07-30T09:27:03Z,"~~`progressDialog` should be a class variable.~~
Can you set `Qt::WA_DeleteOnClose` on it?
I'm concerned that its memory isn't correctly freed on exit."
933792958,17389,glassez,2022-07-30T11:10:45Z,"> You always talked about it but what is the reality?

Yes, you're right. Division is the weak side of integer calculations (unless it is division by a power of two)."
933795490,17389,glassez,2022-07-30T11:38:55Z,"> I would calculate in floating point.

Done."
933795512,17389,glassez,2022-07-30T11:39:11Z,"> Can you set `Qt::WA_DeleteOnClose` on it?

Done."
933928415,17389,Chocobo1,2022-07-31T05:35:38Z,"Maybe use `float` instead of `double`:
```suggestion
        emit startupProgressUpdated((context->finishedResumeDataCount * 100.f) / context->totalResumeDataCount);
```"
933929068,17389,Chocobo1,2022-07-31T05:42:28Z,"```suggestion
    progressDialog->setAttribute(Qt::WA_DeleteOnClose);
```"
933929102,17389,Chocobo1,2022-07-31T05:42:55Z,"`desktopIntegrationMenu` should set `Qt::WA_DeleteOnClose`
and remove `delete m_desktopIntegration->menu();`"
933929359,17389,Chocobo1,2022-07-31T05:45:57Z,"```suggestion
    actionExit->setShortcut(QKeySequence::Quit);
```"
933929882,17389,Chocobo1,2022-07-31T05:52:21Z,"If would be nice if you can also change it to:
```suggestion
    return EXIT_FAILURE;
```"
933930089,17389,Chocobo1,2022-07-31T05:54:31Z,This is also set on line 681. Maybe merge them?
933930718,17389,glassez,2022-07-31T06:02:23Z,"> Maybe use `float` instead of `double`:

What is the reason not to use the default type, provided that you don't care about the insignificant performance tuning?"
933930935,17389,glassez,2022-07-31T06:04:09Z,"> `desktopIntegrationMenu` should set `Qt::WA_DeleteOnClose` and remove `delete m_desktopIntegration->menu();`

Then the menu will be deleted after the first use, or am I wrong?"
933931017,17389,glassez,2022-07-31T06:05:24Z,"Is it the same?
Note that I just copied the key sequence from existing code in MainWindow."
933931824,17389,glassez,2022-07-31T06:13:58Z,"> This is also set on line 681. Maybe merge them?

How would you suggest to do it?
Note that createStartupProgressDialog should create it with 0 duration by default to connect it with desktop integration signal."
933937313,17389,Chocobo1,2022-07-31T07:06:01Z,"ok, forget it."
933937563,17389,Chocobo1,2022-07-31T07:08:24Z,"I read it wrong, it is good here."
933937738,17389,Chocobo1,2022-07-31T07:09:33Z,"Not for Windows: https://doc.qt.io/qt-6/qkeysequence.html#standard-shortcuts
I suppose this is the reason of not using `QKeySequence::Quit` in MainWindow...
Forget this."
933937922,17389,Chocobo1,2022-07-31T07:10:59Z,"OK, maybe add a bit of comment in code so future reviewers will know why it is needed."
934146875,17389,Chocobo1,2022-08-01T05:22:49Z,I would use another ctor https://doc.qt.io/qt-6/qprogressdialog.html#QProgressDialog-1 that can take more arguments at once.
934149866,17389,Chocobo1,2022-08-01T05:29:42Z,Why this?
934151833,17389,Chocobo1,2022-08-01T05:34:38Z,"If you don't mind
```suggestion
            QCoreApplication::exit(EXIT_FAILURE);
```"
934151898,17389,Chocobo1,2022-08-01T05:34:45Z,"```suggestion
        connect(m_webui, &WebUI::fatalError, this, []() { QCoreApplication::exit(EXIT_FAILURE); });
```"
934153779,17389,Chocobo1,2022-08-01T05:39:21Z,Seems it can be omitted now?
934158010,17389,glassez,2022-08-01T05:49:35Z,"> I would use another ctor https://doc.qt.io/qt-6/qprogressdialog.html#QProgressDialog-1 that can take more arguments at once.

Ok."
934163901,17389,glassez,2022-08-01T06:02:26Z,"But I will prefer to add `WindowMinimizeButtonHint` flag separately. Otherwise, I would have to specify all the necessary flags in the constructor, which looks unnecessarily cumbersome."
934164071,17389,glassez,2022-08-01T06:02:47Z,"> Seems it can be omitted now?

Yes. Done."
934168274,17389,glassez,2022-08-01T06:11:08Z,"> Why this?

I just copied the existing logic from the `MainWindow`. It doesn't provide `Exit` action in the case of macOS (don't force me to figure out why it's done this way!), and since there are no more actions here, we don't need to create the menu itself, do we?"
1468888786,20314,glassez,2024-01-28T15:36:21Z,Wouldn't it be better to use `QDir::entryList()` instead?
1468907016,20314,pktiuk,2024-01-28T17:29:25Z,"It doesn't matter that much, but using entryList makes code shorter.

It looks a bit nicer now"
1468915980,20314,glassez,2024-01-28T18:31:35Z,"```suggestion
    const QStringList dirs = QDir(path).entryList(QDir::Dirs | QDir::NoDotAndDotDot);
```"
1476978108,20314,Chocobo1,2024-02-03T05:24:19Z,You should at least reject special paths that are: 1. empty 2. paths starting with `:` character.
1477033249,20314,glassez,2024-02-03T09:51:17Z,Only absolute paths should be accepted.
1477111525,20314,pktiuk,2024-02-03T18:41:32Z,@Chocobo1 Why some paths could start with `:`?
1477118845,20314,glassez,2024-02-03T19:48:22Z,"> @Chocobo1 Why some paths could start with `:`?

[The Qt Resource System](https://doc.qt.io/qt-6/resources.html)"
1477119434,20314,glassez,2024-02-03T19:54:23Z,"```suggestion
    const QDir dir {path};
    if (!dir.exists() || !dir.isAbsolute())
        throw APIError(APIErrorType::NotFound);
```"
1477119501,20314,glassez,2024-02-03T19:54:48Z,"Once again: 
```suggestion
    const QStringList dirs = dir.entryList(QDir::Dirs | QDir::NoDotAndDotDot);
```"
1477119689,20314,glassez,2024-02-03T19:55:40Z,"I would consider non-absolute path as ""bad params""."
1477129803,20314,pktiuk,2024-02-03T21:39:04Z,"Oh, I forgot about this mechanism"
1477306239,20314,pktiuk,2024-02-04T12:44:07Z,I added this check.
1477306271,20314,pktiuk,2024-02-04T12:44:24Z,It seems reasonable
1477313903,20314,Chocobo1,2024-02-04T13:33:42Z,"wrong order. put it just above `""../webapplication.h""`"
1477314199,20314,Chocobo1,2024-02-04T13:35:47Z,"Here using `APIErrorType::NotFound` is wrong. It maps to http 404 error which is incorrect for this case.
Just combine it with the above:
```suggestion
    if (!dir.isAbsolute() || !dir.exists())
        throw APIError(APIErrorType::BadParams);
```"
1477314640,20314,Chocobo1,2024-02-04T13:38:46Z,"I would avoid redundant temporary string list by using:
```suggestion
    QJsonArray ret;
    QDirIterator it {path, (QDir::Dirs | QDir::NoDotAndDotDot)};
    while (it.hasNext())
    {
        const QString filePath = it.next();
        ret.append(filePath);
    }
    setResult(ret);
```"
1477315928,20314,pktiuk,2024-02-04T13:46:07Z,Done
1477317531,20314,pktiuk,2024-02-04T13:55:07Z,"@Chocobo1   
Are you sure it will compile? (Returning value in the void method)"
1477317715,20314,Chocobo1,2024-02-04T13:56:19Z,">Are you sure it will compile? (Returning value in the void method)

Oops, I fixed it."
1477318089,20314,Chocobo1,2024-02-04T13:58:38Z,"@pktiuk 
Since you haven't replied to https://github.com/qbittorrent/qBittorrent/pull/20314#pullrequestreview-1860844769 I'll ask here.

In the future, wouldn't there be expectations of listing files under some directory? Would you consider making this API endpoint more generic by having a 'mode' parameter? ('file mode' or 'dir mode').
Or there should be another API endpoint just for listing files? but isn't these 2 endpoints similar and it would be cumbersome for the webAPI user to differentiate them? (compared to using a 'mode' parameter)

If we go with the generic endpoint, then you should add the 'dir mode' parameter in this PR. Also the API name should be modified accordingly (for example `getFSPaths`)."
1477318443,20314,pktiuk,2024-02-04T14:01:06Z,"@Chocobo1 Don't you think there should be a different response from server when we give wrong parameter (something, starting with `:` or not path at all) and when we give a proper path, but to a nonexistent location?"
1477319237,20314,pktiuk,2024-02-04T14:05:20Z,"I think that it is a good idea.   
Adding a mode would make using much easier in cases when we would like to get directories and files. (there should be 3 modes: `files`, `directories` and `all`)."
1477319265,20314,glassez,2024-02-04T14:05:31Z,"> Don't you think there should be a different response from server when we give wrong parameter (something, starting with `:` or not path at all) and when we give a proper path, but to a nonexistent location?

I believe it should be. They are obviously different cases. If you don't like it to be ""Not found"" then it could be ""Conflict""."
1477320567,20314,Chocobo1,2024-02-04T14:11:55Z,">I believe it should be. They are obviously different cases. If you don't like it to be ""Not found"" then it could be ""Conflict"".

~~'Conflict' is http error 409 which is also inappropriate.~~
It should be OK.

>@Chocobo1 Don't you think there should be a different response from server when we give wrong parameter (something, starting with : or not path at all) and when we give a proper path, but to a nonexistent location?

Yes, I would still use `BadParams` (http error 400) but provide different message in `message` field:
https://github.com/qbittorrent/qBittorrent/blob/4076712911349feb51eeacdb3ff63516bbc26b59/src/webui/api/apierror.h#L45"
1477324819,20314,glassez,2024-02-04T14:16:21Z,"> Yes, I would still use `BadParams` (http error 400) but provide different message in `message` field

But ""Bad params"" is inappropriate in this case, isn't it? Parameter is valid."
1477329573,20314,glassez,2024-02-04T14:18:33Z,">[400 Bad Request](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400)
The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."
1477330840,20314,glassez,2024-02-04T14:20:34Z,">[404 Not Found](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404)
The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but **the resource itself does not exist**.

Isn't it the case?"
1477333033,20314,Chocobo1,2024-02-04T14:34:33Z,"Based on these descriptions:
https://www.rfc-editor.org/rfc/rfc9110#name-client-error-4xx
https://www.rfc-editor.org/rfc/rfc9110#name-server-error-5xx
I think `!dir.exists()` should return 5xx error code since the error is on server side not the client. Maybe error `500` would suffice?

https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
>The HyperText Transfer Protocol (HTTP) 500 Internal Server Error server error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
>This error response is a generic ""catch-all"" response. Usually, this indicates the server cannot find a better 5xx error code to response."
1477336699,20314,Chocobo1,2024-02-04T14:43:03Z,Or if we still can't agree on 4xx (client error) or 5xx (server error). Then maybe just return `200 OK` with an empty list for `!dir.exists()` case.
1477367014,20314,glassez,2024-02-04T16:41:50Z,"> Then maybe just return `200 OK` with an empty list for `!dir.exists()` case.

This looks confusing, as this response is expected for an existing empty directory. 

>Maybe error 500 would suffice?

500 code with the corresponding message looks acceptable to me."
1486379338,20314,pktiuk,2024-02-12T15:51:03Z,"**To sum up**. You think the response codes should look like this:

- Proper path returns `200` (even when directory is empty)
- Not path (string which is not a path) returns `400` (Bad Request)
- Path to a non-existent directory  `500` (Internal Server Error)

@Chocobo1 

In my opinion, returning 500 is unacceptable and messy, because it means, that something went wrong/we have unhandled error. This is a bit too generic crash response.    
I think `404` (Not Found) is the best option for this case, because we make a query to a non-existent directory. So in this case this is the best option, because server did not find a directory to make query.

> The 404 (Not Found) status code indicates that the origin server did not find a current representation for the [target resource](https://www.rfc-editor.org/rfc/rfc9110#target.resource) or

> The HTTP 404 Not Found response status code indicates that the server cannot find the requested resource

 Implementation on the client side would be also more readable, when we handle not found than exception

```js
if (code == HttpStatusCode.NOT_FOUND){
console.log(""this directory does not exist"")
//VS
if (code == HttpStatusCode.INTERNAL_SERVER_ERROR){
console.log(""this directory does not exist, or sever crashed IDK"")
   if (message == ""directory does not exist""){
      console.log(""now we know, that this dir does not exist"")
```"
1488498906,20314,Chocobo1,2024-02-13T19:51:21Z,">I think 404 (Not Found) is the best option for this case, because we make a query to a non-existent directory. So in this case this is the best option, because server did not find a directory to make query.

I don't insist on my opinion anymore. I don't mind you use it."
1490000364,20314,pktiuk,2024-02-14T20:07:01Z,"This code does not compile
```
[build] /workspace/qbittorrent/src/webui/api/appcontroller.cpp: In member function 'void AppController::getDirectoryContentAction()':
[build] /workspace/qbittorrent/src/webui/api/appcontroller.cpp:1114:18: error: variable 'QDirIterator it' has initializer but incomplete type
[build]  1114 |     QDirIterator it {dir_path, (QDir::Dirs | QDir::NoDotAndDotDot)};
[build]       |                  ^~
[build] ninja: build stopped: subcommand failed.
```

Moreover, it makes code much less readable.

> I would avoid redundant temporary string list

I don't think this is a problem. The compiler should take care of this variable."
1490335655,20314,glassez,2024-02-15T03:53:33Z,"> This code does not compile

It's because you didn't include corresponding header (where `QDirIterator` is declared)."
1490603779,20314,pktiuk,2024-02-15T08:25:55Z,🤦 
1490604594,20314,pktiuk,2024-02-15T08:26:39Z,"But I still find this code messy, less readable and not much better optimized."
1490846304,20314,glassez,2024-02-15T11:13:09Z,"I would make ""mode"" optional and default to ""all""."
1490870961,20314,Chocobo1,2024-02-15T11:32:50Z,">But I still find this code messy, less readable and not much better optimized.

It is ok you don't do it. I can do a follow up commit later. FYI I've already submitted a similar 'clean up' within this commit: https://github.com/qbittorrent/qBittorrent/commit/f87ea1b5d3e0ac6cb3d3a6fef41721b5896b6645

>The compiler should take care of this variable.

To be really sure, you'll need to look at the generated assembly. Anyway I don't really think C++ compilers is able/capable of doing that."
1490931521,20314,glassez,2024-02-15T12:24:09Z,"```suggestion
    const QString dirPath = params().value(u""dirPath""_s);
```"
1490942665,20314,glassez,2024-02-15T12:33:48Z,"I would avoid testing visibility value twice:
```suggestion
    const QString visibility = params().value(u""mode""_s, u""all""_s);
    if (visibility == u""dirs"")
        filters |= QDir::Dirs;
    else if (visibility == u""files"")
        filters |= QDir::Files;
    else if (visibility == u""all"")
        filters |= QDir::Dirs | QDir::Files;
        else
            throw APIError(APIErrorType::BadParams, u""Invalid mode, allowed values: all, dirs, files""_s);
```"
1490949739,20314,glassez,2024-02-15T12:39:58Z,"And even extract it into function:
```c++
QDir::Filters parseDirectoryContentMode(const QString &visibility)
{
    if (visibility == u""dirs"")
        return QDir::Dirs;
    if (visibility == u""files"")
        return QDir::Files;
    if (visibility == u""all"")
        return (QDir::Dirs | QDir::Files);
    throw APIError(APIErrorType::BadParams, u""Invalid mode, allowed values: all, dirs, files""_s);
}
```"
1492166549,20314,pktiuk,2024-02-16T09:09:22Z,Done
1493251272,20314,glassez,2024-02-17T07:06:22Z,"You don't really need it to be a class member. Just put it as ""free"" function into unnamed namespace above `AppController` definitions in `appcontroller.cpp`."
1493298285,20314,pktiuk,2024-02-17T10:37:43Z,Done
1493327467,20314,glassez,2024-02-17T12:24:54Z,"> Done

Neither ""into unnamed namespace"" nor ""above AppController definitions"" are done."
1493344133,20314,Chocobo1,2024-02-17T14:23:05Z,"qbt enable translations for api error messages:
```suggestion
    throw APIError(APIErrorType::BadParams, tr(""Invalid mode, allowed values: all, dirs, files""));
```
And to ensure proper scope for `tr()` I suggest you make this helper function a lambda within `getDirectoryContentAction()` if there are no plans to reuse it. Otherwise move it to `AppController` class private function."
1493345982,20314,glassez,2024-02-17T14:37:53Z,Hmm... If API error messages need to be translated then my previous [suggestion](https://github.com/qbittorrent/qBittorrent/pull/20314#discussion_r1493251272) should be rejected.
1493349309,20314,glassez,2024-02-17T14:57:13Z,Otherwise you cannot use `tr()` in this helper function
1518552589,20314,pktiuk,2024-03-09T10:41:28Z,"@Chocobo1 

> And to ensure proper scope for tr() I suggest you make this helper function a lambda within getDirectoryContentAction() if there are no plans to reuse it. Otherwise move it to AppController class private function.

I don't know what do you mean, I did not work with qt translations and I have no idea how to write lambda which will initialize context."
1538009531,20314,Chocobo1,2024-03-25T17:53:48Z,">I don't know what do you mean, I did not work with qt translations and I have no idea how to write lambda which will initialize context.

First, apply the suggested change above. (from the first post of this thread)
Then: 
```c++
void AppController::getDirectoryContentAction()
{
    requireParams({u""dirPath""_s});

    // move the function to here:
    const auto parseDirectoryContentMode = [](const QString &visibility) -> QDir::Filters
    {
        // ...
    };
  ```"
1548638572,20314,pktiuk,2024-04-02T21:36:40Z,@Chocobo1 Done
1564606759,20314,Chocobo1,2024-04-14T10:09:52Z,"We require explicit return type:
```suggestion
    const auto parseDirectoryContentMode = [](const QString &visibility) -> QDir::Filters
```"
1564606915,20314,Chocobo1,2024-04-14T10:10:12Z,"`QObject::` is redundant:
```suggestion
        throw APIError(APIErrorType::BadParams, tr(""Invalid mode, allowed values: all, dirs, files""));
```"
1564607366,20314,Chocobo1,2024-04-14T10:10:45Z,"```suggestion
    const QStringList dirs = dir.entryList(QDir::NoDotAndDotDot  | parseDirectoryContentMode(visibility));
```"
1564610859,20314,Chocobo1,2024-04-14T10:18:47Z,"Not sure this was mentioned before, try:
```suggestion
            return QDir::Dirs;
```
after applying https://github.com/qbittorrent/qBittorrent/pull/20314#discussion_r1564606759"
1564620546,20314,glassez,2024-04-14T10:40:51Z,"> We require explicit return type

Really?
Although in this case it makes sense."
1565159443,20314,Chocobo1,2024-04-15T04:11:41Z,"```suggestion
            return QDir::Files;
```"
1565159508,20314,Chocobo1,2024-04-15T04:11:49Z,"```suggestion
            return (QDir::Dirs | QDir::Files);
```"
1565159623,20314,Chocobo1,2024-04-15T04:12:06Z,"```suggestion
    const QStringList dirs = dir.entryList(QDir::NoDotAndDotDot | parseDirectoryContentMode(visibility));
```"
1566057391,20314,pktiuk,2024-04-15T16:18:51Z,This one should be caught by your CI.
1574599451,20314,glassez,2024-04-22T11:29:15Z,"`all, dirs, files` should not be translated."
1574601080,20314,glassez,2024-04-22T11:30:42Z,"```suggestion
        throw APIError(APIErrorType::BadParams, tr(""Invalid mode, allowed values: %1"").arg(u""all, dirs, files""_s));
```"
588827943,14465,Chocobo1,2021-03-06T04:01:53Z,"`const QStringView` (and other replacements of `const QString &`)
There exist `QStringView::chop()` which could modify the view.
"
589381530,14465,glassez,2021-03-08T12:21:16Z,I hope I fixed it everywhere it isn't supposed to be modified.
631675660,14465,glassez,2021-05-13T09:12:12Z,"Does someone know why this line causes the following warnings?
>Warning: plug-in Qt6::QSvgIconPlugin is not known to the current Qt installation.
Warning: plug-in Qt6::QSvgPlugin is not known to the current Qt installation."
631699751,14465,ArcticGems,2021-05-13T09:58:25Z,"Maybe this helps?? 😕
https://bugreports.qt.io/browse/QTBUG-89643"
631703529,14465,glassez,2021-05-13T10:05:41Z,"I noticed this bug report. Unfortunately, I don't see any useful information there. In addition, it belongs to a statically linked Qt."
631706522,14465,glassez,2021-05-13T10:11:35Z,"Just found in Qt docs:
>Note: This command imports plugins from static Qt builds only.
On shared builds, it does nothing"
631708987,14465,FranciscoPombal,2021-05-13T10:16:38Z,"@glassez 

I had fixed those warnings in https://github.com/glassez/qBittorrent/pull/1 ..."
631716816,14465,glassez,2021-05-13T10:31:43Z,Doesn't seem that adding `NOT MSVC_RUNTIME_DYNAMIC` condition is correct way to fix it.
631728128,14465,FranciscoPombal,2021-05-13T10:55:05Z,"@glassez

Why? OK, maybe it fails in the corner case where you're building with static libraries (including Qt) but using `-MD`, is that it (such as the case with `vcpkg`'s unofficial `x64-windows-static-md` triplet)? If that's the case, to fix it fully we need a way to ask Qt itself if it was built statically or not (I think this should be easy, I'll look into it).

My fix was based on the assumption that if you're building with `MSVC_RUNTIME_DYNAMIC=OFF` you're also building with static libraries, which I think is fair, but yeah, it leaves out that corner case."
631746699,14465,glassez,2021-05-13T11:34:24Z,Could https://cmake.org/cmake/help/latest/prop_tgt/TYPE.HTML help?
631941482,14465,FranciscoPombal,2021-05-13T16:30:28Z,"@glassez Thanks, the `TYPE` solution is confirmed to work (both with and without `vcpkg`). It is now implemented in https://github.com/glassez/qBittorrent/pull/1."
720314841,14465,Chocobo1,2021-10-01T14:51:08Z,"Is it possible to add a space?
```qmake
win32: lessThan(QT_VERSION_MAJOR, 6) {
```"
720639686,14465,glassez,2021-10-02T07:02:26Z,Done.
1372228789,19777,sledgehammer999,2023-10-25T19:22:45Z,is -> are
1372247010,19777,sledgehammer999,2023-10-25T19:39:32Z,"Why? Doesn't this just take unnecessary memory space?
IMO it would be preferable to just make the option strongly typed instead. eg something like this:
```c++
enum class TEMP_PWD : char {
  DISABLED: 0,
  ENABLED: 1
}

explicit WebUI(IApplication *app, TEMP_PWD isTempPasswordAllowed = TEMP_PWD::DISABLED);
```

But I would vote for staying with `bool` type and not having a variable defined for a special value. The constructor's parameter name is sufficient."
1372561091,19777,glassez,2023-10-26T04:17:00Z,"> The constructor's parameter name is sufficient.

It is enough inside the class itself. I care about the place of its use. Compare the following:
```c++
// What is the difference between the following instances?
// You need to at least look at the class declaration.
new WebUI(this, true);
new WebUI(this, false);

// The following looks more self-descriptive, doesn't it?
new WebUI(this);
new WebUI(this, WebUI::ALLOW_TEMP_PASSWORD);
```

Of course I can use `enum` instead."
1372601222,19777,glassez,2023-10-26T05:26:57Z,">Of course I can use enum instead.

Done."
1374762900,19777,Chocobo1,2023-10-27T15:48:53Z,"```suggestion
            fprintf(stderr, ""WebUI configuration failed. Reason: %s\n"", qUtf8Printable(message));
```
We probably should clean up all ""Web UI"" to ""WebUI"" at some point (not necessarily in this PR)."
1374764470,19777,Chocobo1,2023-10-27T15:50:21Z,"```suggestion
                        + tr(""The Web UI administrator password was not set. A temporary password is provided for this session: %1"").arg(tempPassword) + u'\n'
```"
1374765830,19777,Chocobo1,2023-10-27T15:51:44Z,"```suggestion
                        + tr(""You should update it to your own password in program preferences."") + u'\n';
```"
1374771473,19777,Chocobo1,2023-10-27T15:57:10Z,"I would suggest to not use view as you'll unnecessary deep copy it instead of implicit sharing.
```suggestion
void AuthController::setUsername(const QString &username)
```

The same for `void AuthController::setPasswordHash(const QByteArray &passwordHash)`"
1374779717,19777,Chocobo1,2023-10-27T16:05:01Z,I couldn't find where it is used.
1374780409,19777,Chocobo1,2023-10-27T16:05:45Z,"```suggestion
void WebUI::setError(const QString &message)
```
Now I wonder what benefit does a view brings. It doesn't seem useful when there is implicit sharing where you can avoid a deep copy most of the time."
1374786584,19777,Chocobo1,2023-10-27T16:12:17Z,"```suggestion
WebUI::WebUI(IApplication *app, const bool isTempPasswordAllowed)
```"
1374787948,19777,Chocobo1,2023-10-27T16:13:41Z,"I would name it:
```suggestion
WebUI::WebUI(IApplication *app, bool tempPasswordEnabled)
```"
1374794226,19777,Chocobo1,2023-10-27T16:20:12Z,"Which `arg` overload is in use here?
Shouldn't you write:
```suggestion
        m_tempPassword = u""%1""_s.arg(Utils::Random::rand(0, 999999999), 9, 10, u'0');
```"
1374797309,19777,Chocobo1,2023-10-27T16:23:33Z,"It is a red flag that you keep the clear text password in memory. You should avoid doing so and use other means.
~~Also ideally this field should be allocated on the stack instead of on the heap.~~
Note that securely erasing a string isn't even easy!
https://stackoverflow.com/questions/5698002/how-does-one-securely-clear-stdstring
https://stackoverflow.com/questions/3785366/how-to-ensure-that-compiler-optimizations-dont-introduce-a-security-risk"
1374865641,19777,glassez,2023-10-27T17:28:55Z,"> It is a red flag that you keep the clear text password in memory. You should avoid doing so and use other means.

Do you really believe that we should take care of those cases when someone malicious has sufficient access to a computer to read its memory? How can we counteract it in any way effectively?"
1374932604,19777,glassez,2023-10-27T18:43:17Z,">You should update it to your own password in program preferences.

I think it is incorrect to use ""update"" in this case. Do not forget that the password has not yet been set by the user, so that there is something to update."
1375177735,19777,Chocobo1,2023-10-28T05:41:46Z,">Do you really believe that we should take care of those cases when someone malicious has sufficient access to a computer to read its memory? How can we counteract it in any way effectively?

Yes. It may not be local access to the computer. It could be remote access/tampering with out-of-bound memory read/write (assuming there are undiscovered vulnerability either in 3rd party libraries or qbt code)."
1375177856,19777,Chocobo1,2023-10-28T05:42:57Z,Then: `You should set your own password in program preferences.`
1375200493,19777,glassez,2023-10-28T07:57:32Z,"> Now I wonder what benefit does a view brings.

Seems I've just misused it. `QStringView` is useful when the function isn't intended to store provided string but to process/parse it in some way."
1375227756,19777,glassez,2023-10-28T10:07:27Z,"> I couldn't find where it is used.

It is used in the place where WebUI is constructed:
https://github.com/qbittorrent/qBittorrent/blob/df893ef170b024974000a5d12e25696e849228c4/src/app/application.cpp#L893"
1375377651,19777,Chocobo1,2023-10-29T06:36:30Z,"Shouldn't you use it here too:
```c++
explicit WebUI(IApplication *app, TempPasswordOption tempPasswordEnabled = DISABLE_TEMP_PASSWORD);
```"
1375391396,19777,glassez,2023-10-29T08:29:23Z,"I didn't intend to make a full-fledged type out of it, just a named constant to improve the readability of the code.

P.S. `tempPasswordEnabled = DISABLE_TEMP_PASSWORD` looks weird/ugly."
1375392108,19777,glassez,2023-10-29T08:34:44Z,This code will most likely gone when refactoring to avoid store plain text password.
1382522322,19777,Chocobo1,2023-11-05T07:27:54Z,seems you don't need this.
1382525691,19777,glassez,2023-11-05T07:54:56Z,"> seems you don't need this.

You're right. This is a forgotten remnant from one of the previous implementations. Deleted it."
1382612085,19777,sledgehammer999,2023-11-05T17:13:04Z,"Shouldn't this be:
```c++
if (webUIPassword().length() < 6)
```
??"
1382618499,19777,sledgehammer999,2023-11-05T17:53:19Z,"~1. The arg() signature is wrong. As @Chocobo1 had mentioned it should be:~
```c++
arg(QString::number(Utils::Random::rand(0, 999999999)), 9, 10, u'0')
```

2. Secondly, even for a temporary password, I don't consider the generated one as sufficiently secure based on this method. I would propose something like this:
```c++
QString generatePasswd()
{
  QString pass;
  pass.reserve(9);
  while (pass.length() < 9)
  {
    // ASCII min/max
    const auto num = Utils::Random::rand(48, 122);
    // ASCII 96 is a somewhat difficult character to write via keyboard
    if (num == 96) continue;

    pass.append(static_cast<char16_t>(num));
  }
}
```"
1382623571,19777,glassez,2023-11-05T18:26:54Z,"> 1. The arg() signature is wrong. As @Chocobo1 had mentioned it should be:
> 
> ```c++
> arg(QString::number(Utils::Random::rand(0, 999999999)), 9, 10, u'0')
> ```

You got it wrong. I just chose another valid overload that has less ambiguous in recognizing parameter types.
Your example is wrong."
1382624144,19777,glassez,2023-11-05T18:29:40Z,"> 2\. Secondly, even for a temporary password, I don't consider the generated one as sufficiently secure based on this method

I just took advantage of what was suggested in the early discussions.
>I would propose something like this:

I can do that if @Chocobo1 also approve it. I don't want to get stuck here."
1382627852,19777,sledgehammer999,2023-11-05T18:57:20Z,">You got it wrong. I just chose another valid overload that has less ambiguous in recognizing parameter types.
Your example is wrong.

+1
QString::number() returns a QString and I was looking at the wrong overload signatures."
1382817782,19777,Chocobo1,2023-11-06T06:06:19Z,">Secondly, even for a temporary password, I don't consider the generated one as sufficiently secure based on this method. I would propose something like this:

Sure it is harder to brute force but it also might be a bit troublesome for users to input. Regarding to brute force, webui already has mechanism to filter that so I won't worry about this attack.
I don't have strong preference here."
1382861597,19777,glassez,2023-11-06T07:15:53Z,"> Shouldn't this be:
> 
> ```c++
> if (webUIPassword().length() < 6)
> ```
> 
> ??

No. We has no password in input field when editing settings (since it is unknown). Writing empty password to settings is prevented in other place of code."
1382887336,19777,sledgehammer999,2023-11-06T07:49:02Z,">Sure it is harder to brute force but it also might be a bit troublesome for users to input.

Then it could be something like:
```c++
QString generatePasswd()
{
  const QString alphanum = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";
  QString pass;
  pass.reserve(9);
  while (pass.length() < 9)
  {
    const auto num = Utils::Random::rand(0, (alphanum.size() - 1));
    pass.append(alphanum[num]);
  }

  return pass;
}
```

IMO, having a numeric only password is not good enough for something exposed to the Internet.
"
1382964348,19777,Chocobo1,2023-11-06T08:59:50Z,">IMO, having a numeric only password is not good enough for something exposed to the Internet.

OK, I don't mind it."
1383240880,19777,sledgehammer999,2023-11-06T12:15:22Z,"PS: The characters `0`, `O`, `o`, `1`, `l`, `i` should be dropped as look-alikes"
1383245245,19777,glassez,2023-11-06T12:19:29Z,Done.
1383260372,19777,Chocobo1,2023-11-06T12:33:02Z,"```suggestion
    const int passwordLength = 9;
    QString pass;
    pass.reserve(passwordLength);
    while (pass.length() < passwordLength)
    {
        const auto num = Utils::Random::rand(0, (alphanum.size() - 1));
```"
1383278059,19777,Chocobo1,2023-11-06T12:48:47Z,"I was hoping not to see this... this function (set/get webui username/password) should be moved to WebUI class. And I was hoping that Preferences class would only handle the save/load of values, not validating data nor data transforms."
1383310011,19777,glassez,2023-11-06T13:11:34Z,"Reverted.
> this function (set/get webui username/password) should be moved to WebUI class.

I'll leave it to someone else. As I said above, I would like to limit myself to the necessary minimum of changes. This topic is outside the scope of my interests.
Now credentials are being checked in the UI layers (GUI and WebUI). As for WebAPI, it should first of all be redesigned in order to have a separate entry point for changing credentials, and not accept them together with the regular settings (yes, these are just regular settings from the GUI's point of view, but this is not the case for the WebUI)."
1383313309,19777,glassez,2023-11-06T13:14:34Z,">this function (set/get webui username/password) should be moved to WebUI class

This will require deeper changes to the WebUI initialization process (I mean the case when we have to determine whether a temporary password is needed)."
1383345388,19777,sledgehammer999,2023-11-06T13:38:49Z,"As far as I can tell `OptionsDialog::webUIAuthenticationOk()` is a way to force certain traits on the admin/pass before closing the options window.
Currently, we don't enforce a non-empty password in the options window if the webui is enabled. Aka we don't tell the user to fix it. Only if the admin/password is short.
Maybe it is a bug that the calling sites of `webUIAuthenticationOk()` don't check if WebUI is enabled?"
1383378765,19777,glassez,2023-11-06T14:02:57Z,"> As far as I can tell ...

As I said above we don't know the password when editing the settings. Empty password just means ""password was not changed"" so nothing is written in settings:
https://github.com/qbittorrent/qBittorrent/blob/b7a0dee53d8bcacaab55cc35524c1a7f105a6053/src/gui/optionsdialog.cpp#L1323-L1324"
1383390168,19777,sledgehammer999,2023-11-06T14:11:33Z,"Let me rephrase my issue: If user has opened the preferences dialog, enabled the webui and not set a password*, we shouldn't let him close the dialog while the WebUI setting is checked. Silently failing is not a good approach in this case.

*I mean no password either on disk or in the input box.

Could this be implemented without much refactoring?"
1383428764,19777,sledgehammer999,2023-11-06T14:29:10Z,"Maybe a 3rd check?
```c++
if (isWebUIEnabled() && pref->getWebUIPassword().isEmpty() && webUIPassword().isEmpty())
{
      QMessageBox::warning(this, tr(""Unset Password""), tr(""The WebUI password must be set.""));
      return false;
}
```"
1383448503,19777,sledgehammer999,2023-11-06T14:43:13Z,">this function (set/get webui username/password) should be moved to WebUI class

Or be a throwaway lambda at the calling site...

>This will require deeper changes to the WebUI initialization process (I mean the case when we have to determine whether a temporary password is needed).

Personally, I don't require this for this PR."
1383512939,19777,glassez,2023-11-06T15:25:36Z,"> Let me rephrase my issue: If user has opened the preferences dialog, enabled the webui and not set a password*, we shouldn't let him close the dialog while the WebUI setting is checked. Silently failing is not a good approach in this case.
> 
> *I mean no password either on disk or in the input box.

Ah, I get it now... I'll think about it."
1383518076,19777,glassez,2023-11-06T15:29:00Z,"> > this function (set/get webui username/password) should be moved to WebUI class
> 
> This will require deeper changes to the WebUI initialization process (I mean the case when we have to determine whether a temporary password is needed).

Otherwise, Application will have to read the password hash from the Settings directly, bypassing the corresponding WebUI accessor."
1384476951,19777,glassez,2023-11-07T07:20:08Z,"> Ah, I get it now... I'll think about it.

Well, I fixed it in GUI.
I don't know how best to do the same on the WebUI. I should at least send there information about whether there is password configured at the moment (aka `has_webui_password_configured`)."
1384522197,19777,sledgehammer999,2023-11-07T08:08:48Z,"```c++
pref->setWebUIUsername(username);
```"
1384522763,19777,sledgehammer999,2023-11-07T08:09:19Z,"```c++
pref->setWebUIPassword(Utils::Password::PBKDF2::generate(password));
```"
1386073599,19777,glassez,2023-11-08T06:35:38Z,"> I don't know how best to do the same on the WebUI. I should at least send there information about whether there is password configured at the moment (aka `has_webui_password_configured`).

Well, seems there is no such problem for WebUI. After all, in order to change these settings from the WebUI, the user must be logged in, i.e. some password is configured in any case (or a temporary one is used)."
1374428077,19801,Chocobo1,2023-10-27T11:20:27Z,"I would suggest using a proper data type:
```suggestion
        CachedSettingValue<std::chrono::seconds> m_storeFetchDelay;
```"
1374428231,19801,Chocobo1,2023-10-27T11:20:38Z,"```suggestion
        std::chrono::seconds fetchDelay() const;
        void setFetchDelay(std::chrono::seconds fetchDelay);
```"
1374431843,19801,Chocobo1,2023-10-27T11:24:47Z,"```suggestion
    rssSession->setFetchDelay(std::chrono::seconds(m_ui->spinRSSFetchDelay->value()));
```"
1374432131,19801,Chocobo1,2023-10-27T11:25:07Z,"```suggestion
    data[u""rss_fetch_delay""_s] = static_cast<int>(RSS::Session::instance()->fetchDelay().count());
```"
1374435304,19801,Chocobo1,2023-10-27T11:27:41Z,"```suggestion
        RSS::Session::instance()->setFetchDelay(std::chrono::seconds(it.value().toInt()));
```"
1374436465,19801,Chocobo1,2023-10-27T11:28:15Z,"fix coding style:
```suggestion
    if (delay == fetchDelay())  // please use getter function here
        return;
```"
1374439011,19801,Chocobo1,2023-10-27T11:30:42Z,"Rename local variable to avoid name clash with `Session::fetchDelay()`:
```suggestion
void Session::setFetchDelay(const int delay)
```"
1374439970,19801,Chocobo1,2023-10-27T11:31:38Z,"New code should use camel case for `id`:
```suggestion
                    <input type=""text"" id=""feedFetchDelay"" style=""width: 4em;"" />&nbsp;&nbsp;QBT_TR( sec)QBT_TR[CONTEXT=OptionsDialog]
```"
1374441746,19801,Chocobo1,2023-10-27T11:32:58Z,"Remove this, you don't need it."
1374442113,19801,Chocobo1,2023-10-27T11:33:24Z,"```suggestion
    , m_storeFetchDelay(u""RSS/Session/FetchDelay""_s, 2s)
```"
1374558202,19801,glassez,2023-10-27T13:12:56Z,"As I see it, you went the wrong way and introduced an unacceptable dependency. RSS subsystem is a client of Download Manager, so Download Manager should not depend on RSS subsystem.
If you don't have any ideas how to fix it, I can help with that later.
The first thing that comes to mind is to set a delay during sequential service registration (via `registerSequentialService()`). This will also allow you to set a separate delay for each site, if a single one for everyone is not enough (by the way, why not do it initially?)."
1382176714,19801,jNullj,2023-11-03T20:37:56Z,"After looking at this i think i get the issue with the dependency of Download Manager by RSS. I think using `registerSequentialService` is a great idea and can present flexibility for future growth and avoid the problematic dependency between RSS and Download Manager.

I think i could overload the function `registerSequentialService` and allow a second parameter as the delay time, then add a QHash with the delays linked to the ServiceID, a better way might be to change the ServiceID struct and add the delay to it.
Please let me know what you think so i can make another commit or a rebase to make those changes."
1382195760,19801,jNullj,2023-11-03T20:56:37Z,"It looks great, more readable and safer, didn't know std had chrono.
I will add those suggestions."
1427627890,19801,glassez,2023-12-15T07:09:36Z,"```suggestion
void Net::DownloadManager::registerSequentialService(const Net::ServiceID &serviceID, const std::chrono::seconds delay)
```"
1427628177,19801,glassez,2023-12-15T07:09:58Z,"```suggestion
    setSequentialServiceDelay(serviceID, delay);
```"
1427671255,19801,glassez,2023-12-15T08:05:44Z,"```suggestion
void Net::DownloadManager::setSequentialServiceDelay(const ServiceID &serviceID, const std::chrono::seconds delay)
```"
1427672869,19801,glassez,2023-12-15T08:07:56Z,"```suggestion
        QTimer::singleShot(m_serviceDelay[id] , this, [this, id]
        {
            handleDownloadFinished(id);
        });
```
or
```suggestion
        QTimer::singleShot(m_serviceDelay[id] , this, [this, id] { handleDownloadFinished(id); });
```"
1427676023,19801,glassez,2023-12-15T08:11:56Z,"IMO, having yet another field is redundant. I would just modify existing one:
```c++
QHash<ServiceID, std::chrono::seconds> m_sequentialServices;
```"
1427690754,19801,glassez,2023-12-15T08:27:30Z,"IMO, it's redundant. I would just use `CachedSettingValue<qint64>` than add all these additional types `std::chrono::seconds`, `std::chrono::milliseconds` etc. here."
1427692272,19801,glassez,2023-12-15T08:28:46Z,"IMO, it's redundant. I would just use `CachedSettingValue<qint64>` than add all these additional types `std::chrono::seconds`, `std::chrono::milliseconds` etc. here."
1427696358,19801,glassez,2023-12-15T08:33:17Z,These changes look unnecessary/redundant.
1427697822,19801,glassez,2023-12-15T08:35:02Z,The changes in this file look messy. Please remake it manually to avoid unnecessary changes.
1427699567,19801,glassez,2023-12-15T08:37:06Z,Wouldn't `Delay requests to same host` be more clear?
1428458076,19801,jNullj,2023-12-15T20:37:28Z,Resolved at a4eb01b6a8b808441f97b3e624f691945f2a4ed0
1428458414,19801,jNullj,2023-12-15T20:37:49Z,Resolved at a4eb01b6a8b808441f97b3e624f691945f2a4ed0
1428459567,19801,jNullj,2023-12-15T20:39:15Z,Resolved at 590c53dbb22e7d8f9703423259d3a167748ed56c
1428459854,19801,jNullj,2023-12-15T20:39:38Z,Resolved at 590c53dbb22e7d8f9703423259d3a167748ed56c
1428460600,19801,jNullj,2023-12-15T20:40:28Z,"Sounds good, i made those changes at 9eb1dc23062def333d7db4e16fb21decffa878ed"
1428461903,19801,jNullj,2023-12-15T20:41:55Z,Resolved at 59c3025013775268e4e66e3509bf7b33924879b5
1428463690,19801,jNullj,2023-12-15T20:44:20Z,"I made a new commit at 59c3025013775268e4e66e3509bf7b33924879b5 to make the diff for this PR more readable manually.
Didn't notice that Qt Designer shifted them"
1428464879,19801,jNullj,2023-12-15T20:46:05Z,"Ended up renaming it to `Same host request delay` as its a bit shorter.
at 3e91435acd2b343a8ed5c1f48c0285c509ecc1a5"
1428476287,19801,jNullj,2023-12-15T20:57:50Z,"I think its better to keep it that way, so it can be reused in other places that reference time because i think it might be safer to keep the types as time types and keep the conversion abstract for the developer.

I might suggest even pushing more into using chrono types, for example changing CachedSettingValue<int> for other intervals into chrono types:

example:
change m_storeRefreshInterval type to min
```cpp
        CachedSettingValue<int> m_storeRefreshInterval;
        CachedSettingValue<std::chrono::seconds> m_storeFetchDelay;
```
into
```cpp
        CachedSettingValue<std::chrono::minutes> m_storeRefreshInterval;
        CachedSettingValue<std::chrono::seconds> m_storeFetchDelay;
```

let me know if you accept or reject this so i know if i should make another update to this PR."
1428476394,19801,jNullj,2023-12-15T20:57:56Z,"I think its better to keep it that way, so it can be reused in other places that reference time because i think it might be safer to keep the types as time types and keep the conversion abstract for the developer.

I might suggest even pushing more into using chrono types, for example changing CachedSettingValue<int> for other intervals into chrono types:

example:
change m_storeRefreshInterval type to min
```cpp
        CachedSettingValue<int> m_storeRefreshInterval;
        CachedSettingValue<std::chrono::seconds> m_storeFetchDelay;
```
into
```cpp
        CachedSettingValue<std::chrono::minutes> m_storeRefreshInterval;
        CachedSettingValue<std::chrono::seconds> m_storeFetchDelay;
```

let me know if you accept or reject this so i know if i should make another update to this PR."
1429225776,19801,glassez,2023-12-17T18:04:56Z,It does exactly the same as `registerSequentialService()` does.
1429226429,19801,glassez,2023-12-17T18:07:35Z,"```suggestion
        // m_sequentialServices value is delay for same host requests
```"
1429954146,19801,glassez,2023-12-18T11:19:33Z,"You need to check whether this URL is actually registered as a sequential service. At least, you shouldn't use `operator[]` below, because it will unexpectedly add this URL in sequential services registry if it wasn't there."
1429956270,19801,glassez,2023-12-18T11:21:24Z,"> I might suggest even pushing more into using chrono types, for example changing CachedSettingValue for other intervals into chrono types

At least not in this PR."
1430595047,19801,jNullj,2023-12-18T20:04:29Z,"I fixed as requested at https://github.com/qbittorrent/qBittorrent/pull/19801/commits/ea4ad45c85b8284efdb076e06976d05bbcda111b , I might draft a separate PR for that in the future"
1430603588,19801,jNullj,2023-12-18T20:14:41Z,"Fixed with c62f38abca02a0396b6371d2d215d0bc01c53951
I removed setSequentialServiceDelay and replace refrences with registerSequentialService.
Didn't notice QHash insert updates value if key already exists"
1430619202,19801,jNullj,2023-12-18T20:33:51Z,"Good notice, Fixed with 7f6556f1703d81227435d7ef755c2bba39315d60
I added both a check for containing the key to avoid unneeded timers.
Also added default 0s value in any case."
1431272652,19801,glassez,2023-12-19T11:20:53Z,"Wouldn't it work without repeating result type?
```suggestion
    return {m_storeFetchDelay};
```"
1431756318,19801,glassez,2023-12-19T17:51:13Z,"Last comment from me.
I would put all this handling into `handleDownloadFinished` instead (since it seems to be more logically correct to delay processing the next request instead of handling previous one finishing):
```c++
void Net::DownloadManager::handleDownloadFinished(DownloadHandlerImpl *finishedHandler)
{
    const ServiceID id = ServiceID::fromURL(finishedHandler->url());
    const auto waitingJobsIter = m_waitingJobs.find(id);
    if ((waitingJobsIter == m_waitingJobs.end()) || waitingJobsIter.value().isEmpty())
    {
        // No more waiting jobs for given ServiceID
        m_busyServices.remove(id);
        return;
    }

    auto *handler = waitingJobsIter.value().dequeue();
    handler->disconnect(this);
    QTimer::singleShot(m_sequentialServices.value(id, 0s) , this, [this, handler]
    {
        qDebug(""Downloading %s..."", qUtf8Printable(handler->url()));
        processRequest(handler);
    }
}
```"
1431928755,19801,jNullj,2023-12-19T20:53:49Z,"Should work, but less explicit. I don't object as this is a short function."
1431933640,19801,jNullj,2023-12-19T21:00:00Z,"Surprisingly it did not work

```
[build] ....../code/qBittorrent/src/base/rss/rss_session.cpp:532:12: error: chosen constructor is explicit in copy-initialization
[build]     return {m_storeFetchDelay};
[build]            ^~~~~~~~~~~~~~~~~~~
[build] /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../include/c++/13.2.1/bits/chrono.h:571:23: note: explicit constructor declared here
[build]           constexpr explicit duration(const _Rep2& __rep)
[build]                              ^
[build] 1 error generated.
```

explicit is required by the constructor

Reverting https://github.com/qbittorrent/qBittorrent/pull/19801/commits/a6b21286dd409a53d656896f8d5a2eaf9821d674
Please consider keeping the syntax as is."
1431957319,19801,jNullj,2023-12-19T21:31:00Z,"That's a great idea, cleaner and more logical, also `handleDownloadFinished` already checks if the service is registered making it more compact."
1431959467,19801,jNullj,2023-12-19T21:34:10Z,Solved with https://github.com/qbittorrent/qBittorrent/pull/19801/commits/5722c3cd55a837292c65c3ac928fae385c7a3f81
1443762953,19801,glassez,2024-01-06T13:19:30Z,"```suggestion
```"
1443763269,19801,glassez,2024-01-06T13:21:11Z,"```suggestion
                  <widget class=""QLabel"" name=""labelRSSFetchDelay"">
```"
1443949066,19801,Chocobo1,2024-01-07T07:20:55Z,"Lets use the integer type that won't ever clip the values:
```suggestion
    data[u""rss_fetch_delay""_s] = static_cast<qlonglong>(RSS::Session::instance()->fetchDelay().count());
```"
1443949190,19801,Chocobo1,2024-01-07T07:21:57Z,"```suggestion
        RSS::Session::instance()->setFetchDelay(std::chrono::seconds(it.value().toLongLong()));
```"
1443949527,19801,Chocobo1,2024-01-07T07:24:48Z,"If possible I would allow the maximum value to avoid potential user complaints about some artificial limit:
```suggestion
                    <number>2147483646</number>
```"
1443952595,19801,Chocobo1,2024-01-07T07:42:54Z,"Speculative question, should `disconnect()` happens after `processRequest()` or it doesn't matter?
```suggestion
    QTimer::singleShot(m_sequentialServices.value(id, 0s) , this, [this, handler]
    {
        qDebug(""Downloading %s..."", qUtf8Printable(handler->url()));
        processRequest(handler);
        handler->disconnect(this);
    });
```"
1443956820,19801,glassez,2024-01-07T08:07:14Z,It is connected to be removed from waiting jobs queue in case it is destroyed before finished (e.g. when cancelled by user side). So it should be disconnected once we explicitly removed it from queue. Seems it is OK to disconnect after processRequest. The main thing is to do it before handler is deleted.
1444073623,19801,jNullj,2024-01-07T21:12:53Z,"Didn't think about the edge case of users going that high with the delay.
Fixed with https://github.com/qbittorrent/qBittorrent/pull/19801/commits/aa9608600f1584fc77f3ad8d3f194b73f446ea08"
1444073639,19801,jNullj,2024-01-07T21:13:07Z,Fixed with https://github.com/qbittorrent/qBittorrent/commit/aa9608600f1584fc77f3ad8d3f194b73f446ea08
1444073769,19801,jNullj,2024-01-07T21:14:05Z,"It won't hurt anyone having the freedom to set high values. Looks like good practice to think of that case
Fixed with https://github.com/qbittorrent/qBittorrent/pull/19801/commits/6fa7c4ea81673318f80929f5fedc5bb53150de97"
1451659256,19801,glassez,2024-01-14T05:18:30Z,"1. As you might have noticed, we are adding new copyrights to the top.
2. If you don't want to provide your real email, just don't do it, you don't need to use such ""noreply"" address."
1451789312,19801,jNullj,2024-01-14T19:23:38Z,Fixed at 8f6218e
1460663183,19801,HanabishiRecca,2024-01-20T20:56:34Z,"This line breaks WebUI options window.

When opening the options, values in `Web UI` and `Advanced` tabs do not load.
The script throws

```
Uncaught ReferenceError: perf is not defined
    onSuccess https://x.x.x.x:8080/ line 5 > injectedScript:713
```

This is a typo obviously.

```suggestion
                        $('feedFetchDelay').setProperty('value', pref.rss_fetch_delay);
```"
1465434261,19801,jNullj,2024-01-24T19:21:59Z,"Oddly i run this branch and i just tested and able to open Advanced, but i do get other issues that don't show up as errors. Maybe that's related to running on linux?
But this should be fixed, good call.
I will push a fix."
1465440513,19801,HanabishiRecca,2024-01-24T19:28:17Z,"The tab does open, but values do not load, the fields there are empty. This error was captured in Firefox, I am fairly sure JS runs the same regardless of OS.

But yeah, the typo is obviously there anyway."
1465444404,19801,jNullj,2024-01-24T19:32:10Z,"I see, in js, by bad, i was looking for errors in the debug terminal, didn't realize i should look at the js as well."
1465454262,19801,jNullj,2024-01-24T19:42:30Z,"Opened a PR #20326  with commit ee5a93145dfd889776fbfbb136b63056dc40d236 to solve this, as this PR is already merged"
356942737,11637,Chocobo1,2019-12-12T03:23:49Z,This will take up too much memory than the user expectation and they will complain.
357072606,11637,FranciscoPombal,2019-12-12T10:36:55Z,"Which one, specifically? If the DiskCacheSize is on auto, the OS will manage it as needed as cached memory and free it for application that needed as far as I know, so there should be  no problem. If user complains are something like [this](https://www.linuxatemyram.com/), it is not an issue.

 As for CheckingMemUsageSize, on systems with very low available memory like the early/less powerful RPis (256 - 512 MiB), I can see this being the straw that breaks the camel's back. But isn't it a one-time cost, since qBittorrent only checks one torrent at a time? Also I would argue that early model Pis fall into the ""extreme end"" of lower performance machines, I would not say they are part of the common case, but then again, I don't have data to back this up, it is just an opinion. What about simply raising it to 32 MiB instead, as a compromise?"
357473163,11637,Chocobo1,2019-12-13T03:34:00Z,">If the DiskCacheSize is on auto, the OS will manage it as needed as cached memory and free it for application that needed as far as I know, so there should be no problem.

That is not quite right, see this:
https://www.libtorrent.org/single-page-ref.html#cache_size
https://github.com/arvidn/libtorrent/blob/d33b0506a0f4cd61860fd54864267c82d3e171e3/src/disk_buffer_pool.cpp#L287

>If user complains are something like this, it is not an issue.

LOL

>What about simply raising it to 32 MiB instead, as a compromise?

OK for me.
"
357474481,11637,Chocobo1,2019-12-13T03:42:32Z,"there was some unsettled discussion in another thread, I don't think there is conscious to change this yet."
357474838,11637,Chocobo1,2019-12-13T03:45:15Z,... you do realize the two numbers above will be multiplied by 1024 when passed to libtorrent?
357583668,11637,FranciscoPombal,2019-12-13T10:38:48Z,"> > If the DiskCacheSize is on auto, the OS will manage it as needed as cached memory and free it for application that needed as far as I know, so there should be no problem.
> 
> That is not quite right, see this:
> https://www.libtorrent.org/single-page-ref.html#cache_size
> https://github.com/arvidn/libtorrent/blob/d33b0506a0f4cd61860fd54864267c82d3e171e3/src/disk_buffer_pool.cpp#L287
> > If user complains are something like this, it is not an issue.
> 
> LOL

What's funny? Did you see the link? I am simply saying that users complaining about memory that is ""used"", but actually available for other programs is not a problem. However, as you pointed out, it seems I was wrong about the nature of libtorrent's memory allocation for the disk cache. Still, having looked at the source code you linked, the actual allocated values in auto mode seem quite reasonable:

```C++
// we take a 40th of everything exceeding 4 GiB
// a 30th of everything exceeding 1 GiB
// and a 10th of everything below a GiB
```

Some examples:

- 512 MiB RAM: 512/10 = ~51,2 MiB allocated for the disk cache (actually a bit smaller than the current default, which with this little RAM is probably a good thing)
- 1 GiB RAM: 1024/10 = ~100 MiB (only slightly bigger)
- 2 GiB RAM: 2048/30 = ~68 MiB (about on par)
- 4 GiB RAM: 4096/30 = ~136 MiB (bigger, not unreasonable)
- 8 GIB RAM: 8192/40 = ~200 MiB (bigger, not unreasonable)
- 16 GiB RAM: 16384/40 = ~400 MiB (bigger, not unreasonable)
...

For 2 GiB and less, the values are actually similar to the current default. For higher amounts, the values are bigger, but still a rather small percentage vs. total system memory, while providing a nice performance boost. Additionally, it is 1000x better than the snake-oil amounts I see users allocate manually, due to perceiving the default of 64 MiB as ""small"". I have seen many issues/comments here about users trying to optimize read/write performance, by allocating silly values like 1 GiB, 2 GiB, 3 GiB or more to the cache which at best is just wasteful and at worst is actually detrimental to performance. "
357589246,11637,FranciscoPombal,2019-12-13T10:52:30Z,"What are to pros/cons, potential problems, can you link the relevant thread please? I couldn't find it by searching."
357590607,11637,FranciscoPombal,2019-12-13T10:55:49Z,"~Mistake, will fix~

Actually, this was my intention;
1600 -> 1600 * 1024 = 1 638 400 bytes = 1,5625 MiB
16384 -> 16384 * 1024 = 16 777 216 bytes = 16 MiB

Too high?"
357595919,11637,Chocobo1,2019-12-13T11:10:08Z,https://github.com/qbittorrent/qBittorrent/pull/11279
357598794,11637,Chocobo1,2019-12-13T11:17:41Z,">What's funny? Did you see the link? I am simply saying that users complaining about memory that is ""used"", but actually available for other programs is not a problem. 

I hope you're not really offended... I was referring to the top picture in the link.

>I am simply saying that users complaining about memory that is ""used"", but actually available for other programs is not a problem. 

But seriously I don't see many people complain that on our issue tracker.

>Some examples:

Seems reasonable. Also if any low-end system run into problem, I think I'll simply redirect the complain to libtorrent to revise their formula."
357600204,11637,Chocobo1,2019-12-13T11:21:55Z,">Too high?

I don't know, since you're tweaking it, you should give reasons to justify the change."
357604898,11637,FranciscoPombal,2019-12-13T11:35:13Z,"> > What's funny? Did you see the link? I am simply saying that users complaining about memory that is ""used"", but actually available for other programs is not a problem.

> I hope you're not really offended... I was referring to the top picture in the link.

I didn't take anything personally, I realized that if you hadn't seen the link by accident, the whole sentence sounded like ""it is not a problem if users complain about qbt using more memory"" which is a bit silly without context.

> But seriously I don't see many people complain that on our issue tracker.

Me neither so far, let's hope it stays that way.

> Seems reasonable. Also if any low-end system run into problem, I think I'll simply redirect the complain to libtorrent to revise their formula.

Ok. The current formula seems fair for low-end systems (though there is that outlier ""jump"" @ 1 GiB). I'd actually be more concerned with the fact that there is no additional branch in the formula beyond 4 GiB. Users with higher end machines with 32 GiB, 64 GiB or higher will get caches of 800  MiB, 1.6 GiB and beyond, which is almost certainly wasteful. Though with that much total system memory, that is very much a first-world problem, and like you said, a problem to be solved on libtorrent's side anyway."
357607397,11637,FranciscoPombal,2019-12-13T11:41:29Z,"> > Too high?
> 
> I don't know, since you're tweaking it, you should give reasons to justify the change.

See my comment above: https://github.com/qbittorrent/qBittorrent/pull/11637#issuecomment-564712175

These values have been working fine for me even in machines with only 2 GiB RAM, though in my use case it is fine if qbit consumes 700+ MiBs which is probably not ok in the general case, and I don't know how much of that memory usage is due to these settings. I am certain that increasing the values from the current defaults is the right thing to do, I am just not sure by _how much_  they should be increased. Even in my use cases, I might already be in snake-oil territory, but I can't be sure. That's why I need help figuring out a way to come up with reasonable values."
357613518,11637,FranciscoPombal,2019-12-13T11:59:09Z,"Thanks, I read through the issue and came to the following conclusion:
It is better to enable both settings (AnnounceToAllTiers, which is already enabled by default, and this one), since it maximizes peer discoverability, at the cost of a tiny violation of the spec.

It follows the principle of least surprise: nowadays users expect all trackers to be contacted always, since the reason they add them in the first place is to find more peers, regardless of the intention and motivation behind the original multi tracker spec. Plus, it is always possible to toggle the setting off to strictly follow the spec. But for the average user, in 2020, I think this is the better default."
357615229,11637,FranciscoPombal,2019-12-13T12:04:37Z,"By the way, I think the one of the main issues with multiple trackers/adding new trackers in qbt is sumarised in this comment: https://github.com/qbittorrent/qBittorrent/pull/11279#issuecomment-536162910

There is no fine-grain control of which tier a tracker should be added to and how many tiers there should be."
